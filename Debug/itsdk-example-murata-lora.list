
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027354  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a30  08027414  08027414  00037414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029e44  08029e44  00040230  2**0
                  CONTENTS
  4 .ARM          00000008  08029e44  08029e44  00039e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029e4c  08029e4c  00040230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029e4c  08029e4c  00039e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029e50  08029e50  00039e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08029e54  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002214  20000230  0802a084  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002444  0802a084  00042444  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00040230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00081c45  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c20f  00000000  00000000  000c1e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000031b0  00000000  00000000  000ce0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d30  00000000  00000000  000d1260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029747  00000000  00000000  000d3f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00042418  00000000  00000000  000fd6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b650e  00000000  00000000  0013faef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f5ffd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba18  00000000  00000000  001f6078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000230 	.word	0x20000230
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080273fc 	.word	0x080273fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000234 	.word	0x20000234
 8000104:	080273fc 	.word	0x080273fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fba9 	bl	8001b6c <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fb01 	bl	8001a2c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fb9b 	bl	8001b6c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fb91 	bl	8001b6c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb23 	bl	8001aa4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb19 	bl	8001aa4 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_cfrcmple>:
 8000480:	4684      	mov	ip, r0
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	4661      	mov	r1, ip
 8000486:	e7ff      	b.n	8000488 <__aeabi_cfcmpeq>

08000488 <__aeabi_cfcmpeq>:
 8000488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048a:	f000 fa13 	bl	80008b4 <__lesf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	d401      	bmi.n	8000496 <__aeabi_cfcmpeq+0xe>
 8000492:	2100      	movs	r1, #0
 8000494:	42c8      	cmn	r0, r1
 8000496:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000498 <__aeabi_fcmpeq>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 f995 	bl	80007c8 <__eqsf2>
 800049e:	4240      	negs	r0, r0
 80004a0:	3001      	adds	r0, #1
 80004a2:	bd10      	pop	{r4, pc}

080004a4 <__aeabi_fcmplt>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fa05 	bl	80008b4 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db01      	blt.n	80004b2 <__aeabi_fcmplt+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmple>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f9fb 	bl	80008b4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dd01      	ble.n	80004c6 <__aeabi_fcmple+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpgt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f9a3 	bl	8000818 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dc01      	bgt.n	80004da <__aeabi_fcmpgt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpge>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f999 	bl	8000818 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	da01      	bge.n	80004ee <__aeabi_fcmpge+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_ldivmod>:
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d115      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d113      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	db06      	blt.n	800050e <__aeabi_ldivmod+0x1a>
 8000500:	dc01      	bgt.n	8000506 <__aeabi_ldivmod+0x12>
 8000502:	2800      	cmp	r0, #0
 8000504:	d006      	beq.n	8000514 <__aeabi_ldivmod+0x20>
 8000506:	2000      	movs	r0, #0
 8000508:	43c0      	mvns	r0, r0
 800050a:	0841      	lsrs	r1, r0, #1
 800050c:	e002      	b.n	8000514 <__aeabi_ldivmod+0x20>
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0609      	lsls	r1, r1, #24
 8000512:	2000      	movs	r0, #0
 8000514:	b407      	push	{r0, r1, r2}
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <__aeabi_ldivmod+0x2c>)
 8000518:	a101      	add	r1, pc, #4	; (adr r1, 8000520 <__aeabi_ldivmod+0x2c>)
 800051a:	1840      	adds	r0, r0, r1
 800051c:	9002      	str	r0, [sp, #8]
 800051e:	bd03      	pop	{r0, r1, pc}
 8000520:	fffffee1 	.word	0xfffffee1
 8000524:	b403      	push	{r0, r1}
 8000526:	4668      	mov	r0, sp
 8000528:	b501      	push	{r0, lr}
 800052a:	9802      	ldr	r0, [sp, #8]
 800052c:	f000 f930 	bl	8000790 <__gnu_ldivmod_helper>
 8000530:	9b01      	ldr	r3, [sp, #4]
 8000532:	469e      	mov	lr, r3
 8000534:	b002      	add	sp, #8
 8000536:	bc0c      	pop	{r2, r3}
 8000538:	4770      	bx	lr
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <__aeabi_uldivmod>:
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d10f      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000544:	2900      	cmp	r1, #0
 8000546:	d100      	bne.n	800054a <__aeabi_uldivmod+0xe>
 8000548:	2800      	cmp	r0, #0
 800054a:	d002      	beq.n	8000552 <__aeabi_uldivmod+0x16>
 800054c:	2100      	movs	r1, #0
 800054e:	43c9      	mvns	r1, r1
 8000550:	1c08      	adds	r0, r1, #0
 8000552:	b407      	push	{r0, r1, r2}
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <__aeabi_uldivmod+0x24>)
 8000556:	a102      	add	r1, pc, #8	; (adr r1, 8000560 <__aeabi_uldivmod+0x24>)
 8000558:	1840      	adds	r0, r0, r1
 800055a:	9002      	str	r0, [sp, #8]
 800055c:	bd03      	pop	{r0, r1, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	fffffea1 	.word	0xfffffea1
 8000564:	b403      	push	{r0, r1}
 8000566:	4668      	mov	r0, sp
 8000568:	b501      	push	{r0, lr}
 800056a:	9802      	ldr	r0, [sp, #8]
 800056c:	f000 f84e 	bl	800060c <__udivmoddi4>
 8000570:	9b01      	ldr	r3, [sp, #4]
 8000572:	469e      	mov	lr, r3
 8000574:	b002      	add	sp, #8
 8000576:	bc0c      	pop	{r2, r3}
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)

0800057c <__aeabi_lmul>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	46ce      	mov	lr, r9
 8000580:	4647      	mov	r7, r8
 8000582:	0415      	lsls	r5, r2, #16
 8000584:	0c2d      	lsrs	r5, r5, #16
 8000586:	002e      	movs	r6, r5
 8000588:	b580      	push	{r7, lr}
 800058a:	0407      	lsls	r7, r0, #16
 800058c:	0c14      	lsrs	r4, r2, #16
 800058e:	0c3f      	lsrs	r7, r7, #16
 8000590:	4699      	mov	r9, r3
 8000592:	0c03      	lsrs	r3, r0, #16
 8000594:	437e      	muls	r6, r7
 8000596:	435d      	muls	r5, r3
 8000598:	4367      	muls	r7, r4
 800059a:	4363      	muls	r3, r4
 800059c:	197f      	adds	r7, r7, r5
 800059e:	0c34      	lsrs	r4, r6, #16
 80005a0:	19e4      	adds	r4, r4, r7
 80005a2:	469c      	mov	ip, r3
 80005a4:	42a5      	cmp	r5, r4
 80005a6:	d903      	bls.n	80005b0 <__aeabi_lmul+0x34>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	025b      	lsls	r3, r3, #9
 80005ac:	4698      	mov	r8, r3
 80005ae:	44c4      	add	ip, r8
 80005b0:	464b      	mov	r3, r9
 80005b2:	4343      	muls	r3, r0
 80005b4:	4351      	muls	r1, r2
 80005b6:	0c25      	lsrs	r5, r4, #16
 80005b8:	0436      	lsls	r6, r6, #16
 80005ba:	4465      	add	r5, ip
 80005bc:	0c36      	lsrs	r6, r6, #16
 80005be:	0424      	lsls	r4, r4, #16
 80005c0:	19a4      	adds	r4, r4, r6
 80005c2:	195b      	adds	r3, r3, r5
 80005c4:	1859      	adds	r1, r3, r1
 80005c6:	0020      	movs	r0, r4
 80005c8:	bc0c      	pop	{r2, r3}
 80005ca:	4690      	mov	r8, r2
 80005cc:	4699      	mov	r9, r3
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d0 <__aeabi_d2uiz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <__aeabi_d2uiz+0x38>)
 80005d6:	0004      	movs	r4, r0
 80005d8:	000d      	movs	r5, r1
 80005da:	f7ff ff47 	bl	800046c <__aeabi_dcmpge>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d104      	bne.n	80005ec <__aeabi_d2uiz+0x1c>
 80005e2:	0020      	movs	r0, r4
 80005e4:	0029      	movs	r1, r5
 80005e6:	f002 f8e3 	bl	80027b0 <__aeabi_d2iz>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <__aeabi_d2uiz+0x38>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	0020      	movs	r0, r4
 80005f2:	0029      	movs	r1, r5
 80005f4:	f001 fd94 	bl	8002120 <__aeabi_dsub>
 80005f8:	f002 f8da 	bl	80027b0 <__aeabi_d2iz>
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	469c      	mov	ip, r3
 8000602:	4460      	add	r0, ip
 8000604:	e7f1      	b.n	80005ea <__aeabi_d2uiz+0x1a>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	41e00000 	.word	0x41e00000

0800060c <__udivmoddi4>:
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	464f      	mov	r7, r9
 8000610:	4646      	mov	r6, r8
 8000612:	46d6      	mov	lr, sl
 8000614:	b5c0      	push	{r6, r7, lr}
 8000616:	0004      	movs	r4, r0
 8000618:	b082      	sub	sp, #8
 800061a:	000d      	movs	r5, r1
 800061c:	4691      	mov	r9, r2
 800061e:	4698      	mov	r8, r3
 8000620:	428b      	cmp	r3, r1
 8000622:	d82f      	bhi.n	8000684 <__udivmoddi4+0x78>
 8000624:	d02c      	beq.n	8000680 <__udivmoddi4+0x74>
 8000626:	4641      	mov	r1, r8
 8000628:	4648      	mov	r0, r9
 800062a:	f002 f9d3 	bl	80029d4 <__clzdi2>
 800062e:	0029      	movs	r1, r5
 8000630:	0006      	movs	r6, r0
 8000632:	0020      	movs	r0, r4
 8000634:	f002 f9ce 	bl	80029d4 <__clzdi2>
 8000638:	1a33      	subs	r3, r6, r0
 800063a:	469c      	mov	ip, r3
 800063c:	3b20      	subs	r3, #32
 800063e:	469a      	mov	sl, r3
 8000640:	d500      	bpl.n	8000644 <__udivmoddi4+0x38>
 8000642:	e076      	b.n	8000732 <__udivmoddi4+0x126>
 8000644:	464b      	mov	r3, r9
 8000646:	4652      	mov	r2, sl
 8000648:	4093      	lsls	r3, r2
 800064a:	001f      	movs	r7, r3
 800064c:	464b      	mov	r3, r9
 800064e:	4662      	mov	r2, ip
 8000650:	4093      	lsls	r3, r2
 8000652:	001e      	movs	r6, r3
 8000654:	42af      	cmp	r7, r5
 8000656:	d828      	bhi.n	80006aa <__udivmoddi4+0x9e>
 8000658:	d025      	beq.n	80006a6 <__udivmoddi4+0x9a>
 800065a:	4653      	mov	r3, sl
 800065c:	1ba4      	subs	r4, r4, r6
 800065e:	41bd      	sbcs	r5, r7
 8000660:	2b00      	cmp	r3, #0
 8000662:	da00      	bge.n	8000666 <__udivmoddi4+0x5a>
 8000664:	e07b      	b.n	800075e <__udivmoddi4+0x152>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	4652      	mov	r2, sl
 8000672:	4093      	lsls	r3, r2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	4662      	mov	r2, ip
 800067a:	4093      	lsls	r3, r2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	e018      	b.n	80006b2 <__udivmoddi4+0xa6>
 8000680:	4282      	cmp	r2, r0
 8000682:	d9d0      	bls.n	8000626 <__udivmoddi4+0x1a>
 8000684:	2200      	movs	r2, #0
 8000686:	2300      	movs	r3, #0
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <__udivmoddi4+0x8a>
 8000692:	601c      	str	r4, [r3, #0]
 8000694:	605d      	str	r5, [r3, #4]
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	b002      	add	sp, #8
 800069c:	bc1c      	pop	{r2, r3, r4}
 800069e:	4690      	mov	r8, r2
 80006a0:	4699      	mov	r9, r3
 80006a2:	46a2      	mov	sl, r4
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d9d7      	bls.n	800065a <__udivmoddi4+0x4e>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4663      	mov	r3, ip
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0e9      	beq.n	800068c <__udivmoddi4+0x80>
 80006b8:	07fb      	lsls	r3, r7, #31
 80006ba:	4698      	mov	r8, r3
 80006bc:	4641      	mov	r1, r8
 80006be:	0872      	lsrs	r2, r6, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	087b      	lsrs	r3, r7, #1
 80006c4:	4666      	mov	r6, ip
 80006c6:	e00e      	b.n	80006e6 <__udivmoddi4+0xda>
 80006c8:	42ab      	cmp	r3, r5
 80006ca:	d101      	bne.n	80006d0 <__udivmoddi4+0xc4>
 80006cc:	42a2      	cmp	r2, r4
 80006ce:	d80c      	bhi.n	80006ea <__udivmoddi4+0xde>
 80006d0:	1aa4      	subs	r4, r4, r2
 80006d2:	419d      	sbcs	r5, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	1924      	adds	r4, r4, r4
 80006d8:	416d      	adcs	r5, r5
 80006da:	2100      	movs	r1, #0
 80006dc:	3e01      	subs	r6, #1
 80006de:	1824      	adds	r4, r4, r0
 80006e0:	414d      	adcs	r5, r1
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d006      	beq.n	80006f4 <__udivmoddi4+0xe8>
 80006e6:	42ab      	cmp	r3, r5
 80006e8:	d9ee      	bls.n	80006c8 <__udivmoddi4+0xbc>
 80006ea:	3e01      	subs	r6, #1
 80006ec:	1924      	adds	r4, r4, r4
 80006ee:	416d      	adcs	r5, r5
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d1f8      	bne.n	80006e6 <__udivmoddi4+0xda>
 80006f4:	9800      	ldr	r0, [sp, #0]
 80006f6:	9901      	ldr	r1, [sp, #4]
 80006f8:	4653      	mov	r3, sl
 80006fa:	1900      	adds	r0, r0, r4
 80006fc:	4169      	adcs	r1, r5
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db23      	blt.n	800074a <__udivmoddi4+0x13e>
 8000702:	002b      	movs	r3, r5
 8000704:	4652      	mov	r2, sl
 8000706:	40d3      	lsrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	4664      	mov	r4, ip
 800070c:	40e2      	lsrs	r2, r4
 800070e:	001c      	movs	r4, r3
 8000710:	4653      	mov	r3, sl
 8000712:	0015      	movs	r5, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	db2d      	blt.n	8000774 <__udivmoddi4+0x168>
 8000718:	0026      	movs	r6, r4
 800071a:	4657      	mov	r7, sl
 800071c:	40be      	lsls	r6, r7
 800071e:	0033      	movs	r3, r6
 8000720:	0026      	movs	r6, r4
 8000722:	4667      	mov	r7, ip
 8000724:	40be      	lsls	r6, r7
 8000726:	0032      	movs	r2, r6
 8000728:	1a80      	subs	r0, r0, r2
 800072a:	4199      	sbcs	r1, r3
 800072c:	9000      	str	r0, [sp, #0]
 800072e:	9101      	str	r1, [sp, #4]
 8000730:	e7ac      	b.n	800068c <__udivmoddi4+0x80>
 8000732:	4662      	mov	r2, ip
 8000734:	2320      	movs	r3, #32
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	464a      	mov	r2, r9
 800073a:	40da      	lsrs	r2, r3
 800073c:	4661      	mov	r1, ip
 800073e:	0013      	movs	r3, r2
 8000740:	4642      	mov	r2, r8
 8000742:	408a      	lsls	r2, r1
 8000744:	0017      	movs	r7, r2
 8000746:	431f      	orrs	r7, r3
 8000748:	e780      	b.n	800064c <__udivmoddi4+0x40>
 800074a:	4662      	mov	r2, ip
 800074c:	2320      	movs	r3, #32
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	4666      	mov	r6, ip
 8000754:	409a      	lsls	r2, r3
 8000756:	0023      	movs	r3, r4
 8000758:	40f3      	lsrs	r3, r6
 800075a:	4313      	orrs	r3, r2
 800075c:	e7d4      	b.n	8000708 <__udivmoddi4+0xfc>
 800075e:	4662      	mov	r2, ip
 8000760:	2320      	movs	r3, #32
 8000762:	2100      	movs	r1, #0
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	2200      	movs	r2, #0
 8000768:	9100      	str	r1, [sp, #0]
 800076a:	9201      	str	r2, [sp, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	40da      	lsrs	r2, r3
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	e780      	b.n	8000676 <__udivmoddi4+0x6a>
 8000774:	2320      	movs	r3, #32
 8000776:	4662      	mov	r2, ip
 8000778:	0026      	movs	r6, r4
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	40de      	lsrs	r6, r3
 800077e:	002f      	movs	r7, r5
 8000780:	46b0      	mov	r8, r6
 8000782:	4666      	mov	r6, ip
 8000784:	40b7      	lsls	r7, r6
 8000786:	4646      	mov	r6, r8
 8000788:	003b      	movs	r3, r7
 800078a:	4333      	orrs	r3, r6
 800078c:	e7c8      	b.n	8000720 <__udivmoddi4+0x114>
 800078e:	46c0      	nop			; (mov r8, r8)

08000790 <__gnu_ldivmod_helper>:
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	0016      	movs	r6, r2
 8000796:	001f      	movs	r7, r3
 8000798:	9000      	str	r0, [sp, #0]
 800079a:	9101      	str	r1, [sp, #4]
 800079c:	f002 f926 	bl	80029ec <__divdi3>
 80007a0:	0004      	movs	r4, r0
 80007a2:	000d      	movs	r5, r1
 80007a4:	0002      	movs	r2, r0
 80007a6:	000b      	movs	r3, r1
 80007a8:	0030      	movs	r0, r6
 80007aa:	0039      	movs	r1, r7
 80007ac:	f7ff fee6 	bl	800057c <__aeabi_lmul>
 80007b0:	9a00      	ldr	r2, [sp, #0]
 80007b2:	9b01      	ldr	r3, [sp, #4]
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	418b      	sbcs	r3, r1
 80007b8:	9908      	ldr	r1, [sp, #32]
 80007ba:	0020      	movs	r0, r4
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	604b      	str	r3, [r1, #4]
 80007c0:	0029      	movs	r1, r5
 80007c2:	b003      	add	sp, #12
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <__eqsf2>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	024e      	lsls	r6, r1, #9
 80007ce:	004c      	lsls	r4, r1, #1
 80007d0:	0245      	lsls	r5, r0, #9
 80007d2:	0a6d      	lsrs	r5, r5, #9
 80007d4:	0e12      	lsrs	r2, r2, #24
 80007d6:	0fc3      	lsrs	r3, r0, #31
 80007d8:	0a76      	lsrs	r6, r6, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d00f      	beq.n	8000802 <__eqsf2+0x3a>
 80007e2:	2cff      	cmp	r4, #255	; 0xff
 80007e4:	d011      	beq.n	800080a <__eqsf2+0x42>
 80007e6:	2001      	movs	r0, #1
 80007e8:	42a2      	cmp	r2, r4
 80007ea:	d000      	beq.n	80007ee <__eqsf2+0x26>
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	42b5      	cmp	r5, r6
 80007f0:	d1fc      	bne.n	80007ec <__eqsf2+0x24>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d00d      	beq.n	8000812 <__eqsf2+0x4a>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d1f8      	bne.n	80007ec <__eqsf2+0x24>
 80007fa:	0028      	movs	r0, r5
 80007fc:	1e45      	subs	r5, r0, #1
 80007fe:	41a8      	sbcs	r0, r5
 8000800:	e7f4      	b.n	80007ec <__eqsf2+0x24>
 8000802:	2001      	movs	r0, #1
 8000804:	2d00      	cmp	r5, #0
 8000806:	d1f1      	bne.n	80007ec <__eqsf2+0x24>
 8000808:	e7eb      	b.n	80007e2 <__eqsf2+0x1a>
 800080a:	2001      	movs	r0, #1
 800080c:	2e00      	cmp	r6, #0
 800080e:	d1ed      	bne.n	80007ec <__eqsf2+0x24>
 8000810:	e7e9      	b.n	80007e6 <__eqsf2+0x1e>
 8000812:	2000      	movs	r0, #0
 8000814:	e7ea      	b.n	80007ec <__eqsf2+0x24>
 8000816:	46c0      	nop			; (mov r8, r8)

08000818 <__gesf2>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	004a      	lsls	r2, r1, #1
 800081c:	024e      	lsls	r6, r1, #9
 800081e:	0245      	lsls	r5, r0, #9
 8000820:	0044      	lsls	r4, r0, #1
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e24      	lsrs	r4, r4, #24
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a76      	lsrs	r6, r6, #9
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	0fc9      	lsrs	r1, r1, #31
 800082e:	2cff      	cmp	r4, #255	; 0xff
 8000830:	d015      	beq.n	800085e <__gesf2+0x46>
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00e      	beq.n	8000854 <__gesf2+0x3c>
 8000836:	2c00      	cmp	r4, #0
 8000838:	d115      	bne.n	8000866 <__gesf2+0x4e>
 800083a:	2a00      	cmp	r2, #0
 800083c:	d101      	bne.n	8000842 <__gesf2+0x2a>
 800083e:	2e00      	cmp	r6, #0
 8000840:	d01c      	beq.n	800087c <__gesf2+0x64>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d014      	beq.n	8000870 <__gesf2+0x58>
 8000846:	428b      	cmp	r3, r1
 8000848:	d027      	beq.n	800089a <__gesf2+0x82>
 800084a:	2002      	movs	r0, #2
 800084c:	3b01      	subs	r3, #1
 800084e:	4018      	ands	r0, r3
 8000850:	3801      	subs	r0, #1
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2e00      	cmp	r6, #0
 8000856:	d0ee      	beq.n	8000836 <__gesf2+0x1e>
 8000858:	2002      	movs	r0, #2
 800085a:	4240      	negs	r0, r0
 800085c:	e7f9      	b.n	8000852 <__gesf2+0x3a>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d1fa      	bne.n	8000858 <__gesf2+0x40>
 8000862:	2aff      	cmp	r2, #255	; 0xff
 8000864:	d00e      	beq.n	8000884 <__gesf2+0x6c>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d10e      	bne.n	8000888 <__gesf2+0x70>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d0ed      	beq.n	800084a <__gesf2+0x32>
 800086e:	e00b      	b.n	8000888 <__gesf2+0x70>
 8000870:	2301      	movs	r3, #1
 8000872:	3901      	subs	r1, #1
 8000874:	4399      	bics	r1, r3
 8000876:	0008      	movs	r0, r1
 8000878:	3001      	adds	r0, #1
 800087a:	e7ea      	b.n	8000852 <__gesf2+0x3a>
 800087c:	2000      	movs	r0, #0
 800087e:	2d00      	cmp	r5, #0
 8000880:	d0e7      	beq.n	8000852 <__gesf2+0x3a>
 8000882:	e7e2      	b.n	800084a <__gesf2+0x32>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d1e7      	bne.n	8000858 <__gesf2+0x40>
 8000888:	428b      	cmp	r3, r1
 800088a:	d1de      	bne.n	800084a <__gesf2+0x32>
 800088c:	4294      	cmp	r4, r2
 800088e:	dd05      	ble.n	800089c <__gesf2+0x84>
 8000890:	2102      	movs	r1, #2
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	4008      	ands	r0, r1
 8000896:	3801      	subs	r0, #1
 8000898:	e7db      	b.n	8000852 <__gesf2+0x3a>
 800089a:	2400      	movs	r4, #0
 800089c:	42a2      	cmp	r2, r4
 800089e:	dc04      	bgt.n	80008aa <__gesf2+0x92>
 80008a0:	42b5      	cmp	r5, r6
 80008a2:	d8d2      	bhi.n	800084a <__gesf2+0x32>
 80008a4:	2000      	movs	r0, #0
 80008a6:	42b5      	cmp	r5, r6
 80008a8:	d2d3      	bcs.n	8000852 <__gesf2+0x3a>
 80008aa:	1e58      	subs	r0, r3, #1
 80008ac:	2301      	movs	r3, #1
 80008ae:	4398      	bics	r0, r3
 80008b0:	3001      	adds	r0, #1
 80008b2:	e7ce      	b.n	8000852 <__gesf2+0x3a>

080008b4 <__lesf2>:
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	0042      	lsls	r2, r0, #1
 80008b8:	0244      	lsls	r4, r0, #9
 80008ba:	024d      	lsls	r5, r1, #9
 80008bc:	0fc3      	lsrs	r3, r0, #31
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	0e12      	lsrs	r2, r2, #24
 80008c4:	0a6d      	lsrs	r5, r5, #9
 80008c6:	0e00      	lsrs	r0, r0, #24
 80008c8:	0fc9      	lsrs	r1, r1, #31
 80008ca:	2aff      	cmp	r2, #255	; 0xff
 80008cc:	d012      	beq.n	80008f4 <__lesf2+0x40>
 80008ce:	28ff      	cmp	r0, #255	; 0xff
 80008d0:	d00c      	beq.n	80008ec <__lesf2+0x38>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d112      	bne.n	80008fc <__lesf2+0x48>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d119      	bne.n	800090e <__lesf2+0x5a>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d117      	bne.n	800090e <__lesf2+0x5a>
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d02b      	beq.n	800093a <__lesf2+0x86>
 80008e2:	2002      	movs	r0, #2
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4018      	ands	r0, r3
 80008e8:	3801      	subs	r0, #1
 80008ea:	e026      	b.n	800093a <__lesf2+0x86>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d0f0      	beq.n	80008d2 <__lesf2+0x1e>
 80008f0:	2002      	movs	r0, #2
 80008f2:	e022      	b.n	800093a <__lesf2+0x86>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d1fb      	bne.n	80008f0 <__lesf2+0x3c>
 80008f8:	28ff      	cmp	r0, #255	; 0xff
 80008fa:	d01f      	beq.n	800093c <__lesf2+0x88>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d11f      	bne.n	8000940 <__lesf2+0x8c>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d11d      	bne.n	8000940 <__lesf2+0x8c>
 8000904:	2002      	movs	r0, #2
 8000906:	3b01      	subs	r3, #1
 8000908:	4018      	ands	r0, r3
 800090a:	3801      	subs	r0, #1
 800090c:	e015      	b.n	800093a <__lesf2+0x86>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d00e      	beq.n	8000930 <__lesf2+0x7c>
 8000912:	428b      	cmp	r3, r1
 8000914:	d1e5      	bne.n	80008e2 <__lesf2+0x2e>
 8000916:	2200      	movs	r2, #0
 8000918:	4290      	cmp	r0, r2
 800091a:	dc04      	bgt.n	8000926 <__lesf2+0x72>
 800091c:	42ac      	cmp	r4, r5
 800091e:	d8e0      	bhi.n	80008e2 <__lesf2+0x2e>
 8000920:	2000      	movs	r0, #0
 8000922:	42ac      	cmp	r4, r5
 8000924:	d209      	bcs.n	800093a <__lesf2+0x86>
 8000926:	1e58      	subs	r0, r3, #1
 8000928:	2301      	movs	r3, #1
 800092a:	4398      	bics	r0, r3
 800092c:	3001      	adds	r0, #1
 800092e:	e004      	b.n	800093a <__lesf2+0x86>
 8000930:	2301      	movs	r3, #1
 8000932:	3901      	subs	r1, #1
 8000934:	4399      	bics	r1, r3
 8000936:	0008      	movs	r0, r1
 8000938:	3001      	adds	r0, #1
 800093a:	bd30      	pop	{r4, r5, pc}
 800093c:	2d00      	cmp	r5, #0
 800093e:	d1d7      	bne.n	80008f0 <__lesf2+0x3c>
 8000940:	428b      	cmp	r3, r1
 8000942:	d1ce      	bne.n	80008e2 <__lesf2+0x2e>
 8000944:	4282      	cmp	r2, r0
 8000946:	dde7      	ble.n	8000918 <__lesf2+0x64>
 8000948:	2102      	movs	r1, #2
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	4008      	ands	r0, r1
 800094e:	3801      	subs	r0, #1
 8000950:	e7f3      	b.n	800093a <__lesf2+0x86>
 8000952:	46c0      	nop			; (mov r8, r8)

08000954 <__aeabi_fsub>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	4647      	mov	r7, r8
 8000958:	46ce      	mov	lr, r9
 800095a:	0044      	lsls	r4, r0, #1
 800095c:	0fc2      	lsrs	r2, r0, #31
 800095e:	b580      	push	{r7, lr}
 8000960:	0247      	lsls	r7, r0, #9
 8000962:	0248      	lsls	r0, r1, #9
 8000964:	0a40      	lsrs	r0, r0, #9
 8000966:	4684      	mov	ip, r0
 8000968:	4666      	mov	r6, ip
 800096a:	0048      	lsls	r0, r1, #1
 800096c:	0a7f      	lsrs	r7, r7, #9
 800096e:	0e24      	lsrs	r4, r4, #24
 8000970:	00f6      	lsls	r6, r6, #3
 8000972:	0025      	movs	r5, r4
 8000974:	4690      	mov	r8, r2
 8000976:	00fb      	lsls	r3, r7, #3
 8000978:	0e00      	lsrs	r0, r0, #24
 800097a:	0fc9      	lsrs	r1, r1, #31
 800097c:	46b1      	mov	r9, r6
 800097e:	28ff      	cmp	r0, #255	; 0xff
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x30>
 8000982:	e085      	b.n	8000a90 <__aeabi_fsub+0x13c>
 8000984:	2601      	movs	r6, #1
 8000986:	4071      	eors	r1, r6
 8000988:	1a26      	subs	r6, r4, r0
 800098a:	4291      	cmp	r1, r2
 800098c:	d057      	beq.n	8000a3e <__aeabi_fsub+0xea>
 800098e:	2e00      	cmp	r6, #0
 8000990:	dd43      	ble.n	8000a1a <__aeabi_fsub+0xc6>
 8000992:	2800      	cmp	r0, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_fsub+0x44>
 8000996:	e07f      	b.n	8000a98 <__aeabi_fsub+0x144>
 8000998:	4649      	mov	r1, r9
 800099a:	2900      	cmp	r1, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fsub+0x4c>
 800099e:	e0aa      	b.n	8000af6 <__aeabi_fsub+0x1a2>
 80009a0:	3e01      	subs	r6, #1
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fsub+0x54>
 80009a6:	e0f7      	b.n	8000b98 <__aeabi_fsub+0x244>
 80009a8:	1a5b      	subs	r3, r3, r1
 80009aa:	015a      	lsls	r2, r3, #5
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_fsub+0x5c>
 80009ae:	e08b      	b.n	8000ac8 <__aeabi_fsub+0x174>
 80009b0:	019b      	lsls	r3, r3, #6
 80009b2:	099c      	lsrs	r4, r3, #6
 80009b4:	0020      	movs	r0, r4
 80009b6:	f001 ffef 	bl	8002998 <__clzsi2>
 80009ba:	3805      	subs	r0, #5
 80009bc:	4084      	lsls	r4, r0
 80009be:	4285      	cmp	r5, r0
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_fsub+0x70>
 80009c2:	e0d3      	b.n	8000b6c <__aeabi_fsub+0x218>
 80009c4:	1b45      	subs	r5, r0, r5
 80009c6:	0023      	movs	r3, r4
 80009c8:	2020      	movs	r0, #32
 80009ca:	3501      	adds	r5, #1
 80009cc:	40eb      	lsrs	r3, r5
 80009ce:	1b45      	subs	r5, r0, r5
 80009d0:	40ac      	lsls	r4, r5
 80009d2:	1e62      	subs	r2, r4, #1
 80009d4:	4194      	sbcs	r4, r2
 80009d6:	4323      	orrs	r3, r4
 80009d8:	2407      	movs	r4, #7
 80009da:	2500      	movs	r5, #0
 80009dc:	401c      	ands	r4, r3
 80009de:	2201      	movs	r2, #1
 80009e0:	4641      	mov	r1, r8
 80009e2:	400a      	ands	r2, r1
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fsub+0x9e>
 80009e8:	210f      	movs	r1, #15
 80009ea:	4019      	ands	r1, r3
 80009ec:	2904      	cmp	r1, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fsub+0x9e>
 80009f0:	3304      	adds	r3, #4
 80009f2:	0159      	lsls	r1, r3, #5
 80009f4:	d400      	bmi.n	80009f8 <__aeabi_fsub+0xa4>
 80009f6:	e080      	b.n	8000afa <__aeabi_fsub+0x1a6>
 80009f8:	3501      	adds	r5, #1
 80009fa:	b2ec      	uxtb	r4, r5
 80009fc:	2dff      	cmp	r5, #255	; 0xff
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fsub+0xae>
 8000a00:	e0a3      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000a02:	24ff      	movs	r4, #255	; 0xff
 8000a04:	2300      	movs	r3, #0
 8000a06:	025b      	lsls	r3, r3, #9
 8000a08:	05e4      	lsls	r4, r4, #23
 8000a0a:	0a58      	lsrs	r0, r3, #9
 8000a0c:	07d2      	lsls	r2, r2, #31
 8000a0e:	4320      	orrs	r0, r4
 8000a10:	4310      	orrs	r0, r2
 8000a12:	bc0c      	pop	{r2, r3}
 8000a14:	4690      	mov	r8, r2
 8000a16:	4699      	mov	r9, r3
 8000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d174      	bne.n	8000b08 <__aeabi_fsub+0x1b4>
 8000a1e:	1c60      	adds	r0, r4, #1
 8000a20:	b2c0      	uxtb	r0, r0
 8000a22:	2801      	cmp	r0, #1
 8000a24:	dc00      	bgt.n	8000a28 <__aeabi_fsub+0xd4>
 8000a26:	e0a7      	b.n	8000b78 <__aeabi_fsub+0x224>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	1a9c      	subs	r4, r3, r2
 8000a2c:	0162      	lsls	r2, r4, #5
 8000a2e:	d500      	bpl.n	8000a32 <__aeabi_fsub+0xde>
 8000a30:	e0b6      	b.n	8000ba0 <__aeabi_fsub+0x24c>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d1be      	bne.n	80009b4 <__aeabi_fsub+0x60>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2400      	movs	r4, #0
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e7e3      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	dc00      	bgt.n	8000a44 <__aeabi_fsub+0xf0>
 8000a42:	e085      	b.n	8000b50 <__aeabi_fsub+0x1fc>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d046      	beq.n	8000ad6 <__aeabi_fsub+0x182>
 8000a48:	2cff      	cmp	r4, #255	; 0xff
 8000a4a:	d049      	beq.n	8000ae0 <__aeabi_fsub+0x18c>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	4648      	mov	r0, r9
 8000a50:	04d2      	lsls	r2, r2, #19
 8000a52:	4310      	orrs	r0, r2
 8000a54:	4681      	mov	r9, r0
 8000a56:	2201      	movs	r2, #1
 8000a58:	2e1b      	cmp	r6, #27
 8000a5a:	dc09      	bgt.n	8000a70 <__aeabi_fsub+0x11c>
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	464c      	mov	r4, r9
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	4084      	lsls	r4, r0
 8000a64:	464a      	mov	r2, r9
 8000a66:	0020      	movs	r0, r4
 8000a68:	40f2      	lsrs	r2, r6
 8000a6a:	1e44      	subs	r4, r0, #1
 8000a6c:	41a0      	sbcs	r0, r4
 8000a6e:	4302      	orrs	r2, r0
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	015a      	lsls	r2, r3, #5
 8000a74:	d528      	bpl.n	8000ac8 <__aeabi_fsub+0x174>
 8000a76:	3501      	adds	r5, #1
 8000a78:	2dff      	cmp	r5, #255	; 0xff
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_fsub+0x12a>
 8000a7c:	e0a8      	b.n	8000bd0 <__aeabi_fsub+0x27c>
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2407      	movs	r4, #7
 8000a82:	4994      	ldr	r1, [pc, #592]	; (8000cd4 <__aeabi_fsub+0x380>)
 8000a84:	401a      	ands	r2, r3
 8000a86:	085b      	lsrs	r3, r3, #1
 8000a88:	400b      	ands	r3, r1
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	401c      	ands	r4, r3
 8000a8e:	e7a6      	b.n	80009de <__aeabi_fsub+0x8a>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fsub+0x142>
 8000a94:	e778      	b.n	8000988 <__aeabi_fsub+0x34>
 8000a96:	e775      	b.n	8000984 <__aeabi_fsub+0x30>
 8000a98:	2cff      	cmp	r4, #255	; 0xff
 8000a9a:	d054      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	4649      	mov	r1, r9
 8000aa0:	04d2      	lsls	r2, r2, #19
 8000aa2:	4311      	orrs	r1, r2
 8000aa4:	4689      	mov	r9, r1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2e1b      	cmp	r6, #27
 8000aaa:	dc09      	bgt.n	8000ac0 <__aeabi_fsub+0x16c>
 8000aac:	2120      	movs	r1, #32
 8000aae:	4648      	mov	r0, r9
 8000ab0:	1b89      	subs	r1, r1, r6
 8000ab2:	4088      	lsls	r0, r1
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	0001      	movs	r1, r0
 8000ab8:	40f2      	lsrs	r2, r6
 8000aba:	1e48      	subs	r0, r1, #1
 8000abc:	4181      	sbcs	r1, r0
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	015a      	lsls	r2, r3, #5
 8000ac4:	d500      	bpl.n	8000ac8 <__aeabi_fsub+0x174>
 8000ac6:	e773      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4641      	mov	r1, r8
 8000acc:	400a      	ands	r2, r1
 8000ace:	0759      	lsls	r1, r3, #29
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_fsub+0x180>
 8000ad2:	e789      	b.n	80009e8 <__aeabi_fsub+0x94>
 8000ad4:	e011      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000ad6:	4648      	mov	r0, r9
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d158      	bne.n	8000b8e <__aeabi_fsub+0x23a>
 8000adc:	2cff      	cmp	r4, #255	; 0xff
 8000ade:	d10c      	bne.n	8000afa <__aeabi_fsub+0x1a6>
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0x194>
 8000ae6:	e78c      	b.n	8000a02 <__aeabi_fsub+0xae>
 8000ae8:	2080      	movs	r0, #128	; 0x80
 8000aea:	03c0      	lsls	r0, r0, #15
 8000aec:	4303      	orrs	r3, r0
 8000aee:	025b      	lsls	r3, r3, #9
 8000af0:	0a5b      	lsrs	r3, r3, #9
 8000af2:	24ff      	movs	r4, #255	; 0xff
 8000af4:	e787      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d025      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	2dff      	cmp	r5, #255	; 0xff
 8000afe:	d0f0      	beq.n	8000ae2 <__aeabi_fsub+0x18e>
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	b2ec      	uxtb	r4, r5
 8000b06:	e77e      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d04d      	beq.n	8000ba8 <__aeabi_fsub+0x254>
 8000b0c:	28ff      	cmp	r0, #255	; 0xff
 8000b0e:	d018      	beq.n	8000b42 <__aeabi_fsub+0x1ee>
 8000b10:	2480      	movs	r4, #128	; 0x80
 8000b12:	04e4      	lsls	r4, r4, #19
 8000b14:	4272      	negs	r2, r6
 8000b16:	4323      	orrs	r3, r4
 8000b18:	2a1b      	cmp	r2, #27
 8000b1a:	dd00      	ble.n	8000b1e <__aeabi_fsub+0x1ca>
 8000b1c:	e0c4      	b.n	8000ca8 <__aeabi_fsub+0x354>
 8000b1e:	001c      	movs	r4, r3
 8000b20:	2520      	movs	r5, #32
 8000b22:	40d4      	lsrs	r4, r2
 8000b24:	1aaa      	subs	r2, r5, r2
 8000b26:	4093      	lsls	r3, r2
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4323      	orrs	r3, r4
 8000b2e:	464a      	mov	r2, r9
 8000b30:	0005      	movs	r5, r0
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	4688      	mov	r8, r1
 8000b36:	e738      	b.n	80009aa <__aeabi_fsub+0x56>
 8000b38:	1c72      	adds	r2, r6, #1
 8000b3a:	d0f8      	beq.n	8000b2e <__aeabi_fsub+0x1da>
 8000b3c:	43f2      	mvns	r2, r6
 8000b3e:	28ff      	cmp	r0, #255	; 0xff
 8000b40:	d1ea      	bne.n	8000b18 <__aeabi_fsub+0x1c4>
 8000b42:	000a      	movs	r2, r1
 8000b44:	464b      	mov	r3, r9
 8000b46:	25ff      	movs	r5, #255	; 0xff
 8000b48:	e7d7      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000b4a:	019b      	lsls	r3, r3, #6
 8000b4c:	0a5b      	lsrs	r3, r3, #9
 8000b4e:	e75a      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d141      	bne.n	8000bd8 <__aeabi_fsub+0x284>
 8000b54:	1c65      	adds	r5, r4, #1
 8000b56:	b2e9      	uxtb	r1, r5
 8000b58:	2901      	cmp	r1, #1
 8000b5a:	dd45      	ble.n	8000be8 <__aeabi_fsub+0x294>
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fsub+0x20e>
 8000b60:	e74f      	b.n	8000a02 <__aeabi_fsub+0xae>
 8000b62:	2407      	movs	r4, #7
 8000b64:	444b      	add	r3, r9
 8000b66:	085b      	lsrs	r3, r3, #1
 8000b68:	401c      	ands	r4, r3
 8000b6a:	e738      	b.n	80009de <__aeabi_fsub+0x8a>
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	4b5a      	ldr	r3, [pc, #360]	; (8000cd8 <__aeabi_fsub+0x384>)
 8000b70:	1a2d      	subs	r5, r5, r0
 8000b72:	4023      	ands	r3, r4
 8000b74:	4014      	ands	r4, r2
 8000b76:	e732      	b.n	80009de <__aeabi_fsub+0x8a>
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	d11d      	bne.n	8000bb8 <__aeabi_fsub+0x264>
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d17a      	bne.n	8000c76 <__aeabi_fsub+0x322>
 8000b80:	464b      	mov	r3, r9
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x234>
 8000b86:	e091      	b.n	8000cac <__aeabi_fsub+0x358>
 8000b88:	000a      	movs	r2, r1
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	e7b5      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000b8e:	3e01      	subs	r6, #1
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	d119      	bne.n	8000bc8 <__aeabi_fsub+0x274>
 8000b94:	444b      	add	r3, r9
 8000b96:	e76c      	b.n	8000a72 <__aeabi_fsub+0x11e>
 8000b98:	2cff      	cmp	r4, #255	; 0xff
 8000b9a:	d184      	bne.n	8000aa6 <__aeabi_fsub+0x152>
 8000b9c:	25ff      	movs	r5, #255	; 0xff
 8000b9e:	e7ac      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	4688      	mov	r8, r1
 8000ba4:	1ad4      	subs	r4, r2, r3
 8000ba6:	e705      	b.n	80009b4 <__aeabi_fsub+0x60>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1c5      	bne.n	8000b38 <__aeabi_fsub+0x1e4>
 8000bac:	000a      	movs	r2, r1
 8000bae:	28ff      	cmp	r0, #255	; 0xff
 8000bb0:	d0c8      	beq.n	8000b44 <__aeabi_fsub+0x1f0>
 8000bb2:	0005      	movs	r5, r0
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	e7a0      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d149      	bne.n	8000c50 <__aeabi_fsub+0x2fc>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d077      	beq.n	8000cb2 <__aeabi_fsub+0x35e>
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	25ff      	movs	r5, #255	; 0xff
 8000bc6:	e798      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000bc8:	2cff      	cmp	r4, #255	; 0xff
 8000bca:	d000      	beq.n	8000bce <__aeabi_fsub+0x27a>
 8000bcc:	e743      	b.n	8000a56 <__aeabi_fsub+0x102>
 8000bce:	e787      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	24ff      	movs	r4, #255	; 0xff
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e716      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d115      	bne.n	8000c08 <__aeabi_fsub+0x2b4>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d157      	bne.n	8000c90 <__aeabi_fsub+0x33c>
 8000be0:	28ff      	cmp	r0, #255	; 0xff
 8000be2:	d1e6      	bne.n	8000bb2 <__aeabi_fsub+0x25e>
 8000be4:	464b      	mov	r3, r9
 8000be6:	e77b      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d120      	bne.n	8000c2e <__aeabi_fsub+0x2da>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d057      	beq.n	8000ca0 <__aeabi_fsub+0x34c>
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d053      	beq.n	8000c9e <__aeabi_fsub+0x34a>
 8000bf6:	444b      	add	r3, r9
 8000bf8:	015a      	lsls	r2, r3, #5
 8000bfa:	d568      	bpl.n	8000cce <__aeabi_fsub+0x37a>
 8000bfc:	2407      	movs	r4, #7
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <__aeabi_fsub+0x384>)
 8000c00:	401c      	ands	r4, r3
 8000c02:	2501      	movs	r5, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	e6ea      	b.n	80009de <__aeabi_fsub+0x8a>
 8000c08:	28ff      	cmp	r0, #255	; 0xff
 8000c0a:	d0eb      	beq.n	8000be4 <__aeabi_fsub+0x290>
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	04d2      	lsls	r2, r2, #19
 8000c10:	4276      	negs	r6, r6
 8000c12:	4313      	orrs	r3, r2
 8000c14:	2e1b      	cmp	r6, #27
 8000c16:	dc53      	bgt.n	8000cc0 <__aeabi_fsub+0x36c>
 8000c18:	2520      	movs	r5, #32
 8000c1a:	1bad      	subs	r5, r5, r6
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	40ab      	lsls	r3, r5
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e5c      	subs	r4, r3, #1
 8000c24:	41a3      	sbcs	r3, r4
 8000c26:	4313      	orrs	r3, r2
 8000c28:	444b      	add	r3, r9
 8000c2a:	0005      	movs	r5, r0
 8000c2c:	e721      	b.n	8000a72 <__aeabi_fsub+0x11e>
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0d8      	beq.n	8000be4 <__aeabi_fsub+0x290>
 8000c32:	4649      	mov	r1, r9
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fsub+0x2e6>
 8000c38:	e752      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	03c9      	lsls	r1, r1, #15
 8000c3e:	420f      	tst	r7, r1
 8000c40:	d100      	bne.n	8000c44 <__aeabi_fsub+0x2f0>
 8000c42:	e74d      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c44:	4660      	mov	r0, ip
 8000c46:	4208      	tst	r0, r1
 8000c48:	d000      	beq.n	8000c4c <__aeabi_fsub+0x2f8>
 8000c4a:	e749      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	e747      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c50:	4648      	mov	r0, r9
 8000c52:	25ff      	movs	r5, #255	; 0xff
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x306>
 8000c58:	e74f      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	4217      	tst	r7, r2
 8000c60:	d004      	beq.n	8000c6c <__aeabi_fsub+0x318>
 8000c62:	4660      	mov	r0, ip
 8000c64:	4210      	tst	r0, r2
 8000c66:	d101      	bne.n	8000c6c <__aeabi_fsub+0x318>
 8000c68:	464b      	mov	r3, r9
 8000c6a:	4688      	mov	r8, r1
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4641      	mov	r1, r8
 8000c70:	25ff      	movs	r5, #255	; 0xff
 8000c72:	400a      	ands	r2, r1
 8000c74:	e741      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000c76:	4648      	mov	r0, r9
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d01f      	beq.n	8000cbc <__aeabi_fsub+0x368>
 8000c7c:	1a1a      	subs	r2, r3, r0
 8000c7e:	0150      	lsls	r0, r2, #5
 8000c80:	d520      	bpl.n	8000cc4 <__aeabi_fsub+0x370>
 8000c82:	464a      	mov	r2, r9
 8000c84:	2407      	movs	r4, #7
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	401c      	ands	r4, r3
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	e6a6      	b.n	80009de <__aeabi_fsub+0x8a>
 8000c90:	1c74      	adds	r4, r6, #1
 8000c92:	d0c9      	beq.n	8000c28 <__aeabi_fsub+0x2d4>
 8000c94:	43f6      	mvns	r6, r6
 8000c96:	28ff      	cmp	r0, #255	; 0xff
 8000c98:	d1bc      	bne.n	8000c14 <__aeabi_fsub+0x2c0>
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	e720      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	2500      	movs	r5, #0
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	e72b      	b.n	8000b00 <__aeabi_fsub+0x1ac>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e740      	b.n	8000b2e <__aeabi_fsub+0x1da>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e6a9      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	03db      	lsls	r3, r3, #15
 8000cb8:	24ff      	movs	r4, #255	; 0xff
 8000cba:	e6a4      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	e71c      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e7b1      	b.n	8000c28 <__aeabi_fsub+0x2d4>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0f1      	beq.n	8000cac <__aeabi_fsub+0x358>
 8000cc8:	0013      	movs	r3, r2
 8000cca:	2500      	movs	r5, #0
 8000ccc:	e6fc      	b.n	8000ac8 <__aeabi_fsub+0x174>
 8000cce:	2500      	movs	r5, #0
 8000cd0:	e6fa      	b.n	8000ac8 <__aeabi_fsub+0x174>
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	7dffffff 	.word	0x7dffffff
 8000cd8:	fbffffff 	.word	0xfbffffff

08000cdc <__aeabi_i2f>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d03d      	beq.n	8000d5e <__aeabi_i2f+0x82>
 8000ce2:	17c3      	asrs	r3, r0, #31
 8000ce4:	18c5      	adds	r5, r0, r3
 8000ce6:	405d      	eors	r5, r3
 8000ce8:	0fc4      	lsrs	r4, r0, #31
 8000cea:	0028      	movs	r0, r5
 8000cec:	f001 fe54 	bl	8002998 <__clzsi2>
 8000cf0:	229e      	movs	r2, #158	; 0x9e
 8000cf2:	1a12      	subs	r2, r2, r0
 8000cf4:	2a96      	cmp	r2, #150	; 0x96
 8000cf6:	dc07      	bgt.n	8000d08 <__aeabi_i2f+0x2c>
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	2808      	cmp	r0, #8
 8000cfc:	dd33      	ble.n	8000d66 <__aeabi_i2f+0x8a>
 8000cfe:	3808      	subs	r0, #8
 8000d00:	4085      	lsls	r5, r0
 8000d02:	0268      	lsls	r0, r5, #9
 8000d04:	0a40      	lsrs	r0, r0, #9
 8000d06:	e023      	b.n	8000d50 <__aeabi_i2f+0x74>
 8000d08:	2a99      	cmp	r2, #153	; 0x99
 8000d0a:	dd0b      	ble.n	8000d24 <__aeabi_i2f+0x48>
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	0029      	movs	r1, r5
 8000d10:	1a1b      	subs	r3, r3, r0
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	0003      	movs	r3, r0
 8000d16:	331b      	adds	r3, #27
 8000d18:	409d      	lsls	r5, r3
 8000d1a:	002b      	movs	r3, r5
 8000d1c:	1e5d      	subs	r5, r3, #1
 8000d1e:	41ab      	sbcs	r3, r5
 8000d20:	4319      	orrs	r1, r3
 8000d22:	000d      	movs	r5, r1
 8000d24:	2805      	cmp	r0, #5
 8000d26:	dd01      	ble.n	8000d2c <__aeabi_i2f+0x50>
 8000d28:	1f43      	subs	r3, r0, #5
 8000d2a:	409d      	lsls	r5, r3
 8000d2c:	002b      	movs	r3, r5
 8000d2e:	490f      	ldr	r1, [pc, #60]	; (8000d6c <__aeabi_i2f+0x90>)
 8000d30:	400b      	ands	r3, r1
 8000d32:	076e      	lsls	r6, r5, #29
 8000d34:	d009      	beq.n	8000d4a <__aeabi_i2f+0x6e>
 8000d36:	260f      	movs	r6, #15
 8000d38:	4035      	ands	r5, r6
 8000d3a:	2d04      	cmp	r5, #4
 8000d3c:	d005      	beq.n	8000d4a <__aeabi_i2f+0x6e>
 8000d3e:	3304      	adds	r3, #4
 8000d40:	015d      	lsls	r5, r3, #5
 8000d42:	d502      	bpl.n	8000d4a <__aeabi_i2f+0x6e>
 8000d44:	229f      	movs	r2, #159	; 0x9f
 8000d46:	400b      	ands	r3, r1
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	019b      	lsls	r3, r3, #6
 8000d4c:	0a58      	lsrs	r0, r3, #9
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	0240      	lsls	r0, r0, #9
 8000d52:	05d2      	lsls	r2, r2, #23
 8000d54:	0a40      	lsrs	r0, r0, #9
 8000d56:	07e4      	lsls	r4, r4, #31
 8000d58:	4310      	orrs	r0, r2
 8000d5a:	4320      	orrs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2200      	movs	r2, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	e7f4      	b.n	8000d50 <__aeabi_i2f+0x74>
 8000d66:	0268      	lsls	r0, r5, #9
 8000d68:	0a40      	lsrs	r0, r0, #9
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_i2f+0x74>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_ui2f>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	1e04      	subs	r4, r0, #0
 8000d74:	d034      	beq.n	8000de0 <__aeabi_ui2f+0x70>
 8000d76:	f001 fe0f 	bl	8002998 <__clzsi2>
 8000d7a:	229e      	movs	r2, #158	; 0x9e
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	2a96      	cmp	r2, #150	; 0x96
 8000d80:	dc07      	bgt.n	8000d92 <__aeabi_ui2f+0x22>
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	2808      	cmp	r0, #8
 8000d86:	dd2e      	ble.n	8000de6 <__aeabi_ui2f+0x76>
 8000d88:	3808      	subs	r0, #8
 8000d8a:	4084      	lsls	r4, r0
 8000d8c:	0260      	lsls	r0, r4, #9
 8000d8e:	0a40      	lsrs	r0, r0, #9
 8000d90:	e021      	b.n	8000dd6 <__aeabi_ui2f+0x66>
 8000d92:	2a99      	cmp	r2, #153	; 0x99
 8000d94:	dd09      	ble.n	8000daa <__aeabi_ui2f+0x3a>
 8000d96:	0003      	movs	r3, r0
 8000d98:	0021      	movs	r1, r4
 8000d9a:	331b      	adds	r3, #27
 8000d9c:	4099      	lsls	r1, r3
 8000d9e:	1e4b      	subs	r3, r1, #1
 8000da0:	4199      	sbcs	r1, r3
 8000da2:	2305      	movs	r3, #5
 8000da4:	1a1b      	subs	r3, r3, r0
 8000da6:	40dc      	lsrs	r4, r3
 8000da8:	430c      	orrs	r4, r1
 8000daa:	2805      	cmp	r0, #5
 8000dac:	dd01      	ble.n	8000db2 <__aeabi_ui2f+0x42>
 8000dae:	1f43      	subs	r3, r0, #5
 8000db0:	409c      	lsls	r4, r3
 8000db2:	0023      	movs	r3, r4
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <__aeabi_ui2f+0x7c>)
 8000db6:	400b      	ands	r3, r1
 8000db8:	0765      	lsls	r5, r4, #29
 8000dba:	d009      	beq.n	8000dd0 <__aeabi_ui2f+0x60>
 8000dbc:	250f      	movs	r5, #15
 8000dbe:	402c      	ands	r4, r5
 8000dc0:	2c04      	cmp	r4, #4
 8000dc2:	d005      	beq.n	8000dd0 <__aeabi_ui2f+0x60>
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	015c      	lsls	r4, r3, #5
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_ui2f+0x60>
 8000dca:	229f      	movs	r2, #159	; 0x9f
 8000dcc:	400b      	ands	r3, r1
 8000dce:	1a12      	subs	r2, r2, r0
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	0a58      	lsrs	r0, r3, #9
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	05d2      	lsls	r2, r2, #23
 8000dda:	0a40      	lsrs	r0, r0, #9
 8000ddc:	4310      	orrs	r0, r2
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	2200      	movs	r2, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	e7f7      	b.n	8000dd6 <__aeabi_ui2f+0x66>
 8000de6:	0260      	lsls	r0, r4, #9
 8000de8:	0a40      	lsrs	r0, r0, #9
 8000dea:	e7f4      	b.n	8000dd6 <__aeabi_ui2f+0x66>
 8000dec:	fbffffff 	.word	0xfbffffff

08000df0 <__aeabi_dadd>:
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	464f      	mov	r7, r9
 8000df4:	4646      	mov	r6, r8
 8000df6:	46d6      	mov	lr, sl
 8000df8:	000c      	movs	r4, r1
 8000dfa:	0309      	lsls	r1, r1, #12
 8000dfc:	b5c0      	push	{r6, r7, lr}
 8000dfe:	0a49      	lsrs	r1, r1, #9
 8000e00:	0f47      	lsrs	r7, r0, #29
 8000e02:	005e      	lsls	r6, r3, #1
 8000e04:	4339      	orrs	r1, r7
 8000e06:	031f      	lsls	r7, r3, #12
 8000e08:	0fdb      	lsrs	r3, r3, #31
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	0065      	lsls	r5, r4, #1
 8000e0e:	0a7b      	lsrs	r3, r7, #9
 8000e10:	0f57      	lsrs	r7, r2, #29
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0d6d      	lsrs	r5, r5, #21
 8000e16:	0fe4      	lsrs	r4, r4, #31
 8000e18:	0d76      	lsrs	r6, r6, #21
 8000e1a:	46a1      	mov	r9, r4
 8000e1c:	00c0      	lsls	r0, r0, #3
 8000e1e:	46b8      	mov	r8, r7
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	1bab      	subs	r3, r5, r6
 8000e24:	4564      	cmp	r4, ip
 8000e26:	d07b      	beq.n	8000f20 <__aeabi_dadd+0x130>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd5f      	ble.n	8000eec <__aeabi_dadd+0xfc>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x42>
 8000e30:	e0a4      	b.n	8000f7c <__aeabi_dadd+0x18c>
 8000e32:	003e      	movs	r6, r7
 8000e34:	4316      	orrs	r6, r2
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x4a>
 8000e38:	e112      	b.n	8001060 <__aeabi_dadd+0x270>
 8000e3a:	1e5e      	subs	r6, r3, #1
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x52>
 8000e40:	e19e      	b.n	8001180 <__aeabi_dadd+0x390>
 8000e42:	1a87      	subs	r7, r0, r2
 8000e44:	4643      	mov	r3, r8
 8000e46:	42b8      	cmp	r0, r7
 8000e48:	4180      	sbcs	r0, r0
 8000e4a:	2501      	movs	r5, #1
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	4240      	negs	r0, r0
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	020b      	lsls	r3, r1, #8
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_dadd+0x68>
 8000e56:	e131      	b.n	80010bc <__aeabi_dadd+0x2cc>
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	0a4e      	lsrs	r6, r1, #9
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x72>
 8000e60:	e16e      	b.n	8001140 <__aeabi_dadd+0x350>
 8000e62:	0030      	movs	r0, r6
 8000e64:	f001 fd98 	bl	8002998 <__clzsi2>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	3b08      	subs	r3, #8
 8000e6c:	2b1f      	cmp	r3, #31
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_dadd+0x82>
 8000e70:	e161      	b.n	8001136 <__aeabi_dadd+0x346>
 8000e72:	2220      	movs	r2, #32
 8000e74:	0039      	movs	r1, r7
 8000e76:	1ad2      	subs	r2, r2, r3
 8000e78:	409e      	lsls	r6, r3
 8000e7a:	40d1      	lsrs	r1, r2
 8000e7c:	409f      	lsls	r7, r3
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	429d      	cmp	r5, r3
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_dadd+0x96>
 8000e84:	e151      	b.n	800112a <__aeabi_dadd+0x33a>
 8000e86:	1b5d      	subs	r5, r3, r5
 8000e88:	1c6b      	adds	r3, r5, #1
 8000e8a:	2b1f      	cmp	r3, #31
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_dadd+0xa0>
 8000e8e:	e17c      	b.n	800118a <__aeabi_dadd+0x39a>
 8000e90:	2120      	movs	r1, #32
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	003d      	movs	r5, r7
 8000e96:	0030      	movs	r0, r6
 8000e98:	408f      	lsls	r7, r1
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	40dd      	lsrs	r5, r3
 8000e9e:	1e79      	subs	r1, r7, #1
 8000ea0:	418f      	sbcs	r7, r1
 8000ea2:	0031      	movs	r1, r6
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	4328      	orrs	r0, r5
 8000ea8:	40d9      	lsrs	r1, r3
 8000eaa:	2500      	movs	r5, #0
 8000eac:	4307      	orrs	r7, r0
 8000eae:	403a      	ands	r2, r7
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d009      	beq.n	8000ec8 <__aeabi_dadd+0xd8>
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	403b      	ands	r3, r7
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d005      	beq.n	8000ec8 <__aeabi_dadd+0xd8>
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	42bb      	cmp	r3, r7
 8000ec0:	41bf      	sbcs	r7, r7
 8000ec2:	427f      	negs	r7, r7
 8000ec4:	19c9      	adds	r1, r1, r7
 8000ec6:	001f      	movs	r7, r3
 8000ec8:	020b      	lsls	r3, r1, #8
 8000eca:	d400      	bmi.n	8000ece <__aeabi_dadd+0xde>
 8000ecc:	e226      	b.n	800131c <__aeabi_dadd+0x52c>
 8000ece:	1c6a      	adds	r2, r5, #1
 8000ed0:	4bc6      	ldr	r3, [pc, #792]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000ed2:	0555      	lsls	r5, r2, #21
 8000ed4:	0d6d      	lsrs	r5, r5, #21
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0xec>
 8000eda:	e106      	b.n	80010ea <__aeabi_dadd+0x2fa>
 8000edc:	4ac4      	ldr	r2, [pc, #784]	; (80011f0 <__aeabi_dadd+0x400>)
 8000ede:	08ff      	lsrs	r7, r7, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	0753      	lsls	r3, r2, #29
 8000ee4:	0252      	lsls	r2, r2, #9
 8000ee6:	433b      	orrs	r3, r7
 8000ee8:	0b12      	lsrs	r2, r2, #12
 8000eea:	e08e      	b.n	800100a <__aeabi_dadd+0x21a>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x102>
 8000ef0:	e0b8      	b.n	8001064 <__aeabi_dadd+0x274>
 8000ef2:	1c6b      	adds	r3, r5, #1
 8000ef4:	055b      	lsls	r3, r3, #21
 8000ef6:	0d5b      	lsrs	r3, r3, #21
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dadd+0x10e>
 8000efc:	e130      	b.n	8001160 <__aeabi_dadd+0x370>
 8000efe:	1a87      	subs	r7, r0, r2
 8000f00:	4643      	mov	r3, r8
 8000f02:	42b8      	cmp	r0, r7
 8000f04:	41b6      	sbcs	r6, r6
 8000f06:	1acb      	subs	r3, r1, r3
 8000f08:	4276      	negs	r6, r6
 8000f0a:	1b9e      	subs	r6, r3, r6
 8000f0c:	0233      	lsls	r3, r6, #8
 8000f0e:	d500      	bpl.n	8000f12 <__aeabi_dadd+0x122>
 8000f10:	e14c      	b.n	80011ac <__aeabi_dadd+0x3bc>
 8000f12:	003b      	movs	r3, r7
 8000f14:	4333      	orrs	r3, r6
 8000f16:	d1a1      	bne.n	8000e5c <__aeabi_dadd+0x6c>
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	e070      	b.n	8001002 <__aeabi_dadd+0x212>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dc00      	bgt.n	8000f26 <__aeabi_dadd+0x136>
 8000f24:	e0e5      	b.n	80010f2 <__aeabi_dadd+0x302>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dadd+0x13c>
 8000f2a:	e083      	b.n	8001034 <__aeabi_dadd+0x244>
 8000f2c:	4eaf      	ldr	r6, [pc, #700]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000f2e:	42b5      	cmp	r5, r6
 8000f30:	d060      	beq.n	8000ff4 <__aeabi_dadd+0x204>
 8000f32:	2680      	movs	r6, #128	; 0x80
 8000f34:	0436      	lsls	r6, r6, #16
 8000f36:	4337      	orrs	r7, r6
 8000f38:	46b8      	mov	r8, r7
 8000f3a:	2b38      	cmp	r3, #56	; 0x38
 8000f3c:	dc00      	bgt.n	8000f40 <__aeabi_dadd+0x150>
 8000f3e:	e13e      	b.n	80011be <__aeabi_dadd+0x3ce>
 8000f40:	4643      	mov	r3, r8
 8000f42:	4313      	orrs	r3, r2
 8000f44:	001f      	movs	r7, r3
 8000f46:	1e7a      	subs	r2, r7, #1
 8000f48:	4197      	sbcs	r7, r2
 8000f4a:	183f      	adds	r7, r7, r0
 8000f4c:	4287      	cmp	r7, r0
 8000f4e:	4180      	sbcs	r0, r0
 8000f50:	4240      	negs	r0, r0
 8000f52:	1809      	adds	r1, r1, r0
 8000f54:	020b      	lsls	r3, r1, #8
 8000f56:	d400      	bmi.n	8000f5a <__aeabi_dadd+0x16a>
 8000f58:	e0b0      	b.n	80010bc <__aeabi_dadd+0x2cc>
 8000f5a:	4ba4      	ldr	r3, [pc, #656]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000f5c:	3501      	adds	r5, #1
 8000f5e:	429d      	cmp	r5, r3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x174>
 8000f62:	e0c3      	b.n	80010ec <__aeabi_dadd+0x2fc>
 8000f64:	4aa2      	ldr	r2, [pc, #648]	; (80011f0 <__aeabi_dadd+0x400>)
 8000f66:	087b      	lsrs	r3, r7, #1
 8000f68:	400a      	ands	r2, r1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	400f      	ands	r7, r1
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0851      	lsrs	r1, r2, #1
 8000f72:	07d3      	lsls	r3, r2, #31
 8000f74:	2207      	movs	r2, #7
 8000f76:	431f      	orrs	r7, r3
 8000f78:	403a      	ands	r2, r7
 8000f7a:	e799      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 8000f7c:	4e9b      	ldr	r6, [pc, #620]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000f7e:	42b5      	cmp	r5, r6
 8000f80:	d038      	beq.n	8000ff4 <__aeabi_dadd+0x204>
 8000f82:	2680      	movs	r6, #128	; 0x80
 8000f84:	0436      	lsls	r6, r6, #16
 8000f86:	4337      	orrs	r7, r6
 8000f88:	46b8      	mov	r8, r7
 8000f8a:	2b38      	cmp	r3, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_dadd+0x1a0>
 8000f8e:	e0dc      	b.n	800114a <__aeabi_dadd+0x35a>
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_dadd+0x1a6>
 8000f94:	e130      	b.n	80011f8 <__aeabi_dadd+0x408>
 8000f96:	001e      	movs	r6, r3
 8000f98:	4647      	mov	r7, r8
 8000f9a:	3e20      	subs	r6, #32
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	46bc      	mov	ip, r7
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_dadd+0x1be>
 8000fa4:	2640      	movs	r6, #64	; 0x40
 8000fa6:	1af3      	subs	r3, r6, r3
 8000fa8:	4646      	mov	r6, r8
 8000faa:	409e      	lsls	r6, r3
 8000fac:	4332      	orrs	r2, r6
 8000fae:	0017      	movs	r7, r2
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	1e7a      	subs	r2, r7, #1
 8000fb4:	4197      	sbcs	r7, r2
 8000fb6:	431f      	orrs	r7, r3
 8000fb8:	e0cc      	b.n	8001154 <__aeabi_dadd+0x364>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x1d0>
 8000fbe:	e204      	b.n	80013ca <__aeabi_dadd+0x5da>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dadd+0x1d8>
 8000fc6:	e159      	b.n	800127c <__aeabi_dadd+0x48c>
 8000fc8:	074b      	lsls	r3, r1, #29
 8000fca:	08c0      	lsrs	r0, r0, #3
 8000fcc:	4318      	orrs	r0, r3
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	08c9      	lsrs	r1, r1, #3
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	4219      	tst	r1, r3
 8000fd6:	d008      	beq.n	8000fea <__aeabi_dadd+0x1fa>
 8000fd8:	4645      	mov	r5, r8
 8000fda:	08ed      	lsrs	r5, r5, #3
 8000fdc:	421d      	tst	r5, r3
 8000fde:	d104      	bne.n	8000fea <__aeabi_dadd+0x1fa>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	08d0      	lsrs	r0, r2, #3
 8000fe4:	0759      	lsls	r1, r3, #29
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	0029      	movs	r1, r5
 8000fea:	0f42      	lsrs	r2, r0, #29
 8000fec:	00c9      	lsls	r1, r1, #3
 8000fee:	4d7f      	ldr	r5, [pc, #508]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000ff0:	4311      	orrs	r1, r2
 8000ff2:	00c0      	lsls	r0, r0, #3
 8000ff4:	074b      	lsls	r3, r1, #29
 8000ff6:	08ca      	lsrs	r2, r1, #3
 8000ff8:	497c      	ldr	r1, [pc, #496]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000ffa:	08c0      	lsrs	r0, r0, #3
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	428d      	cmp	r5, r1
 8001000:	d068      	beq.n	80010d4 <__aeabi_dadd+0x2e4>
 8001002:	0312      	lsls	r2, r2, #12
 8001004:	056d      	lsls	r5, r5, #21
 8001006:	0b12      	lsrs	r2, r2, #12
 8001008:	0d6d      	lsrs	r5, r5, #21
 800100a:	2100      	movs	r1, #0
 800100c:	0312      	lsls	r2, r2, #12
 800100e:	0018      	movs	r0, r3
 8001010:	0b13      	lsrs	r3, r2, #12
 8001012:	0d0a      	lsrs	r2, r1, #20
 8001014:	0512      	lsls	r2, r2, #20
 8001016:	431a      	orrs	r2, r3
 8001018:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <__aeabi_dadd+0x404>)
 800101a:	052d      	lsls	r5, r5, #20
 800101c:	4013      	ands	r3, r2
 800101e:	432b      	orrs	r3, r5
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	07e4      	lsls	r4, r4, #31
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	4323      	orrs	r3, r4
 8001028:	0019      	movs	r1, r3
 800102a:	bc1c      	pop	{r2, r3, r4}
 800102c:	4690      	mov	r8, r2
 800102e:	4699      	mov	r9, r3
 8001030:	46a2      	mov	sl, r4
 8001032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001034:	003e      	movs	r6, r7
 8001036:	4316      	orrs	r6, r2
 8001038:	d012      	beq.n	8001060 <__aeabi_dadd+0x270>
 800103a:	1e5e      	subs	r6, r3, #1
 800103c:	2e00      	cmp	r6, #0
 800103e:	d000      	beq.n	8001042 <__aeabi_dadd+0x252>
 8001040:	e100      	b.n	8001244 <__aeabi_dadd+0x454>
 8001042:	1887      	adds	r7, r0, r2
 8001044:	4287      	cmp	r7, r0
 8001046:	4180      	sbcs	r0, r0
 8001048:	4441      	add	r1, r8
 800104a:	4240      	negs	r0, r0
 800104c:	1809      	adds	r1, r1, r0
 800104e:	2501      	movs	r5, #1
 8001050:	020b      	lsls	r3, r1, #8
 8001052:	d533      	bpl.n	80010bc <__aeabi_dadd+0x2cc>
 8001054:	2502      	movs	r5, #2
 8001056:	e785      	b.n	8000f64 <__aeabi_dadd+0x174>
 8001058:	4664      	mov	r4, ip
 800105a:	0033      	movs	r3, r6
 800105c:	4641      	mov	r1, r8
 800105e:	0010      	movs	r0, r2
 8001060:	001d      	movs	r5, r3
 8001062:	e7c7      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001064:	2d00      	cmp	r5, #0
 8001066:	d000      	beq.n	800106a <__aeabi_dadd+0x27a>
 8001068:	e0da      	b.n	8001220 <__aeabi_dadd+0x430>
 800106a:	000c      	movs	r4, r1
 800106c:	4304      	orrs	r4, r0
 800106e:	d0f3      	beq.n	8001058 <__aeabi_dadd+0x268>
 8001070:	1c5c      	adds	r4, r3, #1
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x286>
 8001074:	e19f      	b.n	80013b6 <__aeabi_dadd+0x5c6>
 8001076:	4c5d      	ldr	r4, [pc, #372]	; (80011ec <__aeabi_dadd+0x3fc>)
 8001078:	42a6      	cmp	r6, r4
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x28e>
 800107c:	e12f      	b.n	80012de <__aeabi_dadd+0x4ee>
 800107e:	43db      	mvns	r3, r3
 8001080:	2b38      	cmp	r3, #56	; 0x38
 8001082:	dd00      	ble.n	8001086 <__aeabi_dadd+0x296>
 8001084:	e166      	b.n	8001354 <__aeabi_dadd+0x564>
 8001086:	2b1f      	cmp	r3, #31
 8001088:	dd00      	ble.n	800108c <__aeabi_dadd+0x29c>
 800108a:	e183      	b.n	8001394 <__aeabi_dadd+0x5a4>
 800108c:	2420      	movs	r4, #32
 800108e:	0005      	movs	r5, r0
 8001090:	1ae4      	subs	r4, r4, r3
 8001092:	000f      	movs	r7, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	40d9      	lsrs	r1, r3
 8001098:	40a0      	lsls	r0, r4
 800109a:	4643      	mov	r3, r8
 800109c:	40a7      	lsls	r7, r4
 800109e:	1a5b      	subs	r3, r3, r1
 80010a0:	1e44      	subs	r4, r0, #1
 80010a2:	41a0      	sbcs	r0, r4
 80010a4:	4698      	mov	r8, r3
 80010a6:	432f      	orrs	r7, r5
 80010a8:	4338      	orrs	r0, r7
 80010aa:	1a17      	subs	r7, r2, r0
 80010ac:	42ba      	cmp	r2, r7
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	4643      	mov	r3, r8
 80010b2:	4252      	negs	r2, r2
 80010b4:	1a99      	subs	r1, r3, r2
 80010b6:	4664      	mov	r4, ip
 80010b8:	0035      	movs	r5, r6
 80010ba:	e6ca      	b.n	8000e52 <__aeabi_dadd+0x62>
 80010bc:	2207      	movs	r2, #7
 80010be:	403a      	ands	r2, r7
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_dadd+0x2d6>
 80010c4:	e6f6      	b.n	8000eb4 <__aeabi_dadd+0xc4>
 80010c6:	074b      	lsls	r3, r1, #29
 80010c8:	08ca      	lsrs	r2, r1, #3
 80010ca:	4948      	ldr	r1, [pc, #288]	; (80011ec <__aeabi_dadd+0x3fc>)
 80010cc:	08ff      	lsrs	r7, r7, #3
 80010ce:	433b      	orrs	r3, r7
 80010d0:	428d      	cmp	r5, r1
 80010d2:	d196      	bne.n	8001002 <__aeabi_dadd+0x212>
 80010d4:	0019      	movs	r1, r3
 80010d6:	4311      	orrs	r1, r2
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x2ec>
 80010da:	e19e      	b.n	800141a <__aeabi_dadd+0x62a>
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0309      	lsls	r1, r1, #12
 80010e0:	430a      	orrs	r2, r1
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	0b12      	lsrs	r2, r2, #12
 80010e6:	4d41      	ldr	r5, [pc, #260]	; (80011ec <__aeabi_dadd+0x3fc>)
 80010e8:	e78f      	b.n	800100a <__aeabi_dadd+0x21a>
 80010ea:	0015      	movs	r5, r2
 80010ec:	2200      	movs	r2, #0
 80010ee:	2300      	movs	r3, #0
 80010f0:	e78b      	b.n	800100a <__aeabi_dadd+0x21a>
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_dadd+0x308>
 80010f6:	e0c7      	b.n	8001288 <__aeabi_dadd+0x498>
 80010f8:	1c6b      	adds	r3, r5, #1
 80010fa:	055f      	lsls	r7, r3, #21
 80010fc:	0d7f      	lsrs	r7, r7, #21
 80010fe:	2f01      	cmp	r7, #1
 8001100:	dc00      	bgt.n	8001104 <__aeabi_dadd+0x314>
 8001102:	e0f1      	b.n	80012e8 <__aeabi_dadd+0x4f8>
 8001104:	4d39      	ldr	r5, [pc, #228]	; (80011ec <__aeabi_dadd+0x3fc>)
 8001106:	42ab      	cmp	r3, r5
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x31c>
 800110a:	e0b9      	b.n	8001280 <__aeabi_dadd+0x490>
 800110c:	1885      	adds	r5, r0, r2
 800110e:	000a      	movs	r2, r1
 8001110:	4285      	cmp	r5, r0
 8001112:	4189      	sbcs	r1, r1
 8001114:	4442      	add	r2, r8
 8001116:	4249      	negs	r1, r1
 8001118:	1851      	adds	r1, r2, r1
 800111a:	2207      	movs	r2, #7
 800111c:	07cf      	lsls	r7, r1, #31
 800111e:	086d      	lsrs	r5, r5, #1
 8001120:	432f      	orrs	r7, r5
 8001122:	0849      	lsrs	r1, r1, #1
 8001124:	403a      	ands	r2, r7
 8001126:	001d      	movs	r5, r3
 8001128:	e6c2      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 800112a:	2207      	movs	r2, #7
 800112c:	4930      	ldr	r1, [pc, #192]	; (80011f0 <__aeabi_dadd+0x400>)
 800112e:	1aed      	subs	r5, r5, r3
 8001130:	4031      	ands	r1, r6
 8001132:	403a      	ands	r2, r7
 8001134:	e6bc      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 8001136:	003e      	movs	r6, r7
 8001138:	3828      	subs	r0, #40	; 0x28
 800113a:	4086      	lsls	r6, r0
 800113c:	2700      	movs	r7, #0
 800113e:	e69f      	b.n	8000e80 <__aeabi_dadd+0x90>
 8001140:	0038      	movs	r0, r7
 8001142:	f001 fc29 	bl	8002998 <__clzsi2>
 8001146:	3020      	adds	r0, #32
 8001148:	e68e      	b.n	8000e68 <__aeabi_dadd+0x78>
 800114a:	4643      	mov	r3, r8
 800114c:	4313      	orrs	r3, r2
 800114e:	001f      	movs	r7, r3
 8001150:	1e7a      	subs	r2, r7, #1
 8001152:	4197      	sbcs	r7, r2
 8001154:	1bc7      	subs	r7, r0, r7
 8001156:	42b8      	cmp	r0, r7
 8001158:	4180      	sbcs	r0, r0
 800115a:	4240      	negs	r0, r0
 800115c:	1a09      	subs	r1, r1, r0
 800115e:	e678      	b.n	8000e52 <__aeabi_dadd+0x62>
 8001160:	000e      	movs	r6, r1
 8001162:	003b      	movs	r3, r7
 8001164:	4306      	orrs	r6, r0
 8001166:	4313      	orrs	r3, r2
 8001168:	2d00      	cmp	r5, #0
 800116a:	d161      	bne.n	8001230 <__aeabi_dadd+0x440>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d000      	beq.n	8001172 <__aeabi_dadd+0x382>
 8001170:	e0f4      	b.n	800135c <__aeabi_dadd+0x56c>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x388>
 8001176:	e11b      	b.n	80013b0 <__aeabi_dadd+0x5c0>
 8001178:	4664      	mov	r4, ip
 800117a:	0039      	movs	r1, r7
 800117c:	0010      	movs	r0, r2
 800117e:	e739      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001180:	4f1a      	ldr	r7, [pc, #104]	; (80011ec <__aeabi_dadd+0x3fc>)
 8001182:	42bb      	cmp	r3, r7
 8001184:	d07a      	beq.n	800127c <__aeabi_dadd+0x48c>
 8001186:	0033      	movs	r3, r6
 8001188:	e6ff      	b.n	8000f8a <__aeabi_dadd+0x19a>
 800118a:	0030      	movs	r0, r6
 800118c:	3d1f      	subs	r5, #31
 800118e:	40e8      	lsrs	r0, r5
 8001190:	2b20      	cmp	r3, #32
 8001192:	d003      	beq.n	800119c <__aeabi_dadd+0x3ac>
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	1acb      	subs	r3, r1, r3
 8001198:	409e      	lsls	r6, r3
 800119a:	4337      	orrs	r7, r6
 800119c:	1e7b      	subs	r3, r7, #1
 800119e:	419f      	sbcs	r7, r3
 80011a0:	2207      	movs	r2, #7
 80011a2:	4307      	orrs	r7, r0
 80011a4:	403a      	ands	r2, r7
 80011a6:	2100      	movs	r1, #0
 80011a8:	2500      	movs	r5, #0
 80011aa:	e789      	b.n	80010c0 <__aeabi_dadd+0x2d0>
 80011ac:	1a17      	subs	r7, r2, r0
 80011ae:	4643      	mov	r3, r8
 80011b0:	42ba      	cmp	r2, r7
 80011b2:	41b6      	sbcs	r6, r6
 80011b4:	1a59      	subs	r1, r3, r1
 80011b6:	4276      	negs	r6, r6
 80011b8:	1b8e      	subs	r6, r1, r6
 80011ba:	4664      	mov	r4, ip
 80011bc:	e64e      	b.n	8000e5c <__aeabi_dadd+0x6c>
 80011be:	2b1f      	cmp	r3, #31
 80011c0:	dd00      	ble.n	80011c4 <__aeabi_dadd+0x3d4>
 80011c2:	e0ad      	b.n	8001320 <__aeabi_dadd+0x530>
 80011c4:	2620      	movs	r6, #32
 80011c6:	4647      	mov	r7, r8
 80011c8:	1af6      	subs	r6, r6, r3
 80011ca:	40b7      	lsls	r7, r6
 80011cc:	46b9      	mov	r9, r7
 80011ce:	0017      	movs	r7, r2
 80011d0:	46b2      	mov	sl, r6
 80011d2:	40df      	lsrs	r7, r3
 80011d4:	464e      	mov	r6, r9
 80011d6:	433e      	orrs	r6, r7
 80011d8:	0037      	movs	r7, r6
 80011da:	4656      	mov	r6, sl
 80011dc:	40b2      	lsls	r2, r6
 80011de:	1e56      	subs	r6, r2, #1
 80011e0:	41b2      	sbcs	r2, r6
 80011e2:	4317      	orrs	r7, r2
 80011e4:	4642      	mov	r2, r8
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1889      	adds	r1, r1, r2
 80011ea:	e6ae      	b.n	8000f4a <__aeabi_dadd+0x15a>
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	ff7fffff 	.word	0xff7fffff
 80011f4:	800fffff 	.word	0x800fffff
 80011f8:	2620      	movs	r6, #32
 80011fa:	4647      	mov	r7, r8
 80011fc:	1af6      	subs	r6, r6, r3
 80011fe:	40b7      	lsls	r7, r6
 8001200:	46b9      	mov	r9, r7
 8001202:	0017      	movs	r7, r2
 8001204:	46b2      	mov	sl, r6
 8001206:	40df      	lsrs	r7, r3
 8001208:	464e      	mov	r6, r9
 800120a:	433e      	orrs	r6, r7
 800120c:	0037      	movs	r7, r6
 800120e:	4656      	mov	r6, sl
 8001210:	40b2      	lsls	r2, r6
 8001212:	1e56      	subs	r6, r2, #1
 8001214:	41b2      	sbcs	r2, r6
 8001216:	4317      	orrs	r7, r2
 8001218:	4642      	mov	r2, r8
 800121a:	40da      	lsrs	r2, r3
 800121c:	1a89      	subs	r1, r1, r2
 800121e:	e799      	b.n	8001154 <__aeabi_dadd+0x364>
 8001220:	4c7f      	ldr	r4, [pc, #508]	; (8001420 <__aeabi_dadd+0x630>)
 8001222:	42a6      	cmp	r6, r4
 8001224:	d05b      	beq.n	80012de <__aeabi_dadd+0x4ee>
 8001226:	2480      	movs	r4, #128	; 0x80
 8001228:	0424      	lsls	r4, r4, #16
 800122a:	425b      	negs	r3, r3
 800122c:	4321      	orrs	r1, r4
 800122e:	e727      	b.n	8001080 <__aeabi_dadd+0x290>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d10c      	bne.n	800124e <__aeabi_dadd+0x45e>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x44a>
 8001238:	e0cb      	b.n	80013d2 <__aeabi_dadd+0x5e2>
 800123a:	4664      	mov	r4, ip
 800123c:	0039      	movs	r1, r7
 800123e:	0010      	movs	r0, r2
 8001240:	4d77      	ldr	r5, [pc, #476]	; (8001420 <__aeabi_dadd+0x630>)
 8001242:	e6d7      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001244:	4f76      	ldr	r7, [pc, #472]	; (8001420 <__aeabi_dadd+0x630>)
 8001246:	42bb      	cmp	r3, r7
 8001248:	d018      	beq.n	800127c <__aeabi_dadd+0x48c>
 800124a:	0033      	movs	r3, r6
 800124c:	e675      	b.n	8000f3a <__aeabi_dadd+0x14a>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <__aeabi_dadd+0x48c>
 8001252:	074b      	lsls	r3, r1, #29
 8001254:	08c0      	lsrs	r0, r0, #3
 8001256:	4318      	orrs	r0, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	08c9      	lsrs	r1, r1, #3
 800125c:	031b      	lsls	r3, r3, #12
 800125e:	4219      	tst	r1, r3
 8001260:	d007      	beq.n	8001272 <__aeabi_dadd+0x482>
 8001262:	08fc      	lsrs	r4, r7, #3
 8001264:	421c      	tst	r4, r3
 8001266:	d104      	bne.n	8001272 <__aeabi_dadd+0x482>
 8001268:	0779      	lsls	r1, r7, #29
 800126a:	08d0      	lsrs	r0, r2, #3
 800126c:	4308      	orrs	r0, r1
 800126e:	46e1      	mov	r9, ip
 8001270:	0021      	movs	r1, r4
 8001272:	464c      	mov	r4, r9
 8001274:	0f42      	lsrs	r2, r0, #29
 8001276:	00c9      	lsls	r1, r1, #3
 8001278:	4311      	orrs	r1, r2
 800127a:	00c0      	lsls	r0, r0, #3
 800127c:	4d68      	ldr	r5, [pc, #416]	; (8001420 <__aeabi_dadd+0x630>)
 800127e:	e6b9      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001280:	001d      	movs	r5, r3
 8001282:	2200      	movs	r2, #0
 8001284:	2300      	movs	r3, #0
 8001286:	e6c0      	b.n	800100a <__aeabi_dadd+0x21a>
 8001288:	2d00      	cmp	r5, #0
 800128a:	d15b      	bne.n	8001344 <__aeabi_dadd+0x554>
 800128c:	000d      	movs	r5, r1
 800128e:	4305      	orrs	r5, r0
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x4a4>
 8001292:	e6e2      	b.n	800105a <__aeabi_dadd+0x26a>
 8001294:	1c5d      	adds	r5, r3, #1
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x4aa>
 8001298:	e0b0      	b.n	80013fc <__aeabi_dadd+0x60c>
 800129a:	4d61      	ldr	r5, [pc, #388]	; (8001420 <__aeabi_dadd+0x630>)
 800129c:	42ae      	cmp	r6, r5
 800129e:	d01f      	beq.n	80012e0 <__aeabi_dadd+0x4f0>
 80012a0:	43db      	mvns	r3, r3
 80012a2:	2b38      	cmp	r3, #56	; 0x38
 80012a4:	dc71      	bgt.n	800138a <__aeabi_dadd+0x59a>
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dd00      	ble.n	80012ac <__aeabi_dadd+0x4bc>
 80012aa:	e096      	b.n	80013da <__aeabi_dadd+0x5ea>
 80012ac:	2520      	movs	r5, #32
 80012ae:	000f      	movs	r7, r1
 80012b0:	1aed      	subs	r5, r5, r3
 80012b2:	40af      	lsls	r7, r5
 80012b4:	46b9      	mov	r9, r7
 80012b6:	0007      	movs	r7, r0
 80012b8:	46aa      	mov	sl, r5
 80012ba:	40df      	lsrs	r7, r3
 80012bc:	464d      	mov	r5, r9
 80012be:	433d      	orrs	r5, r7
 80012c0:	002f      	movs	r7, r5
 80012c2:	4655      	mov	r5, sl
 80012c4:	40a8      	lsls	r0, r5
 80012c6:	40d9      	lsrs	r1, r3
 80012c8:	1e45      	subs	r5, r0, #1
 80012ca:	41a8      	sbcs	r0, r5
 80012cc:	4488      	add	r8, r1
 80012ce:	4307      	orrs	r7, r0
 80012d0:	18bf      	adds	r7, r7, r2
 80012d2:	4297      	cmp	r7, r2
 80012d4:	4192      	sbcs	r2, r2
 80012d6:	4251      	negs	r1, r2
 80012d8:	4441      	add	r1, r8
 80012da:	0035      	movs	r5, r6
 80012dc:	e63a      	b.n	8000f54 <__aeabi_dadd+0x164>
 80012de:	4664      	mov	r4, ip
 80012e0:	0035      	movs	r5, r6
 80012e2:	4641      	mov	r1, r8
 80012e4:	0010      	movs	r0, r2
 80012e6:	e685      	b.n	8000ff4 <__aeabi_dadd+0x204>
 80012e8:	000b      	movs	r3, r1
 80012ea:	4303      	orrs	r3, r0
 80012ec:	2d00      	cmp	r5, #0
 80012ee:	d000      	beq.n	80012f2 <__aeabi_dadd+0x502>
 80012f0:	e663      	b.n	8000fba <__aeabi_dadd+0x1ca>
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f5      	beq.n	80012e2 <__aeabi_dadd+0x4f2>
 80012f6:	4643      	mov	r3, r8
 80012f8:	4313      	orrs	r3, r2
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x50e>
 80012fc:	e67a      	b.n	8000ff4 <__aeabi_dadd+0x204>
 80012fe:	1887      	adds	r7, r0, r2
 8001300:	4287      	cmp	r7, r0
 8001302:	4180      	sbcs	r0, r0
 8001304:	2207      	movs	r2, #7
 8001306:	4441      	add	r1, r8
 8001308:	4240      	negs	r0, r0
 800130a:	1809      	adds	r1, r1, r0
 800130c:	403a      	ands	r2, r7
 800130e:	020b      	lsls	r3, r1, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0x524>
 8001312:	e6d5      	b.n	80010c0 <__aeabi_dadd+0x2d0>
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <__aeabi_dadd+0x634>)
 8001316:	3501      	adds	r5, #1
 8001318:	4019      	ands	r1, r3
 800131a:	e5c9      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 800131c:	0038      	movs	r0, r7
 800131e:	e669      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001320:	001e      	movs	r6, r3
 8001322:	4647      	mov	r7, r8
 8001324:	3e20      	subs	r6, #32
 8001326:	40f7      	lsrs	r7, r6
 8001328:	46bc      	mov	ip, r7
 800132a:	2b20      	cmp	r3, #32
 800132c:	d004      	beq.n	8001338 <__aeabi_dadd+0x548>
 800132e:	2640      	movs	r6, #64	; 0x40
 8001330:	1af3      	subs	r3, r6, r3
 8001332:	4646      	mov	r6, r8
 8001334:	409e      	lsls	r6, r3
 8001336:	4332      	orrs	r2, r6
 8001338:	0017      	movs	r7, r2
 800133a:	4663      	mov	r3, ip
 800133c:	1e7a      	subs	r2, r7, #1
 800133e:	4197      	sbcs	r7, r2
 8001340:	431f      	orrs	r7, r3
 8001342:	e602      	b.n	8000f4a <__aeabi_dadd+0x15a>
 8001344:	4d36      	ldr	r5, [pc, #216]	; (8001420 <__aeabi_dadd+0x630>)
 8001346:	42ae      	cmp	r6, r5
 8001348:	d0ca      	beq.n	80012e0 <__aeabi_dadd+0x4f0>
 800134a:	2580      	movs	r5, #128	; 0x80
 800134c:	042d      	lsls	r5, r5, #16
 800134e:	425b      	negs	r3, r3
 8001350:	4329      	orrs	r1, r5
 8001352:	e7a6      	b.n	80012a2 <__aeabi_dadd+0x4b2>
 8001354:	4308      	orrs	r0, r1
 8001356:	1e41      	subs	r1, r0, #1
 8001358:	4188      	sbcs	r0, r1
 800135a:	e6a6      	b.n	80010aa <__aeabi_dadd+0x2ba>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x572>
 8001360:	e648      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001362:	1a87      	subs	r7, r0, r2
 8001364:	4643      	mov	r3, r8
 8001366:	42b8      	cmp	r0, r7
 8001368:	41b6      	sbcs	r6, r6
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4276      	negs	r6, r6
 800136e:	1b9e      	subs	r6, r3, r6
 8001370:	0233      	lsls	r3, r6, #8
 8001372:	d54b      	bpl.n	800140c <__aeabi_dadd+0x61c>
 8001374:	1a17      	subs	r7, r2, r0
 8001376:	4643      	mov	r3, r8
 8001378:	42ba      	cmp	r2, r7
 800137a:	4192      	sbcs	r2, r2
 800137c:	1a59      	subs	r1, r3, r1
 800137e:	4252      	negs	r2, r2
 8001380:	1a89      	subs	r1, r1, r2
 8001382:	2207      	movs	r2, #7
 8001384:	4664      	mov	r4, ip
 8001386:	403a      	ands	r2, r7
 8001388:	e592      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 800138a:	4301      	orrs	r1, r0
 800138c:	000f      	movs	r7, r1
 800138e:	1e79      	subs	r1, r7, #1
 8001390:	418f      	sbcs	r7, r1
 8001392:	e79d      	b.n	80012d0 <__aeabi_dadd+0x4e0>
 8001394:	001c      	movs	r4, r3
 8001396:	000f      	movs	r7, r1
 8001398:	3c20      	subs	r4, #32
 800139a:	40e7      	lsrs	r7, r4
 800139c:	2b20      	cmp	r3, #32
 800139e:	d003      	beq.n	80013a8 <__aeabi_dadd+0x5b8>
 80013a0:	2440      	movs	r4, #64	; 0x40
 80013a2:	1ae3      	subs	r3, r4, r3
 80013a4:	4099      	lsls	r1, r3
 80013a6:	4308      	orrs	r0, r1
 80013a8:	1e41      	subs	r1, r0, #1
 80013aa:	4188      	sbcs	r0, r1
 80013ac:	4338      	orrs	r0, r7
 80013ae:	e67c      	b.n	80010aa <__aeabi_dadd+0x2ba>
 80013b0:	2200      	movs	r2, #0
 80013b2:	2400      	movs	r4, #0
 80013b4:	e625      	b.n	8001002 <__aeabi_dadd+0x212>
 80013b6:	1a17      	subs	r7, r2, r0
 80013b8:	4643      	mov	r3, r8
 80013ba:	42ba      	cmp	r2, r7
 80013bc:	4192      	sbcs	r2, r2
 80013be:	1a59      	subs	r1, r3, r1
 80013c0:	4252      	negs	r2, r2
 80013c2:	1a89      	subs	r1, r1, r2
 80013c4:	4664      	mov	r4, ip
 80013c6:	0035      	movs	r5, r6
 80013c8:	e543      	b.n	8000e52 <__aeabi_dadd+0x62>
 80013ca:	4641      	mov	r1, r8
 80013cc:	0010      	movs	r0, r2
 80013ce:	4d14      	ldr	r5, [pc, #80]	; (8001420 <__aeabi_dadd+0x630>)
 80013d0:	e610      	b.n	8000ff4 <__aeabi_dadd+0x204>
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	2400      	movs	r4, #0
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	e680      	b.n	80010dc <__aeabi_dadd+0x2ec>
 80013da:	001d      	movs	r5, r3
 80013dc:	000f      	movs	r7, r1
 80013de:	3d20      	subs	r5, #32
 80013e0:	40ef      	lsrs	r7, r5
 80013e2:	46bc      	mov	ip, r7
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d003      	beq.n	80013f0 <__aeabi_dadd+0x600>
 80013e8:	2540      	movs	r5, #64	; 0x40
 80013ea:	1aeb      	subs	r3, r5, r3
 80013ec:	4099      	lsls	r1, r3
 80013ee:	4308      	orrs	r0, r1
 80013f0:	0007      	movs	r7, r0
 80013f2:	4663      	mov	r3, ip
 80013f4:	1e78      	subs	r0, r7, #1
 80013f6:	4187      	sbcs	r7, r0
 80013f8:	431f      	orrs	r7, r3
 80013fa:	e769      	b.n	80012d0 <__aeabi_dadd+0x4e0>
 80013fc:	1887      	adds	r7, r0, r2
 80013fe:	4297      	cmp	r7, r2
 8001400:	419b      	sbcs	r3, r3
 8001402:	4441      	add	r1, r8
 8001404:	425b      	negs	r3, r3
 8001406:	18c9      	adds	r1, r1, r3
 8001408:	0035      	movs	r5, r6
 800140a:	e5a3      	b.n	8000f54 <__aeabi_dadd+0x164>
 800140c:	003b      	movs	r3, r7
 800140e:	4333      	orrs	r3, r6
 8001410:	d0ce      	beq.n	80013b0 <__aeabi_dadd+0x5c0>
 8001412:	2207      	movs	r2, #7
 8001414:	0031      	movs	r1, r6
 8001416:	403a      	ands	r2, r7
 8001418:	e652      	b.n	80010c0 <__aeabi_dadd+0x2d0>
 800141a:	2300      	movs	r3, #0
 800141c:	001a      	movs	r2, r3
 800141e:	e5f4      	b.n	800100a <__aeabi_dadd+0x21a>
 8001420:	000007ff 	.word	0x000007ff
 8001424:	ff7fffff 	.word	0xff7fffff

08001428 <__aeabi_ddiv>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	4657      	mov	r7, sl
 800142c:	46de      	mov	lr, fp
 800142e:	464e      	mov	r6, r9
 8001430:	4645      	mov	r5, r8
 8001432:	b5e0      	push	{r5, r6, r7, lr}
 8001434:	4683      	mov	fp, r0
 8001436:	0007      	movs	r7, r0
 8001438:	030e      	lsls	r6, r1, #12
 800143a:	0048      	lsls	r0, r1, #1
 800143c:	b085      	sub	sp, #20
 800143e:	4692      	mov	sl, r2
 8001440:	001c      	movs	r4, r3
 8001442:	0b36      	lsrs	r6, r6, #12
 8001444:	0d40      	lsrs	r0, r0, #21
 8001446:	0fcd      	lsrs	r5, r1, #31
 8001448:	2800      	cmp	r0, #0
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x26>
 800144c:	e09d      	b.n	800158a <__aeabi_ddiv+0x162>
 800144e:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <__aeabi_ddiv+0x27c>)
 8001450:	4298      	cmp	r0, r3
 8001452:	d039      	beq.n	80014c8 <__aeabi_ddiv+0xa0>
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00f6      	lsls	r6, r6, #3
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431e      	orrs	r6, r3
 800145c:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <__aeabi_ddiv+0x280>)
 800145e:	0f7b      	lsrs	r3, r7, #29
 8001460:	4333      	orrs	r3, r6
 8001462:	4699      	mov	r9, r3
 8001464:	4694      	mov	ip, r2
 8001466:	0003      	movs	r3, r0
 8001468:	4463      	add	r3, ip
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	2600      	movs	r6, #0
 8001470:	00ff      	lsls	r7, r7, #3
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	0323      	lsls	r3, r4, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4698      	mov	r8, r3
 800147a:	0063      	lsls	r3, r4, #1
 800147c:	0fe4      	lsrs	r4, r4, #31
 800147e:	4652      	mov	r2, sl
 8001480:	0d5b      	lsrs	r3, r3, #21
 8001482:	9401      	str	r4, [sp, #4]
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x60>
 8001486:	e0b3      	b.n	80015f0 <__aeabi_ddiv+0x1c8>
 8001488:	4986      	ldr	r1, [pc, #536]	; (80016a4 <__aeabi_ddiv+0x27c>)
 800148a:	428b      	cmp	r3, r1
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x68>
 800148e:	e09e      	b.n	80015ce <__aeabi_ddiv+0x1a6>
 8001490:	4642      	mov	r2, r8
 8001492:	00d1      	lsls	r1, r2, #3
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0412      	lsls	r2, r2, #16
 8001498:	430a      	orrs	r2, r1
 800149a:	4651      	mov	r1, sl
 800149c:	0f49      	lsrs	r1, r1, #29
 800149e:	4311      	orrs	r1, r2
 80014a0:	468b      	mov	fp, r1
 80014a2:	4981      	ldr	r1, [pc, #516]	; (80016a8 <__aeabi_ddiv+0x280>)
 80014a4:	4652      	mov	r2, sl
 80014a6:	468c      	mov	ip, r1
 80014a8:	9900      	ldr	r1, [sp, #0]
 80014aa:	4463      	add	r3, ip
 80014ac:	1acb      	subs	r3, r1, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	00d2      	lsls	r2, r2, #3
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	002b      	movs	r3, r5
 80014b6:	4063      	eors	r3, r4
 80014b8:	469a      	mov	sl, r3
 80014ba:	2e0f      	cmp	r6, #15
 80014bc:	d900      	bls.n	80014c0 <__aeabi_ddiv+0x98>
 80014be:	e105      	b.n	80016cc <__aeabi_ddiv+0x2a4>
 80014c0:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <__aeabi_ddiv+0x284>)
 80014c2:	00b6      	lsls	r6, r6, #2
 80014c4:	599b      	ldr	r3, [r3, r6]
 80014c6:	469f      	mov	pc, r3
 80014c8:	465b      	mov	r3, fp
 80014ca:	4333      	orrs	r3, r6
 80014cc:	4699      	mov	r9, r3
 80014ce:	d000      	beq.n	80014d2 <__aeabi_ddiv+0xaa>
 80014d0:	e0b8      	b.n	8001644 <__aeabi_ddiv+0x21c>
 80014d2:	2302      	movs	r3, #2
 80014d4:	2608      	movs	r6, #8
 80014d6:	2700      	movs	r7, #0
 80014d8:	9000      	str	r0, [sp, #0]
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	e7ca      	b.n	8001474 <__aeabi_ddiv+0x4c>
 80014de:	46cb      	mov	fp, r9
 80014e0:	003a      	movs	r2, r7
 80014e2:	9902      	ldr	r1, [sp, #8]
 80014e4:	9501      	str	r5, [sp, #4]
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	469a      	mov	sl, r3
 80014ea:	2902      	cmp	r1, #2
 80014ec:	d027      	beq.n	800153e <__aeabi_ddiv+0x116>
 80014ee:	2903      	cmp	r1, #3
 80014f0:	d100      	bne.n	80014f4 <__aeabi_ddiv+0xcc>
 80014f2:	e280      	b.n	80019f6 <__aeabi_ddiv+0x5ce>
 80014f4:	2901      	cmp	r1, #1
 80014f6:	d044      	beq.n	8001582 <__aeabi_ddiv+0x15a>
 80014f8:	496d      	ldr	r1, [pc, #436]	; (80016b0 <__aeabi_ddiv+0x288>)
 80014fa:	9b00      	ldr	r3, [sp, #0]
 80014fc:	468c      	mov	ip, r1
 80014fe:	4463      	add	r3, ip
 8001500:	001c      	movs	r4, r3
 8001502:	2c00      	cmp	r4, #0
 8001504:	dd38      	ble.n	8001578 <__aeabi_ddiv+0x150>
 8001506:	0753      	lsls	r3, r2, #29
 8001508:	d000      	beq.n	800150c <__aeabi_ddiv+0xe4>
 800150a:	e213      	b.n	8001934 <__aeabi_ddiv+0x50c>
 800150c:	08d2      	lsrs	r2, r2, #3
 800150e:	465b      	mov	r3, fp
 8001510:	01db      	lsls	r3, r3, #7
 8001512:	d509      	bpl.n	8001528 <__aeabi_ddiv+0x100>
 8001514:	4659      	mov	r1, fp
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <__aeabi_ddiv+0x28c>)
 8001518:	4019      	ands	r1, r3
 800151a:	468b      	mov	fp, r1
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	00c9      	lsls	r1, r1, #3
 8001520:	468c      	mov	ip, r1
 8001522:	9b00      	ldr	r3, [sp, #0]
 8001524:	4463      	add	r3, ip
 8001526:	001c      	movs	r4, r3
 8001528:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <__aeabi_ddiv+0x290>)
 800152a:	429c      	cmp	r4, r3
 800152c:	dc07      	bgt.n	800153e <__aeabi_ddiv+0x116>
 800152e:	465b      	mov	r3, fp
 8001530:	0564      	lsls	r4, r4, #21
 8001532:	075f      	lsls	r7, r3, #29
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	4317      	orrs	r7, r2
 8001538:	0b1b      	lsrs	r3, r3, #12
 800153a:	0d62      	lsrs	r2, r4, #21
 800153c:	e002      	b.n	8001544 <__aeabi_ddiv+0x11c>
 800153e:	2300      	movs	r3, #0
 8001540:	2700      	movs	r7, #0
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <__aeabi_ddiv+0x27c>)
 8001544:	2100      	movs	r1, #0
 8001546:	031b      	lsls	r3, r3, #12
 8001548:	0b1c      	lsrs	r4, r3, #12
 800154a:	0d0b      	lsrs	r3, r1, #20
 800154c:	051b      	lsls	r3, r3, #20
 800154e:	4323      	orrs	r3, r4
 8001550:	0514      	lsls	r4, r2, #20
 8001552:	4a5a      	ldr	r2, [pc, #360]	; (80016bc <__aeabi_ddiv+0x294>)
 8001554:	0038      	movs	r0, r7
 8001556:	4013      	ands	r3, r2
 8001558:	431c      	orrs	r4, r3
 800155a:	4653      	mov	r3, sl
 800155c:	0064      	lsls	r4, r4, #1
 800155e:	07db      	lsls	r3, r3, #31
 8001560:	0864      	lsrs	r4, r4, #1
 8001562:	431c      	orrs	r4, r3
 8001564:	0021      	movs	r1, r4
 8001566:	b005      	add	sp, #20
 8001568:	bc3c      	pop	{r2, r3, r4, r5}
 800156a:	4690      	mov	r8, r2
 800156c:	4699      	mov	r9, r3
 800156e:	46a2      	mov	sl, r4
 8001570:	46ab      	mov	fp, r5
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	2201      	movs	r2, #1
 8001576:	4252      	negs	r2, r2
 8001578:	2301      	movs	r3, #1
 800157a:	1b1b      	subs	r3, r3, r4
 800157c:	2b38      	cmp	r3, #56	; 0x38
 800157e:	dc00      	bgt.n	8001582 <__aeabi_ddiv+0x15a>
 8001580:	e1ad      	b.n	80018de <__aeabi_ddiv+0x4b6>
 8001582:	2200      	movs	r2, #0
 8001584:	2300      	movs	r3, #0
 8001586:	2700      	movs	r7, #0
 8001588:	e7dc      	b.n	8001544 <__aeabi_ddiv+0x11c>
 800158a:	465b      	mov	r3, fp
 800158c:	4333      	orrs	r3, r6
 800158e:	4699      	mov	r9, r3
 8001590:	d05e      	beq.n	8001650 <__aeabi_ddiv+0x228>
 8001592:	2e00      	cmp	r6, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_ddiv+0x170>
 8001596:	e18a      	b.n	80018ae <__aeabi_ddiv+0x486>
 8001598:	0030      	movs	r0, r6
 800159a:	f001 f9fd 	bl	8002998 <__clzsi2>
 800159e:	0003      	movs	r3, r0
 80015a0:	3b0b      	subs	r3, #11
 80015a2:	2b1c      	cmp	r3, #28
 80015a4:	dd00      	ble.n	80015a8 <__aeabi_ddiv+0x180>
 80015a6:	e17b      	b.n	80018a0 <__aeabi_ddiv+0x478>
 80015a8:	221d      	movs	r2, #29
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	465a      	mov	r2, fp
 80015ae:	0001      	movs	r1, r0
 80015b0:	40da      	lsrs	r2, r3
 80015b2:	3908      	subs	r1, #8
 80015b4:	408e      	lsls	r6, r1
 80015b6:	0013      	movs	r3, r2
 80015b8:	465f      	mov	r7, fp
 80015ba:	4333      	orrs	r3, r6
 80015bc:	4699      	mov	r9, r3
 80015be:	408f      	lsls	r7, r1
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <__aeabi_ddiv+0x298>)
 80015c2:	2600      	movs	r6, #0
 80015c4:	1a1b      	subs	r3, r3, r0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	e752      	b.n	8001474 <__aeabi_ddiv+0x4c>
 80015ce:	4641      	mov	r1, r8
 80015d0:	4653      	mov	r3, sl
 80015d2:	430b      	orrs	r3, r1
 80015d4:	493b      	ldr	r1, [pc, #236]	; (80016c4 <__aeabi_ddiv+0x29c>)
 80015d6:	469b      	mov	fp, r3
 80015d8:	468c      	mov	ip, r1
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	4463      	add	r3, ip
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	465b      	mov	r3, fp
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13b      	bne.n	800165e <__aeabi_ddiv+0x236>
 80015e6:	2302      	movs	r3, #2
 80015e8:	2200      	movs	r2, #0
 80015ea:	431e      	orrs	r6, r3
 80015ec:	2102      	movs	r1, #2
 80015ee:	e761      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 80015f0:	4643      	mov	r3, r8
 80015f2:	4313      	orrs	r3, r2
 80015f4:	469b      	mov	fp, r3
 80015f6:	d037      	beq.n	8001668 <__aeabi_ddiv+0x240>
 80015f8:	4643      	mov	r3, r8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_ddiv+0x1d8>
 80015fe:	e162      	b.n	80018c6 <__aeabi_ddiv+0x49e>
 8001600:	4640      	mov	r0, r8
 8001602:	f001 f9c9 	bl	8002998 <__clzsi2>
 8001606:	0003      	movs	r3, r0
 8001608:	3b0b      	subs	r3, #11
 800160a:	2b1c      	cmp	r3, #28
 800160c:	dd00      	ble.n	8001610 <__aeabi_ddiv+0x1e8>
 800160e:	e153      	b.n	80018b8 <__aeabi_ddiv+0x490>
 8001610:	0002      	movs	r2, r0
 8001612:	4641      	mov	r1, r8
 8001614:	3a08      	subs	r2, #8
 8001616:	4091      	lsls	r1, r2
 8001618:	4688      	mov	r8, r1
 800161a:	211d      	movs	r1, #29
 800161c:	1acb      	subs	r3, r1, r3
 800161e:	4651      	mov	r1, sl
 8001620:	40d9      	lsrs	r1, r3
 8001622:	000b      	movs	r3, r1
 8001624:	4641      	mov	r1, r8
 8001626:	430b      	orrs	r3, r1
 8001628:	469b      	mov	fp, r3
 800162a:	4653      	mov	r3, sl
 800162c:	4093      	lsls	r3, r2
 800162e:	001a      	movs	r2, r3
 8001630:	9b00      	ldr	r3, [sp, #0]
 8001632:	4925      	ldr	r1, [pc, #148]	; (80016c8 <__aeabi_ddiv+0x2a0>)
 8001634:	469c      	mov	ip, r3
 8001636:	4460      	add	r0, ip
 8001638:	0003      	movs	r3, r0
 800163a:	468c      	mov	ip, r1
 800163c:	4463      	add	r3, ip
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2100      	movs	r1, #0
 8001642:	e737      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 8001644:	2303      	movs	r3, #3
 8001646:	46b1      	mov	r9, r6
 8001648:	9000      	str	r0, [sp, #0]
 800164a:	260c      	movs	r6, #12
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	e711      	b.n	8001474 <__aeabi_ddiv+0x4c>
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	2604      	movs	r6, #4
 8001658:	2700      	movs	r7, #0
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	e70a      	b.n	8001474 <__aeabi_ddiv+0x4c>
 800165e:	2303      	movs	r3, #3
 8001660:	46c3      	mov	fp, r8
 8001662:	431e      	orrs	r6, r3
 8001664:	2103      	movs	r1, #3
 8001666:	e725      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 8001668:	3301      	adds	r3, #1
 800166a:	431e      	orrs	r6, r3
 800166c:	2200      	movs	r2, #0
 800166e:	2101      	movs	r1, #1
 8001670:	e720      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 8001672:	2300      	movs	r3, #0
 8001674:	469a      	mov	sl, r3
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	2700      	movs	r7, #0
 800167a:	031b      	lsls	r3, r3, #12
 800167c:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <__aeabi_ddiv+0x27c>)
 800167e:	e761      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	4649      	mov	r1, r9
 8001684:	031b      	lsls	r3, r3, #12
 8001686:	4219      	tst	r1, r3
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x264>
 800168a:	e0e2      	b.n	8001852 <__aeabi_ddiv+0x42a>
 800168c:	4659      	mov	r1, fp
 800168e:	4219      	tst	r1, r3
 8001690:	d000      	beq.n	8001694 <__aeabi_ddiv+0x26c>
 8001692:	e0de      	b.n	8001852 <__aeabi_ddiv+0x42a>
 8001694:	430b      	orrs	r3, r1
 8001696:	031b      	lsls	r3, r3, #12
 8001698:	0017      	movs	r7, r2
 800169a:	0b1b      	lsrs	r3, r3, #12
 800169c:	46a2      	mov	sl, r4
 800169e:	4a01      	ldr	r2, [pc, #4]	; (80016a4 <__aeabi_ddiv+0x27c>)
 80016a0:	e750      	b.n	8001544 <__aeabi_ddiv+0x11c>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff
 80016a8:	fffffc01 	.word	0xfffffc01
 80016ac:	08028178 	.word	0x08028178
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	800fffff 	.word	0x800fffff
 80016c0:	fffffc0d 	.word	0xfffffc0d
 80016c4:	fffff801 	.word	0xfffff801
 80016c8:	000003f3 	.word	0x000003f3
 80016cc:	45d9      	cmp	r9, fp
 80016ce:	d900      	bls.n	80016d2 <__aeabi_ddiv+0x2aa>
 80016d0:	e0cb      	b.n	800186a <__aeabi_ddiv+0x442>
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0x2ae>
 80016d4:	e0c6      	b.n	8001864 <__aeabi_ddiv+0x43c>
 80016d6:	003c      	movs	r4, r7
 80016d8:	4648      	mov	r0, r9
 80016da:	2700      	movs	r7, #0
 80016dc:	9b00      	ldr	r3, [sp, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	465b      	mov	r3, fp
 80016e4:	0e16      	lsrs	r6, r2, #24
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	431e      	orrs	r6, r3
 80016ea:	0213      	lsls	r3, r2, #8
 80016ec:	4698      	mov	r8, r3
 80016ee:	0433      	lsls	r3, r6, #16
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	4699      	mov	r9, r3
 80016f4:	0c31      	lsrs	r1, r6, #16
 80016f6:	9101      	str	r1, [sp, #4]
 80016f8:	f7fe fd94 	bl	8000224 <__aeabi_uidivmod>
 80016fc:	464a      	mov	r2, r9
 80016fe:	4342      	muls	r2, r0
 8001700:	040b      	lsls	r3, r1, #16
 8001702:	0c21      	lsrs	r1, r4, #16
 8001704:	0005      	movs	r5, r0
 8001706:	4319      	orrs	r1, r3
 8001708:	428a      	cmp	r2, r1
 800170a:	d907      	bls.n	800171c <__aeabi_ddiv+0x2f4>
 800170c:	1989      	adds	r1, r1, r6
 800170e:	3d01      	subs	r5, #1
 8001710:	428e      	cmp	r6, r1
 8001712:	d803      	bhi.n	800171c <__aeabi_ddiv+0x2f4>
 8001714:	428a      	cmp	r2, r1
 8001716:	d901      	bls.n	800171c <__aeabi_ddiv+0x2f4>
 8001718:	1e85      	subs	r5, r0, #2
 800171a:	1989      	adds	r1, r1, r6
 800171c:	1a88      	subs	r0, r1, r2
 800171e:	9901      	ldr	r1, [sp, #4]
 8001720:	f7fe fd80 	bl	8000224 <__aeabi_uidivmod>
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	468c      	mov	ip, r1
 8001728:	464a      	mov	r2, r9
 800172a:	0421      	lsls	r1, r4, #16
 800172c:	4664      	mov	r4, ip
 800172e:	4342      	muls	r2, r0
 8001730:	0c09      	lsrs	r1, r1, #16
 8001732:	0003      	movs	r3, r0
 8001734:	4321      	orrs	r1, r4
 8001736:	428a      	cmp	r2, r1
 8001738:	d904      	bls.n	8001744 <__aeabi_ddiv+0x31c>
 800173a:	1989      	adds	r1, r1, r6
 800173c:	3b01      	subs	r3, #1
 800173e:	428e      	cmp	r6, r1
 8001740:	d800      	bhi.n	8001744 <__aeabi_ddiv+0x31c>
 8001742:	e0f1      	b.n	8001928 <__aeabi_ddiv+0x500>
 8001744:	042d      	lsls	r5, r5, #16
 8001746:	431d      	orrs	r5, r3
 8001748:	46ab      	mov	fp, r5
 800174a:	4643      	mov	r3, r8
 800174c:	1a89      	subs	r1, r1, r2
 800174e:	4642      	mov	r2, r8
 8001750:	0c28      	lsrs	r0, r5, #16
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	0c1d      	lsrs	r5, r3, #16
 8001756:	465b      	mov	r3, fp
 8001758:	0c14      	lsrs	r4, r2, #16
 800175a:	0022      	movs	r2, r4
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	435a      	muls	r2, r3
 8001762:	9403      	str	r4, [sp, #12]
 8001764:	436b      	muls	r3, r5
 8001766:	4344      	muls	r4, r0
 8001768:	9502      	str	r5, [sp, #8]
 800176a:	4368      	muls	r0, r5
 800176c:	191b      	adds	r3, r3, r4
 800176e:	0c15      	lsrs	r5, r2, #16
 8001770:	18eb      	adds	r3, r5, r3
 8001772:	429c      	cmp	r4, r3
 8001774:	d903      	bls.n	800177e <__aeabi_ddiv+0x356>
 8001776:	2480      	movs	r4, #128	; 0x80
 8001778:	0264      	lsls	r4, r4, #9
 800177a:	46a4      	mov	ip, r4
 800177c:	4460      	add	r0, ip
 800177e:	0c1c      	lsrs	r4, r3, #16
 8001780:	0415      	lsls	r5, r2, #16
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	0c2d      	lsrs	r5, r5, #16
 8001786:	1820      	adds	r0, r4, r0
 8001788:	195d      	adds	r5, r3, r5
 800178a:	4281      	cmp	r1, r0
 800178c:	d377      	bcc.n	800187e <__aeabi_ddiv+0x456>
 800178e:	d073      	beq.n	8001878 <__aeabi_ddiv+0x450>
 8001790:	1a0c      	subs	r4, r1, r0
 8001792:	4aa2      	ldr	r2, [pc, #648]	; (8001a1c <__aeabi_ddiv+0x5f4>)
 8001794:	1b7d      	subs	r5, r7, r5
 8001796:	42af      	cmp	r7, r5
 8001798:	41bf      	sbcs	r7, r7
 800179a:	4694      	mov	ip, r2
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	427f      	negs	r7, r7
 80017a0:	4463      	add	r3, ip
 80017a2:	1be0      	subs	r0, r4, r7
 80017a4:	001c      	movs	r4, r3
 80017a6:	4286      	cmp	r6, r0
 80017a8:	d100      	bne.n	80017ac <__aeabi_ddiv+0x384>
 80017aa:	e0db      	b.n	8001964 <__aeabi_ddiv+0x53c>
 80017ac:	9901      	ldr	r1, [sp, #4]
 80017ae:	f7fe fd39 	bl	8000224 <__aeabi_uidivmod>
 80017b2:	464a      	mov	r2, r9
 80017b4:	4342      	muls	r2, r0
 80017b6:	040b      	lsls	r3, r1, #16
 80017b8:	0c29      	lsrs	r1, r5, #16
 80017ba:	0007      	movs	r7, r0
 80017bc:	4319      	orrs	r1, r3
 80017be:	428a      	cmp	r2, r1
 80017c0:	d907      	bls.n	80017d2 <__aeabi_ddiv+0x3aa>
 80017c2:	1989      	adds	r1, r1, r6
 80017c4:	3f01      	subs	r7, #1
 80017c6:	428e      	cmp	r6, r1
 80017c8:	d803      	bhi.n	80017d2 <__aeabi_ddiv+0x3aa>
 80017ca:	428a      	cmp	r2, r1
 80017cc:	d901      	bls.n	80017d2 <__aeabi_ddiv+0x3aa>
 80017ce:	1e87      	subs	r7, r0, #2
 80017d0:	1989      	adds	r1, r1, r6
 80017d2:	1a88      	subs	r0, r1, r2
 80017d4:	9901      	ldr	r1, [sp, #4]
 80017d6:	f7fe fd25 	bl	8000224 <__aeabi_uidivmod>
 80017da:	0409      	lsls	r1, r1, #16
 80017dc:	464a      	mov	r2, r9
 80017de:	4689      	mov	r9, r1
 80017e0:	0429      	lsls	r1, r5, #16
 80017e2:	464d      	mov	r5, r9
 80017e4:	4342      	muls	r2, r0
 80017e6:	0c09      	lsrs	r1, r1, #16
 80017e8:	0003      	movs	r3, r0
 80017ea:	4329      	orrs	r1, r5
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d907      	bls.n	8001800 <__aeabi_ddiv+0x3d8>
 80017f0:	1989      	adds	r1, r1, r6
 80017f2:	3b01      	subs	r3, #1
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d803      	bhi.n	8001800 <__aeabi_ddiv+0x3d8>
 80017f8:	428a      	cmp	r2, r1
 80017fa:	d901      	bls.n	8001800 <__aeabi_ddiv+0x3d8>
 80017fc:	1e83      	subs	r3, r0, #2
 80017fe:	1989      	adds	r1, r1, r6
 8001800:	043f      	lsls	r7, r7, #16
 8001802:	1a89      	subs	r1, r1, r2
 8001804:	003a      	movs	r2, r7
 8001806:	9f03      	ldr	r7, [sp, #12]
 8001808:	431a      	orrs	r2, r3
 800180a:	0038      	movs	r0, r7
 800180c:	0413      	lsls	r3, r2, #16
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	4358      	muls	r0, r3
 8001812:	4681      	mov	r9, r0
 8001814:	9802      	ldr	r0, [sp, #8]
 8001816:	0c15      	lsrs	r5, r2, #16
 8001818:	436f      	muls	r7, r5
 800181a:	4343      	muls	r3, r0
 800181c:	4345      	muls	r5, r0
 800181e:	4648      	mov	r0, r9
 8001820:	0c00      	lsrs	r0, r0, #16
 8001822:	4684      	mov	ip, r0
 8001824:	19db      	adds	r3, r3, r7
 8001826:	4463      	add	r3, ip
 8001828:	429f      	cmp	r7, r3
 800182a:	d903      	bls.n	8001834 <__aeabi_ddiv+0x40c>
 800182c:	2080      	movs	r0, #128	; 0x80
 800182e:	0240      	lsls	r0, r0, #9
 8001830:	4684      	mov	ip, r0
 8001832:	4465      	add	r5, ip
 8001834:	4648      	mov	r0, r9
 8001836:	0c1f      	lsrs	r7, r3, #16
 8001838:	0400      	lsls	r0, r0, #16
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	0c00      	lsrs	r0, r0, #16
 800183e:	197d      	adds	r5, r7, r5
 8001840:	1818      	adds	r0, r3, r0
 8001842:	42a9      	cmp	r1, r5
 8001844:	d200      	bcs.n	8001848 <__aeabi_ddiv+0x420>
 8001846:	e084      	b.n	8001952 <__aeabi_ddiv+0x52a>
 8001848:	d100      	bne.n	800184c <__aeabi_ddiv+0x424>
 800184a:	e07f      	b.n	800194c <__aeabi_ddiv+0x524>
 800184c:	2301      	movs	r3, #1
 800184e:	431a      	orrs	r2, r3
 8001850:	e657      	b.n	8001502 <__aeabi_ddiv+0xda>
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	464a      	mov	r2, r9
 8001856:	031b      	lsls	r3, r3, #12
 8001858:	4313      	orrs	r3, r2
 800185a:	031b      	lsls	r3, r3, #12
 800185c:	0b1b      	lsrs	r3, r3, #12
 800185e:	46aa      	mov	sl, r5
 8001860:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <__aeabi_ddiv+0x5f8>)
 8001862:	e66f      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001864:	42ba      	cmp	r2, r7
 8001866:	d900      	bls.n	800186a <__aeabi_ddiv+0x442>
 8001868:	e735      	b.n	80016d6 <__aeabi_ddiv+0x2ae>
 800186a:	464b      	mov	r3, r9
 800186c:	07dc      	lsls	r4, r3, #31
 800186e:	0858      	lsrs	r0, r3, #1
 8001870:	087b      	lsrs	r3, r7, #1
 8001872:	431c      	orrs	r4, r3
 8001874:	07ff      	lsls	r7, r7, #31
 8001876:	e734      	b.n	80016e2 <__aeabi_ddiv+0x2ba>
 8001878:	2400      	movs	r4, #0
 800187a:	42af      	cmp	r7, r5
 800187c:	d289      	bcs.n	8001792 <__aeabi_ddiv+0x36a>
 800187e:	4447      	add	r7, r8
 8001880:	4547      	cmp	r7, r8
 8001882:	41a4      	sbcs	r4, r4
 8001884:	465b      	mov	r3, fp
 8001886:	4264      	negs	r4, r4
 8001888:	19a4      	adds	r4, r4, r6
 800188a:	1864      	adds	r4, r4, r1
 800188c:	3b01      	subs	r3, #1
 800188e:	42a6      	cmp	r6, r4
 8001890:	d21e      	bcs.n	80018d0 <__aeabi_ddiv+0x4a8>
 8001892:	42a0      	cmp	r0, r4
 8001894:	d86d      	bhi.n	8001972 <__aeabi_ddiv+0x54a>
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0x472>
 8001898:	e0b6      	b.n	8001a08 <__aeabi_ddiv+0x5e0>
 800189a:	1a24      	subs	r4, r4, r0
 800189c:	469b      	mov	fp, r3
 800189e:	e778      	b.n	8001792 <__aeabi_ddiv+0x36a>
 80018a0:	0003      	movs	r3, r0
 80018a2:	465a      	mov	r2, fp
 80018a4:	3b28      	subs	r3, #40	; 0x28
 80018a6:	409a      	lsls	r2, r3
 80018a8:	2700      	movs	r7, #0
 80018aa:	4691      	mov	r9, r2
 80018ac:	e688      	b.n	80015c0 <__aeabi_ddiv+0x198>
 80018ae:	4658      	mov	r0, fp
 80018b0:	f001 f872 	bl	8002998 <__clzsi2>
 80018b4:	3020      	adds	r0, #32
 80018b6:	e672      	b.n	800159e <__aeabi_ddiv+0x176>
 80018b8:	0003      	movs	r3, r0
 80018ba:	4652      	mov	r2, sl
 80018bc:	3b28      	subs	r3, #40	; 0x28
 80018be:	409a      	lsls	r2, r3
 80018c0:	4693      	mov	fp, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	e6b4      	b.n	8001630 <__aeabi_ddiv+0x208>
 80018c6:	4650      	mov	r0, sl
 80018c8:	f001 f866 	bl	8002998 <__clzsi2>
 80018cc:	3020      	adds	r0, #32
 80018ce:	e69a      	b.n	8001606 <__aeabi_ddiv+0x1de>
 80018d0:	42a6      	cmp	r6, r4
 80018d2:	d1e2      	bne.n	800189a <__aeabi_ddiv+0x472>
 80018d4:	45b8      	cmp	r8, r7
 80018d6:	d9dc      	bls.n	8001892 <__aeabi_ddiv+0x46a>
 80018d8:	1a34      	subs	r4, r6, r0
 80018da:	469b      	mov	fp, r3
 80018dc:	e759      	b.n	8001792 <__aeabi_ddiv+0x36a>
 80018de:	2b1f      	cmp	r3, #31
 80018e0:	dc65      	bgt.n	80019ae <__aeabi_ddiv+0x586>
 80018e2:	4c50      	ldr	r4, [pc, #320]	; (8001a24 <__aeabi_ddiv+0x5fc>)
 80018e4:	9900      	ldr	r1, [sp, #0]
 80018e6:	46a4      	mov	ip, r4
 80018e8:	465c      	mov	r4, fp
 80018ea:	4461      	add	r1, ip
 80018ec:	0008      	movs	r0, r1
 80018ee:	408c      	lsls	r4, r1
 80018f0:	0011      	movs	r1, r2
 80018f2:	4082      	lsls	r2, r0
 80018f4:	40d9      	lsrs	r1, r3
 80018f6:	1e50      	subs	r0, r2, #1
 80018f8:	4182      	sbcs	r2, r0
 80018fa:	430c      	orrs	r4, r1
 80018fc:	4314      	orrs	r4, r2
 80018fe:	465a      	mov	r2, fp
 8001900:	40da      	lsrs	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	0762      	lsls	r2, r4, #29
 8001906:	d009      	beq.n	800191c <__aeabi_ddiv+0x4f4>
 8001908:	220f      	movs	r2, #15
 800190a:	4022      	ands	r2, r4
 800190c:	2a04      	cmp	r2, #4
 800190e:	d005      	beq.n	800191c <__aeabi_ddiv+0x4f4>
 8001910:	0022      	movs	r2, r4
 8001912:	1d14      	adds	r4, r2, #4
 8001914:	4294      	cmp	r4, r2
 8001916:	4189      	sbcs	r1, r1
 8001918:	4249      	negs	r1, r1
 800191a:	185b      	adds	r3, r3, r1
 800191c:	021a      	lsls	r2, r3, #8
 800191e:	d562      	bpl.n	80019e6 <__aeabi_ddiv+0x5be>
 8001920:	2201      	movs	r2, #1
 8001922:	2300      	movs	r3, #0
 8001924:	2700      	movs	r7, #0
 8001926:	e60d      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001928:	428a      	cmp	r2, r1
 800192a:	d800      	bhi.n	800192e <__aeabi_ddiv+0x506>
 800192c:	e70a      	b.n	8001744 <__aeabi_ddiv+0x31c>
 800192e:	1e83      	subs	r3, r0, #2
 8001930:	1989      	adds	r1, r1, r6
 8001932:	e707      	b.n	8001744 <__aeabi_ddiv+0x31c>
 8001934:	230f      	movs	r3, #15
 8001936:	4013      	ands	r3, r2
 8001938:	2b04      	cmp	r3, #4
 800193a:	d100      	bne.n	800193e <__aeabi_ddiv+0x516>
 800193c:	e5e6      	b.n	800150c <__aeabi_ddiv+0xe4>
 800193e:	1d17      	adds	r7, r2, #4
 8001940:	4297      	cmp	r7, r2
 8001942:	4192      	sbcs	r2, r2
 8001944:	4253      	negs	r3, r2
 8001946:	449b      	add	fp, r3
 8001948:	08fa      	lsrs	r2, r7, #3
 800194a:	e5e0      	b.n	800150e <__aeabi_ddiv+0xe6>
 800194c:	2800      	cmp	r0, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_ddiv+0x52a>
 8001950:	e5d7      	b.n	8001502 <__aeabi_ddiv+0xda>
 8001952:	1871      	adds	r1, r6, r1
 8001954:	1e53      	subs	r3, r2, #1
 8001956:	42b1      	cmp	r1, r6
 8001958:	d327      	bcc.n	80019aa <__aeabi_ddiv+0x582>
 800195a:	42a9      	cmp	r1, r5
 800195c:	d315      	bcc.n	800198a <__aeabi_ddiv+0x562>
 800195e:	d058      	beq.n	8001a12 <__aeabi_ddiv+0x5ea>
 8001960:	001a      	movs	r2, r3
 8001962:	e773      	b.n	800184c <__aeabi_ddiv+0x424>
 8001964:	2b00      	cmp	r3, #0
 8001966:	dc00      	bgt.n	800196a <__aeabi_ddiv+0x542>
 8001968:	e604      	b.n	8001574 <__aeabi_ddiv+0x14c>
 800196a:	2301      	movs	r3, #1
 800196c:	2200      	movs	r2, #0
 800196e:	449b      	add	fp, r3
 8001970:	e5cd      	b.n	800150e <__aeabi_ddiv+0xe6>
 8001972:	2302      	movs	r3, #2
 8001974:	4447      	add	r7, r8
 8001976:	4547      	cmp	r7, r8
 8001978:	4189      	sbcs	r1, r1
 800197a:	425b      	negs	r3, r3
 800197c:	469c      	mov	ip, r3
 800197e:	4249      	negs	r1, r1
 8001980:	1989      	adds	r1, r1, r6
 8001982:	190c      	adds	r4, r1, r4
 8001984:	44e3      	add	fp, ip
 8001986:	1a24      	subs	r4, r4, r0
 8001988:	e703      	b.n	8001792 <__aeabi_ddiv+0x36a>
 800198a:	4643      	mov	r3, r8
 800198c:	005f      	lsls	r7, r3, #1
 800198e:	4547      	cmp	r7, r8
 8001990:	419b      	sbcs	r3, r3
 8001992:	46b8      	mov	r8, r7
 8001994:	425b      	negs	r3, r3
 8001996:	199e      	adds	r6, r3, r6
 8001998:	3a02      	subs	r2, #2
 800199a:	1989      	adds	r1, r1, r6
 800199c:	42a9      	cmp	r1, r5
 800199e:	d000      	beq.n	80019a2 <__aeabi_ddiv+0x57a>
 80019a0:	e754      	b.n	800184c <__aeabi_ddiv+0x424>
 80019a2:	4540      	cmp	r0, r8
 80019a4:	d000      	beq.n	80019a8 <__aeabi_ddiv+0x580>
 80019a6:	e751      	b.n	800184c <__aeabi_ddiv+0x424>
 80019a8:	e5ab      	b.n	8001502 <__aeabi_ddiv+0xda>
 80019aa:	001a      	movs	r2, r3
 80019ac:	e7f6      	b.n	800199c <__aeabi_ddiv+0x574>
 80019ae:	211f      	movs	r1, #31
 80019b0:	465f      	mov	r7, fp
 80019b2:	4249      	negs	r1, r1
 80019b4:	1b0c      	subs	r4, r1, r4
 80019b6:	40e7      	lsrs	r7, r4
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d007      	beq.n	80019cc <__aeabi_ddiv+0x5a4>
 80019bc:	491a      	ldr	r1, [pc, #104]	; (8001a28 <__aeabi_ddiv+0x600>)
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	468c      	mov	ip, r1
 80019c2:	4463      	add	r3, ip
 80019c4:	0018      	movs	r0, r3
 80019c6:	465b      	mov	r3, fp
 80019c8:	4083      	lsls	r3, r0
 80019ca:	431a      	orrs	r2, r3
 80019cc:	1e50      	subs	r0, r2, #1
 80019ce:	4182      	sbcs	r2, r0
 80019d0:	433a      	orrs	r2, r7
 80019d2:	2707      	movs	r7, #7
 80019d4:	2300      	movs	r3, #0
 80019d6:	4017      	ands	r7, r2
 80019d8:	d009      	beq.n	80019ee <__aeabi_ddiv+0x5c6>
 80019da:	210f      	movs	r1, #15
 80019dc:	2300      	movs	r3, #0
 80019de:	4011      	ands	r1, r2
 80019e0:	0014      	movs	r4, r2
 80019e2:	2904      	cmp	r1, #4
 80019e4:	d195      	bne.n	8001912 <__aeabi_ddiv+0x4ea>
 80019e6:	0022      	movs	r2, r4
 80019e8:	075f      	lsls	r7, r3, #29
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	0b1b      	lsrs	r3, r3, #12
 80019ee:	08d2      	lsrs	r2, r2, #3
 80019f0:	4317      	orrs	r7, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	e5a6      	b.n	8001544 <__aeabi_ddiv+0x11c>
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	4659      	mov	r1, fp
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	430b      	orrs	r3, r1
 80019fe:	031b      	lsls	r3, r3, #12
 8001a00:	0017      	movs	r7, r2
 8001a02:	0b1b      	lsrs	r3, r3, #12
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <__aeabi_ddiv+0x5f8>)
 8001a06:	e59d      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001a08:	42bd      	cmp	r5, r7
 8001a0a:	d8b2      	bhi.n	8001972 <__aeabi_ddiv+0x54a>
 8001a0c:	469b      	mov	fp, r3
 8001a0e:	2400      	movs	r4, #0
 8001a10:	e6bf      	b.n	8001792 <__aeabi_ddiv+0x36a>
 8001a12:	4580      	cmp	r8, r0
 8001a14:	d3b9      	bcc.n	800198a <__aeabi_ddiv+0x562>
 8001a16:	001a      	movs	r2, r3
 8001a18:	e7c3      	b.n	80019a2 <__aeabi_ddiv+0x57a>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	000003ff 	.word	0x000003ff
 8001a20:	000007ff 	.word	0x000007ff
 8001a24:	0000041e 	.word	0x0000041e
 8001a28:	0000043e 	.word	0x0000043e

08001a2c <__eqdf2>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	464f      	mov	r7, r9
 8001a30:	4646      	mov	r6, r8
 8001a32:	46d6      	mov	lr, sl
 8001a34:	4684      	mov	ip, r0
 8001a36:	b5c0      	push	{r6, r7, lr}
 8001a38:	4680      	mov	r8, r0
 8001a3a:	4e19      	ldr	r6, [pc, #100]	; (8001aa0 <__eqdf2+0x74>)
 8001a3c:	0318      	lsls	r0, r3, #12
 8001a3e:	030f      	lsls	r7, r1, #12
 8001a40:	004d      	lsls	r5, r1, #1
 8001a42:	0b00      	lsrs	r0, r0, #12
 8001a44:	005c      	lsls	r4, r3, #1
 8001a46:	4682      	mov	sl, r0
 8001a48:	0b3f      	lsrs	r7, r7, #12
 8001a4a:	0d6d      	lsrs	r5, r5, #21
 8001a4c:	0fc9      	lsrs	r1, r1, #31
 8001a4e:	4691      	mov	r9, r2
 8001a50:	0d64      	lsrs	r4, r4, #21
 8001a52:	0fdb      	lsrs	r3, r3, #31
 8001a54:	2001      	movs	r0, #1
 8001a56:	42b5      	cmp	r5, r6
 8001a58:	d00a      	beq.n	8001a70 <__eqdf2+0x44>
 8001a5a:	42b4      	cmp	r4, r6
 8001a5c:	d003      	beq.n	8001a66 <__eqdf2+0x3a>
 8001a5e:	42a5      	cmp	r5, r4
 8001a60:	d101      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a62:	4557      	cmp	r7, sl
 8001a64:	d00c      	beq.n	8001a80 <__eqdf2+0x54>
 8001a66:	bc1c      	pop	{r2, r3, r4}
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	46a2      	mov	sl, r4
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a70:	4666      	mov	r6, ip
 8001a72:	433e      	orrs	r6, r7
 8001a74:	d1f7      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a76:	42ac      	cmp	r4, r5
 8001a78:	d1f5      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a7a:	4654      	mov	r4, sl
 8001a7c:	4314      	orrs	r4, r2
 8001a7e:	d1f2      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a80:	2001      	movs	r0, #1
 8001a82:	45c8      	cmp	r8, r9
 8001a84:	d1ef      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a86:	4299      	cmp	r1, r3
 8001a88:	d007      	beq.n	8001a9a <__eqdf2+0x6e>
 8001a8a:	2d00      	cmp	r5, #0
 8001a8c:	d1eb      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a8e:	4663      	mov	r3, ip
 8001a90:	431f      	orrs	r7, r3
 8001a92:	0038      	movs	r0, r7
 8001a94:	1e47      	subs	r7, r0, #1
 8001a96:	41b8      	sbcs	r0, r7
 8001a98:	e7e5      	b.n	8001a66 <__eqdf2+0x3a>
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e7e3      	b.n	8001a66 <__eqdf2+0x3a>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000007ff 	.word	0x000007ff

08001aa4 <__gedf2>:
 8001aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa6:	464f      	mov	r7, r9
 8001aa8:	4646      	mov	r6, r8
 8001aaa:	46d6      	mov	lr, sl
 8001aac:	004d      	lsls	r5, r1, #1
 8001aae:	b5c0      	push	{r6, r7, lr}
 8001ab0:	030e      	lsls	r6, r1, #12
 8001ab2:	0fc9      	lsrs	r1, r1, #31
 8001ab4:	468a      	mov	sl, r1
 8001ab6:	492c      	ldr	r1, [pc, #176]	; (8001b68 <__gedf2+0xc4>)
 8001ab8:	031f      	lsls	r7, r3, #12
 8001aba:	005c      	lsls	r4, r3, #1
 8001abc:	4680      	mov	r8, r0
 8001abe:	0b36      	lsrs	r6, r6, #12
 8001ac0:	0d6d      	lsrs	r5, r5, #21
 8001ac2:	4691      	mov	r9, r2
 8001ac4:	0b3f      	lsrs	r7, r7, #12
 8001ac6:	0d64      	lsrs	r4, r4, #21
 8001ac8:	0fdb      	lsrs	r3, r3, #31
 8001aca:	428d      	cmp	r5, r1
 8001acc:	d01e      	beq.n	8001b0c <__gedf2+0x68>
 8001ace:	428c      	cmp	r4, r1
 8001ad0:	d016      	beq.n	8001b00 <__gedf2+0x5c>
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	d11e      	bne.n	8001b14 <__gedf2+0x70>
 8001ad6:	4330      	orrs	r0, r6
 8001ad8:	4684      	mov	ip, r0
 8001ada:	2c00      	cmp	r4, #0
 8001adc:	d101      	bne.n	8001ae2 <__gedf2+0x3e>
 8001ade:	433a      	orrs	r2, r7
 8001ae0:	d023      	beq.n	8001b2a <__gedf2+0x86>
 8001ae2:	4662      	mov	r2, ip
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	d01a      	beq.n	8001b1e <__gedf2+0x7a>
 8001ae8:	459a      	cmp	sl, r3
 8001aea:	d029      	beq.n	8001b40 <__gedf2+0x9c>
 8001aec:	4651      	mov	r1, sl
 8001aee:	2002      	movs	r0, #2
 8001af0:	3901      	subs	r1, #1
 8001af2:	4008      	ands	r0, r1
 8001af4:	3801      	subs	r0, #1
 8001af6:	bc1c      	pop	{r2, r3, r4}
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	46a2      	mov	sl, r4
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	0039      	movs	r1, r7
 8001b02:	4311      	orrs	r1, r2
 8001b04:	d0e5      	beq.n	8001ad2 <__gedf2+0x2e>
 8001b06:	2002      	movs	r0, #2
 8001b08:	4240      	negs	r0, r0
 8001b0a:	e7f4      	b.n	8001af6 <__gedf2+0x52>
 8001b0c:	4330      	orrs	r0, r6
 8001b0e:	d1fa      	bne.n	8001b06 <__gedf2+0x62>
 8001b10:	42ac      	cmp	r4, r5
 8001b12:	d00f      	beq.n	8001b34 <__gedf2+0x90>
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	d10f      	bne.n	8001b38 <__gedf2+0x94>
 8001b18:	433a      	orrs	r2, r7
 8001b1a:	d0e7      	beq.n	8001aec <__gedf2+0x48>
 8001b1c:	e00c      	b.n	8001b38 <__gedf2+0x94>
 8001b1e:	2201      	movs	r2, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	4393      	bics	r3, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	3001      	adds	r0, #1
 8001b28:	e7e5      	b.n	8001af6 <__gedf2+0x52>
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0e1      	beq.n	8001af6 <__gedf2+0x52>
 8001b32:	e7db      	b.n	8001aec <__gedf2+0x48>
 8001b34:	433a      	orrs	r2, r7
 8001b36:	d1e6      	bne.n	8001b06 <__gedf2+0x62>
 8001b38:	459a      	cmp	sl, r3
 8001b3a:	d1d7      	bne.n	8001aec <__gedf2+0x48>
 8001b3c:	42a5      	cmp	r5, r4
 8001b3e:	dcd5      	bgt.n	8001aec <__gedf2+0x48>
 8001b40:	42a5      	cmp	r5, r4
 8001b42:	db05      	blt.n	8001b50 <__gedf2+0xac>
 8001b44:	42be      	cmp	r6, r7
 8001b46:	d8d1      	bhi.n	8001aec <__gedf2+0x48>
 8001b48:	d008      	beq.n	8001b5c <__gedf2+0xb8>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	42be      	cmp	r6, r7
 8001b4e:	d2d2      	bcs.n	8001af6 <__gedf2+0x52>
 8001b50:	4650      	mov	r0, sl
 8001b52:	2301      	movs	r3, #1
 8001b54:	3801      	subs	r0, #1
 8001b56:	4398      	bics	r0, r3
 8001b58:	3001      	adds	r0, #1
 8001b5a:	e7cc      	b.n	8001af6 <__gedf2+0x52>
 8001b5c:	45c8      	cmp	r8, r9
 8001b5e:	d8c5      	bhi.n	8001aec <__gedf2+0x48>
 8001b60:	2000      	movs	r0, #0
 8001b62:	45c8      	cmp	r8, r9
 8001b64:	d3f4      	bcc.n	8001b50 <__gedf2+0xac>
 8001b66:	e7c6      	b.n	8001af6 <__gedf2+0x52>
 8001b68:	000007ff 	.word	0x000007ff

08001b6c <__ledf2>:
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	464f      	mov	r7, r9
 8001b70:	4646      	mov	r6, r8
 8001b72:	46d6      	mov	lr, sl
 8001b74:	004d      	lsls	r5, r1, #1
 8001b76:	b5c0      	push	{r6, r7, lr}
 8001b78:	030e      	lsls	r6, r1, #12
 8001b7a:	0fc9      	lsrs	r1, r1, #31
 8001b7c:	468a      	mov	sl, r1
 8001b7e:	492e      	ldr	r1, [pc, #184]	; (8001c38 <__ledf2+0xcc>)
 8001b80:	031f      	lsls	r7, r3, #12
 8001b82:	005c      	lsls	r4, r3, #1
 8001b84:	4680      	mov	r8, r0
 8001b86:	0b36      	lsrs	r6, r6, #12
 8001b88:	0d6d      	lsrs	r5, r5, #21
 8001b8a:	4691      	mov	r9, r2
 8001b8c:	0b3f      	lsrs	r7, r7, #12
 8001b8e:	0d64      	lsrs	r4, r4, #21
 8001b90:	0fdb      	lsrs	r3, r3, #31
 8001b92:	428d      	cmp	r5, r1
 8001b94:	d018      	beq.n	8001bc8 <__ledf2+0x5c>
 8001b96:	428c      	cmp	r4, r1
 8001b98:	d011      	beq.n	8001bbe <__ledf2+0x52>
 8001b9a:	2d00      	cmp	r5, #0
 8001b9c:	d118      	bne.n	8001bd0 <__ledf2+0x64>
 8001b9e:	4330      	orrs	r0, r6
 8001ba0:	4684      	mov	ip, r0
 8001ba2:	2c00      	cmp	r4, #0
 8001ba4:	d11e      	bne.n	8001be4 <__ledf2+0x78>
 8001ba6:	433a      	orrs	r2, r7
 8001ba8:	d11c      	bne.n	8001be4 <__ledf2+0x78>
 8001baa:	4663      	mov	r3, ip
 8001bac:	2000      	movs	r0, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <__ledf2+0xa8>
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	3901      	subs	r1, #1
 8001bb8:	4008      	ands	r0, r1
 8001bba:	3801      	subs	r0, #1
 8001bbc:	e02a      	b.n	8001c14 <__ledf2+0xa8>
 8001bbe:	0039      	movs	r1, r7
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	d0ea      	beq.n	8001b9a <__ledf2+0x2e>
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	e025      	b.n	8001c14 <__ledf2+0xa8>
 8001bc8:	4330      	orrs	r0, r6
 8001bca:	d1fb      	bne.n	8001bc4 <__ledf2+0x58>
 8001bcc:	42ac      	cmp	r4, r5
 8001bce:	d026      	beq.n	8001c1e <__ledf2+0xb2>
 8001bd0:	2c00      	cmp	r4, #0
 8001bd2:	d126      	bne.n	8001c22 <__ledf2+0xb6>
 8001bd4:	433a      	orrs	r2, r7
 8001bd6:	d124      	bne.n	8001c22 <__ledf2+0xb6>
 8001bd8:	4651      	mov	r1, sl
 8001bda:	2002      	movs	r0, #2
 8001bdc:	3901      	subs	r1, #1
 8001bde:	4008      	ands	r0, r1
 8001be0:	3801      	subs	r0, #1
 8001be2:	e017      	b.n	8001c14 <__ledf2+0xa8>
 8001be4:	4662      	mov	r2, ip
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d00f      	beq.n	8001c0a <__ledf2+0x9e>
 8001bea:	459a      	cmp	sl, r3
 8001bec:	d1e1      	bne.n	8001bb2 <__ledf2+0x46>
 8001bee:	42a5      	cmp	r5, r4
 8001bf0:	db05      	blt.n	8001bfe <__ledf2+0x92>
 8001bf2:	42be      	cmp	r6, r7
 8001bf4:	d8dd      	bhi.n	8001bb2 <__ledf2+0x46>
 8001bf6:	d019      	beq.n	8001c2c <__ledf2+0xc0>
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	42be      	cmp	r6, r7
 8001bfc:	d20a      	bcs.n	8001c14 <__ledf2+0xa8>
 8001bfe:	4650      	mov	r0, sl
 8001c00:	2301      	movs	r3, #1
 8001c02:	3801      	subs	r0, #1
 8001c04:	4398      	bics	r0, r3
 8001c06:	3001      	adds	r0, #1
 8001c08:	e004      	b.n	8001c14 <__ledf2+0xa8>
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	4393      	bics	r3, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	3001      	adds	r0, #1
 8001c14:	bc1c      	pop	{r2, r3, r4}
 8001c16:	4690      	mov	r8, r2
 8001c18:	4699      	mov	r9, r3
 8001c1a:	46a2      	mov	sl, r4
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	433a      	orrs	r2, r7
 8001c20:	d1d0      	bne.n	8001bc4 <__ledf2+0x58>
 8001c22:	459a      	cmp	sl, r3
 8001c24:	d1c5      	bne.n	8001bb2 <__ledf2+0x46>
 8001c26:	42a5      	cmp	r5, r4
 8001c28:	dcc3      	bgt.n	8001bb2 <__ledf2+0x46>
 8001c2a:	e7e0      	b.n	8001bee <__ledf2+0x82>
 8001c2c:	45c8      	cmp	r8, r9
 8001c2e:	d8c0      	bhi.n	8001bb2 <__ledf2+0x46>
 8001c30:	2000      	movs	r0, #0
 8001c32:	45c8      	cmp	r8, r9
 8001c34:	d3e3      	bcc.n	8001bfe <__ledf2+0x92>
 8001c36:	e7ed      	b.n	8001c14 <__ledf2+0xa8>
 8001c38:	000007ff 	.word	0x000007ff

08001c3c <__aeabi_dmul>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	4657      	mov	r7, sl
 8001c40:	46de      	mov	lr, fp
 8001c42:	464e      	mov	r6, r9
 8001c44:	4645      	mov	r5, r8
 8001c46:	b5e0      	push	{r5, r6, r7, lr}
 8001c48:	4683      	mov	fp, r0
 8001c4a:	0006      	movs	r6, r0
 8001c4c:	030f      	lsls	r7, r1, #12
 8001c4e:	0048      	lsls	r0, r1, #1
 8001c50:	b087      	sub	sp, #28
 8001c52:	4692      	mov	sl, r2
 8001c54:	001d      	movs	r5, r3
 8001c56:	0b3f      	lsrs	r7, r7, #12
 8001c58:	0d40      	lsrs	r0, r0, #21
 8001c5a:	0fcc      	lsrs	r4, r1, #31
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dmul+0x26>
 8001c60:	e06f      	b.n	8001d42 <__aeabi_dmul+0x106>
 8001c62:	4bde      	ldr	r3, [pc, #888]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001c64:	4298      	cmp	r0, r3
 8001c66:	d038      	beq.n	8001cda <__aeabi_dmul+0x9e>
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	00ff      	lsls	r7, r7, #3
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431f      	orrs	r7, r3
 8001c70:	0f73      	lsrs	r3, r6, #29
 8001c72:	433b      	orrs	r3, r7
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	4bda      	ldr	r3, [pc, #872]	; (8001fe0 <__aeabi_dmul+0x3a4>)
 8001c78:	2700      	movs	r7, #0
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	469b      	mov	fp, r3
 8001c80:	00f6      	lsls	r6, r6, #3
 8001c82:	4481      	add	r9, r0
 8001c84:	032b      	lsls	r3, r5, #12
 8001c86:	0069      	lsls	r1, r5, #1
 8001c88:	0b1b      	lsrs	r3, r3, #12
 8001c8a:	4652      	mov	r2, sl
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	0d49      	lsrs	r1, r1, #21
 8001c90:	0fed      	lsrs	r5, r5, #31
 8001c92:	2900      	cmp	r1, #0
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dmul+0x5c>
 8001c96:	e085      	b.n	8001da4 <__aeabi_dmul+0x168>
 8001c98:	4bd0      	ldr	r3, [pc, #832]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001c9a:	4299      	cmp	r1, r3
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dmul+0x64>
 8001c9e:	e073      	b.n	8001d88 <__aeabi_dmul+0x14c>
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	00da      	lsls	r2, r3, #3
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4652      	mov	r2, sl
 8001cac:	48cc      	ldr	r0, [pc, #816]	; (8001fe0 <__aeabi_dmul+0x3a4>)
 8001cae:	0f52      	lsrs	r2, r2, #29
 8001cb0:	4684      	mov	ip, r0
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	4652      	mov	r2, sl
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	4461      	add	r1, ip
 8001cba:	00d2      	lsls	r2, r2, #3
 8001cbc:	4489      	add	r9, r1
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	4069      	eors	r1, r5
 8001cc2:	9100      	str	r1, [sp, #0]
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4449      	add	r1, r9
 8001cca:	468a      	mov	sl, r1
 8001ccc:	2f0f      	cmp	r7, #15
 8001cce:	d900      	bls.n	8001cd2 <__aeabi_dmul+0x96>
 8001cd0:	e090      	b.n	8001df4 <__aeabi_dmul+0x1b8>
 8001cd2:	49c4      	ldr	r1, [pc, #784]	; (8001fe4 <__aeabi_dmul+0x3a8>)
 8001cd4:	00bf      	lsls	r7, r7, #2
 8001cd6:	59cf      	ldr	r7, [r1, r7]
 8001cd8:	46bf      	mov	pc, r7
 8001cda:	465b      	mov	r3, fp
 8001cdc:	433b      	orrs	r3, r7
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_dmul+0xa8>
 8001ce2:	e16a      	b.n	8001fba <__aeabi_dmul+0x37e>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	2708      	movs	r7, #8
 8001ce8:	2600      	movs	r6, #0
 8001cea:	4681      	mov	r9, r0
 8001cec:	469b      	mov	fp, r3
 8001cee:	e7c9      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001cf0:	0032      	movs	r2, r6
 8001cf2:	4658      	mov	r0, fp
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	4661      	mov	r1, ip
 8001cf8:	9100      	str	r1, [sp, #0]
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dmul+0xc4>
 8001cfe:	e075      	b.n	8001dec <__aeabi_dmul+0x1b0>
 8001d00:	2803      	cmp	r0, #3
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dmul+0xca>
 8001d04:	e1fe      	b.n	8002104 <__aeabi_dmul+0x4c8>
 8001d06:	2801      	cmp	r0, #1
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dmul+0xd0>
 8001d0a:	e12c      	b.n	8001f66 <__aeabi_dmul+0x32a>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2700      	movs	r7, #0
 8001d10:	2600      	movs	r6, #0
 8001d12:	2500      	movs	r5, #0
 8001d14:	033f      	lsls	r7, r7, #12
 8001d16:	0d2a      	lsrs	r2, r5, #20
 8001d18:	0b3f      	lsrs	r7, r7, #12
 8001d1a:	48b3      	ldr	r0, [pc, #716]	; (8001fe8 <__aeabi_dmul+0x3ac>)
 8001d1c:	0512      	lsls	r2, r2, #20
 8001d1e:	433a      	orrs	r2, r7
 8001d20:	4002      	ands	r2, r0
 8001d22:	051b      	lsls	r3, r3, #20
 8001d24:	4313      	orrs	r3, r2
 8001d26:	9a00      	ldr	r2, [sp, #0]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	07d1      	lsls	r1, r2, #31
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	0030      	movs	r0, r6
 8001d32:	0019      	movs	r1, r3
 8001d34:	b007      	add	sp, #28
 8001d36:	bc3c      	pop	{r2, r3, r4, r5}
 8001d38:	4690      	mov	r8, r2
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	46a2      	mov	sl, r4
 8001d3e:	46ab      	mov	fp, r5
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d42:	465b      	mov	r3, fp
 8001d44:	433b      	orrs	r3, r7
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dmul+0x110>
 8001d4a:	e12f      	b.n	8001fac <__aeabi_dmul+0x370>
 8001d4c:	2f00      	cmp	r7, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dmul+0x116>
 8001d50:	e1a5      	b.n	800209e <__aeabi_dmul+0x462>
 8001d52:	0038      	movs	r0, r7
 8001d54:	f000 fe20 	bl	8002998 <__clzsi2>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3b0b      	subs	r3, #11
 8001d5c:	2b1c      	cmp	r3, #28
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_dmul+0x126>
 8001d60:	e196      	b.n	8002090 <__aeabi_dmul+0x454>
 8001d62:	221d      	movs	r2, #29
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	465a      	mov	r2, fp
 8001d68:	0001      	movs	r1, r0
 8001d6a:	40da      	lsrs	r2, r3
 8001d6c:	465e      	mov	r6, fp
 8001d6e:	3908      	subs	r1, #8
 8001d70:	408f      	lsls	r7, r1
 8001d72:	0013      	movs	r3, r2
 8001d74:	408e      	lsls	r6, r1
 8001d76:	433b      	orrs	r3, r7
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	4b9c      	ldr	r3, [pc, #624]	; (8001fec <__aeabi_dmul+0x3b0>)
 8001d7c:	2700      	movs	r7, #0
 8001d7e:	1a1b      	subs	r3, r3, r0
 8001d80:	4699      	mov	r9, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	469b      	mov	fp, r3
 8001d86:	e77d      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001d88:	4641      	mov	r1, r8
 8001d8a:	4653      	mov	r3, sl
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	4993      	ldr	r1, [pc, #588]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001d90:	468c      	mov	ip, r1
 8001d92:	44e1      	add	r9, ip
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d000      	beq.n	8001d9a <__aeabi_dmul+0x15e>
 8001d98:	e11a      	b.n	8001fd0 <__aeabi_dmul+0x394>
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	4317      	orrs	r7, r2
 8001da0:	2200      	movs	r2, #0
 8001da2:	e78c      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001da4:	4313      	orrs	r3, r2
 8001da6:	d100      	bne.n	8001daa <__aeabi_dmul+0x16e>
 8001da8:	e10d      	b.n	8001fc6 <__aeabi_dmul+0x38a>
 8001daa:	4643      	mov	r3, r8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dmul+0x176>
 8001db0:	e181      	b.n	80020b6 <__aeabi_dmul+0x47a>
 8001db2:	4640      	mov	r0, r8
 8001db4:	f000 fdf0 	bl	8002998 <__clzsi2>
 8001db8:	0002      	movs	r2, r0
 8001dba:	3a0b      	subs	r2, #11
 8001dbc:	2a1c      	cmp	r2, #28
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dmul+0x186>
 8001dc0:	e172      	b.n	80020a8 <__aeabi_dmul+0x46c>
 8001dc2:	0001      	movs	r1, r0
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	3908      	subs	r1, #8
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	4698      	mov	r8, r3
 8001dcc:	231d      	movs	r3, #29
 8001dce:	1a9a      	subs	r2, r3, r2
 8001dd0:	4653      	mov	r3, sl
 8001dd2:	40d3      	lsrs	r3, r2
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	4643      	mov	r3, r8
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	4652      	mov	r2, sl
 8001ddc:	408a      	lsls	r2, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	1a08      	subs	r0, r1, r0
 8001de2:	4982      	ldr	r1, [pc, #520]	; (8001fec <__aeabi_dmul+0x3b0>)
 8001de4:	4689      	mov	r9, r1
 8001de6:	4481      	add	r9, r0
 8001de8:	2000      	movs	r0, #0
 8001dea:	e768      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001dee:	2700      	movs	r7, #0
 8001df0:	2600      	movs	r6, #0
 8001df2:	e78e      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8001df4:	0c14      	lsrs	r4, r2, #16
 8001df6:	0412      	lsls	r2, r2, #16
 8001df8:	0c12      	lsrs	r2, r2, #16
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0c37      	lsrs	r7, r6, #16
 8001dfe:	0436      	lsls	r6, r6, #16
 8001e00:	0c35      	lsrs	r5, r6, #16
 8001e02:	4379      	muls	r1, r7
 8001e04:	0028      	movs	r0, r5
 8001e06:	468c      	mov	ip, r1
 8001e08:	002e      	movs	r6, r5
 8001e0a:	4360      	muls	r0, r4
 8001e0c:	4460      	add	r0, ip
 8001e0e:	4683      	mov	fp, r0
 8001e10:	4356      	muls	r6, r2
 8001e12:	0021      	movs	r1, r4
 8001e14:	0c30      	lsrs	r0, r6, #16
 8001e16:	4680      	mov	r8, r0
 8001e18:	4658      	mov	r0, fp
 8001e1a:	4379      	muls	r1, r7
 8001e1c:	4440      	add	r0, r8
 8001e1e:	9102      	str	r1, [sp, #8]
 8001e20:	4584      	cmp	ip, r0
 8001e22:	d906      	bls.n	8001e32 <__aeabi_dmul+0x1f6>
 8001e24:	4688      	mov	r8, r1
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0249      	lsls	r1, r1, #9
 8001e2a:	468c      	mov	ip, r1
 8001e2c:	44e0      	add	r8, ip
 8001e2e:	4641      	mov	r1, r8
 8001e30:	9102      	str	r1, [sp, #8]
 8001e32:	0436      	lsls	r6, r6, #16
 8001e34:	0c01      	lsrs	r1, r0, #16
 8001e36:	0c36      	lsrs	r6, r6, #16
 8001e38:	0400      	lsls	r0, r0, #16
 8001e3a:	468b      	mov	fp, r1
 8001e3c:	1981      	adds	r1, r0, r6
 8001e3e:	0c1e      	lsrs	r6, r3, #16
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	9103      	str	r1, [sp, #12]
 8001e46:	0019      	movs	r1, r3
 8001e48:	4379      	muls	r1, r7
 8001e4a:	468c      	mov	ip, r1
 8001e4c:	0028      	movs	r0, r5
 8001e4e:	4375      	muls	r5, r6
 8001e50:	4465      	add	r5, ip
 8001e52:	46a8      	mov	r8, r5
 8001e54:	4358      	muls	r0, r3
 8001e56:	0c05      	lsrs	r5, r0, #16
 8001e58:	4445      	add	r5, r8
 8001e5a:	4377      	muls	r7, r6
 8001e5c:	42a9      	cmp	r1, r5
 8001e5e:	d903      	bls.n	8001e68 <__aeabi_dmul+0x22c>
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0249      	lsls	r1, r1, #9
 8001e64:	468c      	mov	ip, r1
 8001e66:	4467      	add	r7, ip
 8001e68:	0c29      	lsrs	r1, r5, #16
 8001e6a:	468c      	mov	ip, r1
 8001e6c:	0039      	movs	r1, r7
 8001e6e:	0400      	lsls	r0, r0, #16
 8001e70:	0c00      	lsrs	r0, r0, #16
 8001e72:	042d      	lsls	r5, r5, #16
 8001e74:	182d      	adds	r5, r5, r0
 8001e76:	4461      	add	r1, ip
 8001e78:	44ab      	add	fp, r5
 8001e7a:	9105      	str	r1, [sp, #20]
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	9104      	str	r1, [sp, #16]
 8001e80:	9901      	ldr	r1, [sp, #4]
 8001e82:	040f      	lsls	r7, r1, #16
 8001e84:	0c3f      	lsrs	r7, r7, #16
 8001e86:	0c08      	lsrs	r0, r1, #16
 8001e88:	0039      	movs	r1, r7
 8001e8a:	4351      	muls	r1, r2
 8001e8c:	4342      	muls	r2, r0
 8001e8e:	4690      	mov	r8, r2
 8001e90:	0002      	movs	r2, r0
 8001e92:	468c      	mov	ip, r1
 8001e94:	0c09      	lsrs	r1, r1, #16
 8001e96:	468b      	mov	fp, r1
 8001e98:	4362      	muls	r2, r4
 8001e9a:	437c      	muls	r4, r7
 8001e9c:	4444      	add	r4, r8
 8001e9e:	445c      	add	r4, fp
 8001ea0:	45a0      	cmp	r8, r4
 8001ea2:	d903      	bls.n	8001eac <__aeabi_dmul+0x270>
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0249      	lsls	r1, r1, #9
 8001ea8:	4688      	mov	r8, r1
 8001eaa:	4442      	add	r2, r8
 8001eac:	0c21      	lsrs	r1, r4, #16
 8001eae:	4688      	mov	r8, r1
 8001eb0:	4661      	mov	r1, ip
 8001eb2:	0409      	lsls	r1, r1, #16
 8001eb4:	0c09      	lsrs	r1, r1, #16
 8001eb6:	468c      	mov	ip, r1
 8001eb8:	0039      	movs	r1, r7
 8001eba:	4359      	muls	r1, r3
 8001ebc:	4343      	muls	r3, r0
 8001ebe:	4370      	muls	r0, r6
 8001ec0:	437e      	muls	r6, r7
 8001ec2:	0c0f      	lsrs	r7, r1, #16
 8001ec4:	18f6      	adds	r6, r6, r3
 8001ec6:	0424      	lsls	r4, r4, #16
 8001ec8:	19be      	adds	r6, r7, r6
 8001eca:	4464      	add	r4, ip
 8001ecc:	4442      	add	r2, r8
 8001ece:	468c      	mov	ip, r1
 8001ed0:	42b3      	cmp	r3, r6
 8001ed2:	d903      	bls.n	8001edc <__aeabi_dmul+0x2a0>
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	4698      	mov	r8, r3
 8001eda:	4440      	add	r0, r8
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	4661      	mov	r1, ip
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	9b04      	ldr	r3, [sp, #16]
 8001ee4:	0437      	lsls	r7, r6, #16
 8001ee6:	4443      	add	r3, r8
 8001ee8:	469b      	mov	fp, r3
 8001eea:	45ab      	cmp	fp, r5
 8001eec:	41ad      	sbcs	r5, r5
 8001eee:	426b      	negs	r3, r5
 8001ef0:	040d      	lsls	r5, r1, #16
 8001ef2:	9905      	ldr	r1, [sp, #20]
 8001ef4:	0c2d      	lsrs	r5, r5, #16
 8001ef6:	468c      	mov	ip, r1
 8001ef8:	197f      	adds	r7, r7, r5
 8001efa:	4467      	add	r7, ip
 8001efc:	18fd      	adds	r5, r7, r3
 8001efe:	46a8      	mov	r8, r5
 8001f00:	465d      	mov	r5, fp
 8001f02:	192d      	adds	r5, r5, r4
 8001f04:	42a5      	cmp	r5, r4
 8001f06:	41a4      	sbcs	r4, r4
 8001f08:	4693      	mov	fp, r2
 8001f0a:	4264      	negs	r4, r4
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	44c3      	add	fp, r8
 8001f10:	44dc      	add	ip, fp
 8001f12:	428f      	cmp	r7, r1
 8001f14:	41bf      	sbcs	r7, r7
 8001f16:	4598      	cmp	r8, r3
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	4593      	cmp	fp, r2
 8001f1c:	4192      	sbcs	r2, r2
 8001f1e:	45a4      	cmp	ip, r4
 8001f20:	41a4      	sbcs	r4, r4
 8001f22:	425b      	negs	r3, r3
 8001f24:	427f      	negs	r7, r7
 8001f26:	431f      	orrs	r7, r3
 8001f28:	0c36      	lsrs	r6, r6, #16
 8001f2a:	4252      	negs	r2, r2
 8001f2c:	4264      	negs	r4, r4
 8001f2e:	19bf      	adds	r7, r7, r6
 8001f30:	4322      	orrs	r2, r4
 8001f32:	18bf      	adds	r7, r7, r2
 8001f34:	4662      	mov	r2, ip
 8001f36:	1838      	adds	r0, r7, r0
 8001f38:	0243      	lsls	r3, r0, #9
 8001f3a:	0dd2      	lsrs	r2, r2, #23
 8001f3c:	9903      	ldr	r1, [sp, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	026a      	lsls	r2, r5, #9
 8001f42:	430a      	orrs	r2, r1
 8001f44:	1e50      	subs	r0, r2, #1
 8001f46:	4182      	sbcs	r2, r0
 8001f48:	4661      	mov	r1, ip
 8001f4a:	0ded      	lsrs	r5, r5, #23
 8001f4c:	432a      	orrs	r2, r5
 8001f4e:	024e      	lsls	r6, r1, #9
 8001f50:	4332      	orrs	r2, r6
 8001f52:	01d9      	lsls	r1, r3, #7
 8001f54:	d400      	bmi.n	8001f58 <__aeabi_dmul+0x31c>
 8001f56:	e0b3      	b.n	80020c0 <__aeabi_dmul+0x484>
 8001f58:	2601      	movs	r6, #1
 8001f5a:	0850      	lsrs	r0, r2, #1
 8001f5c:	4032      	ands	r2, r6
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	07de      	lsls	r6, r3, #31
 8001f62:	4332      	orrs	r2, r6
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	4c22      	ldr	r4, [pc, #136]	; (8001ff0 <__aeabi_dmul+0x3b4>)
 8001f68:	4454      	add	r4, sl
 8001f6a:	2c00      	cmp	r4, #0
 8001f6c:	dd62      	ble.n	8002034 <__aeabi_dmul+0x3f8>
 8001f6e:	0751      	lsls	r1, r2, #29
 8001f70:	d009      	beq.n	8001f86 <__aeabi_dmul+0x34a>
 8001f72:	200f      	movs	r0, #15
 8001f74:	4010      	ands	r0, r2
 8001f76:	2804      	cmp	r0, #4
 8001f78:	d005      	beq.n	8001f86 <__aeabi_dmul+0x34a>
 8001f7a:	1d10      	adds	r0, r2, #4
 8001f7c:	4290      	cmp	r0, r2
 8001f7e:	4192      	sbcs	r2, r2
 8001f80:	4252      	negs	r2, r2
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	0002      	movs	r2, r0
 8001f86:	01d9      	lsls	r1, r3, #7
 8001f88:	d504      	bpl.n	8001f94 <__aeabi_dmul+0x358>
 8001f8a:	2480      	movs	r4, #128	; 0x80
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <__aeabi_dmul+0x3b8>)
 8001f8e:	00e4      	lsls	r4, r4, #3
 8001f90:	4003      	ands	r3, r0
 8001f92:	4454      	add	r4, sl
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <__aeabi_dmul+0x3bc>)
 8001f96:	4284      	cmp	r4, r0
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dmul+0x360>
 8001f9a:	e727      	b.n	8001dec <__aeabi_dmul+0x1b0>
 8001f9c:	075e      	lsls	r6, r3, #29
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	08d2      	lsrs	r2, r2, #3
 8001fa2:	0b1f      	lsrs	r7, r3, #12
 8001fa4:	0563      	lsls	r3, r4, #21
 8001fa6:	4316      	orrs	r6, r2
 8001fa8:	0d5b      	lsrs	r3, r3, #21
 8001faa:	e6b2      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8001fac:	2300      	movs	r3, #0
 8001fae:	4699      	mov	r9, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	2704      	movs	r7, #4
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	469b      	mov	fp, r3
 8001fb8:	e664      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001fba:	2303      	movs	r3, #3
 8001fbc:	9701      	str	r7, [sp, #4]
 8001fbe:	4681      	mov	r9, r0
 8001fc0:	270c      	movs	r7, #12
 8001fc2:	469b      	mov	fp, r3
 8001fc4:	e65e      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4317      	orrs	r7, r2
 8001fcc:	2200      	movs	r2, #0
 8001fce:	e676      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	431f      	orrs	r7, r3
 8001fd6:	4643      	mov	r3, r8
 8001fd8:	e671      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff
 8001fe0:	fffffc01 	.word	0xfffffc01
 8001fe4:	080281b8 	.word	0x080281b8
 8001fe8:	800fffff 	.word	0x800fffff
 8001fec:	fffffc0d 	.word	0xfffffc0d
 8001ff0:	000003ff 	.word	0x000003ff
 8001ff4:	feffffff 	.word	0xfeffffff
 8001ff8:	000007fe 	.word	0x000007fe
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2780      	movs	r7, #128	; 0x80
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	033f      	lsls	r7, r7, #12
 8002004:	2600      	movs	r6, #0
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <__aeabi_dmul+0x4d8>)
 8002008:	e683      	b.n	8001d12 <__aeabi_dmul+0xd6>
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	0032      	movs	r2, r6
 800200e:	46a4      	mov	ip, r4
 8002010:	4658      	mov	r0, fp
 8002012:	e670      	b.n	8001cf6 <__aeabi_dmul+0xba>
 8002014:	46ac      	mov	ip, r5
 8002016:	e66e      	b.n	8001cf6 <__aeabi_dmul+0xba>
 8002018:	2780      	movs	r7, #128	; 0x80
 800201a:	9901      	ldr	r1, [sp, #4]
 800201c:	033f      	lsls	r7, r7, #12
 800201e:	4239      	tst	r1, r7
 8002020:	d02d      	beq.n	800207e <__aeabi_dmul+0x442>
 8002022:	423b      	tst	r3, r7
 8002024:	d12b      	bne.n	800207e <__aeabi_dmul+0x442>
 8002026:	431f      	orrs	r7, r3
 8002028:	033f      	lsls	r7, r7, #12
 800202a:	0b3f      	lsrs	r7, r7, #12
 800202c:	9500      	str	r5, [sp, #0]
 800202e:	0016      	movs	r6, r2
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <__aeabi_dmul+0x4d8>)
 8002032:	e66e      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002034:	2501      	movs	r5, #1
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	2d38      	cmp	r5, #56	; 0x38
 800203a:	dd00      	ble.n	800203e <__aeabi_dmul+0x402>
 800203c:	e666      	b.n	8001d0c <__aeabi_dmul+0xd0>
 800203e:	2d1f      	cmp	r5, #31
 8002040:	dc40      	bgt.n	80020c4 <__aeabi_dmul+0x488>
 8002042:	4835      	ldr	r0, [pc, #212]	; (8002118 <__aeabi_dmul+0x4dc>)
 8002044:	001c      	movs	r4, r3
 8002046:	4450      	add	r0, sl
 8002048:	0016      	movs	r6, r2
 800204a:	4082      	lsls	r2, r0
 800204c:	4084      	lsls	r4, r0
 800204e:	40ee      	lsrs	r6, r5
 8002050:	1e50      	subs	r0, r2, #1
 8002052:	4182      	sbcs	r2, r0
 8002054:	4334      	orrs	r4, r6
 8002056:	4314      	orrs	r4, r2
 8002058:	40eb      	lsrs	r3, r5
 800205a:	0762      	lsls	r2, r4, #29
 800205c:	d009      	beq.n	8002072 <__aeabi_dmul+0x436>
 800205e:	220f      	movs	r2, #15
 8002060:	4022      	ands	r2, r4
 8002062:	2a04      	cmp	r2, #4
 8002064:	d005      	beq.n	8002072 <__aeabi_dmul+0x436>
 8002066:	0022      	movs	r2, r4
 8002068:	1d14      	adds	r4, r2, #4
 800206a:	4294      	cmp	r4, r2
 800206c:	4180      	sbcs	r0, r0
 800206e:	4240      	negs	r0, r0
 8002070:	181b      	adds	r3, r3, r0
 8002072:	021a      	lsls	r2, r3, #8
 8002074:	d53e      	bpl.n	80020f4 <__aeabi_dmul+0x4b8>
 8002076:	2301      	movs	r3, #1
 8002078:	2700      	movs	r7, #0
 800207a:	2600      	movs	r6, #0
 800207c:	e649      	b.n	8001d12 <__aeabi_dmul+0xd6>
 800207e:	2780      	movs	r7, #128	; 0x80
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	033f      	lsls	r7, r7, #12
 8002084:	431f      	orrs	r7, r3
 8002086:	033f      	lsls	r7, r7, #12
 8002088:	0b3f      	lsrs	r7, r7, #12
 800208a:	9400      	str	r4, [sp, #0]
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <__aeabi_dmul+0x4d8>)
 800208e:	e640      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002090:	0003      	movs	r3, r0
 8002092:	465a      	mov	r2, fp
 8002094:	3b28      	subs	r3, #40	; 0x28
 8002096:	409a      	lsls	r2, r3
 8002098:	2600      	movs	r6, #0
 800209a:	9201      	str	r2, [sp, #4]
 800209c:	e66d      	b.n	8001d7a <__aeabi_dmul+0x13e>
 800209e:	4658      	mov	r0, fp
 80020a0:	f000 fc7a 	bl	8002998 <__clzsi2>
 80020a4:	3020      	adds	r0, #32
 80020a6:	e657      	b.n	8001d58 <__aeabi_dmul+0x11c>
 80020a8:	0003      	movs	r3, r0
 80020aa:	4652      	mov	r2, sl
 80020ac:	3b28      	subs	r3, #40	; 0x28
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	2200      	movs	r2, #0
 80020b4:	e693      	b.n	8001dde <__aeabi_dmul+0x1a2>
 80020b6:	4650      	mov	r0, sl
 80020b8:	f000 fc6e 	bl	8002998 <__clzsi2>
 80020bc:	3020      	adds	r0, #32
 80020be:	e67b      	b.n	8001db8 <__aeabi_dmul+0x17c>
 80020c0:	46ca      	mov	sl, r9
 80020c2:	e750      	b.n	8001f66 <__aeabi_dmul+0x32a>
 80020c4:	201f      	movs	r0, #31
 80020c6:	001e      	movs	r6, r3
 80020c8:	4240      	negs	r0, r0
 80020ca:	1b04      	subs	r4, r0, r4
 80020cc:	40e6      	lsrs	r6, r4
 80020ce:	2d20      	cmp	r5, #32
 80020d0:	d003      	beq.n	80020da <__aeabi_dmul+0x49e>
 80020d2:	4c12      	ldr	r4, [pc, #72]	; (800211c <__aeabi_dmul+0x4e0>)
 80020d4:	4454      	add	r4, sl
 80020d6:	40a3      	lsls	r3, r4
 80020d8:	431a      	orrs	r2, r3
 80020da:	1e50      	subs	r0, r2, #1
 80020dc:	4182      	sbcs	r2, r0
 80020de:	4332      	orrs	r2, r6
 80020e0:	2607      	movs	r6, #7
 80020e2:	2700      	movs	r7, #0
 80020e4:	4016      	ands	r6, r2
 80020e6:	d009      	beq.n	80020fc <__aeabi_dmul+0x4c0>
 80020e8:	200f      	movs	r0, #15
 80020ea:	2300      	movs	r3, #0
 80020ec:	4010      	ands	r0, r2
 80020ee:	0014      	movs	r4, r2
 80020f0:	2804      	cmp	r0, #4
 80020f2:	d1b9      	bne.n	8002068 <__aeabi_dmul+0x42c>
 80020f4:	0022      	movs	r2, r4
 80020f6:	075e      	lsls	r6, r3, #29
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	0b1f      	lsrs	r7, r3, #12
 80020fc:	08d2      	lsrs	r2, r2, #3
 80020fe:	4316      	orrs	r6, r2
 8002100:	2300      	movs	r3, #0
 8002102:	e606      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002104:	2780      	movs	r7, #128	; 0x80
 8002106:	033f      	lsls	r7, r7, #12
 8002108:	431f      	orrs	r7, r3
 800210a:	033f      	lsls	r7, r7, #12
 800210c:	0b3f      	lsrs	r7, r7, #12
 800210e:	0016      	movs	r6, r2
 8002110:	4b00      	ldr	r3, [pc, #0]	; (8002114 <__aeabi_dmul+0x4d8>)
 8002112:	e5fe      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002114:	000007ff 	.word	0x000007ff
 8002118:	0000041e 	.word	0x0000041e
 800211c:	0000043e 	.word	0x0000043e

08002120 <__aeabi_dsub>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	4657      	mov	r7, sl
 8002124:	464e      	mov	r6, r9
 8002126:	4645      	mov	r5, r8
 8002128:	46de      	mov	lr, fp
 800212a:	000c      	movs	r4, r1
 800212c:	0309      	lsls	r1, r1, #12
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	0a49      	lsrs	r1, r1, #9
 8002132:	0f46      	lsrs	r6, r0, #29
 8002134:	005f      	lsls	r7, r3, #1
 8002136:	4331      	orrs	r1, r6
 8002138:	031e      	lsls	r6, r3, #12
 800213a:	0fdb      	lsrs	r3, r3, #31
 800213c:	0a76      	lsrs	r6, r6, #9
 800213e:	469b      	mov	fp, r3
 8002140:	0f53      	lsrs	r3, r2, #29
 8002142:	4333      	orrs	r3, r6
 8002144:	4ec8      	ldr	r6, [pc, #800]	; (8002468 <__aeabi_dsub+0x348>)
 8002146:	0065      	lsls	r5, r4, #1
 8002148:	00c0      	lsls	r0, r0, #3
 800214a:	0fe4      	lsrs	r4, r4, #31
 800214c:	00d2      	lsls	r2, r2, #3
 800214e:	0d6d      	lsrs	r5, r5, #21
 8002150:	46a2      	mov	sl, r4
 8002152:	4681      	mov	r9, r0
 8002154:	0d7f      	lsrs	r7, r7, #21
 8002156:	469c      	mov	ip, r3
 8002158:	4690      	mov	r8, r2
 800215a:	42b7      	cmp	r7, r6
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x40>
 800215e:	e0b9      	b.n	80022d4 <__aeabi_dsub+0x1b4>
 8002160:	465b      	mov	r3, fp
 8002162:	2601      	movs	r6, #1
 8002164:	4073      	eors	r3, r6
 8002166:	469b      	mov	fp, r3
 8002168:	1bee      	subs	r6, r5, r7
 800216a:	45a3      	cmp	fp, r4
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x50>
 800216e:	e083      	b.n	8002278 <__aeabi_dsub+0x158>
 8002170:	2e00      	cmp	r6, #0
 8002172:	dd63      	ble.n	800223c <__aeabi_dsub+0x11c>
 8002174:	2f00      	cmp	r7, #0
 8002176:	d000      	beq.n	800217a <__aeabi_dsub+0x5a>
 8002178:	e0b1      	b.n	80022de <__aeabi_dsub+0x1be>
 800217a:	4663      	mov	r3, ip
 800217c:	4313      	orrs	r3, r2
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x62>
 8002180:	e123      	b.n	80023ca <__aeabi_dsub+0x2aa>
 8002182:	1e73      	subs	r3, r6, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d000      	beq.n	800218a <__aeabi_dsub+0x6a>
 8002188:	e1ba      	b.n	8002500 <__aeabi_dsub+0x3e0>
 800218a:	1a86      	subs	r6, r0, r2
 800218c:	4663      	mov	r3, ip
 800218e:	42b0      	cmp	r0, r6
 8002190:	4180      	sbcs	r0, r0
 8002192:	2501      	movs	r5, #1
 8002194:	1ac9      	subs	r1, r1, r3
 8002196:	4240      	negs	r0, r0
 8002198:	1a09      	subs	r1, r1, r0
 800219a:	020b      	lsls	r3, r1, #8
 800219c:	d400      	bmi.n	80021a0 <__aeabi_dsub+0x80>
 800219e:	e147      	b.n	8002430 <__aeabi_dsub+0x310>
 80021a0:	0249      	lsls	r1, r1, #9
 80021a2:	0a4b      	lsrs	r3, r1, #9
 80021a4:	4698      	mov	r8, r3
 80021a6:	4643      	mov	r3, r8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x8e>
 80021ac:	e189      	b.n	80024c2 <__aeabi_dsub+0x3a2>
 80021ae:	4640      	mov	r0, r8
 80021b0:	f000 fbf2 	bl	8002998 <__clzsi2>
 80021b4:	0003      	movs	r3, r0
 80021b6:	3b08      	subs	r3, #8
 80021b8:	2b1f      	cmp	r3, #31
 80021ba:	dd00      	ble.n	80021be <__aeabi_dsub+0x9e>
 80021bc:	e17c      	b.n	80024b8 <__aeabi_dsub+0x398>
 80021be:	2220      	movs	r2, #32
 80021c0:	0030      	movs	r0, r6
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	4641      	mov	r1, r8
 80021c6:	40d0      	lsrs	r0, r2
 80021c8:	4099      	lsls	r1, r3
 80021ca:	0002      	movs	r2, r0
 80021cc:	409e      	lsls	r6, r3
 80021ce:	430a      	orrs	r2, r1
 80021d0:	429d      	cmp	r5, r3
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dsub+0xb6>
 80021d4:	e16a      	b.n	80024ac <__aeabi_dsub+0x38c>
 80021d6:	1b5d      	subs	r5, r3, r5
 80021d8:	1c6b      	adds	r3, r5, #1
 80021da:	2b1f      	cmp	r3, #31
 80021dc:	dd00      	ble.n	80021e0 <__aeabi_dsub+0xc0>
 80021de:	e194      	b.n	800250a <__aeabi_dsub+0x3ea>
 80021e0:	2120      	movs	r1, #32
 80021e2:	0010      	movs	r0, r2
 80021e4:	0035      	movs	r5, r6
 80021e6:	1ac9      	subs	r1, r1, r3
 80021e8:	408e      	lsls	r6, r1
 80021ea:	40da      	lsrs	r2, r3
 80021ec:	4088      	lsls	r0, r1
 80021ee:	40dd      	lsrs	r5, r3
 80021f0:	1e71      	subs	r1, r6, #1
 80021f2:	418e      	sbcs	r6, r1
 80021f4:	0011      	movs	r1, r2
 80021f6:	2207      	movs	r2, #7
 80021f8:	4328      	orrs	r0, r5
 80021fa:	2500      	movs	r5, #0
 80021fc:	4306      	orrs	r6, r0
 80021fe:	4032      	ands	r2, r6
 8002200:	2a00      	cmp	r2, #0
 8002202:	d009      	beq.n	8002218 <__aeabi_dsub+0xf8>
 8002204:	230f      	movs	r3, #15
 8002206:	4033      	ands	r3, r6
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <__aeabi_dsub+0xf8>
 800220c:	1d33      	adds	r3, r6, #4
 800220e:	42b3      	cmp	r3, r6
 8002210:	41b6      	sbcs	r6, r6
 8002212:	4276      	negs	r6, r6
 8002214:	1989      	adds	r1, r1, r6
 8002216:	001e      	movs	r6, r3
 8002218:	020b      	lsls	r3, r1, #8
 800221a:	d400      	bmi.n	800221e <__aeabi_dsub+0xfe>
 800221c:	e23d      	b.n	800269a <__aeabi_dsub+0x57a>
 800221e:	1c6a      	adds	r2, r5, #1
 8002220:	4b91      	ldr	r3, [pc, #580]	; (8002468 <__aeabi_dsub+0x348>)
 8002222:	0555      	lsls	r5, r2, #21
 8002224:	0d6d      	lsrs	r5, r5, #21
 8002226:	429a      	cmp	r2, r3
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x10c>
 800222a:	e119      	b.n	8002460 <__aeabi_dsub+0x340>
 800222c:	4a8f      	ldr	r2, [pc, #572]	; (800246c <__aeabi_dsub+0x34c>)
 800222e:	08f6      	lsrs	r6, r6, #3
 8002230:	400a      	ands	r2, r1
 8002232:	0757      	lsls	r7, r2, #29
 8002234:	0252      	lsls	r2, r2, #9
 8002236:	4337      	orrs	r7, r6
 8002238:	0b12      	lsrs	r2, r2, #12
 800223a:	e09b      	b.n	8002374 <__aeabi_dsub+0x254>
 800223c:	2e00      	cmp	r6, #0
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x122>
 8002240:	e0c5      	b.n	80023ce <__aeabi_dsub+0x2ae>
 8002242:	1c6e      	adds	r6, r5, #1
 8002244:	0576      	lsls	r6, r6, #21
 8002246:	0d76      	lsrs	r6, r6, #21
 8002248:	2e01      	cmp	r6, #1
 800224a:	dc00      	bgt.n	800224e <__aeabi_dsub+0x12e>
 800224c:	e148      	b.n	80024e0 <__aeabi_dsub+0x3c0>
 800224e:	4667      	mov	r7, ip
 8002250:	1a86      	subs	r6, r0, r2
 8002252:	1bcb      	subs	r3, r1, r7
 8002254:	42b0      	cmp	r0, r6
 8002256:	41bf      	sbcs	r7, r7
 8002258:	427f      	negs	r7, r7
 800225a:	46b8      	mov	r8, r7
 800225c:	001f      	movs	r7, r3
 800225e:	4643      	mov	r3, r8
 8002260:	1aff      	subs	r7, r7, r3
 8002262:	003b      	movs	r3, r7
 8002264:	46b8      	mov	r8, r7
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	d500      	bpl.n	800226c <__aeabi_dsub+0x14c>
 800226a:	e15f      	b.n	800252c <__aeabi_dsub+0x40c>
 800226c:	4337      	orrs	r7, r6
 800226e:	d19a      	bne.n	80021a6 <__aeabi_dsub+0x86>
 8002270:	2200      	movs	r2, #0
 8002272:	2400      	movs	r4, #0
 8002274:	2500      	movs	r5, #0
 8002276:	e079      	b.n	800236c <__aeabi_dsub+0x24c>
 8002278:	2e00      	cmp	r6, #0
 800227a:	dc00      	bgt.n	800227e <__aeabi_dsub+0x15e>
 800227c:	e0fa      	b.n	8002474 <__aeabi_dsub+0x354>
 800227e:	2f00      	cmp	r7, #0
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x164>
 8002282:	e08d      	b.n	80023a0 <__aeabi_dsub+0x280>
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <__aeabi_dsub+0x348>)
 8002286:	429d      	cmp	r5, r3
 8002288:	d067      	beq.n	800235a <__aeabi_dsub+0x23a>
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	4667      	mov	r7, ip
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	431f      	orrs	r7, r3
 8002292:	46bc      	mov	ip, r7
 8002294:	2e38      	cmp	r6, #56	; 0x38
 8002296:	dc00      	bgt.n	800229a <__aeabi_dsub+0x17a>
 8002298:	e152      	b.n	8002540 <__aeabi_dsub+0x420>
 800229a:	4663      	mov	r3, ip
 800229c:	4313      	orrs	r3, r2
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	4193      	sbcs	r3, r2
 80022a2:	181e      	adds	r6, r3, r0
 80022a4:	4286      	cmp	r6, r0
 80022a6:	4180      	sbcs	r0, r0
 80022a8:	4240      	negs	r0, r0
 80022aa:	1809      	adds	r1, r1, r0
 80022ac:	020b      	lsls	r3, r1, #8
 80022ae:	d400      	bmi.n	80022b2 <__aeabi_dsub+0x192>
 80022b0:	e0be      	b.n	8002430 <__aeabi_dsub+0x310>
 80022b2:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <__aeabi_dsub+0x348>)
 80022b4:	3501      	adds	r5, #1
 80022b6:	429d      	cmp	r5, r3
 80022b8:	d100      	bne.n	80022bc <__aeabi_dsub+0x19c>
 80022ba:	e0d2      	b.n	8002462 <__aeabi_dsub+0x342>
 80022bc:	4a6b      	ldr	r2, [pc, #428]	; (800246c <__aeabi_dsub+0x34c>)
 80022be:	0873      	lsrs	r3, r6, #1
 80022c0:	400a      	ands	r2, r1
 80022c2:	2101      	movs	r1, #1
 80022c4:	400e      	ands	r6, r1
 80022c6:	431e      	orrs	r6, r3
 80022c8:	0851      	lsrs	r1, r2, #1
 80022ca:	07d3      	lsls	r3, r2, #31
 80022cc:	2207      	movs	r2, #7
 80022ce:	431e      	orrs	r6, r3
 80022d0:	4032      	ands	r2, r6
 80022d2:	e795      	b.n	8002200 <__aeabi_dsub+0xe0>
 80022d4:	001e      	movs	r6, r3
 80022d6:	4316      	orrs	r6, r2
 80022d8:	d000      	beq.n	80022dc <__aeabi_dsub+0x1bc>
 80022da:	e745      	b.n	8002168 <__aeabi_dsub+0x48>
 80022dc:	e740      	b.n	8002160 <__aeabi_dsub+0x40>
 80022de:	4b62      	ldr	r3, [pc, #392]	; (8002468 <__aeabi_dsub+0x348>)
 80022e0:	429d      	cmp	r5, r3
 80022e2:	d03a      	beq.n	800235a <__aeabi_dsub+0x23a>
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	4667      	mov	r7, ip
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431f      	orrs	r7, r3
 80022ec:	46bc      	mov	ip, r7
 80022ee:	2e38      	cmp	r6, #56	; 0x38
 80022f0:	dd00      	ble.n	80022f4 <__aeabi_dsub+0x1d4>
 80022f2:	e0eb      	b.n	80024cc <__aeabi_dsub+0x3ac>
 80022f4:	2e1f      	cmp	r6, #31
 80022f6:	dc00      	bgt.n	80022fa <__aeabi_dsub+0x1da>
 80022f8:	e13a      	b.n	8002570 <__aeabi_dsub+0x450>
 80022fa:	0033      	movs	r3, r6
 80022fc:	4667      	mov	r7, ip
 80022fe:	3b20      	subs	r3, #32
 8002300:	40df      	lsrs	r7, r3
 8002302:	003b      	movs	r3, r7
 8002304:	2e20      	cmp	r6, #32
 8002306:	d005      	beq.n	8002314 <__aeabi_dsub+0x1f4>
 8002308:	2740      	movs	r7, #64	; 0x40
 800230a:	1bbf      	subs	r7, r7, r6
 800230c:	4666      	mov	r6, ip
 800230e:	40be      	lsls	r6, r7
 8002310:	4332      	orrs	r2, r6
 8002312:	4690      	mov	r8, r2
 8002314:	4646      	mov	r6, r8
 8002316:	1e72      	subs	r2, r6, #1
 8002318:	4196      	sbcs	r6, r2
 800231a:	4333      	orrs	r3, r6
 800231c:	e0da      	b.n	80024d4 <__aeabi_dsub+0x3b4>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x204>
 8002322:	e214      	b.n	800274e <__aeabi_dsub+0x62e>
 8002324:	4663      	mov	r3, ip
 8002326:	4313      	orrs	r3, r2
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x20c>
 800232a:	e168      	b.n	80025fe <__aeabi_dsub+0x4de>
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	074e      	lsls	r6, r1, #29
 8002330:	08c0      	lsrs	r0, r0, #3
 8002332:	08c9      	lsrs	r1, r1, #3
 8002334:	031b      	lsls	r3, r3, #12
 8002336:	4306      	orrs	r6, r0
 8002338:	4219      	tst	r1, r3
 800233a:	d008      	beq.n	800234e <__aeabi_dsub+0x22e>
 800233c:	4660      	mov	r0, ip
 800233e:	08c0      	lsrs	r0, r0, #3
 8002340:	4218      	tst	r0, r3
 8002342:	d104      	bne.n	800234e <__aeabi_dsub+0x22e>
 8002344:	4663      	mov	r3, ip
 8002346:	0001      	movs	r1, r0
 8002348:	08d2      	lsrs	r2, r2, #3
 800234a:	075e      	lsls	r6, r3, #29
 800234c:	4316      	orrs	r6, r2
 800234e:	00f3      	lsls	r3, r6, #3
 8002350:	4699      	mov	r9, r3
 8002352:	00c9      	lsls	r1, r1, #3
 8002354:	0f72      	lsrs	r2, r6, #29
 8002356:	4d44      	ldr	r5, [pc, #272]	; (8002468 <__aeabi_dsub+0x348>)
 8002358:	4311      	orrs	r1, r2
 800235a:	464b      	mov	r3, r9
 800235c:	08de      	lsrs	r6, r3, #3
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <__aeabi_dsub+0x348>)
 8002360:	074f      	lsls	r7, r1, #29
 8002362:	4337      	orrs	r7, r6
 8002364:	08ca      	lsrs	r2, r1, #3
 8002366:	429d      	cmp	r5, r3
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x24c>
 800236a:	e06e      	b.n	800244a <__aeabi_dsub+0x32a>
 800236c:	0312      	lsls	r2, r2, #12
 800236e:	056d      	lsls	r5, r5, #21
 8002370:	0b12      	lsrs	r2, r2, #12
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	2100      	movs	r1, #0
 8002376:	0312      	lsls	r2, r2, #12
 8002378:	0b13      	lsrs	r3, r2, #12
 800237a:	0d0a      	lsrs	r2, r1, #20
 800237c:	0512      	lsls	r2, r2, #20
 800237e:	431a      	orrs	r2, r3
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <__aeabi_dsub+0x350>)
 8002382:	052d      	lsls	r5, r5, #20
 8002384:	4013      	ands	r3, r2
 8002386:	432b      	orrs	r3, r5
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	07e4      	lsls	r4, r4, #31
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	4323      	orrs	r3, r4
 8002390:	0038      	movs	r0, r7
 8002392:	0019      	movs	r1, r3
 8002394:	bc3c      	pop	{r2, r3, r4, r5}
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	46a2      	mov	sl, r4
 800239c:	46ab      	mov	fp, r5
 800239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023a0:	4663      	mov	r3, ip
 80023a2:	4313      	orrs	r3, r2
 80023a4:	d011      	beq.n	80023ca <__aeabi_dsub+0x2aa>
 80023a6:	1e73      	subs	r3, r6, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d000      	beq.n	80023ae <__aeabi_dsub+0x28e>
 80023ac:	e107      	b.n	80025be <__aeabi_dsub+0x49e>
 80023ae:	1886      	adds	r6, r0, r2
 80023b0:	4286      	cmp	r6, r0
 80023b2:	4180      	sbcs	r0, r0
 80023b4:	4461      	add	r1, ip
 80023b6:	4240      	negs	r0, r0
 80023b8:	1809      	adds	r1, r1, r0
 80023ba:	2501      	movs	r5, #1
 80023bc:	020b      	lsls	r3, r1, #8
 80023be:	d537      	bpl.n	8002430 <__aeabi_dsub+0x310>
 80023c0:	2502      	movs	r5, #2
 80023c2:	e77b      	b.n	80022bc <__aeabi_dsub+0x19c>
 80023c4:	003e      	movs	r6, r7
 80023c6:	4661      	mov	r1, ip
 80023c8:	4691      	mov	r9, r2
 80023ca:	0035      	movs	r5, r6
 80023cc:	e7c5      	b.n	800235a <__aeabi_dsub+0x23a>
 80023ce:	465c      	mov	r4, fp
 80023d0:	2d00      	cmp	r5, #0
 80023d2:	d000      	beq.n	80023d6 <__aeabi_dsub+0x2b6>
 80023d4:	e0e1      	b.n	800259a <__aeabi_dsub+0x47a>
 80023d6:	000b      	movs	r3, r1
 80023d8:	4303      	orrs	r3, r0
 80023da:	d0f3      	beq.n	80023c4 <__aeabi_dsub+0x2a4>
 80023dc:	1c73      	adds	r3, r6, #1
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x2c2>
 80023e0:	e1ac      	b.n	800273c <__aeabi_dsub+0x61c>
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <__aeabi_dsub+0x348>)
 80023e4:	429f      	cmp	r7, r3
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x2ca>
 80023e8:	e13a      	b.n	8002660 <__aeabi_dsub+0x540>
 80023ea:	43f3      	mvns	r3, r6
 80023ec:	2b38      	cmp	r3, #56	; 0x38
 80023ee:	dd00      	ble.n	80023f2 <__aeabi_dsub+0x2d2>
 80023f0:	e16f      	b.n	80026d2 <__aeabi_dsub+0x5b2>
 80023f2:	2b1f      	cmp	r3, #31
 80023f4:	dd00      	ble.n	80023f8 <__aeabi_dsub+0x2d8>
 80023f6:	e18c      	b.n	8002712 <__aeabi_dsub+0x5f2>
 80023f8:	2520      	movs	r5, #32
 80023fa:	000e      	movs	r6, r1
 80023fc:	1aed      	subs	r5, r5, r3
 80023fe:	40ae      	lsls	r6, r5
 8002400:	46b0      	mov	r8, r6
 8002402:	0006      	movs	r6, r0
 8002404:	46aa      	mov	sl, r5
 8002406:	40de      	lsrs	r6, r3
 8002408:	4645      	mov	r5, r8
 800240a:	4335      	orrs	r5, r6
 800240c:	002e      	movs	r6, r5
 800240e:	4655      	mov	r5, sl
 8002410:	40d9      	lsrs	r1, r3
 8002412:	40a8      	lsls	r0, r5
 8002414:	4663      	mov	r3, ip
 8002416:	1e45      	subs	r5, r0, #1
 8002418:	41a8      	sbcs	r0, r5
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	469c      	mov	ip, r3
 800241e:	4330      	orrs	r0, r6
 8002420:	1a16      	subs	r6, r2, r0
 8002422:	42b2      	cmp	r2, r6
 8002424:	4192      	sbcs	r2, r2
 8002426:	4663      	mov	r3, ip
 8002428:	4252      	negs	r2, r2
 800242a:	1a99      	subs	r1, r3, r2
 800242c:	003d      	movs	r5, r7
 800242e:	e6b4      	b.n	800219a <__aeabi_dsub+0x7a>
 8002430:	2207      	movs	r2, #7
 8002432:	4032      	ands	r2, r6
 8002434:	2a00      	cmp	r2, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x31a>
 8002438:	e6e4      	b.n	8002204 <__aeabi_dsub+0xe4>
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <__aeabi_dsub+0x348>)
 800243c:	08f6      	lsrs	r6, r6, #3
 800243e:	074f      	lsls	r7, r1, #29
 8002440:	4337      	orrs	r7, r6
 8002442:	08ca      	lsrs	r2, r1, #3
 8002444:	429d      	cmp	r5, r3
 8002446:	d000      	beq.n	800244a <__aeabi_dsub+0x32a>
 8002448:	e790      	b.n	800236c <__aeabi_dsub+0x24c>
 800244a:	003b      	movs	r3, r7
 800244c:	4313      	orrs	r3, r2
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0x332>
 8002450:	e1a6      	b.n	80027a0 <__aeabi_dsub+0x680>
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	031b      	lsls	r3, r3, #12
 8002456:	431a      	orrs	r2, r3
 8002458:	0312      	lsls	r2, r2, #12
 800245a:	0b12      	lsrs	r2, r2, #12
 800245c:	4d02      	ldr	r5, [pc, #8]	; (8002468 <__aeabi_dsub+0x348>)
 800245e:	e789      	b.n	8002374 <__aeabi_dsub+0x254>
 8002460:	0015      	movs	r5, r2
 8002462:	2200      	movs	r2, #0
 8002464:	2700      	movs	r7, #0
 8002466:	e785      	b.n	8002374 <__aeabi_dsub+0x254>
 8002468:	000007ff 	.word	0x000007ff
 800246c:	ff7fffff 	.word	0xff7fffff
 8002470:	800fffff 	.word	0x800fffff
 8002474:	2e00      	cmp	r6, #0
 8002476:	d000      	beq.n	800247a <__aeabi_dsub+0x35a>
 8002478:	e0c7      	b.n	800260a <__aeabi_dsub+0x4ea>
 800247a:	1c6b      	adds	r3, r5, #1
 800247c:	055e      	lsls	r6, r3, #21
 800247e:	0d76      	lsrs	r6, r6, #21
 8002480:	2e01      	cmp	r6, #1
 8002482:	dc00      	bgt.n	8002486 <__aeabi_dsub+0x366>
 8002484:	e0f0      	b.n	8002668 <__aeabi_dsub+0x548>
 8002486:	4dc8      	ldr	r5, [pc, #800]	; (80027a8 <__aeabi_dsub+0x688>)
 8002488:	42ab      	cmp	r3, r5
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x36e>
 800248c:	e0b9      	b.n	8002602 <__aeabi_dsub+0x4e2>
 800248e:	1885      	adds	r5, r0, r2
 8002490:	000a      	movs	r2, r1
 8002492:	4285      	cmp	r5, r0
 8002494:	4189      	sbcs	r1, r1
 8002496:	4462      	add	r2, ip
 8002498:	4249      	negs	r1, r1
 800249a:	1851      	adds	r1, r2, r1
 800249c:	2207      	movs	r2, #7
 800249e:	07ce      	lsls	r6, r1, #31
 80024a0:	086d      	lsrs	r5, r5, #1
 80024a2:	432e      	orrs	r6, r5
 80024a4:	0849      	lsrs	r1, r1, #1
 80024a6:	4032      	ands	r2, r6
 80024a8:	001d      	movs	r5, r3
 80024aa:	e6a9      	b.n	8002200 <__aeabi_dsub+0xe0>
 80024ac:	49bf      	ldr	r1, [pc, #764]	; (80027ac <__aeabi_dsub+0x68c>)
 80024ae:	1aed      	subs	r5, r5, r3
 80024b0:	4011      	ands	r1, r2
 80024b2:	2207      	movs	r2, #7
 80024b4:	4032      	ands	r2, r6
 80024b6:	e6a3      	b.n	8002200 <__aeabi_dsub+0xe0>
 80024b8:	0032      	movs	r2, r6
 80024ba:	3828      	subs	r0, #40	; 0x28
 80024bc:	4082      	lsls	r2, r0
 80024be:	2600      	movs	r6, #0
 80024c0:	e686      	b.n	80021d0 <__aeabi_dsub+0xb0>
 80024c2:	0030      	movs	r0, r6
 80024c4:	f000 fa68 	bl	8002998 <__clzsi2>
 80024c8:	3020      	adds	r0, #32
 80024ca:	e673      	b.n	80021b4 <__aeabi_dsub+0x94>
 80024cc:	4663      	mov	r3, ip
 80024ce:	4313      	orrs	r3, r2
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	4193      	sbcs	r3, r2
 80024d4:	1ac6      	subs	r6, r0, r3
 80024d6:	42b0      	cmp	r0, r6
 80024d8:	4180      	sbcs	r0, r0
 80024da:	4240      	negs	r0, r0
 80024dc:	1a09      	subs	r1, r1, r0
 80024de:	e65c      	b.n	800219a <__aeabi_dsub+0x7a>
 80024e0:	000e      	movs	r6, r1
 80024e2:	4667      	mov	r7, ip
 80024e4:	4306      	orrs	r6, r0
 80024e6:	4317      	orrs	r7, r2
 80024e8:	2d00      	cmp	r5, #0
 80024ea:	d15e      	bne.n	80025aa <__aeabi_dsub+0x48a>
 80024ec:	2e00      	cmp	r6, #0
 80024ee:	d000      	beq.n	80024f2 <__aeabi_dsub+0x3d2>
 80024f0:	e0f3      	b.n	80026da <__aeabi_dsub+0x5ba>
 80024f2:	2f00      	cmp	r7, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x3d8>
 80024f6:	e11e      	b.n	8002736 <__aeabi_dsub+0x616>
 80024f8:	465c      	mov	r4, fp
 80024fa:	4661      	mov	r1, ip
 80024fc:	4691      	mov	r9, r2
 80024fe:	e72c      	b.n	800235a <__aeabi_dsub+0x23a>
 8002500:	4fa9      	ldr	r7, [pc, #676]	; (80027a8 <__aeabi_dsub+0x688>)
 8002502:	42be      	cmp	r6, r7
 8002504:	d07b      	beq.n	80025fe <__aeabi_dsub+0x4de>
 8002506:	001e      	movs	r6, r3
 8002508:	e6f1      	b.n	80022ee <__aeabi_dsub+0x1ce>
 800250a:	0010      	movs	r0, r2
 800250c:	3d1f      	subs	r5, #31
 800250e:	40e8      	lsrs	r0, r5
 8002510:	2b20      	cmp	r3, #32
 8002512:	d003      	beq.n	800251c <__aeabi_dsub+0x3fc>
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	1acb      	subs	r3, r1, r3
 8002518:	409a      	lsls	r2, r3
 800251a:	4316      	orrs	r6, r2
 800251c:	1e73      	subs	r3, r6, #1
 800251e:	419e      	sbcs	r6, r3
 8002520:	2207      	movs	r2, #7
 8002522:	4306      	orrs	r6, r0
 8002524:	4032      	ands	r2, r6
 8002526:	2100      	movs	r1, #0
 8002528:	2500      	movs	r5, #0
 800252a:	e783      	b.n	8002434 <__aeabi_dsub+0x314>
 800252c:	1a16      	subs	r6, r2, r0
 800252e:	4663      	mov	r3, ip
 8002530:	42b2      	cmp	r2, r6
 8002532:	4180      	sbcs	r0, r0
 8002534:	1a59      	subs	r1, r3, r1
 8002536:	4240      	negs	r0, r0
 8002538:	1a0b      	subs	r3, r1, r0
 800253a:	4698      	mov	r8, r3
 800253c:	465c      	mov	r4, fp
 800253e:	e632      	b.n	80021a6 <__aeabi_dsub+0x86>
 8002540:	2e1f      	cmp	r6, #31
 8002542:	dd00      	ble.n	8002546 <__aeabi_dsub+0x426>
 8002544:	e0ab      	b.n	800269e <__aeabi_dsub+0x57e>
 8002546:	2720      	movs	r7, #32
 8002548:	1bbb      	subs	r3, r7, r6
 800254a:	469a      	mov	sl, r3
 800254c:	4663      	mov	r3, ip
 800254e:	4657      	mov	r7, sl
 8002550:	40bb      	lsls	r3, r7
 8002552:	4699      	mov	r9, r3
 8002554:	0013      	movs	r3, r2
 8002556:	464f      	mov	r7, r9
 8002558:	40f3      	lsrs	r3, r6
 800255a:	431f      	orrs	r7, r3
 800255c:	003b      	movs	r3, r7
 800255e:	4657      	mov	r7, sl
 8002560:	40ba      	lsls	r2, r7
 8002562:	1e57      	subs	r7, r2, #1
 8002564:	41ba      	sbcs	r2, r7
 8002566:	4313      	orrs	r3, r2
 8002568:	4662      	mov	r2, ip
 800256a:	40f2      	lsrs	r2, r6
 800256c:	1889      	adds	r1, r1, r2
 800256e:	e698      	b.n	80022a2 <__aeabi_dsub+0x182>
 8002570:	2720      	movs	r7, #32
 8002572:	1bbb      	subs	r3, r7, r6
 8002574:	469a      	mov	sl, r3
 8002576:	4663      	mov	r3, ip
 8002578:	4657      	mov	r7, sl
 800257a:	40bb      	lsls	r3, r7
 800257c:	4699      	mov	r9, r3
 800257e:	0013      	movs	r3, r2
 8002580:	464f      	mov	r7, r9
 8002582:	40f3      	lsrs	r3, r6
 8002584:	431f      	orrs	r7, r3
 8002586:	003b      	movs	r3, r7
 8002588:	4657      	mov	r7, sl
 800258a:	40ba      	lsls	r2, r7
 800258c:	1e57      	subs	r7, r2, #1
 800258e:	41ba      	sbcs	r2, r7
 8002590:	4313      	orrs	r3, r2
 8002592:	4662      	mov	r2, ip
 8002594:	40f2      	lsrs	r2, r6
 8002596:	1a89      	subs	r1, r1, r2
 8002598:	e79c      	b.n	80024d4 <__aeabi_dsub+0x3b4>
 800259a:	4b83      	ldr	r3, [pc, #524]	; (80027a8 <__aeabi_dsub+0x688>)
 800259c:	429f      	cmp	r7, r3
 800259e:	d05f      	beq.n	8002660 <__aeabi_dsub+0x540>
 80025a0:	2580      	movs	r5, #128	; 0x80
 80025a2:	042d      	lsls	r5, r5, #16
 80025a4:	4273      	negs	r3, r6
 80025a6:	4329      	orrs	r1, r5
 80025a8:	e720      	b.n	80023ec <__aeabi_dsub+0x2cc>
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	d10c      	bne.n	80025c8 <__aeabi_dsub+0x4a8>
 80025ae:	2f00      	cmp	r7, #0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x494>
 80025b2:	e0d0      	b.n	8002756 <__aeabi_dsub+0x636>
 80025b4:	465c      	mov	r4, fp
 80025b6:	4661      	mov	r1, ip
 80025b8:	4691      	mov	r9, r2
 80025ba:	4d7b      	ldr	r5, [pc, #492]	; (80027a8 <__aeabi_dsub+0x688>)
 80025bc:	e6cd      	b.n	800235a <__aeabi_dsub+0x23a>
 80025be:	4f7a      	ldr	r7, [pc, #488]	; (80027a8 <__aeabi_dsub+0x688>)
 80025c0:	42be      	cmp	r6, r7
 80025c2:	d01c      	beq.n	80025fe <__aeabi_dsub+0x4de>
 80025c4:	001e      	movs	r6, r3
 80025c6:	e665      	b.n	8002294 <__aeabi_dsub+0x174>
 80025c8:	2f00      	cmp	r7, #0
 80025ca:	d018      	beq.n	80025fe <__aeabi_dsub+0x4de>
 80025cc:	08c0      	lsrs	r0, r0, #3
 80025ce:	074e      	lsls	r6, r1, #29
 80025d0:	4306      	orrs	r6, r0
 80025d2:	2080      	movs	r0, #128	; 0x80
 80025d4:	08c9      	lsrs	r1, r1, #3
 80025d6:	0300      	lsls	r0, r0, #12
 80025d8:	4201      	tst	r1, r0
 80025da:	d008      	beq.n	80025ee <__aeabi_dsub+0x4ce>
 80025dc:	4663      	mov	r3, ip
 80025de:	08dc      	lsrs	r4, r3, #3
 80025e0:	4204      	tst	r4, r0
 80025e2:	d104      	bne.n	80025ee <__aeabi_dsub+0x4ce>
 80025e4:	0021      	movs	r1, r4
 80025e6:	46da      	mov	sl, fp
 80025e8:	08d2      	lsrs	r2, r2, #3
 80025ea:	075e      	lsls	r6, r3, #29
 80025ec:	4316      	orrs	r6, r2
 80025ee:	00f3      	lsls	r3, r6, #3
 80025f0:	4699      	mov	r9, r3
 80025f2:	2401      	movs	r4, #1
 80025f4:	4653      	mov	r3, sl
 80025f6:	00c9      	lsls	r1, r1, #3
 80025f8:	0f72      	lsrs	r2, r6, #29
 80025fa:	4311      	orrs	r1, r2
 80025fc:	401c      	ands	r4, r3
 80025fe:	4d6a      	ldr	r5, [pc, #424]	; (80027a8 <__aeabi_dsub+0x688>)
 8002600:	e6ab      	b.n	800235a <__aeabi_dsub+0x23a>
 8002602:	001d      	movs	r5, r3
 8002604:	2200      	movs	r2, #0
 8002606:	2700      	movs	r7, #0
 8002608:	e6b4      	b.n	8002374 <__aeabi_dsub+0x254>
 800260a:	2d00      	cmp	r5, #0
 800260c:	d159      	bne.n	80026c2 <__aeabi_dsub+0x5a2>
 800260e:	000b      	movs	r3, r1
 8002610:	4303      	orrs	r3, r0
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x4f6>
 8002614:	e6d6      	b.n	80023c4 <__aeabi_dsub+0x2a4>
 8002616:	1c73      	adds	r3, r6, #1
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x4fc>
 800261a:	e0b2      	b.n	8002782 <__aeabi_dsub+0x662>
 800261c:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <__aeabi_dsub+0x688>)
 800261e:	429f      	cmp	r7, r3
 8002620:	d01e      	beq.n	8002660 <__aeabi_dsub+0x540>
 8002622:	43f3      	mvns	r3, r6
 8002624:	2b38      	cmp	r3, #56	; 0x38
 8002626:	dc6f      	bgt.n	8002708 <__aeabi_dsub+0x5e8>
 8002628:	2b1f      	cmp	r3, #31
 800262a:	dd00      	ble.n	800262e <__aeabi_dsub+0x50e>
 800262c:	e097      	b.n	800275e <__aeabi_dsub+0x63e>
 800262e:	2520      	movs	r5, #32
 8002630:	000e      	movs	r6, r1
 8002632:	1aed      	subs	r5, r5, r3
 8002634:	40ae      	lsls	r6, r5
 8002636:	46b0      	mov	r8, r6
 8002638:	0006      	movs	r6, r0
 800263a:	46aa      	mov	sl, r5
 800263c:	40de      	lsrs	r6, r3
 800263e:	4645      	mov	r5, r8
 8002640:	4335      	orrs	r5, r6
 8002642:	002e      	movs	r6, r5
 8002644:	4655      	mov	r5, sl
 8002646:	40a8      	lsls	r0, r5
 8002648:	40d9      	lsrs	r1, r3
 800264a:	1e45      	subs	r5, r0, #1
 800264c:	41a8      	sbcs	r0, r5
 800264e:	448c      	add	ip, r1
 8002650:	4306      	orrs	r6, r0
 8002652:	18b6      	adds	r6, r6, r2
 8002654:	4296      	cmp	r6, r2
 8002656:	4192      	sbcs	r2, r2
 8002658:	4251      	negs	r1, r2
 800265a:	4461      	add	r1, ip
 800265c:	003d      	movs	r5, r7
 800265e:	e625      	b.n	80022ac <__aeabi_dsub+0x18c>
 8002660:	003d      	movs	r5, r7
 8002662:	4661      	mov	r1, ip
 8002664:	4691      	mov	r9, r2
 8002666:	e678      	b.n	800235a <__aeabi_dsub+0x23a>
 8002668:	000b      	movs	r3, r1
 800266a:	4303      	orrs	r3, r0
 800266c:	2d00      	cmp	r5, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x552>
 8002670:	e655      	b.n	800231e <__aeabi_dsub+0x1fe>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f5      	beq.n	8002662 <__aeabi_dsub+0x542>
 8002676:	4663      	mov	r3, ip
 8002678:	4313      	orrs	r3, r2
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x55e>
 800267c:	e66d      	b.n	800235a <__aeabi_dsub+0x23a>
 800267e:	1886      	adds	r6, r0, r2
 8002680:	4286      	cmp	r6, r0
 8002682:	4180      	sbcs	r0, r0
 8002684:	4461      	add	r1, ip
 8002686:	4240      	negs	r0, r0
 8002688:	1809      	adds	r1, r1, r0
 800268a:	2200      	movs	r2, #0
 800268c:	020b      	lsls	r3, r1, #8
 800268e:	d400      	bmi.n	8002692 <__aeabi_dsub+0x572>
 8002690:	e6d0      	b.n	8002434 <__aeabi_dsub+0x314>
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <__aeabi_dsub+0x68c>)
 8002694:	3501      	adds	r5, #1
 8002696:	4019      	ands	r1, r3
 8002698:	e5b2      	b.n	8002200 <__aeabi_dsub+0xe0>
 800269a:	46b1      	mov	r9, r6
 800269c:	e65d      	b.n	800235a <__aeabi_dsub+0x23a>
 800269e:	0033      	movs	r3, r6
 80026a0:	4667      	mov	r7, ip
 80026a2:	3b20      	subs	r3, #32
 80026a4:	40df      	lsrs	r7, r3
 80026a6:	003b      	movs	r3, r7
 80026a8:	2e20      	cmp	r6, #32
 80026aa:	d005      	beq.n	80026b8 <__aeabi_dsub+0x598>
 80026ac:	2740      	movs	r7, #64	; 0x40
 80026ae:	1bbf      	subs	r7, r7, r6
 80026b0:	4666      	mov	r6, ip
 80026b2:	40be      	lsls	r6, r7
 80026b4:	4332      	orrs	r2, r6
 80026b6:	4690      	mov	r8, r2
 80026b8:	4646      	mov	r6, r8
 80026ba:	1e72      	subs	r2, r6, #1
 80026bc:	4196      	sbcs	r6, r2
 80026be:	4333      	orrs	r3, r6
 80026c0:	e5ef      	b.n	80022a2 <__aeabi_dsub+0x182>
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <__aeabi_dsub+0x688>)
 80026c4:	429f      	cmp	r7, r3
 80026c6:	d0cb      	beq.n	8002660 <__aeabi_dsub+0x540>
 80026c8:	2580      	movs	r5, #128	; 0x80
 80026ca:	042d      	lsls	r5, r5, #16
 80026cc:	4273      	negs	r3, r6
 80026ce:	4329      	orrs	r1, r5
 80026d0:	e7a8      	b.n	8002624 <__aeabi_dsub+0x504>
 80026d2:	4308      	orrs	r0, r1
 80026d4:	1e41      	subs	r1, r0, #1
 80026d6:	4188      	sbcs	r0, r1
 80026d8:	e6a2      	b.n	8002420 <__aeabi_dsub+0x300>
 80026da:	2f00      	cmp	r7, #0
 80026dc:	d100      	bne.n	80026e0 <__aeabi_dsub+0x5c0>
 80026de:	e63c      	b.n	800235a <__aeabi_dsub+0x23a>
 80026e0:	4663      	mov	r3, ip
 80026e2:	1a86      	subs	r6, r0, r2
 80026e4:	1acf      	subs	r7, r1, r3
 80026e6:	42b0      	cmp	r0, r6
 80026e8:	419b      	sbcs	r3, r3
 80026ea:	425b      	negs	r3, r3
 80026ec:	1afb      	subs	r3, r7, r3
 80026ee:	4698      	mov	r8, r3
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	d54e      	bpl.n	8002792 <__aeabi_dsub+0x672>
 80026f4:	1a16      	subs	r6, r2, r0
 80026f6:	4663      	mov	r3, ip
 80026f8:	42b2      	cmp	r2, r6
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	1a59      	subs	r1, r3, r1
 80026fe:	4252      	negs	r2, r2
 8002700:	1a89      	subs	r1, r1, r2
 8002702:	465c      	mov	r4, fp
 8002704:	2200      	movs	r2, #0
 8002706:	e57b      	b.n	8002200 <__aeabi_dsub+0xe0>
 8002708:	4301      	orrs	r1, r0
 800270a:	000e      	movs	r6, r1
 800270c:	1e71      	subs	r1, r6, #1
 800270e:	418e      	sbcs	r6, r1
 8002710:	e79f      	b.n	8002652 <__aeabi_dsub+0x532>
 8002712:	001d      	movs	r5, r3
 8002714:	000e      	movs	r6, r1
 8002716:	3d20      	subs	r5, #32
 8002718:	40ee      	lsrs	r6, r5
 800271a:	46b0      	mov	r8, r6
 800271c:	2b20      	cmp	r3, #32
 800271e:	d004      	beq.n	800272a <__aeabi_dsub+0x60a>
 8002720:	2540      	movs	r5, #64	; 0x40
 8002722:	1aeb      	subs	r3, r5, r3
 8002724:	4099      	lsls	r1, r3
 8002726:	4308      	orrs	r0, r1
 8002728:	4681      	mov	r9, r0
 800272a:	4648      	mov	r0, r9
 800272c:	4643      	mov	r3, r8
 800272e:	1e41      	subs	r1, r0, #1
 8002730:	4188      	sbcs	r0, r1
 8002732:	4318      	orrs	r0, r3
 8002734:	e674      	b.n	8002420 <__aeabi_dsub+0x300>
 8002736:	2200      	movs	r2, #0
 8002738:	2400      	movs	r4, #0
 800273a:	e617      	b.n	800236c <__aeabi_dsub+0x24c>
 800273c:	1a16      	subs	r6, r2, r0
 800273e:	4663      	mov	r3, ip
 8002740:	42b2      	cmp	r2, r6
 8002742:	4192      	sbcs	r2, r2
 8002744:	1a59      	subs	r1, r3, r1
 8002746:	4252      	negs	r2, r2
 8002748:	1a89      	subs	r1, r1, r2
 800274a:	003d      	movs	r5, r7
 800274c:	e525      	b.n	800219a <__aeabi_dsub+0x7a>
 800274e:	4661      	mov	r1, ip
 8002750:	4691      	mov	r9, r2
 8002752:	4d15      	ldr	r5, [pc, #84]	; (80027a8 <__aeabi_dsub+0x688>)
 8002754:	e601      	b.n	800235a <__aeabi_dsub+0x23a>
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	2400      	movs	r4, #0
 800275a:	0312      	lsls	r2, r2, #12
 800275c:	e679      	b.n	8002452 <__aeabi_dsub+0x332>
 800275e:	001d      	movs	r5, r3
 8002760:	000e      	movs	r6, r1
 8002762:	3d20      	subs	r5, #32
 8002764:	40ee      	lsrs	r6, r5
 8002766:	46b0      	mov	r8, r6
 8002768:	2b20      	cmp	r3, #32
 800276a:	d004      	beq.n	8002776 <__aeabi_dsub+0x656>
 800276c:	2540      	movs	r5, #64	; 0x40
 800276e:	1aeb      	subs	r3, r5, r3
 8002770:	4099      	lsls	r1, r3
 8002772:	4308      	orrs	r0, r1
 8002774:	4681      	mov	r9, r0
 8002776:	464e      	mov	r6, r9
 8002778:	4643      	mov	r3, r8
 800277a:	1e71      	subs	r1, r6, #1
 800277c:	418e      	sbcs	r6, r1
 800277e:	431e      	orrs	r6, r3
 8002780:	e767      	b.n	8002652 <__aeabi_dsub+0x532>
 8002782:	1886      	adds	r6, r0, r2
 8002784:	4296      	cmp	r6, r2
 8002786:	419b      	sbcs	r3, r3
 8002788:	4461      	add	r1, ip
 800278a:	425b      	negs	r3, r3
 800278c:	18c9      	adds	r1, r1, r3
 800278e:	003d      	movs	r5, r7
 8002790:	e58c      	b.n	80022ac <__aeabi_dsub+0x18c>
 8002792:	4647      	mov	r7, r8
 8002794:	4337      	orrs	r7, r6
 8002796:	d0ce      	beq.n	8002736 <__aeabi_dsub+0x616>
 8002798:	2207      	movs	r2, #7
 800279a:	4641      	mov	r1, r8
 800279c:	4032      	ands	r2, r6
 800279e:	e649      	b.n	8002434 <__aeabi_dsub+0x314>
 80027a0:	2700      	movs	r7, #0
 80027a2:	003a      	movs	r2, r7
 80027a4:	e5e6      	b.n	8002374 <__aeabi_dsub+0x254>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	000007ff 	.word	0x000007ff
 80027ac:	ff7fffff 	.word	0xff7fffff

080027b0 <__aeabi_d2iz>:
 80027b0:	b530      	push	{r4, r5, lr}
 80027b2:	4d14      	ldr	r5, [pc, #80]	; (8002804 <__aeabi_d2iz+0x54>)
 80027b4:	030a      	lsls	r2, r1, #12
 80027b6:	004b      	lsls	r3, r1, #1
 80027b8:	0b12      	lsrs	r2, r2, #12
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	0fc9      	lsrs	r1, r1, #31
 80027be:	2400      	movs	r4, #0
 80027c0:	42ab      	cmp	r3, r5
 80027c2:	dd11      	ble.n	80027e8 <__aeabi_d2iz+0x38>
 80027c4:	4c10      	ldr	r4, [pc, #64]	; (8002808 <__aeabi_d2iz+0x58>)
 80027c6:	42a3      	cmp	r3, r4
 80027c8:	dc10      	bgt.n	80027ec <__aeabi_d2iz+0x3c>
 80027ca:	2480      	movs	r4, #128	; 0x80
 80027cc:	0364      	lsls	r4, r4, #13
 80027ce:	4322      	orrs	r2, r4
 80027d0:	4c0e      	ldr	r4, [pc, #56]	; (800280c <__aeabi_d2iz+0x5c>)
 80027d2:	1ae4      	subs	r4, r4, r3
 80027d4:	2c1f      	cmp	r4, #31
 80027d6:	dd0c      	ble.n	80027f2 <__aeabi_d2iz+0x42>
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <__aeabi_d2iz+0x60>)
 80027da:	1ac3      	subs	r3, r0, r3
 80027dc:	40da      	lsrs	r2, r3
 80027de:	0013      	movs	r3, r2
 80027e0:	425c      	negs	r4, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_d2iz+0x38>
 80027e6:	001c      	movs	r4, r3
 80027e8:	0020      	movs	r0, r4
 80027ea:	bd30      	pop	{r4, r5, pc}
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <__aeabi_d2iz+0x64>)
 80027ee:	18cc      	adds	r4, r1, r3
 80027f0:	e7fa      	b.n	80027e8 <__aeabi_d2iz+0x38>
 80027f2:	4d09      	ldr	r5, [pc, #36]	; (8002818 <__aeabi_d2iz+0x68>)
 80027f4:	40e0      	lsrs	r0, r4
 80027f6:	46ac      	mov	ip, r5
 80027f8:	4463      	add	r3, ip
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	4303      	orrs	r3, r0
 8002800:	e7ee      	b.n	80027e0 <__aeabi_d2iz+0x30>
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	000003fe 	.word	0x000003fe
 8002808:	0000041d 	.word	0x0000041d
 800280c:	00000433 	.word	0x00000433
 8002810:	00000413 	.word	0x00000413
 8002814:	7fffffff 	.word	0x7fffffff
 8002818:	fffffbed 	.word	0xfffffbed

0800281c <__aeabi_i2d>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	2800      	cmp	r0, #0
 8002820:	d02d      	beq.n	800287e <__aeabi_i2d+0x62>
 8002822:	17c3      	asrs	r3, r0, #31
 8002824:	18c5      	adds	r5, r0, r3
 8002826:	405d      	eors	r5, r3
 8002828:	0fc4      	lsrs	r4, r0, #31
 800282a:	0028      	movs	r0, r5
 800282c:	f000 f8b4 	bl	8002998 <__clzsi2>
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <__aeabi_i2d+0x6c>)
 8002832:	1a1b      	subs	r3, r3, r0
 8002834:	055b      	lsls	r3, r3, #21
 8002836:	0d5b      	lsrs	r3, r3, #21
 8002838:	280a      	cmp	r0, #10
 800283a:	dd15      	ble.n	8002868 <__aeabi_i2d+0x4c>
 800283c:	380b      	subs	r0, #11
 800283e:	4085      	lsls	r5, r0
 8002840:	2200      	movs	r2, #0
 8002842:	032d      	lsls	r5, r5, #12
 8002844:	0b2d      	lsrs	r5, r5, #12
 8002846:	2100      	movs	r1, #0
 8002848:	0010      	movs	r0, r2
 800284a:	032d      	lsls	r5, r5, #12
 800284c:	0d0a      	lsrs	r2, r1, #20
 800284e:	0b2d      	lsrs	r5, r5, #12
 8002850:	0512      	lsls	r2, r2, #20
 8002852:	432a      	orrs	r2, r5
 8002854:	4d0d      	ldr	r5, [pc, #52]	; (800288c <__aeabi_i2d+0x70>)
 8002856:	051b      	lsls	r3, r3, #20
 8002858:	402a      	ands	r2, r5
 800285a:	4313      	orrs	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	07e4      	lsls	r4, r4, #31
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	4323      	orrs	r3, r4
 8002864:	0019      	movs	r1, r3
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	0002      	movs	r2, r0
 800286a:	0029      	movs	r1, r5
 800286c:	3215      	adds	r2, #21
 800286e:	4091      	lsls	r1, r2
 8002870:	000a      	movs	r2, r1
 8002872:	210b      	movs	r1, #11
 8002874:	1a08      	subs	r0, r1, r0
 8002876:	40c5      	lsrs	r5, r0
 8002878:	032d      	lsls	r5, r5, #12
 800287a:	0b2d      	lsrs	r5, r5, #12
 800287c:	e7e3      	b.n	8002846 <__aeabi_i2d+0x2a>
 800287e:	2400      	movs	r4, #0
 8002880:	2300      	movs	r3, #0
 8002882:	2500      	movs	r5, #0
 8002884:	2200      	movs	r2, #0
 8002886:	e7de      	b.n	8002846 <__aeabi_i2d+0x2a>
 8002888:	0000041e 	.word	0x0000041e
 800288c:	800fffff 	.word	0x800fffff

08002890 <__aeabi_ui2d>:
 8002890:	b510      	push	{r4, lr}
 8002892:	1e04      	subs	r4, r0, #0
 8002894:	d025      	beq.n	80028e2 <__aeabi_ui2d+0x52>
 8002896:	f000 f87f 	bl	8002998 <__clzsi2>
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <__aeabi_ui2d+0x5c>)
 800289c:	1a1b      	subs	r3, r3, r0
 800289e:	055b      	lsls	r3, r3, #21
 80028a0:	0d5b      	lsrs	r3, r3, #21
 80028a2:	280a      	cmp	r0, #10
 80028a4:	dd12      	ble.n	80028cc <__aeabi_ui2d+0x3c>
 80028a6:	380b      	subs	r0, #11
 80028a8:	4084      	lsls	r4, r0
 80028aa:	2200      	movs	r2, #0
 80028ac:	0324      	lsls	r4, r4, #12
 80028ae:	0b24      	lsrs	r4, r4, #12
 80028b0:	2100      	movs	r1, #0
 80028b2:	0010      	movs	r0, r2
 80028b4:	0324      	lsls	r4, r4, #12
 80028b6:	0d0a      	lsrs	r2, r1, #20
 80028b8:	0b24      	lsrs	r4, r4, #12
 80028ba:	0512      	lsls	r2, r2, #20
 80028bc:	4322      	orrs	r2, r4
 80028be:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <__aeabi_ui2d+0x60>)
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	4022      	ands	r2, r4
 80028c4:	4313      	orrs	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	0859      	lsrs	r1, r3, #1
 80028ca:	bd10      	pop	{r4, pc}
 80028cc:	0002      	movs	r2, r0
 80028ce:	0021      	movs	r1, r4
 80028d0:	3215      	adds	r2, #21
 80028d2:	4091      	lsls	r1, r2
 80028d4:	000a      	movs	r2, r1
 80028d6:	210b      	movs	r1, #11
 80028d8:	1a08      	subs	r0, r1, r0
 80028da:	40c4      	lsrs	r4, r0
 80028dc:	0324      	lsls	r4, r4, #12
 80028de:	0b24      	lsrs	r4, r4, #12
 80028e0:	e7e6      	b.n	80028b0 <__aeabi_ui2d+0x20>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2400      	movs	r4, #0
 80028e6:	2200      	movs	r2, #0
 80028e8:	e7e2      	b.n	80028b0 <__aeabi_ui2d+0x20>
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	0000041e 	.word	0x0000041e
 80028f0:	800fffff 	.word	0x800fffff

080028f4 <__aeabi_f2d>:
 80028f4:	0041      	lsls	r1, r0, #1
 80028f6:	0e09      	lsrs	r1, r1, #24
 80028f8:	1c4b      	adds	r3, r1, #1
 80028fa:	b570      	push	{r4, r5, r6, lr}
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	0246      	lsls	r6, r0, #9
 8002900:	0a75      	lsrs	r5, r6, #9
 8002902:	0fc4      	lsrs	r4, r0, #31
 8002904:	2b01      	cmp	r3, #1
 8002906:	dd14      	ble.n	8002932 <__aeabi_f2d+0x3e>
 8002908:	23e0      	movs	r3, #224	; 0xe0
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	076d      	lsls	r5, r5, #29
 800290e:	0b36      	lsrs	r6, r6, #12
 8002910:	18cb      	adds	r3, r1, r3
 8002912:	2100      	movs	r1, #0
 8002914:	0d0a      	lsrs	r2, r1, #20
 8002916:	0028      	movs	r0, r5
 8002918:	0512      	lsls	r2, r2, #20
 800291a:	4d1c      	ldr	r5, [pc, #112]	; (800298c <__aeabi_f2d+0x98>)
 800291c:	4332      	orrs	r2, r6
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	402a      	ands	r2, r5
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	4313      	orrs	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	07e4      	lsls	r4, r4, #31
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	4323      	orrs	r3, r4
 800292e:	0019      	movs	r1, r3
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	2900      	cmp	r1, #0
 8002934:	d114      	bne.n	8002960 <__aeabi_f2d+0x6c>
 8002936:	2d00      	cmp	r5, #0
 8002938:	d01e      	beq.n	8002978 <__aeabi_f2d+0x84>
 800293a:	0028      	movs	r0, r5
 800293c:	f000 f82c 	bl	8002998 <__clzsi2>
 8002940:	280a      	cmp	r0, #10
 8002942:	dc1c      	bgt.n	800297e <__aeabi_f2d+0x8a>
 8002944:	230b      	movs	r3, #11
 8002946:	002a      	movs	r2, r5
 8002948:	1a1b      	subs	r3, r3, r0
 800294a:	40da      	lsrs	r2, r3
 800294c:	0003      	movs	r3, r0
 800294e:	3315      	adds	r3, #21
 8002950:	409d      	lsls	r5, r3
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <__aeabi_f2d+0x9c>)
 8002954:	0312      	lsls	r2, r2, #12
 8002956:	1a1b      	subs	r3, r3, r0
 8002958:	055b      	lsls	r3, r3, #21
 800295a:	0b16      	lsrs	r6, r2, #12
 800295c:	0d5b      	lsrs	r3, r3, #21
 800295e:	e7d8      	b.n	8002912 <__aeabi_f2d+0x1e>
 8002960:	2d00      	cmp	r5, #0
 8002962:	d006      	beq.n	8002972 <__aeabi_f2d+0x7e>
 8002964:	0b32      	lsrs	r2, r6, #12
 8002966:	2680      	movs	r6, #128	; 0x80
 8002968:	0336      	lsls	r6, r6, #12
 800296a:	076d      	lsls	r5, r5, #29
 800296c:	4316      	orrs	r6, r2
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <__aeabi_f2d+0xa0>)
 8002970:	e7cf      	b.n	8002912 <__aeabi_f2d+0x1e>
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <__aeabi_f2d+0xa0>)
 8002974:	2600      	movs	r6, #0
 8002976:	e7cc      	b.n	8002912 <__aeabi_f2d+0x1e>
 8002978:	2300      	movs	r3, #0
 800297a:	2600      	movs	r6, #0
 800297c:	e7c9      	b.n	8002912 <__aeabi_f2d+0x1e>
 800297e:	0003      	movs	r3, r0
 8002980:	002a      	movs	r2, r5
 8002982:	3b0b      	subs	r3, #11
 8002984:	409a      	lsls	r2, r3
 8002986:	2500      	movs	r5, #0
 8002988:	e7e3      	b.n	8002952 <__aeabi_f2d+0x5e>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	800fffff 	.word	0x800fffff
 8002990:	00000389 	.word	0x00000389
 8002994:	000007ff 	.word	0x000007ff

08002998 <__clzsi2>:
 8002998:	211c      	movs	r1, #28
 800299a:	2301      	movs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	4298      	cmp	r0, r3
 80029a0:	d301      	bcc.n	80029a6 <__clzsi2+0xe>
 80029a2:	0c00      	lsrs	r0, r0, #16
 80029a4:	3910      	subs	r1, #16
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	4298      	cmp	r0, r3
 80029aa:	d301      	bcc.n	80029b0 <__clzsi2+0x18>
 80029ac:	0a00      	lsrs	r0, r0, #8
 80029ae:	3908      	subs	r1, #8
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	4298      	cmp	r0, r3
 80029b4:	d301      	bcc.n	80029ba <__clzsi2+0x22>
 80029b6:	0900      	lsrs	r0, r0, #4
 80029b8:	3904      	subs	r1, #4
 80029ba:	a202      	add	r2, pc, #8	; (adr r2, 80029c4 <__clzsi2+0x2c>)
 80029bc:	5c10      	ldrb	r0, [r2, r0]
 80029be:	1840      	adds	r0, r0, r1
 80029c0:	4770      	bx	lr
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	02020304 	.word	0x02020304
 80029c8:	01010101 	.word	0x01010101
	...

080029d4 <__clzdi2>:
 80029d4:	b510      	push	{r4, lr}
 80029d6:	2900      	cmp	r1, #0
 80029d8:	d103      	bne.n	80029e2 <__clzdi2+0xe>
 80029da:	f7ff ffdd 	bl	8002998 <__clzsi2>
 80029de:	3020      	adds	r0, #32
 80029e0:	e002      	b.n	80029e8 <__clzdi2+0x14>
 80029e2:	1c08      	adds	r0, r1, #0
 80029e4:	f7ff ffd8 	bl	8002998 <__clzsi2>
 80029e8:	bd10      	pop	{r4, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)

080029ec <__divdi3>:
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	464e      	mov	r6, r9
 80029f0:	4657      	mov	r7, sl
 80029f2:	46de      	mov	lr, fp
 80029f4:	4645      	mov	r5, r8
 80029f6:	b5e0      	push	{r5, r6, r7, lr}
 80029f8:	000f      	movs	r7, r1
 80029fa:	2100      	movs	r1, #0
 80029fc:	b083      	sub	sp, #12
 80029fe:	0006      	movs	r6, r0
 8002a00:	4689      	mov	r9, r1
 8002a02:	2f00      	cmp	r7, #0
 8002a04:	da06      	bge.n	8002a14 <__divdi3+0x28>
 8002a06:	0039      	movs	r1, r7
 8002a08:	2700      	movs	r7, #0
 8002a0a:	4246      	negs	r6, r0
 8002a0c:	418f      	sbcs	r7, r1
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4249      	negs	r1, r1
 8002a12:	4689      	mov	r9, r1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da07      	bge.n	8002a28 <__divdi3+0x3c>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	43c9      	mvns	r1, r1
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	4689      	mov	r9, r1
 8002a20:	0019      	movs	r1, r3
 8002a22:	2300      	movs	r3, #0
 8002a24:	4242      	negs	r2, r0
 8002a26:	418b      	sbcs	r3, r1
 8002a28:	0034      	movs	r4, r6
 8002a2a:	003d      	movs	r5, r7
 8002a2c:	4692      	mov	sl, r2
 8002a2e:	4698      	mov	r8, r3
 8002a30:	42bb      	cmp	r3, r7
 8002a32:	d869      	bhi.n	8002b08 <__divdi3+0x11c>
 8002a34:	d066      	beq.n	8002b04 <__divdi3+0x118>
 8002a36:	4641      	mov	r1, r8
 8002a38:	4650      	mov	r0, sl
 8002a3a:	f7ff ffcb 	bl	80029d4 <__clzdi2>
 8002a3e:	4683      	mov	fp, r0
 8002a40:	0039      	movs	r1, r7
 8002a42:	0030      	movs	r0, r6
 8002a44:	f7ff ffc6 	bl	80029d4 <__clzdi2>
 8002a48:	465b      	mov	r3, fp
 8002a4a:	1a1b      	subs	r3, r3, r0
 8002a4c:	469c      	mov	ip, r3
 8002a4e:	3b20      	subs	r3, #32
 8002a50:	469b      	mov	fp, r3
 8002a52:	d500      	bpl.n	8002a56 <__divdi3+0x6a>
 8002a54:	e075      	b.n	8002b42 <__divdi3+0x156>
 8002a56:	4651      	mov	r1, sl
 8002a58:	4658      	mov	r0, fp
 8002a5a:	4081      	lsls	r1, r0
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	4651      	mov	r1, sl
 8002a60:	4660      	mov	r0, ip
 8002a62:	4081      	lsls	r1, r0
 8002a64:	000a      	movs	r2, r1
 8002a66:	42bb      	cmp	r3, r7
 8002a68:	d861      	bhi.n	8002b2e <__divdi3+0x142>
 8002a6a:	d05e      	beq.n	8002b2a <__divdi3+0x13e>
 8002a6c:	0034      	movs	r4, r6
 8002a6e:	003d      	movs	r5, r7
 8002a70:	4659      	mov	r1, fp
 8002a72:	1aa4      	subs	r4, r4, r2
 8002a74:	419d      	sbcs	r5, r3
 8002a76:	2900      	cmp	r1, #0
 8002a78:	da00      	bge.n	8002a7c <__divdi3+0x90>
 8002a7a:	e07a      	b.n	8002b72 <__divdi3+0x186>
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2000      	movs	r0, #0
 8002a80:	2601      	movs	r6, #1
 8002a82:	9000      	str	r0, [sp, #0]
 8002a84:	9101      	str	r1, [sp, #4]
 8002a86:	4659      	mov	r1, fp
 8002a88:	408e      	lsls	r6, r1
 8002a8a:	9601      	str	r6, [sp, #4]
 8002a8c:	4661      	mov	r1, ip
 8002a8e:	2601      	movs	r6, #1
 8002a90:	408e      	lsls	r6, r1
 8002a92:	4661      	mov	r1, ip
 8002a94:	9600      	str	r6, [sp, #0]
 8002a96:	2900      	cmp	r1, #0
 8002a98:	d050      	beq.n	8002b3c <__divdi3+0x150>
 8002a9a:	07d9      	lsls	r1, r3, #31
 8002a9c:	0856      	lsrs	r6, r2, #1
 8002a9e:	085f      	lsrs	r7, r3, #1
 8002aa0:	430e      	orrs	r6, r1
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	e00e      	b.n	8002ac4 <__divdi3+0xd8>
 8002aa6:	42af      	cmp	r7, r5
 8002aa8:	d101      	bne.n	8002aae <__divdi3+0xc2>
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d80c      	bhi.n	8002ac8 <__divdi3+0xdc>
 8002aae:	1ba4      	subs	r4, r4, r6
 8002ab0:	41bd      	sbcs	r5, r7
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	1924      	adds	r4, r4, r4
 8002ab6:	416d      	adcs	r5, r5
 8002ab8:	2200      	movs	r2, #0
 8002aba:	3b01      	subs	r3, #1
 8002abc:	1864      	adds	r4, r4, r1
 8002abe:	4155      	adcs	r5, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <__divdi3+0xe6>
 8002ac4:	42af      	cmp	r7, r5
 8002ac6:	d9ee      	bls.n	8002aa6 <__divdi3+0xba>
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	1924      	adds	r4, r4, r4
 8002acc:	416d      	adcs	r5, r5
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f8      	bne.n	8002ac4 <__divdi3+0xd8>
 8002ad2:	9800      	ldr	r0, [sp, #0]
 8002ad4:	9901      	ldr	r1, [sp, #4]
 8002ad6:	465b      	mov	r3, fp
 8002ad8:	1900      	adds	r0, r0, r4
 8002ada:	4169      	adcs	r1, r5
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db3d      	blt.n	8002b5c <__divdi3+0x170>
 8002ae0:	002e      	movs	r6, r5
 8002ae2:	40de      	lsrs	r6, r3
 8002ae4:	4663      	mov	r3, ip
 8002ae6:	002c      	movs	r4, r5
 8002ae8:	40dc      	lsrs	r4, r3
 8002aea:	465b      	mov	r3, fp
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db4b      	blt.n	8002b88 <__divdi3+0x19c>
 8002af0:	0034      	movs	r4, r6
 8002af2:	465d      	mov	r5, fp
 8002af4:	40ac      	lsls	r4, r5
 8002af6:	0023      	movs	r3, r4
 8002af8:	4664      	mov	r4, ip
 8002afa:	40a6      	lsls	r6, r4
 8002afc:	0032      	movs	r2, r6
 8002afe:	1a80      	subs	r0, r0, r2
 8002b00:	4199      	sbcs	r1, r3
 8002b02:	e003      	b.n	8002b0c <__divdi3+0x120>
 8002b04:	42b2      	cmp	r2, r6
 8002b06:	d996      	bls.n	8002a36 <__divdi3+0x4a>
 8002b08:	2000      	movs	r0, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <__divdi3+0x130>
 8002b12:	0003      	movs	r3, r0
 8002b14:	000c      	movs	r4, r1
 8002b16:	2100      	movs	r1, #0
 8002b18:	4258      	negs	r0, r3
 8002b1a:	41a1      	sbcs	r1, r4
 8002b1c:	b003      	add	sp, #12
 8002b1e:	bc3c      	pop	{r2, r3, r4, r5}
 8002b20:	4690      	mov	r8, r2
 8002b22:	4699      	mov	r9, r3
 8002b24:	46a2      	mov	sl, r4
 8002b26:	46ab      	mov	fp, r5
 8002b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2a:	42b1      	cmp	r1, r6
 8002b2c:	d99e      	bls.n	8002a6c <__divdi3+0x80>
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2000      	movs	r0, #0
 8002b32:	9000      	str	r0, [sp, #0]
 8002b34:	9101      	str	r1, [sp, #4]
 8002b36:	4661      	mov	r1, ip
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d1ae      	bne.n	8002a9a <__divdi3+0xae>
 8002b3c:	9800      	ldr	r0, [sp, #0]
 8002b3e:	9901      	ldr	r1, [sp, #4]
 8002b40:	e7e4      	b.n	8002b0c <__divdi3+0x120>
 8002b42:	2320      	movs	r3, #32
 8002b44:	4662      	mov	r2, ip
 8002b46:	4651      	mov	r1, sl
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	40d9      	lsrs	r1, r3
 8002b4c:	4640      	mov	r0, r8
 8002b4e:	9100      	str	r1, [sp, #0]
 8002b50:	4661      	mov	r1, ip
 8002b52:	4088      	lsls	r0, r1
 8002b54:	0003      	movs	r3, r0
 8002b56:	9900      	ldr	r1, [sp, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	e780      	b.n	8002a5e <__divdi3+0x72>
 8002b5c:	4662      	mov	r2, ip
 8002b5e:	2320      	movs	r3, #32
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	002a      	movs	r2, r5
 8002b64:	409a      	lsls	r2, r3
 8002b66:	0026      	movs	r6, r4
 8002b68:	0013      	movs	r3, r2
 8002b6a:	4662      	mov	r2, ip
 8002b6c:	40d6      	lsrs	r6, r2
 8002b6e:	431e      	orrs	r6, r3
 8002b70:	e7b8      	b.n	8002ae4 <__divdi3+0xf8>
 8002b72:	4661      	mov	r1, ip
 8002b74:	2620      	movs	r6, #32
 8002b76:	2701      	movs	r7, #1
 8002b78:	1a76      	subs	r6, r6, r1
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	40f7      	lsrs	r7, r6
 8002b80:	9000      	str	r0, [sp, #0]
 8002b82:	9101      	str	r1, [sp, #4]
 8002b84:	9701      	str	r7, [sp, #4]
 8002b86:	e781      	b.n	8002a8c <__divdi3+0xa0>
 8002b88:	4667      	mov	r7, ip
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	4662      	mov	r2, ip
 8002b8e:	0035      	movs	r5, r6
 8002b90:	40bc      	lsls	r4, r7
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	40dd      	lsrs	r5, r3
 8002b96:	0023      	movs	r3, r4
 8002b98:	432b      	orrs	r3, r5
 8002b9a:	e7ad      	b.n	8002af8 <__divdi3+0x10c>

08002b9c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ba2:	003b      	movs	r3, r7
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	001a      	movs	r2, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f023 f9ac 	bl	8025f08 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <MX_ADC_Init+0xc4>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	05d2      	lsls	r2, r2, #23
 8002bc2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bde:	2220      	movs	r2, #32
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bf4:	22c2      	movs	r2, #194	; 0xc2
 8002bf6:	32ff      	adds	r2, #255	; 0xff
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bfc:	222c      	movs	r2, #44	; 0x2c
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c04:	2204      	movs	r2, #4
 8002c06:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f001 f87c 	bl	8003d20 <HAL_ADC_Init>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002c2c:	f000 fb04 	bl	8003238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002c30:	003b      	movs	r3, r7
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <MX_ADC_Init+0xc8>)
 8002c34:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c36:	003b      	movs	r3, r7
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0152      	lsls	r2, r2, #5
 8002c3c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c3e:	003a      	movs	r2, r7
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f001 f9df 	bl	8004008 <HAL_ADC_ConfigChannel>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002c4e:	f000 faf3 	bl	8003238 <Error_Handler>
  }

}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b002      	add	sp, #8
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	20001fb4 	.word	0x20001fb4
 8002c60:	40012400 	.word	0x40012400
 8002c64:	48040000 	.word	0x48040000

08002c68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <HAL_ADC_MspInit+0x28>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d106      	bne.n	8002c88 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_ADC_MspInit+0x2c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_ADC_MspInit+0x2c>)
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	0089      	lsls	r1, r1, #2
 8002c84:	430a      	orrs	r2, r1
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012400 	.word	0x40012400
 8002c94:	40021000 	.word	0x40021000

08002c98 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b08b      	sub	sp, #44	; 0x2c
 8002c9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	2414      	movs	r4, #20
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	2314      	movs	r3, #20
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f023 f92d 	bl	8025f08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4bae      	ldr	r3, [pc, #696]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb2:	4bad      	ldr	r3, [pc, #692]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cba:	4bab      	ldr	r3, [pc, #684]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4ba8      	ldr	r3, [pc, #672]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4ba7      	ldr	r3, [pc, #668]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002ccc:	2102      	movs	r1, #2
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd2:	4ba5      	ldr	r3, [pc, #660]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	4ba2      	ldr	r3, [pc, #648]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	4ba1      	ldr	r3, [pc, #644]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cea:	4b9f      	ldr	r3, [pc, #636]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf6:	4b9c      	ldr	r3, [pc, #624]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	4b9b      	ldr	r3, [pc, #620]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d02:	4b99      	ldr	r3, [pc, #612]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	4013      	ands	r3, r2
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d0e:	4997      	ldr	r1, [pc, #604]	; (8002f6c <MX_GPIO_Init+0x2d4>)
 8002d10:	23a0      	movs	r3, #160	; 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	2200      	movs	r2, #0
 8002d16:	0018      	movs	r0, r3
 8002d18:	f001 fd0a 	bl	8004730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002d1c:	4b94      	ldr	r3, [pc, #592]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	21e0      	movs	r1, #224	; 0xe0
 8002d22:	0018      	movs	r0, r3
 8002d24:	f001 fd04 	bl	8004730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002d28:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <MX_GPIO_Init+0x2dc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2107      	movs	r1, #7
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f001 fcfe 	bl	8004730 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	4a90      	ldr	r2, [pc, #576]	; (8002f78 <MX_GPIO_Init+0x2e0>)
 8002d38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	2202      	movs	r2, #2
 8002d4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	193a      	adds	r2, r7, r4
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f001 fb6d 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002d5a:	0021      	movs	r1, r4
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	22e0      	movs	r2, #224	; 0xe0
 8002d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2201      	movs	r2, #1
 8002d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	000c      	movs	r4, r1
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	4a7d      	ldr	r2, [pc, #500]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f001 fb59 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002d82:	0021      	movs	r1, r4
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	22f0      	movs	r2, #240	; 0xf0
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2203      	movs	r2, #3
 8002d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	4a74      	ldr	r2, [pc, #464]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f001 fb47 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	4a74      	ldr	r2, [pc, #464]	; (8002f7c <MX_GPIO_Init+0x2e4>)
 8002daa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	2203      	movs	r2, #3
 8002db0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	193a      	adds	r2, r7, r4
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f001 fb37 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002dc6:	193b      	adds	r3, r7, r4
 8002dc8:	2213      	movs	r2, #19
 8002dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	4a6c      	ldr	r2, [pc, #432]	; (8002f80 <MX_GPIO_Init+0x2e8>)
 8002dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002ddc:	0019      	movs	r1, r3
 8002dde:	0010      	movs	r0, r2
 8002de0:	f001 fb28 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002de4:	0021      	movs	r1, r4
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	0192      	lsls	r2, r2, #6
 8002dec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dee:	000c      	movs	r4, r1
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	4a63      	ldr	r2, [pc, #396]	; (8002f80 <MX_GPIO_Init+0x2e8>)
 8002df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <MX_GPIO_Init+0x2dc>)
 8002e00:	0019      	movs	r1, r3
 8002e02:	0010      	movs	r0, r2
 8002e04:	f001 fb16 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	2201      	movs	r2, #1
 8002e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	4a54      	ldr	r2, [pc, #336]	; (8002f74 <MX_GPIO_Init+0x2dc>)
 8002e24:	0019      	movs	r1, r3
 8002e26:	0010      	movs	r0, r2
 8002e28:	f001 fb04 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	2204      	movs	r2, #4
 8002e30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002e42:	0019      	movs	r1, r3
 8002e44:	0010      	movs	r0, r2
 8002e46:	f001 faf5 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	2201      	movs	r2, #1
 8002e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e62:	193a      	adds	r2, r7, r4
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 fae2 	bl	8004434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	2005      	movs	r0, #5
 8002e76:	f001 fa53 	bl	8004320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e7a:	2005      	movs	r0, #5
 8002e7c:	f001 fa65 	bl	800434a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	2007      	movs	r0, #7
 8002e86:	f001 fa4b 	bl	8004320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e8a:	2007      	movs	r0, #7
 8002e8c:	f001 fa5d 	bl	800434a <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <MX_GPIO_Init+0x2ec>)
 8002e94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	2203      	movs	r2, #3
 8002e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	193a      	adds	r2, r7, r4
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 fac2 	bl	8004434 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	2203      	movs	r2, #3
 8002eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	193a      	adds	r2, r7, r4
 8002ec4:	23a0      	movs	r3, #160	; 0xa0
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f001 fab2 	bl	8004434 <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002ed0:	0021      	movs	r1, r4
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2290      	movs	r2, #144	; 0x90
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	000c      	movs	r4, r1
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2201      	movs	r2, #1
 8002ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	193a      	adds	r2, r7, r4
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 fa9c 	bl	8004434 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b299      	uxth	r1, r3
 8002f02:	23a0      	movs	r3, #160	; 0xa0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	2200      	movs	r2, #0
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f001 fc11 	bl	8004730 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <MX_GPIO_Init+0x2f0>)
 8002f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	2201      	movs	r2, #1
 8002f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	f001 fa81 	bl	8004434 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	f001 fbf7 	bl	8004730 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	2203      	movs	r2, #3
 8002f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <MX_GPIO_Init+0x2f4>)
 8002f58:	0019      	movs	r1, r3
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	f001 fa6a 	bl	8004434 <HAL_GPIO_Init>
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b00b      	add	sp, #44	; 0x2c
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	00009022 	.word	0x00009022
 8002f70:	50000400 	.word	0x50000400
 8002f74:	50000800 	.word	0x50000800
 8002f78:	00009002 	.word	0x00009002
 8002f7c:	00006f11 	.word	0x00006f11
 8002f80:	10110000 	.word	0x10110000
 8002f84:	00006735 	.word	0x00006735
 8002f88:	00001004 	.word	0x00001004
 8002f8c:	50001c00 	.word	0x50001c00

08002f90 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4b32      	ldr	r3, [pc, #200]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fcc:	2104      	movs	r1, #4
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	4013      	ands	r3, r2
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2102      	movs	r1, #2
 8003000:	2000      	movs	r0, #0
 8003002:	f021 fccf 	bl	80249a4 <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	0219      	lsls	r1, r3, #8
 800300a:	2300      	movs	r3, #0
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2301      	movs	r3, #1
 8003010:	2201      	movs	r2, #1
 8003012:	2000      	movs	r0, #0
 8003014:	f021 fcc6 	bl	80249a4 <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	2200      	movs	r2, #0
 8003024:	2000      	movs	r0, #0
 8003026:	f021 fcbd 	bl	80249a4 <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2301      	movs	r3, #1
 8003030:	2207      	movs	r2, #7
 8003032:	2110      	movs	r1, #16
 8003034:	2001      	movs	r0, #1
 8003036:	f021 fcb5 	bl	80249a4 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2301      	movs	r3, #1
 8003040:	2207      	movs	r2, #7
 8003042:	2102      	movs	r1, #2
 8003044:	2001      	movs	r0, #1
 8003046:	f021 fcad 	bl	80249a4 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2301      	movs	r3, #1
 8003050:	2207      	movs	r2, #7
 8003052:	2101      	movs	r1, #1
 8003054:	2001      	movs	r0, #1
 8003056:	f021 fca5 	bl	80249a4 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	0199      	lsls	r1, r3, #6
 800305e:	2300      	movs	r3, #0
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2301      	movs	r3, #1
 8003064:	2207      	movs	r2, #7
 8003066:	2002      	movs	r0, #2
 8003068:	f021 fc9c 	bl	80249a4 <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	2005      	movs	r0, #5
 8003072:	f001 f955 	bl	8004320 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003076:	2005      	movs	r0, #5
 8003078:	f001 f967 	bl	800434a <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	2007      	movs	r0, #7
 8003082:	f001 f94d 	bl	8004320 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003086:	2007      	movs	r0, #7
 8003088:	f001 f95f 	bl	800434a <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin = LD4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <main_dbg_disable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void main_dbg_disable(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2203      	movs	r2, #3
 80030a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	22c0      	movs	r2, #192	; 0xc0
 80030ae:	01d2      	lsls	r2, r2, #7
 80030b0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030b2:	1d3a      	adds	r2, r7, #4
 80030b4:	23a0      	movs	r3, #160	; 0xa0
 80030b6:	05db      	lsls	r3, r3, #23
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f001 f9ba 	bl	8004434 <HAL_GPIO_Init>

    __HAL_RCC_DBGMCU_CLK_ENABLE();
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <main_dbg_disable+0x50>)
 80030c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <main_dbg_disable+0x50>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	03c9      	lsls	r1, r1, #15
 80030ca:	430a      	orrs	r2, r1
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_DBGMCU_DisableDBGStopMode();
 80030ce:	f000 fe19 	bl	8003d04 <HAL_DBGMCU_DisableDBGStopMode>
    __HAL_RCC_DBGMCU_CLK_DISABLE();
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <main_dbg_disable+0x50>)
 80030d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <main_dbg_disable+0x50>)
 80030d8:	4904      	ldr	r1, [pc, #16]	; (80030ec <main_dbg_disable+0x54>)
 80030da:	400a      	ands	r2, r1
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b006      	add	sp, #24
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	40021000 	.word	0x40021000
 80030ec:	ffbfffff 	.word	0xffbfffff

080030f0 <main>:
  */
extern uint8_t byte;
extern uint8_t tabToPrint[5];

int main(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030f4:	f000 fd6a 	bl	8003bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f8:	f000 f814 	bl	8003124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030fc:	f7ff fdcc 	bl	8002c98 <MX_GPIO_Init>
  MX_RTC_Init();
 8003100:	f000 f9c0 	bl	8003484 <MX_RTC_Init>
  MX_SPI1_Init();
 8003104:	f000 fa86 	bl	8003614 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8003108:	f000 fc80 	bl	8003a0c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800310c:	f000 fc4e 	bl	80039ac <MX_USART1_UART_Init>


//  MX_IWDG_Init();
  MX_ADC_Init();
 8003110:	f7ff fd44 	bl	8002b9c <MX_ADC_Init>
//  MX_TIM21_Init();

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8003114:	f020 fa90 	bl	8023638 <itsdk_setup>
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  /********desable debug module and pins (SWLCK & SWDIO)*******/
  /********         important for lowpower              ********/
  main_dbg_disable();
 8003118:	f7ff ffbe 	bl	8003098 <main_dbg_disable>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */


	 itsdk_loop();
 800311c:	f020 fac0 	bl	80236a0 <itsdk_loop>
 8003120:	e7fc      	b.n	800311c <main+0x2c>
	...

08003124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800312a:	2438      	movs	r4, #56	; 0x38
 800312c:	193b      	adds	r3, r7, r4
 800312e:	0018      	movs	r0, r3
 8003130:	2338      	movs	r3, #56	; 0x38
 8003132:	001a      	movs	r2, r3
 8003134:	2100      	movs	r1, #0
 8003136:	f022 fee7 	bl	8025f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800313a:	2324      	movs	r3, #36	; 0x24
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	0018      	movs	r0, r3
 8003140:	2314      	movs	r3, #20
 8003142:	001a      	movs	r2, r3
 8003144:	2100      	movs	r1, #0
 8003146:	f022 fedf 	bl	8025f08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800314a:	003b      	movs	r3, r7
 800314c:	0018      	movs	r0, r3
 800314e:	2324      	movs	r3, #36	; 0x24
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f022 fed8 	bl	8025f08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <SystemClock_Config+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a34      	ldr	r2, [pc, #208]	; (8003230 <SystemClock_Config+0x10c>)
 800315e:	401a      	ands	r2, r3
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <SystemClock_Config+0x108>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0109      	lsls	r1, r1, #4
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800316a:	f001 fb1b 	bl	80047a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <SystemClock_Config+0x110>)
 8003170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <SystemClock_Config+0x110>)
 8003174:	492e      	ldr	r1, [pc, #184]	; (8003230 <SystemClock_Config+0x10c>)
 8003176:	400a      	ands	r2, r1
 8003178:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800317a:	193b      	adds	r3, r7, r4
 800317c:	220e      	movs	r2, #14
 800317e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003180:	193b      	adds	r3, r7, r4
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	0052      	lsls	r2, r2, #1
 8003186:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003188:	0021      	movs	r1, r4
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2201      	movs	r2, #1
 800318e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2210      	movs	r2, #16
 8003194:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2201      	movs	r2, #1
 800319a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2202      	movs	r2, #2
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0312      	lsls	r2, r2, #12
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	0412      	lsls	r2, r2, #16
 80031b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	0018      	movs	r0, r3
 80031bc:	f001 fb50 	bl	8004860 <HAL_RCC_OscConfig>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d001      	beq.n	80031c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80031c4:	f000 f838 	bl	8003238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c8:	2124      	movs	r1, #36	; 0x24
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	220f      	movs	r2, #15
 80031ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2203      	movs	r2, #3
 80031d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2101      	movs	r1, #1
 80031ec:	0018      	movs	r0, r3
 80031ee:	f001 ff07 	bl	8005000 <HAL_RCC_ClockConfig>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d001      	beq.n	80031fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80031f6:	f000 f81f 	bl	8003238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80031fa:	003b      	movs	r3, r7
 80031fc:	2223      	movs	r2, #35	; 0x23
 80031fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003200:	003b      	movs	r3, r7
 8003202:	2208      	movs	r2, #8
 8003204:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003206:	003b      	movs	r3, r7
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800320c:	003b      	movs	r3, r7
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	0252      	lsls	r2, r2, #9
 8003212:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003214:	003b      	movs	r3, r7
 8003216:	0018      	movs	r0, r3
 8003218:	f002 f8d6 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d001      	beq.n	8003224 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8003220:	f000 f80a 	bl	8003238 <Error_Handler>
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
  	  Error_Handler();
    }*/

}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b01d      	add	sp, #116	; 0x74
 800322a:	bd90      	pop	{r4, r7, pc}
 800322c:	40007000 	.word	0x40007000
 8003230:	ffffe7ff 	.word	0xffffe7ff
 8003234:	40021000 	.word	0x40021000

08003238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <task>:
uint8_t readUart();
void resetMeasure(uint8_t * array, uint8_t size);
int measureUart;												//measure as int
/**************************/

void task() {
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0

	int measureValidity = readUart();
 800324a:	f000 f845 	bl	80032d8 <readUart>
 800324e:	0003      	movs	r3, r0
 8003250:	607b      	str	r3, [r7, #4]
	log_info("task measure : %d, measure validity : %d\n\r",measureUart, measureValidity);
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <task+0x24>)
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <task+0x28>)
 800325a:	0018      	movs	r0, r3
 800325c:	f020 f8f8 	bl	8023450 <log_info>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
		}
	}*/
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20002018 	.word	0x20002018
 800326c:	08027414 	.word	0x08027414

08003270 <project_setup>:
}

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 8003274:	f019 fd78 	bl	801cd68 <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <project_setup+0x44>)
 800327a:	0018      	movs	r0, r3
 800327c:	f020 f8e8 	bl	8023450 <log_info>
	itsdk_delayMs(2000);
 8003280:	23fa      	movs	r3, #250	; 0xfa
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	0018      	movs	r0, r3
 8003286:	f021 fed3 	bl	8025030 <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <project_setup+0x48>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <project_setup+0x4c>)
 8003290:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <project_setup+0x4c>)
 8003294:	2200      	movs	r2, #0
 8003296:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	2001      	movs	r0, #1
 800329c:	f021 fd84 	bl	8024da8 <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <project_setup+0x50>)
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4807      	ldr	r0, [pc, #28]	; (80032c4 <project_setup+0x54>)
 80032a8:	0019      	movs	r1, r3
 80032aa:	f020 fbe7 	bl	8023a7c <itdt_sched_registerSched>
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	080274dc 	.word	0x080274dc
 80032b8:	20000000 	.word	0x20000000
 80032bc:	20002010 	.word	0x20002010
 80032c0:	08003245 	.word	0x08003245
 80032c4:	00002710 	.word	0x00002710

080032c8 <project_loop>:

/****************************************************************************************
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 ****************************************************************************************/
void project_loop() {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
    itsdk_lorawan_loop();
 80032cc:	f020 f968 	bl	80235a0 <itsdk_lorawan_loop>

}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <readUart>:
//Test part
//========================================================================================

HAL_StatusTypeDef UART1status;
#define debugUart   1
uint8_t readUart(){
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef POWER_ACTIVE;
	  POWER_ACTIVE.Pin   = GPIO_PIN_11 ;
 80032de:	2408      	movs	r4, #8
 80032e0:	193b      	adds	r3, r7, r4
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	601a      	str	r2, [r3, #0]
	  POWER_ACTIVE.Mode  = GPIO_MODE_OUTPUT_PP;
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	2201      	movs	r2, #1
 80032ec:	605a      	str	r2, [r3, #4]


	 int measureAttempt = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
	 resetMeasure(&tabToPrint[0], 4); 							//Reset the return array
 80032f2:	4b46      	ldr	r3, [pc, #280]	; (800340c <readUart+0x134>)
 80032f4:	2104      	movs	r1, #4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f8a8 	bl	800344c <resetMeasure>
	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_SET);  //Set on the ultrasonic sensor
 80032fc:	193b      	adds	r3, r7, r4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b299      	uxth	r1, r3
 8003302:	23a0      	movs	r3, #160	; 0xa0
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	2201      	movs	r2, #1
 8003308:	0018      	movs	r0, r3
 800330a:	f001 fa11 	bl	8004730 <HAL_GPIO_WritePin>

	 log_info("Start the measure !\r\n");
 800330e:	4b40      	ldr	r3, [pc, #256]	; (8003410 <readUart+0x138>)
 8003310:	0018      	movs	r0, r3
 8003312:	f020 f89d 	bl	8023450 <log_info>
	 while(measureAttempt < 90){
 8003316:	e01c      	b.n	8003352 <readUart+0x7a>
	 	HAL_UART_Receive_IT(&huart1, &byte, 1); 				//start measure, result is into tabToPrint
 8003318:	493e      	ldr	r1, [pc, #248]	; (8003414 <readUart+0x13c>)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <readUart+0x140>)
 800331c:	2201      	movs	r2, #1
 800331e:	0018      	movs	r0, r3
 8003320:	f003 fbc8 	bl	8006ab4 <HAL_UART_Receive_IT>
	 	HAL_Delay(50);											//
 8003324:	2032      	movs	r0, #50	; 0x32
 8003326:	f000 fcaf 	bl	8003c88 <HAL_Delay>

		#if debugUart											//DEBUG
	 	log_info("Measure #%d : ", measureAttempt);				//Print all 90 measure
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	4b3b      	ldr	r3, [pc, #236]	; (800341c <readUart+0x144>)
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f020 f88d 	bl	8023450 <log_info>
	 		HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500); //
 8003336:	23fa      	movs	r3, #250	; 0xfa
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4934      	ldr	r1, [pc, #208]	; (800340c <readUart+0x134>)
 800333c:	4838      	ldr	r0, [pc, #224]	; (8003420 <readUart+0x148>)
 800333e:	2205      	movs	r2, #5
 8003340:	f003 fb10 	bl	8006964 <HAL_UART_Transmit>
	 		log_info("\n\r");									//
 8003344:	4b37      	ldr	r3, [pc, #220]	; (8003424 <readUart+0x14c>)
 8003346:	0018      	movs	r0, r3
 8003348:	f020 f882 	bl	8023450 <log_info>
		#endif
	 	measureAttempt++;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3301      	adds	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
	 while(measureAttempt < 90){
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b59      	cmp	r3, #89	; 0x59
 8003356:	dddf      	ble.n	8003318 <readUart+0x40>
	 }
	 #if debugUart												//DEBUG
	 	 log_info("\n\rWe measure ");							//Print final tabToPrin
 8003358:	4b33      	ldr	r3, [pc, #204]	; (8003428 <readUart+0x150>)
 800335a:	0018      	movs	r0, r3
 800335c:	f020 f878 	bl	8023450 <log_info>
	 	 HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500);	//
 8003360:	23fa      	movs	r3, #250	; 0xfa
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4929      	ldr	r1, [pc, #164]	; (800340c <readUart+0x134>)
 8003366:	482e      	ldr	r0, [pc, #184]	; (8003420 <readUart+0x148>)
 8003368:	2205      	movs	r2, #5
 800336a:	f003 fafb 	bl	8006964 <HAL_UART_Transmit>
	 	 log_info(" mm\r\n");									//
 800336e:	4b2f      	ldr	r3, [pc, #188]	; (800342c <readUart+0x154>)
 8003370:	0018      	movs	r0, r3
 8003372:	f020 f86d 	bl	8023450 <log_info>
	 #endif

	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_RESET);//PowerOff the sensor
 8003376:	2308      	movs	r3, #8
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b299      	uxth	r1, r3
 800337e:	23a0      	movs	r3, #160	; 0xa0
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	2200      	movs	r2, #0
 8003384:	0018      	movs	r0, r3
 8003386:	f001 f9d3 	bl	8004730 <HAL_GPIO_WritePin>

	 uint8_t tabToConvert[4];									//remove first 'R' char
	 tabToConvert[0] = tabToPrint[1];							//
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <readUart+0x134>)
 800338c:	785a      	ldrb	r2, [r3, #1]
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	701a      	strb	r2, [r3, #0]
	 tabToConvert[1] = tabToPrint[2];							//
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <readUart+0x134>)
 8003394:	789a      	ldrb	r2, [r3, #2]
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	705a      	strb	r2, [r3, #1]
	 tabToConvert[2] = tabToPrint[3];							//
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <readUart+0x134>)
 800339c:	78da      	ldrb	r2, [r3, #3]
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	709a      	strb	r2, [r3, #2]
	 tabToConvert[3] = tabToPrint[4];							//
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <readUart+0x134>)
 80033a4:	791a      	ldrb	r2, [r3, #4]
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	70da      	strb	r2, [r3, #3]


	 sscanf(tabToConvert, "%d", &measureUart);						//convert char[] to int
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <readUart+0x158>)
 80033ac:	4921      	ldr	r1, [pc, #132]	; (8003434 <readUart+0x15c>)
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	0018      	movs	r0, r3
 80033b2:	f022 fdb1 	bl	8025f18 <siscanf>
	 log_info("Final measure : %d", measureUart);					//print final measure
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <readUart+0x158>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <readUart+0x160>)
 80033bc:	0011      	movs	r1, r2
 80033be:	0018      	movs	r0, r3
 80033c0:	f020 f846 	bl	8023450 <log_info>

	 if(measureUart==0 || measureUart==500 || measureUart==5000 || measureUart == 4999){
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <readUart+0x158>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <readUart+0x114>
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <readUart+0x158>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	23fa      	movs	r3, #250	; 0xfa
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d009      	beq.n	80033ec <readUart+0x114>
 80033d8:	4b15      	ldr	r3, [pc, #84]	; (8003430 <readUart+0x158>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a17      	ldr	r2, [pc, #92]	; (800343c <readUart+0x164>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <readUart+0x114>
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <readUart+0x158>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a16      	ldr	r2, [pc, #88]	; (8003440 <readUart+0x168>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d105      	bne.n	80033f8 <readUart+0x120>
		 	 log_info(" Measure is not valid\r\n");
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <readUart+0x16c>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f020 f82e 	bl	8023450 <log_info>
	 		return 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e004      	b.n	8003402 <readUart+0x12a>
	 }else{
	 		log_info(" Measure is valid\r\n");
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <readUart+0x170>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f020 f828 	bl	8023450 <log_info>
	 		return 1;
 8003400:	2301      	movs	r3, #1
	 }

}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b009      	add	sp, #36	; 0x24
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	200023e8 	.word	0x200023e8
 8003410:	080274ec 	.word	0x080274ec
 8003414:	200023ed 	.word	0x200023ed
 8003418:	20002024 	.word	0x20002024
 800341c:	08027504 	.word	0x08027504
 8003420:	200021b4 	.word	0x200021b4
 8003424:	08027514 	.word	0x08027514
 8003428:	08027518 	.word	0x08027518
 800342c:	08027528 	.word	0x08027528
 8003430:	20002018 	.word	0x20002018
 8003434:	08027530 	.word	0x08027530
 8003438:	08027534 	.word	0x08027534
 800343c:	00001388 	.word	0x00001388
 8003440:	00001387 	.word	0x00001387
 8003444:	08027548 	.word	0x08027548
 8003448:	08027560 	.word	0x08027560

0800344c <resetMeasure>:



void resetMeasure(uint8_t * array, uint8_t size){
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	000a      	movs	r2, r1
 8003456:	1cfb      	adds	r3, r7, #3
 8003458:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e007      	b.n	8003470 <resetMeasure+0x24>
		array[i] = 0x30; //Set to 0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	18d3      	adds	r3, r2, r3
 8003466:	2230      	movs	r2, #48	; 0x30
 8003468:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3301      	adds	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	1cfb      	adds	r3, r7, #3
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	429a      	cmp	r2, r3
 8003478:	dbf2      	blt.n	8003460 <resetMeasure+0x14>
	}
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b004      	add	sp, #16
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b090      	sub	sp, #64	; 0x40
 8003488:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800348a:	232c      	movs	r3, #44	; 0x2c
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	0018      	movs	r0, r3
 8003490:	2314      	movs	r3, #20
 8003492:	001a      	movs	r2, r3
 8003494:	2100      	movs	r1, #0
 8003496:	f022 fd37 	bl	8025f08 <memset>
  RTC_DateTypeDef sDate = {0};
 800349a:	2328      	movs	r3, #40	; 0x28
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80034a2:	003b      	movs	r3, r7
 80034a4:	0018      	movs	r0, r3
 80034a6:	2328      	movs	r3, #40	; 0x28
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f022 fd2c 	bl	8025f08 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034b0:	4b46      	ldr	r3, [pc, #280]	; (80035cc <MX_RTC_Init+0x148>)
 80034b2:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <MX_RTC_Init+0x14c>)
 80034b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034b6:	4b45      	ldr	r3, [pc, #276]	; (80035cc <MX_RTC_Init+0x148>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034bc:	4b43      	ldr	r3, [pc, #268]	; (80035cc <MX_RTC_Init+0x148>)
 80034be:	227f      	movs	r2, #127	; 0x7f
 80034c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034c2:	4b42      	ldr	r3, [pc, #264]	; (80035cc <MX_RTC_Init+0x148>)
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034c8:	4b40      	ldr	r3, [pc, #256]	; (80035cc <MX_RTC_Init+0x148>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80034ce:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <MX_RTC_Init+0x148>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034d4:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <MX_RTC_Init+0x148>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034da:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <MX_RTC_Init+0x148>)
 80034dc:	2200      	movs	r2, #0
 80034de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034e0:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <MX_RTC_Init+0x148>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f002 f8c8 	bl	8005678 <HAL_RTC_Init>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d001      	beq.n	80034f0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80034ec:	f7ff fea4 	bl	8003238 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	2200      	movs	r2, #0
 80034fc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	2200      	movs	r2, #0
 8003502:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003510:	1879      	adds	r1, r7, r1
 8003512:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <MX_RTC_Init+0x148>)
 8003514:	2200      	movs	r2, #0
 8003516:	0018      	movs	r0, r3
 8003518:	f002 f94c 	bl	80057b4 <HAL_RTC_SetTime>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003520:	f7ff fe8a 	bl	8003238 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003524:	2128      	movs	r1, #40	; 0x28
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2201      	movs	r2, #1
 8003536:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2200      	movs	r2, #0
 800353c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800353e:	1879      	adds	r1, r7, r1
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <MX_RTC_Init+0x148>)
 8003542:	2200      	movs	r2, #0
 8003544:	0018      	movs	r0, r3
 8003546:	f002 fa55 	bl	80059f4 <HAL_RTC_SetDate>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800354e:	f7ff fe73 	bl	8003238 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003552:	003b      	movs	r3, r7
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003558:	003b      	movs	r3, r7
 800355a:	2200      	movs	r2, #0
 800355c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800355e:	003b      	movs	r3, r7
 8003560:	2200      	movs	r2, #0
 8003562:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003564:	003b      	movs	r3, r7
 8003566:	2200      	movs	r2, #0
 8003568:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800356a:	003b      	movs	r3, r7
 800356c:	2200      	movs	r2, #0
 800356e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003570:	003b      	movs	r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003576:	003b      	movs	r3, r7
 8003578:	2200      	movs	r2, #0
 800357a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800357c:	003b      	movs	r3, r7
 800357e:	22f0      	movs	r2, #240	; 0xf0
 8003580:	0512      	lsls	r2, r2, #20
 8003582:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003584:	003b      	movs	r3, r7
 8003586:	2200      	movs	r2, #0
 8003588:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800358a:	003b      	movs	r3, r7
 800358c:	2220      	movs	r2, #32
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003592:	003b      	movs	r3, r7
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0052      	lsls	r2, r2, #1
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800359a:	0039      	movs	r1, r7
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <MX_RTC_Init+0x148>)
 800359e:	2200      	movs	r2, #0
 80035a0:	0018      	movs	r0, r3
 80035a2:	f002 fb23 	bl	8005bec <HAL_RTC_SetAlarm_IT>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d001      	beq.n	80035ae <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80035aa:	f7ff fe45 	bl	8003238 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <MX_RTC_Init+0x148>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	0018      	movs	r0, r3
 80035b6:	f002 fd53 	bl	8006060 <HAL_RTCEx_SetWakeUpTimer_IT>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 80035be:	f7ff fe3b 	bl	8003238 <Error_Handler>
  }

}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b010      	add	sp, #64	; 0x40
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	200020a4 	.word	0x200020a4
 80035d0:	40002800 	.word	0x40002800

080035d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <HAL_RTC_MspInit+0x38>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10e      	bne.n	8003604 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RTC_MspInit+0x3c>)
 80035e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RTC_MspInit+0x3c>)
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	02c9      	lsls	r1, r1, #11
 80035f0:	430a      	orrs	r2, r1
 80035f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	2002      	movs	r0, #2
 80035fa:	f000 fe91 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80035fe:	2002      	movs	r0, #2
 8003600:	f000 fea3 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40002800 	.word	0x40002800
 8003610:	40021000 	.word	0x40021000

08003614 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <MX_SPI1_Init+0x68>)
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <MX_SPI1_Init+0x6c>)
 800361c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <MX_SPI1_Init+0x68>)
 8003620:	2282      	movs	r2, #130	; 0x82
 8003622:	0052      	lsls	r2, r2, #1
 8003624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <MX_SPI1_Init+0x68>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <MX_SPI1_Init+0x68>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <MX_SPI1_Init+0x68>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <MX_SPI1_Init+0x68>)
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <MX_SPI1_Init+0x68>)
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <MX_SPI1_Init+0x68>)
 8003648:	2220      	movs	r2, #32
 800364a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <MX_SPI1_Init+0x68>)
 800364e:	2200      	movs	r2, #0
 8003650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <MX_SPI1_Init+0x68>)
 8003654:	2200      	movs	r2, #0
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <MX_SPI1_Init+0x68>)
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <MX_SPI1_Init+0x68>)
 8003660:	2207      	movs	r2, #7
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <MX_SPI1_Init+0x68>)
 8003666:	0018      	movs	r0, r3
 8003668:	f002 fe54 	bl	8006314 <HAL_SPI_Init>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003670:	f7ff fde2 	bl	8003238 <Error_Handler>
  }

}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	20002120 	.word	0x20002120
 8003680:	40013000 	.word	0x40013000

08003684 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b08b      	sub	sp, #44	; 0x2c
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	2314      	movs	r3, #20
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	0018      	movs	r0, r3
 8003692:	2314      	movs	r3, #20
 8003694:	001a      	movs	r2, r3
 8003696:	2100      	movs	r1, #0
 8003698:	f022 fc36 	bl	8025f08 <memset>
  if(spiHandle->Instance==SPI1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <HAL_SPI_MspInit+0x124>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d14d      	bne.n	8003742 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036aa:	4b40      	ldr	r3, [pc, #256]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0149      	lsls	r1, r1, #5
 80036b0:	430a      	orrs	r2, r1
 80036b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b4:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036ba:	2102      	movs	r1, #2
 80036bc:	430a      	orrs	r2, r1
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
 80036c0:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	2202      	movs	r2, #2
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4b36      	ldr	r3, [pc, #216]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036d2:	2101      	movs	r1, #1
 80036d4:	430a      	orrs	r2, r1
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_SPI_MspInit+0x128>)
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2201      	movs	r2, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 80036e4:	2114      	movs	r1, #20
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2208      	movs	r2, #8
 80036ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	2202      	movs	r2, #2
 80036f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2203      	movs	r2, #3
 80036fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8003704:	000c      	movs	r4, r1
 8003706:	187b      	adds	r3, r7, r1
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <HAL_SPI_MspInit+0x12c>)
 800370a:	0019      	movs	r1, r3
 800370c:	0010      	movs	r0, r2
 800370e:	f000 fe91 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8003712:	0021      	movs	r1, r4
 8003714:	187b      	adds	r3, r7, r1
 8003716:	22c0      	movs	r2, #192	; 0xc0
 8003718:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	187b      	adds	r3, r7, r1
 800371c:	2202      	movs	r2, #2
 800371e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	187b      	adds	r3, r7, r1
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2203      	movs	r2, #3
 800372a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800372c:	187b      	adds	r3, r7, r1
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	187a      	adds	r2, r7, r1
 8003734:	23a0      	movs	r3, #160	; 0xa0
 8003736:	05db      	lsls	r3, r3, #23
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f000 fe7a 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003740:	e02e      	b.n	80037a0 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_SPI_MspInit+0x130>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d129      	bne.n	80037a0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_SPI_MspInit+0x128>)
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <HAL_SPI_MspInit+0x128>)
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	01c9      	lsls	r1, r1, #7
 8003756:	430a      	orrs	r2, r1
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_SPI_MspInit+0x128>)
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_SPI_MspInit+0x128>)
 8003760:	2102      	movs	r1, #2
 8003762:	430a      	orrs	r2, r1
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_SPI_MspInit+0x128>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8003772:	2114      	movs	r1, #20
 8003774:	187b      	adds	r3, r7, r1
 8003776:	22f0      	movs	r2, #240	; 0xf0
 8003778:	0212      	lsls	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377c:	187b      	adds	r3, r7, r1
 800377e:	2202      	movs	r2, #2
 8003780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2203      	movs	r2, #3
 800378c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800378e:	187b      	adds	r3, r7, r1
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003794:	187b      	adds	r3, r7, r1
 8003796:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <HAL_SPI_MspInit+0x12c>)
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f000 fe4a 	bl	8004434 <HAL_GPIO_Init>
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b00b      	add	sp, #44	; 0x2c
 80037a6:	bd90      	pop	{r4, r7, pc}
 80037a8:	40013000 	.word	0x40013000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	50000400 	.word	0x50000400
 80037b4:	40003800 	.word	0x40003800

080037b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_MspInit+0x24>)
 80037be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_MspInit+0x24>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_MspInit+0x24>)
 80037ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_MspInit+0x24>)
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	0549      	lsls	r1, r1, #21
 80037d2:	430a      	orrs	r2, r1
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000

080037e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ee:	e7fe      	b.n	80037ee <HardFault_Handler+0x4>

080037f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003808:	f022 fa76 	bl	8025cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <RTC_IRQHandler+0x1c>)
 800381a:	0018      	movs	r0, r3
 800381c:	f002 fb32 	bl	8005e84 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <RTC_IRQHandler+0x1c>)
 8003822:	0018      	movs	r0, r3
 8003824:	f002 fd44 	bl	80062b0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	200020a4 	.word	0x200020a4

08003834 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003838:	2001      	movs	r0, #1
 800383a:	f000 ff97 	bl	800476c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800383e:	2002      	movs	r0, #2
 8003840:	f000 ff94 	bl	800476c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800384e:	2010      	movs	r0, #16
 8003850:	f000 ff8c 	bl	800476c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	019b      	lsls	r3, r3, #6
 8003858:	0018      	movs	r0, r3
 800385a:	f000 ff87 	bl	800476c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <USART1_IRQHandler+0x14>)
 800386a:	0018      	movs	r0, r3
 800386c:	f003 f9da 	bl	8006c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	20002024 	.word	0x20002024

0800387c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <USART2_IRQHandler+0x14>)
 8003882:	0018      	movs	r0, r3
 8003884:	f003 f9ce 	bl	8006c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	200021b4 	.word	0x200021b4

08003894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <_sbrk+0x5c>)
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <_sbrk+0x60>)
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <_sbrk+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <_sbrk+0x64>)
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <_sbrk+0x68>)
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <_sbrk+0x64>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	18d3      	adds	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d207      	bcs.n	80038d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038c4:	f022 fada 	bl	8025e7c <__errno>
 80038c8:	0003      	movs	r3, r0
 80038ca:	220c      	movs	r2, #12
 80038cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	425b      	negs	r3, r3
 80038d2:	e009      	b.n	80038e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <_sbrk+0x64>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <_sbrk+0x64>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	18d2      	adds	r2, r2, r3
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <_sbrk+0x64>)
 80038e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b006      	add	sp, #24
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20005000 	.word	0x20005000
 80038f4:	00000400 	.word	0x00000400
 80038f8:	2000024c 	.word	0x2000024c
 80038fc:	20002448 	.word	0x20002448

08003900 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <SystemInit+0x64>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <SystemInit+0x64>)
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	0049      	lsls	r1, r1, #1
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <SystemInit+0x64>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <SystemInit+0x64>)
 8003918:	4913      	ldr	r1, [pc, #76]	; (8003968 <SystemInit+0x68>)
 800391a:	400a      	ands	r2, r1
 800391c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <SystemInit+0x64>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <SystemInit+0x64>)
 8003924:	4911      	ldr	r1, [pc, #68]	; (800396c <SystemInit+0x6c>)
 8003926:	400a      	ands	r2, r1
 8003928:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <SystemInit+0x64>)
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <SystemInit+0x64>)
 8003930:	2101      	movs	r1, #1
 8003932:	438a      	bics	r2, r1
 8003934:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <SystemInit+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <SystemInit+0x64>)
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <SystemInit+0x70>)
 800393e:	400a      	ands	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <SystemInit+0x64>)
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <SystemInit+0x64>)
 8003948:	490a      	ldr	r1, [pc, #40]	; (8003974 <SystemInit+0x74>)
 800394a:	400a      	ands	r2, r1
 800394c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <SystemInit+0x64>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <SystemInit+0x78>)
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	0512      	lsls	r2, r2, #20
 800395a:	609a      	str	r2, [r3, #8]
#endif
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	40021000 	.word	0x40021000
 8003968:	88ff400c 	.word	0x88ff400c
 800396c:	fef6fff6 	.word	0xfef6fff6
 8003970:	fffbffff 	.word	0xfffbffff
 8003974:	ff02ffff 	.word	0xff02ffff
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <HAL_TIM_Base_MspInit+0x28>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d105      	bne.n	800399a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_TIM_Base_MspInit+0x2c>)
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_TIM_Base_MspInit+0x2c>)
 8003994:	2104      	movs	r1, #4
 8003996:	430a      	orrs	r2, r1
 8003998:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	40010800 	.word	0x40010800
 80039a8:	40021000 	.word	0x40021000

080039ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <MX_USART1_UART_Init+0x5c>)
 80039b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039b8:	2296      	movs	r2, #150	; 0x96
 80039ba:	0192      	lsls	r2, r2, #6
 80039bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039d2:	220c      	movs	r2, #12
 80039d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <MX_USART1_UART_Init+0x58>)
 80039f0:	0018      	movs	r0, r3
 80039f2:	f002 ff63 	bl	80068bc <HAL_UART_Init>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039fa:	f7ff fc1d 	bl	8003238 <Error_Handler>
  }

}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20002024 	.word	0x20002024
 8003a08:	40013800 	.word	0x40013800

08003a0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <MX_USART2_UART_Init+0x5c>)
 8003a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a18:	2296      	movs	r2, #150	; 0x96
 8003a1a:	0192      	lsls	r2, r2, #6
 8003a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a1e:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a32:	220c      	movs	r2, #12
 8003a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <MX_USART2_UART_Init+0x58>)
 8003a50:	0018      	movs	r0, r3
 8003a52:	f002 ff33 	bl	80068bc <HAL_UART_Init>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d001      	beq.n	8003a5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a5a:	f7ff fbed 	bl	8003238 <Error_Handler>
  }

}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200021b4 	.word	0x200021b4
 8003a68:	40004400 	.word	0x40004400

08003a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	2314      	movs	r3, #20
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	0018      	movs	r0, r3
 8003a7a:	2314      	movs	r3, #20
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	2100      	movs	r1, #0
 8003a80:	f022 fa42 	bl	8025f08 <memset>
  if(uartHandle->Instance==USART1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a38      	ldr	r2, [pc, #224]	; (8003b6c <HAL_UART_MspInit+0x100>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d133      	bne.n	8003af6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	01c9      	lsls	r1, r1, #7
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9c:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa8:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003ab4:	2114      	movs	r1, #20
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	22c0      	movs	r2, #192	; 0xc0
 8003aba:	00d2      	lsls	r2, r2, #3
 8003abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2203      	movs	r2, #3
 8003ace:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	187a      	adds	r2, r7, r1
 8003ad8:	23a0      	movs	r3, #160	; 0xa0
 8003ada:	05db      	lsls	r3, r3, #23
 8003adc:	0011      	movs	r1, r2
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 fca8 	bl	8004434 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	201b      	movs	r0, #27
 8003aea:	f000 fc19 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aee:	201b      	movs	r0, #27
 8003af0:	f000 fc2b 	bl	800434a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003af4:	e036      	b.n	8003b64 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_UART_MspInit+0x108>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d131      	bne.n	8003b64 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	0289      	lsls	r1, r1, #10
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_UART_MspInit+0x104>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003b26:	2114      	movs	r1, #20
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	2202      	movs	r2, #2
 8003b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2204      	movs	r2, #4
 8003b44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b46:	187a      	adds	r2, r7, r1
 8003b48:	23a0      	movs	r3, #160	; 0xa0
 8003b4a:	05db      	lsls	r3, r3, #23
 8003b4c:	0011      	movs	r1, r2
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fc70 	bl	8004434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2100      	movs	r1, #0
 8003b58:	201c      	movs	r0, #28
 8003b5a:	f000 fbe1 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b5e:	201c      	movs	r0, #28
 8003b60:	f000 fbf3 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b00a      	add	sp, #40	; 0x28
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40004400 	.word	0x40004400

08003b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b78:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b7e:	e003      	b.n	8003b88 <LoopCopyDataInit>

08003b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b86:	3104      	adds	r1, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b88:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <LoopForever+0xe>)
  adds  r2, r0, r1
 8003b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b90:	d3f6      	bcc.n	8003b80 <CopyDataInit>
  ldr  r2, =_sbss
 8003b92:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003b94:	e002      	b.n	8003b9c <LoopFillZerobss>

08003b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003b96:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b98:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9a:	3204      	adds	r2, #4

08003b9c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <LoopForever+0x16>)
  cmp  r2, r3
 8003b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ba0:	d3f9      	bcc.n	8003b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ba2:	f7ff fead 	bl	8003900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ba6:	f022 f96f 	bl	8025e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003baa:	f7ff faa1 	bl	80030f0 <main>

08003bae <LoopForever>:

LoopForever:
    b LoopForever
 8003bae:	e7fe      	b.n	8003bae <LoopForever>
   ldr   r0, =_estack
 8003bb0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003bb4:	08029e54 	.word	0x08029e54
  ldr  r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bbc:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 8003bc0:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 8003bc4:	20002444 	.word	0x20002444

08003bc8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc8:	e7fe      	b.n	8003bc8 <ADC1_COMP_IRQHandler>
	...

08003bcc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_Init+0x3c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_Init+0x3c>)
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003be4:	2000      	movs	r0, #0
 8003be6:	f000 f811 	bl	8003c0c <HAL_InitTick>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e001      	b.n	8003bfa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bf6:	f7ff fddf 	bl	80037b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	781b      	ldrb	r3, [r3, #0]
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	40022000 	.word	0x40022000

08003c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_InitTick+0x5c>)
 8003c16:	681c      	ldr	r4, [r3, #0]
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_InitTick+0x60>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	23fa      	movs	r3, #250	; 0xfa
 8003c20:	0098      	lsls	r0, r3, #2
 8003c22:	f7fc fa79 	bl	8000118 <__udivsi3>
 8003c26:	0003      	movs	r3, r0
 8003c28:	0019      	movs	r1, r3
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	f7fc fa74 	bl	8000118 <__udivsi3>
 8003c30:	0003      	movs	r3, r0
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 fba9 	bl	800438a <HAL_SYSTICK_Config>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e00f      	b.n	8003c60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d80b      	bhi.n	8003c5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 fb66 	bl	8004320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_InitTick+0x64>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b003      	add	sp, #12
 8003c66:	bd90      	pop	{r4, r7, pc}
 8003c68:	20000004 	.word	0x20000004
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	20000008 	.word	0x20000008

08003c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <HAL_GetTick+0x10>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	20002234 	.word	0x20002234

08003c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c90:	f7ff fff0 	bl	8003c74 <HAL_GetTick>
 8003c94:	0003      	movs	r3, r0
 8003c96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	d005      	beq.n	8003cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_Delay+0x40>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	f7ff ffe0 	bl	8003c74 <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d8f7      	bhi.n	8003cb0 <HAL_Delay+0x28>
  {
  }
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b004      	add	sp, #16
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2000000c 	.word	0x2000000c

08003ccc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_SuspendTick+0x18>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_SuspendTick+0x18>)
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	438a      	bics	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	e000e010 	.word	0xe000e010

08003ce8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_ResumeTick+0x18>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_ResumeTick+0x18>)
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	e000e010 	.word	0xe000e010

08003d04 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003d0e:	2102      	movs	r1, #2
 8003d10:	438a      	bics	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	40015800 	.word	0x40015800

08003d20 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e159      	b.n	8003fe6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2250      	movs	r2, #80	; 0x50
 8003d44:	2100      	movs	r1, #0
 8003d46:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fe ff8c 	bl	8002c68 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	2210      	movs	r2, #16
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d005      	beq.n	8003d68 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2204      	movs	r2, #4
 8003d64:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d66:	d00b      	beq.n	8003d80 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e132      	b.n	8003fe6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	4a9a      	ldr	r2, [pc, #616]	; (8003ff0 <HAL_ADC_Init+0x2d0>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	2202      	movs	r2, #2
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2203      	movs	r2, #3
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_ADC_Init+0x90>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_Init+0x90>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_ADC_Init+0x92>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d149      	bne.n	8003e4a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	23c0      	movs	r3, #192	; 0xc0
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d00b      	beq.n	8003dda <HAL_ADC_Init+0xba>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	05db      	lsls	r3, r3, #23
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d005      	beq.n	8003dda <HAL_ADC_Init+0xba>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d111      	bne.n	8003dfe <HAL_ADC_Init+0xde>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	0892      	lsrs	r2, r2, #2
 8003de8:	611a      	str	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6919      	ldr	r1, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	611a      	str	r2, [r3, #16]
 8003dfc:	e014      	b.n	8003e28 <HAL_ADC_Init+0x108>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	0892      	lsrs	r2, r2, #2
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	4b79      	ldr	r3, [pc, #484]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e14:	4978      	ldr	r1, [pc, #480]	; (8003ff8 <HAL_ADC_Init+0x2d8>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2118      	movs	r1, #24
 8003e34:	438a      	bics	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68d9      	ldr	r1, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e50:	496a      	ldr	r1, [pc, #424]	; (8003ffc <HAL_ADC_Init+0x2dc>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003e56:	4b67      	ldr	r3, [pc, #412]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	065a      	lsls	r2, r3, #25
 8003e60:	4b64      	ldr	r3, [pc, #400]	; (8003ff4 <HAL_ADC_Init+0x2d4>)
 8003e62:	430a      	orrs	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	055b      	lsls	r3, r3, #21
 8003e70:	4013      	ands	r3, r2
 8003e72:	d108      	bne.n	8003e86 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	0549      	lsls	r1, r1, #21
 8003e82:	430a      	orrs	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	495b      	ldr	r1, [pc, #364]	; (8004000 <HAL_ADC_Init+0x2e0>)
 8003e92:	400a      	ands	r2, r1
 8003e94:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68d9      	ldr	r1, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_Init+0x18c>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	e000      	b.n	8003eae <HAL_ADC_Init+0x18e>
 8003eac:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003eae:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2020      	movs	r0, #32
 8003eb4:	5c1b      	ldrb	r3, [r3, r0]
 8003eb6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003eb8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	202c      	movs	r0, #44	; 0x2c
 8003ebe:	5c1b      	ldrb	r3, [r3, r0]
 8003ec0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ec2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003ec8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003ed0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ed8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee6:	23c2      	movs	r3, #194	; 0xc2
 8003ee8:	33ff      	adds	r3, #255	; 0xff
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d00b      	beq.n	8003f06 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2221      	movs	r2, #33	; 0x21
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d11a      	bne.n	8003f46 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	5c9b      	ldrb	r3, [r3, r2]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	0249      	lsls	r1, r1, #9
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	e00b      	b.n	8003f46 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	2220      	movs	r2, #32
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	2201      	movs	r2, #1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d11f      	bne.n	8003f8e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	492a      	ldr	r1, [pc, #168]	; (8004004 <HAL_ADC_Init+0x2e4>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6919      	ldr	r1, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f6c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003f72:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2101      	movs	r1, #1
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	611a      	str	r2, [r3, #16]
 8003f8c:	e00e      	b.n	8003fac <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2201      	movs	r2, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	438a      	bics	r2, r1
 8003faa:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2107      	movs	r1, #7
 8003fb8:	438a      	bics	r2, r1
 8003fba:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6959      	ldr	r1, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	2203      	movs	r2, #3
 8003fda:	4393      	bics	r3, r2
 8003fdc:	2201      	movs	r2, #1
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b002      	add	sp, #8
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	fffffefd 	.word	0xfffffefd
 8003ff4:	40012708 	.word	0x40012708
 8003ff8:	ffc3ffff 	.word	0xffc3ffff
 8003ffc:	fdffffff 	.word	0xfdffffff
 8004000:	fffe0219 	.word	0xfffe0219
 8004004:	fffffc03 	.word	0xfffffc03

08004008 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2250      	movs	r2, #80	; 0x50
 8004016:	5c9b      	ldrb	r3, [r3, r2]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x18>
 800401c:	2302      	movs	r3, #2
 800401e:	e06c      	b.n	80040fa <HAL_ADC_ConfigChannel+0xf2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2250      	movs	r2, #80	; 0x50
 8004024:	2101      	movs	r1, #1
 8004026:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2204      	movs	r2, #4
 8004030:	4013      	ands	r3, r2
 8004032:	d00b      	beq.n	800404c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	2220      	movs	r2, #32
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2250      	movs	r2, #80	; 0x50
 8004044:	2100      	movs	r1, #0
 8004046:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e056      	b.n	80040fa <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <HAL_ADC_ConfigChannel+0xfc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d028      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	035b      	lsls	r3, r3, #13
 8004062:	0b5a      	lsrs	r2, r3, #13
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	02db      	lsls	r3, r3, #11
 8004074:	4013      	ands	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	0409      	lsls	r1, r1, #16
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004086:	200a      	movs	r0, #10
 8004088:	f000 f844 	bl	8004114 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	029b      	lsls	r3, r3, #10
 8004094:	4013      	ands	r3, r2
 8004096:	d02b      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	03c9      	lsls	r1, r1, #15
 80040a2:	430a      	orrs	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e023      	b.n	80040f0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	035b      	lsls	r3, r3, #13
 80040b4:	0b5b      	lsrs	r3, r3, #13
 80040b6:	43d9      	mvns	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	400a      	ands	r2, r1
 80040be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	02db      	lsls	r3, r3, #11
 80040c8:	4013      	ands	r3, r2
 80040ca:	d005      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 80040d2:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_ADC_ConfigChannel+0x104>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	029b      	lsls	r3, r3, #10
 80040e0:	4013      	ands	r3, r2
 80040e2:	d005      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_ADC_ConfigChannel+0x100>)
 80040ea:	4909      	ldr	r1, [pc, #36]	; (8004110 <HAL_ADC_ConfigChannel+0x108>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2250      	movs	r2, #80	; 0x50
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	00001001 	.word	0x00001001
 8004108:	40012708 	.word	0x40012708
 800410c:	ff7fffff 	.word	0xff7fffff
 8004110:	ffbfffff 	.word	0xffbfffff

08004114 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <ADC_DelayMicroSecond+0x34>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	490a      	ldr	r1, [pc, #40]	; (800414c <ADC_DelayMicroSecond+0x38>)
 8004122:	0018      	movs	r0, r3
 8004124:	f7fb fff8 	bl	8000118 <__udivsi3>
 8004128:	0003      	movs	r3, r0
 800412a:	001a      	movs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4353      	muls	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004132:	e002      	b.n	800413a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b004      	add	sp, #16
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000004 	.word	0x20000004
 800414c:	000f4240 	.word	0x000f4240

08004150 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_ADCEx_EnableVREFINT+0x4c>)
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	0049      	lsls	r1, r1, #1
 8004164:	430a      	orrs	r2, r1
 8004166:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004168:	f7ff fd84 	bl	8003c74 <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004170:	e008      	b.n	8004184 <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8004172:	f7ff fd7f 	bl	8003c74 <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b03      	cmp	r3, #3
 800417e:	d901      	bls.n	8004184 <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e006      	b.n	8004192 <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004186:	6a1a      	ldr	r2, [r3, #32]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	05db      	lsls	r3, r3, #23
 800418c:	4013      	ands	r3, r2
 800418e:	d0f0      	beq.n	8004172 <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	40010000 	.word	0x40010000

080041a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	0002      	movs	r2, r0
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041ac:	1dfb      	adds	r3, r7, #7
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	001a      	movs	r2, r3
 80041b2:	231f      	movs	r3, #31
 80041b4:	401a      	ands	r2, r3
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <NVIC_EnableIRQ+0x28>)
 80041b8:	2101      	movs	r1, #1
 80041ba:	4091      	lsls	r1, r2
 80041bc:	000a      	movs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	e000e100 	.word	0xe000e100

080041cc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	0002      	movs	r2, r0
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041d8:	1dfb      	adds	r3, r7, #7
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	001a      	movs	r2, r3
 80041de:	231f      	movs	r3, #31
 80041e0:	4013      	ands	r3, r2
 80041e2:	4905      	ldr	r1, [pc, #20]	; (80041f8 <NVIC_DisableIRQ+0x2c>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	0013      	movs	r3, r2
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	508b      	str	r3, [r1, r2]
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b002      	add	sp, #8
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	e000e100 	.word	0xe000e100

080041fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	0002      	movs	r2, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	1dfb      	adds	r3, r7, #7
 8004208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b7f      	cmp	r3, #127	; 0x7f
 8004210:	d932      	bls.n	8004278 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004212:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <NVIC_SetPriority+0xd4>)
 8004214:	1dfb      	adds	r3, r7, #7
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	0019      	movs	r1, r3
 800421a:	230f      	movs	r3, #15
 800421c:	400b      	ands	r3, r1
 800421e:	3b08      	subs	r3, #8
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	3306      	adds	r3, #6
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	18d3      	adds	r3, r2, r3
 8004228:	3304      	adds	r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	1dfa      	adds	r2, r7, #7
 800422e:	7812      	ldrb	r2, [r2, #0]
 8004230:	0011      	movs	r1, r2
 8004232:	2203      	movs	r2, #3
 8004234:	400a      	ands	r2, r1
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	21ff      	movs	r1, #255	; 0xff
 800423a:	4091      	lsls	r1, r2
 800423c:	000a      	movs	r2, r1
 800423e:	43d2      	mvns	r2, r2
 8004240:	401a      	ands	r2, r3
 8004242:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	019b      	lsls	r3, r3, #6
 8004248:	22ff      	movs	r2, #255	; 0xff
 800424a:	401a      	ands	r2, r3
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	0018      	movs	r0, r3
 8004252:	2303      	movs	r3, #3
 8004254:	4003      	ands	r3, r0
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800425a:	481d      	ldr	r0, [pc, #116]	; (80042d0 <NVIC_SetPriority+0xd4>)
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	001c      	movs	r4, r3
 8004262:	230f      	movs	r3, #15
 8004264:	4023      	ands	r3, r4
 8004266:	3b08      	subs	r3, #8
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	430a      	orrs	r2, r1
 800426c:	3306      	adds	r3, #6
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	18c3      	adds	r3, r0, r3
 8004272:	3304      	adds	r3, #4
 8004274:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004276:	e027      	b.n	80042c8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004278:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <NVIC_SetPriority+0xd8>)
 800427a:	1dfb      	adds	r3, r7, #7
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	b25b      	sxtb	r3, r3
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	33c0      	adds	r3, #192	; 0xc0
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	589b      	ldr	r3, [r3, r2]
 8004288:	1dfa      	adds	r2, r7, #7
 800428a:	7812      	ldrb	r2, [r2, #0]
 800428c:	0011      	movs	r1, r2
 800428e:	2203      	movs	r2, #3
 8004290:	400a      	ands	r2, r1
 8004292:	00d2      	lsls	r2, r2, #3
 8004294:	21ff      	movs	r1, #255	; 0xff
 8004296:	4091      	lsls	r1, r2
 8004298:	000a      	movs	r2, r1
 800429a:	43d2      	mvns	r2, r2
 800429c:	401a      	ands	r2, r3
 800429e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	019b      	lsls	r3, r3, #6
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	401a      	ands	r2, r3
 80042a8:	1dfb      	adds	r3, r7, #7
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	0018      	movs	r0, r3
 80042ae:	2303      	movs	r3, #3
 80042b0:	4003      	ands	r3, r0
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042b6:	4807      	ldr	r0, [pc, #28]	; (80042d4 <NVIC_SetPriority+0xd8>)
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	430a      	orrs	r2, r1
 80042c2:	33c0      	adds	r3, #192	; 0xc0
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	501a      	str	r2, [r3, r0]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b003      	add	sp, #12
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	e000ed00 	.word	0xe000ed00
 80042d4:	e000e100 	.word	0xe000e100

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <SysTick_Config+0x40>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ea:	2301      	movs	r3, #1
 80042ec:	e010      	b.n	8004310 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <SysTick_Config+0x44>)
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	3a01      	subs	r2, #1
 80042f4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f6:	2301      	movs	r3, #1
 80042f8:	425b      	negs	r3, r3
 80042fa:	2103      	movs	r1, #3
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff ff7d 	bl	80041fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <SysTick_Config+0x44>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <SysTick_Config+0x44>)
 800430a:	2207      	movs	r2, #7
 800430c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800430e:	2300      	movs	r3, #0
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}
 8004318:	00ffffff 	.word	0x00ffffff
 800431c:	e000e010 	.word	0xe000e010

08004320 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	210f      	movs	r1, #15
 800432c:	187b      	adds	r3, r7, r1
 800432e:	1c02      	adds	r2, r0, #0
 8004330:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	187b      	adds	r3, r7, r1
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff ff5d 	bl	80041fc <NVIC_SetPriority>
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	0002      	movs	r2, r0
 8004352:	1dfb      	adds	r3, r7, #7
 8004354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004356:	1dfb      	adds	r3, r7, #7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b25b      	sxtb	r3, r3
 800435c:	0018      	movs	r0, r3
 800435e:	f7ff ff1f 	bl	80041a0 <NVIC_EnableIRQ>
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b002      	add	sp, #8
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	0002      	movs	r2, r0
 8004372:	1dfb      	adds	r3, r7, #7
 8004374:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b25b      	sxtb	r3, r3
 800437c:	0018      	movs	r0, r3
 800437e:	f7ff ff25 	bl	80041cc <NVIC_DisableIRQ>
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b002      	add	sp, #8
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff ff9f 	bl	80042d8 <SysTick_Config>
 800439a:	0003      	movs	r3, r0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b002      	add	sp, #8
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	230f      	movs	r3, #15
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2225      	movs	r2, #37	; 0x25
 80043b8:	5c9b      	ldrb	r3, [r3, r2]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d007      	beq.n	80043d0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2204      	movs	r2, #4
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043c6:	230f      	movs	r3, #15
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e02a      	b.n	8004426 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	210e      	movs	r1, #14
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2101      	movs	r1, #1
 80043ec:	438a      	bics	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	221c      	movs	r2, #28
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2101      	movs	r1, #1
 80043fe:	4091      	lsls	r1, r2
 8004400:	000a      	movs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2225      	movs	r2, #37	; 0x25
 8004408:	2101      	movs	r1, #1
 800440a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	2100      	movs	r1, #0
 8004412:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	0010      	movs	r0, r2
 8004424:	4798      	blx	r3
    }
  }
  return status;
 8004426:	230f      	movs	r3, #15
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b004      	add	sp, #16
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800444a:	e155      	b.n	80046f8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4091      	lsls	r1, r2
 8004456:	000a      	movs	r2, r1
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d100      	bne.n	8004464 <HAL_GPIO_Init+0x30>
 8004462:	e146      	b.n	80046f2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d00b      	beq.n	8004484 <HAL_GPIO_Init+0x50>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d007      	beq.n	8004484 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004478:	2b11      	cmp	r3, #17
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b12      	cmp	r3, #18
 8004482:	d130      	bne.n	80044e6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	409a      	lsls	r2, r3
 8004492:	0013      	movs	r3, r2
 8004494:	43da      	mvns	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	409a      	lsls	r2, r3
 80044a6:	0013      	movs	r3, r2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ba:	2201      	movs	r2, #1
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	409a      	lsls	r2, r3
 80044c0:	0013      	movs	r3, r2
 80044c2:	43da      	mvns	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	2201      	movs	r2, #1
 80044d2:	401a      	ands	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	409a      	lsls	r2, r3
 80044d8:	0013      	movs	r3, r2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	409a      	lsls	r2, r3
 80044f4:	0013      	movs	r3, r2
 80044f6:	43da      	mvns	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	409a      	lsls	r2, r3
 8004508:	0013      	movs	r3, r2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0xf2>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b12      	cmp	r3, #18
 8004524:	d123      	bne.n	800456e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3208      	adds	r2, #8
 800452e:	0092      	lsls	r2, r2, #2
 8004530:	58d3      	ldr	r3, [r2, r3]
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2207      	movs	r2, #7
 8004538:	4013      	ands	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	220f      	movs	r2, #15
 800453e:	409a      	lsls	r2, r3
 8004540:	0013      	movs	r3, r2
 8004542:	43da      	mvns	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2107      	movs	r1, #7
 8004552:	400b      	ands	r3, r1
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	409a      	lsls	r2, r3
 8004558:	0013      	movs	r3, r2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	08da      	lsrs	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3208      	adds	r2, #8
 8004568:	0092      	lsls	r2, r2, #2
 800456a:	6939      	ldr	r1, [r7, #16]
 800456c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2203      	movs	r2, #3
 800457a:	409a      	lsls	r2, r3
 800457c:	0013      	movs	r3, r2
 800457e:	43da      	mvns	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2203      	movs	r2, #3
 800458c:	401a      	ands	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	0013      	movs	r3, r2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	055b      	lsls	r3, r3, #21
 80045aa:	4013      	ands	r3, r2
 80045ac:	d100      	bne.n	80045b0 <HAL_GPIO_Init+0x17c>
 80045ae:	e0a0      	b.n	80046f2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_GPIO_Init+0x2dc>)
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	4b56      	ldr	r3, [pc, #344]	; (8004710 <HAL_GPIO_Init+0x2dc>)
 80045b6:	2101      	movs	r1, #1
 80045b8:	430a      	orrs	r2, r1
 80045ba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80045bc:	4a55      	ldr	r2, [pc, #340]	; (8004714 <HAL_GPIO_Init+0x2e0>)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	089b      	lsrs	r3, r3, #2
 80045c2:	3302      	adds	r3, #2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	589b      	ldr	r3, [r3, r2]
 80045c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2203      	movs	r2, #3
 80045ce:	4013      	ands	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	220f      	movs	r2, #15
 80045d4:	409a      	lsls	r2, r3
 80045d6:	0013      	movs	r3, r2
 80045d8:	43da      	mvns	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	23a0      	movs	r3, #160	; 0xa0
 80045e4:	05db      	lsls	r3, r3, #23
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d01f      	beq.n	800462a <HAL_GPIO_Init+0x1f6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4a      	ldr	r2, [pc, #296]	; (8004718 <HAL_GPIO_Init+0x2e4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d019      	beq.n	8004626 <HAL_GPIO_Init+0x1f2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a49      	ldr	r2, [pc, #292]	; (800471c <HAL_GPIO_Init+0x2e8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_GPIO_Init+0x1ee>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a48      	ldr	r2, [pc, #288]	; (8004720 <HAL_GPIO_Init+0x2ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00d      	beq.n	800461e <HAL_GPIO_Init+0x1ea>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a47      	ldr	r2, [pc, #284]	; (8004724 <HAL_GPIO_Init+0x2f0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <HAL_GPIO_Init+0x1e6>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a46      	ldr	r2, [pc, #280]	; (8004728 <HAL_GPIO_Init+0x2f4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <HAL_GPIO_Init+0x1e2>
 8004612:	2305      	movs	r3, #5
 8004614:	e00a      	b.n	800462c <HAL_GPIO_Init+0x1f8>
 8004616:	2306      	movs	r3, #6
 8004618:	e008      	b.n	800462c <HAL_GPIO_Init+0x1f8>
 800461a:	2304      	movs	r3, #4
 800461c:	e006      	b.n	800462c <HAL_GPIO_Init+0x1f8>
 800461e:	2303      	movs	r3, #3
 8004620:	e004      	b.n	800462c <HAL_GPIO_Init+0x1f8>
 8004622:	2302      	movs	r3, #2
 8004624:	e002      	b.n	800462c <HAL_GPIO_Init+0x1f8>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_GPIO_Init+0x1f8>
 800462a:	2300      	movs	r3, #0
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	2103      	movs	r1, #3
 8004630:	400a      	ands	r2, r1
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	4093      	lsls	r3, r2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800463c:	4935      	ldr	r1, [pc, #212]	; (8004714 <HAL_GPIO_Init+0x2e0>)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	3302      	adds	r3, #2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800464a:	4b38      	ldr	r3, [pc, #224]	; (800472c <HAL_GPIO_Init+0x2f8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43da      	mvns	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	4013      	ands	r3, r2
 8004664:	d003      	beq.n	800466e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_GPIO_Init+0x2f8>)
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_GPIO_Init+0x2f8>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43da      	mvns	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	029b      	lsls	r3, r3, #10
 800468c:	4013      	ands	r3, r2
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004698:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_GPIO_Init+0x2f8>)
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469e:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_GPIO_Init+0x2f8>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43da      	mvns	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	035b      	lsls	r3, r3, #13
 80046b6:	4013      	ands	r3, r2
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_GPIO_Init+0x2f8>)
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_GPIO_Init+0x2f8>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	43da      	mvns	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	039b      	lsls	r3, r3, #14
 80046e0:	4013      	ands	r3, r2
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_GPIO_Init+0x2f8>)
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	40da      	lsrs	r2, r3
 8004700:	1e13      	subs	r3, r2, #0
 8004702:	d000      	beq.n	8004706 <HAL_GPIO_Init+0x2d2>
 8004704:	e6a2      	b.n	800444c <HAL_GPIO_Init+0x18>
  }
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b006      	add	sp, #24
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40021000 	.word	0x40021000
 8004714:	40010000 	.word	0x40010000
 8004718:	50000400 	.word	0x50000400
 800471c:	50000800 	.word	0x50000800
 8004720:	50000c00 	.word	0x50000c00
 8004724:	50001000 	.word	0x50001000
 8004728:	50001c00 	.word	0x50001c00
 800472c:	40010400 	.word	0x40010400

08004730 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	0008      	movs	r0, r1
 800473a:	0011      	movs	r1, r2
 800473c:	1cbb      	adds	r3, r7, #2
 800473e:	1c02      	adds	r2, r0, #0
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	1c7b      	adds	r3, r7, #1
 8004744:	1c0a      	adds	r2, r1, #0
 8004746:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004748:	1c7b      	adds	r3, r7, #1
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004750:	1cbb      	adds	r3, r7, #2
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004758:	e003      	b.n	8004762 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800475a:	1cbb      	adds	r3, r7, #2
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b002      	add	sp, #8
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	0002      	movs	r2, r0
 8004774:	1dbb      	adds	r3, r7, #6
 8004776:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	1dba      	adds	r2, r7, #6
 800477e:	8812      	ldrh	r2, [r2, #0]
 8004780:	4013      	ands	r3, r2
 8004782:	d008      	beq.n	8004796 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004786:	1dba      	adds	r2, r7, #6
 8004788:	8812      	ldrh	r2, [r2, #0]
 800478a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800478c:	1dbb      	adds	r3, r7, #6
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	0018      	movs	r0, r3
 8004792:	f020 fb81 	bl	8024e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	40010400 	.word	0x40010400

080047a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80047ae:	2180      	movs	r1, #128	; 0x80
 80047b0:	0049      	lsls	r1, r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40007000 	.word	0x40007000

080047c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	000a      	movs	r2, r1
 80047ca:	1cfb      	adds	r3, r7, #3
 80047cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_PWR_EnterSTOPMode+0x60>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2203      	movs	r2, #3
 80047dc:	4393      	bics	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_PWR_EnterSTOPMode+0x60>)
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <HAL_PWR_EnterSTOPMode+0x64>)
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_PWR_EnterSTOPMode+0x64>)
 80047f4:	2104      	movs	r1, #4
 80047f6:	430a      	orrs	r2, r1
 80047f8:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80047fa:	1cfb      	adds	r3, r7, #3
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004802:	bf30      	wfi
 8004804:	e002      	b.n	800480c <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8004806:	bf40      	sev
  __ASM volatile ("wfe");
 8004808:	bf20      	wfe
 800480a:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_PWR_EnterSTOPMode+0x64>)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <HAL_PWR_EnterSTOPMode+0x64>)
 8004812:	2104      	movs	r1, #4
 8004814:	438a      	bics	r2, r1
 8004816:	611a      	str	r2, [r3, #16]

}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b004      	add	sp, #16
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40007000 	.word	0x40007000
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	00c9      	lsls	r1, r1, #3
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40007000 	.word	0x40007000

08004844 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <HAL_PWREx_EnableUltraLowPower+0x18>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_PWREx_EnableUltraLowPower+0x18>)
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	0089      	lsls	r1, r1, #2
 8004852:	430a      	orrs	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40007000 	.word	0x40007000

08004860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f000 fbbc 	bl	8004fec <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004874:	4bc8      	ldr	r3, [pc, #800]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	220c      	movs	r2, #12
 800487a:	4013      	ands	r3, r2
 800487c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800487e:	4bc6      	ldr	r3, [pc, #792]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	025b      	lsls	r3, r3, #9
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	4013      	ands	r3, r2
 8004892:	d100      	bne.n	8004896 <HAL_RCC_OscConfig+0x36>
 8004894:	e07e      	b.n	8004994 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d007      	beq.n	80048ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d112      	bne.n	80048c8 <HAL_RCC_OscConfig+0x68>
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	025b      	lsls	r3, r3, #9
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d10d      	bne.n	80048c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	4bba      	ldr	r3, [pc, #744]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	029b      	lsls	r3, r3, #10
 80048b4:	4013      	ands	r3, r2
 80048b6:	d100      	bne.n	80048ba <HAL_RCC_OscConfig+0x5a>
 80048b8:	e06b      	b.n	8004992 <HAL_RCC_OscConfig+0x132>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d167      	bne.n	8004992 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f000 fb92 	bl	8004fec <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	025b      	lsls	r3, r3, #9
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_OscConfig+0x84>
 80048d4:	4bb0      	ldr	r3, [pc, #704]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4baf      	ldr	r3, [pc, #700]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	0249      	lsls	r1, r1, #9
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e027      	b.n	8004934 <HAL_RCC_OscConfig+0xd4>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	23a0      	movs	r3, #160	; 0xa0
 80048ea:	02db      	lsls	r3, r3, #11
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d10e      	bne.n	800490e <HAL_RCC_OscConfig+0xae>
 80048f0:	4ba9      	ldr	r3, [pc, #676]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4ba8      	ldr	r3, [pc, #672]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	02c9      	lsls	r1, r1, #11
 80048fa:	430a      	orrs	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	4ba6      	ldr	r3, [pc, #664]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4ba5      	ldr	r3, [pc, #660]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	0249      	lsls	r1, r1, #9
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e012      	b.n	8004934 <HAL_RCC_OscConfig+0xd4>
 800490e:	4ba2      	ldr	r3, [pc, #648]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4ba1      	ldr	r3, [pc, #644]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004914:	49a1      	ldr	r1, [pc, #644]	; (8004b9c <HAL_RCC_OscConfig+0x33c>)
 8004916:	400a      	ands	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	4b9f      	ldr	r3, [pc, #636]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	025b      	lsls	r3, r3, #9
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4b9b      	ldr	r3, [pc, #620]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b9a      	ldr	r3, [pc, #616]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 800492e:	499c      	ldr	r1, [pc, #624]	; (8004ba0 <HAL_RCC_OscConfig+0x340>)
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7ff f99a 	bl	8003c74 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004944:	e009      	b.n	800495a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004946:	f7ff f995 	bl	8003c74 <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	; 0x64
 8004952:	d902      	bls.n	800495a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	f000 fb49 	bl	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800495a:	4b8f      	ldr	r3, [pc, #572]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	4013      	ands	r3, r2
 8004964:	d0ef      	beq.n	8004946 <HAL_RCC_OscConfig+0xe6>
 8004966:	e015      	b.n	8004994 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7ff f984 	bl	8003c74 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004972:	f7ff f97f 	bl	8003c74 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	; 0x64
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e333      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004984:	4b84      	ldr	r3, [pc, #528]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	4013      	ands	r3, r2
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x112>
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2202      	movs	r2, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d100      	bne.n	80049a0 <HAL_RCC_OscConfig+0x140>
 800499e:	e098      	b.n	8004ad2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80049ae:	4b7a      	ldr	r3, [pc, #488]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b79      	ldr	r3, [pc, #484]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80049b4:	2120      	movs	r1, #32
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2220      	movs	r2, #32
 80049be:	4393      	bics	r3, r2
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d13d      	bne.n	8004a4a <HAL_RCC_OscConfig+0x1ea>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d13a      	bne.n	8004a4a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80049d4:	4b70      	ldr	r3, [pc, #448]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2204      	movs	r2, #4
 80049da:	4013      	ands	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_RCC_OscConfig+0x188>
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e301      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b6b      	ldr	r3, [pc, #428]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a6d      	ldr	r2, [pc, #436]	; (8004ba4 <HAL_RCC_OscConfig+0x344>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80049fe:	4b66      	ldr	r3, [pc, #408]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2209      	movs	r2, #9
 8004a04:	4393      	bics	r3, r2
 8004a06:	0019      	movs	r1, r3
 8004a08:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a10:	f000 fc20 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8004a14:	0001      	movs	r1, r0
 8004a16:	4b60      	ldr	r3, [pc, #384]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	4013      	ands	r3, r2
 8004a20:	4a61      	ldr	r2, [pc, #388]	; (8004ba8 <HAL_RCC_OscConfig+0x348>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	000a      	movs	r2, r1
 8004a26:	40da      	lsrs	r2, r3
 8004a28:	4b60      	ldr	r3, [pc, #384]	; (8004bac <HAL_RCC_OscConfig+0x34c>)
 8004a2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004a2c:	2513      	movs	r5, #19
 8004a2e:	197c      	adds	r4, r7, r5
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7ff f8eb 	bl	8003c0c <HAL_InitTick>
 8004a36:	0003      	movs	r3, r0
 8004a38:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004a3a:	197b      	adds	r3, r7, r5
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d047      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004a42:	2313      	movs	r3, #19
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	e2d0      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d027      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a50:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2209      	movs	r2, #9
 8004a56:	4393      	bics	r3, r2
 8004a58:	0019      	movs	r1, r3
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7ff f907 	bl	8003c74 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7ff f902 	bl	8003c74 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e2b6      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a7e:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2204      	movs	r2, #4
 8004a84:	4013      	ands	r3, r2
 8004a86:	d0f1      	beq.n	8004a6c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a45      	ldr	r2, [pc, #276]	; (8004ba4 <HAL_RCC_OscConfig+0x344>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	0019      	movs	r1, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	021a      	lsls	r2, r3, #8
 8004a98:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	e018      	b.n	8004ad2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa0:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b3c      	ldr	r3, [pc, #240]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7ff f8e2 	bl	8003c74 <HAL_GetTick>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab6:	f7ff f8dd 	bl	8003c74 <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e291      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ac8:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2204      	movs	r2, #4
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d1f1      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d100      	bne.n	8004ade <HAL_RCC_OscConfig+0x27e>
 8004adc:	e09f      	b.n	8004c1e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d13f      	bne.n	8004b64 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4013      	ands	r3, r2
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x29c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e277      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <HAL_RCC_OscConfig+0x350>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	0a19      	lsrs	r1, r3, #8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	061a      	lsls	r2, r3, #24
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	0b5b      	lsrs	r3, r3, #13
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	0212      	lsls	r2, r2, #8
 8004b30:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	210f      	movs	r1, #15
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	491a      	ldr	r1, [pc, #104]	; (8004ba8 <HAL_RCC_OscConfig+0x348>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <HAL_RCC_OscConfig+0x34c>)
 8004b44:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b46:	2513      	movs	r5, #19
 8004b48:	197c      	adds	r4, r7, r5
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7ff f85e 	bl	8003c0c <HAL_InitTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004b54:	197b      	adds	r3, r7, r5
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d060      	beq.n	8004c1e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004b5c:	2313      	movs	r3, #19
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	e243      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d03e      	beq.n	8004bea <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_OscConfig+0x338>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0049      	lsls	r1, r1, #1
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7ff f87b 	bl	8003c74 <HAL_GetTick>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b82:	e017      	b.n	8004bb4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b84:	f7ff f876 	bl	8003c74 <HAL_GetTick>
 8004b88:	0002      	movs	r2, r0
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d910      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e22a      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	fffeffff 	.word	0xfffeffff
 8004ba0:	fffbffff 	.word	0xfffbffff
 8004ba4:	ffffe0ff 	.word	0xffffe0ff
 8004ba8:	080281f8 	.word	0x080281f8
 8004bac:	20000004 	.word	0x20000004
 8004bb0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004bb4:	4bc6      	ldr	r3, [pc, #792]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d0e1      	beq.n	8004b84 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc0:	4bc3      	ldr	r3, [pc, #780]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4ac3      	ldr	r2, [pc, #780]	; (8004ed4 <HAL_RCC_OscConfig+0x674>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bce:	4bc0      	ldr	r3, [pc, #768]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd4:	4bbe      	ldr	r3, [pc, #760]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	0a19      	lsrs	r1, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	061a      	lsls	r2, r3, #24
 8004be2:	4bbb      	ldr	r3, [pc, #748]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	e019      	b.n	8004c1e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bea:	4bb9      	ldr	r3, [pc, #740]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4bb8      	ldr	r3, [pc, #736]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004bf0:	49b9      	ldr	r1, [pc, #740]	; (8004ed8 <HAL_RCC_OscConfig+0x678>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7ff f83d 	bl	8003c74 <HAL_GetTick>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c00:	f7ff f838 	bl	8003c74 <HAL_GetTick>
 8004c04:	0002      	movs	r2, r0
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e1ec      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c12:	4baf      	ldr	r3, [pc, #700]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2208      	movs	r2, #8
 8004c24:	4013      	ands	r3, r2
 8004c26:	d036      	beq.n	8004c96 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d019      	beq.n	8004c64 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c30:	4ba7      	ldr	r3, [pc, #668]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c34:	4ba6      	ldr	r3, [pc, #664]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c36:	2101      	movs	r1, #1
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3c:	f7ff f81a 	bl	8003c74 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c46:	f7ff f815 	bl	8003c74 <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1c9      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c58:	4b9d      	ldr	r3, [pc, #628]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d0f1      	beq.n	8004c46 <HAL_RCC_OscConfig+0x3e6>
 8004c62:	e018      	b.n	8004c96 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c64:	4b9a      	ldr	r3, [pc, #616]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c68:	4b99      	ldr	r3, [pc, #612]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7ff f800 	bl	8003c74 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7a:	f7fe fffb 	bl	8003c74 <HAL_GetTick>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e1af      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c8c:	4b90      	ldr	r3, [pc, #576]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	2202      	movs	r2, #2
 8004c92:	4013      	ands	r3, r2
 8004c94:	d1f1      	bne.n	8004c7a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x442>
 8004ca0:	e0af      	b.n	8004e02 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca2:	2323      	movs	r3, #35	; 0x23
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004caa:	4b89      	ldr	r3, [pc, #548]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	055b      	lsls	r3, r3, #21
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d10a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	4b86      	ldr	r3, [pc, #536]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	4b85      	ldr	r3, [pc, #532]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	0549      	lsls	r1, r1, #21
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004cc4:	2323      	movs	r3, #35	; 0x23
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	4b83      	ldr	r3, [pc, #524]	; (8004edc <HAL_RCC_OscConfig+0x67c>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d11a      	bne.n	8004d0e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd8:	4b80      	ldr	r3, [pc, #512]	; (8004edc <HAL_RCC_OscConfig+0x67c>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <HAL_RCC_OscConfig+0x67c>)
 8004cde:	2180      	movs	r1, #128	; 0x80
 8004ce0:	0049      	lsls	r1, r1, #1
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fe ffc5 	bl	8003c74 <HAL_GetTick>
 8004cea:	0003      	movs	r3, r0
 8004cec:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fe ffc0 	bl	8003c74 <HAL_GetTick>
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e174      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d02:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCC_OscConfig+0x67c>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d107      	bne.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
 8004d1a:	4b6d      	ldr	r3, [pc, #436]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d1e:	4b6c      	ldr	r3, [pc, #432]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	0049      	lsls	r1, r1, #1
 8004d24:	430a      	orrs	r2, r1
 8004d26:	651a      	str	r2, [r3, #80]	; 0x50
 8004d28:	e031      	b.n	8004d8e <HAL_RCC_OscConfig+0x52e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4ec>
 8004d32:	4b67      	ldr	r3, [pc, #412]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d36:	4b66      	ldr	r3, [pc, #408]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d38:	4967      	ldr	r1, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x678>)
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d3e:	4b64      	ldr	r3, [pc, #400]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d42:	4b63      	ldr	r3, [pc, #396]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d44:	4966      	ldr	r1, [pc, #408]	; (8004ee0 <HAL_RCC_OscConfig+0x680>)
 8004d46:	400a      	ands	r2, r1
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
 8004d4a:	e020      	b.n	8004d8e <HAL_RCC_OscConfig+0x52e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	23a0      	movs	r3, #160	; 0xa0
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d10e      	bne.n	8004d76 <HAL_RCC_OscConfig+0x516>
 8004d58:	4b5d      	ldr	r3, [pc, #372]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d5c:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d5e:	2180      	movs	r1, #128	; 0x80
 8004d60:	00c9      	lsls	r1, r1, #3
 8004d62:	430a      	orrs	r2, r1
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50
 8004d66:	4b5a      	ldr	r3, [pc, #360]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6a:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	0049      	lsls	r1, r1, #1
 8004d70:	430a      	orrs	r2, r1
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
 8004d74:	e00b      	b.n	8004d8e <HAL_RCC_OscConfig+0x52e>
 8004d76:	4b56      	ldr	r3, [pc, #344]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d7a:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d7c:	4956      	ldr	r1, [pc, #344]	; (8004ed8 <HAL_RCC_OscConfig+0x678>)
 8004d7e:	400a      	ands	r2, r1
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50
 8004d82:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004d88:	4955      	ldr	r1, [pc, #340]	; (8004ee0 <HAL_RCC_OscConfig+0x680>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d015      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7fe ff6d 	bl	8003c74 <HAL_GetTick>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d9e:	e009      	b.n	8004db4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fe ff68 	bl	8003c74 <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	4a4e      	ldr	r2, [pc, #312]	; (8004ee4 <HAL_RCC_OscConfig+0x684>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e11b      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db4:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d0ef      	beq.n	8004da0 <HAL_RCC_OscConfig+0x540>
 8004dc0:	e014      	b.n	8004dec <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fe ff57 	bl	8003c74 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dca:	e009      	b.n	8004de0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fe ff52 	bl	8003c74 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a43      	ldr	r2, [pc, #268]	; (8004ee4 <HAL_RCC_OscConfig+0x684>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e105      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004de0:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d1ef      	bne.n	8004dcc <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dec:	2323      	movs	r3, #35	; 0x23
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfa:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004dfc:	493a      	ldr	r1, [pc, #232]	; (8004ee8 <HAL_RCC_OscConfig+0x688>)
 8004dfe:	400a      	ands	r2, r1
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2220      	movs	r2, #32
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d049      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d026      	beq.n	8004e62 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e14:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e26:	2101      	movs	r1, #1
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8004e2c:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_RCC_OscConfig+0x68c>)
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_RCC_OscConfig+0x68c>)
 8004e32:	2180      	movs	r1, #128	; 0x80
 8004e34:	0189      	lsls	r1, r1, #6
 8004e36:	430a      	orrs	r2, r1
 8004e38:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fe ff1b 	bl	8003c74 <HAL_GetTick>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e44:	f7fe ff16 	bl	8003c74 <HAL_GetTick>
 8004e48:	0002      	movs	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0ca      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e56:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d0f1      	beq.n	8004e44 <HAL_RCC_OscConfig+0x5e4>
 8004e60:	e01e      	b.n	8004ea0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e68:	2101      	movs	r1, #1
 8004e6a:	438a      	bics	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_RCC_OscConfig+0x68c>)
 8004e70:	6a1a      	ldr	r2, [r3, #32]
 8004e72:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <HAL_RCC_OscConfig+0x68c>)
 8004e74:	491e      	ldr	r1, [pc, #120]	; (8004ef0 <HAL_RCC_OscConfig+0x690>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7a:	f7fe fefb 	bl	8003c74 <HAL_GetTick>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e84:	f7fe fef6 	bl	8003c74 <HAL_GetTick>
 8004e88:	0002      	movs	r2, r0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e0aa      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d1f1      	bne.n	8004e84 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d100      	bne.n	8004eaa <HAL_RCC_OscConfig+0x64a>
 8004ea8:	e09f      	b.n	8004fea <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d100      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x652>
 8004eb0:	e078      	b.n	8004fa4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d159      	bne.n	8004f6e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_RCC_OscConfig+0x670>)
 8004ec0:	490c      	ldr	r1, [pc, #48]	; (8004ef4 <HAL_RCC_OscConfig+0x694>)
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fe fed5 	bl	8003c74 <HAL_GetTick>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ece:	e01c      	b.n	8004f0a <HAL_RCC_OscConfig+0x6aa>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	ffff1fff 	.word	0xffff1fff
 8004ed8:	fffffeff 	.word	0xfffffeff
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	fffffbff 	.word	0xfffffbff
 8004ee4:	00001388 	.word	0x00001388
 8004ee8:	efffffff 	.word	0xefffffff
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	ffffdfff 	.word	0xffffdfff
 8004ef4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fe febc 	bl	8003c74 <HAL_GetTick>
 8004efc:	0002      	movs	r2, r0
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e070      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f0a:	4b3a      	ldr	r3, [pc, #232]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	049b      	lsls	r3, r3, #18
 8004f12:	4013      	ands	r3, r2
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f16:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	4a37      	ldr	r2, [pc, #220]	; (8004ff8 <HAL_RCC_OscConfig+0x798>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	4b30      	ldr	r3, [pc, #192]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f32:	430a      	orrs	r2, r1
 8004f34:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f36:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	0449      	lsls	r1, r1, #17
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fe fe96 	bl	8003c74 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fe fe91 	bl	8003c74 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e045      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f60:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	049b      	lsls	r3, r3, #18
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x6ee>
 8004f6c:	e03d      	b.n	8004fea <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f74:	4921      	ldr	r1, [pc, #132]	; (8004ffc <HAL_RCC_OscConfig+0x79c>)
 8004f76:	400a      	ands	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fe7b 	bl	8003c74 <HAL_GetTick>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fe fe76 	bl	8003c74 <HAL_GetTick>
 8004f88:	0002      	movs	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e02a      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f96:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	049b      	lsls	r3, r3, #18
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x724>
 8004fa2:	e022      	b.n	8004fea <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_RCC_OscConfig+0x794>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	025b      	lsls	r3, r3, #9
 8004fbc:	401a      	ands	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	23f0      	movs	r3, #240	; 0xf0
 8004fca:	039b      	lsls	r3, r3, #14
 8004fcc:	401a      	ands	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	23c0      	movs	r3, #192	; 0xc0
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	401a      	ands	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b00a      	add	sp, #40	; 0x28
 8004ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	ff02ffff 	.word	0xff02ffff
 8004ffc:	feffffff 	.word	0xfeffffff

08005000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e10d      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005014:	4b88      	ldr	r3, [pc, #544]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	4013      	ands	r3, r2
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d911      	bls.n	8005046 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b85      	ldr	r3, [pc, #532]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2201      	movs	r2, #1
 8005028:	4393      	bics	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	4b82      	ldr	r3, [pc, #520]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005034:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	4013      	ands	r3, r2
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d001      	beq.n	8005046 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0f4      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2202      	movs	r2, #2
 800504c:	4013      	ands	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005050:	4b7a      	ldr	r3, [pc, #488]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	22f0      	movs	r2, #240	; 0xf0
 8005056:	4393      	bics	r3, r2
 8005058:	0019      	movs	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	4b77      	ldr	r3, [pc, #476]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
 800506c:	d100      	bne.n	8005070 <HAL_RCC_ClockConfig+0x70>
 800506e:	e089      	b.n	8005184 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d107      	bne.n	8005088 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005078:	4b70      	ldr	r3, [pc, #448]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	4013      	ands	r3, r2
 8005082:	d120      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0d3      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005090:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	049b      	lsls	r3, r3, #18
 8005098:	4013      	ands	r3, r2
 800509a:	d114      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0c7      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050a8:	4b64      	ldr	r3, [pc, #400]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2204      	movs	r2, #4
 80050ae:	4013      	ands	r3, r2
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0bc      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050b6:	4b61      	ldr	r3, [pc, #388]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0b4      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b5d      	ldr	r3, [pc, #372]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2203      	movs	r2, #3
 80050cc:	4393      	bics	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80050d6:	430a      	orrs	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050da:	f7fe fdcb 	bl	8003c74 <HAL_GetTick>
 80050de:	0003      	movs	r3, r0
 80050e0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d111      	bne.n	800510e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ea:	e009      	b.n	8005100 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fe fdc2 	bl	8003c74 <HAL_GetTick>
 80050f0:	0002      	movs	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	4a52      	ldr	r2, [pc, #328]	; (8005240 <HAL_RCC_ClockConfig+0x240>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e097      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	220c      	movs	r2, #12
 8005106:	4013      	ands	r3, r2
 8005108:	2b08      	cmp	r3, #8
 800510a:	d1ef      	bne.n	80050ec <HAL_RCC_ClockConfig+0xec>
 800510c:	e03a      	b.n	8005184 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b03      	cmp	r3, #3
 8005114:	d111      	bne.n	800513a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005116:	e009      	b.n	800512c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fe fdac 	bl	8003c74 <HAL_GetTick>
 800511c:	0002      	movs	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	4a47      	ldr	r2, [pc, #284]	; (8005240 <HAL_RCC_ClockConfig+0x240>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e081      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800512c:	4b43      	ldr	r3, [pc, #268]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	220c      	movs	r2, #12
 8005132:	4013      	ands	r3, r2
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d1ef      	bne.n	8005118 <HAL_RCC_ClockConfig+0x118>
 8005138:	e024      	b.n	8005184 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d11b      	bne.n	800517a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005142:	e009      	b.n	8005158 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005144:	f7fe fd96 	bl	8003c74 <HAL_GetTick>
 8005148:	0002      	movs	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <HAL_RCC_ClockConfig+0x240>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e06b      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005158:	4b38      	ldr	r3, [pc, #224]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	220c      	movs	r2, #12
 800515e:	4013      	ands	r3, r2
 8005160:	2b04      	cmp	r3, #4
 8005162:	d1ef      	bne.n	8005144 <HAL_RCC_ClockConfig+0x144>
 8005164:	e00e      	b.n	8005184 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005166:	f7fe fd85 	bl	8003c74 <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	4a33      	ldr	r2, [pc, #204]	; (8005240 <HAL_RCC_ClockConfig+0x240>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e05a      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800517a:	4b30      	ldr	r3, [pc, #192]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	220c      	movs	r2, #12
 8005180:	4013      	ands	r3, r2
 8005182:	d1f0      	bne.n	8005166 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	4013      	ands	r3, r2
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d211      	bcs.n	80051b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b29      	ldr	r3, [pc, #164]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	4393      	bics	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a4:	4b24      	ldr	r3, [pc, #144]	; (8005238 <HAL_RCC_ClockConfig+0x238>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	4013      	ands	r3, r2
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d001      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e03c      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b1e      	ldr	r3, [pc, #120]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	0019      	movs	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80051d0:	430a      	orrs	r2, r1
 80051d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2208      	movs	r2, #8
 80051da:	4013      	ands	r3, r2
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_RCC_ClockConfig+0x248>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	00da      	lsls	r2, r3, #3
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051f4:	f000 f82e 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 80051f8:	0001      	movs	r1, r0
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <HAL_RCC_ClockConfig+0x23c>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	220f      	movs	r2, #15
 8005202:	4013      	ands	r3, r2
 8005204:	4a11      	ldr	r2, [pc, #68]	; (800524c <HAL_RCC_ClockConfig+0x24c>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	000a      	movs	r2, r1
 800520a:	40da      	lsrs	r2, r3
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_RCC_ClockConfig+0x250>)
 800520e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005210:	250b      	movs	r5, #11
 8005212:	197c      	adds	r4, r7, r5
 8005214:	2000      	movs	r0, #0
 8005216:	f7fe fcf9 	bl	8003c0c <HAL_InitTick>
 800521a:	0003      	movs	r3, r0
 800521c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800521e:	197b      	adds	r3, r7, r5
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005226:	230b      	movs	r3, #11
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	e000      	b.n	8005230 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b004      	add	sp, #16
 8005236:	bdb0      	pop	{r4, r5, r7, pc}
 8005238:	40022000 	.word	0x40022000
 800523c:	40021000 	.word	0x40021000
 8005240:	00001388 	.word	0x00001388
 8005244:	fffff8ff 	.word	0xfffff8ff
 8005248:	ffffc7ff 	.word	0xffffc7ff
 800524c:	080281f8 	.word	0x080281f8
 8005250:	20000004 	.word	0x20000004

08005254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800525a:	4b3b      	ldr	r3, [pc, #236]	; (8005348 <HAL_RCC_GetSysClockFreq+0xf4>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	220c      	movs	r2, #12
 8005264:	4013      	ands	r3, r2
 8005266:	2b08      	cmp	r3, #8
 8005268:	d00e      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x34>
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d00f      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x3a>
 800526e:	2b04      	cmp	r3, #4
 8005270:	d157      	bne.n	8005322 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005272:	4b35      	ldr	r3, [pc, #212]	; (8005348 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2210      	movs	r2, #16
 8005278:	4013      	ands	r3, r2
 800527a:	d002      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800527c:	4b33      	ldr	r3, [pc, #204]	; (800534c <HAL_RCC_GetSysClockFreq+0xf8>)
 800527e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005280:	e05d      	b.n	800533e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005282:	4b33      	ldr	r3, [pc, #204]	; (8005350 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005284:	613b      	str	r3, [r7, #16]
      break;
 8005286:	e05a      	b.n	800533e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <HAL_RCC_GetSysClockFreq+0x100>)
 800528a:	613b      	str	r3, [r7, #16]
      break;
 800528c:	e057      	b.n	800533e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	0c9b      	lsrs	r3, r3, #18
 8005292:	220f      	movs	r2, #15
 8005294:	4013      	ands	r3, r2
 8005296:	4a30      	ldr	r2, [pc, #192]	; (8005358 <HAL_RCC_GetSysClockFreq+0x104>)
 8005298:	5cd3      	ldrb	r3, [r2, r3]
 800529a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	0d9b      	lsrs	r3, r3, #22
 80052a0:	2203      	movs	r2, #3
 80052a2:	4013      	ands	r3, r2
 80052a4:	3301      	adds	r3, #1
 80052a6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCC_GetSysClockFreq+0xf4>)
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	025b      	lsls	r3, r3, #9
 80052b0:	4013      	ands	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	000a      	movs	r2, r1
 80052b8:	0152      	lsls	r2, r2, #5
 80052ba:	1a52      	subs	r2, r2, r1
 80052bc:	0193      	lsls	r3, r2, #6
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	185b      	adds	r3, r3, r1
 80052c4:	025b      	lsls	r3, r3, #9
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7fa ff25 	bl	8000118 <__udivsi3>
 80052ce:	0003      	movs	r3, r0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e023      	b.n	800531c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80052d4:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <HAL_RCC_GetSysClockFreq+0xf4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2210      	movs	r2, #16
 80052da:	4013      	ands	r3, r2
 80052dc:	d00f      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	000a      	movs	r2, r1
 80052e2:	0152      	lsls	r2, r2, #5
 80052e4:	1a52      	subs	r2, r2, r1
 80052e6:	0193      	lsls	r3, r2, #6
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	185b      	adds	r3, r3, r1
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7fa ff10 	bl	8000118 <__udivsi3>
 80052f8:	0003      	movs	r3, r0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e00e      	b.n	800531c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	000a      	movs	r2, r1
 8005302:	0152      	lsls	r2, r2, #5
 8005304:	1a52      	subs	r2, r2, r1
 8005306:	0193      	lsls	r3, r2, #6
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	185b      	adds	r3, r3, r1
 800530e:	029b      	lsls	r3, r3, #10
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	0018      	movs	r0, r3
 8005314:	f7fa ff00 	bl	8000118 <__udivsi3>
 8005318:	0003      	movs	r3, r0
 800531a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	613b      	str	r3, [r7, #16]
      break;
 8005320:	e00d      	b.n	800533e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	0b5b      	lsrs	r3, r3, #13
 8005328:	2207      	movs	r2, #7
 800532a:	4013      	ands	r3, r2
 800532c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	2280      	movs	r2, #128	; 0x80
 8005334:	0212      	lsls	r2, r2, #8
 8005336:	409a      	lsls	r2, r3
 8005338:	0013      	movs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
      break;
 800533c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800533e:	693b      	ldr	r3, [r7, #16]
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b006      	add	sp, #24
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000
 800534c:	003d0900 	.word	0x003d0900
 8005350:	00f42400 	.word	0x00f42400
 8005354:	007a1200 	.word	0x007a1200
 8005358:	08028210 	.word	0x08028210

0800535c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005360:	4b02      	ldr	r3, [pc, #8]	; (800536c <HAL_RCC_GetHCLKFreq+0x10>)
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000004 	.word	0x20000004

08005370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005374:	f7ff fff2 	bl	800535c <HAL_RCC_GetHCLKFreq>
 8005378:	0001      	movs	r1, r0
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	2207      	movs	r2, #7
 8005382:	4013      	ands	r3, r2
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005386:	5cd3      	ldrb	r3, [r2, r3]
 8005388:	40d9      	lsrs	r1, r3
 800538a:	000b      	movs	r3, r1
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	40021000 	.word	0x40021000
 8005398:	08028208 	.word	0x08028208

0800539c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a0:	f7ff ffdc 	bl	800535c <HAL_RCC_GetHCLKFreq>
 80053a4:	0001      	movs	r1, r0
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	0adb      	lsrs	r3, r3, #11
 80053ac:	2207      	movs	r2, #7
 80053ae:	4013      	ands	r3, r2
 80053b0:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053b2:	5cd3      	ldrb	r3, [r2, r3]
 80053b4:	40d9      	lsrs	r1, r3
 80053b6:	000b      	movs	r3, r1
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	40021000 	.word	0x40021000
 80053c4:	08028208 	.word	0x08028208

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2220      	movs	r2, #32
 80053d6:	4013      	ands	r3, r2
 80053d8:	d100      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x14>
 80053da:	e0c7      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80053dc:	2317      	movs	r3, #23
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e4:	4b99      	ldr	r3, [pc, #612]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	055b      	lsls	r3, r3, #21
 80053ec:	4013      	ands	r3, r2
 80053ee:	d10a      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f0:	4b96      	ldr	r3, [pc, #600]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f4:	4b95      	ldr	r3, [pc, #596]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053f6:	2180      	movs	r1, #128	; 0x80
 80053f8:	0549      	lsls	r1, r1, #21
 80053fa:	430a      	orrs	r2, r1
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80053fe:	2317      	movs	r3, #23
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005406:	4b92      	ldr	r3, [pc, #584]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	2380      	movs	r3, #128	; 0x80
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4013      	ands	r3, r2
 8005410:	d11a      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005412:	4b8f      	ldr	r3, [pc, #572]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b8e      	ldr	r3, [pc, #568]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005418:	2180      	movs	r1, #128	; 0x80
 800541a:	0049      	lsls	r1, r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005420:	f7fe fc28 	bl	8003c74 <HAL_GetTick>
 8005424:	0003      	movs	r3, r0
 8005426:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005428:	e008      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542a:	f7fe fc23 	bl	8003c74 <HAL_GetTick>
 800542e:	0002      	movs	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	; 0x64
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e102      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543c:	4b84      	ldr	r3, [pc, #528]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4013      	ands	r3, r2
 8005446:	d0f0      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005448:	4b80      	ldr	r3, [pc, #512]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	23c0      	movs	r3, #192	; 0xc0
 800544e:	039b      	lsls	r3, r3, #14
 8005450:	4013      	ands	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	23c0      	movs	r3, #192	; 0xc0
 800545a:	039b      	lsls	r3, r3, #14
 800545c:	4013      	ands	r3, r2
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d013      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	23c0      	movs	r3, #192	; 0xc0
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	401a      	ands	r2, r3
 800546e:	23c0      	movs	r3, #192	; 0xc0
 8005470:	029b      	lsls	r3, r3, #10
 8005472:	429a      	cmp	r2, r3
 8005474:	d10a      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005476:	4b75      	ldr	r3, [pc, #468]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	401a      	ands	r2, r3
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	429a      	cmp	r2, r3
 8005486:	d101      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0da      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800548c:	4b6f      	ldr	r3, [pc, #444]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800548e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005490:	23c0      	movs	r3, #192	; 0xc0
 8005492:	029b      	lsls	r3, r3, #10
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d03b      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	23c0      	movs	r3, #192	; 0xc0
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	4013      	ands	r3, r2
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d033      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2220      	movs	r2, #32
 80054b4:	4013      	ands	r3, r2
 80054b6:	d02e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80054b8:	4b64      	ldr	r3, [pc, #400]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	4a65      	ldr	r2, [pc, #404]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054c2:	4b62      	ldr	r3, [pc, #392]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054c6:	4b61      	ldr	r3, [pc, #388]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	0309      	lsls	r1, r1, #12
 80054cc:	430a      	orrs	r2, r1
 80054ce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054d0:	4b5e      	ldr	r3, [pc, #376]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d4:	4b5d      	ldr	r3, [pc, #372]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054d6:	4960      	ldr	r1, [pc, #384]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054d8:	400a      	ands	r2, r1
 80054da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	4013      	ands	r3, r2
 80054ea:	d014      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7fe fbc2 	bl	8003c74 <HAL_GetTick>
 80054f0:	0003      	movs	r3, r0
 80054f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054f4:	e009      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fe fbbd 	bl	8003c74 <HAL_GetTick>
 80054fa:	0002      	movs	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	4a56      	ldr	r2, [pc, #344]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e09b      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800550a:	4b50      	ldr	r3, [pc, #320]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800550c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4013      	ands	r3, r2
 8005514:	d0ef      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	23c0      	movs	r3, #192	; 0xc0
 800551c:	029b      	lsls	r3, r3, #10
 800551e:	401a      	ands	r2, r3
 8005520:	23c0      	movs	r3, #192	; 0xc0
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	429a      	cmp	r2, r3
 8005526:	d10c      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005528:	4b48      	ldr	r3, [pc, #288]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4c      	ldr	r2, [pc, #304]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800552e:	4013      	ands	r3, r2
 8005530:	0019      	movs	r1, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	23c0      	movs	r3, #192	; 0xc0
 8005538:	039b      	lsls	r3, r3, #14
 800553a:	401a      	ands	r2, r3
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800553e:	430a      	orrs	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	4b42      	ldr	r3, [pc, #264]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005544:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	23c0      	movs	r3, #192	; 0xc0
 800554c:	029b      	lsls	r3, r3, #10
 800554e:	401a      	ands	r2, r3
 8005550:	4b3e      	ldr	r3, [pc, #248]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005552:	430a      	orrs	r2, r1
 8005554:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005556:	2317      	movs	r3, #23
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d105      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005560:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005564:	4b39      	ldr	r3, [pc, #228]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005566:	493f      	ldr	r1, [pc, #252]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005568:	400a      	ands	r2, r1
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	4013      	ands	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005576:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	2203      	movs	r2, #3
 800557c:	4393      	bics	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	4b31      	ldr	r3, [pc, #196]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005586:	430a      	orrs	r2, r1
 8005588:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2202      	movs	r2, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005598:	220c      	movs	r2, #12
 800559a:	4393      	bics	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055a4:	430a      	orrs	r2, r1
 80055a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2204      	movs	r2, #4
 80055ae:	4013      	ands	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	4a2c      	ldr	r2, [pc, #176]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	4b22      	ldr	r3, [pc, #136]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055c2:	430a      	orrs	r2, r1
 80055c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2208      	movs	r2, #8
 80055cc:	4013      	ands	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d4:	4a25      	ldr	r2, [pc, #148]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	0019      	movs	r1, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055e0:	430a      	orrs	r2, r1
 80055e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	4a17      	ldr	r2, [pc, #92]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005600:	430a      	orrs	r2, r1
 8005602:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2240      	movs	r2, #64	; 0x40
 800560a:	4013      	ands	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005614:	4013      	ands	r3, r2
 8005616:	0019      	movs	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800561e:	430a      	orrs	r2, r1
 8005620:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	4013      	ands	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800562e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005630:	4a10      	ldr	r2, [pc, #64]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	4b04      	ldr	r3, [pc, #16]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800563c:	430a      	orrs	r2, r1
 800563e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b006      	add	sp, #24
 8005648:	bd80      	pop	{r7, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
 8005654:	fffcffff 	.word	0xfffcffff
 8005658:	fff7ffff 	.word	0xfff7ffff
 800565c:	00001388 	.word	0x00001388
 8005660:	ffcfffff 	.word	0xffcfffff
 8005664:	efffffff 	.word	0xefffffff
 8005668:	fffff3ff 	.word	0xfffff3ff
 800566c:	ffffcfff 	.word	0xffffcfff
 8005670:	fbffffff 	.word	0xfbffffff
 8005674:	fff3ffff 	.word	0xfff3ffff

08005678 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e08e      	b.n	80057a8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2221      	movs	r2, #33	; 0x21
 800568e:	5c9b      	ldrb	r3, [r3, r2]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	2100      	movs	r1, #0
 800569c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7fd ff97 	bl	80035d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2221      	movs	r2, #33	; 0x21
 80056aa:	2102      	movs	r1, #2
 80056ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	22ca      	movs	r2, #202	; 0xca
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2253      	movs	r2, #83	; 0x53
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f000 fc5c 	bl	8005f7e <RTC_EnterInitMode>
 80056c6:	1e03      	subs	r3, r0, #0
 80056c8:	d009      	beq.n	80056de <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	22ff      	movs	r2, #255	; 0xff
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2221      	movs	r2, #33	; 0x21
 80056d6:	2104      	movs	r1, #4
 80056d8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e064      	b.n	80057a8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4931      	ldr	r1, [pc, #196]	; (80057b0 <HAL_RTC_Init+0x138>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6899      	ldr	r1, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68d2      	ldr	r2, [r2, #12]
 8005714:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6919      	ldr	r1, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	041a      	lsls	r2, r3, #16
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2180      	movs	r1, #128	; 0x80
 8005736:	438a      	bics	r2, r1
 8005738:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2103      	movs	r1, #3
 8005746:	438a      	bics	r2, r1
 8005748:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2220      	movs	r2, #32
 800576a:	4013      	ands	r3, r2
 800576c:	d113      	bne.n	8005796 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0018      	movs	r0, r3
 8005772:	f000 fbdd 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d00d      	beq.n	8005796 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	22ff      	movs	r2, #255	; 0xff
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2221      	movs	r2, #33	; 0x21
 8005786:	2104      	movs	r1, #4
 8005788:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	2100      	movs	r1, #0
 8005790:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e008      	b.n	80057a8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	22ff      	movs	r2, #255	; 0xff
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2221      	movs	r2, #33	; 0x21
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057a6:	2300      	movs	r3, #0
  }
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	ff8fffbf 	.word	0xff8fffbf

080057b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_RTC_SetTime+0x1a>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e0ad      	b.n	800592a <HAL_RTC_SetTime+0x176>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2221      	movs	r2, #33	; 0x21
 80057da:	2102      	movs	r1, #2
 80057dc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d125      	bne.n	8005830 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	4013      	ands	r3, r2
 80057ee:	d102      	bne.n	80057f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 fbe9 	bl	8005fd2 <RTC_ByteToBcd2>
 8005800:	0003      	movs	r3, r0
 8005802:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fbe2 	bl	8005fd2 <RTC_ByteToBcd2>
 800580e:	0003      	movs	r3, r0
 8005810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005812:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	789b      	ldrb	r3, [r3, #2]
 8005818:	0018      	movs	r0, r3
 800581a:	f000 fbda 	bl	8005fd2 <RTC_ByteToBcd2>
 800581e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005820:	0022      	movs	r2, r4
 8005822:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	78db      	ldrb	r3, [r3, #3]
 8005828:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e017      	b.n	8005860 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2240      	movs	r2, #64	; 0x40
 8005838:	4013      	ands	r3, r2
 800583a:	d102      	bne.n	8005842 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2200      	movs	r2, #0
 8005840:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800584e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005854:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	78db      	ldrb	r3, [r3, #3]
 800585a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	22ca      	movs	r2, #202	; 0xca
 8005866:	625a      	str	r2, [r3, #36]	; 0x24
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2253      	movs	r2, #83	; 0x53
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 fb83 	bl	8005f7e <RTC_EnterInitMode>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d00d      	beq.n	8005898 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2221      	movs	r2, #33	; 0x21
 8005888:	2104      	movs	r1, #4
 800588a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	2100      	movs	r1, #0
 8005892:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e048      	b.n	800592a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4925      	ldr	r1, [pc, #148]	; (8005934 <HAL_RTC_SetTime+0x180>)
 80058a0:	400a      	ands	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4922      	ldr	r1, [pc, #136]	; (8005938 <HAL_RTC_SetTime+0x184>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6899      	ldr	r1, [r3, #8]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	438a      	bics	r2, r1
 80058da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2220      	movs	r2, #32
 80058e4:	4013      	ands	r3, r2
 80058e6:	d113      	bne.n	8005910 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 fb20 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d00d      	beq.n	8005910 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	22ff      	movs	r2, #255	; 0xff
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2221      	movs	r2, #33	; 0x21
 8005900:	2104      	movs	r1, #4
 8005902:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	2100      	movs	r1, #0
 800590a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e00c      	b.n	800592a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	; 0x21
 800591c:	2101      	movs	r1, #1
 800591e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	2100      	movs	r1, #0
 8005926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
  }
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b007      	add	sp, #28
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	007f7f7f 	.word	0x007f7f7f
 8005938:	fffbffff 	.word	0xfffbffff

0800593c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	045b      	lsls	r3, r3, #17
 800595a:	0c5a      	lsrs	r2, r3, #17
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_RTC_GetTime+0xb4>)
 8005968:	4013      	ands	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	0c1b      	lsrs	r3, r3, #16
 8005970:	b2db      	uxtb	r3, r3
 8005972:	223f      	movs	r2, #63	; 0x3f
 8005974:	4013      	ands	r3, r2
 8005976:	b2da      	uxtb	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	b2db      	uxtb	r3, r3
 8005982:	227f      	movs	r2, #127	; 0x7f
 8005984:	4013      	ands	r3, r2
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	227f      	movs	r2, #127	; 0x7f
 8005992:	4013      	ands	r3, r2
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2240      	movs	r2, #64	; 0x40
 80059a2:	4013      	ands	r3, r2
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11a      	bne.n	80059e6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	0018      	movs	r0, r3
 80059b6:	f000 fb35 	bl	8006024 <RTC_Bcd2ToByte>
 80059ba:	0003      	movs	r3, r0
 80059bc:	001a      	movs	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 fb2c 	bl	8006024 <RTC_Bcd2ToByte>
 80059cc:	0003      	movs	r3, r0
 80059ce:	001a      	movs	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	789b      	ldrb	r3, [r3, #2]
 80059d8:	0018      	movs	r0, r3
 80059da:	f000 fb23 	bl	8006024 <RTC_Bcd2ToByte>
 80059de:	0003      	movs	r3, r0
 80059e0:	001a      	movs	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b006      	add	sp, #24
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	007f7f7f 	.word	0x007f7f7f

080059f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	5c9b      	ldrb	r3, [r3, r2]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_RTC_SetDate+0x1a>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e099      	b.n	8005b42 <HAL_RTC_SetDate+0x14e>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	2101      	movs	r1, #1
 8005a14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2221      	movs	r2, #33	; 0x21
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10e      	bne.n	8005a42 <HAL_RTC_SetDate+0x4e>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	001a      	movs	r2, r3
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d008      	beq.n	8005a42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2210      	movs	r2, #16
 8005a36:	4393      	bics	r3, r2
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	330a      	adds	r3, #10
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11c      	bne.n	8005a82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 fac0 	bl	8005fd2 <RTC_ByteToBcd2>
 8005a52:	0003      	movs	r3, r0
 8005a54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 fab9 	bl	8005fd2 <RTC_ByteToBcd2>
 8005a60:	0003      	movs	r3, r0
 8005a62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 fab1 	bl	8005fd2 <RTC_ByteToBcd2>
 8005a70:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a72:	0022      	movs	r2, r4
 8005a74:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e00e      	b.n	8005aa0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	78db      	ldrb	r3, [r3, #3]
 8005a86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a8e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005a94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	22ca      	movs	r2, #202	; 0xca
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2253      	movs	r2, #83	; 0x53
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 fa63 	bl	8005f7e <RTC_EnterInitMode>
 8005ab8:	1e03      	subs	r3, r0, #0
 8005aba:	d00d      	beq.n	8005ad8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	22ff      	movs	r2, #255	; 0xff
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2221      	movs	r2, #33	; 0x21
 8005ac8:	2104      	movs	r1, #4
 8005aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e034      	b.n	8005b42 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	491b      	ldr	r1, [pc, #108]	; (8005b4c <HAL_RTC_SetDate+0x158>)
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	438a      	bics	r2, r1
 8005af2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2220      	movs	r2, #32
 8005afc:	4013      	ands	r3, r2
 8005afe:	d113      	bne.n	8005b28 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 fa14 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 8005b08:	1e03      	subs	r3, r0, #0
 8005b0a:	d00d      	beq.n	8005b28 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2221      	movs	r2, #33	; 0x21
 8005b18:	2104      	movs	r1, #4
 8005b1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	2100      	movs	r1, #0
 8005b22:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e00c      	b.n	8005b42 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	22ff      	movs	r2, #255	; 0xff
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2221      	movs	r2, #33	; 0x21
 8005b34:	2101      	movs	r1, #1
 8005b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
  }
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b007      	add	sp, #28
 8005b48:	bd90      	pop	{r4, r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	00ffff3f 	.word	0x00ffff3f

08005b50 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <HAL_RTC_GetDate+0x98>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	221f      	movs	r2, #31
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	223f      	movs	r2, #63	; 0x3f
 8005b88:	4013      	ands	r3, r2
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	0b5b      	lsrs	r3, r3, #13
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2207      	movs	r2, #7
 8005b98:	4013      	ands	r3, r2
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11a      	bne.n	8005bdc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 fa3a 	bl	8006024 <RTC_Bcd2ToByte>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fa31 	bl	8006024 <RTC_Bcd2ToByte>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	001a      	movs	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	789b      	ldrb	r3, [r3, #2]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 fa28 	bl	8006024 <RTC_Bcd2ToByte>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b006      	add	sp, #24
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	00ffff3f 	.word	0x00ffff3f

08005bec <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	5c9b      	ldrb	r3, [r3, r2]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_RTC_SetAlarm_IT+0x1a>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e130      	b.n	8005e68 <HAL_RTC_SetAlarm_IT+0x27c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2221      	movs	r2, #33	; 0x21
 8005c12:	2102      	movs	r1, #2
 8005c14:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d136      	bne.n	8005c8a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	4013      	ands	r3, r2
 8005c26:	d102      	bne.n	8005c2e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 f9cd 	bl	8005fd2 <RTC_ByteToBcd2>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 f9c6 	bl	8005fd2 <RTC_ByteToBcd2>
 8005c46:	0003      	movs	r3, r0
 8005c48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	789b      	ldrb	r3, [r3, #2]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 f9be 	bl	8005fd2 <RTC_ByteToBcd2>
 8005c56:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005c58:	0022      	movs	r2, r4
 8005c5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	78db      	ldrb	r3, [r3, #3]
 8005c60:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005c62:	431a      	orrs	r2, r3
 8005c64:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	5c9b      	ldrb	r3, [r3, r2]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 f9b0 	bl	8005fd2 <RTC_ByteToBcd2>
 8005c72:	0003      	movs	r3, r0
 8005c74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005c76:	0022      	movs	r2, r4
 8005c78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005c7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	e022      	b.n	8005cd0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	4013      	ands	r3, r2
 8005c94:	d102      	bne.n	8005c9c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ca8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005cae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	78db      	ldrb	r3, [r3, #3]
 8005cb4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005cb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2120      	movs	r1, #32
 8005cbc:	5c5b      	ldrb	r3, [r3, r1]
 8005cbe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005cc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005cc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	22ca      	movs	r2, #202	; 0xca
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2253      	movs	r2, #83	; 0x53
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d14e      	bne.n	8005d96 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	495b      	ldr	r1, [pc, #364]	; (8005e70 <HAL_RTC_SetAlarm_IT+0x284>)
 8005d04:	400a      	ands	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	22ff      	movs	r2, #255	; 0xff
 8005d10:	401a      	ands	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4957      	ldr	r1, [pc, #348]	; (8005e74 <HAL_RTC_SetAlarm_IT+0x288>)
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d1c:	f7fd ffaa 	bl	8003c74 <HAL_GetTick>
 8005d20:	0003      	movs	r3, r0
 8005d22:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d24:	e016      	b.n	8005d54 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d26:	f7fd ffa5 	bl	8003c74 <HAL_GetTick>
 8005d2a:	0002      	movs	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	23fa      	movs	r3, #250	; 0xfa
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d90d      	bls.n	8005d54 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2221      	movs	r2, #33	; 0x21
 8005d44:	2103      	movs	r1, #3
 8005d46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e089      	b.n	8005e68 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d0e2      	beq.n	8005d26 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	0049      	lsls	r1, r1, #1
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2180      	movs	r1, #128	; 0x80
 8005d8e:	0149      	lsls	r1, r1, #5
 8005d90:	430a      	orrs	r2, r1
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	e04d      	b.n	8005e32 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4935      	ldr	r1, [pc, #212]	; (8005e78 <HAL_RTC_SetAlarm_IT+0x28c>)
 8005da2:	400a      	ands	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	22ff      	movs	r2, #255	; 0xff
 8005dae:	401a      	ands	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4931      	ldr	r1, [pc, #196]	; (8005e7c <HAL_RTC_SetAlarm_IT+0x290>)
 8005db6:	430a      	orrs	r2, r1
 8005db8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dba:	f7fd ff5b 	bl	8003c74 <HAL_GetTick>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005dc2:	e016      	b.n	8005df2 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dc4:	f7fd ff56 	bl	8003c74 <HAL_GetTick>
 8005dc8:	0002      	movs	r2, r0
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	23fa      	movs	r3, #250	; 0xfa
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d90d      	bls.n	8005df2 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	22ff      	movs	r2, #255	; 0xff
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2221      	movs	r2, #33	; 0x21
 8005de2:	2103      	movs	r1, #3
 8005de4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	2100      	movs	r1, #0
 8005dec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e03a      	b.n	8005e68 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d0e2      	beq.n	8005dc4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	0089      	lsls	r1, r1, #2
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2180      	movs	r1, #128	; 0x80
 8005e2c:	0189      	lsls	r1, r1, #6
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e38:	2180      	movs	r1, #128	; 0x80
 8005e3a:	0289      	lsls	r1, r1, #10
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005e40:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e46:	2180      	movs	r1, #128	; 0x80
 8005e48:	0289      	lsls	r1, r1, #10
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	22ff      	movs	r2, #255	; 0xff
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	2100      	movs	r1, #0
 8005e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b009      	add	sp, #36	; 0x24
 8005e6e:	bd90      	pop	{r4, r7, pc}
 8005e70:	fffffeff 	.word	0xfffffeff
 8005e74:	fffffe7f 	.word	0xfffffe7f
 8005e78:	fffffdff 	.word	0xfffffdff
 8005e7c:	fffffd7f 	.word	0xfffffd7f
 8005e80:	40010400 	.word	0x40010400

08005e84 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	015b      	lsls	r3, r3, #5
 8005e96:	4013      	ands	r3, r2
 8005e98:	d014      	beq.n	8005ec4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 f838 	bl	8005f20 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	22ff      	movs	r2, #255	; 0xff
 8005eb8:	401a      	ands	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4915      	ldr	r1, [pc, #84]	; (8005f14 <HAL_RTC_AlarmIRQHandler+0x90>)
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d014      	beq.n	8005efc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4013      	ands	r3, r2
 8005ede:	d00d      	beq.n	8005efc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 fa0e 	bl	8006304 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	22ff      	movs	r2, #255	; 0xff
 8005ef0:	401a      	ands	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <HAL_RTC_AlarmIRQHandler+0x94>)
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005efc:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_RTC_AlarmIRQHandler+0x98>)
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	0292      	lsls	r2, r2, #10
 8005f02:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2221      	movs	r2, #33	; 0x21
 8005f08:	2101      	movs	r1, #1
 8005f0a:	5499      	strb	r1, [r3, r2]
}
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b002      	add	sp, #8
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	fffffe7f 	.word	0xfffffe7f
 8005f18:	fffffd7f 	.word	0xfffffd7f
 8005f1c:	40010400 	.word	0x40010400

08005f20 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	21a0      	movs	r1, #160	; 0xa0
 8005f44:	438a      	bics	r2, r1
 8005f46:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f48:	f7fd fe94 	bl	8003c74 <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f50:	e00a      	b.n	8005f68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f52:	f7fd fe8f 	bl	8003c74 <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	23fa      	movs	r3, #250	; 0xfa
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d901      	bls.n	8005f68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	4013      	ands	r3, r2
 8005f72:	d0ee      	beq.n	8005f52 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b004      	add	sp, #16
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2240      	movs	r2, #64	; 0x40
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d11a      	bne.n	8005fc8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	4252      	negs	r2, r2
 8005f9a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f9c:	f7fd fe6a 	bl	8003c74 <HAL_GetTick>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fa4:	e00a      	b.n	8005fbc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fa6:	f7fd fe65 	bl	8003c74 <HAL_GetTick>
 8005faa:	0002      	movs	r2, r0
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	23fa      	movs	r3, #250	; 0xfa
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d901      	bls.n	8005fbc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e006      	b.n	8005fca <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d0ee      	beq.n	8005fa6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b004      	add	sp, #16
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	0002      	movs	r2, r0
 8005fda:	1dfb      	adds	r3, r7, #7
 8005fdc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005fe2:	230b      	movs	r3, #11
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	1dfa      	adds	r2, r7, #7
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8005fec:	e008      	b.n	8006000 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005ff4:	220b      	movs	r2, #11
 8005ff6:	18bb      	adds	r3, r7, r2
 8005ff8:	18ba      	adds	r2, r7, r2
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	3a0a      	subs	r2, #10
 8005ffe:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006000:	230b      	movs	r3, #11
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b09      	cmp	r3, #9
 8006008:	d8f1      	bhi.n	8005fee <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	b2da      	uxtb	r2, r3
 8006012:	230b      	movs	r3, #11
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4313      	orrs	r3, r2
 800601a:	b2db      	uxtb	r3, r3
}
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b004      	add	sp, #16
 8006022:	bd80      	pop	{r7, pc}

08006024 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	0002      	movs	r2, r0
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006030:	1dfb      	adds	r3, r7, #7
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	b2db      	uxtb	r3, r3
 8006038:	001a      	movs	r2, r3
 800603a:	0013      	movs	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	189b      	adds	r3, r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	1dfb      	adds	r3, r7, #7
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	210f      	movs	r1, #15
 800604e:	400b      	ands	r3, r1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	b2db      	uxtb	r3, r3
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b004      	add	sp, #16
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	5c9b      	ldrb	r3, [r3, r2]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006076:	2302      	movs	r3, #2
 8006078:	e0ad      	b.n	80061d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	2101      	movs	r1, #1
 8006080:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2221      	movs	r2, #33	; 0x21
 8006086:	2102      	movs	r1, #2
 8006088:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	22ca      	movs	r2, #202	; 0xca
 8006090:	625a      	str	r2, [r3, #36]	; 0x24
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2253      	movs	r2, #83	; 0x53
 8006098:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4013      	ands	r3, r2
 80060a6:	d021      	beq.n	80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80060a8:	f7fd fde4 	bl	8003c74 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80060b0:	e016      	b.n	80060e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060b2:	f7fd fddf 	bl	8003c74 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	23fa      	movs	r3, #250	; 0xfa
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d90d      	bls.n	80060e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2221      	movs	r2, #33	; 0x21
 80060d0:	2103      	movs	r1, #3
 80060d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	2100      	movs	r1, #0
 80060da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e07a      	b.n	80061d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2204      	movs	r2, #4
 80060e8:	4013      	ands	r3, r2
 80060ea:	d1e2      	bne.n	80060b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	493a      	ldr	r1, [pc, #232]	; (80061e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80060f8:	400a      	ands	r2, r1
 80060fa:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	22ff      	movs	r2, #255	; 0xff
 8006104:	401a      	ands	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4936      	ldr	r1, [pc, #216]	; (80061e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 800610c:	430a      	orrs	r2, r1
 800610e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006110:	f7fd fdb0 	bl	8003c74 <HAL_GetTick>
 8006114:	0003      	movs	r3, r0
 8006116:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006118:	e016      	b.n	8006148 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800611a:	f7fd fdab 	bl	8003c74 <HAL_GetTick>
 800611e:	0002      	movs	r2, r0
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	23fa      	movs	r3, #250	; 0xfa
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	429a      	cmp	r2, r3
 800612a:	d90d      	bls.n	8006148 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2221      	movs	r2, #33	; 0x21
 8006138:	2103      	movs	r1, #3
 800613a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	2100      	movs	r1, #0
 8006142:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e046      	b.n	80061d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	2204      	movs	r2, #4
 8006150:	4013      	ands	r3, r2
 8006152:	d0e2      	beq.n	800611a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2107      	movs	r1, #7
 8006168:	438a      	bics	r2, r1
 800616a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800617c:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006182:	2180      	movs	r1, #128	; 0x80
 8006184:	0349      	lsls	r1, r1, #13
 8006186:	430a      	orrs	r2, r1
 8006188:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800618a:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	0349      	lsls	r1, r1, #13
 8006194:	430a      	orrs	r2, r1
 8006196:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	01c9      	lsls	r1, r1, #7
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2180      	movs	r1, #128	; 0x80
 80061b6:	00c9      	lsls	r1, r1, #3
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	22ff      	movs	r2, #255	; 0xff
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2221      	movs	r2, #33	; 0x21
 80061c8:	2101      	movs	r1, #1
 80061ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	2100      	movs	r1, #0
 80061d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b006      	add	sp, #24
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	fffffbff 	.word	0xfffffbff
 80061e4:	fffffb7f 	.word	0xfffffb7f
 80061e8:	40010400 	.word	0x40010400

080061ec <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	5c9b      	ldrb	r3, [r3, r2]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80061fe:	2302      	movs	r3, #2
 8006200:	e04e      	b.n	80062a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	2101      	movs	r1, #1
 8006208:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2221      	movs	r2, #33	; 0x21
 800620e:	2102      	movs	r1, #2
 8006210:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	22ca      	movs	r2, #202	; 0xca
 8006218:	625a      	str	r2, [r3, #36]	; 0x24
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2253      	movs	r2, #83	; 0x53
 8006220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	491e      	ldr	r1, [pc, #120]	; (80062a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 800622e:	400a      	ands	r2, r1
 8006230:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	491b      	ldr	r1, [pc, #108]	; (80062ac <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800623e:	400a      	ands	r2, r1
 8006240:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006242:	f7fd fd17 	bl	8003c74 <HAL_GetTick>
 8006246:	0003      	movs	r3, r0
 8006248:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800624a:	e016      	b.n	800627a <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800624c:	f7fd fd12 	bl	8003c74 <HAL_GetTick>
 8006250:	0002      	movs	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	23fa      	movs	r3, #250	; 0xfa
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	429a      	cmp	r2, r3
 800625c:	d90d      	bls.n	800627a <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	22ff      	movs	r2, #255	; 0xff
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2221      	movs	r2, #33	; 0x21
 800626a:	2103      	movs	r1, #3
 800626c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e012      	b.n	80062a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2204      	movs	r2, #4
 8006282:	4013      	ands	r3, r2
 8006284:	d0e2      	beq.n	800624c <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2221      	movs	r2, #33	; 0x21
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	0018      	movs	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b004      	add	sp, #16
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	fffffbff 	.word	0xfffffbff
 80062ac:	ffffbfff 	.word	0xffffbfff

080062b0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4013      	ands	r3, r2
 80062c4:	d00d      	beq.n	80062e2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f01f fcb9 	bl	8025c40 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	22ff      	movs	r2, #255	; 0xff
 80062d6:	401a      	ands	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4907      	ldr	r1, [pc, #28]	; (80062fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80062de:	430a      	orrs	r2, r1
 80062e0:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	0352      	lsls	r2, r2, #13
 80062e8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2221      	movs	r2, #33	; 0x21
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b002      	add	sp, #8
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	fffffb7f 	.word	0xfffffb7f
 8006300:	40010400 	.word	0x40010400

08006304 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800630c:	46c0      	nop			; (mov r8, r8)
 800630e:	46bd      	mov	sp, r7
 8006310:	b002      	add	sp, #8
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e059      	b.n	80063da <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2251      	movs	r2, #81	; 0x51
 8006330:	5c9b      	ldrb	r3, [r3, r2]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d107      	bne.n	8006348 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2250      	movs	r2, #80	; 0x50
 800633c:	2100      	movs	r1, #0
 800633e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0018      	movs	r0, r3
 8006344:	f7fd f99e 	bl	8003684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2251      	movs	r2, #81	; 0x51
 800634c:	2102      	movs	r1, #2
 800634e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2140      	movs	r1, #64	; 0x40
 800635c:	438a      	bics	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6999      	ldr	r1, [r3, #24]
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	400b      	ands	r3, r1
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	0011      	movs	r1, r2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	0c1b      	lsrs	r3, r3, #16
 80063a8:	2204      	movs	r2, #4
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4907      	ldr	r1, [pc, #28]	; (80063e4 <HAL_SPI_Init+0xd0>)
 80063c6:	400a      	ands	r2, r1
 80063c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2251      	movs	r2, #81	; 0x51
 80063d4:	2101      	movs	r1, #1
 80063d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b002      	add	sp, #8
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	fffff7ff 	.word	0xfffff7ff

080063e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08c      	sub	sp, #48	; 0x30
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	001a      	movs	r2, r3
 80063f6:	1cbb      	adds	r3, r7, #2
 80063f8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063fa:	2301      	movs	r3, #1
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063fe:	232b      	movs	r3, #43	; 0x2b
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2250      	movs	r2, #80	; 0x50
 800640a:	5c9b      	ldrb	r3, [r3, r2]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x2c>
 8006410:	2302      	movs	r3, #2
 8006412:	e1a1      	b.n	8006758 <HAL_SPI_TransmitReceive+0x370>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2250      	movs	r2, #80	; 0x50
 8006418:	2101      	movs	r1, #1
 800641a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800641c:	f7fd fc2a 	bl	8003c74 <HAL_GetTick>
 8006420:	0003      	movs	r3, r0
 8006422:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006424:	2023      	movs	r0, #35	; 0x23
 8006426:	183b      	adds	r3, r7, r0
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	2151      	movs	r1, #81	; 0x51
 800642c:	5c52      	ldrb	r2, [r2, r1]
 800642e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006436:	231a      	movs	r3, #26
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	1cba      	adds	r2, r7, #2
 800643c:	8812      	ldrh	r2, [r2, #0]
 800643e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006440:	183b      	adds	r3, r7, r0
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d012      	beq.n	800646e <HAL_SPI_TransmitReceive+0x86>
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	2382      	movs	r3, #130	; 0x82
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	429a      	cmp	r2, r3
 8006450:	d108      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x7c>
 800645a:	2323      	movs	r3, #35	; 0x23
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d004      	beq.n	800646e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006464:	232b      	movs	r3, #43	; 0x2b
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2202      	movs	r2, #2
 800646a:	701a      	strb	r2, [r3, #0]
    goto error;
 800646c:	e169      	b.n	8006742 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x9a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x9a>
 800647a:	1cbb      	adds	r3, r7, #2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d104      	bne.n	800648c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8006482:	232b      	movs	r3, #43	; 0x2b
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
    goto error;
 800648a:	e15a      	b.n	8006742 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2251      	movs	r2, #81	; 0x51
 8006490:	5c9b      	ldrb	r3, [r3, r2]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b04      	cmp	r3, #4
 8006496:	d003      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2251      	movs	r2, #81	; 0x51
 800649c:	2105      	movs	r1, #5
 800649e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1cba      	adds	r2, r7, #2
 80064b0:	8812      	ldrh	r2, [r2, #0]
 80064b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1cba      	adds	r2, r7, #2
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1cba      	adds	r2, r7, #2
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1cba      	adds	r2, r7, #2
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2240      	movs	r2, #64	; 0x40
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	d007      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2140      	movs	r1, #64	; 0x40
 80064f8:	430a      	orrs	r2, r1
 80064fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	429a      	cmp	r2, r3
 8006506:	d000      	beq.n	800650a <HAL_SPI_TransmitReceive+0x122>
 8006508:	e07a      	b.n	8006600 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <HAL_SPI_TransmitReceive+0x134>
 8006512:	231a      	movs	r3, #26
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d166      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006540:	e053      	b.n	80065ea <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2202      	movs	r2, #2
 800654a:	4013      	ands	r3, r2
 800654c:	2b02      	cmp	r3, #2
 800654e:	d11b      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x1a0>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x1a0>
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d113      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	881a      	ldrh	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	1c9a      	adds	r2, r3, #2
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2201      	movs	r2, #1
 8006590:	4013      	ands	r3, r2
 8006592:	2b01      	cmp	r3, #1
 8006594:	d119      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x1e2>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d014      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	b292      	uxth	r2, r2
 80065ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065c6:	2301      	movs	r3, #1
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065ca:	f7fd fb53 	bl	8003c74 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d807      	bhi.n	80065ea <HAL_SPI_TransmitReceive+0x202>
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	3301      	adds	r3, #1
 80065de:	d004      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80065e0:	232b      	movs	r3, #43	; 0x2b
 80065e2:	18fb      	adds	r3, r7, r3
 80065e4:	2203      	movs	r2, #3
 80065e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80065e8:	e0ab      	b.n	8006742 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1a6      	bne.n	8006542 <HAL_SPI_TransmitReceive+0x15a>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1a1      	bne.n	8006542 <HAL_SPI_TransmitReceive+0x15a>
 80065fe:	e07f      	b.n	8006700 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x22c>
 8006608:	231a      	movs	r3, #26
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d000      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x22c>
 8006612:	e06b      	b.n	80066ec <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663a:	e057      	b.n	80066ec <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2202      	movs	r2, #2
 8006644:	4013      	ands	r3, r2
 8006646:	2b02      	cmp	r3, #2
 8006648:	d11c      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x29c>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <HAL_SPI_TransmitReceive+0x29c>
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d114      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2201      	movs	r2, #1
 800668c:	4013      	ands	r3, r2
 800668e:	2b01      	cmp	r3, #1
 8006690:	d119      	bne.n	80066c6 <HAL_SPI_TransmitReceive+0x2de>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d014      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c2:	2301      	movs	r3, #1
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066c6:	f7fd fad5 	bl	8003c74 <HAL_GetTick>
 80066ca:	0002      	movs	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d802      	bhi.n	80066dc <HAL_SPI_TransmitReceive+0x2f4>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	3301      	adds	r3, #1
 80066da:	d102      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x2fa>
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80066e2:	232b      	movs	r3, #43	; 0x2b
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	2203      	movs	r2, #3
 80066e8:	701a      	strb	r2, [r3, #0]
        goto error;
 80066ea:	e02a      	b.n	8006742 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1a2      	bne.n	800663c <HAL_SPI_TransmitReceive+0x254>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d19d      	bne.n	800663c <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	0018      	movs	r0, r3
 8006708:	f000 f89a 	bl	8006840 <SPI_EndRxTxTransaction>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d007      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8006710:	232b      	movs	r3, #43	; 0x2b
 8006712:	18fb      	adds	r3, r7, r3
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800671e:	e010      	b.n	8006742 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	e000      	b.n	8006742 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8006740:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2251      	movs	r2, #81	; 0x51
 8006746:	2101      	movs	r1, #1
 8006748:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2250      	movs	r2, #80	; 0x50
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006752:	232b      	movs	r3, #43	; 0x2b
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	781b      	ldrb	r3, [r3, #0]
}
 8006758:	0018      	movs	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	b00c      	add	sp, #48	; 0x30
 800675e:	bd80      	pop	{r7, pc}

08006760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	1dfb      	adds	r3, r7, #7
 800676e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006770:	e050      	b.n	8006814 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	d04d      	beq.n	8006814 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006778:	f7fd fa7c 	bl	8003c74 <HAL_GetTick>
 800677c:	0002      	movs	r2, r0
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d902      	bls.n	800678e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d142      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	21e0      	movs	r1, #224	; 0xe0
 800679a:	438a      	bics	r2, r1
 800679c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	2382      	movs	r3, #130	; 0x82
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d113      	bne.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d005      	beq.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	429a      	cmp	r2, r3
 80067c0:	d107      	bne.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	438a      	bics	r2, r1
 80067d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	019b      	lsls	r3, r3, #6
 80067da:	429a      	cmp	r2, r3
 80067dc:	d110      	bne.n	8006800 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4914      	ldr	r1, [pc, #80]	; (800683c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80067ea:	400a      	ands	r2, r1
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	0189      	lsls	r1, r1, #6
 80067fc:	430a      	orrs	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2251      	movs	r2, #81	; 0x51
 8006804:	2101      	movs	r1, #1
 8006806:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2250      	movs	r2, #80	; 0x50
 800680c:	2100      	movs	r1, #0
 800680e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e00f      	b.n	8006834 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4013      	ands	r3, r2
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	425a      	negs	r2, r3
 8006824:	4153      	adcs	r3, r2
 8006826:	b2db      	uxtb	r3, r3
 8006828:	001a      	movs	r2, r3
 800682a:	1dfb      	adds	r3, r7, #7
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d19f      	bne.n	8006772 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	0018      	movs	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}
 800683c:	ffffdfff 	.word	0xffffdfff

08006840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	2382      	movs	r3, #130	; 0x82
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	429a      	cmp	r2, r3
 8006856:	d112      	bne.n	800687e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	0013      	movs	r3, r2
 8006862:	2200      	movs	r2, #0
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	f7ff ff7b 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 800686a:	1e03      	subs	r3, r0, #0
 800686c:	d020      	beq.n	80068b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	2220      	movs	r2, #32
 8006874:	431a      	orrs	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e019      	b.n	80068b2 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2251      	movs	r2, #81	; 0x51
 8006882:	5c9b      	ldrb	r3, [r3, r2]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b05      	cmp	r3, #5
 8006888:	d112      	bne.n	80068b0 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	0013      	movs	r3, r2
 8006894:	2200      	movs	r2, #0
 8006896:	2101      	movs	r1, #1
 8006898:	f7ff ff62 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d007      	beq.n	80068b0 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	2220      	movs	r2, #32
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e000      	b.n	80068b2 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b004      	add	sp, #16
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e044      	b.n	8006958 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2270      	movs	r2, #112	; 0x70
 80068da:	2100      	movs	r1, #0
 80068dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7fd f8c3 	bl	8003a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2224      	movs	r2, #36	; 0x24
 80068ea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2101      	movs	r1, #1
 80068f8:	438a      	bics	r2, r1
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	0018      	movs	r0, r3
 8006900:	f000 fabe 	bl	8006e80 <UART_SetConfig>
 8006904:	0003      	movs	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e024      	b.n	8006958 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	0018      	movs	r0, r3
 800691a:	f000 fde5 	bl	80074e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	490d      	ldr	r1, [pc, #52]	; (8006960 <HAL_UART_Init+0xa4>)
 800692a:	400a      	ands	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	212a      	movs	r1, #42	; 0x2a
 800693a:	438a      	bics	r2, r1
 800693c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2101      	movs	r1, #1
 800694a:	430a      	orrs	r2, r1
 800694c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fe7d 	bl	8007650 <UART_CheckIdleState>
 8006956:	0003      	movs	r3, r0
}
 8006958:	0018      	movs	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	b002      	add	sp, #8
 800695e:	bd80      	pop	{r7, pc}
 8006960:	ffffb7ff 	.word	0xffffb7ff

08006964 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006978:	2b20      	cmp	r3, #32
 800697a:	d000      	beq.n	800697e <HAL_UART_Transmit+0x1a>
 800697c:	e094      	b.n	8006aa8 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_UART_Transmit+0x28>
 8006984:	1dbb      	adds	r3, r7, #6
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e08c      	b.n	8006aaa <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	015b      	lsls	r3, r3, #5
 8006998:	429a      	cmp	r2, r3
 800699a:	d109      	bne.n	80069b0 <HAL_UART_Transmit+0x4c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2201      	movs	r2, #1
 80069a8:	4013      	ands	r3, r2
 80069aa:	d001      	beq.n	80069b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e07c      	b.n	8006aaa <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2270      	movs	r2, #112	; 0x70
 80069b4:	5c9b      	ldrb	r3, [r3, r2]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_UART_Transmit+0x5a>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e075      	b.n	8006aaa <HAL_UART_Transmit+0x146>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2270      	movs	r2, #112	; 0x70
 80069c2:	2101      	movs	r1, #1
 80069c4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2221      	movs	r2, #33	; 0x21
 80069d0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069d2:	f7fd f94f 	bl	8003c74 <HAL_GetTick>
 80069d6:	0003      	movs	r3, r0
 80069d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1dba      	adds	r2, r7, #6
 80069de:	2150      	movs	r1, #80	; 0x50
 80069e0:	8812      	ldrh	r2, [r2, #0]
 80069e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1dba      	adds	r2, r7, #6
 80069e8:	2152      	movs	r1, #82	; 0x52
 80069ea:	8812      	ldrh	r2, [r2, #0]
 80069ec:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	015b      	lsls	r3, r3, #5
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d108      	bne.n	8006a0c <HAL_UART_Transmit+0xa8>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d104      	bne.n	8006a0c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e003      	b.n	8006a14 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a14:	e02c      	b.n	8006a70 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	0013      	movs	r3, r2
 8006a20:	2200      	movs	r2, #0
 8006a22:	2180      	movs	r1, #128	; 0x80
 8006a24:	f000 fe5a 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 8006a28:	1e03      	subs	r3, r0, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e03c      	b.n	8006aaa <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	001a      	movs	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	05d2      	lsls	r2, r2, #23
 8006a42:	0dd2      	lsrs	r2, r2, #23
 8006a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	3302      	adds	r3, #2
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	e007      	b.n	8006a5e <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2252      	movs	r2, #82	; 0x52
 8006a62:	5a9b      	ldrh	r3, [r3, r2]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b299      	uxth	r1, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2252      	movs	r2, #82	; 0x52
 8006a6e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2252      	movs	r2, #82	; 0x52
 8006a74:	5a9b      	ldrh	r3, [r3, r2]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1cc      	bne.n	8006a16 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	0013      	movs	r3, r2
 8006a86:	2200      	movs	r2, #0
 8006a88:	2140      	movs	r1, #64	; 0x40
 8006a8a:	f000 fe27 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 8006a8e:	1e03      	subs	r3, r0, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e009      	b.n	8006aaa <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2270      	movs	r2, #112	; 0x70
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	0018      	movs	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b008      	add	sp, #32
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	1dbb      	adds	r3, r7, #6
 8006ac0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d000      	beq.n	8006acc <HAL_UART_Receive_IT+0x18>
 8006aca:	e09f      	b.n	8006c0c <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_UART_Receive_IT+0x26>
 8006ad2:	1dbb      	adds	r3, r7, #6
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e097      	b.n	8006c0e <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	015b      	lsls	r3, r3, #5
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d109      	bne.n	8006afe <HAL_UART_Receive_IT+0x4a>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2201      	movs	r2, #1
 8006af6:	4013      	ands	r3, r2
 8006af8:	d001      	beq.n	8006afe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e087      	b.n	8006c0e <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2270      	movs	r2, #112	; 0x70
 8006b02:	5c9b      	ldrb	r3, [r3, r2]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Receive_IT+0x58>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e080      	b.n	8006c0e <HAL_UART_Receive_IT+0x15a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2270      	movs	r2, #112	; 0x70
 8006b10:	2101      	movs	r1, #1
 8006b12:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1dba      	adds	r2, r7, #6
 8006b1e:	2158      	movs	r1, #88	; 0x58
 8006b20:	8812      	ldrh	r2, [r2, #0]
 8006b22:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1dba      	adds	r2, r7, #6
 8006b28:	215a      	movs	r1, #90	; 0x5a
 8006b2a:	8812      	ldrh	r2, [r2, #0]
 8006b2c:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	015b      	lsls	r3, r3, #5
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d10d      	bne.n	8006b5c <HAL_UART_Receive_IT+0xa8>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_UART_Receive_IT+0x9e>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	225c      	movs	r2, #92	; 0x5c
 8006b4c:	4932      	ldr	r1, [pc, #200]	; (8006c18 <HAL_UART_Receive_IT+0x164>)
 8006b4e:	5299      	strh	r1, [r3, r2]
 8006b50:	e02e      	b.n	8006bb0 <HAL_UART_Receive_IT+0xfc>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	225c      	movs	r2, #92	; 0x5c
 8006b56:	21ff      	movs	r1, #255	; 0xff
 8006b58:	5299      	strh	r1, [r3, r2]
 8006b5a:	e029      	b.n	8006bb0 <HAL_UART_Receive_IT+0xfc>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10d      	bne.n	8006b80 <HAL_UART_Receive_IT+0xcc>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <HAL_UART_Receive_IT+0xc2>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	225c      	movs	r2, #92	; 0x5c
 8006b70:	21ff      	movs	r1, #255	; 0xff
 8006b72:	5299      	strh	r1, [r3, r2]
 8006b74:	e01c      	b.n	8006bb0 <HAL_UART_Receive_IT+0xfc>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	225c      	movs	r2, #92	; 0x5c
 8006b7a:	217f      	movs	r1, #127	; 0x7f
 8006b7c:	5299      	strh	r1, [r3, r2]
 8006b7e:	e017      	b.n	8006bb0 <HAL_UART_Receive_IT+0xfc>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	2380      	movs	r3, #128	; 0x80
 8006b86:	055b      	lsls	r3, r3, #21
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_UART_Receive_IT+0xf4>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_UART_Receive_IT+0xea>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	225c      	movs	r2, #92	; 0x5c
 8006b98:	217f      	movs	r1, #127	; 0x7f
 8006b9a:	5299      	strh	r1, [r3, r2]
 8006b9c:	e008      	b.n	8006bb0 <HAL_UART_Receive_IT+0xfc>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	225c      	movs	r2, #92	; 0x5c
 8006ba2:	213f      	movs	r1, #63	; 0x3f
 8006ba4:	5299      	strh	r1, [r3, r2]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Receive_IT+0xfc>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	225c      	movs	r2, #92	; 0x5c
 8006bac:	2100      	movs	r1, #0
 8006bae:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2222      	movs	r2, #34	; 0x22
 8006bba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	015b      	lsls	r3, r3, #5
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d107      	bne.n	8006be8 <HAL_UART_Receive_IT+0x134>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4a0e      	ldr	r2, [pc, #56]	; (8006c1c <HAL_UART_Receive_IT+0x168>)
 8006be4:	661a      	str	r2, [r3, #96]	; 0x60
 8006be6:	e002      	b.n	8006bee <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4a0d      	ldr	r2, [pc, #52]	; (8006c20 <HAL_UART_Receive_IT+0x16c>)
 8006bec:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2270      	movs	r2, #112	; 0x70
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2190      	movs	r1, #144	; 0x90
 8006c02:	0049      	lsls	r1, r1, #1
 8006c04:	430a      	orrs	r2, r1
 8006c06:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e000      	b.n	8006c0e <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b004      	add	sp, #16
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	000001ff 	.word	0x000001ff
 8006c1c:	080078d1 	.word	0x080078d1
 8006c20:	08007815 	.word	0x08007815

08006c24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	220f      	movs	r2, #15
 8006c48:	4013      	ands	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d112      	bne.n	8006c78 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2220      	movs	r2, #32
 8006c56:	4013      	ands	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d00a      	beq.n	8006c78 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d100      	bne.n	8006c6c <HAL_UART_IRQHandler+0x48>
 8006c6a:	e0f6      	b.n	8006e5a <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	0010      	movs	r0, r2
 8006c74:	4798      	blx	r3
      }
      return;
 8006c76:	e0f0      	b.n	8006e5a <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d100      	bne.n	8006c80 <HAL_UART_IRQHandler+0x5c>
 8006c7e:	e0b8      	b.n	8006df2 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2201      	movs	r2, #1
 8006c84:	4013      	ands	r3, r2
 8006c86:	d105      	bne.n	8006c94 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	2390      	movs	r3, #144	; 0x90
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d100      	bne.n	8006c94 <HAL_UART_IRQHandler+0x70>
 8006c92:	e0ae      	b.n	8006df2 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2201      	movs	r2, #1
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_UART_IRQHandler+0x96>
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2201      	movs	r2, #1
 8006cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	d00d      	beq.n	8006cde <HAL_UART_IRQHandler+0xba>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d00d      	beq.n	8006d02 <HAL_UART_IRQHandler+0xde>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	4013      	ands	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2208      	movs	r2, #8
 8006d06:	4013      	ands	r3, r2
 8006d08:	d011      	beq.n	8006d2e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d103      	bne.n	8006d1a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2201      	movs	r2, #1
 8006d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d18:	d009      	beq.n	8006d2e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2208      	movs	r2, #8
 8006d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d26:	2208      	movs	r2, #8
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d100      	bne.n	8006d38 <HAL_UART_IRQHandler+0x114>
 8006d36:	e092      	b.n	8006e5e <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d00c      	beq.n	8006d5a <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2220      	movs	r2, #32
 8006d44:	4013      	ands	r3, r2
 8006d46:	d008      	beq.n	8006d5a <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	0010      	movs	r0, r2
 8006d58:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2240      	movs	r2, #64	; 0x40
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d003      	beq.n	8006d76 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d74:	d033      	beq.n	8006dde <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f000 fcf9 	bl	8007770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2240      	movs	r2, #64	; 0x40
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d123      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2140      	movs	r1, #64	; 0x40
 8006d98:	438a      	bics	r2, r1
 8006d9a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d012      	beq.n	8006dca <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da8:	4a30      	ldr	r2, [pc, #192]	; (8006e6c <HAL_UART_IRQHandler+0x248>)
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db0:	0018      	movs	r0, r3
 8006db2:	f7fd faf7 	bl	80043a4 <HAL_DMA_Abort_IT>
 8006db6:	1e03      	subs	r3, r0, #0
 8006db8:	d019      	beq.n	8006dee <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	e011      	b.n	8006dee <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f01e fa45 	bl	802525c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd2:	e00c      	b.n	8006dee <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f01e fa40 	bl	802525c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	e007      	b.n	8006dee <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f01e fa3b 	bl	802525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006dec:	e037      	b.n	8006e5e <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dee:	46c0      	nop			; (mov r8, r8)
    return;
 8006df0:	e035      	b.n	8006e5e <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	035b      	lsls	r3, r3, #13
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	2380      	movs	r3, #128	; 0x80
 8006e00:	03db      	lsls	r3, r3, #15
 8006e02:	4013      	ands	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2280      	movs	r2, #128	; 0x80
 8006e0c:	0352      	lsls	r2, r2, #13
 8006e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f01e fd42 	bl	802589c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e18:	e024      	b.n	8006e64 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d00d      	beq.n	8006e3e <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2280      	movs	r2, #128	; 0x80
 8006e26:	4013      	ands	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d017      	beq.n	8006e62 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	0010      	movs	r0, r2
 8006e3a:	4798      	blx	r3
    }
    return;
 8006e3c:	e011      	b.n	8006e62 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2240      	movs	r2, #64	; 0x40
 8006e42:	4013      	ands	r3, r2
 8006e44:	d00e      	beq.n	8006e64 <HAL_UART_IRQHandler+0x240>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d00a      	beq.n	8006e64 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 fcc4 	bl	80077de <UART_EndTransmit_IT>
    return;
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	e004      	b.n	8006e64 <HAL_UART_IRQHandler+0x240>
      return;
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	e002      	b.n	8006e64 <HAL_UART_IRQHandler+0x240>
    return;
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	e000      	b.n	8006e64 <HAL_UART_IRQHandler+0x240>
    return;
 8006e62:	46c0      	nop			; (mov r8, r8)
  }

}
 8006e64:	46bd      	mov	sp, r7
 8006e66:	b008      	add	sp, #32
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	46c0      	nop			; (mov r8, r8)
 8006e6c:	080077b1 	.word	0x080077b1

08006e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b002      	add	sp, #8
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e80:	b5b0      	push	{r4, r5, r7, lr}
 8006e82:	b08e      	sub	sp, #56	; 0x38
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006e88:	231b      	movs	r3, #27
 8006e8a:	2218      	movs	r2, #24
 8006e8c:	4694      	mov	ip, r2
 8006e8e:	44bc      	add	ip, r7
 8006e90:	4463      	add	r3, ip
 8006e92:	2210      	movs	r2, #16
 8006e94:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e9a:	2313      	movs	r3, #19
 8006e9c:	2218      	movs	r2, #24
 8006e9e:	4694      	mov	ip, r2
 8006ea0:	44bc      	add	ip, r7
 8006ea2:	4463      	add	r3, ip
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4aca      	ldr	r2, [pc, #808]	; (80071f4 <UART_SetConfig+0x374>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	0019      	movs	r1, r3
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4ac5      	ldr	r2, [pc, #788]	; (80071f8 <UART_SetConfig+0x378>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	0019      	movs	r1, r3
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4abf      	ldr	r2, [pc, #764]	; (80071fc <UART_SetConfig+0x37c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	4abb      	ldr	r2, [pc, #748]	; (8007200 <UART_SetConfig+0x380>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	0019      	movs	r1, r3
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4ab7      	ldr	r2, [pc, #732]	; (8007204 <UART_SetConfig+0x384>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d134      	bne.n	8006f96 <UART_SetConfig+0x116>
 8006f2c:	4bb6      	ldr	r3, [pc, #728]	; (8007208 <UART_SetConfig+0x388>)
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f30:	2203      	movs	r2, #3
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d015      	beq.n	8006f64 <UART_SetConfig+0xe4>
 8006f38:	d304      	bcc.n	8006f44 <UART_SetConfig+0xc4>
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d00a      	beq.n	8006f54 <UART_SetConfig+0xd4>
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d018      	beq.n	8006f74 <UART_SetConfig+0xf4>
 8006f42:	e01f      	b.n	8006f84 <UART_SetConfig+0x104>
 8006f44:	231b      	movs	r3, #27
 8006f46:	2218      	movs	r2, #24
 8006f48:	4694      	mov	ip, r2
 8006f4a:	44bc      	add	ip, r7
 8006f4c:	4463      	add	r3, ip
 8006f4e:	2201      	movs	r2, #1
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e0c5      	b.n	80070e0 <UART_SetConfig+0x260>
 8006f54:	231b      	movs	r3, #27
 8006f56:	2218      	movs	r2, #24
 8006f58:	4694      	mov	ip, r2
 8006f5a:	44bc      	add	ip, r7
 8006f5c:	4463      	add	r3, ip
 8006f5e:	2202      	movs	r2, #2
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e0bd      	b.n	80070e0 <UART_SetConfig+0x260>
 8006f64:	231b      	movs	r3, #27
 8006f66:	2218      	movs	r2, #24
 8006f68:	4694      	mov	ip, r2
 8006f6a:	44bc      	add	ip, r7
 8006f6c:	4463      	add	r3, ip
 8006f6e:	2204      	movs	r2, #4
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e0b5      	b.n	80070e0 <UART_SetConfig+0x260>
 8006f74:	231b      	movs	r3, #27
 8006f76:	2218      	movs	r2, #24
 8006f78:	4694      	mov	ip, r2
 8006f7a:	44bc      	add	ip, r7
 8006f7c:	4463      	add	r3, ip
 8006f7e:	2208      	movs	r2, #8
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e0ad      	b.n	80070e0 <UART_SetConfig+0x260>
 8006f84:	231b      	movs	r3, #27
 8006f86:	2218      	movs	r2, #24
 8006f88:	4694      	mov	ip, r2
 8006f8a:	44bc      	add	ip, r7
 8006f8c:	4463      	add	r3, ip
 8006f8e:	2210      	movs	r2, #16
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	e0a4      	b.n	80070e0 <UART_SetConfig+0x260>
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a9c      	ldr	r2, [pc, #624]	; (800720c <UART_SetConfig+0x38c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d137      	bne.n	8007010 <UART_SetConfig+0x190>
 8006fa0:	4b99      	ldr	r3, [pc, #612]	; (8007208 <UART_SetConfig+0x388>)
 8006fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa4:	220c      	movs	r2, #12
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d018      	beq.n	8006fde <UART_SetConfig+0x15e>
 8006fac:	d802      	bhi.n	8006fb4 <UART_SetConfig+0x134>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <UART_SetConfig+0x13e>
 8006fb2:	e024      	b.n	8006ffe <UART_SetConfig+0x17e>
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d00a      	beq.n	8006fce <UART_SetConfig+0x14e>
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d018      	beq.n	8006fee <UART_SetConfig+0x16e>
 8006fbc:	e01f      	b.n	8006ffe <UART_SetConfig+0x17e>
 8006fbe:	231b      	movs	r3, #27
 8006fc0:	2218      	movs	r2, #24
 8006fc2:	4694      	mov	ip, r2
 8006fc4:	44bc      	add	ip, r7
 8006fc6:	4463      	add	r3, ip
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e088      	b.n	80070e0 <UART_SetConfig+0x260>
 8006fce:	231b      	movs	r3, #27
 8006fd0:	2218      	movs	r2, #24
 8006fd2:	4694      	mov	ip, r2
 8006fd4:	44bc      	add	ip, r7
 8006fd6:	4463      	add	r3, ip
 8006fd8:	2202      	movs	r2, #2
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e080      	b.n	80070e0 <UART_SetConfig+0x260>
 8006fde:	231b      	movs	r3, #27
 8006fe0:	2218      	movs	r2, #24
 8006fe2:	4694      	mov	ip, r2
 8006fe4:	44bc      	add	ip, r7
 8006fe6:	4463      	add	r3, ip
 8006fe8:	2204      	movs	r2, #4
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e078      	b.n	80070e0 <UART_SetConfig+0x260>
 8006fee:	231b      	movs	r3, #27
 8006ff0:	2218      	movs	r2, #24
 8006ff2:	4694      	mov	ip, r2
 8006ff4:	44bc      	add	ip, r7
 8006ff6:	4463      	add	r3, ip
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e070      	b.n	80070e0 <UART_SetConfig+0x260>
 8006ffe:	231b      	movs	r3, #27
 8007000:	2218      	movs	r2, #24
 8007002:	4694      	mov	ip, r2
 8007004:	44bc      	add	ip, r7
 8007006:	4463      	add	r3, ip
 8007008:	2210      	movs	r2, #16
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	e067      	b.n	80070e0 <UART_SetConfig+0x260>
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a7e      	ldr	r2, [pc, #504]	; (8007210 <UART_SetConfig+0x390>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d107      	bne.n	800702a <UART_SetConfig+0x1aa>
 800701a:	231b      	movs	r3, #27
 800701c:	2218      	movs	r2, #24
 800701e:	4694      	mov	ip, r2
 8007020:	44bc      	add	ip, r7
 8007022:	4463      	add	r3, ip
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e05a      	b.n	80070e0 <UART_SetConfig+0x260>
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a79      	ldr	r2, [pc, #484]	; (8007214 <UART_SetConfig+0x394>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d107      	bne.n	8007044 <UART_SetConfig+0x1c4>
 8007034:	231b      	movs	r3, #27
 8007036:	2218      	movs	r2, #24
 8007038:	4694      	mov	ip, r2
 800703a:	44bc      	add	ip, r7
 800703c:	4463      	add	r3, ip
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e04d      	b.n	80070e0 <UART_SetConfig+0x260>
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6c      	ldr	r2, [pc, #432]	; (80071fc <UART_SetConfig+0x37c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d141      	bne.n	80070d2 <UART_SetConfig+0x252>
 800704e:	4b6e      	ldr	r3, [pc, #440]	; (8007208 <UART_SetConfig+0x388>)
 8007050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007052:	23c0      	movs	r3, #192	; 0xc0
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	4013      	ands	r3, r2
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	00d2      	lsls	r2, r2, #3
 800705c:	4293      	cmp	r3, r2
 800705e:	d01f      	beq.n	80070a0 <UART_SetConfig+0x220>
 8007060:	2280      	movs	r2, #128	; 0x80
 8007062:	00d2      	lsls	r2, r2, #3
 8007064:	4293      	cmp	r3, r2
 8007066:	d802      	bhi.n	800706e <UART_SetConfig+0x1ee>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <UART_SetConfig+0x200>
 800706c:	e028      	b.n	80070c0 <UART_SetConfig+0x240>
 800706e:	2280      	movs	r2, #128	; 0x80
 8007070:	0112      	lsls	r2, r2, #4
 8007072:	4293      	cmp	r3, r2
 8007074:	d00c      	beq.n	8007090 <UART_SetConfig+0x210>
 8007076:	22c0      	movs	r2, #192	; 0xc0
 8007078:	0112      	lsls	r2, r2, #4
 800707a:	4293      	cmp	r3, r2
 800707c:	d018      	beq.n	80070b0 <UART_SetConfig+0x230>
 800707e:	e01f      	b.n	80070c0 <UART_SetConfig+0x240>
 8007080:	231b      	movs	r3, #27
 8007082:	2218      	movs	r2, #24
 8007084:	4694      	mov	ip, r2
 8007086:	44bc      	add	ip, r7
 8007088:	4463      	add	r3, ip
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	e027      	b.n	80070e0 <UART_SetConfig+0x260>
 8007090:	231b      	movs	r3, #27
 8007092:	2218      	movs	r2, #24
 8007094:	4694      	mov	ip, r2
 8007096:	44bc      	add	ip, r7
 8007098:	4463      	add	r3, ip
 800709a:	2202      	movs	r2, #2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e01f      	b.n	80070e0 <UART_SetConfig+0x260>
 80070a0:	231b      	movs	r3, #27
 80070a2:	2218      	movs	r2, #24
 80070a4:	4694      	mov	ip, r2
 80070a6:	44bc      	add	ip, r7
 80070a8:	4463      	add	r3, ip
 80070aa:	2204      	movs	r2, #4
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e017      	b.n	80070e0 <UART_SetConfig+0x260>
 80070b0:	231b      	movs	r3, #27
 80070b2:	2218      	movs	r2, #24
 80070b4:	4694      	mov	ip, r2
 80070b6:	44bc      	add	ip, r7
 80070b8:	4463      	add	r3, ip
 80070ba:	2208      	movs	r2, #8
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e00f      	b.n	80070e0 <UART_SetConfig+0x260>
 80070c0:	231b      	movs	r3, #27
 80070c2:	2218      	movs	r2, #24
 80070c4:	4694      	mov	ip, r2
 80070c6:	44bc      	add	ip, r7
 80070c8:	4463      	add	r3, ip
 80070ca:	2210      	movs	r2, #16
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	e006      	b.n	80070e0 <UART_SetConfig+0x260>
 80070d2:	231b      	movs	r3, #27
 80070d4:	2218      	movs	r2, #24
 80070d6:	4694      	mov	ip, r2
 80070d8:	44bc      	add	ip, r7
 80070da:	4463      	add	r3, ip
 80070dc:	2210      	movs	r2, #16
 80070de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a45      	ldr	r2, [pc, #276]	; (80071fc <UART_SetConfig+0x37c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d000      	beq.n	80070ec <UART_SetConfig+0x26c>
 80070ea:	e09d      	b.n	8007228 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070ec:	231b      	movs	r3, #27
 80070ee:	2218      	movs	r2, #24
 80070f0:	4694      	mov	ip, r2
 80070f2:	44bc      	add	ip, r7
 80070f4:	4463      	add	r3, ip
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d00d      	beq.n	8007118 <UART_SetConfig+0x298>
 80070fc:	dc02      	bgt.n	8007104 <UART_SetConfig+0x284>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <UART_SetConfig+0x28e>
 8007102:	e01d      	b.n	8007140 <UART_SetConfig+0x2c0>
 8007104:	2b04      	cmp	r3, #4
 8007106:	d012      	beq.n	800712e <UART_SetConfig+0x2ae>
 8007108:	2b08      	cmp	r3, #8
 800710a:	d015      	beq.n	8007138 <UART_SetConfig+0x2b8>
 800710c:	e018      	b.n	8007140 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800710e:	f7fe f92f 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8007112:	0003      	movs	r3, r0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007116:	e01b      	b.n	8007150 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007118:	4b3b      	ldr	r3, [pc, #236]	; (8007208 <UART_SetConfig+0x388>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2210      	movs	r2, #16
 800711e:	4013      	ands	r3, r2
 8007120:	d002      	beq.n	8007128 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8007122:	4b3d      	ldr	r3, [pc, #244]	; (8007218 <UART_SetConfig+0x398>)
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8007126:	e013      	b.n	8007150 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007128:	4b3c      	ldr	r3, [pc, #240]	; (800721c <UART_SetConfig+0x39c>)
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800712c:	e010      	b.n	8007150 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800712e:	f7fe f891 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8007132:	0003      	movs	r3, r0
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007136:	e00b      	b.n	8007150 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800713e:	e007      	b.n	8007150 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007140:	2313      	movs	r3, #19
 8007142:	2218      	movs	r2, #24
 8007144:	4694      	mov	ip, r2
 8007146:	44bc      	add	ip, r7
 8007148:	4463      	add	r3, ip
 800714a:	2201      	movs	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
        break;
 800714e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	d100      	bne.n	8007158 <UART_SetConfig+0x2d8>
 8007156:	e1a6      	b.n	80074a6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	0013      	movs	r3, r2
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	189b      	adds	r3, r3, r2
 8007162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007164:	429a      	cmp	r2, r3
 8007166:	d305      	bcc.n	8007174 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800716e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007170:	429a      	cmp	r2, r3
 8007172:	d907      	bls.n	8007184 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8007174:	2313      	movs	r3, #19
 8007176:	2218      	movs	r2, #24
 8007178:	4694      	mov	ip, r2
 800717a:	44bc      	add	ip, r7
 800717c:	4463      	add	r3, ip
 800717e:	2201      	movs	r2, #1
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e190      	b.n	80074a6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	6939      	ldr	r1, [r7, #16]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	000b      	movs	r3, r1
 8007192:	0e1b      	lsrs	r3, r3, #24
 8007194:	0010      	movs	r0, r2
 8007196:	0205      	lsls	r5, r0, #8
 8007198:	431d      	orrs	r5, r3
 800719a:	000b      	movs	r3, r1
 800719c:	021c      	lsls	r4, r3, #8
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68b8      	ldr	r0, [r7, #8]
 80071ac:	68f9      	ldr	r1, [r7, #12]
 80071ae:	1900      	adds	r0, r0, r4
 80071b0:	4169      	adcs	r1, r5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f7f9 f9bc 	bl	800053c <__aeabi_uldivmod>
 80071c4:	0003      	movs	r3, r0
 80071c6:	000c      	movs	r4, r1
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	4a14      	ldr	r2, [pc, #80]	; (8007220 <UART_SetConfig+0x3a0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d908      	bls.n	80071e4 <UART_SetConfig+0x364>
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	4a13      	ldr	r2, [pc, #76]	; (8007224 <UART_SetConfig+0x3a4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d804      	bhi.n	80071e4 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	e160      	b.n	80074a6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80071e4:	2313      	movs	r3, #19
 80071e6:	2218      	movs	r2, #24
 80071e8:	4694      	mov	ip, r2
 80071ea:	44bc      	add	ip, r7
 80071ec:	4463      	add	r3, ip
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	e158      	b.n	80074a6 <UART_SetConfig+0x626>
 80071f4:	efff69f3 	.word	0xefff69f3
 80071f8:	ffffcfff 	.word	0xffffcfff
 80071fc:	40004800 	.word	0x40004800
 8007200:	fffff4ff 	.word	0xfffff4ff
 8007204:	40013800 	.word	0x40013800
 8007208:	40021000 	.word	0x40021000
 800720c:	40004400 	.word	0x40004400
 8007210:	40004c00 	.word	0x40004c00
 8007214:	40005000 	.word	0x40005000
 8007218:	003d0900 	.word	0x003d0900
 800721c:	00f42400 	.word	0x00f42400
 8007220:	000002ff 	.word	0x000002ff
 8007224:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	429a      	cmp	r2, r3
 8007232:	d000      	beq.n	8007236 <UART_SetConfig+0x3b6>
 8007234:	e0a9      	b.n	800738a <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8007236:	231b      	movs	r3, #27
 8007238:	2218      	movs	r2, #24
 800723a:	4694      	mov	ip, r2
 800723c:	44bc      	add	ip, r7
 800723e:	4463      	add	r3, ip
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b08      	cmp	r3, #8
 8007244:	d86d      	bhi.n	8007322 <UART_SetConfig+0x4a2>
 8007246:	009a      	lsls	r2, r3, #2
 8007248:	4b9f      	ldr	r3, [pc, #636]	; (80074c8 <UART_SetConfig+0x648>)
 800724a:	18d3      	adds	r3, r2, r3
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007250:	f7fe f88e 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8007254:	0003      	movs	r3, r0
 8007256:	005a      	lsls	r2, r3, #1
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	18d2      	adds	r2, r2, r3
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	0019      	movs	r1, r3
 8007266:	0010      	movs	r0, r2
 8007268:	f7f8 ff56 	bl	8000118 <__udivsi3>
 800726c:	0003      	movs	r3, r0
 800726e:	b29b      	uxth	r3, r3
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007272:	e05e      	b.n	8007332 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007274:	f7fe f892 	bl	800539c <HAL_RCC_GetPCLK2Freq>
 8007278:	0003      	movs	r3, r0
 800727a:	005a      	lsls	r2, r3, #1
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	18d2      	adds	r2, r2, r3
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	0019      	movs	r1, r3
 800728a:	0010      	movs	r0, r2
 800728c:	f7f8 ff44 	bl	8000118 <__udivsi3>
 8007290:	0003      	movs	r3, r0
 8007292:	b29b      	uxth	r3, r3
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007296:	e04c      	b.n	8007332 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007298:	4b8c      	ldr	r3, [pc, #560]	; (80074cc <UART_SetConfig+0x64c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2210      	movs	r2, #16
 800729e:	4013      	ands	r3, r2
 80072a0:	d00e      	beq.n	80072c0 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	4a89      	ldr	r2, [pc, #548]	; (80074d0 <UART_SetConfig+0x650>)
 80072aa:	189a      	adds	r2, r3, r2
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	0019      	movs	r1, r3
 80072b2:	0010      	movs	r0, r2
 80072b4:	f7f8 ff30 	bl	8000118 <__udivsi3>
 80072b8:	0003      	movs	r3, r0
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80072be:	e038      	b.n	8007332 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	4a83      	ldr	r2, [pc, #524]	; (80074d4 <UART_SetConfig+0x654>)
 80072c8:	189a      	adds	r2, r3, r2
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	0019      	movs	r1, r3
 80072d0:	0010      	movs	r0, r2
 80072d2:	f7f8 ff21 	bl	8000118 <__udivsi3>
 80072d6:	0003      	movs	r3, r0
 80072d8:	b29b      	uxth	r3, r3
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072dc:	e029      	b.n	8007332 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80072de:	f7fd ffb9 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 80072e2:	0003      	movs	r3, r0
 80072e4:	005a      	lsls	r2, r3, #1
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	18d2      	adds	r2, r2, r3
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	0019      	movs	r1, r3
 80072f4:	0010      	movs	r0, r2
 80072f6:	f7f8 ff0f 	bl	8000118 <__udivsi3>
 80072fa:	0003      	movs	r3, r0
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007300:	e017      	b.n	8007332 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	0252      	lsls	r2, r2, #9
 800730c:	189a      	adds	r2, r3, r2
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	0019      	movs	r1, r3
 8007314:	0010      	movs	r0, r2
 8007316:	f7f8 feff 	bl	8000118 <__udivsi3>
 800731a:	0003      	movs	r3, r0
 800731c:	b29b      	uxth	r3, r3
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007320:	e007      	b.n	8007332 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007322:	2313      	movs	r3, #19
 8007324:	2218      	movs	r2, #24
 8007326:	4694      	mov	ip, r2
 8007328:	44bc      	add	ip, r7
 800732a:	4463      	add	r3, ip
 800732c:	2201      	movs	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
        break;
 8007330:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	2b0f      	cmp	r3, #15
 8007336:	d920      	bls.n	800737a <UART_SetConfig+0x4fa>
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	4a67      	ldr	r2, [pc, #412]	; (80074d8 <UART_SetConfig+0x658>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d81c      	bhi.n	800737a <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	b29a      	uxth	r2, r3
 8007344:	200a      	movs	r0, #10
 8007346:	2418      	movs	r4, #24
 8007348:	193b      	adds	r3, r7, r4
 800734a:	181b      	adds	r3, r3, r0
 800734c:	210f      	movs	r1, #15
 800734e:	438a      	bics	r2, r1
 8007350:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	b29b      	uxth	r3, r3
 8007358:	2207      	movs	r2, #7
 800735a:	4013      	ands	r3, r2
 800735c:	b299      	uxth	r1, r3
 800735e:	193b      	adds	r3, r7, r4
 8007360:	181b      	adds	r3, r3, r0
 8007362:	193a      	adds	r2, r7, r4
 8007364:	1812      	adds	r2, r2, r0
 8007366:	8812      	ldrh	r2, [r2, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	193a      	adds	r2, r7, r4
 8007372:	1812      	adds	r2, r2, r0
 8007374:	8812      	ldrh	r2, [r2, #0]
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	e095      	b.n	80074a6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800737a:	2313      	movs	r3, #19
 800737c:	2218      	movs	r2, #24
 800737e:	4694      	mov	ip, r2
 8007380:	44bc      	add	ip, r7
 8007382:	4463      	add	r3, ip
 8007384:	2201      	movs	r2, #1
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e08d      	b.n	80074a6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800738a:	231b      	movs	r3, #27
 800738c:	2218      	movs	r2, #24
 800738e:	4694      	mov	ip, r2
 8007390:	44bc      	add	ip, r7
 8007392:	4463      	add	r3, ip
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b08      	cmp	r3, #8
 8007398:	d86a      	bhi.n	8007470 <UART_SetConfig+0x5f0>
 800739a:	009a      	lsls	r2, r3, #2
 800739c:	4b4f      	ldr	r3, [pc, #316]	; (80074dc <UART_SetConfig+0x65c>)
 800739e:	18d3      	adds	r3, r2, r3
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80073a4:	f7fd ffe4 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 80073a8:	0002      	movs	r2, r0
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	18d2      	adds	r2, r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	0019      	movs	r1, r3
 80073b8:	0010      	movs	r0, r2
 80073ba:	f7f8 fead 	bl	8000118 <__udivsi3>
 80073be:	0003      	movs	r3, r0
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073c4:	e05c      	b.n	8007480 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073c6:	f7fd ffe9 	bl	800539c <HAL_RCC_GetPCLK2Freq>
 80073ca:	0002      	movs	r2, r0
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	18d2      	adds	r2, r2, r3
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	0019      	movs	r1, r3
 80073da:	0010      	movs	r0, r2
 80073dc:	f7f8 fe9c 	bl	8000118 <__udivsi3>
 80073e0:	0003      	movs	r3, r0
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e6:	e04b      	b.n	8007480 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e8:	4b38      	ldr	r3, [pc, #224]	; (80074cc <UART_SetConfig+0x64c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2210      	movs	r2, #16
 80073ee:	4013      	ands	r3, r2
 80073f0:	d00e      	beq.n	8007410 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	4a39      	ldr	r2, [pc, #228]	; (80074e0 <UART_SetConfig+0x660>)
 80073fa:	189a      	adds	r2, r3, r2
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	0019      	movs	r1, r3
 8007402:	0010      	movs	r0, r2
 8007404:	f7f8 fe88 	bl	8000118 <__udivsi3>
 8007408:	0003      	movs	r3, r0
 800740a:	b29b      	uxth	r3, r3
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800740e:	e037      	b.n	8007480 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	4a33      	ldr	r2, [pc, #204]	; (80074e4 <UART_SetConfig+0x664>)
 8007418:	189a      	adds	r2, r3, r2
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	0019      	movs	r1, r3
 8007420:	0010      	movs	r0, r2
 8007422:	f7f8 fe79 	bl	8000118 <__udivsi3>
 8007426:	0003      	movs	r3, r0
 8007428:	b29b      	uxth	r3, r3
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800742c:	e028      	b.n	8007480 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800742e:	f7fd ff11 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8007432:	0002      	movs	r2, r0
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	18d2      	adds	r2, r2, r3
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	0019      	movs	r1, r3
 8007442:	0010      	movs	r0, r2
 8007444:	f7f8 fe68 	bl	8000118 <__udivsi3>
 8007448:	0003      	movs	r3, r0
 800744a:	b29b      	uxth	r3, r3
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800744e:	e017      	b.n	8007480 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	0212      	lsls	r2, r2, #8
 800745a:	189a      	adds	r2, r3, r2
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	0019      	movs	r1, r3
 8007462:	0010      	movs	r0, r2
 8007464:	f7f8 fe58 	bl	8000118 <__udivsi3>
 8007468:	0003      	movs	r3, r0
 800746a:	b29b      	uxth	r3, r3
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800746e:	e007      	b.n	8007480 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007470:	2313      	movs	r3, #19
 8007472:	2218      	movs	r2, #24
 8007474:	4694      	mov	ip, r2
 8007476:	44bc      	add	ip, r7
 8007478:	4463      	add	r3, ip
 800747a:	2201      	movs	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
        break;
 800747e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	2b0f      	cmp	r3, #15
 8007484:	d908      	bls.n	8007498 <UART_SetConfig+0x618>
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <UART_SetConfig+0x658>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d804      	bhi.n	8007498 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e006      	b.n	80074a6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8007498:	2313      	movs	r3, #19
 800749a:	2218      	movs	r2, #24
 800749c:	4694      	mov	ip, r2
 800749e:	44bc      	add	ip, r7
 80074a0:	4463      	add	r3, ip
 80074a2:	2201      	movs	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	2200      	movs	r2, #0
 80074aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2200      	movs	r2, #0
 80074b0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80074b2:	2313      	movs	r3, #19
 80074b4:	2218      	movs	r2, #24
 80074b6:	4694      	mov	ip, r2
 80074b8:	44bc      	add	ip, r7
 80074ba:	4463      	add	r3, ip
 80074bc:	781b      	ldrb	r3, [r3, #0]
}
 80074be:	0018      	movs	r0, r3
 80074c0:	46bd      	mov	sp, r7
 80074c2:	b00e      	add	sp, #56	; 0x38
 80074c4:	bdb0      	pop	{r4, r5, r7, pc}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	0802821c 	.word	0x0802821c
 80074cc:	40021000 	.word	0x40021000
 80074d0:	007a1200 	.word	0x007a1200
 80074d4:	01e84800 	.word	0x01e84800
 80074d8:	0000ffff 	.word	0x0000ffff
 80074dc:	08028240 	.word	0x08028240
 80074e0:	003d0900 	.word	0x003d0900
 80074e4:	00f42400 	.word	0x00f42400

080074e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2201      	movs	r2, #1
 80074f6:	4013      	ands	r3, r2
 80074f8:	d00b      	beq.n	8007512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4a4a      	ldr	r2, [pc, #296]	; (800762c <UART_AdvFeatureConfig+0x144>)
 8007502:	4013      	ands	r3, r2
 8007504:	0019      	movs	r1, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	2202      	movs	r2, #2
 8007518:	4013      	ands	r3, r2
 800751a:	d00b      	beq.n	8007534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	4a43      	ldr	r2, [pc, #268]	; (8007630 <UART_AdvFeatureConfig+0x148>)
 8007524:	4013      	ands	r3, r2
 8007526:	0019      	movs	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	2204      	movs	r2, #4
 800753a:	4013      	ands	r3, r2
 800753c:	d00b      	beq.n	8007556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <UART_AdvFeatureConfig+0x14c>)
 8007546:	4013      	ands	r3, r2
 8007548:	0019      	movs	r1, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2208      	movs	r2, #8
 800755c:	4013      	ands	r3, r2
 800755e:	d00b      	beq.n	8007578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	4a34      	ldr	r2, [pc, #208]	; (8007638 <UART_AdvFeatureConfig+0x150>)
 8007568:	4013      	ands	r3, r2
 800756a:	0019      	movs	r1, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2210      	movs	r2, #16
 800757e:	4013      	ands	r3, r2
 8007580:	d00b      	beq.n	800759a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	4a2c      	ldr	r2, [pc, #176]	; (800763c <UART_AdvFeatureConfig+0x154>)
 800758a:	4013      	ands	r3, r2
 800758c:	0019      	movs	r1, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	2220      	movs	r2, #32
 80075a0:	4013      	ands	r3, r2
 80075a2:	d00b      	beq.n	80075bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4a25      	ldr	r2, [pc, #148]	; (8007640 <UART_AdvFeatureConfig+0x158>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	0019      	movs	r1, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2240      	movs	r2, #64	; 0x40
 80075c2:	4013      	ands	r3, r2
 80075c4:	d01d      	beq.n	8007602 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <UART_AdvFeatureConfig+0x15c>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	0019      	movs	r1, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075e2:	2380      	movs	r3, #128	; 0x80
 80075e4:	035b      	lsls	r3, r3, #13
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d10b      	bne.n	8007602 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4a15      	ldr	r2, [pc, #84]	; (8007648 <UART_AdvFeatureConfig+0x160>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	0019      	movs	r1, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	4013      	ands	r3, r2
 800760a:	d00b      	beq.n	8007624 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4a0e      	ldr	r2, [pc, #56]	; (800764c <UART_AdvFeatureConfig+0x164>)
 8007614:	4013      	ands	r3, r2
 8007616:	0019      	movs	r1, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	605a      	str	r2, [r3, #4]
  }
}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	46bd      	mov	sp, r7
 8007628:	b002      	add	sp, #8
 800762a:	bd80      	pop	{r7, pc}
 800762c:	fffdffff 	.word	0xfffdffff
 8007630:	fffeffff 	.word	0xfffeffff
 8007634:	fffbffff 	.word	0xfffbffff
 8007638:	ffff7fff 	.word	0xffff7fff
 800763c:	ffffefff 	.word	0xffffefff
 8007640:	ffffdfff 	.word	0xffffdfff
 8007644:	ffefffff 	.word	0xffefffff
 8007648:	ff9fffff 	.word	0xff9fffff
 800764c:	fff7ffff 	.word	0xfff7ffff

08007650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af02      	add	r7, sp, #8
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800765e:	f7fc fb09 	bl	8003c74 <HAL_GetTick>
 8007662:	0003      	movs	r3, r0
 8007664:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2208      	movs	r2, #8
 800766e:	4013      	ands	r3, r2
 8007670:	2b08      	cmp	r3, #8
 8007672:	d10d      	bne.n	8007690 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	2380      	movs	r3, #128	; 0x80
 8007678:	0399      	lsls	r1, r3, #14
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <UART_CheckIdleState+0x88>)
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	0013      	movs	r3, r2
 8007682:	2200      	movs	r2, #0
 8007684:	f000 f82a 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 8007688:	1e03      	subs	r3, r0, #0
 800768a:	d001      	beq.n	8007690 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e01f      	b.n	80076d0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2204      	movs	r2, #4
 8007698:	4013      	ands	r3, r2
 800769a:	2b04      	cmp	r3, #4
 800769c:	d10d      	bne.n	80076ba <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	2380      	movs	r3, #128	; 0x80
 80076a2:	03d9      	lsls	r1, r3, #15
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <UART_CheckIdleState+0x88>)
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	0013      	movs	r3, r2
 80076ac:	2200      	movs	r2, #0
 80076ae:	f000 f815 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 80076b2:	1e03      	subs	r3, r0, #0
 80076b4:	d001      	beq.n	80076ba <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e00a      	b.n	80076d0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2270      	movs	r2, #112	; 0x70
 80076ca:	2100      	movs	r1, #0
 80076cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b004      	add	sp, #16
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	01ffffff 	.word	0x01ffffff

080076dc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	1dfb      	adds	r3, r7, #7
 80076ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ec:	e029      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	3301      	adds	r3, #1
 80076f2:	d026      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7fc fabe 	bl	8003c74 <HAL_GetTick>
 80076f8:	0002      	movs	r2, r0
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d11b      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4915      	ldr	r1, [pc, #84]	; (800776c <UART_WaitOnFlagUntilTimeout+0x90>)
 8007716:	400a      	ands	r2, r1
 8007718:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2101      	movs	r1, #1
 8007726:	438a      	bics	r2, r1
 8007728:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2270      	movs	r2, #112	; 0x70
 800773a:	2100      	movs	r1, #0
 800773c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e00f      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	425a      	negs	r2, r3
 8007752:	4153      	adcs	r3, r2
 8007754:	b2db      	uxtb	r3, r3
 8007756:	001a      	movs	r2, r3
 8007758:	1dfb      	adds	r3, r7, #7
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d0c6      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b004      	add	sp, #16
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	fffffe5f 	.word	0xfffffe5f

08007770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	490a      	ldr	r1, [pc, #40]	; (80077ac <UART_EndRxTransfer+0x3c>)
 8007784:	400a      	ands	r2, r1
 8007786:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2101      	movs	r1, #1
 8007794:	438a      	bics	r2, r1
 8007796:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	fffffedf 	.word	0xfffffedf

080077b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	225a      	movs	r2, #90	; 0x5a
 80077c2:	2100      	movs	r1, #0
 80077c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2252      	movs	r2, #82	; 0x52
 80077ca:	2100      	movs	r1, #0
 80077cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f01d fd43 	bl	802525c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	46bd      	mov	sp, r7
 80077da:	b004      	add	sp, #16
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2140      	movs	r1, #64	; 0x40
 80077f2:	438a      	bics	r2, r1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	f7ff fb33 	bl	8006e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	46bd      	mov	sp, r7
 800780e:	b002      	add	sp, #8
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800781c:	230e      	movs	r3, #14
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	215c      	movs	r1, #92	; 0x5c
 8007824:	5a52      	ldrh	r2, [r2, r1]
 8007826:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800782c:	2b22      	cmp	r3, #34	; 0x22
 800782e:	d140      	bne.n	80078b2 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007836:	210c      	movs	r1, #12
 8007838:	187b      	adds	r3, r7, r1
 800783a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800783c:	187b      	adds	r3, r7, r1
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	230e      	movs	r3, #14
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b2d9      	uxtb	r1, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	400a      	ands	r2, r1
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	225a      	movs	r2, #90	; 0x5a
 8007862:	5a9b      	ldrh	r3, [r3, r2]
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b299      	uxth	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	225a      	movs	r2, #90	; 0x5a
 800786e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	225a      	movs	r2, #90	; 0x5a
 8007874:	5a9b      	ldrh	r3, [r3, r2]
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d122      	bne.n	80078c2 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4911      	ldr	r1, [pc, #68]	; (80078cc <UART_RxISR_8BIT+0xb8>)
 8007888:	400a      	ands	r2, r1
 800788a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2101      	movs	r1, #1
 8007898:	438a      	bics	r2, r1
 800789a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f01d fcea 	bl	8025284 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078b0:	e007      	b.n	80078c2 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2108      	movs	r1, #8
 80078be:	430a      	orrs	r2, r1
 80078c0:	619a      	str	r2, [r3, #24]
}
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b004      	add	sp, #16
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	fffffedf 	.word	0xfffffedf

080078d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078d8:	230e      	movs	r3, #14
 80078da:	18fb      	adds	r3, r7, r3
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	215c      	movs	r1, #92	; 0x5c
 80078e0:	5a52      	ldrh	r2, [r2, r1]
 80078e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e8:	2b22      	cmp	r3, #34	; 0x22
 80078ea:	d140      	bne.n	800796e <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f2:	210c      	movs	r1, #12
 80078f4:	187b      	adds	r3, r7, r1
 80078f6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	220e      	movs	r2, #14
 8007902:	18ba      	adds	r2, r7, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	8812      	ldrh	r2, [r2, #0]
 8007908:	4013      	ands	r3, r2
 800790a:	b29a      	uxth	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007914:	1c9a      	adds	r2, r3, #2
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	225a      	movs	r2, #90	; 0x5a
 800791e:	5a9b      	ldrh	r3, [r3, r2]
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b299      	uxth	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	225a      	movs	r2, #90	; 0x5a
 800792a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	225a      	movs	r2, #90	; 0x5a
 8007930:	5a9b      	ldrh	r3, [r3, r2]
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d122      	bne.n	800797e <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4911      	ldr	r1, [pc, #68]	; (8007988 <UART_RxISR_16BIT+0xb8>)
 8007944:	400a      	ands	r2, r1
 8007946:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2101      	movs	r1, #1
 8007954:	438a      	bics	r2, r1
 8007956:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	0018      	movs	r0, r3
 8007968:	f01d fc8c 	bl	8025284 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800796c:	e007      	b.n	800797e <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2108      	movs	r1, #8
 800797a:	430a      	orrs	r2, r1
 800797c:	619a      	str	r2, [r3, #24]
}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	46bd      	mov	sp, r7
 8007982:	b004      	add	sp, #16
 8007984:	bd80      	pop	{r7, pc}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	fffffedf 	.word	0xfffffedf

0800798c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	6019      	str	r1, [r3, #0]
 8007998:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800799a:	2317      	movs	r3, #23
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2270      	movs	r2, #112	; 0x70
 80079a6:	5c9b      	ldrb	r3, [r3, r2]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e04b      	b.n	8007a48 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2270      	movs	r2, #112	; 0x70
 80079b4:	2101      	movs	r1, #1
 80079b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2224      	movs	r2, #36	; 0x24
 80079bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2101      	movs	r1, #1
 80079ca:	438a      	bics	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	0019      	movs	r1, r3
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80079e6:	1d3b      	adds	r3, r7, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80079ee:	1d3b      	adds	r3, r7, #4
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	f000 f84f 	bl	8007a98 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2101      	movs	r1, #1
 8007a06:	430a      	orrs	r2, r1
 8007a08:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a0a:	f7fc f933 	bl	8003c74 <HAL_GetTick>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	03d9      	lsls	r1, r3, #15
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	0013      	movs	r3, r2
 8007a20:	2200      	movs	r2, #0
 8007a22:	f7ff fe5b 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 8007a26:	1e03      	subs	r3, r0, #0
 8007a28:	d004      	beq.n	8007a34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 8007a2a:	2317      	movs	r3, #23
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	2203      	movs	r2, #3
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e002      	b.n	8007a3a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2270      	movs	r2, #112	; 0x70
 8007a3e:	2100      	movs	r1, #0
 8007a40:	5499      	strb	r1, [r3, r2]

  return status;
 8007a42:	2317      	movs	r3, #23
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	781b      	ldrb	r3, [r3, #0]
}
 8007a48:	0018      	movs	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b006      	add	sp, #24
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	ffcfffff 	.word	0xffcfffff
 8007a54:	01ffffff 	.word	0x01ffffff

08007a58 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2270      	movs	r2, #112	; 0x70
 8007a64:	5c9b      	ldrb	r3, [r3, r2]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_UARTEx_EnableStopMode+0x16>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e010      	b.n	8007a90 <HAL_UARTEx_EnableStopMode+0x38>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2270      	movs	r2, #112	; 0x70
 8007a72:	2101      	movs	r1, #1
 8007a74:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2102      	movs	r1, #2
 8007a82:	430a      	orrs	r2, r1
 8007a84:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2270      	movs	r2, #112	; 0x70
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	0018      	movs	r0, r3
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b002      	add	sp, #8
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	1d3b      	adds	r3, r7, #4
 8007aa2:	6019      	str	r1, [r3, #0]
 8007aa4:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2210      	movs	r2, #16
 8007aae:	4393      	bics	r3, r2
 8007ab0:	001a      	movs	r2, r3
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	889b      	ldrh	r3, [r3, #4]
 8007ab6:	0019      	movs	r1, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	0a19      	lsrs	r1, r3, #8
 8007aca:	1d3b      	adds	r3, r7, #4
 8007acc:	799b      	ldrb	r3, [r3, #6]
 8007ace:	061a      	lsls	r2, r3, #24
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b004      	add	sp, #16
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007ae4:	e004      	b.n	8007af0 <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <lorawan_driver_loop+0x34>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8007aec:	f002 fc50 	bl	800a390 <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007af0:	4b08      	ldr	r3, [pc, #32]	; (8007b14 <lorawan_driver_loop+0x34>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <lorawan_driver_loop+0x34>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d003      	beq.n	8007b0c <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 8007b04:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <lorawan_driver_loop+0x34>)
 8007b06:	7a1b      	ldrb	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1ec      	bne.n	8007ae6 <lorawan_driver_loop+0x6>
	}

}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	20000250 	.word	0x20000250

08007b18 <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 8007b1c:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <lorawan_driver_LORA_getJoinState+0x10>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b2db      	uxtb	r3, r3
}
 8007b22:	0018      	movs	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20000250 	.word	0x20000250

08007b2c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3301      	adds	r3, #1
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	7852      	ldrb	r2, [r2, #1]
 8007b46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	7892      	ldrb	r2, [r2, #2]
 8007b50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3303      	adds	r3, #3
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	78d2      	ldrb	r2, [r2, #3]
 8007b5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	7912      	ldrb	r2, [r2, #4]
 8007b64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3305      	adds	r3, #5
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	7952      	ldrb	r2, [r2, #5]
 8007b6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3306      	adds	r3, #6
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	7992      	ldrb	r2, [r2, #6]
 8007b78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	79d2      	ldrb	r2, [r2, #7]
 8007b82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3308      	adds	r3, #8
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	7a12      	ldrb	r2, [r2, #8]
 8007b8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3309      	adds	r3, #9
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	7a52      	ldrb	r2, [r2, #9]
 8007b96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	330a      	adds	r3, #10
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	7a92      	ldrb	r2, [r2, #10]
 8007ba0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	330b      	adds	r3, #11
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	7ad2      	ldrb	r2, [r2, #11]
 8007baa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	7b12      	ldrb	r2, [r2, #12]
 8007bb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	330d      	adds	r3, #13
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	7b52      	ldrb	r2, [r2, #13]
 8007bbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	330e      	adds	r3, #14
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	7b92      	ldrb	r2, [r2, #14]
 8007bc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	330f      	adds	r3, #15
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	7bd2      	ldrb	r2, [r2, #15]
 8007bd2:	701a      	strb	r2, [r3, #0]
#endif
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	1dfb      	adds	r3, r7, #7
 8007be8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007bea:	e007      	b.n	8007bfc <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	1c53      	adds	r3, r2, #1
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	1c59      	adds	r1, r3, #1
 8007bf6:	60f9      	str	r1, [r7, #12]
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007bfc:	1dfb      	adds	r3, r7, #7
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	1dfa      	adds	r2, r7, #7
 8007c02:	1e59      	subs	r1, r3, #1
 8007c04:	7011      	strb	r1, [r2, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f0      	bne.n	8007bec <copy_block_nn+0x10>
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	4053      	eors	r3, r2
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	7819      	ldrb	r1, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	404a      	eors	r2, r1
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3302      	adds	r3, #2
 8007c46:	7819      	ldrb	r1, [r3, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	3302      	adds	r3, #2
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3302      	adds	r3, #2
 8007c52:	404a      	eors	r2, r1
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3303      	adds	r3, #3
 8007c5c:	7819      	ldrb	r1, [r3, #0]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	3303      	adds	r3, #3
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3303      	adds	r3, #3
 8007c68:	404a      	eors	r2, r1
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3304      	adds	r3, #4
 8007c72:	7819      	ldrb	r1, [r3, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	404a      	eors	r2, r1
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3305      	adds	r3, #5
 8007c88:	7819      	ldrb	r1, [r3, #0]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	3305      	adds	r3, #5
 8007c8e:	781a      	ldrb	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3305      	adds	r3, #5
 8007c94:	404a      	eors	r2, r1
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3306      	adds	r3, #6
 8007c9e:	7819      	ldrb	r1, [r3, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	3306      	adds	r3, #6
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3306      	adds	r3, #6
 8007caa:	404a      	eors	r2, r1
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3307      	adds	r3, #7
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	781a      	ldrb	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3307      	adds	r3, #7
 8007cc0:	404a      	eors	r2, r1
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	7819      	ldrb	r1, [r3, #0]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	404a      	eors	r2, r1
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3309      	adds	r3, #9
 8007ce0:	7819      	ldrb	r1, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3309      	adds	r3, #9
 8007ce6:	781a      	ldrb	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3309      	adds	r3, #9
 8007cec:	404a      	eors	r2, r1
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	330a      	adds	r3, #10
 8007cf6:	7819      	ldrb	r1, [r3, #0]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	330a      	adds	r3, #10
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	330a      	adds	r3, #10
 8007d02:	404a      	eors	r2, r1
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	330b      	adds	r3, #11
 8007d0c:	7819      	ldrb	r1, [r3, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	330b      	adds	r3, #11
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	330b      	adds	r3, #11
 8007d18:	404a      	eors	r2, r1
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	330c      	adds	r3, #12
 8007d22:	7819      	ldrb	r1, [r3, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	404a      	eors	r2, r1
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	330d      	adds	r3, #13
 8007d38:	7819      	ldrb	r1, [r3, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	330d      	adds	r3, #13
 8007d3e:	781a      	ldrb	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	330d      	adds	r3, #13
 8007d44:	404a      	eors	r2, r1
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	330e      	adds	r3, #14
 8007d4e:	7819      	ldrb	r1, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	330e      	adds	r3, #14
 8007d54:	781a      	ldrb	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	330e      	adds	r3, #14
 8007d5a:	404a      	eors	r2, r1
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	330f      	adds	r3, #15
 8007d64:	7819      	ldrb	r1, [r3, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	330f      	adds	r3, #15
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	330f      	adds	r3, #15
 8007d70:	404a      	eors	r2, r1
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]
#endif
}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b002      	add	sp, #8
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	4053      	eors	r3, r2
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	7819      	ldrb	r1, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3301      	adds	r3, #1
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	404a      	eors	r2, r1
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	3302      	adds	r3, #2
 8007db4:	7819      	ldrb	r1, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3302      	adds	r3, #2
 8007dba:	781a      	ldrb	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3302      	adds	r3, #2
 8007dc0:	404a      	eors	r2, r1
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	7819      	ldrb	r1, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3303      	adds	r3, #3
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	404a      	eors	r2, r1
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	3304      	adds	r3, #4
 8007de0:	7819      	ldrb	r1, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3304      	adds	r3, #4
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3304      	adds	r3, #4
 8007dec:	404a      	eors	r2, r1
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3305      	adds	r3, #5
 8007df6:	7819      	ldrb	r1, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3305      	adds	r3, #5
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3305      	adds	r3, #5
 8007e02:	404a      	eors	r2, r1
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	3306      	adds	r3, #6
 8007e0c:	7819      	ldrb	r1, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3306      	adds	r3, #6
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3306      	adds	r3, #6
 8007e18:	404a      	eors	r2, r1
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3307      	adds	r3, #7
 8007e22:	7819      	ldrb	r1, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3307      	adds	r3, #7
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3307      	adds	r3, #7
 8007e2e:	404a      	eors	r2, r1
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3308      	adds	r3, #8
 8007e38:	7819      	ldrb	r1, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3308      	adds	r3, #8
 8007e44:	404a      	eors	r2, r1
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	3309      	adds	r3, #9
 8007e4e:	7819      	ldrb	r1, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3309      	adds	r3, #9
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3309      	adds	r3, #9
 8007e5a:	404a      	eors	r2, r1
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	330a      	adds	r3, #10
 8007e64:	7819      	ldrb	r1, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	330a      	adds	r3, #10
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	330a      	adds	r3, #10
 8007e70:	404a      	eors	r2, r1
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	330b      	adds	r3, #11
 8007e7a:	7819      	ldrb	r1, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	330b      	adds	r3, #11
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	330b      	adds	r3, #11
 8007e86:	404a      	eors	r2, r1
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	7819      	ldrb	r1, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	330c      	adds	r3, #12
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	404a      	eors	r2, r1
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	330d      	adds	r3, #13
 8007ea6:	7819      	ldrb	r1, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	330d      	adds	r3, #13
 8007eac:	781a      	ldrb	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	330d      	adds	r3, #13
 8007eb2:	404a      	eors	r2, r1
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	330e      	adds	r3, #14
 8007ebc:	7819      	ldrb	r1, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	330e      	adds	r3, #14
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	330e      	adds	r3, #14
 8007ec8:	404a      	eors	r2, r1
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	330f      	adds	r3, #15
 8007ed2:	7819      	ldrb	r1, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	330f      	adds	r3, #15
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	330f      	adds	r3, #15
 8007ede:	404a      	eors	r2, r1
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b004      	add	sp, #16
 8007eea:	bd80      	pop	{r7, pc}

08007eec <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	0011      	movs	r1, r2
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7ff fe88 	bl	8007c12 <xor_block>
}
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	46bd      	mov	sp, r7
 8007f06:	b002      	add	sp, #8
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	001a      	movs	r2, r3
 8007f1a:	4b4c      	ldr	r3, [pc, #304]	; (800804c <shift_sub_rows+0x140>)
 8007f1c:	5c9a      	ldrb	r2, [r3, r2]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	0019      	movs	r1, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	4a47      	ldr	r2, [pc, #284]	; (800804c <shift_sub_rows+0x140>)
 8007f30:	5c52      	ldrb	r2, [r2, r1]
 8007f32:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3308      	adds	r3, #8
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	4a42      	ldr	r2, [pc, #264]	; (800804c <shift_sub_rows+0x140>)
 8007f42:	5c52      	ldrb	r2, [r2, r1]
 8007f44:	701a      	strb	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	0019      	movs	r1, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	330c      	adds	r3, #12
 8007f52:	4a3e      	ldr	r2, [pc, #248]	; (800804c <shift_sub_rows+0x140>)
 8007f54:	5c52      	ldrb	r2, [r2, r1]
 8007f56:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007f58:	200f      	movs	r0, #15
 8007f5a:	183b      	adds	r3, r7, r0
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7852      	ldrb	r2, [r2, #1]
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3305      	adds	r3, #5
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	0019      	movs	r1, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	4a37      	ldr	r2, [pc, #220]	; (800804c <shift_sub_rows+0x140>)
 8007f70:	5c52      	ldrb	r2, [r2, r1]
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3309      	adds	r3, #9
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3305      	adds	r3, #5
 8007f80:	4a32      	ldr	r2, [pc, #200]	; (800804c <shift_sub_rows+0x140>)
 8007f82:	5c52      	ldrb	r2, [r2, r1]
 8007f84:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	330d      	adds	r3, #13
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	0019      	movs	r1, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	3309      	adds	r3, #9
 8007f92:	4a2e      	ldr	r2, [pc, #184]	; (800804c <shift_sub_rows+0x140>)
 8007f94:	5c52      	ldrb	r2, [r2, r1]
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	183b      	adds	r3, r7, r0
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	330d      	adds	r3, #13
 8007fa0:	492a      	ldr	r1, [pc, #168]	; (800804c <shift_sub_rows+0x140>)
 8007fa2:	5c8a      	ldrb	r2, [r1, r2]
 8007fa4:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007fa6:	183b      	adds	r3, r7, r0
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	7892      	ldrb	r2, [r2, #2]
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	330a      	adds	r3, #10
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	0019      	movs	r1, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3302      	adds	r3, #2
 8007fba:	4a24      	ldr	r2, [pc, #144]	; (800804c <shift_sub_rows+0x140>)
 8007fbc:	5c52      	ldrb	r2, [r2, r1]
 8007fbe:	701a      	strb	r2, [r3, #0]
 8007fc0:	183b      	adds	r3, r7, r0
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	330a      	adds	r3, #10
 8007fc8:	4920      	ldr	r1, [pc, #128]	; (800804c <shift_sub_rows+0x140>)
 8007fca:	5c8a      	ldrb	r2, [r1, r2]
 8007fcc:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007fce:	183b      	adds	r3, r7, r0
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7992      	ldrb	r2, [r2, #6]
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	330e      	adds	r3, #14
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3306      	adds	r3, #6
 8007fe2:	4a1a      	ldr	r2, [pc, #104]	; (800804c <shift_sub_rows+0x140>)
 8007fe4:	5c52      	ldrb	r2, [r2, r1]
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	183b      	adds	r3, r7, r0
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	330e      	adds	r3, #14
 8007ff0:	4916      	ldr	r1, [pc, #88]	; (800804c <shift_sub_rows+0x140>)
 8007ff2:	5c8a      	ldrb	r2, [r1, r2]
 8007ff4:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007ff6:	183b      	adds	r3, r7, r0
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7bd2      	ldrb	r2, [r2, #15]
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	330b      	adds	r3, #11
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	0019      	movs	r1, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	330f      	adds	r3, #15
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <shift_sub_rows+0x140>)
 800800c:	5c52      	ldrb	r2, [r2, r1]
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3307      	adds	r3, #7
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	0019      	movs	r1, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	330b      	adds	r3, #11
 800801c:	4a0b      	ldr	r2, [pc, #44]	; (800804c <shift_sub_rows+0x140>)
 800801e:	5c52      	ldrb	r2, [r2, r1]
 8008020:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3303      	adds	r3, #3
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	0019      	movs	r1, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3307      	adds	r3, #7
 800802e:	4a07      	ldr	r2, [pc, #28]	; (800804c <shift_sub_rows+0x140>)
 8008030:	5c52      	ldrb	r2, [r2, r1]
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	183b      	adds	r3, r7, r0
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3303      	adds	r3, #3
 800803c:	4903      	ldr	r1, [pc, #12]	; (800804c <shift_sub_rows+0x140>)
 800803e:	5c8a      	ldrb	r2, [r1, r2]
 8008040:	701a      	strb	r2, [r3, #0]
}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	46bd      	mov	sp, r7
 8008046:	b004      	add	sp, #16
 8008048:	bd80      	pop	{r7, pc}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	08028264 	.word	0x08028264

08008050 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	2008      	movs	r0, #8
 800805c:	0004      	movs	r4, r0
 800805e:	183b      	adds	r3, r7, r0
 8008060:	0011      	movs	r1, r2
 8008062:	0018      	movs	r0, r3
 8008064:	f7ff fd62 	bl	8007b2c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8008068:	0020      	movs	r0, r4
 800806a:	183b      	adds	r3, r7, r0
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	001a      	movs	r2, r3
 8008070:	4be7      	ldr	r3, [pc, #924]	; (8008410 <mix_sub_columns+0x3c0>)
 8008072:	5c9a      	ldrb	r2, [r3, r2]
 8008074:	183b      	adds	r3, r7, r0
 8008076:	795b      	ldrb	r3, [r3, #5]
 8008078:	0019      	movs	r1, r3
 800807a:	4be6      	ldr	r3, [pc, #920]	; (8008414 <mix_sub_columns+0x3c4>)
 800807c:	5c5b      	ldrb	r3, [r3, r1]
 800807e:	4053      	eors	r3, r2
 8008080:	b2da      	uxtb	r2, r3
 8008082:	183b      	adds	r3, r7, r0
 8008084:	7a9b      	ldrb	r3, [r3, #10]
 8008086:	0019      	movs	r1, r3
 8008088:	4be3      	ldr	r3, [pc, #908]	; (8008418 <mix_sub_columns+0x3c8>)
 800808a:	5c5b      	ldrb	r3, [r3, r1]
 800808c:	4053      	eors	r3, r2
 800808e:	b2da      	uxtb	r2, r3
 8008090:	183b      	adds	r3, r7, r0
 8008092:	7bdb      	ldrb	r3, [r3, #15]
 8008094:	0019      	movs	r1, r3
 8008096:	4be0      	ldr	r3, [pc, #896]	; (8008418 <mix_sub_columns+0x3c8>)
 8008098:	5c5b      	ldrb	r3, [r3, r1]
 800809a:	4053      	eors	r3, r2
 800809c:	b2da      	uxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80080a2:	183b      	adds	r3, r7, r0
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	001a      	movs	r2, r3
 80080a8:	4bdb      	ldr	r3, [pc, #876]	; (8008418 <mix_sub_columns+0x3c8>)
 80080aa:	5c9a      	ldrb	r2, [r3, r2]
 80080ac:	183b      	adds	r3, r7, r0
 80080ae:	795b      	ldrb	r3, [r3, #5]
 80080b0:	0019      	movs	r1, r3
 80080b2:	4bd7      	ldr	r3, [pc, #860]	; (8008410 <mix_sub_columns+0x3c0>)
 80080b4:	5c5b      	ldrb	r3, [r3, r1]
 80080b6:	4053      	eors	r3, r2
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	183b      	adds	r3, r7, r0
 80080bc:	7a9b      	ldrb	r3, [r3, #10]
 80080be:	0019      	movs	r1, r3
 80080c0:	4bd4      	ldr	r3, [pc, #848]	; (8008414 <mix_sub_columns+0x3c4>)
 80080c2:	5c5b      	ldrb	r3, [r3, r1]
 80080c4:	4053      	eors	r3, r2
 80080c6:	b2d9      	uxtb	r1, r3
 80080c8:	183b      	adds	r3, r7, r0
 80080ca:	7bdb      	ldrb	r3, [r3, #15]
 80080cc:	001a      	movs	r2, r3
 80080ce:	4bd2      	ldr	r3, [pc, #840]	; (8008418 <mix_sub_columns+0x3c8>)
 80080d0:	5c9a      	ldrb	r2, [r3, r2]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3301      	adds	r3, #1
 80080d6:	404a      	eors	r2, r1
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80080dc:	183b      	adds	r3, r7, r0
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	001a      	movs	r2, r3
 80080e2:	4bcd      	ldr	r3, [pc, #820]	; (8008418 <mix_sub_columns+0x3c8>)
 80080e4:	5c9a      	ldrb	r2, [r3, r2]
 80080e6:	183b      	adds	r3, r7, r0
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	0019      	movs	r1, r3
 80080ec:	4bca      	ldr	r3, [pc, #808]	; (8008418 <mix_sub_columns+0x3c8>)
 80080ee:	5c5b      	ldrb	r3, [r3, r1]
 80080f0:	4053      	eors	r3, r2
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	183b      	adds	r3, r7, r0
 80080f6:	7a9b      	ldrb	r3, [r3, #10]
 80080f8:	0019      	movs	r1, r3
 80080fa:	4bc5      	ldr	r3, [pc, #788]	; (8008410 <mix_sub_columns+0x3c0>)
 80080fc:	5c5b      	ldrb	r3, [r3, r1]
 80080fe:	4053      	eors	r3, r2
 8008100:	b2d9      	uxtb	r1, r3
 8008102:	183b      	adds	r3, r7, r0
 8008104:	7bdb      	ldrb	r3, [r3, #15]
 8008106:	001a      	movs	r2, r3
 8008108:	4bc2      	ldr	r3, [pc, #776]	; (8008414 <mix_sub_columns+0x3c4>)
 800810a:	5c9a      	ldrb	r2, [r3, r2]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3302      	adds	r3, #2
 8008110:	404a      	eors	r2, r1
 8008112:	b2d2      	uxtb	r2, r2
 8008114:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8008116:	183b      	adds	r3, r7, r0
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	001a      	movs	r2, r3
 800811c:	4bbd      	ldr	r3, [pc, #756]	; (8008414 <mix_sub_columns+0x3c4>)
 800811e:	5c9a      	ldrb	r2, [r3, r2]
 8008120:	183b      	adds	r3, r7, r0
 8008122:	795b      	ldrb	r3, [r3, #5]
 8008124:	0019      	movs	r1, r3
 8008126:	4bbc      	ldr	r3, [pc, #752]	; (8008418 <mix_sub_columns+0x3c8>)
 8008128:	5c5b      	ldrb	r3, [r3, r1]
 800812a:	4053      	eors	r3, r2
 800812c:	b2da      	uxtb	r2, r3
 800812e:	183b      	adds	r3, r7, r0
 8008130:	7a9b      	ldrb	r3, [r3, #10]
 8008132:	0019      	movs	r1, r3
 8008134:	4bb8      	ldr	r3, [pc, #736]	; (8008418 <mix_sub_columns+0x3c8>)
 8008136:	5c5b      	ldrb	r3, [r3, r1]
 8008138:	4053      	eors	r3, r2
 800813a:	b2d9      	uxtb	r1, r3
 800813c:	183b      	adds	r3, r7, r0
 800813e:	7bdb      	ldrb	r3, [r3, #15]
 8008140:	001a      	movs	r2, r3
 8008142:	4bb3      	ldr	r3, [pc, #716]	; (8008410 <mix_sub_columns+0x3c0>)
 8008144:	5c9a      	ldrb	r2, [r3, r2]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3303      	adds	r3, #3
 800814a:	404a      	eors	r2, r1
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008150:	183b      	adds	r3, r7, r0
 8008152:	791b      	ldrb	r3, [r3, #4]
 8008154:	001a      	movs	r2, r3
 8008156:	4bae      	ldr	r3, [pc, #696]	; (8008410 <mix_sub_columns+0x3c0>)
 8008158:	5c9a      	ldrb	r2, [r3, r2]
 800815a:	183b      	adds	r3, r7, r0
 800815c:	7a5b      	ldrb	r3, [r3, #9]
 800815e:	0019      	movs	r1, r3
 8008160:	4bac      	ldr	r3, [pc, #688]	; (8008414 <mix_sub_columns+0x3c4>)
 8008162:	5c5b      	ldrb	r3, [r3, r1]
 8008164:	4053      	eors	r3, r2
 8008166:	b2da      	uxtb	r2, r3
 8008168:	183b      	adds	r3, r7, r0
 800816a:	7b9b      	ldrb	r3, [r3, #14]
 800816c:	0019      	movs	r1, r3
 800816e:	4baa      	ldr	r3, [pc, #680]	; (8008418 <mix_sub_columns+0x3c8>)
 8008170:	5c5b      	ldrb	r3, [r3, r1]
 8008172:	4053      	eors	r3, r2
 8008174:	b2d9      	uxtb	r1, r3
 8008176:	183b      	adds	r3, r7, r0
 8008178:	78db      	ldrb	r3, [r3, #3]
 800817a:	001a      	movs	r2, r3
 800817c:	4ba6      	ldr	r3, [pc, #664]	; (8008418 <mix_sub_columns+0x3c8>)
 800817e:	5c9a      	ldrb	r2, [r3, r2]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	404a      	eors	r2, r1
 8008186:	b2d2      	uxtb	r2, r2
 8008188:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800818a:	183b      	adds	r3, r7, r0
 800818c:	791b      	ldrb	r3, [r3, #4]
 800818e:	001a      	movs	r2, r3
 8008190:	4ba1      	ldr	r3, [pc, #644]	; (8008418 <mix_sub_columns+0x3c8>)
 8008192:	5c9a      	ldrb	r2, [r3, r2]
 8008194:	183b      	adds	r3, r7, r0
 8008196:	7a5b      	ldrb	r3, [r3, #9]
 8008198:	0019      	movs	r1, r3
 800819a:	4b9d      	ldr	r3, [pc, #628]	; (8008410 <mix_sub_columns+0x3c0>)
 800819c:	5c5b      	ldrb	r3, [r3, r1]
 800819e:	4053      	eors	r3, r2
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	183b      	adds	r3, r7, r0
 80081a4:	7b9b      	ldrb	r3, [r3, #14]
 80081a6:	0019      	movs	r1, r3
 80081a8:	4b9a      	ldr	r3, [pc, #616]	; (8008414 <mix_sub_columns+0x3c4>)
 80081aa:	5c5b      	ldrb	r3, [r3, r1]
 80081ac:	4053      	eors	r3, r2
 80081ae:	b2d9      	uxtb	r1, r3
 80081b0:	183b      	adds	r3, r7, r0
 80081b2:	78db      	ldrb	r3, [r3, #3]
 80081b4:	001a      	movs	r2, r3
 80081b6:	4b98      	ldr	r3, [pc, #608]	; (8008418 <mix_sub_columns+0x3c8>)
 80081b8:	5c9a      	ldrb	r2, [r3, r2]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3305      	adds	r3, #5
 80081be:	404a      	eors	r2, r1
 80081c0:	b2d2      	uxtb	r2, r2
 80081c2:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80081c4:	183b      	adds	r3, r7, r0
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	001a      	movs	r2, r3
 80081ca:	4b93      	ldr	r3, [pc, #588]	; (8008418 <mix_sub_columns+0x3c8>)
 80081cc:	5c9a      	ldrb	r2, [r3, r2]
 80081ce:	183b      	adds	r3, r7, r0
 80081d0:	7a5b      	ldrb	r3, [r3, #9]
 80081d2:	0019      	movs	r1, r3
 80081d4:	4b90      	ldr	r3, [pc, #576]	; (8008418 <mix_sub_columns+0x3c8>)
 80081d6:	5c5b      	ldrb	r3, [r3, r1]
 80081d8:	4053      	eors	r3, r2
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	183b      	adds	r3, r7, r0
 80081de:	7b9b      	ldrb	r3, [r3, #14]
 80081e0:	0019      	movs	r1, r3
 80081e2:	4b8b      	ldr	r3, [pc, #556]	; (8008410 <mix_sub_columns+0x3c0>)
 80081e4:	5c5b      	ldrb	r3, [r3, r1]
 80081e6:	4053      	eors	r3, r2
 80081e8:	b2d9      	uxtb	r1, r3
 80081ea:	183b      	adds	r3, r7, r0
 80081ec:	78db      	ldrb	r3, [r3, #3]
 80081ee:	001a      	movs	r2, r3
 80081f0:	4b88      	ldr	r3, [pc, #544]	; (8008414 <mix_sub_columns+0x3c4>)
 80081f2:	5c9a      	ldrb	r2, [r3, r2]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3306      	adds	r3, #6
 80081f8:	404a      	eors	r2, r1
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80081fe:	183b      	adds	r3, r7, r0
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	001a      	movs	r2, r3
 8008204:	4b83      	ldr	r3, [pc, #524]	; (8008414 <mix_sub_columns+0x3c4>)
 8008206:	5c9a      	ldrb	r2, [r3, r2]
 8008208:	183b      	adds	r3, r7, r0
 800820a:	7a5b      	ldrb	r3, [r3, #9]
 800820c:	0019      	movs	r1, r3
 800820e:	4b82      	ldr	r3, [pc, #520]	; (8008418 <mix_sub_columns+0x3c8>)
 8008210:	5c5b      	ldrb	r3, [r3, r1]
 8008212:	4053      	eors	r3, r2
 8008214:	b2da      	uxtb	r2, r3
 8008216:	183b      	adds	r3, r7, r0
 8008218:	7b9b      	ldrb	r3, [r3, #14]
 800821a:	0019      	movs	r1, r3
 800821c:	4b7e      	ldr	r3, [pc, #504]	; (8008418 <mix_sub_columns+0x3c8>)
 800821e:	5c5b      	ldrb	r3, [r3, r1]
 8008220:	4053      	eors	r3, r2
 8008222:	b2d9      	uxtb	r1, r3
 8008224:	183b      	adds	r3, r7, r0
 8008226:	78db      	ldrb	r3, [r3, #3]
 8008228:	001a      	movs	r2, r3
 800822a:	4b79      	ldr	r3, [pc, #484]	; (8008410 <mix_sub_columns+0x3c0>)
 800822c:	5c9a      	ldrb	r2, [r3, r2]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3307      	adds	r3, #7
 8008232:	404a      	eors	r2, r1
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8008238:	183b      	adds	r3, r7, r0
 800823a:	7a1b      	ldrb	r3, [r3, #8]
 800823c:	001a      	movs	r2, r3
 800823e:	4b74      	ldr	r3, [pc, #464]	; (8008410 <mix_sub_columns+0x3c0>)
 8008240:	5c9a      	ldrb	r2, [r3, r2]
 8008242:	183b      	adds	r3, r7, r0
 8008244:	7b5b      	ldrb	r3, [r3, #13]
 8008246:	0019      	movs	r1, r3
 8008248:	4b72      	ldr	r3, [pc, #456]	; (8008414 <mix_sub_columns+0x3c4>)
 800824a:	5c5b      	ldrb	r3, [r3, r1]
 800824c:	4053      	eors	r3, r2
 800824e:	b2da      	uxtb	r2, r3
 8008250:	183b      	adds	r3, r7, r0
 8008252:	789b      	ldrb	r3, [r3, #2]
 8008254:	0019      	movs	r1, r3
 8008256:	4b70      	ldr	r3, [pc, #448]	; (8008418 <mix_sub_columns+0x3c8>)
 8008258:	5c5b      	ldrb	r3, [r3, r1]
 800825a:	4053      	eors	r3, r2
 800825c:	b2d9      	uxtb	r1, r3
 800825e:	183b      	adds	r3, r7, r0
 8008260:	79db      	ldrb	r3, [r3, #7]
 8008262:	001a      	movs	r2, r3
 8008264:	4b6c      	ldr	r3, [pc, #432]	; (8008418 <mix_sub_columns+0x3c8>)
 8008266:	5c9a      	ldrb	r2, [r3, r2]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3308      	adds	r3, #8
 800826c:	404a      	eors	r2, r1
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8008272:	183b      	adds	r3, r7, r0
 8008274:	7a1b      	ldrb	r3, [r3, #8]
 8008276:	001a      	movs	r2, r3
 8008278:	4b67      	ldr	r3, [pc, #412]	; (8008418 <mix_sub_columns+0x3c8>)
 800827a:	5c9a      	ldrb	r2, [r3, r2]
 800827c:	183b      	adds	r3, r7, r0
 800827e:	7b5b      	ldrb	r3, [r3, #13]
 8008280:	0019      	movs	r1, r3
 8008282:	4b63      	ldr	r3, [pc, #396]	; (8008410 <mix_sub_columns+0x3c0>)
 8008284:	5c5b      	ldrb	r3, [r3, r1]
 8008286:	4053      	eors	r3, r2
 8008288:	b2da      	uxtb	r2, r3
 800828a:	183b      	adds	r3, r7, r0
 800828c:	789b      	ldrb	r3, [r3, #2]
 800828e:	0019      	movs	r1, r3
 8008290:	4b60      	ldr	r3, [pc, #384]	; (8008414 <mix_sub_columns+0x3c4>)
 8008292:	5c5b      	ldrb	r3, [r3, r1]
 8008294:	4053      	eors	r3, r2
 8008296:	b2d9      	uxtb	r1, r3
 8008298:	183b      	adds	r3, r7, r0
 800829a:	79db      	ldrb	r3, [r3, #7]
 800829c:	001a      	movs	r2, r3
 800829e:	4b5e      	ldr	r3, [pc, #376]	; (8008418 <mix_sub_columns+0x3c8>)
 80082a0:	5c9a      	ldrb	r2, [r3, r2]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3309      	adds	r3, #9
 80082a6:	404a      	eors	r2, r1
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80082ac:	183b      	adds	r3, r7, r0
 80082ae:	7a1b      	ldrb	r3, [r3, #8]
 80082b0:	001a      	movs	r2, r3
 80082b2:	4b59      	ldr	r3, [pc, #356]	; (8008418 <mix_sub_columns+0x3c8>)
 80082b4:	5c9a      	ldrb	r2, [r3, r2]
 80082b6:	183b      	adds	r3, r7, r0
 80082b8:	7b5b      	ldrb	r3, [r3, #13]
 80082ba:	0019      	movs	r1, r3
 80082bc:	4b56      	ldr	r3, [pc, #344]	; (8008418 <mix_sub_columns+0x3c8>)
 80082be:	5c5b      	ldrb	r3, [r3, r1]
 80082c0:	4053      	eors	r3, r2
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	183b      	adds	r3, r7, r0
 80082c6:	789b      	ldrb	r3, [r3, #2]
 80082c8:	0019      	movs	r1, r3
 80082ca:	4b51      	ldr	r3, [pc, #324]	; (8008410 <mix_sub_columns+0x3c0>)
 80082cc:	5c5b      	ldrb	r3, [r3, r1]
 80082ce:	4053      	eors	r3, r2
 80082d0:	b2d9      	uxtb	r1, r3
 80082d2:	183b      	adds	r3, r7, r0
 80082d4:	79db      	ldrb	r3, [r3, #7]
 80082d6:	001a      	movs	r2, r3
 80082d8:	4b4e      	ldr	r3, [pc, #312]	; (8008414 <mix_sub_columns+0x3c4>)
 80082da:	5c9a      	ldrb	r2, [r3, r2]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	330a      	adds	r3, #10
 80082e0:	404a      	eors	r2, r1
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80082e6:	183b      	adds	r3, r7, r0
 80082e8:	7a1b      	ldrb	r3, [r3, #8]
 80082ea:	001a      	movs	r2, r3
 80082ec:	4b49      	ldr	r3, [pc, #292]	; (8008414 <mix_sub_columns+0x3c4>)
 80082ee:	5c9a      	ldrb	r2, [r3, r2]
 80082f0:	183b      	adds	r3, r7, r0
 80082f2:	7b5b      	ldrb	r3, [r3, #13]
 80082f4:	0019      	movs	r1, r3
 80082f6:	4b48      	ldr	r3, [pc, #288]	; (8008418 <mix_sub_columns+0x3c8>)
 80082f8:	5c5b      	ldrb	r3, [r3, r1]
 80082fa:	4053      	eors	r3, r2
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	183b      	adds	r3, r7, r0
 8008300:	789b      	ldrb	r3, [r3, #2]
 8008302:	0019      	movs	r1, r3
 8008304:	4b44      	ldr	r3, [pc, #272]	; (8008418 <mix_sub_columns+0x3c8>)
 8008306:	5c5b      	ldrb	r3, [r3, r1]
 8008308:	4053      	eors	r3, r2
 800830a:	b2d9      	uxtb	r1, r3
 800830c:	183b      	adds	r3, r7, r0
 800830e:	79db      	ldrb	r3, [r3, #7]
 8008310:	001a      	movs	r2, r3
 8008312:	4b3f      	ldr	r3, [pc, #252]	; (8008410 <mix_sub_columns+0x3c0>)
 8008314:	5c9a      	ldrb	r2, [r3, r2]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	330b      	adds	r3, #11
 800831a:	404a      	eors	r2, r1
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8008320:	183b      	adds	r3, r7, r0
 8008322:	7b1b      	ldrb	r3, [r3, #12]
 8008324:	001a      	movs	r2, r3
 8008326:	4b3a      	ldr	r3, [pc, #232]	; (8008410 <mix_sub_columns+0x3c0>)
 8008328:	5c9a      	ldrb	r2, [r3, r2]
 800832a:	183b      	adds	r3, r7, r0
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	0019      	movs	r1, r3
 8008330:	4b38      	ldr	r3, [pc, #224]	; (8008414 <mix_sub_columns+0x3c4>)
 8008332:	5c5b      	ldrb	r3, [r3, r1]
 8008334:	4053      	eors	r3, r2
 8008336:	b2da      	uxtb	r2, r3
 8008338:	183b      	adds	r3, r7, r0
 800833a:	799b      	ldrb	r3, [r3, #6]
 800833c:	0019      	movs	r1, r3
 800833e:	4b36      	ldr	r3, [pc, #216]	; (8008418 <mix_sub_columns+0x3c8>)
 8008340:	5c5b      	ldrb	r3, [r3, r1]
 8008342:	4053      	eors	r3, r2
 8008344:	b2d9      	uxtb	r1, r3
 8008346:	183b      	adds	r3, r7, r0
 8008348:	7adb      	ldrb	r3, [r3, #11]
 800834a:	001a      	movs	r2, r3
 800834c:	4b32      	ldr	r3, [pc, #200]	; (8008418 <mix_sub_columns+0x3c8>)
 800834e:	5c9a      	ldrb	r2, [r3, r2]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	330c      	adds	r3, #12
 8008354:	404a      	eors	r2, r1
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800835a:	183b      	adds	r3, r7, r0
 800835c:	7b1b      	ldrb	r3, [r3, #12]
 800835e:	001a      	movs	r2, r3
 8008360:	4b2d      	ldr	r3, [pc, #180]	; (8008418 <mix_sub_columns+0x3c8>)
 8008362:	5c9a      	ldrb	r2, [r3, r2]
 8008364:	183b      	adds	r3, r7, r0
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	0019      	movs	r1, r3
 800836a:	4b29      	ldr	r3, [pc, #164]	; (8008410 <mix_sub_columns+0x3c0>)
 800836c:	5c5b      	ldrb	r3, [r3, r1]
 800836e:	4053      	eors	r3, r2
 8008370:	b2da      	uxtb	r2, r3
 8008372:	183b      	adds	r3, r7, r0
 8008374:	799b      	ldrb	r3, [r3, #6]
 8008376:	0019      	movs	r1, r3
 8008378:	4b26      	ldr	r3, [pc, #152]	; (8008414 <mix_sub_columns+0x3c4>)
 800837a:	5c5b      	ldrb	r3, [r3, r1]
 800837c:	4053      	eors	r3, r2
 800837e:	b2d9      	uxtb	r1, r3
 8008380:	183b      	adds	r3, r7, r0
 8008382:	7adb      	ldrb	r3, [r3, #11]
 8008384:	001a      	movs	r2, r3
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <mix_sub_columns+0x3c8>)
 8008388:	5c9a      	ldrb	r2, [r3, r2]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	330d      	adds	r3, #13
 800838e:	404a      	eors	r2, r1
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8008394:	183b      	adds	r3, r7, r0
 8008396:	7b1b      	ldrb	r3, [r3, #12]
 8008398:	001a      	movs	r2, r3
 800839a:	4b1f      	ldr	r3, [pc, #124]	; (8008418 <mix_sub_columns+0x3c8>)
 800839c:	5c9a      	ldrb	r2, [r3, r2]
 800839e:	183b      	adds	r3, r7, r0
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	0019      	movs	r1, r3
 80083a4:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <mix_sub_columns+0x3c8>)
 80083a6:	5c5b      	ldrb	r3, [r3, r1]
 80083a8:	4053      	eors	r3, r2
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	183b      	adds	r3, r7, r0
 80083ae:	799b      	ldrb	r3, [r3, #6]
 80083b0:	0019      	movs	r1, r3
 80083b2:	4b17      	ldr	r3, [pc, #92]	; (8008410 <mix_sub_columns+0x3c0>)
 80083b4:	5c5b      	ldrb	r3, [r3, r1]
 80083b6:	4053      	eors	r3, r2
 80083b8:	b2d9      	uxtb	r1, r3
 80083ba:	183b      	adds	r3, r7, r0
 80083bc:	7adb      	ldrb	r3, [r3, #11]
 80083be:	001a      	movs	r2, r3
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <mix_sub_columns+0x3c4>)
 80083c2:	5c9a      	ldrb	r2, [r3, r2]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	330e      	adds	r3, #14
 80083c8:	404a      	eors	r2, r1
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80083ce:	183b      	adds	r3, r7, r0
 80083d0:	7b1b      	ldrb	r3, [r3, #12]
 80083d2:	001a      	movs	r2, r3
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <mix_sub_columns+0x3c4>)
 80083d6:	5c9a      	ldrb	r2, [r3, r2]
 80083d8:	183b      	adds	r3, r7, r0
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	0019      	movs	r1, r3
 80083de:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <mix_sub_columns+0x3c8>)
 80083e0:	5c5b      	ldrb	r3, [r3, r1]
 80083e2:	4053      	eors	r3, r2
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	183b      	adds	r3, r7, r0
 80083e8:	799b      	ldrb	r3, [r3, #6]
 80083ea:	0019      	movs	r1, r3
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <mix_sub_columns+0x3c8>)
 80083ee:	5c5b      	ldrb	r3, [r3, r1]
 80083f0:	4053      	eors	r3, r2
 80083f2:	b2d9      	uxtb	r1, r3
 80083f4:	183b      	adds	r3, r7, r0
 80083f6:	7adb      	ldrb	r3, [r3, #11]
 80083f8:	001a      	movs	r2, r3
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <mix_sub_columns+0x3c0>)
 80083fc:	5c9a      	ldrb	r2, [r3, r2]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	330f      	adds	r3, #15
 8008402:	404a      	eors	r2, r1
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	701a      	strb	r2, [r3, #0]
  }
 8008408:	46c0      	nop			; (mov r8, r8)
 800840a:	46bd      	mov	sp, r7
 800840c:	b007      	add	sp, #28
 800840e:	bd90      	pop	{r4, r7, pc}
 8008410:	08028364 	.word	0x08028364
 8008414:	08028464 	.word	0x08028464
 8008418:	08028264 	.word	0x08028264

0800841c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800841c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	607a      	str	r2, [r7, #4]
 8008426:	200b      	movs	r0, #11
 8008428:	183b      	adds	r3, r7, r0
 800842a:	1c0a      	adds	r2, r1, #0
 800842c:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800842e:	183b      	adds	r3, r7, r0
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b18      	cmp	r3, #24
 8008434:	d009      	beq.n	800844a <aes_set_key+0x2e>
 8008436:	2b20      	cmp	r3, #32
 8008438:	d007      	beq.n	800844a <aes_set_key+0x2e>
 800843a:	2b10      	cmp	r3, #16
 800843c:	d005      	beq.n	800844a <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	22f0      	movs	r2, #240	; 0xf0
 8008442:	2100      	movs	r1, #0
 8008444:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8008446:	23ff      	movs	r3, #255	; 0xff
 8008448:	e113      	b.n	8008672 <aes_set_key+0x256>
        break;
 800844a:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	240b      	movs	r4, #11
 8008450:	193b      	adds	r3, r7, r4
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	0019      	movs	r1, r3
 8008458:	f7ff fbc0 	bl	8007bdc <copy_block_nn>
    hi = (keylen + 28) << 2;
 800845c:	0020      	movs	r0, r4
 800845e:	183b      	adds	r3, r7, r0
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	331c      	adds	r3, #28
 8008464:	b2da      	uxtb	r2, r3
 8008466:	2111      	movs	r1, #17
 8008468:	187b      	adds	r3, r7, r1
 800846a:	0092      	lsls	r2, r2, #2
 800846c:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800846e:	187b      	adds	r3, r7, r1
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	091b      	lsrs	r3, r3, #4
 8008474:	b2db      	uxtb	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b2d9      	uxtb	r1, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	22f0      	movs	r2, #240	; 0xf0
 800847e:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008480:	2317      	movs	r3, #23
 8008482:	18fb      	adds	r3, r7, r3
 8008484:	183a      	adds	r2, r7, r0
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	2316      	movs	r3, #22
 800848c:	18fb      	adds	r3, r7, r3
 800848e:	2201      	movs	r2, #1
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	e0e4      	b.n	800865e <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8008494:	2017      	movs	r0, #23
 8008496:	183b      	adds	r3, r7, r0
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	1f1a      	subs	r2, r3, #4
 800849c:	2315      	movs	r3, #21
 800849e:	18fb      	adds	r3, r7, r3
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	5c8a      	ldrb	r2, [r1, r2]
 80084a4:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 80084a6:	183b      	adds	r3, r7, r0
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	1eda      	subs	r2, r3, #3
 80084ac:	2314      	movs	r3, #20
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	5c8a      	ldrb	r2, [r1, r2]
 80084b4:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80084b6:	183b      	adds	r3, r7, r0
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	1e9a      	subs	r2, r3, #2
 80084bc:	2313      	movs	r3, #19
 80084be:	18fb      	adds	r3, r7, r3
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	5c8a      	ldrb	r2, [r1, r2]
 80084c4:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 80084c6:	183b      	adds	r3, r7, r0
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	1e5a      	subs	r2, r3, #1
 80084cc:	2312      	movs	r3, #18
 80084ce:	18fb      	adds	r3, r7, r3
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	5c8a      	ldrb	r2, [r1, r2]
 80084d4:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 80084d6:	183a      	adds	r2, r7, r0
 80084d8:	230b      	movs	r3, #11
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	0019      	movs	r1, r3
 80084e2:	0010      	movs	r0, r2
 80084e4:	f7f7 fe9e 	bl	8000224 <__aeabi_uidivmod>
 80084e8:	000b      	movs	r3, r1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d13e      	bne.n	800856e <aes_set_key+0x152>
        {
            tt = t0;
 80084f0:	2410      	movs	r4, #16
 80084f2:	193b      	adds	r3, r7, r4
 80084f4:	2015      	movs	r0, #21
 80084f6:	183a      	adds	r2, r7, r0
 80084f8:	7812      	ldrb	r2, [r2, #0]
 80084fa:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 80084fc:	2514      	movs	r5, #20
 80084fe:	197b      	adds	r3, r7, r5
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	4a5e      	ldr	r2, [pc, #376]	; (800867c <aes_set_key+0x260>)
 8008504:	5cd1      	ldrb	r1, [r2, r3]
 8008506:	183b      	adds	r3, r7, r0
 8008508:	2016      	movs	r0, #22
 800850a:	183a      	adds	r2, r7, r0
 800850c:	7812      	ldrb	r2, [r2, #0]
 800850e:	404a      	eors	r2, r1
 8008510:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 8008512:	2613      	movs	r6, #19
 8008514:	19bb      	adds	r3, r7, r6
 8008516:	781a      	ldrb	r2, [r3, #0]
 8008518:	197b      	adds	r3, r7, r5
 800851a:	4958      	ldr	r1, [pc, #352]	; (800867c <aes_set_key+0x260>)
 800851c:	5c8a      	ldrb	r2, [r1, r2]
 800851e:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 8008520:	2512      	movs	r5, #18
 8008522:	197b      	adds	r3, r7, r5
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	19bb      	adds	r3, r7, r6
 8008528:	4954      	ldr	r1, [pc, #336]	; (800867c <aes_set_key+0x260>)
 800852a:	5c8a      	ldrb	r2, [r1, r2]
 800852c:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800852e:	193b      	adds	r3, r7, r4
 8008530:	781a      	ldrb	r2, [r3, #0]
 8008532:	197b      	adds	r3, r7, r5
 8008534:	4951      	ldr	r1, [pc, #324]	; (800867c <aes_set_key+0x260>)
 8008536:	5c8a      	ldrb	r2, [r1, r2]
 8008538:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800853a:	183b      	adds	r3, r7, r0
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	b25a      	sxtb	r2, r3
 8008542:	0004      	movs	r4, r0
 8008544:	183b      	adds	r3, r7, r0
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	09db      	lsrs	r3, r3, #7
 800854a:	b2db      	uxtb	r3, r3
 800854c:	1c19      	adds	r1, r3, #0
 800854e:	1c0b      	adds	r3, r1, #0
 8008550:	18db      	adds	r3, r3, r3
 8008552:	185b      	adds	r3, r3, r1
 8008554:	1c19      	adds	r1, r3, #0
 8008556:	00c8      	lsls	r0, r1, #3
 8008558:	1c19      	adds	r1, r3, #0
 800855a:	1c03      	adds	r3, r0, #0
 800855c:	18cb      	adds	r3, r1, r3
 800855e:	b2db      	uxtb	r3, r3
 8008560:	b25b      	sxtb	r3, r3
 8008562:	4053      	eors	r3, r2
 8008564:	b25a      	sxtb	r2, r3
 8008566:	0020      	movs	r0, r4
 8008568:	183b      	adds	r3, r7, r0
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e02e      	b.n	80085cc <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800856e:	230b      	movs	r3, #11
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b18      	cmp	r3, #24
 8008576:	d929      	bls.n	80085cc <aes_set_key+0x1b0>
 8008578:	2317      	movs	r3, #23
 800857a:	18fa      	adds	r2, r7, r3
 800857c:	230b      	movs	r3, #11
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	0019      	movs	r1, r3
 8008586:	0010      	movs	r0, r2
 8008588:	f7f7 fe4c 	bl	8000224 <__aeabi_uidivmod>
 800858c:	000b      	movs	r3, r1
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b10      	cmp	r3, #16
 8008592:	d11b      	bne.n	80085cc <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 8008594:	2115      	movs	r1, #21
 8008596:	187b      	adds	r3, r7, r1
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	187b      	adds	r3, r7, r1
 800859c:	4937      	ldr	r1, [pc, #220]	; (800867c <aes_set_key+0x260>)
 800859e:	5c8a      	ldrb	r2, [r1, r2]
 80085a0:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 80085a2:	2114      	movs	r1, #20
 80085a4:	187b      	adds	r3, r7, r1
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	187b      	adds	r3, r7, r1
 80085aa:	4934      	ldr	r1, [pc, #208]	; (800867c <aes_set_key+0x260>)
 80085ac:	5c8a      	ldrb	r2, [r1, r2]
 80085ae:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80085b0:	2113      	movs	r1, #19
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	781a      	ldrb	r2, [r3, #0]
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	4930      	ldr	r1, [pc, #192]	; (800867c <aes_set_key+0x260>)
 80085ba:	5c8a      	ldrb	r2, [r1, r2]
 80085bc:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 80085be:	2112      	movs	r1, #18
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	187b      	adds	r3, r7, r1
 80085c6:	492d      	ldr	r1, [pc, #180]	; (800867c <aes_set_key+0x260>)
 80085c8:	5c8a      	ldrb	r2, [r1, r2]
 80085ca:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 80085cc:	2410      	movs	r4, #16
 80085ce:	193b      	adds	r3, r7, r4
 80085d0:	2017      	movs	r0, #23
 80085d2:	1839      	adds	r1, r7, r0
 80085d4:	220b      	movs	r2, #11
 80085d6:	18ba      	adds	r2, r7, r2
 80085d8:	7809      	ldrb	r1, [r1, #0]
 80085da:	7812      	ldrb	r2, [r2, #0]
 80085dc:	1a8a      	subs	r2, r1, r2
 80085de:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80085e0:	193b      	adds	r3, r7, r4
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	5cd1      	ldrb	r1, [r2, r3]
 80085e8:	183b      	adds	r3, r7, r0
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2215      	movs	r2, #21
 80085ee:	18ba      	adds	r2, r7, r2
 80085f0:	7812      	ldrb	r2, [r2, #0]
 80085f2:	404a      	eors	r2, r1
 80085f4:	b2d1      	uxtb	r1, r2
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80085fa:	193b      	adds	r3, r7, r4
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	3301      	adds	r3, #1
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	5cd1      	ldrb	r1, [r2, r3]
 8008604:	183b      	adds	r3, r7, r0
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	2214      	movs	r2, #20
 800860c:	18ba      	adds	r2, r7, r2
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	404a      	eors	r2, r1
 8008612:	b2d1      	uxtb	r1, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8008618:	193b      	adds	r3, r7, r4
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	3302      	adds	r3, #2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	5cd1      	ldrb	r1, [r2, r3]
 8008622:	183b      	adds	r3, r7, r0
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	3302      	adds	r3, #2
 8008628:	2213      	movs	r2, #19
 800862a:	18ba      	adds	r2, r7, r2
 800862c:	7812      	ldrb	r2, [r2, #0]
 800862e:	404a      	eors	r2, r1
 8008630:	b2d1      	uxtb	r1, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8008636:	193b      	adds	r3, r7, r4
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	3303      	adds	r3, #3
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	5cd1      	ldrb	r1, [r2, r3]
 8008640:	183b      	adds	r3, r7, r0
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	3303      	adds	r3, #3
 8008646:	2212      	movs	r2, #18
 8008648:	18ba      	adds	r2, r7, r2
 800864a:	7812      	ldrb	r2, [r2, #0]
 800864c:	404a      	eors	r2, r1
 800864e:	b2d1      	uxtb	r1, r2
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008654:	183b      	adds	r3, r7, r0
 8008656:	183a      	adds	r2, r7, r0
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	3204      	adds	r2, #4
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	2317      	movs	r3, #23
 8008660:	18fa      	adds	r2, r7, r3
 8008662:	2311      	movs	r3, #17
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	7812      	ldrb	r2, [r2, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d200      	bcs.n	8008670 <aes_set_key+0x254>
 800866e:	e711      	b.n	8008494 <aes_set_key+0x78>
    }
    return 0;
 8008670:	2300      	movs	r3, #0
}
 8008672:	0018      	movs	r0, r3
 8008674:	46bd      	mov	sp, r7
 8008676:	b007      	add	sp, #28
 8008678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867a:	46c0      	nop			; (mov r8, r8)
 800867c:	08028264 	.word	0x08028264

08008680 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8008680:	b5b0      	push	{r4, r5, r7, lr}
 8008682:	b08a      	sub	sp, #40	; 0x28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	22f0      	movs	r2, #240	; 0xf0
 8008690:	5c9b      	ldrb	r3, [r3, r2]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d03a      	beq.n	800870c <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	2314      	movs	r3, #20
 800869c:	18fb      	adds	r3, r7, r3
 800869e:	0018      	movs	r0, r3
 80086a0:	f7ff fb6d 	bl	8007d7e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80086a4:	2327      	movs	r3, #39	; 0x27
 80086a6:	18fb      	adds	r3, r7, r3
 80086a8:	2201      	movs	r2, #1
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	e014      	b.n	80086d8 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80086ae:	2514      	movs	r5, #20
 80086b0:	197b      	adds	r3, r7, r5
 80086b2:	0018      	movs	r0, r3
 80086b4:	f7ff fccc 	bl	8008050 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2427      	movs	r4, #39	; 0x27
 80086bc:	193a      	adds	r2, r7, r4
 80086be:	7812      	ldrb	r2, [r2, #0]
 80086c0:	0112      	lsls	r2, r2, #4
 80086c2:	189a      	adds	r2, r3, r2
 80086c4:	197b      	adds	r3, r7, r5
 80086c6:	0011      	movs	r1, r2
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7ff fc0f 	bl	8007eec <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80086ce:	193b      	adds	r3, r7, r4
 80086d0:	193a      	adds	r2, r7, r4
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	3201      	adds	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	22f0      	movs	r2, #240	; 0xf0
 80086dc:	5c9b      	ldrb	r3, [r3, r2]
 80086de:	2227      	movs	r2, #39	; 0x27
 80086e0:	18ba      	adds	r2, r7, r2
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d3e2      	bcc.n	80086ae <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80086e8:	2414      	movs	r4, #20
 80086ea:	193b      	adds	r3, r7, r4
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7ff fc0d 	bl	8007f0c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2227      	movs	r2, #39	; 0x27
 80086f6:	18ba      	adds	r2, r7, r2
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	0112      	lsls	r2, r2, #4
 80086fc:	189a      	adds	r2, r3, r2
 80086fe:	1939      	adds	r1, r7, r4
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	0018      	movs	r0, r3
 8008704:	f7ff fb3b 	bl	8007d7e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8008708:	2300      	movs	r3, #0
 800870a:	e000      	b.n	800870e <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 800870c:	23ff      	movs	r3, #255	; 0xff
}
 800870e:	0018      	movs	r0, r3
 8008710:	46bd      	mov	sp, r7
 8008712:	b00a      	add	sp, #40	; 0x28
 8008714:	bdb0      	pop	{r4, r5, r7, pc}

08008716 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	33f1      	adds	r3, #241	; 0xf1
 8008722:	2210      	movs	r2, #16
 8008724:	2100      	movs	r1, #0
 8008726:	0018      	movs	r0, r3
 8008728:	f014 fb00 	bl	801cd2c <memset1>
            ctx->M_n = 0;
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	238a      	movs	r3, #138	; 0x8a
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	2100      	movs	r1, #0
 8008734:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	22f0      	movs	r2, #240	; 0xf0
 800873a:	2100      	movs	r1, #0
 800873c:	0018      	movs	r0, r3
 800873e:	f014 faf5 	bl	801cd2c <memset1>
}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	46bd      	mov	sp, r7
 8008746:	b002      	add	sp, #8
 8008748:	bd80      	pop	{r7, pc}

0800874a <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2110      	movs	r1, #16
 800875a:	0018      	movs	r0, r3
 800875c:	f7ff fe5e 	bl	800841c <aes_set_key>
}
 8008760:	46c0      	nop			; (mov r8, r8)
 8008762:	46bd      	mov	sp, r7
 8008764:	b002      	add	sp, #8
 8008766:	bd80      	pop	{r7, pc}

08008768 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8008768:	b590      	push	{r4, r7, lr}
 800876a:	b08d      	sub	sp, #52	; 0x34
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	238a      	movs	r3, #138	; 0x8a
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	58d3      	ldr	r3, [r2, r3]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d100      	bne.n	8008782 <AES_CMAC_Update+0x1a>
 8008780:	e097      	b.n	80088b2 <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	238a      	movs	r3, #138	; 0x8a
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	58d3      	ldr	r3, [r2, r3]
 800878a:	2210      	movs	r2, #16
 800878c:	1ad2      	subs	r2, r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4293      	cmp	r3, r2
 8008792:	d900      	bls.n	8008796 <AES_CMAC_Update+0x2e>
 8008794:	0013      	movs	r3, r2
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	1c9a      	adds	r2, r3, #2
 800879c:	32ff      	adds	r2, #255	; 0xff
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	238a      	movs	r3, #138	; 0x8a
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	58cb      	ldr	r3, [r1, r3]
 80087a6:	18d3      	adds	r3, r2, r3
 80087a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087aa:	b292      	uxth	r2, r2
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	0018      	movs	r0, r3
 80087b0:	f014 fa80 	bl	801ccb4 <memcpy1>
                    ctx->M_n += mlen;
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	238a      	movs	r3, #138	; 0x8a
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	58d2      	ldr	r2, [r2, r3]
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	18d1      	adds	r1, r2, r3
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	238a      	movs	r3, #138	; 0x8a
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	238a      	movs	r3, #138	; 0x8a
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	58d3      	ldr	r3, [r2, r3]
 80087d0:	2b0f      	cmp	r3, #15
 80087d2:	d800      	bhi.n	80087d6 <AES_CMAC_Update+0x6e>
 80087d4:	e07f      	b.n	80088d6 <AES_CMAC_Update+0x16e>
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	429a      	cmp	r2, r3
 80087dc:	d100      	bne.n	80087e0 <AES_CMAC_Update+0x78>
 80087de:	e07a      	b.n	80088d6 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 80087e0:	2300      	movs	r3, #0
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e4:	e018      	b.n	8008818 <AES_CMAC_Update+0xb0>
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	21f1      	movs	r1, #241	; 0xf1
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	185b      	adds	r3, r3, r1
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	2302      	movs	r3, #2
 80087f6:	33ff      	adds	r3, #255	; 0xff
 80087f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087fa:	1841      	adds	r1, r0, r1
 80087fc:	18cb      	adds	r3, r1, r3
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	4053      	eors	r3, r2
 8008802:	b2d8      	uxtb	r0, r3
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	21f1      	movs	r1, #241	; 0xf1
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	18d3      	adds	r3, r2, r3
 800880c:	185b      	adds	r3, r3, r1
 800880e:	1c02      	adds	r2, r0, #0
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	3301      	adds	r3, #1
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b0f      	cmp	r3, #15
 800881c:	dde3      	ble.n	80087e6 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	33f1      	adds	r3, #241	; 0xf1
 8008822:	0018      	movs	r0, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	33f1      	adds	r3, #241	; 0xf1
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	0019      	movs	r1, r3
 800882c:	f7ff ff28 	bl	8008680 <aes_encrypt>
                    data += mlen;
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	18d3      	adds	r3, r2, r3
 8008836:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 8008840:	e037      	b.n	80088b2 <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 8008842:	2300      	movs	r3, #0
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
 8008846:	e015      	b.n	8008874 <AES_CMAC_Update+0x10c>
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	21f1      	movs	r1, #241	; 0xf1
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	18d3      	adds	r3, r2, r3
 8008850:	185b      	adds	r3, r3, r1
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	18cb      	adds	r3, r1, r3
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4053      	eors	r3, r2
 800885e:	b2d8      	uxtb	r0, r3
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	21f1      	movs	r1, #241	; 0xf1
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	18d3      	adds	r3, r2, r3
 8008868:	185b      	adds	r3, r3, r1
 800886a:	1c02      	adds	r2, r0, #0
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	3301      	adds	r3, #1
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2b0f      	cmp	r3, #15
 8008878:	dde6      	ble.n	8008848 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	33f1      	adds	r3, #241	; 0xf1
 800887e:	0019      	movs	r1, r3
 8008880:	2414      	movs	r4, #20
 8008882:	193b      	adds	r3, r7, r4
 8008884:	2210      	movs	r2, #16
 8008886:	0018      	movs	r0, r3
 8008888:	f014 fa14 	bl	801ccb4 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	1939      	adds	r1, r7, r4
 8008890:	193b      	adds	r3, r7, r4
 8008892:	0018      	movs	r0, r3
 8008894:	f7ff fef4 	bl	8008680 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	33f1      	adds	r3, #241	; 0xf1
 800889c:	1939      	adds	r1, r7, r4
 800889e:	2210      	movs	r2, #16
 80088a0:	0018      	movs	r0, r3
 80088a2:	f014 fa07 	bl	801ccb4 <memcpy1>

                    data += 16;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3310      	adds	r3, #16
 80088aa:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3b10      	subs	r3, #16
 80088b0:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b10      	cmp	r3, #16
 80088b6:	d8c4      	bhi.n	8008842 <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3302      	adds	r3, #2
 80088bc:	33ff      	adds	r3, #255	; 0xff
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	b292      	uxth	r2, r2
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	0018      	movs	r0, r3
 80088c6:	f014 f9f5 	bl	801ccb4 <memcpy1>
            ctx->M_n = len;
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	238a      	movs	r3, #138	; 0x8a
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	50d1      	str	r1, [r2, r3]
 80088d4:	e000      	b.n	80088d8 <AES_CMAC_Update+0x170>
                            return;
 80088d6:	46c0      	nop			; (mov r8, r8)
}
 80088d8:	46bd      	mov	sp, r7
 80088da:	b00d      	add	sp, #52	; 0x34
 80088dc:	bd90      	pop	{r4, r7, pc}

080088de <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 80088de:	b590      	push	{r4, r7, lr}
 80088e0:	b093      	sub	sp, #76	; 0x4c
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 80088e8:	241c      	movs	r4, #28
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	2210      	movs	r2, #16
 80088ee:	2100      	movs	r1, #0
 80088f0:	0018      	movs	r0, r3
 80088f2:	f014 fa1b 	bl	801cd2c <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	1939      	adds	r1, r7, r4
 80088fa:	193b      	adds	r3, r7, r4
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7ff febf 	bl	8008680 <aes_encrypt>

            if (K[0] & 0x80) {
 8008902:	193b      	adds	r3, r7, r4
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b25b      	sxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	da2e      	bge.n	800896a <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 800890c:	2300      	movs	r3, #0
 800890e:	647b      	str	r3, [r7, #68]	; 0x44
 8008910:	e018      	b.n	8008944 <AES_CMAC_Final+0x66>
 8008912:	201c      	movs	r0, #28
 8008914:	183a      	adds	r2, r7, r0
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b25a      	sxtb	r2, r3
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	3301      	adds	r3, #1
 8008924:	1839      	adds	r1, r7, r0
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	09db      	lsrs	r3, r3, #7
 800892a:	b2db      	uxtb	r3, r3
 800892c:	b25b      	sxtb	r3, r3
 800892e:	4313      	orrs	r3, r2
 8008930:	b25b      	sxtb	r3, r3
 8008932:	b2d9      	uxtb	r1, r3
 8008934:	183a      	adds	r2, r7, r0
 8008936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008938:	18d3      	adds	r3, r2, r3
 800893a:	1c0a      	adds	r2, r1, #0
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	3301      	adds	r3, #1
 8008942:	647b      	str	r3, [r7, #68]	; 0x44
 8008944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008946:	2b0e      	cmp	r3, #14
 8008948:	dde3      	ble.n	8008912 <AES_CMAC_Final+0x34>
 800894a:	211c      	movs	r1, #28
 800894c:	187b      	adds	r3, r7, r1
 800894e:	7bdb      	ldrb	r3, [r3, #15]
 8008950:	18db      	adds	r3, r3, r3
 8008952:	b2da      	uxtb	r2, r3
 8008954:	187b      	adds	r3, r7, r1
 8008956:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8008958:	187b      	adds	r3, r7, r1
 800895a:	7bdb      	ldrb	r3, [r3, #15]
 800895c:	2279      	movs	r2, #121	; 0x79
 800895e:	4252      	negs	r2, r2
 8008960:	4053      	eors	r3, r2
 8008962:	b2da      	uxtb	r2, r3
 8008964:	187b      	adds	r3, r7, r1
 8008966:	73da      	strb	r2, [r3, #15]
 8008968:	e025      	b.n	80089b6 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 800896a:	2300      	movs	r3, #0
 800896c:	643b      	str	r3, [r7, #64]	; 0x40
 800896e:	e018      	b.n	80089a2 <AES_CMAC_Final+0xc4>
 8008970:	201c      	movs	r0, #28
 8008972:	183a      	adds	r2, r7, r0
 8008974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008976:	18d3      	adds	r3, r2, r3
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	b25a      	sxtb	r2, r3
 800897e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008980:	3301      	adds	r3, #1
 8008982:	1839      	adds	r1, r7, r0
 8008984:	5ccb      	ldrb	r3, [r1, r3]
 8008986:	09db      	lsrs	r3, r3, #7
 8008988:	b2db      	uxtb	r3, r3
 800898a:	b25b      	sxtb	r3, r3
 800898c:	4313      	orrs	r3, r2
 800898e:	b25b      	sxtb	r3, r3
 8008990:	b2d9      	uxtb	r1, r3
 8008992:	183a      	adds	r2, r7, r0
 8008994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008996:	18d3      	adds	r3, r2, r3
 8008998:	1c0a      	adds	r2, r1, #0
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899e:	3301      	adds	r3, #1
 80089a0:	643b      	str	r3, [r7, #64]	; 0x40
 80089a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a4:	2b0e      	cmp	r3, #14
 80089a6:	dde3      	ble.n	8008970 <AES_CMAC_Final+0x92>
 80089a8:	211c      	movs	r1, #28
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	7bdb      	ldrb	r3, [r3, #15]
 80089ae:	18db      	adds	r3, r3, r3
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	187b      	adds	r3, r7, r1
 80089b4:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	238a      	movs	r3, #138	; 0x8a
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	58d3      	ldr	r3, [r2, r3]
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d11f      	bne.n	8008a02 <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 80089c2:	2300      	movs	r3, #0
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c6:	e018      	b.n	80089fa <AES_CMAC_Final+0x11c>
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	2302      	movs	r3, #2
 80089cc:	33ff      	adds	r3, #255	; 0xff
 80089ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089d0:	188a      	adds	r2, r1, r2
 80089d2:	18d3      	adds	r3, r2, r3
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	231c      	movs	r3, #28
 80089d8:	18f9      	adds	r1, r7, r3
 80089da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089dc:	18cb      	adds	r3, r1, r3
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	4053      	eors	r3, r2
 80089e2:	b2d8      	uxtb	r0, r3
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	2302      	movs	r3, #2
 80089e8:	33ff      	adds	r3, #255	; 0xff
 80089ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089ec:	188a      	adds	r2, r1, r2
 80089ee:	18d3      	adds	r3, r2, r3
 80089f0:	1c02      	adds	r2, r0, #0
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f6:	3301      	adds	r3, #1
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fc:	2b0f      	cmp	r3, #15
 80089fe:	dde3      	ble.n	80089c8 <AES_CMAC_Final+0xea>
 8008a00:	e09f      	b.n	8008b42 <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8008a02:	231c      	movs	r3, #28
 8008a04:	18fb      	adds	r3, r7, r3
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da2e      	bge.n	8008a6c <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8008a0e:	2300      	movs	r3, #0
 8008a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a12:	e018      	b.n	8008a46 <AES_CMAC_Final+0x168>
 8008a14:	201c      	movs	r0, #28
 8008a16:	183a      	adds	r2, r7, r0
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	18d3      	adds	r3, r2, r3
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	b25a      	sxtb	r2, r3
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	3301      	adds	r3, #1
 8008a26:	1839      	adds	r1, r7, r0
 8008a28:	5ccb      	ldrb	r3, [r1, r3]
 8008a2a:	09db      	lsrs	r3, r3, #7
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	4313      	orrs	r3, r2
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	b2d9      	uxtb	r1, r3
 8008a36:	183a      	adds	r2, r7, r0
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	18d3      	adds	r3, r2, r3
 8008a3c:	1c0a      	adds	r2, r1, #0
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	3301      	adds	r3, #1
 8008a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	2b0e      	cmp	r3, #14
 8008a4a:	dde3      	ble.n	8008a14 <AES_CMAC_Final+0x136>
 8008a4c:	211c      	movs	r1, #28
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	7bdb      	ldrb	r3, [r3, #15]
 8008a52:	18db      	adds	r3, r3, r3
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	187b      	adds	r3, r7, r1
 8008a58:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8008a5a:	187b      	adds	r3, r7, r1
 8008a5c:	7bdb      	ldrb	r3, [r3, #15]
 8008a5e:	2279      	movs	r2, #121	; 0x79
 8008a60:	4252      	negs	r2, r2
 8008a62:	4053      	eors	r3, r2
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	187b      	adds	r3, r7, r1
 8008a68:	73da      	strb	r2, [r3, #15]
 8008a6a:	e025      	b.n	8008ab8 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a70:	e018      	b.n	8008aa4 <AES_CMAC_Final+0x1c6>
 8008a72:	201c      	movs	r0, #28
 8008a74:	183a      	adds	r2, r7, r0
 8008a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a78:	18d3      	adds	r3, r2, r3
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	b25a      	sxtb	r2, r3
 8008a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a82:	3301      	adds	r3, #1
 8008a84:	1839      	adds	r1, r7, r0
 8008a86:	5ccb      	ldrb	r3, [r1, r3]
 8008a88:	09db      	lsrs	r3, r3, #7
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	b25b      	sxtb	r3, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	b2d9      	uxtb	r1, r3
 8008a94:	183a      	adds	r2, r7, r0
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	18d3      	adds	r3, r2, r3
 8008a9a:	1c0a      	adds	r2, r1, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa6:	2b0e      	cmp	r3, #14
 8008aa8:	dde3      	ble.n	8008a72 <AES_CMAC_Final+0x194>
 8008aaa:	211c      	movs	r1, #28
 8008aac:	187b      	adds	r3, r7, r1
 8008aae:	7bdb      	ldrb	r3, [r3, #15]
 8008ab0:	18db      	adds	r3, r3, r3
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	187b      	adds	r3, r7, r1
 8008ab6:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	238a      	movs	r3, #138	; 0x8a
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	58d2      	ldr	r2, [r2, r3]
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	33ff      	adds	r3, #255	; 0xff
 8008ac6:	188a      	adds	r2, r1, r2
 8008ac8:	18d3      	adds	r3, r2, r3
 8008aca:	2280      	movs	r2, #128	; 0x80
 8008acc:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008ace:	e00a      	b.n	8008ae6 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	238a      	movs	r3, #138	; 0x8a
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	58d2      	ldr	r2, [r2, r3]
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	2302      	movs	r3, #2
 8008adc:	33ff      	adds	r3, #255	; 0xff
 8008ade:	188a      	adds	r2, r1, r2
 8008ae0:	18d3      	adds	r3, r2, r3
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	238a      	movs	r3, #138	; 0x8a
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	58d3      	ldr	r3, [r2, r3]
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	238a      	movs	r3, #138	; 0x8a
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	50d1      	str	r1, [r2, r3]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	238a      	movs	r3, #138	; 0x8a
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	58d3      	ldr	r3, [r2, r3]
 8008b00:	2b0f      	cmp	r3, #15
 8008b02:	d9e5      	bls.n	8008ad0 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 8008b04:	2300      	movs	r3, #0
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
 8008b08:	e018      	b.n	8008b3c <AES_CMAC_Final+0x25e>
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	33ff      	adds	r3, #255	; 0xff
 8008b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b12:	188a      	adds	r2, r1, r2
 8008b14:	18d3      	adds	r3, r2, r3
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	231c      	movs	r3, #28
 8008b1a:	18f9      	adds	r1, r7, r3
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	18cb      	adds	r3, r1, r3
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	4053      	eors	r3, r2
 8008b24:	b2d8      	uxtb	r0, r3
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	33ff      	adds	r3, #255	; 0xff
 8008b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2e:	188a      	adds	r2, r1, r2
 8008b30:	18d3      	adds	r3, r2, r3
 8008b32:	1c02      	adds	r2, r0, #0
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	3301      	adds	r3, #1
 8008b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	2b0f      	cmp	r3, #15
 8008b40:	dde3      	ble.n	8008b0a <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8008b42:	2300      	movs	r3, #0
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b46:	e018      	b.n	8008b7a <AES_CMAC_Final+0x29c>
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	21f1      	movs	r1, #241	; 0xf1
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	18d3      	adds	r3, r2, r3
 8008b50:	185b      	adds	r3, r3, r1
 8008b52:	781a      	ldrb	r2, [r3, #0]
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	2302      	movs	r3, #2
 8008b58:	33ff      	adds	r3, #255	; 0xff
 8008b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b5c:	1841      	adds	r1, r0, r1
 8008b5e:	18cb      	adds	r3, r1, r3
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	4053      	eors	r3, r2
 8008b64:	b2d8      	uxtb	r0, r3
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	21f1      	movs	r1, #241	; 0xf1
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	18d3      	adds	r3, r2, r3
 8008b6e:	185b      	adds	r3, r3, r1
 8008b70:	1c02      	adds	r2, r0, #0
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	3301      	adds	r3, #1
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	2b0f      	cmp	r3, #15
 8008b7e:	dde3      	ble.n	8008b48 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	33f1      	adds	r3, #241	; 0xf1
 8008b84:	0019      	movs	r1, r3
 8008b86:	240c      	movs	r4, #12
 8008b88:	193b      	adds	r3, r7, r4
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f014 f891 	bl	801ccb4 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	193b      	adds	r3, r7, r4
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7ff fd71 	bl	8008680 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8008b9e:	231c      	movs	r3, #28
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	2210      	movs	r2, #16
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f014 f8c0 	bl	801cd2c <memset1>

}
 8008bac:	46c0      	nop			; (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b013      	add	sp, #76	; 0x4c
 8008bb2:	bd90      	pop	{r4, r7, pc}

08008bb4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	0002      	movs	r2, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	1dfb      	adds	r3, r7, #7
 8008bc0:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008bc2:	230f      	movs	r3, #15
 8008bc4:	18fb      	adds	r3, r7, r3
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	e025      	b.n	8008c18 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008bcc:	230f      	movs	r3, #15
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	4816      	ldr	r0, [pc, #88]	; (8008c2c <GetKeyByID+0x78>)
 8008bd4:	2383      	movs	r3, #131	; 0x83
 8008bd6:	0099      	lsls	r1, r3, #2
 8008bd8:	0013      	movs	r3, r2
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	189b      	adds	r3, r3, r2
 8008bde:	18c3      	adds	r3, r0, r3
 8008be0:	185b      	adds	r3, r3, r1
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	1dfa      	adds	r2, r7, #7
 8008be6:	7812      	ldrb	r2, [r2, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d10f      	bne.n	8008c0c <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8008bec:	230f      	movs	r3, #15
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	0013      	movs	r3, r2
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	189b      	adds	r3, r3, r2
 8008bf8:	2282      	movs	r2, #130	; 0x82
 8008bfa:	0092      	lsls	r2, r2, #2
 8008bfc:	189a      	adds	r2, r3, r2
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <GetKeyByID+0x78>)
 8008c00:	18d3      	adds	r3, r2, r3
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e00b      	b.n	8008c24 <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008c0c:	210f      	movs	r1, #15
 8008c0e:	187b      	adds	r3, r7, r1
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	187b      	adds	r3, r7, r1
 8008c14:	3201      	adds	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	230f      	movs	r3, #15
 8008c1a:	18fb      	adds	r3, r7, r3
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b15      	cmp	r3, #21
 8008c20:	d9d4      	bls.n	8008bcc <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008c22:	2303      	movs	r3, #3
}
 8008c24:	0018      	movs	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	b004      	add	sp, #16
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20000274 	.word	0x20000274

08008c30 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	0008      	movs	r0, r1
 8008c3a:	0011      	movs	r1, r2
 8008c3c:	607b      	str	r3, [r7, #4]
 8008c3e:	230a      	movs	r3, #10
 8008c40:	18fb      	adds	r3, r7, r3
 8008c42:	1c02      	adds	r2, r0, #0
 8008c44:	801a      	strh	r2, [r3, #0]
 8008c46:	2309      	movs	r3, #9
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	1c0a      	adds	r2, r1, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <ComputeCmac+0x2a>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e03f      	b.n	8008cde <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8008c5e:	4b22      	ldr	r3, [pc, #136]	; (8008ce8 <ComputeCmac+0xb8>)
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7ff fd58 	bl	8008716 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8008c66:	2527      	movs	r5, #39	; 0x27
 8008c68:	197c      	adds	r4, r7, r5
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	18fa      	adds	r2, r7, r3
 8008c6e:	2309      	movs	r3, #9
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	0011      	movs	r1, r2
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7ff ff9c 	bl	8008bb4 <GetKeyByID>
 8008c7c:	0003      	movs	r3, r0
 8008c7e:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008c80:	197b      	adds	r3, r7, r5
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d127      	bne.n	8008cd8 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <ComputeCmac+0xb8>)
 8008c8e:	0011      	movs	r1, r2
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7ff fd5a 	bl	800874a <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8008c96:	230a      	movs	r3, #10
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	881a      	ldrh	r2, [r3, #0]
 8008c9c:	68f9      	ldr	r1, [r7, #12]
 8008c9e:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <ComputeCmac+0xb8>)
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	f7ff fd61 	bl	8008768 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8008ca6:	4a10      	ldr	r2, [pc, #64]	; (8008ce8 <ComputeCmac+0xb8>)
 8008ca8:	2114      	movs	r1, #20
 8008caa:	000c      	movs	r4, r1
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	0011      	movs	r1, r2
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f7ff fe14 	bl	80088de <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8008cb6:	0021      	movs	r1, r4
 8008cb8:	187b      	adds	r3, r7, r1
 8008cba:	78db      	ldrb	r3, [r3, #3]
 8008cbc:	061a      	lsls	r2, r3, #24
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	789b      	ldrb	r3, [r3, #2]
 8008cc2:	041b      	lsls	r3, r3, #16
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	187b      	adds	r3, r7, r1
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	187a      	adds	r2, r7, r1
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8008cd8:	2327      	movs	r3, #39	; 0x27
 8008cda:	18fb      	adds	r3, r7, r3
 8008cdc:	781b      	ldrb	r3, [r3, #0]
}
 8008cde:	0018      	movs	r0, r3
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b00a      	add	sp, #40	; 0x28
 8008ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ce6:	46c0      	nop			; (mov r8, r8)
 8008ce8:	20000368 	.word	0x20000368

08008cec <SecureElementSetKey>:
    *seNvmCtxSize = sizeof( SeNvmCtx );
    return &SeNvmCtx;
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8008cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cee:	b089      	sub	sp, #36	; 0x24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	1dfb      	adds	r3, r7, #7
 8008cf8:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008d00:	2302      	movs	r3, #2
 8008d02:	e063      	b.n	8008dcc <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008d04:	231e      	movs	r3, #30
 8008d06:	18fb      	adds	r3, r7, r3
 8008d08:	2206      	movs	r2, #6
 8008d0a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008d0c:	231f      	movs	r3, #31
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e054      	b.n	8008dc0 <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008d16:	231f      	movs	r3, #31
 8008d18:	18fb      	adds	r3, r7, r3
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	482d      	ldr	r0, [pc, #180]	; (8008dd4 <SecureElementSetKey+0xe8>)
 8008d1e:	2383      	movs	r3, #131	; 0x83
 8008d20:	0099      	lsls	r1, r3, #2
 8008d22:	0013      	movs	r3, r2
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	189b      	adds	r3, r3, r2
 8008d28:	18c3      	adds	r3, r0, r3
 8008d2a:	185b      	adds	r3, r3, r1
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	1dfa      	adds	r2, r7, #7
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d13e      	bne.n	8008db4 <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 8008d36:	231f      	movs	r3, #31
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	4825      	ldr	r0, [pc, #148]	; (8008dd4 <SecureElementSetKey+0xe8>)
 8008d3e:	2383      	movs	r3, #131	; 0x83
 8008d40:	0099      	lsls	r1, r3, #2
 8008d42:	0013      	movs	r3, r2
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	189b      	adds	r3, r3, r2
 8008d48:	18c3      	adds	r3, r0, r3
 8008d4a:	185b      	adds	r3, r3, r1
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	da19      	bge.n	8008d88 <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 8008d54:	250c      	movs	r5, #12
 8008d56:	197b      	adds	r3, r7, r5
 8008d58:	0018      	movs	r0, r3
 8008d5a:	2310      	movs	r3, #16
 8008d5c:	001a      	movs	r2, r3
 8008d5e:	2100      	movs	r1, #0
 8008d60:	f01d f8d2 	bl	8025f08 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8008d64:	261e      	movs	r6, #30
 8008d66:	19bc      	adds	r4, r7, r6
 8008d68:	197b      	adds	r3, r7, r5
 8008d6a:	6838      	ldr	r0, [r7, #0]
 8008d6c:	227f      	movs	r2, #127	; 0x7f
 8008d6e:	2110      	movs	r1, #16
 8008d70:	f000 f89a 	bl	8008ea8 <SecureElementAesEncrypt>
 8008d74:	0003      	movs	r3, r0
 8008d76:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 8008d78:	19bb      	adds	r3, r7, r6
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d019      	beq.n	8008db4 <SecureElementSetKey+0xc8>
                {
                    return retval;
 8008d80:	231e      	movs	r3, #30
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	e021      	b.n	8008dcc <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8008d88:	231f      	movs	r3, #31
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	0013      	movs	r3, r2
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	2282      	movs	r2, #130	; 0x82
 8008d96:	0092      	lsls	r2, r2, #2
 8008d98:	189a      	adds	r2, r3, r2
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <SecureElementSetKey+0xe8>)
 8008d9c:	18d3      	adds	r3, r2, r3
 8008d9e:	3305      	adds	r3, #5
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	2210      	movs	r2, #16
 8008da4:	0018      	movs	r0, r3
 8008da6:	f013 ff85 	bl	801ccb4 <memcpy1>
                SeNvmCtxChanged( );
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <SecureElementSetKey+0xec>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e00b      	b.n	8008dcc <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008db4:	211f      	movs	r1, #31
 8008db6:	187b      	adds	r3, r7, r1
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	187b      	adds	r3, r7, r1
 8008dbc:	3201      	adds	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	231f      	movs	r3, #31
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b15      	cmp	r3, #21
 8008dc8:	d9a5      	bls.n	8008d16 <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008dca:	2303      	movs	r3, #3
}
 8008dcc:	0018      	movs	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	b009      	add	sp, #36	; 0x24
 8008dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd4:	20000274 	.word	0x20000274
 8008dd8:	200005f8 	.word	0x200005f8

08008ddc <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	0008      	movs	r0, r1
 8008de6:	0011      	movs	r1, r2
 8008de8:	607b      	str	r3, [r7, #4]
 8008dea:	230a      	movs	r3, #10
 8008dec:	18fb      	adds	r3, r7, r3
 8008dee:	1c02      	adds	r2, r0, #0
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	2009      	movs	r0, #9
 8008df4:	183b      	adds	r3, r7, r0
 8008df6:	1c0a      	adds	r2, r1, #0
 8008df8:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 8008dfa:	183b      	adds	r3, r7, r0
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b7e      	cmp	r3, #126	; 0x7e
 8008e00:	d901      	bls.n	8008e06 <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e00b      	b.n	8008e1e <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 8008e06:	687c      	ldr	r4, [r7, #4]
 8008e08:	2309      	movs	r3, #9
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	230a      	movs	r3, #10
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	8819      	ldrh	r1, [r3, #0]
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	0023      	movs	r3, r4
 8008e18:	f7ff ff0a 	bl	8008c30 <ComputeCmac>
 8008e1c:	0003      	movs	r3, r0
}
 8008e1e:	0018      	movs	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b005      	add	sp, #20
 8008e24:	bd90      	pop	{r4, r7, pc}

08008e26 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8008e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e28:	b087      	sub	sp, #28
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	0008      	movs	r0, r1
 8008e30:	607a      	str	r2, [r7, #4]
 8008e32:	0019      	movs	r1, r3
 8008e34:	230a      	movs	r3, #10
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	1c02      	adds	r2, r0, #0
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	2309      	movs	r3, #9
 8008e3e:	18fb      	adds	r3, r7, r3
 8008e40:	1c0a      	adds	r2, r1, #0
 8008e42:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e027      	b.n	8008e9e <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008e4e:	2617      	movs	r6, #23
 8008e50:	19bb      	adds	r3, r7, r6
 8008e52:	2206      	movs	r2, #6
 8008e54:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 8008e5a:	19bc      	adds	r4, r7, r6
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	18fd      	adds	r5, r7, r3
 8008e60:	2309      	movs	r3, #9
 8008e62:	18fb      	adds	r3, r7, r3
 8008e64:	781a      	ldrb	r2, [r3, #0]
 8008e66:	230a      	movs	r3, #10
 8008e68:	18fb      	adds	r3, r7, r3
 8008e6a:	8819      	ldrh	r1, [r3, #0]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	002b      	movs	r3, r5
 8008e70:	f7ff fede 	bl	8008c30 <ComputeCmac>
 8008e74:	0003      	movs	r3, r0
 8008e76:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008e78:	19bb      	adds	r3, r7, r6
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 8008e80:	2317      	movs	r3, #23
 8008e82:	18fb      	adds	r3, r7, r3
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	e00a      	b.n	8008e9e <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d003      	beq.n	8008e98 <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8008e90:	2317      	movs	r3, #23
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	2201      	movs	r2, #1
 8008e96:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 8008e98:	2317      	movs	r3, #23
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	781b      	ldrb	r3, [r3, #0]
}
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	b007      	add	sp, #28
 8008ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008ea8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8008ea8:	b5b0      	push	{r4, r5, r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	0008      	movs	r0, r1
 8008eb2:	0011      	movs	r1, r2
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	1c02      	adds	r2, r0, #0
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	2309      	movs	r3, #9
 8008ec0:	18fb      	adds	r3, r7, r3
 8008ec2:	1c0a      	adds	r2, r1, #0
 8008ec4:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <SecureElementAesEncrypt+0x2a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e04c      	b.n	8008f70 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8008ed6:	230a      	movs	r3, #10
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	220f      	movs	r2, #15
 8008ede:	4013      	ands	r3, r2
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8008ee6:	2305      	movs	r3, #5
 8008ee8:	e042      	b.n	8008f70 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8008eea:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <SecureElementAesEncrypt+0xd0>)
 8008eec:	22f0      	movs	r2, #240	; 0xf0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f013 ff1b 	bl	801cd2c <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8008ef6:	2516      	movs	r5, #22
 8008ef8:	197c      	adds	r4, r7, r5
 8008efa:	2310      	movs	r3, #16
 8008efc:	18fa      	adds	r2, r7, r3
 8008efe:	2309      	movs	r3, #9
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	0011      	movs	r1, r2
 8008f06:	0018      	movs	r0, r3
 8008f08:	f7ff fe54 	bl	8008bb4 <GetKeyByID>
 8008f0c:	0003      	movs	r3, r0
 8008f0e:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008f10:	197b      	adds	r3, r7, r5
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d128      	bne.n	8008f6a <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	4a16      	ldr	r2, [pc, #88]	; (8008f78 <SecureElementAesEncrypt+0xd0>)
 8008f1e:	2110      	movs	r1, #16
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff fa7b 	bl	800841c <aes_set_key>

        uint8_t block = 0;
 8008f26:	2317      	movs	r3, #23
 8008f28:	18fb      	adds	r3, r7, r3
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 8008f2e:	e017      	b.n	8008f60 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8008f30:	2417      	movs	r4, #23
 8008f32:	193b      	adds	r3, r7, r4
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	18d0      	adds	r0, r2, r3
 8008f3a:	193b      	adds	r3, r7, r4
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	18d3      	adds	r3, r2, r3
 8008f42:	4a0d      	ldr	r2, [pc, #52]	; (8008f78 <SecureElementAesEncrypt+0xd0>)
 8008f44:	0019      	movs	r1, r3
 8008f46:	f7ff fb9b 	bl	8008680 <aes_encrypt>
            block = block + 16;
 8008f4a:	193b      	adds	r3, r7, r4
 8008f4c:	193a      	adds	r2, r7, r4
 8008f4e:	7812      	ldrb	r2, [r2, #0]
 8008f50:	3210      	adds	r2, #16
 8008f52:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 8008f54:	220a      	movs	r2, #10
 8008f56:	18bb      	adds	r3, r7, r2
 8008f58:	18ba      	adds	r2, r7, r2
 8008f5a:	8812      	ldrh	r2, [r2, #0]
 8008f5c:	3a10      	subs	r2, #16
 8008f5e:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 8008f60:	230a      	movs	r3, #10
 8008f62:	18fb      	adds	r3, r7, r3
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e2      	bne.n	8008f30 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 8008f6a:	2316      	movs	r3, #22
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
}
 8008f70:	0018      	movs	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b006      	add	sp, #24
 8008f76:	bdb0      	pop	{r4, r5, r7, pc}
 8008f78:	20000274 	.word	0x20000274

08008f7c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8008f7c:	b5b0      	push	{r4, r5, r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	0019      	movs	r1, r3
 8008f88:	1dfb      	adds	r3, r7, #7
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	1dbb      	adds	r3, r7, #6
 8008f8e:	1c0a      	adds	r2, r1, #0
 8008f90:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e066      	b.n	800906a <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008f9c:	2327      	movs	r3, #39	; 0x27
 8008f9e:	18fb      	adds	r3, r7, r3
 8008fa0:	2206      	movs	r2, #6
 8008fa2:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 8008fa4:	2314      	movs	r3, #20
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	0018      	movs	r0, r3
 8008faa:	2310      	movs	r3, #16
 8008fac:	001a      	movs	r2, r3
 8008fae:	2100      	movs	r1, #0
 8008fb0:	f01c ffaa 	bl	8025f08 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8008fb4:	1dbb      	adds	r3, r7, #6
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8008fba:	d10e      	bne.n	8008fda <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8008fbc:	1dfb      	adds	r3, r7, #7
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <SecureElementDeriveAndStoreKey+0x52>
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	789b      	ldrb	r3, [r3, #2]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <SecureElementDeriveAndStoreKey+0x5a>
 8008fce:	1dfb      	adds	r3, r7, #7
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d101      	bne.n	8008fda <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e047      	b.n	800906a <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	781a      	ldrb	r2, [r3, #0]
 8008fde:	2124      	movs	r1, #36	; 0x24
 8008fe0:	187b      	adds	r3, r7, r1
 8008fe2:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	b21a      	sxth	r2, r3
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	5e1b      	ldrsh	r3, [r3, r0]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	b21a      	sxth	r2, r3
 8008ff8:	187b      	adds	r3, r7, r1
 8008ffa:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 8008ffc:	1dbb      	adds	r3, r7, #6
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b7f      	cmp	r3, #127	; 0x7f
 8009002:	d108      	bne.n	8009016 <SecureElementDeriveAndStoreKey+0x9a>
 8009004:	2324      	movs	r3, #36	; 0x24
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	2b0f      	cmp	r3, #15
 800900c:	d803      	bhi.n	8009016 <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 800900e:	2327      	movs	r3, #39	; 0x27
 8009010:	18fb      	adds	r3, r7, r3
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	e029      	b.n	800906a <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8009016:	2527      	movs	r5, #39	; 0x27
 8009018:	197c      	adds	r4, r7, r5
 800901a:	2314      	movs	r3, #20
 800901c:	18f9      	adds	r1, r7, r3
 800901e:	1dfb      	adds	r3, r7, #7
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	68b8      	ldr	r0, [r7, #8]
 8009024:	000b      	movs	r3, r1
 8009026:	2110      	movs	r1, #16
 8009028:	f7ff ff3e 	bl	8008ea8 <SecureElementAesEncrypt>
 800902c:	0003      	movs	r3, r0
 800902e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009030:	197b      	adds	r3, r7, r5
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 8009038:	2327      	movs	r3, #39	; 0x27
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	e014      	b.n	800906a <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 8009040:	2527      	movs	r5, #39	; 0x27
 8009042:	197c      	adds	r4, r7, r5
 8009044:	2314      	movs	r3, #20
 8009046:	18fa      	adds	r2, r7, r3
 8009048:	1dbb      	adds	r3, r7, #6
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	0011      	movs	r1, r2
 800904e:	0018      	movs	r0, r3
 8009050:	f7ff fe4c 	bl	8008cec <SecureElementSetKey>
 8009054:	0003      	movs	r3, r0
 8009056:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009058:	197b      	adds	r3, r7, r5
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 8009060:	2327      	movs	r3, #39	; 0x27
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	e000      	b.n	800906a <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 8009068:	2300      	movs	r3, #0
}
 800906a:	0018      	movs	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	b00a      	add	sp, #40	; 0x28
 8009070:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009074 <ProcessRadioTxDone>:
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}

static void ProcessRadioTxDone( void )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800907a:	4a5e      	ldr	r2, [pc, #376]	; (80091f4 <ProcessRadioTxDone+0x180>)
 800907c:	238e      	movs	r3, #142	; 0x8e
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	58d3      	ldr	r3, [r2, r3]
 8009082:	22c8      	movs	r2, #200	; 0xc8
 8009084:	5c9b      	ldrb	r3, [r3, r2]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d003      	beq.n	8009092 <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 800908a:	4b5b      	ldr	r3, [pc, #364]	; (80091f8 <ProcessRadioTxDone+0x184>)
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	4798      	blx	r3
 8009090:	e001      	b.n	8009096 <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 8009092:	f002 fbc5 	bl	800b820 <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009096:	4a57      	ldr	r2, [pc, #348]	; (80091f4 <ProcessRadioTxDone+0x180>)
 8009098:	23f1      	movs	r3, #241	; 0xf1
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	58d2      	ldr	r2, [r2, r3]
 800909e:	4b57      	ldr	r3, [pc, #348]	; (80091fc <ProcessRadioTxDone+0x188>)
 80090a0:	0011      	movs	r1, r2
 80090a2:	0018      	movs	r0, r3
 80090a4:	f013 fd02 	bl	801caac <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80090a8:	4b54      	ldr	r3, [pc, #336]	; (80091fc <ProcessRadioTxDone+0x188>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f013 fd2a 	bl	801cb04 <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80090b0:	4a50      	ldr	r2, [pc, #320]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80090b2:	238e      	movs	r3, #142	; 0x8e
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	58d3      	ldr	r3, [r2, r3]
 80090b8:	22c8      	movs	r2, #200	; 0xc8
 80090ba:	5c9b      	ldrb	r3, [r3, r2]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d00c      	beq.n	80090da <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80090c0:	4a4c      	ldr	r2, [pc, #304]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80090c2:	23f2      	movs	r3, #242	; 0xf2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	58d2      	ldr	r2, [r2, r3]
 80090c8:	4b4d      	ldr	r3, [pc, #308]	; (8009200 <ProcessRadioTxDone+0x18c>)
 80090ca:	0011      	movs	r1, r2
 80090cc:	0018      	movs	r0, r3
 80090ce:	f013 fced 	bl	801caac <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 80090d2:	4b4b      	ldr	r3, [pc, #300]	; (8009200 <ProcessRadioTxDone+0x18c>)
 80090d4:	0018      	movs	r0, r3
 80090d6:	f013 fd15 	bl	801cb04 <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 80090da:	4a46      	ldr	r2, [pc, #280]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80090dc:	238e      	movs	r3, #142	; 0x8e
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	58d3      	ldr	r3, [r2, r3]
 80090e2:	22c8      	movs	r2, #200	; 0xc8
 80090e4:	5c9b      	ldrb	r3, [r3, r2]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d007      	beq.n	80090fa <ProcessRadioTxDone+0x86>
 80090ea:	4a42      	ldr	r2, [pc, #264]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80090ec:	238e      	movs	r3, #142	; 0x8e
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	58d3      	ldr	r3, [r2, r3]
 80090f2:	4a44      	ldr	r2, [pc, #272]	; (8009204 <ProcessRadioTxDone+0x190>)
 80090f4:	5c9b      	ldrb	r3, [r3, r2]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d022      	beq.n	8009140 <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80090fa:	210c      	movs	r1, #12
 80090fc:	187b      	adds	r3, r7, r1
 80090fe:	2215      	movs	r2, #21
 8009100:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009102:	4a3c      	ldr	r2, [pc, #240]	; (80091f4 <ProcessRadioTxDone+0x180>)
 8009104:	238e      	movs	r3, #142	; 0x8e
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	58d3      	ldr	r3, [r2, r3]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	187a      	adds	r2, r7, r1
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f005 fb77 	bl	800e804 <RegionGetPhyParam>
 8009116:	0003      	movs	r3, r0
 8009118:	001a      	movs	r2, r3
 800911a:	2108      	movs	r1, #8
 800911c:	187b      	adds	r3, r7, r1
 800911e:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009120:	4a34      	ldr	r2, [pc, #208]	; (80091f4 <ProcessRadioTxDone+0x180>)
 8009122:	23f2      	movs	r3, #242	; 0xf2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	58d2      	ldr	r2, [r2, r3]
 8009128:	187b      	adds	r3, r7, r1
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	18d2      	adds	r2, r2, r3
 800912e:	4b36      	ldr	r3, [pc, #216]	; (8009208 <ProcessRadioTxDone+0x194>)
 8009130:	0011      	movs	r1, r2
 8009132:	0018      	movs	r0, r3
 8009134:	f013 fcba 	bl	801caac <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009138:	4b33      	ldr	r3, [pc, #204]	; (8009208 <ProcessRadioTxDone+0x194>)
 800913a:	0018      	movs	r0, r3
 800913c:	f013 fce2 	bl	801cb04 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 8009140:	4a2c      	ldr	r2, [pc, #176]	; (80091f4 <ProcessRadioTxDone+0x180>)
 8009142:	238e      	movs	r3, #142	; 0x8e
 8009144:	00db      	lsls	r3, r3, #3
 8009146:	58d1      	ldr	r1, [r2, r3]
 8009148:	4a2a      	ldr	r2, [pc, #168]	; (80091f4 <ProcessRadioTxDone+0x180>)
 800914a:	238e      	movs	r3, #142	; 0x8e
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	58d2      	ldr	r2, [r2, r3]
 8009150:	2314      	movs	r3, #20
 8009152:	33ff      	adds	r3, #255	; 0xff
 8009154:	5cc9      	ldrb	r1, [r1, r3]
 8009156:	238a      	movs	r3, #138	; 0x8a
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 800915c:	4a25      	ldr	r2, [pc, #148]	; (80091f4 <ProcessRadioTxDone+0x180>)
 800915e:	238e      	movs	r3, #142	; 0x8e
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	58d2      	ldr	r2, [r2, r3]
 8009164:	2314      	movs	r3, #20
 8009166:	33ff      	adds	r3, #255	; 0xff
 8009168:	5cd2      	ldrb	r2, [r2, r3]
 800916a:	003b      	movs	r3, r7
 800916c:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800916e:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <ProcessRadioTxDone+0x180>)
 8009170:	238e      	movs	r3, #142	; 0x8e
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	58d2      	ldr	r2, [r2, r3]
 8009176:	2389      	movs	r3, #137	; 0x89
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	5cd3      	ldrb	r3, [r2, r3]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 8009180:	003b      	movs	r3, r7
 8009182:	2200      	movs	r2, #0
 8009184:	705a      	strb	r2, [r3, #1]
 8009186:	e002      	b.n	800918e <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 8009188:	003b      	movs	r3, r7
 800918a:	2201      	movs	r2, #1
 800918c:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800918e:	4b1f      	ldr	r3, [pc, #124]	; (800920c <ProcessRadioTxDone+0x198>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	003b      	movs	r3, r7
 8009194:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009196:	4a17      	ldr	r2, [pc, #92]	; (80091f4 <ProcessRadioTxDone+0x180>)
 8009198:	238e      	movs	r3, #142	; 0x8e
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	58d3      	ldr	r3, [r2, r3]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	003a      	movs	r2, r7
 80091a2:	0011      	movs	r1, r2
 80091a4:	0018      	movs	r0, r3
 80091a6:	f005 fbb7 	bl	800e918 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 80091aa:	4b18      	ldr	r3, [pc, #96]	; (800920c <ProcessRadioTxDone+0x198>)
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	4a11      	ldr	r2, [pc, #68]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80091b0:	23d0      	movs	r3, #208	; 0xd0
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 80091b6:	4a0f      	ldr	r2, [pc, #60]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80091b8:	238e      	movs	r3, #142	; 0x8e
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	58d3      	ldr	r3, [r2, r3]
 80091be:	4a11      	ldr	r2, [pc, #68]	; (8009204 <ProcessRadioTxDone+0x190>)
 80091c0:	5c9b      	ldrb	r3, [r3, r2]
 80091c2:	2201      	movs	r2, #1
 80091c4:	4053      	eors	r3, r2
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00f      	beq.n	80091ec <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80091cc:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80091ce:	4a10      	ldr	r2, [pc, #64]	; (8009210 <ProcessRadioTxDone+0x19c>)
 80091d0:	2100      	movs	r1, #0
 80091d2:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 80091d4:	4a07      	ldr	r2, [pc, #28]	; (80091f4 <ProcessRadioTxDone+0x180>)
 80091d6:	238e      	movs	r3, #142	; 0x8e
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	58d3      	ldr	r3, [r2, r3]
 80091dc:	2288      	movs	r2, #136	; 0x88
 80091de:	0052      	lsls	r2, r2, #1
 80091e0:	5c9a      	ldrb	r2, [r3, r2]
 80091e2:	3201      	adds	r2, #1
 80091e4:	b2d1      	uxtb	r1, r2
 80091e6:	2288      	movs	r2, #136	; 0x88
 80091e8:	0052      	lsls	r2, r2, #1
 80091ea:	5499      	strb	r1, [r3, r2]
    }
}
 80091ec:	46c0      	nop			; (mov r8, r8)
 80091ee:	46bd      	mov	sp, r7
 80091f0:	b004      	add	sp, #16
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	200005fc 	.word	0x200005fc
 80091f8:	080293d8 	.word	0x080293d8
 80091fc:	20000990 	.word	0x20000990
 8009200:	200009a8 	.word	0x200009a8
 8009204:	00000219 	.word	0x00000219
 8009208:	200009f0 	.word	0x200009f0
 800920c:	20002238 	.word	0x20002238
 8009210:	0000042d 	.word	0x0000042d

08009214 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009218:	4a12      	ldr	r2, [pc, #72]	; (8009264 <PrepareRxDoneAbort+0x50>)
 800921a:	23d5      	movs	r3, #213	; 0xd5
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	58d3      	ldr	r3, [r2, r3]
 8009220:	2280      	movs	r2, #128	; 0x80
 8009222:	431a      	orrs	r2, r3
 8009224:	0011      	movs	r1, r2
 8009226:	4a0f      	ldr	r2, [pc, #60]	; (8009264 <PrepareRxDoneAbort+0x50>)
 8009228:	23d5      	movs	r3, #213	; 0xd5
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 800922e:	4a0d      	ldr	r2, [pc, #52]	; (8009264 <PrepareRxDoneAbort+0x50>)
 8009230:	238e      	movs	r3, #142	; 0x8e
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	58d3      	ldr	r3, [r2, r3]
 8009236:	4a0c      	ldr	r2, [pc, #48]	; (8009268 <PrepareRxDoneAbort+0x54>)
 8009238:	5c9b      	ldrb	r3, [r3, r2]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 800923e:	2000      	movs	r0, #0
 8009240:	f001 f9d4 	bl	800a5ec <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <PrepareRxDoneAbort+0x50>)
 8009246:	4a09      	ldr	r2, [pc, #36]	; (800926c <PrepareRxDoneAbort+0x58>)
 8009248:	5c99      	ldrb	r1, [r3, r2]
 800924a:	2002      	movs	r0, #2
 800924c:	4301      	orrs	r1, r0
 800924e:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009250:	4b04      	ldr	r3, [pc, #16]	; (8009264 <PrepareRxDoneAbort+0x50>)
 8009252:	4a06      	ldr	r2, [pc, #24]	; (800926c <PrepareRxDoneAbort+0x58>)
 8009254:	5c99      	ldrb	r1, [r3, r2]
 8009256:	2010      	movs	r0, #16
 8009258:	4301      	orrs	r1, r0
 800925a:	5499      	strb	r1, [r3, r2]
}
 800925c:	46c0      	nop			; (mov r8, r8)
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	200005fc 	.word	0x200005fc
 8009268:	00000219 	.word	0x00000219
 800926c:	0000046d 	.word	0x0000046d

08009270 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8009270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009272:	b0a7      	sub	sp, #156	; 0x9c
 8009274:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8009276:	2380      	movs	r3, #128	; 0x80
 8009278:	18fb      	adds	r3, r7, r3
 800927a:	2210      	movs	r2, #16
 800927c:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800927e:	4bda      	ldr	r3, [pc, #872]	; (80095e8 <ProcessRadioRxDone+0x378>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 8009284:	247a      	movs	r4, #122	; 0x7a
 8009286:	193b      	adds	r3, r7, r4
 8009288:	4ad7      	ldr	r2, [pc, #860]	; (80095e8 <ProcessRadioRxDone+0x378>)
 800928a:	8912      	ldrh	r2, [r2, #8]
 800928c:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800928e:	2078      	movs	r0, #120	; 0x78
 8009290:	183b      	adds	r3, r7, r0
 8009292:	4ad5      	ldr	r2, [pc, #852]	; (80095e8 <ProcessRadioRxDone+0x378>)
 8009294:	8952      	ldrh	r2, [r2, #10]
 8009296:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 8009298:	2577      	movs	r5, #119	; 0x77
 800929a:	197b      	adds	r3, r7, r5
 800929c:	4ad2      	ldr	r2, [pc, #840]	; (80095e8 <ProcessRadioRxDone+0x378>)
 800929e:	7b12      	ldrb	r2, [r2, #12]
 80092a0:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 80092a2:	2376      	movs	r3, #118	; 0x76
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80092ae:	4acf      	ldr	r2, [pc, #828]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092b0:	238e      	movs	r3, #142	; 0x8e
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	58d3      	ldr	r3, [r2, r3]
 80092b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b8:	2284      	movs	r2, #132	; 0x84
 80092ba:	18ba      	adds	r2, r7, r2
 80092bc:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 80092be:	2383      	movs	r3, #131	; 0x83
 80092c0:	18fb      	adds	r3, r7, r3
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80092c6:	2382      	movs	r3, #130	; 0x82
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	2204      	movs	r2, #4
 80092cc:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 80092ce:	4ac7      	ldr	r2, [pc, #796]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092d0:	2386      	movs	r3, #134	; 0x86
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	2100      	movs	r1, #0
 80092d6:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 80092d8:	4bc4      	ldr	r3, [pc, #784]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092da:	183a      	adds	r2, r7, r0
 80092dc:	49c4      	ldr	r1, [pc, #784]	; (80095f0 <ProcessRadioRxDone+0x380>)
 80092de:	8812      	ldrh	r2, [r2, #0]
 80092e0:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 80092e2:	4ac2      	ldr	r2, [pc, #776]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092e4:	1979      	adds	r1, r7, r5
 80092e6:	2384      	movs	r3, #132	; 0x84
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	7809      	ldrb	r1, [r1, #0]
 80092ec:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80092ee:	4bbf      	ldr	r3, [pc, #764]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092f0:	4ac0      	ldr	r2, [pc, #768]	; (80095f4 <ProcessRadioRxDone+0x384>)
 80092f2:	5c99      	ldrb	r1, [r3, r2]
 80092f4:	4bbd      	ldr	r3, [pc, #756]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092f6:	4ac0      	ldr	r2, [pc, #768]	; (80095f8 <ProcessRadioRxDone+0x388>)
 80092f8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 80092fa:	4bbc      	ldr	r3, [pc, #752]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80092fc:	4abf      	ldr	r2, [pc, #764]	; (80095fc <ProcessRadioRxDone+0x38c>)
 80092fe:	2100      	movs	r1, #0
 8009300:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009302:	4bba      	ldr	r3, [pc, #744]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009304:	4abe      	ldr	r2, [pc, #760]	; (8009600 <ProcessRadioRxDone+0x390>)
 8009306:	2100      	movs	r1, #0
 8009308:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800930a:	4bb8      	ldr	r3, [pc, #736]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800930c:	4abd      	ldr	r2, [pc, #756]	; (8009604 <ProcessRadioRxDone+0x394>)
 800930e:	2100      	movs	r1, #0
 8009310:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8009312:	4ab6      	ldr	r2, [pc, #728]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009314:	2383      	movs	r3, #131	; 0x83
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	2100      	movs	r1, #0
 800931a:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 800931c:	4bb3      	ldr	r3, [pc, #716]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800931e:	4aba      	ldr	r2, [pc, #744]	; (8009608 <ProcessRadioRxDone+0x398>)
 8009320:	2100      	movs	r1, #0
 8009322:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 8009324:	4bb1      	ldr	r3, [pc, #708]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009326:	4ab9      	ldr	r2, [pc, #740]	; (800960c <ProcessRadioRxDone+0x39c>)
 8009328:	2100      	movs	r1, #0
 800932a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800932c:	4baf      	ldr	r3, [pc, #700]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800932e:	4ab8      	ldr	r2, [pc, #736]	; (8009610 <ProcessRadioRxDone+0x3a0>)
 8009330:	2100      	movs	r1, #0
 8009332:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009334:	4bad      	ldr	r3, [pc, #692]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009336:	4ab7      	ldr	r2, [pc, #732]	; (8009614 <ProcessRadioRxDone+0x3a4>)
 8009338:	2100      	movs	r1, #0
 800933a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800933c:	4aab      	ldr	r2, [pc, #684]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800933e:	2382      	movs	r3, #130	; 0x82
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	2100      	movs	r1, #0
 8009344:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 8009346:	4aa9      	ldr	r2, [pc, #676]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009348:	2385      	movs	r3, #133	; 0x85
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	2100      	movs	r1, #0
 800934e:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 8009350:	4bb1      	ldr	r3, [pc, #708]	; (8009618 <ProcessRadioRxDone+0x3a8>)
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009356:	4bb1      	ldr	r3, [pc, #708]	; (800961c <ProcessRadioRxDone+0x3ac>)
 8009358:	0018      	movs	r0, r3
 800935a:	f013 fc29 	bl	801cbb0 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800935e:	193b      	adds	r3, r7, r4
 8009360:	881a      	ldrh	r2, [r3, #0]
 8009362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009364:	0011      	movs	r1, r2
 8009366:	0018      	movs	r0, r3
 8009368:	f002 fd32 	bl	800bdd0 <LoRaMacClassBRxBeacon>
 800936c:	1e03      	subs	r3, r0, #0
 800936e:	d00d      	beq.n	800938c <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009370:	4b9e      	ldr	r3, [pc, #632]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009372:	2278      	movs	r2, #120	; 0x78
 8009374:	18ba      	adds	r2, r7, r2
 8009376:	49aa      	ldr	r1, [pc, #680]	; (8009620 <ProcessRadioRxDone+0x3b0>)
 8009378:	8812      	ldrh	r2, [r2, #0]
 800937a:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800937c:	4b9b      	ldr	r3, [pc, #620]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800937e:	2277      	movs	r2, #119	; 0x77
 8009380:	18ba      	adds	r2, r7, r2
 8009382:	49a8      	ldr	r1, [pc, #672]	; (8009624 <ProcessRadioRxDone+0x3b4>)
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	545a      	strb	r2, [r3, r1]
        return;
 8009388:	f000 fc85 	bl	8009c96 <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800938c:	4a97      	ldr	r2, [pc, #604]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800938e:	238e      	movs	r3, #142	; 0x8e
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	58d3      	ldr	r3, [r2, r3]
 8009394:	22c8      	movs	r2, #200	; 0xc8
 8009396:	5c9b      	ldrb	r3, [r3, r2]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d11c      	bne.n	80093d6 <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800939c:	f002 fd2a 	bl	800bdf4 <LoRaMacClassBIsPingExpected>
 80093a0:	1e03      	subs	r3, r0, #0
 80093a2:	d00a      	beq.n	80093ba <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80093a4:	2000      	movs	r0, #0
 80093a6:	f002 fce7 	bl	800bd78 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80093aa:	2000      	movs	r0, #0
 80093ac:	f002 fd00 	bl	800bdb0 <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 80093b0:	4b8e      	ldr	r3, [pc, #568]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80093b2:	4a91      	ldr	r2, [pc, #580]	; (80095f8 <ProcessRadioRxDone+0x388>)
 80093b4:	2103      	movs	r1, #3
 80093b6:	5499      	strb	r1, [r3, r2]
 80093b8:	e00d      	b.n	80093d6 <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80093ba:	f002 fd21 	bl	800be00 <LoRaMacClassBIsMulticastExpected>
 80093be:	1e03      	subs	r3, r0, #0
 80093c0:	d009      	beq.n	80093d6 <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80093c2:	2000      	movs	r0, #0
 80093c4:	f002 fce2 	bl	800bd8c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80093c8:	2000      	movs	r0, #0
 80093ca:	f002 fcf9 	bl	800bdc0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 80093ce:	4b87      	ldr	r3, [pc, #540]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80093d0:	4a89      	ldr	r2, [pc, #548]	; (80095f8 <ProcessRadioRxDone+0x388>)
 80093d2:	2104      	movs	r1, #4
 80093d4:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 80093d6:	2276      	movs	r2, #118	; 0x76
 80093d8:	18bb      	adds	r3, r7, r2
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	18ba      	adds	r2, r7, r2
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	7011      	strb	r1, [r2, #0]
 80093e2:	001a      	movs	r2, r3
 80093e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093e6:	189b      	adds	r3, r3, r2
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	2174      	movs	r1, #116	; 0x74
 80093ec:	187b      	adds	r3, r7, r1
 80093ee:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 80093f0:	187b      	adds	r3, r7, r1
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	061b      	lsls	r3, r3, #24
 80093f6:	0f5b      	lsrs	r3, r3, #29
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d100      	bne.n	8009400 <ProcessRadioRxDone+0x190>
 80093fe:	e11c      	b.n	800963a <ProcessRadioRxDone+0x3ca>
 8009400:	dc03      	bgt.n	800940a <ProcessRadioRxDone+0x19a>
 8009402:	2b01      	cmp	r3, #1
 8009404:	d00a      	beq.n	800941c <ProcessRadioRxDone+0x1ac>
 8009406:	f000 fc18 	bl	8009c3a <ProcessRadioRxDone+0x9ca>
 800940a:	2b05      	cmp	r3, #5
 800940c:	d100      	bne.n	8009410 <ProcessRadioRxDone+0x1a0>
 800940e:	e10f      	b.n	8009630 <ProcessRadioRxDone+0x3c0>
 8009410:	2b07      	cmp	r3, #7
 8009412:	d101      	bne.n	8009418 <ProcessRadioRxDone+0x1a8>
 8009414:	f000 fbe6 	bl	8009be4 <ProcessRadioRxDone+0x974>
 8009418:	f000 fc0f 	bl	8009c3a <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800941c:	210c      	movs	r1, #12
 800941e:	187b      	adds	r3, r7, r1
 8009420:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009422:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 8009424:	237a      	movs	r3, #122	; 0x7a
 8009426:	18fb      	adds	r3, r7, r3
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	187b      	adds	r3, r7, r1
 800942e:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009430:	4a6e      	ldr	r2, [pc, #440]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009432:	238e      	movs	r3, #142	; 0x8e
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	58d2      	ldr	r2, [r2, r3]
 8009438:	2389      	movs	r3, #137	; 0x89
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	5cd3      	ldrb	r3, [r2, r3]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009442:	4b6a      	ldr	r3, [pc, #424]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009444:	4a78      	ldr	r2, [pc, #480]	; (8009628 <ProcessRadioRxDone+0x3b8>)
 8009446:	2101      	movs	r1, #1
 8009448:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800944a:	f7ff fee3 	bl	8009214 <PrepareRxDoneAbort>
                return;
 800944e:	f000 fc22 	bl	8009c96 <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 8009452:	4b66      	ldr	r3, [pc, #408]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2580      	movs	r5, #128	; 0x80
 8009458:	197c      	adds	r4, r7, r5
 800945a:	220c      	movs	r2, #12
 800945c:	18ba      	adds	r2, r7, r2
 800945e:	0019      	movs	r1, r3
 8009460:	20ff      	movs	r0, #255	; 0xff
 8009462:	f004 f841 	bl	800d4e8 <LoRaMacCryptoHandleJoinAccept>
 8009466:	0003      	movs	r3, r0
 8009468:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800946a:	197b      	adds	r3, r7, r5
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d000      	beq.n	8009474 <ProcessRadioRxDone+0x204>
 8009472:	e0ad      	b.n	80095d0 <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009474:	240c      	movs	r4, #12
 8009476:	193b      	adds	r3, r7, r4
 8009478:	7a59      	ldrb	r1, [r3, #9]
 800947a:	4a5c      	ldr	r2, [pc, #368]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800947c:	238e      	movs	r3, #142	; 0x8e
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	58d3      	ldr	r3, [r2, r3]
 8009482:	000a      	movs	r2, r1
 8009484:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009486:	4a59      	ldr	r2, [pc, #356]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009488:	238e      	movs	r3, #142	; 0x8e
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	58d3      	ldr	r3, [r2, r3]
 800948e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009490:	193b      	adds	r3, r7, r4
 8009492:	7a9b      	ldrb	r3, [r3, #10]
 8009494:	021a      	lsls	r2, r3, #8
 8009496:	4855      	ldr	r0, [pc, #340]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009498:	238e      	movs	r3, #142	; 0x8e
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	58c3      	ldr	r3, [r0, r3]
 800949e:	430a      	orrs	r2, r1
 80094a0:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80094a2:	4a52      	ldr	r2, [pc, #328]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80094a4:	238e      	movs	r3, #142	; 0x8e
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	58d3      	ldr	r3, [r2, r3]
 80094aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80094ac:	193b      	adds	r3, r7, r4
 80094ae:	7adb      	ldrb	r3, [r3, #11]
 80094b0:	041a      	lsls	r2, r3, #16
 80094b2:	484e      	ldr	r0, [pc, #312]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80094b4:	238e      	movs	r3, #142	; 0x8e
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	58c3      	ldr	r3, [r0, r3]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 80094be:	4a4b      	ldr	r2, [pc, #300]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80094c0:	238e      	movs	r3, #142	; 0x8e
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	58d3      	ldr	r3, [r2, r3]
 80094c6:	193a      	adds	r2, r7, r4
 80094c8:	68d2      	ldr	r2, [r2, #12]
 80094ca:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80094cc:	193b      	adds	r3, r7, r4
 80094ce:	7c1b      	ldrb	r3, [r3, #16]
 80094d0:	065b      	lsls	r3, r3, #25
 80094d2:	0f5b      	lsrs	r3, r3, #29
 80094d4:	b2d9      	uxtb	r1, r3
 80094d6:	4a45      	ldr	r2, [pc, #276]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80094d8:	238e      	movs	r3, #142	; 0x8e
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	58d3      	ldr	r3, [r2, r3]
 80094de:	22f5      	movs	r2, #245	; 0xf5
 80094e0:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80094e2:	193b      	adds	r3, r7, r4
 80094e4:	7c1b      	ldrb	r3, [r3, #16]
 80094e6:	071b      	lsls	r3, r3, #28
 80094e8:	0f1b      	lsrs	r3, r3, #28
 80094ea:	b2d9      	uxtb	r1, r3
 80094ec:	4a3f      	ldr	r2, [pc, #252]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80094ee:	238e      	movs	r3, #142	; 0x8e
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	58d3      	ldr	r3, [r2, r3]
 80094f4:	22fc      	movs	r2, #252	; 0xfc
 80094f6:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80094f8:	193b      	adds	r3, r7, r4
 80094fa:	7c59      	ldrb	r1, [r3, #17]
 80094fc:	4a3b      	ldr	r2, [pc, #236]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80094fe:	238e      	movs	r3, #142	; 0x8e
 8009500:	00db      	lsls	r3, r3, #3
 8009502:	58d3      	ldr	r3, [r2, r3]
 8009504:	22e4      	movs	r2, #228	; 0xe4
 8009506:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8009508:	4a38      	ldr	r2, [pc, #224]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800950a:	238e      	movs	r3, #142	; 0x8e
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	58d3      	ldr	r3, [r2, r3]
 8009510:	22e4      	movs	r2, #228	; 0xe4
 8009512:	589b      	ldr	r3, [r3, r2]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8009518:	4a34      	ldr	r2, [pc, #208]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800951a:	238e      	movs	r3, #142	; 0x8e
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	58d3      	ldr	r3, [r2, r3]
 8009520:	22e4      	movs	r2, #228	; 0xe4
 8009522:	2101      	movs	r1, #1
 8009524:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8009526:	4a31      	ldr	r2, [pc, #196]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009528:	238e      	movs	r3, #142	; 0x8e
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	58d3      	ldr	r3, [r2, r3]
 800952e:	22e4      	movs	r2, #228	; 0xe4
 8009530:	589a      	ldr	r2, [r3, r2]
 8009532:	492e      	ldr	r1, [pc, #184]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009534:	238e      	movs	r3, #142	; 0x8e
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	58c9      	ldr	r1, [r1, r3]
 800953a:	0013      	movs	r3, r2
 800953c:	015b      	lsls	r3, r3, #5
 800953e:	1a9b      	subs	r3, r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	189b      	adds	r3, r3, r2
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	001a      	movs	r2, r3
 8009548:	23e4      	movs	r3, #228	; 0xe4
 800954a:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800954c:	4a27      	ldr	r2, [pc, #156]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800954e:	238e      	movs	r3, #142	; 0x8e
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	58d3      	ldr	r3, [r2, r3]
 8009554:	22e4      	movs	r2, #228	; 0xe4
 8009556:	589a      	ldr	r2, [r3, r2]
 8009558:	4924      	ldr	r1, [pc, #144]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800955a:	238e      	movs	r3, #142	; 0x8e
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	58cb      	ldr	r3, [r1, r3]
 8009560:	21fa      	movs	r1, #250	; 0xfa
 8009562:	0089      	lsls	r1, r1, #2
 8009564:	468c      	mov	ip, r1
 8009566:	4462      	add	r2, ip
 8009568:	21e8      	movs	r1, #232	; 0xe8
 800956a:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800956c:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <ProcessRadioRxDone+0x37c>)
 800956e:	238e      	movs	r3, #142	; 0x8e
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	58d3      	ldr	r3, [r2, r3]
 8009574:	4a2d      	ldr	r2, [pc, #180]	; (800962c <ProcessRadioRxDone+0x3bc>)
 8009576:	2100      	movs	r1, #0
 8009578:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800957a:	216c      	movs	r1, #108	; 0x6c
 800957c:	187b      	adds	r3, r7, r1
 800957e:	220c      	movs	r2, #12
 8009580:	18ba      	adds	r2, r7, r2
 8009582:	3212      	adds	r2, #18
 8009584:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8009586:	237a      	movs	r3, #122	; 0x7a
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	3b11      	subs	r3, #17
 8009590:	b2da      	uxtb	r2, r3
 8009592:	187b      	adds	r3, r7, r1
 8009594:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009596:	4a15      	ldr	r2, [pc, #84]	; (80095ec <ProcessRadioRxDone+0x37c>)
 8009598:	238e      	movs	r3, #142	; 0x8e
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	58d3      	ldr	r3, [r2, r3]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	187a      	adds	r2, r7, r1
 80095a2:	0011      	movs	r1, r2
 80095a4:	0018      	movs	r0, r3
 80095a6:	f005 fa49 	bl	800ea3c <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 80095aa:	4a10      	ldr	r2, [pc, #64]	; (80095ec <ProcessRadioRxDone+0x37c>)
 80095ac:	238e      	movs	r3, #142	; 0x8e
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	58d2      	ldr	r2, [r2, r3]
 80095b2:	2389      	movs	r3, #137	; 0x89
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	2102      	movs	r1, #2
 80095b8:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80095ba:	2000      	movs	r0, #0
 80095bc:	f002 ffa6 	bl	800c50c <LoRaMacConfirmQueueIsCmdActive>
 80095c0:	1e03      	subs	r3, r0, #0
 80095c2:	d100      	bne.n	80095c6 <ProcessRadioRxDone+0x356>
 80095c4:	e340      	b.n	8009c48 <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80095c6:	2100      	movs	r1, #0
 80095c8:	2000      	movs	r0, #0
 80095ca:	f002 ff11 	bl	800c3f0 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 80095ce:	e33b      	b.n	8009c48 <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80095d0:	2000      	movs	r0, #0
 80095d2:	f002 ff9b 	bl	800c50c <LoRaMacConfirmQueueIsCmdActive>
 80095d6:	1e03      	subs	r3, r0, #0
 80095d8:	d100      	bne.n	80095dc <ProcessRadioRxDone+0x36c>
 80095da:	e335      	b.n	8009c48 <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80095dc:	2100      	movs	r1, #0
 80095de:	2007      	movs	r0, #7
 80095e0:	f002 ff06 	bl	800c3f0 <LoRaMacConfirmQueueSetStatus>
            break;
 80095e4:	e330      	b.n	8009c48 <ProcessRadioRxDone+0x9d8>
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	2000223c 	.word	0x2000223c
 80095ec:	200005fc 	.word	0x200005fc
 80095f0:	0000041e 	.word	0x0000041e
 80095f4:	0000046c 	.word	0x0000046c
 80095f8:	00000421 	.word	0x00000421
 80095fc:	00000413 	.word	0x00000413
 8009600:	00000412 	.word	0x00000412
 8009604:	00000415 	.word	0x00000415
 8009608:	0000041c 	.word	0x0000041c
 800960c:	0000041d 	.word	0x0000041d
 8009610:	00000422 	.word	0x00000422
 8009614:	00000424 	.word	0x00000424
 8009618:	080293d8 	.word	0x080293d8
 800961c:	200009a8 	.word	0x200009a8
 8009620:	00000462 	.word	0x00000462
 8009624:	00000464 	.word	0x00000464
 8009628:	00000411 	.word	0x00000411
 800962c:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009630:	4ac7      	ldr	r2, [pc, #796]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009632:	2382      	movs	r3, #130	; 0x82
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	2101      	movs	r1, #1
 8009638:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800963a:	4ac5      	ldr	r2, [pc, #788]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 800963c:	238e      	movs	r3, #142	; 0x8e
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	58d2      	ldr	r2, [r2, r3]
 8009642:	2302      	movs	r3, #2
 8009644:	33ff      	adds	r3, #255	; 0xff
 8009646:	5cd2      	ldrb	r2, [r2, r3]
 8009648:	2168      	movs	r1, #104	; 0x68
 800964a:	187b      	adds	r3, r7, r1
 800964c:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800964e:	4bc0      	ldr	r3, [pc, #768]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009650:	4ac0      	ldr	r2, [pc, #768]	; (8009954 <ProcessRadioRxDone+0x6e4>)
 8009652:	5c9b      	ldrb	r3, [r3, r2]
 8009654:	b25a      	sxtb	r2, r3
 8009656:	187b      	adds	r3, r7, r1
 8009658:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800965a:	187b      	adds	r3, r7, r1
 800965c:	220c      	movs	r2, #12
 800965e:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009660:	4abb      	ldr	r2, [pc, #748]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009662:	238e      	movs	r3, #142	; 0x8e
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	58d2      	ldr	r2, [r2, r3]
 8009668:	2316      	movs	r3, #22
 800966a:	33ff      	adds	r3, #255	; 0xff
 800966c:	5cd3      	ldrb	r3, [r2, r3]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009672:	2368      	movs	r3, #104	; 0x68
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	220d      	movs	r2, #13
 8009678:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800967a:	4ab5      	ldr	r2, [pc, #724]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 800967c:	238e      	movs	r3, #142	; 0x8e
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	58d3      	ldr	r3, [r2, r3]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2268      	movs	r2, #104	; 0x68
 8009686:	18ba      	adds	r2, r7, r2
 8009688:	0011      	movs	r1, r2
 800968a:	0018      	movs	r0, r3
 800968c:	f005 f8ba 	bl	800e804 <RegionGetPhyParam>
 8009690:	0003      	movs	r3, r0
 8009692:	001a      	movs	r2, r3
 8009694:	2364      	movs	r3, #100	; 0x64
 8009696:	18fb      	adds	r3, r7, r3
 8009698:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800969a:	237a      	movs	r3, #122	; 0x7a
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	3b0d      	subs	r3, #13
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	1c1a      	adds	r2, r3, #0
 80096a8:	b213      	sxth	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	da01      	bge.n	80096b2 <ProcessRadioRxDone+0x442>
 80096ae:	2300      	movs	r3, #0
 80096b0:	1c1a      	adds	r2, r3, #0
 80096b2:	b212      	sxth	r2, r2
 80096b4:	2364      	movs	r3, #100	; 0x64
 80096b6:	18fb      	adds	r3, r7, r3
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	b21b      	sxth	r3, r3
 80096bc:	429a      	cmp	r2, r3
 80096be:	dd06      	ble.n	80096ce <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80096c0:	4ba3      	ldr	r3, [pc, #652]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80096c2:	4aa5      	ldr	r2, [pc, #660]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 80096c4:	2101      	movs	r1, #1
 80096c6:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 80096c8:	f7ff fda4 	bl	8009214 <PrepareRxDoneAbort>
                return;
 80096cc:	e2e3      	b.n	8009c96 <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 80096ce:	2134      	movs	r1, #52	; 0x34
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096d4:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 80096d6:	237a      	movs	r3, #122	; 0x7a
 80096d8:	18fb      	adds	r3, r7, r3
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	187b      	adds	r3, r7, r1
 80096e0:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80096e2:	187b      	adds	r3, r7, r1
 80096e4:	4a9d      	ldr	r2, [pc, #628]	; (800995c <ProcessRadioRxDone+0x6ec>)
 80096e6:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80096e8:	0008      	movs	r0, r1
 80096ea:	187b      	adds	r3, r7, r1
 80096ec:	2228      	movs	r2, #40	; 0x28
 80096ee:	21ff      	movs	r1, #255	; 0xff
 80096f0:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80096f2:	183b      	adds	r3, r7, r0
 80096f4:	0018      	movs	r0, r3
 80096f6:	f004 fdb6 	bl	800e266 <LoRaMacParserData>
 80096fa:	1e03      	subs	r3, r0, #0
 80096fc:	d006      	beq.n	800970c <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80096fe:	4b94      	ldr	r3, [pc, #592]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009700:	4a95      	ldr	r2, [pc, #596]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 8009702:	2101      	movs	r1, #1
 8009704:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009706:	f7ff fd85 	bl	8009214 <PrepareRxDoneAbort>
                return;
 800970a:	e2c4      	b.n	8009c96 <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800970c:	2034      	movs	r0, #52	; 0x34
 800970e:	183b      	adds	r3, r7, r0
 8009710:	6899      	ldr	r1, [r3, #8]
 8009712:	4a8f      	ldr	r2, [pc, #572]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009714:	2385      	movs	r3, #133	; 0x85
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800971a:	1dba      	adds	r2, r7, #6
 800971c:	183b      	adds	r3, r7, r0
 800971e:	0011      	movs	r1, r2
 8009720:	0018      	movs	r0, r3
 8009722:	f002 f951 	bl	800b9c8 <DetermineFrameType>
 8009726:	1e03      	subs	r3, r0, #0
 8009728:	d006      	beq.n	8009738 <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800972a:	4b89      	ldr	r3, [pc, #548]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 800972c:	4a8a      	ldr	r2, [pc, #552]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 800972e:	2101      	movs	r1, #1
 8009730:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009732:	f7ff fd6f 	bl	8009214 <PrepareRxDoneAbort>
                return;
 8009736:	e2ae      	b.n	8009c96 <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 8009738:	2383      	movs	r3, #131	; 0x83
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	2200      	movs	r2, #0
 800973e:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009744:	2381      	movs	r3, #129	; 0x81
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e051      	b.n	80097f2 <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800974e:	4a80      	ldr	r2, [pc, #512]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009750:	238e      	movs	r3, #142	; 0x8e
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	58d2      	ldr	r2, [r2, r3]
 8009756:	2381      	movs	r3, #129	; 0x81
 8009758:	18fb      	adds	r3, r7, r3
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	015b      	lsls	r3, r3, #5
 800975e:	18d3      	adds	r3, r2, r3
 8009760:	334c      	adds	r3, #76	; 0x4c
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	2334      	movs	r3, #52	; 0x34
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	429a      	cmp	r2, r3
 800976c:	d13b      	bne.n	80097e6 <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 800976e:	4a78      	ldr	r2, [pc, #480]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009770:	238e      	movs	r3, #142	; 0x8e
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	58d2      	ldr	r2, [r2, r3]
 8009776:	2381      	movs	r3, #129	; 0x81
 8009778:	18fb      	adds	r3, r7, r3
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2154      	movs	r1, #84	; 0x54
 800977e:	015b      	lsls	r3, r3, #5
 8009780:	18d3      	adds	r3, r2, r3
 8009782:	185b      	adds	r3, r3, r1
 8009784:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 8009786:	2b00      	cmp	r3, #0
 8009788:	d02d      	beq.n	80097e6 <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 800978a:	2383      	movs	r3, #131	; 0x83
 800978c:	18fb      	adds	r3, r7, r3
 800978e:	2201      	movs	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 8009792:	4a6f      	ldr	r2, [pc, #444]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009794:	238e      	movs	r3, #142	; 0x8e
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	58d1      	ldr	r1, [r2, r3]
 800979a:	2481      	movs	r4, #129	; 0x81
 800979c:	193b      	adds	r3, r7, r4
 800979e:	781a      	ldrb	r2, [r3, #0]
 80097a0:	2382      	movs	r3, #130	; 0x82
 80097a2:	18fb      	adds	r3, r7, r3
 80097a4:	2048      	movs	r0, #72	; 0x48
 80097a6:	0152      	lsls	r2, r2, #5
 80097a8:	188a      	adds	r2, r1, r2
 80097aa:	1812      	adds	r2, r2, r0
 80097ac:	7812      	ldrb	r2, [r2, #0]
 80097ae:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80097b0:	4a67      	ldr	r2, [pc, #412]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80097b2:	238e      	movs	r3, #142	; 0x8e
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	58d2      	ldr	r2, [r2, r3]
 80097b8:	0021      	movs	r1, r4
 80097ba:	187b      	adds	r3, r7, r1
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	015b      	lsls	r3, r3, #5
 80097c0:	18d3      	adds	r3, r2, r3
 80097c2:	3350      	adds	r3, #80	; 0x50
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 80097ca:	4a61      	ldr	r2, [pc, #388]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80097cc:	238e      	movs	r3, #142	; 0x8e
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	58d2      	ldr	r2, [r2, r3]
 80097d2:	187b      	adds	r3, r7, r1
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	015b      	lsls	r3, r3, #5
 80097d8:	18d3      	adds	r3, r2, r3
 80097da:	334c      	adds	r3, #76	; 0x4c
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2284      	movs	r2, #132	; 0x84
 80097e0:	18ba      	adds	r2, r7, r2
 80097e2:	6013      	str	r3, [r2, #0]
                    break;
 80097e4:	e00a      	b.n	80097fc <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80097e6:	2181      	movs	r1, #129	; 0x81
 80097e8:	187b      	adds	r3, r7, r1
 80097ea:	781a      	ldrb	r2, [r3, #0]
 80097ec:	187b      	adds	r3, r7, r1
 80097ee:	3201      	adds	r2, #1
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	2381      	movs	r3, #129	; 0x81
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d9a8      	bls.n	800974e <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80097fc:	2168      	movs	r1, #104	; 0x68
 80097fe:	187b      	adds	r3, r7, r1
 8009800:	2214      	movs	r2, #20
 8009802:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009804:	4a52      	ldr	r2, [pc, #328]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009806:	238e      	movs	r3, #142	; 0x8e
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	58d3      	ldr	r3, [r2, r3]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	187a      	adds	r2, r7, r1
 8009810:	0011      	movs	r1, r2
 8009812:	0018      	movs	r0, r3
 8009814:	f004 fff6 	bl	800e804 <RegionGetPhyParam>
 8009818:	0003      	movs	r3, r0
 800981a:	001a      	movs	r2, r3
 800981c:	2064      	movs	r0, #100	; 0x64
 800981e:	183b      	adds	r3, r7, r0
 8009820:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009822:	1dbb      	adds	r3, r7, #6
 8009824:	781d      	ldrb	r5, [r3, #0]
 8009826:	4a4a      	ldr	r2, [pc, #296]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009828:	238e      	movs	r3, #142	; 0x8e
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	58d1      	ldr	r1, [r2, r3]
 800982e:	183b      	adds	r3, r7, r0
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	2275      	movs	r2, #117	; 0x75
 8009836:	18bc      	adds	r4, r7, r2
 8009838:	2288      	movs	r2, #136	; 0x88
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	588e      	ldr	r6, [r1, r2]
 800983e:	2134      	movs	r1, #52	; 0x34
 8009840:	1879      	adds	r1, r7, r1
 8009842:	2082      	movs	r0, #130	; 0x82
 8009844:	183a      	adds	r2, r7, r0
 8009846:	7810      	ldrb	r0, [r2, #0]
 8009848:	2208      	movs	r2, #8
 800984a:	18ba      	adds	r2, r7, r2
 800984c:	9202      	str	r2, [sp, #8]
 800984e:	1dfa      	adds	r2, r7, #7
 8009850:	9201      	str	r2, [sp, #4]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	0033      	movs	r3, r6
 8009856:	000a      	movs	r2, r1
 8009858:	0029      	movs	r1, r5
 800985a:	f004 fad9 	bl	800de10 <LoRaMacGetFCntDown>
 800985e:	0003      	movs	r3, r0
 8009860:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 8009862:	2275      	movs	r2, #117	; 0x75
 8009864:	18bb      	adds	r3, r7, r2
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d041      	beq.n	80098f0 <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 800986c:	2375      	movs	r3, #117	; 0x75
 800986e:	18fb      	adds	r3, r7, r3
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d127      	bne.n	80098c6 <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009876:	4b36      	ldr	r3, [pc, #216]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009878:	4a37      	ldr	r2, [pc, #220]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 800987a:	2108      	movs	r1, #8
 800987c:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800987e:	4a34      	ldr	r2, [pc, #208]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009880:	238e      	movs	r3, #142	; 0x8e
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	58d3      	ldr	r3, [r2, r3]
 8009886:	4a36      	ldr	r2, [pc, #216]	; (8009960 <ProcessRadioRxDone+0x6f0>)
 8009888:	5c9b      	ldrb	r3, [r3, r2]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d129      	bne.n	80098e2 <ProcessRadioRxDone+0x672>
 800988e:	2374      	movs	r3, #116	; 0x74
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	221f      	movs	r2, #31
 8009896:	4393      	bics	r3, r2
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2ba0      	cmp	r3, #160	; 0xa0
 800989c:	d121      	bne.n	80098e2 <ProcessRadioRxDone+0x672>
 800989e:	4a2c      	ldr	r2, [pc, #176]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80098a0:	238e      	movs	r3, #142	; 0x8e
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	58d2      	ldr	r2, [r2, r3]
 80098a6:	238a      	movs	r3, #138	; 0x8a
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	58d2      	ldr	r2, [r2, r3]
 80098ac:	2334      	movs	r3, #52	; 0x34
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d115      	bne.n	80098e2 <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 80098b6:	4a26      	ldr	r2, [pc, #152]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80098b8:	238e      	movs	r3, #142	; 0x8e
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	58d3      	ldr	r3, [r2, r3]
 80098be:	4a29      	ldr	r2, [pc, #164]	; (8009964 <ProcessRadioRxDone+0x6f4>)
 80098c0:	2101      	movs	r1, #1
 80098c2:	5499      	strb	r1, [r3, r2]
 80098c4:	e00d      	b.n	80098e2 <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 80098c6:	2375      	movs	r3, #117	; 0x75
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d104      	bne.n	80098da <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80098d0:	4b1f      	ldr	r3, [pc, #124]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80098d2:	4a21      	ldr	r2, [pc, #132]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 80098d4:	210a      	movs	r1, #10
 80098d6:	5499      	strb	r1, [r3, r2]
 80098d8:	e003      	b.n	80098e2 <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80098da:	4b1d      	ldr	r3, [pc, #116]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80098dc:	4a1e      	ldr	r2, [pc, #120]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 80098de:	2101      	movs	r1, #1
 80098e0:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4b1a      	ldr	r3, [pc, #104]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 80098e6:	4920      	ldr	r1, [pc, #128]	; (8009968 <ProcessRadioRxDone+0x6f8>)
 80098e8:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 80098ea:	f7ff fc93 	bl	8009214 <PrepareRxDoneAbort>
                return;
 80098ee:	e1d2      	b.n	8009c96 <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80098f0:	1dfb      	adds	r3, r7, #7
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	68bd      	ldr	r5, [r7, #8]
 80098f6:	2680      	movs	r6, #128	; 0x80
 80098f8:	19bc      	adds	r4, r7, r6
 80098fa:	2384      	movs	r3, #132	; 0x84
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	6819      	ldr	r1, [r3, #0]
 8009900:	2382      	movs	r3, #130	; 0x82
 8009902:	18fb      	adds	r3, r7, r3
 8009904:	7818      	ldrb	r0, [r3, #0]
 8009906:	2334      	movs	r3, #52	; 0x34
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	002b      	movs	r3, r5
 800990e:	f004 f987 	bl	800dc20 <LoRaMacCryptoUnsecureMessage>
 8009912:	0003      	movs	r3, r0
 8009914:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009916:	19bb      	adds	r3, r7, r6
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d028      	beq.n	8009970 <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800991e:	2380      	movs	r3, #128	; 0x80
 8009920:	18fb      	adds	r3, r7, r3
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b02      	cmp	r3, #2
 8009926:	d10c      	bne.n	8009942 <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 800992a:	4a0b      	ldr	r2, [pc, #44]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 800992c:	210b      	movs	r1, #11
 800992e:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 8009930:	4b07      	ldr	r3, [pc, #28]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009932:	4a0e      	ldr	r2, [pc, #56]	; (800996c <ProcessRadioRxDone+0x6fc>)
 8009934:	5c9b      	ldrb	r3, [r3, r2]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d100      	bne.n	800993c <ProcessRadioRxDone+0x6cc>
 800993a:	e1ab      	b.n	8009c94 <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 800993c:	f7ff fc6a 	bl	8009214 <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 8009940:	e1a8      	b.n	8009c94 <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009942:	4b03      	ldr	r3, [pc, #12]	; (8009950 <ProcessRadioRxDone+0x6e0>)
 8009944:	4a04      	ldr	r2, [pc, #16]	; (8009958 <ProcessRadioRxDone+0x6e8>)
 8009946:	210c      	movs	r1, #12
 8009948:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800994a:	f7ff fc63 	bl	8009214 <PrepareRxDoneAbort>
                return;
 800994e:	e1a1      	b.n	8009c94 <ProcessRadioRxDone+0xa24>
 8009950:	200005fc 	.word	0x200005fc
 8009954:	00000414 	.word	0x00000414
 8009958:	00000411 	.word	0x00000411
 800995c:	2000083c 	.word	0x2000083c
 8009960:	00000222 	.word	0x00000222
 8009964:	0000021a 	.word	0x0000021a
 8009968:	00000424 	.word	0x00000424
 800996c:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009970:	4bca      	ldr	r3, [pc, #808]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009972:	4acb      	ldr	r2, [pc, #812]	; (8009ca0 <ProcessRadioRxDone+0xa30>)
 8009974:	2100      	movs	r1, #0
 8009976:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 8009978:	4bc8      	ldr	r3, [pc, #800]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 800997a:	2483      	movs	r4, #131	; 0x83
 800997c:	193a      	adds	r2, r7, r4
 800997e:	49c9      	ldr	r1, [pc, #804]	; (8009ca4 <ProcessRadioRxDone+0xa34>)
 8009980:	7812      	ldrb	r2, [r2, #0]
 8009982:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009984:	2034      	movs	r0, #52	; 0x34
 8009986:	183b      	adds	r3, r7, r0
 8009988:	7b1b      	ldrb	r3, [r3, #12]
 800998a:	06db      	lsls	r3, r3, #27
 800998c:	0fdb      	lsrs	r3, r3, #31
 800998e:	b2db      	uxtb	r3, r3
 8009990:	0019      	movs	r1, r3
 8009992:	4bc2      	ldr	r3, [pc, #776]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009994:	4ac4      	ldr	r2, [pc, #784]	; (8009ca8 <ProcessRadioRxDone+0xa38>)
 8009996:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 8009998:	4ac0      	ldr	r2, [pc, #768]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 800999a:	2383      	movs	r3, #131	; 0x83
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	2100      	movs	r1, #0
 80099a0:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 80099a2:	4bbe      	ldr	r3, [pc, #760]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 80099a4:	4ac1      	ldr	r2, [pc, #772]	; (8009cac <ProcessRadioRxDone+0xa3c>)
 80099a6:	2100      	movs	r1, #0
 80099a8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4bbb      	ldr	r3, [pc, #748]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 80099ae:	49c0      	ldr	r1, [pc, #768]	; (8009cb0 <ProcessRadioRxDone+0xa40>)
 80099b0:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80099b2:	183b      	adds	r3, r7, r0
 80099b4:	7b1b      	ldrb	r3, [r3, #12]
 80099b6:	069b      	lsls	r3, r3, #26
 80099b8:	0fdb      	lsrs	r3, r3, #31
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	1e5a      	subs	r2, r3, #1
 80099be:	4193      	sbcs	r3, r2
 80099c0:	b2d9      	uxtb	r1, r3
 80099c2:	4bb6      	ldr	r3, [pc, #728]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 80099c4:	4abb      	ldr	r2, [pc, #748]	; (8009cb4 <ProcessRadioRxDone+0xa44>)
 80099c6:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80099c8:	4bb4      	ldr	r3, [pc, #720]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 80099ca:	4abb      	ldr	r2, [pc, #748]	; (8009cb8 <ProcessRadioRxDone+0xa48>)
 80099cc:	2100      	movs	r1, #0
 80099ce:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80099d0:	183b      	adds	r3, r7, r0
 80099d2:	7b1b      	ldrb	r3, [r3, #12]
 80099d4:	069b      	lsls	r3, r3, #26
 80099d6:	0fdb      	lsrs	r3, r3, #31
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	1e5a      	subs	r2, r3, #1
 80099dc:	4193      	sbcs	r3, r2
 80099de:	b2d9      	uxtb	r1, r3
 80099e0:	4aae      	ldr	r2, [pc, #696]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 80099e2:	2386      	movs	r3, #134	; 0x86
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 80099e8:	4aac      	ldr	r2, [pc, #688]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 80099ea:	238e      	movs	r3, #142	; 0x8e
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	58d3      	ldr	r3, [r2, r3]
 80099f0:	22cc      	movs	r2, #204	; 0xcc
 80099f2:	2100      	movs	r1, #0
 80099f4:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 80099f6:	193b      	adds	r3, r7, r4
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d105      	bne.n	8009a0a <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80099fe:	4aa7      	ldr	r2, [pc, #668]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a00:	2382      	movs	r3, #130	; 0x82
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	2102      	movs	r1, #2
 8009a06:	54d1      	strb	r1, [r2, r3]
 8009a08:	e032      	b.n	8009a70 <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009a0a:	2374      	movs	r3, #116	; 0x74
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	221f      	movs	r2, #31
 8009a12:	4393      	bics	r3, r2
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2ba0      	cmp	r3, #160	; 0xa0
 8009a18:	d11e      	bne.n	8009a58 <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8009a1a:	4aa0      	ldr	r2, [pc, #640]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a1c:	238e      	movs	r3, #142	; 0x8e
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	58d3      	ldr	r3, [r2, r3]
 8009a22:	4aa6      	ldr	r2, [pc, #664]	; (8009cbc <ProcessRadioRxDone+0xa4c>)
 8009a24:	2101      	movs	r1, #1
 8009a26:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009a28:	4a9c      	ldr	r2, [pc, #624]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a2a:	238e      	movs	r3, #142	; 0x8e
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	58d3      	ldr	r3, [r2, r3]
 8009a30:	4aa3      	ldr	r2, [pc, #652]	; (8009cc0 <ProcessRadioRxDone+0xa50>)
 8009a32:	5c9b      	ldrb	r3, [r3, r2]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8009a38:	4a98      	ldr	r2, [pc, #608]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a3a:	238e      	movs	r3, #142	; 0x8e
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	58d2      	ldr	r2, [r2, r3]
 8009a40:	2334      	movs	r3, #52	; 0x34
 8009a42:	18fb      	adds	r3, r7, r3
 8009a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a46:	238a      	movs	r3, #138	; 0x8a
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009a4c:	4a93      	ldr	r2, [pc, #588]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a4e:	2382      	movs	r3, #130	; 0x82
 8009a50:	00db      	lsls	r3, r3, #3
 8009a52:	2101      	movs	r1, #1
 8009a54:	54d1      	strb	r1, [r2, r3]
 8009a56:	e00b      	b.n	8009a70 <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8009a58:	4a90      	ldr	r2, [pc, #576]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a5a:	238e      	movs	r3, #142	; 0x8e
 8009a5c:	00db      	lsls	r3, r3, #3
 8009a5e:	58d3      	ldr	r3, [r2, r3]
 8009a60:	4a96      	ldr	r2, [pc, #600]	; (8009cbc <ProcessRadioRxDone+0xa4c>)
 8009a62:	2100      	movs	r1, #0
 8009a64:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009a66:	4a8d      	ldr	r2, [pc, #564]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a68:	2382      	movs	r3, #130	; 0x82
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 8009a70:	1dfb      	adds	r3, r7, #7
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	0011      	movs	r1, r2
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f004 fa77 	bl	800df6c <LoRaMacSetFCntDown>
 8009a7e:	1e03      	subs	r3, r0, #0
 8009a80:	d007      	beq.n	8009a92 <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a82:	4b86      	ldr	r3, [pc, #536]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a84:	4a86      	ldr	r2, [pc, #536]	; (8009ca0 <ProcessRadioRxDone+0xa30>)
 8009a86:	2101      	movs	r1, #1
 8009a88:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009a8a:	f7ff fbc3 	bl	8009214 <PrepareRxDoneAbort>
                return;
 8009a8e:	46c0      	nop			; (mov r8, r8)
 8009a90:	e101      	b.n	8009c96 <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009a92:	4b82      	ldr	r3, [pc, #520]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a94:	4a8b      	ldr	r2, [pc, #556]	; (8009cc4 <ProcessRadioRxDone+0xa54>)
 8009a96:	5c98      	ldrb	r0, [r3, r2]
 8009a98:	4b80      	ldr	r3, [pc, #512]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009a9a:	4a8b      	ldr	r2, [pc, #556]	; (8009cc8 <ProcessRadioRxDone+0xa58>)
 8009a9c:	5c9a      	ldrb	r2, [r3, r2]
 8009a9e:	2334      	movs	r3, #52	; 0x34
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	7b1b      	ldrb	r3, [r3, #12]
 8009aa4:	1c19      	adds	r1, r3, #0
 8009aa6:	f001 fe93 	bl	800b7d0 <RemoveMacCommands>

            switch( fType )
 8009aaa:	1dbb      	adds	r3, r7, #6
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d038      	beq.n	8009b24 <ProcessRadioRxDone+0x8b4>
 8009ab2:	dc02      	bgt.n	8009aba <ProcessRadioRxDone+0x84a>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <ProcessRadioRxDone+0x854>
 8009ab8:	e086      	b.n	8009bc8 <ProcessRadioRxDone+0x958>
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d052      	beq.n	8009b64 <ProcessRadioRxDone+0x8f4>
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d06a      	beq.n	8009b98 <ProcessRadioRxDone+0x928>
 8009ac2:	e081      	b.n	8009bc8 <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009ac4:	2034      	movs	r0, #52	; 0x34
 8009ac6:	183b      	adds	r3, r7, r0
 8009ac8:	7b1b      	ldrb	r3, [r3, #12]
 8009aca:	071b      	lsls	r3, r3, #28
 8009acc:	0f1b      	lsrs	r3, r3, #28
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	001c      	movs	r4, r3
 8009ad2:	4b72      	ldr	r3, [pc, #456]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009ad4:	4a7b      	ldr	r2, [pc, #492]	; (8009cc4 <ProcessRadioRxDone+0xa54>)
 8009ad6:	5c9b      	ldrb	r3, [r3, r2]
 8009ad8:	2277      	movs	r2, #119	; 0x77
 8009ada:	18ba      	adds	r2, r7, r2
 8009adc:	2100      	movs	r1, #0
 8009ade:	5651      	ldrsb	r1, [r2, r1]
 8009ae0:	0005      	movs	r5, r0
 8009ae2:	183a      	adds	r2, r7, r0
 8009ae4:	3210      	adds	r2, #16
 8009ae6:	0010      	movs	r0, r2
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	000b      	movs	r3, r1
 8009aec:	0022      	movs	r2, r4
 8009aee:	2100      	movs	r1, #0
 8009af0:	f000 fe72 	bl	800a7d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009af4:	0028      	movs	r0, r5
 8009af6:	183b      	adds	r3, r7, r0
 8009af8:	2220      	movs	r2, #32
 8009afa:	5c99      	ldrb	r1, [r3, r2]
 8009afc:	4b67      	ldr	r3, [pc, #412]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009afe:	4a73      	ldr	r2, [pc, #460]	; (8009ccc <ProcessRadioRxDone+0xa5c>)
 8009b00:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009b02:	183b      	adds	r3, r7, r0
 8009b04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b06:	4a65      	ldr	r2, [pc, #404]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b08:	2383      	movs	r3, #131	; 0x83
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009b0e:	183b      	adds	r3, r7, r0
 8009b10:	2228      	movs	r2, #40	; 0x28
 8009b12:	5c99      	ldrb	r1, [r3, r2]
 8009b14:	4b61      	ldr	r3, [pc, #388]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b16:	4a65      	ldr	r2, [pc, #404]	; (8009cac <ProcessRadioRxDone+0xa3c>)
 8009b18:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 8009b1a:	4b60      	ldr	r3, [pc, #384]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b1c:	4a6c      	ldr	r2, [pc, #432]	; (8009cd0 <ProcessRadioRxDone+0xa60>)
 8009b1e:	2101      	movs	r1, #1
 8009b20:	5499      	strb	r1, [r3, r2]
                    break;
 8009b22:	e058      	b.n	8009bd6 <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009b24:	2034      	movs	r0, #52	; 0x34
 8009b26:	183b      	adds	r3, r7, r0
 8009b28:	7b1b      	ldrb	r3, [r3, #12]
 8009b2a:	071b      	lsls	r3, r3, #28
 8009b2c:	0f1b      	lsrs	r3, r3, #28
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	001c      	movs	r4, r3
 8009b32:	4b5a      	ldr	r3, [pc, #360]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b34:	4a63      	ldr	r2, [pc, #396]	; (8009cc4 <ProcessRadioRxDone+0xa54>)
 8009b36:	5c9b      	ldrb	r3, [r3, r2]
 8009b38:	2277      	movs	r2, #119	; 0x77
 8009b3a:	18ba      	adds	r2, r7, r2
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	5651      	ldrsb	r1, [r2, r1]
 8009b40:	0005      	movs	r5, r0
 8009b42:	183a      	adds	r2, r7, r0
 8009b44:	3210      	adds	r2, #16
 8009b46:	0010      	movs	r0, r2
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	000b      	movs	r3, r1
 8009b4c:	0022      	movs	r2, r4
 8009b4e:	2100      	movs	r1, #0
 8009b50:	f000 fe42 	bl	800a7d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b54:	0028      	movs	r0, r5
 8009b56:	183b      	adds	r3, r7, r0
 8009b58:	2220      	movs	r2, #32
 8009b5a:	5c99      	ldrb	r1, [r3, r2]
 8009b5c:	4b4f      	ldr	r3, [pc, #316]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b5e:	4a5b      	ldr	r2, [pc, #364]	; (8009ccc <ProcessRadioRxDone+0xa5c>)
 8009b60:	5499      	strb	r1, [r3, r2]
                    break;
 8009b62:	e038      	b.n	8009bd6 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8009b64:	2434      	movs	r4, #52	; 0x34
 8009b66:	193b      	adds	r3, r7, r4
 8009b68:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009b6a:	193b      	adds	r3, r7, r4
 8009b6c:	2228      	movs	r2, #40	; 0x28
 8009b6e:	5c99      	ldrb	r1, [r3, r2]
 8009b70:	4b4a      	ldr	r3, [pc, #296]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b72:	4a54      	ldr	r2, [pc, #336]	; (8009cc4 <ProcessRadioRxDone+0xa54>)
 8009b74:	5c9b      	ldrb	r3, [r3, r2]
 8009b76:	2277      	movs	r2, #119	; 0x77
 8009b78:	18ba      	adds	r2, r7, r2
 8009b7a:	7812      	ldrb	r2, [r2, #0]
 8009b7c:	b252      	sxtb	r2, r2
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	0013      	movs	r3, r2
 8009b82:	000a      	movs	r2, r1
 8009b84:	2100      	movs	r1, #0
 8009b86:	f000 fe27 	bl	800a7d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b8a:	193b      	adds	r3, r7, r4
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	5c99      	ldrb	r1, [r3, r2]
 8009b90:	4b42      	ldr	r3, [pc, #264]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009b92:	4a4e      	ldr	r2, [pc, #312]	; (8009ccc <ProcessRadioRxDone+0xa5c>)
 8009b94:	5499      	strb	r1, [r3, r2]
                    break;
 8009b96:	e01e      	b.n	8009bd6 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b98:	2034      	movs	r0, #52	; 0x34
 8009b9a:	183b      	adds	r3, r7, r0
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	5c99      	ldrb	r1, [r3, r2]
 8009ba0:	4b3e      	ldr	r3, [pc, #248]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009ba2:	4a4a      	ldr	r2, [pc, #296]	; (8009ccc <ProcessRadioRxDone+0xa5c>)
 8009ba4:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009ba6:	183b      	adds	r3, r7, r0
 8009ba8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009baa:	4a3c      	ldr	r2, [pc, #240]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009bac:	2383      	movs	r3, #131	; 0x83
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009bb2:	183b      	adds	r3, r7, r0
 8009bb4:	2228      	movs	r2, #40	; 0x28
 8009bb6:	5c99      	ldrb	r1, [r3, r2]
 8009bb8:	4b38      	ldr	r3, [pc, #224]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009bba:	4a3c      	ldr	r2, [pc, #240]	; (8009cac <ProcessRadioRxDone+0xa3c>)
 8009bbc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 8009bbe:	4b37      	ldr	r3, [pc, #220]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009bc0:	4a43      	ldr	r2, [pc, #268]	; (8009cd0 <ProcessRadioRxDone+0xa60>)
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	5499      	strb	r1, [r3, r2]
                    break;
 8009bc6:	e006      	b.n	8009bd6 <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009bc8:	4b34      	ldr	r3, [pc, #208]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009bca:	4a35      	ldr	r2, [pc, #212]	; (8009ca0 <ProcessRadioRxDone+0xa30>)
 8009bcc:	2101      	movs	r1, #1
 8009bce:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 8009bd0:	f7ff fb20 	bl	8009214 <PrepareRxDoneAbort>
                    break;
 8009bd4:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009bd6:	4b31      	ldr	r3, [pc, #196]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009bd8:	4a3e      	ldr	r2, [pc, #248]	; (8009cd4 <ProcessRadioRxDone+0xa64>)
 8009bda:	5c99      	ldrb	r1, [r3, r2]
 8009bdc:	2002      	movs	r0, #2
 8009bde:	4301      	orrs	r1, r0
 8009be0:	5499      	strb	r1, [r3, r2]

            break;
 8009be2:	e032      	b.n	8009c4a <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 8009be4:	2476      	movs	r4, #118	; 0x76
 8009be6:	193b      	adds	r3, r7, r4
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009bec:	18d1      	adds	r1, r2, r3
 8009bee:	257a      	movs	r5, #122	; 0x7a
 8009bf0:	197b      	adds	r3, r7, r5
 8009bf2:	881a      	ldrh	r2, [r3, #0]
 8009bf4:	4b38      	ldr	r3, [pc, #224]	; (8009cd8 <ProcessRadioRxDone+0xa68>)
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	f013 f85c 	bl	801ccb4 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009bfc:	4a27      	ldr	r2, [pc, #156]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009bfe:	2382      	movs	r3, #130	; 0x82
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	2103      	movs	r1, #3
 8009c04:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009c06:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c08:	4a25      	ldr	r2, [pc, #148]	; (8009ca0 <ProcessRadioRxDone+0xa30>)
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009c0e:	4a23      	ldr	r2, [pc, #140]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c10:	2383      	movs	r3, #131	; 0x83
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	4930      	ldr	r1, [pc, #192]	; (8009cd8 <ProcessRadioRxDone+0xa68>)
 8009c16:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009c18:	197b      	adds	r3, r7, r5
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	193b      	adds	r3, r7, r4
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	b2d9      	uxtb	r1, r3
 8009c26:	4b1d      	ldr	r3, [pc, #116]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c28:	4a20      	ldr	r2, [pc, #128]	; (8009cac <ProcessRadioRxDone+0xa3c>)
 8009c2a:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c2e:	4a29      	ldr	r2, [pc, #164]	; (8009cd4 <ProcessRadioRxDone+0xa64>)
 8009c30:	5c99      	ldrb	r1, [r3, r2]
 8009c32:	2002      	movs	r0, #2
 8009c34:	4301      	orrs	r1, r0
 8009c36:	5499      	strb	r1, [r3, r2]
            break;
 8009c38:	e007      	b.n	8009c4a <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c3a:	4b18      	ldr	r3, [pc, #96]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c3c:	4a18      	ldr	r2, [pc, #96]	; (8009ca0 <ProcessRadioRxDone+0xa30>)
 8009c3e:	2101      	movs	r1, #1
 8009c40:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 8009c42:	f7ff fae7 	bl	8009214 <PrepareRxDoneAbort>
            break;
 8009c46:	e000      	b.n	8009c4a <ProcessRadioRxDone+0x9da>
            break;
 8009c48:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 8009c4a:	4a14      	ldr	r2, [pc, #80]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c4c:	238e      	movs	r3, #142	; 0x8e
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	58d3      	ldr	r3, [r2, r3]
 8009c52:	4a22      	ldr	r2, [pc, #136]	; (8009cdc <ProcessRadioRxDone+0xa6c>)
 8009c54:	5c98      	ldrb	r0, [r3, r2]
 8009c56:	4a11      	ldr	r2, [pc, #68]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c58:	238e      	movs	r3, #142	; 0x8e
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	58d3      	ldr	r3, [r2, r3]
 8009c5e:	22c8      	movs	r2, #200	; 0xc8
 8009c60:	5c99      	ldrb	r1, [r3, r2]
 8009c62:	4a0e      	ldr	r2, [pc, #56]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c64:	2386      	movs	r3, #134	; 0x86
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	5cd3      	ldrb	r3, [r2, r3]
 8009c6a:	001a      	movs	r2, r3
 8009c6c:	f000 fc94 	bl	800a598 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 8009c70:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <ProcessRadioRxDone+0xa70>)
 8009c72:	0018      	movs	r0, r3
 8009c74:	f012 ffcc 	bl	801cc10 <TimerIsStarted>
 8009c78:	0003      	movs	r3, r0
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4053      	eors	r3, r2
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d007      	beq.n	8009c96 <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009c86:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <ProcessRadioRxDone+0xa2c>)
 8009c88:	4a12      	ldr	r2, [pc, #72]	; (8009cd4 <ProcessRadioRxDone+0xa64>)
 8009c8a:	5c99      	ldrb	r1, [r3, r2]
 8009c8c:	2010      	movs	r0, #16
 8009c8e:	4301      	orrs	r1, r0
 8009c90:	5499      	strb	r1, [r3, r2]
 8009c92:	e000      	b.n	8009c96 <ProcessRadioRxDone+0xa26>
                return;
 8009c94:	46c0      	nop			; (mov r8, r8)
    }
}
 8009c96:	46bd      	mov	sp, r7
 8009c98:	b023      	add	sp, #140	; 0x8c
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	200005fc 	.word	0x200005fc
 8009ca0:	00000411 	.word	0x00000411
 8009ca4:	00000412 	.word	0x00000412
 8009ca8:	00000415 	.word	0x00000415
 8009cac:	0000041c 	.word	0x0000041c
 8009cb0:	00000424 	.word	0x00000424
 8009cb4:	00000422 	.word	0x00000422
 8009cb8:	0000042d 	.word	0x0000042d
 8009cbc:	0000021a 	.word	0x0000021a
 8009cc0:	00000222 	.word	0x00000222
 8009cc4:	00000421 	.word	0x00000421
 8009cc8:	0000042c 	.word	0x0000042c
 8009ccc:	00000413 	.word	0x00000413
 8009cd0:	0000041d 	.word	0x0000041d
 8009cd4:	0000046d 	.word	0x0000046d
 8009cd8:	2000083c 	.word	0x2000083c
 8009cdc:	00000219 	.word	0x00000219
 8009ce0:	200009f0 	.word	0x200009f0

08009ce4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009ce8:	4a0e      	ldr	r2, [pc, #56]	; (8009d24 <ProcessRadioTxTimeout+0x40>)
 8009cea:	238e      	movs	r3, #142	; 0x8e
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	58d3      	ldr	r3, [r2, r3]
 8009cf0:	22c8      	movs	r2, #200	; 0xc8
 8009cf2:	5c9b      	ldrb	r3, [r3, r2]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d003      	beq.n	8009d00 <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <ProcessRadioTxTimeout+0x44>)
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	4798      	blx	r3
 8009cfe:	e001      	b.n	8009d04 <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 8009d00:	f001 fd8e 	bl	800b820 <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <ProcessRadioTxTimeout+0x40>)
 8009d06:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <ProcessRadioTxTimeout+0x48>)
 8009d08:	2102      	movs	r1, #2
 8009d0a:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009d0c:	2002      	movs	r0, #2
 8009d0e:	f002 fbc1 	bl	800c494 <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009d12:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <ProcessRadioTxTimeout+0x40>)
 8009d14:	4a06      	ldr	r2, [pc, #24]	; (8009d30 <ProcessRadioTxTimeout+0x4c>)
 8009d16:	5c99      	ldrb	r1, [r3, r2]
 8009d18:	2010      	movs	r0, #16
 8009d1a:	4301      	orrs	r1, r0
 8009d1c:	5499      	strb	r1, [r3, r2]
}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	200005fc 	.word	0x200005fc
 8009d28:	080293d8 	.word	0x080293d8
 8009d2c:	0000042d 	.word	0x0000042d
 8009d30:	0000046d 	.word	0x0000046d

08009d34 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	1dfb      	adds	r3, r7, #7
 8009d3e:	701a      	strb	r2, [r3, #0]
 8009d40:	1dbb      	adds	r3, r7, #6
 8009d42:	1c0a      	adds	r2, r1, #0
 8009d44:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 8009d46:	230f      	movs	r3, #15
 8009d48:	18fb      	adds	r3, r7, r3
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009d4e:	4a55      	ldr	r2, [pc, #340]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009d50:	238e      	movs	r3, #142	; 0x8e
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	58d3      	ldr	r3, [r2, r3]
 8009d56:	22c8      	movs	r2, #200	; 0xc8
 8009d58:	5c9b      	ldrb	r3, [r3, r2]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d002      	beq.n	8009d64 <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 8009d5e:	4b52      	ldr	r3, [pc, #328]	; (8009ea8 <HandleRadioRxErrorTimeout+0x174>)
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d62:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009d64:	f002 f840 	bl	800bde8 <LoRaMacClassBIsBeaconExpected>
 8009d68:	1e03      	subs	r3, r0, #0
 8009d6a:	d009      	beq.n	8009d80 <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009d6c:	2002      	movs	r0, #2
 8009d6e:	f001 fff9 	bl	800bd64 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009d72:	2000      	movs	r0, #0
 8009d74:	f002 f814 	bl	800bda0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009d78:	230f      	movs	r3, #15
 8009d7a:	18fb      	adds	r3, r7, r3
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009d80:	4a48      	ldr	r2, [pc, #288]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009d82:	238e      	movs	r3, #142	; 0x8e
 8009d84:	00db      	lsls	r3, r3, #3
 8009d86:	58d3      	ldr	r3, [r2, r3]
 8009d88:	22c8      	movs	r2, #200	; 0xc8
 8009d8a:	5c9b      	ldrb	r3, [r3, r2]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d11b      	bne.n	8009dc8 <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009d90:	f002 f830 	bl	800bdf4 <LoRaMacClassBIsPingExpected>
 8009d94:	1e03      	subs	r3, r0, #0
 8009d96:	d009      	beq.n	8009dac <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f001 ffed 	bl	800bd78 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f002 f806 	bl	800bdb0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009da4:	230f      	movs	r3, #15
 8009da6:	18fb      	adds	r3, r7, r3
 8009da8:	2201      	movs	r2, #1
 8009daa:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009dac:	f002 f828 	bl	800be00 <LoRaMacClassBIsMulticastExpected>
 8009db0:	1e03      	subs	r3, r0, #0
 8009db2:	d009      	beq.n	8009dc8 <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009db4:	2000      	movs	r0, #0
 8009db6:	f001 ffe9 	bl	800bd8c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009dba:	2000      	movs	r0, #0
 8009dbc:	f002 f800 	bl	800bdc0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8009dc0:	230f      	movs	r3, #15
 8009dc2:	18fb      	adds	r3, r7, r3
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8009dc8:	230f      	movs	r3, #15
 8009dca:	18fb      	adds	r3, r7, r3
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4053      	eors	r3, r2
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d057      	beq.n	8009e88 <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009dd8:	4b32      	ldr	r3, [pc, #200]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009dda:	4a34      	ldr	r2, [pc, #208]	; (8009eac <HandleRadioRxErrorTimeout+0x178>)
 8009ddc:	5c9b      	ldrb	r3, [r3, r2]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d132      	bne.n	8009e48 <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 8009de2:	4a30      	ldr	r2, [pc, #192]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009de4:	238e      	movs	r3, #142	; 0x8e
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	58d3      	ldr	r3, [r2, r3]
 8009dea:	4a31      	ldr	r2, [pc, #196]	; (8009eb0 <HandleRadioRxErrorTimeout+0x17c>)
 8009dec:	5c9b      	ldrb	r3, [r3, r2]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d004      	beq.n	8009dfc <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009df2:	4b2c      	ldr	r3, [pc, #176]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009df4:	1dfa      	adds	r2, r7, #7
 8009df6:	492f      	ldr	r1, [pc, #188]	; (8009eb4 <HandleRadioRxErrorTimeout+0x180>)
 8009df8:	7812      	ldrb	r2, [r2, #0]
 8009dfa:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009dfc:	1dfb      	adds	r3, r7, #7
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	0018      	movs	r0, r3
 8009e02:	f002 fb47 	bl	800c494 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009e06:	4a27      	ldr	r2, [pc, #156]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e08:	238e      	movs	r3, #142	; 0x8e
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	58d3      	ldr	r3, [r2, r3]
 8009e0e:	22c8      	movs	r2, #200	; 0xc8
 8009e10:	5c9b      	ldrb	r3, [r3, r2]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d038      	beq.n	8009e88 <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009e16:	4a23      	ldr	r2, [pc, #140]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e18:	23d0      	movs	r3, #208	; 0xd0
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	58d3      	ldr	r3, [r2, r3]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f012 ff09 	bl	801cc36 <TimerGetElapsedTime>
 8009e24:	0001      	movs	r1, r0
 8009e26:	4a1f      	ldr	r2, [pc, #124]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e28:	23f2      	movs	r3, #242	; 0xf2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	58d3      	ldr	r3, [r2, r3]
 8009e2e:	4299      	cmp	r1, r3
 8009e30:	d32a      	bcc.n	8009e88 <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 8009e32:	4b21      	ldr	r3, [pc, #132]	; (8009eb8 <HandleRadioRxErrorTimeout+0x184>)
 8009e34:	0018      	movs	r0, r3
 8009e36:	f012 febb 	bl	801cbb0 <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 8009e3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e3c:	4a1f      	ldr	r2, [pc, #124]	; (8009ebc <HandleRadioRxErrorTimeout+0x188>)
 8009e3e:	5c99      	ldrb	r1, [r3, r2]
 8009e40:	2010      	movs	r0, #16
 8009e42:	4301      	orrs	r1, r0
 8009e44:	5499      	strb	r1, [r3, r2]
 8009e46:	e01f      	b.n	8009e88 <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 8009e48:	4a16      	ldr	r2, [pc, #88]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e4a:	238e      	movs	r3, #142	; 0x8e
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	58d3      	ldr	r3, [r2, r3]
 8009e50:	4a17      	ldr	r2, [pc, #92]	; (8009eb0 <HandleRadioRxErrorTimeout+0x17c>)
 8009e52:	5c9b      	ldrb	r3, [r3, r2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e5a:	1dba      	adds	r2, r7, #6
 8009e5c:	4915      	ldr	r1, [pc, #84]	; (8009eb4 <HandleRadioRxErrorTimeout+0x180>)
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009e62:	1dbb      	adds	r3, r7, #6
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	0018      	movs	r0, r3
 8009e68:	f002 fb14 	bl	800c494 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009e6c:	4a0d      	ldr	r2, [pc, #52]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e6e:	238e      	movs	r3, #142	; 0x8e
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	58d3      	ldr	r3, [r2, r3]
 8009e74:	22c8      	movs	r2, #200	; 0xc8
 8009e76:	5c9b      	ldrb	r3, [r3, r2]
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d005      	beq.n	8009e88 <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e7e:	4a0f      	ldr	r2, [pc, #60]	; (8009ebc <HandleRadioRxErrorTimeout+0x188>)
 8009e80:	5c99      	ldrb	r1, [r3, r2]
 8009e82:	2010      	movs	r0, #16
 8009e84:	4301      	orrs	r1, r0
 8009e86:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009e88:	4a06      	ldr	r2, [pc, #24]	; (8009ea4 <HandleRadioRxErrorTimeout+0x170>)
 8009e8a:	238e      	movs	r3, #142	; 0x8e
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	58d3      	ldr	r3, [r2, r3]
 8009e90:	22c8      	movs	r2, #200	; 0xc8
 8009e92:	5c9b      	ldrb	r3, [r3, r2]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d101      	bne.n	8009e9c <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 8009e98:	f001 fcc2 	bl	800b820 <OpenContinuousRx2Window>
    }
}
 8009e9c:	46c0      	nop			; (mov r8, r8)
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	b004      	add	sp, #16
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200005fc 	.word	0x200005fc
 8009ea8:	080293d8 	.word	0x080293d8
 8009eac:	0000046c 	.word	0x0000046c
 8009eb0:	00000219 	.word	0x00000219
 8009eb4:	0000042d 	.word	0x0000042d
 8009eb8:	200009a8 	.word	0x200009a8
 8009ebc:	0000046d 	.word	0x0000046d

08009ec0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009ec4:	2106      	movs	r1, #6
 8009ec6:	2005      	movs	r0, #5
 8009ec8:	f7ff ff34 	bl	8009d34 <HandleRadioRxErrorTimeout>
}
 8009ecc:	46c0      	nop			; (mov r8, r8)
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009ed6:	2104      	movs	r1, #4
 8009ed8:	2003      	movs	r0, #3
 8009eda:	f7ff ff2b 	bl	8009d34 <HandleRadioRxErrorTimeout>
}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8009eea:	f01b f8c7 	bl	802507c <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 8009eee:	4b1e      	ldr	r3, [pc, #120]	; (8009f68 <LoRaMacHandleIrqEvents+0x84>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 8009ef4:	4b1c      	ldr	r3, [pc, #112]	; (8009f68 <LoRaMacHandleIrqEvents+0x84>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 8009efa:	f01b f8d3 	bl	80250a4 <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02c      	beq.n	8009f5e <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 8009f04:	1d3b      	adds	r3, r7, #4
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2210      	movs	r2, #16
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 8009f12:	f7ff f8af 	bl	8009074 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 8009f24:	f7ff f9a4 	bl	8009270 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8009f28:	1d3b      	adds	r3, r7, #4
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	4013      	ands	r3, r2
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 8009f36:	f7ff fed5 	bl	8009ce4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8009f3a:	1d3b      	adds	r3, r7, #4
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	4013      	ands	r3, r2
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 8009f48:	f7ff ffba 	bl	8009ec0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8009f4c:	1d3b      	adds	r3, r7, #4
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2201      	movs	r2, #1
 8009f52:	4013      	ands	r3, r2
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 8009f5a:	f7ff ffba 	bl	8009ed2 <ProcessRadioRxTimeout>
        }
    }
}
 8009f5e:	46c0      	nop			; (mov r8, r8)
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b002      	add	sp, #8
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	20000a70 	.word	0x20000a70

08009f6c <LoRaMacEnableRequests>:
    return LORAMAC_TRUE;
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	0002      	movs	r2, r0
 8009f74:	1dfb      	adds	r3, r7, #7
 8009f76:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 8009f78:	4b04      	ldr	r3, [pc, #16]	; (8009f8c <LoRaMacEnableRequests+0x20>)
 8009f7a:	1dfa      	adds	r2, r7, #7
 8009f7c:	4904      	ldr	r1, [pc, #16]	; (8009f90 <LoRaMacEnableRequests+0x24>)
 8009f7e:	7812      	ldrb	r2, [r2, #0]
 8009f80:	545a      	strb	r2, [r3, r1]
}
 8009f82:	46c0      	nop			; (mov r8, r8)
 8009f84:	46bd      	mov	sp, r7
 8009f86:	b002      	add	sp, #8
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	200005fc 	.word	0x200005fc
 8009f90:	0000046e 	.word	0x0000046e

08009f94 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8009f9a:	1d3b      	adds	r3, r7, #4
 8009f9c:	4a2c      	ldr	r2, [pc, #176]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009f9e:	492d      	ldr	r1, [pc, #180]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 8009fa0:	5c52      	ldrb	r2, [r2, r1]
 8009fa2:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8009fa4:	4a2a      	ldr	r2, [pc, #168]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009fa6:	23d5      	movs	r3, #213	; 0xd5
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	58d3      	ldr	r3, [r2, r3]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d14a      	bne.n	800a046 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009fb0:	4b27      	ldr	r3, [pc, #156]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009fb2:	4a28      	ldr	r2, [pc, #160]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 8009fb4:	5c9b      	ldrb	r3, [r3, r2]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4013      	ands	r3, r2
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009fc0:	4b23      	ldr	r3, [pc, #140]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009fc2:	4a24      	ldr	r2, [pc, #144]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 8009fc4:	5c99      	ldrb	r1, [r3, r2]
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	4381      	bics	r1, r0
 8009fca:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009fcc:	4b20      	ldr	r3, [pc, #128]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009fce:	4a21      	ldr	r2, [pc, #132]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 8009fd0:	5c9b      	ldrb	r3, [r3, r2]
 8009fd2:	2204      	movs	r2, #4
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009fdc:	4b1c      	ldr	r3, [pc, #112]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009fde:	4a1d      	ldr	r2, [pc, #116]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 8009fe0:	5c99      	ldrb	r1, [r3, r2]
 8009fe2:	2004      	movs	r0, #4
 8009fe4:	4381      	bics	r1, r0
 8009fe6:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009fe8:	2001      	movs	r0, #1
 8009fea:	f7ff ffbf 	bl	8009f6c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8009fee:	1d3b      	adds	r3, r7, #4
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009ffc:	4a14      	ldr	r2, [pc, #80]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 8009ffe:	23d6      	movs	r3, #214	; 0xd6
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	58d3      	ldr	r3, [r2, r3]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a14      	ldr	r2, [pc, #80]	; (800a058 <LoRaMacHandleRequestEvents+0xc4>)
 800a008:	0010      	movs	r0, r2
 800a00a:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800a00c:	1d3b      	adds	r3, r7, #4
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2204      	movs	r2, #4
 800a012:	4013      	ands	r3, r2
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00d      	beq.n	800a036 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a01a:	4b10      	ldr	r3, [pc, #64]	; (800a05c <LoRaMacHandleRequestEvents+0xc8>)
 800a01c:	0018      	movs	r0, r3
 800a01e:	f002 fa8f 	bl	800c540 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a022:	f002 faef 	bl	800c604 <LoRaMacConfirmQueueGetCnt>
 800a026:	1e03      	subs	r3, r0, #0
 800a028:	d005      	beq.n	800a036 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a02a:	4b09      	ldr	r3, [pc, #36]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 800a02c:	4a09      	ldr	r2, [pc, #36]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 800a02e:	5c99      	ldrb	r1, [r3, r2]
 800a030:	2004      	movs	r0, #4
 800a032:	4301      	orrs	r1, r0
 800a034:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800a036:	f001 fef4 	bl	800be22 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a03a:	4b05      	ldr	r3, [pc, #20]	; (800a050 <LoRaMacHandleRequestEvents+0xbc>)
 800a03c:	4a05      	ldr	r2, [pc, #20]	; (800a054 <LoRaMacHandleRequestEvents+0xc0>)
 800a03e:	5c99      	ldrb	r1, [r3, r2]
 800a040:	2010      	movs	r0, #16
 800a042:	4381      	bics	r1, r0
 800a044:	5499      	strb	r1, [r3, r2]
    }
}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	46bd      	mov	sp, r7
 800a04a:	b002      	add	sp, #8
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	200005fc 	.word	0x200005fc
 800a054:	0000046d 	.word	0x0000046d
 800a058:	20000a28 	.word	0x20000a28
 800a05c:	20000a3c 	.word	0x20000a3c

0800a060 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a066:	4b2d      	ldr	r3, [pc, #180]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a068:	4a2d      	ldr	r2, [pc, #180]	; (800a120 <LoRaMacHandleIndicationEvents+0xc0>)
 800a06a:	5c9b      	ldrb	r3, [r3, r2]
 800a06c:	2208      	movs	r2, #8
 800a06e:	4013      	ands	r3, r2
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00d      	beq.n	800a092 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a076:	4a29      	ldr	r2, [pc, #164]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a078:	23d6      	movs	r3, #214	; 0xd6
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	58d3      	ldr	r3, [r2, r3]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	4a28      	ldr	r2, [pc, #160]	; (800a124 <LoRaMacHandleIndicationEvents+0xc4>)
 800a082:	0010      	movs	r0, r2
 800a084:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a086:	4b25      	ldr	r3, [pc, #148]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a088:	4a25      	ldr	r2, [pc, #148]	; (800a120 <LoRaMacHandleIndicationEvents+0xc0>)
 800a08a:	5c99      	ldrb	r1, [r3, r2]
 800a08c:	2008      	movs	r0, #8
 800a08e:	4381      	bics	r1, r0
 800a090:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a092:	4a22      	ldr	r2, [pc, #136]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a094:	23d5      	movs	r3, #213	; 0xd5
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	58d3      	ldr	r3, [r2, r3]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d114      	bne.n	800a0c8 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800a09e:	1dfb      	adds	r3, r7, #7
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a0a4:	1dfb      	adds	r3, r7, #7
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	f002 f8ee 	bl	800c288 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a0ac:	1dfb      	adds	r3, r7, #7
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d009      	beq.n	800a0c8 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800a0b4:	f000 fb7a 	bl	800a7ac <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a0b8:	4a18      	ldr	r2, [pc, #96]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a0ba:	23d6      	movs	r3, #214	; 0xd6
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	58d3      	ldr	r3, [r2, r3]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	4a18      	ldr	r2, [pc, #96]	; (800a124 <LoRaMacHandleIndicationEvents+0xc4>)
 800a0c4:	0010      	movs	r0, r2
 800a0c6:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a0c8:	4b14      	ldr	r3, [pc, #80]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a0ca:	4a15      	ldr	r2, [pc, #84]	; (800a120 <LoRaMacHandleIndicationEvents+0xc0>)
 800a0cc:	5c9b      	ldrb	r3, [r3, r2]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01d      	beq.n	800a114 <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a0d8:	4b10      	ldr	r3, [pc, #64]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a0da:	4a11      	ldr	r2, [pc, #68]	; (800a120 <LoRaMacHandleIndicationEvents+0xc0>)
 800a0dc:	5c99      	ldrb	r1, [r3, r2]
 800a0de:	2002      	movs	r0, #2
 800a0e0:	4381      	bics	r1, r0
 800a0e2:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a0e6:	238e      	movs	r3, #142	; 0x8e
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	58d3      	ldr	r3, [r2, r3]
 800a0ec:	22c8      	movs	r2, #200	; 0xc8
 800a0ee:	5c9b      	ldrb	r3, [r3, r2]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d107      	bne.n	800a104 <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 800a0f4:	4a09      	ldr	r2, [pc, #36]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a0f6:	23d5      	movs	r3, #213	; 0xd5
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	58d3      	ldr	r3, [r2, r3]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 800a100:	f001 fb8e 	bl	800b820 <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800a104:	4a05      	ldr	r2, [pc, #20]	; (800a11c <LoRaMacHandleIndicationEvents+0xbc>)
 800a106:	23d6      	movs	r3, #214	; 0xd6
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	58d3      	ldr	r3, [r2, r3]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	4a06      	ldr	r2, [pc, #24]	; (800a128 <LoRaMacHandleIndicationEvents+0xc8>)
 800a110:	0010      	movs	r0, r2
 800a112:	4798      	blx	r3
    }
}
 800a114:	46c0      	nop			; (mov r8, r8)
 800a116:	46bd      	mov	sp, r7
 800a118:	b002      	add	sp, #8
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200005fc 	.word	0x200005fc
 800a120:	0000046d 	.word	0x0000046d
 800a124:	20000a50 	.word	0x20000a50
 800a128:	20000a0c 	.word	0x20000a0c

0800a12c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800a12c:	b590      	push	{r4, r7, lr}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a132:	4b36      	ldr	r3, [pc, #216]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a134:	4a36      	ldr	r2, [pc, #216]	; (800a210 <LoRaMacHandleMcpsRequest+0xe4>)
 800a136:	5c9b      	ldrb	r3, [r3, r2]
 800a138:	2201      	movs	r2, #1
 800a13a:	4013      	ands	r3, r2
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d05f      	beq.n	800a202 <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 800a142:	1dfb      	adds	r3, r7, #7
 800a144:	2200      	movs	r2, #0
 800a146:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800a148:	1dbb      	adds	r3, r7, #6
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a14e:	4b2f      	ldr	r3, [pc, #188]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a150:	4a30      	ldr	r2, [pc, #192]	; (800a214 <LoRaMacHandleMcpsRequest+0xe8>)
 800a152:	5c9b      	ldrb	r3, [r3, r2]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d004      	beq.n	800a162 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800a158:	4b2c      	ldr	r3, [pc, #176]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a15a:	4a2e      	ldr	r2, [pc, #184]	; (800a214 <LoRaMacHandleMcpsRequest+0xe8>)
 800a15c:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d105      	bne.n	800a16e <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a162:	1dfc      	adds	r4, r7, #7
 800a164:	f001 fc7e 	bl	800ba64 <CheckRetransUnconfirmedUplink>
 800a168:	0003      	movs	r3, r0
 800a16a:	7023      	strb	r3, [r4, #0]
 800a16c:	e02a      	b.n	800a1c4 <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a16e:	4b27      	ldr	r3, [pc, #156]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a170:	4a28      	ldr	r2, [pc, #160]	; (800a214 <LoRaMacHandleMcpsRequest+0xe8>)
 800a172:	5c9b      	ldrb	r3, [r3, r2]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d125      	bne.n	800a1c4 <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 800a178:	4a24      	ldr	r2, [pc, #144]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a17a:	238e      	movs	r3, #142	; 0x8e
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	58d2      	ldr	r2, [r2, r3]
 800a180:	2386      	movs	r3, #134	; 0x86
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	5cd3      	ldrb	r3, [r2, r3]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d019      	beq.n	800a1be <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a18a:	1dfc      	adds	r4, r7, #7
 800a18c:	f001 fca0 	bl	800bad0 <CheckRetransConfirmedUplink>
 800a190:	0003      	movs	r3, r0
 800a192:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a194:	4a1d      	ldr	r2, [pc, #116]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a196:	238e      	movs	r3, #142	; 0x8e
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	58d3      	ldr	r3, [r2, r3]
 800a19c:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <LoRaMacHandleMcpsRequest+0xec>)
 800a19e:	5c9b      	ldrb	r3, [r3, r2]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10f      	bne.n	800a1c4 <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 800a1a4:	1dfb      	adds	r3, r7, #7
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	4053      	eors	r3, r2
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 800a1b2:	f001 fd17 	bl	800bbe4 <AckTimeoutRetriesProcess>
 800a1b6:	e005      	b.n	800a1c4 <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800a1b8:	f001 fd78 	bl	800bcac <AckTimeoutRetriesFinalize>
 800a1bc:	e002      	b.n	800a1c4 <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800a1be:	1dbb      	adds	r3, r7, #6
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800a1c4:	1dfb      	adds	r3, r7, #7
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 800a1cc:	f001 fcae 	bl	800bb2c <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800a1d0:	e017      	b.n	800a202 <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 800a1d2:	1dbb      	adds	r3, r7, #6
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4053      	eors	r3, r2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d010      	beq.n	800a202 <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a1e2:	4a0b      	ldr	r2, [pc, #44]	; (800a210 <LoRaMacHandleMcpsRequest+0xe4>)
 800a1e4:	5c99      	ldrb	r1, [r3, r2]
 800a1e6:	2010      	movs	r0, #16
 800a1e8:	4381      	bics	r1, r0
 800a1ea:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 800a1ec:	4a07      	ldr	r2, [pc, #28]	; (800a20c <LoRaMacHandleMcpsRequest+0xe0>)
 800a1ee:	238e      	movs	r3, #142	; 0x8e
 800a1f0:	00db      	lsls	r3, r3, #3
 800a1f2:	58d2      	ldr	r2, [r2, r3]
 800a1f4:	2386      	movs	r3, #134	; 0x86
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	f000 f90b 	bl	800a418 <OnTxDelayedTimerEvent>
}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	46bd      	mov	sp, r7
 800a206:	b003      	add	sp, #12
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	200005fc 	.word	0x200005fc
 800a210:	0000046d 	.word	0x0000046d
 800a214:	0000042c 	.word	0x0000042c
 800a218:	00000222 	.word	0x00000222

0800a21c <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800a220:	4b14      	ldr	r3, [pc, #80]	; (800a274 <LoRaMacHandleJoinRequest+0x58>)
 800a222:	4a15      	ldr	r2, [pc, #84]	; (800a278 <LoRaMacHandleJoinRequest+0x5c>)
 800a224:	5c9b      	ldrb	r3, [r3, r2]
 800a226:	2204      	movs	r2, #4
 800a228:	4013      	ands	r3, r2
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01e      	beq.n	800a26e <LoRaMacHandleJoinRequest+0x52>
 800a230:	2000      	movs	r0, #0
 800a232:	f002 f96b 	bl	800c50c <LoRaMacConfirmQueueIsCmdActive>
 800a236:	1e03      	subs	r3, r0, #0
 800a238:	d019      	beq.n	800a26e <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a23a:	2000      	movs	r0, #0
 800a23c:	f002 f904 	bl	800c448 <LoRaMacConfirmQueueGetStatus>
 800a240:	1e03      	subs	r3, r0, #0
 800a242:	d109      	bne.n	800a258 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 800a244:	f003 fef4 	bl	800e030 <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800a248:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <LoRaMacHandleJoinRequest+0x58>)
 800a24a:	238e      	movs	r3, #142	; 0x8e
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	58d2      	ldr	r2, [r2, r3]
 800a250:	2388      	movs	r3, #136	; 0x88
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	2100      	movs	r1, #0
 800a256:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a258:	4a06      	ldr	r2, [pc, #24]	; (800a274 <LoRaMacHandleJoinRequest+0x58>)
 800a25a:	23d5      	movs	r3, #213	; 0xd5
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	58d3      	ldr	r3, [r2, r3]
 800a260:	2202      	movs	r2, #2
 800a262:	4393      	bics	r3, r2
 800a264:	0019      	movs	r1, r3
 800a266:	4a03      	ldr	r2, [pc, #12]	; (800a274 <LoRaMacHandleJoinRequest+0x58>)
 800a268:	23d5      	movs	r3, #213	; 0xd5
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	50d1      	str	r1, [r2, r3]
    }
}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200005fc 	.word	0x200005fc
 800a278:	0000046d 	.word	0x0000046d

0800a27c <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800a280:	f002 f93a 	bl	800c4f8 <LoRaMacConfirmQueueGetStatusCmn>
 800a284:	0003      	movs	r3, r0
 800a286:	2b02      	cmp	r3, #2
 800a288:	d004      	beq.n	800a294 <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800a28a:	4b14      	ldr	r3, [pc, #80]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a28c:	4a14      	ldr	r2, [pc, #80]	; (800a2e0 <LoRaMacCheckForTxTimeout+0x64>)
 800a28e:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800a290:	2b02      	cmp	r3, #2
 800a292:	d11e      	bne.n	800a2d2 <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a294:	4a11      	ldr	r2, [pc, #68]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a296:	23d5      	movs	r3, #213	; 0xd5
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	58d3      	ldr	r3, [r2, r3]
 800a29c:	2202      	movs	r2, #2
 800a29e:	4393      	bics	r3, r2
 800a2a0:	0019      	movs	r1, r3
 800a2a2:	4a0e      	ldr	r2, [pc, #56]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a2a4:	23d5      	movs	r3, #213	; 0xd5
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800a2aa:	4a0c      	ldr	r2, [pc, #48]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a2ac:	238e      	movs	r3, #142	; 0x8e
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	58d3      	ldr	r3, [r2, r3]
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <LoRaMacCheckForTxTimeout+0x68>)
 800a2b4:	5c99      	ldrb	r1, [r3, r2]
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a2b8:	4a0b      	ldr	r2, [pc, #44]	; (800a2e8 <LoRaMacCheckForTxTimeout+0x6c>)
 800a2ba:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800a2bc:	4a07      	ldr	r2, [pc, #28]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a2be:	2386      	movs	r3, #134	; 0x86
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <LoRaMacCheckForTxTimeout+0x60>)
 800a2c8:	4a08      	ldr	r2, [pc, #32]	; (800a2ec <LoRaMacCheckForTxTimeout+0x70>)
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	5099      	str	r1, [r3, r2]
        return 0x01;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	46c0      	nop			; (mov r8, r8)
 800a2dc:	200005fc 	.word	0x200005fc
 800a2e0:	0000042d 	.word	0x0000042d
 800a2e4:	00000217 	.word	0x00000217
 800a2e8:	00000431 	.word	0x00000431
 800a2ec:	00000434 	.word	0x00000434

0800a2f0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a2f4:	200b      	movs	r0, #11
 800a2f6:	f002 f909 	bl	800c50c <LoRaMacConfirmQueueIsCmdActive>
 800a2fa:	1e03      	subs	r3, r0, #0
 800a2fc:	d01c      	beq.n	800a338 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800a2fe:	4b10      	ldr	r3, [pc, #64]	; (800a340 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a300:	4a10      	ldr	r2, [pc, #64]	; (800a344 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800a302:	5c9b      	ldrb	r3, [r3, r2]
 800a304:	2201      	movs	r2, #1
 800a306:	4013      	ands	r3, r2
 800a308:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d114      	bne.n	800a338 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a30e:	4b0c      	ldr	r3, [pc, #48]	; (800a340 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a310:	4a0c      	ldr	r2, [pc, #48]	; (800a344 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800a312:	5c9b      	ldrb	r3, [r3, r2]
 800a314:	2204      	movs	r2, #4
 800a316:	4013      	ands	r3, r2
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00c      	beq.n	800a338 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a31e:	4a08      	ldr	r2, [pc, #32]	; (800a340 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a320:	23d5      	movs	r3, #213	; 0xd5
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	58d3      	ldr	r3, [r2, r3]
 800a326:	2202      	movs	r2, #2
 800a328:	4393      	bics	r3, r2
 800a32a:	0019      	movs	r1, r3
 800a32c:	4a04      	ldr	r2, [pc, #16]	; (800a340 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a32e:	23d5      	movs	r3, #213	; 0xd5
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	0018      	movs	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	200005fc 	.word	0x200005fc
 800a344:	0000046d 	.word	0x0000046d

0800a348 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a34c:	4a0f      	ldr	r2, [pc, #60]	; (800a38c <LoRaMacCheckForRxAbort+0x44>)
 800a34e:	23d5      	movs	r3, #213	; 0xd5
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	58d3      	ldr	r3, [r2, r3]
 800a354:	2280      	movs	r2, #128	; 0x80
 800a356:	4013      	ands	r3, r2
 800a358:	d015      	beq.n	800a386 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800a35a:	4a0c      	ldr	r2, [pc, #48]	; (800a38c <LoRaMacCheckForRxAbort+0x44>)
 800a35c:	23d5      	movs	r3, #213	; 0xd5
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	58d3      	ldr	r3, [r2, r3]
 800a362:	2280      	movs	r2, #128	; 0x80
 800a364:	4393      	bics	r3, r2
 800a366:	0019      	movs	r1, r3
 800a368:	4a08      	ldr	r2, [pc, #32]	; (800a38c <LoRaMacCheckForRxAbort+0x44>)
 800a36a:	23d5      	movs	r3, #213	; 0xd5
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a370:	4a06      	ldr	r2, [pc, #24]	; (800a38c <LoRaMacCheckForRxAbort+0x44>)
 800a372:	23d5      	movs	r3, #213	; 0xd5
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	58d3      	ldr	r3, [r2, r3]
 800a378:	2202      	movs	r2, #2
 800a37a:	4393      	bics	r3, r2
 800a37c:	0019      	movs	r1, r3
 800a37e:	4a03      	ldr	r2, [pc, #12]	; (800a38c <LoRaMacCheckForRxAbort+0x44>)
 800a380:	23d5      	movs	r3, #213	; 0xd5
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	50d1      	str	r1, [r2, r3]
    }
}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	200005fc 	.word	0x200005fc

0800a390 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800a396:	1dfb      	adds	r3, r7, #7
 800a398:	2200      	movs	r2, #0
 800a39a:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800a39c:	f7ff fda2 	bl	8009ee4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a3a0:	f001 fd7f 	bl	800bea2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <LoRaMacProcess+0x80>)
 800a3a6:	4a1b      	ldr	r2, [pc, #108]	; (800a414 <LoRaMacProcess+0x84>)
 800a3a8:	5c9b      	ldrb	r3, [r3, r2]
 800a3aa:	2210      	movs	r2, #16
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d027      	beq.n	800a404 <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f7ff fdd9 	bl	8009f6c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a3ba:	f7ff ffc5 	bl	800a348 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800a3be:	f001 fcb5 	bl	800bd2c <IsRequestPending>
 800a3c2:	1e03      	subs	r3, r0, #0
 800a3c4:	d011      	beq.n	800a3ea <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800a3c6:	f7ff ff59 	bl	800a27c <LoRaMacCheckForTxTimeout>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	0019      	movs	r1, r3
 800a3ce:	1dfb      	adds	r3, r7, #7
 800a3d0:	1dfa      	adds	r2, r7, #7
 800a3d2:	7812      	ldrb	r2, [r2, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a3d8:	f7ff ff8a 	bl	800a2f0 <LoRaMacCheckForBeaconAcquisition>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	0019      	movs	r1, r3
 800a3e0:	1dfb      	adds	r3, r7, #7
 800a3e2:	1dfa      	adds	r2, r7, #7
 800a3e4:	7812      	ldrb	r2, [r2, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800a3ea:	1dfb      	adds	r3, r7, #7
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d103      	bne.n	800a3fa <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800a3f2:	f7ff ff13 	bl	800a21c <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800a3f6:	f7ff fe99 	bl	800a12c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800a3fa:	f7ff fdcb 	bl	8009f94 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a3fe:	2001      	movs	r0, #1
 800a400:	f7ff fdb4 	bl	8009f6c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800a404:	f7ff fe2c 	bl	800a060 <LoRaMacHandleIndicationEvents>
}
 800a408:	46c0      	nop			; (mov r8, r8)
 800a40a:	46bd      	mov	sp, r7
 800a40c:	b002      	add	sp, #8
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	200005fc 	.word	0x200005fc
 800a414:	0000046d 	.word	0x0000046d

0800a418 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800a420:	4b1b      	ldr	r3, [pc, #108]	; (800a490 <OnTxDelayedTimerEvent+0x78>)
 800a422:	0018      	movs	r0, r3
 800a424:	f012 fbc4 	bl	801cbb0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a428:	4a1a      	ldr	r2, [pc, #104]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a42a:	23d5      	movs	r3, #213	; 0xd5
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	58d3      	ldr	r3, [r2, r3]
 800a430:	2220      	movs	r2, #32
 800a432:	4393      	bics	r3, r2
 800a434:	0019      	movs	r1, r3
 800a436:	4a17      	ldr	r2, [pc, #92]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a438:	23d5      	movs	r3, #213	; 0xd5
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800a43e:	2001      	movs	r0, #1
 800a440:	f000 ff7a 	bl	800b338 <ScheduleTx>
 800a444:	1e03      	subs	r3, r0, #0
 800a446:	d01e      	beq.n	800a486 <OnTxDelayedTimerEvent+0x6e>
 800a448:	2b0b      	cmp	r3, #11
 800a44a:	d01c      	beq.n	800a486 <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a44c:	4a11      	ldr	r2, [pc, #68]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a44e:	238e      	movs	r3, #142	; 0x8e
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	58d3      	ldr	r3, [r2, r3]
 800a454:	22d5      	movs	r2, #213	; 0xd5
 800a456:	569b      	ldrsb	r3, [r3, r2]
 800a458:	b2d9      	uxtb	r1, r3
 800a45a:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a45c:	4a0e      	ldr	r2, [pc, #56]	; (800a498 <OnTxDelayedTimerEvent+0x80>)
 800a45e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800a460:	4a0c      	ldr	r2, [pc, #48]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a462:	238e      	movs	r3, #142	; 0x8e
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	58d3      	ldr	r3, [r2, r3]
 800a468:	4a0c      	ldr	r2, [pc, #48]	; (800a49c <OnTxDelayedTimerEvent+0x84>)
 800a46a:	5c99      	ldrb	r1, [r3, r2]
 800a46c:	4b09      	ldr	r3, [pc, #36]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a46e:	4a0c      	ldr	r2, [pc, #48]	; (800a4a0 <OnTxDelayedTimerEvent+0x88>)
 800a470:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a472:	4b08      	ldr	r3, [pc, #32]	; (800a494 <OnTxDelayedTimerEvent+0x7c>)
 800a474:	4a0b      	ldr	r2, [pc, #44]	; (800a4a4 <OnTxDelayedTimerEvent+0x8c>)
 800a476:	2109      	movs	r1, #9
 800a478:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a47a:	2009      	movs	r0, #9
 800a47c:	f002 f80a 	bl	800c494 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a480:	f001 fb54 	bl	800bb2c <StopRetransmission>
            break;
 800a484:	e000      	b.n	800a488 <OnTxDelayedTimerEvent+0x70>
            break;
 800a486:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800a488:	46c0      	nop			; (mov r8, r8)
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b002      	add	sp, #8
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20000978 	.word	0x20000978
 800a494:	200005fc 	.word	0x200005fc
 800a498:	0000042e 	.word	0x0000042e
 800a49c:	00000217 	.word	0x00000217
 800a4a0:	00000431 	.word	0x00000431
 800a4a4:	0000042d 	.word	0x0000042d

0800a4a8 <OnRxWindow2TimerEvent>:
    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
}

static void OnRxWindow2TimerEvent( void* context )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a4b0:	4b31      	ldr	r3, [pc, #196]	; (800a578 <OnRxWindow2TimerEvent+0xd0>)
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f012 fb7c 	bl	801cbb0 <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800a4b8:	4a30      	ldr	r2, [pc, #192]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4ba:	238e      	movs	r3, #142	; 0x8e
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	58d2      	ldr	r2, [r2, r3]
 800a4c0:	2314      	movs	r3, #20
 800a4c2:	33ff      	adds	r3, #255	; 0xff
 800a4c4:	5cd1      	ldrb	r1, [r2, r3]
 800a4c6:	4a2d      	ldr	r2, [pc, #180]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4c8:	23f8      	movs	r3, #248	; 0xf8
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800a4ce:	4a2b      	ldr	r2, [pc, #172]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4d0:	238e      	movs	r3, #142	; 0x8e
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	58d3      	ldr	r3, [r2, r3]
 800a4d6:	22f8      	movs	r2, #248	; 0xf8
 800a4d8:	5899      	ldr	r1, [r3, r2]
 800a4da:	4a28      	ldr	r2, [pc, #160]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4dc:	23f9      	movs	r3, #249	; 0xf9
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4e2:	4a26      	ldr	r2, [pc, #152]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4e4:	238e      	movs	r3, #142	; 0x8e
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	58d2      	ldr	r2, [r2, r3]
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	33ff      	adds	r3, #255	; 0xff
 800a4ee:	5cd1      	ldrb	r1, [r2, r3]
 800a4f0:	4a22      	ldr	r2, [pc, #136]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4f2:	23fc      	movs	r3, #252	; 0xfc
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a4f8:	4a20      	ldr	r2, [pc, #128]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a4fa:	238e      	movs	r3, #142	; 0x8e
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	58d2      	ldr	r2, [r2, r3]
 800a500:	2316      	movs	r3, #22
 800a502:	33ff      	adds	r3, #255	; 0xff
 800a504:	5cd1      	ldrb	r1, [r2, r3]
 800a506:	4b1d      	ldr	r3, [pc, #116]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a508:	4a1d      	ldr	r2, [pc, #116]	; (800a580 <OnRxWindow2TimerEvent+0xd8>)
 800a50a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a50c:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <OnRxWindow2TimerEvent+0xdc>)
 800a510:	2101      	movs	r1, #1
 800a512:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a514:	4a19      	ldr	r2, [pc, #100]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a516:	238e      	movs	r3, #142	; 0x8e
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	58d3      	ldr	r3, [r2, r3]
 800a51c:	22c8      	movs	r2, #200	; 0xc8
 800a51e:	5c9b      	ldrb	r3, [r3, r2]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d004      	beq.n	800a52e <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800a524:	4b15      	ldr	r3, [pc, #84]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a526:	4a18      	ldr	r2, [pc, #96]	; (800a588 <OnRxWindow2TimerEvent+0xe0>)
 800a528:	2100      	movs	r1, #0
 800a52a:	5499      	strb	r1, [r3, r2]
 800a52c:	e003      	b.n	800a536 <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a530:	4a15      	ldr	r2, [pc, #84]	; (800a588 <OnRxWindow2TimerEvent+0xe0>)
 800a532:	2101      	movs	r1, #1
 800a534:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800a536:	4a11      	ldr	r2, [pc, #68]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a538:	238e      	movs	r3, #142	; 0x8e
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	58d3      	ldr	r3, [r2, r3]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	4a12      	ldr	r2, [pc, #72]	; (800a58c <OnRxWindow2TimerEvent+0xe4>)
 800a542:	4913      	ldr	r1, [pc, #76]	; (800a590 <OnRxWindow2TimerEvent+0xe8>)
 800a544:	0018      	movs	r0, r3
 800a546:	f004 fb53 	bl	800ebf0 <RegionRxConfig>
 800a54a:	1e03      	subs	r3, r0, #0
 800a54c:	d00f      	beq.n	800a56e <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a550:	4a0d      	ldr	r2, [pc, #52]	; (800a588 <OnRxWindow2TimerEvent+0xe0>)
 800a552:	5c98      	ldrb	r0, [r3, r2]
 800a554:	4a09      	ldr	r2, [pc, #36]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a556:	238e      	movs	r3, #142	; 0x8e
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	58d3      	ldr	r3, [r2, r3]
 800a55c:	22e0      	movs	r2, #224	; 0xe0
 800a55e:	589b      	ldr	r3, [r3, r2]
 800a560:	0019      	movs	r1, r3
 800a562:	f000 f889 	bl	800a678 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <OnRxWindow2TimerEvent+0xd4>)
 800a568:	4a0a      	ldr	r2, [pc, #40]	; (800a594 <OnRxWindow2TimerEvent+0xec>)
 800a56a:	2101      	movs	r1, #1
 800a56c:	5499      	strb	r1, [r3, r2]
    }
}
 800a56e:	46c0      	nop			; (mov r8, r8)
 800a570:	46bd      	mov	sp, r7
 800a572:	b002      	add	sp, #8
 800a574:	bd80      	pop	{r7, pc}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	200009a8 	.word	0x200009a8
 800a57c:	200005fc 	.word	0x200005fc
 800a580:	000003f1 	.word	0x000003f1
 800a584:	000003f3 	.word	0x000003f3
 800a588:	000003f2 	.word	0x000003f2
 800a58c:	20000a10 	.word	0x20000a10
 800a590:	200009dc 	.word	0x200009dc
 800a594:	0000046c 	.word	0x0000046c

0800a598 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	0004      	movs	r4, r0
 800a5a0:	0008      	movs	r0, r1
 800a5a2:	0011      	movs	r1, r2
 800a5a4:	1dfb      	adds	r3, r7, #7
 800a5a6:	1c22      	adds	r2, r4, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	1dbb      	adds	r3, r7, #6
 800a5ac:	1c02      	adds	r2, r0, #0
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	1d7b      	adds	r3, r7, #5
 800a5b2:	1c0a      	adds	r2, r1, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800a5b6:	1dfb      	adds	r3, r7, #7
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	4053      	eors	r3, r2
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d007      	beq.n	800a5d4 <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800a5c4:	1dbb      	adds	r3, r7, #6
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d10a      	bne.n	800a5e2 <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f000 f80d 	bl	800a5ec <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800a5d2:	e006      	b.n	800a5e2 <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800a5d4:	1d7b      	adds	r3, r7, #5
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f000 f805 	bl	800a5ec <OnAckTimeoutTimerEvent>
}
 800a5e2:	46c0      	nop			; (mov r8, r8)
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	b003      	add	sp, #12
 800a5e8:	bd90      	pop	{r4, r7, pc}
	...

0800a5ec <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	; (800a668 <OnAckTimeoutTimerEvent+0x7c>)
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f012 fada 	bl	801cbb0 <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800a5fc:	4a1b      	ldr	r2, [pc, #108]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a5fe:	238e      	movs	r3, #142	; 0x8e
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	58d3      	ldr	r3, [r2, r3]
 800a604:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <OnAckTimeoutTimerEvent+0x84>)
 800a606:	5c9b      	ldrb	r3, [r3, r2]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800a60c:	4a17      	ldr	r2, [pc, #92]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a60e:	238e      	movs	r3, #142	; 0x8e
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	58d2      	ldr	r2, [r2, r3]
 800a614:	2386      	movs	r3, #134	; 0x86
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	2101      	movs	r1, #1
 800a61a:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a61c:	4a13      	ldr	r2, [pc, #76]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a61e:	238e      	movs	r3, #142	; 0x8e
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	58d3      	ldr	r3, [r2, r3]
 800a624:	22c8      	movs	r2, #200	; 0xc8
 800a626:	5c9b      	ldrb	r3, [r3, r2]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d105      	bne.n	800a638 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a62c:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a62e:	4a11      	ldr	r2, [pc, #68]	; (800a674 <OnAckTimeoutTimerEvent+0x88>)
 800a630:	5c99      	ldrb	r1, [r3, r2]
 800a632:	2010      	movs	r0, #16
 800a634:	4301      	orrs	r1, r0
 800a636:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a638:	4a0c      	ldr	r2, [pc, #48]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a63a:	23d7      	movs	r3, #215	; 0xd7
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	58d3      	ldr	r3, [r2, r3]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00c      	beq.n	800a65e <OnAckTimeoutTimerEvent+0x72>
 800a644:	4a09      	ldr	r2, [pc, #36]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a646:	23d7      	movs	r3, #215	; 0xd7
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	58d3      	ldr	r3, [r2, r3]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d005      	beq.n	800a65e <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a652:	4a06      	ldr	r2, [pc, #24]	; (800a66c <OnAckTimeoutTimerEvent+0x80>)
 800a654:	23d7      	movs	r3, #215	; 0xd7
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	58d3      	ldr	r3, [r2, r3]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	4798      	blx	r3
    }
}
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	46bd      	mov	sp, r7
 800a662:	b002      	add	sp, #8
 800a664:	bd80      	pop	{r7, pc}
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	200009f0 	.word	0x200009f0
 800a66c:	200005fc 	.word	0x200005fc
 800a670:	00000219 	.word	0x00000219
 800a674:	0000046d 	.word	0x0000046d

0800a678 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	0002      	movs	r2, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	1dfb      	adds	r3, r7, #7
 800a684:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800a686:	1dfb      	adds	r3, r7, #7
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2201      	movs	r2, #1
 800a68c:	4053      	eors	r3, r2
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800a694:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <RxWindowSetup+0x38>)
 800a696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	0010      	movs	r0, r2
 800a69c:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800a69e:	e003      	b.n	800a6a8 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800a6a0:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <RxWindowSetup+0x38>)
 800a6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	4798      	blx	r3
}
 800a6a8:	46c0      	nop			; (mov r8, r8)
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	b002      	add	sp, #8
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	080293d8 	.word	0x080293d8

0800a6b4 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	0002      	movs	r2, r0
 800a6bc:	1dfb      	adds	r3, r7, #7
 800a6be:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a6c0:	4a1a      	ldr	r2, [pc, #104]	; (800a72c <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a6c2:	238e      	movs	r3, #142	; 0x8e
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	58d2      	ldr	r2, [r2, r3]
 800a6c8:	2380      	movs	r3, #128	; 0x80
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	5cd2      	ldrb	r2, [r2, r3]
 800a6ce:	210c      	movs	r1, #12
 800a6d0:	187b      	adds	r3, r7, r1
 800a6d2:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800a6d4:	187b      	adds	r3, r7, r1
 800a6d6:	1dfa      	adds	r2, r7, #7
 800a6d8:	7812      	ldrb	r2, [r2, #0]
 800a6da:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a6dc:	187b      	adds	r3, r7, r1
 800a6de:	220c      	movs	r2, #12
 800a6e0:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a6e2:	4a12      	ldr	r2, [pc, #72]	; (800a72c <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a6e4:	238e      	movs	r3, #142	; 0x8e
 800a6e6:	00db      	lsls	r3, r3, #3
 800a6e8:	58d2      	ldr	r2, [r2, r3]
 800a6ea:	2316      	movs	r3, #22
 800a6ec:	33ff      	adds	r3, #255	; 0xff
 800a6ee:	5cd3      	ldrb	r3, [r2, r3]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d003      	beq.n	800a6fc <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a6f4:	230c      	movs	r3, #12
 800a6f6:	18fb      	adds	r3, r7, r3
 800a6f8:	220d      	movs	r2, #13
 800a6fa:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a6fc:	4a0b      	ldr	r2, [pc, #44]	; (800a72c <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a6fe:	238e      	movs	r3, #142	; 0x8e
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	58d3      	ldr	r3, [r2, r3]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	220c      	movs	r2, #12
 800a708:	18ba      	adds	r2, r7, r2
 800a70a:	0011      	movs	r1, r2
 800a70c:	0018      	movs	r0, r3
 800a70e:	f004 f879 	bl	800e804 <RegionGetPhyParam>
 800a712:	0003      	movs	r3, r0
 800a714:	001a      	movs	r2, r3
 800a716:	2108      	movs	r1, #8
 800a718:	187b      	adds	r3, r7, r1
 800a71a:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800a71c:	187b      	adds	r3, r7, r1
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	b2db      	uxtb	r3, r3
}
 800a722:	0018      	movs	r0, r3
 800a724:	46bd      	mov	sp, r7
 800a726:	b004      	add	sp, #16
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	46c0      	nop			; (mov r8, r8)
 800a72c:	200005fc 	.word	0x200005fc

0800a730 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800a730:	b5b0      	push	{r4, r5, r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	0004      	movs	r4, r0
 800a738:	0008      	movs	r0, r1
 800a73a:	0011      	movs	r1, r2
 800a73c:	1dfb      	adds	r3, r7, #7
 800a73e:	1c22      	adds	r2, r4, #0
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	1dbb      	adds	r3, r7, #6
 800a744:	1c02      	adds	r2, r0, #0
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	1d7b      	adds	r3, r7, #5
 800a74a:	1c0a      	adds	r2, r1, #0
 800a74c:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800a74e:	200e      	movs	r0, #14
 800a750:	0004      	movs	r4, r0
 800a752:	183b      	adds	r3, r7, r0
 800a754:	2200      	movs	r2, #0
 800a756:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800a758:	250c      	movs	r5, #12
 800a75a:	197b      	adds	r3, r7, r5
 800a75c:	2200      	movs	r2, #0
 800a75e:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a760:	1dbb      	adds	r3, r7, #6
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	b25b      	sxtb	r3, r3
 800a766:	0018      	movs	r0, r3
 800a768:	f7ff ffa4 	bl	800a6b4 <GetMaxAppPayloadWithoutFOptsLength>
 800a76c:	0003      	movs	r3, r0
 800a76e:	001a      	movs	r2, r3
 800a770:	0020      	movs	r0, r4
 800a772:	183b      	adds	r3, r7, r0
 800a774:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800a776:	1dfb      	adds	r3, r7, #7
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	b299      	uxth	r1, r3
 800a77c:	1d7b      	adds	r3, r7, #5
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	b29a      	uxth	r2, r3
 800a782:	197b      	adds	r3, r7, r5
 800a784:	188a      	adds	r2, r1, r2
 800a786:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800a788:	197a      	adds	r2, r7, r5
 800a78a:	183b      	adds	r3, r7, r0
 800a78c:	8812      	ldrh	r2, [r2, #0]
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d806      	bhi.n	800a7a2 <ValidatePayloadLength+0x72>
 800a794:	230c      	movs	r3, #12
 800a796:	18fb      	adds	r3, r7, r3
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	2bff      	cmp	r3, #255	; 0xff
 800a79c:	d801      	bhi.n	800a7a2 <ValidatePayloadLength+0x72>
    {
        return true;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <ValidatePayloadLength+0x74>
    }
    return false;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	b004      	add	sp, #16
 800a7aa:	bdb0      	pop	{r4, r5, r7, pc}

0800a7ac <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a7b0:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <SetMlmeScheduleUplinkIndication+0x20>)
 800a7b2:	4a07      	ldr	r2, [pc, #28]	; (800a7d0 <SetMlmeScheduleUplinkIndication+0x24>)
 800a7b4:	2106      	movs	r1, #6
 800a7b6:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <SetMlmeScheduleUplinkIndication+0x20>)
 800a7ba:	4a06      	ldr	r2, [pc, #24]	; (800a7d4 <SetMlmeScheduleUplinkIndication+0x28>)
 800a7bc:	5c99      	ldrb	r1, [r3, r2]
 800a7be:	2008      	movs	r0, #8
 800a7c0:	4301      	orrs	r1, r0
 800a7c2:	5499      	strb	r1, [r3, r2]
}
 800a7c4:	46c0      	nop			; (mov r8, r8)
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	200005fc 	.word	0x200005fc
 800a7d0:	00000454 	.word	0x00000454
 800a7d4:	0000046d 	.word	0x0000046d

0800a7d8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800a7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7da:	b0a5      	sub	sp, #148	; 0x94
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	000c      	movs	r4, r1
 800a7e2:	0010      	movs	r0, r2
 800a7e4:	0019      	movs	r1, r3
 800a7e6:	1cfb      	adds	r3, r7, #3
 800a7e8:	1c22      	adds	r2, r4, #0
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	1cbb      	adds	r3, r7, #2
 800a7ee:	1c02      	adds	r2, r0, #0
 800a7f0:	701a      	strb	r2, [r3, #0]
 800a7f2:	1c7b      	adds	r3, r7, #1
 800a7f4:	1c0a      	adds	r2, r1, #0
 800a7f6:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800a7f8:	236b      	movs	r3, #107	; 0x6b
 800a7fa:	18fb      	adds	r3, r7, r3
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800a800:	2387      	movs	r3, #135	; 0x87
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a808:	2168      	movs	r1, #104	; 0x68
 800a80a:	187b      	adds	r3, r7, r1
 800a80c:	2200      	movs	r2, #0
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	187b      	adds	r3, r7, r1
 800a812:	2200      	movs	r2, #0
 800a814:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800a816:	f000 fd7a 	bl	800b30e <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800a81a:	1cfb      	adds	r3, r7, #3
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	1cfa      	adds	r2, r7, #3
 800a820:	1c59      	adds	r1, r3, #1
 800a822:	7011      	strb	r1, [r2, #0]
 800a824:	001a      	movs	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	189b      	adds	r3, r3, r2
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b13      	cmp	r3, #19
 800a82e:	d901      	bls.n	800a834 <ProcessMacCommands+0x5c>
 800a830:	f000 fd76 	bl	800b320 <ProcessMacCommands+0xb48>
 800a834:	009a      	lsls	r2, r3, #2
 800a836:	4be3      	ldr	r3, [pc, #908]	; (800abc4 <ProcessMacCommands+0x3ec>)
 800a838:	18d3      	adds	r3, r2, r3
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800a83e:	2003      	movs	r0, #3
 800a840:	f001 fe64 	bl	800c50c <LoRaMacConfirmQueueIsCmdActive>
 800a844:	1e03      	subs	r3, r0, #0
 800a846:	d01c      	beq.n	800a882 <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a848:	2103      	movs	r1, #3
 800a84a:	2000      	movs	r0, #0
 800a84c:	f001 fdd0 	bl	800c3f0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a850:	1cfb      	adds	r3, r7, #3
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	1cfa      	adds	r2, r7, #3
 800a856:	1c59      	adds	r1, r3, #1
 800a858:	7011      	strb	r1, [r2, #0]
 800a85a:	001a      	movs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	189b      	adds	r3, r3, r2
 800a860:	7819      	ldrb	r1, [r3, #0]
 800a862:	4ad9      	ldr	r2, [pc, #868]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a864:	2389      	movs	r3, #137	; 0x89
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a86a:	1cfb      	adds	r3, r7, #3
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	1cfa      	adds	r2, r7, #3
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	7011      	strb	r1, [r2, #0]
 800a874:	001a      	movs	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	189b      	adds	r3, r3, r2
 800a87a:	7819      	ldrb	r1, [r3, #0]
 800a87c:	4bd2      	ldr	r3, [pc, #840]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a87e:	4ad3      	ldr	r2, [pc, #844]	; (800abcc <ProcessMacCommands+0x3f4>)
 800a880:	5499      	strb	r1, [r3, r2]
 800a882:	2287      	movs	r2, #135	; 0x87
 800a884:	18bb      	adds	r3, r7, r2
 800a886:	18ba      	adds	r2, r7, r2
 800a888:	7812      	ldrb	r2, [r2, #0]
 800a88a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800a88c:	f000 fd3f 	bl	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800a890:	2357      	movs	r3, #87	; 0x57
 800a892:	18fb      	adds	r3, r7, r3
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800a898:	2356      	movs	r3, #86	; 0x56
 800a89a:	18fb      	adds	r3, r7, r3
 800a89c:	2200      	movs	r2, #0
 800a89e:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800a8a0:	2355      	movs	r3, #85	; 0x55
 800a8a2:	18fb      	adds	r3, r7, r3
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800a8a8:	2354      	movs	r3, #84	; 0x54
 800a8aa:	18fb      	adds	r3, r7, r3
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800a8b0:	2387      	movs	r3, #135	; 0x87
 800a8b2:	18fb      	adds	r3, r7, r3
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4053      	eors	r3, r2
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d100      	bne.n	800a8c2 <ProcessMacCommands+0xea>
 800a8c0:	e0ae      	b.n	800aa20 <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800a8c2:	2387      	movs	r3, #135	; 0x87
 800a8c4:	18fb      	adds	r3, r7, r3
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a8ca:	1cfb      	adds	r3, r7, #3
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	18d2      	adds	r2, r2, r3
 800a8d4:	2158      	movs	r1, #88	; 0x58
 800a8d6:	187b      	adds	r3, r7, r1
 800a8d8:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a8da:	1cba      	adds	r2, r7, #2
 800a8dc:	1cfb      	adds	r3, r7, #3
 800a8de:	7812      	ldrb	r2, [r2, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	187b      	adds	r3, r7, r1
 800a8ec:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a8ee:	4ab6      	ldr	r2, [pc, #728]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a8f0:	238e      	movs	r3, #142	; 0x8e
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	58d3      	ldr	r3, [r2, r3]
 800a8f6:	22ca      	movs	r2, #202	; 0xca
 800a8f8:	5c9a      	ldrb	r2, [r3, r2]
 800a8fa:	187b      	adds	r3, r7, r1
 800a8fc:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a8fe:	4ab2      	ldr	r2, [pc, #712]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a900:	238e      	movs	r3, #142	; 0x8e
 800a902:	00db      	lsls	r3, r3, #3
 800a904:	58d2      	ldr	r2, [r2, r3]
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	5cd2      	ldrb	r2, [r2, r3]
 800a90c:	187b      	adds	r3, r7, r1
 800a90e:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a910:	4aad      	ldr	r2, [pc, #692]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a912:	238e      	movs	r3, #142	; 0x8e
 800a914:	00db      	lsls	r3, r3, #3
 800a916:	58d3      	ldr	r3, [r2, r3]
 800a918:	22d5      	movs	r2, #213	; 0xd5
 800a91a:	569a      	ldrsb	r2, [r3, r2]
 800a91c:	187b      	adds	r3, r7, r1
 800a91e:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a920:	4aa9      	ldr	r2, [pc, #676]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a922:	238e      	movs	r3, #142	; 0x8e
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	58d3      	ldr	r3, [r2, r3]
 800a928:	22d4      	movs	r2, #212	; 0xd4
 800a92a:	569a      	ldrsb	r2, [r3, r2]
 800a92c:	187b      	adds	r3, r7, r1
 800a92e:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a930:	4aa5      	ldr	r2, [pc, #660]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a932:	238e      	movs	r3, #142	; 0x8e
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	58d3      	ldr	r3, [r2, r3]
 800a938:	22f4      	movs	r2, #244	; 0xf4
 800a93a:	5c9a      	ldrb	r2, [r3, r2]
 800a93c:	000d      	movs	r5, r1
 800a93e:	197b      	adds	r3, r7, r5
 800a940:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a942:	4aa1      	ldr	r2, [pc, #644]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a944:	238e      	movs	r3, #142	; 0x8e
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	58d1      	ldr	r1, [r2, r3]
 800a94a:	197b      	adds	r3, r7, r5
 800a94c:	2288      	movs	r2, #136	; 0x88
 800a94e:	0092      	lsls	r2, r2, #2
 800a950:	588a      	ldr	r2, [r1, r2]
 800a952:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a954:	4a9c      	ldr	r2, [pc, #624]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a956:	238e      	movs	r3, #142	; 0x8e
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	58d3      	ldr	r3, [r2, r3]
 800a95c:	7818      	ldrb	r0, [r3, #0]
 800a95e:	2356      	movs	r3, #86	; 0x56
 800a960:	18fc      	adds	r4, r7, r3
 800a962:	2357      	movs	r3, #87	; 0x57
 800a964:	18fa      	adds	r2, r7, r3
 800a966:	1979      	adds	r1, r7, r5
 800a968:	2354      	movs	r3, #84	; 0x54
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	2355      	movs	r3, #85	; 0x55
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	0023      	movs	r3, r4
 800a976:	f004 fa0f 	bl	800ed98 <RegionLinkAdrReq>
 800a97a:	0003      	movs	r3, r0
 800a97c:	001a      	movs	r2, r3
 800a97e:	216b      	movs	r1, #107	; 0x6b
 800a980:	187b      	adds	r3, r7, r1
 800a982:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800a984:	187b      	adds	r3, r7, r1
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	001a      	movs	r2, r3
 800a98a:	2307      	movs	r3, #7
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b07      	cmp	r3, #7
 800a990:	d11c      	bne.n	800a9cc <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800a992:	4a8d      	ldr	r2, [pc, #564]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a994:	238e      	movs	r3, #142	; 0x8e
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	58d3      	ldr	r3, [r2, r3]
 800a99a:	2257      	movs	r2, #87	; 0x57
 800a99c:	18ba      	adds	r2, r7, r2
 800a99e:	2100      	movs	r1, #0
 800a9a0:	5651      	ldrsb	r1, [r2, r1]
 800a9a2:	22d5      	movs	r2, #213	; 0xd5
 800a9a4:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800a9a6:	4a88      	ldr	r2, [pc, #544]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a9a8:	238e      	movs	r3, #142	; 0x8e
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	58d3      	ldr	r3, [r2, r3]
 800a9ae:	2256      	movs	r2, #86	; 0x56
 800a9b0:	18ba      	adds	r2, r7, r2
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	5651      	ldrsb	r1, [r2, r1]
 800a9b6:	22d4      	movs	r2, #212	; 0xd4
 800a9b8:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a9ba:	4a83      	ldr	r2, [pc, #524]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800a9bc:	238e      	movs	r3, #142	; 0x8e
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	58d3      	ldr	r3, [r2, r3]
 800a9c2:	2255      	movs	r2, #85	; 0x55
 800a9c4:	18ba      	adds	r2, r7, r2
 800a9c6:	7811      	ldrb	r1, [r2, #0]
 800a9c8:	22f4      	movs	r2, #244	; 0xf4
 800a9ca:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a9cc:	2386      	movs	r3, #134	; 0x86
 800a9ce:	18fb      	adds	r3, r7, r3
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	e00c      	b.n	800a9f0 <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a9d6:	236b      	movs	r3, #107	; 0x6b
 800a9d8:	18fb      	adds	r3, r7, r3
 800a9da:	2201      	movs	r2, #1
 800a9dc:	0019      	movs	r1, r3
 800a9de:	2003      	movs	r0, #3
 800a9e0:	f001 fb76 	bl	800c0d0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a9e4:	2186      	movs	r1, #134	; 0x86
 800a9e6:	187b      	adds	r3, r7, r1
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	187b      	adds	r3, r7, r1
 800a9ec:	3201      	adds	r2, #1
 800a9ee:	701a      	strb	r2, [r3, #0]
 800a9f0:	2354      	movs	r3, #84	; 0x54
 800a9f2:	18fb      	adds	r3, r7, r3
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2105      	movs	r1, #5
 800a9f8:	0018      	movs	r0, r3
 800a9fa:	f7f5 fb8d 	bl	8000118 <__udivsi3>
 800a9fe:	0003      	movs	r3, r0
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2286      	movs	r2, #134	; 0x86
 800aa04:	18ba      	adds	r2, r7, r2
 800aa06:	7812      	ldrb	r2, [r2, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d3e4      	bcc.n	800a9d6 <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800aa0c:	2354      	movs	r3, #84	; 0x54
 800aa0e:	18fb      	adds	r3, r7, r3
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	1cfb      	adds	r3, r7, #3
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	18d3      	adds	r3, r2, r3
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	1cfb      	adds	r3, r7, #3
 800aa1c:	3a01      	subs	r2, #1
 800aa1e:	701a      	strb	r2, [r3, #0]
                }
                break;
 800aa20:	46c0      	nop			; (mov r8, r8)
 800aa22:	f000 fc74 	bl	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800aa26:	1cfb      	adds	r3, r7, #3
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	1cfa      	adds	r2, r7, #3
 800aa2c:	1c59      	adds	r1, r3, #1
 800aa2e:	7011      	strb	r1, [r2, #0]
 800aa30:	001a      	movs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	189b      	adds	r3, r3, r2
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	4963      	ldr	r1, [pc, #396]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800aa3a:	228e      	movs	r2, #142	; 0x8e
 800aa3c:	00d2      	lsls	r2, r2, #3
 800aa3e:	588a      	ldr	r2, [r1, r2]
 800aa40:	210f      	movs	r1, #15
 800aa42:	400b      	ands	r3, r1
 800aa44:	b2d9      	uxtb	r1, r3
 800aa46:	2312      	movs	r3, #18
 800aa48:	33ff      	adds	r3, #255	; 0xff
 800aa4a:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800aa4c:	4a5e      	ldr	r2, [pc, #376]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800aa4e:	238e      	movs	r3, #142	; 0x8e
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	58d2      	ldr	r2, [r2, r3]
 800aa54:	2312      	movs	r3, #18
 800aa56:	33ff      	adds	r3, #255	; 0xff
 800aa58:	5cd3      	ldrb	r3, [r2, r3]
 800aa5a:	001a      	movs	r2, r3
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	4093      	lsls	r3, r2
 800aa60:	0019      	movs	r1, r3
 800aa62:	4a59      	ldr	r2, [pc, #356]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800aa64:	238e      	movs	r3, #142	; 0x8e
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	58d2      	ldr	r2, [r2, r3]
 800aa6a:	b289      	uxth	r1, r1
 800aa6c:	2387      	movs	r3, #135	; 0x87
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800aa72:	2368      	movs	r3, #104	; 0x68
 800aa74:	18fb      	adds	r3, r7, r3
 800aa76:	2200      	movs	r2, #0
 800aa78:	0019      	movs	r1, r3
 800aa7a:	2004      	movs	r0, #4
 800aa7c:	f001 fb28 	bl	800c0d0 <LoRaMacCommandsAddCmd>
 800aa80:	2287      	movs	r2, #135	; 0x87
 800aa82:	18bb      	adds	r3, r7, r2
 800aa84:	18ba      	adds	r2, r7, r2
 800aa86:	7812      	ldrb	r2, [r2, #0]
 800aa88:	701a      	strb	r2, [r3, #0]
                break;
 800aa8a:	f000 fc40 	bl	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800aa8e:	246b      	movs	r4, #107	; 0x6b
 800aa90:	193b      	adds	r3, r7, r4
 800aa92:	2207      	movs	r2, #7
 800aa94:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800aa96:	1cfb      	adds	r3, r7, #3
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	18d3      	adds	r3, r2, r3
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	091b      	lsrs	r3, r3, #4
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	b25b      	sxtb	r3, r3
 800aaa6:	2207      	movs	r2, #7
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	b25a      	sxtb	r2, r3
 800aaac:	204c      	movs	r0, #76	; 0x4c
 800aaae:	183b      	adds	r3, r7, r0
 800aab0:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800aab2:	1cfb      	adds	r3, r7, #3
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	18d3      	adds	r3, r2, r3
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b25b      	sxtb	r3, r3
 800aabe:	220f      	movs	r2, #15
 800aac0:	4013      	ands	r3, r2
 800aac2:	b25a      	sxtb	r2, r3
 800aac4:	183b      	adds	r3, r7, r0
 800aac6:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800aac8:	1cfb      	adds	r3, r7, #3
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	1cfb      	adds	r3, r7, #3
 800aace:	3201      	adds	r2, #1
 800aad0:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800aad2:	1cfb      	adds	r3, r7, #3
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	1cfa      	adds	r2, r7, #3
 800aad8:	1c59      	adds	r1, r3, #1
 800aada:	7011      	strb	r1, [r2, #0]
 800aadc:	001a      	movs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	189b      	adds	r3, r3, r2
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	001a      	movs	r2, r3
 800aae6:	183b      	adds	r3, r7, r0
 800aae8:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800aaea:	1cfb      	adds	r3, r7, #3
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	1cfa      	adds	r2, r7, #3
 800aaf0:	1c59      	adds	r1, r3, #1
 800aaf2:	7011      	strb	r1, [r2, #0]
 800aaf4:	001a      	movs	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	189b      	adds	r3, r3, r2
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	021a      	lsls	r2, r3, #8
 800aafe:	183b      	adds	r3, r7, r0
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	431a      	orrs	r2, r3
 800ab04:	183b      	adds	r3, r7, r0
 800ab06:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ab08:	1cfb      	adds	r3, r7, #3
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	1cfa      	adds	r2, r7, #3
 800ab0e:	1c59      	adds	r1, r3, #1
 800ab10:	7011      	strb	r1, [r2, #0]
 800ab12:	001a      	movs	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	189b      	adds	r3, r3, r2
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	041a      	lsls	r2, r3, #16
 800ab1c:	0001      	movs	r1, r0
 800ab1e:	187b      	adds	r3, r7, r1
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	187b      	adds	r3, r7, r1
 800ab26:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800ab28:	187b      	adds	r3, r7, r1
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2264      	movs	r2, #100	; 0x64
 800ab2e:	435a      	muls	r2, r3
 800ab30:	187b      	adds	r3, r7, r1
 800ab32:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800ab34:	4a24      	ldr	r2, [pc, #144]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800ab36:	238e      	movs	r3, #142	; 0x8e
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	58d3      	ldr	r3, [r2, r3]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	187a      	adds	r2, r7, r1
 800ab40:	0011      	movs	r1, r2
 800ab42:	0018      	movs	r0, r3
 800ab44:	f004 f9b0 	bl	800eea8 <RegionRxParamSetupReq>
 800ab48:	0003      	movs	r3, r0
 800ab4a:	001a      	movs	r2, r3
 800ab4c:	193b      	adds	r3, r7, r4
 800ab4e:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800ab50:	193b      	adds	r3, r7, r4
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	001a      	movs	r2, r3
 800ab56:	2307      	movs	r3, #7
 800ab58:	4013      	ands	r3, r2
 800ab5a:	2b07      	cmp	r3, #7
 800ab5c:	d11c      	bne.n	800ab98 <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ab5e:	204c      	movs	r0, #76	; 0x4c
 800ab60:	183b      	adds	r3, r7, r0
 800ab62:	2100      	movs	r1, #0
 800ab64:	5659      	ldrsb	r1, [r3, r1]
 800ab66:	4a18      	ldr	r2, [pc, #96]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800ab68:	238e      	movs	r3, #142	; 0x8e
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	58d3      	ldr	r3, [r2, r3]
 800ab6e:	b2c9      	uxtb	r1, r1
 800ab70:	22fc      	movs	r2, #252	; 0xfc
 800ab72:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ab74:	4a14      	ldr	r2, [pc, #80]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800ab76:	238e      	movs	r3, #142	; 0x8e
 800ab78:	00db      	lsls	r3, r3, #3
 800ab7a:	58d2      	ldr	r2, [r2, r3]
 800ab7c:	183b      	adds	r3, r7, r0
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	21f8      	movs	r1, #248	; 0xf8
 800ab82:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ab84:	183b      	adds	r3, r7, r0
 800ab86:	2101      	movs	r1, #1
 800ab88:	5659      	ldrsb	r1, [r3, r1]
 800ab8a:	4a0f      	ldr	r2, [pc, #60]	; (800abc8 <ProcessMacCommands+0x3f0>)
 800ab8c:	238e      	movs	r3, #142	; 0x8e
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	58d3      	ldr	r3, [r2, r3]
 800ab92:	b2c9      	uxtb	r1, r1
 800ab94:	22f5      	movs	r2, #245	; 0xf5
 800ab96:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800ab98:	236b      	movs	r3, #107	; 0x6b
 800ab9a:	18fb      	adds	r3, r7, r3
 800ab9c:	781a      	ldrb	r2, [r3, #0]
 800ab9e:	2168      	movs	r1, #104	; 0x68
 800aba0:	187b      	adds	r3, r7, r1
 800aba2:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800aba4:	187b      	adds	r3, r7, r1
 800aba6:	2201      	movs	r2, #1
 800aba8:	0019      	movs	r1, r3
 800abaa:	2005      	movs	r0, #5
 800abac:	f001 fa90 	bl	800c0d0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800abb0:	f7ff fdfc 	bl	800a7ac <SetMlmeScheduleUplinkIndication>
                break;
 800abb4:	46c0      	nop			; (mov r8, r8)
 800abb6:	2287      	movs	r2, #135	; 0x87
 800abb8:	18bb      	adds	r3, r7, r2
 800abba:	18ba      	adds	r2, r7, r2
 800abbc:	7812      	ldrb	r2, [r2, #0]
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	e3a5      	b.n	800b30e <ProcessMacCommands+0xb36>
 800abc2:	46c0      	nop			; (mov r8, r8)
 800abc4:	08028574 	.word	0x08028574
 800abc8:	200005fc 	.word	0x200005fc
 800abcc:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800abd0:	2385      	movs	r3, #133	; 0x85
 800abd2:	18fb      	adds	r3, r7, r3
 800abd4:	22ff      	movs	r2, #255	; 0xff
 800abd6:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800abd8:	4ac5      	ldr	r2, [pc, #788]	; (800aef0 <ProcessMacCommands+0x718>)
 800abda:	23d7      	movs	r3, #215	; 0xd7
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	58d3      	ldr	r3, [r2, r3]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d010      	beq.n	800ac06 <ProcessMacCommands+0x42e>
 800abe4:	4ac2      	ldr	r2, [pc, #776]	; (800aef0 <ProcessMacCommands+0x718>)
 800abe6:	23d7      	movs	r3, #215	; 0xd7
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	58d3      	ldr	r3, [r2, r3]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d009      	beq.n	800ac06 <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800abf2:	4abf      	ldr	r2, [pc, #764]	; (800aef0 <ProcessMacCommands+0x718>)
 800abf4:	23d7      	movs	r3, #215	; 0xd7
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	58d3      	ldr	r3, [r2, r3]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2285      	movs	r2, #133	; 0x85
 800abfe:	18bc      	adds	r4, r7, r2
 800ac00:	4798      	blx	r3
 800ac02:	0003      	movs	r3, r0
 800ac04:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800ac06:	2168      	movs	r1, #104	; 0x68
 800ac08:	187b      	adds	r3, r7, r1
 800ac0a:	2285      	movs	r2, #133	; 0x85
 800ac0c:	18ba      	adds	r2, r7, r2
 800ac0e:	7812      	ldrb	r2, [r2, #0]
 800ac10:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ac12:	1c7b      	adds	r3, r7, #1
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	223f      	movs	r2, #63	; 0x3f
 800ac18:	4013      	ands	r3, r2
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	187b      	adds	r3, r7, r1
 800ac1e:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ac20:	187b      	adds	r3, r7, r1
 800ac22:	2202      	movs	r2, #2
 800ac24:	0019      	movs	r1, r3
 800ac26:	2006      	movs	r0, #6
 800ac28:	f001 fa52 	bl	800c0d0 <LoRaMacCommandsAddCmd>
 800ac2c:	2287      	movs	r2, #135	; 0x87
 800ac2e:	18bb      	adds	r3, r7, r2
 800ac30:	18ba      	adds	r2, r7, r2
 800ac32:	7812      	ldrb	r2, [r2, #0]
 800ac34:	701a      	strb	r2, [r3, #0]
                break;
 800ac36:	e36a      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800ac38:	246b      	movs	r4, #107	; 0x6b
 800ac3a:	193b      	adds	r3, r7, r4
 800ac3c:	2203      	movs	r2, #3
 800ac3e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800ac40:	1cfb      	adds	r3, r7, #3
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	1cfa      	adds	r2, r7, #3
 800ac46:	1c59      	adds	r1, r3, #1
 800ac48:	7011      	strb	r1, [r2, #0]
 800ac4a:	001a      	movs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	189b      	adds	r3, r3, r2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	b25a      	sxtb	r2, r3
 800ac54:	2544      	movs	r5, #68	; 0x44
 800ac56:	197b      	adds	r3, r7, r5
 800ac58:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800ac5a:	197b      	adds	r3, r7, r5
 800ac5c:	2038      	movs	r0, #56	; 0x38
 800ac5e:	183a      	adds	r2, r7, r0
 800ac60:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ac62:	1cfb      	adds	r3, r7, #3
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	1cfa      	adds	r2, r7, #3
 800ac68:	1c59      	adds	r1, r3, #1
 800ac6a:	7011      	strb	r1, [r2, #0]
 800ac6c:	001a      	movs	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	189b      	adds	r3, r3, r2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	001a      	movs	r2, r3
 800ac76:	183b      	adds	r3, r7, r0
 800ac78:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ac7a:	1cfb      	adds	r3, r7, #3
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	1cfa      	adds	r2, r7, #3
 800ac80:	1c59      	adds	r1, r3, #1
 800ac82:	7011      	strb	r1, [r2, #0]
 800ac84:	001a      	movs	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	189b      	adds	r3, r3, r2
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	021a      	lsls	r2, r3, #8
 800ac8e:	183b      	adds	r3, r7, r0
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	183b      	adds	r3, r7, r0
 800ac96:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ac98:	1cfb      	adds	r3, r7, #3
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	1cfa      	adds	r2, r7, #3
 800ac9e:	1c59      	adds	r1, r3, #1
 800aca0:	7011      	strb	r1, [r2, #0]
 800aca2:	001a      	movs	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	189b      	adds	r3, r3, r2
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	041a      	lsls	r2, r3, #16
 800acac:	183b      	adds	r3, r7, r0
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	431a      	orrs	r2, r3
 800acb2:	183b      	adds	r3, r7, r0
 800acb4:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800acb6:	183b      	adds	r3, r7, r0
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2264      	movs	r2, #100	; 0x64
 800acbc:	435a      	muls	r2, r3
 800acbe:	183b      	adds	r3, r7, r0
 800acc0:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800acc2:	183b      	adds	r3, r7, r0
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800acc8:	1cfb      	adds	r3, r7, #3
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	1cfa      	adds	r2, r7, #3
 800acce:	1c59      	adds	r1, r3, #1
 800acd0:	7011      	strb	r1, [r2, #0]
 800acd2:	001a      	movs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	189b      	adds	r3, r3, r2
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b25a      	sxtb	r2, r3
 800acdc:	183b      	adds	r3, r7, r0
 800acde:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800ace0:	4a83      	ldr	r2, [pc, #524]	; (800aef0 <ProcessMacCommands+0x718>)
 800ace2:	238e      	movs	r3, #142	; 0x8e
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	58d3      	ldr	r3, [r2, r3]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	197a      	adds	r2, r7, r5
 800acec:	0011      	movs	r1, r2
 800acee:	0018      	movs	r0, r3
 800acf0:	f004 f92e 	bl	800ef50 <RegionNewChannelReq>
 800acf4:	0003      	movs	r3, r0
 800acf6:	001a      	movs	r2, r3
 800acf8:	193b      	adds	r3, r7, r4
 800acfa:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800acfc:	193b      	adds	r3, r7, r4
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	2168      	movs	r1, #104	; 0x68
 800ad02:	187b      	adds	r3, r7, r1
 800ad04:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800ad06:	187b      	adds	r3, r7, r1
 800ad08:	2201      	movs	r2, #1
 800ad0a:	0019      	movs	r1, r3
 800ad0c:	2007      	movs	r0, #7
 800ad0e:	f001 f9df 	bl	800c0d0 <LoRaMacCommandsAddCmd>
                break;
 800ad12:	46c0      	nop			; (mov r8, r8)
 800ad14:	2287      	movs	r2, #135	; 0x87
 800ad16:	18bb      	adds	r3, r7, r2
 800ad18:	18ba      	adds	r2, r7, r2
 800ad1a:	7812      	ldrb	r2, [r2, #0]
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	e2f6      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800ad20:	1cfb      	adds	r3, r7, #3
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	1cfa      	adds	r2, r7, #3
 800ad26:	1c59      	adds	r1, r3, #1
 800ad28:	7011      	strb	r1, [r2, #0]
 800ad2a:	001a      	movs	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	189b      	adds	r3, r3, r2
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	2084      	movs	r0, #132	; 0x84
 800ad34:	183b      	adds	r3, r7, r0
 800ad36:	210f      	movs	r1, #15
 800ad38:	400a      	ands	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800ad3c:	183b      	adds	r3, r7, r0
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d105      	bne.n	800ad50 <ProcessMacCommands+0x578>
                {
                    delay++;
 800ad44:	2184      	movs	r1, #132	; 0x84
 800ad46:	187b      	adds	r3, r7, r1
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	187b      	adds	r3, r7, r1
 800ad4c:	3201      	adds	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800ad50:	2384      	movs	r3, #132	; 0x84
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	781a      	ldrb	r2, [r3, #0]
 800ad56:	0013      	movs	r3, r2
 800ad58:	015b      	lsls	r3, r3, #5
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	189b      	adds	r3, r3, r2
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	0019      	movs	r1, r3
 800ad64:	4a62      	ldr	r2, [pc, #392]	; (800aef0 <ProcessMacCommands+0x718>)
 800ad66:	238e      	movs	r3, #142	; 0x8e
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	58d3      	ldr	r3, [r2, r3]
 800ad6c:	22e4      	movs	r2, #228	; 0xe4
 800ad6e:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800ad70:	4a5f      	ldr	r2, [pc, #380]	; (800aef0 <ProcessMacCommands+0x718>)
 800ad72:	238e      	movs	r3, #142	; 0x8e
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	58d3      	ldr	r3, [r2, r3]
 800ad78:	22e4      	movs	r2, #228	; 0xe4
 800ad7a:	589a      	ldr	r2, [r3, r2]
 800ad7c:	495c      	ldr	r1, [pc, #368]	; (800aef0 <ProcessMacCommands+0x718>)
 800ad7e:	238e      	movs	r3, #142	; 0x8e
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	58cb      	ldr	r3, [r1, r3]
 800ad84:	21fa      	movs	r1, #250	; 0xfa
 800ad86:	0089      	lsls	r1, r1, #2
 800ad88:	468c      	mov	ip, r1
 800ad8a:	4462      	add	r2, ip
 800ad8c:	21e8      	movs	r1, #232	; 0xe8
 800ad8e:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800ad90:	2368      	movs	r3, #104	; 0x68
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	2200      	movs	r2, #0
 800ad96:	0019      	movs	r1, r3
 800ad98:	2008      	movs	r0, #8
 800ad9a:	f001 f999 	bl	800c0d0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800ad9e:	f7ff fd05 	bl	800a7ac <SetMlmeScheduleUplinkIndication>
 800ada2:	2287      	movs	r2, #135	; 0x87
 800ada4:	18bb      	adds	r3, r7, r2
 800ada6:	18ba      	adds	r2, r7, r2
 800ada8:	7812      	ldrb	r2, [r2, #0]
 800adaa:	701a      	strb	r2, [r3, #0]
                break;
 800adac:	e2af      	b.n	800b30e <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800adae:	1cfb      	adds	r3, r7, #3
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	1cfa      	adds	r2, r7, #3
 800adb4:	1c59      	adds	r1, r3, #1
 800adb6:	7011      	strb	r1, [r2, #0]
 800adb8:	001a      	movs	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	189a      	adds	r2, r3, r2
 800adbe:	2176      	movs	r1, #118	; 0x76
 800adc0:	187b      	adds	r3, r7, r1
 800adc2:	7812      	ldrb	r2, [r2, #0]
 800adc4:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800adc6:	2034      	movs	r0, #52	; 0x34
 800adc8:	183b      	adds	r3, r7, r0
 800adca:	2200      	movs	r2, #0
 800adcc:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800adce:	183b      	adds	r3, r7, r0
 800add0:	2200      	movs	r2, #0
 800add2:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800add4:	187b      	adds	r3, r7, r1
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2220      	movs	r2, #32
 800adda:	4013      	ands	r3, r2
 800addc:	d003      	beq.n	800ade6 <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800adde:	2334      	movs	r3, #52	; 0x34
 800ade0:	18fb      	adds	r3, r7, r3
 800ade2:	2201      	movs	r2, #1
 800ade4:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800ade6:	2376      	movs	r3, #118	; 0x76
 800ade8:	18fb      	adds	r3, r7, r3
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2210      	movs	r2, #16
 800adee:	4013      	ands	r3, r2
 800adf0:	d003      	beq.n	800adfa <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800adf2:	2334      	movs	r3, #52	; 0x34
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	2201      	movs	r2, #1
 800adf8:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800adfa:	2376      	movs	r3, #118	; 0x76
 800adfc:	18fb      	adds	r3, r7, r3
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	220f      	movs	r2, #15
 800ae02:	4013      	ands	r3, r2
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	2134      	movs	r1, #52	; 0x34
 800ae08:	187b      	adds	r3, r7, r1
 800ae0a:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800ae0c:	4a38      	ldr	r2, [pc, #224]	; (800aef0 <ProcessMacCommands+0x718>)
 800ae0e:	238e      	movs	r3, #142	; 0x8e
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	58d3      	ldr	r3, [r2, r3]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	187a      	adds	r2, r7, r1
 800ae18:	0011      	movs	r1, r2
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f004 f8ec 	bl	800eff8 <RegionTxParamSetupReq>
 800ae20:	0003      	movs	r3, r0
 800ae22:	3301      	adds	r3, #1
 800ae24:	d05c      	beq.n	800aee0 <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800ae26:	4a32      	ldr	r2, [pc, #200]	; (800aef0 <ProcessMacCommands+0x718>)
 800ae28:	238e      	movs	r3, #142	; 0x8e
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	58d2      	ldr	r2, [r2, r3]
 800ae2e:	2034      	movs	r0, #52	; 0x34
 800ae30:	183b      	adds	r3, r7, r0
 800ae32:	7819      	ldrb	r1, [r3, #0]
 800ae34:	2380      	movs	r3, #128	; 0x80
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800ae3a:	4a2d      	ldr	r2, [pc, #180]	; (800aef0 <ProcessMacCommands+0x718>)
 800ae3c:	238e      	movs	r3, #142	; 0x8e
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	58d2      	ldr	r2, [r2, r3]
 800ae42:	183b      	adds	r3, r7, r0
 800ae44:	7859      	ldrb	r1, [r3, #1]
 800ae46:	2302      	movs	r3, #2
 800ae48:	33ff      	adds	r3, #255	; 0xff
 800ae4a:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ae4c:	183b      	adds	r3, r7, r0
 800ae4e:	789b      	ldrb	r3, [r3, #2]
 800ae50:	001a      	movs	r2, r3
 800ae52:	4b28      	ldr	r3, [pc, #160]	; (800aef4 <ProcessMacCommands+0x71c>)
 800ae54:	5c99      	ldrb	r1, [r3, r2]
 800ae56:	4a26      	ldr	r2, [pc, #152]	; (800aef0 <ProcessMacCommands+0x718>)
 800ae58:	238e      	movs	r3, #142	; 0x8e
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	58d4      	ldr	r4, [r2, r3]
 800ae5e:	0008      	movs	r0, r1
 800ae60:	f7f5 ff86 	bl	8000d70 <__aeabi_ui2f>
 800ae64:	1c02      	adds	r2, r0, #0
 800ae66:	2382      	movs	r3, #130	; 0x82
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ae6c:	2130      	movs	r1, #48	; 0x30
 800ae6e:	187b      	adds	r3, r7, r1
 800ae70:	2201      	movs	r2, #1
 800ae72:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ae74:	4a1e      	ldr	r2, [pc, #120]	; (800aef0 <ProcessMacCommands+0x718>)
 800ae76:	238e      	movs	r3, #142	; 0x8e
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	58d2      	ldr	r2, [r2, r3]
 800ae7c:	2380      	movs	r3, #128	; 0x80
 800ae7e:	005b      	lsls	r3, r3, #1
 800ae80:	5cd2      	ldrb	r2, [r2, r3]
 800ae82:	187b      	adds	r3, r7, r1
 800ae84:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ae86:	4a1a      	ldr	r2, [pc, #104]	; (800aef0 <ProcessMacCommands+0x718>)
 800ae88:	238e      	movs	r3, #142	; 0x8e
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	58d3      	ldr	r3, [r2, r3]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	187a      	adds	r2, r7, r1
 800ae92:	0011      	movs	r1, r2
 800ae94:	0018      	movs	r0, r3
 800ae96:	f003 fcb5 	bl	800e804 <RegionGetPhyParam>
 800ae9a:	0003      	movs	r3, r0
 800ae9c:	001a      	movs	r2, r3
 800ae9e:	212c      	movs	r1, #44	; 0x2c
 800aea0:	187b      	adds	r3, r7, r1
 800aea2:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800aea4:	187b      	adds	r3, r7, r1
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	b259      	sxtb	r1, r3
 800aeaa:	4a11      	ldr	r2, [pc, #68]	; (800aef0 <ProcessMacCommands+0x718>)
 800aeac:	238e      	movs	r3, #142	; 0x8e
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	58d3      	ldr	r3, [r2, r3]
 800aeb2:	22d5      	movs	r2, #213	; 0xd5
 800aeb4:	5698      	ldrsb	r0, [r3, r2]
 800aeb6:	4a0e      	ldr	r2, [pc, #56]	; (800aef0 <ProcessMacCommands+0x718>)
 800aeb8:	238e      	movs	r3, #142	; 0x8e
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	58d3      	ldr	r3, [r2, r3]
 800aebe:	1c04      	adds	r4, r0, #0
 800aec0:	1c08      	adds	r0, r1, #0
 800aec2:	b241      	sxtb	r1, r0
 800aec4:	b262      	sxtb	r2, r4
 800aec6:	4291      	cmp	r1, r2
 800aec8:	da00      	bge.n	800aecc <ProcessMacCommands+0x6f4>
 800aeca:	1c20      	adds	r0, r4, #0
 800aecc:	b241      	sxtb	r1, r0
 800aece:	22d5      	movs	r2, #213	; 0xd5
 800aed0:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800aed2:	2368      	movs	r3, #104	; 0x68
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	2200      	movs	r2, #0
 800aed8:	0019      	movs	r1, r3
 800aeda:	2009      	movs	r0, #9
 800aedc:	f001 f8f8 	bl	800c0d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800aee0:	46c0      	nop			; (mov r8, r8)
 800aee2:	2287      	movs	r2, #135	; 0x87
 800aee4:	18bb      	adds	r3, r7, r2
 800aee6:	18ba      	adds	r2, r7, r2
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	e20f      	b.n	800b30e <ProcessMacCommands+0xb36>
 800aeee:	46c0      	nop			; (mov r8, r8)
 800aef0:	200005fc 	.word	0x200005fc
 800aef4:	08028564 	.word	0x08028564
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800aef8:	246b      	movs	r4, #107	; 0x6b
 800aefa:	193b      	adds	r3, r7, r4
 800aefc:	2203      	movs	r2, #3
 800aefe:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800af00:	1cfb      	adds	r3, r7, #3
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	1cfa      	adds	r2, r7, #3
 800af06:	1c59      	adds	r1, r3, #1
 800af08:	7011      	strb	r1, [r2, #0]
 800af0a:	001a      	movs	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	189b      	adds	r3, r3, r2
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	2024      	movs	r0, #36	; 0x24
 800af14:	183b      	adds	r3, r7, r0
 800af16:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800af18:	1cfb      	adds	r3, r7, #3
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	1cfa      	adds	r2, r7, #3
 800af1e:	1c59      	adds	r1, r3, #1
 800af20:	7011      	strb	r1, [r2, #0]
 800af22:	001a      	movs	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	189b      	adds	r3, r3, r2
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	001a      	movs	r2, r3
 800af2c:	183b      	adds	r3, r7, r0
 800af2e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800af30:	1cfb      	adds	r3, r7, #3
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	1cfa      	adds	r2, r7, #3
 800af36:	1c59      	adds	r1, r3, #1
 800af38:	7011      	strb	r1, [r2, #0]
 800af3a:	001a      	movs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	189b      	adds	r3, r3, r2
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	021a      	lsls	r2, r3, #8
 800af44:	183b      	adds	r3, r7, r0
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	431a      	orrs	r2, r3
 800af4a:	183b      	adds	r3, r7, r0
 800af4c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800af4e:	1cfb      	adds	r3, r7, #3
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	1cfa      	adds	r2, r7, #3
 800af54:	1c59      	adds	r1, r3, #1
 800af56:	7011      	strb	r1, [r2, #0]
 800af58:	001a      	movs	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	189b      	adds	r3, r3, r2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	041a      	lsls	r2, r3, #16
 800af62:	0001      	movs	r1, r0
 800af64:	187b      	adds	r3, r7, r1
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	431a      	orrs	r2, r3
 800af6a:	187b      	adds	r3, r7, r1
 800af6c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800af6e:	187b      	adds	r3, r7, r1
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	2264      	movs	r2, #100	; 0x64
 800af74:	435a      	muls	r2, r3
 800af76:	187b      	adds	r3, r7, r1
 800af78:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800af7a:	4aeb      	ldr	r2, [pc, #940]	; (800b328 <ProcessMacCommands+0xb50>)
 800af7c:	238e      	movs	r3, #142	; 0x8e
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	58d3      	ldr	r3, [r2, r3]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	187a      	adds	r2, r7, r1
 800af86:	0011      	movs	r1, r2
 800af88:	0018      	movs	r0, r3
 800af8a:	f004 f889 	bl	800f0a0 <RegionDlChannelReq>
 800af8e:	0003      	movs	r3, r0
 800af90:	001a      	movs	r2, r3
 800af92:	193b      	adds	r3, r7, r4
 800af94:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800af96:	193b      	adds	r3, r7, r4
 800af98:	781a      	ldrb	r2, [r3, #0]
 800af9a:	2168      	movs	r1, #104	; 0x68
 800af9c:	187b      	adds	r3, r7, r1
 800af9e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800afa0:	187b      	adds	r3, r7, r1
 800afa2:	2201      	movs	r2, #1
 800afa4:	0019      	movs	r1, r3
 800afa6:	200a      	movs	r0, #10
 800afa8:	f001 f892 	bl	800c0d0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800afac:	f7ff fbfe 	bl	800a7ac <SetMlmeScheduleUplinkIndication>
                break;
 800afb0:	46c0      	nop			; (mov r8, r8)
 800afb2:	2287      	movs	r2, #135	; 0x87
 800afb4:	18bb      	adds	r3, r7, r2
 800afb6:	18ba      	adds	r2, r7, r2
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	701a      	strb	r2, [r3, #0]
 800afbc:	e1a7      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800afbe:	241c      	movs	r4, #28
 800afc0:	193b      	adds	r3, r7, r4
 800afc2:	0018      	movs	r0, r3
 800afc4:	2308      	movs	r3, #8
 800afc6:	001a      	movs	r2, r3
 800afc8:	2100      	movs	r1, #0
 800afca:	f01a ff9d 	bl	8025f08 <memset>
                SysTime_t sysTime = { 0 };
 800afce:	2514      	movs	r5, #20
 800afd0:	197b      	adds	r3, r7, r5
 800afd2:	0018      	movs	r0, r3
 800afd4:	2308      	movs	r3, #8
 800afd6:	001a      	movs	r2, r3
 800afd8:	2100      	movs	r1, #0
 800afda:	f01a ff95 	bl	8025f08 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800afde:	260c      	movs	r6, #12
 800afe0:	19bb      	adds	r3, r7, r6
 800afe2:	0018      	movs	r0, r3
 800afe4:	2308      	movs	r3, #8
 800afe6:	001a      	movs	r2, r3
 800afe8:	2100      	movs	r1, #0
 800afea:	f01a ff8d 	bl	8025f08 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800afee:	1cfb      	adds	r3, r7, #3
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	1cfa      	adds	r2, r7, #3
 800aff4:	1c59      	adds	r1, r3, #1
 800aff6:	7011      	strb	r1, [r2, #0]
 800aff8:	001a      	movs	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	189b      	adds	r3, r3, r2
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	001a      	movs	r2, r3
 800b002:	0020      	movs	r0, r4
 800b004:	183b      	adds	r3, r7, r0
 800b006:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800b008:	1cfb      	adds	r3, r7, #3
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	1cfa      	adds	r2, r7, #3
 800b00e:	1c59      	adds	r1, r3, #1
 800b010:	7011      	strb	r1, [r2, #0]
 800b012:	001a      	movs	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	189b      	adds	r3, r3, r2
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	021a      	lsls	r2, r3, #8
 800b01c:	183b      	adds	r3, r7, r0
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	431a      	orrs	r2, r3
 800b022:	183b      	adds	r3, r7, r0
 800b024:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800b026:	1cfb      	adds	r3, r7, #3
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	1cfa      	adds	r2, r7, #3
 800b02c:	1c59      	adds	r1, r3, #1
 800b02e:	7011      	strb	r1, [r2, #0]
 800b030:	001a      	movs	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	189b      	adds	r3, r3, r2
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	041a      	lsls	r2, r3, #16
 800b03a:	183b      	adds	r3, r7, r0
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	431a      	orrs	r2, r3
 800b040:	183b      	adds	r3, r7, r0
 800b042:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800b044:	1cfb      	adds	r3, r7, #3
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	1cfa      	adds	r2, r7, #3
 800b04a:	1c59      	adds	r1, r3, #1
 800b04c:	7011      	strb	r1, [r2, #0]
 800b04e:	001a      	movs	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	189b      	adds	r3, r3, r2
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	061a      	lsls	r2, r3, #24
 800b058:	183b      	adds	r3, r7, r0
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	431a      	orrs	r2, r3
 800b05e:	183b      	adds	r3, r7, r0
 800b060:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800b062:	1cfb      	adds	r3, r7, #3
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	1cfa      	adds	r2, r7, #3
 800b068:	1c59      	adds	r1, r3, #1
 800b06a:	7011      	strb	r1, [r2, #0]
 800b06c:	001a      	movs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	189b      	adds	r3, r3, r2
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	b21a      	sxth	r2, r3
 800b076:	183b      	adds	r3, r7, r0
 800b078:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800b07a:	0001      	movs	r1, r0
 800b07c:	183b      	adds	r3, r7, r0
 800b07e:	2204      	movs	r2, #4
 800b080:	5e9b      	ldrsh	r3, [r3, r2]
 800b082:	001a      	movs	r2, r3
 800b084:	0013      	movs	r3, r2
 800b086:	015b      	lsls	r3, r3, #5
 800b088:	1a9b      	subs	r3, r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	189b      	adds	r3, r3, r2
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	121b      	asrs	r3, r3, #8
 800b092:	b21a      	sxth	r2, r3
 800b094:	187b      	adds	r3, r7, r1
 800b096:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800b098:	002c      	movs	r4, r5
 800b09a:	193b      	adds	r3, r7, r4
 800b09c:	187a      	adds	r2, r7, r1
 800b09e:	ca03      	ldmia	r2!, {r0, r1}
 800b0a0:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b0a2:	193b      	adds	r3, r7, r4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4aa1      	ldr	r2, [pc, #644]	; (800b32c <ProcessMacCommands+0xb54>)
 800b0a8:	189a      	adds	r2, r3, r2
 800b0aa:	193b      	adds	r3, r7, r4
 800b0ac:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800b0ae:	19bb      	adds	r3, r7, r6
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f011 fc2b 	bl	801c90c <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800b0b6:	236c      	movs	r3, #108	; 0x6c
 800b0b8:	18fd      	adds	r5, r7, r3
 800b0ba:	499b      	ldr	r1, [pc, #620]	; (800b328 <ProcessMacCommands+0xb50>)
 800b0bc:	23d3      	movs	r3, #211	; 0xd3
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	0026      	movs	r6, r4
 800b0c2:	193a      	adds	r2, r7, r4
 800b0c4:	2404      	movs	r4, #4
 800b0c6:	18c8      	adds	r0, r1, r3
 800b0c8:	1900      	adds	r0, r0, r4
 800b0ca:	466c      	mov	r4, sp
 800b0cc:	6800      	ldr	r0, [r0, #0]
 800b0ce:	6020      	str	r0, [r4, #0]
 800b0d0:	58cb      	ldr	r3, [r1, r3]
 800b0d2:	6811      	ldr	r1, [r2, #0]
 800b0d4:	6852      	ldr	r2, [r2, #4]
 800b0d6:	0028      	movs	r0, r5
 800b0d8:	f011 fb98 	bl	801c80c <SysTimeSub>
 800b0dc:	0034      	movs	r4, r6
 800b0de:	0025      	movs	r5, r4
 800b0e0:	193c      	adds	r4, r7, r4
 800b0e2:	236c      	movs	r3, #108	; 0x6c
 800b0e4:	18fb      	adds	r3, r7, r3
 800b0e6:	260c      	movs	r6, #12
 800b0e8:	19ba      	adds	r2, r7, r6
 800b0ea:	4669      	mov	r1, sp
 800b0ec:	6858      	ldr	r0, [r3, #4]
 800b0ee:	6008      	str	r0, [r1, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6811      	ldr	r1, [r2, #0]
 800b0f4:	6852      	ldr	r2, [r2, #4]
 800b0f6:	0020      	movs	r0, r4
 800b0f8:	f011 fb30 	bl	801c75c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800b0fc:	002c      	movs	r4, r5
 800b0fe:	193b      	adds	r3, r7, r4
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	6859      	ldr	r1, [r3, #4]
 800b104:	f011 fbd6 	bl	801c8b4 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800b108:	f000 feaf 	bl	800be6a <LoRaMacClassBDeviceTimeAns>
                break;
 800b10c:	46c0      	nop			; (mov r8, r8)
 800b10e:	2287      	movs	r2, #135	; 0x87
 800b110:	18bb      	adds	r3, r7, r2
 800b112:	18ba      	adds	r2, r7, r2
 800b114:	7812      	ldrb	r2, [r2, #0]
 800b116:	701a      	strb	r2, [r3, #0]
 800b118:	e0f9      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800b11a:	4b83      	ldr	r3, [pc, #524]	; (800b328 <ProcessMacCommands+0xb50>)
 800b11c:	4a84      	ldr	r2, [pc, #528]	; (800b330 <ProcessMacCommands+0xb58>)
 800b11e:	5c9b      	ldrb	r3, [r3, r2]
 800b120:	2b03      	cmp	r3, #3
 800b122:	d006      	beq.n	800b132 <ProcessMacCommands+0x95a>
 800b124:	4b80      	ldr	r3, [pc, #512]	; (800b328 <ProcessMacCommands+0xb50>)
 800b126:	4a82      	ldr	r2, [pc, #520]	; (800b330 <ProcessMacCommands+0xb58>)
 800b128:	5c9b      	ldrb	r3, [r3, r2]
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	d001      	beq.n	800b132 <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800b12e:	f000 fe7d 	bl	800be2c <LoRaMacClassBPingSlotInfoAns>
 800b132:	2287      	movs	r2, #135	; 0x87
 800b134:	18bb      	adds	r3, r7, r2
 800b136:	18ba      	adds	r2, r7, r2
 800b138:	7812      	ldrb	r2, [r2, #0]
 800b13a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b13c:	e0e7      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800b13e:	207c      	movs	r0, #124	; 0x7c
 800b140:	183b      	adds	r3, r7, r0
 800b142:	2203      	movs	r2, #3
 800b144:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800b14a:	1cfb      	adds	r3, r7, #3
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	1cfa      	adds	r2, r7, #3
 800b150:	1c59      	adds	r1, r3, #1
 800b152:	7011      	strb	r1, [r2, #0]
 800b154:	001a      	movs	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	189b      	adds	r3, r3, r2
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b15e:	1cfb      	adds	r3, r7, #3
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	1cfa      	adds	r2, r7, #3
 800b164:	1c59      	adds	r1, r3, #1
 800b166:	7011      	strb	r1, [r2, #0]
 800b168:	001a      	movs	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	189b      	adds	r3, r3, r2
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	021b      	lsls	r3, r3, #8
 800b172:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b174:	4313      	orrs	r3, r2
 800b176:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b178:	1cfb      	adds	r3, r7, #3
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	1cfa      	adds	r2, r7, #3
 800b17e:	1c59      	adds	r1, r3, #1
 800b180:	7011      	strb	r1, [r2, #0]
 800b182:	001a      	movs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	189b      	adds	r3, r3, r2
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	041b      	lsls	r3, r3, #16
 800b18c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b18e:	4313      	orrs	r3, r2
 800b190:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800b192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b194:	2264      	movs	r2, #100	; 0x64
 800b196:	4353      	muls	r3, r2
 800b198:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800b19a:	1cfb      	adds	r3, r7, #3
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	1cfa      	adds	r2, r7, #3
 800b1a0:	1c59      	adds	r1, r3, #1
 800b1a2:	7011      	strb	r1, [r2, #0]
 800b1a4:	001a      	movs	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	189b      	adds	r3, r3, r2
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	2677      	movs	r6, #119	; 0x77
 800b1ae:	19bb      	adds	r3, r7, r6
 800b1b0:	210f      	movs	r1, #15
 800b1b2:	400a      	ands	r2, r1
 800b1b4:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800b1b6:	0005      	movs	r5, r0
 800b1b8:	183c      	adds	r4, r7, r0
 800b1ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1bc:	19bb      	adds	r3, r7, r6
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	0011      	movs	r1, r2
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	f000 fe37 	bl	800be36 <LoRaMacClassBPingSlotChannelReq>
 800b1c8:	0003      	movs	r3, r0
 800b1ca:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800b1cc:	2168      	movs	r1, #104	; 0x68
 800b1ce:	187b      	adds	r3, r7, r1
 800b1d0:	0028      	movs	r0, r5
 800b1d2:	183a      	adds	r2, r7, r0
 800b1d4:	7812      	ldrb	r2, [r2, #0]
 800b1d6:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800b1d8:	187b      	adds	r3, r7, r1
 800b1da:	2201      	movs	r2, #1
 800b1dc:	0019      	movs	r1, r3
 800b1de:	2011      	movs	r0, #17
 800b1e0:	f000 ff76 	bl	800c0d0 <LoRaMacCommandsAddCmd>
 800b1e4:	2287      	movs	r2, #135	; 0x87
 800b1e6:	18bb      	adds	r3, r7, r2
 800b1e8:	18ba      	adds	r2, r7, r2
 800b1ea:	7812      	ldrb	r2, [r2, #0]
 800b1ec:	701a      	strb	r2, [r3, #0]
                break;
 800b1ee:	e08e      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800b1f0:	207e      	movs	r0, #126	; 0x7e
 800b1f2:	183b      	adds	r3, r7, r0
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800b1f8:	247d      	movs	r4, #125	; 0x7d
 800b1fa:	193b      	adds	r3, r7, r4
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800b200:	1cfb      	adds	r3, r7, #3
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	1cfa      	adds	r2, r7, #3
 800b206:	1c59      	adds	r1, r3, #1
 800b208:	7011      	strb	r1, [r2, #0]
 800b20a:	001a      	movs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	189b      	adds	r3, r3, r2
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	183b      	adds	r3, r7, r0
 800b214:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800b216:	1cfb      	adds	r3, r7, #3
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	1cfa      	adds	r2, r7, #3
 800b21c:	1c59      	adds	r1, r3, #1
 800b21e:	7011      	strb	r1, [r2, #0]
 800b220:	001a      	movs	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	189b      	adds	r3, r3, r2
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	021b      	lsls	r3, r3, #8
 800b22a:	b21a      	sxth	r2, r3
 800b22c:	183b      	adds	r3, r7, r0
 800b22e:	2100      	movs	r1, #0
 800b230:	5e5b      	ldrsh	r3, [r3, r1]
 800b232:	4313      	orrs	r3, r2
 800b234:	b21a      	sxth	r2, r3
 800b236:	183b      	adds	r3, r7, r0
 800b238:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800b23a:	1cfb      	adds	r3, r7, #3
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	1cfa      	adds	r2, r7, #3
 800b240:	1c59      	adds	r1, r3, #1
 800b242:	7011      	strb	r1, [r2, #0]
 800b244:	001a      	movs	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	189a      	adds	r2, r3, r2
 800b24a:	193b      	adds	r3, r7, r4
 800b24c:	7812      	ldrb	r2, [r2, #0]
 800b24e:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800b250:	4b38      	ldr	r3, [pc, #224]	; (800b334 <ProcessMacCommands+0xb5c>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	193b      	adds	r3, r7, r4
 800b256:	7819      	ldrb	r1, [r3, #0]
 800b258:	183b      	adds	r3, r7, r0
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	0018      	movs	r0, r3
 800b25e:	f000 fdf6 	bl	800be4e <LoRaMacClassBBeaconTimingAns>
 800b262:	2287      	movs	r2, #135	; 0x87
 800b264:	18bb      	adds	r3, r7, r2
 800b266:	18ba      	adds	r2, r7, r2
 800b268:	7812      	ldrb	r2, [r2, #0]
 800b26a:	701a      	strb	r2, [r3, #0]
                break;
 800b26c:	e04f      	b.n	800b30e <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	2080      	movs	r0, #128	; 0x80
 800b272:	183a      	adds	r2, r7, r0
 800b274:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800b276:	1cfb      	adds	r3, r7, #3
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	1cfa      	adds	r2, r7, #3
 800b27c:	1c59      	adds	r1, r3, #1
 800b27e:	7011      	strb	r1, [r2, #0]
 800b280:	001a      	movs	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	189b      	adds	r3, r3, r2
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	183a      	adds	r2, r7, r0
 800b28a:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b28c:	1cfb      	adds	r3, r7, #3
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	1cfa      	adds	r2, r7, #3
 800b292:	1c59      	adds	r1, r3, #1
 800b294:	7011      	strb	r1, [r2, #0]
 800b296:	001a      	movs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	189b      	adds	r3, r3, r2
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	183a      	adds	r2, r7, r0
 800b2a2:	6812      	ldr	r2, [r2, #0]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	183a      	adds	r2, r7, r0
 800b2a8:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b2aa:	1cfb      	adds	r3, r7, #3
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	1cfa      	adds	r2, r7, #3
 800b2b0:	1c59      	adds	r1, r3, #1
 800b2b2:	7011      	strb	r1, [r2, #0]
 800b2b4:	001a      	movs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	189b      	adds	r3, r3, r2
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	041b      	lsls	r3, r3, #16
 800b2be:	183a      	adds	r2, r7, r0
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	183a      	adds	r2, r7, r0
 800b2c6:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800b2c8:	183b      	adds	r3, r7, r0
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2264      	movs	r2, #100	; 0x64
 800b2ce:	4353      	muls	r3, r2
 800b2d0:	183a      	adds	r2, r7, r0
 800b2d2:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800b2d4:	183b      	adds	r3, r7, r0
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f000 fdcb 	bl	800be74 <LoRaMacClassBBeaconFreqReq>
 800b2de:	1e03      	subs	r3, r0, #0
 800b2e0:	d004      	beq.n	800b2ec <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800b2e2:	2368      	movs	r3, #104	; 0x68
 800b2e4:	18fb      	adds	r3, r7, r3
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e003      	b.n	800b2f4 <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800b2ec:	2368      	movs	r3, #104	; 0x68
 800b2ee:	18fb      	adds	r3, r7, r3
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800b2f4:	2368      	movs	r3, #104	; 0x68
 800b2f6:	18fb      	adds	r3, r7, r3
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	0019      	movs	r1, r3
 800b2fc:	2013      	movs	r0, #19
 800b2fe:	f000 fee7 	bl	800c0d0 <LoRaMacCommandsAddCmd>
 800b302:	2287      	movs	r2, #135	; 0x87
 800b304:	18bb      	adds	r3, r7, r2
 800b306:	18ba      	adds	r2, r7, r2
 800b308:	7812      	ldrb	r2, [r2, #0]
 800b30a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b30c:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800b30e:	1cfa      	adds	r2, r7, #3
 800b310:	1cbb      	adds	r3, r7, #2
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d201      	bcs.n	800b31e <ProcessMacCommands+0xb46>
 800b31a:	f7ff fa7e 	bl	800a81a <ProcessMacCommands+0x42>
 800b31e:	e000      	b.n	800b322 <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800b320:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800b322:	46bd      	mov	sp, r7
 800b324:	b023      	add	sp, #140	; 0x8c
 800b326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b328:	200005fc 	.word	0x200005fc
 800b32c:	12d53d80 	.word	0x12d53d80
 800b330:	0000046c 	.word	0x0000046c
 800b334:	2000223c 	.word	0x2000223c

0800b338 <ScheduleTx>:
    status = ScheduleTx( allowDelayedTx );
    return status;
}

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800b338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33a:	b08b      	sub	sp, #44	; 0x2c
 800b33c:	af02      	add	r7, sp, #8
 800b33e:	0002      	movs	r2, r0
 800b340:	1dfb      	adds	r3, r7, #7
 800b342:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b344:	231f      	movs	r3, #31
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	2203      	movs	r2, #3
 800b34a:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800b354:	4ab1      	ldr	r2, [pc, #708]	; (800b61c <ScheduleTx+0x2e4>)
 800b356:	238e      	movs	r3, #142	; 0x8e
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	58d2      	ldr	r2, [r2, r3]
 800b35c:	238a      	movs	r3, #138	; 0x8a
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	5cd3      	ldrb	r3, [r2, r3]
 800b362:	0018      	movs	r0, r3
 800b364:	f000 f9c4 	bl	800b6f0 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800b368:	4aac      	ldr	r2, [pc, #688]	; (800b61c <ScheduleTx+0x2e4>)
 800b36a:	23d1      	movs	r3, #209	; 0xd1
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	58d2      	ldr	r2, [r2, r3]
 800b370:	210c      	movs	r1, #12
 800b372:	187b      	adds	r3, r7, r1
 800b374:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b376:	4aa9      	ldr	r2, [pc, #676]	; (800b61c <ScheduleTx+0x2e4>)
 800b378:	238e      	movs	r3, #142	; 0x8e
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	58d3      	ldr	r3, [r2, r3]
 800b37e:	22d5      	movs	r2, #213	; 0xd5
 800b380:	569a      	ldrsb	r2, [r3, r2]
 800b382:	187b      	adds	r3, r7, r1
 800b384:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800b386:	4aa5      	ldr	r2, [pc, #660]	; (800b61c <ScheduleTx+0x2e4>)
 800b388:	238e      	movs	r3, #142	; 0x8e
 800b38a:	00db      	lsls	r3, r3, #3
 800b38c:	58d2      	ldr	r2, [r2, r3]
 800b38e:	2389      	movs	r3, #137	; 0x89
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	5cd2      	ldrb	r2, [r2, r3]
 800b394:	187b      	adds	r3, r7, r1
 800b396:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b398:	4aa0      	ldr	r2, [pc, #640]	; (800b61c <ScheduleTx+0x2e4>)
 800b39a:	238e      	movs	r3, #142	; 0x8e
 800b39c:	00db      	lsls	r3, r3, #3
 800b39e:	58d2      	ldr	r2, [r2, r3]
 800b3a0:	2389      	movs	r3, #137	; 0x89
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	5cd3      	ldrb	r3, [r2, r3]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d104      	bne.n	800b3b4 <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800b3aa:	230c      	movs	r3, #12
 800b3ac:	18fb      	adds	r3, r7, r3
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	725a      	strb	r2, [r3, #9]
 800b3b2:	e003      	b.n	800b3bc <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800b3b4:	230c      	movs	r3, #12
 800b3b6:	18fb      	adds	r3, r7, r3
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800b3bc:	4a97      	ldr	r2, [pc, #604]	; (800b61c <ScheduleTx+0x2e4>)
 800b3be:	23d0      	movs	r3, #208	; 0xd0
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	58d2      	ldr	r2, [r2, r3]
 800b3c4:	210c      	movs	r1, #12
 800b3c6:	187b      	adds	r3, r7, r1
 800b3c8:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800b3ca:	4a94      	ldr	r2, [pc, #592]	; (800b61c <ScheduleTx+0x2e4>)
 800b3cc:	238e      	movs	r3, #142	; 0x8e
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	58d3      	ldr	r3, [r2, r3]
 800b3d2:	7818      	ldrb	r0, [r3, #0]
 800b3d4:	4a91      	ldr	r2, [pc, #580]	; (800b61c <ScheduleTx+0x2e4>)
 800b3d6:	238e      	movs	r3, #142	; 0x8e
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	58d3      	ldr	r3, [r2, r3]
 800b3dc:	3314      	adds	r3, #20
 800b3de:	33ff      	adds	r3, #255	; 0xff
 800b3e0:	001a      	movs	r2, r3
 800b3e2:	261f      	movs	r6, #31
 800b3e4:	19bc      	adds	r4, r7, r6
 800b3e6:	2318      	movs	r3, #24
 800b3e8:	18fd      	adds	r5, r7, r3
 800b3ea:	1879      	adds	r1, r7, r1
 800b3ec:	4b8c      	ldr	r3, [pc, #560]	; (800b620 <ScheduleTx+0x2e8>)
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	002b      	movs	r3, r5
 800b3f2:	f003 fef3 	bl	800f1dc <RegionNextChannel>
 800b3f6:	0003      	movs	r3, r0
 800b3f8:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800b3fa:	19bb      	adds	r3, r7, r6
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d026      	beq.n	800b450 <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800b402:	231f      	movs	r3, #31
 800b404:	18fb      	adds	r3, r7, r3
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b0b      	cmp	r3, #11
 800b40a:	d11d      	bne.n	800b448 <ScheduleTx+0x110>
 800b40c:	1dfb      	adds	r3, r7, #7
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d019      	beq.n	800b448 <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d014      	beq.n	800b444 <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b41a:	4a80      	ldr	r2, [pc, #512]	; (800b61c <ScheduleTx+0x2e4>)
 800b41c:	23d5      	movs	r3, #213	; 0xd5
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	58d3      	ldr	r3, [r2, r3]
 800b422:	2220      	movs	r2, #32
 800b424:	431a      	orrs	r2, r3
 800b426:	0011      	movs	r1, r2
 800b428:	4a7c      	ldr	r2, [pc, #496]	; (800b61c <ScheduleTx+0x2e4>)
 800b42a:	23d5      	movs	r3, #213	; 0xd5
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	4b7c      	ldr	r3, [pc, #496]	; (800b624 <ScheduleTx+0x2ec>)
 800b434:	0011      	movs	r1, r2
 800b436:	0018      	movs	r0, r3
 800b438:	f011 fb38 	bl	801caac <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800b43c:	4b79      	ldr	r3, [pc, #484]	; (800b624 <ScheduleTx+0x2ec>)
 800b43e:	0018      	movs	r0, r3
 800b440:	f011 fb60 	bl	801cb04 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	e0e5      	b.n	800b614 <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800b448:	231f      	movs	r3, #31
 800b44a:	18fb      	adds	r3, r7, r3
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	e0e1      	b.n	800b614 <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b450:	4a72      	ldr	r2, [pc, #456]	; (800b61c <ScheduleTx+0x2e4>)
 800b452:	238e      	movs	r3, #142	; 0x8e
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	58d3      	ldr	r3, [r2, r3]
 800b458:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800b45a:	4a70      	ldr	r2, [pc, #448]	; (800b61c <ScheduleTx+0x2e4>)
 800b45c:	238e      	movs	r3, #142	; 0x8e
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	58d3      	ldr	r3, [r2, r3]
 800b462:	7818      	ldrb	r0, [r3, #0]
 800b464:	4a6d      	ldr	r2, [pc, #436]	; (800b61c <ScheduleTx+0x2e4>)
 800b466:	238e      	movs	r3, #142	; 0x8e
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	58d2      	ldr	r2, [r2, r3]
 800b46c:	2302      	movs	r3, #2
 800b46e:	33ff      	adds	r3, #255	; 0xff
 800b470:	5cd1      	ldrb	r1, [r2, r3]
 800b472:	4a6a      	ldr	r2, [pc, #424]	; (800b61c <ScheduleTx+0x2e4>)
 800b474:	238e      	movs	r3, #142	; 0x8e
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	58d3      	ldr	r3, [r2, r3]
 800b47a:	22d5      	movs	r2, #213	; 0xd5
 800b47c:	569d      	ldrsb	r5, [r3, r2]
 800b47e:	4a67      	ldr	r2, [pc, #412]	; (800b61c <ScheduleTx+0x2e4>)
 800b480:	238e      	movs	r3, #142	; 0x8e
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	58d3      	ldr	r3, [r2, r3]
 800b486:	22f5      	movs	r2, #245	; 0xf5
 800b488:	5c9b      	ldrb	r3, [r3, r2]
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	002a      	movs	r2, r5
 800b48e:	f003 ff0f 	bl	800f2b0 <RegionApplyDrOffset>
 800b492:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b494:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b496:	4a61      	ldr	r2, [pc, #388]	; (800b61c <ScheduleTx+0x2e4>)
 800b498:	238e      	movs	r3, #142	; 0x8e
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b49e:	22dc      	movs	r2, #220	; 0xdc
 800b4a0:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b4a2:	4a5e      	ldr	r2, [pc, #376]	; (800b61c <ScheduleTx+0x2e4>)
 800b4a4:	238e      	movs	r3, #142	; 0x8e
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4aa:	22d8      	movs	r2, #216	; 0xd8
 800b4ac:	589a      	ldr	r2, [r3, r2]
 800b4ae:	4b5e      	ldr	r3, [pc, #376]	; (800b628 <ScheduleTx+0x2f0>)
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	0013      	movs	r3, r2
 800b4b4:	0002      	movs	r2, r0
 800b4b6:	0020      	movs	r0, r4
 800b4b8:	f003 fb0a 	bl	800ead0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4bc:	4a57      	ldr	r2, [pc, #348]	; (800b61c <ScheduleTx+0x2e4>)
 800b4be:	238e      	movs	r3, #142	; 0x8e
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	58d3      	ldr	r3, [r2, r3]
 800b4c4:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800b4c6:	4a55      	ldr	r2, [pc, #340]	; (800b61c <ScheduleTx+0x2e4>)
 800b4c8:	238e      	movs	r3, #142	; 0x8e
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	58d3      	ldr	r3, [r2, r3]
 800b4ce:	22fc      	movs	r2, #252	; 0xfc
 800b4d0:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4d2:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b4d4:	4a51      	ldr	r2, [pc, #324]	; (800b61c <ScheduleTx+0x2e4>)
 800b4d6:	238e      	movs	r3, #142	; 0x8e
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4dc:	22dc      	movs	r2, #220	; 0xdc
 800b4de:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b4e0:	4a4e      	ldr	r2, [pc, #312]	; (800b61c <ScheduleTx+0x2e4>)
 800b4e2:	238e      	movs	r3, #142	; 0x8e
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4e8:	22d8      	movs	r2, #216	; 0xd8
 800b4ea:	589a      	ldr	r2, [r3, r2]
 800b4ec:	4b4f      	ldr	r3, [pc, #316]	; (800b62c <ScheduleTx+0x2f4>)
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	0013      	movs	r3, r2
 800b4f2:	0022      	movs	r2, r4
 800b4f4:	f003 faec 	bl	800ead0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b4f8:	4a48      	ldr	r2, [pc, #288]	; (800b61c <ScheduleTx+0x2e4>)
 800b4fa:	238e      	movs	r3, #142	; 0x8e
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	58d2      	ldr	r2, [r2, r3]
 800b500:	2389      	movs	r3, #137	; 0x89
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	5cd3      	ldrb	r3, [r2, r3]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d11e      	bne.n	800b548 <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b50a:	4a44      	ldr	r2, [pc, #272]	; (800b61c <ScheduleTx+0x2e4>)
 800b50c:	238e      	movs	r3, #142	; 0x8e
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	58d3      	ldr	r3, [r2, r3]
 800b512:	22ec      	movs	r2, #236	; 0xec
 800b514:	589b      	ldr	r3, [r3, r2]
 800b516:	4941      	ldr	r1, [pc, #260]	; (800b61c <ScheduleTx+0x2e4>)
 800b518:	22f6      	movs	r2, #246	; 0xf6
 800b51a:	0092      	lsls	r2, r2, #2
 800b51c:	588a      	ldr	r2, [r1, r2]
 800b51e:	1899      	adds	r1, r3, r2
 800b520:	4a3e      	ldr	r2, [pc, #248]	; (800b61c <ScheduleTx+0x2e4>)
 800b522:	23f1      	movs	r3, #241	; 0xf1
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b528:	4a3c      	ldr	r2, [pc, #240]	; (800b61c <ScheduleTx+0x2e4>)
 800b52a:	238e      	movs	r3, #142	; 0x8e
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	58d3      	ldr	r3, [r2, r3]
 800b530:	22f0      	movs	r2, #240	; 0xf0
 800b532:	589b      	ldr	r3, [r3, r2]
 800b534:	4939      	ldr	r1, [pc, #228]	; (800b61c <ScheduleTx+0x2e4>)
 800b536:	22fb      	movs	r2, #251	; 0xfb
 800b538:	0092      	lsls	r2, r2, #2
 800b53a:	588a      	ldr	r2, [r1, r2]
 800b53c:	1899      	adds	r1, r3, r2
 800b53e:	4a37      	ldr	r2, [pc, #220]	; (800b61c <ScheduleTx+0x2e4>)
 800b540:	23f2      	movs	r3, #242	; 0xf2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	50d1      	str	r1, [r2, r3]
 800b546:	e03d      	b.n	800b5c4 <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b548:	2308      	movs	r3, #8
 800b54a:	18fb      	adds	r3, r7, r3
 800b54c:	0018      	movs	r0, r3
 800b54e:	f000 fe85 	bl	800c25c <LoRaMacCommandsGetSizeSerializedCmds>
 800b552:	1e03      	subs	r3, r0, #0
 800b554:	d001      	beq.n	800b55a <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b556:	2313      	movs	r3, #19
 800b558:	e05c      	b.n	800b614 <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800b55a:	4b30      	ldr	r3, [pc, #192]	; (800b61c <ScheduleTx+0x2e4>)
 800b55c:	4a34      	ldr	r2, [pc, #208]	; (800b630 <ScheduleTx+0x2f8>)
 800b55e:	5c98      	ldrb	r0, [r3, r2]
 800b560:	4a2e      	ldr	r2, [pc, #184]	; (800b61c <ScheduleTx+0x2e4>)
 800b562:	238e      	movs	r3, #142	; 0x8e
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	58d3      	ldr	r3, [r2, r3]
 800b568:	22d5      	movs	r2, #213	; 0xd5
 800b56a:	569b      	ldrsb	r3, [r3, r2]
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	b2d2      	uxtb	r2, r2
 800b570:	0019      	movs	r1, r3
 800b572:	f7ff f8dd 	bl	800a730 <ValidatePayloadLength>
 800b576:	0003      	movs	r3, r0
 800b578:	001a      	movs	r2, r3
 800b57a:	2301      	movs	r3, #1
 800b57c:	4053      	eors	r3, r2
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800b584:	2308      	movs	r3, #8
 800b586:	e045      	b.n	800b614 <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b588:	4a24      	ldr	r2, [pc, #144]	; (800b61c <ScheduleTx+0x2e4>)
 800b58a:	238e      	movs	r3, #142	; 0x8e
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	58d3      	ldr	r3, [r2, r3]
 800b590:	22e4      	movs	r2, #228	; 0xe4
 800b592:	589b      	ldr	r3, [r3, r2]
 800b594:	4921      	ldr	r1, [pc, #132]	; (800b61c <ScheduleTx+0x2e4>)
 800b596:	22f6      	movs	r2, #246	; 0xf6
 800b598:	0092      	lsls	r2, r2, #2
 800b59a:	588a      	ldr	r2, [r1, r2]
 800b59c:	1899      	adds	r1, r3, r2
 800b59e:	4a1f      	ldr	r2, [pc, #124]	; (800b61c <ScheduleTx+0x2e4>)
 800b5a0:	23f1      	movs	r3, #241	; 0xf1
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b5a6:	4a1d      	ldr	r2, [pc, #116]	; (800b61c <ScheduleTx+0x2e4>)
 800b5a8:	238e      	movs	r3, #142	; 0x8e
 800b5aa:	00db      	lsls	r3, r3, #3
 800b5ac:	58d3      	ldr	r3, [r2, r3]
 800b5ae:	22e8      	movs	r2, #232	; 0xe8
 800b5b0:	589b      	ldr	r3, [r3, r2]
 800b5b2:	491a      	ldr	r1, [pc, #104]	; (800b61c <ScheduleTx+0x2e4>)
 800b5b4:	22fb      	movs	r2, #251	; 0xfb
 800b5b6:	0092      	lsls	r2, r2, #2
 800b5b8:	588a      	ldr	r2, [r1, r2]
 800b5ba:	1899      	adds	r1, r3, r2
 800b5bc:	4a17      	ldr	r2, [pc, #92]	; (800b61c <ScheduleTx+0x2e4>)
 800b5be:	23f2      	movs	r3, #242	; 0xf2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800b5c4:	4a15      	ldr	r2, [pc, #84]	; (800b61c <ScheduleTx+0x2e4>)
 800b5c6:	238e      	movs	r3, #142	; 0x8e
 800b5c8:	00db      	lsls	r3, r3, #3
 800b5ca:	58d3      	ldr	r3, [r2, r3]
 800b5cc:	22d5      	movs	r2, #213	; 0xd5
 800b5ce:	569b      	ldrsb	r3, [r3, r2]
 800b5d0:	b2d8      	uxtb	r0, r3
 800b5d2:	4a12      	ldr	r2, [pc, #72]	; (800b61c <ScheduleTx+0x2e4>)
 800b5d4:	238e      	movs	r3, #142	; 0x8e
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	58d2      	ldr	r2, [r2, r3]
 800b5da:	2314      	movs	r3, #20
 800b5dc:	33ff      	adds	r3, #255	; 0xff
 800b5de:	5cd3      	ldrb	r3, [r2, r3]
 800b5e0:	251e      	movs	r5, #30
 800b5e2:	197c      	adds	r4, r7, r5
 800b5e4:	0019      	movs	r1, r3
 800b5e6:	f000 f825 	bl	800b634 <SecureFrame>
 800b5ea:	0003      	movs	r3, r0
 800b5ec:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800b5ee:	197b      	adds	r3, r7, r5
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <ScheduleTx+0x2c6>
    {
        return retval;
 800b5f6:	231e      	movs	r3, #30
 800b5f8:	18fb      	adds	r3, r7, r3
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	e00a      	b.n	800b614 <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800b5fe:	4a07      	ldr	r2, [pc, #28]	; (800b61c <ScheduleTx+0x2e4>)
 800b600:	238e      	movs	r3, #142	; 0x8e
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	58d2      	ldr	r2, [r2, r3]
 800b606:	2314      	movs	r3, #20
 800b608:	33ff      	adds	r3, #255	; 0xff
 800b60a:	5cd3      	ldrb	r3, [r2, r3]
 800b60c:	0018      	movs	r0, r3
 800b60e:	f000 f917 	bl	800b840 <SendFrameOnChannel>
 800b612:	0003      	movs	r3, r0
}
 800b614:	0018      	movs	r0, r3
 800b616:	46bd      	mov	sp, r7
 800b618:	b009      	add	sp, #36	; 0x24
 800b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61c:	200005fc 	.word	0x200005fc
 800b620:	20000940 	.word	0x20000940
 800b624:	20000978 	.word	0x20000978
 800b628:	200009c8 	.word	0x200009c8
 800b62c:	200009dc 	.word	0x200009dc
 800b630:	0000023f 	.word	0x0000023f

0800b634 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800b634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	0002      	movs	r2, r0
 800b63c:	1dfb      	adds	r3, r7, #7
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	1dbb      	adds	r3, r7, #6
 800b642:	1c0a      	adds	r2, r1, #0
 800b644:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800b646:	230f      	movs	r3, #15
 800b648:	18fb      	adds	r3, r7, r3
 800b64a:	2210      	movs	r2, #16
 800b64c:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800b652:	4a25      	ldr	r2, [pc, #148]	; (800b6e8 <SecureFrame+0xb4>)
 800b654:	2386      	movs	r3, #134	; 0x86
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	5cd3      	ldrb	r3, [r2, r3]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <SecureFrame+0x30>
 800b65e:	2b04      	cmp	r3, #4
 800b660:	d016      	beq.n	800b690 <SecureFrame+0x5c>
 800b662:	e039      	b.n	800b6d8 <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b664:	250f      	movs	r5, #15
 800b666:	197c      	adds	r4, r7, r5
 800b668:	4b20      	ldr	r3, [pc, #128]	; (800b6ec <SecureFrame+0xb8>)
 800b66a:	0018      	movs	r0, r3
 800b66c:	f001 fec8 	bl	800d400 <LoRaMacCryptoPrepareJoinRequest>
 800b670:	0003      	movs	r3, r0
 800b672:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b674:	197b      	adds	r3, r7, r5
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b67c:	2311      	movs	r3, #17
 800b67e:	e02e      	b.n	800b6de <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b680:	4a19      	ldr	r2, [pc, #100]	; (800b6e8 <SecureFrame+0xb4>)
 800b682:	238a      	movs	r3, #138	; 0x8a
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	5cd3      	ldrb	r3, [r2, r3]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	4b17      	ldr	r3, [pc, #92]	; (800b6e8 <SecureFrame+0xb4>)
 800b68c:	811a      	strh	r2, [r3, #8]
            break;
 800b68e:	e025      	b.n	800b6dc <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800b690:	2308      	movs	r3, #8
 800b692:	18fb      	adds	r3, r7, r3
 800b694:	0018      	movs	r0, r3
 800b696:	f002 fca5 	bl	800dfe4 <LoRaMacGetFCntUp>
 800b69a:	1e03      	subs	r3, r0, #0
 800b69c:	d001      	beq.n	800b6a2 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b69e:	2312      	movs	r3, #18
 800b6a0:	e01d      	b.n	800b6de <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800b6a2:	68b8      	ldr	r0, [r7, #8]
 800b6a4:	260f      	movs	r6, #15
 800b6a6:	19bc      	adds	r4, r7, r6
 800b6a8:	4d10      	ldr	r5, [pc, #64]	; (800b6ec <SecureFrame+0xb8>)
 800b6aa:	1dbb      	adds	r3, r7, #6
 800b6ac:	781a      	ldrb	r2, [r3, #0]
 800b6ae:	1dfb      	adds	r3, r7, #7
 800b6b0:	7819      	ldrb	r1, [r3, #0]
 800b6b2:	002b      	movs	r3, r5
 800b6b4:	f002 f992 	bl	800d9dc <LoRaMacCryptoSecureMessage>
 800b6b8:	0003      	movs	r3, r0
 800b6ba:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b6bc:	19bb      	adds	r3, r7, r6
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b6c4:	2311      	movs	r3, #17
 800b6c6:	e00a      	b.n	800b6de <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b6c8:	4a07      	ldr	r2, [pc, #28]	; (800b6e8 <SecureFrame+0xb4>)
 800b6ca:	238a      	movs	r3, #138	; 0x8a
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	5cd3      	ldrb	r3, [r2, r3]
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <SecureFrame+0xb4>)
 800b6d4:	811a      	strh	r2, [r3, #8]
            break;
 800b6d6:	e001      	b.n	800b6dc <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e000      	b.n	800b6de <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	0018      	movs	r0, r3
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	b005      	add	sp, #20
 800b6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e6:	46c0      	nop			; (mov r8, r8)
 800b6e8:	200005fc 	.word	0x200005fc
 800b6ec:	2000070c 	.word	0x2000070c

0800b6f0 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800b6f0:	b590      	push	{r4, r7, lr}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	0002      	movs	r2, r0
 800b6f8:	1dfb      	adds	r3, r7, #7
 800b6fa:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b6fc:	4a31      	ldr	r2, [pc, #196]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b6fe:	238e      	movs	r3, #142	; 0x8e
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	58d2      	ldr	r2, [r2, r3]
 800b704:	2389      	movs	r3, #137	; 0x89
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	5cd3      	ldrb	r3, [r2, r3]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d104      	bne.n	800b718 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800b70e:	230c      	movs	r3, #12
 800b710:	18fb      	adds	r3, r7, r3
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	e003      	b.n	800b720 <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800b718:	230c      	movs	r3, #12
 800b71a:	18fb      	adds	r3, r7, r3
 800b71c:	2201      	movs	r2, #1
 800b71e:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800b720:	4a28      	ldr	r2, [pc, #160]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b722:	238e      	movs	r3, #142	; 0x8e
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	58d2      	ldr	r2, [r2, r3]
 800b728:	2389      	movs	r3, #137	; 0x89
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	5cd2      	ldrb	r2, [r2, r3]
 800b72e:	240c      	movs	r4, #12
 800b730:	193b      	adds	r3, r7, r4
 800b732:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800b734:	193b      	adds	r3, r7, r4
 800b736:	1dfa      	adds	r2, r7, #7
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800b73c:	4a21      	ldr	r2, [pc, #132]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b73e:	23d2      	movs	r3, #210	; 0xd2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	58d3      	ldr	r3, [r2, r3]
 800b744:	0018      	movs	r0, r3
 800b746:	f011 fa76 	bl	801cc36 <TimerGetElapsedTime>
 800b74a:	0002      	movs	r2, r0
 800b74c:	193b      	adds	r3, r7, r4
 800b74e:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b750:	4b1c      	ldr	r3, [pc, #112]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b752:	4a1d      	ldr	r2, [pc, #116]	; (800b7c8 <CalculateBackOff+0xd8>)
 800b754:	589a      	ldr	r2, [r3, r2]
 800b756:	193b      	adds	r3, r7, r4
 800b758:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800b75a:	193b      	adds	r3, r7, r4
 800b75c:	2200      	movs	r2, #0
 800b75e:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b760:	4b18      	ldr	r3, [pc, #96]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b762:	4a1a      	ldr	r2, [pc, #104]	; (800b7cc <CalculateBackOff+0xdc>)
 800b764:	5c9b      	ldrb	r3, [r3, r2]
 800b766:	2204      	movs	r2, #4
 800b768:	4013      	ands	r3, r2
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d008      	beq.n	800b782 <CalculateBackOff+0x92>
 800b770:	2000      	movs	r0, #0
 800b772:	f000 fecb 	bl	800c50c <LoRaMacConfirmQueueIsCmdActive>
 800b776:	1e03      	subs	r3, r0, #0
 800b778:	d003      	beq.n	800b782 <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800b77a:	230c      	movs	r3, #12
 800b77c:	18fb      	adds	r3, r7, r3
 800b77e:	2201      	movs	r2, #1
 800b780:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800b782:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b784:	238e      	movs	r3, #142	; 0x8e
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	58d3      	ldr	r3, [r2, r3]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	220c      	movs	r2, #12
 800b78e:	18ba      	adds	r2, r7, r2
 800b790:	0011      	movs	r1, r2
 800b792:	0018      	movs	r0, r3
 800b794:	f003 fcd8 	bl	800f148 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b798:	4a0a      	ldr	r2, [pc, #40]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b79a:	238e      	movs	r3, #142	; 0x8e
 800b79c:	00db      	lsls	r3, r3, #3
 800b79e:	58d2      	ldr	r2, [r2, r3]
 800b7a0:	2387      	movs	r3, #135	; 0x87
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	5ad3      	ldrh	r3, [r2, r3]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	4a06      	ldr	r2, [pc, #24]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b7aa:	4907      	ldr	r1, [pc, #28]	; (800b7c8 <CalculateBackOff+0xd8>)
 800b7ac:	5852      	ldr	r2, [r2, r1]
 800b7ae:	435a      	muls	r2, r3
 800b7b0:	0011      	movs	r1, r2
 800b7b2:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <CalculateBackOff+0xd4>)
 800b7b4:	23d1      	movs	r3, #209	; 0xd1
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	50d1      	str	r1, [r2, r3]
}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	b007      	add	sp, #28
 800b7c0:	bd90      	pop	{r4, r7, pc}
 800b7c2:	46c0      	nop			; (mov r8, r8)
 800b7c4:	200005fc 	.word	0x200005fc
 800b7c8:	0000040c 	.word	0x0000040c
 800b7cc:	0000046d 	.word	0x0000046d

0800b7d0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	1d3b      	adds	r3, r7, #4
 800b7d8:	7019      	strb	r1, [r3, #0]
 800b7da:	0011      	movs	r1, r2
 800b7dc:	1dfb      	adds	r3, r7, #7
 800b7de:	1c02      	adds	r2, r0, #0
 800b7e0:	701a      	strb	r2, [r3, #0]
 800b7e2:	1dbb      	adds	r3, r7, #6
 800b7e4:	1c0a      	adds	r2, r1, #0
 800b7e6:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b7e8:	1dfb      	adds	r3, r7, #7
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <RemoveMacCommands+0x28>
 800b7f0:	1dfb      	adds	r3, r7, #7
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d10f      	bne.n	800b818 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800b7f8:	1dbb      	adds	r3, r7, #6
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d109      	bne.n	800b814 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800b800:	1d3b      	adds	r3, r7, #4
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2220      	movs	r2, #32
 800b806:	4013      	ands	r3, r2
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d004      	beq.n	800b818 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b80e:	f000 fce9 	bl	800c1e4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800b812:	e001      	b.n	800b818 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b814:	f000 fce6 	bl	800c1e4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b818:	46c0      	nop			; (mov r8, r8)
 800b81a:	46bd      	mov	sp, r7
 800b81c:	b002      	add	sp, #8
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <OpenContinuousRx2Window>:
    MacCtx.NvmCtx->Channel = 0;
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
}

static void OpenContinuousRx2Window( void )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800b824:	2000      	movs	r0, #0
 800b826:	f7fe fe3f 	bl	800a4a8 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b82a:	4b03      	ldr	r3, [pc, #12]	; (800b838 <OpenContinuousRx2Window+0x18>)
 800b82c:	4a03      	ldr	r2, [pc, #12]	; (800b83c <OpenContinuousRx2Window+0x1c>)
 800b82e:	2102      	movs	r1, #2
 800b830:	5499      	strb	r1, [r3, r2]
}
 800b832:	46c0      	nop			; (mov r8, r8)
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	200005fc 	.word	0x200005fc
 800b83c:	0000046c 	.word	0x0000046c

0800b840 <SendFrameOnChannel>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800b840:	b590      	push	{r4, r7, lr}
 800b842:	b089      	sub	sp, #36	; 0x24
 800b844:	af00      	add	r7, sp, #0
 800b846:	0002      	movs	r2, r0
 800b848:	1dfb      	adds	r3, r7, #7
 800b84a:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800b84c:	230b      	movs	r3, #11
 800b84e:	18fb      	adds	r3, r7, r3
 800b850:	2200      	movs	r2, #0
 800b852:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800b854:	210c      	movs	r1, #12
 800b856:	187b      	adds	r3, r7, r1
 800b858:	1dfa      	adds	r2, r7, #7
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b85e:	4a4f      	ldr	r2, [pc, #316]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b860:	238e      	movs	r3, #142	; 0x8e
 800b862:	00db      	lsls	r3, r3, #3
 800b864:	58d3      	ldr	r3, [r2, r3]
 800b866:	22d5      	movs	r2, #213	; 0xd5
 800b868:	569a      	ldrsb	r2, [r3, r2]
 800b86a:	187b      	adds	r3, r7, r1
 800b86c:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b86e:	4a4b      	ldr	r2, [pc, #300]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b870:	238e      	movs	r3, #142	; 0x8e
 800b872:	00db      	lsls	r3, r3, #3
 800b874:	58d3      	ldr	r3, [r2, r3]
 800b876:	22d4      	movs	r2, #212	; 0xd4
 800b878:	569a      	ldrsb	r2, [r3, r2]
 800b87a:	187b      	adds	r3, r7, r1
 800b87c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800b87e:	4a47      	ldr	r2, [pc, #284]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b880:	238e      	movs	r3, #142	; 0x8e
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	58d2      	ldr	r2, [r2, r3]
 800b886:	2382      	movs	r3, #130	; 0x82
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	58d2      	ldr	r2, [r2, r3]
 800b88c:	187b      	adds	r3, r7, r1
 800b88e:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b890:	4a42      	ldr	r2, [pc, #264]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b892:	238e      	movs	r3, #142	; 0x8e
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	58d2      	ldr	r2, [r2, r3]
 800b898:	2384      	movs	r3, #132	; 0x84
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	58d2      	ldr	r2, [r2, r3]
 800b89e:	187b      	adds	r3, r7, r1
 800b8a0:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800b8a2:	4b3e      	ldr	r3, [pc, #248]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b8a4:	891a      	ldrh	r2, [r3, #8]
 800b8a6:	187b      	adds	r3, r7, r1
 800b8a8:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b8aa:	f000 fa9d 	bl	800bde8 <LoRaMacClassBIsBeaconExpected>
 800b8ae:	1e03      	subs	r3, r0, #0
 800b8b0:	d001      	beq.n	800b8b6 <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800b8b2:	230e      	movs	r3, #14
 800b8b4:	e06d      	b.n	800b992 <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b8b6:	4a39      	ldr	r2, [pc, #228]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b8b8:	238e      	movs	r3, #142	; 0x8e
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	58d3      	ldr	r3, [r2, r3]
 800b8be:	22c8      	movs	r2, #200	; 0xc8
 800b8c0:	5c9b      	ldrb	r3, [r3, r2]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d10d      	bne.n	800b8e2 <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b8c6:	f000 fa95 	bl	800bdf4 <LoRaMacClassBIsPingExpected>
 800b8ca:	1e03      	subs	r3, r0, #0
 800b8cc:	d001      	beq.n	800b8d2 <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b8ce:	230f      	movs	r3, #15
 800b8d0:	e05f      	b.n	800b992 <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b8d2:	f000 fa95 	bl	800be00 <LoRaMacClassBIsMulticastExpected>
 800b8d6:	1e03      	subs	r3, r0, #0
 800b8d8:	d001      	beq.n	800b8de <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b8da:	230f      	movs	r3, #15
 800b8dc:	e059      	b.n	800b992 <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800b8de:	f000 fadb 	bl	800be98 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800b8e2:	4a2e      	ldr	r2, [pc, #184]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b8e4:	238e      	movs	r3, #142	; 0x8e
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	58d3      	ldr	r3, [r2, r3]
 800b8ea:	7818      	ldrb	r0, [r3, #0]
 800b8ec:	4b2c      	ldr	r3, [pc, #176]	; (800b9a0 <SendFrameOnChannel+0x160>)
 800b8ee:	240b      	movs	r4, #11
 800b8f0:	193a      	adds	r2, r7, r4
 800b8f2:	210c      	movs	r1, #12
 800b8f4:	1879      	adds	r1, r7, r1
 800b8f6:	f003 f9e5 	bl	800ecc4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b8fa:	4b28      	ldr	r3, [pc, #160]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b8fc:	4a29      	ldr	r2, [pc, #164]	; (800b9a4 <SendFrameOnChannel+0x164>)
 800b8fe:	2101      	movs	r1, #1
 800b900:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b902:	4a26      	ldr	r2, [pc, #152]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b904:	238e      	movs	r3, #142	; 0x8e
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	58d3      	ldr	r3, [r2, r3]
 800b90a:	22d5      	movs	r2, #213	; 0xd5
 800b90c:	569b      	ldrsb	r3, [r3, r2]
 800b90e:	b2d9      	uxtb	r1, r3
 800b910:	4b22      	ldr	r3, [pc, #136]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b912:	4a25      	ldr	r2, [pc, #148]	; (800b9a8 <SendFrameOnChannel+0x168>)
 800b914:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800b916:	193b      	adds	r3, r7, r4
 800b918:	2100      	movs	r1, #0
 800b91a:	5659      	ldrsb	r1, [r3, r1]
 800b91c:	4b1f      	ldr	r3, [pc, #124]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b91e:	4a23      	ldr	r2, [pc, #140]	; (800b9ac <SendFrameOnChannel+0x16c>)
 800b920:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800b922:	1dfb      	adds	r3, r7, #7
 800b924:	781a      	ldrb	r2, [r3, #0]
 800b926:	4b1d      	ldr	r3, [pc, #116]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b928:	4921      	ldr	r1, [pc, #132]	; (800b9b0 <SendFrameOnChannel+0x170>)
 800b92a:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b92c:	4b1b      	ldr	r3, [pc, #108]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b92e:	4a21      	ldr	r2, [pc, #132]	; (800b9b4 <SendFrameOnChannel+0x174>)
 800b930:	589a      	ldr	r2, [r3, r2]
 800b932:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b934:	4920      	ldr	r1, [pc, #128]	; (800b9b8 <SendFrameOnChannel+0x178>)
 800b936:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b938:	4b18      	ldr	r3, [pc, #96]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b93a:	4a1e      	ldr	r2, [pc, #120]	; (800b9b4 <SendFrameOnChannel+0x174>)
 800b93c:	589a      	ldr	r2, [r3, r2]
 800b93e:	4b17      	ldr	r3, [pc, #92]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b940:	491e      	ldr	r1, [pc, #120]	; (800b9bc <SendFrameOnChannel+0x17c>)
 800b942:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b944:	f000 fa62 	bl	800be0c <LoRaMacClassBIsBeaconModeActive>
 800b948:	1e03      	subs	r3, r0, #0
 800b94a:	d00c      	beq.n	800b966 <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b94c:	4b13      	ldr	r3, [pc, #76]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b94e:	4a19      	ldr	r2, [pc, #100]	; (800b9b4 <SendFrameOnChannel+0x174>)
 800b950:	589b      	ldr	r3, [r3, r2]
 800b952:	0018      	movs	r0, r3
 800b954:	f000 fa97 	bl	800be86 <LoRaMacClassBIsUplinkCollision>
 800b958:	0003      	movs	r3, r0
 800b95a:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b962:	2310      	movs	r3, #16
 800b964:	e015      	b.n	800b992 <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800b966:	f000 fa57 	bl	800be18 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b96a:	4a0c      	ldr	r2, [pc, #48]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b96c:	23d5      	movs	r3, #213	; 0xd5
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	58d3      	ldr	r3, [r2, r3]
 800b972:	2202      	movs	r2, #2
 800b974:	431a      	orrs	r2, r3
 800b976:	0011      	movs	r1, r2
 800b978:	4a08      	ldr	r2, [pc, #32]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b97a:	23d5      	movs	r3, #213	; 0xd5
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b980:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <SendFrameOnChannel+0x180>)
 800b982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b984:	4a05      	ldr	r2, [pc, #20]	; (800b99c <SendFrameOnChannel+0x15c>)
 800b986:	8912      	ldrh	r2, [r2, #8]
 800b988:	b2d1      	uxtb	r1, r2
 800b98a:	4a0e      	ldr	r2, [pc, #56]	; (800b9c4 <SendFrameOnChannel+0x184>)
 800b98c:	0010      	movs	r0, r2
 800b98e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	0018      	movs	r0, r3
 800b994:	46bd      	mov	sp, r7
 800b996:	b009      	add	sp, #36	; 0x24
 800b998:	bd90      	pop	{r4, r7, pc}
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	200005fc 	.word	0x200005fc
 800b9a0:	20000a08 	.word	0x20000a08
 800b9a4:	0000042d 	.word	0x0000042d
 800b9a8:	0000042e 	.word	0x0000042e
 800b9ac:	0000042f 	.word	0x0000042f
 800b9b0:	0000043c 	.word	0x0000043c
 800b9b4:	0000040c 	.word	0x0000040c
 800b9b8:	00000434 	.word	0x00000434
 800b9bc:	00000444 	.word	0x00000444
 800b9c0:	080293d8 	.word	0x080293d8
 800b9c4:	20000606 	.word	0x20000606

0800b9c8 <DetermineFrameType>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <DetermineFrameType+0x16>
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e03b      	b.n	800ba5a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	7b1b      	ldrb	r3, [r3, #12]
 800b9e6:	220f      	movs	r2, #15
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <DetermineFrameType+0x3a>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	5c9b      	ldrb	r3, [r3, r2]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	e02a      	b.n	800ba58 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2228      	movs	r2, #40	; 0x28
 800ba06:	5c9b      	ldrb	r3, [r3, r2]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	e021      	b.n	800ba58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	7b1b      	ldrb	r3, [r3, #12]
 800ba18:	220f      	movs	r2, #15
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d108      	bne.n	800ba34 <DetermineFrameType+0x6c>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	5c9b      	ldrb	r3, [r3, r2]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	e011      	b.n	800ba58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7b1b      	ldrb	r3, [r3, #12]
 800ba38:	220f      	movs	r2, #15
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d108      	bne.n	800ba54 <DetermineFrameType+0x8c>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2220      	movs	r2, #32
 800ba46:	5c9b      	ldrb	r3, [r3, r2]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2203      	movs	r2, #3
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	e001      	b.n	800ba58 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800ba54:	2316      	movs	r3, #22
 800ba56:	e000      	b.n	800ba5a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	0018      	movs	r0, r3
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	b002      	add	sp, #8
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ba68:	4a16      	ldr	r2, [pc, #88]	; (800bac4 <CheckRetransUnconfirmedUplink+0x60>)
 800ba6a:	238e      	movs	r3, #142	; 0x8e
 800ba6c:	00db      	lsls	r3, r3, #3
 800ba6e:	58d2      	ldr	r2, [r2, r3]
 800ba70:	2388      	movs	r3, #136	; 0x88
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800ba76:	4913      	ldr	r1, [pc, #76]	; (800bac4 <CheckRetransUnconfirmedUplink+0x60>)
 800ba78:	238e      	movs	r3, #142	; 0x8e
 800ba7a:	00db      	lsls	r3, r3, #3
 800ba7c:	58cb      	ldr	r3, [r1, r3]
 800ba7e:	21f4      	movs	r1, #244	; 0xf4
 800ba80:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d301      	bcc.n	800ba8a <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e019      	b.n	800babe <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ba8a:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <CheckRetransUnconfirmedUplink+0x60>)
 800ba8c:	4a0e      	ldr	r2, [pc, #56]	; (800bac8 <CheckRetransUnconfirmedUplink+0x64>)
 800ba8e:	5c9b      	ldrb	r3, [r3, r2]
 800ba90:	2202      	movs	r2, #2
 800ba92:	4013      	ands	r3, r2
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d010      	beq.n	800babc <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800ba9a:	4a0a      	ldr	r2, [pc, #40]	; (800bac4 <CheckRetransUnconfirmedUplink+0x60>)
 800ba9c:	238e      	movs	r3, #142	; 0x8e
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	58d3      	ldr	r3, [r2, r3]
 800baa2:	22c8      	movs	r2, #200	; 0xc8
 800baa4:	5c9b      	ldrb	r3, [r3, r2]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800baaa:	2301      	movs	r3, #1
 800baac:	e007      	b.n	800babe <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800baae:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <CheckRetransUnconfirmedUplink+0x60>)
 800bab0:	4a06      	ldr	r2, [pc, #24]	; (800bacc <CheckRetransUnconfirmedUplink+0x68>)
 800bab2:	5c9b      	ldrb	r3, [r3, r2]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800bab8:	2301      	movs	r3, #1
 800baba:	e000      	b.n	800babe <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800babc:	2300      	movs	r3, #0
}
 800babe:	0018      	movs	r0, r3
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	200005fc 	.word	0x200005fc
 800bac8:	0000046d 	.word	0x0000046d
 800bacc:	0000046c 	.word	0x0000046c

0800bad0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800bad4:	4a11      	ldr	r2, [pc, #68]	; (800bb1c <CheckRetransConfirmedUplink+0x4c>)
 800bad6:	238e      	movs	r3, #142	; 0x8e
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	58d3      	ldr	r3, [r2, r3]
 800badc:	4a10      	ldr	r2, [pc, #64]	; (800bb20 <CheckRetransConfirmedUplink+0x50>)
 800bade:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800bae0:	490e      	ldr	r1, [pc, #56]	; (800bb1c <CheckRetransConfirmedUplink+0x4c>)
 800bae2:	238e      	movs	r3, #142	; 0x8e
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	58cb      	ldr	r3, [r1, r3]
 800bae8:	490e      	ldr	r1, [pc, #56]	; (800bb24 <CheckRetransConfirmedUplink+0x54>)
 800baea:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800baec:	429a      	cmp	r2, r3
 800baee:	d301      	bcc.n	800baf4 <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e010      	b.n	800bb16 <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <CheckRetransConfirmedUplink+0x4c>)
 800baf6:	4a0c      	ldr	r2, [pc, #48]	; (800bb28 <CheckRetransConfirmedUplink+0x58>)
 800baf8:	5c9b      	ldrb	r3, [r3, r2]
 800bafa:	2202      	movs	r2, #2
 800bafc:	4013      	ands	r3, r2
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d007      	beq.n	800bb14 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800bb04:	4a05      	ldr	r2, [pc, #20]	; (800bb1c <CheckRetransConfirmedUplink+0x4c>)
 800bb06:	2386      	movs	r3, #134	; 0x86
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	5cd3      	ldrb	r3, [r2, r3]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e000      	b.n	800bb16 <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	0018      	movs	r0, r3
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	200005fc 	.word	0x200005fc
 800bb20:	00000217 	.word	0x00000217
 800bb24:	00000216 	.word	0x00000216
 800bb28:	0000046d 	.word	0x0000046d

0800bb2c <StopRetransmission>:


static bool StopRetransmission( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800bb36:	1d3b      	adds	r3, r7, #4
 800bb38:	0018      	movs	r0, r3
 800bb3a:	f002 fa53 	bl	800dfe4 <LoRaMacGetFCntUp>
 800bb3e:	1e03      	subs	r3, r0, #0
 800bb40:	d001      	beq.n	800bb46 <StopRetransmission+0x1a>
    {
        return false;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e043      	b.n	800bbce <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f002 fa61 	bl	800e010 <LoRaMacSetFCntUp>
 800bb4e:	1e03      	subs	r3, r0, #0
 800bb50:	d001      	beq.n	800bb56 <StopRetransmission+0x2a>
    {
        return false;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e03b      	b.n	800bbce <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800bb56:	4b20      	ldr	r3, [pc, #128]	; (800bbd8 <StopRetransmission+0xac>)
 800bb58:	4a20      	ldr	r2, [pc, #128]	; (800bbdc <StopRetransmission+0xb0>)
 800bb5a:	5c9b      	ldrb	r3, [r3, r2]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	4013      	ands	r3, r2
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d110      	bne.n	800bb88 <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800bb66:	4a1c      	ldr	r2, [pc, #112]	; (800bbd8 <StopRetransmission+0xac>)
 800bb68:	238e      	movs	r3, #142	; 0x8e
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	58d3      	ldr	r3, [r2, r3]
 800bb6e:	22ca      	movs	r2, #202	; 0xca
 800bb70:	5c9b      	ldrb	r3, [r3, r2]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d008      	beq.n	800bb88 <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800bb76:	4a18      	ldr	r2, [pc, #96]	; (800bbd8 <StopRetransmission+0xac>)
 800bb78:	238e      	movs	r3, #142	; 0x8e
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	58d3      	ldr	r3, [r2, r3]
 800bb7e:	22cc      	movs	r2, #204	; 0xcc
 800bb80:	589a      	ldr	r2, [r3, r2]
 800bb82:	3201      	adds	r2, #1
 800bb84:	21cc      	movs	r1, #204	; 0xcc
 800bb86:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800bb88:	4a13      	ldr	r2, [pc, #76]	; (800bbd8 <StopRetransmission+0xac>)
 800bb8a:	238e      	movs	r3, #142	; 0x8e
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	58d2      	ldr	r2, [r2, r3]
 800bb90:	2388      	movs	r3, #136	; 0x88
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	2100      	movs	r1, #0
 800bb96:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800bb98:	4a0f      	ldr	r2, [pc, #60]	; (800bbd8 <StopRetransmission+0xac>)
 800bb9a:	238e      	movs	r3, #142	; 0x8e
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	58d3      	ldr	r3, [r2, r3]
 800bba0:	4a0f      	ldr	r2, [pc, #60]	; (800bbe0 <StopRetransmission+0xb4>)
 800bba2:	2100      	movs	r1, #0
 800bba4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800bba6:	4a0c      	ldr	r2, [pc, #48]	; (800bbd8 <StopRetransmission+0xac>)
 800bba8:	238e      	movs	r3, #142	; 0x8e
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	58d2      	ldr	r2, [r2, r3]
 800bbae:	2386      	movs	r3, #134	; 0x86
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bbb6:	4a08      	ldr	r2, [pc, #32]	; (800bbd8 <StopRetransmission+0xac>)
 800bbb8:	23d5      	movs	r3, #213	; 0xd5
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	58d3      	ldr	r3, [r2, r3]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	4393      	bics	r3, r2
 800bbc2:	0019      	movs	r1, r3
 800bbc4:	4a04      	ldr	r2, [pc, #16]	; (800bbd8 <StopRetransmission+0xac>)
 800bbc6:	23d5      	movs	r3, #213	; 0xd5
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	50d1      	str	r1, [r2, r3]

    return true;
 800bbcc:	2301      	movs	r3, #1
}
 800bbce:	0018      	movs	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	b002      	add	sp, #8
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	46c0      	nop			; (mov r8, r8)
 800bbd8:	200005fc 	.word	0x200005fc
 800bbdc:	0000046d 	.word	0x0000046d
 800bbe0:	00000219 	.word	0x00000219

0800bbe4 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800bbea:	4a2d      	ldr	r2, [pc, #180]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bbec:	238e      	movs	r3, #142	; 0x8e
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	58d3      	ldr	r3, [r2, r3]
 800bbf2:	4a2c      	ldr	r2, [pc, #176]	; (800bca4 <AckTimeoutRetriesProcess+0xc0>)
 800bbf4:	5c9a      	ldrb	r2, [r3, r2]
 800bbf6:	492a      	ldr	r1, [pc, #168]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bbf8:	238e      	movs	r3, #142	; 0x8e
 800bbfa:	00db      	lsls	r3, r3, #3
 800bbfc:	58cb      	ldr	r3, [r1, r3]
 800bbfe:	492a      	ldr	r1, [pc, #168]	; (800bca8 <AckTimeoutRetriesProcess+0xc4>)
 800bc00:	5c5b      	ldrb	r3, [r3, r1]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d247      	bcs.n	800bc96 <AckTimeoutRetriesProcess+0xb2>
 800bc06:	4a26      	ldr	r2, [pc, #152]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc08:	238e      	movs	r3, #142	; 0x8e
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	58d3      	ldr	r3, [r2, r3]
 800bc0e:	4a25      	ldr	r2, [pc, #148]	; (800bca4 <AckTimeoutRetriesProcess+0xc0>)
 800bc10:	5c9b      	ldrb	r3, [r3, r2]
 800bc12:	2b08      	cmp	r3, #8
 800bc14:	d83f      	bhi.n	800bc96 <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800bc16:	4a22      	ldr	r2, [pc, #136]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc18:	238e      	movs	r3, #142	; 0x8e
 800bc1a:	00db      	lsls	r3, r3, #3
 800bc1c:	58d3      	ldr	r3, [r2, r3]
 800bc1e:	4a21      	ldr	r2, [pc, #132]	; (800bca4 <AckTimeoutRetriesProcess+0xc0>)
 800bc20:	5c9a      	ldrb	r2, [r3, r2]
 800bc22:	3201      	adds	r2, #1
 800bc24:	b2d1      	uxtb	r1, r2
 800bc26:	4a1f      	ldr	r2, [pc, #124]	; (800bca4 <AckTimeoutRetriesProcess+0xc0>)
 800bc28:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800bc2a:	4a1d      	ldr	r2, [pc, #116]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc2c:	238e      	movs	r3, #142	; 0x8e
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	58d3      	ldr	r3, [r2, r3]
 800bc32:	4a1c      	ldr	r2, [pc, #112]	; (800bca4 <AckTimeoutRetriesProcess+0xc0>)
 800bc34:	5c9b      	ldrb	r3, [r3, r2]
 800bc36:	2201      	movs	r2, #1
 800bc38:	4013      	ands	r3, r2
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d02a      	beq.n	800bc96 <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bc40:	1d3b      	adds	r3, r7, #4
 800bc42:	2221      	movs	r2, #33	; 0x21
 800bc44:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bc46:	4a16      	ldr	r2, [pc, #88]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc48:	238e      	movs	r3, #142	; 0x8e
 800bc4a:	00db      	lsls	r3, r3, #3
 800bc4c:	58d2      	ldr	r2, [r2, r3]
 800bc4e:	2380      	movs	r3, #128	; 0x80
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	5cd2      	ldrb	r2, [r2, r3]
 800bc54:	1d3b      	adds	r3, r7, #4
 800bc56:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bc58:	4a11      	ldr	r2, [pc, #68]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc5a:	238e      	movs	r3, #142	; 0x8e
 800bc5c:	00db      	lsls	r3, r3, #3
 800bc5e:	58d3      	ldr	r3, [r2, r3]
 800bc60:	22d5      	movs	r2, #213	; 0xd5
 800bc62:	569a      	ldrsb	r2, [r3, r2]
 800bc64:	1d3b      	adds	r3, r7, #4
 800bc66:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800bc68:	4a0d      	ldr	r2, [pc, #52]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc6a:	238e      	movs	r3, #142	; 0x8e
 800bc6c:	00db      	lsls	r3, r3, #3
 800bc6e:	58d3      	ldr	r3, [r2, r3]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	1d3a      	adds	r2, r7, #4
 800bc74:	0011      	movs	r1, r2
 800bc76:	0018      	movs	r0, r3
 800bc78:	f002 fdc4 	bl	800e804 <RegionGetPhyParam>
 800bc7c:	0003      	movs	r3, r0
 800bc7e:	001a      	movs	r2, r3
 800bc80:	003b      	movs	r3, r7
 800bc82:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800bc84:	003b      	movs	r3, r7
 800bc86:	6819      	ldr	r1, [r3, #0]
 800bc88:	4a05      	ldr	r2, [pc, #20]	; (800bca0 <AckTimeoutRetriesProcess+0xbc>)
 800bc8a:	238e      	movs	r3, #142	; 0x8e
 800bc8c:	00db      	lsls	r3, r3, #3
 800bc8e:	58d3      	ldr	r3, [r2, r3]
 800bc90:	b249      	sxtb	r1, r1
 800bc92:	22d5      	movs	r2, #213	; 0xd5
 800bc94:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	b002      	add	sp, #8
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	46c0      	nop			; (mov r8, r8)
 800bca0:	200005fc 	.word	0x200005fc
 800bca4:	00000217 	.word	0x00000217
 800bca8:	00000216 	.word	0x00000216

0800bcac <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800bcb2:	4a19      	ldr	r2, [pc, #100]	; (800bd18 <AckTimeoutRetriesFinalize+0x6c>)
 800bcb4:	2386      	movs	r3, #134	; 0x86
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	5cd3      	ldrb	r3, [r2, r3]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4053      	eors	r3, r2
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d01c      	beq.n	800bcfe <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800bcc4:	003b      	movs	r3, r7
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800bcca:	4b14      	ldr	r3, [pc, #80]	; (800bd1c <AckTimeoutRetriesFinalize+0x70>)
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	003b      	movs	r3, r7
 800bcd0:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800bcd2:	4a11      	ldr	r2, [pc, #68]	; (800bd18 <AckTimeoutRetriesFinalize+0x6c>)
 800bcd4:	238e      	movs	r3, #142	; 0x8e
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	58d3      	ldr	r3, [r2, r3]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	003a      	movs	r2, r7
 800bcde:	0011      	movs	r1, r2
 800bce0:	0018      	movs	r0, r3
 800bce2:	f002 fe61 	bl	800e9a8 <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800bce6:	4a0c      	ldr	r2, [pc, #48]	; (800bd18 <AckTimeoutRetriesFinalize+0x6c>)
 800bce8:	238e      	movs	r3, #142	; 0x8e
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	58d3      	ldr	r3, [r2, r3]
 800bcee:	4a0c      	ldr	r2, [pc, #48]	; (800bd20 <AckTimeoutRetriesFinalize+0x74>)
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800bcf4:	4a08      	ldr	r2, [pc, #32]	; (800bd18 <AckTimeoutRetriesFinalize+0x6c>)
 800bcf6:	2386      	movs	r3, #134	; 0x86
 800bcf8:	00db      	lsls	r3, r3, #3
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800bcfe:	4a06      	ldr	r2, [pc, #24]	; (800bd18 <AckTimeoutRetriesFinalize+0x6c>)
 800bd00:	238e      	movs	r3, #142	; 0x8e
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	58d3      	ldr	r3, [r2, r3]
 800bd06:	4a07      	ldr	r2, [pc, #28]	; (800bd24 <AckTimeoutRetriesFinalize+0x78>)
 800bd08:	5c99      	ldrb	r1, [r3, r2]
 800bd0a:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <AckTimeoutRetriesFinalize+0x6c>)
 800bd0c:	4a06      	ldr	r2, [pc, #24]	; (800bd28 <AckTimeoutRetriesFinalize+0x7c>)
 800bd0e:	5499      	strb	r1, [r3, r2]
}
 800bd10:	46c0      	nop			; (mov r8, r8)
 800bd12:	46bd      	mov	sp, r7
 800bd14:	b002      	add	sp, #8
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	200005fc 	.word	0x200005fc
 800bd1c:	2000224c 	.word	0x2000224c
 800bd20:	00000219 	.word	0x00000219
 800bd24:	00000217 	.word	0x00000217
 800bd28:	00000431 	.word	0x00000431

0800bd2c <IsRequestPending>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
}

static uint8_t IsRequestPending( void )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800bd30:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <IsRequestPending+0x30>)
 800bd32:	4a0b      	ldr	r2, [pc, #44]	; (800bd60 <IsRequestPending+0x34>)
 800bd34:	5c9b      	ldrb	r3, [r3, r2]
 800bd36:	2204      	movs	r2, #4
 800bd38:	4013      	ands	r3, r2
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d107      	bne.n	800bd50 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800bd40:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <IsRequestPending+0x30>)
 800bd42:	4a07      	ldr	r2, [pc, #28]	; (800bd60 <IsRequestPending+0x34>)
 800bd44:	5c9b      	ldrb	r3, [r3, r2]
 800bd46:	2201      	movs	r2, #1
 800bd48:	4013      	ands	r3, r2
 800bd4a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <IsRequestPending+0x28>
    {
        return 1;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e000      	b.n	800bd56 <IsRequestPending+0x2a>
    }
    return 0;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	0018      	movs	r0, r3
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	200005fc 	.word	0x200005fc
 800bd60:	0000046d 	.word	0x0000046d

0800bd64 <LoRaMacClassBSetBeaconState>:
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	1dfb      	adds	r3, r7, #7
 800bd6e:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800bd70:	46c0      	nop			; (mov r8, r8)
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b002      	add	sp, #8
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	0002      	movs	r2, r0
 800bd80:	1dfb      	adds	r3, r7, #7
 800bd82:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bd84:	46c0      	nop			; (mov r8, r8)
 800bd86:	46bd      	mov	sp, r7
 800bd88:	b002      	add	sp, #8
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	0002      	movs	r2, r0
 800bd94:	1dfb      	adds	r3, r7, #7
 800bd96:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bd98:	46c0      	nop			; (mov r8, r8)
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <LoRaMacClassBBeaconTimerEvent>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bda8:	46c0      	nop			; (mov r8, r8)
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	b002      	add	sp, #8
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdb8:	46c0      	nop			; (mov r8, r8)
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	b002      	add	sp, #8
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdc8:	46c0      	nop			; (mov r8, r8)
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	b002      	add	sp, #8
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	000a      	movs	r2, r1
 800bdda:	1cbb      	adds	r3, r7, #2
 800bddc:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800bdde:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bde0:	0018      	movs	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	b002      	add	sp, #8
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800bdec:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdee:	0018      	movs	r0, r3
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800bdf8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800be04:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be06:	0018      	movs	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800be10:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be12:	0018      	movs	r0, r3
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <LoRaMacClassBHaltBeaconing>:
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBHaltBeaconing( void )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800be1c:	46c0      	nop			; (mov r8, r8)
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800be22:	b580      	push	{r7, lr}
 800be24:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800be26:	46c0      	nop			; (mov r8, r8)
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <LoRaMacClassBPingSlotInfoAns>:
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBPingSlotInfoAns( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800be30:	46c0      	nop			; (mov r8, r8)
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	0002      	movs	r2, r0
 800be3e:	6039      	str	r1, [r7, #0]
 800be40:	1dfb      	adds	r3, r7, #7
 800be42:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800be44:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be46:	0018      	movs	r0, r3
 800be48:	46bd      	mov	sp, r7
 800be4a:	b002      	add	sp, #8
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b082      	sub	sp, #8
 800be52:	af00      	add	r7, sp, #0
 800be54:	603a      	str	r2, [r7, #0]
 800be56:	1dbb      	adds	r3, r7, #6
 800be58:	1c02      	adds	r2, r0, #0
 800be5a:	801a      	strh	r2, [r3, #0]
 800be5c:	1d7b      	adds	r3, r7, #5
 800be5e:	1c0a      	adds	r2, r1, #0
 800be60:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	46bd      	mov	sp, r7
 800be66:	b002      	add	sp, #8
 800be68:	bd80      	pop	{r7, pc}

0800be6a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800be6e:	46c0      	nop			; (mov r8, r8)
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 800be7c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be7e:	0018      	movs	r0, r3
 800be80:	46bd      	mov	sp, r7
 800be82:	b002      	add	sp, #8
 800be84:	bd80      	pop	{r7, pc}

0800be86 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800be8e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be90:	0018      	movs	r0, r3
 800be92:	46bd      	mov	sp, r7
 800be94:	b002      	add	sp, #8
 800be96:	bd80      	pop	{r7, pc}

0800be98 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800be9c:	46c0      	nop			; (mov r8, r8)
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bea6:	46c0      	nop			; (mov r8, r8)
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800beb8:	230e      	movs	r3, #14
 800beba:	18fb      	adds	r3, r7, r3
 800bebc:	2200      	movs	r2, #0
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	e00f      	b.n	800bee2 <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800bec2:	230e      	movs	r3, #14
 800bec4:	18fb      	adds	r3, r7, r3
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	18d3      	adds	r3, r2, r3
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <isSlotFree+0x2a>
        {
            return false;
 800bed2:	2300      	movs	r3, #0
 800bed4:	e00b      	b.n	800beee <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bed6:	210e      	movs	r1, #14
 800bed8:	187b      	adds	r3, r7, r1
 800beda:	881a      	ldrh	r2, [r3, #0]
 800bedc:	187b      	adds	r3, r7, r1
 800bede:	3201      	adds	r2, #1
 800bee0:	801a      	strh	r2, [r3, #0]
 800bee2:	230e      	movs	r3, #14
 800bee4:	18fb      	adds	r3, r7, r3
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	2b0f      	cmp	r3, #15
 800beea:	d9ea      	bls.n	800bec2 <isSlotFree+0x16>
        }
    }
    return true;
 800beec:	2301      	movs	r3, #1
}
 800beee:	0018      	movs	r0, r3
 800bef0:	46bd      	mov	sp, r7
 800bef2:	b004      	add	sp, #16
 800bef4:	bd80      	pop	{r7, pc}
	...

0800bef8 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800befe:	1dfb      	adds	r3, r7, #7
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800bf04:	e00a      	b.n	800bf1c <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 800bf06:	1dfb      	adds	r3, r7, #7
 800bf08:	781a      	ldrb	r2, [r3, #0]
 800bf0a:	1dfb      	adds	r3, r7, #7
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800bf10:	1dfb      	adds	r3, r7, #7
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b0f      	cmp	r3, #15
 800bf16:	d101      	bne.n	800bf1c <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e017      	b.n	800bf4c <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800bf1c:	1dfb      	adds	r3, r7, #7
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	3308      	adds	r3, #8
 800bf24:	001a      	movs	r2, r3
 800bf26:	4b0b      	ldr	r3, [pc, #44]	; (800bf54 <mallocNewMacCommandSlot+0x5c>)
 800bf28:	18d3      	adds	r3, r2, r3
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f7ff ffbe 	bl	800beac <isSlotFree>
 800bf30:	0003      	movs	r3, r0
 800bf32:	001a      	movs	r2, r3
 800bf34:	2301      	movs	r3, #1
 800bf36:	4053      	eors	r3, r2
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e3      	bne.n	800bf06 <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800bf3e:	1dfb      	adds	r3, r7, #7
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	3308      	adds	r3, #8
 800bf46:	001a      	movs	r2, r3
 800bf48:	4b02      	ldr	r3, [pc, #8]	; (800bf54 <mallocNewMacCommandSlot+0x5c>)
 800bf4a:	18d3      	adds	r3, r2, r3
}
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	b002      	add	sp, #8
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20000a78 	.word	0x20000a78

0800bf58 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d101      	bne.n	800bf6a <freeMacCommandSlot+0x12>
    {
        return false;
 800bf66:	2300      	movs	r3, #0
 800bf68:	e006      	b.n	800bf78 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2210      	movs	r2, #16
 800bf6e:	2100      	movs	r1, #0
 800bf70:	0018      	movs	r0, r3
 800bf72:	f010 fedb 	bl	801cd2c <memset1>

    return true;
 800bf76:	2301      	movs	r3, #1
}
 800bf78:	0018      	movs	r0, r3
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <linkedListAdd+0x1a>
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <linkedListAdd+0x1a>
    {
        return false;
 800bf96:	2300      	movs	r3, #0
 800bf98:	e015      	b.n	800bfc6 <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <linkedListAdd+0x28>
    {
        list->First = element;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	605a      	str	r2, [r3, #4]

    return true;
 800bfc4:	2301      	movs	r3, #1
}
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	b002      	add	sp, #8
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d104      	bne.n	800bfe8 <linkedListGetPrevious+0x1a>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <linkedListGetPrevious+0x1a>
    {
        return NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	e016      	b.n	800c016 <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d00c      	beq.n	800c010 <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 800bff6:	e002      	b.n	800bffe <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d007      	beq.n	800c014 <linkedListGetPrevious+0x46>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d1f4      	bne.n	800bff8 <linkedListGetPrevious+0x2a>
 800c00e:	e001      	b.n	800c014 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800c014:	68fb      	ldr	r3, [r7, #12]
}
 800c016:	0018      	movs	r0, r3
 800c018:	46bd      	mov	sp, r7
 800c01a:	b004      	add	sp, #16
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d104      	bne.n	800c038 <linkedListRemove+0x1a>
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <linkedListRemove+0x1a>
    {
        return false;
 800c034:	2300      	movs	r3, #0
 800c036:	e023      	b.n	800c080 <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	0011      	movs	r1, r2
 800c03e:	0018      	movs	r0, r3
 800c040:	f7ff ffc5 	bl	800bfce <linkedListGetPrevious>
 800c044:	0003      	movs	r3, r0
 800c046:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d103      	bne.n	800c05a <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	429a      	cmp	r2, r3
 800c062:	d102      	bne.n	800c06a <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]

    return true;
 800c07e:	2301      	movs	r3, #1
}
 800c080:	0018      	movs	r0, r3
 800c082:	46bd      	mov	sp, r7
 800c084:	b004      	add	sp, #16
 800c086:	bd80      	pop	{r7, pc}

0800c088 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	0002      	movs	r2, r0
 800c090:	1dfb      	adds	r3, r7, #7
 800c092:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800c094:	1dfb      	adds	r3, r7, #7
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d003      	beq.n	800c0a4 <IsSticky+0x1c>
 800c09c:	2b0a      	cmp	r3, #10
 800c09e:	d001      	beq.n	800c0a4 <IsSticky+0x1c>
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	d101      	bne.n	800c0a8 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e000      	b.n	800c0aa <IsSticky+0x22>
        default:
            return false;
 800c0a8:	2300      	movs	r3, #0
    }
}
 800c0aa:	0018      	movs	r0, r3
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	b002      	add	sp, #8
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800c0b8:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <NvmCtxCallback+0x18>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800c0c0:	4b02      	ldr	r3, [pc, #8]	; (800c0cc <NvmCtxCallback+0x18>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4798      	blx	r3
    }
}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	20000a74 	.word	0x20000a74

0800c0d0 <LoRaMacCommandsAddCmd>:
    *commandsNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 800c0d0:	b590      	push	{r4, r7, lr}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	607a      	str	r2, [r7, #4]
 800c0da:	230f      	movs	r3, #15
 800c0dc:	18fb      	adds	r3, r7, r3
 800c0de:	1c02      	adds	r2, r0, #0
 800c0e0:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d101      	bne.n	800c0ec <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e03c      	b.n	800c166 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 800c0ec:	f7ff ff04 	bl	800bef8 <mallocNewMacCommandSlot>
 800c0f0:	0003      	movs	r3, r0
 800c0f2:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d101      	bne.n	800c0fe <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	e033      	b.n	800c166 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	4b1b      	ldr	r3, [pc, #108]	; (800c170 <LoRaMacCommandsAddCmd+0xa0>)
 800c102:	0011      	movs	r1, r2
 800c104:	0018      	movs	r0, r3
 800c106:	f7ff ff3b 	bl	800bf80 <linkedListAdd>
 800c10a:	0003      	movs	r3, r0
 800c10c:	001a      	movs	r2, r3
 800c10e:	2301      	movs	r3, #1
 800c110:	4053      	eors	r3, r2
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 800c118:	2305      	movs	r3, #5
 800c11a:	e024      	b.n	800c166 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	240f      	movs	r4, #15
 800c120:	193a      	adds	r2, r7, r4
 800c122:	7812      	ldrb	r2, [r2, #0]
 800c124:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	3305      	adds	r3, #5
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	b292      	uxth	r2, r2
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	0018      	movs	r0, r3
 800c138:	f010 fdbc 	bl	801ccb4 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c13c:	193b      	adds	r3, r7, r4
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	0018      	movs	r0, r3
 800c142:	f7ff ffa1 	bl	800c088 <IsSticky>
 800c146:	0003      	movs	r3, r0
 800c148:	001a      	movs	r2, r3
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c14e:	4b08      	ldr	r3, [pc, #32]	; (800c170 <LoRaMacCommandsAddCmd+0xa0>)
 800c150:	22f8      	movs	r2, #248	; 0xf8
 800c152:	589a      	ldr	r2, [r3, r2]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	18d3      	adds	r3, r2, r3
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <LoRaMacCommandsAddCmd+0xa0>)
 800c15c:	21f8      	movs	r1, #248	; 0xf8
 800c15e:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 800c160:	f7ff ffa8 	bl	800c0b4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800c164:	2300      	movs	r3, #0
}
 800c166:	0018      	movs	r0, r3
 800c168:	46bd      	mov	sp, r7
 800c16a:	b007      	add	sp, #28
 800c16c:	bd90      	pop	{r4, r7, pc}
 800c16e:	46c0      	nop			; (mov r8, r8)
 800c170:	20000a78 	.word	0x20000a78

0800c174 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c182:	2301      	movs	r3, #1
 800c184:	e028      	b.n	800c1d8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <LoRaMacCommandsRemoveCmd+0x6c>)
 800c18a:	0011      	movs	r1, r2
 800c18c:	0018      	movs	r0, r3
 800c18e:	f7ff ff46 	bl	800c01e <linkedListRemove>
 800c192:	0003      	movs	r3, r0
 800c194:	001a      	movs	r2, r3
 800c196:	2301      	movs	r3, #1
 800c198:	4053      	eors	r3, r2
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e019      	b.n	800c1d8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c1a4:	4b0e      	ldr	r3, [pc, #56]	; (800c1e0 <LoRaMacCommandsRemoveCmd+0x6c>)
 800c1a6:	22f8      	movs	r2, #248	; 0xf8
 800c1a8:	589a      	ldr	r2, [r3, r2]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	1e5a      	subs	r2, r3, #1
 800c1b2:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <LoRaMacCommandsRemoveCmd+0x6c>)
 800c1b4:	21f8      	movs	r1, #248	; 0xf8
 800c1b6:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	0018      	movs	r0, r3
 800c1bc:	f7ff fecc 	bl	800bf58 <freeMacCommandSlot>
 800c1c0:	0003      	movs	r3, r0
 800c1c2:	001a      	movs	r2, r3
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4053      	eors	r3, r2
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 800c1ce:	2305      	movs	r3, #5
 800c1d0:	e002      	b.n	800c1d8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 800c1d2:	f7ff ff6f 	bl	800c0b4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	0018      	movs	r0, r3
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	b002      	add	sp, #8
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20000a78 	.word	0x20000a78

0800c1e4 <LoRaMacCommandsRemoveStickyAnsCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800c1ea:	4b1a      	ldr	r3, [pc, #104]	; (800c254 <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 800c1f0:	e026      	b.n	800c240 <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	7b1b      	ldrb	r3, [r3, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01d      	beq.n	800c23c <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800c200:	230b      	movs	r3, #11
 800c202:	18fb      	adds	r3, r7, r3
 800c204:	2200      	movs	r2, #0
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	e013      	b.n	800c232 <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	791a      	ldrb	r2, [r3, #4]
 800c20e:	230b      	movs	r3, #11
 800c210:	18fb      	adds	r3, r7, r3
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	4910      	ldr	r1, [pc, #64]	; (800c258 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 800c216:	5ccb      	ldrb	r3, [r1, r3]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d104      	bne.n	800c226 <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	0018      	movs	r0, r3
 800c220:	f7ff ffa8 	bl	800c174 <LoRaMacCommandsRemoveCmd>
                    break;
 800c224:	e00a      	b.n	800c23c <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800c226:	210b      	movs	r1, #11
 800c228:	187b      	adds	r3, r7, r1
 800c22a:	781a      	ldrb	r2, [r3, #0]
 800c22c:	187b      	adds	r3, r7, r1
 800c22e:	3201      	adds	r2, #1
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	230b      	movs	r3, #11
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d9e6      	bls.n	800c20a <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1d5      	bne.n	800c1f2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 800c246:	f7ff ff35 	bl	800c0b4 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	0018      	movs	r0, r3
 800c24e:	46bd      	mov	sp, r7
 800c250:	b004      	add	sp, #16
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20000a78 	.word	0x20000a78
 800c258:	080285c4 	.word	0x080285c4

0800c25c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e005      	b.n	800c27a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800c270:	22f8      	movs	r2, #248	; 0xf8
 800c272:	589a      	ldr	r2, [r3, r2]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c278:	2300      	movs	r3, #0

}
 800c27a:	0018      	movs	r0, r3
 800c27c:	46bd      	mov	sp, r7
 800c27e:	b002      	add	sp, #8
 800c280:	bd80      	pop	{r7, pc}
 800c282:	46c0      	nop			; (mov r8, r8)
 800c284:	20000a78 	.word	0x20000a78

0800c288 <LoRaMacCommandsStickyCmdsPending>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c296:	2301      	movs	r3, #1
 800c298:	e016      	b.n	800c2c8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800c29a:	4b0d      	ldr	r3, [pc, #52]	; (800c2d0 <LoRaMacCommandsStickyCmdsPending+0x48>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 800c2a6:	e00b      	b.n	800c2c0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	7b1b      	ldrb	r3, [r3, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d004      	beq.n	800c2ba <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e006      	b.n	800c2c8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
    while( curElement )
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1f0      	bne.n	800c2a8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	b004      	add	sp, #16
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20000a78 	.word	0x20000a78

0800c2d4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c2dc:	4b08      	ldr	r3, [pc, #32]	; (800c300 <IncreaseBufferPointer+0x2c>)
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	3310      	adds	r3, #16
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d103      	bne.n	800c2f0 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c2e8:	4b05      	ldr	r3, [pc, #20]	; (800c300 <IncreaseBufferPointer+0x2c>)
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	607b      	str	r3, [r7, #4]
 800c2ee:	e002      	b.n	800c2f6 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800c2f6:	687b      	ldr	r3, [r7, #4]
}
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	b002      	add	sp, #8
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20000b74 	.word	0x20000b74

0800c304 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	230f      	movs	r3, #15
 800c310:	18fb      	adds	r3, r7, r3
 800c312:	1c02      	adds	r2, r0, #0
 800c314:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 800c31a:	e00e      	b.n	800c33a <GetElement+0x36>
    {
        if( element->Request == request )
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	220f      	movs	r2, #15
 800c322:	18ba      	adds	r2, r7, r2
 800c324:	7812      	ldrb	r2, [r2, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d101      	bne.n	800c32e <GetElement+0x2a>
        {
            // We have found the element
            return element;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	e00a      	b.n	800c344 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	0018      	movs	r0, r3
 800c332:	f7ff ffcf 	bl	800c2d4 <IncreaseBufferPointer>
 800c336:	0003      	movs	r3, r0
 800c338:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d1ec      	bne.n	800c31c <GetElement+0x18>
        }
    }
    return NULL;
 800c342:	2300      	movs	r3, #0
}
 800c344:	0018      	movs	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	b006      	add	sp, #24
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <LoRaMacConfirmQueueAdd>:
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    return &ConfirmQueueNvmCtx;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c354:	4b16      	ldr	r3, [pc, #88]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	7d1b      	ldrb	r3, [r3, #20]
 800c35a:	2b04      	cmp	r3, #4
 800c35c:	d901      	bls.n	800c362 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 800c35e:	2300      	movs	r3, #0
 800c360:	e021      	b.n	800c3a6 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c362:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	7812      	ldrb	r2, [r2, #0]
 800c36a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c36c:	4b10      	ldr	r3, [pc, #64]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	7852      	ldrb	r2, [r2, #1]
 800c374:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c376:	4b0e      	ldr	r3, [pc, #56]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	78d2      	ldrb	r2, [r2, #3]
 800c37e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800c380:	4b0b      	ldr	r3, [pc, #44]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2200      	movs	r2, #0
 800c386:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800c388:	4b09      	ldr	r3, [pc, #36]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	7d1a      	ldrb	r2, [r3, #20]
 800c38e:	3201      	adds	r2, #1
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c394:	4b06      	ldr	r3, [pc, #24]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	0018      	movs	r0, r3
 800c39a:	f7ff ff9b 	bl	800c2d4 <IncreaseBufferPointer>
 800c39e:	0002      	movs	r2, r0
 800c3a0:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <LoRaMacConfirmQueueAdd+0x64>)
 800c3a2:	609a      	str	r2, [r3, #8]

    return true;
 800c3a4:	2301      	movs	r3, #1
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	b002      	add	sp, #8
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	20000b74 	.word	0x20000b74

0800c3b4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800c3b8:	4b0c      	ldr	r3, [pc, #48]	; (800c3ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	7d1b      	ldrb	r3, [r3, #20]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e00e      	b.n	800c3e4 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800c3c6:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	7d1a      	ldrb	r2, [r3, #20]
 800c3cc:	3a01      	subs	r2, #1
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c3d2:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f7ff ff7c 	bl	800c2d4 <IncreaseBufferPointer>
 800c3dc:	0002      	movs	r2, r0
 800c3de:	4b03      	ldr	r3, [pc, #12]	; (800c3ec <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3e0:	605a      	str	r2, [r3, #4]

    return true;
 800c3e2:	2301      	movs	r3, #1
}
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	46c0      	nop			; (mov r8, r8)
 800c3ec:	20000b74 	.word	0x20000b74

0800c3f0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	0002      	movs	r2, r0
 800c3f8:	1dfb      	adds	r3, r7, #7
 800c3fa:	701a      	strb	r2, [r3, #0]
 800c3fc:	1dbb      	adds	r3, r7, #6
 800c3fe:	1c0a      	adds	r2, r1, #0
 800c400:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800c402:	2300      	movs	r3, #0
 800c404:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c406:	4b0f      	ldr	r3, [pc, #60]	; (800c444 <LoRaMacConfirmQueueSetStatus+0x54>)
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	7d1b      	ldrb	r3, [r3, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d014      	beq.n	800c43a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c410:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <LoRaMacConfirmQueueSetStatus+0x54>)
 800c412:	6859      	ldr	r1, [r3, #4]
 800c414:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <LoRaMacConfirmQueueSetStatus+0x54>)
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	1dbb      	adds	r3, r7, #6
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	0018      	movs	r0, r3
 800c41e:	f7ff ff71 	bl	800c304 <GetElement>
 800c422:	0003      	movs	r3, r0
 800c424:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d006      	beq.n	800c43a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	1dfa      	adds	r2, r7, #7
 800c430:	7812      	ldrb	r2, [r2, #0]
 800c432:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2201      	movs	r2, #1
 800c438:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	46bd      	mov	sp, r7
 800c43e:	b004      	add	sp, #16
 800c440:	bd80      	pop	{r7, pc}
 800c442:	46c0      	nop			; (mov r8, r8)
 800c444:	20000b74 	.word	0x20000b74

0800c448 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	0002      	movs	r2, r0
 800c450:	1dfb      	adds	r3, r7, #7
 800c452:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800c454:	2300      	movs	r3, #0
 800c456:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c458:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <LoRaMacConfirmQueueGetStatus+0x48>)
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	7d1b      	ldrb	r3, [r3, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d010      	beq.n	800c484 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c462:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <LoRaMacConfirmQueueGetStatus+0x48>)
 800c464:	6859      	ldr	r1, [r3, #4]
 800c466:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <LoRaMacConfirmQueueGetStatus+0x48>)
 800c468:	689a      	ldr	r2, [r3, #8]
 800c46a:	1dfb      	adds	r3, r7, #7
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	0018      	movs	r0, r3
 800c470:	f7ff ff48 	bl	800c304 <GetElement>
 800c474:	0003      	movs	r3, r0
 800c476:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	785b      	ldrb	r3, [r3, #1]
 800c482:	e000      	b.n	800c486 <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c484:	2301      	movs	r3, #1
}
 800c486:	0018      	movs	r0, r3
 800c488:	46bd      	mov	sp, r7
 800c48a:	b004      	add	sp, #16
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	46c0      	nop			; (mov r8, r8)
 800c490:	20000b74 	.word	0x20000b74

0800c494 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	0002      	movs	r2, r0
 800c49c:	1dfb      	adds	r3, r7, #7
 800c49e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c4a0:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800c4a6:	4b13      	ldr	r3, [pc, #76]	; (800c4f4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	1dfa      	adds	r2, r7, #7
 800c4ac:	7812      	ldrb	r2, [r2, #0]
 800c4ae:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c4b0:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	7d1b      	ldrb	r3, [r3, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d018      	beq.n	800c4ec <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	1dfa      	adds	r2, r7, #7
 800c4be:	7812      	ldrb	r2, [r2, #0]
 800c4c0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	78db      	ldrb	r3, [r3, #3]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4053      	eors	r3, r2
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f7ff fefb 	bl	800c2d4 <IncreaseBufferPointer>
 800c4de:	0003      	movs	r3, r0
 800c4e0:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c4e2:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d1e6      	bne.n	800c4ba <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 800c4ec:	46c0      	nop			; (mov r8, r8)
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	b004      	add	sp, #16
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	20000b74 	.word	0x20000b74

0800c4f8 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 800c4fc:	4b02      	ldr	r3, [pc, #8]	; (800c508 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	7d5b      	ldrb	r3, [r3, #21]
}
 800c502:	0018      	movs	r0, r3
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20000b74 	.word	0x20000b74

0800c50c <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	0002      	movs	r2, r0
 800c514:	1dfb      	adds	r3, r7, #7
 800c516:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c518:	4b08      	ldr	r3, [pc, #32]	; (800c53c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800c51a:	6859      	ldr	r1, [r3, #4]
 800c51c:	4b07      	ldr	r3, [pc, #28]	; (800c53c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	1dfb      	adds	r3, r7, #7
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	0018      	movs	r0, r3
 800c526:	f7ff feed 	bl	800c304 <GetElement>
 800c52a:	1e03      	subs	r3, r0, #0
 800c52c:	d001      	beq.n	800c532 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 800c532:	2300      	movs	r3, #0
}
 800c534:	0018      	movs	r0, r3
 800c536:	46bd      	mov	sp, r7
 800c538:	b002      	add	sp, #8
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20000b74 	.word	0x20000b74

0800c540 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c548:	4b2d      	ldr	r3, [pc, #180]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c54a:	691a      	ldr	r2, [r3, #16]
 800c54c:	230e      	movs	r3, #14
 800c54e:	18fb      	adds	r3, r7, r3
 800c550:	7d12      	ldrb	r2, [r2, #20]
 800c552:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 800c554:	230d      	movs	r3, #13
 800c556:	18fb      	adds	r3, r7, r3
 800c558:	2200      	movs	r2, #0
 800c55a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800c55c:	230f      	movs	r3, #15
 800c55e:	18fb      	adds	r3, r7, r3
 800c560:	2200      	movs	r2, #0
 800c562:	701a      	strb	r2, [r3, #0]
 800c564:	e03f      	b.n	800c5e6 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c566:	4b26      	ldr	r3, [pc, #152]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c570:	4b23      	ldr	r3, [pc, #140]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	785a      	ldrb	r2, [r3, #1]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c57a:	4b21      	ldr	r3, [pc, #132]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	210d      	movs	r1, #13
 800c580:	187b      	adds	r3, r7, r1
 800c582:	7892      	ldrb	r2, [r2, #2]
 800c584:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 800c586:	187b      	adds	r3, r7, r1
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d006      	beq.n	800c59c <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c58e:	4b1c      	ldr	r3, [pc, #112]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	0010      	movs	r0, r2
 800c598:	4798      	blx	r3
 800c59a:	e00f      	b.n	800c5bc <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c59c:	4b18      	ldr	r3, [pc, #96]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	781a      	ldrb	r2, [r3, #0]
 800c5a2:	2108      	movs	r1, #8
 800c5a4:	187b      	adds	r3, r7, r1
 800c5a6:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c5a8:	4b15      	ldr	r3, [pc, #84]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	785a      	ldrb	r2, [r3, #1]
 800c5ae:	187b      	adds	r3, r7, r1
 800c5b0:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c5b2:	4b13      	ldr	r3, [pc, #76]	; (800c600 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	78da      	ldrb	r2, [r3, #3]
 800c5b8:	187b      	adds	r3, r7, r1
 800c5ba:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c5bc:	f7ff fefa 	bl	800c3b4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c5c0:	230d      	movs	r3, #13
 800c5c2:	18fb      	adds	r3, r7, r3
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	4053      	eors	r3, r2
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	18fb      	adds	r3, r7, r3
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	f7ff feb9 	bl	800c34c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c5da:	210f      	movs	r1, #15
 800c5dc:	187b      	adds	r3, r7, r1
 800c5de:	781a      	ldrb	r2, [r3, #0]
 800c5e0:	187b      	adds	r3, r7, r1
 800c5e2:	3201      	adds	r2, #1
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	230f      	movs	r3, #15
 800c5e8:	18fa      	adds	r2, r7, r3
 800c5ea:	230e      	movs	r3, #14
 800c5ec:	18fb      	adds	r3, r7, r3
 800c5ee:	7812      	ldrb	r2, [r2, #0]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d3b7      	bcc.n	800c566 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 800c5f6:	46c0      	nop			; (mov r8, r8)
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b004      	add	sp, #16
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	46c0      	nop			; (mov r8, r8)
 800c600:	20000b74 	.word	0x20000b74

0800c604 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c608:	4b02      	ldr	r3, [pc, #8]	; (800c614 <LoRaMacConfirmQueueGetCnt+0x10>)
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	7d1b      	ldrb	r3, [r3, #20]
}
 800c60e:	0018      	movs	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20000b74 	.word	0x20000b74

0800c618 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800c618:	b590      	push	{r4, r7, lr}
 800c61a:	b08f      	sub	sp, #60	; 0x3c
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	0008      	movs	r0, r1
 800c622:	0011      	movs	r1, r2
 800c624:	607b      	str	r3, [r7, #4]
 800c626:	230a      	movs	r3, #10
 800c628:	18fb      	adds	r3, r7, r3
 800c62a:	1c02      	adds	r2, r0, #0
 800c62c:	801a      	strh	r2, [r3, #0]
 800c62e:	2309      	movs	r3, #9
 800c630:	18fb      	adds	r3, r7, r3
 800c632:	1c0a      	adds	r2, r1, #0
 800c634:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c63c:	2307      	movs	r3, #7
 800c63e:	e0e9      	b.n	800c814 <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 800c640:	2337      	movs	r3, #55	; 0x37
 800c642:	18fb      	adds	r3, r7, r3
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 800c648:	2334      	movs	r3, #52	; 0x34
 800c64a:	18fb      	adds	r3, r7, r3
 800c64c:	2201      	movs	r2, #1
 800c64e:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800c650:	2320      	movs	r3, #32
 800c652:	18fb      	adds	r3, r7, r3
 800c654:	0018      	movs	r0, r3
 800c656:	2310      	movs	r3, #16
 800c658:	001a      	movs	r2, r3
 800c65a:	2100      	movs	r1, #0
 800c65c:	f019 fc54 	bl	8025f08 <memset>
    uint8_t aBlock[16] = { 0 };
 800c660:	2110      	movs	r1, #16
 800c662:	000c      	movs	r4, r1
 800c664:	187b      	adds	r3, r7, r1
 800c666:	0018      	movs	r0, r3
 800c668:	2310      	movs	r3, #16
 800c66a:	001a      	movs	r2, r3
 800c66c:	2100      	movs	r1, #0
 800c66e:	f019 fc4b 	bl	8025f08 <memset>

    aBlock[0] = 0x01;
 800c672:	0021      	movs	r1, r4
 800c674:	187b      	adds	r3, r7, r1
 800c676:	2201      	movs	r2, #1
 800c678:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 800c67a:	187b      	adds	r3, r7, r1
 800c67c:	2240      	movs	r2, #64	; 0x40
 800c67e:	2008      	movs	r0, #8
 800c680:	4684      	mov	ip, r0
 800c682:	44bc      	add	ip, r7
 800c684:	4462      	add	r2, ip
 800c686:	7812      	ldrb	r2, [r2, #0]
 800c688:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	b2da      	uxtb	r2, r3
 800c68e:	187b      	adds	r3, r7, r1
 800c690:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	0a1b      	lsrs	r3, r3, #8
 800c696:	b2da      	uxtb	r2, r3
 800c698:	187b      	adds	r3, r7, r1
 800c69a:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	0c1b      	lsrs	r3, r3, #16
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	187b      	adds	r3, r7, r1
 800c6a4:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	0e1b      	lsrs	r3, r3, #24
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	187b      	adds	r3, r7, r1
 800c6ae:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800c6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	187b      	adds	r3, r7, r1
 800c6b6:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c6b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ba:	0a1b      	lsrs	r3, r3, #8
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	187b      	adds	r3, r7, r1
 800c6c0:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c4:	0c1b      	lsrs	r3, r3, #16
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	187b      	adds	r3, r7, r1
 800c6ca:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ce:	0e1b      	lsrs	r3, r3, #24
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	187b      	adds	r3, r7, r1
 800c6d4:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 800c6d6:	e04f      	b.n	800c778 <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 800c6d8:	2134      	movs	r1, #52	; 0x34
 800c6da:	187b      	adds	r3, r7, r1
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	2010      	movs	r0, #16
 800c6e2:	183b      	adds	r3, r7, r0
 800c6e4:	73da      	strb	r2, [r3, #15]
        ctr++;
 800c6e6:	187b      	adds	r3, r7, r1
 800c6e8:	881a      	ldrh	r2, [r3, #0]
 800c6ea:	187b      	adds	r3, r7, r1
 800c6ec:	3201      	adds	r2, #1
 800c6ee:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c6f0:	2320      	movs	r3, #32
 800c6f2:	18f9      	adds	r1, r7, r3
 800c6f4:	2309      	movs	r3, #9
 800c6f6:	18fb      	adds	r3, r7, r3
 800c6f8:	781a      	ldrb	r2, [r3, #0]
 800c6fa:	1838      	adds	r0, r7, r0
 800c6fc:	000b      	movs	r3, r1
 800c6fe:	2110      	movs	r1, #16
 800c700:	f7fc fbd2 	bl	8008ea8 <SecureElementAesEncrypt>
 800c704:	1e03      	subs	r3, r0, #0
 800c706:	d001      	beq.n	800c70c <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c708:	230c      	movs	r3, #12
 800c70a:	e083      	b.n	800c814 <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 800c70c:	2333      	movs	r3, #51	; 0x33
 800c70e:	18fb      	adds	r3, r7, r3
 800c710:	2200      	movs	r2, #0
 800c712:	701a      	strb	r2, [r3, #0]
 800c714:	e01f      	b.n	800c756 <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c716:	2037      	movs	r0, #55	; 0x37
 800c718:	183b      	adds	r3, r7, r0
 800c71a:	781a      	ldrb	r2, [r3, #0]
 800c71c:	2433      	movs	r4, #51	; 0x33
 800c71e:	193b      	adds	r3, r7, r4
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	18d3      	adds	r3, r2, r3
 800c724:	001a      	movs	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	189b      	adds	r3, r3, r2
 800c72a:	7819      	ldrb	r1, [r3, #0]
 800c72c:	193b      	adds	r3, r7, r4
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2220      	movs	r2, #32
 800c732:	18ba      	adds	r2, r7, r2
 800c734:	5cd2      	ldrb	r2, [r2, r3]
 800c736:	183b      	adds	r3, r7, r0
 800c738:	7818      	ldrb	r0, [r3, #0]
 800c73a:	193b      	adds	r3, r7, r4
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	18c3      	adds	r3, r0, r3
 800c740:	0018      	movs	r0, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	181b      	adds	r3, r3, r0
 800c746:	404a      	eors	r2, r1
 800c748:	b2d2      	uxtb	r2, r2
 800c74a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 800c74c:	193b      	adds	r3, r7, r4
 800c74e:	781a      	ldrb	r2, [r3, #0]
 800c750:	193b      	adds	r3, r7, r4
 800c752:	3201      	adds	r2, #1
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	2333      	movs	r3, #51	; 0x33
 800c758:	18fb      	adds	r3, r7, r3
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	2b0f      	cmp	r3, #15
 800c75e:	d9da      	bls.n	800c716 <PayloadEncrypt+0xfe>
        }
        size -= 16;
 800c760:	220a      	movs	r2, #10
 800c762:	18bb      	adds	r3, r7, r2
 800c764:	18ba      	adds	r2, r7, r2
 800c766:	8812      	ldrh	r2, [r2, #0]
 800c768:	3a10      	subs	r2, #16
 800c76a:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 800c76c:	2237      	movs	r2, #55	; 0x37
 800c76e:	18bb      	adds	r3, r7, r2
 800c770:	18ba      	adds	r2, r7, r2
 800c772:	7812      	ldrb	r2, [r2, #0]
 800c774:	3210      	adds	r2, #16
 800c776:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 800c778:	230a      	movs	r3, #10
 800c77a:	18fb      	adds	r3, r7, r3
 800c77c:	881b      	ldrh	r3, [r3, #0]
 800c77e:	2b0f      	cmp	r3, #15
 800c780:	d8aa      	bhi.n	800c6d8 <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 800c782:	230a      	movs	r3, #10
 800c784:	18fb      	adds	r3, r7, r3
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d042      	beq.n	800c812 <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 800c78c:	2334      	movs	r3, #52	; 0x34
 800c78e:	18fb      	adds	r3, r7, r3
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	b2da      	uxtb	r2, r3
 800c794:	2010      	movs	r0, #16
 800c796:	183b      	adds	r3, r7, r0
 800c798:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c79a:	2320      	movs	r3, #32
 800c79c:	18f9      	adds	r1, r7, r3
 800c79e:	2309      	movs	r3, #9
 800c7a0:	18fb      	adds	r3, r7, r3
 800c7a2:	781a      	ldrb	r2, [r3, #0]
 800c7a4:	1838      	adds	r0, r7, r0
 800c7a6:	000b      	movs	r3, r1
 800c7a8:	2110      	movs	r1, #16
 800c7aa:	f7fc fb7d 	bl	8008ea8 <SecureElementAesEncrypt>
 800c7ae:	1e03      	subs	r3, r0, #0
 800c7b0:	d001      	beq.n	800c7b6 <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c7b2:	230c      	movs	r3, #12
 800c7b4:	e02e      	b.n	800c814 <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 800c7b6:	2332      	movs	r3, #50	; 0x32
 800c7b8:	18fb      	adds	r3, r7, r3
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	701a      	strb	r2, [r3, #0]
 800c7be:	e01f      	b.n	800c800 <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c7c0:	2037      	movs	r0, #55	; 0x37
 800c7c2:	183b      	adds	r3, r7, r0
 800c7c4:	781a      	ldrb	r2, [r3, #0]
 800c7c6:	2432      	movs	r4, #50	; 0x32
 800c7c8:	193b      	adds	r3, r7, r4
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	18d3      	adds	r3, r2, r3
 800c7ce:	001a      	movs	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	189b      	adds	r3, r3, r2
 800c7d4:	7819      	ldrb	r1, [r3, #0]
 800c7d6:	193b      	adds	r3, r7, r4
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	18ba      	adds	r2, r7, r2
 800c7de:	5cd2      	ldrb	r2, [r2, r3]
 800c7e0:	183b      	adds	r3, r7, r0
 800c7e2:	7818      	ldrb	r0, [r3, #0]
 800c7e4:	193b      	adds	r3, r7, r4
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	18c3      	adds	r3, r0, r3
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	181b      	adds	r3, r3, r0
 800c7f0:	404a      	eors	r2, r1
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 800c7f6:	193b      	adds	r3, r7, r4
 800c7f8:	781a      	ldrb	r2, [r3, #0]
 800c7fa:	193b      	adds	r3, r7, r4
 800c7fc:	3201      	adds	r2, #1
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	2332      	movs	r3, #50	; 0x32
 800c802:	18fb      	adds	r3, r7, r3
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	b29b      	uxth	r3, r3
 800c808:	220a      	movs	r2, #10
 800c80a:	18ba      	adds	r2, r7, r2
 800c80c:	8812      	ldrh	r2, [r2, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d8d6      	bhi.n	800c7c0 <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c812:	2300      	movs	r3, #0
}
 800c814:	0018      	movs	r0, r3
 800c816:	46bd      	mov	sp, r7
 800c818:	b00f      	add	sp, #60	; 0x3c
 800c81a:	bd90      	pop	{r4, r7, pc}

0800c81c <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 800c81c:	b590      	push	{r4, r7, lr}
 800c81e:	b08d      	sub	sp, #52	; 0x34
 800c820:	af00      	add	r7, sp, #0
 800c822:	0004      	movs	r4, r0
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	0010      	movs	r0, r2
 800c828:	0019      	movs	r1, r3
 800c82a:	1dbb      	adds	r3, r7, #6
 800c82c:	1c22      	adds	r2, r4, #0
 800c82e:	801a      	strh	r2, [r3, #0]
 800c830:	1d7b      	adds	r3, r7, #5
 800c832:	1c02      	adds	r2, r0, #0
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	1d3b      	adds	r3, r7, #4
 800c838:	1c0a      	adds	r2, r1, #0
 800c83a:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800c83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c842:	2307      	movs	r3, #7
 800c844:	e09b      	b.n	800c97e <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 800c846:	232e      	movs	r3, #46	; 0x2e
 800c848:	18fb      	adds	r3, r7, r3
 800c84a:	2200      	movs	r2, #0
 800c84c:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800c84e:	231c      	movs	r3, #28
 800c850:	18fb      	adds	r3, r7, r3
 800c852:	0018      	movs	r0, r3
 800c854:	2310      	movs	r3, #16
 800c856:	001a      	movs	r2, r3
 800c858:	2100      	movs	r1, #0
 800c85a:	f019 fb55 	bl	8025f08 <memset>
    uint8_t aBlock[16] = { 0 };
 800c85e:	240c      	movs	r4, #12
 800c860:	193b      	adds	r3, r7, r4
 800c862:	0018      	movs	r0, r3
 800c864:	2310      	movs	r3, #16
 800c866:	001a      	movs	r2, r3
 800c868:	2100      	movs	r1, #0
 800c86a:	f019 fb4d 	bl	8025f08 <memset>

    aBlock[0] = 0x01;
 800c86e:	193b      	adds	r3, r7, r4
 800c870:	2201      	movs	r2, #1
 800c872:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 800c874:	1d3b      	adds	r3, r7, #4
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d008      	beq.n	800c88e <FOptsEncrypt+0x72>
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d00b      	beq.n	800c898 <FOptsEncrypt+0x7c>
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10e      	bne.n	800c8a2 <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 800c884:	230c      	movs	r3, #12
 800c886:	18fb      	adds	r3, r7, r3
 800c888:	2201      	movs	r2, #1
 800c88a:	711a      	strb	r2, [r3, #4]
            break;
 800c88c:	e00b      	b.n	800c8a6 <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 800c88e:	230c      	movs	r3, #12
 800c890:	18fb      	adds	r3, r7, r3
 800c892:	2201      	movs	r2, #1
 800c894:	711a      	strb	r2, [r3, #4]
            break;
 800c896:	e006      	b.n	800c8a6 <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 800c898:	230c      	movs	r3, #12
 800c89a:	18fb      	adds	r3, r7, r3
 800c89c:	2202      	movs	r2, #2
 800c89e:	711a      	strb	r2, [r3, #4]
            break;
 800c8a0:	e001      	b.n	800c8a6 <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 800c8a2:	2306      	movs	r3, #6
 800c8a4:	e06b      	b.n	800c97e <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 800c8a6:	210c      	movs	r1, #12
 800c8a8:	187b      	adds	r3, r7, r1
 800c8aa:	1d7a      	adds	r2, r7, #5
 800c8ac:	7812      	ldrb	r2, [r2, #0]
 800c8ae:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	187b      	adds	r3, r7, r1
 800c8b6:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	0a1b      	lsrs	r3, r3, #8
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	187b      	adds	r3, r7, r1
 800c8c0:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	0c1b      	lsrs	r3, r3, #16
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	187b      	adds	r3, r7, r1
 800c8ca:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	0e1b      	lsrs	r3, r3, #24
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	187b      	adds	r3, r7, r1
 800c8d4:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800c8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	187b      	adds	r3, r7, r1
 800c8dc:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	0a1b      	lsrs	r3, r3, #8
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	187b      	adds	r3, r7, r1
 800c8e6:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ea:	0c1b      	lsrs	r3, r3, #16
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f4:	0e1b      	lsrs	r3, r3, #24
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	187b      	adds	r3, r7, r1
 800c8fa:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 800c8fc:	187b      	adds	r3, r7, r1
 800c8fe:	2201      	movs	r2, #1
 800c900:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 800c902:	1dbb      	adds	r3, r7, #6
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d038      	beq.n	800c97c <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c90a:	231c      	movs	r3, #28
 800c90c:	18fb      	adds	r3, r7, r3
 800c90e:	220c      	movs	r2, #12
 800c910:	18b8      	adds	r0, r7, r2
 800c912:	2206      	movs	r2, #6
 800c914:	2110      	movs	r1, #16
 800c916:	f7fc fac7 	bl	8008ea8 <SecureElementAesEncrypt>
 800c91a:	1e03      	subs	r3, r0, #0
 800c91c:	d001      	beq.n	800c922 <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c91e:	230c      	movs	r3, #12
 800c920:	e02d      	b.n	800c97e <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 800c922:	232f      	movs	r3, #47	; 0x2f
 800c924:	18fb      	adds	r3, r7, r3
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
 800c92a:	e01f      	b.n	800c96c <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c92c:	202e      	movs	r0, #46	; 0x2e
 800c92e:	183b      	adds	r3, r7, r0
 800c930:	781a      	ldrb	r2, [r3, #0]
 800c932:	242f      	movs	r4, #47	; 0x2f
 800c934:	193b      	adds	r3, r7, r4
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	18d3      	adds	r3, r2, r3
 800c93a:	001a      	movs	r2, r3
 800c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93e:	189b      	adds	r3, r3, r2
 800c940:	7819      	ldrb	r1, [r3, #0]
 800c942:	193b      	adds	r3, r7, r4
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	221c      	movs	r2, #28
 800c948:	18ba      	adds	r2, r7, r2
 800c94a:	5cd2      	ldrb	r2, [r2, r3]
 800c94c:	183b      	adds	r3, r7, r0
 800c94e:	7818      	ldrb	r0, [r3, #0]
 800c950:	193b      	adds	r3, r7, r4
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	18c3      	adds	r3, r0, r3
 800c956:	0018      	movs	r0, r3
 800c958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c95a:	181b      	adds	r3, r3, r0
 800c95c:	404a      	eors	r2, r1
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 800c962:	193b      	adds	r3, r7, r4
 800c964:	781a      	ldrb	r2, [r3, #0]
 800c966:	193b      	adds	r3, r7, r4
 800c968:	3201      	adds	r2, #1
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	232f      	movs	r3, #47	; 0x2f
 800c96e:	18fb      	adds	r3, r7, r3
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	1dba      	adds	r2, r7, #6
 800c976:	8812      	ldrh	r2, [r2, #0]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d8d7      	bhi.n	800c92c <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	0018      	movs	r0, r3
 800c980:	46bd      	mov	sp, r7
 800c982:	b00d      	add	sp, #52	; 0x34
 800c984:	bd90      	pop	{r4, r7, pc}

0800c986 <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c986:	b5b0      	push	{r4, r5, r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	0008      	movs	r0, r1
 800c990:	0011      	movs	r1, r2
 800c992:	607b      	str	r3, [r7, #4]
 800c994:	250a      	movs	r5, #10
 800c996:	197b      	adds	r3, r7, r5
 800c998:	1c02      	adds	r2, r0, #0
 800c99a:	801a      	strh	r2, [r3, #0]
 800c99c:	2009      	movs	r0, #9
 800c99e:	183b      	adds	r3, r7, r0
 800c9a0:	1c0a      	adds	r2, r1, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c9a4:	687c      	ldr	r4, [r7, #4]
 800c9a6:	183b      	adds	r3, r7, r0
 800c9a8:	781a      	ldrb	r2, [r3, #0]
 800c9aa:	197b      	adds	r3, r7, r5
 800c9ac:	8819      	ldrh	r1, [r3, #0]
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	0023      	movs	r3, r4
 800c9b2:	f7fc fa13 	bl	8008ddc <SecureElementComputeAesCmac>
 800c9b6:	1e03      	subs	r3, r0, #0
 800c9b8:	d001      	beq.n	800c9be <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c9ba:	230c      	movs	r3, #12
 800c9bc:	e000      	b.n	800c9c0 <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	0018      	movs	r0, r3
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	b004      	add	sp, #16
 800c9c6:	bdb0      	pop	{r4, r5, r7, pc}

0800c9c8 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 800c9c8:	b5b0      	push	{r4, r5, r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	0008      	movs	r0, r1
 800c9d2:	0011      	movs	r1, r2
 800c9d4:	607b      	str	r3, [r7, #4]
 800c9d6:	250a      	movs	r5, #10
 800c9d8:	197b      	adds	r3, r7, r5
 800c9da:	1c02      	adds	r2, r0, #0
 800c9dc:	801a      	strh	r2, [r3, #0]
 800c9de:	2009      	movs	r0, #9
 800c9e0:	183b      	adds	r3, r7, r0
 800c9e2:	1c0a      	adds	r2, r1, #0
 800c9e4:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c9e6:	183b      	adds	r3, r7, r0
 800c9e8:	781c      	ldrb	r4, [r3, #0]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	197b      	adds	r3, r7, r5
 800c9ee:	8819      	ldrh	r1, [r3, #0]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	0023      	movs	r3, r4
 800c9f4:	f7fc fa17 	bl	8008e26 <SecureElementVerifyAesCmac>
 800c9f8:	1e03      	subs	r3, r0, #0
 800c9fa:	d001      	beq.n	800ca00 <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c9fc:	230c      	movs	r3, #12
 800c9fe:	e000      	b.n	800ca02 <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	0018      	movs	r0, r3
 800ca04:	46bd      	mov	sp, r7
 800ca06:	b004      	add	sp, #16
 800ca08:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca0c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800ca0c:	b5b0      	push	{r4, r5, r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	0005      	movs	r5, r0
 800ca14:	000c      	movs	r4, r1
 800ca16:	0010      	movs	r0, r2
 800ca18:	0019      	movs	r1, r3
 800ca1a:	1dbb      	adds	r3, r7, #6
 800ca1c:	1c2a      	adds	r2, r5, #0
 800ca1e:	801a      	strh	r2, [r3, #0]
 800ca20:	1d7b      	adds	r3, r7, #5
 800ca22:	1c22      	adds	r2, r4, #0
 800ca24:	701a      	strb	r2, [r3, #0]
 800ca26:	1d3b      	adds	r3, r7, #4
 800ca28:	1c02      	adds	r2, r0, #0
 800ca2a:	701a      	strb	r2, [r3, #0]
 800ca2c:	1cfb      	adds	r3, r7, #3
 800ca2e:	1c0a      	adds	r2, r1, #0
 800ca30:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca38:	2307      	movs	r3, #7
 800ca3a:	e079      	b.n	800cb30 <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	2249      	movs	r2, #73	; 0x49
 800ca40:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 800ca42:	1d3b      	adds	r3, r7, #4
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d024      	beq.n	800ca94 <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 800ca4a:	230e      	movs	r3, #14
 800ca4c:	18fb      	adds	r3, r7, r3
 800ca4e:	2200      	movs	r2, #0
 800ca50:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 800ca52:	1cfb      	adds	r3, r7, #3
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 800ca5a:	4b37      	ldr	r3, [pc, #220]	; (800cb38 <PrepareB0+0x12c>)
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	695a      	ldr	r2, [r3, #20]
 800ca60:	230e      	movs	r3, #14
 800ca62:	18fb      	adds	r3, r7, r3
 800ca64:	801a      	strh	r2, [r3, #0]
 800ca66:	e005      	b.n	800ca74 <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 800ca68:	4b33      	ldr	r3, [pc, #204]	; (800cb38 <PrepareB0+0x12c>)
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	230e      	movs	r3, #14
 800ca70:	18fb      	adds	r3, r7, r3
 800ca72:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	3301      	adds	r3, #1
 800ca78:	210e      	movs	r1, #14
 800ca7a:	187a      	adds	r2, r7, r1
 800ca7c:	8812      	ldrh	r2, [r2, #0]
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800ca82:	187b      	adds	r3, r7, r1
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	0a1b      	lsrs	r3, r3, #8
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	3302      	adds	r3, #2
 800ca8e:	b2d2      	uxtb	r2, r2
 800ca90:	701a      	strb	r2, [r3, #0]
 800ca92:	e007      	b.n	800caa4 <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	3301      	adds	r3, #1
 800ca98:	2200      	movs	r2, #0
 800ca9a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	3302      	adds	r3, #2
 800caa0:	2200      	movs	r2, #0
 800caa2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	3303      	adds	r3, #3
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	3304      	adds	r3, #4
 800cab0:	2200      	movs	r2, #0
 800cab2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800cab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab6:	3305      	adds	r3, #5
 800cab8:	1cfa      	adds	r2, r7, #3
 800caba:	7812      	ldrb	r2, [r2, #0]
 800cabc:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	3306      	adds	r3, #6
 800cac2:	6a3a      	ldr	r2, [r7, #32]
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	0a1a      	lsrs	r2, r3, #8
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	3307      	adds	r3, #7
 800cad0:	b2d2      	uxtb	r2, r2
 800cad2:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	0c1a      	lsrs	r2, r3, #16
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	3308      	adds	r3, #8
 800cadc:	b2d2      	uxtb	r2, r2
 800cade:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	0e1a      	lsrs	r2, r3, #24
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	3309      	adds	r3, #9
 800cae8:	b2d2      	uxtb	r2, r2
 800caea:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	330a      	adds	r3, #10
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	b2d2      	uxtb	r2, r2
 800caf4:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	0a1a      	lsrs	r2, r3, #8
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	330b      	adds	r3, #11
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	0c1a      	lsrs	r2, r3, #16
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	330c      	adds	r3, #12
 800cb0a:	b2d2      	uxtb	r2, r2
 800cb0c:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb10:	0e1a      	lsrs	r2, r3, #24
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	330d      	adds	r3, #13
 800cb16:	b2d2      	uxtb	r2, r2
 800cb18:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	330e      	adds	r3, #14
 800cb1e:	2200      	movs	r2, #0
 800cb20:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	330f      	adds	r3, #15
 800cb26:	1dba      	adds	r2, r7, #6
 800cb28:	8812      	ldrh	r2, [r2, #0]
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	0018      	movs	r0, r3
 800cb32:	46bd      	mov	sp, r7
 800cb34:	b004      	add	sp, #16
 800cb36:	bdb0      	pop	{r4, r5, r7, pc}
 800cb38:	20000b88 	.word	0x20000b88

0800cb3c <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800cb3c:	b5b0      	push	{r4, r5, r7, lr}
 800cb3e:	b0ca      	sub	sp, #296	; 0x128
 800cb40:	af04      	add	r7, sp, #16
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	000c      	movs	r4, r1
 800cb46:	0010      	movs	r0, r2
 800cb48:	0019      	movs	r1, r3
 800cb4a:	4b47      	ldr	r3, [pc, #284]	; (800cc68 <ComputeCmacB0+0x12c>)
 800cb4c:	228c      	movs	r2, #140	; 0x8c
 800cb4e:	0052      	lsls	r2, r2, #1
 800cb50:	4694      	mov	ip, r2
 800cb52:	44bc      	add	ip, r7
 800cb54:	4463      	add	r3, ip
 800cb56:	1c22      	adds	r2, r4, #0
 800cb58:	801a      	strh	r2, [r3, #0]
 800cb5a:	4b44      	ldr	r3, [pc, #272]	; (800cc6c <ComputeCmacB0+0x130>)
 800cb5c:	228c      	movs	r2, #140	; 0x8c
 800cb5e:	0052      	lsls	r2, r2, #1
 800cb60:	4694      	mov	ip, r2
 800cb62:	44bc      	add	ip, r7
 800cb64:	4463      	add	r3, ip
 800cb66:	1c02      	adds	r2, r0, #0
 800cb68:	701a      	strb	r2, [r3, #0]
 800cb6a:	4b41      	ldr	r3, [pc, #260]	; (800cc70 <ComputeCmacB0+0x134>)
 800cb6c:	228c      	movs	r2, #140	; 0x8c
 800cb6e:	0052      	lsls	r2, r2, #1
 800cb70:	4694      	mov	ip, r2
 800cb72:	44bc      	add	ip, r7
 800cb74:	4463      	add	r3, ip
 800cb76:	1c0a      	adds	r2, r1, #0
 800cb78:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d005      	beq.n	800cb8c <ComputeCmacB0+0x50>
 800cb80:	239a      	movs	r3, #154	; 0x9a
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	18fb      	adds	r3, r7, r3
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb8c:	2307      	movs	r3, #7
 800cb8e:	e066      	b.n	800cc5e <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cb90:	4b35      	ldr	r3, [pc, #212]	; (800cc68 <ComputeCmacB0+0x12c>)
 800cb92:	228c      	movs	r2, #140	; 0x8c
 800cb94:	0052      	lsls	r2, r2, #1
 800cb96:	4694      	mov	ip, r2
 800cb98:	44bc      	add	ip, r7
 800cb9a:	4463      	add	r3, ip
 800cb9c:	881a      	ldrh	r2, [r3, #0]
 800cb9e:	2380      	movs	r3, #128	; 0x80
 800cba0:	005b      	lsls	r3, r3, #1
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d901      	bls.n	800cbaa <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cba6:	230b      	movs	r3, #11
 800cba8:	e059      	b.n	800cc5e <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800cbaa:	2388      	movs	r3, #136	; 0x88
 800cbac:	005a      	lsls	r2, r3, #1
 800cbae:	2508      	movs	r5, #8
 800cbb0:	197b      	adds	r3, r7, r5
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	f010 f8b9 	bl	801cd2c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800cbba:	2394      	movs	r3, #148	; 0x94
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	18fb      	adds	r3, r7, r3
 800cbc0:	781c      	ldrb	r4, [r3, #0]
 800cbc2:	4b2b      	ldr	r3, [pc, #172]	; (800cc70 <ComputeCmacB0+0x134>)
 800cbc4:	228c      	movs	r2, #140	; 0x8c
 800cbc6:	0052      	lsls	r2, r2, #1
 800cbc8:	4694      	mov	ip, r2
 800cbca:	44bc      	add	ip, r7
 800cbcc:	4463      	add	r3, ip
 800cbce:	781a      	ldrb	r2, [r3, #0]
 800cbd0:	4b26      	ldr	r3, [pc, #152]	; (800cc6c <ComputeCmacB0+0x130>)
 800cbd2:	218c      	movs	r1, #140	; 0x8c
 800cbd4:	0049      	lsls	r1, r1, #1
 800cbd6:	468c      	mov	ip, r1
 800cbd8:	44bc      	add	ip, r7
 800cbda:	4463      	add	r3, ip
 800cbdc:	7819      	ldrb	r1, [r3, #0]
 800cbde:	4b22      	ldr	r3, [pc, #136]	; (800cc68 <ComputeCmacB0+0x12c>)
 800cbe0:	208c      	movs	r0, #140	; 0x8c
 800cbe2:	0040      	lsls	r0, r0, #1
 800cbe4:	4684      	mov	ip, r0
 800cbe6:	44bc      	add	ip, r7
 800cbe8:	4463      	add	r3, ip
 800cbea:	8818      	ldrh	r0, [r3, #0]
 800cbec:	197b      	adds	r3, r7, r5
 800cbee:	9302      	str	r3, [sp, #8]
 800cbf0:	2398      	movs	r3, #152	; 0x98
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	18fb      	adds	r3, r7, r3
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	2396      	movs	r3, #150	; 0x96
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	18fb      	adds	r3, r7, r3
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	0023      	movs	r3, r4
 800cc06:	f7ff ff01 	bl	800ca0c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cc0a:	197b      	adds	r3, r7, r5
 800cc0c:	3310      	adds	r3, #16
 800cc0e:	4a16      	ldr	r2, [pc, #88]	; (800cc68 <ComputeCmacB0+0x12c>)
 800cc10:	218c      	movs	r1, #140	; 0x8c
 800cc12:	0049      	lsls	r1, r1, #1
 800cc14:	468c      	mov	ip, r1
 800cc16:	44bc      	add	ip, r7
 800cc18:	4462      	add	r2, ip
 800cc1a:	8812      	ldrh	r2, [r2, #0]
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	0018      	movs	r0, r3
 800cc20:	f010 f848 	bl	801ccb4 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800cc24:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <ComputeCmacB0+0x12c>)
 800cc26:	228c      	movs	r2, #140	; 0x8c
 800cc28:	0052      	lsls	r2, r2, #1
 800cc2a:	4694      	mov	ip, r2
 800cc2c:	44bc      	add	ip, r7
 800cc2e:	4463      	add	r3, ip
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	3310      	adds	r3, #16
 800cc34:	b299      	uxth	r1, r3
 800cc36:	239a      	movs	r3, #154	; 0x9a
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	18fb      	adds	r3, r7, r3
 800cc3c:	681c      	ldr	r4, [r3, #0]
 800cc3e:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <ComputeCmacB0+0x130>)
 800cc40:	228c      	movs	r2, #140	; 0x8c
 800cc42:	0052      	lsls	r2, r2, #1
 800cc44:	4694      	mov	ip, r2
 800cc46:	44bc      	add	ip, r7
 800cc48:	4463      	add	r3, ip
 800cc4a:	781a      	ldrb	r2, [r3, #0]
 800cc4c:	1978      	adds	r0, r7, r5
 800cc4e:	0023      	movs	r3, r4
 800cc50:	f7fc f8c4 	bl	8008ddc <SecureElementComputeAesCmac>
 800cc54:	1e03      	subs	r3, r0, #0
 800cc56:	d001      	beq.n	800cc5c <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cc58:	230c      	movs	r3, #12
 800cc5a:	e000      	b.n	800cc5e <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	0018      	movs	r0, r3
 800cc60:	46bd      	mov	sp, r7
 800cc62:	b046      	add	sp, #280	; 0x118
 800cc64:	bdb0      	pop	{r4, r5, r7, pc}
 800cc66:	46c0      	nop			; (mov r8, r8)
 800cc68:	fffffeea 	.word	0xfffffeea
 800cc6c:	fffffee9 	.word	0xfffffee9
 800cc70:	fffffee8 	.word	0xfffffee8

0800cc74 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc76:	b0cd      	sub	sp, #308	; 0x134
 800cc78:	af04      	add	r7, sp, #16
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	000c      	movs	r4, r1
 800cc7e:	0010      	movs	r0, r2
 800cc80:	0019      	movs	r1, r3
 800cc82:	4b52      	ldr	r3, [pc, #328]	; (800cdcc <VerifyCmacB0+0x158>)
 800cc84:	2290      	movs	r2, #144	; 0x90
 800cc86:	0052      	lsls	r2, r2, #1
 800cc88:	4694      	mov	ip, r2
 800cc8a:	44bc      	add	ip, r7
 800cc8c:	4463      	add	r3, ip
 800cc8e:	1c22      	adds	r2, r4, #0
 800cc90:	801a      	strh	r2, [r3, #0]
 800cc92:	4b4f      	ldr	r3, [pc, #316]	; (800cdd0 <VerifyCmacB0+0x15c>)
 800cc94:	2290      	movs	r2, #144	; 0x90
 800cc96:	0052      	lsls	r2, r2, #1
 800cc98:	4694      	mov	ip, r2
 800cc9a:	44bc      	add	ip, r7
 800cc9c:	4463      	add	r3, ip
 800cc9e:	1c02      	adds	r2, r0, #0
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	4b4c      	ldr	r3, [pc, #304]	; (800cdd4 <VerifyCmacB0+0x160>)
 800cca4:	2290      	movs	r2, #144	; 0x90
 800cca6:	0052      	lsls	r2, r2, #1
 800cca8:	4694      	mov	ip, r2
 800ccaa:	44bc      	add	ip, r7
 800ccac:	4463      	add	r3, ip
 800ccae:	1c0a      	adds	r2, r1, #0
 800ccb0:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ccb8:	2307      	movs	r3, #7
 800ccba:	e083      	b.n	800cdc4 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ccbc:	4b43      	ldr	r3, [pc, #268]	; (800cdcc <VerifyCmacB0+0x158>)
 800ccbe:	2290      	movs	r2, #144	; 0x90
 800ccc0:	0052      	lsls	r2, r2, #1
 800ccc2:	4694      	mov	ip, r2
 800ccc4:	44bc      	add	ip, r7
 800ccc6:	4463      	add	r3, ip
 800ccc8:	881a      	ldrh	r2, [r3, #0]
 800ccca:	2380      	movs	r3, #128	; 0x80
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d901      	bls.n	800ccd6 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ccd2:	230b      	movs	r3, #11
 800ccd4:	e076      	b.n	800cdc4 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ccd6:	2388      	movs	r3, #136	; 0x88
 800ccd8:	005a      	lsls	r2, r3, #1
 800ccda:	250c      	movs	r5, #12
 800ccdc:	197b      	adds	r3, r7, r5
 800ccde:	2100      	movs	r1, #0
 800cce0:	0018      	movs	r0, r3
 800cce2:	f010 f823 	bl	801cd2c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800cce6:	2398      	movs	r3, #152	; 0x98
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	2208      	movs	r2, #8
 800ccec:	4694      	mov	ip, r2
 800ccee:	44bc      	add	ip, r7
 800ccf0:	4463      	add	r3, ip
 800ccf2:	781c      	ldrb	r4, [r3, #0]
 800ccf4:	4b37      	ldr	r3, [pc, #220]	; (800cdd4 <VerifyCmacB0+0x160>)
 800ccf6:	2290      	movs	r2, #144	; 0x90
 800ccf8:	0052      	lsls	r2, r2, #1
 800ccfa:	4694      	mov	ip, r2
 800ccfc:	44bc      	add	ip, r7
 800ccfe:	4463      	add	r3, ip
 800cd00:	781a      	ldrb	r2, [r3, #0]
 800cd02:	4b33      	ldr	r3, [pc, #204]	; (800cdd0 <VerifyCmacB0+0x15c>)
 800cd04:	2190      	movs	r1, #144	; 0x90
 800cd06:	0049      	lsls	r1, r1, #1
 800cd08:	468c      	mov	ip, r1
 800cd0a:	44bc      	add	ip, r7
 800cd0c:	4463      	add	r3, ip
 800cd0e:	7819      	ldrb	r1, [r3, #0]
 800cd10:	4b2e      	ldr	r3, [pc, #184]	; (800cdcc <VerifyCmacB0+0x158>)
 800cd12:	2090      	movs	r0, #144	; 0x90
 800cd14:	0040      	lsls	r0, r0, #1
 800cd16:	4684      	mov	ip, r0
 800cd18:	44bc      	add	ip, r7
 800cd1a:	4463      	add	r3, ip
 800cd1c:	8818      	ldrh	r0, [r3, #0]
 800cd1e:	197b      	adds	r3, r7, r5
 800cd20:	9302      	str	r3, [sp, #8]
 800cd22:	239c      	movs	r3, #156	; 0x9c
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	2608      	movs	r6, #8
 800cd28:	46b4      	mov	ip, r6
 800cd2a:	44bc      	add	ip, r7
 800cd2c:	4463      	add	r3, ip
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	239a      	movs	r3, #154	; 0x9a
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	2608      	movs	r6, #8
 800cd38:	46b4      	mov	ip, r6
 800cd3a:	44bc      	add	ip, r7
 800cd3c:	4463      	add	r3, ip
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	0023      	movs	r3, r4
 800cd44:	f7ff fe62 	bl	800ca0c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cd48:	197b      	adds	r3, r7, r5
 800cd4a:	3310      	adds	r3, #16
 800cd4c:	4a1f      	ldr	r2, [pc, #124]	; (800cdcc <VerifyCmacB0+0x158>)
 800cd4e:	2190      	movs	r1, #144	; 0x90
 800cd50:	0049      	lsls	r1, r1, #1
 800cd52:	468c      	mov	ip, r1
 800cd54:	44bc      	add	ip, r7
 800cd56:	4462      	add	r2, ip
 800cd58:	8812      	ldrh	r2, [r2, #0]
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	f00f ffa9 	bl	801ccb4 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cd62:	2620      	movs	r6, #32
 800cd64:	36ff      	adds	r6, #255	; 0xff
 800cd66:	19bb      	adds	r3, r7, r6
 800cd68:	2206      	movs	r2, #6
 800cd6a:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800cd6c:	4b17      	ldr	r3, [pc, #92]	; (800cdcc <VerifyCmacB0+0x158>)
 800cd6e:	2290      	movs	r2, #144	; 0x90
 800cd70:	0052      	lsls	r2, r2, #1
 800cd72:	4694      	mov	ip, r2
 800cd74:	44bc      	add	ip, r7
 800cd76:	4463      	add	r3, ip
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	3310      	adds	r3, #16
 800cd7c:	b299      	uxth	r1, r3
 800cd7e:	19bc      	adds	r4, r7, r6
 800cd80:	4b13      	ldr	r3, [pc, #76]	; (800cdd0 <VerifyCmacB0+0x15c>)
 800cd82:	2290      	movs	r2, #144	; 0x90
 800cd84:	0052      	lsls	r2, r2, #1
 800cd86:	4694      	mov	ip, r2
 800cd88:	44bc      	add	ip, r7
 800cd8a:	4463      	add	r3, ip
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	229e      	movs	r2, #158	; 0x9e
 800cd90:	0052      	lsls	r2, r2, #1
 800cd92:	2008      	movs	r0, #8
 800cd94:	4684      	mov	ip, r0
 800cd96:	44bc      	add	ip, r7
 800cd98:	4462      	add	r2, ip
 800cd9a:	6812      	ldr	r2, [r2, #0]
 800cd9c:	1978      	adds	r0, r7, r5
 800cd9e:	f7fc f842 	bl	8008e26 <SecureElementVerifyAesCmac>
 800cda2:	0003      	movs	r3, r0
 800cda4:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cda6:	19bb      	adds	r3, r7, r6
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e008      	b.n	800cdc4 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800cdb2:	2320      	movs	r3, #32
 800cdb4:	33ff      	adds	r3, #255	; 0xff
 800cdb6:	18fb      	adds	r3, r7, r3
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d101      	bne.n	800cdc2 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e000      	b.n	800cdc4 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cdc2:	230c      	movs	r3, #12
}
 800cdc4:	0018      	movs	r0, r3
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	b049      	add	sp, #292	; 0x124
 800cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdcc:	fffffee2 	.word	0xfffffee2
 800cdd0:	fffffee1 	.word	0xfffffee1
 800cdd4:	fffffee0 	.word	0xfffffee0

0800cdd8 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 800cdd8:	b5b0      	push	{r4, r5, r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	0005      	movs	r5, r0
 800cde0:	000c      	movs	r4, r1
 800cde2:	0010      	movs	r0, r2
 800cde4:	0019      	movs	r1, r3
 800cde6:	1dbb      	adds	r3, r7, #6
 800cde8:	1c2a      	adds	r2, r5, #0
 800cdea:	801a      	strh	r2, [r3, #0]
 800cdec:	1d7b      	adds	r3, r7, #5
 800cdee:	1c22      	adds	r2, r4, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	1d3b      	adds	r3, r7, #4
 800cdf4:	1c02      	adds	r2, r0, #0
 800cdf6:	701a      	strb	r2, [r3, #0]
 800cdf8:	1cfb      	adds	r3, r7, #3
 800cdfa:	1c0a      	adds	r2, r1, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce04:	2307      	movs	r3, #7
 800ce06:	e06c      	b.n	800cee2 <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	2249      	movs	r2, #73	; 0x49
 800ce0c:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 800ce0e:	1d3b      	adds	r3, r7, #4
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d015      	beq.n	800ce42 <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 800ce16:	4b35      	ldr	r3, [pc, #212]	; (800ceec <PrepareB1+0x114>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	210e      	movs	r1, #14
 800ce20:	187b      	adds	r3, r7, r1
 800ce22:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	3301      	adds	r3, #1
 800ce28:	187a      	adds	r2, r7, r1
 800ce2a:	8812      	ldrh	r2, [r2, #0]
 800ce2c:	b2d2      	uxtb	r2, r2
 800ce2e:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 800ce30:	187b      	adds	r3, r7, r1
 800ce32:	881b      	ldrh	r3, [r3, #0]
 800ce34:	0a1b      	lsrs	r3, r3, #8
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	3302      	adds	r3, #2
 800ce3c:	b2d2      	uxtb	r2, r2
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	e007      	b.n	800ce52 <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	3301      	adds	r3, #1
 800ce46:	2200      	movs	r2, #0
 800ce48:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	3302      	adds	r3, #2
 800ce4e:	2200      	movs	r2, #0
 800ce50:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	3303      	adds	r3, #3
 800ce56:	1cfa      	adds	r2, r7, #3
 800ce58:	7812      	ldrb	r2, [r2, #0]
 800ce5a:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	3304      	adds	r3, #4
 800ce60:	2220      	movs	r2, #32
 800ce62:	18ba      	adds	r2, r7, r2
 800ce64:	7812      	ldrb	r2, [r2, #0]
 800ce66:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	3305      	adds	r3, #5
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	3306      	adds	r3, #6
 800ce74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	0a1a      	lsrs	r2, r3, #8
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	3307      	adds	r3, #7
 800ce82:	b2d2      	uxtb	r2, r2
 800ce84:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	0c1a      	lsrs	r2, r3, #16
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	0e1a      	lsrs	r2, r3, #24
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	3309      	adds	r3, #9
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	330a      	adds	r3, #10
 800cea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea4:	b2d2      	uxtb	r2, r2
 800cea6:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 800cea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceaa:	0a1a      	lsrs	r2, r3, #8
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	330b      	adds	r3, #11
 800ceb0:	b2d2      	uxtb	r2, r2
 800ceb2:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	0c1a      	lsrs	r2, r3, #16
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	330c      	adds	r3, #12
 800cebc:	b2d2      	uxtb	r2, r2
 800cebe:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	0e1a      	lsrs	r2, r3, #24
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	330d      	adds	r3, #13
 800cec8:	b2d2      	uxtb	r2, r2
 800ceca:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 800cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cece:	330e      	adds	r3, #14
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	330f      	adds	r3, #15
 800ced8:	1dba      	adds	r2, r7, #6
 800ceda:	8812      	ldrh	r2, [r2, #0]
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	0018      	movs	r0, r3
 800cee4:	46bd      	mov	sp, r7
 800cee6:	b004      	add	sp, #16
 800cee8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceea:	46c0      	nop			; (mov r8, r8)
 800ceec:	20000b88 	.word	0x20000b88

0800cef0 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 800cef0:	b5b0      	push	{r4, r5, r7, lr}
 800cef2:	b0ca      	sub	sp, #296	; 0x128
 800cef4:	af04      	add	r7, sp, #16
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	000c      	movs	r4, r1
 800cefa:	0010      	movs	r0, r2
 800cefc:	0019      	movs	r1, r3
 800cefe:	4b49      	ldr	r3, [pc, #292]	; (800d024 <ComputeCmacB1+0x134>)
 800cf00:	228c      	movs	r2, #140	; 0x8c
 800cf02:	0052      	lsls	r2, r2, #1
 800cf04:	4694      	mov	ip, r2
 800cf06:	44bc      	add	ip, r7
 800cf08:	4463      	add	r3, ip
 800cf0a:	1c22      	adds	r2, r4, #0
 800cf0c:	801a      	strh	r2, [r3, #0]
 800cf0e:	4b46      	ldr	r3, [pc, #280]	; (800d028 <ComputeCmacB1+0x138>)
 800cf10:	228c      	movs	r2, #140	; 0x8c
 800cf12:	0052      	lsls	r2, r2, #1
 800cf14:	4694      	mov	ip, r2
 800cf16:	44bc      	add	ip, r7
 800cf18:	4463      	add	r3, ip
 800cf1a:	1c02      	adds	r2, r0, #0
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	4b43      	ldr	r3, [pc, #268]	; (800d02c <ComputeCmacB1+0x13c>)
 800cf20:	228c      	movs	r2, #140	; 0x8c
 800cf22:	0052      	lsls	r2, r2, #1
 800cf24:	4694      	mov	ip, r2
 800cf26:	44bc      	add	ip, r7
 800cf28:	4463      	add	r3, ip
 800cf2a:	1c0a      	adds	r2, r1, #0
 800cf2c:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d005      	beq.n	800cf40 <ComputeCmacB1+0x50>
 800cf34:	239c      	movs	r3, #156	; 0x9c
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	18fb      	adds	r3, r7, r3
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d101      	bne.n	800cf44 <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cf40:	2307      	movs	r3, #7
 800cf42:	e06b      	b.n	800d01c <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cf44:	4b37      	ldr	r3, [pc, #220]	; (800d024 <ComputeCmacB1+0x134>)
 800cf46:	228c      	movs	r2, #140	; 0x8c
 800cf48:	0052      	lsls	r2, r2, #1
 800cf4a:	4694      	mov	ip, r2
 800cf4c:	44bc      	add	ip, r7
 800cf4e:	4463      	add	r3, ip
 800cf50:	881a      	ldrh	r2, [r3, #0]
 800cf52:	2380      	movs	r3, #128	; 0x80
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d901      	bls.n	800cf5e <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cf5a:	230b      	movs	r3, #11
 800cf5c:	e05e      	b.n	800d01c <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800cf5e:	2388      	movs	r3, #136	; 0x88
 800cf60:	005a      	lsls	r2, r3, #1
 800cf62:	2508      	movs	r5, #8
 800cf64:	197b      	adds	r3, r7, r5
 800cf66:	2100      	movs	r1, #0
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f00f fedf 	bl	801cd2c <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 800cf6e:	2394      	movs	r3, #148	; 0x94
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	18fb      	adds	r3, r7, r3
 800cf74:	781c      	ldrb	r4, [r3, #0]
 800cf76:	4b2d      	ldr	r3, [pc, #180]	; (800d02c <ComputeCmacB1+0x13c>)
 800cf78:	228c      	movs	r2, #140	; 0x8c
 800cf7a:	0052      	lsls	r2, r2, #1
 800cf7c:	4694      	mov	ip, r2
 800cf7e:	44bc      	add	ip, r7
 800cf80:	4463      	add	r3, ip
 800cf82:	781a      	ldrb	r2, [r3, #0]
 800cf84:	4b28      	ldr	r3, [pc, #160]	; (800d028 <ComputeCmacB1+0x138>)
 800cf86:	218c      	movs	r1, #140	; 0x8c
 800cf88:	0049      	lsls	r1, r1, #1
 800cf8a:	468c      	mov	ip, r1
 800cf8c:	44bc      	add	ip, r7
 800cf8e:	4463      	add	r3, ip
 800cf90:	7819      	ldrb	r1, [r3, #0]
 800cf92:	4b24      	ldr	r3, [pc, #144]	; (800d024 <ComputeCmacB1+0x134>)
 800cf94:	208c      	movs	r0, #140	; 0x8c
 800cf96:	0040      	lsls	r0, r0, #1
 800cf98:	4684      	mov	ip, r0
 800cf9a:	44bc      	add	ip, r7
 800cf9c:	4463      	add	r3, ip
 800cf9e:	8818      	ldrh	r0, [r3, #0]
 800cfa0:	197b      	adds	r3, r7, r5
 800cfa2:	9303      	str	r3, [sp, #12]
 800cfa4:	239a      	movs	r3, #154	; 0x9a
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	18fb      	adds	r3, r7, r3
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	9302      	str	r3, [sp, #8]
 800cfae:	2398      	movs	r3, #152	; 0x98
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	18fb      	adds	r3, r7, r3
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	2396      	movs	r3, #150	; 0x96
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	18fb      	adds	r3, r7, r3
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	0023      	movs	r3, r4
 800cfc4:	f7ff ff08 	bl	800cdd8 <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cfc8:	197b      	adds	r3, r7, r5
 800cfca:	3310      	adds	r3, #16
 800cfcc:	4a15      	ldr	r2, [pc, #84]	; (800d024 <ComputeCmacB1+0x134>)
 800cfce:	218c      	movs	r1, #140	; 0x8c
 800cfd0:	0049      	lsls	r1, r1, #1
 800cfd2:	468c      	mov	ip, r1
 800cfd4:	44bc      	add	ip, r7
 800cfd6:	4462      	add	r2, ip
 800cfd8:	8812      	ldrh	r2, [r2, #0]
 800cfda:	6879      	ldr	r1, [r7, #4]
 800cfdc:	0018      	movs	r0, r3
 800cfde:	f00f fe69 	bl	801ccb4 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800cfe2:	4b10      	ldr	r3, [pc, #64]	; (800d024 <ComputeCmacB1+0x134>)
 800cfe4:	228c      	movs	r2, #140	; 0x8c
 800cfe6:	0052      	lsls	r2, r2, #1
 800cfe8:	4694      	mov	ip, r2
 800cfea:	44bc      	add	ip, r7
 800cfec:	4463      	add	r3, ip
 800cfee:	881b      	ldrh	r3, [r3, #0]
 800cff0:	3310      	adds	r3, #16
 800cff2:	b299      	uxth	r1, r3
 800cff4:	239c      	movs	r3, #156	; 0x9c
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	18fb      	adds	r3, r7, r3
 800cffa:	681c      	ldr	r4, [r3, #0]
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <ComputeCmacB1+0x138>)
 800cffe:	228c      	movs	r2, #140	; 0x8c
 800d000:	0052      	lsls	r2, r2, #1
 800d002:	4694      	mov	ip, r2
 800d004:	44bc      	add	ip, r7
 800d006:	4463      	add	r3, ip
 800d008:	781a      	ldrb	r2, [r3, #0]
 800d00a:	1978      	adds	r0, r7, r5
 800d00c:	0023      	movs	r3, r4
 800d00e:	f7fb fee5 	bl	8008ddc <SecureElementComputeAesCmac>
 800d012:	1e03      	subs	r3, r0, #0
 800d014:	d001      	beq.n	800d01a <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d016:	230c      	movs	r3, #12
 800d018:	e000      	b.n	800d01c <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	0018      	movs	r0, r3
 800d01e:	46bd      	mov	sp, r7
 800d020:	b046      	add	sp, #280	; 0x118
 800d022:	bdb0      	pop	{r4, r5, r7, pc}
 800d024:	fffffeea 	.word	0xfffffeea
 800d028:	fffffee9 	.word	0xfffffee9
 800d02c:	fffffee8 	.word	0xfffffee8

0800d030 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	0002      	movs	r2, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	1dfb      	adds	r3, r7, #7
 800d03c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d03e:	230f      	movs	r3, #15
 800d040:	18fb      	adds	r3, r7, r3
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	e019      	b.n	800d07c <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d048:	230f      	movs	r3, #15
 800d04a:	18fb      	adds	r3, r7, r3
 800d04c:	781a      	ldrb	r2, [r3, #0]
 800d04e:	4b10      	ldr	r3, [pc, #64]	; (800d090 <GetKeyAddrItem+0x60>)
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	5cd3      	ldrb	r3, [r2, r3]
 800d054:	1dfa      	adds	r2, r7, #7
 800d056:	7812      	ldrb	r2, [r2, #0]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d109      	bne.n	800d070 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 800d05c:	230f      	movs	r3, #15
 800d05e:	18fb      	adds	r3, r7, r3
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	009a      	lsls	r2, r3, #2
 800d064:	4b0a      	ldr	r3, [pc, #40]	; (800d090 <GetKeyAddrItem+0x60>)
 800d066:	18d2      	adds	r2, r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d06c:	2300      	movs	r3, #0
 800d06e:	e00b      	b.n	800d088 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d070:	210f      	movs	r1, #15
 800d072:	187b      	adds	r3, r7, r1
 800d074:	781a      	ldrb	r2, [r3, #0]
 800d076:	187b      	adds	r3, r7, r1
 800d078:	3201      	adds	r2, #1
 800d07a:	701a      	strb	r2, [r3, #0]
 800d07c:	230f      	movs	r3, #15
 800d07e:	18fb      	adds	r3, r7, r3
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b04      	cmp	r3, #4
 800d084:	d9e0      	bls.n	800d048 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d086:	2309      	movs	r3, #9
}
 800d088:	0018      	movs	r0, r3
 800d08a:	46bd      	mov	sp, r7
 800d08c:	b004      	add	sp, #16
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	20000010 	.word	0x20000010

0800d094 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 800d094:	b590      	push	{r4, r7, lr}
 800d096:	b089      	sub	sp, #36	; 0x24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	230f      	movs	r3, #15
 800d0a2:	18fb      	adds	r3, r7, r3
 800d0a4:	1c02      	adds	r2, r0, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d005      	beq.n	800d0ba <DeriveSessionKey10x+0x26>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <DeriveSessionKey10x+0x26>
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d0ba:	2307      	movs	r3, #7
 800d0bc:	e042      	b.n	800d144 <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 800d0be:	2310      	movs	r3, #16
 800d0c0:	18fb      	adds	r3, r7, r3
 800d0c2:	0018      	movs	r0, r3
 800d0c4:	2310      	movs	r3, #16
 800d0c6:	001a      	movs	r2, r3
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	f018 ff1d 	bl	8025f08 <memset>

    switch( keyID )
 800d0ce:	230f      	movs	r3, #15
 800d0d0:	18fb      	adds	r3, r7, r3
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	db0e      	blt.n	800d0f6 <DeriveSessionKey10x+0x62>
 800d0d8:	2b06      	cmp	r3, #6
 800d0da:	dd02      	ble.n	800d0e2 <DeriveSessionKey10x+0x4e>
 800d0dc:	2b07      	cmp	r3, #7
 800d0de:	d005      	beq.n	800d0ec <DeriveSessionKey10x+0x58>
 800d0e0:	e009      	b.n	800d0f6 <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 800d0e2:	2310      	movs	r3, #16
 800d0e4:	18fb      	adds	r3, r7, r3
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	701a      	strb	r2, [r3, #0]
            break;
 800d0ea:	e006      	b.n	800d0fa <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	18fb      	adds	r3, r7, r3
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	701a      	strb	r2, [r3, #0]
            break;
 800d0f4:	e001      	b.n	800d0fa <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d0f6:	2308      	movs	r3, #8
 800d0f8:	e024      	b.n	800d144 <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 800d0fa:	2410      	movs	r4, #16
 800d0fc:	193b      	adds	r3, r7, r4
 800d0fe:	3301      	adds	r3, #1
 800d100:	68b9      	ldr	r1, [r7, #8]
 800d102:	2203      	movs	r2, #3
 800d104:	0018      	movs	r0, r3
 800d106:	f00f fdd5 	bl	801ccb4 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800d10a:	193b      	adds	r3, r7, r4
 800d10c:	3304      	adds	r3, #4
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	2203      	movs	r2, #3
 800d112:	0018      	movs	r0, r3
 800d114:	f00f fdce 	bl	801ccb4 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800d118:	193b      	adds	r3, r7, r4
 800d11a:	3307      	adds	r3, #7
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	2202      	movs	r2, #2
 800d120:	0018      	movs	r0, r3
 800d122:	f00f fdc7 	bl	801ccb4 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d126:	230f      	movs	r3, #15
 800d128:	18fb      	adds	r3, r7, r3
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	1939      	adds	r1, r7, r4
 800d12e:	4b07      	ldr	r3, [pc, #28]	; (800d14c <DeriveSessionKey10x+0xb8>)
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	0013      	movs	r3, r2
 800d134:	2201      	movs	r2, #1
 800d136:	f7fb ff21 	bl	8008f7c <SecureElementDeriveAndStoreKey>
 800d13a:	1e03      	subs	r3, r0, #0
 800d13c:	d001      	beq.n	800d142 <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d13e:	230c      	movs	r3, #12
 800d140:	e000      	b.n	800d144 <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d142:	2300      	movs	r3, #0
}
 800d144:	0018      	movs	r0, r3
 800d146:	46bd      	mov	sp, r7
 800d148:	b009      	add	sp, #36	; 0x24
 800d14a:	bd90      	pop	{r4, r7, pc}
 800d14c:	20000b88 	.word	0x20000b88

0800d150 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 800d150:	b5b0      	push	{r4, r5, r7, lr}
 800d152:	b08a      	sub	sp, #40	; 0x28
 800d154:	af00      	add	r7, sp, #0
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	603b      	str	r3, [r7, #0]
 800d15c:	230f      	movs	r3, #15
 800d15e:	18fb      	adds	r3, r7, r3
 800d160:	1c02      	adds	r2, r0, #0
 800d162:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d005      	beq.n	800d176 <DeriveSessionKey11x+0x26>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <DeriveSessionKey11x+0x26>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d176:	2307      	movs	r3, #7
 800d178:	e05a      	b.n	800d230 <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 800d17a:	2314      	movs	r3, #20
 800d17c:	18fb      	adds	r3, r7, r3
 800d17e:	0018      	movs	r0, r3
 800d180:	2310      	movs	r3, #16
 800d182:	001a      	movs	r2, r3
 800d184:	2100      	movs	r1, #0
 800d186:	f018 febf 	bl	8025f08 <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 800d18a:	2327      	movs	r3, #39	; 0x27
 800d18c:	18fb      	adds	r3, r7, r3
 800d18e:	2201      	movs	r2, #1
 800d190:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 800d192:	230f      	movs	r3, #15
 800d194:	18fb      	adds	r3, r7, r3
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b05      	cmp	r3, #5
 800d19a:	d00d      	beq.n	800d1b8 <DeriveSessionKey11x+0x68>
 800d19c:	dc02      	bgt.n	800d1a4 <DeriveSessionKey11x+0x54>
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	d005      	beq.n	800d1ae <DeriveSessionKey11x+0x5e>
 800d1a2:	e01c      	b.n	800d1de <DeriveSessionKey11x+0x8e>
 800d1a4:	2b06      	cmp	r3, #6
 800d1a6:	d00c      	beq.n	800d1c2 <DeriveSessionKey11x+0x72>
 800d1a8:	2b07      	cmp	r3, #7
 800d1aa:	d00f      	beq.n	800d1cc <DeriveSessionKey11x+0x7c>
 800d1ac:	e017      	b.n	800d1de <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 800d1ae:	2314      	movs	r3, #20
 800d1b0:	18fb      	adds	r3, r7, r3
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	701a      	strb	r2, [r3, #0]
            break;
 800d1b6:	e014      	b.n	800d1e2 <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 800d1b8:	2314      	movs	r3, #20
 800d1ba:	18fb      	adds	r3, r7, r3
 800d1bc:	2203      	movs	r2, #3
 800d1be:	701a      	strb	r2, [r3, #0]
            break;
 800d1c0:	e00f      	b.n	800d1e2 <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 800d1c2:	2314      	movs	r3, #20
 800d1c4:	18fb      	adds	r3, r7, r3
 800d1c6:	2204      	movs	r2, #4
 800d1c8:	701a      	strb	r2, [r3, #0]
            break;
 800d1ca:	e00a      	b.n	800d1e2 <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 800d1cc:	2327      	movs	r3, #39	; 0x27
 800d1ce:	18fb      	adds	r3, r7, r3
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 800d1d4:	2314      	movs	r3, #20
 800d1d6:	18fb      	adds	r3, r7, r3
 800d1d8:	2202      	movs	r2, #2
 800d1da:	701a      	strb	r2, [r3, #0]
            break;
 800d1dc:	e001      	b.n	800d1e2 <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d1de:	2308      	movs	r3, #8
 800d1e0:	e026      	b.n	800d230 <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 800d1e2:	2514      	movs	r5, #20
 800d1e4:	197b      	adds	r3, r7, r5
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	2203      	movs	r2, #3
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f00f fd61 	bl	801ccb4 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 800d1f2:	197b      	adds	r3, r7, r5
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	2208      	movs	r2, #8
 800d1fa:	0018      	movs	r0, r3
 800d1fc:	f00f fd75 	bl	801ccea <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 800d200:	197b      	adds	r3, r7, r5
 800d202:	330c      	adds	r3, #12
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	2202      	movs	r2, #2
 800d208:	0018      	movs	r0, r3
 800d20a:	f00f fd53 	bl	801ccb4 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d20e:	230f      	movs	r3, #15
 800d210:	18fb      	adds	r3, r7, r3
 800d212:	781c      	ldrb	r4, [r3, #0]
 800d214:	2327      	movs	r3, #39	; 0x27
 800d216:	18fb      	adds	r3, r7, r3
 800d218:	781a      	ldrb	r2, [r3, #0]
 800d21a:	1979      	adds	r1, r7, r5
 800d21c:	4b06      	ldr	r3, [pc, #24]	; (800d238 <DeriveSessionKey11x+0xe8>)
 800d21e:	6818      	ldr	r0, [r3, #0]
 800d220:	0023      	movs	r3, r4
 800d222:	f7fb feab 	bl	8008f7c <SecureElementDeriveAndStoreKey>
 800d226:	1e03      	subs	r3, r0, #0
 800d228:	d001      	beq.n	800d22e <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d22a:	230c      	movs	r3, #12
 800d22c:	e000      	b.n	800d230 <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	0018      	movs	r0, r3
 800d232:	46bd      	mov	sp, r7
 800d234:	b00a      	add	sp, #40	; 0x28
 800d236:	bdb0      	pop	{r4, r5, r7, pc}
 800d238:	20000b88 	.word	0x20000b88

0800d23c <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	0002      	movs	r2, r0
 800d244:	6039      	str	r1, [r7, #0]
 800d246:	1dfb      	adds	r3, r7, #7
 800d248:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d250:	2307      	movs	r3, #7
 800d252:	e030      	b.n	800d2b6 <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 800d254:	2308      	movs	r3, #8
 800d256:	18fb      	adds	r3, r7, r3
 800d258:	0018      	movs	r0, r3
 800d25a:	2310      	movs	r3, #16
 800d25c:	001a      	movs	r2, r3
 800d25e:	2100      	movs	r1, #0
 800d260:	f018 fe52 	bl	8025f08 <memset>

    switch( keyID )
 800d264:	1dfb      	adds	r3, r7, #7
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d002      	beq.n	800d272 <DeriveLifeTimeSessionKey+0x36>
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d005      	beq.n	800d27c <DeriveLifeTimeSessionKey+0x40>
 800d270:	e009      	b.n	800d286 <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 800d272:	2308      	movs	r3, #8
 800d274:	18fb      	adds	r3, r7, r3
 800d276:	2206      	movs	r2, #6
 800d278:	701a      	strb	r2, [r3, #0]
            break;
 800d27a:	e006      	b.n	800d28a <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 800d27c:	2308      	movs	r3, #8
 800d27e:	18fb      	adds	r3, r7, r3
 800d280:	2205      	movs	r2, #5
 800d282:	701a      	strb	r2, [r3, #0]
            break;
 800d284:	e001      	b.n	800d28a <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d286:	2308      	movs	r3, #8
 800d288:	e015      	b.n	800d2b6 <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 800d28a:	2408      	movs	r4, #8
 800d28c:	193b      	adds	r3, r7, r4
 800d28e:	3301      	adds	r3, #1
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	2208      	movs	r2, #8
 800d294:	0018      	movs	r0, r3
 800d296:	f00f fd28 	bl	801ccea <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d29a:	1dfb      	adds	r3, r7, #7
 800d29c:	781a      	ldrb	r2, [r3, #0]
 800d29e:	1939      	adds	r1, r7, r4
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <DeriveLifeTimeSessionKey+0x84>)
 800d2a2:	6818      	ldr	r0, [r3, #0]
 800d2a4:	0013      	movs	r3, r2
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f7fb fe68 	bl	8008f7c <SecureElementDeriveAndStoreKey>
 800d2ac:	1e03      	subs	r3, r0, #0
 800d2ae:	d001      	beq.n	800d2b4 <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d2b0:	230c      	movs	r3, #12
 800d2b2:	e000      	b.n	800d2b6 <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	b007      	add	sp, #28
 800d2bc:	bd90      	pop	{r4, r7, pc}
 800d2be:	46c0      	nop			; (mov r8, r8)
 800d2c0:	20000b88 	.word	0x20000b88

0800d2c4 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	0002      	movs	r2, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	1dfb      	adds	r3, r7, #7
 800d2d0:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 800d2d6:	1dfb      	adds	r3, r7, #7
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b07      	cmp	r3, #7
 800d2dc:	d83b      	bhi.n	800d356 <CheckFCntDown+0x92>
 800d2de:	009a      	lsls	r2, r3, #2
 800d2e0:	4b25      	ldr	r3, [pc, #148]	; (800d378 <CheckFCntDown+0xb4>)
 800d2e2:	18d3      	adds	r3, r2, r3
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	e040      	b.n	800d36e <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 800d2ec:	4b23      	ldr	r3, [pc, #140]	; (800d37c <CheckFCntDown+0xb8>)
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 800d2f4:	4b21      	ldr	r3, [pc, #132]	; (800d37c <CheckFCntDown+0xb8>)
 800d2f6:	689a      	ldr	r2, [r3, #8]
 800d2f8:	4b20      	ldr	r3, [pc, #128]	; (800d37c <CheckFCntDown+0xb8>)
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	320c      	adds	r2, #12
 800d2fe:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d300:	e02b      	b.n	800d35a <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 800d302:	4b1e      	ldr	r3, [pc, #120]	; (800d37c <CheckFCntDown+0xb8>)
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 800d30a:	4b1c      	ldr	r3, [pc, #112]	; (800d37c <CheckFCntDown+0xb8>)
 800d30c:	689a      	ldr	r2, [r3, #8]
 800d30e:	4b1b      	ldr	r3, [pc, #108]	; (800d37c <CheckFCntDown+0xb8>)
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	3210      	adds	r2, #16
 800d314:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d316:	e020      	b.n	800d35a <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 800d318:	4b18      	ldr	r3, [pc, #96]	; (800d37c <CheckFCntDown+0xb8>)
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 800d320:	4b16      	ldr	r3, [pc, #88]	; (800d37c <CheckFCntDown+0xb8>)
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	4b15      	ldr	r3, [pc, #84]	; (800d37c <CheckFCntDown+0xb8>)
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	3214      	adds	r2, #20
 800d32a:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d32c:	e015      	b.n	800d35a <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 800d32e:	4b13      	ldr	r3, [pc, #76]	; (800d37c <CheckFCntDown+0xb8>)
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	60fb      	str	r3, [r7, #12]
            break;
 800d336:	e010      	b.n	800d35a <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 800d338:	4b10      	ldr	r3, [pc, #64]	; (800d37c <CheckFCntDown+0xb8>)
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	69db      	ldr	r3, [r3, #28]
 800d33e:	60fb      	str	r3, [r7, #12]
            break;
 800d340:	e00b      	b.n	800d35a <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 800d342:	4b0e      	ldr	r3, [pc, #56]	; (800d37c <CheckFCntDown+0xb8>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	6a1b      	ldr	r3, [r3, #32]
 800d348:	60fb      	str	r3, [r7, #12]
            break;
 800d34a:	e006      	b.n	800d35a <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <CheckFCntDown+0xb8>)
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	60fb      	str	r3, [r7, #12]
            break;
 800d354:	e001      	b.n	800d35a <CheckFCntDown+0x96>
        default:
            return false;
 800d356:	2300      	movs	r3, #0
 800d358:	e009      	b.n	800d36e <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d802      	bhi.n	800d368 <CheckFCntDown+0xa4>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3301      	adds	r3, #1
 800d366:	d101      	bne.n	800d36c <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 800d36c:	2300      	movs	r3, #0
    }
}
 800d36e:	0018      	movs	r0, r3
 800d370:	46bd      	mov	sp, r7
 800d372:	b004      	add	sp, #16
 800d374:	bd80      	pop	{r7, pc}
 800d376:	46c0      	nop			; (mov r8, r8)
 800d378:	080285c8 	.word	0x080285c8
 800d37c:	20000b88 	.word	0x20000b88

0800d380 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	0002      	movs	r2, r0
 800d388:	6039      	str	r1, [r7, #0]
 800d38a:	1dfb      	adds	r3, r7, #7
 800d38c:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 800d38e:	1dfb      	adds	r3, r7, #7
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b07      	cmp	r3, #7
 800d394:	d827      	bhi.n	800d3e6 <UpdateFCntDown+0x66>
 800d396:	009a      	lsls	r2, r3, #2
 800d398:	4b17      	ldr	r3, [pc, #92]	; (800d3f8 <UpdateFCntDown+0x78>)
 800d39a:	18d3      	adds	r3, r2, r3
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 800d3a0:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	683a      	ldr	r2, [r7, #0]
 800d3a6:	60da      	str	r2, [r3, #12]
            break;
 800d3a8:	e01e      	b.n	800d3e8 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 800d3aa:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	611a      	str	r2, [r3, #16]
            break;
 800d3b2:	e019      	b.n	800d3e8 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 800d3b4:	4b11      	ldr	r3, [pc, #68]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	615a      	str	r2, [r3, #20]
            break;
 800d3bc:	e014      	b.n	800d3e8 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 800d3be:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	619a      	str	r2, [r3, #24]
            break;
 800d3c6:	e00f      	b.n	800d3e8 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 800d3c8:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	61da      	str	r2, [r3, #28]
            break;
 800d3d0:	e00a      	b.n	800d3e8 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 800d3d2:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	621a      	str	r2, [r3, #32]
            break;
 800d3da:	e005      	b.n	800d3e8 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 800d3dc:	4b07      	ldr	r3, [pc, #28]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800d3e4:	e000      	b.n	800d3e8 <UpdateFCntDown+0x68>
        default:
            break;
 800d3e6:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d3e8:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <UpdateFCntDown+0x7c>)
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	4798      	blx	r3
}
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	b002      	add	sp, #8
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	46c0      	nop			; (mov r8, r8)
 800d3f8:	080285e8 	.word	0x080285e8
 800d3fc:	20000b88 	.word	0x20000b88

0800d400 <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800d400:	b5b0      	push	{r4, r5, r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d40e:	2307      	movs	r3, #7
 800d410:	e064      	b.n	800d4dc <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 800d412:	230f      	movs	r3, #15
 800d414:	18fb      	adds	r3, r7, r3
 800d416:	2201      	movs	r2, #1
 800d418:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d41a:	240e      	movs	r4, #14
 800d41c:	193b      	adds	r3, r7, r4
 800d41e:	2210      	movs	r2, #16
 800d420:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 800d422:	f00f fc15 	bl	801cc50 <rand1>
 800d426:	0002      	movs	r2, r0
 800d428:	4b2e      	ldr	r3, [pc, #184]	; (800d4e4 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	b292      	uxth	r2, r2
 800d42e:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d430:	4b2c      	ldr	r3, [pc, #176]	; (800d4e4 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800d436:	4b2b      	ldr	r3, [pc, #172]	; (800d4e4 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	881a      	ldrh	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	330e      	adds	r3, #14
 800d444:	0025      	movs	r5, r4
 800d446:	193c      	adds	r4, r7, r4
 800d448:	0019      	movs	r1, r3
 800d44a:	2002      	movs	r0, #2
 800d44c:	f7ff fef6 	bl	800d23c <DeriveLifeTimeSessionKey>
 800d450:	0003      	movs	r3, r0
 800d452:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d454:	002c      	movs	r4, r5
 800d456:	193b      	adds	r3, r7, r4
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d003      	beq.n	800d466 <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 800d45e:	230e      	movs	r3, #14
 800d460:	18fb      	adds	r3, r7, r3
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	e03a      	b.n	800d4dc <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	330e      	adds	r3, #14
 800d46a:	250e      	movs	r5, #14
 800d46c:	197c      	adds	r4, r7, r5
 800d46e:	0019      	movs	r1, r3
 800d470:	2003      	movs	r0, #3
 800d472:	f7ff fee3 	bl	800d23c <DeriveLifeTimeSessionKey>
 800d476:	0003      	movs	r3, r0
 800d478:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d47a:	197b      	adds	r3, r7, r5
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 800d482:	230e      	movs	r3, #14
 800d484:	18fb      	adds	r3, r7, r3
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	e028      	b.n	800d4dc <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	0018      	movs	r0, r3
 800d48e:	f000 fffc 	bl	800e48a <LoRaMacSerializerJoinRequest>
 800d492:	1e03      	subs	r3, r0, #0
 800d494:	d001      	beq.n	800d49a <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d496:	230e      	movs	r3, #14
 800d498:	e020      	b.n	800d4dc <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	3318      	adds	r3, #24
 800d4a2:	0019      	movs	r1, r3
 800d4a4:	250e      	movs	r5, #14
 800d4a6:	197c      	adds	r4, r7, r5
 800d4a8:	230f      	movs	r3, #15
 800d4aa:	18fb      	adds	r3, r7, r3
 800d4ac:	781a      	ldrb	r2, [r3, #0]
 800d4ae:	000b      	movs	r3, r1
 800d4b0:	2113      	movs	r1, #19
 800d4b2:	f7ff fa68 	bl	800c986 <LoraMacCryptoComputeCmac>
 800d4b6:	0003      	movs	r3, r0
 800d4b8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d4ba:	197b      	adds	r3, r7, r5
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d003      	beq.n	800d4ca <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 800d4c2:	230e      	movs	r3, #14
 800d4c4:	18fb      	adds	r3, r7, r3
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	e008      	b.n	800d4dc <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	0018      	movs	r0, r3
 800d4ce:	f000 ffdc 	bl	800e48a <LoRaMacSerializerJoinRequest>
 800d4d2:	1e03      	subs	r3, r0, #0
 800d4d4:	d001      	beq.n	800d4da <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d4d6:	230e      	movs	r3, #14
 800d4d8:	e000      	b.n	800d4dc <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	0018      	movs	r0, r3
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	b004      	add	sp, #16
 800d4e2:	bdb0      	pop	{r4, r5, r7, pc}
 800d4e4:	20000b88 	.word	0x20000b88

0800d4e8 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 800d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ea:	b0cd      	sub	sp, #308	; 0x134
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
 800d4f2:	4bde      	ldr	r3, [pc, #888]	; (800d86c <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d4f4:	2298      	movs	r2, #152	; 0x98
 800d4f6:	0052      	lsls	r2, r2, #1
 800d4f8:	4694      	mov	ip, r2
 800d4fa:	44bc      	add	ip, r7
 800d4fc:	4463      	add	r3, ip
 800d4fe:	1c02      	adds	r2, r0, #0
 800d500:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <LoRaMacCryptoHandleJoinAccept+0x26>
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d50e:	2307      	movs	r3, #7
 800d510:	e25e      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d512:	2328      	movs	r3, #40	; 0x28
 800d514:	33ff      	adds	r3, #255	; 0xff
 800d516:	18fb      	adds	r3, r7, r3
 800d518:	2210      	movs	r2, #16
 800d51a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 800d51c:	232e      	movs	r3, #46	; 0x2e
 800d51e:	33ff      	adds	r3, #255	; 0xff
 800d520:	18fb      	adds	r3, r7, r3
 800d522:	2200      	movs	r2, #0
 800d524:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 800d526:	4bd2      	ldr	r3, [pc, #840]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	2294      	movs	r2, #148	; 0x94
 800d52c:	0052      	lsls	r2, r2, #1
 800d52e:	18ba      	adds	r2, r7, r2
 800d530:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 800d532:	4bce      	ldr	r3, [pc, #824]	; (800d86c <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d534:	2298      	movs	r2, #152	; 0x98
 800d536:	0052      	lsls	r2, r2, #1
 800d538:	4694      	mov	ip, r2
 800d53a:	44bc      	add	ip, r7
 800d53c:	4463      	add	r3, ip
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	2bff      	cmp	r3, #255	; 0xff
 800d542:	d10a      	bne.n	800d55a <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 800d544:	2397      	movs	r3, #151	; 0x97
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	18fb      	adds	r3, r7, r3
 800d54a:	2201      	movs	r2, #1
 800d54c:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800d54e:	232e      	movs	r3, #46	; 0x2e
 800d550:	33ff      	adds	r3, #255	; 0xff
 800d552:	18fb      	adds	r3, r7, r3
 800d554:	220c      	movs	r2, #12
 800d556:	701a      	strb	r2, [r3, #0]
 800d558:	e023      	b.n	800d5a2 <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 800d55a:	2397      	movs	r3, #151	; 0x97
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	18fb      	adds	r3, r7, r3
 800d560:	2203      	movs	r2, #3
 800d562:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 800d564:	4bc1      	ldr	r3, [pc, #772]	; (800d86c <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d566:	2298      	movs	r2, #152	; 0x98
 800d568:	0052      	lsls	r2, r2, #1
 800d56a:	4694      	mov	ip, r2
 800d56c:	44bc      	add	ip, r7
 800d56e:	4463      	add	r3, ip
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d008      	beq.n	800d588 <LoRaMacCryptoHandleJoinAccept+0xa0>
 800d576:	4bbd      	ldr	r3, [pc, #756]	; (800d86c <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d578:	2298      	movs	r2, #152	; 0x98
 800d57a:	0052      	lsls	r2, r2, #1
 800d57c:	4694      	mov	ip, r2
 800d57e:	44bc      	add	ip, r7
 800d580:	4463      	add	r3, ip
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b02      	cmp	r3, #2
 800d586:	d105      	bne.n	800d594 <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 800d588:	4bba      	ldr	r3, [pc, #744]	; (800d874 <LoRaMacCryptoHandleJoinAccept+0x38c>)
 800d58a:	2294      	movs	r2, #148	; 0x94
 800d58c:	0052      	lsls	r2, r2, #1
 800d58e:	18ba      	adds	r2, r7, r2
 800d590:	6013      	str	r3, [r2, #0]
 800d592:	e006      	b.n	800d5a2 <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 800d594:	4bb6      	ldr	r3, [pc, #728]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	3328      	adds	r3, #40	; 0x28
 800d59a:	2294      	movs	r2, #148	; 0x94
 800d59c:	0052      	lsls	r2, r2, #1
 800d59e:	18ba      	adds	r2, r7, r2
 800d5a0:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	791b      	ldrb	r3, [r3, #4]
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	242e      	movs	r4, #46	; 0x2e
 800d5aa:	34ff      	adds	r4, #255	; 0xff
 800d5ac:	193b      	adds	r3, r7, r4
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	18d3      	adds	r3, r2, r3
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	2514      	movs	r5, #20
 800d5b8:	197b      	adds	r3, r7, r5
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	0018      	movs	r0, r3
 800d5be:	f00f fbb5 	bl	801cd2c <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	1c58      	adds	r0, r3, #1
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	791b      	ldrb	r3, [r3, #4]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	b299      	uxth	r1, r3
 800d5d2:	193b      	adds	r3, r7, r4
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	197a      	adds	r2, r7, r5
 800d5d8:	18d4      	adds	r4, r2, r3
 800d5da:	2397      	movs	r3, #151	; 0x97
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	18fb      	adds	r3, r7, r3
 800d5e0:	781a      	ldrb	r2, [r3, #0]
 800d5e2:	0023      	movs	r3, r4
 800d5e4:	f7fb fc60 	bl	8008ea8 <SecureElementAesEncrypt>
 800d5e8:	1e03      	subs	r3, r0, #0
 800d5ea:	d001      	beq.n	800d5f0 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	e1ef      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	1c58      	adds	r0, r3, #1
 800d5f6:	232e      	movs	r3, #46	; 0x2e
 800d5f8:	33ff      	adds	r3, #255	; 0xff
 800d5fa:	18fb      	adds	r3, r7, r3
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2214      	movs	r2, #20
 800d600:	18ba      	adds	r2, r7, r2
 800d602:	18d1      	adds	r1, r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	791b      	ldrb	r3, [r3, #4]
 800d608:	b29b      	uxth	r3, r3
 800d60a:	3b01      	subs	r3, #1
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	001a      	movs	r2, r3
 800d610:	f00f fb50 	bl	801ccb4 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	0018      	movs	r0, r3
 800d618:	f000 fd34 	bl	800e084 <LoRaMacParserJoinAccept>
 800d61c:	1e03      	subs	r3, r0, #0
 800d61e:	d001      	beq.n	800d624 <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d620:	230d      	movs	r3, #13
 800d622:	e1d5      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7c1b      	ldrb	r3, [r3, #16]
 800d628:	227f      	movs	r2, #127	; 0x7f
 800d62a:	4393      	bics	r3, r2
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d008      	beq.n	800d644 <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 800d632:	4b8f      	ldr	r3, [pc, #572]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d634:	2201      	movs	r2, #1
 800d636:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 800d638:	2330      	movs	r3, #48	; 0x30
 800d63a:	33ff      	adds	r3, #255	; 0xff
 800d63c:	18fb      	adds	r3, r7, r3
 800d63e:	2202      	movs	r2, #2
 800d640:	701a      	strb	r2, [r3, #0]
 800d642:	e007      	b.n	800d654 <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 800d644:	4b8a      	ldr	r3, [pc, #552]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d646:	2200      	movs	r2, #0
 800d648:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 800d64a:	2330      	movs	r3, #48	; 0x30
 800d64c:	33ff      	adds	r3, #255	; 0xff
 800d64e:	18fb      	adds	r3, r7, r3
 800d650:	2201      	movs	r2, #1
 800d652:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 800d654:	4b86      	ldr	r3, [pc, #536]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d656:	789b      	ldrb	r3, [r3, #2]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d11e      	bne.n	800d69a <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6818      	ldr	r0, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	791b      	ldrb	r3, [r3, #4]
 800d664:	b29b      	uxth	r3, r3
 800d666:	3b04      	subs	r3, #4
 800d668:	b299      	uxth	r1, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d66e:	2628      	movs	r6, #40	; 0x28
 800d670:	36ff      	adds	r6, #255	; 0xff
 800d672:	19bc      	adds	r4, r7, r6
 800d674:	2330      	movs	r3, #48	; 0x30
 800d676:	33ff      	adds	r3, #255	; 0xff
 800d678:	18fb      	adds	r3, r7, r3
 800d67a:	781a      	ldrb	r2, [r3, #0]
 800d67c:	002b      	movs	r3, r5
 800d67e:	f7ff f9a3 	bl	800c9c8 <VerifyCmac>
 800d682:	0003      	movs	r3, r0
 800d684:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d686:	19bb      	adds	r3, r7, r6
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d100      	bne.n	800d690 <LoRaMacCryptoHandleJoinAccept+0x1a8>
 800d68e:	e0b9      	b.n	800d804 <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 800d690:	2328      	movs	r3, #40	; 0x28
 800d692:	33ff      	adds	r3, #255	; 0xff
 800d694:	18fb      	adds	r3, r7, r3
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	e19a      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 800d69a:	2092      	movs	r0, #146	; 0x92
 800d69c:	0040      	lsls	r0, r0, #1
 800d69e:	183b      	adds	r3, r7, r0
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800d6a4:	183b      	adds	r3, r7, r0
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	183a      	adds	r2, r7, r0
 800d6aa:	1c59      	adds	r1, r3, #1
 800d6ac:	8011      	strh	r1, [r2, #0]
 800d6ae:	0019      	movs	r1, r3
 800d6b0:	4b71      	ldr	r3, [pc, #452]	; (800d878 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d6b2:	2298      	movs	r2, #152	; 0x98
 800d6b4:	0052      	lsls	r2, r2, #1
 800d6b6:	4694      	mov	ip, r2
 800d6b8:	44bc      	add	ip, r7
 800d6ba:	4463      	add	r3, ip
 800d6bc:	4a6b      	ldr	r2, [pc, #428]	; (800d86c <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d6be:	2498      	movs	r4, #152	; 0x98
 800d6c0:	0064      	lsls	r4, r4, #1
 800d6c2:	46a4      	mov	ip, r4
 800d6c4:	44bc      	add	ip, r7
 800d6c6:	4462      	add	r2, ip
 800d6c8:	7812      	ldrb	r2, [r2, #0]
 800d6ca:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d6cc:	0004      	movs	r4, r0
 800d6ce:	183b      	adds	r3, r7, r0
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	2614      	movs	r6, #20
 800d6d4:	19ba      	adds	r2, r7, r6
 800d6d6:	18d3      	adds	r3, r2, r3
 800d6d8:	68b9      	ldr	r1, [r7, #8]
 800d6da:	2208      	movs	r2, #8
 800d6dc:	0018      	movs	r0, r3
 800d6de:	f00f fb04 	bl	801ccea <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800d6e2:	0020      	movs	r0, r4
 800d6e4:	183b      	adds	r3, r7, r0
 800d6e6:	183a      	adds	r2, r7, r0
 800d6e8:	8812      	ldrh	r2, [r2, #0]
 800d6ea:	3208      	adds	r2, #8
 800d6ec:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800d6ee:	4b60      	ldr	r3, [pc, #384]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	8819      	ldrh	r1, [r3, #0]
 800d6f4:	183b      	adds	r3, r7, r0
 800d6f6:	881b      	ldrh	r3, [r3, #0]
 800d6f8:	0004      	movs	r4, r0
 800d6fa:	183a      	adds	r2, r7, r0
 800d6fc:	1c58      	adds	r0, r3, #1
 800d6fe:	8010      	strh	r0, [r2, #0]
 800d700:	001a      	movs	r2, r3
 800d702:	b2c9      	uxtb	r1, r1
 800d704:	4b5c      	ldr	r3, [pc, #368]	; (800d878 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d706:	2098      	movs	r0, #152	; 0x98
 800d708:	0040      	lsls	r0, r0, #1
 800d70a:	4684      	mov	ip, r0
 800d70c:	44bc      	add	ip, r7
 800d70e:	4463      	add	r3, ip
 800d710:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800d712:	4b57      	ldr	r3, [pc, #348]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	0a1b      	lsrs	r3, r3, #8
 800d71a:	b299      	uxth	r1, r3
 800d71c:	193b      	adds	r3, r7, r4
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	193a      	adds	r2, r7, r4
 800d722:	1c58      	adds	r0, r3, #1
 800d724:	8010      	strh	r0, [r2, #0]
 800d726:	001a      	movs	r2, r3
 800d728:	b2c9      	uxtb	r1, r1
 800d72a:	4b53      	ldr	r3, [pc, #332]	; (800d878 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d72c:	2098      	movs	r0, #152	; 0x98
 800d72e:	0040      	lsls	r0, r0, #1
 800d730:	4684      	mov	ip, r0
 800d732:	44bc      	add	ip, r7
 800d734:	4463      	add	r3, ip
 800d736:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800d738:	193b      	adds	r3, r7, r4
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	193a      	adds	r2, r7, r4
 800d73e:	1c59      	adds	r1, r3, #1
 800d740:	8011      	strh	r1, [r2, #0]
 800d742:	001a      	movs	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7959      	ldrb	r1, [r3, #5]
 800d748:	4b4b      	ldr	r3, [pc, #300]	; (800d878 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d74a:	2098      	movs	r0, #152	; 0x98
 800d74c:	0040      	lsls	r0, r0, #1
 800d74e:	4684      	mov	ip, r0
 800d750:	44bc      	add	ip, r7
 800d752:	4463      	add	r3, ip
 800d754:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	791b      	ldrb	r3, [r3, #4]
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	232e      	movs	r3, #46	; 0x2e
 800d75e:	33ff      	adds	r3, #255	; 0xff
 800d760:	18fb      	adds	r3, r7, r3
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	b29b      	uxth	r3, r3
 800d766:	18d3      	adds	r3, r2, r3
 800d768:	b29b      	uxth	r3, r3
 800d76a:	3b05      	subs	r3, #5
 800d76c:	b299      	uxth	r1, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d772:	2328      	movs	r3, #40	; 0x28
 800d774:	33ff      	adds	r3, #255	; 0xff
 800d776:	18fc      	adds	r4, r7, r3
 800d778:	2230      	movs	r2, #48	; 0x30
 800d77a:	32ff      	adds	r2, #255	; 0xff
 800d77c:	18bb      	adds	r3, r7, r2
 800d77e:	781a      	ldrb	r2, [r3, #0]
 800d780:	19b8      	adds	r0, r7, r6
 800d782:	002b      	movs	r3, r5
 800d784:	f7ff f920 	bl	800c9c8 <VerifyCmac>
 800d788:	0003      	movs	r3, r0
 800d78a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d78c:	2328      	movs	r3, #40	; 0x28
 800d78e:	33ff      	adds	r3, #255	; 0xff
 800d790:	18fb      	adds	r3, r7, r3
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 800d798:	2328      	movs	r3, #40	; 0x28
 800d79a:	33ff      	adds	r3, #255	; 0xff
 800d79c:	18fb      	adds	r3, r7, r3
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	e116      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2290      	movs	r2, #144	; 0x90
 800d7a6:	0052      	lsls	r2, r2, #1
 800d7a8:	18b9      	adds	r1, r7, r2
 800d7aa:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	799b      	ldrb	r3, [r3, #6]
 800d7b0:	18b9      	adds	r1, r7, r2
 800d7b2:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	79db      	ldrb	r3, [r3, #7]
 800d7b8:	021b      	lsls	r3, r3, #8
 800d7ba:	0011      	movs	r1, r2
 800d7bc:	18ba      	adds	r2, r7, r2
 800d7be:	6812      	ldr	r2, [r2, #0]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	000a      	movs	r2, r1
 800d7c4:	18b9      	adds	r1, r7, r2
 800d7c6:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	7a1b      	ldrb	r3, [r3, #8]
 800d7cc:	041b      	lsls	r3, r3, #16
 800d7ce:	0011      	movs	r1, r2
 800d7d0:	18ba      	adds	r2, r7, r2
 800d7d2:	6812      	ldr	r2, [r2, #0]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	000a      	movs	r2, r1
 800d7d8:	18b9      	adds	r1, r7, r2
 800d7da:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800d7dc:	4b24      	ldr	r3, [pc, #144]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	18ba      	adds	r2, r7, r2
 800d7e4:	6812      	ldr	r2, [r2, #0]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d90a      	bls.n	800d800 <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800d7ea:	4b21      	ldr	r3, [pc, #132]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	2290      	movs	r2, #144	; 0x90
 800d7f0:	0052      	lsls	r2, r2, #1
 800d7f2:	18ba      	adds	r2, r7, r2
 800d7f4:	6812      	ldr	r2, [r2, #0]
 800d7f6:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800d7f8:	4b1d      	ldr	r3, [pc, #116]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	4798      	blx	r3
 800d7fe:	e001      	b.n	800d804 <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d800:	2303      	movs	r3, #3
 800d802:	e0e5      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800d804:	4b1a      	ldr	r3, [pc, #104]	; (800d870 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d806:	789b      	ldrb	r3, [r3, #2]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d167      	bne.n	800d8dc <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	1d99      	adds	r1, r3, #6
 800d810:	2528      	movs	r5, #40	; 0x28
 800d812:	35ff      	adds	r5, #255	; 0xff
 800d814:	197c      	adds	r4, r7, r5
 800d816:	2394      	movs	r3, #148	; 0x94
 800d818:	005b      	lsls	r3, r3, #1
 800d81a:	18fb      	adds	r3, r7, r3
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	2004      	movs	r0, #4
 800d822:	f7ff fc95 	bl	800d150 <DeriveSessionKey11x>
 800d826:	0003      	movs	r3, r0
 800d828:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d82a:	197b      	adds	r3, r7, r5
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d004      	beq.n	800d83c <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 800d832:	2328      	movs	r3, #40	; 0x28
 800d834:	33ff      	adds	r3, #255	; 0xff
 800d836:	18fb      	adds	r3, r7, r3
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	e0c9      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	1d99      	adds	r1, r3, #6
 800d840:	2528      	movs	r5, #40	; 0x28
 800d842:	35ff      	adds	r5, #255	; 0xff
 800d844:	197c      	adds	r4, r7, r5
 800d846:	2394      	movs	r3, #148	; 0x94
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	18fb      	adds	r3, r7, r3
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	2005      	movs	r0, #5
 800d852:	f7ff fc7d 	bl	800d150 <DeriveSessionKey11x>
 800d856:	0003      	movs	r3, r0
 800d858:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d85a:	197b      	adds	r3, r7, r5
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00c      	beq.n	800d87c <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 800d862:	2328      	movs	r3, #40	; 0x28
 800d864:	33ff      	adds	r3, #255	; 0xff
 800d866:	18fb      	adds	r3, r7, r3
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	e0b1      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
 800d86c:	fffffedf 	.word	0xfffffedf
 800d870:	20000b88 	.word	0x20000b88
 800d874:	20000b8c 	.word	0x20000b8c
 800d878:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	1d99      	adds	r1, r3, #6
 800d880:	2528      	movs	r5, #40	; 0x28
 800d882:	35ff      	adds	r5, #255	; 0xff
 800d884:	197c      	adds	r4, r7, r5
 800d886:	2394      	movs	r3, #148	; 0x94
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	18fb      	adds	r3, r7, r3
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	2006      	movs	r0, #6
 800d892:	f7ff fc5d 	bl	800d150 <DeriveSessionKey11x>
 800d896:	0003      	movs	r3, r0
 800d898:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d89a:	197b      	adds	r3, r7, r5
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d004      	beq.n	800d8ac <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 800d8a2:	2328      	movs	r3, #40	; 0x28
 800d8a4:	33ff      	adds	r3, #255	; 0xff
 800d8a6:	18fb      	adds	r3, r7, r3
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	e091      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	1d99      	adds	r1, r3, #6
 800d8b0:	2528      	movs	r5, #40	; 0x28
 800d8b2:	35ff      	adds	r5, #255	; 0xff
 800d8b4:	197c      	adds	r4, r7, r5
 800d8b6:	2394      	movs	r3, #148	; 0x94
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	18fb      	adds	r3, r7, r3
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	2007      	movs	r0, #7
 800d8c2:	f7ff fc45 	bl	800d150 <DeriveSessionKey11x>
 800d8c6:	0003      	movs	r3, r0
 800d8c8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8ca:	197b      	adds	r3, r7, r5
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d064      	beq.n	800d99c <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 800d8d2:	2328      	movs	r3, #40	; 0x28
 800d8d4:	33ff      	adds	r3, #255	; 0xff
 800d8d6:	18fb      	adds	r3, r7, r3
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	e079      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	1d99      	adds	r1, r3, #6
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3309      	adds	r3, #9
 800d8e4:	001a      	movs	r2, r3
 800d8e6:	4b3c      	ldr	r3, [pc, #240]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	2528      	movs	r5, #40	; 0x28
 800d8ec:	35ff      	adds	r5, #255	; 0xff
 800d8ee:	197c      	adds	r4, r7, r5
 800d8f0:	2007      	movs	r0, #7
 800d8f2:	f7ff fbcf 	bl	800d094 <DeriveSessionKey10x>
 800d8f6:	0003      	movs	r3, r0
 800d8f8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8fa:	197b      	adds	r3, r7, r5
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 800d902:	2328      	movs	r3, #40	; 0x28
 800d904:	33ff      	adds	r3, #255	; 0xff
 800d906:	18fb      	adds	r3, r7, r3
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	e061      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	1d99      	adds	r1, r3, #6
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	3309      	adds	r3, #9
 800d914:	001a      	movs	r2, r3
 800d916:	4b30      	ldr	r3, [pc, #192]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	2528      	movs	r5, #40	; 0x28
 800d91c:	35ff      	adds	r5, #255	; 0xff
 800d91e:	197c      	adds	r4, r7, r5
 800d920:	2006      	movs	r0, #6
 800d922:	f7ff fbb7 	bl	800d094 <DeriveSessionKey10x>
 800d926:	0003      	movs	r3, r0
 800d928:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d92a:	197b      	adds	r3, r7, r5
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d004      	beq.n	800d93c <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 800d932:	2328      	movs	r3, #40	; 0x28
 800d934:	33ff      	adds	r3, #255	; 0xff
 800d936:	18fb      	adds	r3, r7, r3
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	e049      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	1d99      	adds	r1, r3, #6
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3309      	adds	r3, #9
 800d944:	001a      	movs	r2, r3
 800d946:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	2528      	movs	r5, #40	; 0x28
 800d94c:	35ff      	adds	r5, #255	; 0xff
 800d94e:	197c      	adds	r4, r7, r5
 800d950:	2004      	movs	r0, #4
 800d952:	f7ff fb9f 	bl	800d094 <DeriveSessionKey10x>
 800d956:	0003      	movs	r3, r0
 800d958:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d95a:	197b      	adds	r3, r7, r5
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 800d962:	2328      	movs	r3, #40	; 0x28
 800d964:	33ff      	adds	r3, #255	; 0xff
 800d966:	18fb      	adds	r3, r7, r3
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	e031      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	1d99      	adds	r1, r3, #6
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3309      	adds	r3, #9
 800d974:	001a      	movs	r2, r3
 800d976:	4b18      	ldr	r3, [pc, #96]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	2528      	movs	r5, #40	; 0x28
 800d97c:	35ff      	adds	r5, #255	; 0xff
 800d97e:	197c      	adds	r4, r7, r5
 800d980:	2005      	movs	r0, #5
 800d982:	f7ff fb87 	bl	800d094 <DeriveSessionKey10x>
 800d986:	0003      	movs	r3, r0
 800d988:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d98a:	197b      	adds	r3, r7, r5
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d004      	beq.n	800d99c <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 800d992:	2328      	movs	r3, #40	; 0x28
 800d994:	33ff      	adds	r3, #255	; 0xff
 800d996:	18fb      	adds	r3, r7, r3
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	e019      	b.n	800d9d0 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 800d99c:	4b0e      	ldr	r3, [pc, #56]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	4252      	negs	r2, r2
 800d9b2:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d9b4:	4b08      	ldr	r3, [pc, #32]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	4252      	negs	r2, r2
 800d9bc:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d9be:	4b06      	ldr	r3, [pc, #24]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	4252      	negs	r2, r2
 800d9c6:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	b04d      	add	sp, #308	; 0x134
 800d9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9d8:	20000b88 	.word	0x20000b88

0800d9dc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800d9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9de:	b08f      	sub	sp, #60	; 0x3c
 800d9e0:	af06      	add	r7, sp, #24
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	0008      	movs	r0, r1
 800d9e6:	0011      	movs	r1, r2
 800d9e8:	607b      	str	r3, [r7, #4]
 800d9ea:	230b      	movs	r3, #11
 800d9ec:	18fb      	adds	r3, r7, r3
 800d9ee:	1c02      	adds	r2, r0, #0
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	230a      	movs	r3, #10
 800d9f4:	18fb      	adds	r3, r7, r3
 800d9f6:	1c0a      	adds	r2, r1, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d9fa:	231e      	movs	r3, #30
 800d9fc:	18fb      	adds	r3, r7, r3
 800d9fe:	2210      	movs	r2, #16
 800da00:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 800da02:	231f      	movs	r3, #31
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	2207      	movs	r2, #7
 800da08:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800da10:	2307      	movs	r3, #7
 800da12:	e0ff      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 800da14:	4b81      	ldr	r3, [pc, #516]	; (800dc1c <LoRaMacCryptoSecureMessage+0x240>)
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d201      	bcs.n	800da24 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 800da20:	2305      	movs	r3, #5
 800da22:	e0f7      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2220      	movs	r2, #32
 800da28:	5c9b      	ldrb	r3, [r3, r2]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d103      	bne.n	800da36 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 800da2e:	231f      	movs	r3, #31
 800da30:	18fb      	adds	r3, r7, r3
 800da32:	2206      	movs	r2, #6
 800da34:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 800da36:	4b79      	ldr	r3, [pc, #484]	; (800dc1c <LoRaMacCryptoSecureMessage+0x240>)
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d93e      	bls.n	800dac0 <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2228      	movs	r2, #40	; 0x28
 800da4a:	5c9b      	ldrb	r3, [r3, r2]
 800da4c:	b299      	uxth	r1, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	689d      	ldr	r5, [r3, #8]
 800da52:	261e      	movs	r6, #30
 800da54:	19bc      	adds	r4, r7, r6
 800da56:	231f      	movs	r3, #31
 800da58:	18fb      	adds	r3, r7, r3
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	9301      	str	r3, [sp, #4]
 800da60:	2300      	movs	r3, #0
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	002b      	movs	r3, r5
 800da66:	f7fe fdd7 	bl	800c618 <PayloadEncrypt>
 800da6a:	0003      	movs	r3, r0
 800da6c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da6e:	19bb      	adds	r3, r7, r6
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 800da76:	231e      	movs	r3, #30
 800da78:	18fb      	adds	r3, r7, r3
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	e0ca      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800da7e:	4b67      	ldr	r3, [pc, #412]	; (800dc1c <LoRaMacCryptoSecureMessage+0x240>)
 800da80:	789b      	ldrb	r3, [r3, #2]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d11c      	bne.n	800dac0 <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	7b1b      	ldrb	r3, [r3, #12]
 800da8a:	071b      	lsls	r3, r3, #28
 800da8c:	0f1b      	lsrs	r3, r3, #28
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	b298      	uxth	r0, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6899      	ldr	r1, [r3, #8]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3310      	adds	r3, #16
 800da9a:	251e      	movs	r5, #30
 800da9c:	197c      	adds	r4, r7, r5
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	2300      	movs	r3, #0
 800daa6:	2200      	movs	r2, #0
 800daa8:	f7fe feb8 	bl	800c81c <FOptsEncrypt>
 800daac:	0003      	movs	r3, r0
 800daae:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dab0:	197b      	adds	r3, r7, r5
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d003      	beq.n	800dac0 <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 800dab8:	231e      	movs	r3, #30
 800daba:	18fb      	adds	r3, r7, r3
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	e0a9      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 800dac0:	4b56      	ldr	r3, [pc, #344]	; (800dc1c <LoRaMacCryptoSecureMessage+0x240>)
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800dac8:	4b54      	ldr	r3, [pc, #336]	; (800dc1c <LoRaMacCryptoSecureMessage+0x240>)
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	0018      	movs	r0, r3
 800dad2:	f000 fd75 	bl	800e5c0 <LoRaMacSerializerData>
 800dad6:	1e03      	subs	r3, r0, #0
 800dad8:	d001      	beq.n	800dade <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800dada:	230e      	movs	r3, #14
 800dadc:	e09a      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800dade:	4b4f      	ldr	r3, [pc, #316]	; (800dc1c <LoRaMacCryptoSecureMessage+0x240>)
 800dae0:	789b      	ldrb	r3, [r3, #2]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d16a      	bne.n	800dbbc <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 800daea:	2300      	movs	r3, #0
 800daec:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6818      	ldr	r0, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	791b      	ldrb	r3, [r3, #4]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	3b04      	subs	r3, #4
 800dafa:	b299      	uxth	r1, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7b1b      	ldrb	r3, [r3, #12]
 800db00:	069b      	lsls	r3, r3, #26
 800db02:	0fdb      	lsrs	r3, r3, #31
 800db04:	b2db      	uxtb	r3, r3
 800db06:	1e5a      	subs	r2, r3, #1
 800db08:	4193      	sbcs	r3, r2
 800db0a:	b2dd      	uxtb	r5, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	89d2      	ldrh	r2, [r2, #14]
 800db14:	0016      	movs	r6, r2
 800db16:	221e      	movs	r2, #30
 800db18:	18bc      	adds	r4, r7, r2
 800db1a:	2218      	movs	r2, #24
 800db1c:	18ba      	adds	r2, r7, r2
 800db1e:	9204      	str	r2, [sp, #16]
 800db20:	9603      	str	r6, [sp, #12]
 800db22:	9302      	str	r3, [sp, #8]
 800db24:	230a      	movs	r3, #10
 800db26:	18fb      	adds	r3, r7, r3
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	230b      	movs	r3, #11
 800db2e:	18fb      	adds	r3, r7, r3
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	002b      	movs	r3, r5
 800db36:	2205      	movs	r2, #5
 800db38:	f7ff f9da 	bl	800cef0 <ComputeCmacB1>
 800db3c:	0003      	movs	r3, r0
 800db3e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db40:	221e      	movs	r2, #30
 800db42:	18bb      	adds	r3, r7, r2
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 800db4a:	231e      	movs	r3, #30
 800db4c:	18fb      	adds	r3, r7, r3
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	e060      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6818      	ldr	r0, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	791b      	ldrb	r3, [r3, #4]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	3b04      	subs	r3, #4
 800db5e:	b299      	uxth	r1, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	7b1b      	ldrb	r3, [r3, #12]
 800db64:	069b      	lsls	r3, r3, #26
 800db66:	0fdb      	lsrs	r3, r3, #31
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	1e5a      	subs	r2, r3, #1
 800db6c:	4193      	sbcs	r3, r2
 800db6e:	b2dd      	uxtb	r5, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	89d2      	ldrh	r2, [r2, #14]
 800db78:	0016      	movs	r6, r2
 800db7a:	221e      	movs	r2, #30
 800db7c:	18bc      	adds	r4, r7, r2
 800db7e:	2214      	movs	r2, #20
 800db80:	18ba      	adds	r2, r7, r2
 800db82:	9203      	str	r2, [sp, #12]
 800db84:	9602      	str	r6, [sp, #8]
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	2300      	movs	r3, #0
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	002b      	movs	r3, r5
 800db8e:	2204      	movs	r2, #4
 800db90:	f7fe ffd4 	bl	800cb3c <ComputeCmacB0>
 800db94:	0003      	movs	r3, r0
 800db96:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db98:	221e      	movs	r2, #30
 800db9a:	18bb      	adds	r3, r7, r2
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 800dba2:	231e      	movs	r3, #30
 800dba4:	18fb      	adds	r3, r7, r3
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	e034      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	041a      	lsls	r2, r3, #16
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	041b      	lsls	r3, r3, #16
 800dbb2:	0c1b      	lsrs	r3, r3, #16
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	62da      	str	r2, [r3, #44]	; 0x2c
 800dbba:	e022      	b.n	800dc02 <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	791b      	ldrb	r3, [r3, #4]
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	3b04      	subs	r3, #4
 800dbc8:	b299      	uxth	r1, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	89d2      	ldrh	r2, [r2, #14]
 800dbd2:	0015      	movs	r5, r2
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	322c      	adds	r2, #44	; 0x2c
 800dbd8:	261e      	movs	r6, #30
 800dbda:	19bc      	adds	r4, r7, r6
 800dbdc:	9203      	str	r2, [sp, #12]
 800dbde:	9502      	str	r5, [sp, #8]
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2206      	movs	r2, #6
 800dbea:	f7fe ffa7 	bl	800cb3c <ComputeCmacB0>
 800dbee:	0003      	movs	r3, r0
 800dbf0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dbf2:	19bb      	adds	r3, r7, r6
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 800dbfa:	231e      	movs	r3, #30
 800dbfc:	18fb      	adds	r3, r7, r3
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	e008      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	0018      	movs	r0, r3
 800dc06:	f000 fcdb 	bl	800e5c0 <LoRaMacSerializerData>
 800dc0a:	1e03      	subs	r3, r0, #0
 800dc0c:	d001      	beq.n	800dc12 <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800dc0e:	230e      	movs	r3, #14
 800dc10:	e000      	b.n	800dc14 <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	0018      	movs	r0, r3
 800dc16:	46bd      	mov	sp, r7
 800dc18:	b009      	add	sp, #36	; 0x24
 800dc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc1c:	20000b88 	.word	0x20000b88

0800dc20 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc22:	b08b      	sub	sp, #44	; 0x2c
 800dc24:	af04      	add	r7, sp, #16
 800dc26:	60b9      	str	r1, [r7, #8]
 800dc28:	0011      	movs	r1, r2
 800dc2a:	607b      	str	r3, [r7, #4]
 800dc2c:	230f      	movs	r3, #15
 800dc2e:	18fb      	adds	r3, r7, r3
 800dc30:	1c02      	adds	r2, r0, #0
 800dc32:	701a      	strb	r2, [r3, #0]
 800dc34:	230e      	movs	r3, #14
 800dc36:	18fb      	adds	r3, r7, r3
 800dc38:	1c0a      	adds	r2, r1, #0
 800dc3a:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dc42:	2307      	movs	r3, #7
 800dc44:	e0cf      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	230e      	movs	r3, #14
 800dc4a:	18fb      	adds	r3, r7, r3
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	0011      	movs	r1, r2
 800dc50:	0018      	movs	r0, r3
 800dc52:	f7ff fb37 	bl	800d2c4 <CheckFCntDown>
 800dc56:	0003      	movs	r3, r0
 800dc58:	001a      	movs	r2, r3
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	4053      	eors	r3, r2
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 800dc64:	2305      	movs	r3, #5
 800dc66:	e0be      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800dc68:	2315      	movs	r3, #21
 800dc6a:	18fb      	adds	r3, r7, r3
 800dc6c:	2210      	movs	r2, #16
 800dc6e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 800dc70:	2317      	movs	r3, #23
 800dc72:	18fb      	adds	r3, r7, r3
 800dc74:	2207      	movs	r2, #7
 800dc76:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 800dc78:	2314      	movs	r3, #20
 800dc7a:	18fb      	adds	r3, r7, r3
 800dc7c:	2205      	movs	r2, #5
 800dc7e:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	0018      	movs	r0, r3
 800dc84:	f000 faef 	bl	800e266 <LoRaMacParserData>
 800dc88:	1e03      	subs	r3, r0, #0
 800dc8a:	d001      	beq.n	800dc90 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dc8c:	230d      	movs	r3, #13
 800dc8e:	e0aa      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800dc90:	2515      	movs	r5, #21
 800dc92:	197c      	adds	r4, r7, r5
 800dc94:	2310      	movs	r3, #16
 800dc96:	18fa      	adds	r2, r7, r3
 800dc98:	230f      	movs	r3, #15
 800dc9a:	18fb      	adds	r3, r7, r3
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	0011      	movs	r1, r2
 800dca0:	0018      	movs	r0, r3
 800dca2:	f7ff f9c5 	bl	800d030 <GetKeyAddrItem>
 800dca6:	0003      	movs	r3, r0
 800dca8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dcaa:	197b      	adds	r3, r7, r5
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 800dcb2:	2315      	movs	r3, #21
 800dcb4:	18fb      	adds	r3, r7, r3
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	e095      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	2317      	movs	r3, #23
 800dcbe:	18fb      	adds	r3, r7, r3
 800dcc0:	7852      	ldrb	r2, [r2, #1]
 800dcc2:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d001      	beq.n	800dcd2 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800dcce:	2302      	movs	r3, #2
 800dcd0:	e089      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd4:	7b1b      	ldrb	r3, [r3, #12]
 800dcd6:	069b      	lsls	r3, r3, #26
 800dcd8:	0fdb      	lsrs	r3, r3, #31
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	001a      	movs	r2, r3
 800dcde:	2316      	movs	r3, #22
 800dce0:	18fb      	adds	r3, r7, r3
 800dce2:	1e51      	subs	r1, r2, #1
 800dce4:	418a      	sbcs	r2, r1
 800dce6:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 800dce8:	4b41      	ldr	r3, [pc, #260]	; (800ddf0 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 800dcea:	789b      	ldrb	r3, [r3, #2]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d103      	bne.n	800dcf8 <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800dcf0:	2316      	movs	r3, #22
 800dcf2:	18fb      	adds	r3, r7, r3
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	6818      	ldr	r0, [r3, #0]
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	791b      	ldrb	r3, [r3, #4]
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	3b04      	subs	r3, #4
 800dd04:	b299      	uxth	r1, r3
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0a:	2615      	movs	r6, #21
 800dd0c:	19bc      	adds	r4, r7, r6
 800dd0e:	2216      	movs	r2, #22
 800dd10:	18ba      	adds	r2, r7, r2
 800dd12:	7815      	ldrb	r5, [r2, #0]
 800dd14:	2214      	movs	r2, #20
 800dd16:	18ba      	adds	r2, r7, r2
 800dd18:	7812      	ldrb	r2, [r2, #0]
 800dd1a:	9303      	str	r3, [sp, #12]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	9302      	str	r3, [sp, #8]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	9301      	str	r3, [sp, #4]
 800dd24:	2301      	movs	r3, #1
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	002b      	movs	r3, r5
 800dd2a:	f7fe ffa3 	bl	800cc74 <VerifyCmacB0>
 800dd2e:	0003      	movs	r3, r0
 800dd30:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dd32:	19bb      	adds	r3, r7, r6
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d003      	beq.n	800dd42 <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 800dd3a:	2315      	movs	r3, #21
 800dd3c:	18fb      	adds	r3, r7, r3
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	e051      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	2220      	movs	r2, #32
 800dd46:	5c9b      	ldrb	r3, [r3, r2]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d103      	bne.n	800dd54 <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 800dd4c:	2317      	movs	r3, #23
 800dd4e:	18fb      	adds	r3, r7, r3
 800dd50:	2206      	movs	r2, #6
 800dd52:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5a:	2228      	movs	r2, #40	; 0x28
 800dd5c:	5c9b      	ldrb	r3, [r3, r2]
 800dd5e:	b299      	uxth	r1, r3
 800dd60:	2615      	movs	r6, #21
 800dd62:	19bc      	adds	r4, r7, r6
 800dd64:	68bd      	ldr	r5, [r7, #8]
 800dd66:	2317      	movs	r3, #23
 800dd68:	18fb      	adds	r3, r7, r3
 800dd6a:	781a      	ldrb	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	2301      	movs	r3, #1
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	002b      	movs	r3, r5
 800dd76:	f7fe fc4f 	bl	800c618 <PayloadEncrypt>
 800dd7a:	0003      	movs	r3, r0
 800dd7c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dd7e:	19bb      	adds	r3, r7, r6
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 800dd86:	2315      	movs	r3, #21
 800dd88:	18fb      	adds	r3, r7, r3
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	e02b      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800dd8e:	4b18      	ldr	r3, [pc, #96]	; (800ddf0 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 800dd90:	789b      	ldrb	r3, [r3, #2]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d11e      	bne.n	800ddd4 <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	7b1b      	ldrb	r3, [r3, #12]
 800dd9a:	071b      	lsls	r3, r3, #28
 800dd9c:	0f1b      	lsrs	r3, r3, #28
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	b298      	uxth	r0, r3
 800dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda4:	3310      	adds	r3, #16
 800dda6:	2515      	movs	r5, #21
 800dda8:	197c      	adds	r4, r7, r5
 800ddaa:	220e      	movs	r2, #14
 800ddac:	18ba      	adds	r2, r7, r2
 800ddae:	7812      	ldrb	r2, [r2, #0]
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	0013      	movs	r3, r2
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f7fe fd2e 	bl	800c81c <FOptsEncrypt>
 800ddc0:	0003      	movs	r3, r0
 800ddc2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ddc4:	197b      	adds	r3, r7, r5
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d003      	beq.n	800ddd4 <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 800ddcc:	2315      	movs	r3, #21
 800ddce:	18fb      	adds	r3, r7, r3
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	e008      	b.n	800dde6 <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	230e      	movs	r3, #14
 800ddd8:	18fb      	adds	r3, r7, r3
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	0011      	movs	r1, r2
 800ddde:	0018      	movs	r0, r3
 800dde0:	f7ff face 	bl	800d380 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	0018      	movs	r0, r3
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b007      	add	sp, #28
 800ddec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddee:	46c0      	nop			; (mov r8, r8)
 800ddf0:	20000b88 	.word	0x20000b88

0800ddf4 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <NvmCtxChanged+0x18>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 800de00:	4b02      	ldr	r3, [pc, #8]	; (800de0c <NvmCtxChanged+0x18>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4798      	blx	r3
    }
}
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	20000bb8 	.word	0x20000bb8

0800de10 <LoRaMacGetFCntDown>:
    return &FCntHandlerNvmCtx;
}

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60ba      	str	r2, [r7, #8]
 800de18:	607b      	str	r3, [r7, #4]
 800de1a:	230f      	movs	r3, #15
 800de1c:	18fb      	adds	r3, r7, r3
 800de1e:	1c02      	adds	r2, r0, #0
 800de20:	701a      	strb	r2, [r3, #0]
 800de22:	230e      	movs	r3, #14
 800de24:	18fb      	adds	r3, r7, r3
 800de26:	1c0a      	adds	r2, r1, #0
 800de28:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d005      	beq.n	800de44 <LoRaMacGetFCntDown+0x34>
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d002      	beq.n	800de44 <LoRaMacGetFCntDown+0x34>
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	2b00      	cmp	r3, #0
 800de42:	d101      	bne.n	800de48 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 800de44:	2304      	movs	r3, #4
 800de46:	e088      	b.n	800df5a <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800de48:	230f      	movs	r3, #15
 800de4a:	18fb      	adds	r3, r7, r3
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d843      	bhi.n	800deda <LoRaMacGetFCntDown+0xca>
 800de52:	009a      	lsls	r2, r3, #2
 800de54:	4b43      	ldr	r3, [pc, #268]	; (800df64 <LoRaMacGetFCntDown+0x154>)
 800de56:	18d3      	adds	r3, r2, r3
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800de5c:	1d3b      	adds	r3, r7, #4
 800de5e:	789b      	ldrb	r3, [r3, #2]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d117      	bne.n	800de94 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800de64:	230e      	movs	r3, #14
 800de66:	18fb      	adds	r3, r7, r3
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d004      	beq.n	800de78 <LoRaMacGetFCntDown+0x68>
 800de6e:	230e      	movs	r3, #14
 800de70:	18fb      	adds	r3, r7, r3
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	2b03      	cmp	r3, #3
 800de76:	d106      	bne.n	800de86 <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	2202      	movs	r2, #2
 800de7c:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 800de7e:	4b3a      	ldr	r3, [pc, #232]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 800de84:	e02b      	b.n	800dede <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 800de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de88:	2201      	movs	r2, #1
 800de8a:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 800de8c:	4b36      	ldr	r3, [pc, #216]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	617b      	str	r3, [r7, #20]
            break;
 800de92:	e024      	b.n	800dede <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	2203      	movs	r2, #3
 800de98:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 800de9a:	4b33      	ldr	r3, [pc, #204]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	617b      	str	r3, [r7, #20]
            break;
 800dea0:	e01d      	b.n	800dede <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	2204      	movs	r2, #4
 800dea6:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 800dea8:	4b2f      	ldr	r3, [pc, #188]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	617b      	str	r3, [r7, #20]
            break;
 800deae:	e016      	b.n	800dede <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	2205      	movs	r2, #5
 800deb4:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 800deb6:	4b2c      	ldr	r3, [pc, #176]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	617b      	str	r3, [r7, #20]
            break;
 800debc:	e00f      	b.n	800dede <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	2206      	movs	r2, #6
 800dec2:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 800dec4:	4b28      	ldr	r3, [pc, #160]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800dec6:	69db      	ldr	r3, [r3, #28]
 800dec8:	617b      	str	r3, [r7, #20]
            break;
 800deca:	e008      	b.n	800dede <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	2207      	movs	r2, #7
 800ded0:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 800ded2:	4b25      	ldr	r3, [pc, #148]	; (800df68 <LoRaMacGetFCntDown+0x158>)
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	617b      	str	r3, [r7, #20]
            break;
 800ded8:	e001      	b.n	800dede <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 800deda:	2305      	movs	r3, #5
 800dedc:	e03d      	b.n	800df5a <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	3301      	adds	r3, #1
 800dee2:	d105      	bne.n	800def0 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	89db      	ldrh	r3, [r3, #14]
 800dee8:	001a      	movs	r2, r3
 800deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	e023      	b.n	800df38 <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	89db      	ldrh	r3, [r3, #14]
 800def4:	001a      	movs	r2, r3
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	041b      	lsls	r3, r3, #16
 800defa:	0c1b      	lsrs	r3, r3, #16
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	dd05      	ble.n	800df12 <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	18d2      	adds	r2, r2, r3
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	601a      	str	r2, [r3, #0]
 800df10:	e012      	b.n	800df38 <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 800df1e:	2301      	movs	r3, #1
 800df20:	e01b      	b.n	800df5a <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	0c1b      	lsrs	r3, r3, #16
 800df26:	041b      	lsls	r3, r3, #16
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	89d2      	ldrh	r2, [r2, #14]
 800df2c:	189b      	adds	r3, r3, r2
 800df2e:	2280      	movs	r2, #128	; 0x80
 800df30:	0252      	lsls	r2, r2, #9
 800df32:	189a      	adds	r2, r3, r2
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 800df38:	1d3b      	adds	r3, r7, #4
 800df3a:	789b      	ldrb	r3, [r3, #2]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10b      	bne.n	800df58 <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	001a      	movs	r2, r3
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	1ad2      	subs	r2, r2, r3
 800df4a:	2320      	movs	r3, #32
 800df4c:	18fb      	adds	r3, r7, r3
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	429a      	cmp	r2, r3
 800df52:	db01      	blt.n	800df58 <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 800df54:	2302      	movs	r3, #2
 800df56:	e000      	b.n	800df5a <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	0018      	movs	r0, r3
 800df5c:	46bd      	mov	sp, r7
 800df5e:	b006      	add	sp, #24
 800df60:	bd80      	pop	{r7, pc}
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	08028608 	.word	0x08028608
 800df68:	20000b98 	.word	0x20000b98

0800df6c <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	0002      	movs	r2, r0
 800df74:	6039      	str	r1, [r7, #0]
 800df76:	1dfb      	adds	r3, r7, #7
 800df78:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 800df7a:	1dfb      	adds	r3, r7, #7
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	2b07      	cmp	r3, #7
 800df80:	d822      	bhi.n	800dfc8 <LoRaMacSetFCntDown+0x5c>
 800df82:	009a      	lsls	r2, r3, #2
 800df84:	4b15      	ldr	r3, [pc, #84]	; (800dfdc <LoRaMacSetFCntDown+0x70>)
 800df86:	18d3      	adds	r3, r2, r3
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e020      	b.n	800dfd2 <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 800df90:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	605a      	str	r2, [r3, #4]
            break;
 800df96:	e019      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 800df98:	4b11      	ldr	r3, [pc, #68]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	609a      	str	r2, [r3, #8]
            break;
 800df9e:	e015      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 800dfa0:	4b0f      	ldr	r3, [pc, #60]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	60da      	str	r2, [r3, #12]
            break;
 800dfa6:	e011      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 800dfa8:	4b0d      	ldr	r3, [pc, #52]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	611a      	str	r2, [r3, #16]
            break;
 800dfae:	e00d      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 800dfb0:	4b0b      	ldr	r3, [pc, #44]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	615a      	str	r2, [r3, #20]
            break;
 800dfb6:	e009      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 800dfb8:	4b09      	ldr	r3, [pc, #36]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	619a      	str	r2, [r3, #24]
            break;
 800dfbe:	e005      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 800dfc0:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <LoRaMacSetFCntDown+0x74>)
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	61da      	str	r2, [r3, #28]
            break;
 800dfc6:	e001      	b.n	800dfcc <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 800dfc8:	2305      	movs	r3, #5
 800dfca:	e002      	b.n	800dfd2 <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 800dfcc:	f7ff ff12 	bl	800ddf4 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	b002      	add	sp, #8
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	46c0      	nop			; (mov r8, r8)
 800dfdc:	0802861c 	.word	0x0802861c
 800dfe0:	20000b98 	.word	0x20000b98

0800dfe4 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 800dff2:	2304      	movs	r3, #4
 800dff4:	e005      	b.n	800e002 <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 800dff6:	4b05      	ldr	r3, [pc, #20]	; (800e00c <LoRaMacGetFCntUp+0x28>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	1c5a      	adds	r2, r3, #1
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800e000:	2300      	movs	r3, #0
}
 800e002:	0018      	movs	r0, r3
 800e004:	46bd      	mov	sp, r7
 800e006:	b002      	add	sp, #8
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	46c0      	nop			; (mov r8, r8)
 800e00c:	20000b98 	.word	0x20000b98

0800e010 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 800e018:	4b04      	ldr	r3, [pc, #16]	; (800e02c <LoRaMacSetFCntUp+0x1c>)
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 800e01e:	f7ff fee9 	bl	800ddf4 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800e022:	2300      	movs	r3, #0
}
 800e024:	0018      	movs	r0, r3
 800e026:	46bd      	mov	sp, r7
 800e028:	b002      	add	sp, #8
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	20000b98 	.word	0x20000b98

0800e030 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 800e034:	4b12      	ldr	r3, [pc, #72]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e03a:	4b11      	ldr	r3, [pc, #68]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	4252      	negs	r2, r2
 800e040:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e042:	4b0f      	ldr	r3, [pc, #60]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e044:	2201      	movs	r2, #1
 800e046:	4252      	negs	r2, r2
 800e048:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800e04a:	4b0d      	ldr	r3, [pc, #52]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e04c:	2201      	movs	r2, #1
 800e04e:	4252      	negs	r2, r2
 800e050:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800e052:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e054:	2201      	movs	r2, #1
 800e056:	4252      	negs	r2, r2
 800e058:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800e05a:	4b09      	ldr	r3, [pc, #36]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e05c:	2201      	movs	r2, #1
 800e05e:	4252      	negs	r2, r2
 800e060:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800e062:	4b07      	ldr	r3, [pc, #28]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e064:	2201      	movs	r2, #1
 800e066:	4252      	negs	r2, r2
 800e068:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800e06a:	4b05      	ldr	r3, [pc, #20]	; (800e080 <LoRaMacResetFCnts+0x50>)
 800e06c:	2201      	movs	r2, #1
 800e06e:	4252      	negs	r2, r2
 800e070:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 800e072:	f7ff febf 	bl	800ddf4 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800e076:	2300      	movs	r3, #0
}
 800e078:	0018      	movs	r0, r3
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	46c0      	nop			; (mov r8, r8)
 800e080:	20000b98 	.word	0x20000b98

0800e084 <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800e084:	b590      	push	{r4, r7, lr}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <LoRaMacParserJoinAccept+0x16>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800e09a:	2302      	movs	r3, #2
 800e09c:	e0df      	b.n	800e25e <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 800e09e:	240e      	movs	r4, #14
 800e0a0:	193b      	adds	r3, r7, r4
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	193b      	adds	r3, r7, r4
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	1939      	adds	r1, r7, r4
 800e0b0:	1c58      	adds	r0, r3, #1
 800e0b2:	8008      	strh	r0, [r1, #0]
 800e0b4:	18d3      	adds	r3, r2, r3
 800e0b6:	781a      	ldrb	r2, [r3, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	1d98      	adds	r0, r3, #6
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	193b      	adds	r3, r7, r4
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	18d3      	adds	r3, r2, r3
 800e0ca:	2203      	movs	r2, #3
 800e0cc:	0019      	movs	r1, r3
 800e0ce:	f00e fdf1 	bl	801ccb4 <memcpy1>
    bufItr = bufItr + 3;
 800e0d2:	193b      	adds	r3, r7, r4
 800e0d4:	193a      	adds	r2, r7, r4
 800e0d6:	8812      	ldrh	r2, [r2, #0]
 800e0d8:	3203      	adds	r2, #3
 800e0da:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3309      	adds	r3, #9
 800e0e0:	0018      	movs	r0, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	193b      	adds	r3, r7, r4
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	18d3      	adds	r3, r2, r3
 800e0ec:	2203      	movs	r2, #3
 800e0ee:	0019      	movs	r1, r3
 800e0f0:	f00e fde0 	bl	801ccb4 <memcpy1>
    bufItr = bufItr + 3;
 800e0f4:	193b      	adds	r3, r7, r4
 800e0f6:	193a      	adds	r2, r7, r4
 800e0f8:	8812      	ldrh	r2, [r2, #0]
 800e0fa:	3203      	adds	r2, #3
 800e0fc:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	193b      	adds	r3, r7, r4
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	1939      	adds	r1, r7, r4
 800e108:	1c58      	adds	r0, r3, #1
 800e10a:	8008      	strh	r0, [r1, #0]
 800e10c:	18d3      	adds	r3, r2, r3
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	001a      	movs	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	193b      	adds	r3, r7, r4
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	1939      	adds	r1, r7, r4
 800e120:	1c58      	adds	r0, r3, #1
 800e122:	8008      	strh	r0, [r1, #0]
 800e124:	18d3      	adds	r3, r2, r3
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	021a      	lsls	r2, r3, #8
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	431a      	orrs	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	193b      	adds	r3, r7, r4
 800e13a:	881b      	ldrh	r3, [r3, #0]
 800e13c:	1939      	adds	r1, r7, r4
 800e13e:	1c58      	adds	r0, r3, #1
 800e140:	8008      	strh	r0, [r1, #0]
 800e142:	18d3      	adds	r3, r2, r3
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	041a      	lsls	r2, r3, #16
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	431a      	orrs	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	193b      	adds	r3, r7, r4
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	1939      	adds	r1, r7, r4
 800e15c:	1c58      	adds	r0, r3, #1
 800e15e:	8008      	strh	r0, [r1, #0]
 800e160:	18d3      	adds	r3, r2, r3
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	061a      	lsls	r2, r3, #24
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	431a      	orrs	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	193b      	adds	r3, r7, r4
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	1939      	adds	r1, r7, r4
 800e17a:	1c58      	adds	r0, r3, #1
 800e17c:	8008      	strh	r0, [r1, #0]
 800e17e:	18d3      	adds	r3, r2, r3
 800e180:	781a      	ldrb	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	193b      	adds	r3, r7, r4
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	1939      	adds	r1, r7, r4
 800e190:	1c58      	adds	r0, r3, #1
 800e192:	8008      	strh	r0, [r1, #0]
 800e194:	18d3      	adds	r3, r2, r3
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	791b      	ldrb	r3, [r3, #4]
 800e1a0:	1f1a      	subs	r2, r3, #4
 800e1a2:	193b      	adds	r3, r7, r4
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	2b10      	cmp	r3, #16
 800e1aa:	d112      	bne.n	800e1d2 <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3312      	adds	r3, #18
 800e1b0:	0018      	movs	r0, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	240e      	movs	r4, #14
 800e1b8:	193b      	adds	r3, r7, r4
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	2210      	movs	r2, #16
 800e1c0:	0019      	movs	r1, r3
 800e1c2:	f00e fd77 	bl	801ccb4 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800e1c6:	193b      	adds	r3, r7, r4
 800e1c8:	193a      	adds	r2, r7, r4
 800e1ca:	8812      	ldrh	r2, [r2, #0]
 800e1cc:	3210      	adds	r2, #16
 800e1ce:	801a      	strh	r2, [r3, #0]
 800e1d0:	e00a      	b.n	800e1e8 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	791b      	ldrb	r3, [r3, #4]
 800e1d6:	1f1a      	subs	r2, r3, #4
 800e1d8:	230e      	movs	r3, #14
 800e1da:	18fb      	adds	r3, r7, r3
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	dd01      	ble.n	800e1e8 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e03a      	b.n	800e25e <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	240e      	movs	r4, #14
 800e1ee:	193b      	adds	r3, r7, r4
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	1939      	adds	r1, r7, r4
 800e1f4:	1c58      	adds	r0, r3, #1
 800e1f6:	8008      	strh	r0, [r1, #0]
 800e1f8:	18d3      	adds	r3, r2, r3
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	001a      	movs	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	193b      	adds	r3, r7, r4
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	1939      	adds	r1, r7, r4
 800e20c:	1c58      	adds	r0, r3, #1
 800e20e:	8008      	strh	r0, [r1, #0]
 800e210:	18d3      	adds	r3, r2, r3
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	021a      	lsls	r2, r3, #8
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21a:	431a      	orrs	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	193b      	adds	r3, r7, r4
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	1939      	adds	r1, r7, r4
 800e22a:	1c58      	adds	r0, r3, #1
 800e22c:	8008      	strh	r0, [r1, #0]
 800e22e:	18d3      	adds	r3, r2, r3
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	041a      	lsls	r2, r3, #16
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e238:	431a      	orrs	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	193b      	adds	r3, r7, r4
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	1939      	adds	r1, r7, r4
 800e248:	1c58      	adds	r0, r3, #1
 800e24a:	8008      	strh	r0, [r1, #0]
 800e24c:	18d3      	adds	r3, r2, r3
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	061a      	lsls	r2, r3, #24
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	431a      	orrs	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	0018      	movs	r0, r3
 800e260:	46bd      	mov	sp, r7
 800e262:	b005      	add	sp, #20
 800e264:	bd90      	pop	{r4, r7, pc}

0800e266 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800e266:	b590      	push	{r4, r7, lr}
 800e268:	b085      	sub	sp, #20
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d003      	beq.n	800e27c <LoRaMacParserData+0x16>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d101      	bne.n	800e280 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800e27c:	2302      	movs	r3, #2
 800e27e:	e100      	b.n	800e482 <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 800e280:	240e      	movs	r4, #14
 800e282:	193b      	adds	r3, r7, r4
 800e284:	2200      	movs	r2, #0
 800e286:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	193b      	adds	r3, r7, r4
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	1939      	adds	r1, r7, r4
 800e292:	1c58      	adds	r0, r3, #1
 800e294:	8008      	strh	r0, [r1, #0]
 800e296:	18d3      	adds	r3, r2, r3
 800e298:	781a      	ldrb	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	193b      	adds	r3, r7, r4
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	1939      	adds	r1, r7, r4
 800e2a8:	1c58      	adds	r0, r3, #1
 800e2aa:	8008      	strh	r0, [r1, #0]
 800e2ac:	18d3      	adds	r3, r2, r3
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	001a      	movs	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	193b      	adds	r3, r7, r4
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	1939      	adds	r1, r7, r4
 800e2c0:	1c58      	adds	r0, r3, #1
 800e2c2:	8008      	strh	r0, [r1, #0]
 800e2c4:	18d3      	adds	r3, r2, r3
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	021a      	lsls	r2, r3, #8
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	431a      	orrs	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	193b      	adds	r3, r7, r4
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	1939      	adds	r1, r7, r4
 800e2de:	1c58      	adds	r0, r3, #1
 800e2e0:	8008      	strh	r0, [r1, #0]
 800e2e2:	18d3      	adds	r3, r2, r3
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	041a      	lsls	r2, r3, #16
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	431a      	orrs	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	193b      	adds	r3, r7, r4
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	1939      	adds	r1, r7, r4
 800e2fc:	1c58      	adds	r0, r3, #1
 800e2fe:	8008      	strh	r0, [r1, #0]
 800e300:	18d3      	adds	r3, r2, r3
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	061a      	lsls	r2, r3, #24
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	431a      	orrs	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	193b      	adds	r3, r7, r4
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	1939      	adds	r1, r7, r4
 800e31a:	1c58      	adds	r0, r3, #1
 800e31c:	8008      	strh	r0, [r1, #0]
 800e31e:	18d3      	adds	r3, r2, r3
 800e320:	781a      	ldrb	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	193b      	adds	r3, r7, r4
 800e32c:	881b      	ldrh	r3, [r3, #0]
 800e32e:	1939      	adds	r1, r7, r4
 800e330:	1c58      	adds	r0, r3, #1
 800e332:	8008      	strh	r0, [r1, #0]
 800e334:	18d3      	adds	r3, r2, r3
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	b29a      	uxth	r2, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	193b      	adds	r3, r7, r4
 800e344:	881b      	ldrh	r3, [r3, #0]
 800e346:	1939      	adds	r1, r7, r4
 800e348:	1c58      	adds	r0, r3, #1
 800e34a:	8008      	strh	r0, [r1, #0]
 800e34c:	18d3      	adds	r3, r2, r3
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	0219      	lsls	r1, r3, #8
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	89db      	ldrh	r3, [r3, #14]
 800e356:	b21a      	sxth	r2, r3
 800e358:	b20b      	sxth	r3, r1
 800e35a:	4313      	orrs	r3, r2
 800e35c:	b21b      	sxth	r3, r3
 800e35e:	b29a      	uxth	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3310      	adds	r3, #16
 800e368:	0018      	movs	r0, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	193b      	adds	r3, r7, r4
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	18d1      	adds	r1, r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7b1b      	ldrb	r3, [r3, #12]
 800e378:	071b      	lsls	r3, r3, #28
 800e37a:	0f1b      	lsrs	r3, r3, #28
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	b29b      	uxth	r3, r3
 800e380:	001a      	movs	r2, r3
 800e382:	f00e fc97 	bl	801ccb4 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	7b1b      	ldrb	r3, [r3, #12]
 800e38a:	071b      	lsls	r3, r3, #28
 800e38c:	0f1b      	lsrs	r3, r3, #28
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	b299      	uxth	r1, r3
 800e392:	193b      	adds	r3, r7, r4
 800e394:	193a      	adds	r2, r7, r4
 800e396:	8812      	ldrh	r2, [r2, #0]
 800e398:	188a      	adds	r2, r1, r2
 800e39a:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2220      	movs	r2, #32
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2228      	movs	r2, #40	; 0x28
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	791b      	ldrb	r3, [r3, #4]
 800e3b0:	001a      	movs	r2, r3
 800e3b2:	193b      	adds	r3, r7, r4
 800e3b4:	881b      	ldrh	r3, [r3, #0]
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	3b04      	subs	r3, #4
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	dd2f      	ble.n	800e41e <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	240e      	movs	r4, #14
 800e3c4:	193b      	adds	r3, r7, r4
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	1939      	adds	r1, r7, r4
 800e3ca:	1c58      	adds	r0, r3, #1
 800e3cc:	8008      	strh	r0, [r1, #0]
 800e3ce:	18d3      	adds	r3, r2, r3
 800e3d0:	7819      	ldrb	r1, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2220      	movs	r2, #32
 800e3d6:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	791a      	ldrb	r2, [r3, #4]
 800e3dc:	193b      	adds	r3, r7, r4
 800e3de:	881b      	ldrh	r3, [r3, #0]
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	3b04      	subs	r3, #4
 800e3e8:	b2d9      	uxtb	r1, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2228      	movs	r2, #40	; 0x28
 800e3ee:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	193b      	adds	r3, r7, r4
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	18d1      	adds	r1, r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2228      	movs	r2, #40	; 0x28
 800e402:	5c9b      	ldrb	r3, [r3, r2]
 800e404:	b29b      	uxth	r3, r3
 800e406:	001a      	movs	r2, r3
 800e408:	f00e fc54 	bl	801ccb4 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2228      	movs	r2, #40	; 0x28
 800e410:	5c9b      	ldrb	r3, [r3, r2]
 800e412:	b299      	uxth	r1, r3
 800e414:	193b      	adds	r3, r7, r4
 800e416:	193a      	adds	r2, r7, r4
 800e418:	8812      	ldrh	r2, [r2, #0]
 800e41a:	188a      	adds	r2, r1, r2
 800e41c:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	791b      	ldrb	r3, [r3, #4]
 800e426:	3b04      	subs	r3, #4
 800e428:	18d3      	adds	r3, r2, r3
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	001a      	movs	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6819      	ldr	r1, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	791b      	ldrb	r3, [r3, #4]
 800e43e:	3b03      	subs	r3, #3
 800e440:	18cb      	adds	r3, r1, r3
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	021b      	lsls	r3, r3, #8
 800e446:	431a      	orrs	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6819      	ldr	r1, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	791b      	ldrb	r3, [r3, #4]
 800e458:	3b02      	subs	r3, #2
 800e45a:	18cb      	adds	r3, r1, r3
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	041b      	lsls	r3, r3, #16
 800e460:	431a      	orrs	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6819      	ldr	r1, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	791b      	ldrb	r3, [r3, #4]
 800e472:	3b01      	subs	r3, #1
 800e474:	18cb      	adds	r3, r1, r3
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	061b      	lsls	r3, r3, #24
 800e47a:	431a      	orrs	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800e480:	2300      	movs	r3, #0
}
 800e482:	0018      	movs	r0, r3
 800e484:	46bd      	mov	sp, r7
 800e486:	b005      	add	sp, #20
 800e488:	bd90      	pop	{r4, r7, pc}

0800e48a <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800e48a:	b5b0      	push	{r4, r5, r7, lr}
 800e48c:	b084      	sub	sp, #16
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d003      	beq.n	800e4a0 <LoRaMacSerializerJoinRequest+0x16>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e089      	b.n	800e5b8 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 800e4a4:	230e      	movs	r3, #14
 800e4a6:	18fb      	adds	r3, r7, r3
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	791b      	ldrb	r3, [r3, #4]
 800e4b0:	2b16      	cmp	r3, #22
 800e4b2:	d801      	bhi.n	800e4b8 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	e07f      	b.n	800e5b8 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	240e      	movs	r4, #14
 800e4be:	193b      	adds	r3, r7, r4
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	1939      	adds	r1, r7, r4
 800e4c4:	1c58      	adds	r0, r3, #1
 800e4c6:	8008      	strh	r0, [r1, #0]
 800e4c8:	18d3      	adds	r3, r2, r3
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	7952      	ldrb	r2, [r2, #5]
 800e4ce:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	193b      	adds	r3, r7, r4
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	18d0      	adds	r0, r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3306      	adds	r3, #6
 800e4de:	2208      	movs	r2, #8
 800e4e0:	0019      	movs	r1, r3
 800e4e2:	f00e fc02 	bl	801ccea <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800e4e6:	193b      	adds	r3, r7, r4
 800e4e8:	193a      	adds	r2, r7, r4
 800e4ea:	8812      	ldrh	r2, [r2, #0]
 800e4ec:	3208      	adds	r2, #8
 800e4ee:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	193b      	adds	r3, r7, r4
 800e4f6:	881b      	ldrh	r3, [r3, #0]
 800e4f8:	18d0      	adds	r0, r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	330e      	adds	r3, #14
 800e4fe:	2208      	movs	r2, #8
 800e500:	0019      	movs	r1, r3
 800e502:	f00e fbf2 	bl	801ccea <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 800e506:	193b      	adds	r3, r7, r4
 800e508:	0025      	movs	r5, r4
 800e50a:	193a      	adds	r2, r7, r4
 800e50c:	8812      	ldrh	r2, [r2, #0]
 800e50e:	3208      	adds	r2, #8
 800e510:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	8ad8      	ldrh	r0, [r3, #22]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	197b      	adds	r3, r7, r5
 800e51c:	881b      	ldrh	r3, [r3, #0]
 800e51e:	1979      	adds	r1, r7, r5
 800e520:	1c5c      	adds	r4, r3, #1
 800e522:	800c      	strh	r4, [r1, #0]
 800e524:	18d3      	adds	r3, r2, r3
 800e526:	b2c2      	uxtb	r2, r0
 800e528:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	8adb      	ldrh	r3, [r3, #22]
 800e52e:	0a1b      	lsrs	r3, r3, #8
 800e530:	b298      	uxth	r0, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	197b      	adds	r3, r7, r5
 800e538:	881b      	ldrh	r3, [r3, #0]
 800e53a:	1979      	adds	r1, r7, r5
 800e53c:	1c5c      	adds	r4, r3, #1
 800e53e:	800c      	strh	r4, [r1, #0]
 800e540:	18d3      	adds	r3, r2, r3
 800e542:	b2c2      	uxtb	r2, r0
 800e544:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6998      	ldr	r0, [r3, #24]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	197b      	adds	r3, r7, r5
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	1979      	adds	r1, r7, r5
 800e554:	1c5c      	adds	r4, r3, #1
 800e556:	800c      	strh	r4, [r1, #0]
 800e558:	18d3      	adds	r3, r2, r3
 800e55a:	b2c2      	uxtb	r2, r0
 800e55c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	0a18      	lsrs	r0, r3, #8
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	197b      	adds	r3, r7, r5
 800e56a:	881b      	ldrh	r3, [r3, #0]
 800e56c:	1979      	adds	r1, r7, r5
 800e56e:	1c5c      	adds	r4, r3, #1
 800e570:	800c      	strh	r4, [r1, #0]
 800e572:	18d3      	adds	r3, r2, r3
 800e574:	b2c2      	uxtb	r2, r0
 800e576:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	699b      	ldr	r3, [r3, #24]
 800e57c:	0c18      	lsrs	r0, r3, #16
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	197b      	adds	r3, r7, r5
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	1979      	adds	r1, r7, r5
 800e588:	1c5c      	adds	r4, r3, #1
 800e58a:	800c      	strh	r4, [r1, #0]
 800e58c:	18d3      	adds	r3, r2, r3
 800e58e:	b2c2      	uxtb	r2, r0
 800e590:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	0e18      	lsrs	r0, r3, #24
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	197b      	adds	r3, r7, r5
 800e59e:	881b      	ldrh	r3, [r3, #0]
 800e5a0:	1979      	adds	r1, r7, r5
 800e5a2:	1c5c      	adds	r4, r3, #1
 800e5a4:	800c      	strh	r4, [r1, #0]
 800e5a6:	18d3      	adds	r3, r2, r3
 800e5a8:	b2c2      	uxtb	r2, r0
 800e5aa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800e5ac:	197b      	adds	r3, r7, r5
 800e5ae:	881b      	ldrh	r3, [r3, #0]
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	b004      	add	sp, #16
 800e5be:	bdb0      	pop	{r4, r5, r7, pc}

0800e5c0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800e5c0:	b5b0      	push	{r4, r5, r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d003      	beq.n	800e5d6 <LoRaMacSerializerData+0x16>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e110      	b.n	800e7fc <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 800e5da:	230e      	movs	r3, #14
 800e5dc:	18fb      	adds	r3, r7, r3
 800e5de:	2200      	movs	r2, #0
 800e5e0:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800e5e2:	230c      	movs	r3, #12
 800e5e4:	18fb      	adds	r3, r7, r3
 800e5e6:	2208      	movs	r2, #8
 800e5e8:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2228      	movs	r2, #40	; 0x28
 800e5ee:	5c9b      	ldrb	r3, [r3, r2]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d109      	bne.n	800e608 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	791b      	ldrb	r3, [r3, #4]
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	220c      	movs	r2, #12
 800e5fc:	18ba      	adds	r2, r7, r2
 800e5fe:	8812      	ldrh	r2, [r2, #0]
 800e600:	429a      	cmp	r2, r3
 800e602:	d916      	bls.n	800e632 <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e604:	2302      	movs	r3, #2
 800e606:	e0f9      	b.n	800e7fc <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	791b      	ldrb	r3, [r3, #4]
 800e60c:	0018      	movs	r0, r3
 800e60e:	230c      	movs	r3, #12
 800e610:	18fb      	adds	r3, r7, r3
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	7b12      	ldrb	r2, [r2, #12]
 800e618:	0712      	lsls	r2, r2, #28
 800e61a:	0f12      	lsrs	r2, r2, #28
 800e61c:	b2d2      	uxtb	r2, r2
 800e61e:	189b      	adds	r3, r3, r2
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	2128      	movs	r1, #40	; 0x28
 800e624:	5c52      	ldrb	r2, [r2, r1]
 800e626:	189b      	adds	r3, r3, r2
 800e628:	3301      	adds	r3, #1
 800e62a:	4298      	cmp	r0, r3
 800e62c:	da01      	bge.n	800e632 <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e62e:	2302      	movs	r3, #2
 800e630:	e0e4      	b.n	800e7fc <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	250e      	movs	r5, #14
 800e638:	197b      	adds	r3, r7, r5
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	1979      	adds	r1, r7, r5
 800e63e:	1c58      	adds	r0, r3, #1
 800e640:	8008      	strh	r0, [r1, #0]
 800e642:	18d3      	adds	r3, r2, r3
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	7952      	ldrb	r2, [r2, #5]
 800e648:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6898      	ldr	r0, [r3, #8]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	197b      	adds	r3, r7, r5
 800e654:	881b      	ldrh	r3, [r3, #0]
 800e656:	1979      	adds	r1, r7, r5
 800e658:	1c5c      	adds	r4, r3, #1
 800e65a:	800c      	strh	r4, [r1, #0]
 800e65c:	18d3      	adds	r3, r2, r3
 800e65e:	b2c2      	uxtb	r2, r0
 800e660:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	0a18      	lsrs	r0, r3, #8
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	197b      	adds	r3, r7, r5
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	1979      	adds	r1, r7, r5
 800e672:	1c5c      	adds	r4, r3, #1
 800e674:	800c      	strh	r4, [r1, #0]
 800e676:	18d3      	adds	r3, r2, r3
 800e678:	b2c2      	uxtb	r2, r0
 800e67a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	689b      	ldr	r3, [r3, #8]
 800e680:	0c18      	lsrs	r0, r3, #16
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	197b      	adds	r3, r7, r5
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	1979      	adds	r1, r7, r5
 800e68c:	1c5c      	adds	r4, r3, #1
 800e68e:	800c      	strh	r4, [r1, #0]
 800e690:	18d3      	adds	r3, r2, r3
 800e692:	b2c2      	uxtb	r2, r0
 800e694:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	0e18      	lsrs	r0, r3, #24
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	197b      	adds	r3, r7, r5
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	1979      	adds	r1, r7, r5
 800e6a6:	1c5c      	adds	r4, r3, #1
 800e6a8:	800c      	strh	r4, [r1, #0]
 800e6aa:	18d3      	adds	r3, r2, r3
 800e6ac:	b2c2      	uxtb	r2, r0
 800e6ae:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	197b      	adds	r3, r7, r5
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	1979      	adds	r1, r7, r5
 800e6ba:	1c58      	adds	r0, r3, #1
 800e6bc:	8008      	strh	r0, [r1, #0]
 800e6be:	18d3      	adds	r3, r2, r3
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	7b12      	ldrb	r2, [r2, #12]
 800e6c4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	89d8      	ldrh	r0, [r3, #14]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	197b      	adds	r3, r7, r5
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	1979      	adds	r1, r7, r5
 800e6d4:	1c5c      	adds	r4, r3, #1
 800e6d6:	800c      	strh	r4, [r1, #0]
 800e6d8:	18d3      	adds	r3, r2, r3
 800e6da:	b2c2      	uxtb	r2, r0
 800e6dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	89db      	ldrh	r3, [r3, #14]
 800e6e2:	0a1b      	lsrs	r3, r3, #8
 800e6e4:	b298      	uxth	r0, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	197b      	adds	r3, r7, r5
 800e6ec:	881b      	ldrh	r3, [r3, #0]
 800e6ee:	1979      	adds	r1, r7, r5
 800e6f0:	1c5c      	adds	r4, r3, #1
 800e6f2:	800c      	strh	r4, [r1, #0]
 800e6f4:	18d3      	adds	r3, r2, r3
 800e6f6:	b2c2      	uxtb	r2, r0
 800e6f8:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	002c      	movs	r4, r5
 800e700:	197b      	adds	r3, r7, r5
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	18d0      	adds	r0, r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3310      	adds	r3, #16
 800e70a:	0019      	movs	r1, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	7b1b      	ldrb	r3, [r3, #12]
 800e710:	071b      	lsls	r3, r3, #28
 800e712:	0f1b      	lsrs	r3, r3, #28
 800e714:	b2db      	uxtb	r3, r3
 800e716:	b29b      	uxth	r3, r3
 800e718:	001a      	movs	r2, r3
 800e71a:	f00e facb 	bl	801ccb4 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	7b1b      	ldrb	r3, [r3, #12]
 800e722:	071b      	lsls	r3, r3, #28
 800e724:	0f1b      	lsrs	r3, r3, #28
 800e726:	b2db      	uxtb	r3, r3
 800e728:	b299      	uxth	r1, r3
 800e72a:	193b      	adds	r3, r7, r4
 800e72c:	193a      	adds	r2, r7, r4
 800e72e:	8812      	ldrh	r2, [r2, #0]
 800e730:	188a      	adds	r2, r1, r2
 800e732:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2228      	movs	r2, #40	; 0x28
 800e738:	5c9b      	ldrb	r3, [r3, r2]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00c      	beq.n	800e758 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	210e      	movs	r1, #14
 800e744:	187b      	adds	r3, r7, r1
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	1879      	adds	r1, r7, r1
 800e74a:	1c58      	adds	r0, r3, #1
 800e74c:	8008      	strh	r0, [r1, #0]
 800e74e:	18d3      	adds	r3, r2, r3
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	2120      	movs	r1, #32
 800e754:	5c52      	ldrb	r2, [r2, r1]
 800e756:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	240e      	movs	r4, #14
 800e75e:	193b      	adds	r3, r7, r4
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	18d0      	adds	r0, r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2228      	movs	r2, #40	; 0x28
 800e76c:	5c9b      	ldrb	r3, [r3, r2]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	001a      	movs	r2, r3
 800e772:	f00e fa9f 	bl	801ccb4 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2228      	movs	r2, #40	; 0x28
 800e77a:	5c9b      	ldrb	r3, [r3, r2]
 800e77c:	b299      	uxth	r1, r3
 800e77e:	193b      	adds	r3, r7, r4
 800e780:	193a      	adds	r2, r7, r4
 800e782:	8812      	ldrh	r2, [r2, #0]
 800e784:	188a      	adds	r2, r1, r2
 800e786:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	193b      	adds	r3, r7, r4
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	0025      	movs	r5, r4
 800e796:	1939      	adds	r1, r7, r4
 800e798:	1c5c      	adds	r4, r3, #1
 800e79a:	800c      	strh	r4, [r1, #0]
 800e79c:	18d3      	adds	r3, r2, r3
 800e79e:	b2c2      	uxtb	r2, r0
 800e7a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a6:	0a18      	lsrs	r0, r3, #8
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	197b      	adds	r3, r7, r5
 800e7ae:	881b      	ldrh	r3, [r3, #0]
 800e7b0:	1979      	adds	r1, r7, r5
 800e7b2:	1c5c      	adds	r4, r3, #1
 800e7b4:	800c      	strh	r4, [r1, #0]
 800e7b6:	18d3      	adds	r3, r2, r3
 800e7b8:	b2c2      	uxtb	r2, r0
 800e7ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	0c18      	lsrs	r0, r3, #16
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	197b      	adds	r3, r7, r5
 800e7c8:	881b      	ldrh	r3, [r3, #0]
 800e7ca:	1979      	adds	r1, r7, r5
 800e7cc:	1c5c      	adds	r4, r3, #1
 800e7ce:	800c      	strh	r4, [r1, #0]
 800e7d0:	18d3      	adds	r3, r2, r3
 800e7d2:	b2c2      	uxtb	r2, r0
 800e7d4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7da:	0e18      	lsrs	r0, r3, #24
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	197b      	adds	r3, r7, r5
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	1979      	adds	r1, r7, r5
 800e7e6:	1c5c      	adds	r4, r3, #1
 800e7e8:	800c      	strh	r4, [r1, #0]
 800e7ea:	18d3      	adds	r3, r2, r3
 800e7ec:	b2c2      	uxtb	r2, r0
 800e7ee:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800e7f0:	197b      	adds	r3, r7, r5
 800e7f2:	881b      	ldrh	r3, [r3, #0]
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	0018      	movs	r0, r3
 800e7fe:	46bd      	mov	sp, r7
 800e800:	b004      	add	sp, #16
 800e802:	bdb0      	pop	{r4, r5, r7, pc}

0800e804 <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	0002      	movs	r2, r0
 800e80c:	6039      	str	r1, [r7, #0]
 800e80e:	1dfb      	adds	r3, r7, #7
 800e810:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 800e812:	2308      	movs	r3, #8
 800e814:	18fb      	adds	r3, r7, r3
 800e816:	2200      	movs	r2, #0
 800e818:	601a      	str	r2, [r3, #0]
    switch( region )
 800e81a:	1dfb      	adds	r3, r7, #7
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2b09      	cmp	r3, #9
 800e820:	d868      	bhi.n	800e8f4 <RegionGetPhyParam+0xf0>
 800e822:	009a      	lsls	r2, r3, #2
 800e824:	4b3b      	ldr	r3, [pc, #236]	; (800e914 <RegionGetPhyParam+0x110>)
 800e826:	18d3      	adds	r3, r2, r3
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	469f      	mov	pc, r3
    {
        AS923_GET_PHY_PARAM( );
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	0018      	movs	r0, r3
 800e830:	f000 ff64 	bl	800f6fc <RegionAS923GetPhyParam>
 800e834:	0003      	movs	r3, r0
 800e836:	001a      	movs	r2, r3
 800e838:	230c      	movs	r3, #12
 800e83a:	18fb      	adds	r3, r7, r3
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	e05f      	b.n	800e900 <RegionGetPhyParam+0xfc>
        AU915_GET_PHY_PARAM( );
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	0018      	movs	r0, r3
 800e844:	f002 fa00 	bl	8010c48 <RegionAU915GetPhyParam>
 800e848:	0003      	movs	r3, r0
 800e84a:	001a      	movs	r2, r3
 800e84c:	230c      	movs	r3, #12
 800e84e:	18fb      	adds	r3, r7, r3
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	e055      	b.n	800e900 <RegionGetPhyParam+0xfc>
        CN470_GET_PHY_PARAM( );
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	0018      	movs	r0, r3
 800e858:	f003 fc06 	bl	8012068 <RegionCN470GetPhyParam>
 800e85c:	0003      	movs	r3, r0
 800e85e:	001a      	movs	r2, r3
 800e860:	230c      	movs	r3, #12
 800e862:	18fb      	adds	r3, r7, r3
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	e04b      	b.n	800e900 <RegionGetPhyParam+0xfc>
        CN779_GET_PHY_PARAM( );
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	0018      	movs	r0, r3
 800e86c:	f004 fbea 	bl	8013044 <RegionCN779GetPhyParam>
 800e870:	0003      	movs	r3, r0
 800e872:	001a      	movs	r2, r3
 800e874:	230c      	movs	r3, #12
 800e876:	18fb      	adds	r3, r7, r3
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	e041      	b.n	800e900 <RegionGetPhyParam+0xfc>
        EU433_GET_PHY_PARAM( );
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	0018      	movs	r0, r3
 800e880:	f006 fb5c 	bl	8014f3c <RegionEU433GetPhyParam>
 800e884:	0003      	movs	r3, r0
 800e886:	001a      	movs	r2, r3
 800e888:	230c      	movs	r3, #12
 800e88a:	18fb      	adds	r3, r7, r3
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	e037      	b.n	800e900 <RegionGetPhyParam+0xfc>
        EU868_GET_PHY_PARAM( );
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	0018      	movs	r0, r3
 800e894:	f007 fda4 	bl	80163e0 <RegionEU868GetPhyParam>
 800e898:	0003      	movs	r3, r0
 800e89a:	001a      	movs	r2, r3
 800e89c:	230c      	movs	r3, #12
 800e89e:	18fb      	adds	r3, r7, r3
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	e02d      	b.n	800e900 <RegionGetPhyParam+0xfc>
        KR920_GET_PHY_PARAM( );
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	0018      	movs	r0, r3
 800e8a8:	f00a fa0a 	bl	8018cc0 <RegionKR920GetPhyParam>
 800e8ac:	0003      	movs	r3, r0
 800e8ae:	001a      	movs	r2, r3
 800e8b0:	230c      	movs	r3, #12
 800e8b2:	18fb      	adds	r3, r7, r3
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	e023      	b.n	800e900 <RegionGetPhyParam+0xfc>
        IN865_GET_PHY_PARAM( );
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f008 ffc6 	bl	801784c <RegionIN865GetPhyParam>
 800e8c0:	0003      	movs	r3, r0
 800e8c2:	001a      	movs	r2, r3
 800e8c4:	230c      	movs	r3, #12
 800e8c6:	18fb      	adds	r3, r7, r3
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	e019      	b.n	800e900 <RegionGetPhyParam+0xfc>
        US915_GET_PHY_PARAM( );
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f00c feb4 	bl	801b63c <RegionUS915GetPhyParam>
 800e8d4:	0003      	movs	r3, r0
 800e8d6:	001a      	movs	r2, r3
 800e8d8:	230c      	movs	r3, #12
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	e00f      	b.n	800e900 <RegionGetPhyParam+0xfc>
        RU864_GET_PHY_PARAM( );
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	f00b fbae 	bl	801a044 <RegionRU864GetPhyParam>
 800e8e8:	0003      	movs	r3, r0
 800e8ea:	001a      	movs	r2, r3
 800e8ec:	230c      	movs	r3, #12
 800e8ee:	18fb      	adds	r3, r7, r3
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	e005      	b.n	800e900 <RegionGetPhyParam+0xfc>
        default:
        {
            return phyParam;
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	18fb      	adds	r3, r7, r3
 800e8f8:	2208      	movs	r2, #8
 800e8fa:	18ba      	adds	r2, r7, r2
 800e8fc:	6812      	ldr	r2, [r2, #0]
 800e8fe:	601a      	str	r2, [r3, #0]
 800e900:	230c      	movs	r3, #12
 800e902:	18fb      	adds	r3, r7, r3
 800e904:	2200      	movs	r2, #0
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	0013      	movs	r3, r2
        }
    }
}
 800e90a:	0018      	movs	r0, r3
 800e90c:	46bd      	mov	sp, r7
 800e90e:	b004      	add	sp, #16
 800e910:	bd80      	pop	{r7, pc}
 800e912:	46c0      	nop			; (mov r8, r8)
 800e914:	0802863c 	.word	0x0802863c

0800e918 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	0002      	movs	r2, r0
 800e920:	6039      	str	r1, [r7, #0]
 800e922:	1dfb      	adds	r3, r7, #7
 800e924:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e926:	1dfb      	adds	r3, r7, #7
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b09      	cmp	r3, #9
 800e92c:	d836      	bhi.n	800e99c <RegionSetBandTxDone+0x84>
 800e92e:	009a      	lsls	r2, r3, #2
 800e930:	4b1c      	ldr	r3, [pc, #112]	; (800e9a4 <RegionSetBandTxDone+0x8c>)
 800e932:	18d3      	adds	r3, r2, r3
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	469f      	mov	pc, r3
    {
        AS923_SET_BAND_TX_DONE( );
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	0018      	movs	r0, r3
 800e93c:	f001 f82c 	bl	800f998 <RegionAS923SetBandTxDone>
 800e940:	e02d      	b.n	800e99e <RegionSetBandTxDone+0x86>
        AU915_SET_BAND_TX_DONE( );
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	0018      	movs	r0, r3
 800e946:	f002 fad5 	bl	8010ef4 <RegionAU915SetBandTxDone>
 800e94a:	e028      	b.n	800e99e <RegionSetBandTxDone+0x86>
        CN470_SET_BAND_TX_DONE( );
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	0018      	movs	r0, r3
 800e950:	f003 fc96 	bl	8012280 <RegionCN470SetBandTxDone>
 800e954:	e023      	b.n	800e99e <RegionSetBandTxDone+0x86>
        CN779_SET_BAND_TX_DONE( );
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	0018      	movs	r0, r3
 800e95a:	f004 fc79 	bl	8013250 <RegionCN779SetBandTxDone>
 800e95e:	e01e      	b.n	800e99e <RegionSetBandTxDone+0x86>
        EU433_SET_BAND_TX_DONE( );
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	0018      	movs	r0, r3
 800e964:	f006 fbee 	bl	8015144 <RegionEU433SetBandTxDone>
 800e968:	e019      	b.n	800e99e <RegionSetBandTxDone+0x86>
        EU868_SET_BAND_TX_DONE( );
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	0018      	movs	r0, r3
 800e96e:	f007 fe3b 	bl	80165e8 <RegionEU868SetBandTxDone>
 800e972:	e014      	b.n	800e99e <RegionSetBandTxDone+0x86>
        KR920_SET_BAND_TX_DONE( );
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	0018      	movs	r0, r3
 800e978:	f00a faa8 	bl	8018ecc <RegionKR920SetBandTxDone>
 800e97c:	e00f      	b.n	800e99e <RegionSetBandTxDone+0x86>
        IN865_SET_BAND_TX_DONE( );
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	0018      	movs	r0, r3
 800e982:	f009 f867 	bl	8017a54 <RegionIN865SetBandTxDone>
 800e986:	e00a      	b.n	800e99e <RegionSetBandTxDone+0x86>
        US915_SET_BAND_TX_DONE( );
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	0018      	movs	r0, r3
 800e98c:	f00c ff64 	bl	801b858 <RegionUS915SetBandTxDone>
 800e990:	e005      	b.n	800e99e <RegionSetBandTxDone+0x86>
        RU864_SET_BAND_TX_DONE( );
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	0018      	movs	r0, r3
 800e996:	f00b fc4f 	bl	801a238 <RegionRU864SetBandTxDone>
 800e99a:	e000      	b.n	800e99e <RegionSetBandTxDone+0x86>
        default:
        {
            return;
 800e99c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	b002      	add	sp, #8
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	08028664 	.word	0x08028664

0800e9a8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	0002      	movs	r2, r0
 800e9b0:	6039      	str	r1, [r7, #0]
 800e9b2:	1dfb      	adds	r3, r7, #7
 800e9b4:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e9b6:	1dfb      	adds	r3, r7, #7
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	2b09      	cmp	r3, #9
 800e9bc:	d836      	bhi.n	800ea2c <RegionInitDefaults+0x84>
 800e9be:	009a      	lsls	r2, r3, #2
 800e9c0:	4b1d      	ldr	r3, [pc, #116]	; (800ea38 <RegionInitDefaults+0x90>)
 800e9c2:	18d3      	adds	r3, r2, r3
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	469f      	mov	pc, r3
    {
        AS923_INIT_DEFAULTS( );
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	0018      	movs	r0, r3
 800e9cc:	f001 f804 	bl	800f9d8 <RegionAS923InitDefaults>
 800e9d0:	e02d      	b.n	800ea2e <RegionInitDefaults+0x86>
        AU915_INIT_DEFAULTS( );
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	0018      	movs	r0, r3
 800e9d6:	f002 faad 	bl	8010f34 <RegionAU915InitDefaults>
 800e9da:	e028      	b.n	800ea2e <RegionInitDefaults+0x86>
        CN470_INIT_DEFAULTS( );
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	0018      	movs	r0, r3
 800e9e0:	f003 fc6e 	bl	80122c0 <RegionCN470InitDefaults>
 800e9e4:	e023      	b.n	800ea2e <RegionInitDefaults+0x86>
        CN779_INIT_DEFAULTS( );
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	f004 fc51 	bl	8013290 <RegionCN779InitDefaults>
 800e9ee:	e01e      	b.n	800ea2e <RegionInitDefaults+0x86>
        EU433_INIT_DEFAULTS( );
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	f006 fbc6 	bl	8015184 <RegionEU433InitDefaults>
 800e9f8:	e019      	b.n	800ea2e <RegionInitDefaults+0x86>
        EU868_INIT_DEFAULTS( );
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	f007 fe13 	bl	8016628 <RegionEU868InitDefaults>
 800ea02:	e014      	b.n	800ea2e <RegionInitDefaults+0x86>
        KR920_INIT_DEFAULTS( );
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	0018      	movs	r0, r3
 800ea08:	f00a fa80 	bl	8018f0c <RegionKR920InitDefaults>
 800ea0c:	e00f      	b.n	800ea2e <RegionInitDefaults+0x86>
        IN865_INIT_DEFAULTS( );
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	0018      	movs	r0, r3
 800ea12:	f009 f83f 	bl	8017a94 <RegionIN865InitDefaults>
 800ea16:	e00a      	b.n	800ea2e <RegionInitDefaults+0x86>
        US915_INIT_DEFAULTS( );
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	0018      	movs	r0, r3
 800ea1c:	f00c ff3c 	bl	801b898 <RegionUS915InitDefaults>
 800ea20:	e005      	b.n	800ea2e <RegionInitDefaults+0x86>
        RU864_INIT_DEFAULTS( );
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	0018      	movs	r0, r3
 800ea26:	f00b fc27 	bl	801a278 <RegionRU864InitDefaults>
 800ea2a:	e000      	b.n	800ea2e <RegionInitDefaults+0x86>
        default:
        {
            break;
 800ea2c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ea2e:	46c0      	nop			; (mov r8, r8)
 800ea30:	46bd      	mov	sp, r7
 800ea32:	b002      	add	sp, #8
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	46c0      	nop			; (mov r8, r8)
 800ea38:	0802868c 	.word	0x0802868c

0800ea3c <RegionApplyCFList>:
        }
    }
}

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	0002      	movs	r2, r0
 800ea44:	6039      	str	r1, [r7, #0]
 800ea46:	1dfb      	adds	r3, r7, #7
 800ea48:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ea4a:	1dfb      	adds	r3, r7, #7
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b09      	cmp	r3, #9
 800ea50:	d836      	bhi.n	800eac0 <RegionApplyCFList+0x84>
 800ea52:	009a      	lsls	r2, r3, #2
 800ea54:	4b1d      	ldr	r3, [pc, #116]	; (800eacc <RegionApplyCFList+0x90>)
 800ea56:	18d3      	adds	r3, r2, r3
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	469f      	mov	pc, r3
    {
        AS923_APPLY_CF_LIST( );
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	0018      	movs	r0, r3
 800ea60:	f001 f81c 	bl	800fa9c <RegionAS923ApplyCFList>
 800ea64:	e02d      	b.n	800eac2 <RegionApplyCFList+0x86>
        AU915_APPLY_CF_LIST( );
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	0018      	movs	r0, r3
 800ea6a:	f002 fb81 	bl	8011170 <RegionAU915ApplyCFList>
 800ea6e:	e028      	b.n	800eac2 <RegionApplyCFList+0x86>
        CN470_APPLY_CF_LIST( );
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	0018      	movs	r0, r3
 800ea74:	f003 fcd6 	bl	8012424 <RegionCN470ApplyCFList>
 800ea78:	e023      	b.n	800eac2 <RegionApplyCFList+0x86>
        CN779_APPLY_CF_LIST( );
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	0018      	movs	r0, r3
 800ea7e:	f004 fc6f 	bl	8013360 <RegionCN779ApplyCFList>
 800ea82:	e01e      	b.n	800eac2 <RegionApplyCFList+0x86>
        EU433_APPLY_CF_LIST( );
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	0018      	movs	r0, r3
 800ea88:	f006 fbe4 	bl	8015254 <RegionEU433ApplyCFList>
 800ea8c:	e019      	b.n	800eac2 <RegionApplyCFList+0x86>
        EU868_APPLY_CF_LIST( );
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	0018      	movs	r0, r3
 800ea92:	f007 fe41 	bl	8016718 <RegionEU868ApplyCFList>
 800ea96:	e014      	b.n	800eac2 <RegionApplyCFList+0x86>
        KR920_APPLY_CF_LIST( );
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	0018      	movs	r0, r3
 800ea9c:	f00a fa9e 	bl	8018fdc <RegionKR920ApplyCFList>
 800eaa0:	e00f      	b.n	800eac2 <RegionApplyCFList+0x86>
        IN865_APPLY_CF_LIST( );
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	0018      	movs	r0, r3
 800eaa6:	f009 f85d 	bl	8017b64 <RegionIN865ApplyCFList>
 800eaaa:	e00a      	b.n	800eac2 <RegionApplyCFList+0x86>
        US915_APPLY_CF_LIST( );
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	0018      	movs	r0, r3
 800eab0:	f00d f81c 	bl	801baec <RegionUS915ApplyCFList>
 800eab4:	e005      	b.n	800eac2 <RegionApplyCFList+0x86>
        RU864_APPLY_CF_LIST( );
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	0018      	movs	r0, r3
 800eaba:	f00b fc3f 	bl	801a33c <RegionRU864ApplyCFList>
 800eabe:	e000      	b.n	800eac2 <RegionApplyCFList+0x86>
        default:
        {
            break;
 800eac0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800eac2:	46c0      	nop			; (mov r8, r8)
 800eac4:	46bd      	mov	sp, r7
 800eac6:	b002      	add	sp, #8
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	46c0      	nop			; (mov r8, r8)
 800eacc:	080286b4 	.word	0x080286b4

0800ead0 <RegionComputeRxWindowParameters>:
        }
    }
}

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	0004      	movs	r4, r0
 800ead8:	0008      	movs	r0, r1
 800eada:	0011      	movs	r1, r2
 800eadc:	603b      	str	r3, [r7, #0]
 800eade:	1dfb      	adds	r3, r7, #7
 800eae0:	1c22      	adds	r2, r4, #0
 800eae2:	701a      	strb	r2, [r3, #0]
 800eae4:	1dbb      	adds	r3, r7, #6
 800eae6:	1c02      	adds	r2, r0, #0
 800eae8:	701a      	strb	r2, [r3, #0]
 800eaea:	1d7b      	adds	r3, r7, #5
 800eaec:	1c0a      	adds	r2, r1, #0
 800eaee:	701a      	strb	r2, [r3, #0]
    switch( region )
 800eaf0:	1dfb      	adds	r3, r7, #7
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b09      	cmp	r3, #9
 800eaf6:	d900      	bls.n	800eafa <RegionComputeRxWindowParameters+0x2a>
 800eaf8:	e072      	b.n	800ebe0 <RegionComputeRxWindowParameters+0x110>
 800eafa:	009a      	lsls	r2, r3, #2
 800eafc:	4b3b      	ldr	r3, [pc, #236]	; (800ebec <RegionComputeRxWindowParameters+0x11c>)
 800eafe:	18d3      	adds	r3, r2, r3
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	469f      	mov	pc, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb04:	69bc      	ldr	r4, [r7, #24]
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	1d7b      	adds	r3, r7, #5
 800eb0a:	7819      	ldrb	r1, [r3, #0]
 800eb0c:	1dbb      	adds	r3, r7, #6
 800eb0e:	2000      	movs	r0, #0
 800eb10:	5618      	ldrsb	r0, [r3, r0]
 800eb12:	0023      	movs	r3, r4
 800eb14:	f001 f854 	bl	800fbc0 <RegionAS923ComputeRxWindowParameters>
 800eb18:	e063      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb1a:	69bc      	ldr	r4, [r7, #24]
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	1d7b      	adds	r3, r7, #5
 800eb20:	7819      	ldrb	r1, [r3, #0]
 800eb22:	1dbb      	adds	r3, r7, #6
 800eb24:	2000      	movs	r0, #0
 800eb26:	5618      	ldrsb	r0, [r3, r0]
 800eb28:	0023      	movs	r3, r4
 800eb2a:	f002 fbb1 	bl	8011290 <RegionAU915ComputeRxWindowParameters>
 800eb2e:	e058      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb30:	69bc      	ldr	r4, [r7, #24]
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	1d7b      	adds	r3, r7, #5
 800eb36:	7819      	ldrb	r1, [r3, #0]
 800eb38:	1dbb      	adds	r3, r7, #6
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	5618      	ldrsb	r0, [r3, r0]
 800eb3e:	0023      	movs	r3, r4
 800eb40:	f003 fcd0 	bl	80124e4 <RegionCN470ComputeRxWindowParameters>
 800eb44:	e04d      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb46:	69bc      	ldr	r4, [r7, #24]
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	1d7b      	adds	r3, r7, #5
 800eb4c:	7819      	ldrb	r1, [r3, #0]
 800eb4e:	1dbb      	adds	r3, r7, #6
 800eb50:	2000      	movs	r0, #0
 800eb52:	5618      	ldrsb	r0, [r3, r0]
 800eb54:	0023      	movs	r3, r4
 800eb56:	f004 fc95 	bl	8013484 <RegionCN779ComputeRxWindowParameters>
 800eb5a:	e042      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb5c:	69bc      	ldr	r4, [r7, #24]
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	1d7b      	adds	r3, r7, #5
 800eb62:	7819      	ldrb	r1, [r3, #0]
 800eb64:	1dbb      	adds	r3, r7, #6
 800eb66:	2000      	movs	r0, #0
 800eb68:	5618      	ldrsb	r0, [r3, r0]
 800eb6a:	0023      	movs	r3, r4
 800eb6c:	f006 fc04 	bl	8015378 <RegionEU433ComputeRxWindowParameters>
 800eb70:	e037      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb72:	69bc      	ldr	r4, [r7, #24]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	1d7b      	adds	r3, r7, #5
 800eb78:	7819      	ldrb	r1, [r3, #0]
 800eb7a:	1dbb      	adds	r3, r7, #6
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	5618      	ldrsb	r0, [r3, r0]
 800eb80:	0023      	movs	r3, r4
 800eb82:	f007 fe5b 	bl	801683c <RegionEU868ComputeRxWindowParameters>
 800eb86:	e02c      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb88:	69bc      	ldr	r4, [r7, #24]
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	1d7b      	adds	r3, r7, #5
 800eb8e:	7819      	ldrb	r1, [r3, #0]
 800eb90:	1dbb      	adds	r3, r7, #6
 800eb92:	2000      	movs	r0, #0
 800eb94:	5618      	ldrsb	r0, [r3, r0]
 800eb96:	0023      	movs	r3, r4
 800eb98:	f00a fab2 	bl	8019100 <RegionKR920ComputeRxWindowParameters>
 800eb9c:	e021      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb9e:	69bc      	ldr	r4, [r7, #24]
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	1d7b      	adds	r3, r7, #5
 800eba4:	7819      	ldrb	r1, [r3, #0]
 800eba6:	1dbb      	adds	r3, r7, #6
 800eba8:	2000      	movs	r0, #0
 800ebaa:	5618      	ldrsb	r0, [r3, r0]
 800ebac:	0023      	movs	r3, r4
 800ebae:	f009 f86b 	bl	8017c88 <RegionIN865ComputeRxWindowParameters>
 800ebb2:	e016      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ebb4:	69bc      	ldr	r4, [r7, #24]
 800ebb6:	683a      	ldr	r2, [r7, #0]
 800ebb8:	1d7b      	adds	r3, r7, #5
 800ebba:	7819      	ldrb	r1, [r3, #0]
 800ebbc:	1dbb      	adds	r3, r7, #6
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	5618      	ldrsb	r0, [r3, r0]
 800ebc2:	0023      	movs	r3, r4
 800ebc4:	f00d f822 	bl	801bc0c <RegionUS915ComputeRxWindowParameters>
 800ebc8:	e00b      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ebca:	69bc      	ldr	r4, [r7, #24]
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	1d7b      	adds	r3, r7, #5
 800ebd0:	7819      	ldrb	r1, [r3, #0]
 800ebd2:	1dbb      	adds	r3, r7, #6
 800ebd4:	2000      	movs	r0, #0
 800ebd6:	5618      	ldrsb	r0, [r3, r0]
 800ebd8:	0023      	movs	r3, r4
 800ebda:	f00b fc41 	bl	801a460 <RegionRU864ComputeRxWindowParameters>
 800ebde:	e000      	b.n	800ebe2 <RegionComputeRxWindowParameters+0x112>
        default:
        {
            break;
 800ebe0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ebe2:	46c0      	nop			; (mov r8, r8)
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	b003      	add	sp, #12
 800ebe8:	bd90      	pop	{r4, r7, pc}
 800ebea:	46c0      	nop			; (mov r8, r8)
 800ebec:	080286dc 	.word	0x080286dc

0800ebf0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	607a      	str	r2, [r7, #4]
 800ebfa:	210f      	movs	r1, #15
 800ebfc:	187b      	adds	r3, r7, r1
 800ebfe:	1c02      	adds	r2, r0, #0
 800ec00:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ec02:	187b      	adds	r3, r7, r1
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	2b09      	cmp	r3, #9
 800ec08:	d854      	bhi.n	800ecb4 <RegionRxConfig+0xc4>
 800ec0a:	009a      	lsls	r2, r3, #2
 800ec0c:	4b2c      	ldr	r3, [pc, #176]	; (800ecc0 <RegionRxConfig+0xd0>)
 800ec0e:	18d3      	adds	r3, r2, r3
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	469f      	mov	pc, r3
    {
        AS923_RX_CONFIG( );
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	0011      	movs	r1, r2
 800ec1a:	0018      	movs	r0, r3
 800ec1c:	f001 f83a 	bl	800fc94 <RegionAS923RxConfig>
 800ec20:	0003      	movs	r3, r0
 800ec22:	e048      	b.n	800ecb6 <RegionRxConfig+0xc6>
        AU915_RX_CONFIG( );
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	0011      	movs	r1, r2
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f002 fb88 	bl	8011340 <RegionAU915RxConfig>
 800ec30:	0003      	movs	r3, r0
 800ec32:	e040      	b.n	800ecb6 <RegionRxConfig+0xc6>
        CN470_RX_CONFIG( );
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	0011      	movs	r1, r2
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f003 fcaa 	bl	8012594 <RegionCN470RxConfig>
 800ec40:	0003      	movs	r3, r0
 800ec42:	e038      	b.n	800ecb6 <RegionRxConfig+0xc6>
        CN779_RX_CONFIG( );
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	0011      	movs	r1, r2
 800ec4a:	0018      	movs	r0, r3
 800ec4c:	f004 fc84 	bl	8013558 <RegionCN779RxConfig>
 800ec50:	0003      	movs	r3, r0
 800ec52:	e030      	b.n	800ecb6 <RegionRxConfig+0xc6>
        EU433_RX_CONFIG( );
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	0011      	movs	r1, r2
 800ec5a:	0018      	movs	r0, r3
 800ec5c:	f006 fbf6 	bl	801544c <RegionEU433RxConfig>
 800ec60:	0003      	movs	r3, r0
 800ec62:	e028      	b.n	800ecb6 <RegionRxConfig+0xc6>
        EU868_RX_CONFIG( );
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	0011      	movs	r1, r2
 800ec6a:	0018      	movs	r0, r3
 800ec6c:	f007 fe50 	bl	8016910 <RegionEU868RxConfig>
 800ec70:	0003      	movs	r3, r0
 800ec72:	e020      	b.n	800ecb6 <RegionRxConfig+0xc6>
        KR920_RX_CONFIG( );
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	0011      	movs	r1, r2
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	f00a fa98 	bl	80191b0 <RegionKR920RxConfig>
 800ec80:	0003      	movs	r3, r0
 800ec82:	e018      	b.n	800ecb6 <RegionRxConfig+0xc6>
        IN865_RX_CONFIG( );
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	0011      	movs	r1, r2
 800ec8a:	0018      	movs	r0, r3
 800ec8c:	f009 f866 	bl	8017d5c <RegionIN865RxConfig>
 800ec90:	0003      	movs	r3, r0
 800ec92:	e010      	b.n	800ecb6 <RegionRxConfig+0xc6>
        US915_RX_CONFIG( );
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	0011      	movs	r1, r2
 800ec9a:	0018      	movs	r0, r3
 800ec9c:	f00d f80e 	bl	801bcbc <RegionUS915RxConfig>
 800eca0:	0003      	movs	r3, r0
 800eca2:	e008      	b.n	800ecb6 <RegionRxConfig+0xc6>
        RU864_RX_CONFIG( );
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	0011      	movs	r1, r2
 800ecaa:	0018      	movs	r0, r3
 800ecac:	f00b fc42 	bl	801a534 <RegionRU864RxConfig>
 800ecb0:	0003      	movs	r3, r0
 800ecb2:	e000      	b.n	800ecb6 <RegionRxConfig+0xc6>
        default:
        {
            return false;
 800ecb4:	2300      	movs	r3, #0
        }
    }
}
 800ecb6:	0018      	movs	r0, r3
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	b004      	add	sp, #16
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	46c0      	nop			; (mov r8, r8)
 800ecc0:	08028704 	.word	0x08028704

0800ecc4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60b9      	str	r1, [r7, #8]
 800eccc:	607a      	str	r2, [r7, #4]
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	210f      	movs	r1, #15
 800ecd2:	187b      	adds	r3, r7, r1
 800ecd4:	1c02      	adds	r2, r0, #0
 800ecd6:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ecd8:	187b      	adds	r3, r7, r1
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	2b09      	cmp	r3, #9
 800ecde:	d854      	bhi.n	800ed8a <RegionTxConfig+0xc6>
 800ece0:	009a      	lsls	r2, r3, #2
 800ece2:	4b2c      	ldr	r3, [pc, #176]	; (800ed94 <RegionTxConfig+0xd0>)
 800ece4:	18d3      	adds	r3, r2, r3
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	469f      	mov	pc, r3
    {
        AS923_TX_CONFIG( );
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	6879      	ldr	r1, [r7, #4]
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	f001 f8bb 	bl	800fe6c <RegionAS923TxConfig>
 800ecf6:	0003      	movs	r3, r0
 800ecf8:	e048      	b.n	800ed8c <RegionTxConfig+0xc8>
        AU915_TX_CONFIG( );
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	6879      	ldr	r1, [r7, #4]
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	0018      	movs	r0, r3
 800ed02:	f002 fbb1 	bl	8011468 <RegionAU915TxConfig>
 800ed06:	0003      	movs	r3, r0
 800ed08:	e040      	b.n	800ed8c <RegionTxConfig+0xc8>
        CN470_TX_CONFIG( );
 800ed0a:	683a      	ldr	r2, [r7, #0]
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	0018      	movs	r0, r3
 800ed12:	f003 fcd7 	bl	80126c4 <RegionCN470TxConfig>
 800ed16:	0003      	movs	r3, r0
 800ed18:	e038      	b.n	800ed8c <RegionTxConfig+0xc8>
        CN779_TX_CONFIG( );
 800ed1a:	683a      	ldr	r2, [r7, #0]
 800ed1c:	6879      	ldr	r1, [r7, #4]
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	0018      	movs	r0, r3
 800ed22:	f004 fd05 	bl	8013730 <RegionCN779TxConfig>
 800ed26:	0003      	movs	r3, r0
 800ed28:	e030      	b.n	800ed8c <RegionTxConfig+0xc8>
        EU433_TX_CONFIG( );
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	0018      	movs	r0, r3
 800ed32:	f006 fc77 	bl	8015624 <RegionEU433TxConfig>
 800ed36:	0003      	movs	r3, r0
 800ed38:	e028      	b.n	800ed8c <RegionTxConfig+0xc8>
        EU868_TX_CONFIG( );
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	6879      	ldr	r1, [r7, #4]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	0018      	movs	r0, r3
 800ed42:	f007 fed1 	bl	8016ae8 <RegionEU868TxConfig>
 800ed46:	0003      	movs	r3, r0
 800ed48:	e020      	b.n	800ed8c <RegionTxConfig+0xc8>
        KR920_TX_CONFIG( );
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	6879      	ldr	r1, [r7, #4]
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	0018      	movs	r0, r3
 800ed52:	f00a fac5 	bl	80192e0 <RegionKR920TxConfig>
 800ed56:	0003      	movs	r3, r0
 800ed58:	e018      	b.n	800ed8c <RegionTxConfig+0xc8>
        IN865_TX_CONFIG( );
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	6879      	ldr	r1, [r7, #4]
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	0018      	movs	r0, r3
 800ed62:	f009 f8e7 	bl	8017f34 <RegionIN865TxConfig>
 800ed66:	0003      	movs	r3, r0
 800ed68:	e010      	b.n	800ed8c <RegionTxConfig+0xc8>
        US915_TX_CONFIG( );
 800ed6a:	683a      	ldr	r2, [r7, #0]
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	0018      	movs	r0, r3
 800ed72:	f00d f837 	bl	801bde4 <RegionUS915TxConfig>
 800ed76:	0003      	movs	r3, r0
 800ed78:	e008      	b.n	800ed8c <RegionTxConfig+0xc8>
        RU864_TX_CONFIG( );
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	0018      	movs	r0, r3
 800ed82:	f00b fcc3 	bl	801a70c <RegionRU864TxConfig>
 800ed86:	0003      	movs	r3, r0
 800ed88:	e000      	b.n	800ed8c <RegionTxConfig+0xc8>
        default:
        {
            return false;
 800ed8a:	2300      	movs	r3, #0
        }
    }
}
 800ed8c:	0018      	movs	r0, r3
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	b004      	add	sp, #16
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	0802872c 	.word	0x0802872c

0800ed98 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ed98:	b590      	push	{r4, r7, lr}
 800ed9a:	b087      	sub	sp, #28
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	60b9      	str	r1, [r7, #8]
 800eda0:	607a      	str	r2, [r7, #4]
 800eda2:	603b      	str	r3, [r7, #0]
 800eda4:	210f      	movs	r1, #15
 800eda6:	187b      	adds	r3, r7, r1
 800eda8:	1c02      	adds	r2, r0, #0
 800edaa:	701a      	strb	r2, [r3, #0]
    switch( region )
 800edac:	187b      	adds	r3, r7, r1
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d872      	bhi.n	800ee9a <RegionLinkAdrReq+0x102>
 800edb4:	009a      	lsls	r2, r3, #2
 800edb6:	4b3b      	ldr	r3, [pc, #236]	; (800eea4 <RegionLinkAdrReq+0x10c>)
 800edb8:	18d3      	adds	r3, r2, r3
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	469f      	mov	pc, r3
    {
        AS923_LINK_ADR_REQ( );
 800edbe:	6a3c      	ldr	r4, [r7, #32]
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	6879      	ldr	r1, [r7, #4]
 800edc4:	68b8      	ldr	r0, [r7, #8]
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	0023      	movs	r3, r4
 800edcc:	f001 f926 	bl	801001c <RegionAS923LinkAdrReq>
 800edd0:	0003      	movs	r3, r0
 800edd2:	e063      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        AU915_LINK_ADR_REQ( );
 800edd4:	6a3c      	ldr	r4, [r7, #32]
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	68b8      	ldr	r0, [r7, #8]
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	0023      	movs	r3, r4
 800ede2:	f002 fbdb 	bl	801159c <RegionAU915LinkAdrReq>
 800ede6:	0003      	movs	r3, r0
 800ede8:	e058      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        CN470_LINK_ADR_REQ( );
 800edea:	6a3c      	ldr	r4, [r7, #32]
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	68b8      	ldr	r0, [r7, #8]
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	0023      	movs	r3, r4
 800edf8:	f003 fcf4 	bl	80127e4 <RegionCN470LinkAdrReq>
 800edfc:	0003      	movs	r3, r0
 800edfe:	e04d      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        CN779_LINK_ADR_REQ( );
 800ee00:	6a3c      	ldr	r4, [r7, #32]
 800ee02:	683a      	ldr	r2, [r7, #0]
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	68b8      	ldr	r0, [r7, #8]
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	0023      	movs	r3, r4
 800ee0e:	f004 fd67 	bl	80138e0 <RegionCN779LinkAdrReq>
 800ee12:	0003      	movs	r3, r0
 800ee14:	e042      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        EU433_LINK_ADR_REQ( );
 800ee16:	6a3c      	ldr	r4, [r7, #32]
 800ee18:	683a      	ldr	r2, [r7, #0]
 800ee1a:	6879      	ldr	r1, [r7, #4]
 800ee1c:	68b8      	ldr	r0, [r7, #8]
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	0023      	movs	r3, r4
 800ee24:	f006 fcd6 	bl	80157d4 <RegionEU433LinkAdrReq>
 800ee28:	0003      	movs	r3, r0
 800ee2a:	e037      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        EU868_LINK_ADR_REQ( );
 800ee2c:	6a3c      	ldr	r4, [r7, #32]
 800ee2e:	683a      	ldr	r2, [r7, #0]
 800ee30:	6879      	ldr	r1, [r7, #4]
 800ee32:	68b8      	ldr	r0, [r7, #8]
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	0023      	movs	r3, r4
 800ee3a:	f007 ff2d 	bl	8016c98 <RegionEU868LinkAdrReq>
 800ee3e:	0003      	movs	r3, r0
 800ee40:	e02c      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        KR920_LINK_ADR_REQ( );
 800ee42:	6a3c      	ldr	r4, [r7, #32]
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	68b8      	ldr	r0, [r7, #8]
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	0023      	movs	r3, r4
 800ee50:	f00a fb00 	bl	8019454 <RegionKR920LinkAdrReq>
 800ee54:	0003      	movs	r3, r0
 800ee56:	e021      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        IN865_LINK_ADR_REQ( );
 800ee58:	6a3c      	ldr	r4, [r7, #32]
 800ee5a:	683a      	ldr	r2, [r7, #0]
 800ee5c:	6879      	ldr	r1, [r7, #4]
 800ee5e:	68b8      	ldr	r0, [r7, #8]
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	9300      	str	r3, [sp, #0]
 800ee64:	0023      	movs	r3, r4
 800ee66:	f009 f93d 	bl	80180e4 <RegionIN865LinkAdrReq>
 800ee6a:	0003      	movs	r3, r0
 800ee6c:	e016      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        US915_LINK_ADR_REQ( );
 800ee6e:	6a3c      	ldr	r4, [r7, #32]
 800ee70:	683a      	ldr	r2, [r7, #0]
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	68b8      	ldr	r0, [r7, #8]
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	0023      	movs	r3, r4
 800ee7c:	f00d f84c 	bl	801bf18 <RegionUS915LinkAdrReq>
 800ee80:	0003      	movs	r3, r0
 800ee82:	e00b      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        RU864_LINK_ADR_REQ( );
 800ee84:	6a3c      	ldr	r4, [r7, #32]
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	6879      	ldr	r1, [r7, #4]
 800ee8a:	68b8      	ldr	r0, [r7, #8]
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	0023      	movs	r3, r4
 800ee92:	f00b fd13 	bl	801a8bc <RegionRU864LinkAdrReq>
 800ee96:	0003      	movs	r3, r0
 800ee98:	e000      	b.n	800ee9c <RegionLinkAdrReq+0x104>
        default:
        {
            return 0;
 800ee9a:	2300      	movs	r3, #0
        }
    }
}
 800ee9c:	0018      	movs	r0, r3
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	b005      	add	sp, #20
 800eea2:	bd90      	pop	{r4, r7, pc}
 800eea4:	08028754 	.word	0x08028754

0800eea8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	0002      	movs	r2, r0
 800eeb0:	6039      	str	r1, [r7, #0]
 800eeb2:	1dfb      	adds	r3, r7, #7
 800eeb4:	701a      	strb	r2, [r3, #0]
    switch( region )
 800eeb6:	1dfb      	adds	r3, r7, #7
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	2b09      	cmp	r3, #9
 800eebc:	d840      	bhi.n	800ef40 <RegionRxParamSetupReq+0x98>
 800eebe:	009a      	lsls	r2, r3, #2
 800eec0:	4b22      	ldr	r3, [pc, #136]	; (800ef4c <RegionRxParamSetupReq+0xa4>)
 800eec2:	18d3      	adds	r3, r2, r3
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	469f      	mov	pc, r3
    {
        AS923_RX_PARAM_SETUP_REQ( );
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	0018      	movs	r0, r3
 800eecc:	f001 f9fc 	bl	80102c8 <RegionAS923RxParamSetupReq>
 800eed0:	0003      	movs	r3, r0
 800eed2:	e036      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        AU915_RX_PARAM_SETUP_REQ( );
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	0018      	movs	r0, r3
 800eed8:	f002 fdba 	bl	8011a50 <RegionAU915RxParamSetupReq>
 800eedc:	0003      	movs	r3, r0
 800eede:	e030      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        CN470_RX_PARAM_SETUP_REQ( );
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	0018      	movs	r0, r3
 800eee4:	f003 fdc4 	bl	8012a70 <RegionCN470RxParamSetupReq>
 800eee8:	0003      	movs	r3, r0
 800eeea:	e02a      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        CN779_RX_PARAM_SETUP_REQ( );
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	0018      	movs	r0, r3
 800eef0:	f004 fe4c 	bl	8013b8c <RegionCN779RxParamSetupReq>
 800eef4:	0003      	movs	r3, r0
 800eef6:	e024      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        EU433_RX_PARAM_SETUP_REQ( );
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	0018      	movs	r0, r3
 800eefc:	f006 fdc0 	bl	8015a80 <RegionEU433RxParamSetupReq>
 800ef00:	0003      	movs	r3, r0
 800ef02:	e01e      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        EU868_RX_PARAM_SETUP_REQ( );
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	0018      	movs	r0, r3
 800ef08:	f008 f81c 	bl	8016f44 <RegionEU868RxParamSetupReq>
 800ef0c:	0003      	movs	r3, r0
 800ef0e:	e018      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        KR920_RX_PARAM_SETUP_REQ( );
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	0018      	movs	r0, r3
 800ef14:	f00a fbf4 	bl	8019700 <RegionKR920RxParamSetupReq>
 800ef18:	0003      	movs	r3, r0
 800ef1a:	e012      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        IN865_RX_PARAM_SETUP_REQ( );
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	0018      	movs	r0, r3
 800ef20:	f009 fa42 	bl	80183a8 <RegionIN865RxParamSetupReq>
 800ef24:	0003      	movs	r3, r0
 800ef26:	e00c      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        US915_RX_PARAM_SETUP_REQ( );
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	0018      	movs	r0, r3
 800ef2c:	f00d fa4e 	bl	801c3cc <RegionUS915RxParamSetupReq>
 800ef30:	0003      	movs	r3, r0
 800ef32:	e006      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        RU864_RX_PARAM_SETUP_REQ( );
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	0018      	movs	r0, r3
 800ef38:	f00b fe16 	bl	801ab68 <RegionRU864RxParamSetupReq>
 800ef3c:	0003      	movs	r3, r0
 800ef3e:	e000      	b.n	800ef42 <RegionRxParamSetupReq+0x9a>
        default:
        {
            return 0;
 800ef40:	2300      	movs	r3, #0
        }
    }
}
 800ef42:	0018      	movs	r0, r3
 800ef44:	46bd      	mov	sp, r7
 800ef46:	b002      	add	sp, #8
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	46c0      	nop			; (mov r8, r8)
 800ef4c:	0802877c 	.word	0x0802877c

0800ef50 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	0002      	movs	r2, r0
 800ef58:	6039      	str	r1, [r7, #0]
 800ef5a:	1dfb      	adds	r3, r7, #7
 800ef5c:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ef5e:	1dfb      	adds	r3, r7, #7
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	2b09      	cmp	r3, #9
 800ef64:	d840      	bhi.n	800efe8 <RegionNewChannelReq+0x98>
 800ef66:	009a      	lsls	r2, r3, #2
 800ef68:	4b22      	ldr	r3, [pc, #136]	; (800eff4 <RegionNewChannelReq+0xa4>)
 800ef6a:	18d3      	adds	r3, r2, r3
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	469f      	mov	pc, r3
    {
        AS923_NEW_CHANNEL_REQ( );
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	0018      	movs	r0, r3
 800ef74:	f001 f9ec 	bl	8010350 <RegionAS923NewChannelReq>
 800ef78:	0003      	movs	r3, r0
 800ef7a:	e036      	b.n	800efea <RegionNewChannelReq+0x9a>
        AU915_NEW_CHANNEL_REQ( );
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	0018      	movs	r0, r3
 800ef80:	f002 fdbb 	bl	8011afa <RegionAU915NewChannelReq>
 800ef84:	0003      	movs	r3, r0
 800ef86:	e030      	b.n	800efea <RegionNewChannelReq+0x9a>
        CN470_NEW_CHANNEL_REQ( );
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	0018      	movs	r0, r3
 800ef8c:	f003 fdb4 	bl	8012af8 <RegionCN470NewChannelReq>
 800ef90:	0003      	movs	r3, r0
 800ef92:	e02a      	b.n	800efea <RegionNewChannelReq+0x9a>
        CN779_NEW_CHANNEL_REQ( );
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	0018      	movs	r0, r3
 800ef98:	f004 fe3c 	bl	8013c14 <RegionCN779NewChannelReq>
 800ef9c:	0003      	movs	r3, r0
 800ef9e:	e024      	b.n	800efea <RegionNewChannelReq+0x9a>
        EU433_NEW_CHANNEL_REQ( );
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	0018      	movs	r0, r3
 800efa4:	f006 fdb0 	bl	8015b08 <RegionEU433NewChannelReq>
 800efa8:	0003      	movs	r3, r0
 800efaa:	e01e      	b.n	800efea <RegionNewChannelReq+0x9a>
        EU868_NEW_CHANNEL_REQ( );
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	0018      	movs	r0, r3
 800efb0:	f008 f812 	bl	8016fd8 <RegionEU868NewChannelReq>
 800efb4:	0003      	movs	r3, r0
 800efb6:	e018      	b.n	800efea <RegionNewChannelReq+0x9a>
        KR920_NEW_CHANNEL_REQ( );
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	0018      	movs	r0, r3
 800efbc:	f00a fbe4 	bl	8019788 <RegionKR920NewChannelReq>
 800efc0:	0003      	movs	r3, r0
 800efc2:	e012      	b.n	800efea <RegionNewChannelReq+0x9a>
        IN865_NEW_CHANNEL_REQ( );
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	0018      	movs	r0, r3
 800efc8:	f009 fa32 	bl	8018430 <RegionIN865NewChannelReq>
 800efcc:	0003      	movs	r3, r0
 800efce:	e00c      	b.n	800efea <RegionNewChannelReq+0x9a>
        US915_NEW_CHANNEL_REQ( );
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	0018      	movs	r0, r3
 800efd4:	f00d fa55 	bl	801c482 <RegionUS915NewChannelReq>
 800efd8:	0003      	movs	r3, r0
 800efda:	e006      	b.n	800efea <RegionNewChannelReq+0x9a>
        RU864_NEW_CHANNEL_REQ( );
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	0018      	movs	r0, r3
 800efe0:	f00b fe06 	bl	801abf0 <RegionRU864NewChannelReq>
 800efe4:	0003      	movs	r3, r0
 800efe6:	e000      	b.n	800efea <RegionNewChannelReq+0x9a>
        default:
        {
            return 0;
 800efe8:	2300      	movs	r3, #0
        }
    }
}
 800efea:	0018      	movs	r0, r3
 800efec:	46bd      	mov	sp, r7
 800efee:	b002      	add	sp, #8
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	46c0      	nop			; (mov r8, r8)
 800eff4:	080287a4 	.word	0x080287a4

0800eff8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	0002      	movs	r2, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	1dfb      	adds	r3, r7, #7
 800f004:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f006:	1dfb      	adds	r3, r7, #7
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2b09      	cmp	r3, #9
 800f00c:	d840      	bhi.n	800f090 <RegionTxParamSetupReq+0x98>
 800f00e:	009a      	lsls	r2, r3, #2
 800f010:	4b22      	ldr	r3, [pc, #136]	; (800f09c <RegionTxParamSetupReq+0xa4>)
 800f012:	18d3      	adds	r3, r2, r3
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	469f      	mov	pc, r3
    {
        AS923_TX_PARAM_SETUP_REQ( );
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	0018      	movs	r0, r3
 800f01c:	f001 fa02 	bl	8010424 <RegionAS923TxParamSetupReq>
 800f020:	0003      	movs	r3, r0
 800f022:	e036      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        AU915_TX_PARAM_SETUP_REQ( );
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	0018      	movs	r0, r3
 800f028:	f002 fd70 	bl	8011b0c <RegionAU915TxParamSetupReq>
 800f02c:	0003      	movs	r3, r0
 800f02e:	e030      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        CN470_TX_PARAM_SETUP_REQ( );
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	0018      	movs	r0, r3
 800f034:	f003 fd69 	bl	8012b0a <RegionCN470TxParamSetupReq>
 800f038:	0003      	movs	r3, r0
 800f03a:	e02a      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        CN779_TX_PARAM_SETUP_REQ( );
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	0018      	movs	r0, r3
 800f040:	f004 fe52 	bl	8013ce8 <RegionCN779TxParamSetupReq>
 800f044:	0003      	movs	r3, r0
 800f046:	e024      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        EU433_TX_PARAM_SETUP_REQ( );
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	0018      	movs	r0, r3
 800f04c:	f006 fdc6 	bl	8015bdc <RegionEU433TxParamSetupReq>
 800f050:	0003      	movs	r3, r0
 800f052:	e01e      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        EU868_TX_PARAM_SETUP_REQ( );
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	0018      	movs	r0, r3
 800f058:	f008 f828 	bl	80170ac <RegionEU868TxParamSetupReq>
 800f05c:	0003      	movs	r3, r0
 800f05e:	e018      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        KR920_TX_PARAM_SETUP_REQ( );
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	0018      	movs	r0, r3
 800f064:	f00a fbfa 	bl	801985c <RegionKR920TxParamSetupReq>
 800f068:	0003      	movs	r3, r0
 800f06a:	e012      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        IN865_TX_PARAM_SETUP_REQ( );
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	0018      	movs	r0, r3
 800f070:	f009 fa48 	bl	8018504 <RegionIN865TxParamSetupReq>
 800f074:	0003      	movs	r3, r0
 800f076:	e00c      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        US915_TX_PARAM_SETUP_REQ( );
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	0018      	movs	r0, r3
 800f07c:	f00d fa0a 	bl	801c494 <RegionUS915TxParamSetupReq>
 800f080:	0003      	movs	r3, r0
 800f082:	e006      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        RU864_TX_PARAM_SETUP_REQ( );
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	0018      	movs	r0, r3
 800f088:	f00b fe1c 	bl	801acc4 <RegionRU864TxParamSetupReq>
 800f08c:	0003      	movs	r3, r0
 800f08e:	e000      	b.n	800f092 <RegionTxParamSetupReq+0x9a>
        default:
        {
            return 0;
 800f090:	2300      	movs	r3, #0
        }
    }
}
 800f092:	0018      	movs	r0, r3
 800f094:	46bd      	mov	sp, r7
 800f096:	b002      	add	sp, #8
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	46c0      	nop			; (mov r8, r8)
 800f09c:	080287cc 	.word	0x080287cc

0800f0a0 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	0002      	movs	r2, r0
 800f0a8:	6039      	str	r1, [r7, #0]
 800f0aa:	1dfb      	adds	r3, r7, #7
 800f0ac:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f0ae:	1dfb      	adds	r3, r7, #7
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	2b09      	cmp	r3, #9
 800f0b4:	d840      	bhi.n	800f138 <RegionDlChannelReq+0x98>
 800f0b6:	009a      	lsls	r2, r3, #2
 800f0b8:	4b22      	ldr	r3, [pc, #136]	; (800f144 <RegionDlChannelReq+0xa4>)
 800f0ba:	18d3      	adds	r3, r2, r3
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	469f      	mov	pc, r3
    {
        AS923_DL_CHANNEL_REQ( );
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	0018      	movs	r0, r3
 800f0c4:	f001 f9b8 	bl	8010438 <RegionAS923DlChannelReq>
 800f0c8:	0003      	movs	r3, r0
 800f0ca:	e036      	b.n	800f13a <RegionDlChannelReq+0x9a>
        AU915_DL_CHANNEL_REQ( );
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	0018      	movs	r0, r3
 800f0d0:	f002 fd25 	bl	8011b1e <RegionAU915DlChannelReq>
 800f0d4:	0003      	movs	r3, r0
 800f0d6:	e030      	b.n	800f13a <RegionDlChannelReq+0x9a>
        CN470_DL_CHANNEL_REQ( );
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	0018      	movs	r0, r3
 800f0dc:	f003 fd1f 	bl	8012b1e <RegionCN470DlChannelReq>
 800f0e0:	0003      	movs	r3, r0
 800f0e2:	e02a      	b.n	800f13a <RegionDlChannelReq+0x9a>
        CN779_DL_CHANNEL_REQ( );
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	0018      	movs	r0, r3
 800f0e8:	f004 fe08 	bl	8013cfc <RegionCN779DlChannelReq>
 800f0ec:	0003      	movs	r3, r0
 800f0ee:	e024      	b.n	800f13a <RegionDlChannelReq+0x9a>
        EU433_DL_CHANNEL_REQ( );
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	0018      	movs	r0, r3
 800f0f4:	f006 fd7c 	bl	8015bf0 <RegionEU433DlChannelReq>
 800f0f8:	0003      	movs	r3, r0
 800f0fa:	e01e      	b.n	800f13a <RegionDlChannelReq+0x9a>
        EU868_DL_CHANNEL_REQ( );
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	0018      	movs	r0, r3
 800f100:	f007 ffde 	bl	80170c0 <RegionEU868DlChannelReq>
 800f104:	0003      	movs	r3, r0
 800f106:	e018      	b.n	800f13a <RegionDlChannelReq+0x9a>
        KR920_DL_CHANNEL_REQ( );
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	0018      	movs	r0, r3
 800f10c:	f00a fbb0 	bl	8019870 <RegionKR920DlChannelReq>
 800f110:	0003      	movs	r3, r0
 800f112:	e012      	b.n	800f13a <RegionDlChannelReq+0x9a>
        IN865_DL_CHANNEL_REQ( );
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	0018      	movs	r0, r3
 800f118:	f009 f9fe 	bl	8018518 <RegionIN865DlChannelReq>
 800f11c:	0003      	movs	r3, r0
 800f11e:	e00c      	b.n	800f13a <RegionDlChannelReq+0x9a>
        US915_DL_CHANNEL_REQ( );
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	0018      	movs	r0, r3
 800f124:	f00d f9c0 	bl	801c4a8 <RegionUS915DlChannelReq>
 800f128:	0003      	movs	r3, r0
 800f12a:	e006      	b.n	800f13a <RegionDlChannelReq+0x9a>
        RU864_DL_CHANNEL_REQ( );
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	0018      	movs	r0, r3
 800f130:	f00b fdd2 	bl	801acd8 <RegionRU864DlChannelReq>
 800f134:	0003      	movs	r3, r0
 800f136:	e000      	b.n	800f13a <RegionDlChannelReq+0x9a>
        default:
        {
            return 0;
 800f138:	2300      	movs	r3, #0
        }
    }
}
 800f13a:	0018      	movs	r0, r3
 800f13c:	46bd      	mov	sp, r7
 800f13e:	b002      	add	sp, #8
 800f140:	bd80      	pop	{r7, pc}
 800f142:	46c0      	nop			; (mov r8, r8)
 800f144:	080287f4 	.word	0x080287f4

0800f148 <RegionCalcBackOff>:
        }
    }
}

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	0002      	movs	r2, r0
 800f150:	6039      	str	r1, [r7, #0]
 800f152:	1dfb      	adds	r3, r7, #7
 800f154:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f156:	1dfb      	adds	r3, r7, #7
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b09      	cmp	r3, #9
 800f15c:	d836      	bhi.n	800f1cc <RegionCalcBackOff+0x84>
 800f15e:	009a      	lsls	r2, r3, #2
 800f160:	4b1d      	ldr	r3, [pc, #116]	; (800f1d8 <RegionCalcBackOff+0x90>)
 800f162:	18d3      	adds	r3, r2, r3
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	469f      	mov	pc, r3
    {
        AS923_CALC_BACKOFF( );
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	0018      	movs	r0, r3
 800f16c:	f001 f9ac 	bl	80104c8 <RegionAS923CalcBackOff>
 800f170:	e02d      	b.n	800f1ce <RegionCalcBackOff+0x86>
        AU915_CALC_BACKOFF( );
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	0018      	movs	r0, r3
 800f176:	f002 fcdb 	bl	8011b30 <RegionAU915CalcBackOff>
 800f17a:	e028      	b.n	800f1ce <RegionCalcBackOff+0x86>
        CN470_CALC_BACKOFF( );
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	0018      	movs	r0, r3
 800f180:	f003 fcd6 	bl	8012b30 <RegionCN470CalcBackOff>
 800f184:	e023      	b.n	800f1ce <RegionCalcBackOff+0x86>
        CN779_CALC_BACKOFF( );
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	0018      	movs	r0, r3
 800f18a:	f004 fdff 	bl	8013d8c <RegionCN779CalcBackOff>
 800f18e:	e01e      	b.n	800f1ce <RegionCalcBackOff+0x86>
        EU433_CALC_BACKOFF( );
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	0018      	movs	r0, r3
 800f194:	f006 fd74 	bl	8015c80 <RegionEU433CalcBackOff>
 800f198:	e019      	b.n	800f1ce <RegionCalcBackOff+0x86>
        EU868_CALC_BACKOFF( );
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	0018      	movs	r0, r3
 800f19e:	f007 ffdd 	bl	801715c <RegionEU868CalcBackOff>
 800f1a2:	e014      	b.n	800f1ce <RegionCalcBackOff+0x86>
        KR920_CALC_BACKOFF( );
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f00a fbaa 	bl	8019900 <RegionKR920CalcBackOff>
 800f1ac:	e00f      	b.n	800f1ce <RegionCalcBackOff+0x86>
        IN865_CALC_BACKOFF( );
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	0018      	movs	r0, r3
 800f1b2:	f009 f9f9 	bl	80185a8 <RegionIN865CalcBackOff>
 800f1b6:	e00a      	b.n	800f1ce <RegionCalcBackOff+0x86>
        US915_CALC_BACKOFF( );
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	0018      	movs	r0, r3
 800f1bc:	f00d f97e 	bl	801c4bc <RegionUS915CalcBackOff>
 800f1c0:	e005      	b.n	800f1ce <RegionCalcBackOff+0x86>
        RU864_CALC_BACKOFF( );
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	0018      	movs	r0, r3
 800f1c6:	f00b fdcf 	bl	801ad68 <RegionRU864CalcBackOff>
 800f1ca:	e000      	b.n	800f1ce <RegionCalcBackOff+0x86>
        default:
        {
            break;
 800f1cc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800f1ce:	46c0      	nop			; (mov r8, r8)
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	b002      	add	sp, #8
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	46c0      	nop			; (mov r8, r8)
 800f1d8:	0802881c 	.word	0x0802881c

0800f1dc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60b9      	str	r1, [r7, #8]
 800f1e4:	607a      	str	r2, [r7, #4]
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	210f      	movs	r1, #15
 800f1ea:	187b      	adds	r3, r7, r1
 800f1ec:	1c02      	adds	r2, r0, #0
 800f1ee:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f1f0:	187b      	adds	r3, r7, r1
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	2b09      	cmp	r3, #9
 800f1f6:	d854      	bhi.n	800f2a2 <RegionNextChannel+0xc6>
 800f1f8:	009a      	lsls	r2, r3, #2
 800f1fa:	4b2c      	ldr	r3, [pc, #176]	; (800f2ac <RegionNextChannel+0xd0>)
 800f1fc:	18d3      	adds	r3, r2, r3
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	469f      	mov	pc, r3
    {
        AS923_NEXT_CHANNEL( );
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	6879      	ldr	r1, [r7, #4]
 800f208:	68b8      	ldr	r0, [r7, #8]
 800f20a:	f001 f98d 	bl	8010528 <RegionAS923NextChannel>
 800f20e:	0003      	movs	r3, r0
 800f210:	e048      	b.n	800f2a4 <RegionNextChannel+0xc8>
        AU915_NEXT_CHANNEL( );
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	6879      	ldr	r1, [r7, #4]
 800f218:	68b8      	ldr	r0, [r7, #8]
 800f21a:	f002 fcb9 	bl	8011b90 <RegionAU915NextChannel>
 800f21e:	0003      	movs	r3, r0
 800f220:	e040      	b.n	800f2a4 <RegionNextChannel+0xc8>
        CN470_NEXT_CHANNEL( );
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	6879      	ldr	r1, [r7, #4]
 800f228:	68b8      	ldr	r0, [r7, #8]
 800f22a:	f003 fcb1 	bl	8012b90 <RegionCN470NextChannel>
 800f22e:	0003      	movs	r3, r0
 800f230:	e038      	b.n	800f2a4 <RegionNextChannel+0xc8>
        CN779_NEXT_CHANNEL( );
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	68b8      	ldr	r0, [r7, #8]
 800f23a:	f004 fdd7 	bl	8013dec <RegionCN779NextChannel>
 800f23e:	0003      	movs	r3, r0
 800f240:	e030      	b.n	800f2a4 <RegionNextChannel+0xc8>
        EU433_NEXT_CHANNEL( );
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	6879      	ldr	r1, [r7, #4]
 800f248:	68b8      	ldr	r0, [r7, #8]
 800f24a:	f006 fd49 	bl	8015ce0 <RegionEU433NextChannel>
 800f24e:	0003      	movs	r3, r0
 800f250:	e028      	b.n	800f2a4 <RegionNextChannel+0xc8>
        EU868_NEXT_CHANNEL( );
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	683a      	ldr	r2, [r7, #0]
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	68b8      	ldr	r0, [r7, #8]
 800f25a:	f007 ffaf 	bl	80171bc <RegionEU868NextChannel>
 800f25e:	0003      	movs	r3, r0
 800f260:	e020      	b.n	800f2a4 <RegionNextChannel+0xc8>
        KR920_NEXT_CHANNEL( );
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	6879      	ldr	r1, [r7, #4]
 800f268:	68b8      	ldr	r0, [r7, #8]
 800f26a:	f00a fb79 	bl	8019960 <RegionKR920NextChannel>
 800f26e:	0003      	movs	r3, r0
 800f270:	e018      	b.n	800f2a4 <RegionNextChannel+0xc8>
        IN865_NEXT_CHANNEL( );
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	68b8      	ldr	r0, [r7, #8]
 800f27a:	f009 f9c5 	bl	8018608 <RegionIN865NextChannel>
 800f27e:	0003      	movs	r3, r0
 800f280:	e010      	b.n	800f2a4 <RegionNextChannel+0xc8>
        US915_NEXT_CHANNEL( );
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	683a      	ldr	r2, [r7, #0]
 800f286:	6879      	ldr	r1, [r7, #4]
 800f288:	68b8      	ldr	r0, [r7, #8]
 800f28a:	f00d f947 	bl	801c51c <RegionUS915NextChannel>
 800f28e:	0003      	movs	r3, r0
 800f290:	e008      	b.n	800f2a4 <RegionNextChannel+0xc8>
        RU864_NEXT_CHANNEL( );
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	683a      	ldr	r2, [r7, #0]
 800f296:	6879      	ldr	r1, [r7, #4]
 800f298:	68b8      	ldr	r0, [r7, #8]
 800f29a:	f00b fd95 	bl	801adc8 <RegionRU864NextChannel>
 800f29e:	0003      	movs	r3, r0
 800f2a0:	e000      	b.n	800f2a4 <RegionNextChannel+0xc8>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800f2a2:	2309      	movs	r3, #9
        }
    }
}
 800f2a4:	0018      	movs	r0, r3
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	b004      	add	sp, #16
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	08028844 	.word	0x08028844

0800f2b0 <RegionApplyDrOffset>:
        }
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800f2b0:	b5b0      	push	{r4, r5, r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	0005      	movs	r5, r0
 800f2b8:	000c      	movs	r4, r1
 800f2ba:	0010      	movs	r0, r2
 800f2bc:	0019      	movs	r1, r3
 800f2be:	1dfb      	adds	r3, r7, #7
 800f2c0:	1c2a      	adds	r2, r5, #0
 800f2c2:	701a      	strb	r2, [r3, #0]
 800f2c4:	1dbb      	adds	r3, r7, #6
 800f2c6:	1c22      	adds	r2, r4, #0
 800f2c8:	701a      	strb	r2, [r3, #0]
 800f2ca:	1d7b      	adds	r3, r7, #5
 800f2cc:	1c02      	adds	r2, r0, #0
 800f2ce:	701a      	strb	r2, [r3, #0]
 800f2d0:	1d3b      	adds	r3, r7, #4
 800f2d2:	1c0a      	adds	r2, r1, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f2d6:	1dfb      	adds	r3, r7, #7
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	2b09      	cmp	r3, #9
 800f2dc:	d900      	bls.n	800f2e0 <RegionApplyDrOffset+0x30>
 800f2de:	e086      	b.n	800f3ee <RegionApplyDrOffset+0x13e>
 800f2e0:	009a      	lsls	r2, r3, #2
 800f2e2:	4b46      	ldr	r3, [pc, #280]	; (800f3fc <RegionApplyDrOffset+0x14c>)
 800f2e4:	18d3      	adds	r3, r2, r3
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	469f      	mov	pc, r3
    {
        AS923_APPLY_DR_OFFSET( );
 800f2ea:	1d3b      	adds	r3, r7, #4
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	569a      	ldrsb	r2, [r3, r2]
 800f2f0:	1d7b      	adds	r3, r7, #5
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	5659      	ldrsb	r1, [r3, r1]
 800f2f6:	1dbb      	adds	r3, r7, #6
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	f001 fae2 	bl	80108c4 <RegionAS923ApplyDrOffset>
 800f300:	0003      	movs	r3, r0
 800f302:	e076      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        AU915_APPLY_DR_OFFSET( );
 800f304:	1d3b      	adds	r3, r7, #4
 800f306:	2200      	movs	r2, #0
 800f308:	569a      	ldrsb	r2, [r3, r2]
 800f30a:	1d7b      	adds	r3, r7, #5
 800f30c:	2100      	movs	r1, #0
 800f30e:	5659      	ldrsb	r1, [r3, r1]
 800f310:	1dbb      	adds	r3, r7, #6
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	0018      	movs	r0, r3
 800f316:	f002 fced 	bl	8011cf4 <RegionAU915ApplyDrOffset>
 800f31a:	0003      	movs	r3, r0
 800f31c:	e069      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        CN470_APPLY_DR_OFFSET( );
 800f31e:	1d3b      	adds	r3, r7, #4
 800f320:	2200      	movs	r2, #0
 800f322:	569a      	ldrsb	r2, [r3, r2]
 800f324:	1d7b      	adds	r3, r7, #5
 800f326:	2100      	movs	r1, #0
 800f328:	5659      	ldrsb	r1, [r3, r1]
 800f32a:	1dbb      	adds	r3, r7, #6
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	0018      	movs	r0, r3
 800f330:	f003 fce4 	bl	8012cfc <RegionCN470ApplyDrOffset>
 800f334:	0003      	movs	r3, r0
 800f336:	e05c      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        CN779_APPLY_DR_OFFSET( );
 800f338:	1d3b      	adds	r3, r7, #4
 800f33a:	2200      	movs	r2, #0
 800f33c:	569a      	ldrsb	r2, [r3, r2]
 800f33e:	1d7b      	adds	r3, r7, #5
 800f340:	2100      	movs	r1, #0
 800f342:	5659      	ldrsb	r1, [r3, r1]
 800f344:	1dbb      	adds	r3, r7, #6
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	0018      	movs	r0, r3
 800f34a:	f004 fedb 	bl	8014104 <RegionCN779ApplyDrOffset>
 800f34e:	0003      	movs	r3, r0
 800f350:	e04f      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        EU433_APPLY_DR_OFFSET( );
 800f352:	1d3b      	adds	r3, r7, #4
 800f354:	2200      	movs	r2, #0
 800f356:	569a      	ldrsb	r2, [r3, r2]
 800f358:	1d7b      	adds	r3, r7, #5
 800f35a:	2100      	movs	r1, #0
 800f35c:	5659      	ldrsb	r1, [r3, r1]
 800f35e:	1dbb      	adds	r3, r7, #6
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	0018      	movs	r0, r3
 800f364:	f006 fe48 	bl	8015ff8 <RegionEU433ApplyDrOffset>
 800f368:	0003      	movs	r3, r0
 800f36a:	e042      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        EU868_APPLY_DR_OFFSET( );
 800f36c:	1d3b      	adds	r3, r7, #4
 800f36e:	2200      	movs	r2, #0
 800f370:	569a      	ldrsb	r2, [r3, r2]
 800f372:	1d7b      	adds	r3, r7, #5
 800f374:	2100      	movs	r1, #0
 800f376:	5659      	ldrsb	r1, [r3, r1]
 800f378:	1dbb      	adds	r3, r7, #6
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	0018      	movs	r0, r3
 800f37e:	f008 f8b7 	bl	80174f0 <RegionEU868ApplyDrOffset>
 800f382:	0003      	movs	r3, r0
 800f384:	e035      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        KR920_APPLY_DR_OFFSET( );
 800f386:	1d3b      	adds	r3, r7, #4
 800f388:	2200      	movs	r2, #0
 800f38a:	569a      	ldrsb	r2, [r3, r2]
 800f38c:	1d7b      	adds	r3, r7, #5
 800f38e:	2100      	movs	r1, #0
 800f390:	5659      	ldrsb	r1, [r3, r1]
 800f392:	1dbb      	adds	r3, r7, #6
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	0018      	movs	r0, r3
 800f398:	f00a fcb0 	bl	8019cfc <RegionKR920ApplyDrOffset>
 800f39c:	0003      	movs	r3, r0
 800f39e:	e028      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        IN865_APPLY_DR_OFFSET( );
 800f3a0:	1d3b      	adds	r3, r7, #4
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	569a      	ldrsb	r2, [r3, r2]
 800f3a6:	1d7b      	adds	r3, r7, #5
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	5659      	ldrsb	r1, [r3, r1]
 800f3ac:	1dbb      	adds	r3, r7, #6
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	0018      	movs	r0, r3
 800f3b2:	f009 fab5 	bl	8018920 <RegionIN865ApplyDrOffset>
 800f3b6:	0003      	movs	r3, r0
 800f3b8:	e01b      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        US915_APPLY_DR_OFFSET( );
 800f3ba:	1d3b      	adds	r3, r7, #4
 800f3bc:	2200      	movs	r2, #0
 800f3be:	569a      	ldrsb	r2, [r3, r2]
 800f3c0:	1d7b      	adds	r3, r7, #5
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	5659      	ldrsb	r1, [r3, r1]
 800f3c6:	1dbb      	adds	r3, r7, #6
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	0018      	movs	r0, r3
 800f3cc:	f00d f998 	bl	801c700 <RegionUS915ApplyDrOffset>
 800f3d0:	0003      	movs	r3, r0
 800f3d2:	e00e      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        RU864_APPLY_DR_OFFSET( );
 800f3d4:	1d3b      	adds	r3, r7, #4
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	569a      	ldrsb	r2, [r3, r2]
 800f3da:	1d7b      	adds	r3, r7, #5
 800f3dc:	2100      	movs	r1, #0
 800f3de:	5659      	ldrsb	r1, [r3, r1]
 800f3e0:	1dbb      	adds	r3, r7, #6
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	0018      	movs	r0, r3
 800f3e6:	f00b fe7b 	bl	801b0e0 <RegionRU864ApplyDrOffset>
 800f3ea:	0003      	movs	r3, r0
 800f3ec:	e001      	b.n	800f3f2 <RegionApplyDrOffset+0x142>
        default:
        {
            return dr;
 800f3ee:	1d7b      	adds	r3, r7, #5
 800f3f0:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	b002      	add	sp, #8
 800f3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f3fa:	46c0      	nop			; (mov r8, r8)
 800f3fc:	0802886c 	.word	0x0802886c

0800f400 <GetNextLowerTxDr>:
 */
static RegionAS923NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	0002      	movs	r2, r0
 800f408:	1dfb      	adds	r3, r7, #7
 800f40a:	701a      	strb	r2, [r3, #0]
 800f40c:	1dbb      	adds	r3, r7, #6
 800f40e:	1c0a      	adds	r2, r1, #0
 800f410:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 800f412:	230f      	movs	r3, #15
 800f414:	18fb      	adds	r3, r7, r3
 800f416:	2200      	movs	r2, #0
 800f418:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 800f41a:	1dfa      	adds	r2, r7, #7
 800f41c:	1dbb      	adds	r3, r7, #6
 800f41e:	7812      	ldrb	r2, [r2, #0]
 800f420:	b252      	sxtb	r2, r2
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	b25b      	sxtb	r3, r3
 800f426:	429a      	cmp	r2, r3
 800f428:	d105      	bne.n	800f436 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 800f42a:	230f      	movs	r3, #15
 800f42c:	18fb      	adds	r3, r7, r3
 800f42e:	1dba      	adds	r2, r7, #6
 800f430:	7812      	ldrb	r2, [r2, #0]
 800f432:	701a      	strb	r2, [r3, #0]
 800f434:	e005      	b.n	800f442 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 800f436:	1dfb      	adds	r3, r7, #7
 800f438:	781a      	ldrb	r2, [r3, #0]
 800f43a:	230f      	movs	r3, #15
 800f43c:	18fb      	adds	r3, r7, r3
 800f43e:	3a01      	subs	r2, #1
 800f440:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 800f442:	230f      	movs	r3, #15
 800f444:	18fb      	adds	r3, r7, r3
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	b25b      	sxtb	r3, r3
}
 800f44a:	0018      	movs	r0, r3
 800f44c:	46bd      	mov	sp, r7
 800f44e:	b004      	add	sp, #16
 800f450:	bd80      	pop	{r7, pc}
	...

0800f454 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
    switch( BandwidthsAS923[drIndex] )
 800f45c:	4b09      	ldr	r3, [pc, #36]	; (800f484 <GetBandwidth+0x30>)
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	0092      	lsls	r2, r2, #2
 800f462:	58d3      	ldr	r3, [r2, r3]
 800f464:	4a08      	ldr	r2, [pc, #32]	; (800f488 <GetBandwidth+0x34>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d004      	beq.n	800f474 <GetBandwidth+0x20>
 800f46a:	4a08      	ldr	r2, [pc, #32]	; (800f48c <GetBandwidth+0x38>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d003      	beq.n	800f478 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 800f470:	2300      	movs	r3, #0
 800f472:	e002      	b.n	800f47a <GetBandwidth+0x26>
        case 250000:
            return 1;
 800f474:	2301      	movs	r3, #1
 800f476:	e000      	b.n	800f47a <GetBandwidth+0x26>
        case 500000:
            return 2;
 800f478:	2302      	movs	r3, #2
    }
}
 800f47a:	0018      	movs	r0, r3
 800f47c:	46bd      	mov	sp, r7
 800f47e:	b002      	add	sp, #8
 800f480:	bd80      	pop	{r7, pc}
 800f482:	46c0      	nop			; (mov r8, r8)
 800f484:	0802889c 	.word	0x0802889c
 800f488:	0003d090 	.word	0x0003d090
 800f48c:	0007a120 	.word	0x0007a120

0800f490 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 800f490:	b590      	push	{r4, r7, lr}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	0004      	movs	r4, r0
 800f498:	0008      	movs	r0, r1
 800f49a:	0011      	movs	r1, r2
 800f49c:	603b      	str	r3, [r7, #0]
 800f49e:	1dfb      	adds	r3, r7, #7
 800f4a0:	1c22      	adds	r2, r4, #0
 800f4a2:	701a      	strb	r2, [r3, #0]
 800f4a4:	1dbb      	adds	r3, r7, #6
 800f4a6:	1c02      	adds	r2, r0, #0
 800f4a8:	701a      	strb	r2, [r3, #0]
 800f4aa:	1d7b      	adds	r3, r7, #5
 800f4ac:	1c0a      	adds	r2, r1, #0
 800f4ae:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 800f4b0:	210f      	movs	r1, #15
 800f4b2:	187b      	adds	r3, r7, r1
 800f4b4:	1dfa      	adds	r2, r7, #7
 800f4b6:	7812      	ldrb	r2, [r2, #0]
 800f4b8:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800f4ba:	187a      	adds	r2, r7, r1
 800f4bc:	1dbb      	adds	r3, r7, #6
 800f4be:	1df9      	adds	r1, r7, #7
 800f4c0:	780c      	ldrb	r4, [r1, #0]
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	b258      	sxtb	r0, r3
 800f4c6:	b261      	sxtb	r1, r4
 800f4c8:	4288      	cmp	r0, r1
 800f4ca:	da00      	bge.n	800f4ce <LimitTxPower+0x3e>
 800f4cc:	1c23      	adds	r3, r4, #0
 800f4ce:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 800f4d0:	230f      	movs	r3, #15
 800f4d2:	18fb      	adds	r3, r7, r3
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	b25b      	sxtb	r3, r3
}
 800f4d8:	0018      	movs	r0, r3
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	b005      	add	sp, #20
 800f4de:	bd90      	pop	{r4, r7, pc}

0800f4e0 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f4e8:	4b0e      	ldr	r3, [pc, #56]	; (800f524 <VerifyRfFreq+0x44>)
 800f4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	0010      	movs	r0, r2
 800f4f0:	4798      	blx	r3
 800f4f2:	0003      	movs	r3, r0
 800f4f4:	001a      	movs	r2, r3
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	4053      	eors	r3, r2
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <VerifyRfFreq+0x24>
    {
        return false;
 800f500:	2300      	movs	r3, #0
 800f502:	e00a      	b.n	800f51a <VerifyRfFreq+0x3a>
    }

    if( ( freq < 915000000 ) || ( freq > 928000000 ) )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a08      	ldr	r2, [pc, #32]	; (800f528 <VerifyRfFreq+0x48>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d903      	bls.n	800f514 <VerifyRfFreq+0x34>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a07      	ldr	r2, [pc, #28]	; (800f52c <VerifyRfFreq+0x4c>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d901      	bls.n	800f518 <VerifyRfFreq+0x38>
    {
        return false;
 800f514:	2300      	movs	r3, #0
 800f516:	e000      	b.n	800f51a <VerifyRfFreq+0x3a>
    }
    return true;
 800f518:	2301      	movs	r3, #1
}
 800f51a:	0018      	movs	r0, r3
 800f51c:	46bd      	mov	sp, r7
 800f51e:	b002      	add	sp, #8
 800f520:	bd80      	pop	{r7, pc}
 800f522:	46c0      	nop			; (mov r8, r8)
 800f524:	080293d8 	.word	0x080293d8
 800f528:	3689cabf 	.word	0x3689cabf
 800f52c:	37502800 	.word	0x37502800

0800f530 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 800f530:	b5b0      	push	{r4, r5, r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	60ba      	str	r2, [r7, #8]
 800f538:	607b      	str	r3, [r7, #4]
 800f53a:	230f      	movs	r3, #15
 800f53c:	18fb      	adds	r3, r7, r3
 800f53e:	1c02      	adds	r2, r0, #0
 800f540:	701a      	strb	r2, [r3, #0]
 800f542:	230e      	movs	r3, #14
 800f544:	18fb      	adds	r3, r7, r3
 800f546:	1c0a      	adds	r2, r1, #0
 800f548:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 800f54a:	2317      	movs	r3, #23
 800f54c:	18fb      	adds	r3, r7, r3
 800f54e:	2200      	movs	r2, #0
 800f550:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 800f552:	2316      	movs	r3, #22
 800f554:	18fb      	adds	r3, r7, r3
 800f556:	2200      	movs	r2, #0
 800f558:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++ )
 800f55a:	2315      	movs	r3, #21
 800f55c:	18fb      	adds	r3, r7, r3
 800f55e:	2200      	movs	r2, #0
 800f560:	701a      	strb	r2, [r3, #0]
 800f562:	2314      	movs	r3, #20
 800f564:	18fb      	adds	r3, r7, r3
 800f566:	2200      	movs	r2, #0
 800f568:	701a      	strb	r2, [r3, #0]
 800f56a:	e0b4      	b.n	800f6d6 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800f56c:	2313      	movs	r3, #19
 800f56e:	18fb      	adds	r3, r7, r3
 800f570:	2200      	movs	r2, #0
 800f572:	701a      	strb	r2, [r3, #0]
 800f574:	e09d      	b.n	800f6b2 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800f576:	2314      	movs	r3, #20
 800f578:	18fb      	adds	r3, r7, r3
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	18d3      	adds	r3, r2, r3
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	001a      	movs	r2, r3
 800f586:	2313      	movs	r3, #19
 800f588:	18fb      	adds	r3, r7, r3
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	411a      	asrs	r2, r3
 800f58e:	0013      	movs	r3, r2
 800f590:	2201      	movs	r2, #1
 800f592:	4013      	ands	r3, r2
 800f594:	d100      	bne.n	800f598 <CountNbOfEnabledChannels+0x68>
 800f596:	e086      	b.n	800f6a6 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 800f598:	2315      	movs	r3, #21
 800f59a:	18fb      	adds	r3, r7, r3
 800f59c:	781a      	ldrb	r2, [r3, #0]
 800f59e:	2313      	movs	r3, #19
 800f5a0:	18fb      	adds	r3, r7, r3
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	18d3      	adds	r3, r2, r3
 800f5a6:	001a      	movs	r2, r3
 800f5a8:	0013      	movs	r3, r2
 800f5aa:	005b      	lsls	r3, r3, #1
 800f5ac:	189b      	adds	r3, r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	001a      	movs	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	189b      	adds	r3, r3, r2
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d06f      	beq.n	800f69c <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 800f5bc:	230f      	movs	r3, #15
 800f5be:	18fb      	adds	r3, r7, r3
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	4053      	eors	r3, r2
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d008      	beq.n	800f5de <CountNbOfEnabledChannels+0xae>
                {
                    if( ( AS923_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800f5cc:	2313      	movs	r3, #19
 800f5ce:	18fb      	adds	r3, r7, r3
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	2203      	movs	r2, #3
 800f5d4:	411a      	asrs	r2, r3
 800f5d6:	0013      	movs	r3, r2
 800f5d8:	2201      	movs	r2, #1
 800f5da:	4013      	ands	r3, r2
 800f5dc:	d060      	beq.n	800f6a0 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800f5de:	230e      	movs	r3, #14
 800f5e0:	18fb      	adds	r3, r7, r3
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	5618      	ldrsb	r0, [r3, r0]
 800f5e6:	2415      	movs	r4, #21
 800f5e8:	193b      	adds	r3, r7, r4
 800f5ea:	781a      	ldrb	r2, [r3, #0]
 800f5ec:	2513      	movs	r5, #19
 800f5ee:	197b      	adds	r3, r7, r5
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	18d3      	adds	r3, r2, r3
 800f5f4:	001a      	movs	r2, r3
 800f5f6:	0013      	movs	r3, r2
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	189b      	adds	r3, r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	001a      	movs	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	189b      	adds	r3, r3, r2
 800f604:	7a1b      	ldrb	r3, [r3, #8]
 800f606:	011b      	lsls	r3, r3, #4
 800f608:	b25b      	sxtb	r3, r3
 800f60a:	111b      	asrs	r3, r3, #4
 800f60c:	b25b      	sxtb	r3, r3
 800f60e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800f610:	193b      	adds	r3, r7, r4
 800f612:	781a      	ldrb	r2, [r3, #0]
 800f614:	197b      	adds	r3, r7, r5
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	18d3      	adds	r3, r2, r3
 800f61a:	001a      	movs	r2, r3
 800f61c:	0013      	movs	r3, r2
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	189b      	adds	r3, r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	001a      	movs	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	189b      	adds	r3, r3, r2
 800f62a:	7a1b      	ldrb	r3, [r3, #8]
 800f62c:	b25b      	sxtb	r3, r3
 800f62e:	111b      	asrs	r3, r3, #4
 800f630:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800f632:	001a      	movs	r2, r3
 800f634:	f004 fe90 	bl	8014358 <RegionCommonValueInRange>
 800f638:	1e03      	subs	r3, r0, #0
 800f63a:	d033      	beq.n	800f6a4 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800f63c:	2315      	movs	r3, #21
 800f63e:	18fb      	adds	r3, r7, r3
 800f640:	781a      	ldrb	r2, [r3, #0]
 800f642:	2313      	movs	r3, #19
 800f644:	18fb      	adds	r3, r7, r3
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	18d3      	adds	r3, r2, r3
 800f64a:	001a      	movs	r2, r3
 800f64c:	0013      	movs	r3, r2
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	189b      	adds	r3, r3, r2
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	001a      	movs	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	189b      	adds	r3, r3, r2
 800f65a:	7a5b      	ldrb	r3, [r3, #9]
 800f65c:	011b      	lsls	r3, r3, #4
 800f65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f660:	18d3      	adds	r3, r2, r3
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d006      	beq.n	800f676 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 800f668:	2116      	movs	r1, #22
 800f66a:	187b      	adds	r3, r7, r1
 800f66c:	781a      	ldrb	r2, [r3, #0]
 800f66e:	187b      	adds	r3, r7, r1
 800f670:	3201      	adds	r2, #1
 800f672:	701a      	strb	r2, [r3, #0]
                    continue;
 800f674:	e017      	b.n	800f6a6 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 800f676:	2217      	movs	r2, #23
 800f678:	18bb      	adds	r3, r7, r2
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	18ba      	adds	r2, r7, r2
 800f67e:	1c59      	adds	r1, r3, #1
 800f680:	7011      	strb	r1, [r2, #0]
 800f682:	001a      	movs	r2, r3
 800f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f686:	189b      	adds	r3, r3, r2
 800f688:	2215      	movs	r2, #21
 800f68a:	18b9      	adds	r1, r7, r2
 800f68c:	2213      	movs	r2, #19
 800f68e:	18ba      	adds	r2, r7, r2
 800f690:	7809      	ldrb	r1, [r1, #0]
 800f692:	7812      	ldrb	r2, [r2, #0]
 800f694:	188a      	adds	r2, r1, r2
 800f696:	b2d2      	uxtb	r2, r2
 800f698:	701a      	strb	r2, [r3, #0]
 800f69a:	e004      	b.n	800f6a6 <CountNbOfEnabledChannels+0x176>
                    continue;
 800f69c:	46c0      	nop			; (mov r8, r8)
 800f69e:	e002      	b.n	800f6a6 <CountNbOfEnabledChannels+0x176>
                        continue;
 800f6a0:	46c0      	nop			; (mov r8, r8)
 800f6a2:	e000      	b.n	800f6a6 <CountNbOfEnabledChannels+0x176>
                    continue;
 800f6a4:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 800f6a6:	2113      	movs	r1, #19
 800f6a8:	187b      	adds	r3, r7, r1
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	187b      	adds	r3, r7, r1
 800f6ae:	3201      	adds	r2, #1
 800f6b0:	701a      	strb	r2, [r3, #0]
 800f6b2:	2313      	movs	r3, #19
 800f6b4:	18fb      	adds	r3, r7, r3
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	2b0f      	cmp	r3, #15
 800f6ba:	d800      	bhi.n	800f6be <CountNbOfEnabledChannels+0x18e>
 800f6bc:	e75b      	b.n	800f576 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++ )
 800f6be:	2215      	movs	r2, #21
 800f6c0:	18bb      	adds	r3, r7, r2
 800f6c2:	18ba      	adds	r2, r7, r2
 800f6c4:	7812      	ldrb	r2, [r2, #0]
 800f6c6:	3210      	adds	r2, #16
 800f6c8:	701a      	strb	r2, [r3, #0]
 800f6ca:	2114      	movs	r1, #20
 800f6cc:	187b      	adds	r3, r7, r1
 800f6ce:	781a      	ldrb	r2, [r3, #0]
 800f6d0:	187b      	adds	r3, r7, r1
 800f6d2:	3201      	adds	r2, #1
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	2315      	movs	r3, #21
 800f6d8:	18fb      	adds	r3, r7, r3
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b0f      	cmp	r3, #15
 800f6de:	d800      	bhi.n	800f6e2 <CountNbOfEnabledChannels+0x1b2>
 800f6e0:	e744      	b.n	800f56c <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 800f6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e4:	2216      	movs	r2, #22
 800f6e6:	18ba      	adds	r2, r7, r2
 800f6e8:	7812      	ldrb	r2, [r2, #0]
 800f6ea:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 800f6ec:	2317      	movs	r3, #23
 800f6ee:	18fb      	adds	r3, r7, r3
 800f6f0:	781b      	ldrb	r3, [r3, #0]
}
 800f6f2:	0018      	movs	r0, r3
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	b006      	add	sp, #24
 800f6f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f6fc <RegionAS923GetPhyParam>:

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800f704:	2308      	movs	r3, #8
 800f706:	18fb      	adds	r3, r7, r3
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b34      	cmp	r3, #52	; 0x34
 800f712:	d900      	bls.n	800f716 <RegionAS923GetPhyParam+0x1a>
 800f714:	e114      	b.n	800f940 <RegionAS923GetPhyParam+0x244>
 800f716:	009a      	lsls	r2, r3, #2
 800f718:	4b91      	ldr	r3, [pc, #580]	; (800f960 <RegionAS923GetPhyParam+0x264>)
 800f71a:	18d3      	adds	r3, r2, r3
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	78db      	ldrb	r3, [r3, #3]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d104      	bne.n	800f732 <RegionAS923GetPhyParam+0x36>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 800f728:	2308      	movs	r3, #8
 800f72a:	18fb      	adds	r3, r7, r3
 800f72c:	2200      	movs	r2, #0
 800f72e:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 800f730:	e107      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800f732:	2308      	movs	r3, #8
 800f734:	18fb      	adds	r3, r7, r3
 800f736:	2202      	movs	r2, #2
 800f738:	601a      	str	r2, [r3, #0]
            break;
 800f73a:	e102      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	789b      	ldrb	r3, [r3, #2]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d104      	bne.n	800f74e <RegionAS923GetPhyParam+0x52>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 800f744:	2308      	movs	r3, #8
 800f746:	18fb      	adds	r3, r7, r3
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 800f74c:	e0f9      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800f74e:	2308      	movs	r3, #8
 800f750:	18fb      	adds	r3, r7, r3
 800f752:	2202      	movs	r2, #2
 800f754:	601a      	str	r2, [r3, #0]
            break;
 800f756:	e0f4      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800f758:	2308      	movs	r3, #8
 800f75a:	18fb      	adds	r3, r7, r3
 800f75c:	2202      	movs	r2, #2
 800f75e:	601a      	str	r2, [r3, #0]
            break;
 800f760:	e0ef      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	789b      	ldrb	r3, [r3, #2]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d10c      	bne.n	800f784 <RegionAS923GetPhyParam+0x88>
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_TX_MIN_DATARATE );
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	785b      	ldrb	r3, [r3, #1]
 800f76e:	b25b      	sxtb	r3, r3
 800f770:	2100      	movs	r1, #0
 800f772:	0018      	movs	r0, r3
 800f774:	f7ff fe44 	bl	800f400 <GetNextLowerTxDr>
 800f778:	0003      	movs	r3, r0
 800f77a:	001a      	movs	r2, r3
 800f77c:	2308      	movs	r3, #8
 800f77e:	18fb      	adds	r3, r7, r3
 800f780:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
            }
            break;
 800f782:	e0de      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	b25b      	sxtb	r3, r3
 800f78a:	2102      	movs	r1, #2
 800f78c:	0018      	movs	r0, r3
 800f78e:	f7ff fe37 	bl	800f400 <GetNextLowerTxDr>
 800f792:	0003      	movs	r3, r0
 800f794:	001a      	movs	r2, r3
 800f796:	2308      	movs	r3, #8
 800f798:	18fb      	adds	r3, r7, r3
 800f79a:	601a      	str	r2, [r3, #0]
            break;
 800f79c:	e0d1      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 800f79e:	2308      	movs	r3, #8
 800f7a0:	18fb      	adds	r3, r7, r3
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	601a      	str	r2, [r3, #0]
            break;
 800f7a6:	e0cc      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 800f7a8:	2308      	movs	r3, #8
 800f7aa:	18fb      	adds	r3, r7, r3
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	601a      	str	r2, [r3, #0]
            break;
 800f7b0:	e0c7      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = AS923_ADR_ACK_LIMIT;
 800f7b2:	2308      	movs	r3, #8
 800f7b4:	18fb      	adds	r3, r7, r3
 800f7b6:	2240      	movs	r2, #64	; 0x40
 800f7b8:	601a      	str	r2, [r3, #0]
            break;
 800f7ba:	e0c2      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = AS923_ADR_ACK_DELAY;
 800f7bc:	2308      	movs	r3, #8
 800f7be:	18fb      	adds	r3, r7, r3
 800f7c0:	2220      	movs	r2, #32
 800f7c2:	601a      	str	r2, [r3, #0]
            break;
 800f7c4:	e0bd      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	789b      	ldrb	r3, [r3, #2]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10a      	bne.n	800f7e4 <RegionAS923GetPhyParam+0xe8>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	785b      	ldrb	r3, [r3, #1]
 800f7d2:	b25b      	sxtb	r3, r3
 800f7d4:	001a      	movs	r2, r3
 800f7d6:	4b63      	ldr	r3, [pc, #396]	; (800f964 <RegionAS923GetPhyParam+0x268>)
 800f7d8:	5c9b      	ldrb	r3, [r3, r2]
 800f7da:	001a      	movs	r2, r3
 800f7dc:	2308      	movs	r3, #8
 800f7de:	18fb      	adds	r3, r7, r3
 800f7e0:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
            }
            break;
 800f7e2:	e0ae      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	785b      	ldrb	r3, [r3, #1]
 800f7e8:	b25b      	sxtb	r3, r3
 800f7ea:	001a      	movs	r2, r3
 800f7ec:	4b5e      	ldr	r3, [pc, #376]	; (800f968 <RegionAS923GetPhyParam+0x26c>)
 800f7ee:	5c9b      	ldrb	r3, [r3, r2]
 800f7f0:	001a      	movs	r2, r3
 800f7f2:	2308      	movs	r3, #8
 800f7f4:	18fb      	adds	r3, r7, r3
 800f7f6:	601a      	str	r2, [r3, #0]
            break;
 800f7f8:	e0a3      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	789b      	ldrb	r3, [r3, #2]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d10a      	bne.n	800f818 <RegionAS923GetPhyParam+0x11c>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	b25b      	sxtb	r3, r3
 800f808:	001a      	movs	r2, r3
 800f80a:	4b58      	ldr	r3, [pc, #352]	; (800f96c <RegionAS923GetPhyParam+0x270>)
 800f80c:	5c9b      	ldrb	r3, [r3, r2]
 800f80e:	001a      	movs	r2, r3
 800f810:	2308      	movs	r3, #8
 800f812:	18fb      	adds	r3, r7, r3
 800f814:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
            }
            break;
 800f816:	e094      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	785b      	ldrb	r3, [r3, #1]
 800f81c:	b25b      	sxtb	r3, r3
 800f81e:	001a      	movs	r2, r3
 800f820:	4b51      	ldr	r3, [pc, #324]	; (800f968 <RegionAS923GetPhyParam+0x26c>)
 800f822:	5c9b      	ldrb	r3, [r3, r2]
 800f824:	001a      	movs	r2, r3
 800f826:	2308      	movs	r3, #8
 800f828:	18fb      	adds	r3, r7, r3
 800f82a:	601a      	str	r2, [r3, #0]
            break;
 800f82c:	e089      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 800f82e:	2308      	movs	r3, #8
 800f830:	18fb      	adds	r3, r7, r3
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]
            break;
 800f836:	e084      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800f838:	2308      	movs	r3, #8
 800f83a:	18fb      	adds	r3, r7, r3
 800f83c:	4a4c      	ldr	r2, [pc, #304]	; (800f970 <RegionAS923GetPhyParam+0x274>)
 800f83e:	601a      	str	r2, [r3, #0]
            break;
 800f840:	e07f      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = AS923_RECEIVE_DELAY1;
 800f842:	2308      	movs	r3, #8
 800f844:	18fb      	adds	r3, r7, r3
 800f846:	22fa      	movs	r2, #250	; 0xfa
 800f848:	0092      	lsls	r2, r2, #2
 800f84a:	601a      	str	r2, [r3, #0]
            break;
 800f84c:	e079      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = AS923_RECEIVE_DELAY2;
 800f84e:	2308      	movs	r3, #8
 800f850:	18fb      	adds	r3, r7, r3
 800f852:	22fa      	movs	r2, #250	; 0xfa
 800f854:	00d2      	lsls	r2, r2, #3
 800f856:	601a      	str	r2, [r3, #0]
            break;
 800f858:	e073      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 800f85a:	2308      	movs	r3, #8
 800f85c:	18fb      	adds	r3, r7, r3
 800f85e:	4a45      	ldr	r2, [pc, #276]	; (800f974 <RegionAS923GetPhyParam+0x278>)
 800f860:	601a      	str	r2, [r3, #0]
            break;
 800f862:	e06e      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 800f864:	2308      	movs	r3, #8
 800f866:	18fb      	adds	r3, r7, r3
 800f868:	4a43      	ldr	r2, [pc, #268]	; (800f978 <RegionAS923GetPhyParam+0x27c>)
 800f86a:	601a      	str	r2, [r3, #0]
            break;
 800f86c:	e069      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = AS923_MAX_FCNT_GAP;
 800f86e:	2308      	movs	r3, #8
 800f870:	18fb      	adds	r3, r7, r3
 800f872:	2280      	movs	r2, #128	; 0x80
 800f874:	01d2      	lsls	r2, r2, #7
 800f876:	601a      	str	r2, [r3, #0]
            break;
 800f878:	e063      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( AS923_ACKTIMEOUT + randr( -AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND ) );
 800f87a:	23fa      	movs	r3, #250	; 0xfa
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	4a3f      	ldr	r2, [pc, #252]	; (800f97c <RegionAS923GetPhyParam+0x280>)
 800f880:	0019      	movs	r1, r3
 800f882:	0010      	movs	r0, r2
 800f884:	f00d fa00 	bl	801cc88 <randr>
 800f888:	0003      	movs	r3, r0
 800f88a:	22fa      	movs	r2, #250	; 0xfa
 800f88c:	00d2      	lsls	r2, r2, #3
 800f88e:	4694      	mov	ip, r2
 800f890:	4463      	add	r3, ip
 800f892:	001a      	movs	r2, r3
 800f894:	2308      	movs	r3, #8
 800f896:	18fb      	adds	r3, r7, r3
 800f898:	601a      	str	r2, [r3, #0]
            break;
 800f89a:	e052      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = AS923_DEFAULT_RX1_DR_OFFSET;
 800f89c:	2308      	movs	r3, #8
 800f89e:	18fb      	adds	r3, r7, r3
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	601a      	str	r2, [r3, #0]
            break;
 800f8a4:	e04d      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ;
 800f8a6:	2308      	movs	r3, #8
 800f8a8:	18fb      	adds	r3, r7, r3
 800f8aa:	4a35      	ldr	r2, [pc, #212]	; (800f980 <RegionAS923GetPhyParam+0x284>)
 800f8ac:	601a      	str	r2, [r3, #0]
            break;
 800f8ae:	e048      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 800f8b0:	2308      	movs	r3, #8
 800f8b2:	18fb      	adds	r3, r7, r3
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	601a      	str	r2, [r3, #0]
            break;
 800f8b8:	e043      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800f8ba:	2308      	movs	r3, #8
 800f8bc:	18fb      	adds	r3, r7, r3
 800f8be:	4a31      	ldr	r2, [pc, #196]	; (800f984 <RegionAS923GetPhyParam+0x288>)
 800f8c0:	601a      	str	r2, [r3, #0]
            break;
 800f8c2:	e03e      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800f8c4:	2308      	movs	r3, #8
 800f8c6:	18fb      	adds	r3, r7, r3
 800f8c8:	4a2f      	ldr	r2, [pc, #188]	; (800f988 <RegionAS923GetPhyParam+0x28c>)
 800f8ca:	601a      	str	r2, [r3, #0]
            break;
 800f8cc:	e039      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800f8ce:	2308      	movs	r3, #8
 800f8d0:	18fb      	adds	r3, r7, r3
 800f8d2:	2210      	movs	r2, #16
 800f8d4:	601a      	str	r2, [r3, #0]
            break;
 800f8d6:	e034      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 800f8d8:	2308      	movs	r3, #8
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	4a2b      	ldr	r2, [pc, #172]	; (800f98c <RegionAS923GetPhyParam+0x290>)
 800f8de:	601a      	str	r2, [r3, #0]
            break;
 800f8e0:	e02f      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800f8e2:	2308      	movs	r3, #8
 800f8e4:	18fb      	adds	r3, r7, r3
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	601a      	str	r2, [r3, #0]
            break;
 800f8ea:	e02a      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 800f8ec:	2308      	movs	r3, #8
 800f8ee:	18fb      	adds	r3, r7, r3
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	601a      	str	r2, [r3, #0]
            break;
 800f8f4:	e025      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800f8f6:	2308      	movs	r3, #8
 800f8f8:	18fb      	adds	r3, r7, r3
 800f8fa:	2283      	movs	r2, #131	; 0x83
 800f8fc:	05d2      	lsls	r2, r2, #23
 800f8fe:	601a      	str	r2, [r3, #0]
            break;
 800f900:	e01f      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800f902:	2308      	movs	r3, #8
 800f904:	18fb      	adds	r3, r7, r3
 800f906:	4a22      	ldr	r2, [pc, #136]	; (800f990 <RegionAS923GetPhyParam+0x294>)
 800f908:	601a      	str	r2, [r3, #0]
            break;
 800f90a:	e01a      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ;
 800f90c:	2308      	movs	r3, #8
 800f90e:	18fb      	adds	r3, r7, r3
 800f910:	4a20      	ldr	r2, [pc, #128]	; (800f994 <RegionAS923GetPhyParam+0x298>)
 800f912:	601a      	str	r2, [r3, #0]
            break;
 800f914:	e015      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800f916:	2108      	movs	r1, #8
 800f918:	187b      	adds	r3, r7, r1
 800f91a:	2211      	movs	r2, #17
 800f91c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800f91e:	187b      	adds	r3, r7, r1
 800f920:	2202      	movs	r2, #2
 800f922:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 800f924:	187b      	adds	r3, r7, r1
 800f926:	2200      	movs	r2, #0
 800f928:	709a      	strb	r2, [r3, #2]
            break;
 800f92a:	e00a      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800f92c:	2308      	movs	r3, #8
 800f92e:	18fb      	adds	r3, r7, r3
 800f930:	2203      	movs	r2, #3
 800f932:	601a      	str	r2, [r3, #0]
            break;
 800f934:	e005      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800f936:	2308      	movs	r3, #8
 800f938:	18fb      	adds	r3, r7, r3
 800f93a:	2203      	movs	r2, #3
 800f93c:	601a      	str	r2, [r3, #0]
            break;
 800f93e:	e000      	b.n	800f942 <RegionAS923GetPhyParam+0x246>
        }
        default:
        {
            break;
 800f940:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 800f942:	210c      	movs	r1, #12
 800f944:	187b      	adds	r3, r7, r1
 800f946:	2208      	movs	r2, #8
 800f948:	18ba      	adds	r2, r7, r2
 800f94a:	6812      	ldr	r2, [r2, #0]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	187b      	adds	r3, r7, r1
 800f950:	2200      	movs	r2, #0
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	0013      	movs	r3, r2
}
 800f956:	0018      	movs	r0, r3
 800f958:	46bd      	mov	sp, r7
 800f95a:	b004      	add	sp, #16
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	46c0      	nop			; (mov r8, r8)
 800f960:	080288dc 	.word	0x080288dc
 800f964:	080288bc 	.word	0x080288bc
 800f968:	080288cc 	.word	0x080288cc
 800f96c:	080288c4 	.word	0x080288c4
 800f970:	00000bb8 	.word	0x00000bb8
 800f974:	00001388 	.word	0x00001388
 800f978:	00001770 	.word	0x00001770
 800f97c:	fffffc18 	.word	0xfffffc18
 800f980:	3706ea00 	.word	0x3706ea00
 800f984:	20000c8c 	.word	0x20000c8c
 800f988:	20000c8e 	.word	0x20000c8e
 800f98c:	20000bbc 	.word	0x20000bbc
 800f990:	4009999a 	.word	0x4009999a
 800f994:	3709f740 	.word	0x3709f740

0800f998 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	7858      	ldrb	r0, [r3, #1]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	0019      	movs	r1, r3
 800f9aa:	4a0a      	ldr	r2, [pc, #40]	; (800f9d4 <RegionAS923SetBandTxDone+0x3c>)
 800f9ac:	000b      	movs	r3, r1
 800f9ae:	005b      	lsls	r3, r3, #1
 800f9b0:	185b      	adds	r3, r3, r1
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	18d3      	adds	r3, r2, r3
 800f9b6:	3309      	adds	r3, #9
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	330c      	adds	r3, #12
 800f9bc:	011a      	lsls	r2, r3, #4
 800f9be:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <RegionAS923SetBandTxDone+0x3c>)
 800f9c0:	18d1      	adds	r1, r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	001a      	movs	r2, r3
 800f9c8:	f004 fd9e 	bl	8014508 <RegionCommonSetBandTxDone>
}
 800f9cc:	46c0      	nop			; (mov r8, r8)
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	b002      	add	sp, #8
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	20000bbc 	.word	0x20000bbc

0800f9d8 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800f9d8:	b590      	push	{r4, r7, lr}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
    Band_t bands[AS923_MAX_NB_BANDS] =
 800f9e0:	2108      	movs	r1, #8
 800f9e2:	187b      	adds	r3, r7, r1
 800f9e4:	2264      	movs	r2, #100	; 0x64
 800f9e6:	801a      	strh	r2, [r3, #0]
 800f9e8:	187b      	adds	r3, r7, r1
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	709a      	strb	r2, [r3, #2]
 800f9ee:	187b      	adds	r3, r7, r1
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	605a      	str	r2, [r3, #4]
 800f9f4:	187b      	adds	r3, r7, r1
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	609a      	str	r2, [r3, #8]
 800f9fa:	187b      	adds	r3, r7, r1
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	60da      	str	r2, [r3, #12]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	791b      	ldrb	r3, [r3, #4]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d02b      	beq.n	800fa60 <RegionAS923InitDefaults+0x88>
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d01d      	beq.n	800fa48 <RegionAS923InitDefaults+0x70>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d000      	beq.n	800fa12 <RegionAS923InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800fa10:	e033      	b.n	800fa7a <RegionAS923InitDefaults+0xa2>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800fa12:	2308      	movs	r3, #8
 800fa14:	18f9      	adds	r1, r7, r3
 800fa16:	4b1b      	ldr	r3, [pc, #108]	; (800fa84 <RegionAS923InitDefaults+0xac>)
 800fa18:	2210      	movs	r2, #16
 800fa1a:	0018      	movs	r0, r3
 800fa1c:	f00d f94a 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800fa20:	4b19      	ldr	r3, [pc, #100]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa22:	4a1a      	ldr	r2, [pc, #104]	; (800fa8c <RegionAS923InitDefaults+0xb4>)
 800fa24:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa26:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800fa28:	4b17      	ldr	r3, [pc, #92]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa2a:	4a19      	ldr	r2, [pc, #100]	; (800fa90 <RegionAS923InitDefaults+0xb8>)
 800fa2c:	330c      	adds	r3, #12
 800fa2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa30:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800fa32:	4b15      	ldr	r3, [pc, #84]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa34:	22d2      	movs	r2, #210	; 0xd2
 800fa36:	2103      	movs	r1, #3
 800fa38:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800fa3a:	4916      	ldr	r1, [pc, #88]	; (800fa94 <RegionAS923InitDefaults+0xbc>)
 800fa3c:	4b16      	ldr	r3, [pc, #88]	; (800fa98 <RegionAS923InitDefaults+0xc0>)
 800fa3e:	2201      	movs	r2, #1
 800fa40:	0018      	movs	r0, r3
 800fa42:	f004 fd32 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 800fa46:	e018      	b.n	800fa7a <RegionAS923InitDefaults+0xa2>
            if( params->NvmCtx != 0 )
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d013      	beq.n	800fa78 <RegionAS923InitDefaults+0xa0>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6819      	ldr	r1, [r3, #0]
 800fa54:	4b0c      	ldr	r3, [pc, #48]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa56:	22d4      	movs	r2, #212	; 0xd4
 800fa58:	0018      	movs	r0, r3
 800fa5a:	f00d f92b 	bl	801ccb4 <memcpy1>
            break;
 800fa5e:	e00b      	b.n	800fa78 <RegionAS923InitDefaults+0xa0>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800fa60:	4b09      	ldr	r3, [pc, #36]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa62:	22d0      	movs	r2, #208	; 0xd0
 800fa64:	5a9a      	ldrh	r2, [r3, r2]
 800fa66:	4b08      	ldr	r3, [pc, #32]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa68:	21d2      	movs	r1, #210	; 0xd2
 800fa6a:	5a5b      	ldrh	r3, [r3, r1]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	b299      	uxth	r1, r3
 800fa70:	4b05      	ldr	r3, [pc, #20]	; (800fa88 <RegionAS923InitDefaults+0xb0>)
 800fa72:	22d0      	movs	r2, #208	; 0xd0
 800fa74:	5299      	strh	r1, [r3, r2]
            break;
 800fa76:	e000      	b.n	800fa7a <RegionAS923InitDefaults+0xa2>
            break;
 800fa78:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800fa7a:	46c0      	nop			; (mov r8, r8)
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	b007      	add	sp, #28
 800fa80:	bd90      	pop	{r4, r7, pc}
 800fa82:	46c0      	nop			; (mov r8, r8)
 800fa84:	20000c7c 	.word	0x20000c7c
 800fa88:	20000bbc 	.word	0x20000bbc
 800fa8c:	08027574 	.word	0x08027574
 800fa90:	08027580 	.word	0x08027580
 800fa94:	20000c8e 	.word	0x20000c8e
 800fa98:	20000c8c 	.word	0x20000c8c

0800fa9c <RegionAS923ApplyCFList>:
            return false;
    }
}

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800fa9c:	b590      	push	{r4, r7, lr}
 800fa9e:	b08b      	sub	sp, #44	; 0x2c
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800faa4:	2318      	movs	r3, #24
 800faa6:	18fb      	adds	r3, r7, r3
 800faa8:	2250      	movs	r2, #80	; 0x50
 800faaa:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	791b      	ldrb	r3, [r3, #4]
 800fab0:	2b10      	cmp	r3, #16
 800fab2:	d000      	beq.n	800fab6 <RegionAS923ApplyCFList+0x1a>
 800fab4:	e07d      	b.n	800fbb2 <RegionAS923ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	330f      	adds	r3, #15
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d000      	beq.n	800fac4 <RegionAS923ApplyCFList+0x28>
 800fac2:	e078      	b.n	800fbb6 <RegionAS923ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fac4:	2327      	movs	r3, #39	; 0x27
 800fac6:	18fb      	adds	r3, r7, r3
 800fac8:	2200      	movs	r2, #0
 800faca:	701a      	strb	r2, [r3, #0]
 800facc:	2326      	movs	r3, #38	; 0x26
 800face:	18fb      	adds	r3, r7, r3
 800fad0:	2202      	movs	r2, #2
 800fad2:	701a      	strb	r2, [r3, #0]
 800fad4:	e067      	b.n	800fba6 <RegionAS923ApplyCFList+0x10a>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800fad6:	2326      	movs	r3, #38	; 0x26
 800fad8:	18fb      	adds	r3, r7, r3
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b06      	cmp	r3, #6
 800fade:	d82e      	bhi.n	800fb3e <RegionAS923ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	2427      	movs	r4, #39	; 0x27
 800fae6:	193b      	adds	r3, r7, r4
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	18d3      	adds	r3, r2, r3
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	001a      	movs	r2, r3
 800faf0:	2018      	movs	r0, #24
 800faf2:	183b      	adds	r3, r7, r0
 800faf4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800faf6:	183b      	adds	r3, r7, r0
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6819      	ldr	r1, [r3, #0]
 800fafe:	193b      	adds	r3, r7, r4
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	3301      	adds	r3, #1
 800fb04:	18cb      	adds	r3, r1, r3
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	021b      	lsls	r3, r3, #8
 800fb0a:	431a      	orrs	r2, r3
 800fb0c:	183b      	adds	r3, r7, r0
 800fb0e:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800fb10:	183b      	adds	r3, r7, r0
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6819      	ldr	r1, [r3, #0]
 800fb18:	193b      	adds	r3, r7, r4
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	3302      	adds	r3, #2
 800fb1e:	18cb      	adds	r3, r1, r3
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	041b      	lsls	r3, r3, #16
 800fb24:	431a      	orrs	r2, r3
 800fb26:	183b      	adds	r3, r7, r0
 800fb28:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 800fb2a:	183b      	adds	r3, r7, r0
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2264      	movs	r2, #100	; 0x64
 800fb30:	435a      	muls	r2, r3
 800fb32:	183b      	adds	r3, r7, r0
 800fb34:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 800fb36:	183b      	adds	r3, r7, r0
 800fb38:	2200      	movs	r2, #0
 800fb3a:	605a      	str	r2, [r3, #4]
 800fb3c:	e009      	b.n	800fb52 <RegionAS923ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 800fb3e:	2118      	movs	r1, #24
 800fb40:	187b      	adds	r3, r7, r1
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 800fb46:	187b      	adds	r3, r7, r1
 800fb48:	2200      	movs	r2, #0
 800fb4a:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 800fb4c:	187b      	adds	r3, r7, r1
 800fb4e:	2200      	movs	r2, #0
 800fb50:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 800fb52:	2318      	movs	r3, #24
 800fb54:	18fb      	adds	r3, r7, r3
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00e      	beq.n	800fb7a <RegionAS923ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 800fb5c:	2110      	movs	r1, #16
 800fb5e:	187b      	adds	r3, r7, r1
 800fb60:	2218      	movs	r2, #24
 800fb62:	18ba      	adds	r2, r7, r2
 800fb64:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 800fb66:	187b      	adds	r3, r7, r1
 800fb68:	2226      	movs	r2, #38	; 0x26
 800fb6a:	18ba      	adds	r2, r7, r2
 800fb6c:	7812      	ldrb	r2, [r2, #0]
 800fb6e:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 800fb70:	187b      	adds	r3, r7, r1
 800fb72:	0018      	movs	r0, r3
 800fb74:	f000 fdbe 	bl	80106f4 <RegionAS923ChannelAdd>
 800fb78:	e009      	b.n	800fb8e <RegionAS923ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 800fb7a:	210c      	movs	r1, #12
 800fb7c:	187b      	adds	r3, r7, r1
 800fb7e:	2226      	movs	r2, #38	; 0x26
 800fb80:	18ba      	adds	r2, r7, r2
 800fb82:	7812      	ldrb	r2, [r2, #0]
 800fb84:	701a      	strb	r2, [r3, #0]

            RegionAS923ChannelsRemove( &channelRemove );
 800fb86:	187b      	adds	r3, r7, r1
 800fb88:	0018      	movs	r0, r3
 800fb8a:	f000 fe6d 	bl	8010868 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fb8e:	2227      	movs	r2, #39	; 0x27
 800fb90:	18bb      	adds	r3, r7, r2
 800fb92:	18ba      	adds	r2, r7, r2
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	3203      	adds	r2, #3
 800fb98:	701a      	strb	r2, [r3, #0]
 800fb9a:	2126      	movs	r1, #38	; 0x26
 800fb9c:	187b      	adds	r3, r7, r1
 800fb9e:	781a      	ldrb	r2, [r3, #0]
 800fba0:	187b      	adds	r3, r7, r1
 800fba2:	3201      	adds	r2, #1
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	2326      	movs	r3, #38	; 0x26
 800fba8:	18fb      	adds	r3, r7, r3
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b0f      	cmp	r3, #15
 800fbae:	d992      	bls.n	800fad6 <RegionAS923ApplyCFList+0x3a>
 800fbb0:	e002      	b.n	800fbb8 <RegionAS923ApplyCFList+0x11c>
        return;
 800fbb2:	46c0      	nop			; (mov r8, r8)
 800fbb4:	e000      	b.n	800fbb8 <RegionAS923ApplyCFList+0x11c>
        return;
 800fbb6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	b00b      	add	sp, #44	; 0x2c
 800fbbc:	bd90      	pop	{r4, r7, pc}
	...

0800fbc0 <RegionAS923ComputeRxWindowParameters>:
    }
    return true;
}

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc2:	b08b      	sub	sp, #44	; 0x2c
 800fbc4:	af04      	add	r7, sp, #16
 800fbc6:	60ba      	str	r2, [r7, #8]
 800fbc8:	607b      	str	r3, [r7, #4]
 800fbca:	250f      	movs	r5, #15
 800fbcc:	197b      	adds	r3, r7, r5
 800fbce:	1c02      	adds	r2, r0, #0
 800fbd0:	701a      	strb	r2, [r3, #0]
 800fbd2:	230e      	movs	r3, #14
 800fbd4:	18fb      	adds	r3, r7, r3
 800fbd6:	1c0a      	adds	r2, r1, #0
 800fbd8:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	2400      	movs	r4, #0
 800fbde:	613b      	str	r3, [r7, #16]
 800fbe0:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800fbe2:	197b      	adds	r3, r7, r5
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	b25a      	sxtb	r2, r3
 800fbe8:	2a07      	cmp	r2, #7
 800fbea:	dd00      	ble.n	800fbee <RegionAS923ComputeRxWindowParameters+0x2e>
 800fbec:	2307      	movs	r3, #7
 800fbee:	b25a      	sxtb	r2, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	b25b      	sxtb	r3, r3
 800fbfa:	0018      	movs	r0, r3
 800fbfc:	f7ff fc2a 	bl	800f454 <GetBandwidth>
 800fc00:	0003      	movs	r3, r0
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	785b      	ldrb	r3, [r3, #1]
 800fc0c:	b25b      	sxtb	r3, r3
 800fc0e:	2b07      	cmp	r3, #7
 800fc10:	d10d      	bne.n	800fc2e <RegionAS923ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	785b      	ldrb	r3, [r3, #1]
 800fc16:	b25b      	sxtb	r3, r3
 800fc18:	001a      	movs	r2, r3
 800fc1a:	4b1b      	ldr	r3, [pc, #108]	; (800fc88 <RegionAS923ComputeRxWindowParameters+0xc8>)
 800fc1c:	5c9b      	ldrb	r3, [r3, r2]
 800fc1e:	0018      	movs	r0, r3
 800fc20:	f004 feaa 	bl	8014978 <RegionCommonComputeSymbolTimeFsk>
 800fc24:	0003      	movs	r3, r0
 800fc26:	000c      	movs	r4, r1
 800fc28:	613b      	str	r3, [r7, #16]
 800fc2a:	617c      	str	r4, [r7, #20]
 800fc2c:	e013      	b.n	800fc56 <RegionAS923ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	785b      	ldrb	r3, [r3, #1]
 800fc32:	b25b      	sxtb	r3, r3
 800fc34:	001a      	movs	r2, r3
 800fc36:	4b14      	ldr	r3, [pc, #80]	; (800fc88 <RegionAS923ComputeRxWindowParameters+0xc8>)
 800fc38:	5c98      	ldrb	r0, [r3, r2]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	785b      	ldrb	r3, [r3, #1]
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	001a      	movs	r2, r3
 800fc42:	4b12      	ldr	r3, [pc, #72]	; (800fc8c <RegionAS923ComputeRxWindowParameters+0xcc>)
 800fc44:	0092      	lsls	r2, r2, #2
 800fc46:	58d3      	ldr	r3, [r2, r3]
 800fc48:	0019      	movs	r1, r3
 800fc4a:	f004 fe69 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 800fc4e:	0003      	movs	r3, r0
 800fc50:	000c      	movs	r4, r1
 800fc52:	613b      	str	r3, [r7, #16]
 800fc54:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fc56:	4b0e      	ldr	r3, [pc, #56]	; (800fc90 <RegionAS923ComputeRxWindowParameters+0xd0>)
 800fc58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc5a:	4798      	blx	r3
 800fc5c:	0006      	movs	r6, r0
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	3308      	adds	r3, #8
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	320c      	adds	r2, #12
 800fc66:	68bd      	ldr	r5, [r7, #8]
 800fc68:	210e      	movs	r1, #14
 800fc6a:	1879      	adds	r1, r7, r1
 800fc6c:	780c      	ldrb	r4, [r1, #0]
 800fc6e:	6938      	ldr	r0, [r7, #16]
 800fc70:	6979      	ldr	r1, [r7, #20]
 800fc72:	9202      	str	r2, [sp, #8]
 800fc74:	9301      	str	r3, [sp, #4]
 800fc76:	9600      	str	r6, [sp, #0]
 800fc78:	002b      	movs	r3, r5
 800fc7a:	0022      	movs	r2, r4
 800fc7c:	f004 fe98 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 800fc80:	46c0      	nop			; (mov r8, r8)
 800fc82:	46bd      	mov	sp, r7
 800fc84:	b007      	add	sp, #28
 800fc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc88:	08028894 	.word	0x08028894
 800fc8c:	0802889c 	.word	0x0802889c
 800fc90:	080293d8 	.word	0x080293d8

0800fc94 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc96:	b091      	sub	sp, #68	; 0x44
 800fc98:	af0a      	add	r7, sp, #40	; 0x28
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800fc9e:	230f      	movs	r3, #15
 800fca0:	18fb      	adds	r3, r7, r3
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	7852      	ldrb	r2, [r2, #1]
 800fca6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 800fca8:	2316      	movs	r3, #22
 800fcaa:	18fb      	adds	r3, r7, r3
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 800fcb0:	230e      	movs	r3, #14
 800fcb2:	18fb      	adds	r3, r7, r3
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800fcbe:	4b64      	ldr	r3, [pc, #400]	; (800fe50 <RegionAS923RxConfig+0x1bc>)
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	4798      	blx	r3
 800fcc4:	1e03      	subs	r3, r0, #0
 800fcc6:	d001      	beq.n	800fccc <RegionAS923RxConfig+0x38>
    {
        return false;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e0bc      	b.n	800fe46 <RegionAS923RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	7cdb      	ldrb	r3, [r3, #19]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d122      	bne.n	800fd1a <RegionAS923RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	0019      	movs	r1, r3
 800fcda:	4a5e      	ldr	r2, [pc, #376]	; (800fe54 <RegionAS923RxConfig+0x1c0>)
 800fcdc:	000b      	movs	r3, r1
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	185b      	adds	r3, r3, r1
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	589b      	ldr	r3, [r3, r2]
 800fce6:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	0019      	movs	r1, r3
 800fcee:	4a59      	ldr	r2, [pc, #356]	; (800fe54 <RegionAS923RxConfig+0x1c0>)
 800fcf0:	000b      	movs	r3, r1
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	185b      	adds	r3, r3, r1
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	18d3      	adds	r3, r2, r3
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00b      	beq.n	800fd1a <RegionAS923RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	0019      	movs	r1, r3
 800fd08:	4a52      	ldr	r2, [pc, #328]	; (800fe54 <RegionAS923RxConfig+0x1c0>)
 800fd0a:	000b      	movs	r3, r1
 800fd0c:	005b      	lsls	r3, r3, #1
 800fd0e:	185b      	adds	r3, r3, r1
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	18d3      	adds	r3, r2, r3
 800fd14:	3304      	adds	r3, #4
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800fd1a:	240f      	movs	r4, #15
 800fd1c:	193b      	adds	r3, r7, r4
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	b25b      	sxtb	r3, r3
 800fd22:	4a4d      	ldr	r2, [pc, #308]	; (800fe58 <RegionAS923RxConfig+0x1c4>)
 800fd24:	5cd2      	ldrb	r2, [r2, r3]
 800fd26:	230e      	movs	r3, #14
 800fd28:	18fb      	adds	r3, r7, r3
 800fd2a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 800fd2c:	4b48      	ldr	r3, [pc, #288]	; (800fe50 <RegionAS923RxConfig+0x1bc>)
 800fd2e:	695b      	ldr	r3, [r3, #20]
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	0010      	movs	r0, r2
 800fd34:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800fd36:	193b      	adds	r3, r7, r4
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	b25b      	sxtb	r3, r3
 800fd3c:	2b07      	cmp	r3, #7
 800fd3e:	d12f      	bne.n	800fda0 <RegionAS923RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 800fd40:	2117      	movs	r1, #23
 800fd42:	187b      	adds	r3, r7, r1
 800fd44:	2200      	movs	r2, #0
 800fd46:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800fd48:	4b41      	ldr	r3, [pc, #260]	; (800fe50 <RegionAS923RxConfig+0x1bc>)
 800fd4a:	6a1c      	ldr	r4, [r3, #32]
 800fd4c:	230e      	movs	r3, #14
 800fd4e:	18fb      	adds	r3, r7, r3
 800fd50:	2200      	movs	r2, #0
 800fd52:	569a      	ldrsb	r2, [r3, r2]
 800fd54:	0013      	movs	r3, r2
 800fd56:	015b      	lsls	r3, r3, #5
 800fd58:	1a9b      	subs	r3, r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	189b      	adds	r3, r3, r2
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	001e      	movs	r6, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	7c92      	ldrb	r2, [r2, #18]
 800fd6c:	4d3b      	ldr	r5, [pc, #236]	; (800fe5c <RegionAS923RxConfig+0x1c8>)
 800fd6e:	1879      	adds	r1, r7, r1
 800fd70:	7808      	ldrb	r0, [r1, #0]
 800fd72:	9209      	str	r2, [sp, #36]	; 0x24
 800fd74:	2200      	movs	r2, #0
 800fd76:	9208      	str	r2, [sp, #32]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	9207      	str	r2, [sp, #28]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	9206      	str	r2, [sp, #24]
 800fd80:	2201      	movs	r2, #1
 800fd82:	9205      	str	r2, [sp, #20]
 800fd84:	2200      	movs	r2, #0
 800fd86:	9204      	str	r2, [sp, #16]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	9203      	str	r2, [sp, #12]
 800fd8c:	9302      	str	r3, [sp, #8]
 800fd8e:	2305      	movs	r3, #5
 800fd90:	9301      	str	r3, [sp, #4]
 800fd92:	4b33      	ldr	r3, [pc, #204]	; (800fe60 <RegionAS923RxConfig+0x1cc>)
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	2300      	movs	r3, #0
 800fd98:	0032      	movs	r2, r6
 800fd9a:	0029      	movs	r1, r5
 800fd9c:	47a0      	blx	r4
 800fd9e:	e029      	b.n	800fdf4 <RegionAS923RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 800fda0:	2117      	movs	r1, #23
 800fda2:	187b      	adds	r3, r7, r1
 800fda4:	2201      	movs	r2, #1
 800fda6:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800fda8:	4b29      	ldr	r3, [pc, #164]	; (800fe50 <RegionAS923RxConfig+0x1bc>)
 800fdaa:	6a1c      	ldr	r4, [r3, #32]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	789b      	ldrb	r3, [r3, #2]
 800fdb0:	001e      	movs	r6, r3
 800fdb2:	230e      	movs	r3, #14
 800fdb4:	18fb      	adds	r3, r7, r3
 800fdb6:	2500      	movs	r5, #0
 800fdb8:	575d      	ldrsb	r5, [r3, r5]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	7c92      	ldrb	r2, [r2, #18]
 800fdc4:	1879      	adds	r1, r7, r1
 800fdc6:	7808      	ldrb	r0, [r1, #0]
 800fdc8:	9209      	str	r2, [sp, #36]	; 0x24
 800fdca:	2201      	movs	r2, #1
 800fdcc:	9208      	str	r2, [sp, #32]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	9207      	str	r2, [sp, #28]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	9206      	str	r2, [sp, #24]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	9205      	str	r2, [sp, #20]
 800fdda:	2200      	movs	r2, #0
 800fddc:	9204      	str	r2, [sp, #16]
 800fdde:	2200      	movs	r2, #0
 800fde0:	9203      	str	r2, [sp, #12]
 800fde2:	9302      	str	r3, [sp, #8]
 800fde4:	2308      	movs	r3, #8
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	2300      	movs	r3, #0
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	2301      	movs	r3, #1
 800fdee:	002a      	movs	r2, r5
 800fdf0:	0031      	movs	r1, r6
 800fdf2:	47a0      	blx	r4
    }

    // Check for repeater support
    if( rxConfig->RepeaterSupport == true )
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	7c5b      	ldrb	r3, [r3, #17]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d009      	beq.n	800fe10 <RegionAS923RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800fdfc:	230f      	movs	r3, #15
 800fdfe:	18fb      	adds	r3, r7, r3
 800fe00:	2200      	movs	r2, #0
 800fe02:	569a      	ldrsb	r2, [r3, r2]
 800fe04:	2316      	movs	r3, #22
 800fe06:	18fb      	adds	r3, r7, r3
 800fe08:	4916      	ldr	r1, [pc, #88]	; (800fe64 <RegionAS923RxConfig+0x1d0>)
 800fe0a:	5c8a      	ldrb	r2, [r1, r2]
 800fe0c:	701a      	strb	r2, [r3, #0]
 800fe0e:	e008      	b.n	800fe22 <RegionAS923RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800fe10:	230f      	movs	r3, #15
 800fe12:	18fb      	adds	r3, r7, r3
 800fe14:	2200      	movs	r2, #0
 800fe16:	569a      	ldrsb	r2, [r3, r2]
 800fe18:	2316      	movs	r3, #22
 800fe1a:	18fb      	adds	r3, r7, r3
 800fe1c:	4912      	ldr	r1, [pc, #72]	; (800fe68 <RegionAS923RxConfig+0x1d4>)
 800fe1e:	5c8a      	ldrb	r2, [r1, r2]
 800fe20:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800fe22:	4b0b      	ldr	r3, [pc, #44]	; (800fe50 <RegionAS923RxConfig+0x1bc>)
 800fe24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe26:	2216      	movs	r2, #22
 800fe28:	18ba      	adds	r2, r7, r2
 800fe2a:	7812      	ldrb	r2, [r2, #0]
 800fe2c:	320d      	adds	r2, #13
 800fe2e:	b2d1      	uxtb	r1, r2
 800fe30:	2217      	movs	r2, #23
 800fe32:	18ba      	adds	r2, r7, r2
 800fe34:	7812      	ldrb	r2, [r2, #0]
 800fe36:	0010      	movs	r0, r2
 800fe38:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	220f      	movs	r2, #15
 800fe3e:	18ba      	adds	r2, r7, r2
 800fe40:	7812      	ldrb	r2, [r2, #0]
 800fe42:	701a      	strb	r2, [r3, #0]
    return true;
 800fe44:	2301      	movs	r3, #1
}
 800fe46:	0018      	movs	r0, r3
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	b007      	add	sp, #28
 800fe4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe4e:	46c0      	nop			; (mov r8, r8)
 800fe50:	080293d8 	.word	0x080293d8
 800fe54:	20000bbc 	.word	0x20000bbc
 800fe58:	08028894 	.word	0x08028894
 800fe5c:	0000c350 	.word	0x0000c350
 800fe60:	00014585 	.word	0x00014585
 800fe64:	080288c4 	.word	0x080288c4
 800fe68:	080288bc 	.word	0x080288bc

0800fe6c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800fe6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe6e:	b093      	sub	sp, #76	; 0x4c
 800fe70:	af0a      	add	r7, sp, #40	; 0x28
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	785b      	ldrb	r3, [r3, #1]
 800fe7c:	b25b      	sxtb	r3, r3
 800fe7e:	001a      	movs	r2, r3
 800fe80:	4b60      	ldr	r3, [pc, #384]	; (8010004 <RegionAS923TxConfig+0x198>)
 800fe82:	5c9a      	ldrb	r2, [r3, r2]
 800fe84:	231e      	movs	r3, #30
 800fe86:	18fb      	adds	r3, r7, r3
 800fe88:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2002      	movs	r0, #2
 800fe8e:	5618      	ldrsb	r0, [r3, r0]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	0019      	movs	r1, r3
 800fe96:	4a5c      	ldr	r2, [pc, #368]	; (8010008 <RegionAS923TxConfig+0x19c>)
 800fe98:	000b      	movs	r3, r1
 800fe9a:	005b      	lsls	r3, r3, #1
 800fe9c:	185b      	adds	r3, r3, r1
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	18d3      	adds	r3, r2, r3
 800fea2:	3309      	adds	r3, #9
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	4a58      	ldr	r2, [pc, #352]	; (8010008 <RegionAS923TxConfig+0x19c>)
 800fea8:	330c      	adds	r3, #12
 800feaa:	011b      	lsls	r3, r3, #4
 800feac:	18d3      	adds	r3, r2, r3
 800feae:	3302      	adds	r3, #2
 800feb0:	2100      	movs	r1, #0
 800feb2:	5659      	ldrsb	r1, [r3, r1]
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2201      	movs	r2, #1
 800feb8:	569a      	ldrsb	r2, [r3, r2]
 800feba:	251d      	movs	r5, #29
 800febc:	197c      	adds	r4, r7, r5
 800febe:	4b53      	ldr	r3, [pc, #332]	; (801000c <RegionAS923TxConfig+0x1a0>)
 800fec0:	f7ff fae6 	bl	800f490 <LimitTxPower>
 800fec4:	0003      	movs	r3, r0
 800fec6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	785b      	ldrb	r3, [r3, #1]
 800fecc:	b25b      	sxtb	r3, r3
 800fece:	0018      	movs	r0, r3
 800fed0:	f7ff fac0 	bl	800f454 <GetBandwidth>
 800fed4:	0003      	movs	r3, r0
 800fed6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 800fed8:	2017      	movs	r0, #23
 800feda:	183b      	adds	r3, r7, r0
 800fedc:	2200      	movs	r2, #0
 800fede:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6859      	ldr	r1, [r3, #4]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	689a      	ldr	r2, [r3, #8]
 800fee8:	183c      	adds	r4, r7, r0
 800feea:	197b      	adds	r3, r7, r5
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	b25b      	sxtb	r3, r3
 800fef0:	0018      	movs	r0, r3
 800fef2:	f004 fde1 	bl	8014ab8 <RegionCommonComputeTxPower>
 800fef6:	0003      	movs	r3, r0
 800fef8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800fefa:	4b45      	ldr	r3, [pc, #276]	; (8010010 <RegionAS923TxConfig+0x1a4>)
 800fefc:	695a      	ldr	r2, [r3, #20]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	0018      	movs	r0, r3
 800ff04:	4940      	ldr	r1, [pc, #256]	; (8010008 <RegionAS923TxConfig+0x19c>)
 800ff06:	0003      	movs	r3, r0
 800ff08:	005b      	lsls	r3, r3, #1
 800ff0a:	181b      	adds	r3, r3, r0
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	585b      	ldr	r3, [r3, r1]
 800ff10:	0018      	movs	r0, r3
 800ff12:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	785b      	ldrb	r3, [r3, #1]
 800ff18:	b25b      	sxtb	r3, r3
 800ff1a:	2b07      	cmp	r3, #7
 800ff1c:	d12d      	bne.n	800ff7a <RegionAS923TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800ff1e:	201f      	movs	r0, #31
 800ff20:	183b      	adds	r3, r7, r0
 800ff22:	2200      	movs	r2, #0
 800ff24:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 800ff26:	4b3a      	ldr	r3, [pc, #232]	; (8010010 <RegionAS923TxConfig+0x1a4>)
 800ff28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff2a:	231e      	movs	r3, #30
 800ff2c:	18fb      	adds	r3, r7, r3
 800ff2e:	2200      	movs	r2, #0
 800ff30:	569a      	ldrsb	r2, [r3, r2]
 800ff32:	0013      	movs	r3, r2
 800ff34:	015b      	lsls	r3, r3, #5
 800ff36:	1a9b      	subs	r3, r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	189b      	adds	r3, r3, r2
 800ff3c:	00db      	lsls	r3, r3, #3
 800ff3e:	001d      	movs	r5, r3
 800ff40:	69ba      	ldr	r2, [r7, #24]
 800ff42:	4e34      	ldr	r6, [pc, #208]	; (8010014 <RegionAS923TxConfig+0x1a8>)
 800ff44:	2317      	movs	r3, #23
 800ff46:	18fb      	adds	r3, r7, r3
 800ff48:	2100      	movs	r1, #0
 800ff4a:	5659      	ldrsb	r1, [r3, r1]
 800ff4c:	183b      	adds	r3, r7, r0
 800ff4e:	7818      	ldrb	r0, [r3, #0]
 800ff50:	4b31      	ldr	r3, [pc, #196]	; (8010018 <RegionAS923TxConfig+0x1ac>)
 800ff52:	9308      	str	r3, [sp, #32]
 800ff54:	2300      	movs	r3, #0
 800ff56:	9307      	str	r3, [sp, #28]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	9306      	str	r3, [sp, #24]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	9305      	str	r3, [sp, #20]
 800ff60:	2301      	movs	r3, #1
 800ff62:	9304      	str	r3, [sp, #16]
 800ff64:	2300      	movs	r3, #0
 800ff66:	9303      	str	r3, [sp, #12]
 800ff68:	2305      	movs	r3, #5
 800ff6a:	9302      	str	r3, [sp, #8]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9301      	str	r3, [sp, #4]
 800ff70:	9500      	str	r5, [sp, #0]
 800ff72:	0013      	movs	r3, r2
 800ff74:	0032      	movs	r2, r6
 800ff76:	47a0      	blx	r4
 800ff78:	e024      	b.n	800ffc4 <RegionAS923TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 800ff7a:	201f      	movs	r0, #31
 800ff7c:	183b      	adds	r3, r7, r0
 800ff7e:	2201      	movs	r2, #1
 800ff80:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 800ff82:	4b23      	ldr	r3, [pc, #140]	; (8010010 <RegionAS923TxConfig+0x1a4>)
 800ff84:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff86:	231e      	movs	r3, #30
 800ff88:	18fb      	adds	r3, r7, r3
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	b25b      	sxtb	r3, r3
 800ff8e:	69bd      	ldr	r5, [r7, #24]
 800ff90:	2217      	movs	r2, #23
 800ff92:	18ba      	adds	r2, r7, r2
 800ff94:	2100      	movs	r1, #0
 800ff96:	5651      	ldrsb	r1, [r2, r1]
 800ff98:	183a      	adds	r2, r7, r0
 800ff9a:	7810      	ldrb	r0, [r2, #0]
 800ff9c:	4a1e      	ldr	r2, [pc, #120]	; (8010018 <RegionAS923TxConfig+0x1ac>)
 800ff9e:	9208      	str	r2, [sp, #32]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	9207      	str	r2, [sp, #28]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	9206      	str	r2, [sp, #24]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	9205      	str	r2, [sp, #20]
 800ffac:	2201      	movs	r2, #1
 800ffae:	9204      	str	r2, [sp, #16]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	9203      	str	r2, [sp, #12]
 800ffb4:	2208      	movs	r2, #8
 800ffb6:	9202      	str	r2, [sp, #8]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	9201      	str	r2, [sp, #4]
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	002b      	movs	r3, r5
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ffc4:	4b12      	ldr	r3, [pc, #72]	; (8010010 <RegionAS923TxConfig+0x1a4>)
 800ffc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	8992      	ldrh	r2, [r2, #12]
 800ffcc:	b2d1      	uxtb	r1, r2
 800ffce:	241f      	movs	r4, #31
 800ffd0:	193a      	adds	r2, r7, r4
 800ffd2:	7812      	ldrb	r2, [r2, #0]
 800ffd4:	0010      	movs	r0, r2
 800ffd6:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800ffd8:	4b0d      	ldr	r3, [pc, #52]	; (8010010 <RegionAS923TxConfig+0x1a4>)
 800ffda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	8992      	ldrh	r2, [r2, #12]
 800ffe0:	b2d1      	uxtb	r1, r2
 800ffe2:	193a      	adds	r2, r7, r4
 800ffe4:	7812      	ldrb	r2, [r2, #0]
 800ffe6:	0010      	movs	r0, r2
 800ffe8:	4798      	blx	r3
 800ffea:	0002      	movs	r2, r0
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	221d      	movs	r2, #29
 800fff4:	18ba      	adds	r2, r7, r2
 800fff6:	7812      	ldrb	r2, [r2, #0]
 800fff8:	701a      	strb	r2, [r3, #0]
    return true;
 800fffa:	2301      	movs	r3, #1
}
 800fffc:	0018      	movs	r0, r3
 800fffe:	46bd      	mov	sp, r7
 8010000:	b009      	add	sp, #36	; 0x24
 8010002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010004:	08028894 	.word	0x08028894
 8010008:	20000bbc 	.word	0x20000bbc
 801000c:	20000c8c 	.word	0x20000c8c
 8010010:	080293d8 	.word	0x080293d8
 8010014:	000061a8 	.word	0x000061a8
 8010018:	00000bb8 	.word	0x00000bb8

0801001c <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801001c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801001e:	b093      	sub	sp, #76	; 0x4c
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801002a:	2347      	movs	r3, #71	; 0x47
 801002c:	18fb      	adds	r3, r7, r3
 801002e:	2207      	movs	r2, #7
 8010030:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8010032:	2344      	movs	r3, #68	; 0x44
 8010034:	18fb      	adds	r3, r7, r3
 8010036:	2200      	movs	r2, #0
 8010038:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801003a:	2346      	movs	r3, #70	; 0x46
 801003c:	18fb      	adds	r3, r7, r3
 801003e:	2200      	movs	r2, #0
 8010040:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8010042:	233a      	movs	r3, #58	; 0x3a
 8010044:	18fb      	adds	r3, r7, r3
 8010046:	2200      	movs	r2, #0
 8010048:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801004a:	e09e      	b.n	801018a <RegionAS923LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	685a      	ldr	r2, [r3, #4]
 8010050:	2346      	movs	r3, #70	; 0x46
 8010052:	18fb      	adds	r3, r7, r3
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	18d3      	adds	r3, r2, r3
 8010058:	2544      	movs	r5, #68	; 0x44
 801005a:	197c      	adds	r4, r7, r5
 801005c:	223c      	movs	r2, #60	; 0x3c
 801005e:	18ba      	adds	r2, r7, r2
 8010060:	0011      	movs	r1, r2
 8010062:	0018      	movs	r0, r3
 8010064:	f004 fb60 	bl	8014728 <RegionCommonParseLinkAdrReq>
 8010068:	0003      	movs	r3, r0
 801006a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801006c:	197b      	adds	r3, r7, r5
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d100      	bne.n	8010076 <RegionAS923LinkAdrReq+0x5a>
 8010074:	e092      	b.n	801019c <RegionAS923LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8010076:	2246      	movs	r2, #70	; 0x46
 8010078:	18bb      	adds	r3, r7, r2
 801007a:	18b9      	adds	r1, r7, r2
 801007c:	2244      	movs	r2, #68	; 0x44
 801007e:	18ba      	adds	r2, r7, r2
 8010080:	7809      	ldrb	r1, [r1, #0]
 8010082:	7812      	ldrb	r2, [r2, #0]
 8010084:	188a      	adds	r2, r1, r2
 8010086:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8010088:	2347      	movs	r3, #71	; 0x47
 801008a:	18fb      	adds	r3, r7, r3
 801008c:	2207      	movs	r2, #7
 801008e:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8010090:	213c      	movs	r1, #60	; 0x3c
 8010092:	187b      	adds	r3, r7, r1
 8010094:	889a      	ldrh	r2, [r3, #4]
 8010096:	233a      	movs	r3, #58	; 0x3a
 8010098:	18fb      	adds	r3, r7, r3
 801009a:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801009c:	187b      	adds	r3, r7, r1
 801009e:	78db      	ldrb	r3, [r3, #3]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10c      	bne.n	80100be <RegionAS923LinkAdrReq+0xa2>
 80100a4:	233a      	movs	r3, #58	; 0x3a
 80100a6:	18fb      	adds	r3, r7, r3
 80100a8:	881b      	ldrh	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d107      	bne.n	80100be <RegionAS923LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 80100ae:	2247      	movs	r2, #71	; 0x47
 80100b0:	18bb      	adds	r3, r7, r2
 80100b2:	18ba      	adds	r2, r7, r2
 80100b4:	7812      	ldrb	r2, [r2, #0]
 80100b6:	2101      	movs	r1, #1
 80100b8:	438a      	bics	r2, r1
 80100ba:	701a      	strb	r2, [r3, #0]
 80100bc:	e065      	b.n	801018a <RegionAS923LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80100be:	233c      	movs	r3, #60	; 0x3c
 80100c0:	18fb      	adds	r3, r7, r3
 80100c2:	78db      	ldrb	r3, [r3, #3]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d004      	beq.n	80100d2 <RegionAS923LinkAdrReq+0xb6>
 80100c8:	233c      	movs	r3, #60	; 0x3c
 80100ca:	18fb      	adds	r3, r7, r3
 80100cc:	78db      	ldrb	r3, [r3, #3]
 80100ce:	2b05      	cmp	r3, #5
 80100d0:	d904      	bls.n	80100dc <RegionAS923LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80100d2:	233c      	movs	r3, #60	; 0x3c
 80100d4:	18fb      	adds	r3, r7, r3
 80100d6:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80100d8:	2b06      	cmp	r3, #6
 80100da:	d907      	bls.n	80100ec <RegionAS923LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80100dc:	2247      	movs	r2, #71	; 0x47
 80100de:	18bb      	adds	r3, r7, r2
 80100e0:	18ba      	adds	r2, r7, r2
 80100e2:	7812      	ldrb	r2, [r2, #0]
 80100e4:	2101      	movs	r1, #1
 80100e6:	438a      	bics	r2, r1
 80100e8:	701a      	strb	r2, [r3, #0]
 80100ea:	e04e      	b.n	801018a <RegionAS923LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80100ec:	2345      	movs	r3, #69	; 0x45
 80100ee:	18fb      	adds	r3, r7, r3
 80100f0:	2200      	movs	r2, #0
 80100f2:	701a      	strb	r2, [r3, #0]
 80100f4:	e044      	b.n	8010180 <RegionAS923LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80100f6:	233c      	movs	r3, #60	; 0x3c
 80100f8:	18fb      	adds	r3, r7, r3
 80100fa:	78db      	ldrb	r3, [r3, #3]
 80100fc:	2b06      	cmp	r3, #6
 80100fe:	d11b      	bne.n	8010138 <RegionAS923LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8010100:	2345      	movs	r3, #69	; 0x45
 8010102:	18fb      	adds	r3, r7, r3
 8010104:	781a      	ldrb	r2, [r3, #0]
 8010106:	496e      	ldr	r1, [pc, #440]	; (80102c0 <RegionAS923LinkAdrReq+0x2a4>)
 8010108:	0013      	movs	r3, r2
 801010a:	005b      	lsls	r3, r3, #1
 801010c:	189b      	adds	r3, r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	585b      	ldr	r3, [r3, r1]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d02e      	beq.n	8010174 <RegionAS923LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8010116:	2345      	movs	r3, #69	; 0x45
 8010118:	18fb      	adds	r3, r7, r3
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	2201      	movs	r2, #1
 801011e:	409a      	lsls	r2, r3
 8010120:	0013      	movs	r3, r2
 8010122:	b21a      	sxth	r2, r3
 8010124:	213a      	movs	r1, #58	; 0x3a
 8010126:	187b      	adds	r3, r7, r1
 8010128:	881b      	ldrh	r3, [r3, #0]
 801012a:	b21b      	sxth	r3, r3
 801012c:	4313      	orrs	r3, r2
 801012e:	b21b      	sxth	r3, r3
 8010130:	b29a      	uxth	r2, r3
 8010132:	187b      	adds	r3, r7, r1
 8010134:	801a      	strh	r2, [r3, #0]
 8010136:	e01d      	b.n	8010174 <RegionAS923LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010138:	233a      	movs	r3, #58	; 0x3a
 801013a:	18fb      	adds	r3, r7, r3
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	001a      	movs	r2, r3
 8010140:	2345      	movs	r3, #69	; 0x45
 8010142:	18fb      	adds	r3, r7, r3
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	411a      	asrs	r2, r3
 8010148:	0013      	movs	r3, r2
 801014a:	2201      	movs	r2, #1
 801014c:	4013      	ands	r3, r2
 801014e:	d011      	beq.n	8010174 <RegionAS923LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8010150:	2345      	movs	r3, #69	; 0x45
 8010152:	18fb      	adds	r3, r7, r3
 8010154:	781a      	ldrb	r2, [r3, #0]
 8010156:	495a      	ldr	r1, [pc, #360]	; (80102c0 <RegionAS923LinkAdrReq+0x2a4>)
 8010158:	0013      	movs	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	189b      	adds	r3, r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010162:	2b00      	cmp	r3, #0
 8010164:	d106      	bne.n	8010174 <RegionAS923LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8010166:	2247      	movs	r2, #71	; 0x47
 8010168:	18bb      	adds	r3, r7, r2
 801016a:	18ba      	adds	r2, r7, r2
 801016c:	7812      	ldrb	r2, [r2, #0]
 801016e:	2101      	movs	r1, #1
 8010170:	438a      	bics	r2, r1
 8010172:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8010174:	2145      	movs	r1, #69	; 0x45
 8010176:	187b      	adds	r3, r7, r1
 8010178:	781a      	ldrb	r2, [r3, #0]
 801017a:	187b      	adds	r3, r7, r1
 801017c:	3201      	adds	r2, #1
 801017e:	701a      	strb	r2, [r3, #0]
 8010180:	2345      	movs	r3, #69	; 0x45
 8010182:	18fb      	adds	r3, r7, r3
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	2b0f      	cmp	r3, #15
 8010188:	d9b5      	bls.n	80100f6 <RegionAS923LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	7a1b      	ldrb	r3, [r3, #8]
 801018e:	2246      	movs	r2, #70	; 0x46
 8010190:	18ba      	adds	r2, r7, r2
 8010192:	7812      	ldrb	r2, [r2, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	d200      	bcs.n	801019a <RegionAS923LinkAdrReq+0x17e>
 8010198:	e758      	b.n	801004c <RegionAS923LinkAdrReq+0x30>
 801019a:	e000      	b.n	801019e <RegionAS923LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 801019c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801019e:	2134      	movs	r1, #52	; 0x34
 80101a0:	187b      	adds	r3, r7, r1
 80101a2:	2201      	movs	r2, #1
 80101a4:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	7a5a      	ldrb	r2, [r3, #9]
 80101aa:	187b      	adds	r3, r7, r1
 80101ac:	709a      	strb	r2, [r3, #2]
    phyParam = RegionAS923GetPhyParam( &getPhy );
 80101ae:	187b      	adds	r3, r7, r1
 80101b0:	0018      	movs	r0, r3
 80101b2:	f7ff faa3 	bl	800f6fc <RegionAS923GetPhyParam>
 80101b6:	0003      	movs	r3, r0
 80101b8:	001a      	movs	r2, r3
 80101ba:	2030      	movs	r0, #48	; 0x30
 80101bc:	183b      	adds	r3, r7, r0
 80101be:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80101c0:	2110      	movs	r1, #16
 80101c2:	187b      	adds	r3, r7, r1
 80101c4:	2447      	movs	r4, #71	; 0x47
 80101c6:	193a      	adds	r2, r7, r4
 80101c8:	7812      	ldrb	r2, [r2, #0]
 80101ca:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	7a9a      	ldrb	r2, [r3, #10]
 80101d0:	187b      	adds	r3, r7, r1
 80101d2:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80101d4:	253c      	movs	r5, #60	; 0x3c
 80101d6:	197b      	adds	r3, r7, r5
 80101d8:	2201      	movs	r2, #1
 80101da:	569a      	ldrsb	r2, [r3, r2]
 80101dc:	187b      	adds	r3, r7, r1
 80101de:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80101e0:	197b      	adds	r3, r7, r5
 80101e2:	2202      	movs	r2, #2
 80101e4:	569a      	ldrsb	r2, [r3, r2]
 80101e6:	187b      	adds	r3, r7, r1
 80101e8:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80101ea:	197b      	adds	r3, r7, r5
 80101ec:	781a      	ldrb	r2, [r3, #0]
 80101ee:	187b      	adds	r3, r7, r1
 80101f0:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	220b      	movs	r2, #11
 80101f6:	569a      	ldrsb	r2, [r3, r2]
 80101f8:	187b      	adds	r3, r7, r1
 80101fa:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	220c      	movs	r2, #12
 8010200:	569a      	ldrsb	r2, [r3, r2]
 8010202:	187b      	adds	r3, r7, r1
 8010204:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	7b5b      	ldrb	r3, [r3, #13]
 801020a:	b25a      	sxtb	r2, r3
 801020c:	187b      	adds	r3, r7, r1
 801020e:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8010210:	187b      	adds	r3, r7, r1
 8010212:	2210      	movs	r2, #16
 8010214:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010216:	187b      	adds	r3, r7, r1
 8010218:	223a      	movs	r2, #58	; 0x3a
 801021a:	18ba      	adds	r2, r7, r2
 801021c:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801021e:	183b      	adds	r3, r7, r0
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	b25a      	sxtb	r2, r3
 8010224:	0008      	movs	r0, r1
 8010226:	183b      	adds	r3, r7, r0
 8010228:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 801022a:	183b      	adds	r3, r7, r0
 801022c:	2207      	movs	r2, #7
 801022e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8010230:	183b      	adds	r3, r7, r0
 8010232:	4a23      	ldr	r2, [pc, #140]	; (80102c0 <RegionAS923LinkAdrReq+0x2a4>)
 8010234:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8010236:	183b      	adds	r3, r7, r0
 8010238:	2207      	movs	r2, #7
 801023a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 801023c:	183b      	adds	r3, r7, r0
 801023e:	2200      	movs	r2, #0
 8010240:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010242:	183b      	adds	r3, r7, r0
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	6812      	ldr	r2, [r2, #0]
 8010248:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801024a:	0026      	movs	r6, r4
 801024c:	193c      	adds	r4, r7, r4
 801024e:	0029      	movs	r1, r5
 8010250:	187d      	adds	r5, r7, r1
 8010252:	187b      	adds	r3, r7, r1
 8010254:	1c9a      	adds	r2, r3, #2
 8010256:	187b      	adds	r3, r7, r1
 8010258:	1c59      	adds	r1, r3, #1
 801025a:	1838      	adds	r0, r7, r0
 801025c:	002b      	movs	r3, r5
 801025e:	f004 fab9 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 8010262:	0003      	movs	r3, r0
 8010264:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8010266:	0034      	movs	r4, r6
 8010268:	193b      	adds	r3, r7, r4
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	2b07      	cmp	r3, #7
 801026e:	d10b      	bne.n	8010288 <RegionAS923LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8010270:	4b14      	ldr	r3, [pc, #80]	; (80102c4 <RegionAS923LinkAdrReq+0x2a8>)
 8010272:	2202      	movs	r2, #2
 8010274:	2100      	movs	r1, #0
 8010276:	0018      	movs	r0, r3
 8010278:	f00c fd58 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801027c:	233a      	movs	r3, #58	; 0x3a
 801027e:	18fb      	adds	r3, r7, r3
 8010280:	8819      	ldrh	r1, [r3, #0]
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <RegionAS923LinkAdrReq+0x2a4>)
 8010284:	22d0      	movs	r2, #208	; 0xd0
 8010286:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8010288:	213c      	movs	r1, #60	; 0x3c
 801028a:	187b      	adds	r3, r7, r1
 801028c:	2201      	movs	r2, #1
 801028e:	569a      	ldrsb	r2, [r3, r2]
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8010294:	187b      	adds	r3, r7, r1
 8010296:	2202      	movs	r2, #2
 8010298:	569a      	ldrsb	r2, [r3, r2]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801029e:	187b      	adds	r3, r7, r1
 80102a0:	781a      	ldrb	r2, [r3, #0]
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80102a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102a8:	2246      	movs	r2, #70	; 0x46
 80102aa:	18ba      	adds	r2, r7, r2
 80102ac:	7812      	ldrb	r2, [r2, #0]
 80102ae:	701a      	strb	r2, [r3, #0]

    return status;
 80102b0:	2347      	movs	r3, #71	; 0x47
 80102b2:	18fb      	adds	r3, r7, r3
 80102b4:	781b      	ldrb	r3, [r3, #0]
}
 80102b6:	0018      	movs	r0, r3
 80102b8:	46bd      	mov	sp, r7
 80102ba:	b013      	add	sp, #76	; 0x4c
 80102bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102be:	46c0      	nop			; (mov r8, r8)
 80102c0:	20000bbc 	.word	0x20000bbc
 80102c4:	20000c8c 	.word	0x20000c8c

080102c8 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80102d0:	230f      	movs	r3, #15
 80102d2:	18fb      	adds	r3, r7, r3
 80102d4:	2207      	movs	r2, #7
 80102d6:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	0018      	movs	r0, r3
 80102de:	f7ff f8ff 	bl	800f4e0 <VerifyRfFreq>
 80102e2:	0003      	movs	r3, r0
 80102e4:	001a      	movs	r2, r3
 80102e6:	2301      	movs	r3, #1
 80102e8:	4053      	eors	r3, r2
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <RegionAS923RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 80102f0:	220f      	movs	r2, #15
 80102f2:	18bb      	adds	r3, r7, r2
 80102f4:	18ba      	adds	r2, r7, r2
 80102f6:	7812      	ldrb	r2, [r2, #0]
 80102f8:	2101      	movs	r1, #1
 80102fa:	438a      	bics	r2, r1
 80102fc:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	b25b      	sxtb	r3, r3
 8010304:	2207      	movs	r2, #7
 8010306:	2100      	movs	r1, #0
 8010308:	0018      	movs	r0, r3
 801030a:	f004 f825 	bl	8014358 <RegionCommonValueInRange>
 801030e:	1e03      	subs	r3, r0, #0
 8010310:	d106      	bne.n	8010320 <RegionAS923RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8010312:	220f      	movs	r2, #15
 8010314:	18bb      	adds	r3, r7, r2
 8010316:	18ba      	adds	r2, r7, r2
 8010318:	7812      	ldrb	r2, [r2, #0]
 801031a:	2102      	movs	r1, #2
 801031c:	438a      	bics	r2, r1
 801031e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	785b      	ldrb	r3, [r3, #1]
 8010324:	b25b      	sxtb	r3, r3
 8010326:	2207      	movs	r2, #7
 8010328:	2100      	movs	r1, #0
 801032a:	0018      	movs	r0, r3
 801032c:	f004 f814 	bl	8014358 <RegionCommonValueInRange>
 8010330:	1e03      	subs	r3, r0, #0
 8010332:	d106      	bne.n	8010342 <RegionAS923RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8010334:	220f      	movs	r2, #15
 8010336:	18bb      	adds	r3, r7, r2
 8010338:	18ba      	adds	r2, r7, r2
 801033a:	7812      	ldrb	r2, [r2, #0]
 801033c:	2104      	movs	r1, #4
 801033e:	438a      	bics	r2, r1
 8010340:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8010342:	230f      	movs	r3, #15
 8010344:	18fb      	adds	r3, r7, r3
 8010346:	781b      	ldrb	r3, [r3, #0]
}
 8010348:	0018      	movs	r0, r3
 801034a:	46bd      	mov	sp, r7
 801034c:	b004      	add	sp, #16
 801034e:	bd80      	pop	{r7, pc}

08010350 <RegionAS923NewChannelReq>:

uint8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8010358:	2317      	movs	r3, #23
 801035a:	18fb      	adds	r3, r7, r3
 801035c:	2203      	movs	r2, #3
 801035e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d119      	bne.n	801039e <RegionAS923NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	791b      	ldrb	r3, [r3, #4]
 801036e:	b25b      	sxtb	r3, r3
 8010370:	b2da      	uxtb	r2, r3
 8010372:	2108      	movs	r1, #8
 8010374:	187b      	adds	r3, r7, r1
 8010376:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8010378:	187b      	adds	r3, r7, r1
 801037a:	0018      	movs	r0, r3
 801037c:	f000 fa74 	bl	8010868 <RegionAS923ChannelsRemove>
 8010380:	0003      	movs	r3, r0
 8010382:	001a      	movs	r2, r3
 8010384:	2301      	movs	r3, #1
 8010386:	4053      	eors	r3, r2
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	d043      	beq.n	8010416 <RegionAS923NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801038e:	2217      	movs	r2, #23
 8010390:	18bb      	adds	r3, r7, r2
 8010392:	18ba      	adds	r2, r7, r2
 8010394:	7812      	ldrb	r2, [r2, #0]
 8010396:	2103      	movs	r1, #3
 8010398:	438a      	bics	r2, r1
 801039a:	701a      	strb	r2, [r3, #0]
 801039c:	e03b      	b.n	8010416 <RegionAS923NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	210c      	movs	r1, #12
 80103a4:	187b      	adds	r3, r7, r1
 80103a6:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	791b      	ldrb	r3, [r3, #4]
 80103ac:	b25b      	sxtb	r3, r3
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	187b      	adds	r3, r7, r1
 80103b2:	711a      	strb	r2, [r3, #4]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80103b4:	187b      	adds	r3, r7, r1
 80103b6:	0018      	movs	r0, r3
 80103b8:	f000 f99c 	bl	80106f4 <RegionAS923ChannelAdd>
 80103bc:	0003      	movs	r3, r0
 80103be:	2b04      	cmp	r3, #4
 80103c0:	d008      	beq.n	80103d4 <RegionAS923NewChannelReq+0x84>
 80103c2:	dc02      	bgt.n	80103ca <RegionAS923NewChannelReq+0x7a>
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d025      	beq.n	8010414 <RegionAS923NewChannelReq+0xc4>
 80103c8:	e01c      	b.n	8010404 <RegionAS923NewChannelReq+0xb4>
 80103ca:	2b05      	cmp	r3, #5
 80103cc:	d00a      	beq.n	80103e4 <RegionAS923NewChannelReq+0x94>
 80103ce:	2b06      	cmp	r3, #6
 80103d0:	d010      	beq.n	80103f4 <RegionAS923NewChannelReq+0xa4>
 80103d2:	e017      	b.n	8010404 <RegionAS923NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80103d4:	2217      	movs	r2, #23
 80103d6:	18bb      	adds	r3, r7, r2
 80103d8:	18ba      	adds	r2, r7, r2
 80103da:	7812      	ldrb	r2, [r2, #0]
 80103dc:	2101      	movs	r1, #1
 80103de:	438a      	bics	r2, r1
 80103e0:	701a      	strb	r2, [r3, #0]
                break;
 80103e2:	e018      	b.n	8010416 <RegionAS923NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80103e4:	2217      	movs	r2, #23
 80103e6:	18bb      	adds	r3, r7, r2
 80103e8:	18ba      	adds	r2, r7, r2
 80103ea:	7812      	ldrb	r2, [r2, #0]
 80103ec:	2102      	movs	r1, #2
 80103ee:	438a      	bics	r2, r1
 80103f0:	701a      	strb	r2, [r3, #0]
                break;
 80103f2:	e010      	b.n	8010416 <RegionAS923NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80103f4:	2217      	movs	r2, #23
 80103f6:	18bb      	adds	r3, r7, r2
 80103f8:	18ba      	adds	r2, r7, r2
 80103fa:	7812      	ldrb	r2, [r2, #0]
 80103fc:	2103      	movs	r1, #3
 80103fe:	438a      	bics	r2, r1
 8010400:	701a      	strb	r2, [r3, #0]
                break;
 8010402:	e008      	b.n	8010416 <RegionAS923NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8010404:	2217      	movs	r2, #23
 8010406:	18bb      	adds	r3, r7, r2
 8010408:	18ba      	adds	r2, r7, r2
 801040a:	7812      	ldrb	r2, [r2, #0]
 801040c:	2103      	movs	r1, #3
 801040e:	438a      	bics	r2, r1
 8010410:	701a      	strb	r2, [r3, #0]
                break;
 8010412:	e000      	b.n	8010416 <RegionAS923NewChannelReq+0xc6>
                break;
 8010414:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8010416:	2317      	movs	r3, #23
 8010418:	18fb      	adds	r3, r7, r3
 801041a:	781b      	ldrb	r3, [r3, #0]
}
 801041c:	0018      	movs	r0, r3
 801041e:	46bd      	mov	sp, r7
 8010420:	b006      	add	sp, #24
 8010422:	bd80      	pop	{r7, pc}

08010424 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 801042c:	2300      	movs	r3, #0
}
 801042e:	0018      	movs	r0, r3
 8010430:	46bd      	mov	sp, r7
 8010432:	b002      	add	sp, #8
 8010434:	bd80      	pop	{r7, pc}
	...

08010438 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8010440:	230f      	movs	r3, #15
 8010442:	18fb      	adds	r3, r7, r3
 8010444:	2203      	movs	r2, #3
 8010446:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	0018      	movs	r0, r3
 801044e:	f7ff f847 	bl	800f4e0 <VerifyRfFreq>
 8010452:	0003      	movs	r3, r0
 8010454:	001a      	movs	r2, r3
 8010456:	2301      	movs	r3, #1
 8010458:	4053      	eors	r3, r2
 801045a:	b2db      	uxtb	r3, r3
 801045c:	2b00      	cmp	r3, #0
 801045e:	d006      	beq.n	801046e <RegionAS923DlChannelReq+0x36>
    {
        status &= 0xFE;
 8010460:	220f      	movs	r2, #15
 8010462:	18bb      	adds	r3, r7, r2
 8010464:	18ba      	adds	r2, r7, r2
 8010466:	7812      	ldrb	r2, [r2, #0]
 8010468:	2101      	movs	r1, #1
 801046a:	438a      	bics	r2, r1
 801046c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	0019      	movs	r1, r3
 8010474:	4a13      	ldr	r2, [pc, #76]	; (80104c4 <RegionAS923DlChannelReq+0x8c>)
 8010476:	000b      	movs	r3, r1
 8010478:	005b      	lsls	r3, r3, #1
 801047a:	185b      	adds	r3, r3, r1
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	589b      	ldr	r3, [r3, r2]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d106      	bne.n	8010492 <RegionAS923DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8010484:	220f      	movs	r2, #15
 8010486:	18bb      	adds	r3, r7, r2
 8010488:	18ba      	adds	r2, r7, r2
 801048a:	7812      	ldrb	r2, [r2, #0]
 801048c:	2102      	movs	r1, #2
 801048e:	438a      	bics	r2, r1
 8010490:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8010492:	230f      	movs	r3, #15
 8010494:	18fb      	adds	r3, r7, r3
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	2b03      	cmp	r3, #3
 801049a:	d10c      	bne.n	80104b6 <RegionAS923DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	0018      	movs	r0, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	685a      	ldr	r2, [r3, #4]
 80104a6:	4907      	ldr	r1, [pc, #28]	; (80104c4 <RegionAS923DlChannelReq+0x8c>)
 80104a8:	0003      	movs	r3, r0
 80104aa:	005b      	lsls	r3, r3, #1
 80104ac:	181b      	adds	r3, r3, r0
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	18cb      	adds	r3, r1, r3
 80104b2:	3304      	adds	r3, #4
 80104b4:	601a      	str	r2, [r3, #0]
    }

    return status;
 80104b6:	230f      	movs	r3, #15
 80104b8:	18fb      	adds	r3, r7, r3
 80104ba:	781b      	ldrb	r3, [r3, #0]
}
 80104bc:	0018      	movs	r0, r3
 80104be:	46bd      	mov	sp, r7
 80104c0:	b004      	add	sp, #16
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	20000bbc 	.word	0x20000bbc

080104c8 <RegionAS923CalcBackOff>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
}

void RegionAS923CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b088      	sub	sp, #32
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80104d0:	210c      	movs	r1, #12
 80104d2:	187b      	adds	r3, r7, r1
 80104d4:	4a12      	ldr	r2, [pc, #72]	; (8010520 <RegionAS923CalcBackOff+0x58>)
 80104d6:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 80104d8:	187b      	adds	r3, r7, r1
 80104da:	4a12      	ldr	r2, [pc, #72]	; (8010524 <RegionAS923CalcBackOff+0x5c>)
 80104dc:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	785a      	ldrb	r2, [r3, #1]
 80104e2:	187b      	adds	r3, r7, r1
 80104e4:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	781a      	ldrb	r2, [r3, #0]
 80104ea:	187b      	adds	r3, r7, r1
 80104ec:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	789a      	ldrb	r2, [r3, #2]
 80104f2:	187b      	adds	r3, r7, r1
 80104f4:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	78da      	ldrb	r2, [r3, #3]
 80104fa:	187b      	adds	r3, r7, r1
 80104fc:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	187b      	adds	r3, r7, r1
 8010504:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	689a      	ldr	r2, [r3, #8]
 801050a:	187b      	adds	r3, r7, r1
 801050c:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801050e:	187b      	adds	r3, r7, r1
 8010510:	0018      	movs	r0, r3
 8010512:	f004 fb09 	bl	8014b28 <RegionCommonCalcBackOff>
}
 8010516:	46c0      	nop			; (mov r8, r8)
 8010518:	46bd      	mov	sp, r7
 801051a:	b008      	add	sp, #32
 801051c:	bd80      	pop	{r7, pc}
 801051e:	46c0      	nop			; (mov r8, r8)
 8010520:	20000bbc 	.word	0x20000bbc
 8010524:	20000c7c 	.word	0x20000c7c

08010528 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010528:	b5b0      	push	{r4, r5, r7, lr}
 801052a:	b090      	sub	sp, #64	; 0x40
 801052c:	af04      	add	r7, sp, #16
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	603b      	str	r3, [r7, #0]
    uint8_t channelNext = 0;
 8010536:	2325      	movs	r3, #37	; 0x25
 8010538:	18fb      	adds	r3, r7, r3
 801053a:	2200      	movs	r2, #0
 801053c:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801053e:	232f      	movs	r3, #47	; 0x2f
 8010540:	18fb      	adds	r3, r7, r3
 8010542:	2200      	movs	r2, #0
 8010544:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8010546:	2324      	movs	r3, #36	; 0x24
 8010548:	18fb      	adds	r3, r7, r3
 801054a:	2200      	movs	r2, #0
 801054c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 801054e:	2314      	movs	r3, #20
 8010550:	18fb      	adds	r3, r7, r3
 8010552:	0018      	movs	r0, r3
 8010554:	2310      	movs	r3, #16
 8010556:	001a      	movs	r2, r3
 8010558:	2100      	movs	r1, #0
 801055a:	f015 fcd5 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 801055e:	2300      	movs	r3, #0
 8010560:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8010562:	4b60      	ldr	r3, [pc, #384]	; (80106e4 <RegionAS923NextChannel+0x1bc>)
 8010564:	2201      	movs	r2, #1
 8010566:	2100      	movs	r1, #0
 8010568:	0018      	movs	r0, r3
 801056a:	f003 ff5d 	bl	8014428 <RegionCommonCountChannels>
 801056e:	1e03      	subs	r3, r0, #0
 8010570:	d108      	bne.n	8010584 <RegionAS923NextChannel+0x5c>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8010572:	4b5d      	ldr	r3, [pc, #372]	; (80106e8 <RegionAS923NextChannel+0x1c0>)
 8010574:	22d0      	movs	r2, #208	; 0xd0
 8010576:	5a9b      	ldrh	r3, [r3, r2]
 8010578:	2203      	movs	r2, #3
 801057a:	4313      	orrs	r3, r2
 801057c:	b299      	uxth	r1, r3
 801057e:	4b5a      	ldr	r3, [pc, #360]	; (80106e8 <RegionAS923NextChannel+0x1c0>)
 8010580:	22d0      	movs	r2, #208	; 0xd0
 8010582:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681c      	ldr	r4, [r3, #0]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	0018      	movs	r0, r3
 801058e:	f00c fb52 	bl	801cc36 <TimerGetElapsedTime>
 8010592:	0003      	movs	r3, r0
 8010594:	429c      	cmp	r4, r3
 8010596:	d824      	bhi.n	80105e2 <RegionAS923NextChannel+0xba>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	2200      	movs	r2, #0
 801059c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AS923_MAX_NB_BANDS );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	7a58      	ldrb	r0, [r3, #9]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	7a99      	ldrb	r1, [r3, #10]
 80105a6:	4a51      	ldr	r2, [pc, #324]	; (80106ec <RegionAS923NextChannel+0x1c4>)
 80105a8:	2301      	movs	r3, #1
 80105aa:	f003 ffc8 	bl	801453e <RegionCommonUpdateBandTimeOff>
 80105ae:	0003      	movs	r3, r0
 80105b0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	7a58      	ldrb	r0, [r3, #9]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	7a1b      	ldrb	r3, [r3, #8]
 80105ba:	b25b      	sxtb	r3, r3
 80105bc:	b2d9      	uxtb	r1, r3
 80105be:	232f      	movs	r3, #47	; 0x2f
 80105c0:	18fc      	adds	r4, r7, r3
 80105c2:	4d49      	ldr	r5, [pc, #292]	; (80106e8 <RegionAS923NextChannel+0x1c0>)
 80105c4:	4a47      	ldr	r2, [pc, #284]	; (80106e4 <RegionAS923NextChannel+0x1bc>)
 80105c6:	2324      	movs	r3, #36	; 0x24
 80105c8:	18fb      	adds	r3, r7, r3
 80105ca:	9302      	str	r3, [sp, #8]
 80105cc:	2314      	movs	r3, #20
 80105ce:	18fb      	adds	r3, r7, r3
 80105d0:	9301      	str	r3, [sp, #4]
 80105d2:	4b46      	ldr	r3, [pc, #280]	; (80106ec <RegionAS923NextChannel+0x1c4>)
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	002b      	movs	r3, r5
 80105d8:	f7fe ffaa 	bl	800f530 <CountNbOfEnabledChannels>
 80105dc:	0003      	movs	r3, r0
 80105de:	7023      	strb	r3, [r4, #0]
 80105e0:	e010      	b.n	8010604 <RegionAS923NextChannel+0xdc>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 80105e2:	2124      	movs	r1, #36	; 0x24
 80105e4:	187b      	adds	r3, r7, r1
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	3301      	adds	r3, #1
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	187b      	adds	r3, r7, r1
 80105ee:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681c      	ldr	r4, [r3, #0]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	0018      	movs	r0, r3
 80105fa:	f00c fb1c 	bl	801cc36 <TimerGetElapsedTime>
 80105fe:	0003      	movs	r3, r0
 8010600:	1ae3      	subs	r3, r4, r3
 8010602:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8010604:	232f      	movs	r3, #47	; 0x2f
 8010606:	18fb      	adds	r3, r7, r3
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d04f      	beq.n	80106ae <RegionAS923NextChannel+0x186>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 801060e:	2327      	movs	r3, #39	; 0x27
 8010610:	18fb      	adds	r3, r7, r3
 8010612:	2200      	movs	r2, #0
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	232f      	movs	r3, #47	; 0x2f
 8010618:	18fb      	adds	r3, r7, r3
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	3b01      	subs	r3, #1
 801061e:	0019      	movs	r1, r3
 8010620:	2000      	movs	r0, #0
 8010622:	f00c fb31 	bl	801cc88 <randr>
 8010626:	0002      	movs	r2, r0
 8010628:	2326      	movs	r3, #38	; 0x26
 801062a:	18fb      	adds	r3, r7, r3
 801062c:	701a      	strb	r2, [r3, #0]
 801062e:	e037      	b.n	80106a0 <RegionAS923NextChannel+0x178>
        {
            channelNext = enabledChannels[j];
 8010630:	2426      	movs	r4, #38	; 0x26
 8010632:	193b      	adds	r3, r7, r4
 8010634:	781a      	ldrb	r2, [r3, #0]
 8010636:	2525      	movs	r5, #37	; 0x25
 8010638:	197b      	adds	r3, r7, r5
 801063a:	2114      	movs	r1, #20
 801063c:	1879      	adds	r1, r7, r1
 801063e:	5c8a      	ldrb	r2, [r1, r2]
 8010640:	701a      	strb	r2, [r3, #0]
            j = ( j + 1 ) % nbEnabledChannels;
 8010642:	193b      	adds	r3, r7, r4
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	1c5a      	adds	r2, r3, #1
 8010648:	232f      	movs	r3, #47	; 0x2f
 801064a:	18fb      	adds	r3, r7, r3
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	0019      	movs	r1, r3
 8010650:	0010      	movs	r0, r2
 8010652:	f7ef fed1 	bl	80003f8 <__aeabi_idivmod>
 8010656:	000b      	movs	r3, r1
 8010658:	001a      	movs	r2, r3
 801065a:	193b      	adds	r3, r7, r4
 801065c:	701a      	strb	r2, [r3, #0]

            // Perform carrier sense for AS923_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 801065e:	4b24      	ldr	r3, [pc, #144]	; (80106f0 <RegionAS923NextChannel+0x1c8>)
 8010660:	699c      	ldr	r4, [r3, #24]
 8010662:	197b      	adds	r3, r7, r5
 8010664:	781a      	ldrb	r2, [r3, #0]
 8010666:	4920      	ldr	r1, [pc, #128]	; (80106e8 <RegionAS923NextChannel+0x1c0>)
 8010668:	0013      	movs	r3, r2
 801066a:	005b      	lsls	r3, r3, #1
 801066c:	189b      	adds	r3, r3, r2
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	5859      	ldr	r1, [r3, r1]
 8010672:	2355      	movs	r3, #85	; 0x55
 8010674:	425a      	negs	r2, r3
 8010676:	2306      	movs	r3, #6
 8010678:	2001      	movs	r0, #1
 801067a:	47a0      	blx	r4
 801067c:	1e03      	subs	r3, r0, #0
 801067e:	d009      	beq.n	8010694 <RegionAS923NextChannel+0x16c>
            {
                // Free channel found
                *channel = channelNext;
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	2225      	movs	r2, #37	; 0x25
 8010684:	18ba      	adds	r2, r7, r2
 8010686:	7812      	ldrb	r2, [r2, #0]
 8010688:	701a      	strb	r2, [r3, #0]
                *time = 0;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	601a      	str	r2, [r3, #0]
                return LORAMAC_STATUS_OK;
 8010690:	2300      	movs	r3, #0
 8010692:	e023      	b.n	80106dc <RegionAS923NextChannel+0x1b4>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 8010694:	2127      	movs	r1, #39	; 0x27
 8010696:	187b      	adds	r3, r7, r1
 8010698:	781a      	ldrb	r2, [r3, #0]
 801069a:	187b      	adds	r3, r7, r1
 801069c:	3201      	adds	r2, #1
 801069e:	701a      	strb	r2, [r3, #0]
 80106a0:	2327      	movs	r3, #39	; 0x27
 80106a2:	18fb      	adds	r3, r7, r3
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	2b0f      	cmp	r3, #15
 80106a8:	d9c2      	bls.n	8010630 <RegionAS923NextChannel+0x108>
            }
        }
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 80106aa:	230d      	movs	r3, #13
 80106ac:	e016      	b.n	80106dc <RegionAS923NextChannel+0x1b4>
    }
    else
    {
        if( delayTx > 0 )
 80106ae:	2324      	movs	r3, #36	; 0x24
 80106b0:	18fb      	adds	r3, r7, r3
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d004      	beq.n	80106c2 <RegionAS923NextChannel+0x19a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106bc:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80106be:	230b      	movs	r3, #11
 80106c0:	e00c      	b.n	80106dc <RegionAS923NextChannel+0x1b4>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80106c2:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <RegionAS923NextChannel+0x1c0>)
 80106c4:	22d0      	movs	r2, #208	; 0xd0
 80106c6:	5a9b      	ldrh	r3, [r3, r2]
 80106c8:	2203      	movs	r2, #3
 80106ca:	4313      	orrs	r3, r2
 80106cc:	b299      	uxth	r1, r3
 80106ce:	4b06      	ldr	r3, [pc, #24]	; (80106e8 <RegionAS923NextChannel+0x1c0>)
 80106d0:	22d0      	movs	r2, #208	; 0xd0
 80106d2:	5299      	strh	r1, [r3, r2]
        *time = 0;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80106da:	230c      	movs	r3, #12
    }
}
 80106dc:	0018      	movs	r0, r3
 80106de:	46bd      	mov	sp, r7
 80106e0:	b00c      	add	sp, #48	; 0x30
 80106e2:	bdb0      	pop	{r4, r5, r7, pc}
 80106e4:	20000c8c 	.word	0x20000c8c
 80106e8:	20000bbc 	.word	0x20000bbc
 80106ec:	20000c7c 	.word	0x20000c7c
 80106f0:	080293d8 	.word	0x080293d8

080106f4 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80106f4:	b590      	push	{r4, r7, lr}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 80106fc:	230f      	movs	r3, #15
 80106fe:	18fb      	adds	r3, r7, r3
 8010700:	2200      	movs	r2, #0
 8010702:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8010704:	230e      	movs	r3, #14
 8010706:	18fb      	adds	r3, r7, r3
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 801070c:	210d      	movs	r1, #13
 801070e:	187b      	adds	r3, r7, r1
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	7912      	ldrb	r2, [r2, #4]
 8010714:	701a      	strb	r2, [r3, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8010716:	187b      	adds	r3, r7, r1
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	2b01      	cmp	r3, #1
 801071c:	d801      	bhi.n	8010722 <RegionAS923ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801071e:	2306      	movs	r3, #6
 8010720:	e09c      	b.n	801085c <RegionAS923ChannelAdd+0x168>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8010722:	230d      	movs	r3, #13
 8010724:	18fb      	adds	r3, r7, r3
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	2b0f      	cmp	r3, #15
 801072a:	d901      	bls.n	8010730 <RegionAS923ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801072c:	2303      	movs	r3, #3
 801072e:	e095      	b.n	801085c <RegionAS923ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	7a1b      	ldrb	r3, [r3, #8]
 8010736:	011b      	lsls	r3, r3, #4
 8010738:	b25b      	sxtb	r3, r3
 801073a:	111b      	asrs	r3, r3, #4
 801073c:	b25b      	sxtb	r3, r3
 801073e:	2207      	movs	r2, #7
 8010740:	2100      	movs	r1, #0
 8010742:	0018      	movs	r0, r3
 8010744:	f003 fe08 	bl	8014358 <RegionCommonValueInRange>
 8010748:	1e03      	subs	r3, r0, #0
 801074a:	d103      	bne.n	8010754 <RegionAS923ChannelAdd+0x60>
    {
        drInvalid = true;
 801074c:	230f      	movs	r3, #15
 801074e:	18fb      	adds	r3, r7, r3
 8010750:	2201      	movs	r2, #1
 8010752:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	7a1b      	ldrb	r3, [r3, #8]
 801075a:	b25b      	sxtb	r3, r3
 801075c:	111b      	asrs	r3, r3, #4
 801075e:	b25b      	sxtb	r3, r3
 8010760:	2207      	movs	r2, #7
 8010762:	2100      	movs	r1, #0
 8010764:	0018      	movs	r0, r3
 8010766:	f003 fdf7 	bl	8014358 <RegionCommonValueInRange>
 801076a:	1e03      	subs	r3, r0, #0
 801076c:	d103      	bne.n	8010776 <RegionAS923ChannelAdd+0x82>
    {
        drInvalid = true;
 801076e:	230f      	movs	r3, #15
 8010770:	18fb      	adds	r3, r7, r3
 8010772:	2201      	movs	r2, #1
 8010774:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	7a1b      	ldrb	r3, [r3, #8]
 801077c:	011b      	lsls	r3, r3, #4
 801077e:	b25b      	sxtb	r3, r3
 8010780:	111b      	asrs	r3, r3, #4
 8010782:	b25a      	sxtb	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	7a1b      	ldrb	r3, [r3, #8]
 801078a:	b25b      	sxtb	r3, r3
 801078c:	111b      	asrs	r3, r3, #4
 801078e:	b25b      	sxtb	r3, r3
 8010790:	429a      	cmp	r2, r3
 8010792:	dd03      	ble.n	801079c <RegionAS923ChannelAdd+0xa8>
    {
        drInvalid = true;
 8010794:	230f      	movs	r3, #15
 8010796:	18fb      	adds	r3, r7, r3
 8010798:	2201      	movs	r2, #1
 801079a:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 801079c:	230e      	movs	r3, #14
 801079e:	18fb      	adds	r3, r7, r3
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2201      	movs	r2, #1
 80107a4:	4053      	eors	r3, r2
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d010      	beq.n	80107ce <RegionAS923ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	0018      	movs	r0, r3
 80107b4:	f7fe fe94 	bl	800f4e0 <VerifyRfFreq>
 80107b8:	0003      	movs	r3, r0
 80107ba:	001a      	movs	r2, r3
 80107bc:	2301      	movs	r3, #1
 80107be:	4053      	eors	r3, r2
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d003      	beq.n	80107ce <RegionAS923ChannelAdd+0xda>
        {
            freqInvalid = true;
 80107c6:	230e      	movs	r3, #14
 80107c8:	18fb      	adds	r3, r7, r3
 80107ca:	2201      	movs	r2, #1
 80107cc:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80107ce:	230f      	movs	r3, #15
 80107d0:	18fb      	adds	r3, r7, r3
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d006      	beq.n	80107e6 <RegionAS923ChannelAdd+0xf2>
 80107d8:	230e      	movs	r3, #14
 80107da:	18fb      	adds	r3, r7, r3
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d001      	beq.n	80107e6 <RegionAS923ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80107e2:	2306      	movs	r3, #6
 80107e4:	e03a      	b.n	801085c <RegionAS923ChannelAdd+0x168>
    }
    if( drInvalid == true )
 80107e6:	230f      	movs	r3, #15
 80107e8:	18fb      	adds	r3, r7, r3
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <RegionAS923ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80107f0:	2305      	movs	r3, #5
 80107f2:	e033      	b.n	801085c <RegionAS923ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 80107f4:	230e      	movs	r3, #14
 80107f6:	18fb      	adds	r3, r7, r3
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d001      	beq.n	8010802 <RegionAS923ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80107fe:	2304      	movs	r3, #4
 8010800:	e02c      	b.n	801085c <RegionAS923ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8010802:	200d      	movs	r0, #13
 8010804:	0004      	movs	r4, r0
 8010806:	183b      	adds	r3, r7, r0
 8010808:	781a      	ldrb	r2, [r3, #0]
 801080a:	0013      	movs	r3, r2
 801080c:	005b      	lsls	r3, r3, #1
 801080e:	189b      	adds	r3, r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4a14      	ldr	r2, [pc, #80]	; (8010864 <RegionAS923ChannelAdd+0x170>)
 8010814:	1898      	adds	r0, r3, r2
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	220c      	movs	r2, #12
 801081c:	0019      	movs	r1, r3
 801081e:	f00c fa49 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8010822:	0020      	movs	r0, r4
 8010824:	183b      	adds	r3, r7, r0
 8010826:	781a      	ldrb	r2, [r3, #0]
 8010828:	490e      	ldr	r1, [pc, #56]	; (8010864 <RegionAS923ChannelAdd+0x170>)
 801082a:	0013      	movs	r3, r2
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	189b      	adds	r3, r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	18cb      	adds	r3, r1, r3
 8010834:	3309      	adds	r3, #9
 8010836:	2200      	movs	r2, #0
 8010838:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801083a:	4b0a      	ldr	r3, [pc, #40]	; (8010864 <RegionAS923ChannelAdd+0x170>)
 801083c:	22d0      	movs	r2, #208	; 0xd0
 801083e:	5a9b      	ldrh	r3, [r3, r2]
 8010840:	b21a      	sxth	r2, r3
 8010842:	183b      	adds	r3, r7, r0
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	2101      	movs	r1, #1
 8010848:	4099      	lsls	r1, r3
 801084a:	000b      	movs	r3, r1
 801084c:	b21b      	sxth	r3, r3
 801084e:	4313      	orrs	r3, r2
 8010850:	b21b      	sxth	r3, r3
 8010852:	b299      	uxth	r1, r3
 8010854:	4b03      	ldr	r3, [pc, #12]	; (8010864 <RegionAS923ChannelAdd+0x170>)
 8010856:	22d0      	movs	r2, #208	; 0xd0
 8010858:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	0018      	movs	r0, r3
 801085e:	46bd      	mov	sp, r7
 8010860:	b005      	add	sp, #20
 8010862:	bd90      	pop	{r4, r7, pc}
 8010864:	20000bbc 	.word	0x20000bbc

08010868 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8010870:	210f      	movs	r1, #15
 8010872:	187b      	adds	r3, r7, r1
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	7812      	ldrb	r2, [r2, #0]
 8010878:	701a      	strb	r2, [r3, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801087a:	187b      	adds	r3, r7, r1
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	2b01      	cmp	r3, #1
 8010880:	d801      	bhi.n	8010886 <RegionAS923ChannelsRemove+0x1e>
    {
        return false;
 8010882:	2300      	movs	r3, #0
 8010884:	e015      	b.n	80108b2 <RegionAS923ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8010886:	240f      	movs	r4, #15
 8010888:	193b      	adds	r3, r7, r4
 801088a:	781a      	ldrb	r2, [r3, #0]
 801088c:	490b      	ldr	r1, [pc, #44]	; (80108bc <RegionAS923ChannelsRemove+0x54>)
 801088e:	0013      	movs	r3, r2
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	189b      	adds	r3, r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	18cb      	adds	r3, r1, r3
 8010898:	220c      	movs	r2, #12
 801089a:	2100      	movs	r1, #0
 801089c:	0018      	movs	r0, r3
 801089e:	f015 fb33 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80108a2:	193b      	adds	r3, r7, r4
 80108a4:	7819      	ldrb	r1, [r3, #0]
 80108a6:	4b06      	ldr	r3, [pc, #24]	; (80108c0 <RegionAS923ChannelsRemove+0x58>)
 80108a8:	2210      	movs	r2, #16
 80108aa:	0018      	movs	r0, r3
 80108ac:	f003 fd7a 	bl	80143a4 <RegionCommonChanDisable>
 80108b0:	0003      	movs	r3, r0
}
 80108b2:	0018      	movs	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	b005      	add	sp, #20
 80108b8:	bd90      	pop	{r4, r7, pc}
 80108ba:	46c0      	nop			; (mov r8, r8)
 80108bc:	20000bbc 	.word	0x20000bbc
 80108c0:	20000c8c 	.word	0x20000c8c

080108c4 <RegionAS923ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80108c4:	b590      	push	{r4, r7, lr}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	0004      	movs	r4, r0
 80108cc:	0008      	movs	r0, r1
 80108ce:	0011      	movs	r1, r2
 80108d0:	1dfb      	adds	r3, r7, #7
 80108d2:	1c22      	adds	r2, r4, #0
 80108d4:	701a      	strb	r2, [r3, #0]
 80108d6:	1dbb      	adds	r3, r7, #6
 80108d8:	1c02      	adds	r2, r0, #0
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	1d7b      	adds	r3, r7, #5
 80108de:	1c0a      	adds	r2, r1, #0
 80108e0:	701a      	strb	r2, [r3, #0]
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 80108e2:	230f      	movs	r3, #15
 80108e4:	18fb      	adds	r3, r7, r3
 80108e6:	2200      	movs	r2, #0
 80108e8:	701a      	strb	r2, [r3, #0]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 80108ea:	1dfb      	adds	r3, r7, #7
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d103      	bne.n	80108fa <RegionAS923ApplyDrOffset+0x36>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 80108f2:	230f      	movs	r3, #15
 80108f4:	18fb      	adds	r3, r7, r3
 80108f6:	2202      	movs	r2, #2
 80108f8:	701a      	strb	r2, [r3, #0]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 80108fa:	1dbb      	adds	r3, r7, #6
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	b25b      	sxtb	r3, r3
 8010900:	1d7a      	adds	r2, r7, #5
 8010902:	7812      	ldrb	r2, [r2, #0]
 8010904:	b252      	sxtb	r2, r2
 8010906:	4909      	ldr	r1, [pc, #36]	; (801092c <RegionAS923ApplyDrOffset+0x68>)
 8010908:	568a      	ldrsb	r2, [r1, r2]
 801090a:	1a9a      	subs	r2, r3, r2
 801090c:	230f      	movs	r3, #15
 801090e:	18fb      	adds	r3, r7, r3
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	b25b      	sxtb	r3, r3
 8010914:	429a      	cmp	r2, r3
 8010916:	da00      	bge.n	801091a <RegionAS923ApplyDrOffset+0x56>
 8010918:	001a      	movs	r2, r3
 801091a:	0013      	movs	r3, r2
 801091c:	2b05      	cmp	r3, #5
 801091e:	dd00      	ble.n	8010922 <RegionAS923ApplyDrOffset+0x5e>
 8010920:	2305      	movs	r3, #5
 8010922:	b2db      	uxtb	r3, r3
}
 8010924:	0018      	movs	r0, r3
 8010926:	46bd      	mov	sp, r7
 8010928:	b005      	add	sp, #20
 801092a:	bd90      	pop	{r4, r7, pc}
 801092c:	080288d4 	.word	0x080288d4

08010930 <GetNextLowerTxDr>:
 */
static RegionAU915NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	0002      	movs	r2, r0
 8010938:	1dfb      	adds	r3, r7, #7
 801093a:	701a      	strb	r2, [r3, #0]
 801093c:	1dbb      	adds	r3, r7, #6
 801093e:	1c0a      	adds	r2, r1, #0
 8010940:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8010942:	230f      	movs	r3, #15
 8010944:	18fb      	adds	r3, r7, r3
 8010946:	2200      	movs	r2, #0
 8010948:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801094a:	1dfa      	adds	r2, r7, #7
 801094c:	1dbb      	adds	r3, r7, #6
 801094e:	7812      	ldrb	r2, [r2, #0]
 8010950:	b252      	sxtb	r2, r2
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	b25b      	sxtb	r3, r3
 8010956:	429a      	cmp	r2, r3
 8010958:	d105      	bne.n	8010966 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 801095a:	230f      	movs	r3, #15
 801095c:	18fb      	adds	r3, r7, r3
 801095e:	1dba      	adds	r2, r7, #6
 8010960:	7812      	ldrb	r2, [r2, #0]
 8010962:	701a      	strb	r2, [r3, #0]
 8010964:	e00f      	b.n	8010986 <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_8 )
 8010966:	1dfb      	adds	r3, r7, #7
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	b25b      	sxtb	r3, r3
 801096c:	2b08      	cmp	r3, #8
 801096e:	d104      	bne.n	801097a <GetNextLowerTxDr+0x4a>
    {   // DR_7 is not allowed
        nextLowerDr = DR_6;
 8010970:	230f      	movs	r3, #15
 8010972:	18fb      	adds	r3, r7, r3
 8010974:	2206      	movs	r2, #6
 8010976:	701a      	strb	r2, [r3, #0]
 8010978:	e005      	b.n	8010986 <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 801097a:	1dfb      	adds	r3, r7, #7
 801097c:	781a      	ldrb	r2, [r3, #0]
 801097e:	230f      	movs	r3, #15
 8010980:	18fb      	adds	r3, r7, r3
 8010982:	3a01      	subs	r2, #1
 8010984:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8010986:	230f      	movs	r3, #15
 8010988:	18fb      	adds	r3, r7, r3
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	b25b      	sxtb	r3, r3
}
 801098e:	0018      	movs	r0, r3
 8010990:	46bd      	mov	sp, r7
 8010992:	b004      	add	sp, #16
 8010994:	bd80      	pop	{r7, pc}
	...

08010998 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
    switch( BandwidthsAU915[drIndex] )
 80109a0:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <GetBandwidth+0x30>)
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	0092      	lsls	r2, r2, #2
 80109a6:	58d3      	ldr	r3, [r2, r3]
 80109a8:	4a08      	ldr	r2, [pc, #32]	; (80109cc <GetBandwidth+0x34>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d004      	beq.n	80109b8 <GetBandwidth+0x20>
 80109ae:	4a08      	ldr	r2, [pc, #32]	; (80109d0 <GetBandwidth+0x38>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d003      	beq.n	80109bc <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80109b4:	2300      	movs	r3, #0
 80109b6:	e002      	b.n	80109be <GetBandwidth+0x26>
        case 250000:
            return 1;
 80109b8:	2301      	movs	r3, #1
 80109ba:	e000      	b.n	80109be <GetBandwidth+0x26>
        case 500000:
            return 2;
 80109bc:	2302      	movs	r3, #2
    }
}
 80109be:	0018      	movs	r0, r3
 80109c0:	46bd      	mov	sp, r7
 80109c2:	b002      	add	sp, #8
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	080289c0 	.word	0x080289c0
 80109cc:	0003d090 	.word	0x0003d090
 80109d0:	0007a120 	.word	0x0007a120

080109d4 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80109d4:	b590      	push	{r4, r7, lr}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
 80109da:	0004      	movs	r4, r0
 80109dc:	0008      	movs	r0, r1
 80109de:	0011      	movs	r1, r2
 80109e0:	603b      	str	r3, [r7, #0]
 80109e2:	1dfb      	adds	r3, r7, #7
 80109e4:	1c22      	adds	r2, r4, #0
 80109e6:	701a      	strb	r2, [r3, #0]
 80109e8:	1dbb      	adds	r3, r7, #6
 80109ea:	1c02      	adds	r2, r0, #0
 80109ec:	701a      	strb	r2, [r3, #0]
 80109ee:	1d7b      	adds	r3, r7, #5
 80109f0:	1c0a      	adds	r2, r1, #0
 80109f2:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80109f4:	210f      	movs	r1, #15
 80109f6:	187b      	adds	r3, r7, r1
 80109f8:	1dfa      	adds	r2, r7, #7
 80109fa:	7812      	ldrb	r2, [r2, #0]
 80109fc:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80109fe:	187a      	adds	r2, r7, r1
 8010a00:	1dbb      	adds	r3, r7, #6
 8010a02:	1df9      	adds	r1, r7, #7
 8010a04:	780c      	ldrb	r4, [r1, #0]
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	b258      	sxtb	r0, r3
 8010a0a:	b261      	sxtb	r1, r4
 8010a0c:	4288      	cmp	r0, r1
 8010a0e:	da00      	bge.n	8010a12 <LimitTxPower+0x3e>
 8010a10:	1c23      	adds	r3, r4, #0
 8010a12:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8010a14:	230f      	movs	r3, #15
 8010a16:	18fb      	adds	r3, r7, r3
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	b25b      	sxtb	r3, r3
}
 8010a1c:	0018      	movs	r0, r3
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	b005      	add	sp, #20
 8010a22:	bd90      	pop	{r4, r7, pc}

08010a24 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010a2c:	4b18      	ldr	r3, [pc, #96]	; (8010a90 <VerifyRfFreq+0x6c>)
 8010a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	0010      	movs	r0, r2
 8010a34:	4798      	blx	r3
 8010a36:	0003      	movs	r3, r0
 8010a38:	001a      	movs	r2, r3
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	4053      	eors	r3, r2
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <VerifyRfFreq+0x24>
    {
        return false;
 8010a44:	2300      	movs	r3, #0
 8010a46:	e01e      	b.n	8010a86 <VerifyRfFreq+0x62>
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a12      	ldr	r2, [pc, #72]	; (8010a94 <VerifyRfFreq+0x70>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d90d      	bls.n	8010a6c <VerifyRfFreq+0x48>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a11      	ldr	r2, [pc, #68]	; (8010a98 <VerifyRfFreq+0x74>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d809      	bhi.n	8010a6c <VerifyRfFreq+0x48>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a10      	ldr	r2, [pc, #64]	; (8010a9c <VerifyRfFreq+0x78>)
 8010a5c:	4694      	mov	ip, r2
 8010a5e:	4463      	add	r3, ip
 8010a60:	490f      	ldr	r1, [pc, #60]	; (8010aa0 <VerifyRfFreq+0x7c>)
 8010a62:	0018      	movs	r0, r3
 8010a64:	f7ef fbde 	bl	8000224 <__aeabi_uidivmod>
 8010a68:	1e0b      	subs	r3, r1, #0
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 8010a6a:	d001      	beq.n	8010a70 <VerifyRfFreq+0x4c>
    {
        return false;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	e00a      	b.n	8010a86 <VerifyRfFreq+0x62>
    }

    // Tx frequencies for 125kHz
    // Also includes the range for 500kHz channels
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4a0c      	ldr	r2, [pc, #48]	; (8010aa4 <VerifyRfFreq+0x80>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d903      	bls.n	8010a80 <VerifyRfFreq+0x5c>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4a0b      	ldr	r2, [pc, #44]	; (8010aa8 <VerifyRfFreq+0x84>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d901      	bls.n	8010a84 <VerifyRfFreq+0x60>
    {
        return false;
 8010a80:	2300      	movs	r3, #0
 8010a82:	e000      	b.n	8010a86 <VerifyRfFreq+0x62>
    }
    return true;
 8010a84:	2301      	movs	r3, #1
}
 8010a86:	0018      	movs	r0, r3
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	b002      	add	sp, #8
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	46c0      	nop			; (mov r8, r8)
 8010a90:	080293d8 	.word	0x080293d8
 8010a94:	3708709f 	.word	0x3708709f
 8010a98:	374886e0 	.word	0x374886e0
 8010a9c:	c8f78f60 	.word	0xc8f78f60
 8010aa0:	000927c0 	.word	0x000927c0
 8010aa4:	368cd7ff 	.word	0x368cd7ff
 8010aa8:	374d1ac0 	.word	0x374d1ac0

08010aac <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8010aac:	b5b0      	push	{r4, r5, r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60b9      	str	r1, [r7, #8]
 8010ab4:	607a      	str	r2, [r7, #4]
 8010ab6:	603b      	str	r3, [r7, #0]
 8010ab8:	230f      	movs	r3, #15
 8010aba:	18fb      	adds	r3, r7, r3
 8010abc:	1c02      	adds	r2, r0, #0
 8010abe:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8010ac0:	2317      	movs	r3, #23
 8010ac2:	18fb      	adds	r3, r7, r3
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8010ac8:	2316      	movs	r3, #22
 8010aca:	18fb      	adds	r3, r7, r3
 8010acc:	2200      	movs	r2, #0
 8010ace:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 8010ad0:	2315      	movs	r3, #21
 8010ad2:	18fb      	adds	r3, r7, r3
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	701a      	strb	r2, [r3, #0]
 8010ad8:	2314      	movs	r3, #20
 8010ada:	18fb      	adds	r3, r7, r3
 8010adc:	2200      	movs	r2, #0
 8010ade:	701a      	strb	r2, [r3, #0]
 8010ae0:	e0a0      	b.n	8010c24 <CountNbOfEnabledChannels+0x178>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8010ae2:	2313      	movs	r3, #19
 8010ae4:	18fb      	adds	r3, r7, r3
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	701a      	strb	r2, [r3, #0]
 8010aea:	e089      	b.n	8010c00 <CountNbOfEnabledChannels+0x154>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8010aec:	2314      	movs	r3, #20
 8010aee:	18fb      	adds	r3, r7, r3
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	68ba      	ldr	r2, [r7, #8]
 8010af6:	18d3      	adds	r3, r2, r3
 8010af8:	881b      	ldrh	r3, [r3, #0]
 8010afa:	001a      	movs	r2, r3
 8010afc:	2313      	movs	r3, #19
 8010afe:	18fb      	adds	r3, r7, r3
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	411a      	asrs	r2, r3
 8010b04:	0013      	movs	r3, r2
 8010b06:	2201      	movs	r2, #1
 8010b08:	4013      	ands	r3, r2
 8010b0a:	d073      	beq.n	8010bf4 <CountNbOfEnabledChannels+0x148>
            {
                if( channels[i + j].Frequency == 0 )
 8010b0c:	2315      	movs	r3, #21
 8010b0e:	18fb      	adds	r3, r7, r3
 8010b10:	781a      	ldrb	r2, [r3, #0]
 8010b12:	2313      	movs	r3, #19
 8010b14:	18fb      	adds	r3, r7, r3
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	18d3      	adds	r3, r2, r3
 8010b1a:	001a      	movs	r2, r3
 8010b1c:	0013      	movs	r3, r2
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	189b      	adds	r3, r3, r2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	001a      	movs	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	189b      	adds	r3, r3, r2
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d05e      	beq.n	8010bee <CountNbOfEnabledChannels+0x142>
                { // Check if the channel is enabled
                    continue;
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010b30:	230f      	movs	r3, #15
 8010b32:	18fb      	adds	r3, r7, r3
 8010b34:	2000      	movs	r0, #0
 8010b36:	5618      	ldrsb	r0, [r3, r0]
 8010b38:	2415      	movs	r4, #21
 8010b3a:	193b      	adds	r3, r7, r4
 8010b3c:	781a      	ldrb	r2, [r3, #0]
 8010b3e:	2513      	movs	r5, #19
 8010b40:	197b      	adds	r3, r7, r5
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	18d3      	adds	r3, r2, r3
 8010b46:	001a      	movs	r2, r3
 8010b48:	0013      	movs	r3, r2
 8010b4a:	005b      	lsls	r3, r3, #1
 8010b4c:	189b      	adds	r3, r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	001a      	movs	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	189b      	adds	r3, r3, r2
 8010b56:	7a1b      	ldrb	r3, [r3, #8]
 8010b58:	011b      	lsls	r3, r3, #4
 8010b5a:	b25b      	sxtb	r3, r3
 8010b5c:	111b      	asrs	r3, r3, #4
 8010b5e:	b25b      	sxtb	r3, r3
 8010b60:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8010b62:	193b      	adds	r3, r7, r4
 8010b64:	781a      	ldrb	r2, [r3, #0]
 8010b66:	197b      	adds	r3, r7, r5
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	18d3      	adds	r3, r2, r3
 8010b6c:	001a      	movs	r2, r3
 8010b6e:	0013      	movs	r3, r2
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	189b      	adds	r3, r3, r2
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	001a      	movs	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	189b      	adds	r3, r3, r2
 8010b7c:	7a1b      	ldrb	r3, [r3, #8]
 8010b7e:	b25b      	sxtb	r3, r3
 8010b80:	111b      	asrs	r3, r3, #4
 8010b82:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010b84:	001a      	movs	r2, r3
 8010b86:	f003 fbe7 	bl	8014358 <RegionCommonValueInRange>
 8010b8a:	1e03      	subs	r3, r0, #0
 8010b8c:	d031      	beq.n	8010bf2 <CountNbOfEnabledChannels+0x146>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8010b8e:	2315      	movs	r3, #21
 8010b90:	18fb      	adds	r3, r7, r3
 8010b92:	781a      	ldrb	r2, [r3, #0]
 8010b94:	2313      	movs	r3, #19
 8010b96:	18fb      	adds	r3, r7, r3
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	18d3      	adds	r3, r2, r3
 8010b9c:	001a      	movs	r2, r3
 8010b9e:	0013      	movs	r3, r2
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	189b      	adds	r3, r3, r2
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	001a      	movs	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	189b      	adds	r3, r3, r2
 8010bac:	7a5b      	ldrb	r3, [r3, #9]
 8010bae:	011b      	lsls	r3, r3, #4
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	18d3      	adds	r3, r2, r3
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d006      	beq.n	8010bc8 <CountNbOfEnabledChannels+0x11c>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8010bba:	2116      	movs	r1, #22
 8010bbc:	187b      	adds	r3, r7, r1
 8010bbe:	781a      	ldrb	r2, [r3, #0]
 8010bc0:	187b      	adds	r3, r7, r1
 8010bc2:	3201      	adds	r2, #1
 8010bc4:	701a      	strb	r2, [r3, #0]
                    continue;
 8010bc6:	e015      	b.n	8010bf4 <CountNbOfEnabledChannels+0x148>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8010bc8:	2217      	movs	r2, #23
 8010bca:	18bb      	adds	r3, r7, r2
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	18ba      	adds	r2, r7, r2
 8010bd0:	1c59      	adds	r1, r3, #1
 8010bd2:	7011      	strb	r1, [r2, #0]
 8010bd4:	001a      	movs	r2, r3
 8010bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd8:	189b      	adds	r3, r3, r2
 8010bda:	2215      	movs	r2, #21
 8010bdc:	18b9      	adds	r1, r7, r2
 8010bde:	2213      	movs	r2, #19
 8010be0:	18ba      	adds	r2, r7, r2
 8010be2:	7809      	ldrb	r1, [r1, #0]
 8010be4:	7812      	ldrb	r2, [r2, #0]
 8010be6:	188a      	adds	r2, r1, r2
 8010be8:	b2d2      	uxtb	r2, r2
 8010bea:	701a      	strb	r2, [r3, #0]
 8010bec:	e002      	b.n	8010bf4 <CountNbOfEnabledChannels+0x148>
                    continue;
 8010bee:	46c0      	nop			; (mov r8, r8)
 8010bf0:	e000      	b.n	8010bf4 <CountNbOfEnabledChannels+0x148>
                    continue;
 8010bf2:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8010bf4:	2113      	movs	r1, #19
 8010bf6:	187b      	adds	r3, r7, r1
 8010bf8:	781a      	ldrb	r2, [r3, #0]
 8010bfa:	187b      	adds	r3, r7, r1
 8010bfc:	3201      	adds	r2, #1
 8010bfe:	701a      	strb	r2, [r3, #0]
 8010c00:	2313      	movs	r3, #19
 8010c02:	18fb      	adds	r3, r7, r3
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	2b0f      	cmp	r3, #15
 8010c08:	d800      	bhi.n	8010c0c <CountNbOfEnabledChannels+0x160>
 8010c0a:	e76f      	b.n	8010aec <CountNbOfEnabledChannels+0x40>
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 8010c0c:	2215      	movs	r2, #21
 8010c0e:	18bb      	adds	r3, r7, r2
 8010c10:	18ba      	adds	r2, r7, r2
 8010c12:	7812      	ldrb	r2, [r2, #0]
 8010c14:	3210      	adds	r2, #16
 8010c16:	701a      	strb	r2, [r3, #0]
 8010c18:	2114      	movs	r1, #20
 8010c1a:	187b      	adds	r3, r7, r1
 8010c1c:	781a      	ldrb	r2, [r3, #0]
 8010c1e:	187b      	adds	r3, r7, r1
 8010c20:	3201      	adds	r2, #1
 8010c22:	701a      	strb	r2, [r3, #0]
 8010c24:	2315      	movs	r3, #21
 8010c26:	18fb      	adds	r3, r7, r3
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	2b47      	cmp	r3, #71	; 0x47
 8010c2c:	d800      	bhi.n	8010c30 <CountNbOfEnabledChannels+0x184>
 8010c2e:	e758      	b.n	8010ae2 <CountNbOfEnabledChannels+0x36>
            }
        }
    }

    *delayTx = delayTransmission;
 8010c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c32:	2216      	movs	r2, #22
 8010c34:	18ba      	adds	r2, r7, r2
 8010c36:	7812      	ldrb	r2, [r2, #0]
 8010c38:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8010c3a:	2317      	movs	r3, #23
 8010c3c:	18fb      	adds	r3, r7, r3
 8010c3e:	781b      	ldrb	r3, [r3, #0]
}
 8010c40:	0018      	movs	r0, r3
 8010c42:	46bd      	mov	sp, r7
 8010c44:	b006      	add	sp, #24
 8010c46:	bdb0      	pop	{r4, r5, r7, pc}

08010c48 <RegionAU915GetPhyParam>:

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8010c50:	2308      	movs	r3, #8
 8010c52:	18fb      	adds	r3, r7, r3
 8010c54:	2200      	movs	r2, #0
 8010c56:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	2b34      	cmp	r3, #52	; 0x34
 8010c5e:	d900      	bls.n	8010c62 <RegionAU915GetPhyParam+0x1a>
 8010c60:	e118      	b.n	8010e94 <RegionAU915GetPhyParam+0x24c>
 8010c62:	009a      	lsls	r2, r3, #2
 8010c64:	4b93      	ldr	r3, [pc, #588]	; (8010eb4 <RegionAU915GetPhyParam+0x26c>)
 8010c66:	18d3      	adds	r3, r2, r3
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	78db      	ldrb	r3, [r3, #3]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d104      	bne.n	8010c7e <RegionAU915GetPhyParam+0x36>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 8010c74:	2308      	movs	r3, #8
 8010c76:	18fb      	adds	r3, r7, r3
 8010c78:	2208      	movs	r2, #8
 8010c7a:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
            }
            break;
 8010c7c:	e10b      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 8010c7e:	2308      	movs	r3, #8
 8010c80:	18fb      	adds	r3, r7, r3
 8010c82:	2202      	movs	r2, #2
 8010c84:	601a      	str	r2, [r3, #0]
            break;
 8010c86:	e106      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	789b      	ldrb	r3, [r3, #2]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d104      	bne.n	8010c9a <RegionAU915GetPhyParam+0x52>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
 8010c90:	2308      	movs	r3, #8
 8010c92:	18fb      	adds	r3, r7, r3
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
            }
            break;
 8010c98:	e0fd      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 8010c9a:	2308      	movs	r3, #8
 8010c9c:	18fb      	adds	r3, r7, r3
 8010c9e:	2202      	movs	r2, #2
 8010ca0:	601a      	str	r2, [r3, #0]
            break;
 8010ca2:	e0f8      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 8010ca4:	2308      	movs	r3, #8
 8010ca6:	18fb      	adds	r3, r7, r3
 8010ca8:	2202      	movs	r2, #2
 8010caa:	601a      	str	r2, [r3, #0]
            break;
 8010cac:	e0f3      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	789b      	ldrb	r3, [r3, #2]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d10c      	bne.n	8010cd0 <RegionAU915GetPhyParam+0x88>
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	785b      	ldrb	r3, [r3, #1]
 8010cba:	b25b      	sxtb	r3, r3
 8010cbc:	2100      	movs	r1, #0
 8010cbe:	0018      	movs	r0, r3
 8010cc0:	f7ff fe36 	bl	8010930 <GetNextLowerTxDr>
 8010cc4:	0003      	movs	r3, r0
 8010cc6:	001a      	movs	r2, r3
 8010cc8:	2308      	movs	r3, #8
 8010cca:	18fb      	adds	r3, r7, r3
 8010ccc:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
            }
            break;
 8010cce:	e0e2      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	785b      	ldrb	r3, [r3, #1]
 8010cd4:	b25b      	sxtb	r3, r3
 8010cd6:	2102      	movs	r1, #2
 8010cd8:	0018      	movs	r0, r3
 8010cda:	f7ff fe29 	bl	8010930 <GetNextLowerTxDr>
 8010cde:	0003      	movs	r3, r0
 8010ce0:	001a      	movs	r2, r3
 8010ce2:	2308      	movs	r3, #8
 8010ce4:	18fb      	adds	r3, r7, r3
 8010ce6:	601a      	str	r2, [r3, #0]
            break;
 8010ce8:	e0d5      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AU915_MAX_TX_POWER;
 8010cea:	2308      	movs	r3, #8
 8010cec:	18fb      	adds	r3, r7, r3
 8010cee:	2200      	movs	r2, #0
 8010cf0:	601a      	str	r2, [r3, #0]
            break;
 8010cf2:	e0d0      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AU915_DEFAULT_TX_POWER;
 8010cf4:	2308      	movs	r3, #8
 8010cf6:	18fb      	adds	r3, r7, r3
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
            break;
 8010cfc:	e0cb      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 8010cfe:	2308      	movs	r3, #8
 8010d00:	18fb      	adds	r3, r7, r3
 8010d02:	2240      	movs	r2, #64	; 0x40
 8010d04:	601a      	str	r2, [r3, #0]
            break;
 8010d06:	e0c6      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = AU915_ADR_ACK_DELAY;
 8010d08:	2308      	movs	r3, #8
 8010d0a:	18fb      	adds	r3, r7, r3
 8010d0c:	2220      	movs	r2, #32
 8010d0e:	601a      	str	r2, [r3, #0]
            break;
 8010d10:	e0c1      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	789b      	ldrb	r3, [r3, #2]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10a      	bne.n	8010d30 <RegionAU915GetPhyParam+0xe8>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	785b      	ldrb	r3, [r3, #1]
 8010d1e:	b25b      	sxtb	r3, r3
 8010d20:	001a      	movs	r2, r3
 8010d22:	4b65      	ldr	r3, [pc, #404]	; (8010eb8 <RegionAU915GetPhyParam+0x270>)
 8010d24:	5c9b      	ldrb	r3, [r3, r2]
 8010d26:	001a      	movs	r2, r3
 8010d28:	2308      	movs	r3, #8
 8010d2a:	18fb      	adds	r3, r7, r3
 8010d2c:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
            }
            break;
 8010d2e:	e0b2      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	785b      	ldrb	r3, [r3, #1]
 8010d34:	b25b      	sxtb	r3, r3
 8010d36:	001a      	movs	r2, r3
 8010d38:	4b60      	ldr	r3, [pc, #384]	; (8010ebc <RegionAU915GetPhyParam+0x274>)
 8010d3a:	5c9b      	ldrb	r3, [r3, r2]
 8010d3c:	001a      	movs	r2, r3
 8010d3e:	2308      	movs	r3, #8
 8010d40:	18fb      	adds	r3, r7, r3
 8010d42:	601a      	str	r2, [r3, #0]
            break;
 8010d44:	e0a7      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	789b      	ldrb	r3, [r3, #2]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d10a      	bne.n	8010d64 <RegionAU915GetPhyParam+0x11c>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	785b      	ldrb	r3, [r3, #1]
 8010d52:	b25b      	sxtb	r3, r3
 8010d54:	001a      	movs	r2, r3
 8010d56:	4b5a      	ldr	r3, [pc, #360]	; (8010ec0 <RegionAU915GetPhyParam+0x278>)
 8010d58:	5c9b      	ldrb	r3, [r3, r2]
 8010d5a:	001a      	movs	r2, r3
 8010d5c:	2308      	movs	r3, #8
 8010d5e:	18fb      	adds	r3, r7, r3
 8010d60:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
            }
            break;
 8010d62:	e098      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	785b      	ldrb	r3, [r3, #1]
 8010d68:	b25b      	sxtb	r3, r3
 8010d6a:	001a      	movs	r2, r3
 8010d6c:	4b55      	ldr	r3, [pc, #340]	; (8010ec4 <RegionAU915GetPhyParam+0x27c>)
 8010d6e:	5c9b      	ldrb	r3, [r3, r2]
 8010d70:	001a      	movs	r2, r3
 8010d72:	2308      	movs	r3, #8
 8010d74:	18fb      	adds	r3, r7, r3
 8010d76:	601a      	str	r2, [r3, #0]
            break;
 8010d78:	e08d      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AU915_DUTY_CYCLE_ENABLED;
 8010d7a:	2308      	movs	r3, #8
 8010d7c:	18fb      	adds	r3, r7, r3
 8010d7e:	2200      	movs	r2, #0
 8010d80:	601a      	str	r2, [r3, #0]
            break;
 8010d82:	e088      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AU915_MAX_RX_WINDOW;
 8010d84:	2308      	movs	r3, #8
 8010d86:	18fb      	adds	r3, r7, r3
 8010d88:	4a4f      	ldr	r2, [pc, #316]	; (8010ec8 <RegionAU915GetPhyParam+0x280>)
 8010d8a:	601a      	str	r2, [r3, #0]
            break;
 8010d8c:	e083      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = AU915_RECEIVE_DELAY1;
 8010d8e:	2308      	movs	r3, #8
 8010d90:	18fb      	adds	r3, r7, r3
 8010d92:	22fa      	movs	r2, #250	; 0xfa
 8010d94:	0092      	lsls	r2, r2, #2
 8010d96:	601a      	str	r2, [r3, #0]
            break;
 8010d98:	e07d      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = AU915_RECEIVE_DELAY2;
 8010d9a:	2308      	movs	r3, #8
 8010d9c:	18fb      	adds	r3, r7, r3
 8010d9e:	22fa      	movs	r2, #250	; 0xfa
 8010da0:	00d2      	lsls	r2, r2, #3
 8010da2:	601a      	str	r2, [r3, #0]
            break;
 8010da4:	e077      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 8010da6:	2308      	movs	r3, #8
 8010da8:	18fb      	adds	r3, r7, r3
 8010daa:	4a48      	ldr	r2, [pc, #288]	; (8010ecc <RegionAU915GetPhyParam+0x284>)
 8010dac:	601a      	str	r2, [r3, #0]
            break;
 8010dae:	e072      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 8010db0:	2308      	movs	r3, #8
 8010db2:	18fb      	adds	r3, r7, r3
 8010db4:	4a46      	ldr	r2, [pc, #280]	; (8010ed0 <RegionAU915GetPhyParam+0x288>)
 8010db6:	601a      	str	r2, [r3, #0]
            break;
 8010db8:	e06d      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = AU915_MAX_FCNT_GAP;
 8010dba:	2308      	movs	r3, #8
 8010dbc:	18fb      	adds	r3, r7, r3
 8010dbe:	2280      	movs	r2, #128	; 0x80
 8010dc0:	01d2      	lsls	r2, r2, #7
 8010dc2:	601a      	str	r2, [r3, #0]
            break;
 8010dc4:	e067      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 8010dc6:	23fa      	movs	r3, #250	; 0xfa
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4a42      	ldr	r2, [pc, #264]	; (8010ed4 <RegionAU915GetPhyParam+0x28c>)
 8010dcc:	0019      	movs	r1, r3
 8010dce:	0010      	movs	r0, r2
 8010dd0:	f00b ff5a 	bl	801cc88 <randr>
 8010dd4:	0003      	movs	r3, r0
 8010dd6:	22fa      	movs	r2, #250	; 0xfa
 8010dd8:	00d2      	lsls	r2, r2, #3
 8010dda:	4694      	mov	ip, r2
 8010ddc:	4463      	add	r3, ip
 8010dde:	001a      	movs	r2, r3
 8010de0:	2308      	movs	r3, #8
 8010de2:	18fb      	adds	r3, r7, r3
 8010de4:	601a      	str	r2, [r3, #0]
            break;
 8010de6:	e056      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = AU915_DEFAULT_RX1_DR_OFFSET;
 8010de8:	2308      	movs	r3, #8
 8010dea:	18fb      	adds	r3, r7, r3
 8010dec:	2200      	movs	r2, #0
 8010dee:	601a      	str	r2, [r3, #0]
            break;
 8010df0:	e051      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AU915_RX_WND_2_FREQ;
 8010df2:	2308      	movs	r3, #8
 8010df4:	18fb      	adds	r3, r7, r3
 8010df6:	4a38      	ldr	r2, [pc, #224]	; (8010ed8 <RegionAU915GetPhyParam+0x290>)
 8010df8:	601a      	str	r2, [r3, #0]
            break;
 8010dfa:	e04c      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 8010dfc:	2308      	movs	r3, #8
 8010dfe:	18fb      	adds	r3, r7, r3
 8010e00:	2208      	movs	r2, #8
 8010e02:	601a      	str	r2, [r3, #0]
            break;
 8010e04:	e047      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8010e06:	2308      	movs	r3, #8
 8010e08:	18fb      	adds	r3, r7, r3
 8010e0a:	4a34      	ldr	r2, [pc, #208]	; (8010edc <RegionAU915GetPhyParam+0x294>)
 8010e0c:	601a      	str	r2, [r3, #0]
            break;
 8010e0e:	e042      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8010e10:	2308      	movs	r3, #8
 8010e12:	18fb      	adds	r3, r7, r3
 8010e14:	4a32      	ldr	r2, [pc, #200]	; (8010ee0 <RegionAU915GetPhyParam+0x298>)
 8010e16:	601a      	str	r2, [r3, #0]
            break;
 8010e18:	e03d      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 8010e1a:	2308      	movs	r3, #8
 8010e1c:	18fb      	adds	r3, r7, r3
 8010e1e:	2248      	movs	r2, #72	; 0x48
 8010e20:	601a      	str	r2, [r3, #0]
            break;
 8010e22:	e038      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8010e24:	2308      	movs	r3, #8
 8010e26:	18fb      	adds	r3, r7, r3
 8010e28:	4a2e      	ldr	r2, [pc, #184]	; (8010ee4 <RegionAU915GetPhyParam+0x29c>)
 8010e2a:	601a      	str	r2, [r3, #0]
            break;
 8010e2c:	e033      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 8010e2e:	2308      	movs	r3, #8
 8010e30:	18fb      	adds	r3, r7, r3
 8010e32:	2201      	movs	r2, #1
 8010e34:	601a      	str	r2, [r3, #0]
            break;
 8010e36:	e02e      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AU915_DEFAULT_DOWNLINK_DWELL_TIME;
 8010e38:	2308      	movs	r3, #8
 8010e3a:	18fb      	adds	r3, r7, r3
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	601a      	str	r2, [r3, #0]
            break;
 8010e40:	e029      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 8010e42:	2308      	movs	r3, #8
 8010e44:	18fb      	adds	r3, r7, r3
 8010e46:	4a28      	ldr	r2, [pc, #160]	; (8010ee8 <RegionAU915GetPhyParam+0x2a0>)
 8010e48:	601a      	str	r2, [r3, #0]
            break;
 8010e4a:	e024      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 8010e4c:	2308      	movs	r3, #8
 8010e4e:	18fb      	adds	r3, r7, r3
 8010e50:	4a26      	ldr	r2, [pc, #152]	; (8010eec <RegionAU915GetPhyParam+0x2a4>)
 8010e52:	601a      	str	r2, [r3, #0]
            break;
 8010e54:	e01f      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 8010e56:	2108      	movs	r1, #8
 8010e58:	187b      	adds	r3, r7, r1
 8010e5a:	2213      	movs	r2, #19
 8010e5c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 8010e5e:	187b      	adds	r3, r7, r1
 8010e60:	2203      	movs	r2, #3
 8010e62:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 8010e64:	187b      	adds	r3, r7, r1
 8010e66:	2201      	movs	r2, #1
 8010e68:	709a      	strb	r2, [r3, #2]
            break;
 8010e6a:	e014      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 8010e6c:	2308      	movs	r3, #8
 8010e6e:	18fb      	adds	r3, r7, r3
 8010e70:	220a      	movs	r2, #10
 8010e72:	601a      	str	r2, [r3, #0]
            break;
 8010e74:	e00f      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 8010e76:	2308      	movs	r3, #8
 8010e78:	18fb      	adds	r3, r7, r3
 8010e7a:	4a1d      	ldr	r2, [pc, #116]	; (8010ef0 <RegionAU915GetPhyParam+0x2a8>)
 8010e7c:	601a      	str	r2, [r3, #0]
            break;
 8010e7e:	e00a      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8010e80:	2308      	movs	r3, #8
 8010e82:	18fb      	adds	r3, r7, r3
 8010e84:	2208      	movs	r2, #8
 8010e86:	601a      	str	r2, [r3, #0]
            break;
 8010e88:	e005      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 8010e8a:	2308      	movs	r3, #8
 8010e8c:	18fb      	adds	r3, r7, r3
 8010e8e:	220a      	movs	r2, #10
 8010e90:	601a      	str	r2, [r3, #0]
            break;
 8010e92:	e000      	b.n	8010e96 <RegionAU915GetPhyParam+0x24e>
        }
        default:
        {
            break;
 8010e94:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8010e96:	210c      	movs	r1, #12
 8010e98:	187b      	adds	r3, r7, r1
 8010e9a:	2208      	movs	r2, #8
 8010e9c:	18ba      	adds	r2, r7, r2
 8010e9e:	6812      	ldr	r2, [r2, #0]
 8010ea0:	601a      	str	r2, [r3, #0]
 8010ea2:	187b      	adds	r3, r7, r1
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	0013      	movs	r3, r2
}
 8010eaa:	0018      	movs	r0, r3
 8010eac:	46bd      	mov	sp, r7
 8010eae:	b004      	add	sp, #16
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	46c0      	nop			; (mov r8, r8)
 8010eb4:	08028a6c 	.word	0x08028a6c
 8010eb8:	08028a2c 	.word	0x08028a2c
 8010ebc:	08028a4c 	.word	0x08028a4c
 8010ec0:	08028a3c 	.word	0x08028a3c
 8010ec4:	08028a5c 	.word	0x08028a5c
 8010ec8:	00000bb8 	.word	0x00000bb8
 8010ecc:	00001388 	.word	0x00001388
 8010ed0:	00001770 	.word	0x00001770
 8010ed4:	fffffc18 	.word	0xfffffc18
 8010ed8:	370870a0 	.word	0x370870a0
 8010edc:	20001000 	.word	0x20001000
 8010ee0:	20001018 	.word	0x20001018
 8010ee4:	20000c90 	.word	0x20000c90
 8010ee8:	41f00000 	.word	0x41f00000
 8010eec:	4009999a 	.word	0x4009999a
 8010ef0:	000927c0 	.word	0x000927c0

08010ef4 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	7858      	ldrb	r0, [r3, #1]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	0019      	movs	r1, r3
 8010f06:	4a0a      	ldr	r2, [pc, #40]	; (8010f30 <RegionAU915SetBandTxDone+0x3c>)
 8010f08:	000b      	movs	r3, r1
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	185b      	adds	r3, r3, r1
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	18d3      	adds	r3, r2, r3
 8010f12:	3309      	adds	r3, #9
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	3336      	adds	r3, #54	; 0x36
 8010f18:	011a      	lsls	r2, r3, #4
 8010f1a:	4b05      	ldr	r3, [pc, #20]	; (8010f30 <RegionAU915SetBandTxDone+0x3c>)
 8010f1c:	18d1      	adds	r1, r2, r3
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	001a      	movs	r2, r3
 8010f24:	f003 faf0 	bl	8014508 <RegionCommonSetBandTxDone>
}
 8010f28:	46c0      	nop			; (mov r8, r8)
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	b002      	add	sp, #8
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	20000c90 	.word	0x20000c90

08010f34 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 8010f34:	b590      	push	{r4, r7, lr}
 8010f36:	b089      	sub	sp, #36	; 0x24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 8010f3c:	210c      	movs	r1, #12
 8010f3e:	187b      	adds	r3, r7, r1
 8010f40:	2201      	movs	r2, #1
 8010f42:	801a      	strh	r2, [r3, #0]
 8010f44:	187b      	adds	r3, r7, r1
 8010f46:	2200      	movs	r2, #0
 8010f48:	709a      	strb	r2, [r3, #2]
 8010f4a:	187b      	adds	r3, r7, r1
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	605a      	str	r2, [r3, #4]
 8010f50:	187b      	adds	r3, r7, r1
 8010f52:	2200      	movs	r2, #0
 8010f54:	609a      	str	r2, [r3, #8]
 8010f56:	187b      	adds	r3, r7, r1
 8010f58:	2200      	movs	r2, #0
 8010f5a:	60da      	str	r2, [r3, #12]
    {
        AU915_BAND0
    };

    switch( params->Type )
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	791b      	ldrb	r3, [r3, #4]
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d100      	bne.n	8010f66 <RegionAU915InitDefaults+0x32>
 8010f64:	e0b4      	b.n	80110d0 <RegionAU915InitDefaults+0x19c>
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	d100      	bne.n	8010f6c <RegionAU915InitDefaults+0x38>
 8010f6a:	e0a4      	b.n	80110b6 <RegionAU915InitDefaults+0x182>
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d000      	beq.n	8010f72 <RegionAU915InitDefaults+0x3e>
            }
            break;
        }
        default:
        {
            break;
 8010f70:	e0e2      	b.n	8011138 <RegionAU915InitDefaults+0x204>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 8010f72:	230c      	movs	r3, #12
 8010f74:	18f9      	adds	r1, r7, r3
 8010f76:	4b72      	ldr	r3, [pc, #456]	; (8011140 <RegionAU915InitDefaults+0x20c>)
 8010f78:	2210      	movs	r2, #16
 8010f7a:	0018      	movs	r0, r3
 8010f7c:	f00b fe9a 	bl	801ccb4 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8010f80:	231f      	movs	r3, #31
 8010f82:	18fb      	adds	r3, r7, r3
 8010f84:	2200      	movs	r2, #0
 8010f86:	701a      	strb	r2, [r3, #0]
 8010f88:	e02c      	b.n	8010fe4 <RegionAU915InitDefaults+0xb0>
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 8010f8a:	201f      	movs	r0, #31
 8010f8c:	183b      	adds	r3, r7, r0
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	4a6c      	ldr	r2, [pc, #432]	; (8011144 <RegionAU915InitDefaults+0x210>)
 8010f92:	4353      	muls	r3, r2
 8010f94:	4a6c      	ldr	r2, [pc, #432]	; (8011148 <RegionAU915InitDefaults+0x214>)
 8010f96:	1899      	adds	r1, r3, r2
 8010f98:	0004      	movs	r4, r0
 8010f9a:	183b      	adds	r3, r7, r0
 8010f9c:	781a      	ldrb	r2, [r3, #0]
 8010f9e:	0008      	movs	r0, r1
 8010fa0:	496a      	ldr	r1, [pc, #424]	; (801114c <RegionAU915InitDefaults+0x218>)
 8010fa2:	0013      	movs	r3, r2
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	189b      	adds	r3, r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010fac:	0020      	movs	r0, r4
 8010fae:	183b      	adds	r3, r7, r0
 8010fb0:	781a      	ldrb	r2, [r3, #0]
 8010fb2:	4966      	ldr	r1, [pc, #408]	; (801114c <RegionAU915InitDefaults+0x218>)
 8010fb4:	0013      	movs	r3, r2
 8010fb6:	005b      	lsls	r3, r3, #1
 8010fb8:	189b      	adds	r3, r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	18cb      	adds	r3, r1, r3
 8010fbe:	3308      	adds	r3, #8
 8010fc0:	2250      	movs	r2, #80	; 0x50
 8010fc2:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 8010fc4:	183b      	adds	r3, r7, r0
 8010fc6:	781a      	ldrb	r2, [r3, #0]
 8010fc8:	4960      	ldr	r1, [pc, #384]	; (801114c <RegionAU915InitDefaults+0x218>)
 8010fca:	0013      	movs	r3, r2
 8010fcc:	005b      	lsls	r3, r3, #1
 8010fce:	189b      	adds	r3, r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	18cb      	adds	r3, r1, r3
 8010fd4:	3309      	adds	r3, #9
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8010fda:	183b      	adds	r3, r7, r0
 8010fdc:	781a      	ldrb	r2, [r3, #0]
 8010fde:	183b      	adds	r3, r7, r0
 8010fe0:	3201      	adds	r2, #1
 8010fe2:	701a      	strb	r2, [r3, #0]
 8010fe4:	231f      	movs	r3, #31
 8010fe6:	18fb      	adds	r3, r7, r3
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b3f      	cmp	r3, #63	; 0x3f
 8010fec:	d9cd      	bls.n	8010f8a <RegionAU915InitDefaults+0x56>
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8010fee:	231e      	movs	r3, #30
 8010ff0:	18fb      	adds	r3, r7, r3
 8010ff2:	2240      	movs	r2, #64	; 0x40
 8010ff4:	701a      	strb	r2, [r3, #0]
 8010ff6:	e02d      	b.n	8011054 <RegionAU915InitDefaults+0x120>
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8010ff8:	201e      	movs	r0, #30
 8010ffa:	183b      	adds	r3, r7, r0
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	3b40      	subs	r3, #64	; 0x40
 8011000:	4a53      	ldr	r2, [pc, #332]	; (8011150 <RegionAU915InitDefaults+0x21c>)
 8011002:	4353      	muls	r3, r2
 8011004:	4a53      	ldr	r2, [pc, #332]	; (8011154 <RegionAU915InitDefaults+0x220>)
 8011006:	1899      	adds	r1, r3, r2
 8011008:	0004      	movs	r4, r0
 801100a:	183b      	adds	r3, r7, r0
 801100c:	781a      	ldrb	r2, [r3, #0]
 801100e:	0008      	movs	r0, r1
 8011010:	494e      	ldr	r1, [pc, #312]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011012:	0013      	movs	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	189b      	adds	r3, r3, r2
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 801101c:	0020      	movs	r0, r4
 801101e:	183b      	adds	r3, r7, r0
 8011020:	781a      	ldrb	r2, [r3, #0]
 8011022:	494a      	ldr	r1, [pc, #296]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011024:	0013      	movs	r3, r2
 8011026:	005b      	lsls	r3, r3, #1
 8011028:	189b      	adds	r3, r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	18cb      	adds	r3, r1, r3
 801102e:	3308      	adds	r3, #8
 8011030:	2266      	movs	r2, #102	; 0x66
 8011032:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 8011034:	183b      	adds	r3, r7, r0
 8011036:	781a      	ldrb	r2, [r3, #0]
 8011038:	4944      	ldr	r1, [pc, #272]	; (801114c <RegionAU915InitDefaults+0x218>)
 801103a:	0013      	movs	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	189b      	adds	r3, r3, r2
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	18cb      	adds	r3, r1, r3
 8011044:	3309      	adds	r3, #9
 8011046:	2200      	movs	r2, #0
 8011048:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 801104a:	183b      	adds	r3, r7, r0
 801104c:	781a      	ldrb	r2, [r3, #0]
 801104e:	183b      	adds	r3, r7, r0
 8011050:	3201      	adds	r2, #1
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	231e      	movs	r3, #30
 8011056:	18fb      	adds	r3, r7, r3
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	2b47      	cmp	r3, #71	; 0x47
 801105c:	d9cc      	bls.n	8010ff8 <RegionAU915InitDefaults+0xc4>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 801105e:	4a3b      	ldr	r2, [pc, #236]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011060:	23e2      	movs	r3, #226	; 0xe2
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	2101      	movs	r1, #1
 8011066:	4249      	negs	r1, r1
 8011068:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 801106a:	4b38      	ldr	r3, [pc, #224]	; (801114c <RegionAU915InitDefaults+0x218>)
 801106c:	4a3a      	ldr	r2, [pc, #232]	; (8011158 <RegionAU915InitDefaults+0x224>)
 801106e:	2101      	movs	r1, #1
 8011070:	4249      	negs	r1, r1
 8011072:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 8011074:	4a35      	ldr	r2, [pc, #212]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011076:	23e3      	movs	r3, #227	; 0xe3
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	2101      	movs	r1, #1
 801107c:	4249      	negs	r1, r1
 801107e:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 8011080:	4b32      	ldr	r3, [pc, #200]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011082:	4a36      	ldr	r2, [pc, #216]	; (801115c <RegionAU915InitDefaults+0x228>)
 8011084:	2101      	movs	r1, #1
 8011086:	4249      	negs	r1, r1
 8011088:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0x00FF;
 801108a:	4a30      	ldr	r2, [pc, #192]	; (801114c <RegionAU915InitDefaults+0x218>)
 801108c:	23e4      	movs	r3, #228	; 0xe4
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	21ff      	movs	r1, #255	; 0xff
 8011092:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 8011094:	4b2d      	ldr	r3, [pc, #180]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011096:	4a32      	ldr	r2, [pc, #200]	; (8011160 <RegionAU915InitDefaults+0x22c>)
 8011098:	2100      	movs	r1, #0
 801109a:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 801109c:	4931      	ldr	r1, [pc, #196]	; (8011164 <RegionAU915InitDefaults+0x230>)
 801109e:	4b32      	ldr	r3, [pc, #200]	; (8011168 <RegionAU915InitDefaults+0x234>)
 80110a0:	2206      	movs	r2, #6
 80110a2:	0018      	movs	r0, r3
 80110a4:	f003 fa01 	bl	80144aa <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 80110a8:	492f      	ldr	r1, [pc, #188]	; (8011168 <RegionAU915InitDefaults+0x234>)
 80110aa:	4b30      	ldr	r3, [pc, #192]	; (801116c <RegionAU915InitDefaults+0x238>)
 80110ac:	2206      	movs	r2, #6
 80110ae:	0018      	movs	r0, r3
 80110b0:	f003 f9fb 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 80110b4:	e040      	b.n	8011138 <RegionAU915InitDefaults+0x204>
            if( params->NvmCtx != 0 )
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d03b      	beq.n	8011136 <RegionAU915InitDefaults+0x202>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6819      	ldr	r1, [r3, #0]
 80110c2:	23e5      	movs	r3, #229	; 0xe5
 80110c4:	009a      	lsls	r2, r3, #2
 80110c6:	4b21      	ldr	r3, [pc, #132]	; (801114c <RegionAU915InitDefaults+0x218>)
 80110c8:	0018      	movs	r0, r3
 80110ca:	f00b fdf3 	bl	801ccb4 <memcpy1>
            break;
 80110ce:	e032      	b.n	8011136 <RegionAU915InitDefaults+0x202>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 80110d0:	4924      	ldr	r1, [pc, #144]	; (8011164 <RegionAU915InitDefaults+0x230>)
 80110d2:	4b25      	ldr	r3, [pc, #148]	; (8011168 <RegionAU915InitDefaults+0x234>)
 80110d4:	2206      	movs	r2, #6
 80110d6:	0018      	movs	r0, r3
 80110d8:	f003 f9e7 	bl	80144aa <RegionCommonChanMaskCopy>
            for( uint8_t i = 0; i < 6; i++ )
 80110dc:	231d      	movs	r3, #29
 80110de:	18fb      	adds	r3, r7, r3
 80110e0:	2200      	movs	r2, #0
 80110e2:	701a      	strb	r2, [r3, #0]
 80110e4:	e021      	b.n	801112a <RegionAU915InitDefaults+0x1f6>
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 80110e6:	201d      	movs	r0, #29
 80110e8:	183b      	adds	r3, r7, r0
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	4a17      	ldr	r2, [pc, #92]	; (801114c <RegionAU915InitDefaults+0x218>)
 80110ee:	33bd      	adds	r3, #189	; 0xbd
 80110f0:	33ff      	adds	r3, #255	; 0xff
 80110f2:	005b      	lsls	r3, r3, #1
 80110f4:	18d3      	adds	r3, r2, r3
 80110f6:	3304      	adds	r3, #4
 80110f8:	881a      	ldrh	r2, [r3, #0]
 80110fa:	183b      	adds	r3, r7, r0
 80110fc:	7819      	ldrb	r1, [r3, #0]
 80110fe:	4b13      	ldr	r3, [pc, #76]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011100:	31b9      	adds	r1, #185	; 0xb9
 8011102:	31ff      	adds	r1, #255	; 0xff
 8011104:	0049      	lsls	r1, r1, #1
 8011106:	5ac9      	ldrh	r1, [r1, r3]
 8011108:	183b      	adds	r3, r7, r0
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	400a      	ands	r2, r1
 801110e:	b291      	uxth	r1, r2
 8011110:	4a0e      	ldr	r2, [pc, #56]	; (801114c <RegionAU915InitDefaults+0x218>)
 8011112:	33bd      	adds	r3, #189	; 0xbd
 8011114:	33ff      	adds	r3, #255	; 0xff
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	18d3      	adds	r3, r2, r3
 801111a:	3304      	adds	r3, #4
 801111c:	1c0a      	adds	r2, r1, #0
 801111e:	801a      	strh	r2, [r3, #0]
            for( uint8_t i = 0; i < 6; i++ )
 8011120:	183b      	adds	r3, r7, r0
 8011122:	781a      	ldrb	r2, [r3, #0]
 8011124:	183b      	adds	r3, r7, r0
 8011126:	3201      	adds	r2, #1
 8011128:	701a      	strb	r2, [r3, #0]
 801112a:	231d      	movs	r3, #29
 801112c:	18fb      	adds	r3, r7, r3
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	2b05      	cmp	r3, #5
 8011132:	d9d8      	bls.n	80110e6 <RegionAU915InitDefaults+0x1b2>
            break;
 8011134:	e000      	b.n	8011138 <RegionAU915InitDefaults+0x204>
            break;
 8011136:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011138:	46c0      	nop			; (mov r8, r8)
 801113a:	46bd      	mov	sp, r7
 801113c:	b009      	add	sp, #36	; 0x24
 801113e:	bd90      	pop	{r4, r7, pc}
 8011140:	20000ff0 	.word	0x20000ff0
 8011144:	00030d40 	.word	0x00030d40
 8011148:	368cd800 	.word	0x368cd800
 801114c:	20000c90 	.word	0x20000c90
 8011150:	00186a00 	.word	0x00186a00
 8011154:	36978660 	.word	0x36978660
 8011158:	0000038a 	.word	0x0000038a
 801115c:	0000038e 	.word	0x0000038e
 8011160:	00000392 	.word	0x00000392
 8011164:	20001018 	.word	0x20001018
 8011168:	20001000 	.word	0x20001000
 801116c:	2000100c 	.word	0x2000100c

08011170 <RegionAU915ApplyCFList>:
            return false;
    }
}

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8011170:	b590      	push	{r4, r7, lr}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	791b      	ldrb	r3, [r3, #4]
 801117c:	2b10      	cmp	r3, #16
 801117e:	d000      	beq.n	8011182 <RegionAU915ApplyCFList+0x12>
 8011180:	e07d      	b.n	801127e <RegionAU915ApplyCFList+0x10e>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	330f      	adds	r3, #15
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	2b01      	cmp	r3, #1
 801118c:	d000      	beq.n	8011190 <RegionAU915ApplyCFList+0x20>
 801118e:	e078      	b.n	8011282 <RegionAU915ApplyCFList+0x112>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011190:	230f      	movs	r3, #15
 8011192:	18fb      	adds	r3, r7, r3
 8011194:	2200      	movs	r2, #0
 8011196:	701a      	strb	r2, [r3, #0]
 8011198:	230e      	movs	r3, #14
 801119a:	18fb      	adds	r3, r7, r3
 801119c:	2200      	movs	r2, #0
 801119e:	701a      	strb	r2, [r3, #0]
 80111a0:	e067      	b.n	8011272 <RegionAU915ApplyCFList+0x102>
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	240e      	movs	r4, #14
 80111a8:	193b      	adds	r3, r7, r4
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	18d3      	adds	r3, r2, r3
 80111ae:	7819      	ldrb	r1, [r3, #0]
 80111b0:	200f      	movs	r0, #15
 80111b2:	183b      	adds	r3, r7, r0
 80111b4:	781a      	ldrb	r2, [r3, #0]
 80111b6:	b289      	uxth	r1, r1
 80111b8:	4b34      	ldr	r3, [pc, #208]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 80111ba:	32b9      	adds	r2, #185	; 0xb9
 80111bc:	32ff      	adds	r2, #255	; 0xff
 80111be:	0052      	lsls	r2, r2, #1
 80111c0:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80111c2:	183b      	adds	r3, r7, r0
 80111c4:	781a      	ldrb	r2, [r3, #0]
 80111c6:	4b31      	ldr	r3, [pc, #196]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 80111c8:	32b9      	adds	r2, #185	; 0xb9
 80111ca:	32ff      	adds	r2, #255	; 0xff
 80111cc:	0052      	lsls	r2, r2, #1
 80111ce:	5ad1      	ldrh	r1, [r2, r3]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	193b      	adds	r3, r7, r4
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	3301      	adds	r3, #1
 80111da:	18d3      	adds	r3, r2, r3
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	b29b      	uxth	r3, r3
 80111e0:	021b      	lsls	r3, r3, #8
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	183a      	adds	r2, r7, r0
 80111e6:	7812      	ldrb	r2, [r2, #0]
 80111e8:	430b      	orrs	r3, r1
 80111ea:	b299      	uxth	r1, r3
 80111ec:	4b27      	ldr	r3, [pc, #156]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 80111ee:	32b9      	adds	r2, #185	; 0xb9
 80111f0:	32ff      	adds	r2, #255	; 0xff
 80111f2:	0052      	lsls	r2, r2, #1
 80111f4:	52d1      	strh	r1, [r2, r3]
        if( chMaskItr == 4 )
 80111f6:	183b      	adds	r3, r7, r0
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	2b04      	cmp	r3, #4
 80111fc:	d111      	bne.n	8011222 <RegionAU915ApplyCFList+0xb2>
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80111fe:	210f      	movs	r1, #15
 8011200:	187b      	adds	r3, r7, r1
 8011202:	781a      	ldrb	r2, [r3, #0]
 8011204:	4b21      	ldr	r3, [pc, #132]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 8011206:	32b9      	adds	r2, #185	; 0xb9
 8011208:	32ff      	adds	r2, #255	; 0xff
 801120a:	0052      	lsls	r2, r2, #1
 801120c:	5ad3      	ldrh	r3, [r2, r3]
 801120e:	187a      	adds	r2, r7, r1
 8011210:	7812      	ldrb	r2, [r2, #0]
 8011212:	21ff      	movs	r1, #255	; 0xff
 8011214:	400b      	ands	r3, r1
 8011216:	b299      	uxth	r1, r3
 8011218:	4b1c      	ldr	r3, [pc, #112]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 801121a:	32b9      	adds	r2, #185	; 0xb9
 801121c:	32ff      	adds	r2, #255	; 0xff
 801121e:	0052      	lsls	r2, r2, #1
 8011220:	52d1      	strh	r1, [r2, r3]
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 8011222:	200f      	movs	r0, #15
 8011224:	183b      	adds	r3, r7, r0
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	4a18      	ldr	r2, [pc, #96]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 801122a:	33bd      	adds	r3, #189	; 0xbd
 801122c:	33ff      	adds	r3, #255	; 0xff
 801122e:	005b      	lsls	r3, r3, #1
 8011230:	18d3      	adds	r3, r2, r3
 8011232:	3304      	adds	r3, #4
 8011234:	881a      	ldrh	r2, [r3, #0]
 8011236:	183b      	adds	r3, r7, r0
 8011238:	7819      	ldrb	r1, [r3, #0]
 801123a:	4b14      	ldr	r3, [pc, #80]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 801123c:	31b9      	adds	r1, #185	; 0xb9
 801123e:	31ff      	adds	r1, #255	; 0xff
 8011240:	0049      	lsls	r1, r1, #1
 8011242:	5ac9      	ldrh	r1, [r1, r3]
 8011244:	183b      	adds	r3, r7, r0
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	400a      	ands	r2, r1
 801124a:	b291      	uxth	r1, r2
 801124c:	4a0f      	ldr	r2, [pc, #60]	; (801128c <RegionAU915ApplyCFList+0x11c>)
 801124e:	33bd      	adds	r3, #189	; 0xbd
 8011250:	33ff      	adds	r3, #255	; 0xff
 8011252:	005b      	lsls	r3, r3, #1
 8011254:	18d3      	adds	r3, r2, r3
 8011256:	3304      	adds	r3, #4
 8011258:	1c0a      	adds	r2, r1, #0
 801125a:	801a      	strh	r2, [r3, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801125c:	183b      	adds	r3, r7, r0
 801125e:	781a      	ldrb	r2, [r3, #0]
 8011260:	183b      	adds	r3, r7, r0
 8011262:	3201      	adds	r2, #1
 8011264:	701a      	strb	r2, [r3, #0]
 8011266:	220e      	movs	r2, #14
 8011268:	18bb      	adds	r3, r7, r2
 801126a:	18ba      	adds	r2, r7, r2
 801126c:	7812      	ldrb	r2, [r2, #0]
 801126e:	3202      	adds	r2, #2
 8011270:	701a      	strb	r2, [r3, #0]
 8011272:	230f      	movs	r3, #15
 8011274:	18fb      	adds	r3, r7, r3
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	2b04      	cmp	r3, #4
 801127a:	d992      	bls.n	80111a2 <RegionAU915ApplyCFList+0x32>
 801127c:	e002      	b.n	8011284 <RegionAU915ApplyCFList+0x114>
        return;
 801127e:	46c0      	nop			; (mov r8, r8)
 8011280:	e000      	b.n	8011284 <RegionAU915ApplyCFList+0x114>
        return;
 8011282:	46c0      	nop			; (mov r8, r8)
    }
}
 8011284:	46bd      	mov	sp, r7
 8011286:	b005      	add	sp, #20
 8011288:	bd90      	pop	{r4, r7, pc}
 801128a:	46c0      	nop			; (mov r8, r8)
 801128c:	20000c90 	.word	0x20000c90

08011290 <RegionAU915ComputeRxWindowParameters>:
    }
    return true;
}

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011292:	b08b      	sub	sp, #44	; 0x2c
 8011294:	af04      	add	r7, sp, #16
 8011296:	60ba      	str	r2, [r7, #8]
 8011298:	607b      	str	r3, [r7, #4]
 801129a:	250f      	movs	r5, #15
 801129c:	197b      	adds	r3, r7, r5
 801129e:	1c02      	adds	r2, r0, #0
 80112a0:	701a      	strb	r2, [r3, #0]
 80112a2:	230e      	movs	r3, #14
 80112a4:	18fb      	adds	r3, r7, r3
 80112a6:	1c0a      	adds	r2, r1, #0
 80112a8:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80112aa:	2300      	movs	r3, #0
 80112ac:	2400      	movs	r4, #0
 80112ae:	613b      	str	r3, [r7, #16]
 80112b0:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 80112b2:	197b      	adds	r3, r7, r5
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	b25a      	sxtb	r2, r3
 80112b8:	2a0d      	cmp	r2, #13
 80112ba:	dd00      	ble.n	80112be <RegionAU915ComputeRxWindowParameters+0x2e>
 80112bc:	230d      	movs	r3, #13
 80112be:	b25a      	sxtb	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	785b      	ldrb	r3, [r3, #1]
 80112c8:	b25b      	sxtb	r3, r3
 80112ca:	0018      	movs	r0, r3
 80112cc:	f7ff fb64 	bl	8010998 <GetBandwidth>
 80112d0:	0003      	movs	r3, r0
 80112d2:	b2da      	uxtb	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	785b      	ldrb	r3, [r3, #1]
 80112dc:	b25b      	sxtb	r3, r3
 80112de:	001a      	movs	r2, r3
 80112e0:	4b14      	ldr	r3, [pc, #80]	; (8011334 <RegionAU915ComputeRxWindowParameters+0xa4>)
 80112e2:	5c98      	ldrb	r0, [r3, r2]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	785b      	ldrb	r3, [r3, #1]
 80112e8:	b25b      	sxtb	r3, r3
 80112ea:	001a      	movs	r2, r3
 80112ec:	4b12      	ldr	r3, [pc, #72]	; (8011338 <RegionAU915ComputeRxWindowParameters+0xa8>)
 80112ee:	0092      	lsls	r2, r2, #2
 80112f0:	58d3      	ldr	r3, [r2, r3]
 80112f2:	0019      	movs	r1, r3
 80112f4:	f003 fb14 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 80112f8:	0003      	movs	r3, r0
 80112fa:	000c      	movs	r4, r1
 80112fc:	613b      	str	r3, [r7, #16]
 80112fe:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8011300:	4b0e      	ldr	r3, [pc, #56]	; (801133c <RegionAU915ComputeRxWindowParameters+0xac>)
 8011302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011304:	4798      	blx	r3
 8011306:	0006      	movs	r6, r0
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	3308      	adds	r3, #8
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	320c      	adds	r2, #12
 8011310:	68bd      	ldr	r5, [r7, #8]
 8011312:	210e      	movs	r1, #14
 8011314:	1879      	adds	r1, r7, r1
 8011316:	780c      	ldrb	r4, [r1, #0]
 8011318:	6938      	ldr	r0, [r7, #16]
 801131a:	6979      	ldr	r1, [r7, #20]
 801131c:	9202      	str	r2, [sp, #8]
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	9600      	str	r6, [sp, #0]
 8011322:	002b      	movs	r3, r5
 8011324:	0022      	movs	r2, r4
 8011326:	f003 fb43 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 801132a:	46c0      	nop			; (mov r8, r8)
 801132c:	46bd      	mov	sp, r7
 801132e:	b007      	add	sp, #28
 8011330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011332:	46c0      	nop			; (mov r8, r8)
 8011334:	080289b0 	.word	0x080289b0
 8011338:	080289c0 	.word	0x080289c0
 801133c:	080293d8 	.word	0x080293d8

08011340 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011340:	b5b0      	push	{r4, r5, r7, lr}
 8011342:	b090      	sub	sp, #64	; 0x40
 8011344:	af0a      	add	r7, sp, #40	; 0x28
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 801134a:	230f      	movs	r3, #15
 801134c:	18fb      	adds	r3, r7, r3
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	7852      	ldrb	r2, [r2, #1]
 8011352:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8011354:	2317      	movs	r3, #23
 8011356:	18fb      	adds	r3, r7, r3
 8011358:	2200      	movs	r2, #0
 801135a:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801135c:	230e      	movs	r3, #14
 801135e:	18fb      	adds	r3, r7, r3
 8011360:	2200      	movs	r2, #0
 8011362:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801136a:	4b39      	ldr	r3, [pc, #228]	; (8011450 <RegionAU915RxConfig+0x110>)
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	4798      	blx	r3
 8011370:	1e03      	subs	r3, r0, #0
 8011372:	d001      	beq.n	8011378 <RegionAU915RxConfig+0x38>
    {
        return false;
 8011374:	2300      	movs	r3, #0
 8011376:	e067      	b.n	8011448 <RegionAU915RxConfig+0x108>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7cdb      	ldrb	r3, [r3, #19]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10a      	bne.n	8011396 <RegionAU915RxConfig+0x56>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	001a      	movs	r2, r3
 8011386:	2307      	movs	r3, #7
 8011388:	4013      	ands	r3, r2
 801138a:	4a32      	ldr	r2, [pc, #200]	; (8011454 <RegionAU915RxConfig+0x114>)
 801138c:	4353      	muls	r3, r2
 801138e:	4a32      	ldr	r2, [pc, #200]	; (8011458 <RegionAU915RxConfig+0x118>)
 8011390:	4694      	mov	ip, r2
 8011392:	4463      	add	r3, ip
 8011394:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 8011396:	230f      	movs	r3, #15
 8011398:	18fb      	adds	r3, r7, r3
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	b25b      	sxtb	r3, r3
 801139e:	4a2f      	ldr	r2, [pc, #188]	; (801145c <RegionAU915RxConfig+0x11c>)
 80113a0:	5cd2      	ldrb	r2, [r2, r3]
 80113a2:	250e      	movs	r5, #14
 80113a4:	197b      	adds	r3, r7, r5
 80113a6:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80113a8:	4b29      	ldr	r3, [pc, #164]	; (8011450 <RegionAU915RxConfig+0x110>)
 80113aa:	695b      	ldr	r3, [r3, #20]
 80113ac:	693a      	ldr	r2, [r7, #16]
 80113ae:	0010      	movs	r0, r2
 80113b0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80113b2:	4b27      	ldr	r3, [pc, #156]	; (8011450 <RegionAU915RxConfig+0x110>)
 80113b4:	6a1c      	ldr	r4, [r3, #32]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	789b      	ldrb	r3, [r3, #2]
 80113ba:	0018      	movs	r0, r3
 80113bc:	197b      	adds	r3, r7, r5
 80113be:	2100      	movs	r1, #0
 80113c0:	5659      	ldrsb	r1, [r3, r1]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	7c92      	ldrb	r2, [r2, #18]
 80113cc:	9209      	str	r2, [sp, #36]	; 0x24
 80113ce:	2201      	movs	r2, #1
 80113d0:	9208      	str	r2, [sp, #32]
 80113d2:	2200      	movs	r2, #0
 80113d4:	9207      	str	r2, [sp, #28]
 80113d6:	2200      	movs	r2, #0
 80113d8:	9206      	str	r2, [sp, #24]
 80113da:	2200      	movs	r2, #0
 80113dc:	9205      	str	r2, [sp, #20]
 80113de:	2200      	movs	r2, #0
 80113e0:	9204      	str	r2, [sp, #16]
 80113e2:	2200      	movs	r2, #0
 80113e4:	9203      	str	r2, [sp, #12]
 80113e6:	9302      	str	r3, [sp, #8]
 80113e8:	2308      	movs	r3, #8
 80113ea:	9301      	str	r3, [sp, #4]
 80113ec:	2300      	movs	r3, #0
 80113ee:	9300      	str	r3, [sp, #0]
 80113f0:	2301      	movs	r3, #1
 80113f2:	000a      	movs	r2, r1
 80113f4:	0001      	movs	r1, r0
 80113f6:	2001      	movs	r0, #1
 80113f8:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	7c5b      	ldrb	r3, [r3, #17]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d009      	beq.n	8011416 <RegionAU915RxConfig+0xd6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 8011402:	230f      	movs	r3, #15
 8011404:	18fb      	adds	r3, r7, r3
 8011406:	2200      	movs	r2, #0
 8011408:	569a      	ldrsb	r2, [r3, r2]
 801140a:	2317      	movs	r3, #23
 801140c:	18fb      	adds	r3, r7, r3
 801140e:	4914      	ldr	r1, [pc, #80]	; (8011460 <RegionAU915RxConfig+0x120>)
 8011410:	5c8a      	ldrb	r2, [r1, r2]
 8011412:	701a      	strb	r2, [r3, #0]
 8011414:	e008      	b.n	8011428 <RegionAU915RxConfig+0xe8>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 8011416:	230f      	movs	r3, #15
 8011418:	18fb      	adds	r3, r7, r3
 801141a:	2200      	movs	r2, #0
 801141c:	569a      	ldrsb	r2, [r3, r2]
 801141e:	2317      	movs	r3, #23
 8011420:	18fb      	adds	r3, r7, r3
 8011422:	4910      	ldr	r1, [pc, #64]	; (8011464 <RegionAU915RxConfig+0x124>)
 8011424:	5c8a      	ldrb	r2, [r1, r2]
 8011426:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8011428:	4b09      	ldr	r3, [pc, #36]	; (8011450 <RegionAU915RxConfig+0x110>)
 801142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801142c:	2217      	movs	r2, #23
 801142e:	18ba      	adds	r2, r7, r2
 8011430:	7812      	ldrb	r2, [r2, #0]
 8011432:	320d      	adds	r2, #13
 8011434:	b2d2      	uxtb	r2, r2
 8011436:	0011      	movs	r1, r2
 8011438:	2001      	movs	r0, #1
 801143a:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	220f      	movs	r2, #15
 8011440:	18ba      	adds	r2, r7, r2
 8011442:	7812      	ldrb	r2, [r2, #0]
 8011444:	701a      	strb	r2, [r3, #0]
    return true;
 8011446:	2301      	movs	r3, #1
}
 8011448:	0018      	movs	r0, r3
 801144a:	46bd      	mov	sp, r7
 801144c:	b006      	add	sp, #24
 801144e:	bdb0      	pop	{r4, r5, r7, pc}
 8011450:	080293d8 	.word	0x080293d8
 8011454:	000927c0 	.word	0x000927c0
 8011458:	370870a0 	.word	0x370870a0
 801145c:	080289b0 	.word	0x080289b0
 8011460:	08028a3c 	.word	0x08028a3c
 8011464:	08028a2c 	.word	0x08028a2c

08011468 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801146a:	b093      	sub	sp, #76	; 0x4c
 801146c:	af0a      	add	r7, sp, #40	; 0x28
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	785b      	ldrb	r3, [r3, #1]
 8011478:	b25b      	sxtb	r3, r3
 801147a:	001a      	movs	r2, r3
 801147c:	4b42      	ldr	r3, [pc, #264]	; (8011588 <RegionAU915TxConfig+0x120>)
 801147e:	5c9a      	ldrb	r2, [r3, r2]
 8011480:	231f      	movs	r3, #31
 8011482:	18fb      	adds	r3, r7, r3
 8011484:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2002      	movs	r0, #2
 801148a:	5618      	ldrsb	r0, [r3, r0]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	0019      	movs	r1, r3
 8011492:	4a3e      	ldr	r2, [pc, #248]	; (801158c <RegionAU915TxConfig+0x124>)
 8011494:	000b      	movs	r3, r1
 8011496:	005b      	lsls	r3, r3, #1
 8011498:	185b      	adds	r3, r3, r1
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	18d3      	adds	r3, r2, r3
 801149e:	3309      	adds	r3, #9
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	4a3a      	ldr	r2, [pc, #232]	; (801158c <RegionAU915TxConfig+0x124>)
 80114a4:	3336      	adds	r3, #54	; 0x36
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	18d3      	adds	r3, r2, r3
 80114aa:	3302      	adds	r3, #2
 80114ac:	2100      	movs	r1, #0
 80114ae:	5659      	ldrsb	r1, [r3, r1]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2201      	movs	r2, #1
 80114b4:	569a      	ldrsb	r2, [r3, r2]
 80114b6:	251e      	movs	r5, #30
 80114b8:	197c      	adds	r4, r7, r5
 80114ba:	4b35      	ldr	r3, [pc, #212]	; (8011590 <RegionAU915TxConfig+0x128>)
 80114bc:	f7ff fa8a 	bl	80109d4 <LimitTxPower>
 80114c0:	0003      	movs	r3, r0
 80114c2:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	785b      	ldrb	r3, [r3, #1]
 80114c8:	b25b      	sxtb	r3, r3
 80114ca:	0018      	movs	r0, r3
 80114cc:	f7ff fa64 	bl	8010998 <GetBandwidth>
 80114d0:	0003      	movs	r3, r0
 80114d2:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80114d4:	2617      	movs	r6, #23
 80114d6:	19bb      	adds	r3, r7, r6
 80114d8:	2200      	movs	r2, #0
 80114da:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6859      	ldr	r1, [r3, #4]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	689a      	ldr	r2, [r3, #8]
 80114e4:	19bc      	adds	r4, r7, r6
 80114e6:	197b      	adds	r3, r7, r5
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	b25b      	sxtb	r3, r3
 80114ec:	0018      	movs	r0, r3
 80114ee:	f003 fae3 	bl	8014ab8 <RegionCommonComputeTxPower>
 80114f2:	0003      	movs	r3, r0
 80114f4:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80114f6:	4b27      	ldr	r3, [pc, #156]	; (8011594 <RegionAU915TxConfig+0x12c>)
 80114f8:	695a      	ldr	r2, [r3, #20]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	0018      	movs	r0, r3
 8011500:	4922      	ldr	r1, [pc, #136]	; (801158c <RegionAU915TxConfig+0x124>)
 8011502:	0003      	movs	r3, r0
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	181b      	adds	r3, r3, r0
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	585b      	ldr	r3, [r3, r1]
 801150c:	0018      	movs	r0, r3
 801150e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8011510:	4b20      	ldr	r3, [pc, #128]	; (8011594 <RegionAU915TxConfig+0x12c>)
 8011512:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011514:	231f      	movs	r3, #31
 8011516:	18fb      	adds	r3, r7, r3
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	b25b      	sxtb	r3, r3
 801151c:	69b8      	ldr	r0, [r7, #24]
 801151e:	19ba      	adds	r2, r7, r6
 8011520:	2100      	movs	r1, #0
 8011522:	5651      	ldrsb	r1, [r2, r1]
 8011524:	4a1c      	ldr	r2, [pc, #112]	; (8011598 <RegionAU915TxConfig+0x130>)
 8011526:	9208      	str	r2, [sp, #32]
 8011528:	2200      	movs	r2, #0
 801152a:	9207      	str	r2, [sp, #28]
 801152c:	2200      	movs	r2, #0
 801152e:	9206      	str	r2, [sp, #24]
 8011530:	2200      	movs	r2, #0
 8011532:	9205      	str	r2, [sp, #20]
 8011534:	2201      	movs	r2, #1
 8011536:	9204      	str	r2, [sp, #16]
 8011538:	2200      	movs	r2, #0
 801153a:	9203      	str	r2, [sp, #12]
 801153c:	2208      	movs	r2, #8
 801153e:	9202      	str	r2, [sp, #8]
 8011540:	2201      	movs	r2, #1
 8011542:	9201      	str	r2, [sp, #4]
 8011544:	9300      	str	r3, [sp, #0]
 8011546:	0003      	movs	r3, r0
 8011548:	2200      	movs	r2, #0
 801154a:	2001      	movs	r0, #1
 801154c:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801154e:	4b11      	ldr	r3, [pc, #68]	; (8011594 <RegionAU915TxConfig+0x12c>)
 8011550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	8992      	ldrh	r2, [r2, #12]
 8011556:	b2d2      	uxtb	r2, r2
 8011558:	0011      	movs	r1, r2
 801155a:	2001      	movs	r0, #1
 801155c:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 801155e:	4b0d      	ldr	r3, [pc, #52]	; (8011594 <RegionAU915TxConfig+0x12c>)
 8011560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	8992      	ldrh	r2, [r2, #12]
 8011566:	b2d2      	uxtb	r2, r2
 8011568:	0011      	movs	r1, r2
 801156a:	2001      	movs	r0, #1
 801156c:	4798      	blx	r3
 801156e:	0002      	movs	r2, r0
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	601a      	str	r2, [r3, #0]
    *txPower = txPowerLimited;
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	197a      	adds	r2, r7, r5
 8011578:	7812      	ldrb	r2, [r2, #0]
 801157a:	701a      	strb	r2, [r3, #0]

    return true;
 801157c:	2301      	movs	r3, #1
}
 801157e:	0018      	movs	r0, r3
 8011580:	46bd      	mov	sp, r7
 8011582:	b009      	add	sp, #36	; 0x24
 8011584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011586:	46c0      	nop			; (mov r8, r8)
 8011588:	080289b0 	.word	0x080289b0
 801158c:	20000c90 	.word	0x20000c90
 8011590:	20001000 	.word	0x20001000
 8011594:	080293d8 	.word	0x080293d8
 8011598:	00000bb8 	.word	0x00000bb8

0801159c <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801159e:	b095      	sub	sp, #84	; 0x54
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
 80115a8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80115aa:	234f      	movs	r3, #79	; 0x4f
 80115ac:	18fb      	adds	r3, r7, r3
 80115ae:	2207      	movs	r2, #7
 80115b0:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80115b2:	234b      	movs	r3, #75	; 0x4b
 80115b4:	18fb      	adds	r3, r7, r3
 80115b6:	2200      	movs	r2, #0
 80115b8:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80115ba:	234e      	movs	r3, #78	; 0x4e
 80115bc:	18fb      	adds	r3, r7, r3
 80115be:	2200      	movs	r2, #0
 80115c0:	701a      	strb	r2, [r3, #0]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80115c2:	2438      	movs	r4, #56	; 0x38
 80115c4:	193b      	adds	r3, r7, r4
 80115c6:	0018      	movs	r0, r3
 80115c8:	230c      	movs	r3, #12
 80115ca:	001a      	movs	r2, r3
 80115cc:	2100      	movs	r1, #0
 80115ce:	f014 fc9b 	bl	8025f08 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 80115d2:	49a3      	ldr	r1, [pc, #652]	; (8011860 <RegionAU915LinkAdrReq+0x2c4>)
 80115d4:	193b      	adds	r3, r7, r4
 80115d6:	2206      	movs	r2, #6
 80115d8:	0018      	movs	r0, r3
 80115da:	f002 ff66 	bl	80144aa <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80115de:	e136      	b.n	801184e <RegionAU915LinkAdrReq+0x2b2>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	685a      	ldr	r2, [r3, #4]
 80115e4:	234e      	movs	r3, #78	; 0x4e
 80115e6:	18fb      	adds	r3, r7, r3
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	18d3      	adds	r3, r2, r3
 80115ec:	254b      	movs	r5, #75	; 0x4b
 80115ee:	197c      	adds	r4, r7, r5
 80115f0:	2244      	movs	r2, #68	; 0x44
 80115f2:	18ba      	adds	r2, r7, r2
 80115f4:	0011      	movs	r1, r2
 80115f6:	0018      	movs	r0, r3
 80115f8:	f003 f896 	bl	8014728 <RegionCommonParseLinkAdrReq>
 80115fc:	0003      	movs	r3, r0
 80115fe:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8011600:	197b      	adds	r3, r7, r5
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d100      	bne.n	801160a <RegionAU915LinkAdrReq+0x6e>
 8011608:	e12e      	b.n	8011868 <RegionAU915LinkAdrReq+0x2cc>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801160a:	224e      	movs	r2, #78	; 0x4e
 801160c:	18bb      	adds	r3, r7, r2
 801160e:	18b9      	adds	r1, r7, r2
 8011610:	224b      	movs	r2, #75	; 0x4b
 8011612:	18ba      	adds	r2, r7, r2
 8011614:	7809      	ldrb	r1, [r1, #0]
 8011616:	7812      	ldrb	r2, [r2, #0]
 8011618:	188a      	adds	r2, r1, r2
 801161a:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801161c:	234f      	movs	r3, #79	; 0x4f
 801161e:	18fb      	adds	r3, r7, r3
 8011620:	2207      	movs	r2, #7
 8011622:	701a      	strb	r2, [r3, #0]

        if( linkAdrParams.ChMaskCtrl == 6 )
 8011624:	2344      	movs	r3, #68	; 0x44
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	78db      	ldrb	r3, [r3, #3]
 801162a:	2b06      	cmp	r3, #6
 801162c:	d119      	bne.n	8011662 <RegionAU915LinkAdrReq+0xc6>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801162e:	2138      	movs	r1, #56	; 0x38
 8011630:	187b      	adds	r3, r7, r1
 8011632:	2201      	movs	r2, #1
 8011634:	4252      	negs	r2, r2
 8011636:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 8011638:	187b      	adds	r3, r7, r1
 801163a:	2201      	movs	r2, #1
 801163c:	4252      	negs	r2, r2
 801163e:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 8011640:	187b      	adds	r3, r7, r1
 8011642:	2201      	movs	r2, #1
 8011644:	4252      	negs	r2, r2
 8011646:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 8011648:	187b      	adds	r3, r7, r1
 801164a:	2201      	movs	r2, #1
 801164c:	4252      	negs	r2, r2
 801164e:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011650:	2344      	movs	r3, #68	; 0x44
 8011652:	18fb      	adds	r3, r7, r3
 8011654:	889b      	ldrh	r3, [r3, #4]
 8011656:	22ff      	movs	r2, #255	; 0xff
 8011658:	4013      	ands	r3, r2
 801165a:	b29a      	uxth	r2, r3
 801165c:	187b      	adds	r3, r7, r1
 801165e:	811a      	strh	r2, [r3, #8]
 8011660:	e0f5      	b.n	801184e <RegionAU915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8011662:	2344      	movs	r3, #68	; 0x44
 8011664:	18fb      	adds	r3, r7, r3
 8011666:	78db      	ldrb	r3, [r3, #3]
 8011668:	2b07      	cmp	r3, #7
 801166a:	d115      	bne.n	8011698 <RegionAU915LinkAdrReq+0xfc>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801166c:	2138      	movs	r1, #56	; 0x38
 801166e:	187b      	adds	r3, r7, r1
 8011670:	2200      	movs	r2, #0
 8011672:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0x0000;
 8011674:	187b      	adds	r3, r7, r1
 8011676:	2200      	movs	r2, #0
 8011678:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0x0000;
 801167a:	187b      	adds	r3, r7, r1
 801167c:	2200      	movs	r2, #0
 801167e:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0x0000;
 8011680:	187b      	adds	r3, r7, r1
 8011682:	2200      	movs	r2, #0
 8011684:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011686:	2344      	movs	r3, #68	; 0x44
 8011688:	18fb      	adds	r3, r7, r3
 801168a:	889b      	ldrh	r3, [r3, #4]
 801168c:	22ff      	movs	r2, #255	; 0xff
 801168e:	4013      	ands	r3, r2
 8011690:	b29a      	uxth	r2, r3
 8011692:	187b      	adds	r3, r7, r1
 8011694:	811a      	strh	r2, [r3, #8]
 8011696:	e0da      	b.n	801184e <RegionAU915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8011698:	2344      	movs	r3, #68	; 0x44
 801169a:	18fb      	adds	r3, r7, r3
 801169c:	78db      	ldrb	r3, [r3, #3]
 801169e:	2b05      	cmp	r3, #5
 80116a0:	d000      	beq.n	80116a4 <RegionAU915LinkAdrReq+0x108>
 80116a2:	e0ca      	b.n	801183a <RegionAU915LinkAdrReq+0x29e>
        {
            // Start value for comparision
            uint8_t bitMask = 1;
 80116a4:	234a      	movs	r3, #74	; 0x4a
 80116a6:	18fb      	adds	r3, r7, r3
 80116a8:	2201      	movs	r2, #1
 80116aa:	701a      	strb	r2, [r3, #0]

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80116ac:	234d      	movs	r3, #77	; 0x4d
 80116ae:	18fb      	adds	r3, r7, r3
 80116b0:	2200      	movs	r2, #0
 80116b2:	701a      	strb	r2, [r3, #0]

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80116b4:	234c      	movs	r3, #76	; 0x4c
 80116b6:	18fb      	adds	r3, r7, r3
 80116b8:	2200      	movs	r2, #0
 80116ba:	701a      	strb	r2, [r3, #0]
 80116bc:	e0b6      	b.n	801182c <RegionAU915LinkAdrReq+0x290>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80116be:	2344      	movs	r3, #68	; 0x44
 80116c0:	18fb      	adds	r3, r7, r3
 80116c2:	889b      	ldrh	r3, [r3, #4]
 80116c4:	001a      	movs	r2, r3
 80116c6:	23ff      	movs	r3, #255	; 0xff
 80116c8:	4013      	ands	r3, r2
 80116ca:	224a      	movs	r2, #74	; 0x4a
 80116cc:	18ba      	adds	r2, r7, r2
 80116ce:	7811      	ldrb	r1, [r2, #0]
 80116d0:	224c      	movs	r2, #76	; 0x4c
 80116d2:	18ba      	adds	r2, r7, r2
 80116d4:	7812      	ldrb	r2, [r2, #0]
 80116d6:	4091      	lsls	r1, r2
 80116d8:	000a      	movs	r2, r1
 80116da:	4013      	ands	r3, r2
 80116dc:	d04e      	beq.n	801177c <RegionAU915LinkAdrReq+0x1e0>
                {
                    if( ( i % 2 ) == 0 )
 80116de:	234c      	movs	r3, #76	; 0x4c
 80116e0:	18fb      	adds	r3, r7, r3
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	2201      	movs	r2, #1
 80116e6:	4013      	ands	r3, r2
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d120      	bne.n	8011730 <RegionAU915LinkAdrReq+0x194>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80116ee:	214d      	movs	r1, #77	; 0x4d
 80116f0:	187b      	adds	r3, r7, r1
 80116f2:	781a      	ldrb	r2, [r3, #0]
 80116f4:	2038      	movs	r0, #56	; 0x38
 80116f6:	183b      	adds	r3, r7, r0
 80116f8:	0052      	lsls	r2, r2, #1
 80116fa:	5ad3      	ldrh	r3, [r2, r3]
 80116fc:	187a      	adds	r2, r7, r1
 80116fe:	7812      	ldrb	r2, [r2, #0]
 8011700:	21ff      	movs	r1, #255	; 0xff
 8011702:	430b      	orrs	r3, r1
 8011704:	b299      	uxth	r1, r3
 8011706:	183b      	adds	r3, r7, r0
 8011708:	0052      	lsls	r2, r2, #1
 801170a:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801170c:	183b      	adds	r3, r7, r0
 801170e:	891b      	ldrh	r3, [r3, #8]
 8011710:	b21a      	sxth	r2, r3
 8011712:	234a      	movs	r3, #74	; 0x4a
 8011714:	18fb      	adds	r3, r7, r3
 8011716:	7819      	ldrb	r1, [r3, #0]
 8011718:	234c      	movs	r3, #76	; 0x4c
 801171a:	18fb      	adds	r3, r7, r3
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	4099      	lsls	r1, r3
 8011720:	000b      	movs	r3, r1
 8011722:	b21b      	sxth	r3, r3
 8011724:	4313      	orrs	r3, r2
 8011726:	b21b      	sxth	r3, r3
 8011728:	b29a      	uxth	r2, r3
 801172a:	183b      	adds	r3, r7, r0
 801172c:	811a      	strh	r2, [r3, #8]
 801172e:	e077      	b.n	8011820 <RegionAU915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8011730:	204d      	movs	r0, #77	; 0x4d
 8011732:	183b      	adds	r3, r7, r0
 8011734:	781a      	ldrb	r2, [r3, #0]
 8011736:	2438      	movs	r4, #56	; 0x38
 8011738:	193b      	adds	r3, r7, r4
 801173a:	0052      	lsls	r2, r2, #1
 801173c:	5ad3      	ldrh	r3, [r2, r3]
 801173e:	183a      	adds	r2, r7, r0
 8011740:	7812      	ldrb	r2, [r2, #0]
 8011742:	4948      	ldr	r1, [pc, #288]	; (8011864 <RegionAU915LinkAdrReq+0x2c8>)
 8011744:	430b      	orrs	r3, r1
 8011746:	b299      	uxth	r1, r3
 8011748:	193b      	adds	r3, r7, r4
 801174a:	0052      	lsls	r2, r2, #1
 801174c:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801174e:	193b      	adds	r3, r7, r4
 8011750:	891b      	ldrh	r3, [r3, #8]
 8011752:	b21a      	sxth	r2, r3
 8011754:	234a      	movs	r3, #74	; 0x4a
 8011756:	18fb      	adds	r3, r7, r3
 8011758:	7819      	ldrb	r1, [r3, #0]
 801175a:	234c      	movs	r3, #76	; 0x4c
 801175c:	18fb      	adds	r3, r7, r3
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	4099      	lsls	r1, r3
 8011762:	000b      	movs	r3, r1
 8011764:	b21b      	sxth	r3, r3
 8011766:	4313      	orrs	r3, r2
 8011768:	b21b      	sxth	r3, r3
 801176a:	b29a      	uxth	r2, r3
 801176c:	193b      	adds	r3, r7, r4
 801176e:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8011770:	183b      	adds	r3, r7, r0
 8011772:	781a      	ldrb	r2, [r3, #0]
 8011774:	183b      	adds	r3, r7, r0
 8011776:	3201      	adds	r2, #1
 8011778:	701a      	strb	r2, [r3, #0]
 801177a:	e051      	b.n	8011820 <RegionAU915LinkAdrReq+0x284>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801177c:	234c      	movs	r3, #76	; 0x4c
 801177e:	18fb      	adds	r3, r7, r3
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	2201      	movs	r2, #1
 8011784:	4013      	ands	r3, r2
 8011786:	b2db      	uxtb	r3, r3
 8011788:	2b00      	cmp	r3, #0
 801178a:	d122      	bne.n	80117d2 <RegionAU915LinkAdrReq+0x236>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801178c:	214d      	movs	r1, #77	; 0x4d
 801178e:	187b      	adds	r3, r7, r1
 8011790:	781a      	ldrb	r2, [r3, #0]
 8011792:	2038      	movs	r0, #56	; 0x38
 8011794:	183b      	adds	r3, r7, r0
 8011796:	0052      	lsls	r2, r2, #1
 8011798:	5ad3      	ldrh	r3, [r2, r3]
 801179a:	187a      	adds	r2, r7, r1
 801179c:	7812      	ldrb	r2, [r2, #0]
 801179e:	21ff      	movs	r1, #255	; 0xff
 80117a0:	438b      	bics	r3, r1
 80117a2:	b299      	uxth	r1, r3
 80117a4:	183b      	adds	r3, r7, r0
 80117a6:	0052      	lsls	r2, r2, #1
 80117a8:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80117aa:	183b      	adds	r3, r7, r0
 80117ac:	891b      	ldrh	r3, [r3, #8]
 80117ae:	b21b      	sxth	r3, r3
 80117b0:	224a      	movs	r2, #74	; 0x4a
 80117b2:	18ba      	adds	r2, r7, r2
 80117b4:	7811      	ldrb	r1, [r2, #0]
 80117b6:	224c      	movs	r2, #76	; 0x4c
 80117b8:	18ba      	adds	r2, r7, r2
 80117ba:	7812      	ldrb	r2, [r2, #0]
 80117bc:	4091      	lsls	r1, r2
 80117be:	000a      	movs	r2, r1
 80117c0:	b212      	sxth	r2, r2
 80117c2:	43d2      	mvns	r2, r2
 80117c4:	b212      	sxth	r2, r2
 80117c6:	4013      	ands	r3, r2
 80117c8:	b21b      	sxth	r3, r3
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	183b      	adds	r3, r7, r0
 80117ce:	811a      	strh	r2, [r3, #8]
 80117d0:	e026      	b.n	8011820 <RegionAU915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80117d2:	204d      	movs	r0, #77	; 0x4d
 80117d4:	183b      	adds	r3, r7, r0
 80117d6:	781a      	ldrb	r2, [r3, #0]
 80117d8:	2438      	movs	r4, #56	; 0x38
 80117da:	193b      	adds	r3, r7, r4
 80117dc:	0052      	lsls	r2, r2, #1
 80117de:	5ad3      	ldrh	r3, [r2, r3]
 80117e0:	183a      	adds	r2, r7, r0
 80117e2:	7812      	ldrb	r2, [r2, #0]
 80117e4:	21ff      	movs	r1, #255	; 0xff
 80117e6:	400b      	ands	r3, r1
 80117e8:	b299      	uxth	r1, r3
 80117ea:	193b      	adds	r3, r7, r4
 80117ec:	0052      	lsls	r2, r2, #1
 80117ee:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80117f0:	193b      	adds	r3, r7, r4
 80117f2:	891b      	ldrh	r3, [r3, #8]
 80117f4:	b21b      	sxth	r3, r3
 80117f6:	224a      	movs	r2, #74	; 0x4a
 80117f8:	18ba      	adds	r2, r7, r2
 80117fa:	7811      	ldrb	r1, [r2, #0]
 80117fc:	224c      	movs	r2, #76	; 0x4c
 80117fe:	18ba      	adds	r2, r7, r2
 8011800:	7812      	ldrb	r2, [r2, #0]
 8011802:	4091      	lsls	r1, r2
 8011804:	000a      	movs	r2, r1
 8011806:	b212      	sxth	r2, r2
 8011808:	43d2      	mvns	r2, r2
 801180a:	b212      	sxth	r2, r2
 801180c:	4013      	ands	r3, r2
 801180e:	b21b      	sxth	r3, r3
 8011810:	b29a      	uxth	r2, r3
 8011812:	193b      	adds	r3, r7, r4
 8011814:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8011816:	183b      	adds	r3, r7, r0
 8011818:	781a      	ldrb	r2, [r3, #0]
 801181a:	183b      	adds	r3, r7, r0
 801181c:	3201      	adds	r2, #1
 801181e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i <= 7; i++ )
 8011820:	214c      	movs	r1, #76	; 0x4c
 8011822:	187b      	adds	r3, r7, r1
 8011824:	781a      	ldrb	r2, [r3, #0]
 8011826:	187b      	adds	r3, r7, r1
 8011828:	3201      	adds	r2, #1
 801182a:	701a      	strb	r2, [r3, #0]
 801182c:	234c      	movs	r3, #76	; 0x4c
 801182e:	18fb      	adds	r3, r7, r3
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	2b07      	cmp	r3, #7
 8011834:	d800      	bhi.n	8011838 <RegionAU915LinkAdrReq+0x29c>
 8011836:	e742      	b.n	80116be <RegionAU915LinkAdrReq+0x122>
 8011838:	e009      	b.n	801184e <RegionAU915LinkAdrReq+0x2b2>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801183a:	2144      	movs	r1, #68	; 0x44
 801183c:	187b      	adds	r3, r7, r1
 801183e:	78db      	ldrb	r3, [r3, #3]
 8011840:	001a      	movs	r2, r3
 8011842:	187b      	adds	r3, r7, r1
 8011844:	8899      	ldrh	r1, [r3, #4]
 8011846:	2338      	movs	r3, #56	; 0x38
 8011848:	18fb      	adds	r3, r7, r3
 801184a:	0052      	lsls	r2, r2, #1
 801184c:	52d1      	strh	r1, [r2, r3]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	7a1b      	ldrb	r3, [r3, #8]
 8011852:	224e      	movs	r2, #78	; 0x4e
 8011854:	18ba      	adds	r2, r7, r2
 8011856:	7812      	ldrb	r2, [r2, #0]
 8011858:	429a      	cmp	r2, r3
 801185a:	d200      	bcs.n	801185e <RegionAU915LinkAdrReq+0x2c2>
 801185c:	e6c0      	b.n	80115e0 <RegionAU915LinkAdrReq+0x44>
 801185e:	e004      	b.n	801186a <RegionAU915LinkAdrReq+0x2ce>
 8011860:	20001000 	.word	0x20001000
 8011864:	ffffff00 	.word	0xffffff00
            break; // break loop, since no more request has been found
 8011868:	46c0      	nop			; (mov r8, r8)
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801186a:	2344      	movs	r3, #68	; 0x44
 801186c:	18fb      	adds	r3, r7, r3
 801186e:	785b      	ldrb	r3, [r3, #1]
 8011870:	b25b      	sxtb	r3, r3
 8011872:	2b05      	cmp	r3, #5
 8011874:	dc10      	bgt.n	8011898 <RegionAU915LinkAdrReq+0x2fc>
 8011876:	2338      	movs	r3, #56	; 0x38
 8011878:	18fb      	adds	r3, r7, r3
 801187a:	2204      	movs	r2, #4
 801187c:	2100      	movs	r1, #0
 801187e:	0018      	movs	r0, r3
 8011880:	f002 fdd2 	bl	8014428 <RegionCommonCountChannels>
 8011884:	0003      	movs	r3, r0
 8011886:	2b01      	cmp	r3, #1
 8011888:	d806      	bhi.n	8011898 <RegionAU915LinkAdrReq+0x2fc>
    {
        status &= 0xFE; // Channel mask KO
 801188a:	224f      	movs	r2, #79	; 0x4f
 801188c:	18bb      	adds	r3, r7, r2
 801188e:	18ba      	adds	r2, r7, r2
 8011890:	7812      	ldrb	r2, [r2, #0]
 8011892:	2101      	movs	r1, #1
 8011894:	438a      	bics	r2, r1
 8011896:	701a      	strb	r2, [r3, #0]
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011898:	2134      	movs	r1, #52	; 0x34
 801189a:	187b      	adds	r3, r7, r1
 801189c:	2201      	movs	r2, #1
 801189e:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	7a5a      	ldrb	r2, [r3, #9]
 80118a4:	187b      	adds	r3, r7, r1
 80118a6:	709a      	strb	r2, [r3, #2]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 80118a8:	187b      	adds	r3, r7, r1
 80118aa:	0018      	movs	r0, r3
 80118ac:	f7ff f9cc 	bl	8010c48 <RegionAU915GetPhyParam>
 80118b0:	0003      	movs	r3, r0
 80118b2:	001a      	movs	r2, r3
 80118b4:	2030      	movs	r0, #48	; 0x30
 80118b6:	183b      	adds	r3, r7, r0
 80118b8:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80118ba:	2110      	movs	r1, #16
 80118bc:	187b      	adds	r3, r7, r1
 80118be:	244f      	movs	r4, #79	; 0x4f
 80118c0:	193a      	adds	r2, r7, r4
 80118c2:	7812      	ldrb	r2, [r2, #0]
 80118c4:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	7a9a      	ldrb	r2, [r3, #10]
 80118ca:	187b      	adds	r3, r7, r1
 80118cc:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80118ce:	2544      	movs	r5, #68	; 0x44
 80118d0:	197b      	adds	r3, r7, r5
 80118d2:	2201      	movs	r2, #1
 80118d4:	569a      	ldrsb	r2, [r3, r2]
 80118d6:	187b      	adds	r3, r7, r1
 80118d8:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80118da:	197b      	adds	r3, r7, r5
 80118dc:	2202      	movs	r2, #2
 80118de:	569a      	ldrsb	r2, [r3, r2]
 80118e0:	187b      	adds	r3, r7, r1
 80118e2:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80118e4:	197b      	adds	r3, r7, r5
 80118e6:	781a      	ldrb	r2, [r3, #0]
 80118e8:	187b      	adds	r3, r7, r1
 80118ea:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	220b      	movs	r2, #11
 80118f0:	569a      	ldrsb	r2, [r3, r2]
 80118f2:	187b      	adds	r3, r7, r1
 80118f4:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	220c      	movs	r2, #12
 80118fa:	569a      	ldrsb	r2, [r3, r2]
 80118fc:	187b      	adds	r3, r7, r1
 80118fe:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	7b5b      	ldrb	r3, [r3, #13]
 8011904:	b25a      	sxtb	r2, r3
 8011906:	187b      	adds	r3, r7, r1
 8011908:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 801190a:	187b      	adds	r3, r7, r1
 801190c:	2248      	movs	r2, #72	; 0x48
 801190e:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8011910:	187b      	adds	r3, r7, r1
 8011912:	2238      	movs	r2, #56	; 0x38
 8011914:	18ba      	adds	r2, r7, r2
 8011916:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011918:	183b      	adds	r3, r7, r0
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	b25a      	sxtb	r2, r3
 801191e:	0008      	movs	r0, r1
 8011920:	183b      	adds	r3, r7, r0
 8011922:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 8011924:	183b      	adds	r3, r7, r0
 8011926:	220d      	movs	r2, #13
 8011928:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801192a:	183b      	adds	r3, r7, r0
 801192c:	4a40      	ldr	r2, [pc, #256]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 801192e:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 8011930:	183b      	adds	r3, r7, r0
 8011932:	220a      	movs	r2, #10
 8011934:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 8011936:	183b      	adds	r3, r7, r0
 8011938:	2200      	movs	r2, #0
 801193a:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801193c:	183b      	adds	r3, r7, r0
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	6812      	ldr	r2, [r2, #0]
 8011942:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011944:	0026      	movs	r6, r4
 8011946:	193c      	adds	r4, r7, r4
 8011948:	0029      	movs	r1, r5
 801194a:	187d      	adds	r5, r7, r1
 801194c:	187b      	adds	r3, r7, r1
 801194e:	1c9a      	adds	r2, r3, #2
 8011950:	187b      	adds	r3, r7, r1
 8011952:	1c59      	adds	r1, r3, #1
 8011954:	1838      	adds	r0, r7, r0
 8011956:	002b      	movs	r3, r5
 8011958:	f002 ff3c 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 801195c:	0003      	movs	r3, r0
 801195e:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011960:	0034      	movs	r4, r6
 8011962:	193b      	adds	r3, r7, r4
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	2b07      	cmp	r3, #7
 8011968:	d146      	bne.n	80119f8 <RegionAU915LinkAdrReq+0x45c>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 801196a:	2338      	movs	r3, #56	; 0x38
 801196c:	18f9      	adds	r1, r7, r3
 801196e:	4b31      	ldr	r3, [pc, #196]	; (8011a34 <RegionAU915LinkAdrReq+0x498>)
 8011970:	2206      	movs	r2, #6
 8011972:	0018      	movs	r0, r3
 8011974:	f002 fd99 	bl	80144aa <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 8011978:	4a2d      	ldr	r2, [pc, #180]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 801197a:	23df      	movs	r3, #223	; 0xdf
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	5ad3      	ldrh	r3, [r2, r3]
 8011980:	492b      	ldr	r1, [pc, #172]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 8011982:	22dc      	movs	r2, #220	; 0xdc
 8011984:	0092      	lsls	r2, r2, #2
 8011986:	5a8a      	ldrh	r2, [r1, r2]
 8011988:	4013      	ands	r3, r2
 801198a:	b299      	uxth	r1, r3
 801198c:	4a28      	ldr	r2, [pc, #160]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 801198e:	23df      	movs	r3, #223	; 0xdf
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 8011994:	4b26      	ldr	r3, [pc, #152]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 8011996:	4a28      	ldr	r2, [pc, #160]	; (8011a38 <RegionAU915LinkAdrReq+0x49c>)
 8011998:	5a9b      	ldrh	r3, [r3, r2]
 801199a:	4a25      	ldr	r2, [pc, #148]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 801199c:	4927      	ldr	r1, [pc, #156]	; (8011a3c <RegionAU915LinkAdrReq+0x4a0>)
 801199e:	5a52      	ldrh	r2, [r2, r1]
 80119a0:	4013      	ands	r3, r2
 80119a2:	b299      	uxth	r1, r3
 80119a4:	4b22      	ldr	r3, [pc, #136]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119a6:	4a24      	ldr	r2, [pc, #144]	; (8011a38 <RegionAU915LinkAdrReq+0x49c>)
 80119a8:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 80119aa:	4a21      	ldr	r2, [pc, #132]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119ac:	23e0      	movs	r3, #224	; 0xe0
 80119ae:	009b      	lsls	r3, r3, #2
 80119b0:	5ad3      	ldrh	r3, [r2, r3]
 80119b2:	491f      	ldr	r1, [pc, #124]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119b4:	22dd      	movs	r2, #221	; 0xdd
 80119b6:	0092      	lsls	r2, r2, #2
 80119b8:	5a8a      	ldrh	r2, [r1, r2]
 80119ba:	4013      	ands	r3, r2
 80119bc:	b299      	uxth	r1, r3
 80119be:	4a1c      	ldr	r2, [pc, #112]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119c0:	23e0      	movs	r3, #224	; 0xe0
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 80119c6:	4b1a      	ldr	r3, [pc, #104]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119c8:	4a1d      	ldr	r2, [pc, #116]	; (8011a40 <RegionAU915LinkAdrReq+0x4a4>)
 80119ca:	5a9b      	ldrh	r3, [r3, r2]
 80119cc:	4a18      	ldr	r2, [pc, #96]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119ce:	491d      	ldr	r1, [pc, #116]	; (8011a44 <RegionAU915LinkAdrReq+0x4a8>)
 80119d0:	5a52      	ldrh	r2, [r2, r1]
 80119d2:	4013      	ands	r3, r2
 80119d4:	b299      	uxth	r1, r3
 80119d6:	4b16      	ldr	r3, [pc, #88]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119d8:	4a19      	ldr	r2, [pc, #100]	; (8011a40 <RegionAU915LinkAdrReq+0x4a4>)
 80119da:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 80119dc:	4a14      	ldr	r2, [pc, #80]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119de:	23de      	movs	r3, #222	; 0xde
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	5ad1      	ldrh	r1, [r2, r3]
 80119e4:	4a12      	ldr	r2, [pc, #72]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119e6:	23e1      	movs	r3, #225	; 0xe1
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 80119ec:	4b10      	ldr	r3, [pc, #64]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119ee:	4a16      	ldr	r2, [pc, #88]	; (8011a48 <RegionAU915LinkAdrReq+0x4ac>)
 80119f0:	5a99      	ldrh	r1, [r3, r2]
 80119f2:	4b0f      	ldr	r3, [pc, #60]	; (8011a30 <RegionAU915LinkAdrReq+0x494>)
 80119f4:	4a15      	ldr	r2, [pc, #84]	; (8011a4c <RegionAU915LinkAdrReq+0x4b0>)
 80119f6:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80119f8:	2144      	movs	r1, #68	; 0x44
 80119fa:	187b      	adds	r3, r7, r1
 80119fc:	2201      	movs	r2, #1
 80119fe:	569a      	ldrsb	r2, [r3, r2]
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8011a04:	187b      	adds	r3, r7, r1
 8011a06:	2202      	movs	r2, #2
 8011a08:	569a      	ldrsb	r2, [r3, r2]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011a0e:	187b      	adds	r3, r7, r1
 8011a10:	781a      	ldrb	r2, [r3, #0]
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8011a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a18:	224e      	movs	r2, #78	; 0x4e
 8011a1a:	18ba      	adds	r2, r7, r2
 8011a1c:	7812      	ldrb	r2, [r2, #0]
 8011a1e:	701a      	strb	r2, [r3, #0]

    return status;
 8011a20:	234f      	movs	r3, #79	; 0x4f
 8011a22:	18fb      	adds	r3, r7, r3
 8011a24:	781b      	ldrb	r3, [r3, #0]
}
 8011a26:	0018      	movs	r0, r3
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	b015      	add	sp, #84	; 0x54
 8011a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a2e:	46c0      	nop			; (mov r8, r8)
 8011a30:	20000c90 	.word	0x20000c90
 8011a34:	20001000 	.word	0x20001000
 8011a38:	0000037e 	.word	0x0000037e
 8011a3c:	00000372 	.word	0x00000372
 8011a40:	00000382 	.word	0x00000382
 8011a44:	00000376 	.word	0x00000376
 8011a48:	0000037a 	.word	0x0000037a
 8011a4c:	00000386 	.word	0x00000386

08011a50 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8011a58:	230f      	movs	r3, #15
 8011a5a:	18fb      	adds	r3, r7, r3
 8011a5c:	2207      	movs	r2, #7
 8011a5e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	0018      	movs	r0, r3
 8011a66:	f7fe ffdd 	bl	8010a24 <VerifyRfFreq>
 8011a6a:	0003      	movs	r3, r0
 8011a6c:	001a      	movs	r2, r3
 8011a6e:	2301      	movs	r3, #1
 8011a70:	4053      	eors	r3, r2
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d006      	beq.n	8011a86 <RegionAU915RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8011a78:	220f      	movs	r2, #15
 8011a7a:	18bb      	adds	r3, r7, r2
 8011a7c:	18ba      	adds	r2, r7, r2
 8011a7e:	7812      	ldrb	r2, [r2, #0]
 8011a80:	2101      	movs	r1, #1
 8011a82:	438a      	bics	r2, r1
 8011a84:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	b25b      	sxtb	r3, r3
 8011a8c:	220d      	movs	r2, #13
 8011a8e:	2108      	movs	r1, #8
 8011a90:	0018      	movs	r0, r3
 8011a92:	f002 fc61 	bl	8014358 <RegionCommonValueInRange>
 8011a96:	1e03      	subs	r3, r0, #0
 8011a98:	d106      	bne.n	8011aa8 <RegionAU915RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8011a9a:	220f      	movs	r2, #15
 8011a9c:	18bb      	adds	r3, r7, r2
 8011a9e:	18ba      	adds	r2, r7, r2
 8011aa0:	7812      	ldrb	r2, [r2, #0]
 8011aa2:	2102      	movs	r1, #2
 8011aa4:	438a      	bics	r2, r1
 8011aa6:	701a      	strb	r2, [r3, #0]
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	b25b      	sxtb	r3, r3
 8011aae:	2b07      	cmp	r3, #7
 8011ab0:	d004      	beq.n	8011abc <RegionAU915RxParamSetupReq+0x6c>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	b25b      	sxtb	r3, r3
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 8011ab8:	2b0d      	cmp	r3, #13
 8011aba:	dd06      	ble.n	8011aca <RegionAU915RxParamSetupReq+0x7a>
    {
        status &= 0xFD; // Datarate KO
 8011abc:	220f      	movs	r2, #15
 8011abe:	18bb      	adds	r3, r7, r2
 8011ac0:	18ba      	adds	r2, r7, r2
 8011ac2:	7812      	ldrb	r2, [r2, #0]
 8011ac4:	2102      	movs	r1, #2
 8011ac6:	438a      	bics	r2, r1
 8011ac8:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	785b      	ldrb	r3, [r3, #1]
 8011ace:	b25b      	sxtb	r3, r3
 8011ad0:	2206      	movs	r2, #6
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	0018      	movs	r0, r3
 8011ad6:	f002 fc3f 	bl	8014358 <RegionCommonValueInRange>
 8011ada:	1e03      	subs	r3, r0, #0
 8011adc:	d106      	bne.n	8011aec <RegionAU915RxParamSetupReq+0x9c>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011ade:	220f      	movs	r2, #15
 8011ae0:	18bb      	adds	r3, r7, r2
 8011ae2:	18ba      	adds	r2, r7, r2
 8011ae4:	7812      	ldrb	r2, [r2, #0]
 8011ae6:	2104      	movs	r1, #4
 8011ae8:	438a      	bics	r2, r1
 8011aea:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8011aec:	230f      	movs	r3, #15
 8011aee:	18fb      	adds	r3, r7, r3
 8011af0:	781b      	ldrb	r3, [r3, #0]
}
 8011af2:	0018      	movs	r0, r3
 8011af4:	46bd      	mov	sp, r7
 8011af6:	b004      	add	sp, #16
 8011af8:	bd80      	pop	{r7, pc}

08011afa <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b082      	sub	sp, #8
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
    // Datarate and frequency KO
    return 0;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	0018      	movs	r0, r3
 8011b06:	46bd      	mov	sp, r7
 8011b08:	b002      	add	sp, #8
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	0018      	movs	r0, r3
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	b002      	add	sp, #8
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <RegionAU915DlChannelReq>:

uint8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b082      	sub	sp, #8
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
    return 0;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	0018      	movs	r0, r3
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	b002      	add	sp, #8
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <RegionAU915CalcBackOff>:
    trialsCount++;
    return currentDr;
}

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b088      	sub	sp, #32
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8011b38:	210c      	movs	r1, #12
 8011b3a:	187b      	adds	r3, r7, r1
 8011b3c:	4a12      	ldr	r2, [pc, #72]	; (8011b88 <RegionAU915CalcBackOff+0x58>)
 8011b3e:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8011b40:	187b      	adds	r3, r7, r1
 8011b42:	4a12      	ldr	r2, [pc, #72]	; (8011b8c <RegionAU915CalcBackOff+0x5c>)
 8011b44:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	785a      	ldrb	r2, [r3, #1]
 8011b4a:	187b      	adds	r3, r7, r1
 8011b4c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	781a      	ldrb	r2, [r3, #0]
 8011b52:	187b      	adds	r3, r7, r1
 8011b54:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	789a      	ldrb	r2, [r3, #2]
 8011b5a:	187b      	adds	r3, r7, r1
 8011b5c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	78da      	ldrb	r2, [r3, #3]
 8011b62:	187b      	adds	r3, r7, r1
 8011b64:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	685a      	ldr	r2, [r3, #4]
 8011b6a:	187b      	adds	r3, r7, r1
 8011b6c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	689a      	ldr	r2, [r3, #8]
 8011b72:	187b      	adds	r3, r7, r1
 8011b74:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8011b76:	187b      	adds	r3, r7, r1
 8011b78:	0018      	movs	r0, r3
 8011b7a:	f002 ffd5 	bl	8014b28 <RegionCommonCalcBackOff>
}
 8011b7e:	46c0      	nop			; (mov r8, r8)
 8011b80:	46bd      	mov	sp, r7
 8011b82:	b008      	add	sp, #32
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	46c0      	nop			; (mov r8, r8)
 8011b88:	20000c90 	.word	0x20000c90
 8011b8c:	20000ff0 	.word	0x20000ff0

08011b90 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011b90:	b5b0      	push	{r4, r5, r7, lr}
 8011b92:	b09c      	sub	sp, #112	; 0x70
 8011b94:	af02      	add	r7, sp, #8
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	607a      	str	r2, [r7, #4]
 8011b9c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8011b9e:	2367      	movs	r3, #103	; 0x67
 8011ba0:	18fb      	adds	r3, r7, r3
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8011ba6:	235f      	movs	r3, #95	; 0x5f
 8011ba8:	18fb      	adds	r3, r7, r3
 8011baa:	2200      	movs	r2, #0
 8011bac:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 8011bae:	2314      	movs	r3, #20
 8011bb0:	18fb      	adds	r3, r7, r3
 8011bb2:	0018      	movs	r0, r3
 8011bb4:	2348      	movs	r3, #72	; 0x48
 8011bb6:	001a      	movs	r2, r3
 8011bb8:	2100      	movs	r1, #0
 8011bba:	f014 f9a5 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	663b      	str	r3, [r7, #96]	; 0x60

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 8011bc2:	4b48      	ldr	r3, [pc, #288]	; (8011ce4 <RegionAU915NextChannel+0x154>)
 8011bc4:	2204      	movs	r2, #4
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	0018      	movs	r0, r3
 8011bca:	f002 fc2d 	bl	8014428 <RegionCommonCountChannels>
 8011bce:	1e03      	subs	r3, r0, #0
 8011bd0:	d105      	bne.n	8011bde <RegionAU915NextChannel+0x4e>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 8011bd2:	4945      	ldr	r1, [pc, #276]	; (8011ce8 <RegionAU915NextChannel+0x158>)
 8011bd4:	4b43      	ldr	r3, [pc, #268]	; (8011ce4 <RegionAU915NextChannel+0x154>)
 8011bd6:	2204      	movs	r2, #4
 8011bd8:	0018      	movs	r0, r3
 8011bda:	f002 fc66 	bl	80144aa <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	7a1b      	ldrb	r3, [r3, #8]
 8011be2:	b25b      	sxtb	r3, r3
 8011be4:	2b05      	cmp	r3, #5
 8011be6:	dd0f      	ble.n	8011c08 <RegionAU915NextChannel+0x78>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011be8:	4a40      	ldr	r2, [pc, #256]	; (8011cec <RegionAU915NextChannel+0x15c>)
 8011bea:	23e1      	movs	r3, #225	; 0xe1
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	5ad3      	ldrh	r3, [r2, r3]
 8011bf0:	001a      	movs	r2, r3
 8011bf2:	23ff      	movs	r3, #255	; 0xff
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	d107      	bne.n	8011c08 <RegionAU915NextChannel+0x78>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 8011bf8:	4a3c      	ldr	r2, [pc, #240]	; (8011cec <RegionAU915NextChannel+0x15c>)
 8011bfa:	23de      	movs	r3, #222	; 0xde
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	5ad1      	ldrh	r1, [r2, r3]
 8011c00:	4a3a      	ldr	r2, [pc, #232]	; (8011cec <RegionAU915NextChannel+0x15c>)
 8011c02:	23e1      	movs	r3, #225	; 0xe1
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	52d1      	strh	r1, [r2, r3]
        }
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681c      	ldr	r4, [r3, #0]
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	0018      	movs	r0, r3
 8011c12:	f00b f810 	bl	801cc36 <TimerGetElapsedTime>
 8011c16:	0003      	movs	r3, r0
 8011c18:	429c      	cmp	r4, r3
 8011c1a:	d821      	bhi.n	8011c60 <RegionAU915NextChannel+0xd0>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	7a58      	ldrb	r0, [r3, #9]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	7a99      	ldrb	r1, [r3, #10]
 8011c2a:	4a31      	ldr	r2, [pc, #196]	; (8011cf0 <RegionAU915NextChannel+0x160>)
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	f002 fc86 	bl	801453e <RegionCommonUpdateBandTimeOff>
 8011c32:	0003      	movs	r3, r0
 8011c34:	663b      	str	r3, [r7, #96]	; 0x60

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	7a1b      	ldrb	r3, [r3, #8]
 8011c3a:	b25b      	sxtb	r3, r3
 8011c3c:	b2d8      	uxtb	r0, r3
 8011c3e:	2367      	movs	r3, #103	; 0x67
 8011c40:	18fc      	adds	r4, r7, r3
 8011c42:	4d2b      	ldr	r5, [pc, #172]	; (8011cf0 <RegionAU915NextChannel+0x160>)
 8011c44:	4a29      	ldr	r2, [pc, #164]	; (8011cec <RegionAU915NextChannel+0x15c>)
 8011c46:	4927      	ldr	r1, [pc, #156]	; (8011ce4 <RegionAU915NextChannel+0x154>)
 8011c48:	235f      	movs	r3, #95	; 0x5f
 8011c4a:	18fb      	adds	r3, r7, r3
 8011c4c:	9301      	str	r3, [sp, #4]
 8011c4e:	2314      	movs	r3, #20
 8011c50:	18fb      	adds	r3, r7, r3
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	002b      	movs	r3, r5
 8011c56:	f7fe ff29 	bl	8010aac <CountNbOfEnabledChannels>
 8011c5a:	0003      	movs	r3, r0
 8011c5c:	7023      	strb	r3, [r4, #0]
 8011c5e:	e010      	b.n	8011c82 <RegionAU915NextChannel+0xf2>
                                                      NvmCtx.ChannelsMaskRemaining, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8011c60:	215f      	movs	r1, #95	; 0x5f
 8011c62:	187b      	adds	r3, r7, r1
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	3301      	adds	r3, #1
 8011c68:	b2da      	uxtb	r2, r3
 8011c6a:	187b      	adds	r3, r7, r1
 8011c6c:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681c      	ldr	r4, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	0018      	movs	r0, r3
 8011c78:	f00a ffdd 	bl	801cc36 <TimerGetElapsedTime>
 8011c7c:	0003      	movs	r3, r0
 8011c7e:	1ae3      	subs	r3, r4, r3
 8011c80:	663b      	str	r3, [r7, #96]	; 0x60
    }

    if( nbEnabledChannels > 0 )
 8011c82:	2367      	movs	r3, #103	; 0x67
 8011c84:	18fb      	adds	r3, r7, r3
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d019      	beq.n	8011cc0 <RegionAU915NextChannel+0x130>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011c8c:	2367      	movs	r3, #103	; 0x67
 8011c8e:	18fb      	adds	r3, r7, r3
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	0019      	movs	r1, r3
 8011c96:	2000      	movs	r0, #0
 8011c98:	f00a fff6 	bl	801cc88 <randr>
 8011c9c:	0002      	movs	r2, r0
 8011c9e:	2314      	movs	r3, #20
 8011ca0:	18fb      	adds	r3, r7, r3
 8011ca2:	5c9a      	ldrb	r2, [r3, r2]
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	701a      	strb	r2, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	7819      	ldrb	r1, [r3, #0]
 8011cac:	4b0d      	ldr	r3, [pc, #52]	; (8011ce4 <RegionAU915NextChannel+0x154>)
 8011cae:	2240      	movs	r2, #64	; 0x40
 8011cb0:	0018      	movs	r0, r3
 8011cb2:	f002 fb77 	bl	80143a4 <RegionCommonChanDisable>

        *time = 0;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	e00d      	b.n	8011cdc <RegionAU915NextChannel+0x14c>
    }
    else
    {
        if( delayTx > 0 )
 8011cc0:	235f      	movs	r3, #95	; 0x5f
 8011cc2:	18fb      	adds	r3, r7, r3
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d004      	beq.n	8011cd4 <RegionAU915NextChannel+0x144>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011cce:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8011cd0:	230b      	movs	r3, #11
 8011cd2:	e003      	b.n	8011cdc <RegionAU915NextChannel+0x14c>
        }
        // Datarate not supported by any channel
        *time = 0;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8011cda:	230c      	movs	r3, #12
    }
}
 8011cdc:	0018      	movs	r0, r3
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	b01a      	add	sp, #104	; 0x68
 8011ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8011ce4:	2000100c 	.word	0x2000100c
 8011ce8:	20001000 	.word	0x20001000
 8011cec:	20000c90 	.word	0x20000c90
 8011cf0:	20000ff0 	.word	0x20000ff0

08011cf4 <RegionAU915ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8011cf4:	b5b0      	push	{r4, r5, r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	0004      	movs	r4, r0
 8011cfc:	0008      	movs	r0, r1
 8011cfe:	0011      	movs	r1, r2
 8011d00:	1dfb      	adds	r3, r7, #7
 8011d02:	1c22      	adds	r2, r4, #0
 8011d04:	701a      	strb	r2, [r3, #0]
 8011d06:	1dbb      	adds	r3, r7, #6
 8011d08:	1c02      	adds	r2, r0, #0
 8011d0a:	701a      	strb	r2, [r3, #0]
 8011d0c:	1d7b      	adds	r3, r7, #5
 8011d0e:	1c0a      	adds	r2, r1, #0
 8011d10:	701a      	strb	r2, [r3, #0]
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 8011d12:	1dbb      	adds	r3, r7, #6
 8011d14:	2200      	movs	r2, #0
 8011d16:	569a      	ldrsb	r2, [r3, r2]
 8011d18:	1d7b      	adds	r3, r7, #5
 8011d1a:	2000      	movs	r0, #0
 8011d1c:	5618      	ldrsb	r0, [r3, r0]
 8011d1e:	250f      	movs	r5, #15
 8011d20:	1979      	adds	r1, r7, r5
 8011d22:	4c10      	ldr	r4, [pc, #64]	; (8011d64 <RegionAU915ApplyDrOffset+0x70>)
 8011d24:	0013      	movs	r3, r2
 8011d26:	005b      	lsls	r3, r3, #1
 8011d28:	189b      	adds	r3, r3, r2
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	18e3      	adds	r3, r4, r3
 8011d2e:	5c1b      	ldrb	r3, [r3, r0]
 8011d30:	700b      	strb	r3, [r1, #0]

    if( datarate < 0 )
 8011d32:	197b      	adds	r3, r7, r5
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	2b7f      	cmp	r3, #127	; 0x7f
 8011d38:	d90c      	bls.n	8011d54 <RegionAU915ApplyDrOffset+0x60>
    {
        if( downlinkDwellTime == 0 )
 8011d3a:	1dfb      	adds	r3, r7, #7
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d104      	bne.n	8011d4c <RegionAU915ApplyDrOffset+0x58>
        {
            datarate = AU915_TX_MIN_DATARATE;
 8011d42:	230f      	movs	r3, #15
 8011d44:	18fb      	adds	r3, r7, r3
 8011d46:	2200      	movs	r2, #0
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	e003      	b.n	8011d54 <RegionAU915ApplyDrOffset+0x60>
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 8011d4c:	230f      	movs	r3, #15
 8011d4e:	18fb      	adds	r3, r7, r3
 8011d50:	2202      	movs	r2, #2
 8011d52:	701a      	strb	r2, [r3, #0]
        }
    }
    return datarate;
 8011d54:	230f      	movs	r3, #15
 8011d56:	18fb      	adds	r3, r7, r3
 8011d58:	781b      	ldrb	r3, [r3, #0]
}
 8011d5a:	0018      	movs	r0, r3
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	b004      	add	sp, #16
 8011d60:	bdb0      	pop	{r4, r5, r7, pc}
 8011d62:	46c0      	nop			; (mov r8, r8)
 8011d64:	08028a00 	.word	0x08028a00

08011d68 <GetNextLowerTxDr>:
 */
static RegionCN470NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	0002      	movs	r2, r0
 8011d70:	1dfb      	adds	r3, r7, #7
 8011d72:	701a      	strb	r2, [r3, #0]
 8011d74:	1dbb      	adds	r3, r7, #6
 8011d76:	1c0a      	adds	r2, r1, #0
 8011d78:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8011d7a:	230f      	movs	r3, #15
 8011d7c:	18fb      	adds	r3, r7, r3
 8011d7e:	2200      	movs	r2, #0
 8011d80:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8011d82:	1dfa      	adds	r2, r7, #7
 8011d84:	1dbb      	adds	r3, r7, #6
 8011d86:	7812      	ldrb	r2, [r2, #0]
 8011d88:	b252      	sxtb	r2, r2
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	b25b      	sxtb	r3, r3
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d105      	bne.n	8011d9e <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8011d92:	230f      	movs	r3, #15
 8011d94:	18fb      	adds	r3, r7, r3
 8011d96:	1dba      	adds	r2, r7, #6
 8011d98:	7812      	ldrb	r2, [r2, #0]
 8011d9a:	701a      	strb	r2, [r3, #0]
 8011d9c:	e005      	b.n	8011daa <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8011d9e:	1dfb      	adds	r3, r7, #7
 8011da0:	781a      	ldrb	r2, [r3, #0]
 8011da2:	230f      	movs	r3, #15
 8011da4:	18fb      	adds	r3, r7, r3
 8011da6:	3a01      	subs	r2, #1
 8011da8:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8011daa:	230f      	movs	r3, #15
 8011dac:	18fb      	adds	r3, r7, r3
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	b25b      	sxtb	r3, r3
}
 8011db2:	0018      	movs	r0, r3
 8011db4:	46bd      	mov	sp, r7
 8011db6:	b004      	add	sp, #16
 8011db8:	bd80      	pop	{r7, pc}
	...

08011dbc <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsCN470[drIndex] )
 8011dc4:	4b09      	ldr	r3, [pc, #36]	; (8011dec <GetBandwidth+0x30>)
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	0092      	lsls	r2, r2, #2
 8011dca:	58d3      	ldr	r3, [r2, r3]
 8011dcc:	4a08      	ldr	r2, [pc, #32]	; (8011df0 <GetBandwidth+0x34>)
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d004      	beq.n	8011ddc <GetBandwidth+0x20>
 8011dd2:	4a08      	ldr	r2, [pc, #32]	; (8011df4 <GetBandwidth+0x38>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d003      	beq.n	8011de0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	e002      	b.n	8011de2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e000      	b.n	8011de2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8011de0:	2302      	movs	r3, #2
    }
}
 8011de2:	0018      	movs	r0, r3
 8011de4:	46bd      	mov	sp, r7
 8011de6:	b002      	add	sp, #8
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	46c0      	nop			; (mov r8, r8)
 8011dec:	08028b48 	.word	0x08028b48
 8011df0:	0003d090 	.word	0x0003d090
 8011df4:	0007a120 	.word	0x0007a120

08011df8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8011df8:	b590      	push	{r4, r7, lr}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	0004      	movs	r4, r0
 8011e00:	0008      	movs	r0, r1
 8011e02:	0011      	movs	r1, r2
 8011e04:	603b      	str	r3, [r7, #0]
 8011e06:	1dfb      	adds	r3, r7, #7
 8011e08:	1c22      	adds	r2, r4, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
 8011e0c:	1dbb      	adds	r3, r7, #6
 8011e0e:	1c02      	adds	r2, r0, #0
 8011e10:	701a      	strb	r2, [r3, #0]
 8011e12:	1d7b      	adds	r3, r7, #5
 8011e14:	1c0a      	adds	r2, r1, #0
 8011e16:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8011e18:	210f      	movs	r1, #15
 8011e1a:	187b      	adds	r3, r7, r1
 8011e1c:	1dfa      	adds	r2, r7, #7
 8011e1e:	7812      	ldrb	r2, [r2, #0]
 8011e20:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8011e22:	187a      	adds	r2, r7, r1
 8011e24:	1dbb      	adds	r3, r7, #6
 8011e26:	1df9      	adds	r1, r7, #7
 8011e28:	780c      	ldrb	r4, [r1, #0]
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	b258      	sxtb	r0, r3
 8011e2e:	b261      	sxtb	r1, r4
 8011e30:	4288      	cmp	r0, r1
 8011e32:	da00      	bge.n	8011e36 <LimitTxPower+0x3e>
 8011e34:	1c23      	adds	r3, r4, #0
 8011e36:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8011e38:	230f      	movs	r3, #15
 8011e3a:	18fb      	adds	r3, r7, r3
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	b25b      	sxtb	r3, r3
}
 8011e40:	0018      	movs	r0, r3
 8011e42:	46bd      	mov	sp, r7
 8011e44:	b005      	add	sp, #20
 8011e46:	bd90      	pop	{r4, r7, pc}

08011e48 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011e50:	4b18      	ldr	r3, [pc, #96]	; (8011eb4 <VerifyRfFreq+0x6c>)
 8011e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	0010      	movs	r0, r2
 8011e58:	4798      	blx	r3
 8011e5a:	0003      	movs	r3, r0
 8011e5c:	001a      	movs	r2, r3
 8011e5e:	2301      	movs	r3, #1
 8011e60:	4053      	eors	r3, r2
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d001      	beq.n	8011e6c <VerifyRfFreq+0x24>
    {
        return false;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	e01e      	b.n	8011eaa <VerifyRfFreq+0x62>
    }

    // Rx frequencies
    if( ( freq < CN470_FIRST_RX1_CHANNEL ) ||
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	4a12      	ldr	r2, [pc, #72]	; (8011eb8 <VerifyRfFreq+0x70>)
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d90d      	bls.n	8011e90 <VerifyRfFreq+0x48>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	4a11      	ldr	r2, [pc, #68]	; (8011ebc <VerifyRfFreq+0x74>)
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d809      	bhi.n	8011e90 <VerifyRfFreq+0x48>
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) CN470_FIRST_RX1_CHANNEL ) % ( uint32_t ) CN470_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	4a10      	ldr	r2, [pc, #64]	; (8011ec0 <VerifyRfFreq+0x78>)
 8011e80:	4694      	mov	ip, r2
 8011e82:	4463      	add	r3, ip
 8011e84:	490f      	ldr	r1, [pc, #60]	; (8011ec4 <VerifyRfFreq+0x7c>)
 8011e86:	0018      	movs	r0, r3
 8011e88:	f7ee f9cc 	bl	8000224 <__aeabi_uidivmod>
 8011e8c:	1e0b      	subs	r3, r1, #0
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
 8011e8e:	d001      	beq.n	8011e94 <VerifyRfFreq+0x4c>
    {
        return false;
 8011e90:	2300      	movs	r3, #0
 8011e92:	e00a      	b.n	8011eaa <VerifyRfFreq+0x62>
    }

    // Test for frequency range - take RX and TX freqencies into account
    if( ( freq < 470300000 ) ||  ( freq > 509700000 ) )
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4a0c      	ldr	r2, [pc, #48]	; (8011ec8 <VerifyRfFreq+0x80>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d903      	bls.n	8011ea4 <VerifyRfFreq+0x5c>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a07      	ldr	r2, [pc, #28]	; (8011ebc <VerifyRfFreq+0x74>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d901      	bls.n	8011ea8 <VerifyRfFreq+0x60>
    {
        return false;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	e000      	b.n	8011eaa <VerifyRfFreq+0x62>
    }
    return true;
 8011ea8:	2301      	movs	r3, #1
}
 8011eaa:	0018      	movs	r0, r3
 8011eac:	46bd      	mov	sp, r7
 8011eae:	b002      	add	sp, #8
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	46c0      	nop			; (mov r8, r8)
 8011eb4:	080293d8 	.word	0x080293d8
 8011eb8:	1dd1f8df 	.word	0x1dd1f8df
 8011ebc:	1e6167a0 	.word	0x1e6167a0
 8011ec0:	e22e0720 	.word	0xe22e0720
 8011ec4:	00030d40 	.word	0x00030d40
 8011ec8:	1c08355f 	.word	0x1c08355f

08011ecc <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8011ecc:	b5b0      	push	{r4, r5, r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]
 8011ed6:	603b      	str	r3, [r7, #0]
 8011ed8:	230f      	movs	r3, #15
 8011eda:	18fb      	adds	r3, r7, r3
 8011edc:	1c02      	adds	r2, r0, #0
 8011ede:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8011ee0:	2317      	movs	r3, #23
 8011ee2:	18fb      	adds	r3, r7, r3
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8011ee8:	2316      	movs	r3, #22
 8011eea:	18fb      	adds	r3, r7, r3
 8011eec:	2200      	movs	r2, #0
 8011eee:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < CN470_MAX_NB_CHANNELS; i += 16, k++ )
 8011ef0:	2315      	movs	r3, #21
 8011ef2:	18fb      	adds	r3, r7, r3
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	701a      	strb	r2, [r3, #0]
 8011ef8:	2314      	movs	r3, #20
 8011efa:	18fb      	adds	r3, r7, r3
 8011efc:	2200      	movs	r2, #0
 8011efe:	701a      	strb	r2, [r3, #0]
 8011f00:	e0a0      	b.n	8012044 <CountNbOfEnabledChannels+0x178>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8011f02:	2313      	movs	r3, #19
 8011f04:	18fb      	adds	r3, r7, r3
 8011f06:	2200      	movs	r2, #0
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	e089      	b.n	8012020 <CountNbOfEnabledChannels+0x154>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8011f0c:	2314      	movs	r3, #20
 8011f0e:	18fb      	adds	r3, r7, r3
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	005b      	lsls	r3, r3, #1
 8011f14:	68ba      	ldr	r2, [r7, #8]
 8011f16:	18d3      	adds	r3, r2, r3
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	001a      	movs	r2, r3
 8011f1c:	2313      	movs	r3, #19
 8011f1e:	18fb      	adds	r3, r7, r3
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	411a      	asrs	r2, r3
 8011f24:	0013      	movs	r3, r2
 8011f26:	2201      	movs	r2, #1
 8011f28:	4013      	ands	r3, r2
 8011f2a:	d073      	beq.n	8012014 <CountNbOfEnabledChannels+0x148>
            {
                if( channels[i + j].Frequency == 0 )
 8011f2c:	2315      	movs	r3, #21
 8011f2e:	18fb      	adds	r3, r7, r3
 8011f30:	781a      	ldrb	r2, [r3, #0]
 8011f32:	2313      	movs	r3, #19
 8011f34:	18fb      	adds	r3, r7, r3
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	18d3      	adds	r3, r2, r3
 8011f3a:	001a      	movs	r2, r3
 8011f3c:	0013      	movs	r3, r2
 8011f3e:	005b      	lsls	r3, r3, #1
 8011f40:	189b      	adds	r3, r3, r2
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	001a      	movs	r2, r3
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	189b      	adds	r3, r3, r2
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d05e      	beq.n	801200e <CountNbOfEnabledChannels+0x142>
                { // Check if the channel is enabled
                    continue;
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8011f50:	230f      	movs	r3, #15
 8011f52:	18fb      	adds	r3, r7, r3
 8011f54:	2000      	movs	r0, #0
 8011f56:	5618      	ldrsb	r0, [r3, r0]
 8011f58:	2415      	movs	r4, #21
 8011f5a:	193b      	adds	r3, r7, r4
 8011f5c:	781a      	ldrb	r2, [r3, #0]
 8011f5e:	2513      	movs	r5, #19
 8011f60:	197b      	adds	r3, r7, r5
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	18d3      	adds	r3, r2, r3
 8011f66:	001a      	movs	r2, r3
 8011f68:	0013      	movs	r3, r2
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	189b      	adds	r3, r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	001a      	movs	r2, r3
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	189b      	adds	r3, r3, r2
 8011f76:	7a1b      	ldrb	r3, [r3, #8]
 8011f78:	011b      	lsls	r3, r3, #4
 8011f7a:	b25b      	sxtb	r3, r3
 8011f7c:	111b      	asrs	r3, r3, #4
 8011f7e:	b25b      	sxtb	r3, r3
 8011f80:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8011f82:	193b      	adds	r3, r7, r4
 8011f84:	781a      	ldrb	r2, [r3, #0]
 8011f86:	197b      	adds	r3, r7, r5
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	18d3      	adds	r3, r2, r3
 8011f8c:	001a      	movs	r2, r3
 8011f8e:	0013      	movs	r3, r2
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	189b      	adds	r3, r3, r2
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	001a      	movs	r2, r3
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	189b      	adds	r3, r3, r2
 8011f9c:	7a1b      	ldrb	r3, [r3, #8]
 8011f9e:	b25b      	sxtb	r3, r3
 8011fa0:	111b      	asrs	r3, r3, #4
 8011fa2:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8011fa4:	001a      	movs	r2, r3
 8011fa6:	f002 f9d7 	bl	8014358 <RegionCommonValueInRange>
 8011faa:	1e03      	subs	r3, r0, #0
 8011fac:	d031      	beq.n	8012012 <CountNbOfEnabledChannels+0x146>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8011fae:	2315      	movs	r3, #21
 8011fb0:	18fb      	adds	r3, r7, r3
 8011fb2:	781a      	ldrb	r2, [r3, #0]
 8011fb4:	2313      	movs	r3, #19
 8011fb6:	18fb      	adds	r3, r7, r3
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	18d3      	adds	r3, r2, r3
 8011fbc:	001a      	movs	r2, r3
 8011fbe:	0013      	movs	r3, r2
 8011fc0:	005b      	lsls	r3, r3, #1
 8011fc2:	189b      	adds	r3, r3, r2
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	001a      	movs	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	189b      	adds	r3, r3, r2
 8011fcc:	7a5b      	ldrb	r3, [r3, #9]
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	683a      	ldr	r2, [r7, #0]
 8011fd2:	18d3      	adds	r3, r2, r3
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d006      	beq.n	8011fe8 <CountNbOfEnabledChannels+0x11c>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8011fda:	2116      	movs	r1, #22
 8011fdc:	187b      	adds	r3, r7, r1
 8011fde:	781a      	ldrb	r2, [r3, #0]
 8011fe0:	187b      	adds	r3, r7, r1
 8011fe2:	3201      	adds	r2, #1
 8011fe4:	701a      	strb	r2, [r3, #0]
                    continue;
 8011fe6:	e015      	b.n	8012014 <CountNbOfEnabledChannels+0x148>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8011fe8:	2217      	movs	r2, #23
 8011fea:	18bb      	adds	r3, r7, r2
 8011fec:	781b      	ldrb	r3, [r3, #0]
 8011fee:	18ba      	adds	r2, r7, r2
 8011ff0:	1c59      	adds	r1, r3, #1
 8011ff2:	7011      	strb	r1, [r2, #0]
 8011ff4:	001a      	movs	r2, r3
 8011ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff8:	189b      	adds	r3, r3, r2
 8011ffa:	2215      	movs	r2, #21
 8011ffc:	18b9      	adds	r1, r7, r2
 8011ffe:	2213      	movs	r2, #19
 8012000:	18ba      	adds	r2, r7, r2
 8012002:	7809      	ldrb	r1, [r1, #0]
 8012004:	7812      	ldrb	r2, [r2, #0]
 8012006:	188a      	adds	r2, r1, r2
 8012008:	b2d2      	uxtb	r2, r2
 801200a:	701a      	strb	r2, [r3, #0]
 801200c:	e002      	b.n	8012014 <CountNbOfEnabledChannels+0x148>
                    continue;
 801200e:	46c0      	nop			; (mov r8, r8)
 8012010:	e000      	b.n	8012014 <CountNbOfEnabledChannels+0x148>
                    continue;
 8012012:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8012014:	2113      	movs	r1, #19
 8012016:	187b      	adds	r3, r7, r1
 8012018:	781a      	ldrb	r2, [r3, #0]
 801201a:	187b      	adds	r3, r7, r1
 801201c:	3201      	adds	r2, #1
 801201e:	701a      	strb	r2, [r3, #0]
 8012020:	2313      	movs	r3, #19
 8012022:	18fb      	adds	r3, r7, r3
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	2b0f      	cmp	r3, #15
 8012028:	d800      	bhi.n	801202c <CountNbOfEnabledChannels+0x160>
 801202a:	e76f      	b.n	8011f0c <CountNbOfEnabledChannels+0x40>
    for( uint8_t i = 0, k = 0; i < CN470_MAX_NB_CHANNELS; i += 16, k++ )
 801202c:	2215      	movs	r2, #21
 801202e:	18bb      	adds	r3, r7, r2
 8012030:	18ba      	adds	r2, r7, r2
 8012032:	7812      	ldrb	r2, [r2, #0]
 8012034:	3210      	adds	r2, #16
 8012036:	701a      	strb	r2, [r3, #0]
 8012038:	2114      	movs	r1, #20
 801203a:	187b      	adds	r3, r7, r1
 801203c:	781a      	ldrb	r2, [r3, #0]
 801203e:	187b      	adds	r3, r7, r1
 8012040:	3201      	adds	r2, #1
 8012042:	701a      	strb	r2, [r3, #0]
 8012044:	2315      	movs	r3, #21
 8012046:	18fb      	adds	r3, r7, r3
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2b5f      	cmp	r3, #95	; 0x5f
 801204c:	d800      	bhi.n	8012050 <CountNbOfEnabledChannels+0x184>
 801204e:	e758      	b.n	8011f02 <CountNbOfEnabledChannels+0x36>
            }
        }
    }

    *delayTx = delayTransmission;
 8012050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012052:	2216      	movs	r2, #22
 8012054:	18ba      	adds	r2, r7, r2
 8012056:	7812      	ldrb	r2, [r2, #0]
 8012058:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801205a:	2317      	movs	r3, #23
 801205c:	18fb      	adds	r3, r7, r3
 801205e:	781b      	ldrb	r3, [r3, #0]
}
 8012060:	0018      	movs	r0, r3
 8012062:	46bd      	mov	sp, r7
 8012064:	b006      	add	sp, #24
 8012066:	bdb0      	pop	{r4, r5, r7, pc}

08012068 <RegionCN470GetPhyParam>:

PhyParam_t RegionCN470GetPhyParam( GetPhyParams_t* getPhy )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8012070:	2308      	movs	r3, #8
 8012072:	18fb      	adds	r3, r7, r3
 8012074:	2200      	movs	r2, #0
 8012076:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b34      	cmp	r3, #52	; 0x34
 801207e:	d900      	bls.n	8012082 <RegionCN470GetPhyParam+0x1a>
 8012080:	e0d2      	b.n	8012228 <RegionCN470GetPhyParam+0x1c0>
 8012082:	009a      	lsls	r2, r3, #2
 8012084:	4b70      	ldr	r3, [pc, #448]	; (8012248 <RegionCN470GetPhyParam+0x1e0>)
 8012086:	18d3      	adds	r3, r2, r3
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = CN470_RX_MIN_DATARATE;
 801208c:	2308      	movs	r3, #8
 801208e:	18fb      	adds	r3, r7, r3
 8012090:	2200      	movs	r2, #0
 8012092:	601a      	str	r2, [r3, #0]
            break;
 8012094:	e0c9      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = CN470_TX_MIN_DATARATE;
 8012096:	2308      	movs	r3, #8
 8012098:	18fb      	adds	r3, r7, r3
 801209a:	2200      	movs	r2, #0
 801209c:	601a      	str	r2, [r3, #0]
            break;
 801209e:	e0c4      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = CN470_DEFAULT_DATARATE;
 80120a0:	2308      	movs	r3, #8
 80120a2:	18fb      	adds	r3, r7, r3
 80120a4:	2200      	movs	r2, #0
 80120a6:	601a      	str	r2, [r3, #0]
            break;
 80120a8:	e0bf      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, CN470_TX_MIN_DATARATE );
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	785b      	ldrb	r3, [r3, #1]
 80120ae:	b25b      	sxtb	r3, r3
 80120b0:	2100      	movs	r1, #0
 80120b2:	0018      	movs	r0, r3
 80120b4:	f7ff fe58 	bl	8011d68 <GetNextLowerTxDr>
 80120b8:	0003      	movs	r3, r0
 80120ba:	001a      	movs	r2, r3
 80120bc:	2308      	movs	r3, #8
 80120be:	18fb      	adds	r3, r7, r3
 80120c0:	601a      	str	r2, [r3, #0]
            break;
 80120c2:	e0b2      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = CN470_MAX_TX_POWER;
 80120c4:	2308      	movs	r3, #8
 80120c6:	18fb      	adds	r3, r7, r3
 80120c8:	2200      	movs	r2, #0
 80120ca:	601a      	str	r2, [r3, #0]
            break;
 80120cc:	e0ad      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = CN470_DEFAULT_TX_POWER;
 80120ce:	2308      	movs	r3, #8
 80120d0:	18fb      	adds	r3, r7, r3
 80120d2:	2200      	movs	r2, #0
 80120d4:	601a      	str	r2, [r3, #0]
            break;
 80120d6:	e0a8      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = CN470_ADR_ACK_LIMIT;
 80120d8:	2308      	movs	r3, #8
 80120da:	18fb      	adds	r3, r7, r3
 80120dc:	2240      	movs	r2, #64	; 0x40
 80120de:	601a      	str	r2, [r3, #0]
            break;
 80120e0:	e0a3      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = CN470_ADR_ACK_DELAY;
 80120e2:	2308      	movs	r3, #8
 80120e4:	18fb      	adds	r3, r7, r3
 80120e6:	2220      	movs	r2, #32
 80120e8:	601a      	str	r2, [r3, #0]
            break;
 80120ea:	e09e      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateCN470[getPhy->Datarate];
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	785b      	ldrb	r3, [r3, #1]
 80120f0:	b25b      	sxtb	r3, r3
 80120f2:	001a      	movs	r2, r3
 80120f4:	4b55      	ldr	r3, [pc, #340]	; (801224c <RegionCN470GetPhyParam+0x1e4>)
 80120f6:	5c9b      	ldrb	r3, [r3, r2]
 80120f8:	001a      	movs	r2, r3
 80120fa:	2308      	movs	r3, #8
 80120fc:	18fb      	adds	r3, r7, r3
 80120fe:	601a      	str	r2, [r3, #0]
            break;
 8012100:	e093      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN470[getPhy->Datarate];
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	785b      	ldrb	r3, [r3, #1]
 8012106:	b25b      	sxtb	r3, r3
 8012108:	001a      	movs	r2, r3
 801210a:	4b51      	ldr	r3, [pc, #324]	; (8012250 <RegionCN470GetPhyParam+0x1e8>)
 801210c:	5c9b      	ldrb	r3, [r3, r2]
 801210e:	001a      	movs	r2, r3
 8012110:	2308      	movs	r3, #8
 8012112:	18fb      	adds	r3, r7, r3
 8012114:	601a      	str	r2, [r3, #0]
            break;
 8012116:	e088      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = CN470_DUTY_CYCLE_ENABLED;
 8012118:	2308      	movs	r3, #8
 801211a:	18fb      	adds	r3, r7, r3
 801211c:	2200      	movs	r2, #0
 801211e:	601a      	str	r2, [r3, #0]
            break;
 8012120:	e083      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = CN470_MAX_RX_WINDOW;
 8012122:	2308      	movs	r3, #8
 8012124:	18fb      	adds	r3, r7, r3
 8012126:	4a4b      	ldr	r2, [pc, #300]	; (8012254 <RegionCN470GetPhyParam+0x1ec>)
 8012128:	601a      	str	r2, [r3, #0]
            break;
 801212a:	e07e      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = CN470_RECEIVE_DELAY1;
 801212c:	2308      	movs	r3, #8
 801212e:	18fb      	adds	r3, r7, r3
 8012130:	22fa      	movs	r2, #250	; 0xfa
 8012132:	0092      	lsls	r2, r2, #2
 8012134:	601a      	str	r2, [r3, #0]
            break;
 8012136:	e078      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = CN470_RECEIVE_DELAY2;
 8012138:	2308      	movs	r3, #8
 801213a:	18fb      	adds	r3, r7, r3
 801213c:	22fa      	movs	r2, #250	; 0xfa
 801213e:	00d2      	lsls	r2, r2, #3
 8012140:	601a      	str	r2, [r3, #0]
            break;
 8012142:	e072      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = CN470_JOIN_ACCEPT_DELAY1;
 8012144:	2308      	movs	r3, #8
 8012146:	18fb      	adds	r3, r7, r3
 8012148:	4a43      	ldr	r2, [pc, #268]	; (8012258 <RegionCN470GetPhyParam+0x1f0>)
 801214a:	601a      	str	r2, [r3, #0]
            break;
 801214c:	e06d      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = CN470_JOIN_ACCEPT_DELAY2;
 801214e:	2308      	movs	r3, #8
 8012150:	18fb      	adds	r3, r7, r3
 8012152:	4a42      	ldr	r2, [pc, #264]	; (801225c <RegionCN470GetPhyParam+0x1f4>)
 8012154:	601a      	str	r2, [r3, #0]
            break;
 8012156:	e068      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = CN470_MAX_FCNT_GAP;
 8012158:	2308      	movs	r3, #8
 801215a:	18fb      	adds	r3, r7, r3
 801215c:	2280      	movs	r2, #128	; 0x80
 801215e:	01d2      	lsls	r2, r2, #7
 8012160:	601a      	str	r2, [r3, #0]
            break;
 8012162:	e062      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( CN470_ACKTIMEOUT + randr( -CN470_ACK_TIMEOUT_RND, CN470_ACK_TIMEOUT_RND ) );
 8012164:	23fa      	movs	r3, #250	; 0xfa
 8012166:	009b      	lsls	r3, r3, #2
 8012168:	4a3d      	ldr	r2, [pc, #244]	; (8012260 <RegionCN470GetPhyParam+0x1f8>)
 801216a:	0019      	movs	r1, r3
 801216c:	0010      	movs	r0, r2
 801216e:	f00a fd8b 	bl	801cc88 <randr>
 8012172:	0003      	movs	r3, r0
 8012174:	22fa      	movs	r2, #250	; 0xfa
 8012176:	00d2      	lsls	r2, r2, #3
 8012178:	4694      	mov	ip, r2
 801217a:	4463      	add	r3, ip
 801217c:	001a      	movs	r2, r3
 801217e:	2308      	movs	r3, #8
 8012180:	18fb      	adds	r3, r7, r3
 8012182:	601a      	str	r2, [r3, #0]
            break;
 8012184:	e051      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = CN470_DEFAULT_RX1_DR_OFFSET;
 8012186:	2308      	movs	r3, #8
 8012188:	18fb      	adds	r3, r7, r3
 801218a:	2200      	movs	r2, #0
 801218c:	601a      	str	r2, [r3, #0]
            break;
 801218e:	e04c      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = CN470_RX_WND_2_FREQ;
 8012190:	2308      	movs	r3, #8
 8012192:	18fb      	adds	r3, r7, r3
 8012194:	4a33      	ldr	r2, [pc, #204]	; (8012264 <RegionCN470GetPhyParam+0x1fc>)
 8012196:	601a      	str	r2, [r3, #0]
            break;
 8012198:	e047      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = CN470_RX_WND_2_DR;
 801219a:	2308      	movs	r3, #8
 801219c:	18fb      	adds	r3, r7, r3
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
            break;
 80121a2:	e042      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80121a4:	2308      	movs	r3, #8
 80121a6:	18fb      	adds	r3, r7, r3
 80121a8:	4a2f      	ldr	r2, [pc, #188]	; (8012268 <RegionCN470GetPhyParam+0x200>)
 80121aa:	601a      	str	r2, [r3, #0]
            break;
 80121ac:	e03d      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80121ae:	2308      	movs	r3, #8
 80121b0:	18fb      	adds	r3, r7, r3
 80121b2:	4a2e      	ldr	r2, [pc, #184]	; (801226c <RegionCN470GetPhyParam+0x204>)
 80121b4:	601a      	str	r2, [r3, #0]
            break;
 80121b6:	e038      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = CN470_MAX_NB_CHANNELS;
 80121b8:	2308      	movs	r3, #8
 80121ba:	18fb      	adds	r3, r7, r3
 80121bc:	2260      	movs	r2, #96	; 0x60
 80121be:	601a      	str	r2, [r3, #0]
            break;
 80121c0:	e033      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80121c2:	2308      	movs	r3, #8
 80121c4:	18fb      	adds	r3, r7, r3
 80121c6:	4a2a      	ldr	r2, [pc, #168]	; (8012270 <RegionCN470GetPhyParam+0x208>)
 80121c8:	601a      	str	r2, [r3, #0]
            break;
 80121ca:	e02e      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80121cc:	2308      	movs	r3, #8
 80121ce:	18fb      	adds	r3, r7, r3
 80121d0:	2200      	movs	r2, #0
 80121d2:	601a      	str	r2, [r3, #0]
            break;
 80121d4:	e029      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = CN470_DEFAULT_MAX_EIRP;
 80121d6:	2308      	movs	r3, #8
 80121d8:	18fb      	adds	r3, r7, r3
 80121da:	4a26      	ldr	r2, [pc, #152]	; (8012274 <RegionCN470GetPhyParam+0x20c>)
 80121dc:	601a      	str	r2, [r3, #0]
            break;
 80121de:	e024      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 80121e0:	2308      	movs	r3, #8
 80121e2:	18fb      	adds	r3, r7, r3
 80121e4:	4a24      	ldr	r2, [pc, #144]	; (8012278 <RegionCN470GetPhyParam+0x210>)
 80121e6:	601a      	str	r2, [r3, #0]
            break;
 80121e8:	e01f      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = CN470_BEACON_SIZE;
 80121ea:	2108      	movs	r1, #8
 80121ec:	187b      	adds	r3, r7, r1
 80121ee:	2213      	movs	r2, #19
 80121f0:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = CN470_RFU1_SIZE;
 80121f2:	187b      	adds	r3, r7, r1
 80121f4:	2203      	movs	r2, #3
 80121f6:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = CN470_RFU2_SIZE;
 80121f8:	187b      	adds	r3, r7, r1
 80121fa:	2201      	movs	r2, #1
 80121fc:	709a      	strb	r2, [r3, #2]
            break;
 80121fe:	e014      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = CN470_BEACON_CHANNEL_DR;
 8012200:	2308      	movs	r3, #8
 8012202:	18fb      	adds	r3, r7, r3
 8012204:	2202      	movs	r2, #2
 8012206:	601a      	str	r2, [r3, #0]
            break;
 8012208:	e00f      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = CN470_BEACON_CHANNEL_STEPWIDTH;
 801220a:	2308      	movs	r3, #8
 801220c:	18fb      	adds	r3, r7, r3
 801220e:	4a1b      	ldr	r2, [pc, #108]	; (801227c <RegionCN470GetPhyParam+0x214>)
 8012210:	601a      	str	r2, [r3, #0]
            break;
 8012212:	e00a      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = CN470_BEACON_NB_CHANNELS;
 8012214:	2308      	movs	r3, #8
 8012216:	18fb      	adds	r3, r7, r3
 8012218:	2208      	movs	r2, #8
 801221a:	601a      	str	r2, [r3, #0]
            break;
 801221c:	e005      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = CN470_PING_SLOT_CHANNEL_DR;
 801221e:	2308      	movs	r3, #8
 8012220:	18fb      	adds	r3, r7, r3
 8012222:	2202      	movs	r2, #2
 8012224:	601a      	str	r2, [r3, #0]
            break;
 8012226:	e000      	b.n	801222a <RegionCN470GetPhyParam+0x1c2>
        }
        default:
        {
            break;
 8012228:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801222a:	210c      	movs	r1, #12
 801222c:	187b      	adds	r3, r7, r1
 801222e:	2208      	movs	r2, #8
 8012230:	18ba      	adds	r2, r7, r2
 8012232:	6812      	ldr	r2, [r2, #0]
 8012234:	601a      	str	r2, [r3, #0]
 8012236:	187b      	adds	r3, r7, r1
 8012238:	2200      	movs	r2, #0
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	0013      	movs	r3, r2
}
 801223e:	0018      	movs	r0, r3
 8012240:	46bd      	mov	sp, r7
 8012242:	b004      	add	sp, #16
 8012244:	bd80      	pop	{r7, pc}
 8012246:	46c0      	nop			; (mov r8, r8)
 8012248:	08028b70 	.word	0x08028b70
 801224c:	08028b60 	.word	0x08028b60
 8012250:	08028b68 	.word	0x08028b68
 8012254:	00000bb8 	.word	0x00000bb8
 8012258:	00001388 	.word	0x00001388
 801225c:	00001770 	.word	0x00001770
 8012260:	fffffc18 	.word	0xfffffc18
 8012264:	1e1e4420 	.word	0x1e1e4420
 8012268:	200014b4 	.word	0x200014b4
 801226c:	200014c0 	.word	0x200014c0
 8012270:	20001024 	.word	0x20001024
 8012274:	41993333 	.word	0x41993333
 8012278:	4009999a 	.word	0x4009999a
 801227c:	00030d40 	.word	0x00030d40

08012280 <RegionCN470SetBandTxDone>:

void RegionCN470SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	7858      	ldrb	r0, [r3, #1]
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	0019      	movs	r1, r3
 8012292:	4a0a      	ldr	r2, [pc, #40]	; (80122bc <RegionCN470SetBandTxDone+0x3c>)
 8012294:	000b      	movs	r3, r1
 8012296:	005b      	lsls	r3, r3, #1
 8012298:	185b      	adds	r3, r3, r1
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	18d3      	adds	r3, r2, r3
 801229e:	3309      	adds	r3, #9
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	3348      	adds	r3, #72	; 0x48
 80122a4:	011a      	lsls	r2, r3, #4
 80122a6:	4b05      	ldr	r3, [pc, #20]	; (80122bc <RegionCN470SetBandTxDone+0x3c>)
 80122a8:	18d1      	adds	r1, r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	001a      	movs	r2, r3
 80122b0:	f002 f92a 	bl	8014508 <RegionCommonSetBandTxDone>
}
 80122b4:	46c0      	nop			; (mov r8, r8)
 80122b6:	46bd      	mov	sp, r7
 80122b8:	b002      	add	sp, #8
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	20001024 	.word	0x20001024

080122c0 <RegionCN470InitDefaults>:

void RegionCN470InitDefaults( InitDefaultsParams_t* params )
{
 80122c0:	b590      	push	{r4, r7, lr}
 80122c2:	b089      	sub	sp, #36	; 0x24
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
    Band_t bands[CN470_MAX_NB_BANDS] =
 80122c8:	210c      	movs	r1, #12
 80122ca:	187b      	adds	r3, r7, r1
 80122cc:	2201      	movs	r2, #1
 80122ce:	801a      	strh	r2, [r3, #0]
 80122d0:	187b      	adds	r3, r7, r1
 80122d2:	2200      	movs	r2, #0
 80122d4:	709a      	strb	r2, [r3, #2]
 80122d6:	187b      	adds	r3, r7, r1
 80122d8:	2200      	movs	r2, #0
 80122da:	605a      	str	r2, [r3, #4]
 80122dc:	187b      	adds	r3, r7, r1
 80122de:	2200      	movs	r2, #0
 80122e0:	609a      	str	r2, [r3, #8]
 80122e2:	187b      	adds	r3, r7, r1
 80122e4:	2200      	movs	r2, #0
 80122e6:	60da      	str	r2, [r3, #12]
    {
        CN470_BAND0
    };

    switch( params->Type )
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	791b      	ldrb	r3, [r3, #4]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d100      	bne.n	80122f2 <RegionCN470InitDefaults+0x32>
 80122f0:	e075      	b.n	80123de <RegionCN470InitDefaults+0x11e>
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d066      	beq.n	80123c4 <RegionCN470InitDefaults+0x104>
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d000      	beq.n	80122fc <RegionCN470InitDefaults+0x3c>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
            break;
        }
        default:
        {
            break;
 80122fa:	e078      	b.n	80123ee <RegionCN470InitDefaults+0x12e>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN470_MAX_NB_BANDS );
 80122fc:	230c      	movs	r3, #12
 80122fe:	18f9      	adds	r1, r7, r3
 8012300:	4b3d      	ldr	r3, [pc, #244]	; (80123f8 <RegionCN470InitDefaults+0x138>)
 8012302:	2210      	movs	r2, #16
 8012304:	0018      	movs	r0, r3
 8012306:	f00a fcd5 	bl	801ccb4 <memcpy1>
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 801230a:	231f      	movs	r3, #31
 801230c:	18fb      	adds	r3, r7, r3
 801230e:	2200      	movs	r2, #0
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	e02c      	b.n	801236e <RegionCN470InitDefaults+0xae>
                NvmCtx.Channels[i].Frequency = 470300000 + i * 200000;
 8012314:	201f      	movs	r0, #31
 8012316:	183b      	adds	r3, r7, r0
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	4a38      	ldr	r2, [pc, #224]	; (80123fc <RegionCN470InitDefaults+0x13c>)
 801231c:	4353      	muls	r3, r2
 801231e:	4a38      	ldr	r2, [pc, #224]	; (8012400 <RegionCN470InitDefaults+0x140>)
 8012320:	1899      	adds	r1, r3, r2
 8012322:	0004      	movs	r4, r0
 8012324:	183b      	adds	r3, r7, r0
 8012326:	781a      	ldrb	r2, [r3, #0]
 8012328:	0008      	movs	r0, r1
 801232a:	4936      	ldr	r1, [pc, #216]	; (8012404 <RegionCN470InitDefaults+0x144>)
 801232c:	0013      	movs	r3, r2
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	189b      	adds	r3, r3, r2
 8012332:	009b      	lsls	r3, r3, #2
 8012334:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012336:	0020      	movs	r0, r4
 8012338:	183b      	adds	r3, r7, r0
 801233a:	781a      	ldrb	r2, [r3, #0]
 801233c:	4931      	ldr	r1, [pc, #196]	; (8012404 <RegionCN470InitDefaults+0x144>)
 801233e:	0013      	movs	r3, r2
 8012340:	005b      	lsls	r3, r3, #1
 8012342:	189b      	adds	r3, r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	18cb      	adds	r3, r1, r3
 8012348:	3308      	adds	r3, #8
 801234a:	2250      	movs	r2, #80	; 0x50
 801234c:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 801234e:	183b      	adds	r3, r7, r0
 8012350:	781a      	ldrb	r2, [r3, #0]
 8012352:	492c      	ldr	r1, [pc, #176]	; (8012404 <RegionCN470InitDefaults+0x144>)
 8012354:	0013      	movs	r3, r2
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	189b      	adds	r3, r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	18cb      	adds	r3, r1, r3
 801235e:	3309      	adds	r3, #9
 8012360:	2200      	movs	r2, #0
 8012362:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 8012364:	183b      	adds	r3, r7, r0
 8012366:	781a      	ldrb	r2, [r3, #0]
 8012368:	183b      	adds	r3, r7, r0
 801236a:	3201      	adds	r2, #1
 801236c:	701a      	strb	r2, [r3, #0]
 801236e:	231f      	movs	r3, #31
 8012370:	18fb      	adds	r3, r7, r3
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	2b5f      	cmp	r3, #95	; 0x5f
 8012376:	d9cd      	bls.n	8012314 <RegionCN470InitDefaults+0x54>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 8012378:	4b22      	ldr	r3, [pc, #136]	; (8012404 <RegionCN470InitDefaults+0x144>)
 801237a:	4a23      	ldr	r2, [pc, #140]	; (8012408 <RegionCN470InitDefaults+0x148>)
 801237c:	2101      	movs	r1, #1
 801237e:	4249      	negs	r1, r1
 8012380:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 8012382:	4b20      	ldr	r3, [pc, #128]	; (8012404 <RegionCN470InitDefaults+0x144>)
 8012384:	4a21      	ldr	r2, [pc, #132]	; (801240c <RegionCN470InitDefaults+0x14c>)
 8012386:	2101      	movs	r1, #1
 8012388:	4249      	negs	r1, r1
 801238a:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 801238c:	4a1d      	ldr	r2, [pc, #116]	; (8012404 <RegionCN470InitDefaults+0x144>)
 801238e:	2394      	movs	r3, #148	; 0x94
 8012390:	00db      	lsls	r3, r3, #3
 8012392:	2101      	movs	r1, #1
 8012394:	4249      	negs	r1, r1
 8012396:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 8012398:	4b1a      	ldr	r3, [pc, #104]	; (8012404 <RegionCN470InitDefaults+0x144>)
 801239a:	4a1d      	ldr	r2, [pc, #116]	; (8012410 <RegionCN470InitDefaults+0x150>)
 801239c:	2101      	movs	r1, #1
 801239e:	4249      	negs	r1, r1
 80123a0:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0xFFFF;
 80123a2:	4b18      	ldr	r3, [pc, #96]	; (8012404 <RegionCN470InitDefaults+0x144>)
 80123a4:	4a1b      	ldr	r2, [pc, #108]	; (8012414 <RegionCN470InitDefaults+0x154>)
 80123a6:	2101      	movs	r1, #1
 80123a8:	4249      	negs	r1, r1
 80123aa:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[5] = 0xFFFF;
 80123ac:	4b15      	ldr	r3, [pc, #84]	; (8012404 <RegionCN470InitDefaults+0x144>)
 80123ae:	4a1a      	ldr	r2, [pc, #104]	; (8012418 <RegionCN470InitDefaults+0x158>)
 80123b0:	2101      	movs	r1, #1
 80123b2:	4249      	negs	r1, r1
 80123b4:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 80123b6:	4919      	ldr	r1, [pc, #100]	; (801241c <RegionCN470InitDefaults+0x15c>)
 80123b8:	4b19      	ldr	r3, [pc, #100]	; (8012420 <RegionCN470InitDefaults+0x160>)
 80123ba:	2206      	movs	r2, #6
 80123bc:	0018      	movs	r0, r3
 80123be:	f002 f874 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 80123c2:	e014      	b.n	80123ee <RegionCN470InitDefaults+0x12e>
            if( params->NvmCtx != 0 )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00f      	beq.n	80123ec <RegionCN470InitDefaults+0x12c>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6819      	ldr	r1, [r3, #0]
 80123d0:	2395      	movs	r3, #149	; 0x95
 80123d2:	00da      	lsls	r2, r3, #3
 80123d4:	4b0b      	ldr	r3, [pc, #44]	; (8012404 <RegionCN470InitDefaults+0x144>)
 80123d6:	0018      	movs	r0, r3
 80123d8:	f00a fc6c 	bl	801ccb4 <memcpy1>
            break;
 80123dc:	e006      	b.n	80123ec <RegionCN470InitDefaults+0x12c>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 80123de:	490f      	ldr	r1, [pc, #60]	; (801241c <RegionCN470InitDefaults+0x15c>)
 80123e0:	4b0f      	ldr	r3, [pc, #60]	; (8012420 <RegionCN470InitDefaults+0x160>)
 80123e2:	2206      	movs	r2, #6
 80123e4:	0018      	movs	r0, r3
 80123e6:	f002 f860 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 80123ea:	e000      	b.n	80123ee <RegionCN470InitDefaults+0x12e>
            break;
 80123ec:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80123ee:	46c0      	nop			; (mov r8, r8)
 80123f0:	46bd      	mov	sp, r7
 80123f2:	b009      	add	sp, #36	; 0x24
 80123f4:	bd90      	pop	{r4, r7, pc}
 80123f6:	46c0      	nop			; (mov r8, r8)
 80123f8:	200014a4 	.word	0x200014a4
 80123fc:	00030d40 	.word	0x00030d40
 8012400:	1c083560 	.word	0x1c083560
 8012404:	20001024 	.word	0x20001024
 8012408:	0000049c 	.word	0x0000049c
 801240c:	0000049e 	.word	0x0000049e
 8012410:	000004a2 	.word	0x000004a2
 8012414:	000004a4 	.word	0x000004a4
 8012418:	000004a6 	.word	0x000004a6
 801241c:	200014c0 	.word	0x200014c0
 8012420:	200014b4 	.word	0x200014b4

08012424 <RegionCN470ApplyCFList>:
            return false;
    }
}

void RegionCN470ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8012424:	b5b0      	push	{r4, r5, r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	791b      	ldrb	r3, [r3, #4]
 8012430:	2b10      	cmp	r3, #16
 8012432:	d14e      	bne.n	80124d2 <RegionCN470ApplyCFList+0xae>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	330f      	adds	r3, #15
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b01      	cmp	r3, #1
 801243e:	d14a      	bne.n	80124d6 <RegionCN470ApplyCFList+0xb2>
    {
        return;
    }

    // ChMask0 - ChMask5 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 8012440:	230f      	movs	r3, #15
 8012442:	18fb      	adds	r3, r7, r3
 8012444:	2200      	movs	r2, #0
 8012446:	701a      	strb	r2, [r3, #0]
 8012448:	230e      	movs	r3, #14
 801244a:	18fb      	adds	r3, r7, r3
 801244c:	2200      	movs	r2, #0
 801244e:	701a      	strb	r2, [r3, #0]
 8012450:	e039      	b.n	80124c6 <RegionCN470ApplyCFList+0xa2>
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	240e      	movs	r4, #14
 8012458:	193b      	adds	r3, r7, r4
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	18d3      	adds	r3, r2, r3
 801245e:	7819      	ldrb	r1, [r3, #0]
 8012460:	200f      	movs	r0, #15
 8012462:	183b      	adds	r3, r7, r0
 8012464:	781a      	ldrb	r2, [r3, #0]
 8012466:	b289      	uxth	r1, r1
 8012468:	4b1d      	ldr	r3, [pc, #116]	; (80124e0 <RegionCN470ApplyCFList+0xbc>)
 801246a:	2592      	movs	r5, #146	; 0x92
 801246c:	00ad      	lsls	r5, r5, #2
 801246e:	46ac      	mov	ip, r5
 8012470:	4462      	add	r2, ip
 8012472:	0052      	lsls	r2, r2, #1
 8012474:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8012476:	183b      	adds	r3, r7, r0
 8012478:	781a      	ldrb	r2, [r3, #0]
 801247a:	4b19      	ldr	r3, [pc, #100]	; (80124e0 <RegionCN470ApplyCFList+0xbc>)
 801247c:	2192      	movs	r1, #146	; 0x92
 801247e:	0089      	lsls	r1, r1, #2
 8012480:	468c      	mov	ip, r1
 8012482:	4462      	add	r2, ip
 8012484:	0052      	lsls	r2, r2, #1
 8012486:	5ad1      	ldrh	r1, [r2, r3]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	193b      	adds	r3, r7, r4
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	3301      	adds	r3, #1
 8012492:	18d3      	adds	r3, r2, r3
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	b29b      	uxth	r3, r3
 8012498:	021b      	lsls	r3, r3, #8
 801249a:	b29b      	uxth	r3, r3
 801249c:	183a      	adds	r2, r7, r0
 801249e:	7812      	ldrb	r2, [r2, #0]
 80124a0:	430b      	orrs	r3, r1
 80124a2:	b299      	uxth	r1, r3
 80124a4:	4b0e      	ldr	r3, [pc, #56]	; (80124e0 <RegionCN470ApplyCFList+0xbc>)
 80124a6:	2592      	movs	r5, #146	; 0x92
 80124a8:	00ad      	lsls	r5, r5, #2
 80124aa:	46ac      	mov	ip, r5
 80124ac:	4462      	add	r2, ip
 80124ae:	0052      	lsls	r2, r2, #1
 80124b0:	52d1      	strh	r1, [r2, r3]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 80124b2:	183b      	adds	r3, r7, r0
 80124b4:	781a      	ldrb	r2, [r3, #0]
 80124b6:	183b      	adds	r3, r7, r0
 80124b8:	3201      	adds	r2, #1
 80124ba:	701a      	strb	r2, [r3, #0]
 80124bc:	193b      	adds	r3, r7, r4
 80124be:	193a      	adds	r2, r7, r4
 80124c0:	7812      	ldrb	r2, [r2, #0]
 80124c2:	3202      	adds	r2, #2
 80124c4:	701a      	strb	r2, [r3, #0]
 80124c6:	230f      	movs	r3, #15
 80124c8:	18fb      	adds	r3, r7, r3
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	2b05      	cmp	r3, #5
 80124ce:	d9c0      	bls.n	8012452 <RegionCN470ApplyCFList+0x2e>
 80124d0:	e002      	b.n	80124d8 <RegionCN470ApplyCFList+0xb4>
        return;
 80124d2:	46c0      	nop			; (mov r8, r8)
 80124d4:	e000      	b.n	80124d8 <RegionCN470ApplyCFList+0xb4>
        return;
 80124d6:	46c0      	nop			; (mov r8, r8)
    }
}
 80124d8:	46bd      	mov	sp, r7
 80124da:	b004      	add	sp, #16
 80124dc:	bdb0      	pop	{r4, r5, r7, pc}
 80124de:	46c0      	nop			; (mov r8, r8)
 80124e0:	20001024 	.word	0x20001024

080124e4 <RegionCN470ComputeRxWindowParameters>:
    }
    return true;
}

void RegionCN470ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80124e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124e6:	b08b      	sub	sp, #44	; 0x2c
 80124e8:	af04      	add	r7, sp, #16
 80124ea:	60ba      	str	r2, [r7, #8]
 80124ec:	607b      	str	r3, [r7, #4]
 80124ee:	250f      	movs	r5, #15
 80124f0:	197b      	adds	r3, r7, r5
 80124f2:	1c02      	adds	r2, r0, #0
 80124f4:	701a      	strb	r2, [r3, #0]
 80124f6:	230e      	movs	r3, #14
 80124f8:	18fb      	adds	r3, r7, r3
 80124fa:	1c0a      	adds	r2, r1, #0
 80124fc:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80124fe:	2300      	movs	r3, #0
 8012500:	2400      	movs	r4, #0
 8012502:	613b      	str	r3, [r7, #16]
 8012504:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN470_RX_MAX_DATARATE );
 8012506:	197b      	adds	r3, r7, r5
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	b25a      	sxtb	r2, r3
 801250c:	2a05      	cmp	r2, #5
 801250e:	dd00      	ble.n	8012512 <RegionCN470ComputeRxWindowParameters+0x2e>
 8012510:	2305      	movs	r3, #5
 8012512:	b25a      	sxtb	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	785b      	ldrb	r3, [r3, #1]
 801251c:	b25b      	sxtb	r3, r3
 801251e:	0018      	movs	r0, r3
 8012520:	f7ff fc4c 	bl	8011dbc <GetBandwidth>
 8012524:	0003      	movs	r3, r0
 8012526:	b2da      	uxtb	r2, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	785b      	ldrb	r3, [r3, #1]
 8012530:	b25b      	sxtb	r3, r3
 8012532:	001a      	movs	r2, r3
 8012534:	4b14      	ldr	r3, [pc, #80]	; (8012588 <RegionCN470ComputeRxWindowParameters+0xa4>)
 8012536:	5c98      	ldrb	r0, [r3, r2]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	785b      	ldrb	r3, [r3, #1]
 801253c:	b25b      	sxtb	r3, r3
 801253e:	001a      	movs	r2, r3
 8012540:	4b12      	ldr	r3, [pc, #72]	; (801258c <RegionCN470ComputeRxWindowParameters+0xa8>)
 8012542:	0092      	lsls	r2, r2, #2
 8012544:	58d3      	ldr	r3, [r2, r3]
 8012546:	0019      	movs	r1, r3
 8012548:	f002 f9ea 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 801254c:	0003      	movs	r3, r0
 801254e:	000c      	movs	r4, r1
 8012550:	613b      	str	r3, [r7, #16]
 8012552:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012554:	4b0e      	ldr	r3, [pc, #56]	; (8012590 <RegionCN470ComputeRxWindowParameters+0xac>)
 8012556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012558:	4798      	blx	r3
 801255a:	0006      	movs	r6, r0
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	3308      	adds	r3, #8
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	320c      	adds	r2, #12
 8012564:	68bd      	ldr	r5, [r7, #8]
 8012566:	210e      	movs	r1, #14
 8012568:	1879      	adds	r1, r7, r1
 801256a:	780c      	ldrb	r4, [r1, #0]
 801256c:	6938      	ldr	r0, [r7, #16]
 801256e:	6979      	ldr	r1, [r7, #20]
 8012570:	9202      	str	r2, [sp, #8]
 8012572:	9301      	str	r3, [sp, #4]
 8012574:	9600      	str	r6, [sp, #0]
 8012576:	002b      	movs	r3, r5
 8012578:	0022      	movs	r2, r4
 801257a:	f002 fa19 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 801257e:	46c0      	nop			; (mov r8, r8)
 8012580:	46bd      	mov	sp, r7
 8012582:	b007      	add	sp, #28
 8012584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012586:	46c0      	nop			; (mov r8, r8)
 8012588:	08028b40 	.word	0x08028b40
 801258c:	08028b48 	.word	0x08028b48
 8012590:	080293d8 	.word	0x080293d8

08012594 <RegionCN470RxConfig>:

bool RegionCN470RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012594:	b5b0      	push	{r4, r5, r7, lr}
 8012596:	b090      	sub	sp, #64	; 0x40
 8012598:	af0a      	add	r7, sp, #40	; 0x28
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 801259e:	230f      	movs	r3, #15
 80125a0:	18fb      	adds	r3, r7, r3
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	7852      	ldrb	r2, [r2, #1]
 80125a6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80125a8:	2317      	movs	r3, #23
 80125aa:	18fb      	adds	r3, r7, r3
 80125ac:	2200      	movs	r2, #0
 80125ae:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80125b0:	230e      	movs	r3, #14
 80125b2:	18fb      	adds	r3, r7, r3
 80125b4:	2200      	movs	r2, #0
 80125b6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80125be:	4b3b      	ldr	r3, [pc, #236]	; (80126ac <RegionCN470RxConfig+0x118>)
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	4798      	blx	r3
 80125c4:	1e03      	subs	r3, r0, #0
 80125c6:	d001      	beq.n	80125cc <RegionCN470RxConfig+0x38>
    {
        return false;
 80125c8:	2300      	movs	r3, #0
 80125ca:	e06b      	b.n	80126a4 <RegionCN470RxConfig+0x110>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	7cdb      	ldrb	r3, [r3, #19]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d10e      	bne.n	80125f2 <RegionCN470RxConfig+0x5e>
    {
        // Apply window 1 frequency
        frequency = CN470_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 48 ) * CN470_STEPWIDTH_RX1_CHANNEL;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2130      	movs	r1, #48	; 0x30
 80125da:	0018      	movs	r0, r3
 80125dc:	f7ed fe22 	bl	8000224 <__aeabi_uidivmod>
 80125e0:	000b      	movs	r3, r1
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	001a      	movs	r2, r3
 80125e6:	4b32      	ldr	r3, [pc, #200]	; (80126b0 <RegionCN470RxConfig+0x11c>)
 80125e8:	4353      	muls	r3, r2
 80125ea:	4a32      	ldr	r2, [pc, #200]	; (80126b4 <RegionCN470RxConfig+0x120>)
 80125ec:	4694      	mov	ip, r2
 80125ee:	4463      	add	r3, ip
 80125f0:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN470[dr];
 80125f2:	230f      	movs	r3, #15
 80125f4:	18fb      	adds	r3, r7, r3
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	b25b      	sxtb	r3, r3
 80125fa:	4a2f      	ldr	r2, [pc, #188]	; (80126b8 <RegionCN470RxConfig+0x124>)
 80125fc:	5cd2      	ldrb	r2, [r2, r3]
 80125fe:	250e      	movs	r5, #14
 8012600:	197b      	adds	r3, r7, r5
 8012602:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8012604:	4b29      	ldr	r3, [pc, #164]	; (80126ac <RegionCN470RxConfig+0x118>)
 8012606:	695b      	ldr	r3, [r3, #20]
 8012608:	693a      	ldr	r2, [r7, #16]
 801260a:	0010      	movs	r0, r2
 801260c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801260e:	4b27      	ldr	r3, [pc, #156]	; (80126ac <RegionCN470RxConfig+0x118>)
 8012610:	6a1c      	ldr	r4, [r3, #32]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	789b      	ldrb	r3, [r3, #2]
 8012616:	0018      	movs	r0, r3
 8012618:	197b      	adds	r3, r7, r5
 801261a:	2100      	movs	r1, #0
 801261c:	5659      	ldrsb	r1, [r3, r1]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	b29b      	uxth	r3, r3
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	7c92      	ldrb	r2, [r2, #18]
 8012628:	9209      	str	r2, [sp, #36]	; 0x24
 801262a:	2201      	movs	r2, #1
 801262c:	9208      	str	r2, [sp, #32]
 801262e:	2200      	movs	r2, #0
 8012630:	9207      	str	r2, [sp, #28]
 8012632:	2200      	movs	r2, #0
 8012634:	9206      	str	r2, [sp, #24]
 8012636:	2200      	movs	r2, #0
 8012638:	9205      	str	r2, [sp, #20]
 801263a:	2200      	movs	r2, #0
 801263c:	9204      	str	r2, [sp, #16]
 801263e:	2200      	movs	r2, #0
 8012640:	9203      	str	r2, [sp, #12]
 8012642:	9302      	str	r3, [sp, #8]
 8012644:	2308      	movs	r3, #8
 8012646:	9301      	str	r3, [sp, #4]
 8012648:	2300      	movs	r3, #0
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	2301      	movs	r3, #1
 801264e:	000a      	movs	r2, r1
 8012650:	0001      	movs	r1, r0
 8012652:	2001      	movs	r0, #1
 8012654:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	7c5b      	ldrb	r3, [r3, #17]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d009      	beq.n	8012672 <RegionCN470RxConfig+0xde>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN470[dr];
 801265e:	230f      	movs	r3, #15
 8012660:	18fb      	adds	r3, r7, r3
 8012662:	2200      	movs	r2, #0
 8012664:	569a      	ldrsb	r2, [r3, r2]
 8012666:	2317      	movs	r3, #23
 8012668:	18fb      	adds	r3, r7, r3
 801266a:	4914      	ldr	r1, [pc, #80]	; (80126bc <RegionCN470RxConfig+0x128>)
 801266c:	5c8a      	ldrb	r2, [r1, r2]
 801266e:	701a      	strb	r2, [r3, #0]
 8012670:	e008      	b.n	8012684 <RegionCN470RxConfig+0xf0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN470[dr];
 8012672:	230f      	movs	r3, #15
 8012674:	18fb      	adds	r3, r7, r3
 8012676:	2200      	movs	r2, #0
 8012678:	569a      	ldrsb	r2, [r3, r2]
 801267a:	2317      	movs	r3, #23
 801267c:	18fb      	adds	r3, r7, r3
 801267e:	4910      	ldr	r1, [pc, #64]	; (80126c0 <RegionCN470RxConfig+0x12c>)
 8012680:	5c8a      	ldrb	r2, [r1, r2]
 8012682:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8012684:	4b09      	ldr	r3, [pc, #36]	; (80126ac <RegionCN470RxConfig+0x118>)
 8012686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012688:	2217      	movs	r2, #23
 801268a:	18ba      	adds	r2, r7, r2
 801268c:	7812      	ldrb	r2, [r2, #0]
 801268e:	320d      	adds	r2, #13
 8012690:	b2d2      	uxtb	r2, r2
 8012692:	0011      	movs	r1, r2
 8012694:	2001      	movs	r0, #1
 8012696:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	220f      	movs	r2, #15
 801269c:	18ba      	adds	r2, r7, r2
 801269e:	7812      	ldrb	r2, [r2, #0]
 80126a0:	701a      	strb	r2, [r3, #0]
    return true;
 80126a2:	2301      	movs	r3, #1
}
 80126a4:	0018      	movs	r0, r3
 80126a6:	46bd      	mov	sp, r7
 80126a8:	b006      	add	sp, #24
 80126aa:	bdb0      	pop	{r4, r5, r7, pc}
 80126ac:	080293d8 	.word	0x080293d8
 80126b0:	00030d40 	.word	0x00030d40
 80126b4:	1dd1f8e0 	.word	0x1dd1f8e0
 80126b8:	08028b40 	.word	0x08028b40
 80126bc:	08028b68 	.word	0x08028b68
 80126c0:	08028b60 	.word	0x08028b60

080126c4 <RegionCN470TxConfig>:

bool RegionCN470TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80126c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126c6:	b091      	sub	sp, #68	; 0x44
 80126c8:	af0a      	add	r7, sp, #40	; 0x28
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	785b      	ldrb	r3, [r3, #1]
 80126d4:	b25b      	sxtb	r3, r3
 80126d6:	001a      	movs	r2, r3
 80126d8:	4b3d      	ldr	r3, [pc, #244]	; (80127d0 <RegionCN470TxConfig+0x10c>)
 80126da:	5c9a      	ldrb	r2, [r3, r2]
 80126dc:	2317      	movs	r3, #23
 80126de:	18fb      	adds	r3, r7, r3
 80126e0:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2002      	movs	r0, #2
 80126e6:	5618      	ldrsb	r0, [r3, r0]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	0019      	movs	r1, r3
 80126ee:	4a39      	ldr	r2, [pc, #228]	; (80127d4 <RegionCN470TxConfig+0x110>)
 80126f0:	000b      	movs	r3, r1
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	185b      	adds	r3, r3, r1
 80126f6:	009b      	lsls	r3, r3, #2
 80126f8:	18d3      	adds	r3, r2, r3
 80126fa:	3309      	adds	r3, #9
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	4a35      	ldr	r2, [pc, #212]	; (80127d4 <RegionCN470TxConfig+0x110>)
 8012700:	3348      	adds	r3, #72	; 0x48
 8012702:	011b      	lsls	r3, r3, #4
 8012704:	18d3      	adds	r3, r2, r3
 8012706:	3302      	adds	r3, #2
 8012708:	2100      	movs	r1, #0
 801270a:	5659      	ldrsb	r1, [r3, r1]
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	2201      	movs	r2, #1
 8012710:	569a      	ldrsb	r2, [r3, r2]
 8012712:	2516      	movs	r5, #22
 8012714:	197c      	adds	r4, r7, r5
 8012716:	4b30      	ldr	r3, [pc, #192]	; (80127d8 <RegionCN470TxConfig+0x114>)
 8012718:	f7ff fb6e 	bl	8011df8 <LimitTxPower>
 801271c:	0003      	movs	r3, r0
 801271e:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8012720:	2615      	movs	r6, #21
 8012722:	19bb      	adds	r3, r7, r6
 8012724:	2200      	movs	r2, #0
 8012726:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	6859      	ldr	r1, [r3, #4]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	689a      	ldr	r2, [r3, #8]
 8012730:	19bc      	adds	r4, r7, r6
 8012732:	197b      	adds	r3, r7, r5
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	b25b      	sxtb	r3, r3
 8012738:	0018      	movs	r0, r3
 801273a:	f002 f9bd 	bl	8014ab8 <RegionCommonComputeTxPower>
 801273e:	0003      	movs	r3, r0
 8012740:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8012742:	4b26      	ldr	r3, [pc, #152]	; (80127dc <RegionCN470TxConfig+0x118>)
 8012744:	695a      	ldr	r2, [r3, #20]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	0018      	movs	r0, r3
 801274c:	4921      	ldr	r1, [pc, #132]	; (80127d4 <RegionCN470TxConfig+0x110>)
 801274e:	0003      	movs	r3, r0
 8012750:	005b      	lsls	r3, r3, #1
 8012752:	181b      	adds	r3, r3, r0
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	585b      	ldr	r3, [r3, r1]
 8012758:	0018      	movs	r0, r3
 801275a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, 0, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801275c:	4b1f      	ldr	r3, [pc, #124]	; (80127dc <RegionCN470TxConfig+0x118>)
 801275e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012760:	2317      	movs	r3, #23
 8012762:	18fb      	adds	r3, r7, r3
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	b25b      	sxtb	r3, r3
 8012768:	19ba      	adds	r2, r7, r6
 801276a:	2100      	movs	r1, #0
 801276c:	5651      	ldrsb	r1, [r2, r1]
 801276e:	4a1c      	ldr	r2, [pc, #112]	; (80127e0 <RegionCN470TxConfig+0x11c>)
 8012770:	9208      	str	r2, [sp, #32]
 8012772:	2200      	movs	r2, #0
 8012774:	9207      	str	r2, [sp, #28]
 8012776:	2200      	movs	r2, #0
 8012778:	9206      	str	r2, [sp, #24]
 801277a:	2200      	movs	r2, #0
 801277c:	9205      	str	r2, [sp, #20]
 801277e:	2201      	movs	r2, #1
 8012780:	9204      	str	r2, [sp, #16]
 8012782:	2200      	movs	r2, #0
 8012784:	9203      	str	r2, [sp, #12]
 8012786:	2208      	movs	r2, #8
 8012788:	9202      	str	r2, [sp, #8]
 801278a:	2201      	movs	r2, #1
 801278c:	9201      	str	r2, [sp, #4]
 801278e:	9300      	str	r3, [sp, #0]
 8012790:	2300      	movs	r3, #0
 8012792:	2200      	movs	r2, #0
 8012794:	2001      	movs	r0, #1
 8012796:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8012798:	4b10      	ldr	r3, [pc, #64]	; (80127dc <RegionCN470TxConfig+0x118>)
 801279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801279c:	68fa      	ldr	r2, [r7, #12]
 801279e:	8992      	ldrh	r2, [r2, #12]
 80127a0:	b2d2      	uxtb	r2, r2
 80127a2:	0011      	movs	r1, r2
 80127a4:	2001      	movs	r0, #1
 80127a6:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 80127a8:	4b0c      	ldr	r3, [pc, #48]	; (80127dc <RegionCN470TxConfig+0x118>)
 80127aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ac:	68fa      	ldr	r2, [r7, #12]
 80127ae:	8992      	ldrh	r2, [r2, #12]
 80127b0:	b2d2      	uxtb	r2, r2
 80127b2:	0011      	movs	r1, r2
 80127b4:	2001      	movs	r0, #1
 80127b6:	4798      	blx	r3
 80127b8:	0002      	movs	r2, r0
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	601a      	str	r2, [r3, #0]
    *txPower = txPowerLimited;
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	197a      	adds	r2, r7, r5
 80127c2:	7812      	ldrb	r2, [r2, #0]
 80127c4:	701a      	strb	r2, [r3, #0]

    return true;
 80127c6:	2301      	movs	r3, #1
}
 80127c8:	0018      	movs	r0, r3
 80127ca:	46bd      	mov	sp, r7
 80127cc:	b007      	add	sp, #28
 80127ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127d0:	08028b40 	.word	0x08028b40
 80127d4:	20001024 	.word	0x20001024
 80127d8:	200014b4 	.word	0x200014b4
 80127dc:	080293d8 	.word	0x080293d8
 80127e0:	00000bb8 	.word	0x00000bb8

080127e4 <RegionCN470LinkAdrReq>:

uint8_t RegionCN470LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80127e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127e6:	b095      	sub	sp, #84	; 0x54
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
 80127f0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80127f2:	234f      	movs	r3, #79	; 0x4f
 80127f4:	18fb      	adds	r3, r7, r3
 80127f6:	2207      	movs	r2, #7
 80127f8:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80127fa:	234c      	movs	r3, #76	; 0x4c
 80127fc:	18fb      	adds	r3, r7, r3
 80127fe:	2200      	movs	r2, #0
 8012800:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8012802:	234e      	movs	r3, #78	; 0x4e
 8012804:	18fb      	adds	r3, r7, r3
 8012806:	2200      	movs	r2, #0
 8012808:	701a      	strb	r2, [r3, #0]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801280a:	2438      	movs	r4, #56	; 0x38
 801280c:	193b      	adds	r3, r7, r4
 801280e:	0018      	movs	r0, r3
 8012810:	230c      	movs	r3, #12
 8012812:	001a      	movs	r2, r3
 8012814:	2100      	movs	r1, #0
 8012816:	f013 fb77 	bl	8025f08 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 801281a:	4993      	ldr	r1, [pc, #588]	; (8012a68 <RegionCN470LinkAdrReq+0x284>)
 801281c:	193b      	adds	r3, r7, r4
 801281e:	2206      	movs	r2, #6
 8012820:	0018      	movs	r0, r3
 8012822:	f001 fe42 	bl	80144aa <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012826:	e08a      	b.n	801293e <RegionCN470LinkAdrReq+0x15a>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	685a      	ldr	r2, [r3, #4]
 801282c:	234e      	movs	r3, #78	; 0x4e
 801282e:	18fb      	adds	r3, r7, r3
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	18d3      	adds	r3, r2, r3
 8012834:	254c      	movs	r5, #76	; 0x4c
 8012836:	197c      	adds	r4, r7, r5
 8012838:	2244      	movs	r2, #68	; 0x44
 801283a:	18ba      	adds	r2, r7, r2
 801283c:	0011      	movs	r1, r2
 801283e:	0018      	movs	r0, r3
 8012840:	f001 ff72 	bl	8014728 <RegionCommonParseLinkAdrReq>
 8012844:	0003      	movs	r3, r0
 8012846:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8012848:	197b      	adds	r3, r7, r5
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d100      	bne.n	8012852 <RegionCN470LinkAdrReq+0x6e>
 8012850:	e07e      	b.n	8012950 <RegionCN470LinkAdrReq+0x16c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8012852:	224e      	movs	r2, #78	; 0x4e
 8012854:	18bb      	adds	r3, r7, r2
 8012856:	18b9      	adds	r1, r7, r2
 8012858:	224c      	movs	r2, #76	; 0x4c
 801285a:	18ba      	adds	r2, r7, r2
 801285c:	7809      	ldrb	r1, [r1, #0]
 801285e:	7812      	ldrb	r2, [r2, #0]
 8012860:	188a      	adds	r2, r1, r2
 8012862:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8012864:	234f      	movs	r3, #79	; 0x4f
 8012866:	18fb      	adds	r3, r7, r3
 8012868:	2207      	movs	r2, #7
 801286a:	701a      	strb	r2, [r3, #0]

        if( linkAdrParams.ChMaskCtrl == 6 )
 801286c:	2344      	movs	r3, #68	; 0x44
 801286e:	18fb      	adds	r3, r7, r3
 8012870:	78db      	ldrb	r3, [r3, #3]
 8012872:	2b06      	cmp	r3, #6
 8012874:	d119      	bne.n	80128aa <RegionCN470LinkAdrReq+0xc6>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8012876:	2138      	movs	r1, #56	; 0x38
 8012878:	187b      	adds	r3, r7, r1
 801287a:	2201      	movs	r2, #1
 801287c:	4252      	negs	r2, r2
 801287e:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 8012880:	187b      	adds	r3, r7, r1
 8012882:	2201      	movs	r2, #1
 8012884:	4252      	negs	r2, r2
 8012886:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 8012888:	187b      	adds	r3, r7, r1
 801288a:	2201      	movs	r2, #1
 801288c:	4252      	negs	r2, r2
 801288e:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 8012890:	187b      	adds	r3, r7, r1
 8012892:	2201      	movs	r2, #1
 8012894:	4252      	negs	r2, r2
 8012896:	80da      	strh	r2, [r3, #6]
            channelsMask[4] = 0xFFFF;
 8012898:	187b      	adds	r3, r7, r1
 801289a:	2201      	movs	r2, #1
 801289c:	4252      	negs	r2, r2
 801289e:	811a      	strh	r2, [r3, #8]
            channelsMask[5] = 0xFFFF;
 80128a0:	187b      	adds	r3, r7, r1
 80128a2:	2201      	movs	r2, #1
 80128a4:	4252      	negs	r2, r2
 80128a6:	815a      	strh	r2, [r3, #10]
 80128a8:	e049      	b.n	801293e <RegionCN470LinkAdrReq+0x15a>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80128aa:	2344      	movs	r3, #68	; 0x44
 80128ac:	18fb      	adds	r3, r7, r3
 80128ae:	78db      	ldrb	r3, [r3, #3]
 80128b0:	2b07      	cmp	r3, #7
 80128b2:	d107      	bne.n	80128c4 <RegionCN470LinkAdrReq+0xe0>
        {
            status &= 0xFE; // Channel mask KO
 80128b4:	224f      	movs	r2, #79	; 0x4f
 80128b6:	18bb      	adds	r3, r7, r2
 80128b8:	18ba      	adds	r2, r7, r2
 80128ba:	7812      	ldrb	r2, [r2, #0]
 80128bc:	2101      	movs	r1, #1
 80128be:	438a      	bics	r2, r1
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	e03c      	b.n	801293e <RegionCN470LinkAdrReq+0x15a>
        }
        else
        {
            for( uint8_t i = 0; i < 16; i++ )
 80128c4:	234d      	movs	r3, #77	; 0x4d
 80128c6:	18fb      	adds	r3, r7, r3
 80128c8:	2200      	movs	r2, #0
 80128ca:	701a      	strb	r2, [r3, #0]
 80128cc:	e028      	b.n	8012920 <RegionCN470LinkAdrReq+0x13c>
            {
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 80128ce:	2344      	movs	r3, #68	; 0x44
 80128d0:	18fb      	adds	r3, r7, r3
 80128d2:	889b      	ldrh	r3, [r3, #4]
 80128d4:	001a      	movs	r2, r3
 80128d6:	234d      	movs	r3, #77	; 0x4d
 80128d8:	18fb      	adds	r3, r7, r3
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	411a      	asrs	r2, r3
 80128de:	0013      	movs	r3, r2
 80128e0:	2201      	movs	r2, #1
 80128e2:	4013      	ands	r3, r2
 80128e4:	d016      	beq.n	8012914 <RegionCN470LinkAdrReq+0x130>
                    ( NvmCtx.Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 80128e6:	2344      	movs	r3, #68	; 0x44
 80128e8:	18fb      	adds	r3, r7, r3
 80128ea:	78db      	ldrb	r3, [r3, #3]
 80128ec:	011a      	lsls	r2, r3, #4
 80128ee:	234d      	movs	r3, #77	; 0x4d
 80128f0:	18fb      	adds	r3, r7, r3
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	18d2      	adds	r2, r2, r3
 80128f6:	495d      	ldr	r1, [pc, #372]	; (8012a6c <RegionCN470LinkAdrReq+0x288>)
 80128f8:	0013      	movs	r3, r2
 80128fa:	005b      	lsls	r3, r3, #1
 80128fc:	189b      	adds	r3, r3, r2
 80128fe:	009b      	lsls	r3, r3, #2
 8012900:	585b      	ldr	r3, [r3, r1]
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 8012902:	2b00      	cmp	r3, #0
 8012904:	d106      	bne.n	8012914 <RegionCN470LinkAdrReq+0x130>
                {// Trying to enable an undefined channel
                    status &= 0xFE; // Channel mask KO
 8012906:	224f      	movs	r2, #79	; 0x4f
 8012908:	18bb      	adds	r3, r7, r2
 801290a:	18ba      	adds	r2, r7, r2
 801290c:	7812      	ldrb	r2, [r2, #0]
 801290e:	2101      	movs	r1, #1
 8012910:	438a      	bics	r2, r1
 8012912:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < 16; i++ )
 8012914:	214d      	movs	r1, #77	; 0x4d
 8012916:	187b      	adds	r3, r7, r1
 8012918:	781a      	ldrb	r2, [r3, #0]
 801291a:	187b      	adds	r3, r7, r1
 801291c:	3201      	adds	r2, #1
 801291e:	701a      	strb	r2, [r3, #0]
 8012920:	234d      	movs	r3, #77	; 0x4d
 8012922:	18fb      	adds	r3, r7, r3
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	2b0f      	cmp	r3, #15
 8012928:	d9d1      	bls.n	80128ce <RegionCN470LinkAdrReq+0xea>
                }
            }
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801292a:	2144      	movs	r1, #68	; 0x44
 801292c:	187b      	adds	r3, r7, r1
 801292e:	78db      	ldrb	r3, [r3, #3]
 8012930:	001a      	movs	r2, r3
 8012932:	187b      	adds	r3, r7, r1
 8012934:	8899      	ldrh	r1, [r3, #4]
 8012936:	2338      	movs	r3, #56	; 0x38
 8012938:	18fb      	adds	r3, r7, r3
 801293a:	0052      	lsls	r2, r2, #1
 801293c:	52d1      	strh	r1, [r2, r3]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	7a1b      	ldrb	r3, [r3, #8]
 8012942:	224e      	movs	r2, #78	; 0x4e
 8012944:	18ba      	adds	r2, r7, r2
 8012946:	7812      	ldrb	r2, [r2, #0]
 8012948:	429a      	cmp	r2, r3
 801294a:	d200      	bcs.n	801294e <RegionCN470LinkAdrReq+0x16a>
 801294c:	e76c      	b.n	8012828 <RegionCN470LinkAdrReq+0x44>
 801294e:	e000      	b.n	8012952 <RegionCN470LinkAdrReq+0x16e>
            break; // break loop, since no more request has been found
 8012950:	46c0      	nop			; (mov r8, r8)
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012952:	2134      	movs	r1, #52	; 0x34
 8012954:	187b      	adds	r3, r7, r1
 8012956:	2201      	movs	r2, #1
 8012958:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	7a5a      	ldrb	r2, [r3, #9]
 801295e:	187b      	adds	r3, r7, r1
 8012960:	709a      	strb	r2, [r3, #2]
    phyParam = RegionCN470GetPhyParam( &getPhy );
 8012962:	187b      	adds	r3, r7, r1
 8012964:	0018      	movs	r0, r3
 8012966:	f7ff fb7f 	bl	8012068 <RegionCN470GetPhyParam>
 801296a:	0003      	movs	r3, r0
 801296c:	001a      	movs	r2, r3
 801296e:	2030      	movs	r0, #48	; 0x30
 8012970:	183b      	adds	r3, r7, r0
 8012972:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8012974:	2110      	movs	r1, #16
 8012976:	187b      	adds	r3, r7, r1
 8012978:	244f      	movs	r4, #79	; 0x4f
 801297a:	193a      	adds	r2, r7, r4
 801297c:	7812      	ldrb	r2, [r2, #0]
 801297e:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	7a9a      	ldrb	r2, [r3, #10]
 8012984:	187b      	adds	r3, r7, r1
 8012986:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8012988:	2544      	movs	r5, #68	; 0x44
 801298a:	197b      	adds	r3, r7, r5
 801298c:	2201      	movs	r2, #1
 801298e:	569a      	ldrsb	r2, [r3, r2]
 8012990:	187b      	adds	r3, r7, r1
 8012992:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012994:	197b      	adds	r3, r7, r5
 8012996:	2202      	movs	r2, #2
 8012998:	569a      	ldrsb	r2, [r3, r2]
 801299a:	187b      	adds	r3, r7, r1
 801299c:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801299e:	197b      	adds	r3, r7, r5
 80129a0:	781a      	ldrb	r2, [r3, #0]
 80129a2:	187b      	adds	r3, r7, r1
 80129a4:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	220b      	movs	r2, #11
 80129aa:	569a      	ldrsb	r2, [r3, r2]
 80129ac:	187b      	adds	r3, r7, r1
 80129ae:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	220c      	movs	r2, #12
 80129b4:	569a      	ldrsb	r2, [r3, r2]
 80129b6:	187b      	adds	r3, r7, r1
 80129b8:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	7b5b      	ldrb	r3, [r3, #13]
 80129be:	b25a      	sxtb	r2, r3
 80129c0:	187b      	adds	r3, r7, r1
 80129c2:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 80129c4:	187b      	adds	r3, r7, r1
 80129c6:	2260      	movs	r2, #96	; 0x60
 80129c8:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80129ca:	187b      	adds	r3, r7, r1
 80129cc:	2238      	movs	r2, #56	; 0x38
 80129ce:	18ba      	adds	r2, r7, r2
 80129d0:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80129d2:	183b      	adds	r3, r7, r0
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	b25a      	sxtb	r2, r3
 80129d8:	0008      	movs	r0, r1
 80129da:	183b      	adds	r3, r7, r0
 80129dc:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 80129de:	183b      	adds	r3, r7, r0
 80129e0:	2205      	movs	r2, #5
 80129e2:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 80129e4:	183b      	adds	r3, r7, r0
 80129e6:	4a21      	ldr	r2, [pc, #132]	; (8012a6c <RegionCN470LinkAdrReq+0x288>)
 80129e8:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 80129ea:	183b      	adds	r3, r7, r0
 80129ec:	2207      	movs	r2, #7
 80129ee:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = CN470_MAX_TX_POWER;
 80129f0:	183b      	adds	r3, r7, r0
 80129f2:	2200      	movs	r2, #0
 80129f4:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80129f6:	183b      	adds	r3, r7, r0
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	6812      	ldr	r2, [r2, #0]
 80129fc:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80129fe:	0026      	movs	r6, r4
 8012a00:	193c      	adds	r4, r7, r4
 8012a02:	0029      	movs	r1, r5
 8012a04:	187d      	adds	r5, r7, r1
 8012a06:	187b      	adds	r3, r7, r1
 8012a08:	1c9a      	adds	r2, r3, #2
 8012a0a:	187b      	adds	r3, r7, r1
 8012a0c:	1c59      	adds	r1, r3, #1
 8012a0e:	1838      	adds	r0, r7, r0
 8012a10:	002b      	movs	r3, r5
 8012a12:	f001 fedf 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 8012a16:	0003      	movs	r3, r0
 8012a18:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012a1a:	0034      	movs	r4, r6
 8012a1c:	193b      	adds	r3, r7, r4
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	2b07      	cmp	r3, #7
 8012a22:	d106      	bne.n	8012a32 <RegionCN470LinkAdrReq+0x24e>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 8012a24:	2338      	movs	r3, #56	; 0x38
 8012a26:	18f9      	adds	r1, r7, r3
 8012a28:	4b0f      	ldr	r3, [pc, #60]	; (8012a68 <RegionCN470LinkAdrReq+0x284>)
 8012a2a:	2206      	movs	r2, #6
 8012a2c:	0018      	movs	r0, r3
 8012a2e:	f001 fd3c 	bl	80144aa <RegionCommonChanMaskCopy>
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8012a32:	2144      	movs	r1, #68	; 0x44
 8012a34:	187b      	adds	r3, r7, r1
 8012a36:	2201      	movs	r2, #1
 8012a38:	569a      	ldrsb	r2, [r3, r2]
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8012a3e:	187b      	adds	r3, r7, r1
 8012a40:	2202      	movs	r2, #2
 8012a42:	569a      	ldrsb	r2, [r3, r2]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8012a48:	187b      	adds	r3, r7, r1
 8012a4a:	781a      	ldrb	r2, [r3, #0]
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8012a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a52:	224e      	movs	r2, #78	; 0x4e
 8012a54:	18ba      	adds	r2, r7, r2
 8012a56:	7812      	ldrb	r2, [r2, #0]
 8012a58:	701a      	strb	r2, [r3, #0]

    return status;
 8012a5a:	234f      	movs	r3, #79	; 0x4f
 8012a5c:	18fb      	adds	r3, r7, r3
 8012a5e:	781b      	ldrb	r3, [r3, #0]
}
 8012a60:	0018      	movs	r0, r3
 8012a62:	46bd      	mov	sp, r7
 8012a64:	b015      	add	sp, #84	; 0x54
 8012a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a68:	200014b4 	.word	0x200014b4
 8012a6c:	20001024 	.word	0x20001024

08012a70 <RegionCN470RxParamSetupReq>:

uint8_t RegionCN470RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8012a78:	230f      	movs	r3, #15
 8012a7a:	18fb      	adds	r3, r7, r3
 8012a7c:	2207      	movs	r2, #7
 8012a7e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	0018      	movs	r0, r3
 8012a86:	f7ff f9df 	bl	8011e48 <VerifyRfFreq>
 8012a8a:	0003      	movs	r3, r0
 8012a8c:	001a      	movs	r2, r3
 8012a8e:	2301      	movs	r3, #1
 8012a90:	4053      	eors	r3, r2
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d006      	beq.n	8012aa6 <RegionCN470RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8012a98:	220f      	movs	r2, #15
 8012a9a:	18bb      	adds	r3, r7, r2
 8012a9c:	18ba      	adds	r2, r7, r2
 8012a9e:	7812      	ldrb	r2, [r2, #0]
 8012aa0:	2101      	movs	r1, #1
 8012aa2:	438a      	bics	r2, r1
 8012aa4:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE ) == false )
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	b25b      	sxtb	r3, r3
 8012aac:	2205      	movs	r2, #5
 8012aae:	2100      	movs	r1, #0
 8012ab0:	0018      	movs	r0, r3
 8012ab2:	f001 fc51 	bl	8014358 <RegionCommonValueInRange>
 8012ab6:	1e03      	subs	r3, r0, #0
 8012ab8:	d106      	bne.n	8012ac8 <RegionCN470RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8012aba:	220f      	movs	r2, #15
 8012abc:	18bb      	adds	r3, r7, r2
 8012abe:	18ba      	adds	r2, r7, r2
 8012ac0:	7812      	ldrb	r2, [r2, #0]
 8012ac2:	2102      	movs	r1, #2
 8012ac4:	438a      	bics	r2, r1
 8012ac6:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN470_MIN_RX1_DR_OFFSET, CN470_MAX_RX1_DR_OFFSET ) == false )
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	785b      	ldrb	r3, [r3, #1]
 8012acc:	b25b      	sxtb	r3, r3
 8012ace:	2203      	movs	r2, #3
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	0018      	movs	r0, r3
 8012ad4:	f001 fc40 	bl	8014358 <RegionCommonValueInRange>
 8012ad8:	1e03      	subs	r3, r0, #0
 8012ada:	d106      	bne.n	8012aea <RegionCN470RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8012adc:	220f      	movs	r2, #15
 8012ade:	18bb      	adds	r3, r7, r2
 8012ae0:	18ba      	adds	r2, r7, r2
 8012ae2:	7812      	ldrb	r2, [r2, #0]
 8012ae4:	2104      	movs	r1, #4
 8012ae6:	438a      	bics	r2, r1
 8012ae8:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8012aea:	230f      	movs	r3, #15
 8012aec:	18fb      	adds	r3, r7, r3
 8012aee:	781b      	ldrb	r3, [r3, #0]
}
 8012af0:	0018      	movs	r0, r3
 8012af2:	46bd      	mov	sp, r7
 8012af4:	b004      	add	sp, #16
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <RegionCN470NewChannelReq>:

uint8_t RegionCN470NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    // Datarate and frequency KO
    return 0;
 8012b00:	2300      	movs	r3, #0
}
 8012b02:	0018      	movs	r0, r3
 8012b04:	46bd      	mov	sp, r7
 8012b06:	b002      	add	sp, #8
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <RegionCN470TxParamSetupReq>:

int8_t RegionCN470TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b082      	sub	sp, #8
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
    return -1;
 8012b12:	2301      	movs	r3, #1
 8012b14:	425b      	negs	r3, r3
}
 8012b16:	0018      	movs	r0, r3
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	b002      	add	sp, #8
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <RegionCN470DlChannelReq>:

uint8_t RegionCN470DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b082      	sub	sp, #8
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
    return 0;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	0018      	movs	r0, r3
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	b002      	add	sp, #8
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <RegionCN470CalcBackOff>:
{
    return currentDr;
}

void RegionCN470CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b088      	sub	sp, #32
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8012b38:	210c      	movs	r1, #12
 8012b3a:	187b      	adds	r3, r7, r1
 8012b3c:	4a12      	ldr	r2, [pc, #72]	; (8012b88 <RegionCN470CalcBackOff+0x58>)
 8012b3e:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8012b40:	187b      	adds	r3, r7, r1
 8012b42:	4a12      	ldr	r2, [pc, #72]	; (8012b8c <RegionCN470CalcBackOff+0x5c>)
 8012b44:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	785a      	ldrb	r2, [r3, #1]
 8012b4a:	187b      	adds	r3, r7, r1
 8012b4c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	781a      	ldrb	r2, [r3, #0]
 8012b52:	187b      	adds	r3, r7, r1
 8012b54:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	789a      	ldrb	r2, [r3, #2]
 8012b5a:	187b      	adds	r3, r7, r1
 8012b5c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	78da      	ldrb	r2, [r3, #3]
 8012b62:	187b      	adds	r3, r7, r1
 8012b64:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	685a      	ldr	r2, [r3, #4]
 8012b6a:	187b      	adds	r3, r7, r1
 8012b6c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	689a      	ldr	r2, [r3, #8]
 8012b72:	187b      	adds	r3, r7, r1
 8012b74:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8012b76:	187b      	adds	r3, r7, r1
 8012b78:	0018      	movs	r0, r3
 8012b7a:	f001 ffd5 	bl	8014b28 <RegionCommonCalcBackOff>
}
 8012b7e:	46c0      	nop			; (mov r8, r8)
 8012b80:	46bd      	mov	sp, r7
 8012b82:	b008      	add	sp, #32
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	46c0      	nop			; (mov r8, r8)
 8012b88:	20001024 	.word	0x20001024
 8012b8c:	200014a4 	.word	0x200014a4

08012b90 <RegionCN470NextChannel>:

LoRaMacStatus_t RegionCN470NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012b90:	b5b0      	push	{r4, r5, r7, lr}
 8012b92:	b0a2      	sub	sp, #136	; 0x88
 8012b94:	af02      	add	r7, sp, #8
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
 8012b9c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8012b9e:	237f      	movs	r3, #127	; 0x7f
 8012ba0:	18fb      	adds	r3, r7, r3
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8012ba6:	2377      	movs	r3, #119	; 0x77
 8012ba8:	18fb      	adds	r3, r7, r3
 8012baa:	2200      	movs	r2, #0
 8012bac:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 8012bae:	2314      	movs	r3, #20
 8012bb0:	18fb      	adds	r3, r7, r3
 8012bb2:	0018      	movs	r0, r3
 8012bb4:	2360      	movs	r3, #96	; 0x60
 8012bb6:	001a      	movs	r2, r3
 8012bb8:	2100      	movs	r1, #0
 8012bba:	f013 f9a5 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	67bb      	str	r3, [r7, #120]	; 0x78

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 6 ) == 0 )
 8012bc2:	4b47      	ldr	r3, [pc, #284]	; (8012ce0 <RegionCN470NextChannel+0x150>)
 8012bc4:	2206      	movs	r2, #6
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	0018      	movs	r0, r3
 8012bca:	f001 fc2d 	bl	8014428 <RegionCommonCountChannels>
 8012bce:	1e03      	subs	r3, r0, #0
 8012bd0:	d11f      	bne.n	8012c12 <RegionCN470NextChannel+0x82>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] = 0xFFFF;
 8012bd2:	4a44      	ldr	r2, [pc, #272]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012bd4:	2392      	movs	r3, #146	; 0x92
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	2101      	movs	r1, #1
 8012bda:	4249      	negs	r1, r1
 8012bdc:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[1] = 0xFFFF;
 8012bde:	4b41      	ldr	r3, [pc, #260]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012be0:	4a41      	ldr	r2, [pc, #260]	; (8012ce8 <RegionCN470NextChannel+0x158>)
 8012be2:	2101      	movs	r1, #1
 8012be4:	4249      	negs	r1, r1
 8012be6:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMask[2] = 0xFFFF;
 8012be8:	4b3e      	ldr	r3, [pc, #248]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012bea:	4a40      	ldr	r2, [pc, #256]	; (8012cec <RegionCN470NextChannel+0x15c>)
 8012bec:	2101      	movs	r1, #1
 8012bee:	4249      	negs	r1, r1
 8012bf0:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMask[3] = 0xFFFF;
 8012bf2:	4b3c      	ldr	r3, [pc, #240]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012bf4:	4a3e      	ldr	r2, [pc, #248]	; (8012cf0 <RegionCN470NextChannel+0x160>)
 8012bf6:	2101      	movs	r1, #1
 8012bf8:	4249      	negs	r1, r1
 8012bfa:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMask[4] = 0xFFFF;
 8012bfc:	4a39      	ldr	r2, [pc, #228]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012bfe:	2393      	movs	r3, #147	; 0x93
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	2101      	movs	r1, #1
 8012c04:	4249      	negs	r1, r1
 8012c06:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[5] = 0xFFFF;
 8012c08:	4b36      	ldr	r3, [pc, #216]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012c0a:	4a3a      	ldr	r2, [pc, #232]	; (8012cf4 <RegionCN470NextChannel+0x164>)
 8012c0c:	2101      	movs	r1, #1
 8012c0e:	4249      	negs	r1, r1
 8012c10:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681c      	ldr	r4, [r3, #0]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	0018      	movs	r0, r3
 8012c1c:	f00a f80b 	bl	801cc36 <TimerGetElapsedTime>
 8012c20:	0003      	movs	r3, r0
 8012c22:	429c      	cmp	r4, r3
 8012c24:	d821      	bhi.n	8012c6a <RegionCN470NextChannel+0xda>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, CN470_MAX_NB_BANDS );
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	7a58      	ldrb	r0, [r3, #9]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	7a99      	ldrb	r1, [r3, #10]
 8012c34:	4a30      	ldr	r2, [pc, #192]	; (8012cf8 <RegionCN470NextChannel+0x168>)
 8012c36:	2301      	movs	r3, #1
 8012c38:	f001 fc81 	bl	801453e <RegionCommonUpdateBandTimeOff>
 8012c3c:	0003      	movs	r3, r0
 8012c3e:	67bb      	str	r3, [r7, #120]	; 0x78

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	7a1b      	ldrb	r3, [r3, #8]
 8012c44:	b25b      	sxtb	r3, r3
 8012c46:	b2d8      	uxtb	r0, r3
 8012c48:	237f      	movs	r3, #127	; 0x7f
 8012c4a:	18fc      	adds	r4, r7, r3
 8012c4c:	4d2a      	ldr	r5, [pc, #168]	; (8012cf8 <RegionCN470NextChannel+0x168>)
 8012c4e:	4a25      	ldr	r2, [pc, #148]	; (8012ce4 <RegionCN470NextChannel+0x154>)
 8012c50:	4923      	ldr	r1, [pc, #140]	; (8012ce0 <RegionCN470NextChannel+0x150>)
 8012c52:	2377      	movs	r3, #119	; 0x77
 8012c54:	18fb      	adds	r3, r7, r3
 8012c56:	9301      	str	r3, [sp, #4]
 8012c58:	2314      	movs	r3, #20
 8012c5a:	18fb      	adds	r3, r7, r3
 8012c5c:	9300      	str	r3, [sp, #0]
 8012c5e:	002b      	movs	r3, r5
 8012c60:	f7ff f934 	bl	8011ecc <CountNbOfEnabledChannels>
 8012c64:	0003      	movs	r3, r0
 8012c66:	7023      	strb	r3, [r4, #0]
 8012c68:	e010      	b.n	8012c8c <RegionCN470NextChannel+0xfc>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8012c6a:	2177      	movs	r1, #119	; 0x77
 8012c6c:	187b      	adds	r3, r7, r1
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	3301      	adds	r3, #1
 8012c72:	b2da      	uxtb	r2, r3
 8012c74:	187b      	adds	r3, r7, r1
 8012c76:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681c      	ldr	r4, [r3, #0]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	0018      	movs	r0, r3
 8012c82:	f009 ffd8 	bl	801cc36 <TimerGetElapsedTime>
 8012c86:	0003      	movs	r3, r0
 8012c88:	1ae3      	subs	r3, r4, r3
 8012c8a:	67bb      	str	r3, [r7, #120]	; 0x78
    }

    if( nbEnabledChannels > 0 )
 8012c8c:	237f      	movs	r3, #127	; 0x7f
 8012c8e:	18fb      	adds	r3, r7, r3
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d012      	beq.n	8012cbc <RegionCN470NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012c96:	237f      	movs	r3, #127	; 0x7f
 8012c98:	18fb      	adds	r3, r7, r3
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	0019      	movs	r1, r3
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	f009 fff1 	bl	801cc88 <randr>
 8012ca6:	0002      	movs	r2, r0
 8012ca8:	2314      	movs	r3, #20
 8012caa:	18fb      	adds	r3, r7, r3
 8012cac:	5c9a      	ldrb	r2, [r3, r2]
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	e00d      	b.n	8012cd8 <RegionCN470NextChannel+0x148>
    }
    else
    {
        if( delayTx > 0 )
 8012cbc:	2377      	movs	r3, #119	; 0x77
 8012cbe:	18fb      	adds	r3, r7, r3
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d004      	beq.n	8012cd0 <RegionCN470NextChannel+0x140>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cca:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8012ccc:	230b      	movs	r3, #11
 8012cce:	e003      	b.n	8012cd8 <RegionCN470NextChannel+0x148>
        }
        // Datarate not supported by any channel
        *time = 0;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8012cd6:	230c      	movs	r3, #12
    }
}
 8012cd8:	0018      	movs	r0, r3
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	b020      	add	sp, #128	; 0x80
 8012cde:	bdb0      	pop	{r4, r5, r7, pc}
 8012ce0:	200014b4 	.word	0x200014b4
 8012ce4:	20001024 	.word	0x20001024
 8012ce8:	00000492 	.word	0x00000492
 8012cec:	00000494 	.word	0x00000494
 8012cf0:	00000496 	.word	0x00000496
 8012cf4:	0000049a 	.word	0x0000049a
 8012cf8:	200014a4 	.word	0x200014a4

08012cfc <RegionCN470ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionCN470ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8012cfc:	b590      	push	{r4, r7, lr}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	0004      	movs	r4, r0
 8012d04:	0008      	movs	r0, r1
 8012d06:	0011      	movs	r1, r2
 8012d08:	1dfb      	adds	r3, r7, #7
 8012d0a:	1c22      	adds	r2, r4, #0
 8012d0c:	701a      	strb	r2, [r3, #0]
 8012d0e:	1dbb      	adds	r3, r7, #6
 8012d10:	1c02      	adds	r2, r0, #0
 8012d12:	701a      	strb	r2, [r3, #0]
 8012d14:	1d7b      	adds	r3, r7, #5
 8012d16:	1c0a      	adds	r2, r1, #0
 8012d18:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8012d1a:	1dbb      	adds	r3, r7, #6
 8012d1c:	781a      	ldrb	r2, [r3, #0]
 8012d1e:	1d7b      	adds	r3, r7, #5
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b2da      	uxtb	r2, r3
 8012d26:	210f      	movs	r1, #15
 8012d28:	187b      	adds	r3, r7, r1
 8012d2a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8012d2c:	187b      	adds	r3, r7, r1
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	2b7f      	cmp	r3, #127	; 0x7f
 8012d32:	d903      	bls.n	8012d3c <RegionCN470ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8012d34:	230f      	movs	r3, #15
 8012d36:	18fb      	adds	r3, r7, r3
 8012d38:	2200      	movs	r2, #0
 8012d3a:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8012d3c:	230f      	movs	r3, #15
 8012d3e:	18fb      	adds	r3, r7, r3
 8012d40:	781b      	ldrb	r3, [r3, #0]
}
 8012d42:	0018      	movs	r0, r3
 8012d44:	46bd      	mov	sp, r7
 8012d46:	b005      	add	sp, #20
 8012d48:	bd90      	pop	{r4, r7, pc}

08012d4a <GetNextLowerTxDr>:
 */
static RegionCN779NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8012d4a:	b580      	push	{r7, lr}
 8012d4c:	b084      	sub	sp, #16
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	0002      	movs	r2, r0
 8012d52:	1dfb      	adds	r3, r7, #7
 8012d54:	701a      	strb	r2, [r3, #0]
 8012d56:	1dbb      	adds	r3, r7, #6
 8012d58:	1c0a      	adds	r2, r1, #0
 8012d5a:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8012d5c:	230f      	movs	r3, #15
 8012d5e:	18fb      	adds	r3, r7, r3
 8012d60:	2200      	movs	r2, #0
 8012d62:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8012d64:	1dfa      	adds	r2, r7, #7
 8012d66:	1dbb      	adds	r3, r7, #6
 8012d68:	7812      	ldrb	r2, [r2, #0]
 8012d6a:	b252      	sxtb	r2, r2
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	b25b      	sxtb	r3, r3
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d105      	bne.n	8012d80 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8012d74:	230f      	movs	r3, #15
 8012d76:	18fb      	adds	r3, r7, r3
 8012d78:	1dba      	adds	r2, r7, #6
 8012d7a:	7812      	ldrb	r2, [r2, #0]
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	e005      	b.n	8012d8c <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8012d80:	1dfb      	adds	r3, r7, #7
 8012d82:	781a      	ldrb	r2, [r3, #0]
 8012d84:	230f      	movs	r3, #15
 8012d86:	18fb      	adds	r3, r7, r3
 8012d88:	3a01      	subs	r2, #1
 8012d8a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8012d8c:	230f      	movs	r3, #15
 8012d8e:	18fb      	adds	r3, r7, r3
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	b25b      	sxtb	r3, r3
}
 8012d94:	0018      	movs	r0, r3
 8012d96:	46bd      	mov	sp, r7
 8012d98:	b004      	add	sp, #16
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsCN779[drIndex] )
 8012da4:	4b09      	ldr	r3, [pc, #36]	; (8012dcc <GetBandwidth+0x30>)
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	0092      	lsls	r2, r2, #2
 8012daa:	58d3      	ldr	r3, [r2, r3]
 8012dac:	4a08      	ldr	r2, [pc, #32]	; (8012dd0 <GetBandwidth+0x34>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d004      	beq.n	8012dbc <GetBandwidth+0x20>
 8012db2:	4a08      	ldr	r2, [pc, #32]	; (8012dd4 <GetBandwidth+0x38>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d003      	beq.n	8012dc0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	e002      	b.n	8012dc2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	e000      	b.n	8012dc2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8012dc0:	2302      	movs	r3, #2
    }
}
 8012dc2:	0018      	movs	r0, r3
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	b002      	add	sp, #8
 8012dc8:	bd80      	pop	{r7, pc}
 8012dca:	46c0      	nop			; (mov r8, r8)
 8012dcc:	08028c4c 	.word	0x08028c4c
 8012dd0:	0003d090 	.word	0x0003d090
 8012dd4:	0007a120 	.word	0x0007a120

08012dd8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8012dd8:	b590      	push	{r4, r7, lr}
 8012dda:	b085      	sub	sp, #20
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	0004      	movs	r4, r0
 8012de0:	0008      	movs	r0, r1
 8012de2:	0011      	movs	r1, r2
 8012de4:	603b      	str	r3, [r7, #0]
 8012de6:	1dfb      	adds	r3, r7, #7
 8012de8:	1c22      	adds	r2, r4, #0
 8012dea:	701a      	strb	r2, [r3, #0]
 8012dec:	1dbb      	adds	r3, r7, #6
 8012dee:	1c02      	adds	r2, r0, #0
 8012df0:	701a      	strb	r2, [r3, #0]
 8012df2:	1d7b      	adds	r3, r7, #5
 8012df4:	1c0a      	adds	r2, r1, #0
 8012df6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8012df8:	210f      	movs	r1, #15
 8012dfa:	187b      	adds	r3, r7, r1
 8012dfc:	1dfa      	adds	r2, r7, #7
 8012dfe:	7812      	ldrb	r2, [r2, #0]
 8012e00:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8012e02:	187a      	adds	r2, r7, r1
 8012e04:	1dbb      	adds	r3, r7, #6
 8012e06:	1df9      	adds	r1, r7, #7
 8012e08:	780c      	ldrb	r4, [r1, #0]
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	b258      	sxtb	r0, r3
 8012e0e:	b261      	sxtb	r1, r4
 8012e10:	4288      	cmp	r0, r1
 8012e12:	da00      	bge.n	8012e16 <LimitTxPower+0x3e>
 8012e14:	1c23      	adds	r3, r4, #0
 8012e16:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8012e18:	230f      	movs	r3, #15
 8012e1a:	18fb      	adds	r3, r7, r3
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	b25b      	sxtb	r3, r3
}
 8012e20:	0018      	movs	r0, r3
 8012e22:	46bd      	mov	sp, r7
 8012e24:	b005      	add	sp, #20
 8012e26:	bd90      	pop	{r4, r7, pc}

08012e28 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012e30:	4b0e      	ldr	r3, [pc, #56]	; (8012e6c <VerifyRfFreq+0x44>)
 8012e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	0010      	movs	r0, r2
 8012e38:	4798      	blx	r3
 8012e3a:	0003      	movs	r3, r0
 8012e3c:	001a      	movs	r2, r3
 8012e3e:	2301      	movs	r3, #1
 8012e40:	4053      	eors	r3, r2
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <VerifyRfFreq+0x24>
    {
        return false;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e00a      	b.n	8012e62 <VerifyRfFreq+0x3a>
    }

    if( ( freq < 779500000 ) || ( freq > 786500000 ) )
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	4a08      	ldr	r2, [pc, #32]	; (8012e70 <VerifyRfFreq+0x48>)
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d903      	bls.n	8012e5c <VerifyRfFreq+0x34>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4a07      	ldr	r2, [pc, #28]	; (8012e74 <VerifyRfFreq+0x4c>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d901      	bls.n	8012e60 <VerifyRfFreq+0x38>
    {
        return false;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e000      	b.n	8012e62 <VerifyRfFreq+0x3a>
    }
    return true;
 8012e60:	2301      	movs	r3, #1
}
 8012e62:	0018      	movs	r0, r3
 8012e64:	46bd      	mov	sp, r7
 8012e66:	b002      	add	sp, #8
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	46c0      	nop			; (mov r8, r8)
 8012e6c:	080293d8 	.word	0x080293d8
 8012e70:	2e7639df 	.word	0x2e7639df
 8012e74:	2ee109a0 	.word	0x2ee109a0

08012e78 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8012e78:	b5b0      	push	{r4, r5, r7, lr}
 8012e7a:	b086      	sub	sp, #24
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60ba      	str	r2, [r7, #8]
 8012e80:	607b      	str	r3, [r7, #4]
 8012e82:	230f      	movs	r3, #15
 8012e84:	18fb      	adds	r3, r7, r3
 8012e86:	1c02      	adds	r2, r0, #0
 8012e88:	701a      	strb	r2, [r3, #0]
 8012e8a:	230e      	movs	r3, #14
 8012e8c:	18fb      	adds	r3, r7, r3
 8012e8e:	1c0a      	adds	r2, r1, #0
 8012e90:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8012e92:	2317      	movs	r3, #23
 8012e94:	18fb      	adds	r3, r7, r3
 8012e96:	2200      	movs	r2, #0
 8012e98:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8012e9a:	2316      	movs	r3, #22
 8012e9c:	18fb      	adds	r3, r7, r3
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < CN779_MAX_NB_CHANNELS; i += 16, k++ )
 8012ea2:	2315      	movs	r3, #21
 8012ea4:	18fb      	adds	r3, r7, r3
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	701a      	strb	r2, [r3, #0]
 8012eaa:	2314      	movs	r3, #20
 8012eac:	18fb      	adds	r3, r7, r3
 8012eae:	2200      	movs	r2, #0
 8012eb0:	701a      	strb	r2, [r3, #0]
 8012eb2:	e0b4      	b.n	801301e <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012eb4:	2313      	movs	r3, #19
 8012eb6:	18fb      	adds	r3, r7, r3
 8012eb8:	2200      	movs	r2, #0
 8012eba:	701a      	strb	r2, [r3, #0]
 8012ebc:	e09d      	b.n	8012ffa <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8012ebe:	2314      	movs	r3, #20
 8012ec0:	18fb      	adds	r3, r7, r3
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	005b      	lsls	r3, r3, #1
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	18d3      	adds	r3, r2, r3
 8012eca:	881b      	ldrh	r3, [r3, #0]
 8012ecc:	001a      	movs	r2, r3
 8012ece:	2313      	movs	r3, #19
 8012ed0:	18fb      	adds	r3, r7, r3
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	411a      	asrs	r2, r3
 8012ed6:	0013      	movs	r3, r2
 8012ed8:	2201      	movs	r2, #1
 8012eda:	4013      	ands	r3, r2
 8012edc:	d100      	bne.n	8012ee0 <CountNbOfEnabledChannels+0x68>
 8012ede:	e086      	b.n	8012fee <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8012ee0:	2315      	movs	r3, #21
 8012ee2:	18fb      	adds	r3, r7, r3
 8012ee4:	781a      	ldrb	r2, [r3, #0]
 8012ee6:	2313      	movs	r3, #19
 8012ee8:	18fb      	adds	r3, r7, r3
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	18d3      	adds	r3, r2, r3
 8012eee:	001a      	movs	r2, r3
 8012ef0:	0013      	movs	r3, r2
 8012ef2:	005b      	lsls	r3, r3, #1
 8012ef4:	189b      	adds	r3, r3, r2
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	001a      	movs	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	189b      	adds	r3, r3, r2
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d06f      	beq.n	8012fe4 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8012f04:	230f      	movs	r3, #15
 8012f06:	18fb      	adds	r3, r7, r3
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	4053      	eors	r3, r2
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d008      	beq.n	8012f26 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( CN779_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8012f14:	2313      	movs	r3, #19
 8012f16:	18fb      	adds	r3, r7, r3
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	2207      	movs	r2, #7
 8012f1c:	411a      	asrs	r2, r3
 8012f1e:	0013      	movs	r3, r2
 8012f20:	2201      	movs	r2, #1
 8012f22:	4013      	ands	r3, r2
 8012f24:	d060      	beq.n	8012fe8 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8012f26:	230e      	movs	r3, #14
 8012f28:	18fb      	adds	r3, r7, r3
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	5618      	ldrsb	r0, [r3, r0]
 8012f2e:	2415      	movs	r4, #21
 8012f30:	193b      	adds	r3, r7, r4
 8012f32:	781a      	ldrb	r2, [r3, #0]
 8012f34:	2513      	movs	r5, #19
 8012f36:	197b      	adds	r3, r7, r5
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	18d3      	adds	r3, r2, r3
 8012f3c:	001a      	movs	r2, r3
 8012f3e:	0013      	movs	r3, r2
 8012f40:	005b      	lsls	r3, r3, #1
 8012f42:	189b      	adds	r3, r3, r2
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	001a      	movs	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	189b      	adds	r3, r3, r2
 8012f4c:	7a1b      	ldrb	r3, [r3, #8]
 8012f4e:	011b      	lsls	r3, r3, #4
 8012f50:	b25b      	sxtb	r3, r3
 8012f52:	111b      	asrs	r3, r3, #4
 8012f54:	b25b      	sxtb	r3, r3
 8012f56:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8012f58:	193b      	adds	r3, r7, r4
 8012f5a:	781a      	ldrb	r2, [r3, #0]
 8012f5c:	197b      	adds	r3, r7, r5
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	18d3      	adds	r3, r2, r3
 8012f62:	001a      	movs	r2, r3
 8012f64:	0013      	movs	r3, r2
 8012f66:	005b      	lsls	r3, r3, #1
 8012f68:	189b      	adds	r3, r3, r2
 8012f6a:	009b      	lsls	r3, r3, #2
 8012f6c:	001a      	movs	r2, r3
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	189b      	adds	r3, r3, r2
 8012f72:	7a1b      	ldrb	r3, [r3, #8]
 8012f74:	b25b      	sxtb	r3, r3
 8012f76:	111b      	asrs	r3, r3, #4
 8012f78:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8012f7a:	001a      	movs	r2, r3
 8012f7c:	f001 f9ec 	bl	8014358 <RegionCommonValueInRange>
 8012f80:	1e03      	subs	r3, r0, #0
 8012f82:	d033      	beq.n	8012fec <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8012f84:	2315      	movs	r3, #21
 8012f86:	18fb      	adds	r3, r7, r3
 8012f88:	781a      	ldrb	r2, [r3, #0]
 8012f8a:	2313      	movs	r3, #19
 8012f8c:	18fb      	adds	r3, r7, r3
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	18d3      	adds	r3, r2, r3
 8012f92:	001a      	movs	r2, r3
 8012f94:	0013      	movs	r3, r2
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	189b      	adds	r3, r3, r2
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	001a      	movs	r2, r3
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	189b      	adds	r3, r3, r2
 8012fa2:	7a5b      	ldrb	r3, [r3, #9]
 8012fa4:	011b      	lsls	r3, r3, #4
 8012fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fa8:	18d3      	adds	r3, r2, r3
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d006      	beq.n	8012fbe <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8012fb0:	2116      	movs	r1, #22
 8012fb2:	187b      	adds	r3, r7, r1
 8012fb4:	781a      	ldrb	r2, [r3, #0]
 8012fb6:	187b      	adds	r3, r7, r1
 8012fb8:	3201      	adds	r2, #1
 8012fba:	701a      	strb	r2, [r3, #0]
                    continue;
 8012fbc:	e017      	b.n	8012fee <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8012fbe:	2217      	movs	r2, #23
 8012fc0:	18bb      	adds	r3, r7, r2
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	18ba      	adds	r2, r7, r2
 8012fc6:	1c59      	adds	r1, r3, #1
 8012fc8:	7011      	strb	r1, [r2, #0]
 8012fca:	001a      	movs	r2, r3
 8012fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fce:	189b      	adds	r3, r3, r2
 8012fd0:	2215      	movs	r2, #21
 8012fd2:	18b9      	adds	r1, r7, r2
 8012fd4:	2213      	movs	r2, #19
 8012fd6:	18ba      	adds	r2, r7, r2
 8012fd8:	7809      	ldrb	r1, [r1, #0]
 8012fda:	7812      	ldrb	r2, [r2, #0]
 8012fdc:	188a      	adds	r2, r1, r2
 8012fde:	b2d2      	uxtb	r2, r2
 8012fe0:	701a      	strb	r2, [r3, #0]
 8012fe2:	e004      	b.n	8012fee <CountNbOfEnabledChannels+0x176>
                    continue;
 8012fe4:	46c0      	nop			; (mov r8, r8)
 8012fe6:	e002      	b.n	8012fee <CountNbOfEnabledChannels+0x176>
                        continue;
 8012fe8:	46c0      	nop			; (mov r8, r8)
 8012fea:	e000      	b.n	8012fee <CountNbOfEnabledChannels+0x176>
                    continue;
 8012fec:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8012fee:	2113      	movs	r1, #19
 8012ff0:	187b      	adds	r3, r7, r1
 8012ff2:	781a      	ldrb	r2, [r3, #0]
 8012ff4:	187b      	adds	r3, r7, r1
 8012ff6:	3201      	adds	r2, #1
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	2313      	movs	r3, #19
 8012ffc:	18fb      	adds	r3, r7, r3
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	2b0f      	cmp	r3, #15
 8013002:	d800      	bhi.n	8013006 <CountNbOfEnabledChannels+0x18e>
 8013004:	e75b      	b.n	8012ebe <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < CN779_MAX_NB_CHANNELS; i += 16, k++ )
 8013006:	2215      	movs	r2, #21
 8013008:	18bb      	adds	r3, r7, r2
 801300a:	18ba      	adds	r2, r7, r2
 801300c:	7812      	ldrb	r2, [r2, #0]
 801300e:	3210      	adds	r2, #16
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	2114      	movs	r1, #20
 8013014:	187b      	adds	r3, r7, r1
 8013016:	781a      	ldrb	r2, [r3, #0]
 8013018:	187b      	adds	r3, r7, r1
 801301a:	3201      	adds	r2, #1
 801301c:	701a      	strb	r2, [r3, #0]
 801301e:	2315      	movs	r3, #21
 8013020:	18fb      	adds	r3, r7, r3
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	2b0f      	cmp	r3, #15
 8013026:	d800      	bhi.n	801302a <CountNbOfEnabledChannels+0x1b2>
 8013028:	e744      	b.n	8012eb4 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 801302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302c:	2216      	movs	r2, #22
 801302e:	18ba      	adds	r2, r7, r2
 8013030:	7812      	ldrb	r2, [r2, #0]
 8013032:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8013034:	2317      	movs	r3, #23
 8013036:	18fb      	adds	r3, r7, r3
 8013038:	781b      	ldrb	r3, [r3, #0]
}
 801303a:	0018      	movs	r0, r3
 801303c:	46bd      	mov	sp, r7
 801303e:	b006      	add	sp, #24
 8013040:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013044 <RegionCN779GetPhyParam>:

PhyParam_t RegionCN779GetPhyParam( GetPhyParams_t* getPhy )
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801304c:	2308      	movs	r3, #8
 801304e:	18fb      	adds	r3, r7, r3
 8013050:	2200      	movs	r2, #0
 8013052:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b34      	cmp	r3, #52	; 0x34
 801305a:	d900      	bls.n	801305e <RegionCN779GetPhyParam+0x1a>
 801305c:	e0cd      	b.n	80131fa <RegionCN779GetPhyParam+0x1b6>
 801305e:	009a      	lsls	r2, r3, #2
 8013060:	4b6d      	ldr	r3, [pc, #436]	; (8013218 <RegionCN779GetPhyParam+0x1d4>)
 8013062:	18d3      	adds	r3, r2, r3
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = CN779_RX_MIN_DATARATE;
 8013068:	2308      	movs	r3, #8
 801306a:	18fb      	adds	r3, r7, r3
 801306c:	2200      	movs	r2, #0
 801306e:	601a      	str	r2, [r3, #0]
            break;
 8013070:	e0c4      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = CN779_TX_MIN_DATARATE;
 8013072:	2308      	movs	r3, #8
 8013074:	18fb      	adds	r3, r7, r3
 8013076:	2200      	movs	r2, #0
 8013078:	601a      	str	r2, [r3, #0]
            break;
 801307a:	e0bf      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = CN779_DEFAULT_DATARATE;
 801307c:	2308      	movs	r3, #8
 801307e:	18fb      	adds	r3, r7, r3
 8013080:	2200      	movs	r2, #0
 8013082:	601a      	str	r2, [r3, #0]
            break;
 8013084:	e0ba      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, CN779_TX_MIN_DATARATE );
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	785b      	ldrb	r3, [r3, #1]
 801308a:	b25b      	sxtb	r3, r3
 801308c:	2100      	movs	r1, #0
 801308e:	0018      	movs	r0, r3
 8013090:	f7ff fe5b 	bl	8012d4a <GetNextLowerTxDr>
 8013094:	0003      	movs	r3, r0
 8013096:	001a      	movs	r2, r3
 8013098:	2308      	movs	r3, #8
 801309a:	18fb      	adds	r3, r7, r3
 801309c:	601a      	str	r2, [r3, #0]
            break;
 801309e:	e0ad      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = CN779_MAX_TX_POWER;
 80130a0:	2308      	movs	r3, #8
 80130a2:	18fb      	adds	r3, r7, r3
 80130a4:	2200      	movs	r2, #0
 80130a6:	601a      	str	r2, [r3, #0]
            break;
 80130a8:	e0a8      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = CN779_DEFAULT_TX_POWER;
 80130aa:	2308      	movs	r3, #8
 80130ac:	18fb      	adds	r3, r7, r3
 80130ae:	2200      	movs	r2, #0
 80130b0:	601a      	str	r2, [r3, #0]
            break;
 80130b2:	e0a3      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = CN779_ADR_ACK_LIMIT;
 80130b4:	2308      	movs	r3, #8
 80130b6:	18fb      	adds	r3, r7, r3
 80130b8:	2240      	movs	r2, #64	; 0x40
 80130ba:	601a      	str	r2, [r3, #0]
            break;
 80130bc:	e09e      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = CN779_ADR_ACK_DELAY;
 80130be:	2308      	movs	r3, #8
 80130c0:	18fb      	adds	r3, r7, r3
 80130c2:	2220      	movs	r2, #32
 80130c4:	601a      	str	r2, [r3, #0]
            break;
 80130c6:	e099      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateCN779[getPhy->Datarate];
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	785b      	ldrb	r3, [r3, #1]
 80130cc:	b25b      	sxtb	r3, r3
 80130ce:	001a      	movs	r2, r3
 80130d0:	4b52      	ldr	r3, [pc, #328]	; (801321c <RegionCN779GetPhyParam+0x1d8>)
 80130d2:	5c9b      	ldrb	r3, [r3, r2]
 80130d4:	001a      	movs	r2, r3
 80130d6:	2308      	movs	r3, #8
 80130d8:	18fb      	adds	r3, r7, r3
 80130da:	601a      	str	r2, [r3, #0]
            break;
 80130dc:	e08e      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN779[getPhy->Datarate];
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	785b      	ldrb	r3, [r3, #1]
 80130e2:	b25b      	sxtb	r3, r3
 80130e4:	001a      	movs	r2, r3
 80130e6:	4b4e      	ldr	r3, [pc, #312]	; (8013220 <RegionCN779GetPhyParam+0x1dc>)
 80130e8:	5c9b      	ldrb	r3, [r3, r2]
 80130ea:	001a      	movs	r2, r3
 80130ec:	2308      	movs	r3, #8
 80130ee:	18fb      	adds	r3, r7, r3
 80130f0:	601a      	str	r2, [r3, #0]
            break;
 80130f2:	e083      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = CN779_DUTY_CYCLE_ENABLED;
 80130f4:	2308      	movs	r3, #8
 80130f6:	18fb      	adds	r3, r7, r3
 80130f8:	2201      	movs	r2, #1
 80130fa:	601a      	str	r2, [r3, #0]
            break;
 80130fc:	e07e      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = CN779_MAX_RX_WINDOW;
 80130fe:	2308      	movs	r3, #8
 8013100:	18fb      	adds	r3, r7, r3
 8013102:	4a48      	ldr	r2, [pc, #288]	; (8013224 <RegionCN779GetPhyParam+0x1e0>)
 8013104:	601a      	str	r2, [r3, #0]
            break;
 8013106:	e079      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = CN779_RECEIVE_DELAY1;
 8013108:	2308      	movs	r3, #8
 801310a:	18fb      	adds	r3, r7, r3
 801310c:	22fa      	movs	r2, #250	; 0xfa
 801310e:	0092      	lsls	r2, r2, #2
 8013110:	601a      	str	r2, [r3, #0]
            break;
 8013112:	e073      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = CN779_RECEIVE_DELAY2;
 8013114:	2308      	movs	r3, #8
 8013116:	18fb      	adds	r3, r7, r3
 8013118:	22fa      	movs	r2, #250	; 0xfa
 801311a:	00d2      	lsls	r2, r2, #3
 801311c:	601a      	str	r2, [r3, #0]
            break;
 801311e:	e06d      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = CN779_JOIN_ACCEPT_DELAY1;
 8013120:	2308      	movs	r3, #8
 8013122:	18fb      	adds	r3, r7, r3
 8013124:	4a40      	ldr	r2, [pc, #256]	; (8013228 <RegionCN779GetPhyParam+0x1e4>)
 8013126:	601a      	str	r2, [r3, #0]
            break;
 8013128:	e068      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = CN779_JOIN_ACCEPT_DELAY2;
 801312a:	2308      	movs	r3, #8
 801312c:	18fb      	adds	r3, r7, r3
 801312e:	4a3f      	ldr	r2, [pc, #252]	; (801322c <RegionCN779GetPhyParam+0x1e8>)
 8013130:	601a      	str	r2, [r3, #0]
            break;
 8013132:	e063      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = CN779_MAX_FCNT_GAP;
 8013134:	2308      	movs	r3, #8
 8013136:	18fb      	adds	r3, r7, r3
 8013138:	2280      	movs	r2, #128	; 0x80
 801313a:	01d2      	lsls	r2, r2, #7
 801313c:	601a      	str	r2, [r3, #0]
            break;
 801313e:	e05d      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( CN779_ACKTIMEOUT + randr( -CN779_ACK_TIMEOUT_RND, CN779_ACK_TIMEOUT_RND ) );
 8013140:	23fa      	movs	r3, #250	; 0xfa
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4a3a      	ldr	r2, [pc, #232]	; (8013230 <RegionCN779GetPhyParam+0x1ec>)
 8013146:	0019      	movs	r1, r3
 8013148:	0010      	movs	r0, r2
 801314a:	f009 fd9d 	bl	801cc88 <randr>
 801314e:	0003      	movs	r3, r0
 8013150:	22fa      	movs	r2, #250	; 0xfa
 8013152:	00d2      	lsls	r2, r2, #3
 8013154:	4694      	mov	ip, r2
 8013156:	4463      	add	r3, ip
 8013158:	001a      	movs	r2, r3
 801315a:	2308      	movs	r3, #8
 801315c:	18fb      	adds	r3, r7, r3
 801315e:	601a      	str	r2, [r3, #0]
            break;
 8013160:	e04c      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = CN779_DEFAULT_RX1_DR_OFFSET;
 8013162:	2308      	movs	r3, #8
 8013164:	18fb      	adds	r3, r7, r3
 8013166:	2200      	movs	r2, #0
 8013168:	601a      	str	r2, [r3, #0]
            break;
 801316a:	e047      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = CN779_RX_WND_2_FREQ;
 801316c:	2308      	movs	r3, #8
 801316e:	18fb      	adds	r3, r7, r3
 8013170:	4a30      	ldr	r2, [pc, #192]	; (8013234 <RegionCN779GetPhyParam+0x1f0>)
 8013172:	601a      	str	r2, [r3, #0]
            break;
 8013174:	e042      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = CN779_RX_WND_2_DR;
 8013176:	2308      	movs	r3, #8
 8013178:	18fb      	adds	r3, r7, r3
 801317a:	2200      	movs	r2, #0
 801317c:	601a      	str	r2, [r3, #0]
            break;
 801317e:	e03d      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8013180:	2308      	movs	r3, #8
 8013182:	18fb      	adds	r3, r7, r3
 8013184:	4a2c      	ldr	r2, [pc, #176]	; (8013238 <RegionCN779GetPhyParam+0x1f4>)
 8013186:	601a      	str	r2, [r3, #0]
            break;
 8013188:	e038      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801318a:	2308      	movs	r3, #8
 801318c:	18fb      	adds	r3, r7, r3
 801318e:	4a2b      	ldr	r2, [pc, #172]	; (801323c <RegionCN779GetPhyParam+0x1f8>)
 8013190:	601a      	str	r2, [r3, #0]
            break;
 8013192:	e033      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = CN779_MAX_NB_CHANNELS;
 8013194:	2308      	movs	r3, #8
 8013196:	18fb      	adds	r3, r7, r3
 8013198:	2210      	movs	r2, #16
 801319a:	601a      	str	r2, [r3, #0]
            break;
 801319c:	e02e      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801319e:	2308      	movs	r3, #8
 80131a0:	18fb      	adds	r3, r7, r3
 80131a2:	4a27      	ldr	r2, [pc, #156]	; (8013240 <RegionCN779GetPhyParam+0x1fc>)
 80131a4:	601a      	str	r2, [r3, #0]
            break;
 80131a6:	e029      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80131a8:	2308      	movs	r3, #8
 80131aa:	18fb      	adds	r3, r7, r3
 80131ac:	2200      	movs	r2, #0
 80131ae:	601a      	str	r2, [r3, #0]
            break;
 80131b0:	e024      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = CN779_DEFAULT_MAX_EIRP;
 80131b2:	2308      	movs	r3, #8
 80131b4:	18fb      	adds	r3, r7, r3
 80131b6:	4a23      	ldr	r2, [pc, #140]	; (8013244 <RegionCN779GetPhyParam+0x200>)
 80131b8:	601a      	str	r2, [r3, #0]
            break;
 80131ba:	e01f      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = CN779_DEFAULT_ANTENNA_GAIN;
 80131bc:	2308      	movs	r3, #8
 80131be:	18fb      	adds	r3, r7, r3
 80131c0:	4a21      	ldr	r2, [pc, #132]	; (8013248 <RegionCN779GetPhyParam+0x204>)
 80131c2:	601a      	str	r2, [r3, #0]
            break;
 80131c4:	e01a      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = CN779_BEACON_CHANNEL_FREQ;
 80131c6:	2308      	movs	r3, #8
 80131c8:	18fb      	adds	r3, r7, r3
 80131ca:	4a20      	ldr	r2, [pc, #128]	; (801324c <RegionCN779GetPhyParam+0x208>)
 80131cc:	601a      	str	r2, [r3, #0]
            break;
 80131ce:	e015      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = CN779_BEACON_SIZE;
 80131d0:	2108      	movs	r1, #8
 80131d2:	187b      	adds	r3, r7, r1
 80131d4:	2211      	movs	r2, #17
 80131d6:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = CN779_RFU1_SIZE;
 80131d8:	187b      	adds	r3, r7, r1
 80131da:	2202      	movs	r2, #2
 80131dc:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = CN779_RFU2_SIZE;
 80131de:	187b      	adds	r3, r7, r1
 80131e0:	2200      	movs	r2, #0
 80131e2:	709a      	strb	r2, [r3, #2]
            break;
 80131e4:	e00a      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = CN779_BEACON_CHANNEL_DR;
 80131e6:	2308      	movs	r3, #8
 80131e8:	18fb      	adds	r3, r7, r3
 80131ea:	2203      	movs	r2, #3
 80131ec:	601a      	str	r2, [r3, #0]
            break;
 80131ee:	e005      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = CN779_PING_SLOT_CHANNEL_DR;
 80131f0:	2308      	movs	r3, #8
 80131f2:	18fb      	adds	r3, r7, r3
 80131f4:	2203      	movs	r2, #3
 80131f6:	601a      	str	r2, [r3, #0]
            break;
 80131f8:	e000      	b.n	80131fc <RegionCN779GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 80131fa:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80131fc:	210c      	movs	r1, #12
 80131fe:	187b      	adds	r3, r7, r1
 8013200:	2208      	movs	r2, #8
 8013202:	18ba      	adds	r2, r7, r2
 8013204:	6812      	ldr	r2, [r2, #0]
 8013206:	601a      	str	r2, [r3, #0]
 8013208:	187b      	adds	r3, r7, r1
 801320a:	2200      	movs	r2, #0
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	0013      	movs	r3, r2
}
 8013210:	0018      	movs	r0, r3
 8013212:	46bd      	mov	sp, r7
 8013214:	b004      	add	sp, #16
 8013216:	bd80      	pop	{r7, pc}
 8013218:	08028c7c 	.word	0x08028c7c
 801321c:	08028c6c 	.word	0x08028c6c
 8013220:	08028c74 	.word	0x08028c74
 8013224:	00000bb8 	.word	0x00000bb8
 8013228:	00001388 	.word	0x00001388
 801322c:	00001770 	.word	0x00001770
 8013230:	fffffc18 	.word	0xfffffc18
 8013234:	2ed96880 	.word	0x2ed96880
 8013238:	2000159c 	.word	0x2000159c
 801323c:	2000159e 	.word	0x2000159e
 8013240:	200014cc 	.word	0x200014cc
 8013244:	41426666 	.word	0x41426666
 8013248:	4009999a 	.word	0x4009999a
 801324c:	2eca2640 	.word	0x2eca2640

08013250 <RegionCN779SetBandTxDone>:

void RegionCN779SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	7858      	ldrb	r0, [r3, #1]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	0019      	movs	r1, r3
 8013262:	4a0a      	ldr	r2, [pc, #40]	; (801328c <RegionCN779SetBandTxDone+0x3c>)
 8013264:	000b      	movs	r3, r1
 8013266:	005b      	lsls	r3, r3, #1
 8013268:	185b      	adds	r3, r3, r1
 801326a:	009b      	lsls	r3, r3, #2
 801326c:	18d3      	adds	r3, r2, r3
 801326e:	3309      	adds	r3, #9
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	330c      	adds	r3, #12
 8013274:	011a      	lsls	r2, r3, #4
 8013276:	4b05      	ldr	r3, [pc, #20]	; (801328c <RegionCN779SetBandTxDone+0x3c>)
 8013278:	18d1      	adds	r1, r2, r3
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	001a      	movs	r2, r3
 8013280:	f001 f942 	bl	8014508 <RegionCommonSetBandTxDone>
}
 8013284:	46c0      	nop			; (mov r8, r8)
 8013286:	46bd      	mov	sp, r7
 8013288:	b002      	add	sp, #8
 801328a:	bd80      	pop	{r7, pc}
 801328c:	200014cc 	.word	0x200014cc

08013290 <RegionCN779InitDefaults>:

void RegionCN779InitDefaults( InitDefaultsParams_t* params )
{
 8013290:	b590      	push	{r4, r7, lr}
 8013292:	b087      	sub	sp, #28
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
    Band_t bands[CN779_MAX_NB_BANDS] =
 8013298:	2108      	movs	r1, #8
 801329a:	187b      	adds	r3, r7, r1
 801329c:	2264      	movs	r2, #100	; 0x64
 801329e:	801a      	strh	r2, [r3, #0]
 80132a0:	187b      	adds	r3, r7, r1
 80132a2:	2200      	movs	r2, #0
 80132a4:	709a      	strb	r2, [r3, #2]
 80132a6:	187b      	adds	r3, r7, r1
 80132a8:	2200      	movs	r2, #0
 80132aa:	605a      	str	r2, [r3, #4]
 80132ac:	187b      	adds	r3, r7, r1
 80132ae:	2200      	movs	r2, #0
 80132b0:	609a      	str	r2, [r3, #8]
 80132b2:	187b      	adds	r3, r7, r1
 80132b4:	2200      	movs	r2, #0
 80132b6:	60da      	str	r2, [r3, #12]
    {
        CN779_BAND0
    };

    switch( params->Type )
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	791b      	ldrb	r3, [r3, #4]
 80132bc:	2b01      	cmp	r3, #1
 80132be:	d030      	beq.n	8013322 <RegionCN779InitDefaults+0x92>
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	d022      	beq.n	801330a <RegionCN779InitDefaults+0x7a>
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d000      	beq.n	80132ca <RegionCN779InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80132c8:	e038      	b.n	801333c <RegionCN779InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN779_MAX_NB_BANDS );
 80132ca:	2308      	movs	r3, #8
 80132cc:	18f9      	adds	r1, r7, r3
 80132ce:	4b1d      	ldr	r3, [pc, #116]	; (8013344 <RegionCN779InitDefaults+0xb4>)
 80132d0:	2210      	movs	r2, #16
 80132d2:	0018      	movs	r0, r3
 80132d4:	f009 fcee 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) CN779_LC1;
 80132d8:	4b1b      	ldr	r3, [pc, #108]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 80132da:	4a1c      	ldr	r2, [pc, #112]	; (801334c <RegionCN779InitDefaults+0xbc>)
 80132dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80132de:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) CN779_LC2;
 80132e0:	4b19      	ldr	r3, [pc, #100]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 80132e2:	4a1b      	ldr	r2, [pc, #108]	; (8013350 <RegionCN779InitDefaults+0xc0>)
 80132e4:	330c      	adds	r3, #12
 80132e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80132e8:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) CN779_LC3;
 80132ea:	4b17      	ldr	r3, [pc, #92]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 80132ec:	4a19      	ldr	r2, [pc, #100]	; (8013354 <RegionCN779InitDefaults+0xc4>)
 80132ee:	3318      	adds	r3, #24
 80132f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80132f2:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80132f4:	4b14      	ldr	r3, [pc, #80]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 80132f6:	22d2      	movs	r2, #210	; 0xd2
 80132f8:	2107      	movs	r1, #7
 80132fa:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 80132fc:	4916      	ldr	r1, [pc, #88]	; (8013358 <RegionCN779InitDefaults+0xc8>)
 80132fe:	4b17      	ldr	r3, [pc, #92]	; (801335c <RegionCN779InitDefaults+0xcc>)
 8013300:	2201      	movs	r2, #1
 8013302:	0018      	movs	r0, r3
 8013304:	f001 f8d1 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 8013308:	e018      	b.n	801333c <RegionCN779InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d013      	beq.n	801333a <RegionCN779InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6819      	ldr	r1, [r3, #0]
 8013316:	4b0c      	ldr	r3, [pc, #48]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 8013318:	22d4      	movs	r2, #212	; 0xd4
 801331a:	0018      	movs	r0, r3
 801331c:	f009 fcca 	bl	801ccb4 <memcpy1>
            break;
 8013320:	e00b      	b.n	801333a <RegionCN779InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8013322:	4b09      	ldr	r3, [pc, #36]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 8013324:	22d0      	movs	r2, #208	; 0xd0
 8013326:	5a9a      	ldrh	r2, [r3, r2]
 8013328:	4b07      	ldr	r3, [pc, #28]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 801332a:	21d2      	movs	r1, #210	; 0xd2
 801332c:	5a5b      	ldrh	r3, [r3, r1]
 801332e:	4313      	orrs	r3, r2
 8013330:	b299      	uxth	r1, r3
 8013332:	4b05      	ldr	r3, [pc, #20]	; (8013348 <RegionCN779InitDefaults+0xb8>)
 8013334:	22d0      	movs	r2, #208	; 0xd0
 8013336:	5299      	strh	r1, [r3, r2]
            break;
 8013338:	e000      	b.n	801333c <RegionCN779InitDefaults+0xac>
            break;
 801333a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801333c:	46c0      	nop			; (mov r8, r8)
 801333e:	46bd      	mov	sp, r7
 8013340:	b007      	add	sp, #28
 8013342:	bd90      	pop	{r4, r7, pc}
 8013344:	2000158c 	.word	0x2000158c
 8013348:	200014cc 	.word	0x200014cc
 801334c:	0802758c 	.word	0x0802758c
 8013350:	08027598 	.word	0x08027598
 8013354:	080275a4 	.word	0x080275a4
 8013358:	2000159e 	.word	0x2000159e
 801335c:	2000159c 	.word	0x2000159c

08013360 <RegionCN779ApplyCFList>:
            return false;
    }
}

void RegionCN779ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013360:	b590      	push	{r4, r7, lr}
 8013362:	b08b      	sub	sp, #44	; 0x2c
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013368:	2318      	movs	r3, #24
 801336a:	18fb      	adds	r3, r7, r3
 801336c:	2250      	movs	r2, #80	; 0x50
 801336e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	791b      	ldrb	r3, [r3, #4]
 8013374:	2b10      	cmp	r3, #16
 8013376:	d000      	beq.n	801337a <RegionCN779ApplyCFList+0x1a>
 8013378:	e07d      	b.n	8013476 <RegionCN779ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	330f      	adds	r3, #15
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d000      	beq.n	8013388 <RegionCN779ApplyCFList+0x28>
 8013386:	e078      	b.n	801347a <RegionCN779ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013388:	2327      	movs	r3, #39	; 0x27
 801338a:	18fb      	adds	r3, r7, r3
 801338c:	2200      	movs	r2, #0
 801338e:	701a      	strb	r2, [r3, #0]
 8013390:	2326      	movs	r3, #38	; 0x26
 8013392:	18fb      	adds	r3, r7, r3
 8013394:	2203      	movs	r2, #3
 8013396:	701a      	strb	r2, [r3, #0]
 8013398:	e067      	b.n	801346a <RegionCN779ApplyCFList+0x10a>
    {
        if( chanIdx < ( CN779_NUMB_CHANNELS_CF_LIST + CN779_NUMB_DEFAULT_CHANNELS ) )
 801339a:	2326      	movs	r3, #38	; 0x26
 801339c:	18fb      	adds	r3, r7, r3
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	2b07      	cmp	r3, #7
 80133a2:	d82e      	bhi.n	8013402 <RegionCN779ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681a      	ldr	r2, [r3, #0]
 80133a8:	2427      	movs	r4, #39	; 0x27
 80133aa:	193b      	adds	r3, r7, r4
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	18d3      	adds	r3, r2, r3
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	001a      	movs	r2, r3
 80133b4:	2018      	movs	r0, #24
 80133b6:	183b      	adds	r3, r7, r0
 80133b8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80133ba:	183b      	adds	r3, r7, r0
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6819      	ldr	r1, [r3, #0]
 80133c2:	193b      	adds	r3, r7, r4
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	3301      	adds	r3, #1
 80133c8:	18cb      	adds	r3, r1, r3
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	021b      	lsls	r3, r3, #8
 80133ce:	431a      	orrs	r2, r3
 80133d0:	183b      	adds	r3, r7, r0
 80133d2:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80133d4:	183b      	adds	r3, r7, r0
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6819      	ldr	r1, [r3, #0]
 80133dc:	193b      	adds	r3, r7, r4
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	3302      	adds	r3, #2
 80133e2:	18cb      	adds	r3, r1, r3
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	041b      	lsls	r3, r3, #16
 80133e8:	431a      	orrs	r2, r3
 80133ea:	183b      	adds	r3, r7, r0
 80133ec:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80133ee:	183b      	adds	r3, r7, r0
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2264      	movs	r2, #100	; 0x64
 80133f4:	435a      	muls	r2, r3
 80133f6:	183b      	adds	r3, r7, r0
 80133f8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80133fa:	183b      	adds	r3, r7, r0
 80133fc:	2200      	movs	r2, #0
 80133fe:	605a      	str	r2, [r3, #4]
 8013400:	e009      	b.n	8013416 <RegionCN779ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8013402:	2118      	movs	r1, #24
 8013404:	187b      	adds	r3, r7, r1
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 801340a:	187b      	adds	r3, r7, r1
 801340c:	2200      	movs	r2, #0
 801340e:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8013410:	187b      	adds	r3, r7, r1
 8013412:	2200      	movs	r2, #0
 8013414:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8013416:	2318      	movs	r3, #24
 8013418:	18fb      	adds	r3, r7, r3
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00e      	beq.n	801343e <RegionCN779ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8013420:	2110      	movs	r1, #16
 8013422:	187b      	adds	r3, r7, r1
 8013424:	2218      	movs	r2, #24
 8013426:	18ba      	adds	r2, r7, r2
 8013428:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801342a:	187b      	adds	r3, r7, r1
 801342c:	2226      	movs	r2, #38	; 0x26
 801342e:	18ba      	adds	r2, r7, r2
 8013430:	7812      	ldrb	r2, [r2, #0]
 8013432:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionCN779ChannelAdd( &channelAdd );
 8013434:	187b      	adds	r3, r7, r1
 8013436:	0018      	movs	r0, r3
 8013438:	f000 fd7c 	bl	8013f34 <RegionCN779ChannelAdd>
 801343c:	e009      	b.n	8013452 <RegionCN779ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801343e:	210c      	movs	r1, #12
 8013440:	187b      	adds	r3, r7, r1
 8013442:	2226      	movs	r2, #38	; 0x26
 8013444:	18ba      	adds	r2, r7, r2
 8013446:	7812      	ldrb	r2, [r2, #0]
 8013448:	701a      	strb	r2, [r3, #0]

            RegionCN779ChannelsRemove( &channelRemove );
 801344a:	187b      	adds	r3, r7, r1
 801344c:	0018      	movs	r0, r3
 801344e:	f000 fe2b 	bl	80140a8 <RegionCN779ChannelsRemove>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013452:	2227      	movs	r2, #39	; 0x27
 8013454:	18bb      	adds	r3, r7, r2
 8013456:	18ba      	adds	r2, r7, r2
 8013458:	7812      	ldrb	r2, [r2, #0]
 801345a:	3203      	adds	r2, #3
 801345c:	701a      	strb	r2, [r3, #0]
 801345e:	2126      	movs	r1, #38	; 0x26
 8013460:	187b      	adds	r3, r7, r1
 8013462:	781a      	ldrb	r2, [r3, #0]
 8013464:	187b      	adds	r3, r7, r1
 8013466:	3201      	adds	r2, #1
 8013468:	701a      	strb	r2, [r3, #0]
 801346a:	2326      	movs	r3, #38	; 0x26
 801346c:	18fb      	adds	r3, r7, r3
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	2b0f      	cmp	r3, #15
 8013472:	d992      	bls.n	801339a <RegionCN779ApplyCFList+0x3a>
 8013474:	e002      	b.n	801347c <RegionCN779ApplyCFList+0x11c>
        return;
 8013476:	46c0      	nop			; (mov r8, r8)
 8013478:	e000      	b.n	801347c <RegionCN779ApplyCFList+0x11c>
        return;
 801347a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801347c:	46bd      	mov	sp, r7
 801347e:	b00b      	add	sp, #44	; 0x2c
 8013480:	bd90      	pop	{r4, r7, pc}
	...

08013484 <RegionCN779ComputeRxWindowParameters>:
    }
    return true;
}

void RegionCN779ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013486:	b08b      	sub	sp, #44	; 0x2c
 8013488:	af04      	add	r7, sp, #16
 801348a:	60ba      	str	r2, [r7, #8]
 801348c:	607b      	str	r3, [r7, #4]
 801348e:	250f      	movs	r5, #15
 8013490:	197b      	adds	r3, r7, r5
 8013492:	1c02      	adds	r2, r0, #0
 8013494:	701a      	strb	r2, [r3, #0]
 8013496:	230e      	movs	r3, #14
 8013498:	18fb      	adds	r3, r7, r3
 801349a:	1c0a      	adds	r2, r1, #0
 801349c:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801349e:	2300      	movs	r3, #0
 80134a0:	2400      	movs	r4, #0
 80134a2:	613b      	str	r3, [r7, #16]
 80134a4:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN779_RX_MAX_DATARATE );
 80134a6:	197b      	adds	r3, r7, r5
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	b25a      	sxtb	r2, r3
 80134ac:	2a07      	cmp	r2, #7
 80134ae:	dd00      	ble.n	80134b2 <RegionCN779ComputeRxWindowParameters+0x2e>
 80134b0:	2307      	movs	r3, #7
 80134b2:	b25a      	sxtb	r2, r3
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	785b      	ldrb	r3, [r3, #1]
 80134bc:	b25b      	sxtb	r3, r3
 80134be:	0018      	movs	r0, r3
 80134c0:	f7ff fc6c 	bl	8012d9c <GetBandwidth>
 80134c4:	0003      	movs	r3, r0
 80134c6:	b2da      	uxtb	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	785b      	ldrb	r3, [r3, #1]
 80134d0:	b25b      	sxtb	r3, r3
 80134d2:	2b07      	cmp	r3, #7
 80134d4:	d10d      	bne.n	80134f2 <RegionCN779ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	785b      	ldrb	r3, [r3, #1]
 80134da:	b25b      	sxtb	r3, r3
 80134dc:	001a      	movs	r2, r3
 80134de:	4b1b      	ldr	r3, [pc, #108]	; (801354c <RegionCN779ComputeRxWindowParameters+0xc8>)
 80134e0:	5c9b      	ldrb	r3, [r3, r2]
 80134e2:	0018      	movs	r0, r3
 80134e4:	f001 fa48 	bl	8014978 <RegionCommonComputeSymbolTimeFsk>
 80134e8:	0003      	movs	r3, r0
 80134ea:	000c      	movs	r4, r1
 80134ec:	613b      	str	r3, [r7, #16]
 80134ee:	617c      	str	r4, [r7, #20]
 80134f0:	e013      	b.n	801351a <RegionCN779ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN779[rxConfigParams->Datarate], BandwidthsCN779[rxConfigParams->Datarate] );
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	785b      	ldrb	r3, [r3, #1]
 80134f6:	b25b      	sxtb	r3, r3
 80134f8:	001a      	movs	r2, r3
 80134fa:	4b14      	ldr	r3, [pc, #80]	; (801354c <RegionCN779ComputeRxWindowParameters+0xc8>)
 80134fc:	5c98      	ldrb	r0, [r3, r2]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	785b      	ldrb	r3, [r3, #1]
 8013502:	b25b      	sxtb	r3, r3
 8013504:	001a      	movs	r2, r3
 8013506:	4b12      	ldr	r3, [pc, #72]	; (8013550 <RegionCN779ComputeRxWindowParameters+0xcc>)
 8013508:	0092      	lsls	r2, r2, #2
 801350a:	58d3      	ldr	r3, [r2, r3]
 801350c:	0019      	movs	r1, r3
 801350e:	f001 fa07 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 8013512:	0003      	movs	r3, r0
 8013514:	000c      	movs	r4, r1
 8013516:	613b      	str	r3, [r7, #16]
 8013518:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801351a:	4b0e      	ldr	r3, [pc, #56]	; (8013554 <RegionCN779ComputeRxWindowParameters+0xd0>)
 801351c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801351e:	4798      	blx	r3
 8013520:	0006      	movs	r6, r0
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	3308      	adds	r3, #8
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	320c      	adds	r2, #12
 801352a:	68bd      	ldr	r5, [r7, #8]
 801352c:	210e      	movs	r1, #14
 801352e:	1879      	adds	r1, r7, r1
 8013530:	780c      	ldrb	r4, [r1, #0]
 8013532:	6938      	ldr	r0, [r7, #16]
 8013534:	6979      	ldr	r1, [r7, #20]
 8013536:	9202      	str	r2, [sp, #8]
 8013538:	9301      	str	r3, [sp, #4]
 801353a:	9600      	str	r6, [sp, #0]
 801353c:	002b      	movs	r3, r5
 801353e:	0022      	movs	r2, r4
 8013540:	f001 fa36 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 8013544:	46c0      	nop			; (mov r8, r8)
 8013546:	46bd      	mov	sp, r7
 8013548:	b007      	add	sp, #28
 801354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801354c:	08028c44 	.word	0x08028c44
 8013550:	08028c4c 	.word	0x08028c4c
 8013554:	080293d8 	.word	0x080293d8

08013558 <RegionCN779RxConfig>:

bool RegionCN779RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801355a:	b091      	sub	sp, #68	; 0x44
 801355c:	af0a      	add	r7, sp, #40	; 0x28
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8013562:	230f      	movs	r3, #15
 8013564:	18fb      	adds	r3, r7, r3
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	7852      	ldrb	r2, [r2, #1]
 801356a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801356c:	2316      	movs	r3, #22
 801356e:	18fb      	adds	r3, r7, r3
 8013570:	2200      	movs	r2, #0
 8013572:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8013574:	230e      	movs	r3, #14
 8013576:	18fb      	adds	r3, r7, r3
 8013578:	2200      	movs	r2, #0
 801357a:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8013582:	4b64      	ldr	r3, [pc, #400]	; (8013714 <RegionCN779RxConfig+0x1bc>)
 8013584:	68db      	ldr	r3, [r3, #12]
 8013586:	4798      	blx	r3
 8013588:	1e03      	subs	r3, r0, #0
 801358a:	d001      	beq.n	8013590 <RegionCN779RxConfig+0x38>
    {
        return false;
 801358c:	2300      	movs	r3, #0
 801358e:	e0bc      	b.n	801370a <RegionCN779RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	7cdb      	ldrb	r3, [r3, #19]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d122      	bne.n	80135de <RegionCN779RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	0019      	movs	r1, r3
 801359e:	4a5e      	ldr	r2, [pc, #376]	; (8013718 <RegionCN779RxConfig+0x1c0>)
 80135a0:	000b      	movs	r3, r1
 80135a2:	005b      	lsls	r3, r3, #1
 80135a4:	185b      	adds	r3, r3, r1
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	589b      	ldr	r3, [r3, r2]
 80135aa:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	0019      	movs	r1, r3
 80135b2:	4a59      	ldr	r2, [pc, #356]	; (8013718 <RegionCN779RxConfig+0x1c0>)
 80135b4:	000b      	movs	r3, r1
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	185b      	adds	r3, r3, r1
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	18d3      	adds	r3, r2, r3
 80135be:	3304      	adds	r3, #4
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d00b      	beq.n	80135de <RegionCN779RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	0019      	movs	r1, r3
 80135cc:	4a52      	ldr	r2, [pc, #328]	; (8013718 <RegionCN779RxConfig+0x1c0>)
 80135ce:	000b      	movs	r3, r1
 80135d0:	005b      	lsls	r3, r3, #1
 80135d2:	185b      	adds	r3, r3, r1
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	18d3      	adds	r3, r2, r3
 80135d8:	3304      	adds	r3, #4
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN779[dr];
 80135de:	240f      	movs	r4, #15
 80135e0:	193b      	adds	r3, r7, r4
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	b25b      	sxtb	r3, r3
 80135e6:	4a4d      	ldr	r2, [pc, #308]	; (801371c <RegionCN779RxConfig+0x1c4>)
 80135e8:	5cd2      	ldrb	r2, [r2, r3]
 80135ea:	230e      	movs	r3, #14
 80135ec:	18fb      	adds	r3, r7, r3
 80135ee:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80135f0:	4b48      	ldr	r3, [pc, #288]	; (8013714 <RegionCN779RxConfig+0x1bc>)
 80135f2:	695b      	ldr	r3, [r3, #20]
 80135f4:	693a      	ldr	r2, [r7, #16]
 80135f6:	0010      	movs	r0, r2
 80135f8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80135fa:	193b      	adds	r3, r7, r4
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	b25b      	sxtb	r3, r3
 8013600:	2b07      	cmp	r3, #7
 8013602:	d12f      	bne.n	8013664 <RegionCN779RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8013604:	2117      	movs	r1, #23
 8013606:	187b      	adds	r3, r7, r1
 8013608:	2200      	movs	r2, #0
 801360a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801360c:	4b41      	ldr	r3, [pc, #260]	; (8013714 <RegionCN779RxConfig+0x1bc>)
 801360e:	6a1c      	ldr	r4, [r3, #32]
 8013610:	230e      	movs	r3, #14
 8013612:	18fb      	adds	r3, r7, r3
 8013614:	2200      	movs	r2, #0
 8013616:	569a      	ldrsb	r2, [r3, r2]
 8013618:	0013      	movs	r3, r2
 801361a:	015b      	lsls	r3, r3, #5
 801361c:	1a9b      	subs	r3, r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	189b      	adds	r3, r3, r2
 8013622:	00db      	lsls	r3, r3, #3
 8013624:	001e      	movs	r6, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	b29b      	uxth	r3, r3
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	7c92      	ldrb	r2, [r2, #18]
 8013630:	4d3b      	ldr	r5, [pc, #236]	; (8013720 <RegionCN779RxConfig+0x1c8>)
 8013632:	1879      	adds	r1, r7, r1
 8013634:	7808      	ldrb	r0, [r1, #0]
 8013636:	9209      	str	r2, [sp, #36]	; 0x24
 8013638:	2200      	movs	r2, #0
 801363a:	9208      	str	r2, [sp, #32]
 801363c:	2200      	movs	r2, #0
 801363e:	9207      	str	r2, [sp, #28]
 8013640:	2200      	movs	r2, #0
 8013642:	9206      	str	r2, [sp, #24]
 8013644:	2201      	movs	r2, #1
 8013646:	9205      	str	r2, [sp, #20]
 8013648:	2200      	movs	r2, #0
 801364a:	9204      	str	r2, [sp, #16]
 801364c:	2200      	movs	r2, #0
 801364e:	9203      	str	r2, [sp, #12]
 8013650:	9302      	str	r3, [sp, #8]
 8013652:	2305      	movs	r3, #5
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	4b33      	ldr	r3, [pc, #204]	; (8013724 <RegionCN779RxConfig+0x1cc>)
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	2300      	movs	r3, #0
 801365c:	0032      	movs	r2, r6
 801365e:	0029      	movs	r1, r5
 8013660:	47a0      	blx	r4
 8013662:	e029      	b.n	80136b8 <RegionCN779RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8013664:	2117      	movs	r1, #23
 8013666:	187b      	adds	r3, r7, r1
 8013668:	2201      	movs	r2, #1
 801366a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801366c:	4b29      	ldr	r3, [pc, #164]	; (8013714 <RegionCN779RxConfig+0x1bc>)
 801366e:	6a1c      	ldr	r4, [r3, #32]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	789b      	ldrb	r3, [r3, #2]
 8013674:	001e      	movs	r6, r3
 8013676:	230e      	movs	r3, #14
 8013678:	18fb      	adds	r3, r7, r3
 801367a:	2500      	movs	r5, #0
 801367c:	575d      	ldrsb	r5, [r3, r5]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	b29b      	uxth	r3, r3
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	7c92      	ldrb	r2, [r2, #18]
 8013688:	1879      	adds	r1, r7, r1
 801368a:	7808      	ldrb	r0, [r1, #0]
 801368c:	9209      	str	r2, [sp, #36]	; 0x24
 801368e:	2201      	movs	r2, #1
 8013690:	9208      	str	r2, [sp, #32]
 8013692:	2200      	movs	r2, #0
 8013694:	9207      	str	r2, [sp, #28]
 8013696:	2200      	movs	r2, #0
 8013698:	9206      	str	r2, [sp, #24]
 801369a:	2200      	movs	r2, #0
 801369c:	9205      	str	r2, [sp, #20]
 801369e:	2200      	movs	r2, #0
 80136a0:	9204      	str	r2, [sp, #16]
 80136a2:	2200      	movs	r2, #0
 80136a4:	9203      	str	r2, [sp, #12]
 80136a6:	9302      	str	r3, [sp, #8]
 80136a8:	2308      	movs	r3, #8
 80136aa:	9301      	str	r3, [sp, #4]
 80136ac:	2300      	movs	r3, #0
 80136ae:	9300      	str	r3, [sp, #0]
 80136b0:	2301      	movs	r3, #1
 80136b2:	002a      	movs	r2, r5
 80136b4:	0031      	movs	r1, r6
 80136b6:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	7c5b      	ldrb	r3, [r3, #17]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d009      	beq.n	80136d4 <RegionCN779RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN779[dr];
 80136c0:	230f      	movs	r3, #15
 80136c2:	18fb      	adds	r3, r7, r3
 80136c4:	2200      	movs	r2, #0
 80136c6:	569a      	ldrsb	r2, [r3, r2]
 80136c8:	2316      	movs	r3, #22
 80136ca:	18fb      	adds	r3, r7, r3
 80136cc:	4916      	ldr	r1, [pc, #88]	; (8013728 <RegionCN779RxConfig+0x1d0>)
 80136ce:	5c8a      	ldrb	r2, [r1, r2]
 80136d0:	701a      	strb	r2, [r3, #0]
 80136d2:	e008      	b.n	80136e6 <RegionCN779RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN779[dr];
 80136d4:	230f      	movs	r3, #15
 80136d6:	18fb      	adds	r3, r7, r3
 80136d8:	2200      	movs	r2, #0
 80136da:	569a      	ldrsb	r2, [r3, r2]
 80136dc:	2316      	movs	r3, #22
 80136de:	18fb      	adds	r3, r7, r3
 80136e0:	4912      	ldr	r1, [pc, #72]	; (801372c <RegionCN779RxConfig+0x1d4>)
 80136e2:	5c8a      	ldrb	r2, [r1, r2]
 80136e4:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 80136e6:	4b0b      	ldr	r3, [pc, #44]	; (8013714 <RegionCN779RxConfig+0x1bc>)
 80136e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80136ea:	2216      	movs	r2, #22
 80136ec:	18ba      	adds	r2, r7, r2
 80136ee:	7812      	ldrb	r2, [r2, #0]
 80136f0:	320d      	adds	r2, #13
 80136f2:	b2d1      	uxtb	r1, r2
 80136f4:	2217      	movs	r2, #23
 80136f6:	18ba      	adds	r2, r7, r2
 80136f8:	7812      	ldrb	r2, [r2, #0]
 80136fa:	0010      	movs	r0, r2
 80136fc:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	220f      	movs	r2, #15
 8013702:	18ba      	adds	r2, r7, r2
 8013704:	7812      	ldrb	r2, [r2, #0]
 8013706:	701a      	strb	r2, [r3, #0]
    return true;
 8013708:	2301      	movs	r3, #1
}
 801370a:	0018      	movs	r0, r3
 801370c:	46bd      	mov	sp, r7
 801370e:	b007      	add	sp, #28
 8013710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013712:	46c0      	nop			; (mov r8, r8)
 8013714:	080293d8 	.word	0x080293d8
 8013718:	200014cc 	.word	0x200014cc
 801371c:	08028c44 	.word	0x08028c44
 8013720:	0000c350 	.word	0x0000c350
 8013724:	00014585 	.word	0x00014585
 8013728:	08028c74 	.word	0x08028c74
 801372c:	08028c6c 	.word	0x08028c6c

08013730 <RegionCN779TxConfig>:

bool RegionCN779TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013732:	b093      	sub	sp, #76	; 0x4c
 8013734:	af0a      	add	r7, sp, #40	; 0x28
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesCN779[txConfig->Datarate];
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	785b      	ldrb	r3, [r3, #1]
 8013740:	b25b      	sxtb	r3, r3
 8013742:	001a      	movs	r2, r3
 8013744:	4b60      	ldr	r3, [pc, #384]	; (80138c8 <RegionCN779TxConfig+0x198>)
 8013746:	5c9a      	ldrb	r2, [r3, r2]
 8013748:	231e      	movs	r3, #30
 801374a:	18fb      	adds	r3, r7, r3
 801374c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2002      	movs	r0, #2
 8013752:	5618      	ldrsb	r0, [r3, r0]
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	0019      	movs	r1, r3
 801375a:	4a5c      	ldr	r2, [pc, #368]	; (80138cc <RegionCN779TxConfig+0x19c>)
 801375c:	000b      	movs	r3, r1
 801375e:	005b      	lsls	r3, r3, #1
 8013760:	185b      	adds	r3, r3, r1
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	18d3      	adds	r3, r2, r3
 8013766:	3309      	adds	r3, #9
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	4a58      	ldr	r2, [pc, #352]	; (80138cc <RegionCN779TxConfig+0x19c>)
 801376c:	330c      	adds	r3, #12
 801376e:	011b      	lsls	r3, r3, #4
 8013770:	18d3      	adds	r3, r2, r3
 8013772:	3302      	adds	r3, #2
 8013774:	2100      	movs	r1, #0
 8013776:	5659      	ldrsb	r1, [r3, r1]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2201      	movs	r2, #1
 801377c:	569a      	ldrsb	r2, [r3, r2]
 801377e:	251d      	movs	r5, #29
 8013780:	197c      	adds	r4, r7, r5
 8013782:	4b53      	ldr	r3, [pc, #332]	; (80138d0 <RegionCN779TxConfig+0x1a0>)
 8013784:	f7ff fb28 	bl	8012dd8 <LimitTxPower>
 8013788:	0003      	movs	r3, r0
 801378a:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	785b      	ldrb	r3, [r3, #1]
 8013790:	b25b      	sxtb	r3, r3
 8013792:	0018      	movs	r0, r3
 8013794:	f7ff fb02 	bl	8012d9c <GetBandwidth>
 8013798:	0003      	movs	r3, r0
 801379a:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801379c:	2017      	movs	r0, #23
 801379e:	183b      	adds	r3, r7, r0
 80137a0:	2200      	movs	r2, #0
 80137a2:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6859      	ldr	r1, [r3, #4]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	689a      	ldr	r2, [r3, #8]
 80137ac:	183c      	adds	r4, r7, r0
 80137ae:	197b      	adds	r3, r7, r5
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	b25b      	sxtb	r3, r3
 80137b4:	0018      	movs	r0, r3
 80137b6:	f001 f97f 	bl	8014ab8 <RegionCommonComputeTxPower>
 80137ba:	0003      	movs	r3, r0
 80137bc:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80137be:	4b45      	ldr	r3, [pc, #276]	; (80138d4 <RegionCN779TxConfig+0x1a4>)
 80137c0:	695a      	ldr	r2, [r3, #20]
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	0018      	movs	r0, r3
 80137c8:	4940      	ldr	r1, [pc, #256]	; (80138cc <RegionCN779TxConfig+0x19c>)
 80137ca:	0003      	movs	r3, r0
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	181b      	adds	r3, r3, r0
 80137d0:	009b      	lsls	r3, r3, #2
 80137d2:	585b      	ldr	r3, [r3, r1]
 80137d4:	0018      	movs	r0, r3
 80137d6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	785b      	ldrb	r3, [r3, #1]
 80137dc:	b25b      	sxtb	r3, r3
 80137de:	2b07      	cmp	r3, #7
 80137e0:	d12d      	bne.n	801383e <RegionCN779TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80137e2:	201f      	movs	r0, #31
 80137e4:	183b      	adds	r3, r7, r0
 80137e6:	2200      	movs	r2, #0
 80137e8:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 80137ea:	4b3a      	ldr	r3, [pc, #232]	; (80138d4 <RegionCN779TxConfig+0x1a4>)
 80137ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80137ee:	231e      	movs	r3, #30
 80137f0:	18fb      	adds	r3, r7, r3
 80137f2:	2200      	movs	r2, #0
 80137f4:	569a      	ldrsb	r2, [r3, r2]
 80137f6:	0013      	movs	r3, r2
 80137f8:	015b      	lsls	r3, r3, #5
 80137fa:	1a9b      	subs	r3, r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	189b      	adds	r3, r3, r2
 8013800:	00db      	lsls	r3, r3, #3
 8013802:	001d      	movs	r5, r3
 8013804:	69ba      	ldr	r2, [r7, #24]
 8013806:	4e34      	ldr	r6, [pc, #208]	; (80138d8 <RegionCN779TxConfig+0x1a8>)
 8013808:	2317      	movs	r3, #23
 801380a:	18fb      	adds	r3, r7, r3
 801380c:	2100      	movs	r1, #0
 801380e:	5659      	ldrsb	r1, [r3, r1]
 8013810:	183b      	adds	r3, r7, r0
 8013812:	7818      	ldrb	r0, [r3, #0]
 8013814:	4b31      	ldr	r3, [pc, #196]	; (80138dc <RegionCN779TxConfig+0x1ac>)
 8013816:	9308      	str	r3, [sp, #32]
 8013818:	2300      	movs	r3, #0
 801381a:	9307      	str	r3, [sp, #28]
 801381c:	2300      	movs	r3, #0
 801381e:	9306      	str	r3, [sp, #24]
 8013820:	2300      	movs	r3, #0
 8013822:	9305      	str	r3, [sp, #20]
 8013824:	2301      	movs	r3, #1
 8013826:	9304      	str	r3, [sp, #16]
 8013828:	2300      	movs	r3, #0
 801382a:	9303      	str	r3, [sp, #12]
 801382c:	2305      	movs	r3, #5
 801382e:	9302      	str	r3, [sp, #8]
 8013830:	2300      	movs	r3, #0
 8013832:	9301      	str	r3, [sp, #4]
 8013834:	9500      	str	r5, [sp, #0]
 8013836:	0013      	movs	r3, r2
 8013838:	0032      	movs	r2, r6
 801383a:	47a0      	blx	r4
 801383c:	e024      	b.n	8013888 <RegionCN779TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 801383e:	201f      	movs	r0, #31
 8013840:	183b      	adds	r3, r7, r0
 8013842:	2201      	movs	r2, #1
 8013844:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8013846:	4b23      	ldr	r3, [pc, #140]	; (80138d4 <RegionCN779TxConfig+0x1a4>)
 8013848:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801384a:	231e      	movs	r3, #30
 801384c:	18fb      	adds	r3, r7, r3
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	b25b      	sxtb	r3, r3
 8013852:	69bd      	ldr	r5, [r7, #24]
 8013854:	2217      	movs	r2, #23
 8013856:	18ba      	adds	r2, r7, r2
 8013858:	2100      	movs	r1, #0
 801385a:	5651      	ldrsb	r1, [r2, r1]
 801385c:	183a      	adds	r2, r7, r0
 801385e:	7810      	ldrb	r0, [r2, #0]
 8013860:	4a1e      	ldr	r2, [pc, #120]	; (80138dc <RegionCN779TxConfig+0x1ac>)
 8013862:	9208      	str	r2, [sp, #32]
 8013864:	2200      	movs	r2, #0
 8013866:	9207      	str	r2, [sp, #28]
 8013868:	2200      	movs	r2, #0
 801386a:	9206      	str	r2, [sp, #24]
 801386c:	2200      	movs	r2, #0
 801386e:	9205      	str	r2, [sp, #20]
 8013870:	2201      	movs	r2, #1
 8013872:	9204      	str	r2, [sp, #16]
 8013874:	2200      	movs	r2, #0
 8013876:	9203      	str	r2, [sp, #12]
 8013878:	2208      	movs	r2, #8
 801387a:	9202      	str	r2, [sp, #8]
 801387c:	2201      	movs	r2, #1
 801387e:	9201      	str	r2, [sp, #4]
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	002b      	movs	r3, r5
 8013884:	2200      	movs	r2, #0
 8013886:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013888:	4b12      	ldr	r3, [pc, #72]	; (80138d4 <RegionCN779TxConfig+0x1a4>)
 801388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	8992      	ldrh	r2, [r2, #12]
 8013890:	b2d1      	uxtb	r1, r2
 8013892:	241f      	movs	r4, #31
 8013894:	193a      	adds	r2, r7, r4
 8013896:	7812      	ldrb	r2, [r2, #0]
 8013898:	0010      	movs	r0, r2
 801389a:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 801389c:	4b0d      	ldr	r3, [pc, #52]	; (80138d4 <RegionCN779TxConfig+0x1a4>)
 801389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	8992      	ldrh	r2, [r2, #12]
 80138a4:	b2d1      	uxtb	r1, r2
 80138a6:	193a      	adds	r2, r7, r4
 80138a8:	7812      	ldrb	r2, [r2, #0]
 80138aa:	0010      	movs	r0, r2
 80138ac:	4798      	blx	r3
 80138ae:	0002      	movs	r2, r0
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	221d      	movs	r2, #29
 80138b8:	18ba      	adds	r2, r7, r2
 80138ba:	7812      	ldrb	r2, [r2, #0]
 80138bc:	701a      	strb	r2, [r3, #0]
    return true;
 80138be:	2301      	movs	r3, #1
}
 80138c0:	0018      	movs	r0, r3
 80138c2:	46bd      	mov	sp, r7
 80138c4:	b009      	add	sp, #36	; 0x24
 80138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c8:	08028c44 	.word	0x08028c44
 80138cc:	200014cc 	.word	0x200014cc
 80138d0:	2000159c 	.word	0x2000159c
 80138d4:	080293d8 	.word	0x080293d8
 80138d8:	000061a8 	.word	0x000061a8
 80138dc:	00000bb8 	.word	0x00000bb8

080138e0 <RegionCN779LinkAdrReq>:

uint8_t RegionCN779LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80138e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138e2:	b093      	sub	sp, #76	; 0x4c
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
 80138ec:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80138ee:	2347      	movs	r3, #71	; 0x47
 80138f0:	18fb      	adds	r3, r7, r3
 80138f2:	2207      	movs	r2, #7
 80138f4:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80138f6:	2344      	movs	r3, #68	; 0x44
 80138f8:	18fb      	adds	r3, r7, r3
 80138fa:	2200      	movs	r2, #0
 80138fc:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80138fe:	2346      	movs	r3, #70	; 0x46
 8013900:	18fb      	adds	r3, r7, r3
 8013902:	2200      	movs	r2, #0
 8013904:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8013906:	233a      	movs	r3, #58	; 0x3a
 8013908:	18fb      	adds	r3, r7, r3
 801390a:	2200      	movs	r2, #0
 801390c:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801390e:	e09e      	b.n	8013a4e <RegionCN779LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	685a      	ldr	r2, [r3, #4]
 8013914:	2346      	movs	r3, #70	; 0x46
 8013916:	18fb      	adds	r3, r7, r3
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	18d3      	adds	r3, r2, r3
 801391c:	2544      	movs	r5, #68	; 0x44
 801391e:	197c      	adds	r4, r7, r5
 8013920:	223c      	movs	r2, #60	; 0x3c
 8013922:	18ba      	adds	r2, r7, r2
 8013924:	0011      	movs	r1, r2
 8013926:	0018      	movs	r0, r3
 8013928:	f000 fefe 	bl	8014728 <RegionCommonParseLinkAdrReq>
 801392c:	0003      	movs	r3, r0
 801392e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8013930:	197b      	adds	r3, r7, r5
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d100      	bne.n	801393a <RegionCN779LinkAdrReq+0x5a>
 8013938:	e092      	b.n	8013a60 <RegionCN779LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801393a:	2246      	movs	r2, #70	; 0x46
 801393c:	18bb      	adds	r3, r7, r2
 801393e:	18b9      	adds	r1, r7, r2
 8013940:	2244      	movs	r2, #68	; 0x44
 8013942:	18ba      	adds	r2, r7, r2
 8013944:	7809      	ldrb	r1, [r1, #0]
 8013946:	7812      	ldrb	r2, [r2, #0]
 8013948:	188a      	adds	r2, r1, r2
 801394a:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801394c:	2347      	movs	r3, #71	; 0x47
 801394e:	18fb      	adds	r3, r7, r3
 8013950:	2207      	movs	r2, #7
 8013952:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8013954:	213c      	movs	r1, #60	; 0x3c
 8013956:	187b      	adds	r3, r7, r1
 8013958:	889a      	ldrh	r2, [r3, #4]
 801395a:	233a      	movs	r3, #58	; 0x3a
 801395c:	18fb      	adds	r3, r7, r3
 801395e:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8013960:	187b      	adds	r3, r7, r1
 8013962:	78db      	ldrb	r3, [r3, #3]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10c      	bne.n	8013982 <RegionCN779LinkAdrReq+0xa2>
 8013968:	233a      	movs	r3, #58	; 0x3a
 801396a:	18fb      	adds	r3, r7, r3
 801396c:	881b      	ldrh	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d107      	bne.n	8013982 <RegionCN779LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8013972:	2247      	movs	r2, #71	; 0x47
 8013974:	18bb      	adds	r3, r7, r2
 8013976:	18ba      	adds	r2, r7, r2
 8013978:	7812      	ldrb	r2, [r2, #0]
 801397a:	2101      	movs	r1, #1
 801397c:	438a      	bics	r2, r1
 801397e:	701a      	strb	r2, [r3, #0]
 8013980:	e065      	b.n	8013a4e <RegionCN779LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013982:	233c      	movs	r3, #60	; 0x3c
 8013984:	18fb      	adds	r3, r7, r3
 8013986:	78db      	ldrb	r3, [r3, #3]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d004      	beq.n	8013996 <RegionCN779LinkAdrReq+0xb6>
 801398c:	233c      	movs	r3, #60	; 0x3c
 801398e:	18fb      	adds	r3, r7, r3
 8013990:	78db      	ldrb	r3, [r3, #3]
 8013992:	2b05      	cmp	r3, #5
 8013994:	d904      	bls.n	80139a0 <RegionCN779LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8013996:	233c      	movs	r3, #60	; 0x3c
 8013998:	18fb      	adds	r3, r7, r3
 801399a:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801399c:	2b06      	cmp	r3, #6
 801399e:	d907      	bls.n	80139b0 <RegionCN779LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80139a0:	2247      	movs	r2, #71	; 0x47
 80139a2:	18bb      	adds	r3, r7, r2
 80139a4:	18ba      	adds	r2, r7, r2
 80139a6:	7812      	ldrb	r2, [r2, #0]
 80139a8:	2101      	movs	r1, #1
 80139aa:	438a      	bics	r2, r1
 80139ac:	701a      	strb	r2, [r3, #0]
 80139ae:	e04e      	b.n	8013a4e <RegionCN779LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 80139b0:	2345      	movs	r3, #69	; 0x45
 80139b2:	18fb      	adds	r3, r7, r3
 80139b4:	2200      	movs	r2, #0
 80139b6:	701a      	strb	r2, [r3, #0]
 80139b8:	e044      	b.n	8013a44 <RegionCN779LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80139ba:	233c      	movs	r3, #60	; 0x3c
 80139bc:	18fb      	adds	r3, r7, r3
 80139be:	78db      	ldrb	r3, [r3, #3]
 80139c0:	2b06      	cmp	r3, #6
 80139c2:	d11b      	bne.n	80139fc <RegionCN779LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80139c4:	2345      	movs	r3, #69	; 0x45
 80139c6:	18fb      	adds	r3, r7, r3
 80139c8:	781a      	ldrb	r2, [r3, #0]
 80139ca:	496e      	ldr	r1, [pc, #440]	; (8013b84 <RegionCN779LinkAdrReq+0x2a4>)
 80139cc:	0013      	movs	r3, r2
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	189b      	adds	r3, r3, r2
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	585b      	ldr	r3, [r3, r1]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d02e      	beq.n	8013a38 <RegionCN779LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 80139da:	2345      	movs	r3, #69	; 0x45
 80139dc:	18fb      	adds	r3, r7, r3
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	2201      	movs	r2, #1
 80139e2:	409a      	lsls	r2, r3
 80139e4:	0013      	movs	r3, r2
 80139e6:	b21a      	sxth	r2, r3
 80139e8:	213a      	movs	r1, #58	; 0x3a
 80139ea:	187b      	adds	r3, r7, r1
 80139ec:	881b      	ldrh	r3, [r3, #0]
 80139ee:	b21b      	sxth	r3, r3
 80139f0:	4313      	orrs	r3, r2
 80139f2:	b21b      	sxth	r3, r3
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	187b      	adds	r3, r7, r1
 80139f8:	801a      	strh	r2, [r3, #0]
 80139fa:	e01d      	b.n	8013a38 <RegionCN779LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80139fc:	233a      	movs	r3, #58	; 0x3a
 80139fe:	18fb      	adds	r3, r7, r3
 8013a00:	881b      	ldrh	r3, [r3, #0]
 8013a02:	001a      	movs	r2, r3
 8013a04:	2345      	movs	r3, #69	; 0x45
 8013a06:	18fb      	adds	r3, r7, r3
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	411a      	asrs	r2, r3
 8013a0c:	0013      	movs	r3, r2
 8013a0e:	2201      	movs	r2, #1
 8013a10:	4013      	ands	r3, r2
 8013a12:	d011      	beq.n	8013a38 <RegionCN779LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8013a14:	2345      	movs	r3, #69	; 0x45
 8013a16:	18fb      	adds	r3, r7, r3
 8013a18:	781a      	ldrb	r2, [r3, #0]
 8013a1a:	495a      	ldr	r1, [pc, #360]	; (8013b84 <RegionCN779LinkAdrReq+0x2a4>)
 8013a1c:	0013      	movs	r3, r2
 8013a1e:	005b      	lsls	r3, r3, #1
 8013a20:	189b      	adds	r3, r3, r2
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d106      	bne.n	8013a38 <RegionCN779LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8013a2a:	2247      	movs	r2, #71	; 0x47
 8013a2c:	18bb      	adds	r3, r7, r2
 8013a2e:	18ba      	adds	r2, r7, r2
 8013a30:	7812      	ldrb	r2, [r2, #0]
 8013a32:	2101      	movs	r1, #1
 8013a34:	438a      	bics	r2, r1
 8013a36:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 8013a38:	2145      	movs	r1, #69	; 0x45
 8013a3a:	187b      	adds	r3, r7, r1
 8013a3c:	781a      	ldrb	r2, [r3, #0]
 8013a3e:	187b      	adds	r3, r7, r1
 8013a40:	3201      	adds	r2, #1
 8013a42:	701a      	strb	r2, [r3, #0]
 8013a44:	2345      	movs	r3, #69	; 0x45
 8013a46:	18fb      	adds	r3, r7, r3
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	2b0f      	cmp	r3, #15
 8013a4c:	d9b5      	bls.n	80139ba <RegionCN779LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	7a1b      	ldrb	r3, [r3, #8]
 8013a52:	2246      	movs	r2, #70	; 0x46
 8013a54:	18ba      	adds	r2, r7, r2
 8013a56:	7812      	ldrb	r2, [r2, #0]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d200      	bcs.n	8013a5e <RegionCN779LinkAdrReq+0x17e>
 8013a5c:	e758      	b.n	8013910 <RegionCN779LinkAdrReq+0x30>
 8013a5e:	e000      	b.n	8013a62 <RegionCN779LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8013a60:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013a62:	2134      	movs	r1, #52	; 0x34
 8013a64:	187b      	adds	r3, r7, r1
 8013a66:	2201      	movs	r2, #1
 8013a68:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	7a5a      	ldrb	r2, [r3, #9]
 8013a6e:	187b      	adds	r3, r7, r1
 8013a70:	709a      	strb	r2, [r3, #2]
    phyParam = RegionCN779GetPhyParam( &getPhy );
 8013a72:	187b      	adds	r3, r7, r1
 8013a74:	0018      	movs	r0, r3
 8013a76:	f7ff fae5 	bl	8013044 <RegionCN779GetPhyParam>
 8013a7a:	0003      	movs	r3, r0
 8013a7c:	001a      	movs	r2, r3
 8013a7e:	2030      	movs	r0, #48	; 0x30
 8013a80:	183b      	adds	r3, r7, r0
 8013a82:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8013a84:	2110      	movs	r1, #16
 8013a86:	187b      	adds	r3, r7, r1
 8013a88:	2447      	movs	r4, #71	; 0x47
 8013a8a:	193a      	adds	r2, r7, r4
 8013a8c:	7812      	ldrb	r2, [r2, #0]
 8013a8e:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	7a9a      	ldrb	r2, [r3, #10]
 8013a94:	187b      	adds	r3, r7, r1
 8013a96:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013a98:	253c      	movs	r5, #60	; 0x3c
 8013a9a:	197b      	adds	r3, r7, r5
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	569a      	ldrsb	r2, [r3, r2]
 8013aa0:	187b      	adds	r3, r7, r1
 8013aa2:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8013aa4:	197b      	adds	r3, r7, r5
 8013aa6:	2202      	movs	r2, #2
 8013aa8:	569a      	ldrsb	r2, [r3, r2]
 8013aaa:	187b      	adds	r3, r7, r1
 8013aac:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013aae:	197b      	adds	r3, r7, r5
 8013ab0:	781a      	ldrb	r2, [r3, #0]
 8013ab2:	187b      	adds	r3, r7, r1
 8013ab4:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	220b      	movs	r2, #11
 8013aba:	569a      	ldrsb	r2, [r3, r2]
 8013abc:	187b      	adds	r3, r7, r1
 8013abe:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	220c      	movs	r2, #12
 8013ac4:	569a      	ldrsb	r2, [r3, r2]
 8013ac6:	187b      	adds	r3, r7, r1
 8013ac8:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	7b5b      	ldrb	r3, [r3, #13]
 8013ace:	b25a      	sxtb	r2, r3
 8013ad0:	187b      	adds	r3, r7, r1
 8013ad2:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = CN779_MAX_NB_CHANNELS;
 8013ad4:	187b      	adds	r3, r7, r1
 8013ad6:	2210      	movs	r2, #16
 8013ad8:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8013ada:	187b      	adds	r3, r7, r1
 8013adc:	223a      	movs	r2, #58	; 0x3a
 8013ade:	18ba      	adds	r2, r7, r2
 8013ae0:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013ae2:	183b      	adds	r3, r7, r0
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	b25a      	sxtb	r2, r3
 8013ae8:	0008      	movs	r0, r1
 8013aea:	183b      	adds	r3, r7, r0
 8013aec:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = CN779_TX_MAX_DATARATE;
 8013aee:	183b      	adds	r3, r7, r0
 8013af0:	2207      	movs	r2, #7
 8013af2:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8013af4:	183b      	adds	r3, r7, r0
 8013af6:	4a23      	ldr	r2, [pc, #140]	; (8013b84 <RegionCN779LinkAdrReq+0x2a4>)
 8013af8:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = CN779_MIN_TX_POWER;
 8013afa:	183b      	adds	r3, r7, r0
 8013afc:	2205      	movs	r2, #5
 8013afe:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = CN779_MAX_TX_POWER;
 8013b00:	183b      	adds	r3, r7, r0
 8013b02:	2200      	movs	r2, #0
 8013b04:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013b06:	183b      	adds	r3, r7, r0
 8013b08:	68fa      	ldr	r2, [r7, #12]
 8013b0a:	6812      	ldr	r2, [r2, #0]
 8013b0c:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013b0e:	0026      	movs	r6, r4
 8013b10:	193c      	adds	r4, r7, r4
 8013b12:	0029      	movs	r1, r5
 8013b14:	187d      	adds	r5, r7, r1
 8013b16:	187b      	adds	r3, r7, r1
 8013b18:	1c9a      	adds	r2, r3, #2
 8013b1a:	187b      	adds	r3, r7, r1
 8013b1c:	1c59      	adds	r1, r3, #1
 8013b1e:	1838      	adds	r0, r7, r0
 8013b20:	002b      	movs	r3, r5
 8013b22:	f000 fe57 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 8013b26:	0003      	movs	r3, r0
 8013b28:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8013b2a:	0034      	movs	r4, r6
 8013b2c:	193b      	adds	r3, r7, r4
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	2b07      	cmp	r3, #7
 8013b32:	d10b      	bne.n	8013b4c <RegionCN779LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8013b34:	4b14      	ldr	r3, [pc, #80]	; (8013b88 <RegionCN779LinkAdrReq+0x2a8>)
 8013b36:	2202      	movs	r2, #2
 8013b38:	2100      	movs	r1, #0
 8013b3a:	0018      	movs	r0, r3
 8013b3c:	f009 f8f6 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8013b40:	233a      	movs	r3, #58	; 0x3a
 8013b42:	18fb      	adds	r3, r7, r3
 8013b44:	8819      	ldrh	r1, [r3, #0]
 8013b46:	4b0f      	ldr	r3, [pc, #60]	; (8013b84 <RegionCN779LinkAdrReq+0x2a4>)
 8013b48:	22d0      	movs	r2, #208	; 0xd0
 8013b4a:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8013b4c:	213c      	movs	r1, #60	; 0x3c
 8013b4e:	187b      	adds	r3, r7, r1
 8013b50:	2201      	movs	r2, #1
 8013b52:	569a      	ldrsb	r2, [r3, r2]
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8013b58:	187b      	adds	r3, r7, r1
 8013b5a:	2202      	movs	r2, #2
 8013b5c:	569a      	ldrsb	r2, [r3, r2]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8013b62:	187b      	adds	r3, r7, r1
 8013b64:	781a      	ldrb	r2, [r3, #0]
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8013b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b6c:	2246      	movs	r2, #70	; 0x46
 8013b6e:	18ba      	adds	r2, r7, r2
 8013b70:	7812      	ldrb	r2, [r2, #0]
 8013b72:	701a      	strb	r2, [r3, #0]

    return status;
 8013b74:	2347      	movs	r3, #71	; 0x47
 8013b76:	18fb      	adds	r3, r7, r3
 8013b78:	781b      	ldrb	r3, [r3, #0]
}
 8013b7a:	0018      	movs	r0, r3
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	b013      	add	sp, #76	; 0x4c
 8013b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b82:	46c0      	nop			; (mov r8, r8)
 8013b84:	200014cc 	.word	0x200014cc
 8013b88:	2000159c 	.word	0x2000159c

08013b8c <RegionCN779RxParamSetupReq>:

uint8_t RegionCN779RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8013b94:	230f      	movs	r3, #15
 8013b96:	18fb      	adds	r3, r7, r3
 8013b98:	2207      	movs	r2, #7
 8013b9a:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	0018      	movs	r0, r3
 8013ba2:	f7ff f941 	bl	8012e28 <VerifyRfFreq>
 8013ba6:	0003      	movs	r3, r0
 8013ba8:	001a      	movs	r2, r3
 8013baa:	2301      	movs	r3, #1
 8013bac:	4053      	eors	r3, r2
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d006      	beq.n	8013bc2 <RegionCN779RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8013bb4:	220f      	movs	r2, #15
 8013bb6:	18bb      	adds	r3, r7, r2
 8013bb8:	18ba      	adds	r2, r7, r2
 8013bba:	7812      	ldrb	r2, [r2, #0]
 8013bbc:	2101      	movs	r1, #1
 8013bbe:	438a      	bics	r2, r1
 8013bc0:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE ) == false )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	b25b      	sxtb	r3, r3
 8013bc8:	2207      	movs	r2, #7
 8013bca:	2100      	movs	r1, #0
 8013bcc:	0018      	movs	r0, r3
 8013bce:	f000 fbc3 	bl	8014358 <RegionCommonValueInRange>
 8013bd2:	1e03      	subs	r3, r0, #0
 8013bd4:	d106      	bne.n	8013be4 <RegionCN779RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8013bd6:	220f      	movs	r2, #15
 8013bd8:	18bb      	adds	r3, r7, r2
 8013bda:	18ba      	adds	r2, r7, r2
 8013bdc:	7812      	ldrb	r2, [r2, #0]
 8013bde:	2102      	movs	r1, #2
 8013be0:	438a      	bics	r2, r1
 8013be2:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN779_MIN_RX1_DR_OFFSET, CN779_MAX_RX1_DR_OFFSET ) == false )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	785b      	ldrb	r3, [r3, #1]
 8013be8:	b25b      	sxtb	r3, r3
 8013bea:	2205      	movs	r2, #5
 8013bec:	2100      	movs	r1, #0
 8013bee:	0018      	movs	r0, r3
 8013bf0:	f000 fbb2 	bl	8014358 <RegionCommonValueInRange>
 8013bf4:	1e03      	subs	r3, r0, #0
 8013bf6:	d106      	bne.n	8013c06 <RegionCN779RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8013bf8:	220f      	movs	r2, #15
 8013bfa:	18bb      	adds	r3, r7, r2
 8013bfc:	18ba      	adds	r2, r7, r2
 8013bfe:	7812      	ldrb	r2, [r2, #0]
 8013c00:	2104      	movs	r1, #4
 8013c02:	438a      	bics	r2, r1
 8013c04:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8013c06:	230f      	movs	r3, #15
 8013c08:	18fb      	adds	r3, r7, r3
 8013c0a:	781b      	ldrb	r3, [r3, #0]
}
 8013c0c:	0018      	movs	r0, r3
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	b004      	add	sp, #16
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <RegionCN779NewChannelReq>:

uint8_t RegionCN779NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b086      	sub	sp, #24
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013c1c:	2317      	movs	r3, #23
 8013c1e:	18fb      	adds	r3, r7, r3
 8013c20:	2203      	movs	r2, #3
 8013c22:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d119      	bne.n	8013c62 <RegionCN779NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	791b      	ldrb	r3, [r3, #4]
 8013c32:	b25b      	sxtb	r3, r3
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	2108      	movs	r1, #8
 8013c38:	187b      	adds	r3, r7, r1
 8013c3a:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionCN779ChannelsRemove( &channelRemove ) == false )
 8013c3c:	187b      	adds	r3, r7, r1
 8013c3e:	0018      	movs	r0, r3
 8013c40:	f000 fa32 	bl	80140a8 <RegionCN779ChannelsRemove>
 8013c44:	0003      	movs	r3, r0
 8013c46:	001a      	movs	r2, r3
 8013c48:	2301      	movs	r3, #1
 8013c4a:	4053      	eors	r3, r2
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d043      	beq.n	8013cda <RegionCN779NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8013c52:	2217      	movs	r2, #23
 8013c54:	18bb      	adds	r3, r7, r2
 8013c56:	18ba      	adds	r2, r7, r2
 8013c58:	7812      	ldrb	r2, [r2, #0]
 8013c5a:	2103      	movs	r1, #3
 8013c5c:	438a      	bics	r2, r1
 8013c5e:	701a      	strb	r2, [r3, #0]
 8013c60:	e03b      	b.n	8013cda <RegionCN779NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	210c      	movs	r1, #12
 8013c68:	187b      	adds	r3, r7, r1
 8013c6a:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	791b      	ldrb	r3, [r3, #4]
 8013c70:	b25b      	sxtb	r3, r3
 8013c72:	b2da      	uxtb	r2, r3
 8013c74:	187b      	adds	r3, r7, r1
 8013c76:	711a      	strb	r2, [r3, #4]

        switch( RegionCN779ChannelAdd( &channelAdd ) )
 8013c78:	187b      	adds	r3, r7, r1
 8013c7a:	0018      	movs	r0, r3
 8013c7c:	f000 f95a 	bl	8013f34 <RegionCN779ChannelAdd>
 8013c80:	0003      	movs	r3, r0
 8013c82:	2b04      	cmp	r3, #4
 8013c84:	d008      	beq.n	8013c98 <RegionCN779NewChannelReq+0x84>
 8013c86:	dc02      	bgt.n	8013c8e <RegionCN779NewChannelReq+0x7a>
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d025      	beq.n	8013cd8 <RegionCN779NewChannelReq+0xc4>
 8013c8c:	e01c      	b.n	8013cc8 <RegionCN779NewChannelReq+0xb4>
 8013c8e:	2b05      	cmp	r3, #5
 8013c90:	d00a      	beq.n	8013ca8 <RegionCN779NewChannelReq+0x94>
 8013c92:	2b06      	cmp	r3, #6
 8013c94:	d010      	beq.n	8013cb8 <RegionCN779NewChannelReq+0xa4>
 8013c96:	e017      	b.n	8013cc8 <RegionCN779NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8013c98:	2217      	movs	r2, #23
 8013c9a:	18bb      	adds	r3, r7, r2
 8013c9c:	18ba      	adds	r2, r7, r2
 8013c9e:	7812      	ldrb	r2, [r2, #0]
 8013ca0:	2101      	movs	r1, #1
 8013ca2:	438a      	bics	r2, r1
 8013ca4:	701a      	strb	r2, [r3, #0]
                break;
 8013ca6:	e018      	b.n	8013cda <RegionCN779NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8013ca8:	2217      	movs	r2, #23
 8013caa:	18bb      	adds	r3, r7, r2
 8013cac:	18ba      	adds	r2, r7, r2
 8013cae:	7812      	ldrb	r2, [r2, #0]
 8013cb0:	2102      	movs	r1, #2
 8013cb2:	438a      	bics	r2, r1
 8013cb4:	701a      	strb	r2, [r3, #0]
                break;
 8013cb6:	e010      	b.n	8013cda <RegionCN779NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8013cb8:	2217      	movs	r2, #23
 8013cba:	18bb      	adds	r3, r7, r2
 8013cbc:	18ba      	adds	r2, r7, r2
 8013cbe:	7812      	ldrb	r2, [r2, #0]
 8013cc0:	2103      	movs	r1, #3
 8013cc2:	438a      	bics	r2, r1
 8013cc4:	701a      	strb	r2, [r3, #0]
                break;
 8013cc6:	e008      	b.n	8013cda <RegionCN779NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8013cc8:	2217      	movs	r2, #23
 8013cca:	18bb      	adds	r3, r7, r2
 8013ccc:	18ba      	adds	r2, r7, r2
 8013cce:	7812      	ldrb	r2, [r2, #0]
 8013cd0:	2103      	movs	r1, #3
 8013cd2:	438a      	bics	r2, r1
 8013cd4:	701a      	strb	r2, [r3, #0]
                break;
 8013cd6:	e000      	b.n	8013cda <RegionCN779NewChannelReq+0xc6>
                break;
 8013cd8:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8013cda:	2317      	movs	r3, #23
 8013cdc:	18fb      	adds	r3, r7, r3
 8013cde:	781b      	ldrb	r3, [r3, #0]
}
 8013ce0:	0018      	movs	r0, r3
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	b006      	add	sp, #24
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <RegionCN779TxParamSetupReq>:

int8_t RegionCN779TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
    return -1;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	425b      	negs	r3, r3
}
 8013cf4:	0018      	movs	r0, r3
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	b002      	add	sp, #8
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <RegionCN779DlChannelReq>:

uint8_t RegionCN779DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013d04:	230f      	movs	r3, #15
 8013d06:	18fb      	adds	r3, r7, r3
 8013d08:	2203      	movs	r2, #3
 8013d0a:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	0018      	movs	r0, r3
 8013d12:	f7ff f889 	bl	8012e28 <VerifyRfFreq>
 8013d16:	0003      	movs	r3, r0
 8013d18:	001a      	movs	r2, r3
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	4053      	eors	r3, r2
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d006      	beq.n	8013d32 <RegionCN779DlChannelReq+0x36>
    {
        status &= 0xFE;
 8013d24:	220f      	movs	r2, #15
 8013d26:	18bb      	adds	r3, r7, r2
 8013d28:	18ba      	adds	r2, r7, r2
 8013d2a:	7812      	ldrb	r2, [r2, #0]
 8013d2c:	2101      	movs	r1, #1
 8013d2e:	438a      	bics	r2, r1
 8013d30:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	0019      	movs	r1, r3
 8013d38:	4a13      	ldr	r2, [pc, #76]	; (8013d88 <RegionCN779DlChannelReq+0x8c>)
 8013d3a:	000b      	movs	r3, r1
 8013d3c:	005b      	lsls	r3, r3, #1
 8013d3e:	185b      	adds	r3, r3, r1
 8013d40:	009b      	lsls	r3, r3, #2
 8013d42:	589b      	ldr	r3, [r3, r2]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d106      	bne.n	8013d56 <RegionCN779DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8013d48:	220f      	movs	r2, #15
 8013d4a:	18bb      	adds	r3, r7, r2
 8013d4c:	18ba      	adds	r2, r7, r2
 8013d4e:	7812      	ldrb	r2, [r2, #0]
 8013d50:	2102      	movs	r1, #2
 8013d52:	438a      	bics	r2, r1
 8013d54:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8013d56:	230f      	movs	r3, #15
 8013d58:	18fb      	adds	r3, r7, r3
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	2b03      	cmp	r3, #3
 8013d5e:	d10c      	bne.n	8013d7a <RegionCN779DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	0018      	movs	r0, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	685a      	ldr	r2, [r3, #4]
 8013d6a:	4907      	ldr	r1, [pc, #28]	; (8013d88 <RegionCN779DlChannelReq+0x8c>)
 8013d6c:	0003      	movs	r3, r0
 8013d6e:	005b      	lsls	r3, r3, #1
 8013d70:	181b      	adds	r3, r3, r0
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	18cb      	adds	r3, r1, r3
 8013d76:	3304      	adds	r3, #4
 8013d78:	601a      	str	r2, [r3, #0]
    }

    return status;
 8013d7a:	230f      	movs	r3, #15
 8013d7c:	18fb      	adds	r3, r7, r3
 8013d7e:	781b      	ldrb	r3, [r3, #0]
}
 8013d80:	0018      	movs	r0, r3
 8013d82:	46bd      	mov	sp, r7
 8013d84:	b004      	add	sp, #16
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	200014cc 	.word	0x200014cc

08013d8c <RegionCN779CalcBackOff>:
{
    return currentDr;
}

void RegionCN779CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b088      	sub	sp, #32
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8013d94:	210c      	movs	r1, #12
 8013d96:	187b      	adds	r3, r7, r1
 8013d98:	4a12      	ldr	r2, [pc, #72]	; (8013de4 <RegionCN779CalcBackOff+0x58>)
 8013d9a:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8013d9c:	187b      	adds	r3, r7, r1
 8013d9e:	4a12      	ldr	r2, [pc, #72]	; (8013de8 <RegionCN779CalcBackOff+0x5c>)
 8013da0:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	785a      	ldrb	r2, [r3, #1]
 8013da6:	187b      	adds	r3, r7, r1
 8013da8:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	781a      	ldrb	r2, [r3, #0]
 8013dae:	187b      	adds	r3, r7, r1
 8013db0:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	789a      	ldrb	r2, [r3, #2]
 8013db6:	187b      	adds	r3, r7, r1
 8013db8:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	78da      	ldrb	r2, [r3, #3]
 8013dbe:	187b      	adds	r3, r7, r1
 8013dc0:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	685a      	ldr	r2, [r3, #4]
 8013dc6:	187b      	adds	r3, r7, r1
 8013dc8:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	689a      	ldr	r2, [r3, #8]
 8013dce:	187b      	adds	r3, r7, r1
 8013dd0:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8013dd2:	187b      	adds	r3, r7, r1
 8013dd4:	0018      	movs	r0, r3
 8013dd6:	f000 fea7 	bl	8014b28 <RegionCommonCalcBackOff>
}
 8013dda:	46c0      	nop			; (mov r8, r8)
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	b008      	add	sp, #32
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	46c0      	nop			; (mov r8, r8)
 8013de4:	200014cc 	.word	0x200014cc
 8013de8:	2000158c 	.word	0x2000158c

08013dec <RegionCN779NextChannel>:

LoRaMacStatus_t RegionCN779NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013dec:	b5b0      	push	{r4, r5, r7, lr}
 8013dee:	b090      	sub	sp, #64	; 0x40
 8013df0:	af04      	add	r7, sp, #16
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
 8013df8:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8013dfa:	232f      	movs	r3, #47	; 0x2f
 8013dfc:	18fb      	adds	r3, r7, r3
 8013dfe:	2200      	movs	r2, #0
 8013e00:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8013e02:	2327      	movs	r3, #39	; 0x27
 8013e04:	18fb      	adds	r3, r7, r3
 8013e06:	2200      	movs	r2, #0
 8013e08:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[CN779_MAX_NB_CHANNELS] = { 0 };
 8013e0a:	2314      	movs	r3, #20
 8013e0c:	18fb      	adds	r3, r7, r3
 8013e0e:	0018      	movs	r0, r3
 8013e10:	2310      	movs	r3, #16
 8013e12:	001a      	movs	r2, r3
 8013e14:	2100      	movs	r1, #0
 8013e16:	f012 f877 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8013e1e:	4b42      	ldr	r3, [pc, #264]	; (8013f28 <RegionCN779NextChannel+0x13c>)
 8013e20:	2201      	movs	r2, #1
 8013e22:	2100      	movs	r1, #0
 8013e24:	0018      	movs	r0, r3
 8013e26:	f000 faff 	bl	8014428 <RegionCommonCountChannels>
 8013e2a:	1e03      	subs	r3, r0, #0
 8013e2c:	d108      	bne.n	8013e40 <RegionCN779NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013e2e:	4b3f      	ldr	r3, [pc, #252]	; (8013f2c <RegionCN779NextChannel+0x140>)
 8013e30:	22d0      	movs	r2, #208	; 0xd0
 8013e32:	5a9b      	ldrh	r3, [r3, r2]
 8013e34:	2207      	movs	r2, #7
 8013e36:	4313      	orrs	r3, r2
 8013e38:	b299      	uxth	r1, r3
 8013e3a:	4b3c      	ldr	r3, [pc, #240]	; (8013f2c <RegionCN779NextChannel+0x140>)
 8013e3c:	22d0      	movs	r2, #208	; 0xd0
 8013e3e:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	681c      	ldr	r4, [r3, #0]
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	0018      	movs	r0, r3
 8013e4a:	f008 fef4 	bl	801cc36 <TimerGetElapsedTime>
 8013e4e:	0003      	movs	r3, r0
 8013e50:	429c      	cmp	r4, r3
 8013e52:	d824      	bhi.n	8013e9e <RegionCN779NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	2200      	movs	r2, #0
 8013e58:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, CN779_MAX_NB_BANDS );
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	7a58      	ldrb	r0, [r3, #9]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	7a99      	ldrb	r1, [r3, #10]
 8013e62:	4a33      	ldr	r2, [pc, #204]	; (8013f30 <RegionCN779NextChannel+0x144>)
 8013e64:	2301      	movs	r3, #1
 8013e66:	f000 fb6a 	bl	801453e <RegionCommonUpdateBandTimeOff>
 8013e6a:	0003      	movs	r3, r0
 8013e6c:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	7a58      	ldrb	r0, [r3, #9]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	7a1b      	ldrb	r3, [r3, #8]
 8013e76:	b25b      	sxtb	r3, r3
 8013e78:	b2d9      	uxtb	r1, r3
 8013e7a:	232f      	movs	r3, #47	; 0x2f
 8013e7c:	18fc      	adds	r4, r7, r3
 8013e7e:	4d2b      	ldr	r5, [pc, #172]	; (8013f2c <RegionCN779NextChannel+0x140>)
 8013e80:	4a29      	ldr	r2, [pc, #164]	; (8013f28 <RegionCN779NextChannel+0x13c>)
 8013e82:	2327      	movs	r3, #39	; 0x27
 8013e84:	18fb      	adds	r3, r7, r3
 8013e86:	9302      	str	r3, [sp, #8]
 8013e88:	2314      	movs	r3, #20
 8013e8a:	18fb      	adds	r3, r7, r3
 8013e8c:	9301      	str	r3, [sp, #4]
 8013e8e:	4b28      	ldr	r3, [pc, #160]	; (8013f30 <RegionCN779NextChannel+0x144>)
 8013e90:	9300      	str	r3, [sp, #0]
 8013e92:	002b      	movs	r3, r5
 8013e94:	f7fe fff0 	bl	8012e78 <CountNbOfEnabledChannels>
 8013e98:	0003      	movs	r3, r0
 8013e9a:	7023      	strb	r3, [r4, #0]
 8013e9c:	e010      	b.n	8013ec0 <RegionCN779NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8013e9e:	2127      	movs	r1, #39	; 0x27
 8013ea0:	187b      	adds	r3, r7, r1
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	b2da      	uxtb	r2, r3
 8013ea8:	187b      	adds	r3, r7, r1
 8013eaa:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681c      	ldr	r4, [r3, #0]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	0018      	movs	r0, r3
 8013eb6:	f008 febe 	bl	801cc36 <TimerGetElapsedTime>
 8013eba:	0003      	movs	r3, r0
 8013ebc:	1ae3      	subs	r3, r4, r3
 8013ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8013ec0:	232f      	movs	r3, #47	; 0x2f
 8013ec2:	18fb      	adds	r3, r7, r3
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d012      	beq.n	8013ef0 <RegionCN779NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013eca:	232f      	movs	r3, #47	; 0x2f
 8013ecc:	18fb      	adds	r3, r7, r3
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	3b01      	subs	r3, #1
 8013ed2:	0019      	movs	r1, r3
 8013ed4:	2000      	movs	r0, #0
 8013ed6:	f008 fed7 	bl	801cc88 <randr>
 8013eda:	0002      	movs	r2, r0
 8013edc:	2314      	movs	r3, #20
 8013ede:	18fb      	adds	r3, r7, r3
 8013ee0:	5c9a      	ldrb	r2, [r3, r2]
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013eec:	2300      	movs	r3, #0
 8013eee:	e016      	b.n	8013f1e <RegionCN779NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 8013ef0:	2327      	movs	r3, #39	; 0x27
 8013ef2:	18fb      	adds	r3, r7, r3
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d004      	beq.n	8013f04 <RegionCN779NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013efe:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013f00:	230b      	movs	r3, #11
 8013f02:	e00c      	b.n	8013f1e <RegionCN779NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013f04:	4b09      	ldr	r3, [pc, #36]	; (8013f2c <RegionCN779NextChannel+0x140>)
 8013f06:	22d0      	movs	r2, #208	; 0xd0
 8013f08:	5a9b      	ldrh	r3, [r3, r2]
 8013f0a:	2207      	movs	r2, #7
 8013f0c:	4313      	orrs	r3, r2
 8013f0e:	b299      	uxth	r1, r3
 8013f10:	4b06      	ldr	r3, [pc, #24]	; (8013f2c <RegionCN779NextChannel+0x140>)
 8013f12:	22d0      	movs	r2, #208	; 0xd0
 8013f14:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013f1c:	230c      	movs	r3, #12
    }
}
 8013f1e:	0018      	movs	r0, r3
 8013f20:	46bd      	mov	sp, r7
 8013f22:	b00c      	add	sp, #48	; 0x30
 8013f24:	bdb0      	pop	{r4, r5, r7, pc}
 8013f26:	46c0      	nop			; (mov r8, r8)
 8013f28:	2000159c 	.word	0x2000159c
 8013f2c:	200014cc 	.word	0x200014cc
 8013f30:	2000158c 	.word	0x2000158c

08013f34 <RegionCN779ChannelAdd>:

LoRaMacStatus_t RegionCN779ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8013f34:	b590      	push	{r4, r7, lr}
 8013f36:	b085      	sub	sp, #20
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8013f3c:	230f      	movs	r3, #15
 8013f3e:	18fb      	adds	r3, r7, r3
 8013f40:	2200      	movs	r2, #0
 8013f42:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8013f44:	230e      	movs	r3, #14
 8013f46:	18fb      	adds	r3, r7, r3
 8013f48:	2200      	movs	r2, #0
 8013f4a:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8013f4c:	210d      	movs	r1, #13
 8013f4e:	187b      	adds	r3, r7, r1
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	7912      	ldrb	r2, [r2, #4]
 8013f54:	701a      	strb	r2, [r3, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 8013f56:	187b      	adds	r3, r7, r1
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d801      	bhi.n	8013f62 <RegionCN779ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013f5e:	2306      	movs	r3, #6
 8013f60:	e09c      	b.n	801409c <RegionCN779ChannelAdd+0x168>
    }

    if( id >= CN779_MAX_NB_CHANNELS )
 8013f62:	230d      	movs	r3, #13
 8013f64:	18fb      	adds	r3, r7, r3
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	2b0f      	cmp	r3, #15
 8013f6a:	d901      	bls.n	8013f70 <RegionCN779ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f6c:	2303      	movs	r3, #3
 8013f6e:	e095      	b.n	801409c <RegionCN779ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	7a1b      	ldrb	r3, [r3, #8]
 8013f76:	011b      	lsls	r3, r3, #4
 8013f78:	b25b      	sxtb	r3, r3
 8013f7a:	111b      	asrs	r3, r3, #4
 8013f7c:	b25b      	sxtb	r3, r3
 8013f7e:	2207      	movs	r2, #7
 8013f80:	2100      	movs	r1, #0
 8013f82:	0018      	movs	r0, r3
 8013f84:	f000 f9e8 	bl	8014358 <RegionCommonValueInRange>
 8013f88:	1e03      	subs	r3, r0, #0
 8013f8a:	d103      	bne.n	8013f94 <RegionCN779ChannelAdd+0x60>
    {
        drInvalid = true;
 8013f8c:	230f      	movs	r3, #15
 8013f8e:	18fb      	adds	r3, r7, r3
 8013f90:	2201      	movs	r2, #1
 8013f92:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	7a1b      	ldrb	r3, [r3, #8]
 8013f9a:	b25b      	sxtb	r3, r3
 8013f9c:	111b      	asrs	r3, r3, #4
 8013f9e:	b25b      	sxtb	r3, r3
 8013fa0:	2207      	movs	r2, #7
 8013fa2:	2100      	movs	r1, #0
 8013fa4:	0018      	movs	r0, r3
 8013fa6:	f000 f9d7 	bl	8014358 <RegionCommonValueInRange>
 8013faa:	1e03      	subs	r3, r0, #0
 8013fac:	d103      	bne.n	8013fb6 <RegionCN779ChannelAdd+0x82>
    {
        drInvalid = true;
 8013fae:	230f      	movs	r3, #15
 8013fb0:	18fb      	adds	r3, r7, r3
 8013fb2:	2201      	movs	r2, #1
 8013fb4:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	7a1b      	ldrb	r3, [r3, #8]
 8013fbc:	011b      	lsls	r3, r3, #4
 8013fbe:	b25b      	sxtb	r3, r3
 8013fc0:	111b      	asrs	r3, r3, #4
 8013fc2:	b25a      	sxtb	r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	7a1b      	ldrb	r3, [r3, #8]
 8013fca:	b25b      	sxtb	r3, r3
 8013fcc:	111b      	asrs	r3, r3, #4
 8013fce:	b25b      	sxtb	r3, r3
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	dd03      	ble.n	8013fdc <RegionCN779ChannelAdd+0xa8>
    {
        drInvalid = true;
 8013fd4:	230f      	movs	r3, #15
 8013fd6:	18fb      	adds	r3, r7, r3
 8013fd8:	2201      	movs	r2, #1
 8013fda:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8013fdc:	230e      	movs	r3, #14
 8013fde:	18fb      	adds	r3, r7, r3
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	4053      	eors	r3, r2
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d010      	beq.n	801400e <RegionCN779ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	0018      	movs	r0, r3
 8013ff4:	f7fe ff18 	bl	8012e28 <VerifyRfFreq>
 8013ff8:	0003      	movs	r3, r0
 8013ffa:	001a      	movs	r2, r3
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	4053      	eors	r3, r2
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	d003      	beq.n	801400e <RegionCN779ChannelAdd+0xda>
        {
            freqInvalid = true;
 8014006:	230e      	movs	r3, #14
 8014008:	18fb      	adds	r3, r7, r3
 801400a:	2201      	movs	r2, #1
 801400c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801400e:	230f      	movs	r3, #15
 8014010:	18fb      	adds	r3, r7, r3
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d006      	beq.n	8014026 <RegionCN779ChannelAdd+0xf2>
 8014018:	230e      	movs	r3, #14
 801401a:	18fb      	adds	r3, r7, r3
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d001      	beq.n	8014026 <RegionCN779ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8014022:	2306      	movs	r3, #6
 8014024:	e03a      	b.n	801409c <RegionCN779ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8014026:	230f      	movs	r3, #15
 8014028:	18fb      	adds	r3, r7, r3
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d001      	beq.n	8014034 <RegionCN779ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8014030:	2305      	movs	r3, #5
 8014032:	e033      	b.n	801409c <RegionCN779ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8014034:	230e      	movs	r3, #14
 8014036:	18fb      	adds	r3, r7, r3
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d001      	beq.n	8014042 <RegionCN779ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801403e:	2304      	movs	r3, #4
 8014040:	e02c      	b.n	801409c <RegionCN779ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8014042:	200d      	movs	r0, #13
 8014044:	0004      	movs	r4, r0
 8014046:	183b      	adds	r3, r7, r0
 8014048:	781a      	ldrb	r2, [r3, #0]
 801404a:	0013      	movs	r3, r2
 801404c:	005b      	lsls	r3, r3, #1
 801404e:	189b      	adds	r3, r3, r2
 8014050:	009b      	lsls	r3, r3, #2
 8014052:	4a14      	ldr	r2, [pc, #80]	; (80140a4 <RegionCN779ChannelAdd+0x170>)
 8014054:	1898      	adds	r0, r3, r2
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	220c      	movs	r2, #12
 801405c:	0019      	movs	r1, r3
 801405e:	f008 fe29 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8014062:	0020      	movs	r0, r4
 8014064:	183b      	adds	r3, r7, r0
 8014066:	781a      	ldrb	r2, [r3, #0]
 8014068:	490e      	ldr	r1, [pc, #56]	; (80140a4 <RegionCN779ChannelAdd+0x170>)
 801406a:	0013      	movs	r3, r2
 801406c:	005b      	lsls	r3, r3, #1
 801406e:	189b      	adds	r3, r3, r2
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	18cb      	adds	r3, r1, r3
 8014074:	3309      	adds	r3, #9
 8014076:	2200      	movs	r2, #0
 8014078:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801407a:	4b0a      	ldr	r3, [pc, #40]	; (80140a4 <RegionCN779ChannelAdd+0x170>)
 801407c:	22d0      	movs	r2, #208	; 0xd0
 801407e:	5a9b      	ldrh	r3, [r3, r2]
 8014080:	b21a      	sxth	r2, r3
 8014082:	183b      	adds	r3, r7, r0
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	2101      	movs	r1, #1
 8014088:	4099      	lsls	r1, r3
 801408a:	000b      	movs	r3, r1
 801408c:	b21b      	sxth	r3, r3
 801408e:	4313      	orrs	r3, r2
 8014090:	b21b      	sxth	r3, r3
 8014092:	b299      	uxth	r1, r3
 8014094:	4b03      	ldr	r3, [pc, #12]	; (80140a4 <RegionCN779ChannelAdd+0x170>)
 8014096:	22d0      	movs	r2, #208	; 0xd0
 8014098:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 801409a:	2300      	movs	r3, #0
}
 801409c:	0018      	movs	r0, r3
 801409e:	46bd      	mov	sp, r7
 80140a0:	b005      	add	sp, #20
 80140a2:	bd90      	pop	{r4, r7, pc}
 80140a4:	200014cc 	.word	0x200014cc

080140a8 <RegionCN779ChannelsRemove>:

bool RegionCN779ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80140a8:	b590      	push	{r4, r7, lr}
 80140aa:	b085      	sub	sp, #20
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80140b0:	210f      	movs	r1, #15
 80140b2:	187b      	adds	r3, r7, r1
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	7812      	ldrb	r2, [r2, #0]
 80140b8:	701a      	strb	r2, [r3, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 80140ba:	187b      	adds	r3, r7, r1
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	2b02      	cmp	r3, #2
 80140c0:	d801      	bhi.n	80140c6 <RegionCN779ChannelsRemove+0x1e>
    {
        return false;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e015      	b.n	80140f2 <RegionCN779ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80140c6:	240f      	movs	r4, #15
 80140c8:	193b      	adds	r3, r7, r4
 80140ca:	781a      	ldrb	r2, [r3, #0]
 80140cc:	490b      	ldr	r1, [pc, #44]	; (80140fc <RegionCN779ChannelsRemove+0x54>)
 80140ce:	0013      	movs	r3, r2
 80140d0:	005b      	lsls	r3, r3, #1
 80140d2:	189b      	adds	r3, r3, r2
 80140d4:	009b      	lsls	r3, r3, #2
 80140d6:	18cb      	adds	r3, r1, r3
 80140d8:	220c      	movs	r2, #12
 80140da:	2100      	movs	r1, #0
 80140dc:	0018      	movs	r0, r3
 80140de:	f011 ff13 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, CN779_MAX_NB_CHANNELS );
 80140e2:	193b      	adds	r3, r7, r4
 80140e4:	7819      	ldrb	r1, [r3, #0]
 80140e6:	4b06      	ldr	r3, [pc, #24]	; (8014100 <RegionCN779ChannelsRemove+0x58>)
 80140e8:	2210      	movs	r2, #16
 80140ea:	0018      	movs	r0, r3
 80140ec:	f000 f95a 	bl	80143a4 <RegionCommonChanDisable>
 80140f0:	0003      	movs	r3, r0
}
 80140f2:	0018      	movs	r0, r3
 80140f4:	46bd      	mov	sp, r7
 80140f6:	b005      	add	sp, #20
 80140f8:	bd90      	pop	{r4, r7, pc}
 80140fa:	46c0      	nop			; (mov r8, r8)
 80140fc:	200014cc 	.word	0x200014cc
 8014100:	2000159c 	.word	0x2000159c

08014104 <RegionCN779ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionCN779ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014104:	b590      	push	{r4, r7, lr}
 8014106:	b085      	sub	sp, #20
 8014108:	af00      	add	r7, sp, #0
 801410a:	0004      	movs	r4, r0
 801410c:	0008      	movs	r0, r1
 801410e:	0011      	movs	r1, r2
 8014110:	1dfb      	adds	r3, r7, #7
 8014112:	1c22      	adds	r2, r4, #0
 8014114:	701a      	strb	r2, [r3, #0]
 8014116:	1dbb      	adds	r3, r7, #6
 8014118:	1c02      	adds	r2, r0, #0
 801411a:	701a      	strb	r2, [r3, #0]
 801411c:	1d7b      	adds	r3, r7, #5
 801411e:	1c0a      	adds	r2, r1, #0
 8014120:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8014122:	1dbb      	adds	r3, r7, #6
 8014124:	781a      	ldrb	r2, [r3, #0]
 8014126:	1d7b      	adds	r3, r7, #5
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	b2da      	uxtb	r2, r3
 801412e:	210f      	movs	r1, #15
 8014130:	187b      	adds	r3, r7, r1
 8014132:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8014134:	187b      	adds	r3, r7, r1
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	2b7f      	cmp	r3, #127	; 0x7f
 801413a:	d903      	bls.n	8014144 <RegionCN779ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 801413c:	230f      	movs	r3, #15
 801413e:	18fb      	adds	r3, r7, r3
 8014140:	2200      	movs	r2, #0
 8014142:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8014144:	230f      	movs	r3, #15
 8014146:	18fb      	adds	r3, r7, r3
 8014148:	781b      	ldrb	r3, [r3, #0]
}
 801414a:	0018      	movs	r0, r3
 801414c:	46bd      	mov	sp, r7
 801414e:	b005      	add	sp, #20
 8014150:	bd90      	pop	{r4, r7, pc}

08014152 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014152:	b580      	push	{r7, lr}
 8014154:	b084      	sub	sp, #16
 8014156:	af00      	add	r7, sp, #0
 8014158:	0002      	movs	r2, r0
 801415a:	1dbb      	adds	r3, r7, #6
 801415c:	801a      	strh	r2, [r3, #0]
 801415e:	1d7b      	adds	r3, r7, #5
 8014160:	1c0a      	adds	r2, r1, #0
 8014162:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8014164:	230f      	movs	r3, #15
 8014166:	18fb      	adds	r3, r7, r3
 8014168:	2200      	movs	r2, #0
 801416a:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 801416c:	230e      	movs	r3, #14
 801416e:	18fb      	adds	r3, r7, r3
 8014170:	2200      	movs	r2, #0
 8014172:	701a      	strb	r2, [r3, #0]
 8014174:	e01b      	b.n	80141ae <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014176:	1dbb      	adds	r3, r7, #6
 8014178:	881b      	ldrh	r3, [r3, #0]
 801417a:	200e      	movs	r0, #14
 801417c:	183a      	adds	r2, r7, r0
 801417e:	7812      	ldrb	r2, [r2, #0]
 8014180:	2101      	movs	r1, #1
 8014182:	4091      	lsls	r1, r2
 8014184:	000a      	movs	r2, r1
 8014186:	401a      	ands	r2, r3
 8014188:	183b      	adds	r3, r7, r0
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	2101      	movs	r1, #1
 801418e:	4099      	lsls	r1, r3
 8014190:	000b      	movs	r3, r1
 8014192:	429a      	cmp	r2, r3
 8014194:	d105      	bne.n	80141a2 <CountChannels+0x50>
        {
            nbActiveBits++;
 8014196:	210f      	movs	r1, #15
 8014198:	187b      	adds	r3, r7, r1
 801419a:	781a      	ldrb	r2, [r3, #0]
 801419c:	187b      	adds	r3, r7, r1
 801419e:	3201      	adds	r2, #1
 80141a0:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 80141a2:	210e      	movs	r1, #14
 80141a4:	187b      	adds	r3, r7, r1
 80141a6:	781a      	ldrb	r2, [r3, #0]
 80141a8:	187b      	adds	r3, r7, r1
 80141aa:	3201      	adds	r2, #1
 80141ac:	701a      	strb	r2, [r3, #0]
 80141ae:	230e      	movs	r3, #14
 80141b0:	18fa      	adds	r2, r7, r3
 80141b2:	1d7b      	adds	r3, r7, #5
 80141b4:	7812      	ldrb	r2, [r2, #0]
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d3dc      	bcc.n	8014176 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 80141bc:	230f      	movs	r3, #15
 80141be:	18fb      	adds	r3, r7, r3
 80141c0:	781b      	ldrb	r3, [r3, #0]
}
 80141c2:	0018      	movs	r0, r3
 80141c4:	46bd      	mov	sp, r7
 80141c6:	b004      	add	sp, #16
 80141c8:	bd80      	pop	{r7, pc}
	...

080141cc <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 80141d4:	230e      	movs	r3, #14
 80141d6:	18fb      	adds	r3, r7, r3
 80141d8:	2200      	movs	r2, #0
 80141da:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	4a0e      	ldr	r2, [pc, #56]	; (8014218 <RegionCommonGetJoinDc+0x4c>)
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d804      	bhi.n	80141ee <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80141e4:	230e      	movs	r3, #14
 80141e6:	18fb      	adds	r3, r7, r3
 80141e8:	2264      	movs	r2, #100	; 0x64
 80141ea:	801a      	strh	r2, [r3, #0]
 80141ec:	e00d      	b.n	801420a <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4a0a      	ldr	r2, [pc, #40]	; (801421c <RegionCommonGetJoinDc+0x50>)
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d805      	bhi.n	8014202 <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80141f6:	230e      	movs	r3, #14
 80141f8:	18fb      	adds	r3, r7, r3
 80141fa:	22fa      	movs	r2, #250	; 0xfa
 80141fc:	0092      	lsls	r2, r2, #2
 80141fe:	801a      	strh	r2, [r3, #0]
 8014200:	e003      	b.n	801420a <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8014202:	230e      	movs	r3, #14
 8014204:	18fb      	adds	r3, r7, r3
 8014206:	4a06      	ldr	r2, [pc, #24]	; (8014220 <RegionCommonGetJoinDc+0x54>)
 8014208:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 801420a:	230e      	movs	r3, #14
 801420c:	18fb      	adds	r3, r7, r3
 801420e:	881b      	ldrh	r3, [r3, #0]
}
 8014210:	0018      	movs	r0, r3
 8014212:	46bd      	mov	sp, r7
 8014214:	b004      	add	sp, #16
 8014216:	bd80      	pop	{r7, pc}
 8014218:	0036ee7f 	.word	0x0036ee7f
 801421c:	025c3f7f 	.word	0x025c3f7f
 8014220:	00002710 	.word	0x00002710

08014224 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014224:	b590      	push	{r4, r7, lr}
 8014226:	b085      	sub	sp, #20
 8014228:	af00      	add	r7, sp, #0
 801422a:	0004      	movs	r4, r0
 801422c:	6039      	str	r1, [r7, #0]
 801422e:	0010      	movs	r0, r2
 8014230:	0019      	movs	r1, r3
 8014232:	1dfb      	adds	r3, r7, #7
 8014234:	1c22      	adds	r2, r4, #0
 8014236:	701a      	strb	r2, [r3, #0]
 8014238:	1dbb      	adds	r3, r7, #6
 801423a:	1c02      	adds	r2, r0, #0
 801423c:	701a      	strb	r2, [r3, #0]
 801423e:	1d7b      	adds	r3, r7, #5
 8014240:	1c0a      	adds	r2, r1, #0
 8014242:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014244:	2320      	movs	r3, #32
 8014246:	18fb      	adds	r3, r7, r3
 8014248:	2200      	movs	r2, #0
 801424a:	569a      	ldrsb	r2, [r3, r2]
 801424c:	1d7b      	adds	r3, r7, #5
 801424e:	2100      	movs	r1, #0
 8014250:	5659      	ldrsb	r1, [r3, r1]
 8014252:	1dbb      	adds	r3, r7, #6
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	b25b      	sxtb	r3, r3
 8014258:	0018      	movs	r0, r3
 801425a:	f000 f87d 	bl	8014358 <RegionCommonValueInRange>
 801425e:	1e03      	subs	r3, r0, #0
 8014260:	d101      	bne.n	8014266 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8014262:	2300      	movs	r3, #0
 8014264:	e074      	b.n	8014350 <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014266:	230f      	movs	r3, #15
 8014268:	18fb      	adds	r3, r7, r3
 801426a:	2200      	movs	r2, #0
 801426c:	701a      	strb	r2, [r3, #0]
 801426e:	230e      	movs	r3, #14
 8014270:	18fb      	adds	r3, r7, r3
 8014272:	2200      	movs	r2, #0
 8014274:	701a      	strb	r2, [r3, #0]
 8014276:	e063      	b.n	8014340 <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014278:	230d      	movs	r3, #13
 801427a:	18fb      	adds	r3, r7, r3
 801427c:	2200      	movs	r2, #0
 801427e:	701a      	strb	r2, [r3, #0]
 8014280:	e04d      	b.n	801431e <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014282:	230e      	movs	r3, #14
 8014284:	18fb      	adds	r3, r7, r3
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	683a      	ldr	r2, [r7, #0]
 801428c:	18d3      	adds	r3, r2, r3
 801428e:	881b      	ldrh	r3, [r3, #0]
 8014290:	001a      	movs	r2, r3
 8014292:	230d      	movs	r3, #13
 8014294:	18fb      	adds	r3, r7, r3
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	411a      	asrs	r2, r3
 801429a:	0013      	movs	r3, r2
 801429c:	2201      	movs	r2, #1
 801429e:	4013      	ands	r3, r2
 80142a0:	d037      	beq.n	8014312 <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80142a2:	200f      	movs	r0, #15
 80142a4:	183b      	adds	r3, r7, r0
 80142a6:	781a      	ldrb	r2, [r3, #0]
 80142a8:	240d      	movs	r4, #13
 80142aa:	193b      	adds	r3, r7, r4
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	18d3      	adds	r3, r2, r3
 80142b0:	001a      	movs	r2, r3
 80142b2:	0013      	movs	r3, r2
 80142b4:	005b      	lsls	r3, r3, #1
 80142b6:	189b      	adds	r3, r3, r2
 80142b8:	009b      	lsls	r3, r3, #2
 80142ba:	001a      	movs	r2, r3
 80142bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142be:	189b      	adds	r3, r3, r2
 80142c0:	7a1b      	ldrb	r3, [r3, #8]
 80142c2:	011b      	lsls	r3, r3, #4
 80142c4:	b25b      	sxtb	r3, r3
 80142c6:	111b      	asrs	r3, r3, #4
 80142c8:	b25b      	sxtb	r3, r3
 80142ca:	001a      	movs	r2, r3
 80142cc:	230f      	movs	r3, #15
 80142ce:	4013      	ands	r3, r2
 80142d0:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80142d2:	183b      	adds	r3, r7, r0
 80142d4:	781a      	ldrb	r2, [r3, #0]
 80142d6:	193b      	adds	r3, r7, r4
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	18d3      	adds	r3, r2, r3
 80142dc:	001a      	movs	r2, r3
 80142de:	0013      	movs	r3, r2
 80142e0:	005b      	lsls	r3, r3, #1
 80142e2:	189b      	adds	r3, r3, r2
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	001a      	movs	r2, r3
 80142e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ea:	189b      	adds	r3, r3, r2
 80142ec:	7a1b      	ldrb	r3, [r3, #8]
 80142ee:	b25b      	sxtb	r3, r3
 80142f0:	111b      	asrs	r3, r3, #4
 80142f2:	b25b      	sxtb	r3, r3
 80142f4:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80142f6:	230f      	movs	r3, #15
 80142f8:	4013      	ands	r3, r2
 80142fa:	b25a      	sxtb	r2, r3
 80142fc:	1dbb      	adds	r3, r7, #6
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	b25b      	sxtb	r3, r3
 8014302:	0018      	movs	r0, r3
 8014304:	f000 f828 	bl	8014358 <RegionCommonValueInRange>
 8014308:	0003      	movs	r3, r0
 801430a:	2b01      	cmp	r3, #1
 801430c:	d101      	bne.n	8014312 <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801430e:	2301      	movs	r3, #1
 8014310:	e01e      	b.n	8014350 <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8014312:	210d      	movs	r1, #13
 8014314:	187b      	adds	r3, r7, r1
 8014316:	781a      	ldrb	r2, [r3, #0]
 8014318:	187b      	adds	r3, r7, r1
 801431a:	3201      	adds	r2, #1
 801431c:	701a      	strb	r2, [r3, #0]
 801431e:	230d      	movs	r3, #13
 8014320:	18fb      	adds	r3, r7, r3
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	2b0f      	cmp	r3, #15
 8014326:	d9ac      	bls.n	8014282 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014328:	220f      	movs	r2, #15
 801432a:	18bb      	adds	r3, r7, r2
 801432c:	18ba      	adds	r2, r7, r2
 801432e:	7812      	ldrb	r2, [r2, #0]
 8014330:	3210      	adds	r2, #16
 8014332:	701a      	strb	r2, [r3, #0]
 8014334:	210e      	movs	r1, #14
 8014336:	187b      	adds	r3, r7, r1
 8014338:	781a      	ldrb	r2, [r3, #0]
 801433a:	187b      	adds	r3, r7, r1
 801433c:	3201      	adds	r2, #1
 801433e:	701a      	strb	r2, [r3, #0]
 8014340:	230f      	movs	r3, #15
 8014342:	18fa      	adds	r2, r7, r3
 8014344:	1dfb      	adds	r3, r7, #7
 8014346:	7812      	ldrb	r2, [r2, #0]
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	429a      	cmp	r2, r3
 801434c:	d394      	bcc.n	8014278 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 801434e:	2300      	movs	r3, #0
}
 8014350:	0018      	movs	r0, r3
 8014352:	46bd      	mov	sp, r7
 8014354:	b005      	add	sp, #20
 8014356:	bd90      	pop	{r4, r7, pc}

08014358 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014358:	b590      	push	{r4, r7, lr}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	0004      	movs	r4, r0
 8014360:	0008      	movs	r0, r1
 8014362:	0011      	movs	r1, r2
 8014364:	1dfb      	adds	r3, r7, #7
 8014366:	1c22      	adds	r2, r4, #0
 8014368:	701a      	strb	r2, [r3, #0]
 801436a:	1dbb      	adds	r3, r7, #6
 801436c:	1c02      	adds	r2, r0, #0
 801436e:	701a      	strb	r2, [r3, #0]
 8014370:	1d7b      	adds	r3, r7, #5
 8014372:	1c0a      	adds	r2, r1, #0
 8014374:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8014376:	1dfa      	adds	r2, r7, #7
 8014378:	1dbb      	adds	r3, r7, #6
 801437a:	7812      	ldrb	r2, [r2, #0]
 801437c:	b252      	sxtb	r2, r2
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	b25b      	sxtb	r3, r3
 8014382:	429a      	cmp	r2, r3
 8014384:	db09      	blt.n	801439a <RegionCommonValueInRange+0x42>
 8014386:	1dfa      	adds	r2, r7, #7
 8014388:	1d7b      	adds	r3, r7, #5
 801438a:	7812      	ldrb	r2, [r2, #0]
 801438c:	b252      	sxtb	r2, r2
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	b25b      	sxtb	r3, r3
 8014392:	429a      	cmp	r2, r3
 8014394:	dc01      	bgt.n	801439a <RegionCommonValueInRange+0x42>
    {
        return 1;
 8014396:	2301      	movs	r3, #1
 8014398:	e000      	b.n	801439c <RegionCommonValueInRange+0x44>
    }
    return 0;
 801439a:	2300      	movs	r3, #0
}
 801439c:	0018      	movs	r0, r3
 801439e:	46bd      	mov	sp, r7
 80143a0:	b003      	add	sp, #12
 80143a2:	bd90      	pop	{r4, r7, pc}

080143a4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	0008      	movs	r0, r1
 80143ae:	0011      	movs	r1, r2
 80143b0:	1cfb      	adds	r3, r7, #3
 80143b2:	1c02      	adds	r2, r0, #0
 80143b4:	701a      	strb	r2, [r3, #0]
 80143b6:	1cbb      	adds	r3, r7, #2
 80143b8:	1c0a      	adds	r2, r1, #0
 80143ba:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 80143bc:	210f      	movs	r1, #15
 80143be:	187b      	adds	r3, r7, r1
 80143c0:	1cfa      	adds	r2, r7, #3
 80143c2:	7812      	ldrb	r2, [r2, #0]
 80143c4:	0912      	lsrs	r2, r2, #4
 80143c6:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80143c8:	1cbb      	adds	r3, r7, #2
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	091b      	lsrs	r3, r3, #4
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	187a      	adds	r2, r7, r1
 80143d2:	7812      	ldrb	r2, [r2, #0]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d805      	bhi.n	80143e4 <RegionCommonChanDisable+0x40>
 80143d8:	1cfa      	adds	r2, r7, #3
 80143da:	1cbb      	adds	r3, r7, #2
 80143dc:	7812      	ldrb	r2, [r2, #0]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d301      	bcc.n	80143e8 <RegionCommonChanDisable+0x44>
    {
        return false;
 80143e4:	2300      	movs	r3, #0
 80143e6:	e01b      	b.n	8014420 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80143e8:	200f      	movs	r0, #15
 80143ea:	183b      	adds	r3, r7, r0
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	18d3      	adds	r3, r2, r3
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	b21b      	sxth	r3, r3
 80143f8:	1cfa      	adds	r2, r7, #3
 80143fa:	7812      	ldrb	r2, [r2, #0]
 80143fc:	210f      	movs	r1, #15
 80143fe:	400a      	ands	r2, r1
 8014400:	2101      	movs	r1, #1
 8014402:	4091      	lsls	r1, r2
 8014404:	000a      	movs	r2, r1
 8014406:	b212      	sxth	r2, r2
 8014408:	43d2      	mvns	r2, r2
 801440a:	b212      	sxth	r2, r2
 801440c:	4013      	ands	r3, r2
 801440e:	b219      	sxth	r1, r3
 8014410:	183b      	adds	r3, r7, r0
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	005b      	lsls	r3, r3, #1
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	18d3      	adds	r3, r2, r3
 801441a:	b28a      	uxth	r2, r1
 801441c:	801a      	strh	r2, [r3, #0]

    return true;
 801441e:	2301      	movs	r3, #1
}
 8014420:	0018      	movs	r0, r3
 8014422:	46bd      	mov	sp, r7
 8014424:	b004      	add	sp, #16
 8014426:	bd80      	pop	{r7, pc}

08014428 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014428:	b590      	push	{r4, r7, lr}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	0008      	movs	r0, r1
 8014432:	0011      	movs	r1, r2
 8014434:	1cfb      	adds	r3, r7, #3
 8014436:	1c02      	adds	r2, r0, #0
 8014438:	701a      	strb	r2, [r3, #0]
 801443a:	1cbb      	adds	r3, r7, #2
 801443c:	1c0a      	adds	r2, r1, #0
 801443e:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8014440:	230f      	movs	r3, #15
 8014442:	18fb      	adds	r3, r7, r3
 8014444:	2200      	movs	r2, #0
 8014446:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d101      	bne.n	8014452 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 801444e:	2300      	movs	r3, #0
 8014450:	e027      	b.n	80144a2 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014452:	230e      	movs	r3, #14
 8014454:	18fb      	adds	r3, r7, r3
 8014456:	1cfa      	adds	r2, r7, #3
 8014458:	7812      	ldrb	r2, [r2, #0]
 801445a:	701a      	strb	r2, [r3, #0]
 801445c:	e017      	b.n	801448e <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801445e:	240e      	movs	r4, #14
 8014460:	193b      	adds	r3, r7, r4
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	005b      	lsls	r3, r3, #1
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	18d3      	adds	r3, r2, r3
 801446a:	881b      	ldrh	r3, [r3, #0]
 801446c:	2110      	movs	r1, #16
 801446e:	0018      	movs	r0, r3
 8014470:	f7ff fe6f 	bl	8014152 <CountChannels>
 8014474:	0003      	movs	r3, r0
 8014476:	0019      	movs	r1, r3
 8014478:	220f      	movs	r2, #15
 801447a:	18bb      	adds	r3, r7, r2
 801447c:	18ba      	adds	r2, r7, r2
 801447e:	7812      	ldrb	r2, [r2, #0]
 8014480:	188a      	adds	r2, r1, r2
 8014482:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014484:	193b      	adds	r3, r7, r4
 8014486:	781a      	ldrb	r2, [r3, #0]
 8014488:	193b      	adds	r3, r7, r4
 801448a:	3201      	adds	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
 801448e:	230e      	movs	r3, #14
 8014490:	18fa      	adds	r2, r7, r3
 8014492:	1cbb      	adds	r3, r7, #2
 8014494:	7812      	ldrb	r2, [r2, #0]
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	429a      	cmp	r2, r3
 801449a:	d3e0      	bcc.n	801445e <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 801449c:	230f      	movs	r3, #15
 801449e:	18fb      	adds	r3, r7, r3
 80144a0:	781b      	ldrb	r3, [r3, #0]
}
 80144a2:	0018      	movs	r0, r3
 80144a4:	46bd      	mov	sp, r7
 80144a6:	b005      	add	sp, #20
 80144a8:	bd90      	pop	{r4, r7, pc}

080144aa <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80144aa:	b580      	push	{r7, lr}
 80144ac:	b086      	sub	sp, #24
 80144ae:	af00      	add	r7, sp, #0
 80144b0:	60f8      	str	r0, [r7, #12]
 80144b2:	60b9      	str	r1, [r7, #8]
 80144b4:	1dfb      	adds	r3, r7, #7
 80144b6:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d020      	beq.n	8014500 <RegionCommonChanMaskCopy+0x56>
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d01d      	beq.n	8014500 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 80144c4:	2317      	movs	r3, #23
 80144c6:	18fb      	adds	r3, r7, r3
 80144c8:	2200      	movs	r2, #0
 80144ca:	701a      	strb	r2, [r3, #0]
 80144cc:	e011      	b.n	80144f2 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80144ce:	2017      	movs	r0, #23
 80144d0:	183b      	adds	r3, r7, r0
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	005b      	lsls	r3, r3, #1
 80144d6:	68ba      	ldr	r2, [r7, #8]
 80144d8:	18d2      	adds	r2, r2, r3
 80144da:	183b      	adds	r3, r7, r0
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	68f9      	ldr	r1, [r7, #12]
 80144e2:	18cb      	adds	r3, r1, r3
 80144e4:	8812      	ldrh	r2, [r2, #0]
 80144e6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80144e8:	183b      	adds	r3, r7, r0
 80144ea:	781a      	ldrb	r2, [r3, #0]
 80144ec:	183b      	adds	r3, r7, r0
 80144ee:	3201      	adds	r2, #1
 80144f0:	701a      	strb	r2, [r3, #0]
 80144f2:	2317      	movs	r3, #23
 80144f4:	18fa      	adds	r2, r7, r3
 80144f6:	1dfb      	adds	r3, r7, #7
 80144f8:	7812      	ldrb	r2, [r2, #0]
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d3e6      	bcc.n	80144ce <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8014500:	46c0      	nop			; (mov r8, r8)
 8014502:	46bd      	mov	sp, r7
 8014504:	b006      	add	sp, #24
 8014506:	bd80      	pop	{r7, pc}

08014508 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b084      	sub	sp, #16
 801450c:	af00      	add	r7, sp, #0
 801450e:	60b9      	str	r1, [r7, #8]
 8014510:	607a      	str	r2, [r7, #4]
 8014512:	210f      	movs	r1, #15
 8014514:	187b      	adds	r3, r7, r1
 8014516:	1c02      	adds	r2, r0, #0
 8014518:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 801451a:	187b      	adds	r3, r7, r1
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d003      	beq.n	801452a <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8014528:	e005      	b.n	8014536 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	605a      	str	r2, [r3, #4]
}
 8014536:	46c0      	nop			; (mov r8, r8)
 8014538:	46bd      	mov	sp, r7
 801453a:	b004      	add	sp, #16
 801453c:	bd80      	pop	{r7, pc}

0801453e <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 801453e:	b590      	push	{r4, r7, lr}
 8014540:	b087      	sub	sp, #28
 8014542:	af00      	add	r7, sp, #0
 8014544:	0004      	movs	r4, r0
 8014546:	0008      	movs	r0, r1
 8014548:	603a      	str	r2, [r7, #0]
 801454a:	0019      	movs	r1, r3
 801454c:	1dfb      	adds	r3, r7, #7
 801454e:	1c22      	adds	r2, r4, #0
 8014550:	701a      	strb	r2, [r3, #0]
 8014552:	1dbb      	adds	r3, r7, #6
 8014554:	1c02      	adds	r2, r0, #0
 8014556:	701a      	strb	r2, [r3, #0]
 8014558:	1d7b      	adds	r3, r7, #5
 801455a:	1c0a      	adds	r2, r1, #0
 801455c:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 801455e:	2301      	movs	r3, #1
 8014560:	425b      	negs	r3, r3
 8014562:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8014564:	2313      	movs	r3, #19
 8014566:	18fb      	adds	r3, r7, r3
 8014568:	2200      	movs	r2, #0
 801456a:	701a      	strb	r2, [r3, #0]
 801456c:	e0cf      	b.n	801470e <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 801456e:	1dfb      	adds	r3, r7, #7
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	2201      	movs	r2, #1
 8014574:	4053      	eors	r3, r2
 8014576:	b2db      	uxtb	r3, r3
 8014578:	2b00      	cmp	r3, #0
 801457a:	d065      	beq.n	8014648 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 801457c:	2313      	movs	r3, #19
 801457e:	18fb      	adds	r3, r7, r3
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	011b      	lsls	r3, r3, #4
 8014584:	683a      	ldr	r2, [r7, #0]
 8014586:	18d3      	adds	r3, r2, r3
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	0018      	movs	r0, r3
 801458c:	f008 fb53 	bl	801cc36 <TimerGetElapsedTime>
 8014590:	0004      	movs	r4, r0
 8014592:	1dbb      	adds	r3, r7, #6
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d00b      	beq.n	80145b2 <RegionCommonUpdateBandTimeOff+0x74>
 801459a:	2313      	movs	r3, #19
 801459c:	18fb      	adds	r3, r7, r3
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	011b      	lsls	r3, r3, #4
 80145a2:	683a      	ldr	r2, [r7, #0]
 80145a4:	18d3      	adds	r3, r2, r3
 80145a6:	689b      	ldr	r3, [r3, #8]
 80145a8:	0018      	movs	r0, r3
 80145aa:	f008 fb44 	bl	801cc36 <TimerGetElapsedTime>
 80145ae:	0003      	movs	r3, r0
 80145b0:	e000      	b.n	80145b4 <RegionCommonUpdateBandTimeOff+0x76>
 80145b2:	2300      	movs	r3, #0
 80145b4:	42a3      	cmp	r3, r4
 80145b6:	d20b      	bcs.n	80145d0 <RegionCommonUpdateBandTimeOff+0x92>
 80145b8:	2313      	movs	r3, #19
 80145ba:	18fb      	adds	r3, r7, r3
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	011b      	lsls	r3, r3, #4
 80145c0:	683a      	ldr	r2, [r7, #0]
 80145c2:	18d3      	adds	r3, r2, r3
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	0018      	movs	r0, r3
 80145c8:	f008 fb35 	bl	801cc36 <TimerGetElapsedTime>
 80145cc:	0003      	movs	r3, r0
 80145ce:	e010      	b.n	80145f2 <RegionCommonUpdateBandTimeOff+0xb4>
 80145d0:	1dbb      	adds	r3, r7, #6
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00b      	beq.n	80145f0 <RegionCommonUpdateBandTimeOff+0xb2>
 80145d8:	2313      	movs	r3, #19
 80145da:	18fb      	adds	r3, r7, r3
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	011b      	lsls	r3, r3, #4
 80145e0:	683a      	ldr	r2, [r7, #0]
 80145e2:	18d3      	adds	r3, r2, r3
 80145e4:	689b      	ldr	r3, [r3, #8]
 80145e6:	0018      	movs	r0, r3
 80145e8:	f008 fb25 	bl	801cc36 <TimerGetElapsedTime>
 80145ec:	0003      	movs	r3, r0
 80145ee:	e000      	b.n	80145f2 <RegionCommonUpdateBandTimeOff+0xb4>
 80145f0:	2300      	movs	r3, #0
 80145f2:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 80145f4:	2313      	movs	r3, #19
 80145f6:	18fb      	adds	r3, r7, r3
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	011b      	lsls	r3, r3, #4
 80145fc:	683a      	ldr	r2, [r7, #0]
 80145fe:	18d3      	adds	r3, r2, r3
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	68fa      	ldr	r2, [r7, #12]
 8014604:	429a      	cmp	r2, r3
 8014606:	d307      	bcc.n	8014618 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 8014608:	2313      	movs	r3, #19
 801460a:	18fb      	adds	r3, r7, r3
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	011b      	lsls	r3, r3, #4
 8014610:	683a      	ldr	r2, [r7, #0]
 8014612:	18d3      	adds	r3, r2, r3
 8014614:	2200      	movs	r2, #0
 8014616:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8014618:	2313      	movs	r3, #19
 801461a:	18fb      	adds	r3, r7, r3
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	011b      	lsls	r3, r3, #4
 8014620:	683a      	ldr	r2, [r7, #0]
 8014622:	18d3      	adds	r3, r2, r3
 8014624:	68db      	ldr	r3, [r3, #12]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d06b      	beq.n	8014702 <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 801462a:	2313      	movs	r3, #19
 801462c:	18fb      	adds	r3, r7, r3
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	011b      	lsls	r3, r3, #4
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	18d3      	adds	r3, r2, r3
 8014636:	68da      	ldr	r2, [r3, #12]
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	1ad2      	subs	r2, r2, r3
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	4293      	cmp	r3, r2
 8014640:	d900      	bls.n	8014644 <RegionCommonUpdateBandTimeOff+0x106>
 8014642:	0013      	movs	r3, r2
 8014644:	617b      	str	r3, [r7, #20]
 8014646:	e05c      	b.n	8014702 <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 8014648:	1dbb      	adds	r3, r7, #6
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d04e      	beq.n	80146ee <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 8014650:	2113      	movs	r1, #19
 8014652:	187b      	adds	r3, r7, r1
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	011b      	lsls	r3, r3, #4
 8014658:	683a      	ldr	r2, [r7, #0]
 801465a:	18d3      	adds	r3, r2, r3
 801465c:	68dc      	ldr	r4, [r3, #12]
 801465e:	187b      	adds	r3, r7, r1
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	011b      	lsls	r3, r3, #4
 8014664:	683a      	ldr	r2, [r7, #0]
 8014666:	18d3      	adds	r3, r2, r3
 8014668:	689b      	ldr	r3, [r3, #8]
 801466a:	0018      	movs	r0, r3
 801466c:	f008 fae3 	bl	801cc36 <TimerGetElapsedTime>
 8014670:	0003      	movs	r3, r0
 8014672:	429c      	cmp	r4, r3
 8014674:	d807      	bhi.n	8014686 <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 8014676:	2313      	movs	r3, #19
 8014678:	18fb      	adds	r3, r7, r3
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	011b      	lsls	r3, r3, #4
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	18d3      	adds	r3, r2, r3
 8014682:	2200      	movs	r2, #0
 8014684:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 8014686:	2313      	movs	r3, #19
 8014688:	18fb      	adds	r3, r7, r3
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	011b      	lsls	r3, r3, #4
 801468e:	683a      	ldr	r2, [r7, #0]
 8014690:	18d3      	adds	r3, r2, r3
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d034      	beq.n	8014702 <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 8014698:	2113      	movs	r1, #19
 801469a:	187b      	adds	r3, r7, r1
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	011b      	lsls	r3, r3, #4
 80146a0:	683a      	ldr	r2, [r7, #0]
 80146a2:	18d3      	adds	r3, r2, r3
 80146a4:	68dc      	ldr	r4, [r3, #12]
 80146a6:	187b      	adds	r3, r7, r1
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	011b      	lsls	r3, r3, #4
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	18d3      	adds	r3, r2, r3
 80146b0:	689b      	ldr	r3, [r3, #8]
 80146b2:	0018      	movs	r0, r3
 80146b4:	f008 fabf 	bl	801cc36 <TimerGetElapsedTime>
 80146b8:	0003      	movs	r3, r0
 80146ba:	1ae3      	subs	r3, r4, r3
 80146bc:	697a      	ldr	r2, [r7, #20]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d912      	bls.n	80146e8 <RegionCommonUpdateBandTimeOff+0x1aa>
 80146c2:	2113      	movs	r1, #19
 80146c4:	187b      	adds	r3, r7, r1
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	011b      	lsls	r3, r3, #4
 80146ca:	683a      	ldr	r2, [r7, #0]
 80146cc:	18d3      	adds	r3, r2, r3
 80146ce:	68dc      	ldr	r4, [r3, #12]
 80146d0:	187b      	adds	r3, r7, r1
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	011b      	lsls	r3, r3, #4
 80146d6:	683a      	ldr	r2, [r7, #0]
 80146d8:	18d3      	adds	r3, r2, r3
 80146da:	689b      	ldr	r3, [r3, #8]
 80146dc:	0018      	movs	r0, r3
 80146de:	f008 faaa 	bl	801cc36 <TimerGetElapsedTime>
 80146e2:	0003      	movs	r3, r0
 80146e4:	1ae3      	subs	r3, r4, r3
 80146e6:	e000      	b.n	80146ea <RegionCommonUpdateBandTimeOff+0x1ac>
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	617b      	str	r3, [r7, #20]
 80146ec:	e009      	b.n	8014702 <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 80146ee:	2300      	movs	r3, #0
 80146f0:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 80146f2:	2313      	movs	r3, #19
 80146f4:	18fb      	adds	r3, r7, r3
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	011b      	lsls	r3, r3, #4
 80146fa:	683a      	ldr	r2, [r7, #0]
 80146fc:	18d3      	adds	r3, r2, r3
 80146fe:	2200      	movs	r2, #0
 8014700:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8014702:	2113      	movs	r1, #19
 8014704:	187b      	adds	r3, r7, r1
 8014706:	781a      	ldrb	r2, [r3, #0]
 8014708:	187b      	adds	r3, r7, r1
 801470a:	3201      	adds	r2, #1
 801470c:	701a      	strb	r2, [r3, #0]
 801470e:	2313      	movs	r3, #19
 8014710:	18fa      	adds	r2, r7, r3
 8014712:	1d7b      	adds	r3, r7, #5
 8014714:	7812      	ldrb	r2, [r2, #0]
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d200      	bcs.n	801471e <RegionCommonUpdateBandTimeOff+0x1e0>
 801471c:	e727      	b.n	801456e <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 801471e:	697b      	ldr	r3, [r7, #20]
}
 8014720:	0018      	movs	r0, r3
 8014722:	46bd      	mov	sp, r7
 8014724:	b007      	add	sp, #28
 8014726:	bd90      	pop	{r4, r7, pc}

08014728 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014732:	230f      	movs	r3, #15
 8014734:	18fb      	adds	r3, r7, r3
 8014736:	2200      	movs	r2, #0
 8014738:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	781b      	ldrb	r3, [r3, #0]
 801473e:	2b03      	cmp	r3, #3
 8014740:	d141      	bne.n	80147c6 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	3301      	adds	r3, #1
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	b25a      	sxtb	r2, r3
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	785b      	ldrb	r3, [r3, #1]
 8014752:	b25b      	sxtb	r3, r3
 8014754:	220f      	movs	r2, #15
 8014756:	4013      	ands	r3, r2
 8014758:	b25a      	sxtb	r2, r3
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	785b      	ldrb	r3, [r3, #1]
 8014762:	b25b      	sxtb	r3, r3
 8014764:	b2db      	uxtb	r3, r3
 8014766:	091b      	lsrs	r3, r3, #4
 8014768:	b2db      	uxtb	r3, r3
 801476a:	b25a      	sxtb	r2, r3
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	3302      	adds	r3, #2
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	b29a      	uxth	r2, r3
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	889b      	ldrh	r3, [r3, #4]
 8014780:	b21a      	sxth	r2, r3
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	3303      	adds	r3, #3
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	021b      	lsls	r3, r3, #8
 801478a:	b21b      	sxth	r3, r3
 801478c:	4313      	orrs	r3, r2
 801478e:	b21b      	sxth	r3, r3
 8014790:	b29a      	uxth	r2, r3
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	791a      	ldrb	r2, [r3, #4]
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	091b      	lsrs	r3, r3, #4
 80147a4:	b2db      	uxtb	r3, r3
 80147a6:	2207      	movs	r2, #7
 80147a8:	4013      	ands	r3, r2
 80147aa:	b2da      	uxtb	r2, r3
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	220f      	movs	r2, #15
 80147b6:	4013      	ands	r3, r2
 80147b8:	b2da      	uxtb	r2, r3
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80147be:	230f      	movs	r3, #15
 80147c0:	18fb      	adds	r3, r7, r3
 80147c2:	2205      	movs	r2, #5
 80147c4:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 80147c6:	230f      	movs	r3, #15
 80147c8:	18fb      	adds	r3, r7, r3
 80147ca:	781b      	ldrb	r3, [r3, #0]
}
 80147cc:	0018      	movs	r0, r3
 80147ce:	46bd      	mov	sp, r7
 80147d0:	b004      	add	sp, #16
 80147d2:	bd80      	pop	{r7, pc}

080147d4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80147d4:	b5b0      	push	{r4, r5, r7, lr}
 80147d6:	b088      	sub	sp, #32
 80147d8:	af02      	add	r7, sp, #8
 80147da:	60f8      	str	r0, [r7, #12]
 80147dc:	60b9      	str	r1, [r7, #8]
 80147de:	607a      	str	r2, [r7, #4]
 80147e0:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80147e2:	2317      	movs	r3, #23
 80147e4:	18fb      	adds	r3, r7, r3
 80147e6:	68fa      	ldr	r2, [r7, #12]
 80147e8:	7912      	ldrb	r2, [r2, #4]
 80147ea:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 80147ec:	2316      	movs	r3, #22
 80147ee:	18fb      	adds	r3, r7, r3
 80147f0:	68fa      	ldr	r2, [r7, #12]
 80147f2:	7992      	ldrb	r2, [r2, #6]
 80147f4:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 80147f6:	2315      	movs	r3, #21
 80147f8:	18fb      	adds	r3, r7, r3
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	79d2      	ldrb	r2, [r2, #7]
 80147fe:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	7a1a      	ldrb	r2, [r3, #8]
 8014804:	2314      	movs	r3, #20
 8014806:	18fb      	adds	r3, r7, r3
 8014808:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	795b      	ldrb	r3, [r3, #5]
 801480e:	2201      	movs	r2, #1
 8014810:	4053      	eors	r3, r2
 8014812:	b2db      	uxtb	r3, r3
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00e      	beq.n	8014836 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014818:	2314      	movs	r3, #20
 801481a:	18fb      	adds	r3, r7, r3
 801481c:	68fa      	ldr	r2, [r7, #12]
 801481e:	7ad2      	ldrb	r2, [r2, #11]
 8014820:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8014822:	2316      	movs	r3, #22
 8014824:	18fb      	adds	r3, r7, r3
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	7a52      	ldrb	r2, [r2, #9]
 801482a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 801482c:	2315      	movs	r3, #21
 801482e:	18fb      	adds	r3, r7, r3
 8014830:	68fa      	ldr	r2, [r7, #12]
 8014832:	7a92      	ldrb	r2, [r2, #10]
 8014834:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8014836:	2317      	movs	r3, #23
 8014838:	18fb      	adds	r3, r7, r3
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d049      	beq.n	80148d4 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	7b18      	ldrb	r0, [r3, #12]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	691c      	ldr	r4, [r3, #16]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2514      	movs	r5, #20
 801484c:	575d      	ldrsb	r5, [r3, r5]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2215      	movs	r2, #21
 8014852:	569a      	ldrsb	r2, [r3, r2]
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	699b      	ldr	r3, [r3, #24]
 8014858:	2116      	movs	r1, #22
 801485a:	1879      	adds	r1, r7, r1
 801485c:	7809      	ldrb	r1, [r1, #0]
 801485e:	b249      	sxtb	r1, r1
 8014860:	9301      	str	r3, [sp, #4]
 8014862:	9200      	str	r2, [sp, #0]
 8014864:	002b      	movs	r3, r5
 8014866:	000a      	movs	r2, r1
 8014868:	0021      	movs	r1, r4
 801486a:	f7ff fcdb 	bl	8014224 <RegionCommonChanVerifyDr>
 801486e:	0003      	movs	r3, r0
 8014870:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014872:	2301      	movs	r3, #1
 8014874:	4053      	eors	r3, r2
 8014876:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014878:	2b00      	cmp	r3, #0
 801487a:	d006      	beq.n	801488a <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 801487c:	2217      	movs	r2, #23
 801487e:	18bb      	adds	r3, r7, r2
 8014880:	18ba      	adds	r2, r7, r2
 8014882:	7812      	ldrb	r2, [r2, #0]
 8014884:	2102      	movs	r1, #2
 8014886:	438a      	bics	r2, r1
 8014888:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	211d      	movs	r1, #29
 801488e:	5659      	ldrsb	r1, [r3, r1]
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	221c      	movs	r2, #28
 8014894:	569a      	ldrsb	r2, [r3, r2]
 8014896:	2315      	movs	r3, #21
 8014898:	18fb      	adds	r3, r7, r3
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	b25b      	sxtb	r3, r3
 801489e:	0018      	movs	r0, r3
 80148a0:	f7ff fd5a 	bl	8014358 <RegionCommonValueInRange>
 80148a4:	1e03      	subs	r3, r0, #0
 80148a6:	d115      	bne.n	80148d4 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	7f5b      	ldrb	r3, [r3, #29]
 80148ac:	b25b      	sxtb	r3, r3
 80148ae:	2215      	movs	r2, #21
 80148b0:	18ba      	adds	r2, r7, r2
 80148b2:	7812      	ldrb	r2, [r2, #0]
 80148b4:	b252      	sxtb	r2, r2
 80148b6:	429a      	cmp	r2, r3
 80148b8:	da05      	bge.n	80148c6 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80148ba:	2315      	movs	r3, #21
 80148bc:	18fb      	adds	r3, r7, r3
 80148be:	68fa      	ldr	r2, [r7, #12]
 80148c0:	7f52      	ldrb	r2, [r2, #29]
 80148c2:	701a      	strb	r2, [r3, #0]
 80148c4:	e006      	b.n	80148d4 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80148c6:	2217      	movs	r2, #23
 80148c8:	18bb      	adds	r3, r7, r2
 80148ca:	18ba      	adds	r2, r7, r2
 80148cc:	7812      	ldrb	r2, [r2, #0]
 80148ce:	2104      	movs	r1, #4
 80148d0:	438a      	bics	r2, r1
 80148d2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80148d4:	2317      	movs	r3, #23
 80148d6:	18fb      	adds	r3, r7, r3
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b07      	cmp	r3, #7
 80148dc:	d109      	bne.n	80148f2 <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 80148de:	2314      	movs	r3, #20
 80148e0:	18fb      	adds	r3, r7, r3
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	b25b      	sxtb	r3, r3
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d103      	bne.n	80148f2 <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80148ea:	2314      	movs	r3, #20
 80148ec:	18fb      	adds	r3, r7, r3
 80148ee:	2201      	movs	r2, #1
 80148f0:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	2216      	movs	r2, #22
 80148f6:	18ba      	adds	r2, r7, r2
 80148f8:	7812      	ldrb	r2, [r2, #0]
 80148fa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2215      	movs	r2, #21
 8014900:	18ba      	adds	r2, r7, r2
 8014902:	7812      	ldrb	r2, [r2, #0]
 8014904:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014906:	2314      	movs	r3, #20
 8014908:	18fb      	adds	r3, r7, r3
 801490a:	781a      	ldrb	r2, [r3, #0]
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	701a      	strb	r2, [r3, #0]

    return status;
 8014910:	2317      	movs	r3, #23
 8014912:	18fb      	adds	r3, r7, r3
 8014914:	781b      	ldrb	r3, [r3, #0]
}
 8014916:	0018      	movs	r0, r3
 8014918:	46bd      	mov	sp, r7
 801491a:	b006      	add	sp, #24
 801491c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014920 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8014920:	b5b0      	push	{r4, r5, r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	0002      	movs	r2, r0
 8014928:	6039      	str	r1, [r7, #0]
 801492a:	1dfb      	adds	r3, r7, #7
 801492c:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 801492e:	1dfb      	adds	r3, r7, #7
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2201      	movs	r2, #1
 8014934:	409a      	lsls	r2, r3
 8014936:	0013      	movs	r3, r2
 8014938:	0018      	movs	r0, r3
 801493a:	f7ed ff6f 	bl	800281c <__aeabi_i2d>
 801493e:	0004      	movs	r4, r0
 8014940:	000d      	movs	r5, r1
 8014942:	6838      	ldr	r0, [r7, #0]
 8014944:	f7ed ffa4 	bl	8002890 <__aeabi_ui2d>
 8014948:	0002      	movs	r2, r0
 801494a:	000b      	movs	r3, r1
 801494c:	0020      	movs	r0, r4
 801494e:	0029      	movs	r1, r5
 8014950:	f7ec fd6a 	bl	8001428 <__aeabi_ddiv>
 8014954:	0003      	movs	r3, r0
 8014956:	000c      	movs	r4, r1
 8014958:	0018      	movs	r0, r3
 801495a:	0021      	movs	r1, r4
 801495c:	2200      	movs	r2, #0
 801495e:	4b05      	ldr	r3, [pc, #20]	; (8014974 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8014960:	f7ed f96c 	bl	8001c3c <__aeabi_dmul>
 8014964:	0003      	movs	r3, r0
 8014966:	000c      	movs	r4, r1
}
 8014968:	0018      	movs	r0, r3
 801496a:	0021      	movs	r1, r4
 801496c:	46bd      	mov	sp, r7
 801496e:	b002      	add	sp, #8
 8014970:	bdb0      	pop	{r4, r5, r7, pc}
 8014972:	46c0      	nop			; (mov r8, r8)
 8014974:	408f4000 	.word	0x408f4000

08014978 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8014978:	b590      	push	{r4, r7, lr}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
 801497e:	0002      	movs	r2, r0
 8014980:	1dfb      	adds	r3, r7, #7
 8014982:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 8014984:	1dfb      	adds	r3, r7, #7
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	0018      	movs	r0, r3
 801498a:	f7ed ff81 	bl	8002890 <__aeabi_ui2d>
 801498e:	0003      	movs	r3, r0
 8014990:	000c      	movs	r4, r1
 8014992:	001a      	movs	r2, r3
 8014994:	0023      	movs	r3, r4
 8014996:	2000      	movs	r0, #0
 8014998:	4904      	ldr	r1, [pc, #16]	; (80149ac <RegionCommonComputeSymbolTimeFsk+0x34>)
 801499a:	f7ec fd45 	bl	8001428 <__aeabi_ddiv>
 801499e:	0003      	movs	r3, r0
 80149a0:	000c      	movs	r4, r1
}
 80149a2:	0018      	movs	r0, r3
 80149a4:	0021      	movs	r1, r4
 80149a6:	46bd      	mov	sp, r7
 80149a8:	b003      	add	sp, #12
 80149aa:	bd90      	pop	{r4, r7, pc}
 80149ac:	40200000 	.word	0x40200000

080149b0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80149b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60b8      	str	r0, [r7, #8]
 80149b8:	60f9      	str	r1, [r7, #12]
 80149ba:	603b      	str	r3, [r7, #0]
 80149bc:	1dfb      	adds	r3, r7, #7
 80149be:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 80149c0:	1dfb      	adds	r3, r7, #7
 80149c2:	781c      	ldrb	r4, [r3, #0]
 80149c4:	1dfb      	adds	r3, r7, #7
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	3b04      	subs	r3, #4
 80149ca:	005b      	lsls	r3, r3, #1
 80149cc:	0018      	movs	r0, r3
 80149ce:	f7ed ff25 	bl	800281c <__aeabi_i2d>
 80149d2:	68ba      	ldr	r2, [r7, #8]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f7ed f931 	bl	8001c3c <__aeabi_dmul>
 80149da:	0002      	movs	r2, r0
 80149dc:	000b      	movs	r3, r1
 80149de:	0015      	movs	r5, r2
 80149e0:	001e      	movs	r6, r3
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	0018      	movs	r0, r3
 80149e8:	f7ed ff52 	bl	8002890 <__aeabi_ui2d>
 80149ec:	0002      	movs	r2, r0
 80149ee:	000b      	movs	r3, r1
 80149f0:	0028      	movs	r0, r5
 80149f2:	0031      	movs	r1, r6
 80149f4:	f7ec f9fc 	bl	8000df0 <__aeabi_dadd>
 80149f8:	0002      	movs	r2, r0
 80149fa:	000b      	movs	r3, r1
 80149fc:	0010      	movs	r0, r2
 80149fe:	0019      	movs	r1, r3
 8014a00:	68ba      	ldr	r2, [r7, #8]
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f7ec fd10 	bl	8001428 <__aeabi_ddiv>
 8014a08:	0002      	movs	r2, r0
 8014a0a:	000b      	movs	r3, r1
 8014a0c:	0010      	movs	r0, r2
 8014a0e:	0019      	movs	r1, r3
 8014a10:	f012 fba6 	bl	8027160 <ceil>
 8014a14:	0002      	movs	r2, r0
 8014a16:	000b      	movs	r3, r1
 8014a18:	0010      	movs	r0, r2
 8014a1a:	0019      	movs	r1, r3
 8014a1c:	f7eb fdd8 	bl	80005d0 <__aeabi_d2uiz>
 8014a20:	0002      	movs	r2, r0
 8014a22:	0023      	movs	r3, r4
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d200      	bcs.n	8014a2a <RegionCommonComputeRxWindowParameters+0x7a>
 8014a28:	0013      	movs	r3, r2
 8014a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a2c:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8014a2e:	2200      	movs	r2, #0
 8014a30:	4b20      	ldr	r3, [pc, #128]	; (8014ab4 <RegionCommonComputeRxWindowParameters+0x104>)
 8014a32:	68b8      	ldr	r0, [r7, #8]
 8014a34:	68f9      	ldr	r1, [r7, #12]
 8014a36:	f7ed f901 	bl	8001c3c <__aeabi_dmul>
 8014a3a:	0003      	movs	r3, r0
 8014a3c:	000c      	movs	r4, r1
 8014a3e:	0025      	movs	r5, r4
 8014a40:	001c      	movs	r4, r3
 8014a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	0018      	movs	r0, r3
 8014a48:	f7ed ff22 	bl	8002890 <__aeabi_ui2d>
 8014a4c:	68ba      	ldr	r2, [r7, #8]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f7ed f8f4 	bl	8001c3c <__aeabi_dmul>
 8014a54:	0002      	movs	r2, r0
 8014a56:	000b      	movs	r3, r1
 8014a58:	0010      	movs	r0, r2
 8014a5a:	0019      	movs	r1, r3
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	2380      	movs	r3, #128	; 0x80
 8014a60:	05db      	lsls	r3, r3, #23
 8014a62:	f7ec fce1 	bl	8001428 <__aeabi_ddiv>
 8014a66:	0002      	movs	r2, r0
 8014a68:	000b      	movs	r3, r1
 8014a6a:	0020      	movs	r0, r4
 8014a6c:	0029      	movs	r1, r5
 8014a6e:	f7ed fb57 	bl	8002120 <__aeabi_dsub>
 8014a72:	0003      	movs	r3, r0
 8014a74:	000c      	movs	r4, r1
 8014a76:	0025      	movs	r5, r4
 8014a78:	001c      	movs	r4, r3
 8014a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a7c:	f7ed ff08 	bl	8002890 <__aeabi_ui2d>
 8014a80:	0002      	movs	r2, r0
 8014a82:	000b      	movs	r3, r1
 8014a84:	0020      	movs	r0, r4
 8014a86:	0029      	movs	r1, r5
 8014a88:	f7ed fb4a 	bl	8002120 <__aeabi_dsub>
 8014a8c:	0003      	movs	r3, r0
 8014a8e:	000c      	movs	r4, r1
 8014a90:	0018      	movs	r0, r3
 8014a92:	0021      	movs	r1, r4
 8014a94:	f012 fb64 	bl	8027160 <ceil>
 8014a98:	0003      	movs	r3, r0
 8014a9a:	000c      	movs	r4, r1
 8014a9c:	0018      	movs	r0, r3
 8014a9e:	0021      	movs	r1, r4
 8014aa0:	f7ed fe86 	bl	80027b0 <__aeabi_d2iz>
 8014aa4:	0002      	movs	r2, r0
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa8:	601a      	str	r2, [r3, #0]
}
 8014aaa:	46c0      	nop			; (mov r8, r8)
 8014aac:	46bd      	mov	sp, r7
 8014aae:	b005      	add	sp, #20
 8014ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ab2:	46c0      	nop			; (mov r8, r8)
 8014ab4:	40100000 	.word	0x40100000

08014ab8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014ab8:	b5b0      	push	{r4, r5, r7, lr}
 8014aba:	b086      	sub	sp, #24
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60b9      	str	r1, [r7, #8]
 8014ac0:	607a      	str	r2, [r7, #4]
 8014ac2:	210f      	movs	r1, #15
 8014ac4:	187b      	adds	r3, r7, r1
 8014ac6:	1c02      	adds	r2, r0, #0
 8014ac8:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 8014aca:	2517      	movs	r5, #23
 8014acc:	197b      	adds	r3, r7, r5
 8014ace:	2200      	movs	r2, #0
 8014ad0:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014ad2:	187b      	adds	r3, r7, r1
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	b25b      	sxtb	r3, r3
 8014ad8:	005b      	lsls	r3, r3, #1
 8014ada:	0018      	movs	r0, r3
 8014adc:	f7ec f948 	bl	8000d70 <__aeabi_ui2f>
 8014ae0:	1c03      	adds	r3, r0, #0
 8014ae2:	1c19      	adds	r1, r3, #0
 8014ae4:	68b8      	ldr	r0, [r7, #8]
 8014ae6:	f7eb ff35 	bl	8000954 <__aeabi_fsub>
 8014aea:	1c03      	adds	r3, r0, #0
 8014aec:	6879      	ldr	r1, [r7, #4]
 8014aee:	1c18      	adds	r0, r3, #0
 8014af0:	f7eb ff30 	bl	8000954 <__aeabi_fsub>
 8014af4:	1c03      	adds	r3, r0, #0
 8014af6:	1c18      	adds	r0, r3, #0
 8014af8:	f7ed fefc 	bl	80028f4 <__aeabi_f2d>
 8014afc:	0003      	movs	r3, r0
 8014afe:	000c      	movs	r4, r1
 8014b00:	0018      	movs	r0, r3
 8014b02:	0021      	movs	r1, r4
 8014b04:	f012 fbae 	bl	8027264 <floor>
 8014b08:	0002      	movs	r2, r0
 8014b0a:	000b      	movs	r3, r1
 8014b0c:	197c      	adds	r4, r7, r5
 8014b0e:	0010      	movs	r0, r2
 8014b10:	0019      	movs	r1, r3
 8014b12:	f7ed fe4d 	bl	80027b0 <__aeabi_d2iz>
 8014b16:	0003      	movs	r3, r0
 8014b18:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8014b1a:	197b      	adds	r3, r7, r5
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	b25b      	sxtb	r3, r3
}
 8014b20:	0018      	movs	r0, r3
 8014b22:	46bd      	mov	sp, r7
 8014b24:	b006      	add	sp, #24
 8014b26:	bdb0      	pop	{r4, r5, r7, pc}

08014b28 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8014b28:	b5b0      	push	{r4, r5, r7, lr}
 8014b2a:	b084      	sub	sp, #16
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681a      	ldr	r2, [r3, #0]
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	7adb      	ldrb	r3, [r3, #11]
 8014b38:	0019      	movs	r1, r3
 8014b3a:	000b      	movs	r3, r1
 8014b3c:	005b      	lsls	r3, r3, #1
 8014b3e:	185b      	adds	r3, r3, r1
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	18d2      	adds	r2, r2, r3
 8014b44:	210f      	movs	r1, #15
 8014b46:	187b      	adds	r3, r7, r1
 8014b48:	7a52      	ldrb	r2, [r2, #9]
 8014b4a:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	685a      	ldr	r2, [r3, #4]
 8014b50:	187b      	adds	r3, r7, r1
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	011b      	lsls	r3, r3, #4
 8014b56:	18d2      	adds	r2, r2, r3
 8014b58:	230c      	movs	r3, #12
 8014b5a:	18fb      	adds	r3, r7, r3
 8014b5c:	8812      	ldrh	r2, [r2, #0]
 8014b5e:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8014b60:	230a      	movs	r3, #10
 8014b62:	18fb      	adds	r3, r7, r3
 8014b64:	2200      	movs	r2, #0
 8014b66:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	685a      	ldr	r2, [r3, #4]
 8014b6c:	187b      	adds	r3, r7, r1
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	011b      	lsls	r3, r3, #4
 8014b72:	18d3      	adds	r3, r2, r3
 8014b74:	2200      	movs	r2, #0
 8014b76:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	7a5b      	ldrb	r3, [r3, #9]
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	4053      	eors	r3, r2
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d03c      	beq.n	8014c00 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	68db      	ldr	r3, [r3, #12]
 8014b8a:	250a      	movs	r5, #10
 8014b8c:	197c      	adds	r4, r7, r5
 8014b8e:	0018      	movs	r0, r3
 8014b90:	f7ff fb1c 	bl	80141cc <RegionCommonGetJoinDc>
 8014b94:	0003      	movs	r3, r0
 8014b96:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014b98:	210c      	movs	r1, #12
 8014b9a:	187a      	adds	r2, r7, r1
 8014b9c:	197b      	adds	r3, r7, r5
 8014b9e:	1879      	adds	r1, r7, r1
 8014ba0:	880c      	ldrh	r4, [r1, #0]
 8014ba2:	881b      	ldrh	r3, [r3, #0]
 8014ba4:	b298      	uxth	r0, r3
 8014ba6:	b2a1      	uxth	r1, r4
 8014ba8:	4288      	cmp	r0, r1
 8014baa:	d200      	bcs.n	8014bae <RegionCommonCalcBackOff+0x86>
 8014bac:	1c23      	adds	r3, r4, #0
 8014bae:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	7a9b      	ldrb	r3, [r3, #10]
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	4053      	eors	r3, r2
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d010      	beq.n	8014be0 <RegionCommonCalcBackOff+0xb8>
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7a1b      	ldrb	r3, [r3, #8]
 8014bc2:	2201      	movs	r2, #1
 8014bc4:	4053      	eors	r3, r2
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d009      	beq.n	8014be0 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	685a      	ldr	r2, [r3, #4]
 8014bd0:	230f      	movs	r3, #15
 8014bd2:	18fb      	adds	r3, r7, r3
 8014bd4:	781b      	ldrb	r3, [r3, #0]
 8014bd6:	011b      	lsls	r3, r3, #4
 8014bd8:	18d3      	adds	r3, r2, r3
 8014bda:	2200      	movs	r2, #0
 8014bdc:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8014bde:	e02c      	b.n	8014c3a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8014be0:	230c      	movs	r3, #12
 8014be2:	18fb      	adds	r3, r7, r3
 8014be4:	881b      	ldrh	r3, [r3, #0]
 8014be6:	1e5a      	subs	r2, r3, #1
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6919      	ldr	r1, [r3, #16]
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6858      	ldr	r0, [r3, #4]
 8014bf0:	230f      	movs	r3, #15
 8014bf2:	18fb      	adds	r3, r7, r3
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	011b      	lsls	r3, r3, #4
 8014bf8:	18c3      	adds	r3, r0, r3
 8014bfa:	434a      	muls	r2, r1
 8014bfc:	60da      	str	r2, [r3, #12]
}
 8014bfe:	e01c      	b.n	8014c3a <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	7a9b      	ldrb	r3, [r3, #10]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d00f      	beq.n	8014c28 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8014c08:	230c      	movs	r3, #12
 8014c0a:	18fb      	adds	r3, r7, r3
 8014c0c:	881b      	ldrh	r3, [r3, #0]
 8014c0e:	1e5a      	subs	r2, r3, #1
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6919      	ldr	r1, [r3, #16]
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6858      	ldr	r0, [r3, #4]
 8014c18:	230f      	movs	r3, #15
 8014c1a:	18fb      	adds	r3, r7, r3
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	011b      	lsls	r3, r3, #4
 8014c20:	18c3      	adds	r3, r0, r3
 8014c22:	434a      	muls	r2, r1
 8014c24:	60da      	str	r2, [r3, #12]
}
 8014c26:	e008      	b.n	8014c3a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	685a      	ldr	r2, [r3, #4]
 8014c2c:	230f      	movs	r3, #15
 8014c2e:	18fb      	adds	r3, r7, r3
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	011b      	lsls	r3, r3, #4
 8014c34:	18d3      	adds	r3, r2, r3
 8014c36:	2200      	movs	r2, #0
 8014c38:	60da      	str	r2, [r3, #12]
}
 8014c3a:	46c0      	nop			; (mov r8, r8)
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	b004      	add	sp, #16
 8014c40:	bdb0      	pop	{r4, r5, r7, pc}

08014c42 <GetNextLowerTxDr>:
 */
static RegionEU433NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8014c42:	b580      	push	{r7, lr}
 8014c44:	b084      	sub	sp, #16
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	0002      	movs	r2, r0
 8014c4a:	1dfb      	adds	r3, r7, #7
 8014c4c:	701a      	strb	r2, [r3, #0]
 8014c4e:	1dbb      	adds	r3, r7, #6
 8014c50:	1c0a      	adds	r2, r1, #0
 8014c52:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8014c54:	230f      	movs	r3, #15
 8014c56:	18fb      	adds	r3, r7, r3
 8014c58:	2200      	movs	r2, #0
 8014c5a:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8014c5c:	1dfa      	adds	r2, r7, #7
 8014c5e:	1dbb      	adds	r3, r7, #6
 8014c60:	7812      	ldrb	r2, [r2, #0]
 8014c62:	b252      	sxtb	r2, r2
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	b25b      	sxtb	r3, r3
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d105      	bne.n	8014c78 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8014c6c:	230f      	movs	r3, #15
 8014c6e:	18fb      	adds	r3, r7, r3
 8014c70:	1dba      	adds	r2, r7, #6
 8014c72:	7812      	ldrb	r2, [r2, #0]
 8014c74:	701a      	strb	r2, [r3, #0]
 8014c76:	e005      	b.n	8014c84 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8014c78:	1dfb      	adds	r3, r7, #7
 8014c7a:	781a      	ldrb	r2, [r3, #0]
 8014c7c:	230f      	movs	r3, #15
 8014c7e:	18fb      	adds	r3, r7, r3
 8014c80:	3a01      	subs	r2, #1
 8014c82:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8014c84:	230f      	movs	r3, #15
 8014c86:	18fb      	adds	r3, r7, r3
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	b25b      	sxtb	r3, r3
}
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	b004      	add	sp, #16
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU433[drIndex] )
 8014c9c:	4b09      	ldr	r3, [pc, #36]	; (8014cc4 <GetBandwidth+0x30>)
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	0092      	lsls	r2, r2, #2
 8014ca2:	58d3      	ldr	r3, [r2, r3]
 8014ca4:	4a08      	ldr	r2, [pc, #32]	; (8014cc8 <GetBandwidth+0x34>)
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d004      	beq.n	8014cb4 <GetBandwidth+0x20>
 8014caa:	4a08      	ldr	r2, [pc, #32]	; (8014ccc <GetBandwidth+0x38>)
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d003      	beq.n	8014cb8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	e002      	b.n	8014cba <GetBandwidth+0x26>
        case 250000:
            return 1;
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	e000      	b.n	8014cba <GetBandwidth+0x26>
        case 500000:
            return 2;
 8014cb8:	2302      	movs	r3, #2
    }
}
 8014cba:	0018      	movs	r0, r3
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	b002      	add	sp, #8
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	46c0      	nop			; (mov r8, r8)
 8014cc4:	08028d58 	.word	0x08028d58
 8014cc8:	0003d090 	.word	0x0003d090
 8014ccc:	0007a120 	.word	0x0007a120

08014cd0 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8014cd0:	b590      	push	{r4, r7, lr}
 8014cd2:	b085      	sub	sp, #20
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	0004      	movs	r4, r0
 8014cd8:	0008      	movs	r0, r1
 8014cda:	0011      	movs	r1, r2
 8014cdc:	603b      	str	r3, [r7, #0]
 8014cde:	1dfb      	adds	r3, r7, #7
 8014ce0:	1c22      	adds	r2, r4, #0
 8014ce2:	701a      	strb	r2, [r3, #0]
 8014ce4:	1dbb      	adds	r3, r7, #6
 8014ce6:	1c02      	adds	r2, r0, #0
 8014ce8:	701a      	strb	r2, [r3, #0]
 8014cea:	1d7b      	adds	r3, r7, #5
 8014cec:	1c0a      	adds	r2, r1, #0
 8014cee:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8014cf0:	210f      	movs	r1, #15
 8014cf2:	187b      	adds	r3, r7, r1
 8014cf4:	1dfa      	adds	r2, r7, #7
 8014cf6:	7812      	ldrb	r2, [r2, #0]
 8014cf8:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8014cfa:	187a      	adds	r2, r7, r1
 8014cfc:	1dbb      	adds	r3, r7, #6
 8014cfe:	1df9      	adds	r1, r7, #7
 8014d00:	780c      	ldrb	r4, [r1, #0]
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	b258      	sxtb	r0, r3
 8014d06:	b261      	sxtb	r1, r4
 8014d08:	4288      	cmp	r0, r1
 8014d0a:	da00      	bge.n	8014d0e <LimitTxPower+0x3e>
 8014d0c:	1c23      	adds	r3, r4, #0
 8014d0e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8014d10:	230f      	movs	r3, #15
 8014d12:	18fb      	adds	r3, r7, r3
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	b25b      	sxtb	r3, r3
}
 8014d18:	0018      	movs	r0, r3
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	b005      	add	sp, #20
 8014d1e:	bd90      	pop	{r4, r7, pc}

08014d20 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014d28:	4b0e      	ldr	r3, [pc, #56]	; (8014d64 <VerifyRfFreq+0x44>)
 8014d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d2c:	687a      	ldr	r2, [r7, #4]
 8014d2e:	0010      	movs	r0, r2
 8014d30:	4798      	blx	r3
 8014d32:	0003      	movs	r3, r0
 8014d34:	001a      	movs	r2, r3
 8014d36:	2301      	movs	r3, #1
 8014d38:	4053      	eors	r3, r2
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d001      	beq.n	8014d44 <VerifyRfFreq+0x24>
    {
        return false;
 8014d40:	2300      	movs	r3, #0
 8014d42:	e00a      	b.n	8014d5a <VerifyRfFreq+0x3a>
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4a08      	ldr	r2, [pc, #32]	; (8014d68 <VerifyRfFreq+0x48>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d903      	bls.n	8014d54 <VerifyRfFreq+0x34>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	4a07      	ldr	r2, [pc, #28]	; (8014d6c <VerifyRfFreq+0x4c>)
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d901      	bls.n	8014d58 <VerifyRfFreq+0x38>
    {
        return false;
 8014d54:	2300      	movs	r3, #0
 8014d56:	e000      	b.n	8014d5a <VerifyRfFreq+0x3a>
    }
    return true;
 8014d58:	2301      	movs	r3, #1
}
 8014d5a:	0018      	movs	r0, r3
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	b002      	add	sp, #8
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	46c0      	nop			; (mov r8, r8)
 8014d64:	080293d8 	.word	0x080293d8
 8014d68:	19d1b9d7 	.word	0x19d1b9d7
 8014d6c:	19e87628 	.word	0x19e87628

08014d70 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8014d70:	b5b0      	push	{r4, r5, r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60ba      	str	r2, [r7, #8]
 8014d78:	607b      	str	r3, [r7, #4]
 8014d7a:	230f      	movs	r3, #15
 8014d7c:	18fb      	adds	r3, r7, r3
 8014d7e:	1c02      	adds	r2, r0, #0
 8014d80:	701a      	strb	r2, [r3, #0]
 8014d82:	230e      	movs	r3, #14
 8014d84:	18fb      	adds	r3, r7, r3
 8014d86:	1c0a      	adds	r2, r1, #0
 8014d88:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8014d8a:	2317      	movs	r3, #23
 8014d8c:	18fb      	adds	r3, r7, r3
 8014d8e:	2200      	movs	r2, #0
 8014d90:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8014d92:	2316      	movs	r3, #22
 8014d94:	18fb      	adds	r3, r7, r3
 8014d96:	2200      	movs	r2, #0
 8014d98:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU433_MAX_NB_CHANNELS; i += 16, k++ )
 8014d9a:	2315      	movs	r3, #21
 8014d9c:	18fb      	adds	r3, r7, r3
 8014d9e:	2200      	movs	r2, #0
 8014da0:	701a      	strb	r2, [r3, #0]
 8014da2:	2314      	movs	r3, #20
 8014da4:	18fb      	adds	r3, r7, r3
 8014da6:	2200      	movs	r2, #0
 8014da8:	701a      	strb	r2, [r3, #0]
 8014daa:	e0b4      	b.n	8014f16 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014dac:	2313      	movs	r3, #19
 8014dae:	18fb      	adds	r3, r7, r3
 8014db0:	2200      	movs	r2, #0
 8014db2:	701a      	strb	r2, [r3, #0]
 8014db4:	e09d      	b.n	8014ef2 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8014db6:	2314      	movs	r3, #20
 8014db8:	18fb      	adds	r3, r7, r3
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	68ba      	ldr	r2, [r7, #8]
 8014dc0:	18d3      	adds	r3, r2, r3
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	001a      	movs	r2, r3
 8014dc6:	2313      	movs	r3, #19
 8014dc8:	18fb      	adds	r3, r7, r3
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	411a      	asrs	r2, r3
 8014dce:	0013      	movs	r3, r2
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	d100      	bne.n	8014dd8 <CountNbOfEnabledChannels+0x68>
 8014dd6:	e086      	b.n	8014ee6 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8014dd8:	2315      	movs	r3, #21
 8014dda:	18fb      	adds	r3, r7, r3
 8014ddc:	781a      	ldrb	r2, [r3, #0]
 8014dde:	2313      	movs	r3, #19
 8014de0:	18fb      	adds	r3, r7, r3
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	18d3      	adds	r3, r2, r3
 8014de6:	001a      	movs	r2, r3
 8014de8:	0013      	movs	r3, r2
 8014dea:	005b      	lsls	r3, r3, #1
 8014dec:	189b      	adds	r3, r3, r2
 8014dee:	009b      	lsls	r3, r3, #2
 8014df0:	001a      	movs	r2, r3
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	189b      	adds	r3, r3, r2
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d06f      	beq.n	8014edc <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8014dfc:	230f      	movs	r3, #15
 8014dfe:	18fb      	adds	r3, r7, r3
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	2201      	movs	r2, #1
 8014e04:	4053      	eors	r3, r2
 8014e06:	b2db      	uxtb	r3, r3
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d008      	beq.n	8014e1e <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU433_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8014e0c:	2313      	movs	r3, #19
 8014e0e:	18fb      	adds	r3, r7, r3
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	2207      	movs	r2, #7
 8014e14:	411a      	asrs	r2, r3
 8014e16:	0013      	movs	r3, r2
 8014e18:	2201      	movs	r2, #1
 8014e1a:	4013      	ands	r3, r2
 8014e1c:	d060      	beq.n	8014ee0 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8014e1e:	230e      	movs	r3, #14
 8014e20:	18fb      	adds	r3, r7, r3
 8014e22:	2000      	movs	r0, #0
 8014e24:	5618      	ldrsb	r0, [r3, r0]
 8014e26:	2415      	movs	r4, #21
 8014e28:	193b      	adds	r3, r7, r4
 8014e2a:	781a      	ldrb	r2, [r3, #0]
 8014e2c:	2513      	movs	r5, #19
 8014e2e:	197b      	adds	r3, r7, r5
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	18d3      	adds	r3, r2, r3
 8014e34:	001a      	movs	r2, r3
 8014e36:	0013      	movs	r3, r2
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	189b      	adds	r3, r3, r2
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	001a      	movs	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	189b      	adds	r3, r3, r2
 8014e44:	7a1b      	ldrb	r3, [r3, #8]
 8014e46:	011b      	lsls	r3, r3, #4
 8014e48:	b25b      	sxtb	r3, r3
 8014e4a:	111b      	asrs	r3, r3, #4
 8014e4c:	b25b      	sxtb	r3, r3
 8014e4e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8014e50:	193b      	adds	r3, r7, r4
 8014e52:	781a      	ldrb	r2, [r3, #0]
 8014e54:	197b      	adds	r3, r7, r5
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	18d3      	adds	r3, r2, r3
 8014e5a:	001a      	movs	r2, r3
 8014e5c:	0013      	movs	r3, r2
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	189b      	adds	r3, r3, r2
 8014e62:	009b      	lsls	r3, r3, #2
 8014e64:	001a      	movs	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	189b      	adds	r3, r3, r2
 8014e6a:	7a1b      	ldrb	r3, [r3, #8]
 8014e6c:	b25b      	sxtb	r3, r3
 8014e6e:	111b      	asrs	r3, r3, #4
 8014e70:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8014e72:	001a      	movs	r2, r3
 8014e74:	f7ff fa70 	bl	8014358 <RegionCommonValueInRange>
 8014e78:	1e03      	subs	r3, r0, #0
 8014e7a:	d033      	beq.n	8014ee4 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8014e7c:	2315      	movs	r3, #21
 8014e7e:	18fb      	adds	r3, r7, r3
 8014e80:	781a      	ldrb	r2, [r3, #0]
 8014e82:	2313      	movs	r3, #19
 8014e84:	18fb      	adds	r3, r7, r3
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	18d3      	adds	r3, r2, r3
 8014e8a:	001a      	movs	r2, r3
 8014e8c:	0013      	movs	r3, r2
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	189b      	adds	r3, r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	001a      	movs	r2, r3
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	189b      	adds	r3, r3, r2
 8014e9a:	7a5b      	ldrb	r3, [r3, #9]
 8014e9c:	011b      	lsls	r3, r3, #4
 8014e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ea0:	18d3      	adds	r3, r2, r3
 8014ea2:	68db      	ldr	r3, [r3, #12]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d006      	beq.n	8014eb6 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8014ea8:	2116      	movs	r1, #22
 8014eaa:	187b      	adds	r3, r7, r1
 8014eac:	781a      	ldrb	r2, [r3, #0]
 8014eae:	187b      	adds	r3, r7, r1
 8014eb0:	3201      	adds	r2, #1
 8014eb2:	701a      	strb	r2, [r3, #0]
                    continue;
 8014eb4:	e017      	b.n	8014ee6 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8014eb6:	2217      	movs	r2, #23
 8014eb8:	18bb      	adds	r3, r7, r2
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	18ba      	adds	r2, r7, r2
 8014ebe:	1c59      	adds	r1, r3, #1
 8014ec0:	7011      	strb	r1, [r2, #0]
 8014ec2:	001a      	movs	r2, r3
 8014ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec6:	189b      	adds	r3, r3, r2
 8014ec8:	2215      	movs	r2, #21
 8014eca:	18b9      	adds	r1, r7, r2
 8014ecc:	2213      	movs	r2, #19
 8014ece:	18ba      	adds	r2, r7, r2
 8014ed0:	7809      	ldrb	r1, [r1, #0]
 8014ed2:	7812      	ldrb	r2, [r2, #0]
 8014ed4:	188a      	adds	r2, r1, r2
 8014ed6:	b2d2      	uxtb	r2, r2
 8014ed8:	701a      	strb	r2, [r3, #0]
 8014eda:	e004      	b.n	8014ee6 <CountNbOfEnabledChannels+0x176>
                    continue;
 8014edc:	46c0      	nop			; (mov r8, r8)
 8014ede:	e002      	b.n	8014ee6 <CountNbOfEnabledChannels+0x176>
                        continue;
 8014ee0:	46c0      	nop			; (mov r8, r8)
 8014ee2:	e000      	b.n	8014ee6 <CountNbOfEnabledChannels+0x176>
                    continue;
 8014ee4:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8014ee6:	2113      	movs	r1, #19
 8014ee8:	187b      	adds	r3, r7, r1
 8014eea:	781a      	ldrb	r2, [r3, #0]
 8014eec:	187b      	adds	r3, r7, r1
 8014eee:	3201      	adds	r2, #1
 8014ef0:	701a      	strb	r2, [r3, #0]
 8014ef2:	2313      	movs	r3, #19
 8014ef4:	18fb      	adds	r3, r7, r3
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	2b0f      	cmp	r3, #15
 8014efa:	d800      	bhi.n	8014efe <CountNbOfEnabledChannels+0x18e>
 8014efc:	e75b      	b.n	8014db6 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU433_MAX_NB_CHANNELS; i += 16, k++ )
 8014efe:	2215      	movs	r2, #21
 8014f00:	18bb      	adds	r3, r7, r2
 8014f02:	18ba      	adds	r2, r7, r2
 8014f04:	7812      	ldrb	r2, [r2, #0]
 8014f06:	3210      	adds	r2, #16
 8014f08:	701a      	strb	r2, [r3, #0]
 8014f0a:	2114      	movs	r1, #20
 8014f0c:	187b      	adds	r3, r7, r1
 8014f0e:	781a      	ldrb	r2, [r3, #0]
 8014f10:	187b      	adds	r3, r7, r1
 8014f12:	3201      	adds	r2, #1
 8014f14:	701a      	strb	r2, [r3, #0]
 8014f16:	2315      	movs	r3, #21
 8014f18:	18fb      	adds	r3, r7, r3
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	2b0f      	cmp	r3, #15
 8014f1e:	d800      	bhi.n	8014f22 <CountNbOfEnabledChannels+0x1b2>
 8014f20:	e744      	b.n	8014dac <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8014f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f24:	2216      	movs	r2, #22
 8014f26:	18ba      	adds	r2, r7, r2
 8014f28:	7812      	ldrb	r2, [r2, #0]
 8014f2a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8014f2c:	2317      	movs	r3, #23
 8014f2e:	18fb      	adds	r3, r7, r3
 8014f30:	781b      	ldrb	r3, [r3, #0]
}
 8014f32:	0018      	movs	r0, r3
 8014f34:	46bd      	mov	sp, r7
 8014f36:	b006      	add	sp, #24
 8014f38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014f3c <RegionEU433GetPhyParam>:

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014f44:	2308      	movs	r3, #8
 8014f46:	18fb      	adds	r3, r7, r3
 8014f48:	2200      	movs	r2, #0
 8014f4a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	2b34      	cmp	r3, #52	; 0x34
 8014f52:	d900      	bls.n	8014f56 <RegionEU433GetPhyParam+0x1a>
 8014f54:	e0cd      	b.n	80150f2 <RegionEU433GetPhyParam+0x1b6>
 8014f56:	009a      	lsls	r2, r3, #2
 8014f58:	4b6d      	ldr	r3, [pc, #436]	; (8015110 <RegionEU433GetPhyParam+0x1d4>)
 8014f5a:	18d3      	adds	r3, r2, r3
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU433_RX_MIN_DATARATE;
 8014f60:	2308      	movs	r3, #8
 8014f62:	18fb      	adds	r3, r7, r3
 8014f64:	2200      	movs	r2, #0
 8014f66:	601a      	str	r2, [r3, #0]
            break;
 8014f68:	e0c4      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU433_TX_MIN_DATARATE;
 8014f6a:	2308      	movs	r3, #8
 8014f6c:	18fb      	adds	r3, r7, r3
 8014f6e:	2200      	movs	r2, #0
 8014f70:	601a      	str	r2, [r3, #0]
            break;
 8014f72:	e0bf      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU433_DEFAULT_DATARATE;
 8014f74:	2308      	movs	r3, #8
 8014f76:	18fb      	adds	r3, r7, r3
 8014f78:	2200      	movs	r2, #0
 8014f7a:	601a      	str	r2, [r3, #0]
            break;
 8014f7c:	e0ba      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU433_TX_MIN_DATARATE );
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	785b      	ldrb	r3, [r3, #1]
 8014f82:	b25b      	sxtb	r3, r3
 8014f84:	2100      	movs	r1, #0
 8014f86:	0018      	movs	r0, r3
 8014f88:	f7ff fe5b 	bl	8014c42 <GetNextLowerTxDr>
 8014f8c:	0003      	movs	r3, r0
 8014f8e:	001a      	movs	r2, r3
 8014f90:	2308      	movs	r3, #8
 8014f92:	18fb      	adds	r3, r7, r3
 8014f94:	601a      	str	r2, [r3, #0]
            break;
 8014f96:	e0ad      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU433_MAX_TX_POWER;
 8014f98:	2308      	movs	r3, #8
 8014f9a:	18fb      	adds	r3, r7, r3
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	601a      	str	r2, [r3, #0]
            break;
 8014fa0:	e0a8      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU433_DEFAULT_TX_POWER;
 8014fa2:	2308      	movs	r3, #8
 8014fa4:	18fb      	adds	r3, r7, r3
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	601a      	str	r2, [r3, #0]
            break;
 8014faa:	e0a3      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU433_ADR_ACK_LIMIT;
 8014fac:	2308      	movs	r3, #8
 8014fae:	18fb      	adds	r3, r7, r3
 8014fb0:	2240      	movs	r2, #64	; 0x40
 8014fb2:	601a      	str	r2, [r3, #0]
            break;
 8014fb4:	e09e      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU433_ADR_ACK_DELAY;
 8014fb6:	2308      	movs	r3, #8
 8014fb8:	18fb      	adds	r3, r7, r3
 8014fba:	2220      	movs	r2, #32
 8014fbc:	601a      	str	r2, [r3, #0]
            break;
 8014fbe:	e099      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	785b      	ldrb	r3, [r3, #1]
 8014fc4:	b25b      	sxtb	r3, r3
 8014fc6:	001a      	movs	r2, r3
 8014fc8:	4b52      	ldr	r3, [pc, #328]	; (8015114 <RegionEU433GetPhyParam+0x1d8>)
 8014fca:	5c9b      	ldrb	r3, [r3, r2]
 8014fcc:	001a      	movs	r2, r3
 8014fce:	2308      	movs	r3, #8
 8014fd0:	18fb      	adds	r3, r7, r3
 8014fd2:	601a      	str	r2, [r3, #0]
            break;
 8014fd4:	e08e      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	785b      	ldrb	r3, [r3, #1]
 8014fda:	b25b      	sxtb	r3, r3
 8014fdc:	001a      	movs	r2, r3
 8014fde:	4b4e      	ldr	r3, [pc, #312]	; (8015118 <RegionEU433GetPhyParam+0x1dc>)
 8014fe0:	5c9b      	ldrb	r3, [r3, r2]
 8014fe2:	001a      	movs	r2, r3
 8014fe4:	2308      	movs	r3, #8
 8014fe6:	18fb      	adds	r3, r7, r3
 8014fe8:	601a      	str	r2, [r3, #0]
            break;
 8014fea:	e083      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 8014fec:	2308      	movs	r3, #8
 8014fee:	18fb      	adds	r3, r7, r3
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	601a      	str	r2, [r3, #0]
            break;
 8014ff4:	e07e      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU433_MAX_RX_WINDOW;
 8014ff6:	2308      	movs	r3, #8
 8014ff8:	18fb      	adds	r3, r7, r3
 8014ffa:	4a48      	ldr	r2, [pc, #288]	; (801511c <RegionEU433GetPhyParam+0x1e0>)
 8014ffc:	601a      	str	r2, [r3, #0]
            break;
 8014ffe:	e079      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU433_RECEIVE_DELAY1;
 8015000:	2308      	movs	r3, #8
 8015002:	18fb      	adds	r3, r7, r3
 8015004:	22fa      	movs	r2, #250	; 0xfa
 8015006:	0092      	lsls	r2, r2, #2
 8015008:	601a      	str	r2, [r3, #0]
            break;
 801500a:	e073      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU433_RECEIVE_DELAY2;
 801500c:	2308      	movs	r3, #8
 801500e:	18fb      	adds	r3, r7, r3
 8015010:	22fa      	movs	r2, #250	; 0xfa
 8015012:	00d2      	lsls	r2, r2, #3
 8015014:	601a      	str	r2, [r3, #0]
            break;
 8015016:	e06d      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU433_JOIN_ACCEPT_DELAY1;
 8015018:	2308      	movs	r3, #8
 801501a:	18fb      	adds	r3, r7, r3
 801501c:	4a40      	ldr	r2, [pc, #256]	; (8015120 <RegionEU433GetPhyParam+0x1e4>)
 801501e:	601a      	str	r2, [r3, #0]
            break;
 8015020:	e068      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU433_JOIN_ACCEPT_DELAY2;
 8015022:	2308      	movs	r3, #8
 8015024:	18fb      	adds	r3, r7, r3
 8015026:	4a3f      	ldr	r2, [pc, #252]	; (8015124 <RegionEU433GetPhyParam+0x1e8>)
 8015028:	601a      	str	r2, [r3, #0]
            break;
 801502a:	e063      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU433_MAX_FCNT_GAP;
 801502c:	2308      	movs	r3, #8
 801502e:	18fb      	adds	r3, r7, r3
 8015030:	2280      	movs	r2, #128	; 0x80
 8015032:	01d2      	lsls	r2, r2, #7
 8015034:	601a      	str	r2, [r3, #0]
            break;
 8015036:	e05d      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU433_ACKTIMEOUT + randr( -EU433_ACK_TIMEOUT_RND, EU433_ACK_TIMEOUT_RND ) );
 8015038:	23fa      	movs	r3, #250	; 0xfa
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	4a3a      	ldr	r2, [pc, #232]	; (8015128 <RegionEU433GetPhyParam+0x1ec>)
 801503e:	0019      	movs	r1, r3
 8015040:	0010      	movs	r0, r2
 8015042:	f007 fe21 	bl	801cc88 <randr>
 8015046:	0003      	movs	r3, r0
 8015048:	22fa      	movs	r2, #250	; 0xfa
 801504a:	00d2      	lsls	r2, r2, #3
 801504c:	4694      	mov	ip, r2
 801504e:	4463      	add	r3, ip
 8015050:	001a      	movs	r2, r3
 8015052:	2308      	movs	r3, #8
 8015054:	18fb      	adds	r3, r7, r3
 8015056:	601a      	str	r2, [r3, #0]
            break;
 8015058:	e04c      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU433_DEFAULT_RX1_DR_OFFSET;
 801505a:	2308      	movs	r3, #8
 801505c:	18fb      	adds	r3, r7, r3
 801505e:	2200      	movs	r2, #0
 8015060:	601a      	str	r2, [r3, #0]
            break;
 8015062:	e047      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU433_RX_WND_2_FREQ;
 8015064:	2308      	movs	r3, #8
 8015066:	18fb      	adds	r3, r7, r3
 8015068:	4a30      	ldr	r2, [pc, #192]	; (801512c <RegionEU433GetPhyParam+0x1f0>)
 801506a:	601a      	str	r2, [r3, #0]
            break;
 801506c:	e042      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU433_RX_WND_2_DR;
 801506e:	2308      	movs	r3, #8
 8015070:	18fb      	adds	r3, r7, r3
 8015072:	2200      	movs	r2, #0
 8015074:	601a      	str	r2, [r3, #0]
            break;
 8015076:	e03d      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8015078:	2308      	movs	r3, #8
 801507a:	18fb      	adds	r3, r7, r3
 801507c:	4a2c      	ldr	r2, [pc, #176]	; (8015130 <RegionEU433GetPhyParam+0x1f4>)
 801507e:	601a      	str	r2, [r3, #0]
            break;
 8015080:	e038      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8015082:	2308      	movs	r3, #8
 8015084:	18fb      	adds	r3, r7, r3
 8015086:	4a2b      	ldr	r2, [pc, #172]	; (8015134 <RegionEU433GetPhyParam+0x1f8>)
 8015088:	601a      	str	r2, [r3, #0]
            break;
 801508a:	e033      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 801508c:	2308      	movs	r3, #8
 801508e:	18fb      	adds	r3, r7, r3
 8015090:	2210      	movs	r2, #16
 8015092:	601a      	str	r2, [r3, #0]
            break;
 8015094:	e02e      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8015096:	2308      	movs	r3, #8
 8015098:	18fb      	adds	r3, r7, r3
 801509a:	4a27      	ldr	r2, [pc, #156]	; (8015138 <RegionEU433GetPhyParam+0x1fc>)
 801509c:	601a      	str	r2, [r3, #0]
            break;
 801509e:	e029      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80150a0:	2308      	movs	r3, #8
 80150a2:	18fb      	adds	r3, r7, r3
 80150a4:	2200      	movs	r2, #0
 80150a6:	601a      	str	r2, [r3, #0]
            break;
 80150a8:	e024      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 80150aa:	2308      	movs	r3, #8
 80150ac:	18fb      	adds	r3, r7, r3
 80150ae:	4a23      	ldr	r2, [pc, #140]	; (801513c <RegionEU433GetPhyParam+0x200>)
 80150b0:	601a      	str	r2, [r3, #0]
            break;
 80150b2:	e01f      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 80150b4:	2308      	movs	r3, #8
 80150b6:	18fb      	adds	r3, r7, r3
 80150b8:	4a21      	ldr	r2, [pc, #132]	; (8015140 <RegionEU433GetPhyParam+0x204>)
 80150ba:	601a      	str	r2, [r3, #0]
            break;
 80150bc:	e01a      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 80150be:	2308      	movs	r3, #8
 80150c0:	18fb      	adds	r3, r7, r3
 80150c2:	4a1a      	ldr	r2, [pc, #104]	; (801512c <RegionEU433GetPhyParam+0x1f0>)
 80150c4:	601a      	str	r2, [r3, #0]
            break;
 80150c6:	e015      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 80150c8:	2108      	movs	r1, #8
 80150ca:	187b      	adds	r3, r7, r1
 80150cc:	2211      	movs	r2, #17
 80150ce:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 80150d0:	187b      	adds	r3, r7, r1
 80150d2:	2202      	movs	r2, #2
 80150d4:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU433_RFU2_SIZE;
 80150d6:	187b      	adds	r3, r7, r1
 80150d8:	2200      	movs	r2, #0
 80150da:	709a      	strb	r2, [r3, #2]
            break;
 80150dc:	e00a      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 80150de:	2308      	movs	r3, #8
 80150e0:	18fb      	adds	r3, r7, r3
 80150e2:	2203      	movs	r2, #3
 80150e4:	601a      	str	r2, [r3, #0]
            break;
 80150e6:	e005      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 80150e8:	2308      	movs	r3, #8
 80150ea:	18fb      	adds	r3, r7, r3
 80150ec:	2203      	movs	r2, #3
 80150ee:	601a      	str	r2, [r3, #0]
            break;
 80150f0:	e000      	b.n	80150f4 <RegionEU433GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 80150f2:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80150f4:	210c      	movs	r1, #12
 80150f6:	187b      	adds	r3, r7, r1
 80150f8:	2208      	movs	r2, #8
 80150fa:	18ba      	adds	r2, r7, r2
 80150fc:	6812      	ldr	r2, [r2, #0]
 80150fe:	601a      	str	r2, [r3, #0]
 8015100:	187b      	adds	r3, r7, r1
 8015102:	2200      	movs	r2, #0
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	0013      	movs	r3, r2
}
 8015108:	0018      	movs	r0, r3
 801510a:	46bd      	mov	sp, r7
 801510c:	b004      	add	sp, #16
 801510e:	bd80      	pop	{r7, pc}
 8015110:	08028d88 	.word	0x08028d88
 8015114:	08028d78 	.word	0x08028d78
 8015118:	08028d80 	.word	0x08028d80
 801511c:	00000bb8 	.word	0x00000bb8
 8015120:	00001388 	.word	0x00001388
 8015124:	00001770 	.word	0x00001770
 8015128:	fffffc18 	.word	0xfffffc18
 801512c:	19e87628 	.word	0x19e87628
 8015130:	20001670 	.word	0x20001670
 8015134:	20001672 	.word	0x20001672
 8015138:	200015a0 	.word	0x200015a0
 801513c:	41426666 	.word	0x41426666
 8015140:	4009999a 	.word	0x4009999a

08015144 <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	7858      	ldrb	r0, [r3, #1]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	0019      	movs	r1, r3
 8015156:	4a0a      	ldr	r2, [pc, #40]	; (8015180 <RegionEU433SetBandTxDone+0x3c>)
 8015158:	000b      	movs	r3, r1
 801515a:	005b      	lsls	r3, r3, #1
 801515c:	185b      	adds	r3, r3, r1
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	18d3      	adds	r3, r2, r3
 8015162:	3309      	adds	r3, #9
 8015164:	781b      	ldrb	r3, [r3, #0]
 8015166:	330c      	adds	r3, #12
 8015168:	011a      	lsls	r2, r3, #4
 801516a:	4b05      	ldr	r3, [pc, #20]	; (8015180 <RegionEU433SetBandTxDone+0x3c>)
 801516c:	18d1      	adds	r1, r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	001a      	movs	r2, r3
 8015174:	f7ff f9c8 	bl	8014508 <RegionCommonSetBandTxDone>
}
 8015178:	46c0      	nop			; (mov r8, r8)
 801517a:	46bd      	mov	sp, r7
 801517c:	b002      	add	sp, #8
 801517e:	bd80      	pop	{r7, pc}
 8015180:	200015a0 	.word	0x200015a0

08015184 <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 8015184:	b590      	push	{r4, r7, lr}
 8015186:	b087      	sub	sp, #28
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
    Band_t bands[EU433_MAX_NB_BANDS] =
 801518c:	2108      	movs	r1, #8
 801518e:	187b      	adds	r3, r7, r1
 8015190:	2264      	movs	r2, #100	; 0x64
 8015192:	801a      	strh	r2, [r3, #0]
 8015194:	187b      	adds	r3, r7, r1
 8015196:	2200      	movs	r2, #0
 8015198:	709a      	strb	r2, [r3, #2]
 801519a:	187b      	adds	r3, r7, r1
 801519c:	2200      	movs	r2, #0
 801519e:	605a      	str	r2, [r3, #4]
 80151a0:	187b      	adds	r3, r7, r1
 80151a2:	2200      	movs	r2, #0
 80151a4:	609a      	str	r2, [r3, #8]
 80151a6:	187b      	adds	r3, r7, r1
 80151a8:	2200      	movs	r2, #0
 80151aa:	60da      	str	r2, [r3, #12]
    {
        EU433_BAND0
    };

    switch( params->Type )
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	791b      	ldrb	r3, [r3, #4]
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d030      	beq.n	8015216 <RegionEU433InitDefaults+0x92>
 80151b4:	2b02      	cmp	r3, #2
 80151b6:	d022      	beq.n	80151fe <RegionEU433InitDefaults+0x7a>
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d000      	beq.n	80151be <RegionEU433InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80151bc:	e038      	b.n	8015230 <RegionEU433InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 80151be:	2308      	movs	r3, #8
 80151c0:	18f9      	adds	r1, r7, r3
 80151c2:	4b1d      	ldr	r3, [pc, #116]	; (8015238 <RegionEU433InitDefaults+0xb4>)
 80151c4:	2210      	movs	r2, #16
 80151c6:	0018      	movs	r0, r3
 80151c8:	f007 fd74 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU433_LC1;
 80151cc:	4b1b      	ldr	r3, [pc, #108]	; (801523c <RegionEU433InitDefaults+0xb8>)
 80151ce:	4a1c      	ldr	r2, [pc, #112]	; (8015240 <RegionEU433InitDefaults+0xbc>)
 80151d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80151d2:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU433_LC2;
 80151d4:	4b19      	ldr	r3, [pc, #100]	; (801523c <RegionEU433InitDefaults+0xb8>)
 80151d6:	4a1b      	ldr	r2, [pc, #108]	; (8015244 <RegionEU433InitDefaults+0xc0>)
 80151d8:	330c      	adds	r3, #12
 80151da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80151dc:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU433_LC3;
 80151de:	4b17      	ldr	r3, [pc, #92]	; (801523c <RegionEU433InitDefaults+0xb8>)
 80151e0:	4a19      	ldr	r2, [pc, #100]	; (8015248 <RegionEU433InitDefaults+0xc4>)
 80151e2:	3318      	adds	r3, #24
 80151e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80151e6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80151e8:	4b14      	ldr	r3, [pc, #80]	; (801523c <RegionEU433InitDefaults+0xb8>)
 80151ea:	22d2      	movs	r2, #210	; 0xd2
 80151ec:	2107      	movs	r1, #7
 80151ee:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 80151f0:	4916      	ldr	r1, [pc, #88]	; (801524c <RegionEU433InitDefaults+0xc8>)
 80151f2:	4b17      	ldr	r3, [pc, #92]	; (8015250 <RegionEU433InitDefaults+0xcc>)
 80151f4:	2201      	movs	r2, #1
 80151f6:	0018      	movs	r0, r3
 80151f8:	f7ff f957 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 80151fc:	e018      	b.n	8015230 <RegionEU433InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d013      	beq.n	801522e <RegionEU433InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6819      	ldr	r1, [r3, #0]
 801520a:	4b0c      	ldr	r3, [pc, #48]	; (801523c <RegionEU433InitDefaults+0xb8>)
 801520c:	22d4      	movs	r2, #212	; 0xd4
 801520e:	0018      	movs	r0, r3
 8015210:	f007 fd50 	bl	801ccb4 <memcpy1>
            break;
 8015214:	e00b      	b.n	801522e <RegionEU433InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8015216:	4b09      	ldr	r3, [pc, #36]	; (801523c <RegionEU433InitDefaults+0xb8>)
 8015218:	22d0      	movs	r2, #208	; 0xd0
 801521a:	5a9a      	ldrh	r2, [r3, r2]
 801521c:	4b07      	ldr	r3, [pc, #28]	; (801523c <RegionEU433InitDefaults+0xb8>)
 801521e:	21d2      	movs	r1, #210	; 0xd2
 8015220:	5a5b      	ldrh	r3, [r3, r1]
 8015222:	4313      	orrs	r3, r2
 8015224:	b299      	uxth	r1, r3
 8015226:	4b05      	ldr	r3, [pc, #20]	; (801523c <RegionEU433InitDefaults+0xb8>)
 8015228:	22d0      	movs	r2, #208	; 0xd0
 801522a:	5299      	strh	r1, [r3, r2]
            break;
 801522c:	e000      	b.n	8015230 <RegionEU433InitDefaults+0xac>
            break;
 801522e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015230:	46c0      	nop			; (mov r8, r8)
 8015232:	46bd      	mov	sp, r7
 8015234:	b007      	add	sp, #28
 8015236:	bd90      	pop	{r4, r7, pc}
 8015238:	20001660 	.word	0x20001660
 801523c:	200015a0 	.word	0x200015a0
 8015240:	080275b0 	.word	0x080275b0
 8015244:	080275bc 	.word	0x080275bc
 8015248:	080275c8 	.word	0x080275c8
 801524c:	20001672 	.word	0x20001672
 8015250:	20001670 	.word	0x20001670

08015254 <RegionEU433ApplyCFList>:
            return false;
    }
}

void RegionEU433ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015254:	b590      	push	{r4, r7, lr}
 8015256:	b08b      	sub	sp, #44	; 0x2c
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801525c:	2318      	movs	r3, #24
 801525e:	18fb      	adds	r3, r7, r3
 8015260:	2250      	movs	r2, #80	; 0x50
 8015262:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	791b      	ldrb	r3, [r3, #4]
 8015268:	2b10      	cmp	r3, #16
 801526a:	d000      	beq.n	801526e <RegionEU433ApplyCFList+0x1a>
 801526c:	e07d      	b.n	801536a <RegionEU433ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	330f      	adds	r3, #15
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d000      	beq.n	801527c <RegionEU433ApplyCFList+0x28>
 801527a:	e078      	b.n	801536e <RegionEU433ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801527c:	2327      	movs	r3, #39	; 0x27
 801527e:	18fb      	adds	r3, r7, r3
 8015280:	2200      	movs	r2, #0
 8015282:	701a      	strb	r2, [r3, #0]
 8015284:	2326      	movs	r3, #38	; 0x26
 8015286:	18fb      	adds	r3, r7, r3
 8015288:	2203      	movs	r2, #3
 801528a:	701a      	strb	r2, [r3, #0]
 801528c:	e067      	b.n	801535e <RegionEU433ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 801528e:	2326      	movs	r3, #38	; 0x26
 8015290:	18fb      	adds	r3, r7, r3
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	2b07      	cmp	r3, #7
 8015296:	d82e      	bhi.n	80152f6 <RegionEU433ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	2427      	movs	r4, #39	; 0x27
 801529e:	193b      	adds	r3, r7, r4
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	18d3      	adds	r3, r2, r3
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	001a      	movs	r2, r3
 80152a8:	2018      	movs	r0, #24
 80152aa:	183b      	adds	r3, r7, r0
 80152ac:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80152ae:	183b      	adds	r3, r7, r0
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6819      	ldr	r1, [r3, #0]
 80152b6:	193b      	adds	r3, r7, r4
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	3301      	adds	r3, #1
 80152bc:	18cb      	adds	r3, r1, r3
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	021b      	lsls	r3, r3, #8
 80152c2:	431a      	orrs	r2, r3
 80152c4:	183b      	adds	r3, r7, r0
 80152c6:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80152c8:	183b      	adds	r3, r7, r0
 80152ca:	681a      	ldr	r2, [r3, #0]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6819      	ldr	r1, [r3, #0]
 80152d0:	193b      	adds	r3, r7, r4
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	3302      	adds	r3, #2
 80152d6:	18cb      	adds	r3, r1, r3
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	041b      	lsls	r3, r3, #16
 80152dc:	431a      	orrs	r2, r3
 80152de:	183b      	adds	r3, r7, r0
 80152e0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80152e2:	183b      	adds	r3, r7, r0
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2264      	movs	r2, #100	; 0x64
 80152e8:	435a      	muls	r2, r3
 80152ea:	183b      	adds	r3, r7, r0
 80152ec:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80152ee:	183b      	adds	r3, r7, r0
 80152f0:	2200      	movs	r2, #0
 80152f2:	605a      	str	r2, [r3, #4]
 80152f4:	e009      	b.n	801530a <RegionEU433ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80152f6:	2118      	movs	r1, #24
 80152f8:	187b      	adds	r3, r7, r1
 80152fa:	2200      	movs	r2, #0
 80152fc:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80152fe:	187b      	adds	r3, r7, r1
 8015300:	2200      	movs	r2, #0
 8015302:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8015304:	187b      	adds	r3, r7, r1
 8015306:	2200      	movs	r2, #0
 8015308:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801530a:	2318      	movs	r3, #24
 801530c:	18fb      	adds	r3, r7, r3
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d00e      	beq.n	8015332 <RegionEU433ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8015314:	2110      	movs	r1, #16
 8015316:	187b      	adds	r3, r7, r1
 8015318:	2218      	movs	r2, #24
 801531a:	18ba      	adds	r2, r7, r2
 801531c:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801531e:	187b      	adds	r3, r7, r1
 8015320:	2226      	movs	r2, #38	; 0x26
 8015322:	18ba      	adds	r2, r7, r2
 8015324:	7812      	ldrb	r2, [r2, #0]
 8015326:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU433ChannelAdd( &channelAdd );
 8015328:	187b      	adds	r3, r7, r1
 801532a:	0018      	movs	r0, r3
 801532c:	f000 fd7c 	bl	8015e28 <RegionEU433ChannelAdd>
 8015330:	e009      	b.n	8015346 <RegionEU433ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015332:	210c      	movs	r1, #12
 8015334:	187b      	adds	r3, r7, r1
 8015336:	2226      	movs	r2, #38	; 0x26
 8015338:	18ba      	adds	r2, r7, r2
 801533a:	7812      	ldrb	r2, [r2, #0]
 801533c:	701a      	strb	r2, [r3, #0]

            RegionEU433ChannelsRemove( &channelRemove );
 801533e:	187b      	adds	r3, r7, r1
 8015340:	0018      	movs	r0, r3
 8015342:	f000 fe2b 	bl	8015f9c <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015346:	2227      	movs	r2, #39	; 0x27
 8015348:	18bb      	adds	r3, r7, r2
 801534a:	18ba      	adds	r2, r7, r2
 801534c:	7812      	ldrb	r2, [r2, #0]
 801534e:	3203      	adds	r2, #3
 8015350:	701a      	strb	r2, [r3, #0]
 8015352:	2126      	movs	r1, #38	; 0x26
 8015354:	187b      	adds	r3, r7, r1
 8015356:	781a      	ldrb	r2, [r3, #0]
 8015358:	187b      	adds	r3, r7, r1
 801535a:	3201      	adds	r2, #1
 801535c:	701a      	strb	r2, [r3, #0]
 801535e:	2326      	movs	r3, #38	; 0x26
 8015360:	18fb      	adds	r3, r7, r3
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	2b0f      	cmp	r3, #15
 8015366:	d992      	bls.n	801528e <RegionEU433ApplyCFList+0x3a>
 8015368:	e002      	b.n	8015370 <RegionEU433ApplyCFList+0x11c>
        return;
 801536a:	46c0      	nop			; (mov r8, r8)
 801536c:	e000      	b.n	8015370 <RegionEU433ApplyCFList+0x11c>
        return;
 801536e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015370:	46bd      	mov	sp, r7
 8015372:	b00b      	add	sp, #44	; 0x2c
 8015374:	bd90      	pop	{r4, r7, pc}
	...

08015378 <RegionEU433ComputeRxWindowParameters>:
    }
    return true;
}

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801537a:	b08b      	sub	sp, #44	; 0x2c
 801537c:	af04      	add	r7, sp, #16
 801537e:	60ba      	str	r2, [r7, #8]
 8015380:	607b      	str	r3, [r7, #4]
 8015382:	250f      	movs	r5, #15
 8015384:	197b      	adds	r3, r7, r5
 8015386:	1c02      	adds	r2, r0, #0
 8015388:	701a      	strb	r2, [r3, #0]
 801538a:	230e      	movs	r3, #14
 801538c:	18fb      	adds	r3, r7, r3
 801538e:	1c0a      	adds	r2, r1, #0
 8015390:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8015392:	2300      	movs	r3, #0
 8015394:	2400      	movs	r4, #0
 8015396:	613b      	str	r3, [r7, #16]
 8015398:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 801539a:	197b      	adds	r3, r7, r5
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	b25a      	sxtb	r2, r3
 80153a0:	2a07      	cmp	r2, #7
 80153a2:	dd00      	ble.n	80153a6 <RegionEU433ComputeRxWindowParameters+0x2e>
 80153a4:	2307      	movs	r3, #7
 80153a6:	b25a      	sxtb	r2, r3
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	785b      	ldrb	r3, [r3, #1]
 80153b0:	b25b      	sxtb	r3, r3
 80153b2:	0018      	movs	r0, r3
 80153b4:	f7ff fc6e 	bl	8014c94 <GetBandwidth>
 80153b8:	0003      	movs	r3, r0
 80153ba:	b2da      	uxtb	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	785b      	ldrb	r3, [r3, #1]
 80153c4:	b25b      	sxtb	r3, r3
 80153c6:	2b07      	cmp	r3, #7
 80153c8:	d10d      	bne.n	80153e6 <RegionEU433ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	785b      	ldrb	r3, [r3, #1]
 80153ce:	b25b      	sxtb	r3, r3
 80153d0:	001a      	movs	r2, r3
 80153d2:	4b1b      	ldr	r3, [pc, #108]	; (8015440 <RegionEU433ComputeRxWindowParameters+0xc8>)
 80153d4:	5c9b      	ldrb	r3, [r3, r2]
 80153d6:	0018      	movs	r0, r3
 80153d8:	f7ff face 	bl	8014978 <RegionCommonComputeSymbolTimeFsk>
 80153dc:	0003      	movs	r3, r0
 80153de:	000c      	movs	r4, r1
 80153e0:	613b      	str	r3, [r7, #16]
 80153e2:	617c      	str	r4, [r7, #20]
 80153e4:	e013      	b.n	801540e <RegionEU433ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	785b      	ldrb	r3, [r3, #1]
 80153ea:	b25b      	sxtb	r3, r3
 80153ec:	001a      	movs	r2, r3
 80153ee:	4b14      	ldr	r3, [pc, #80]	; (8015440 <RegionEU433ComputeRxWindowParameters+0xc8>)
 80153f0:	5c98      	ldrb	r0, [r3, r2]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	785b      	ldrb	r3, [r3, #1]
 80153f6:	b25b      	sxtb	r3, r3
 80153f8:	001a      	movs	r2, r3
 80153fa:	4b12      	ldr	r3, [pc, #72]	; (8015444 <RegionEU433ComputeRxWindowParameters+0xcc>)
 80153fc:	0092      	lsls	r2, r2, #2
 80153fe:	58d3      	ldr	r3, [r2, r3]
 8015400:	0019      	movs	r1, r3
 8015402:	f7ff fa8d 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 8015406:	0003      	movs	r3, r0
 8015408:	000c      	movs	r4, r1
 801540a:	613b      	str	r3, [r7, #16]
 801540c:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801540e:	4b0e      	ldr	r3, [pc, #56]	; (8015448 <RegionEU433ComputeRxWindowParameters+0xd0>)
 8015410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015412:	4798      	blx	r3
 8015414:	0006      	movs	r6, r0
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	3308      	adds	r3, #8
 801541a:	687a      	ldr	r2, [r7, #4]
 801541c:	320c      	adds	r2, #12
 801541e:	68bd      	ldr	r5, [r7, #8]
 8015420:	210e      	movs	r1, #14
 8015422:	1879      	adds	r1, r7, r1
 8015424:	780c      	ldrb	r4, [r1, #0]
 8015426:	6938      	ldr	r0, [r7, #16]
 8015428:	6979      	ldr	r1, [r7, #20]
 801542a:	9202      	str	r2, [sp, #8]
 801542c:	9301      	str	r3, [sp, #4]
 801542e:	9600      	str	r6, [sp, #0]
 8015430:	002b      	movs	r3, r5
 8015432:	0022      	movs	r2, r4
 8015434:	f7ff fabc 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 8015438:	46c0      	nop			; (mov r8, r8)
 801543a:	46bd      	mov	sp, r7
 801543c:	b007      	add	sp, #28
 801543e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015440:	08028d50 	.word	0x08028d50
 8015444:	08028d58 	.word	0x08028d58
 8015448:	080293d8 	.word	0x080293d8

0801544c <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801544e:	b091      	sub	sp, #68	; 0x44
 8015450:	af0a      	add	r7, sp, #40	; 0x28
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015456:	230f      	movs	r3, #15
 8015458:	18fb      	adds	r3, r7, r3
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	7852      	ldrb	r2, [r2, #1]
 801545e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8015460:	2316      	movs	r3, #22
 8015462:	18fb      	adds	r3, r7, r3
 8015464:	2200      	movs	r2, #0
 8015466:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8015468:	230e      	movs	r3, #14
 801546a:	18fb      	adds	r3, r7, r3
 801546c:	2200      	movs	r2, #0
 801546e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015476:	4b64      	ldr	r3, [pc, #400]	; (8015608 <RegionEU433RxConfig+0x1bc>)
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	4798      	blx	r3
 801547c:	1e03      	subs	r3, r0, #0
 801547e:	d001      	beq.n	8015484 <RegionEU433RxConfig+0x38>
    {
        return false;
 8015480:	2300      	movs	r3, #0
 8015482:	e0bc      	b.n	80155fe <RegionEU433RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7cdb      	ldrb	r3, [r3, #19]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d122      	bne.n	80154d2 <RegionEU433RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	0019      	movs	r1, r3
 8015492:	4a5e      	ldr	r2, [pc, #376]	; (801560c <RegionEU433RxConfig+0x1c0>)
 8015494:	000b      	movs	r3, r1
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	185b      	adds	r3, r3, r1
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	589b      	ldr	r3, [r3, r2]
 801549e:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	0019      	movs	r1, r3
 80154a6:	4a59      	ldr	r2, [pc, #356]	; (801560c <RegionEU433RxConfig+0x1c0>)
 80154a8:	000b      	movs	r3, r1
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	185b      	adds	r3, r3, r1
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	18d3      	adds	r3, r2, r3
 80154b2:	3304      	adds	r3, #4
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00b      	beq.n	80154d2 <RegionEU433RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	0019      	movs	r1, r3
 80154c0:	4a52      	ldr	r2, [pc, #328]	; (801560c <RegionEU433RxConfig+0x1c0>)
 80154c2:	000b      	movs	r3, r1
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	185b      	adds	r3, r3, r1
 80154c8:	009b      	lsls	r3, r3, #2
 80154ca:	18d3      	adds	r3, r2, r3
 80154cc:	3304      	adds	r3, #4
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 80154d2:	240f      	movs	r4, #15
 80154d4:	193b      	adds	r3, r7, r4
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	b25b      	sxtb	r3, r3
 80154da:	4a4d      	ldr	r2, [pc, #308]	; (8015610 <RegionEU433RxConfig+0x1c4>)
 80154dc:	5cd2      	ldrb	r2, [r2, r3]
 80154de:	230e      	movs	r3, #14
 80154e0:	18fb      	adds	r3, r7, r3
 80154e2:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80154e4:	4b48      	ldr	r3, [pc, #288]	; (8015608 <RegionEU433RxConfig+0x1bc>)
 80154e6:	695b      	ldr	r3, [r3, #20]
 80154e8:	693a      	ldr	r2, [r7, #16]
 80154ea:	0010      	movs	r0, r2
 80154ec:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80154ee:	193b      	adds	r3, r7, r4
 80154f0:	781b      	ldrb	r3, [r3, #0]
 80154f2:	b25b      	sxtb	r3, r3
 80154f4:	2b07      	cmp	r3, #7
 80154f6:	d12f      	bne.n	8015558 <RegionEU433RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 80154f8:	2117      	movs	r1, #23
 80154fa:	187b      	adds	r3, r7, r1
 80154fc:	2200      	movs	r2, #0
 80154fe:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015500:	4b41      	ldr	r3, [pc, #260]	; (8015608 <RegionEU433RxConfig+0x1bc>)
 8015502:	6a1c      	ldr	r4, [r3, #32]
 8015504:	230e      	movs	r3, #14
 8015506:	18fb      	adds	r3, r7, r3
 8015508:	2200      	movs	r2, #0
 801550a:	569a      	ldrsb	r2, [r3, r2]
 801550c:	0013      	movs	r3, r2
 801550e:	015b      	lsls	r3, r3, #5
 8015510:	1a9b      	subs	r3, r3, r2
 8015512:	009b      	lsls	r3, r3, #2
 8015514:	189b      	adds	r3, r3, r2
 8015516:	00db      	lsls	r3, r3, #3
 8015518:	001e      	movs	r6, r3
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	689b      	ldr	r3, [r3, #8]
 801551e:	b29b      	uxth	r3, r3
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	7c92      	ldrb	r2, [r2, #18]
 8015524:	4d3b      	ldr	r5, [pc, #236]	; (8015614 <RegionEU433RxConfig+0x1c8>)
 8015526:	1879      	adds	r1, r7, r1
 8015528:	7808      	ldrb	r0, [r1, #0]
 801552a:	9209      	str	r2, [sp, #36]	; 0x24
 801552c:	2200      	movs	r2, #0
 801552e:	9208      	str	r2, [sp, #32]
 8015530:	2200      	movs	r2, #0
 8015532:	9207      	str	r2, [sp, #28]
 8015534:	2200      	movs	r2, #0
 8015536:	9206      	str	r2, [sp, #24]
 8015538:	2201      	movs	r2, #1
 801553a:	9205      	str	r2, [sp, #20]
 801553c:	2200      	movs	r2, #0
 801553e:	9204      	str	r2, [sp, #16]
 8015540:	2200      	movs	r2, #0
 8015542:	9203      	str	r2, [sp, #12]
 8015544:	9302      	str	r3, [sp, #8]
 8015546:	2305      	movs	r3, #5
 8015548:	9301      	str	r3, [sp, #4]
 801554a:	4b33      	ldr	r3, [pc, #204]	; (8015618 <RegionEU433RxConfig+0x1cc>)
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	2300      	movs	r3, #0
 8015550:	0032      	movs	r2, r6
 8015552:	0029      	movs	r1, r5
 8015554:	47a0      	blx	r4
 8015556:	e029      	b.n	80155ac <RegionEU433RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8015558:	2117      	movs	r1, #23
 801555a:	187b      	adds	r3, r7, r1
 801555c:	2201      	movs	r2, #1
 801555e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015560:	4b29      	ldr	r3, [pc, #164]	; (8015608 <RegionEU433RxConfig+0x1bc>)
 8015562:	6a1c      	ldr	r4, [r3, #32]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	789b      	ldrb	r3, [r3, #2]
 8015568:	001e      	movs	r6, r3
 801556a:	230e      	movs	r3, #14
 801556c:	18fb      	adds	r3, r7, r3
 801556e:	2500      	movs	r5, #0
 8015570:	575d      	ldrsb	r5, [r3, r5]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	689b      	ldr	r3, [r3, #8]
 8015576:	b29b      	uxth	r3, r3
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	7c92      	ldrb	r2, [r2, #18]
 801557c:	1879      	adds	r1, r7, r1
 801557e:	7808      	ldrb	r0, [r1, #0]
 8015580:	9209      	str	r2, [sp, #36]	; 0x24
 8015582:	2201      	movs	r2, #1
 8015584:	9208      	str	r2, [sp, #32]
 8015586:	2200      	movs	r2, #0
 8015588:	9207      	str	r2, [sp, #28]
 801558a:	2200      	movs	r2, #0
 801558c:	9206      	str	r2, [sp, #24]
 801558e:	2200      	movs	r2, #0
 8015590:	9205      	str	r2, [sp, #20]
 8015592:	2200      	movs	r2, #0
 8015594:	9204      	str	r2, [sp, #16]
 8015596:	2200      	movs	r2, #0
 8015598:	9203      	str	r2, [sp, #12]
 801559a:	9302      	str	r3, [sp, #8]
 801559c:	2308      	movs	r3, #8
 801559e:	9301      	str	r3, [sp, #4]
 80155a0:	2300      	movs	r3, #0
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	2301      	movs	r3, #1
 80155a6:	002a      	movs	r2, r5
 80155a8:	0031      	movs	r1, r6
 80155aa:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	7c5b      	ldrb	r3, [r3, #17]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d009      	beq.n	80155c8 <RegionEU433RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 80155b4:	230f      	movs	r3, #15
 80155b6:	18fb      	adds	r3, r7, r3
 80155b8:	2200      	movs	r2, #0
 80155ba:	569a      	ldrsb	r2, [r3, r2]
 80155bc:	2316      	movs	r3, #22
 80155be:	18fb      	adds	r3, r7, r3
 80155c0:	4916      	ldr	r1, [pc, #88]	; (801561c <RegionEU433RxConfig+0x1d0>)
 80155c2:	5c8a      	ldrb	r2, [r1, r2]
 80155c4:	701a      	strb	r2, [r3, #0]
 80155c6:	e008      	b.n	80155da <RegionEU433RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 80155c8:	230f      	movs	r3, #15
 80155ca:	18fb      	adds	r3, r7, r3
 80155cc:	2200      	movs	r2, #0
 80155ce:	569a      	ldrsb	r2, [r3, r2]
 80155d0:	2316      	movs	r3, #22
 80155d2:	18fb      	adds	r3, r7, r3
 80155d4:	4912      	ldr	r1, [pc, #72]	; (8015620 <RegionEU433RxConfig+0x1d4>)
 80155d6:	5c8a      	ldrb	r2, [r1, r2]
 80155d8:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 80155da:	4b0b      	ldr	r3, [pc, #44]	; (8015608 <RegionEU433RxConfig+0x1bc>)
 80155dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155de:	2216      	movs	r2, #22
 80155e0:	18ba      	adds	r2, r7, r2
 80155e2:	7812      	ldrb	r2, [r2, #0]
 80155e4:	320d      	adds	r2, #13
 80155e6:	b2d1      	uxtb	r1, r2
 80155e8:	2217      	movs	r2, #23
 80155ea:	18ba      	adds	r2, r7, r2
 80155ec:	7812      	ldrb	r2, [r2, #0]
 80155ee:	0010      	movs	r0, r2
 80155f0:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	220f      	movs	r2, #15
 80155f6:	18ba      	adds	r2, r7, r2
 80155f8:	7812      	ldrb	r2, [r2, #0]
 80155fa:	701a      	strb	r2, [r3, #0]
    return true;
 80155fc:	2301      	movs	r3, #1
}
 80155fe:	0018      	movs	r0, r3
 8015600:	46bd      	mov	sp, r7
 8015602:	b007      	add	sp, #28
 8015604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015606:	46c0      	nop			; (mov r8, r8)
 8015608:	080293d8 	.word	0x080293d8
 801560c:	200015a0 	.word	0x200015a0
 8015610:	08028d50 	.word	0x08028d50
 8015614:	0000c350 	.word	0x0000c350
 8015618:	00014585 	.word	0x00014585
 801561c:	08028d80 	.word	0x08028d80
 8015620:	08028d78 	.word	0x08028d78

08015624 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015626:	b093      	sub	sp, #76	; 0x4c
 8015628:	af0a      	add	r7, sp, #40	; 0x28
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	785b      	ldrb	r3, [r3, #1]
 8015634:	b25b      	sxtb	r3, r3
 8015636:	001a      	movs	r2, r3
 8015638:	4b60      	ldr	r3, [pc, #384]	; (80157bc <RegionEU433TxConfig+0x198>)
 801563a:	5c9a      	ldrb	r2, [r3, r2]
 801563c:	231e      	movs	r3, #30
 801563e:	18fb      	adds	r3, r7, r3
 8015640:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2002      	movs	r0, #2
 8015646:	5618      	ldrsb	r0, [r3, r0]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	0019      	movs	r1, r3
 801564e:	4a5c      	ldr	r2, [pc, #368]	; (80157c0 <RegionEU433TxConfig+0x19c>)
 8015650:	000b      	movs	r3, r1
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	185b      	adds	r3, r3, r1
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	18d3      	adds	r3, r2, r3
 801565a:	3309      	adds	r3, #9
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	4a58      	ldr	r2, [pc, #352]	; (80157c0 <RegionEU433TxConfig+0x19c>)
 8015660:	330c      	adds	r3, #12
 8015662:	011b      	lsls	r3, r3, #4
 8015664:	18d3      	adds	r3, r2, r3
 8015666:	3302      	adds	r3, #2
 8015668:	2100      	movs	r1, #0
 801566a:	5659      	ldrsb	r1, [r3, r1]
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2201      	movs	r2, #1
 8015670:	569a      	ldrsb	r2, [r3, r2]
 8015672:	251d      	movs	r5, #29
 8015674:	197c      	adds	r4, r7, r5
 8015676:	4b53      	ldr	r3, [pc, #332]	; (80157c4 <RegionEU433TxConfig+0x1a0>)
 8015678:	f7ff fb2a 	bl	8014cd0 <LimitTxPower>
 801567c:	0003      	movs	r3, r0
 801567e:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	785b      	ldrb	r3, [r3, #1]
 8015684:	b25b      	sxtb	r3, r3
 8015686:	0018      	movs	r0, r3
 8015688:	f7ff fb04 	bl	8014c94 <GetBandwidth>
 801568c:	0003      	movs	r3, r0
 801568e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8015690:	2017      	movs	r0, #23
 8015692:	183b      	adds	r3, r7, r0
 8015694:	2200      	movs	r2, #0
 8015696:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6859      	ldr	r1, [r3, #4]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	689a      	ldr	r2, [r3, #8]
 80156a0:	183c      	adds	r4, r7, r0
 80156a2:	197b      	adds	r3, r7, r5
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	b25b      	sxtb	r3, r3
 80156a8:	0018      	movs	r0, r3
 80156aa:	f7ff fa05 	bl	8014ab8 <RegionCommonComputeTxPower>
 80156ae:	0003      	movs	r3, r0
 80156b0:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80156b2:	4b45      	ldr	r3, [pc, #276]	; (80157c8 <RegionEU433TxConfig+0x1a4>)
 80156b4:	695a      	ldr	r2, [r3, #20]
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	781b      	ldrb	r3, [r3, #0]
 80156ba:	0018      	movs	r0, r3
 80156bc:	4940      	ldr	r1, [pc, #256]	; (80157c0 <RegionEU433TxConfig+0x19c>)
 80156be:	0003      	movs	r3, r0
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	181b      	adds	r3, r3, r0
 80156c4:	009b      	lsls	r3, r3, #2
 80156c6:	585b      	ldr	r3, [r3, r1]
 80156c8:	0018      	movs	r0, r3
 80156ca:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	785b      	ldrb	r3, [r3, #1]
 80156d0:	b25b      	sxtb	r3, r3
 80156d2:	2b07      	cmp	r3, #7
 80156d4:	d12d      	bne.n	8015732 <RegionEU433TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80156d6:	201f      	movs	r0, #31
 80156d8:	183b      	adds	r3, r7, r0
 80156da:	2200      	movs	r2, #0
 80156dc:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 80156de:	4b3a      	ldr	r3, [pc, #232]	; (80157c8 <RegionEU433TxConfig+0x1a4>)
 80156e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80156e2:	231e      	movs	r3, #30
 80156e4:	18fb      	adds	r3, r7, r3
 80156e6:	2200      	movs	r2, #0
 80156e8:	569a      	ldrsb	r2, [r3, r2]
 80156ea:	0013      	movs	r3, r2
 80156ec:	015b      	lsls	r3, r3, #5
 80156ee:	1a9b      	subs	r3, r3, r2
 80156f0:	009b      	lsls	r3, r3, #2
 80156f2:	189b      	adds	r3, r3, r2
 80156f4:	00db      	lsls	r3, r3, #3
 80156f6:	001d      	movs	r5, r3
 80156f8:	69ba      	ldr	r2, [r7, #24]
 80156fa:	4e34      	ldr	r6, [pc, #208]	; (80157cc <RegionEU433TxConfig+0x1a8>)
 80156fc:	2317      	movs	r3, #23
 80156fe:	18fb      	adds	r3, r7, r3
 8015700:	2100      	movs	r1, #0
 8015702:	5659      	ldrsb	r1, [r3, r1]
 8015704:	183b      	adds	r3, r7, r0
 8015706:	7818      	ldrb	r0, [r3, #0]
 8015708:	4b31      	ldr	r3, [pc, #196]	; (80157d0 <RegionEU433TxConfig+0x1ac>)
 801570a:	9308      	str	r3, [sp, #32]
 801570c:	2300      	movs	r3, #0
 801570e:	9307      	str	r3, [sp, #28]
 8015710:	2300      	movs	r3, #0
 8015712:	9306      	str	r3, [sp, #24]
 8015714:	2300      	movs	r3, #0
 8015716:	9305      	str	r3, [sp, #20]
 8015718:	2301      	movs	r3, #1
 801571a:	9304      	str	r3, [sp, #16]
 801571c:	2300      	movs	r3, #0
 801571e:	9303      	str	r3, [sp, #12]
 8015720:	2305      	movs	r3, #5
 8015722:	9302      	str	r3, [sp, #8]
 8015724:	2300      	movs	r3, #0
 8015726:	9301      	str	r3, [sp, #4]
 8015728:	9500      	str	r5, [sp, #0]
 801572a:	0013      	movs	r3, r2
 801572c:	0032      	movs	r2, r6
 801572e:	47a0      	blx	r4
 8015730:	e024      	b.n	801577c <RegionEU433TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8015732:	201f      	movs	r0, #31
 8015734:	183b      	adds	r3, r7, r0
 8015736:	2201      	movs	r2, #1
 8015738:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801573a:	4b23      	ldr	r3, [pc, #140]	; (80157c8 <RegionEU433TxConfig+0x1a4>)
 801573c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801573e:	231e      	movs	r3, #30
 8015740:	18fb      	adds	r3, r7, r3
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	b25b      	sxtb	r3, r3
 8015746:	69bd      	ldr	r5, [r7, #24]
 8015748:	2217      	movs	r2, #23
 801574a:	18ba      	adds	r2, r7, r2
 801574c:	2100      	movs	r1, #0
 801574e:	5651      	ldrsb	r1, [r2, r1]
 8015750:	183a      	adds	r2, r7, r0
 8015752:	7810      	ldrb	r0, [r2, #0]
 8015754:	4a1e      	ldr	r2, [pc, #120]	; (80157d0 <RegionEU433TxConfig+0x1ac>)
 8015756:	9208      	str	r2, [sp, #32]
 8015758:	2200      	movs	r2, #0
 801575a:	9207      	str	r2, [sp, #28]
 801575c:	2200      	movs	r2, #0
 801575e:	9206      	str	r2, [sp, #24]
 8015760:	2200      	movs	r2, #0
 8015762:	9205      	str	r2, [sp, #20]
 8015764:	2201      	movs	r2, #1
 8015766:	9204      	str	r2, [sp, #16]
 8015768:	2200      	movs	r2, #0
 801576a:	9203      	str	r2, [sp, #12]
 801576c:	2208      	movs	r2, #8
 801576e:	9202      	str	r2, [sp, #8]
 8015770:	2201      	movs	r2, #1
 8015772:	9201      	str	r2, [sp, #4]
 8015774:	9300      	str	r3, [sp, #0]
 8015776:	002b      	movs	r3, r5
 8015778:	2200      	movs	r2, #0
 801577a:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801577c:	4b12      	ldr	r3, [pc, #72]	; (80157c8 <RegionEU433TxConfig+0x1a4>)
 801577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015780:	68fa      	ldr	r2, [r7, #12]
 8015782:	8992      	ldrh	r2, [r2, #12]
 8015784:	b2d1      	uxtb	r1, r2
 8015786:	241f      	movs	r4, #31
 8015788:	193a      	adds	r2, r7, r4
 801578a:	7812      	ldrb	r2, [r2, #0]
 801578c:	0010      	movs	r0, r2
 801578e:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8015790:	4b0d      	ldr	r3, [pc, #52]	; (80157c8 <RegionEU433TxConfig+0x1a4>)
 8015792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015794:	68fa      	ldr	r2, [r7, #12]
 8015796:	8992      	ldrh	r2, [r2, #12]
 8015798:	b2d1      	uxtb	r1, r2
 801579a:	193a      	adds	r2, r7, r4
 801579c:	7812      	ldrb	r2, [r2, #0]
 801579e:	0010      	movs	r0, r2
 80157a0:	4798      	blx	r3
 80157a2:	0002      	movs	r2, r0
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	221d      	movs	r2, #29
 80157ac:	18ba      	adds	r2, r7, r2
 80157ae:	7812      	ldrb	r2, [r2, #0]
 80157b0:	701a      	strb	r2, [r3, #0]
    return true;
 80157b2:	2301      	movs	r3, #1
}
 80157b4:	0018      	movs	r0, r3
 80157b6:	46bd      	mov	sp, r7
 80157b8:	b009      	add	sp, #36	; 0x24
 80157ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157bc:	08028d50 	.word	0x08028d50
 80157c0:	200015a0 	.word	0x200015a0
 80157c4:	20001670 	.word	0x20001670
 80157c8:	080293d8 	.word	0x080293d8
 80157cc:	000061a8 	.word	0x000061a8
 80157d0:	00000bb8 	.word	0x00000bb8

080157d4 <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80157d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157d6:	b093      	sub	sp, #76	; 0x4c
 80157d8:	af00      	add	r7, sp, #0
 80157da:	60f8      	str	r0, [r7, #12]
 80157dc:	60b9      	str	r1, [r7, #8]
 80157de:	607a      	str	r2, [r7, #4]
 80157e0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80157e2:	2347      	movs	r3, #71	; 0x47
 80157e4:	18fb      	adds	r3, r7, r3
 80157e6:	2207      	movs	r2, #7
 80157e8:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80157ea:	2344      	movs	r3, #68	; 0x44
 80157ec:	18fb      	adds	r3, r7, r3
 80157ee:	2200      	movs	r2, #0
 80157f0:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80157f2:	2346      	movs	r3, #70	; 0x46
 80157f4:	18fb      	adds	r3, r7, r3
 80157f6:	2200      	movs	r2, #0
 80157f8:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 80157fa:	233a      	movs	r3, #58	; 0x3a
 80157fc:	18fb      	adds	r3, r7, r3
 80157fe:	2200      	movs	r2, #0
 8015800:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015802:	e09e      	b.n	8015942 <RegionEU433LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	685a      	ldr	r2, [r3, #4]
 8015808:	2346      	movs	r3, #70	; 0x46
 801580a:	18fb      	adds	r3, r7, r3
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	18d3      	adds	r3, r2, r3
 8015810:	2544      	movs	r5, #68	; 0x44
 8015812:	197c      	adds	r4, r7, r5
 8015814:	223c      	movs	r2, #60	; 0x3c
 8015816:	18ba      	adds	r2, r7, r2
 8015818:	0011      	movs	r1, r2
 801581a:	0018      	movs	r0, r3
 801581c:	f7fe ff84 	bl	8014728 <RegionCommonParseLinkAdrReq>
 8015820:	0003      	movs	r3, r0
 8015822:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8015824:	197b      	adds	r3, r7, r5
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d100      	bne.n	801582e <RegionEU433LinkAdrReq+0x5a>
 801582c:	e092      	b.n	8015954 <RegionEU433LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801582e:	2246      	movs	r2, #70	; 0x46
 8015830:	18bb      	adds	r3, r7, r2
 8015832:	18b9      	adds	r1, r7, r2
 8015834:	2244      	movs	r2, #68	; 0x44
 8015836:	18ba      	adds	r2, r7, r2
 8015838:	7809      	ldrb	r1, [r1, #0]
 801583a:	7812      	ldrb	r2, [r2, #0]
 801583c:	188a      	adds	r2, r1, r2
 801583e:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015840:	2347      	movs	r3, #71	; 0x47
 8015842:	18fb      	adds	r3, r7, r3
 8015844:	2207      	movs	r2, #7
 8015846:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015848:	213c      	movs	r1, #60	; 0x3c
 801584a:	187b      	adds	r3, r7, r1
 801584c:	889a      	ldrh	r2, [r3, #4]
 801584e:	233a      	movs	r3, #58	; 0x3a
 8015850:	18fb      	adds	r3, r7, r3
 8015852:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015854:	187b      	adds	r3, r7, r1
 8015856:	78db      	ldrb	r3, [r3, #3]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d10c      	bne.n	8015876 <RegionEU433LinkAdrReq+0xa2>
 801585c:	233a      	movs	r3, #58	; 0x3a
 801585e:	18fb      	adds	r3, r7, r3
 8015860:	881b      	ldrh	r3, [r3, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d107      	bne.n	8015876 <RegionEU433LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8015866:	2247      	movs	r2, #71	; 0x47
 8015868:	18bb      	adds	r3, r7, r2
 801586a:	18ba      	adds	r2, r7, r2
 801586c:	7812      	ldrb	r2, [r2, #0]
 801586e:	2101      	movs	r1, #1
 8015870:	438a      	bics	r2, r1
 8015872:	701a      	strb	r2, [r3, #0]
 8015874:	e065      	b.n	8015942 <RegionEU433LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015876:	233c      	movs	r3, #60	; 0x3c
 8015878:	18fb      	adds	r3, r7, r3
 801587a:	78db      	ldrb	r3, [r3, #3]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d004      	beq.n	801588a <RegionEU433LinkAdrReq+0xb6>
 8015880:	233c      	movs	r3, #60	; 0x3c
 8015882:	18fb      	adds	r3, r7, r3
 8015884:	78db      	ldrb	r3, [r3, #3]
 8015886:	2b05      	cmp	r3, #5
 8015888:	d904      	bls.n	8015894 <RegionEU433LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801588a:	233c      	movs	r3, #60	; 0x3c
 801588c:	18fb      	adds	r3, r7, r3
 801588e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015890:	2b06      	cmp	r3, #6
 8015892:	d907      	bls.n	80158a4 <RegionEU433LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015894:	2247      	movs	r2, #71	; 0x47
 8015896:	18bb      	adds	r3, r7, r2
 8015898:	18ba      	adds	r2, r7, r2
 801589a:	7812      	ldrb	r2, [r2, #0]
 801589c:	2101      	movs	r1, #1
 801589e:	438a      	bics	r2, r1
 80158a0:	701a      	strb	r2, [r3, #0]
 80158a2:	e04e      	b.n	8015942 <RegionEU433LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 80158a4:	2345      	movs	r3, #69	; 0x45
 80158a6:	18fb      	adds	r3, r7, r3
 80158a8:	2200      	movs	r2, #0
 80158aa:	701a      	strb	r2, [r3, #0]
 80158ac:	e044      	b.n	8015938 <RegionEU433LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80158ae:	233c      	movs	r3, #60	; 0x3c
 80158b0:	18fb      	adds	r3, r7, r3
 80158b2:	78db      	ldrb	r3, [r3, #3]
 80158b4:	2b06      	cmp	r3, #6
 80158b6:	d11b      	bne.n	80158f0 <RegionEU433LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80158b8:	2345      	movs	r3, #69	; 0x45
 80158ba:	18fb      	adds	r3, r7, r3
 80158bc:	781a      	ldrb	r2, [r3, #0]
 80158be:	496e      	ldr	r1, [pc, #440]	; (8015a78 <RegionEU433LinkAdrReq+0x2a4>)
 80158c0:	0013      	movs	r3, r2
 80158c2:	005b      	lsls	r3, r3, #1
 80158c4:	189b      	adds	r3, r3, r2
 80158c6:	009b      	lsls	r3, r3, #2
 80158c8:	585b      	ldr	r3, [r3, r1]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d02e      	beq.n	801592c <RegionEU433LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 80158ce:	2345      	movs	r3, #69	; 0x45
 80158d0:	18fb      	adds	r3, r7, r3
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	2201      	movs	r2, #1
 80158d6:	409a      	lsls	r2, r3
 80158d8:	0013      	movs	r3, r2
 80158da:	b21a      	sxth	r2, r3
 80158dc:	213a      	movs	r1, #58	; 0x3a
 80158de:	187b      	adds	r3, r7, r1
 80158e0:	881b      	ldrh	r3, [r3, #0]
 80158e2:	b21b      	sxth	r3, r3
 80158e4:	4313      	orrs	r3, r2
 80158e6:	b21b      	sxth	r3, r3
 80158e8:	b29a      	uxth	r2, r3
 80158ea:	187b      	adds	r3, r7, r1
 80158ec:	801a      	strh	r2, [r3, #0]
 80158ee:	e01d      	b.n	801592c <RegionEU433LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80158f0:	233a      	movs	r3, #58	; 0x3a
 80158f2:	18fb      	adds	r3, r7, r3
 80158f4:	881b      	ldrh	r3, [r3, #0]
 80158f6:	001a      	movs	r2, r3
 80158f8:	2345      	movs	r3, #69	; 0x45
 80158fa:	18fb      	adds	r3, r7, r3
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	411a      	asrs	r2, r3
 8015900:	0013      	movs	r3, r2
 8015902:	2201      	movs	r2, #1
 8015904:	4013      	ands	r3, r2
 8015906:	d011      	beq.n	801592c <RegionEU433LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8015908:	2345      	movs	r3, #69	; 0x45
 801590a:	18fb      	adds	r3, r7, r3
 801590c:	781a      	ldrb	r2, [r3, #0]
 801590e:	495a      	ldr	r1, [pc, #360]	; (8015a78 <RegionEU433LinkAdrReq+0x2a4>)
 8015910:	0013      	movs	r3, r2
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	189b      	adds	r3, r3, r2
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801591a:	2b00      	cmp	r3, #0
 801591c:	d106      	bne.n	801592c <RegionEU433LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801591e:	2247      	movs	r2, #71	; 0x47
 8015920:	18bb      	adds	r3, r7, r2
 8015922:	18ba      	adds	r2, r7, r2
 8015924:	7812      	ldrb	r2, [r2, #0]
 8015926:	2101      	movs	r1, #1
 8015928:	438a      	bics	r2, r1
 801592a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 801592c:	2145      	movs	r1, #69	; 0x45
 801592e:	187b      	adds	r3, r7, r1
 8015930:	781a      	ldrb	r2, [r3, #0]
 8015932:	187b      	adds	r3, r7, r1
 8015934:	3201      	adds	r2, #1
 8015936:	701a      	strb	r2, [r3, #0]
 8015938:	2345      	movs	r3, #69	; 0x45
 801593a:	18fb      	adds	r3, r7, r3
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	2b0f      	cmp	r3, #15
 8015940:	d9b5      	bls.n	80158ae <RegionEU433LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	7a1b      	ldrb	r3, [r3, #8]
 8015946:	2246      	movs	r2, #70	; 0x46
 8015948:	18ba      	adds	r2, r7, r2
 801594a:	7812      	ldrb	r2, [r2, #0]
 801594c:	429a      	cmp	r2, r3
 801594e:	d200      	bcs.n	8015952 <RegionEU433LinkAdrReq+0x17e>
 8015950:	e758      	b.n	8015804 <RegionEU433LinkAdrReq+0x30>
 8015952:	e000      	b.n	8015956 <RegionEU433LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8015954:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

        // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015956:	2134      	movs	r1, #52	; 0x34
 8015958:	187b      	adds	r3, r7, r1
 801595a:	2201      	movs	r2, #1
 801595c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	7a5a      	ldrb	r2, [r3, #9]
 8015962:	187b      	adds	r3, r7, r1
 8015964:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU433GetPhyParam( &getPhy );
 8015966:	187b      	adds	r3, r7, r1
 8015968:	0018      	movs	r0, r3
 801596a:	f7ff fae7 	bl	8014f3c <RegionEU433GetPhyParam>
 801596e:	0003      	movs	r3, r0
 8015970:	001a      	movs	r2, r3
 8015972:	2030      	movs	r0, #48	; 0x30
 8015974:	183b      	adds	r3, r7, r0
 8015976:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8015978:	2110      	movs	r1, #16
 801597a:	187b      	adds	r3, r7, r1
 801597c:	2447      	movs	r4, #71	; 0x47
 801597e:	193a      	adds	r2, r7, r4
 8015980:	7812      	ldrb	r2, [r2, #0]
 8015982:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	7a9a      	ldrb	r2, [r3, #10]
 8015988:	187b      	adds	r3, r7, r1
 801598a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801598c:	253c      	movs	r5, #60	; 0x3c
 801598e:	197b      	adds	r3, r7, r5
 8015990:	2201      	movs	r2, #1
 8015992:	569a      	ldrsb	r2, [r3, r2]
 8015994:	187b      	adds	r3, r7, r1
 8015996:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015998:	197b      	adds	r3, r7, r5
 801599a:	2202      	movs	r2, #2
 801599c:	569a      	ldrsb	r2, [r3, r2]
 801599e:	187b      	adds	r3, r7, r1
 80159a0:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80159a2:	197b      	adds	r3, r7, r5
 80159a4:	781a      	ldrb	r2, [r3, #0]
 80159a6:	187b      	adds	r3, r7, r1
 80159a8:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	220b      	movs	r2, #11
 80159ae:	569a      	ldrsb	r2, [r3, r2]
 80159b0:	187b      	adds	r3, r7, r1
 80159b2:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	220c      	movs	r2, #12
 80159b8:	569a      	ldrsb	r2, [r3, r2]
 80159ba:	187b      	adds	r3, r7, r1
 80159bc:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	7b5b      	ldrb	r3, [r3, #13]
 80159c2:	b25a      	sxtb	r2, r3
 80159c4:	187b      	adds	r3, r7, r1
 80159c6:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 80159c8:	187b      	adds	r3, r7, r1
 80159ca:	2210      	movs	r2, #16
 80159cc:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80159ce:	187b      	adds	r3, r7, r1
 80159d0:	223a      	movs	r2, #58	; 0x3a
 80159d2:	18ba      	adds	r2, r7, r2
 80159d4:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80159d6:	183b      	adds	r3, r7, r0
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	b25a      	sxtb	r2, r3
 80159dc:	0008      	movs	r0, r1
 80159de:	183b      	adds	r3, r7, r0
 80159e0:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 80159e2:	183b      	adds	r3, r7, r0
 80159e4:	2207      	movs	r2, #7
 80159e6:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 80159e8:	183b      	adds	r3, r7, r0
 80159ea:	4a23      	ldr	r2, [pc, #140]	; (8015a78 <RegionEU433LinkAdrReq+0x2a4>)
 80159ec:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 80159ee:	183b      	adds	r3, r7, r0
 80159f0:	2205      	movs	r2, #5
 80159f2:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 80159f4:	183b      	adds	r3, r7, r0
 80159f6:	2200      	movs	r2, #0
 80159f8:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80159fa:	183b      	adds	r3, r7, r0
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	6812      	ldr	r2, [r2, #0]
 8015a00:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015a02:	0026      	movs	r6, r4
 8015a04:	193c      	adds	r4, r7, r4
 8015a06:	0029      	movs	r1, r5
 8015a08:	187d      	adds	r5, r7, r1
 8015a0a:	187b      	adds	r3, r7, r1
 8015a0c:	1c9a      	adds	r2, r3, #2
 8015a0e:	187b      	adds	r3, r7, r1
 8015a10:	1c59      	adds	r1, r3, #1
 8015a12:	1838      	adds	r0, r7, r0
 8015a14:	002b      	movs	r3, r5
 8015a16:	f7fe fedd 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 8015a1a:	0003      	movs	r3, r0
 8015a1c:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015a1e:	0034      	movs	r4, r6
 8015a20:	193b      	adds	r3, r7, r4
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	2b07      	cmp	r3, #7
 8015a26:	d10b      	bne.n	8015a40 <RegionEU433LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8015a28:	4b14      	ldr	r3, [pc, #80]	; (8015a7c <RegionEU433LinkAdrReq+0x2a8>)
 8015a2a:	2202      	movs	r2, #2
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	0018      	movs	r0, r3
 8015a30:	f007 f97c 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8015a34:	233a      	movs	r3, #58	; 0x3a
 8015a36:	18fb      	adds	r3, r7, r3
 8015a38:	8819      	ldrh	r1, [r3, #0]
 8015a3a:	4b0f      	ldr	r3, [pc, #60]	; (8015a78 <RegionEU433LinkAdrReq+0x2a4>)
 8015a3c:	22d0      	movs	r2, #208	; 0xd0
 8015a3e:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015a40:	213c      	movs	r1, #60	; 0x3c
 8015a42:	187b      	adds	r3, r7, r1
 8015a44:	2201      	movs	r2, #1
 8015a46:	569a      	ldrsb	r2, [r3, r2]
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015a4c:	187b      	adds	r3, r7, r1
 8015a4e:	2202      	movs	r2, #2
 8015a50:	569a      	ldrsb	r2, [r3, r2]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015a56:	187b      	adds	r3, r7, r1
 8015a58:	781a      	ldrb	r2, [r3, #0]
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a60:	2246      	movs	r2, #70	; 0x46
 8015a62:	18ba      	adds	r2, r7, r2
 8015a64:	7812      	ldrb	r2, [r2, #0]
 8015a66:	701a      	strb	r2, [r3, #0]

    return status;
 8015a68:	2347      	movs	r3, #71	; 0x47
 8015a6a:	18fb      	adds	r3, r7, r3
 8015a6c:	781b      	ldrb	r3, [r3, #0]
}
 8015a6e:	0018      	movs	r0, r3
 8015a70:	46bd      	mov	sp, r7
 8015a72:	b013      	add	sp, #76	; 0x4c
 8015a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a76:	46c0      	nop			; (mov r8, r8)
 8015a78:	200015a0 	.word	0x200015a0
 8015a7c:	20001670 	.word	0x20001670

08015a80 <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b084      	sub	sp, #16
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015a88:	230f      	movs	r3, #15
 8015a8a:	18fb      	adds	r3, r7, r3
 8015a8c:	2207      	movs	r2, #7
 8015a8e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	0018      	movs	r0, r3
 8015a96:	f7ff f943 	bl	8014d20 <VerifyRfFreq>
 8015a9a:	0003      	movs	r3, r0
 8015a9c:	001a      	movs	r2, r3
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	4053      	eors	r3, r2
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d006      	beq.n	8015ab6 <RegionEU433RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8015aa8:	220f      	movs	r2, #15
 8015aaa:	18bb      	adds	r3, r7, r2
 8015aac:	18ba      	adds	r2, r7, r2
 8015aae:	7812      	ldrb	r2, [r2, #0]
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	438a      	bics	r2, r1
 8015ab4:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	b25b      	sxtb	r3, r3
 8015abc:	2207      	movs	r2, #7
 8015abe:	2100      	movs	r1, #0
 8015ac0:	0018      	movs	r0, r3
 8015ac2:	f7fe fc49 	bl	8014358 <RegionCommonValueInRange>
 8015ac6:	1e03      	subs	r3, r0, #0
 8015ac8:	d106      	bne.n	8015ad8 <RegionEU433RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8015aca:	220f      	movs	r2, #15
 8015acc:	18bb      	adds	r3, r7, r2
 8015ace:	18ba      	adds	r2, r7, r2
 8015ad0:	7812      	ldrb	r2, [r2, #0]
 8015ad2:	2102      	movs	r1, #2
 8015ad4:	438a      	bics	r2, r1
 8015ad6:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	785b      	ldrb	r3, [r3, #1]
 8015adc:	b25b      	sxtb	r3, r3
 8015ade:	2205      	movs	r2, #5
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	0018      	movs	r0, r3
 8015ae4:	f7fe fc38 	bl	8014358 <RegionCommonValueInRange>
 8015ae8:	1e03      	subs	r3, r0, #0
 8015aea:	d106      	bne.n	8015afa <RegionEU433RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015aec:	220f      	movs	r2, #15
 8015aee:	18bb      	adds	r3, r7, r2
 8015af0:	18ba      	adds	r2, r7, r2
 8015af2:	7812      	ldrb	r2, [r2, #0]
 8015af4:	2104      	movs	r1, #4
 8015af6:	438a      	bics	r2, r1
 8015af8:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8015afa:	230f      	movs	r3, #15
 8015afc:	18fb      	adds	r3, r7, r3
 8015afe:	781b      	ldrb	r3, [r3, #0]
}
 8015b00:	0018      	movs	r0, r3
 8015b02:	46bd      	mov	sp, r7
 8015b04:	b004      	add	sp, #16
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <RegionEU433NewChannelReq>:

uint8_t RegionEU433NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b086      	sub	sp, #24
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015b10:	2317      	movs	r3, #23
 8015b12:	18fb      	adds	r3, r7, r3
 8015b14:	2203      	movs	r2, #3
 8015b16:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d119      	bne.n	8015b56 <RegionEU433NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	791b      	ldrb	r3, [r3, #4]
 8015b26:	b25b      	sxtb	r3, r3
 8015b28:	b2da      	uxtb	r2, r3
 8015b2a:	2108      	movs	r1, #8
 8015b2c:	187b      	adds	r3, r7, r1
 8015b2e:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 8015b30:	187b      	adds	r3, r7, r1
 8015b32:	0018      	movs	r0, r3
 8015b34:	f000 fa32 	bl	8015f9c <RegionEU433ChannelsRemove>
 8015b38:	0003      	movs	r3, r0
 8015b3a:	001a      	movs	r2, r3
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4053      	eors	r3, r2
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d043      	beq.n	8015bce <RegionEU433NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8015b46:	2217      	movs	r2, #23
 8015b48:	18bb      	adds	r3, r7, r2
 8015b4a:	18ba      	adds	r2, r7, r2
 8015b4c:	7812      	ldrb	r2, [r2, #0]
 8015b4e:	2103      	movs	r1, #3
 8015b50:	438a      	bics	r2, r1
 8015b52:	701a      	strb	r2, [r3, #0]
 8015b54:	e03b      	b.n	8015bce <RegionEU433NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	210c      	movs	r1, #12
 8015b5c:	187b      	adds	r3, r7, r1
 8015b5e:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	791b      	ldrb	r3, [r3, #4]
 8015b64:	b25b      	sxtb	r3, r3
 8015b66:	b2da      	uxtb	r2, r3
 8015b68:	187b      	adds	r3, r7, r1
 8015b6a:	711a      	strb	r2, [r3, #4]

        switch( RegionEU433ChannelAdd( &channelAdd ) )
 8015b6c:	187b      	adds	r3, r7, r1
 8015b6e:	0018      	movs	r0, r3
 8015b70:	f000 f95a 	bl	8015e28 <RegionEU433ChannelAdd>
 8015b74:	0003      	movs	r3, r0
 8015b76:	2b04      	cmp	r3, #4
 8015b78:	d008      	beq.n	8015b8c <RegionEU433NewChannelReq+0x84>
 8015b7a:	dc02      	bgt.n	8015b82 <RegionEU433NewChannelReq+0x7a>
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d025      	beq.n	8015bcc <RegionEU433NewChannelReq+0xc4>
 8015b80:	e01c      	b.n	8015bbc <RegionEU433NewChannelReq+0xb4>
 8015b82:	2b05      	cmp	r3, #5
 8015b84:	d00a      	beq.n	8015b9c <RegionEU433NewChannelReq+0x94>
 8015b86:	2b06      	cmp	r3, #6
 8015b88:	d010      	beq.n	8015bac <RegionEU433NewChannelReq+0xa4>
 8015b8a:	e017      	b.n	8015bbc <RegionEU433NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015b8c:	2217      	movs	r2, #23
 8015b8e:	18bb      	adds	r3, r7, r2
 8015b90:	18ba      	adds	r2, r7, r2
 8015b92:	7812      	ldrb	r2, [r2, #0]
 8015b94:	2101      	movs	r1, #1
 8015b96:	438a      	bics	r2, r1
 8015b98:	701a      	strb	r2, [r3, #0]
                break;
 8015b9a:	e018      	b.n	8015bce <RegionEU433NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015b9c:	2217      	movs	r2, #23
 8015b9e:	18bb      	adds	r3, r7, r2
 8015ba0:	18ba      	adds	r2, r7, r2
 8015ba2:	7812      	ldrb	r2, [r2, #0]
 8015ba4:	2102      	movs	r1, #2
 8015ba6:	438a      	bics	r2, r1
 8015ba8:	701a      	strb	r2, [r3, #0]
                break;
 8015baa:	e010      	b.n	8015bce <RegionEU433NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015bac:	2217      	movs	r2, #23
 8015bae:	18bb      	adds	r3, r7, r2
 8015bb0:	18ba      	adds	r2, r7, r2
 8015bb2:	7812      	ldrb	r2, [r2, #0]
 8015bb4:	2103      	movs	r1, #3
 8015bb6:	438a      	bics	r2, r1
 8015bb8:	701a      	strb	r2, [r3, #0]
                break;
 8015bba:	e008      	b.n	8015bce <RegionEU433NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8015bbc:	2217      	movs	r2, #23
 8015bbe:	18bb      	adds	r3, r7, r2
 8015bc0:	18ba      	adds	r2, r7, r2
 8015bc2:	7812      	ldrb	r2, [r2, #0]
 8015bc4:	2103      	movs	r1, #3
 8015bc6:	438a      	bics	r2, r1
 8015bc8:	701a      	strb	r2, [r3, #0]
                break;
 8015bca:	e000      	b.n	8015bce <RegionEU433NewChannelReq+0xc6>
                break;
 8015bcc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8015bce:	2317      	movs	r3, #23
 8015bd0:	18fb      	adds	r3, r7, r3
 8015bd2:	781b      	ldrb	r3, [r3, #0]
}
 8015bd4:	0018      	movs	r0, r3
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	b006      	add	sp, #24
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b082      	sub	sp, #8
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
    return -1;
 8015be4:	2301      	movs	r3, #1
 8015be6:	425b      	negs	r3, r3
}
 8015be8:	0018      	movs	r0, r3
 8015bea:	46bd      	mov	sp, r7
 8015bec:	b002      	add	sp, #8
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <RegionEU433DlChannelReq>:

uint8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015bf8:	230f      	movs	r3, #15
 8015bfa:	18fb      	adds	r3, r7, r3
 8015bfc:	2203      	movs	r2, #3
 8015bfe:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	0018      	movs	r0, r3
 8015c06:	f7ff f88b 	bl	8014d20 <VerifyRfFreq>
 8015c0a:	0003      	movs	r3, r0
 8015c0c:	001a      	movs	r2, r3
 8015c0e:	2301      	movs	r3, #1
 8015c10:	4053      	eors	r3, r2
 8015c12:	b2db      	uxtb	r3, r3
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d006      	beq.n	8015c26 <RegionEU433DlChannelReq+0x36>
    {
        status &= 0xFE;
 8015c18:	220f      	movs	r2, #15
 8015c1a:	18bb      	adds	r3, r7, r2
 8015c1c:	18ba      	adds	r2, r7, r2
 8015c1e:	7812      	ldrb	r2, [r2, #0]
 8015c20:	2101      	movs	r1, #1
 8015c22:	438a      	bics	r2, r1
 8015c24:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	0019      	movs	r1, r3
 8015c2c:	4a13      	ldr	r2, [pc, #76]	; (8015c7c <RegionEU433DlChannelReq+0x8c>)
 8015c2e:	000b      	movs	r3, r1
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	185b      	adds	r3, r3, r1
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	589b      	ldr	r3, [r3, r2]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <RegionEU433DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8015c3c:	220f      	movs	r2, #15
 8015c3e:	18bb      	adds	r3, r7, r2
 8015c40:	18ba      	adds	r2, r7, r2
 8015c42:	7812      	ldrb	r2, [r2, #0]
 8015c44:	2102      	movs	r1, #2
 8015c46:	438a      	bics	r2, r1
 8015c48:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015c4a:	230f      	movs	r3, #15
 8015c4c:	18fb      	adds	r3, r7, r3
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	2b03      	cmp	r3, #3
 8015c52:	d10c      	bne.n	8015c6e <RegionEU433DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	0018      	movs	r0, r3
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	685a      	ldr	r2, [r3, #4]
 8015c5e:	4907      	ldr	r1, [pc, #28]	; (8015c7c <RegionEU433DlChannelReq+0x8c>)
 8015c60:	0003      	movs	r3, r0
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	181b      	adds	r3, r3, r0
 8015c66:	009b      	lsls	r3, r3, #2
 8015c68:	18cb      	adds	r3, r1, r3
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	601a      	str	r2, [r3, #0]
    }

    return status;
 8015c6e:	230f      	movs	r3, #15
 8015c70:	18fb      	adds	r3, r7, r3
 8015c72:	781b      	ldrb	r3, [r3, #0]
}
 8015c74:	0018      	movs	r0, r3
 8015c76:	46bd      	mov	sp, r7
 8015c78:	b004      	add	sp, #16
 8015c7a:	bd80      	pop	{r7, pc}
 8015c7c:	200015a0 	.word	0x200015a0

08015c80 <RegionEU433CalcBackOff>:
{
    return currentDr;
}

void RegionEU433CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b088      	sub	sp, #32
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8015c88:	210c      	movs	r1, #12
 8015c8a:	187b      	adds	r3, r7, r1
 8015c8c:	4a12      	ldr	r2, [pc, #72]	; (8015cd8 <RegionEU433CalcBackOff+0x58>)
 8015c8e:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8015c90:	187b      	adds	r3, r7, r1
 8015c92:	4a12      	ldr	r2, [pc, #72]	; (8015cdc <RegionEU433CalcBackOff+0x5c>)
 8015c94:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	785a      	ldrb	r2, [r3, #1]
 8015c9a:	187b      	adds	r3, r7, r1
 8015c9c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	781a      	ldrb	r2, [r3, #0]
 8015ca2:	187b      	adds	r3, r7, r1
 8015ca4:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	789a      	ldrb	r2, [r3, #2]
 8015caa:	187b      	adds	r3, r7, r1
 8015cac:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	78da      	ldrb	r2, [r3, #3]
 8015cb2:	187b      	adds	r3, r7, r1
 8015cb4:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	685a      	ldr	r2, [r3, #4]
 8015cba:	187b      	adds	r3, r7, r1
 8015cbc:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	689a      	ldr	r2, [r3, #8]
 8015cc2:	187b      	adds	r3, r7, r1
 8015cc4:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8015cc6:	187b      	adds	r3, r7, r1
 8015cc8:	0018      	movs	r0, r3
 8015cca:	f7fe ff2d 	bl	8014b28 <RegionCommonCalcBackOff>
}
 8015cce:	46c0      	nop			; (mov r8, r8)
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	b008      	add	sp, #32
 8015cd4:	bd80      	pop	{r7, pc}
 8015cd6:	46c0      	nop			; (mov r8, r8)
 8015cd8:	200015a0 	.word	0x200015a0
 8015cdc:	20001660 	.word	0x20001660

08015ce0 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015ce0:	b5b0      	push	{r4, r5, r7, lr}
 8015ce2:	b090      	sub	sp, #64	; 0x40
 8015ce4:	af04      	add	r7, sp, #16
 8015ce6:	60f8      	str	r0, [r7, #12]
 8015ce8:	60b9      	str	r1, [r7, #8]
 8015cea:	607a      	str	r2, [r7, #4]
 8015cec:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8015cee:	232f      	movs	r3, #47	; 0x2f
 8015cf0:	18fb      	adds	r3, r7, r3
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8015cf6:	2327      	movs	r3, #39	; 0x27
 8015cf8:	18fb      	adds	r3, r7, r3
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 8015cfe:	2314      	movs	r3, #20
 8015d00:	18fb      	adds	r3, r7, r3
 8015d02:	0018      	movs	r0, r3
 8015d04:	2310      	movs	r3, #16
 8015d06:	001a      	movs	r2, r3
 8015d08:	2100      	movs	r1, #0
 8015d0a:	f010 f8fd 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8015d12:	4b42      	ldr	r3, [pc, #264]	; (8015e1c <RegionEU433NextChannel+0x13c>)
 8015d14:	2201      	movs	r2, #1
 8015d16:	2100      	movs	r1, #0
 8015d18:	0018      	movs	r0, r3
 8015d1a:	f7fe fb85 	bl	8014428 <RegionCommonCountChannels>
 8015d1e:	1e03      	subs	r3, r0, #0
 8015d20:	d108      	bne.n	8015d34 <RegionEU433NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015d22:	4b3f      	ldr	r3, [pc, #252]	; (8015e20 <RegionEU433NextChannel+0x140>)
 8015d24:	22d0      	movs	r2, #208	; 0xd0
 8015d26:	5a9b      	ldrh	r3, [r3, r2]
 8015d28:	2207      	movs	r2, #7
 8015d2a:	4313      	orrs	r3, r2
 8015d2c:	b299      	uxth	r1, r3
 8015d2e:	4b3c      	ldr	r3, [pc, #240]	; (8015e20 <RegionEU433NextChannel+0x140>)
 8015d30:	22d0      	movs	r2, #208	; 0xd0
 8015d32:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681c      	ldr	r4, [r3, #0]
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	685b      	ldr	r3, [r3, #4]
 8015d3c:	0018      	movs	r0, r3
 8015d3e:	f006 ff7a 	bl	801cc36 <TimerGetElapsedTime>
 8015d42:	0003      	movs	r3, r0
 8015d44:	429c      	cmp	r4, r3
 8015d46:	d824      	bhi.n	8015d92 <RegionEU433NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU433_MAX_NB_BANDS );
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	7a58      	ldrb	r0, [r3, #9]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	7a99      	ldrb	r1, [r3, #10]
 8015d56:	4a33      	ldr	r2, [pc, #204]	; (8015e24 <RegionEU433NextChannel+0x144>)
 8015d58:	2301      	movs	r3, #1
 8015d5a:	f7fe fbf0 	bl	801453e <RegionCommonUpdateBandTimeOff>
 8015d5e:	0003      	movs	r3, r0
 8015d60:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	7a58      	ldrb	r0, [r3, #9]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	7a1b      	ldrb	r3, [r3, #8]
 8015d6a:	b25b      	sxtb	r3, r3
 8015d6c:	b2d9      	uxtb	r1, r3
 8015d6e:	232f      	movs	r3, #47	; 0x2f
 8015d70:	18fc      	adds	r4, r7, r3
 8015d72:	4d2b      	ldr	r5, [pc, #172]	; (8015e20 <RegionEU433NextChannel+0x140>)
 8015d74:	4a29      	ldr	r2, [pc, #164]	; (8015e1c <RegionEU433NextChannel+0x13c>)
 8015d76:	2327      	movs	r3, #39	; 0x27
 8015d78:	18fb      	adds	r3, r7, r3
 8015d7a:	9302      	str	r3, [sp, #8]
 8015d7c:	2314      	movs	r3, #20
 8015d7e:	18fb      	adds	r3, r7, r3
 8015d80:	9301      	str	r3, [sp, #4]
 8015d82:	4b28      	ldr	r3, [pc, #160]	; (8015e24 <RegionEU433NextChannel+0x144>)
 8015d84:	9300      	str	r3, [sp, #0]
 8015d86:	002b      	movs	r3, r5
 8015d88:	f7fe fff2 	bl	8014d70 <CountNbOfEnabledChannels>
 8015d8c:	0003      	movs	r3, r0
 8015d8e:	7023      	strb	r3, [r4, #0]
 8015d90:	e010      	b.n	8015db4 <RegionEU433NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8015d92:	2127      	movs	r1, #39	; 0x27
 8015d94:	187b      	adds	r3, r7, r1
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	b2da      	uxtb	r2, r3
 8015d9c:	187b      	adds	r3, r7, r1
 8015d9e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	681c      	ldr	r4, [r3, #0]
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	0018      	movs	r0, r3
 8015daa:	f006 ff44 	bl	801cc36 <TimerGetElapsedTime>
 8015dae:	0003      	movs	r3, r0
 8015db0:	1ae3      	subs	r3, r4, r3
 8015db2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8015db4:	232f      	movs	r3, #47	; 0x2f
 8015db6:	18fb      	adds	r3, r7, r3
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d012      	beq.n	8015de4 <RegionEU433NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015dbe:	232f      	movs	r3, #47	; 0x2f
 8015dc0:	18fb      	adds	r3, r7, r3
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	3b01      	subs	r3, #1
 8015dc6:	0019      	movs	r1, r3
 8015dc8:	2000      	movs	r0, #0
 8015dca:	f006 ff5d 	bl	801cc88 <randr>
 8015dce:	0002      	movs	r2, r0
 8015dd0:	2314      	movs	r3, #20
 8015dd2:	18fb      	adds	r3, r7, r3
 8015dd4:	5c9a      	ldrb	r2, [r3, r2]
 8015dd6:	68bb      	ldr	r3, [r7, #8]
 8015dd8:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	2200      	movs	r2, #0
 8015dde:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015de0:	2300      	movs	r3, #0
 8015de2:	e016      	b.n	8015e12 <RegionEU433NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 8015de4:	2327      	movs	r3, #39	; 0x27
 8015de6:	18fb      	adds	r3, r7, r3
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d004      	beq.n	8015df8 <RegionEU433NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015df2:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015df4:	230b      	movs	r3, #11
 8015df6:	e00c      	b.n	8015e12 <RegionEU433NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015df8:	4b09      	ldr	r3, [pc, #36]	; (8015e20 <RegionEU433NextChannel+0x140>)
 8015dfa:	22d0      	movs	r2, #208	; 0xd0
 8015dfc:	5a9b      	ldrh	r3, [r3, r2]
 8015dfe:	2207      	movs	r2, #7
 8015e00:	4313      	orrs	r3, r2
 8015e02:	b299      	uxth	r1, r3
 8015e04:	4b06      	ldr	r3, [pc, #24]	; (8015e20 <RegionEU433NextChannel+0x140>)
 8015e06:	22d0      	movs	r2, #208	; 0xd0
 8015e08:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015e10:	230c      	movs	r3, #12
    }
}
 8015e12:	0018      	movs	r0, r3
 8015e14:	46bd      	mov	sp, r7
 8015e16:	b00c      	add	sp, #48	; 0x30
 8015e18:	bdb0      	pop	{r4, r5, r7, pc}
 8015e1a:	46c0      	nop			; (mov r8, r8)
 8015e1c:	20001670 	.word	0x20001670
 8015e20:	200015a0 	.word	0x200015a0
 8015e24:	20001660 	.word	0x20001660

08015e28 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015e28:	b590      	push	{r4, r7, lr}
 8015e2a:	b085      	sub	sp, #20
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8015e30:	230f      	movs	r3, #15
 8015e32:	18fb      	adds	r3, r7, r3
 8015e34:	2200      	movs	r2, #0
 8015e36:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8015e38:	230e      	movs	r3, #14
 8015e3a:	18fb      	adds	r3, r7, r3
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8015e40:	210d      	movs	r1, #13
 8015e42:	187b      	adds	r3, r7, r1
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	7912      	ldrb	r2, [r2, #4]
 8015e48:	701a      	strb	r2, [r3, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 8015e4a:	187b      	adds	r3, r7, r1
 8015e4c:	781b      	ldrb	r3, [r3, #0]
 8015e4e:	2b02      	cmp	r3, #2
 8015e50:	d801      	bhi.n	8015e56 <RegionEU433ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015e52:	2306      	movs	r3, #6
 8015e54:	e09c      	b.n	8015f90 <RegionEU433ChannelAdd+0x168>
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 8015e56:	230d      	movs	r3, #13
 8015e58:	18fb      	adds	r3, r7, r3
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	2b0f      	cmp	r3, #15
 8015e5e:	d901      	bls.n	8015e64 <RegionEU433ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e60:	2303      	movs	r3, #3
 8015e62:	e095      	b.n	8015f90 <RegionEU433ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	7a1b      	ldrb	r3, [r3, #8]
 8015e6a:	011b      	lsls	r3, r3, #4
 8015e6c:	b25b      	sxtb	r3, r3
 8015e6e:	111b      	asrs	r3, r3, #4
 8015e70:	b25b      	sxtb	r3, r3
 8015e72:	2207      	movs	r2, #7
 8015e74:	2100      	movs	r1, #0
 8015e76:	0018      	movs	r0, r3
 8015e78:	f7fe fa6e 	bl	8014358 <RegionCommonValueInRange>
 8015e7c:	1e03      	subs	r3, r0, #0
 8015e7e:	d103      	bne.n	8015e88 <RegionEU433ChannelAdd+0x60>
    {
        drInvalid = true;
 8015e80:	230f      	movs	r3, #15
 8015e82:	18fb      	adds	r3, r7, r3
 8015e84:	2201      	movs	r2, #1
 8015e86:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	7a1b      	ldrb	r3, [r3, #8]
 8015e8e:	b25b      	sxtb	r3, r3
 8015e90:	111b      	asrs	r3, r3, #4
 8015e92:	b25b      	sxtb	r3, r3
 8015e94:	2207      	movs	r2, #7
 8015e96:	2100      	movs	r1, #0
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f7fe fa5d 	bl	8014358 <RegionCommonValueInRange>
 8015e9e:	1e03      	subs	r3, r0, #0
 8015ea0:	d103      	bne.n	8015eaa <RegionEU433ChannelAdd+0x82>
    {
        drInvalid = true;
 8015ea2:	230f      	movs	r3, #15
 8015ea4:	18fb      	adds	r3, r7, r3
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	7a1b      	ldrb	r3, [r3, #8]
 8015eb0:	011b      	lsls	r3, r3, #4
 8015eb2:	b25b      	sxtb	r3, r3
 8015eb4:	111b      	asrs	r3, r3, #4
 8015eb6:	b25a      	sxtb	r2, r3
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	7a1b      	ldrb	r3, [r3, #8]
 8015ebe:	b25b      	sxtb	r3, r3
 8015ec0:	111b      	asrs	r3, r3, #4
 8015ec2:	b25b      	sxtb	r3, r3
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	dd03      	ble.n	8015ed0 <RegionEU433ChannelAdd+0xa8>
    {
        drInvalid = true;
 8015ec8:	230f      	movs	r3, #15
 8015eca:	18fb      	adds	r3, r7, r3
 8015ecc:	2201      	movs	r2, #1
 8015ece:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8015ed0:	230e      	movs	r3, #14
 8015ed2:	18fb      	adds	r3, r7, r3
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	2201      	movs	r2, #1
 8015ed8:	4053      	eors	r3, r2
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d010      	beq.n	8015f02 <RegionEU433ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	0018      	movs	r0, r3
 8015ee8:	f7fe ff1a 	bl	8014d20 <VerifyRfFreq>
 8015eec:	0003      	movs	r3, r0
 8015eee:	001a      	movs	r2, r3
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	4053      	eors	r3, r2
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d003      	beq.n	8015f02 <RegionEU433ChannelAdd+0xda>
        {
            freqInvalid = true;
 8015efa:	230e      	movs	r3, #14
 8015efc:	18fb      	adds	r3, r7, r3
 8015efe:	2201      	movs	r2, #1
 8015f00:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015f02:	230f      	movs	r3, #15
 8015f04:	18fb      	adds	r3, r7, r3
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d006      	beq.n	8015f1a <RegionEU433ChannelAdd+0xf2>
 8015f0c:	230e      	movs	r3, #14
 8015f0e:	18fb      	adds	r3, r7, r3
 8015f10:	781b      	ldrb	r3, [r3, #0]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d001      	beq.n	8015f1a <RegionEU433ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015f16:	2306      	movs	r3, #6
 8015f18:	e03a      	b.n	8015f90 <RegionEU433ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8015f1a:	230f      	movs	r3, #15
 8015f1c:	18fb      	adds	r3, r7, r3
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d001      	beq.n	8015f28 <RegionEU433ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015f24:	2305      	movs	r3, #5
 8015f26:	e033      	b.n	8015f90 <RegionEU433ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8015f28:	230e      	movs	r3, #14
 8015f2a:	18fb      	adds	r3, r7, r3
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d001      	beq.n	8015f36 <RegionEU433ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015f32:	2304      	movs	r3, #4
 8015f34:	e02c      	b.n	8015f90 <RegionEU433ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8015f36:	200d      	movs	r0, #13
 8015f38:	0004      	movs	r4, r0
 8015f3a:	183b      	adds	r3, r7, r0
 8015f3c:	781a      	ldrb	r2, [r3, #0]
 8015f3e:	0013      	movs	r3, r2
 8015f40:	005b      	lsls	r3, r3, #1
 8015f42:	189b      	adds	r3, r3, r2
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	4a14      	ldr	r2, [pc, #80]	; (8015f98 <RegionEU433ChannelAdd+0x170>)
 8015f48:	1898      	adds	r0, r3, r2
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	220c      	movs	r2, #12
 8015f50:	0019      	movs	r1, r3
 8015f52:	f006 feaf 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8015f56:	0020      	movs	r0, r4
 8015f58:	183b      	adds	r3, r7, r0
 8015f5a:	781a      	ldrb	r2, [r3, #0]
 8015f5c:	490e      	ldr	r1, [pc, #56]	; (8015f98 <RegionEU433ChannelAdd+0x170>)
 8015f5e:	0013      	movs	r3, r2
 8015f60:	005b      	lsls	r3, r3, #1
 8015f62:	189b      	adds	r3, r3, r2
 8015f64:	009b      	lsls	r3, r3, #2
 8015f66:	18cb      	adds	r3, r1, r3
 8015f68:	3309      	adds	r3, #9
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8015f6e:	4b0a      	ldr	r3, [pc, #40]	; (8015f98 <RegionEU433ChannelAdd+0x170>)
 8015f70:	22d0      	movs	r2, #208	; 0xd0
 8015f72:	5a9b      	ldrh	r3, [r3, r2]
 8015f74:	b21a      	sxth	r2, r3
 8015f76:	183b      	adds	r3, r7, r0
 8015f78:	781b      	ldrb	r3, [r3, #0]
 8015f7a:	2101      	movs	r1, #1
 8015f7c:	4099      	lsls	r1, r3
 8015f7e:	000b      	movs	r3, r1
 8015f80:	b21b      	sxth	r3, r3
 8015f82:	4313      	orrs	r3, r2
 8015f84:	b21b      	sxth	r3, r3
 8015f86:	b299      	uxth	r1, r3
 8015f88:	4b03      	ldr	r3, [pc, #12]	; (8015f98 <RegionEU433ChannelAdd+0x170>)
 8015f8a:	22d0      	movs	r2, #208	; 0xd0
 8015f8c:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8015f8e:	2300      	movs	r3, #0
}
 8015f90:	0018      	movs	r0, r3
 8015f92:	46bd      	mov	sp, r7
 8015f94:	b005      	add	sp, #20
 8015f96:	bd90      	pop	{r4, r7, pc}
 8015f98:	200015a0 	.word	0x200015a0

08015f9c <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015f9c:	b590      	push	{r4, r7, lr}
 8015f9e:	b085      	sub	sp, #20
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8015fa4:	210f      	movs	r1, #15
 8015fa6:	187b      	adds	r3, r7, r1
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	7812      	ldrb	r2, [r2, #0]
 8015fac:	701a      	strb	r2, [r3, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 8015fae:	187b      	adds	r3, r7, r1
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	2b02      	cmp	r3, #2
 8015fb4:	d801      	bhi.n	8015fba <RegionEU433ChannelsRemove+0x1e>
    {
        return false;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	e015      	b.n	8015fe6 <RegionEU433ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015fba:	240f      	movs	r4, #15
 8015fbc:	193b      	adds	r3, r7, r4
 8015fbe:	781a      	ldrb	r2, [r3, #0]
 8015fc0:	490b      	ldr	r1, [pc, #44]	; (8015ff0 <RegionEU433ChannelsRemove+0x54>)
 8015fc2:	0013      	movs	r3, r2
 8015fc4:	005b      	lsls	r3, r3, #1
 8015fc6:	189b      	adds	r3, r3, r2
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	18cb      	adds	r3, r1, r3
 8015fcc:	220c      	movs	r2, #12
 8015fce:	2100      	movs	r1, #0
 8015fd0:	0018      	movs	r0, r3
 8015fd2:	f00f ff99 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 8015fd6:	193b      	adds	r3, r7, r4
 8015fd8:	7819      	ldrb	r1, [r3, #0]
 8015fda:	4b06      	ldr	r3, [pc, #24]	; (8015ff4 <RegionEU433ChannelsRemove+0x58>)
 8015fdc:	2210      	movs	r2, #16
 8015fde:	0018      	movs	r0, r3
 8015fe0:	f7fe f9e0 	bl	80143a4 <RegionCommonChanDisable>
 8015fe4:	0003      	movs	r3, r0
}
 8015fe6:	0018      	movs	r0, r3
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	b005      	add	sp, #20
 8015fec:	bd90      	pop	{r4, r7, pc}
 8015fee:	46c0      	nop			; (mov r8, r8)
 8015ff0:	200015a0 	.word	0x200015a0
 8015ff4:	20001670 	.word	0x20001670

08015ff8 <RegionEU433ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015ff8:	b590      	push	{r4, r7, lr}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	0004      	movs	r4, r0
 8016000:	0008      	movs	r0, r1
 8016002:	0011      	movs	r1, r2
 8016004:	1dfb      	adds	r3, r7, #7
 8016006:	1c22      	adds	r2, r4, #0
 8016008:	701a      	strb	r2, [r3, #0]
 801600a:	1dbb      	adds	r3, r7, #6
 801600c:	1c02      	adds	r2, r0, #0
 801600e:	701a      	strb	r2, [r3, #0]
 8016010:	1d7b      	adds	r3, r7, #5
 8016012:	1c0a      	adds	r2, r1, #0
 8016014:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8016016:	1dbb      	adds	r3, r7, #6
 8016018:	781a      	ldrb	r2, [r3, #0]
 801601a:	1d7b      	adds	r3, r7, #5
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	1ad3      	subs	r3, r2, r3
 8016020:	b2da      	uxtb	r2, r3
 8016022:	210f      	movs	r1, #15
 8016024:	187b      	adds	r3, r7, r1
 8016026:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8016028:	187b      	adds	r3, r7, r1
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	2b7f      	cmp	r3, #127	; 0x7f
 801602e:	d903      	bls.n	8016038 <RegionEU433ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8016030:	230f      	movs	r3, #15
 8016032:	18fb      	adds	r3, r7, r3
 8016034:	2200      	movs	r2, #0
 8016036:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8016038:	230f      	movs	r3, #15
 801603a:	18fb      	adds	r3, r7, r3
 801603c:	781b      	ldrb	r3, [r3, #0]
}
 801603e:	0018      	movs	r0, r3
 8016040:	46bd      	mov	sp, r7
 8016042:	b005      	add	sp, #20
 8016044:	bd90      	pop	{r4, r7, pc}

08016046 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8016046:	b580      	push	{r7, lr}
 8016048:	b084      	sub	sp, #16
 801604a:	af00      	add	r7, sp, #0
 801604c:	0002      	movs	r2, r0
 801604e:	1dfb      	adds	r3, r7, #7
 8016050:	701a      	strb	r2, [r3, #0]
 8016052:	1dbb      	adds	r3, r7, #6
 8016054:	1c0a      	adds	r2, r1, #0
 8016056:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8016058:	230f      	movs	r3, #15
 801605a:	18fb      	adds	r3, r7, r3
 801605c:	2200      	movs	r2, #0
 801605e:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8016060:	1dfa      	adds	r2, r7, #7
 8016062:	1dbb      	adds	r3, r7, #6
 8016064:	7812      	ldrb	r2, [r2, #0]
 8016066:	b252      	sxtb	r2, r2
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	b25b      	sxtb	r3, r3
 801606c:	429a      	cmp	r2, r3
 801606e:	d105      	bne.n	801607c <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8016070:	230f      	movs	r3, #15
 8016072:	18fb      	adds	r3, r7, r3
 8016074:	1dba      	adds	r2, r7, #6
 8016076:	7812      	ldrb	r2, [r2, #0]
 8016078:	701a      	strb	r2, [r3, #0]
 801607a:	e005      	b.n	8016088 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 801607c:	1dfb      	adds	r3, r7, #7
 801607e:	781a      	ldrb	r2, [r3, #0]
 8016080:	230f      	movs	r3, #15
 8016082:	18fb      	adds	r3, r7, r3
 8016084:	3a01      	subs	r2, #1
 8016086:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8016088:	230f      	movs	r3, #15
 801608a:	18fb      	adds	r3, r7, r3
 801608c:	781b      	ldrb	r3, [r3, #0]
 801608e:	b25b      	sxtb	r3, r3
}
 8016090:	0018      	movs	r0, r3
 8016092:	46bd      	mov	sp, r7
 8016094:	b004      	add	sp, #16
 8016096:	bd80      	pop	{r7, pc}

08016098 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b082      	sub	sp, #8
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80160a0:	4b09      	ldr	r3, [pc, #36]	; (80160c8 <GetBandwidth+0x30>)
 80160a2:	687a      	ldr	r2, [r7, #4]
 80160a4:	0092      	lsls	r2, r2, #2
 80160a6:	58d3      	ldr	r3, [r2, r3]
 80160a8:	4a08      	ldr	r2, [pc, #32]	; (80160cc <GetBandwidth+0x34>)
 80160aa:	4293      	cmp	r3, r2
 80160ac:	d004      	beq.n	80160b8 <GetBandwidth+0x20>
 80160ae:	4a08      	ldr	r2, [pc, #32]	; (80160d0 <GetBandwidth+0x38>)
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d003      	beq.n	80160bc <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80160b4:	2300      	movs	r3, #0
 80160b6:	e002      	b.n	80160be <GetBandwidth+0x26>
        case 250000:
            return 1;
 80160b8:	2301      	movs	r3, #1
 80160ba:	e000      	b.n	80160be <GetBandwidth+0x26>
        case 500000:
            return 2;
 80160bc:	2302      	movs	r3, #2
    }
}
 80160be:	0018      	movs	r0, r3
 80160c0:	46bd      	mov	sp, r7
 80160c2:	b002      	add	sp, #8
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	46c0      	nop			; (mov r8, r8)
 80160c8:	08028e64 	.word	0x08028e64
 80160cc:	0003d090 	.word	0x0003d090
 80160d0:	0007a120 	.word	0x0007a120

080160d4 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80160d4:	b590      	push	{r4, r7, lr}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	0004      	movs	r4, r0
 80160dc:	0008      	movs	r0, r1
 80160de:	0011      	movs	r1, r2
 80160e0:	603b      	str	r3, [r7, #0]
 80160e2:	1dfb      	adds	r3, r7, #7
 80160e4:	1c22      	adds	r2, r4, #0
 80160e6:	701a      	strb	r2, [r3, #0]
 80160e8:	1dbb      	adds	r3, r7, #6
 80160ea:	1c02      	adds	r2, r0, #0
 80160ec:	701a      	strb	r2, [r3, #0]
 80160ee:	1d7b      	adds	r3, r7, #5
 80160f0:	1c0a      	adds	r2, r1, #0
 80160f2:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80160f4:	210f      	movs	r1, #15
 80160f6:	187b      	adds	r3, r7, r1
 80160f8:	1dfa      	adds	r2, r7, #7
 80160fa:	7812      	ldrb	r2, [r2, #0]
 80160fc:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80160fe:	187a      	adds	r2, r7, r1
 8016100:	1dbb      	adds	r3, r7, #6
 8016102:	1df9      	adds	r1, r7, #7
 8016104:	780c      	ldrb	r4, [r1, #0]
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	b258      	sxtb	r0, r3
 801610a:	b261      	sxtb	r1, r4
 801610c:	4288      	cmp	r0, r1
 801610e:	da00      	bge.n	8016112 <LimitTxPower+0x3e>
 8016110:	1c23      	adds	r3, r4, #0
 8016112:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8016114:	230f      	movs	r3, #15
 8016116:	18fb      	adds	r3, r7, r3
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	b25b      	sxtb	r3, r3
}
 801611c:	0018      	movs	r0, r3
 801611e:	46bd      	mov	sp, r7
 8016120:	b005      	add	sp, #20
 8016122:	bd90      	pop	{r4, r7, pc}

08016124 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801612e:	4b2e      	ldr	r3, [pc, #184]	; (80161e8 <VerifyRfFreq+0xc4>)
 8016130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016132:	687a      	ldr	r2, [r7, #4]
 8016134:	0010      	movs	r0, r2
 8016136:	4798      	blx	r3
 8016138:	0003      	movs	r3, r0
 801613a:	001a      	movs	r2, r3
 801613c:	2301      	movs	r3, #1
 801613e:	4053      	eors	r3, r2
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b00      	cmp	r3, #0
 8016144:	d001      	beq.n	801614a <VerifyRfFreq+0x26>
    {
        return false;
 8016146:	2300      	movs	r3, #0
 8016148:	e04a      	b.n	80161e0 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	4a27      	ldr	r2, [pc, #156]	; (80161ec <VerifyRfFreq+0xc8>)
 801614e:	4293      	cmp	r3, r2
 8016150:	d907      	bls.n	8016162 <VerifyRfFreq+0x3e>
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	4a26      	ldr	r2, [pc, #152]	; (80161f0 <VerifyRfFreq+0xcc>)
 8016156:	4293      	cmp	r3, r2
 8016158:	d803      	bhi.n	8016162 <VerifyRfFreq+0x3e>
    {
        *band = 2;
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	2202      	movs	r2, #2
 801615e:	701a      	strb	r2, [r3, #0]
 8016160:	e03d      	b.n	80161de <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	4a22      	ldr	r2, [pc, #136]	; (80161f0 <VerifyRfFreq+0xcc>)
 8016166:	4293      	cmp	r3, r2
 8016168:	d907      	bls.n	801617a <VerifyRfFreq+0x56>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	4a21      	ldr	r2, [pc, #132]	; (80161f4 <VerifyRfFreq+0xd0>)
 801616e:	4293      	cmp	r3, r2
 8016170:	d803      	bhi.n	801617a <VerifyRfFreq+0x56>
    {
        *band = 0;
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	2200      	movs	r2, #0
 8016176:	701a      	strb	r2, [r3, #0]
 8016178:	e031      	b.n	80161de <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	4a1d      	ldr	r2, [pc, #116]	; (80161f4 <VerifyRfFreq+0xd0>)
 801617e:	4293      	cmp	r3, r2
 8016180:	d907      	bls.n	8016192 <VerifyRfFreq+0x6e>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	4a1c      	ldr	r2, [pc, #112]	; (80161f8 <VerifyRfFreq+0xd4>)
 8016186:	4293      	cmp	r3, r2
 8016188:	d803      	bhi.n	8016192 <VerifyRfFreq+0x6e>
    {
        *band = 1;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	2201      	movs	r2, #1
 801618e:	701a      	strb	r2, [r3, #0]
 8016190:	e025      	b.n	80161de <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	4a19      	ldr	r2, [pc, #100]	; (80161fc <VerifyRfFreq+0xd8>)
 8016196:	4293      	cmp	r3, r2
 8016198:	d907      	bls.n	80161aa <VerifyRfFreq+0x86>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	4a18      	ldr	r2, [pc, #96]	; (8016200 <VerifyRfFreq+0xdc>)
 801619e:	4293      	cmp	r3, r2
 80161a0:	d803      	bhi.n	80161aa <VerifyRfFreq+0x86>
    {
        *band = 2;
 80161a2:	683b      	ldr	r3, [r7, #0]
 80161a4:	2202      	movs	r2, #2
 80161a6:	701a      	strb	r2, [r3, #0]
 80161a8:	e019      	b.n	80161de <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	4a15      	ldr	r2, [pc, #84]	; (8016204 <VerifyRfFreq+0xe0>)
 80161ae:	4293      	cmp	r3, r2
 80161b0:	d907      	bls.n	80161c2 <VerifyRfFreq+0x9e>
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	4a14      	ldr	r2, [pc, #80]	; (8016208 <VerifyRfFreq+0xe4>)
 80161b6:	4293      	cmp	r3, r2
 80161b8:	d803      	bhi.n	80161c2 <VerifyRfFreq+0x9e>
    {
        *band = 3;
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	2203      	movs	r2, #3
 80161be:	701a      	strb	r2, [r3, #0]
 80161c0:	e00d      	b.n	80161de <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	4a11      	ldr	r2, [pc, #68]	; (801620c <VerifyRfFreq+0xe8>)
 80161c6:	4293      	cmp	r3, r2
 80161c8:	d907      	bls.n	80161da <VerifyRfFreq+0xb6>
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	4a10      	ldr	r2, [pc, #64]	; (8016210 <VerifyRfFreq+0xec>)
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d803      	bhi.n	80161da <VerifyRfFreq+0xb6>
    {
        *band = 4;
 80161d2:	683b      	ldr	r3, [r7, #0]
 80161d4:	2204      	movs	r2, #4
 80161d6:	701a      	strb	r2, [r3, #0]
 80161d8:	e001      	b.n	80161de <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 80161da:	2300      	movs	r3, #0
 80161dc:	e000      	b.n	80161e0 <VerifyRfFreq+0xbc>
    }
    return true;
 80161de:	2301      	movs	r3, #1
}
 80161e0:	0018      	movs	r0, r3
 80161e2:	46bd      	mov	sp, r7
 80161e4:	b002      	add	sp, #8
 80161e6:	bd80      	pop	{r7, pc}
 80161e8:	080293d8 	.word	0x080293d8
 80161ec:	337055bf 	.word	0x337055bf
 80161f0:	338eda3f 	.word	0x338eda3f
 80161f4:	33bca100 	.word	0x33bca100
 80161f8:	33c5c8c0 	.word	0x33c5c8c0
 80161fc:	33c74f5f 	.word	0x33c74f5f
 8016200:	33cef080 	.word	0x33cef080
 8016204:	33d1fdbf 	.word	0x33d1fdbf
 8016208:	33d5ce50 	.word	0x33d5ce50
 801620c:	33d6919f 	.word	0x33d6919f
 8016210:	33db2580 	.word	0x33db2580

08016214 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8016214:	b5b0      	push	{r4, r5, r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	60ba      	str	r2, [r7, #8]
 801621c:	607b      	str	r3, [r7, #4]
 801621e:	230f      	movs	r3, #15
 8016220:	18fb      	adds	r3, r7, r3
 8016222:	1c02      	adds	r2, r0, #0
 8016224:	701a      	strb	r2, [r3, #0]
 8016226:	230e      	movs	r3, #14
 8016228:	18fb      	adds	r3, r7, r3
 801622a:	1c0a      	adds	r2, r1, #0
 801622c:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801622e:	2317      	movs	r3, #23
 8016230:	18fb      	adds	r3, r7, r3
 8016232:	2200      	movs	r2, #0
 8016234:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8016236:	2316      	movs	r3, #22
 8016238:	18fb      	adds	r3, r7, r3
 801623a:	2200      	movs	r2, #0
 801623c:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 801623e:	2315      	movs	r3, #21
 8016240:	18fb      	adds	r3, r7, r3
 8016242:	2200      	movs	r2, #0
 8016244:	701a      	strb	r2, [r3, #0]
 8016246:	2314      	movs	r3, #20
 8016248:	18fb      	adds	r3, r7, r3
 801624a:	2200      	movs	r2, #0
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	e0b4      	b.n	80163ba <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016250:	2313      	movs	r3, #19
 8016252:	18fb      	adds	r3, r7, r3
 8016254:	2200      	movs	r2, #0
 8016256:	701a      	strb	r2, [r3, #0]
 8016258:	e09d      	b.n	8016396 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 801625a:	2314      	movs	r3, #20
 801625c:	18fb      	adds	r3, r7, r3
 801625e:	781b      	ldrb	r3, [r3, #0]
 8016260:	005b      	lsls	r3, r3, #1
 8016262:	68ba      	ldr	r2, [r7, #8]
 8016264:	18d3      	adds	r3, r2, r3
 8016266:	881b      	ldrh	r3, [r3, #0]
 8016268:	001a      	movs	r2, r3
 801626a:	2313      	movs	r3, #19
 801626c:	18fb      	adds	r3, r7, r3
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	411a      	asrs	r2, r3
 8016272:	0013      	movs	r3, r2
 8016274:	2201      	movs	r2, #1
 8016276:	4013      	ands	r3, r2
 8016278:	d100      	bne.n	801627c <CountNbOfEnabledChannels+0x68>
 801627a:	e086      	b.n	801638a <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 801627c:	2315      	movs	r3, #21
 801627e:	18fb      	adds	r3, r7, r3
 8016280:	781a      	ldrb	r2, [r3, #0]
 8016282:	2313      	movs	r3, #19
 8016284:	18fb      	adds	r3, r7, r3
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	18d3      	adds	r3, r2, r3
 801628a:	001a      	movs	r2, r3
 801628c:	0013      	movs	r3, r2
 801628e:	005b      	lsls	r3, r3, #1
 8016290:	189b      	adds	r3, r3, r2
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	001a      	movs	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	189b      	adds	r3, r3, r2
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d06f      	beq.n	8016380 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 80162a0:	230f      	movs	r3, #15
 80162a2:	18fb      	adds	r3, r7, r3
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	2201      	movs	r2, #1
 80162a8:	4053      	eors	r3, r2
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d008      	beq.n	80162c2 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 80162b0:	2313      	movs	r3, #19
 80162b2:	18fb      	adds	r3, r7, r3
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	2207      	movs	r2, #7
 80162b8:	411a      	asrs	r2, r3
 80162ba:	0013      	movs	r3, r2
 80162bc:	2201      	movs	r2, #1
 80162be:	4013      	ands	r3, r2
 80162c0:	d060      	beq.n	8016384 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80162c2:	230e      	movs	r3, #14
 80162c4:	18fb      	adds	r3, r7, r3
 80162c6:	2000      	movs	r0, #0
 80162c8:	5618      	ldrsb	r0, [r3, r0]
 80162ca:	2415      	movs	r4, #21
 80162cc:	193b      	adds	r3, r7, r4
 80162ce:	781a      	ldrb	r2, [r3, #0]
 80162d0:	2513      	movs	r5, #19
 80162d2:	197b      	adds	r3, r7, r5
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	18d3      	adds	r3, r2, r3
 80162d8:	001a      	movs	r2, r3
 80162da:	0013      	movs	r3, r2
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	189b      	adds	r3, r3, r2
 80162e0:	009b      	lsls	r3, r3, #2
 80162e2:	001a      	movs	r2, r3
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	189b      	adds	r3, r3, r2
 80162e8:	7a1b      	ldrb	r3, [r3, #8]
 80162ea:	011b      	lsls	r3, r3, #4
 80162ec:	b25b      	sxtb	r3, r3
 80162ee:	111b      	asrs	r3, r3, #4
 80162f0:	b25b      	sxtb	r3, r3
 80162f2:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 80162f4:	193b      	adds	r3, r7, r4
 80162f6:	781a      	ldrb	r2, [r3, #0]
 80162f8:	197b      	adds	r3, r7, r5
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	18d3      	adds	r3, r2, r3
 80162fe:	001a      	movs	r2, r3
 8016300:	0013      	movs	r3, r2
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	189b      	adds	r3, r3, r2
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	001a      	movs	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	189b      	adds	r3, r3, r2
 801630e:	7a1b      	ldrb	r3, [r3, #8]
 8016310:	b25b      	sxtb	r3, r3
 8016312:	111b      	asrs	r3, r3, #4
 8016314:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8016316:	001a      	movs	r2, r3
 8016318:	f7fe f81e 	bl	8014358 <RegionCommonValueInRange>
 801631c:	1e03      	subs	r3, r0, #0
 801631e:	d033      	beq.n	8016388 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8016320:	2315      	movs	r3, #21
 8016322:	18fb      	adds	r3, r7, r3
 8016324:	781a      	ldrb	r2, [r3, #0]
 8016326:	2313      	movs	r3, #19
 8016328:	18fb      	adds	r3, r7, r3
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	18d3      	adds	r3, r2, r3
 801632e:	001a      	movs	r2, r3
 8016330:	0013      	movs	r3, r2
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	189b      	adds	r3, r3, r2
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	001a      	movs	r2, r3
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	189b      	adds	r3, r3, r2
 801633e:	7a5b      	ldrb	r3, [r3, #9]
 8016340:	011b      	lsls	r3, r3, #4
 8016342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016344:	18d3      	adds	r3, r2, r3
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d006      	beq.n	801635a <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 801634c:	2116      	movs	r1, #22
 801634e:	187b      	adds	r3, r7, r1
 8016350:	781a      	ldrb	r2, [r3, #0]
 8016352:	187b      	adds	r3, r7, r1
 8016354:	3201      	adds	r2, #1
 8016356:	701a      	strb	r2, [r3, #0]
                    continue;
 8016358:	e017      	b.n	801638a <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 801635a:	2217      	movs	r2, #23
 801635c:	18bb      	adds	r3, r7, r2
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	18ba      	adds	r2, r7, r2
 8016362:	1c59      	adds	r1, r3, #1
 8016364:	7011      	strb	r1, [r2, #0]
 8016366:	001a      	movs	r2, r3
 8016368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801636a:	189b      	adds	r3, r3, r2
 801636c:	2215      	movs	r2, #21
 801636e:	18b9      	adds	r1, r7, r2
 8016370:	2213      	movs	r2, #19
 8016372:	18ba      	adds	r2, r7, r2
 8016374:	7809      	ldrb	r1, [r1, #0]
 8016376:	7812      	ldrb	r2, [r2, #0]
 8016378:	188a      	adds	r2, r1, r2
 801637a:	b2d2      	uxtb	r2, r2
 801637c:	701a      	strb	r2, [r3, #0]
 801637e:	e004      	b.n	801638a <CountNbOfEnabledChannels+0x176>
                    continue;
 8016380:	46c0      	nop			; (mov r8, r8)
 8016382:	e002      	b.n	801638a <CountNbOfEnabledChannels+0x176>
                        continue;
 8016384:	46c0      	nop			; (mov r8, r8)
 8016386:	e000      	b.n	801638a <CountNbOfEnabledChannels+0x176>
                    continue;
 8016388:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801638a:	2113      	movs	r1, #19
 801638c:	187b      	adds	r3, r7, r1
 801638e:	781a      	ldrb	r2, [r3, #0]
 8016390:	187b      	adds	r3, r7, r1
 8016392:	3201      	adds	r2, #1
 8016394:	701a      	strb	r2, [r3, #0]
 8016396:	2313      	movs	r3, #19
 8016398:	18fb      	adds	r3, r7, r3
 801639a:	781b      	ldrb	r3, [r3, #0]
 801639c:	2b0f      	cmp	r3, #15
 801639e:	d800      	bhi.n	80163a2 <CountNbOfEnabledChannels+0x18e>
 80163a0:	e75b      	b.n	801625a <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 80163a2:	2215      	movs	r2, #21
 80163a4:	18bb      	adds	r3, r7, r2
 80163a6:	18ba      	adds	r2, r7, r2
 80163a8:	7812      	ldrb	r2, [r2, #0]
 80163aa:	3210      	adds	r2, #16
 80163ac:	701a      	strb	r2, [r3, #0]
 80163ae:	2114      	movs	r1, #20
 80163b0:	187b      	adds	r3, r7, r1
 80163b2:	781a      	ldrb	r2, [r3, #0]
 80163b4:	187b      	adds	r3, r7, r1
 80163b6:	3201      	adds	r2, #1
 80163b8:	701a      	strb	r2, [r3, #0]
 80163ba:	2315      	movs	r3, #21
 80163bc:	18fb      	adds	r3, r7, r3
 80163be:	781b      	ldrb	r3, [r3, #0]
 80163c0:	2b0f      	cmp	r3, #15
 80163c2:	d800      	bhi.n	80163c6 <CountNbOfEnabledChannels+0x1b2>
 80163c4:	e744      	b.n	8016250 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 80163c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c8:	2216      	movs	r2, #22
 80163ca:	18ba      	adds	r2, r7, r2
 80163cc:	7812      	ldrb	r2, [r2, #0]
 80163ce:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 80163d0:	2317      	movs	r3, #23
 80163d2:	18fb      	adds	r3, r7, r3
 80163d4:	781b      	ldrb	r3, [r3, #0]
}
 80163d6:	0018      	movs	r0, r3
 80163d8:	46bd      	mov	sp, r7
 80163da:	b006      	add	sp, #24
 80163dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080163e0 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80163e8:	2308      	movs	r3, #8
 80163ea:	18fb      	adds	r3, r7, r3
 80163ec:	2200      	movs	r2, #0
 80163ee:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	2b34      	cmp	r3, #52	; 0x34
 80163f6:	d900      	bls.n	80163fa <RegionEU868GetPhyParam+0x1a>
 80163f8:	e0ce      	b.n	8016598 <RegionEU868GetPhyParam+0x1b8>
 80163fa:	009a      	lsls	r2, r3, #2
 80163fc:	4b6e      	ldr	r3, [pc, #440]	; (80165b8 <RegionEU868GetPhyParam+0x1d8>)
 80163fe:	18d3      	adds	r3, r2, r3
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016404:	2308      	movs	r3, #8
 8016406:	18fb      	adds	r3, r7, r3
 8016408:	2200      	movs	r2, #0
 801640a:	601a      	str	r2, [r3, #0]
            break;
 801640c:	e0c5      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801640e:	2308      	movs	r3, #8
 8016410:	18fb      	adds	r3, r7, r3
 8016412:	2200      	movs	r2, #0
 8016414:	601a      	str	r2, [r3, #0]
            break;
 8016416:	e0c0      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016418:	2308      	movs	r3, #8
 801641a:	18fb      	adds	r3, r7, r3
 801641c:	2200      	movs	r2, #0
 801641e:	601a      	str	r2, [r3, #0]
            break;
 8016420:	e0bb      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	785b      	ldrb	r3, [r3, #1]
 8016426:	b25b      	sxtb	r3, r3
 8016428:	2100      	movs	r1, #0
 801642a:	0018      	movs	r0, r3
 801642c:	f7ff fe0b 	bl	8016046 <GetNextLowerTxDr>
 8016430:	0003      	movs	r3, r0
 8016432:	001a      	movs	r2, r3
 8016434:	2308      	movs	r3, #8
 8016436:	18fb      	adds	r3, r7, r3
 8016438:	601a      	str	r2, [r3, #0]
            break;
 801643a:	e0ae      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801643c:	2308      	movs	r3, #8
 801643e:	18fb      	adds	r3, r7, r3
 8016440:	2200      	movs	r2, #0
 8016442:	601a      	str	r2, [r3, #0]
            break;
 8016444:	e0a9      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016446:	2308      	movs	r3, #8
 8016448:	18fb      	adds	r3, r7, r3
 801644a:	2200      	movs	r2, #0
 801644c:	601a      	str	r2, [r3, #0]
            break;
 801644e:	e0a4      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8016450:	2308      	movs	r3, #8
 8016452:	18fb      	adds	r3, r7, r3
 8016454:	2240      	movs	r2, #64	; 0x40
 8016456:	601a      	str	r2, [r3, #0]
            break;
 8016458:	e09f      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 801645a:	2308      	movs	r3, #8
 801645c:	18fb      	adds	r3, r7, r3
 801645e:	2220      	movs	r2, #32
 8016460:	601a      	str	r2, [r3, #0]
            break;
 8016462:	e09a      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	785b      	ldrb	r3, [r3, #1]
 8016468:	b25b      	sxtb	r3, r3
 801646a:	001a      	movs	r2, r3
 801646c:	4b53      	ldr	r3, [pc, #332]	; (80165bc <RegionEU868GetPhyParam+0x1dc>)
 801646e:	5c9b      	ldrb	r3, [r3, r2]
 8016470:	001a      	movs	r2, r3
 8016472:	2308      	movs	r3, #8
 8016474:	18fb      	adds	r3, r7, r3
 8016476:	601a      	str	r2, [r3, #0]
            break;
 8016478:	e08f      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	785b      	ldrb	r3, [r3, #1]
 801647e:	b25b      	sxtb	r3, r3
 8016480:	001a      	movs	r2, r3
 8016482:	4b4f      	ldr	r3, [pc, #316]	; (80165c0 <RegionEU868GetPhyParam+0x1e0>)
 8016484:	5c9b      	ldrb	r3, [r3, r2]
 8016486:	001a      	movs	r2, r3
 8016488:	2308      	movs	r3, #8
 801648a:	18fb      	adds	r3, r7, r3
 801648c:	601a      	str	r2, [r3, #0]
            break;
 801648e:	e084      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8016490:	2308      	movs	r3, #8
 8016492:	18fb      	adds	r3, r7, r3
 8016494:	2201      	movs	r2, #1
 8016496:	601a      	str	r2, [r3, #0]
            break;
 8016498:	e07f      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801649a:	2308      	movs	r3, #8
 801649c:	18fb      	adds	r3, r7, r3
 801649e:	4a49      	ldr	r2, [pc, #292]	; (80165c4 <RegionEU868GetPhyParam+0x1e4>)
 80164a0:	601a      	str	r2, [r3, #0]
            break;
 80164a2:	e07a      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 80164a4:	2308      	movs	r3, #8
 80164a6:	18fb      	adds	r3, r7, r3
 80164a8:	22fa      	movs	r2, #250	; 0xfa
 80164aa:	0092      	lsls	r2, r2, #2
 80164ac:	601a      	str	r2, [r3, #0]
            break;
 80164ae:	e074      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80164b0:	2308      	movs	r3, #8
 80164b2:	18fb      	adds	r3, r7, r3
 80164b4:	22fa      	movs	r2, #250	; 0xfa
 80164b6:	00d2      	lsls	r2, r2, #3
 80164b8:	601a      	str	r2, [r3, #0]
            break;
 80164ba:	e06e      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 80164bc:	2308      	movs	r3, #8
 80164be:	18fb      	adds	r3, r7, r3
 80164c0:	4a41      	ldr	r2, [pc, #260]	; (80165c8 <RegionEU868GetPhyParam+0x1e8>)
 80164c2:	601a      	str	r2, [r3, #0]
            break;
 80164c4:	e069      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80164c6:	2308      	movs	r3, #8
 80164c8:	18fb      	adds	r3, r7, r3
 80164ca:	4a40      	ldr	r2, [pc, #256]	; (80165cc <RegionEU868GetPhyParam+0x1ec>)
 80164cc:	601a      	str	r2, [r3, #0]
            break;
 80164ce:	e064      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80164d0:	2308      	movs	r3, #8
 80164d2:	18fb      	adds	r3, r7, r3
 80164d4:	2280      	movs	r2, #128	; 0x80
 80164d6:	01d2      	lsls	r2, r2, #7
 80164d8:	601a      	str	r2, [r3, #0]
            break;
 80164da:	e05e      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 80164dc:	23fa      	movs	r3, #250	; 0xfa
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	4a3b      	ldr	r2, [pc, #236]	; (80165d0 <RegionEU868GetPhyParam+0x1f0>)
 80164e2:	0019      	movs	r1, r3
 80164e4:	0010      	movs	r0, r2
 80164e6:	f006 fbcf 	bl	801cc88 <randr>
 80164ea:	0003      	movs	r3, r0
 80164ec:	22fa      	movs	r2, #250	; 0xfa
 80164ee:	00d2      	lsls	r2, r2, #3
 80164f0:	4694      	mov	ip, r2
 80164f2:	4463      	add	r3, ip
 80164f4:	001a      	movs	r2, r3
 80164f6:	2308      	movs	r3, #8
 80164f8:	18fb      	adds	r3, r7, r3
 80164fa:	601a      	str	r2, [r3, #0]
            break;
 80164fc:	e04d      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 80164fe:	2308      	movs	r3, #8
 8016500:	18fb      	adds	r3, r7, r3
 8016502:	2200      	movs	r2, #0
 8016504:	601a      	str	r2, [r3, #0]
            break;
 8016506:	e048      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016508:	2308      	movs	r3, #8
 801650a:	18fb      	adds	r3, r7, r3
 801650c:	4a31      	ldr	r2, [pc, #196]	; (80165d4 <RegionEU868GetPhyParam+0x1f4>)
 801650e:	601a      	str	r2, [r3, #0]
            break;
 8016510:	e043      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016512:	2308      	movs	r3, #8
 8016514:	18fb      	adds	r3, r7, r3
 8016516:	2200      	movs	r2, #0
 8016518:	601a      	str	r2, [r3, #0]
            break;
 801651a:	e03e      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801651c:	2308      	movs	r3, #8
 801651e:	18fb      	adds	r3, r7, r3
 8016520:	4a2d      	ldr	r2, [pc, #180]	; (80165d8 <RegionEU868GetPhyParam+0x1f8>)
 8016522:	601a      	str	r2, [r3, #0]
            break;
 8016524:	e039      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8016526:	2308      	movs	r3, #8
 8016528:	18fb      	adds	r3, r7, r3
 801652a:	4a2c      	ldr	r2, [pc, #176]	; (80165dc <RegionEU868GetPhyParam+0x1fc>)
 801652c:	601a      	str	r2, [r3, #0]
            break;
 801652e:	e034      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016530:	2308      	movs	r3, #8
 8016532:	18fb      	adds	r3, r7, r3
 8016534:	2210      	movs	r2, #16
 8016536:	601a      	str	r2, [r3, #0]
            break;
 8016538:	e02f      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801653a:	2308      	movs	r3, #8
 801653c:	18fb      	adds	r3, r7, r3
 801653e:	4a28      	ldr	r2, [pc, #160]	; (80165e0 <RegionEU868GetPhyParam+0x200>)
 8016540:	601a      	str	r2, [r3, #0]
            break;
 8016542:	e02a      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8016544:	2308      	movs	r3, #8
 8016546:	18fb      	adds	r3, r7, r3
 8016548:	2200      	movs	r2, #0
 801654a:	601a      	str	r2, [r3, #0]
            break;
 801654c:	e025      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801654e:	2308      	movs	r3, #8
 8016550:	18fb      	adds	r3, r7, r3
 8016552:	2283      	movs	r2, #131	; 0x83
 8016554:	05d2      	lsls	r2, r2, #23
 8016556:	601a      	str	r2, [r3, #0]
            break;
 8016558:	e01f      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801655a:	2308      	movs	r3, #8
 801655c:	18fb      	adds	r3, r7, r3
 801655e:	4a21      	ldr	r2, [pc, #132]	; (80165e4 <RegionEU868GetPhyParam+0x204>)
 8016560:	601a      	str	r2, [r3, #0]
            break;
 8016562:	e01a      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016564:	2308      	movs	r3, #8
 8016566:	18fb      	adds	r3, r7, r3
 8016568:	4a1a      	ldr	r2, [pc, #104]	; (80165d4 <RegionEU868GetPhyParam+0x1f4>)
 801656a:	601a      	str	r2, [r3, #0]
            break;
 801656c:	e015      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801656e:	2108      	movs	r1, #8
 8016570:	187b      	adds	r3, r7, r1
 8016572:	2211      	movs	r2, #17
 8016574:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016576:	187b      	adds	r3, r7, r1
 8016578:	2202      	movs	r2, #2
 801657a:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801657c:	187b      	adds	r3, r7, r1
 801657e:	2200      	movs	r2, #0
 8016580:	709a      	strb	r2, [r3, #2]
            break;
 8016582:	e00a      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016584:	2308      	movs	r3, #8
 8016586:	18fb      	adds	r3, r7, r3
 8016588:	2203      	movs	r2, #3
 801658a:	601a      	str	r2, [r3, #0]
            break;
 801658c:	e005      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801658e:	2308      	movs	r3, #8
 8016590:	18fb      	adds	r3, r7, r3
 8016592:	2203      	movs	r2, #3
 8016594:	601a      	str	r2, [r3, #0]
            break;
 8016596:	e000      	b.n	801659a <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8016598:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801659a:	210c      	movs	r1, #12
 801659c:	187b      	adds	r3, r7, r1
 801659e:	2208      	movs	r2, #8
 80165a0:	18ba      	adds	r2, r7, r2
 80165a2:	6812      	ldr	r2, [r2, #0]
 80165a4:	601a      	str	r2, [r3, #0]
 80165a6:	187b      	adds	r3, r7, r1
 80165a8:	2200      	movs	r2, #0
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	0013      	movs	r3, r2
}
 80165ae:	0018      	movs	r0, r3
 80165b0:	46bd      	mov	sp, r7
 80165b2:	b004      	add	sp, #16
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	46c0      	nop			; (mov r8, r8)
 80165b8:	08028e94 	.word	0x08028e94
 80165bc:	08028e84 	.word	0x08028e84
 80165c0:	08028e8c 	.word	0x08028e8c
 80165c4:	00000bb8 	.word	0x00000bb8
 80165c8:	00001388 	.word	0x00001388
 80165cc:	00001770 	.word	0x00001770
 80165d0:	fffffc18 	.word	0xfffffc18
 80165d4:	33d3e608 	.word	0x33d3e608
 80165d8:	20001784 	.word	0x20001784
 80165dc:	20001786 	.word	0x20001786
 80165e0:	20001674 	.word	0x20001674
 80165e4:	4009999a 	.word	0x4009999a

080165e8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	7858      	ldrb	r0, [r3, #1]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	0019      	movs	r1, r3
 80165fa:	4a0a      	ldr	r2, [pc, #40]	; (8016624 <RegionEU868SetBandTxDone+0x3c>)
 80165fc:	000b      	movs	r3, r1
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	185b      	adds	r3, r3, r1
 8016602:	009b      	lsls	r3, r3, #2
 8016604:	18d3      	adds	r3, r2, r3
 8016606:	3309      	adds	r3, #9
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	330c      	adds	r3, #12
 801660c:	011a      	lsls	r2, r3, #4
 801660e:	4b05      	ldr	r3, [pc, #20]	; (8016624 <RegionEU868SetBandTxDone+0x3c>)
 8016610:	18d1      	adds	r1, r2, r3
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	685b      	ldr	r3, [r3, #4]
 8016616:	001a      	movs	r2, r3
 8016618:	f7fd ff76 	bl	8014508 <RegionCommonSetBandTxDone>
}
 801661c:	46c0      	nop			; (mov r8, r8)
 801661e:	46bd      	mov	sp, r7
 8016620:	b002      	add	sp, #8
 8016622:	bd80      	pop	{r7, pc}
 8016624:	20001674 	.word	0x20001674

08016628 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016628:	b590      	push	{r4, r7, lr}
 801662a:	b097      	sub	sp, #92	; 0x5c
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016630:	2108      	movs	r1, #8
 8016632:	000c      	movs	r4, r1
 8016634:	187b      	adds	r3, r7, r1
 8016636:	0018      	movs	r0, r3
 8016638:	2350      	movs	r3, #80	; 0x50
 801663a:	001a      	movs	r2, r3
 801663c:	2100      	movs	r1, #0
 801663e:	f00f fc63 	bl	8025f08 <memset>
 8016642:	0021      	movs	r1, r4
 8016644:	187b      	adds	r3, r7, r1
 8016646:	2264      	movs	r2, #100	; 0x64
 8016648:	801a      	strh	r2, [r3, #0]
 801664a:	187b      	adds	r3, r7, r1
 801664c:	2264      	movs	r2, #100	; 0x64
 801664e:	821a      	strh	r2, [r3, #16]
 8016650:	187b      	adds	r3, r7, r1
 8016652:	22fa      	movs	r2, #250	; 0xfa
 8016654:	0092      	lsls	r2, r2, #2
 8016656:	841a      	strh	r2, [r3, #32]
 8016658:	187b      	adds	r3, r7, r1
 801665a:	220a      	movs	r2, #10
 801665c:	861a      	strh	r2, [r3, #48]	; 0x30
 801665e:	187b      	adds	r3, r7, r1
 8016660:	2240      	movs	r2, #64	; 0x40
 8016662:	2164      	movs	r1, #100	; 0x64
 8016664:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	791b      	ldrb	r3, [r3, #4]
 801666a:	2b01      	cmp	r3, #1
 801666c:	d032      	beq.n	80166d4 <RegionEU868InitDefaults+0xac>
 801666e:	2b02      	cmp	r3, #2
 8016670:	d023      	beq.n	80166ba <RegionEU868InitDefaults+0x92>
 8016672:	2b00      	cmp	r3, #0
 8016674:	d000      	beq.n	8016678 <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016676:	e03d      	b.n	80166f4 <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016678:	2308      	movs	r3, #8
 801667a:	18f9      	adds	r1, r7, r3
 801667c:	4b1f      	ldr	r3, [pc, #124]	; (80166fc <RegionEU868InitDefaults+0xd4>)
 801667e:	2250      	movs	r2, #80	; 0x50
 8016680:	0018      	movs	r0, r3
 8016682:	f006 fb17 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016686:	4b1e      	ldr	r3, [pc, #120]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 8016688:	4a1e      	ldr	r2, [pc, #120]	; (8016704 <RegionEU868InitDefaults+0xdc>)
 801668a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801668c:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801668e:	4b1c      	ldr	r3, [pc, #112]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 8016690:	4a1d      	ldr	r2, [pc, #116]	; (8016708 <RegionEU868InitDefaults+0xe0>)
 8016692:	330c      	adds	r3, #12
 8016694:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016696:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016698:	4b19      	ldr	r3, [pc, #100]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 801669a:	4a1c      	ldr	r2, [pc, #112]	; (801670c <RegionEU868InitDefaults+0xe4>)
 801669c:	3318      	adds	r3, #24
 801669e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80166a0:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80166a2:	4a17      	ldr	r2, [pc, #92]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 80166a4:	2389      	movs	r3, #137	; 0x89
 80166a6:	005b      	lsls	r3, r3, #1
 80166a8:	2107      	movs	r1, #7
 80166aa:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 80166ac:	4918      	ldr	r1, [pc, #96]	; (8016710 <RegionEU868InitDefaults+0xe8>)
 80166ae:	4b19      	ldr	r3, [pc, #100]	; (8016714 <RegionEU868InitDefaults+0xec>)
 80166b0:	2201      	movs	r2, #1
 80166b2:	0018      	movs	r0, r3
 80166b4:	f7fd fef9 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 80166b8:	e01c      	b.n	80166f4 <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d017      	beq.n	80166f2 <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6819      	ldr	r1, [r3, #0]
 80166c6:	238a      	movs	r3, #138	; 0x8a
 80166c8:	005a      	lsls	r2, r3, #1
 80166ca:	4b0d      	ldr	r3, [pc, #52]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 80166cc:	0018      	movs	r0, r3
 80166ce:	f006 faf1 	bl	801ccb4 <memcpy1>
            break;
 80166d2:	e00e      	b.n	80166f2 <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 80166d4:	4a0a      	ldr	r2, [pc, #40]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 80166d6:	2388      	movs	r3, #136	; 0x88
 80166d8:	005b      	lsls	r3, r3, #1
 80166da:	5ad2      	ldrh	r2, [r2, r3]
 80166dc:	4908      	ldr	r1, [pc, #32]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 80166de:	2389      	movs	r3, #137	; 0x89
 80166e0:	005b      	lsls	r3, r3, #1
 80166e2:	5acb      	ldrh	r3, [r1, r3]
 80166e4:	4313      	orrs	r3, r2
 80166e6:	b299      	uxth	r1, r3
 80166e8:	4a05      	ldr	r2, [pc, #20]	; (8016700 <RegionEU868InitDefaults+0xd8>)
 80166ea:	2388      	movs	r3, #136	; 0x88
 80166ec:	005b      	lsls	r3, r3, #1
 80166ee:	52d1      	strh	r1, [r2, r3]
            break;
 80166f0:	e000      	b.n	80166f4 <RegionEU868InitDefaults+0xcc>
            break;
 80166f2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80166f4:	46c0      	nop			; (mov r8, r8)
 80166f6:	46bd      	mov	sp, r7
 80166f8:	b017      	add	sp, #92	; 0x5c
 80166fa:	bd90      	pop	{r4, r7, pc}
 80166fc:	20001734 	.word	0x20001734
 8016700:	20001674 	.word	0x20001674
 8016704:	080275d4 	.word	0x080275d4
 8016708:	080275e0 	.word	0x080275e0
 801670c:	080275ec 	.word	0x080275ec
 8016710:	20001786 	.word	0x20001786
 8016714:	20001784 	.word	0x20001784

08016718 <RegionEU868ApplyCFList>:
            return false;
    }
}

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016718:	b590      	push	{r4, r7, lr}
 801671a:	b08b      	sub	sp, #44	; 0x2c
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016720:	2318      	movs	r3, #24
 8016722:	18fb      	adds	r3, r7, r3
 8016724:	2250      	movs	r2, #80	; 0x50
 8016726:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	791b      	ldrb	r3, [r3, #4]
 801672c:	2b10      	cmp	r3, #16
 801672e:	d000      	beq.n	8016732 <RegionEU868ApplyCFList+0x1a>
 8016730:	e07d      	b.n	801682e <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	330f      	adds	r3, #15
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d000      	beq.n	8016740 <RegionEU868ApplyCFList+0x28>
 801673e:	e078      	b.n	8016832 <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016740:	2327      	movs	r3, #39	; 0x27
 8016742:	18fb      	adds	r3, r7, r3
 8016744:	2200      	movs	r2, #0
 8016746:	701a      	strb	r2, [r3, #0]
 8016748:	2326      	movs	r3, #38	; 0x26
 801674a:	18fb      	adds	r3, r7, r3
 801674c:	2203      	movs	r2, #3
 801674e:	701a      	strb	r2, [r3, #0]
 8016750:	e067      	b.n	8016822 <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016752:	2326      	movs	r3, #38	; 0x26
 8016754:	18fb      	adds	r3, r7, r3
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	2b07      	cmp	r3, #7
 801675a:	d82e      	bhi.n	80167ba <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681a      	ldr	r2, [r3, #0]
 8016760:	2427      	movs	r4, #39	; 0x27
 8016762:	193b      	adds	r3, r7, r4
 8016764:	781b      	ldrb	r3, [r3, #0]
 8016766:	18d3      	adds	r3, r2, r3
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	001a      	movs	r2, r3
 801676c:	2018      	movs	r0, #24
 801676e:	183b      	adds	r3, r7, r0
 8016770:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016772:	183b      	adds	r3, r7, r0
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6819      	ldr	r1, [r3, #0]
 801677a:	193b      	adds	r3, r7, r4
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	3301      	adds	r3, #1
 8016780:	18cb      	adds	r3, r1, r3
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	021b      	lsls	r3, r3, #8
 8016786:	431a      	orrs	r2, r3
 8016788:	183b      	adds	r3, r7, r0
 801678a:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801678c:	183b      	adds	r3, r7, r0
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6819      	ldr	r1, [r3, #0]
 8016794:	193b      	adds	r3, r7, r4
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	3302      	adds	r3, #2
 801679a:	18cb      	adds	r3, r1, r3
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	041b      	lsls	r3, r3, #16
 80167a0:	431a      	orrs	r2, r3
 80167a2:	183b      	adds	r3, r7, r0
 80167a4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80167a6:	183b      	adds	r3, r7, r0
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2264      	movs	r2, #100	; 0x64
 80167ac:	435a      	muls	r2, r3
 80167ae:	183b      	adds	r3, r7, r0
 80167b0:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80167b2:	183b      	adds	r3, r7, r0
 80167b4:	2200      	movs	r2, #0
 80167b6:	605a      	str	r2, [r3, #4]
 80167b8:	e009      	b.n	80167ce <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80167ba:	2118      	movs	r1, #24
 80167bc:	187b      	adds	r3, r7, r1
 80167be:	2200      	movs	r2, #0
 80167c0:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80167c2:	187b      	adds	r3, r7, r1
 80167c4:	2200      	movs	r2, #0
 80167c6:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80167c8:	187b      	adds	r3, r7, r1
 80167ca:	2200      	movs	r2, #0
 80167cc:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 80167ce:	2318      	movs	r3, #24
 80167d0:	18fb      	adds	r3, r7, r3
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d00e      	beq.n	80167f6 <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 80167d8:	2110      	movs	r1, #16
 80167da:	187b      	adds	r3, r7, r1
 80167dc:	2218      	movs	r2, #24
 80167de:	18ba      	adds	r2, r7, r2
 80167e0:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 80167e2:	187b      	adds	r3, r7, r1
 80167e4:	2226      	movs	r2, #38	; 0x26
 80167e6:	18ba      	adds	r2, r7, r2
 80167e8:	7812      	ldrb	r2, [r2, #0]
 80167ea:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80167ec:	187b      	adds	r3, r7, r1
 80167ee:	0018      	movs	r0, r3
 80167f0:	f000 fd8c 	bl	801730c <RegionEU868ChannelAdd>
 80167f4:	e009      	b.n	801680a <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80167f6:	210c      	movs	r1, #12
 80167f8:	187b      	adds	r3, r7, r1
 80167fa:	2226      	movs	r2, #38	; 0x26
 80167fc:	18ba      	adds	r2, r7, r2
 80167fe:	7812      	ldrb	r2, [r2, #0]
 8016800:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8016802:	187b      	adds	r3, r7, r1
 8016804:	0018      	movs	r0, r3
 8016806:	f000 fe45 	bl	8017494 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801680a:	2227      	movs	r2, #39	; 0x27
 801680c:	18bb      	adds	r3, r7, r2
 801680e:	18ba      	adds	r2, r7, r2
 8016810:	7812      	ldrb	r2, [r2, #0]
 8016812:	3203      	adds	r2, #3
 8016814:	701a      	strb	r2, [r3, #0]
 8016816:	2126      	movs	r1, #38	; 0x26
 8016818:	187b      	adds	r3, r7, r1
 801681a:	781a      	ldrb	r2, [r3, #0]
 801681c:	187b      	adds	r3, r7, r1
 801681e:	3201      	adds	r2, #1
 8016820:	701a      	strb	r2, [r3, #0]
 8016822:	2326      	movs	r3, #38	; 0x26
 8016824:	18fb      	adds	r3, r7, r3
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	2b0f      	cmp	r3, #15
 801682a:	d992      	bls.n	8016752 <RegionEU868ApplyCFList+0x3a>
 801682c:	e002      	b.n	8016834 <RegionEU868ApplyCFList+0x11c>
        return;
 801682e:	46c0      	nop			; (mov r8, r8)
 8016830:	e000      	b.n	8016834 <RegionEU868ApplyCFList+0x11c>
        return;
 8016832:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016834:	46bd      	mov	sp, r7
 8016836:	b00b      	add	sp, #44	; 0x2c
 8016838:	bd90      	pop	{r4, r7, pc}
	...

0801683c <RegionEU868ComputeRxWindowParameters>:
    }
    return true;
}

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801683c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801683e:	b08b      	sub	sp, #44	; 0x2c
 8016840:	af04      	add	r7, sp, #16
 8016842:	60ba      	str	r2, [r7, #8]
 8016844:	607b      	str	r3, [r7, #4]
 8016846:	250f      	movs	r5, #15
 8016848:	197b      	adds	r3, r7, r5
 801684a:	1c02      	adds	r2, r0, #0
 801684c:	701a      	strb	r2, [r3, #0]
 801684e:	230e      	movs	r3, #14
 8016850:	18fb      	adds	r3, r7, r3
 8016852:	1c0a      	adds	r2, r1, #0
 8016854:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8016856:	2300      	movs	r3, #0
 8016858:	2400      	movs	r4, #0
 801685a:	613b      	str	r3, [r7, #16]
 801685c:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801685e:	197b      	adds	r3, r7, r5
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	b25a      	sxtb	r2, r3
 8016864:	2a07      	cmp	r2, #7
 8016866:	dd00      	ble.n	801686a <RegionEU868ComputeRxWindowParameters+0x2e>
 8016868:	2307      	movs	r3, #7
 801686a:	b25a      	sxtb	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	785b      	ldrb	r3, [r3, #1]
 8016874:	b25b      	sxtb	r3, r3
 8016876:	0018      	movs	r0, r3
 8016878:	f7ff fc0e 	bl	8016098 <GetBandwidth>
 801687c:	0003      	movs	r3, r0
 801687e:	b2da      	uxtb	r2, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	785b      	ldrb	r3, [r3, #1]
 8016888:	b25b      	sxtb	r3, r3
 801688a:	2b07      	cmp	r3, #7
 801688c:	d10d      	bne.n	80168aa <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	785b      	ldrb	r3, [r3, #1]
 8016892:	b25b      	sxtb	r3, r3
 8016894:	001a      	movs	r2, r3
 8016896:	4b1b      	ldr	r3, [pc, #108]	; (8016904 <RegionEU868ComputeRxWindowParameters+0xc8>)
 8016898:	5c9b      	ldrb	r3, [r3, r2]
 801689a:	0018      	movs	r0, r3
 801689c:	f7fe f86c 	bl	8014978 <RegionCommonComputeSymbolTimeFsk>
 80168a0:	0003      	movs	r3, r0
 80168a2:	000c      	movs	r4, r1
 80168a4:	613b      	str	r3, [r7, #16]
 80168a6:	617c      	str	r4, [r7, #20]
 80168a8:	e013      	b.n	80168d2 <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	785b      	ldrb	r3, [r3, #1]
 80168ae:	b25b      	sxtb	r3, r3
 80168b0:	001a      	movs	r2, r3
 80168b2:	4b14      	ldr	r3, [pc, #80]	; (8016904 <RegionEU868ComputeRxWindowParameters+0xc8>)
 80168b4:	5c98      	ldrb	r0, [r3, r2]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	785b      	ldrb	r3, [r3, #1]
 80168ba:	b25b      	sxtb	r3, r3
 80168bc:	001a      	movs	r2, r3
 80168be:	4b12      	ldr	r3, [pc, #72]	; (8016908 <RegionEU868ComputeRxWindowParameters+0xcc>)
 80168c0:	0092      	lsls	r2, r2, #2
 80168c2:	58d3      	ldr	r3, [r2, r3]
 80168c4:	0019      	movs	r1, r3
 80168c6:	f7fe f82b 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 80168ca:	0003      	movs	r3, r0
 80168cc:	000c      	movs	r4, r1
 80168ce:	613b      	str	r3, [r7, #16]
 80168d0:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80168d2:	4b0e      	ldr	r3, [pc, #56]	; (801690c <RegionEU868ComputeRxWindowParameters+0xd0>)
 80168d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80168d6:	4798      	blx	r3
 80168d8:	0006      	movs	r6, r0
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	3308      	adds	r3, #8
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	320c      	adds	r2, #12
 80168e2:	68bd      	ldr	r5, [r7, #8]
 80168e4:	210e      	movs	r1, #14
 80168e6:	1879      	adds	r1, r7, r1
 80168e8:	780c      	ldrb	r4, [r1, #0]
 80168ea:	6938      	ldr	r0, [r7, #16]
 80168ec:	6979      	ldr	r1, [r7, #20]
 80168ee:	9202      	str	r2, [sp, #8]
 80168f0:	9301      	str	r3, [sp, #4]
 80168f2:	9600      	str	r6, [sp, #0]
 80168f4:	002b      	movs	r3, r5
 80168f6:	0022      	movs	r2, r4
 80168f8:	f7fe f85a 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 80168fc:	46c0      	nop			; (mov r8, r8)
 80168fe:	46bd      	mov	sp, r7
 8016900:	b007      	add	sp, #28
 8016902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016904:	08028e5c 	.word	0x08028e5c
 8016908:	08028e64 	.word	0x08028e64
 801690c:	080293d8 	.word	0x080293d8

08016910 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016912:	b091      	sub	sp, #68	; 0x44
 8016914:	af0a      	add	r7, sp, #40	; 0x28
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801691a:	230f      	movs	r3, #15
 801691c:	18fb      	adds	r3, r7, r3
 801691e:	687a      	ldr	r2, [r7, #4]
 8016920:	7852      	ldrb	r2, [r2, #1]
 8016922:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8016924:	2316      	movs	r3, #22
 8016926:	18fb      	adds	r3, r7, r3
 8016928:	2200      	movs	r2, #0
 801692a:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801692c:	230e      	movs	r3, #14
 801692e:	18fb      	adds	r3, r7, r3
 8016930:	2200      	movs	r2, #0
 8016932:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801693a:	4b64      	ldr	r3, [pc, #400]	; (8016acc <RegionEU868RxConfig+0x1bc>)
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	4798      	blx	r3
 8016940:	1e03      	subs	r3, r0, #0
 8016942:	d001      	beq.n	8016948 <RegionEU868RxConfig+0x38>
    {
        return false;
 8016944:	2300      	movs	r3, #0
 8016946:	e0bc      	b.n	8016ac2 <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	7cdb      	ldrb	r3, [r3, #19]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d122      	bne.n	8016996 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	0019      	movs	r1, r3
 8016956:	4a5e      	ldr	r2, [pc, #376]	; (8016ad0 <RegionEU868RxConfig+0x1c0>)
 8016958:	000b      	movs	r3, r1
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	185b      	adds	r3, r3, r1
 801695e:	009b      	lsls	r3, r3, #2
 8016960:	589b      	ldr	r3, [r3, r2]
 8016962:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	781b      	ldrb	r3, [r3, #0]
 8016968:	0019      	movs	r1, r3
 801696a:	4a59      	ldr	r2, [pc, #356]	; (8016ad0 <RegionEU868RxConfig+0x1c0>)
 801696c:	000b      	movs	r3, r1
 801696e:	005b      	lsls	r3, r3, #1
 8016970:	185b      	adds	r3, r3, r1
 8016972:	009b      	lsls	r3, r3, #2
 8016974:	18d3      	adds	r3, r2, r3
 8016976:	3304      	adds	r3, #4
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d00b      	beq.n	8016996 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	0019      	movs	r1, r3
 8016984:	4a52      	ldr	r2, [pc, #328]	; (8016ad0 <RegionEU868RxConfig+0x1c0>)
 8016986:	000b      	movs	r3, r1
 8016988:	005b      	lsls	r3, r3, #1
 801698a:	185b      	adds	r3, r3, r1
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	18d3      	adds	r3, r2, r3
 8016990:	3304      	adds	r3, #4
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016996:	240f      	movs	r4, #15
 8016998:	193b      	adds	r3, r7, r4
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	b25b      	sxtb	r3, r3
 801699e:	4a4d      	ldr	r2, [pc, #308]	; (8016ad4 <RegionEU868RxConfig+0x1c4>)
 80169a0:	5cd2      	ldrb	r2, [r2, r3]
 80169a2:	230e      	movs	r3, #14
 80169a4:	18fb      	adds	r3, r7, r3
 80169a6:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80169a8:	4b48      	ldr	r3, [pc, #288]	; (8016acc <RegionEU868RxConfig+0x1bc>)
 80169aa:	695b      	ldr	r3, [r3, #20]
 80169ac:	693a      	ldr	r2, [r7, #16]
 80169ae:	0010      	movs	r0, r2
 80169b0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80169b2:	193b      	adds	r3, r7, r4
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	b25b      	sxtb	r3, r3
 80169b8:	2b07      	cmp	r3, #7
 80169ba:	d12f      	bne.n	8016a1c <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 80169bc:	2117      	movs	r1, #23
 80169be:	187b      	adds	r3, r7, r1
 80169c0:	2200      	movs	r2, #0
 80169c2:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80169c4:	4b41      	ldr	r3, [pc, #260]	; (8016acc <RegionEU868RxConfig+0x1bc>)
 80169c6:	6a1c      	ldr	r4, [r3, #32]
 80169c8:	230e      	movs	r3, #14
 80169ca:	18fb      	adds	r3, r7, r3
 80169cc:	2200      	movs	r2, #0
 80169ce:	569a      	ldrsb	r2, [r3, r2]
 80169d0:	0013      	movs	r3, r2
 80169d2:	015b      	lsls	r3, r3, #5
 80169d4:	1a9b      	subs	r3, r3, r2
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	189b      	adds	r3, r3, r2
 80169da:	00db      	lsls	r3, r3, #3
 80169dc:	001e      	movs	r6, r3
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	689b      	ldr	r3, [r3, #8]
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	7c92      	ldrb	r2, [r2, #18]
 80169e8:	4d3b      	ldr	r5, [pc, #236]	; (8016ad8 <RegionEU868RxConfig+0x1c8>)
 80169ea:	1879      	adds	r1, r7, r1
 80169ec:	7808      	ldrb	r0, [r1, #0]
 80169ee:	9209      	str	r2, [sp, #36]	; 0x24
 80169f0:	2200      	movs	r2, #0
 80169f2:	9208      	str	r2, [sp, #32]
 80169f4:	2200      	movs	r2, #0
 80169f6:	9207      	str	r2, [sp, #28]
 80169f8:	2200      	movs	r2, #0
 80169fa:	9206      	str	r2, [sp, #24]
 80169fc:	2201      	movs	r2, #1
 80169fe:	9205      	str	r2, [sp, #20]
 8016a00:	2200      	movs	r2, #0
 8016a02:	9204      	str	r2, [sp, #16]
 8016a04:	2200      	movs	r2, #0
 8016a06:	9203      	str	r2, [sp, #12]
 8016a08:	9302      	str	r3, [sp, #8]
 8016a0a:	2305      	movs	r3, #5
 8016a0c:	9301      	str	r3, [sp, #4]
 8016a0e:	4b33      	ldr	r3, [pc, #204]	; (8016adc <RegionEU868RxConfig+0x1cc>)
 8016a10:	9300      	str	r3, [sp, #0]
 8016a12:	2300      	movs	r3, #0
 8016a14:	0032      	movs	r2, r6
 8016a16:	0029      	movs	r1, r5
 8016a18:	47a0      	blx	r4
 8016a1a:	e029      	b.n	8016a70 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8016a1c:	2117      	movs	r1, #23
 8016a1e:	187b      	adds	r3, r7, r1
 8016a20:	2201      	movs	r2, #1
 8016a22:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016a24:	4b29      	ldr	r3, [pc, #164]	; (8016acc <RegionEU868RxConfig+0x1bc>)
 8016a26:	6a1c      	ldr	r4, [r3, #32]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	789b      	ldrb	r3, [r3, #2]
 8016a2c:	001e      	movs	r6, r3
 8016a2e:	230e      	movs	r3, #14
 8016a30:	18fb      	adds	r3, r7, r3
 8016a32:	2500      	movs	r5, #0
 8016a34:	575d      	ldrsb	r5, [r3, r5]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	689b      	ldr	r3, [r3, #8]
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	687a      	ldr	r2, [r7, #4]
 8016a3e:	7c92      	ldrb	r2, [r2, #18]
 8016a40:	1879      	adds	r1, r7, r1
 8016a42:	7808      	ldrb	r0, [r1, #0]
 8016a44:	9209      	str	r2, [sp, #36]	; 0x24
 8016a46:	2201      	movs	r2, #1
 8016a48:	9208      	str	r2, [sp, #32]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	9207      	str	r2, [sp, #28]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	9206      	str	r2, [sp, #24]
 8016a52:	2200      	movs	r2, #0
 8016a54:	9205      	str	r2, [sp, #20]
 8016a56:	2200      	movs	r2, #0
 8016a58:	9204      	str	r2, [sp, #16]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	9203      	str	r2, [sp, #12]
 8016a5e:	9302      	str	r3, [sp, #8]
 8016a60:	2308      	movs	r3, #8
 8016a62:	9301      	str	r3, [sp, #4]
 8016a64:	2300      	movs	r3, #0
 8016a66:	9300      	str	r3, [sp, #0]
 8016a68:	2301      	movs	r3, #1
 8016a6a:	002a      	movs	r2, r5
 8016a6c:	0031      	movs	r1, r6
 8016a6e:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	7c5b      	ldrb	r3, [r3, #17]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d009      	beq.n	8016a8c <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016a78:	230f      	movs	r3, #15
 8016a7a:	18fb      	adds	r3, r7, r3
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	569a      	ldrsb	r2, [r3, r2]
 8016a80:	2316      	movs	r3, #22
 8016a82:	18fb      	adds	r3, r7, r3
 8016a84:	4916      	ldr	r1, [pc, #88]	; (8016ae0 <RegionEU868RxConfig+0x1d0>)
 8016a86:	5c8a      	ldrb	r2, [r1, r2]
 8016a88:	701a      	strb	r2, [r3, #0]
 8016a8a:	e008      	b.n	8016a9e <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016a8c:	230f      	movs	r3, #15
 8016a8e:	18fb      	adds	r3, r7, r3
 8016a90:	2200      	movs	r2, #0
 8016a92:	569a      	ldrsb	r2, [r3, r2]
 8016a94:	2316      	movs	r3, #22
 8016a96:	18fb      	adds	r3, r7, r3
 8016a98:	4912      	ldr	r1, [pc, #72]	; (8016ae4 <RegionEU868RxConfig+0x1d4>)
 8016a9a:	5c8a      	ldrb	r2, [r1, r2]
 8016a9c:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8016a9e:	4b0b      	ldr	r3, [pc, #44]	; (8016acc <RegionEU868RxConfig+0x1bc>)
 8016aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aa2:	2216      	movs	r2, #22
 8016aa4:	18ba      	adds	r2, r7, r2
 8016aa6:	7812      	ldrb	r2, [r2, #0]
 8016aa8:	320d      	adds	r2, #13
 8016aaa:	b2d1      	uxtb	r1, r2
 8016aac:	2217      	movs	r2, #23
 8016aae:	18ba      	adds	r2, r7, r2
 8016ab0:	7812      	ldrb	r2, [r2, #0]
 8016ab2:	0010      	movs	r0, r2
 8016ab4:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	220f      	movs	r2, #15
 8016aba:	18ba      	adds	r2, r7, r2
 8016abc:	7812      	ldrb	r2, [r2, #0]
 8016abe:	701a      	strb	r2, [r3, #0]
    return true;
 8016ac0:	2301      	movs	r3, #1
}
 8016ac2:	0018      	movs	r0, r3
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	b007      	add	sp, #28
 8016ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aca:	46c0      	nop			; (mov r8, r8)
 8016acc:	080293d8 	.word	0x080293d8
 8016ad0:	20001674 	.word	0x20001674
 8016ad4:	08028e5c 	.word	0x08028e5c
 8016ad8:	0000c350 	.word	0x0000c350
 8016adc:	00014585 	.word	0x00014585
 8016ae0:	08028e8c 	.word	0x08028e8c
 8016ae4:	08028e84 	.word	0x08028e84

08016ae8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aea:	b093      	sub	sp, #76	; 0x4c
 8016aec:	af0a      	add	r7, sp, #40	; 0x28
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	785b      	ldrb	r3, [r3, #1]
 8016af8:	b25b      	sxtb	r3, r3
 8016afa:	001a      	movs	r2, r3
 8016afc:	4b60      	ldr	r3, [pc, #384]	; (8016c80 <RegionEU868TxConfig+0x198>)
 8016afe:	5c9a      	ldrb	r2, [r3, r2]
 8016b00:	231e      	movs	r3, #30
 8016b02:	18fb      	adds	r3, r7, r3
 8016b04:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2002      	movs	r0, #2
 8016b0a:	5618      	ldrsb	r0, [r3, r0]
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	0019      	movs	r1, r3
 8016b12:	4a5c      	ldr	r2, [pc, #368]	; (8016c84 <RegionEU868TxConfig+0x19c>)
 8016b14:	000b      	movs	r3, r1
 8016b16:	005b      	lsls	r3, r3, #1
 8016b18:	185b      	adds	r3, r3, r1
 8016b1a:	009b      	lsls	r3, r3, #2
 8016b1c:	18d3      	adds	r3, r2, r3
 8016b1e:	3309      	adds	r3, #9
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	4a58      	ldr	r2, [pc, #352]	; (8016c84 <RegionEU868TxConfig+0x19c>)
 8016b24:	330c      	adds	r3, #12
 8016b26:	011b      	lsls	r3, r3, #4
 8016b28:	18d3      	adds	r3, r2, r3
 8016b2a:	3302      	adds	r3, #2
 8016b2c:	2100      	movs	r1, #0
 8016b2e:	5659      	ldrsb	r1, [r3, r1]
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	2201      	movs	r2, #1
 8016b34:	569a      	ldrsb	r2, [r3, r2]
 8016b36:	251d      	movs	r5, #29
 8016b38:	197c      	adds	r4, r7, r5
 8016b3a:	4b53      	ldr	r3, [pc, #332]	; (8016c88 <RegionEU868TxConfig+0x1a0>)
 8016b3c:	f7ff faca 	bl	80160d4 <LimitTxPower>
 8016b40:	0003      	movs	r3, r0
 8016b42:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	785b      	ldrb	r3, [r3, #1]
 8016b48:	b25b      	sxtb	r3, r3
 8016b4a:	0018      	movs	r0, r3
 8016b4c:	f7ff faa4 	bl	8016098 <GetBandwidth>
 8016b50:	0003      	movs	r3, r0
 8016b52:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8016b54:	2017      	movs	r0, #23
 8016b56:	183b      	adds	r3, r7, r0
 8016b58:	2200      	movs	r2, #0
 8016b5a:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	6859      	ldr	r1, [r3, #4]
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	689a      	ldr	r2, [r3, #8]
 8016b64:	183c      	adds	r4, r7, r0
 8016b66:	197b      	adds	r3, r7, r5
 8016b68:	781b      	ldrb	r3, [r3, #0]
 8016b6a:	b25b      	sxtb	r3, r3
 8016b6c:	0018      	movs	r0, r3
 8016b6e:	f7fd ffa3 	bl	8014ab8 <RegionCommonComputeTxPower>
 8016b72:	0003      	movs	r3, r0
 8016b74:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8016b76:	4b45      	ldr	r3, [pc, #276]	; (8016c8c <RegionEU868TxConfig+0x1a4>)
 8016b78:	695a      	ldr	r2, [r3, #20]
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	781b      	ldrb	r3, [r3, #0]
 8016b7e:	0018      	movs	r0, r3
 8016b80:	4940      	ldr	r1, [pc, #256]	; (8016c84 <RegionEU868TxConfig+0x19c>)
 8016b82:	0003      	movs	r3, r0
 8016b84:	005b      	lsls	r3, r3, #1
 8016b86:	181b      	adds	r3, r3, r0
 8016b88:	009b      	lsls	r3, r3, #2
 8016b8a:	585b      	ldr	r3, [r3, r1]
 8016b8c:	0018      	movs	r0, r3
 8016b8e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	785b      	ldrb	r3, [r3, #1]
 8016b94:	b25b      	sxtb	r3, r3
 8016b96:	2b07      	cmp	r3, #7
 8016b98:	d12d      	bne.n	8016bf6 <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016b9a:	201f      	movs	r0, #31
 8016b9c:	183b      	adds	r3, r7, r0
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8016ba2:	4b3a      	ldr	r3, [pc, #232]	; (8016c8c <RegionEU868TxConfig+0x1a4>)
 8016ba4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016ba6:	231e      	movs	r3, #30
 8016ba8:	18fb      	adds	r3, r7, r3
 8016baa:	2200      	movs	r2, #0
 8016bac:	569a      	ldrsb	r2, [r3, r2]
 8016bae:	0013      	movs	r3, r2
 8016bb0:	015b      	lsls	r3, r3, #5
 8016bb2:	1a9b      	subs	r3, r3, r2
 8016bb4:	009b      	lsls	r3, r3, #2
 8016bb6:	189b      	adds	r3, r3, r2
 8016bb8:	00db      	lsls	r3, r3, #3
 8016bba:	001d      	movs	r5, r3
 8016bbc:	69ba      	ldr	r2, [r7, #24]
 8016bbe:	4e34      	ldr	r6, [pc, #208]	; (8016c90 <RegionEU868TxConfig+0x1a8>)
 8016bc0:	2317      	movs	r3, #23
 8016bc2:	18fb      	adds	r3, r7, r3
 8016bc4:	2100      	movs	r1, #0
 8016bc6:	5659      	ldrsb	r1, [r3, r1]
 8016bc8:	183b      	adds	r3, r7, r0
 8016bca:	7818      	ldrb	r0, [r3, #0]
 8016bcc:	4b31      	ldr	r3, [pc, #196]	; (8016c94 <RegionEU868TxConfig+0x1ac>)
 8016bce:	9308      	str	r3, [sp, #32]
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	9307      	str	r3, [sp, #28]
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	9306      	str	r3, [sp, #24]
 8016bd8:	2300      	movs	r3, #0
 8016bda:	9305      	str	r3, [sp, #20]
 8016bdc:	2301      	movs	r3, #1
 8016bde:	9304      	str	r3, [sp, #16]
 8016be0:	2300      	movs	r3, #0
 8016be2:	9303      	str	r3, [sp, #12]
 8016be4:	2305      	movs	r3, #5
 8016be6:	9302      	str	r3, [sp, #8]
 8016be8:	2300      	movs	r3, #0
 8016bea:	9301      	str	r3, [sp, #4]
 8016bec:	9500      	str	r5, [sp, #0]
 8016bee:	0013      	movs	r3, r2
 8016bf0:	0032      	movs	r2, r6
 8016bf2:	47a0      	blx	r4
 8016bf4:	e024      	b.n	8016c40 <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8016bf6:	201f      	movs	r0, #31
 8016bf8:	183b      	adds	r3, r7, r0
 8016bfa:	2201      	movs	r2, #1
 8016bfc:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8016bfe:	4b23      	ldr	r3, [pc, #140]	; (8016c8c <RegionEU868TxConfig+0x1a4>)
 8016c00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016c02:	231e      	movs	r3, #30
 8016c04:	18fb      	adds	r3, r7, r3
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	b25b      	sxtb	r3, r3
 8016c0a:	69bd      	ldr	r5, [r7, #24]
 8016c0c:	2217      	movs	r2, #23
 8016c0e:	18ba      	adds	r2, r7, r2
 8016c10:	2100      	movs	r1, #0
 8016c12:	5651      	ldrsb	r1, [r2, r1]
 8016c14:	183a      	adds	r2, r7, r0
 8016c16:	7810      	ldrb	r0, [r2, #0]
 8016c18:	4a1e      	ldr	r2, [pc, #120]	; (8016c94 <RegionEU868TxConfig+0x1ac>)
 8016c1a:	9208      	str	r2, [sp, #32]
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	9207      	str	r2, [sp, #28]
 8016c20:	2200      	movs	r2, #0
 8016c22:	9206      	str	r2, [sp, #24]
 8016c24:	2200      	movs	r2, #0
 8016c26:	9205      	str	r2, [sp, #20]
 8016c28:	2201      	movs	r2, #1
 8016c2a:	9204      	str	r2, [sp, #16]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	9203      	str	r2, [sp, #12]
 8016c30:	2208      	movs	r2, #8
 8016c32:	9202      	str	r2, [sp, #8]
 8016c34:	2201      	movs	r2, #1
 8016c36:	9201      	str	r2, [sp, #4]
 8016c38:	9300      	str	r3, [sp, #0]
 8016c3a:	002b      	movs	r3, r5
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016c40:	4b12      	ldr	r3, [pc, #72]	; (8016c8c <RegionEU868TxConfig+0x1a4>)
 8016c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c44:	68fa      	ldr	r2, [r7, #12]
 8016c46:	8992      	ldrh	r2, [r2, #12]
 8016c48:	b2d1      	uxtb	r1, r2
 8016c4a:	241f      	movs	r4, #31
 8016c4c:	193a      	adds	r2, r7, r4
 8016c4e:	7812      	ldrb	r2, [r2, #0]
 8016c50:	0010      	movs	r0, r2
 8016c52:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8016c54:	4b0d      	ldr	r3, [pc, #52]	; (8016c8c <RegionEU868TxConfig+0x1a4>)
 8016c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c58:	68fa      	ldr	r2, [r7, #12]
 8016c5a:	8992      	ldrh	r2, [r2, #12]
 8016c5c:	b2d1      	uxtb	r1, r2
 8016c5e:	193a      	adds	r2, r7, r4
 8016c60:	7812      	ldrb	r2, [r2, #0]
 8016c62:	0010      	movs	r0, r2
 8016c64:	4798      	blx	r3
 8016c66:	0002      	movs	r2, r0
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	221d      	movs	r2, #29
 8016c70:	18ba      	adds	r2, r7, r2
 8016c72:	7812      	ldrb	r2, [r2, #0]
 8016c74:	701a      	strb	r2, [r3, #0]
    return true;
 8016c76:	2301      	movs	r3, #1
}
 8016c78:	0018      	movs	r0, r3
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	b009      	add	sp, #36	; 0x24
 8016c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c80:	08028e5c 	.word	0x08028e5c
 8016c84:	20001674 	.word	0x20001674
 8016c88:	20001784 	.word	0x20001784
 8016c8c:	080293d8 	.word	0x080293d8
 8016c90:	000061a8 	.word	0x000061a8
 8016c94:	00000bb8 	.word	0x00000bb8

08016c98 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c9a:	b093      	sub	sp, #76	; 0x4c
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	607a      	str	r2, [r7, #4]
 8016ca4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016ca6:	2347      	movs	r3, #71	; 0x47
 8016ca8:	18fb      	adds	r3, r7, r3
 8016caa:	2207      	movs	r2, #7
 8016cac:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8016cae:	2344      	movs	r3, #68	; 0x44
 8016cb0:	18fb      	adds	r3, r7, r3
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8016cb6:	2346      	movs	r3, #70	; 0x46
 8016cb8:	18fb      	adds	r3, r7, r3
 8016cba:	2200      	movs	r2, #0
 8016cbc:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8016cbe:	233a      	movs	r3, #58	; 0x3a
 8016cc0:	18fb      	adds	r3, r7, r3
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016cc6:	e09e      	b.n	8016e06 <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	2346      	movs	r3, #70	; 0x46
 8016cce:	18fb      	adds	r3, r7, r3
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	18d3      	adds	r3, r2, r3
 8016cd4:	2544      	movs	r5, #68	; 0x44
 8016cd6:	197c      	adds	r4, r7, r5
 8016cd8:	223c      	movs	r2, #60	; 0x3c
 8016cda:	18ba      	adds	r2, r7, r2
 8016cdc:	0011      	movs	r1, r2
 8016cde:	0018      	movs	r0, r3
 8016ce0:	f7fd fd22 	bl	8014728 <RegionCommonParseLinkAdrReq>
 8016ce4:	0003      	movs	r3, r0
 8016ce6:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8016ce8:	197b      	adds	r3, r7, r5
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d100      	bne.n	8016cf2 <RegionEU868LinkAdrReq+0x5a>
 8016cf0:	e092      	b.n	8016e18 <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016cf2:	2246      	movs	r2, #70	; 0x46
 8016cf4:	18bb      	adds	r3, r7, r2
 8016cf6:	18b9      	adds	r1, r7, r2
 8016cf8:	2244      	movs	r2, #68	; 0x44
 8016cfa:	18ba      	adds	r2, r7, r2
 8016cfc:	7809      	ldrb	r1, [r1, #0]
 8016cfe:	7812      	ldrb	r2, [r2, #0]
 8016d00:	188a      	adds	r2, r1, r2
 8016d02:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016d04:	2347      	movs	r3, #71	; 0x47
 8016d06:	18fb      	adds	r3, r7, r3
 8016d08:	2207      	movs	r2, #7
 8016d0a:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016d0c:	213c      	movs	r1, #60	; 0x3c
 8016d0e:	187b      	adds	r3, r7, r1
 8016d10:	889a      	ldrh	r2, [r3, #4]
 8016d12:	233a      	movs	r3, #58	; 0x3a
 8016d14:	18fb      	adds	r3, r7, r3
 8016d16:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016d18:	187b      	adds	r3, r7, r1
 8016d1a:	78db      	ldrb	r3, [r3, #3]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d10c      	bne.n	8016d3a <RegionEU868LinkAdrReq+0xa2>
 8016d20:	233a      	movs	r3, #58	; 0x3a
 8016d22:	18fb      	adds	r3, r7, r3
 8016d24:	881b      	ldrh	r3, [r3, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d107      	bne.n	8016d3a <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8016d2a:	2247      	movs	r2, #71	; 0x47
 8016d2c:	18bb      	adds	r3, r7, r2
 8016d2e:	18ba      	adds	r2, r7, r2
 8016d30:	7812      	ldrb	r2, [r2, #0]
 8016d32:	2101      	movs	r1, #1
 8016d34:	438a      	bics	r2, r1
 8016d36:	701a      	strb	r2, [r3, #0]
 8016d38:	e065      	b.n	8016e06 <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016d3a:	233c      	movs	r3, #60	; 0x3c
 8016d3c:	18fb      	adds	r3, r7, r3
 8016d3e:	78db      	ldrb	r3, [r3, #3]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d004      	beq.n	8016d4e <RegionEU868LinkAdrReq+0xb6>
 8016d44:	233c      	movs	r3, #60	; 0x3c
 8016d46:	18fb      	adds	r3, r7, r3
 8016d48:	78db      	ldrb	r3, [r3, #3]
 8016d4a:	2b05      	cmp	r3, #5
 8016d4c:	d904      	bls.n	8016d58 <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016d4e:	233c      	movs	r3, #60	; 0x3c
 8016d50:	18fb      	adds	r3, r7, r3
 8016d52:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016d54:	2b06      	cmp	r3, #6
 8016d56:	d907      	bls.n	8016d68 <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016d58:	2247      	movs	r2, #71	; 0x47
 8016d5a:	18bb      	adds	r3, r7, r2
 8016d5c:	18ba      	adds	r2, r7, r2
 8016d5e:	7812      	ldrb	r2, [r2, #0]
 8016d60:	2101      	movs	r1, #1
 8016d62:	438a      	bics	r2, r1
 8016d64:	701a      	strb	r2, [r3, #0]
 8016d66:	e04e      	b.n	8016e06 <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016d68:	2345      	movs	r3, #69	; 0x45
 8016d6a:	18fb      	adds	r3, r7, r3
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	701a      	strb	r2, [r3, #0]
 8016d70:	e044      	b.n	8016dfc <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016d72:	233c      	movs	r3, #60	; 0x3c
 8016d74:	18fb      	adds	r3, r7, r3
 8016d76:	78db      	ldrb	r3, [r3, #3]
 8016d78:	2b06      	cmp	r3, #6
 8016d7a:	d11b      	bne.n	8016db4 <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8016d7c:	2345      	movs	r3, #69	; 0x45
 8016d7e:	18fb      	adds	r3, r7, r3
 8016d80:	781a      	ldrb	r2, [r3, #0]
 8016d82:	496e      	ldr	r1, [pc, #440]	; (8016f3c <RegionEU868LinkAdrReq+0x2a4>)
 8016d84:	0013      	movs	r3, r2
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	189b      	adds	r3, r3, r2
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	585b      	ldr	r3, [r3, r1]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d02e      	beq.n	8016df0 <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8016d92:	2345      	movs	r3, #69	; 0x45
 8016d94:	18fb      	adds	r3, r7, r3
 8016d96:	781b      	ldrb	r3, [r3, #0]
 8016d98:	2201      	movs	r2, #1
 8016d9a:	409a      	lsls	r2, r3
 8016d9c:	0013      	movs	r3, r2
 8016d9e:	b21a      	sxth	r2, r3
 8016da0:	213a      	movs	r1, #58	; 0x3a
 8016da2:	187b      	adds	r3, r7, r1
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	b21b      	sxth	r3, r3
 8016da8:	4313      	orrs	r3, r2
 8016daa:	b21b      	sxth	r3, r3
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	187b      	adds	r3, r7, r1
 8016db0:	801a      	strh	r2, [r3, #0]
 8016db2:	e01d      	b.n	8016df0 <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016db4:	233a      	movs	r3, #58	; 0x3a
 8016db6:	18fb      	adds	r3, r7, r3
 8016db8:	881b      	ldrh	r3, [r3, #0]
 8016dba:	001a      	movs	r2, r3
 8016dbc:	2345      	movs	r3, #69	; 0x45
 8016dbe:	18fb      	adds	r3, r7, r3
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	411a      	asrs	r2, r3
 8016dc4:	0013      	movs	r3, r2
 8016dc6:	2201      	movs	r2, #1
 8016dc8:	4013      	ands	r3, r2
 8016dca:	d011      	beq.n	8016df0 <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8016dcc:	2345      	movs	r3, #69	; 0x45
 8016dce:	18fb      	adds	r3, r7, r3
 8016dd0:	781a      	ldrb	r2, [r3, #0]
 8016dd2:	495a      	ldr	r1, [pc, #360]	; (8016f3c <RegionEU868LinkAdrReq+0x2a4>)
 8016dd4:	0013      	movs	r3, r2
 8016dd6:	005b      	lsls	r3, r3, #1
 8016dd8:	189b      	adds	r3, r3, r2
 8016dda:	009b      	lsls	r3, r3, #2
 8016ddc:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016de2:	2247      	movs	r2, #71	; 0x47
 8016de4:	18bb      	adds	r3, r7, r2
 8016de6:	18ba      	adds	r2, r7, r2
 8016de8:	7812      	ldrb	r2, [r2, #0]
 8016dea:	2101      	movs	r1, #1
 8016dec:	438a      	bics	r2, r1
 8016dee:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016df0:	2145      	movs	r1, #69	; 0x45
 8016df2:	187b      	adds	r3, r7, r1
 8016df4:	781a      	ldrb	r2, [r3, #0]
 8016df6:	187b      	adds	r3, r7, r1
 8016df8:	3201      	adds	r2, #1
 8016dfa:	701a      	strb	r2, [r3, #0]
 8016dfc:	2345      	movs	r3, #69	; 0x45
 8016dfe:	18fb      	adds	r3, r7, r3
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	2b0f      	cmp	r3, #15
 8016e04:	d9b5      	bls.n	8016d72 <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	7a1b      	ldrb	r3, [r3, #8]
 8016e0a:	2246      	movs	r2, #70	; 0x46
 8016e0c:	18ba      	adds	r2, r7, r2
 8016e0e:	7812      	ldrb	r2, [r2, #0]
 8016e10:	429a      	cmp	r2, r3
 8016e12:	d200      	bcs.n	8016e16 <RegionEU868LinkAdrReq+0x17e>
 8016e14:	e758      	b.n	8016cc8 <RegionEU868LinkAdrReq+0x30>
 8016e16:	e000      	b.n	8016e1a <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8016e18:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016e1a:	2134      	movs	r1, #52	; 0x34
 8016e1c:	187b      	adds	r3, r7, r1
 8016e1e:	2201      	movs	r2, #1
 8016e20:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	7a5a      	ldrb	r2, [r3, #9]
 8016e26:	187b      	adds	r3, r7, r1
 8016e28:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016e2a:	187b      	adds	r3, r7, r1
 8016e2c:	0018      	movs	r0, r3
 8016e2e:	f7ff fad7 	bl	80163e0 <RegionEU868GetPhyParam>
 8016e32:	0003      	movs	r3, r0
 8016e34:	001a      	movs	r2, r3
 8016e36:	2030      	movs	r0, #48	; 0x30
 8016e38:	183b      	adds	r3, r7, r0
 8016e3a:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8016e3c:	2110      	movs	r1, #16
 8016e3e:	187b      	adds	r3, r7, r1
 8016e40:	2447      	movs	r4, #71	; 0x47
 8016e42:	193a      	adds	r2, r7, r4
 8016e44:	7812      	ldrb	r2, [r2, #0]
 8016e46:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	7a9a      	ldrb	r2, [r3, #10]
 8016e4c:	187b      	adds	r3, r7, r1
 8016e4e:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016e50:	253c      	movs	r5, #60	; 0x3c
 8016e52:	197b      	adds	r3, r7, r5
 8016e54:	2201      	movs	r2, #1
 8016e56:	569a      	ldrsb	r2, [r3, r2]
 8016e58:	187b      	adds	r3, r7, r1
 8016e5a:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016e5c:	197b      	adds	r3, r7, r5
 8016e5e:	2202      	movs	r2, #2
 8016e60:	569a      	ldrsb	r2, [r3, r2]
 8016e62:	187b      	adds	r3, r7, r1
 8016e64:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016e66:	197b      	adds	r3, r7, r5
 8016e68:	781a      	ldrb	r2, [r3, #0]
 8016e6a:	187b      	adds	r3, r7, r1
 8016e6c:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	220b      	movs	r2, #11
 8016e72:	569a      	ldrsb	r2, [r3, r2]
 8016e74:	187b      	adds	r3, r7, r1
 8016e76:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	220c      	movs	r2, #12
 8016e7c:	569a      	ldrsb	r2, [r3, r2]
 8016e7e:	187b      	adds	r3, r7, r1
 8016e80:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	7b5b      	ldrb	r3, [r3, #13]
 8016e86:	b25a      	sxtb	r2, r3
 8016e88:	187b      	adds	r3, r7, r1
 8016e8a:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016e8c:	187b      	adds	r3, r7, r1
 8016e8e:	2210      	movs	r2, #16
 8016e90:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016e92:	187b      	adds	r3, r7, r1
 8016e94:	223a      	movs	r2, #58	; 0x3a
 8016e96:	18ba      	adds	r2, r7, r2
 8016e98:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016e9a:	183b      	adds	r3, r7, r0
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	b25a      	sxtb	r2, r3
 8016ea0:	0008      	movs	r0, r1
 8016ea2:	183b      	adds	r3, r7, r0
 8016ea4:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016ea6:	183b      	adds	r3, r7, r0
 8016ea8:	2207      	movs	r2, #7
 8016eaa:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8016eac:	183b      	adds	r3, r7, r0
 8016eae:	4a23      	ldr	r2, [pc, #140]	; (8016f3c <RegionEU868LinkAdrReq+0x2a4>)
 8016eb0:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016eb2:	183b      	adds	r3, r7, r0
 8016eb4:	2207      	movs	r2, #7
 8016eb6:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016eb8:	183b      	adds	r3, r7, r0
 8016eba:	2200      	movs	r2, #0
 8016ebc:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016ebe:	183b      	adds	r3, r7, r0
 8016ec0:	68fa      	ldr	r2, [r7, #12]
 8016ec2:	6812      	ldr	r2, [r2, #0]
 8016ec4:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016ec6:	0026      	movs	r6, r4
 8016ec8:	193c      	adds	r4, r7, r4
 8016eca:	0029      	movs	r1, r5
 8016ecc:	187d      	adds	r5, r7, r1
 8016ece:	187b      	adds	r3, r7, r1
 8016ed0:	1c9a      	adds	r2, r3, #2
 8016ed2:	187b      	adds	r3, r7, r1
 8016ed4:	1c59      	adds	r1, r3, #1
 8016ed6:	1838      	adds	r0, r7, r0
 8016ed8:	002b      	movs	r3, r5
 8016eda:	f7fd fc7b 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 8016ede:	0003      	movs	r3, r0
 8016ee0:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016ee2:	0034      	movs	r4, r6
 8016ee4:	193b      	adds	r3, r7, r4
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	2b07      	cmp	r3, #7
 8016eea:	d10c      	bne.n	8016f06 <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8016eec:	4b14      	ldr	r3, [pc, #80]	; (8016f40 <RegionEU868LinkAdrReq+0x2a8>)
 8016eee:	2202      	movs	r2, #2
 8016ef0:	2100      	movs	r1, #0
 8016ef2:	0018      	movs	r0, r3
 8016ef4:	f005 ff1a 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8016ef8:	233a      	movs	r3, #58	; 0x3a
 8016efa:	18fb      	adds	r3, r7, r3
 8016efc:	8819      	ldrh	r1, [r3, #0]
 8016efe:	4a0f      	ldr	r2, [pc, #60]	; (8016f3c <RegionEU868LinkAdrReq+0x2a4>)
 8016f00:	2388      	movs	r3, #136	; 0x88
 8016f02:	005b      	lsls	r3, r3, #1
 8016f04:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016f06:	213c      	movs	r1, #60	; 0x3c
 8016f08:	187b      	adds	r3, r7, r1
 8016f0a:	2201      	movs	r2, #1
 8016f0c:	569a      	ldrsb	r2, [r3, r2]
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016f12:	187b      	adds	r3, r7, r1
 8016f14:	2202      	movs	r2, #2
 8016f16:	569a      	ldrsb	r2, [r3, r2]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016f1c:	187b      	adds	r3, r7, r1
 8016f1e:	781a      	ldrb	r2, [r3, #0]
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f26:	2246      	movs	r2, #70	; 0x46
 8016f28:	18ba      	adds	r2, r7, r2
 8016f2a:	7812      	ldrb	r2, [r2, #0]
 8016f2c:	701a      	strb	r2, [r3, #0]

    return status;
 8016f2e:	2347      	movs	r3, #71	; 0x47
 8016f30:	18fb      	adds	r3, r7, r3
 8016f32:	781b      	ldrb	r3, [r3, #0]
}
 8016f34:	0018      	movs	r0, r3
 8016f36:	46bd      	mov	sp, r7
 8016f38:	b013      	add	sp, #76	; 0x4c
 8016f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f3c:	20001674 	.word	0x20001674
 8016f40:	20001784 	.word	0x20001784

08016f44 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b084      	sub	sp, #16
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016f4c:	230f      	movs	r3, #15
 8016f4e:	18fb      	adds	r3, r7, r3
 8016f50:	2207      	movs	r2, #7
 8016f52:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8016f54:	210e      	movs	r1, #14
 8016f56:	187b      	adds	r3, r7, r1
 8016f58:	2200      	movs	r2, #0
 8016f5a:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	187a      	adds	r2, r7, r1
 8016f62:	0011      	movs	r1, r2
 8016f64:	0018      	movs	r0, r3
 8016f66:	f7ff f8dd 	bl	8016124 <VerifyRfFreq>
 8016f6a:	0003      	movs	r3, r0
 8016f6c:	001a      	movs	r2, r3
 8016f6e:	2301      	movs	r3, #1
 8016f70:	4053      	eors	r3, r2
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d006      	beq.n	8016f86 <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 8016f78:	220f      	movs	r2, #15
 8016f7a:	18bb      	adds	r3, r7, r2
 8016f7c:	18ba      	adds	r2, r7, r2
 8016f7e:	7812      	ldrb	r2, [r2, #0]
 8016f80:	2101      	movs	r1, #1
 8016f82:	438a      	bics	r2, r1
 8016f84:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	781b      	ldrb	r3, [r3, #0]
 8016f8a:	b25b      	sxtb	r3, r3
 8016f8c:	2207      	movs	r2, #7
 8016f8e:	2100      	movs	r1, #0
 8016f90:	0018      	movs	r0, r3
 8016f92:	f7fd f9e1 	bl	8014358 <RegionCommonValueInRange>
 8016f96:	1e03      	subs	r3, r0, #0
 8016f98:	d106      	bne.n	8016fa8 <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8016f9a:	220f      	movs	r2, #15
 8016f9c:	18bb      	adds	r3, r7, r2
 8016f9e:	18ba      	adds	r2, r7, r2
 8016fa0:	7812      	ldrb	r2, [r2, #0]
 8016fa2:	2102      	movs	r1, #2
 8016fa4:	438a      	bics	r2, r1
 8016fa6:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	785b      	ldrb	r3, [r3, #1]
 8016fac:	b25b      	sxtb	r3, r3
 8016fae:	2205      	movs	r2, #5
 8016fb0:	2100      	movs	r1, #0
 8016fb2:	0018      	movs	r0, r3
 8016fb4:	f7fd f9d0 	bl	8014358 <RegionCommonValueInRange>
 8016fb8:	1e03      	subs	r3, r0, #0
 8016fba:	d106      	bne.n	8016fca <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016fbc:	220f      	movs	r2, #15
 8016fbe:	18bb      	adds	r3, r7, r2
 8016fc0:	18ba      	adds	r2, r7, r2
 8016fc2:	7812      	ldrb	r2, [r2, #0]
 8016fc4:	2104      	movs	r1, #4
 8016fc6:	438a      	bics	r2, r1
 8016fc8:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8016fca:	230f      	movs	r3, #15
 8016fcc:	18fb      	adds	r3, r7, r3
 8016fce:	781b      	ldrb	r3, [r3, #0]
}
 8016fd0:	0018      	movs	r0, r3
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	b004      	add	sp, #16
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b086      	sub	sp, #24
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016fe0:	2317      	movs	r3, #23
 8016fe2:	18fb      	adds	r3, r7, r3
 8016fe4:	2203      	movs	r2, #3
 8016fe6:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d119      	bne.n	8017026 <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	791b      	ldrb	r3, [r3, #4]
 8016ff6:	b25b      	sxtb	r3, r3
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	2108      	movs	r1, #8
 8016ffc:	187b      	adds	r3, r7, r1
 8016ffe:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017000:	187b      	adds	r3, r7, r1
 8017002:	0018      	movs	r0, r3
 8017004:	f000 fa46 	bl	8017494 <RegionEU868ChannelsRemove>
 8017008:	0003      	movs	r3, r0
 801700a:	001a      	movs	r2, r3
 801700c:	2301      	movs	r3, #1
 801700e:	4053      	eors	r3, r2
 8017010:	b2db      	uxtb	r3, r3
 8017012:	2b00      	cmp	r3, #0
 8017014:	d043      	beq.n	801709e <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8017016:	2217      	movs	r2, #23
 8017018:	18bb      	adds	r3, r7, r2
 801701a:	18ba      	adds	r2, r7, r2
 801701c:	7812      	ldrb	r2, [r2, #0]
 801701e:	2103      	movs	r1, #3
 8017020:	438a      	bics	r2, r1
 8017022:	701a      	strb	r2, [r3, #0]
 8017024:	e03b      	b.n	801709e <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681a      	ldr	r2, [r3, #0]
 801702a:	210c      	movs	r1, #12
 801702c:	187b      	adds	r3, r7, r1
 801702e:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	791b      	ldrb	r3, [r3, #4]
 8017034:	b25b      	sxtb	r3, r3
 8017036:	b2da      	uxtb	r2, r3
 8017038:	187b      	adds	r3, r7, r1
 801703a:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801703c:	187b      	adds	r3, r7, r1
 801703e:	0018      	movs	r0, r3
 8017040:	f000 f964 	bl	801730c <RegionEU868ChannelAdd>
 8017044:	0003      	movs	r3, r0
 8017046:	2b04      	cmp	r3, #4
 8017048:	d008      	beq.n	801705c <RegionEU868NewChannelReq+0x84>
 801704a:	dc02      	bgt.n	8017052 <RegionEU868NewChannelReq+0x7a>
 801704c:	2b00      	cmp	r3, #0
 801704e:	d025      	beq.n	801709c <RegionEU868NewChannelReq+0xc4>
 8017050:	e01c      	b.n	801708c <RegionEU868NewChannelReq+0xb4>
 8017052:	2b05      	cmp	r3, #5
 8017054:	d00a      	beq.n	801706c <RegionEU868NewChannelReq+0x94>
 8017056:	2b06      	cmp	r3, #6
 8017058:	d010      	beq.n	801707c <RegionEU868NewChannelReq+0xa4>
 801705a:	e017      	b.n	801708c <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801705c:	2217      	movs	r2, #23
 801705e:	18bb      	adds	r3, r7, r2
 8017060:	18ba      	adds	r2, r7, r2
 8017062:	7812      	ldrb	r2, [r2, #0]
 8017064:	2101      	movs	r1, #1
 8017066:	438a      	bics	r2, r1
 8017068:	701a      	strb	r2, [r3, #0]
                break;
 801706a:	e018      	b.n	801709e <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801706c:	2217      	movs	r2, #23
 801706e:	18bb      	adds	r3, r7, r2
 8017070:	18ba      	adds	r2, r7, r2
 8017072:	7812      	ldrb	r2, [r2, #0]
 8017074:	2102      	movs	r1, #2
 8017076:	438a      	bics	r2, r1
 8017078:	701a      	strb	r2, [r3, #0]
                break;
 801707a:	e010      	b.n	801709e <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801707c:	2217      	movs	r2, #23
 801707e:	18bb      	adds	r3, r7, r2
 8017080:	18ba      	adds	r2, r7, r2
 8017082:	7812      	ldrb	r2, [r2, #0]
 8017084:	2103      	movs	r1, #3
 8017086:	438a      	bics	r2, r1
 8017088:	701a      	strb	r2, [r3, #0]
                break;
 801708a:	e008      	b.n	801709e <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 801708c:	2217      	movs	r2, #23
 801708e:	18bb      	adds	r3, r7, r2
 8017090:	18ba      	adds	r2, r7, r2
 8017092:	7812      	ldrb	r2, [r2, #0]
 8017094:	2103      	movs	r1, #3
 8017096:	438a      	bics	r2, r1
 8017098:	701a      	strb	r2, [r3, #0]
                break;
 801709a:	e000      	b.n	801709e <RegionEU868NewChannelReq+0xc6>
                break;
 801709c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801709e:	2317      	movs	r3, #23
 80170a0:	18fb      	adds	r3, r7, r3
 80170a2:	781b      	ldrb	r3, [r3, #0]
}
 80170a4:	0018      	movs	r0, r3
 80170a6:	46bd      	mov	sp, r7
 80170a8:	b006      	add	sp, #24
 80170aa:	bd80      	pop	{r7, pc}

080170ac <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b082      	sub	sp, #8
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
    return -1;
 80170b4:	2301      	movs	r3, #1
 80170b6:	425b      	negs	r3, r3
}
 80170b8:	0018      	movs	r0, r3
 80170ba:	46bd      	mov	sp, r7
 80170bc:	b002      	add	sp, #8
 80170be:	bd80      	pop	{r7, pc}

080170c0 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b084      	sub	sp, #16
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80170c8:	230f      	movs	r3, #15
 80170ca:	18fb      	adds	r3, r7, r3
 80170cc:	2203      	movs	r2, #3
 80170ce:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80170d0:	210e      	movs	r1, #14
 80170d2:	187b      	adds	r3, r7, r1
 80170d4:	2200      	movs	r2, #0
 80170d6:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	187a      	adds	r2, r7, r1
 80170de:	0011      	movs	r1, r2
 80170e0:	0018      	movs	r0, r3
 80170e2:	f7ff f81f 	bl	8016124 <VerifyRfFreq>
 80170e6:	0003      	movs	r3, r0
 80170e8:	001a      	movs	r2, r3
 80170ea:	2301      	movs	r3, #1
 80170ec:	4053      	eors	r3, r2
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d006      	beq.n	8017102 <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 80170f4:	220f      	movs	r2, #15
 80170f6:	18bb      	adds	r3, r7, r2
 80170f8:	18ba      	adds	r2, r7, r2
 80170fa:	7812      	ldrb	r2, [r2, #0]
 80170fc:	2101      	movs	r1, #1
 80170fe:	438a      	bics	r2, r1
 8017100:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	0019      	movs	r1, r3
 8017108:	4a13      	ldr	r2, [pc, #76]	; (8017158 <RegionEU868DlChannelReq+0x98>)
 801710a:	000b      	movs	r3, r1
 801710c:	005b      	lsls	r3, r3, #1
 801710e:	185b      	adds	r3, r3, r1
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	589b      	ldr	r3, [r3, r2]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d106      	bne.n	8017126 <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8017118:	220f      	movs	r2, #15
 801711a:	18bb      	adds	r3, r7, r2
 801711c:	18ba      	adds	r2, r7, r2
 801711e:	7812      	ldrb	r2, [r2, #0]
 8017120:	2102      	movs	r1, #2
 8017122:	438a      	bics	r2, r1
 8017124:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017126:	230f      	movs	r3, #15
 8017128:	18fb      	adds	r3, r7, r3
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	2b03      	cmp	r3, #3
 801712e:	d10c      	bne.n	801714a <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	0018      	movs	r0, r3
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	685a      	ldr	r2, [r3, #4]
 801713a:	4907      	ldr	r1, [pc, #28]	; (8017158 <RegionEU868DlChannelReq+0x98>)
 801713c:	0003      	movs	r3, r0
 801713e:	005b      	lsls	r3, r3, #1
 8017140:	181b      	adds	r3, r3, r0
 8017142:	009b      	lsls	r3, r3, #2
 8017144:	18cb      	adds	r3, r1, r3
 8017146:	3304      	adds	r3, #4
 8017148:	601a      	str	r2, [r3, #0]
    }

    return status;
 801714a:	230f      	movs	r3, #15
 801714c:	18fb      	adds	r3, r7, r3
 801714e:	781b      	ldrb	r3, [r3, #0]
}
 8017150:	0018      	movs	r0, r3
 8017152:	46bd      	mov	sp, r7
 8017154:	b004      	add	sp, #16
 8017156:	bd80      	pop	{r7, pc}
 8017158:	20001674 	.word	0x20001674

0801715c <RegionEU868CalcBackOff>:
{
    return currentDr;
}

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b088      	sub	sp, #32
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8017164:	210c      	movs	r1, #12
 8017166:	187b      	adds	r3, r7, r1
 8017168:	4a12      	ldr	r2, [pc, #72]	; (80171b4 <RegionEU868CalcBackOff+0x58>)
 801716a:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801716c:	187b      	adds	r3, r7, r1
 801716e:	4a12      	ldr	r2, [pc, #72]	; (80171b8 <RegionEU868CalcBackOff+0x5c>)
 8017170:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	785a      	ldrb	r2, [r3, #1]
 8017176:	187b      	adds	r3, r7, r1
 8017178:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	781a      	ldrb	r2, [r3, #0]
 801717e:	187b      	adds	r3, r7, r1
 8017180:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	789a      	ldrb	r2, [r3, #2]
 8017186:	187b      	adds	r3, r7, r1
 8017188:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	78da      	ldrb	r2, [r3, #3]
 801718e:	187b      	adds	r3, r7, r1
 8017190:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	685a      	ldr	r2, [r3, #4]
 8017196:	187b      	adds	r3, r7, r1
 8017198:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	689a      	ldr	r2, [r3, #8]
 801719e:	187b      	adds	r3, r7, r1
 80171a0:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 80171a2:	187b      	adds	r3, r7, r1
 80171a4:	0018      	movs	r0, r3
 80171a6:	f7fd fcbf 	bl	8014b28 <RegionCommonCalcBackOff>
}
 80171aa:	46c0      	nop			; (mov r8, r8)
 80171ac:	46bd      	mov	sp, r7
 80171ae:	b008      	add	sp, #32
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	46c0      	nop			; (mov r8, r8)
 80171b4:	20001674 	.word	0x20001674
 80171b8:	20001734 	.word	0x20001734

080171bc <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80171bc:	b5b0      	push	{r4, r5, r7, lr}
 80171be:	b090      	sub	sp, #64	; 0x40
 80171c0:	af04      	add	r7, sp, #16
 80171c2:	60f8      	str	r0, [r7, #12]
 80171c4:	60b9      	str	r1, [r7, #8]
 80171c6:	607a      	str	r2, [r7, #4]
 80171c8:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 80171ca:	232f      	movs	r3, #47	; 0x2f
 80171cc:	18fb      	adds	r3, r7, r3
 80171ce:	2200      	movs	r2, #0
 80171d0:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 80171d2:	2327      	movs	r3, #39	; 0x27
 80171d4:	18fb      	adds	r3, r7, r3
 80171d6:	2200      	movs	r2, #0
 80171d8:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80171da:	2314      	movs	r3, #20
 80171dc:	18fb      	adds	r3, r7, r3
 80171de:	0018      	movs	r0, r3
 80171e0:	2310      	movs	r3, #16
 80171e2:	001a      	movs	r2, r3
 80171e4:	2100      	movs	r1, #0
 80171e6:	f00e fe8f 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 80171ea:	2300      	movs	r3, #0
 80171ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80171ee:	4b44      	ldr	r3, [pc, #272]	; (8017300 <RegionEU868NextChannel+0x144>)
 80171f0:	2201      	movs	r2, #1
 80171f2:	2100      	movs	r1, #0
 80171f4:	0018      	movs	r0, r3
 80171f6:	f7fd f917 	bl	8014428 <RegionCommonCountChannels>
 80171fa:	1e03      	subs	r3, r0, #0
 80171fc:	d10a      	bne.n	8017214 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80171fe:	4a41      	ldr	r2, [pc, #260]	; (8017304 <RegionEU868NextChannel+0x148>)
 8017200:	2388      	movs	r3, #136	; 0x88
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	5ad3      	ldrh	r3, [r2, r3]
 8017206:	2207      	movs	r2, #7
 8017208:	4313      	orrs	r3, r2
 801720a:	b299      	uxth	r1, r3
 801720c:	4a3d      	ldr	r2, [pc, #244]	; (8017304 <RegionEU868NextChannel+0x148>)
 801720e:	2388      	movs	r3, #136	; 0x88
 8017210:	005b      	lsls	r3, r3, #1
 8017212:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	681c      	ldr	r4, [r3, #0]
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	685b      	ldr	r3, [r3, #4]
 801721c:	0018      	movs	r0, r3
 801721e:	f005 fd0a 	bl	801cc36 <TimerGetElapsedTime>
 8017222:	0003      	movs	r3, r0
 8017224:	429c      	cmp	r4, r3
 8017226:	d824      	bhi.n	8017272 <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	2200      	movs	r2, #0
 801722c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	7a58      	ldrb	r0, [r3, #9]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	7a99      	ldrb	r1, [r3, #10]
 8017236:	4a34      	ldr	r2, [pc, #208]	; (8017308 <RegionEU868NextChannel+0x14c>)
 8017238:	2305      	movs	r3, #5
 801723a:	f7fd f980 	bl	801453e <RegionCommonUpdateBandTimeOff>
 801723e:	0003      	movs	r3, r0
 8017240:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	7a58      	ldrb	r0, [r3, #9]
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	7a1b      	ldrb	r3, [r3, #8]
 801724a:	b25b      	sxtb	r3, r3
 801724c:	b2d9      	uxtb	r1, r3
 801724e:	232f      	movs	r3, #47	; 0x2f
 8017250:	18fc      	adds	r4, r7, r3
 8017252:	4d2c      	ldr	r5, [pc, #176]	; (8017304 <RegionEU868NextChannel+0x148>)
 8017254:	4a2a      	ldr	r2, [pc, #168]	; (8017300 <RegionEU868NextChannel+0x144>)
 8017256:	2327      	movs	r3, #39	; 0x27
 8017258:	18fb      	adds	r3, r7, r3
 801725a:	9302      	str	r3, [sp, #8]
 801725c:	2314      	movs	r3, #20
 801725e:	18fb      	adds	r3, r7, r3
 8017260:	9301      	str	r3, [sp, #4]
 8017262:	4b29      	ldr	r3, [pc, #164]	; (8017308 <RegionEU868NextChannel+0x14c>)
 8017264:	9300      	str	r3, [sp, #0]
 8017266:	002b      	movs	r3, r5
 8017268:	f7fe ffd4 	bl	8016214 <CountNbOfEnabledChannels>
 801726c:	0003      	movs	r3, r0
 801726e:	7023      	strb	r3, [r4, #0]
 8017270:	e010      	b.n	8017294 <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8017272:	2127      	movs	r1, #39	; 0x27
 8017274:	187b      	adds	r3, r7, r1
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	3301      	adds	r3, #1
 801727a:	b2da      	uxtb	r2, r3
 801727c:	187b      	adds	r3, r7, r1
 801727e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	681c      	ldr	r4, [r3, #0]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	0018      	movs	r0, r3
 801728a:	f005 fcd4 	bl	801cc36 <TimerGetElapsedTime>
 801728e:	0003      	movs	r3, r0
 8017290:	1ae3      	subs	r3, r4, r3
 8017292:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8017294:	232f      	movs	r3, #47	; 0x2f
 8017296:	18fb      	adds	r3, r7, r3
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d012      	beq.n	80172c4 <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801729e:	232f      	movs	r3, #47	; 0x2f
 80172a0:	18fb      	adds	r3, r7, r3
 80172a2:	781b      	ldrb	r3, [r3, #0]
 80172a4:	3b01      	subs	r3, #1
 80172a6:	0019      	movs	r1, r3
 80172a8:	2000      	movs	r0, #0
 80172aa:	f005 fced 	bl	801cc88 <randr>
 80172ae:	0002      	movs	r2, r0
 80172b0:	2314      	movs	r3, #20
 80172b2:	18fb      	adds	r3, r7, r3
 80172b4:	5c9a      	ldrb	r2, [r3, r2]
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	701a      	strb	r2, [r3, #0]

        *time = 0;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2200      	movs	r2, #0
 80172be:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80172c0:	2300      	movs	r3, #0
 80172c2:	e018      	b.n	80172f6 <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 80172c4:	2327      	movs	r3, #39	; 0x27
 80172c6:	18fb      	adds	r3, r7, r3
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d004      	beq.n	80172d8 <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172d2:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80172d4:	230b      	movs	r3, #11
 80172d6:	e00e      	b.n	80172f6 <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80172d8:	4a0a      	ldr	r2, [pc, #40]	; (8017304 <RegionEU868NextChannel+0x148>)
 80172da:	2388      	movs	r3, #136	; 0x88
 80172dc:	005b      	lsls	r3, r3, #1
 80172de:	5ad3      	ldrh	r3, [r2, r3]
 80172e0:	2207      	movs	r2, #7
 80172e2:	4313      	orrs	r3, r2
 80172e4:	b299      	uxth	r1, r3
 80172e6:	4a07      	ldr	r2, [pc, #28]	; (8017304 <RegionEU868NextChannel+0x148>)
 80172e8:	2388      	movs	r3, #136	; 0x88
 80172ea:	005b      	lsls	r3, r3, #1
 80172ec:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2200      	movs	r2, #0
 80172f2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80172f4:	230c      	movs	r3, #12
    }
}
 80172f6:	0018      	movs	r0, r3
 80172f8:	46bd      	mov	sp, r7
 80172fa:	b00c      	add	sp, #48	; 0x30
 80172fc:	bdb0      	pop	{r4, r5, r7, pc}
 80172fe:	46c0      	nop			; (mov r8, r8)
 8017300:	20001784 	.word	0x20001784
 8017304:	20001674 	.word	0x20001674
 8017308:	20001734 	.word	0x20001734

0801730c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801730c:	b590      	push	{r4, r7, lr}
 801730e:	b085      	sub	sp, #20
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8017314:	230c      	movs	r3, #12
 8017316:	18fb      	adds	r3, r7, r3
 8017318:	2200      	movs	r2, #0
 801731a:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 801731c:	230f      	movs	r3, #15
 801731e:	18fb      	adds	r3, r7, r3
 8017320:	2200      	movs	r2, #0
 8017322:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8017324:	230e      	movs	r3, #14
 8017326:	18fb      	adds	r3, r7, r3
 8017328:	2200      	movs	r2, #0
 801732a:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 801732c:	210d      	movs	r1, #13
 801732e:	187b      	adds	r3, r7, r1
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	7912      	ldrb	r2, [r2, #4]
 8017334:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017336:	187b      	adds	r3, r7, r1
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	2b02      	cmp	r3, #2
 801733c:	d801      	bhi.n	8017342 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801733e:	2306      	movs	r3, #6
 8017340:	e0a2      	b.n	8017488 <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017342:	230d      	movs	r3, #13
 8017344:	18fb      	adds	r3, r7, r3
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	2b0f      	cmp	r3, #15
 801734a:	d901      	bls.n	8017350 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801734c:	2303      	movs	r3, #3
 801734e:	e09b      	b.n	8017488 <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	7a1b      	ldrb	r3, [r3, #8]
 8017356:	011b      	lsls	r3, r3, #4
 8017358:	b25b      	sxtb	r3, r3
 801735a:	111b      	asrs	r3, r3, #4
 801735c:	b25b      	sxtb	r3, r3
 801735e:	2207      	movs	r2, #7
 8017360:	2100      	movs	r1, #0
 8017362:	0018      	movs	r0, r3
 8017364:	f7fc fff8 	bl	8014358 <RegionCommonValueInRange>
 8017368:	1e03      	subs	r3, r0, #0
 801736a:	d103      	bne.n	8017374 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 801736c:	230f      	movs	r3, #15
 801736e:	18fb      	adds	r3, r7, r3
 8017370:	2201      	movs	r2, #1
 8017372:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	7a1b      	ldrb	r3, [r3, #8]
 801737a:	b25b      	sxtb	r3, r3
 801737c:	111b      	asrs	r3, r3, #4
 801737e:	b25b      	sxtb	r3, r3
 8017380:	2207      	movs	r2, #7
 8017382:	2100      	movs	r1, #0
 8017384:	0018      	movs	r0, r3
 8017386:	f7fc ffe7 	bl	8014358 <RegionCommonValueInRange>
 801738a:	1e03      	subs	r3, r0, #0
 801738c:	d103      	bne.n	8017396 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 801738e:	230f      	movs	r3, #15
 8017390:	18fb      	adds	r3, r7, r3
 8017392:	2201      	movs	r2, #1
 8017394:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	7a1b      	ldrb	r3, [r3, #8]
 801739c:	011b      	lsls	r3, r3, #4
 801739e:	b25b      	sxtb	r3, r3
 80173a0:	111b      	asrs	r3, r3, #4
 80173a2:	b25a      	sxtb	r2, r3
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	7a1b      	ldrb	r3, [r3, #8]
 80173aa:	b25b      	sxtb	r3, r3
 80173ac:	111b      	asrs	r3, r3, #4
 80173ae:	b25b      	sxtb	r3, r3
 80173b0:	429a      	cmp	r2, r3
 80173b2:	dd03      	ble.n	80173bc <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 80173b4:	230f      	movs	r3, #15
 80173b6:	18fb      	adds	r3, r7, r3
 80173b8:	2201      	movs	r2, #1
 80173ba:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 80173bc:	230e      	movs	r3, #14
 80173be:	18fb      	adds	r3, r7, r3
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	2201      	movs	r2, #1
 80173c4:	4053      	eors	r3, r2
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d013      	beq.n	80173f4 <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	220c      	movs	r2, #12
 80173d4:	18ba      	adds	r2, r7, r2
 80173d6:	0011      	movs	r1, r2
 80173d8:	0018      	movs	r0, r3
 80173da:	f7fe fea3 	bl	8016124 <VerifyRfFreq>
 80173de:	0003      	movs	r3, r0
 80173e0:	001a      	movs	r2, r3
 80173e2:	2301      	movs	r3, #1
 80173e4:	4053      	eors	r3, r2
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d003      	beq.n	80173f4 <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 80173ec:	230e      	movs	r3, #14
 80173ee:	18fb      	adds	r3, r7, r3
 80173f0:	2201      	movs	r2, #1
 80173f2:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80173f4:	230f      	movs	r3, #15
 80173f6:	18fb      	adds	r3, r7, r3
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d006      	beq.n	801740c <RegionEU868ChannelAdd+0x100>
 80173fe:	230e      	movs	r3, #14
 8017400:	18fb      	adds	r3, r7, r3
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d001      	beq.n	801740c <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017408:	2306      	movs	r3, #6
 801740a:	e03d      	b.n	8017488 <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 801740c:	230f      	movs	r3, #15
 801740e:	18fb      	adds	r3, r7, r3
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d001      	beq.n	801741a <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017416:	2305      	movs	r3, #5
 8017418:	e036      	b.n	8017488 <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 801741a:	230e      	movs	r3, #14
 801741c:	18fb      	adds	r3, r7, r3
 801741e:	781b      	ldrb	r3, [r3, #0]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d001      	beq.n	8017428 <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017424:	2304      	movs	r3, #4
 8017426:	e02f      	b.n	8017488 <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8017428:	240d      	movs	r4, #13
 801742a:	193b      	adds	r3, r7, r4
 801742c:	781a      	ldrb	r2, [r3, #0]
 801742e:	0013      	movs	r3, r2
 8017430:	005b      	lsls	r3, r3, #1
 8017432:	189b      	adds	r3, r3, r2
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	4a16      	ldr	r2, [pc, #88]	; (8017490 <RegionEU868ChannelAdd+0x184>)
 8017438:	1898      	adds	r0, r3, r2
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	220c      	movs	r2, #12
 8017440:	0019      	movs	r1, r3
 8017442:	f005 fc37 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8017446:	193b      	adds	r3, r7, r4
 8017448:	781a      	ldrb	r2, [r3, #0]
 801744a:	230c      	movs	r3, #12
 801744c:	18fb      	adds	r3, r7, r3
 801744e:	7818      	ldrb	r0, [r3, #0]
 8017450:	490f      	ldr	r1, [pc, #60]	; (8017490 <RegionEU868ChannelAdd+0x184>)
 8017452:	0013      	movs	r3, r2
 8017454:	005b      	lsls	r3, r3, #1
 8017456:	189b      	adds	r3, r3, r2
 8017458:	009b      	lsls	r3, r3, #2
 801745a:	18cb      	adds	r3, r1, r3
 801745c:	3309      	adds	r3, #9
 801745e:	1c02      	adds	r2, r0, #0
 8017460:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8017462:	4a0b      	ldr	r2, [pc, #44]	; (8017490 <RegionEU868ChannelAdd+0x184>)
 8017464:	2388      	movs	r3, #136	; 0x88
 8017466:	005b      	lsls	r3, r3, #1
 8017468:	5ad3      	ldrh	r3, [r2, r3]
 801746a:	b21a      	sxth	r2, r3
 801746c:	193b      	adds	r3, r7, r4
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	2101      	movs	r1, #1
 8017472:	4099      	lsls	r1, r3
 8017474:	000b      	movs	r3, r1
 8017476:	b21b      	sxth	r3, r3
 8017478:	4313      	orrs	r3, r2
 801747a:	b21b      	sxth	r3, r3
 801747c:	b299      	uxth	r1, r3
 801747e:	4a04      	ldr	r2, [pc, #16]	; (8017490 <RegionEU868ChannelAdd+0x184>)
 8017480:	2388      	movs	r3, #136	; 0x88
 8017482:	005b      	lsls	r3, r3, #1
 8017484:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8017486:	2300      	movs	r3, #0
}
 8017488:	0018      	movs	r0, r3
 801748a:	46bd      	mov	sp, r7
 801748c:	b005      	add	sp, #20
 801748e:	bd90      	pop	{r4, r7, pc}
 8017490:	20001674 	.word	0x20001674

08017494 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017494:	b590      	push	{r4, r7, lr}
 8017496:	b085      	sub	sp, #20
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 801749c:	210f      	movs	r1, #15
 801749e:	187b      	adds	r3, r7, r1
 80174a0:	687a      	ldr	r2, [r7, #4]
 80174a2:	7812      	ldrb	r2, [r2, #0]
 80174a4:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80174a6:	187b      	adds	r3, r7, r1
 80174a8:	781b      	ldrb	r3, [r3, #0]
 80174aa:	2b02      	cmp	r3, #2
 80174ac:	d801      	bhi.n	80174b2 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 80174ae:	2300      	movs	r3, #0
 80174b0:	e015      	b.n	80174de <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80174b2:	240f      	movs	r4, #15
 80174b4:	193b      	adds	r3, r7, r4
 80174b6:	781a      	ldrb	r2, [r3, #0]
 80174b8:	490b      	ldr	r1, [pc, #44]	; (80174e8 <RegionEU868ChannelsRemove+0x54>)
 80174ba:	0013      	movs	r3, r2
 80174bc:	005b      	lsls	r3, r3, #1
 80174be:	189b      	adds	r3, r3, r2
 80174c0:	009b      	lsls	r3, r3, #2
 80174c2:	18cb      	adds	r3, r1, r3
 80174c4:	220c      	movs	r2, #12
 80174c6:	2100      	movs	r1, #0
 80174c8:	0018      	movs	r0, r3
 80174ca:	f00e fd1d 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80174ce:	193b      	adds	r3, r7, r4
 80174d0:	7819      	ldrb	r1, [r3, #0]
 80174d2:	4b06      	ldr	r3, [pc, #24]	; (80174ec <RegionEU868ChannelsRemove+0x58>)
 80174d4:	2210      	movs	r2, #16
 80174d6:	0018      	movs	r0, r3
 80174d8:	f7fc ff64 	bl	80143a4 <RegionCommonChanDisable>
 80174dc:	0003      	movs	r3, r0
}
 80174de:	0018      	movs	r0, r3
 80174e0:	46bd      	mov	sp, r7
 80174e2:	b005      	add	sp, #20
 80174e4:	bd90      	pop	{r4, r7, pc}
 80174e6:	46c0      	nop			; (mov r8, r8)
 80174e8:	20001674 	.word	0x20001674
 80174ec:	20001784 	.word	0x20001784

080174f0 <RegionEU868ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80174f0:	b590      	push	{r4, r7, lr}
 80174f2:	b085      	sub	sp, #20
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	0004      	movs	r4, r0
 80174f8:	0008      	movs	r0, r1
 80174fa:	0011      	movs	r1, r2
 80174fc:	1dfb      	adds	r3, r7, #7
 80174fe:	1c22      	adds	r2, r4, #0
 8017500:	701a      	strb	r2, [r3, #0]
 8017502:	1dbb      	adds	r3, r7, #6
 8017504:	1c02      	adds	r2, r0, #0
 8017506:	701a      	strb	r2, [r3, #0]
 8017508:	1d7b      	adds	r3, r7, #5
 801750a:	1c0a      	adds	r2, r1, #0
 801750c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801750e:	1dbb      	adds	r3, r7, #6
 8017510:	781a      	ldrb	r2, [r3, #0]
 8017512:	1d7b      	adds	r3, r7, #5
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	1ad3      	subs	r3, r2, r3
 8017518:	b2da      	uxtb	r2, r3
 801751a:	210f      	movs	r1, #15
 801751c:	187b      	adds	r3, r7, r1
 801751e:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8017520:	187b      	adds	r3, r7, r1
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	2b7f      	cmp	r3, #127	; 0x7f
 8017526:	d903      	bls.n	8017530 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8017528:	230f      	movs	r3, #15
 801752a:	18fb      	adds	r3, r7, r3
 801752c:	2200      	movs	r2, #0
 801752e:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8017530:	230f      	movs	r3, #15
 8017532:	18fb      	adds	r3, r7, r3
 8017534:	781b      	ldrb	r3, [r3, #0]
}
 8017536:	0018      	movs	r0, r3
 8017538:	46bd      	mov	sp, r7
 801753a:	b005      	add	sp, #20
 801753c:	bd90      	pop	{r4, r7, pc}

0801753e <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b084      	sub	sp, #16
 8017542:	af00      	add	r7, sp, #0
 8017544:	0002      	movs	r2, r0
 8017546:	1dfb      	adds	r3, r7, #7
 8017548:	701a      	strb	r2, [r3, #0]
 801754a:	1dbb      	adds	r3, r7, #6
 801754c:	1c0a      	adds	r2, r1, #0
 801754e:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017550:	230f      	movs	r3, #15
 8017552:	18fb      	adds	r3, r7, r3
 8017554:	2200      	movs	r2, #0
 8017556:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017558:	1dfa      	adds	r2, r7, #7
 801755a:	1dbb      	adds	r3, r7, #6
 801755c:	7812      	ldrb	r2, [r2, #0]
 801755e:	b252      	sxtb	r2, r2
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	b25b      	sxtb	r3, r3
 8017564:	429a      	cmp	r2, r3
 8017566:	d105      	bne.n	8017574 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8017568:	230f      	movs	r3, #15
 801756a:	18fb      	adds	r3, r7, r3
 801756c:	1dba      	adds	r2, r7, #6
 801756e:	7812      	ldrb	r2, [r2, #0]
 8017570:	701a      	strb	r2, [r3, #0]
 8017572:	e00f      	b.n	8017594 <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_7 )
 8017574:	1dfb      	adds	r3, r7, #7
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	b25b      	sxtb	r3, r3
 801757a:	2b07      	cmp	r3, #7
 801757c:	d104      	bne.n	8017588 <GetNextLowerTxDr+0x4a>
    {
        nextLowerDr = DR_5;
 801757e:	230f      	movs	r3, #15
 8017580:	18fb      	adds	r3, r7, r3
 8017582:	2205      	movs	r2, #5
 8017584:	701a      	strb	r2, [r3, #0]
 8017586:	e005      	b.n	8017594 <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017588:	1dfb      	adds	r3, r7, #7
 801758a:	781a      	ldrb	r2, [r3, #0]
 801758c:	230f      	movs	r3, #15
 801758e:	18fb      	adds	r3, r7, r3
 8017590:	3a01      	subs	r2, #1
 8017592:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017594:	230f      	movs	r3, #15
 8017596:	18fb      	adds	r3, r7, r3
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	b25b      	sxtb	r3, r3
}
 801759c:	0018      	movs	r0, r3
 801759e:	46bd      	mov	sp, r7
 80175a0:	b004      	add	sp, #16
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 80175ac:	4b09      	ldr	r3, [pc, #36]	; (80175d4 <GetBandwidth+0x30>)
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	0092      	lsls	r2, r2, #2
 80175b2:	58d3      	ldr	r3, [r2, r3]
 80175b4:	4a08      	ldr	r2, [pc, #32]	; (80175d8 <GetBandwidth+0x34>)
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d004      	beq.n	80175c4 <GetBandwidth+0x20>
 80175ba:	4a08      	ldr	r2, [pc, #32]	; (80175dc <GetBandwidth+0x38>)
 80175bc:	4293      	cmp	r3, r2
 80175be:	d003      	beq.n	80175c8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80175c0:	2300      	movs	r3, #0
 80175c2:	e002      	b.n	80175ca <GetBandwidth+0x26>
        case 250000:
            return 1;
 80175c4:	2301      	movs	r3, #1
 80175c6:	e000      	b.n	80175ca <GetBandwidth+0x26>
        case 500000:
            return 2;
 80175c8:	2302      	movs	r3, #2
    }
}
 80175ca:	0018      	movs	r0, r3
 80175cc:	46bd      	mov	sp, r7
 80175ce:	b002      	add	sp, #8
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	46c0      	nop			; (mov r8, r8)
 80175d4:	08028f70 	.word	0x08028f70
 80175d8:	0003d090 	.word	0x0003d090
 80175dc:	0007a120 	.word	0x0007a120

080175e0 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80175e0:	b590      	push	{r4, r7, lr}
 80175e2:	b085      	sub	sp, #20
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	0004      	movs	r4, r0
 80175e8:	0008      	movs	r0, r1
 80175ea:	0011      	movs	r1, r2
 80175ec:	603b      	str	r3, [r7, #0]
 80175ee:	1dfb      	adds	r3, r7, #7
 80175f0:	1c22      	adds	r2, r4, #0
 80175f2:	701a      	strb	r2, [r3, #0]
 80175f4:	1dbb      	adds	r3, r7, #6
 80175f6:	1c02      	adds	r2, r0, #0
 80175f8:	701a      	strb	r2, [r3, #0]
 80175fa:	1d7b      	adds	r3, r7, #5
 80175fc:	1c0a      	adds	r2, r1, #0
 80175fe:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017600:	210f      	movs	r1, #15
 8017602:	187b      	adds	r3, r7, r1
 8017604:	1dfa      	adds	r2, r7, #7
 8017606:	7812      	ldrb	r2, [r2, #0]
 8017608:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801760a:	187a      	adds	r2, r7, r1
 801760c:	1dbb      	adds	r3, r7, #6
 801760e:	1df9      	adds	r1, r7, #7
 8017610:	780c      	ldrb	r4, [r1, #0]
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	b258      	sxtb	r0, r3
 8017616:	b261      	sxtb	r1, r4
 8017618:	4288      	cmp	r0, r1
 801761a:	da00      	bge.n	801761e <LimitTxPower+0x3e>
 801761c:	1c23      	adds	r3, r4, #0
 801761e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017620:	230f      	movs	r3, #15
 8017622:	18fb      	adds	r3, r7, r3
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	b25b      	sxtb	r3, r3
}
 8017628:	0018      	movs	r0, r3
 801762a:	46bd      	mov	sp, r7
 801762c:	b005      	add	sp, #20
 801762e:	bd90      	pop	{r4, r7, pc}

08017630 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017638:	4b0e      	ldr	r3, [pc, #56]	; (8017674 <VerifyRfFreq+0x44>)
 801763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801763c:	687a      	ldr	r2, [r7, #4]
 801763e:	0010      	movs	r0, r2
 8017640:	4798      	blx	r3
 8017642:	0003      	movs	r3, r0
 8017644:	001a      	movs	r2, r3
 8017646:	2301      	movs	r3, #1
 8017648:	4053      	eors	r3, r2
 801764a:	b2db      	uxtb	r3, r3
 801764c:	2b00      	cmp	r3, #0
 801764e:	d001      	beq.n	8017654 <VerifyRfFreq+0x24>
    {
        return false;
 8017650:	2300      	movs	r3, #0
 8017652:	e00a      	b.n	801766a <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	4a08      	ldr	r2, [pc, #32]	; (8017678 <VerifyRfFreq+0x48>)
 8017658:	4293      	cmp	r3, r2
 801765a:	d903      	bls.n	8017664 <VerifyRfFreq+0x34>
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	4a07      	ldr	r2, [pc, #28]	; (801767c <VerifyRfFreq+0x4c>)
 8017660:	4293      	cmp	r3, r2
 8017662:	d901      	bls.n	8017668 <VerifyRfFreq+0x38>
    {
        return false;
 8017664:	2300      	movs	r3, #0
 8017666:	e000      	b.n	801766a <VerifyRfFreq+0x3a>
    }
    return true;
 8017668:	2301      	movs	r3, #1
}
 801766a:	0018      	movs	r0, r3
 801766c:	46bd      	mov	sp, r7
 801766e:	b002      	add	sp, #8
 8017670:	bd80      	pop	{r7, pc}
 8017672:	46c0      	nop			; (mov r8, r8)
 8017674:	080293d8 	.word	0x080293d8
 8017678:	338eda3f 	.word	0x338eda3f
 801767c:	33ad5ec0 	.word	0x33ad5ec0

08017680 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8017680:	b5b0      	push	{r4, r5, r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	60ba      	str	r2, [r7, #8]
 8017688:	607b      	str	r3, [r7, #4]
 801768a:	230f      	movs	r3, #15
 801768c:	18fb      	adds	r3, r7, r3
 801768e:	1c02      	adds	r2, r0, #0
 8017690:	701a      	strb	r2, [r3, #0]
 8017692:	230e      	movs	r3, #14
 8017694:	18fb      	adds	r3, r7, r3
 8017696:	1c0a      	adds	r2, r1, #0
 8017698:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801769a:	2317      	movs	r3, #23
 801769c:	18fb      	adds	r3, r7, r3
 801769e:	2200      	movs	r2, #0
 80176a0:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 80176a2:	2316      	movs	r3, #22
 80176a4:	18fb      	adds	r3, r7, r3
 80176a6:	2200      	movs	r2, #0
 80176a8:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80176aa:	2315      	movs	r3, #21
 80176ac:	18fb      	adds	r3, r7, r3
 80176ae:	2200      	movs	r2, #0
 80176b0:	701a      	strb	r2, [r3, #0]
 80176b2:	2314      	movs	r3, #20
 80176b4:	18fb      	adds	r3, r7, r3
 80176b6:	2200      	movs	r2, #0
 80176b8:	701a      	strb	r2, [r3, #0]
 80176ba:	e0b4      	b.n	8017826 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80176bc:	2313      	movs	r3, #19
 80176be:	18fb      	adds	r3, r7, r3
 80176c0:	2200      	movs	r2, #0
 80176c2:	701a      	strb	r2, [r3, #0]
 80176c4:	e09d      	b.n	8017802 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 80176c6:	2314      	movs	r3, #20
 80176c8:	18fb      	adds	r3, r7, r3
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	005b      	lsls	r3, r3, #1
 80176ce:	68ba      	ldr	r2, [r7, #8]
 80176d0:	18d3      	adds	r3, r2, r3
 80176d2:	881b      	ldrh	r3, [r3, #0]
 80176d4:	001a      	movs	r2, r3
 80176d6:	2313      	movs	r3, #19
 80176d8:	18fb      	adds	r3, r7, r3
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	411a      	asrs	r2, r3
 80176de:	0013      	movs	r3, r2
 80176e0:	2201      	movs	r2, #1
 80176e2:	4013      	ands	r3, r2
 80176e4:	d100      	bne.n	80176e8 <CountNbOfEnabledChannels+0x68>
 80176e6:	e086      	b.n	80177f6 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 80176e8:	2315      	movs	r3, #21
 80176ea:	18fb      	adds	r3, r7, r3
 80176ec:	781a      	ldrb	r2, [r3, #0]
 80176ee:	2313      	movs	r3, #19
 80176f0:	18fb      	adds	r3, r7, r3
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	18d3      	adds	r3, r2, r3
 80176f6:	001a      	movs	r2, r3
 80176f8:	0013      	movs	r3, r2
 80176fa:	005b      	lsls	r3, r3, #1
 80176fc:	189b      	adds	r3, r3, r2
 80176fe:	009b      	lsls	r3, r3, #2
 8017700:	001a      	movs	r2, r3
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	189b      	adds	r3, r3, r2
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d06f      	beq.n	80177ec <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 801770c:	230f      	movs	r3, #15
 801770e:	18fb      	adds	r3, r7, r3
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	2201      	movs	r2, #1
 8017714:	4053      	eors	r3, r2
 8017716:	b2db      	uxtb	r3, r3
 8017718:	2b00      	cmp	r3, #0
 801771a:	d008      	beq.n	801772e <CountNbOfEnabledChannels+0xae>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 801771c:	2313      	movs	r3, #19
 801771e:	18fb      	adds	r3, r7, r3
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	2207      	movs	r2, #7
 8017724:	411a      	asrs	r2, r3
 8017726:	0013      	movs	r3, r2
 8017728:	2201      	movs	r2, #1
 801772a:	4013      	ands	r3, r2
 801772c:	d060      	beq.n	80177f0 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801772e:	230e      	movs	r3, #14
 8017730:	18fb      	adds	r3, r7, r3
 8017732:	2000      	movs	r0, #0
 8017734:	5618      	ldrsb	r0, [r3, r0]
 8017736:	2415      	movs	r4, #21
 8017738:	193b      	adds	r3, r7, r4
 801773a:	781a      	ldrb	r2, [r3, #0]
 801773c:	2513      	movs	r5, #19
 801773e:	197b      	adds	r3, r7, r5
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	18d3      	adds	r3, r2, r3
 8017744:	001a      	movs	r2, r3
 8017746:	0013      	movs	r3, r2
 8017748:	005b      	lsls	r3, r3, #1
 801774a:	189b      	adds	r3, r3, r2
 801774c:	009b      	lsls	r3, r3, #2
 801774e:	001a      	movs	r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	189b      	adds	r3, r3, r2
 8017754:	7a1b      	ldrb	r3, [r3, #8]
 8017756:	011b      	lsls	r3, r3, #4
 8017758:	b25b      	sxtb	r3, r3
 801775a:	111b      	asrs	r3, r3, #4
 801775c:	b25b      	sxtb	r3, r3
 801775e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8017760:	193b      	adds	r3, r7, r4
 8017762:	781a      	ldrb	r2, [r3, #0]
 8017764:	197b      	adds	r3, r7, r5
 8017766:	781b      	ldrb	r3, [r3, #0]
 8017768:	18d3      	adds	r3, r2, r3
 801776a:	001a      	movs	r2, r3
 801776c:	0013      	movs	r3, r2
 801776e:	005b      	lsls	r3, r3, #1
 8017770:	189b      	adds	r3, r3, r2
 8017772:	009b      	lsls	r3, r3, #2
 8017774:	001a      	movs	r2, r3
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	189b      	adds	r3, r3, r2
 801777a:	7a1b      	ldrb	r3, [r3, #8]
 801777c:	b25b      	sxtb	r3, r3
 801777e:	111b      	asrs	r3, r3, #4
 8017780:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8017782:	001a      	movs	r2, r3
 8017784:	f7fc fde8 	bl	8014358 <RegionCommonValueInRange>
 8017788:	1e03      	subs	r3, r0, #0
 801778a:	d033      	beq.n	80177f4 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 801778c:	2315      	movs	r3, #21
 801778e:	18fb      	adds	r3, r7, r3
 8017790:	781a      	ldrb	r2, [r3, #0]
 8017792:	2313      	movs	r3, #19
 8017794:	18fb      	adds	r3, r7, r3
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	18d3      	adds	r3, r2, r3
 801779a:	001a      	movs	r2, r3
 801779c:	0013      	movs	r3, r2
 801779e:	005b      	lsls	r3, r3, #1
 80177a0:	189b      	adds	r3, r3, r2
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	001a      	movs	r2, r3
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	189b      	adds	r3, r3, r2
 80177aa:	7a5b      	ldrb	r3, [r3, #9]
 80177ac:	011b      	lsls	r3, r3, #4
 80177ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177b0:	18d3      	adds	r3, r2, r3
 80177b2:	68db      	ldr	r3, [r3, #12]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d006      	beq.n	80177c6 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80177b8:	2116      	movs	r1, #22
 80177ba:	187b      	adds	r3, r7, r1
 80177bc:	781a      	ldrb	r2, [r3, #0]
 80177be:	187b      	adds	r3, r7, r1
 80177c0:	3201      	adds	r2, #1
 80177c2:	701a      	strb	r2, [r3, #0]
                    continue;
 80177c4:	e017      	b.n	80177f6 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80177c6:	2217      	movs	r2, #23
 80177c8:	18bb      	adds	r3, r7, r2
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	18ba      	adds	r2, r7, r2
 80177ce:	1c59      	adds	r1, r3, #1
 80177d0:	7011      	strb	r1, [r2, #0]
 80177d2:	001a      	movs	r2, r3
 80177d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d6:	189b      	adds	r3, r3, r2
 80177d8:	2215      	movs	r2, #21
 80177da:	18b9      	adds	r1, r7, r2
 80177dc:	2213      	movs	r2, #19
 80177de:	18ba      	adds	r2, r7, r2
 80177e0:	7809      	ldrb	r1, [r1, #0]
 80177e2:	7812      	ldrb	r2, [r2, #0]
 80177e4:	188a      	adds	r2, r1, r2
 80177e6:	b2d2      	uxtb	r2, r2
 80177e8:	701a      	strb	r2, [r3, #0]
 80177ea:	e004      	b.n	80177f6 <CountNbOfEnabledChannels+0x176>
                    continue;
 80177ec:	46c0      	nop			; (mov r8, r8)
 80177ee:	e002      	b.n	80177f6 <CountNbOfEnabledChannels+0x176>
                        continue;
 80177f0:	46c0      	nop			; (mov r8, r8)
 80177f2:	e000      	b.n	80177f6 <CountNbOfEnabledChannels+0x176>
                    continue;
 80177f4:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 80177f6:	2113      	movs	r1, #19
 80177f8:	187b      	adds	r3, r7, r1
 80177fa:	781a      	ldrb	r2, [r3, #0]
 80177fc:	187b      	adds	r3, r7, r1
 80177fe:	3201      	adds	r2, #1
 8017800:	701a      	strb	r2, [r3, #0]
 8017802:	2313      	movs	r3, #19
 8017804:	18fb      	adds	r3, r7, r3
 8017806:	781b      	ldrb	r3, [r3, #0]
 8017808:	2b0f      	cmp	r3, #15
 801780a:	d800      	bhi.n	801780e <CountNbOfEnabledChannels+0x18e>
 801780c:	e75b      	b.n	80176c6 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 801780e:	2215      	movs	r2, #21
 8017810:	18bb      	adds	r3, r7, r2
 8017812:	18ba      	adds	r2, r7, r2
 8017814:	7812      	ldrb	r2, [r2, #0]
 8017816:	3210      	adds	r2, #16
 8017818:	701a      	strb	r2, [r3, #0]
 801781a:	2114      	movs	r1, #20
 801781c:	187b      	adds	r3, r7, r1
 801781e:	781a      	ldrb	r2, [r3, #0]
 8017820:	187b      	adds	r3, r7, r1
 8017822:	3201      	adds	r2, #1
 8017824:	701a      	strb	r2, [r3, #0]
 8017826:	2315      	movs	r3, #21
 8017828:	18fb      	adds	r3, r7, r3
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2b0f      	cmp	r3, #15
 801782e:	d800      	bhi.n	8017832 <CountNbOfEnabledChannels+0x1b2>
 8017830:	e744      	b.n	80176bc <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	2216      	movs	r2, #22
 8017836:	18ba      	adds	r2, r7, r2
 8017838:	7812      	ldrb	r2, [r2, #0]
 801783a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801783c:	2317      	movs	r3, #23
 801783e:	18fb      	adds	r3, r7, r3
 8017840:	781b      	ldrb	r3, [r3, #0]
}
 8017842:	0018      	movs	r0, r3
 8017844:	46bd      	mov	sp, r7
 8017846:	b006      	add	sp, #24
 8017848:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801784c <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017854:	2308      	movs	r3, #8
 8017856:	18fb      	adds	r3, r7, r3
 8017858:	2200      	movs	r2, #0
 801785a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	2b34      	cmp	r3, #52	; 0x34
 8017862:	d900      	bls.n	8017866 <RegionIN865GetPhyParam+0x1a>
 8017864:	e0cd      	b.n	8017a02 <RegionIN865GetPhyParam+0x1b6>
 8017866:	009a      	lsls	r2, r3, #2
 8017868:	4b6d      	ldr	r3, [pc, #436]	; (8017a20 <RegionIN865GetPhyParam+0x1d4>)
 801786a:	18d3      	adds	r3, r2, r3
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 8017870:	2308      	movs	r3, #8
 8017872:	18fb      	adds	r3, r7, r3
 8017874:	2200      	movs	r2, #0
 8017876:	601a      	str	r2, [r3, #0]
            break;
 8017878:	e0c4      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 801787a:	2308      	movs	r3, #8
 801787c:	18fb      	adds	r3, r7, r3
 801787e:	2200      	movs	r2, #0
 8017880:	601a      	str	r2, [r3, #0]
            break;
 8017882:	e0bf      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 8017884:	2308      	movs	r3, #8
 8017886:	18fb      	adds	r3, r7, r3
 8017888:	2200      	movs	r2, #0
 801788a:	601a      	str	r2, [r3, #0]
            break;
 801788c:	e0ba      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	785b      	ldrb	r3, [r3, #1]
 8017892:	b25b      	sxtb	r3, r3
 8017894:	2100      	movs	r1, #0
 8017896:	0018      	movs	r0, r3
 8017898:	f7ff fe51 	bl	801753e <GetNextLowerTxDr>
 801789c:	0003      	movs	r3, r0
 801789e:	001a      	movs	r2, r3
 80178a0:	2308      	movs	r3, #8
 80178a2:	18fb      	adds	r3, r7, r3
 80178a4:	601a      	str	r2, [r3, #0]
            break;
 80178a6:	e0ad      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 80178a8:	2308      	movs	r3, #8
 80178aa:	18fb      	adds	r3, r7, r3
 80178ac:	2200      	movs	r2, #0
 80178ae:	601a      	str	r2, [r3, #0]
            break;
 80178b0:	e0a8      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 80178b2:	2308      	movs	r3, #8
 80178b4:	18fb      	adds	r3, r7, r3
 80178b6:	2200      	movs	r2, #0
 80178b8:	601a      	str	r2, [r3, #0]
            break;
 80178ba:	e0a3      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 80178bc:	2308      	movs	r3, #8
 80178be:	18fb      	adds	r3, r7, r3
 80178c0:	2240      	movs	r2, #64	; 0x40
 80178c2:	601a      	str	r2, [r3, #0]
            break;
 80178c4:	e09e      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 80178c6:	2308      	movs	r3, #8
 80178c8:	18fb      	adds	r3, r7, r3
 80178ca:	2220      	movs	r2, #32
 80178cc:	601a      	str	r2, [r3, #0]
            break;
 80178ce:	e099      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	785b      	ldrb	r3, [r3, #1]
 80178d4:	b25b      	sxtb	r3, r3
 80178d6:	001a      	movs	r2, r3
 80178d8:	4b52      	ldr	r3, [pc, #328]	; (8017a24 <RegionIN865GetPhyParam+0x1d8>)
 80178da:	5c9b      	ldrb	r3, [r3, r2]
 80178dc:	001a      	movs	r2, r3
 80178de:	2308      	movs	r3, #8
 80178e0:	18fb      	adds	r3, r7, r3
 80178e2:	601a      	str	r2, [r3, #0]
            break;
 80178e4:	e08e      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	785b      	ldrb	r3, [r3, #1]
 80178ea:	b25b      	sxtb	r3, r3
 80178ec:	001a      	movs	r2, r3
 80178ee:	4b4e      	ldr	r3, [pc, #312]	; (8017a28 <RegionIN865GetPhyParam+0x1dc>)
 80178f0:	5c9b      	ldrb	r3, [r3, r2]
 80178f2:	001a      	movs	r2, r3
 80178f4:	2308      	movs	r3, #8
 80178f6:	18fb      	adds	r3, r7, r3
 80178f8:	601a      	str	r2, [r3, #0]
            break;
 80178fa:	e083      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 80178fc:	2308      	movs	r3, #8
 80178fe:	18fb      	adds	r3, r7, r3
 8017900:	2201      	movs	r2, #1
 8017902:	601a      	str	r2, [r3, #0]
            break;
 8017904:	e07e      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 8017906:	2308      	movs	r3, #8
 8017908:	18fb      	adds	r3, r7, r3
 801790a:	4a48      	ldr	r2, [pc, #288]	; (8017a2c <RegionIN865GetPhyParam+0x1e0>)
 801790c:	601a      	str	r2, [r3, #0]
            break;
 801790e:	e079      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 8017910:	2308      	movs	r3, #8
 8017912:	18fb      	adds	r3, r7, r3
 8017914:	22fa      	movs	r2, #250	; 0xfa
 8017916:	0092      	lsls	r2, r2, #2
 8017918:	601a      	str	r2, [r3, #0]
            break;
 801791a:	e073      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 801791c:	2308      	movs	r3, #8
 801791e:	18fb      	adds	r3, r7, r3
 8017920:	22fa      	movs	r2, #250	; 0xfa
 8017922:	00d2      	lsls	r2, r2, #3
 8017924:	601a      	str	r2, [r3, #0]
            break;
 8017926:	e06d      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 8017928:	2308      	movs	r3, #8
 801792a:	18fb      	adds	r3, r7, r3
 801792c:	4a40      	ldr	r2, [pc, #256]	; (8017a30 <RegionIN865GetPhyParam+0x1e4>)
 801792e:	601a      	str	r2, [r3, #0]
            break;
 8017930:	e068      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 8017932:	2308      	movs	r3, #8
 8017934:	18fb      	adds	r3, r7, r3
 8017936:	4a3f      	ldr	r2, [pc, #252]	; (8017a34 <RegionIN865GetPhyParam+0x1e8>)
 8017938:	601a      	str	r2, [r3, #0]
            break;
 801793a:	e063      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 801793c:	2308      	movs	r3, #8
 801793e:	18fb      	adds	r3, r7, r3
 8017940:	2280      	movs	r2, #128	; 0x80
 8017942:	01d2      	lsls	r2, r2, #7
 8017944:	601a      	str	r2, [r3, #0]
            break;
 8017946:	e05d      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 8017948:	23fa      	movs	r3, #250	; 0xfa
 801794a:	009b      	lsls	r3, r3, #2
 801794c:	4a3a      	ldr	r2, [pc, #232]	; (8017a38 <RegionIN865GetPhyParam+0x1ec>)
 801794e:	0019      	movs	r1, r3
 8017950:	0010      	movs	r0, r2
 8017952:	f005 f999 	bl	801cc88 <randr>
 8017956:	0003      	movs	r3, r0
 8017958:	22fa      	movs	r2, #250	; 0xfa
 801795a:	00d2      	lsls	r2, r2, #3
 801795c:	4694      	mov	ip, r2
 801795e:	4463      	add	r3, ip
 8017960:	001a      	movs	r2, r3
 8017962:	2308      	movs	r3, #8
 8017964:	18fb      	adds	r3, r7, r3
 8017966:	601a      	str	r2, [r3, #0]
            break;
 8017968:	e04c      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 801796a:	2308      	movs	r3, #8
 801796c:	18fb      	adds	r3, r7, r3
 801796e:	2200      	movs	r2, #0
 8017970:	601a      	str	r2, [r3, #0]
            break;
 8017972:	e047      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 8017974:	2308      	movs	r3, #8
 8017976:	18fb      	adds	r3, r7, r3
 8017978:	4a30      	ldr	r2, [pc, #192]	; (8017a3c <RegionIN865GetPhyParam+0x1f0>)
 801797a:	601a      	str	r2, [r3, #0]
            break;
 801797c:	e042      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 801797e:	2308      	movs	r3, #8
 8017980:	18fb      	adds	r3, r7, r3
 8017982:	2202      	movs	r2, #2
 8017984:	601a      	str	r2, [r3, #0]
            break;
 8017986:	e03d      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8017988:	2308      	movs	r3, #8
 801798a:	18fb      	adds	r3, r7, r3
 801798c:	4a2c      	ldr	r2, [pc, #176]	; (8017a40 <RegionIN865GetPhyParam+0x1f4>)
 801798e:	601a      	str	r2, [r3, #0]
            break;
 8017990:	e038      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8017992:	2308      	movs	r3, #8
 8017994:	18fb      	adds	r3, r7, r3
 8017996:	4a2b      	ldr	r2, [pc, #172]	; (8017a44 <RegionIN865GetPhyParam+0x1f8>)
 8017998:	601a      	str	r2, [r3, #0]
            break;
 801799a:	e033      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 801799c:	2308      	movs	r3, #8
 801799e:	18fb      	adds	r3, r7, r3
 80179a0:	2210      	movs	r2, #16
 80179a2:	601a      	str	r2, [r3, #0]
            break;
 80179a4:	e02e      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80179a6:	2308      	movs	r3, #8
 80179a8:	18fb      	adds	r3, r7, r3
 80179aa:	4a27      	ldr	r2, [pc, #156]	; (8017a48 <RegionIN865GetPhyParam+0x1fc>)
 80179ac:	601a      	str	r2, [r3, #0]
            break;
 80179ae:	e029      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80179b0:	2308      	movs	r3, #8
 80179b2:	18fb      	adds	r3, r7, r3
 80179b4:	2200      	movs	r2, #0
 80179b6:	601a      	str	r2, [r3, #0]
            break;
 80179b8:	e024      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80179ba:	2308      	movs	r3, #8
 80179bc:	18fb      	adds	r3, r7, r3
 80179be:	4a23      	ldr	r2, [pc, #140]	; (8017a4c <RegionIN865GetPhyParam+0x200>)
 80179c0:	601a      	str	r2, [r3, #0]
            break;
 80179c2:	e01f      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80179c4:	2308      	movs	r3, #8
 80179c6:	18fb      	adds	r3, r7, r3
 80179c8:	4a21      	ldr	r2, [pc, #132]	; (8017a50 <RegionIN865GetPhyParam+0x204>)
 80179ca:	601a      	str	r2, [r3, #0]
            break;
 80179cc:	e01a      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 80179ce:	2308      	movs	r3, #8
 80179d0:	18fb      	adds	r3, r7, r3
 80179d2:	4a1a      	ldr	r2, [pc, #104]	; (8017a3c <RegionIN865GetPhyParam+0x1f0>)
 80179d4:	601a      	str	r2, [r3, #0]
            break;
 80179d6:	e015      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 80179d8:	2108      	movs	r1, #8
 80179da:	187b      	adds	r3, r7, r1
 80179dc:	2213      	movs	r2, #19
 80179de:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 80179e0:	187b      	adds	r3, r7, r1
 80179e2:	2201      	movs	r2, #1
 80179e4:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 80179e6:	187b      	adds	r3, r7, r1
 80179e8:	2203      	movs	r2, #3
 80179ea:	709a      	strb	r2, [r3, #2]
            break;
 80179ec:	e00a      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 80179ee:	2308      	movs	r3, #8
 80179f0:	18fb      	adds	r3, r7, r3
 80179f2:	2204      	movs	r2, #4
 80179f4:	601a      	str	r2, [r3, #0]
            break;
 80179f6:	e005      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 80179f8:	2308      	movs	r3, #8
 80179fa:	18fb      	adds	r3, r7, r3
 80179fc:	2204      	movs	r2, #4
 80179fe:	601a      	str	r2, [r3, #0]
            break;
 8017a00:	e000      	b.n	8017a04 <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 8017a02:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8017a04:	210c      	movs	r1, #12
 8017a06:	187b      	adds	r3, r7, r1
 8017a08:	2208      	movs	r2, #8
 8017a0a:	18ba      	adds	r2, r7, r2
 8017a0c:	6812      	ldr	r2, [r2, #0]
 8017a0e:	601a      	str	r2, [r3, #0]
 8017a10:	187b      	adds	r3, r7, r1
 8017a12:	2200      	movs	r2, #0
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	0013      	movs	r3, r2
}
 8017a18:	0018      	movs	r0, r3
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	b004      	add	sp, #16
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	08028fa8 	.word	0x08028fa8
 8017a24:	08028f90 	.word	0x08028f90
 8017a28:	08028f98 	.word	0x08028f98
 8017a2c:	00000bb8 	.word	0x00000bb8
 8017a30:	00001388 	.word	0x00001388
 8017a34:	00001770 	.word	0x00001770
 8017a38:	fffffc18 	.word	0xfffffc18
 8017a3c:	33a680f0 	.word	0x33a680f0
 8017a40:	20001858 	.word	0x20001858
 8017a44:	2000185a 	.word	0x2000185a
 8017a48:	20001788 	.word	0x20001788
 8017a4c:	41f00000 	.word	0x41f00000
 8017a50:	4009999a 	.word	0x4009999a

08017a54 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	7858      	ldrb	r0, [r3, #1]
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	781b      	ldrb	r3, [r3, #0]
 8017a64:	0019      	movs	r1, r3
 8017a66:	4a0a      	ldr	r2, [pc, #40]	; (8017a90 <RegionIN865SetBandTxDone+0x3c>)
 8017a68:	000b      	movs	r3, r1
 8017a6a:	005b      	lsls	r3, r3, #1
 8017a6c:	185b      	adds	r3, r3, r1
 8017a6e:	009b      	lsls	r3, r3, #2
 8017a70:	18d3      	adds	r3, r2, r3
 8017a72:	3309      	adds	r3, #9
 8017a74:	781b      	ldrb	r3, [r3, #0]
 8017a76:	330c      	adds	r3, #12
 8017a78:	011a      	lsls	r2, r3, #4
 8017a7a:	4b05      	ldr	r3, [pc, #20]	; (8017a90 <RegionIN865SetBandTxDone+0x3c>)
 8017a7c:	18d1      	adds	r1, r2, r3
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	685b      	ldr	r3, [r3, #4]
 8017a82:	001a      	movs	r2, r3
 8017a84:	f7fc fd40 	bl	8014508 <RegionCommonSetBandTxDone>
}
 8017a88:	46c0      	nop			; (mov r8, r8)
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	b002      	add	sp, #8
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	20001788 	.word	0x20001788

08017a94 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 8017a94:	b590      	push	{r4, r7, lr}
 8017a96:	b087      	sub	sp, #28
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 8017a9c:	2108      	movs	r1, #8
 8017a9e:	187b      	adds	r3, r7, r1
 8017aa0:	2201      	movs	r2, #1
 8017aa2:	801a      	strh	r2, [r3, #0]
 8017aa4:	187b      	adds	r3, r7, r1
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	709a      	strb	r2, [r3, #2]
 8017aaa:	187b      	adds	r3, r7, r1
 8017aac:	2200      	movs	r2, #0
 8017aae:	605a      	str	r2, [r3, #4]
 8017ab0:	187b      	adds	r3, r7, r1
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	609a      	str	r2, [r3, #8]
 8017ab6:	187b      	adds	r3, r7, r1
 8017ab8:	2200      	movs	r2, #0
 8017aba:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	791b      	ldrb	r3, [r3, #4]
 8017ac0:	2b01      	cmp	r3, #1
 8017ac2:	d030      	beq.n	8017b26 <RegionIN865InitDefaults+0x92>
 8017ac4:	2b02      	cmp	r3, #2
 8017ac6:	d022      	beq.n	8017b0e <RegionIN865InitDefaults+0x7a>
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d000      	beq.n	8017ace <RegionIN865InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017acc:	e038      	b.n	8017b40 <RegionIN865InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8017ace:	2308      	movs	r3, #8
 8017ad0:	18f9      	adds	r1, r7, r3
 8017ad2:	4b1d      	ldr	r3, [pc, #116]	; (8017b48 <RegionIN865InitDefaults+0xb4>)
 8017ad4:	2210      	movs	r2, #16
 8017ad6:	0018      	movs	r0, r3
 8017ad8:	f005 f8ec 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8017adc:	4b1b      	ldr	r3, [pc, #108]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017ade:	4a1c      	ldr	r2, [pc, #112]	; (8017b50 <RegionIN865InitDefaults+0xbc>)
 8017ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017ae2:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8017ae4:	4b19      	ldr	r3, [pc, #100]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017ae6:	4a1b      	ldr	r2, [pc, #108]	; (8017b54 <RegionIN865InitDefaults+0xc0>)
 8017ae8:	330c      	adds	r3, #12
 8017aea:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017aec:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8017aee:	4b17      	ldr	r3, [pc, #92]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017af0:	4a19      	ldr	r2, [pc, #100]	; (8017b58 <RegionIN865InitDefaults+0xc4>)
 8017af2:	3318      	adds	r3, #24
 8017af4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017af6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017af8:	4b14      	ldr	r3, [pc, #80]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017afa:	22d2      	movs	r2, #210	; 0xd2
 8017afc:	2107      	movs	r1, #7
 8017afe:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8017b00:	4916      	ldr	r1, [pc, #88]	; (8017b5c <RegionIN865InitDefaults+0xc8>)
 8017b02:	4b17      	ldr	r3, [pc, #92]	; (8017b60 <RegionIN865InitDefaults+0xcc>)
 8017b04:	2201      	movs	r2, #1
 8017b06:	0018      	movs	r0, r3
 8017b08:	f7fc fccf 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 8017b0c:	e018      	b.n	8017b40 <RegionIN865InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d013      	beq.n	8017b3e <RegionIN865InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	6819      	ldr	r1, [r3, #0]
 8017b1a:	4b0c      	ldr	r3, [pc, #48]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017b1c:	22d4      	movs	r2, #212	; 0xd4
 8017b1e:	0018      	movs	r0, r3
 8017b20:	f005 f8c8 	bl	801ccb4 <memcpy1>
            break;
 8017b24:	e00b      	b.n	8017b3e <RegionIN865InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8017b26:	4b09      	ldr	r3, [pc, #36]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017b28:	22d0      	movs	r2, #208	; 0xd0
 8017b2a:	5a9a      	ldrh	r2, [r3, r2]
 8017b2c:	4b07      	ldr	r3, [pc, #28]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017b2e:	21d2      	movs	r1, #210	; 0xd2
 8017b30:	5a5b      	ldrh	r3, [r3, r1]
 8017b32:	4313      	orrs	r3, r2
 8017b34:	b299      	uxth	r1, r3
 8017b36:	4b05      	ldr	r3, [pc, #20]	; (8017b4c <RegionIN865InitDefaults+0xb8>)
 8017b38:	22d0      	movs	r2, #208	; 0xd0
 8017b3a:	5299      	strh	r1, [r3, r2]
            break;
 8017b3c:	e000      	b.n	8017b40 <RegionIN865InitDefaults+0xac>
            break;
 8017b3e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017b40:	46c0      	nop			; (mov r8, r8)
 8017b42:	46bd      	mov	sp, r7
 8017b44:	b007      	add	sp, #28
 8017b46:	bd90      	pop	{r4, r7, pc}
 8017b48:	20001848 	.word	0x20001848
 8017b4c:	20001788 	.word	0x20001788
 8017b50:	080275f8 	.word	0x080275f8
 8017b54:	08027604 	.word	0x08027604
 8017b58:	08027610 	.word	0x08027610
 8017b5c:	2000185a 	.word	0x2000185a
 8017b60:	20001858 	.word	0x20001858

08017b64 <RegionIN865ApplyCFList>:
            return false;
    }
}

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017b64:	b590      	push	{r4, r7, lr}
 8017b66:	b08b      	sub	sp, #44	; 0x2c
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017b6c:	2318      	movs	r3, #24
 8017b6e:	18fb      	adds	r3, r7, r3
 8017b70:	2250      	movs	r2, #80	; 0x50
 8017b72:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	791b      	ldrb	r3, [r3, #4]
 8017b78:	2b10      	cmp	r3, #16
 8017b7a:	d000      	beq.n	8017b7e <RegionIN865ApplyCFList+0x1a>
 8017b7c:	e07d      	b.n	8017c7a <RegionIN865ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	330f      	adds	r3, #15
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d000      	beq.n	8017b8c <RegionIN865ApplyCFList+0x28>
 8017b8a:	e078      	b.n	8017c7e <RegionIN865ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017b8c:	2327      	movs	r3, #39	; 0x27
 8017b8e:	18fb      	adds	r3, r7, r3
 8017b90:	2200      	movs	r2, #0
 8017b92:	701a      	strb	r2, [r3, #0]
 8017b94:	2326      	movs	r3, #38	; 0x26
 8017b96:	18fb      	adds	r3, r7, r3
 8017b98:	2203      	movs	r2, #3
 8017b9a:	701a      	strb	r2, [r3, #0]
 8017b9c:	e067      	b.n	8017c6e <RegionIN865ApplyCFList+0x10a>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8017b9e:	2326      	movs	r3, #38	; 0x26
 8017ba0:	18fb      	adds	r3, r7, r3
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	2b07      	cmp	r3, #7
 8017ba6:	d82e      	bhi.n	8017c06 <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	2427      	movs	r4, #39	; 0x27
 8017bae:	193b      	adds	r3, r7, r4
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	18d3      	adds	r3, r2, r3
 8017bb4:	781b      	ldrb	r3, [r3, #0]
 8017bb6:	001a      	movs	r2, r3
 8017bb8:	2018      	movs	r0, #24
 8017bba:	183b      	adds	r3, r7, r0
 8017bbc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017bbe:	183b      	adds	r3, r7, r0
 8017bc0:	681a      	ldr	r2, [r3, #0]
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6819      	ldr	r1, [r3, #0]
 8017bc6:	193b      	adds	r3, r7, r4
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	18cb      	adds	r3, r1, r3
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	021b      	lsls	r3, r3, #8
 8017bd2:	431a      	orrs	r2, r3
 8017bd4:	183b      	adds	r3, r7, r0
 8017bd6:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017bd8:	183b      	adds	r3, r7, r0
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	6819      	ldr	r1, [r3, #0]
 8017be0:	193b      	adds	r3, r7, r4
 8017be2:	781b      	ldrb	r3, [r3, #0]
 8017be4:	3302      	adds	r3, #2
 8017be6:	18cb      	adds	r3, r1, r3
 8017be8:	781b      	ldrb	r3, [r3, #0]
 8017bea:	041b      	lsls	r3, r3, #16
 8017bec:	431a      	orrs	r2, r3
 8017bee:	183b      	adds	r3, r7, r0
 8017bf0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8017bf2:	183b      	adds	r3, r7, r0
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	2264      	movs	r2, #100	; 0x64
 8017bf8:	435a      	muls	r2, r3
 8017bfa:	183b      	adds	r3, r7, r0
 8017bfc:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017bfe:	183b      	adds	r3, r7, r0
 8017c00:	2200      	movs	r2, #0
 8017c02:	605a      	str	r2, [r3, #4]
 8017c04:	e009      	b.n	8017c1a <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8017c06:	2118      	movs	r1, #24
 8017c08:	187b      	adds	r3, r7, r1
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8017c0e:	187b      	adds	r3, r7, r1
 8017c10:	2200      	movs	r2, #0
 8017c12:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8017c14:	187b      	adds	r3, r7, r1
 8017c16:	2200      	movs	r2, #0
 8017c18:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8017c1a:	2318      	movs	r3, #24
 8017c1c:	18fb      	adds	r3, r7, r3
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d00e      	beq.n	8017c42 <RegionIN865ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8017c24:	2110      	movs	r1, #16
 8017c26:	187b      	adds	r3, r7, r1
 8017c28:	2218      	movs	r2, #24
 8017c2a:	18ba      	adds	r2, r7, r2
 8017c2c:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8017c2e:	187b      	adds	r3, r7, r1
 8017c30:	2226      	movs	r2, #38	; 0x26
 8017c32:	18ba      	adds	r2, r7, r2
 8017c34:	7812      	ldrb	r2, [r2, #0]
 8017c36:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8017c38:	187b      	adds	r3, r7, r1
 8017c3a:	0018      	movs	r0, r3
 8017c3c:	f000 fd88 	bl	8018750 <RegionIN865ChannelAdd>
 8017c40:	e009      	b.n	8017c56 <RegionIN865ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017c42:	210c      	movs	r1, #12
 8017c44:	187b      	adds	r3, r7, r1
 8017c46:	2226      	movs	r2, #38	; 0x26
 8017c48:	18ba      	adds	r2, r7, r2
 8017c4a:	7812      	ldrb	r2, [r2, #0]
 8017c4c:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8017c4e:	187b      	adds	r3, r7, r1
 8017c50:	0018      	movs	r0, r3
 8017c52:	f000 fe37 	bl	80188c4 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017c56:	2227      	movs	r2, #39	; 0x27
 8017c58:	18bb      	adds	r3, r7, r2
 8017c5a:	18ba      	adds	r2, r7, r2
 8017c5c:	7812      	ldrb	r2, [r2, #0]
 8017c5e:	3203      	adds	r2, #3
 8017c60:	701a      	strb	r2, [r3, #0]
 8017c62:	2126      	movs	r1, #38	; 0x26
 8017c64:	187b      	adds	r3, r7, r1
 8017c66:	781a      	ldrb	r2, [r3, #0]
 8017c68:	187b      	adds	r3, r7, r1
 8017c6a:	3201      	adds	r2, #1
 8017c6c:	701a      	strb	r2, [r3, #0]
 8017c6e:	2326      	movs	r3, #38	; 0x26
 8017c70:	18fb      	adds	r3, r7, r3
 8017c72:	781b      	ldrb	r3, [r3, #0]
 8017c74:	2b0f      	cmp	r3, #15
 8017c76:	d992      	bls.n	8017b9e <RegionIN865ApplyCFList+0x3a>
 8017c78:	e002      	b.n	8017c80 <RegionIN865ApplyCFList+0x11c>
        return;
 8017c7a:	46c0      	nop			; (mov r8, r8)
 8017c7c:	e000      	b.n	8017c80 <RegionIN865ApplyCFList+0x11c>
        return;
 8017c7e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017c80:	46bd      	mov	sp, r7
 8017c82:	b00b      	add	sp, #44	; 0x2c
 8017c84:	bd90      	pop	{r4, r7, pc}
	...

08017c88 <RegionIN865ComputeRxWindowParameters>:
    }
    return true;
}

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c8a:	b08b      	sub	sp, #44	; 0x2c
 8017c8c:	af04      	add	r7, sp, #16
 8017c8e:	60ba      	str	r2, [r7, #8]
 8017c90:	607b      	str	r3, [r7, #4]
 8017c92:	250f      	movs	r5, #15
 8017c94:	197b      	adds	r3, r7, r5
 8017c96:	1c02      	adds	r2, r0, #0
 8017c98:	701a      	strb	r2, [r3, #0]
 8017c9a:	230e      	movs	r3, #14
 8017c9c:	18fb      	adds	r3, r7, r3
 8017c9e:	1c0a      	adds	r2, r1, #0
 8017ca0:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	2400      	movs	r4, #0
 8017ca6:	613b      	str	r3, [r7, #16]
 8017ca8:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8017caa:	197b      	adds	r3, r7, r5
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	b25a      	sxtb	r2, r3
 8017cb0:	2a07      	cmp	r2, #7
 8017cb2:	dd00      	ble.n	8017cb6 <RegionIN865ComputeRxWindowParameters+0x2e>
 8017cb4:	2307      	movs	r3, #7
 8017cb6:	b25a      	sxtb	r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	785b      	ldrb	r3, [r3, #1]
 8017cc0:	b25b      	sxtb	r3, r3
 8017cc2:	0018      	movs	r0, r3
 8017cc4:	f7ff fc6e 	bl	80175a4 <GetBandwidth>
 8017cc8:	0003      	movs	r3, r0
 8017cca:	b2da      	uxtb	r2, r3
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	785b      	ldrb	r3, [r3, #1]
 8017cd4:	b25b      	sxtb	r3, r3
 8017cd6:	2b07      	cmp	r3, #7
 8017cd8:	d10d      	bne.n	8017cf6 <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	785b      	ldrb	r3, [r3, #1]
 8017cde:	b25b      	sxtb	r3, r3
 8017ce0:	001a      	movs	r2, r3
 8017ce2:	4b1b      	ldr	r3, [pc, #108]	; (8017d50 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8017ce4:	5c9b      	ldrb	r3, [r3, r2]
 8017ce6:	0018      	movs	r0, r3
 8017ce8:	f7fc fe46 	bl	8014978 <RegionCommonComputeSymbolTimeFsk>
 8017cec:	0003      	movs	r3, r0
 8017cee:	000c      	movs	r4, r1
 8017cf0:	613b      	str	r3, [r7, #16]
 8017cf2:	617c      	str	r4, [r7, #20]
 8017cf4:	e013      	b.n	8017d1e <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	785b      	ldrb	r3, [r3, #1]
 8017cfa:	b25b      	sxtb	r3, r3
 8017cfc:	001a      	movs	r2, r3
 8017cfe:	4b14      	ldr	r3, [pc, #80]	; (8017d50 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8017d00:	5c98      	ldrb	r0, [r3, r2]
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	785b      	ldrb	r3, [r3, #1]
 8017d06:	b25b      	sxtb	r3, r3
 8017d08:	001a      	movs	r2, r3
 8017d0a:	4b12      	ldr	r3, [pc, #72]	; (8017d54 <RegionIN865ComputeRxWindowParameters+0xcc>)
 8017d0c:	0092      	lsls	r2, r2, #2
 8017d0e:	58d3      	ldr	r3, [r2, r3]
 8017d10:	0019      	movs	r1, r3
 8017d12:	f7fc fe05 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 8017d16:	0003      	movs	r3, r0
 8017d18:	000c      	movs	r4, r1
 8017d1a:	613b      	str	r3, [r7, #16]
 8017d1c:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017d1e:	4b0e      	ldr	r3, [pc, #56]	; (8017d58 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8017d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d22:	4798      	blx	r3
 8017d24:	0006      	movs	r6, r0
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	3308      	adds	r3, #8
 8017d2a:	687a      	ldr	r2, [r7, #4]
 8017d2c:	320c      	adds	r2, #12
 8017d2e:	68bd      	ldr	r5, [r7, #8]
 8017d30:	210e      	movs	r1, #14
 8017d32:	1879      	adds	r1, r7, r1
 8017d34:	780c      	ldrb	r4, [r1, #0]
 8017d36:	6938      	ldr	r0, [r7, #16]
 8017d38:	6979      	ldr	r1, [r7, #20]
 8017d3a:	9202      	str	r2, [sp, #8]
 8017d3c:	9301      	str	r3, [sp, #4]
 8017d3e:	9600      	str	r6, [sp, #0]
 8017d40:	002b      	movs	r3, r5
 8017d42:	0022      	movs	r2, r4
 8017d44:	f7fc fe34 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 8017d48:	46c0      	nop			; (mov r8, r8)
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	b007      	add	sp, #28
 8017d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d50:	08028f68 	.word	0x08028f68
 8017d54:	08028f70 	.word	0x08028f70
 8017d58:	080293d8 	.word	0x080293d8

08017d5c <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d5e:	b091      	sub	sp, #68	; 0x44
 8017d60:	af0a      	add	r7, sp, #40	; 0x28
 8017d62:	6078      	str	r0, [r7, #4]
 8017d64:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017d66:	230f      	movs	r3, #15
 8017d68:	18fb      	adds	r3, r7, r3
 8017d6a:	687a      	ldr	r2, [r7, #4]
 8017d6c:	7852      	ldrb	r2, [r2, #1]
 8017d6e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8017d70:	2316      	movs	r3, #22
 8017d72:	18fb      	adds	r3, r7, r3
 8017d74:	2200      	movs	r2, #0
 8017d76:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8017d78:	230e      	movs	r3, #14
 8017d7a:	18fb      	adds	r3, r7, r3
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	685b      	ldr	r3, [r3, #4]
 8017d84:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017d86:	4b64      	ldr	r3, [pc, #400]	; (8017f18 <RegionIN865RxConfig+0x1bc>)
 8017d88:	68db      	ldr	r3, [r3, #12]
 8017d8a:	4798      	blx	r3
 8017d8c:	1e03      	subs	r3, r0, #0
 8017d8e:	d001      	beq.n	8017d94 <RegionIN865RxConfig+0x38>
    {
        return false;
 8017d90:	2300      	movs	r3, #0
 8017d92:	e0bc      	b.n	8017f0e <RegionIN865RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	7cdb      	ldrb	r3, [r3, #19]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d122      	bne.n	8017de2 <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	781b      	ldrb	r3, [r3, #0]
 8017da0:	0019      	movs	r1, r3
 8017da2:	4a5e      	ldr	r2, [pc, #376]	; (8017f1c <RegionIN865RxConfig+0x1c0>)
 8017da4:	000b      	movs	r3, r1
 8017da6:	005b      	lsls	r3, r3, #1
 8017da8:	185b      	adds	r3, r3, r1
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	589b      	ldr	r3, [r3, r2]
 8017dae:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	0019      	movs	r1, r3
 8017db6:	4a59      	ldr	r2, [pc, #356]	; (8017f1c <RegionIN865RxConfig+0x1c0>)
 8017db8:	000b      	movs	r3, r1
 8017dba:	005b      	lsls	r3, r3, #1
 8017dbc:	185b      	adds	r3, r3, r1
 8017dbe:	009b      	lsls	r3, r3, #2
 8017dc0:	18d3      	adds	r3, r2, r3
 8017dc2:	3304      	adds	r3, #4
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00b      	beq.n	8017de2 <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	0019      	movs	r1, r3
 8017dd0:	4a52      	ldr	r2, [pc, #328]	; (8017f1c <RegionIN865RxConfig+0x1c0>)
 8017dd2:	000b      	movs	r3, r1
 8017dd4:	005b      	lsls	r3, r3, #1
 8017dd6:	185b      	adds	r3, r3, r1
 8017dd8:	009b      	lsls	r3, r3, #2
 8017dda:	18d3      	adds	r3, r2, r3
 8017ddc:	3304      	adds	r3, #4
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8017de2:	240f      	movs	r4, #15
 8017de4:	193b      	adds	r3, r7, r4
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	b25b      	sxtb	r3, r3
 8017dea:	4a4d      	ldr	r2, [pc, #308]	; (8017f20 <RegionIN865RxConfig+0x1c4>)
 8017dec:	5cd2      	ldrb	r2, [r2, r3]
 8017dee:	230e      	movs	r3, #14
 8017df0:	18fb      	adds	r3, r7, r3
 8017df2:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8017df4:	4b48      	ldr	r3, [pc, #288]	; (8017f18 <RegionIN865RxConfig+0x1bc>)
 8017df6:	695b      	ldr	r3, [r3, #20]
 8017df8:	693a      	ldr	r2, [r7, #16]
 8017dfa:	0010      	movs	r0, r2
 8017dfc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017dfe:	193b      	adds	r3, r7, r4
 8017e00:	781b      	ldrb	r3, [r3, #0]
 8017e02:	b25b      	sxtb	r3, r3
 8017e04:	2b07      	cmp	r3, #7
 8017e06:	d12f      	bne.n	8017e68 <RegionIN865RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8017e08:	2117      	movs	r1, #23
 8017e0a:	187b      	adds	r3, r7, r1
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017e10:	4b41      	ldr	r3, [pc, #260]	; (8017f18 <RegionIN865RxConfig+0x1bc>)
 8017e12:	6a1c      	ldr	r4, [r3, #32]
 8017e14:	230e      	movs	r3, #14
 8017e16:	18fb      	adds	r3, r7, r3
 8017e18:	2200      	movs	r2, #0
 8017e1a:	569a      	ldrsb	r2, [r3, r2]
 8017e1c:	0013      	movs	r3, r2
 8017e1e:	015b      	lsls	r3, r3, #5
 8017e20:	1a9b      	subs	r3, r3, r2
 8017e22:	009b      	lsls	r3, r3, #2
 8017e24:	189b      	adds	r3, r3, r2
 8017e26:	00db      	lsls	r3, r3, #3
 8017e28:	001e      	movs	r6, r3
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	689b      	ldr	r3, [r3, #8]
 8017e2e:	b29b      	uxth	r3, r3
 8017e30:	687a      	ldr	r2, [r7, #4]
 8017e32:	7c92      	ldrb	r2, [r2, #18]
 8017e34:	4d3b      	ldr	r5, [pc, #236]	; (8017f24 <RegionIN865RxConfig+0x1c8>)
 8017e36:	1879      	adds	r1, r7, r1
 8017e38:	7808      	ldrb	r0, [r1, #0]
 8017e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	9208      	str	r2, [sp, #32]
 8017e40:	2200      	movs	r2, #0
 8017e42:	9207      	str	r2, [sp, #28]
 8017e44:	2200      	movs	r2, #0
 8017e46:	9206      	str	r2, [sp, #24]
 8017e48:	2201      	movs	r2, #1
 8017e4a:	9205      	str	r2, [sp, #20]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	9204      	str	r2, [sp, #16]
 8017e50:	2200      	movs	r2, #0
 8017e52:	9203      	str	r2, [sp, #12]
 8017e54:	9302      	str	r3, [sp, #8]
 8017e56:	2305      	movs	r3, #5
 8017e58:	9301      	str	r3, [sp, #4]
 8017e5a:	4b33      	ldr	r3, [pc, #204]	; (8017f28 <RegionIN865RxConfig+0x1cc>)
 8017e5c:	9300      	str	r3, [sp, #0]
 8017e5e:	2300      	movs	r3, #0
 8017e60:	0032      	movs	r2, r6
 8017e62:	0029      	movs	r1, r5
 8017e64:	47a0      	blx	r4
 8017e66:	e029      	b.n	8017ebc <RegionIN865RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8017e68:	2117      	movs	r1, #23
 8017e6a:	187b      	adds	r3, r7, r1
 8017e6c:	2201      	movs	r2, #1
 8017e6e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017e70:	4b29      	ldr	r3, [pc, #164]	; (8017f18 <RegionIN865RxConfig+0x1bc>)
 8017e72:	6a1c      	ldr	r4, [r3, #32]
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	789b      	ldrb	r3, [r3, #2]
 8017e78:	001e      	movs	r6, r3
 8017e7a:	230e      	movs	r3, #14
 8017e7c:	18fb      	adds	r3, r7, r3
 8017e7e:	2500      	movs	r5, #0
 8017e80:	575d      	ldrsb	r5, [r3, r5]
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	689b      	ldr	r3, [r3, #8]
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	687a      	ldr	r2, [r7, #4]
 8017e8a:	7c92      	ldrb	r2, [r2, #18]
 8017e8c:	1879      	adds	r1, r7, r1
 8017e8e:	7808      	ldrb	r0, [r1, #0]
 8017e90:	9209      	str	r2, [sp, #36]	; 0x24
 8017e92:	2201      	movs	r2, #1
 8017e94:	9208      	str	r2, [sp, #32]
 8017e96:	2200      	movs	r2, #0
 8017e98:	9207      	str	r2, [sp, #28]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	9206      	str	r2, [sp, #24]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	9205      	str	r2, [sp, #20]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	9204      	str	r2, [sp, #16]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	9203      	str	r2, [sp, #12]
 8017eaa:	9302      	str	r3, [sp, #8]
 8017eac:	2308      	movs	r3, #8
 8017eae:	9301      	str	r3, [sp, #4]
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	9300      	str	r3, [sp, #0]
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	002a      	movs	r2, r5
 8017eb8:	0031      	movs	r1, r6
 8017eba:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	7c5b      	ldrb	r3, [r3, #17]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d009      	beq.n	8017ed8 <RegionIN865RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8017ec4:	230f      	movs	r3, #15
 8017ec6:	18fb      	adds	r3, r7, r3
 8017ec8:	2200      	movs	r2, #0
 8017eca:	569a      	ldrsb	r2, [r3, r2]
 8017ecc:	2316      	movs	r3, #22
 8017ece:	18fb      	adds	r3, r7, r3
 8017ed0:	4916      	ldr	r1, [pc, #88]	; (8017f2c <RegionIN865RxConfig+0x1d0>)
 8017ed2:	5c8a      	ldrb	r2, [r1, r2]
 8017ed4:	701a      	strb	r2, [r3, #0]
 8017ed6:	e008      	b.n	8017eea <RegionIN865RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8017ed8:	230f      	movs	r3, #15
 8017eda:	18fb      	adds	r3, r7, r3
 8017edc:	2200      	movs	r2, #0
 8017ede:	569a      	ldrsb	r2, [r3, r2]
 8017ee0:	2316      	movs	r3, #22
 8017ee2:	18fb      	adds	r3, r7, r3
 8017ee4:	4912      	ldr	r1, [pc, #72]	; (8017f30 <RegionIN865RxConfig+0x1d4>)
 8017ee6:	5c8a      	ldrb	r2, [r1, r2]
 8017ee8:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8017eea:	4b0b      	ldr	r3, [pc, #44]	; (8017f18 <RegionIN865RxConfig+0x1bc>)
 8017eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017eee:	2216      	movs	r2, #22
 8017ef0:	18ba      	adds	r2, r7, r2
 8017ef2:	7812      	ldrb	r2, [r2, #0]
 8017ef4:	320d      	adds	r2, #13
 8017ef6:	b2d1      	uxtb	r1, r2
 8017ef8:	2217      	movs	r2, #23
 8017efa:	18ba      	adds	r2, r7, r2
 8017efc:	7812      	ldrb	r2, [r2, #0]
 8017efe:	0010      	movs	r0, r2
 8017f00:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	220f      	movs	r2, #15
 8017f06:	18ba      	adds	r2, r7, r2
 8017f08:	7812      	ldrb	r2, [r2, #0]
 8017f0a:	701a      	strb	r2, [r3, #0]
    return true;
 8017f0c:	2301      	movs	r3, #1
}
 8017f0e:	0018      	movs	r0, r3
 8017f10:	46bd      	mov	sp, r7
 8017f12:	b007      	add	sp, #28
 8017f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f16:	46c0      	nop			; (mov r8, r8)
 8017f18:	080293d8 	.word	0x080293d8
 8017f1c:	20001788 	.word	0x20001788
 8017f20:	08028f68 	.word	0x08028f68
 8017f24:	0000c350 	.word	0x0000c350
 8017f28:	00014585 	.word	0x00014585
 8017f2c:	08028f98 	.word	0x08028f98
 8017f30:	08028f90 	.word	0x08028f90

08017f34 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f36:	b093      	sub	sp, #76	; 0x4c
 8017f38:	af0a      	add	r7, sp, #40	; 0x28
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	785b      	ldrb	r3, [r3, #1]
 8017f44:	b25b      	sxtb	r3, r3
 8017f46:	001a      	movs	r2, r3
 8017f48:	4b60      	ldr	r3, [pc, #384]	; (80180cc <RegionIN865TxConfig+0x198>)
 8017f4a:	5c9a      	ldrb	r2, [r3, r2]
 8017f4c:	231e      	movs	r3, #30
 8017f4e:	18fb      	adds	r3, r7, r3
 8017f50:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	2002      	movs	r0, #2
 8017f56:	5618      	ldrsb	r0, [r3, r0]
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	0019      	movs	r1, r3
 8017f5e:	4a5c      	ldr	r2, [pc, #368]	; (80180d0 <RegionIN865TxConfig+0x19c>)
 8017f60:	000b      	movs	r3, r1
 8017f62:	005b      	lsls	r3, r3, #1
 8017f64:	185b      	adds	r3, r3, r1
 8017f66:	009b      	lsls	r3, r3, #2
 8017f68:	18d3      	adds	r3, r2, r3
 8017f6a:	3309      	adds	r3, #9
 8017f6c:	781b      	ldrb	r3, [r3, #0]
 8017f6e:	4a58      	ldr	r2, [pc, #352]	; (80180d0 <RegionIN865TxConfig+0x19c>)
 8017f70:	330c      	adds	r3, #12
 8017f72:	011b      	lsls	r3, r3, #4
 8017f74:	18d3      	adds	r3, r2, r3
 8017f76:	3302      	adds	r3, #2
 8017f78:	2100      	movs	r1, #0
 8017f7a:	5659      	ldrsb	r1, [r3, r1]
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	2201      	movs	r2, #1
 8017f80:	569a      	ldrsb	r2, [r3, r2]
 8017f82:	251d      	movs	r5, #29
 8017f84:	197c      	adds	r4, r7, r5
 8017f86:	4b53      	ldr	r3, [pc, #332]	; (80180d4 <RegionIN865TxConfig+0x1a0>)
 8017f88:	f7ff fb2a 	bl	80175e0 <LimitTxPower>
 8017f8c:	0003      	movs	r3, r0
 8017f8e:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	785b      	ldrb	r3, [r3, #1]
 8017f94:	b25b      	sxtb	r3, r3
 8017f96:	0018      	movs	r0, r3
 8017f98:	f7ff fb04 	bl	80175a4 <GetBandwidth>
 8017f9c:	0003      	movs	r3, r0
 8017f9e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8017fa0:	2017      	movs	r0, #23
 8017fa2:	183b      	adds	r3, r7, r0
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	6859      	ldr	r1, [r3, #4]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	689a      	ldr	r2, [r3, #8]
 8017fb0:	183c      	adds	r4, r7, r0
 8017fb2:	197b      	adds	r3, r7, r5
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	b25b      	sxtb	r3, r3
 8017fb8:	0018      	movs	r0, r3
 8017fba:	f7fc fd7d 	bl	8014ab8 <RegionCommonComputeTxPower>
 8017fbe:	0003      	movs	r3, r0
 8017fc0:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8017fc2:	4b45      	ldr	r3, [pc, #276]	; (80180d8 <RegionIN865TxConfig+0x1a4>)
 8017fc4:	695a      	ldr	r2, [r3, #20]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	781b      	ldrb	r3, [r3, #0]
 8017fca:	0018      	movs	r0, r3
 8017fcc:	4940      	ldr	r1, [pc, #256]	; (80180d0 <RegionIN865TxConfig+0x19c>)
 8017fce:	0003      	movs	r3, r0
 8017fd0:	005b      	lsls	r3, r3, #1
 8017fd2:	181b      	adds	r3, r3, r0
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	585b      	ldr	r3, [r3, r1]
 8017fd8:	0018      	movs	r0, r3
 8017fda:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	785b      	ldrb	r3, [r3, #1]
 8017fe0:	b25b      	sxtb	r3, r3
 8017fe2:	2b07      	cmp	r3, #7
 8017fe4:	d12d      	bne.n	8018042 <RegionIN865TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017fe6:	201f      	movs	r0, #31
 8017fe8:	183b      	adds	r3, r7, r0
 8017fea:	2200      	movs	r2, #0
 8017fec:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8017fee:	4b3a      	ldr	r3, [pc, #232]	; (80180d8 <RegionIN865TxConfig+0x1a4>)
 8017ff0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017ff2:	231e      	movs	r3, #30
 8017ff4:	18fb      	adds	r3, r7, r3
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	569a      	ldrsb	r2, [r3, r2]
 8017ffa:	0013      	movs	r3, r2
 8017ffc:	015b      	lsls	r3, r3, #5
 8017ffe:	1a9b      	subs	r3, r3, r2
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	189b      	adds	r3, r3, r2
 8018004:	00db      	lsls	r3, r3, #3
 8018006:	001d      	movs	r5, r3
 8018008:	69ba      	ldr	r2, [r7, #24]
 801800a:	4e34      	ldr	r6, [pc, #208]	; (80180dc <RegionIN865TxConfig+0x1a8>)
 801800c:	2317      	movs	r3, #23
 801800e:	18fb      	adds	r3, r7, r3
 8018010:	2100      	movs	r1, #0
 8018012:	5659      	ldrsb	r1, [r3, r1]
 8018014:	183b      	adds	r3, r7, r0
 8018016:	7818      	ldrb	r0, [r3, #0]
 8018018:	4b31      	ldr	r3, [pc, #196]	; (80180e0 <RegionIN865TxConfig+0x1ac>)
 801801a:	9308      	str	r3, [sp, #32]
 801801c:	2300      	movs	r3, #0
 801801e:	9307      	str	r3, [sp, #28]
 8018020:	2300      	movs	r3, #0
 8018022:	9306      	str	r3, [sp, #24]
 8018024:	2300      	movs	r3, #0
 8018026:	9305      	str	r3, [sp, #20]
 8018028:	2301      	movs	r3, #1
 801802a:	9304      	str	r3, [sp, #16]
 801802c:	2300      	movs	r3, #0
 801802e:	9303      	str	r3, [sp, #12]
 8018030:	2305      	movs	r3, #5
 8018032:	9302      	str	r3, [sp, #8]
 8018034:	2300      	movs	r3, #0
 8018036:	9301      	str	r3, [sp, #4]
 8018038:	9500      	str	r5, [sp, #0]
 801803a:	0013      	movs	r3, r2
 801803c:	0032      	movs	r2, r6
 801803e:	47a0      	blx	r4
 8018040:	e024      	b.n	801808c <RegionIN865TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8018042:	201f      	movs	r0, #31
 8018044:	183b      	adds	r3, r7, r0
 8018046:	2201      	movs	r2, #1
 8018048:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801804a:	4b23      	ldr	r3, [pc, #140]	; (80180d8 <RegionIN865TxConfig+0x1a4>)
 801804c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801804e:	231e      	movs	r3, #30
 8018050:	18fb      	adds	r3, r7, r3
 8018052:	781b      	ldrb	r3, [r3, #0]
 8018054:	b25b      	sxtb	r3, r3
 8018056:	69bd      	ldr	r5, [r7, #24]
 8018058:	2217      	movs	r2, #23
 801805a:	18ba      	adds	r2, r7, r2
 801805c:	2100      	movs	r1, #0
 801805e:	5651      	ldrsb	r1, [r2, r1]
 8018060:	183a      	adds	r2, r7, r0
 8018062:	7810      	ldrb	r0, [r2, #0]
 8018064:	4a1e      	ldr	r2, [pc, #120]	; (80180e0 <RegionIN865TxConfig+0x1ac>)
 8018066:	9208      	str	r2, [sp, #32]
 8018068:	2200      	movs	r2, #0
 801806a:	9207      	str	r2, [sp, #28]
 801806c:	2200      	movs	r2, #0
 801806e:	9206      	str	r2, [sp, #24]
 8018070:	2200      	movs	r2, #0
 8018072:	9205      	str	r2, [sp, #20]
 8018074:	2201      	movs	r2, #1
 8018076:	9204      	str	r2, [sp, #16]
 8018078:	2200      	movs	r2, #0
 801807a:	9203      	str	r2, [sp, #12]
 801807c:	2208      	movs	r2, #8
 801807e:	9202      	str	r2, [sp, #8]
 8018080:	2201      	movs	r2, #1
 8018082:	9201      	str	r2, [sp, #4]
 8018084:	9300      	str	r3, [sp, #0]
 8018086:	002b      	movs	r3, r5
 8018088:	2200      	movs	r2, #0
 801808a:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801808c:	4b12      	ldr	r3, [pc, #72]	; (80180d8 <RegionIN865TxConfig+0x1a4>)
 801808e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018090:	68fa      	ldr	r2, [r7, #12]
 8018092:	8992      	ldrh	r2, [r2, #12]
 8018094:	b2d1      	uxtb	r1, r2
 8018096:	241f      	movs	r4, #31
 8018098:	193a      	adds	r2, r7, r4
 801809a:	7812      	ldrb	r2, [r2, #0]
 801809c:	0010      	movs	r0, r2
 801809e:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 80180a0:	4b0d      	ldr	r3, [pc, #52]	; (80180d8 <RegionIN865TxConfig+0x1a4>)
 80180a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180a4:	68fa      	ldr	r2, [r7, #12]
 80180a6:	8992      	ldrh	r2, [r2, #12]
 80180a8:	b2d1      	uxtb	r1, r2
 80180aa:	193a      	adds	r2, r7, r4
 80180ac:	7812      	ldrb	r2, [r2, #0]
 80180ae:	0010      	movs	r0, r2
 80180b0:	4798      	blx	r3
 80180b2:	0002      	movs	r2, r0
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	221d      	movs	r2, #29
 80180bc:	18ba      	adds	r2, r7, r2
 80180be:	7812      	ldrb	r2, [r2, #0]
 80180c0:	701a      	strb	r2, [r3, #0]
    return true;
 80180c2:	2301      	movs	r3, #1
}
 80180c4:	0018      	movs	r0, r3
 80180c6:	46bd      	mov	sp, r7
 80180c8:	b009      	add	sp, #36	; 0x24
 80180ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180cc:	08028f68 	.word	0x08028f68
 80180d0:	20001788 	.word	0x20001788
 80180d4:	20001858 	.word	0x20001858
 80180d8:	080293d8 	.word	0x080293d8
 80180dc:	000061a8 	.word	0x000061a8
 80180e0:	00000bb8 	.word	0x00000bb8

080180e4 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80180e4:	b5b0      	push	{r4, r5, r7, lr}
 80180e6:	b092      	sub	sp, #72	; 0x48
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	60f8      	str	r0, [r7, #12]
 80180ec:	60b9      	str	r1, [r7, #8]
 80180ee:	607a      	str	r2, [r7, #4]
 80180f0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80180f2:	2347      	movs	r3, #71	; 0x47
 80180f4:	18fb      	adds	r3, r7, r3
 80180f6:	2207      	movs	r2, #7
 80180f8:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80180fa:	2344      	movs	r3, #68	; 0x44
 80180fc:	18fb      	adds	r3, r7, r3
 80180fe:	2200      	movs	r2, #0
 8018100:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8018102:	2346      	movs	r3, #70	; 0x46
 8018104:	18fb      	adds	r3, r7, r3
 8018106:	2200      	movs	r2, #0
 8018108:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801810a:	233a      	movs	r3, #58	; 0x3a
 801810c:	18fb      	adds	r3, r7, r3
 801810e:	2200      	movs	r2, #0
 8018110:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018112:	e09e      	b.n	8018252 <RegionIN865LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	685a      	ldr	r2, [r3, #4]
 8018118:	2346      	movs	r3, #70	; 0x46
 801811a:	18fb      	adds	r3, r7, r3
 801811c:	781b      	ldrb	r3, [r3, #0]
 801811e:	18d3      	adds	r3, r2, r3
 8018120:	2544      	movs	r5, #68	; 0x44
 8018122:	197c      	adds	r4, r7, r5
 8018124:	223c      	movs	r2, #60	; 0x3c
 8018126:	18ba      	adds	r2, r7, r2
 8018128:	0011      	movs	r1, r2
 801812a:	0018      	movs	r0, r3
 801812c:	f7fc fafc 	bl	8014728 <RegionCommonParseLinkAdrReq>
 8018130:	0003      	movs	r3, r0
 8018132:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8018134:	197b      	adds	r3, r7, r5
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d100      	bne.n	801813e <RegionIN865LinkAdrReq+0x5a>
 801813c:	e092      	b.n	8018264 <RegionIN865LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801813e:	2246      	movs	r2, #70	; 0x46
 8018140:	18bb      	adds	r3, r7, r2
 8018142:	18b9      	adds	r1, r7, r2
 8018144:	2244      	movs	r2, #68	; 0x44
 8018146:	18ba      	adds	r2, r7, r2
 8018148:	7809      	ldrb	r1, [r1, #0]
 801814a:	7812      	ldrb	r2, [r2, #0]
 801814c:	188a      	adds	r2, r1, r2
 801814e:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018150:	2347      	movs	r3, #71	; 0x47
 8018152:	18fb      	adds	r3, r7, r3
 8018154:	2207      	movs	r2, #7
 8018156:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018158:	213c      	movs	r1, #60	; 0x3c
 801815a:	187b      	adds	r3, r7, r1
 801815c:	889a      	ldrh	r2, [r3, #4]
 801815e:	233a      	movs	r3, #58	; 0x3a
 8018160:	18fb      	adds	r3, r7, r3
 8018162:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018164:	187b      	adds	r3, r7, r1
 8018166:	78db      	ldrb	r3, [r3, #3]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d10c      	bne.n	8018186 <RegionIN865LinkAdrReq+0xa2>
 801816c:	233a      	movs	r3, #58	; 0x3a
 801816e:	18fb      	adds	r3, r7, r3
 8018170:	881b      	ldrh	r3, [r3, #0]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d107      	bne.n	8018186 <RegionIN865LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8018176:	2247      	movs	r2, #71	; 0x47
 8018178:	18bb      	adds	r3, r7, r2
 801817a:	18ba      	adds	r2, r7, r2
 801817c:	7812      	ldrb	r2, [r2, #0]
 801817e:	2101      	movs	r1, #1
 8018180:	438a      	bics	r2, r1
 8018182:	701a      	strb	r2, [r3, #0]
 8018184:	e065      	b.n	8018252 <RegionIN865LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018186:	233c      	movs	r3, #60	; 0x3c
 8018188:	18fb      	adds	r3, r7, r3
 801818a:	78db      	ldrb	r3, [r3, #3]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d004      	beq.n	801819a <RegionIN865LinkAdrReq+0xb6>
 8018190:	233c      	movs	r3, #60	; 0x3c
 8018192:	18fb      	adds	r3, r7, r3
 8018194:	78db      	ldrb	r3, [r3, #3]
 8018196:	2b05      	cmp	r3, #5
 8018198:	d904      	bls.n	80181a4 <RegionIN865LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801819a:	233c      	movs	r3, #60	; 0x3c
 801819c:	18fb      	adds	r3, r7, r3
 801819e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80181a0:	2b06      	cmp	r3, #6
 80181a2:	d907      	bls.n	80181b4 <RegionIN865LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80181a4:	2247      	movs	r2, #71	; 0x47
 80181a6:	18bb      	adds	r3, r7, r2
 80181a8:	18ba      	adds	r2, r7, r2
 80181aa:	7812      	ldrb	r2, [r2, #0]
 80181ac:	2101      	movs	r1, #1
 80181ae:	438a      	bics	r2, r1
 80181b0:	701a      	strb	r2, [r3, #0]
 80181b2:	e04e      	b.n	8018252 <RegionIN865LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80181b4:	2345      	movs	r3, #69	; 0x45
 80181b6:	18fb      	adds	r3, r7, r3
 80181b8:	2200      	movs	r2, #0
 80181ba:	701a      	strb	r2, [r3, #0]
 80181bc:	e044      	b.n	8018248 <RegionIN865LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80181be:	233c      	movs	r3, #60	; 0x3c
 80181c0:	18fb      	adds	r3, r7, r3
 80181c2:	78db      	ldrb	r3, [r3, #3]
 80181c4:	2b06      	cmp	r3, #6
 80181c6:	d11b      	bne.n	8018200 <RegionIN865LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80181c8:	2345      	movs	r3, #69	; 0x45
 80181ca:	18fb      	adds	r3, r7, r3
 80181cc:	781a      	ldrb	r2, [r3, #0]
 80181ce:	4974      	ldr	r1, [pc, #464]	; (80183a0 <RegionIN865LinkAdrReq+0x2bc>)
 80181d0:	0013      	movs	r3, r2
 80181d2:	005b      	lsls	r3, r3, #1
 80181d4:	189b      	adds	r3, r3, r2
 80181d6:	009b      	lsls	r3, r3, #2
 80181d8:	585b      	ldr	r3, [r3, r1]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d02e      	beq.n	801823c <RegionIN865LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 80181de:	2345      	movs	r3, #69	; 0x45
 80181e0:	18fb      	adds	r3, r7, r3
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	2201      	movs	r2, #1
 80181e6:	409a      	lsls	r2, r3
 80181e8:	0013      	movs	r3, r2
 80181ea:	b21a      	sxth	r2, r3
 80181ec:	213a      	movs	r1, #58	; 0x3a
 80181ee:	187b      	adds	r3, r7, r1
 80181f0:	881b      	ldrh	r3, [r3, #0]
 80181f2:	b21b      	sxth	r3, r3
 80181f4:	4313      	orrs	r3, r2
 80181f6:	b21b      	sxth	r3, r3
 80181f8:	b29a      	uxth	r2, r3
 80181fa:	187b      	adds	r3, r7, r1
 80181fc:	801a      	strh	r2, [r3, #0]
 80181fe:	e01d      	b.n	801823c <RegionIN865LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018200:	233a      	movs	r3, #58	; 0x3a
 8018202:	18fb      	adds	r3, r7, r3
 8018204:	881b      	ldrh	r3, [r3, #0]
 8018206:	001a      	movs	r2, r3
 8018208:	2345      	movs	r3, #69	; 0x45
 801820a:	18fb      	adds	r3, r7, r3
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	411a      	asrs	r2, r3
 8018210:	0013      	movs	r3, r2
 8018212:	2201      	movs	r2, #1
 8018214:	4013      	ands	r3, r2
 8018216:	d011      	beq.n	801823c <RegionIN865LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018218:	2345      	movs	r3, #69	; 0x45
 801821a:	18fb      	adds	r3, r7, r3
 801821c:	781a      	ldrb	r2, [r3, #0]
 801821e:	4960      	ldr	r1, [pc, #384]	; (80183a0 <RegionIN865LinkAdrReq+0x2bc>)
 8018220:	0013      	movs	r3, r2
 8018222:	005b      	lsls	r3, r3, #1
 8018224:	189b      	adds	r3, r3, r2
 8018226:	009b      	lsls	r3, r3, #2
 8018228:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801822a:	2b00      	cmp	r3, #0
 801822c:	d106      	bne.n	801823c <RegionIN865LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801822e:	2247      	movs	r2, #71	; 0x47
 8018230:	18bb      	adds	r3, r7, r2
 8018232:	18ba      	adds	r2, r7, r2
 8018234:	7812      	ldrb	r2, [r2, #0]
 8018236:	2101      	movs	r1, #1
 8018238:	438a      	bics	r2, r1
 801823a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 801823c:	2145      	movs	r1, #69	; 0x45
 801823e:	187b      	adds	r3, r7, r1
 8018240:	781a      	ldrb	r2, [r3, #0]
 8018242:	187b      	adds	r3, r7, r1
 8018244:	3201      	adds	r2, #1
 8018246:	701a      	strb	r2, [r3, #0]
 8018248:	2345      	movs	r3, #69	; 0x45
 801824a:	18fb      	adds	r3, r7, r3
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	2b0f      	cmp	r3, #15
 8018250:	d9b5      	bls.n	80181be <RegionIN865LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	7a1b      	ldrb	r3, [r3, #8]
 8018256:	2246      	movs	r2, #70	; 0x46
 8018258:	18ba      	adds	r2, r7, r2
 801825a:	7812      	ldrb	r2, [r2, #0]
 801825c:	429a      	cmp	r2, r3
 801825e:	d200      	bcs.n	8018262 <RegionIN865LinkAdrReq+0x17e>
 8018260:	e758      	b.n	8018114 <RegionIN865LinkAdrReq+0x30>
 8018262:	e000      	b.n	8018266 <RegionIN865LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8018264:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8018266:	233c      	movs	r3, #60	; 0x3c
 8018268:	18fb      	adds	r3, r7, r3
 801826a:	785b      	ldrb	r3, [r3, #1]
 801826c:	b25b      	sxtb	r3, r3
 801826e:	2b06      	cmp	r3, #6
 8018270:	d063      	beq.n	801833a <RegionIN865LinkAdrReq+0x256>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8018272:	2134      	movs	r1, #52	; 0x34
 8018274:	187b      	adds	r3, r7, r1
 8018276:	2201      	movs	r2, #1
 8018278:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	7a5a      	ldrb	r2, [r3, #9]
 801827e:	187b      	adds	r3, r7, r1
 8018280:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 8018282:	187b      	adds	r3, r7, r1
 8018284:	0018      	movs	r0, r3
 8018286:	f7ff fae1 	bl	801784c <RegionIN865GetPhyParam>
 801828a:	0003      	movs	r3, r0
 801828c:	001a      	movs	r2, r3
 801828e:	2030      	movs	r0, #48	; 0x30
 8018290:	183b      	adds	r3, r7, r0
 8018292:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 8018294:	2110      	movs	r1, #16
 8018296:	187b      	adds	r3, r7, r1
 8018298:	2447      	movs	r4, #71	; 0x47
 801829a:	193a      	adds	r2, r7, r4
 801829c:	7812      	ldrb	r2, [r2, #0]
 801829e:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	7a9a      	ldrb	r2, [r3, #10]
 80182a4:	187b      	adds	r3, r7, r1
 80182a6:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80182a8:	253c      	movs	r5, #60	; 0x3c
 80182aa:	197b      	adds	r3, r7, r5
 80182ac:	2201      	movs	r2, #1
 80182ae:	569a      	ldrsb	r2, [r3, r2]
 80182b0:	187b      	adds	r3, r7, r1
 80182b2:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80182b4:	197b      	adds	r3, r7, r5
 80182b6:	2202      	movs	r2, #2
 80182b8:	569a      	ldrsb	r2, [r3, r2]
 80182ba:	187b      	adds	r3, r7, r1
 80182bc:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80182be:	197b      	adds	r3, r7, r5
 80182c0:	781a      	ldrb	r2, [r3, #0]
 80182c2:	187b      	adds	r3, r7, r1
 80182c4:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	220b      	movs	r2, #11
 80182ca:	569a      	ldrsb	r2, [r3, r2]
 80182cc:	187b      	adds	r3, r7, r1
 80182ce:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	220c      	movs	r2, #12
 80182d4:	569a      	ldrsb	r2, [r3, r2]
 80182d6:	187b      	adds	r3, r7, r1
 80182d8:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	7b5b      	ldrb	r3, [r3, #13]
 80182de:	b25a      	sxtb	r2, r3
 80182e0:	187b      	adds	r3, r7, r1
 80182e2:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 80182e4:	187b      	adds	r3, r7, r1
 80182e6:	2210      	movs	r2, #16
 80182e8:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 80182ea:	187b      	adds	r3, r7, r1
 80182ec:	223a      	movs	r2, #58	; 0x3a
 80182ee:	18ba      	adds	r2, r7, r2
 80182f0:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80182f2:	183b      	adds	r3, r7, r0
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	b25a      	sxtb	r2, r3
 80182f8:	0008      	movs	r0, r1
 80182fa:	183b      	adds	r3, r7, r0
 80182fc:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 80182fe:	183b      	adds	r3, r7, r0
 8018300:	2207      	movs	r2, #7
 8018302:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018304:	183b      	adds	r3, r7, r0
 8018306:	4a26      	ldr	r2, [pc, #152]	; (80183a0 <RegionIN865LinkAdrReq+0x2bc>)
 8018308:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 801830a:	183b      	adds	r3, r7, r0
 801830c:	220a      	movs	r2, #10
 801830e:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 8018310:	183b      	adds	r3, r7, r0
 8018312:	2200      	movs	r2, #0
 8018314:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018316:	183b      	adds	r3, r7, r0
 8018318:	68fa      	ldr	r2, [r7, #12]
 801831a:	6812      	ldr	r2, [r2, #0]
 801831c:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801831e:	193c      	adds	r4, r7, r4
 8018320:	0029      	movs	r1, r5
 8018322:	187d      	adds	r5, r7, r1
 8018324:	187b      	adds	r3, r7, r1
 8018326:	1c9a      	adds	r2, r3, #2
 8018328:	187b      	adds	r3, r7, r1
 801832a:	1c59      	adds	r1, r3, #1
 801832c:	1838      	adds	r0, r7, r0
 801832e:	002b      	movs	r3, r5
 8018330:	f7fc fa50 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 8018334:	0003      	movs	r3, r0
 8018336:	7023      	strb	r3, [r4, #0]
 8018338:	e006      	b.n	8018348 <RegionIN865LinkAdrReq+0x264>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 801833a:	2247      	movs	r2, #71	; 0x47
 801833c:	18bb      	adds	r3, r7, r2
 801833e:	18ba      	adds	r2, r7, r2
 8018340:	7812      	ldrb	r2, [r2, #0]
 8018342:	2102      	movs	r1, #2
 8018344:	438a      	bics	r2, r1
 8018346:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018348:	2347      	movs	r3, #71	; 0x47
 801834a:	18fb      	adds	r3, r7, r3
 801834c:	781b      	ldrb	r3, [r3, #0]
 801834e:	2b07      	cmp	r3, #7
 8018350:	d10b      	bne.n	801836a <RegionIN865LinkAdrReq+0x286>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018352:	4b14      	ldr	r3, [pc, #80]	; (80183a4 <RegionIN865LinkAdrReq+0x2c0>)
 8018354:	2202      	movs	r2, #2
 8018356:	2100      	movs	r1, #0
 8018358:	0018      	movs	r0, r3
 801835a:	f004 fce7 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801835e:	233a      	movs	r3, #58	; 0x3a
 8018360:	18fb      	adds	r3, r7, r3
 8018362:	8819      	ldrh	r1, [r3, #0]
 8018364:	4b0e      	ldr	r3, [pc, #56]	; (80183a0 <RegionIN865LinkAdrReq+0x2bc>)
 8018366:	22d0      	movs	r2, #208	; 0xd0
 8018368:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801836a:	213c      	movs	r1, #60	; 0x3c
 801836c:	187b      	adds	r3, r7, r1
 801836e:	2201      	movs	r2, #1
 8018370:	569a      	ldrsb	r2, [r3, r2]
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018376:	187b      	adds	r3, r7, r1
 8018378:	2202      	movs	r2, #2
 801837a:	569a      	ldrsb	r2, [r3, r2]
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018380:	187b      	adds	r3, r7, r1
 8018382:	781a      	ldrb	r2, [r3, #0]
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801838a:	2246      	movs	r2, #70	; 0x46
 801838c:	18ba      	adds	r2, r7, r2
 801838e:	7812      	ldrb	r2, [r2, #0]
 8018390:	701a      	strb	r2, [r3, #0]

    return status;
 8018392:	2347      	movs	r3, #71	; 0x47
 8018394:	18fb      	adds	r3, r7, r3
 8018396:	781b      	ldrb	r3, [r3, #0]
}
 8018398:	0018      	movs	r0, r3
 801839a:	46bd      	mov	sp, r7
 801839c:	b012      	add	sp, #72	; 0x48
 801839e:	bdb0      	pop	{r4, r5, r7, pc}
 80183a0:	20001788 	.word	0x20001788
 80183a4:	20001858 	.word	0x20001858

080183a8 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b084      	sub	sp, #16
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80183b0:	230f      	movs	r3, #15
 80183b2:	18fb      	adds	r3, r7, r3
 80183b4:	2207      	movs	r2, #7
 80183b6:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	685b      	ldr	r3, [r3, #4]
 80183bc:	0018      	movs	r0, r3
 80183be:	f7ff f937 	bl	8017630 <VerifyRfFreq>
 80183c2:	0003      	movs	r3, r0
 80183c4:	001a      	movs	r2, r3
 80183c6:	2301      	movs	r3, #1
 80183c8:	4053      	eors	r3, r2
 80183ca:	b2db      	uxtb	r3, r3
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d006      	beq.n	80183de <RegionIN865RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 80183d0:	220f      	movs	r2, #15
 80183d2:	18bb      	adds	r3, r7, r2
 80183d4:	18ba      	adds	r2, r7, r2
 80183d6:	7812      	ldrb	r2, [r2, #0]
 80183d8:	2101      	movs	r1, #1
 80183da:	438a      	bics	r2, r1
 80183dc:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	781b      	ldrb	r3, [r3, #0]
 80183e2:	b25b      	sxtb	r3, r3
 80183e4:	2207      	movs	r2, #7
 80183e6:	2100      	movs	r1, #0
 80183e8:	0018      	movs	r0, r3
 80183ea:	f7fb ffb5 	bl	8014358 <RegionCommonValueInRange>
 80183ee:	1e03      	subs	r3, r0, #0
 80183f0:	d106      	bne.n	8018400 <RegionIN865RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 80183f2:	220f      	movs	r2, #15
 80183f4:	18bb      	adds	r3, r7, r2
 80183f6:	18ba      	adds	r2, r7, r2
 80183f8:	7812      	ldrb	r2, [r2, #0]
 80183fa:	2102      	movs	r1, #2
 80183fc:	438a      	bics	r2, r1
 80183fe:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	785b      	ldrb	r3, [r3, #1]
 8018404:	b25b      	sxtb	r3, r3
 8018406:	2207      	movs	r2, #7
 8018408:	2100      	movs	r1, #0
 801840a:	0018      	movs	r0, r3
 801840c:	f7fb ffa4 	bl	8014358 <RegionCommonValueInRange>
 8018410:	1e03      	subs	r3, r0, #0
 8018412:	d106      	bne.n	8018422 <RegionIN865RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018414:	220f      	movs	r2, #15
 8018416:	18bb      	adds	r3, r7, r2
 8018418:	18ba      	adds	r2, r7, r2
 801841a:	7812      	ldrb	r2, [r2, #0]
 801841c:	2104      	movs	r1, #4
 801841e:	438a      	bics	r2, r1
 8018420:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018422:	230f      	movs	r3, #15
 8018424:	18fb      	adds	r3, r7, r3
 8018426:	781b      	ldrb	r3, [r3, #0]
}
 8018428:	0018      	movs	r0, r3
 801842a:	46bd      	mov	sp, r7
 801842c:	b004      	add	sp, #16
 801842e:	bd80      	pop	{r7, pc}

08018430 <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b086      	sub	sp, #24
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018438:	2317      	movs	r3, #23
 801843a:	18fb      	adds	r3, r7, r3
 801843c:	2203      	movs	r2, #3
 801843e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d119      	bne.n	801847e <RegionIN865NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	791b      	ldrb	r3, [r3, #4]
 801844e:	b25b      	sxtb	r3, r3
 8018450:	b2da      	uxtb	r2, r3
 8018452:	2108      	movs	r1, #8
 8018454:	187b      	adds	r3, r7, r1
 8018456:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8018458:	187b      	adds	r3, r7, r1
 801845a:	0018      	movs	r0, r3
 801845c:	f000 fa32 	bl	80188c4 <RegionIN865ChannelsRemove>
 8018460:	0003      	movs	r3, r0
 8018462:	001a      	movs	r2, r3
 8018464:	2301      	movs	r3, #1
 8018466:	4053      	eors	r3, r2
 8018468:	b2db      	uxtb	r3, r3
 801846a:	2b00      	cmp	r3, #0
 801846c:	d043      	beq.n	80184f6 <RegionIN865NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801846e:	2217      	movs	r2, #23
 8018470:	18bb      	adds	r3, r7, r2
 8018472:	18ba      	adds	r2, r7, r2
 8018474:	7812      	ldrb	r2, [r2, #0]
 8018476:	2103      	movs	r1, #3
 8018478:	438a      	bics	r2, r1
 801847a:	701a      	strb	r2, [r3, #0]
 801847c:	e03b      	b.n	80184f6 <RegionIN865NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	210c      	movs	r1, #12
 8018484:	187b      	adds	r3, r7, r1
 8018486:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	791b      	ldrb	r3, [r3, #4]
 801848c:	b25b      	sxtb	r3, r3
 801848e:	b2da      	uxtb	r2, r3
 8018490:	187b      	adds	r3, r7, r1
 8018492:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8018494:	187b      	adds	r3, r7, r1
 8018496:	0018      	movs	r0, r3
 8018498:	f000 f95a 	bl	8018750 <RegionIN865ChannelAdd>
 801849c:	0003      	movs	r3, r0
 801849e:	2b04      	cmp	r3, #4
 80184a0:	d008      	beq.n	80184b4 <RegionIN865NewChannelReq+0x84>
 80184a2:	dc02      	bgt.n	80184aa <RegionIN865NewChannelReq+0x7a>
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d025      	beq.n	80184f4 <RegionIN865NewChannelReq+0xc4>
 80184a8:	e01c      	b.n	80184e4 <RegionIN865NewChannelReq+0xb4>
 80184aa:	2b05      	cmp	r3, #5
 80184ac:	d00a      	beq.n	80184c4 <RegionIN865NewChannelReq+0x94>
 80184ae:	2b06      	cmp	r3, #6
 80184b0:	d010      	beq.n	80184d4 <RegionIN865NewChannelReq+0xa4>
 80184b2:	e017      	b.n	80184e4 <RegionIN865NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80184b4:	2217      	movs	r2, #23
 80184b6:	18bb      	adds	r3, r7, r2
 80184b8:	18ba      	adds	r2, r7, r2
 80184ba:	7812      	ldrb	r2, [r2, #0]
 80184bc:	2101      	movs	r1, #1
 80184be:	438a      	bics	r2, r1
 80184c0:	701a      	strb	r2, [r3, #0]
                break;
 80184c2:	e018      	b.n	80184f6 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80184c4:	2217      	movs	r2, #23
 80184c6:	18bb      	adds	r3, r7, r2
 80184c8:	18ba      	adds	r2, r7, r2
 80184ca:	7812      	ldrb	r2, [r2, #0]
 80184cc:	2102      	movs	r1, #2
 80184ce:	438a      	bics	r2, r1
 80184d0:	701a      	strb	r2, [r3, #0]
                break;
 80184d2:	e010      	b.n	80184f6 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80184d4:	2217      	movs	r2, #23
 80184d6:	18bb      	adds	r3, r7, r2
 80184d8:	18ba      	adds	r2, r7, r2
 80184da:	7812      	ldrb	r2, [r2, #0]
 80184dc:	2103      	movs	r1, #3
 80184de:	438a      	bics	r2, r1
 80184e0:	701a      	strb	r2, [r3, #0]
                break;
 80184e2:	e008      	b.n	80184f6 <RegionIN865NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 80184e4:	2217      	movs	r2, #23
 80184e6:	18bb      	adds	r3, r7, r2
 80184e8:	18ba      	adds	r2, r7, r2
 80184ea:	7812      	ldrb	r2, [r2, #0]
 80184ec:	2103      	movs	r1, #3
 80184ee:	438a      	bics	r2, r1
 80184f0:	701a      	strb	r2, [r3, #0]
                break;
 80184f2:	e000      	b.n	80184f6 <RegionIN865NewChannelReq+0xc6>
                break;
 80184f4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 80184f6:	2317      	movs	r3, #23
 80184f8:	18fb      	adds	r3, r7, r3
 80184fa:	781b      	ldrb	r3, [r3, #0]
}
 80184fc:	0018      	movs	r0, r3
 80184fe:	46bd      	mov	sp, r7
 8018500:	b006      	add	sp, #24
 8018502:	bd80      	pop	{r7, pc}

08018504 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b082      	sub	sp, #8
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
    return -1;
 801850c:	2301      	movs	r3, #1
 801850e:	425b      	negs	r3, r3
}
 8018510:	0018      	movs	r0, r3
 8018512:	46bd      	mov	sp, r7
 8018514:	b002      	add	sp, #8
 8018516:	bd80      	pop	{r7, pc}

08018518 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b084      	sub	sp, #16
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018520:	230f      	movs	r3, #15
 8018522:	18fb      	adds	r3, r7, r3
 8018524:	2203      	movs	r2, #3
 8018526:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	0018      	movs	r0, r3
 801852e:	f7ff f87f 	bl	8017630 <VerifyRfFreq>
 8018532:	0003      	movs	r3, r0
 8018534:	001a      	movs	r2, r3
 8018536:	2301      	movs	r3, #1
 8018538:	4053      	eors	r3, r2
 801853a:	b2db      	uxtb	r3, r3
 801853c:	2b00      	cmp	r3, #0
 801853e:	d006      	beq.n	801854e <RegionIN865DlChannelReq+0x36>
    {
        status &= 0xFE;
 8018540:	220f      	movs	r2, #15
 8018542:	18bb      	adds	r3, r7, r2
 8018544:	18ba      	adds	r2, r7, r2
 8018546:	7812      	ldrb	r2, [r2, #0]
 8018548:	2101      	movs	r1, #1
 801854a:	438a      	bics	r2, r1
 801854c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	0019      	movs	r1, r3
 8018554:	4a13      	ldr	r2, [pc, #76]	; (80185a4 <RegionIN865DlChannelReq+0x8c>)
 8018556:	000b      	movs	r3, r1
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	185b      	adds	r3, r3, r1
 801855c:	009b      	lsls	r3, r3, #2
 801855e:	589b      	ldr	r3, [r3, r2]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d106      	bne.n	8018572 <RegionIN865DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8018564:	220f      	movs	r2, #15
 8018566:	18bb      	adds	r3, r7, r2
 8018568:	18ba      	adds	r2, r7, r2
 801856a:	7812      	ldrb	r2, [r2, #0]
 801856c:	2102      	movs	r1, #2
 801856e:	438a      	bics	r2, r1
 8018570:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018572:	230f      	movs	r3, #15
 8018574:	18fb      	adds	r3, r7, r3
 8018576:	781b      	ldrb	r3, [r3, #0]
 8018578:	2b03      	cmp	r3, #3
 801857a:	d10c      	bne.n	8018596 <RegionIN865DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	781b      	ldrb	r3, [r3, #0]
 8018580:	0018      	movs	r0, r3
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	685a      	ldr	r2, [r3, #4]
 8018586:	4907      	ldr	r1, [pc, #28]	; (80185a4 <RegionIN865DlChannelReq+0x8c>)
 8018588:	0003      	movs	r3, r0
 801858a:	005b      	lsls	r3, r3, #1
 801858c:	181b      	adds	r3, r3, r0
 801858e:	009b      	lsls	r3, r3, #2
 8018590:	18cb      	adds	r3, r1, r3
 8018592:	3304      	adds	r3, #4
 8018594:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018596:	230f      	movs	r3, #15
 8018598:	18fb      	adds	r3, r7, r3
 801859a:	781b      	ldrb	r3, [r3, #0]
}
 801859c:	0018      	movs	r0, r3
 801859e:	46bd      	mov	sp, r7
 80185a0:	b004      	add	sp, #16
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	20001788 	.word	0x20001788

080185a8 <RegionIN865CalcBackOff>:
{
    return currentDr;
}

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b088      	sub	sp, #32
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80185b0:	210c      	movs	r1, #12
 80185b2:	187b      	adds	r3, r7, r1
 80185b4:	4a12      	ldr	r2, [pc, #72]	; (8018600 <RegionIN865CalcBackOff+0x58>)
 80185b6:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 80185b8:	187b      	adds	r3, r7, r1
 80185ba:	4a12      	ldr	r2, [pc, #72]	; (8018604 <RegionIN865CalcBackOff+0x5c>)
 80185bc:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	785a      	ldrb	r2, [r3, #1]
 80185c2:	187b      	adds	r3, r7, r1
 80185c4:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	781a      	ldrb	r2, [r3, #0]
 80185ca:	187b      	adds	r3, r7, r1
 80185cc:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	789a      	ldrb	r2, [r3, #2]
 80185d2:	187b      	adds	r3, r7, r1
 80185d4:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	78da      	ldrb	r2, [r3, #3]
 80185da:	187b      	adds	r3, r7, r1
 80185dc:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	685a      	ldr	r2, [r3, #4]
 80185e2:	187b      	adds	r3, r7, r1
 80185e4:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	689a      	ldr	r2, [r3, #8]
 80185ea:	187b      	adds	r3, r7, r1
 80185ec:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 80185ee:	187b      	adds	r3, r7, r1
 80185f0:	0018      	movs	r0, r3
 80185f2:	f7fc fa99 	bl	8014b28 <RegionCommonCalcBackOff>
}
 80185f6:	46c0      	nop			; (mov r8, r8)
 80185f8:	46bd      	mov	sp, r7
 80185fa:	b008      	add	sp, #32
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	46c0      	nop			; (mov r8, r8)
 8018600:	20001788 	.word	0x20001788
 8018604:	20001848 	.word	0x20001848

08018608 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018608:	b5b0      	push	{r4, r5, r7, lr}
 801860a:	b090      	sub	sp, #64	; 0x40
 801860c:	af04      	add	r7, sp, #16
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	607a      	str	r2, [r7, #4]
 8018614:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8018616:	232f      	movs	r3, #47	; 0x2f
 8018618:	18fb      	adds	r3, r7, r3
 801861a:	2200      	movs	r2, #0
 801861c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801861e:	2327      	movs	r3, #39	; 0x27
 8018620:	18fb      	adds	r3, r7, r3
 8018622:	2200      	movs	r2, #0
 8018624:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 8018626:	2314      	movs	r3, #20
 8018628:	18fb      	adds	r3, r7, r3
 801862a:	0018      	movs	r0, r3
 801862c:	2310      	movs	r3, #16
 801862e:	001a      	movs	r2, r3
 8018630:	2100      	movs	r1, #0
 8018632:	f00d fc69 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 8018636:	2300      	movs	r3, #0
 8018638:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801863a:	4b42      	ldr	r3, [pc, #264]	; (8018744 <RegionIN865NextChannel+0x13c>)
 801863c:	2201      	movs	r2, #1
 801863e:	2100      	movs	r1, #0
 8018640:	0018      	movs	r0, r3
 8018642:	f7fb fef1 	bl	8014428 <RegionCommonCountChannels>
 8018646:	1e03      	subs	r3, r0, #0
 8018648:	d108      	bne.n	801865c <RegionIN865NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801864a:	4b3f      	ldr	r3, [pc, #252]	; (8018748 <RegionIN865NextChannel+0x140>)
 801864c:	22d0      	movs	r2, #208	; 0xd0
 801864e:	5a9b      	ldrh	r3, [r3, r2]
 8018650:	2207      	movs	r2, #7
 8018652:	4313      	orrs	r3, r2
 8018654:	b299      	uxth	r1, r3
 8018656:	4b3c      	ldr	r3, [pc, #240]	; (8018748 <RegionIN865NextChannel+0x140>)
 8018658:	22d0      	movs	r2, #208	; 0xd0
 801865a:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681c      	ldr	r4, [r3, #0]
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	685b      	ldr	r3, [r3, #4]
 8018664:	0018      	movs	r0, r3
 8018666:	f004 fae6 	bl	801cc36 <TimerGetElapsedTime>
 801866a:	0003      	movs	r3, r0
 801866c:	429c      	cmp	r4, r3
 801866e:	d824      	bhi.n	80186ba <RegionIN865NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	2200      	movs	r2, #0
 8018674:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	7a58      	ldrb	r0, [r3, #9]
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	7a99      	ldrb	r1, [r3, #10]
 801867e:	4a33      	ldr	r2, [pc, #204]	; (801874c <RegionIN865NextChannel+0x144>)
 8018680:	2301      	movs	r3, #1
 8018682:	f7fb ff5c 	bl	801453e <RegionCommonUpdateBandTimeOff>
 8018686:	0003      	movs	r3, r0
 8018688:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	7a58      	ldrb	r0, [r3, #9]
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	7a1b      	ldrb	r3, [r3, #8]
 8018692:	b25b      	sxtb	r3, r3
 8018694:	b2d9      	uxtb	r1, r3
 8018696:	232f      	movs	r3, #47	; 0x2f
 8018698:	18fc      	adds	r4, r7, r3
 801869a:	4d2b      	ldr	r5, [pc, #172]	; (8018748 <RegionIN865NextChannel+0x140>)
 801869c:	4a29      	ldr	r2, [pc, #164]	; (8018744 <RegionIN865NextChannel+0x13c>)
 801869e:	2327      	movs	r3, #39	; 0x27
 80186a0:	18fb      	adds	r3, r7, r3
 80186a2:	9302      	str	r3, [sp, #8]
 80186a4:	2314      	movs	r3, #20
 80186a6:	18fb      	adds	r3, r7, r3
 80186a8:	9301      	str	r3, [sp, #4]
 80186aa:	4b28      	ldr	r3, [pc, #160]	; (801874c <RegionIN865NextChannel+0x144>)
 80186ac:	9300      	str	r3, [sp, #0]
 80186ae:	002b      	movs	r3, r5
 80186b0:	f7fe ffe6 	bl	8017680 <CountNbOfEnabledChannels>
 80186b4:	0003      	movs	r3, r0
 80186b6:	7023      	strb	r3, [r4, #0]
 80186b8:	e010      	b.n	80186dc <RegionIN865NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 80186ba:	2127      	movs	r1, #39	; 0x27
 80186bc:	187b      	adds	r3, r7, r1
 80186be:	781b      	ldrb	r3, [r3, #0]
 80186c0:	3301      	adds	r3, #1
 80186c2:	b2da      	uxtb	r2, r3
 80186c4:	187b      	adds	r3, r7, r1
 80186c6:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	681c      	ldr	r4, [r3, #0]
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	0018      	movs	r0, r3
 80186d2:	f004 fab0 	bl	801cc36 <TimerGetElapsedTime>
 80186d6:	0003      	movs	r3, r0
 80186d8:	1ae3      	subs	r3, r4, r3
 80186da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 80186dc:	232f      	movs	r3, #47	; 0x2f
 80186de:	18fb      	adds	r3, r7, r3
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d012      	beq.n	801870c <RegionIN865NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80186e6:	232f      	movs	r3, #47	; 0x2f
 80186e8:	18fb      	adds	r3, r7, r3
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	3b01      	subs	r3, #1
 80186ee:	0019      	movs	r1, r3
 80186f0:	2000      	movs	r0, #0
 80186f2:	f004 fac9 	bl	801cc88 <randr>
 80186f6:	0002      	movs	r2, r0
 80186f8:	2314      	movs	r3, #20
 80186fa:	18fb      	adds	r3, r7, r3
 80186fc:	5c9a      	ldrb	r2, [r3, r2]
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2200      	movs	r2, #0
 8018706:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018708:	2300      	movs	r3, #0
 801870a:	e016      	b.n	801873a <RegionIN865NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 801870c:	2327      	movs	r3, #39	; 0x27
 801870e:	18fb      	adds	r3, r7, r3
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d004      	beq.n	8018720 <RegionIN865NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801871a:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801871c:	230b      	movs	r3, #11
 801871e:	e00c      	b.n	801873a <RegionIN865NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018720:	4b09      	ldr	r3, [pc, #36]	; (8018748 <RegionIN865NextChannel+0x140>)
 8018722:	22d0      	movs	r2, #208	; 0xd0
 8018724:	5a9b      	ldrh	r3, [r3, r2]
 8018726:	2207      	movs	r2, #7
 8018728:	4313      	orrs	r3, r2
 801872a:	b299      	uxth	r1, r3
 801872c:	4b06      	ldr	r3, [pc, #24]	; (8018748 <RegionIN865NextChannel+0x140>)
 801872e:	22d0      	movs	r2, #208	; 0xd0
 8018730:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2200      	movs	r2, #0
 8018736:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018738:	230c      	movs	r3, #12
    }
}
 801873a:	0018      	movs	r0, r3
 801873c:	46bd      	mov	sp, r7
 801873e:	b00c      	add	sp, #48	; 0x30
 8018740:	bdb0      	pop	{r4, r5, r7, pc}
 8018742:	46c0      	nop			; (mov r8, r8)
 8018744:	20001858 	.word	0x20001858
 8018748:	20001788 	.word	0x20001788
 801874c:	20001848 	.word	0x20001848

08018750 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018750:	b590      	push	{r4, r7, lr}
 8018752:	b085      	sub	sp, #20
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8018758:	230f      	movs	r3, #15
 801875a:	18fb      	adds	r3, r7, r3
 801875c:	2200      	movs	r2, #0
 801875e:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8018760:	230e      	movs	r3, #14
 8018762:	18fb      	adds	r3, r7, r3
 8018764:	2200      	movs	r2, #0
 8018766:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018768:	210d      	movs	r1, #13
 801876a:	187b      	adds	r3, r7, r1
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	7912      	ldrb	r2, [r2, #4]
 8018770:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8018772:	187b      	adds	r3, r7, r1
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	2b02      	cmp	r3, #2
 8018778:	d801      	bhi.n	801877e <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801877a:	2306      	movs	r3, #6
 801877c:	e09c      	b.n	80188b8 <RegionIN865ChannelAdd+0x168>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 801877e:	230d      	movs	r3, #13
 8018780:	18fb      	adds	r3, r7, r3
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	2b0f      	cmp	r3, #15
 8018786:	d901      	bls.n	801878c <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018788:	2303      	movs	r3, #3
 801878a:	e095      	b.n	80188b8 <RegionIN865ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	7a1b      	ldrb	r3, [r3, #8]
 8018792:	011b      	lsls	r3, r3, #4
 8018794:	b25b      	sxtb	r3, r3
 8018796:	111b      	asrs	r3, r3, #4
 8018798:	b25b      	sxtb	r3, r3
 801879a:	2207      	movs	r2, #7
 801879c:	2100      	movs	r1, #0
 801879e:	0018      	movs	r0, r3
 80187a0:	f7fb fdda 	bl	8014358 <RegionCommonValueInRange>
 80187a4:	1e03      	subs	r3, r0, #0
 80187a6:	d103      	bne.n	80187b0 <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 80187a8:	230f      	movs	r3, #15
 80187aa:	18fb      	adds	r3, r7, r3
 80187ac:	2201      	movs	r2, #1
 80187ae:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	7a1b      	ldrb	r3, [r3, #8]
 80187b6:	b25b      	sxtb	r3, r3
 80187b8:	111b      	asrs	r3, r3, #4
 80187ba:	b25b      	sxtb	r3, r3
 80187bc:	2207      	movs	r2, #7
 80187be:	2100      	movs	r1, #0
 80187c0:	0018      	movs	r0, r3
 80187c2:	f7fb fdc9 	bl	8014358 <RegionCommonValueInRange>
 80187c6:	1e03      	subs	r3, r0, #0
 80187c8:	d103      	bne.n	80187d2 <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 80187ca:	230f      	movs	r3, #15
 80187cc:	18fb      	adds	r3, r7, r3
 80187ce:	2201      	movs	r2, #1
 80187d0:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	7a1b      	ldrb	r3, [r3, #8]
 80187d8:	011b      	lsls	r3, r3, #4
 80187da:	b25b      	sxtb	r3, r3
 80187dc:	111b      	asrs	r3, r3, #4
 80187de:	b25a      	sxtb	r2, r3
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	7a1b      	ldrb	r3, [r3, #8]
 80187e6:	b25b      	sxtb	r3, r3
 80187e8:	111b      	asrs	r3, r3, #4
 80187ea:	b25b      	sxtb	r3, r3
 80187ec:	429a      	cmp	r2, r3
 80187ee:	dd03      	ble.n	80187f8 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 80187f0:	230f      	movs	r3, #15
 80187f2:	18fb      	adds	r3, r7, r3
 80187f4:	2201      	movs	r2, #1
 80187f6:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 80187f8:	230e      	movs	r3, #14
 80187fa:	18fb      	adds	r3, r7, r3
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	2201      	movs	r2, #1
 8018800:	4053      	eors	r3, r2
 8018802:	b2db      	uxtb	r3, r3
 8018804:	2b00      	cmp	r3, #0
 8018806:	d010      	beq.n	801882a <RegionIN865ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	0018      	movs	r0, r3
 8018810:	f7fe ff0e 	bl	8017630 <VerifyRfFreq>
 8018814:	0003      	movs	r3, r0
 8018816:	001a      	movs	r2, r3
 8018818:	2301      	movs	r3, #1
 801881a:	4053      	eors	r3, r2
 801881c:	b2db      	uxtb	r3, r3
 801881e:	2b00      	cmp	r3, #0
 8018820:	d003      	beq.n	801882a <RegionIN865ChannelAdd+0xda>
        {
            freqInvalid = true;
 8018822:	230e      	movs	r3, #14
 8018824:	18fb      	adds	r3, r7, r3
 8018826:	2201      	movs	r2, #1
 8018828:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801882a:	230f      	movs	r3, #15
 801882c:	18fb      	adds	r3, r7, r3
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d006      	beq.n	8018842 <RegionIN865ChannelAdd+0xf2>
 8018834:	230e      	movs	r3, #14
 8018836:	18fb      	adds	r3, r7, r3
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d001      	beq.n	8018842 <RegionIN865ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801883e:	2306      	movs	r3, #6
 8018840:	e03a      	b.n	80188b8 <RegionIN865ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8018842:	230f      	movs	r3, #15
 8018844:	18fb      	adds	r3, r7, r3
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d001      	beq.n	8018850 <RegionIN865ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801884c:	2305      	movs	r3, #5
 801884e:	e033      	b.n	80188b8 <RegionIN865ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8018850:	230e      	movs	r3, #14
 8018852:	18fb      	adds	r3, r7, r3
 8018854:	781b      	ldrb	r3, [r3, #0]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d001      	beq.n	801885e <RegionIN865ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801885a:	2304      	movs	r3, #4
 801885c:	e02c      	b.n	80188b8 <RegionIN865ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801885e:	200d      	movs	r0, #13
 8018860:	0004      	movs	r4, r0
 8018862:	183b      	adds	r3, r7, r0
 8018864:	781a      	ldrb	r2, [r3, #0]
 8018866:	0013      	movs	r3, r2
 8018868:	005b      	lsls	r3, r3, #1
 801886a:	189b      	adds	r3, r3, r2
 801886c:	009b      	lsls	r3, r3, #2
 801886e:	4a14      	ldr	r2, [pc, #80]	; (80188c0 <RegionIN865ChannelAdd+0x170>)
 8018870:	1898      	adds	r0, r3, r2
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	220c      	movs	r2, #12
 8018878:	0019      	movs	r1, r3
 801887a:	f004 fa1b 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 801887e:	0020      	movs	r0, r4
 8018880:	183b      	adds	r3, r7, r0
 8018882:	781a      	ldrb	r2, [r3, #0]
 8018884:	490e      	ldr	r1, [pc, #56]	; (80188c0 <RegionIN865ChannelAdd+0x170>)
 8018886:	0013      	movs	r3, r2
 8018888:	005b      	lsls	r3, r3, #1
 801888a:	189b      	adds	r3, r3, r2
 801888c:	009b      	lsls	r3, r3, #2
 801888e:	18cb      	adds	r3, r1, r3
 8018890:	3309      	adds	r3, #9
 8018892:	2200      	movs	r2, #0
 8018894:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8018896:	4b0a      	ldr	r3, [pc, #40]	; (80188c0 <RegionIN865ChannelAdd+0x170>)
 8018898:	22d0      	movs	r2, #208	; 0xd0
 801889a:	5a9b      	ldrh	r3, [r3, r2]
 801889c:	b21a      	sxth	r2, r3
 801889e:	183b      	adds	r3, r7, r0
 80188a0:	781b      	ldrb	r3, [r3, #0]
 80188a2:	2101      	movs	r1, #1
 80188a4:	4099      	lsls	r1, r3
 80188a6:	000b      	movs	r3, r1
 80188a8:	b21b      	sxth	r3, r3
 80188aa:	4313      	orrs	r3, r2
 80188ac:	b21b      	sxth	r3, r3
 80188ae:	b299      	uxth	r1, r3
 80188b0:	4b03      	ldr	r3, [pc, #12]	; (80188c0 <RegionIN865ChannelAdd+0x170>)
 80188b2:	22d0      	movs	r2, #208	; 0xd0
 80188b4:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 80188b6:	2300      	movs	r3, #0
}
 80188b8:	0018      	movs	r0, r3
 80188ba:	46bd      	mov	sp, r7
 80188bc:	b005      	add	sp, #20
 80188be:	bd90      	pop	{r4, r7, pc}
 80188c0:	20001788 	.word	0x20001788

080188c4 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80188c4:	b590      	push	{r4, r7, lr}
 80188c6:	b085      	sub	sp, #20
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80188cc:	210f      	movs	r1, #15
 80188ce:	187b      	adds	r3, r7, r1
 80188d0:	687a      	ldr	r2, [r7, #4]
 80188d2:	7812      	ldrb	r2, [r2, #0]
 80188d4:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80188d6:	187b      	adds	r3, r7, r1
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	2b02      	cmp	r3, #2
 80188dc:	d801      	bhi.n	80188e2 <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 80188de:	2300      	movs	r3, #0
 80188e0:	e015      	b.n	801890e <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80188e2:	240f      	movs	r4, #15
 80188e4:	193b      	adds	r3, r7, r4
 80188e6:	781a      	ldrb	r2, [r3, #0]
 80188e8:	490b      	ldr	r1, [pc, #44]	; (8018918 <RegionIN865ChannelsRemove+0x54>)
 80188ea:	0013      	movs	r3, r2
 80188ec:	005b      	lsls	r3, r3, #1
 80188ee:	189b      	adds	r3, r3, r2
 80188f0:	009b      	lsls	r3, r3, #2
 80188f2:	18cb      	adds	r3, r1, r3
 80188f4:	220c      	movs	r2, #12
 80188f6:	2100      	movs	r1, #0
 80188f8:	0018      	movs	r0, r3
 80188fa:	f00d fb05 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 80188fe:	193b      	adds	r3, r7, r4
 8018900:	7819      	ldrb	r1, [r3, #0]
 8018902:	4b06      	ldr	r3, [pc, #24]	; (801891c <RegionIN865ChannelsRemove+0x58>)
 8018904:	2210      	movs	r2, #16
 8018906:	0018      	movs	r0, r3
 8018908:	f7fb fd4c 	bl	80143a4 <RegionCommonChanDisable>
 801890c:	0003      	movs	r3, r0
}
 801890e:	0018      	movs	r0, r3
 8018910:	46bd      	mov	sp, r7
 8018912:	b005      	add	sp, #20
 8018914:	bd90      	pop	{r4, r7, pc}
 8018916:	46c0      	nop			; (mov r8, r8)
 8018918:	20001788 	.word	0x20001788
 801891c:	20001858 	.word	0x20001858

08018920 <RegionIN865ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018920:	b590      	push	{r4, r7, lr}
 8018922:	b083      	sub	sp, #12
 8018924:	af00      	add	r7, sp, #0
 8018926:	0004      	movs	r4, r0
 8018928:	0008      	movs	r0, r1
 801892a:	0011      	movs	r1, r2
 801892c:	1dfb      	adds	r3, r7, #7
 801892e:	1c22      	adds	r2, r4, #0
 8018930:	701a      	strb	r2, [r3, #0]
 8018932:	1dbb      	adds	r3, r7, #6
 8018934:	1c02      	adds	r2, r0, #0
 8018936:	701a      	strb	r2, [r3, #0]
 8018938:	1d7b      	adds	r3, r7, #5
 801893a:	1c0a      	adds	r2, r1, #0
 801893c:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 801893e:	1dbb      	adds	r3, r7, #6
 8018940:	781b      	ldrb	r3, [r3, #0]
 8018942:	b25b      	sxtb	r3, r3
 8018944:	1d7a      	adds	r2, r7, #5
 8018946:	7812      	ldrb	r2, [r2, #0]
 8018948:	b252      	sxtb	r2, r2
 801894a:	490b      	ldr	r1, [pc, #44]	; (8018978 <RegionIN865ApplyDrOffset+0x58>)
 801894c:	568a      	ldrsb	r2, [r1, r2]
 801894e:	1a9b      	subs	r3, r3, r2
 8018950:	2b05      	cmp	r3, #5
 8018952:	dc0c      	bgt.n	801896e <RegionIN865ApplyDrOffset+0x4e>
 8018954:	1dbb      	adds	r3, r7, #6
 8018956:	781b      	ldrb	r3, [r3, #0]
 8018958:	b25b      	sxtb	r3, r3
 801895a:	1d7a      	adds	r2, r7, #5
 801895c:	7812      	ldrb	r2, [r2, #0]
 801895e:	b252      	sxtb	r2, r2
 8018960:	4905      	ldr	r1, [pc, #20]	; (8018978 <RegionIN865ApplyDrOffset+0x58>)
 8018962:	568a      	ldrsb	r2, [r1, r2]
 8018964:	1a9b      	subs	r3, r3, r2
 8018966:	d500      	bpl.n	801896a <RegionIN865ApplyDrOffset+0x4a>
 8018968:	2300      	movs	r3, #0
 801896a:	b2db      	uxtb	r3, r3
 801896c:	e000      	b.n	8018970 <RegionIN865ApplyDrOffset+0x50>
 801896e:	2305      	movs	r3, #5
}
 8018970:	0018      	movs	r0, r3
 8018972:	46bd      	mov	sp, r7
 8018974:	b003      	add	sp, #12
 8018976:	bd90      	pop	{r4, r7, pc}
 8018978:	08028fa0 	.word	0x08028fa0

0801897c <GetNextLowerTxDr>:
 */
static RegionKR920NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	0002      	movs	r2, r0
 8018984:	1dfb      	adds	r3, r7, #7
 8018986:	701a      	strb	r2, [r3, #0]
 8018988:	1dbb      	adds	r3, r7, #6
 801898a:	1c0a      	adds	r2, r1, #0
 801898c:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801898e:	230f      	movs	r3, #15
 8018990:	18fb      	adds	r3, r7, r3
 8018992:	2200      	movs	r2, #0
 8018994:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8018996:	1dfa      	adds	r2, r7, #7
 8018998:	1dbb      	adds	r3, r7, #6
 801899a:	7812      	ldrb	r2, [r2, #0]
 801899c:	b252      	sxtb	r2, r2
 801899e:	781b      	ldrb	r3, [r3, #0]
 80189a0:	b25b      	sxtb	r3, r3
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d105      	bne.n	80189b2 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 80189a6:	230f      	movs	r3, #15
 80189a8:	18fb      	adds	r3, r7, r3
 80189aa:	1dba      	adds	r2, r7, #6
 80189ac:	7812      	ldrb	r2, [r2, #0]
 80189ae:	701a      	strb	r2, [r3, #0]
 80189b0:	e005      	b.n	80189be <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 80189b2:	1dfb      	adds	r3, r7, #7
 80189b4:	781a      	ldrb	r2, [r3, #0]
 80189b6:	230f      	movs	r3, #15
 80189b8:	18fb      	adds	r3, r7, r3
 80189ba:	3a01      	subs	r2, #1
 80189bc:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80189be:	230f      	movs	r3, #15
 80189c0:	18fb      	adds	r3, r7, r3
 80189c2:	781b      	ldrb	r3, [r3, #0]
 80189c4:	b25b      	sxtb	r3, r3
}
 80189c6:	0018      	movs	r0, r3
 80189c8:	46bd      	mov	sp, r7
 80189ca:	b004      	add	sp, #16
 80189cc:	bd80      	pop	{r7, pc}
	...

080189d0 <GetMaxEIRP>:

static int8_t GetMaxEIRP( uint32_t freq )
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b082      	sub	sp, #8
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
    if( freq >= 922100000 )
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	4a05      	ldr	r2, [pc, #20]	; (80189f0 <GetMaxEIRP+0x20>)
 80189dc:	4293      	cmp	r3, r2
 80189de:	d901      	bls.n	80189e4 <GetMaxEIRP+0x14>
    {// Limit to 14dBm
        return KR920_DEFAULT_MAX_EIRP_HIGH;
 80189e0:	230e      	movs	r3, #14
 80189e2:	e000      	b.n	80189e6 <GetMaxEIRP+0x16>
    }
    // Limit to 10dBm
    return KR920_DEFAULT_MAX_EIRP_LOW;
 80189e4:	230a      	movs	r3, #10
}
 80189e6:	0018      	movs	r0, r3
 80189e8:	46bd      	mov	sp, r7
 80189ea:	b002      	add	sp, #8
 80189ec:	bd80      	pop	{r7, pc}
 80189ee:	46c0      	nop			; (mov r8, r8)
 80189f0:	36f6211f 	.word	0x36f6211f

080189f4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b082      	sub	sp, #8
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
    switch( BandwidthsKR920[drIndex] )
 80189fc:	4b09      	ldr	r3, [pc, #36]	; (8018a24 <GetBandwidth+0x30>)
 80189fe:	687a      	ldr	r2, [r7, #4]
 8018a00:	0092      	lsls	r2, r2, #2
 8018a02:	58d3      	ldr	r3, [r2, r3]
 8018a04:	4a08      	ldr	r2, [pc, #32]	; (8018a28 <GetBandwidth+0x34>)
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d004      	beq.n	8018a14 <GetBandwidth+0x20>
 8018a0a:	4a08      	ldr	r2, [pc, #32]	; (8018a2c <GetBandwidth+0x38>)
 8018a0c:	4293      	cmp	r3, r2
 8018a0e:	d003      	beq.n	8018a18 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8018a10:	2300      	movs	r3, #0
 8018a12:	e002      	b.n	8018a1a <GetBandwidth+0x26>
        case 250000:
            return 1;
 8018a14:	2301      	movs	r3, #1
 8018a16:	e000      	b.n	8018a1a <GetBandwidth+0x26>
        case 500000:
            return 2;
 8018a18:	2302      	movs	r3, #2
    }
}
 8018a1a:	0018      	movs	r0, r3
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	b002      	add	sp, #8
 8018a20:	bd80      	pop	{r7, pc}
 8018a22:	46c0      	nop			; (mov r8, r8)
 8018a24:	08029084 	.word	0x08029084
 8018a28:	0003d090 	.word	0x0003d090
 8018a2c:	0007a120 	.word	0x0007a120

08018a30 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8018a30:	b590      	push	{r4, r7, lr}
 8018a32:	b085      	sub	sp, #20
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	0004      	movs	r4, r0
 8018a38:	0008      	movs	r0, r1
 8018a3a:	0011      	movs	r1, r2
 8018a3c:	603b      	str	r3, [r7, #0]
 8018a3e:	1dfb      	adds	r3, r7, #7
 8018a40:	1c22      	adds	r2, r4, #0
 8018a42:	701a      	strb	r2, [r3, #0]
 8018a44:	1dbb      	adds	r3, r7, #6
 8018a46:	1c02      	adds	r2, r0, #0
 8018a48:	701a      	strb	r2, [r3, #0]
 8018a4a:	1d7b      	adds	r3, r7, #5
 8018a4c:	1c0a      	adds	r2, r1, #0
 8018a4e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8018a50:	210f      	movs	r1, #15
 8018a52:	187b      	adds	r3, r7, r1
 8018a54:	1dfa      	adds	r2, r7, #7
 8018a56:	7812      	ldrb	r2, [r2, #0]
 8018a58:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8018a5a:	187a      	adds	r2, r7, r1
 8018a5c:	1dbb      	adds	r3, r7, #6
 8018a5e:	1df9      	adds	r1, r7, #7
 8018a60:	780c      	ldrb	r4, [r1, #0]
 8018a62:	781b      	ldrb	r3, [r3, #0]
 8018a64:	b258      	sxtb	r0, r3
 8018a66:	b261      	sxtb	r1, r4
 8018a68:	4288      	cmp	r0, r1
 8018a6a:	da00      	bge.n	8018a6e <LimitTxPower+0x3e>
 8018a6c:	1c23      	adds	r3, r4, #0
 8018a6e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8018a70:	230f      	movs	r3, #15
 8018a72:	18fb      	adds	r3, r7, r3
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	b25b      	sxtb	r3, r3
}
 8018a78:	0018      	movs	r0, r3
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	b005      	add	sp, #20
 8018a7e:	bd90      	pop	{r4, r7, pc}

08018a80 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b084      	sub	sp, #16
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
    uint32_t tmpFreq = freq;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	60fb      	str	r3, [r7, #12]

    // Check radio driver support
    if( Radio.CheckRfFrequency( tmpFreq ) == false )
 8018a8c:	4b14      	ldr	r3, [pc, #80]	; (8018ae0 <VerifyRfFreq+0x60>)
 8018a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a90:	68fa      	ldr	r2, [r7, #12]
 8018a92:	0010      	movs	r0, r2
 8018a94:	4798      	blx	r3
 8018a96:	0003      	movs	r3, r0
 8018a98:	001a      	movs	r2, r3
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	4053      	eors	r3, r2
 8018a9e:	b2db      	uxtb	r3, r3
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d001      	beq.n	8018aa8 <VerifyRfFreq+0x28>
    {
        return false;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	e016      	b.n	8018ad6 <VerifyRfFreq+0x56>
    }

    // Verify if the frequency is valid. The frequency must be in a specified
    // range and can be set to specific values.
    if( ( tmpFreq >= 920900000 ) && ( tmpFreq <=923300000 ) )
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	4a0e      	ldr	r2, [pc, #56]	; (8018ae4 <VerifyRfFreq+0x64>)
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d911      	bls.n	8018ad4 <VerifyRfFreq+0x54>
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	4a0d      	ldr	r2, [pc, #52]	; (8018ae8 <VerifyRfFreq+0x68>)
 8018ab4:	4293      	cmp	r3, r2
 8018ab6:	d80d      	bhi.n	8018ad4 <VerifyRfFreq+0x54>
    {
        // Range ok, check for specific value
        tmpFreq -= 920900000;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	4a0c      	ldr	r2, [pc, #48]	; (8018aec <VerifyRfFreq+0x6c>)
 8018abc:	4694      	mov	ip, r2
 8018abe:	4463      	add	r3, ip
 8018ac0:	60fb      	str	r3, [r7, #12]
        if( ( tmpFreq % 200000 ) == 0 )
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	490a      	ldr	r1, [pc, #40]	; (8018af0 <VerifyRfFreq+0x70>)
 8018ac6:	0018      	movs	r0, r3
 8018ac8:	f7e7 fbac 	bl	8000224 <__aeabi_uidivmod>
 8018acc:	1e0b      	subs	r3, r1, #0
 8018ace:	d101      	bne.n	8018ad4 <VerifyRfFreq+0x54>
        {
            return true;
 8018ad0:	2301      	movs	r3, #1
 8018ad2:	e000      	b.n	8018ad6 <VerifyRfFreq+0x56>
        }
    }
    return false;
 8018ad4:	2300      	movs	r3, #0
}
 8018ad6:	0018      	movs	r0, r3
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	b004      	add	sp, #16
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	46c0      	nop			; (mov r8, r8)
 8018ae0:	080293d8 	.word	0x080293d8
 8018ae4:	36e3d19f 	.word	0x36e3d19f
 8018ae8:	370870a0 	.word	0x370870a0
 8018aec:	c91c2e60 	.word	0xc91c2e60
 8018af0:	00030d40 	.word	0x00030d40

08018af4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8018af4:	b5b0      	push	{r4, r5, r7, lr}
 8018af6:	b086      	sub	sp, #24
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	60ba      	str	r2, [r7, #8]
 8018afc:	607b      	str	r3, [r7, #4]
 8018afe:	230f      	movs	r3, #15
 8018b00:	18fb      	adds	r3, r7, r3
 8018b02:	1c02      	adds	r2, r0, #0
 8018b04:	701a      	strb	r2, [r3, #0]
 8018b06:	230e      	movs	r3, #14
 8018b08:	18fb      	adds	r3, r7, r3
 8018b0a:	1c0a      	adds	r2, r1, #0
 8018b0c:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8018b0e:	2317      	movs	r3, #23
 8018b10:	18fb      	adds	r3, r7, r3
 8018b12:	2200      	movs	r2, #0
 8018b14:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8018b16:	2316      	movs	r3, #22
 8018b18:	18fb      	adds	r3, r7, r3
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < KR920_MAX_NB_CHANNELS; i += 16, k++ )
 8018b1e:	2315      	movs	r3, #21
 8018b20:	18fb      	adds	r3, r7, r3
 8018b22:	2200      	movs	r2, #0
 8018b24:	701a      	strb	r2, [r3, #0]
 8018b26:	2314      	movs	r3, #20
 8018b28:	18fb      	adds	r3, r7, r3
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	701a      	strb	r2, [r3, #0]
 8018b2e:	e0b4      	b.n	8018c9a <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018b30:	2313      	movs	r3, #19
 8018b32:	18fb      	adds	r3, r7, r3
 8018b34:	2200      	movs	r2, #0
 8018b36:	701a      	strb	r2, [r3, #0]
 8018b38:	e09d      	b.n	8018c76 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8018b3a:	2314      	movs	r3, #20
 8018b3c:	18fb      	adds	r3, r7, r3
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	68ba      	ldr	r2, [r7, #8]
 8018b44:	18d3      	adds	r3, r2, r3
 8018b46:	881b      	ldrh	r3, [r3, #0]
 8018b48:	001a      	movs	r2, r3
 8018b4a:	2313      	movs	r3, #19
 8018b4c:	18fb      	adds	r3, r7, r3
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	411a      	asrs	r2, r3
 8018b52:	0013      	movs	r3, r2
 8018b54:	2201      	movs	r2, #1
 8018b56:	4013      	ands	r3, r2
 8018b58:	d100      	bne.n	8018b5c <CountNbOfEnabledChannels+0x68>
 8018b5a:	e086      	b.n	8018c6a <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8018b5c:	2315      	movs	r3, #21
 8018b5e:	18fb      	adds	r3, r7, r3
 8018b60:	781a      	ldrb	r2, [r3, #0]
 8018b62:	2313      	movs	r3, #19
 8018b64:	18fb      	adds	r3, r7, r3
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	18d3      	adds	r3, r2, r3
 8018b6a:	001a      	movs	r2, r3
 8018b6c:	0013      	movs	r3, r2
 8018b6e:	005b      	lsls	r3, r3, #1
 8018b70:	189b      	adds	r3, r3, r2
 8018b72:	009b      	lsls	r3, r3, #2
 8018b74:	001a      	movs	r2, r3
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	189b      	adds	r3, r3, r2
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d06f      	beq.n	8018c60 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8018b80:	230f      	movs	r3, #15
 8018b82:	18fb      	adds	r3, r7, r3
 8018b84:	781b      	ldrb	r3, [r3, #0]
 8018b86:	2201      	movs	r2, #1
 8018b88:	4053      	eors	r3, r2
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d008      	beq.n	8018ba2 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( KR920_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8018b90:	2313      	movs	r3, #19
 8018b92:	18fb      	adds	r3, r7, r3
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	2207      	movs	r2, #7
 8018b98:	411a      	asrs	r2, r3
 8018b9a:	0013      	movs	r3, r2
 8018b9c:	2201      	movs	r2, #1
 8018b9e:	4013      	ands	r3, r2
 8018ba0:	d060      	beq.n	8018c64 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8018ba2:	230e      	movs	r3, #14
 8018ba4:	18fb      	adds	r3, r7, r3
 8018ba6:	2000      	movs	r0, #0
 8018ba8:	5618      	ldrsb	r0, [r3, r0]
 8018baa:	2415      	movs	r4, #21
 8018bac:	193b      	adds	r3, r7, r4
 8018bae:	781a      	ldrb	r2, [r3, #0]
 8018bb0:	2513      	movs	r5, #19
 8018bb2:	197b      	adds	r3, r7, r5
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	18d3      	adds	r3, r2, r3
 8018bb8:	001a      	movs	r2, r3
 8018bba:	0013      	movs	r3, r2
 8018bbc:	005b      	lsls	r3, r3, #1
 8018bbe:	189b      	adds	r3, r3, r2
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	001a      	movs	r2, r3
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	189b      	adds	r3, r3, r2
 8018bc8:	7a1b      	ldrb	r3, [r3, #8]
 8018bca:	011b      	lsls	r3, r3, #4
 8018bcc:	b25b      	sxtb	r3, r3
 8018bce:	111b      	asrs	r3, r3, #4
 8018bd0:	b25b      	sxtb	r3, r3
 8018bd2:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8018bd4:	193b      	adds	r3, r7, r4
 8018bd6:	781a      	ldrb	r2, [r3, #0]
 8018bd8:	197b      	adds	r3, r7, r5
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	18d3      	adds	r3, r2, r3
 8018bde:	001a      	movs	r2, r3
 8018be0:	0013      	movs	r3, r2
 8018be2:	005b      	lsls	r3, r3, #1
 8018be4:	189b      	adds	r3, r3, r2
 8018be6:	009b      	lsls	r3, r3, #2
 8018be8:	001a      	movs	r2, r3
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	189b      	adds	r3, r3, r2
 8018bee:	7a1b      	ldrb	r3, [r3, #8]
 8018bf0:	b25b      	sxtb	r3, r3
 8018bf2:	111b      	asrs	r3, r3, #4
 8018bf4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8018bf6:	001a      	movs	r2, r3
 8018bf8:	f7fb fbae 	bl	8014358 <RegionCommonValueInRange>
 8018bfc:	1e03      	subs	r3, r0, #0
 8018bfe:	d033      	beq.n	8018c68 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8018c00:	2315      	movs	r3, #21
 8018c02:	18fb      	adds	r3, r7, r3
 8018c04:	781a      	ldrb	r2, [r3, #0]
 8018c06:	2313      	movs	r3, #19
 8018c08:	18fb      	adds	r3, r7, r3
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	18d3      	adds	r3, r2, r3
 8018c0e:	001a      	movs	r2, r3
 8018c10:	0013      	movs	r3, r2
 8018c12:	005b      	lsls	r3, r3, #1
 8018c14:	189b      	adds	r3, r3, r2
 8018c16:	009b      	lsls	r3, r3, #2
 8018c18:	001a      	movs	r2, r3
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	189b      	adds	r3, r3, r2
 8018c1e:	7a5b      	ldrb	r3, [r3, #9]
 8018c20:	011b      	lsls	r3, r3, #4
 8018c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c24:	18d3      	adds	r3, r2, r3
 8018c26:	68db      	ldr	r3, [r3, #12]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d006      	beq.n	8018c3a <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8018c2c:	2116      	movs	r1, #22
 8018c2e:	187b      	adds	r3, r7, r1
 8018c30:	781a      	ldrb	r2, [r3, #0]
 8018c32:	187b      	adds	r3, r7, r1
 8018c34:	3201      	adds	r2, #1
 8018c36:	701a      	strb	r2, [r3, #0]
                    continue;
 8018c38:	e017      	b.n	8018c6a <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8018c3a:	2217      	movs	r2, #23
 8018c3c:	18bb      	adds	r3, r7, r2
 8018c3e:	781b      	ldrb	r3, [r3, #0]
 8018c40:	18ba      	adds	r2, r7, r2
 8018c42:	1c59      	adds	r1, r3, #1
 8018c44:	7011      	strb	r1, [r2, #0]
 8018c46:	001a      	movs	r2, r3
 8018c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c4a:	189b      	adds	r3, r3, r2
 8018c4c:	2215      	movs	r2, #21
 8018c4e:	18b9      	adds	r1, r7, r2
 8018c50:	2213      	movs	r2, #19
 8018c52:	18ba      	adds	r2, r7, r2
 8018c54:	7809      	ldrb	r1, [r1, #0]
 8018c56:	7812      	ldrb	r2, [r2, #0]
 8018c58:	188a      	adds	r2, r1, r2
 8018c5a:	b2d2      	uxtb	r2, r2
 8018c5c:	701a      	strb	r2, [r3, #0]
 8018c5e:	e004      	b.n	8018c6a <CountNbOfEnabledChannels+0x176>
                    continue;
 8018c60:	46c0      	nop			; (mov r8, r8)
 8018c62:	e002      	b.n	8018c6a <CountNbOfEnabledChannels+0x176>
                        continue;
 8018c64:	46c0      	nop			; (mov r8, r8)
 8018c66:	e000      	b.n	8018c6a <CountNbOfEnabledChannels+0x176>
                    continue;
 8018c68:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8018c6a:	2113      	movs	r1, #19
 8018c6c:	187b      	adds	r3, r7, r1
 8018c6e:	781a      	ldrb	r2, [r3, #0]
 8018c70:	187b      	adds	r3, r7, r1
 8018c72:	3201      	adds	r2, #1
 8018c74:	701a      	strb	r2, [r3, #0]
 8018c76:	2313      	movs	r3, #19
 8018c78:	18fb      	adds	r3, r7, r3
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	2b0f      	cmp	r3, #15
 8018c7e:	d800      	bhi.n	8018c82 <CountNbOfEnabledChannels+0x18e>
 8018c80:	e75b      	b.n	8018b3a <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < KR920_MAX_NB_CHANNELS; i += 16, k++ )
 8018c82:	2215      	movs	r2, #21
 8018c84:	18bb      	adds	r3, r7, r2
 8018c86:	18ba      	adds	r2, r7, r2
 8018c88:	7812      	ldrb	r2, [r2, #0]
 8018c8a:	3210      	adds	r2, #16
 8018c8c:	701a      	strb	r2, [r3, #0]
 8018c8e:	2114      	movs	r1, #20
 8018c90:	187b      	adds	r3, r7, r1
 8018c92:	781a      	ldrb	r2, [r3, #0]
 8018c94:	187b      	adds	r3, r7, r1
 8018c96:	3201      	adds	r2, #1
 8018c98:	701a      	strb	r2, [r3, #0]
 8018c9a:	2315      	movs	r3, #21
 8018c9c:	18fb      	adds	r3, r7, r3
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	2b0f      	cmp	r3, #15
 8018ca2:	d800      	bhi.n	8018ca6 <CountNbOfEnabledChannels+0x1b2>
 8018ca4:	e744      	b.n	8018b30 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8018ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca8:	2216      	movs	r2, #22
 8018caa:	18ba      	adds	r2, r7, r2
 8018cac:	7812      	ldrb	r2, [r2, #0]
 8018cae:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8018cb0:	2317      	movs	r3, #23
 8018cb2:	18fb      	adds	r3, r7, r3
 8018cb4:	781b      	ldrb	r3, [r3, #0]
}
 8018cb6:	0018      	movs	r0, r3
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	b006      	add	sp, #24
 8018cbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018cc0 <RegionKR920GetPhyParam>:

PhyParam_t RegionKR920GetPhyParam( GetPhyParams_t* getPhy )
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b084      	sub	sp, #16
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018cc8:	2308      	movs	r3, #8
 8018cca:	18fb      	adds	r3, r7, r3
 8018ccc:	2200      	movs	r2, #0
 8018cce:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	2b34      	cmp	r3, #52	; 0x34
 8018cd6:	d900      	bls.n	8018cda <RegionKR920GetPhyParam+0x1a>
 8018cd8:	e0ce      	b.n	8018e78 <RegionKR920GetPhyParam+0x1b8>
 8018cda:	009a      	lsls	r2, r3, #2
 8018cdc:	4b6e      	ldr	r3, [pc, #440]	; (8018e98 <RegionKR920GetPhyParam+0x1d8>)
 8018cde:	18d3      	adds	r3, r2, r3
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = KR920_RX_MIN_DATARATE;
 8018ce4:	2308      	movs	r3, #8
 8018ce6:	18fb      	adds	r3, r7, r3
 8018ce8:	2200      	movs	r2, #0
 8018cea:	601a      	str	r2, [r3, #0]
            break;
 8018cec:	e0c5      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = KR920_TX_MIN_DATARATE;
 8018cee:	2308      	movs	r3, #8
 8018cf0:	18fb      	adds	r3, r7, r3
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	601a      	str	r2, [r3, #0]
            break;
 8018cf6:	e0c0      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = KR920_DEFAULT_DATARATE;
 8018cf8:	2308      	movs	r3, #8
 8018cfa:	18fb      	adds	r3, r7, r3
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	601a      	str	r2, [r3, #0]
            break;
 8018d00:	e0bb      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, KR920_TX_MIN_DATARATE );
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	785b      	ldrb	r3, [r3, #1]
 8018d06:	b25b      	sxtb	r3, r3
 8018d08:	2100      	movs	r1, #0
 8018d0a:	0018      	movs	r0, r3
 8018d0c:	f7ff fe36 	bl	801897c <GetNextLowerTxDr>
 8018d10:	0003      	movs	r3, r0
 8018d12:	001a      	movs	r2, r3
 8018d14:	2308      	movs	r3, #8
 8018d16:	18fb      	adds	r3, r7, r3
 8018d18:	601a      	str	r2, [r3, #0]
            break;
 8018d1a:	e0ae      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = KR920_MAX_TX_POWER;
 8018d1c:	2308      	movs	r3, #8
 8018d1e:	18fb      	adds	r3, r7, r3
 8018d20:	2200      	movs	r2, #0
 8018d22:	601a      	str	r2, [r3, #0]
            break;
 8018d24:	e0a9      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = KR920_DEFAULT_TX_POWER;
 8018d26:	2308      	movs	r3, #8
 8018d28:	18fb      	adds	r3, r7, r3
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	601a      	str	r2, [r3, #0]
            break;
 8018d2e:	e0a4      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = KR920_ADR_ACK_LIMIT;
 8018d30:	2308      	movs	r3, #8
 8018d32:	18fb      	adds	r3, r7, r3
 8018d34:	2240      	movs	r2, #64	; 0x40
 8018d36:	601a      	str	r2, [r3, #0]
            break;
 8018d38:	e09f      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = KR920_ADR_ACK_DELAY;
 8018d3a:	2308      	movs	r3, #8
 8018d3c:	18fb      	adds	r3, r7, r3
 8018d3e:	2220      	movs	r2, #32
 8018d40:	601a      	str	r2, [r3, #0]
            break;
 8018d42:	e09a      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateKR920[getPhy->Datarate];
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	785b      	ldrb	r3, [r3, #1]
 8018d48:	b25b      	sxtb	r3, r3
 8018d4a:	001a      	movs	r2, r3
 8018d4c:	4b53      	ldr	r3, [pc, #332]	; (8018e9c <RegionKR920GetPhyParam+0x1dc>)
 8018d4e:	5c9b      	ldrb	r3, [r3, r2]
 8018d50:	001a      	movs	r2, r3
 8018d52:	2308      	movs	r3, #8
 8018d54:	18fb      	adds	r3, r7, r3
 8018d56:	601a      	str	r2, [r3, #0]
            break;
 8018d58:	e08f      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterKR920[getPhy->Datarate];
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	785b      	ldrb	r3, [r3, #1]
 8018d5e:	b25b      	sxtb	r3, r3
 8018d60:	001a      	movs	r2, r3
 8018d62:	4b4f      	ldr	r3, [pc, #316]	; (8018ea0 <RegionKR920GetPhyParam+0x1e0>)
 8018d64:	5c9b      	ldrb	r3, [r3, r2]
 8018d66:	001a      	movs	r2, r3
 8018d68:	2308      	movs	r3, #8
 8018d6a:	18fb      	adds	r3, r7, r3
 8018d6c:	601a      	str	r2, [r3, #0]
            break;
 8018d6e:	e084      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = KR920_DUTY_CYCLE_ENABLED;
 8018d70:	2308      	movs	r3, #8
 8018d72:	18fb      	adds	r3, r7, r3
 8018d74:	2200      	movs	r2, #0
 8018d76:	601a      	str	r2, [r3, #0]
            break;
 8018d78:	e07f      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = KR920_MAX_RX_WINDOW;
 8018d7a:	2308      	movs	r3, #8
 8018d7c:	18fb      	adds	r3, r7, r3
 8018d7e:	22fa      	movs	r2, #250	; 0xfa
 8018d80:	0112      	lsls	r2, r2, #4
 8018d82:	601a      	str	r2, [r3, #0]
            break;
 8018d84:	e079      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = KR920_RECEIVE_DELAY1;
 8018d86:	2308      	movs	r3, #8
 8018d88:	18fb      	adds	r3, r7, r3
 8018d8a:	22fa      	movs	r2, #250	; 0xfa
 8018d8c:	0092      	lsls	r2, r2, #2
 8018d8e:	601a      	str	r2, [r3, #0]
            break;
 8018d90:	e073      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = KR920_RECEIVE_DELAY2;
 8018d92:	2308      	movs	r3, #8
 8018d94:	18fb      	adds	r3, r7, r3
 8018d96:	22fa      	movs	r2, #250	; 0xfa
 8018d98:	00d2      	lsls	r2, r2, #3
 8018d9a:	601a      	str	r2, [r3, #0]
            break;
 8018d9c:	e06d      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = KR920_JOIN_ACCEPT_DELAY1;
 8018d9e:	2308      	movs	r3, #8
 8018da0:	18fb      	adds	r3, r7, r3
 8018da2:	4a40      	ldr	r2, [pc, #256]	; (8018ea4 <RegionKR920GetPhyParam+0x1e4>)
 8018da4:	601a      	str	r2, [r3, #0]
            break;
 8018da6:	e068      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = KR920_JOIN_ACCEPT_DELAY2;
 8018da8:	2308      	movs	r3, #8
 8018daa:	18fb      	adds	r3, r7, r3
 8018dac:	4a3e      	ldr	r2, [pc, #248]	; (8018ea8 <RegionKR920GetPhyParam+0x1e8>)
 8018dae:	601a      	str	r2, [r3, #0]
            break;
 8018db0:	e063      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = KR920_MAX_FCNT_GAP;
 8018db2:	2308      	movs	r3, #8
 8018db4:	18fb      	adds	r3, r7, r3
 8018db6:	2280      	movs	r2, #128	; 0x80
 8018db8:	01d2      	lsls	r2, r2, #7
 8018dba:	601a      	str	r2, [r3, #0]
            break;
 8018dbc:	e05d      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( KR920_ACKTIMEOUT + randr( -KR920_ACK_TIMEOUT_RND, KR920_ACK_TIMEOUT_RND ) );
 8018dbe:	23fa      	movs	r3, #250	; 0xfa
 8018dc0:	009b      	lsls	r3, r3, #2
 8018dc2:	4a3a      	ldr	r2, [pc, #232]	; (8018eac <RegionKR920GetPhyParam+0x1ec>)
 8018dc4:	0019      	movs	r1, r3
 8018dc6:	0010      	movs	r0, r2
 8018dc8:	f003 ff5e 	bl	801cc88 <randr>
 8018dcc:	0003      	movs	r3, r0
 8018dce:	22fa      	movs	r2, #250	; 0xfa
 8018dd0:	00d2      	lsls	r2, r2, #3
 8018dd2:	4694      	mov	ip, r2
 8018dd4:	4463      	add	r3, ip
 8018dd6:	001a      	movs	r2, r3
 8018dd8:	2308      	movs	r3, #8
 8018dda:	18fb      	adds	r3, r7, r3
 8018ddc:	601a      	str	r2, [r3, #0]
            break;
 8018dde:	e04c      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = KR920_DEFAULT_RX1_DR_OFFSET;
 8018de0:	2308      	movs	r3, #8
 8018de2:	18fb      	adds	r3, r7, r3
 8018de4:	2200      	movs	r2, #0
 8018de6:	601a      	str	r2, [r3, #0]
            break;
 8018de8:	e047      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = KR920_RX_WND_2_FREQ;
 8018dea:	2308      	movs	r3, #8
 8018dec:	18fb      	adds	r3, r7, r3
 8018dee:	4a30      	ldr	r2, [pc, #192]	; (8018eb0 <RegionKR920GetPhyParam+0x1f0>)
 8018df0:	601a      	str	r2, [r3, #0]
            break;
 8018df2:	e042      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = KR920_RX_WND_2_DR;
 8018df4:	2308      	movs	r3, #8
 8018df6:	18fb      	adds	r3, r7, r3
 8018df8:	2200      	movs	r2, #0
 8018dfa:	601a      	str	r2, [r3, #0]
            break;
 8018dfc:	e03d      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018dfe:	2308      	movs	r3, #8
 8018e00:	18fb      	adds	r3, r7, r3
 8018e02:	4a2c      	ldr	r2, [pc, #176]	; (8018eb4 <RegionKR920GetPhyParam+0x1f4>)
 8018e04:	601a      	str	r2, [r3, #0]
            break;
 8018e06:	e038      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018e08:	2308      	movs	r3, #8
 8018e0a:	18fb      	adds	r3, r7, r3
 8018e0c:	4a2a      	ldr	r2, [pc, #168]	; (8018eb8 <RegionKR920GetPhyParam+0x1f8>)
 8018e0e:	601a      	str	r2, [r3, #0]
            break;
 8018e10:	e033      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = KR920_MAX_NB_CHANNELS;
 8018e12:	2308      	movs	r3, #8
 8018e14:	18fb      	adds	r3, r7, r3
 8018e16:	2210      	movs	r2, #16
 8018e18:	601a      	str	r2, [r3, #0]
            break;
 8018e1a:	e02e      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018e1c:	2308      	movs	r3, #8
 8018e1e:	18fb      	adds	r3, r7, r3
 8018e20:	4a26      	ldr	r2, [pc, #152]	; (8018ebc <RegionKR920GetPhyParam+0x1fc>)
 8018e22:	601a      	str	r2, [r3, #0]
            break;
 8018e24:	e029      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018e26:	2308      	movs	r3, #8
 8018e28:	18fb      	adds	r3, r7, r3
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	601a      	str	r2, [r3, #0]
            break;
 8018e2e:	e024      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        {
            // We set the higher maximum EIRP as default value.
            // The reason for this is, that the frequency may
            // change during a channel selection for the next uplink.
            // The value has to be recalculated in the TX configuration.
            phyParam.fValue = KR920_DEFAULT_MAX_EIRP_HIGH;
 8018e30:	2308      	movs	r3, #8
 8018e32:	18fb      	adds	r3, r7, r3
 8018e34:	4a22      	ldr	r2, [pc, #136]	; (8018ec0 <RegionKR920GetPhyParam+0x200>)
 8018e36:	601a      	str	r2, [r3, #0]
            break;
 8018e38:	e01f      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 8018e3a:	2308      	movs	r3, #8
 8018e3c:	18fb      	adds	r3, r7, r3
 8018e3e:	4a21      	ldr	r2, [pc, #132]	; (8018ec4 <RegionKR920GetPhyParam+0x204>)
 8018e40:	601a      	str	r2, [r3, #0]
            break;
 8018e42:	e01a      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = KR920_BEACON_CHANNEL_FREQ;
 8018e44:	2308      	movs	r3, #8
 8018e46:	18fb      	adds	r3, r7, r3
 8018e48:	4a1f      	ldr	r2, [pc, #124]	; (8018ec8 <RegionKR920GetPhyParam+0x208>)
 8018e4a:	601a      	str	r2, [r3, #0]
            break;
 8018e4c:	e015      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = KR920_BEACON_SIZE;
 8018e4e:	2108      	movs	r1, #8
 8018e50:	187b      	adds	r3, r7, r1
 8018e52:	2211      	movs	r2, #17
 8018e54:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = KR920_RFU1_SIZE;
 8018e56:	187b      	adds	r3, r7, r1
 8018e58:	2202      	movs	r2, #2
 8018e5a:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = KR920_RFU2_SIZE;
 8018e5c:	187b      	adds	r3, r7, r1
 8018e5e:	2200      	movs	r2, #0
 8018e60:	709a      	strb	r2, [r3, #2]
            break;
 8018e62:	e00a      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = KR920_BEACON_CHANNEL_DR;
 8018e64:	2308      	movs	r3, #8
 8018e66:	18fb      	adds	r3, r7, r3
 8018e68:	2203      	movs	r2, #3
 8018e6a:	601a      	str	r2, [r3, #0]
            break;
 8018e6c:	e005      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = KR920_PING_SLOT_CHANNEL_DR;
 8018e6e:	2308      	movs	r3, #8
 8018e70:	18fb      	adds	r3, r7, r3
 8018e72:	2203      	movs	r2, #3
 8018e74:	601a      	str	r2, [r3, #0]
            break;
 8018e76:	e000      	b.n	8018e7a <RegionKR920GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8018e78:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8018e7a:	210c      	movs	r1, #12
 8018e7c:	187b      	adds	r3, r7, r1
 8018e7e:	2208      	movs	r2, #8
 8018e80:	18ba      	adds	r2, r7, r2
 8018e82:	6812      	ldr	r2, [r2, #0]
 8018e84:	601a      	str	r2, [r3, #0]
 8018e86:	187b      	adds	r3, r7, r1
 8018e88:	2200      	movs	r2, #0
 8018e8a:	681a      	ldr	r2, [r3, #0]
 8018e8c:	0013      	movs	r3, r2
}
 8018e8e:	0018      	movs	r0, r3
 8018e90:	46bd      	mov	sp, r7
 8018e92:	b004      	add	sp, #16
 8018e94:	bd80      	pop	{r7, pc}
 8018e96:	46c0      	nop			; (mov r8, r8)
 8018e98:	080290ac 	.word	0x080290ac
 8018e9c:	0802909c 	.word	0x0802909c
 8018ea0:	080290a4 	.word	0x080290a4
 8018ea4:	00001388 	.word	0x00001388
 8018ea8:	00001770 	.word	0x00001770
 8018eac:	fffffc18 	.word	0xfffffc18
 8018eb0:	36f313e0 	.word	0x36f313e0
 8018eb4:	2000192c 	.word	0x2000192c
 8018eb8:	2000192e 	.word	0x2000192e
 8018ebc:	2000185c 	.word	0x2000185c
 8018ec0:	41600000 	.word	0x41600000
 8018ec4:	4009999a 	.word	0x4009999a
 8018ec8:	37056360 	.word	0x37056360

08018ecc <RegionKR920SetBandTxDone>:

void RegionKR920SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b082      	sub	sp, #8
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	7858      	ldrb	r0, [r3, #1]
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	781b      	ldrb	r3, [r3, #0]
 8018edc:	0019      	movs	r1, r3
 8018ede:	4a0a      	ldr	r2, [pc, #40]	; (8018f08 <RegionKR920SetBandTxDone+0x3c>)
 8018ee0:	000b      	movs	r3, r1
 8018ee2:	005b      	lsls	r3, r3, #1
 8018ee4:	185b      	adds	r3, r3, r1
 8018ee6:	009b      	lsls	r3, r3, #2
 8018ee8:	18d3      	adds	r3, r2, r3
 8018eea:	3309      	adds	r3, #9
 8018eec:	781b      	ldrb	r3, [r3, #0]
 8018eee:	330c      	adds	r3, #12
 8018ef0:	011a      	lsls	r2, r3, #4
 8018ef2:	4b05      	ldr	r3, [pc, #20]	; (8018f08 <RegionKR920SetBandTxDone+0x3c>)
 8018ef4:	18d1      	adds	r1, r2, r3
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	001a      	movs	r2, r3
 8018efc:	f7fb fb04 	bl	8014508 <RegionCommonSetBandTxDone>
}
 8018f00:	46c0      	nop			; (mov r8, r8)
 8018f02:	46bd      	mov	sp, r7
 8018f04:	b002      	add	sp, #8
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	2000185c 	.word	0x2000185c

08018f0c <RegionKR920InitDefaults>:

void RegionKR920InitDefaults( InitDefaultsParams_t* params )
{
 8018f0c:	b590      	push	{r4, r7, lr}
 8018f0e:	b087      	sub	sp, #28
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
    Band_t bands[KR920_MAX_NB_BANDS] =
 8018f14:	2108      	movs	r1, #8
 8018f16:	187b      	adds	r3, r7, r1
 8018f18:	2201      	movs	r2, #1
 8018f1a:	801a      	strh	r2, [r3, #0]
 8018f1c:	187b      	adds	r3, r7, r1
 8018f1e:	2200      	movs	r2, #0
 8018f20:	709a      	strb	r2, [r3, #2]
 8018f22:	187b      	adds	r3, r7, r1
 8018f24:	2200      	movs	r2, #0
 8018f26:	605a      	str	r2, [r3, #4]
 8018f28:	187b      	adds	r3, r7, r1
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	609a      	str	r2, [r3, #8]
 8018f2e:	187b      	adds	r3, r7, r1
 8018f30:	2200      	movs	r2, #0
 8018f32:	60da      	str	r2, [r3, #12]
    {
        KR920_BAND0
    };

    switch( params->Type )
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	791b      	ldrb	r3, [r3, #4]
 8018f38:	2b01      	cmp	r3, #1
 8018f3a:	d030      	beq.n	8018f9e <RegionKR920InitDefaults+0x92>
 8018f3c:	2b02      	cmp	r3, #2
 8018f3e:	d022      	beq.n	8018f86 <RegionKR920InitDefaults+0x7a>
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d000      	beq.n	8018f46 <RegionKR920InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018f44:	e038      	b.n	8018fb8 <RegionKR920InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * KR920_MAX_NB_BANDS );
 8018f46:	2308      	movs	r3, #8
 8018f48:	18f9      	adds	r1, r7, r3
 8018f4a:	4b1d      	ldr	r3, [pc, #116]	; (8018fc0 <RegionKR920InitDefaults+0xb4>)
 8018f4c:	2210      	movs	r2, #16
 8018f4e:	0018      	movs	r0, r3
 8018f50:	f003 feb0 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) KR920_LC1;
 8018f54:	4b1b      	ldr	r3, [pc, #108]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018f56:	4a1c      	ldr	r2, [pc, #112]	; (8018fc8 <RegionKR920InitDefaults+0xbc>)
 8018f58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018f5a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) KR920_LC2;
 8018f5c:	4b19      	ldr	r3, [pc, #100]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018f5e:	4a1b      	ldr	r2, [pc, #108]	; (8018fcc <RegionKR920InitDefaults+0xc0>)
 8018f60:	330c      	adds	r3, #12
 8018f62:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018f64:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) KR920_LC3;
 8018f66:	4b17      	ldr	r3, [pc, #92]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018f68:	4a19      	ldr	r2, [pc, #100]	; (8018fd0 <RegionKR920InitDefaults+0xc4>)
 8018f6a:	3318      	adds	r3, #24
 8018f6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018f6e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018f70:	4b14      	ldr	r3, [pc, #80]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018f72:	22d2      	movs	r2, #210	; 0xd2
 8018f74:	2107      	movs	r1, #7
 8018f76:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8018f78:	4916      	ldr	r1, [pc, #88]	; (8018fd4 <RegionKR920InitDefaults+0xc8>)
 8018f7a:	4b17      	ldr	r3, [pc, #92]	; (8018fd8 <RegionKR920InitDefaults+0xcc>)
 8018f7c:	2201      	movs	r2, #1
 8018f7e:	0018      	movs	r0, r3
 8018f80:	f7fb fa93 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 8018f84:	e018      	b.n	8018fb8 <RegionKR920InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d013      	beq.n	8018fb6 <RegionKR920InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	6819      	ldr	r1, [r3, #0]
 8018f92:	4b0c      	ldr	r3, [pc, #48]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018f94:	22d4      	movs	r2, #212	; 0xd4
 8018f96:	0018      	movs	r0, r3
 8018f98:	f003 fe8c 	bl	801ccb4 <memcpy1>
            break;
 8018f9c:	e00b      	b.n	8018fb6 <RegionKR920InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018f9e:	4b09      	ldr	r3, [pc, #36]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018fa0:	22d0      	movs	r2, #208	; 0xd0
 8018fa2:	5a9a      	ldrh	r2, [r3, r2]
 8018fa4:	4b07      	ldr	r3, [pc, #28]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018fa6:	21d2      	movs	r1, #210	; 0xd2
 8018fa8:	5a5b      	ldrh	r3, [r3, r1]
 8018faa:	4313      	orrs	r3, r2
 8018fac:	b299      	uxth	r1, r3
 8018fae:	4b05      	ldr	r3, [pc, #20]	; (8018fc4 <RegionKR920InitDefaults+0xb8>)
 8018fb0:	22d0      	movs	r2, #208	; 0xd0
 8018fb2:	5299      	strh	r1, [r3, r2]
            break;
 8018fb4:	e000      	b.n	8018fb8 <RegionKR920InitDefaults+0xac>
            break;
 8018fb6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018fb8:	46c0      	nop			; (mov r8, r8)
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	b007      	add	sp, #28
 8018fbe:	bd90      	pop	{r4, r7, pc}
 8018fc0:	2000191c 	.word	0x2000191c
 8018fc4:	2000185c 	.word	0x2000185c
 8018fc8:	0802761c 	.word	0x0802761c
 8018fcc:	08027628 	.word	0x08027628
 8018fd0:	08027634 	.word	0x08027634
 8018fd4:	2000192e 	.word	0x2000192e
 8018fd8:	2000192c 	.word	0x2000192c

08018fdc <RegionKR920ApplyCFList>:
            return false;
    }
}

void RegionKR920ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018fdc:	b590      	push	{r4, r7, lr}
 8018fde:	b08b      	sub	sp, #44	; 0x2c
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018fe4:	2318      	movs	r3, #24
 8018fe6:	18fb      	adds	r3, r7, r3
 8018fe8:	2250      	movs	r2, #80	; 0x50
 8018fea:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	791b      	ldrb	r3, [r3, #4]
 8018ff0:	2b10      	cmp	r3, #16
 8018ff2:	d000      	beq.n	8018ff6 <RegionKR920ApplyCFList+0x1a>
 8018ff4:	e07d      	b.n	80190f2 <RegionKR920ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	330f      	adds	r3, #15
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d000      	beq.n	8019004 <RegionKR920ApplyCFList+0x28>
 8019002:	e078      	b.n	80190f6 <RegionKR920ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019004:	2327      	movs	r3, #39	; 0x27
 8019006:	18fb      	adds	r3, r7, r3
 8019008:	2200      	movs	r2, #0
 801900a:	701a      	strb	r2, [r3, #0]
 801900c:	2326      	movs	r3, #38	; 0x26
 801900e:	18fb      	adds	r3, r7, r3
 8019010:	2203      	movs	r2, #3
 8019012:	701a      	strb	r2, [r3, #0]
 8019014:	e067      	b.n	80190e6 <RegionKR920ApplyCFList+0x10a>
    {
        if( chanIdx < ( KR920_NUMB_CHANNELS_CF_LIST + KR920_NUMB_DEFAULT_CHANNELS ) )
 8019016:	2326      	movs	r3, #38	; 0x26
 8019018:	18fb      	adds	r3, r7, r3
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	2b07      	cmp	r3, #7
 801901e:	d82e      	bhi.n	801907e <RegionKR920ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681a      	ldr	r2, [r3, #0]
 8019024:	2427      	movs	r4, #39	; 0x27
 8019026:	193b      	adds	r3, r7, r4
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	18d3      	adds	r3, r2, r3
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	001a      	movs	r2, r3
 8019030:	2018      	movs	r0, #24
 8019032:	183b      	adds	r3, r7, r0
 8019034:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8019036:	183b      	adds	r3, r7, r0
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	6819      	ldr	r1, [r3, #0]
 801903e:	193b      	adds	r3, r7, r4
 8019040:	781b      	ldrb	r3, [r3, #0]
 8019042:	3301      	adds	r3, #1
 8019044:	18cb      	adds	r3, r1, r3
 8019046:	781b      	ldrb	r3, [r3, #0]
 8019048:	021b      	lsls	r3, r3, #8
 801904a:	431a      	orrs	r2, r3
 801904c:	183b      	adds	r3, r7, r0
 801904e:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019050:	183b      	adds	r3, r7, r0
 8019052:	681a      	ldr	r2, [r3, #0]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6819      	ldr	r1, [r3, #0]
 8019058:	193b      	adds	r3, r7, r4
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	3302      	adds	r3, #2
 801905e:	18cb      	adds	r3, r1, r3
 8019060:	781b      	ldrb	r3, [r3, #0]
 8019062:	041b      	lsls	r3, r3, #16
 8019064:	431a      	orrs	r2, r3
 8019066:	183b      	adds	r3, r7, r0
 8019068:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 801906a:	183b      	adds	r3, r7, r0
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	2264      	movs	r2, #100	; 0x64
 8019070:	435a      	muls	r2, r3
 8019072:	183b      	adds	r3, r7, r0
 8019074:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8019076:	183b      	adds	r3, r7, r0
 8019078:	2200      	movs	r2, #0
 801907a:	605a      	str	r2, [r3, #4]
 801907c:	e009      	b.n	8019092 <RegionKR920ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801907e:	2118      	movs	r1, #24
 8019080:	187b      	adds	r3, r7, r1
 8019082:	2200      	movs	r2, #0
 8019084:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8019086:	187b      	adds	r3, r7, r1
 8019088:	2200      	movs	r2, #0
 801908a:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 801908c:	187b      	adds	r3, r7, r1
 801908e:	2200      	movs	r2, #0
 8019090:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8019092:	2318      	movs	r3, #24
 8019094:	18fb      	adds	r3, r7, r3
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d00e      	beq.n	80190ba <RegionKR920ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 801909c:	2110      	movs	r1, #16
 801909e:	187b      	adds	r3, r7, r1
 80190a0:	2218      	movs	r2, #24
 80190a2:	18ba      	adds	r2, r7, r2
 80190a4:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 80190a6:	187b      	adds	r3, r7, r1
 80190a8:	2226      	movs	r2, #38	; 0x26
 80190aa:	18ba      	adds	r2, r7, r2
 80190ac:	7812      	ldrb	r2, [r2, #0]
 80190ae:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionKR920ChannelAdd( &channelAdd );
 80190b0:	187b      	adds	r3, r7, r1
 80190b2:	0018      	movs	r0, r3
 80190b4:	f000 fd3a 	bl	8019b2c <RegionKR920ChannelAdd>
 80190b8:	e009      	b.n	80190ce <RegionKR920ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80190ba:	210c      	movs	r1, #12
 80190bc:	187b      	adds	r3, r7, r1
 80190be:	2226      	movs	r2, #38	; 0x26
 80190c0:	18ba      	adds	r2, r7, r2
 80190c2:	7812      	ldrb	r2, [r2, #0]
 80190c4:	701a      	strb	r2, [r3, #0]

            RegionKR920ChannelsRemove( &channelRemove );
 80190c6:	187b      	adds	r3, r7, r1
 80190c8:	0018      	movs	r0, r3
 80190ca:	f000 fde9 	bl	8019ca0 <RegionKR920ChannelsRemove>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80190ce:	2227      	movs	r2, #39	; 0x27
 80190d0:	18bb      	adds	r3, r7, r2
 80190d2:	18ba      	adds	r2, r7, r2
 80190d4:	7812      	ldrb	r2, [r2, #0]
 80190d6:	3203      	adds	r2, #3
 80190d8:	701a      	strb	r2, [r3, #0]
 80190da:	2126      	movs	r1, #38	; 0x26
 80190dc:	187b      	adds	r3, r7, r1
 80190de:	781a      	ldrb	r2, [r3, #0]
 80190e0:	187b      	adds	r3, r7, r1
 80190e2:	3201      	adds	r2, #1
 80190e4:	701a      	strb	r2, [r3, #0]
 80190e6:	2326      	movs	r3, #38	; 0x26
 80190e8:	18fb      	adds	r3, r7, r3
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	2b0f      	cmp	r3, #15
 80190ee:	d992      	bls.n	8019016 <RegionKR920ApplyCFList+0x3a>
 80190f0:	e002      	b.n	80190f8 <RegionKR920ApplyCFList+0x11c>
        return;
 80190f2:	46c0      	nop			; (mov r8, r8)
 80190f4:	e000      	b.n	80190f8 <RegionKR920ApplyCFList+0x11c>
        return;
 80190f6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80190f8:	46bd      	mov	sp, r7
 80190fa:	b00b      	add	sp, #44	; 0x2c
 80190fc:	bd90      	pop	{r4, r7, pc}
	...

08019100 <RegionKR920ComputeRxWindowParameters>:
    }
    return true;
}

void RegionKR920ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019102:	b08b      	sub	sp, #44	; 0x2c
 8019104:	af04      	add	r7, sp, #16
 8019106:	60ba      	str	r2, [r7, #8]
 8019108:	607b      	str	r3, [r7, #4]
 801910a:	250f      	movs	r5, #15
 801910c:	197b      	adds	r3, r7, r5
 801910e:	1c02      	adds	r2, r0, #0
 8019110:	701a      	strb	r2, [r3, #0]
 8019112:	230e      	movs	r3, #14
 8019114:	18fb      	adds	r3, r7, r3
 8019116:	1c0a      	adds	r2, r1, #0
 8019118:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801911a:	2300      	movs	r3, #0
 801911c:	2400      	movs	r4, #0
 801911e:	613b      	str	r3, [r7, #16]
 8019120:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 8019122:	197b      	adds	r3, r7, r5
 8019124:	781b      	ldrb	r3, [r3, #0]
 8019126:	b25a      	sxtb	r2, r3
 8019128:	2a05      	cmp	r2, #5
 801912a:	dd00      	ble.n	801912e <RegionKR920ComputeRxWindowParameters+0x2e>
 801912c:	2305      	movs	r3, #5
 801912e:	b25a      	sxtb	r2, r3
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	785b      	ldrb	r3, [r3, #1]
 8019138:	b25b      	sxtb	r3, r3
 801913a:	0018      	movs	r0, r3
 801913c:	f7ff fc5a 	bl	80189f4 <GetBandwidth>
 8019140:	0003      	movs	r3, r0
 8019142:	b2da      	uxtb	r2, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	785b      	ldrb	r3, [r3, #1]
 801914c:	b25b      	sxtb	r3, r3
 801914e:	001a      	movs	r2, r3
 8019150:	4b14      	ldr	r3, [pc, #80]	; (80191a4 <RegionKR920ComputeRxWindowParameters+0xa4>)
 8019152:	5c98      	ldrb	r0, [r3, r2]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	785b      	ldrb	r3, [r3, #1]
 8019158:	b25b      	sxtb	r3, r3
 801915a:	001a      	movs	r2, r3
 801915c:	4b12      	ldr	r3, [pc, #72]	; (80191a8 <RegionKR920ComputeRxWindowParameters+0xa8>)
 801915e:	0092      	lsls	r2, r2, #2
 8019160:	58d3      	ldr	r3, [r2, r3]
 8019162:	0019      	movs	r1, r3
 8019164:	f7fb fbdc 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 8019168:	0003      	movs	r3, r0
 801916a:	000c      	movs	r4, r1
 801916c:	613b      	str	r3, [r7, #16]
 801916e:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019170:	4b0e      	ldr	r3, [pc, #56]	; (80191ac <RegionKR920ComputeRxWindowParameters+0xac>)
 8019172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019174:	4798      	blx	r3
 8019176:	0006      	movs	r6, r0
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	3308      	adds	r3, #8
 801917c:	687a      	ldr	r2, [r7, #4]
 801917e:	320c      	adds	r2, #12
 8019180:	68bd      	ldr	r5, [r7, #8]
 8019182:	210e      	movs	r1, #14
 8019184:	1879      	adds	r1, r7, r1
 8019186:	780c      	ldrb	r4, [r1, #0]
 8019188:	6938      	ldr	r0, [r7, #16]
 801918a:	6979      	ldr	r1, [r7, #20]
 801918c:	9202      	str	r2, [sp, #8]
 801918e:	9301      	str	r3, [sp, #4]
 8019190:	9600      	str	r6, [sp, #0]
 8019192:	002b      	movs	r3, r5
 8019194:	0022      	movs	r2, r4
 8019196:	f7fb fc0b 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 801919a:	46c0      	nop			; (mov r8, r8)
 801919c:	46bd      	mov	sp, r7
 801919e:	b007      	add	sp, #28
 80191a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191a2:	46c0      	nop			; (mov r8, r8)
 80191a4:	0802907c 	.word	0x0802907c
 80191a8:	08029084 	.word	0x08029084
 80191ac:	080293d8 	.word	0x080293d8

080191b0 <RegionKR920RxConfig>:

bool RegionKR920RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80191b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191b2:	b08f      	sub	sp, #60	; 0x3c
 80191b4:	af0a      	add	r7, sp, #40	; 0x28
 80191b6:	6078      	str	r0, [r7, #4]
 80191b8:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 80191ba:	230b      	movs	r3, #11
 80191bc:	18fb      	adds	r3, r7, r3
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	7852      	ldrb	r2, [r2, #1]
 80191c2:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80191c4:	230a      	movs	r3, #10
 80191c6:	18fb      	adds	r3, r7, r3
 80191c8:	2200      	movs	r2, #0
 80191ca:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80191cc:	2309      	movs	r3, #9
 80191ce:	18fb      	adds	r3, r7, r3
 80191d0:	2200      	movs	r2, #0
 80191d2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	685b      	ldr	r3, [r3, #4]
 80191d8:	60fb      	str	r3, [r7, #12]

    if( Radio.GetStatus( ) != RF_IDLE )
 80191da:	4b3d      	ldr	r3, [pc, #244]	; (80192d0 <RegionKR920RxConfig+0x120>)
 80191dc:	68db      	ldr	r3, [r3, #12]
 80191de:	4798      	blx	r3
 80191e0:	1e03      	subs	r3, r0, #0
 80191e2:	d001      	beq.n	80191e8 <RegionKR920RxConfig+0x38>
    {
        return false;
 80191e4:	2300      	movs	r3, #0
 80191e6:	e06e      	b.n	80192c6 <RegionKR920RxConfig+0x116>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	7cdb      	ldrb	r3, [r3, #19]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d122      	bne.n	8019236 <RegionKR920RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	0019      	movs	r1, r3
 80191f6:	4a37      	ldr	r2, [pc, #220]	; (80192d4 <RegionKR920RxConfig+0x124>)
 80191f8:	000b      	movs	r3, r1
 80191fa:	005b      	lsls	r3, r3, #1
 80191fc:	185b      	adds	r3, r3, r1
 80191fe:	009b      	lsls	r3, r3, #2
 8019200:	589b      	ldr	r3, [r3, r2]
 8019202:	60fb      	str	r3, [r7, #12]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	0019      	movs	r1, r3
 801920a:	4a32      	ldr	r2, [pc, #200]	; (80192d4 <RegionKR920RxConfig+0x124>)
 801920c:	000b      	movs	r3, r1
 801920e:	005b      	lsls	r3, r3, #1
 8019210:	185b      	adds	r3, r3, r1
 8019212:	009b      	lsls	r3, r3, #2
 8019214:	18d3      	adds	r3, r2, r3
 8019216:	3304      	adds	r3, #4
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d00b      	beq.n	8019236 <RegionKR920RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	781b      	ldrb	r3, [r3, #0]
 8019222:	0019      	movs	r1, r3
 8019224:	4a2b      	ldr	r2, [pc, #172]	; (80192d4 <RegionKR920RxConfig+0x124>)
 8019226:	000b      	movs	r3, r1
 8019228:	005b      	lsls	r3, r3, #1
 801922a:	185b      	adds	r3, r3, r1
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	18d3      	adds	r3, r2, r3
 8019230:	3304      	adds	r3, #4
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	60fb      	str	r3, [r7, #12]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesKR920[dr];
 8019236:	250b      	movs	r5, #11
 8019238:	197b      	adds	r3, r7, r5
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	b25b      	sxtb	r3, r3
 801923e:	4a26      	ldr	r2, [pc, #152]	; (80192d8 <RegionKR920RxConfig+0x128>)
 8019240:	5cd2      	ldrb	r2, [r2, r3]
 8019242:	2609      	movs	r6, #9
 8019244:	19bb      	adds	r3, r7, r6
 8019246:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8019248:	4b21      	ldr	r3, [pc, #132]	; (80192d0 <RegionKR920RxConfig+0x120>)
 801924a:	695b      	ldr	r3, [r3, #20]
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	0010      	movs	r0, r2
 8019250:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019252:	4b1f      	ldr	r3, [pc, #124]	; (80192d0 <RegionKR920RxConfig+0x120>)
 8019254:	6a1c      	ldr	r4, [r3, #32]
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	789b      	ldrb	r3, [r3, #2]
 801925a:	0018      	movs	r0, r3
 801925c:	19bb      	adds	r3, r7, r6
 801925e:	2100      	movs	r1, #0
 8019260:	5659      	ldrsb	r1, [r3, r1]
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	689b      	ldr	r3, [r3, #8]
 8019266:	b29b      	uxth	r3, r3
 8019268:	687a      	ldr	r2, [r7, #4]
 801926a:	7c92      	ldrb	r2, [r2, #18]
 801926c:	9209      	str	r2, [sp, #36]	; 0x24
 801926e:	2201      	movs	r2, #1
 8019270:	9208      	str	r2, [sp, #32]
 8019272:	2200      	movs	r2, #0
 8019274:	9207      	str	r2, [sp, #28]
 8019276:	2200      	movs	r2, #0
 8019278:	9206      	str	r2, [sp, #24]
 801927a:	2200      	movs	r2, #0
 801927c:	9205      	str	r2, [sp, #20]
 801927e:	2200      	movs	r2, #0
 8019280:	9204      	str	r2, [sp, #16]
 8019282:	2200      	movs	r2, #0
 8019284:	9203      	str	r2, [sp, #12]
 8019286:	9302      	str	r3, [sp, #8]
 8019288:	2308      	movs	r3, #8
 801928a:	9301      	str	r3, [sp, #4]
 801928c:	2300      	movs	r3, #0
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	2301      	movs	r3, #1
 8019292:	000a      	movs	r2, r1
 8019294:	0001      	movs	r1, r0
 8019296:	2001      	movs	r0, #1
 8019298:	47a0      	blx	r4
    maxPayload = MaxPayloadOfDatarateKR920[dr];
 801929a:	197b      	adds	r3, r7, r5
 801929c:	2200      	movs	r2, #0
 801929e:	569a      	ldrsb	r2, [r3, r2]
 80192a0:	200a      	movs	r0, #10
 80192a2:	183b      	adds	r3, r7, r0
 80192a4:	490d      	ldr	r1, [pc, #52]	; (80192dc <RegionKR920RxConfig+0x12c>)
 80192a6:	5c8a      	ldrb	r2, [r1, r2]
 80192a8:	701a      	strb	r2, [r3, #0]
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 80192aa:	4b09      	ldr	r3, [pc, #36]	; (80192d0 <RegionKR920RxConfig+0x120>)
 80192ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192ae:	183a      	adds	r2, r7, r0
 80192b0:	7812      	ldrb	r2, [r2, #0]
 80192b2:	320d      	adds	r2, #13
 80192b4:	b2d2      	uxtb	r2, r2
 80192b6:	0011      	movs	r1, r2
 80192b8:	2001      	movs	r0, #1
 80192ba:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	197a      	adds	r2, r7, r5
 80192c0:	7812      	ldrb	r2, [r2, #0]
 80192c2:	701a      	strb	r2, [r3, #0]
    return true;
 80192c4:	2301      	movs	r3, #1
}
 80192c6:	0018      	movs	r0, r3
 80192c8:	46bd      	mov	sp, r7
 80192ca:	b005      	add	sp, #20
 80192cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192ce:	46c0      	nop			; (mov r8, r8)
 80192d0:	080293d8 	.word	0x080293d8
 80192d4:	2000185c 	.word	0x2000185c
 80192d8:	0802907c 	.word	0x0802907c
 80192dc:	0802909c 	.word	0x0802909c

080192e0 <RegionKR920TxConfig>:

bool RegionKR920TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80192e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192e2:	b093      	sub	sp, #76	; 0x4c
 80192e4:	af0a      	add	r7, sp, #40	; 0x28
 80192e6:	60f8      	str	r0, [r7, #12]
 80192e8:	60b9      	str	r1, [r7, #8]
 80192ea:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	785b      	ldrb	r3, [r3, #1]
 80192f0:	b25b      	sxtb	r3, r3
 80192f2:	001a      	movs	r2, r3
 80192f4:	4b52      	ldr	r3, [pc, #328]	; (8019440 <RegionKR920TxConfig+0x160>)
 80192f6:	5c9a      	ldrb	r2, [r3, r2]
 80192f8:	231f      	movs	r3, #31
 80192fa:	18fb      	adds	r3, r7, r3
 80192fc:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	2002      	movs	r0, #2
 8019302:	5618      	ldrsb	r0, [r3, r0]
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	0019      	movs	r1, r3
 801930a:	4a4e      	ldr	r2, [pc, #312]	; (8019444 <RegionKR920TxConfig+0x164>)
 801930c:	000b      	movs	r3, r1
 801930e:	005b      	lsls	r3, r3, #1
 8019310:	185b      	adds	r3, r3, r1
 8019312:	009b      	lsls	r3, r3, #2
 8019314:	18d3      	adds	r3, r2, r3
 8019316:	3309      	adds	r3, #9
 8019318:	781b      	ldrb	r3, [r3, #0]
 801931a:	4a4a      	ldr	r2, [pc, #296]	; (8019444 <RegionKR920TxConfig+0x164>)
 801931c:	330c      	adds	r3, #12
 801931e:	011b      	lsls	r3, r3, #4
 8019320:	18d3      	adds	r3, r2, r3
 8019322:	3302      	adds	r3, #2
 8019324:	2100      	movs	r1, #0
 8019326:	5659      	ldrsb	r1, [r3, r1]
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	2201      	movs	r2, #1
 801932c:	569a      	ldrsb	r2, [r3, r2]
 801932e:	231e      	movs	r3, #30
 8019330:	18fc      	adds	r4, r7, r3
 8019332:	4b45      	ldr	r3, [pc, #276]	; (8019448 <RegionKR920TxConfig+0x168>)
 8019334:	f7ff fb7c 	bl	8018a30 <LimitTxPower>
 8019338:	0003      	movs	r3, r0
 801933a:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	785b      	ldrb	r3, [r3, #1]
 8019340:	b25b      	sxtb	r3, r3
 8019342:	0018      	movs	r0, r3
 8019344:	f7ff fb56 	bl	80189f4 <GetBandwidth>
 8019348:	0003      	movs	r3, r0
 801934a:	61bb      	str	r3, [r7, #24]
    float maxEIRP = GetMaxEIRP( NvmCtx.Channels[txConfig->Channel].Frequency );
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	0019      	movs	r1, r3
 8019352:	4a3c      	ldr	r2, [pc, #240]	; (8019444 <RegionKR920TxConfig+0x164>)
 8019354:	000b      	movs	r3, r1
 8019356:	005b      	lsls	r3, r3, #1
 8019358:	185b      	adds	r3, r3, r1
 801935a:	009b      	lsls	r3, r3, #2
 801935c:	589b      	ldr	r3, [r3, r2]
 801935e:	0018      	movs	r0, r3
 8019360:	f7ff fb36 	bl	80189d0 <GetMaxEIRP>
 8019364:	0003      	movs	r3, r0
 8019366:	0018      	movs	r0, r3
 8019368:	f7e7 fcb8 	bl	8000cdc <__aeabi_i2f>
 801936c:	1c03      	adds	r3, r0, #0
 801936e:	617b      	str	r3, [r7, #20]
    int8_t phyTxPower = 0;
 8019370:	2313      	movs	r3, #19
 8019372:	18fb      	adds	r3, r7, r3
 8019374:	2200      	movs	r2, #0
 8019376:	701a      	strb	r2, [r3, #0]

    // Take the minimum between the maxEIRP and txConfig->MaxEirp.
    // The value of txConfig->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( txConfig->MaxEirp, maxEIRP );
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	685b      	ldr	r3, [r3, #4]
 801937c:	1c19      	adds	r1, r3, #0
 801937e:	6978      	ldr	r0, [r7, #20]
 8019380:	f7e7 f8a4 	bl	80004cc <__aeabi_fcmpgt>
 8019384:	1e03      	subs	r3, r0, #0
 8019386:	d002      	beq.n	801938e <RegionKR920TxConfig+0xae>
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	e000      	b.n	8019390 <RegionKR920TxConfig+0xb0>
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	617b      	str	r3, [r7, #20]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, txConfig->AntennaGain );
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	689a      	ldr	r2, [r3, #8]
 8019396:	2513      	movs	r5, #19
 8019398:	197c      	adds	r4, r7, r5
 801939a:	6979      	ldr	r1, [r7, #20]
 801939c:	261e      	movs	r6, #30
 801939e:	19bb      	adds	r3, r7, r6
 80193a0:	781b      	ldrb	r3, [r3, #0]
 80193a2:	b25b      	sxtb	r3, r3
 80193a4:	0018      	movs	r0, r3
 80193a6:	f7fb fb87 	bl	8014ab8 <RegionCommonComputeTxPower>
 80193aa:	0003      	movs	r3, r0
 80193ac:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80193ae:	4b27      	ldr	r3, [pc, #156]	; (801944c <RegionKR920TxConfig+0x16c>)
 80193b0:	695a      	ldr	r2, [r3, #20]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	781b      	ldrb	r3, [r3, #0]
 80193b6:	0018      	movs	r0, r3
 80193b8:	4922      	ldr	r1, [pc, #136]	; (8019444 <RegionKR920TxConfig+0x164>)
 80193ba:	0003      	movs	r3, r0
 80193bc:	005b      	lsls	r3, r3, #1
 80193be:	181b      	adds	r3, r3, r0
 80193c0:	009b      	lsls	r3, r3, #2
 80193c2:	585b      	ldr	r3, [r3, r1]
 80193c4:	0018      	movs	r0, r3
 80193c6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 80193c8:	4b20      	ldr	r3, [pc, #128]	; (801944c <RegionKR920TxConfig+0x16c>)
 80193ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80193cc:	231f      	movs	r3, #31
 80193ce:	18fb      	adds	r3, r7, r3
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	b25b      	sxtb	r3, r3
 80193d4:	69b8      	ldr	r0, [r7, #24]
 80193d6:	197a      	adds	r2, r7, r5
 80193d8:	2100      	movs	r1, #0
 80193da:	5651      	ldrsb	r1, [r2, r1]
 80193dc:	4a1c      	ldr	r2, [pc, #112]	; (8019450 <RegionKR920TxConfig+0x170>)
 80193de:	9208      	str	r2, [sp, #32]
 80193e0:	2200      	movs	r2, #0
 80193e2:	9207      	str	r2, [sp, #28]
 80193e4:	2200      	movs	r2, #0
 80193e6:	9206      	str	r2, [sp, #24]
 80193e8:	2200      	movs	r2, #0
 80193ea:	9205      	str	r2, [sp, #20]
 80193ec:	2201      	movs	r2, #1
 80193ee:	9204      	str	r2, [sp, #16]
 80193f0:	2200      	movs	r2, #0
 80193f2:	9203      	str	r2, [sp, #12]
 80193f4:	2208      	movs	r2, #8
 80193f6:	9202      	str	r2, [sp, #8]
 80193f8:	2201      	movs	r2, #1
 80193fa:	9201      	str	r2, [sp, #4]
 80193fc:	9300      	str	r3, [sp, #0]
 80193fe:	0003      	movs	r3, r0
 8019400:	2200      	movs	r2, #0
 8019402:	2001      	movs	r0, #1
 8019404:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8019406:	4b11      	ldr	r3, [pc, #68]	; (801944c <RegionKR920TxConfig+0x16c>)
 8019408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801940a:	68fa      	ldr	r2, [r7, #12]
 801940c:	8992      	ldrh	r2, [r2, #12]
 801940e:	b2d2      	uxtb	r2, r2
 8019410:	0011      	movs	r1, r2
 8019412:	2001      	movs	r0, #1
 8019414:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 8019416:	4b0d      	ldr	r3, [pc, #52]	; (801944c <RegionKR920TxConfig+0x16c>)
 8019418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801941a:	68fa      	ldr	r2, [r7, #12]
 801941c:	8992      	ldrh	r2, [r2, #12]
 801941e:	b2d2      	uxtb	r2, r2
 8019420:	0011      	movs	r1, r2
 8019422:	2001      	movs	r0, #1
 8019424:	4798      	blx	r3
 8019426:	0002      	movs	r2, r0
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	19ba      	adds	r2, r7, r6
 8019430:	7812      	ldrb	r2, [r2, #0]
 8019432:	701a      	strb	r2, [r3, #0]
    return true;
 8019434:	2301      	movs	r3, #1
}
 8019436:	0018      	movs	r0, r3
 8019438:	46bd      	mov	sp, r7
 801943a:	b009      	add	sp, #36	; 0x24
 801943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801943e:	46c0      	nop			; (mov r8, r8)
 8019440:	0802907c 	.word	0x0802907c
 8019444:	2000185c 	.word	0x2000185c
 8019448:	2000192c 	.word	0x2000192c
 801944c:	080293d8 	.word	0x080293d8
 8019450:	00000bb8 	.word	0x00000bb8

08019454 <RegionKR920LinkAdrReq>:

uint8_t RegionKR920LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019456:	b093      	sub	sp, #76	; 0x4c
 8019458:	af00      	add	r7, sp, #0
 801945a:	60f8      	str	r0, [r7, #12]
 801945c:	60b9      	str	r1, [r7, #8]
 801945e:	607a      	str	r2, [r7, #4]
 8019460:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019462:	2347      	movs	r3, #71	; 0x47
 8019464:	18fb      	adds	r3, r7, r3
 8019466:	2207      	movs	r2, #7
 8019468:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801946a:	2344      	movs	r3, #68	; 0x44
 801946c:	18fb      	adds	r3, r7, r3
 801946e:	2200      	movs	r2, #0
 8019470:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8019472:	2346      	movs	r3, #70	; 0x46
 8019474:	18fb      	adds	r3, r7, r3
 8019476:	2200      	movs	r2, #0
 8019478:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801947a:	233a      	movs	r3, #58	; 0x3a
 801947c:	18fb      	adds	r3, r7, r3
 801947e:	2200      	movs	r2, #0
 8019480:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019482:	e09e      	b.n	80195c2 <RegionKR920LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	685a      	ldr	r2, [r3, #4]
 8019488:	2346      	movs	r3, #70	; 0x46
 801948a:	18fb      	adds	r3, r7, r3
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	18d3      	adds	r3, r2, r3
 8019490:	2544      	movs	r5, #68	; 0x44
 8019492:	197c      	adds	r4, r7, r5
 8019494:	223c      	movs	r2, #60	; 0x3c
 8019496:	18ba      	adds	r2, r7, r2
 8019498:	0011      	movs	r1, r2
 801949a:	0018      	movs	r0, r3
 801949c:	f7fb f944 	bl	8014728 <RegionCommonParseLinkAdrReq>
 80194a0:	0003      	movs	r3, r0
 80194a2:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80194a4:	197b      	adds	r3, r7, r5
 80194a6:	781b      	ldrb	r3, [r3, #0]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d100      	bne.n	80194ae <RegionKR920LinkAdrReq+0x5a>
 80194ac:	e092      	b.n	80195d4 <RegionKR920LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80194ae:	2246      	movs	r2, #70	; 0x46
 80194b0:	18bb      	adds	r3, r7, r2
 80194b2:	18b9      	adds	r1, r7, r2
 80194b4:	2244      	movs	r2, #68	; 0x44
 80194b6:	18ba      	adds	r2, r7, r2
 80194b8:	7809      	ldrb	r1, [r1, #0]
 80194ba:	7812      	ldrb	r2, [r2, #0]
 80194bc:	188a      	adds	r2, r1, r2
 80194be:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80194c0:	2347      	movs	r3, #71	; 0x47
 80194c2:	18fb      	adds	r3, r7, r3
 80194c4:	2207      	movs	r2, #7
 80194c6:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80194c8:	213c      	movs	r1, #60	; 0x3c
 80194ca:	187b      	adds	r3, r7, r1
 80194cc:	889a      	ldrh	r2, [r3, #4]
 80194ce:	233a      	movs	r3, #58	; 0x3a
 80194d0:	18fb      	adds	r3, r7, r3
 80194d2:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80194d4:	187b      	adds	r3, r7, r1
 80194d6:	78db      	ldrb	r3, [r3, #3]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d10c      	bne.n	80194f6 <RegionKR920LinkAdrReq+0xa2>
 80194dc:	233a      	movs	r3, #58	; 0x3a
 80194de:	18fb      	adds	r3, r7, r3
 80194e0:	881b      	ldrh	r3, [r3, #0]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d107      	bne.n	80194f6 <RegionKR920LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 80194e6:	2247      	movs	r2, #71	; 0x47
 80194e8:	18bb      	adds	r3, r7, r2
 80194ea:	18ba      	adds	r2, r7, r2
 80194ec:	7812      	ldrb	r2, [r2, #0]
 80194ee:	2101      	movs	r1, #1
 80194f0:	438a      	bics	r2, r1
 80194f2:	701a      	strb	r2, [r3, #0]
 80194f4:	e065      	b.n	80195c2 <RegionKR920LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80194f6:	233c      	movs	r3, #60	; 0x3c
 80194f8:	18fb      	adds	r3, r7, r3
 80194fa:	78db      	ldrb	r3, [r3, #3]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d004      	beq.n	801950a <RegionKR920LinkAdrReq+0xb6>
 8019500:	233c      	movs	r3, #60	; 0x3c
 8019502:	18fb      	adds	r3, r7, r3
 8019504:	78db      	ldrb	r3, [r3, #3]
 8019506:	2b05      	cmp	r3, #5
 8019508:	d904      	bls.n	8019514 <RegionKR920LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801950a:	233c      	movs	r3, #60	; 0x3c
 801950c:	18fb      	adds	r3, r7, r3
 801950e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019510:	2b06      	cmp	r3, #6
 8019512:	d907      	bls.n	8019524 <RegionKR920LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019514:	2247      	movs	r2, #71	; 0x47
 8019516:	18bb      	adds	r3, r7, r2
 8019518:	18ba      	adds	r2, r7, r2
 801951a:	7812      	ldrb	r2, [r2, #0]
 801951c:	2101      	movs	r1, #1
 801951e:	438a      	bics	r2, r1
 8019520:	701a      	strb	r2, [r3, #0]
 8019522:	e04e      	b.n	80195c2 <RegionKR920LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 8019524:	2345      	movs	r3, #69	; 0x45
 8019526:	18fb      	adds	r3, r7, r3
 8019528:	2200      	movs	r2, #0
 801952a:	701a      	strb	r2, [r3, #0]
 801952c:	e044      	b.n	80195b8 <RegionKR920LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801952e:	233c      	movs	r3, #60	; 0x3c
 8019530:	18fb      	adds	r3, r7, r3
 8019532:	78db      	ldrb	r3, [r3, #3]
 8019534:	2b06      	cmp	r3, #6
 8019536:	d11b      	bne.n	8019570 <RegionKR920LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8019538:	2345      	movs	r3, #69	; 0x45
 801953a:	18fb      	adds	r3, r7, r3
 801953c:	781a      	ldrb	r2, [r3, #0]
 801953e:	496e      	ldr	r1, [pc, #440]	; (80196f8 <RegionKR920LinkAdrReq+0x2a4>)
 8019540:	0013      	movs	r3, r2
 8019542:	005b      	lsls	r3, r3, #1
 8019544:	189b      	adds	r3, r3, r2
 8019546:	009b      	lsls	r3, r3, #2
 8019548:	585b      	ldr	r3, [r3, r1]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d02e      	beq.n	80195ac <RegionKR920LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801954e:	2345      	movs	r3, #69	; 0x45
 8019550:	18fb      	adds	r3, r7, r3
 8019552:	781b      	ldrb	r3, [r3, #0]
 8019554:	2201      	movs	r2, #1
 8019556:	409a      	lsls	r2, r3
 8019558:	0013      	movs	r3, r2
 801955a:	b21a      	sxth	r2, r3
 801955c:	213a      	movs	r1, #58	; 0x3a
 801955e:	187b      	adds	r3, r7, r1
 8019560:	881b      	ldrh	r3, [r3, #0]
 8019562:	b21b      	sxth	r3, r3
 8019564:	4313      	orrs	r3, r2
 8019566:	b21b      	sxth	r3, r3
 8019568:	b29a      	uxth	r2, r3
 801956a:	187b      	adds	r3, r7, r1
 801956c:	801a      	strh	r2, [r3, #0]
 801956e:	e01d      	b.n	80195ac <RegionKR920LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019570:	233a      	movs	r3, #58	; 0x3a
 8019572:	18fb      	adds	r3, r7, r3
 8019574:	881b      	ldrh	r3, [r3, #0]
 8019576:	001a      	movs	r2, r3
 8019578:	2345      	movs	r3, #69	; 0x45
 801957a:	18fb      	adds	r3, r7, r3
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	411a      	asrs	r2, r3
 8019580:	0013      	movs	r3, r2
 8019582:	2201      	movs	r2, #1
 8019584:	4013      	ands	r3, r2
 8019586:	d011      	beq.n	80195ac <RegionKR920LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8019588:	2345      	movs	r3, #69	; 0x45
 801958a:	18fb      	adds	r3, r7, r3
 801958c:	781a      	ldrb	r2, [r3, #0]
 801958e:	495a      	ldr	r1, [pc, #360]	; (80196f8 <RegionKR920LinkAdrReq+0x2a4>)
 8019590:	0013      	movs	r3, r2
 8019592:	005b      	lsls	r3, r3, #1
 8019594:	189b      	adds	r3, r3, r2
 8019596:	009b      	lsls	r3, r3, #2
 8019598:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801959a:	2b00      	cmp	r3, #0
 801959c:	d106      	bne.n	80195ac <RegionKR920LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801959e:	2247      	movs	r2, #71	; 0x47
 80195a0:	18bb      	adds	r3, r7, r2
 80195a2:	18ba      	adds	r2, r7, r2
 80195a4:	7812      	ldrb	r2, [r2, #0]
 80195a6:	2101      	movs	r1, #1
 80195a8:	438a      	bics	r2, r1
 80195aa:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 80195ac:	2145      	movs	r1, #69	; 0x45
 80195ae:	187b      	adds	r3, r7, r1
 80195b0:	781a      	ldrb	r2, [r3, #0]
 80195b2:	187b      	adds	r3, r7, r1
 80195b4:	3201      	adds	r2, #1
 80195b6:	701a      	strb	r2, [r3, #0]
 80195b8:	2345      	movs	r3, #69	; 0x45
 80195ba:	18fb      	adds	r3, r7, r3
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	2b0f      	cmp	r3, #15
 80195c0:	d9b5      	bls.n	801952e <RegionKR920LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	7a1b      	ldrb	r3, [r3, #8]
 80195c6:	2246      	movs	r2, #70	; 0x46
 80195c8:	18ba      	adds	r2, r7, r2
 80195ca:	7812      	ldrb	r2, [r2, #0]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	d200      	bcs.n	80195d2 <RegionKR920LinkAdrReq+0x17e>
 80195d0:	e758      	b.n	8019484 <RegionKR920LinkAdrReq+0x30>
 80195d2:	e000      	b.n	80195d6 <RegionKR920LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 80195d4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80195d6:	2134      	movs	r1, #52	; 0x34
 80195d8:	187b      	adds	r3, r7, r1
 80195da:	2201      	movs	r2, #1
 80195dc:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	7a5a      	ldrb	r2, [r3, #9]
 80195e2:	187b      	adds	r3, r7, r1
 80195e4:	709a      	strb	r2, [r3, #2]
    phyParam = RegionKR920GetPhyParam( &getPhy );
 80195e6:	187b      	adds	r3, r7, r1
 80195e8:	0018      	movs	r0, r3
 80195ea:	f7ff fb69 	bl	8018cc0 <RegionKR920GetPhyParam>
 80195ee:	0003      	movs	r3, r0
 80195f0:	001a      	movs	r2, r3
 80195f2:	2030      	movs	r0, #48	; 0x30
 80195f4:	183b      	adds	r3, r7, r0
 80195f6:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80195f8:	2110      	movs	r1, #16
 80195fa:	187b      	adds	r3, r7, r1
 80195fc:	2447      	movs	r4, #71	; 0x47
 80195fe:	193a      	adds	r2, r7, r4
 8019600:	7812      	ldrb	r2, [r2, #0]
 8019602:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	7a9a      	ldrb	r2, [r3, #10]
 8019608:	187b      	adds	r3, r7, r1
 801960a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801960c:	253c      	movs	r5, #60	; 0x3c
 801960e:	197b      	adds	r3, r7, r5
 8019610:	2201      	movs	r2, #1
 8019612:	569a      	ldrsb	r2, [r3, r2]
 8019614:	187b      	adds	r3, r7, r1
 8019616:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019618:	197b      	adds	r3, r7, r5
 801961a:	2202      	movs	r2, #2
 801961c:	569a      	ldrsb	r2, [r3, r2]
 801961e:	187b      	adds	r3, r7, r1
 8019620:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019622:	197b      	adds	r3, r7, r5
 8019624:	781a      	ldrb	r2, [r3, #0]
 8019626:	187b      	adds	r3, r7, r1
 8019628:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	220b      	movs	r2, #11
 801962e:	569a      	ldrsb	r2, [r3, r2]
 8019630:	187b      	adds	r3, r7, r1
 8019632:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	220c      	movs	r2, #12
 8019638:	569a      	ldrsb	r2, [r3, r2]
 801963a:	187b      	adds	r3, r7, r1
 801963c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	7b5b      	ldrb	r3, [r3, #13]
 8019642:	b25a      	sxtb	r2, r3
 8019644:	187b      	adds	r3, r7, r1
 8019646:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = KR920_MAX_NB_CHANNELS;
 8019648:	187b      	adds	r3, r7, r1
 801964a:	2210      	movs	r2, #16
 801964c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801964e:	187b      	adds	r3, r7, r1
 8019650:	223a      	movs	r2, #58	; 0x3a
 8019652:	18ba      	adds	r2, r7, r2
 8019654:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019656:	183b      	adds	r3, r7, r0
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	b25a      	sxtb	r2, r3
 801965c:	0008      	movs	r0, r1
 801965e:	183b      	adds	r3, r7, r0
 8019660:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = KR920_TX_MAX_DATARATE;
 8019662:	183b      	adds	r3, r7, r0
 8019664:	2205      	movs	r2, #5
 8019666:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8019668:	183b      	adds	r3, r7, r0
 801966a:	4a23      	ldr	r2, [pc, #140]	; (80196f8 <RegionKR920LinkAdrReq+0x2a4>)
 801966c:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
 801966e:	183b      	adds	r3, r7, r0
 8019670:	2207      	movs	r2, #7
 8019672:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = KR920_MAX_TX_POWER;
 8019674:	183b      	adds	r3, r7, r0
 8019676:	2200      	movs	r2, #0
 8019678:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801967a:	183b      	adds	r3, r7, r0
 801967c:	68fa      	ldr	r2, [r7, #12]
 801967e:	6812      	ldr	r2, [r2, #0]
 8019680:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019682:	0026      	movs	r6, r4
 8019684:	193c      	adds	r4, r7, r4
 8019686:	0029      	movs	r1, r5
 8019688:	187d      	adds	r5, r7, r1
 801968a:	187b      	adds	r3, r7, r1
 801968c:	1c9a      	adds	r2, r3, #2
 801968e:	187b      	adds	r3, r7, r1
 8019690:	1c59      	adds	r1, r3, #1
 8019692:	1838      	adds	r0, r7, r0
 8019694:	002b      	movs	r3, r5
 8019696:	f7fb f89d 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 801969a:	0003      	movs	r3, r0
 801969c:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801969e:	0034      	movs	r4, r6
 80196a0:	193b      	adds	r3, r7, r4
 80196a2:	781b      	ldrb	r3, [r3, #0]
 80196a4:	2b07      	cmp	r3, #7
 80196a6:	d10b      	bne.n	80196c0 <RegionKR920LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80196a8:	4b14      	ldr	r3, [pc, #80]	; (80196fc <RegionKR920LinkAdrReq+0x2a8>)
 80196aa:	2202      	movs	r2, #2
 80196ac:	2100      	movs	r1, #0
 80196ae:	0018      	movs	r0, r3
 80196b0:	f003 fb3c 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80196b4:	233a      	movs	r3, #58	; 0x3a
 80196b6:	18fb      	adds	r3, r7, r3
 80196b8:	8819      	ldrh	r1, [r3, #0]
 80196ba:	4b0f      	ldr	r3, [pc, #60]	; (80196f8 <RegionKR920LinkAdrReq+0x2a4>)
 80196bc:	22d0      	movs	r2, #208	; 0xd0
 80196be:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80196c0:	213c      	movs	r1, #60	; 0x3c
 80196c2:	187b      	adds	r3, r7, r1
 80196c4:	2201      	movs	r2, #1
 80196c6:	569a      	ldrsb	r2, [r3, r2]
 80196c8:	68bb      	ldr	r3, [r7, #8]
 80196ca:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80196cc:	187b      	adds	r3, r7, r1
 80196ce:	2202      	movs	r2, #2
 80196d0:	569a      	ldrsb	r2, [r3, r2]
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80196d6:	187b      	adds	r3, r7, r1
 80196d8:	781a      	ldrb	r2, [r3, #0]
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80196de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80196e0:	2246      	movs	r2, #70	; 0x46
 80196e2:	18ba      	adds	r2, r7, r2
 80196e4:	7812      	ldrb	r2, [r2, #0]
 80196e6:	701a      	strb	r2, [r3, #0]

    return status;
 80196e8:	2347      	movs	r3, #71	; 0x47
 80196ea:	18fb      	adds	r3, r7, r3
 80196ec:	781b      	ldrb	r3, [r3, #0]
}
 80196ee:	0018      	movs	r0, r3
 80196f0:	46bd      	mov	sp, r7
 80196f2:	b013      	add	sp, #76	; 0x4c
 80196f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196f6:	46c0      	nop			; (mov r8, r8)
 80196f8:	2000185c 	.word	0x2000185c
 80196fc:	2000192c 	.word	0x2000192c

08019700 <RegionKR920RxParamSetupReq>:

uint8_t RegionKR920RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b084      	sub	sp, #16
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019708:	230f      	movs	r3, #15
 801970a:	18fb      	adds	r3, r7, r3
 801970c:	2207      	movs	r2, #7
 801970e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	685b      	ldr	r3, [r3, #4]
 8019714:	0018      	movs	r0, r3
 8019716:	f7ff f9b3 	bl	8018a80 <VerifyRfFreq>
 801971a:	0003      	movs	r3, r0
 801971c:	001a      	movs	r2, r3
 801971e:	2301      	movs	r3, #1
 8019720:	4053      	eors	r3, r2
 8019722:	b2db      	uxtb	r3, r3
 8019724:	2b00      	cmp	r3, #0
 8019726:	d006      	beq.n	8019736 <RegionKR920RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8019728:	220f      	movs	r2, #15
 801972a:	18bb      	adds	r3, r7, r2
 801972c:	18ba      	adds	r2, r7, r2
 801972e:	7812      	ldrb	r2, [r2, #0]
 8019730:	2101      	movs	r1, #1
 8019732:	438a      	bics	r2, r1
 8019734:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE ) == false )
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	b25b      	sxtb	r3, r3
 801973c:	2205      	movs	r2, #5
 801973e:	2100      	movs	r1, #0
 8019740:	0018      	movs	r0, r3
 8019742:	f7fa fe09 	bl	8014358 <RegionCommonValueInRange>
 8019746:	1e03      	subs	r3, r0, #0
 8019748:	d106      	bne.n	8019758 <RegionKR920RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801974a:	220f      	movs	r2, #15
 801974c:	18bb      	adds	r3, r7, r2
 801974e:	18ba      	adds	r2, r7, r2
 8019750:	7812      	ldrb	r2, [r2, #0]
 8019752:	2102      	movs	r1, #2
 8019754:	438a      	bics	r2, r1
 8019756:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, KR920_MIN_RX1_DR_OFFSET, KR920_MAX_RX1_DR_OFFSET ) == false )
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	785b      	ldrb	r3, [r3, #1]
 801975c:	b25b      	sxtb	r3, r3
 801975e:	2205      	movs	r2, #5
 8019760:	2100      	movs	r1, #0
 8019762:	0018      	movs	r0, r3
 8019764:	f7fa fdf8 	bl	8014358 <RegionCommonValueInRange>
 8019768:	1e03      	subs	r3, r0, #0
 801976a:	d106      	bne.n	801977a <RegionKR920RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801976c:	220f      	movs	r2, #15
 801976e:	18bb      	adds	r3, r7, r2
 8019770:	18ba      	adds	r2, r7, r2
 8019772:	7812      	ldrb	r2, [r2, #0]
 8019774:	2104      	movs	r1, #4
 8019776:	438a      	bics	r2, r1
 8019778:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801977a:	230f      	movs	r3, #15
 801977c:	18fb      	adds	r3, r7, r3
 801977e:	781b      	ldrb	r3, [r3, #0]
}
 8019780:	0018      	movs	r0, r3
 8019782:	46bd      	mov	sp, r7
 8019784:	b004      	add	sp, #16
 8019786:	bd80      	pop	{r7, pc}

08019788 <RegionKR920NewChannelReq>:

uint8_t RegionKR920NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b086      	sub	sp, #24
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019790:	2317      	movs	r3, #23
 8019792:	18fb      	adds	r3, r7, r3
 8019794:	2203      	movs	r2, #3
 8019796:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d119      	bne.n	80197d6 <RegionKR920NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	791b      	ldrb	r3, [r3, #4]
 80197a6:	b25b      	sxtb	r3, r3
 80197a8:	b2da      	uxtb	r2, r3
 80197aa:	2108      	movs	r1, #8
 80197ac:	187b      	adds	r3, r7, r1
 80197ae:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionKR920ChannelsRemove( &channelRemove ) == false )
 80197b0:	187b      	adds	r3, r7, r1
 80197b2:	0018      	movs	r0, r3
 80197b4:	f000 fa74 	bl	8019ca0 <RegionKR920ChannelsRemove>
 80197b8:	0003      	movs	r3, r0
 80197ba:	001a      	movs	r2, r3
 80197bc:	2301      	movs	r3, #1
 80197be:	4053      	eors	r3, r2
 80197c0:	b2db      	uxtb	r3, r3
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d043      	beq.n	801984e <RegionKR920NewChannelReq+0xc6>
        {
            status &= 0xFC;
 80197c6:	2217      	movs	r2, #23
 80197c8:	18bb      	adds	r3, r7, r2
 80197ca:	18ba      	adds	r2, r7, r2
 80197cc:	7812      	ldrb	r2, [r2, #0]
 80197ce:	2103      	movs	r1, #3
 80197d0:	438a      	bics	r2, r1
 80197d2:	701a      	strb	r2, [r3, #0]
 80197d4:	e03b      	b.n	801984e <RegionKR920NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681a      	ldr	r2, [r3, #0]
 80197da:	210c      	movs	r1, #12
 80197dc:	187b      	adds	r3, r7, r1
 80197de:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	791b      	ldrb	r3, [r3, #4]
 80197e4:	b25b      	sxtb	r3, r3
 80197e6:	b2da      	uxtb	r2, r3
 80197e8:	187b      	adds	r3, r7, r1
 80197ea:	711a      	strb	r2, [r3, #4]

        switch( RegionKR920ChannelAdd( &channelAdd ) )
 80197ec:	187b      	adds	r3, r7, r1
 80197ee:	0018      	movs	r0, r3
 80197f0:	f000 f99c 	bl	8019b2c <RegionKR920ChannelAdd>
 80197f4:	0003      	movs	r3, r0
 80197f6:	2b04      	cmp	r3, #4
 80197f8:	d008      	beq.n	801980c <RegionKR920NewChannelReq+0x84>
 80197fa:	dc02      	bgt.n	8019802 <RegionKR920NewChannelReq+0x7a>
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d025      	beq.n	801984c <RegionKR920NewChannelReq+0xc4>
 8019800:	e01c      	b.n	801983c <RegionKR920NewChannelReq+0xb4>
 8019802:	2b05      	cmp	r3, #5
 8019804:	d00a      	beq.n	801981c <RegionKR920NewChannelReq+0x94>
 8019806:	2b06      	cmp	r3, #6
 8019808:	d010      	beq.n	801982c <RegionKR920NewChannelReq+0xa4>
 801980a:	e017      	b.n	801983c <RegionKR920NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801980c:	2217      	movs	r2, #23
 801980e:	18bb      	adds	r3, r7, r2
 8019810:	18ba      	adds	r2, r7, r2
 8019812:	7812      	ldrb	r2, [r2, #0]
 8019814:	2101      	movs	r1, #1
 8019816:	438a      	bics	r2, r1
 8019818:	701a      	strb	r2, [r3, #0]
                break;
 801981a:	e018      	b.n	801984e <RegionKR920NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801981c:	2217      	movs	r2, #23
 801981e:	18bb      	adds	r3, r7, r2
 8019820:	18ba      	adds	r2, r7, r2
 8019822:	7812      	ldrb	r2, [r2, #0]
 8019824:	2102      	movs	r1, #2
 8019826:	438a      	bics	r2, r1
 8019828:	701a      	strb	r2, [r3, #0]
                break;
 801982a:	e010      	b.n	801984e <RegionKR920NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801982c:	2217      	movs	r2, #23
 801982e:	18bb      	adds	r3, r7, r2
 8019830:	18ba      	adds	r2, r7, r2
 8019832:	7812      	ldrb	r2, [r2, #0]
 8019834:	2103      	movs	r1, #3
 8019836:	438a      	bics	r2, r1
 8019838:	701a      	strb	r2, [r3, #0]
                break;
 801983a:	e008      	b.n	801984e <RegionKR920NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 801983c:	2217      	movs	r2, #23
 801983e:	18bb      	adds	r3, r7, r2
 8019840:	18ba      	adds	r2, r7, r2
 8019842:	7812      	ldrb	r2, [r2, #0]
 8019844:	2103      	movs	r1, #3
 8019846:	438a      	bics	r2, r1
 8019848:	701a      	strb	r2, [r3, #0]
                break;
 801984a:	e000      	b.n	801984e <RegionKR920NewChannelReq+0xc6>
                break;
 801984c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801984e:	2317      	movs	r3, #23
 8019850:	18fb      	adds	r3, r7, r3
 8019852:	781b      	ldrb	r3, [r3, #0]
}
 8019854:	0018      	movs	r0, r3
 8019856:	46bd      	mov	sp, r7
 8019858:	b006      	add	sp, #24
 801985a:	bd80      	pop	{r7, pc}

0801985c <RegionKR920TxParamSetupReq>:

int8_t RegionKR920TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b082      	sub	sp, #8
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
    return -1;
 8019864:	2301      	movs	r3, #1
 8019866:	425b      	negs	r3, r3
}
 8019868:	0018      	movs	r0, r3
 801986a:	46bd      	mov	sp, r7
 801986c:	b002      	add	sp, #8
 801986e:	bd80      	pop	{r7, pc}

08019870 <RegionKR920DlChannelReq>:

uint8_t RegionKR920DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b084      	sub	sp, #16
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019878:	230f      	movs	r3, #15
 801987a:	18fb      	adds	r3, r7, r3
 801987c:	2203      	movs	r2, #3
 801987e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	685b      	ldr	r3, [r3, #4]
 8019884:	0018      	movs	r0, r3
 8019886:	f7ff f8fb 	bl	8018a80 <VerifyRfFreq>
 801988a:	0003      	movs	r3, r0
 801988c:	001a      	movs	r2, r3
 801988e:	2301      	movs	r3, #1
 8019890:	4053      	eors	r3, r2
 8019892:	b2db      	uxtb	r3, r3
 8019894:	2b00      	cmp	r3, #0
 8019896:	d006      	beq.n	80198a6 <RegionKR920DlChannelReq+0x36>
    {
        status &= 0xFE;
 8019898:	220f      	movs	r2, #15
 801989a:	18bb      	adds	r3, r7, r2
 801989c:	18ba      	adds	r2, r7, r2
 801989e:	7812      	ldrb	r2, [r2, #0]
 80198a0:	2101      	movs	r1, #1
 80198a2:	438a      	bics	r2, r1
 80198a4:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	0019      	movs	r1, r3
 80198ac:	4a13      	ldr	r2, [pc, #76]	; (80198fc <RegionKR920DlChannelReq+0x8c>)
 80198ae:	000b      	movs	r3, r1
 80198b0:	005b      	lsls	r3, r3, #1
 80198b2:	185b      	adds	r3, r3, r1
 80198b4:	009b      	lsls	r3, r3, #2
 80198b6:	589b      	ldr	r3, [r3, r2]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d106      	bne.n	80198ca <RegionKR920DlChannelReq+0x5a>
    {
        status &= 0xFD;
 80198bc:	220f      	movs	r2, #15
 80198be:	18bb      	adds	r3, r7, r2
 80198c0:	18ba      	adds	r2, r7, r2
 80198c2:	7812      	ldrb	r2, [r2, #0]
 80198c4:	2102      	movs	r1, #2
 80198c6:	438a      	bics	r2, r1
 80198c8:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80198ca:	230f      	movs	r3, #15
 80198cc:	18fb      	adds	r3, r7, r3
 80198ce:	781b      	ldrb	r3, [r3, #0]
 80198d0:	2b03      	cmp	r3, #3
 80198d2:	d10c      	bne.n	80198ee <RegionKR920DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	0018      	movs	r0, r3
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	685a      	ldr	r2, [r3, #4]
 80198de:	4907      	ldr	r1, [pc, #28]	; (80198fc <RegionKR920DlChannelReq+0x8c>)
 80198e0:	0003      	movs	r3, r0
 80198e2:	005b      	lsls	r3, r3, #1
 80198e4:	181b      	adds	r3, r3, r0
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	18cb      	adds	r3, r1, r3
 80198ea:	3304      	adds	r3, #4
 80198ec:	601a      	str	r2, [r3, #0]
    }

    return status;
 80198ee:	230f      	movs	r3, #15
 80198f0:	18fb      	adds	r3, r7, r3
 80198f2:	781b      	ldrb	r3, [r3, #0]
}
 80198f4:	0018      	movs	r0, r3
 80198f6:	46bd      	mov	sp, r7
 80198f8:	b004      	add	sp, #16
 80198fa:	bd80      	pop	{r7, pc}
 80198fc:	2000185c 	.word	0x2000185c

08019900 <RegionKR920CalcBackOff>:
{
    return currentDr;
}

void RegionKR920CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b088      	sub	sp, #32
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8019908:	210c      	movs	r1, #12
 801990a:	187b      	adds	r3, r7, r1
 801990c:	4a12      	ldr	r2, [pc, #72]	; (8019958 <RegionKR920CalcBackOff+0x58>)
 801990e:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8019910:	187b      	adds	r3, r7, r1
 8019912:	4a12      	ldr	r2, [pc, #72]	; (801995c <RegionKR920CalcBackOff+0x5c>)
 8019914:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	785a      	ldrb	r2, [r3, #1]
 801991a:	187b      	adds	r3, r7, r1
 801991c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	781a      	ldrb	r2, [r3, #0]
 8019922:	187b      	adds	r3, r7, r1
 8019924:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	789a      	ldrb	r2, [r3, #2]
 801992a:	187b      	adds	r3, r7, r1
 801992c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	78da      	ldrb	r2, [r3, #3]
 8019932:	187b      	adds	r3, r7, r1
 8019934:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	685a      	ldr	r2, [r3, #4]
 801993a:	187b      	adds	r3, r7, r1
 801993c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	689a      	ldr	r2, [r3, #8]
 8019942:	187b      	adds	r3, r7, r1
 8019944:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8019946:	187b      	adds	r3, r7, r1
 8019948:	0018      	movs	r0, r3
 801994a:	f7fb f8ed 	bl	8014b28 <RegionCommonCalcBackOff>
}
 801994e:	46c0      	nop			; (mov r8, r8)
 8019950:	46bd      	mov	sp, r7
 8019952:	b008      	add	sp, #32
 8019954:	bd80      	pop	{r7, pc}
 8019956:	46c0      	nop			; (mov r8, r8)
 8019958:	2000185c 	.word	0x2000185c
 801995c:	2000191c 	.word	0x2000191c

08019960 <RegionKR920NextChannel>:

LoRaMacStatus_t RegionKR920NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019960:	b5b0      	push	{r4, r5, r7, lr}
 8019962:	b090      	sub	sp, #64	; 0x40
 8019964:	af04      	add	r7, sp, #16
 8019966:	60f8      	str	r0, [r7, #12]
 8019968:	60b9      	str	r1, [r7, #8]
 801996a:	607a      	str	r2, [r7, #4]
 801996c:	603b      	str	r3, [r7, #0]
    uint8_t channelNext = 0;
 801996e:	2325      	movs	r3, #37	; 0x25
 8019970:	18fb      	adds	r3, r7, r3
 8019972:	2200      	movs	r2, #0
 8019974:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8019976:	232f      	movs	r3, #47	; 0x2f
 8019978:	18fb      	adds	r3, r7, r3
 801997a:	2200      	movs	r2, #0
 801997c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801997e:	2324      	movs	r3, #36	; 0x24
 8019980:	18fb      	adds	r3, r7, r3
 8019982:	2200      	movs	r2, #0
 8019984:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 8019986:	2314      	movs	r3, #20
 8019988:	18fb      	adds	r3, r7, r3
 801998a:	0018      	movs	r0, r3
 801998c:	2310      	movs	r3, #16
 801998e:	001a      	movs	r2, r3
 8019990:	2100      	movs	r1, #0
 8019992:	f00c fab9 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 8019996:	2300      	movs	r3, #0
 8019998:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801999a:	4b60      	ldr	r3, [pc, #384]	; (8019b1c <RegionKR920NextChannel+0x1bc>)
 801999c:	2201      	movs	r2, #1
 801999e:	2100      	movs	r1, #0
 80199a0:	0018      	movs	r0, r3
 80199a2:	f7fa fd41 	bl	8014428 <RegionCommonCountChannels>
 80199a6:	1e03      	subs	r3, r0, #0
 80199a8:	d108      	bne.n	80199bc <RegionKR920NextChannel+0x5c>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80199aa:	4b5d      	ldr	r3, [pc, #372]	; (8019b20 <RegionKR920NextChannel+0x1c0>)
 80199ac:	22d0      	movs	r2, #208	; 0xd0
 80199ae:	5a9b      	ldrh	r3, [r3, r2]
 80199b0:	2207      	movs	r2, #7
 80199b2:	4313      	orrs	r3, r2
 80199b4:	b299      	uxth	r1, r3
 80199b6:	4b5a      	ldr	r3, [pc, #360]	; (8019b20 <RegionKR920NextChannel+0x1c0>)
 80199b8:	22d0      	movs	r2, #208	; 0xd0
 80199ba:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	681c      	ldr	r4, [r3, #0]
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	685b      	ldr	r3, [r3, #4]
 80199c4:	0018      	movs	r0, r3
 80199c6:	f003 f936 	bl	801cc36 <TimerGetElapsedTime>
 80199ca:	0003      	movs	r3, r0
 80199cc:	429c      	cmp	r4, r3
 80199ce:	d824      	bhi.n	8019a1a <RegionKR920NextChannel+0xba>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	2200      	movs	r2, #0
 80199d4:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, KR920_MAX_NB_BANDS );
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	7a58      	ldrb	r0, [r3, #9]
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	7a99      	ldrb	r1, [r3, #10]
 80199de:	4a51      	ldr	r2, [pc, #324]	; (8019b24 <RegionKR920NextChannel+0x1c4>)
 80199e0:	2301      	movs	r3, #1
 80199e2:	f7fa fdac 	bl	801453e <RegionCommonUpdateBandTimeOff>
 80199e6:	0003      	movs	r3, r0
 80199e8:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	7a58      	ldrb	r0, [r3, #9]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	7a1b      	ldrb	r3, [r3, #8]
 80199f2:	b25b      	sxtb	r3, r3
 80199f4:	b2d9      	uxtb	r1, r3
 80199f6:	232f      	movs	r3, #47	; 0x2f
 80199f8:	18fc      	adds	r4, r7, r3
 80199fa:	4d49      	ldr	r5, [pc, #292]	; (8019b20 <RegionKR920NextChannel+0x1c0>)
 80199fc:	4a47      	ldr	r2, [pc, #284]	; (8019b1c <RegionKR920NextChannel+0x1bc>)
 80199fe:	2324      	movs	r3, #36	; 0x24
 8019a00:	18fb      	adds	r3, r7, r3
 8019a02:	9302      	str	r3, [sp, #8]
 8019a04:	2314      	movs	r3, #20
 8019a06:	18fb      	adds	r3, r7, r3
 8019a08:	9301      	str	r3, [sp, #4]
 8019a0a:	4b46      	ldr	r3, [pc, #280]	; (8019b24 <RegionKR920NextChannel+0x1c4>)
 8019a0c:	9300      	str	r3, [sp, #0]
 8019a0e:	002b      	movs	r3, r5
 8019a10:	f7ff f870 	bl	8018af4 <CountNbOfEnabledChannels>
 8019a14:	0003      	movs	r3, r0
 8019a16:	7023      	strb	r3, [r4, #0]
 8019a18:	e010      	b.n	8019a3c <RegionKR920NextChannel+0xdc>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8019a1a:	2124      	movs	r1, #36	; 0x24
 8019a1c:	187b      	adds	r3, r7, r1
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	3301      	adds	r3, #1
 8019a22:	b2da      	uxtb	r2, r3
 8019a24:	187b      	adds	r3, r7, r1
 8019a26:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	681c      	ldr	r4, [r3, #0]
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	685b      	ldr	r3, [r3, #4]
 8019a30:	0018      	movs	r0, r3
 8019a32:	f003 f900 	bl	801cc36 <TimerGetElapsedTime>
 8019a36:	0003      	movs	r3, r0
 8019a38:	1ae3      	subs	r3, r4, r3
 8019a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8019a3c:	232f      	movs	r3, #47	; 0x2f
 8019a3e:	18fb      	adds	r3, r7, r3
 8019a40:	781b      	ldrb	r3, [r3, #0]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d04f      	beq.n	8019ae6 <RegionKR920NextChannel+0x186>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 8019a46:	2327      	movs	r3, #39	; 0x27
 8019a48:	18fb      	adds	r3, r7, r3
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	701a      	strb	r2, [r3, #0]
 8019a4e:	232f      	movs	r3, #47	; 0x2f
 8019a50:	18fb      	adds	r3, r7, r3
 8019a52:	781b      	ldrb	r3, [r3, #0]
 8019a54:	3b01      	subs	r3, #1
 8019a56:	0019      	movs	r1, r3
 8019a58:	2000      	movs	r0, #0
 8019a5a:	f003 f915 	bl	801cc88 <randr>
 8019a5e:	0002      	movs	r2, r0
 8019a60:	2326      	movs	r3, #38	; 0x26
 8019a62:	18fb      	adds	r3, r7, r3
 8019a64:	701a      	strb	r2, [r3, #0]
 8019a66:	e037      	b.n	8019ad8 <RegionKR920NextChannel+0x178>
        {
            channelNext = enabledChannels[j];
 8019a68:	2426      	movs	r4, #38	; 0x26
 8019a6a:	193b      	adds	r3, r7, r4
 8019a6c:	781a      	ldrb	r2, [r3, #0]
 8019a6e:	2525      	movs	r5, #37	; 0x25
 8019a70:	197b      	adds	r3, r7, r5
 8019a72:	2114      	movs	r1, #20
 8019a74:	1879      	adds	r1, r7, r1
 8019a76:	5c8a      	ldrb	r2, [r1, r2]
 8019a78:	701a      	strb	r2, [r3, #0]
            j = ( j + 1 ) % nbEnabledChannels;
 8019a7a:	193b      	adds	r3, r7, r4
 8019a7c:	781b      	ldrb	r3, [r3, #0]
 8019a7e:	1c5a      	adds	r2, r3, #1
 8019a80:	232f      	movs	r3, #47	; 0x2f
 8019a82:	18fb      	adds	r3, r7, r3
 8019a84:	781b      	ldrb	r3, [r3, #0]
 8019a86:	0019      	movs	r1, r3
 8019a88:	0010      	movs	r0, r2
 8019a8a:	f7e6 fcb5 	bl	80003f8 <__aeabi_idivmod>
 8019a8e:	000b      	movs	r3, r1
 8019a90:	001a      	movs	r2, r3
 8019a92:	193b      	adds	r3, r7, r4
 8019a94:	701a      	strb	r2, [r3, #0]

            // Perform carrier sense for KR920_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, KR920_RSSI_FREE_TH, KR920_CARRIER_SENSE_TIME ) == true )
 8019a96:	4b24      	ldr	r3, [pc, #144]	; (8019b28 <RegionKR920NextChannel+0x1c8>)
 8019a98:	699c      	ldr	r4, [r3, #24]
 8019a9a:	197b      	adds	r3, r7, r5
 8019a9c:	781a      	ldrb	r2, [r3, #0]
 8019a9e:	4920      	ldr	r1, [pc, #128]	; (8019b20 <RegionKR920NextChannel+0x1c0>)
 8019aa0:	0013      	movs	r3, r2
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	189b      	adds	r3, r3, r2
 8019aa6:	009b      	lsls	r3, r3, #2
 8019aa8:	5859      	ldr	r1, [r3, r1]
 8019aaa:	2341      	movs	r3, #65	; 0x41
 8019aac:	425a      	negs	r2, r3
 8019aae:	2306      	movs	r3, #6
 8019ab0:	2001      	movs	r0, #1
 8019ab2:	47a0      	blx	r4
 8019ab4:	1e03      	subs	r3, r0, #0
 8019ab6:	d009      	beq.n	8019acc <RegionKR920NextChannel+0x16c>
            {
                // Free channel found
                *channel = channelNext;
 8019ab8:	68bb      	ldr	r3, [r7, #8]
 8019aba:	2225      	movs	r2, #37	; 0x25
 8019abc:	18ba      	adds	r2, r7, r2
 8019abe:	7812      	ldrb	r2, [r2, #0]
 8019ac0:	701a      	strb	r2, [r3, #0]
                *time = 0;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	601a      	str	r2, [r3, #0]
                return LORAMAC_STATUS_OK;
 8019ac8:	2300      	movs	r3, #0
 8019aca:	e023      	b.n	8019b14 <RegionKR920NextChannel+0x1b4>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 8019acc:	2127      	movs	r1, #39	; 0x27
 8019ace:	187b      	adds	r3, r7, r1
 8019ad0:	781a      	ldrb	r2, [r3, #0]
 8019ad2:	187b      	adds	r3, r7, r1
 8019ad4:	3201      	adds	r2, #1
 8019ad6:	701a      	strb	r2, [r3, #0]
 8019ad8:	2327      	movs	r3, #39	; 0x27
 8019ada:	18fb      	adds	r3, r7, r3
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	2b0f      	cmp	r3, #15
 8019ae0:	d9c2      	bls.n	8019a68 <RegionKR920NextChannel+0x108>
            }
        }
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 8019ae2:	230d      	movs	r3, #13
 8019ae4:	e016      	b.n	8019b14 <RegionKR920NextChannel+0x1b4>
    }
    else
    {
        if( delayTx > 0 )
 8019ae6:	2324      	movs	r3, #36	; 0x24
 8019ae8:	18fb      	adds	r3, r7, r3
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d004      	beq.n	8019afa <RegionKR920NextChannel+0x19a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019af4:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8019af6:	230b      	movs	r3, #11
 8019af8:	e00c      	b.n	8019b14 <RegionKR920NextChannel+0x1b4>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019afa:	4b09      	ldr	r3, [pc, #36]	; (8019b20 <RegionKR920NextChannel+0x1c0>)
 8019afc:	22d0      	movs	r2, #208	; 0xd0
 8019afe:	5a9b      	ldrh	r3, [r3, r2]
 8019b00:	2207      	movs	r2, #7
 8019b02:	4313      	orrs	r3, r2
 8019b04:	b299      	uxth	r1, r3
 8019b06:	4b06      	ldr	r3, [pc, #24]	; (8019b20 <RegionKR920NextChannel+0x1c0>)
 8019b08:	22d0      	movs	r2, #208	; 0xd0
 8019b0a:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	2200      	movs	r2, #0
 8019b10:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019b12:	230c      	movs	r3, #12
    }
}
 8019b14:	0018      	movs	r0, r3
 8019b16:	46bd      	mov	sp, r7
 8019b18:	b00c      	add	sp, #48	; 0x30
 8019b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8019b1c:	2000192c 	.word	0x2000192c
 8019b20:	2000185c 	.word	0x2000185c
 8019b24:	2000191c 	.word	0x2000191c
 8019b28:	080293d8 	.word	0x080293d8

08019b2c <RegionKR920ChannelAdd>:

LoRaMacStatus_t RegionKR920ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b2c:	b590      	push	{r4, r7, lr}
 8019b2e:	b085      	sub	sp, #20
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8019b34:	230f      	movs	r3, #15
 8019b36:	18fb      	adds	r3, r7, r3
 8019b38:	2200      	movs	r2, #0
 8019b3a:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8019b3c:	230e      	movs	r3, #14
 8019b3e:	18fb      	adds	r3, r7, r3
 8019b40:	2200      	movs	r2, #0
 8019b42:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8019b44:	210d      	movs	r1, #13
 8019b46:	187b      	adds	r3, r7, r1
 8019b48:	687a      	ldr	r2, [r7, #4]
 8019b4a:	7912      	ldrb	r2, [r2, #4]
 8019b4c:	701a      	strb	r2, [r3, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 8019b4e:	187b      	adds	r3, r7, r1
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	2b02      	cmp	r3, #2
 8019b54:	d801      	bhi.n	8019b5a <RegionKR920ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b56:	2306      	movs	r3, #6
 8019b58:	e09c      	b.n	8019c94 <RegionKR920ChannelAdd+0x168>
    }

    if( id >= KR920_MAX_NB_CHANNELS )
 8019b5a:	230d      	movs	r3, #13
 8019b5c:	18fb      	adds	r3, r7, r3
 8019b5e:	781b      	ldrb	r3, [r3, #0]
 8019b60:	2b0f      	cmp	r3, #15
 8019b62:	d901      	bls.n	8019b68 <RegionKR920ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b64:	2303      	movs	r3, #3
 8019b66:	e095      	b.n	8019c94 <RegionKR920ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	7a1b      	ldrb	r3, [r3, #8]
 8019b6e:	011b      	lsls	r3, r3, #4
 8019b70:	b25b      	sxtb	r3, r3
 8019b72:	111b      	asrs	r3, r3, #4
 8019b74:	b25b      	sxtb	r3, r3
 8019b76:	2205      	movs	r2, #5
 8019b78:	2100      	movs	r1, #0
 8019b7a:	0018      	movs	r0, r3
 8019b7c:	f7fa fbec 	bl	8014358 <RegionCommonValueInRange>
 8019b80:	1e03      	subs	r3, r0, #0
 8019b82:	d103      	bne.n	8019b8c <RegionKR920ChannelAdd+0x60>
    {
        drInvalid = true;
 8019b84:	230f      	movs	r3, #15
 8019b86:	18fb      	adds	r3, r7, r3
 8019b88:	2201      	movs	r2, #1
 8019b8a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	7a1b      	ldrb	r3, [r3, #8]
 8019b92:	b25b      	sxtb	r3, r3
 8019b94:	111b      	asrs	r3, r3, #4
 8019b96:	b25b      	sxtb	r3, r3
 8019b98:	2205      	movs	r2, #5
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	0018      	movs	r0, r3
 8019b9e:	f7fa fbdb 	bl	8014358 <RegionCommonValueInRange>
 8019ba2:	1e03      	subs	r3, r0, #0
 8019ba4:	d103      	bne.n	8019bae <RegionKR920ChannelAdd+0x82>
    {
        drInvalid = true;
 8019ba6:	230f      	movs	r3, #15
 8019ba8:	18fb      	adds	r3, r7, r3
 8019baa:	2201      	movs	r2, #1
 8019bac:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	7a1b      	ldrb	r3, [r3, #8]
 8019bb4:	011b      	lsls	r3, r3, #4
 8019bb6:	b25b      	sxtb	r3, r3
 8019bb8:	111b      	asrs	r3, r3, #4
 8019bba:	b25a      	sxtb	r2, r3
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	7a1b      	ldrb	r3, [r3, #8]
 8019bc2:	b25b      	sxtb	r3, r3
 8019bc4:	111b      	asrs	r3, r3, #4
 8019bc6:	b25b      	sxtb	r3, r3
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	dd03      	ble.n	8019bd4 <RegionKR920ChannelAdd+0xa8>
    {
        drInvalid = true;
 8019bcc:	230f      	movs	r3, #15
 8019bce:	18fb      	adds	r3, r7, r3
 8019bd0:	2201      	movs	r2, #1
 8019bd2:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019bd4:	230e      	movs	r3, #14
 8019bd6:	18fb      	adds	r3, r7, r3
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	2201      	movs	r2, #1
 8019bdc:	4053      	eors	r3, r2
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d010      	beq.n	8019c06 <RegionKR920ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	0018      	movs	r0, r3
 8019bec:	f7fe ff48 	bl	8018a80 <VerifyRfFreq>
 8019bf0:	0003      	movs	r3, r0
 8019bf2:	001a      	movs	r2, r3
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	4053      	eors	r3, r2
 8019bf8:	b2db      	uxtb	r3, r3
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d003      	beq.n	8019c06 <RegionKR920ChannelAdd+0xda>
        {
            freqInvalid = true;
 8019bfe:	230e      	movs	r3, #14
 8019c00:	18fb      	adds	r3, r7, r3
 8019c02:	2201      	movs	r2, #1
 8019c04:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019c06:	230f      	movs	r3, #15
 8019c08:	18fb      	adds	r3, r7, r3
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d006      	beq.n	8019c1e <RegionKR920ChannelAdd+0xf2>
 8019c10:	230e      	movs	r3, #14
 8019c12:	18fb      	adds	r3, r7, r3
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d001      	beq.n	8019c1e <RegionKR920ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019c1a:	2306      	movs	r3, #6
 8019c1c:	e03a      	b.n	8019c94 <RegionKR920ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8019c1e:	230f      	movs	r3, #15
 8019c20:	18fb      	adds	r3, r7, r3
 8019c22:	781b      	ldrb	r3, [r3, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d001      	beq.n	8019c2c <RegionKR920ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019c28:	2305      	movs	r3, #5
 8019c2a:	e033      	b.n	8019c94 <RegionKR920ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8019c2c:	230e      	movs	r3, #14
 8019c2e:	18fb      	adds	r3, r7, r3
 8019c30:	781b      	ldrb	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d001      	beq.n	8019c3a <RegionKR920ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019c36:	2304      	movs	r3, #4
 8019c38:	e02c      	b.n	8019c94 <RegionKR920ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8019c3a:	200d      	movs	r0, #13
 8019c3c:	0004      	movs	r4, r0
 8019c3e:	183b      	adds	r3, r7, r0
 8019c40:	781a      	ldrb	r2, [r3, #0]
 8019c42:	0013      	movs	r3, r2
 8019c44:	005b      	lsls	r3, r3, #1
 8019c46:	189b      	adds	r3, r3, r2
 8019c48:	009b      	lsls	r3, r3, #2
 8019c4a:	4a14      	ldr	r2, [pc, #80]	; (8019c9c <RegionKR920ChannelAdd+0x170>)
 8019c4c:	1898      	adds	r0, r3, r2
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	220c      	movs	r2, #12
 8019c54:	0019      	movs	r1, r3
 8019c56:	f003 f82d 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8019c5a:	0020      	movs	r0, r4
 8019c5c:	183b      	adds	r3, r7, r0
 8019c5e:	781a      	ldrb	r2, [r3, #0]
 8019c60:	490e      	ldr	r1, [pc, #56]	; (8019c9c <RegionKR920ChannelAdd+0x170>)
 8019c62:	0013      	movs	r3, r2
 8019c64:	005b      	lsls	r3, r3, #1
 8019c66:	189b      	adds	r3, r3, r2
 8019c68:	009b      	lsls	r3, r3, #2
 8019c6a:	18cb      	adds	r3, r1, r3
 8019c6c:	3309      	adds	r3, #9
 8019c6e:	2200      	movs	r2, #0
 8019c70:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8019c72:	4b0a      	ldr	r3, [pc, #40]	; (8019c9c <RegionKR920ChannelAdd+0x170>)
 8019c74:	22d0      	movs	r2, #208	; 0xd0
 8019c76:	5a9b      	ldrh	r3, [r3, r2]
 8019c78:	b21a      	sxth	r2, r3
 8019c7a:	183b      	adds	r3, r7, r0
 8019c7c:	781b      	ldrb	r3, [r3, #0]
 8019c7e:	2101      	movs	r1, #1
 8019c80:	4099      	lsls	r1, r3
 8019c82:	000b      	movs	r3, r1
 8019c84:	b21b      	sxth	r3, r3
 8019c86:	4313      	orrs	r3, r2
 8019c88:	b21b      	sxth	r3, r3
 8019c8a:	b299      	uxth	r1, r3
 8019c8c:	4b03      	ldr	r3, [pc, #12]	; (8019c9c <RegionKR920ChannelAdd+0x170>)
 8019c8e:	22d0      	movs	r2, #208	; 0xd0
 8019c90:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8019c92:	2300      	movs	r3, #0
}
 8019c94:	0018      	movs	r0, r3
 8019c96:	46bd      	mov	sp, r7
 8019c98:	b005      	add	sp, #20
 8019c9a:	bd90      	pop	{r4, r7, pc}
 8019c9c:	2000185c 	.word	0x2000185c

08019ca0 <RegionKR920ChannelsRemove>:

bool RegionKR920ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019ca0:	b590      	push	{r4, r7, lr}
 8019ca2:	b085      	sub	sp, #20
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019ca8:	210f      	movs	r1, #15
 8019caa:	187b      	adds	r3, r7, r1
 8019cac:	687a      	ldr	r2, [r7, #4]
 8019cae:	7812      	ldrb	r2, [r2, #0]
 8019cb0:	701a      	strb	r2, [r3, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 8019cb2:	187b      	adds	r3, r7, r1
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	2b02      	cmp	r3, #2
 8019cb8:	d801      	bhi.n	8019cbe <RegionKR920ChannelsRemove+0x1e>
    {
        return false;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	e015      	b.n	8019cea <RegionKR920ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019cbe:	240f      	movs	r4, #15
 8019cc0:	193b      	adds	r3, r7, r4
 8019cc2:	781a      	ldrb	r2, [r3, #0]
 8019cc4:	490b      	ldr	r1, [pc, #44]	; (8019cf4 <RegionKR920ChannelsRemove+0x54>)
 8019cc6:	0013      	movs	r3, r2
 8019cc8:	005b      	lsls	r3, r3, #1
 8019cca:	189b      	adds	r3, r3, r2
 8019ccc:	009b      	lsls	r3, r3, #2
 8019cce:	18cb      	adds	r3, r1, r3
 8019cd0:	220c      	movs	r2, #12
 8019cd2:	2100      	movs	r1, #0
 8019cd4:	0018      	movs	r0, r3
 8019cd6:	f00c f917 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, KR920_MAX_NB_CHANNELS );
 8019cda:	193b      	adds	r3, r7, r4
 8019cdc:	7819      	ldrb	r1, [r3, #0]
 8019cde:	4b06      	ldr	r3, [pc, #24]	; (8019cf8 <RegionKR920ChannelsRemove+0x58>)
 8019ce0:	2210      	movs	r2, #16
 8019ce2:	0018      	movs	r0, r3
 8019ce4:	f7fa fb5e 	bl	80143a4 <RegionCommonChanDisable>
 8019ce8:	0003      	movs	r3, r0
}
 8019cea:	0018      	movs	r0, r3
 8019cec:	46bd      	mov	sp, r7
 8019cee:	b005      	add	sp, #20
 8019cf0:	bd90      	pop	{r4, r7, pc}
 8019cf2:	46c0      	nop			; (mov r8, r8)
 8019cf4:	2000185c 	.word	0x2000185c
 8019cf8:	2000192c 	.word	0x2000192c

08019cfc <RegionKR920ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionKR920ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019cfc:	b590      	push	{r4, r7, lr}
 8019cfe:	b085      	sub	sp, #20
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	0004      	movs	r4, r0
 8019d04:	0008      	movs	r0, r1
 8019d06:	0011      	movs	r1, r2
 8019d08:	1dfb      	adds	r3, r7, #7
 8019d0a:	1c22      	adds	r2, r4, #0
 8019d0c:	701a      	strb	r2, [r3, #0]
 8019d0e:	1dbb      	adds	r3, r7, #6
 8019d10:	1c02      	adds	r2, r0, #0
 8019d12:	701a      	strb	r2, [r3, #0]
 8019d14:	1d7b      	adds	r3, r7, #5
 8019d16:	1c0a      	adds	r2, r1, #0
 8019d18:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019d1a:	1dbb      	adds	r3, r7, #6
 8019d1c:	781a      	ldrb	r2, [r3, #0]
 8019d1e:	1d7b      	adds	r3, r7, #5
 8019d20:	781b      	ldrb	r3, [r3, #0]
 8019d22:	1ad3      	subs	r3, r2, r3
 8019d24:	b2da      	uxtb	r2, r3
 8019d26:	210f      	movs	r1, #15
 8019d28:	187b      	adds	r3, r7, r1
 8019d2a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8019d2c:	187b      	adds	r3, r7, r1
 8019d2e:	781b      	ldrb	r3, [r3, #0]
 8019d30:	2b7f      	cmp	r3, #127	; 0x7f
 8019d32:	d903      	bls.n	8019d3c <RegionKR920ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8019d34:	230f      	movs	r3, #15
 8019d36:	18fb      	adds	r3, r7, r3
 8019d38:	2200      	movs	r2, #0
 8019d3a:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019d3c:	230f      	movs	r3, #15
 8019d3e:	18fb      	adds	r3, r7, r3
 8019d40:	781b      	ldrb	r3, [r3, #0]
}
 8019d42:	0018      	movs	r0, r3
 8019d44:	46bd      	mov	sp, r7
 8019d46:	b005      	add	sp, #20
 8019d48:	bd90      	pop	{r4, r7, pc}

08019d4a <GetNextLowerTxDr>:
 */
static RegionRU864NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8019d4a:	b580      	push	{r7, lr}
 8019d4c:	b084      	sub	sp, #16
 8019d4e:	af00      	add	r7, sp, #0
 8019d50:	0002      	movs	r2, r0
 8019d52:	1dfb      	adds	r3, r7, #7
 8019d54:	701a      	strb	r2, [r3, #0]
 8019d56:	1dbb      	adds	r3, r7, #6
 8019d58:	1c0a      	adds	r2, r1, #0
 8019d5a:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8019d5c:	230f      	movs	r3, #15
 8019d5e:	18fb      	adds	r3, r7, r3
 8019d60:	2200      	movs	r2, #0
 8019d62:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8019d64:	1dfa      	adds	r2, r7, #7
 8019d66:	1dbb      	adds	r3, r7, #6
 8019d68:	7812      	ldrb	r2, [r2, #0]
 8019d6a:	b252      	sxtb	r2, r2
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	b25b      	sxtb	r3, r3
 8019d70:	429a      	cmp	r2, r3
 8019d72:	d105      	bne.n	8019d80 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8019d74:	230f      	movs	r3, #15
 8019d76:	18fb      	adds	r3, r7, r3
 8019d78:	1dba      	adds	r2, r7, #6
 8019d7a:	7812      	ldrb	r2, [r2, #0]
 8019d7c:	701a      	strb	r2, [r3, #0]
 8019d7e:	e005      	b.n	8019d8c <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8019d80:	1dfb      	adds	r3, r7, #7
 8019d82:	781a      	ldrb	r2, [r3, #0]
 8019d84:	230f      	movs	r3, #15
 8019d86:	18fb      	adds	r3, r7, r3
 8019d88:	3a01      	subs	r2, #1
 8019d8a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8019d8c:	230f      	movs	r3, #15
 8019d8e:	18fb      	adds	r3, r7, r3
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	b25b      	sxtb	r3, r3
}
 8019d94:	0018      	movs	r0, r3
 8019d96:	46bd      	mov	sp, r7
 8019d98:	b004      	add	sp, #16
 8019d9a:	bd80      	pop	{r7, pc}

08019d9c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsRU864[drIndex] )
 8019da4:	4b09      	ldr	r3, [pc, #36]	; (8019dcc <GetBandwidth+0x30>)
 8019da6:	687a      	ldr	r2, [r7, #4]
 8019da8:	0092      	lsls	r2, r2, #2
 8019daa:	58d3      	ldr	r3, [r2, r3]
 8019dac:	4a08      	ldr	r2, [pc, #32]	; (8019dd0 <GetBandwidth+0x34>)
 8019dae:	4293      	cmp	r3, r2
 8019db0:	d004      	beq.n	8019dbc <GetBandwidth+0x20>
 8019db2:	4a08      	ldr	r2, [pc, #32]	; (8019dd4 <GetBandwidth+0x38>)
 8019db4:	4293      	cmp	r3, r2
 8019db6:	d003      	beq.n	8019dc0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8019db8:	2300      	movs	r3, #0
 8019dba:	e002      	b.n	8019dc2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8019dbc:	2301      	movs	r3, #1
 8019dbe:	e000      	b.n	8019dc2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8019dc0:	2302      	movs	r3, #2
    }
}
 8019dc2:	0018      	movs	r0, r3
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	b002      	add	sp, #8
 8019dc8:	bd80      	pop	{r7, pc}
 8019dca:	46c0      	nop			; (mov r8, r8)
 8019dcc:	08029188 	.word	0x08029188
 8019dd0:	0003d090 	.word	0x0003d090
 8019dd4:	0007a120 	.word	0x0007a120

08019dd8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8019dd8:	b590      	push	{r4, r7, lr}
 8019dda:	b085      	sub	sp, #20
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	0004      	movs	r4, r0
 8019de0:	0008      	movs	r0, r1
 8019de2:	0011      	movs	r1, r2
 8019de4:	603b      	str	r3, [r7, #0]
 8019de6:	1dfb      	adds	r3, r7, #7
 8019de8:	1c22      	adds	r2, r4, #0
 8019dea:	701a      	strb	r2, [r3, #0]
 8019dec:	1dbb      	adds	r3, r7, #6
 8019dee:	1c02      	adds	r2, r0, #0
 8019df0:	701a      	strb	r2, [r3, #0]
 8019df2:	1d7b      	adds	r3, r7, #5
 8019df4:	1c0a      	adds	r2, r1, #0
 8019df6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8019df8:	210f      	movs	r1, #15
 8019dfa:	187b      	adds	r3, r7, r1
 8019dfc:	1dfa      	adds	r2, r7, #7
 8019dfe:	7812      	ldrb	r2, [r2, #0]
 8019e00:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8019e02:	187a      	adds	r2, r7, r1
 8019e04:	1dbb      	adds	r3, r7, #6
 8019e06:	1df9      	adds	r1, r7, #7
 8019e08:	780c      	ldrb	r4, [r1, #0]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	b258      	sxtb	r0, r3
 8019e0e:	b261      	sxtb	r1, r4
 8019e10:	4288      	cmp	r0, r1
 8019e12:	da00      	bge.n	8019e16 <LimitTxPower+0x3e>
 8019e14:	1c23      	adds	r3, r4, #0
 8019e16:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8019e18:	230f      	movs	r3, #15
 8019e1a:	18fb      	adds	r3, r7, r3
 8019e1c:	781b      	ldrb	r3, [r3, #0]
 8019e1e:	b25b      	sxtb	r3, r3
}
 8019e20:	0018      	movs	r0, r3
 8019e22:	46bd      	mov	sp, r7
 8019e24:	b005      	add	sp, #20
 8019e26:	bd90      	pop	{r4, r7, pc}

08019e28 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8019e30:	4b0e      	ldr	r3, [pc, #56]	; (8019e6c <VerifyRfFreq+0x44>)
 8019e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e34:	687a      	ldr	r2, [r7, #4]
 8019e36:	0010      	movs	r0, r2
 8019e38:	4798      	blx	r3
 8019e3a:	0003      	movs	r3, r0
 8019e3c:	001a      	movs	r2, r3
 8019e3e:	2301      	movs	r3, #1
 8019e40:	4053      	eors	r3, r2
 8019e42:	b2db      	uxtb	r3, r3
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d001      	beq.n	8019e4c <VerifyRfFreq+0x24>
    {
        return false;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	e00a      	b.n	8019e62 <VerifyRfFreq+0x3a>
    }

    // Check frequency bands
    if( ( freq < 864000000 ) ||  ( freq > 870000000 ) )
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	4a08      	ldr	r2, [pc, #32]	; (8019e70 <VerifyRfFreq+0x48>)
 8019e50:	4293      	cmp	r3, r2
 8019e52:	d903      	bls.n	8019e5c <VerifyRfFreq+0x34>
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	4a07      	ldr	r2, [pc, #28]	; (8019e74 <VerifyRfFreq+0x4c>)
 8019e58:	4293      	cmp	r3, r2
 8019e5a:	d901      	bls.n	8019e60 <VerifyRfFreq+0x38>
    {
        return false;
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	e000      	b.n	8019e62 <VerifyRfFreq+0x3a>
    }
    return true;
 8019e60:	2301      	movs	r3, #1
}
 8019e62:	0018      	movs	r0, r3
 8019e64:	46bd      	mov	sp, r7
 8019e66:	b002      	add	sp, #8
 8019e68:	bd80      	pop	{r7, pc}
 8019e6a:	46c0      	nop			; (mov r8, r8)
 8019e6c:	080293d8 	.word	0x080293d8
 8019e70:	337f97ff 	.word	0x337f97ff
 8019e74:	33db2580 	.word	0x33db2580

08019e78 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8019e78:	b5b0      	push	{r4, r5, r7, lr}
 8019e7a:	b086      	sub	sp, #24
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	60ba      	str	r2, [r7, #8]
 8019e80:	607b      	str	r3, [r7, #4]
 8019e82:	230f      	movs	r3, #15
 8019e84:	18fb      	adds	r3, r7, r3
 8019e86:	1c02      	adds	r2, r0, #0
 8019e88:	701a      	strb	r2, [r3, #0]
 8019e8a:	230e      	movs	r3, #14
 8019e8c:	18fb      	adds	r3, r7, r3
 8019e8e:	1c0a      	adds	r2, r1, #0
 8019e90:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8019e92:	2317      	movs	r3, #23
 8019e94:	18fb      	adds	r3, r7, r3
 8019e96:	2200      	movs	r2, #0
 8019e98:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8019e9a:	2316      	movs	r3, #22
 8019e9c:	18fb      	adds	r3, r7, r3
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < RU864_MAX_NB_CHANNELS; i += 16, k++ )
 8019ea2:	2315      	movs	r3, #21
 8019ea4:	18fb      	adds	r3, r7, r3
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	701a      	strb	r2, [r3, #0]
 8019eaa:	2314      	movs	r3, #20
 8019eac:	18fb      	adds	r3, r7, r3
 8019eae:	2200      	movs	r2, #0
 8019eb0:	701a      	strb	r2, [r3, #0]
 8019eb2:	e0b4      	b.n	801a01e <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8019eb4:	2313      	movs	r3, #19
 8019eb6:	18fb      	adds	r3, r7, r3
 8019eb8:	2200      	movs	r2, #0
 8019eba:	701a      	strb	r2, [r3, #0]
 8019ebc:	e09d      	b.n	8019ffa <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8019ebe:	2314      	movs	r3, #20
 8019ec0:	18fb      	adds	r3, r7, r3
 8019ec2:	781b      	ldrb	r3, [r3, #0]
 8019ec4:	005b      	lsls	r3, r3, #1
 8019ec6:	68ba      	ldr	r2, [r7, #8]
 8019ec8:	18d3      	adds	r3, r2, r3
 8019eca:	881b      	ldrh	r3, [r3, #0]
 8019ecc:	001a      	movs	r2, r3
 8019ece:	2313      	movs	r3, #19
 8019ed0:	18fb      	adds	r3, r7, r3
 8019ed2:	781b      	ldrb	r3, [r3, #0]
 8019ed4:	411a      	asrs	r2, r3
 8019ed6:	0013      	movs	r3, r2
 8019ed8:	2201      	movs	r2, #1
 8019eda:	4013      	ands	r3, r2
 8019edc:	d100      	bne.n	8019ee0 <CountNbOfEnabledChannels+0x68>
 8019ede:	e086      	b.n	8019fee <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8019ee0:	2315      	movs	r3, #21
 8019ee2:	18fb      	adds	r3, r7, r3
 8019ee4:	781a      	ldrb	r2, [r3, #0]
 8019ee6:	2313      	movs	r3, #19
 8019ee8:	18fb      	adds	r3, r7, r3
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	18d3      	adds	r3, r2, r3
 8019eee:	001a      	movs	r2, r3
 8019ef0:	0013      	movs	r3, r2
 8019ef2:	005b      	lsls	r3, r3, #1
 8019ef4:	189b      	adds	r3, r3, r2
 8019ef6:	009b      	lsls	r3, r3, #2
 8019ef8:	001a      	movs	r2, r3
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	189b      	adds	r3, r3, r2
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d06f      	beq.n	8019fe4 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8019f04:	230f      	movs	r3, #15
 8019f06:	18fb      	adds	r3, r7, r3
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	4053      	eors	r3, r2
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d008      	beq.n	8019f26 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( RU864_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8019f14:	2313      	movs	r3, #19
 8019f16:	18fb      	adds	r3, r7, r3
 8019f18:	781b      	ldrb	r3, [r3, #0]
 8019f1a:	2203      	movs	r2, #3
 8019f1c:	411a      	asrs	r2, r3
 8019f1e:	0013      	movs	r3, r2
 8019f20:	2201      	movs	r2, #1
 8019f22:	4013      	ands	r3, r2
 8019f24:	d060      	beq.n	8019fe8 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8019f26:	230e      	movs	r3, #14
 8019f28:	18fb      	adds	r3, r7, r3
 8019f2a:	2000      	movs	r0, #0
 8019f2c:	5618      	ldrsb	r0, [r3, r0]
 8019f2e:	2415      	movs	r4, #21
 8019f30:	193b      	adds	r3, r7, r4
 8019f32:	781a      	ldrb	r2, [r3, #0]
 8019f34:	2513      	movs	r5, #19
 8019f36:	197b      	adds	r3, r7, r5
 8019f38:	781b      	ldrb	r3, [r3, #0]
 8019f3a:	18d3      	adds	r3, r2, r3
 8019f3c:	001a      	movs	r2, r3
 8019f3e:	0013      	movs	r3, r2
 8019f40:	005b      	lsls	r3, r3, #1
 8019f42:	189b      	adds	r3, r3, r2
 8019f44:	009b      	lsls	r3, r3, #2
 8019f46:	001a      	movs	r2, r3
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	189b      	adds	r3, r3, r2
 8019f4c:	7a1b      	ldrb	r3, [r3, #8]
 8019f4e:	011b      	lsls	r3, r3, #4
 8019f50:	b25b      	sxtb	r3, r3
 8019f52:	111b      	asrs	r3, r3, #4
 8019f54:	b25b      	sxtb	r3, r3
 8019f56:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8019f58:	193b      	adds	r3, r7, r4
 8019f5a:	781a      	ldrb	r2, [r3, #0]
 8019f5c:	197b      	adds	r3, r7, r5
 8019f5e:	781b      	ldrb	r3, [r3, #0]
 8019f60:	18d3      	adds	r3, r2, r3
 8019f62:	001a      	movs	r2, r3
 8019f64:	0013      	movs	r3, r2
 8019f66:	005b      	lsls	r3, r3, #1
 8019f68:	189b      	adds	r3, r3, r2
 8019f6a:	009b      	lsls	r3, r3, #2
 8019f6c:	001a      	movs	r2, r3
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	189b      	adds	r3, r3, r2
 8019f72:	7a1b      	ldrb	r3, [r3, #8]
 8019f74:	b25b      	sxtb	r3, r3
 8019f76:	111b      	asrs	r3, r3, #4
 8019f78:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8019f7a:	001a      	movs	r2, r3
 8019f7c:	f7fa f9ec 	bl	8014358 <RegionCommonValueInRange>
 8019f80:	1e03      	subs	r3, r0, #0
 8019f82:	d033      	beq.n	8019fec <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8019f84:	2315      	movs	r3, #21
 8019f86:	18fb      	adds	r3, r7, r3
 8019f88:	781a      	ldrb	r2, [r3, #0]
 8019f8a:	2313      	movs	r3, #19
 8019f8c:	18fb      	adds	r3, r7, r3
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	18d3      	adds	r3, r2, r3
 8019f92:	001a      	movs	r2, r3
 8019f94:	0013      	movs	r3, r2
 8019f96:	005b      	lsls	r3, r3, #1
 8019f98:	189b      	adds	r3, r3, r2
 8019f9a:	009b      	lsls	r3, r3, #2
 8019f9c:	001a      	movs	r2, r3
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	189b      	adds	r3, r3, r2
 8019fa2:	7a5b      	ldrb	r3, [r3, #9]
 8019fa4:	011b      	lsls	r3, r3, #4
 8019fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019fa8:	18d3      	adds	r3, r2, r3
 8019faa:	68db      	ldr	r3, [r3, #12]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d006      	beq.n	8019fbe <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8019fb0:	2116      	movs	r1, #22
 8019fb2:	187b      	adds	r3, r7, r1
 8019fb4:	781a      	ldrb	r2, [r3, #0]
 8019fb6:	187b      	adds	r3, r7, r1
 8019fb8:	3201      	adds	r2, #1
 8019fba:	701a      	strb	r2, [r3, #0]
                    continue;
 8019fbc:	e017      	b.n	8019fee <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8019fbe:	2217      	movs	r2, #23
 8019fc0:	18bb      	adds	r3, r7, r2
 8019fc2:	781b      	ldrb	r3, [r3, #0]
 8019fc4:	18ba      	adds	r2, r7, r2
 8019fc6:	1c59      	adds	r1, r3, #1
 8019fc8:	7011      	strb	r1, [r2, #0]
 8019fca:	001a      	movs	r2, r3
 8019fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fce:	189b      	adds	r3, r3, r2
 8019fd0:	2215      	movs	r2, #21
 8019fd2:	18b9      	adds	r1, r7, r2
 8019fd4:	2213      	movs	r2, #19
 8019fd6:	18ba      	adds	r2, r7, r2
 8019fd8:	7809      	ldrb	r1, [r1, #0]
 8019fda:	7812      	ldrb	r2, [r2, #0]
 8019fdc:	188a      	adds	r2, r1, r2
 8019fde:	b2d2      	uxtb	r2, r2
 8019fe0:	701a      	strb	r2, [r3, #0]
 8019fe2:	e004      	b.n	8019fee <CountNbOfEnabledChannels+0x176>
                    continue;
 8019fe4:	46c0      	nop			; (mov r8, r8)
 8019fe6:	e002      	b.n	8019fee <CountNbOfEnabledChannels+0x176>
                        continue;
 8019fe8:	46c0      	nop			; (mov r8, r8)
 8019fea:	e000      	b.n	8019fee <CountNbOfEnabledChannels+0x176>
                    continue;
 8019fec:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8019fee:	2113      	movs	r1, #19
 8019ff0:	187b      	adds	r3, r7, r1
 8019ff2:	781a      	ldrb	r2, [r3, #0]
 8019ff4:	187b      	adds	r3, r7, r1
 8019ff6:	3201      	adds	r2, #1
 8019ff8:	701a      	strb	r2, [r3, #0]
 8019ffa:	2313      	movs	r3, #19
 8019ffc:	18fb      	adds	r3, r7, r3
 8019ffe:	781b      	ldrb	r3, [r3, #0]
 801a000:	2b0f      	cmp	r3, #15
 801a002:	d800      	bhi.n	801a006 <CountNbOfEnabledChannels+0x18e>
 801a004:	e75b      	b.n	8019ebe <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < RU864_MAX_NB_CHANNELS; i += 16, k++ )
 801a006:	2215      	movs	r2, #21
 801a008:	18bb      	adds	r3, r7, r2
 801a00a:	18ba      	adds	r2, r7, r2
 801a00c:	7812      	ldrb	r2, [r2, #0]
 801a00e:	3210      	adds	r2, #16
 801a010:	701a      	strb	r2, [r3, #0]
 801a012:	2114      	movs	r1, #20
 801a014:	187b      	adds	r3, r7, r1
 801a016:	781a      	ldrb	r2, [r3, #0]
 801a018:	187b      	adds	r3, r7, r1
 801a01a:	3201      	adds	r2, #1
 801a01c:	701a      	strb	r2, [r3, #0]
 801a01e:	2315      	movs	r3, #21
 801a020:	18fb      	adds	r3, r7, r3
 801a022:	781b      	ldrb	r3, [r3, #0]
 801a024:	2b07      	cmp	r3, #7
 801a026:	d800      	bhi.n	801a02a <CountNbOfEnabledChannels+0x1b2>
 801a028:	e744      	b.n	8019eb4 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 801a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a02c:	2216      	movs	r2, #22
 801a02e:	18ba      	adds	r2, r7, r2
 801a030:	7812      	ldrb	r2, [r2, #0]
 801a032:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801a034:	2317      	movs	r3, #23
 801a036:	18fb      	adds	r3, r7, r3
 801a038:	781b      	ldrb	r3, [r3, #0]
}
 801a03a:	0018      	movs	r0, r3
 801a03c:	46bd      	mov	sp, r7
 801a03e:	b006      	add	sp, #24
 801a040:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a044 <RegionRU864GetPhyParam>:

PhyParam_t RegionRU864GetPhyParam( GetPhyParams_t* getPhy )
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b084      	sub	sp, #16
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a04c:	2308      	movs	r3, #8
 801a04e:	18fb      	adds	r3, r7, r3
 801a050:	2200      	movs	r2, #0
 801a052:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	781b      	ldrb	r3, [r3, #0]
 801a058:	2b31      	cmp	r3, #49	; 0x31
 801a05a:	d900      	bls.n	801a05e <RegionRU864GetPhyParam+0x1a>
 801a05c:	e0c4      	b.n	801a1e8 <RegionRU864GetPhyParam+0x1a4>
 801a05e:	009a      	lsls	r2, r3, #2
 801a060:	4b69      	ldr	r3, [pc, #420]	; (801a208 <RegionRU864GetPhyParam+0x1c4>)
 801a062:	18d3      	adds	r3, r2, r3
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = RU864_RX_MIN_DATARATE;
 801a068:	2308      	movs	r3, #8
 801a06a:	18fb      	adds	r3, r7, r3
 801a06c:	2200      	movs	r2, #0
 801a06e:	601a      	str	r2, [r3, #0]
            break;
 801a070:	e0bb      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = RU864_TX_MIN_DATARATE;
 801a072:	2308      	movs	r3, #8
 801a074:	18fb      	adds	r3, r7, r3
 801a076:	2200      	movs	r2, #0
 801a078:	601a      	str	r2, [r3, #0]
            break;
 801a07a:	e0b6      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = RU864_DEFAULT_DATARATE;
 801a07c:	2308      	movs	r3, #8
 801a07e:	18fb      	adds	r3, r7, r3
 801a080:	2200      	movs	r2, #0
 801a082:	601a      	str	r2, [r3, #0]
            break;
 801a084:	e0b1      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, RU864_TX_MIN_DATARATE );
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	785b      	ldrb	r3, [r3, #1]
 801a08a:	b25b      	sxtb	r3, r3
 801a08c:	2100      	movs	r1, #0
 801a08e:	0018      	movs	r0, r3
 801a090:	f7ff fe5b 	bl	8019d4a <GetNextLowerTxDr>
 801a094:	0003      	movs	r3, r0
 801a096:	001a      	movs	r2, r3
 801a098:	2308      	movs	r3, #8
 801a09a:	18fb      	adds	r3, r7, r3
 801a09c:	601a      	str	r2, [r3, #0]
            break;
 801a09e:	e0a4      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = RU864_DEFAULT_TX_POWER;
 801a0a0:	2308      	movs	r3, #8
 801a0a2:	18fb      	adds	r3, r7, r3
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	601a      	str	r2, [r3, #0]
            break;
 801a0a8:	e09f      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = RU864_ADR_ACK_LIMIT;
 801a0aa:	2308      	movs	r3, #8
 801a0ac:	18fb      	adds	r3, r7, r3
 801a0ae:	2240      	movs	r2, #64	; 0x40
 801a0b0:	601a      	str	r2, [r3, #0]
            break;
 801a0b2:	e09a      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = RU864_ADR_ACK_DELAY;
 801a0b4:	2308      	movs	r3, #8
 801a0b6:	18fb      	adds	r3, r7, r3
 801a0b8:	2220      	movs	r2, #32
 801a0ba:	601a      	str	r2, [r3, #0]
            break;
 801a0bc:	e095      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateRU864[getPhy->Datarate];
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	785b      	ldrb	r3, [r3, #1]
 801a0c2:	b25b      	sxtb	r3, r3
 801a0c4:	001a      	movs	r2, r3
 801a0c6:	4b51      	ldr	r3, [pc, #324]	; (801a20c <RegionRU864GetPhyParam+0x1c8>)
 801a0c8:	5c9b      	ldrb	r3, [r3, r2]
 801a0ca:	001a      	movs	r2, r3
 801a0cc:	2308      	movs	r3, #8
 801a0ce:	18fb      	adds	r3, r7, r3
 801a0d0:	601a      	str	r2, [r3, #0]
            break;
 801a0d2:	e08a      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterRU864[getPhy->Datarate];
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	785b      	ldrb	r3, [r3, #1]
 801a0d8:	b25b      	sxtb	r3, r3
 801a0da:	001a      	movs	r2, r3
 801a0dc:	4b4c      	ldr	r3, [pc, #304]	; (801a210 <RegionRU864GetPhyParam+0x1cc>)
 801a0de:	5c9b      	ldrb	r3, [r3, r2]
 801a0e0:	001a      	movs	r2, r3
 801a0e2:	2308      	movs	r3, #8
 801a0e4:	18fb      	adds	r3, r7, r3
 801a0e6:	601a      	str	r2, [r3, #0]
            break;
 801a0e8:	e07f      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = RU864_DUTY_CYCLE_ENABLED;
 801a0ea:	2308      	movs	r3, #8
 801a0ec:	18fb      	adds	r3, r7, r3
 801a0ee:	2201      	movs	r2, #1
 801a0f0:	601a      	str	r2, [r3, #0]
            break;
 801a0f2:	e07a      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = RU864_MAX_RX_WINDOW;
 801a0f4:	2308      	movs	r3, #8
 801a0f6:	18fb      	adds	r3, r7, r3
 801a0f8:	4a46      	ldr	r2, [pc, #280]	; (801a214 <RegionRU864GetPhyParam+0x1d0>)
 801a0fa:	601a      	str	r2, [r3, #0]
            break;
 801a0fc:	e075      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = RU864_RECEIVE_DELAY1;
 801a0fe:	2308      	movs	r3, #8
 801a100:	18fb      	adds	r3, r7, r3
 801a102:	22fa      	movs	r2, #250	; 0xfa
 801a104:	0092      	lsls	r2, r2, #2
 801a106:	601a      	str	r2, [r3, #0]
            break;
 801a108:	e06f      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = RU864_RECEIVE_DELAY2;
 801a10a:	2308      	movs	r3, #8
 801a10c:	18fb      	adds	r3, r7, r3
 801a10e:	22fa      	movs	r2, #250	; 0xfa
 801a110:	00d2      	lsls	r2, r2, #3
 801a112:	601a      	str	r2, [r3, #0]
            break;
 801a114:	e069      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = RU864_JOIN_ACCEPT_DELAY1;
 801a116:	2308      	movs	r3, #8
 801a118:	18fb      	adds	r3, r7, r3
 801a11a:	4a3f      	ldr	r2, [pc, #252]	; (801a218 <RegionRU864GetPhyParam+0x1d4>)
 801a11c:	601a      	str	r2, [r3, #0]
            break;
 801a11e:	e064      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = RU864_JOIN_ACCEPT_DELAY2;
 801a120:	2308      	movs	r3, #8
 801a122:	18fb      	adds	r3, r7, r3
 801a124:	4a3d      	ldr	r2, [pc, #244]	; (801a21c <RegionRU864GetPhyParam+0x1d8>)
 801a126:	601a      	str	r2, [r3, #0]
            break;
 801a128:	e05f      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = RU864_MAX_FCNT_GAP;
 801a12a:	2308      	movs	r3, #8
 801a12c:	18fb      	adds	r3, r7, r3
 801a12e:	2280      	movs	r2, #128	; 0x80
 801a130:	01d2      	lsls	r2, r2, #7
 801a132:	601a      	str	r2, [r3, #0]
            break;
 801a134:	e059      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( RU864_ACKTIMEOUT + randr( -RU864_ACK_TIMEOUT_RND, RU864_ACK_TIMEOUT_RND ) );
 801a136:	23fa      	movs	r3, #250	; 0xfa
 801a138:	009b      	lsls	r3, r3, #2
 801a13a:	4a39      	ldr	r2, [pc, #228]	; (801a220 <RegionRU864GetPhyParam+0x1dc>)
 801a13c:	0019      	movs	r1, r3
 801a13e:	0010      	movs	r0, r2
 801a140:	f002 fda2 	bl	801cc88 <randr>
 801a144:	0003      	movs	r3, r0
 801a146:	22fa      	movs	r2, #250	; 0xfa
 801a148:	00d2      	lsls	r2, r2, #3
 801a14a:	4694      	mov	ip, r2
 801a14c:	4463      	add	r3, ip
 801a14e:	001a      	movs	r2, r3
 801a150:	2308      	movs	r3, #8
 801a152:	18fb      	adds	r3, r7, r3
 801a154:	601a      	str	r2, [r3, #0]
            break;
 801a156:	e048      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = RU864_DEFAULT_RX1_DR_OFFSET;
 801a158:	2308      	movs	r3, #8
 801a15a:	18fb      	adds	r3, r7, r3
 801a15c:	2200      	movs	r2, #0
 801a15e:	601a      	str	r2, [r3, #0]
            break;
 801a160:	e043      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = RU864_RX_WND_2_FREQ;
 801a162:	2308      	movs	r3, #8
 801a164:	18fb      	adds	r3, r7, r3
 801a166:	4a2f      	ldr	r2, [pc, #188]	; (801a224 <RegionRU864GetPhyParam+0x1e0>)
 801a168:	601a      	str	r2, [r3, #0]
            break;
 801a16a:	e03e      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = RU864_RX_WND_2_DR;
 801a16c:	2308      	movs	r3, #8
 801a16e:	18fb      	adds	r3, r7, r3
 801a170:	2200      	movs	r2, #0
 801a172:	601a      	str	r2, [r3, #0]
            break;
 801a174:	e039      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801a176:	2308      	movs	r3, #8
 801a178:	18fb      	adds	r3, r7, r3
 801a17a:	4a2b      	ldr	r2, [pc, #172]	; (801a228 <RegionRU864GetPhyParam+0x1e4>)
 801a17c:	601a      	str	r2, [r3, #0]
            break;
 801a17e:	e034      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801a180:	2308      	movs	r3, #8
 801a182:	18fb      	adds	r3, r7, r3
 801a184:	4a29      	ldr	r2, [pc, #164]	; (801a22c <RegionRU864GetPhyParam+0x1e8>)
 801a186:	601a      	str	r2, [r3, #0]
            break;
 801a188:	e02f      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = RU864_MAX_NB_CHANNELS;
 801a18a:	2308      	movs	r3, #8
 801a18c:	18fb      	adds	r3, r7, r3
 801a18e:	2208      	movs	r2, #8
 801a190:	601a      	str	r2, [r3, #0]
            break;
 801a192:	e02a      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801a194:	2308      	movs	r3, #8
 801a196:	18fb      	adds	r3, r7, r3
 801a198:	4a25      	ldr	r2, [pc, #148]	; (801a230 <RegionRU864GetPhyParam+0x1ec>)
 801a19a:	601a      	str	r2, [r3, #0]
            break;
 801a19c:	e025      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801a19e:	2308      	movs	r3, #8
 801a1a0:	18fb      	adds	r3, r7, r3
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	601a      	str	r2, [r3, #0]
            break;
 801a1a6:	e020      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = RU864_DEFAULT_MAX_EIRP;
 801a1a8:	2308      	movs	r3, #8
 801a1aa:	18fb      	adds	r3, r7, r3
 801a1ac:	2283      	movs	r2, #131	; 0x83
 801a1ae:	05d2      	lsls	r2, r2, #23
 801a1b0:	601a      	str	r2, [r3, #0]
            break;
 801a1b2:	e01a      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = RU864_DEFAULT_ANTENNA_GAIN;
 801a1b4:	2308      	movs	r3, #8
 801a1b6:	18fb      	adds	r3, r7, r3
 801a1b8:	4a1e      	ldr	r2, [pc, #120]	; (801a234 <RegionRU864GetPhyParam+0x1f0>)
 801a1ba:	601a      	str	r2, [r3, #0]
            break;
 801a1bc:	e015      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RU864_BEACON_CHANNEL_FREQ;
 801a1be:	2308      	movs	r3, #8
 801a1c0:	18fb      	adds	r3, r7, r3
 801a1c2:	4a18      	ldr	r2, [pc, #96]	; (801a224 <RegionRU864GetPhyParam+0x1e0>)
 801a1c4:	601a      	str	r2, [r3, #0]
            break;
 801a1c6:	e010      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = RU864_BEACON_SIZE;
 801a1c8:	2108      	movs	r1, #8
 801a1ca:	187b      	adds	r3, r7, r1
 801a1cc:	2211      	movs	r2, #17
 801a1ce:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = RU864_RFU1_SIZE;
 801a1d0:	187b      	adds	r3, r7, r1
 801a1d2:	2202      	movs	r2, #2
 801a1d4:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = RU864_RFU2_SIZE;
 801a1d6:	187b      	adds	r3, r7, r1
 801a1d8:	2200      	movs	r2, #0
 801a1da:	709a      	strb	r2, [r3, #2]
            break;
 801a1dc:	e005      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = RU864_BEACON_CHANNEL_DR;
 801a1de:	2308      	movs	r3, #8
 801a1e0:	18fb      	adds	r3, r7, r3
 801a1e2:	2203      	movs	r2, #3
 801a1e4:	601a      	str	r2, [r3, #0]
            break;
 801a1e6:	e000      	b.n	801a1ea <RegionRU864GetPhyParam+0x1a6>
        }
        default:
        {
            break;
 801a1e8:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801a1ea:	210c      	movs	r1, #12
 801a1ec:	187b      	adds	r3, r7, r1
 801a1ee:	2208      	movs	r2, #8
 801a1f0:	18ba      	adds	r2, r7, r2
 801a1f2:	6812      	ldr	r2, [r2, #0]
 801a1f4:	601a      	str	r2, [r3, #0]
 801a1f6:	187b      	adds	r3, r7, r1
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	681a      	ldr	r2, [r3, #0]
 801a1fc:	0013      	movs	r3, r2
}
 801a1fe:	0018      	movs	r0, r3
 801a200:	46bd      	mov	sp, r7
 801a202:	b004      	add	sp, #16
 801a204:	bd80      	pop	{r7, pc}
 801a206:	46c0      	nop			; (mov r8, r8)
 801a208:	080291b8 	.word	0x080291b8
 801a20c:	080291a8 	.word	0x080291a8
 801a210:	080291b0 	.word	0x080291b0
 801a214:	00000bb8 	.word	0x00000bb8
 801a218:	00001388 	.word	0x00001388
 801a21c:	00001770 	.word	0x00001770
 801a220:	fffffc18 	.word	0xfffffc18
 801a224:	33cd69e0 	.word	0x33cd69e0
 801a228:	200019a0 	.word	0x200019a0
 801a22c:	200019a2 	.word	0x200019a2
 801a230:	20001930 	.word	0x20001930
 801a234:	4009999a 	.word	0x4009999a

0801a238 <RegionRU864SetBandTxDone>:

void RegionRU864SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	7858      	ldrb	r0, [r3, #1]
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	0019      	movs	r1, r3
 801a24a:	4a0a      	ldr	r2, [pc, #40]	; (801a274 <RegionRU864SetBandTxDone+0x3c>)
 801a24c:	000b      	movs	r3, r1
 801a24e:	005b      	lsls	r3, r3, #1
 801a250:	185b      	adds	r3, r3, r1
 801a252:	009b      	lsls	r3, r3, #2
 801a254:	18d3      	adds	r3, r2, r3
 801a256:	3309      	adds	r3, #9
 801a258:	781b      	ldrb	r3, [r3, #0]
 801a25a:	3306      	adds	r3, #6
 801a25c:	011a      	lsls	r2, r3, #4
 801a25e:	4b05      	ldr	r3, [pc, #20]	; (801a274 <RegionRU864SetBandTxDone+0x3c>)
 801a260:	18d1      	adds	r1, r2, r3
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	685b      	ldr	r3, [r3, #4]
 801a266:	001a      	movs	r2, r3
 801a268:	f7fa f94e 	bl	8014508 <RegionCommonSetBandTxDone>
}
 801a26c:	46c0      	nop			; (mov r8, r8)
 801a26e:	46bd      	mov	sp, r7
 801a270:	b002      	add	sp, #8
 801a272:	bd80      	pop	{r7, pc}
 801a274:	20001930 	.word	0x20001930

0801a278 <RegionRU864InitDefaults>:

void RegionRU864InitDefaults( InitDefaultsParams_t* params )
{
 801a278:	b590      	push	{r4, r7, lr}
 801a27a:	b087      	sub	sp, #28
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
    Band_t bands[RU864_MAX_NB_BANDS] =
 801a280:	2108      	movs	r1, #8
 801a282:	187b      	adds	r3, r7, r1
 801a284:	2264      	movs	r2, #100	; 0x64
 801a286:	801a      	strh	r2, [r3, #0]
 801a288:	187b      	adds	r3, r7, r1
 801a28a:	2200      	movs	r2, #0
 801a28c:	709a      	strb	r2, [r3, #2]
 801a28e:	187b      	adds	r3, r7, r1
 801a290:	2200      	movs	r2, #0
 801a292:	605a      	str	r2, [r3, #4]
 801a294:	187b      	adds	r3, r7, r1
 801a296:	2200      	movs	r2, #0
 801a298:	609a      	str	r2, [r3, #8]
 801a29a:	187b      	adds	r3, r7, r1
 801a29c:	2200      	movs	r2, #0
 801a29e:	60da      	str	r2, [r3, #12]
    {
        RU864_BAND0
    };

    switch( params->Type )
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	791b      	ldrb	r3, [r3, #4]
 801a2a4:	2b01      	cmp	r3, #1
 801a2a6:	d02b      	beq.n	801a300 <RegionRU864InitDefaults+0x88>
 801a2a8:	2b02      	cmp	r3, #2
 801a2aa:	d01d      	beq.n	801a2e8 <RegionRU864InitDefaults+0x70>
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d000      	beq.n	801a2b2 <RegionRU864InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801a2b0:	e033      	b.n	801a31a <RegionRU864InitDefaults+0xa2>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * RU864_MAX_NB_BANDS );
 801a2b2:	2308      	movs	r3, #8
 801a2b4:	18f9      	adds	r1, r7, r3
 801a2b6:	4b1b      	ldr	r3, [pc, #108]	; (801a324 <RegionRU864InitDefaults+0xac>)
 801a2b8:	2210      	movs	r2, #16
 801a2ba:	0018      	movs	r0, r3
 801a2bc:	f002 fcfa 	bl	801ccb4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) RU864_LC1;
 801a2c0:	4b19      	ldr	r3, [pc, #100]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a2c2:	4a1a      	ldr	r2, [pc, #104]	; (801a32c <RegionRU864InitDefaults+0xb4>)
 801a2c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 801a2c6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) RU864_LC2;
 801a2c8:	4b17      	ldr	r3, [pc, #92]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a2ca:	4a19      	ldr	r2, [pc, #100]	; (801a330 <RegionRU864InitDefaults+0xb8>)
 801a2cc:	330c      	adds	r3, #12
 801a2ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 801a2d0:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 801a2d2:	4b15      	ldr	r3, [pc, #84]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a2d4:	2272      	movs	r2, #114	; 0x72
 801a2d6:	2103      	movs	r1, #3
 801a2d8:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 801a2da:	4916      	ldr	r1, [pc, #88]	; (801a334 <RegionRU864InitDefaults+0xbc>)
 801a2dc:	4b16      	ldr	r3, [pc, #88]	; (801a338 <RegionRU864InitDefaults+0xc0>)
 801a2de:	2201      	movs	r2, #1
 801a2e0:	0018      	movs	r0, r3
 801a2e2:	f7fa f8e2 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 801a2e6:	e018      	b.n	801a31a <RegionRU864InitDefaults+0xa2>
            if( params->NvmCtx != 0 )
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d013      	beq.n	801a318 <RegionRU864InitDefaults+0xa0>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6819      	ldr	r1, [r3, #0]
 801a2f4:	4b0c      	ldr	r3, [pc, #48]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a2f6:	2274      	movs	r2, #116	; 0x74
 801a2f8:	0018      	movs	r0, r3
 801a2fa:	f002 fcdb 	bl	801ccb4 <memcpy1>
            break;
 801a2fe:	e00b      	b.n	801a318 <RegionRU864InitDefaults+0xa0>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801a300:	4b09      	ldr	r3, [pc, #36]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a302:	2270      	movs	r2, #112	; 0x70
 801a304:	5a9a      	ldrh	r2, [r3, r2]
 801a306:	4b08      	ldr	r3, [pc, #32]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a308:	2172      	movs	r1, #114	; 0x72
 801a30a:	5a5b      	ldrh	r3, [r3, r1]
 801a30c:	4313      	orrs	r3, r2
 801a30e:	b299      	uxth	r1, r3
 801a310:	4b05      	ldr	r3, [pc, #20]	; (801a328 <RegionRU864InitDefaults+0xb0>)
 801a312:	2270      	movs	r2, #112	; 0x70
 801a314:	5299      	strh	r1, [r3, r2]
            break;
 801a316:	e000      	b.n	801a31a <RegionRU864InitDefaults+0xa2>
            break;
 801a318:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801a31a:	46c0      	nop			; (mov r8, r8)
 801a31c:	46bd      	mov	sp, r7
 801a31e:	b007      	add	sp, #28
 801a320:	bd90      	pop	{r4, r7, pc}
 801a322:	46c0      	nop			; (mov r8, r8)
 801a324:	20001990 	.word	0x20001990
 801a328:	20001930 	.word	0x20001930
 801a32c:	08027640 	.word	0x08027640
 801a330:	0802764c 	.word	0x0802764c
 801a334:	200019a2 	.word	0x200019a2
 801a338:	200019a0 	.word	0x200019a0

0801a33c <RegionRU864ApplyCFList>:
            return false;
    }
}

void RegionRU864ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801a33c:	b590      	push	{r4, r7, lr}
 801a33e:	b08b      	sub	sp, #44	; 0x2c
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801a344:	2318      	movs	r3, #24
 801a346:	18fb      	adds	r3, r7, r3
 801a348:	2250      	movs	r2, #80	; 0x50
 801a34a:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	791b      	ldrb	r3, [r3, #4]
 801a350:	2b10      	cmp	r3, #16
 801a352:	d000      	beq.n	801a356 <RegionRU864ApplyCFList+0x1a>
 801a354:	e07d      	b.n	801a452 <RegionRU864ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	330f      	adds	r3, #15
 801a35c:	781b      	ldrb	r3, [r3, #0]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d000      	beq.n	801a364 <RegionRU864ApplyCFList+0x28>
 801a362:	e078      	b.n	801a456 <RegionRU864ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801a364:	2327      	movs	r3, #39	; 0x27
 801a366:	18fb      	adds	r3, r7, r3
 801a368:	2200      	movs	r2, #0
 801a36a:	701a      	strb	r2, [r3, #0]
 801a36c:	2326      	movs	r3, #38	; 0x26
 801a36e:	18fb      	adds	r3, r7, r3
 801a370:	2202      	movs	r2, #2
 801a372:	701a      	strb	r2, [r3, #0]
 801a374:	e067      	b.n	801a446 <RegionRU864ApplyCFList+0x10a>
    {
        if( chanIdx < ( RU864_NUMB_CHANNELS_CF_LIST + RU864_NUMB_DEFAULT_CHANNELS ) )
 801a376:	2326      	movs	r3, #38	; 0x26
 801a378:	18fb      	adds	r3, r7, r3
 801a37a:	781b      	ldrb	r3, [r3, #0]
 801a37c:	2b06      	cmp	r3, #6
 801a37e:	d82e      	bhi.n	801a3de <RegionRU864ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	2427      	movs	r4, #39	; 0x27
 801a386:	193b      	adds	r3, r7, r4
 801a388:	781b      	ldrb	r3, [r3, #0]
 801a38a:	18d3      	adds	r3, r2, r3
 801a38c:	781b      	ldrb	r3, [r3, #0]
 801a38e:	001a      	movs	r2, r3
 801a390:	2018      	movs	r0, #24
 801a392:	183b      	adds	r3, r7, r0
 801a394:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801a396:	183b      	adds	r3, r7, r0
 801a398:	681a      	ldr	r2, [r3, #0]
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	6819      	ldr	r1, [r3, #0]
 801a39e:	193b      	adds	r3, r7, r4
 801a3a0:	781b      	ldrb	r3, [r3, #0]
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	18cb      	adds	r3, r1, r3
 801a3a6:	781b      	ldrb	r3, [r3, #0]
 801a3a8:	021b      	lsls	r3, r3, #8
 801a3aa:	431a      	orrs	r2, r3
 801a3ac:	183b      	adds	r3, r7, r0
 801a3ae:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801a3b0:	183b      	adds	r3, r7, r0
 801a3b2:	681a      	ldr	r2, [r3, #0]
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	6819      	ldr	r1, [r3, #0]
 801a3b8:	193b      	adds	r3, r7, r4
 801a3ba:	781b      	ldrb	r3, [r3, #0]
 801a3bc:	3302      	adds	r3, #2
 801a3be:	18cb      	adds	r3, r1, r3
 801a3c0:	781b      	ldrb	r3, [r3, #0]
 801a3c2:	041b      	lsls	r3, r3, #16
 801a3c4:	431a      	orrs	r2, r3
 801a3c6:	183b      	adds	r3, r7, r0
 801a3c8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 801a3ca:	183b      	adds	r3, r7, r0
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2264      	movs	r2, #100	; 0x64
 801a3d0:	435a      	muls	r2, r3
 801a3d2:	183b      	adds	r3, r7, r0
 801a3d4:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801a3d6:	183b      	adds	r3, r7, r0
 801a3d8:	2200      	movs	r2, #0
 801a3da:	605a      	str	r2, [r3, #4]
 801a3dc:	e009      	b.n	801a3f2 <RegionRU864ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801a3de:	2118      	movs	r1, #24
 801a3e0:	187b      	adds	r3, r7, r1
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 801a3e6:	187b      	adds	r3, r7, r1
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 801a3ec:	187b      	adds	r3, r7, r1
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801a3f2:	2318      	movs	r3, #24
 801a3f4:	18fb      	adds	r3, r7, r3
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d00e      	beq.n	801a41a <RegionRU864ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 801a3fc:	2110      	movs	r1, #16
 801a3fe:	187b      	adds	r3, r7, r1
 801a400:	2218      	movs	r2, #24
 801a402:	18ba      	adds	r2, r7, r2
 801a404:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801a406:	187b      	adds	r3, r7, r1
 801a408:	2226      	movs	r2, #38	; 0x26
 801a40a:	18ba      	adds	r2, r7, r2
 801a40c:	7812      	ldrb	r2, [r2, #0]
 801a40e:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionRU864ChannelAdd( &channelAdd );
 801a410:	187b      	adds	r3, r7, r1
 801a412:	0018      	movs	r0, r3
 801a414:	f000 fd7c 	bl	801af10 <RegionRU864ChannelAdd>
 801a418:	e009      	b.n	801a42e <RegionRU864ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801a41a:	210c      	movs	r1, #12
 801a41c:	187b      	adds	r3, r7, r1
 801a41e:	2226      	movs	r2, #38	; 0x26
 801a420:	18ba      	adds	r2, r7, r2
 801a422:	7812      	ldrb	r2, [r2, #0]
 801a424:	701a      	strb	r2, [r3, #0]

            RegionRU864ChannelsRemove( &channelRemove );
 801a426:	187b      	adds	r3, r7, r1
 801a428:	0018      	movs	r0, r3
 801a42a:	f000 fe2b 	bl	801b084 <RegionRU864ChannelsRemove>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801a42e:	2227      	movs	r2, #39	; 0x27
 801a430:	18bb      	adds	r3, r7, r2
 801a432:	18ba      	adds	r2, r7, r2
 801a434:	7812      	ldrb	r2, [r2, #0]
 801a436:	3203      	adds	r2, #3
 801a438:	701a      	strb	r2, [r3, #0]
 801a43a:	2126      	movs	r1, #38	; 0x26
 801a43c:	187b      	adds	r3, r7, r1
 801a43e:	781a      	ldrb	r2, [r3, #0]
 801a440:	187b      	adds	r3, r7, r1
 801a442:	3201      	adds	r2, #1
 801a444:	701a      	strb	r2, [r3, #0]
 801a446:	2326      	movs	r3, #38	; 0x26
 801a448:	18fb      	adds	r3, r7, r3
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	2b07      	cmp	r3, #7
 801a44e:	d992      	bls.n	801a376 <RegionRU864ApplyCFList+0x3a>
 801a450:	e002      	b.n	801a458 <RegionRU864ApplyCFList+0x11c>
        return;
 801a452:	46c0      	nop			; (mov r8, r8)
 801a454:	e000      	b.n	801a458 <RegionRU864ApplyCFList+0x11c>
        return;
 801a456:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801a458:	46bd      	mov	sp, r7
 801a45a:	b00b      	add	sp, #44	; 0x2c
 801a45c:	bd90      	pop	{r4, r7, pc}
	...

0801a460 <RegionRU864ComputeRxWindowParameters>:
    }
    return true;
}

void RegionRU864ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a460:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a462:	b08b      	sub	sp, #44	; 0x2c
 801a464:	af04      	add	r7, sp, #16
 801a466:	60ba      	str	r2, [r7, #8]
 801a468:	607b      	str	r3, [r7, #4]
 801a46a:	250f      	movs	r5, #15
 801a46c:	197b      	adds	r3, r7, r5
 801a46e:	1c02      	adds	r2, r0, #0
 801a470:	701a      	strb	r2, [r3, #0]
 801a472:	230e      	movs	r3, #14
 801a474:	18fb      	adds	r3, r7, r3
 801a476:	1c0a      	adds	r2, r1, #0
 801a478:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801a47a:	2300      	movs	r3, #0
 801a47c:	2400      	movs	r4, #0
 801a47e:	613b      	str	r3, [r7, #16]
 801a480:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, RU864_RX_MAX_DATARATE );
 801a482:	197b      	adds	r3, r7, r5
 801a484:	781b      	ldrb	r3, [r3, #0]
 801a486:	b25a      	sxtb	r2, r3
 801a488:	2a07      	cmp	r2, #7
 801a48a:	dd00      	ble.n	801a48e <RegionRU864ComputeRxWindowParameters+0x2e>
 801a48c:	2307      	movs	r3, #7
 801a48e:	b25a      	sxtb	r2, r3
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	785b      	ldrb	r3, [r3, #1]
 801a498:	b25b      	sxtb	r3, r3
 801a49a:	0018      	movs	r0, r3
 801a49c:	f7ff fc7e 	bl	8019d9c <GetBandwidth>
 801a4a0:	0003      	movs	r3, r0
 801a4a2:	b2da      	uxtb	r2, r3
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	785b      	ldrb	r3, [r3, #1]
 801a4ac:	b25b      	sxtb	r3, r3
 801a4ae:	2b07      	cmp	r3, #7
 801a4b0:	d10d      	bne.n	801a4ce <RegionRU864ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	785b      	ldrb	r3, [r3, #1]
 801a4b6:	b25b      	sxtb	r3, r3
 801a4b8:	001a      	movs	r2, r3
 801a4ba:	4b1b      	ldr	r3, [pc, #108]	; (801a528 <RegionRU864ComputeRxWindowParameters+0xc8>)
 801a4bc:	5c9b      	ldrb	r3, [r3, r2]
 801a4be:	0018      	movs	r0, r3
 801a4c0:	f7fa fa5a 	bl	8014978 <RegionCommonComputeSymbolTimeFsk>
 801a4c4:	0003      	movs	r3, r0
 801a4c6:	000c      	movs	r4, r1
 801a4c8:	613b      	str	r3, [r7, #16]
 801a4ca:	617c      	str	r4, [r7, #20]
 801a4cc:	e013      	b.n	801a4f6 <RegionRU864ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesRU864[rxConfigParams->Datarate], BandwidthsRU864[rxConfigParams->Datarate] );
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	785b      	ldrb	r3, [r3, #1]
 801a4d2:	b25b      	sxtb	r3, r3
 801a4d4:	001a      	movs	r2, r3
 801a4d6:	4b14      	ldr	r3, [pc, #80]	; (801a528 <RegionRU864ComputeRxWindowParameters+0xc8>)
 801a4d8:	5c98      	ldrb	r0, [r3, r2]
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	785b      	ldrb	r3, [r3, #1]
 801a4de:	b25b      	sxtb	r3, r3
 801a4e0:	001a      	movs	r2, r3
 801a4e2:	4b12      	ldr	r3, [pc, #72]	; (801a52c <RegionRU864ComputeRxWindowParameters+0xcc>)
 801a4e4:	0092      	lsls	r2, r2, #2
 801a4e6:	58d3      	ldr	r3, [r2, r3]
 801a4e8:	0019      	movs	r1, r3
 801a4ea:	f7fa fa19 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 801a4ee:	0003      	movs	r3, r0
 801a4f0:	000c      	movs	r4, r1
 801a4f2:	613b      	str	r3, [r7, #16]
 801a4f4:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801a4f6:	4b0e      	ldr	r3, [pc, #56]	; (801a530 <RegionRU864ComputeRxWindowParameters+0xd0>)
 801a4f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a4fa:	4798      	blx	r3
 801a4fc:	0006      	movs	r6, r0
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	3308      	adds	r3, #8
 801a502:	687a      	ldr	r2, [r7, #4]
 801a504:	320c      	adds	r2, #12
 801a506:	68bd      	ldr	r5, [r7, #8]
 801a508:	210e      	movs	r1, #14
 801a50a:	1879      	adds	r1, r7, r1
 801a50c:	780c      	ldrb	r4, [r1, #0]
 801a50e:	6938      	ldr	r0, [r7, #16]
 801a510:	6979      	ldr	r1, [r7, #20]
 801a512:	9202      	str	r2, [sp, #8]
 801a514:	9301      	str	r3, [sp, #4]
 801a516:	9600      	str	r6, [sp, #0]
 801a518:	002b      	movs	r3, r5
 801a51a:	0022      	movs	r2, r4
 801a51c:	f7fa fa48 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 801a520:	46c0      	nop			; (mov r8, r8)
 801a522:	46bd      	mov	sp, r7
 801a524:	b007      	add	sp, #28
 801a526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a528:	08029180 	.word	0x08029180
 801a52c:	08029188 	.word	0x08029188
 801a530:	080293d8 	.word	0x080293d8

0801a534 <RegionRU864RxConfig>:

bool RegionRU864RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801a534:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a536:	b091      	sub	sp, #68	; 0x44
 801a538:	af0a      	add	r7, sp, #40	; 0x28
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801a53e:	230f      	movs	r3, #15
 801a540:	18fb      	adds	r3, r7, r3
 801a542:	687a      	ldr	r2, [r7, #4]
 801a544:	7852      	ldrb	r2, [r2, #1]
 801a546:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801a548:	2316      	movs	r3, #22
 801a54a:	18fb      	adds	r3, r7, r3
 801a54c:	2200      	movs	r2, #0
 801a54e:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801a550:	230e      	movs	r3, #14
 801a552:	18fb      	adds	r3, r7, r3
 801a554:	2200      	movs	r2, #0
 801a556:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	685b      	ldr	r3, [r3, #4]
 801a55c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801a55e:	4b64      	ldr	r3, [pc, #400]	; (801a6f0 <RegionRU864RxConfig+0x1bc>)
 801a560:	68db      	ldr	r3, [r3, #12]
 801a562:	4798      	blx	r3
 801a564:	1e03      	subs	r3, r0, #0
 801a566:	d001      	beq.n	801a56c <RegionRU864RxConfig+0x38>
    {
        return false;
 801a568:	2300      	movs	r3, #0
 801a56a:	e0bc      	b.n	801a6e6 <RegionRU864RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	7cdb      	ldrb	r3, [r3, #19]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d122      	bne.n	801a5ba <RegionRU864RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	0019      	movs	r1, r3
 801a57a:	4a5e      	ldr	r2, [pc, #376]	; (801a6f4 <RegionRU864RxConfig+0x1c0>)
 801a57c:	000b      	movs	r3, r1
 801a57e:	005b      	lsls	r3, r3, #1
 801a580:	185b      	adds	r3, r3, r1
 801a582:	009b      	lsls	r3, r3, #2
 801a584:	589b      	ldr	r3, [r3, r2]
 801a586:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	781b      	ldrb	r3, [r3, #0]
 801a58c:	0019      	movs	r1, r3
 801a58e:	4a59      	ldr	r2, [pc, #356]	; (801a6f4 <RegionRU864RxConfig+0x1c0>)
 801a590:	000b      	movs	r3, r1
 801a592:	005b      	lsls	r3, r3, #1
 801a594:	185b      	adds	r3, r3, r1
 801a596:	009b      	lsls	r3, r3, #2
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	3304      	adds	r3, #4
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d00b      	beq.n	801a5ba <RegionRU864RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	781b      	ldrb	r3, [r3, #0]
 801a5a6:	0019      	movs	r1, r3
 801a5a8:	4a52      	ldr	r2, [pc, #328]	; (801a6f4 <RegionRU864RxConfig+0x1c0>)
 801a5aa:	000b      	movs	r3, r1
 801a5ac:	005b      	lsls	r3, r3, #1
 801a5ae:	185b      	adds	r3, r3, r1
 801a5b0:	009b      	lsls	r3, r3, #2
 801a5b2:	18d3      	adds	r3, r2, r3
 801a5b4:	3304      	adds	r3, #4
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesRU864[dr];
 801a5ba:	240f      	movs	r4, #15
 801a5bc:	193b      	adds	r3, r7, r4
 801a5be:	781b      	ldrb	r3, [r3, #0]
 801a5c0:	b25b      	sxtb	r3, r3
 801a5c2:	4a4d      	ldr	r2, [pc, #308]	; (801a6f8 <RegionRU864RxConfig+0x1c4>)
 801a5c4:	5cd2      	ldrb	r2, [r2, r3]
 801a5c6:	230e      	movs	r3, #14
 801a5c8:	18fb      	adds	r3, r7, r3
 801a5ca:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801a5cc:	4b48      	ldr	r3, [pc, #288]	; (801a6f0 <RegionRU864RxConfig+0x1bc>)
 801a5ce:	695b      	ldr	r3, [r3, #20]
 801a5d0:	693a      	ldr	r2, [r7, #16]
 801a5d2:	0010      	movs	r0, r2
 801a5d4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801a5d6:	193b      	adds	r3, r7, r4
 801a5d8:	781b      	ldrb	r3, [r3, #0]
 801a5da:	b25b      	sxtb	r3, r3
 801a5dc:	2b07      	cmp	r3, #7
 801a5de:	d12f      	bne.n	801a640 <RegionRU864RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 801a5e0:	2117      	movs	r1, #23
 801a5e2:	187b      	adds	r3, r7, r1
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801a5e8:	4b41      	ldr	r3, [pc, #260]	; (801a6f0 <RegionRU864RxConfig+0x1bc>)
 801a5ea:	6a1c      	ldr	r4, [r3, #32]
 801a5ec:	230e      	movs	r3, #14
 801a5ee:	18fb      	adds	r3, r7, r3
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	569a      	ldrsb	r2, [r3, r2]
 801a5f4:	0013      	movs	r3, r2
 801a5f6:	015b      	lsls	r3, r3, #5
 801a5f8:	1a9b      	subs	r3, r3, r2
 801a5fa:	009b      	lsls	r3, r3, #2
 801a5fc:	189b      	adds	r3, r3, r2
 801a5fe:	00db      	lsls	r3, r3, #3
 801a600:	001e      	movs	r6, r3
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	689b      	ldr	r3, [r3, #8]
 801a606:	b29b      	uxth	r3, r3
 801a608:	687a      	ldr	r2, [r7, #4]
 801a60a:	7c92      	ldrb	r2, [r2, #18]
 801a60c:	4d3b      	ldr	r5, [pc, #236]	; (801a6fc <RegionRU864RxConfig+0x1c8>)
 801a60e:	1879      	adds	r1, r7, r1
 801a610:	7808      	ldrb	r0, [r1, #0]
 801a612:	9209      	str	r2, [sp, #36]	; 0x24
 801a614:	2200      	movs	r2, #0
 801a616:	9208      	str	r2, [sp, #32]
 801a618:	2200      	movs	r2, #0
 801a61a:	9207      	str	r2, [sp, #28]
 801a61c:	2200      	movs	r2, #0
 801a61e:	9206      	str	r2, [sp, #24]
 801a620:	2201      	movs	r2, #1
 801a622:	9205      	str	r2, [sp, #20]
 801a624:	2200      	movs	r2, #0
 801a626:	9204      	str	r2, [sp, #16]
 801a628:	2200      	movs	r2, #0
 801a62a:	9203      	str	r2, [sp, #12]
 801a62c:	9302      	str	r3, [sp, #8]
 801a62e:	2305      	movs	r3, #5
 801a630:	9301      	str	r3, [sp, #4]
 801a632:	4b33      	ldr	r3, [pc, #204]	; (801a700 <RegionRU864RxConfig+0x1cc>)
 801a634:	9300      	str	r3, [sp, #0]
 801a636:	2300      	movs	r3, #0
 801a638:	0032      	movs	r2, r6
 801a63a:	0029      	movs	r1, r5
 801a63c:	47a0      	blx	r4
 801a63e:	e029      	b.n	801a694 <RegionRU864RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 801a640:	2117      	movs	r1, #23
 801a642:	187b      	adds	r3, r7, r1
 801a644:	2201      	movs	r2, #1
 801a646:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801a648:	4b29      	ldr	r3, [pc, #164]	; (801a6f0 <RegionRU864RxConfig+0x1bc>)
 801a64a:	6a1c      	ldr	r4, [r3, #32]
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	789b      	ldrb	r3, [r3, #2]
 801a650:	001e      	movs	r6, r3
 801a652:	230e      	movs	r3, #14
 801a654:	18fb      	adds	r3, r7, r3
 801a656:	2500      	movs	r5, #0
 801a658:	575d      	ldrsb	r5, [r3, r5]
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	689b      	ldr	r3, [r3, #8]
 801a65e:	b29b      	uxth	r3, r3
 801a660:	687a      	ldr	r2, [r7, #4]
 801a662:	7c92      	ldrb	r2, [r2, #18]
 801a664:	1879      	adds	r1, r7, r1
 801a666:	7808      	ldrb	r0, [r1, #0]
 801a668:	9209      	str	r2, [sp, #36]	; 0x24
 801a66a:	2201      	movs	r2, #1
 801a66c:	9208      	str	r2, [sp, #32]
 801a66e:	2200      	movs	r2, #0
 801a670:	9207      	str	r2, [sp, #28]
 801a672:	2200      	movs	r2, #0
 801a674:	9206      	str	r2, [sp, #24]
 801a676:	2200      	movs	r2, #0
 801a678:	9205      	str	r2, [sp, #20]
 801a67a:	2200      	movs	r2, #0
 801a67c:	9204      	str	r2, [sp, #16]
 801a67e:	2200      	movs	r2, #0
 801a680:	9203      	str	r2, [sp, #12]
 801a682:	9302      	str	r3, [sp, #8]
 801a684:	2308      	movs	r3, #8
 801a686:	9301      	str	r3, [sp, #4]
 801a688:	2300      	movs	r3, #0
 801a68a:	9300      	str	r3, [sp, #0]
 801a68c:	2301      	movs	r3, #1
 801a68e:	002a      	movs	r2, r5
 801a690:	0031      	movs	r1, r6
 801a692:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	7c5b      	ldrb	r3, [r3, #17]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d009      	beq.n	801a6b0 <RegionRU864RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterRU864[dr];
 801a69c:	230f      	movs	r3, #15
 801a69e:	18fb      	adds	r3, r7, r3
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	569a      	ldrsb	r2, [r3, r2]
 801a6a4:	2316      	movs	r3, #22
 801a6a6:	18fb      	adds	r3, r7, r3
 801a6a8:	4916      	ldr	r1, [pc, #88]	; (801a704 <RegionRU864RxConfig+0x1d0>)
 801a6aa:	5c8a      	ldrb	r2, [r1, r2]
 801a6ac:	701a      	strb	r2, [r3, #0]
 801a6ae:	e008      	b.n	801a6c2 <RegionRU864RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateRU864[dr];
 801a6b0:	230f      	movs	r3, #15
 801a6b2:	18fb      	adds	r3, r7, r3
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	569a      	ldrsb	r2, [r3, r2]
 801a6b8:	2316      	movs	r3, #22
 801a6ba:	18fb      	adds	r3, r7, r3
 801a6bc:	4912      	ldr	r1, [pc, #72]	; (801a708 <RegionRU864RxConfig+0x1d4>)
 801a6be:	5c8a      	ldrb	r2, [r1, r2]
 801a6c0:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801a6c2:	4b0b      	ldr	r3, [pc, #44]	; (801a6f0 <RegionRU864RxConfig+0x1bc>)
 801a6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6c6:	2216      	movs	r2, #22
 801a6c8:	18ba      	adds	r2, r7, r2
 801a6ca:	7812      	ldrb	r2, [r2, #0]
 801a6cc:	320d      	adds	r2, #13
 801a6ce:	b2d1      	uxtb	r1, r2
 801a6d0:	2217      	movs	r2, #23
 801a6d2:	18ba      	adds	r2, r7, r2
 801a6d4:	7812      	ldrb	r2, [r2, #0]
 801a6d6:	0010      	movs	r0, r2
 801a6d8:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	220f      	movs	r2, #15
 801a6de:	18ba      	adds	r2, r7, r2
 801a6e0:	7812      	ldrb	r2, [r2, #0]
 801a6e2:	701a      	strb	r2, [r3, #0]
    return true;
 801a6e4:	2301      	movs	r3, #1
}
 801a6e6:	0018      	movs	r0, r3
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	b007      	add	sp, #28
 801a6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6ee:	46c0      	nop			; (mov r8, r8)
 801a6f0:	080293d8 	.word	0x080293d8
 801a6f4:	20001930 	.word	0x20001930
 801a6f8:	08029180 	.word	0x08029180
 801a6fc:	0000c350 	.word	0x0000c350
 801a700:	00014585 	.word	0x00014585
 801a704:	080291b0 	.word	0x080291b0
 801a708:	080291a8 	.word	0x080291a8

0801a70c <RegionRU864TxConfig>:

bool RegionRU864TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a70e:	b093      	sub	sp, #76	; 0x4c
 801a710:	af0a      	add	r7, sp, #40	; 0x28
 801a712:	60f8      	str	r0, [r7, #12]
 801a714:	60b9      	str	r1, [r7, #8]
 801a716:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesRU864[txConfig->Datarate];
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	785b      	ldrb	r3, [r3, #1]
 801a71c:	b25b      	sxtb	r3, r3
 801a71e:	001a      	movs	r2, r3
 801a720:	4b60      	ldr	r3, [pc, #384]	; (801a8a4 <RegionRU864TxConfig+0x198>)
 801a722:	5c9a      	ldrb	r2, [r3, r2]
 801a724:	231e      	movs	r3, #30
 801a726:	18fb      	adds	r3, r7, r3
 801a728:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	2002      	movs	r0, #2
 801a72e:	5618      	ldrsb	r0, [r3, r0]
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	781b      	ldrb	r3, [r3, #0]
 801a734:	0019      	movs	r1, r3
 801a736:	4a5c      	ldr	r2, [pc, #368]	; (801a8a8 <RegionRU864TxConfig+0x19c>)
 801a738:	000b      	movs	r3, r1
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	185b      	adds	r3, r3, r1
 801a73e:	009b      	lsls	r3, r3, #2
 801a740:	18d3      	adds	r3, r2, r3
 801a742:	3309      	adds	r3, #9
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	4a58      	ldr	r2, [pc, #352]	; (801a8a8 <RegionRU864TxConfig+0x19c>)
 801a748:	3306      	adds	r3, #6
 801a74a:	011b      	lsls	r3, r3, #4
 801a74c:	18d3      	adds	r3, r2, r3
 801a74e:	3302      	adds	r3, #2
 801a750:	2100      	movs	r1, #0
 801a752:	5659      	ldrsb	r1, [r3, r1]
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	2201      	movs	r2, #1
 801a758:	569a      	ldrsb	r2, [r3, r2]
 801a75a:	251d      	movs	r5, #29
 801a75c:	197c      	adds	r4, r7, r5
 801a75e:	4b53      	ldr	r3, [pc, #332]	; (801a8ac <RegionRU864TxConfig+0x1a0>)
 801a760:	f7ff fb3a 	bl	8019dd8 <LimitTxPower>
 801a764:	0003      	movs	r3, r0
 801a766:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	785b      	ldrb	r3, [r3, #1]
 801a76c:	b25b      	sxtb	r3, r3
 801a76e:	0018      	movs	r0, r3
 801a770:	f7ff fb14 	bl	8019d9c <GetBandwidth>
 801a774:	0003      	movs	r3, r0
 801a776:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801a778:	2017      	movs	r0, #23
 801a77a:	183b      	adds	r3, r7, r0
 801a77c:	2200      	movs	r2, #0
 801a77e:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	6859      	ldr	r1, [r3, #4]
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	689a      	ldr	r2, [r3, #8]
 801a788:	183c      	adds	r4, r7, r0
 801a78a:	197b      	adds	r3, r7, r5
 801a78c:	781b      	ldrb	r3, [r3, #0]
 801a78e:	b25b      	sxtb	r3, r3
 801a790:	0018      	movs	r0, r3
 801a792:	f7fa f991 	bl	8014ab8 <RegionCommonComputeTxPower>
 801a796:	0003      	movs	r3, r0
 801a798:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801a79a:	4b45      	ldr	r3, [pc, #276]	; (801a8b0 <RegionRU864TxConfig+0x1a4>)
 801a79c:	695a      	ldr	r2, [r3, #20]
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	781b      	ldrb	r3, [r3, #0]
 801a7a2:	0018      	movs	r0, r3
 801a7a4:	4940      	ldr	r1, [pc, #256]	; (801a8a8 <RegionRU864TxConfig+0x19c>)
 801a7a6:	0003      	movs	r3, r0
 801a7a8:	005b      	lsls	r3, r3, #1
 801a7aa:	181b      	adds	r3, r3, r0
 801a7ac:	009b      	lsls	r3, r3, #2
 801a7ae:	585b      	ldr	r3, [r3, r1]
 801a7b0:	0018      	movs	r0, r3
 801a7b2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	785b      	ldrb	r3, [r3, #1]
 801a7b8:	b25b      	sxtb	r3, r3
 801a7ba:	2b07      	cmp	r3, #7
 801a7bc:	d12d      	bne.n	801a81a <RegionRU864TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801a7be:	201f      	movs	r0, #31
 801a7c0:	183b      	adds	r3, r7, r0
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 801a7c6:	4b3a      	ldr	r3, [pc, #232]	; (801a8b0 <RegionRU864TxConfig+0x1a4>)
 801a7c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a7ca:	231e      	movs	r3, #30
 801a7cc:	18fb      	adds	r3, r7, r3
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	569a      	ldrsb	r2, [r3, r2]
 801a7d2:	0013      	movs	r3, r2
 801a7d4:	015b      	lsls	r3, r3, #5
 801a7d6:	1a9b      	subs	r3, r3, r2
 801a7d8:	009b      	lsls	r3, r3, #2
 801a7da:	189b      	adds	r3, r3, r2
 801a7dc:	00db      	lsls	r3, r3, #3
 801a7de:	001d      	movs	r5, r3
 801a7e0:	69ba      	ldr	r2, [r7, #24]
 801a7e2:	4e34      	ldr	r6, [pc, #208]	; (801a8b4 <RegionRU864TxConfig+0x1a8>)
 801a7e4:	2317      	movs	r3, #23
 801a7e6:	18fb      	adds	r3, r7, r3
 801a7e8:	2100      	movs	r1, #0
 801a7ea:	5659      	ldrsb	r1, [r3, r1]
 801a7ec:	183b      	adds	r3, r7, r0
 801a7ee:	7818      	ldrb	r0, [r3, #0]
 801a7f0:	4b31      	ldr	r3, [pc, #196]	; (801a8b8 <RegionRU864TxConfig+0x1ac>)
 801a7f2:	9308      	str	r3, [sp, #32]
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	9307      	str	r3, [sp, #28]
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	9306      	str	r3, [sp, #24]
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	9305      	str	r3, [sp, #20]
 801a800:	2301      	movs	r3, #1
 801a802:	9304      	str	r3, [sp, #16]
 801a804:	2300      	movs	r3, #0
 801a806:	9303      	str	r3, [sp, #12]
 801a808:	2305      	movs	r3, #5
 801a80a:	9302      	str	r3, [sp, #8]
 801a80c:	2300      	movs	r3, #0
 801a80e:	9301      	str	r3, [sp, #4]
 801a810:	9500      	str	r5, [sp, #0]
 801a812:	0013      	movs	r3, r2
 801a814:	0032      	movs	r2, r6
 801a816:	47a0      	blx	r4
 801a818:	e024      	b.n	801a864 <RegionRU864TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 801a81a:	201f      	movs	r0, #31
 801a81c:	183b      	adds	r3, r7, r0
 801a81e:	2201      	movs	r2, #1
 801a820:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801a822:	4b23      	ldr	r3, [pc, #140]	; (801a8b0 <RegionRU864TxConfig+0x1a4>)
 801a824:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a826:	231e      	movs	r3, #30
 801a828:	18fb      	adds	r3, r7, r3
 801a82a:	781b      	ldrb	r3, [r3, #0]
 801a82c:	b25b      	sxtb	r3, r3
 801a82e:	69bd      	ldr	r5, [r7, #24]
 801a830:	2217      	movs	r2, #23
 801a832:	18ba      	adds	r2, r7, r2
 801a834:	2100      	movs	r1, #0
 801a836:	5651      	ldrsb	r1, [r2, r1]
 801a838:	183a      	adds	r2, r7, r0
 801a83a:	7810      	ldrb	r0, [r2, #0]
 801a83c:	4a1e      	ldr	r2, [pc, #120]	; (801a8b8 <RegionRU864TxConfig+0x1ac>)
 801a83e:	9208      	str	r2, [sp, #32]
 801a840:	2200      	movs	r2, #0
 801a842:	9207      	str	r2, [sp, #28]
 801a844:	2200      	movs	r2, #0
 801a846:	9206      	str	r2, [sp, #24]
 801a848:	2200      	movs	r2, #0
 801a84a:	9205      	str	r2, [sp, #20]
 801a84c:	2201      	movs	r2, #1
 801a84e:	9204      	str	r2, [sp, #16]
 801a850:	2200      	movs	r2, #0
 801a852:	9203      	str	r2, [sp, #12]
 801a854:	2208      	movs	r2, #8
 801a856:	9202      	str	r2, [sp, #8]
 801a858:	2201      	movs	r2, #1
 801a85a:	9201      	str	r2, [sp, #4]
 801a85c:	9300      	str	r3, [sp, #0]
 801a85e:	002b      	movs	r3, r5
 801a860:	2200      	movs	r2, #0
 801a862:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801a864:	4b12      	ldr	r3, [pc, #72]	; (801a8b0 <RegionRU864TxConfig+0x1a4>)
 801a866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a868:	68fa      	ldr	r2, [r7, #12]
 801a86a:	8992      	ldrh	r2, [r2, #12]
 801a86c:	b2d1      	uxtb	r1, r2
 801a86e:	241f      	movs	r4, #31
 801a870:	193a      	adds	r2, r7, r4
 801a872:	7812      	ldrb	r2, [r2, #0]
 801a874:	0010      	movs	r0, r2
 801a876:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 801a878:	4b0d      	ldr	r3, [pc, #52]	; (801a8b0 <RegionRU864TxConfig+0x1a4>)
 801a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a87c:	68fa      	ldr	r2, [r7, #12]
 801a87e:	8992      	ldrh	r2, [r2, #12]
 801a880:	b2d1      	uxtb	r1, r2
 801a882:	193a      	adds	r2, r7, r4
 801a884:	7812      	ldrb	r2, [r2, #0]
 801a886:	0010      	movs	r0, r2
 801a888:	4798      	blx	r3
 801a88a:	0002      	movs	r2, r0
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	221d      	movs	r2, #29
 801a894:	18ba      	adds	r2, r7, r2
 801a896:	7812      	ldrb	r2, [r2, #0]
 801a898:	701a      	strb	r2, [r3, #0]
    return true;
 801a89a:	2301      	movs	r3, #1
}
 801a89c:	0018      	movs	r0, r3
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	b009      	add	sp, #36	; 0x24
 801a8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8a4:	08029180 	.word	0x08029180
 801a8a8:	20001930 	.word	0x20001930
 801a8ac:	200019a0 	.word	0x200019a0
 801a8b0:	080293d8 	.word	0x080293d8
 801a8b4:	000061a8 	.word	0x000061a8
 801a8b8:	00000bb8 	.word	0x00000bb8

0801a8bc <RegionRU864LinkAdrReq>:

uint8_t RegionRU864LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8be:	b093      	sub	sp, #76	; 0x4c
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	60f8      	str	r0, [r7, #12]
 801a8c4:	60b9      	str	r1, [r7, #8]
 801a8c6:	607a      	str	r2, [r7, #4]
 801a8c8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801a8ca:	2347      	movs	r3, #71	; 0x47
 801a8cc:	18fb      	adds	r3, r7, r3
 801a8ce:	2207      	movs	r2, #7
 801a8d0:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801a8d2:	2344      	movs	r3, #68	; 0x44
 801a8d4:	18fb      	adds	r3, r7, r3
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801a8da:	2346      	movs	r3, #70	; 0x46
 801a8dc:	18fb      	adds	r3, r7, r3
 801a8de:	2200      	movs	r2, #0
 801a8e0:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801a8e2:	233a      	movs	r3, #58	; 0x3a
 801a8e4:	18fb      	adds	r3, r7, r3
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801a8ea:	e09e      	b.n	801aa2a <RegionRU864LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	685a      	ldr	r2, [r3, #4]
 801a8f0:	2346      	movs	r3, #70	; 0x46
 801a8f2:	18fb      	adds	r3, r7, r3
 801a8f4:	781b      	ldrb	r3, [r3, #0]
 801a8f6:	18d3      	adds	r3, r2, r3
 801a8f8:	2544      	movs	r5, #68	; 0x44
 801a8fa:	197c      	adds	r4, r7, r5
 801a8fc:	223c      	movs	r2, #60	; 0x3c
 801a8fe:	18ba      	adds	r2, r7, r2
 801a900:	0011      	movs	r1, r2
 801a902:	0018      	movs	r0, r3
 801a904:	f7f9 ff10 	bl	8014728 <RegionCommonParseLinkAdrReq>
 801a908:	0003      	movs	r3, r0
 801a90a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801a90c:	197b      	adds	r3, r7, r5
 801a90e:	781b      	ldrb	r3, [r3, #0]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d100      	bne.n	801a916 <RegionRU864LinkAdrReq+0x5a>
 801a914:	e092      	b.n	801aa3c <RegionRU864LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801a916:	2246      	movs	r2, #70	; 0x46
 801a918:	18bb      	adds	r3, r7, r2
 801a91a:	18b9      	adds	r1, r7, r2
 801a91c:	2244      	movs	r2, #68	; 0x44
 801a91e:	18ba      	adds	r2, r7, r2
 801a920:	7809      	ldrb	r1, [r1, #0]
 801a922:	7812      	ldrb	r2, [r2, #0]
 801a924:	188a      	adds	r2, r1, r2
 801a926:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801a928:	2347      	movs	r3, #71	; 0x47
 801a92a:	18fb      	adds	r3, r7, r3
 801a92c:	2207      	movs	r2, #7
 801a92e:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801a930:	213c      	movs	r1, #60	; 0x3c
 801a932:	187b      	adds	r3, r7, r1
 801a934:	889a      	ldrh	r2, [r3, #4]
 801a936:	233a      	movs	r3, #58	; 0x3a
 801a938:	18fb      	adds	r3, r7, r3
 801a93a:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801a93c:	187b      	adds	r3, r7, r1
 801a93e:	78db      	ldrb	r3, [r3, #3]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d10c      	bne.n	801a95e <RegionRU864LinkAdrReq+0xa2>
 801a944:	233a      	movs	r3, #58	; 0x3a
 801a946:	18fb      	adds	r3, r7, r3
 801a948:	881b      	ldrh	r3, [r3, #0]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d107      	bne.n	801a95e <RegionRU864LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801a94e:	2247      	movs	r2, #71	; 0x47
 801a950:	18bb      	adds	r3, r7, r2
 801a952:	18ba      	adds	r2, r7, r2
 801a954:	7812      	ldrb	r2, [r2, #0]
 801a956:	2101      	movs	r1, #1
 801a958:	438a      	bics	r2, r1
 801a95a:	701a      	strb	r2, [r3, #0]
 801a95c:	e065      	b.n	801aa2a <RegionRU864LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801a95e:	233c      	movs	r3, #60	; 0x3c
 801a960:	18fb      	adds	r3, r7, r3
 801a962:	78db      	ldrb	r3, [r3, #3]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d004      	beq.n	801a972 <RegionRU864LinkAdrReq+0xb6>
 801a968:	233c      	movs	r3, #60	; 0x3c
 801a96a:	18fb      	adds	r3, r7, r3
 801a96c:	78db      	ldrb	r3, [r3, #3]
 801a96e:	2b05      	cmp	r3, #5
 801a970:	d904      	bls.n	801a97c <RegionRU864LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801a972:	233c      	movs	r3, #60	; 0x3c
 801a974:	18fb      	adds	r3, r7, r3
 801a976:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801a978:	2b06      	cmp	r3, #6
 801a97a:	d907      	bls.n	801a98c <RegionRU864LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801a97c:	2247      	movs	r2, #71	; 0x47
 801a97e:	18bb      	adds	r3, r7, r2
 801a980:	18ba      	adds	r2, r7, r2
 801a982:	7812      	ldrb	r2, [r2, #0]
 801a984:	2101      	movs	r1, #1
 801a986:	438a      	bics	r2, r1
 801a988:	701a      	strb	r2, [r3, #0]
 801a98a:	e04e      	b.n	801aa2a <RegionRU864LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801a98c:	2345      	movs	r3, #69	; 0x45
 801a98e:	18fb      	adds	r3, r7, r3
 801a990:	2200      	movs	r2, #0
 801a992:	701a      	strb	r2, [r3, #0]
 801a994:	e044      	b.n	801aa20 <RegionRU864LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801a996:	233c      	movs	r3, #60	; 0x3c
 801a998:	18fb      	adds	r3, r7, r3
 801a99a:	78db      	ldrb	r3, [r3, #3]
 801a99c:	2b06      	cmp	r3, #6
 801a99e:	d11b      	bne.n	801a9d8 <RegionRU864LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 801a9a0:	2345      	movs	r3, #69	; 0x45
 801a9a2:	18fb      	adds	r3, r7, r3
 801a9a4:	781a      	ldrb	r2, [r3, #0]
 801a9a6:	496e      	ldr	r1, [pc, #440]	; (801ab60 <RegionRU864LinkAdrReq+0x2a4>)
 801a9a8:	0013      	movs	r3, r2
 801a9aa:	005b      	lsls	r3, r3, #1
 801a9ac:	189b      	adds	r3, r3, r2
 801a9ae:	009b      	lsls	r3, r3, #2
 801a9b0:	585b      	ldr	r3, [r3, r1]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d02e      	beq.n	801aa14 <RegionRU864LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801a9b6:	2345      	movs	r3, #69	; 0x45
 801a9b8:	18fb      	adds	r3, r7, r3
 801a9ba:	781b      	ldrb	r3, [r3, #0]
 801a9bc:	2201      	movs	r2, #1
 801a9be:	409a      	lsls	r2, r3
 801a9c0:	0013      	movs	r3, r2
 801a9c2:	b21a      	sxth	r2, r3
 801a9c4:	213a      	movs	r1, #58	; 0x3a
 801a9c6:	187b      	adds	r3, r7, r1
 801a9c8:	881b      	ldrh	r3, [r3, #0]
 801a9ca:	b21b      	sxth	r3, r3
 801a9cc:	4313      	orrs	r3, r2
 801a9ce:	b21b      	sxth	r3, r3
 801a9d0:	b29a      	uxth	r2, r3
 801a9d2:	187b      	adds	r3, r7, r1
 801a9d4:	801a      	strh	r2, [r3, #0]
 801a9d6:	e01d      	b.n	801aa14 <RegionRU864LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801a9d8:	233a      	movs	r3, #58	; 0x3a
 801a9da:	18fb      	adds	r3, r7, r3
 801a9dc:	881b      	ldrh	r3, [r3, #0]
 801a9de:	001a      	movs	r2, r3
 801a9e0:	2345      	movs	r3, #69	; 0x45
 801a9e2:	18fb      	adds	r3, r7, r3
 801a9e4:	781b      	ldrb	r3, [r3, #0]
 801a9e6:	411a      	asrs	r2, r3
 801a9e8:	0013      	movs	r3, r2
 801a9ea:	2201      	movs	r2, #1
 801a9ec:	4013      	ands	r3, r2
 801a9ee:	d011      	beq.n	801aa14 <RegionRU864LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 801a9f0:	2345      	movs	r3, #69	; 0x45
 801a9f2:	18fb      	adds	r3, r7, r3
 801a9f4:	781a      	ldrb	r2, [r3, #0]
 801a9f6:	495a      	ldr	r1, [pc, #360]	; (801ab60 <RegionRU864LinkAdrReq+0x2a4>)
 801a9f8:	0013      	movs	r3, r2
 801a9fa:	005b      	lsls	r3, r3, #1
 801a9fc:	189b      	adds	r3, r3, r2
 801a9fe:	009b      	lsls	r3, r3, #2
 801aa00:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d106      	bne.n	801aa14 <RegionRU864LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801aa06:	2247      	movs	r2, #71	; 0x47
 801aa08:	18bb      	adds	r3, r7, r2
 801aa0a:	18ba      	adds	r2, r7, r2
 801aa0c:	7812      	ldrb	r2, [r2, #0]
 801aa0e:	2101      	movs	r1, #1
 801aa10:	438a      	bics	r2, r1
 801aa12:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801aa14:	2145      	movs	r1, #69	; 0x45
 801aa16:	187b      	adds	r3, r7, r1
 801aa18:	781a      	ldrb	r2, [r3, #0]
 801aa1a:	187b      	adds	r3, r7, r1
 801aa1c:	3201      	adds	r2, #1
 801aa1e:	701a      	strb	r2, [r3, #0]
 801aa20:	2345      	movs	r3, #69	; 0x45
 801aa22:	18fb      	adds	r3, r7, r3
 801aa24:	781b      	ldrb	r3, [r3, #0]
 801aa26:	2b07      	cmp	r3, #7
 801aa28:	d9b5      	bls.n	801a996 <RegionRU864LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	7a1b      	ldrb	r3, [r3, #8]
 801aa2e:	2246      	movs	r2, #70	; 0x46
 801aa30:	18ba      	adds	r2, r7, r2
 801aa32:	7812      	ldrb	r2, [r2, #0]
 801aa34:	429a      	cmp	r2, r3
 801aa36:	d200      	bcs.n	801aa3a <RegionRU864LinkAdrReq+0x17e>
 801aa38:	e758      	b.n	801a8ec <RegionRU864LinkAdrReq+0x30>
 801aa3a:	e000      	b.n	801aa3e <RegionRU864LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 801aa3c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801aa3e:	2134      	movs	r1, #52	; 0x34
 801aa40:	187b      	adds	r3, r7, r1
 801aa42:	2201      	movs	r2, #1
 801aa44:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	7a5a      	ldrb	r2, [r3, #9]
 801aa4a:	187b      	adds	r3, r7, r1
 801aa4c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionRU864GetPhyParam( &getPhy );
 801aa4e:	187b      	adds	r3, r7, r1
 801aa50:	0018      	movs	r0, r3
 801aa52:	f7ff faf7 	bl	801a044 <RegionRU864GetPhyParam>
 801aa56:	0003      	movs	r3, r0
 801aa58:	001a      	movs	r2, r3
 801aa5a:	2030      	movs	r0, #48	; 0x30
 801aa5c:	183b      	adds	r3, r7, r0
 801aa5e:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 801aa60:	2110      	movs	r1, #16
 801aa62:	187b      	adds	r3, r7, r1
 801aa64:	2447      	movs	r4, #71	; 0x47
 801aa66:	193a      	adds	r2, r7, r4
 801aa68:	7812      	ldrb	r2, [r2, #0]
 801aa6a:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	7a9a      	ldrb	r2, [r3, #10]
 801aa70:	187b      	adds	r3, r7, r1
 801aa72:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801aa74:	253c      	movs	r5, #60	; 0x3c
 801aa76:	197b      	adds	r3, r7, r5
 801aa78:	2201      	movs	r2, #1
 801aa7a:	569a      	ldrsb	r2, [r3, r2]
 801aa7c:	187b      	adds	r3, r7, r1
 801aa7e:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801aa80:	197b      	adds	r3, r7, r5
 801aa82:	2202      	movs	r2, #2
 801aa84:	569a      	ldrsb	r2, [r3, r2]
 801aa86:	187b      	adds	r3, r7, r1
 801aa88:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801aa8a:	197b      	adds	r3, r7, r5
 801aa8c:	781a      	ldrb	r2, [r3, #0]
 801aa8e:	187b      	adds	r3, r7, r1
 801aa90:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	220b      	movs	r2, #11
 801aa96:	569a      	ldrsb	r2, [r3, r2]
 801aa98:	187b      	adds	r3, r7, r1
 801aa9a:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	220c      	movs	r2, #12
 801aaa0:	569a      	ldrsb	r2, [r3, r2]
 801aaa2:	187b      	adds	r3, r7, r1
 801aaa4:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	7b5b      	ldrb	r3, [r3, #13]
 801aaaa:	b25a      	sxtb	r2, r3
 801aaac:	187b      	adds	r3, r7, r1
 801aaae:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = RU864_MAX_NB_CHANNELS;
 801aab0:	187b      	adds	r3, r7, r1
 801aab2:	2208      	movs	r2, #8
 801aab4:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801aab6:	187b      	adds	r3, r7, r1
 801aab8:	223a      	movs	r2, #58	; 0x3a
 801aaba:	18ba      	adds	r2, r7, r2
 801aabc:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801aabe:	183b      	adds	r3, r7, r0
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	b25a      	sxtb	r2, r3
 801aac4:	0008      	movs	r0, r1
 801aac6:	183b      	adds	r3, r7, r0
 801aac8:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = RU864_TX_MAX_DATARATE;
 801aaca:	183b      	adds	r3, r7, r0
 801aacc:	2207      	movs	r2, #7
 801aace:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801aad0:	183b      	adds	r3, r7, r0
 801aad2:	4a23      	ldr	r2, [pc, #140]	; (801ab60 <RegionRU864LinkAdrReq+0x2a4>)
 801aad4:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = RU864_MIN_TX_POWER;
 801aad6:	183b      	adds	r3, r7, r0
 801aad8:	2207      	movs	r2, #7
 801aada:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = RU864_MAX_TX_POWER;
 801aadc:	183b      	adds	r3, r7, r0
 801aade:	2200      	movs	r2, #0
 801aae0:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801aae2:	183b      	adds	r3, r7, r0
 801aae4:	68fa      	ldr	r2, [r7, #12]
 801aae6:	6812      	ldr	r2, [r2, #0]
 801aae8:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801aaea:	0026      	movs	r6, r4
 801aaec:	193c      	adds	r4, r7, r4
 801aaee:	0029      	movs	r1, r5
 801aaf0:	187d      	adds	r5, r7, r1
 801aaf2:	187b      	adds	r3, r7, r1
 801aaf4:	1c9a      	adds	r2, r3, #2
 801aaf6:	187b      	adds	r3, r7, r1
 801aaf8:	1c59      	adds	r1, r3, #1
 801aafa:	1838      	adds	r0, r7, r0
 801aafc:	002b      	movs	r3, r5
 801aafe:	f7f9 fe69 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 801ab02:	0003      	movs	r3, r0
 801ab04:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801ab06:	0034      	movs	r4, r6
 801ab08:	193b      	adds	r3, r7, r4
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	2b07      	cmp	r3, #7
 801ab0e:	d10b      	bne.n	801ab28 <RegionRU864LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 801ab10:	4b14      	ldr	r3, [pc, #80]	; (801ab64 <RegionRU864LinkAdrReq+0x2a8>)
 801ab12:	2202      	movs	r2, #2
 801ab14:	2100      	movs	r1, #0
 801ab16:	0018      	movs	r0, r3
 801ab18:	f002 f908 	bl	801cd2c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801ab1c:	233a      	movs	r3, #58	; 0x3a
 801ab1e:	18fb      	adds	r3, r7, r3
 801ab20:	8819      	ldrh	r1, [r3, #0]
 801ab22:	4b0f      	ldr	r3, [pc, #60]	; (801ab60 <RegionRU864LinkAdrReq+0x2a4>)
 801ab24:	2270      	movs	r2, #112	; 0x70
 801ab26:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801ab28:	213c      	movs	r1, #60	; 0x3c
 801ab2a:	187b      	adds	r3, r7, r1
 801ab2c:	2201      	movs	r2, #1
 801ab2e:	569a      	ldrsb	r2, [r3, r2]
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801ab34:	187b      	adds	r3, r7, r1
 801ab36:	2202      	movs	r2, #2
 801ab38:	569a      	ldrsb	r2, [r3, r2]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801ab3e:	187b      	adds	r3, r7, r1
 801ab40:	781a      	ldrb	r2, [r3, #0]
 801ab42:	683b      	ldr	r3, [r7, #0]
 801ab44:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801ab46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ab48:	2246      	movs	r2, #70	; 0x46
 801ab4a:	18ba      	adds	r2, r7, r2
 801ab4c:	7812      	ldrb	r2, [r2, #0]
 801ab4e:	701a      	strb	r2, [r3, #0]

    return status;
 801ab50:	2347      	movs	r3, #71	; 0x47
 801ab52:	18fb      	adds	r3, r7, r3
 801ab54:	781b      	ldrb	r3, [r3, #0]
}
 801ab56:	0018      	movs	r0, r3
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	b013      	add	sp, #76	; 0x4c
 801ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab5e:	46c0      	nop			; (mov r8, r8)
 801ab60:	20001930 	.word	0x20001930
 801ab64:	200019a0 	.word	0x200019a0

0801ab68 <RegionRU864RxParamSetupReq>:

uint8_t RegionRU864RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b084      	sub	sp, #16
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801ab70:	230f      	movs	r3, #15
 801ab72:	18fb      	adds	r3, r7, r3
 801ab74:	2207      	movs	r2, #7
 801ab76:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	0018      	movs	r0, r3
 801ab7e:	f7ff f953 	bl	8019e28 <VerifyRfFreq>
 801ab82:	0003      	movs	r3, r0
 801ab84:	001a      	movs	r2, r3
 801ab86:	2301      	movs	r3, #1
 801ab88:	4053      	eors	r3, r2
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d006      	beq.n	801ab9e <RegionRU864RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 801ab90:	220f      	movs	r2, #15
 801ab92:	18bb      	adds	r3, r7, r2
 801ab94:	18ba      	adds	r2, r7, r2
 801ab96:	7812      	ldrb	r2, [r2, #0]
 801ab98:	2101      	movs	r1, #1
 801ab9a:	438a      	bics	r2, r1
 801ab9c:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE ) == false )
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	b25b      	sxtb	r3, r3
 801aba4:	2207      	movs	r2, #7
 801aba6:	2100      	movs	r1, #0
 801aba8:	0018      	movs	r0, r3
 801abaa:	f7f9 fbd5 	bl	8014358 <RegionCommonValueInRange>
 801abae:	1e03      	subs	r3, r0, #0
 801abb0:	d106      	bne.n	801abc0 <RegionRU864RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801abb2:	220f      	movs	r2, #15
 801abb4:	18bb      	adds	r3, r7, r2
 801abb6:	18ba      	adds	r2, r7, r2
 801abb8:	7812      	ldrb	r2, [r2, #0]
 801abba:	2102      	movs	r1, #2
 801abbc:	438a      	bics	r2, r1
 801abbe:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, RU864_MIN_RX1_DR_OFFSET, RU864_MAX_RX1_DR_OFFSET ) == false )
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	785b      	ldrb	r3, [r3, #1]
 801abc4:	b25b      	sxtb	r3, r3
 801abc6:	2205      	movs	r2, #5
 801abc8:	2100      	movs	r1, #0
 801abca:	0018      	movs	r0, r3
 801abcc:	f7f9 fbc4 	bl	8014358 <RegionCommonValueInRange>
 801abd0:	1e03      	subs	r3, r0, #0
 801abd2:	d106      	bne.n	801abe2 <RegionRU864RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801abd4:	220f      	movs	r2, #15
 801abd6:	18bb      	adds	r3, r7, r2
 801abd8:	18ba      	adds	r2, r7, r2
 801abda:	7812      	ldrb	r2, [r2, #0]
 801abdc:	2104      	movs	r1, #4
 801abde:	438a      	bics	r2, r1
 801abe0:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801abe2:	230f      	movs	r3, #15
 801abe4:	18fb      	adds	r3, r7, r3
 801abe6:	781b      	ldrb	r3, [r3, #0]
}
 801abe8:	0018      	movs	r0, r3
 801abea:	46bd      	mov	sp, r7
 801abec:	b004      	add	sp, #16
 801abee:	bd80      	pop	{r7, pc}

0801abf0 <RegionRU864NewChannelReq>:

uint8_t RegionRU864NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b086      	sub	sp, #24
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801abf8:	2317      	movs	r3, #23
 801abfa:	18fb      	adds	r3, r7, r3
 801abfc:	2203      	movs	r2, #3
 801abfe:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d119      	bne.n	801ac3e <RegionRU864NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	791b      	ldrb	r3, [r3, #4]
 801ac0e:	b25b      	sxtb	r3, r3
 801ac10:	b2da      	uxtb	r2, r3
 801ac12:	2108      	movs	r1, #8
 801ac14:	187b      	adds	r3, r7, r1
 801ac16:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionRU864ChannelsRemove( &channelRemove ) == false )
 801ac18:	187b      	adds	r3, r7, r1
 801ac1a:	0018      	movs	r0, r3
 801ac1c:	f000 fa32 	bl	801b084 <RegionRU864ChannelsRemove>
 801ac20:	0003      	movs	r3, r0
 801ac22:	001a      	movs	r2, r3
 801ac24:	2301      	movs	r3, #1
 801ac26:	4053      	eors	r3, r2
 801ac28:	b2db      	uxtb	r3, r3
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d043      	beq.n	801acb6 <RegionRU864NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801ac2e:	2217      	movs	r2, #23
 801ac30:	18bb      	adds	r3, r7, r2
 801ac32:	18ba      	adds	r2, r7, r2
 801ac34:	7812      	ldrb	r2, [r2, #0]
 801ac36:	2103      	movs	r1, #3
 801ac38:	438a      	bics	r2, r1
 801ac3a:	701a      	strb	r2, [r3, #0]
 801ac3c:	e03b      	b.n	801acb6 <RegionRU864NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681a      	ldr	r2, [r3, #0]
 801ac42:	210c      	movs	r1, #12
 801ac44:	187b      	adds	r3, r7, r1
 801ac46:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	791b      	ldrb	r3, [r3, #4]
 801ac4c:	b25b      	sxtb	r3, r3
 801ac4e:	b2da      	uxtb	r2, r3
 801ac50:	187b      	adds	r3, r7, r1
 801ac52:	711a      	strb	r2, [r3, #4]

        switch( RegionRU864ChannelAdd( &channelAdd ) )
 801ac54:	187b      	adds	r3, r7, r1
 801ac56:	0018      	movs	r0, r3
 801ac58:	f000 f95a 	bl	801af10 <RegionRU864ChannelAdd>
 801ac5c:	0003      	movs	r3, r0
 801ac5e:	2b04      	cmp	r3, #4
 801ac60:	d008      	beq.n	801ac74 <RegionRU864NewChannelReq+0x84>
 801ac62:	dc02      	bgt.n	801ac6a <RegionRU864NewChannelReq+0x7a>
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d025      	beq.n	801acb4 <RegionRU864NewChannelReq+0xc4>
 801ac68:	e01c      	b.n	801aca4 <RegionRU864NewChannelReq+0xb4>
 801ac6a:	2b05      	cmp	r3, #5
 801ac6c:	d00a      	beq.n	801ac84 <RegionRU864NewChannelReq+0x94>
 801ac6e:	2b06      	cmp	r3, #6
 801ac70:	d010      	beq.n	801ac94 <RegionRU864NewChannelReq+0xa4>
 801ac72:	e017      	b.n	801aca4 <RegionRU864NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801ac74:	2217      	movs	r2, #23
 801ac76:	18bb      	adds	r3, r7, r2
 801ac78:	18ba      	adds	r2, r7, r2
 801ac7a:	7812      	ldrb	r2, [r2, #0]
 801ac7c:	2101      	movs	r1, #1
 801ac7e:	438a      	bics	r2, r1
 801ac80:	701a      	strb	r2, [r3, #0]
                break;
 801ac82:	e018      	b.n	801acb6 <RegionRU864NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801ac84:	2217      	movs	r2, #23
 801ac86:	18bb      	adds	r3, r7, r2
 801ac88:	18ba      	adds	r2, r7, r2
 801ac8a:	7812      	ldrb	r2, [r2, #0]
 801ac8c:	2102      	movs	r1, #2
 801ac8e:	438a      	bics	r2, r1
 801ac90:	701a      	strb	r2, [r3, #0]
                break;
 801ac92:	e010      	b.n	801acb6 <RegionRU864NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801ac94:	2217      	movs	r2, #23
 801ac96:	18bb      	adds	r3, r7, r2
 801ac98:	18ba      	adds	r2, r7, r2
 801ac9a:	7812      	ldrb	r2, [r2, #0]
 801ac9c:	2103      	movs	r1, #3
 801ac9e:	438a      	bics	r2, r1
 801aca0:	701a      	strb	r2, [r3, #0]
                break;
 801aca2:	e008      	b.n	801acb6 <RegionRU864NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 801aca4:	2217      	movs	r2, #23
 801aca6:	18bb      	adds	r3, r7, r2
 801aca8:	18ba      	adds	r2, r7, r2
 801acaa:	7812      	ldrb	r2, [r2, #0]
 801acac:	2103      	movs	r1, #3
 801acae:	438a      	bics	r2, r1
 801acb0:	701a      	strb	r2, [r3, #0]
                break;
 801acb2:	e000      	b.n	801acb6 <RegionRU864NewChannelReq+0xc6>
                break;
 801acb4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801acb6:	2317      	movs	r3, #23
 801acb8:	18fb      	adds	r3, r7, r3
 801acba:	781b      	ldrb	r3, [r3, #0]
}
 801acbc:	0018      	movs	r0, r3
 801acbe:	46bd      	mov	sp, r7
 801acc0:	b006      	add	sp, #24
 801acc2:	bd80      	pop	{r7, pc}

0801acc4 <RegionRU864TxParamSetupReq>:

int8_t RegionRU864TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b082      	sub	sp, #8
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
    return -1;
 801accc:	2301      	movs	r3, #1
 801acce:	425b      	negs	r3, r3
}
 801acd0:	0018      	movs	r0, r3
 801acd2:	46bd      	mov	sp, r7
 801acd4:	b002      	add	sp, #8
 801acd6:	bd80      	pop	{r7, pc}

0801acd8 <RegionRU864DlChannelReq>:

uint8_t RegionRU864DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b084      	sub	sp, #16
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801ace0:	230f      	movs	r3, #15
 801ace2:	18fb      	adds	r3, r7, r3
 801ace4:	2203      	movs	r2, #3
 801ace6:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	685b      	ldr	r3, [r3, #4]
 801acec:	0018      	movs	r0, r3
 801acee:	f7ff f89b 	bl	8019e28 <VerifyRfFreq>
 801acf2:	0003      	movs	r3, r0
 801acf4:	001a      	movs	r2, r3
 801acf6:	2301      	movs	r3, #1
 801acf8:	4053      	eors	r3, r2
 801acfa:	b2db      	uxtb	r3, r3
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d006      	beq.n	801ad0e <RegionRU864DlChannelReq+0x36>
    {
        status &= 0xFE;
 801ad00:	220f      	movs	r2, #15
 801ad02:	18bb      	adds	r3, r7, r2
 801ad04:	18ba      	adds	r2, r7, r2
 801ad06:	7812      	ldrb	r2, [r2, #0]
 801ad08:	2101      	movs	r1, #1
 801ad0a:	438a      	bics	r2, r1
 801ad0c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	0019      	movs	r1, r3
 801ad14:	4a13      	ldr	r2, [pc, #76]	; (801ad64 <RegionRU864DlChannelReq+0x8c>)
 801ad16:	000b      	movs	r3, r1
 801ad18:	005b      	lsls	r3, r3, #1
 801ad1a:	185b      	adds	r3, r3, r1
 801ad1c:	009b      	lsls	r3, r3, #2
 801ad1e:	589b      	ldr	r3, [r3, r2]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d106      	bne.n	801ad32 <RegionRU864DlChannelReq+0x5a>
    {
        status &= 0xFD;
 801ad24:	220f      	movs	r2, #15
 801ad26:	18bb      	adds	r3, r7, r2
 801ad28:	18ba      	adds	r2, r7, r2
 801ad2a:	7812      	ldrb	r2, [r2, #0]
 801ad2c:	2102      	movs	r1, #2
 801ad2e:	438a      	bics	r2, r1
 801ad30:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801ad32:	230f      	movs	r3, #15
 801ad34:	18fb      	adds	r3, r7, r3
 801ad36:	781b      	ldrb	r3, [r3, #0]
 801ad38:	2b03      	cmp	r3, #3
 801ad3a:	d10c      	bne.n	801ad56 <RegionRU864DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	0018      	movs	r0, r3
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	685a      	ldr	r2, [r3, #4]
 801ad46:	4907      	ldr	r1, [pc, #28]	; (801ad64 <RegionRU864DlChannelReq+0x8c>)
 801ad48:	0003      	movs	r3, r0
 801ad4a:	005b      	lsls	r3, r3, #1
 801ad4c:	181b      	adds	r3, r3, r0
 801ad4e:	009b      	lsls	r3, r3, #2
 801ad50:	18cb      	adds	r3, r1, r3
 801ad52:	3304      	adds	r3, #4
 801ad54:	601a      	str	r2, [r3, #0]
    }

    return status;
 801ad56:	230f      	movs	r3, #15
 801ad58:	18fb      	adds	r3, r7, r3
 801ad5a:	781b      	ldrb	r3, [r3, #0]
}
 801ad5c:	0018      	movs	r0, r3
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	b004      	add	sp, #16
 801ad62:	bd80      	pop	{r7, pc}
 801ad64:	20001930 	.word	0x20001930

0801ad68 <RegionRU864CalcBackOff>:
{
    return currentDr;
}

void RegionRU864CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b088      	sub	sp, #32
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 801ad70:	210c      	movs	r1, #12
 801ad72:	187b      	adds	r3, r7, r1
 801ad74:	4a12      	ldr	r2, [pc, #72]	; (801adc0 <RegionRU864CalcBackOff+0x58>)
 801ad76:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801ad78:	187b      	adds	r3, r7, r1
 801ad7a:	4a12      	ldr	r2, [pc, #72]	; (801adc4 <RegionRU864CalcBackOff+0x5c>)
 801ad7c:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	785a      	ldrb	r2, [r3, #1]
 801ad82:	187b      	adds	r3, r7, r1
 801ad84:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	781a      	ldrb	r2, [r3, #0]
 801ad8a:	187b      	adds	r3, r7, r1
 801ad8c:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	789a      	ldrb	r2, [r3, #2]
 801ad92:	187b      	adds	r3, r7, r1
 801ad94:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	78da      	ldrb	r2, [r3, #3]
 801ad9a:	187b      	adds	r3, r7, r1
 801ad9c:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	685a      	ldr	r2, [r3, #4]
 801ada2:	187b      	adds	r3, r7, r1
 801ada4:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	689a      	ldr	r2, [r3, #8]
 801adaa:	187b      	adds	r3, r7, r1
 801adac:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801adae:	187b      	adds	r3, r7, r1
 801adb0:	0018      	movs	r0, r3
 801adb2:	f7f9 feb9 	bl	8014b28 <RegionCommonCalcBackOff>
}
 801adb6:	46c0      	nop			; (mov r8, r8)
 801adb8:	46bd      	mov	sp, r7
 801adba:	b008      	add	sp, #32
 801adbc:	bd80      	pop	{r7, pc}
 801adbe:	46c0      	nop			; (mov r8, r8)
 801adc0:	20001930 	.word	0x20001930
 801adc4:	20001990 	.word	0x20001990

0801adc8 <RegionRU864NextChannel>:

LoRaMacStatus_t RegionRU864NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801adc8:	b5b0      	push	{r4, r5, r7, lr}
 801adca:	b08e      	sub	sp, #56	; 0x38
 801adcc:	af04      	add	r7, sp, #16
 801adce:	60f8      	str	r0, [r7, #12]
 801add0:	60b9      	str	r1, [r7, #8]
 801add2:	607a      	str	r2, [r7, #4]
 801add4:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801add6:	2327      	movs	r3, #39	; 0x27
 801add8:	18fb      	adds	r3, r7, r3
 801adda:	2200      	movs	r2, #0
 801addc:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801adde:	231f      	movs	r3, #31
 801ade0:	18fb      	adds	r3, r7, r3
 801ade2:	2200      	movs	r2, #0
 801ade4:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[RU864_MAX_NB_CHANNELS] = { 0 };
 801ade6:	2314      	movs	r3, #20
 801ade8:	18fb      	adds	r3, r7, r3
 801adea:	0018      	movs	r0, r3
 801adec:	2308      	movs	r3, #8
 801adee:	001a      	movs	r2, r3
 801adf0:	2100      	movs	r1, #0
 801adf2:	f00b f889 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 801adf6:	2300      	movs	r3, #0
 801adf8:	623b      	str	r3, [r7, #32]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801adfa:	4b42      	ldr	r3, [pc, #264]	; (801af04 <RegionRU864NextChannel+0x13c>)
 801adfc:	2201      	movs	r2, #1
 801adfe:	2100      	movs	r1, #0
 801ae00:	0018      	movs	r0, r3
 801ae02:	f7f9 fb11 	bl	8014428 <RegionCommonCountChannels>
 801ae06:	1e03      	subs	r3, r0, #0
 801ae08:	d108      	bne.n	801ae1c <RegionRU864NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801ae0a:	4b3f      	ldr	r3, [pc, #252]	; (801af08 <RegionRU864NextChannel+0x140>)
 801ae0c:	2270      	movs	r2, #112	; 0x70
 801ae0e:	5a9b      	ldrh	r3, [r3, r2]
 801ae10:	2203      	movs	r2, #3
 801ae12:	4313      	orrs	r3, r2
 801ae14:	b299      	uxth	r1, r3
 801ae16:	4b3c      	ldr	r3, [pc, #240]	; (801af08 <RegionRU864NextChannel+0x140>)
 801ae18:	2270      	movs	r2, #112	; 0x70
 801ae1a:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	681c      	ldr	r4, [r3, #0]
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	0018      	movs	r0, r3
 801ae26:	f001 ff06 	bl	801cc36 <TimerGetElapsedTime>
 801ae2a:	0003      	movs	r3, r0
 801ae2c:	429c      	cmp	r4, r3
 801ae2e:	d824      	bhi.n	801ae7a <RegionRU864NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801ae30:	683b      	ldr	r3, [r7, #0]
 801ae32:	2200      	movs	r2, #0
 801ae34:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, RU864_MAX_NB_BANDS );
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	7a58      	ldrb	r0, [r3, #9]
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	7a99      	ldrb	r1, [r3, #10]
 801ae3e:	4a33      	ldr	r2, [pc, #204]	; (801af0c <RegionRU864NextChannel+0x144>)
 801ae40:	2301      	movs	r3, #1
 801ae42:	f7f9 fb7c 	bl	801453e <RegionCommonUpdateBandTimeOff>
 801ae46:	0003      	movs	r3, r0
 801ae48:	623b      	str	r3, [r7, #32]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	7a58      	ldrb	r0, [r3, #9]
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	7a1b      	ldrb	r3, [r3, #8]
 801ae52:	b25b      	sxtb	r3, r3
 801ae54:	b2d9      	uxtb	r1, r3
 801ae56:	2327      	movs	r3, #39	; 0x27
 801ae58:	18fc      	adds	r4, r7, r3
 801ae5a:	4d2b      	ldr	r5, [pc, #172]	; (801af08 <RegionRU864NextChannel+0x140>)
 801ae5c:	4a29      	ldr	r2, [pc, #164]	; (801af04 <RegionRU864NextChannel+0x13c>)
 801ae5e:	231f      	movs	r3, #31
 801ae60:	18fb      	adds	r3, r7, r3
 801ae62:	9302      	str	r3, [sp, #8]
 801ae64:	2314      	movs	r3, #20
 801ae66:	18fb      	adds	r3, r7, r3
 801ae68:	9301      	str	r3, [sp, #4]
 801ae6a:	4b28      	ldr	r3, [pc, #160]	; (801af0c <RegionRU864NextChannel+0x144>)
 801ae6c:	9300      	str	r3, [sp, #0]
 801ae6e:	002b      	movs	r3, r5
 801ae70:	f7ff f802 	bl	8019e78 <CountNbOfEnabledChannels>
 801ae74:	0003      	movs	r3, r0
 801ae76:	7023      	strb	r3, [r4, #0]
 801ae78:	e010      	b.n	801ae9c <RegionRU864NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801ae7a:	211f      	movs	r1, #31
 801ae7c:	187b      	adds	r3, r7, r1
 801ae7e:	781b      	ldrb	r3, [r3, #0]
 801ae80:	3301      	adds	r3, #1
 801ae82:	b2da      	uxtb	r2, r3
 801ae84:	187b      	adds	r3, r7, r1
 801ae86:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	681c      	ldr	r4, [r3, #0]
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	685b      	ldr	r3, [r3, #4]
 801ae90:	0018      	movs	r0, r3
 801ae92:	f001 fed0 	bl	801cc36 <TimerGetElapsedTime>
 801ae96:	0003      	movs	r3, r0
 801ae98:	1ae3      	subs	r3, r4, r3
 801ae9a:	623b      	str	r3, [r7, #32]
    }

    if( nbEnabledChannels > 0 )
 801ae9c:	2327      	movs	r3, #39	; 0x27
 801ae9e:	18fb      	adds	r3, r7, r3
 801aea0:	781b      	ldrb	r3, [r3, #0]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d012      	beq.n	801aecc <RegionRU864NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801aea6:	2327      	movs	r3, #39	; 0x27
 801aea8:	18fb      	adds	r3, r7, r3
 801aeaa:	781b      	ldrb	r3, [r3, #0]
 801aeac:	3b01      	subs	r3, #1
 801aeae:	0019      	movs	r1, r3
 801aeb0:	2000      	movs	r0, #0
 801aeb2:	f001 fee9 	bl	801cc88 <randr>
 801aeb6:	0002      	movs	r2, r0
 801aeb8:	2314      	movs	r3, #20
 801aeba:	18fb      	adds	r3, r7, r3
 801aebc:	5c9a      	ldrb	r2, [r3, r2]
 801aebe:	68bb      	ldr	r3, [r7, #8]
 801aec0:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	2200      	movs	r2, #0
 801aec6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801aec8:	2300      	movs	r3, #0
 801aeca:	e016      	b.n	801aefa <RegionRU864NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 801aecc:	231f      	movs	r3, #31
 801aece:	18fb      	adds	r3, r7, r3
 801aed0:	781b      	ldrb	r3, [r3, #0]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d004      	beq.n	801aee0 <RegionRU864NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	6a3a      	ldr	r2, [r7, #32]
 801aeda:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801aedc:	230b      	movs	r3, #11
 801aede:	e00c      	b.n	801aefa <RegionRU864NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801aee0:	4b09      	ldr	r3, [pc, #36]	; (801af08 <RegionRU864NextChannel+0x140>)
 801aee2:	2270      	movs	r2, #112	; 0x70
 801aee4:	5a9b      	ldrh	r3, [r3, r2]
 801aee6:	2203      	movs	r2, #3
 801aee8:	4313      	orrs	r3, r2
 801aeea:	b299      	uxth	r1, r3
 801aeec:	4b06      	ldr	r3, [pc, #24]	; (801af08 <RegionRU864NextChannel+0x140>)
 801aeee:	2270      	movs	r2, #112	; 0x70
 801aef0:	5299      	strh	r1, [r3, r2]
        *time = 0;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	2200      	movs	r2, #0
 801aef6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801aef8:	230c      	movs	r3, #12
    }
}
 801aefa:	0018      	movs	r0, r3
 801aefc:	46bd      	mov	sp, r7
 801aefe:	b00a      	add	sp, #40	; 0x28
 801af00:	bdb0      	pop	{r4, r5, r7, pc}
 801af02:	46c0      	nop			; (mov r8, r8)
 801af04:	200019a0 	.word	0x200019a0
 801af08:	20001930 	.word	0x20001930
 801af0c:	20001990 	.word	0x20001990

0801af10 <RegionRU864ChannelAdd>:

LoRaMacStatus_t RegionRU864ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801af10:	b590      	push	{r4, r7, lr}
 801af12:	b085      	sub	sp, #20
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 801af18:	230f      	movs	r3, #15
 801af1a:	18fb      	adds	r3, r7, r3
 801af1c:	2200      	movs	r2, #0
 801af1e:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 801af20:	230e      	movs	r3, #14
 801af22:	18fb      	adds	r3, r7, r3
 801af24:	2200      	movs	r2, #0
 801af26:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 801af28:	210d      	movs	r1, #13
 801af2a:	187b      	adds	r3, r7, r1
 801af2c:	687a      	ldr	r2, [r7, #4]
 801af2e:	7912      	ldrb	r2, [r2, #4]
 801af30:	701a      	strb	r2, [r3, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 801af32:	187b      	adds	r3, r7, r1
 801af34:	781b      	ldrb	r3, [r3, #0]
 801af36:	2b01      	cmp	r3, #1
 801af38:	d801      	bhi.n	801af3e <RegionRU864ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801af3a:	2306      	movs	r3, #6
 801af3c:	e09c      	b.n	801b078 <RegionRU864ChannelAdd+0x168>
    }

    if( id >= RU864_MAX_NB_CHANNELS )
 801af3e:	230d      	movs	r3, #13
 801af40:	18fb      	adds	r3, r7, r3
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	2b07      	cmp	r3, #7
 801af46:	d901      	bls.n	801af4c <RegionRU864ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801af48:	2303      	movs	r3, #3
 801af4a:	e095      	b.n	801b078 <RegionRU864ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	7a1b      	ldrb	r3, [r3, #8]
 801af52:	011b      	lsls	r3, r3, #4
 801af54:	b25b      	sxtb	r3, r3
 801af56:	111b      	asrs	r3, r3, #4
 801af58:	b25b      	sxtb	r3, r3
 801af5a:	2207      	movs	r2, #7
 801af5c:	2100      	movs	r1, #0
 801af5e:	0018      	movs	r0, r3
 801af60:	f7f9 f9fa 	bl	8014358 <RegionCommonValueInRange>
 801af64:	1e03      	subs	r3, r0, #0
 801af66:	d103      	bne.n	801af70 <RegionRU864ChannelAdd+0x60>
    {
        drInvalid = true;
 801af68:	230f      	movs	r3, #15
 801af6a:	18fb      	adds	r3, r7, r3
 801af6c:	2201      	movs	r2, #1
 801af6e:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	7a1b      	ldrb	r3, [r3, #8]
 801af76:	b25b      	sxtb	r3, r3
 801af78:	111b      	asrs	r3, r3, #4
 801af7a:	b25b      	sxtb	r3, r3
 801af7c:	2207      	movs	r2, #7
 801af7e:	2100      	movs	r1, #0
 801af80:	0018      	movs	r0, r3
 801af82:	f7f9 f9e9 	bl	8014358 <RegionCommonValueInRange>
 801af86:	1e03      	subs	r3, r0, #0
 801af88:	d103      	bne.n	801af92 <RegionRU864ChannelAdd+0x82>
    {
        drInvalid = true;
 801af8a:	230f      	movs	r3, #15
 801af8c:	18fb      	adds	r3, r7, r3
 801af8e:	2201      	movs	r2, #1
 801af90:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	7a1b      	ldrb	r3, [r3, #8]
 801af98:	011b      	lsls	r3, r3, #4
 801af9a:	b25b      	sxtb	r3, r3
 801af9c:	111b      	asrs	r3, r3, #4
 801af9e:	b25a      	sxtb	r2, r3
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	7a1b      	ldrb	r3, [r3, #8]
 801afa6:	b25b      	sxtb	r3, r3
 801afa8:	111b      	asrs	r3, r3, #4
 801afaa:	b25b      	sxtb	r3, r3
 801afac:	429a      	cmp	r2, r3
 801afae:	dd03      	ble.n	801afb8 <RegionRU864ChannelAdd+0xa8>
    {
        drInvalid = true;
 801afb0:	230f      	movs	r3, #15
 801afb2:	18fb      	adds	r3, r7, r3
 801afb4:	2201      	movs	r2, #1
 801afb6:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 801afb8:	230e      	movs	r3, #14
 801afba:	18fb      	adds	r3, r7, r3
 801afbc:	781b      	ldrb	r3, [r3, #0]
 801afbe:	2201      	movs	r2, #1
 801afc0:	4053      	eors	r3, r2
 801afc2:	b2db      	uxtb	r3, r3
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d010      	beq.n	801afea <RegionRU864ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	0018      	movs	r0, r3
 801afd0:	f7fe ff2a 	bl	8019e28 <VerifyRfFreq>
 801afd4:	0003      	movs	r3, r0
 801afd6:	001a      	movs	r2, r3
 801afd8:	2301      	movs	r3, #1
 801afda:	4053      	eors	r3, r2
 801afdc:	b2db      	uxtb	r3, r3
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d003      	beq.n	801afea <RegionRU864ChannelAdd+0xda>
        {
            freqInvalid = true;
 801afe2:	230e      	movs	r3, #14
 801afe4:	18fb      	adds	r3, r7, r3
 801afe6:	2201      	movs	r2, #1
 801afe8:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801afea:	230f      	movs	r3, #15
 801afec:	18fb      	adds	r3, r7, r3
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d006      	beq.n	801b002 <RegionRU864ChannelAdd+0xf2>
 801aff4:	230e      	movs	r3, #14
 801aff6:	18fb      	adds	r3, r7, r3
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d001      	beq.n	801b002 <RegionRU864ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801affe:	2306      	movs	r3, #6
 801b000:	e03a      	b.n	801b078 <RegionRU864ChannelAdd+0x168>
    }
    if( drInvalid == true )
 801b002:	230f      	movs	r3, #15
 801b004:	18fb      	adds	r3, r7, r3
 801b006:	781b      	ldrb	r3, [r3, #0]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d001      	beq.n	801b010 <RegionRU864ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801b00c:	2305      	movs	r3, #5
 801b00e:	e033      	b.n	801b078 <RegionRU864ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 801b010:	230e      	movs	r3, #14
 801b012:	18fb      	adds	r3, r7, r3
 801b014:	781b      	ldrb	r3, [r3, #0]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d001      	beq.n	801b01e <RegionRU864ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801b01a:	2304      	movs	r3, #4
 801b01c:	e02c      	b.n	801b078 <RegionRU864ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801b01e:	200d      	movs	r0, #13
 801b020:	0004      	movs	r4, r0
 801b022:	183b      	adds	r3, r7, r0
 801b024:	781a      	ldrb	r2, [r3, #0]
 801b026:	0013      	movs	r3, r2
 801b028:	005b      	lsls	r3, r3, #1
 801b02a:	189b      	adds	r3, r3, r2
 801b02c:	009b      	lsls	r3, r3, #2
 801b02e:	4a14      	ldr	r2, [pc, #80]	; (801b080 <RegionRU864ChannelAdd+0x170>)
 801b030:	1898      	adds	r0, r3, r2
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	220c      	movs	r2, #12
 801b038:	0019      	movs	r1, r3
 801b03a:	f001 fe3b 	bl	801ccb4 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 801b03e:	0020      	movs	r0, r4
 801b040:	183b      	adds	r3, r7, r0
 801b042:	781a      	ldrb	r2, [r3, #0]
 801b044:	490e      	ldr	r1, [pc, #56]	; (801b080 <RegionRU864ChannelAdd+0x170>)
 801b046:	0013      	movs	r3, r2
 801b048:	005b      	lsls	r3, r3, #1
 801b04a:	189b      	adds	r3, r3, r2
 801b04c:	009b      	lsls	r3, r3, #2
 801b04e:	18cb      	adds	r3, r1, r3
 801b050:	3309      	adds	r3, #9
 801b052:	2200      	movs	r2, #0
 801b054:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801b056:	4b0a      	ldr	r3, [pc, #40]	; (801b080 <RegionRU864ChannelAdd+0x170>)
 801b058:	2270      	movs	r2, #112	; 0x70
 801b05a:	5a9b      	ldrh	r3, [r3, r2]
 801b05c:	b21a      	sxth	r2, r3
 801b05e:	183b      	adds	r3, r7, r0
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	2101      	movs	r1, #1
 801b064:	4099      	lsls	r1, r3
 801b066:	000b      	movs	r3, r1
 801b068:	b21b      	sxth	r3, r3
 801b06a:	4313      	orrs	r3, r2
 801b06c:	b21b      	sxth	r3, r3
 801b06e:	b299      	uxth	r1, r3
 801b070:	4b03      	ldr	r3, [pc, #12]	; (801b080 <RegionRU864ChannelAdd+0x170>)
 801b072:	2270      	movs	r2, #112	; 0x70
 801b074:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 801b076:	2300      	movs	r3, #0
}
 801b078:	0018      	movs	r0, r3
 801b07a:	46bd      	mov	sp, r7
 801b07c:	b005      	add	sp, #20
 801b07e:	bd90      	pop	{r4, r7, pc}
 801b080:	20001930 	.word	0x20001930

0801b084 <RegionRU864ChannelsRemove>:

bool RegionRU864ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801b084:	b590      	push	{r4, r7, lr}
 801b086:	b085      	sub	sp, #20
 801b088:	af00      	add	r7, sp, #0
 801b08a:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 801b08c:	210f      	movs	r1, #15
 801b08e:	187b      	adds	r3, r7, r1
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	7812      	ldrb	r2, [r2, #0]
 801b094:	701a      	strb	r2, [r3, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 801b096:	187b      	adds	r3, r7, r1
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	2b01      	cmp	r3, #1
 801b09c:	d801      	bhi.n	801b0a2 <RegionRU864ChannelsRemove+0x1e>
    {
        return false;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	e015      	b.n	801b0ce <RegionRU864ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801b0a2:	240f      	movs	r4, #15
 801b0a4:	193b      	adds	r3, r7, r4
 801b0a6:	781a      	ldrb	r2, [r3, #0]
 801b0a8:	490b      	ldr	r1, [pc, #44]	; (801b0d8 <RegionRU864ChannelsRemove+0x54>)
 801b0aa:	0013      	movs	r3, r2
 801b0ac:	005b      	lsls	r3, r3, #1
 801b0ae:	189b      	adds	r3, r3, r2
 801b0b0:	009b      	lsls	r3, r3, #2
 801b0b2:	18cb      	adds	r3, r1, r3
 801b0b4:	220c      	movs	r2, #12
 801b0b6:	2100      	movs	r1, #0
 801b0b8:	0018      	movs	r0, r3
 801b0ba:	f00a ff25 	bl	8025f08 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, RU864_MAX_NB_CHANNELS );
 801b0be:	193b      	adds	r3, r7, r4
 801b0c0:	7819      	ldrb	r1, [r3, #0]
 801b0c2:	4b06      	ldr	r3, [pc, #24]	; (801b0dc <RegionRU864ChannelsRemove+0x58>)
 801b0c4:	2208      	movs	r2, #8
 801b0c6:	0018      	movs	r0, r3
 801b0c8:	f7f9 f96c 	bl	80143a4 <RegionCommonChanDisable>
 801b0cc:	0003      	movs	r3, r0
}
 801b0ce:	0018      	movs	r0, r3
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	b005      	add	sp, #20
 801b0d4:	bd90      	pop	{r4, r7, pc}
 801b0d6:	46c0      	nop			; (mov r8, r8)
 801b0d8:	20001930 	.word	0x20001930
 801b0dc:	200019a0 	.word	0x200019a0

0801b0e0 <RegionRU864ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionRU864ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b0e0:	b590      	push	{r4, r7, lr}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	0004      	movs	r4, r0
 801b0e8:	0008      	movs	r0, r1
 801b0ea:	0011      	movs	r1, r2
 801b0ec:	1dfb      	adds	r3, r7, #7
 801b0ee:	1c22      	adds	r2, r4, #0
 801b0f0:	701a      	strb	r2, [r3, #0]
 801b0f2:	1dbb      	adds	r3, r7, #6
 801b0f4:	1c02      	adds	r2, r0, #0
 801b0f6:	701a      	strb	r2, [r3, #0]
 801b0f8:	1d7b      	adds	r3, r7, #5
 801b0fa:	1c0a      	adds	r2, r1, #0
 801b0fc:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801b0fe:	1dbb      	adds	r3, r7, #6
 801b100:	781a      	ldrb	r2, [r3, #0]
 801b102:	1d7b      	adds	r3, r7, #5
 801b104:	781b      	ldrb	r3, [r3, #0]
 801b106:	1ad3      	subs	r3, r2, r3
 801b108:	b2da      	uxtb	r2, r3
 801b10a:	210f      	movs	r1, #15
 801b10c:	187b      	adds	r3, r7, r1
 801b10e:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801b110:	187b      	adds	r3, r7, r1
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	2b7f      	cmp	r3, #127	; 0x7f
 801b116:	d903      	bls.n	801b120 <RegionRU864ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 801b118:	230f      	movs	r3, #15
 801b11a:	18fb      	adds	r3, r7, r3
 801b11c:	2200      	movs	r2, #0
 801b11e:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801b120:	230f      	movs	r3, #15
 801b122:	18fb      	adds	r3, r7, r3
 801b124:	781b      	ldrb	r3, [r3, #0]
}
 801b126:	0018      	movs	r0, r3
 801b128:	46bd      	mov	sp, r7
 801b12a:	b005      	add	sp, #20
 801b12c:	bd90      	pop	{r4, r7, pc}

0801b12e <GetNextLowerTxDr>:
 */
static RegionUS915NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801b12e:	b580      	push	{r7, lr}
 801b130:	b084      	sub	sp, #16
 801b132:	af00      	add	r7, sp, #0
 801b134:	0002      	movs	r2, r0
 801b136:	1dfb      	adds	r3, r7, #7
 801b138:	701a      	strb	r2, [r3, #0]
 801b13a:	1dbb      	adds	r3, r7, #6
 801b13c:	1c0a      	adds	r2, r1, #0
 801b13e:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801b140:	230f      	movs	r3, #15
 801b142:	18fb      	adds	r3, r7, r3
 801b144:	2200      	movs	r2, #0
 801b146:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801b148:	1dfa      	adds	r2, r7, #7
 801b14a:	1dbb      	adds	r3, r7, #6
 801b14c:	7812      	ldrb	r2, [r2, #0]
 801b14e:	b252      	sxtb	r2, r2
 801b150:	781b      	ldrb	r3, [r3, #0]
 801b152:	b25b      	sxtb	r3, r3
 801b154:	429a      	cmp	r2, r3
 801b156:	d105      	bne.n	801b164 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 801b158:	230f      	movs	r3, #15
 801b15a:	18fb      	adds	r3, r7, r3
 801b15c:	1dba      	adds	r2, r7, #6
 801b15e:	7812      	ldrb	r2, [r2, #0]
 801b160:	701a      	strb	r2, [r3, #0]
 801b162:	e005      	b.n	801b170 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 801b164:	1dfb      	adds	r3, r7, #7
 801b166:	781a      	ldrb	r2, [r3, #0]
 801b168:	230f      	movs	r3, #15
 801b16a:	18fb      	adds	r3, r7, r3
 801b16c:	3a01      	subs	r2, #1
 801b16e:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 801b170:	230f      	movs	r3, #15
 801b172:	18fb      	adds	r3, r7, r3
 801b174:	781b      	ldrb	r3, [r3, #0]
 801b176:	b25b      	sxtb	r3, r3
}
 801b178:	0018      	movs	r0, r3
 801b17a:	46bd      	mov	sp, r7
 801b17c:	b004      	add	sp, #16
 801b17e:	bd80      	pop	{r7, pc}

0801b180 <FindAvailable125kHzChannels>:
 * \param [OUT] availableChannels Number of available 125 kHz channels.
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint8_t* findAvailableChannelsIndex, uint16_t channelMaskRemaining, uint8_t* availableChannels )
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b086      	sub	sp, #24
 801b184:	af00      	add	r7, sp, #0
 801b186:	60f8      	str	r0, [r7, #12]
 801b188:	607a      	str	r2, [r7, #4]
 801b18a:	230a      	movs	r3, #10
 801b18c:	18fb      	adds	r3, r7, r3
 801b18e:	1c0a      	adds	r2, r1, #0
 801b190:	801a      	strh	r2, [r3, #0]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d002      	beq.n	801b19e <FindAvailable125kHzChannels+0x1e>
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d101      	bne.n	801b1a2 <FindAvailable125kHzChannels+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801b19e:	2303      	movs	r3, #3
 801b1a0:	e02d      	b.n	801b1fe <FindAvailable125kHzChannels+0x7e>
    }

    // Initialize counter
    *availableChannels = 0;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	2200      	movs	r2, #0
 801b1a6:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801b1a8:	2317      	movs	r3, #23
 801b1aa:	18fb      	adds	r3, r7, r3
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	701a      	strb	r2, [r3, #0]
 801b1b0:	e01f      	b.n	801b1f2 <FindAvailable125kHzChannels+0x72>
    {
        // Find available channels
        if( ( channelMaskRemaining & ( 1 << i ) ) != 0 )
 801b1b2:	230a      	movs	r3, #10
 801b1b4:	18fb      	adds	r3, r7, r3
 801b1b6:	881a      	ldrh	r2, [r3, #0]
 801b1b8:	2317      	movs	r3, #23
 801b1ba:	18fb      	adds	r3, r7, r3
 801b1bc:	781b      	ldrb	r3, [r3, #0]
 801b1be:	411a      	asrs	r2, r3
 801b1c0:	0013      	movs	r3, r2
 801b1c2:	2201      	movs	r2, #1
 801b1c4:	4013      	ands	r3, r2
 801b1c6:	d00e      	beq.n	801b1e6 <FindAvailable125kHzChannels+0x66>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	001a      	movs	r2, r3
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	189b      	adds	r3, r3, r2
 801b1d2:	2217      	movs	r2, #23
 801b1d4:	18ba      	adds	r2, r7, r2
 801b1d6:	7812      	ldrb	r2, [r2, #0]
 801b1d8:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	781b      	ldrb	r3, [r3, #0]
 801b1de:	3301      	adds	r3, #1
 801b1e0:	b2da      	uxtb	r2, r3
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801b1e6:	2117      	movs	r1, #23
 801b1e8:	187b      	adds	r3, r7, r1
 801b1ea:	781a      	ldrb	r2, [r3, #0]
 801b1ec:	187b      	adds	r3, r7, r1
 801b1ee:	3201      	adds	r2, #1
 801b1f0:	701a      	strb	r2, [r3, #0]
 801b1f2:	2317      	movs	r3, #23
 801b1f4:	18fb      	adds	r3, r7, r3
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	2b07      	cmp	r3, #7
 801b1fa:	d9da      	bls.n	801b1b2 <FindAvailable125kHzChannels+0x32>
        }
    }

    return LORAMAC_STATUS_OK;
 801b1fc:	2300      	movs	r3, #0
}
 801b1fe:	0018      	movs	r0, r3
 801b200:	46bd      	mov	sp, r7
 801b202:	b006      	add	sp, #24
 801b204:	bd80      	pop	{r7, pc}
	...

0801b208 <ComputeNext125kHzJoinChannel>:
 * \param [OUT] newChannelIndex Index of available channel.
 *
 * \retval Status
 */
static LoRaMacStatus_t ComputeNext125kHzJoinChannel( uint8_t* newChannelIndex )
{
 801b208:	b590      	push	{r4, r7, lr}
 801b20a:	b087      	sub	sp, #28
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
    uint8_t currentChannelsMaskRemainingIndex;
    uint16_t channelMaskRemaining;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801b210:	230c      	movs	r3, #12
 801b212:	18fb      	adds	r3, r7, r3
 801b214:	0018      	movs	r0, r3
 801b216:	2308      	movs	r3, #8
 801b218:	001a      	movs	r2, r3
 801b21a:	2100      	movs	r1, #0
 801b21c:	f00a fe74 	bl	8025f08 <memset>
    uint8_t availableChannels = 0;
 801b220:	230b      	movs	r3, #11
 801b222:	18fb      	adds	r3, r7, r3
 801b224:	2200      	movs	r2, #0
 801b226:	701a      	strb	r2, [r3, #0]
    uint8_t startIndex = NvmCtx.JoinChannelGroupsCurrentIndex;
 801b228:	2315      	movs	r3, #21
 801b22a:	18fb      	adds	r3, r7, r3
 801b22c:	4946      	ldr	r1, [pc, #280]	; (801b348 <ComputeNext125kHzJoinChannel+0x140>)
 801b22e:	22e5      	movs	r2, #229	; 0xe5
 801b230:	0092      	lsls	r2, r2, #2
 801b232:	5c8a      	ldrb	r2, [r1, r2]
 801b234:	701a      	strb	r2, [r3, #0]

    // Null pointer check
    if( newChannelIndex == NULL )
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d101      	bne.n	801b240 <ComputeNext125kHzJoinChannel+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801b23c:	2303      	movs	r3, #3
 801b23e:	e07f      	b.n	801b340 <ComputeNext125kHzJoinChannel+0x138>
    }

    do {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelsMaskRemainingIndex = (uint8_t) startIndex / 2;
 801b240:	2314      	movs	r3, #20
 801b242:	18fb      	adds	r3, r7, r3
 801b244:	2115      	movs	r1, #21
 801b246:	187a      	adds	r2, r7, r1
 801b248:	7812      	ldrb	r2, [r2, #0]
 801b24a:	0852      	lsrs	r2, r2, #1
 801b24c:	701a      	strb	r2, [r3, #0]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801b24e:	187b      	adds	r3, r7, r1
 801b250:	781b      	ldrb	r3, [r3, #0]
 801b252:	2201      	movs	r2, #1
 801b254:	4013      	ands	r3, r2
 801b256:	b2db      	uxtb	r3, r3
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d10f      	bne.n	801b27c <ComputeNext125kHzJoinChannel+0x74>
        {
            channelMaskRemaining = ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] & 0x00FF );
 801b25c:	2314      	movs	r3, #20
 801b25e:	18fb      	adds	r3, r7, r3
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	4a39      	ldr	r2, [pc, #228]	; (801b348 <ComputeNext125kHzJoinChannel+0x140>)
 801b264:	33bd      	adds	r3, #189	; 0xbd
 801b266:	33ff      	adds	r3, #255	; 0xff
 801b268:	005b      	lsls	r3, r3, #1
 801b26a:	18d3      	adds	r3, r2, r3
 801b26c:	3304      	adds	r3, #4
 801b26e:	881a      	ldrh	r2, [r3, #0]
 801b270:	2316      	movs	r3, #22
 801b272:	18fb      	adds	r3, r7, r3
 801b274:	21ff      	movs	r1, #255	; 0xff
 801b276:	400a      	ands	r2, r1
 801b278:	801a      	strh	r2, [r3, #0]
 801b27a:	e00d      	b.n	801b298 <ComputeNext125kHzJoinChannel+0x90>
        }
        else
        {
            channelMaskRemaining = ( ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] >> 8 ) & 0x00FF );
 801b27c:	2314      	movs	r3, #20
 801b27e:	18fb      	adds	r3, r7, r3
 801b280:	781b      	ldrb	r3, [r3, #0]
 801b282:	4a31      	ldr	r2, [pc, #196]	; (801b348 <ComputeNext125kHzJoinChannel+0x140>)
 801b284:	33bd      	adds	r3, #189	; 0xbd
 801b286:	33ff      	adds	r3, #255	; 0xff
 801b288:	005b      	lsls	r3, r3, #1
 801b28a:	18d3      	adds	r3, r2, r3
 801b28c:	3304      	adds	r3, #4
 801b28e:	881a      	ldrh	r2, [r3, #0]
 801b290:	2316      	movs	r3, #22
 801b292:	18fb      	adds	r3, r7, r3
 801b294:	0a12      	lsrs	r2, r2, #8
 801b296:	801a      	strh	r2, [r3, #0]
        }


        if( FindAvailable125kHzChannels( findAvailableChannelsIndex, channelMaskRemaining, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b298:	230b      	movs	r3, #11
 801b29a:	18fa      	adds	r2, r7, r3
 801b29c:	2316      	movs	r3, #22
 801b29e:	18fb      	adds	r3, r7, r3
 801b2a0:	8819      	ldrh	r1, [r3, #0]
 801b2a2:	230c      	movs	r3, #12
 801b2a4:	18fb      	adds	r3, r7, r3
 801b2a6:	0018      	movs	r0, r3
 801b2a8:	f7ff ff6a 	bl	801b180 <FindAvailable125kHzChannels>
 801b2ac:	0003      	movs	r3, r0
 801b2ae:	2b03      	cmp	r3, #3
 801b2b0:	d101      	bne.n	801b2b6 <ComputeNext125kHzJoinChannel+0xae>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801b2b2:	2303      	movs	r3, #3
 801b2b4:	e044      	b.n	801b340 <ComputeNext125kHzJoinChannel+0x138>
        }

        if ( availableChannels > 0 )
 801b2b6:	230b      	movs	r3, #11
 801b2b8:	18fb      	adds	r3, r7, r3
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d014      	beq.n	801b2ea <ComputeNext125kHzJoinChannel+0xe2>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801b2c0:	2315      	movs	r3, #21
 801b2c2:	18fb      	adds	r3, r7, r3
 801b2c4:	781b      	ldrb	r3, [r3, #0]
 801b2c6:	00db      	lsls	r3, r3, #3
 801b2c8:	b2dc      	uxtb	r4, r3
 801b2ca:	230b      	movs	r3, #11
 801b2cc:	18fb      	adds	r3, r7, r3
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	3b01      	subs	r3, #1
 801b2d2:	0019      	movs	r1, r3
 801b2d4:	2000      	movs	r0, #0
 801b2d6:	f001 fcd7 	bl	801cc88 <randr>
 801b2da:	0002      	movs	r2, r0
 801b2dc:	230c      	movs	r3, #12
 801b2de:	18fb      	adds	r3, r7, r3
 801b2e0:	5c9b      	ldrb	r3, [r3, r2]
 801b2e2:	18e3      	adds	r3, r4, r3
 801b2e4:	b2da      	uxtb	r2, r3
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 801b2ea:	2115      	movs	r1, #21
 801b2ec:	187b      	adds	r3, r7, r1
 801b2ee:	781a      	ldrb	r2, [r3, #0]
 801b2f0:	187b      	adds	r3, r7, r1
 801b2f2:	3201      	adds	r2, #1
 801b2f4:	701a      	strb	r2, [r3, #0]
        if ( startIndex > 7 )
 801b2f6:	187b      	adds	r3, r7, r1
 801b2f8:	781b      	ldrb	r3, [r3, #0]
 801b2fa:	2b07      	cmp	r3, #7
 801b2fc:	d903      	bls.n	801b306 <ComputeNext125kHzJoinChannel+0xfe>
        {
            startIndex = 0;
 801b2fe:	2315      	movs	r3, #21
 801b300:	18fb      	adds	r3, r7, r3
 801b302:	2200      	movs	r2, #0
 801b304:	701a      	strb	r2, [r3, #0]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != NvmCtx.JoinChannelGroupsCurrentIndex ) );
 801b306:	230b      	movs	r3, #11
 801b308:	18fb      	adds	r3, r7, r3
 801b30a:	781b      	ldrb	r3, [r3, #0]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d108      	bne.n	801b322 <ComputeNext125kHzJoinChannel+0x11a>
 801b310:	4a0d      	ldr	r2, [pc, #52]	; (801b348 <ComputeNext125kHzJoinChannel+0x140>)
 801b312:	23e5      	movs	r3, #229	; 0xe5
 801b314:	009b      	lsls	r3, r3, #2
 801b316:	5cd3      	ldrb	r3, [r2, r3]
 801b318:	2215      	movs	r2, #21
 801b31a:	18ba      	adds	r2, r7, r2
 801b31c:	7812      	ldrb	r2, [r2, #0]
 801b31e:	429a      	cmp	r2, r3
 801b320:	d18e      	bne.n	801b240 <ComputeNext125kHzJoinChannel+0x38>

    if ( availableChannels > 0 )
 801b322:	230b      	movs	r3, #11
 801b324:	18fb      	adds	r3, r7, r3
 801b326:	781b      	ldrb	r3, [r3, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d008      	beq.n	801b33e <ComputeNext125kHzJoinChannel+0x136>
    {
        NvmCtx.JoinChannelGroupsCurrentIndex = startIndex;
 801b32c:	4a06      	ldr	r2, [pc, #24]	; (801b348 <ComputeNext125kHzJoinChannel+0x140>)
 801b32e:	2315      	movs	r3, #21
 801b330:	18f9      	adds	r1, r7, r3
 801b332:	23e5      	movs	r3, #229	; 0xe5
 801b334:	009b      	lsls	r3, r3, #2
 801b336:	7809      	ldrb	r1, [r1, #0]
 801b338:	54d1      	strb	r1, [r2, r3]
        return LORAMAC_STATUS_OK;
 801b33a:	2300      	movs	r3, #0
 801b33c:	e000      	b.n	801b340 <ComputeNext125kHzJoinChannel+0x138>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b33e:	2303      	movs	r3, #3
}
 801b340:	0018      	movs	r0, r3
 801b342:	46bd      	mov	sp, r7
 801b344:	b007      	add	sp, #28
 801b346:	bd90      	pop	{r4, r7, pc}
 801b348:	200019a4 	.word	0x200019a4

0801b34c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b082      	sub	sp, #8
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
    switch( BandwidthsUS915[drIndex] )
 801b354:	4b09      	ldr	r3, [pc, #36]	; (801b37c <GetBandwidth+0x30>)
 801b356:	687a      	ldr	r2, [r7, #4]
 801b358:	0092      	lsls	r2, r2, #2
 801b35a:	58d3      	ldr	r3, [r2, r3]
 801b35c:	4a08      	ldr	r2, [pc, #32]	; (801b380 <GetBandwidth+0x34>)
 801b35e:	4293      	cmp	r3, r2
 801b360:	d004      	beq.n	801b36c <GetBandwidth+0x20>
 801b362:	4a08      	ldr	r2, [pc, #32]	; (801b384 <GetBandwidth+0x38>)
 801b364:	4293      	cmp	r3, r2
 801b366:	d003      	beq.n	801b370 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 801b368:	2300      	movs	r3, #0
 801b36a:	e002      	b.n	801b372 <GetBandwidth+0x26>
        case 250000:
            return 1;
 801b36c:	2301      	movs	r3, #1
 801b36e:	e000      	b.n	801b372 <GetBandwidth+0x26>
        case 500000:
            return 2;
 801b370:	2302      	movs	r3, #2
    }
}
 801b372:	0018      	movs	r0, r3
 801b374:	46bd      	mov	sp, r7
 801b376:	b002      	add	sp, #8
 801b378:	bd80      	pop	{r7, pc}
 801b37a:	46c0      	nop			; (mov r8, r8)
 801b37c:	08029290 	.word	0x08029290
 801b380:	0003d090 	.word	0x0003d090
 801b384:	0007a120 	.word	0x0007a120

0801b388 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801b388:	b590      	push	{r4, r7, lr}
 801b38a:	b085      	sub	sp, #20
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	0004      	movs	r4, r0
 801b390:	0008      	movs	r0, r1
 801b392:	0011      	movs	r1, r2
 801b394:	603b      	str	r3, [r7, #0]
 801b396:	1dfb      	adds	r3, r7, #7
 801b398:	1c22      	adds	r2, r4, #0
 801b39a:	701a      	strb	r2, [r3, #0]
 801b39c:	1dbb      	adds	r3, r7, #6
 801b39e:	1c02      	adds	r2, r0, #0
 801b3a0:	701a      	strb	r2, [r3, #0]
 801b3a2:	1d7b      	adds	r3, r7, #5
 801b3a4:	1c0a      	adds	r2, r1, #0
 801b3a6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 801b3a8:	210f      	movs	r1, #15
 801b3aa:	187b      	adds	r3, r7, r1
 801b3ac:	1dfa      	adds	r2, r7, #7
 801b3ae:	7812      	ldrb	r2, [r2, #0]
 801b3b0:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801b3b2:	187a      	adds	r2, r7, r1
 801b3b4:	1dbb      	adds	r3, r7, #6
 801b3b6:	1df9      	adds	r1, r7, #7
 801b3b8:	780c      	ldrb	r4, [r1, #0]
 801b3ba:	781b      	ldrb	r3, [r3, #0]
 801b3bc:	b258      	sxtb	r0, r3
 801b3be:	b261      	sxtb	r1, r4
 801b3c0:	4288      	cmp	r0, r1
 801b3c2:	da00      	bge.n	801b3c6 <LimitTxPower+0x3e>
 801b3c4:	1c23      	adds	r3, r4, #0
 801b3c6:	7013      	strb	r3, [r2, #0]

    if( datarate == DR_4 )
 801b3c8:	1d7b      	adds	r3, r7, #5
 801b3ca:	781b      	ldrb	r3, [r3, #0]
 801b3cc:	b25b      	sxtb	r3, r3
 801b3ce:	2b04      	cmp	r3, #4
 801b3d0:	d109      	bne.n	801b3e6 <LimitTxPower+0x5e>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801b3d2:	230f      	movs	r3, #15
 801b3d4:	18fa      	adds	r2, r7, r3
 801b3d6:	1dfb      	adds	r3, r7, #7
 801b3d8:	781b      	ldrb	r3, [r3, #0]
 801b3da:	b259      	sxtb	r1, r3
 801b3dc:	2902      	cmp	r1, #2
 801b3de:	da00      	bge.n	801b3e2 <LimitTxPower+0x5a>
 801b3e0:	2302      	movs	r3, #2
 801b3e2:	7013      	strb	r3, [r2, #0]
 801b3e4:	e011      	b.n	801b40a <LimitTxPower+0x82>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801b3e6:	683b      	ldr	r3, [r7, #0]
 801b3e8:	2204      	movs	r2, #4
 801b3ea:	2100      	movs	r1, #0
 801b3ec:	0018      	movs	r0, r3
 801b3ee:	f7f9 f81b 	bl	8014428 <RegionCommonCountChannels>
 801b3f2:	0003      	movs	r3, r0
 801b3f4:	2b31      	cmp	r3, #49	; 0x31
 801b3f6:	d808      	bhi.n	801b40a <LimitTxPower+0x82>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801b3f8:	230f      	movs	r3, #15
 801b3fa:	18fa      	adds	r2, r7, r3
 801b3fc:	1dfb      	adds	r3, r7, #7
 801b3fe:	781b      	ldrb	r3, [r3, #0]
 801b400:	b259      	sxtb	r1, r3
 801b402:	2905      	cmp	r1, #5
 801b404:	da00      	bge.n	801b408 <LimitTxPower+0x80>
 801b406:	2305      	movs	r3, #5
 801b408:	7013      	strb	r3, [r2, #0]
        }
    }
    return txPowerResult;
 801b40a:	230f      	movs	r3, #15
 801b40c:	18fb      	adds	r3, r7, r3
 801b40e:	781b      	ldrb	r3, [r3, #0]
 801b410:	b25b      	sxtb	r3, r3
}
 801b412:	0018      	movs	r0, r3
 801b414:	46bd      	mov	sp, r7
 801b416:	b005      	add	sp, #20
 801b418:	bd90      	pop	{r4, r7, pc}
	...

0801b41c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b082      	sub	sp, #8
 801b420:	af00      	add	r7, sp, #0
 801b422:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801b424:	4b18      	ldr	r3, [pc, #96]	; (801b488 <VerifyRfFreq+0x6c>)
 801b426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b428:	687a      	ldr	r2, [r7, #4]
 801b42a:	0010      	movs	r0, r2
 801b42c:	4798      	blx	r3
 801b42e:	0003      	movs	r3, r0
 801b430:	001a      	movs	r2, r3
 801b432:	2301      	movs	r3, #1
 801b434:	4053      	eors	r3, r2
 801b436:	b2db      	uxtb	r3, r3
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d001      	beq.n	801b440 <VerifyRfFreq+0x24>
    {
        return false;
 801b43c:	2300      	movs	r3, #0
 801b43e:	e01e      	b.n	801b47e <VerifyRfFreq+0x62>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	4a12      	ldr	r2, [pc, #72]	; (801b48c <VerifyRfFreq+0x70>)
 801b444:	4293      	cmp	r3, r2
 801b446:	d90d      	bls.n	801b464 <VerifyRfFreq+0x48>
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	4a11      	ldr	r2, [pc, #68]	; (801b490 <VerifyRfFreq+0x74>)
 801b44c:	4293      	cmp	r3, r2
 801b44e:	d809      	bhi.n	801b464 <VerifyRfFreq+0x48>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	4a10      	ldr	r2, [pc, #64]	; (801b494 <VerifyRfFreq+0x78>)
 801b454:	4694      	mov	ip, r2
 801b456:	4463      	add	r3, ip
 801b458:	490f      	ldr	r1, [pc, #60]	; (801b498 <VerifyRfFreq+0x7c>)
 801b45a:	0018      	movs	r0, r3
 801b45c:	f7e4 fee2 	bl	8000224 <__aeabi_uidivmod>
 801b460:	1e0b      	subs	r3, r1, #0
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801b462:	d001      	beq.n	801b468 <VerifyRfFreq+0x4c>
    {
        return false;
 801b464:	2300      	movs	r3, #0
 801b466:	e00a      	b.n	801b47e <VerifyRfFreq+0x62>
    }

    // Test for frequency range - take RX and TX freqencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	4a0c      	ldr	r2, [pc, #48]	; (801b49c <VerifyRfFreq+0x80>)
 801b46c:	4293      	cmp	r3, r2
 801b46e:	d903      	bls.n	801b478 <VerifyRfFreq+0x5c>
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	4a07      	ldr	r2, [pc, #28]	; (801b490 <VerifyRfFreq+0x74>)
 801b474:	4293      	cmp	r3, r2
 801b476:	d901      	bls.n	801b47c <VerifyRfFreq+0x60>
    {
        return false;
 801b478:	2300      	movs	r3, #0
 801b47a:	e000      	b.n	801b47e <VerifyRfFreq+0x62>
    }
    return true;
 801b47c:	2301      	movs	r3, #1
}
 801b47e:	0018      	movs	r0, r3
 801b480:	46bd      	mov	sp, r7
 801b482:	b002      	add	sp, #8
 801b484:	bd80      	pop	{r7, pc}
 801b486:	46c0      	nop			; (mov r8, r8)
 801b488:	080293d8 	.word	0x080293d8
 801b48c:	3708709f 	.word	0x3708709f
 801b490:	374886e0 	.word	0x374886e0
 801b494:	c8f78f60 	.word	0xc8f78f60
 801b498:	000927c0 	.word	0x000927c0
 801b49c:	35c8015f 	.word	0x35c8015f

0801b4a0 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 801b4a0:	b5b0      	push	{r4, r5, r7, lr}
 801b4a2:	b086      	sub	sp, #24
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	60b9      	str	r1, [r7, #8]
 801b4a8:	607a      	str	r2, [r7, #4]
 801b4aa:	603b      	str	r3, [r7, #0]
 801b4ac:	230f      	movs	r3, #15
 801b4ae:	18fb      	adds	r3, r7, r3
 801b4b0:	1c02      	adds	r2, r0, #0
 801b4b2:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801b4b4:	2317      	movs	r3, #23
 801b4b6:	18fb      	adds	r3, r7, r3
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 801b4bc:	2316      	movs	r3, #22
 801b4be:	18fb      	adds	r3, r7, r3
 801b4c0:	2200      	movs	r2, #0
 801b4c2:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++ )
 801b4c4:	2315      	movs	r3, #21
 801b4c6:	18fb      	adds	r3, r7, r3
 801b4c8:	2200      	movs	r2, #0
 801b4ca:	701a      	strb	r2, [r3, #0]
 801b4cc:	2314      	movs	r3, #20
 801b4ce:	18fb      	adds	r3, r7, r3
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	701a      	strb	r2, [r3, #0]
 801b4d4:	e0a0      	b.n	801b618 <CountNbOfEnabledChannels+0x178>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801b4d6:	2313      	movs	r3, #19
 801b4d8:	18fb      	adds	r3, r7, r3
 801b4da:	2200      	movs	r2, #0
 801b4dc:	701a      	strb	r2, [r3, #0]
 801b4de:	e089      	b.n	801b5f4 <CountNbOfEnabledChannels+0x154>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 801b4e0:	2314      	movs	r3, #20
 801b4e2:	18fb      	adds	r3, r7, r3
 801b4e4:	781b      	ldrb	r3, [r3, #0]
 801b4e6:	005b      	lsls	r3, r3, #1
 801b4e8:	68ba      	ldr	r2, [r7, #8]
 801b4ea:	18d3      	adds	r3, r2, r3
 801b4ec:	881b      	ldrh	r3, [r3, #0]
 801b4ee:	001a      	movs	r2, r3
 801b4f0:	2313      	movs	r3, #19
 801b4f2:	18fb      	adds	r3, r7, r3
 801b4f4:	781b      	ldrb	r3, [r3, #0]
 801b4f6:	411a      	asrs	r2, r3
 801b4f8:	0013      	movs	r3, r2
 801b4fa:	2201      	movs	r2, #1
 801b4fc:	4013      	ands	r3, r2
 801b4fe:	d073      	beq.n	801b5e8 <CountNbOfEnabledChannels+0x148>
            {
                if( channels[i + j].Frequency == 0 )
 801b500:	2315      	movs	r3, #21
 801b502:	18fb      	adds	r3, r7, r3
 801b504:	781a      	ldrb	r2, [r3, #0]
 801b506:	2313      	movs	r3, #19
 801b508:	18fb      	adds	r3, r7, r3
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	18d3      	adds	r3, r2, r3
 801b50e:	001a      	movs	r2, r3
 801b510:	0013      	movs	r3, r2
 801b512:	005b      	lsls	r3, r3, #1
 801b514:	189b      	adds	r3, r3, r2
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	001a      	movs	r2, r3
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	189b      	adds	r3, r3, r2
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d05e      	beq.n	801b5e2 <CountNbOfEnabledChannels+0x142>
                { // Check if the channel is enabled
                    continue;
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801b524:	230f      	movs	r3, #15
 801b526:	18fb      	adds	r3, r7, r3
 801b528:	2000      	movs	r0, #0
 801b52a:	5618      	ldrsb	r0, [r3, r0]
 801b52c:	2415      	movs	r4, #21
 801b52e:	193b      	adds	r3, r7, r4
 801b530:	781a      	ldrb	r2, [r3, #0]
 801b532:	2513      	movs	r5, #19
 801b534:	197b      	adds	r3, r7, r5
 801b536:	781b      	ldrb	r3, [r3, #0]
 801b538:	18d3      	adds	r3, r2, r3
 801b53a:	001a      	movs	r2, r3
 801b53c:	0013      	movs	r3, r2
 801b53e:	005b      	lsls	r3, r3, #1
 801b540:	189b      	adds	r3, r3, r2
 801b542:	009b      	lsls	r3, r3, #2
 801b544:	001a      	movs	r2, r3
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	189b      	adds	r3, r3, r2
 801b54a:	7a1b      	ldrb	r3, [r3, #8]
 801b54c:	011b      	lsls	r3, r3, #4
 801b54e:	b25b      	sxtb	r3, r3
 801b550:	111b      	asrs	r3, r3, #4
 801b552:	b25b      	sxtb	r3, r3
 801b554:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 801b556:	193b      	adds	r3, r7, r4
 801b558:	781a      	ldrb	r2, [r3, #0]
 801b55a:	197b      	adds	r3, r7, r5
 801b55c:	781b      	ldrb	r3, [r3, #0]
 801b55e:	18d3      	adds	r3, r2, r3
 801b560:	001a      	movs	r2, r3
 801b562:	0013      	movs	r3, r2
 801b564:	005b      	lsls	r3, r3, #1
 801b566:	189b      	adds	r3, r3, r2
 801b568:	009b      	lsls	r3, r3, #2
 801b56a:	001a      	movs	r2, r3
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	189b      	adds	r3, r3, r2
 801b570:	7a1b      	ldrb	r3, [r3, #8]
 801b572:	b25b      	sxtb	r3, r3
 801b574:	111b      	asrs	r3, r3, #4
 801b576:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801b578:	001a      	movs	r2, r3
 801b57a:	f7f8 feed 	bl	8014358 <RegionCommonValueInRange>
 801b57e:	1e03      	subs	r3, r0, #0
 801b580:	d031      	beq.n	801b5e6 <CountNbOfEnabledChannels+0x146>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 801b582:	2315      	movs	r3, #21
 801b584:	18fb      	adds	r3, r7, r3
 801b586:	781a      	ldrb	r2, [r3, #0]
 801b588:	2313      	movs	r3, #19
 801b58a:	18fb      	adds	r3, r7, r3
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	18d3      	adds	r3, r2, r3
 801b590:	001a      	movs	r2, r3
 801b592:	0013      	movs	r3, r2
 801b594:	005b      	lsls	r3, r3, #1
 801b596:	189b      	adds	r3, r3, r2
 801b598:	009b      	lsls	r3, r3, #2
 801b59a:	001a      	movs	r2, r3
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	189b      	adds	r3, r3, r2
 801b5a0:	7a5b      	ldrb	r3, [r3, #9]
 801b5a2:	011b      	lsls	r3, r3, #4
 801b5a4:	683a      	ldr	r2, [r7, #0]
 801b5a6:	18d3      	adds	r3, r2, r3
 801b5a8:	68db      	ldr	r3, [r3, #12]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d006      	beq.n	801b5bc <CountNbOfEnabledChannels+0x11c>
                { // Check if the band is available for transmission
                    delayTransmission++;
 801b5ae:	2116      	movs	r1, #22
 801b5b0:	187b      	adds	r3, r7, r1
 801b5b2:	781a      	ldrb	r2, [r3, #0]
 801b5b4:	187b      	adds	r3, r7, r1
 801b5b6:	3201      	adds	r2, #1
 801b5b8:	701a      	strb	r2, [r3, #0]
                    continue;
 801b5ba:	e015      	b.n	801b5e8 <CountNbOfEnabledChannels+0x148>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 801b5bc:	2217      	movs	r2, #23
 801b5be:	18bb      	adds	r3, r7, r2
 801b5c0:	781b      	ldrb	r3, [r3, #0]
 801b5c2:	18ba      	adds	r2, r7, r2
 801b5c4:	1c59      	adds	r1, r3, #1
 801b5c6:	7011      	strb	r1, [r2, #0]
 801b5c8:	001a      	movs	r2, r3
 801b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5cc:	189b      	adds	r3, r3, r2
 801b5ce:	2215      	movs	r2, #21
 801b5d0:	18b9      	adds	r1, r7, r2
 801b5d2:	2213      	movs	r2, #19
 801b5d4:	18ba      	adds	r2, r7, r2
 801b5d6:	7809      	ldrb	r1, [r1, #0]
 801b5d8:	7812      	ldrb	r2, [r2, #0]
 801b5da:	188a      	adds	r2, r1, r2
 801b5dc:	b2d2      	uxtb	r2, r2
 801b5de:	701a      	strb	r2, [r3, #0]
 801b5e0:	e002      	b.n	801b5e8 <CountNbOfEnabledChannels+0x148>
                    continue;
 801b5e2:	46c0      	nop			; (mov r8, r8)
 801b5e4:	e000      	b.n	801b5e8 <CountNbOfEnabledChannels+0x148>
                    continue;
 801b5e6:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801b5e8:	2113      	movs	r1, #19
 801b5ea:	187b      	adds	r3, r7, r1
 801b5ec:	781a      	ldrb	r2, [r3, #0]
 801b5ee:	187b      	adds	r3, r7, r1
 801b5f0:	3201      	adds	r2, #1
 801b5f2:	701a      	strb	r2, [r3, #0]
 801b5f4:	2313      	movs	r3, #19
 801b5f6:	18fb      	adds	r3, r7, r3
 801b5f8:	781b      	ldrb	r3, [r3, #0]
 801b5fa:	2b0f      	cmp	r3, #15
 801b5fc:	d800      	bhi.n	801b600 <CountNbOfEnabledChannels+0x160>
 801b5fe:	e76f      	b.n	801b4e0 <CountNbOfEnabledChannels+0x40>
    for( uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++ )
 801b600:	2215      	movs	r2, #21
 801b602:	18bb      	adds	r3, r7, r2
 801b604:	18ba      	adds	r2, r7, r2
 801b606:	7812      	ldrb	r2, [r2, #0]
 801b608:	3210      	adds	r2, #16
 801b60a:	701a      	strb	r2, [r3, #0]
 801b60c:	2114      	movs	r1, #20
 801b60e:	187b      	adds	r3, r7, r1
 801b610:	781a      	ldrb	r2, [r3, #0]
 801b612:	187b      	adds	r3, r7, r1
 801b614:	3201      	adds	r2, #1
 801b616:	701a      	strb	r2, [r3, #0]
 801b618:	2315      	movs	r3, #21
 801b61a:	18fb      	adds	r3, r7, r3
 801b61c:	781b      	ldrb	r3, [r3, #0]
 801b61e:	2b47      	cmp	r3, #71	; 0x47
 801b620:	d800      	bhi.n	801b624 <CountNbOfEnabledChannels+0x184>
 801b622:	e758      	b.n	801b4d6 <CountNbOfEnabledChannels+0x36>
            }
        }
    }

    *delayTx = delayTransmission;
 801b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b626:	2216      	movs	r2, #22
 801b628:	18ba      	adds	r2, r7, r2
 801b62a:	7812      	ldrb	r2, [r2, #0]
 801b62c:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801b62e:	2317      	movs	r3, #23
 801b630:	18fb      	adds	r3, r7, r3
 801b632:	781b      	ldrb	r3, [r3, #0]
}
 801b634:	0018      	movs	r0, r3
 801b636:	46bd      	mov	sp, r7
 801b638:	b006      	add	sp, #24
 801b63a:	bdb0      	pop	{r4, r5, r7, pc}

0801b63c <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	b084      	sub	sp, #16
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801b644:	2308      	movs	r3, #8
 801b646:	18fb      	adds	r3, r7, r3
 801b648:	2200      	movs	r2, #0
 801b64a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	781b      	ldrb	r3, [r3, #0]
 801b650:	2b34      	cmp	r3, #52	; 0x34
 801b652:	d900      	bls.n	801b656 <RegionUS915GetPhyParam+0x1a>
 801b654:	e0d7      	b.n	801b806 <RegionUS915GetPhyParam+0x1ca>
 801b656:	009a      	lsls	r2, r3, #2
 801b658:	4b72      	ldr	r3, [pc, #456]	; (801b824 <RegionUS915GetPhyParam+0x1e8>)
 801b65a:	18d3      	adds	r3, r2, r3
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801b660:	2308      	movs	r3, #8
 801b662:	18fb      	adds	r3, r7, r3
 801b664:	2208      	movs	r2, #8
 801b666:	601a      	str	r2, [r3, #0]
            break;
 801b668:	e0ce      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801b66a:	2308      	movs	r3, #8
 801b66c:	18fb      	adds	r3, r7, r3
 801b66e:	2200      	movs	r2, #0
 801b670:	601a      	str	r2, [r3, #0]
            break;
 801b672:	e0c9      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801b674:	2308      	movs	r3, #8
 801b676:	18fb      	adds	r3, r7, r3
 801b678:	2200      	movs	r2, #0
 801b67a:	601a      	str	r2, [r3, #0]
            break;
 801b67c:	e0c4      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, US915_TX_MIN_DATARATE );
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	785b      	ldrb	r3, [r3, #1]
 801b682:	b25b      	sxtb	r3, r3
 801b684:	2100      	movs	r1, #0
 801b686:	0018      	movs	r0, r3
 801b688:	f7ff fd51 	bl	801b12e <GetNextLowerTxDr>
 801b68c:	0003      	movs	r3, r0
 801b68e:	001a      	movs	r2, r3
 801b690:	2308      	movs	r3, #8
 801b692:	18fb      	adds	r3, r7, r3
 801b694:	601a      	str	r2, [r3, #0]
            break;
 801b696:	e0b7      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801b698:	2308      	movs	r3, #8
 801b69a:	18fb      	adds	r3, r7, r3
 801b69c:	2200      	movs	r2, #0
 801b69e:	601a      	str	r2, [r3, #0]
            break;
 801b6a0:	e0b2      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801b6a2:	2308      	movs	r3, #8
 801b6a4:	18fb      	adds	r3, r7, r3
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	601a      	str	r2, [r3, #0]
            break;
 801b6aa:	e0ad      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = US915_ADR_ACK_LIMIT;
 801b6ac:	2308      	movs	r3, #8
 801b6ae:	18fb      	adds	r3, r7, r3
 801b6b0:	2240      	movs	r2, #64	; 0x40
 801b6b2:	601a      	str	r2, [r3, #0]
            break;
 801b6b4:	e0a8      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = US915_ADR_ACK_DELAY;
 801b6b6:	2308      	movs	r3, #8
 801b6b8:	18fb      	adds	r3, r7, r3
 801b6ba:	2220      	movs	r2, #32
 801b6bc:	601a      	str	r2, [r3, #0]
            break;
 801b6be:	e0a3      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	785b      	ldrb	r3, [r3, #1]
 801b6c4:	b25b      	sxtb	r3, r3
 801b6c6:	001a      	movs	r2, r3
 801b6c8:	4b57      	ldr	r3, [pc, #348]	; (801b828 <RegionUS915GetPhyParam+0x1ec>)
 801b6ca:	5c9b      	ldrb	r3, [r3, r2]
 801b6cc:	001a      	movs	r2, r3
 801b6ce:	2308      	movs	r3, #8
 801b6d0:	18fb      	adds	r3, r7, r3
 801b6d2:	601a      	str	r2, [r3, #0]
            break;
 801b6d4:	e098      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	785b      	ldrb	r3, [r3, #1]
 801b6da:	b25b      	sxtb	r3, r3
 801b6dc:	001a      	movs	r2, r3
 801b6de:	4b53      	ldr	r3, [pc, #332]	; (801b82c <RegionUS915GetPhyParam+0x1f0>)
 801b6e0:	5c9b      	ldrb	r3, [r3, r2]
 801b6e2:	001a      	movs	r2, r3
 801b6e4:	2308      	movs	r3, #8
 801b6e6:	18fb      	adds	r3, r7, r3
 801b6e8:	601a      	str	r2, [r3, #0]
            break;
 801b6ea:	e08d      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801b6ec:	2308      	movs	r3, #8
 801b6ee:	18fb      	adds	r3, r7, r3
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	601a      	str	r2, [r3, #0]
            break;
 801b6f4:	e088      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801b6f6:	2308      	movs	r3, #8
 801b6f8:	18fb      	adds	r3, r7, r3
 801b6fa:	4a4d      	ldr	r2, [pc, #308]	; (801b830 <RegionUS915GetPhyParam+0x1f4>)
 801b6fc:	601a      	str	r2, [r3, #0]
            break;
 801b6fe:	e083      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = US915_RECEIVE_DELAY1;
 801b700:	2308      	movs	r3, #8
 801b702:	18fb      	adds	r3, r7, r3
 801b704:	22fa      	movs	r2, #250	; 0xfa
 801b706:	0092      	lsls	r2, r2, #2
 801b708:	601a      	str	r2, [r3, #0]
            break;
 801b70a:	e07d      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = US915_RECEIVE_DELAY2;
 801b70c:	2308      	movs	r3, #8
 801b70e:	18fb      	adds	r3, r7, r3
 801b710:	22fa      	movs	r2, #250	; 0xfa
 801b712:	00d2      	lsls	r2, r2, #3
 801b714:	601a      	str	r2, [r3, #0]
            break;
 801b716:	e077      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = US915_JOIN_ACCEPT_DELAY1;
 801b718:	2308      	movs	r3, #8
 801b71a:	18fb      	adds	r3, r7, r3
 801b71c:	4a45      	ldr	r2, [pc, #276]	; (801b834 <RegionUS915GetPhyParam+0x1f8>)
 801b71e:	601a      	str	r2, [r3, #0]
            break;
 801b720:	e072      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = US915_JOIN_ACCEPT_DELAY2;
 801b722:	2308      	movs	r3, #8
 801b724:	18fb      	adds	r3, r7, r3
 801b726:	4a44      	ldr	r2, [pc, #272]	; (801b838 <RegionUS915GetPhyParam+0x1fc>)
 801b728:	601a      	str	r2, [r3, #0]
            break;
 801b72a:	e06d      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = US915_MAX_FCNT_GAP;
 801b72c:	2308      	movs	r3, #8
 801b72e:	18fb      	adds	r3, r7, r3
 801b730:	2280      	movs	r2, #128	; 0x80
 801b732:	01d2      	lsls	r2, r2, #7
 801b734:	601a      	str	r2, [r3, #0]
            break;
 801b736:	e067      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( US915_ACKTIMEOUT + randr( -US915_ACK_TIMEOUT_RND, US915_ACK_TIMEOUT_RND ) );
 801b738:	23fa      	movs	r3, #250	; 0xfa
 801b73a:	009b      	lsls	r3, r3, #2
 801b73c:	4a3f      	ldr	r2, [pc, #252]	; (801b83c <RegionUS915GetPhyParam+0x200>)
 801b73e:	0019      	movs	r1, r3
 801b740:	0010      	movs	r0, r2
 801b742:	f001 faa1 	bl	801cc88 <randr>
 801b746:	0003      	movs	r3, r0
 801b748:	22fa      	movs	r2, #250	; 0xfa
 801b74a:	00d2      	lsls	r2, r2, #3
 801b74c:	4694      	mov	ip, r2
 801b74e:	4463      	add	r3, ip
 801b750:	001a      	movs	r2, r3
 801b752:	2308      	movs	r3, #8
 801b754:	18fb      	adds	r3, r7, r3
 801b756:	601a      	str	r2, [r3, #0]
            break;
 801b758:	e056      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = US915_DEFAULT_RX1_DR_OFFSET;
 801b75a:	2308      	movs	r3, #8
 801b75c:	18fb      	adds	r3, r7, r3
 801b75e:	2200      	movs	r2, #0
 801b760:	601a      	str	r2, [r3, #0]
            break;
 801b762:	e051      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801b764:	2308      	movs	r3, #8
 801b766:	18fb      	adds	r3, r7, r3
 801b768:	4a35      	ldr	r2, [pc, #212]	; (801b840 <RegionUS915GetPhyParam+0x204>)
 801b76a:	601a      	str	r2, [r3, #0]
            break;
 801b76c:	e04c      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801b76e:	2308      	movs	r3, #8
 801b770:	18fb      	adds	r3, r7, r3
 801b772:	2208      	movs	r2, #8
 801b774:	601a      	str	r2, [r3, #0]
            break;
 801b776:	e047      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801b778:	2308      	movs	r3, #8
 801b77a:	18fb      	adds	r3, r7, r3
 801b77c:	4a31      	ldr	r2, [pc, #196]	; (801b844 <RegionUS915GetPhyParam+0x208>)
 801b77e:	601a      	str	r2, [r3, #0]
            break;
 801b780:	e042      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801b782:	2308      	movs	r3, #8
 801b784:	18fb      	adds	r3, r7, r3
 801b786:	4a30      	ldr	r2, [pc, #192]	; (801b848 <RegionUS915GetPhyParam+0x20c>)
 801b788:	601a      	str	r2, [r3, #0]
            break;
 801b78a:	e03d      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801b78c:	2308      	movs	r3, #8
 801b78e:	18fb      	adds	r3, r7, r3
 801b790:	2248      	movs	r2, #72	; 0x48
 801b792:	601a      	str	r2, [r3, #0]
            break;
 801b794:	e038      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801b796:	2308      	movs	r3, #8
 801b798:	18fb      	adds	r3, r7, r3
 801b79a:	4a2c      	ldr	r2, [pc, #176]	; (801b84c <RegionUS915GetPhyParam+0x210>)
 801b79c:	601a      	str	r2, [r3, #0]
            break;
 801b79e:	e033      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801b7a0:	2308      	movs	r3, #8
 801b7a2:	18fb      	adds	r3, r7, r3
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	601a      	str	r2, [r3, #0]
            break;
 801b7a8:	e02e      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + (float) 2.15;
 801b7aa:	2308      	movs	r3, #8
 801b7ac:	18fb      	adds	r3, r7, r3
 801b7ae:	4a28      	ldr	r2, [pc, #160]	; (801b850 <RegionUS915GetPhyParam+0x214>)
 801b7b0:	601a      	str	r2, [r3, #0]
            break;
 801b7b2:	e029      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801b7b4:	2308      	movs	r3, #8
 801b7b6:	18fb      	adds	r3, r7, r3
 801b7b8:	2200      	movs	r2, #0
 801b7ba:	601a      	str	r2, [r3, #0]
            break;
 801b7bc:	e024      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = US915_BEACON_CHANNEL_FREQ;
 801b7be:	2308      	movs	r3, #8
 801b7c0:	18fb      	adds	r3, r7, r3
 801b7c2:	4a1f      	ldr	r2, [pc, #124]	; (801b840 <RegionUS915GetPhyParam+0x204>)
 801b7c4:	601a      	str	r2, [r3, #0]
            break;
 801b7c6:	e01f      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801b7c8:	2108      	movs	r1, #8
 801b7ca:	187b      	adds	r3, r7, r1
 801b7cc:	2217      	movs	r2, #23
 801b7ce:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801b7d0:	187b      	adds	r3, r7, r1
 801b7d2:	2205      	movs	r2, #5
 801b7d4:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801b7d6:	187b      	adds	r3, r7, r1
 801b7d8:	2203      	movs	r2, #3
 801b7da:	709a      	strb	r2, [r3, #2]
            break;
 801b7dc:	e014      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801b7de:	2308      	movs	r3, #8
 801b7e0:	18fb      	adds	r3, r7, r3
 801b7e2:	2208      	movs	r2, #8
 801b7e4:	601a      	str	r2, [r3, #0]
            break;
 801b7e6:	e00f      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = US915_BEACON_CHANNEL_STEPWIDTH;
 801b7e8:	2308      	movs	r3, #8
 801b7ea:	18fb      	adds	r3, r7, r3
 801b7ec:	4a19      	ldr	r2, [pc, #100]	; (801b854 <RegionUS915GetPhyParam+0x218>)
 801b7ee:	601a      	str	r2, [r3, #0]
            break;
 801b7f0:	e00a      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801b7f2:	2308      	movs	r3, #8
 801b7f4:	18fb      	adds	r3, r7, r3
 801b7f6:	2208      	movs	r2, #8
 801b7f8:	601a      	str	r2, [r3, #0]
            break;
 801b7fa:	e005      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801b7fc:	2308      	movs	r3, #8
 801b7fe:	18fb      	adds	r3, r7, r3
 801b800:	2208      	movs	r2, #8
 801b802:	601a      	str	r2, [r3, #0]
            break;
 801b804:	e000      	b.n	801b808 <RegionUS915GetPhyParam+0x1cc>
        }
        default:
        {
            break;
 801b806:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801b808:	210c      	movs	r1, #12
 801b80a:	187b      	adds	r3, r7, r1
 801b80c:	2208      	movs	r2, #8
 801b80e:	18ba      	adds	r2, r7, r2
 801b810:	6812      	ldr	r2, [r2, #0]
 801b812:	601a      	str	r2, [r3, #0]
 801b814:	187b      	adds	r3, r7, r1
 801b816:	2200      	movs	r2, #0
 801b818:	681a      	ldr	r2, [r3, #0]
 801b81a:	0013      	movs	r3, r2
}
 801b81c:	0018      	movs	r0, r3
 801b81e:	46bd      	mov	sp, r7
 801b820:	b004      	add	sp, #16
 801b822:	bd80      	pop	{r7, pc}
 801b824:	08029304 	.word	0x08029304
 801b828:	080292e4 	.word	0x080292e4
 801b82c:	080292f4 	.word	0x080292f4
 801b830:	00000bb8 	.word	0x00000bb8
 801b834:	00001388 	.word	0x00001388
 801b838:	00001770 	.word	0x00001770
 801b83c:	fffffc18 	.word	0xfffffc18
 801b840:	370870a0 	.word	0x370870a0
 801b844:	20001d14 	.word	0x20001d14
 801b848:	20001d2c 	.word	0x20001d2c
 801b84c:	200019a4 	.word	0x200019a4
 801b850:	4200999a 	.word	0x4200999a
 801b854:	000927c0 	.word	0x000927c0

0801b858 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b082      	sub	sp, #8
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	7858      	ldrb	r0, [r3, #1]
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	781b      	ldrb	r3, [r3, #0]
 801b868:	0019      	movs	r1, r3
 801b86a:	4a0a      	ldr	r2, [pc, #40]	; (801b894 <RegionUS915SetBandTxDone+0x3c>)
 801b86c:	000b      	movs	r3, r1
 801b86e:	005b      	lsls	r3, r3, #1
 801b870:	185b      	adds	r3, r3, r1
 801b872:	009b      	lsls	r3, r3, #2
 801b874:	18d3      	adds	r3, r2, r3
 801b876:	3309      	adds	r3, #9
 801b878:	781b      	ldrb	r3, [r3, #0]
 801b87a:	3336      	adds	r3, #54	; 0x36
 801b87c:	011a      	lsls	r2, r3, #4
 801b87e:	4b05      	ldr	r3, [pc, #20]	; (801b894 <RegionUS915SetBandTxDone+0x3c>)
 801b880:	18d1      	adds	r1, r2, r3
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	685b      	ldr	r3, [r3, #4]
 801b886:	001a      	movs	r2, r3
 801b888:	f7f8 fe3e 	bl	8014508 <RegionCommonSetBandTxDone>
}
 801b88c:	46c0      	nop			; (mov r8, r8)
 801b88e:	46bd      	mov	sp, r7
 801b890:	b002      	add	sp, #8
 801b892:	bd80      	pop	{r7, pc}
 801b894:	200019a4 	.word	0x200019a4

0801b898 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801b898:	b590      	push	{r4, r7, lr}
 801b89a:	b089      	sub	sp, #36	; 0x24
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
    Band_t bands[US915_MAX_NB_BANDS] =
 801b8a0:	210c      	movs	r1, #12
 801b8a2:	187b      	adds	r3, r7, r1
 801b8a4:	2201      	movs	r2, #1
 801b8a6:	801a      	strh	r2, [r3, #0]
 801b8a8:	187b      	adds	r3, r7, r1
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	709a      	strb	r2, [r3, #2]
 801b8ae:	187b      	adds	r3, r7, r1
 801b8b0:	2200      	movs	r2, #0
 801b8b2:	605a      	str	r2, [r3, #4]
 801b8b4:	187b      	adds	r3, r7, r1
 801b8b6:	2200      	movs	r2, #0
 801b8b8:	609a      	str	r2, [r3, #8]
 801b8ba:	187b      	adds	r3, r7, r1
 801b8bc:	2200      	movs	r2, #0
 801b8be:	60da      	str	r2, [r3, #12]
    {
       US915_BAND0
    };

    switch( params->Type )
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	791b      	ldrb	r3, [r3, #4]
 801b8c4:	2b01      	cmp	r3, #1
 801b8c6:	d100      	bne.n	801b8ca <RegionUS915InitDefaults+0x32>
 801b8c8:	e0bd      	b.n	801ba46 <RegionUS915InitDefaults+0x1ae>
 801b8ca:	2b02      	cmp	r3, #2
 801b8cc:	d100      	bne.n	801b8d0 <RegionUS915InitDefaults+0x38>
 801b8ce:	e0ad      	b.n	801ba2c <RegionUS915InitDefaults+0x194>
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d000      	beq.n	801b8d6 <RegionUS915InitDefaults+0x3e>
            }
            break;
        }
        default:
        {
            break;
 801b8d4:	e0eb      	b.n	801baae <RegionUS915InitDefaults+0x216>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801b8d6:	230c      	movs	r3, #12
 801b8d8:	18f9      	adds	r1, r7, r3
 801b8da:	4b77      	ldr	r3, [pc, #476]	; (801bab8 <RegionUS915InitDefaults+0x220>)
 801b8dc:	2210      	movs	r2, #16
 801b8de:	0018      	movs	r0, r3
 801b8e0:	f001 f9e8 	bl	801ccb4 <memcpy1>
            NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 801b8e4:	4a75      	ldr	r2, [pc, #468]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b8e6:	23e5      	movs	r3, #229	; 0xe5
 801b8e8:	009b      	lsls	r3, r3, #2
 801b8ea:	2100      	movs	r1, #0
 801b8ec:	54d1      	strb	r1, [r2, r3]
            NvmCtx.JoinTrialsCounter = 0;
 801b8ee:	4b73      	ldr	r3, [pc, #460]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b8f0:	4a73      	ldr	r2, [pc, #460]	; (801bac0 <RegionUS915InitDefaults+0x228>)
 801b8f2:	2100      	movs	r1, #0
 801b8f4:	5499      	strb	r1, [r3, r2]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801b8f6:	231f      	movs	r3, #31
 801b8f8:	18fb      	adds	r3, r7, r3
 801b8fa:	2200      	movs	r2, #0
 801b8fc:	701a      	strb	r2, [r3, #0]
 801b8fe:	e02c      	b.n	801b95a <RegionUS915InitDefaults+0xc2>
                NvmCtx.Channels[i].Frequency = 902300000 + i * 200000;
 801b900:	201f      	movs	r0, #31
 801b902:	183b      	adds	r3, r7, r0
 801b904:	781b      	ldrb	r3, [r3, #0]
 801b906:	4a6f      	ldr	r2, [pc, #444]	; (801bac4 <RegionUS915InitDefaults+0x22c>)
 801b908:	4353      	muls	r3, r2
 801b90a:	4a6f      	ldr	r2, [pc, #444]	; (801bac8 <RegionUS915InitDefaults+0x230>)
 801b90c:	1899      	adds	r1, r3, r2
 801b90e:	0004      	movs	r4, r0
 801b910:	183b      	adds	r3, r7, r0
 801b912:	781a      	ldrb	r2, [r3, #0]
 801b914:	0008      	movs	r0, r1
 801b916:	4969      	ldr	r1, [pc, #420]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b918:	0013      	movs	r3, r2
 801b91a:	005b      	lsls	r3, r3, #1
 801b91c:	189b      	adds	r3, r3, r2
 801b91e:	009b      	lsls	r3, r3, #2
 801b920:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801b922:	0020      	movs	r0, r4
 801b924:	183b      	adds	r3, r7, r0
 801b926:	781a      	ldrb	r2, [r3, #0]
 801b928:	4964      	ldr	r1, [pc, #400]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b92a:	0013      	movs	r3, r2
 801b92c:	005b      	lsls	r3, r3, #1
 801b92e:	189b      	adds	r3, r3, r2
 801b930:	009b      	lsls	r3, r3, #2
 801b932:	18cb      	adds	r3, r1, r3
 801b934:	3308      	adds	r3, #8
 801b936:	2230      	movs	r2, #48	; 0x30
 801b938:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 801b93a:	183b      	adds	r3, r7, r0
 801b93c:	781a      	ldrb	r2, [r3, #0]
 801b93e:	495f      	ldr	r1, [pc, #380]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b940:	0013      	movs	r3, r2
 801b942:	005b      	lsls	r3, r3, #1
 801b944:	189b      	adds	r3, r3, r2
 801b946:	009b      	lsls	r3, r3, #2
 801b948:	18cb      	adds	r3, r1, r3
 801b94a:	3309      	adds	r3, #9
 801b94c:	2200      	movs	r2, #0
 801b94e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801b950:	183b      	adds	r3, r7, r0
 801b952:	781a      	ldrb	r2, [r3, #0]
 801b954:	183b      	adds	r3, r7, r0
 801b956:	3201      	adds	r2, #1
 801b958:	701a      	strb	r2, [r3, #0]
 801b95a:	231f      	movs	r3, #31
 801b95c:	18fb      	adds	r3, r7, r3
 801b95e:	781b      	ldrb	r3, [r3, #0]
 801b960:	2b3f      	cmp	r3, #63	; 0x3f
 801b962:	d9cd      	bls.n	801b900 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801b964:	231e      	movs	r3, #30
 801b966:	18fb      	adds	r3, r7, r3
 801b968:	2240      	movs	r2, #64	; 0x40
 801b96a:	701a      	strb	r2, [r3, #0]
 801b96c:	e02d      	b.n	801b9ca <RegionUS915InitDefaults+0x132>
                NvmCtx.Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801b96e:	201e      	movs	r0, #30
 801b970:	183b      	adds	r3, r7, r0
 801b972:	781b      	ldrb	r3, [r3, #0]
 801b974:	3b40      	subs	r3, #64	; 0x40
 801b976:	4a55      	ldr	r2, [pc, #340]	; (801bacc <RegionUS915InitDefaults+0x234>)
 801b978:	4353      	muls	r3, r2
 801b97a:	4a55      	ldr	r2, [pc, #340]	; (801bad0 <RegionUS915InitDefaults+0x238>)
 801b97c:	1899      	adds	r1, r3, r2
 801b97e:	0004      	movs	r4, r0
 801b980:	183b      	adds	r3, r7, r0
 801b982:	781a      	ldrb	r2, [r3, #0]
 801b984:	0008      	movs	r0, r1
 801b986:	494d      	ldr	r1, [pc, #308]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b988:	0013      	movs	r3, r2
 801b98a:	005b      	lsls	r3, r3, #1
 801b98c:	189b      	adds	r3, r3, r2
 801b98e:	009b      	lsls	r3, r3, #2
 801b990:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801b992:	0020      	movs	r0, r4
 801b994:	183b      	adds	r3, r7, r0
 801b996:	781a      	ldrb	r2, [r3, #0]
 801b998:	4948      	ldr	r1, [pc, #288]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b99a:	0013      	movs	r3, r2
 801b99c:	005b      	lsls	r3, r3, #1
 801b99e:	189b      	adds	r3, r3, r2
 801b9a0:	009b      	lsls	r3, r3, #2
 801b9a2:	18cb      	adds	r3, r1, r3
 801b9a4:	3308      	adds	r3, #8
 801b9a6:	2244      	movs	r2, #68	; 0x44
 801b9a8:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 801b9aa:	183b      	adds	r3, r7, r0
 801b9ac:	781a      	ldrb	r2, [r3, #0]
 801b9ae:	4943      	ldr	r1, [pc, #268]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b9b0:	0013      	movs	r3, r2
 801b9b2:	005b      	lsls	r3, r3, #1
 801b9b4:	189b      	adds	r3, r3, r2
 801b9b6:	009b      	lsls	r3, r3, #2
 801b9b8:	18cb      	adds	r3, r1, r3
 801b9ba:	3309      	adds	r3, #9
 801b9bc:	2200      	movs	r2, #0
 801b9be:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801b9c0:	183b      	adds	r3, r7, r0
 801b9c2:	781a      	ldrb	r2, [r3, #0]
 801b9c4:	183b      	adds	r3, r7, r0
 801b9c6:	3201      	adds	r2, #1
 801b9c8:	701a      	strb	r2, [r3, #0]
 801b9ca:	231e      	movs	r3, #30
 801b9cc:	18fb      	adds	r3, r7, r3
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	2b47      	cmp	r3, #71	; 0x47
 801b9d2:	d9cc      	bls.n	801b96e <RegionUS915InitDefaults+0xd6>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 801b9d4:	4a39      	ldr	r2, [pc, #228]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b9d6:	23e2      	movs	r3, #226	; 0xe2
 801b9d8:	009b      	lsls	r3, r3, #2
 801b9da:	2101      	movs	r1, #1
 801b9dc:	4249      	negs	r1, r1
 801b9de:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 801b9e0:	4b36      	ldr	r3, [pc, #216]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b9e2:	4a3c      	ldr	r2, [pc, #240]	; (801bad4 <RegionUS915InitDefaults+0x23c>)
 801b9e4:	2101      	movs	r1, #1
 801b9e6:	4249      	negs	r1, r1
 801b9e8:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 801b9ea:	4a34      	ldr	r2, [pc, #208]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b9ec:	23e3      	movs	r3, #227	; 0xe3
 801b9ee:	009b      	lsls	r3, r3, #2
 801b9f0:	2101      	movs	r1, #1
 801b9f2:	4249      	negs	r1, r1
 801b9f4:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 801b9f6:	4b31      	ldr	r3, [pc, #196]	; (801babc <RegionUS915InitDefaults+0x224>)
 801b9f8:	4a37      	ldr	r2, [pc, #220]	; (801bad8 <RegionUS915InitDefaults+0x240>)
 801b9fa:	2101      	movs	r1, #1
 801b9fc:	4249      	negs	r1, r1
 801b9fe:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0x00FF;
 801ba00:	4a2e      	ldr	r2, [pc, #184]	; (801babc <RegionUS915InitDefaults+0x224>)
 801ba02:	23e4      	movs	r3, #228	; 0xe4
 801ba04:	009b      	lsls	r3, r3, #2
 801ba06:	21ff      	movs	r1, #255	; 0xff
 801ba08:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 801ba0a:	4b2c      	ldr	r3, [pc, #176]	; (801babc <RegionUS915InitDefaults+0x224>)
 801ba0c:	4a33      	ldr	r2, [pc, #204]	; (801badc <RegionUS915InitDefaults+0x244>)
 801ba0e:	2100      	movs	r1, #0
 801ba10:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 801ba12:	4933      	ldr	r1, [pc, #204]	; (801bae0 <RegionUS915InitDefaults+0x248>)
 801ba14:	4b33      	ldr	r3, [pc, #204]	; (801bae4 <RegionUS915InitDefaults+0x24c>)
 801ba16:	2206      	movs	r2, #6
 801ba18:	0018      	movs	r0, r3
 801ba1a:	f7f8 fd46 	bl	80144aa <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 801ba1e:	4931      	ldr	r1, [pc, #196]	; (801bae4 <RegionUS915InitDefaults+0x24c>)
 801ba20:	4b31      	ldr	r3, [pc, #196]	; (801bae8 <RegionUS915InitDefaults+0x250>)
 801ba22:	2206      	movs	r2, #6
 801ba24:	0018      	movs	r0, r3
 801ba26:	f7f8 fd40 	bl	80144aa <RegionCommonChanMaskCopy>
            break;
 801ba2a:	e040      	b.n	801baae <RegionUS915InitDefaults+0x216>
            if( params->NvmCtx != 0 )
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d03b      	beq.n	801baac <RegionUS915InitDefaults+0x214>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	6819      	ldr	r1, [r3, #0]
 801ba38:	23e6      	movs	r3, #230	; 0xe6
 801ba3a:	009a      	lsls	r2, r3, #2
 801ba3c:	4b1f      	ldr	r3, [pc, #124]	; (801babc <RegionUS915InitDefaults+0x224>)
 801ba3e:	0018      	movs	r0, r3
 801ba40:	f001 f938 	bl	801ccb4 <memcpy1>
            break;
 801ba44:	e032      	b.n	801baac <RegionUS915InitDefaults+0x214>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 801ba46:	4926      	ldr	r1, [pc, #152]	; (801bae0 <RegionUS915InitDefaults+0x248>)
 801ba48:	4b26      	ldr	r3, [pc, #152]	; (801bae4 <RegionUS915InitDefaults+0x24c>)
 801ba4a:	2206      	movs	r2, #6
 801ba4c:	0018      	movs	r0, r3
 801ba4e:	f7f8 fd2c 	bl	80144aa <RegionCommonChanMaskCopy>
            for( uint8_t i = 0; i < 6; i++ )
 801ba52:	231d      	movs	r3, #29
 801ba54:	18fb      	adds	r3, r7, r3
 801ba56:	2200      	movs	r2, #0
 801ba58:	701a      	strb	r2, [r3, #0]
 801ba5a:	e021      	b.n	801baa0 <RegionUS915InitDefaults+0x208>
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 801ba5c:	201d      	movs	r0, #29
 801ba5e:	183b      	adds	r3, r7, r0
 801ba60:	781b      	ldrb	r3, [r3, #0]
 801ba62:	4a16      	ldr	r2, [pc, #88]	; (801babc <RegionUS915InitDefaults+0x224>)
 801ba64:	33bd      	adds	r3, #189	; 0xbd
 801ba66:	33ff      	adds	r3, #255	; 0xff
 801ba68:	005b      	lsls	r3, r3, #1
 801ba6a:	18d3      	adds	r3, r2, r3
 801ba6c:	3304      	adds	r3, #4
 801ba6e:	881a      	ldrh	r2, [r3, #0]
 801ba70:	183b      	adds	r3, r7, r0
 801ba72:	7819      	ldrb	r1, [r3, #0]
 801ba74:	4b11      	ldr	r3, [pc, #68]	; (801babc <RegionUS915InitDefaults+0x224>)
 801ba76:	31b9      	adds	r1, #185	; 0xb9
 801ba78:	31ff      	adds	r1, #255	; 0xff
 801ba7a:	0049      	lsls	r1, r1, #1
 801ba7c:	5ac9      	ldrh	r1, [r1, r3]
 801ba7e:	183b      	adds	r3, r7, r0
 801ba80:	781b      	ldrb	r3, [r3, #0]
 801ba82:	400a      	ands	r2, r1
 801ba84:	b291      	uxth	r1, r2
 801ba86:	4a0d      	ldr	r2, [pc, #52]	; (801babc <RegionUS915InitDefaults+0x224>)
 801ba88:	33bd      	adds	r3, #189	; 0xbd
 801ba8a:	33ff      	adds	r3, #255	; 0xff
 801ba8c:	005b      	lsls	r3, r3, #1
 801ba8e:	18d3      	adds	r3, r2, r3
 801ba90:	3304      	adds	r3, #4
 801ba92:	1c0a      	adds	r2, r1, #0
 801ba94:	801a      	strh	r2, [r3, #0]
            for( uint8_t i = 0; i < 6; i++ )
 801ba96:	183b      	adds	r3, r7, r0
 801ba98:	781a      	ldrb	r2, [r3, #0]
 801ba9a:	183b      	adds	r3, r7, r0
 801ba9c:	3201      	adds	r2, #1
 801ba9e:	701a      	strb	r2, [r3, #0]
 801baa0:	231d      	movs	r3, #29
 801baa2:	18fb      	adds	r3, r7, r3
 801baa4:	781b      	ldrb	r3, [r3, #0]
 801baa6:	2b05      	cmp	r3, #5
 801baa8:	d9d8      	bls.n	801ba5c <RegionUS915InitDefaults+0x1c4>
            break;
 801baaa:	e000      	b.n	801baae <RegionUS915InitDefaults+0x216>
            break;
 801baac:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801baae:	46c0      	nop			; (mov r8, r8)
 801bab0:	46bd      	mov	sp, r7
 801bab2:	b009      	add	sp, #36	; 0x24
 801bab4:	bd90      	pop	{r4, r7, pc}
 801bab6:	46c0      	nop			; (mov r8, r8)
 801bab8:	20001d04 	.word	0x20001d04
 801babc:	200019a4 	.word	0x200019a4
 801bac0:	00000395 	.word	0x00000395
 801bac4:	00030d40 	.word	0x00030d40
 801bac8:	35c80160 	.word	0x35c80160
 801bacc:	00186a00 	.word	0x00186a00
 801bad0:	35d2afc0 	.word	0x35d2afc0
 801bad4:	0000038a 	.word	0x0000038a
 801bad8:	0000038e 	.word	0x0000038e
 801badc:	00000392 	.word	0x00000392
 801bae0:	20001d2c 	.word	0x20001d2c
 801bae4:	20001d14 	.word	0x20001d14
 801bae8:	20001d20 	.word	0x20001d20

0801baec <RegionUS915ApplyCFList>:
            return false;
    }
}

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801baec:	b590      	push	{r4, r7, lr}
 801baee:	b085      	sub	sp, #20
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	791b      	ldrb	r3, [r3, #4]
 801baf8:	2b10      	cmp	r3, #16
 801bafa:	d000      	beq.n	801bafe <RegionUS915ApplyCFList+0x12>
 801bafc:	e07d      	b.n	801bbfa <RegionUS915ApplyCFList+0x10e>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	330f      	adds	r3, #15
 801bb04:	781b      	ldrb	r3, [r3, #0]
 801bb06:	2b01      	cmp	r3, #1
 801bb08:	d000      	beq.n	801bb0c <RegionUS915ApplyCFList+0x20>
 801bb0a:	e078      	b.n	801bbfe <RegionUS915ApplyCFList+0x112>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801bb0c:	230f      	movs	r3, #15
 801bb0e:	18fb      	adds	r3, r7, r3
 801bb10:	2200      	movs	r2, #0
 801bb12:	701a      	strb	r2, [r3, #0]
 801bb14:	230e      	movs	r3, #14
 801bb16:	18fb      	adds	r3, r7, r3
 801bb18:	2200      	movs	r2, #0
 801bb1a:	701a      	strb	r2, [r3, #0]
 801bb1c:	e067      	b.n	801bbee <RegionUS915ApplyCFList+0x102>
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681a      	ldr	r2, [r3, #0]
 801bb22:	240e      	movs	r4, #14
 801bb24:	193b      	adds	r3, r7, r4
 801bb26:	781b      	ldrb	r3, [r3, #0]
 801bb28:	18d3      	adds	r3, r2, r3
 801bb2a:	7819      	ldrb	r1, [r3, #0]
 801bb2c:	200f      	movs	r0, #15
 801bb2e:	183b      	adds	r3, r7, r0
 801bb30:	781a      	ldrb	r2, [r3, #0]
 801bb32:	b289      	uxth	r1, r1
 801bb34:	4b34      	ldr	r3, [pc, #208]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bb36:	32b9      	adds	r2, #185	; 0xb9
 801bb38:	32ff      	adds	r2, #255	; 0xff
 801bb3a:	0052      	lsls	r2, r2, #1
 801bb3c:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801bb3e:	183b      	adds	r3, r7, r0
 801bb40:	781a      	ldrb	r2, [r3, #0]
 801bb42:	4b31      	ldr	r3, [pc, #196]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bb44:	32b9      	adds	r2, #185	; 0xb9
 801bb46:	32ff      	adds	r2, #255	; 0xff
 801bb48:	0052      	lsls	r2, r2, #1
 801bb4a:	5ad1      	ldrh	r1, [r2, r3]
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	681a      	ldr	r2, [r3, #0]
 801bb50:	193b      	adds	r3, r7, r4
 801bb52:	781b      	ldrb	r3, [r3, #0]
 801bb54:	3301      	adds	r3, #1
 801bb56:	18d3      	adds	r3, r2, r3
 801bb58:	781b      	ldrb	r3, [r3, #0]
 801bb5a:	b29b      	uxth	r3, r3
 801bb5c:	021b      	lsls	r3, r3, #8
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	183a      	adds	r2, r7, r0
 801bb62:	7812      	ldrb	r2, [r2, #0]
 801bb64:	430b      	orrs	r3, r1
 801bb66:	b299      	uxth	r1, r3
 801bb68:	4b27      	ldr	r3, [pc, #156]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bb6a:	32b9      	adds	r2, #185	; 0xb9
 801bb6c:	32ff      	adds	r2, #255	; 0xff
 801bb6e:	0052      	lsls	r2, r2, #1
 801bb70:	52d1      	strh	r1, [r2, r3]
        if( chMaskItr == 4 )
 801bb72:	183b      	adds	r3, r7, r0
 801bb74:	781b      	ldrb	r3, [r3, #0]
 801bb76:	2b04      	cmp	r3, #4
 801bb78:	d111      	bne.n	801bb9e <RegionUS915ApplyCFList+0xb2>
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801bb7a:	210f      	movs	r1, #15
 801bb7c:	187b      	adds	r3, r7, r1
 801bb7e:	781a      	ldrb	r2, [r3, #0]
 801bb80:	4b21      	ldr	r3, [pc, #132]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bb82:	32b9      	adds	r2, #185	; 0xb9
 801bb84:	32ff      	adds	r2, #255	; 0xff
 801bb86:	0052      	lsls	r2, r2, #1
 801bb88:	5ad3      	ldrh	r3, [r2, r3]
 801bb8a:	187a      	adds	r2, r7, r1
 801bb8c:	7812      	ldrb	r2, [r2, #0]
 801bb8e:	21ff      	movs	r1, #255	; 0xff
 801bb90:	400b      	ands	r3, r1
 801bb92:	b299      	uxth	r1, r3
 801bb94:	4b1c      	ldr	r3, [pc, #112]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bb96:	32b9      	adds	r2, #185	; 0xb9
 801bb98:	32ff      	adds	r2, #255	; 0xff
 801bb9a:	0052      	lsls	r2, r2, #1
 801bb9c:	52d1      	strh	r1, [r2, r3]
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 801bb9e:	200f      	movs	r0, #15
 801bba0:	183b      	adds	r3, r7, r0
 801bba2:	781b      	ldrb	r3, [r3, #0]
 801bba4:	4a18      	ldr	r2, [pc, #96]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bba6:	33bd      	adds	r3, #189	; 0xbd
 801bba8:	33ff      	adds	r3, #255	; 0xff
 801bbaa:	005b      	lsls	r3, r3, #1
 801bbac:	18d3      	adds	r3, r2, r3
 801bbae:	3304      	adds	r3, #4
 801bbb0:	881a      	ldrh	r2, [r3, #0]
 801bbb2:	183b      	adds	r3, r7, r0
 801bbb4:	7819      	ldrb	r1, [r3, #0]
 801bbb6:	4b14      	ldr	r3, [pc, #80]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bbb8:	31b9      	adds	r1, #185	; 0xb9
 801bbba:	31ff      	adds	r1, #255	; 0xff
 801bbbc:	0049      	lsls	r1, r1, #1
 801bbbe:	5ac9      	ldrh	r1, [r1, r3]
 801bbc0:	183b      	adds	r3, r7, r0
 801bbc2:	781b      	ldrb	r3, [r3, #0]
 801bbc4:	400a      	ands	r2, r1
 801bbc6:	b291      	uxth	r1, r2
 801bbc8:	4a0f      	ldr	r2, [pc, #60]	; (801bc08 <RegionUS915ApplyCFList+0x11c>)
 801bbca:	33bd      	adds	r3, #189	; 0xbd
 801bbcc:	33ff      	adds	r3, #255	; 0xff
 801bbce:	005b      	lsls	r3, r3, #1
 801bbd0:	18d3      	adds	r3, r2, r3
 801bbd2:	3304      	adds	r3, #4
 801bbd4:	1c0a      	adds	r2, r1, #0
 801bbd6:	801a      	strh	r2, [r3, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801bbd8:	183b      	adds	r3, r7, r0
 801bbda:	781a      	ldrb	r2, [r3, #0]
 801bbdc:	183b      	adds	r3, r7, r0
 801bbde:	3201      	adds	r2, #1
 801bbe0:	701a      	strb	r2, [r3, #0]
 801bbe2:	220e      	movs	r2, #14
 801bbe4:	18bb      	adds	r3, r7, r2
 801bbe6:	18ba      	adds	r2, r7, r2
 801bbe8:	7812      	ldrb	r2, [r2, #0]
 801bbea:	3202      	adds	r2, #2
 801bbec:	701a      	strb	r2, [r3, #0]
 801bbee:	230f      	movs	r3, #15
 801bbf0:	18fb      	adds	r3, r7, r3
 801bbf2:	781b      	ldrb	r3, [r3, #0]
 801bbf4:	2b04      	cmp	r3, #4
 801bbf6:	d992      	bls.n	801bb1e <RegionUS915ApplyCFList+0x32>
 801bbf8:	e002      	b.n	801bc00 <RegionUS915ApplyCFList+0x114>
        return;
 801bbfa:	46c0      	nop			; (mov r8, r8)
 801bbfc:	e000      	b.n	801bc00 <RegionUS915ApplyCFList+0x114>
        return;
 801bbfe:	46c0      	nop			; (mov r8, r8)
    }
}
 801bc00:	46bd      	mov	sp, r7
 801bc02:	b005      	add	sp, #20
 801bc04:	bd90      	pop	{r4, r7, pc}
 801bc06:	46c0      	nop			; (mov r8, r8)
 801bc08:	200019a4 	.word	0x200019a4

0801bc0c <RegionUS915ComputeRxWindowParameters>:
    }
    return true;
}

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc0e:	b08b      	sub	sp, #44	; 0x2c
 801bc10:	af04      	add	r7, sp, #16
 801bc12:	60ba      	str	r2, [r7, #8]
 801bc14:	607b      	str	r3, [r7, #4]
 801bc16:	250f      	movs	r5, #15
 801bc18:	197b      	adds	r3, r7, r5
 801bc1a:	1c02      	adds	r2, r0, #0
 801bc1c:	701a      	strb	r2, [r3, #0]
 801bc1e:	230e      	movs	r3, #14
 801bc20:	18fb      	adds	r3, r7, r3
 801bc22:	1c0a      	adds	r2, r1, #0
 801bc24:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801bc26:	2300      	movs	r3, #0
 801bc28:	2400      	movs	r4, #0
 801bc2a:	613b      	str	r3, [r7, #16]
 801bc2c:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801bc2e:	197b      	adds	r3, r7, r5
 801bc30:	781b      	ldrb	r3, [r3, #0]
 801bc32:	b25a      	sxtb	r2, r3
 801bc34:	2a0d      	cmp	r2, #13
 801bc36:	dd00      	ble.n	801bc3a <RegionUS915ComputeRxWindowParameters+0x2e>
 801bc38:	230d      	movs	r3, #13
 801bc3a:	b25a      	sxtb	r2, r3
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	785b      	ldrb	r3, [r3, #1]
 801bc44:	b25b      	sxtb	r3, r3
 801bc46:	0018      	movs	r0, r3
 801bc48:	f7ff fb80 	bl	801b34c <GetBandwidth>
 801bc4c:	0003      	movs	r3, r0
 801bc4e:	b2da      	uxtb	r2, r3
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	785b      	ldrb	r3, [r3, #1]
 801bc58:	b25b      	sxtb	r3, r3
 801bc5a:	001a      	movs	r2, r3
 801bc5c:	4b14      	ldr	r3, [pc, #80]	; (801bcb0 <RegionUS915ComputeRxWindowParameters+0xa4>)
 801bc5e:	5c98      	ldrb	r0, [r3, r2]
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	785b      	ldrb	r3, [r3, #1]
 801bc64:	b25b      	sxtb	r3, r3
 801bc66:	001a      	movs	r2, r3
 801bc68:	4b12      	ldr	r3, [pc, #72]	; (801bcb4 <RegionUS915ComputeRxWindowParameters+0xa8>)
 801bc6a:	0092      	lsls	r2, r2, #2
 801bc6c:	58d3      	ldr	r3, [r2, r3]
 801bc6e:	0019      	movs	r1, r3
 801bc70:	f7f8 fe56 	bl	8014920 <RegionCommonComputeSymbolTimeLoRa>
 801bc74:	0003      	movs	r3, r0
 801bc76:	000c      	movs	r4, r1
 801bc78:	613b      	str	r3, [r7, #16]
 801bc7a:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801bc7c:	4b0e      	ldr	r3, [pc, #56]	; (801bcb8 <RegionUS915ComputeRxWindowParameters+0xac>)
 801bc7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bc80:	4798      	blx	r3
 801bc82:	0006      	movs	r6, r0
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	3308      	adds	r3, #8
 801bc88:	687a      	ldr	r2, [r7, #4]
 801bc8a:	320c      	adds	r2, #12
 801bc8c:	68bd      	ldr	r5, [r7, #8]
 801bc8e:	210e      	movs	r1, #14
 801bc90:	1879      	adds	r1, r7, r1
 801bc92:	780c      	ldrb	r4, [r1, #0]
 801bc94:	6938      	ldr	r0, [r7, #16]
 801bc96:	6979      	ldr	r1, [r7, #20]
 801bc98:	9202      	str	r2, [sp, #8]
 801bc9a:	9301      	str	r3, [sp, #4]
 801bc9c:	9600      	str	r6, [sp, #0]
 801bc9e:	002b      	movs	r3, r5
 801bca0:	0022      	movs	r2, r4
 801bca2:	f7f8 fe85 	bl	80149b0 <RegionCommonComputeRxWindowParameters>
}
 801bca6:	46c0      	nop			; (mov r8, r8)
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	b007      	add	sp, #28
 801bcac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcae:	46c0      	nop			; (mov r8, r8)
 801bcb0:	08029280 	.word	0x08029280
 801bcb4:	08029290 	.word	0x08029290
 801bcb8:	080293d8 	.word	0x080293d8

0801bcbc <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801bcbc:	b5b0      	push	{r4, r5, r7, lr}
 801bcbe:	b090      	sub	sp, #64	; 0x40
 801bcc0:	af0a      	add	r7, sp, #40	; 0x28
 801bcc2:	6078      	str	r0, [r7, #4]
 801bcc4:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 801bcc6:	230f      	movs	r3, #15
 801bcc8:	18fb      	adds	r3, r7, r3
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	7852      	ldrb	r2, [r2, #1]
 801bcce:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801bcd0:	2317      	movs	r3, #23
 801bcd2:	18fb      	adds	r3, r7, r3
 801bcd4:	2200      	movs	r2, #0
 801bcd6:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801bcd8:	230e      	movs	r3, #14
 801bcda:	18fb      	adds	r3, r7, r3
 801bcdc:	2200      	movs	r2, #0
 801bcde:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	685b      	ldr	r3, [r3, #4]
 801bce4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801bce6:	4b39      	ldr	r3, [pc, #228]	; (801bdcc <RegionUS915RxConfig+0x110>)
 801bce8:	68db      	ldr	r3, [r3, #12]
 801bcea:	4798      	blx	r3
 801bcec:	1e03      	subs	r3, r0, #0
 801bcee:	d001      	beq.n	801bcf4 <RegionUS915RxConfig+0x38>
    {
        return false;
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	e067      	b.n	801bdc4 <RegionUS915RxConfig+0x108>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	7cdb      	ldrb	r3, [r3, #19]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d10a      	bne.n	801bd12 <RegionUS915RxConfig+0x56>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	781b      	ldrb	r3, [r3, #0]
 801bd00:	001a      	movs	r2, r3
 801bd02:	2307      	movs	r3, #7
 801bd04:	4013      	ands	r3, r2
 801bd06:	4a32      	ldr	r2, [pc, #200]	; (801bdd0 <RegionUS915RxConfig+0x114>)
 801bd08:	4353      	muls	r3, r2
 801bd0a:	4a32      	ldr	r2, [pc, #200]	; (801bdd4 <RegionUS915RxConfig+0x118>)
 801bd0c:	4694      	mov	ip, r2
 801bd0e:	4463      	add	r3, ip
 801bd10:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801bd12:	230f      	movs	r3, #15
 801bd14:	18fb      	adds	r3, r7, r3
 801bd16:	781b      	ldrb	r3, [r3, #0]
 801bd18:	b25b      	sxtb	r3, r3
 801bd1a:	4a2f      	ldr	r2, [pc, #188]	; (801bdd8 <RegionUS915RxConfig+0x11c>)
 801bd1c:	5cd2      	ldrb	r2, [r2, r3]
 801bd1e:	250e      	movs	r5, #14
 801bd20:	197b      	adds	r3, r7, r5
 801bd22:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801bd24:	4b29      	ldr	r3, [pc, #164]	; (801bdcc <RegionUS915RxConfig+0x110>)
 801bd26:	695b      	ldr	r3, [r3, #20]
 801bd28:	693a      	ldr	r2, [r7, #16]
 801bd2a:	0010      	movs	r0, r2
 801bd2c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801bd2e:	4b27      	ldr	r3, [pc, #156]	; (801bdcc <RegionUS915RxConfig+0x110>)
 801bd30:	6a1c      	ldr	r4, [r3, #32]
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	789b      	ldrb	r3, [r3, #2]
 801bd36:	0018      	movs	r0, r3
 801bd38:	197b      	adds	r3, r7, r5
 801bd3a:	2100      	movs	r1, #0
 801bd3c:	5659      	ldrsb	r1, [r3, r1]
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	689b      	ldr	r3, [r3, #8]
 801bd42:	b29b      	uxth	r3, r3
 801bd44:	687a      	ldr	r2, [r7, #4]
 801bd46:	7c92      	ldrb	r2, [r2, #18]
 801bd48:	9209      	str	r2, [sp, #36]	; 0x24
 801bd4a:	2201      	movs	r2, #1
 801bd4c:	9208      	str	r2, [sp, #32]
 801bd4e:	2200      	movs	r2, #0
 801bd50:	9207      	str	r2, [sp, #28]
 801bd52:	2200      	movs	r2, #0
 801bd54:	9206      	str	r2, [sp, #24]
 801bd56:	2200      	movs	r2, #0
 801bd58:	9205      	str	r2, [sp, #20]
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	9204      	str	r2, [sp, #16]
 801bd5e:	2200      	movs	r2, #0
 801bd60:	9203      	str	r2, [sp, #12]
 801bd62:	9302      	str	r3, [sp, #8]
 801bd64:	2308      	movs	r3, #8
 801bd66:	9301      	str	r3, [sp, #4]
 801bd68:	2300      	movs	r3, #0
 801bd6a:	9300      	str	r3, [sp, #0]
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	000a      	movs	r2, r1
 801bd70:	0001      	movs	r1, r0
 801bd72:	2001      	movs	r0, #1
 801bd74:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	7c5b      	ldrb	r3, [r3, #17]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d009      	beq.n	801bd92 <RegionUS915RxConfig+0xd6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801bd7e:	230f      	movs	r3, #15
 801bd80:	18fb      	adds	r3, r7, r3
 801bd82:	2200      	movs	r2, #0
 801bd84:	569a      	ldrsb	r2, [r3, r2]
 801bd86:	2317      	movs	r3, #23
 801bd88:	18fb      	adds	r3, r7, r3
 801bd8a:	4914      	ldr	r1, [pc, #80]	; (801bddc <RegionUS915RxConfig+0x120>)
 801bd8c:	5c8a      	ldrb	r2, [r1, r2]
 801bd8e:	701a      	strb	r2, [r3, #0]
 801bd90:	e008      	b.n	801bda4 <RegionUS915RxConfig+0xe8>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801bd92:	230f      	movs	r3, #15
 801bd94:	18fb      	adds	r3, r7, r3
 801bd96:	2200      	movs	r2, #0
 801bd98:	569a      	ldrsb	r2, [r3, r2]
 801bd9a:	2317      	movs	r3, #23
 801bd9c:	18fb      	adds	r3, r7, r3
 801bd9e:	4910      	ldr	r1, [pc, #64]	; (801bde0 <RegionUS915RxConfig+0x124>)
 801bda0:	5c8a      	ldrb	r2, [r1, r2]
 801bda2:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801bda4:	4b09      	ldr	r3, [pc, #36]	; (801bdcc <RegionUS915RxConfig+0x110>)
 801bda6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bda8:	2217      	movs	r2, #23
 801bdaa:	18ba      	adds	r2, r7, r2
 801bdac:	7812      	ldrb	r2, [r2, #0]
 801bdae:	320d      	adds	r2, #13
 801bdb0:	b2d2      	uxtb	r2, r2
 801bdb2:	0011      	movs	r1, r2
 801bdb4:	2001      	movs	r0, #1
 801bdb6:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	220f      	movs	r2, #15
 801bdbc:	18ba      	adds	r2, r7, r2
 801bdbe:	7812      	ldrb	r2, [r2, #0]
 801bdc0:	701a      	strb	r2, [r3, #0]
    return true;
 801bdc2:	2301      	movs	r3, #1
}
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	b006      	add	sp, #24
 801bdca:	bdb0      	pop	{r4, r5, r7, pc}
 801bdcc:	080293d8 	.word	0x080293d8
 801bdd0:	000927c0 	.word	0x000927c0
 801bdd4:	370870a0 	.word	0x370870a0
 801bdd8:	08029280 	.word	0x08029280
 801bddc:	080292f4 	.word	0x080292f4
 801bde0:	080292e4 	.word	0x080292e4

0801bde4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bde6:	b093      	sub	sp, #76	; 0x4c
 801bde8:	af0a      	add	r7, sp, #40	; 0x28
 801bdea:	60f8      	str	r0, [r7, #12]
 801bdec:	60b9      	str	r1, [r7, #8]
 801bdee:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	785b      	ldrb	r3, [r3, #1]
 801bdf4:	b25b      	sxtb	r3, r3
 801bdf6:	001a      	movs	r2, r3
 801bdf8:	4b41      	ldr	r3, [pc, #260]	; (801bf00 <RegionUS915TxConfig+0x11c>)
 801bdfa:	5c9a      	ldrb	r2, [r3, r2]
 801bdfc:	231f      	movs	r3, #31
 801bdfe:	18fb      	adds	r3, r7, r3
 801be00:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	2002      	movs	r0, #2
 801be06:	5618      	ldrsb	r0, [r3, r0]
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	781b      	ldrb	r3, [r3, #0]
 801be0c:	0019      	movs	r1, r3
 801be0e:	4a3d      	ldr	r2, [pc, #244]	; (801bf04 <RegionUS915TxConfig+0x120>)
 801be10:	000b      	movs	r3, r1
 801be12:	005b      	lsls	r3, r3, #1
 801be14:	185b      	adds	r3, r3, r1
 801be16:	009b      	lsls	r3, r3, #2
 801be18:	18d3      	adds	r3, r2, r3
 801be1a:	3309      	adds	r3, #9
 801be1c:	781b      	ldrb	r3, [r3, #0]
 801be1e:	4a39      	ldr	r2, [pc, #228]	; (801bf04 <RegionUS915TxConfig+0x120>)
 801be20:	3336      	adds	r3, #54	; 0x36
 801be22:	011b      	lsls	r3, r3, #4
 801be24:	18d3      	adds	r3, r2, r3
 801be26:	3302      	adds	r3, #2
 801be28:	2100      	movs	r1, #0
 801be2a:	5659      	ldrsb	r1, [r3, r1]
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	2201      	movs	r2, #1
 801be30:	569a      	ldrsb	r2, [r3, r2]
 801be32:	251e      	movs	r5, #30
 801be34:	197c      	adds	r4, r7, r5
 801be36:	4b34      	ldr	r3, [pc, #208]	; (801bf08 <RegionUS915TxConfig+0x124>)
 801be38:	f7ff faa6 	bl	801b388 <LimitTxPower>
 801be3c:	0003      	movs	r3, r0
 801be3e:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	785b      	ldrb	r3, [r3, #1]
 801be44:	b25b      	sxtb	r3, r3
 801be46:	0018      	movs	r0, r3
 801be48:	f7ff fa80 	bl	801b34c <GetBandwidth>
 801be4c:	0003      	movs	r3, r0
 801be4e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801be50:	2617      	movs	r6, #23
 801be52:	19bb      	adds	r3, r7, r6
 801be54:	2200      	movs	r2, #0
 801be56:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801be58:	19bc      	adds	r4, r7, r6
 801be5a:	2200      	movs	r2, #0
 801be5c:	492b      	ldr	r1, [pc, #172]	; (801bf0c <RegionUS915TxConfig+0x128>)
 801be5e:	197b      	adds	r3, r7, r5
 801be60:	781b      	ldrb	r3, [r3, #0]
 801be62:	b25b      	sxtb	r3, r3
 801be64:	0018      	movs	r0, r3
 801be66:	f7f8 fe27 	bl	8014ab8 <RegionCommonComputeTxPower>
 801be6a:	0003      	movs	r3, r0
 801be6c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801be6e:	4b28      	ldr	r3, [pc, #160]	; (801bf10 <RegionUS915TxConfig+0x12c>)
 801be70:	695a      	ldr	r2, [r3, #20]
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	781b      	ldrb	r3, [r3, #0]
 801be76:	0018      	movs	r0, r3
 801be78:	4922      	ldr	r1, [pc, #136]	; (801bf04 <RegionUS915TxConfig+0x120>)
 801be7a:	0003      	movs	r3, r0
 801be7c:	005b      	lsls	r3, r3, #1
 801be7e:	181b      	adds	r3, r3, r0
 801be80:	009b      	lsls	r3, r3, #2
 801be82:	585b      	ldr	r3, [r3, r1]
 801be84:	0018      	movs	r0, r3
 801be86:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801be88:	4b21      	ldr	r3, [pc, #132]	; (801bf10 <RegionUS915TxConfig+0x12c>)
 801be8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801be8c:	231f      	movs	r3, #31
 801be8e:	18fb      	adds	r3, r7, r3
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	b25b      	sxtb	r3, r3
 801be94:	69b8      	ldr	r0, [r7, #24]
 801be96:	19ba      	adds	r2, r7, r6
 801be98:	2100      	movs	r1, #0
 801be9a:	5651      	ldrsb	r1, [r2, r1]
 801be9c:	4a1d      	ldr	r2, [pc, #116]	; (801bf14 <RegionUS915TxConfig+0x130>)
 801be9e:	9208      	str	r2, [sp, #32]
 801bea0:	2200      	movs	r2, #0
 801bea2:	9207      	str	r2, [sp, #28]
 801bea4:	2200      	movs	r2, #0
 801bea6:	9206      	str	r2, [sp, #24]
 801bea8:	2200      	movs	r2, #0
 801beaa:	9205      	str	r2, [sp, #20]
 801beac:	2201      	movs	r2, #1
 801beae:	9204      	str	r2, [sp, #16]
 801beb0:	2200      	movs	r2, #0
 801beb2:	9203      	str	r2, [sp, #12]
 801beb4:	2208      	movs	r2, #8
 801beb6:	9202      	str	r2, [sp, #8]
 801beb8:	2201      	movs	r2, #1
 801beba:	9201      	str	r2, [sp, #4]
 801bebc:	9300      	str	r3, [sp, #0]
 801bebe:	0003      	movs	r3, r0
 801bec0:	2200      	movs	r2, #0
 801bec2:	2001      	movs	r0, #1
 801bec4:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    //log_info("TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801bec6:	4b12      	ldr	r3, [pc, #72]	; (801bf10 <RegionUS915TxConfig+0x12c>)
 801bec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801beca:	68fa      	ldr	r2, [r7, #12]
 801becc:	8992      	ldrh	r2, [r2, #12]
 801bece:	b2d2      	uxtb	r2, r2
 801bed0:	0011      	movs	r1, r2
 801bed2:	2001      	movs	r0, #1
 801bed4:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 801bed6:	4b0e      	ldr	r3, [pc, #56]	; (801bf10 <RegionUS915TxConfig+0x12c>)
 801bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801beda:	68fa      	ldr	r2, [r7, #12]
 801bedc:	8992      	ldrh	r2, [r2, #12]
 801bede:	b2d2      	uxtb	r2, r2
 801bee0:	0011      	movs	r1, r2
 801bee2:	2001      	movs	r0, #1
 801bee4:	4798      	blx	r3
 801bee6:	0002      	movs	r2, r0
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	601a      	str	r2, [r3, #0]
    *txPower = txPowerLimited;
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	197a      	adds	r2, r7, r5
 801bef0:	7812      	ldrb	r2, [r2, #0]
 801bef2:	701a      	strb	r2, [r3, #0]

    return true;
 801bef4:	2301      	movs	r3, #1
}
 801bef6:	0018      	movs	r0, r3
 801bef8:	46bd      	mov	sp, r7
 801befa:	b009      	add	sp, #36	; 0x24
 801befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801befe:	46c0      	nop			; (mov r8, r8)
 801bf00:	08029280 	.word	0x08029280
 801bf04:	200019a4 	.word	0x200019a4
 801bf08:	20001d14 	.word	0x20001d14
 801bf0c:	41f00000 	.word	0x41f00000
 801bf10:	080293d8 	.word	0x080293d8
 801bf14:	00000bb8 	.word	0x00000bb8

0801bf18 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf1a:	b095      	sub	sp, #84	; 0x54
 801bf1c:	af00      	add	r7, sp, #0
 801bf1e:	60f8      	str	r0, [r7, #12]
 801bf20:	60b9      	str	r1, [r7, #8]
 801bf22:	607a      	str	r2, [r7, #4]
 801bf24:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801bf26:	234f      	movs	r3, #79	; 0x4f
 801bf28:	18fb      	adds	r3, r7, r3
 801bf2a:	2207      	movs	r2, #7
 801bf2c:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801bf2e:	234b      	movs	r3, #75	; 0x4b
 801bf30:	18fb      	adds	r3, r7, r3
 801bf32:	2200      	movs	r2, #0
 801bf34:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801bf36:	234e      	movs	r3, #78	; 0x4e
 801bf38:	18fb      	adds	r3, r7, r3
 801bf3a:	2200      	movs	r2, #0
 801bf3c:	701a      	strb	r2, [r3, #0]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801bf3e:	2438      	movs	r4, #56	; 0x38
 801bf40:	193b      	adds	r3, r7, r4
 801bf42:	0018      	movs	r0, r3
 801bf44:	230c      	movs	r3, #12
 801bf46:	001a      	movs	r2, r3
 801bf48:	2100      	movs	r1, #0
 801bf4a:	f009 ffdd 	bl	8025f08 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 801bf4e:	49a3      	ldr	r1, [pc, #652]	; (801c1dc <RegionUS915LinkAdrReq+0x2c4>)
 801bf50:	193b      	adds	r3, r7, r4
 801bf52:	2206      	movs	r2, #6
 801bf54:	0018      	movs	r0, r3
 801bf56:	f7f8 faa8 	bl	80144aa <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801bf5a:	e136      	b.n	801c1ca <RegionUS915LinkAdrReq+0x2b2>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	685a      	ldr	r2, [r3, #4]
 801bf60:	234e      	movs	r3, #78	; 0x4e
 801bf62:	18fb      	adds	r3, r7, r3
 801bf64:	781b      	ldrb	r3, [r3, #0]
 801bf66:	18d3      	adds	r3, r2, r3
 801bf68:	254b      	movs	r5, #75	; 0x4b
 801bf6a:	197c      	adds	r4, r7, r5
 801bf6c:	2244      	movs	r2, #68	; 0x44
 801bf6e:	18ba      	adds	r2, r7, r2
 801bf70:	0011      	movs	r1, r2
 801bf72:	0018      	movs	r0, r3
 801bf74:	f7f8 fbd8 	bl	8014728 <RegionCommonParseLinkAdrReq>
 801bf78:	0003      	movs	r3, r0
 801bf7a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801bf7c:	197b      	adds	r3, r7, r5
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d100      	bne.n	801bf86 <RegionUS915LinkAdrReq+0x6e>
 801bf84:	e12e      	b.n	801c1e4 <RegionUS915LinkAdrReq+0x2cc>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801bf86:	224e      	movs	r2, #78	; 0x4e
 801bf88:	18bb      	adds	r3, r7, r2
 801bf8a:	18b9      	adds	r1, r7, r2
 801bf8c:	224b      	movs	r2, #75	; 0x4b
 801bf8e:	18ba      	adds	r2, r7, r2
 801bf90:	7809      	ldrb	r1, [r1, #0]
 801bf92:	7812      	ldrb	r2, [r2, #0]
 801bf94:	188a      	adds	r2, r1, r2
 801bf96:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801bf98:	234f      	movs	r3, #79	; 0x4f
 801bf9a:	18fb      	adds	r3, r7, r3
 801bf9c:	2207      	movs	r2, #7
 801bf9e:	701a      	strb	r2, [r3, #0]

        if( linkAdrParams.ChMaskCtrl == 6 )
 801bfa0:	2344      	movs	r3, #68	; 0x44
 801bfa2:	18fb      	adds	r3, r7, r3
 801bfa4:	78db      	ldrb	r3, [r3, #3]
 801bfa6:	2b06      	cmp	r3, #6
 801bfa8:	d119      	bne.n	801bfde <RegionUS915LinkAdrReq+0xc6>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801bfaa:	2138      	movs	r1, #56	; 0x38
 801bfac:	187b      	adds	r3, r7, r1
 801bfae:	2201      	movs	r2, #1
 801bfb0:	4252      	negs	r2, r2
 801bfb2:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 801bfb4:	187b      	adds	r3, r7, r1
 801bfb6:	2201      	movs	r2, #1
 801bfb8:	4252      	negs	r2, r2
 801bfba:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 801bfbc:	187b      	adds	r3, r7, r1
 801bfbe:	2201      	movs	r2, #1
 801bfc0:	4252      	negs	r2, r2
 801bfc2:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 801bfc4:	187b      	adds	r3, r7, r1
 801bfc6:	2201      	movs	r2, #1
 801bfc8:	4252      	negs	r2, r2
 801bfca:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801bfcc:	2344      	movs	r3, #68	; 0x44
 801bfce:	18fb      	adds	r3, r7, r3
 801bfd0:	889b      	ldrh	r3, [r3, #4]
 801bfd2:	22ff      	movs	r2, #255	; 0xff
 801bfd4:	4013      	ands	r3, r2
 801bfd6:	b29a      	uxth	r2, r3
 801bfd8:	187b      	adds	r3, r7, r1
 801bfda:	811a      	strh	r2, [r3, #8]
 801bfdc:	e0f5      	b.n	801c1ca <RegionUS915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801bfde:	2344      	movs	r3, #68	; 0x44
 801bfe0:	18fb      	adds	r3, r7, r3
 801bfe2:	78db      	ldrb	r3, [r3, #3]
 801bfe4:	2b07      	cmp	r3, #7
 801bfe6:	d115      	bne.n	801c014 <RegionUS915LinkAdrReq+0xfc>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801bfe8:	2138      	movs	r1, #56	; 0x38
 801bfea:	187b      	adds	r3, r7, r1
 801bfec:	2200      	movs	r2, #0
 801bfee:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0x0000;
 801bff0:	187b      	adds	r3, r7, r1
 801bff2:	2200      	movs	r2, #0
 801bff4:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0x0000;
 801bff6:	187b      	adds	r3, r7, r1
 801bff8:	2200      	movs	r2, #0
 801bffa:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0x0000;
 801bffc:	187b      	adds	r3, r7, r1
 801bffe:	2200      	movs	r2, #0
 801c000:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801c002:	2344      	movs	r3, #68	; 0x44
 801c004:	18fb      	adds	r3, r7, r3
 801c006:	889b      	ldrh	r3, [r3, #4]
 801c008:	22ff      	movs	r2, #255	; 0xff
 801c00a:	4013      	ands	r3, r2
 801c00c:	b29a      	uxth	r2, r3
 801c00e:	187b      	adds	r3, r7, r1
 801c010:	811a      	strh	r2, [r3, #8]
 801c012:	e0da      	b.n	801c1ca <RegionUS915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801c014:	2344      	movs	r3, #68	; 0x44
 801c016:	18fb      	adds	r3, r7, r3
 801c018:	78db      	ldrb	r3, [r3, #3]
 801c01a:	2b05      	cmp	r3, #5
 801c01c:	d000      	beq.n	801c020 <RegionUS915LinkAdrReq+0x108>
 801c01e:	e0ca      	b.n	801c1b6 <RegionUS915LinkAdrReq+0x29e>
        {
            // Start value for comparision
            uint8_t bitMask = 1;
 801c020:	234a      	movs	r3, #74	; 0x4a
 801c022:	18fb      	adds	r3, r7, r3
 801c024:	2201      	movs	r2, #1
 801c026:	701a      	strb	r2, [r3, #0]

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801c028:	234d      	movs	r3, #77	; 0x4d
 801c02a:	18fb      	adds	r3, r7, r3
 801c02c:	2200      	movs	r2, #0
 801c02e:	701a      	strb	r2, [r3, #0]

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801c030:	234c      	movs	r3, #76	; 0x4c
 801c032:	18fb      	adds	r3, r7, r3
 801c034:	2200      	movs	r2, #0
 801c036:	701a      	strb	r2, [r3, #0]
 801c038:	e0b6      	b.n	801c1a8 <RegionUS915LinkAdrReq+0x290>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801c03a:	2344      	movs	r3, #68	; 0x44
 801c03c:	18fb      	adds	r3, r7, r3
 801c03e:	889b      	ldrh	r3, [r3, #4]
 801c040:	001a      	movs	r2, r3
 801c042:	23ff      	movs	r3, #255	; 0xff
 801c044:	4013      	ands	r3, r2
 801c046:	224a      	movs	r2, #74	; 0x4a
 801c048:	18ba      	adds	r2, r7, r2
 801c04a:	7811      	ldrb	r1, [r2, #0]
 801c04c:	224c      	movs	r2, #76	; 0x4c
 801c04e:	18ba      	adds	r2, r7, r2
 801c050:	7812      	ldrb	r2, [r2, #0]
 801c052:	4091      	lsls	r1, r2
 801c054:	000a      	movs	r2, r1
 801c056:	4013      	ands	r3, r2
 801c058:	d04e      	beq.n	801c0f8 <RegionUS915LinkAdrReq+0x1e0>
                {
                    if( ( i % 2 ) == 0 )
 801c05a:	234c      	movs	r3, #76	; 0x4c
 801c05c:	18fb      	adds	r3, r7, r3
 801c05e:	781b      	ldrb	r3, [r3, #0]
 801c060:	2201      	movs	r2, #1
 801c062:	4013      	ands	r3, r2
 801c064:	b2db      	uxtb	r3, r3
 801c066:	2b00      	cmp	r3, #0
 801c068:	d120      	bne.n	801c0ac <RegionUS915LinkAdrReq+0x194>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801c06a:	214d      	movs	r1, #77	; 0x4d
 801c06c:	187b      	adds	r3, r7, r1
 801c06e:	781a      	ldrb	r2, [r3, #0]
 801c070:	2038      	movs	r0, #56	; 0x38
 801c072:	183b      	adds	r3, r7, r0
 801c074:	0052      	lsls	r2, r2, #1
 801c076:	5ad3      	ldrh	r3, [r2, r3]
 801c078:	187a      	adds	r2, r7, r1
 801c07a:	7812      	ldrb	r2, [r2, #0]
 801c07c:	21ff      	movs	r1, #255	; 0xff
 801c07e:	430b      	orrs	r3, r1
 801c080:	b299      	uxth	r1, r3
 801c082:	183b      	adds	r3, r7, r0
 801c084:	0052      	lsls	r2, r2, #1
 801c086:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801c088:	183b      	adds	r3, r7, r0
 801c08a:	891b      	ldrh	r3, [r3, #8]
 801c08c:	b21a      	sxth	r2, r3
 801c08e:	234a      	movs	r3, #74	; 0x4a
 801c090:	18fb      	adds	r3, r7, r3
 801c092:	7819      	ldrb	r1, [r3, #0]
 801c094:	234c      	movs	r3, #76	; 0x4c
 801c096:	18fb      	adds	r3, r7, r3
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	4099      	lsls	r1, r3
 801c09c:	000b      	movs	r3, r1
 801c09e:	b21b      	sxth	r3, r3
 801c0a0:	4313      	orrs	r3, r2
 801c0a2:	b21b      	sxth	r3, r3
 801c0a4:	b29a      	uxth	r2, r3
 801c0a6:	183b      	adds	r3, r7, r0
 801c0a8:	811a      	strh	r2, [r3, #8]
 801c0aa:	e077      	b.n	801c19c <RegionUS915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801c0ac:	204d      	movs	r0, #77	; 0x4d
 801c0ae:	183b      	adds	r3, r7, r0
 801c0b0:	781a      	ldrb	r2, [r3, #0]
 801c0b2:	2438      	movs	r4, #56	; 0x38
 801c0b4:	193b      	adds	r3, r7, r4
 801c0b6:	0052      	lsls	r2, r2, #1
 801c0b8:	5ad3      	ldrh	r3, [r2, r3]
 801c0ba:	183a      	adds	r2, r7, r0
 801c0bc:	7812      	ldrb	r2, [r2, #0]
 801c0be:	4948      	ldr	r1, [pc, #288]	; (801c1e0 <RegionUS915LinkAdrReq+0x2c8>)
 801c0c0:	430b      	orrs	r3, r1
 801c0c2:	b299      	uxth	r1, r3
 801c0c4:	193b      	adds	r3, r7, r4
 801c0c6:	0052      	lsls	r2, r2, #1
 801c0c8:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801c0ca:	193b      	adds	r3, r7, r4
 801c0cc:	891b      	ldrh	r3, [r3, #8]
 801c0ce:	b21a      	sxth	r2, r3
 801c0d0:	234a      	movs	r3, #74	; 0x4a
 801c0d2:	18fb      	adds	r3, r7, r3
 801c0d4:	7819      	ldrb	r1, [r3, #0]
 801c0d6:	234c      	movs	r3, #76	; 0x4c
 801c0d8:	18fb      	adds	r3, r7, r3
 801c0da:	781b      	ldrb	r3, [r3, #0]
 801c0dc:	4099      	lsls	r1, r3
 801c0de:	000b      	movs	r3, r1
 801c0e0:	b21b      	sxth	r3, r3
 801c0e2:	4313      	orrs	r3, r2
 801c0e4:	b21b      	sxth	r3, r3
 801c0e6:	b29a      	uxth	r2, r3
 801c0e8:	193b      	adds	r3, r7, r4
 801c0ea:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801c0ec:	183b      	adds	r3, r7, r0
 801c0ee:	781a      	ldrb	r2, [r3, #0]
 801c0f0:	183b      	adds	r3, r7, r0
 801c0f2:	3201      	adds	r2, #1
 801c0f4:	701a      	strb	r2, [r3, #0]
 801c0f6:	e051      	b.n	801c19c <RegionUS915LinkAdrReq+0x284>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801c0f8:	234c      	movs	r3, #76	; 0x4c
 801c0fa:	18fb      	adds	r3, r7, r3
 801c0fc:	781b      	ldrb	r3, [r3, #0]
 801c0fe:	2201      	movs	r2, #1
 801c100:	4013      	ands	r3, r2
 801c102:	b2db      	uxtb	r3, r3
 801c104:	2b00      	cmp	r3, #0
 801c106:	d122      	bne.n	801c14e <RegionUS915LinkAdrReq+0x236>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801c108:	214d      	movs	r1, #77	; 0x4d
 801c10a:	187b      	adds	r3, r7, r1
 801c10c:	781a      	ldrb	r2, [r3, #0]
 801c10e:	2038      	movs	r0, #56	; 0x38
 801c110:	183b      	adds	r3, r7, r0
 801c112:	0052      	lsls	r2, r2, #1
 801c114:	5ad3      	ldrh	r3, [r2, r3]
 801c116:	187a      	adds	r2, r7, r1
 801c118:	7812      	ldrb	r2, [r2, #0]
 801c11a:	21ff      	movs	r1, #255	; 0xff
 801c11c:	438b      	bics	r3, r1
 801c11e:	b299      	uxth	r1, r3
 801c120:	183b      	adds	r3, r7, r0
 801c122:	0052      	lsls	r2, r2, #1
 801c124:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801c126:	183b      	adds	r3, r7, r0
 801c128:	891b      	ldrh	r3, [r3, #8]
 801c12a:	b21b      	sxth	r3, r3
 801c12c:	224a      	movs	r2, #74	; 0x4a
 801c12e:	18ba      	adds	r2, r7, r2
 801c130:	7811      	ldrb	r1, [r2, #0]
 801c132:	224c      	movs	r2, #76	; 0x4c
 801c134:	18ba      	adds	r2, r7, r2
 801c136:	7812      	ldrb	r2, [r2, #0]
 801c138:	4091      	lsls	r1, r2
 801c13a:	000a      	movs	r2, r1
 801c13c:	b212      	sxth	r2, r2
 801c13e:	43d2      	mvns	r2, r2
 801c140:	b212      	sxth	r2, r2
 801c142:	4013      	ands	r3, r2
 801c144:	b21b      	sxth	r3, r3
 801c146:	b29a      	uxth	r2, r3
 801c148:	183b      	adds	r3, r7, r0
 801c14a:	811a      	strh	r2, [r3, #8]
 801c14c:	e026      	b.n	801c19c <RegionUS915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801c14e:	204d      	movs	r0, #77	; 0x4d
 801c150:	183b      	adds	r3, r7, r0
 801c152:	781a      	ldrb	r2, [r3, #0]
 801c154:	2438      	movs	r4, #56	; 0x38
 801c156:	193b      	adds	r3, r7, r4
 801c158:	0052      	lsls	r2, r2, #1
 801c15a:	5ad3      	ldrh	r3, [r2, r3]
 801c15c:	183a      	adds	r2, r7, r0
 801c15e:	7812      	ldrb	r2, [r2, #0]
 801c160:	21ff      	movs	r1, #255	; 0xff
 801c162:	400b      	ands	r3, r1
 801c164:	b299      	uxth	r1, r3
 801c166:	193b      	adds	r3, r7, r4
 801c168:	0052      	lsls	r2, r2, #1
 801c16a:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801c16c:	193b      	adds	r3, r7, r4
 801c16e:	891b      	ldrh	r3, [r3, #8]
 801c170:	b21b      	sxth	r3, r3
 801c172:	224a      	movs	r2, #74	; 0x4a
 801c174:	18ba      	adds	r2, r7, r2
 801c176:	7811      	ldrb	r1, [r2, #0]
 801c178:	224c      	movs	r2, #76	; 0x4c
 801c17a:	18ba      	adds	r2, r7, r2
 801c17c:	7812      	ldrb	r2, [r2, #0]
 801c17e:	4091      	lsls	r1, r2
 801c180:	000a      	movs	r2, r1
 801c182:	b212      	sxth	r2, r2
 801c184:	43d2      	mvns	r2, r2
 801c186:	b212      	sxth	r2, r2
 801c188:	4013      	ands	r3, r2
 801c18a:	b21b      	sxth	r3, r3
 801c18c:	b29a      	uxth	r2, r3
 801c18e:	193b      	adds	r3, r7, r4
 801c190:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801c192:	183b      	adds	r3, r7, r0
 801c194:	781a      	ldrb	r2, [r3, #0]
 801c196:	183b      	adds	r3, r7, r0
 801c198:	3201      	adds	r2, #1
 801c19a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i <= 7; i++ )
 801c19c:	214c      	movs	r1, #76	; 0x4c
 801c19e:	187b      	adds	r3, r7, r1
 801c1a0:	781a      	ldrb	r2, [r3, #0]
 801c1a2:	187b      	adds	r3, r7, r1
 801c1a4:	3201      	adds	r2, #1
 801c1a6:	701a      	strb	r2, [r3, #0]
 801c1a8:	234c      	movs	r3, #76	; 0x4c
 801c1aa:	18fb      	adds	r3, r7, r3
 801c1ac:	781b      	ldrb	r3, [r3, #0]
 801c1ae:	2b07      	cmp	r3, #7
 801c1b0:	d800      	bhi.n	801c1b4 <RegionUS915LinkAdrReq+0x29c>
 801c1b2:	e742      	b.n	801c03a <RegionUS915LinkAdrReq+0x122>
 801c1b4:	e009      	b.n	801c1ca <RegionUS915LinkAdrReq+0x2b2>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801c1b6:	2144      	movs	r1, #68	; 0x44
 801c1b8:	187b      	adds	r3, r7, r1
 801c1ba:	78db      	ldrb	r3, [r3, #3]
 801c1bc:	001a      	movs	r2, r3
 801c1be:	187b      	adds	r3, r7, r1
 801c1c0:	8899      	ldrh	r1, [r3, #4]
 801c1c2:	2338      	movs	r3, #56	; 0x38
 801c1c4:	18fb      	adds	r3, r7, r3
 801c1c6:	0052      	lsls	r2, r2, #1
 801c1c8:	52d1      	strh	r1, [r2, r3]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	7a1b      	ldrb	r3, [r3, #8]
 801c1ce:	224e      	movs	r2, #78	; 0x4e
 801c1d0:	18ba      	adds	r2, r7, r2
 801c1d2:	7812      	ldrb	r2, [r2, #0]
 801c1d4:	429a      	cmp	r2, r3
 801c1d6:	d200      	bcs.n	801c1da <RegionUS915LinkAdrReq+0x2c2>
 801c1d8:	e6c0      	b.n	801bf5c <RegionUS915LinkAdrReq+0x44>
 801c1da:	e004      	b.n	801c1e6 <RegionUS915LinkAdrReq+0x2ce>
 801c1dc:	20001d14 	.word	0x20001d14
 801c1e0:	ffffff00 	.word	0xffffff00
            break; // break loop, since no more request has been found
 801c1e4:	46c0      	nop			; (mov r8, r8)
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801c1e6:	2344      	movs	r3, #68	; 0x44
 801c1e8:	18fb      	adds	r3, r7, r3
 801c1ea:	785b      	ldrb	r3, [r3, #1]
 801c1ec:	b25b      	sxtb	r3, r3
 801c1ee:	2b03      	cmp	r3, #3
 801c1f0:	dc10      	bgt.n	801c214 <RegionUS915LinkAdrReq+0x2fc>
 801c1f2:	2338      	movs	r3, #56	; 0x38
 801c1f4:	18fb      	adds	r3, r7, r3
 801c1f6:	2204      	movs	r2, #4
 801c1f8:	2100      	movs	r1, #0
 801c1fa:	0018      	movs	r0, r3
 801c1fc:	f7f8 f914 	bl	8014428 <RegionCommonCountChannels>
 801c200:	0003      	movs	r3, r0
 801c202:	2b01      	cmp	r3, #1
 801c204:	d806      	bhi.n	801c214 <RegionUS915LinkAdrReq+0x2fc>
    {
        status &= 0xFE; // Channel mask KO
 801c206:	224f      	movs	r2, #79	; 0x4f
 801c208:	18bb      	adds	r3, r7, r2
 801c20a:	18ba      	adds	r2, r7, r2
 801c20c:	7812      	ldrb	r2, [r2, #0]
 801c20e:	2101      	movs	r1, #1
 801c210:	438a      	bics	r2, r1
 801c212:	701a      	strb	r2, [r3, #0]
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801c214:	2134      	movs	r1, #52	; 0x34
 801c216:	187b      	adds	r3, r7, r1
 801c218:	2201      	movs	r2, #1
 801c21a:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	7a5a      	ldrb	r2, [r3, #9]
 801c220:	187b      	adds	r3, r7, r1
 801c222:	709a      	strb	r2, [r3, #2]
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801c224:	187b      	adds	r3, r7, r1
 801c226:	0018      	movs	r0, r3
 801c228:	f7ff fa08 	bl	801b63c <RegionUS915GetPhyParam>
 801c22c:	0003      	movs	r3, r0
 801c22e:	001a      	movs	r2, r3
 801c230:	2030      	movs	r0, #48	; 0x30
 801c232:	183b      	adds	r3, r7, r0
 801c234:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 801c236:	2110      	movs	r1, #16
 801c238:	187b      	adds	r3, r7, r1
 801c23a:	244f      	movs	r4, #79	; 0x4f
 801c23c:	193a      	adds	r2, r7, r4
 801c23e:	7812      	ldrb	r2, [r2, #0]
 801c240:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	7a9a      	ldrb	r2, [r3, #10]
 801c246:	187b      	adds	r3, r7, r1
 801c248:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801c24a:	2544      	movs	r5, #68	; 0x44
 801c24c:	197b      	adds	r3, r7, r5
 801c24e:	2201      	movs	r2, #1
 801c250:	569a      	ldrsb	r2, [r3, r2]
 801c252:	187b      	adds	r3, r7, r1
 801c254:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801c256:	197b      	adds	r3, r7, r5
 801c258:	2202      	movs	r2, #2
 801c25a:	569a      	ldrsb	r2, [r3, r2]
 801c25c:	187b      	adds	r3, r7, r1
 801c25e:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801c260:	197b      	adds	r3, r7, r5
 801c262:	781a      	ldrb	r2, [r3, #0]
 801c264:	187b      	adds	r3, r7, r1
 801c266:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	220b      	movs	r2, #11
 801c26c:	569a      	ldrsb	r2, [r3, r2]
 801c26e:	187b      	adds	r3, r7, r1
 801c270:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	220c      	movs	r2, #12
 801c276:	569a      	ldrsb	r2, [r3, r2]
 801c278:	187b      	adds	r3, r7, r1
 801c27a:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	7b5b      	ldrb	r3, [r3, #13]
 801c280:	b25a      	sxtb	r2, r3
 801c282:	187b      	adds	r3, r7, r1
 801c284:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801c286:	187b      	adds	r3, r7, r1
 801c288:	2248      	movs	r2, #72	; 0x48
 801c28a:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801c28c:	187b      	adds	r3, r7, r1
 801c28e:	2238      	movs	r2, #56	; 0x38
 801c290:	18ba      	adds	r2, r7, r2
 801c292:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801c294:	183b      	adds	r3, r7, r0
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	b25a      	sxtb	r2, r3
 801c29a:	0008      	movs	r0, r1
 801c29c:	183b      	adds	r3, r7, r0
 801c29e:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801c2a0:	183b      	adds	r3, r7, r0
 801c2a2:	2204      	movs	r2, #4
 801c2a4:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801c2a6:	183b      	adds	r3, r7, r0
 801c2a8:	4a40      	ldr	r2, [pc, #256]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c2aa:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801c2ac:	183b      	adds	r3, r7, r0
 801c2ae:	220a      	movs	r2, #10
 801c2b0:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801c2b2:	183b      	adds	r3, r7, r0
 801c2b4:	2200      	movs	r2, #0
 801c2b6:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801c2b8:	183b      	adds	r3, r7, r0
 801c2ba:	68fa      	ldr	r2, [r7, #12]
 801c2bc:	6812      	ldr	r2, [r2, #0]
 801c2be:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801c2c0:	0026      	movs	r6, r4
 801c2c2:	193c      	adds	r4, r7, r4
 801c2c4:	0029      	movs	r1, r5
 801c2c6:	187d      	adds	r5, r7, r1
 801c2c8:	187b      	adds	r3, r7, r1
 801c2ca:	1c9a      	adds	r2, r3, #2
 801c2cc:	187b      	adds	r3, r7, r1
 801c2ce:	1c59      	adds	r1, r3, #1
 801c2d0:	1838      	adds	r0, r7, r0
 801c2d2:	002b      	movs	r3, r5
 801c2d4:	f7f8 fa7e 	bl	80147d4 <RegionCommonLinkAdrReqVerifyParams>
 801c2d8:	0003      	movs	r3, r0
 801c2da:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801c2dc:	0034      	movs	r4, r6
 801c2de:	193b      	adds	r3, r7, r4
 801c2e0:	781b      	ldrb	r3, [r3, #0]
 801c2e2:	2b07      	cmp	r3, #7
 801c2e4:	d146      	bne.n	801c374 <RegionUS915LinkAdrReq+0x45c>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 801c2e6:	2338      	movs	r3, #56	; 0x38
 801c2e8:	18f9      	adds	r1, r7, r3
 801c2ea:	4b31      	ldr	r3, [pc, #196]	; (801c3b0 <RegionUS915LinkAdrReq+0x498>)
 801c2ec:	2206      	movs	r2, #6
 801c2ee:	0018      	movs	r0, r3
 801c2f0:	f7f8 f8db 	bl	80144aa <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 801c2f4:	4a2d      	ldr	r2, [pc, #180]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c2f6:	23df      	movs	r3, #223	; 0xdf
 801c2f8:	009b      	lsls	r3, r3, #2
 801c2fa:	5ad3      	ldrh	r3, [r2, r3]
 801c2fc:	492b      	ldr	r1, [pc, #172]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c2fe:	22dc      	movs	r2, #220	; 0xdc
 801c300:	0092      	lsls	r2, r2, #2
 801c302:	5a8a      	ldrh	r2, [r1, r2]
 801c304:	4013      	ands	r3, r2
 801c306:	b299      	uxth	r1, r3
 801c308:	4a28      	ldr	r2, [pc, #160]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c30a:	23df      	movs	r3, #223	; 0xdf
 801c30c:	009b      	lsls	r3, r3, #2
 801c30e:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 801c310:	4b26      	ldr	r3, [pc, #152]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c312:	4a28      	ldr	r2, [pc, #160]	; (801c3b4 <RegionUS915LinkAdrReq+0x49c>)
 801c314:	5a9b      	ldrh	r3, [r3, r2]
 801c316:	4a25      	ldr	r2, [pc, #148]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c318:	4927      	ldr	r1, [pc, #156]	; (801c3b8 <RegionUS915LinkAdrReq+0x4a0>)
 801c31a:	5a52      	ldrh	r2, [r2, r1]
 801c31c:	4013      	ands	r3, r2
 801c31e:	b299      	uxth	r1, r3
 801c320:	4b22      	ldr	r3, [pc, #136]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c322:	4a24      	ldr	r2, [pc, #144]	; (801c3b4 <RegionUS915LinkAdrReq+0x49c>)
 801c324:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 801c326:	4a21      	ldr	r2, [pc, #132]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c328:	23e0      	movs	r3, #224	; 0xe0
 801c32a:	009b      	lsls	r3, r3, #2
 801c32c:	5ad3      	ldrh	r3, [r2, r3]
 801c32e:	491f      	ldr	r1, [pc, #124]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c330:	22dd      	movs	r2, #221	; 0xdd
 801c332:	0092      	lsls	r2, r2, #2
 801c334:	5a8a      	ldrh	r2, [r1, r2]
 801c336:	4013      	ands	r3, r2
 801c338:	b299      	uxth	r1, r3
 801c33a:	4a1c      	ldr	r2, [pc, #112]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c33c:	23e0      	movs	r3, #224	; 0xe0
 801c33e:	009b      	lsls	r3, r3, #2
 801c340:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 801c342:	4b1a      	ldr	r3, [pc, #104]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c344:	4a1d      	ldr	r2, [pc, #116]	; (801c3bc <RegionUS915LinkAdrReq+0x4a4>)
 801c346:	5a9b      	ldrh	r3, [r3, r2]
 801c348:	4a18      	ldr	r2, [pc, #96]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c34a:	491d      	ldr	r1, [pc, #116]	; (801c3c0 <RegionUS915LinkAdrReq+0x4a8>)
 801c34c:	5a52      	ldrh	r2, [r2, r1]
 801c34e:	4013      	ands	r3, r2
 801c350:	b299      	uxth	r1, r3
 801c352:	4b16      	ldr	r3, [pc, #88]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c354:	4a19      	ldr	r2, [pc, #100]	; (801c3bc <RegionUS915LinkAdrReq+0x4a4>)
 801c356:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 801c358:	4a14      	ldr	r2, [pc, #80]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c35a:	23de      	movs	r3, #222	; 0xde
 801c35c:	009b      	lsls	r3, r3, #2
 801c35e:	5ad1      	ldrh	r1, [r2, r3]
 801c360:	4a12      	ldr	r2, [pc, #72]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c362:	23e1      	movs	r3, #225	; 0xe1
 801c364:	009b      	lsls	r3, r3, #2
 801c366:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 801c368:	4b10      	ldr	r3, [pc, #64]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c36a:	4a16      	ldr	r2, [pc, #88]	; (801c3c4 <RegionUS915LinkAdrReq+0x4ac>)
 801c36c:	5a99      	ldrh	r1, [r3, r2]
 801c36e:	4b0f      	ldr	r3, [pc, #60]	; (801c3ac <RegionUS915LinkAdrReq+0x494>)
 801c370:	4a15      	ldr	r2, [pc, #84]	; (801c3c8 <RegionUS915LinkAdrReq+0x4b0>)
 801c372:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801c374:	2144      	movs	r1, #68	; 0x44
 801c376:	187b      	adds	r3, r7, r1
 801c378:	2201      	movs	r2, #1
 801c37a:	569a      	ldrsb	r2, [r3, r2]
 801c37c:	68bb      	ldr	r3, [r7, #8]
 801c37e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801c380:	187b      	adds	r3, r7, r1
 801c382:	2202      	movs	r2, #2
 801c384:	569a      	ldrsb	r2, [r3, r2]
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801c38a:	187b      	adds	r3, r7, r1
 801c38c:	781a      	ldrb	r2, [r3, #0]
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801c392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c394:	224e      	movs	r2, #78	; 0x4e
 801c396:	18ba      	adds	r2, r7, r2
 801c398:	7812      	ldrb	r2, [r2, #0]
 801c39a:	701a      	strb	r2, [r3, #0]

    return status;
 801c39c:	234f      	movs	r3, #79	; 0x4f
 801c39e:	18fb      	adds	r3, r7, r3
 801c3a0:	781b      	ldrb	r3, [r3, #0]
}
 801c3a2:	0018      	movs	r0, r3
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	b015      	add	sp, #84	; 0x54
 801c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3aa:	46c0      	nop			; (mov r8, r8)
 801c3ac:	200019a4 	.word	0x200019a4
 801c3b0:	20001d14 	.word	0x20001d14
 801c3b4:	0000037e 	.word	0x0000037e
 801c3b8:	00000372 	.word	0x00000372
 801c3bc:	00000382 	.word	0x00000382
 801c3c0:	00000376 	.word	0x00000376
 801c3c4:	0000037a 	.word	0x0000037a
 801c3c8:	00000386 	.word	0x00000386

0801c3cc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b084      	sub	sp, #16
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801c3d4:	230f      	movs	r3, #15
 801c3d6:	18fb      	adds	r3, r7, r3
 801c3d8:	2207      	movs	r2, #7
 801c3da:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	685b      	ldr	r3, [r3, #4]
 801c3e0:	0018      	movs	r0, r3
 801c3e2:	f7ff f81b 	bl	801b41c <VerifyRfFreq>
 801c3e6:	0003      	movs	r3, r0
 801c3e8:	001a      	movs	r2, r3
 801c3ea:	2301      	movs	r3, #1
 801c3ec:	4053      	eors	r3, r2
 801c3ee:	b2db      	uxtb	r3, r3
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d006      	beq.n	801c402 <RegionUS915RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 801c3f4:	220f      	movs	r2, #15
 801c3f6:	18bb      	adds	r3, r7, r2
 801c3f8:	18ba      	adds	r2, r7, r2
 801c3fa:	7812      	ldrb	r2, [r2, #0]
 801c3fc:	2101      	movs	r1, #1
 801c3fe:	438a      	bics	r2, r1
 801c400:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	781b      	ldrb	r3, [r3, #0]
 801c406:	b25b      	sxtb	r3, r3
 801c408:	220d      	movs	r2, #13
 801c40a:	2108      	movs	r1, #8
 801c40c:	0018      	movs	r0, r3
 801c40e:	f7f7 ffa3 	bl	8014358 <RegionCommonValueInRange>
 801c412:	1e03      	subs	r3, r0, #0
 801c414:	d106      	bne.n	801c424 <RegionUS915RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801c416:	220f      	movs	r2, #15
 801c418:	18bb      	adds	r3, r7, r2
 801c41a:	18ba      	adds	r2, r7, r2
 801c41c:	7812      	ldrb	r2, [r2, #0]
 801c41e:	2102      	movs	r1, #2
 801c420:	438a      	bics	r2, r1
 801c422:	701a      	strb	r2, [r3, #0]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	781b      	ldrb	r3, [r3, #0]
 801c428:	b25b      	sxtb	r3, r3
 801c42a:	2207      	movs	r2, #7
 801c42c:	2105      	movs	r1, #5
 801c42e:	0018      	movs	r0, r3
 801c430:	f7f7 ff92 	bl	8014358 <RegionCommonValueInRange>
 801c434:	0003      	movs	r3, r0
 801c436:	2b01      	cmp	r3, #1
 801c438:	d004      	beq.n	801c444 <RegionUS915RxParamSetupReq+0x78>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	781b      	ldrb	r3, [r3, #0]
 801c43e:	b25b      	sxtb	r3, r3
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801c440:	2b0d      	cmp	r3, #13
 801c442:	dd06      	ble.n	801c452 <RegionUS915RxParamSetupReq+0x86>
    {
        status &= 0xFD; // Datarate KO
 801c444:	220f      	movs	r2, #15
 801c446:	18bb      	adds	r3, r7, r2
 801c448:	18ba      	adds	r2, r7, r2
 801c44a:	7812      	ldrb	r2, [r2, #0]
 801c44c:	2102      	movs	r1, #2
 801c44e:	438a      	bics	r2, r1
 801c450:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	785b      	ldrb	r3, [r3, #1]
 801c456:	b25b      	sxtb	r3, r3
 801c458:	2203      	movs	r2, #3
 801c45a:	2100      	movs	r1, #0
 801c45c:	0018      	movs	r0, r3
 801c45e:	f7f7 ff7b 	bl	8014358 <RegionCommonValueInRange>
 801c462:	1e03      	subs	r3, r0, #0
 801c464:	d106      	bne.n	801c474 <RegionUS915RxParamSetupReq+0xa8>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801c466:	220f      	movs	r2, #15
 801c468:	18bb      	adds	r3, r7, r2
 801c46a:	18ba      	adds	r2, r7, r2
 801c46c:	7812      	ldrb	r2, [r2, #0]
 801c46e:	2104      	movs	r1, #4
 801c470:	438a      	bics	r2, r1
 801c472:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801c474:	230f      	movs	r3, #15
 801c476:	18fb      	adds	r3, r7, r3
 801c478:	781b      	ldrb	r3, [r3, #0]
}
 801c47a:	0018      	movs	r0, r3
 801c47c:	46bd      	mov	sp, r7
 801c47e:	b004      	add	sp, #16
 801c480:	bd80      	pop	{r7, pc}

0801c482 <RegionUS915NewChannelReq>:

uint8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801c482:	b580      	push	{r7, lr}
 801c484:	b082      	sub	sp, #8
 801c486:	af00      	add	r7, sp, #0
 801c488:	6078      	str	r0, [r7, #4]
    // Datarate and frequency KO
    return 0;
 801c48a:	2300      	movs	r3, #0
}
 801c48c:	0018      	movs	r0, r3
 801c48e:	46bd      	mov	sp, r7
 801c490:	b002      	add	sp, #8
 801c492:	bd80      	pop	{r7, pc}

0801c494 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b082      	sub	sp, #8
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]
    return -1;
 801c49c:	2301      	movs	r3, #1
 801c49e:	425b      	negs	r3, r3
}
 801c4a0:	0018      	movs	r0, r3
 801c4a2:	46bd      	mov	sp, r7
 801c4a4:	b002      	add	sp, #8
 801c4a6:	bd80      	pop	{r7, pc}

0801c4a8 <RegionUS915DlChannelReq>:

uint8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	6078      	str	r0, [r7, #4]
    return 0;
 801c4b0:	2300      	movs	r3, #0
}
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	b002      	add	sp, #8
 801c4b8:	bd80      	pop	{r7, pc}
	...

0801c4bc <RegionUS915CalcBackOff>:
    }
    return currentDr;
}

void RegionUS915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b088      	sub	sp, #32
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 801c4c4:	210c      	movs	r1, #12
 801c4c6:	187b      	adds	r3, r7, r1
 801c4c8:	4a12      	ldr	r2, [pc, #72]	; (801c514 <RegionUS915CalcBackOff+0x58>)
 801c4ca:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801c4cc:	187b      	adds	r3, r7, r1
 801c4ce:	4a12      	ldr	r2, [pc, #72]	; (801c518 <RegionUS915CalcBackOff+0x5c>)
 801c4d0:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	785a      	ldrb	r2, [r3, #1]
 801c4d6:	187b      	adds	r3, r7, r1
 801c4d8:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	781a      	ldrb	r2, [r3, #0]
 801c4de:	187b      	adds	r3, r7, r1
 801c4e0:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	789a      	ldrb	r2, [r3, #2]
 801c4e6:	187b      	adds	r3, r7, r1
 801c4e8:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	78da      	ldrb	r2, [r3, #3]
 801c4ee:	187b      	adds	r3, r7, r1
 801c4f0:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	685a      	ldr	r2, [r3, #4]
 801c4f6:	187b      	adds	r3, r7, r1
 801c4f8:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	689a      	ldr	r2, [r3, #8]
 801c4fe:	187b      	adds	r3, r7, r1
 801c500:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801c502:	187b      	adds	r3, r7, r1
 801c504:	0018      	movs	r0, r3
 801c506:	f7f8 fb0f 	bl	8014b28 <RegionCommonCalcBackOff>
}
 801c50a:	46c0      	nop			; (mov r8, r8)
 801c50c:	46bd      	mov	sp, r7
 801c50e:	b008      	add	sp, #32
 801c510:	bd80      	pop	{r7, pc}
 801c512:	46c0      	nop			; (mov r8, r8)
 801c514:	200019a4 	.word	0x200019a4
 801c518:	20001d04 	.word	0x20001d04

0801c51c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801c51c:	b5b0      	push	{r4, r5, r7, lr}
 801c51e:	b09c      	sub	sp, #112	; 0x70
 801c520:	af02      	add	r7, sp, #8
 801c522:	60f8      	str	r0, [r7, #12]
 801c524:	60b9      	str	r1, [r7, #8]
 801c526:	607a      	str	r2, [r7, #4]
 801c528:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801c52a:	2367      	movs	r3, #103	; 0x67
 801c52c:	18fb      	adds	r3, r7, r3
 801c52e:	2200      	movs	r2, #0
 801c530:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801c532:	235e      	movs	r3, #94	; 0x5e
 801c534:	18fb      	adds	r3, r7, r3
 801c536:	2200      	movs	r2, #0
 801c538:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801c53a:	2314      	movs	r3, #20
 801c53c:	18fb      	adds	r3, r7, r3
 801c53e:	0018      	movs	r0, r3
 801c540:	2348      	movs	r3, #72	; 0x48
 801c542:	001a      	movs	r2, r3
 801c544:	2100      	movs	r1, #0
 801c546:	f009 fcdf 	bl	8025f08 <memset>
    TimerTime_t nextTxDelay = 0;
 801c54a:	2300      	movs	r3, #0
 801c54c:	663b      	str	r3, [r7, #96]	; 0x60
    uint8_t newChannelIndex;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 801c54e:	4b68      	ldr	r3, [pc, #416]	; (801c6f0 <RegionUS915NextChannel+0x1d4>)
 801c550:	2204      	movs	r2, #4
 801c552:	2100      	movs	r1, #0
 801c554:	0018      	movs	r0, r3
 801c556:	f7f7 ff67 	bl	8014428 <RegionCommonCountChannels>
 801c55a:	1e03      	subs	r3, r0, #0
 801c55c:	d10a      	bne.n	801c574 <RegionUS915NextChannel+0x58>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 801c55e:	4965      	ldr	r1, [pc, #404]	; (801c6f4 <RegionUS915NextChannel+0x1d8>)
 801c560:	4b63      	ldr	r3, [pc, #396]	; (801c6f0 <RegionUS915NextChannel+0x1d4>)
 801c562:	2204      	movs	r2, #4
 801c564:	0018      	movs	r0, r3
 801c566:	f7f7 ffa0 	bl	80144aa <RegionCommonChanMaskCopy>

        NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 801c56a:	4a63      	ldr	r2, [pc, #396]	; (801c6f8 <RegionUS915NextChannel+0x1dc>)
 801c56c:	23e5      	movs	r3, #229	; 0xe5
 801c56e:	009b      	lsls	r3, r3, #2
 801c570:	2100      	movs	r1, #0
 801c572:	54d1      	strb	r1, [r2, r3]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	7a1b      	ldrb	r3, [r3, #8]
 801c578:	b25b      	sxtb	r3, r3
 801c57a:	2b03      	cmp	r3, #3
 801c57c:	dd0f      	ble.n	801c59e <RegionUS915NextChannel+0x82>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801c57e:	4a5e      	ldr	r2, [pc, #376]	; (801c6f8 <RegionUS915NextChannel+0x1dc>)
 801c580:	23e1      	movs	r3, #225	; 0xe1
 801c582:	009b      	lsls	r3, r3, #2
 801c584:	5ad3      	ldrh	r3, [r2, r3]
 801c586:	001a      	movs	r2, r3
 801c588:	23ff      	movs	r3, #255	; 0xff
 801c58a:	4013      	ands	r3, r2
 801c58c:	d107      	bne.n	801c59e <RegionUS915NextChannel+0x82>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 801c58e:	4a5a      	ldr	r2, [pc, #360]	; (801c6f8 <RegionUS915NextChannel+0x1dc>)
 801c590:	23de      	movs	r3, #222	; 0xde
 801c592:	009b      	lsls	r3, r3, #2
 801c594:	5ad1      	ldrh	r1, [r2, r3]
 801c596:	4a58      	ldr	r2, [pc, #352]	; (801c6f8 <RegionUS915NextChannel+0x1dc>)
 801c598:	23e1      	movs	r3, #225	; 0xe1
 801c59a:	009b      	lsls	r3, r3, #2
 801c59c:	52d1      	strh	r1, [r2, r3]
        }
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	681c      	ldr	r4, [r3, #0]
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	685b      	ldr	r3, [r3, #4]
 801c5a6:	0018      	movs	r0, r3
 801c5a8:	f000 fb45 	bl	801cc36 <TimerGetElapsedTime>
 801c5ac:	0003      	movs	r3, r0
 801c5ae:	429c      	cmp	r4, r3
 801c5b0:	d821      	bhi.n	801c5f6 <RegionUS915NextChannel+0xda>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801c5b2:	683b      	ldr	r3, [r7, #0]
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, US915_MAX_NB_BANDS );
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	7a58      	ldrb	r0, [r3, #9]
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	7a99      	ldrb	r1, [r3, #10]
 801c5c0:	4a4e      	ldr	r2, [pc, #312]	; (801c6fc <RegionUS915NextChannel+0x1e0>)
 801c5c2:	2301      	movs	r3, #1
 801c5c4:	f7f7 ffbb 	bl	801453e <RegionCommonUpdateBandTimeOff>
 801c5c8:	0003      	movs	r3, r0
 801c5ca:	663b      	str	r3, [r7, #96]	; 0x60

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	7a1b      	ldrb	r3, [r3, #8]
 801c5d0:	b25b      	sxtb	r3, r3
 801c5d2:	b2d8      	uxtb	r0, r3
 801c5d4:	2367      	movs	r3, #103	; 0x67
 801c5d6:	18fc      	adds	r4, r7, r3
 801c5d8:	4d48      	ldr	r5, [pc, #288]	; (801c6fc <RegionUS915NextChannel+0x1e0>)
 801c5da:	4a47      	ldr	r2, [pc, #284]	; (801c6f8 <RegionUS915NextChannel+0x1dc>)
 801c5dc:	4944      	ldr	r1, [pc, #272]	; (801c6f0 <RegionUS915NextChannel+0x1d4>)
 801c5de:	235e      	movs	r3, #94	; 0x5e
 801c5e0:	18fb      	adds	r3, r7, r3
 801c5e2:	9301      	str	r3, [sp, #4]
 801c5e4:	2314      	movs	r3, #20
 801c5e6:	18fb      	adds	r3, r7, r3
 801c5e8:	9300      	str	r3, [sp, #0]
 801c5ea:	002b      	movs	r3, r5
 801c5ec:	f7fe ff58 	bl	801b4a0 <CountNbOfEnabledChannels>
 801c5f0:	0003      	movs	r3, r0
 801c5f2:	7023      	strb	r3, [r4, #0]
 801c5f4:	e010      	b.n	801c618 <RegionUS915NextChannel+0xfc>
                                                      NvmCtx.ChannelsMaskRemaining, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801c5f6:	215e      	movs	r1, #94	; 0x5e
 801c5f8:	187b      	adds	r3, r7, r1
 801c5fa:	781b      	ldrb	r3, [r3, #0]
 801c5fc:	3301      	adds	r3, #1
 801c5fe:	b2da      	uxtb	r2, r3
 801c600:	187b      	adds	r3, r7, r1
 801c602:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	681c      	ldr	r4, [r3, #0]
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	685b      	ldr	r3, [r3, #4]
 801c60c:	0018      	movs	r0, r3
 801c60e:	f000 fb12 	bl	801cc36 <TimerGetElapsedTime>
 801c612:	0003      	movs	r3, r0
 801c614:	1ae3      	subs	r3, r4, r3
 801c616:	663b      	str	r3, [r7, #96]	; 0x60
    }

    if( nbEnabledChannels > 0 )
 801c618:	2367      	movs	r3, #103	; 0x67
 801c61a:	18fb      	adds	r3, r7, r3
 801c61c:	781b      	ldrb	r3, [r3, #0]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d054      	beq.n	801c6cc <RegionUS915NextChannel+0x1b0>
    {
        if( nextChanParams->Joined == true )
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	7a5b      	ldrb	r3, [r3, #9]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d00e      	beq.n	801c648 <RegionUS915NextChannel+0x12c>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801c62a:	2367      	movs	r3, #103	; 0x67
 801c62c:	18fb      	adds	r3, r7, r3
 801c62e:	781b      	ldrb	r3, [r3, #0]
 801c630:	3b01      	subs	r3, #1
 801c632:	0019      	movs	r1, r3
 801c634:	2000      	movs	r0, #0
 801c636:	f000 fb27 	bl	801cc88 <randr>
 801c63a:	0002      	movs	r2, r0
 801c63c:	2314      	movs	r3, #20
 801c63e:	18fb      	adds	r3, r7, r3
 801c640:	5c9a      	ldrb	r2, [r3, r2]
 801c642:	68bb      	ldr	r3, [r7, #8]
 801c644:	701a      	strb	r2, [r3, #0]
 801c646:	e035      	b.n	801c6b4 <RegionUS915NextChannel+0x198>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	7a1b      	ldrb	r3, [r3, #8]
 801c64c:	b25b      	sxtb	r3, r3
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d10f      	bne.n	801c672 <RegionUS915NextChannel+0x156>
            {
                if( ComputeNext125kHzJoinChannel( &newChannelIndex ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801c652:	2313      	movs	r3, #19
 801c654:	18fb      	adds	r3, r7, r3
 801c656:	0018      	movs	r0, r3
 801c658:	f7fe fdd6 	bl	801b208 <ComputeNext125kHzJoinChannel>
 801c65c:	0003      	movs	r3, r0
 801c65e:	2b03      	cmp	r3, #3
 801c660:	d101      	bne.n	801c666 <RegionUS915NextChannel+0x14a>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801c662:	2303      	movs	r3, #3
 801c664:	e040      	b.n	801c6e8 <RegionUS915NextChannel+0x1cc>
                }
                *channel = newChannelIndex;
 801c666:	2313      	movs	r3, #19
 801c668:	18fb      	adds	r3, r7, r3
 801c66a:	781a      	ldrb	r2, [r3, #0]
 801c66c:	68bb      	ldr	r3, [r7, #8]
 801c66e:	701a      	strb	r2, [r3, #0]
 801c670:	e020      	b.n	801c6b4 <RegionUS915NextChannel+0x198>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801c672:	235f      	movs	r3, #95	; 0x5f
 801c674:	18fb      	adds	r3, r7, r3
 801c676:	2200      	movs	r2, #0
 801c678:	701a      	strb	r2, [r3, #0]
                while( ( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801c67a:	e005      	b.n	801c688 <RegionUS915NextChannel+0x16c>
                {
                    i++;
 801c67c:	215f      	movs	r1, #95	; 0x5f
 801c67e:	187b      	adds	r3, r7, r1
 801c680:	781a      	ldrb	r2, [r3, #0]
 801c682:	187b      	adds	r3, r7, r1
 801c684:	3201      	adds	r2, #1
 801c686:	701a      	strb	r2, [r3, #0]
                while( ( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801c688:	4a1b      	ldr	r2, [pc, #108]	; (801c6f8 <RegionUS915NextChannel+0x1dc>)
 801c68a:	23e1      	movs	r3, #225	; 0xe1
 801c68c:	009b      	lsls	r3, r3, #2
 801c68e:	5ad3      	ldrh	r3, [r2, r3]
 801c690:	001a      	movs	r2, r3
 801c692:	23ff      	movs	r3, #255	; 0xff
 801c694:	401a      	ands	r2, r3
 801c696:	235f      	movs	r3, #95	; 0x5f
 801c698:	18fb      	adds	r3, r7, r3
 801c69a:	781b      	ldrb	r3, [r3, #0]
 801c69c:	411a      	asrs	r2, r3
 801c69e:	0013      	movs	r3, r2
 801c6a0:	2201      	movs	r2, #1
 801c6a2:	4013      	ands	r3, r2
 801c6a4:	d0ea      	beq.n	801c67c <RegionUS915NextChannel+0x160>
                }
                *channel = 64 + i;
 801c6a6:	235f      	movs	r3, #95	; 0x5f
 801c6a8:	18fb      	adds	r3, r7, r3
 801c6aa:	781b      	ldrb	r3, [r3, #0]
 801c6ac:	3340      	adds	r3, #64	; 0x40
 801c6ae:	b2da      	uxtb	r2, r3
 801c6b0:	68bb      	ldr	r3, [r7, #8]
 801c6b2:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801c6b4:	68bb      	ldr	r3, [r7, #8]
 801c6b6:	7819      	ldrb	r1, [r3, #0]
 801c6b8:	4b0d      	ldr	r3, [pc, #52]	; (801c6f0 <RegionUS915NextChannel+0x1d4>)
 801c6ba:	2248      	movs	r2, #72	; 0x48
 801c6bc:	0018      	movs	r0, r3
 801c6be:	f7f7 fe71 	bl	80143a4 <RegionCommonChanDisable>

        *time = 0;
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	e00d      	b.n	801c6e8 <RegionUS915NextChannel+0x1cc>
    }
    else
    {
        if( delayTx > 0 )
 801c6cc:	235e      	movs	r3, #94	; 0x5e
 801c6ce:	18fb      	adds	r3, r7, r3
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d004      	beq.n	801c6e0 <RegionUS915NextChannel+0x1c4>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c6da:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801c6dc:	230b      	movs	r3, #11
 801c6de:	e003      	b.n	801c6e8 <RegionUS915NextChannel+0x1cc>
        }
        // Datarate not supported by any channel
        *time = 0;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801c6e6:	230c      	movs	r3, #12
    }
}
 801c6e8:	0018      	movs	r0, r3
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	b01a      	add	sp, #104	; 0x68
 801c6ee:	bdb0      	pop	{r4, r5, r7, pc}
 801c6f0:	20001d20 	.word	0x20001d20
 801c6f4:	20001d14 	.word	0x20001d14
 801c6f8:	200019a4 	.word	0x200019a4
 801c6fc:	20001d04 	.word	0x20001d04

0801c700 <RegionUS915ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801c700:	b590      	push	{r4, r7, lr}
 801c702:	b085      	sub	sp, #20
 801c704:	af00      	add	r7, sp, #0
 801c706:	0004      	movs	r4, r0
 801c708:	0008      	movs	r0, r1
 801c70a:	0011      	movs	r1, r2
 801c70c:	1dfb      	adds	r3, r7, #7
 801c70e:	1c22      	adds	r2, r4, #0
 801c710:	701a      	strb	r2, [r3, #0]
 801c712:	1dbb      	adds	r3, r7, #6
 801c714:	1c02      	adds	r2, r0, #0
 801c716:	701a      	strb	r2, [r3, #0]
 801c718:	1d7b      	adds	r3, r7, #5
 801c71a:	1c0a      	adds	r2, r1, #0
 801c71c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801c71e:	1dbb      	adds	r3, r7, #6
 801c720:	2100      	movs	r1, #0
 801c722:	5659      	ldrsb	r1, [r3, r1]
 801c724:	1d7b      	adds	r3, r7, #5
 801c726:	2200      	movs	r2, #0
 801c728:	569a      	ldrsb	r2, [r3, r2]
 801c72a:	240f      	movs	r4, #15
 801c72c:	193b      	adds	r3, r7, r4
 801c72e:	480a      	ldr	r0, [pc, #40]	; (801c758 <RegionUS915ApplyDrOffset+0x58>)
 801c730:	0089      	lsls	r1, r1, #2
 801c732:	1841      	adds	r1, r0, r1
 801c734:	5c8a      	ldrb	r2, [r1, r2]
 801c736:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801c738:	193b      	adds	r3, r7, r4
 801c73a:	781b      	ldrb	r3, [r3, #0]
 801c73c:	2b7f      	cmp	r3, #127	; 0x7f
 801c73e:	d903      	bls.n	801c748 <RegionUS915ApplyDrOffset+0x48>
    {
        datarate = DR_0;
 801c740:	230f      	movs	r3, #15
 801c742:	18fb      	adds	r3, r7, r3
 801c744:	2200      	movs	r2, #0
 801c746:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801c748:	230f      	movs	r3, #15
 801c74a:	18fb      	adds	r3, r7, r3
 801c74c:	781b      	ldrb	r3, [r3, #0]
}
 801c74e:	0018      	movs	r0, r3
 801c750:	46bd      	mov	sp, r7
 801c752:	b005      	add	sp, #20
 801c754:	bd90      	pop	{r4, r7, pc}
 801c756:	46c0      	nop			; (mov r8, r8)
 801c758:	080292d0 	.word	0x080292d0

0801c75c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c75c:	b082      	sub	sp, #8
 801c75e:	b580      	push	{r7, lr}
 801c760:	b086      	sub	sp, #24
 801c762:	af00      	add	r7, sp, #0
 801c764:	60f8      	str	r0, [r7, #12]
 801c766:	1d38      	adds	r0, r7, #4
 801c768:	6001      	str	r1, [r0, #0]
 801c76a:	6042      	str	r2, [r0, #4]
 801c76c:	2204      	movs	r2, #4
 801c76e:	2120      	movs	r1, #32
 801c770:	468c      	mov	ip, r1
 801c772:	44bc      	add	ip, r7
 801c774:	4462      	add	r2, ip
 801c776:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c778:	2110      	movs	r1, #16
 801c77a:	187b      	adds	r3, r7, r1
 801c77c:	2200      	movs	r2, #0
 801c77e:	601a      	str	r2, [r3, #0]
 801c780:	187b      	adds	r3, r7, r1
 801c782:	2200      	movs	r2, #0
 801c784:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 801c786:	1d3b      	adds	r3, r7, #4
 801c788:	681a      	ldr	r2, [r3, #0]
 801c78a:	2304      	movs	r3, #4
 801c78c:	2020      	movs	r0, #32
 801c78e:	4684      	mov	ip, r0
 801c790:	44bc      	add	ip, r7
 801c792:	4463      	add	r3, ip
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	18d2      	adds	r2, r2, r3
 801c798:	187b      	adds	r3, r7, r1
 801c79a:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c79c:	1d3b      	adds	r3, r7, #4
 801c79e:	2204      	movs	r2, #4
 801c7a0:	5e9b      	ldrsh	r3, [r3, r2]
 801c7a2:	b29a      	uxth	r2, r3
 801c7a4:	2304      	movs	r3, #4
 801c7a6:	2020      	movs	r0, #32
 801c7a8:	4684      	mov	ip, r0
 801c7aa:	44bc      	add	ip, r7
 801c7ac:	4463      	add	r3, ip
 801c7ae:	2004      	movs	r0, #4
 801c7b0:	5e1b      	ldrsh	r3, [r3, r0]
 801c7b2:	b29b      	uxth	r3, r3
 801c7b4:	18d3      	adds	r3, r2, r3
 801c7b6:	b29b      	uxth	r3, r3
 801c7b8:	b21a      	sxth	r2, r3
 801c7ba:	187b      	adds	r3, r7, r1
 801c7bc:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 801c7be:	187b      	adds	r3, r7, r1
 801c7c0:	2204      	movs	r2, #4
 801c7c2:	5e9b      	ldrsh	r3, [r3, r2]
 801c7c4:	4a0f      	ldr	r2, [pc, #60]	; (801c804 <SysTimeAdd+0xa8>)
 801c7c6:	4293      	cmp	r3, r2
 801c7c8:	dd10      	ble.n	801c7ec <SysTimeAdd+0x90>
    {
        c.Seconds++;
 801c7ca:	2110      	movs	r1, #16
 801c7cc:	187b      	adds	r3, r7, r1
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	1c5a      	adds	r2, r3, #1
 801c7d2:	187b      	adds	r3, r7, r1
 801c7d4:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 801c7d6:	187b      	adds	r3, r7, r1
 801c7d8:	2204      	movs	r2, #4
 801c7da:	5e9b      	ldrsh	r3, [r3, r2]
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	4a0a      	ldr	r2, [pc, #40]	; (801c808 <SysTimeAdd+0xac>)
 801c7e0:	4694      	mov	ip, r2
 801c7e2:	4463      	add	r3, ip
 801c7e4:	b29b      	uxth	r3, r3
 801c7e6:	b21a      	sxth	r2, r3
 801c7e8:	187b      	adds	r3, r7, r1
 801c7ea:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	2210      	movs	r2, #16
 801c7f0:	18ba      	adds	r2, r7, r2
 801c7f2:	ca03      	ldmia	r2!, {r0, r1}
 801c7f4:	c303      	stmia	r3!, {r0, r1}
}
 801c7f6:	68f8      	ldr	r0, [r7, #12]
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	b006      	add	sp, #24
 801c7fc:	bc80      	pop	{r7}
 801c7fe:	bc08      	pop	{r3}
 801c800:	b002      	add	sp, #8
 801c802:	4718      	bx	r3
 801c804:	000003e7 	.word	0x000003e7
 801c808:	fffffc18 	.word	0xfffffc18

0801c80c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c80c:	b082      	sub	sp, #8
 801c80e:	b580      	push	{r7, lr}
 801c810:	b086      	sub	sp, #24
 801c812:	af00      	add	r7, sp, #0
 801c814:	60f8      	str	r0, [r7, #12]
 801c816:	1d38      	adds	r0, r7, #4
 801c818:	6001      	str	r1, [r0, #0]
 801c81a:	6042      	str	r2, [r0, #4]
 801c81c:	2204      	movs	r2, #4
 801c81e:	2120      	movs	r1, #32
 801c820:	468c      	mov	ip, r1
 801c822:	44bc      	add	ip, r7
 801c824:	4462      	add	r2, ip
 801c826:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c828:	2110      	movs	r1, #16
 801c82a:	187b      	adds	r3, r7, r1
 801c82c:	2200      	movs	r2, #0
 801c82e:	601a      	str	r2, [r3, #0]
 801c830:	187b      	adds	r3, r7, r1
 801c832:	2200      	movs	r2, #0
 801c834:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 801c836:	1d3b      	adds	r3, r7, #4
 801c838:	681a      	ldr	r2, [r3, #0]
 801c83a:	2304      	movs	r3, #4
 801c83c:	2020      	movs	r0, #32
 801c83e:	4684      	mov	ip, r0
 801c840:	44bc      	add	ip, r7
 801c842:	4463      	add	r3, ip
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	1ad2      	subs	r2, r2, r3
 801c848:	187b      	adds	r3, r7, r1
 801c84a:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c84c:	1d3b      	adds	r3, r7, #4
 801c84e:	2204      	movs	r2, #4
 801c850:	5e9b      	ldrsh	r3, [r3, r2]
 801c852:	b29a      	uxth	r2, r3
 801c854:	2304      	movs	r3, #4
 801c856:	2020      	movs	r0, #32
 801c858:	4684      	mov	ip, r0
 801c85a:	44bc      	add	ip, r7
 801c85c:	4463      	add	r3, ip
 801c85e:	2004      	movs	r0, #4
 801c860:	5e1b      	ldrsh	r3, [r3, r0]
 801c862:	b29b      	uxth	r3, r3
 801c864:	1ad3      	subs	r3, r2, r3
 801c866:	b29b      	uxth	r3, r3
 801c868:	b21a      	sxth	r2, r3
 801c86a:	187b      	adds	r3, r7, r1
 801c86c:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801c86e:	187b      	adds	r3, r7, r1
 801c870:	2204      	movs	r2, #4
 801c872:	5e9b      	ldrsh	r3, [r3, r2]
 801c874:	2b00      	cmp	r3, #0
 801c876:	da11      	bge.n	801c89c <SysTimeSub+0x90>
    {
        c.Seconds--;
 801c878:	2110      	movs	r1, #16
 801c87a:	187b      	adds	r3, r7, r1
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	1e5a      	subs	r2, r3, #1
 801c880:	187b      	adds	r3, r7, r1
 801c882:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 801c884:	187b      	adds	r3, r7, r1
 801c886:	2204      	movs	r2, #4
 801c888:	5e9b      	ldrsh	r3, [r3, r2]
 801c88a:	b29b      	uxth	r3, r3
 801c88c:	22fa      	movs	r2, #250	; 0xfa
 801c88e:	0092      	lsls	r2, r2, #2
 801c890:	4694      	mov	ip, r2
 801c892:	4463      	add	r3, ip
 801c894:	b29b      	uxth	r3, r3
 801c896:	b21a      	sxth	r2, r3
 801c898:	187b      	adds	r3, r7, r1
 801c89a:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	2210      	movs	r2, #16
 801c8a0:	18ba      	adds	r2, r7, r2
 801c8a2:	ca03      	ldmia	r2!, {r0, r1}
 801c8a4:	c303      	stmia	r3!, {r0, r1}
}
 801c8a6:	68f8      	ldr	r0, [r7, #12]
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	b006      	add	sp, #24
 801c8ac:	bc80      	pop	{r7}
 801c8ae:	bc08      	pop	{r3}
 801c8b0:	b002      	add	sp, #8
 801c8b2:	4718      	bx	r3

0801c8b4 <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 801c8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8b6:	b085      	sub	sp, #20
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	003b      	movs	r3, r7
 801c8bc:	6018      	str	r0, [r3, #0]
 801c8be:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 801c8c0:	003b      	movs	r3, r7
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	60bb      	str	r3, [r7, #8]
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 801c8ca:	22fa      	movs	r2, #250	; 0xfa
 801c8cc:	0092      	lsls	r2, r2, #2
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	68b8      	ldr	r0, [r7, #8]
 801c8d2:	68f9      	ldr	r1, [r7, #12]
 801c8d4:	f7e3 fe52 	bl	800057c <__aeabi_lmul>
 801c8d8:	0003      	movs	r3, r0
 801c8da:	000c      	movs	r4, r1
 801c8dc:	60bb      	str	r3, [r7, #8]
 801c8de:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 801c8e0:	003b      	movs	r3, r7
 801c8e2:	2204      	movs	r2, #4
 801c8e4:	5e9b      	ldrsh	r3, [r3, r2]
 801c8e6:	001d      	movs	r5, r3
 801c8e8:	17db      	asrs	r3, r3, #31
 801c8ea:	001e      	movs	r6, r3
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	68fc      	ldr	r4, [r7, #12]
 801c8f0:	195b      	adds	r3, r3, r5
 801c8f2:	4174      	adcs	r4, r6
 801c8f4:	60bb      	str	r3, [r7, #8]
 801c8f6:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 801c8f8:	68bb      	ldr	r3, [r7, #8]
 801c8fa:	68fc      	ldr	r4, [r7, #12]
 801c8fc:	0018      	movs	r0, r3
 801c8fe:	0021      	movs	r1, r4
 801c900:	f007 fab2 	bl	8023e68 <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 801c904:	46c0      	nop			; (mov r8, r8)
 801c906:	46bd      	mov	sp, r7
 801c908:	b005      	add	sp, #20
 801c90a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c90c <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 801c90c:	b5b0      	push	{r4, r5, r7, lr}
 801c90e:	b086      	sub	sp, #24
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c914:	2008      	movs	r0, #8
 801c916:	183b      	adds	r3, r7, r0
 801c918:	2200      	movs	r2, #0
 801c91a:	601a      	str	r2, [r3, #0]
 801c91c:	0005      	movs	r5, r0
 801c91e:	183b      	adds	r3, r7, r0
 801c920:	2200      	movs	r2, #0
 801c922:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 801c924:	f007 fada 	bl	8023edc <itsdk_time_get_ms>
 801c928:	0003      	movs	r3, r0
 801c92a:	000c      	movs	r4, r1
 801c92c:	613b      	str	r3, [r7, #16]
 801c92e:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 801c930:	6938      	ldr	r0, [r7, #16]
 801c932:	6979      	ldr	r1, [r7, #20]
 801c934:	22fa      	movs	r2, #250	; 0xfa
 801c936:	0092      	lsls	r2, r2, #2
 801c938:	2300      	movs	r3, #0
 801c93a:	f7e3 fdff 	bl	800053c <__aeabi_uldivmod>
 801c93e:	0003      	movs	r3, r0
 801c940:	000c      	movs	r4, r1
 801c942:	001a      	movs	r2, r3
 801c944:	0028      	movs	r0, r5
 801c946:	183b      	adds	r3, r7, r0
 801c948:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 801c94a:	693b      	ldr	r3, [r7, #16]
 801c94c:	697c      	ldr	r4, [r7, #20]
 801c94e:	b29a      	uxth	r2, r3
 801c950:	183b      	adds	r3, r7, r0
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	b29b      	uxth	r3, r3
 801c956:	21fa      	movs	r1, #250	; 0xfa
 801c958:	0089      	lsls	r1, r1, #2
 801c95a:	434b      	muls	r3, r1
 801c95c:	b29b      	uxth	r3, r3
 801c95e:	1ad3      	subs	r3, r2, r3
 801c960:	b29b      	uxth	r3, r3
 801c962:	b21a      	sxth	r2, r3
 801c964:	183b      	adds	r3, r7, r0
 801c966:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	183a      	adds	r2, r7, r0
 801c96c:	ca03      	ldmia	r2!, {r0, r1}
 801c96e:	c303      	stmia	r3!, {r0, r1}
}
 801c970:	6878      	ldr	r0, [r7, #4]
 801c972:	46bd      	mov	sp, r7
 801c974:	b006      	add	sp, #24
 801c976:	bdb0      	pop	{r4, r5, r7, pc}

0801c978 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 801c978:	b580      	push	{r7, lr}
 801c97a:	b084      	sub	sp, #16
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 801c980:	4b11      	ldr	r3, [pc, #68]	; (801c9c8 <removeFromList+0x50>)
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	687a      	ldr	r2, [r7, #4]
 801c986:	429a      	cmp	r2, r3
 801c988:	d105      	bne.n	801c996 <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 801c98a:	4b0f      	ldr	r3, [pc, #60]	; (801c9c8 <removeFromList+0x50>)
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	695a      	ldr	r2, [r3, #20]
 801c990:	4b0d      	ldr	r3, [pc, #52]	; (801c9c8 <removeFromList+0x50>)
 801c992:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 801c994:	e014      	b.n	801c9c0 <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 801c996:	4b0c      	ldr	r3, [pc, #48]	; (801c9c8 <removeFromList+0x50>)
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 801c99c:	e00d      	b.n	801c9ba <removeFromList+0x42>
		   if( cur->Next == obj ) {
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	695b      	ldr	r3, [r3, #20]
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	429a      	cmp	r2, r3
 801c9a6:	d105      	bne.n	801c9b4 <removeFromList+0x3c>
			   cur->Next = obj->Next;
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	695a      	ldr	r2, [r3, #20]
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	615a      	str	r2, [r3, #20]
			   break;
 801c9b0:	46c0      	nop			; (mov r8, r8)
}
 801c9b2:	e005      	b.n	801c9c0 <removeFromList+0x48>
		   cur = cur->Next;
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	695b      	ldr	r3, [r3, #20]
 801c9b8:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d1ee      	bne.n	801c99e <removeFromList+0x26>
}
 801c9c0:	46c0      	nop			; (mov r8, r8)
 801c9c2:	46bd      	mov	sp, r7
 801c9c4:	b004      	add	sp, #16
 801c9c6:	bd80      	pop	{r7, pc}
 801c9c8:	20001d3c 	.word	0x20001d3c

0801c9cc <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 801c9cc:	b580      	push	{r7, lr}
 801c9ce:	b084      	sub	sp, #16
 801c9d0:	af00      	add	r7, sp, #0
 801c9d2:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801c9d4:	4b0a      	ldr	r3, [pc, #40]	; (801ca00 <TimerExists+0x34>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 801c9da:	e008      	b.n	801c9ee <TimerExists+0x22>
    if( cur == obj ) {
 801c9dc:	68fa      	ldr	r2, [r7, #12]
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	d101      	bne.n	801c9e8 <TimerExists+0x1c>
      return true;
 801c9e4:	2301      	movs	r3, #1
 801c9e6:	e006      	b.n	801c9f6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	695b      	ldr	r3, [r3, #20]
 801c9ec:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d1f3      	bne.n	801c9dc <TimerExists+0x10>
  }
  return false;
 801c9f4:	2300      	movs	r3, #0

}
 801c9f6:	0018      	movs	r0, r3
 801c9f8:	46bd      	mov	sp, r7
 801c9fa:	b004      	add	sp, #16
 801c9fc:	bd80      	pop	{r7, pc}
 801c9fe:	46c0      	nop			; (mov r8, r8)
 801ca00:	20001d3c 	.word	0x20001d3c

0801ca04 <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b082      	sub	sp, #8
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 801ca0c:	4b05      	ldr	r3, [pc, #20]	; (801ca24 <TimerInsertTimer+0x20>)
 801ca0e:	681a      	ldr	r2, [r3, #0]
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 801ca14:	4b03      	ldr	r3, [pc, #12]	; (801ca24 <TimerInsertTimer+0x20>)
 801ca16:	687a      	ldr	r2, [r7, #4]
 801ca18:	601a      	str	r2, [r3, #0]
}
 801ca1a:	46c0      	nop			; (mov r8, r8)
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	b002      	add	sp, #8
 801ca20:	bd80      	pop	{r7, pc}
 801ca22:	46c0      	nop			; (mov r8, r8)
 801ca24:	20001d3c 	.word	0x20001d3c

0801ca28 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b084      	sub	sp, #16
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	2200      	movs	r2, #0
 801ca38:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	68db      	ldr	r3, [r3, #12]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d006      	beq.n	801ca50 <TimerCallback+0x28>
		obj->Callback(obj->Context);
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	68da      	ldr	r2, [r3, #12]
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	691b      	ldr	r3, [r3, #16]
 801ca4a:	0018      	movs	r0, r3
 801ca4c:	4790      	blx	r2
 801ca4e:	e004      	b.n	801ca5a <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 801ca50:	4b06      	ldr	r3, [pc, #24]	; (801ca6c <TimerCallback+0x44>)
 801ca52:	2100      	movs	r1, #0
 801ca54:	0018      	movs	r0, r3
 801ca56:	f006 f9e3 	bl	8022e20 <itsdk_error_report>
	}
	removeFromList(obj);
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	0018      	movs	r0, r3
 801ca5e:	f7ff ff8b 	bl	801c978 <removeFromList>
}
 801ca62:	46c0      	nop			; (mov r8, r8)
 801ca64:	46bd      	mov	sp, r7
 801ca66:	b004      	add	sp, #16
 801ca68:	bd80      	pop	{r7, pc}
 801ca6a:	46c0      	nop			; (mov r8, r8)
 801ca6c:	c0000104 	.word	0xc0000104

0801ca70 <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b082      	sub	sp, #8
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	6078      	str	r0, [r7, #4]
 801ca78:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	2200      	movs	r2, #0
 801ca84:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	2200      	movs	r2, #0
 801ca8a:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	2200      	movs	r2, #0
 801ca90:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	683a      	ldr	r2, [r7, #0]
 801ca96:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	2200      	movs	r2, #0
 801caa2:	615a      	str	r2, [r3, #20]
}
 801caa4:	46c0      	nop			; (mov r8, r8)
 801caa6:	46bd      	mov	sp, r7
 801caa8:	b002      	add	sp, #8
 801caaa:	bd80      	pop	{r7, pc}

0801caac <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 801caac:	b580      	push	{r7, lr}
 801caae:	b084      	sub	sp, #16
 801cab0:	af00      	add	r7, sp, #0
 801cab2:	6078      	str	r0, [r7, #4]
 801cab4:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 801cab6:	687a      	ldr	r2, [r7, #4]
 801cab8:	4b11      	ldr	r3, [pc, #68]	; (801cb00 <TimerSetValue+0x54>)
 801caba:	0011      	movs	r1, r2
 801cabc:	0018      	movs	r0, r3
 801cabe:	f007 fb19 	bl	80240f4 <itsdk_stimer_get>
 801cac2:	0003      	movs	r3, r0
 801cac4:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d00e      	beq.n	801caea <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	0018      	movs	r0, r3
 801cad0:	f000 f86e 	bl	801cbb0 <TimerStop>
		obj->Timestamp = value;
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	683a      	ldr	r2, [r7, #0]
 801cad8:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	683a      	ldr	r2, [r7, #0]
 801cade:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	0018      	movs	r0, r3
 801cae4:	f000 f80e 	bl	801cb04 <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 801cae8:	e005      	b.n	801caf6 <TimerSetValue+0x4a>
		obj->Timestamp = value;
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	683a      	ldr	r2, [r7, #0]
 801caee:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	683a      	ldr	r2, [r7, #0]
 801caf4:	605a      	str	r2, [r3, #4]
}
 801caf6:	46c0      	nop			; (mov r8, r8)
 801caf8:	46bd      	mov	sp, r7
 801cafa:	b004      	add	sp, #16
 801cafc:	bd80      	pop	{r7, pc}
 801cafe:	46c0      	nop			; (mov r8, r8)
 801cb00:	0801ca29 	.word	0x0801ca29

0801cb04 <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 801cb04:	b5b0      	push	{r4, r5, r7, lr}
 801cb06:	b084      	sub	sp, #16
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 801cb0c:	f008 fab6 	bl	802507c <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d005      	beq.n	801cb22 <TimerStart+0x1e>
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	0018      	movs	r0, r3
 801cb1a:	f7ff ff57 	bl	801c9cc <TimerExists>
 801cb1e:	1e03      	subs	r3, r0, #0
 801cb20:	d007      	beq.n	801cb32 <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 801cb22:	f008 fabf 	bl	80250a4 <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 801cb26:	4b1e      	ldr	r3, [pc, #120]	; (801cba0 <TimerStart+0x9c>)
 801cb28:	2100      	movs	r1, #0
 801cb2a:	0018      	movs	r0, r3
 801cb2c:	f006 f978 	bl	8022e20 <itsdk_error_report>
	    return;
 801cb30:	e032      	b.n	801cb98 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	685a      	ldr	r2, [r3, #4]
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	2201      	movs	r2, #1
 801cb3e:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	2200      	movs	r2, #0
 801cb44:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 801cb46:	4b17      	ldr	r3, [pc, #92]	; (801cba4 <TimerStart+0xa0>)
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d106      	bne.n	801cb5c <TimerStart+0x58>
		obj->Next = NULL;
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	2200      	movs	r2, #0
 801cb52:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 801cb54:	4b13      	ldr	r3, [pc, #76]	; (801cba4 <TimerStart+0xa0>)
 801cb56:	687a      	ldr	r2, [r7, #4]
 801cb58:	601a      	str	r2, [r3, #0]
 801cb5a:	e003      	b.n	801cb64 <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	0018      	movs	r0, r3
 801cb60:	f7ff ff50 	bl	801ca04 <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	6858      	ldr	r0, [r3, #4]
 801cb68:	687a      	ldr	r2, [r7, #4]
 801cb6a:	250f      	movs	r5, #15
 801cb6c:	197c      	adds	r4, r7, r5
 801cb6e:	490e      	ldr	r1, [pc, #56]	; (801cba8 <TimerStart+0xa4>)
 801cb70:	2300      	movs	r3, #0
 801cb72:	f007 f9e5 	bl	8023f40 <itsdk_stimer_register>
 801cb76:	0003      	movs	r3, r0
 801cb78:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 801cb7a:	197b      	adds	r3, r7, r5
 801cb7c:	781b      	ldrb	r3, [r3, #0]
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d008      	beq.n	801cb94 <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 801cb82:	230f      	movs	r3, #15
 801cb84:	18fb      	adds	r3, r7, r3
 801cb86:	781b      	ldrb	r3, [r3, #0]
 801cb88:	b29b      	uxth	r3, r3
 801cb8a:	4a08      	ldr	r2, [pc, #32]	; (801cbac <TimerStart+0xa8>)
 801cb8c:	0019      	movs	r1, r3
 801cb8e:	0010      	movs	r0, r2
 801cb90:	f006 f946 	bl	8022e20 <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 801cb94:	f008 fa86 	bl	80250a4 <itsdk_leaveCriticalSection>

}
 801cb98:	46bd      	mov	sp, r7
 801cb9a:	b004      	add	sp, #16
 801cb9c:	bdb0      	pop	{r4, r5, r7, pc}
 801cb9e:	46c0      	nop			; (mov r8, r8)
 801cba0:	80000011 	.word	0x80000011
 801cba4:	20001d3c 	.word	0x20001d3c
 801cba8:	0801ca29 	.word	0x0801ca29
 801cbac:	d0000105 	.word	0xd0000105

0801cbb0 <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b082      	sub	sp, #8
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 801cbb8:	f008 fa60 	bl	802507c <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d00a      	beq.n	801cbd8 <TimerStop+0x28>
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	0018      	movs	r0, r3
 801cbc6:	f7ff ff01 	bl	801c9cc <TimerExists>
 801cbca:	0003      	movs	r3, r0
 801cbcc:	001a      	movs	r2, r3
 801cbce:	2301      	movs	r3, #1
 801cbd0:	4053      	eors	r3, r2
 801cbd2:	b2db      	uxtb	r3, r3
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d002      	beq.n	801cbde <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 801cbd8:	f008 fa64 	bl	80250a4 <itsdk_leaveCriticalSection>
	    return;
 801cbdc:	e012      	b.n	801cc04 <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	7a1b      	ldrb	r3, [r3, #8]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d008      	beq.n	801cbf8 <TimerStop+0x48>
		itsdk_stimer_stop(
 801cbe6:	687a      	ldr	r2, [r7, #4]
 801cbe8:	4b08      	ldr	r3, [pc, #32]	; (801cc0c <TimerStop+0x5c>)
 801cbea:	0011      	movs	r1, r2
 801cbec:	0018      	movs	r0, r3
 801cbee:	f007 fa15 	bl	802401c <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	0018      	movs	r0, r3
 801cbfc:	f7ff febc 	bl	801c978 <removeFromList>
	itsdk_leaveCriticalSection();
 801cc00:	f008 fa50 	bl	80250a4 <itsdk_leaveCriticalSection>
}  
 801cc04:	46bd      	mov	sp, r7
 801cc06:	b002      	add	sp, #8
 801cc08:	bd80      	pop	{r7, pc}
 801cc0a:	46c0      	nop			; (mov r8, r8)
 801cc0c:	0801ca29 	.word	0x0801ca29

0801cc10 <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	b082      	sub	sp, #8
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	7a1b      	ldrb	r3, [r3, #8]
}
 801cc1c:	0018      	movs	r0, r3
 801cc1e:	46bd      	mov	sp, r7
 801cc20:	b002      	add	sp, #8
 801cc22:	bd80      	pop	{r7, pc}

0801cc24 <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 801cc24:	b5b0      	push	{r4, r5, r7, lr}
 801cc26:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 801cc28:	f007 f958 	bl	8023edc <itsdk_time_get_ms>
 801cc2c:	0003      	movs	r3, r0
 801cc2e:	000c      	movs	r4, r1
}
 801cc30:	0018      	movs	r0, r3
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bdb0      	pop	{r4, r5, r7, pc}

0801cc36 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 801cc36:	b580      	push	{r7, lr}
 801cc38:	b082      	sub	sp, #8
 801cc3a:	af00      	add	r7, sp, #0
 801cc3c:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 801cc3e:	f7ff fff1 	bl	801cc24 <TimerGetCurrentTime>
 801cc42:	0002      	movs	r2, r0
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	1ad3      	subs	r3, r2, r3
}
 801cc48:	0018      	movs	r0, r3
 801cc4a:	46bd      	mov	sp, r7
 801cc4c:	b002      	add	sp, #8
 801cc4e:	bd80      	pop	{r7, pc}

0801cc50 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801cc54:	4b08      	ldr	r3, [pc, #32]	; (801cc78 <rand1+0x28>)
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	4a08      	ldr	r2, [pc, #32]	; (801cc7c <rand1+0x2c>)
 801cc5a:	4353      	muls	r3, r2
 801cc5c:	4a08      	ldr	r2, [pc, #32]	; (801cc80 <rand1+0x30>)
 801cc5e:	189a      	adds	r2, r3, r2
 801cc60:	4b05      	ldr	r3, [pc, #20]	; (801cc78 <rand1+0x28>)
 801cc62:	601a      	str	r2, [r3, #0]
 801cc64:	4b04      	ldr	r3, [pc, #16]	; (801cc78 <rand1+0x28>)
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	4906      	ldr	r1, [pc, #24]	; (801cc84 <rand1+0x34>)
 801cc6a:	0018      	movs	r0, r3
 801cc6c:	f7e3 fada 	bl	8000224 <__aeabi_uidivmod>
 801cc70:	000b      	movs	r3, r1
}
 801cc72:	0018      	movs	r0, r3
 801cc74:	46bd      	mov	sp, r7
 801cc76:	bd80      	pop	{r7, pc}
 801cc78:	20000024 	.word	0x20000024
 801cc7c:	41c64e6d 	.word	0x41c64e6d
 801cc80:	00003039 	.word	0x00003039
 801cc84:	7fffffff 	.word	0x7fffffff

0801cc88 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b082      	sub	sp, #8
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	6078      	str	r0, [r7, #4]
 801cc90:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801cc92:	f7ff ffdd 	bl	801cc50 <rand1>
 801cc96:	683a      	ldr	r2, [r7, #0]
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	1ad3      	subs	r3, r2, r3
 801cc9c:	3301      	adds	r3, #1
 801cc9e:	0019      	movs	r1, r3
 801cca0:	f7e3 fbaa 	bl	80003f8 <__aeabi_idivmod>
 801cca4:	000b      	movs	r3, r1
 801cca6:	001a      	movs	r2, r3
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	18d3      	adds	r3, r2, r3
}
 801ccac:	0018      	movs	r0, r3
 801ccae:	46bd      	mov	sp, r7
 801ccb0:	b002      	add	sp, #8
 801ccb2:	bd80      	pop	{r7, pc}

0801ccb4 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b084      	sub	sp, #16
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	60f8      	str	r0, [r7, #12]
 801ccbc:	60b9      	str	r1, [r7, #8]
 801ccbe:	1dbb      	adds	r3, r7, #6
 801ccc0:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801ccc2:	e007      	b.n	801ccd4 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801ccc4:	68ba      	ldr	r2, [r7, #8]
 801ccc6:	1c53      	adds	r3, r2, #1
 801ccc8:	60bb      	str	r3, [r7, #8]
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	1c59      	adds	r1, r3, #1
 801ccce:	60f9      	str	r1, [r7, #12]
 801ccd0:	7812      	ldrb	r2, [r2, #0]
 801ccd2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801ccd4:	1dbb      	adds	r3, r7, #6
 801ccd6:	881b      	ldrh	r3, [r3, #0]
 801ccd8:	1dba      	adds	r2, r7, #6
 801ccda:	1e59      	subs	r1, r3, #1
 801ccdc:	8011      	strh	r1, [r2, #0]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d1f0      	bne.n	801ccc4 <memcpy1+0x10>
    }
}
 801cce2:	46c0      	nop			; (mov r8, r8)
 801cce4:	46bd      	mov	sp, r7
 801cce6:	b004      	add	sp, #16
 801cce8:	bd80      	pop	{r7, pc}

0801ccea <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801ccea:	b580      	push	{r7, lr}
 801ccec:	b084      	sub	sp, #16
 801ccee:	af00      	add	r7, sp, #0
 801ccf0:	60f8      	str	r0, [r7, #12]
 801ccf2:	60b9      	str	r1, [r7, #8]
 801ccf4:	1dbb      	adds	r3, r7, #6
 801ccf6:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801ccf8:	1dbb      	adds	r3, r7, #6
 801ccfa:	881b      	ldrh	r3, [r3, #0]
 801ccfc:	3b01      	subs	r3, #1
 801ccfe:	68fa      	ldr	r2, [r7, #12]
 801cd00:	18d3      	adds	r3, r2, r3
 801cd02:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801cd04:	e007      	b.n	801cd16 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 801cd06:	68ba      	ldr	r2, [r7, #8]
 801cd08:	1c53      	adds	r3, r2, #1
 801cd0a:	60bb      	str	r3, [r7, #8]
 801cd0c:	68fb      	ldr	r3, [r7, #12]
 801cd0e:	1e59      	subs	r1, r3, #1
 801cd10:	60f9      	str	r1, [r7, #12]
 801cd12:	7812      	ldrb	r2, [r2, #0]
 801cd14:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801cd16:	1dbb      	adds	r3, r7, #6
 801cd18:	881b      	ldrh	r3, [r3, #0]
 801cd1a:	1dba      	adds	r2, r7, #6
 801cd1c:	1e59      	subs	r1, r3, #1
 801cd1e:	8011      	strh	r1, [r2, #0]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d1f0      	bne.n	801cd06 <memcpyr+0x1c>
    }
}
 801cd24:	46c0      	nop			; (mov r8, r8)
 801cd26:	46bd      	mov	sp, r7
 801cd28:	b004      	add	sp, #16
 801cd2a:	bd80      	pop	{r7, pc}

0801cd2c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b082      	sub	sp, #8
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	6078      	str	r0, [r7, #4]
 801cd34:	0008      	movs	r0, r1
 801cd36:	0011      	movs	r1, r2
 801cd38:	1cfb      	adds	r3, r7, #3
 801cd3a:	1c02      	adds	r2, r0, #0
 801cd3c:	701a      	strb	r2, [r3, #0]
 801cd3e:	003b      	movs	r3, r7
 801cd40:	1c0a      	adds	r2, r1, #0
 801cd42:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801cd44:	e005      	b.n	801cd52 <memset1+0x26>
    {
        *dst++ = value;
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	1c5a      	adds	r2, r3, #1
 801cd4a:	607a      	str	r2, [r7, #4]
 801cd4c:	1cfa      	adds	r2, r7, #3
 801cd4e:	7812      	ldrb	r2, [r2, #0]
 801cd50:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801cd52:	003b      	movs	r3, r7
 801cd54:	881b      	ldrh	r3, [r3, #0]
 801cd56:	003a      	movs	r2, r7
 801cd58:	1e59      	subs	r1, r3, #1
 801cd5a:	8011      	strh	r1, [r2, #0]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d1f2      	bne.n	801cd46 <memset1+0x1a>
    }
}
 801cd60:	46c0      	nop			; (mov r8, r8)
 801cd62:	46bd      	mov	sp, r7
 801cd64:	b002      	add	sp, #8
 801cd66:	bd80      	pop	{r7, pc}

0801cd68 <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 801cd6c:	2380      	movs	r3, #128	; 0x80
 801cd6e:	015b      	lsls	r3, r3, #5
 801cd70:	2200      	movs	r2, #0
 801cd72:	0019      	movs	r1, r3
 801cd74:	2000      	movs	r0, #0
 801cd76:	f007 fdf7 	bl	8024968 <gpio_configure>
    TCXO_ON();
 801cd7a:	2380      	movs	r3, #128	; 0x80
 801cd7c:	015b      	lsls	r3, r3, #5
 801cd7e:	0019      	movs	r1, r3
 801cd80:	2000      	movs	r0, #0
 801cd82:	f007 fff9 	bl	8024d78 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 801cd86:	2035      	movs	r0, #53	; 0x35
 801cd88:	f008 f952 	bl	8025030 <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801cd8c:	220e      	movs	r2, #14
 801cd8e:	2110      	movs	r1, #16
 801cd90:	2001      	movs	r0, #1
 801cd92:	f007 fde9 	bl	8024968 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801cd96:	220e      	movs	r2, #14
 801cd98:	2102      	movs	r1, #2
 801cd9a:	2001      	movs	r0, #1
 801cd9c:	f007 fde4 	bl	8024968 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 801cda0:	220e      	movs	r2, #14
 801cda2:	2101      	movs	r1, #1
 801cda4:	2001      	movs	r0, #1
 801cda6:	f007 fddf 	bl	8024968 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801cdaa:	2380      	movs	r3, #128	; 0x80
 801cdac:	019b      	lsls	r3, r3, #6
 801cdae:	220e      	movs	r2, #14
 801cdb0:	0019      	movs	r1, r3
 801cdb2:	2002      	movs	r0, #2
 801cdb4:	f007 fdd8 	bl	8024968 <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 801cdb8:	2380      	movs	r3, #128	; 0x80
 801cdba:	021b      	lsls	r3, r3, #8
 801cdbc:	2201      	movs	r2, #1
 801cdbe:	0019      	movs	r1, r3
 801cdc0:	2000      	movs	r0, #0
 801cdc2:	f007 fdd1 	bl	8024968 <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801cdc6:	2380      	movs	r3, #128	; 0x80
 801cdc8:	021b      	lsls	r3, r3, #8
 801cdca:	0019      	movs	r1, r3
 801cdcc:	2000      	movs	r0, #0
 801cdce:	f007 ffd3 	bl	8024d78 <gpio_set>
	SX1276Reset();
 801cdd2:	f001 fead 	bl	801eb30 <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 801cdd6:	2001      	movs	r0, #1
 801cdd8:	f001 ff80 	bl	801ecdc <SX1276Read>
 801cddc:	0003      	movs	r3, r0
 801cdde:	001a      	movs	r2, r3
 801cde0:	2307      	movs	r3, #7
 801cde2:	439a      	bics	r2, r3
 801cde4:	0013      	movs	r3, r2
 801cde6:	b2db      	uxtb	r3, r3
 801cde8:	0019      	movs	r1, r3
 801cdea:	2001      	movs	r0, #1
 801cdec:	f001 ff62 	bl	801ecb4 <SX1276Write>
	SX1276SetAntSwLowPower(true);
 801cdf0:	2001      	movs	r0, #1
 801cdf2:	f000 f9fc 	bl	801d1ee <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 801cdf6:	200a      	movs	r0, #10
 801cdf8:	f008 f91a 	bl	8025030 <itsdk_delayMs>
	TCXO_OFF();
 801cdfc:	2380      	movs	r3, #128	; 0x80
 801cdfe:	015b      	lsls	r3, r3, #5
 801ce00:	0019      	movs	r1, r3
 801ce02:	2000      	movs	r0, #0
 801ce04:	f007 ffd0 	bl	8024da8 <gpio_reset>

}
 801ce08:	46c0      	nop			; (mov r8, r8)
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}

0801ce0e <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 801ce0e:	b580      	push	{r7, lr}
 801ce10:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 801ce12:	2300      	movs	r3, #0
}
 801ce14:	0018      	movs	r0, r3
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}

0801ce1a <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 801ce1a:	b580      	push	{r7, lr}
 801ce1c:	b082      	sub	sp, #8
 801ce1e:	af00      	add	r7, sp, #0
 801ce20:	0002      	movs	r2, r0
 801ce22:	1dfb      	adds	r3, r7, #7
 801ce24:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 801ce26:	1dfb      	adds	r3, r7, #7
 801ce28:	781b      	ldrb	r3, [r3, #0]
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	d109      	bne.n	801ce42 <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 801ce2e:	2380      	movs	r3, #128	; 0x80
 801ce30:	015b      	lsls	r3, r3, #5
 801ce32:	0019      	movs	r1, r3
 801ce34:	2000      	movs	r0, #0
 801ce36:	f007 ff9f 	bl	8024d78 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 801ce3a:	2032      	movs	r0, #50	; 0x32
 801ce3c:	f008 f8f8 	bl	8025030 <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 801ce40:	e008      	b.n	801ce54 <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 801ce42:	200a      	movs	r0, #10
 801ce44:	f008 f8f4 	bl	8025030 <itsdk_delayMs>
    TCXO_OFF(); 
 801ce48:	2380      	movs	r3, #128	; 0x80
 801ce4a:	015b      	lsls	r3, r3, #5
 801ce4c:	0019      	movs	r1, r3
 801ce4e:	2000      	movs	r0, #0
 801ce50:	f007 ffaa 	bl	8024da8 <gpio_reset>
}
 801ce54:	46c0      	nop			; (mov r8, r8)
 801ce56:	46bd      	mov	sp, r7
 801ce58:	b002      	add	sp, #8
 801ce5a:	bd80      	pop	{r7, pc}

0801ce5c <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 801ce60:	4b11      	ldr	r3, [pc, #68]	; (801cea8 <SX1276IoInit+0x4c>)
 801ce62:	0018      	movs	r0, r3
 801ce64:	f000 fa48 	bl	801d2f8 <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801ce68:	220e      	movs	r2, #14
 801ce6a:	2110      	movs	r1, #16
 801ce6c:	2001      	movs	r0, #1
 801ce6e:	f007 fd7b 	bl	8024968 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801ce72:	220e      	movs	r2, #14
 801ce74:	2102      	movs	r1, #2
 801ce76:	2001      	movs	r0, #1
 801ce78:	f007 fd76 	bl	8024968 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 801ce7c:	220e      	movs	r2, #14
 801ce7e:	2101      	movs	r1, #1
 801ce80:	2001      	movs	r0, #1
 801ce82:	f007 fd71 	bl	8024968 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801ce86:	2380      	movs	r3, #128	; 0x80
 801ce88:	019b      	lsls	r3, r3, #6
 801ce8a:	220e      	movs	r2, #14
 801ce8c:	0019      	movs	r1, r3
 801ce8e:	2002      	movs	r0, #2
 801ce90:	f007 fd6a 	bl	8024968 <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 801ce94:	2380      	movs	r3, #128	; 0x80
 801ce96:	015b      	lsls	r3, r3, #5
 801ce98:	2200      	movs	r2, #0
 801ce9a:	0019      	movs	r1, r3
 801ce9c:	2000      	movs	r0, #0
 801ce9e:	f007 fd63 	bl	8024968 <gpio_configure>

}
 801cea2:	46c0      	nop			; (mov r8, r8)
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd80      	pop	{r7, pc}
 801cea8:	20000028 	.word	0x20000028

0801ceac <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b082      	sub	sp, #8
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801ceb4:	2110      	movs	r1, #16
 801ceb6:	2001      	movs	r0, #1
 801ceb8:	f007 ffda 	bl	8024e70 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 801cebc:	2207      	movs	r2, #7
 801cebe:	2110      	movs	r1, #16
 801cec0:	2001      	movs	r0, #1
 801cec2:	f007 fd51 	bl	8024968 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 801cec6:	2300      	movs	r3, #0
 801cec8:	2200      	movs	r2, #0
 801ceca:	2110      	movs	r1, #16
 801cecc:	2001      	movs	r0, #1
 801cece:	f007 ffa7 	bl	8024e20 <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	681a      	ldr	r2, [r3, #0]
 801ced6:	4b39      	ldr	r3, [pc, #228]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801ced8:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 801ceda:	4b38      	ldr	r3, [pc, #224]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cedc:	2210      	movs	r2, #16
 801cede:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 801cee0:	4b36      	ldr	r3, [pc, #216]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cee2:	0018      	movs	r0, r3
 801cee4:	f008 f81c 	bl	8024f20 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801cee8:	2110      	movs	r1, #16
 801ceea:	2001      	movs	r0, #1
 801ceec:	f007 ff74 	bl	8024dd8 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801cef0:	2102      	movs	r1, #2
 801cef2:	2001      	movs	r0, #1
 801cef4:	f007 ffbc 	bl	8024e70 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 801cef8:	2207      	movs	r2, #7
 801cefa:	2102      	movs	r1, #2
 801cefc:	2001      	movs	r0, #1
 801cefe:	f007 fd33 	bl	8024968 <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 801cf02:	2300      	movs	r3, #0
 801cf04:	2200      	movs	r2, #0
 801cf06:	2102      	movs	r1, #2
 801cf08:	2001      	movs	r0, #1
 801cf0a:	f007 ff89 	bl	8024e20 <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	685a      	ldr	r2, [r3, #4]
 801cf12:	4b2a      	ldr	r3, [pc, #168]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cf14:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 801cf16:	4b29      	ldr	r3, [pc, #164]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cf18:	2202      	movs	r2, #2
 801cf1a:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 801cf1c:	4b28      	ldr	r3, [pc, #160]	; (801cfc0 <SX1276IoIrqInit+0x114>)
 801cf1e:	0018      	movs	r0, r3
 801cf20:	f007 fffe 	bl	8024f20 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801cf24:	2102      	movs	r1, #2
 801cf26:	2001      	movs	r0, #1
 801cf28:	f007 ff56 	bl	8024dd8 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801cf2c:	2101      	movs	r1, #1
 801cf2e:	2001      	movs	r0, #1
 801cf30:	f007 ff9e 	bl	8024e70 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 801cf34:	2207      	movs	r2, #7
 801cf36:	2101      	movs	r1, #1
 801cf38:	2001      	movs	r0, #1
 801cf3a:	f007 fd15 	bl	8024968 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 801cf3e:	2300      	movs	r3, #0
 801cf40:	2200      	movs	r2, #0
 801cf42:	2101      	movs	r1, #1
 801cf44:	2001      	movs	r0, #1
 801cf46:	f007 ff6b 	bl	8024e20 <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	689a      	ldr	r2, [r3, #8]
 801cf4e:	4b1b      	ldr	r3, [pc, #108]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cf50:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 801cf52:	4b1a      	ldr	r3, [pc, #104]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cf54:	2201      	movs	r2, #1
 801cf56:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 801cf58:	4b1a      	ldr	r3, [pc, #104]	; (801cfc4 <SX1276IoIrqInit+0x118>)
 801cf5a:	0018      	movs	r0, r3
 801cf5c:	f007 ffe0 	bl	8024f20 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801cf60:	2101      	movs	r1, #1
 801cf62:	2001      	movs	r0, #1
 801cf64:	f007 ff38 	bl	8024dd8 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801cf68:	2380      	movs	r3, #128	; 0x80
 801cf6a:	019b      	lsls	r3, r3, #6
 801cf6c:	0019      	movs	r1, r3
 801cf6e:	2002      	movs	r0, #2
 801cf70:	f007 ff7e 	bl	8024e70 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 801cf74:	2380      	movs	r3, #128	; 0x80
 801cf76:	019b      	lsls	r3, r3, #6
 801cf78:	2207      	movs	r2, #7
 801cf7a:	0019      	movs	r1, r3
 801cf7c:	2002      	movs	r0, #2
 801cf7e:	f007 fcf3 	bl	8024968 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 801cf82:	2380      	movs	r3, #128	; 0x80
 801cf84:	0199      	lsls	r1, r3, #6
 801cf86:	2300      	movs	r3, #0
 801cf88:	2200      	movs	r2, #0
 801cf8a:	2002      	movs	r0, #2
 801cf8c:	f007 ff48 	bl	8024e20 <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	68da      	ldr	r2, [r3, #12]
 801cf94:	4b09      	ldr	r3, [pc, #36]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cf96:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 801cf98:	4b08      	ldr	r3, [pc, #32]	; (801cfbc <SX1276IoIrqInit+0x110>)
 801cf9a:	2280      	movs	r2, #128	; 0x80
 801cf9c:	0192      	lsls	r2, r2, #6
 801cf9e:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 801cfa0:	4b09      	ldr	r3, [pc, #36]	; (801cfc8 <SX1276IoIrqInit+0x11c>)
 801cfa2:	0018      	movs	r0, r3
 801cfa4:	f007 ffbc 	bl	8024f20 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801cfa8:	2380      	movs	r3, #128	; 0x80
 801cfaa:	019b      	lsls	r3, r3, #6
 801cfac:	0019      	movs	r1, r3
 801cfae:	2002      	movs	r0, #2
 801cfb0:	f007 ff12 	bl	8024dd8 <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 801cfb4:	46c0      	nop			; (mov r8, r8)
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	b002      	add	sp, #8
 801cfba:	bd80      	pop	{r7, pc}
 801cfbc:	20001d40 	.word	0x20001d40
 801cfc0:	20001d4c 	.word	0x20001d4c
 801cfc4:	20001d58 	.word	0x20001d58
 801cfc8:	20001d64 	.word	0x20001d64

0801cfcc <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801cfd0:	220e      	movs	r2, #14
 801cfd2:	2110      	movs	r1, #16
 801cfd4:	2001      	movs	r0, #1
 801cfd6:	f007 fcc7 	bl	8024968 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801cfda:	2110      	movs	r1, #16
 801cfdc:	2001      	movs	r0, #1
 801cfde:	f007 ff47 	bl	8024e70 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801cfe2:	220e      	movs	r2, #14
 801cfe4:	2102      	movs	r1, #2
 801cfe6:	2001      	movs	r0, #1
 801cfe8:	f007 fcbe 	bl	8024968 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801cfec:	2102      	movs	r1, #2
 801cfee:	2001      	movs	r0, #1
 801cff0:	f007 ff3e 	bl	8024e70 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 801cff4:	220e      	movs	r2, #14
 801cff6:	2101      	movs	r1, #1
 801cff8:	2001      	movs	r0, #1
 801cffa:	f007 fcb5 	bl	8024968 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801cffe:	2101      	movs	r1, #1
 801d000:	2001      	movs	r0, #1
 801d002:	f007 ff35 	bl	8024e70 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801d006:	2380      	movs	r3, #128	; 0x80
 801d008:	019b      	lsls	r3, r3, #6
 801d00a:	220e      	movs	r2, #14
 801d00c:	0019      	movs	r1, r3
 801d00e:	2002      	movs	r0, #2
 801d010:	f007 fcaa 	bl	8024968 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801d014:	2380      	movs	r3, #128	; 0x80
 801d016:	019b      	lsls	r3, r3, #6
 801d018:	0019      	movs	r1, r3
 801d01a:	2002      	movs	r0, #2
 801d01c:	f007 ff28 	bl	8024e70 <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 801d020:	46c0      	nop			; (mov r8, r8)
 801d022:	46bd      	mov	sp, r7
 801d024:	bd80      	pop	{r7, pc}

0801d026 <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 801d026:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d028:	b085      	sub	sp, #20
 801d02a:	af00      	add	r7, sp, #0
 801d02c:	0002      	movs	r2, r0
 801d02e:	1dfb      	adds	r3, r7, #7
 801d030:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 801d032:	250f      	movs	r5, #15
 801d034:	197b      	adds	r3, r7, r5
 801d036:	2200      	movs	r2, #0
 801d038:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801d03a:	260e      	movs	r6, #14
 801d03c:	19bb      	adds	r3, r7, r6
 801d03e:	2200      	movs	r2, #0
 801d040:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 801d042:	197c      	adds	r4, r7, r5
 801d044:	2009      	movs	r0, #9
 801d046:	f001 fe49 	bl	801ecdc <SX1276Read>
 801d04a:	0003      	movs	r3, r0
 801d04c:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801d04e:	19bc      	adds	r4, r7, r6
 801d050:	204d      	movs	r0, #77	; 0x4d
 801d052:	f001 fe43 	bl	801ecdc <SX1276Read>
 801d056:	0003      	movs	r3, r0
 801d058:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 801d05a:	197b      	adds	r3, r7, r5
 801d05c:	781b      	ldrb	r3, [r3, #0]
 801d05e:	b25b      	sxtb	r3, r3
 801d060:	227f      	movs	r2, #127	; 0x7f
 801d062:	4013      	ands	r3, r2
 801d064:	b25c      	sxtb	r4, r3
 801d066:	1dfb      	adds	r3, r7, #7
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	0018      	movs	r0, r3
 801d06c:	f000 f8ae 	bl	801d1cc <SX1276GetPaSelect>
 801d070:	0003      	movs	r3, r0
 801d072:	b25b      	sxtb	r3, r3
 801d074:	4323      	orrs	r3, r4
 801d076:	b25a      	sxtb	r2, r3
 801d078:	197b      	adds	r3, r7, r5
 801d07a:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 801d07c:	197b      	adds	r3, r7, r5
 801d07e:	197a      	adds	r2, r7, r5
 801d080:	7812      	ldrb	r2, [r2, #0]
 801d082:	2170      	movs	r1, #112	; 0x70
 801d084:	430a      	orrs	r2, r1
 801d086:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801d088:	197b      	adds	r3, r7, r5
 801d08a:	781b      	ldrb	r3, [r3, #0]
 801d08c:	b25b      	sxtb	r3, r3
 801d08e:	2b00      	cmp	r3, #0
 801d090:	da67      	bge.n	801d162 <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 801d092:	1dfb      	adds	r3, r7, #7
 801d094:	781b      	ldrb	r3, [r3, #0]
 801d096:	b25b      	sxtb	r3, r3
 801d098:	2b11      	cmp	r3, #17
 801d09a:	dd07      	ble.n	801d0ac <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801d09c:	220e      	movs	r2, #14
 801d09e:	18bb      	adds	r3, r7, r2
 801d0a0:	18ba      	adds	r2, r7, r2
 801d0a2:	7812      	ldrb	r2, [r2, #0]
 801d0a4:	2107      	movs	r1, #7
 801d0a6:	430a      	orrs	r2, r1
 801d0a8:	701a      	strb	r2, [r3, #0]
 801d0aa:	e00b      	b.n	801d0c4 <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801d0ac:	210e      	movs	r1, #14
 801d0ae:	187b      	adds	r3, r7, r1
 801d0b0:	781b      	ldrb	r3, [r3, #0]
 801d0b2:	b25b      	sxtb	r3, r3
 801d0b4:	2207      	movs	r2, #7
 801d0b6:	4393      	bics	r3, r2
 801d0b8:	b25b      	sxtb	r3, r3
 801d0ba:	2204      	movs	r2, #4
 801d0bc:	4313      	orrs	r3, r2
 801d0be:	b25a      	sxtb	r2, r3
 801d0c0:	187b      	adds	r3, r7, r1
 801d0c2:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801d0c4:	230e      	movs	r3, #14
 801d0c6:	18fb      	adds	r3, r7, r3
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	2207      	movs	r2, #7
 801d0cc:	4013      	ands	r3, r2
 801d0ce:	2b07      	cmp	r3, #7
 801d0d0:	d123      	bne.n	801d11a <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 801d0d2:	1dfb      	adds	r3, r7, #7
 801d0d4:	781b      	ldrb	r3, [r3, #0]
 801d0d6:	b25b      	sxtb	r3, r3
 801d0d8:	2b04      	cmp	r3, #4
 801d0da:	dc02      	bgt.n	801d0e2 <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 801d0dc:	1dfb      	adds	r3, r7, #7
 801d0de:	2205      	movs	r2, #5
 801d0e0:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801d0e2:	1dfb      	adds	r3, r7, #7
 801d0e4:	781b      	ldrb	r3, [r3, #0]
 801d0e6:	b25b      	sxtb	r3, r3
 801d0e8:	2b14      	cmp	r3, #20
 801d0ea:	dd02      	ble.n	801d0f2 <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 801d0ec:	1dfb      	adds	r3, r7, #7
 801d0ee:	2214      	movs	r2, #20
 801d0f0:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801d0f2:	200f      	movs	r0, #15
 801d0f4:	183b      	adds	r3, r7, r0
 801d0f6:	781b      	ldrb	r3, [r3, #0]
 801d0f8:	b25b      	sxtb	r3, r3
 801d0fa:	220f      	movs	r2, #15
 801d0fc:	4393      	bics	r3, r2
 801d0fe:	b25a      	sxtb	r2, r3
 801d100:	1dfb      	adds	r3, r7, #7
 801d102:	781b      	ldrb	r3, [r3, #0]
 801d104:	3b05      	subs	r3, #5
 801d106:	b2db      	uxtb	r3, r3
 801d108:	b25b      	sxtb	r3, r3
 801d10a:	210f      	movs	r1, #15
 801d10c:	400b      	ands	r3, r1
 801d10e:	b25b      	sxtb	r3, r3
 801d110:	4313      	orrs	r3, r2
 801d112:	b25a      	sxtb	r2, r3
 801d114:	183b      	adds	r3, r7, r0
 801d116:	701a      	strb	r2, [r3, #0]
 801d118:	e046      	b.n	801d1a8 <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 801d11a:	1dfb      	adds	r3, r7, #7
 801d11c:	781b      	ldrb	r3, [r3, #0]
 801d11e:	b25b      	sxtb	r3, r3
 801d120:	2b01      	cmp	r3, #1
 801d122:	dc02      	bgt.n	801d12a <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 801d124:	1dfb      	adds	r3, r7, #7
 801d126:	2202      	movs	r2, #2
 801d128:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801d12a:	1dfb      	adds	r3, r7, #7
 801d12c:	781b      	ldrb	r3, [r3, #0]
 801d12e:	b25b      	sxtb	r3, r3
 801d130:	2b11      	cmp	r3, #17
 801d132:	dd02      	ble.n	801d13a <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 801d134:	1dfb      	adds	r3, r7, #7
 801d136:	2211      	movs	r2, #17
 801d138:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801d13a:	200f      	movs	r0, #15
 801d13c:	183b      	adds	r3, r7, r0
 801d13e:	781b      	ldrb	r3, [r3, #0]
 801d140:	b25b      	sxtb	r3, r3
 801d142:	220f      	movs	r2, #15
 801d144:	4393      	bics	r3, r2
 801d146:	b25a      	sxtb	r2, r3
 801d148:	1dfb      	adds	r3, r7, #7
 801d14a:	781b      	ldrb	r3, [r3, #0]
 801d14c:	3b02      	subs	r3, #2
 801d14e:	b2db      	uxtb	r3, r3
 801d150:	b25b      	sxtb	r3, r3
 801d152:	210f      	movs	r1, #15
 801d154:	400b      	ands	r3, r1
 801d156:	b25b      	sxtb	r3, r3
 801d158:	4313      	orrs	r3, r2
 801d15a:	b25a      	sxtb	r2, r3
 801d15c:	183b      	adds	r3, r7, r0
 801d15e:	701a      	strb	r2, [r3, #0]
 801d160:	e022      	b.n	801d1a8 <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 801d162:	1dfb      	adds	r3, r7, #7
 801d164:	781b      	ldrb	r3, [r3, #0]
 801d166:	b25b      	sxtb	r3, r3
 801d168:	3301      	adds	r3, #1
 801d16a:	da02      	bge.n	801d172 <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 801d16c:	1dfb      	adds	r3, r7, #7
 801d16e:	22ff      	movs	r2, #255	; 0xff
 801d170:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 801d172:	1dfb      	adds	r3, r7, #7
 801d174:	781b      	ldrb	r3, [r3, #0]
 801d176:	b25b      	sxtb	r3, r3
 801d178:	2b0e      	cmp	r3, #14
 801d17a:	dd02      	ble.n	801d182 <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 801d17c:	1dfb      	adds	r3, r7, #7
 801d17e:	220e      	movs	r2, #14
 801d180:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 801d182:	200f      	movs	r0, #15
 801d184:	183b      	adds	r3, r7, r0
 801d186:	781b      	ldrb	r3, [r3, #0]
 801d188:	b25b      	sxtb	r3, r3
 801d18a:	220f      	movs	r2, #15
 801d18c:	4393      	bics	r3, r2
 801d18e:	b25a      	sxtb	r2, r3
 801d190:	1dfb      	adds	r3, r7, #7
 801d192:	781b      	ldrb	r3, [r3, #0]
 801d194:	3301      	adds	r3, #1
 801d196:	b2db      	uxtb	r3, r3
 801d198:	b25b      	sxtb	r3, r3
 801d19a:	210f      	movs	r1, #15
 801d19c:	400b      	ands	r3, r1
 801d19e:	b25b      	sxtb	r3, r3
 801d1a0:	4313      	orrs	r3, r2
 801d1a2:	b25a      	sxtb	r2, r3
 801d1a4:	183b      	adds	r3, r7, r0
 801d1a6:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801d1a8:	230f      	movs	r3, #15
 801d1aa:	18fb      	adds	r3, r7, r3
 801d1ac:	781b      	ldrb	r3, [r3, #0]
 801d1ae:	0019      	movs	r1, r3
 801d1b0:	2009      	movs	r0, #9
 801d1b2:	f001 fd7f 	bl	801ecb4 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801d1b6:	230e      	movs	r3, #14
 801d1b8:	18fb      	adds	r3, r7, r3
 801d1ba:	781b      	ldrb	r3, [r3, #0]
 801d1bc:	0019      	movs	r1, r3
 801d1be:	204d      	movs	r0, #77	; 0x4d
 801d1c0:	f001 fd78 	bl	801ecb4 <SX1276Write>
}
 801d1c4:	46c0      	nop			; (mov r8, r8)
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	b005      	add	sp, #20
 801d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d1cc <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b082      	sub	sp, #8
 801d1d0:	af00      	add	r7, sp, #0
 801d1d2:	0002      	movs	r2, r0
 801d1d4:	1dfb      	adds	r3, r7, #7
 801d1d6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 801d1d8:	1dfb      	adds	r3, r7, #7
 801d1da:	781b      	ldrb	r3, [r3, #0]
 801d1dc:	2b0e      	cmp	r3, #14
 801d1de:	d901      	bls.n	801d1e4 <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 801d1e0:	2380      	movs	r3, #128	; 0x80
 801d1e2:	e000      	b.n	801d1e6 <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 801d1e4:	2300      	movs	r3, #0
    }
}
 801d1e6:	0018      	movs	r0, r3
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	b002      	add	sp, #8
 801d1ec:	bd80      	pop	{r7, pc}

0801d1ee <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 801d1ee:	b580      	push	{r7, lr}
 801d1f0:	b082      	sub	sp, #8
 801d1f2:	af00      	add	r7, sp, #0
 801d1f4:	0002      	movs	r2, r0
 801d1f6:	1dfb      	adds	r3, r7, #7
 801d1f8:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 801d1fa:	1dfb      	adds	r3, r7, #7
 801d1fc:	781b      	ldrb	r3, [r3, #0]
 801d1fe:	2201      	movs	r2, #1
 801d200:	4053      	eors	r3, r2
 801d202:	b2db      	uxtb	r3, r3
 801d204:	2b00      	cmp	r3, #0
 801d206:	d01b      	beq.n	801d240 <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 801d208:	2200      	movs	r2, #0
 801d20a:	2102      	movs	r1, #2
 801d20c:	2000      	movs	r0, #0
 801d20e:	f007 fbab 	bl	8024968 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801d212:	2102      	movs	r1, #2
 801d214:	2000      	movs	r0, #0
 801d216:	f007 fdc7 	bl	8024da8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 801d21a:	2200      	movs	r2, #0
 801d21c:	2102      	movs	r1, #2
 801d21e:	2002      	movs	r0, #2
 801d220:	f007 fba2 	bl	8024968 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801d224:	2102      	movs	r1, #2
 801d226:	2002      	movs	r0, #2
 801d228:	f007 fdbe 	bl	8024da8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 801d22c:	2200      	movs	r2, #0
 801d22e:	2104      	movs	r1, #4
 801d230:	2002      	movs	r0, #2
 801d232:	f007 fb99 	bl	8024968 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 801d236:	2104      	movs	r1, #4
 801d238:	2002      	movs	r0, #2
 801d23a:	f007 fdb5 	bl	8024da8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 801d23e:	e01a      	b.n	801d276 <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 801d240:	220e      	movs	r2, #14
 801d242:	2102      	movs	r1, #2
 801d244:	2000      	movs	r0, #0
 801d246:	f007 fb8f 	bl	8024968 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801d24a:	2102      	movs	r1, #2
 801d24c:	2000      	movs	r0, #0
 801d24e:	f007 fdab 	bl	8024da8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 801d252:	220e      	movs	r2, #14
 801d254:	2102      	movs	r1, #2
 801d256:	2002      	movs	r0, #2
 801d258:	f007 fb86 	bl	8024968 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801d25c:	2102      	movs	r1, #2
 801d25e:	2002      	movs	r0, #2
 801d260:	f007 fda2 	bl	8024da8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 801d264:	220e      	movs	r2, #14
 801d266:	2104      	movs	r1, #4
 801d268:	2002      	movs	r0, #2
 801d26a:	f007 fb7d 	bl	8024968 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 801d26e:	2104      	movs	r1, #4
 801d270:	2002      	movs	r0, #2
 801d272:	f007 fd99 	bl	8024da8 <gpio_reset>
}
 801d276:	46c0      	nop			; (mov r8, r8)
 801d278:	46bd      	mov	sp, r7
 801d27a:	b002      	add	sp, #8
 801d27c:	bd80      	pop	{r7, pc}
	...

0801d280 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 801d280:	b590      	push	{r4, r7, lr}
 801d282:	b085      	sub	sp, #20
 801d284:	af00      	add	r7, sp, #0
 801d286:	0002      	movs	r2, r0
 801d288:	1dfb      	adds	r3, r7, #7
 801d28a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801d28c:	230f      	movs	r3, #15
 801d28e:	18fc      	adds	r4, r7, r3
 801d290:	2009      	movs	r0, #9
 801d292:	f001 fd23 	bl	801ecdc <SX1276Read>
 801d296:	0003      	movs	r3, r0
 801d298:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 801d29a:	1dfb      	adds	r3, r7, #7
 801d29c:	781b      	ldrb	r3, [r3, #0]
 801d29e:	2b03      	cmp	r3, #3
 801d2a0:	d112      	bne.n	801d2c8 <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 801d2a2:	230f      	movs	r3, #15
 801d2a4:	18fb      	adds	r3, r7, r3
 801d2a6:	781b      	ldrb	r3, [r3, #0]
 801d2a8:	b25b      	sxtb	r3, r3
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	da04      	bge.n	801d2b8 <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801d2ae:	2102      	movs	r1, #2
 801d2b0:	2002      	movs	r0, #2
 801d2b2:	f007 fd61 	bl	8024d78 <gpio_set>
 801d2b6:	e003      	b.n	801d2c0 <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 801d2b8:	2104      	movs	r1, #4
 801d2ba:	2002      	movs	r0, #2
 801d2bc:	f007 fd5c 	bl	8024d78 <gpio_set>
      }
      SX1276.RxTx = 1;
 801d2c0:	4b07      	ldr	r3, [pc, #28]	; (801d2e0 <SX1276SetAntSw+0x60>)
 801d2c2:	2201      	movs	r2, #1
 801d2c4:	701a      	strb	r2, [r3, #0]
      break;
 801d2c6:	e007      	b.n	801d2d8 <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 801d2c8:	4b05      	ldr	r3, [pc, #20]	; (801d2e0 <SX1276SetAntSw+0x60>)
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801d2ce:	2102      	movs	r1, #2
 801d2d0:	2000      	movs	r0, #0
 801d2d2:	f007 fd51 	bl	8024d78 <gpio_set>
     break;
 801d2d6:	46c0      	nop			; (mov r8, r8)
    }
}
 801d2d8:	46c0      	nop			; (mov r8, r8)
 801d2da:	46bd      	mov	sp, r7
 801d2dc:	b005      	add	sp, #20
 801d2de:	bd90      	pop	{r4, r7, pc}
 801d2e0:	200022bc 	.word	0x200022bc

0801d2e4 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b082      	sub	sp, #8
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 801d2ec:	2301      	movs	r3, #1
}
 801d2ee:	0018      	movs	r0, r3
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	b002      	add	sp, #8
 801d2f4:	bd80      	pop	{r7, pc}
	...

0801d2f8 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b082      	sub	sp, #8
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 801d300:	4b03      	ldr	r3, [pc, #12]	; (801d310 <SX1276BoardInit+0x18>)
 801d302:	687a      	ldr	r2, [r7, #4]
 801d304:	601a      	str	r2, [r3, #0]
}
 801d306:	46c0      	nop			; (mov r8, r8)
 801d308:	46bd      	mov	sp, r7
 801d30a:	b002      	add	sp, #8
 801d30c:	bd80      	pop	{r7, pc}
 801d30e:	46c0      	nop			; (mov r8, r8)
 801d310:	20001e8c 	.word	0x20001e8c

0801d314 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 801d314:	b590      	push	{r4, r7, lr}
 801d316:	b085      	sub	sp, #20
 801d318:	af00      	add	r7, sp, #0
 801d31a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 801d31c:	4b33      	ldr	r3, [pc, #204]	; (801d3ec <SX1276Init+0xd8>)
 801d31e:	687a      	ldr	r2, [r7, #4]
 801d320:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801d322:	4a33      	ldr	r2, [pc, #204]	; (801d3f0 <SX1276Init+0xdc>)
 801d324:	4b33      	ldr	r3, [pc, #204]	; (801d3f4 <SX1276Init+0xe0>)
 801d326:	0011      	movs	r1, r2
 801d328:	0018      	movs	r0, r3
 801d32a:	f7ff fba1 	bl	801ca70 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 801d32e:	4a30      	ldr	r2, [pc, #192]	; (801d3f0 <SX1276Init+0xdc>)
 801d330:	4b31      	ldr	r3, [pc, #196]	; (801d3f8 <SX1276Init+0xe4>)
 801d332:	0011      	movs	r1, r2
 801d334:	0018      	movs	r0, r3
 801d336:	f7ff fb9b 	bl	801ca70 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 801d33a:	4a2d      	ldr	r2, [pc, #180]	; (801d3f0 <SX1276Init+0xdc>)
 801d33c:	4b2f      	ldr	r3, [pc, #188]	; (801d3fc <SX1276Init+0xe8>)
 801d33e:	0011      	movs	r1, r2
 801d340:	0018      	movs	r0, r3
 801d342:	f7ff fb95 	bl	801ca70 <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 801d346:	4b2e      	ldr	r3, [pc, #184]	; (801d400 <SX1276Init+0xec>)
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	2001      	movs	r0, #1
 801d34e:	4798      	blx	r3

    SX1276Reset( );
 801d350:	f001 fbee 	bl	801eb30 <SX1276Reset>
    RxChainCalibration( );
 801d354:	f000 f936 	bl	801d5c4 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801d358:	2000      	movs	r0, #0
 801d35a:	f001 fc03 	bl	801eb64 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 801d35e:	4b28      	ldr	r3, [pc, #160]	; (801d400 <SX1276Init+0xec>)
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	689b      	ldr	r3, [r3, #8]
 801d364:	4a27      	ldr	r2, [pc, #156]	; (801d404 <SX1276Init+0xf0>)
 801d366:	0010      	movs	r0, r2
 801d368:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801d36a:	230f      	movs	r3, #15
 801d36c:	18fb      	adds	r3, r7, r3
 801d36e:	2200      	movs	r2, #0
 801d370:	701a      	strb	r2, [r3, #0]
 801d372:	e025      	b.n	801d3c0 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801d374:	240f      	movs	r4, #15
 801d376:	193b      	adds	r3, r7, r4
 801d378:	781a      	ldrb	r2, [r3, #0]
 801d37a:	4923      	ldr	r1, [pc, #140]	; (801d408 <SX1276Init+0xf4>)
 801d37c:	0013      	movs	r3, r2
 801d37e:	005b      	lsls	r3, r3, #1
 801d380:	189b      	adds	r3, r3, r2
 801d382:	5c5b      	ldrb	r3, [r3, r1]
 801d384:	0018      	movs	r0, r3
 801d386:	f001 fc3d 	bl	801ec04 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801d38a:	193b      	adds	r3, r7, r4
 801d38c:	781a      	ldrb	r2, [r3, #0]
 801d38e:	491e      	ldr	r1, [pc, #120]	; (801d408 <SX1276Init+0xf4>)
 801d390:	0013      	movs	r3, r2
 801d392:	005b      	lsls	r3, r3, #1
 801d394:	189b      	adds	r3, r3, r2
 801d396:	18cb      	adds	r3, r1, r3
 801d398:	3301      	adds	r3, #1
 801d39a:	781b      	ldrb	r3, [r3, #0]
 801d39c:	b298      	uxth	r0, r3
 801d39e:	193b      	adds	r3, r7, r4
 801d3a0:	781a      	ldrb	r2, [r3, #0]
 801d3a2:	4919      	ldr	r1, [pc, #100]	; (801d408 <SX1276Init+0xf4>)
 801d3a4:	0013      	movs	r3, r2
 801d3a6:	005b      	lsls	r3, r3, #1
 801d3a8:	189b      	adds	r3, r3, r2
 801d3aa:	18cb      	adds	r3, r1, r3
 801d3ac:	3302      	adds	r3, #2
 801d3ae:	781b      	ldrb	r3, [r3, #0]
 801d3b0:	0019      	movs	r1, r3
 801d3b2:	f001 fc7f 	bl	801ecb4 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801d3b6:	193b      	adds	r3, r7, r4
 801d3b8:	781a      	ldrb	r2, [r3, #0]
 801d3ba:	193b      	adds	r3, r7, r4
 801d3bc:	3201      	adds	r2, #1
 801d3be:	701a      	strb	r2, [r3, #0]
 801d3c0:	230f      	movs	r3, #15
 801d3c2:	18fb      	adds	r3, r7, r3
 801d3c4:	781b      	ldrb	r3, [r3, #0]
 801d3c6:	2b0f      	cmp	r3, #15
 801d3c8:	d9d4      	bls.n	801d374 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 801d3ca:	2000      	movs	r0, #0
 801d3cc:	f001 fc1a 	bl	801ec04 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 801d3d0:	4b0e      	ldr	r3, [pc, #56]	; (801d40c <SX1276Init+0xf8>)
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 801d3d6:	4b0a      	ldr	r3, [pc, #40]	; (801d400 <SX1276Init+0xec>)
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	685b      	ldr	r3, [r3, #4]
 801d3dc:	4798      	blx	r3
 801d3de:	0003      	movs	r3, r0
 801d3e0:	3335      	adds	r3, #53	; 0x35
}
 801d3e2:	0018      	movs	r0, r3
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	b005      	add	sp, #20
 801d3e8:	bd90      	pop	{r4, r7, pc}
 801d3ea:	46c0      	nop			; (mov r8, r8)
 801d3ec:	20001d88 	.word	0x20001d88
 801d3f0:	0801ef55 	.word	0x0801ef55
 801d3f4:	2000228c 	.word	0x2000228c
 801d3f8:	20002324 	.word	0x20002324
 801d3fc:	200022a4 	.word	0x200022a4
 801d400:	20001e8c 	.word	0x20001e8c
 801d404:	20000040 	.word	0x20000040
 801d408:	0802944c 	.word	0x0802944c
 801d40c:	200022bc 	.word	0x200022bc

0801d410 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 801d410:	b580      	push	{r7, lr}
 801d412:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 801d414:	4b02      	ldr	r3, [pc, #8]	; (801d420 <SX1276GetStatus+0x10>)
 801d416:	791b      	ldrb	r3, [r3, #4]
}
 801d418:	0018      	movs	r0, r3
 801d41a:	46bd      	mov	sp, r7
 801d41c:	bd80      	pop	{r7, pc}
 801d41e:	46c0      	nop			; (mov r8, r8)
 801d420:	200022bc 	.word	0x200022bc

0801d424 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 801d424:	b590      	push	{r4, r7, lr}
 801d426:	b087      	sub	sp, #28
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 801d42c:	4b1d      	ldr	r3, [pc, #116]	; (801d4a4 <SX1276SetChannel+0x80>)
 801d42e:	687a      	ldr	r2, [r7, #4]
 801d430:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	491c      	ldr	r1, [pc, #112]	; (801d4a8 <SX1276SetChannel+0x84>)
 801d436:	0018      	movs	r0, r3
 801d438:	f7e2 fe6e 	bl	8000118 <__udivsi3>
 801d43c:	0003      	movs	r3, r0
 801d43e:	617b      	str	r3, [r7, #20]
 801d440:	6979      	ldr	r1, [r7, #20]
 801d442:	000b      	movs	r3, r1
 801d444:	015b      	lsls	r3, r3, #5
 801d446:	1a5b      	subs	r3, r3, r1
 801d448:	019a      	lsls	r2, r3, #6
 801d44a:	1ad2      	subs	r2, r2, r3
 801d44c:	00d2      	lsls	r2, r2, #3
 801d44e:	1853      	adds	r3, r2, r1
 801d450:	687a      	ldr	r2, [r7, #4]
 801d452:	1ad3      	subs	r3, r2, r3
 801d454:	613b      	str	r3, [r7, #16]
 801d456:	697b      	ldr	r3, [r7, #20]
 801d458:	021c      	lsls	r4, r3, #8
 801d45a:	693b      	ldr	r3, [r7, #16]
 801d45c:	021b      	lsls	r3, r3, #8
 801d45e:	4a13      	ldr	r2, [pc, #76]	; (801d4ac <SX1276SetChannel+0x88>)
 801d460:	4694      	mov	ip, r2
 801d462:	4463      	add	r3, ip
 801d464:	4910      	ldr	r1, [pc, #64]	; (801d4a8 <SX1276SetChannel+0x84>)
 801d466:	0018      	movs	r0, r3
 801d468:	f7e2 fe56 	bl	8000118 <__udivsi3>
 801d46c:	0003      	movs	r3, r0
 801d46e:	18e3      	adds	r3, r4, r3
 801d470:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	0c1b      	lsrs	r3, r3, #16
 801d476:	b2db      	uxtb	r3, r3
 801d478:	0019      	movs	r1, r3
 801d47a:	2006      	movs	r0, #6
 801d47c:	f001 fc1a 	bl	801ecb4 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	0a1b      	lsrs	r3, r3, #8
 801d484:	b2db      	uxtb	r3, r3
 801d486:	0019      	movs	r1, r3
 801d488:	2007      	movs	r0, #7
 801d48a:	f001 fc13 	bl	801ecb4 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	b2db      	uxtb	r3, r3
 801d492:	0019      	movs	r1, r3
 801d494:	2008      	movs	r0, #8
 801d496:	f001 fc0d 	bl	801ecb4 <SX1276Write>
}
 801d49a:	46c0      	nop			; (mov r8, r8)
 801d49c:	46bd      	mov	sp, r7
 801d49e:	b007      	add	sp, #28
 801d4a0:	bd90      	pop	{r4, r7, pc}
 801d4a2:	46c0      	nop			; (mov r8, r8)
 801d4a4:	200022bc 	.word	0x200022bc
 801d4a8:	00003d09 	.word	0x00003d09
 801d4ac:	00001e84 	.word	0x00001e84

0801d4b0 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801d4b0:	b5b0      	push	{r4, r5, r7, lr}
 801d4b2:	b086      	sub	sp, #24
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	60b9      	str	r1, [r7, #8]
 801d4b8:	0011      	movs	r1, r2
 801d4ba:	607b      	str	r3, [r7, #4]
 801d4bc:	240f      	movs	r4, #15
 801d4be:	193b      	adds	r3, r7, r4
 801d4c0:	1c02      	adds	r2, r0, #0
 801d4c2:	701a      	strb	r2, [r3, #0]
 801d4c4:	230c      	movs	r3, #12
 801d4c6:	18fb      	adds	r3, r7, r3
 801d4c8:	1c0a      	adds	r2, r1, #0
 801d4ca:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 801d4cc:	2317      	movs	r3, #23
 801d4ce:	18fb      	adds	r3, r7, r3
 801d4d0:	2201      	movs	r2, #1
 801d4d2:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801d4d4:	2314      	movs	r3, #20
 801d4d6:	18fb      	adds	r3, r7, r3
 801d4d8:	2200      	movs	r2, #0
 801d4da:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 801d4dc:	2300      	movs	r3, #0
 801d4de:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 801d4e0:	193b      	adds	r3, r7, r4
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	0018      	movs	r0, r3
 801d4e6:	f001 fb8d 	bl	801ec04 <SX1276SetModem>

    SX1276SetChannel( freq );
 801d4ea:	68bb      	ldr	r3, [r7, #8]
 801d4ec:	0018      	movs	r0, r3
 801d4ee:	f7ff ff99 	bl	801d424 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801d4f2:	2005      	movs	r0, #5
 801d4f4:	f001 fb36 	bl	801eb64 <SX1276SetOpMode>

    DelayMs( 1 );
 801d4f8:	2001      	movs	r0, #1
 801d4fa:	f007 fd99 	bl	8025030 <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 801d4fe:	f7ff fb91 	bl	801cc24 <TimerGetCurrentTime>
 801d502:	0003      	movs	r3, r0
 801d504:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801d506:	e017      	b.n	801d538 <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 801d508:	2514      	movs	r5, #20
 801d50a:	197c      	adds	r4, r7, r5
 801d50c:	230f      	movs	r3, #15
 801d50e:	18fb      	adds	r3, r7, r3
 801d510:	781b      	ldrb	r3, [r3, #0]
 801d512:	0018      	movs	r0, r3
 801d514:	f001 fac0 	bl	801ea98 <SX1276ReadRssi>
 801d518:	0003      	movs	r3, r0
 801d51a:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 801d51c:	197a      	adds	r2, r7, r5
 801d51e:	230c      	movs	r3, #12
 801d520:	18fb      	adds	r3, r7, r3
 801d522:	2100      	movs	r1, #0
 801d524:	5e52      	ldrsh	r2, [r2, r1]
 801d526:	2100      	movs	r1, #0
 801d528:	5e5b      	ldrsh	r3, [r3, r1]
 801d52a:	429a      	cmp	r2, r3
 801d52c:	dd04      	ble.n	801d538 <SX1276IsChannelFree+0x88>
        {
            status = false;
 801d52e:	2317      	movs	r3, #23
 801d530:	18fb      	adds	r3, r7, r3
 801d532:	2200      	movs	r2, #0
 801d534:	701a      	strb	r2, [r3, #0]
            break;
 801d536:	e007      	b.n	801d548 <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801d538:	693b      	ldr	r3, [r7, #16]
 801d53a:	0018      	movs	r0, r3
 801d53c:	f7ff fb7b 	bl	801cc36 <TimerGetElapsedTime>
 801d540:	0002      	movs	r2, r0
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	4293      	cmp	r3, r2
 801d546:	d8df      	bhi.n	801d508 <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 801d548:	f000 ffde 	bl	801e508 <SX1276SetSleep>
    return status;
 801d54c:	2317      	movs	r3, #23
 801d54e:	18fb      	adds	r3, r7, r3
 801d550:	781b      	ldrb	r3, [r3, #0]
}
 801d552:	0018      	movs	r0, r3
 801d554:	46bd      	mov	sp, r7
 801d556:	b006      	add	sp, #24
 801d558:	bdb0      	pop	{r4, r5, r7, pc}

0801d55a <SX1276Random>:

uint32_t SX1276Random( void )
{
 801d55a:	b580      	push	{r7, lr}
 801d55c:	b082      	sub	sp, #8
 801d55e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 801d560:	2300      	movs	r3, #0
 801d562:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 801d564:	2001      	movs	r0, #1
 801d566:	f001 fb4d 	bl	801ec04 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801d56a:	21ff      	movs	r1, #255	; 0xff
 801d56c:	2011      	movs	r0, #17
 801d56e:	f001 fba1 	bl	801ecb4 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801d572:	2005      	movs	r0, #5
 801d574:	f001 faf6 	bl	801eb64 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 801d578:	1dfb      	adds	r3, r7, #7
 801d57a:	2200      	movs	r2, #0
 801d57c:	701a      	strb	r2, [r3, #0]
 801d57e:	e015      	b.n	801d5ac <SX1276Random+0x52>
    {
        DelayMs( 1 );
 801d580:	2001      	movs	r0, #1
 801d582:	f007 fd55 	bl	8025030 <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 801d586:	202c      	movs	r0, #44	; 0x2c
 801d588:	f001 fba8 	bl	801ecdc <SX1276Read>
 801d58c:	0003      	movs	r3, r0
 801d58e:	001a      	movs	r2, r3
 801d590:	2301      	movs	r3, #1
 801d592:	401a      	ands	r2, r3
 801d594:	1dfb      	adds	r3, r7, #7
 801d596:	781b      	ldrb	r3, [r3, #0]
 801d598:	409a      	lsls	r2, r3
 801d59a:	0013      	movs	r3, r2
 801d59c:	683a      	ldr	r2, [r7, #0]
 801d59e:	4313      	orrs	r3, r2
 801d5a0:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 801d5a2:	1dfb      	adds	r3, r7, #7
 801d5a4:	781a      	ldrb	r2, [r3, #0]
 801d5a6:	1dfb      	adds	r3, r7, #7
 801d5a8:	3201      	adds	r2, #1
 801d5aa:	701a      	strb	r2, [r3, #0]
 801d5ac:	1dfb      	adds	r3, r7, #7
 801d5ae:	781b      	ldrb	r3, [r3, #0]
 801d5b0:	2b1f      	cmp	r3, #31
 801d5b2:	d9e5      	bls.n	801d580 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 801d5b4:	f000 ffa8 	bl	801e508 <SX1276SetSleep>

    return rnd;
 801d5b8:	683b      	ldr	r3, [r7, #0]
}
 801d5ba:	0018      	movs	r0, r3
 801d5bc:	46bd      	mov	sp, r7
 801d5be:	b002      	add	sp, #8
 801d5c0:	bd80      	pop	{r7, pc}
	...

0801d5c4 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 801d5c4:	b590      	push	{r4, r7, lr}
 801d5c6:	b087      	sub	sp, #28
 801d5c8:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 801d5ca:	2317      	movs	r3, #23
 801d5cc:	18fc      	adds	r4, r7, r3
 801d5ce:	2009      	movs	r0, #9
 801d5d0:	f001 fb84 	bl	801ecdc <SX1276Read>
 801d5d4:	0003      	movs	r3, r0
 801d5d6:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801d5d8:	2006      	movs	r0, #6
 801d5da:	f001 fb7f 	bl	801ecdc <SX1276Read>
 801d5de:	0003      	movs	r3, r0
 801d5e0:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801d5e2:	2007      	movs	r0, #7
 801d5e4:	f001 fb7a 	bl	801ecdc <SX1276Read>
 801d5e8:	0003      	movs	r3, r0
 801d5ea:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801d5ec:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801d5ee:	2008      	movs	r0, #8
 801d5f0:	f001 fb74 	bl	801ecdc <SX1276Read>
 801d5f4:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801d5f6:	4323      	orrs	r3, r4
 801d5f8:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 801d5fa:	693b      	ldr	r3, [r7, #16]
 801d5fc:	0a1b      	lsrs	r3, r3, #8
 801d5fe:	60fb      	str	r3, [r7, #12]
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	021b      	lsls	r3, r3, #8
 801d604:	693a      	ldr	r2, [r7, #16]
 801d606:	1ad3      	subs	r3, r2, r3
 801d608:	60bb      	str	r3, [r7, #8]
 801d60a:	68f9      	ldr	r1, [r7, #12]
 801d60c:	000b      	movs	r3, r1
 801d60e:	015b      	lsls	r3, r3, #5
 801d610:	1a5b      	subs	r3, r3, r1
 801d612:	019a      	lsls	r2, r3, #6
 801d614:	1ad2      	subs	r2, r2, r3
 801d616:	00d2      	lsls	r2, r2, #3
 801d618:	1850      	adds	r0, r2, r1
 801d61a:	68b9      	ldr	r1, [r7, #8]
 801d61c:	000b      	movs	r3, r1
 801d61e:	015b      	lsls	r3, r3, #5
 801d620:	1a5b      	subs	r3, r3, r1
 801d622:	019a      	lsls	r2, r3, #6
 801d624:	1ad2      	subs	r2, r2, r3
 801d626:	00d2      	lsls	r2, r2, #3
 801d628:	1853      	adds	r3, r2, r1
 801d62a:	3380      	adds	r3, #128	; 0x80
 801d62c:	0a1b      	lsrs	r3, r3, #8
 801d62e:	18c3      	adds	r3, r0, r3
 801d630:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801d632:	2100      	movs	r1, #0
 801d634:	2009      	movs	r0, #9
 801d636:	f001 fb3d 	bl	801ecb4 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801d63a:	203b      	movs	r0, #59	; 0x3b
 801d63c:	f001 fb4e 	bl	801ecdc <SX1276Read>
 801d640:	0003      	movs	r3, r0
 801d642:	001a      	movs	r2, r3
 801d644:	2340      	movs	r3, #64	; 0x40
 801d646:	4313      	orrs	r3, r2
 801d648:	b2db      	uxtb	r3, r3
 801d64a:	0019      	movs	r1, r3
 801d64c:	203b      	movs	r0, #59	; 0x3b
 801d64e:	f001 fb31 	bl	801ecb4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801d652:	46c0      	nop			; (mov r8, r8)
 801d654:	203b      	movs	r0, #59	; 0x3b
 801d656:	f001 fb41 	bl	801ecdc <SX1276Read>
 801d65a:	0003      	movs	r3, r0
 801d65c:	001a      	movs	r2, r3
 801d65e:	2320      	movs	r3, #32
 801d660:	4013      	ands	r3, r2
 801d662:	2b20      	cmp	r3, #32
 801d664:	d0f6      	beq.n	801d654 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 801d666:	4b14      	ldr	r3, [pc, #80]	; (801d6b8 <RxChainCalibration+0xf4>)
 801d668:	0018      	movs	r0, r3
 801d66a:	f7ff fedb 	bl	801d424 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801d66e:	203b      	movs	r0, #59	; 0x3b
 801d670:	f001 fb34 	bl	801ecdc <SX1276Read>
 801d674:	0003      	movs	r3, r0
 801d676:	001a      	movs	r2, r3
 801d678:	2340      	movs	r3, #64	; 0x40
 801d67a:	4313      	orrs	r3, r2
 801d67c:	b2db      	uxtb	r3, r3
 801d67e:	0019      	movs	r1, r3
 801d680:	203b      	movs	r0, #59	; 0x3b
 801d682:	f001 fb17 	bl	801ecb4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801d686:	46c0      	nop			; (mov r8, r8)
 801d688:	203b      	movs	r0, #59	; 0x3b
 801d68a:	f001 fb27 	bl	801ecdc <SX1276Read>
 801d68e:	0003      	movs	r3, r0
 801d690:	001a      	movs	r2, r3
 801d692:	2320      	movs	r3, #32
 801d694:	4013      	ands	r3, r2
 801d696:	2b20      	cmp	r3, #32
 801d698:	d0f6      	beq.n	801d688 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 801d69a:	2317      	movs	r3, #23
 801d69c:	18fb      	adds	r3, r7, r3
 801d69e:	781b      	ldrb	r3, [r3, #0]
 801d6a0:	0019      	movs	r1, r3
 801d6a2:	2009      	movs	r0, #9
 801d6a4:	f001 fb06 	bl	801ecb4 <SX1276Write>
    SX1276SetChannel( initialFreq );
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	0018      	movs	r0, r3
 801d6ac:	f7ff feba 	bl	801d424 <SX1276SetChannel>
}
 801d6b0:	46c0      	nop			; (mov r8, r8)
 801d6b2:	46bd      	mov	sp, r7
 801d6b4:	b007      	add	sp, #28
 801d6b6:	bd90      	pop	{r4, r7, pc}
 801d6b8:	33bca100 	.word	0x33bca100

0801d6bc <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b084      	sub	sp, #16
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801d6c4:	230f      	movs	r3, #15
 801d6c6:	18fb      	adds	r3, r7, r3
 801d6c8:	2200      	movs	r2, #0
 801d6ca:	701a      	strb	r2, [r3, #0]
 801d6cc:	e021      	b.n	801d712 <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 801d6ce:	230f      	movs	r3, #15
 801d6d0:	18fb      	adds	r3, r7, r3
 801d6d2:	781a      	ldrb	r2, [r3, #0]
 801d6d4:	4b14      	ldr	r3, [pc, #80]	; (801d728 <GetFskBandwidthRegValue+0x6c>)
 801d6d6:	00d2      	lsls	r2, r2, #3
 801d6d8:	58d3      	ldr	r3, [r2, r3]
 801d6da:	687a      	ldr	r2, [r7, #4]
 801d6dc:	429a      	cmp	r2, r3
 801d6de:	d312      	bcc.n	801d706 <GetFskBandwidthRegValue+0x4a>
 801d6e0:	230f      	movs	r3, #15
 801d6e2:	18fb      	adds	r3, r7, r3
 801d6e4:	781b      	ldrb	r3, [r3, #0]
 801d6e6:	1c5a      	adds	r2, r3, #1
 801d6e8:	4b0f      	ldr	r3, [pc, #60]	; (801d728 <GetFskBandwidthRegValue+0x6c>)
 801d6ea:	00d2      	lsls	r2, r2, #3
 801d6ec:	58d3      	ldr	r3, [r2, r3]
 801d6ee:	687a      	ldr	r2, [r7, #4]
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	d208      	bcs.n	801d706 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 801d6f4:	230f      	movs	r3, #15
 801d6f6:	18fb      	adds	r3, r7, r3
 801d6f8:	781b      	ldrb	r3, [r3, #0]
 801d6fa:	4a0b      	ldr	r2, [pc, #44]	; (801d728 <GetFskBandwidthRegValue+0x6c>)
 801d6fc:	00db      	lsls	r3, r3, #3
 801d6fe:	18d3      	adds	r3, r2, r3
 801d700:	3304      	adds	r3, #4
 801d702:	781b      	ldrb	r3, [r3, #0]
 801d704:	e00b      	b.n	801d71e <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801d706:	210f      	movs	r1, #15
 801d708:	187b      	adds	r3, r7, r1
 801d70a:	781a      	ldrb	r2, [r3, #0]
 801d70c:	187b      	adds	r3, r7, r1
 801d70e:	3201      	adds	r2, #1
 801d710:	701a      	strb	r2, [r3, #0]
 801d712:	230f      	movs	r3, #15
 801d714:	18fb      	adds	r3, r7, r3
 801d716:	781b      	ldrb	r3, [r3, #0]
 801d718:	2b14      	cmp	r3, #20
 801d71a:	d9d8      	bls.n	801d6ce <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d71c:	e7fe      	b.n	801d71c <GetFskBandwidthRegValue+0x60>
}
 801d71e:	0018      	movs	r0, r3
 801d720:	46bd      	mov	sp, r7
 801d722:	b004      	add	sp, #16
 801d724:	bd80      	pop	{r7, pc}
 801d726:	46c0      	nop			; (mov r8, r8)
 801d728:	0802947c 	.word	0x0802947c

0801d72c <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 801d72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d72e:	46c6      	mov	lr, r8
 801d730:	b500      	push	{lr}
 801d732:	b084      	sub	sp, #16
 801d734:	af00      	add	r7, sp, #0
 801d736:	60b9      	str	r1, [r7, #8]
 801d738:	607a      	str	r2, [r7, #4]
 801d73a:	0019      	movs	r1, r3
 801d73c:	240f      	movs	r4, #15
 801d73e:	193b      	adds	r3, r7, r4
 801d740:	1c02      	adds	r2, r0, #0
 801d742:	701a      	strb	r2, [r3, #0]
 801d744:	230e      	movs	r3, #14
 801d746:	18fb      	adds	r3, r7, r3
 801d748:	1c0a      	adds	r2, r1, #0
 801d74a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 801d74c:	193b      	adds	r3, r7, r4
 801d74e:	781b      	ldrb	r3, [r3, #0]
 801d750:	0018      	movs	r0, r3
 801d752:	f001 fa57 	bl	801ec04 <SX1276SetModem>

    switch( modem )
 801d756:	193b      	adds	r3, r7, r4
 801d758:	781b      	ldrb	r3, [r3, #0]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d003      	beq.n	801d766 <SX1276SetRxConfig+0x3a>
 801d75e:	2b01      	cmp	r3, #1
 801d760:	d100      	bne.n	801d764 <SX1276SetRxConfig+0x38>
 801d762:	e100      	b.n	801d966 <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801d764:	e274      	b.n	801dc50 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801d766:	4bc0      	ldr	r3, [pc, #768]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d768:	68ba      	ldr	r2, [r7, #8]
 801d76a:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801d76c:	4bbe      	ldr	r3, [pc, #760]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d76e:	687a      	ldr	r2, [r7, #4]
 801d770:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 801d772:	4bbd      	ldr	r3, [pc, #756]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d776:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801d778:	4bbb      	ldr	r3, [pc, #748]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d77a:	222c      	movs	r2, #44	; 0x2c
 801d77c:	2108      	movs	r1, #8
 801d77e:	468c      	mov	ip, r1
 801d780:	44bc      	add	ip, r7
 801d782:	4462      	add	r2, ip
 801d784:	2122      	movs	r1, #34	; 0x22
 801d786:	7812      	ldrb	r2, [r2, #0]
 801d788:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 801d78a:	4bb7      	ldr	r3, [pc, #732]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d78c:	2130      	movs	r1, #48	; 0x30
 801d78e:	2008      	movs	r0, #8
 801d790:	183a      	adds	r2, r7, r0
 801d792:	1852      	adds	r2, r2, r1
 801d794:	2123      	movs	r1, #35	; 0x23
 801d796:	7812      	ldrb	r2, [r2, #0]
 801d798:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801d79a:	4bb3      	ldr	r3, [pc, #716]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d79c:	2134      	movs	r1, #52	; 0x34
 801d79e:	183a      	adds	r2, r7, r0
 801d7a0:	1852      	adds	r2, r2, r1
 801d7a2:	2124      	movs	r1, #36	; 0x24
 801d7a4:	7812      	ldrb	r2, [r2, #0]
 801d7a6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801d7a8:	4baf      	ldr	r3, [pc, #700]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d7aa:	2220      	movs	r2, #32
 801d7ac:	2120      	movs	r1, #32
 801d7ae:	468c      	mov	ip, r1
 801d7b0:	2108      	movs	r1, #8
 801d7b2:	4688      	mov	r8, r1
 801d7b4:	44b8      	add	r8, r7
 801d7b6:	44c4      	add	ip, r8
 801d7b8:	4462      	add	r2, ip
 801d7ba:	2125      	movs	r1, #37	; 0x25
 801d7bc:	7812      	ldrb	r2, [r2, #0]
 801d7be:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 801d7c0:	4ba9      	ldr	r3, [pc, #676]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d7c2:	2224      	movs	r2, #36	; 0x24
 801d7c4:	2120      	movs	r1, #32
 801d7c6:	468c      	mov	ip, r1
 801d7c8:	2108      	movs	r1, #8
 801d7ca:	4688      	mov	r8, r1
 801d7cc:	44b8      	add	r8, r7
 801d7ce:	44c4      	add	ip, r8
 801d7d0:	4462      	add	r2, ip
 801d7d2:	2126      	movs	r1, #38	; 0x26
 801d7d4:	7812      	ldrb	r2, [r2, #0]
 801d7d6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801d7d8:	4ba3      	ldr	r3, [pc, #652]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d7da:	2624      	movs	r6, #36	; 0x24
 801d7dc:	183a      	adds	r2, r7, r0
 801d7de:	1992      	adds	r2, r2, r6
 801d7e0:	8812      	ldrh	r2, [r2, #0]
 801d7e2:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 801d7e4:	2328      	movs	r3, #40	; 0x28
 801d7e6:	2208      	movs	r2, #8
 801d7e8:	4694      	mov	ip, r2
 801d7ea:	44bc      	add	ip, r7
 801d7ec:	4463      	add	r3, ip
 801d7ee:	881b      	ldrh	r3, [r3, #0]
 801d7f0:	0018      	movs	r0, r3
 801d7f2:	f7e5 f813 	bl	800281c <__aeabi_i2d>
 801d7f6:	0004      	movs	r4, r0
 801d7f8:	000d      	movs	r5, r1
 801d7fa:	6878      	ldr	r0, [r7, #4]
 801d7fc:	f7e5 f848 	bl	8002890 <__aeabi_ui2d>
 801d800:	0002      	movs	r2, r0
 801d802:	000b      	movs	r3, r1
 801d804:	2000      	movs	r0, #0
 801d806:	4999      	ldr	r1, [pc, #612]	; (801da6c <SX1276SetRxConfig+0x340>)
 801d808:	f7e3 fe0e 	bl	8001428 <__aeabi_ddiv>
 801d80c:	0002      	movs	r2, r0
 801d80e:	000b      	movs	r3, r1
 801d810:	0010      	movs	r0, r2
 801d812:	0019      	movs	r1, r3
 801d814:	2200      	movs	r2, #0
 801d816:	4b96      	ldr	r3, [pc, #600]	; (801da70 <SX1276SetRxConfig+0x344>)
 801d818:	f7e4 fa10 	bl	8001c3c <__aeabi_dmul>
 801d81c:	0002      	movs	r2, r0
 801d81e:	000b      	movs	r3, r1
 801d820:	0020      	movs	r0, r4
 801d822:	0029      	movs	r1, r5
 801d824:	f7e4 fa0a 	bl	8001c3c <__aeabi_dmul>
 801d828:	0003      	movs	r3, r0
 801d82a:	000c      	movs	r4, r1
 801d82c:	0018      	movs	r0, r3
 801d82e:	0021      	movs	r1, r4
 801d830:	2200      	movs	r2, #0
 801d832:	4b90      	ldr	r3, [pc, #576]	; (801da74 <SX1276SetRxConfig+0x348>)
 801d834:	f7e4 fa02 	bl	8001c3c <__aeabi_dmul>
 801d838:	0003      	movs	r3, r0
 801d83a:	000c      	movs	r4, r1
 801d83c:	0018      	movs	r0, r3
 801d83e:	0021      	movs	r1, r4
 801d840:	f7e2 fec6 	bl	80005d0 <__aeabi_d2uiz>
 801d844:	0002      	movs	r2, r0
 801d846:	4b88      	ldr	r3, [pc, #544]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d848:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801d84a:	6878      	ldr	r0, [r7, #4]
 801d84c:	f7e5 f820 	bl	8002890 <__aeabi_ui2d>
 801d850:	0003      	movs	r3, r0
 801d852:	000c      	movs	r4, r1
 801d854:	001a      	movs	r2, r3
 801d856:	0023      	movs	r3, r4
 801d858:	2000      	movs	r0, #0
 801d85a:	4987      	ldr	r1, [pc, #540]	; (801da78 <SX1276SetRxConfig+0x34c>)
 801d85c:	f7e3 fde4 	bl	8001428 <__aeabi_ddiv>
 801d860:	0003      	movs	r3, r0
 801d862:	000c      	movs	r4, r1
 801d864:	0018      	movs	r0, r3
 801d866:	0021      	movs	r1, r4
 801d868:	f7e2 feb2 	bl	80005d0 <__aeabi_d2uiz>
 801d86c:	0003      	movs	r3, r0
 801d86e:	b29b      	uxth	r3, r3
 801d870:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	0a1b      	lsrs	r3, r3, #8
 801d876:	b2db      	uxtb	r3, r3
 801d878:	0019      	movs	r1, r3
 801d87a:	2002      	movs	r0, #2
 801d87c:	f001 fa1a 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	b2db      	uxtb	r3, r3
 801d884:	0019      	movs	r1, r3
 801d886:	2003      	movs	r0, #3
 801d888:	f001 fa14 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 801d88c:	68bb      	ldr	r3, [r7, #8]
 801d88e:	0018      	movs	r0, r3
 801d890:	f7ff ff14 	bl	801d6bc <GetFskBandwidthRegValue>
 801d894:	0003      	movs	r3, r0
 801d896:	0019      	movs	r1, r3
 801d898:	2012      	movs	r0, #18
 801d89a:	f001 fa0b 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 801d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8a0:	0018      	movs	r0, r3
 801d8a2:	f7ff ff0b 	bl	801d6bc <GetFskBandwidthRegValue>
 801d8a6:	0003      	movs	r3, r0
 801d8a8:	0019      	movs	r1, r3
 801d8aa:	2013      	movs	r0, #19
 801d8ac:	f001 fa02 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801d8b0:	2008      	movs	r0, #8
 801d8b2:	0004      	movs	r4, r0
 801d8b4:	183b      	adds	r3, r7, r0
 801d8b6:	199b      	adds	r3, r3, r6
 801d8b8:	881b      	ldrh	r3, [r3, #0]
 801d8ba:	0a1b      	lsrs	r3, r3, #8
 801d8bc:	b29b      	uxth	r3, r3
 801d8be:	b2db      	uxtb	r3, r3
 801d8c0:	0019      	movs	r1, r3
 801d8c2:	2025      	movs	r0, #37	; 0x25
 801d8c4:	f001 f9f6 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801d8c8:	193b      	adds	r3, r7, r4
 801d8ca:	199b      	adds	r3, r3, r6
 801d8cc:	881b      	ldrh	r3, [r3, #0]
 801d8ce:	b2db      	uxtb	r3, r3
 801d8d0:	0019      	movs	r1, r3
 801d8d2:	2026      	movs	r0, #38	; 0x26
 801d8d4:	f001 f9ee 	bl	801ecb4 <SX1276Write>
            if( fixLen == 1 )
 801d8d8:	222c      	movs	r2, #44	; 0x2c
 801d8da:	193b      	adds	r3, r7, r4
 801d8dc:	189b      	adds	r3, r3, r2
 801d8de:	781b      	ldrb	r3, [r3, #0]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d00a      	beq.n	801d8fa <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 801d8e4:	2330      	movs	r3, #48	; 0x30
 801d8e6:	2208      	movs	r2, #8
 801d8e8:	4694      	mov	ip, r2
 801d8ea:	44bc      	add	ip, r7
 801d8ec:	4463      	add	r3, ip
 801d8ee:	781b      	ldrb	r3, [r3, #0]
 801d8f0:	0019      	movs	r1, r3
 801d8f2:	2032      	movs	r0, #50	; 0x32
 801d8f4:	f001 f9de 	bl	801ecb4 <SX1276Write>
 801d8f8:	e003      	b.n	801d902 <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 801d8fa:	21ff      	movs	r1, #255	; 0xff
 801d8fc:	2032      	movs	r0, #50	; 0x32
 801d8fe:	f001 f9d9 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801d902:	2030      	movs	r0, #48	; 0x30
 801d904:	f001 f9ea 	bl	801ecdc <SX1276Read>
 801d908:	0003      	movs	r3, r0
 801d90a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801d90c:	226f      	movs	r2, #111	; 0x6f
 801d90e:	4013      	ands	r3, r2
 801d910:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801d912:	232c      	movs	r3, #44	; 0x2c
 801d914:	2108      	movs	r1, #8
 801d916:	468c      	mov	ip, r1
 801d918:	44bc      	add	ip, r7
 801d91a:	4463      	add	r3, ip
 801d91c:	781b      	ldrb	r3, [r3, #0]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d001      	beq.n	801d926 <SX1276SetRxConfig+0x1fa>
 801d922:	2300      	movs	r3, #0
 801d924:	e001      	b.n	801d92a <SX1276SetRxConfig+0x1fe>
 801d926:	2380      	movs	r3, #128	; 0x80
 801d928:	425b      	negs	r3, r3
 801d92a:	4313      	orrs	r3, r2
 801d92c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801d92e:	2334      	movs	r3, #52	; 0x34
 801d930:	2108      	movs	r1, #8
 801d932:	468c      	mov	ip, r1
 801d934:	44bc      	add	ip, r7
 801d936:	4463      	add	r3, ip
 801d938:	781b      	ldrb	r3, [r3, #0]
 801d93a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801d93c:	b25b      	sxtb	r3, r3
 801d93e:	4313      	orrs	r3, r2
 801d940:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801d942:	b2db      	uxtb	r3, r3
 801d944:	0019      	movs	r1, r3
 801d946:	2030      	movs	r0, #48	; 0x30
 801d948:	f001 f9b4 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801d94c:	2031      	movs	r0, #49	; 0x31
 801d94e:	f001 f9c5 	bl	801ecdc <SX1276Read>
 801d952:	0003      	movs	r3, r0
 801d954:	001a      	movs	r2, r3
 801d956:	2340      	movs	r3, #64	; 0x40
 801d958:	4313      	orrs	r3, r2
 801d95a:	b2db      	uxtb	r3, r3
 801d95c:	0019      	movs	r1, r3
 801d95e:	2031      	movs	r0, #49	; 0x31
 801d960:	f001 f9a8 	bl	801ecb4 <SX1276Write>
        break;
 801d964:	e174      	b.n	801dc50 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 801d966:	68bb      	ldr	r3, [r7, #8]
 801d968:	2b02      	cmp	r3, #2
 801d96a:	d900      	bls.n	801d96e <SX1276SetRxConfig+0x242>
                while( 1 );
 801d96c:	e7fe      	b.n	801d96c <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 801d96e:	68bb      	ldr	r3, [r7, #8]
 801d970:	3307      	adds	r3, #7
 801d972:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801d974:	4b3c      	ldr	r3, [pc, #240]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d976:	68ba      	ldr	r2, [r7, #8]
 801d978:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801d97a:	4b3b      	ldr	r3, [pc, #236]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d97c:	687a      	ldr	r2, [r7, #4]
 801d97e:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801d980:	4b39      	ldr	r3, [pc, #228]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d982:	220e      	movs	r2, #14
 801d984:	18ba      	adds	r2, r7, r2
 801d986:	214d      	movs	r1, #77	; 0x4d
 801d988:	7812      	ldrb	r2, [r2, #0]
 801d98a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801d98c:	4b36      	ldr	r3, [pc, #216]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d98e:	2224      	movs	r2, #36	; 0x24
 801d990:	2108      	movs	r1, #8
 801d992:	468c      	mov	ip, r1
 801d994:	44bc      	add	ip, r7
 801d996:	4462      	add	r2, ip
 801d998:	214e      	movs	r1, #78	; 0x4e
 801d99a:	8812      	ldrh	r2, [r2, #0]
 801d99c:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801d99e:	4b32      	ldr	r3, [pc, #200]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d9a0:	222c      	movs	r2, #44	; 0x2c
 801d9a2:	2108      	movs	r1, #8
 801d9a4:	468c      	mov	ip, r1
 801d9a6:	44bc      	add	ip, r7
 801d9a8:	4462      	add	r2, ip
 801d9aa:	2150      	movs	r1, #80	; 0x50
 801d9ac:	7812      	ldrb	r2, [r2, #0]
 801d9ae:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 801d9b0:	4b2d      	ldr	r3, [pc, #180]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d9b2:	2230      	movs	r2, #48	; 0x30
 801d9b4:	2108      	movs	r1, #8
 801d9b6:	468c      	mov	ip, r1
 801d9b8:	44bc      	add	ip, r7
 801d9ba:	4462      	add	r2, ip
 801d9bc:	2151      	movs	r1, #81	; 0x51
 801d9be:	7812      	ldrb	r2, [r2, #0]
 801d9c0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801d9c2:	4b29      	ldr	r3, [pc, #164]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d9c4:	2234      	movs	r2, #52	; 0x34
 801d9c6:	2108      	movs	r1, #8
 801d9c8:	468c      	mov	ip, r1
 801d9ca:	44bc      	add	ip, r7
 801d9cc:	4462      	add	r2, ip
 801d9ce:	2152      	movs	r1, #82	; 0x52
 801d9d0:	7812      	ldrb	r2, [r2, #0]
 801d9d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801d9d4:	4b24      	ldr	r3, [pc, #144]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d9d6:	2238      	movs	r2, #56	; 0x38
 801d9d8:	2108      	movs	r1, #8
 801d9da:	468c      	mov	ip, r1
 801d9dc:	44bc      	add	ip, r7
 801d9de:	4462      	add	r2, ip
 801d9e0:	2153      	movs	r1, #83	; 0x53
 801d9e2:	7812      	ldrb	r2, [r2, #0]
 801d9e4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801d9e6:	4b20      	ldr	r3, [pc, #128]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d9e8:	223c      	movs	r2, #60	; 0x3c
 801d9ea:	2108      	movs	r1, #8
 801d9ec:	468c      	mov	ip, r1
 801d9ee:	44bc      	add	ip, r7
 801d9f0:	4462      	add	r2, ip
 801d9f2:	2154      	movs	r1, #84	; 0x54
 801d9f4:	7812      	ldrb	r2, [r2, #0]
 801d9f6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801d9f8:	4b1b      	ldr	r3, [pc, #108]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801d9fa:	2220      	movs	r2, #32
 801d9fc:	2120      	movs	r1, #32
 801d9fe:	468c      	mov	ip, r1
 801da00:	2108      	movs	r1, #8
 801da02:	4688      	mov	r8, r1
 801da04:	44b8      	add	r8, r7
 801da06:	44c4      	add	ip, r8
 801da08:	4462      	add	r2, ip
 801da0a:	2155      	movs	r1, #85	; 0x55
 801da0c:	7812      	ldrb	r2, [r2, #0]
 801da0e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 801da10:	4b15      	ldr	r3, [pc, #84]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801da12:	2224      	movs	r2, #36	; 0x24
 801da14:	2120      	movs	r1, #32
 801da16:	468c      	mov	ip, r1
 801da18:	2108      	movs	r1, #8
 801da1a:	4688      	mov	r8, r1
 801da1c:	44b8      	add	r8, r7
 801da1e:	44c4      	add	ip, r8
 801da20:	4462      	add	r2, ip
 801da22:	2156      	movs	r1, #86	; 0x56
 801da24:	7812      	ldrb	r2, [r2, #0]
 801da26:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	2b0c      	cmp	r3, #12
 801da2c:	d902      	bls.n	801da34 <SX1276SetRxConfig+0x308>
                datarate = 12;
 801da2e:	230c      	movs	r3, #12
 801da30:	607b      	str	r3, [r7, #4]
 801da32:	e004      	b.n	801da3e <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	2b05      	cmp	r3, #5
 801da38:	d801      	bhi.n	801da3e <SX1276SetRxConfig+0x312>
                datarate = 6;
 801da3a:	2306      	movs	r3, #6
 801da3c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801da3e:	68bb      	ldr	r3, [r7, #8]
 801da40:	2b07      	cmp	r3, #7
 801da42:	d105      	bne.n	801da50 <SX1276SetRxConfig+0x324>
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	2b0b      	cmp	r3, #11
 801da48:	d008      	beq.n	801da5c <SX1276SetRxConfig+0x330>
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	2b0c      	cmp	r3, #12
 801da4e:	d005      	beq.n	801da5c <SX1276SetRxConfig+0x330>
 801da50:	68bb      	ldr	r3, [r7, #8]
 801da52:	2b08      	cmp	r3, #8
 801da54:	d112      	bne.n	801da7c <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	2b0c      	cmp	r3, #12
 801da5a:	d10f      	bne.n	801da7c <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801da5c:	4b02      	ldr	r3, [pc, #8]	; (801da68 <SX1276SetRxConfig+0x33c>)
 801da5e:	224c      	movs	r2, #76	; 0x4c
 801da60:	2101      	movs	r1, #1
 801da62:	5499      	strb	r1, [r3, r2]
 801da64:	e00e      	b.n	801da84 <SX1276SetRxConfig+0x358>
 801da66:	46c0      	nop			; (mov r8, r8)
 801da68:	200022bc 	.word	0x200022bc
 801da6c:	3ff00000 	.word	0x3ff00000
 801da70:	40200000 	.word	0x40200000
 801da74:	408f4000 	.word	0x408f4000
 801da78:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801da7c:	4b77      	ldr	r3, [pc, #476]	; (801dc5c <SX1276SetRxConfig+0x530>)
 801da7e:	224c      	movs	r2, #76	; 0x4c
 801da80:	2100      	movs	r1, #0
 801da82:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801da84:	201d      	movs	r0, #29
 801da86:	f001 f929 	bl	801ecdc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801da8a:	68bb      	ldr	r3, [r7, #8]
 801da8c:	b2db      	uxtb	r3, r3
 801da8e:	011b      	lsls	r3, r3, #4
 801da90:	b2da      	uxtb	r2, r3
 801da92:	230e      	movs	r3, #14
 801da94:	18fb      	adds	r3, r7, r3
 801da96:	781b      	ldrb	r3, [r3, #0]
 801da98:	18db      	adds	r3, r3, r3
 801da9a:	b2db      	uxtb	r3, r3
 801da9c:	4313      	orrs	r3, r2
 801da9e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801daa0:	242c      	movs	r4, #44	; 0x2c
 801daa2:	2608      	movs	r6, #8
 801daa4:	19bb      	adds	r3, r7, r6
 801daa6:	191b      	adds	r3, r3, r4
 801daa8:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801daaa:	4313      	orrs	r3, r2
 801daac:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801daae:	0019      	movs	r1, r3
 801dab0:	201d      	movs	r0, #29
 801dab2:	f001 f8ff 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801dab6:	201e      	movs	r0, #30
 801dab8:	f001 f910 	bl	801ecdc <SX1276Read>
 801dabc:	0003      	movs	r3, r0
 801dabe:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 801dac0:	2308      	movs	r3, #8
 801dac2:	4013      	ands	r3, r2
 801dac4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	b2db      	uxtb	r3, r3
 801daca:	011b      	lsls	r3, r3, #4
 801dacc:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 801dace:	4313      	orrs	r3, r2
 801dad0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801dad2:	2334      	movs	r3, #52	; 0x34
 801dad4:	2108      	movs	r1, #8
 801dad6:	468c      	mov	ip, r1
 801dad8:	44bc      	add	ip, r7
 801dada:	4463      	add	r3, ip
 801dadc:	781b      	ldrb	r3, [r3, #0]
 801dade:	009b      	lsls	r3, r3, #2
 801dae0:	b2db      	uxtb	r3, r3
 801dae2:	4313      	orrs	r3, r2
 801dae4:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 801dae6:	2528      	movs	r5, #40	; 0x28
 801dae8:	19bb      	adds	r3, r7, r6
 801daea:	195b      	adds	r3, r3, r5
 801daec:	881b      	ldrh	r3, [r3, #0]
 801daee:	0a1b      	lsrs	r3, r3, #8
 801daf0:	b29b      	uxth	r3, r3
 801daf2:	b2db      	uxtb	r3, r3
 801daf4:	2103      	movs	r1, #3
 801daf6:	400b      	ands	r3, r1
 801daf8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801dafa:	4313      	orrs	r3, r2
 801dafc:	b2db      	uxtb	r3, r3
 801dafe:	0019      	movs	r1, r3
 801db00:	201e      	movs	r0, #30
 801db02:	f001 f8d7 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801db06:	2026      	movs	r0, #38	; 0x26
 801db08:	f001 f8e8 	bl	801ecdc <SX1276Read>
 801db0c:	0003      	movs	r3, r0
 801db0e:	b25b      	sxtb	r3, r3
 801db10:	2208      	movs	r2, #8
 801db12:	4393      	bics	r3, r2
 801db14:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801db16:	4b51      	ldr	r3, [pc, #324]	; (801dc5c <SX1276SetRxConfig+0x530>)
 801db18:	214c      	movs	r1, #76	; 0x4c
 801db1a:	5c5b      	ldrb	r3, [r3, r1]
 801db1c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801db1e:	b25b      	sxtb	r3, r3
 801db20:	4313      	orrs	r3, r2
 801db22:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801db24:	b2db      	uxtb	r3, r3
 801db26:	0019      	movs	r1, r3
 801db28:	2026      	movs	r0, #38	; 0x26
 801db2a:	f001 f8c3 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801db2e:	19bb      	adds	r3, r7, r6
 801db30:	195b      	adds	r3, r3, r5
 801db32:	881b      	ldrh	r3, [r3, #0]
 801db34:	b2db      	uxtb	r3, r3
 801db36:	0019      	movs	r1, r3
 801db38:	201f      	movs	r0, #31
 801db3a:	f001 f8bb 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801db3e:	2524      	movs	r5, #36	; 0x24
 801db40:	19bb      	adds	r3, r7, r6
 801db42:	195b      	adds	r3, r3, r5
 801db44:	881b      	ldrh	r3, [r3, #0]
 801db46:	0a1b      	lsrs	r3, r3, #8
 801db48:	b29b      	uxth	r3, r3
 801db4a:	b2db      	uxtb	r3, r3
 801db4c:	0019      	movs	r1, r3
 801db4e:	2020      	movs	r0, #32
 801db50:	f001 f8b0 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801db54:	19bb      	adds	r3, r7, r6
 801db56:	195b      	adds	r3, r3, r5
 801db58:	881b      	ldrh	r3, [r3, #0]
 801db5a:	b2db      	uxtb	r3, r3
 801db5c:	0019      	movs	r1, r3
 801db5e:	2021      	movs	r0, #33	; 0x21
 801db60:	f001 f8a8 	bl	801ecb4 <SX1276Write>
            if( fixLen == 1 )
 801db64:	19bb      	adds	r3, r7, r6
 801db66:	191b      	adds	r3, r3, r4
 801db68:	781b      	ldrb	r3, [r3, #0]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d009      	beq.n	801db82 <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 801db6e:	2330      	movs	r3, #48	; 0x30
 801db70:	2208      	movs	r2, #8
 801db72:	4694      	mov	ip, r2
 801db74:	44bc      	add	ip, r7
 801db76:	4463      	add	r3, ip
 801db78:	781b      	ldrb	r3, [r3, #0]
 801db7a:	0019      	movs	r1, r3
 801db7c:	2022      	movs	r0, #34	; 0x22
 801db7e:	f001 f899 	bl	801ecb4 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801db82:	4b36      	ldr	r3, [pc, #216]	; (801dc5c <SX1276SetRxConfig+0x530>)
 801db84:	2253      	movs	r2, #83	; 0x53
 801db86:	5c9b      	ldrb	r3, [r3, r2]
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d013      	beq.n	801dbb4 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801db8c:	2044      	movs	r0, #68	; 0x44
 801db8e:	f001 f8a5 	bl	801ecdc <SX1276Read>
 801db92:	0003      	movs	r3, r0
 801db94:	001a      	movs	r2, r3
 801db96:	2380      	movs	r3, #128	; 0x80
 801db98:	425b      	negs	r3, r3
 801db9a:	4313      	orrs	r3, r2
 801db9c:	b2db      	uxtb	r3, r3
 801db9e:	0019      	movs	r1, r3
 801dba0:	2044      	movs	r0, #68	; 0x44
 801dba2:	f001 f887 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801dba6:	4b2d      	ldr	r3, [pc, #180]	; (801dc5c <SX1276SetRxConfig+0x530>)
 801dba8:	2254      	movs	r2, #84	; 0x54
 801dbaa:	5c9b      	ldrb	r3, [r3, r2]
 801dbac:	0019      	movs	r1, r3
 801dbae:	2024      	movs	r0, #36	; 0x24
 801dbb0:	f001 f880 	bl	801ecb4 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 801dbb4:	68bb      	ldr	r3, [r7, #8]
 801dbb6:	2b09      	cmp	r3, #9
 801dbb8:	d10d      	bne.n	801dbd6 <SX1276SetRxConfig+0x4aa>
 801dbba:	4b28      	ldr	r3, [pc, #160]	; (801dc5c <SX1276SetRxConfig+0x530>)
 801dbbc:	689b      	ldr	r3, [r3, #8]
 801dbbe:	4a28      	ldr	r2, [pc, #160]	; (801dc60 <SX1276SetRxConfig+0x534>)
 801dbc0:	4293      	cmp	r3, r2
 801dbc2:	d908      	bls.n	801dbd6 <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801dbc4:	2102      	movs	r1, #2
 801dbc6:	2036      	movs	r0, #54	; 0x36
 801dbc8:	f001 f874 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 801dbcc:	2164      	movs	r1, #100	; 0x64
 801dbce:	203a      	movs	r0, #58	; 0x3a
 801dbd0:	f001 f870 	bl	801ecb4 <SX1276Write>
 801dbd4:	e00f      	b.n	801dbf6 <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 801dbd6:	68bb      	ldr	r3, [r7, #8]
 801dbd8:	2b09      	cmp	r3, #9
 801dbda:	d108      	bne.n	801dbee <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801dbdc:	2102      	movs	r1, #2
 801dbde:	2036      	movs	r0, #54	; 0x36
 801dbe0:	f001 f868 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 801dbe4:	217f      	movs	r1, #127	; 0x7f
 801dbe6:	203a      	movs	r0, #58	; 0x3a
 801dbe8:	f001 f864 	bl	801ecb4 <SX1276Write>
 801dbec:	e003      	b.n	801dbf6 <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 801dbee:	2103      	movs	r1, #3
 801dbf0:	2036      	movs	r0, #54	; 0x36
 801dbf2:	f001 f85f 	bl	801ecb4 <SX1276Write>
            if( datarate == 6 )
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	2b06      	cmp	r3, #6
 801dbfa:	d114      	bne.n	801dc26 <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801dbfc:	2031      	movs	r0, #49	; 0x31
 801dbfe:	f001 f86d 	bl	801ecdc <SX1276Read>
 801dc02:	0003      	movs	r3, r0
 801dc04:	b25b      	sxtb	r3, r3
 801dc06:	2207      	movs	r2, #7
 801dc08:	4393      	bics	r3, r2
 801dc0a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801dc0c:	2205      	movs	r2, #5
 801dc0e:	4313      	orrs	r3, r2
 801dc10:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801dc12:	b2db      	uxtb	r3, r3
 801dc14:	0019      	movs	r1, r3
 801dc16:	2031      	movs	r0, #49	; 0x31
 801dc18:	f001 f84c 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801dc1c:	210c      	movs	r1, #12
 801dc1e:	2037      	movs	r0, #55	; 0x37
 801dc20:	f001 f848 	bl	801ecb4 <SX1276Write>
        break;
 801dc24:	e013      	b.n	801dc4e <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801dc26:	2031      	movs	r0, #49	; 0x31
 801dc28:	f001 f858 	bl	801ecdc <SX1276Read>
 801dc2c:	0003      	movs	r3, r0
 801dc2e:	b25b      	sxtb	r3, r3
 801dc30:	2207      	movs	r2, #7
 801dc32:	4393      	bics	r3, r2
 801dc34:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801dc36:	2203      	movs	r2, #3
 801dc38:	4313      	orrs	r3, r2
 801dc3a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801dc3c:	b2db      	uxtb	r3, r3
 801dc3e:	0019      	movs	r1, r3
 801dc40:	2031      	movs	r0, #49	; 0x31
 801dc42:	f001 f837 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801dc46:	210a      	movs	r1, #10
 801dc48:	2037      	movs	r0, #55	; 0x37
 801dc4a:	f001 f833 	bl	801ecb4 <SX1276Write>
        break;
 801dc4e:	46c0      	nop			; (mov r8, r8)
}
 801dc50:	46c0      	nop			; (mov r8, r8)
 801dc52:	46bd      	mov	sp, r7
 801dc54:	b004      	add	sp, #16
 801dc56:	bc04      	pop	{r2}
 801dc58:	4690      	mov	r8, r2
 801dc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc5c:	200022bc 	.word	0x200022bc
 801dc60:	1f4add40 	.word	0x1f4add40

0801dc64 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801dc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc66:	b085      	sub	sp, #20
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	60ba      	str	r2, [r7, #8]
 801dc6c:	607b      	str	r3, [r7, #4]
 801dc6e:	240f      	movs	r4, #15
 801dc70:	193b      	adds	r3, r7, r4
 801dc72:	1c02      	adds	r2, r0, #0
 801dc74:	701a      	strb	r2, [r3, #0]
 801dc76:	250e      	movs	r5, #14
 801dc78:	197b      	adds	r3, r7, r5
 801dc7a:	1c0a      	adds	r2, r1, #0
 801dc7c:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 801dc7e:	193b      	adds	r3, r7, r4
 801dc80:	781b      	ldrb	r3, [r3, #0]
 801dc82:	0018      	movs	r0, r3
 801dc84:	f000 ffbe 	bl	801ec04 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 801dc88:	4be5      	ldr	r3, [pc, #916]	; (801e020 <SX1276SetTxConfig+0x3bc>)
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	68db      	ldr	r3, [r3, #12]
 801dc8e:	197a      	adds	r2, r7, r5
 801dc90:	7812      	ldrb	r2, [r2, #0]
 801dc92:	b252      	sxtb	r2, r2
 801dc94:	0010      	movs	r0, r2
 801dc96:	4798      	blx	r3

    switch( modem )
 801dc98:	193b      	adds	r3, r7, r4
 801dc9a:	781b      	ldrb	r3, [r3, #0]
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d003      	beq.n	801dca8 <SX1276SetTxConfig+0x44>
 801dca0:	2b01      	cmp	r3, #1
 801dca2:	d100      	bne.n	801dca6 <SX1276SetTxConfig+0x42>
 801dca4:	e0b1      	b.n	801de0a <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801dca6:	e1d8      	b.n	801e05a <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 801dca8:	4bde      	ldr	r3, [pc, #888]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcaa:	220e      	movs	r2, #14
 801dcac:	18ba      	adds	r2, r7, r2
 801dcae:	7812      	ldrb	r2, [r2, #0]
 801dcb0:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 801dcb2:	4bdc      	ldr	r3, [pc, #880]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcb4:	68ba      	ldr	r2, [r7, #8]
 801dcb6:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801dcb8:	4bda      	ldr	r3, [pc, #872]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcba:	687a      	ldr	r2, [r7, #4]
 801dcbc:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801dcbe:	4bd9      	ldr	r3, [pc, #868]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dcc2:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801dcc4:	4bd7      	ldr	r3, [pc, #860]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcc6:	2528      	movs	r5, #40	; 0x28
 801dcc8:	2408      	movs	r4, #8
 801dcca:	193a      	adds	r2, r7, r4
 801dccc:	1952      	adds	r2, r2, r5
 801dcce:	8812      	ldrh	r2, [r2, #0]
 801dcd0:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801dcd2:	4bd4      	ldr	r3, [pc, #848]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcd4:	262c      	movs	r6, #44	; 0x2c
 801dcd6:	193a      	adds	r2, r7, r4
 801dcd8:	1992      	adds	r2, r2, r6
 801dcda:	2122      	movs	r1, #34	; 0x22
 801dcdc:	7812      	ldrb	r2, [r2, #0]
 801dcde:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801dce0:	4bd0      	ldr	r3, [pc, #832]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dce2:	2230      	movs	r2, #48	; 0x30
 801dce4:	2108      	movs	r1, #8
 801dce6:	468c      	mov	ip, r1
 801dce8:	44bc      	add	ip, r7
 801dcea:	4462      	add	r2, ip
 801dcec:	2124      	movs	r1, #36	; 0x24
 801dcee:	7812      	ldrb	r2, [r2, #0]
 801dcf0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801dcf2:	4bcc      	ldr	r3, [pc, #816]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dcf4:	223c      	movs	r2, #60	; 0x3c
 801dcf6:	2108      	movs	r1, #8
 801dcf8:	468c      	mov	ip, r1
 801dcfa:	44bc      	add	ip, r7
 801dcfc:	4462      	add	r2, ip
 801dcfe:	2125      	movs	r1, #37	; 0x25
 801dd00:	7812      	ldrb	r2, [r2, #0]
 801dd02:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 801dd04:	4bc7      	ldr	r3, [pc, #796]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dd06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dd08:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801dd0a:	68b8      	ldr	r0, [r7, #8]
 801dd0c:	f7e4 fdc0 	bl	8002890 <__aeabi_ui2d>
 801dd10:	2200      	movs	r2, #0
 801dd12:	4bc5      	ldr	r3, [pc, #788]	; (801e028 <SX1276SetTxConfig+0x3c4>)
 801dd14:	f7e3 fb88 	bl	8001428 <__aeabi_ddiv>
 801dd18:	0003      	movs	r3, r0
 801dd1a:	000c      	movs	r4, r1
 801dd1c:	0018      	movs	r0, r3
 801dd1e:	0021      	movs	r1, r4
 801dd20:	f7e2 fc56 	bl	80005d0 <__aeabi_d2uiz>
 801dd24:	0003      	movs	r3, r0
 801dd26:	b29b      	uxth	r3, r3
 801dd28:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801dd2a:	68bb      	ldr	r3, [r7, #8]
 801dd2c:	0a1b      	lsrs	r3, r3, #8
 801dd2e:	b2db      	uxtb	r3, r3
 801dd30:	0019      	movs	r1, r3
 801dd32:	2004      	movs	r0, #4
 801dd34:	f000 ffbe 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 801dd38:	68bb      	ldr	r3, [r7, #8]
 801dd3a:	b2db      	uxtb	r3, r3
 801dd3c:	0019      	movs	r1, r3
 801dd3e:	2005      	movs	r0, #5
 801dd40:	f000 ffb8 	bl	801ecb4 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801dd44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd46:	f7e4 fda3 	bl	8002890 <__aeabi_ui2d>
 801dd4a:	0003      	movs	r3, r0
 801dd4c:	000c      	movs	r4, r1
 801dd4e:	001a      	movs	r2, r3
 801dd50:	0023      	movs	r3, r4
 801dd52:	2000      	movs	r0, #0
 801dd54:	49b5      	ldr	r1, [pc, #724]	; (801e02c <SX1276SetTxConfig+0x3c8>)
 801dd56:	f7e3 fb67 	bl	8001428 <__aeabi_ddiv>
 801dd5a:	0003      	movs	r3, r0
 801dd5c:	000c      	movs	r4, r1
 801dd5e:	0018      	movs	r0, r3
 801dd60:	0021      	movs	r1, r4
 801dd62:	f7e2 fc35 	bl	80005d0 <__aeabi_d2uiz>
 801dd66:	0003      	movs	r3, r0
 801dd68:	b29b      	uxth	r3, r3
 801dd6a:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd6e:	0a1b      	lsrs	r3, r3, #8
 801dd70:	b2db      	uxtb	r3, r3
 801dd72:	0019      	movs	r1, r3
 801dd74:	2002      	movs	r0, #2
 801dd76:	f000 ff9d 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd7c:	b2db      	uxtb	r3, r3
 801dd7e:	0019      	movs	r1, r3
 801dd80:	2003      	movs	r0, #3
 801dd82:	f000 ff97 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801dd86:	2408      	movs	r4, #8
 801dd88:	193b      	adds	r3, r7, r4
 801dd8a:	195b      	adds	r3, r3, r5
 801dd8c:	881b      	ldrh	r3, [r3, #0]
 801dd8e:	0a1b      	lsrs	r3, r3, #8
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	b2db      	uxtb	r3, r3
 801dd94:	0019      	movs	r1, r3
 801dd96:	2025      	movs	r0, #37	; 0x25
 801dd98:	f000 ff8c 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801dd9c:	193b      	adds	r3, r7, r4
 801dd9e:	195b      	adds	r3, r3, r5
 801dda0:	881b      	ldrh	r3, [r3, #0]
 801dda2:	b2db      	uxtb	r3, r3
 801dda4:	0019      	movs	r1, r3
 801dda6:	2026      	movs	r0, #38	; 0x26
 801dda8:	f000 ff84 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801ddac:	2030      	movs	r0, #48	; 0x30
 801ddae:	f000 ff95 	bl	801ecdc <SX1276Read>
 801ddb2:	0003      	movs	r3, r0
 801ddb4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801ddb6:	226f      	movs	r2, #111	; 0x6f
 801ddb8:	4013      	ands	r3, r2
 801ddba:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801ddbc:	193b      	adds	r3, r7, r4
 801ddbe:	199b      	adds	r3, r3, r6
 801ddc0:	781b      	ldrb	r3, [r3, #0]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d001      	beq.n	801ddca <SX1276SetTxConfig+0x166>
 801ddc6:	2300      	movs	r3, #0
 801ddc8:	e001      	b.n	801ddce <SX1276SetTxConfig+0x16a>
 801ddca:	2380      	movs	r3, #128	; 0x80
 801ddcc:	425b      	negs	r3, r3
 801ddce:	4313      	orrs	r3, r2
 801ddd0:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801ddd2:	2330      	movs	r3, #48	; 0x30
 801ddd4:	2108      	movs	r1, #8
 801ddd6:	468c      	mov	ip, r1
 801ddd8:	44bc      	add	ip, r7
 801ddda:	4463      	add	r3, ip
 801dddc:	781b      	ldrb	r3, [r3, #0]
 801ddde:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801dde0:	b25b      	sxtb	r3, r3
 801dde2:	4313      	orrs	r3, r2
 801dde4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801dde6:	b2db      	uxtb	r3, r3
 801dde8:	0019      	movs	r1, r3
 801ddea:	2030      	movs	r0, #48	; 0x30
 801ddec:	f000 ff62 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801ddf0:	2031      	movs	r0, #49	; 0x31
 801ddf2:	f000 ff73 	bl	801ecdc <SX1276Read>
 801ddf6:	0003      	movs	r3, r0
 801ddf8:	001a      	movs	r2, r3
 801ddfa:	2340      	movs	r3, #64	; 0x40
 801ddfc:	4313      	orrs	r3, r2
 801ddfe:	b2db      	uxtb	r3, r3
 801de00:	0019      	movs	r1, r3
 801de02:	2031      	movs	r0, #49	; 0x31
 801de04:	f000 ff56 	bl	801ecb4 <SX1276Write>
        break;
 801de08:	e127      	b.n	801e05a <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 801de0a:	4b86      	ldr	r3, [pc, #536]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de0c:	220e      	movs	r2, #14
 801de0e:	18ba      	adds	r2, r7, r2
 801de10:	2140      	movs	r1, #64	; 0x40
 801de12:	7812      	ldrb	r2, [r2, #0]
 801de14:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	2b02      	cmp	r3, #2
 801de1a:	d900      	bls.n	801de1e <SX1276SetTxConfig+0x1ba>
                while( 1 );
 801de1c:	e7fe      	b.n	801de1c <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	3307      	adds	r3, #7
 801de22:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801de24:	4b7f      	ldr	r3, [pc, #508]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de26:	687a      	ldr	r2, [r7, #4]
 801de28:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801de2a:	4b7e      	ldr	r3, [pc, #504]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de2e:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801de30:	4b7c      	ldr	r3, [pc, #496]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de32:	2224      	movs	r2, #36	; 0x24
 801de34:	2108      	movs	r1, #8
 801de36:	468c      	mov	ip, r1
 801de38:	44bc      	add	ip, r7
 801de3a:	4462      	add	r2, ip
 801de3c:	214d      	movs	r1, #77	; 0x4d
 801de3e:	7812      	ldrb	r2, [r2, #0]
 801de40:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801de42:	4b78      	ldr	r3, [pc, #480]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de44:	2228      	movs	r2, #40	; 0x28
 801de46:	2108      	movs	r1, #8
 801de48:	468c      	mov	ip, r1
 801de4a:	44bc      	add	ip, r7
 801de4c:	4462      	add	r2, ip
 801de4e:	214e      	movs	r1, #78	; 0x4e
 801de50:	8812      	ldrh	r2, [r2, #0]
 801de52:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801de54:	4b73      	ldr	r3, [pc, #460]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de56:	222c      	movs	r2, #44	; 0x2c
 801de58:	2108      	movs	r1, #8
 801de5a:	468c      	mov	ip, r1
 801de5c:	44bc      	add	ip, r7
 801de5e:	4462      	add	r2, ip
 801de60:	2150      	movs	r1, #80	; 0x50
 801de62:	7812      	ldrb	r2, [r2, #0]
 801de64:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801de66:	4b6f      	ldr	r3, [pc, #444]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de68:	2234      	movs	r2, #52	; 0x34
 801de6a:	2108      	movs	r1, #8
 801de6c:	468c      	mov	ip, r1
 801de6e:	44bc      	add	ip, r7
 801de70:	4462      	add	r2, ip
 801de72:	2153      	movs	r1, #83	; 0x53
 801de74:	7812      	ldrb	r2, [r2, #0]
 801de76:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801de78:	4b6a      	ldr	r3, [pc, #424]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de7a:	2238      	movs	r2, #56	; 0x38
 801de7c:	2108      	movs	r1, #8
 801de7e:	468c      	mov	ip, r1
 801de80:	44bc      	add	ip, r7
 801de82:	4462      	add	r2, ip
 801de84:	2154      	movs	r1, #84	; 0x54
 801de86:	7812      	ldrb	r2, [r2, #0]
 801de88:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801de8a:	4b66      	ldr	r3, [pc, #408]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de8c:	2230      	movs	r2, #48	; 0x30
 801de8e:	2108      	movs	r1, #8
 801de90:	468c      	mov	ip, r1
 801de92:	44bc      	add	ip, r7
 801de94:	4462      	add	r2, ip
 801de96:	2152      	movs	r1, #82	; 0x52
 801de98:	7812      	ldrb	r2, [r2, #0]
 801de9a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801de9c:	4b61      	ldr	r3, [pc, #388]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801de9e:	223c      	movs	r2, #60	; 0x3c
 801dea0:	2108      	movs	r1, #8
 801dea2:	468c      	mov	ip, r1
 801dea4:	44bc      	add	ip, r7
 801dea6:	4462      	add	r2, ip
 801dea8:	2155      	movs	r1, #85	; 0x55
 801deaa:	7812      	ldrb	r2, [r2, #0]
 801deac:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801deae:	4b5d      	ldr	r3, [pc, #372]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801deb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801deb2:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801deb6:	2b0c      	cmp	r3, #12
 801deb8:	d902      	bls.n	801dec0 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 801deba:	230c      	movs	r3, #12
 801debc:	62bb      	str	r3, [r7, #40]	; 0x28
 801debe:	e004      	b.n	801deca <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 801dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dec2:	2b05      	cmp	r3, #5
 801dec4:	d801      	bhi.n	801deca <SX1276SetTxConfig+0x266>
                datarate = 6;
 801dec6:	2306      	movs	r3, #6
 801dec8:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	2b07      	cmp	r3, #7
 801dece:	d105      	bne.n	801dedc <SX1276SetTxConfig+0x278>
 801ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ded2:	2b0b      	cmp	r3, #11
 801ded4:	d008      	beq.n	801dee8 <SX1276SetTxConfig+0x284>
 801ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ded8:	2b0c      	cmp	r3, #12
 801deda:	d005      	beq.n	801dee8 <SX1276SetTxConfig+0x284>
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	2b08      	cmp	r3, #8
 801dee0:	d107      	bne.n	801def2 <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dee4:	2b0c      	cmp	r3, #12
 801dee6:	d104      	bne.n	801def2 <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801dee8:	4b4e      	ldr	r3, [pc, #312]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801deea:	224c      	movs	r2, #76	; 0x4c
 801deec:	2101      	movs	r1, #1
 801deee:	5499      	strb	r1, [r3, r2]
 801def0:	e003      	b.n	801defa <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801def2:	4b4c      	ldr	r3, [pc, #304]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801def4:	224c      	movs	r2, #76	; 0x4c
 801def6:	2100      	movs	r1, #0
 801def8:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801defa:	4b4a      	ldr	r3, [pc, #296]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801defc:	2253      	movs	r2, #83	; 0x53
 801defe:	5c9b      	ldrb	r3, [r3, r2]
 801df00:	2b00      	cmp	r3, #0
 801df02:	d013      	beq.n	801df2c <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801df04:	2044      	movs	r0, #68	; 0x44
 801df06:	f000 fee9 	bl	801ecdc <SX1276Read>
 801df0a:	0003      	movs	r3, r0
 801df0c:	001a      	movs	r2, r3
 801df0e:	2380      	movs	r3, #128	; 0x80
 801df10:	425b      	negs	r3, r3
 801df12:	4313      	orrs	r3, r2
 801df14:	b2db      	uxtb	r3, r3
 801df16:	0019      	movs	r1, r3
 801df18:	2044      	movs	r0, #68	; 0x44
 801df1a:	f000 fecb 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801df1e:	4b41      	ldr	r3, [pc, #260]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801df20:	2254      	movs	r2, #84	; 0x54
 801df22:	5c9b      	ldrb	r3, [r3, r2]
 801df24:	0019      	movs	r1, r3
 801df26:	2024      	movs	r0, #36	; 0x24
 801df28:	f000 fec4 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801df2c:	201d      	movs	r0, #29
 801df2e:	f000 fed5 	bl	801ecdc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	b2db      	uxtb	r3, r3
 801df36:	011b      	lsls	r3, r3, #4
 801df38:	b2da      	uxtb	r2, r3
 801df3a:	2324      	movs	r3, #36	; 0x24
 801df3c:	2108      	movs	r1, #8
 801df3e:	468c      	mov	ip, r1
 801df40:	44bc      	add	ip, r7
 801df42:	4463      	add	r3, ip
 801df44:	781b      	ldrb	r3, [r3, #0]
 801df46:	18db      	adds	r3, r3, r3
 801df48:	b2db      	uxtb	r3, r3
 801df4a:	4313      	orrs	r3, r2
 801df4c:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801df4e:	232c      	movs	r3, #44	; 0x2c
 801df50:	2108      	movs	r1, #8
 801df52:	468c      	mov	ip, r1
 801df54:	44bc      	add	ip, r7
 801df56:	4463      	add	r3, ip
 801df58:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801df5a:	4313      	orrs	r3, r2
 801df5c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801df5e:	0019      	movs	r1, r3
 801df60:	201d      	movs	r0, #29
 801df62:	f000 fea7 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801df66:	201e      	movs	r0, #30
 801df68:	f000 feb8 	bl	801ecdc <SX1276Read>
 801df6c:	0003      	movs	r3, r0
 801df6e:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801df70:	230b      	movs	r3, #11
 801df72:	4013      	ands	r3, r2
 801df74:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801df76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df78:	b2db      	uxtb	r3, r3
 801df7a:	011b      	lsls	r3, r3, #4
 801df7c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801df7e:	4313      	orrs	r3, r2
 801df80:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801df82:	2330      	movs	r3, #48	; 0x30
 801df84:	2108      	movs	r1, #8
 801df86:	468c      	mov	ip, r1
 801df88:	44bc      	add	ip, r7
 801df8a:	4463      	add	r3, ip
 801df8c:	781b      	ldrb	r3, [r3, #0]
 801df8e:	009b      	lsls	r3, r3, #2
 801df90:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801df92:	4313      	orrs	r3, r2
 801df94:	b2db      	uxtb	r3, r3
 801df96:	0019      	movs	r1, r3
 801df98:	201e      	movs	r0, #30
 801df9a:	f000 fe8b 	bl	801ecb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801df9e:	2026      	movs	r0, #38	; 0x26
 801dfa0:	f000 fe9c 	bl	801ecdc <SX1276Read>
 801dfa4:	0003      	movs	r3, r0
 801dfa6:	b25b      	sxtb	r3, r3
 801dfa8:	2208      	movs	r2, #8
 801dfaa:	4393      	bics	r3, r2
 801dfac:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801dfae:	4b1d      	ldr	r3, [pc, #116]	; (801e024 <SX1276SetTxConfig+0x3c0>)
 801dfb0:	214c      	movs	r1, #76	; 0x4c
 801dfb2:	5c5b      	ldrb	r3, [r3, r1]
 801dfb4:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801dfb6:	b25b      	sxtb	r3, r3
 801dfb8:	4313      	orrs	r3, r2
 801dfba:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801dfbc:	b2db      	uxtb	r3, r3
 801dfbe:	0019      	movs	r1, r3
 801dfc0:	2026      	movs	r0, #38	; 0x26
 801dfc2:	f000 fe77 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801dfc6:	2428      	movs	r4, #40	; 0x28
 801dfc8:	2508      	movs	r5, #8
 801dfca:	197b      	adds	r3, r7, r5
 801dfcc:	191b      	adds	r3, r3, r4
 801dfce:	881b      	ldrh	r3, [r3, #0]
 801dfd0:	0a1b      	lsrs	r3, r3, #8
 801dfd2:	b29b      	uxth	r3, r3
 801dfd4:	b2db      	uxtb	r3, r3
 801dfd6:	0019      	movs	r1, r3
 801dfd8:	2020      	movs	r0, #32
 801dfda:	f000 fe6b 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801dfde:	197b      	adds	r3, r7, r5
 801dfe0:	191b      	adds	r3, r3, r4
 801dfe2:	881b      	ldrh	r3, [r3, #0]
 801dfe4:	b2db      	uxtb	r3, r3
 801dfe6:	0019      	movs	r1, r3
 801dfe8:	2021      	movs	r0, #33	; 0x21
 801dfea:	f000 fe63 	bl	801ecb4 <SX1276Write>
            if( datarate == 6 )
 801dfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dff0:	2b06      	cmp	r3, #6
 801dff2:	d11d      	bne.n	801e030 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801dff4:	2031      	movs	r0, #49	; 0x31
 801dff6:	f000 fe71 	bl	801ecdc <SX1276Read>
 801dffa:	0003      	movs	r3, r0
 801dffc:	b25b      	sxtb	r3, r3
 801dffe:	2207      	movs	r2, #7
 801e000:	4393      	bics	r3, r2
 801e002:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801e004:	2205      	movs	r2, #5
 801e006:	4313      	orrs	r3, r2
 801e008:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801e00a:	b2db      	uxtb	r3, r3
 801e00c:	0019      	movs	r1, r3
 801e00e:	2031      	movs	r0, #49	; 0x31
 801e010:	f000 fe50 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801e014:	210c      	movs	r1, #12
 801e016:	2037      	movs	r0, #55	; 0x37
 801e018:	f000 fe4c 	bl	801ecb4 <SX1276Write>
        break;
 801e01c:	e01c      	b.n	801e058 <SX1276SetTxConfig+0x3f4>
 801e01e:	46c0      	nop			; (mov r8, r8)
 801e020:	20001e8c 	.word	0x20001e8c
 801e024:	200022bc 	.word	0x200022bc
 801e028:	404e8480 	.word	0x404e8480
 801e02c:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801e030:	2031      	movs	r0, #49	; 0x31
 801e032:	f000 fe53 	bl	801ecdc <SX1276Read>
 801e036:	0003      	movs	r3, r0
 801e038:	b25b      	sxtb	r3, r3
 801e03a:	2207      	movs	r2, #7
 801e03c:	4393      	bics	r3, r2
 801e03e:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801e040:	2203      	movs	r2, #3
 801e042:	4313      	orrs	r3, r2
 801e044:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801e046:	b2db      	uxtb	r3, r3
 801e048:	0019      	movs	r1, r3
 801e04a:	2031      	movs	r0, #49	; 0x31
 801e04c:	f000 fe32 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801e050:	210a      	movs	r1, #10
 801e052:	2037      	movs	r0, #55	; 0x37
 801e054:	f000 fe2e 	bl	801ecb4 <SX1276Write>
        break;
 801e058:	46c0      	nop			; (mov r8, r8)
}
 801e05a:	46c0      	nop			; (mov r8, r8)
 801e05c:	46bd      	mov	sp, r7
 801e05e:	b005      	add	sp, #20
 801e060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e062:	46c0      	nop			; (mov r8, r8)

0801e064 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 801e064:	b5b0      	push	{r4, r5, r7, lr}
 801e066:	b094      	sub	sp, #80	; 0x50
 801e068:	af00      	add	r7, sp, #0
 801e06a:	0002      	movs	r2, r0
 801e06c:	1dfb      	adds	r3, r7, #7
 801e06e:	701a      	strb	r2, [r3, #0]
 801e070:	1dbb      	adds	r3, r7, #6
 801e072:	1c0a      	adds	r2, r1, #0
 801e074:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 801e076:	2300      	movs	r3, #0
 801e078:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 801e07a:	1dfb      	adds	r3, r7, #7
 801e07c:	781b      	ldrb	r3, [r3, #0]
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d003      	beq.n	801e08a <SX1276GetTimeOnAir+0x26>
 801e082:	2b01      	cmp	r3, #1
 801e084:	d100      	bne.n	801e088 <SX1276GetTimeOnAir+0x24>
 801e086:	e086      	b.n	801e196 <SX1276GetTimeOnAir+0x132>
 801e088:	e164      	b.n	801e354 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e08a:	4bb5      	ldr	r3, [pc, #724]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e08c:	8c1b      	ldrh	r3, [r3, #32]
 801e08e:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801e090:	2027      	movs	r0, #39	; 0x27
 801e092:	f000 fe23 	bl	801ecdc <SX1276Read>
 801e096:	0003      	movs	r3, r0
 801e098:	001a      	movs	r2, r3
 801e09a:	23f8      	movs	r3, #248	; 0xf8
 801e09c:	439a      	bics	r2, r3
 801e09e:	0013      	movs	r3, r2
 801e0a0:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e0a2:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801e0a4:	0018      	movs	r0, r3
 801e0a6:	f7e4 fbb9 	bl	800281c <__aeabi_i2d>
 801e0aa:	0004      	movs	r4, r0
 801e0ac:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801e0ae:	4bac      	ldr	r3, [pc, #688]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e0b0:	2222      	movs	r2, #34	; 0x22
 801e0b2:	5c9b      	ldrb	r3, [r3, r2]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d002      	beq.n	801e0be <SX1276GetTimeOnAir+0x5a>
 801e0b8:	2000      	movs	r0, #0
 801e0ba:	2100      	movs	r1, #0
 801e0bc:	e001      	b.n	801e0c2 <SX1276GetTimeOnAir+0x5e>
 801e0be:	2000      	movs	r0, #0
 801e0c0:	49a8      	ldr	r1, [pc, #672]	; (801e364 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801e0c2:	0022      	movs	r2, r4
 801e0c4:	002b      	movs	r3, r5
 801e0c6:	f7e2 fe93 	bl	8000df0 <__aeabi_dadd>
 801e0ca:	0003      	movs	r3, r0
 801e0cc:	000c      	movs	r4, r1
 801e0ce:	0025      	movs	r5, r4
 801e0d0:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801e0d2:	2030      	movs	r0, #48	; 0x30
 801e0d4:	f000 fe02 	bl	801ecdc <SX1276Read>
 801e0d8:	0003      	movs	r3, r0
 801e0da:	001a      	movs	r2, r3
 801e0dc:	23f9      	movs	r3, #249	; 0xf9
 801e0de:	439a      	bics	r2, r3
 801e0e0:	1e13      	subs	r3, r2, #0
 801e0e2:	d002      	beq.n	801e0ea <SX1276GetTimeOnAir+0x86>
 801e0e4:	2000      	movs	r0, #0
 801e0e6:	499f      	ldr	r1, [pc, #636]	; (801e364 <SX1276GetTimeOnAir+0x300>)
 801e0e8:	e001      	b.n	801e0ee <SX1276GetTimeOnAir+0x8a>
 801e0ea:	2000      	movs	r0, #0
 801e0ec:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801e0ee:	0022      	movs	r2, r4
 801e0f0:	002b      	movs	r3, r5
 801e0f2:	f7e2 fe7d 	bl	8000df0 <__aeabi_dadd>
 801e0f6:	0003      	movs	r3, r0
 801e0f8:	000c      	movs	r4, r1
 801e0fa:	0025      	movs	r5, r4
 801e0fc:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801e0fe:	1dbb      	adds	r3, r7, #6
 801e100:	781b      	ldrb	r3, [r3, #0]
 801e102:	0018      	movs	r0, r3
 801e104:	f7e4 fb8a 	bl	800281c <__aeabi_i2d>
 801e108:	0002      	movs	r2, r0
 801e10a:	000b      	movs	r3, r1
 801e10c:	0020      	movs	r0, r4
 801e10e:	0029      	movs	r1, r5
 801e110:	f7e2 fe6e 	bl	8000df0 <__aeabi_dadd>
 801e114:	0003      	movs	r3, r0
 801e116:	000c      	movs	r4, r1
 801e118:	0025      	movs	r5, r4
 801e11a:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 801e11c:	4b90      	ldr	r3, [pc, #576]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e11e:	2224      	movs	r2, #36	; 0x24
 801e120:	5c9b      	ldrb	r3, [r3, r2]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d003      	beq.n	801e12e <SX1276GetTimeOnAir+0xca>
 801e126:	2000      	movs	r0, #0
 801e128:	2180      	movs	r1, #128	; 0x80
 801e12a:	05c9      	lsls	r1, r1, #23
 801e12c:	e001      	b.n	801e132 <SX1276GetTimeOnAir+0xce>
 801e12e:	2000      	movs	r0, #0
 801e130:	2100      	movs	r1, #0
                                     pktLen +
 801e132:	0022      	movs	r2, r4
 801e134:	002b      	movs	r3, r5
 801e136:	f7e2 fe5b 	bl	8000df0 <__aeabi_dadd>
 801e13a:	0003      	movs	r3, r0
 801e13c:	000c      	movs	r4, r1
 801e13e:	0018      	movs	r0, r3
 801e140:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e142:	2200      	movs	r2, #0
 801e144:	4b88      	ldr	r3, [pc, #544]	; (801e368 <SX1276GetTimeOnAir+0x304>)
 801e146:	f7e3 fd79 	bl	8001c3c <__aeabi_dmul>
 801e14a:	0003      	movs	r3, r0
 801e14c:	000c      	movs	r4, r1
 801e14e:	0025      	movs	r5, r4
 801e150:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 801e152:	4b83      	ldr	r3, [pc, #524]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e154:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 801e156:	0018      	movs	r0, r3
 801e158:	f7e4 fb9a 	bl	8002890 <__aeabi_ui2d>
 801e15c:	0002      	movs	r2, r0
 801e15e:	000b      	movs	r3, r1
 801e160:	0020      	movs	r0, r4
 801e162:	0029      	movs	r1, r5
 801e164:	f7e3 f960 	bl	8001428 <__aeabi_ddiv>
 801e168:	0003      	movs	r3, r0
 801e16a:	000c      	movs	r4, r1
 801e16c:	0018      	movs	r0, r3
 801e16e:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e170:	2200      	movs	r2, #0
 801e172:	4b7e      	ldr	r3, [pc, #504]	; (801e36c <SX1276GetTimeOnAir+0x308>)
 801e174:	f7e3 fd62 	bl	8001c3c <__aeabi_dmul>
 801e178:	0003      	movs	r3, r0
 801e17a:	000c      	movs	r4, r1
 801e17c:	0018      	movs	r0, r3
 801e17e:	0021      	movs	r1, r4
 801e180:	f009 f8f2 	bl	8027368 <round>
 801e184:	0003      	movs	r3, r0
 801e186:	000c      	movs	r4, r1
 801e188:	0018      	movs	r0, r3
 801e18a:	0021      	movs	r1, r4
 801e18c:	f7e2 fa20 	bl	80005d0 <__aeabi_d2uiz>
 801e190:	0003      	movs	r3, r0
 801e192:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 801e194:	e0de      	b.n	801e354 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 801e196:	2300      	movs	r3, #0
 801e198:	2400      	movs	r4, #0
 801e19a:	643b      	str	r3, [r7, #64]	; 0x40
 801e19c:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 801e19e:	4b70      	ldr	r3, [pc, #448]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e1a2:	2b08      	cmp	r3, #8
 801e1a4:	d008      	beq.n	801e1b8 <SX1276GetTimeOnAir+0x154>
 801e1a6:	2b09      	cmp	r3, #9
 801e1a8:	d00b      	beq.n	801e1c2 <SX1276GetTimeOnAir+0x15e>
 801e1aa:	2b07      	cmp	r3, #7
 801e1ac:	d10e      	bne.n	801e1cc <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	4c6f      	ldr	r4, [pc, #444]	; (801e370 <SX1276GetTimeOnAir+0x30c>)
 801e1b2:	643b      	str	r3, [r7, #64]	; 0x40
 801e1b4:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801e1b6:	e009      	b.n	801e1cc <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	4c6e      	ldr	r4, [pc, #440]	; (801e374 <SX1276GetTimeOnAir+0x310>)
 801e1bc:	643b      	str	r3, [r7, #64]	; 0x40
 801e1be:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801e1c0:	e004      	b.n	801e1cc <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	4c6c      	ldr	r4, [pc, #432]	; (801e378 <SX1276GetTimeOnAir+0x314>)
 801e1c6:	643b      	str	r3, [r7, #64]	; 0x40
 801e1c8:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801e1ca:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 801e1cc:	4b64      	ldr	r3, [pc, #400]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e1d0:	2201      	movs	r2, #1
 801e1d2:	409a      	lsls	r2, r3
 801e1d4:	0013      	movs	r3, r2
 801e1d6:	0018      	movs	r0, r3
 801e1d8:	f7e4 fb20 	bl	800281c <__aeabi_i2d>
 801e1dc:	0003      	movs	r3, r0
 801e1de:	000c      	movs	r4, r1
 801e1e0:	001a      	movs	r2, r3
 801e1e2:	0023      	movs	r3, r4
 801e1e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801e1e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e1e8:	f7e3 f91e 	bl	8001428 <__aeabi_ddiv>
 801e1ec:	0003      	movs	r3, r0
 801e1ee:	000c      	movs	r4, r1
 801e1f0:	63bb      	str	r3, [r7, #56]	; 0x38
 801e1f2:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 801e1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e1f8:	2000      	movs	r0, #0
 801e1fa:	495a      	ldr	r1, [pc, #360]	; (801e364 <SX1276GetTimeOnAir+0x300>)
 801e1fc:	f7e3 f914 	bl	8001428 <__aeabi_ddiv>
 801e200:	0003      	movs	r3, r0
 801e202:	000c      	movs	r4, r1
 801e204:	633b      	str	r3, [r7, #48]	; 0x30
 801e206:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 801e208:	4b55      	ldr	r3, [pc, #340]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e20a:	224e      	movs	r2, #78	; 0x4e
 801e20c:	5a9b      	ldrh	r3, [r3, r2]
 801e20e:	0018      	movs	r0, r3
 801e210:	f7e4 fb04 	bl	800281c <__aeabi_i2d>
 801e214:	2200      	movs	r2, #0
 801e216:	4b59      	ldr	r3, [pc, #356]	; (801e37c <SX1276GetTimeOnAir+0x318>)
 801e218:	f7e2 fdea 	bl	8000df0 <__aeabi_dadd>
 801e21c:	0003      	movs	r3, r0
 801e21e:	000c      	movs	r4, r1
 801e220:	001a      	movs	r2, r3
 801e222:	0023      	movs	r3, r4
 801e224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e226:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e228:	f7e3 fd08 	bl	8001c3c <__aeabi_dmul>
 801e22c:	0003      	movs	r3, r0
 801e22e:	000c      	movs	r4, r1
 801e230:	62bb      	str	r3, [r7, #40]	; 0x28
 801e232:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e234:	1dbb      	adds	r3, r7, #6
 801e236:	781b      	ldrb	r3, [r3, #0]
 801e238:	00db      	lsls	r3, r3, #3
 801e23a:	001a      	movs	r2, r3
 801e23c:	4b48      	ldr	r3, [pc, #288]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e240:	009b      	lsls	r3, r3, #2
 801e242:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 801e244:	4a46      	ldr	r2, [pc, #280]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e246:	2152      	movs	r1, #82	; 0x52
 801e248:	5c52      	ldrb	r2, [r2, r1]
 801e24a:	0112      	lsls	r2, r2, #4
 801e24c:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 801e24e:	4b44      	ldr	r3, [pc, #272]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e250:	2150      	movs	r1, #80	; 0x50
 801e252:	5c5b      	ldrb	r3, [r3, r1]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d001      	beq.n	801e25c <SX1276GetTimeOnAir+0x1f8>
 801e258:	2314      	movs	r3, #20
 801e25a:	e000      	b.n	801e25e <SX1276GetTimeOnAir+0x1fa>
 801e25c:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 801e25e:	1ad3      	subs	r3, r2, r3
 801e260:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e262:	0018      	movs	r0, r3
 801e264:	f7e4 fb14 	bl	8002890 <__aeabi_ui2d>
 801e268:	0004      	movs	r4, r0
 801e26a:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 801e26c:	4b3c      	ldr	r3, [pc, #240]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e26e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801e270:	4b3b      	ldr	r3, [pc, #236]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e272:	214c      	movs	r1, #76	; 0x4c
 801e274:	5c5b      	ldrb	r3, [r3, r1]
 801e276:	2b00      	cmp	r3, #0
 801e278:	d001      	beq.n	801e27e <SX1276GetTimeOnAir+0x21a>
 801e27a:	2302      	movs	r3, #2
 801e27c:	e000      	b.n	801e280 <SX1276GetTimeOnAir+0x21c>
 801e27e:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 801e280:	1ad3      	subs	r3, r2, r3
 801e282:	009b      	lsls	r3, r3, #2
 801e284:	0018      	movs	r0, r3
 801e286:	f7e4 fb03 	bl	8002890 <__aeabi_ui2d>
 801e28a:	0002      	movs	r2, r0
 801e28c:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e28e:	0020      	movs	r0, r4
 801e290:	0029      	movs	r1, r5
 801e292:	f7e3 f8c9 	bl	8001428 <__aeabi_ddiv>
 801e296:	0003      	movs	r3, r0
 801e298:	000c      	movs	r4, r1
 801e29a:	0018      	movs	r0, r3
 801e29c:	0021      	movs	r1, r4
 801e29e:	f008 ff5f 	bl	8027160 <ceil>
 801e2a2:	0004      	movs	r4, r0
 801e2a4:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 801e2a6:	4b2e      	ldr	r3, [pc, #184]	; (801e360 <SX1276GetTimeOnAir+0x2fc>)
 801e2a8:	224d      	movs	r2, #77	; 0x4d
 801e2aa:	5c9b      	ldrb	r3, [r3, r2]
 801e2ac:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801e2ae:	0018      	movs	r0, r3
 801e2b0:	f7e4 fab4 	bl	800281c <__aeabi_i2d>
 801e2b4:	0002      	movs	r2, r0
 801e2b6:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e2b8:	0020      	movs	r0, r4
 801e2ba:	0029      	movs	r1, r5
 801e2bc:	f7e3 fcbe 	bl	8001c3c <__aeabi_dmul>
 801e2c0:	0003      	movs	r3, r0
 801e2c2:	000c      	movs	r4, r1
 801e2c4:	623b      	str	r3, [r7, #32]
 801e2c6:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 801e2c8:	2200      	movs	r2, #0
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	6a38      	ldr	r0, [r7, #32]
 801e2ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e2d0:	f7e2 f8c2 	bl	8000458 <__aeabi_dcmpgt>
 801e2d4:	1e03      	subs	r3, r0, #0
 801e2d6:	d008      	beq.n	801e2ea <SX1276GetTimeOnAir+0x286>
 801e2d8:	2200      	movs	r2, #0
 801e2da:	4b23      	ldr	r3, [pc, #140]	; (801e368 <SX1276GetTimeOnAir+0x304>)
 801e2dc:	6a38      	ldr	r0, [r7, #32]
 801e2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e2e0:	f7e2 fd86 	bl	8000df0 <__aeabi_dadd>
 801e2e4:	0003      	movs	r3, r0
 801e2e6:	000c      	movs	r4, r1
 801e2e8:	e001      	b.n	801e2ee <SX1276GetTimeOnAir+0x28a>
 801e2ea:	2300      	movs	r3, #0
 801e2ec:	4c1e      	ldr	r4, [pc, #120]	; (801e368 <SX1276GetTimeOnAir+0x304>)
 801e2ee:	61bb      	str	r3, [r7, #24]
 801e2f0:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 801e2f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e2f6:	69b8      	ldr	r0, [r7, #24]
 801e2f8:	69f9      	ldr	r1, [r7, #28]
 801e2fa:	f7e3 fc9f 	bl	8001c3c <__aeabi_dmul>
 801e2fe:	0003      	movs	r3, r0
 801e300:	000c      	movs	r4, r1
 801e302:	613b      	str	r3, [r7, #16]
 801e304:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 801e306:	693a      	ldr	r2, [r7, #16]
 801e308:	697b      	ldr	r3, [r7, #20]
 801e30a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e30c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e30e:	f7e2 fd6f 	bl	8000df0 <__aeabi_dadd>
 801e312:	0003      	movs	r3, r0
 801e314:	000c      	movs	r4, r1
 801e316:	60bb      	str	r3, [r7, #8]
 801e318:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 801e31a:	2200      	movs	r2, #0
 801e31c:	4b13      	ldr	r3, [pc, #76]	; (801e36c <SX1276GetTimeOnAir+0x308>)
 801e31e:	68b8      	ldr	r0, [r7, #8]
 801e320:	68f9      	ldr	r1, [r7, #12]
 801e322:	f7e3 fc8b 	bl	8001c3c <__aeabi_dmul>
 801e326:	0003      	movs	r3, r0
 801e328:	000c      	movs	r4, r1
 801e32a:	0018      	movs	r0, r3
 801e32c:	0021      	movs	r1, r4
 801e32e:	4a14      	ldr	r2, [pc, #80]	; (801e380 <SX1276GetTimeOnAir+0x31c>)
 801e330:	4b14      	ldr	r3, [pc, #80]	; (801e384 <SX1276GetTimeOnAir+0x320>)
 801e332:	f7e2 fd5d 	bl	8000df0 <__aeabi_dadd>
 801e336:	0003      	movs	r3, r0
 801e338:	000c      	movs	r4, r1
 801e33a:	0018      	movs	r0, r3
 801e33c:	0021      	movs	r1, r4
 801e33e:	f008 ff91 	bl	8027264 <floor>
 801e342:	0003      	movs	r3, r0
 801e344:	000c      	movs	r4, r1
 801e346:	0018      	movs	r0, r3
 801e348:	0021      	movs	r1, r4
 801e34a:	f7e2 f941 	bl	80005d0 <__aeabi_d2uiz>
 801e34e:	0003      	movs	r3, r0
 801e350:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 801e352:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 801e354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801e356:	0018      	movs	r0, r3
 801e358:	46bd      	mov	sp, r7
 801e35a:	b014      	add	sp, #80	; 0x50
 801e35c:	bdb0      	pop	{r4, r5, r7, pc}
 801e35e:	46c0      	nop			; (mov r8, r8)
 801e360:	200022bc 	.word	0x200022bc
 801e364:	3ff00000 	.word	0x3ff00000
 801e368:	40200000 	.word	0x40200000
 801e36c:	408f4000 	.word	0x408f4000
 801e370:	40fe8480 	.word	0x40fe8480
 801e374:	410e8480 	.word	0x410e8480
 801e378:	411e8480 	.word	0x411e8480
 801e37c:	40110000 	.word	0x40110000
 801e380:	d916872b 	.word	0xd916872b
 801e384:	3feff7ce 	.word	0x3feff7ce

0801e388 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801e388:	b580      	push	{r7, lr}
 801e38a:	b084      	sub	sp, #16
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
 801e390:	000a      	movs	r2, r1
 801e392:	1cfb      	adds	r3, r7, #3
 801e394:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 801e396:	2300      	movs	r3, #0
 801e398:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801e39a:	4b59      	ldr	r3, [pc, #356]	; (801e500 <SX1276Send+0x178>)
 801e39c:	795b      	ldrb	r3, [r3, #5]
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d002      	beq.n	801e3a8 <SX1276Send+0x20>
 801e3a2:	2b01      	cmp	r3, #1
 801e3a4:	d04c      	beq.n	801e440 <SX1276Send+0xb8>
 801e3a6:	e0a2      	b.n	801e4ee <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801e3a8:	4b55      	ldr	r3, [pc, #340]	; (801e500 <SX1276Send+0x178>)
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801e3ae:	1cfb      	adds	r3, r7, #3
 801e3b0:	781b      	ldrb	r3, [r3, #0]
 801e3b2:	b29a      	uxth	r2, r3
 801e3b4:	4b52      	ldr	r3, [pc, #328]	; (801e500 <SX1276Send+0x178>)
 801e3b6:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801e3b8:	4b51      	ldr	r3, [pc, #324]	; (801e500 <SX1276Send+0x178>)
 801e3ba:	2222      	movs	r2, #34	; 0x22
 801e3bc:	5c9b      	ldrb	r3, [r3, r2]
 801e3be:	2201      	movs	r2, #1
 801e3c0:	4053      	eors	r3, r2
 801e3c2:	b2db      	uxtb	r3, r3
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d005      	beq.n	801e3d4 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801e3c8:	1cfb      	adds	r3, r7, #3
 801e3ca:	2101      	movs	r1, #1
 801e3cc:	0018      	movs	r0, r3
 801e3ce:	f000 fd3b 	bl	801ee48 <SX1276WriteFifo>
 801e3d2:	e005      	b.n	801e3e0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801e3d4:	1cfb      	adds	r3, r7, #3
 801e3d6:	781b      	ldrb	r3, [r3, #0]
 801e3d8:	0019      	movs	r1, r3
 801e3da:	2032      	movs	r0, #50	; 0x32
 801e3dc:	f000 fc6a 	bl	801ecb4 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801e3e0:	1cfb      	adds	r3, r7, #3
 801e3e2:	781b      	ldrb	r3, [r3, #0]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d009      	beq.n	801e3fc <SX1276Send+0x74>
 801e3e8:	1cfb      	adds	r3, r7, #3
 801e3ea:	781b      	ldrb	r3, [r3, #0]
 801e3ec:	2b40      	cmp	r3, #64	; 0x40
 801e3ee:	d805      	bhi.n	801e3fc <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801e3f0:	1cfb      	adds	r3, r7, #3
 801e3f2:	7819      	ldrb	r1, [r3, #0]
 801e3f4:	4b42      	ldr	r3, [pc, #264]	; (801e500 <SX1276Send+0x178>)
 801e3f6:	223f      	movs	r2, #63	; 0x3f
 801e3f8:	5499      	strb	r1, [r3, r2]
 801e3fa:	e00b      	b.n	801e414 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 801e3fc:	1cfb      	adds	r3, r7, #3
 801e3fe:	781b      	ldrb	r3, [r3, #0]
 801e400:	b29a      	uxth	r2, r3
 801e402:	6879      	ldr	r1, [r7, #4]
 801e404:	4b3f      	ldr	r3, [pc, #252]	; (801e504 <SX1276Send+0x17c>)
 801e406:	0018      	movs	r0, r3
 801e408:	f7fe fc54 	bl	801ccb4 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801e40c:	4b3c      	ldr	r3, [pc, #240]	; (801e500 <SX1276Send+0x178>)
 801e40e:	223f      	movs	r2, #63	; 0x3f
 801e410:	2120      	movs	r1, #32
 801e412:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801e414:	4b3a      	ldr	r3, [pc, #232]	; (801e500 <SX1276Send+0x178>)
 801e416:	223f      	movs	r2, #63	; 0x3f
 801e418:	5c9a      	ldrb	r2, [r3, r2]
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	0011      	movs	r1, r2
 801e41e:	0018      	movs	r0, r3
 801e420:	f000 fd12 	bl	801ee48 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801e424:	4b36      	ldr	r3, [pc, #216]	; (801e500 <SX1276Send+0x178>)
 801e426:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801e428:	4b35      	ldr	r3, [pc, #212]	; (801e500 <SX1276Send+0x178>)
 801e42a:	213f      	movs	r1, #63	; 0x3f
 801e42c:	5c5b      	ldrb	r3, [r3, r1]
 801e42e:	b29b      	uxth	r3, r3
 801e430:	18d3      	adds	r3, r2, r3
 801e432:	b29a      	uxth	r2, r3
 801e434:	4b32      	ldr	r3, [pc, #200]	; (801e500 <SX1276Send+0x178>)
 801e436:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801e438:	4b31      	ldr	r3, [pc, #196]	; (801e500 <SX1276Send+0x178>)
 801e43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e43c:	60fb      	str	r3, [r7, #12]
        }
        break;
 801e43e:	e056      	b.n	801e4ee <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801e440:	4b2f      	ldr	r3, [pc, #188]	; (801e500 <SX1276Send+0x178>)
 801e442:	2255      	movs	r2, #85	; 0x55
 801e444:	5c9b      	ldrb	r3, [r3, r2]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d011      	beq.n	801e46e <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801e44a:	2033      	movs	r0, #51	; 0x33
 801e44c:	f000 fc46 	bl	801ecdc <SX1276Read>
 801e450:	0003      	movs	r3, r0
 801e452:	001a      	movs	r2, r3
 801e454:	2341      	movs	r3, #65	; 0x41
 801e456:	439a      	bics	r2, r3
 801e458:	0013      	movs	r3, r2
 801e45a:	b2db      	uxtb	r3, r3
 801e45c:	0019      	movs	r1, r3
 801e45e:	2033      	movs	r0, #51	; 0x33
 801e460:	f000 fc28 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801e464:	2119      	movs	r1, #25
 801e466:	203b      	movs	r0, #59	; 0x3b
 801e468:	f000 fc24 	bl	801ecb4 <SX1276Write>
 801e46c:	e013      	b.n	801e496 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801e46e:	2033      	movs	r0, #51	; 0x33
 801e470:	f000 fc34 	bl	801ecdc <SX1276Read>
 801e474:	0003      	movs	r3, r0
 801e476:	b25b      	sxtb	r3, r3
 801e478:	2241      	movs	r2, #65	; 0x41
 801e47a:	4393      	bics	r3, r2
 801e47c:	b25b      	sxtb	r3, r3
 801e47e:	2201      	movs	r2, #1
 801e480:	4313      	orrs	r3, r2
 801e482:	b25b      	sxtb	r3, r3
 801e484:	b2db      	uxtb	r3, r3
 801e486:	0019      	movs	r1, r3
 801e488:	2033      	movs	r0, #51	; 0x33
 801e48a:	f000 fc13 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801e48e:	211d      	movs	r1, #29
 801e490:	203b      	movs	r0, #59	; 0x3b
 801e492:	f000 fc0f 	bl	801ecb4 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801e496:	1cfb      	adds	r3, r7, #3
 801e498:	7819      	ldrb	r1, [r3, #0]
 801e49a:	4b19      	ldr	r3, [pc, #100]	; (801e500 <SX1276Send+0x178>)
 801e49c:	2264      	movs	r2, #100	; 0x64
 801e49e:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801e4a0:	1cfb      	adds	r3, r7, #3
 801e4a2:	781b      	ldrb	r3, [r3, #0]
 801e4a4:	0019      	movs	r1, r3
 801e4a6:	2022      	movs	r0, #34	; 0x22
 801e4a8:	f000 fc04 	bl	801ecb4 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801e4ac:	2100      	movs	r1, #0
 801e4ae:	200e      	movs	r0, #14
 801e4b0:	f000 fc00 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801e4b4:	2100      	movs	r1, #0
 801e4b6:	200d      	movs	r0, #13
 801e4b8:	f000 fbfc 	bl	801ecb4 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801e4bc:	2001      	movs	r0, #1
 801e4be:	f000 fc0d 	bl	801ecdc <SX1276Read>
 801e4c2:	0003      	movs	r3, r0
 801e4c4:	001a      	movs	r2, r3
 801e4c6:	23f8      	movs	r3, #248	; 0xf8
 801e4c8:	439a      	bics	r2, r3
 801e4ca:	1e13      	subs	r3, r2, #0
 801e4cc:	d104      	bne.n	801e4d8 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801e4ce:	f000 f835 	bl	801e53c <SX1276SetStby>
                DelayMs( 1 );
 801e4d2:	2001      	movs	r0, #1
 801e4d4:	f006 fdac 	bl	8025030 <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801e4d8:	1cfb      	adds	r3, r7, #3
 801e4da:	781a      	ldrb	r2, [r3, #0]
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	0011      	movs	r1, r2
 801e4e0:	0018      	movs	r0, r3
 801e4e2:	f000 fcb1 	bl	801ee48 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801e4e6:	4b06      	ldr	r3, [pc, #24]	; (801e500 <SX1276Send+0x178>)
 801e4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e4ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 801e4ec:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	0018      	movs	r0, r3
 801e4f2:	f000 f9cd 	bl	801e890 <SX1276SetTx>
}
 801e4f6:	46c0      	nop			; (mov r8, r8)
 801e4f8:	46bd      	mov	sp, r7
 801e4fa:	b004      	add	sp, #16
 801e4fc:	bd80      	pop	{r7, pc}
 801e4fe:	46c0      	nop			; (mov r8, r8)
 801e500:	200022bc 	.word	0x200022bc
 801e504:	20001d8c 	.word	0x20001d8c

0801e508 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 801e50c:	4b08      	ldr	r3, [pc, #32]	; (801e530 <SX1276SetSleep+0x28>)
 801e50e:	0018      	movs	r0, r3
 801e510:	f7fe fb4e 	bl	801cbb0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 801e514:	4b07      	ldr	r3, [pc, #28]	; (801e534 <SX1276SetSleep+0x2c>)
 801e516:	0018      	movs	r0, r3
 801e518:	f7fe fb4a 	bl	801cbb0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801e51c:	2000      	movs	r0, #0
 801e51e:	f000 fb21 	bl	801eb64 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801e522:	4b05      	ldr	r3, [pc, #20]	; (801e538 <SX1276SetSleep+0x30>)
 801e524:	2200      	movs	r2, #0
 801e526:	711a      	strb	r2, [r3, #4]
}
 801e528:	46c0      	nop			; (mov r8, r8)
 801e52a:	46bd      	mov	sp, r7
 801e52c:	bd80      	pop	{r7, pc}
 801e52e:	46c0      	nop			; (mov r8, r8)
 801e530:	20002324 	.word	0x20002324
 801e534:	2000228c 	.word	0x2000228c
 801e538:	200022bc 	.word	0x200022bc

0801e53c <SX1276SetStby>:

void SX1276SetStby( void )
{
 801e53c:	b580      	push	{r7, lr}
 801e53e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 801e540:	4b08      	ldr	r3, [pc, #32]	; (801e564 <SX1276SetStby+0x28>)
 801e542:	0018      	movs	r0, r3
 801e544:	f7fe fb34 	bl	801cbb0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 801e548:	4b07      	ldr	r3, [pc, #28]	; (801e568 <SX1276SetStby+0x2c>)
 801e54a:	0018      	movs	r0, r3
 801e54c:	f7fe fb30 	bl	801cbb0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801e550:	2001      	movs	r0, #1
 801e552:	f000 fb07 	bl	801eb64 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801e556:	4b05      	ldr	r3, [pc, #20]	; (801e56c <SX1276SetStby+0x30>)
 801e558:	2200      	movs	r2, #0
 801e55a:	711a      	strb	r2, [r3, #4]
}
 801e55c:	46c0      	nop			; (mov r8, r8)
 801e55e:	46bd      	mov	sp, r7
 801e560:	bd80      	pop	{r7, pc}
 801e562:	46c0      	nop			; (mov r8, r8)
 801e564:	20002324 	.word	0x20002324
 801e568:	2000228c 	.word	0x2000228c
 801e56c:	200022bc 	.word	0x200022bc

0801e570 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801e570:	b580      	push	{r7, lr}
 801e572:	b084      	sub	sp, #16
 801e574:	af00      	add	r7, sp, #0
 801e576:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 801e578:	230f      	movs	r3, #15
 801e57a:	18fb      	adds	r3, r7, r3
 801e57c:	2200      	movs	r2, #0
 801e57e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 801e580:	4bb8      	ldr	r3, [pc, #736]	; (801e864 <SX1276SetRx+0x2f4>)
 801e582:	795b      	ldrb	r3, [r3, #5]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d002      	beq.n	801e58e <SX1276SetRx+0x1e>
 801e588:	2b01      	cmp	r3, #1
 801e58a:	d041      	beq.n	801e610 <SX1276SetRx+0xa0>
 801e58c:	e128      	b.n	801e7e0 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801e58e:	230f      	movs	r3, #15
 801e590:	18fb      	adds	r3, r7, r3
 801e592:	4ab4      	ldr	r2, [pc, #720]	; (801e864 <SX1276SetRx+0x2f4>)
 801e594:	2126      	movs	r1, #38	; 0x26
 801e596:	5c52      	ldrb	r2, [r2, r1]
 801e598:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e59a:	2040      	movs	r0, #64	; 0x40
 801e59c:	f000 fb9e 	bl	801ecdc <SX1276Read>
 801e5a0:	0003      	movs	r3, r0
 801e5a2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801e5a4:	2203      	movs	r2, #3
 801e5a6:	4013      	ands	r3, r2
 801e5a8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801e5aa:	220c      	movs	r2, #12
 801e5ac:	4313      	orrs	r3, r2
 801e5ae:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e5b0:	b2db      	uxtb	r3, r3
 801e5b2:	0019      	movs	r1, r3
 801e5b4:	2040      	movs	r0, #64	; 0x40
 801e5b6:	f000 fb7d 	bl	801ecb4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801e5ba:	2041      	movs	r0, #65	; 0x41
 801e5bc:	f000 fb8e 	bl	801ecdc <SX1276Read>
 801e5c0:	0003      	movs	r3, r0
 801e5c2:	001a      	movs	r2, r3
 801e5c4:	233f      	movs	r3, #63	; 0x3f
 801e5c6:	425b      	negs	r3, r3
 801e5c8:	4313      	orrs	r3, r2
 801e5ca:	b2db      	uxtb	r3, r3
 801e5cc:	0019      	movs	r1, r3
 801e5ce:	2041      	movs	r0, #65	; 0x41
 801e5d0:	f000 fb70 	bl	801ecb4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801e5d4:	2035      	movs	r0, #53	; 0x35
 801e5d6:	f000 fb81 	bl	801ecdc <SX1276Read>
 801e5da:	0003      	movs	r3, r0
 801e5dc:	001a      	movs	r2, r3
 801e5de:	233f      	movs	r3, #63	; 0x3f
 801e5e0:	4013      	ands	r3, r2
 801e5e2:	b2d9      	uxtb	r1, r3
 801e5e4:	4b9f      	ldr	r3, [pc, #636]	; (801e864 <SX1276SetRx+0x2f4>)
 801e5e6:	223e      	movs	r2, #62	; 0x3e
 801e5e8:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801e5ea:	211e      	movs	r1, #30
 801e5ec:	200d      	movs	r0, #13
 801e5ee:	f000 fb61 	bl	801ecb4 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801e5f2:	4b9c      	ldr	r3, [pc, #624]	; (801e864 <SX1276SetRx+0x2f4>)
 801e5f4:	2230      	movs	r2, #48	; 0x30
 801e5f6:	2100      	movs	r1, #0
 801e5f8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801e5fa:	4b9a      	ldr	r3, [pc, #616]	; (801e864 <SX1276SetRx+0x2f4>)
 801e5fc:	2231      	movs	r2, #49	; 0x31
 801e5fe:	2100      	movs	r1, #0
 801e600:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801e602:	4b98      	ldr	r3, [pc, #608]	; (801e864 <SX1276SetRx+0x2f4>)
 801e604:	2200      	movs	r2, #0
 801e606:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801e608:	4b96      	ldr	r3, [pc, #600]	; (801e864 <SX1276SetRx+0x2f4>)
 801e60a:	2200      	movs	r2, #0
 801e60c:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801e60e:	e0e7      	b.n	801e7e0 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801e610:	4b94      	ldr	r3, [pc, #592]	; (801e864 <SX1276SetRx+0x2f4>)
 801e612:	2255      	movs	r2, #85	; 0x55
 801e614:	5c9b      	ldrb	r3, [r3, r2]
 801e616:	2b00      	cmp	r3, #0
 801e618:	d010      	beq.n	801e63c <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801e61a:	2033      	movs	r0, #51	; 0x33
 801e61c:	f000 fb5e 	bl	801ecdc <SX1276Read>
 801e620:	0003      	movs	r3, r0
 801e622:	001a      	movs	r2, r3
 801e624:	2341      	movs	r3, #65	; 0x41
 801e626:	4313      	orrs	r3, r2
 801e628:	b2db      	uxtb	r3, r3
 801e62a:	0019      	movs	r1, r3
 801e62c:	2033      	movs	r0, #51	; 0x33
 801e62e:	f000 fb41 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801e632:	2119      	movs	r1, #25
 801e634:	203b      	movs	r0, #59	; 0x3b
 801e636:	f000 fb3d 	bl	801ecb4 <SX1276Write>
 801e63a:	e013      	b.n	801e664 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801e63c:	2033      	movs	r0, #51	; 0x33
 801e63e:	f000 fb4d 	bl	801ecdc <SX1276Read>
 801e642:	0003      	movs	r3, r0
 801e644:	b25b      	sxtb	r3, r3
 801e646:	2241      	movs	r2, #65	; 0x41
 801e648:	4393      	bics	r3, r2
 801e64a:	b25b      	sxtb	r3, r3
 801e64c:	2201      	movs	r2, #1
 801e64e:	4313      	orrs	r3, r2
 801e650:	b25b      	sxtb	r3, r3
 801e652:	b2db      	uxtb	r3, r3
 801e654:	0019      	movs	r1, r3
 801e656:	2033      	movs	r0, #51	; 0x33
 801e658:	f000 fb2c 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801e65c:	211d      	movs	r1, #29
 801e65e:	203b      	movs	r0, #59	; 0x3b
 801e660:	f000 fb28 	bl	801ecb4 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801e664:	4b7f      	ldr	r3, [pc, #508]	; (801e864 <SX1276SetRx+0x2f4>)
 801e666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e668:	2b08      	cmp	r3, #8
 801e66a:	d900      	bls.n	801e66e <SX1276SetRx+0xfe>
 801e66c:	e076      	b.n	801e75c <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801e66e:	2031      	movs	r0, #49	; 0x31
 801e670:	f000 fb34 	bl	801ecdc <SX1276Read>
 801e674:	0003      	movs	r3, r0
 801e676:	001a      	movs	r2, r3
 801e678:	237f      	movs	r3, #127	; 0x7f
 801e67a:	4013      	ands	r3, r2
 801e67c:	b2db      	uxtb	r3, r3
 801e67e:	0019      	movs	r1, r3
 801e680:	2031      	movs	r0, #49	; 0x31
 801e682:	f000 fb17 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801e686:	2100      	movs	r1, #0
 801e688:	2030      	movs	r0, #48	; 0x30
 801e68a:	f000 fb13 	bl	801ecb4 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801e68e:	4b75      	ldr	r3, [pc, #468]	; (801e864 <SX1276SetRx+0x2f4>)
 801e690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e692:	2b08      	cmp	r3, #8
 801e694:	d86f      	bhi.n	801e776 <SX1276SetRx+0x206>
 801e696:	009a      	lsls	r2, r3, #2
 801e698:	4b73      	ldr	r3, [pc, #460]	; (801e868 <SX1276SetRx+0x2f8>)
 801e69a:	18d3      	adds	r3, r2, r3
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801e6a0:	2148      	movs	r1, #72	; 0x48
 801e6a2:	202f      	movs	r0, #47	; 0x2f
 801e6a4:	f000 fb06 	bl	801ecb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801e6a8:	4b6e      	ldr	r3, [pc, #440]	; (801e864 <SX1276SetRx+0x2f4>)
 801e6aa:	689b      	ldr	r3, [r3, #8]
 801e6ac:	4a6f      	ldr	r2, [pc, #444]	; (801e86c <SX1276SetRx+0x2fc>)
 801e6ae:	4694      	mov	ip, r2
 801e6b0:	4463      	add	r3, ip
 801e6b2:	0018      	movs	r0, r3
 801e6b4:	f7fe feb6 	bl	801d424 <SX1276SetChannel>
                    break;
 801e6b8:	e05d      	b.n	801e776 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e6ba:	2144      	movs	r1, #68	; 0x44
 801e6bc:	202f      	movs	r0, #47	; 0x2f
 801e6be:	f000 faf9 	bl	801ecb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801e6c2:	4b68      	ldr	r3, [pc, #416]	; (801e864 <SX1276SetRx+0x2f4>)
 801e6c4:	689b      	ldr	r3, [r3, #8]
 801e6c6:	4a6a      	ldr	r2, [pc, #424]	; (801e870 <SX1276SetRx+0x300>)
 801e6c8:	4694      	mov	ip, r2
 801e6ca:	4463      	add	r3, ip
 801e6cc:	0018      	movs	r0, r3
 801e6ce:	f7fe fea9 	bl	801d424 <SX1276SetChannel>
                    break;
 801e6d2:	e050      	b.n	801e776 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e6d4:	2144      	movs	r1, #68	; 0x44
 801e6d6:	202f      	movs	r0, #47	; 0x2f
 801e6d8:	f000 faec 	bl	801ecb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801e6dc:	4b61      	ldr	r3, [pc, #388]	; (801e864 <SX1276SetRx+0x2f4>)
 801e6de:	689b      	ldr	r3, [r3, #8]
 801e6e0:	4a64      	ldr	r2, [pc, #400]	; (801e874 <SX1276SetRx+0x304>)
 801e6e2:	4694      	mov	ip, r2
 801e6e4:	4463      	add	r3, ip
 801e6e6:	0018      	movs	r0, r3
 801e6e8:	f7fe fe9c 	bl	801d424 <SX1276SetChannel>
                    break;
 801e6ec:	e043      	b.n	801e776 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e6ee:	2144      	movs	r1, #68	; 0x44
 801e6f0:	202f      	movs	r0, #47	; 0x2f
 801e6f2:	f000 fadf 	bl	801ecb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801e6f6:	4b5b      	ldr	r3, [pc, #364]	; (801e864 <SX1276SetRx+0x2f4>)
 801e6f8:	689b      	ldr	r3, [r3, #8]
 801e6fa:	4a5f      	ldr	r2, [pc, #380]	; (801e878 <SX1276SetRx+0x308>)
 801e6fc:	4694      	mov	ip, r2
 801e6fe:	4463      	add	r3, ip
 801e700:	0018      	movs	r0, r3
 801e702:	f7fe fe8f 	bl	801d424 <SX1276SetChannel>
                    break;
 801e706:	e036      	b.n	801e776 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e708:	2144      	movs	r1, #68	; 0x44
 801e70a:	202f      	movs	r0, #47	; 0x2f
 801e70c:	f000 fad2 	bl	801ecb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801e710:	4b54      	ldr	r3, [pc, #336]	; (801e864 <SX1276SetRx+0x2f4>)
 801e712:	689b      	ldr	r3, [r3, #8]
 801e714:	4a59      	ldr	r2, [pc, #356]	; (801e87c <SX1276SetRx+0x30c>)
 801e716:	4694      	mov	ip, r2
 801e718:	4463      	add	r3, ip
 801e71a:	0018      	movs	r0, r3
 801e71c:	f7fe fe82 	bl	801d424 <SX1276SetChannel>
                    break;
 801e720:	e029      	b.n	801e776 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e722:	2144      	movs	r1, #68	; 0x44
 801e724:	202f      	movs	r0, #47	; 0x2f
 801e726:	f000 fac5 	bl	801ecb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801e72a:	4b4e      	ldr	r3, [pc, #312]	; (801e864 <SX1276SetRx+0x2f4>)
 801e72c:	689b      	ldr	r3, [r3, #8]
 801e72e:	4a54      	ldr	r2, [pc, #336]	; (801e880 <SX1276SetRx+0x310>)
 801e730:	4694      	mov	ip, r2
 801e732:	4463      	add	r3, ip
 801e734:	0018      	movs	r0, r3
 801e736:	f7fe fe75 	bl	801d424 <SX1276SetChannel>
                    break;
 801e73a:	e01c      	b.n	801e776 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801e73c:	2140      	movs	r1, #64	; 0x40
 801e73e:	202f      	movs	r0, #47	; 0x2f
 801e740:	f000 fab8 	bl	801ecb4 <SX1276Write>
                    break;
 801e744:	e017      	b.n	801e776 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801e746:	2140      	movs	r1, #64	; 0x40
 801e748:	202f      	movs	r0, #47	; 0x2f
 801e74a:	f000 fab3 	bl	801ecb4 <SX1276Write>
                    break;
 801e74e:	e012      	b.n	801e776 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801e750:	2140      	movs	r1, #64	; 0x40
 801e752:	202f      	movs	r0, #47	; 0x2f
 801e754:	f000 faae 	bl	801ecb4 <SX1276Write>
                    break;
 801e758:	46c0      	nop			; (mov r8, r8)
 801e75a:	e00c      	b.n	801e776 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801e75c:	2031      	movs	r0, #49	; 0x31
 801e75e:	f000 fabd 	bl	801ecdc <SX1276Read>
 801e762:	0003      	movs	r3, r0
 801e764:	001a      	movs	r2, r3
 801e766:	2380      	movs	r3, #128	; 0x80
 801e768:	425b      	negs	r3, r3
 801e76a:	4313      	orrs	r3, r2
 801e76c:	b2db      	uxtb	r3, r3
 801e76e:	0019      	movs	r1, r3
 801e770:	2031      	movs	r0, #49	; 0x31
 801e772:	f000 fa9f 	bl	801ecb4 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801e776:	230f      	movs	r3, #15
 801e778:	18fb      	adds	r3, r7, r3
 801e77a:	4a3a      	ldr	r2, [pc, #232]	; (801e864 <SX1276SetRx+0x2f4>)
 801e77c:	2156      	movs	r1, #86	; 0x56
 801e77e:	5c52      	ldrb	r2, [r2, r1]
 801e780:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801e782:	4b38      	ldr	r3, [pc, #224]	; (801e864 <SX1276SetRx+0x2f4>)
 801e784:	2253      	movs	r2, #83	; 0x53
 801e786:	5c9b      	ldrb	r3, [r3, r2]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d010      	beq.n	801e7ae <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801e78c:	211d      	movs	r1, #29
 801e78e:	2011      	movs	r0, #17
 801e790:	f000 fa90 	bl	801ecb4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801e794:	2040      	movs	r0, #64	; 0x40
 801e796:	f000 faa1 	bl	801ecdc <SX1276Read>
 801e79a:	0003      	movs	r3, r0
 801e79c:	001a      	movs	r2, r3
 801e79e:	2333      	movs	r3, #51	; 0x33
 801e7a0:	4013      	ands	r3, r2
 801e7a2:	b2db      	uxtb	r3, r3
 801e7a4:	0019      	movs	r1, r3
 801e7a6:	2040      	movs	r0, #64	; 0x40
 801e7a8:	f000 fa84 	bl	801ecb4 <SX1276Write>
 801e7ac:	e00f      	b.n	801e7ce <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801e7ae:	211f      	movs	r1, #31
 801e7b0:	2011      	movs	r0, #17
 801e7b2:	f000 fa7f 	bl	801ecb4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801e7b6:	2040      	movs	r0, #64	; 0x40
 801e7b8:	f000 fa90 	bl	801ecdc <SX1276Read>
 801e7bc:	0003      	movs	r3, r0
 801e7be:	001a      	movs	r2, r3
 801e7c0:	233f      	movs	r3, #63	; 0x3f
 801e7c2:	4013      	ands	r3, r2
 801e7c4:	b2db      	uxtb	r3, r3
 801e7c6:	0019      	movs	r1, r3
 801e7c8:	2040      	movs	r0, #64	; 0x40
 801e7ca:	f000 fa73 	bl	801ecb4 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801e7ce:	2100      	movs	r1, #0
 801e7d0:	200f      	movs	r0, #15
 801e7d2:	f000 fa6f 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801e7d6:	2100      	movs	r1, #0
 801e7d8:	200d      	movs	r0, #13
 801e7da:	f000 fa6b 	bl	801ecb4 <SX1276Write>
        }
        break;
 801e7de:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801e7e0:	2380      	movs	r3, #128	; 0x80
 801e7e2:	005a      	lsls	r2, r3, #1
 801e7e4:	4b27      	ldr	r3, [pc, #156]	; (801e884 <SX1276SetRx+0x314>)
 801e7e6:	2100      	movs	r1, #0
 801e7e8:	0018      	movs	r0, r3
 801e7ea:	f007 fb8d 	bl	8025f08 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801e7ee:	4b1d      	ldr	r3, [pc, #116]	; (801e864 <SX1276SetRx+0x2f4>)
 801e7f0:	2201      	movs	r2, #1
 801e7f2:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d009      	beq.n	801e80e <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801e7fa:	687a      	ldr	r2, [r7, #4]
 801e7fc:	4b22      	ldr	r3, [pc, #136]	; (801e888 <SX1276SetRx+0x318>)
 801e7fe:	0011      	movs	r1, r2
 801e800:	0018      	movs	r0, r3
 801e802:	f7fe f953 	bl	801caac <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 801e806:	4b20      	ldr	r3, [pc, #128]	; (801e888 <SX1276SetRx+0x318>)
 801e808:	0018      	movs	r0, r3
 801e80a:	f7fe f97b 	bl	801cb04 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801e80e:	4b15      	ldr	r3, [pc, #84]	; (801e864 <SX1276SetRx+0x2f4>)
 801e810:	795b      	ldrb	r3, [r3, #5]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d116      	bne.n	801e844 <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801e816:	2005      	movs	r0, #5
 801e818:	f000 f9a4 	bl	801eb64 <SX1276SetOpMode>

        if( rxContinuous == false )
 801e81c:	230f      	movs	r3, #15
 801e81e:	18fb      	adds	r3, r7, r3
 801e820:	781b      	ldrb	r3, [r3, #0]
 801e822:	2201      	movs	r2, #1
 801e824:	4053      	eors	r3, r2
 801e826:	b2db      	uxtb	r3, r3
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d017      	beq.n	801e85c <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801e82c:	4b0d      	ldr	r3, [pc, #52]	; (801e864 <SX1276SetRx+0x2f4>)
 801e82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e830:	4b16      	ldr	r3, [pc, #88]	; (801e88c <SX1276SetRx+0x31c>)
 801e832:	0011      	movs	r1, r2
 801e834:	0018      	movs	r0, r3
 801e836:	f7fe f939 	bl	801caac <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 801e83a:	4b14      	ldr	r3, [pc, #80]	; (801e88c <SX1276SetRx+0x31c>)
 801e83c:	0018      	movs	r0, r3
 801e83e:	f7fe f961 	bl	801cb04 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801e842:	e00b      	b.n	801e85c <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 801e844:	230f      	movs	r3, #15
 801e846:	18fb      	adds	r3, r7, r3
 801e848:	781b      	ldrb	r3, [r3, #0]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d003      	beq.n	801e856 <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801e84e:	2005      	movs	r0, #5
 801e850:	f000 f988 	bl	801eb64 <SX1276SetOpMode>
}
 801e854:	e002      	b.n	801e85c <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801e856:	2006      	movs	r0, #6
 801e858:	f000 f984 	bl	801eb64 <SX1276SetOpMode>
}
 801e85c:	46c0      	nop			; (mov r8, r8)
 801e85e:	46bd      	mov	sp, r7
 801e860:	b004      	add	sp, #16
 801e862:	bd80      	pop	{r7, pc}
 801e864:	200022bc 	.word	0x200022bc
 801e868:	0802952c 	.word	0x0802952c
 801e86c:	00001e82 	.word	0x00001e82
 801e870:	000028b4 	.word	0x000028b4
 801e874:	00003d04 	.word	0x00003d04
 801e878:	0000515e 	.word	0x0000515e
 801e87c:	00007a12 	.word	0x00007a12
 801e880:	0000a2c6 	.word	0x0000a2c6
 801e884:	20001d8c 	.word	0x20001d8c
 801e888:	20002324 	.word	0x20002324
 801e88c:	200022a4 	.word	0x200022a4

0801e890 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 801e890:	b580      	push	{r7, lr}
 801e892:	b082      	sub	sp, #8
 801e894:	af00      	add	r7, sp, #0
 801e896:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 801e898:	687a      	ldr	r2, [r7, #4]
 801e89a:	4b38      	ldr	r3, [pc, #224]	; (801e97c <SX1276SetTx+0xec>)
 801e89c:	0011      	movs	r1, r2
 801e89e:	0018      	movs	r0, r3
 801e8a0:	f7fe f904 	bl	801caac <TimerSetValue>

    switch( SX1276.Settings.Modem )
 801e8a4:	4b36      	ldr	r3, [pc, #216]	; (801e980 <SX1276SetTx+0xf0>)
 801e8a6:	795b      	ldrb	r3, [r3, #5]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d002      	beq.n	801e8b2 <SX1276SetTx+0x22>
 801e8ac:	2b01      	cmp	r3, #1
 801e8ae:	d028      	beq.n	801e902 <SX1276SetTx+0x72>
 801e8b0:	e056      	b.n	801e960 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e8b2:	2040      	movs	r0, #64	; 0x40
 801e8b4:	f000 fa12 	bl	801ecdc <SX1276Read>
 801e8b8:	0003      	movs	r3, r0
 801e8ba:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 801e8bc:	2203      	movs	r2, #3
 801e8be:	4013      	ands	r3, r2
 801e8c0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 801e8c2:	2210      	movs	r2, #16
 801e8c4:	4313      	orrs	r3, r2
 801e8c6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e8c8:	b2db      	uxtb	r3, r3
 801e8ca:	0019      	movs	r1, r3
 801e8cc:	2040      	movs	r0, #64	; 0x40
 801e8ce:	f000 f9f1 	bl	801ecb4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801e8d2:	2041      	movs	r0, #65	; 0x41
 801e8d4:	f000 fa02 	bl	801ecdc <SX1276Read>
 801e8d8:	0003      	movs	r3, r0
 801e8da:	001a      	movs	r2, r3
 801e8dc:	233e      	movs	r3, #62	; 0x3e
 801e8de:	4013      	ands	r3, r2
 801e8e0:	b2db      	uxtb	r3, r3
 801e8e2:	0019      	movs	r1, r3
 801e8e4:	2041      	movs	r0, #65	; 0x41
 801e8e6:	f000 f9e5 	bl	801ecb4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801e8ea:	2035      	movs	r0, #53	; 0x35
 801e8ec:	f000 f9f6 	bl	801ecdc <SX1276Read>
 801e8f0:	0003      	movs	r3, r0
 801e8f2:	001a      	movs	r2, r3
 801e8f4:	233f      	movs	r3, #63	; 0x3f
 801e8f6:	4013      	ands	r3, r2
 801e8f8:	b2d9      	uxtb	r1, r3
 801e8fa:	4b21      	ldr	r3, [pc, #132]	; (801e980 <SX1276SetTx+0xf0>)
 801e8fc:	223e      	movs	r2, #62	; 0x3e
 801e8fe:	5499      	strb	r1, [r3, r2]
        }
        break;
 801e900:	e02e      	b.n	801e960 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801e902:	4b1f      	ldr	r3, [pc, #124]	; (801e980 <SX1276SetTx+0xf0>)
 801e904:	2253      	movs	r2, #83	; 0x53
 801e906:	5c9b      	ldrb	r3, [r3, r2]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d014      	beq.n	801e936 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801e90c:	21f5      	movs	r1, #245	; 0xf5
 801e90e:	2011      	movs	r0, #17
 801e910:	f000 f9d0 	bl	801ecb4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801e914:	2040      	movs	r0, #64	; 0x40
 801e916:	f000 f9e1 	bl	801ecdc <SX1276Read>
 801e91a:	0003      	movs	r3, r0
 801e91c:	b25b      	sxtb	r3, r3
 801e91e:	2233      	movs	r2, #51	; 0x33
 801e920:	4013      	ands	r3, r2
 801e922:	b25b      	sxtb	r3, r3
 801e924:	2240      	movs	r2, #64	; 0x40
 801e926:	4313      	orrs	r3, r2
 801e928:	b25b      	sxtb	r3, r3
 801e92a:	b2db      	uxtb	r3, r3
 801e92c:	0019      	movs	r1, r3
 801e92e:	2040      	movs	r0, #64	; 0x40
 801e930:	f000 f9c0 	bl	801ecb4 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801e934:	e013      	b.n	801e95e <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801e936:	21f7      	movs	r1, #247	; 0xf7
 801e938:	2011      	movs	r0, #17
 801e93a:	f000 f9bb 	bl	801ecb4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801e93e:	2040      	movs	r0, #64	; 0x40
 801e940:	f000 f9cc 	bl	801ecdc <SX1276Read>
 801e944:	0003      	movs	r3, r0
 801e946:	b25b      	sxtb	r3, r3
 801e948:	223f      	movs	r2, #63	; 0x3f
 801e94a:	4013      	ands	r3, r2
 801e94c:	b25b      	sxtb	r3, r3
 801e94e:	2240      	movs	r2, #64	; 0x40
 801e950:	4313      	orrs	r3, r2
 801e952:	b25b      	sxtb	r3, r3
 801e954:	b2db      	uxtb	r3, r3
 801e956:	0019      	movs	r1, r3
 801e958:	2040      	movs	r0, #64	; 0x40
 801e95a:	f000 f9ab 	bl	801ecb4 <SX1276Write>
        break;
 801e95e:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801e960:	4b07      	ldr	r3, [pc, #28]	; (801e980 <SX1276SetTx+0xf0>)
 801e962:	2202      	movs	r2, #2
 801e964:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801e966:	4b05      	ldr	r3, [pc, #20]	; (801e97c <SX1276SetTx+0xec>)
 801e968:	0018      	movs	r0, r3
 801e96a:	f7fe f8cb 	bl	801cb04 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801e96e:	2003      	movs	r0, #3
 801e970:	f000 f8f8 	bl	801eb64 <SX1276SetOpMode>
}
 801e974:	46c0      	nop			; (mov r8, r8)
 801e976:	46bd      	mov	sp, r7
 801e978:	b002      	add	sp, #8
 801e97a:	bd80      	pop	{r7, pc}
 801e97c:	2000228c 	.word	0x2000228c
 801e980:	200022bc 	.word	0x200022bc

0801e984 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801e984:	b580      	push	{r7, lr}
 801e986:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 801e988:	4b11      	ldr	r3, [pc, #68]	; (801e9d0 <SX1276StartCad+0x4c>)
 801e98a:	795b      	ldrb	r3, [r3, #5]
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d01a      	beq.n	801e9c6 <SX1276StartCad+0x42>
 801e990:	2b01      	cmp	r3, #1
 801e992:	d000      	beq.n	801e996 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801e994:	e018      	b.n	801e9c8 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801e996:	21fa      	movs	r1, #250	; 0xfa
 801e998:	2011      	movs	r0, #17
 801e99a:	f000 f98b 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801e99e:	2040      	movs	r0, #64	; 0x40
 801e9a0:	f000 f99c 	bl	801ecdc <SX1276Read>
 801e9a4:	0003      	movs	r3, r0
 801e9a6:	001a      	movs	r2, r3
 801e9a8:	2303      	movs	r3, #3
 801e9aa:	439a      	bics	r2, r3
 801e9ac:	0013      	movs	r3, r2
 801e9ae:	b2db      	uxtb	r3, r3
 801e9b0:	0019      	movs	r1, r3
 801e9b2:	2040      	movs	r0, #64	; 0x40
 801e9b4:	f000 f97e 	bl	801ecb4 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801e9b8:	4b05      	ldr	r3, [pc, #20]	; (801e9d0 <SX1276StartCad+0x4c>)
 801e9ba:	2203      	movs	r2, #3
 801e9bc:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801e9be:	2007      	movs	r0, #7
 801e9c0:	f000 f8d0 	bl	801eb64 <SX1276SetOpMode>
        break;
 801e9c4:	e000      	b.n	801e9c8 <SX1276StartCad+0x44>
        break;
 801e9c6:	46c0      	nop			; (mov r8, r8)
    }
}
 801e9c8:	46c0      	nop			; (mov r8, r8)
 801e9ca:	46bd      	mov	sp, r7
 801e9cc:	bd80      	pop	{r7, pc}
 801e9ce:	46c0      	nop			; (mov r8, r8)
 801e9d0:	200022bc 	.word	0x200022bc

0801e9d4 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801e9d4:	b580      	push	{r7, lr}
 801e9d6:	b08e      	sub	sp, #56	; 0x38
 801e9d8:	af0a      	add	r7, sp, #40	; 0x28
 801e9da:	6078      	str	r0, [r7, #4]
 801e9dc:	0008      	movs	r0, r1
 801e9de:	0011      	movs	r1, r2
 801e9e0:	1cfb      	adds	r3, r7, #3
 801e9e2:	1c02      	adds	r2, r0, #0
 801e9e4:	701a      	strb	r2, [r3, #0]
 801e9e6:	003b      	movs	r3, r7
 801e9e8:	1c0a      	adds	r2, r1, #0
 801e9ea:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 801e9ec:	003b      	movs	r3, r7
 801e9ee:	881a      	ldrh	r2, [r3, #0]
 801e9f0:	0013      	movs	r3, r2
 801e9f2:	015b      	lsls	r3, r3, #5
 801e9f4:	1a9b      	subs	r3, r3, r2
 801e9f6:	009b      	lsls	r3, r3, #2
 801e9f8:	189b      	adds	r3, r3, r2
 801e9fa:	00db      	lsls	r3, r3, #3
 801e9fc:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	0018      	movs	r0, r3
 801ea02:	f7fe fd0f 	bl	801d424 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801ea06:	1cfb      	adds	r3, r7, #3
 801ea08:	2100      	movs	r1, #0
 801ea0a:	5659      	ldrsb	r1, [r3, r1]
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	9308      	str	r3, [sp, #32]
 801ea10:	2300      	movs	r3, #0
 801ea12:	9307      	str	r3, [sp, #28]
 801ea14:	2300      	movs	r3, #0
 801ea16:	9306      	str	r3, [sp, #24]
 801ea18:	2300      	movs	r3, #0
 801ea1a:	9305      	str	r3, [sp, #20]
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	9304      	str	r3, [sp, #16]
 801ea20:	2300      	movs	r3, #0
 801ea22:	9303      	str	r3, [sp, #12]
 801ea24:	2305      	movs	r3, #5
 801ea26:	9302      	str	r3, [sp, #8]
 801ea28:	2300      	movs	r3, #0
 801ea2a:	9301      	str	r3, [sp, #4]
 801ea2c:	2396      	movs	r3, #150	; 0x96
 801ea2e:	015b      	lsls	r3, r3, #5
 801ea30:	9300      	str	r3, [sp, #0]
 801ea32:	2300      	movs	r3, #0
 801ea34:	2200      	movs	r2, #0
 801ea36:	2000      	movs	r0, #0
 801ea38:	f7ff f914 	bl	801dc64 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801ea3c:	2031      	movs	r0, #49	; 0x31
 801ea3e:	f000 f94d 	bl	801ecdc <SX1276Read>
 801ea42:	0003      	movs	r3, r0
 801ea44:	001a      	movs	r2, r3
 801ea46:	2340      	movs	r3, #64	; 0x40
 801ea48:	439a      	bics	r2, r3
 801ea4a:	0013      	movs	r3, r2
 801ea4c:	b2db      	uxtb	r3, r3
 801ea4e:	0019      	movs	r1, r3
 801ea50:	2031      	movs	r0, #49	; 0x31
 801ea52:	f000 f92f 	bl	801ecb4 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ea56:	21f0      	movs	r1, #240	; 0xf0
 801ea58:	2040      	movs	r0, #64	; 0x40
 801ea5a:	f000 f92b 	bl	801ecb4 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ea5e:	21a0      	movs	r1, #160	; 0xa0
 801ea60:	2041      	movs	r0, #65	; 0x41
 801ea62:	f000 f927 	bl	801ecb4 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ea66:	68fa      	ldr	r2, [r7, #12]
 801ea68:	4b09      	ldr	r3, [pc, #36]	; (801ea90 <SX1276SetTxContinuousWave+0xbc>)
 801ea6a:	0011      	movs	r1, r2
 801ea6c:	0018      	movs	r0, r3
 801ea6e:	f7fe f81d 	bl	801caac <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ea72:	4b08      	ldr	r3, [pc, #32]	; (801ea94 <SX1276SetTxContinuousWave+0xc0>)
 801ea74:	2202      	movs	r2, #2
 801ea76:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ea78:	4b05      	ldr	r3, [pc, #20]	; (801ea90 <SX1276SetTxContinuousWave+0xbc>)
 801ea7a:	0018      	movs	r0, r3
 801ea7c:	f7fe f842 	bl	801cb04 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ea80:	2003      	movs	r0, #3
 801ea82:	f000 f86f 	bl	801eb64 <SX1276SetOpMode>
}
 801ea86:	46c0      	nop			; (mov r8, r8)
 801ea88:	46bd      	mov	sp, r7
 801ea8a:	b004      	add	sp, #16
 801ea8c:	bd80      	pop	{r7, pc}
 801ea8e:	46c0      	nop			; (mov r8, r8)
 801ea90:	2000228c 	.word	0x2000228c
 801ea94:	200022bc 	.word	0x200022bc

0801ea98 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	b084      	sub	sp, #16
 801ea9c:	af00      	add	r7, sp, #0
 801ea9e:	0002      	movs	r2, r0
 801eaa0:	1dfb      	adds	r3, r7, #7
 801eaa2:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 801eaa4:	230e      	movs	r3, #14
 801eaa6:	18fb      	adds	r3, r7, r3
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801eaac:	1dfb      	adds	r3, r7, #7
 801eaae:	781b      	ldrb	r3, [r3, #0]
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	d002      	beq.n	801eaba <SX1276ReadRssi+0x22>
 801eab4:	2b01      	cmp	r3, #1
 801eab6:	d00d      	beq.n	801ead4 <SX1276ReadRssi+0x3c>
 801eab8:	e027      	b.n	801eb0a <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801eaba:	2011      	movs	r0, #17
 801eabc:	f000 f90e 	bl	801ecdc <SX1276Read>
 801eac0:	0003      	movs	r3, r0
 801eac2:	085b      	lsrs	r3, r3, #1
 801eac4:	b2db      	uxtb	r3, r3
 801eac6:	b29b      	uxth	r3, r3
 801eac8:	425b      	negs	r3, r3
 801eaca:	b29a      	uxth	r2, r3
 801eacc:	230e      	movs	r3, #14
 801eace:	18fb      	adds	r3, r7, r3
 801ead0:	801a      	strh	r2, [r3, #0]
        break;
 801ead2:	e020      	b.n	801eb16 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801ead4:	4b14      	ldr	r3, [pc, #80]	; (801eb28 <SX1276ReadRssi+0x90>)
 801ead6:	689b      	ldr	r3, [r3, #8]
 801ead8:	4a14      	ldr	r2, [pc, #80]	; (801eb2c <SX1276ReadRssi+0x94>)
 801eada:	4293      	cmp	r3, r2
 801eadc:	d90a      	bls.n	801eaf4 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801eade:	201b      	movs	r0, #27
 801eae0:	f000 f8fc 	bl	801ecdc <SX1276Read>
 801eae4:	0003      	movs	r3, r0
 801eae6:	b29b      	uxth	r3, r3
 801eae8:	3b9d      	subs	r3, #157	; 0x9d
 801eaea:	b29a      	uxth	r2, r3
 801eaec:	230e      	movs	r3, #14
 801eaee:	18fb      	adds	r3, r7, r3
 801eaf0:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801eaf2:	e010      	b.n	801eb16 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801eaf4:	201b      	movs	r0, #27
 801eaf6:	f000 f8f1 	bl	801ecdc <SX1276Read>
 801eafa:	0003      	movs	r3, r0
 801eafc:	b29b      	uxth	r3, r3
 801eafe:	3ba4      	subs	r3, #164	; 0xa4
 801eb00:	b29a      	uxth	r2, r3
 801eb02:	230e      	movs	r3, #14
 801eb04:	18fb      	adds	r3, r7, r3
 801eb06:	801a      	strh	r2, [r3, #0]
        break;
 801eb08:	e005      	b.n	801eb16 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801eb0a:	230e      	movs	r3, #14
 801eb0c:	18fb      	adds	r3, r7, r3
 801eb0e:	2201      	movs	r2, #1
 801eb10:	4252      	negs	r2, r2
 801eb12:	801a      	strh	r2, [r3, #0]
        break;
 801eb14:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801eb16:	230e      	movs	r3, #14
 801eb18:	18fb      	adds	r3, r7, r3
 801eb1a:	2200      	movs	r2, #0
 801eb1c:	5e9b      	ldrsh	r3, [r3, r2]
}
 801eb1e:	0018      	movs	r0, r3
 801eb20:	46bd      	mov	sp, r7
 801eb22:	b004      	add	sp, #16
 801eb24:	bd80      	pop	{r7, pc}
 801eb26:	46c0      	nop			; (mov r8, r8)
 801eb28:	200022bc 	.word	0x200022bc
 801eb2c:	1f4add40 	.word	0x1f4add40

0801eb30 <SX1276Reset>:

void SX1276Reset( void )
{
 801eb30:	b580      	push	{r7, lr}
 801eb32:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 801eb34:	2200      	movs	r2, #0
 801eb36:	2101      	movs	r1, #1
 801eb38:	2002      	movs	r0, #2
 801eb3a:	f005 ff15 	bl	8024968 <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 801eb3e:	2101      	movs	r1, #1
 801eb40:	2002      	movs	r0, #2
 801eb42:	f006 f931 	bl	8024da8 <gpio_reset>
	itsdk_delayMs(2);
 801eb46:	2002      	movs	r0, #2
 801eb48:	f006 fa72 	bl	8025030 <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 801eb4c:	2204      	movs	r2, #4
 801eb4e:	2101      	movs	r1, #1
 801eb50:	2002      	movs	r0, #2
 801eb52:	f005 ff09 	bl	8024968 <gpio_configure>
	itsdk_delayMs(10);
 801eb56:	200a      	movs	r0, #10
 801eb58:	f006 fa6a 	bl	8025030 <itsdk_delayMs>
}
 801eb5c:	46c0      	nop			; (mov r8, r8)
 801eb5e:	46bd      	mov	sp, r7
 801eb60:	bd80      	pop	{r7, pc}
	...

0801eb64 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 801eb64:	b580      	push	{r7, lr}
 801eb66:	b082      	sub	sp, #8
 801eb68:	af00      	add	r7, sp, #0
 801eb6a:	0002      	movs	r2, r0
 801eb6c:	1dfb      	adds	r3, r7, #7
 801eb6e:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 801eb70:	1dfb      	adds	r3, r7, #7
 801eb72:	781b      	ldrb	r3, [r3, #0]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d11c      	bne.n	801ebb2 <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801eb78:	2001      	movs	r0, #1
 801eb7a:	f000 f8af 	bl	801ecdc <SX1276Read>
 801eb7e:	0003      	movs	r3, r0
 801eb80:	b25b      	sxtb	r3, r3
 801eb82:	2207      	movs	r2, #7
 801eb84:	4393      	bics	r3, r2
 801eb86:	b25a      	sxtb	r2, r3
 801eb88:	1dfb      	adds	r3, r7, #7
 801eb8a:	781b      	ldrb	r3, [r3, #0]
 801eb8c:	b25b      	sxtb	r3, r3
 801eb8e:	4313      	orrs	r3, r2
 801eb90:	b25b      	sxtb	r3, r3
 801eb92:	b2db      	uxtb	r3, r3
 801eb94:	0019      	movs	r1, r3
 801eb96:	2001      	movs	r0, #1
 801eb98:	f000 f88c 	bl	801ecb4 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 801eb9c:	4b18      	ldr	r3, [pc, #96]	; (801ec00 <SX1276SetOpMode+0x9c>)
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	691b      	ldr	r3, [r3, #16]
 801eba2:	2001      	movs	r0, #1
 801eba4:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 801eba6:	4b16      	ldr	r3, [pc, #88]	; (801ec00 <SX1276SetOpMode+0x9c>)
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	2000      	movs	r0, #0
 801ebae:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801ebb0:	e022      	b.n	801ebf8 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 801ebb2:	4b13      	ldr	r3, [pc, #76]	; (801ec00 <SX1276SetOpMode+0x9c>)
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	2001      	movs	r0, #1
 801ebba:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 801ebbc:	4b10      	ldr	r3, [pc, #64]	; (801ec00 <SX1276SetOpMode+0x9c>)
 801ebbe:	681b      	ldr	r3, [r3, #0]
 801ebc0:	691b      	ldr	r3, [r3, #16]
 801ebc2:	2000      	movs	r0, #0
 801ebc4:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 801ebc6:	4b0e      	ldr	r3, [pc, #56]	; (801ec00 <SX1276SetOpMode+0x9c>)
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	695b      	ldr	r3, [r3, #20]
 801ebcc:	1dfa      	adds	r2, r7, #7
 801ebce:	7812      	ldrb	r2, [r2, #0]
 801ebd0:	0010      	movs	r0, r2
 801ebd2:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ebd4:	2001      	movs	r0, #1
 801ebd6:	f000 f881 	bl	801ecdc <SX1276Read>
 801ebda:	0003      	movs	r3, r0
 801ebdc:	b25b      	sxtb	r3, r3
 801ebde:	2207      	movs	r2, #7
 801ebe0:	4393      	bics	r3, r2
 801ebe2:	b25a      	sxtb	r2, r3
 801ebe4:	1dfb      	adds	r3, r7, #7
 801ebe6:	781b      	ldrb	r3, [r3, #0]
 801ebe8:	b25b      	sxtb	r3, r3
 801ebea:	4313      	orrs	r3, r2
 801ebec:	b25b      	sxtb	r3, r3
 801ebee:	b2db      	uxtb	r3, r3
 801ebf0:	0019      	movs	r1, r3
 801ebf2:	2001      	movs	r0, #1
 801ebf4:	f000 f85e 	bl	801ecb4 <SX1276Write>
}
 801ebf8:	46c0      	nop			; (mov r8, r8)
 801ebfa:	46bd      	mov	sp, r7
 801ebfc:	b002      	add	sp, #8
 801ebfe:	bd80      	pop	{r7, pc}
 801ec00:	20001e8c 	.word	0x20001e8c

0801ec04 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801ec04:	b580      	push	{r7, lr}
 801ec06:	b082      	sub	sp, #8
 801ec08:	af00      	add	r7, sp, #0
 801ec0a:	0002      	movs	r2, r0
 801ec0c:	1dfb      	adds	r3, r7, #7
 801ec0e:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801ec10:	2001      	movs	r0, #1
 801ec12:	f000 f863 	bl	801ecdc <SX1276Read>
 801ec16:	0003      	movs	r3, r0
 801ec18:	b25b      	sxtb	r3, r3
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	da03      	bge.n	801ec26 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801ec1e:	4b24      	ldr	r3, [pc, #144]	; (801ecb0 <SX1276SetModem+0xac>)
 801ec20:	2201      	movs	r2, #1
 801ec22:	715a      	strb	r2, [r3, #5]
 801ec24:	e002      	b.n	801ec2c <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801ec26:	4b22      	ldr	r3, [pc, #136]	; (801ecb0 <SX1276SetModem+0xac>)
 801ec28:	2200      	movs	r2, #0
 801ec2a:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801ec2c:	4b20      	ldr	r3, [pc, #128]	; (801ecb0 <SX1276SetModem+0xac>)
 801ec2e:	795b      	ldrb	r3, [r3, #5]
 801ec30:	1dfa      	adds	r2, r7, #7
 801ec32:	7812      	ldrb	r2, [r2, #0]
 801ec34:	429a      	cmp	r2, r3
 801ec36:	d037      	beq.n	801eca8 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801ec38:	4b1d      	ldr	r3, [pc, #116]	; (801ecb0 <SX1276SetModem+0xac>)
 801ec3a:	1dfa      	adds	r2, r7, #7
 801ec3c:	7812      	ldrb	r2, [r2, #0]
 801ec3e:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801ec40:	4b1b      	ldr	r3, [pc, #108]	; (801ecb0 <SX1276SetModem+0xac>)
 801ec42:	795b      	ldrb	r3, [r3, #5]
 801ec44:	2b01      	cmp	r3, #1
 801ec46:	d016      	beq.n	801ec76 <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 801ec48:	f7ff fc5e 	bl	801e508 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801ec4c:	2001      	movs	r0, #1
 801ec4e:	f000 f845 	bl	801ecdc <SX1276Read>
 801ec52:	0003      	movs	r3, r0
 801ec54:	001a      	movs	r2, r3
 801ec56:	237f      	movs	r3, #127	; 0x7f
 801ec58:	4013      	ands	r3, r2
 801ec5a:	b2db      	uxtb	r3, r3
 801ec5c:	0019      	movs	r1, r3
 801ec5e:	2001      	movs	r0, #1
 801ec60:	f000 f828 	bl	801ecb4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ec64:	2100      	movs	r1, #0
 801ec66:	2040      	movs	r0, #64	; 0x40
 801ec68:	f000 f824 	bl	801ecb4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801ec6c:	2130      	movs	r1, #48	; 0x30
 801ec6e:	2041      	movs	r0, #65	; 0x41
 801ec70:	f000 f820 	bl	801ecb4 <SX1276Write>
        break;
 801ec74:	e019      	b.n	801ecaa <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 801ec76:	f7ff fc47 	bl	801e508 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801ec7a:	2001      	movs	r0, #1
 801ec7c:	f000 f82e 	bl	801ecdc <SX1276Read>
 801ec80:	0003      	movs	r3, r0
 801ec82:	001a      	movs	r2, r3
 801ec84:	2380      	movs	r3, #128	; 0x80
 801ec86:	425b      	negs	r3, r3
 801ec88:	4313      	orrs	r3, r2
 801ec8a:	b2db      	uxtb	r3, r3
 801ec8c:	0019      	movs	r1, r3
 801ec8e:	2001      	movs	r0, #1
 801ec90:	f000 f810 	bl	801ecb4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ec94:	2100      	movs	r1, #0
 801ec96:	2040      	movs	r0, #64	; 0x40
 801ec98:	f000 f80c 	bl	801ecb4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801ec9c:	2100      	movs	r1, #0
 801ec9e:	2041      	movs	r0, #65	; 0x41
 801eca0:	f000 f808 	bl	801ecb4 <SX1276Write>
        break;
 801eca4:	46c0      	nop			; (mov r8, r8)
 801eca6:	e000      	b.n	801ecaa <SX1276SetModem+0xa6>
        return;
 801eca8:	46c0      	nop			; (mov r8, r8)
    }
}
 801ecaa:	46bd      	mov	sp, r7
 801ecac:	b002      	add	sp, #8
 801ecae:	bd80      	pop	{r7, pc}
 801ecb0:	200022bc 	.word	0x200022bc

0801ecb4 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 801ecb4:	b580      	push	{r7, lr}
 801ecb6:	b082      	sub	sp, #8
 801ecb8:	af00      	add	r7, sp, #0
 801ecba:	0002      	movs	r2, r0
 801ecbc:	1dbb      	adds	r3, r7, #6
 801ecbe:	801a      	strh	r2, [r3, #0]
 801ecc0:	1d7b      	adds	r3, r7, #5
 801ecc2:	1c0a      	adds	r2, r1, #0
 801ecc4:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 801ecc6:	1d79      	adds	r1, r7, #5
 801ecc8:	1dbb      	adds	r3, r7, #6
 801ecca:	881b      	ldrh	r3, [r3, #0]
 801eccc:	2201      	movs	r2, #1
 801ecce:	0018      	movs	r0, r3
 801ecd0:	f000 f818 	bl	801ed04 <SX1276WriteBuffer>
}
 801ecd4:	46c0      	nop			; (mov r8, r8)
 801ecd6:	46bd      	mov	sp, r7
 801ecd8:	b002      	add	sp, #8
 801ecda:	bd80      	pop	{r7, pc}

0801ecdc <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 801ecdc:	b590      	push	{r4, r7, lr}
 801ecde:	b085      	sub	sp, #20
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	0002      	movs	r2, r0
 801ece4:	1dbb      	adds	r3, r7, #6
 801ece6:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801ece8:	240f      	movs	r4, #15
 801ecea:	1939      	adds	r1, r7, r4
 801ecec:	1dbb      	adds	r3, r7, #6
 801ecee:	881b      	ldrh	r3, [r3, #0]
 801ecf0:	2201      	movs	r2, #1
 801ecf2:	0018      	movs	r0, r3
 801ecf4:	f000 f854 	bl	801eda0 <SX1276ReadBuffer>
    return data;
 801ecf8:	193b      	adds	r3, r7, r4
 801ecfa:	781b      	ldrb	r3, [r3, #0]
}
 801ecfc:	0018      	movs	r0, r3
 801ecfe:	46bd      	mov	sp, r7
 801ed00:	b005      	add	sp, #20
 801ed02:	bd90      	pop	{r4, r7, pc}

0801ed04 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801ed04:	b590      	push	{r4, r7, lr}
 801ed06:	b085      	sub	sp, #20
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6039      	str	r1, [r7, #0]
 801ed0c:	0011      	movs	r1, r2
 801ed0e:	1dbb      	adds	r3, r7, #6
 801ed10:	1c02      	adds	r2, r0, #0
 801ed12:	801a      	strh	r2, [r3, #0]
 801ed14:	1d7b      	adds	r3, r7, #5
 801ed16:	1c0a      	adds	r2, r1, #0
 801ed18:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801ed1a:	2380      	movs	r3, #128	; 0x80
 801ed1c:	021b      	lsls	r3, r3, #8
 801ed1e:	0019      	movs	r1, r3
 801ed20:	2000      	movs	r0, #0
 801ed22:	f006 f841 	bl	8024da8 <gpio_reset>

	uint16_t tx = addr | 0x80;
 801ed26:	1dbb      	adds	r3, r7, #6
 801ed28:	881b      	ldrh	r3, [r3, #0]
 801ed2a:	2280      	movs	r2, #128	; 0x80
 801ed2c:	4313      	orrs	r3, r2
 801ed2e:	b29a      	uxth	r2, r3
 801ed30:	210c      	movs	r1, #12
 801ed32:	187b      	adds	r3, r7, r1
 801ed34:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801ed36:	230a      	movs	r3, #10
 801ed38:	18fa      	adds	r2, r7, r3
 801ed3a:	1879      	adds	r1, r7, r1
 801ed3c:	4817      	ldr	r0, [pc, #92]	; (801ed9c <SX1276WriteBuffer+0x98>)
 801ed3e:	2301      	movs	r3, #1
 801ed40:	f007 f87c 	bl	8025e3c <spi_rwRegister>
    for( i = 0; i < size; i++ )
 801ed44:	230f      	movs	r3, #15
 801ed46:	18fb      	adds	r3, r7, r3
 801ed48:	2200      	movs	r2, #0
 801ed4a:	701a      	strb	r2, [r3, #0]
 801ed4c:	e015      	b.n	801ed7a <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 801ed4e:	240f      	movs	r4, #15
 801ed50:	193b      	adds	r3, r7, r4
 801ed52:	781b      	ldrb	r3, [r3, #0]
 801ed54:	683a      	ldr	r2, [r7, #0]
 801ed56:	18d3      	adds	r3, r2, r3
 801ed58:	781b      	ldrb	r3, [r3, #0]
 801ed5a:	b29a      	uxth	r2, r3
 801ed5c:	210c      	movs	r1, #12
 801ed5e:	187b      	adds	r3, r7, r1
 801ed60:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801ed62:	230a      	movs	r3, #10
 801ed64:	18fa      	adds	r2, r7, r3
 801ed66:	1879      	adds	r1, r7, r1
 801ed68:	480c      	ldr	r0, [pc, #48]	; (801ed9c <SX1276WriteBuffer+0x98>)
 801ed6a:	2301      	movs	r3, #1
 801ed6c:	f007 f866 	bl	8025e3c <spi_rwRegister>
    for( i = 0; i < size; i++ )
 801ed70:	193b      	adds	r3, r7, r4
 801ed72:	781a      	ldrb	r2, [r3, #0]
 801ed74:	193b      	adds	r3, r7, r4
 801ed76:	3201      	adds	r2, #1
 801ed78:	701a      	strb	r2, [r3, #0]
 801ed7a:	230f      	movs	r3, #15
 801ed7c:	18fa      	adds	r2, r7, r3
 801ed7e:	1d7b      	adds	r3, r7, #5
 801ed80:	7812      	ldrb	r2, [r2, #0]
 801ed82:	781b      	ldrb	r3, [r3, #0]
 801ed84:	429a      	cmp	r2, r3
 801ed86:	d3e2      	bcc.n	801ed4e <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801ed88:	2380      	movs	r3, #128	; 0x80
 801ed8a:	021b      	lsls	r3, r3, #8
 801ed8c:	0019      	movs	r1, r3
 801ed8e:	2000      	movs	r0, #0
 801ed90:	f005 fff2 	bl	8024d78 <gpio_set>
}
 801ed94:	46c0      	nop			; (mov r8, r8)
 801ed96:	46bd      	mov	sp, r7
 801ed98:	b005      	add	sp, #20
 801ed9a:	bd90      	pop	{r4, r7, pc}
 801ed9c:	20002120 	.word	0x20002120

0801eda0 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801eda0:	b590      	push	{r4, r7, lr}
 801eda2:	b085      	sub	sp, #20
 801eda4:	af00      	add	r7, sp, #0
 801eda6:	6039      	str	r1, [r7, #0]
 801eda8:	0011      	movs	r1, r2
 801edaa:	1dbb      	adds	r3, r7, #6
 801edac:	1c02      	adds	r2, r0, #0
 801edae:	801a      	strh	r2, [r3, #0]
 801edb0:	1d7b      	adds	r3, r7, #5
 801edb2:	1c0a      	adds	r2, r1, #0
 801edb4:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801edb6:	2380      	movs	r3, #128	; 0x80
 801edb8:	021b      	lsls	r3, r3, #8
 801edba:	0019      	movs	r1, r3
 801edbc:	2000      	movs	r0, #0
 801edbe:	f005 fff3 	bl	8024da8 <gpio_reset>

	uint16_t tx = addr & 0x7f;
 801edc2:	1dbb      	adds	r3, r7, #6
 801edc4:	881b      	ldrh	r3, [r3, #0]
 801edc6:	227f      	movs	r2, #127	; 0x7f
 801edc8:	4013      	ands	r3, r2
 801edca:	b29a      	uxth	r2, r3
 801edcc:	210c      	movs	r1, #12
 801edce:	187b      	adds	r3, r7, r1
 801edd0:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801edd2:	230a      	movs	r3, #10
 801edd4:	18fa      	adds	r2, r7, r3
 801edd6:	000c      	movs	r4, r1
 801edd8:	1879      	adds	r1, r7, r1
 801edda:	481a      	ldr	r0, [pc, #104]	; (801ee44 <SX1276ReadBuffer+0xa4>)
 801eddc:	2301      	movs	r3, #1
 801edde:	f007 f82d 	bl	8025e3c <spi_rwRegister>

	tx = 0;
 801ede2:	0021      	movs	r1, r4
 801ede4:	187b      	adds	r3, r7, r1
 801ede6:	2200      	movs	r2, #0
 801ede8:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801edea:	230f      	movs	r3, #15
 801edec:	18fb      	adds	r3, r7, r3
 801edee:	2200      	movs	r2, #0
 801edf0:	701a      	strb	r2, [r3, #0]
 801edf2:	e015      	b.n	801ee20 <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801edf4:	240a      	movs	r4, #10
 801edf6:	193a      	adds	r2, r7, r4
 801edf8:	230c      	movs	r3, #12
 801edfa:	18f9      	adds	r1, r7, r3
 801edfc:	4811      	ldr	r0, [pc, #68]	; (801ee44 <SX1276ReadBuffer+0xa4>)
 801edfe:	2301      	movs	r3, #1
 801ee00:	f007 f81c 	bl	8025e3c <spi_rwRegister>
    	buffer[i] = rx;
 801ee04:	193b      	adds	r3, r7, r4
 801ee06:	8819      	ldrh	r1, [r3, #0]
 801ee08:	200f      	movs	r0, #15
 801ee0a:	183b      	adds	r3, r7, r0
 801ee0c:	781b      	ldrb	r3, [r3, #0]
 801ee0e:	683a      	ldr	r2, [r7, #0]
 801ee10:	18d3      	adds	r3, r2, r3
 801ee12:	b2ca      	uxtb	r2, r1
 801ee14:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801ee16:	183b      	adds	r3, r7, r0
 801ee18:	781a      	ldrb	r2, [r3, #0]
 801ee1a:	183b      	adds	r3, r7, r0
 801ee1c:	3201      	adds	r2, #1
 801ee1e:	701a      	strb	r2, [r3, #0]
 801ee20:	230f      	movs	r3, #15
 801ee22:	18fa      	adds	r2, r7, r3
 801ee24:	1d7b      	adds	r3, r7, #5
 801ee26:	7812      	ldrb	r2, [r2, #0]
 801ee28:	781b      	ldrb	r3, [r3, #0]
 801ee2a:	429a      	cmp	r2, r3
 801ee2c:	d3e2      	bcc.n	801edf4 <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801ee2e:	2380      	movs	r3, #128	; 0x80
 801ee30:	021b      	lsls	r3, r3, #8
 801ee32:	0019      	movs	r1, r3
 801ee34:	2000      	movs	r0, #0
 801ee36:	f005 ff9f 	bl	8024d78 <gpio_set>
}
 801ee3a:	46c0      	nop			; (mov r8, r8)
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	b005      	add	sp, #20
 801ee40:	bd90      	pop	{r4, r7, pc}
 801ee42:	46c0      	nop			; (mov r8, r8)
 801ee44:	20002120 	.word	0x20002120

0801ee48 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801ee48:	b580      	push	{r7, lr}
 801ee4a:	b082      	sub	sp, #8
 801ee4c:	af00      	add	r7, sp, #0
 801ee4e:	6078      	str	r0, [r7, #4]
 801ee50:	000a      	movs	r2, r1
 801ee52:	1cfb      	adds	r3, r7, #3
 801ee54:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 801ee56:	1cfb      	adds	r3, r7, #3
 801ee58:	781a      	ldrb	r2, [r3, #0]
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	0019      	movs	r1, r3
 801ee5e:	2000      	movs	r0, #0
 801ee60:	f7ff ff50 	bl	801ed04 <SX1276WriteBuffer>
}
 801ee64:	46c0      	nop			; (mov r8, r8)
 801ee66:	46bd      	mov	sp, r7
 801ee68:	b002      	add	sp, #8
 801ee6a:	bd80      	pop	{r7, pc}

0801ee6c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801ee6c:	b580      	push	{r7, lr}
 801ee6e:	b082      	sub	sp, #8
 801ee70:	af00      	add	r7, sp, #0
 801ee72:	6078      	str	r0, [r7, #4]
 801ee74:	000a      	movs	r2, r1
 801ee76:	1cfb      	adds	r3, r7, #3
 801ee78:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 801ee7a:	1cfb      	adds	r3, r7, #3
 801ee7c:	781a      	ldrb	r2, [r3, #0]
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	0019      	movs	r1, r3
 801ee82:	2000      	movs	r0, #0
 801ee84:	f7ff ff8c 	bl	801eda0 <SX1276ReadBuffer>
}
 801ee88:	46c0      	nop			; (mov r8, r8)
 801ee8a:	46bd      	mov	sp, r7
 801ee8c:	b002      	add	sp, #8
 801ee8e:	bd80      	pop	{r7, pc}

0801ee90 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801ee90:	b580      	push	{r7, lr}
 801ee92:	b082      	sub	sp, #8
 801ee94:	af00      	add	r7, sp, #0
 801ee96:	0002      	movs	r2, r0
 801ee98:	1dfb      	adds	r3, r7, #7
 801ee9a:	701a      	strb	r2, [r3, #0]
 801ee9c:	1dbb      	adds	r3, r7, #6
 801ee9e:	1c0a      	adds	r2, r1, #0
 801eea0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 801eea2:	1dfb      	adds	r3, r7, #7
 801eea4:	781b      	ldrb	r3, [r3, #0]
 801eea6:	0018      	movs	r0, r3
 801eea8:	f7ff feac 	bl	801ec04 <SX1276SetModem>

    switch( modem )
 801eeac:	1dfb      	adds	r3, r7, #7
 801eeae:	781b      	ldrb	r3, [r3, #0]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d002      	beq.n	801eeba <SX1276SetMaxPayloadLength+0x2a>
 801eeb4:	2b01      	cmp	r3, #1
 801eeb6:	d00f      	beq.n	801eed8 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801eeb8:	e016      	b.n	801eee8 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801eeba:	4b0d      	ldr	r3, [pc, #52]	; (801eef0 <SX1276SetMaxPayloadLength+0x60>)
 801eebc:	2222      	movs	r2, #34	; 0x22
 801eebe:	5c9b      	ldrb	r3, [r3, r2]
 801eec0:	2201      	movs	r2, #1
 801eec2:	4053      	eors	r3, r2
 801eec4:	b2db      	uxtb	r3, r3
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d00d      	beq.n	801eee6 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801eeca:	1dbb      	adds	r3, r7, #6
 801eecc:	781b      	ldrb	r3, [r3, #0]
 801eece:	0019      	movs	r1, r3
 801eed0:	2032      	movs	r0, #50	; 0x32
 801eed2:	f7ff feef 	bl	801ecb4 <SX1276Write>
        break;
 801eed6:	e006      	b.n	801eee6 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801eed8:	1dbb      	adds	r3, r7, #6
 801eeda:	781b      	ldrb	r3, [r3, #0]
 801eedc:	0019      	movs	r1, r3
 801eede:	2023      	movs	r0, #35	; 0x23
 801eee0:	f7ff fee8 	bl	801ecb4 <SX1276Write>
        break;
 801eee4:	e000      	b.n	801eee8 <SX1276SetMaxPayloadLength+0x58>
        break;
 801eee6:	46c0      	nop			; (mov r8, r8)
}
 801eee8:	46c0      	nop			; (mov r8, r8)
 801eeea:	46bd      	mov	sp, r7
 801eeec:	b002      	add	sp, #8
 801eeee:	bd80      	pop	{r7, pc}
 801eef0:	200022bc 	.word	0x200022bc

0801eef4 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801eef4:	b580      	push	{r7, lr}
 801eef6:	b082      	sub	sp, #8
 801eef8:	af00      	add	r7, sp, #0
 801eefa:	0002      	movs	r2, r0
 801eefc:	1dfb      	adds	r3, r7, #7
 801eefe:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 801ef00:	2001      	movs	r0, #1
 801ef02:	f7ff fe7f 	bl	801ec04 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801ef06:	4b0b      	ldr	r3, [pc, #44]	; (801ef34 <SX1276SetPublicNetwork+0x40>)
 801ef08:	1dfa      	adds	r2, r7, #7
 801ef0a:	215c      	movs	r1, #92	; 0x5c
 801ef0c:	7812      	ldrb	r2, [r2, #0]
 801ef0e:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801ef10:	1dfb      	adds	r3, r7, #7
 801ef12:	781b      	ldrb	r3, [r3, #0]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d004      	beq.n	801ef22 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801ef18:	2134      	movs	r1, #52	; 0x34
 801ef1a:	2039      	movs	r0, #57	; 0x39
 801ef1c:	f7ff feca 	bl	801ecb4 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801ef20:	e003      	b.n	801ef2a <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801ef22:	2112      	movs	r1, #18
 801ef24:	2039      	movs	r0, #57	; 0x39
 801ef26:	f7ff fec5 	bl	801ecb4 <SX1276Write>
}
 801ef2a:	46c0      	nop			; (mov r8, r8)
 801ef2c:	46bd      	mov	sp, r7
 801ef2e:	b002      	add	sp, #8
 801ef30:	bd80      	pop	{r7, pc}
 801ef32:	46c0      	nop			; (mov r8, r8)
 801ef34:	200022bc 	.word	0x200022bc

0801ef38 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801ef38:	b580      	push	{r7, lr}
 801ef3a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 801ef3c:	4b04      	ldr	r3, [pc, #16]	; (801ef50 <SX1276GetWakeupTime+0x18>)
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	685b      	ldr	r3, [r3, #4]
 801ef42:	4798      	blx	r3
 801ef44:	0003      	movs	r3, r0
 801ef46:	3335      	adds	r3, #53	; 0x35
}
 801ef48:	0018      	movs	r0, r3
 801ef4a:	46bd      	mov	sp, r7
 801ef4c:	bd80      	pop	{r7, pc}
 801ef4e:	46c0      	nop			; (mov r8, r8)
 801ef50:	20001e8c 	.word	0x20001e8c

0801ef54 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 801ef54:	b590      	push	{r4, r7, lr}
 801ef56:	b085      	sub	sp, #20
 801ef58:	af00      	add	r7, sp, #0
 801ef5a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 801ef5c:	4b51      	ldr	r3, [pc, #324]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801ef5e:	791b      	ldrb	r3, [r3, #4]
 801ef60:	2b01      	cmp	r3, #1
 801ef62:	d002      	beq.n	801ef6a <SX1276OnTimeoutIrq+0x16>
 801ef64:	2b02      	cmp	r3, #2
 801ef66:	d045      	beq.n	801eff4 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801ef68:	e098      	b.n	801f09c <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801ef6a:	4b4e      	ldr	r3, [pc, #312]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801ef6c:	795b      	ldrb	r3, [r3, #5]
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	d132      	bne.n	801efd8 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801ef72:	4b4c      	ldr	r3, [pc, #304]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801ef74:	2230      	movs	r2, #48	; 0x30
 801ef76:	2100      	movs	r1, #0
 801ef78:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801ef7a:	4b4a      	ldr	r3, [pc, #296]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801ef7c:	2231      	movs	r2, #49	; 0x31
 801ef7e:	2100      	movs	r1, #0
 801ef80:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801ef82:	4b48      	ldr	r3, [pc, #288]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801ef84:	2200      	movs	r2, #0
 801ef86:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801ef88:	4b46      	ldr	r3, [pc, #280]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801ef8a:	2200      	movs	r2, #0
 801ef8c:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801ef8e:	210b      	movs	r1, #11
 801ef90:	203e      	movs	r0, #62	; 0x3e
 801ef92:	f7ff fe8f 	bl	801ecb4 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801ef96:	2110      	movs	r1, #16
 801ef98:	203f      	movs	r0, #63	; 0x3f
 801ef9a:	f7ff fe8b 	bl	801ecb4 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801ef9e:	4b41      	ldr	r3, [pc, #260]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801efa0:	2226      	movs	r2, #38	; 0x26
 801efa2:	5c9b      	ldrb	r3, [r3, r2]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d010      	beq.n	801efca <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801efa8:	200d      	movs	r0, #13
 801efaa:	f7ff fe97 	bl	801ecdc <SX1276Read>
 801efae:	0003      	movs	r3, r0
 801efb0:	001a      	movs	r2, r3
 801efb2:	2340      	movs	r3, #64	; 0x40
 801efb4:	4313      	orrs	r3, r2
 801efb6:	b2db      	uxtb	r3, r3
 801efb8:	0019      	movs	r1, r3
 801efba:	200d      	movs	r0, #13
 801efbc:	f7ff fe7a 	bl	801ecb4 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 801efc0:	4b39      	ldr	r3, [pc, #228]	; (801f0a8 <SX1276OnTimeoutIrq+0x154>)
 801efc2:	0018      	movs	r0, r3
 801efc4:	f7fd fd9e 	bl	801cb04 <TimerStart>
 801efc8:	e006      	b.n	801efd8 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 801efca:	4b36      	ldr	r3, [pc, #216]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801efcc:	2200      	movs	r2, #0
 801efce:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801efd0:	4b35      	ldr	r3, [pc, #212]	; (801f0a8 <SX1276OnTimeoutIrq+0x154>)
 801efd2:	0018      	movs	r0, r3
 801efd4:	f7fd fdec 	bl	801cbb0 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801efd8:	4b34      	ldr	r3, [pc, #208]	; (801f0ac <SX1276OnTimeoutIrq+0x158>)
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d05a      	beq.n	801f096 <SX1276OnTimeoutIrq+0x142>
 801efe0:	4b32      	ldr	r3, [pc, #200]	; (801f0ac <SX1276OnTimeoutIrq+0x158>)
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	68db      	ldr	r3, [r3, #12]
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d055      	beq.n	801f096 <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 801efea:	4b30      	ldr	r3, [pc, #192]	; (801f0ac <SX1276OnTimeoutIrq+0x158>)
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	68db      	ldr	r3, [r3, #12]
 801eff0:	4798      	blx	r3
        break;
 801eff2:	e050      	b.n	801f096 <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 801eff4:	f7ff fd9c 	bl	801eb30 <SX1276Reset>
        RxChainCalibration( );
 801eff8:	f7fe fae4 	bl	801d5c4 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801effc:	2000      	movs	r0, #0
 801effe:	f7ff fdb1 	bl	801eb64 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801f002:	230f      	movs	r3, #15
 801f004:	18fb      	adds	r3, r7, r3
 801f006:	2200      	movs	r2, #0
 801f008:	701a      	strb	r2, [r3, #0]
 801f00a:	e025      	b.n	801f058 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801f00c:	240f      	movs	r4, #15
 801f00e:	193b      	adds	r3, r7, r4
 801f010:	781a      	ldrb	r2, [r3, #0]
 801f012:	4927      	ldr	r1, [pc, #156]	; (801f0b0 <SX1276OnTimeoutIrq+0x15c>)
 801f014:	0013      	movs	r3, r2
 801f016:	005b      	lsls	r3, r3, #1
 801f018:	189b      	adds	r3, r3, r2
 801f01a:	5c5b      	ldrb	r3, [r3, r1]
 801f01c:	0018      	movs	r0, r3
 801f01e:	f7ff fdf1 	bl	801ec04 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801f022:	193b      	adds	r3, r7, r4
 801f024:	781a      	ldrb	r2, [r3, #0]
 801f026:	4922      	ldr	r1, [pc, #136]	; (801f0b0 <SX1276OnTimeoutIrq+0x15c>)
 801f028:	0013      	movs	r3, r2
 801f02a:	005b      	lsls	r3, r3, #1
 801f02c:	189b      	adds	r3, r3, r2
 801f02e:	18cb      	adds	r3, r1, r3
 801f030:	3301      	adds	r3, #1
 801f032:	781b      	ldrb	r3, [r3, #0]
 801f034:	b298      	uxth	r0, r3
 801f036:	193b      	adds	r3, r7, r4
 801f038:	781a      	ldrb	r2, [r3, #0]
 801f03a:	491d      	ldr	r1, [pc, #116]	; (801f0b0 <SX1276OnTimeoutIrq+0x15c>)
 801f03c:	0013      	movs	r3, r2
 801f03e:	005b      	lsls	r3, r3, #1
 801f040:	189b      	adds	r3, r3, r2
 801f042:	18cb      	adds	r3, r1, r3
 801f044:	3302      	adds	r3, #2
 801f046:	781b      	ldrb	r3, [r3, #0]
 801f048:	0019      	movs	r1, r3
 801f04a:	f7ff fe33 	bl	801ecb4 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801f04e:	193b      	adds	r3, r7, r4
 801f050:	781a      	ldrb	r2, [r3, #0]
 801f052:	193b      	adds	r3, r7, r4
 801f054:	3201      	adds	r2, #1
 801f056:	701a      	strb	r2, [r3, #0]
 801f058:	230f      	movs	r3, #15
 801f05a:	18fb      	adds	r3, r7, r3
 801f05c:	781b      	ldrb	r3, [r3, #0]
 801f05e:	2b0f      	cmp	r3, #15
 801f060:	d9d4      	bls.n	801f00c <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 801f062:	2000      	movs	r0, #0
 801f064:	f7ff fdce 	bl	801ec04 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801f068:	4b0e      	ldr	r3, [pc, #56]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801f06a:	225c      	movs	r2, #92	; 0x5c
 801f06c:	5c9b      	ldrb	r3, [r3, r2]
 801f06e:	0018      	movs	r0, r3
 801f070:	f7ff ff40 	bl	801eef4 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801f074:	4b0b      	ldr	r3, [pc, #44]	; (801f0a4 <SX1276OnTimeoutIrq+0x150>)
 801f076:	2200      	movs	r2, #0
 801f078:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801f07a:	4b0c      	ldr	r3, [pc, #48]	; (801f0ac <SX1276OnTimeoutIrq+0x158>)
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d00b      	beq.n	801f09a <SX1276OnTimeoutIrq+0x146>
 801f082:	4b0a      	ldr	r3, [pc, #40]	; (801f0ac <SX1276OnTimeoutIrq+0x158>)
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	685b      	ldr	r3, [r3, #4]
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d006      	beq.n	801f09a <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 801f08c:	4b07      	ldr	r3, [pc, #28]	; (801f0ac <SX1276OnTimeoutIrq+0x158>)
 801f08e:	681b      	ldr	r3, [r3, #0]
 801f090:	685b      	ldr	r3, [r3, #4]
 801f092:	4798      	blx	r3
        break;
 801f094:	e001      	b.n	801f09a <SX1276OnTimeoutIrq+0x146>
        break;
 801f096:	46c0      	nop			; (mov r8, r8)
 801f098:	e000      	b.n	801f09c <SX1276OnTimeoutIrq+0x148>
        break;
 801f09a:	46c0      	nop			; (mov r8, r8)
    }
}
 801f09c:	46c0      	nop			; (mov r8, r8)
 801f09e:	46bd      	mov	sp, r7
 801f0a0:	b005      	add	sp, #20
 801f0a2:	bd90      	pop	{r4, r7, pc}
 801f0a4:	200022bc 	.word	0x200022bc
 801f0a8:	200022a4 	.word	0x200022a4
 801f0ac:	20001d88 	.word	0x20001d88
 801f0b0:	0802944c 	.word	0x0802944c

0801f0b4 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 801f0b4:	b5b0      	push	{r4, r5, r7, lr}
 801f0b6:	b084      	sub	sp, #16
 801f0b8:	af00      	add	r7, sp, #0
 801f0ba:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 801f0bc:	230d      	movs	r3, #13
 801f0be:	18fb      	adds	r3, r7, r3
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801f0c4:	4bca      	ldr	r3, [pc, #808]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f0c6:	791b      	ldrb	r3, [r3, #4]
 801f0c8:	2b01      	cmp	r3, #1
 801f0ca:	d003      	beq.n	801f0d4 <SX1276OnDio0Irq+0x20>
 801f0cc:	2b02      	cmp	r3, #2
 801f0ce:	d100      	bne.n	801f0d2 <SX1276OnDio0Irq+0x1e>
 801f0d0:	e1f2      	b.n	801f4b8 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 801f0d2:	e20f      	b.n	801f4f4 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 801f0d4:	4bc6      	ldr	r3, [pc, #792]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f0d6:	795b      	ldrb	r3, [r3, #5]
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d003      	beq.n	801f0e4 <SX1276OnDio0Irq+0x30>
 801f0dc:	2b01      	cmp	r3, #1
 801f0de:	d100      	bne.n	801f0e2 <SX1276OnDio0Irq+0x2e>
 801f0e0:	e0eb      	b.n	801f2ba <SX1276OnDio0Irq+0x206>
                break;
 801f0e2:	e1e8      	b.n	801f4b6 <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801f0e4:	4bc2      	ldr	r3, [pc, #776]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f0e6:	2224      	movs	r2, #36	; 0x24
 801f0e8:	5c9b      	ldrb	r3, [r3, r2]
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	d057      	beq.n	801f19e <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801f0ee:	203f      	movs	r0, #63	; 0x3f
 801f0f0:	f7ff fdf4 	bl	801ecdc <SX1276Read>
 801f0f4:	0003      	movs	r3, r0
 801f0f6:	001a      	movs	r2, r3
 801f0f8:	210d      	movs	r1, #13
 801f0fa:	187b      	adds	r3, r7, r1
 801f0fc:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801f0fe:	187b      	adds	r3, r7, r1
 801f100:	781b      	ldrb	r3, [r3, #0]
 801f102:	b2db      	uxtb	r3, r3
 801f104:	001a      	movs	r2, r3
 801f106:	2302      	movs	r3, #2
 801f108:	4013      	ands	r3, r2
 801f10a:	2b02      	cmp	r3, #2
 801f10c:	d047      	beq.n	801f19e <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801f10e:	210b      	movs	r1, #11
 801f110:	203e      	movs	r0, #62	; 0x3e
 801f112:	f7ff fdcf 	bl	801ecb4 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801f116:	2110      	movs	r1, #16
 801f118:	203f      	movs	r0, #63	; 0x3f
 801f11a:	f7ff fdcb 	bl	801ecb4 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801f11e:	4bb5      	ldr	r3, [pc, #724]	; (801f3f4 <SX1276OnDio0Irq+0x340>)
 801f120:	0018      	movs	r0, r3
 801f122:	f7fd fd45 	bl	801cbb0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801f126:	4bb2      	ldr	r3, [pc, #712]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f128:	2226      	movs	r2, #38	; 0x26
 801f12a:	5c9b      	ldrb	r3, [r3, r2]
 801f12c:	2201      	movs	r2, #1
 801f12e:	4053      	eors	r3, r2
 801f130:	b2db      	uxtb	r3, r3
 801f132:	2b00      	cmp	r3, #0
 801f134:	d007      	beq.n	801f146 <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 801f136:	4bb0      	ldr	r3, [pc, #704]	; (801f3f8 <SX1276OnDio0Irq+0x344>)
 801f138:	0018      	movs	r0, r3
 801f13a:	f7fd fd39 	bl	801cbb0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 801f13e:	4bac      	ldr	r3, [pc, #688]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f140:	2200      	movs	r2, #0
 801f142:	711a      	strb	r2, [r3, #4]
 801f144:	e00f      	b.n	801f166 <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801f146:	200d      	movs	r0, #13
 801f148:	f7ff fdc8 	bl	801ecdc <SX1276Read>
 801f14c:	0003      	movs	r3, r0
 801f14e:	001a      	movs	r2, r3
 801f150:	2340      	movs	r3, #64	; 0x40
 801f152:	4313      	orrs	r3, r2
 801f154:	b2db      	uxtb	r3, r3
 801f156:	0019      	movs	r1, r3
 801f158:	200d      	movs	r0, #13
 801f15a:	f7ff fdab 	bl	801ecb4 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 801f15e:	4ba6      	ldr	r3, [pc, #664]	; (801f3f8 <SX1276OnDio0Irq+0x344>)
 801f160:	0018      	movs	r0, r3
 801f162:	f7fd fccf 	bl	801cb04 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801f166:	4ba5      	ldr	r3, [pc, #660]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d008      	beq.n	801f180 <SX1276OnDio0Irq+0xcc>
 801f16e:	4ba3      	ldr	r3, [pc, #652]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	691b      	ldr	r3, [r3, #16]
 801f174:	2b00      	cmp	r3, #0
 801f176:	d003      	beq.n	801f180 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 801f178:	4ba0      	ldr	r3, [pc, #640]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	691b      	ldr	r3, [r3, #16]
 801f17e:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801f180:	4b9b      	ldr	r3, [pc, #620]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f182:	2230      	movs	r2, #48	; 0x30
 801f184:	2100      	movs	r1, #0
 801f186:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801f188:	4b99      	ldr	r3, [pc, #612]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f18a:	2231      	movs	r2, #49	; 0x31
 801f18c:	2100      	movs	r1, #0
 801f18e:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801f190:	4b97      	ldr	r3, [pc, #604]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f192:	2200      	movs	r2, #0
 801f194:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801f196:	4b96      	ldr	r3, [pc, #600]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f198:	2200      	movs	r2, #0
 801f19a:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801f19c:	e18b      	b.n	801f4b6 <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801f19e:	4b94      	ldr	r3, [pc, #592]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d12d      	bne.n	801f202 <SX1276OnDio0Irq+0x14e>
 801f1a6:	4b92      	ldr	r3, [pc, #584]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d129      	bne.n	801f202 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801f1ae:	4b90      	ldr	r3, [pc, #576]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1b0:	2222      	movs	r2, #34	; 0x22
 801f1b2:	5c9b      	ldrb	r3, [r3, r2]
 801f1b4:	2201      	movs	r2, #1
 801f1b6:	4053      	eors	r3, r2
 801f1b8:	b2db      	uxtb	r3, r3
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d005      	beq.n	801f1ca <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801f1be:	4b90      	ldr	r3, [pc, #576]	; (801f400 <SX1276OnDio0Irq+0x34c>)
 801f1c0:	2101      	movs	r1, #1
 801f1c2:	0018      	movs	r0, r3
 801f1c4:	f7ff fe52 	bl	801ee6c <SX1276ReadFifo>
 801f1c8:	e006      	b.n	801f1d8 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801f1ca:	2032      	movs	r0, #50	; 0x32
 801f1cc:	f7ff fd86 	bl	801ecdc <SX1276Read>
 801f1d0:	0003      	movs	r3, r0
 801f1d2:	b29a      	uxth	r2, r3
 801f1d4:	4b86      	ldr	r3, [pc, #536]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1d6:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f1d8:	4b85      	ldr	r3, [pc, #532]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f1dc:	001a      	movs	r2, r3
 801f1de:	4b89      	ldr	r3, [pc, #548]	; (801f404 <SX1276OnDio0Irq+0x350>)
 801f1e0:	18d0      	adds	r0, r2, r3
 801f1e2:	4b83      	ldr	r3, [pc, #524]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1e4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f1e6:	b2da      	uxtb	r2, r3
 801f1e8:	4b81      	ldr	r3, [pc, #516]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f1ec:	b2db      	uxtb	r3, r3
 801f1ee:	1ad3      	subs	r3, r2, r3
 801f1f0:	b2db      	uxtb	r3, r3
 801f1f2:	0019      	movs	r1, r3
 801f1f4:	f7ff fe3a 	bl	801ee6c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f1f8:	4b7d      	ldr	r3, [pc, #500]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1fa:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f1fc:	4b7c      	ldr	r3, [pc, #496]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f1fe:	879a      	strh	r2, [r3, #60]	; 0x3c
 801f200:	e013      	b.n	801f22a <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f202:	4b7b      	ldr	r3, [pc, #492]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f204:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f206:	001a      	movs	r2, r3
 801f208:	4b7e      	ldr	r3, [pc, #504]	; (801f404 <SX1276OnDio0Irq+0x350>)
 801f20a:	18d0      	adds	r0, r2, r3
 801f20c:	4b78      	ldr	r3, [pc, #480]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f20e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f210:	b2da      	uxtb	r2, r3
 801f212:	4b77      	ldr	r3, [pc, #476]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f214:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f216:	b2db      	uxtb	r3, r3
 801f218:	1ad3      	subs	r3, r2, r3
 801f21a:	b2db      	uxtb	r3, r3
 801f21c:	0019      	movs	r1, r3
 801f21e:	f7ff fe25 	bl	801ee6c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f222:	4b73      	ldr	r3, [pc, #460]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f224:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f226:	4b72      	ldr	r3, [pc, #456]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f228:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801f22a:	4b72      	ldr	r3, [pc, #456]	; (801f3f4 <SX1276OnDio0Irq+0x340>)
 801f22c:	0018      	movs	r0, r3
 801f22e:	f7fd fcbf 	bl	801cbb0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801f232:	4b6f      	ldr	r3, [pc, #444]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f234:	2226      	movs	r2, #38	; 0x26
 801f236:	5c9b      	ldrb	r3, [r3, r2]
 801f238:	2201      	movs	r2, #1
 801f23a:	4053      	eors	r3, r2
 801f23c:	b2db      	uxtb	r3, r3
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d007      	beq.n	801f252 <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 801f242:	4b6b      	ldr	r3, [pc, #428]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f244:	2200      	movs	r2, #0
 801f246:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801f248:	4b6b      	ldr	r3, [pc, #428]	; (801f3f8 <SX1276OnDio0Irq+0x344>)
 801f24a:	0018      	movs	r0, r3
 801f24c:	f7fd fcb0 	bl	801cbb0 <TimerStop>
 801f250:	e00f      	b.n	801f272 <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801f252:	200d      	movs	r0, #13
 801f254:	f7ff fd42 	bl	801ecdc <SX1276Read>
 801f258:	0003      	movs	r3, r0
 801f25a:	001a      	movs	r2, r3
 801f25c:	2340      	movs	r3, #64	; 0x40
 801f25e:	4313      	orrs	r3, r2
 801f260:	b2db      	uxtb	r3, r3
 801f262:	0019      	movs	r1, r3
 801f264:	200d      	movs	r0, #13
 801f266:	f7ff fd25 	bl	801ecb4 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 801f26a:	4b63      	ldr	r3, [pc, #396]	; (801f3f8 <SX1276OnDio0Irq+0x344>)
 801f26c:	0018      	movs	r0, r3
 801f26e:	f7fd fc49 	bl	801cb04 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801f272:	4b62      	ldr	r3, [pc, #392]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	2b00      	cmp	r3, #0
 801f278:	d010      	beq.n	801f29c <SX1276OnDio0Irq+0x1e8>
 801f27a:	4b60      	ldr	r3, [pc, #384]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	689b      	ldr	r3, [r3, #8]
 801f280:	2b00      	cmp	r3, #0
 801f282:	d00b      	beq.n	801f29c <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801f284:	4b5d      	ldr	r3, [pc, #372]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	689c      	ldr	r4, [r3, #8]
 801f28a:	4b59      	ldr	r3, [pc, #356]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f28c:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801f28e:	4b58      	ldr	r3, [pc, #352]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f290:	2232      	movs	r2, #50	; 0x32
 801f292:	569b      	ldrsb	r3, [r3, r2]
 801f294:	b21a      	sxth	r2, r3
 801f296:	485b      	ldr	r0, [pc, #364]	; (801f404 <SX1276OnDio0Irq+0x350>)
 801f298:	2300      	movs	r3, #0
 801f29a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801f29c:	4b54      	ldr	r3, [pc, #336]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f29e:	2230      	movs	r2, #48	; 0x30
 801f2a0:	2100      	movs	r1, #0
 801f2a2:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801f2a4:	4b52      	ldr	r3, [pc, #328]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f2a6:	2231      	movs	r2, #49	; 0x31
 801f2a8:	2100      	movs	r1, #0
 801f2aa:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801f2ac:	4b50      	ldr	r3, [pc, #320]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f2ae:	2200      	movs	r2, #0
 801f2b0:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801f2b2:	4b4f      	ldr	r3, [pc, #316]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f2b4:	2200      	movs	r2, #0
 801f2b6:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801f2b8:	e0fd      	b.n	801f4b6 <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801f2ba:	2140      	movs	r1, #64	; 0x40
 801f2bc:	2012      	movs	r0, #18
 801f2be:	f7ff fcf9 	bl	801ecb4 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801f2c2:	2012      	movs	r0, #18
 801f2c4:	f7ff fd0a 	bl	801ecdc <SX1276Read>
 801f2c8:	0003      	movs	r3, r0
 801f2ca:	001a      	movs	r2, r3
 801f2cc:	210d      	movs	r1, #13
 801f2ce:	187b      	adds	r3, r7, r1
 801f2d0:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801f2d2:	187b      	adds	r3, r7, r1
 801f2d4:	781b      	ldrb	r3, [r3, #0]
 801f2d6:	b2db      	uxtb	r3, r3
 801f2d8:	001a      	movs	r2, r3
 801f2da:	2320      	movs	r3, #32
 801f2dc:	4013      	ands	r3, r2
 801f2de:	2b20      	cmp	r3, #32
 801f2e0:	d122      	bne.n	801f328 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801f2e2:	2120      	movs	r1, #32
 801f2e4:	2012      	movs	r0, #18
 801f2e6:	f7ff fce5 	bl	801ecb4 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801f2ea:	4b41      	ldr	r3, [pc, #260]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f2ec:	2256      	movs	r2, #86	; 0x56
 801f2ee:	5c9b      	ldrb	r3, [r3, r2]
 801f2f0:	2201      	movs	r2, #1
 801f2f2:	4053      	eors	r3, r2
 801f2f4:	b2db      	uxtb	r3, r3
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d002      	beq.n	801f300 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 801f2fa:	4b3d      	ldr	r3, [pc, #244]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f2fc:	2200      	movs	r2, #0
 801f2fe:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801f300:	4b3c      	ldr	r3, [pc, #240]	; (801f3f4 <SX1276OnDio0Irq+0x340>)
 801f302:	0018      	movs	r0, r3
 801f304:	f7fd fc54 	bl	801cbb0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801f308:	4b3c      	ldr	r3, [pc, #240]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d100      	bne.n	801f312 <SX1276OnDio0Irq+0x25e>
 801f310:	e0ce      	b.n	801f4b0 <SX1276OnDio0Irq+0x3fc>
 801f312:	4b3a      	ldr	r3, [pc, #232]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	691b      	ldr	r3, [r3, #16]
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d100      	bne.n	801f31e <SX1276OnDio0Irq+0x26a>
 801f31c:	e0c8      	b.n	801f4b0 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 801f31e:	4b37      	ldr	r3, [pc, #220]	; (801f3fc <SX1276OnDio0Irq+0x348>)
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	691b      	ldr	r3, [r3, #16]
 801f324:	4798      	blx	r3
                        break;
 801f326:	e0c3      	b.n	801f4b0 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801f328:	2019      	movs	r0, #25
 801f32a:	f7ff fcd7 	bl	801ecdc <SX1276Read>
 801f32e:	0003      	movs	r3, r0
 801f330:	b25b      	sxtb	r3, r3
 801f332:	3302      	adds	r3, #2
 801f334:	109b      	asrs	r3, r3, #2
 801f336:	b259      	sxtb	r1, r3
 801f338:	4b2d      	ldr	r3, [pc, #180]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f33a:	2260      	movs	r2, #96	; 0x60
 801f33c:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801f33e:	201a      	movs	r0, #26
 801f340:	f7ff fccc 	bl	801ecdc <SX1276Read>
 801f344:	0003      	movs	r3, r0
 801f346:	001a      	movs	r2, r3
 801f348:	230e      	movs	r3, #14
 801f34a:	18fb      	adds	r3, r7, r3
 801f34c:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801f34e:	4b28      	ldr	r3, [pc, #160]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f350:	2260      	movs	r2, #96	; 0x60
 801f352:	569b      	ldrsb	r3, [r3, r2]
 801f354:	2b00      	cmp	r3, #0
 801f356:	da34      	bge.n	801f3c2 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801f358:	4b25      	ldr	r3, [pc, #148]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f35a:	689b      	ldr	r3, [r3, #8]
 801f35c:	4a2a      	ldr	r2, [pc, #168]	; (801f408 <SX1276OnDio0Irq+0x354>)
 801f35e:	4293      	cmp	r3, r2
 801f360:	d917      	bls.n	801f392 <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801f362:	210e      	movs	r1, #14
 801f364:	187b      	adds	r3, r7, r1
 801f366:	2200      	movs	r2, #0
 801f368:	5e9b      	ldrsh	r3, [r3, r2]
 801f36a:	111b      	asrs	r3, r3, #4
 801f36c:	b21b      	sxth	r3, r3
 801f36e:	b29a      	uxth	r2, r3
 801f370:	187b      	adds	r3, r7, r1
 801f372:	881b      	ldrh	r3, [r3, #0]
 801f374:	18d3      	adds	r3, r2, r3
 801f376:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801f378:	4b1d      	ldr	r3, [pc, #116]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f37a:	2160      	movs	r1, #96	; 0x60
 801f37c:	565b      	ldrsb	r3, [r3, r1]
 801f37e:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801f380:	18d3      	adds	r3, r2, r3
 801f382:	b29b      	uxth	r3, r3
 801f384:	3b9d      	subs	r3, #157	; 0x9d
 801f386:	b29b      	uxth	r3, r3
 801f388:	b219      	sxth	r1, r3
 801f38a:	4b19      	ldr	r3, [pc, #100]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f38c:	2262      	movs	r2, #98	; 0x62
 801f38e:	5299      	strh	r1, [r3, r2]
 801f390:	e04d      	b.n	801f42e <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801f392:	210e      	movs	r1, #14
 801f394:	187b      	adds	r3, r7, r1
 801f396:	2200      	movs	r2, #0
 801f398:	5e9b      	ldrsh	r3, [r3, r2]
 801f39a:	111b      	asrs	r3, r3, #4
 801f39c:	b21b      	sxth	r3, r3
 801f39e:	b29a      	uxth	r2, r3
 801f3a0:	187b      	adds	r3, r7, r1
 801f3a2:	881b      	ldrh	r3, [r3, #0]
 801f3a4:	18d3      	adds	r3, r2, r3
 801f3a6:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801f3a8:	4b11      	ldr	r3, [pc, #68]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f3aa:	2160      	movs	r1, #96	; 0x60
 801f3ac:	565b      	ldrsb	r3, [r3, r1]
 801f3ae:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801f3b0:	18d3      	adds	r3, r2, r3
 801f3b2:	b29b      	uxth	r3, r3
 801f3b4:	3ba4      	subs	r3, #164	; 0xa4
 801f3b6:	b29b      	uxth	r3, r3
 801f3b8:	b219      	sxth	r1, r3
 801f3ba:	4b0d      	ldr	r3, [pc, #52]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f3bc:	2262      	movs	r2, #98	; 0x62
 801f3be:	5299      	strh	r1, [r3, r2]
 801f3c0:	e035      	b.n	801f42e <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801f3c2:	4b0b      	ldr	r3, [pc, #44]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f3c4:	689b      	ldr	r3, [r3, #8]
 801f3c6:	4a10      	ldr	r2, [pc, #64]	; (801f408 <SX1276OnDio0Irq+0x354>)
 801f3c8:	4293      	cmp	r3, r2
 801f3ca:	d91f      	bls.n	801f40c <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801f3cc:	210e      	movs	r1, #14
 801f3ce:	187b      	adds	r3, r7, r1
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	5e9b      	ldrsh	r3, [r3, r2]
 801f3d4:	111b      	asrs	r3, r3, #4
 801f3d6:	b21b      	sxth	r3, r3
 801f3d8:	b29a      	uxth	r2, r3
 801f3da:	187b      	adds	r3, r7, r1
 801f3dc:	881b      	ldrh	r3, [r3, #0]
 801f3de:	18d3      	adds	r3, r2, r3
 801f3e0:	b29b      	uxth	r3, r3
 801f3e2:	3b9d      	subs	r3, #157	; 0x9d
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	b219      	sxth	r1, r3
 801f3e8:	4b01      	ldr	r3, [pc, #4]	; (801f3f0 <SX1276OnDio0Irq+0x33c>)
 801f3ea:	2262      	movs	r2, #98	; 0x62
 801f3ec:	5299      	strh	r1, [r3, r2]
 801f3ee:	e01e      	b.n	801f42e <SX1276OnDio0Irq+0x37a>
 801f3f0:	200022bc 	.word	0x200022bc
 801f3f4:	20002324 	.word	0x20002324
 801f3f8:	200022a4 	.word	0x200022a4
 801f3fc:	20001d88 	.word	0x20001d88
 801f400:	200022f6 	.word	0x200022f6
 801f404:	20001d8c 	.word	0x20001d8c
 801f408:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801f40c:	210e      	movs	r1, #14
 801f40e:	187b      	adds	r3, r7, r1
 801f410:	2200      	movs	r2, #0
 801f412:	5e9b      	ldrsh	r3, [r3, r2]
 801f414:	111b      	asrs	r3, r3, #4
 801f416:	b21b      	sxth	r3, r3
 801f418:	b29a      	uxth	r2, r3
 801f41a:	187b      	adds	r3, r7, r1
 801f41c:	881b      	ldrh	r3, [r3, #0]
 801f41e:	18d3      	adds	r3, r2, r3
 801f420:	b29b      	uxth	r3, r3
 801f422:	3ba4      	subs	r3, #164	; 0xa4
 801f424:	b29b      	uxth	r3, r3
 801f426:	b219      	sxth	r1, r3
 801f428:	4b34      	ldr	r3, [pc, #208]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f42a:	2262      	movs	r2, #98	; 0x62
 801f42c:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801f42e:	2013      	movs	r0, #19
 801f430:	f7ff fc54 	bl	801ecdc <SX1276Read>
 801f434:	0003      	movs	r3, r0
 801f436:	0019      	movs	r1, r3
 801f438:	4b30      	ldr	r3, [pc, #192]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f43a:	2264      	movs	r2, #100	; 0x64
 801f43c:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801f43e:	2010      	movs	r0, #16
 801f440:	f7ff fc4c 	bl	801ecdc <SX1276Read>
 801f444:	0003      	movs	r3, r0
 801f446:	0019      	movs	r1, r3
 801f448:	200d      	movs	r0, #13
 801f44a:	f7ff fc33 	bl	801ecb4 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801f44e:	4b2b      	ldr	r3, [pc, #172]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f450:	2264      	movs	r2, #100	; 0x64
 801f452:	5c9a      	ldrb	r2, [r3, r2]
 801f454:	4b2a      	ldr	r3, [pc, #168]	; (801f500 <SX1276OnDio0Irq+0x44c>)
 801f456:	0011      	movs	r1, r2
 801f458:	0018      	movs	r0, r3
 801f45a:	f7ff fd07 	bl	801ee6c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801f45e:	4b27      	ldr	r3, [pc, #156]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f460:	2256      	movs	r2, #86	; 0x56
 801f462:	5c9b      	ldrb	r3, [r3, r2]
 801f464:	2201      	movs	r2, #1
 801f466:	4053      	eors	r3, r2
 801f468:	b2db      	uxtb	r3, r3
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	d002      	beq.n	801f474 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 801f46e:	4b23      	ldr	r3, [pc, #140]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f470:	2200      	movs	r2, #0
 801f472:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801f474:	4b23      	ldr	r3, [pc, #140]	; (801f504 <SX1276OnDio0Irq+0x450>)
 801f476:	0018      	movs	r0, r3
 801f478:	f7fd fb9a 	bl	801cbb0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801f47c:	4b22      	ldr	r3, [pc, #136]	; (801f508 <SX1276OnDio0Irq+0x454>)
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	2b00      	cmp	r3, #0
 801f482:	d017      	beq.n	801f4b4 <SX1276OnDio0Irq+0x400>
 801f484:	4b20      	ldr	r3, [pc, #128]	; (801f508 <SX1276OnDio0Irq+0x454>)
 801f486:	681b      	ldr	r3, [r3, #0]
 801f488:	689b      	ldr	r3, [r3, #8]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d012      	beq.n	801f4b4 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801f48e:	4b1e      	ldr	r3, [pc, #120]	; (801f508 <SX1276OnDio0Irq+0x454>)
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	689c      	ldr	r4, [r3, #8]
 801f494:	4b19      	ldr	r3, [pc, #100]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f496:	2264      	movs	r2, #100	; 0x64
 801f498:	5c9b      	ldrb	r3, [r3, r2]
 801f49a:	b299      	uxth	r1, r3
 801f49c:	4b17      	ldr	r3, [pc, #92]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f49e:	2262      	movs	r2, #98	; 0x62
 801f4a0:	5e9d      	ldrsh	r5, [r3, r2]
 801f4a2:	4b16      	ldr	r3, [pc, #88]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f4a4:	2260      	movs	r2, #96	; 0x60
 801f4a6:	569b      	ldrsb	r3, [r3, r2]
 801f4a8:	4815      	ldr	r0, [pc, #84]	; (801f500 <SX1276OnDio0Irq+0x44c>)
 801f4aa:	002a      	movs	r2, r5
 801f4ac:	47a0      	blx	r4
                break;
 801f4ae:	e001      	b.n	801f4b4 <SX1276OnDio0Irq+0x400>
                        break;
 801f4b0:	46c0      	nop			; (mov r8, r8)
 801f4b2:	e01f      	b.n	801f4f4 <SX1276OnDio0Irq+0x440>
                break;
 801f4b4:	46c0      	nop			; (mov r8, r8)
            break;
 801f4b6:	e01d      	b.n	801f4f4 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 801f4b8:	4b14      	ldr	r3, [pc, #80]	; (801f50c <SX1276OnDio0Irq+0x458>)
 801f4ba:	0018      	movs	r0, r3
 801f4bc:	f7fd fb78 	bl	801cbb0 <TimerStop>
            switch( SX1276.Settings.Modem )
 801f4c0:	4b0e      	ldr	r3, [pc, #56]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f4c2:	795b      	ldrb	r3, [r3, #5]
 801f4c4:	2b01      	cmp	r3, #1
 801f4c6:	d103      	bne.n	801f4d0 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801f4c8:	2108      	movs	r1, #8
 801f4ca:	2012      	movs	r0, #18
 801f4cc:	f7ff fbf2 	bl	801ecb4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801f4d0:	4b0a      	ldr	r3, [pc, #40]	; (801f4fc <SX1276OnDio0Irq+0x448>)
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801f4d6:	4b0c      	ldr	r3, [pc, #48]	; (801f508 <SX1276OnDio0Irq+0x454>)
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d008      	beq.n	801f4f0 <SX1276OnDio0Irq+0x43c>
 801f4de:	4b0a      	ldr	r3, [pc, #40]	; (801f508 <SX1276OnDio0Irq+0x454>)
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d003      	beq.n	801f4f0 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 801f4e8:	4b07      	ldr	r3, [pc, #28]	; (801f508 <SX1276OnDio0Irq+0x454>)
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	4798      	blx	r3
                break;
 801f4f0:	46c0      	nop			; (mov r8, r8)
            break;
 801f4f2:	46c0      	nop			; (mov r8, r8)
    }
}
 801f4f4:	46c0      	nop			; (mov r8, r8)
 801f4f6:	46bd      	mov	sp, r7
 801f4f8:	b004      	add	sp, #16
 801f4fa:	bdb0      	pop	{r4, r5, r7, pc}
 801f4fc:	200022bc 	.word	0x200022bc
 801f500:	20001d8c 	.word	0x20001d8c
 801f504:	20002324 	.word	0x20002324
 801f508:	20001d88 	.word	0x20001d88
 801f50c:	2000228c 	.word	0x2000228c

0801f510 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 801f510:	b580      	push	{r7, lr}
 801f512:	b082      	sub	sp, #8
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 801f518:	4b61      	ldr	r3, [pc, #388]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f51a:	791b      	ldrb	r3, [r3, #4]
 801f51c:	2b01      	cmp	r3, #1
 801f51e:	d003      	beq.n	801f528 <SX1276OnDio1Irq+0x18>
 801f520:	2b02      	cmp	r3, #2
 801f522:	d100      	bne.n	801f526 <SX1276OnDio1Irq+0x16>
 801f524:	e078      	b.n	801f618 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 801f526:	e0b6      	b.n	801f696 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 801f528:	4b5d      	ldr	r3, [pc, #372]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f52a:	795b      	ldrb	r3, [r3, #5]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d002      	beq.n	801f536 <SX1276OnDio1Irq+0x26>
 801f530:	2b01      	cmp	r3, #1
 801f532:	d057      	beq.n	801f5e4 <SX1276OnDio1Irq+0xd4>
                break;
 801f534:	e06f      	b.n	801f616 <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801f536:	4b5a      	ldr	r3, [pc, #360]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f538:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d118      	bne.n	801f570 <SX1276OnDio1Irq+0x60>
 801f53e:	4b58      	ldr	r3, [pc, #352]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f540:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f542:	2b00      	cmp	r3, #0
 801f544:	d114      	bne.n	801f570 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801f546:	4b56      	ldr	r3, [pc, #344]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f548:	2222      	movs	r2, #34	; 0x22
 801f54a:	5c9b      	ldrb	r3, [r3, r2]
 801f54c:	2201      	movs	r2, #1
 801f54e:	4053      	eors	r3, r2
 801f550:	b2db      	uxtb	r3, r3
 801f552:	2b00      	cmp	r3, #0
 801f554:	d005      	beq.n	801f562 <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801f556:	4b53      	ldr	r3, [pc, #332]	; (801f6a4 <SX1276OnDio1Irq+0x194>)
 801f558:	2101      	movs	r1, #1
 801f55a:	0018      	movs	r0, r3
 801f55c:	f7ff fc86 	bl	801ee6c <SX1276ReadFifo>
 801f560:	e006      	b.n	801f570 <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801f562:	2032      	movs	r0, #50	; 0x32
 801f564:	f7ff fbba 	bl	801ecdc <SX1276Read>
 801f568:	0003      	movs	r3, r0
 801f56a:	b29a      	uxth	r2, r3
 801f56c:	4b4c      	ldr	r3, [pc, #304]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f56e:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801f570:	4b4b      	ldr	r3, [pc, #300]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f572:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f574:	001a      	movs	r2, r3
 801f576:	4b4a      	ldr	r3, [pc, #296]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f578:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f57a:	1ad3      	subs	r3, r2, r3
 801f57c:	4a48      	ldr	r2, [pc, #288]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f57e:	213e      	movs	r1, #62	; 0x3e
 801f580:	5c52      	ldrb	r2, [r2, r1]
 801f582:	4293      	cmp	r3, r2
 801f584:	db19      	blt.n	801f5ba <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801f586:	4b46      	ldr	r3, [pc, #280]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f588:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f58a:	001a      	movs	r2, r3
 801f58c:	4b46      	ldr	r3, [pc, #280]	; (801f6a8 <SX1276OnDio1Irq+0x198>)
 801f58e:	18d0      	adds	r0, r2, r3
 801f590:	4b43      	ldr	r3, [pc, #268]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f592:	223e      	movs	r2, #62	; 0x3e
 801f594:	5c9b      	ldrb	r3, [r3, r2]
 801f596:	3b01      	subs	r3, #1
 801f598:	b2db      	uxtb	r3, r3
 801f59a:	0019      	movs	r1, r3
 801f59c:	f7ff fc66 	bl	801ee6c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801f5a0:	4b3f      	ldr	r3, [pc, #252]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5a2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801f5a4:	4b3e      	ldr	r3, [pc, #248]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5a6:	213e      	movs	r1, #62	; 0x3e
 801f5a8:	5c5b      	ldrb	r3, [r3, r1]
 801f5aa:	b29b      	uxth	r3, r3
 801f5ac:	18d3      	adds	r3, r2, r3
 801f5ae:	b29b      	uxth	r3, r3
 801f5b0:	3b01      	subs	r3, #1
 801f5b2:	b29a      	uxth	r2, r3
 801f5b4:	4b3a      	ldr	r3, [pc, #232]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5b6:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f5b8:	e02d      	b.n	801f616 <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f5ba:	4b39      	ldr	r3, [pc, #228]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f5be:	001a      	movs	r2, r3
 801f5c0:	4b39      	ldr	r3, [pc, #228]	; (801f6a8 <SX1276OnDio1Irq+0x198>)
 801f5c2:	18d0      	adds	r0, r2, r3
 801f5c4:	4b36      	ldr	r3, [pc, #216]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f5c8:	b2da      	uxtb	r2, r3
 801f5ca:	4b35      	ldr	r3, [pc, #212]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f5ce:	b2db      	uxtb	r3, r3
 801f5d0:	1ad3      	subs	r3, r2, r3
 801f5d2:	b2db      	uxtb	r3, r3
 801f5d4:	0019      	movs	r1, r3
 801f5d6:	f7ff fc49 	bl	801ee6c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f5da:	4b31      	ldr	r3, [pc, #196]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5dc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f5de:	4b30      	ldr	r3, [pc, #192]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5e0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f5e2:	e018      	b.n	801f616 <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 801f5e4:	4b31      	ldr	r3, [pc, #196]	; (801f6ac <SX1276OnDio1Irq+0x19c>)
 801f5e6:	0018      	movs	r0, r3
 801f5e8:	f7fd fae2 	bl	801cbb0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801f5ec:	2180      	movs	r1, #128	; 0x80
 801f5ee:	2012      	movs	r0, #18
 801f5f0:	f7ff fb60 	bl	801ecb4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801f5f4:	4b2a      	ldr	r3, [pc, #168]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f5f6:	2200      	movs	r2, #0
 801f5f8:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801f5fa:	4b2d      	ldr	r3, [pc, #180]	; (801f6b0 <SX1276OnDio1Irq+0x1a0>)
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d008      	beq.n	801f614 <SX1276OnDio1Irq+0x104>
 801f602:	4b2b      	ldr	r3, [pc, #172]	; (801f6b0 <SX1276OnDio1Irq+0x1a0>)
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	68db      	ldr	r3, [r3, #12]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d003      	beq.n	801f614 <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 801f60c:	4b28      	ldr	r3, [pc, #160]	; (801f6b0 <SX1276OnDio1Irq+0x1a0>)
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	68db      	ldr	r3, [r3, #12]
 801f612:	4798      	blx	r3
                break;
 801f614:	46c0      	nop			; (mov r8, r8)
            break;
 801f616:	e03e      	b.n	801f696 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 801f618:	4b21      	ldr	r3, [pc, #132]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f61a:	795b      	ldrb	r3, [r3, #5]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d002      	beq.n	801f626 <SX1276OnDio1Irq+0x116>
 801f620:	2b01      	cmp	r3, #1
 801f622:	d036      	beq.n	801f692 <SX1276OnDio1Irq+0x182>
                break;
 801f624:	e036      	b.n	801f694 <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801f626:	4b1e      	ldr	r3, [pc, #120]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f628:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f62a:	001a      	movs	r2, r3
 801f62c:	4b1c      	ldr	r3, [pc, #112]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f62e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f630:	1ad3      	subs	r3, r2, r3
 801f632:	4a1b      	ldr	r2, [pc, #108]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f634:	213f      	movs	r1, #63	; 0x3f
 801f636:	5c52      	ldrb	r2, [r2, r1]
 801f638:	4293      	cmp	r3, r2
 801f63a:	dd15      	ble.n	801f668 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801f63c:	4b18      	ldr	r3, [pc, #96]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f63e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f640:	001a      	movs	r2, r3
 801f642:	4b19      	ldr	r3, [pc, #100]	; (801f6a8 <SX1276OnDio1Irq+0x198>)
 801f644:	18d0      	adds	r0, r2, r3
 801f646:	4b16      	ldr	r3, [pc, #88]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f648:	223f      	movs	r2, #63	; 0x3f
 801f64a:	5c9b      	ldrb	r3, [r3, r2]
 801f64c:	0019      	movs	r1, r3
 801f64e:	f7ff fbfb 	bl	801ee48 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801f652:	4b13      	ldr	r3, [pc, #76]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f654:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801f656:	4b12      	ldr	r3, [pc, #72]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f658:	213f      	movs	r1, #63	; 0x3f
 801f65a:	5c5b      	ldrb	r3, [r3, r1]
 801f65c:	b29b      	uxth	r3, r3
 801f65e:	18d3      	adds	r3, r2, r3
 801f660:	b29a      	uxth	r2, r3
 801f662:	4b0f      	ldr	r3, [pc, #60]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f664:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f666:	e015      	b.n	801f694 <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f668:	4b0d      	ldr	r3, [pc, #52]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f66a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f66c:	001a      	movs	r2, r3
 801f66e:	4b0e      	ldr	r3, [pc, #56]	; (801f6a8 <SX1276OnDio1Irq+0x198>)
 801f670:	18d0      	adds	r0, r2, r3
 801f672:	4b0b      	ldr	r3, [pc, #44]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f674:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f676:	b2da      	uxtb	r2, r3
 801f678:	4b09      	ldr	r3, [pc, #36]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f67a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f67c:	b2db      	uxtb	r3, r3
 801f67e:	1ad3      	subs	r3, r2, r3
 801f680:	b2db      	uxtb	r3, r3
 801f682:	0019      	movs	r1, r3
 801f684:	f7ff fbe0 	bl	801ee48 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801f688:	4b05      	ldr	r3, [pc, #20]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f68a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f68c:	4b04      	ldr	r3, [pc, #16]	; (801f6a0 <SX1276OnDio1Irq+0x190>)
 801f68e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f690:	e000      	b.n	801f694 <SX1276OnDio1Irq+0x184>
                break;
 801f692:	46c0      	nop			; (mov r8, r8)
            break;
 801f694:	46c0      	nop			; (mov r8, r8)
    }
}
 801f696:	46c0      	nop			; (mov r8, r8)
 801f698:	46bd      	mov	sp, r7
 801f69a:	b002      	add	sp, #8
 801f69c:	bd80      	pop	{r7, pc}
 801f69e:	46c0      	nop			; (mov r8, r8)
 801f6a0:	200022bc 	.word	0x200022bc
 801f6a4:	200022f6 	.word	0x200022f6
 801f6a8:	20001d8c 	.word	0x20001d8c
 801f6ac:	20002324 	.word	0x20002324
 801f6b0:	20001d88 	.word	0x20001d88

0801f6b4 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 801f6b4:	b590      	push	{r4, r7, lr}
 801f6b6:	b087      	sub	sp, #28
 801f6b8:	af00      	add	r7, sp, #0
 801f6ba:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 801f6bc:	2300      	movs	r3, #0
 801f6be:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 801f6c0:	4b5c      	ldr	r3, [pc, #368]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f6c2:	791b      	ldrb	r3, [r3, #4]
 801f6c4:	2b01      	cmp	r3, #1
 801f6c6:	d003      	beq.n	801f6d0 <SX1276OnDio2Irq+0x1c>
 801f6c8:	2b02      	cmp	r3, #2
 801f6ca:	d100      	bne.n	801f6ce <SX1276OnDio2Irq+0x1a>
 801f6cc:	e083      	b.n	801f7d6 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 801f6ce:	e0ad      	b.n	801f82c <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801f6d0:	4b58      	ldr	r3, [pc, #352]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f6d2:	795b      	ldrb	r3, [r3, #5]
 801f6d4:	2b00      	cmp	r3, #0
 801f6d6:	d002      	beq.n	801f6de <SX1276OnDio2Irq+0x2a>
 801f6d8:	2b01      	cmp	r3, #1
 801f6da:	d058      	beq.n	801f78e <SX1276OnDio2Irq+0xda>
                break;
 801f6dc:	e07a      	b.n	801f7d4 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801f6de:	4b55      	ldr	r3, [pc, #340]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f6e0:	2230      	movs	r2, #48	; 0x30
 801f6e2:	2101      	movs	r1, #1
 801f6e4:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 801f6e6:	4b53      	ldr	r3, [pc, #332]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f6e8:	2230      	movs	r2, #48	; 0x30
 801f6ea:	5c9b      	ldrb	r3, [r3, r2]
 801f6ec:	2b01      	cmp	r3, #1
 801f6ee:	d16e      	bne.n	801f7ce <SX1276OnDio2Irq+0x11a>
 801f6f0:	4b50      	ldr	r3, [pc, #320]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f6f2:	2231      	movs	r2, #49	; 0x31
 801f6f4:	5c9b      	ldrb	r3, [r3, r2]
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d169      	bne.n	801f7ce <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 801f6fa:	4b4f      	ldr	r3, [pc, #316]	; (801f838 <SX1276OnDio2Irq+0x184>)
 801f6fc:	0018      	movs	r0, r3
 801f6fe:	f7fd fa57 	bl	801cbb0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801f702:	4b4c      	ldr	r3, [pc, #304]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f704:	2231      	movs	r2, #49	; 0x31
 801f706:	2101      	movs	r1, #1
 801f708:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801f70a:	2011      	movs	r0, #17
 801f70c:	f7ff fae6 	bl	801ecdc <SX1276Read>
 801f710:	0003      	movs	r3, r0
 801f712:	085b      	lsrs	r3, r3, #1
 801f714:	b2db      	uxtb	r3, r3
 801f716:	425b      	negs	r3, r3
 801f718:	b2db      	uxtb	r3, r3
 801f71a:	b259      	sxtb	r1, r3
 801f71c:	4b45      	ldr	r3, [pc, #276]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f71e:	2232      	movs	r2, #50	; 0x32
 801f720:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801f722:	201b      	movs	r0, #27
 801f724:	f7ff fada 	bl	801ecdc <SX1276Read>
 801f728:	0003      	movs	r3, r0
 801f72a:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801f72c:	201c      	movs	r0, #28
 801f72e:	f7ff fad5 	bl	801ecdc <SX1276Read>
 801f732:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801f734:	4323      	orrs	r3, r4
 801f736:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801f738:	697b      	ldr	r3, [r7, #20]
 801f73a:	0a1b      	lsrs	r3, r3, #8
 801f73c:	613b      	str	r3, [r7, #16]
 801f73e:	693b      	ldr	r3, [r7, #16]
 801f740:	021b      	lsls	r3, r3, #8
 801f742:	697a      	ldr	r2, [r7, #20]
 801f744:	1ad3      	subs	r3, r2, r3
 801f746:	60fb      	str	r3, [r7, #12]
 801f748:	6939      	ldr	r1, [r7, #16]
 801f74a:	000b      	movs	r3, r1
 801f74c:	015b      	lsls	r3, r3, #5
 801f74e:	1a5b      	subs	r3, r3, r1
 801f750:	019a      	lsls	r2, r3, #6
 801f752:	1ad2      	subs	r2, r2, r3
 801f754:	00d2      	lsls	r2, r2, #3
 801f756:	1850      	adds	r0, r2, r1
 801f758:	68f9      	ldr	r1, [r7, #12]
 801f75a:	000b      	movs	r3, r1
 801f75c:	015b      	lsls	r3, r3, #5
 801f75e:	1a5b      	subs	r3, r3, r1
 801f760:	019a      	lsls	r2, r3, #6
 801f762:	1ad2      	subs	r2, r2, r3
 801f764:	00d2      	lsls	r2, r2, #3
 801f766:	1853      	adds	r3, r2, r1
 801f768:	3380      	adds	r3, #128	; 0x80
 801f76a:	0a1b      	lsrs	r3, r3, #8
 801f76c:	18c3      	adds	r3, r0, r3
 801f76e:	001a      	movs	r2, r3
 801f770:	4b30      	ldr	r3, [pc, #192]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f772:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801f774:	200c      	movs	r0, #12
 801f776:	f7ff fab1 	bl	801ecdc <SX1276Read>
 801f77a:	0003      	movs	r3, r0
 801f77c:	095b      	lsrs	r3, r3, #5
 801f77e:	b2db      	uxtb	r3, r3
 801f780:	2207      	movs	r2, #7
 801f782:	4013      	ands	r3, r2
 801f784:	b2d9      	uxtb	r1, r3
 801f786:	4b2b      	ldr	r3, [pc, #172]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f788:	2238      	movs	r2, #56	; 0x38
 801f78a:	5499      	strb	r1, [r3, r2]
                break;
 801f78c:	e01f      	b.n	801f7ce <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801f78e:	4b29      	ldr	r3, [pc, #164]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f790:	2253      	movs	r2, #83	; 0x53
 801f792:	5c9b      	ldrb	r3, [r3, r2]
 801f794:	2b00      	cmp	r3, #0
 801f796:	d01c      	beq.n	801f7d2 <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801f798:	2102      	movs	r1, #2
 801f79a:	2012      	movs	r0, #18
 801f79c:	f7ff fa8a 	bl	801ecb4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801f7a0:	4b26      	ldr	r3, [pc, #152]	; (801f83c <SX1276OnDio2Irq+0x188>)
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d014      	beq.n	801f7d2 <SX1276OnDio2Irq+0x11e>
 801f7a8:	4b24      	ldr	r3, [pc, #144]	; (801f83c <SX1276OnDio2Irq+0x188>)
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	695b      	ldr	r3, [r3, #20]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d00f      	beq.n	801f7d2 <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801f7b2:	4b22      	ldr	r3, [pc, #136]	; (801f83c <SX1276OnDio2Irq+0x188>)
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	695c      	ldr	r4, [r3, #20]
 801f7b8:	201c      	movs	r0, #28
 801f7ba:	f7ff fa8f 	bl	801ecdc <SX1276Read>
 801f7be:	0003      	movs	r3, r0
 801f7c0:	001a      	movs	r2, r3
 801f7c2:	233f      	movs	r3, #63	; 0x3f
 801f7c4:	4013      	ands	r3, r2
 801f7c6:	b2db      	uxtb	r3, r3
 801f7c8:	0018      	movs	r0, r3
 801f7ca:	47a0      	blx	r4
                break;
 801f7cc:	e001      	b.n	801f7d2 <SX1276OnDio2Irq+0x11e>
                break;
 801f7ce:	46c0      	nop			; (mov r8, r8)
 801f7d0:	e02c      	b.n	801f82c <SX1276OnDio2Irq+0x178>
                break;
 801f7d2:	46c0      	nop			; (mov r8, r8)
            break;
 801f7d4:	e02a      	b.n	801f82c <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801f7d6:	4b17      	ldr	r3, [pc, #92]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f7d8:	795b      	ldrb	r3, [r3, #5]
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d022      	beq.n	801f824 <SX1276OnDio2Irq+0x170>
 801f7de:	2b01      	cmp	r3, #1
 801f7e0:	d000      	beq.n	801f7e4 <SX1276OnDio2Irq+0x130>
                break;
 801f7e2:	e022      	b.n	801f82a <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801f7e4:	4b13      	ldr	r3, [pc, #76]	; (801f834 <SX1276OnDio2Irq+0x180>)
 801f7e6:	2253      	movs	r2, #83	; 0x53
 801f7e8:	5c9b      	ldrb	r3, [r3, r2]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d01c      	beq.n	801f828 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801f7ee:	2102      	movs	r1, #2
 801f7f0:	2012      	movs	r0, #18
 801f7f2:	f7ff fa5f 	bl	801ecb4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801f7f6:	4b11      	ldr	r3, [pc, #68]	; (801f83c <SX1276OnDio2Irq+0x188>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	d014      	beq.n	801f828 <SX1276OnDio2Irq+0x174>
 801f7fe:	4b0f      	ldr	r3, [pc, #60]	; (801f83c <SX1276OnDio2Irq+0x188>)
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	695b      	ldr	r3, [r3, #20]
 801f804:	2b00      	cmp	r3, #0
 801f806:	d00f      	beq.n	801f828 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801f808:	4b0c      	ldr	r3, [pc, #48]	; (801f83c <SX1276OnDio2Irq+0x188>)
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	695c      	ldr	r4, [r3, #20]
 801f80e:	201c      	movs	r0, #28
 801f810:	f7ff fa64 	bl	801ecdc <SX1276Read>
 801f814:	0003      	movs	r3, r0
 801f816:	001a      	movs	r2, r3
 801f818:	233f      	movs	r3, #63	; 0x3f
 801f81a:	4013      	ands	r3, r2
 801f81c:	b2db      	uxtb	r3, r3
 801f81e:	0018      	movs	r0, r3
 801f820:	47a0      	blx	r4
                break;
 801f822:	e001      	b.n	801f828 <SX1276OnDio2Irq+0x174>
                break;
 801f824:	46c0      	nop			; (mov r8, r8)
 801f826:	e000      	b.n	801f82a <SX1276OnDio2Irq+0x176>
                break;
 801f828:	46c0      	nop			; (mov r8, r8)
            break;
 801f82a:	46c0      	nop			; (mov r8, r8)
    }
}
 801f82c:	46c0      	nop			; (mov r8, r8)
 801f82e:	46bd      	mov	sp, r7
 801f830:	b007      	add	sp, #28
 801f832:	bd90      	pop	{r4, r7, pc}
 801f834:	200022bc 	.word	0x200022bc
 801f838:	200022a4 	.word	0x200022a4
 801f83c:	20001d88 	.word	0x20001d88

0801f840 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 801f840:	b580      	push	{r7, lr}
 801f842:	b082      	sub	sp, #8
 801f844:	af00      	add	r7, sp, #0
 801f846:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 801f848:	4b1e      	ldr	r3, [pc, #120]	; (801f8c4 <SX1276OnDio3Irq+0x84>)
 801f84a:	795b      	ldrb	r3, [r3, #5]
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d031      	beq.n	801f8b4 <SX1276OnDio3Irq+0x74>
 801f850:	2b01      	cmp	r3, #1
 801f852:	d000      	beq.n	801f856 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801f854:	e031      	b.n	801f8ba <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801f856:	2012      	movs	r0, #18
 801f858:	f7ff fa40 	bl	801ecdc <SX1276Read>
 801f85c:	0003      	movs	r3, r0
 801f85e:	001a      	movs	r2, r3
 801f860:	2301      	movs	r3, #1
 801f862:	4013      	ands	r3, r2
 801f864:	2b01      	cmp	r3, #1
 801f866:	d112      	bne.n	801f88e <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801f868:	2105      	movs	r1, #5
 801f86a:	2012      	movs	r0, #18
 801f86c:	f7ff fa22 	bl	801ecb4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801f870:	4b15      	ldr	r3, [pc, #84]	; (801f8c8 <SX1276OnDio3Irq+0x88>)
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	2b00      	cmp	r3, #0
 801f876:	d01f      	beq.n	801f8b8 <SX1276OnDio3Irq+0x78>
 801f878:	4b13      	ldr	r3, [pc, #76]	; (801f8c8 <SX1276OnDio3Irq+0x88>)
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	699b      	ldr	r3, [r3, #24]
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d01a      	beq.n	801f8b8 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 801f882:	4b11      	ldr	r3, [pc, #68]	; (801f8c8 <SX1276OnDio3Irq+0x88>)
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	699b      	ldr	r3, [r3, #24]
 801f888:	2001      	movs	r0, #1
 801f88a:	4798      	blx	r3
        break;
 801f88c:	e014      	b.n	801f8b8 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801f88e:	2104      	movs	r1, #4
 801f890:	2012      	movs	r0, #18
 801f892:	f7ff fa0f 	bl	801ecb4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801f896:	4b0c      	ldr	r3, [pc, #48]	; (801f8c8 <SX1276OnDio3Irq+0x88>)
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d00c      	beq.n	801f8b8 <SX1276OnDio3Irq+0x78>
 801f89e:	4b0a      	ldr	r3, [pc, #40]	; (801f8c8 <SX1276OnDio3Irq+0x88>)
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	699b      	ldr	r3, [r3, #24]
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d007      	beq.n	801f8b8 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 801f8a8:	4b07      	ldr	r3, [pc, #28]	; (801f8c8 <SX1276OnDio3Irq+0x88>)
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	699b      	ldr	r3, [r3, #24]
 801f8ae:	2000      	movs	r0, #0
 801f8b0:	4798      	blx	r3
        break;
 801f8b2:	e001      	b.n	801f8b8 <SX1276OnDio3Irq+0x78>
        break;
 801f8b4:	46c0      	nop			; (mov r8, r8)
 801f8b6:	e000      	b.n	801f8ba <SX1276OnDio3Irq+0x7a>
        break;
 801f8b8:	46c0      	nop			; (mov r8, r8)
    }
}
 801f8ba:	46c0      	nop			; (mov r8, r8)
 801f8bc:	46bd      	mov	sp, r7
 801f8be:	b002      	add	sp, #8
 801f8c0:	bd80      	pop	{r7, pc}
 801f8c2:	46c0      	nop			; (mov r8, r8)
 801f8c4:	200022bc 	.word	0x200022bc
 801f8c8:	20001d88 	.word	0x20001d88

0801f8cc <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 801f8cc:	b580      	push	{r7, lr}
 801f8ce:	b082      	sub	sp, #8
 801f8d0:	af00      	add	r7, sp, #0
 801f8d2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 801f8d4:	4b0b      	ldr	r3, [pc, #44]	; (801f904 <SX1276OnDio4Irq+0x38>)
 801f8d6:	795b      	ldrb	r3, [r3, #5]
 801f8d8:	2b00      	cmp	r3, #0
 801f8da:	d002      	beq.n	801f8e2 <SX1276OnDio4Irq+0x16>
 801f8dc:	2b01      	cmp	r3, #1
 801f8de:	d00a      	beq.n	801f8f6 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801f8e0:	e00c      	b.n	801f8fc <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801f8e2:	4b08      	ldr	r3, [pc, #32]	; (801f904 <SX1276OnDio4Irq+0x38>)
 801f8e4:	2230      	movs	r2, #48	; 0x30
 801f8e6:	5c9b      	ldrb	r3, [r3, r2]
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d106      	bne.n	801f8fa <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801f8ec:	4b05      	ldr	r3, [pc, #20]	; (801f904 <SX1276OnDio4Irq+0x38>)
 801f8ee:	2230      	movs	r2, #48	; 0x30
 801f8f0:	2101      	movs	r1, #1
 801f8f2:	5499      	strb	r1, [r3, r2]
        break;
 801f8f4:	e001      	b.n	801f8fa <SX1276OnDio4Irq+0x2e>
        break;
 801f8f6:	46c0      	nop			; (mov r8, r8)
 801f8f8:	e000      	b.n	801f8fc <SX1276OnDio4Irq+0x30>
        break;
 801f8fa:	46c0      	nop			; (mov r8, r8)
    }
}
 801f8fc:	46c0      	nop			; (mov r8, r8)
 801f8fe:	46bd      	mov	sp, r7
 801f900:	b002      	add	sp, #8
 801f902:	bd80      	pop	{r7, pc}
 801f904:	200022bc 	.word	0x200022bc

0801f908 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 801f908:	b5b0      	push	{r4, r5, r7, lr}
 801f90a:	b084      	sub	sp, #16
 801f90c:	af00      	add	r7, sp, #0
 801f90e:	6078      	str	r0, [r7, #4]
 801f910:	000a      	movs	r2, r1
 801f912:	1cfb      	adds	r3, r7, #3
 801f914:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 801f916:	1cfb      	adds	r3, r7, #3
 801f918:	781b      	ldrb	r3, [r3, #0]
 801f91a:	2b01      	cmp	r3, #1
 801f91c:	d000      	beq.n	801f920 <_itsdk_console_private+0x18>
 801f91e:	e0d1      	b.n	801fac4 <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	781b      	ldrb	r3, [r3, #0]
 801f924:	3b3f      	subs	r3, #63	; 0x3f
 801f926:	2b35      	cmp	r3, #53	; 0x35
 801f928:	d900      	bls.n	801f92c <_itsdk_console_private+0x24>
 801f92a:	e0e5      	b.n	801faf8 <_itsdk_console_private+0x1f0>
 801f92c:	009a      	lsls	r2, r3, #2
 801f92e:	4b78      	ldr	r3, [pc, #480]	; (801fb10 <_itsdk_console_private+0x208>)
 801f930:	18d3      	adds	r3, r2, r3
 801f932:	681b      	ldr	r3, [r3, #0]
 801f934:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 801f936:	4b77      	ldr	r3, [pc, #476]	; (801fb14 <_itsdk_console_private+0x20c>)
 801f938:	0018      	movs	r0, r3
 801f93a:	f000 fa0f 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 801f93e:	4b76      	ldr	r3, [pc, #472]	; (801fb18 <_itsdk_console_private+0x210>)
 801f940:	0018      	movs	r0, r3
 801f942:	f000 fa0b 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 801f946:	4b75      	ldr	r3, [pc, #468]	; (801fb1c <_itsdk_console_private+0x214>)
 801f948:	0018      	movs	r0, r3
 801f94a:	f000 fa07 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 801f94e:	4b74      	ldr	r3, [pc, #464]	; (801fb20 <_itsdk_console_private+0x218>)
 801f950:	0018      	movs	r0, r3
 801f952:	f000 fa03 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 801f956:	4b73      	ldr	r3, [pc, #460]	; (801fb24 <_itsdk_console_private+0x21c>)
 801f958:	0018      	movs	r0, r3
 801f95a:	f000 f9ff 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 801f95e:	4b72      	ldr	r3, [pc, #456]	; (801fb28 <_itsdk_console_private+0x220>)
 801f960:	0018      	movs	r0, r3
 801f962:	f000 f9fb 	bl	801fd5c <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 801f966:	4b71      	ldr	r3, [pc, #452]	; (801fb2c <_itsdk_console_private+0x224>)
 801f968:	0018      	movs	r0, r3
 801f96a:	f000 f9f7 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 801f96e:	4b70      	ldr	r3, [pc, #448]	; (801fb30 <_itsdk_console_private+0x228>)
 801f970:	0018      	movs	r0, r3
 801f972:	f000 f9f3 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 801f976:	4b6f      	ldr	r3, [pc, #444]	; (801fb34 <_itsdk_console_private+0x22c>)
 801f978:	0018      	movs	r0, r3
 801f97a:	f000 f9ef 	bl	801fd5c <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 801f97e:	4b6e      	ldr	r3, [pc, #440]	; (801fb38 <_itsdk_console_private+0x230>)
 801f980:	0018      	movs	r0, r3
 801f982:	f000 f9eb 	bl	801fd5c <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 801f986:	2300      	movs	r3, #0
 801f988:	e0bd      	b.n	801fb06 <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 801f98a:	4b6c      	ldr	r3, [pc, #432]	; (801fb3c <_itsdk_console_private+0x234>)
 801f98c:	781a      	ldrb	r2, [r3, #0]
 801f98e:	2101      	movs	r1, #1
 801f990:	438a      	bics	r2, r1
 801f992:	701a      	strb	r2, [r3, #0]
			goto success;
 801f994:	e0b2      	b.n	801fafc <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 801f996:	f004 faa1 	bl	8023edc <itsdk_time_get_ms>
 801f99a:	22fa      	movs	r2, #250	; 0xfa
 801f99c:	0092      	lsls	r2, r2, #2
 801f99e:	2300      	movs	r3, #0
 801f9a0:	f7e0 fdcc 	bl	800053c <__aeabi_uldivmod>
 801f9a4:	0003      	movs	r3, r0
 801f9a6:	000c      	movs	r4, r1
 801f9a8:	001a      	movs	r2, r3
 801f9aa:	4b65      	ldr	r3, [pc, #404]	; (801fb40 <_itsdk_console_private+0x238>)
 801f9ac:	0011      	movs	r1, r2
 801f9ae:	0018      	movs	r0, r3
 801f9b0:	f000 f9d4 	bl	801fd5c <_itsdk_console_printf>
			goto success;
 801f9b4:	e0a2      	b.n	801fafc <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 801f9b6:	f004 fda3 	bl	8024500 <adc_getTemperature>
 801f9ba:	0003      	movs	r3, r0
 801f9bc:	001a      	movs	r2, r3
 801f9be:	240e      	movs	r4, #14
 801f9c0:	193b      	adds	r3, r7, r4
 801f9c2:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 801f9c4:	193b      	adds	r3, r7, r4
 801f9c6:	881b      	ldrh	r3, [r3, #0]
 801f9c8:	2164      	movs	r1, #100	; 0x64
 801f9ca:	0018      	movs	r0, r3
 801f9cc:	f7e0 fba4 	bl	8000118 <__udivsi3>
 801f9d0:	0003      	movs	r3, r0
 801f9d2:	b29b      	uxth	r3, r3
 801f9d4:	001d      	movs	r5, r3
 801f9d6:	0022      	movs	r2, r4
 801f9d8:	18bb      	adds	r3, r7, r2
 801f9da:	881c      	ldrh	r4, [r3, #0]
 801f9dc:	18bb      	adds	r3, r7, r2
 801f9de:	881b      	ldrh	r3, [r3, #0]
 801f9e0:	2164      	movs	r1, #100	; 0x64
 801f9e2:	0018      	movs	r0, r3
 801f9e4:	f7e0 fb98 	bl	8000118 <__udivsi3>
 801f9e8:	0003      	movs	r3, r0
 801f9ea:	b29b      	uxth	r3, r3
 801f9ec:	001a      	movs	r2, r3
 801f9ee:	0013      	movs	r3, r2
 801f9f0:	065b      	lsls	r3, r3, #25
 801f9f2:	1a9b      	subs	r3, r3, r2
 801f9f4:	009b      	lsls	r3, r3, #2
 801f9f6:	189b      	adds	r3, r3, r2
 801f9f8:	00db      	lsls	r3, r3, #3
 801f9fa:	1a9b      	subs	r3, r3, r2
 801f9fc:	009b      	lsls	r3, r3, #2
 801f9fe:	18e2      	adds	r2, r4, r3
 801fa00:	4b50      	ldr	r3, [pc, #320]	; (801fb44 <_itsdk_console_private+0x23c>)
 801fa02:	0029      	movs	r1, r5
 801fa04:	0018      	movs	r0, r3
 801fa06:	f000 f9a9 	bl	801fd5c <_itsdk_console_printf>
			goto success;
 801fa0a:	e077      	b.n	801fafc <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 801fa0c:	f004 fe00 	bl	8024610 <adc_getVBat>
 801fa10:	0003      	movs	r3, r0
 801fa12:	001a      	movs	r2, r3
 801fa14:	4b4c      	ldr	r3, [pc, #304]	; (801fb48 <_itsdk_console_private+0x240>)
 801fa16:	0011      	movs	r1, r2
 801fa18:	0018      	movs	r0, r3
 801fa1a:	f000 f99f 	bl	801fd5c <_itsdk_console_printf>
			goto success;
 801fa1e:	e06d      	b.n	801fafc <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 801fa20:	f004 fdc6 	bl	80245b0 <adc_getVdd>
 801fa24:	0003      	movs	r3, r0
 801fa26:	001a      	movs	r2, r3
 801fa28:	4b48      	ldr	r3, [pc, #288]	; (801fb4c <_itsdk_console_private+0x244>)
 801fa2a:	0011      	movs	r1, r2
 801fa2c:	0018      	movs	r0, r3
 801fa2e:	f000 f995 	bl	801fd5c <_itsdk_console_printf>
			goto success;
 801fa32:	e063      	b.n	801fafc <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 801fa34:	4b46      	ldr	r3, [pc, #280]	; (801fb50 <_itsdk_console_private+0x248>)
 801fa36:	0018      	movs	r0, r3
 801fa38:	f000 f990 	bl	801fd5c <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 801fa3c:	4b45      	ldr	r3, [pc, #276]	; (801fb54 <_itsdk_console_private+0x24c>)
 801fa3e:	781b      	ldrb	r3, [r3, #0]
 801fa40:	2b06      	cmp	r3, #6
 801fa42:	d827      	bhi.n	801fa94 <_itsdk_console_private+0x18c>
 801fa44:	009a      	lsls	r2, r3, #2
 801fa46:	4b44      	ldr	r3, [pc, #272]	; (801fb58 <_itsdk_console_private+0x250>)
 801fa48:	18d3      	adds	r3, r2, r3
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 801fa4e:	4b43      	ldr	r3, [pc, #268]	; (801fb5c <_itsdk_console_private+0x254>)
 801fa50:	0018      	movs	r0, r3
 801fa52:	f000 f983 	bl	801fd5c <_itsdk_console_printf>
 801fa56:	e022      	b.n	801fa9e <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 801fa58:	4b41      	ldr	r3, [pc, #260]	; (801fb60 <_itsdk_console_private+0x258>)
 801fa5a:	0018      	movs	r0, r3
 801fa5c:	f000 f97e 	bl	801fd5c <_itsdk_console_printf>
 801fa60:	e01d      	b.n	801fa9e <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 801fa62:	4b40      	ldr	r3, [pc, #256]	; (801fb64 <_itsdk_console_private+0x25c>)
 801fa64:	0018      	movs	r0, r3
 801fa66:	f000 f979 	bl	801fd5c <_itsdk_console_printf>
 801fa6a:	e018      	b.n	801fa9e <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 801fa6c:	4b3e      	ldr	r3, [pc, #248]	; (801fb68 <_itsdk_console_private+0x260>)
 801fa6e:	0018      	movs	r0, r3
 801fa70:	f000 f974 	bl	801fd5c <_itsdk_console_printf>
 801fa74:	e013      	b.n	801fa9e <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 801fa76:	4b3d      	ldr	r3, [pc, #244]	; (801fb6c <_itsdk_console_private+0x264>)
 801fa78:	0018      	movs	r0, r3
 801fa7a:	f000 f96f 	bl	801fd5c <_itsdk_console_printf>
 801fa7e:	e00e      	b.n	801fa9e <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 801fa80:	4b3b      	ldr	r3, [pc, #236]	; (801fb70 <_itsdk_console_private+0x268>)
 801fa82:	0018      	movs	r0, r3
 801fa84:	f000 f96a 	bl	801fd5c <_itsdk_console_printf>
 801fa88:	e009      	b.n	801fa9e <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 801fa8a:	4b3a      	ldr	r3, [pc, #232]	; (801fb74 <_itsdk_console_private+0x26c>)
 801fa8c:	0018      	movs	r0, r3
 801fa8e:	f000 f965 	bl	801fd5c <_itsdk_console_printf>
 801fa92:	e004      	b.n	801fa9e <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 801fa94:	4b38      	ldr	r3, [pc, #224]	; (801fb78 <_itsdk_console_private+0x270>)
 801fa96:	0018      	movs	r0, r3
 801fa98:	f000 f960 	bl	801fd5c <_itsdk_console_printf>
 801fa9c:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 801fa9e:	e02d      	b.n	801fafc <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 801faa0:	4b36      	ldr	r3, [pc, #216]	; (801fb7c <_itsdk_console_private+0x274>)
 801faa2:	0018      	movs	r0, r3
 801faa4:	f000 f95a 	bl	801fd5c <_itsdk_console_printf>
			itsdk_reset();
 801faa8:	f005 fa70 	bl	8024f8c <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 801faac:	4b34      	ldr	r3, [pc, #208]	; (801fb80 <_itsdk_console_private+0x278>)
 801faae:	0018      	movs	r0, r3
 801fab0:	f000 f954 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801fab4:	2302      	movs	r3, #2
 801fab6:	e026      	b.n	801fb06 <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 801fab8:	f003 fdaa 	bl	8023610 <lowPower_enable>
			goto success;
 801fabc:	e01e      	b.n	801fafc <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 801fabe:	f003 fdb1 	bl	8023624 <lowPower_disable>
			goto success;
 801fac2:	e01b      	b.n	801fafc <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 801fac4:	1cfb      	adds	r3, r7, #3
 801fac6:	781b      	ldrb	r3, [r3, #0]
 801fac8:	2b02      	cmp	r3, #2
 801faca:	d115      	bne.n	801faf8 <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	781b      	ldrb	r3, [r3, #0]
 801fad0:	2b52      	cmp	r3, #82	; 0x52
 801fad2:	d111      	bne.n	801faf8 <_itsdk_console_private+0x1f0>
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	3301      	adds	r3, #1
 801fad8:	781b      	ldrb	r3, [r3, #0]
 801fada:	2b21      	cmp	r3, #33	; 0x21
 801fadc:	d10c      	bne.n	801faf8 <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 801fade:	4b27      	ldr	r3, [pc, #156]	; (801fb7c <_itsdk_console_private+0x274>)
 801fae0:	0018      	movs	r0, r3
 801fae2:	f000 f93b 	bl	801fd5c <_itsdk_console_printf>
			eeprom_clearAllEprom();
 801fae6:	f000 fc23 	bl	8020330 <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 801faea:	2064      	movs	r0, #100	; 0x64
 801faec:	f005 faa0 	bl	8025030 <itsdk_delayMs>
			itsdk_reset();
 801faf0:	f005 fa4c 	bl	8024f8c <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 801faf4:	2302      	movs	r3, #2
 801faf6:	e006      	b.n	801fb06 <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 801faf8:	2301      	movs	r3, #1
 801fafa:	e004      	b.n	801fb06 <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 801fafc:	4b1f      	ldr	r3, [pc, #124]	; (801fb7c <_itsdk_console_private+0x274>)
 801fafe:	0018      	movs	r0, r3
 801fb00:	f000 f92c 	bl	801fd5c <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 801fb04:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 801fb06:	0018      	movs	r0, r3
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	b004      	add	sp, #16
 801fb0c:	bdb0      	pop	{r4, r5, r7, pc}
 801fb0e:	46c0      	nop			; (mov r8, r8)
 801fb10:	08029550 	.word	0x08029550
 801fb14:	08027658 	.word	0x08027658
 801fb18:	08027674 	.word	0x08027674
 801fb1c:	08027690 	.word	0x08027690
 801fb20:	080276b8 	.word	0x080276b8
 801fb24:	080276e0 	.word	0x080276e0
 801fb28:	08027704 	.word	0x08027704
 801fb2c:	0802772c 	.word	0x0802772c
 801fb30:	08027760 	.word	0x08027760
 801fb34:	08027784 	.word	0x08027784
 801fb38:	080277a4 	.word	0x080277a4
 801fb3c:	20001e90 	.word	0x20001e90
 801fb40:	080277cc 	.word	0x080277cc
 801fb44:	080277e0 	.word	0x080277e0
 801fb48:	080277fc 	.word	0x080277fc
 801fb4c:	08027814 	.word	0x08027814
 801fb50:	08027828 	.word	0x08027828
 801fb54:	20002378 	.word	0x20002378
 801fb58:	08029628 	.word	0x08029628
 801fb5c:	08027830 	.word	0x08027830
 801fb60:	08027838 	.word	0x08027838
 801fb64:	08027844 	.word	0x08027844
 801fb68:	08027850 	.word	0x08027850
 801fb6c:	08027858 	.word	0x08027858
 801fb70:	08027860 	.word	0x08027860
 801fb74:	08027868 	.word	0x08027868
 801fb78:	08027874 	.word	0x08027874
 801fb7c:	08027880 	.word	0x08027880
 801fb80:	08027888 	.word	0x08027888

0801fb84 <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 801fb84:	b580      	push	{r7, lr}
 801fb86:	b082      	sub	sp, #8
 801fb88:	af00      	add	r7, sp, #0
 801fb8a:	6078      	str	r0, [r7, #4]
 801fb8c:	000a      	movs	r2, r1
 801fb8e:	1cfb      	adds	r3, r7, #3
 801fb90:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 801fb92:	1cfb      	adds	r3, r7, #3
 801fb94:	781b      	ldrb	r3, [r3, #0]
 801fb96:	2b01      	cmp	r3, #1
 801fb98:	d14c      	bne.n	801fc34 <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	781b      	ldrb	r3, [r3, #0]
 801fb9e:	2b6f      	cmp	r3, #111	; 0x6f
 801fba0:	d020      	beq.n	801fbe4 <_itsdk_console_public+0x60>
 801fba2:	dc04      	bgt.n	801fbae <_itsdk_console_public+0x2a>
 801fba4:	2b21      	cmp	r3, #33	; 0x21
 801fba6:	d023      	beq.n	801fbf0 <_itsdk_console_public+0x6c>
 801fba8:	2b3f      	cmp	r3, #63	; 0x3f
 801fbaa:	d005      	beq.n	801fbb8 <_itsdk_console_public+0x34>
 801fbac:	e042      	b.n	801fc34 <_itsdk_console_public+0xb0>
 801fbae:	2b73      	cmp	r3, #115	; 0x73
 801fbb0:	d03c      	beq.n	801fc2c <_itsdk_console_public+0xa8>
 801fbb2:	2b76      	cmp	r3, #118	; 0x76
 801fbb4:	d026      	beq.n	801fc04 <_itsdk_console_public+0x80>
 801fbb6:	e03d      	b.n	801fc34 <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 801fbb8:	4b21      	ldr	r3, [pc, #132]	; (801fc40 <_itsdk_console_public+0xbc>)
 801fbba:	0018      	movs	r0, r3
 801fbbc:	f000 f8ce 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 801fbc0:	4b20      	ldr	r3, [pc, #128]	; (801fc44 <_itsdk_console_public+0xc0>)
 801fbc2:	0018      	movs	r0, r3
 801fbc4:	f000 f8ca 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 801fbc8:	4b1f      	ldr	r3, [pc, #124]	; (801fc48 <_itsdk_console_public+0xc4>)
 801fbca:	0018      	movs	r0, r3
 801fbcc:	f000 f8c6 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 801fbd0:	4b1e      	ldr	r3, [pc, #120]	; (801fc4c <_itsdk_console_public+0xc8>)
 801fbd2:	0018      	movs	r0, r3
 801fbd4:	f000 f8c2 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 801fbd8:	4b1d      	ldr	r3, [pc, #116]	; (801fc50 <_itsdk_console_public+0xcc>)
 801fbda:	0018      	movs	r0, r3
 801fbdc:	f000 f8be 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fbe0:	2300      	movs	r3, #0
 801fbe2:	e028      	b.n	801fc36 <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 801fbe4:	4b1b      	ldr	r3, [pc, #108]	; (801fc54 <_itsdk_console_public+0xd0>)
 801fbe6:	0018      	movs	r0, r3
 801fbe8:	f000 f8b8 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fbec:	2300      	movs	r3, #0
 801fbee:	e022      	b.n	801fc36 <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 801fbf0:	4b19      	ldr	r3, [pc, #100]	; (801fc58 <_itsdk_console_public+0xd4>)
 801fbf2:	0018      	movs	r0, r3
 801fbf4:	f000 f8b2 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 801fbf8:	4b18      	ldr	r3, [pc, #96]	; (801fc5c <_itsdk_console_public+0xd8>)
 801fbfa:	0018      	movs	r0, r3
 801fbfc:	f000 f8ae 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fc00:	2300      	movs	r3, #0
 801fc02:	e018      	b.n	801fc36 <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 801fc04:	4a16      	ldr	r2, [pc, #88]	; (801fc60 <_itsdk_console_public+0xdc>)
 801fc06:	4b17      	ldr	r3, [pc, #92]	; (801fc64 <_itsdk_console_public+0xe0>)
 801fc08:	0011      	movs	r1, r2
 801fc0a:	0018      	movs	r0, r3
 801fc0c:	f000 f8a6 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 801fc10:	4a15      	ldr	r2, [pc, #84]	; (801fc68 <_itsdk_console_public+0xe4>)
 801fc12:	4916      	ldr	r1, [pc, #88]	; (801fc6c <_itsdk_console_public+0xe8>)
 801fc14:	4b16      	ldr	r3, [pc, #88]	; (801fc70 <_itsdk_console_public+0xec>)
 801fc16:	0018      	movs	r0, r3
 801fc18:	f000 f8a0 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 801fc1c:	4a15      	ldr	r2, [pc, #84]	; (801fc74 <_itsdk_console_public+0xf0>)
 801fc1e:	4b16      	ldr	r3, [pc, #88]	; (801fc78 <_itsdk_console_public+0xf4>)
 801fc20:	0011      	movs	r1, r2
 801fc22:	0018      	movs	r0, r3
 801fc24:	f000 f89a 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fc28:	2300      	movs	r3, #0
 801fc2a:	e004      	b.n	801fc36 <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 801fc2c:	f001 f852 	bl	8020cd4 <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 801fc30:	2300      	movs	r3, #0
 801fc32:	e000      	b.n	801fc36 <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 801fc34:	2301      	movs	r3, #1
}
 801fc36:	0018      	movs	r0, r3
 801fc38:	46bd      	mov	sp, r7
 801fc3a:	b002      	add	sp, #8
 801fc3c:	bd80      	pop	{r7, pc}
 801fc3e:	46c0      	nop			; (mov r8, r8)
 801fc40:	08027890 	.word	0x08027890
 801fc44:	080278a0 	.word	0x080278a0
 801fc48:	080278bc 	.word	0x080278bc
 801fc4c:	080278dc 	.word	0x080278dc
 801fc50:	080278fc 	.word	0x080278fc
 801fc54:	08027880 	.word	0x08027880
 801fc58:	08027914 	.word	0x08027914
 801fc5c:	08027944 	.word	0x08027944
 801fc60:	0802795c 	.word	0x0802795c
 801fc64:	08027960 	.word	0x08027960
 801fc68:	08027970 	.word	0x08027970
 801fc6c:	0802797c 	.word	0x0802797c
 801fc70:	08027988 	.word	0x08027988
 801fc74:	08027998 	.word	0x08027998
 801fc78:	080279a8 	.word	0x080279a8

0801fc7c <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 801fc7c:	b580      	push	{r7, lr}
 801fc7e:	af00      	add	r7, sp, #0
	__console.expire = 0;
 801fc80:	4b0c      	ldr	r3, [pc, #48]	; (801fcb4 <itsdk_console_setup+0x38>)
 801fc82:	2200      	movs	r2, #0
 801fc84:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 801fc86:	4b0b      	ldr	r3, [pc, #44]	; (801fcb4 <itsdk_console_setup+0x38>)
 801fc88:	781a      	ldrb	r2, [r3, #0]
 801fc8a:	2101      	movs	r1, #1
 801fc8c:	438a      	bics	r2, r1
 801fc8e:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 801fc90:	4b08      	ldr	r3, [pc, #32]	; (801fcb4 <itsdk_console_setup+0x38>)
 801fc92:	781a      	ldrb	r2, [r3, #0]
 801fc94:	2101      	movs	r1, #1
 801fc96:	400a      	ands	r2, r1
 801fc98:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 801fc9a:	4b07      	ldr	r3, [pc, #28]	; (801fcb8 <itsdk_console_setup+0x3c>)
 801fc9c:	4a07      	ldr	r2, [pc, #28]	; (801fcbc <itsdk_console_setup+0x40>)
 801fc9e:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 801fca0:	4b05      	ldr	r3, [pc, #20]	; (801fcb8 <itsdk_console_setup+0x3c>)
 801fca2:	4a07      	ldr	r2, [pc, #28]	; (801fcc0 <itsdk_console_setup+0x44>)
 801fca4:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 801fca6:	4b04      	ldr	r3, [pc, #16]	; (801fcb8 <itsdk_console_setup+0x3c>)
 801fca8:	2200      	movs	r2, #0
 801fcaa:	609a      	str	r2, [r3, #8]
}
 801fcac:	46c0      	nop			; (mov r8, r8)
 801fcae:	46bd      	mov	sp, r7
 801fcb0:	bd80      	pop	{r7, pc}
 801fcb2:	46c0      	nop			; (mov r8, r8)
 801fcb4:	20001e90 	.word	0x20001e90
 801fcb8:	20001ec0 	.word	0x20001ec0
 801fcbc:	0801f909 	.word	0x0801f909
 801fcc0:	0801fb85 	.word	0x0801fb85

0801fcc4 <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 801fcc4:	b5b0      	push	{r4, r5, r7, lr}
 801fcc6:	b084      	sub	sp, #16
 801fcc8:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 801fcca:	4b22      	ldr	r3, [pc, #136]	; (801fd54 <itsdk_console_loop+0x90>)
 801fccc:	781b      	ldrb	r3, [r3, #0]
 801fcce:	2201      	movs	r2, #1
 801fcd0:	4013      	ands	r3, r2
 801fcd2:	b2db      	uxtb	r3, r3
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d021      	beq.n	801fd1c <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 801fcd8:	f004 f900 	bl	8023edc <itsdk_time_get_ms>
 801fcdc:	22fa      	movs	r2, #250	; 0xfa
 801fcde:	0092      	lsls	r2, r2, #2
 801fce0:	2300      	movs	r3, #0
 801fce2:	f7e0 fc2b 	bl	800053c <__aeabi_uldivmod>
 801fce6:	0002      	movs	r2, r0
 801fce8:	000b      	movs	r3, r1
 801fcea:	60ba      	str	r2, [r7, #8]
 801fcec:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 801fcee:	4b19      	ldr	r3, [pc, #100]	; (801fd54 <itsdk_console_loop+0x90>)
 801fcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fcf2:	001c      	movs	r4, r3
 801fcf4:	2300      	movs	r3, #0
 801fcf6:	001d      	movs	r5, r3
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	42ab      	cmp	r3, r5
 801fcfc:	d805      	bhi.n	801fd0a <itsdk_console_loop+0x46>
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	42ab      	cmp	r3, r5
 801fd02:	d10b      	bne.n	801fd1c <itsdk_console_loop+0x58>
 801fd04:	68bb      	ldr	r3, [r7, #8]
 801fd06:	42a3      	cmp	r3, r4
 801fd08:	d908      	bls.n	801fd1c <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 801fd0a:	4b12      	ldr	r3, [pc, #72]	; (801fd54 <itsdk_console_loop+0x90>)
 801fd0c:	781a      	ldrb	r2, [r3, #0]
 801fd0e:	2101      	movs	r1, #1
 801fd10:	438a      	bics	r2, r1
 801fd12:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 801fd14:	4b10      	ldr	r3, [pc, #64]	; (801fd58 <itsdk_console_loop+0x94>)
 801fd16:	0018      	movs	r0, r3
 801fd18:	f000 f820 	bl	801fd5c <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 801fd1c:	1dfc      	adds	r4, r7, #7
 801fd1e:	1dbb      	adds	r3, r7, #6
 801fd20:	0018      	movs	r0, r3
 801fd22:	f005 fa61 	bl	80251e8 <serial2_read>
 801fd26:	0003      	movs	r3, r0
 801fd28:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 801fd2a:	1dfb      	adds	r3, r7, #7
 801fd2c:	781b      	ldrb	r3, [r3, #0]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d003      	beq.n	801fd3a <itsdk_console_loop+0x76>
 801fd32:	1dfb      	adds	r3, r7, #7
 801fd34:	781b      	ldrb	r3, [r3, #0]
 801fd36:	2b01      	cmp	r3, #1
 801fd38:	d104      	bne.n	801fd44 <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 801fd3a:	1dbb      	adds	r3, r7, #6
 801fd3c:	781b      	ldrb	r3, [r3, #0]
 801fd3e:	0018      	movs	r0, r3
 801fd40:	f000 f97e 	bl	8020040 <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 801fd44:	1dfb      	adds	r3, r7, #7
 801fd46:	781b      	ldrb	r3, [r3, #0]
 801fd48:	2b01      	cmp	r3, #1
 801fd4a:	d0e7      	beq.n	801fd1c <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 801fd4c:	46c0      	nop			; (mov r8, r8)
 801fd4e:	46bd      	mov	sp, r7
 801fd50:	b004      	add	sp, #16
 801fd52:	bdb0      	pop	{r4, r5, r7, pc}
 801fd54:	20001e90 	.word	0x20001e90
 801fd58:	080279bc 	.word	0x080279bc

0801fd5c <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 801fd5c:	b40f      	push	{r0, r1, r2, r3}
 801fd5e:	b580      	push	{r7, lr}
 801fd60:	b096      	sub	sp, #88	; 0x58
 801fd62:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 801fd64:	2364      	movs	r3, #100	; 0x64
 801fd66:	18fb      	adds	r3, r7, r3
 801fd68:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801fd6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fd6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fd6e:	1d38      	adds	r0, r7, #4
 801fd70:	2150      	movs	r1, #80	; 0x50
 801fd72:	f006 f927 	bl	8025fc4 <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 801fd76:	1d3b      	adds	r3, r7, #4
 801fd78:	0018      	movs	r0, r3
 801fd7a:	f005 fa1d 	bl	80251b8 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 801fd7e:	46c0      	nop			; (mov r8, r8)
 801fd80:	46bd      	mov	sp, r7
 801fd82:	b016      	add	sp, #88	; 0x58
 801fd84:	bc80      	pop	{r7}
 801fd86:	bc08      	pop	{r3}
 801fd88:	b004      	add	sp, #16
 801fd8a:	4718      	bx	r3

0801fd8c <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 801fd8c:	b5b0      	push	{r4, r5, r7, lr}
 801fd8e:	b090      	sub	sp, #64	; 0x40
 801fd90:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 801fd92:	4ba5      	ldr	r3, [pc, #660]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fd94:	781b      	ldrb	r3, [r3, #0]
 801fd96:	2201      	movs	r2, #1
 801fd98:	4393      	bics	r3, r2
 801fd9a:	b2db      	uxtb	r3, r3
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d100      	bne.n	801fda2 <_itsdk_console_processLine+0x16>
 801fda0:	e13d      	b.n	802001e <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 801fda2:	4ba1      	ldr	r3, [pc, #644]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fda4:	781b      	ldrb	r3, [r3, #0]
 801fda6:	2201      	movs	r2, #1
 801fda8:	4393      	bics	r3, r2
 801fdaa:	b2db      	uxtb	r3, r3
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d01d      	beq.n	801fdec <_itsdk_console_processLine+0x60>
 801fdb0:	4b9d      	ldr	r3, [pc, #628]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fdb2:	781b      	ldrb	r3, [r3, #0]
 801fdb4:	061b      	lsls	r3, r3, #24
 801fdb6:	0e5b      	lsrs	r3, r3, #25
 801fdb8:	b2db      	uxtb	r3, r3
 801fdba:	3b01      	subs	r3, #1
 801fdbc:	4a9a      	ldr	r2, [pc, #616]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fdbe:	18d3      	adds	r3, r2, r3
 801fdc0:	785b      	ldrb	r3, [r3, #1]
 801fdc2:	2b0d      	cmp	r3, #13
 801fdc4:	d112      	bne.n	801fdec <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 801fdc6:	4b98      	ldr	r3, [pc, #608]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	061b      	lsls	r3, r3, #24
 801fdcc:	0e5b      	lsrs	r3, r3, #25
 801fdce:	b2db      	uxtb	r3, r3
 801fdd0:	337f      	adds	r3, #127	; 0x7f
 801fdd2:	1c1a      	adds	r2, r3, #0
 801fdd4:	237f      	movs	r3, #127	; 0x7f
 801fdd6:	4013      	ands	r3, r2
 801fdd8:	b2da      	uxtb	r2, r3
 801fdda:	4b93      	ldr	r3, [pc, #588]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fddc:	1890      	adds	r0, r2, r2
 801fdde:	781a      	ldrb	r2, [r3, #0]
 801fde0:	2101      	movs	r1, #1
 801fde2:	400a      	ands	r2, r1
 801fde4:	1c11      	adds	r1, r2, #0
 801fde6:	1c02      	adds	r2, r0, #0
 801fde8:	430a      	orrs	r2, r1
 801fdea:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 801fdec:	4b8e      	ldr	r3, [pc, #568]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fdee:	781b      	ldrb	r3, [r3, #0]
 801fdf0:	061b      	lsls	r3, r3, #24
 801fdf2:	0e5b      	lsrs	r3, r3, #25
 801fdf4:	b2db      	uxtb	r3, r3
 801fdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdf8:	e008      	b.n	801fe0c <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 801fdfa:	4a8b      	ldr	r2, [pc, #556]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdfe:	18d3      	adds	r3, r2, r3
 801fe00:	3301      	adds	r3, #1
 801fe02:	2200      	movs	r2, #0
 801fe04:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 801fe06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe08:	3301      	adds	r3, #1
 801fe0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fe0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe0e:	2b27      	cmp	r3, #39	; 0x27
 801fe10:	ddf3      	ble.n	801fdfa <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 801fe12:	4b85      	ldr	r3, [pc, #532]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe14:	781b      	ldrb	r3, [r3, #0]
 801fe16:	2201      	movs	r2, #1
 801fe18:	4013      	ands	r3, r2
 801fe1a:	b2db      	uxtb	r3, r3
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d000      	beq.n	801fe22 <_itsdk_console_processLine+0x96>
 801fe20:	e08e      	b.n	801ff40 <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 801fe22:	4b81      	ldr	r3, [pc, #516]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe24:	781b      	ldrb	r3, [r3, #0]
 801fe26:	061b      	lsls	r3, r3, #24
 801fe28:	0e5b      	lsrs	r3, r3, #25
 801fe2a:	b2db      	uxtb	r3, r3
 801fe2c:	2b0f      	cmp	r3, #15
 801fe2e:	d82e      	bhi.n	801fe8e <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 801fe30:	4b7d      	ldr	r3, [pc, #500]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe32:	781a      	ldrb	r2, [r3, #0]
 801fe34:	2101      	movs	r1, #1
 801fe36:	430a      	orrs	r2, r1
 801fe38:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 801fe3a:	003b      	movs	r3, r7
 801fe3c:	0019      	movs	r1, r3
 801fe3e:	2000      	movs	r0, #0
 801fe40:	f001 f8d4 	bl	8020fec <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 801fe44:	2300      	movs	r3, #0
 801fe46:	63bb      	str	r3, [r7, #56]	; 0x38
 801fe48:	e019      	b.n	801fe7e <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 801fe4a:	4a77      	ldr	r2, [pc, #476]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe4e:	18d3      	adds	r3, r2, r3
 801fe50:	3301      	adds	r3, #1
 801fe52:	781a      	ldrb	r2, [r3, #0]
 801fe54:	0039      	movs	r1, r7
 801fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe58:	18cb      	adds	r3, r1, r3
 801fe5a:	781b      	ldrb	r3, [r3, #0]
 801fe5c:	429a      	cmp	r2, r3
 801fe5e:	d00b      	beq.n	801fe78 <_itsdk_console_processLine+0xec>
 801fe60:	4b71      	ldr	r3, [pc, #452]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe62:	781b      	ldrb	r3, [r3, #0]
 801fe64:	2201      	movs	r2, #1
 801fe66:	4013      	ands	r3, r2
 801fe68:	b2db      	uxtb	r3, r3
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d004      	beq.n	801fe78 <_itsdk_console_processLine+0xec>
 801fe6e:	4b6e      	ldr	r3, [pc, #440]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe70:	781a      	ldrb	r2, [r3, #0]
 801fe72:	2101      	movs	r1, #1
 801fe74:	438a      	bics	r2, r1
 801fe76:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 801fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe7a:	3301      	adds	r3, #1
 801fe7c:	63bb      	str	r3, [r7, #56]	; 0x38
 801fe7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe80:	2b0f      	cmp	r3, #15
 801fe82:	dde2      	ble.n	801fe4a <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 801fe84:	003b      	movs	r3, r7
 801fe86:	2110      	movs	r1, #16
 801fe88:	0018      	movs	r0, r3
 801fe8a:	f005 fff0 	bl	8025e6e <bzero>
		}
		if ( __console.loginState == 1 ) {
 801fe8e:	4b66      	ldr	r3, [pc, #408]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fe90:	781b      	ldrb	r3, [r3, #0]
 801fe92:	2201      	movs	r2, #1
 801fe94:	4013      	ands	r3, r2
 801fe96:	b2db      	uxtb	r3, r3
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d015      	beq.n	801fec8 <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 801fe9c:	f004 f81e 	bl	8023edc <itsdk_time_get_ms>
 801fea0:	22fa      	movs	r2, #250	; 0xfa
 801fea2:	0092      	lsls	r2, r2, #2
 801fea4:	2300      	movs	r3, #0
 801fea6:	f7e0 fb49 	bl	800053c <__aeabi_uldivmod>
 801feaa:	0003      	movs	r3, r0
 801feac:	000c      	movs	r4, r1
 801feae:	613b      	str	r3, [r7, #16]
 801feb0:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 801feb2:	693b      	ldr	r3, [r7, #16]
 801feb4:	332d      	adds	r3, #45	; 0x2d
 801feb6:	33ff      	adds	r3, #255	; 0xff
 801feb8:	001a      	movs	r2, r3
 801feba:	4b5b      	ldr	r3, [pc, #364]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801febc:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 801febe:	4b5b      	ldr	r3, [pc, #364]	; (802002c <_itsdk_console_processLine+0x2a0>)
 801fec0:	0018      	movs	r0, r3
 801fec2:	f7ff ff4b 	bl	801fd5c <_itsdk_console_printf>
 801fec6:	e0ab      	b.n	8020020 <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 801fec8:	4b59      	ldr	r3, [pc, #356]	; (8020030 <_itsdk_console_processLine+0x2a4>)
 801feca:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 801fecc:	2333      	movs	r3, #51	; 0x33
 801fece:	18fb      	adds	r3, r7, r3
 801fed0:	2201      	movs	r2, #1
 801fed2:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 801fed4:	e022      	b.n	801ff1c <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 801fed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fed8:	685b      	ldr	r3, [r3, #4]
 801feda:	2b00      	cmp	r3, #0
 801fedc:	d01a      	beq.n	801ff14 <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801fede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fee0:	685b      	ldr	r3, [r3, #4]
 801fee2:	4a51      	ldr	r2, [pc, #324]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801fee4:	7812      	ldrb	r2, [r2, #0]
 801fee6:	0612      	lsls	r2, r2, #24
 801fee8:	0e52      	lsrs	r2, r2, #25
 801feea:	b2d2      	uxtb	r2, r2
 801feec:	0011      	movs	r1, r2
 801feee:	251e      	movs	r5, #30
 801fef0:	197c      	adds	r4, r7, r5
 801fef2:	4a50      	ldr	r2, [pc, #320]	; (8020034 <_itsdk_console_processLine+0x2a8>)
 801fef4:	0010      	movs	r0, r2
 801fef6:	4798      	blx	r3
 801fef8:	0003      	movs	r3, r0
 801fefa:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 801fefc:	197b      	adds	r3, r7, r5
 801fefe:	781b      	ldrb	r3, [r3, #0]
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d002      	beq.n	801ff0a <_itsdk_console_processLine+0x17e>
 801ff04:	2b02      	cmp	r3, #2
 801ff06:	d000      	beq.n	801ff0a <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 801ff08:	e005      	b.n	801ff16 <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 801ff0a:	2333      	movs	r3, #51	; 0x33
 801ff0c:	18fb      	adds	r3, r7, r3
 801ff0e:	2200      	movs	r2, #0
 801ff10:	701a      	strb	r2, [r3, #0]
						  break;
 801ff12:	e000      	b.n	801ff16 <_itsdk_console_processLine+0x18a>
				   }
				}
 801ff14:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 801ff16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff18:	689b      	ldr	r3, [r3, #8]
 801ff1a:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 801ff1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d1d9      	bne.n	801fed6 <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 801ff22:	2333      	movs	r3, #51	; 0x33
 801ff24:	18fb      	adds	r3, r7, r3
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	2b01      	cmp	r3, #1
 801ff2a:	d000      	beq.n	801ff2e <_itsdk_console_processLine+0x1a2>
 801ff2c:	e078      	b.n	8020020 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 801ff2e:	4b42      	ldr	r3, [pc, #264]	; (8020038 <_itsdk_console_processLine+0x2ac>)
 801ff30:	0018      	movs	r0, r3
 801ff32:	f7ff ff13 	bl	801fd5c <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 801ff36:	4b41      	ldr	r3, [pc, #260]	; (802003c <_itsdk_console_processLine+0x2b0>)
 801ff38:	0018      	movs	r0, r3
 801ff3a:	f7ff ff0f 	bl	801fd5c <_itsdk_console_printf>
 801ff3e:	e06f      	b.n	8020020 <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 801ff40:	4b39      	ldr	r3, [pc, #228]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801ff42:	781b      	ldrb	r3, [r3, #0]
 801ff44:	2201      	movs	r2, #1
 801ff46:	4393      	bics	r3, r2
 801ff48:	b2db      	uxtb	r3, r3
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d068      	beq.n	8020020 <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 801ff4e:	f003 ffc5 	bl	8023edc <itsdk_time_get_ms>
 801ff52:	22fa      	movs	r2, #250	; 0xfa
 801ff54:	0092      	lsls	r2, r2, #2
 801ff56:	2300      	movs	r3, #0
 801ff58:	f7e0 faf0 	bl	800053c <__aeabi_uldivmod>
 801ff5c:	0003      	movs	r3, r0
 801ff5e:	000c      	movs	r4, r1
 801ff60:	623b      	str	r3, [r7, #32]
 801ff62:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 801ff64:	6a3b      	ldr	r3, [r7, #32]
 801ff66:	332d      	adds	r3, #45	; 0x2d
 801ff68:	33ff      	adds	r3, #255	; 0xff
 801ff6a:	001a      	movs	r2, r3
 801ff6c:	4b2e      	ldr	r3, [pc, #184]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801ff6e:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 801ff70:	4b2f      	ldr	r3, [pc, #188]	; (8020030 <_itsdk_console_processLine+0x2a4>)
 801ff72:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 801ff74:	232b      	movs	r3, #43	; 0x2b
 801ff76:	18fb      	adds	r3, r7, r3
 801ff78:	2201      	movs	r2, #1
 801ff7a:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 801ff7c:	e042      	b.n	8020004 <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 801ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff80:	685b      	ldr	r3, [r3, #4]
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	d01a      	beq.n	801ffbc <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff88:	685b      	ldr	r3, [r3, #4]
 801ff8a:	4a27      	ldr	r2, [pc, #156]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801ff8c:	7812      	ldrb	r2, [r2, #0]
 801ff8e:	0612      	lsls	r2, r2, #24
 801ff90:	0e52      	lsrs	r2, r2, #25
 801ff92:	b2d2      	uxtb	r2, r2
 801ff94:	0011      	movs	r1, r2
 801ff96:	251f      	movs	r5, #31
 801ff98:	197c      	adds	r4, r7, r5
 801ff9a:	4a26      	ldr	r2, [pc, #152]	; (8020034 <_itsdk_console_processLine+0x2a8>)
 801ff9c:	0010      	movs	r0, r2
 801ff9e:	4798      	blx	r3
 801ffa0:	0003      	movs	r3, r0
 801ffa2:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 801ffa4:	197b      	adds	r3, r7, r5
 801ffa6:	781b      	ldrb	r3, [r3, #0]
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d002      	beq.n	801ffb2 <_itsdk_console_processLine+0x226>
 801ffac:	2b02      	cmp	r3, #2
 801ffae:	d000      	beq.n	801ffb2 <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 801ffb0:	e005      	b.n	801ffbe <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 801ffb2:	232b      	movs	r3, #43	; 0x2b
 801ffb4:	18fb      	adds	r3, r7, r3
 801ffb6:	2200      	movs	r2, #0
 801ffb8:	701a      	strb	r2, [r3, #0]
						  break;
 801ffba:	e000      	b.n	801ffbe <_itsdk_console_processLine+0x232>
				   }
			  }
 801ffbc:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 801ffbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d01a      	beq.n	801fffc <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801ffc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	4a17      	ldr	r2, [pc, #92]	; (8020028 <_itsdk_console_processLine+0x29c>)
 801ffcc:	7812      	ldrb	r2, [r2, #0]
 801ffce:	0612      	lsls	r2, r2, #24
 801ffd0:	0e52      	lsrs	r2, r2, #25
 801ffd2:	b2d2      	uxtb	r2, r2
 801ffd4:	0011      	movs	r1, r2
 801ffd6:	251f      	movs	r5, #31
 801ffd8:	197c      	adds	r4, r7, r5
 801ffda:	4a16      	ldr	r2, [pc, #88]	; (8020034 <_itsdk_console_processLine+0x2a8>)
 801ffdc:	0010      	movs	r0, r2
 801ffde:	4798      	blx	r3
 801ffe0:	0003      	movs	r3, r0
 801ffe2:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 801ffe4:	197b      	adds	r3, r7, r5
 801ffe6:	781b      	ldrb	r3, [r3, #0]
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d002      	beq.n	801fff2 <_itsdk_console_processLine+0x266>
 801ffec:	2b02      	cmp	r3, #2
 801ffee:	d000      	beq.n	801fff2 <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 801fff0:	e005      	b.n	801fffe <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 801fff2:	232b      	movs	r3, #43	; 0x2b
 801fff4:	18fb      	adds	r3, r7, r3
 801fff6:	2200      	movs	r2, #0
 801fff8:	701a      	strb	r2, [r3, #0]
						  break;
 801fffa:	e000      	b.n	801fffe <_itsdk_console_processLine+0x272>
				   }
			  }
 801fffc:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 801fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020000:	689b      	ldr	r3, [r3, #8]
 8020002:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 8020004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020006:	2b00      	cmp	r3, #0
 8020008:	d1b9      	bne.n	801ff7e <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 802000a:	232b      	movs	r3, #43	; 0x2b
 802000c:	18fb      	adds	r3, r7, r3
 802000e:	781b      	ldrb	r3, [r3, #0]
 8020010:	2b01      	cmp	r3, #1
 8020012:	d105      	bne.n	8020020 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 8020014:	4b09      	ldr	r3, [pc, #36]	; (802003c <_itsdk_console_processLine+0x2b0>)
 8020016:	0018      	movs	r0, r3
 8020018:	f7ff fea0 	bl	801fd5c <_itsdk_console_printf>
 802001c:	e000      	b.n	8020020 <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 802001e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 8020020:	46bd      	mov	sp, r7
 8020022:	b010      	add	sp, #64	; 0x40
 8020024:	bdb0      	pop	{r4, r5, r7, pc}
 8020026:	46c0      	nop			; (mov r8, r8)
 8020028:	20001e90 	.word	0x20001e90
 802002c:	08027880 	.word	0x08027880
 8020030:	20001ec0 	.word	0x20001ec0
 8020034:	20001e91 	.word	0x20001e91
 8020038:	080279c8 	.word	0x080279c8
 802003c:	08027888 	.word	0x08027888

08020040 <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 8020040:	b580      	push	{r7, lr}
 8020042:	b082      	sub	sp, #8
 8020044:	af00      	add	r7, sp, #0
 8020046:	0002      	movs	r2, r0
 8020048:	1dfb      	adds	r3, r7, #7
 802004a:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 802004c:	1dfb      	adds	r3, r7, #7
 802004e:	781b      	ldrb	r3, [r3, #0]
 8020050:	2b0a      	cmp	r3, #10
 8020052:	d007      	beq.n	8020064 <_itsdk_console_processChar+0x24>
 8020054:	1dfb      	adds	r3, r7, #7
 8020056:	781b      	ldrb	r3, [r3, #0]
 8020058:	2b0d      	cmp	r3, #13
 802005a:	d003      	beq.n	8020064 <_itsdk_console_processChar+0x24>
 802005c:	1dfb      	adds	r3, r7, #7
 802005e:	781b      	ldrb	r3, [r3, #0]
 8020060:	2b00      	cmp	r3, #0
 8020062:	d10e      	bne.n	8020082 <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 8020064:	4b1c      	ldr	r3, [pc, #112]	; (80200d8 <_itsdk_console_processChar+0x98>)
 8020066:	781b      	ldrb	r3, [r3, #0]
 8020068:	2201      	movs	r2, #1
 802006a:	4393      	bics	r3, r2
 802006c:	b2db      	uxtb	r3, r3
 802006e:	2b00      	cmp	r3, #0
 8020070:	d02d      	beq.n	80200ce <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 8020072:	f7ff fe8b 	bl	801fd8c <_itsdk_console_processLine>
			__console.pBuffer = 0;
 8020076:	4b18      	ldr	r3, [pc, #96]	; (80200d8 <_itsdk_console_processChar+0x98>)
 8020078:	781a      	ldrb	r2, [r3, #0]
 802007a:	2101      	movs	r1, #1
 802007c:	400a      	ands	r2, r1
 802007e:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 8020080:	e025      	b.n	80200ce <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 8020082:	4b15      	ldr	r3, [pc, #84]	; (80200d8 <_itsdk_console_processChar+0x98>)
 8020084:	781b      	ldrb	r3, [r3, #0]
 8020086:	061b      	lsls	r3, r3, #24
 8020088:	0e5b      	lsrs	r3, r3, #25
 802008a:	b2db      	uxtb	r3, r3
 802008c:	2b27      	cmp	r3, #39	; 0x27
 802008e:	d81e      	bhi.n	80200ce <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 8020090:	4b11      	ldr	r3, [pc, #68]	; (80200d8 <_itsdk_console_processChar+0x98>)
 8020092:	781b      	ldrb	r3, [r3, #0]
 8020094:	061b      	lsls	r3, r3, #24
 8020096:	0e5b      	lsrs	r3, r3, #25
 8020098:	b2db      	uxtb	r3, r3
 802009a:	001a      	movs	r2, r3
 802009c:	4b0e      	ldr	r3, [pc, #56]	; (80200d8 <_itsdk_console_processChar+0x98>)
 802009e:	189b      	adds	r3, r3, r2
 80200a0:	1dfa      	adds	r2, r7, #7
 80200a2:	7812      	ldrb	r2, [r2, #0]
 80200a4:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 80200a6:	4b0c      	ldr	r3, [pc, #48]	; (80200d8 <_itsdk_console_processChar+0x98>)
 80200a8:	781b      	ldrb	r3, [r3, #0]
 80200aa:	061b      	lsls	r3, r3, #24
 80200ac:	0e5b      	lsrs	r3, r3, #25
 80200ae:	b2db      	uxtb	r3, r3
 80200b0:	3301      	adds	r3, #1
 80200b2:	1c1a      	adds	r2, r3, #0
 80200b4:	237f      	movs	r3, #127	; 0x7f
 80200b6:	4013      	ands	r3, r2
 80200b8:	b2da      	uxtb	r2, r3
 80200ba:	4b07      	ldr	r3, [pc, #28]	; (80200d8 <_itsdk_console_processChar+0x98>)
 80200bc:	1890      	adds	r0, r2, r2
 80200be:	781a      	ldrb	r2, [r3, #0]
 80200c0:	2101      	movs	r1, #1
 80200c2:	400a      	ands	r2, r1
 80200c4:	1c11      	adds	r1, r2, #0
 80200c6:	1c02      	adds	r2, r0, #0
 80200c8:	430a      	orrs	r2, r1
 80200ca:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80200cc:	e7ff      	b.n	80200ce <_itsdk_console_processChar+0x8e>
 80200ce:	46c0      	nop			; (mov r8, r8)
 80200d0:	46bd      	mov	sp, r7
 80200d2:	b002      	add	sp, #8
 80200d4:	bd80      	pop	{r7, pc}
 80200d6:	46c0      	nop			; (mov r8, r8)
 80200d8:	20001e90 	.word	0x20001e90

080200dc <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 80200dc:	b580      	push	{r7, lr}
 80200de:	b084      	sub	sp, #16
 80200e0:	af00      	add	r7, sp, #0
 80200e2:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 80200e4:	4b13      	ldr	r3, [pc, #76]	; (8020134 <itsdk_console_registerCommand+0x58>)
 80200e6:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 80200e8:	68fb      	ldr	r3, [r7, #12]
 80200ea:	681a      	ldr	r2, [r3, #0]
 80200ec:	4b12      	ldr	r3, [pc, #72]	; (8020138 <itsdk_console_registerCommand+0x5c>)
 80200ee:	429a      	cmp	r2, r3
 80200f0:	d008      	beq.n	8020104 <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 80200f2:	4b12      	ldr	r3, [pc, #72]	; (802013c <itsdk_console_registerCommand+0x60>)
 80200f4:	2100      	movs	r1, #0
 80200f6:	0018      	movs	r0, r3
 80200f8:	f002 fe92 	bl	8022e20 <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 80200fc:	e002      	b.n	8020104 <itsdk_console_registerCommand+0x28>
	  c = c->next;
 80200fe:	68fb      	ldr	r3, [r7, #12]
 8020100:	689b      	ldr	r3, [r3, #8]
 8020102:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 8020104:	68fb      	ldr	r3, [r7, #12]
 8020106:	689b      	ldr	r3, [r3, #8]
 8020108:	2b00      	cmp	r3, #0
 802010a:	d004      	beq.n	8020116 <itsdk_console_registerCommand+0x3a>
 802010c:	68fb      	ldr	r3, [r7, #12]
 802010e:	689b      	ldr	r3, [r3, #8]
 8020110:	687a      	ldr	r2, [r7, #4]
 8020112:	429a      	cmp	r2, r3
 8020114:	d1f3      	bne.n	80200fe <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 8020116:	68fb      	ldr	r3, [r7, #12]
 8020118:	689b      	ldr	r3, [r3, #8]
 802011a:	687a      	ldr	r2, [r7, #4]
 802011c:	429a      	cmp	r2, r3
 802011e:	d005      	beq.n	802012c <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 8020120:	68fb      	ldr	r3, [r7, #12]
 8020122:	687a      	ldr	r2, [r7, #4]
 8020124:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	2200      	movs	r2, #0
 802012a:	609a      	str	r2, [r3, #8]
	}
}
 802012c:	46c0      	nop			; (mov r8, r8)
 802012e:	46bd      	mov	sp, r7
 8020130:	b004      	add	sp, #16
 8020132:	bd80      	pop	{r7, pc}
 8020134:	20001ec0 	.word	0x20001ec0
 8020138:	0801f909 	.word	0x0801f909
 802013c:	c0000003 	.word	0xc0000003

08020140 <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 8020140:	b590      	push	{r4, r7, lr}
 8020142:	b089      	sub	sp, #36	; 0x24
 8020144:	af00      	add	r7, sp, #0
 8020146:	6078      	str	r0, [r7, #4]
 8020148:	0008      	movs	r0, r1
 802014a:	0011      	movs	r1, r2
 802014c:	1cbb      	adds	r3, r7, #2
 802014e:	1c02      	adds	r2, r0, #0
 8020150:	801a      	strh	r2, [r3, #0]
 8020152:	1c7b      	adds	r3, r7, #1
 8020154:	1c0a      	adds	r2, r1, #0
 8020156:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 8020158:	2410      	movs	r4, #16
 802015a:	193b      	adds	r3, r7, r4
 802015c:	4a17      	ldr	r2, [pc, #92]	; (80201bc <eeprom_write_config+0x7c>)
 802015e:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8020160:	193b      	adds	r3, r7, r4
 8020162:	1cba      	adds	r2, r7, #2
 8020164:	8812      	ldrh	r2, [r2, #0]
 8020166:	809a      	strh	r2, [r3, #4]
	t.version = version;
 8020168:	193b      	adds	r3, r7, r4
 802016a:	1c7a      	adds	r2, r7, #1
 802016c:	7812      	ldrb	r2, [r2, #0]
 802016e:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8020170:	1cbb      	adds	r3, r7, #2
 8020172:	881a      	ldrh	r2, [r3, #0]
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	0011      	movs	r1, r2
 8020178:	0018      	movs	r0, r3
 802017a:	f003 faa5 	bl	80236c8 <itsdk_computeCRC32>
 802017e:	0002      	movs	r2, r0
 8020180:	193b      	adds	r3, r7, r4
 8020182:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 8020184:	2300      	movs	r3, #0
 8020186:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8020188:	230c      	movs	r3, #12
 802018a:	18fb      	adds	r3, r7, r3
 802018c:	0018      	movs	r0, r3
 802018e:	f000 f88f 	bl	80202b0 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8020192:	68f9      	ldr	r1, [r7, #12]
 8020194:	193a      	adds	r2, r7, r4
 8020196:	2310      	movs	r3, #16
 8020198:	2000      	movs	r0, #0
 802019a:	f005 f8cb 	bl	8025334 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 802019e:	68fb      	ldr	r3, [r7, #12]
 80201a0:	3310      	adds	r3, #16
 80201a2:	0019      	movs	r1, r3
 80201a4:	1cbb      	adds	r3, r7, #2
 80201a6:	881b      	ldrh	r3, [r3, #0]
 80201a8:	687a      	ldr	r2, [r7, #4]
 80201aa:	2000      	movs	r0, #0
 80201ac:	f005 f8c2 	bl	8025334 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 80201b0:	2301      	movs	r3, #1
}
 80201b2:	0018      	movs	r0, r3
 80201b4:	46bd      	mov	sp, r7
 80201b6:	b009      	add	sp, #36	; 0x24
 80201b8:	bd90      	pop	{r4, r7, pc}
 80201ba:	46c0      	nop			; (mov r8, r8)
 80201bc:	ffffa5fc 	.word	0xffffa5fc

080201c0 <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 80201c0:	b5b0      	push	{r4, r5, r7, lr}
 80201c2:	b08a      	sub	sp, #40	; 0x28
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	60f8      	str	r0, [r7, #12]
 80201c8:	0008      	movs	r0, r1
 80201ca:	0011      	movs	r1, r2
 80201cc:	607b      	str	r3, [r7, #4]
 80201ce:	230a      	movs	r3, #10
 80201d0:	18fb      	adds	r3, r7, r3
 80201d2:	1c02      	adds	r2, r0, #0
 80201d4:	801a      	strh	r2, [r3, #0]
 80201d6:	2309      	movs	r3, #9
 80201d8:	18fb      	adds	r3, r7, r3
 80201da:	1c0a      	adds	r2, r1, #0
 80201dc:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 80201de:	2300      	movs	r3, #0
 80201e0:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 80201e2:	2310      	movs	r3, #16
 80201e4:	18fb      	adds	r3, r7, r3
 80201e6:	0018      	movs	r0, r3
 80201e8:	f000 f862 	bl	80202b0 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 80201ec:	6939      	ldr	r1, [r7, #16]
 80201ee:	2414      	movs	r4, #20
 80201f0:	193a      	adds	r2, r7, r4
 80201f2:	2310      	movs	r3, #16
 80201f4:	2000      	movs	r0, #0
 80201f6:	f005 f941 	bl	802547c <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 80201fa:	193b      	adds	r3, r7, r4
 80201fc:	881b      	ldrh	r3, [r3, #0]
 80201fe:	4a2b      	ldr	r2, [pc, #172]	; (80202ac <eeprom_read_config+0xec>)
 8020200:	4293      	cmp	r3, r2
 8020202:	d004      	beq.n	802020e <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	2200      	movs	r2, #0
 8020208:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 802020a:	2300      	movs	r3, #0
 802020c:	e049      	b.n	80202a2 <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 802020e:	2114      	movs	r1, #20
 8020210:	187b      	adds	r3, r7, r1
 8020212:	789a      	ldrb	r2, [r3, #2]
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 8020218:	187b      	adds	r3, r7, r1
 802021a:	789b      	ldrb	r3, [r3, #2]
 802021c:	2209      	movs	r2, #9
 802021e:	18ba      	adds	r2, r7, r2
 8020220:	7812      	ldrb	r2, [r2, #0]
 8020222:	429a      	cmp	r2, r3
 8020224:	d001      	beq.n	802022a <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 8020226:	2300      	movs	r3, #0
 8020228:	e03b      	b.n	80202a2 <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 802022a:	2314      	movs	r3, #20
 802022c:	18fb      	adds	r3, r7, r3
 802022e:	889b      	ldrh	r3, [r3, #4]
 8020230:	220a      	movs	r2, #10
 8020232:	18ba      	adds	r2, r7, r2
 8020234:	8812      	ldrh	r2, [r2, #0]
 8020236:	429a      	cmp	r2, r3
 8020238:	d009      	beq.n	802024e <eeprom_read_config+0x8e>
 802023a:	2330      	movs	r3, #48	; 0x30
 802023c:	2208      	movs	r2, #8
 802023e:	4694      	mov	ip, r2
 8020240:	44bc      	add	ip, r7
 8020242:	4463      	add	r3, ip
 8020244:	781b      	ldrb	r3, [r3, #0]
 8020246:	2b00      	cmp	r3, #0
 8020248:	d101      	bne.n	802024e <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 802024a:	2300      	movs	r3, #0
 802024c:	e029      	b.n	80202a2 <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 802024e:	200a      	movs	r0, #10
 8020250:	183b      	adds	r3, r7, r0
 8020252:	2514      	movs	r5, #20
 8020254:	197a      	adds	r2, r7, r5
 8020256:	8892      	ldrh	r2, [r2, #4]
 8020258:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 802025a:	693b      	ldr	r3, [r7, #16]
 802025c:	3310      	adds	r3, #16
 802025e:	0019      	movs	r1, r3
 8020260:	0004      	movs	r4, r0
 8020262:	183b      	adds	r3, r7, r0
 8020264:	881b      	ldrh	r3, [r3, #0]
 8020266:	68fa      	ldr	r2, [r7, #12]
 8020268:	2000      	movs	r0, #0
 802026a:	f005 f907 	bl	802547c <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 802026e:	0020      	movs	r0, r4
 8020270:	183b      	adds	r3, r7, r0
 8020272:	881a      	ldrh	r2, [r3, #0]
 8020274:	68fb      	ldr	r3, [r7, #12]
 8020276:	0011      	movs	r1, r2
 8020278:	0018      	movs	r0, r3
 802027a:	f003 fa25 	bl	80236c8 <itsdk_computeCRC32>
 802027e:	0003      	movs	r3, r0
 8020280:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 8020282:	197b      	adds	r3, r7, r5
 8020284:	689b      	ldr	r3, [r3, #8]
 8020286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020288:	429a      	cmp	r2, r3
 802028a:	d009      	beq.n	80202a0 <eeprom_read_config+0xe0>
 802028c:	2330      	movs	r3, #48	; 0x30
 802028e:	2208      	movs	r2, #8
 8020290:	4694      	mov	ip, r2
 8020292:	44bc      	add	ip, r7
 8020294:	4463      	add	r3, ip
 8020296:	781b      	ldrb	r3, [r3, #0]
 8020298:	2b00      	cmp	r3, #0
 802029a:	d101      	bne.n	80202a0 <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 802029c:	2300      	movs	r3, #0
 802029e:	e000      	b.n	80202a2 <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 80202a0:	2301      	movs	r3, #1
}
 80202a2:	0018      	movs	r0, r3
 80202a4:	46bd      	mov	sp, r7
 80202a6:	b00a      	add	sp, #40	; 0x28
 80202a8:	bdb0      	pop	{r4, r5, r7, pc}
 80202aa:	46c0      	nop			; (mov r8, r8)
 80202ac:	0000a5fc 	.word	0x0000a5fc

080202b0 <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 80202b0:	b580      	push	{r7, lr}
 80202b2:	b086      	sub	sp, #24
 80202b4:	af00      	add	r7, sp, #0
 80202b6:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 80202b8:	2300      	movs	r3, #0
 80202ba:	613b      	str	r3, [r7, #16]
 80202bc:	2300      	movs	r3, #0
 80202be:	60fb      	str	r3, [r7, #12]
 80202c0:	2300      	movs	r3, #0
 80202c2:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 80202c4:	2310      	movs	r3, #16
 80202c6:	18fb      	adds	r3, r7, r3
 80202c8:	0018      	movs	r0, r3
 80202ca:	f000 fde6 	bl	8020e9a <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 80202ce:	230c      	movs	r3, #12
 80202d0:	18fb      	adds	r3, r7, r3
 80202d2:	0018      	movs	r0, r3
 80202d4:	f002 fec9 	bl	802306a <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	681a      	ldr	r2, [r3, #0]
 80202dc:	6939      	ldr	r1, [r7, #16]
 80202de:	68fb      	ldr	r3, [r7, #12]
 80202e0:	18c9      	adds	r1, r1, r3
 80202e2:	697b      	ldr	r3, [r7, #20]
 80202e4:	18cb      	adds	r3, r1, r3
 80202e6:	18d2      	adds	r2, r2, r3
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 80202ec:	2301      	movs	r3, #1
}
 80202ee:	0018      	movs	r0, r3
 80202f0:	46bd      	mov	sp, r7
 80202f2:	b006      	add	sp, #24
 80202f4:	bd80      	pop	{r7, pc}

080202f6 <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 80202f6:	b590      	push	{r4, r7, lr}
 80202f8:	b089      	sub	sp, #36	; 0x24
 80202fa:	af00      	add	r7, sp, #0
 80202fc:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 80202fe:	2300      	movs	r3, #0
 8020300:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8020302:	230c      	movs	r3, #12
 8020304:	18fb      	adds	r3, r7, r3
 8020306:	0018      	movs	r0, r3
 8020308:	f7ff ffd2 	bl	80202b0 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 802030c:	68f9      	ldr	r1, [r7, #12]
 802030e:	2410      	movs	r4, #16
 8020310:	193a      	adds	r2, r7, r4
 8020312:	2310      	movs	r3, #16
 8020314:	2000      	movs	r0, #0
 8020316:	f005 f8b1 	bl	802547c <_eeprom_read>

	*_size = sizeof(t) + t.size;
 802031a:	193b      	adds	r3, r7, r4
 802031c:	889b      	ldrh	r3, [r3, #4]
 802031e:	3310      	adds	r3, #16
 8020320:	001a      	movs	r2, r3
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 8020326:	2301      	movs	r3, #1
}
 8020328:	0018      	movs	r0, r3
 802032a:	46bd      	mov	sp, r7
 802032c:	b009      	add	sp, #36	; 0x24
 802032e:	bd90      	pop	{r4, r7, pc}

08020330 <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 8020330:	b580      	push	{r7, lr}
 8020332:	b082      	sub	sp, #8
 8020334:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 8020336:	2300      	movs	r3, #0
 8020338:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 802033a:	2300      	movs	r3, #0
 802033c:	607b      	str	r3, [r7, #4]
 802033e:	e008      	b.n	8020352 <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 8020340:	6879      	ldr	r1, [r7, #4]
 8020342:	003a      	movs	r2, r7
 8020344:	2304      	movs	r3, #4
 8020346:	2000      	movs	r0, #0
 8020348:	f004 fff4 	bl	8025334 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	3304      	adds	r3, #4
 8020350:	607b      	str	r3, [r7, #4]
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	4a03      	ldr	r2, [pc, #12]	; (8020364 <eeprom_clearAllEprom+0x34>)
 8020356:	4293      	cmp	r3, r2
 8020358:	ddf2      	ble.n	8020340 <eeprom_clearAllEprom+0x10>
	}
}
 802035a:	46c0      	nop			; (mov r8, r8)
 802035c:	46bd      	mov	sp, r7
 802035e:	b002      	add	sp, #8
 8020360:	bd80      	pop	{r7, pc}
 8020362:	46c0      	nop			; (mov r8, r8)
 8020364:	000017ff 	.word	0x000017ff

08020368 <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 8020368:	b580      	push	{r7, lr}
 802036a:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 802036c:	4b1b      	ldr	r3, [pc, #108]	; (80203dc <itsdk_config_sdk_resetToFactory+0x74>)
 802036e:	2100      	movs	r1, #0
 8020370:	0018      	movs	r0, r3
 8020372:	f002 fd55 	bl	8022e20 <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8020376:	4b1a      	ldr	r3, [pc, #104]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 8020378:	2216      	movs	r2, #22
 802037a:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 802037c:	4b18      	ldr	r3, [pc, #96]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 802037e:	2218      	movs	r2, #24
 8020380:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 8020382:	4b17      	ldr	r3, [pc, #92]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 8020384:	2202      	movs	r2, #2
 8020386:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 8020388:	4b15      	ldr	r3, [pc, #84]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 802038a:	7a9a      	ldrb	r2, [r3, #10]
 802038c:	213f      	movs	r1, #63	; 0x3f
 802038e:	400a      	ands	r2, r1
 8020390:	1c11      	adds	r1, r2, #0
 8020392:	2240      	movs	r2, #64	; 0x40
 8020394:	430a      	orrs	r2, r1
 8020396:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 8020398:	4b11      	ldr	r3, [pc, #68]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 802039a:	7a9a      	ldrb	r2, [r3, #10]
 802039c:	2130      	movs	r1, #48	; 0x30
 802039e:	438a      	bics	r2, r1
 80203a0:	1c11      	adds	r1, r2, #0
 80203a2:	2210      	movs	r2, #16
 80203a4:	430a      	orrs	r2, r1
 80203a6:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 80203a8:	4b0d      	ldr	r3, [pc, #52]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 80203aa:	7a9a      	ldrb	r2, [r3, #10]
 80203ac:	2103      	movs	r1, #3
 80203ae:	438a      	bics	r2, r1
 80203b0:	1c11      	adds	r1, r2, #0
 80203b2:	2201      	movs	r2, #1
 80203b4:	430a      	orrs	r2, r1
 80203b6:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 80203b8:	4b09      	ldr	r3, [pc, #36]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 80203ba:	7a9a      	ldrb	r2, [r3, #10]
 80203bc:	210c      	movs	r1, #12
 80203be:	438a      	bics	r2, r1
 80203c0:	1c11      	adds	r1, r2, #0
 80203c2:	2204      	movs	r2, #4
 80203c4:	430a      	orrs	r2, r1
 80203c6:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 80203c8:	4b05      	ldr	r3, [pc, #20]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 80203ca:	2200      	movs	r2, #0
 80203cc:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 80203ce:	4b04      	ldr	r3, [pc, #16]	; (80203e0 <itsdk_config_sdk_resetToFactory+0x78>)
 80203d0:	2220      	movs	r2, #32
 80203d2:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 80203d4:	2302      	movs	r3, #2
	}
 80203d6:	0018      	movs	r0, r3
 80203d8:	46bd      	mov	sp, r7
 80203da:	bd80      	pop	{r7, pc}
 80203dc:	10000073 	.word	0x10000073
 80203e0:	20002358 	.word	0x20002358

080203e4 <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 80203e4:	b580      	push	{r7, lr}
 80203e6:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 80203e8:	4b05      	ldr	r3, [pc, #20]	; (8020400 <itsdk_config_app_resetToFactory+0x1c>)
 80203ea:	2201      	movs	r2, #1
 80203ec:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 80203ee:	4b05      	ldr	r3, [pc, #20]	; (8020404 <itsdk_config_app_resetToFactory+0x20>)
 80203f0:	2100      	movs	r1, #0
 80203f2:	0018      	movs	r0, r3
 80203f4:	f002 fd14 	bl	8022e20 <itsdk_error_report>
			return CONFIG_FAILED;
 80203f8:	2304      	movs	r3, #4
		}
 80203fa:	0018      	movs	r0, r3
 80203fc:	46bd      	mov	sp, r7
 80203fe:	bd80      	pop	{r7, pc}
 8020400:	20002358 	.word	0x20002358
 8020404:	40000070 	.word	0x40000070

08020408 <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8020408:	b580      	push	{r7, lr}
 802040a:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 802040c:	4b05      	ldr	r3, [pc, #20]	; (8020424 <itsdk_config_app_upgradeConfiguration+0x1c>)
 802040e:	2201      	movs	r2, #1
 8020410:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8020412:	4b05      	ldr	r3, [pc, #20]	; (8020428 <itsdk_config_app_upgradeConfiguration+0x20>)
 8020414:	2100      	movs	r1, #0
 8020416:	0018      	movs	r0, r3
 8020418:	f002 fd02 	bl	8022e20 <itsdk_error_report>
			return CONFIG_FAILED;
 802041c:	2304      	movs	r3, #4
		}
 802041e:	0018      	movs	r0, r3
 8020420:	46bd      	mov	sp, r7
 8020422:	bd80      	pop	{r7, pc}
 8020424:	20002358 	.word	0x20002358
 8020428:	40000070 	.word	0x40000070

0802042c <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 802042c:	b5b0      	push	{r4, r5, r7, lr}
 802042e:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 8020430:	f7ff ff9a 	bl	8020368 <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 8020434:	f7ff ffd6 	bl	80203e4 <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8020438:	4b0b      	ldr	r3, [pc, #44]	; (8020468 <itsdk_config_resetToFactory+0x3c>)
 802043a:	2201      	movs	r2, #1
 802043c:	211c      	movs	r1, #28
 802043e:	0018      	movs	r0, r3
 8020440:	f7ff fe7e 	bl	8020140 <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8020444:	4b09      	ldr	r3, [pc, #36]	; (802046c <itsdk_config_resetToFactory+0x40>)
 8020446:	4a08      	ldr	r2, [pc, #32]	; (8020468 <itsdk_config_resetToFactory+0x3c>)
 8020448:	ca13      	ldmia	r2!, {r0, r1, r4}
 802044a:	c313      	stmia	r3!, {r0, r1, r4}
 802044c:	ca13      	ldmia	r2!, {r0, r1, r4}
 802044e:	c313      	stmia	r3!, {r0, r1, r4}
 8020450:	6812      	ldr	r2, [r2, #0]
 8020452:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8020454:	4b06      	ldr	r3, [pc, #24]	; (8020470 <itsdk_config_resetToFactory+0x44>)
 8020456:	2103      	movs	r1, #3
 8020458:	0018      	movs	r0, r3
 802045a:	f002 fce1 	bl	8022e20 <itsdk_error_report>
	     return CONFIG_SUCCESS;
 802045e:	2300      	movs	r3, #0
	}
 8020460:	0018      	movs	r0, r3
 8020462:	46bd      	mov	sp, r7
 8020464:	bdb0      	pop	{r4, r5, r7, pc}
 8020466:	46c0      	nop			; (mov r8, r8)
 8020468:	20002358 	.word	0x20002358
 802046c:	2000233c 	.word	0x2000233c
 8020470:	50000071 	.word	0x50000071

08020474 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 8020474:	b590      	push	{r4, r7, lr}
 8020476:	b087      	sub	sp, #28
 8020478:	af02      	add	r7, sp, #8
 802047a:	0002      	movs	r2, r0
 802047c:	1dfb      	adds	r3, r7, #7
 802047e:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 8020480:	4b60      	ldr	r3, [pc, #384]	; (8020604 <itsdk_config_loadConfiguration+0x190>)
 8020482:	4a61      	ldr	r2, [pc, #388]	; (8020608 <itsdk_config_loadConfiguration+0x194>)
 8020484:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 8020486:	4b5f      	ldr	r3, [pc, #380]	; (8020604 <itsdk_config_loadConfiguration+0x190>)
 8020488:	4a60      	ldr	r2, [pc, #384]	; (802060c <itsdk_config_loadConfiguration+0x198>)
 802048a:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 802048c:	4b5d      	ldr	r3, [pc, #372]	; (8020604 <itsdk_config_loadConfiguration+0x190>)
 802048e:	2200      	movs	r2, #0
 8020490:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 8020492:	4b5c      	ldr	r3, [pc, #368]	; (8020604 <itsdk_config_loadConfiguration+0x190>)
 8020494:	0018      	movs	r0, r3
 8020496:	f7ff fe21 	bl	80200dc <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 802049a:	230f      	movs	r3, #15
 802049c:	18fb      	adds	r3, r7, r3
 802049e:	2200      	movs	r2, #0
 80204a0:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 80204a2:	230e      	movs	r3, #14
 80204a4:	18fb      	adds	r3, r7, r3
 80204a6:	2200      	movs	r2, #0
 80204a8:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 80204aa:	1dfb      	adds	r3, r7, #7
 80204ac:	781b      	ldrb	r3, [r3, #0]
 80204ae:	2b01      	cmp	r3, #1
 80204b0:	d100      	bne.n	80204b4 <itsdk_config_loadConfiguration+0x40>
 80204b2:	e071      	b.n	8020598 <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 80204b4:	230d      	movs	r3, #13
 80204b6:	18fa      	adds	r2, r7, r3
 80204b8:	4855      	ldr	r0, [pc, #340]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 80204ba:	2301      	movs	r3, #1
 80204bc:	9300      	str	r3, [sp, #0]
 80204be:	0013      	movs	r3, r2
 80204c0:	2201      	movs	r2, #1
 80204c2:	211c      	movs	r1, #28
 80204c4:	f7ff fe7c 	bl	80201c0 <eeprom_read_config>
 80204c8:	1e03      	subs	r3, r0, #0
 80204ca:	d11c      	bne.n	8020506 <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 80204cc:	230d      	movs	r3, #13
 80204ce:	18fb      	adds	r3, r7, r3
 80204d0:	781b      	ldrb	r3, [r3, #0]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d109      	bne.n	80204ea <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 80204d6:	4b4f      	ldr	r3, [pc, #316]	; (8020614 <itsdk_config_loadConfiguration+0x1a0>)
 80204d8:	2100      	movs	r1, #0
 80204da:	0018      	movs	r0, r3
 80204dc:	f002 fca0 	bl	8022e20 <itsdk_error_report>
			requestFactoryReset=1;
 80204e0:	230f      	movs	r3, #15
 80204e2:	18fb      	adds	r3, r7, r3
 80204e4:	2201      	movs	r2, #1
 80204e6:	701a      	strb	r2, [r3, #0]
 80204e8:	e00d      	b.n	8020506 <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 80204ea:	230d      	movs	r3, #13
 80204ec:	18fb      	adds	r3, r7, r3
 80204ee:	781b      	ldrb	r3, [r3, #0]
 80204f0:	2b01      	cmp	r3, #1
 80204f2:	d008      	beq.n	8020506 <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 80204f4:	4b48      	ldr	r3, [pc, #288]	; (8020618 <itsdk_config_loadConfiguration+0x1a4>)
 80204f6:	2100      	movs	r1, #0
 80204f8:	0018      	movs	r0, r3
 80204fa:	f002 fc91 	bl	8022e20 <itsdk_error_report>
			requestFactoryReset=1;
 80204fe:	230f      	movs	r3, #15
 8020500:	18fb      	adds	r3, r7, r3
 8020502:	2201      	movs	r2, #1
 8020504:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 8020506:	230f      	movs	r3, #15
 8020508:	18fb      	adds	r3, r7, r3
 802050a:	781b      	ldrb	r3, [r3, #0]
 802050c:	2b00      	cmp	r3, #0
 802050e:	d121      	bne.n	8020554 <itsdk_config_loadConfiguration+0xe0>
 8020510:	4b3f      	ldr	r3, [pc, #252]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 8020512:	781b      	ldrb	r3, [r3, #0]
 8020514:	2b16      	cmp	r3, #22
 8020516:	d103      	bne.n	8020520 <itsdk_config_loadConfiguration+0xac>
 8020518:	4b3d      	ldr	r3, [pc, #244]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 802051a:	885b      	ldrh	r3, [r3, #2]
 802051c:	2b18      	cmp	r3, #24
 802051e:	d019      	beq.n	8020554 <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 8020520:	4b3b      	ldr	r3, [pc, #236]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 8020522:	885b      	ldrh	r3, [r3, #2]
 8020524:	2b18      	cmp	r3, #24
 8020526:	d009      	beq.n	802053c <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8020528:	230f      	movs	r3, #15
 802052a:	18fb      	adds	r3, r7, r3
 802052c:	2201      	movs	r2, #1
 802052e:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 8020530:	4b3a      	ldr	r3, [pc, #232]	; (802061c <itsdk_config_loadConfiguration+0x1a8>)
 8020532:	2100      	movs	r1, #0
 8020534:	0018      	movs	r0, r3
 8020536:	f002 fc73 	bl	8022e20 <itsdk_error_report>
 802053a:	e00b      	b.n	8020554 <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 802053c:	4b34      	ldr	r3, [pc, #208]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 802053e:	2216      	movs	r2, #22
 8020540:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 8020542:	230e      	movs	r3, #14
 8020544:	18fb      	adds	r3, r7, r3
 8020546:	2201      	movs	r2, #1
 8020548:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 802054a:	4b35      	ldr	r3, [pc, #212]	; (8020620 <itsdk_config_loadConfiguration+0x1ac>)
 802054c:	2116      	movs	r1, #22
 802054e:	0018      	movs	r0, r3
 8020550:	f002 fc66 	bl	8022e20 <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 8020554:	230f      	movs	r3, #15
 8020556:	18fb      	adds	r3, r7, r3
 8020558:	781b      	ldrb	r3, [r3, #0]
 802055a:	2b00      	cmp	r3, #0
 802055c:	d120      	bne.n	80205a0 <itsdk_config_loadConfiguration+0x12c>
 802055e:	4b2c      	ldr	r3, [pc, #176]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 8020560:	7e1b      	ldrb	r3, [r3, #24]
 8020562:	2b01      	cmp	r3, #1
 8020564:	d01c      	beq.n	80205a0 <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 8020566:	f7ff ff4f 	bl	8020408 <itsdk_config_app_upgradeConfiguration>
 802056a:	0003      	movs	r3, r0
 802056c:	2b03      	cmp	r3, #3
 802056e:	d109      	bne.n	8020584 <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 8020570:	230e      	movs	r3, #14
 8020572:	18fb      	adds	r3, r7, r3
 8020574:	2201      	movs	r2, #1
 8020576:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 8020578:	4b2a      	ldr	r3, [pc, #168]	; (8020624 <itsdk_config_loadConfiguration+0x1b0>)
 802057a:	2101      	movs	r1, #1
 802057c:	0018      	movs	r0, r3
 802057e:	f002 fc4f 	bl	8022e20 <itsdk_error_report>
 8020582:	e00d      	b.n	80205a0 <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 8020584:	230f      	movs	r3, #15
 8020586:	18fb      	adds	r3, r7, r3
 8020588:	2201      	movs	r2, #1
 802058a:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 802058c:	4b23      	ldr	r3, [pc, #140]	; (802061c <itsdk_config_loadConfiguration+0x1a8>)
 802058e:	2101      	movs	r1, #1
 8020590:	0018      	movs	r0, r3
 8020592:	f002 fc45 	bl	8022e20 <itsdk_error_report>
 8020596:	e003      	b.n	80205a0 <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 8020598:	230f      	movs	r3, #15
 802059a:	18fb      	adds	r3, r7, r3
 802059c:	2201      	movs	r2, #1
 802059e:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 80205a0:	230f      	movs	r3, #15
 80205a2:	18fb      	adds	r3, r7, r3
 80205a4:	781b      	ldrb	r3, [r3, #0]
 80205a6:	2b01      	cmp	r3, #1
 80205a8:	d10c      	bne.n	80205c4 <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 80205aa:	f7ff fedd 	bl	8020368 <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 80205ae:	f7ff ff19 	bl	80203e4 <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 80205b2:	230e      	movs	r3, #14
 80205b4:	18fb      	adds	r3, r7, r3
 80205b6:	2201      	movs	r2, #1
 80205b8:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80205ba:	4b1b      	ldr	r3, [pc, #108]	; (8020628 <itsdk_config_loadConfiguration+0x1b4>)
 80205bc:	2103      	movs	r1, #3
 80205be:	0018      	movs	r0, r3
 80205c0:	f002 fc2e 	bl	8022e20 <itsdk_error_report>
   }

   if (configUpdated == 1) {
 80205c4:	230e      	movs	r3, #14
 80205c6:	18fb      	adds	r3, r7, r3
 80205c8:	781b      	ldrb	r3, [r3, #0]
 80205ca:	2b01      	cmp	r3, #1
 80205cc:	d105      	bne.n	80205da <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 80205ce:	4b10      	ldr	r3, [pc, #64]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 80205d0:	2201      	movs	r2, #1
 80205d2:	211c      	movs	r1, #28
 80205d4:	0018      	movs	r0, r3
 80205d6:	f7ff fdb3 	bl	8020140 <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 80205da:	4b14      	ldr	r3, [pc, #80]	; (802062c <itsdk_config_loadConfiguration+0x1b8>)
 80205dc:	4a0c      	ldr	r2, [pc, #48]	; (8020610 <itsdk_config_loadConfiguration+0x19c>)
 80205de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80205e0:	c313      	stmia	r3!, {r0, r1, r4}
 80205e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80205e4:	c313      	stmia	r3!, {r0, r1, r4}
 80205e6:	6812      	ldr	r2, [r2, #0]
 80205e8:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 80205ea:	230f      	movs	r3, #15
 80205ec:	18fb      	adds	r3, r7, r3
 80205ee:	781b      	ldrb	r3, [r3, #0]
 80205f0:	2b01      	cmp	r3, #1
 80205f2:	d101      	bne.n	80205f8 <itsdk_config_loadConfiguration+0x184>
 80205f4:	2302      	movs	r3, #2
 80205f6:	e000      	b.n	80205fa <itsdk_config_loadConfiguration+0x186>
 80205f8:	2301      	movs	r3, #1

}
 80205fa:	0018      	movs	r0, r3
 80205fc:	46bd      	mov	sp, r7
 80205fe:	b005      	add	sp, #20
 8020600:	bd90      	pop	{r4, r7, pc}
 8020602:	46c0      	nop			; (mov r8, r8)
 8020604:	20001ecc 	.word	0x20001ecc
 8020608:	08020825 	.word	0x08020825
 802060c:	080206dd 	.word	0x080206dd
 8020610:	20002358 	.word	0x20002358
 8020614:	40000076 	.word	0x40000076
 8020618:	40000077 	.word	0x40000077
 802061c:	50000078 	.word	0x50000078
 8020620:	10000074 	.word	0x10000074
 8020624:	10000075 	.word	0x10000075
 8020628:	50000071 	.word	0x50000071
 802062c:	2000233c 	.word	0x2000233c

08020630 <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 8020630:	b580      	push	{r7, lr}
 8020632:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 8020634:	2300      	movs	r3, #0
}
 8020636:	0018      	movs	r0, r3
 8020638:	46bd      	mov	sp, r7
 802063a:	bd80      	pop	{r7, pc}

0802063c <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 802063c:	b5b0      	push	{r4, r5, r7, lr}
 802063e:	b084      	sub	sp, #16
 8020640:	af00      	add	r7, sp, #0
 8020642:	0002      	movs	r2, r0
 8020644:	1dfb      	adds	r3, r7, #7
 8020646:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 8020648:	250f      	movs	r5, #15
 802064a:	197c      	adds	r4, r7, r5
 802064c:	f7ff fff0 	bl	8020630 <itsdk_config_app_commitConfiguration>
 8020650:	0003      	movs	r3, r0
 8020652:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 8020654:	197b      	adds	r3, r7, r5
 8020656:	781b      	ldrb	r3, [r3, #0]
 8020658:	2b00      	cmp	r3, #0
 802065a:	d003      	beq.n	8020664 <itsdk_config_commitConfiguration+0x28>
 802065c:	230f      	movs	r3, #15
 802065e:	18fb      	adds	r3, r7, r3
 8020660:	781b      	ldrb	r3, [r3, #0]
 8020662:	e023      	b.n	80206ac <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 8020664:	4b13      	ldr	r3, [pc, #76]	; (80206b4 <itsdk_config_commitConfiguration+0x78>)
 8020666:	4a14      	ldr	r2, [pc, #80]	; (80206b8 <itsdk_config_commitConfiguration+0x7c>)
 8020668:	ca13      	ldmia	r2!, {r0, r1, r4}
 802066a:	c313      	stmia	r3!, {r0, r1, r4}
 802066c:	ca13      	ldmia	r2!, {r0, r1, r4}
 802066e:	c313      	stmia	r3!, {r0, r1, r4}
 8020670:	6812      	ldr	r2, [r2, #0]
 8020672:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 8020674:	2100      	movs	r1, #0
 8020676:	2072      	movs	r0, #114	; 0x72
 8020678:	f002 fbd2 	bl	8022e20 <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 802067c:	1dfb      	adds	r3, r7, #7
 802067e:	781b      	ldrb	r3, [r3, #0]
 8020680:	2b01      	cmp	r3, #1
 8020682:	d003      	beq.n	802068c <itsdk_config_commitConfiguration+0x50>
 8020684:	1dfb      	adds	r3, r7, #7
 8020686:	781b      	ldrb	r3, [r3, #0]
 8020688:	2b02      	cmp	r3, #2
 802068a:	d105      	bne.n	8020698 <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 802068c:	4b09      	ldr	r3, [pc, #36]	; (80206b4 <itsdk_config_commitConfiguration+0x78>)
 802068e:	2201      	movs	r2, #1
 8020690:	211c      	movs	r1, #28
 8020692:	0018      	movs	r0, r3
 8020694:	f7ff fd54 	bl	8020140 <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8020698:	1dfb      	adds	r3, r7, #7
 802069a:	781b      	ldrb	r3, [r3, #0]
 802069c:	2b02      	cmp	r3, #2
 802069e:	d104      	bne.n	80206aa <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 80206a0:	20c8      	movs	r0, #200	; 0xc8
 80206a2:	f004 fcc5 	bl	8025030 <itsdk_delayMs>
	 itsdk_reset();
 80206a6:	f004 fc71 	bl	8024f8c <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 80206aa:	2300      	movs	r3, #0
}
 80206ac:	0018      	movs	r0, r3
 80206ae:	46bd      	mov	sp, r7
 80206b0:	b004      	add	sp, #16
 80206b2:	bdb0      	pop	{r4, r5, r7, pc}
 80206b4:	20002358 	.word	0x20002358
 80206b8:	2000233c 	.word	0x2000233c

080206bc <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 80206bc:	b580      	push	{r7, lr}
 80206be:	b082      	sub	sp, #8
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 80206c4:	4b04      	ldr	r3, [pc, #16]	; (80206d8 <itsdk_config_app_printConfig+0x1c>)
 80206c6:	2100      	movs	r1, #0
 80206c8:	0018      	movs	r0, r3
 80206ca:	f002 fba9 	bl	8022e20 <itsdk_error_report>
			return;
 80206ce:	46c0      	nop			; (mov r8, r8)
		}
 80206d0:	46bd      	mov	sp, r7
 80206d2:	b002      	add	sp, #8
 80206d4:	bd80      	pop	{r7, pc}
 80206d6:	46c0      	nop			; (mov r8, r8)
 80206d8:	40000070 	.word	0x40000070

080206dc <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 80206dc:	b580      	push	{r7, lr}
 80206de:	b084      	sub	sp, #16
 80206e0:	af00      	add	r7, sp, #0
 80206e2:	6078      	str	r0, [r7, #4]
 80206e4:	000a      	movs	r2, r1
 80206e6:	1cfb      	adds	r3, r7, #3
 80206e8:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 80206ea:	1cfb      	adds	r3, r7, #3
 80206ec:	781b      	ldrb	r3, [r3, #0]
 80206ee:	2b01      	cmp	r3, #1
 80206f0:	d000      	beq.n	80206f4 <_itsdk_config_consolePublic+0x18>
 80206f2:	e074      	b.n	80207de <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	781b      	ldrb	r3, [r3, #0]
 80206f8:	2b43      	cmp	r3, #67	; 0x43
 80206fa:	d012      	beq.n	8020722 <_itsdk_config_consolePublic+0x46>
 80206fc:	2b63      	cmp	r3, #99	; 0x63
 80206fe:	d010      	beq.n	8020722 <_itsdk_config_consolePublic+0x46>
 8020700:	2b3f      	cmp	r3, #63	; 0x3f
 8020702:	d000      	beq.n	8020706 <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 8020704:	e06c      	b.n	80207e0 <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 8020706:	4b39      	ldr	r3, [pc, #228]	; (80207ec <_itsdk_config_consolePublic+0x110>)
 8020708:	0018      	movs	r0, r3
 802070a:	f7ff fb27 	bl	801fd5c <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 802070e:	4b38      	ldr	r3, [pc, #224]	; (80207f0 <_itsdk_config_consolePublic+0x114>)
 8020710:	0018      	movs	r0, r3
 8020712:	f7ff fb23 	bl	801fd5c <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 8020716:	4b37      	ldr	r3, [pc, #220]	; (80207f4 <_itsdk_config_consolePublic+0x118>)
 8020718:	0018      	movs	r0, r3
 802071a:	f7ff fb1f 	bl	801fd5c <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 802071e:	2300      	movs	r3, #0
 8020720:	e05f      	b.n	80207e2 <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 8020722:	4b35      	ldr	r3, [pc, #212]	; (80207f8 <_itsdk_config_consolePublic+0x11c>)
 8020724:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	2b43      	cmp	r3, #67	; 0x43
 802072c:	d101      	bne.n	8020732 <_itsdk_config_consolePublic+0x56>
 802072e:	4b33      	ldr	r3, [pc, #204]	; (80207fc <_itsdk_config_consolePublic+0x120>)
 8020730:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	781b      	ldrb	r3, [r3, #0]
 8020736:	001a      	movs	r2, r3
 8020738:	4b31      	ldr	r3, [pc, #196]	; (8020800 <_itsdk_config_consolePublic+0x124>)
 802073a:	0011      	movs	r1, r2
 802073c:	0018      	movs	r0, r3
 802073e:	f7ff fb0d 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 8020742:	68fb      	ldr	r3, [r7, #12]
 8020744:	88db      	ldrh	r3, [r3, #6]
 8020746:	001a      	movs	r2, r3
 8020748:	4b2e      	ldr	r3, [pc, #184]	; (8020804 <_itsdk_config_consolePublic+0x128>)
 802074a:	0011      	movs	r1, r2
 802074c:	0018      	movs	r0, r3
 802074e:	f7ff fb05 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 8020752:	68fb      	ldr	r3, [r7, #12]
 8020754:	891b      	ldrh	r3, [r3, #8]
 8020756:	001a      	movs	r2, r3
 8020758:	4b2b      	ldr	r3, [pc, #172]	; (8020808 <_itsdk_config_consolePublic+0x12c>)
 802075a:	0011      	movs	r1, r2
 802075c:	0018      	movs	r0, r3
 802075e:	f7ff fafd 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 8020762:	68fb      	ldr	r3, [r7, #12]
 8020764:	7a9b      	ldrb	r3, [r3, #10]
 8020766:	061b      	lsls	r3, r3, #24
 8020768:	0f9b      	lsrs	r3, r3, #30
 802076a:	b2db      	uxtb	r3, r3
 802076c:	001a      	movs	r2, r3
 802076e:	4b27      	ldr	r3, [pc, #156]	; (802080c <_itsdk_config_consolePublic+0x130>)
 8020770:	0011      	movs	r1, r2
 8020772:	0018      	movs	r0, r3
 8020774:	f7ff faf2 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 8020778:	68fb      	ldr	r3, [r7, #12]
 802077a:	7a9b      	ldrb	r3, [r3, #10]
 802077c:	069b      	lsls	r3, r3, #26
 802077e:	0f9b      	lsrs	r3, r3, #30
 8020780:	b2db      	uxtb	r3, r3
 8020782:	001a      	movs	r2, r3
 8020784:	4b22      	ldr	r3, [pc, #136]	; (8020810 <_itsdk_config_consolePublic+0x134>)
 8020786:	0011      	movs	r1, r2
 8020788:	0018      	movs	r0, r3
 802078a:	f7ff fae7 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 802078e:	68fb      	ldr	r3, [r7, #12]
 8020790:	7a9b      	ldrb	r3, [r3, #10]
 8020792:	079b      	lsls	r3, r3, #30
 8020794:	0f9b      	lsrs	r3, r3, #30
 8020796:	b2db      	uxtb	r3, r3
 8020798:	001a      	movs	r2, r3
 802079a:	4b1e      	ldr	r3, [pc, #120]	; (8020814 <_itsdk_config_consolePublic+0x138>)
 802079c:	0011      	movs	r1, r2
 802079e:	0018      	movs	r0, r3
 80207a0:	f7ff fadc 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 80207a4:	68fb      	ldr	r3, [r7, #12]
 80207a6:	7a9b      	ldrb	r3, [r3, #10]
 80207a8:	071b      	lsls	r3, r3, #28
 80207aa:	0f9b      	lsrs	r3, r3, #30
 80207ac:	b2db      	uxtb	r3, r3
 80207ae:	001a      	movs	r2, r3
 80207b0:	4b19      	ldr	r3, [pc, #100]	; (8020818 <_itsdk_config_consolePublic+0x13c>)
 80207b2:	0011      	movs	r1, r2
 80207b4:	0018      	movs	r0, r3
 80207b6:	f7ff fad1 	bl	801fd5c <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 80207ba:	68fb      	ldr	r3, [r7, #12]
 80207bc:	7adb      	ldrb	r3, [r3, #11]
 80207be:	001a      	movs	r2, r3
 80207c0:	4b16      	ldr	r3, [pc, #88]	; (802081c <_itsdk_config_consolePublic+0x140>)
 80207c2:	0011      	movs	r1, r2
 80207c4:	0018      	movs	r0, r3
 80207c6:	f7ff fac9 	bl	801fd5c <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 80207ca:	68fb      	ldr	r3, [r7, #12]
 80207cc:	0018      	movs	r0, r3
 80207ce:	f7ff ff75 	bl	80206bc <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 80207d2:	4b13      	ldr	r3, [pc, #76]	; (8020820 <_itsdk_config_consolePublic+0x144>)
 80207d4:	0018      	movs	r0, r3
 80207d6:	f7ff fac1 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 80207da:	2300      	movs	r3, #0
 80207dc:	e001      	b.n	80207e2 <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 80207de:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 80207e0:	2301      	movs	r3, #1
	}
 80207e2:	0018      	movs	r0, r3
 80207e4:	46bd      	mov	sp, r7
 80207e6:	b004      	add	sp, #16
 80207e8:	bd80      	pop	{r7, pc}
 80207ea:	46c0      	nop			; (mov r8, r8)
 80207ec:	080279d4 	.word	0x080279d4
 80207f0:	080279e4 	.word	0x080279e4
 80207f4:	08027a00 	.word	0x08027a00
 80207f8:	20002358 	.word	0x20002358
 80207fc:	2000233c 	.word	0x2000233c
 8020800:	08027a24 	.word	0x08027a24
 8020804:	08027a3c 	.word	0x08027a3c
 8020808:	08027a58 	.word	0x08027a58
 802080c:	08027a74 	.word	0x08027a74
 8020810:	08027a8c 	.word	0x08027a8c
 8020814:	08027aa8 	.word	0x08027aa8
 8020818:	08027ac4 	.word	0x08027ac4
 802081c:	08027ae0 	.word	0x08027ae0
 8020820:	08027af8 	.word	0x08027af8

08020824 <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 8020824:	b5b0      	push	{r4, r5, r7, lr}
 8020826:	b088      	sub	sp, #32
 8020828:	af00      	add	r7, sp, #0
 802082a:	6078      	str	r0, [r7, #4]
 802082c:	000a      	movs	r2, r1
 802082e:	1cfb      	adds	r3, r7, #3
 8020830:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 8020832:	1cfb      	adds	r3, r7, #3
 8020834:	781b      	ldrb	r3, [r3, #0]
 8020836:	2b01      	cmp	r3, #1
 8020838:	d000      	beq.n	802083c <_itsdk_config_consolePriv+0x18>
 802083a:	e098      	b.n	802096e <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	781b      	ldrb	r3, [r3, #0]
 8020840:	2b46      	cmp	r3, #70	; 0x46
 8020842:	d03b      	beq.n	80208bc <_itsdk_config_consolePriv+0x98>
 8020844:	dc02      	bgt.n	802084c <_itsdk_config_consolePriv+0x28>
 8020846:	2b3f      	cmp	r3, #63	; 0x3f
 8020848:	d005      	beq.n	8020856 <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 802084a:	e21c      	b.n	8020c86 <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 802084c:	2b53      	cmp	r3, #83	; 0x53
 802084e:	d02c      	beq.n	80208aa <_itsdk_config_consolePriv+0x86>
 8020850:	2b6d      	cmp	r3, #109	; 0x6d
 8020852:	d040      	beq.n	80208d6 <_itsdk_config_consolePriv+0xb2>
			break;
 8020854:	e217      	b.n	8020c86 <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 8020856:	4bd9      	ldr	r3, [pc, #868]	; (8020bbc <_itsdk_config_consolePriv+0x398>)
 8020858:	0018      	movs	r0, r3
 802085a:	f7ff fa7f 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 802085e:	4bd8      	ldr	r3, [pc, #864]	; (8020bc0 <_itsdk_config_consolePriv+0x39c>)
 8020860:	0018      	movs	r0, r3
 8020862:	f7ff fa7b 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 8020866:	4bd7      	ldr	r3, [pc, #860]	; (8020bc4 <_itsdk_config_consolePriv+0x3a0>)
 8020868:	0018      	movs	r0, r3
 802086a:	f7ff fa77 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 802086e:	4bd6      	ldr	r3, [pc, #856]	; (8020bc8 <_itsdk_config_consolePriv+0x3a4>)
 8020870:	0018      	movs	r0, r3
 8020872:	f7ff fa73 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 8020876:	4bd5      	ldr	r3, [pc, #852]	; (8020bcc <_itsdk_config_consolePriv+0x3a8>)
 8020878:	0018      	movs	r0, r3
 802087a:	f7ff fa6f 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 802087e:	4bd4      	ldr	r3, [pc, #848]	; (8020bd0 <_itsdk_config_consolePriv+0x3ac>)
 8020880:	0018      	movs	r0, r3
 8020882:	f7ff fa6b 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 8020886:	4bd3      	ldr	r3, [pc, #844]	; (8020bd4 <_itsdk_config_consolePriv+0x3b0>)
 8020888:	0018      	movs	r0, r3
 802088a:	f7ff fa67 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 802088e:	4bd2      	ldr	r3, [pc, #840]	; (8020bd8 <_itsdk_config_consolePriv+0x3b4>)
 8020890:	0018      	movs	r0, r3
 8020892:	f7ff fa63 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 8020896:	4bd1      	ldr	r3, [pc, #836]	; (8020bdc <_itsdk_config_consolePriv+0x3b8>)
 8020898:	0018      	movs	r0, r3
 802089a:	f7ff fa5f 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 802089e:	4bd0      	ldr	r3, [pc, #832]	; (8020be0 <_itsdk_config_consolePriv+0x3bc>)
 80208a0:	0018      	movs	r0, r3
 80208a2:	f7ff fa5b 	bl	801fd5c <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80208a6:	2300      	movs	r3, #0
 80208a8:	e1ee      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 80208aa:	2001      	movs	r0, #1
 80208ac:	f7ff fec6 	bl	802063c <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 80208b0:	4bcc      	ldr	r3, [pc, #816]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 80208b2:	0018      	movs	r0, r3
 80208b4:	f7ff fa52 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80208b8:	2300      	movs	r3, #0
 80208ba:	e1e5      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80208bc:	4bca      	ldr	r3, [pc, #808]	; (8020be8 <_itsdk_config_consolePriv+0x3c4>)
 80208be:	2103      	movs	r1, #3
 80208c0:	0018      	movs	r0, r3
 80208c2:	f002 faad 	bl	8022e20 <itsdk_error_report>
			  itsdk_config_resetToFactory();
 80208c6:	f7ff fdb1 	bl	802042c <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 80208ca:	4bc6      	ldr	r3, [pc, #792]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 80208cc:	0018      	movs	r0, r3
 80208ce:	f7ff fa45 	bl	801fd5c <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 80208d2:	2300      	movs	r3, #0
 80208d4:	e1d8      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 80208d6:	2300      	movs	r3, #0
 80208d8:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 80208da:	2300      	movs	r3, #0
 80208dc:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 80208de:	2300      	movs	r3, #0
 80208e0:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 80208e2:	240c      	movs	r4, #12
 80208e4:	193b      	adds	r3, r7, r4
 80208e6:	0018      	movs	r0, r3
 80208e8:	f000 fad7 	bl	8020e9a <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 80208ec:	68fa      	ldr	r2, [r7, #12]
 80208ee:	697b      	ldr	r3, [r7, #20]
 80208f0:	18d2      	adds	r2, r2, r3
 80208f2:	68fb      	ldr	r3, [r7, #12]
 80208f4:	6979      	ldr	r1, [r7, #20]
 80208f6:	48bd      	ldr	r0, [pc, #756]	; (8020bec <_itsdk_config_consolePriv+0x3c8>)
 80208f8:	f7ff fa30 	bl	801fd5c <_itsdk_console_printf>
			  	offset += size;
 80208fc:	68fb      	ldr	r3, [r7, #12]
 80208fe:	697a      	ldr	r2, [r7, #20]
 8020900:	18d3      	adds	r3, r2, r3
 8020902:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8020904:	68fb      	ldr	r3, [r7, #12]
 8020906:	693a      	ldr	r2, [r7, #16]
 8020908:	18d3      	adds	r3, r2, r3
 802090a:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 802090c:	193b      	adds	r3, r7, r4
 802090e:	0018      	movs	r0, r3
 8020910:	f002 fbab 	bl	802306a <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8020914:	68fa      	ldr	r2, [r7, #12]
 8020916:	697b      	ldr	r3, [r7, #20]
 8020918:	18d2      	adds	r2, r2, r3
 802091a:	68fb      	ldr	r3, [r7, #12]
 802091c:	6979      	ldr	r1, [r7, #20]
 802091e:	48b4      	ldr	r0, [pc, #720]	; (8020bf0 <_itsdk_config_consolePriv+0x3cc>)
 8020920:	f7ff fa1c 	bl	801fd5c <_itsdk_console_printf>
			  	offset += size;
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	697a      	ldr	r2, [r7, #20]
 8020928:	18d3      	adds	r3, r2, r3
 802092a:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 802092c:	68fb      	ldr	r3, [r7, #12]
 802092e:	693a      	ldr	r2, [r7, #16]
 8020930:	18d3      	adds	r3, r2, r3
 8020932:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 8020934:	193b      	adds	r3, r7, r4
 8020936:	0018      	movs	r0, r3
 8020938:	f7ff fcdd 	bl	80202f6 <eeprom_getConfigSize>
  		  	  totSize += size;
 802093c:	68fb      	ldr	r3, [r7, #12]
 802093e:	693a      	ldr	r2, [r7, #16]
 8020940:	18d3      	adds	r3, r2, r3
 8020942:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8020944:	68fa      	ldr	r2, [r7, #12]
 8020946:	697b      	ldr	r3, [r7, #20]
 8020948:	18d2      	adds	r2, r2, r3
 802094a:	68fb      	ldr	r3, [r7, #12]
 802094c:	6979      	ldr	r1, [r7, #20]
 802094e:	48a9      	ldr	r0, [pc, #676]	; (8020bf4 <_itsdk_config_consolePriv+0x3d0>)
 8020950:	f7ff fa04 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 8020954:	23c0      	movs	r3, #192	; 0xc0
 8020956:	015a      	lsls	r2, r3, #5
 8020958:	6939      	ldr	r1, [r7, #16]
 802095a:	4ba7      	ldr	r3, [pc, #668]	; (8020bf8 <_itsdk_config_consolePriv+0x3d4>)
 802095c:	0018      	movs	r0, r3
 802095e:	f7ff f9fd 	bl	801fd5c <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 8020962:	4ba0      	ldr	r3, [pc, #640]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020964:	0018      	movs	r0, r3
 8020966:	f7ff f9f9 	bl	801fd5c <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 802096a:	2300      	movs	r3, #0
 802096c:	e18c      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 802096e:	1cfb      	adds	r3, r7, #3
 8020970:	781b      	ldrb	r3, [r3, #0]
 8020972:	2b04      	cmp	r3, #4
 8020974:	d116      	bne.n	80209a4 <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	781b      	ldrb	r3, [r3, #0]
 802097a:	2b73      	cmp	r3, #115	; 0x73
 802097c:	d000      	beq.n	8020980 <_itsdk_config_consolePriv+0x15c>
 802097e:	e182      	b.n	8020c86 <_itsdk_config_consolePriv+0x462>
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	3301      	adds	r3, #1
 8020984:	781b      	ldrb	r3, [r3, #0]
 8020986:	2b63      	cmp	r3, #99	; 0x63
 8020988:	d000      	beq.n	802098c <_itsdk_config_consolePriv+0x168>
 802098a:	e17c      	b.n	8020c86 <_itsdk_config_consolePriv+0x462>
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	3302      	adds	r3, #2
 8020990:	781b      	ldrb	r3, [r3, #0]
 8020992:	2b3a      	cmp	r3, #58	; 0x3a
 8020994:	d000      	beq.n	8020998 <_itsdk_config_consolePriv+0x174>
 8020996:	e176      	b.n	8020c86 <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 8020998:	4b98      	ldr	r3, [pc, #608]	; (8020bfc <_itsdk_config_consolePriv+0x3d8>)
 802099a:	0018      	movs	r0, r3
 802099c:	f7ff f9de 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80209a0:	2302      	movs	r3, #2
 80209a2:	e171      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 80209a4:	1cfb      	adds	r3, r7, #3
 80209a6:	781b      	ldrb	r3, [r3, #0]
 80209a8:	2b05      	cmp	r3, #5
 80209aa:	d800      	bhi.n	80209ae <_itsdk_config_consolePriv+0x18a>
 80209ac:	e168      	b.n	8020c80 <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	781b      	ldrb	r3, [r3, #0]
 80209b2:	2b53      	cmp	r3, #83	; 0x53
 80209b4:	d000      	beq.n	80209b8 <_itsdk_config_consolePriv+0x194>
 80209b6:	e163      	b.n	8020c80 <_itsdk_config_consolePriv+0x45c>
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	3301      	adds	r3, #1
 80209bc:	781b      	ldrb	r3, [r3, #0]
 80209be:	2b43      	cmp	r3, #67	; 0x43
 80209c0:	d000      	beq.n	80209c4 <_itsdk_config_consolePriv+0x1a0>
 80209c2:	e15d      	b.n	8020c80 <_itsdk_config_consolePriv+0x45c>
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	3302      	adds	r3, #2
 80209c8:	781b      	ldrb	r3, [r3, #0]
 80209ca:	2b3a      	cmp	r3, #58	; 0x3a
 80209cc:	d000      	beq.n	80209d0 <_itsdk_config_consolePriv+0x1ac>
 80209ce:	e157      	b.n	8020c80 <_itsdk_config_consolePriv+0x45c>
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	3304      	adds	r3, #4
 80209d4:	781b      	ldrb	r3, [r3, #0]
 80209d6:	2b3a      	cmp	r3, #58	; 0x3a
 80209d8:	d000      	beq.n	80209dc <_itsdk_config_consolePriv+0x1b8>
 80209da:	e151      	b.n	8020c80 <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	3303      	adds	r3, #3
 80209e0:	781b      	ldrb	r3, [r3, #0]
 80209e2:	3b30      	subs	r3, #48	; 0x30
 80209e4:	2b22      	cmp	r3, #34	; 0x22
 80209e6:	d900      	bls.n	80209ea <_itsdk_config_consolePriv+0x1c6>
 80209e8:	e14c      	b.n	8020c84 <_itsdk_config_consolePriv+0x460>
 80209ea:	009a      	lsls	r2, r3, #2
 80209ec:	4b84      	ldr	r3, [pc, #528]	; (8020c00 <_itsdk_config_consolePriv+0x3dc>)
 80209ee:	18d3      	adds	r3, r2, r3
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	3305      	adds	r3, #5
 80209f8:	781b      	ldrb	r3, [r3, #0]
 80209fa:	2b31      	cmp	r3, #49	; 0x31
 80209fc:	d007      	beq.n	8020a0e <_itsdk_config_consolePriv+0x1ea>
 80209fe:	2b32      	cmp	r3, #50	; 0x32
 8020a00:	d009      	beq.n	8020a16 <_itsdk_config_consolePriv+0x1f2>
 8020a02:	2b30      	cmp	r3, #48	; 0x30
 8020a04:	d10b      	bne.n	8020a1e <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 8020a06:	4b7f      	ldr	r3, [pc, #508]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020a08:	2200      	movs	r2, #0
 8020a0a:	80da      	strh	r2, [r3, #6]
					   break;
 8020a0c:	e00d      	b.n	8020a2a <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 8020a0e:	4b7d      	ldr	r3, [pc, #500]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020a10:	2201      	movs	r2, #1
 8020a12:	80da      	strh	r2, [r3, #6]
					   break;
 8020a14:	e009      	b.n	8020a2a <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 8020a16:	4b7b      	ldr	r3, [pc, #492]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020a18:	2202      	movs	r2, #2
 8020a1a:	80da      	strh	r2, [r3, #6]
					   break;
 8020a1c:	e005      	b.n	8020a2a <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 8020a1e:	4b77      	ldr	r3, [pc, #476]	; (8020bfc <_itsdk_config_consolePriv+0x3d8>)
 8020a20:	0018      	movs	r0, r3
 8020a22:	f7ff f99b 	bl	801fd5c <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 8020a26:	2302      	movs	r3, #2
 8020a28:	e12e      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 8020a2a:	4b6e      	ldr	r3, [pc, #440]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020a2c:	0018      	movs	r0, r3
 8020a2e:	f7ff f995 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8020a32:	2300      	movs	r3, #0
 8020a34:	e128      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	3305      	adds	r3, #5
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	2104      	movs	r1, #4
 8020a3e:	0018      	movs	r0, r3
 8020a40:	f002 ffaf 	bl	80239a2 <itdt_isHexString>
 8020a44:	1e03      	subs	r3, r0, #0
 8020a46:	d01b      	beq.n	8020a80 <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 8020a48:	687b      	ldr	r3, [r7, #4]
 8020a4a:	3305      	adds	r3, #5
 8020a4c:	251e      	movs	r5, #30
 8020a4e:	197c      	adds	r4, r7, r5
 8020a50:	0018      	movs	r0, r3
 8020a52:	f002 fefa 	bl	802384a <itdt_convertHexChar4Int>
 8020a56:	0003      	movs	r3, r0
 8020a58:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 8020a5a:	197b      	adds	r3, r7, r5
 8020a5c:	881b      	ldrh	r3, [r3, #0]
 8020a5e:	0018      	movs	r0, r3
 8020a60:	f002 ffeb 	bl	8023a3a <itdt_count_bits_1>
 8020a64:	0003      	movs	r3, r0
 8020a66:	2b01      	cmp	r3, #1
 8020a68:	d80a      	bhi.n	8020a80 <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 8020a6a:	4b66      	ldr	r3, [pc, #408]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020a6c:	221e      	movs	r2, #30
 8020a6e:	18ba      	adds	r2, r7, r2
 8020a70:	8812      	ldrh	r2, [r2, #0]
 8020a72:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 8020a74:	4b5b      	ldr	r3, [pc, #364]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020a76:	0018      	movs	r0, r3
 8020a78:	f7ff f970 	bl	801fd5c <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	e103      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8020a80:	4b5e      	ldr	r3, [pc, #376]	; (8020bfc <_itsdk_config_consolePriv+0x3d8>)
 8020a82:	0018      	movs	r0, r3
 8020a84:	f7ff f96a 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020a88:	2302      	movs	r3, #2
 8020a8a:	e0fd      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	3305      	adds	r3, #5
 8020a90:	781b      	ldrb	r3, [r3, #0]
 8020a92:	2b31      	cmp	r3, #49	; 0x31
 8020a94:	d10d      	bne.n	8020ab2 <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 8020a96:	4b5b      	ldr	r3, [pc, #364]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020a98:	7a9a      	ldrb	r2, [r3, #10]
 8020a9a:	213f      	movs	r1, #63	; 0x3f
 8020a9c:	400a      	ands	r2, r1
 8020a9e:	1c11      	adds	r1, r2, #0
 8020aa0:	2240      	movs	r2, #64	; 0x40
 8020aa2:	430a      	orrs	r2, r1
 8020aa4:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020aa6:	4b4f      	ldr	r3, [pc, #316]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020aa8:	0018      	movs	r0, r3
 8020aaa:	f7ff f957 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020aae:	2300      	movs	r3, #0
 8020ab0:	e0ea      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	3305      	adds	r3, #5
 8020ab6:	781b      	ldrb	r3, [r3, #0]
 8020ab8:	2b32      	cmp	r3, #50	; 0x32
 8020aba:	d10e      	bne.n	8020ada <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8020abc:	4b51      	ldr	r3, [pc, #324]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020abe:	7a9a      	ldrb	r2, [r3, #10]
 8020ac0:	213f      	movs	r1, #63	; 0x3f
 8020ac2:	400a      	ands	r2, r1
 8020ac4:	1c11      	adds	r1, r2, #0
 8020ac6:	2280      	movs	r2, #128	; 0x80
 8020ac8:	4252      	negs	r2, r2
 8020aca:	430a      	orrs	r2, r1
 8020acc:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020ace:	4b45      	ldr	r3, [pc, #276]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020ad0:	0018      	movs	r0, r3
 8020ad2:	f7ff f943 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	e0d6      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020ada:	4b48      	ldr	r3, [pc, #288]	; (8020bfc <_itsdk_config_consolePriv+0x3d8>)
 8020adc:	0018      	movs	r0, r3
 8020ade:	f7ff f93d 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020ae2:	2302      	movs	r3, #2
 8020ae4:	e0d0      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	3305      	adds	r3, #5
 8020aea:	781b      	ldrb	r3, [r3, #0]
 8020aec:	2b31      	cmp	r3, #49	; 0x31
 8020aee:	d10d      	bne.n	8020b0c <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 8020af0:	4b44      	ldr	r3, [pc, #272]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020af2:	7a9a      	ldrb	r2, [r3, #10]
 8020af4:	2130      	movs	r1, #48	; 0x30
 8020af6:	438a      	bics	r2, r1
 8020af8:	1c11      	adds	r1, r2, #0
 8020afa:	2210      	movs	r2, #16
 8020afc:	430a      	orrs	r2, r1
 8020afe:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b00:	4b38      	ldr	r3, [pc, #224]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020b02:	0018      	movs	r0, r3
 8020b04:	f7ff f92a 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b08:	2300      	movs	r3, #0
 8020b0a:	e0bd      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	3305      	adds	r3, #5
 8020b10:	781b      	ldrb	r3, [r3, #0]
 8020b12:	2b32      	cmp	r3, #50	; 0x32
 8020b14:	d10d      	bne.n	8020b32 <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 8020b16:	4b3b      	ldr	r3, [pc, #236]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020b18:	7a9a      	ldrb	r2, [r3, #10]
 8020b1a:	2130      	movs	r1, #48	; 0x30
 8020b1c:	438a      	bics	r2, r1
 8020b1e:	1c11      	adds	r1, r2, #0
 8020b20:	2220      	movs	r2, #32
 8020b22:	430a      	orrs	r2, r1
 8020b24:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b26:	4b2f      	ldr	r3, [pc, #188]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020b28:	0018      	movs	r0, r3
 8020b2a:	f7ff f917 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b2e:	2300      	movs	r3, #0
 8020b30:	e0aa      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020b32:	4b32      	ldr	r3, [pc, #200]	; (8020bfc <_itsdk_config_consolePriv+0x3d8>)
 8020b34:	0018      	movs	r0, r3
 8020b36:	f7ff f911 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020b3a:	2302      	movs	r3, #2
 8020b3c:	e0a4      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	3305      	adds	r3, #5
 8020b42:	781b      	ldrb	r3, [r3, #0]
 8020b44:	2b31      	cmp	r3, #49	; 0x31
 8020b46:	d10d      	bne.n	8020b64 <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 8020b48:	4b2e      	ldr	r3, [pc, #184]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020b4a:	7a9a      	ldrb	r2, [r3, #10]
 8020b4c:	2103      	movs	r1, #3
 8020b4e:	438a      	bics	r2, r1
 8020b50:	1c11      	adds	r1, r2, #0
 8020b52:	2201      	movs	r2, #1
 8020b54:	430a      	orrs	r2, r1
 8020b56:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b58:	4b22      	ldr	r3, [pc, #136]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020b5a:	0018      	movs	r0, r3
 8020b5c:	f7ff f8fe 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b60:	2300      	movs	r3, #0
 8020b62:	e091      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	3305      	adds	r3, #5
 8020b68:	781b      	ldrb	r3, [r3, #0]
 8020b6a:	2b32      	cmp	r3, #50	; 0x32
 8020b6c:	d10d      	bne.n	8020b8a <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 8020b6e:	4b25      	ldr	r3, [pc, #148]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020b70:	7a9a      	ldrb	r2, [r3, #10]
 8020b72:	2103      	movs	r1, #3
 8020b74:	438a      	bics	r2, r1
 8020b76:	1c11      	adds	r1, r2, #0
 8020b78:	2202      	movs	r2, #2
 8020b7a:	430a      	orrs	r2, r1
 8020b7c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b7e:	4b19      	ldr	r3, [pc, #100]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020b80:	0018      	movs	r0, r3
 8020b82:	f7ff f8eb 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b86:	2300      	movs	r3, #0
 8020b88:	e07e      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020b8a:	4b1c      	ldr	r3, [pc, #112]	; (8020bfc <_itsdk_config_consolePriv+0x3d8>)
 8020b8c:	0018      	movs	r0, r3
 8020b8e:	f7ff f8e5 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020b92:	2302      	movs	r3, #2
 8020b94:	e078      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	3305      	adds	r3, #5
 8020b9a:	781b      	ldrb	r3, [r3, #0]
 8020b9c:	2b31      	cmp	r3, #49	; 0x31
 8020b9e:	d133      	bne.n	8020c08 <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 8020ba0:	4b18      	ldr	r3, [pc, #96]	; (8020c04 <_itsdk_config_consolePriv+0x3e0>)
 8020ba2:	7a9a      	ldrb	r2, [r3, #10]
 8020ba4:	210c      	movs	r1, #12
 8020ba6:	438a      	bics	r2, r1
 8020ba8:	1c11      	adds	r1, r2, #0
 8020baa:	2204      	movs	r2, #4
 8020bac:	430a      	orrs	r2, r1
 8020bae:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020bb0:	4b0c      	ldr	r3, [pc, #48]	; (8020be4 <_itsdk_config_consolePriv+0x3c0>)
 8020bb2:	0018      	movs	r0, r3
 8020bb4:	f7ff f8d2 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020bb8:	2300      	movs	r3, #0
 8020bba:	e065      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
 8020bbc:	08027b00 	.word	0x08027b00
 8020bc0:	08027b24 	.word	0x08027b24
 8020bc4:	08027b54 	.word	0x08027b54
 8020bc8:	08027b7c 	.word	0x08027b7c
 8020bcc:	08027bac 	.word	0x08027bac
 8020bd0:	08027be0 	.word	0x08027be0
 8020bd4:	08027c08 	.word	0x08027c08
 8020bd8:	08027c3c 	.word	0x08027c3c
 8020bdc:	08027c68 	.word	0x08027c68
 8020be0:	08027c9c 	.word	0x08027c9c
 8020be4:	08027af8 	.word	0x08027af8
 8020be8:	50000071 	.word	0x50000071
 8020bec:	08027cc0 	.word	0x08027cc0
 8020bf0:	08027ce4 	.word	0x08027ce4
 8020bf4:	08027d08 	.word	0x08027d08
 8020bf8:	08027d34 	.word	0x08027d34
 8020bfc:	08027d50 	.word	0x08027d50
 8020c00:	08029644 	.word	0x08029644
 8020c04:	2000233c 	.word	0x2000233c
				}
			    if ( buffer[5] == '2' ) {
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	3305      	adds	r3, #5
 8020c0c:	781b      	ldrb	r3, [r3, #0]
 8020c0e:	2b32      	cmp	r3, #50	; 0x32
 8020c10:	d10d      	bne.n	8020c2e <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 8020c12:	4b1f      	ldr	r3, [pc, #124]	; (8020c90 <_itsdk_config_consolePriv+0x46c>)
 8020c14:	7a9a      	ldrb	r2, [r3, #10]
 8020c16:	210c      	movs	r1, #12
 8020c18:	438a      	bics	r2, r1
 8020c1a:	1c11      	adds	r1, r2, #0
 8020c1c:	2208      	movs	r2, #8
 8020c1e:	430a      	orrs	r2, r1
 8020c20:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020c22:	4b1c      	ldr	r3, [pc, #112]	; (8020c94 <_itsdk_config_consolePriv+0x470>)
 8020c24:	0018      	movs	r0, r3
 8020c26:	f7ff f899 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	e02c      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020c2e:	4b1a      	ldr	r3, [pc, #104]	; (8020c98 <_itsdk_config_consolePriv+0x474>)
 8020c30:	0018      	movs	r0, r3
 8020c32:	f7ff f893 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020c36:	2302      	movs	r3, #2
 8020c38:	e026      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 8020c3a:	1cfb      	adds	r3, r7, #3
 8020c3c:	781b      	ldrb	r3, [r3, #0]
 8020c3e:	2b06      	cmp	r3, #6
 8020c40:	d918      	bls.n	8020c74 <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	3305      	adds	r3, #5
 8020c46:	2102      	movs	r1, #2
 8020c48:	0018      	movs	r0, r3
 8020c4a:	f002 fe23 	bl	8023894 <itdt_convertDecCharNInt>
 8020c4e:	0003      	movs	r3, r0
 8020c50:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 8020c52:	69bb      	ldr	r3, [r7, #24]
 8020c54:	4a11      	ldr	r2, [pc, #68]	; (8020c9c <_itsdk_config_consolePriv+0x478>)
 8020c56:	4293      	cmp	r3, r2
 8020c58:	d00c      	beq.n	8020c74 <_itsdk_config_consolePriv+0x450>
 8020c5a:	69bb      	ldr	r3, [r7, #24]
 8020c5c:	2b05      	cmp	r3, #5
 8020c5e:	dc09      	bgt.n	8020c74 <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 8020c60:	69bb      	ldr	r3, [r7, #24]
 8020c62:	b2da      	uxtb	r2, r3
 8020c64:	4b0a      	ldr	r3, [pc, #40]	; (8020c90 <_itsdk_config_consolePriv+0x46c>)
 8020c66:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 8020c68:	4b0a      	ldr	r3, [pc, #40]	; (8020c94 <_itsdk_config_consolePriv+0x470>)
 8020c6a:	0018      	movs	r0, r3
 8020c6c:	f7ff f876 	bl	801fd5c <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8020c70:	2300      	movs	r3, #0
 8020c72:	e009      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8020c74:	4b08      	ldr	r3, [pc, #32]	; (8020c98 <_itsdk_config_consolePriv+0x474>)
 8020c76:	0018      	movs	r0, r3
 8020c78:	f7ff f870 	bl	801fd5c <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020c7c:	2302      	movs	r3, #2
 8020c7e:	e003      	b.n	8020c88 <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 8020c80:	46c0      	nop			; (mov r8, r8)
 8020c82:	e000      	b.n	8020c86 <_itsdk_config_consolePriv+0x462>
				break;
 8020c84:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 8020c86:	2301      	movs	r3, #1
}
 8020c88:	0018      	movs	r0, r3
 8020c8a:	46bd      	mov	sp, r7
 8020c8c:	b008      	add	sp, #32
 8020c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8020c90:	2000233c 	.word	0x2000233c
 8020c94:	08027af8 	.word	0x08027af8
 8020c98:	08027d50 	.word	0x08027d50
 8020c9c:	0fffffff 	.word	0x0fffffff

08020ca0 <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 8020ca0:	b5b0      	push	{r4, r5, r7, lr}
 8020ca2:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 8020ca4:	4a09      	ldr	r2, [pc, #36]	; (8020ccc <itsdk_state_init+0x2c>)
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	2400      	movs	r4, #0
 8020caa:	6093      	str	r3, [r2, #8]
 8020cac:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 8020cae:	f004 f973 	bl	8024f98 <itsdk_getResetCause>
 8020cb2:	0003      	movs	r3, r0
 8020cb4:	001a      	movs	r2, r3
 8020cb6:	4b05      	ldr	r3, [pc, #20]	; (8020ccc <itsdk_state_init+0x2c>)
 8020cb8:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 8020cba:	4b05      	ldr	r3, [pc, #20]	; (8020cd0 <itsdk_state_init+0x30>)
 8020cbc:	88db      	ldrh	r3, [r3, #6]
 8020cbe:	b2da      	uxtb	r2, r3
 8020cc0:	4b02      	ldr	r3, [pc, #8]	; (8020ccc <itsdk_state_init+0x2c>)
 8020cc2:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8020cc4:	46c0      	nop			; (mov r8, r8)
}
 8020cc6:	46bd      	mov	sp, r7
 8020cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8020cca:	46c0      	nop			; (mov r8, r8)
 8020ccc:	20002378 	.word	0x20002378
 8020cd0:	20002358 	.word	0x20002358

08020cd4 <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8020cd4:	b5b0      	push	{r4, r5, r7, lr}
 8020cd6:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 8020cd8:	4b19      	ldr	r3, [pc, #100]	; (8020d40 <itsdk_print_state+0x6c>)
 8020cda:	6898      	ldr	r0, [r3, #8]
 8020cdc:	68d9      	ldr	r1, [r3, #12]
 8020cde:	22fa      	movs	r2, #250	; 0xfa
 8020ce0:	0092      	lsls	r2, r2, #2
 8020ce2:	2300      	movs	r3, #0
 8020ce4:	f7df fc2a 	bl	800053c <__aeabi_uldivmod>
 8020ce8:	0003      	movs	r3, r0
 8020cea:	000c      	movs	r4, r1
 8020cec:	001a      	movs	r2, r3
 8020cee:	4b15      	ldr	r3, [pc, #84]	; (8020d44 <itsdk_print_state+0x70>)
 8020cf0:	0011      	movs	r1, r2
 8020cf2:	0018      	movs	r0, r3
 8020cf4:	f7ff f832 	bl	801fd5c <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 8020cf8:	4b11      	ldr	r3, [pc, #68]	; (8020d40 <itsdk_print_state+0x6c>)
 8020cfa:	781b      	ldrb	r3, [r3, #0]
 8020cfc:	001a      	movs	r2, r3
 8020cfe:	4b12      	ldr	r3, [pc, #72]	; (8020d48 <itsdk_print_state+0x74>)
 8020d00:	0011      	movs	r1, r2
 8020d02:	0018      	movs	r0, r3
 8020d04:	f7ff f82a 	bl	801fd5c <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 8020d08:	4b0d      	ldr	r3, [pc, #52]	; (8020d40 <itsdk_print_state+0x6c>)
 8020d0a:	785b      	ldrb	r3, [r3, #1]
 8020d0c:	001a      	movs	r2, r3
 8020d0e:	4b0f      	ldr	r3, [pc, #60]	; (8020d4c <itsdk_print_state+0x78>)
 8020d10:	0011      	movs	r1, r2
 8020d12:	0018      	movs	r0, r3
 8020d14:	f7ff f822 	bl	801fd5c <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 8020d18:	4b09      	ldr	r3, [pc, #36]	; (8020d40 <itsdk_print_state+0x6c>)
 8020d1a:	785b      	ldrb	r3, [r3, #1]
 8020d1c:	2b02      	cmp	r3, #2
 8020d1e:	d10b      	bne.n	8020d38 <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 8020d20:	f002 fbdc 	bl	80234dc <itsdk_lorawan_hasjoined>
 8020d24:	1e03      	subs	r3, r0, #0
 8020d26:	d001      	beq.n	8020d2c <itsdk_print_state+0x58>
 8020d28:	2359      	movs	r3, #89	; 0x59
 8020d2a:	e000      	b.n	8020d2e <itsdk_print_state+0x5a>
 8020d2c:	234e      	movs	r3, #78	; 0x4e
 8020d2e:	4a08      	ldr	r2, [pc, #32]	; (8020d50 <itsdk_print_state+0x7c>)
 8020d30:	0019      	movs	r1, r3
 8020d32:	0010      	movs	r0, r2
 8020d34:	f7ff f812 	bl	801fd5c <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 8020d38:	46c0      	nop			; (mov r8, r8)
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8020d3e:	46c0      	nop			; (mov r8, r8)
 8020d40:	20002378 	.word	0x20002378
 8020d44:	08027d58 	.word	0x08027d58
 8020d48:	08027d78 	.word	0x08027d78
 8020d4c:	08027d98 	.word	0x08027d98
 8020d50:	08027db4 	.word	0x08027db4

08020d54 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8020d54:	b580      	push	{r7, lr}
 8020d56:	b086      	sub	sp, #24
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	60f8      	str	r0, [r7, #12]
 8020d5c:	60b9      	str	r1, [r7, #8]
 8020d5e:	1dfb      	adds	r3, r7, #7
 8020d60:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8020d62:	2300      	movs	r3, #0
 8020d64:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 8020d66:	1dfb      	adds	r3, r7, #7
 8020d68:	781b      	ldrb	r3, [r3, #0]
 8020d6a:	2b13      	cmp	r3, #19
 8020d6c:	d83d      	bhi.n	8020dea <_itsdk_secstore_getOffset+0x96>
 8020d6e:	009a      	lsls	r2, r3, #2
 8020d70:	4b27      	ldr	r3, [pc, #156]	; (8020e10 <_itsdk_secstore_getOffset+0xbc>)
 8020d72:	18d3      	adds	r3, r2, r3
 8020d74:	681b      	ldr	r3, [r3, #0]
 8020d76:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 8020d78:	693b      	ldr	r3, [r7, #16]
 8020d7a:	617b      	str	r3, [r7, #20]
		break;
 8020d7c:	e037      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8020d7e:	2301      	movs	r3, #1
 8020d80:	e041      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8020d82:	693b      	ldr	r3, [r7, #16]
 8020d84:	3310      	adds	r3, #16
 8020d86:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020d88:	e031      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 8020d8a:	693b      	ldr	r3, [r7, #16]
 8020d8c:	3320      	adds	r3, #32
 8020d8e:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020d90:	e02d      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8020d92:	693b      	ldr	r3, [r7, #16]
 8020d94:	3330      	adds	r3, #48	; 0x30
 8020d96:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020d98:	e029      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 8020d9a:	693b      	ldr	r3, [r7, #16]
 8020d9c:	3340      	adds	r3, #64	; 0x40
 8020d9e:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020da0:	e025      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8020da2:	693b      	ldr	r3, [r7, #16]
 8020da4:	3350      	adds	r3, #80	; 0x50
 8020da6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020da8:	e021      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 8020daa:	693b      	ldr	r3, [r7, #16]
 8020dac:	3310      	adds	r3, #16
 8020dae:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020db0:	e01d      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8020db2:	693b      	ldr	r3, [r7, #16]
 8020db4:	3320      	adds	r3, #32
 8020db6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020db8:	e019      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 8020dba:	693b      	ldr	r3, [r7, #16]
 8020dbc:	3330      	adds	r3, #48	; 0x30
 8020dbe:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020dc0:	e015      	b.n	8020dee <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dc2:	2301      	movs	r3, #1
 8020dc4:	e01f      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dc6:	2301      	movs	r3, #1
 8020dc8:	e01d      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dca:	2301      	movs	r3, #1
 8020dcc:	e01b      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dce:	2301      	movs	r3, #1
 8020dd0:	e019      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	e017      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dd6:	2301      	movs	r3, #1
 8020dd8:	e015      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dda:	2301      	movs	r3, #1
 8020ddc:	e013      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dde:	2301      	movs	r3, #1
 8020de0:	e011      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020de2:	2301      	movs	r3, #1
 8020de4:	e00f      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020de6:	2301      	movs	r3, #1
 8020de8:	e00d      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 8020dea:	2301      	movs	r3, #1
 8020dec:	e00b      	b.n	8020e06 <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8020dee:	697b      	ldr	r3, [r7, #20]
 8020df0:	091b      	lsrs	r3, r3, #4
 8020df2:	b2da      	uxtb	r2, r3
 8020df4:	68bb      	ldr	r3, [r7, #8]
 8020df6:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 8020df8:	697b      	ldr	r3, [r7, #20]
 8020dfa:	3310      	adds	r3, #16
 8020dfc:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8020dfe:	68fb      	ldr	r3, [r7, #12]
 8020e00:	697a      	ldr	r2, [r7, #20]
 8020e02:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8020e04:	2300      	movs	r3, #0
}
 8020e06:	0018      	movs	r0, r3
 8020e08:	46bd      	mov	sp, r7
 8020e0a:	b006      	add	sp, #24
 8020e0c:	bd80      	pop	{r7, pc}
 8020e0e:	46c0      	nop			; (mov r8, r8)
 8020e10:	080296d0 	.word	0x080296d0

08020e14 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8020e14:	b580      	push	{r7, lr}
 8020e16:	b084      	sub	sp, #16
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8020e1c:	210f      	movs	r1, #15
 8020e1e:	187b      	adds	r3, r7, r1
 8020e20:	2201      	movs	r2, #1
 8020e22:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8020e24:	187b      	adds	r3, r7, r1
 8020e26:	187a      	adds	r2, r7, r1
 8020e28:	7812      	ldrb	r2, [r2, #0]
 8020e2a:	3205      	adds	r2, #5
 8020e2c:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8020e2e:	187b      	adds	r3, r7, r1
 8020e30:	187a      	adds	r2, r7, r1
 8020e32:	7812      	ldrb	r2, [r2, #0]
 8020e34:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	187a      	adds	r2, r7, r1
 8020e3a:	7812      	ldrb	r2, [r2, #0]
 8020e3c:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8020e3e:	2300      	movs	r3, #0
}
 8020e40:	0018      	movs	r0, r3
 8020e42:	46bd      	mov	sp, r7
 8020e44:	b004      	add	sp, #16
 8020e46:	bd80      	pop	{r7, pc}

08020e48 <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 8020e48:	b590      	push	{r4, r7, lr}
 8020e4a:	b085      	sub	sp, #20
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8020e50:	687a      	ldr	r2, [r7, #4]
 8020e52:	2310      	movs	r3, #16
 8020e54:	2100      	movs	r1, #0
 8020e56:	2000      	movs	r0, #0
 8020e58:	f004 fb10 	bl	802547c <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	781b      	ldrb	r3, [r3, #0]
 8020e60:	220f      	movs	r2, #15
 8020e62:	4013      	ands	r3, r2
 8020e64:	b2db      	uxtb	r3, r3
 8020e66:	2b0c      	cmp	r3, #12
 8020e68:	d001      	beq.n	8020e6e <_itsdk_secstore_controlHeader+0x26>
 8020e6a:	2302      	movs	r3, #2
 8020e6c:	e011      	b.n	8020e92 <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8020e6e:	240f      	movs	r4, #15
 8020e70:	193b      	adds	r3, r7, r4
 8020e72:	0018      	movs	r0, r3
 8020e74:	f7ff ffce 	bl	8020e14 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	781b      	ldrb	r3, [r3, #0]
 8020e7c:	061b      	lsls	r3, r3, #24
 8020e7e:	0f1b      	lsrs	r3, r3, #28
 8020e80:	b2db      	uxtb	r3, r3
 8020e82:	001a      	movs	r2, r3
 8020e84:	193b      	adds	r3, r7, r4
 8020e86:	781b      	ldrb	r3, [r3, #0]
 8020e88:	429a      	cmp	r2, r3
 8020e8a:	d001      	beq.n	8020e90 <_itsdk_secstore_controlHeader+0x48>
 8020e8c:	2302      	movs	r3, #2
 8020e8e:	e000      	b.n	8020e92 <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8020e90:	2300      	movs	r3, #0
}
 8020e92:	0018      	movs	r0, r3
 8020e94:	46bd      	mov	sp, r7
 8020e96:	b005      	add	sp, #20
 8020e98:	bd90      	pop	{r4, r7, pc}

08020e9a <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 8020e9a:	b580      	push	{r7, lr}
 8020e9c:	b082      	sub	sp, #8
 8020e9e:	af00      	add	r7, sp, #0
 8020ea0:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	2270      	movs	r2, #112	; 0x70
 8020ea6:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8020ea8:	2300      	movs	r3, #0
}
 8020eaa:	0018      	movs	r0, r3
 8020eac:	46bd      	mov	sp, r7
 8020eae:	b002      	add	sp, #8
 8020eb0:	bd80      	pop	{r7, pc}

08020eb2 <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8020eb2:	b580      	push	{r7, lr}
 8020eb4:	b084      	sub	sp, #16
 8020eb6:	af00      	add	r7, sp, #0
 8020eb8:	6078      	str	r0, [r7, #4]
 8020eba:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8020ebc:	2308      	movs	r3, #8
 8020ebe:	18fb      	adds	r3, r7, r3
 8020ec0:	2104      	movs	r1, #4
 8020ec2:	0018      	movs	r0, r3
 8020ec4:	f004 f8fa 	bl	80250bc <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 8020ec8:	2300      	movs	r3, #0
 8020eca:	60fb      	str	r3, [r7, #12]
 8020ecc:	e081      	b.n	8020fd2 <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	2b01      	cmp	r3, #1
 8020ed2:	dc21      	bgt.n	8020f18 <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8020ed4:	68fb      	ldr	r3, [r7, #12]
 8020ed6:	683a      	ldr	r2, [r7, #0]
 8020ed8:	18d3      	adds	r3, r2, r3
 8020eda:	2208      	movs	r2, #8
 8020edc:	18b9      	adds	r1, r7, r2
 8020ede:	68fa      	ldr	r2, [r7, #12]
 8020ee0:	188a      	adds	r2, r1, r2
 8020ee2:	7812      	ldrb	r2, [r2, #0]
 8020ee4:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 8020ee6:	68fb      	ldr	r3, [r7, #12]
 8020ee8:	683a      	ldr	r2, [r7, #0]
 8020eea:	18d3      	adds	r3, r2, r3
 8020eec:	7819      	ldrb	r1, [r3, #0]
 8020eee:	68fb      	ldr	r3, [r7, #12]
 8020ef0:	687a      	ldr	r2, [r7, #4]
 8020ef2:	18d3      	adds	r3, r2, r3
 8020ef4:	781a      	ldrb	r2, [r3, #0]
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	6838      	ldr	r0, [r7, #0]
 8020efa:	18c3      	adds	r3, r0, r3
 8020efc:	404a      	eors	r2, r1
 8020efe:	b2d2      	uxtb	r2, r2
 8020f00:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8020f02:	68fb      	ldr	r3, [r7, #12]
 8020f04:	683a      	ldr	r2, [r7, #0]
 8020f06:	18d3      	adds	r3, r2, r3
 8020f08:	781a      	ldrb	r2, [r3, #0]
 8020f0a:	68fb      	ldr	r3, [r7, #12]
 8020f0c:	6839      	ldr	r1, [r7, #0]
 8020f0e:	18cb      	adds	r3, r1, r3
 8020f10:	3a33      	subs	r2, #51	; 0x33
 8020f12:	b2d2      	uxtb	r2, r2
 8020f14:	701a      	strb	r2, [r3, #0]
 8020f16:	e059      	b.n	8020fcc <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 8020f18:	68fb      	ldr	r3, [r7, #12]
 8020f1a:	2b0d      	cmp	r3, #13
 8020f1c:	dc33      	bgt.n	8020f86 <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	3b02      	subs	r3, #2
 8020f22:	687a      	ldr	r2, [r7, #4]
 8020f24:	18d2      	adds	r2, r2, r3
 8020f26:	68fb      	ldr	r3, [r7, #12]
 8020f28:	6839      	ldr	r1, [r7, #0]
 8020f2a:	18cb      	adds	r3, r1, r3
 8020f2c:	7812      	ldrb	r2, [r2, #0]
 8020f2e:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8020f30:	68fb      	ldr	r3, [r7, #12]
 8020f32:	683a      	ldr	r2, [r7, #0]
 8020f34:	18d3      	adds	r3, r2, r3
 8020f36:	7819      	ldrb	r1, [r3, #0]
 8020f38:	68fb      	ldr	r3, [r7, #12]
 8020f3a:	2203      	movs	r2, #3
 8020f3c:	4013      	ands	r3, r2
 8020f3e:	2208      	movs	r2, #8
 8020f40:	18ba      	adds	r2, r7, r2
 8020f42:	5cd2      	ldrb	r2, [r2, r3]
 8020f44:	68fb      	ldr	r3, [r7, #12]
 8020f46:	6838      	ldr	r0, [r7, #0]
 8020f48:	18c3      	adds	r3, r0, r3
 8020f4a:	404a      	eors	r2, r1
 8020f4c:	b2d2      	uxtb	r2, r2
 8020f4e:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8020f50:	68fb      	ldr	r3, [r7, #12]
 8020f52:	683a      	ldr	r2, [r7, #0]
 8020f54:	18d3      	adds	r3, r2, r3
 8020f56:	781a      	ldrb	r2, [r3, #0]
 8020f58:	68fb      	ldr	r3, [r7, #12]
 8020f5a:	6839      	ldr	r1, [r7, #0]
 8020f5c:	18cb      	adds	r3, r1, r3
 8020f5e:	212c      	movs	r1, #44	; 0x2c
 8020f60:	404a      	eors	r2, r1
 8020f62:	b2d2      	uxtb	r2, r2
 8020f64:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	683a      	ldr	r2, [r7, #0]
 8020f6a:	18d3      	adds	r3, r2, r3
 8020f6c:	7819      	ldrb	r1, [r3, #0]
 8020f6e:	68fb      	ldr	r3, [r7, #12]
 8020f70:	3b01      	subs	r3, #1
 8020f72:	683a      	ldr	r2, [r7, #0]
 8020f74:	18d3      	adds	r3, r2, r3
 8020f76:	781a      	ldrb	r2, [r3, #0]
 8020f78:	68fb      	ldr	r3, [r7, #12]
 8020f7a:	6838      	ldr	r0, [r7, #0]
 8020f7c:	18c3      	adds	r3, r0, r3
 8020f7e:	404a      	eors	r2, r1
 8020f80:	b2d2      	uxtb	r2, r2
 8020f82:	701a      	strb	r2, [r3, #0]
 8020f84:	e022      	b.n	8020fcc <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 8020f86:	68fb      	ldr	r3, [r7, #12]
 8020f88:	3b0c      	subs	r3, #12
 8020f8a:	001a      	movs	r2, r3
 8020f8c:	68fb      	ldr	r3, [r7, #12]
 8020f8e:	6839      	ldr	r1, [r7, #0]
 8020f90:	18cb      	adds	r3, r1, r3
 8020f92:	2108      	movs	r1, #8
 8020f94:	1879      	adds	r1, r7, r1
 8020f96:	5c8a      	ldrb	r2, [r1, r2]
 8020f98:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 8020f9a:	68fb      	ldr	r3, [r7, #12]
 8020f9c:	683a      	ldr	r2, [r7, #0]
 8020f9e:	18d3      	adds	r3, r2, r3
 8020fa0:	7819      	ldrb	r1, [r3, #0]
 8020fa2:	68fb      	ldr	r3, [r7, #12]
 8020fa4:	3b05      	subs	r3, #5
 8020fa6:	687a      	ldr	r2, [r7, #4]
 8020fa8:	18d3      	adds	r3, r2, r3
 8020faa:	781a      	ldrb	r2, [r3, #0]
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	6838      	ldr	r0, [r7, #0]
 8020fb0:	18c3      	adds	r3, r0, r3
 8020fb2:	404a      	eors	r2, r1
 8020fb4:	b2d2      	uxtb	r2, r2
 8020fb6:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8020fb8:	68fb      	ldr	r3, [r7, #12]
 8020fba:	683a      	ldr	r2, [r7, #0]
 8020fbc:	18d3      	adds	r3, r2, r3
 8020fbe:	781a      	ldrb	r2, [r3, #0]
 8020fc0:	68fb      	ldr	r3, [r7, #12]
 8020fc2:	6839      	ldr	r1, [r7, #0]
 8020fc4:	18cb      	adds	r3, r1, r3
 8020fc6:	3a6f      	subs	r2, #111	; 0x6f
 8020fc8:	b2d2      	uxtb	r2, r2
 8020fca:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	3301      	adds	r3, #1
 8020fd0:	60fb      	str	r3, [r7, #12]
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	2b0f      	cmp	r3, #15
 8020fd6:	dc00      	bgt.n	8020fda <itsdk_secstore_generateMasterKey+0x128>
 8020fd8:	e779      	b.n	8020ece <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8020fda:	683b      	ldr	r3, [r7, #0]
 8020fdc:	2110      	movs	r1, #16
 8020fde:	0018      	movs	r0, r3
 8020fe0:	f000 fd96 	bl	8021b10 <itsdk_encrypt_cifferKey>
}
 8020fe4:	46c0      	nop			; (mov r8, r8)
 8020fe6:	46bd      	mov	sp, r7
 8020fe8:	b004      	add	sp, #16
 8020fea:	bd80      	pop	{r7, pc}

08020fec <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8020fec:	b590      	push	{r4, r7, lr}
 8020fee:	b08d      	sub	sp, #52	; 0x34
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	0002      	movs	r2, r0
 8020ff4:	6039      	str	r1, [r7, #0]
 8020ff6:	1dfb      	adds	r3, r7, #7
 8020ff8:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8020ffa:	2320      	movs	r3, #32
 8020ffc:	18fb      	adds	r3, r7, r3
 8020ffe:	0018      	movs	r0, r3
 8021000:	f7ff ff22 	bl	8020e48 <_itsdk_secstore_controlHeader>
 8021004:	1e03      	subs	r3, r0, #0
 8021006:	d001      	beq.n	802100c <itsdk_secstore_readBlock+0x20>
 8021008:	2302      	movs	r3, #2
 802100a:	e038      	b.n	802107e <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 802100c:	2300      	movs	r3, #0
 802100e:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8021010:	211b      	movs	r1, #27
 8021012:	187b      	adds	r3, r7, r1
 8021014:	2200      	movs	r2, #0
 8021016:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8021018:	1dfb      	adds	r3, r7, #7
 802101a:	781a      	ldrb	r2, [r3, #0]
 802101c:	1879      	adds	r1, r7, r1
 802101e:	231c      	movs	r3, #28
 8021020:	18fb      	adds	r3, r7, r3
 8021022:	0018      	movs	r0, r3
 8021024:	f7ff fe96 	bl	8020d54 <_itsdk_secstore_getOffset>
 8021028:	1e03      	subs	r3, r0, #0
 802102a:	d001      	beq.n	8021030 <itsdk_secstore_readBlock+0x44>
 802102c:	2301      	movs	r3, #1
 802102e:	e026      	b.n	802107e <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8021030:	2320      	movs	r3, #32
 8021032:	18fb      	adds	r3, r7, r3
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	021b      	lsls	r3, r3, #8
 8021038:	0c1b      	lsrs	r3, r3, #16
 802103a:	b29b      	uxth	r3, r3
 802103c:	001a      	movs	r2, r3
 802103e:	231b      	movs	r3, #27
 8021040:	18fb      	adds	r3, r7, r3
 8021042:	781b      	ldrb	r3, [r3, #0]
 8021044:	411a      	asrs	r2, r3
 8021046:	0013      	movs	r3, r2
 8021048:	2201      	movs	r2, #1
 802104a:	4013      	ands	r3, r2
 802104c:	d101      	bne.n	8021052 <itsdk_secstore_readBlock+0x66>
 802104e:	2303      	movs	r3, #3
 8021050:	e015      	b.n	802107e <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8021052:	69f9      	ldr	r1, [r7, #28]
 8021054:	683a      	ldr	r2, [r7, #0]
 8021056:	2310      	movs	r3, #16
 8021058:	2000      	movs	r0, #0
 802105a:	f004 fa0f 	bl	802547c <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 802105e:	2408      	movs	r4, #8
 8021060:	193a      	adds	r2, r7, r4
 8021062:	2320      	movs	r3, #32
 8021064:	18fb      	adds	r3, r7, r3
 8021066:	3304      	adds	r3, #4
 8021068:	0011      	movs	r1, r2
 802106a:	0018      	movs	r0, r3
 802106c:	f7ff ff21 	bl	8020eb2 <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8021070:	193b      	adds	r3, r7, r4
 8021072:	6839      	ldr	r1, [r7, #0]
 8021074:	6838      	ldr	r0, [r7, #0]
 8021076:	2210      	movs	r2, #16
 8021078:	f000 fd0a 	bl	8021a90 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 802107c:	2300      	movs	r3, #0
}
 802107e:	0018      	movs	r0, r3
 8021080:	46bd      	mov	sp, r7
 8021082:	b00d      	add	sp, #52	; 0x34
 8021084:	bd90      	pop	{r4, r7, pc}

08021086 <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8021086:	b5b0      	push	{r4, r5, r7, lr}
 8021088:	b08c      	sub	sp, #48	; 0x30
 802108a:	af00      	add	r7, sp, #0
 802108c:	0002      	movs	r2, r0
 802108e:	6039      	str	r1, [r7, #0]
 8021090:	1dfb      	adds	r3, r7, #7
 8021092:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8021094:	2320      	movs	r3, #32
 8021096:	18fb      	adds	r3, r7, r3
 8021098:	0018      	movs	r0, r3
 802109a:	f7ff fed5 	bl	8020e48 <_itsdk_secstore_controlHeader>
 802109e:	1e03      	subs	r3, r0, #0
 80210a0:	d001      	beq.n	80210a6 <itsdk_secstore_writeBlock+0x20>
 80210a2:	2302      	movs	r3, #2
 80210a4:	e061      	b.n	802116a <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 80210a6:	2300      	movs	r3, #0
 80210a8:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 80210aa:	211b      	movs	r1, #27
 80210ac:	187b      	adds	r3, r7, r1
 80210ae:	2200      	movs	r2, #0
 80210b0:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 80210b2:	1dfb      	adds	r3, r7, #7
 80210b4:	781a      	ldrb	r2, [r3, #0]
 80210b6:	1879      	adds	r1, r7, r1
 80210b8:	231c      	movs	r3, #28
 80210ba:	18fb      	adds	r3, r7, r3
 80210bc:	0018      	movs	r0, r3
 80210be:	f7ff fe49 	bl	8020d54 <_itsdk_secstore_getOffset>
 80210c2:	1e03      	subs	r3, r0, #0
 80210c4:	d001      	beq.n	80210ca <itsdk_secstore_writeBlock+0x44>
 80210c6:	2301      	movs	r3, #1
 80210c8:	e04f      	b.n	802116a <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 80210ca:	2408      	movs	r4, #8
 80210cc:	193a      	adds	r2, r7, r4
 80210ce:	2520      	movs	r5, #32
 80210d0:	197b      	adds	r3, r7, r5
 80210d2:	3304      	adds	r3, #4
 80210d4:	0011      	movs	r1, r2
 80210d6:	0018      	movs	r0, r3
 80210d8:	f7ff feeb 	bl	8020eb2 <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 80210dc:	193b      	adds	r3, r7, r4
 80210de:	6839      	ldr	r1, [r7, #0]
 80210e0:	6838      	ldr	r0, [r7, #0]
 80210e2:	2210      	movs	r2, #16
 80210e4:	f000 fc90 	bl	8021a08 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 80210e8:	69f9      	ldr	r1, [r7, #28]
 80210ea:	683a      	ldr	r2, [r7, #0]
 80210ec:	2310      	movs	r3, #16
 80210ee:	2000      	movs	r0, #0
 80210f0:	f004 f920 	bl	8025334 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 80210f4:	197b      	adds	r3, r7, r5
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	021b      	lsls	r3, r3, #8
 80210fa:	0c1b      	lsrs	r3, r3, #16
 80210fc:	b29b      	uxth	r3, r3
 80210fe:	001a      	movs	r2, r3
 8021100:	231b      	movs	r3, #27
 8021102:	18fb      	adds	r3, r7, r3
 8021104:	781b      	ldrb	r3, [r3, #0]
 8021106:	411a      	asrs	r2, r3
 8021108:	0013      	movs	r3, r2
 802110a:	2201      	movs	r2, #1
 802110c:	4013      	ands	r3, r2
 802110e:	d12b      	bne.n	8021168 <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8021110:	2520      	movs	r5, #32
 8021112:	197b      	adds	r3, r7, r5
 8021114:	681b      	ldr	r3, [r3, #0]
 8021116:	021b      	lsls	r3, r3, #8
 8021118:	0c1b      	lsrs	r3, r3, #16
 802111a:	b29b      	uxth	r3, r3
 802111c:	b21a      	sxth	r2, r3
 802111e:	231b      	movs	r3, #27
 8021120:	18fb      	adds	r3, r7, r3
 8021122:	781b      	ldrb	r3, [r3, #0]
 8021124:	0019      	movs	r1, r3
 8021126:	2301      	movs	r3, #1
 8021128:	408b      	lsls	r3, r1
 802112a:	b21b      	sxth	r3, r3
 802112c:	4313      	orrs	r3, r2
 802112e:	b21b      	sxth	r3, r3
 8021130:	b29a      	uxth	r2, r3
 8021132:	197b      	adds	r3, r7, r5
 8021134:	3301      	adds	r3, #1
 8021136:	21ff      	movs	r1, #255	; 0xff
 8021138:	4011      	ands	r1, r2
 802113a:	000c      	movs	r4, r1
 802113c:	7819      	ldrb	r1, [r3, #0]
 802113e:	2000      	movs	r0, #0
 8021140:	4001      	ands	r1, r0
 8021142:	1c08      	adds	r0, r1, #0
 8021144:	1c21      	adds	r1, r4, #0
 8021146:	4301      	orrs	r1, r0
 8021148:	7019      	strb	r1, [r3, #0]
 802114a:	0a12      	lsrs	r2, r2, #8
 802114c:	b290      	uxth	r0, r2
 802114e:	785a      	ldrb	r2, [r3, #1]
 8021150:	2100      	movs	r1, #0
 8021152:	400a      	ands	r2, r1
 8021154:	1c11      	adds	r1, r2, #0
 8021156:	1c02      	adds	r2, r0, #0
 8021158:	430a      	orrs	r2, r1
 802115a:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 802115c:	197a      	adds	r2, r7, r5
 802115e:	2310      	movs	r3, #16
 8021160:	2100      	movs	r1, #0
 8021162:	2000      	movs	r0, #0
 8021164:	f004 f8e6 	bl	8025334 <_eeprom_write>
	}

	return SS_SUCCESS;
 8021168:	2300      	movs	r3, #0
}
 802116a:	0018      	movs	r0, r3
 802116c:	46bd      	mov	sp, r7
 802116e:	b00c      	add	sp, #48	; 0x30
 8021170:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021174 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 8021174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021176:	b08d      	sub	sp, #52	; 0x34
 8021178:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 802117a:	2020      	movs	r0, #32
 802117c:	0004      	movs	r4, r0
 802117e:	183b      	adds	r3, r7, r0
 8021180:	781a      	ldrb	r2, [r3, #0]
 8021182:	210f      	movs	r1, #15
 8021184:	438a      	bics	r2, r1
 8021186:	1c11      	adds	r1, r2, #0
 8021188:	220c      	movs	r2, #12
 802118a:	430a      	orrs	r2, r1
 802118c:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 802118e:	251f      	movs	r5, #31
 8021190:	197b      	adds	r3, r7, r5
 8021192:	0018      	movs	r0, r3
 8021194:	f7ff fe3e 	bl	8020e14 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 8021198:	197b      	adds	r3, r7, r5
 802119a:	781b      	ldrb	r3, [r3, #0]
 802119c:	1c1a      	adds	r2, r3, #0
 802119e:	230f      	movs	r3, #15
 80211a0:	4013      	ands	r3, r2
 80211a2:	b2da      	uxtb	r2, r3
 80211a4:	193b      	adds	r3, r7, r4
 80211a6:	0110      	lsls	r0, r2, #4
 80211a8:	781a      	ldrb	r2, [r3, #0]
 80211aa:	210f      	movs	r1, #15
 80211ac:	400a      	ands	r2, r1
 80211ae:	1c11      	adds	r1, r2, #0
 80211b0:	1c02      	adds	r2, r0, #0
 80211b2:	430a      	orrs	r2, r1
 80211b4:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 80211b6:	0020      	movs	r0, r4
 80211b8:	193b      	adds	r3, r7, r4
 80211ba:	3301      	adds	r3, #1
 80211bc:	781a      	ldrb	r2, [r3, #0]
 80211be:	2100      	movs	r1, #0
 80211c0:	400a      	ands	r2, r1
 80211c2:	1c11      	adds	r1, r2, #0
 80211c4:	2201      	movs	r2, #1
 80211c6:	430a      	orrs	r2, r1
 80211c8:	701a      	strb	r2, [r3, #0]
 80211ca:	785a      	ldrb	r2, [r3, #1]
 80211cc:	2100      	movs	r1, #0
 80211ce:	400a      	ands	r2, r1
 80211d0:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 80211d2:	2110      	movs	r1, #16
 80211d4:	187b      	adds	r3, r7, r1
 80211d6:	4a15      	ldr	r2, [pc, #84]	; (802122c <itsdk_secstore_init+0xb8>)
 80211d8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80211da:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 80211dc:	183b      	adds	r3, r7, r0
 80211de:	187a      	adds	r2, r7, r1
 80211e0:	3304      	adds	r3, #4
 80211e2:	ca32      	ldmia	r2!, {r1, r4, r5}
 80211e4:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 80211e6:	183a      	adds	r2, r7, r0
 80211e8:	2310      	movs	r3, #16
 80211ea:	2100      	movs	r1, #0
 80211ec:	2000      	movs	r0, #0
 80211ee:	f004 f8a1 	bl	8025334 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 80211f2:	0039      	movs	r1, r7
 80211f4:	4a0e      	ldr	r2, [pc, #56]	; (8021230 <itsdk_secstore_init+0xbc>)
 80211f6:	000b      	movs	r3, r1
 80211f8:	ca11      	ldmia	r2!, {r0, r4}
 80211fa:	c311      	stmia	r3!, {r0, r4}
 80211fc:	7812      	ldrb	r2, [r2, #0]
 80211fe:	701a      	strb	r2, [r3, #0]
 8021200:	2309      	movs	r3, #9
 8021202:	18cb      	adds	r3, r1, r3
 8021204:	2207      	movs	r2, #7
 8021206:	2100      	movs	r1, #0
 8021208:	0018      	movs	r0, r3
 802120a:	f004 fe7d 	bl	8025f08 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 802120e:	003b      	movs	r3, r7
 8021210:	0019      	movs	r1, r3
 8021212:	2000      	movs	r0, #0
 8021214:	f7ff ff37 	bl	8021086 <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8021218:	003b      	movs	r3, r7
 802121a:	2110      	movs	r1, #16
 802121c:	0018      	movs	r0, r3
 802121e:	f004 fe26 	bl	8025e6e <bzero>

	return SS_SUCCESS;
 8021222:	2300      	movs	r3, #0
}
 8021224:	0018      	movs	r0, r3
 8021226:	46bd      	mov	sp, r7
 8021228:	b00d      	add	sp, #52	; 0x34
 802122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802122c:	08027dd0 	.word	0x08027dd0
 8021230:	08027ddc 	.word	0x08027ddc

08021234 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8021234:	b580      	push	{r7, lr}
 8021236:	b084      	sub	sp, #16
 8021238:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 802123a:	003b      	movs	r3, r7
 802123c:	0018      	movs	r0, r3
 802123e:	f7ff fe03 	bl	8020e48 <_itsdk_secstore_controlHeader>
 8021242:	0003      	movs	r3, r0
}
 8021244:	0018      	movs	r0, r3
 8021246:	46bd      	mov	sp, r7
 8021248:	b004      	add	sp, #16
 802124a:	bd80      	pop	{r7, pc}

0802124c <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 802124c:	b580      	push	{r7, lr}
 802124e:	b086      	sub	sp, #24
 8021250:	af00      	add	r7, sp, #0
 8021252:	60b9      	str	r1, [r7, #8]
 8021254:	607a      	str	r2, [r7, #4]
 8021256:	210f      	movs	r1, #15
 8021258:	187b      	adds	r3, r7, r1
 802125a:	1c02      	adds	r2, r0, #0
 802125c:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 802125e:	2300      	movs	r3, #0
 8021260:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 8021262:	2013      	movs	r0, #19
 8021264:	183b      	adds	r3, r7, r0
 8021266:	2200      	movs	r2, #0
 8021268:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 802126a:	187b      	adds	r3, r7, r1
 802126c:	781a      	ldrb	r2, [r3, #0]
 802126e:	1839      	adds	r1, r7, r0
 8021270:	2314      	movs	r3, #20
 8021272:	18fb      	adds	r3, r7, r3
 8021274:	0018      	movs	r0, r3
 8021276:	f7ff fd6d 	bl	8020d54 <_itsdk_secstore_getOffset>
 802127a:	1e03      	subs	r3, r0, #0
 802127c:	d001      	beq.n	8021282 <_itsdk_secstore_writeBlockKey+0x36>
 802127e:	2301      	movs	r3, #1
 8021280:	e00c      	b.n	802129c <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	68b9      	ldr	r1, [r7, #8]
 8021286:	68b8      	ldr	r0, [r7, #8]
 8021288:	2210      	movs	r2, #16
 802128a:	f000 fbbd 	bl	8021a08 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 802128e:	6979      	ldr	r1, [r7, #20]
 8021290:	68ba      	ldr	r2, [r7, #8]
 8021292:	2310      	movs	r3, #16
 8021294:	2000      	movs	r0, #0
 8021296:	f004 f84d 	bl	8025334 <_eeprom_write>

	return SS_SUCCESS;
 802129a:	2300      	movs	r3, #0
}
 802129c:	0018      	movs	r0, r3
 802129e:	46bd      	mov	sp, r7
 80212a0:	b006      	add	sp, #24
 80212a2:	bd80      	pop	{r7, pc}

080212a4 <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 80212a4:	b580      	push	{r7, lr}
 80212a6:	b090      	sub	sp, #64	; 0x40
 80212a8:	af00      	add	r7, sp, #0
 80212aa:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 80212ac:	232c      	movs	r3, #44	; 0x2c
 80212ae:	18fb      	adds	r3, r7, r3
 80212b0:	0018      	movs	r0, r3
 80212b2:	f7ff fdc9 	bl	8020e48 <_itsdk_secstore_controlHeader>
 80212b6:	1e03      	subs	r3, r0, #0
 80212b8:	d005      	beq.n	80212c6 <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 80212ba:	4b4b      	ldr	r3, [pc, #300]	; (80213e8 <_itsk_secstore_rekey+0x144>)
 80212bc:	0018      	movs	r0, r3
 80212be:	f7fe fd4d 	bl	801fd5c <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 80212c2:	2302      	movs	r3, #2
 80212c4:	e08c      	b.n	80213e0 <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 80212c6:	230c      	movs	r3, #12
 80212c8:	18fa      	adds	r2, r7, r3
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	0011      	movs	r1, r2
 80212ce:	0018      	movs	r0, r3
 80212d0:	f7ff fdef 	bl	8020eb2 <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 80212d4:	231c      	movs	r3, #28
 80212d6:	18fb      	adds	r3, r7, r3
 80212d8:	0019      	movs	r1, r3
 80212da:	2000      	movs	r0, #0
 80212dc:	f7ff fe86 	bl	8020fec <itsdk_secstore_readBlock>
 80212e0:	0003      	movs	r3, r0
 80212e2:	2b03      	cmp	r3, #3
 80212e4:	d007      	beq.n	80212f6 <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 80212e6:	230c      	movs	r3, #12
 80212e8:	18fa      	adds	r2, r7, r3
 80212ea:	231c      	movs	r3, #28
 80212ec:	18fb      	adds	r3, r7, r3
 80212ee:	0019      	movs	r1, r3
 80212f0:	2000      	movs	r0, #0
 80212f2:	f7ff ffab 	bl	802124c <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 80212f6:	231c      	movs	r3, #28
 80212f8:	18fb      	adds	r3, r7, r3
 80212fa:	0019      	movs	r1, r3
 80212fc:	2002      	movs	r0, #2
 80212fe:	f7ff fe75 	bl	8020fec <itsdk_secstore_readBlock>
 8021302:	0003      	movs	r3, r0
 8021304:	2b03      	cmp	r3, #3
 8021306:	d007      	beq.n	8021318 <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 8021308:	230c      	movs	r3, #12
 802130a:	18fa      	adds	r2, r7, r3
 802130c:	231c      	movs	r3, #28
 802130e:	18fb      	adds	r3, r7, r3
 8021310:	0019      	movs	r1, r3
 8021312:	2002      	movs	r0, #2
 8021314:	f7ff ff9a 	bl	802124c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 8021318:	231c      	movs	r3, #28
 802131a:	18fb      	adds	r3, r7, r3
 802131c:	0019      	movs	r1, r3
 802131e:	2003      	movs	r0, #3
 8021320:	f7ff fe64 	bl	8020fec <itsdk_secstore_readBlock>
 8021324:	0003      	movs	r3, r0
 8021326:	2b03      	cmp	r3, #3
 8021328:	d007      	beq.n	802133a <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 802132a:	230c      	movs	r3, #12
 802132c:	18fa      	adds	r2, r7, r3
 802132e:	231c      	movs	r3, #28
 8021330:	18fb      	adds	r3, r7, r3
 8021332:	0019      	movs	r1, r3
 8021334:	2003      	movs	r0, #3
 8021336:	f7ff ff89 	bl	802124c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 802133a:	231c      	movs	r3, #28
 802133c:	18fb      	adds	r3, r7, r3
 802133e:	0019      	movs	r1, r3
 8021340:	2004      	movs	r0, #4
 8021342:	f7ff fe53 	bl	8020fec <itsdk_secstore_readBlock>
 8021346:	0003      	movs	r3, r0
 8021348:	2b03      	cmp	r3, #3
 802134a:	d007      	beq.n	802135c <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 802134c:	230c      	movs	r3, #12
 802134e:	18fa      	adds	r2, r7, r3
 8021350:	231c      	movs	r3, #28
 8021352:	18fb      	adds	r3, r7, r3
 8021354:	0019      	movs	r1, r3
 8021356:	2004      	movs	r0, #4
 8021358:	f7ff ff78 	bl	802124c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 802135c:	231c      	movs	r3, #28
 802135e:	18fb      	adds	r3, r7, r3
 8021360:	0019      	movs	r1, r3
 8021362:	2005      	movs	r0, #5
 8021364:	f7ff fe42 	bl	8020fec <itsdk_secstore_readBlock>
 8021368:	0003      	movs	r3, r0
 802136a:	2b03      	cmp	r3, #3
 802136c:	d007      	beq.n	802137e <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 802136e:	230c      	movs	r3, #12
 8021370:	18fa      	adds	r2, r7, r3
 8021372:	231c      	movs	r3, #28
 8021374:	18fb      	adds	r3, r7, r3
 8021376:	0019      	movs	r1, r3
 8021378:	2005      	movs	r0, #5
 802137a:	f7ff ff67 	bl	802124c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 802137e:	231c      	movs	r3, #28
 8021380:	18fb      	adds	r3, r7, r3
 8021382:	0019      	movs	r1, r3
 8021384:	2006      	movs	r0, #6
 8021386:	f7ff fe31 	bl	8020fec <itsdk_secstore_readBlock>
 802138a:	0003      	movs	r3, r0
 802138c:	2b03      	cmp	r3, #3
 802138e:	d007      	beq.n	80213a0 <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 8021390:	230c      	movs	r3, #12
 8021392:	18fa      	adds	r2, r7, r3
 8021394:	231c      	movs	r3, #28
 8021396:	18fb      	adds	r3, r7, r3
 8021398:	0019      	movs	r1, r3
 802139a:	2006      	movs	r0, #6
 802139c:	f7ff ff56 	bl	802124c <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 80213a0:	2300      	movs	r3, #0
 80213a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213a4:	e00d      	b.n	80213c2 <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 80213a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213a8:	687a      	ldr	r2, [r7, #4]
 80213aa:	18d3      	adds	r3, r2, r3
 80213ac:	7819      	ldrb	r1, [r3, #0]
 80213ae:	232c      	movs	r3, #44	; 0x2c
 80213b0:	18fa      	adds	r2, r7, r3
 80213b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213b4:	18d3      	adds	r3, r2, r3
 80213b6:	3304      	adds	r3, #4
 80213b8:	1c0a      	adds	r2, r1, #0
 80213ba:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 80213bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213be:	3301      	adds	r3, #1
 80213c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213c4:	2b0b      	cmp	r3, #11
 80213c6:	ddee      	ble.n	80213a6 <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 80213c8:	232c      	movs	r3, #44	; 0x2c
 80213ca:	18fa      	adds	r2, r7, r3
 80213cc:	2310      	movs	r3, #16
 80213ce:	2100      	movs	r1, #0
 80213d0:	2000      	movs	r0, #0
 80213d2:	f003 ffaf 	bl	8025334 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 80213d6:	4b05      	ldr	r3, [pc, #20]	; (80213ec <_itsk_secstore_rekey+0x148>)
 80213d8:	0018      	movs	r0, r3
 80213da:	f7fe fcbf 	bl	801fd5c <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 80213de:	2300      	movs	r3, #0
}
 80213e0:	0018      	movs	r0, r3
 80213e2:	46bd      	mov	sp, r7
 80213e4:	b010      	add	sp, #64	; 0x40
 80213e6:	bd80      	pop	{r7, pc}
 80213e8:	08027dec 	.word	0x08027dec
 80213ec:	08027df4 	.word	0x08027df4

080213f0 <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 80213f0:	b590      	push	{r4, r7, lr}
 80213f2:	b085      	sub	sp, #20
 80213f4:	af00      	add	r7, sp, #0
 80213f6:	6078      	str	r0, [r7, #4]
 80213f8:	000c      	movs	r4, r1
 80213fa:	0010      	movs	r0, r2
 80213fc:	0019      	movs	r1, r3
 80213fe:	1cfb      	adds	r3, r7, #3
 8021400:	1c22      	adds	r2, r4, #0
 8021402:	701a      	strb	r2, [r3, #0]
 8021404:	1cbb      	adds	r3, r7, #2
 8021406:	1c02      	adds	r2, r0, #0
 8021408:	701a      	strb	r2, [r3, #0]
 802140a:	1c7b      	adds	r3, r7, #1
 802140c:	1c0a      	adds	r2, r1, #0
 802140e:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 8021410:	1cbb      	adds	r3, r7, #2
 8021412:	781a      	ldrb	r2, [r3, #0]
 8021414:	1cfb      	adds	r3, r7, #3
 8021416:	781b      	ldrb	r3, [r3, #0]
 8021418:	1ad2      	subs	r2, r2, r3
 802141a:	1c7b      	adds	r3, r7, #1
 802141c:	781b      	ldrb	r3, [r3, #0]
 802141e:	005b      	lsls	r3, r3, #1
 8021420:	429a      	cmp	r2, r3
 8021422:	da01      	bge.n	8021428 <__checkAndConvert+0x38>
 8021424:	2300      	movs	r3, #0
 8021426:	e034      	b.n	8021492 <__checkAndConvert+0xa2>
	int k = 0;
 8021428:	2300      	movs	r3, #0
 802142a:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 802142c:	1cfb      	adds	r3, r7, #3
 802142e:	781b      	ldrb	r3, [r3, #0]
 8021430:	60bb      	str	r3, [r7, #8]
 8021432:	e028      	b.n	8021486 <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 8021434:	68bb      	ldr	r3, [r7, #8]
 8021436:	687a      	ldr	r2, [r7, #4]
 8021438:	18d3      	adds	r3, r2, r3
 802143a:	781b      	ldrb	r3, [r3, #0]
 802143c:	2100      	movs	r1, #0
 802143e:	0018      	movs	r0, r3
 8021440:	f002 fa80 	bl	8023944 <itdt_isHexChar>
 8021444:	1e03      	subs	r3, r0, #0
 8021446:	d01c      	beq.n	8021482 <__checkAndConvert+0x92>
 8021448:	68bb      	ldr	r3, [r7, #8]
 802144a:	3301      	adds	r3, #1
 802144c:	687a      	ldr	r2, [r7, #4]
 802144e:	18d3      	adds	r3, r2, r3
 8021450:	781b      	ldrb	r3, [r3, #0]
 8021452:	2100      	movs	r1, #0
 8021454:	0018      	movs	r0, r3
 8021456:	f002 fa75 	bl	8023944 <itdt_isHexChar>
 802145a:	1e03      	subs	r3, r0, #0
 802145c:	d011      	beq.n	8021482 <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 802145e:	68bb      	ldr	r3, [r7, #8]
 8021460:	687a      	ldr	r2, [r7, #4]
 8021462:	18d1      	adds	r1, r2, r3
 8021464:	68fb      	ldr	r3, [r7, #12]
 8021466:	6a3a      	ldr	r2, [r7, #32]
 8021468:	18d4      	adds	r4, r2, r3
 802146a:	0008      	movs	r0, r1
 802146c:	f002 f9ca 	bl	8023804 <itdt_convertHexChar2Int>
 8021470:	0003      	movs	r3, r0
 8021472:	7023      	strb	r3, [r4, #0]
			k++;
 8021474:	68fb      	ldr	r3, [r7, #12]
 8021476:	3301      	adds	r3, #1
 8021478:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 802147a:	68bb      	ldr	r3, [r7, #8]
 802147c:	3302      	adds	r3, #2
 802147e:	60bb      	str	r3, [r7, #8]
 8021480:	e001      	b.n	8021486 <__checkAndConvert+0x96>
		} else return false;
 8021482:	2300      	movs	r3, #0
 8021484:	e005      	b.n	8021492 <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 8021486:	1cbb      	adds	r3, r7, #2
 8021488:	781b      	ldrb	r3, [r3, #0]
 802148a:	68ba      	ldr	r2, [r7, #8]
 802148c:	429a      	cmp	r2, r3
 802148e:	dbd1      	blt.n	8021434 <__checkAndConvert+0x44>
	}
	return true;
 8021490:	2301      	movs	r3, #1
}
 8021492:	0018      	movs	r0, r3
 8021494:	46bd      	mov	sp, r7
 8021496:	b005      	add	sp, #20
 8021498:	bd90      	pop	{r4, r7, pc}
	...

0802149c <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 802149c:	b590      	push	{r4, r7, lr}
 802149e:	b087      	sub	sp, #28
 80214a0:	af02      	add	r7, sp, #8
 80214a2:	60f8      	str	r0, [r7, #12]
 80214a4:	0008      	movs	r0, r1
 80214a6:	607a      	str	r2, [r7, #4]
 80214a8:	0019      	movs	r1, r3
 80214aa:	240b      	movs	r4, #11
 80214ac:	193b      	adds	r3, r7, r4
 80214ae:	1c02      	adds	r2, r0, #0
 80214b0:	701a      	strb	r2, [r3, #0]
 80214b2:	230a      	movs	r3, #10
 80214b4:	18fb      	adds	r3, r7, r3
 80214b6:	1c0a      	adds	r2, r1, #0
 80214b8:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 80214ba:	193b      	adds	r3, r7, r4
 80214bc:	781a      	ldrb	r2, [r3, #0]
 80214be:	68f8      	ldr	r0, [r7, #12]
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	9300      	str	r3, [sp, #0]
 80214c4:	2310      	movs	r3, #16
 80214c6:	2105      	movs	r1, #5
 80214c8:	f7ff ff92 	bl	80213f0 <__checkAndConvert>
 80214cc:	1e03      	subs	r3, r0, #0
 80214ce:	d01f      	beq.n	8021510 <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 80214d0:	230a      	movs	r3, #10
 80214d2:	18fb      	adds	r3, r7, r3
 80214d4:	781b      	ldrb	r3, [r3, #0]
 80214d6:	2b01      	cmp	r3, #1
 80214d8:	d104      	bne.n	80214e4 <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	2110      	movs	r1, #16
 80214de:	0018      	movs	r0, r3
 80214e0:	f000 fb16 	bl	8021b10 <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 80214e4:	687a      	ldr	r2, [r7, #4]
 80214e6:	230a      	movs	r3, #10
 80214e8:	18fb      	adds	r3, r7, r3
 80214ea:	781b      	ldrb	r3, [r3, #0]
 80214ec:	0011      	movs	r1, r2
 80214ee:	0018      	movs	r0, r3
 80214f0:	f7ff fdc9 	bl	8021086 <itsdk_secstore_writeBlock>
 80214f4:	1e03      	subs	r3, r0, #0
 80214f6:	d105      	bne.n	8021504 <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 80214f8:	4b0a      	ldr	r3, [pc, #40]	; (8021524 <__updateField+0x88>)
 80214fa:	0018      	movs	r0, r3
 80214fc:	f7fe fc2e 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8021500:	2300      	movs	r3, #0
 8021502:	e00a      	b.n	802151a <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 8021504:	4b08      	ldr	r3, [pc, #32]	; (8021528 <__updateField+0x8c>)
 8021506:	0018      	movs	r0, r3
 8021508:	f7fe fc28 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 802150c:	2302      	movs	r3, #2
 802150e:	e004      	b.n	802151a <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8021510:	4b05      	ldr	r3, [pc, #20]	; (8021528 <__updateField+0x8c>)
 8021512:	0018      	movs	r0, r3
 8021514:	f7fe fc22 	bl	801fd5c <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8021518:	2302      	movs	r3, #2
	}
}
 802151a:	0018      	movs	r0, r3
 802151c:	46bd      	mov	sp, r7
 802151e:	b005      	add	sp, #20
 8021520:	bd90      	pop	{r4, r7, pc}
 8021522:	46c0      	nop			; (mov r8, r8)
 8021524:	08027df4 	.word	0x08027df4
 8021528:	08027dec 	.word	0x08027dec

0802152c <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 802152c:	b590      	push	{r4, r7, lr}
 802152e:	b08d      	sub	sp, #52	; 0x34
 8021530:	af02      	add	r7, sp, #8
 8021532:	60f8      	str	r0, [r7, #12]
 8021534:	0008      	movs	r0, r1
 8021536:	607a      	str	r2, [r7, #4]
 8021538:	0019      	movs	r1, r3
 802153a:	240b      	movs	r4, #11
 802153c:	193b      	adds	r3, r7, r4
 802153e:	1c02      	adds	r2, r0, #0
 8021540:	701a      	strb	r2, [r3, #0]
 8021542:	230a      	movs	r3, #10
 8021544:	18fb      	adds	r3, r7, r3
 8021546:	1c0a      	adds	r2, r1, #0
 8021548:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 802154a:	2334      	movs	r3, #52	; 0x34
 802154c:	2208      	movs	r2, #8
 802154e:	4694      	mov	ip, r2
 8021550:	44bc      	add	ip, r7
 8021552:	4463      	add	r3, ip
 8021554:	7819      	ldrb	r1, [r3, #0]
 8021556:	193b      	adds	r3, r7, r4
 8021558:	781a      	ldrb	r2, [r3, #0]
 802155a:	68f8      	ldr	r0, [r7, #12]
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	9300      	str	r3, [sp, #0]
 8021560:	000b      	movs	r3, r1
 8021562:	2105      	movs	r1, #5
 8021564:	f7ff ff44 	bl	80213f0 <__checkAndConvert>
 8021568:	1e03      	subs	r3, r0, #0
 802156a:	d045      	beq.n	80215f8 <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 802156c:	2314      	movs	r3, #20
 802156e:	18fa      	adds	r2, r7, r3
 8021570:	230a      	movs	r3, #10
 8021572:	18fb      	adds	r3, r7, r3
 8021574:	781b      	ldrb	r3, [r3, #0]
 8021576:	0011      	movs	r1, r2
 8021578:	0018      	movs	r0, r3
 802157a:	f7ff fd37 	bl	8020fec <itsdk_secstore_readBlock>
 802157e:	1e03      	subs	r3, r0, #0
 8021580:	d005      	beq.n	802158e <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 8021582:	4b22      	ldr	r3, [pc, #136]	; (802160c <__updateField2+0xe0>)
 8021584:	0018      	movs	r0, r3
 8021586:	f7fe fbe9 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 802158a:	2302      	movs	r3, #2
 802158c:	e039      	b.n	8021602 <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 802158e:	2300      	movs	r3, #0
 8021590:	627b      	str	r3, [r7, #36]	; 0x24
 8021592:	e011      	b.n	80215b8 <__updateField2+0x8c>
			_b[i+offset] = b[i];
 8021594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021596:	687a      	ldr	r2, [r7, #4]
 8021598:	18d2      	adds	r2, r2, r3
 802159a:	2330      	movs	r3, #48	; 0x30
 802159c:	2108      	movs	r1, #8
 802159e:	468c      	mov	ip, r1
 80215a0:	44bc      	add	ip, r7
 80215a2:	4463      	add	r3, ip
 80215a4:	7819      	ldrb	r1, [r3, #0]
 80215a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215a8:	18cb      	adds	r3, r1, r3
 80215aa:	7811      	ldrb	r1, [r2, #0]
 80215ac:	2214      	movs	r2, #20
 80215ae:	18ba      	adds	r2, r7, r2
 80215b0:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 80215b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215b4:	3301      	adds	r3, #1
 80215b6:	627b      	str	r3, [r7, #36]	; 0x24
 80215b8:	2334      	movs	r3, #52	; 0x34
 80215ba:	2208      	movs	r2, #8
 80215bc:	4694      	mov	ip, r2
 80215be:	44bc      	add	ip, r7
 80215c0:	4463      	add	r3, ip
 80215c2:	781b      	ldrb	r3, [r3, #0]
 80215c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215c6:	429a      	cmp	r2, r3
 80215c8:	dbe4      	blt.n	8021594 <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 80215ca:	2314      	movs	r3, #20
 80215cc:	18fa      	adds	r2, r7, r3
 80215ce:	230a      	movs	r3, #10
 80215d0:	18fb      	adds	r3, r7, r3
 80215d2:	781b      	ldrb	r3, [r3, #0]
 80215d4:	0011      	movs	r1, r2
 80215d6:	0018      	movs	r0, r3
 80215d8:	f7ff fd55 	bl	8021086 <itsdk_secstore_writeBlock>
 80215dc:	1e03      	subs	r3, r0, #0
 80215de:	d105      	bne.n	80215ec <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 80215e0:	4b0b      	ldr	r3, [pc, #44]	; (8021610 <__updateField2+0xe4>)
 80215e2:	0018      	movs	r0, r3
 80215e4:	f7fe fbba 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80215e8:	2300      	movs	r3, #0
 80215ea:	e00a      	b.n	8021602 <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 80215ec:	4b07      	ldr	r3, [pc, #28]	; (802160c <__updateField2+0xe0>)
 80215ee:	0018      	movs	r0, r3
 80215f0:	f7fe fbb4 	bl	801fd5c <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80215f4:	2302      	movs	r3, #2
 80215f6:	e004      	b.n	8021602 <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 80215f8:	4b04      	ldr	r3, [pc, #16]	; (802160c <__updateField2+0xe0>)
 80215fa:	0018      	movs	r0, r3
 80215fc:	f7fe fbae 	bl	801fd5c <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8021600:	2302      	movs	r3, #2
	}
}
 8021602:	0018      	movs	r0, r3
 8021604:	46bd      	mov	sp, r7
 8021606:	b00b      	add	sp, #44	; 0x2c
 8021608:	bd90      	pop	{r4, r7, pc}
 802160a:	46c0      	nop			; (mov r8, r8)
 802160c:	08027dec 	.word	0x08027dec
 8021610:	08027df4 	.word	0x08027df4

08021614 <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 8021614:	b5b0      	push	{r4, r5, r7, lr}
 8021616:	b090      	sub	sp, #64	; 0x40
 8021618:	af02      	add	r7, sp, #8
 802161a:	6078      	str	r0, [r7, #4]
 802161c:	000a      	movs	r2, r1
 802161e:	1cfb      	adds	r3, r7, #3
 8021620:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 8021622:	1cfb      	adds	r3, r7, #3
 8021624:	781b      	ldrb	r3, [r3, #0]
 8021626:	2b01      	cmp	r3, #1
 8021628:	d136      	bne.n	8021698 <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 802162a:	687b      	ldr	r3, [r7, #4]
 802162c:	781b      	ldrb	r3, [r3, #0]
 802162e:	2b3f      	cmp	r3, #63	; 0x3f
 8021630:	d000      	beq.n	8021634 <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 8021632:	e1cb      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 8021634:	4bd3      	ldr	r3, [pc, #844]	; (8021984 <_itsdk_secStore_consolePriv+0x370>)
 8021636:	0018      	movs	r0, r3
 8021638:	f7fe fb90 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 802163c:	4bd2      	ldr	r3, [pc, #840]	; (8021988 <_itsdk_secStore_consolePriv+0x374>)
 802163e:	0018      	movs	r0, r3
 8021640:	f7fe fb8c 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 8021644:	4bd1      	ldr	r3, [pc, #836]	; (802198c <_itsdk_secStore_consolePriv+0x378>)
 8021646:	0018      	movs	r0, r3
 8021648:	f7fe fb88 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 802164c:	4bd0      	ldr	r3, [pc, #832]	; (8021990 <_itsdk_secStore_consolePriv+0x37c>)
 802164e:	0018      	movs	r0, r3
 8021650:	f7fe fb84 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 8021654:	4bcf      	ldr	r3, [pc, #828]	; (8021994 <_itsdk_secStore_consolePriv+0x380>)
 8021656:	0018      	movs	r0, r3
 8021658:	f7fe fb80 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 802165c:	4bce      	ldr	r3, [pc, #824]	; (8021998 <_itsdk_secStore_consolePriv+0x384>)
 802165e:	0018      	movs	r0, r3
 8021660:	f7fe fb7c 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 8021664:	4bcd      	ldr	r3, [pc, #820]	; (802199c <_itsdk_secStore_consolePriv+0x388>)
 8021666:	0018      	movs	r0, r3
 8021668:	f7fe fb78 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 802166c:	4bcc      	ldr	r3, [pc, #816]	; (80219a0 <_itsdk_secStore_consolePriv+0x38c>)
 802166e:	0018      	movs	r0, r3
 8021670:	f7fe fb74 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 8021674:	4bcb      	ldr	r3, [pc, #812]	; (80219a4 <_itsdk_secStore_consolePriv+0x390>)
 8021676:	0018      	movs	r0, r3
 8021678:	f7fe fb70 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 802167c:	4bca      	ldr	r3, [pc, #808]	; (80219a8 <_itsdk_secStore_consolePriv+0x394>)
 802167e:	0018      	movs	r0, r3
 8021680:	f7fe fb6c 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 8021684:	4bc9      	ldr	r3, [pc, #804]	; (80219ac <_itsdk_secStore_consolePriv+0x398>)
 8021686:	0018      	movs	r0, r3
 8021688:	f7fe fb68 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 802168c:	4bc8      	ldr	r3, [pc, #800]	; (80219b0 <_itsdk_secStore_consolePriv+0x39c>)
 802168e:	0018      	movs	r0, r3
 8021690:	f7fe fb64 	bl	801fd5c <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8021694:	2300      	movs	r3, #0
 8021696:	e19a      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 8021698:	1cfb      	adds	r3, r7, #3
 802169a:	781b      	ldrb	r3, [r3, #0]
 802169c:	2b03      	cmp	r3, #3
 802169e:	d800      	bhi.n	80216a2 <_itsdk_secStore_consolePriv+0x8e>
 80216a0:	e194      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	781b      	ldrb	r3, [r3, #0]
 80216a6:	2b73      	cmp	r3, #115	; 0x73
 80216a8:	d000      	beq.n	80216ac <_itsdk_secStore_consolePriv+0x98>
 80216aa:	e096      	b.n	80217da <_itsdk_secStore_consolePriv+0x1c6>
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	3301      	adds	r3, #1
 80216b0:	781b      	ldrb	r3, [r3, #0]
 80216b2:	2b73      	cmp	r3, #115	; 0x73
 80216b4:	d000      	beq.n	80216b8 <_itsdk_secStore_consolePriv+0xa4>
 80216b6:	e090      	b.n	80217da <_itsdk_secStore_consolePriv+0x1c6>
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	3302      	adds	r3, #2
 80216bc:	781b      	ldrb	r3, [r3, #0]
 80216be:	2b3a      	cmp	r3, #58	; 0x3a
 80216c0:	d000      	beq.n	80216c4 <_itsdk_secStore_consolePriv+0xb0>
 80216c2:	e08a      	b.n	80217da <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	3303      	adds	r3, #3
 80216c8:	781b      	ldrb	r3, [r3, #0]
 80216ca:	3b39      	subs	r3, #57	; 0x39
 80216cc:	2b28      	cmp	r3, #40	; 0x28
 80216ce:	d900      	bls.n	80216d2 <_itsdk_secStore_consolePriv+0xbe>
 80216d0:	e085      	b.n	80217de <_itsdk_secStore_consolePriv+0x1ca>
 80216d2:	009a      	lsls	r2, r3, #2
 80216d4:	4bb7      	ldr	r3, [pc, #732]	; (80219b4 <_itsdk_secStore_consolePriv+0x3a0>)
 80216d6:	18d3      	adds	r3, r2, r3
 80216d8:	681b      	ldr	r3, [r3, #0]
 80216da:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 80216dc:	2337      	movs	r3, #55	; 0x37
 80216de:	18fb      	adds	r3, r7, r3
 80216e0:	2200      	movs	r2, #0
 80216e2:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 80216e4:	2001      	movs	r0, #1
 80216e6:	f001 ff05 	bl	80234f4 <itsdk_lorawan_resetFactoryDefaults>
 80216ea:	1e03      	subs	r3, r0, #0
 80216ec:	d003      	beq.n	80216f6 <_itsdk_secStore_consolePriv+0xe2>
 80216ee:	2337      	movs	r3, #55	; 0x37
 80216f0:	18fb      	adds	r3, r7, r3
 80216f2:	2201      	movs	r2, #1
 80216f4:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 80216f6:	2337      	movs	r3, #55	; 0x37
 80216f8:	18fb      	adds	r3, r7, r3
 80216fa:	781b      	ldrb	r3, [r3, #0]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d105      	bne.n	802170c <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 8021700:	4bad      	ldr	r3, [pc, #692]	; (80219b8 <_itsdk_secStore_consolePriv+0x3a4>)
 8021702:	0018      	movs	r0, r3
 8021704:	f7fe fb2a 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8021708:	2300      	movs	r3, #0
 802170a:	e160      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 802170c:	4bab      	ldr	r3, [pc, #684]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 802170e:	0018      	movs	r0, r3
 8021710:	f7fe fb24 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8021714:	2302      	movs	r3, #2
 8021716:	e15a      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 8021718:	2001      	movs	r0, #1
 802171a:	f001 feeb 	bl	80234f4 <itsdk_lorawan_resetFactoryDefaults>
 802171e:	1e03      	subs	r3, r0, #0
 8021720:	d105      	bne.n	802172e <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 8021722:	4ba5      	ldr	r3, [pc, #660]	; (80219b8 <_itsdk_secStore_consolePriv+0x3a4>)
 8021724:	0018      	movs	r0, r3
 8021726:	f7fe fb19 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 802172a:	2300      	movs	r3, #0
 802172c:	e14f      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 802172e:	4ba3      	ldr	r3, [pc, #652]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 8021730:	0018      	movs	r0, r3
 8021732:	f7fe fb13 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8021736:	2302      	movs	r3, #2
 8021738:	e149      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 802173a:	230c      	movs	r3, #12
 802173c:	18fb      	adds	r3, r7, r3
 802173e:	0019      	movs	r1, r3
 8021740:	2007      	movs	r0, #7
 8021742:	f7ff fc53 	bl	8020fec <itsdk_secstore_readBlock>
 8021746:	1e03      	subs	r3, r0, #0
 8021748:	d119      	bne.n	802177e <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 802174a:	2300      	movs	r3, #0
 802174c:	633b      	str	r3, [r7, #48]	; 0x30
 802174e:	e00d      	b.n	802176c <_itsdk_secStore_consolePriv+0x158>
 8021750:	230c      	movs	r3, #12
 8021752:	18fa      	adds	r2, r7, r3
 8021754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021756:	18d3      	adds	r3, r2, r3
 8021758:	781b      	ldrb	r3, [r3, #0]
 802175a:	001a      	movs	r2, r3
 802175c:	4b98      	ldr	r3, [pc, #608]	; (80219c0 <_itsdk_secStore_consolePriv+0x3ac>)
 802175e:	0011      	movs	r1, r2
 8021760:	0018      	movs	r0, r3
 8021762:	f7fe fafb 	bl	801fd5c <_itsdk_console_printf>
 8021766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021768:	3301      	adds	r3, #1
 802176a:	633b      	str	r3, [r7, #48]	; 0x30
 802176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802176e:	2b07      	cmp	r3, #7
 8021770:	ddee      	ble.n	8021750 <_itsdk_secStore_consolePriv+0x13c>
 8021772:	4b94      	ldr	r3, [pc, #592]	; (80219c4 <_itsdk_secStore_consolePriv+0x3b0>)
 8021774:	0018      	movs	r0, r3
 8021776:	f7fe faf1 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 802177a:	2300      	movs	r3, #0
 802177c:	e127      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 802177e:	4b8f      	ldr	r3, [pc, #572]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 8021780:	0018      	movs	r0, r3
 8021782:	f7fe faeb 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8021786:	2302      	movs	r3, #2
 8021788:	e121      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 802178a:	230c      	movs	r3, #12
 802178c:	18fb      	adds	r3, r7, r3
 802178e:	0019      	movs	r1, r3
 8021790:	2007      	movs	r0, #7
 8021792:	f7ff fc2b 	bl	8020fec <itsdk_secstore_readBlock>
 8021796:	1e03      	subs	r3, r0, #0
 8021798:	d119      	bne.n	80217ce <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 802179a:	2308      	movs	r3, #8
 802179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802179e:	e00d      	b.n	80217bc <_itsdk_secStore_consolePriv+0x1a8>
 80217a0:	230c      	movs	r3, #12
 80217a2:	18fa      	adds	r2, r7, r3
 80217a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217a6:	18d3      	adds	r3, r2, r3
 80217a8:	781b      	ldrb	r3, [r3, #0]
 80217aa:	001a      	movs	r2, r3
 80217ac:	4b84      	ldr	r3, [pc, #528]	; (80219c0 <_itsdk_secStore_consolePriv+0x3ac>)
 80217ae:	0011      	movs	r1, r2
 80217b0:	0018      	movs	r0, r3
 80217b2:	f7fe fad3 	bl	801fd5c <_itsdk_console_printf>
 80217b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217b8:	3301      	adds	r3, #1
 80217ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80217bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217be:	2b0f      	cmp	r3, #15
 80217c0:	ddee      	ble.n	80217a0 <_itsdk_secStore_consolePriv+0x18c>
 80217c2:	4b80      	ldr	r3, [pc, #512]	; (80219c4 <_itsdk_secStore_consolePriv+0x3b0>)
 80217c4:	0018      	movs	r0, r3
 80217c6:	f7fe fac9 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 80217ca:	2300      	movs	r3, #0
 80217cc:	e0ff      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 80217ce:	4b7b      	ldr	r3, [pc, #492]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 80217d0:	0018      	movs	r0, r3
 80217d2:	f7fe fac3 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80217d6:	2302      	movs	r3, #2
 80217d8:	e0f9      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 80217da:	46c0      	nop			; (mov r8, r8)
 80217dc:	e000      	b.n	80217e0 <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 80217de:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	781b      	ldrb	r3, [r3, #0]
 80217e4:	2b53      	cmp	r3, #83	; 0x53
 80217e6:	d000      	beq.n	80217ea <_itsdk_secStore_consolePriv+0x1d6>
 80217e8:	e0f0      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
 80217ea:	687b      	ldr	r3, [r7, #4]
 80217ec:	3301      	adds	r3, #1
 80217ee:	781b      	ldrb	r3, [r3, #0]
 80217f0:	2b53      	cmp	r3, #83	; 0x53
 80217f2:	d000      	beq.n	80217f6 <_itsdk_secStore_consolePriv+0x1e2>
 80217f4:	e0ea      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	3302      	adds	r3, #2
 80217fa:	781b      	ldrb	r3, [r3, #0]
 80217fc:	2b3a      	cmp	r3, #58	; 0x3a
 80217fe:	d000      	beq.n	8021802 <_itsdk_secStore_consolePriv+0x1ee>
 8021800:	e0e4      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	3304      	adds	r3, #4
 8021806:	781b      	ldrb	r3, [r3, #0]
 8021808:	2b3a      	cmp	r3, #58	; 0x3a
 802180a:	d000      	beq.n	802180e <_itsdk_secStore_consolePriv+0x1fa>
 802180c:	e0de      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 802180e:	1cfb      	adds	r3, r7, #3
 8021810:	781b      	ldrb	r3, [r3, #0]
 8021812:	3b05      	subs	r3, #5
 8021814:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	3303      	adds	r3, #3
 802181a:	781b      	ldrb	r3, [r3, #0]
 802181c:	3b30      	subs	r3, #48	; 0x30
 802181e:	2b34      	cmp	r3, #52	; 0x34
 8021820:	d900      	bls.n	8021824 <_itsdk_secStore_consolePriv+0x210>
 8021822:	e0d3      	b.n	80219cc <_itsdk_secStore_consolePriv+0x3b8>
 8021824:	009a      	lsls	r2, r3, #2
 8021826:	4b68      	ldr	r3, [pc, #416]	; (80219c8 <_itsdk_secStore_consolePriv+0x3b4>)
 8021828:	18d3      	adds	r3, r2, r3
 802182a:	681b      	ldr	r3, [r3, #0]
 802182c:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 802182e:	1cfb      	adds	r3, r7, #3
 8021830:	781a      	ldrb	r2, [r3, #0]
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	230c      	movs	r3, #12
 8021836:	18fb      	adds	r3, r7, r3
 8021838:	9300      	str	r3, [sp, #0]
 802183a:	230c      	movs	r3, #12
 802183c:	2105      	movs	r1, #5
 802183e:	f7ff fdd7 	bl	80213f0 <__checkAndConvert>
 8021842:	1e03      	subs	r3, r0, #0
 8021844:	d006      	beq.n	8021854 <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 8021846:	230c      	movs	r3, #12
 8021848:	18fb      	adds	r3, r7, r3
 802184a:	0018      	movs	r0, r3
 802184c:	f7ff fd2a 	bl	80212a4 <_itsk_secstore_rekey>
 8021850:	0003      	movs	r3, r0
 8021852:	e0bc      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 8021854:	4b59      	ldr	r3, [pc, #356]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 8021856:	0018      	movs	r0, r3
 8021858:	f7fe fa80 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 802185c:	2302      	movs	r3, #2
 802185e:	e0b6      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 8021860:	69fb      	ldr	r3, [r7, #28]
 8021862:	2b0f      	cmp	r3, #15
 8021864:	dd05      	ble.n	8021872 <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 8021866:	4b55      	ldr	r3, [pc, #340]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 8021868:	0018      	movs	r0, r3
 802186a:	f7fe fa77 	bl	801fd5c <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 802186e:	2302      	movs	r3, #2
 8021870:	e0ad      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 8021872:	2300      	movs	r3, #0
 8021874:	62bb      	str	r3, [r7, #40]	; 0x28
 8021876:	e00d      	b.n	8021894 <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 8021878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802187a:	3305      	adds	r3, #5
 802187c:	687a      	ldr	r2, [r7, #4]
 802187e:	18d3      	adds	r3, r2, r3
 8021880:	7819      	ldrb	r1, [r3, #0]
 8021882:	230c      	movs	r3, #12
 8021884:	18fa      	adds	r2, r7, r3
 8021886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021888:	18d3      	adds	r3, r2, r3
 802188a:	1c0a      	adds	r2, r1, #0
 802188c:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 802188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021890:	3301      	adds	r3, #1
 8021892:	62bb      	str	r3, [r7, #40]	; 0x28
 8021894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021896:	69fb      	ldr	r3, [r7, #28]
 8021898:	429a      	cmp	r2, r3
 802189a:	dbed      	blt.n	8021878 <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 802189c:	69fb      	ldr	r3, [r7, #28]
 802189e:	627b      	str	r3, [r7, #36]	; 0x24
 80218a0:	e008      	b.n	80218b4 <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 80218a2:	230c      	movs	r3, #12
 80218a4:	18fa      	adds	r2, r7, r3
 80218a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218a8:	18d3      	adds	r3, r2, r3
 80218aa:	2200      	movs	r2, #0
 80218ac:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 80218ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b0:	3301      	adds	r3, #1
 80218b2:	627b      	str	r3, [r7, #36]	; 0x24
 80218b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b6:	2b0f      	cmp	r3, #15
 80218b8:	ddf3      	ble.n	80218a2 <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 80218ba:	230c      	movs	r3, #12
 80218bc:	18fb      	adds	r3, r7, r3
 80218be:	0019      	movs	r1, r3
 80218c0:	2000      	movs	r0, #0
 80218c2:	f7ff fbe0 	bl	8021086 <itsdk_secstore_writeBlock>
 80218c6:	1e03      	subs	r3, r0, #0
 80218c8:	d105      	bne.n	80218d6 <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 80218ca:	4b3b      	ldr	r3, [pc, #236]	; (80219b8 <_itsdk_secStore_consolePriv+0x3a4>)
 80218cc:	0018      	movs	r0, r3
 80218ce:	f7fe fa45 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80218d2:	2300      	movs	r3, #0
 80218d4:	e07b      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 80218d6:	4b39      	ldr	r3, [pc, #228]	; (80219bc <_itsdk_secStore_consolePriv+0x3a8>)
 80218d8:	0018      	movs	r0, r3
 80218da:	f7fe fa3f 	bl	801fd5c <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80218de:	2302      	movs	r3, #2
 80218e0:	e075      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 80218e2:	230c      	movs	r3, #12
 80218e4:	18fa      	adds	r2, r7, r3
 80218e6:	1cfb      	adds	r3, r7, #3
 80218e8:	7819      	ldrb	r1, [r3, #0]
 80218ea:	6878      	ldr	r0, [r7, #4]
 80218ec:	2308      	movs	r3, #8
 80218ee:	9301      	str	r3, [sp, #4]
 80218f0:	2300      	movs	r3, #0
 80218f2:	9300      	str	r3, [sp, #0]
 80218f4:	2307      	movs	r3, #7
 80218f6:	f7ff fe19 	bl	802152c <__updateField2>
 80218fa:	0003      	movs	r3, r0
 80218fc:	e067      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 80218fe:	230c      	movs	r3, #12
 8021900:	18fa      	adds	r2, r7, r3
 8021902:	1cfb      	adds	r3, r7, #3
 8021904:	7819      	ldrb	r1, [r3, #0]
 8021906:	6878      	ldr	r0, [r7, #4]
 8021908:	2308      	movs	r3, #8
 802190a:	9301      	str	r3, [sp, #4]
 802190c:	2308      	movs	r3, #8
 802190e:	9300      	str	r3, [sp, #0]
 8021910:	2307      	movs	r3, #7
 8021912:	f7ff fe0b 	bl	802152c <__updateField2>
 8021916:	0003      	movs	r3, r0
 8021918:	e059      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 802191a:	230c      	movs	r3, #12
 802191c:	18fa      	adds	r2, r7, r3
 802191e:	1cfb      	adds	r3, r7, #3
 8021920:	7819      	ldrb	r1, [r3, #0]
 8021922:	6878      	ldr	r0, [r7, #4]
 8021924:	2308      	movs	r3, #8
 8021926:	f7ff fdb9 	bl	802149c <__updateField>
 802192a:	0003      	movs	r3, r0
 802192c:	e04f      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 802192e:	230c      	movs	r3, #12
 8021930:	18fa      	adds	r2, r7, r3
 8021932:	1cfb      	adds	r3, r7, #3
 8021934:	7819      	ldrb	r1, [r3, #0]
 8021936:	6878      	ldr	r0, [r7, #4]
 8021938:	2309      	movs	r3, #9
 802193a:	f7ff fdaf 	bl	802149c <__updateField>
 802193e:	0003      	movs	r3, r0
 8021940:	e045      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 8021942:	2523      	movs	r5, #35	; 0x23
 8021944:	197c      	adds	r4, r7, r5
 8021946:	230c      	movs	r3, #12
 8021948:	18fa      	adds	r2, r7, r3
 802194a:	1cfb      	adds	r3, r7, #3
 802194c:	7819      	ldrb	r1, [r3, #0]
 802194e:	6878      	ldr	r0, [r7, #4]
 8021950:	2309      	movs	r3, #9
 8021952:	f7ff fda3 	bl	802149c <__updateField>
 8021956:	0003      	movs	r3, r0
 8021958:	7023      	strb	r3, [r4, #0]
 802195a:	197b      	adds	r3, r7, r5
 802195c:	781b      	ldrb	r3, [r3, #0]
 802195e:	2b00      	cmp	r3, #0
 8021960:	d10b      	bne.n	802197a <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8021962:	2323      	movs	r3, #35	; 0x23
 8021964:	18fc      	adds	r4, r7, r3
 8021966:	230c      	movs	r3, #12
 8021968:	18fa      	adds	r2, r7, r3
 802196a:	1cfb      	adds	r3, r7, #3
 802196c:	7819      	ldrb	r1, [r3, #0]
 802196e:	6878      	ldr	r0, [r7, #4]
 8021970:	2308      	movs	r3, #8
 8021972:	f7ff fd93 	bl	802149c <__updateField>
 8021976:	0003      	movs	r3, r0
 8021978:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 802197a:	2323      	movs	r3, #35	; 0x23
 802197c:	18fb      	adds	r3, r7, r3
 802197e:	781b      	ldrb	r3, [r3, #0]
 8021980:	e025      	b.n	80219ce <_itsdk_secStore_consolePriv+0x3ba>
 8021982:	46c0      	nop			; (mov r8, r8)
 8021984:	08027dfc 	.word	0x08027dfc
 8021988:	08027e10 	.word	0x08027e10
 802198c:	08027e44 	.word	0x08027e44
 8021990:	08027e7c 	.word	0x08027e7c
 8021994:	08027eb8 	.word	0x08027eb8
 8021998:	08027ee4 	.word	0x08027ee4
 802199c:	08027f14 	.word	0x08027f14
 80219a0:	08027f44 	.word	0x08027f44
 80219a4:	08027f74 	.word	0x08027f74
 80219a8:	08027fa4 	.word	0x08027fa4
 80219ac:	08027fd8 	.word	0x08027fd8
 80219b0:	0802800c 	.word	0x0802800c
 80219b4:	08029720 	.word	0x08029720
 80219b8:	08027df4 	.word	0x08027df4
 80219bc:	08027dec 	.word	0x08027dec
 80219c0:	08028040 	.word	0x08028040
 80219c4:	08028048 	.word	0x08028048
 80219c8:	080297c4 	.word	0x080297c4
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 80219cc:	2301      	movs	r3, #1
}
 80219ce:	0018      	movs	r0, r3
 80219d0:	46bd      	mov	sp, r7
 80219d2:	b00e      	add	sp, #56	; 0x38
 80219d4:	bdb0      	pop	{r4, r5, r7, pc}
 80219d6:	46c0      	nop			; (mov r8, r8)

080219d8 <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 80219d8:	b580      	push	{r7, lr}
 80219da:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 80219dc:	4b08      	ldr	r3, [pc, #32]	; (8021a00 <itsdk_secStore_RegisterConsole+0x28>)
 80219de:	4a09      	ldr	r2, [pc, #36]	; (8021a04 <itsdk_secStore_RegisterConsole+0x2c>)
 80219e0:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 80219e2:	4b07      	ldr	r3, [pc, #28]	; (8021a00 <itsdk_secStore_RegisterConsole+0x28>)
 80219e4:	2200      	movs	r2, #0
 80219e6:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 80219e8:	4b05      	ldr	r3, [pc, #20]	; (8021a00 <itsdk_secStore_RegisterConsole+0x28>)
 80219ea:	2200      	movs	r2, #0
 80219ec:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 80219ee:	4b04      	ldr	r3, [pc, #16]	; (8021a00 <itsdk_secStore_RegisterConsole+0x28>)
 80219f0:	0018      	movs	r0, r3
 80219f2:	f7fe fb73 	bl	80200dc <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 80219f6:	2300      	movs	r3, #0
}
 80219f8:	0018      	movs	r0, r3
 80219fa:	46bd      	mov	sp, r7
 80219fc:	bd80      	pop	{r7, pc}
 80219fe:	46c0      	nop			; (mov r8, r8)
 8021a00:	20001ed8 	.word	0x20001ed8
 8021a04:	08021615 	.word	0x08021615

08021a08 <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8021a08:	b5b0      	push	{r4, r5, r7, lr}
 8021a0a:	b0b8      	sub	sp, #224	; 0xe0
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	60f8      	str	r0, [r7, #12]
 8021a10:	60b9      	str	r1, [r7, #8]
 8021a12:	603b      	str	r3, [r7, #0]
 8021a14:	1dfb      	adds	r3, r7, #7
 8021a16:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8021a18:	683b      	ldr	r3, [r7, #0]
 8021a1a:	2110      	movs	r1, #16
 8021a1c:	0018      	movs	r0, r3
 8021a1e:	f000 f8cd 	bl	8021bbc <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8021a22:	24d0      	movs	r4, #208	; 0xd0
 8021a24:	193a      	adds	r2, r7, r4
 8021a26:	68fb      	ldr	r3, [r7, #12]
 8021a28:	0010      	movs	r0, r2
 8021a2a:	0019      	movs	r1, r3
 8021a2c:	2310      	movs	r3, #16
 8021a2e:	001a      	movs	r2, r3
 8021a30:	f004 fa4e 	bl	8025ed0 <memcpy>
	bzero(ctx.Iv,16);
 8021a34:	2510      	movs	r5, #16
 8021a36:	197b      	adds	r3, r7, r5
 8021a38:	33b0      	adds	r3, #176	; 0xb0
 8021a3a:	2110      	movs	r1, #16
 8021a3c:	0018      	movs	r0, r3
 8021a3e:	f004 fa16 	bl	8025e6e <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8021a42:	683a      	ldr	r2, [r7, #0]
 8021a44:	197b      	adds	r3, r7, r5
 8021a46:	0011      	movs	r1, r2
 8021a48:	0018      	movs	r0, r3
 8021a4a:	f000 f9c5 	bl	8021dd8 <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 8021a4e:	1939      	adds	r1, r7, r4
 8021a50:	197b      	adds	r3, r7, r5
 8021a52:	2210      	movs	r2, #16
 8021a54:	0018      	movs	r0, r3
 8021a56:	f001 f8d8 	bl	8022c0a <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8021a5a:	683b      	ldr	r3, [r7, #0]
 8021a5c:	2110      	movs	r1, #16
 8021a5e:	0018      	movs	r0, r3
 8021a60:	f000 f856 	bl	8021b10 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8021a64:	68ba      	ldr	r2, [r7, #8]
 8021a66:	193b      	adds	r3, r7, r4
 8021a68:	0010      	movs	r0, r2
 8021a6a:	0019      	movs	r1, r3
 8021a6c:	2310      	movs	r3, #16
 8021a6e:	001a      	movs	r2, r3
 8021a70:	f004 fa2e 	bl	8025ed0 <memcpy>
	bzero(aesResult,16);
 8021a74:	193b      	adds	r3, r7, r4
 8021a76:	2110      	movs	r1, #16
 8021a78:	0018      	movs	r0, r3
 8021a7a:	f004 f9f8 	bl	8025e6e <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 8021a7e:	197b      	adds	r3, r7, r5
 8021a80:	21c0      	movs	r1, #192	; 0xc0
 8021a82:	0018      	movs	r0, r3
 8021a84:	f004 f9f3 	bl	8025e6e <bzero>
}
 8021a88:	46c0      	nop			; (mov r8, r8)
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	b038      	add	sp, #224	; 0xe0
 8021a8e:	bdb0      	pop	{r4, r5, r7, pc}

08021a90 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8021a90:	b5b0      	push	{r4, r5, r7, lr}
 8021a92:	b0b8      	sub	sp, #224	; 0xe0
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	60f8      	str	r0, [r7, #12]
 8021a98:	60b9      	str	r1, [r7, #8]
 8021a9a:	603b      	str	r3, [r7, #0]
 8021a9c:	1dfb      	adds	r3, r7, #7
 8021a9e:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8021aa0:	683b      	ldr	r3, [r7, #0]
 8021aa2:	2110      	movs	r1, #16
 8021aa4:	0018      	movs	r0, r3
 8021aa6:	f000 f889 	bl	8021bbc <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8021aaa:	24d0      	movs	r4, #208	; 0xd0
 8021aac:	193a      	adds	r2, r7, r4
 8021aae:	68fb      	ldr	r3, [r7, #12]
 8021ab0:	0010      	movs	r0, r2
 8021ab2:	0019      	movs	r1, r3
 8021ab4:	2310      	movs	r3, #16
 8021ab6:	001a      	movs	r2, r3
 8021ab8:	f004 fa0a 	bl	8025ed0 <memcpy>
	bzero(ctx.Iv,16);
 8021abc:	2510      	movs	r5, #16
 8021abe:	197b      	adds	r3, r7, r5
 8021ac0:	33b0      	adds	r3, #176	; 0xb0
 8021ac2:	2110      	movs	r1, #16
 8021ac4:	0018      	movs	r0, r3
 8021ac6:	f004 f9d2 	bl	8025e6e <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8021aca:	683a      	ldr	r2, [r7, #0]
 8021acc:	197b      	adds	r3, r7, r5
 8021ace:	0011      	movs	r1, r2
 8021ad0:	0018      	movs	r0, r3
 8021ad2:	f000 f981 	bl	8021dd8 <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 8021ad6:	1939      	adds	r1, r7, r4
 8021ad8:	197b      	adds	r3, r7, r5
 8021ada:	2210      	movs	r2, #16
 8021adc:	0018      	movs	r0, r3
 8021ade:	f001 f8c3 	bl	8022c68 <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8021ae2:	683b      	ldr	r3, [r7, #0]
 8021ae4:	2110      	movs	r1, #16
 8021ae6:	0018      	movs	r0, r3
 8021ae8:	f000 f812 	bl	8021b10 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8021aec:	68ba      	ldr	r2, [r7, #8]
 8021aee:	193b      	adds	r3, r7, r4
 8021af0:	0010      	movs	r0, r2
 8021af2:	0019      	movs	r1, r3
 8021af4:	2310      	movs	r3, #16
 8021af6:	001a      	movs	r2, r3
 8021af8:	f004 f9ea 	bl	8025ed0 <memcpy>
	bzero(aesResult,16);
 8021afc:	193b      	adds	r3, r7, r4
 8021afe:	2110      	movs	r1, #16
 8021b00:	0018      	movs	r0, r3
 8021b02:	f004 f9b4 	bl	8025e6e <bzero>
}
 8021b06:	46c0      	nop			; (mov r8, r8)
 8021b08:	46bd      	mov	sp, r7
 8021b0a:	b038      	add	sp, #224	; 0xe0
 8021b0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021b10 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 8021b10:	b580      	push	{r7, lr}
 8021b12:	b084      	sub	sp, #16
 8021b14:	af00      	add	r7, sp, #0
 8021b16:	6078      	str	r0, [r7, #4]
 8021b18:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 8021b1a:	683b      	ldr	r3, [r7, #0]
 8021b1c:	2203      	movs	r2, #3
 8021b1e:	4013      	ands	r3, r2
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	dd06      	ble.n	8021b32 <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 8021b24:	683b      	ldr	r3, [r7, #0]
 8021b26:	b29b      	uxth	r3, r3
 8021b28:	4a23      	ldr	r2, [pc, #140]	; (8021bb8 <itsdk_encrypt_cifferKey+0xa8>)
 8021b2a:	0019      	movs	r1, r3
 8021b2c:	0010      	movs	r0, r2
 8021b2e:	f001 f977 	bl	8022e20 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 8021b32:	2300      	movs	r3, #0
 8021b34:	60fb      	str	r3, [r7, #12]
 8021b36:	e037      	b.n	8021ba8 <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 8021b38:	68fb      	ldr	r3, [r7, #12]
 8021b3a:	687a      	ldr	r2, [r7, #4]
 8021b3c:	18d3      	adds	r3, r2, r3
 8021b3e:	781a      	ldrb	r2, [r3, #0]
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	6879      	ldr	r1, [r7, #4]
 8021b44:	18cb      	adds	r3, r1, r3
 8021b46:	2159      	movs	r1, #89	; 0x59
 8021b48:	4249      	negs	r1, r1
 8021b4a:	404a      	eors	r2, r1
 8021b4c:	b2d2      	uxtb	r2, r2
 8021b4e:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 8021b50:	68fb      	ldr	r3, [r7, #12]
 8021b52:	3301      	adds	r3, #1
 8021b54:	687a      	ldr	r2, [r7, #4]
 8021b56:	18d3      	adds	r3, r2, r3
 8021b58:	781a      	ldrb	r2, [r3, #0]
 8021b5a:	68fb      	ldr	r3, [r7, #12]
 8021b5c:	3301      	adds	r3, #1
 8021b5e:	6879      	ldr	r1, [r7, #4]
 8021b60:	18cb      	adds	r3, r1, r3
 8021b62:	2145      	movs	r1, #69	; 0x45
 8021b64:	404a      	eors	r2, r1
 8021b66:	b2d2      	uxtb	r2, r2
 8021b68:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 8021b6a:	68fb      	ldr	r3, [r7, #12]
 8021b6c:	3302      	adds	r3, #2
 8021b6e:	687a      	ldr	r2, [r7, #4]
 8021b70:	18d3      	adds	r3, r2, r3
 8021b72:	781a      	ldrb	r2, [r3, #0]
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	3302      	adds	r3, #2
 8021b78:	6879      	ldr	r1, [r7, #4]
 8021b7a:	18cb      	adds	r3, r1, r3
 8021b7c:	2165      	movs	r1, #101	; 0x65
 8021b7e:	4249      	negs	r1, r1
 8021b80:	404a      	eors	r2, r1
 8021b82:	b2d2      	uxtb	r2, r2
 8021b84:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 8021b86:	68fb      	ldr	r3, [r7, #12]
 8021b88:	3303      	adds	r3, #3
 8021b8a:	687a      	ldr	r2, [r7, #4]
 8021b8c:	18d3      	adds	r3, r2, r3
 8021b8e:	781a      	ldrb	r2, [r3, #0]
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	3303      	adds	r3, #3
 8021b94:	6879      	ldr	r1, [r7, #4]
 8021b96:	18cb      	adds	r3, r1, r3
 8021b98:	213d      	movs	r1, #61	; 0x3d
 8021b9a:	4249      	negs	r1, r1
 8021b9c:	404a      	eors	r2, r1
 8021b9e:	b2d2      	uxtb	r2, r2
 8021ba0:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 8021ba2:	68fb      	ldr	r3, [r7, #12]
 8021ba4:	3304      	adds	r3, #4
 8021ba6:	60fb      	str	r3, [r7, #12]
 8021ba8:	68fa      	ldr	r2, [r7, #12]
 8021baa:	683b      	ldr	r3, [r7, #0]
 8021bac:	429a      	cmp	r2, r3
 8021bae:	dbc3      	blt.n	8021b38 <itsdk_encrypt_cifferKey+0x28>
	}
}
 8021bb0:	46c0      	nop			; (mov r8, r8)
 8021bb2:	46bd      	mov	sp, r7
 8021bb4:	b004      	add	sp, #16
 8021bb6:	bd80      	pop	{r7, pc}
 8021bb8:	d0000020 	.word	0xd0000020

08021bbc <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b082      	sub	sp, #8
 8021bc0:	af00      	add	r7, sp, #0
 8021bc2:	6078      	str	r0, [r7, #4]
 8021bc4:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 8021bc6:	683a      	ldr	r2, [r7, #0]
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	0011      	movs	r1, r2
 8021bcc:	0018      	movs	r0, r3
 8021bce:	f7ff ff9f 	bl	8021b10 <itsdk_encrypt_cifferKey>
}
 8021bd2:	46c0      	nop			; (mov r8, r8)
 8021bd4:	46bd      	mov	sp, r7
 8021bd6:	b002      	add	sp, #8
 8021bd8:	bd80      	pop	{r7, pc}

08021bda <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 8021bda:	b580      	push	{r7, lr}
 8021bdc:	b082      	sub	sp, #8
 8021bde:	af00      	add	r7, sp, #0
 8021be0:	0002      	movs	r2, r0
 8021be2:	1dfb      	adds	r3, r7, #7
 8021be4:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 8021be6:	2300      	movs	r3, #0
}
 8021be8:	0018      	movs	r0, r3
 8021bea:	46bd      	mov	sp, r7
 8021bec:	b002      	add	sp, #8
 8021bee:	bd80      	pop	{r7, pc}

08021bf0 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8021bf0:	b590      	push	{r4, r7, lr}
 8021bf2:	b089      	sub	sp, #36	; 0x24
 8021bf4:	af00      	add	r7, sp, #0
 8021bf6:	6078      	str	r0, [r7, #4]
 8021bf8:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8021bfa:	2300      	movs	r3, #0
 8021bfc:	61fb      	str	r3, [r7, #28]
 8021bfe:	e030      	b.n	8021c62 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8021c00:	69fb      	ldr	r3, [r7, #28]
 8021c02:	009b      	lsls	r3, r3, #2
 8021c04:	683a      	ldr	r2, [r7, #0]
 8021c06:	18d2      	adds	r2, r2, r3
 8021c08:	69fb      	ldr	r3, [r7, #28]
 8021c0a:	009b      	lsls	r3, r3, #2
 8021c0c:	6879      	ldr	r1, [r7, #4]
 8021c0e:	18cb      	adds	r3, r1, r3
 8021c10:	7812      	ldrb	r2, [r2, #0]
 8021c12:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8021c14:	69fb      	ldr	r3, [r7, #28]
 8021c16:	009b      	lsls	r3, r3, #2
 8021c18:	3301      	adds	r3, #1
 8021c1a:	683a      	ldr	r2, [r7, #0]
 8021c1c:	18d2      	adds	r2, r2, r3
 8021c1e:	69fb      	ldr	r3, [r7, #28]
 8021c20:	009b      	lsls	r3, r3, #2
 8021c22:	3301      	adds	r3, #1
 8021c24:	6879      	ldr	r1, [r7, #4]
 8021c26:	18cb      	adds	r3, r1, r3
 8021c28:	7812      	ldrb	r2, [r2, #0]
 8021c2a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8021c2c:	69fb      	ldr	r3, [r7, #28]
 8021c2e:	009b      	lsls	r3, r3, #2
 8021c30:	3302      	adds	r3, #2
 8021c32:	683a      	ldr	r2, [r7, #0]
 8021c34:	18d2      	adds	r2, r2, r3
 8021c36:	69fb      	ldr	r3, [r7, #28]
 8021c38:	009b      	lsls	r3, r3, #2
 8021c3a:	3302      	adds	r3, #2
 8021c3c:	6879      	ldr	r1, [r7, #4]
 8021c3e:	18cb      	adds	r3, r1, r3
 8021c40:	7812      	ldrb	r2, [r2, #0]
 8021c42:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8021c44:	69fb      	ldr	r3, [r7, #28]
 8021c46:	009b      	lsls	r3, r3, #2
 8021c48:	3303      	adds	r3, #3
 8021c4a:	683a      	ldr	r2, [r7, #0]
 8021c4c:	18d2      	adds	r2, r2, r3
 8021c4e:	69fb      	ldr	r3, [r7, #28]
 8021c50:	009b      	lsls	r3, r3, #2
 8021c52:	3303      	adds	r3, #3
 8021c54:	6879      	ldr	r1, [r7, #4]
 8021c56:	18cb      	adds	r3, r1, r3
 8021c58:	7812      	ldrb	r2, [r2, #0]
 8021c5a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8021c5c:	69fb      	ldr	r3, [r7, #28]
 8021c5e:	3301      	adds	r3, #1
 8021c60:	61fb      	str	r3, [r7, #28]
 8021c62:	69fb      	ldr	r3, [r7, #28]
 8021c64:	2b03      	cmp	r3, #3
 8021c66:	d9cb      	bls.n	8021c00 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8021c68:	2304      	movs	r3, #4
 8021c6a:	61fb      	str	r3, [r7, #28]
 8021c6c:	e0a4      	b.n	8021db8 <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 8021c6e:	69fb      	ldr	r3, [r7, #28]
 8021c70:	4a55      	ldr	r2, [pc, #340]	; (8021dc8 <KeyExpansion+0x1d8>)
 8021c72:	4694      	mov	ip, r2
 8021c74:	4463      	add	r3, ip
 8021c76:	009b      	lsls	r3, r3, #2
 8021c78:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8021c7a:	687a      	ldr	r2, [r7, #4]
 8021c7c:	69bb      	ldr	r3, [r7, #24]
 8021c7e:	18d3      	adds	r3, r2, r3
 8021c80:	781a      	ldrb	r2, [r3, #0]
 8021c82:	210c      	movs	r1, #12
 8021c84:	187b      	adds	r3, r7, r1
 8021c86:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8021c88:	69bb      	ldr	r3, [r7, #24]
 8021c8a:	3301      	adds	r3, #1
 8021c8c:	687a      	ldr	r2, [r7, #4]
 8021c8e:	18d3      	adds	r3, r2, r3
 8021c90:	781a      	ldrb	r2, [r3, #0]
 8021c92:	187b      	adds	r3, r7, r1
 8021c94:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8021c96:	69bb      	ldr	r3, [r7, #24]
 8021c98:	3302      	adds	r3, #2
 8021c9a:	687a      	ldr	r2, [r7, #4]
 8021c9c:	18d3      	adds	r3, r2, r3
 8021c9e:	781a      	ldrb	r2, [r3, #0]
 8021ca0:	187b      	adds	r3, r7, r1
 8021ca2:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8021ca4:	69bb      	ldr	r3, [r7, #24]
 8021ca6:	3303      	adds	r3, #3
 8021ca8:	687a      	ldr	r2, [r7, #4]
 8021caa:	18d3      	adds	r3, r2, r3
 8021cac:	781a      	ldrb	r2, [r3, #0]
 8021cae:	187b      	adds	r3, r7, r1
 8021cb0:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 8021cb2:	69fb      	ldr	r3, [r7, #28]
 8021cb4:	2203      	movs	r2, #3
 8021cb6:	4013      	ands	r3, r2
 8021cb8:	d13b      	bne.n	8021d32 <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8021cba:	2117      	movs	r1, #23
 8021cbc:	187b      	adds	r3, r7, r1
 8021cbe:	200c      	movs	r0, #12
 8021cc0:	183a      	adds	r2, r7, r0
 8021cc2:	7812      	ldrb	r2, [r2, #0]
 8021cc4:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8021cc6:	183b      	adds	r3, r7, r0
 8021cc8:	785a      	ldrb	r2, [r3, #1]
 8021cca:	183b      	adds	r3, r7, r0
 8021ccc:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 8021cce:	183b      	adds	r3, r7, r0
 8021cd0:	789a      	ldrb	r2, [r3, #2]
 8021cd2:	183b      	adds	r3, r7, r0
 8021cd4:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8021cd6:	183b      	adds	r3, r7, r0
 8021cd8:	78da      	ldrb	r2, [r3, #3]
 8021cda:	183b      	adds	r3, r7, r0
 8021cdc:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 8021cde:	183b      	adds	r3, r7, r0
 8021ce0:	187a      	adds	r2, r7, r1
 8021ce2:	7812      	ldrb	r2, [r2, #0]
 8021ce4:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8021ce6:	183b      	adds	r3, r7, r0
 8021ce8:	781b      	ldrb	r3, [r3, #0]
 8021cea:	001a      	movs	r2, r3
 8021cec:	4b37      	ldr	r3, [pc, #220]	; (8021dcc <KeyExpansion+0x1dc>)
 8021cee:	5c9a      	ldrb	r2, [r3, r2]
 8021cf0:	183b      	adds	r3, r7, r0
 8021cf2:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8021cf4:	183b      	adds	r3, r7, r0
 8021cf6:	785b      	ldrb	r3, [r3, #1]
 8021cf8:	001a      	movs	r2, r3
 8021cfa:	4b34      	ldr	r3, [pc, #208]	; (8021dcc <KeyExpansion+0x1dc>)
 8021cfc:	5c9a      	ldrb	r2, [r3, r2]
 8021cfe:	183b      	adds	r3, r7, r0
 8021d00:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 8021d02:	183b      	adds	r3, r7, r0
 8021d04:	789b      	ldrb	r3, [r3, #2]
 8021d06:	001a      	movs	r2, r3
 8021d08:	4b30      	ldr	r3, [pc, #192]	; (8021dcc <KeyExpansion+0x1dc>)
 8021d0a:	5c9a      	ldrb	r2, [r3, r2]
 8021d0c:	183b      	adds	r3, r7, r0
 8021d0e:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 8021d10:	183b      	adds	r3, r7, r0
 8021d12:	78db      	ldrb	r3, [r3, #3]
 8021d14:	001a      	movs	r2, r3
 8021d16:	4b2d      	ldr	r3, [pc, #180]	; (8021dcc <KeyExpansion+0x1dc>)
 8021d18:	5c9a      	ldrb	r2, [r3, r2]
 8021d1a:	183b      	adds	r3, r7, r0
 8021d1c:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8021d1e:	183b      	adds	r3, r7, r0
 8021d20:	781a      	ldrb	r2, [r3, #0]
 8021d22:	69fb      	ldr	r3, [r7, #28]
 8021d24:	089b      	lsrs	r3, r3, #2
 8021d26:	492a      	ldr	r1, [pc, #168]	; (8021dd0 <KeyExpansion+0x1e0>)
 8021d28:	5ccb      	ldrb	r3, [r1, r3]
 8021d2a:	4053      	eors	r3, r2
 8021d2c:	b2da      	uxtb	r2, r3
 8021d2e:	183b      	adds	r3, r7, r0
 8021d30:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8021d32:	69fb      	ldr	r3, [r7, #28]
 8021d34:	009b      	lsls	r3, r3, #2
 8021d36:	613b      	str	r3, [r7, #16]
 8021d38:	69fb      	ldr	r3, [r7, #28]
 8021d3a:	4a26      	ldr	r2, [pc, #152]	; (8021dd4 <KeyExpansion+0x1e4>)
 8021d3c:	4694      	mov	ip, r2
 8021d3e:	4463      	add	r3, ip
 8021d40:	009b      	lsls	r3, r3, #2
 8021d42:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8021d44:	687a      	ldr	r2, [r7, #4]
 8021d46:	69bb      	ldr	r3, [r7, #24]
 8021d48:	18d3      	adds	r3, r2, r3
 8021d4a:	7819      	ldrb	r1, [r3, #0]
 8021d4c:	240c      	movs	r4, #12
 8021d4e:	193b      	adds	r3, r7, r4
 8021d50:	781a      	ldrb	r2, [r3, #0]
 8021d52:	6878      	ldr	r0, [r7, #4]
 8021d54:	693b      	ldr	r3, [r7, #16]
 8021d56:	18c3      	adds	r3, r0, r3
 8021d58:	404a      	eors	r2, r1
 8021d5a:	b2d2      	uxtb	r2, r2
 8021d5c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8021d5e:	69bb      	ldr	r3, [r7, #24]
 8021d60:	3301      	adds	r3, #1
 8021d62:	687a      	ldr	r2, [r7, #4]
 8021d64:	18d3      	adds	r3, r2, r3
 8021d66:	7819      	ldrb	r1, [r3, #0]
 8021d68:	193b      	adds	r3, r7, r4
 8021d6a:	785a      	ldrb	r2, [r3, #1]
 8021d6c:	693b      	ldr	r3, [r7, #16]
 8021d6e:	3301      	adds	r3, #1
 8021d70:	6878      	ldr	r0, [r7, #4]
 8021d72:	18c3      	adds	r3, r0, r3
 8021d74:	404a      	eors	r2, r1
 8021d76:	b2d2      	uxtb	r2, r2
 8021d78:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8021d7a:	69bb      	ldr	r3, [r7, #24]
 8021d7c:	3302      	adds	r3, #2
 8021d7e:	687a      	ldr	r2, [r7, #4]
 8021d80:	18d3      	adds	r3, r2, r3
 8021d82:	7819      	ldrb	r1, [r3, #0]
 8021d84:	193b      	adds	r3, r7, r4
 8021d86:	789a      	ldrb	r2, [r3, #2]
 8021d88:	693b      	ldr	r3, [r7, #16]
 8021d8a:	3302      	adds	r3, #2
 8021d8c:	6878      	ldr	r0, [r7, #4]
 8021d8e:	18c3      	adds	r3, r0, r3
 8021d90:	404a      	eors	r2, r1
 8021d92:	b2d2      	uxtb	r2, r2
 8021d94:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8021d96:	69bb      	ldr	r3, [r7, #24]
 8021d98:	3303      	adds	r3, #3
 8021d9a:	687a      	ldr	r2, [r7, #4]
 8021d9c:	18d3      	adds	r3, r2, r3
 8021d9e:	7819      	ldrb	r1, [r3, #0]
 8021da0:	193b      	adds	r3, r7, r4
 8021da2:	78da      	ldrb	r2, [r3, #3]
 8021da4:	693b      	ldr	r3, [r7, #16]
 8021da6:	3303      	adds	r3, #3
 8021da8:	6878      	ldr	r0, [r7, #4]
 8021daa:	18c3      	adds	r3, r0, r3
 8021dac:	404a      	eors	r2, r1
 8021dae:	b2d2      	uxtb	r2, r2
 8021db0:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8021db2:	69fb      	ldr	r3, [r7, #28]
 8021db4:	3301      	adds	r3, #1
 8021db6:	61fb      	str	r3, [r7, #28]
 8021db8:	69fb      	ldr	r3, [r7, #28]
 8021dba:	2b2b      	cmp	r3, #43	; 0x2b
 8021dbc:	d800      	bhi.n	8021dc0 <KeyExpansion+0x1d0>
 8021dbe:	e756      	b.n	8021c6e <KeyExpansion+0x7e>
  }
}
 8021dc0:	46c0      	nop			; (mov r8, r8)
 8021dc2:	46bd      	mov	sp, r7
 8021dc4:	b009      	add	sp, #36	; 0x24
 8021dc6:	bd90      	pop	{r4, r7, pc}
 8021dc8:	3fffffff 	.word	0x3fffffff
 8021dcc:	08029898 	.word	0x08029898
 8021dd0:	08029a98 	.word	0x08029a98
 8021dd4:	3ffffffc 	.word	0x3ffffffc

08021dd8 <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b082      	sub	sp, #8
 8021ddc:	af00      	add	r7, sp, #0
 8021dde:	6078      	str	r0, [r7, #4]
 8021de0:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	683a      	ldr	r2, [r7, #0]
 8021de6:	0011      	movs	r1, r2
 8021de8:	0018      	movs	r0, r3
 8021dea:	f7ff ff01 	bl	8021bf0 <KeyExpansion>
}
 8021dee:	46c0      	nop			; (mov r8, r8)
 8021df0:	46bd      	mov	sp, r7
 8021df2:	b002      	add	sp, #8
 8021df4:	bd80      	pop	{r7, pc}

08021df6 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 8021df6:	b5b0      	push	{r4, r5, r7, lr}
 8021df8:	b086      	sub	sp, #24
 8021dfa:	af00      	add	r7, sp, #0
 8021dfc:	60b9      	str	r1, [r7, #8]
 8021dfe:	607a      	str	r2, [r7, #4]
 8021e00:	230f      	movs	r3, #15
 8021e02:	18fb      	adds	r3, r7, r3
 8021e04:	1c02      	adds	r2, r0, #0
 8021e06:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8021e08:	2317      	movs	r3, #23
 8021e0a:	18fb      	adds	r3, r7, r3
 8021e0c:	2200      	movs	r2, #0
 8021e0e:	701a      	strb	r2, [r3, #0]
 8021e10:	e038      	b.n	8021e84 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8021e12:	2316      	movs	r3, #22
 8021e14:	18fb      	adds	r3, r7, r3
 8021e16:	2200      	movs	r2, #0
 8021e18:	701a      	strb	r2, [r3, #0]
 8021e1a:	e028      	b.n	8021e6e <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8021e1c:	2517      	movs	r5, #23
 8021e1e:	197b      	adds	r3, r7, r5
 8021e20:	781a      	ldrb	r2, [r3, #0]
 8021e22:	2416      	movs	r4, #22
 8021e24:	193b      	adds	r3, r7, r4
 8021e26:	781b      	ldrb	r3, [r3, #0]
 8021e28:	68b9      	ldr	r1, [r7, #8]
 8021e2a:	0092      	lsls	r2, r2, #2
 8021e2c:	188a      	adds	r2, r1, r2
 8021e2e:	5cd0      	ldrb	r0, [r2, r3]
 8021e30:	230f      	movs	r3, #15
 8021e32:	18fb      	adds	r3, r7, r3
 8021e34:	781b      	ldrb	r3, [r3, #0]
 8021e36:	009a      	lsls	r2, r3, #2
 8021e38:	197b      	adds	r3, r7, r5
 8021e3a:	781b      	ldrb	r3, [r3, #0]
 8021e3c:	18d3      	adds	r3, r2, r3
 8021e3e:	009a      	lsls	r2, r3, #2
 8021e40:	193b      	adds	r3, r7, r4
 8021e42:	781b      	ldrb	r3, [r3, #0]
 8021e44:	18d3      	adds	r3, r2, r3
 8021e46:	001a      	movs	r2, r3
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	189b      	adds	r3, r3, r2
 8021e4c:	7819      	ldrb	r1, [r3, #0]
 8021e4e:	197b      	adds	r3, r7, r5
 8021e50:	781a      	ldrb	r2, [r3, #0]
 8021e52:	193b      	adds	r3, r7, r4
 8021e54:	781b      	ldrb	r3, [r3, #0]
 8021e56:	4041      	eors	r1, r0
 8021e58:	b2c8      	uxtb	r0, r1
 8021e5a:	68b9      	ldr	r1, [r7, #8]
 8021e5c:	0092      	lsls	r2, r2, #2
 8021e5e:	188a      	adds	r2, r1, r2
 8021e60:	1c01      	adds	r1, r0, #0
 8021e62:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8021e64:	193b      	adds	r3, r7, r4
 8021e66:	193a      	adds	r2, r7, r4
 8021e68:	7812      	ldrb	r2, [r2, #0]
 8021e6a:	3201      	adds	r2, #1
 8021e6c:	701a      	strb	r2, [r3, #0]
 8021e6e:	2316      	movs	r3, #22
 8021e70:	18fb      	adds	r3, r7, r3
 8021e72:	781b      	ldrb	r3, [r3, #0]
 8021e74:	2b03      	cmp	r3, #3
 8021e76:	d9d1      	bls.n	8021e1c <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 8021e78:	2217      	movs	r2, #23
 8021e7a:	18bb      	adds	r3, r7, r2
 8021e7c:	18ba      	adds	r2, r7, r2
 8021e7e:	7812      	ldrb	r2, [r2, #0]
 8021e80:	3201      	adds	r2, #1
 8021e82:	701a      	strb	r2, [r3, #0]
 8021e84:	2317      	movs	r3, #23
 8021e86:	18fb      	adds	r3, r7, r3
 8021e88:	781b      	ldrb	r3, [r3, #0]
 8021e8a:	2b03      	cmp	r3, #3
 8021e8c:	d9c1      	bls.n	8021e12 <AddRoundKey+0x1c>
    }
  }
}
 8021e8e:	46c0      	nop			; (mov r8, r8)
 8021e90:	46bd      	mov	sp, r7
 8021e92:	b006      	add	sp, #24
 8021e94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021e98 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8021e98:	b5b0      	push	{r4, r5, r7, lr}
 8021e9a:	b084      	sub	sp, #16
 8021e9c:	af00      	add	r7, sp, #0
 8021e9e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8021ea0:	230f      	movs	r3, #15
 8021ea2:	18fb      	adds	r3, r7, r3
 8021ea4:	2200      	movs	r2, #0
 8021ea6:	701a      	strb	r2, [r3, #0]
 8021ea8:	e02a      	b.n	8021f00 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8021eaa:	230e      	movs	r3, #14
 8021eac:	18fb      	adds	r3, r7, r3
 8021eae:	2200      	movs	r2, #0
 8021eb0:	701a      	strb	r2, [r3, #0]
 8021eb2:	e01a      	b.n	8021eea <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8021eb4:	240e      	movs	r4, #14
 8021eb6:	193b      	adds	r3, r7, r4
 8021eb8:	781a      	ldrb	r2, [r3, #0]
 8021eba:	250f      	movs	r5, #15
 8021ebc:	197b      	adds	r3, r7, r5
 8021ebe:	781b      	ldrb	r3, [r3, #0]
 8021ec0:	6879      	ldr	r1, [r7, #4]
 8021ec2:	0092      	lsls	r2, r2, #2
 8021ec4:	188a      	adds	r2, r1, r2
 8021ec6:	5cd3      	ldrb	r3, [r2, r3]
 8021ec8:	0018      	movs	r0, r3
 8021eca:	193b      	adds	r3, r7, r4
 8021ecc:	781a      	ldrb	r2, [r3, #0]
 8021ece:	197b      	adds	r3, r7, r5
 8021ed0:	781b      	ldrb	r3, [r3, #0]
 8021ed2:	4910      	ldr	r1, [pc, #64]	; (8021f14 <SubBytes+0x7c>)
 8021ed4:	5c08      	ldrb	r0, [r1, r0]
 8021ed6:	6879      	ldr	r1, [r7, #4]
 8021ed8:	0092      	lsls	r2, r2, #2
 8021eda:	188a      	adds	r2, r1, r2
 8021edc:	1c01      	adds	r1, r0, #0
 8021ede:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8021ee0:	193b      	adds	r3, r7, r4
 8021ee2:	193a      	adds	r2, r7, r4
 8021ee4:	7812      	ldrb	r2, [r2, #0]
 8021ee6:	3201      	adds	r2, #1
 8021ee8:	701a      	strb	r2, [r3, #0]
 8021eea:	230e      	movs	r3, #14
 8021eec:	18fb      	adds	r3, r7, r3
 8021eee:	781b      	ldrb	r3, [r3, #0]
 8021ef0:	2b03      	cmp	r3, #3
 8021ef2:	d9df      	bls.n	8021eb4 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8021ef4:	220f      	movs	r2, #15
 8021ef6:	18bb      	adds	r3, r7, r2
 8021ef8:	18ba      	adds	r2, r7, r2
 8021efa:	7812      	ldrb	r2, [r2, #0]
 8021efc:	3201      	adds	r2, #1
 8021efe:	701a      	strb	r2, [r3, #0]
 8021f00:	230f      	movs	r3, #15
 8021f02:	18fb      	adds	r3, r7, r3
 8021f04:	781b      	ldrb	r3, [r3, #0]
 8021f06:	2b03      	cmp	r3, #3
 8021f08:	d9cf      	bls.n	8021eaa <SubBytes+0x12>
    }
  }
}
 8021f0a:	46c0      	nop			; (mov r8, r8)
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	b004      	add	sp, #16
 8021f10:	bdb0      	pop	{r4, r5, r7, pc}
 8021f12:	46c0      	nop			; (mov r8, r8)
 8021f14:	08029898 	.word	0x08029898

08021f18 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8021f18:	b580      	push	{r7, lr}
 8021f1a:	b084      	sub	sp, #16
 8021f1c:	af00      	add	r7, sp, #0
 8021f1e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8021f20:	210f      	movs	r1, #15
 8021f22:	187b      	adds	r3, r7, r1
 8021f24:	687a      	ldr	r2, [r7, #4]
 8021f26:	7852      	ldrb	r2, [r2, #1]
 8021f28:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	795a      	ldrb	r2, [r3, #5]
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	7a5a      	ldrb	r2, [r3, #9]
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	7b5a      	ldrb	r2, [r3, #13]
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	187a      	adds	r2, r7, r1
 8021f46:	7812      	ldrb	r2, [r2, #0]
 8021f48:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8021f4a:	187b      	adds	r3, r7, r1
 8021f4c:	687a      	ldr	r2, [r7, #4]
 8021f4e:	7892      	ldrb	r2, [r2, #2]
 8021f50:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	7a9a      	ldrb	r2, [r3, #10]
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	187a      	adds	r2, r7, r1
 8021f5e:	7812      	ldrb	r2, [r2, #0]
 8021f60:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8021f62:	187b      	adds	r3, r7, r1
 8021f64:	687a      	ldr	r2, [r7, #4]
 8021f66:	7992      	ldrb	r2, [r2, #6]
 8021f68:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	7b9a      	ldrb	r2, [r3, #14]
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	187a      	adds	r2, r7, r1
 8021f76:	7812      	ldrb	r2, [r2, #0]
 8021f78:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8021f7a:	187b      	adds	r3, r7, r1
 8021f7c:	687a      	ldr	r2, [r7, #4]
 8021f7e:	78d2      	ldrb	r2, [r2, #3]
 8021f80:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	7bda      	ldrb	r2, [r3, #15]
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	7ada      	ldrb	r2, [r3, #11]
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	79da      	ldrb	r2, [r3, #7]
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	187a      	adds	r2, r7, r1
 8021f9e:	7812      	ldrb	r2, [r2, #0]
 8021fa0:	71da      	strb	r2, [r3, #7]
}
 8021fa2:	46c0      	nop			; (mov r8, r8)
 8021fa4:	46bd      	mov	sp, r7
 8021fa6:	b004      	add	sp, #16
 8021fa8:	bd80      	pop	{r7, pc}

08021faa <xtime>:

static uint8_t xtime(uint8_t x)
{
 8021faa:	b580      	push	{r7, lr}
 8021fac:	b082      	sub	sp, #8
 8021fae:	af00      	add	r7, sp, #0
 8021fb0:	0002      	movs	r2, r0
 8021fb2:	1dfb      	adds	r3, r7, #7
 8021fb4:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8021fb6:	1dfb      	adds	r3, r7, #7
 8021fb8:	781b      	ldrb	r3, [r3, #0]
 8021fba:	005b      	lsls	r3, r3, #1
 8021fbc:	b25a      	sxtb	r2, r3
 8021fbe:	1dfb      	adds	r3, r7, #7
 8021fc0:	781b      	ldrb	r3, [r3, #0]
 8021fc2:	09db      	lsrs	r3, r3, #7
 8021fc4:	b2db      	uxtb	r3, r3
 8021fc6:	1c19      	adds	r1, r3, #0
 8021fc8:	1c0b      	adds	r3, r1, #0
 8021fca:	18db      	adds	r3, r3, r3
 8021fcc:	185b      	adds	r3, r3, r1
 8021fce:	1c19      	adds	r1, r3, #0
 8021fd0:	00c8      	lsls	r0, r1, #3
 8021fd2:	1c19      	adds	r1, r3, #0
 8021fd4:	1c03      	adds	r3, r0, #0
 8021fd6:	18cb      	adds	r3, r1, r3
 8021fd8:	b2db      	uxtb	r3, r3
 8021fda:	b25b      	sxtb	r3, r3
 8021fdc:	4053      	eors	r3, r2
 8021fde:	b25b      	sxtb	r3, r3
 8021fe0:	b2db      	uxtb	r3, r3
}
 8021fe2:	0018      	movs	r0, r3
 8021fe4:	46bd      	mov	sp, r7
 8021fe6:	b002      	add	sp, #8
 8021fe8:	bd80      	pop	{r7, pc}

08021fea <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8021fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fec:	b085      	sub	sp, #20
 8021fee:	af00      	add	r7, sp, #0
 8021ff0:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8021ff2:	230f      	movs	r3, #15
 8021ff4:	18fb      	adds	r3, r7, r3
 8021ff6:	2200      	movs	r2, #0
 8021ff8:	701a      	strb	r2, [r3, #0]
 8021ffa:	e0f0      	b.n	80221de <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 8021ffc:	250f      	movs	r5, #15
 8021ffe:	197b      	adds	r3, r7, r5
 8022000:	7819      	ldrb	r1, [r3, #0]
 8022002:	230e      	movs	r3, #14
 8022004:	18fb      	adds	r3, r7, r3
 8022006:	687a      	ldr	r2, [r7, #4]
 8022008:	0089      	lsls	r1, r1, #2
 802200a:	5c8a      	ldrb	r2, [r1, r2]
 802200c:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 802200e:	197b      	adds	r3, r7, r5
 8022010:	781a      	ldrb	r2, [r3, #0]
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	0092      	lsls	r2, r2, #2
 8022016:	5cd2      	ldrb	r2, [r2, r3]
 8022018:	197b      	adds	r3, r7, r5
 802201a:	781b      	ldrb	r3, [r3, #0]
 802201c:	6879      	ldr	r1, [r7, #4]
 802201e:	009b      	lsls	r3, r3, #2
 8022020:	18cb      	adds	r3, r1, r3
 8022022:	3301      	adds	r3, #1
 8022024:	781b      	ldrb	r3, [r3, #0]
 8022026:	4053      	eors	r3, r2
 8022028:	b2da      	uxtb	r2, r3
 802202a:	197b      	adds	r3, r7, r5
 802202c:	781b      	ldrb	r3, [r3, #0]
 802202e:	6879      	ldr	r1, [r7, #4]
 8022030:	009b      	lsls	r3, r3, #2
 8022032:	18cb      	adds	r3, r1, r3
 8022034:	3302      	adds	r3, #2
 8022036:	781b      	ldrb	r3, [r3, #0]
 8022038:	4053      	eors	r3, r2
 802203a:	b2d9      	uxtb	r1, r3
 802203c:	197b      	adds	r3, r7, r5
 802203e:	781b      	ldrb	r3, [r3, #0]
 8022040:	687a      	ldr	r2, [r7, #4]
 8022042:	009b      	lsls	r3, r3, #2
 8022044:	18d3      	adds	r3, r2, r3
 8022046:	3303      	adds	r3, #3
 8022048:	781a      	ldrb	r2, [r3, #0]
 802204a:	230d      	movs	r3, #13
 802204c:	18fb      	adds	r3, r7, r3
 802204e:	404a      	eors	r2, r1
 8022050:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8022052:	197b      	adds	r3, r7, r5
 8022054:	781a      	ldrb	r2, [r3, #0]
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	0092      	lsls	r2, r2, #2
 802205a:	5cd1      	ldrb	r1, [r2, r3]
 802205c:	197b      	adds	r3, r7, r5
 802205e:	781b      	ldrb	r3, [r3, #0]
 8022060:	687a      	ldr	r2, [r7, #4]
 8022062:	009b      	lsls	r3, r3, #2
 8022064:	18d3      	adds	r3, r2, r3
 8022066:	3301      	adds	r3, #1
 8022068:	781a      	ldrb	r2, [r3, #0]
 802206a:	200c      	movs	r0, #12
 802206c:	183b      	adds	r3, r7, r0
 802206e:	404a      	eors	r2, r1
 8022070:	701a      	strb	r2, [r3, #0]
 8022072:	183c      	adds	r4, r7, r0
 8022074:	0006      	movs	r6, r0
 8022076:	183b      	adds	r3, r7, r0
 8022078:	781b      	ldrb	r3, [r3, #0]
 802207a:	0018      	movs	r0, r3
 802207c:	f7ff ff95 	bl	8021faa <xtime>
 8022080:	0003      	movs	r3, r0
 8022082:	7023      	strb	r3, [r4, #0]
 8022084:	197b      	adds	r3, r7, r5
 8022086:	781a      	ldrb	r2, [r3, #0]
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	0092      	lsls	r2, r2, #2
 802208c:	5cd1      	ldrb	r1, [r2, r3]
 802208e:	0030      	movs	r0, r6
 8022090:	183a      	adds	r2, r7, r0
 8022092:	230d      	movs	r3, #13
 8022094:	18fb      	adds	r3, r7, r3
 8022096:	7812      	ldrb	r2, [r2, #0]
 8022098:	781b      	ldrb	r3, [r3, #0]
 802209a:	4053      	eors	r3, r2
 802209c:	b2db      	uxtb	r3, r3
 802209e:	197a      	adds	r2, r7, r5
 80220a0:	7812      	ldrb	r2, [r2, #0]
 80220a2:	404b      	eors	r3, r1
 80220a4:	b2d9      	uxtb	r1, r3
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	0092      	lsls	r2, r2, #2
 80220aa:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80220ac:	197b      	adds	r3, r7, r5
 80220ae:	781b      	ldrb	r3, [r3, #0]
 80220b0:	687a      	ldr	r2, [r7, #4]
 80220b2:	009b      	lsls	r3, r3, #2
 80220b4:	18d3      	adds	r3, r2, r3
 80220b6:	3301      	adds	r3, #1
 80220b8:	7819      	ldrb	r1, [r3, #0]
 80220ba:	197b      	adds	r3, r7, r5
 80220bc:	781b      	ldrb	r3, [r3, #0]
 80220be:	687a      	ldr	r2, [r7, #4]
 80220c0:	009b      	lsls	r3, r3, #2
 80220c2:	18d3      	adds	r3, r2, r3
 80220c4:	3302      	adds	r3, #2
 80220c6:	781a      	ldrb	r2, [r3, #0]
 80220c8:	183b      	adds	r3, r7, r0
 80220ca:	404a      	eors	r2, r1
 80220cc:	701a      	strb	r2, [r3, #0]
 80220ce:	183c      	adds	r4, r7, r0
 80220d0:	0006      	movs	r6, r0
 80220d2:	183b      	adds	r3, r7, r0
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	0018      	movs	r0, r3
 80220d8:	f7ff ff67 	bl	8021faa <xtime>
 80220dc:	0003      	movs	r3, r0
 80220de:	7023      	strb	r3, [r4, #0]
 80220e0:	197b      	adds	r3, r7, r5
 80220e2:	781b      	ldrb	r3, [r3, #0]
 80220e4:	687a      	ldr	r2, [r7, #4]
 80220e6:	009b      	lsls	r3, r3, #2
 80220e8:	18d3      	adds	r3, r2, r3
 80220ea:	3301      	adds	r3, #1
 80220ec:	7819      	ldrb	r1, [r3, #0]
 80220ee:	0030      	movs	r0, r6
 80220f0:	183a      	adds	r2, r7, r0
 80220f2:	230d      	movs	r3, #13
 80220f4:	18fb      	adds	r3, r7, r3
 80220f6:	7812      	ldrb	r2, [r2, #0]
 80220f8:	781b      	ldrb	r3, [r3, #0]
 80220fa:	4053      	eors	r3, r2
 80220fc:	b2da      	uxtb	r2, r3
 80220fe:	197b      	adds	r3, r7, r5
 8022100:	781b      	ldrb	r3, [r3, #0]
 8022102:	404a      	eors	r2, r1
 8022104:	b2d1      	uxtb	r1, r2
 8022106:	687a      	ldr	r2, [r7, #4]
 8022108:	009b      	lsls	r3, r3, #2
 802210a:	18d3      	adds	r3, r2, r3
 802210c:	3301      	adds	r3, #1
 802210e:	1c0a      	adds	r2, r1, #0
 8022110:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8022112:	197b      	adds	r3, r7, r5
 8022114:	781b      	ldrb	r3, [r3, #0]
 8022116:	687a      	ldr	r2, [r7, #4]
 8022118:	009b      	lsls	r3, r3, #2
 802211a:	18d3      	adds	r3, r2, r3
 802211c:	3302      	adds	r3, #2
 802211e:	7819      	ldrb	r1, [r3, #0]
 8022120:	197b      	adds	r3, r7, r5
 8022122:	781b      	ldrb	r3, [r3, #0]
 8022124:	687a      	ldr	r2, [r7, #4]
 8022126:	009b      	lsls	r3, r3, #2
 8022128:	18d3      	adds	r3, r2, r3
 802212a:	3303      	adds	r3, #3
 802212c:	781a      	ldrb	r2, [r3, #0]
 802212e:	183b      	adds	r3, r7, r0
 8022130:	404a      	eors	r2, r1
 8022132:	701a      	strb	r2, [r3, #0]
 8022134:	183c      	adds	r4, r7, r0
 8022136:	0006      	movs	r6, r0
 8022138:	183b      	adds	r3, r7, r0
 802213a:	781b      	ldrb	r3, [r3, #0]
 802213c:	0018      	movs	r0, r3
 802213e:	f7ff ff34 	bl	8021faa <xtime>
 8022142:	0003      	movs	r3, r0
 8022144:	7023      	strb	r3, [r4, #0]
 8022146:	197b      	adds	r3, r7, r5
 8022148:	781b      	ldrb	r3, [r3, #0]
 802214a:	687a      	ldr	r2, [r7, #4]
 802214c:	009b      	lsls	r3, r3, #2
 802214e:	18d3      	adds	r3, r2, r3
 8022150:	3302      	adds	r3, #2
 8022152:	7819      	ldrb	r1, [r3, #0]
 8022154:	0030      	movs	r0, r6
 8022156:	183a      	adds	r2, r7, r0
 8022158:	230d      	movs	r3, #13
 802215a:	18fb      	adds	r3, r7, r3
 802215c:	7812      	ldrb	r2, [r2, #0]
 802215e:	781b      	ldrb	r3, [r3, #0]
 8022160:	4053      	eors	r3, r2
 8022162:	b2da      	uxtb	r2, r3
 8022164:	197b      	adds	r3, r7, r5
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	404a      	eors	r2, r1
 802216a:	b2d1      	uxtb	r1, r2
 802216c:	687a      	ldr	r2, [r7, #4]
 802216e:	009b      	lsls	r3, r3, #2
 8022170:	18d3      	adds	r3, r2, r3
 8022172:	3302      	adds	r3, #2
 8022174:	1c0a      	adds	r2, r1, #0
 8022176:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8022178:	197b      	adds	r3, r7, r5
 802217a:	781b      	ldrb	r3, [r3, #0]
 802217c:	687a      	ldr	r2, [r7, #4]
 802217e:	009b      	lsls	r3, r3, #2
 8022180:	18d3      	adds	r3, r2, r3
 8022182:	3303      	adds	r3, #3
 8022184:	7819      	ldrb	r1, [r3, #0]
 8022186:	183b      	adds	r3, r7, r0
 8022188:	220e      	movs	r2, #14
 802218a:	18ba      	adds	r2, r7, r2
 802218c:	7812      	ldrb	r2, [r2, #0]
 802218e:	404a      	eors	r2, r1
 8022190:	701a      	strb	r2, [r3, #0]
 8022192:	183c      	adds	r4, r7, r0
 8022194:	0006      	movs	r6, r0
 8022196:	183b      	adds	r3, r7, r0
 8022198:	781b      	ldrb	r3, [r3, #0]
 802219a:	0018      	movs	r0, r3
 802219c:	f7ff ff05 	bl	8021faa <xtime>
 80221a0:	0003      	movs	r3, r0
 80221a2:	7023      	strb	r3, [r4, #0]
 80221a4:	197b      	adds	r3, r7, r5
 80221a6:	781b      	ldrb	r3, [r3, #0]
 80221a8:	687a      	ldr	r2, [r7, #4]
 80221aa:	009b      	lsls	r3, r3, #2
 80221ac:	18d3      	adds	r3, r2, r3
 80221ae:	3303      	adds	r3, #3
 80221b0:	7819      	ldrb	r1, [r3, #0]
 80221b2:	19ba      	adds	r2, r7, r6
 80221b4:	230d      	movs	r3, #13
 80221b6:	18fb      	adds	r3, r7, r3
 80221b8:	7812      	ldrb	r2, [r2, #0]
 80221ba:	781b      	ldrb	r3, [r3, #0]
 80221bc:	4053      	eors	r3, r2
 80221be:	b2da      	uxtb	r2, r3
 80221c0:	197b      	adds	r3, r7, r5
 80221c2:	781b      	ldrb	r3, [r3, #0]
 80221c4:	404a      	eors	r2, r1
 80221c6:	b2d1      	uxtb	r1, r2
 80221c8:	687a      	ldr	r2, [r7, #4]
 80221ca:	009b      	lsls	r3, r3, #2
 80221cc:	18d3      	adds	r3, r2, r3
 80221ce:	3303      	adds	r3, #3
 80221d0:	1c0a      	adds	r2, r1, #0
 80221d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 80221d4:	197b      	adds	r3, r7, r5
 80221d6:	197a      	adds	r2, r7, r5
 80221d8:	7812      	ldrb	r2, [r2, #0]
 80221da:	3201      	adds	r2, #1
 80221dc:	701a      	strb	r2, [r3, #0]
 80221de:	230f      	movs	r3, #15
 80221e0:	18fb      	adds	r3, r7, r3
 80221e2:	781b      	ldrb	r3, [r3, #0]
 80221e4:	2b03      	cmp	r3, #3
 80221e6:	d800      	bhi.n	80221ea <MixColumns+0x200>
 80221e8:	e708      	b.n	8021ffc <MixColumns+0x12>
  }
}
 80221ea:	46c0      	nop			; (mov r8, r8)
 80221ec:	46bd      	mov	sp, r7
 80221ee:	b005      	add	sp, #20
 80221f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080221f2 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80221f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221f4:	b085      	sub	sp, #20
 80221f6:	af00      	add	r7, sp, #0
 80221f8:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80221fa:	2300      	movs	r3, #0
 80221fc:	60fb      	str	r3, [r7, #12]
 80221fe:	e3c3      	b.n	8022988 <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 8022200:	260b      	movs	r6, #11
 8022202:	19bb      	adds	r3, r7, r6
 8022204:	687a      	ldr	r2, [r7, #4]
 8022206:	68f9      	ldr	r1, [r7, #12]
 8022208:	0089      	lsls	r1, r1, #2
 802220a:	5c8a      	ldrb	r2, [r1, r2]
 802220c:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 802220e:	250a      	movs	r5, #10
 8022210:	197b      	adds	r3, r7, r5
 8022212:	6879      	ldr	r1, [r7, #4]
 8022214:	68fa      	ldr	r2, [r7, #12]
 8022216:	0092      	lsls	r2, r2, #2
 8022218:	188a      	adds	r2, r1, r2
 802221a:	3201      	adds	r2, #1
 802221c:	7812      	ldrb	r2, [r2, #0]
 802221e:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 8022220:	2409      	movs	r4, #9
 8022222:	193b      	adds	r3, r7, r4
 8022224:	6879      	ldr	r1, [r7, #4]
 8022226:	68fa      	ldr	r2, [r7, #12]
 8022228:	0092      	lsls	r2, r2, #2
 802222a:	188a      	adds	r2, r1, r2
 802222c:	3202      	adds	r2, #2
 802222e:	7812      	ldrb	r2, [r2, #0]
 8022230:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 8022232:	2308      	movs	r3, #8
 8022234:	18fb      	adds	r3, r7, r3
 8022236:	6879      	ldr	r1, [r7, #4]
 8022238:	68fa      	ldr	r2, [r7, #12]
 802223a:	0092      	lsls	r2, r2, #2
 802223c:	188a      	adds	r2, r1, r2
 802223e:	3203      	adds	r2, #3
 8022240:	7812      	ldrb	r2, [r2, #0]
 8022242:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8022244:	19bb      	adds	r3, r7, r6
 8022246:	781b      	ldrb	r3, [r3, #0]
 8022248:	0018      	movs	r0, r3
 802224a:	f7ff feae 	bl	8021faa <xtime>
 802224e:	0003      	movs	r3, r0
 8022250:	0018      	movs	r0, r3
 8022252:	f7ff feaa 	bl	8021faa <xtime>
 8022256:	0003      	movs	r3, r0
 8022258:	0018      	movs	r0, r3
 802225a:	f7ff fea6 	bl	8021faa <xtime>
 802225e:	0003      	movs	r3, r0
 8022260:	0018      	movs	r0, r3
 8022262:	f7ff fea2 	bl	8021faa <xtime>
 8022266:	197b      	adds	r3, r7, r5
 8022268:	781b      	ldrb	r3, [r3, #0]
 802226a:	0018      	movs	r0, r3
 802226c:	f7ff fe9d 	bl	8021faa <xtime>
 8022270:	0003      	movs	r3, r0
 8022272:	0018      	movs	r0, r3
 8022274:	f7ff fe99 	bl	8021faa <xtime>
 8022278:	197b      	adds	r3, r7, r5
 802227a:	781b      	ldrb	r3, [r3, #0]
 802227c:	0018      	movs	r0, r3
 802227e:	f7ff fe94 	bl	8021faa <xtime>
 8022282:	0003      	movs	r3, r0
 8022284:	0018      	movs	r0, r3
 8022286:	f7ff fe90 	bl	8021faa <xtime>
 802228a:	0003      	movs	r3, r0
 802228c:	0018      	movs	r0, r3
 802228e:	f7ff fe8c 	bl	8021faa <xtime>
 8022292:	0003      	movs	r3, r0
 8022294:	0018      	movs	r0, r3
 8022296:	f7ff fe88 	bl	8021faa <xtime>
 802229a:	193b      	adds	r3, r7, r4
 802229c:	781b      	ldrb	r3, [r3, #0]
 802229e:	0018      	movs	r0, r3
 80222a0:	f7ff fe83 	bl	8021faa <xtime>
 80222a4:	193b      	adds	r3, r7, r4
 80222a6:	781b      	ldrb	r3, [r3, #0]
 80222a8:	0018      	movs	r0, r3
 80222aa:	f7ff fe7e 	bl	8021faa <xtime>
 80222ae:	0003      	movs	r3, r0
 80222b0:	0018      	movs	r0, r3
 80222b2:	f7ff fe7a 	bl	8021faa <xtime>
 80222b6:	0003      	movs	r3, r0
 80222b8:	0018      	movs	r0, r3
 80222ba:	f7ff fe76 	bl	8021faa <xtime>
 80222be:	0003      	movs	r3, r0
 80222c0:	0018      	movs	r0, r3
 80222c2:	f7ff fe72 	bl	8021faa <xtime>
 80222c6:	2308      	movs	r3, #8
 80222c8:	001c      	movs	r4, r3
 80222ca:	18fb      	adds	r3, r7, r3
 80222cc:	781b      	ldrb	r3, [r3, #0]
 80222ce:	0018      	movs	r0, r3
 80222d0:	f7ff fe6b 	bl	8021faa <xtime>
 80222d4:	0023      	movs	r3, r4
 80222d6:	001c      	movs	r4, r3
 80222d8:	18fb      	adds	r3, r7, r3
 80222da:	781b      	ldrb	r3, [r3, #0]
 80222dc:	0018      	movs	r0, r3
 80222de:	f7ff fe64 	bl	8021faa <xtime>
 80222e2:	0003      	movs	r3, r0
 80222e4:	0018      	movs	r0, r3
 80222e6:	f7ff fe60 	bl	8021faa <xtime>
 80222ea:	0023      	movs	r3, r4
 80222ec:	18fb      	adds	r3, r7, r3
 80222ee:	781b      	ldrb	r3, [r3, #0]
 80222f0:	0018      	movs	r0, r3
 80222f2:	f7ff fe5a 	bl	8021faa <xtime>
 80222f6:	0003      	movs	r3, r0
 80222f8:	0018      	movs	r0, r3
 80222fa:	f7ff fe56 	bl	8021faa <xtime>
 80222fe:	0003      	movs	r3, r0
 8022300:	0018      	movs	r0, r3
 8022302:	f7ff fe52 	bl	8021faa <xtime>
 8022306:	0003      	movs	r3, r0
 8022308:	0018      	movs	r0, r3
 802230a:	f7ff fe4e 	bl	8021faa <xtime>
 802230e:	19bb      	adds	r3, r7, r6
 8022310:	781b      	ldrb	r3, [r3, #0]
 8022312:	0018      	movs	r0, r3
 8022314:	f7ff fe49 	bl	8021faa <xtime>
 8022318:	0003      	movs	r3, r0
 802231a:	001c      	movs	r4, r3
 802231c:	19bb      	adds	r3, r7, r6
 802231e:	781b      	ldrb	r3, [r3, #0]
 8022320:	0018      	movs	r0, r3
 8022322:	f7ff fe42 	bl	8021faa <xtime>
 8022326:	0003      	movs	r3, r0
 8022328:	0018      	movs	r0, r3
 802232a:	f7ff fe3e 	bl	8021faa <xtime>
 802232e:	0003      	movs	r3, r0
 8022330:	4063      	eors	r3, r4
 8022332:	b2dc      	uxtb	r4, r3
 8022334:	19bb      	adds	r3, r7, r6
 8022336:	781b      	ldrb	r3, [r3, #0]
 8022338:	0018      	movs	r0, r3
 802233a:	f7ff fe36 	bl	8021faa <xtime>
 802233e:	0003      	movs	r3, r0
 8022340:	0018      	movs	r0, r3
 8022342:	f7ff fe32 	bl	8021faa <xtime>
 8022346:	0003      	movs	r3, r0
 8022348:	0018      	movs	r0, r3
 802234a:	f7ff fe2e 	bl	8021faa <xtime>
 802234e:	0003      	movs	r3, r0
 8022350:	4063      	eors	r3, r4
 8022352:	b2dc      	uxtb	r4, r3
 8022354:	197b      	adds	r3, r7, r5
 8022356:	781b      	ldrb	r3, [r3, #0]
 8022358:	0018      	movs	r0, r3
 802235a:	f7ff fe26 	bl	8021faa <xtime>
 802235e:	0003      	movs	r3, r0
 8022360:	001a      	movs	r2, r3
 8022362:	0029      	movs	r1, r5
 8022364:	197b      	adds	r3, r7, r5
 8022366:	781b      	ldrb	r3, [r3, #0]
 8022368:	4053      	eors	r3, r2
 802236a:	b2dd      	uxtb	r5, r3
 802236c:	187b      	adds	r3, r7, r1
 802236e:	781b      	ldrb	r3, [r3, #0]
 8022370:	0018      	movs	r0, r3
 8022372:	f7ff fe1a 	bl	8021faa <xtime>
 8022376:	0003      	movs	r3, r0
 8022378:	0018      	movs	r0, r3
 802237a:	f7ff fe16 	bl	8021faa <xtime>
 802237e:	0003      	movs	r3, r0
 8022380:	0018      	movs	r0, r3
 8022382:	f7ff fe12 	bl	8021faa <xtime>
 8022386:	0003      	movs	r3, r0
 8022388:	406b      	eors	r3, r5
 802238a:	b2db      	uxtb	r3, r3
 802238c:	4063      	eors	r3, r4
 802238e:	b2dc      	uxtb	r4, r3
 8022390:	2309      	movs	r3, #9
 8022392:	001d      	movs	r5, r3
 8022394:	18fb      	adds	r3, r7, r3
 8022396:	781b      	ldrb	r3, [r3, #0]
 8022398:	0018      	movs	r0, r3
 802239a:	f7ff fe06 	bl	8021faa <xtime>
 802239e:	0003      	movs	r3, r0
 80223a0:	0018      	movs	r0, r3
 80223a2:	f7ff fe02 	bl	8021faa <xtime>
 80223a6:	0003      	movs	r3, r0
 80223a8:	001a      	movs	r2, r3
 80223aa:	002b      	movs	r3, r5
 80223ac:	0018      	movs	r0, r3
 80223ae:	18fb      	adds	r3, r7, r3
 80223b0:	781b      	ldrb	r3, [r3, #0]
 80223b2:	4053      	eors	r3, r2
 80223b4:	b2dd      	uxtb	r5, r3
 80223b6:	0003      	movs	r3, r0
 80223b8:	18fb      	adds	r3, r7, r3
 80223ba:	781b      	ldrb	r3, [r3, #0]
 80223bc:	0018      	movs	r0, r3
 80223be:	f7ff fdf4 	bl	8021faa <xtime>
 80223c2:	0003      	movs	r3, r0
 80223c4:	0018      	movs	r0, r3
 80223c6:	f7ff fdf0 	bl	8021faa <xtime>
 80223ca:	0003      	movs	r3, r0
 80223cc:	0018      	movs	r0, r3
 80223ce:	f7ff fdec 	bl	8021faa <xtime>
 80223d2:	0003      	movs	r3, r0
 80223d4:	406b      	eors	r3, r5
 80223d6:	b2db      	uxtb	r3, r3
 80223d8:	4063      	eors	r3, r4
 80223da:	b2dc      	uxtb	r4, r3
 80223dc:	2308      	movs	r3, #8
 80223de:	001d      	movs	r5, r3
 80223e0:	18fb      	adds	r3, r7, r3
 80223e2:	781b      	ldrb	r3, [r3, #0]
 80223e4:	0018      	movs	r0, r3
 80223e6:	f7ff fde0 	bl	8021faa <xtime>
 80223ea:	0003      	movs	r3, r0
 80223ec:	0018      	movs	r0, r3
 80223ee:	f7ff fddc 	bl	8021faa <xtime>
 80223f2:	0003      	movs	r3, r0
 80223f4:	0018      	movs	r0, r3
 80223f6:	f7ff fdd8 	bl	8021faa <xtime>
 80223fa:	0003      	movs	r3, r0
 80223fc:	001a      	movs	r2, r3
 80223fe:	002b      	movs	r3, r5
 8022400:	18fb      	adds	r3, r7, r3
 8022402:	781b      	ldrb	r3, [r3, #0]
 8022404:	4053      	eors	r3, r2
 8022406:	b2db      	uxtb	r3, r3
 8022408:	4063      	eors	r3, r4
 802240a:	b2d9      	uxtb	r1, r3
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	68fa      	ldr	r2, [r7, #12]
 8022410:	0092      	lsls	r2, r2, #2
 8022412:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8022414:	19bb      	adds	r3, r7, r6
 8022416:	781b      	ldrb	r3, [r3, #0]
 8022418:	0018      	movs	r0, r3
 802241a:	f7ff fdc6 	bl	8021faa <xtime>
 802241e:	19bb      	adds	r3, r7, r6
 8022420:	781b      	ldrb	r3, [r3, #0]
 8022422:	0018      	movs	r0, r3
 8022424:	f7ff fdc1 	bl	8021faa <xtime>
 8022428:	0003      	movs	r3, r0
 802242a:	0018      	movs	r0, r3
 802242c:	f7ff fdbd 	bl	8021faa <xtime>
 8022430:	19bb      	adds	r3, r7, r6
 8022432:	781b      	ldrb	r3, [r3, #0]
 8022434:	0018      	movs	r0, r3
 8022436:	f7ff fdb8 	bl	8021faa <xtime>
 802243a:	0003      	movs	r3, r0
 802243c:	0018      	movs	r0, r3
 802243e:	f7ff fdb4 	bl	8021faa <xtime>
 8022442:	0003      	movs	r3, r0
 8022444:	0018      	movs	r0, r3
 8022446:	f7ff fdb0 	bl	8021faa <xtime>
 802244a:	0003      	movs	r3, r0
 802244c:	0018      	movs	r0, r3
 802244e:	f7ff fdac 	bl	8021faa <xtime>
 8022452:	210a      	movs	r1, #10
 8022454:	000d      	movs	r5, r1
 8022456:	187b      	adds	r3, r7, r1
 8022458:	781b      	ldrb	r3, [r3, #0]
 802245a:	0018      	movs	r0, r3
 802245c:	f7ff fda5 	bl	8021faa <xtime>
 8022460:	0003      	movs	r3, r0
 8022462:	0018      	movs	r0, r3
 8022464:	f7ff fda1 	bl	8021faa <xtime>
 8022468:	0003      	movs	r3, r0
 802246a:	0018      	movs	r0, r3
 802246c:	f7ff fd9d 	bl	8021faa <xtime>
 8022470:	0003      	movs	r3, r0
 8022472:	0018      	movs	r0, r3
 8022474:	f7ff fd99 	bl	8021faa <xtime>
 8022478:	2409      	movs	r4, #9
 802247a:	193b      	adds	r3, r7, r4
 802247c:	781b      	ldrb	r3, [r3, #0]
 802247e:	0018      	movs	r0, r3
 8022480:	f7ff fd93 	bl	8021faa <xtime>
 8022484:	0003      	movs	r3, r0
 8022486:	0018      	movs	r0, r3
 8022488:	f7ff fd8f 	bl	8021faa <xtime>
 802248c:	193b      	adds	r3, r7, r4
 802248e:	781b      	ldrb	r3, [r3, #0]
 8022490:	0018      	movs	r0, r3
 8022492:	f7ff fd8a 	bl	8021faa <xtime>
 8022496:	0003      	movs	r3, r0
 8022498:	0018      	movs	r0, r3
 802249a:	f7ff fd86 	bl	8021faa <xtime>
 802249e:	0003      	movs	r3, r0
 80224a0:	0018      	movs	r0, r3
 80224a2:	f7ff fd82 	bl	8021faa <xtime>
 80224a6:	0003      	movs	r3, r0
 80224a8:	0018      	movs	r0, r3
 80224aa:	f7ff fd7e 	bl	8021faa <xtime>
 80224ae:	2308      	movs	r3, #8
 80224b0:	001c      	movs	r4, r3
 80224b2:	18fb      	adds	r3, r7, r3
 80224b4:	781b      	ldrb	r3, [r3, #0]
 80224b6:	0018      	movs	r0, r3
 80224b8:	f7ff fd77 	bl	8021faa <xtime>
 80224bc:	0023      	movs	r3, r4
 80224be:	18fb      	adds	r3, r7, r3
 80224c0:	781b      	ldrb	r3, [r3, #0]
 80224c2:	0018      	movs	r0, r3
 80224c4:	f7ff fd71 	bl	8021faa <xtime>
 80224c8:	0003      	movs	r3, r0
 80224ca:	0018      	movs	r0, r3
 80224cc:	f7ff fd6d 	bl	8021faa <xtime>
 80224d0:	0003      	movs	r3, r0
 80224d2:	0018      	movs	r0, r3
 80224d4:	f7ff fd69 	bl	8021faa <xtime>
 80224d8:	0003      	movs	r3, r0
 80224da:	0018      	movs	r0, r3
 80224dc:	f7ff fd65 	bl	8021faa <xtime>
 80224e0:	19bb      	adds	r3, r7, r6
 80224e2:	781b      	ldrb	r3, [r3, #0]
 80224e4:	0018      	movs	r0, r3
 80224e6:	f7ff fd60 	bl	8021faa <xtime>
 80224ea:	0003      	movs	r3, r0
 80224ec:	0018      	movs	r0, r3
 80224ee:	f7ff fd5c 	bl	8021faa <xtime>
 80224f2:	0003      	movs	r3, r0
 80224f4:	0018      	movs	r0, r3
 80224f6:	f7ff fd58 	bl	8021faa <xtime>
 80224fa:	0003      	movs	r3, r0
 80224fc:	001a      	movs	r2, r3
 80224fe:	19bb      	adds	r3, r7, r6
 8022500:	781b      	ldrb	r3, [r3, #0]
 8022502:	4053      	eors	r3, r2
 8022504:	b2dc      	uxtb	r4, r3
 8022506:	197b      	adds	r3, r7, r5
 8022508:	781b      	ldrb	r3, [r3, #0]
 802250a:	0018      	movs	r0, r3
 802250c:	f7ff fd4d 	bl	8021faa <xtime>
 8022510:	0003      	movs	r3, r0
 8022512:	001d      	movs	r5, r3
 8022514:	230a      	movs	r3, #10
 8022516:	18fb      	adds	r3, r7, r3
 8022518:	781b      	ldrb	r3, [r3, #0]
 802251a:	0018      	movs	r0, r3
 802251c:	f7ff fd45 	bl	8021faa <xtime>
 8022520:	0003      	movs	r3, r0
 8022522:	0018      	movs	r0, r3
 8022524:	f7ff fd41 	bl	8021faa <xtime>
 8022528:	0003      	movs	r3, r0
 802252a:	406b      	eors	r3, r5
 802252c:	b2dd      	uxtb	r5, r3
 802252e:	230a      	movs	r3, #10
 8022530:	18fb      	adds	r3, r7, r3
 8022532:	781b      	ldrb	r3, [r3, #0]
 8022534:	0018      	movs	r0, r3
 8022536:	f7ff fd38 	bl	8021faa <xtime>
 802253a:	0003      	movs	r3, r0
 802253c:	0018      	movs	r0, r3
 802253e:	f7ff fd34 	bl	8021faa <xtime>
 8022542:	0003      	movs	r3, r0
 8022544:	0018      	movs	r0, r3
 8022546:	f7ff fd30 	bl	8021faa <xtime>
 802254a:	0003      	movs	r3, r0
 802254c:	406b      	eors	r3, r5
 802254e:	b2db      	uxtb	r3, r3
 8022550:	4063      	eors	r3, r4
 8022552:	b2dc      	uxtb	r4, r3
 8022554:	2209      	movs	r2, #9
 8022556:	0015      	movs	r5, r2
 8022558:	18bb      	adds	r3, r7, r2
 802255a:	781b      	ldrb	r3, [r3, #0]
 802255c:	0018      	movs	r0, r3
 802255e:	f7ff fd24 	bl	8021faa <xtime>
 8022562:	0003      	movs	r3, r0
 8022564:	001a      	movs	r2, r3
 8022566:	0029      	movs	r1, r5
 8022568:	187b      	adds	r3, r7, r1
 802256a:	781b      	ldrb	r3, [r3, #0]
 802256c:	4053      	eors	r3, r2
 802256e:	b2dd      	uxtb	r5, r3
 8022570:	187b      	adds	r3, r7, r1
 8022572:	781b      	ldrb	r3, [r3, #0]
 8022574:	0018      	movs	r0, r3
 8022576:	f7ff fd18 	bl	8021faa <xtime>
 802257a:	0003      	movs	r3, r0
 802257c:	0018      	movs	r0, r3
 802257e:	f7ff fd14 	bl	8021faa <xtime>
 8022582:	0003      	movs	r3, r0
 8022584:	0018      	movs	r0, r3
 8022586:	f7ff fd10 	bl	8021faa <xtime>
 802258a:	0003      	movs	r3, r0
 802258c:	406b      	eors	r3, r5
 802258e:	b2db      	uxtb	r3, r3
 8022590:	4063      	eors	r3, r4
 8022592:	b2dc      	uxtb	r4, r3
 8022594:	2208      	movs	r2, #8
 8022596:	0015      	movs	r5, r2
 8022598:	18bb      	adds	r3, r7, r2
 802259a:	781b      	ldrb	r3, [r3, #0]
 802259c:	0018      	movs	r0, r3
 802259e:	f7ff fd04 	bl	8021faa <xtime>
 80225a2:	0003      	movs	r3, r0
 80225a4:	0018      	movs	r0, r3
 80225a6:	f7ff fd00 	bl	8021faa <xtime>
 80225aa:	0003      	movs	r3, r0
 80225ac:	001a      	movs	r2, r3
 80225ae:	0028      	movs	r0, r5
 80225b0:	183b      	adds	r3, r7, r0
 80225b2:	781b      	ldrb	r3, [r3, #0]
 80225b4:	4053      	eors	r3, r2
 80225b6:	b2dd      	uxtb	r5, r3
 80225b8:	0002      	movs	r2, r0
 80225ba:	18bb      	adds	r3, r7, r2
 80225bc:	781b      	ldrb	r3, [r3, #0]
 80225be:	0018      	movs	r0, r3
 80225c0:	f7ff fcf3 	bl	8021faa <xtime>
 80225c4:	0003      	movs	r3, r0
 80225c6:	0018      	movs	r0, r3
 80225c8:	f7ff fcef 	bl	8021faa <xtime>
 80225cc:	0003      	movs	r3, r0
 80225ce:	0018      	movs	r0, r3
 80225d0:	f7ff fceb 	bl	8021faa <xtime>
 80225d4:	0003      	movs	r3, r0
 80225d6:	406b      	eors	r3, r5
 80225d8:	b2db      	uxtb	r3, r3
 80225da:	4063      	eors	r3, r4
 80225dc:	b2d9      	uxtb	r1, r3
 80225de:	687a      	ldr	r2, [r7, #4]
 80225e0:	68fb      	ldr	r3, [r7, #12]
 80225e2:	009b      	lsls	r3, r3, #2
 80225e4:	18d3      	adds	r3, r2, r3
 80225e6:	3301      	adds	r3, #1
 80225e8:	1c0a      	adds	r2, r1, #0
 80225ea:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80225ec:	19bb      	adds	r3, r7, r6
 80225ee:	781b      	ldrb	r3, [r3, #0]
 80225f0:	0018      	movs	r0, r3
 80225f2:	f7ff fcda 	bl	8021faa <xtime>
 80225f6:	19bb      	adds	r3, r7, r6
 80225f8:	781b      	ldrb	r3, [r3, #0]
 80225fa:	0018      	movs	r0, r3
 80225fc:	f7ff fcd5 	bl	8021faa <xtime>
 8022600:	0003      	movs	r3, r0
 8022602:	0018      	movs	r0, r3
 8022604:	f7ff fcd1 	bl	8021faa <xtime>
 8022608:	0003      	movs	r3, r0
 802260a:	0018      	movs	r0, r3
 802260c:	f7ff fccd 	bl	8021faa <xtime>
 8022610:	0003      	movs	r3, r0
 8022612:	0018      	movs	r0, r3
 8022614:	f7ff fcc9 	bl	8021faa <xtime>
 8022618:	250a      	movs	r5, #10
 802261a:	197b      	adds	r3, r7, r5
 802261c:	781b      	ldrb	r3, [r3, #0]
 802261e:	0018      	movs	r0, r3
 8022620:	f7ff fcc3 	bl	8021faa <xtime>
 8022624:	197b      	adds	r3, r7, r5
 8022626:	781b      	ldrb	r3, [r3, #0]
 8022628:	0018      	movs	r0, r3
 802262a:	f7ff fcbe 	bl	8021faa <xtime>
 802262e:	0003      	movs	r3, r0
 8022630:	0018      	movs	r0, r3
 8022632:	f7ff fcba 	bl	8021faa <xtime>
 8022636:	197b      	adds	r3, r7, r5
 8022638:	781b      	ldrb	r3, [r3, #0]
 802263a:	0018      	movs	r0, r3
 802263c:	f7ff fcb5 	bl	8021faa <xtime>
 8022640:	0003      	movs	r3, r0
 8022642:	0018      	movs	r0, r3
 8022644:	f7ff fcb1 	bl	8021faa <xtime>
 8022648:	0003      	movs	r3, r0
 802264a:	0018      	movs	r0, r3
 802264c:	f7ff fcad 	bl	8021faa <xtime>
 8022650:	0003      	movs	r3, r0
 8022652:	0018      	movs	r0, r3
 8022654:	f7ff fca9 	bl	8021faa <xtime>
 8022658:	2109      	movs	r1, #9
 802265a:	187b      	adds	r3, r7, r1
 802265c:	781b      	ldrb	r3, [r3, #0]
 802265e:	0018      	movs	r0, r3
 8022660:	f7ff fca3 	bl	8021faa <xtime>
 8022664:	0003      	movs	r3, r0
 8022666:	0018      	movs	r0, r3
 8022668:	f7ff fc9f 	bl	8021faa <xtime>
 802266c:	0003      	movs	r3, r0
 802266e:	0018      	movs	r0, r3
 8022670:	f7ff fc9b 	bl	8021faa <xtime>
 8022674:	0003      	movs	r3, r0
 8022676:	0018      	movs	r0, r3
 8022678:	f7ff fc97 	bl	8021faa <xtime>
 802267c:	2408      	movs	r4, #8
 802267e:	193b      	adds	r3, r7, r4
 8022680:	781b      	ldrb	r3, [r3, #0]
 8022682:	0018      	movs	r0, r3
 8022684:	f7ff fc91 	bl	8021faa <xtime>
 8022688:	0003      	movs	r3, r0
 802268a:	0018      	movs	r0, r3
 802268c:	f7ff fc8d 	bl	8021faa <xtime>
 8022690:	193b      	adds	r3, r7, r4
 8022692:	781b      	ldrb	r3, [r3, #0]
 8022694:	0018      	movs	r0, r3
 8022696:	f7ff fc88 	bl	8021faa <xtime>
 802269a:	0003      	movs	r3, r0
 802269c:	0018      	movs	r0, r3
 802269e:	f7ff fc84 	bl	8021faa <xtime>
 80226a2:	0003      	movs	r3, r0
 80226a4:	0018      	movs	r0, r3
 80226a6:	f7ff fc80 	bl	8021faa <xtime>
 80226aa:	0003      	movs	r3, r0
 80226ac:	0018      	movs	r0, r3
 80226ae:	f7ff fc7c 	bl	8021faa <xtime>
 80226b2:	19bb      	adds	r3, r7, r6
 80226b4:	781b      	ldrb	r3, [r3, #0]
 80226b6:	0018      	movs	r0, r3
 80226b8:	f7ff fc77 	bl	8021faa <xtime>
 80226bc:	0003      	movs	r3, r0
 80226be:	0018      	movs	r0, r3
 80226c0:	f7ff fc73 	bl	8021faa <xtime>
 80226c4:	0003      	movs	r3, r0
 80226c6:	001a      	movs	r2, r3
 80226c8:	19bb      	adds	r3, r7, r6
 80226ca:	781b      	ldrb	r3, [r3, #0]
 80226cc:	4053      	eors	r3, r2
 80226ce:	b2dc      	uxtb	r4, r3
 80226d0:	19bb      	adds	r3, r7, r6
 80226d2:	781b      	ldrb	r3, [r3, #0]
 80226d4:	0018      	movs	r0, r3
 80226d6:	f7ff fc68 	bl	8021faa <xtime>
 80226da:	0003      	movs	r3, r0
 80226dc:	0018      	movs	r0, r3
 80226de:	f7ff fc64 	bl	8021faa <xtime>
 80226e2:	0003      	movs	r3, r0
 80226e4:	0018      	movs	r0, r3
 80226e6:	f7ff fc60 	bl	8021faa <xtime>
 80226ea:	0003      	movs	r3, r0
 80226ec:	4063      	eors	r3, r4
 80226ee:	b2dc      	uxtb	r4, r3
 80226f0:	197b      	adds	r3, r7, r5
 80226f2:	781b      	ldrb	r3, [r3, #0]
 80226f4:	0018      	movs	r0, r3
 80226f6:	f7ff fc58 	bl	8021faa <xtime>
 80226fa:	0003      	movs	r3, r0
 80226fc:	0018      	movs	r0, r3
 80226fe:	f7ff fc54 	bl	8021faa <xtime>
 8022702:	0003      	movs	r3, r0
 8022704:	0018      	movs	r0, r3
 8022706:	f7ff fc50 	bl	8021faa <xtime>
 802270a:	0003      	movs	r3, r0
 802270c:	001a      	movs	r2, r3
 802270e:	197b      	adds	r3, r7, r5
 8022710:	781b      	ldrb	r3, [r3, #0]
 8022712:	4053      	eors	r3, r2
 8022714:	b2db      	uxtb	r3, r3
 8022716:	4063      	eors	r3, r4
 8022718:	b2dc      	uxtb	r4, r3
 802271a:	2109      	movs	r1, #9
 802271c:	187b      	adds	r3, r7, r1
 802271e:	781b      	ldrb	r3, [r3, #0]
 8022720:	0018      	movs	r0, r3
 8022722:	f7ff fc42 	bl	8021faa <xtime>
 8022726:	0003      	movs	r3, r0
 8022728:	001d      	movs	r5, r3
 802272a:	2109      	movs	r1, #9
 802272c:	187b      	adds	r3, r7, r1
 802272e:	781b      	ldrb	r3, [r3, #0]
 8022730:	0018      	movs	r0, r3
 8022732:	f7ff fc3a 	bl	8021faa <xtime>
 8022736:	0003      	movs	r3, r0
 8022738:	0018      	movs	r0, r3
 802273a:	f7ff fc36 	bl	8021faa <xtime>
 802273e:	0003      	movs	r3, r0
 8022740:	406b      	eors	r3, r5
 8022742:	b2dd      	uxtb	r5, r3
 8022744:	2109      	movs	r1, #9
 8022746:	187b      	adds	r3, r7, r1
 8022748:	781b      	ldrb	r3, [r3, #0]
 802274a:	0018      	movs	r0, r3
 802274c:	f7ff fc2d 	bl	8021faa <xtime>
 8022750:	0003      	movs	r3, r0
 8022752:	0018      	movs	r0, r3
 8022754:	f7ff fc29 	bl	8021faa <xtime>
 8022758:	0003      	movs	r3, r0
 802275a:	0018      	movs	r0, r3
 802275c:	f7ff fc25 	bl	8021faa <xtime>
 8022760:	0003      	movs	r3, r0
 8022762:	406b      	eors	r3, r5
 8022764:	b2db      	uxtb	r3, r3
 8022766:	4063      	eors	r3, r4
 8022768:	b2dc      	uxtb	r4, r3
 802276a:	2308      	movs	r3, #8
 802276c:	001d      	movs	r5, r3
 802276e:	18fb      	adds	r3, r7, r3
 8022770:	781b      	ldrb	r3, [r3, #0]
 8022772:	0018      	movs	r0, r3
 8022774:	f7ff fc19 	bl	8021faa <xtime>
 8022778:	0003      	movs	r3, r0
 802277a:	001a      	movs	r2, r3
 802277c:	0028      	movs	r0, r5
 802277e:	183b      	adds	r3, r7, r0
 8022780:	781b      	ldrb	r3, [r3, #0]
 8022782:	4053      	eors	r3, r2
 8022784:	b2dd      	uxtb	r5, r3
 8022786:	0003      	movs	r3, r0
 8022788:	18fb      	adds	r3, r7, r3
 802278a:	781b      	ldrb	r3, [r3, #0]
 802278c:	0018      	movs	r0, r3
 802278e:	f7ff fc0c 	bl	8021faa <xtime>
 8022792:	0003      	movs	r3, r0
 8022794:	0018      	movs	r0, r3
 8022796:	f7ff fc08 	bl	8021faa <xtime>
 802279a:	0003      	movs	r3, r0
 802279c:	0018      	movs	r0, r3
 802279e:	f7ff fc04 	bl	8021faa <xtime>
 80227a2:	0003      	movs	r3, r0
 80227a4:	406b      	eors	r3, r5
 80227a6:	b2db      	uxtb	r3, r3
 80227a8:	4063      	eors	r3, r4
 80227aa:	b2d9      	uxtb	r1, r3
 80227ac:	687a      	ldr	r2, [r7, #4]
 80227ae:	68fb      	ldr	r3, [r7, #12]
 80227b0:	009b      	lsls	r3, r3, #2
 80227b2:	18d3      	adds	r3, r2, r3
 80227b4:	3302      	adds	r3, #2
 80227b6:	1c0a      	adds	r2, r1, #0
 80227b8:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80227ba:	19bb      	adds	r3, r7, r6
 80227bc:	781b      	ldrb	r3, [r3, #0]
 80227be:	0018      	movs	r0, r3
 80227c0:	f7ff fbf3 	bl	8021faa <xtime>
 80227c4:	0003      	movs	r3, r0
 80227c6:	0018      	movs	r0, r3
 80227c8:	f7ff fbef 	bl	8021faa <xtime>
 80227cc:	19bb      	adds	r3, r7, r6
 80227ce:	781b      	ldrb	r3, [r3, #0]
 80227d0:	0018      	movs	r0, r3
 80227d2:	f7ff fbea 	bl	8021faa <xtime>
 80227d6:	0003      	movs	r3, r0
 80227d8:	0018      	movs	r0, r3
 80227da:	f7ff fbe6 	bl	8021faa <xtime>
 80227de:	0003      	movs	r3, r0
 80227e0:	0018      	movs	r0, r3
 80227e2:	f7ff fbe2 	bl	8021faa <xtime>
 80227e6:	0003      	movs	r3, r0
 80227e8:	0018      	movs	r0, r3
 80227ea:	f7ff fbde 	bl	8021faa <xtime>
 80227ee:	250a      	movs	r5, #10
 80227f0:	197b      	adds	r3, r7, r5
 80227f2:	781b      	ldrb	r3, [r3, #0]
 80227f4:	0018      	movs	r0, r3
 80227f6:	f7ff fbd8 	bl	8021faa <xtime>
 80227fa:	197b      	adds	r3, r7, r5
 80227fc:	781b      	ldrb	r3, [r3, #0]
 80227fe:	0018      	movs	r0, r3
 8022800:	f7ff fbd3 	bl	8021faa <xtime>
 8022804:	0003      	movs	r3, r0
 8022806:	0018      	movs	r0, r3
 8022808:	f7ff fbcf 	bl	8021faa <xtime>
 802280c:	0003      	movs	r3, r0
 802280e:	0018      	movs	r0, r3
 8022810:	f7ff fbcb 	bl	8021faa <xtime>
 8022814:	0003      	movs	r3, r0
 8022816:	0018      	movs	r0, r3
 8022818:	f7ff fbc7 	bl	8021faa <xtime>
 802281c:	2109      	movs	r1, #9
 802281e:	000c      	movs	r4, r1
 8022820:	187b      	adds	r3, r7, r1
 8022822:	781b      	ldrb	r3, [r3, #0]
 8022824:	0018      	movs	r0, r3
 8022826:	f7ff fbc0 	bl	8021faa <xtime>
 802282a:	193b      	adds	r3, r7, r4
 802282c:	781b      	ldrb	r3, [r3, #0]
 802282e:	0018      	movs	r0, r3
 8022830:	f7ff fbbb 	bl	8021faa <xtime>
 8022834:	0003      	movs	r3, r0
 8022836:	0018      	movs	r0, r3
 8022838:	f7ff fbb7 	bl	8021faa <xtime>
 802283c:	193b      	adds	r3, r7, r4
 802283e:	781b      	ldrb	r3, [r3, #0]
 8022840:	0018      	movs	r0, r3
 8022842:	f7ff fbb2 	bl	8021faa <xtime>
 8022846:	0003      	movs	r3, r0
 8022848:	0018      	movs	r0, r3
 802284a:	f7ff fbae 	bl	8021faa <xtime>
 802284e:	0003      	movs	r3, r0
 8022850:	0018      	movs	r0, r3
 8022852:	f7ff fbaa 	bl	8021faa <xtime>
 8022856:	0003      	movs	r3, r0
 8022858:	0018      	movs	r0, r3
 802285a:	f7ff fba6 	bl	8021faa <xtime>
 802285e:	2308      	movs	r3, #8
 8022860:	18fb      	adds	r3, r7, r3
 8022862:	781b      	ldrb	r3, [r3, #0]
 8022864:	0018      	movs	r0, r3
 8022866:	f7ff fba0 	bl	8021faa <xtime>
 802286a:	0003      	movs	r3, r0
 802286c:	0018      	movs	r0, r3
 802286e:	f7ff fb9c 	bl	8021faa <xtime>
 8022872:	0003      	movs	r3, r0
 8022874:	0018      	movs	r0, r3
 8022876:	f7ff fb98 	bl	8021faa <xtime>
 802287a:	0003      	movs	r3, r0
 802287c:	0018      	movs	r0, r3
 802287e:	f7ff fb94 	bl	8021faa <xtime>
 8022882:	19bb      	adds	r3, r7, r6
 8022884:	781b      	ldrb	r3, [r3, #0]
 8022886:	0018      	movs	r0, r3
 8022888:	f7ff fb8f 	bl	8021faa <xtime>
 802288c:	0003      	movs	r3, r0
 802288e:	001a      	movs	r2, r3
 8022890:	19bb      	adds	r3, r7, r6
 8022892:	781b      	ldrb	r3, [r3, #0]
 8022894:	4053      	eors	r3, r2
 8022896:	b2dc      	uxtb	r4, r3
 8022898:	19bb      	adds	r3, r7, r6
 802289a:	781b      	ldrb	r3, [r3, #0]
 802289c:	0018      	movs	r0, r3
 802289e:	f7ff fb84 	bl	8021faa <xtime>
 80228a2:	0003      	movs	r3, r0
 80228a4:	0018      	movs	r0, r3
 80228a6:	f7ff fb80 	bl	8021faa <xtime>
 80228aa:	0003      	movs	r3, r0
 80228ac:	0018      	movs	r0, r3
 80228ae:	f7ff fb7c 	bl	8021faa <xtime>
 80228b2:	0003      	movs	r3, r0
 80228b4:	4063      	eors	r3, r4
 80228b6:	b2dc      	uxtb	r4, r3
 80228b8:	197b      	adds	r3, r7, r5
 80228ba:	781b      	ldrb	r3, [r3, #0]
 80228bc:	0018      	movs	r0, r3
 80228be:	f7ff fb74 	bl	8021faa <xtime>
 80228c2:	0003      	movs	r3, r0
 80228c4:	0018      	movs	r0, r3
 80228c6:	f7ff fb70 	bl	8021faa <xtime>
 80228ca:	0003      	movs	r3, r0
 80228cc:	001a      	movs	r2, r3
 80228ce:	0029      	movs	r1, r5
 80228d0:	197b      	adds	r3, r7, r5
 80228d2:	781b      	ldrb	r3, [r3, #0]
 80228d4:	4053      	eors	r3, r2
 80228d6:	b2dd      	uxtb	r5, r3
 80228d8:	187b      	adds	r3, r7, r1
 80228da:	781b      	ldrb	r3, [r3, #0]
 80228dc:	0018      	movs	r0, r3
 80228de:	f7ff fb64 	bl	8021faa <xtime>
 80228e2:	0003      	movs	r3, r0
 80228e4:	0018      	movs	r0, r3
 80228e6:	f7ff fb60 	bl	8021faa <xtime>
 80228ea:	0003      	movs	r3, r0
 80228ec:	0018      	movs	r0, r3
 80228ee:	f7ff fb5c 	bl	8021faa <xtime>
 80228f2:	0003      	movs	r3, r0
 80228f4:	406b      	eors	r3, r5
 80228f6:	b2db      	uxtb	r3, r3
 80228f8:	4063      	eors	r3, r4
 80228fa:	b2dc      	uxtb	r4, r3
 80228fc:	2509      	movs	r5, #9
 80228fe:	197b      	adds	r3, r7, r5
 8022900:	781b      	ldrb	r3, [r3, #0]
 8022902:	0018      	movs	r0, r3
 8022904:	f7ff fb51 	bl	8021faa <xtime>
 8022908:	0003      	movs	r3, r0
 802290a:	0018      	movs	r0, r3
 802290c:	f7ff fb4d 	bl	8021faa <xtime>
 8022910:	0003      	movs	r3, r0
 8022912:	0018      	movs	r0, r3
 8022914:	f7ff fb49 	bl	8021faa <xtime>
 8022918:	0003      	movs	r3, r0
 802291a:	001a      	movs	r2, r3
 802291c:	197b      	adds	r3, r7, r5
 802291e:	781b      	ldrb	r3, [r3, #0]
 8022920:	4053      	eors	r3, r2
 8022922:	b2db      	uxtb	r3, r3
 8022924:	4063      	eors	r3, r4
 8022926:	b2dc      	uxtb	r4, r3
 8022928:	2608      	movs	r6, #8
 802292a:	19bb      	adds	r3, r7, r6
 802292c:	781b      	ldrb	r3, [r3, #0]
 802292e:	0018      	movs	r0, r3
 8022930:	f7ff fb3b 	bl	8021faa <xtime>
 8022934:	0003      	movs	r3, r0
 8022936:	001d      	movs	r5, r3
 8022938:	19bb      	adds	r3, r7, r6
 802293a:	781b      	ldrb	r3, [r3, #0]
 802293c:	0018      	movs	r0, r3
 802293e:	f7ff fb34 	bl	8021faa <xtime>
 8022942:	0003      	movs	r3, r0
 8022944:	0018      	movs	r0, r3
 8022946:	f7ff fb30 	bl	8021faa <xtime>
 802294a:	0003      	movs	r3, r0
 802294c:	406b      	eors	r3, r5
 802294e:	b2dd      	uxtb	r5, r3
 8022950:	19bb      	adds	r3, r7, r6
 8022952:	781b      	ldrb	r3, [r3, #0]
 8022954:	0018      	movs	r0, r3
 8022956:	f7ff fb28 	bl	8021faa <xtime>
 802295a:	0003      	movs	r3, r0
 802295c:	0018      	movs	r0, r3
 802295e:	f7ff fb24 	bl	8021faa <xtime>
 8022962:	0003      	movs	r3, r0
 8022964:	0018      	movs	r0, r3
 8022966:	f7ff fb20 	bl	8021faa <xtime>
 802296a:	0003      	movs	r3, r0
 802296c:	406b      	eors	r3, r5
 802296e:	b2db      	uxtb	r3, r3
 8022970:	4063      	eors	r3, r4
 8022972:	b2d9      	uxtb	r1, r3
 8022974:	687a      	ldr	r2, [r7, #4]
 8022976:	68fb      	ldr	r3, [r7, #12]
 8022978:	009b      	lsls	r3, r3, #2
 802297a:	18d3      	adds	r3, r2, r3
 802297c:	3303      	adds	r3, #3
 802297e:	1c0a      	adds	r2, r1, #0
 8022980:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	3301      	adds	r3, #1
 8022986:	60fb      	str	r3, [r7, #12]
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	2b03      	cmp	r3, #3
 802298c:	dc00      	bgt.n	8022990 <InvMixColumns+0x79e>
 802298e:	e437      	b.n	8022200 <InvMixColumns+0xe>
  }
}
 8022990:	46c0      	nop			; (mov r8, r8)
 8022992:	46bd      	mov	sp, r7
 8022994:	b005      	add	sp, #20
 8022996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022998 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8022998:	b5b0      	push	{r4, r5, r7, lr}
 802299a:	b084      	sub	sp, #16
 802299c:	af00      	add	r7, sp, #0
 802299e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80229a0:	230f      	movs	r3, #15
 80229a2:	18fb      	adds	r3, r7, r3
 80229a4:	2200      	movs	r2, #0
 80229a6:	701a      	strb	r2, [r3, #0]
 80229a8:	e02a      	b.n	8022a00 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 80229aa:	230e      	movs	r3, #14
 80229ac:	18fb      	adds	r3, r7, r3
 80229ae:	2200      	movs	r2, #0
 80229b0:	701a      	strb	r2, [r3, #0]
 80229b2:	e01a      	b.n	80229ea <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 80229b4:	240e      	movs	r4, #14
 80229b6:	193b      	adds	r3, r7, r4
 80229b8:	781a      	ldrb	r2, [r3, #0]
 80229ba:	250f      	movs	r5, #15
 80229bc:	197b      	adds	r3, r7, r5
 80229be:	781b      	ldrb	r3, [r3, #0]
 80229c0:	6879      	ldr	r1, [r7, #4]
 80229c2:	0092      	lsls	r2, r2, #2
 80229c4:	188a      	adds	r2, r1, r2
 80229c6:	5cd3      	ldrb	r3, [r2, r3]
 80229c8:	0018      	movs	r0, r3
 80229ca:	193b      	adds	r3, r7, r4
 80229cc:	781a      	ldrb	r2, [r3, #0]
 80229ce:	197b      	adds	r3, r7, r5
 80229d0:	781b      	ldrb	r3, [r3, #0]
 80229d2:	4910      	ldr	r1, [pc, #64]	; (8022a14 <InvSubBytes+0x7c>)
 80229d4:	5c08      	ldrb	r0, [r1, r0]
 80229d6:	6879      	ldr	r1, [r7, #4]
 80229d8:	0092      	lsls	r2, r2, #2
 80229da:	188a      	adds	r2, r1, r2
 80229dc:	1c01      	adds	r1, r0, #0
 80229de:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 80229e0:	193b      	adds	r3, r7, r4
 80229e2:	193a      	adds	r2, r7, r4
 80229e4:	7812      	ldrb	r2, [r2, #0]
 80229e6:	3201      	adds	r2, #1
 80229e8:	701a      	strb	r2, [r3, #0]
 80229ea:	230e      	movs	r3, #14
 80229ec:	18fb      	adds	r3, r7, r3
 80229ee:	781b      	ldrb	r3, [r3, #0]
 80229f0:	2b03      	cmp	r3, #3
 80229f2:	d9df      	bls.n	80229b4 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 80229f4:	220f      	movs	r2, #15
 80229f6:	18bb      	adds	r3, r7, r2
 80229f8:	18ba      	adds	r2, r7, r2
 80229fa:	7812      	ldrb	r2, [r2, #0]
 80229fc:	3201      	adds	r2, #1
 80229fe:	701a      	strb	r2, [r3, #0]
 8022a00:	230f      	movs	r3, #15
 8022a02:	18fb      	adds	r3, r7, r3
 8022a04:	781b      	ldrb	r3, [r3, #0]
 8022a06:	2b03      	cmp	r3, #3
 8022a08:	d9cf      	bls.n	80229aa <InvSubBytes+0x12>
    }
  }
}
 8022a0a:	46c0      	nop			; (mov r8, r8)
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	b004      	add	sp, #16
 8022a10:	bdb0      	pop	{r4, r5, r7, pc}
 8022a12:	46c0      	nop			; (mov r8, r8)
 8022a14:	08029998 	.word	0x08029998

08022a18 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8022a18:	b580      	push	{r7, lr}
 8022a1a:	b084      	sub	sp, #16
 8022a1c:	af00      	add	r7, sp, #0
 8022a1e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8022a20:	210f      	movs	r1, #15
 8022a22:	187b      	adds	r3, r7, r1
 8022a24:	687a      	ldr	r2, [r7, #4]
 8022a26:	7b52      	ldrb	r2, [r2, #13]
 8022a28:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	7a5a      	ldrb	r2, [r3, #9]
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	795a      	ldrb	r2, [r3, #5]
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	785a      	ldrb	r2, [r3, #1]
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	187a      	adds	r2, r7, r1
 8022a46:	7812      	ldrb	r2, [r2, #0]
 8022a48:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8022a4a:	187b      	adds	r3, r7, r1
 8022a4c:	687a      	ldr	r2, [r7, #4]
 8022a4e:	7892      	ldrb	r2, [r2, #2]
 8022a50:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	7a9a      	ldrb	r2, [r3, #10]
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	187a      	adds	r2, r7, r1
 8022a5e:	7812      	ldrb	r2, [r2, #0]
 8022a60:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8022a62:	187b      	adds	r3, r7, r1
 8022a64:	687a      	ldr	r2, [r7, #4]
 8022a66:	7992      	ldrb	r2, [r2, #6]
 8022a68:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	7b9a      	ldrb	r2, [r3, #14]
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	187a      	adds	r2, r7, r1
 8022a76:	7812      	ldrb	r2, [r2, #0]
 8022a78:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8022a7a:	187b      	adds	r3, r7, r1
 8022a7c:	687a      	ldr	r2, [r7, #4]
 8022a7e:	78d2      	ldrb	r2, [r2, #3]
 8022a80:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	79da      	ldrb	r2, [r3, #7]
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	7ada      	ldrb	r2, [r3, #11]
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8022a92:	687b      	ldr	r3, [r7, #4]
 8022a94:	7bda      	ldrb	r2, [r3, #15]
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	187a      	adds	r2, r7, r1
 8022a9e:	7812      	ldrb	r2, [r2, #0]
 8022aa0:	73da      	strb	r2, [r3, #15]
}
 8022aa2:	46c0      	nop			; (mov r8, r8)
 8022aa4:	46bd      	mov	sp, r7
 8022aa6:	b004      	add	sp, #16
 8022aa8:	bd80      	pop	{r7, pc}

08022aaa <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 8022aaa:	b590      	push	{r4, r7, lr}
 8022aac:	b085      	sub	sp, #20
 8022aae:	af00      	add	r7, sp, #0
 8022ab0:	6078      	str	r0, [r7, #4]
 8022ab2:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8022ab4:	240f      	movs	r4, #15
 8022ab6:	193b      	adds	r3, r7, r4
 8022ab8:	2200      	movs	r2, #0
 8022aba:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8022abc:	683a      	ldr	r2, [r7, #0]
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	0019      	movs	r1, r3
 8022ac2:	2000      	movs	r0, #0
 8022ac4:	f7ff f997 	bl	8021df6 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 8022ac8:	193b      	adds	r3, r7, r4
 8022aca:	2201      	movs	r2, #1
 8022acc:	701a      	strb	r2, [r3, #0]
 8022ace:	e018      	b.n	8022b02 <Cipher+0x58>
  {
    SubBytes(state);
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	0018      	movs	r0, r3
 8022ad4:	f7ff f9e0 	bl	8021e98 <SubBytes>
    ShiftRows(state);
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	0018      	movs	r0, r3
 8022adc:	f7ff fa1c 	bl	8021f18 <ShiftRows>
    MixColumns(state);
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	0018      	movs	r0, r3
 8022ae4:	f7ff fa81 	bl	8021fea <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8022ae8:	683a      	ldr	r2, [r7, #0]
 8022aea:	6879      	ldr	r1, [r7, #4]
 8022aec:	240f      	movs	r4, #15
 8022aee:	193b      	adds	r3, r7, r4
 8022af0:	781b      	ldrb	r3, [r3, #0]
 8022af2:	0018      	movs	r0, r3
 8022af4:	f7ff f97f 	bl	8021df6 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8022af8:	193b      	adds	r3, r7, r4
 8022afa:	193a      	adds	r2, r7, r4
 8022afc:	7812      	ldrb	r2, [r2, #0]
 8022afe:	3201      	adds	r2, #1
 8022b00:	701a      	strb	r2, [r3, #0]
 8022b02:	230f      	movs	r3, #15
 8022b04:	18fb      	adds	r3, r7, r3
 8022b06:	781b      	ldrb	r3, [r3, #0]
 8022b08:	2b09      	cmp	r3, #9
 8022b0a:	d9e1      	bls.n	8022ad0 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	0018      	movs	r0, r3
 8022b10:	f7ff f9c2 	bl	8021e98 <SubBytes>
  ShiftRows(state);
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	0018      	movs	r0, r3
 8022b18:	f7ff f9fe 	bl	8021f18 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 8022b1c:	683a      	ldr	r2, [r7, #0]
 8022b1e:	687b      	ldr	r3, [r7, #4]
 8022b20:	0019      	movs	r1, r3
 8022b22:	200a      	movs	r0, #10
 8022b24:	f7ff f967 	bl	8021df6 <AddRoundKey>
}
 8022b28:	46c0      	nop			; (mov r8, r8)
 8022b2a:	46bd      	mov	sp, r7
 8022b2c:	b005      	add	sp, #20
 8022b2e:	bd90      	pop	{r4, r7, pc}

08022b30 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 8022b30:	b590      	push	{r4, r7, lr}
 8022b32:	b085      	sub	sp, #20
 8022b34:	af00      	add	r7, sp, #0
 8022b36:	6078      	str	r0, [r7, #4]
 8022b38:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8022b3a:	240f      	movs	r4, #15
 8022b3c:	193b      	adds	r3, r7, r4
 8022b3e:	2200      	movs	r2, #0
 8022b40:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8022b42:	683a      	ldr	r2, [r7, #0]
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	0019      	movs	r1, r3
 8022b48:	200a      	movs	r0, #10
 8022b4a:	f7ff f954 	bl	8021df6 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8022b4e:	193b      	adds	r3, r7, r4
 8022b50:	2209      	movs	r2, #9
 8022b52:	701a      	strb	r2, [r3, #0]
 8022b54:	e018      	b.n	8022b88 <InvCipher+0x58>
  {
    InvShiftRows(state);
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	0018      	movs	r0, r3
 8022b5a:	f7ff ff5d 	bl	8022a18 <InvShiftRows>
    InvSubBytes(state);
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	0018      	movs	r0, r3
 8022b62:	f7ff ff19 	bl	8022998 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8022b66:	683a      	ldr	r2, [r7, #0]
 8022b68:	6879      	ldr	r1, [r7, #4]
 8022b6a:	240f      	movs	r4, #15
 8022b6c:	193b      	adds	r3, r7, r4
 8022b6e:	781b      	ldrb	r3, [r3, #0]
 8022b70:	0018      	movs	r0, r3
 8022b72:	f7ff f940 	bl	8021df6 <AddRoundKey>
    InvMixColumns(state);
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	0018      	movs	r0, r3
 8022b7a:	f7ff fb3a 	bl	80221f2 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8022b7e:	193b      	adds	r3, r7, r4
 8022b80:	193a      	adds	r2, r7, r4
 8022b82:	7812      	ldrb	r2, [r2, #0]
 8022b84:	3a01      	subs	r2, #1
 8022b86:	701a      	strb	r2, [r3, #0]
 8022b88:	230f      	movs	r3, #15
 8022b8a:	18fb      	adds	r3, r7, r3
 8022b8c:	781b      	ldrb	r3, [r3, #0]
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	d1e1      	bne.n	8022b56 <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	0018      	movs	r0, r3
 8022b96:	f7ff ff3f 	bl	8022a18 <InvShiftRows>
  InvSubBytes(state);
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	0018      	movs	r0, r3
 8022b9e:	f7ff fefb 	bl	8022998 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 8022ba2:	683a      	ldr	r2, [r7, #0]
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	0019      	movs	r1, r3
 8022ba8:	2000      	movs	r0, #0
 8022baa:	f7ff f924 	bl	8021df6 <AddRoundKey>
}
 8022bae:	46c0      	nop			; (mov r8, r8)
 8022bb0:	46bd      	mov	sp, r7
 8022bb2:	b005      	add	sp, #20
 8022bb4:	bd90      	pop	{r4, r7, pc}

08022bb6 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 8022bb6:	b590      	push	{r4, r7, lr}
 8022bb8:	b085      	sub	sp, #20
 8022bba:	af00      	add	r7, sp, #0
 8022bbc:	6078      	str	r0, [r7, #4]
 8022bbe:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8022bc0:	230f      	movs	r3, #15
 8022bc2:	18fb      	adds	r3, r7, r3
 8022bc4:	2200      	movs	r2, #0
 8022bc6:	701a      	strb	r2, [r3, #0]
 8022bc8:	e016      	b.n	8022bf8 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 8022bca:	240f      	movs	r4, #15
 8022bcc:	193b      	adds	r3, r7, r4
 8022bce:	781b      	ldrb	r3, [r3, #0]
 8022bd0:	687a      	ldr	r2, [r7, #4]
 8022bd2:	18d3      	adds	r3, r2, r3
 8022bd4:	7819      	ldrb	r1, [r3, #0]
 8022bd6:	193b      	adds	r3, r7, r4
 8022bd8:	781b      	ldrb	r3, [r3, #0]
 8022bda:	683a      	ldr	r2, [r7, #0]
 8022bdc:	18d3      	adds	r3, r2, r3
 8022bde:	781a      	ldrb	r2, [r3, #0]
 8022be0:	193b      	adds	r3, r7, r4
 8022be2:	781b      	ldrb	r3, [r3, #0]
 8022be4:	6878      	ldr	r0, [r7, #4]
 8022be6:	18c3      	adds	r3, r0, r3
 8022be8:	404a      	eors	r2, r1
 8022bea:	b2d2      	uxtb	r2, r2
 8022bec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8022bee:	193b      	adds	r3, r7, r4
 8022bf0:	193a      	adds	r2, r7, r4
 8022bf2:	7812      	ldrb	r2, [r2, #0]
 8022bf4:	3201      	adds	r2, #1
 8022bf6:	701a      	strb	r2, [r3, #0]
 8022bf8:	230f      	movs	r3, #15
 8022bfa:	18fb      	adds	r3, r7, r3
 8022bfc:	781b      	ldrb	r3, [r3, #0]
 8022bfe:	2b0f      	cmp	r3, #15
 8022c00:	d9e3      	bls.n	8022bca <XorWithIv+0x14>
  }
}
 8022c02:	46c0      	nop			; (mov r8, r8)
 8022c04:	46bd      	mov	sp, r7
 8022c06:	b005      	add	sp, #20
 8022c08:	bd90      	pop	{r4, r7, pc}

08022c0a <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 8022c0a:	b580      	push	{r7, lr}
 8022c0c:	b086      	sub	sp, #24
 8022c0e:	af00      	add	r7, sp, #0
 8022c10:	60f8      	str	r0, [r7, #12]
 8022c12:	60b9      	str	r1, [r7, #8]
 8022c14:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 8022c16:	68fb      	ldr	r3, [r7, #12]
 8022c18:	33b0      	adds	r3, #176	; 0xb0
 8022c1a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022c1c:	2300      	movs	r3, #0
 8022c1e:	617b      	str	r3, [r7, #20]
 8022c20:	e013      	b.n	8022c4a <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8022c22:	693a      	ldr	r2, [r7, #16]
 8022c24:	68bb      	ldr	r3, [r7, #8]
 8022c26:	0011      	movs	r1, r2
 8022c28:	0018      	movs	r0, r3
 8022c2a:	f7ff ffc4 	bl	8022bb6 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 8022c2e:	68fa      	ldr	r2, [r7, #12]
 8022c30:	68bb      	ldr	r3, [r7, #8]
 8022c32:	0011      	movs	r1, r2
 8022c34:	0018      	movs	r0, r3
 8022c36:	f7ff ff38 	bl	8022aaa <Cipher>
    Iv = buf;
 8022c3a:	68bb      	ldr	r3, [r7, #8]
 8022c3c:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 8022c3e:	68bb      	ldr	r3, [r7, #8]
 8022c40:	3310      	adds	r3, #16
 8022c42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022c44:	697b      	ldr	r3, [r7, #20]
 8022c46:	3310      	adds	r3, #16
 8022c48:	617b      	str	r3, [r7, #20]
 8022c4a:	697a      	ldr	r2, [r7, #20]
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	429a      	cmp	r2, r3
 8022c50:	d3e7      	bcc.n	8022c22 <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8022c52:	68fb      	ldr	r3, [r7, #12]
 8022c54:	33b0      	adds	r3, #176	; 0xb0
 8022c56:	6939      	ldr	r1, [r7, #16]
 8022c58:	2210      	movs	r2, #16
 8022c5a:	0018      	movs	r0, r3
 8022c5c:	f003 f938 	bl	8025ed0 <memcpy>
}
 8022c60:	46c0      	nop			; (mov r8, r8)
 8022c62:	46bd      	mov	sp, r7
 8022c64:	b006      	add	sp, #24
 8022c66:	bd80      	pop	{r7, pc}

08022c68 <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 8022c68:	b590      	push	{r4, r7, lr}
 8022c6a:	b08b      	sub	sp, #44	; 0x2c
 8022c6c:	af00      	add	r7, sp, #0
 8022c6e:	60f8      	str	r0, [r7, #12]
 8022c70:	60b9      	str	r1, [r7, #8]
 8022c72:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022c74:	2300      	movs	r3, #0
 8022c76:	627b      	str	r3, [r7, #36]	; 0x24
 8022c78:	e026      	b.n	8022cc8 <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8022c7a:	2414      	movs	r4, #20
 8022c7c:	193a      	adds	r2, r7, r4
 8022c7e:	68bb      	ldr	r3, [r7, #8]
 8022c80:	0010      	movs	r0, r2
 8022c82:	0019      	movs	r1, r3
 8022c84:	2310      	movs	r3, #16
 8022c86:	001a      	movs	r2, r3
 8022c88:	f003 f922 	bl	8025ed0 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 8022c8c:	68fa      	ldr	r2, [r7, #12]
 8022c8e:	68bb      	ldr	r3, [r7, #8]
 8022c90:	0011      	movs	r1, r2
 8022c92:	0018      	movs	r0, r3
 8022c94:	f7ff ff4c 	bl	8022b30 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8022c98:	68fb      	ldr	r3, [r7, #12]
 8022c9a:	33b0      	adds	r3, #176	; 0xb0
 8022c9c:	001a      	movs	r2, r3
 8022c9e:	68bb      	ldr	r3, [r7, #8]
 8022ca0:	0011      	movs	r1, r2
 8022ca2:	0018      	movs	r0, r3
 8022ca4:	f7ff ff87 	bl	8022bb6 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8022ca8:	68fb      	ldr	r3, [r7, #12]
 8022caa:	33b0      	adds	r3, #176	; 0xb0
 8022cac:	001a      	movs	r2, r3
 8022cae:	193b      	adds	r3, r7, r4
 8022cb0:	0010      	movs	r0, r2
 8022cb2:	0019      	movs	r1, r3
 8022cb4:	2310      	movs	r3, #16
 8022cb6:	001a      	movs	r2, r3
 8022cb8:	f003 f90a 	bl	8025ed0 <memcpy>
    buf += AES_BLOCKLEN;
 8022cbc:	68bb      	ldr	r3, [r7, #8]
 8022cbe:	3310      	adds	r3, #16
 8022cc0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022cc4:	3310      	adds	r3, #16
 8022cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8022cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	429a      	cmp	r2, r3
 8022cce:	d3d4      	bcc.n	8022c7a <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 8022cd0:	46c0      	nop			; (mov r8, r8)
 8022cd2:	46bd      	mov	sp, r7
 8022cd4:	b00b      	add	sp, #44	; 0x2c
 8022cd6:	bd90      	pop	{r4, r7, pc}

08022cd8 <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 8022cd8:	b580      	push	{r7, lr}
 8022cda:	b084      	sub	sp, #16
 8022cdc:	af00      	add	r7, sp, #0
 8022cde:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8022ce0:	2300      	movs	r3, #0
 8022ce2:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022ce4:	230c      	movs	r3, #12
 8022ce6:	18fb      	adds	r3, r7, r3
 8022ce8:	0018      	movs	r0, r3
 8022cea:	f7fe f8d6 	bl	8020e9a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8022cee:	68f9      	ldr	r1, [r7, #12]
 8022cf0:	687a      	ldr	r2, [r7, #4]
 8022cf2:	2308      	movs	r3, #8
 8022cf4:	2000      	movs	r0, #0
 8022cf6:	f002 fbc1 	bl	802547c <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	881b      	ldrh	r3, [r3, #0]
 8022cfe:	4a05      	ldr	r2, [pc, #20]	; (8022d14 <_itsdk_error_readHeader+0x3c>)
 8022d00:	4293      	cmp	r3, r2
 8022d02:	d001      	beq.n	8022d08 <_itsdk_error_readHeader+0x30>
 8022d04:	2301      	movs	r3, #1
 8022d06:	e000      	b.n	8022d0a <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 8022d08:	2300      	movs	r3, #0
}
 8022d0a:	0018      	movs	r0, r3
 8022d0c:	46bd      	mov	sp, r7
 8022d0e:	b004      	add	sp, #16
 8022d10:	bd80      	pop	{r7, pc}
 8022d12:	46c0      	nop			; (mov r8, r8)
 8022d14:	0000ae73 	.word	0x0000ae73

08022d18 <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 8022d18:	b580      	push	{r7, lr}
 8022d1a:	b084      	sub	sp, #16
 8022d1c:	af00      	add	r7, sp, #0
 8022d1e:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8022d20:	2300      	movs	r3, #0
 8022d22:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022d24:	230c      	movs	r3, #12
 8022d26:	18fb      	adds	r3, r7, r3
 8022d28:	0018      	movs	r0, r3
 8022d2a:	f7fe f8b6 	bl	8020e9a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8022d2e:	68f9      	ldr	r1, [r7, #12]
 8022d30:	687a      	ldr	r2, [r7, #4]
 8022d32:	2308      	movs	r3, #8
 8022d34:	2000      	movs	r0, #0
 8022d36:	f002 fafd 	bl	8025334 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 8022d3a:	2300      	movs	r3, #0
}
 8022d3c:	0018      	movs	r0, r3
 8022d3e:	46bd      	mov	sp, r7
 8022d40:	b004      	add	sp, #16
 8022d42:	bd80      	pop	{r7, pc}

08022d44 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 8022d44:	b580      	push	{r7, lr}
 8022d46:	b084      	sub	sp, #16
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	0002      	movs	r2, r0
 8022d4c:	6039      	str	r1, [r7, #0]
 8022d4e:	1dbb      	adds	r3, r7, #6
 8022d50:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8022d52:	2300      	movs	r3, #0
 8022d54:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022d56:	230c      	movs	r3, #12
 8022d58:	18fb      	adds	r3, r7, r3
 8022d5a:	0018      	movs	r0, r3
 8022d5c:	f7fe f89d 	bl	8020e9a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8022d60:	1dbb      	adds	r3, r7, #6
 8022d62:	881b      	ldrh	r3, [r3, #0]
 8022d64:	00da      	lsls	r2, r3, #3
 8022d66:	68fb      	ldr	r3, [r7, #12]
 8022d68:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 8022d6a:	3308      	adds	r3, #8
 8022d6c:	0019      	movs	r1, r3
 8022d6e:	683a      	ldr	r2, [r7, #0]
 8022d70:	2308      	movs	r3, #8
 8022d72:	2000      	movs	r0, #0
 8022d74:	f002 fade 	bl	8025334 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8022d78:	2300      	movs	r3, #0
}
 8022d7a:	0018      	movs	r0, r3
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	b004      	add	sp, #16
 8022d80:	bd80      	pop	{r7, pc}

08022d82 <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 8022d82:	b580      	push	{r7, lr}
 8022d84:	b084      	sub	sp, #16
 8022d86:	af00      	add	r7, sp, #0
 8022d88:	0002      	movs	r2, r0
 8022d8a:	6039      	str	r1, [r7, #0]
 8022d8c:	1dbb      	adds	r3, r7, #6
 8022d8e:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8022d90:	2300      	movs	r3, #0
 8022d92:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022d94:	230c      	movs	r3, #12
 8022d96:	18fb      	adds	r3, r7, r3
 8022d98:	0018      	movs	r0, r3
 8022d9a:	f7fe f87e 	bl	8020e9a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8022d9e:	1dbb      	adds	r3, r7, #6
 8022da0:	881b      	ldrh	r3, [r3, #0]
 8022da2:	00da      	lsls	r2, r3, #3
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 8022da8:	3308      	adds	r3, #8
 8022daa:	0019      	movs	r1, r3
 8022dac:	683a      	ldr	r2, [r7, #0]
 8022dae:	2308      	movs	r3, #8
 8022db0:	2000      	movs	r0, #0
 8022db2:	f002 fb63 	bl	802547c <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8022db6:	2300      	movs	r3, #0
}
 8022db8:	0018      	movs	r0, r3
 8022dba:	46bd      	mov	sp, r7
 8022dbc:	b004      	add	sp, #16
 8022dbe:	bd80      	pop	{r7, pc}

08022dc0 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 8022dc0:	b580      	push	{r7, lr}
 8022dc2:	b082      	sub	sp, #8
 8022dc4:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 8022dc6:	003b      	movs	r3, r7
 8022dc8:	0018      	movs	r0, r3
 8022dca:	f7ff ff85 	bl	8022cd8 <_itsdk_error_readHeader>
 8022dce:	0003      	movs	r3, r0
 8022dd0:	2b01      	cmp	r3, #1
 8022dd2:	d10c      	bne.n	8022dee <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 8022dd4:	003b      	movs	r3, r7
 8022dd6:	4a0f      	ldr	r2, [pc, #60]	; (8022e14 <itsdk_error_setup+0x54>)
 8022dd8:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 8022dda:	003b      	movs	r3, r7
 8022ddc:	2200      	movs	r2, #0
 8022dde:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 8022de0:	003b      	movs	r3, r7
 8022de2:	2200      	movs	r2, #0
 8022de4:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 8022de6:	003b      	movs	r3, r7
 8022de8:	0018      	movs	r0, r3
 8022dea:	f7ff ff95 	bl	8022d18 <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 8022dee:	4b0a      	ldr	r3, [pc, #40]	; (8022e18 <itsdk_error_setup+0x58>)
 8022df0:	4a0a      	ldr	r2, [pc, #40]	; (8022e1c <itsdk_error_setup+0x5c>)
 8022df2:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 8022df4:	4b08      	ldr	r3, [pc, #32]	; (8022e18 <itsdk_error_setup+0x58>)
 8022df6:	2200      	movs	r2, #0
 8022df8:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 8022dfa:	4b07      	ldr	r3, [pc, #28]	; (8022e18 <itsdk_error_setup+0x58>)
 8022dfc:	2200      	movs	r2, #0
 8022dfe:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 8022e00:	4b05      	ldr	r3, [pc, #20]	; (8022e18 <itsdk_error_setup+0x58>)
 8022e02:	0018      	movs	r0, r3
 8022e04:	f7fd f96a 	bl	80200dc <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 8022e08:	2300      	movs	r3, #0
}
 8022e0a:	0018      	movs	r0, r3
 8022e0c:	46bd      	mov	sp, r7
 8022e0e:	b002      	add	sp, #8
 8022e10:	bd80      	pop	{r7, pc}
 8022e12:	46c0      	nop			; (mov r8, r8)
 8022e14:	ffffae73 	.word	0xffffae73
 8022e18:	20001ee4 	.word	0x20001ee4
 8022e1c:	08023085 	.word	0x08023085

08022e20 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 8022e20:	b590      	push	{r4, r7, lr}
 8022e22:	b08b      	sub	sp, #44	; 0x2c
 8022e24:	af00      	add	r7, sp, #0
 8022e26:	6078      	str	r0, [r7, #4]
 8022e28:	000a      	movs	r2, r1
 8022e2a:	1cbb      	adds	r3, r7, #2
 8022e2c:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 8022e2e:	687a      	ldr	r2, [r7, #4]
 8022e30:	2380      	movs	r3, #128	; 0x80
 8022e32:	055b      	lsls	r3, r3, #21
 8022e34:	4013      	ands	r3, r2
 8022e36:	d008      	beq.n	8022e4a <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 8022e38:	1cbb      	adds	r3, r7, #2
 8022e3a:	881b      	ldrh	r3, [r3, #0]
 8022e3c:	031b      	lsls	r3, r3, #12
 8022e3e:	001a      	movs	r2, r3
 8022e40:	4b4b      	ldr	r3, [pc, #300]	; (8022f70 <itsdk_error_report+0x150>)
 8022e42:	4013      	ands	r3, r2
 8022e44:	687a      	ldr	r2, [r7, #4]
 8022e46:	4313      	orrs	r3, r2
 8022e48:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 8022e4a:	f001 f847 	bl	8023edc <itsdk_time_get_ms>
 8022e4e:	22fa      	movs	r2, #250	; 0xfa
 8022e50:	0092      	lsls	r2, r2, #2
 8022e52:	2300      	movs	r3, #0
 8022e54:	f7dd fb72 	bl	800053c <__aeabi_uldivmod>
 8022e58:	0003      	movs	r3, r0
 8022e5a:	000c      	movs	r4, r1
 8022e5c:	61bb      	str	r3, [r7, #24]
 8022e5e:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 8022e60:	2110      	movs	r1, #16
 8022e62:	187b      	adds	r3, r7, r1
 8022e64:	687a      	ldr	r2, [r7, #4]
 8022e66:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 8022e68:	69ba      	ldr	r2, [r7, #24]
 8022e6a:	187b      	adds	r3, r7, r1
 8022e6c:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 8022e6e:	2308      	movs	r3, #8
 8022e70:	18fb      	adds	r3, r7, r3
 8022e72:	0018      	movs	r0, r3
 8022e74:	f7ff ff30 	bl	8022cd8 <_itsdk_error_readHeader>
 8022e78:	0003      	movs	r3, r0
 8022e7a:	2b01      	cmp	r3, #1
 8022e7c:	d101      	bne.n	8022e82 <itsdk_error_report+0x62>
 8022e7e:	2301      	movs	r3, #1
 8022e80:	e072      	b.n	8022f68 <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 8022e82:	2408      	movs	r4, #8
 8022e84:	193b      	adds	r3, r7, r4
 8022e86:	889b      	ldrh	r3, [r3, #4]
 8022e88:	2210      	movs	r2, #16
 8022e8a:	18ba      	adds	r2, r7, r2
 8022e8c:	0011      	movs	r1, r2
 8022e8e:	0018      	movs	r0, r3
 8022e90:	f7ff ff58 	bl	8022d44 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 8022e94:	193b      	adds	r3, r7, r4
 8022e96:	889b      	ldrh	r3, [r3, #4]
 8022e98:	3301      	adds	r3, #1
 8022e9a:	4a36      	ldr	r2, [pc, #216]	; (8022f74 <itsdk_error_report+0x154>)
 8022e9c:	4013      	ands	r3, r2
 8022e9e:	d504      	bpl.n	8022eaa <itsdk_error_report+0x8a>
 8022ea0:	3b01      	subs	r3, #1
 8022ea2:	2240      	movs	r2, #64	; 0x40
 8022ea4:	4252      	negs	r2, r2
 8022ea6:	4313      	orrs	r3, r2
 8022ea8:	3301      	adds	r3, #1
 8022eaa:	b29a      	uxth	r2, r3
 8022eac:	2108      	movs	r1, #8
 8022eae:	187b      	adds	r3, r7, r1
 8022eb0:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 8022eb2:	187b      	adds	r3, r7, r1
 8022eb4:	889a      	ldrh	r2, [r3, #4]
 8022eb6:	187b      	adds	r3, r7, r1
 8022eb8:	885b      	ldrh	r3, [r3, #2]
 8022eba:	429a      	cmp	r2, r3
 8022ebc:	d10f      	bne.n	8022ede <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 8022ebe:	2308      	movs	r3, #8
 8022ec0:	18fb      	adds	r3, r7, r3
 8022ec2:	885b      	ldrh	r3, [r3, #2]
 8022ec4:	3301      	adds	r3, #1
 8022ec6:	4a2b      	ldr	r2, [pc, #172]	; (8022f74 <itsdk_error_report+0x154>)
 8022ec8:	4013      	ands	r3, r2
 8022eca:	d504      	bpl.n	8022ed6 <itsdk_error_report+0xb6>
 8022ecc:	3b01      	subs	r3, #1
 8022ece:	2240      	movs	r2, #64	; 0x40
 8022ed0:	4252      	negs	r2, r2
 8022ed2:	4313      	orrs	r3, r2
 8022ed4:	3301      	adds	r3, #1
 8022ed6:	b29a      	uxth	r2, r3
 8022ed8:	2308      	movs	r3, #8
 8022eda:	18fb      	adds	r3, r7, r3
 8022edc:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 8022ede:	2308      	movs	r3, #8
 8022ee0:	18fb      	adds	r3, r7, r3
 8022ee2:	0018      	movs	r0, r3
 8022ee4:	f7ff ff18 	bl	8022d18 <_itsdk_error_writeHeader>

	char t = 'S';
 8022ee8:	2327      	movs	r3, #39	; 0x27
 8022eea:	18fb      	adds	r3, r7, r3
 8022eec:	2253      	movs	r2, #83	; 0x53
 8022eee:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 8022ef0:	687a      	ldr	r2, [r7, #4]
 8022ef2:	2380      	movs	r3, #128	; 0x80
 8022ef4:	059b      	lsls	r3, r3, #22
 8022ef6:	4013      	ands	r3, r2
 8022ef8:	d003      	beq.n	8022f02 <itsdk_error_report+0xe2>
		t = 'A';
 8022efa:	2327      	movs	r3, #39	; 0x27
 8022efc:	18fb      	adds	r3, r7, r3
 8022efe:	2241      	movs	r2, #65	; 0x41
 8022f00:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	0f9b      	lsrs	r3, r3, #30
 8022f06:	079a      	lsls	r2, r3, #30
 8022f08:	23c0      	movs	r3, #192	; 0xc0
 8022f0a:	061b      	lsls	r3, r3, #24
 8022f0c:	429a      	cmp	r2, r3
 8022f0e:	d108      	bne.n	8022f22 <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 8022f10:	2327      	movs	r3, #39	; 0x27
 8022f12:	18fb      	adds	r3, r7, r3
 8022f14:	7819      	ldrb	r1, [r3, #0]
 8022f16:	687a      	ldr	r2, [r7, #4]
 8022f18:	4b17      	ldr	r3, [pc, #92]	; (8022f78 <itsdk_error_report+0x158>)
 8022f1a:	0018      	movs	r0, r3
 8022f1c:	f000 fa0c 	bl	8023338 <log_error>
		while(1);
 8022f20:	e7fe      	b.n	8022f20 <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	da08      	bge.n	8022f3a <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 8022f28:	2327      	movs	r3, #39	; 0x27
 8022f2a:	18fb      	adds	r3, r7, r3
 8022f2c:	7819      	ldrb	r1, [r3, #0]
 8022f2e:	687a      	ldr	r2, [r7, #4]
 8022f30:	4b12      	ldr	r3, [pc, #72]	; (8022f7c <itsdk_error_report+0x15c>)
 8022f32:	0018      	movs	r0, r3
 8022f34:	f000 fa00 	bl	8023338 <log_error>
 8022f38:	e015      	b.n	8022f66 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 8022f3a:	687a      	ldr	r2, [r7, #4]
 8022f3c:	2380      	movs	r3, #128	; 0x80
 8022f3e:	05db      	lsls	r3, r3, #23
 8022f40:	4013      	ands	r3, r2
 8022f42:	d008      	beq.n	8022f56 <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 8022f44:	2327      	movs	r3, #39	; 0x27
 8022f46:	18fb      	adds	r3, r7, r3
 8022f48:	7819      	ldrb	r1, [r3, #0]
 8022f4a:	687a      	ldr	r2, [r7, #4]
 8022f4c:	4b0c      	ldr	r3, [pc, #48]	; (8022f80 <itsdk_error_report+0x160>)
 8022f4e:	0018      	movs	r0, r3
 8022f50:	f000 fa38 	bl	80233c4 <log_warn>
 8022f54:	e007      	b.n	8022f66 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 8022f56:	2327      	movs	r3, #39	; 0x27
 8022f58:	18fb      	adds	r3, r7, r3
 8022f5a:	7819      	ldrb	r1, [r3, #0]
 8022f5c:	687a      	ldr	r2, [r7, #4]
 8022f5e:	4b09      	ldr	r3, [pc, #36]	; (8022f84 <itsdk_error_report+0x164>)
 8022f60:	0018      	movs	r0, r3
 8022f62:	f000 fa75 	bl	8023450 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 8022f66:	2300      	movs	r3, #0
}
 8022f68:	0018      	movs	r0, r3
 8022f6a:	46bd      	mov	sp, r7
 8022f6c:	b00b      	add	sp, #44	; 0x2c
 8022f6e:	bd90      	pop	{r4, r7, pc}
 8022f70:	0ffff000 	.word	0x0ffff000
 8022f74:	8000003f 	.word	0x8000003f
 8022f78:	0802804c 	.word	0x0802804c
 8022f7c:	0802806c 	.word	0x0802806c
 8022f80:	08028080 	.word	0x08028080
 8022f84:	08028094 	.word	0x08028094

08022f88 <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 8022f88:	b580      	push	{r7, lr}
 8022f8a:	b084      	sub	sp, #16
 8022f8c:	af00      	add	r7, sp, #0
 8022f8e:	6078      	str	r0, [r7, #4]
 8022f90:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 8022f92:	2308      	movs	r3, #8
 8022f94:	18fb      	adds	r3, r7, r3
 8022f96:	0018      	movs	r0, r3
 8022f98:	f7ff fe9e 	bl	8022cd8 <_itsdk_error_readHeader>
 8022f9c:	1e03      	subs	r3, r0, #0
 8022f9e:	d138      	bne.n	8023012 <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 8022fa0:	687b      	ldr	r3, [r7, #4]
 8022fa2:	881b      	ldrh	r3, [r3, #0]
 8022fa4:	4a22      	ldr	r2, [pc, #136]	; (8023030 <itsdk_error_get+0xa8>)
 8022fa6:	4293      	cmp	r3, r2
 8022fa8:	d104      	bne.n	8022fb4 <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 8022faa:	2308      	movs	r3, #8
 8022fac:	18fb      	adds	r3, r7, r3
 8022fae:	885a      	ldrh	r2, [r3, #2]
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	881a      	ldrh	r2, [r3, #0]
 8022fb8:	2308      	movs	r3, #8
 8022fba:	18fb      	adds	r3, r7, r3
 8022fbc:	889b      	ldrh	r3, [r3, #4]
 8022fbe:	429a      	cmp	r2, r3
 8022fc0:	d027      	beq.n	8023012 <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	881b      	ldrh	r3, [r3, #0]
 8022fc6:	2b3f      	cmp	r3, #63	; 0x3f
 8022fc8:	d823      	bhi.n	8023012 <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	881b      	ldrh	r3, [r3, #0]
 8022fce:	683a      	ldr	r2, [r7, #0]
 8022fd0:	0011      	movs	r1, r2
 8022fd2:	0018      	movs	r0, r3
 8022fd4:	f7ff fed5 	bl	8022d82 <_itsdk_error_read>
 8022fd8:	1e03      	subs	r3, r0, #0
 8022fda:	d11a      	bne.n	8023012 <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	881b      	ldrh	r3, [r3, #0]
 8022fe0:	3301      	adds	r3, #1
 8022fe2:	4a14      	ldr	r2, [pc, #80]	; (8023034 <itsdk_error_get+0xac>)
 8022fe4:	4013      	ands	r3, r2
 8022fe6:	d504      	bpl.n	8022ff2 <itsdk_error_get+0x6a>
 8022fe8:	3b01      	subs	r3, #1
 8022fea:	2240      	movs	r2, #64	; 0x40
 8022fec:	4252      	negs	r2, r2
 8022fee:	4313      	orrs	r3, r2
 8022ff0:	3301      	adds	r3, #1
 8022ff2:	b29a      	uxth	r2, r3
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 8022ff8:	687b      	ldr	r3, [r7, #4]
 8022ffa:	881a      	ldrh	r2, [r3, #0]
 8022ffc:	2308      	movs	r3, #8
 8022ffe:	18fb      	adds	r3, r7, r3
 8023000:	889b      	ldrh	r3, [r3, #4]
 8023002:	429a      	cmp	r2, r3
 8023004:	d103      	bne.n	802300e <itsdk_error_get+0x86>
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	2201      	movs	r2, #1
 802300a:	4252      	negs	r2, r2
 802300c:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 802300e:	2300      	movs	r3, #0
 8023010:	e00a      	b.n	8023028 <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 8023012:	683b      	ldr	r3, [r7, #0]
 8023014:	2200      	movs	r2, #0
 8023016:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 8023018:	683b      	ldr	r3, [r7, #0]
 802301a:	2200      	movs	r2, #0
 802301c:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	2201      	movs	r2, #1
 8023022:	4252      	negs	r2, r2
 8023024:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 8023026:	2301      	movs	r3, #1
}
 8023028:	0018      	movs	r0, r3
 802302a:	46bd      	mov	sp, r7
 802302c:	b004      	add	sp, #16
 802302e:	bd80      	pop	{r7, pc}
 8023030:	0000fffe 	.word	0x0000fffe
 8023034:	8000003f 	.word	0x8000003f

08023038 <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 8023038:	b580      	push	{r7, lr}
 802303a:	b082      	sub	sp, #8
 802303c:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 802303e:	003b      	movs	r3, r7
 8023040:	0018      	movs	r0, r3
 8023042:	f7ff fe49 	bl	8022cd8 <_itsdk_error_readHeader>
 8023046:	0003      	movs	r3, r0
 8023048:	2b01      	cmp	r3, #1
 802304a:	d101      	bne.n	8023050 <itsdk_error_clear+0x18>
 802304c:	2301      	movs	r3, #1
 802304e:	e008      	b.n	8023062 <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 8023050:	003b      	movs	r3, r7
 8023052:	889a      	ldrh	r2, [r3, #4]
 8023054:	003b      	movs	r3, r7
 8023056:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 8023058:	003b      	movs	r3, r7
 802305a:	0018      	movs	r0, r3
 802305c:	f7ff fe5c 	bl	8022d18 <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 8023060:	2300      	movs	r3, #0
}
 8023062:	0018      	movs	r0, r3
 8023064:	46bd      	mov	sp, r7
 8023066:	b002      	add	sp, #8
 8023068:	bd80      	pop	{r7, pc}

0802306a <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 802306a:	b580      	push	{r7, lr}
 802306c:	b082      	sub	sp, #8
 802306e:	af00      	add	r7, sp, #0
 8023070:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	2282      	movs	r2, #130	; 0x82
 8023076:	0092      	lsls	r2, r2, #2
 8023078:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 802307a:	2300      	movs	r3, #0
}
 802307c:	0018      	movs	r0, r3
 802307e:	46bd      	mov	sp, r7
 8023080:	b002      	add	sp, #8
 8023082:	bd80      	pop	{r7, pc}

08023084 <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 8023084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023086:	b08b      	sub	sp, #44	; 0x2c
 8023088:	af04      	add	r7, sp, #16
 802308a:	6078      	str	r0, [r7, #4]
 802308c:	000a      	movs	r2, r1
 802308e:	1cfb      	adds	r3, r7, #3
 8023090:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 8023092:	1cfb      	adds	r3, r7, #3
 8023094:	781b      	ldrb	r3, [r3, #0]
 8023096:	2b01      	cmp	r3, #1
 8023098:	d000      	beq.n	802309c <_itsdk_error_consolePriv+0x18>
 802309a:	e087      	b.n	80231ac <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	781b      	ldrb	r3, [r3, #0]
 80230a0:	2b45      	cmp	r3, #69	; 0x45
 80230a2:	d100      	bne.n	80230a6 <_itsdk_error_consolePriv+0x22>
 80230a4:	e07a      	b.n	802319c <_itsdk_error_consolePriv+0x118>
 80230a6:	2b65      	cmp	r3, #101	; 0x65
 80230a8:	d010      	beq.n	80230cc <_itsdk_error_consolePriv+0x48>
 80230aa:	2b3f      	cmp	r3, #63	; 0x3f
 80230ac:	d000      	beq.n	80230b0 <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 80230ae:	e07e      	b.n	80231ae <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 80230b0:	4b41      	ldr	r3, [pc, #260]	; (80231b8 <_itsdk_error_consolePriv+0x134>)
 80230b2:	0018      	movs	r0, r3
 80230b4:	f7fc fe52 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 80230b8:	4b40      	ldr	r3, [pc, #256]	; (80231bc <_itsdk_error_consolePriv+0x138>)
 80230ba:	0018      	movs	r0, r3
 80230bc:	f7fc fe4e 	bl	801fd5c <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 80230c0:	4b3f      	ldr	r3, [pc, #252]	; (80231c0 <_itsdk_error_consolePriv+0x13c>)
 80230c2:	0018      	movs	r0, r3
 80230c4:	f7fc fe4a 	bl	801fd5c <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80230c8:	2300      	movs	r3, #0
 80230ca:	e071      	b.n	80231b0 <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 80230cc:	2314      	movs	r3, #20
 80230ce:	18fb      	adds	r3, r7, r3
 80230d0:	2202      	movs	r2, #2
 80230d2:	4252      	negs	r2, r2
 80230d4:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 80230d6:	e051      	b.n	802317c <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 80230d8:	230c      	movs	r3, #12
 80230da:	18fb      	adds	r3, r7, r3
 80230dc:	685b      	ldr	r3, [r3, #4]
 80230de:	0f9b      	lsrs	r3, r3, #30
 80230e0:	079b      	lsls	r3, r3, #30
 80230e2:	2280      	movs	r2, #128	; 0x80
 80230e4:	0612      	lsls	r2, r2, #24
 80230e6:	4293      	cmp	r3, r2
 80230e8:	d011      	beq.n	802310e <_itsdk_error_consolePriv+0x8a>
 80230ea:	22c0      	movs	r2, #192	; 0xc0
 80230ec:	0612      	lsls	r2, r2, #24
 80230ee:	4293      	cmp	r3, r2
 80230f0:	d012      	beq.n	8023118 <_itsdk_error_consolePriv+0x94>
 80230f2:	2280      	movs	r2, #128	; 0x80
 80230f4:	05d2      	lsls	r2, r2, #23
 80230f6:	4293      	cmp	r3, r2
 80230f8:	d004      	beq.n	8023104 <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 80230fa:	2317      	movs	r3, #23
 80230fc:	18fb      	adds	r3, r7, r3
 80230fe:	2249      	movs	r2, #73	; 0x49
 8023100:	701a      	strb	r2, [r3, #0]
 8023102:	e00e      	b.n	8023122 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 8023104:	2317      	movs	r3, #23
 8023106:	18fb      	adds	r3, r7, r3
 8023108:	2257      	movs	r2, #87	; 0x57
 802310a:	701a      	strb	r2, [r3, #0]
 802310c:	e009      	b.n	8023122 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 802310e:	2317      	movs	r3, #23
 8023110:	18fb      	adds	r3, r7, r3
 8023112:	2245      	movs	r2, #69	; 0x45
 8023114:	701a      	strb	r2, [r3, #0]
 8023116:	e004      	b.n	8023122 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 8023118:	2317      	movs	r3, #23
 802311a:	18fb      	adds	r3, r7, r3
 802311c:	2246      	movs	r2, #70	; 0x46
 802311e:	701a      	strb	r2, [r3, #0]
 8023120:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8023122:	2317      	movs	r3, #23
 8023124:	18fb      	adds	r3, r7, r3
 8023126:	781c      	ldrb	r4, [r3, #0]
 8023128:	220c      	movs	r2, #12
 802312a:	18bb      	adds	r3, r7, r2
 802312c:	681d      	ldr	r5, [r3, #0]
 802312e:	18bb      	adds	r3, r7, r2
 8023130:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 8023132:	18bb      	adds	r3, r7, r2
 8023134:	685a      	ldr	r2, [r3, #4]
 8023136:	2380      	movs	r3, #128	; 0x80
 8023138:	059b      	lsls	r3, r3, #22
 802313a:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 802313c:	d001      	beq.n	8023142 <_itsdk_error_consolePriv+0xbe>
 802313e:	2241      	movs	r2, #65	; 0x41
 8023140:	e000      	b.n	8023144 <_itsdk_error_consolePriv+0xc0>
 8023142:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 8023144:	200c      	movs	r0, #12
 8023146:	183b      	adds	r3, r7, r0
 8023148:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 802314a:	051b      	lsls	r3, r3, #20
 802314c:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 802314e:	183b      	adds	r3, r7, r0
 8023150:	6858      	ldr	r0, [r3, #4]
 8023152:	2380      	movs	r3, #128	; 0x80
 8023154:	055b      	lsls	r3, r3, #21
 8023156:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8023158:	d006      	beq.n	8023168 <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 802315a:	230c      	movs	r3, #12
 802315c:	18fb      	adds	r3, r7, r3
 802315e:	685b      	ldr	r3, [r3, #4]
 8023160:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8023162:	041b      	lsls	r3, r3, #16
 8023164:	0c1b      	lsrs	r3, r3, #16
 8023166:	e000      	b.n	802316a <_itsdk_error_consolePriv+0xe6>
 8023168:	2300      	movs	r3, #0
 802316a:	4816      	ldr	r0, [pc, #88]	; (80231c4 <_itsdk_error_consolePriv+0x140>)
 802316c:	9302      	str	r3, [sp, #8]
 802316e:	9101      	str	r1, [sp, #4]
 8023170:	9200      	str	r2, [sp, #0]
 8023172:	0033      	movs	r3, r6
 8023174:	002a      	movs	r2, r5
 8023176:	0021      	movs	r1, r4
 8023178:	f7fc fdf0 	bl	801fd5c <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 802317c:	230c      	movs	r3, #12
 802317e:	18fa      	adds	r2, r7, r3
 8023180:	2314      	movs	r3, #20
 8023182:	18fb      	adds	r3, r7, r3
 8023184:	0011      	movs	r1, r2
 8023186:	0018      	movs	r0, r3
 8023188:	f7ff fefe 	bl	8022f88 <itsdk_error_get>
 802318c:	1e03      	subs	r3, r0, #0
 802318e:	d0a3      	beq.n	80230d8 <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 8023190:	4b0d      	ldr	r3, [pc, #52]	; (80231c8 <_itsdk_error_consolePriv+0x144>)
 8023192:	0018      	movs	r0, r3
 8023194:	f7fc fde2 	bl	801fd5c <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 8023198:	2300      	movs	r3, #0
 802319a:	e009      	b.n	80231b0 <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 802319c:	f7ff ff4c 	bl	8023038 <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 80231a0:	4b09      	ldr	r3, [pc, #36]	; (80231c8 <_itsdk_error_consolePriv+0x144>)
 80231a2:	0018      	movs	r0, r3
 80231a4:	f7fc fdda 	bl	801fd5c <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 80231a8:	2300      	movs	r3, #0
 80231aa:	e001      	b.n	80231b0 <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 80231ac:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 80231ae:	2301      	movs	r3, #1
}
 80231b0:	0018      	movs	r0, r3
 80231b2:	46bd      	mov	sp, r7
 80231b4:	b007      	add	sp, #28
 80231b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80231b8:	080280a8 	.word	0x080280a8
 80231bc:	080280b8 	.word	0x080280b8
 80231c0:	080280d8 	.word	0x080280d8
 80231c4:	080280fc 	.word	0x080280fc
 80231c8:	08028128 	.word	0x08028128

080231cc <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 80231cc:	b580      	push	{r7, lr}
 80231ce:	b082      	sub	sp, #8
 80231d0:	af00      	add	r7, sp, #0
 80231d2:	0002      	movs	r2, r0
 80231d4:	1dbb      	adds	r3, r7, #6
 80231d6:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 80231d8:	1dbb      	adds	r3, r7, #6
 80231da:	881b      	ldrh	r3, [r3, #0]
 80231dc:	4a51      	ldr	r2, [pc, #324]	; (8023324 <log_init+0x158>)
 80231de:	4013      	ands	r3, r2
 80231e0:	17da      	asrs	r2, r3, #31
 80231e2:	1ad3      	subs	r3, r2, r3
 80231e4:	0fdb      	lsrs	r3, r3, #31
 80231e6:	b2da      	uxtb	r2, r3
 80231e8:	4b4f      	ldr	r3, [pc, #316]	; (8023328 <log_init+0x15c>)
 80231ea:	2101      	movs	r1, #1
 80231ec:	400a      	ands	r2, r1
 80231ee:	1890      	adds	r0, r2, r2
 80231f0:	781a      	ldrb	r2, [r3, #0]
 80231f2:	2102      	movs	r1, #2
 80231f4:	438a      	bics	r2, r1
 80231f6:	1c11      	adds	r1, r2, #0
 80231f8:	1c02      	adds	r2, r0, #0
 80231fa:	430a      	orrs	r2, r1
 80231fc:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 80231fe:	1dbb      	adds	r3, r7, #6
 8023200:	881b      	ldrh	r3, [r3, #0]
 8023202:	4a4a      	ldr	r2, [pc, #296]	; (802332c <log_init+0x160>)
 8023204:	4013      	ands	r3, r2
 8023206:	17da      	asrs	r2, r3, #31
 8023208:	1ad3      	subs	r3, r2, r3
 802320a:	0fdb      	lsrs	r3, r3, #31
 802320c:	b2da      	uxtb	r2, r3
 802320e:	4b46      	ldr	r3, [pc, #280]	; (8023328 <log_init+0x15c>)
 8023210:	2101      	movs	r1, #1
 8023212:	400a      	ands	r2, r1
 8023214:	0090      	lsls	r0, r2, #2
 8023216:	781a      	ldrb	r2, [r3, #0]
 8023218:	2104      	movs	r1, #4
 802321a:	438a      	bics	r2, r1
 802321c:	1c11      	adds	r1, r2, #0
 802321e:	1c02      	adds	r2, r0, #0
 8023220:	430a      	orrs	r2, r1
 8023222:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 8023224:	1dbb      	adds	r3, r7, #6
 8023226:	881b      	ldrh	r3, [r3, #0]
 8023228:	4a41      	ldr	r2, [pc, #260]	; (8023330 <log_init+0x164>)
 802322a:	4013      	ands	r3, r2
 802322c:	17da      	asrs	r2, r3, #31
 802322e:	1ad3      	subs	r3, r2, r3
 8023230:	0fdb      	lsrs	r3, r3, #31
 8023232:	b2da      	uxtb	r2, r3
 8023234:	4b3c      	ldr	r3, [pc, #240]	; (8023328 <log_init+0x15c>)
 8023236:	2101      	movs	r1, #1
 8023238:	400a      	ands	r2, r1
 802323a:	00d0      	lsls	r0, r2, #3
 802323c:	781a      	ldrb	r2, [r3, #0]
 802323e:	2108      	movs	r1, #8
 8023240:	438a      	bics	r2, r1
 8023242:	1c11      	adds	r1, r2, #0
 8023244:	1c02      	adds	r2, r0, #0
 8023246:	430a      	orrs	r2, r1
 8023248:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 802324a:	1dbb      	adds	r3, r7, #6
 802324c:	881b      	ldrh	r3, [r3, #0]
 802324e:	4a39      	ldr	r2, [pc, #228]	; (8023334 <log_init+0x168>)
 8023250:	4013      	ands	r3, r2
 8023252:	17da      	asrs	r2, r3, #31
 8023254:	1ad3      	subs	r3, r2, r3
 8023256:	0fdb      	lsrs	r3, r3, #31
 8023258:	b2da      	uxtb	r2, r3
 802325a:	4b33      	ldr	r3, [pc, #204]	; (8023328 <log_init+0x15c>)
 802325c:	2101      	movs	r1, #1
 802325e:	400a      	ands	r2, r1
 8023260:	0110      	lsls	r0, r2, #4
 8023262:	781a      	ldrb	r2, [r3, #0]
 8023264:	2110      	movs	r1, #16
 8023266:	438a      	bics	r2, r1
 8023268:	1c11      	adds	r1, r2, #0
 802326a:	1c02      	adds	r2, r0, #0
 802326c:	430a      	orrs	r2, r1
 802326e:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 8023270:	1dbb      	adds	r3, r7, #6
 8023272:	881a      	ldrh	r2, [r3, #0]
 8023274:	23f0      	movs	r3, #240	; 0xf0
 8023276:	011b      	lsls	r3, r3, #4
 8023278:	4013      	ands	r3, r2
 802327a:	17da      	asrs	r2, r3, #31
 802327c:	1ad3      	subs	r3, r2, r3
 802327e:	0fdb      	lsrs	r3, r3, #31
 8023280:	b2da      	uxtb	r2, r3
 8023282:	4b29      	ldr	r3, [pc, #164]	; (8023328 <log_init+0x15c>)
 8023284:	2101      	movs	r1, #1
 8023286:	400a      	ands	r2, r1
 8023288:	0150      	lsls	r0, r2, #5
 802328a:	781a      	ldrb	r2, [r3, #0]
 802328c:	2120      	movs	r1, #32
 802328e:	438a      	bics	r2, r1
 8023290:	1c11      	adds	r1, r2, #0
 8023292:	1c02      	adds	r2, r0, #0
 8023294:	430a      	orrs	r2, r1
 8023296:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 8023298:	1dbb      	adds	r3, r7, #6
 802329a:	881b      	ldrh	r3, [r3, #0]
 802329c:	22f0      	movs	r2, #240	; 0xf0
 802329e:	4013      	ands	r3, r2
 80232a0:	17da      	asrs	r2, r3, #31
 80232a2:	1ad3      	subs	r3, r2, r3
 80232a4:	0fdb      	lsrs	r3, r3, #31
 80232a6:	b2da      	uxtb	r2, r3
 80232a8:	4b1f      	ldr	r3, [pc, #124]	; (8023328 <log_init+0x15c>)
 80232aa:	2101      	movs	r1, #1
 80232ac:	400a      	ands	r2, r1
 80232ae:	0190      	lsls	r0, r2, #6
 80232b0:	781a      	ldrb	r2, [r3, #0]
 80232b2:	2140      	movs	r1, #64	; 0x40
 80232b4:	438a      	bics	r2, r1
 80232b6:	1c11      	adds	r1, r2, #0
 80232b8:	1c02      	adds	r2, r0, #0
 80232ba:	430a      	orrs	r2, r1
 80232bc:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 80232be:	1dbb      	adds	r3, r7, #6
 80232c0:	881b      	ldrh	r3, [r3, #0]
 80232c2:	220f      	movs	r2, #15
 80232c4:	4013      	ands	r3, r2
 80232c6:	17da      	asrs	r2, r3, #31
 80232c8:	1ad3      	subs	r3, r2, r3
 80232ca:	0fdb      	lsrs	r3, r3, #31
 80232cc:	b2da      	uxtb	r2, r3
 80232ce:	4b16      	ldr	r3, [pc, #88]	; (8023328 <log_init+0x15c>)
 80232d0:	01d0      	lsls	r0, r2, #7
 80232d2:	781a      	ldrb	r2, [r3, #0]
 80232d4:	217f      	movs	r1, #127	; 0x7f
 80232d6:	400a      	ands	r2, r1
 80232d8:	1c11      	adds	r1, r2, #0
 80232da:	1c02      	adds	r2, r0, #0
 80232dc:	430a      	orrs	r2, r1
 80232de:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 80232e0:	1dbb      	adds	r3, r7, #6
 80232e2:	881a      	ldrh	r2, [r3, #0]
 80232e4:	23f0      	movs	r3, #240	; 0xf0
 80232e6:	021b      	lsls	r3, r3, #8
 80232e8:	4013      	ands	r3, r2
 80232ea:	17da      	asrs	r2, r3, #31
 80232ec:	1ad3      	subs	r3, r2, r3
 80232ee:	0fdb      	lsrs	r3, r3, #31
 80232f0:	b2da      	uxtb	r2, r3
 80232f2:	4b0d      	ldr	r3, [pc, #52]	; (8023328 <log_init+0x15c>)
 80232f4:	2101      	movs	r1, #1
 80232f6:	400a      	ands	r2, r1
 80232f8:	0010      	movs	r0, r2
 80232fa:	785a      	ldrb	r2, [r3, #1]
 80232fc:	2101      	movs	r1, #1
 80232fe:	438a      	bics	r2, r1
 8023300:	1c11      	adds	r1, r2, #0
 8023302:	1c02      	adds	r2, r0, #0
 8023304:	430a      	orrs	r2, r1
 8023306:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 8023308:	4b07      	ldr	r3, [pc, #28]	; (8023328 <log_init+0x15c>)
 802330a:	1dba      	adds	r2, r7, #6
 802330c:	8812      	ldrh	r2, [r2, #0]
 802330e:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 8023310:	4b05      	ldr	r3, [pc, #20]	; (8023328 <log_init+0x15c>)
 8023312:	781a      	ldrb	r2, [r3, #0]
 8023314:	2101      	movs	r1, #1
 8023316:	430a      	orrs	r2, r1
 8023318:	701a      	strb	r2, [r3, #0]
  return true;
 802331a:	2301      	movs	r3, #1
}
 802331c:	0018      	movs	r0, r3
 802331e:	46bd      	mov	sp, r7
 8023320:	b002      	add	sp, #8
 8023322:	bd80      	pop	{r7, pc}
 8023324:	00001111 	.word	0x00001111
 8023328:	20002388 	.word	0x20002388
 802332c:	00002222 	.word	0x00002222
 8023330:	00004444 	.word	0x00004444
 8023334:	00008888 	.word	0x00008888

08023338 <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 8023338:	b40f      	push	{r0, r1, r2, r3}
 802333a:	b580      	push	{r7, lr}
 802333c:	b096      	sub	sp, #88	; 0x58
 802333e:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 8023340:	4b1f      	ldr	r3, [pc, #124]	; (80233c0 <log_error+0x88>)
 8023342:	781b      	ldrb	r3, [r3, #0]
 8023344:	2202      	movs	r2, #2
 8023346:	4013      	ands	r3, r2
 8023348:	b2db      	uxtb	r3, r3
 802334a:	2b00      	cmp	r3, #0
 802334c:	d031      	beq.n	80233b2 <log_error+0x7a>
 802334e:	4b1c      	ldr	r3, [pc, #112]	; (80233c0 <log_error+0x88>)
 8023350:	781b      	ldrb	r3, [r3, #0]
 8023352:	2201      	movs	r2, #1
 8023354:	4013      	ands	r3, r2
 8023356:	b2db      	uxtb	r3, r3
 8023358:	2b00      	cmp	r3, #0
 802335a:	d02a      	beq.n	80233b2 <log_error+0x7a>
    va_start(args,format);
 802335c:	2364      	movs	r3, #100	; 0x64
 802335e:	18fb      	adds	r3, r7, r3
 8023360:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8023362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023366:	1d38      	adds	r0, r7, #4
 8023368:	2150      	movs	r1, #80	; 0x50
 802336a:	f002 fe2b 	bl	8025fc4 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 802336e:	4b14      	ldr	r3, [pc, #80]	; (80233c0 <log_error+0x88>)
 8023370:	781b      	ldrb	r3, [r3, #0]
 8023372:	2220      	movs	r2, #32
 8023374:	4013      	ands	r3, r2
 8023376:	b2db      	uxtb	r3, r3
 8023378:	2b00      	cmp	r3, #0
 802337a:	d003      	beq.n	8023384 <log_error+0x4c>
      serial1_print(fmtBuffer);
 802337c:	1d3b      	adds	r3, r7, #4
 802337e:	0018      	movs	r0, r3
 8023380:	f001 ff02 	bl	8025188 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 8023384:	4b0e      	ldr	r3, [pc, #56]	; (80233c0 <log_error+0x88>)
 8023386:	781b      	ldrb	r3, [r3, #0]
 8023388:	2240      	movs	r2, #64	; 0x40
 802338a:	4013      	ands	r3, r2
 802338c:	b2db      	uxtb	r3, r3
 802338e:	2b00      	cmp	r3, #0
 8023390:	d003      	beq.n	802339a <log_error+0x62>
      serial2_print(fmtBuffer);
 8023392:	1d3b      	adds	r3, r7, #4
 8023394:	0018      	movs	r0, r3
 8023396:	f001 ff0f 	bl	80251b8 <serial2_print>
    }

    if ( __log.onDebug  ) {
 802339a:	4b09      	ldr	r3, [pc, #36]	; (80233c0 <log_error+0x88>)
 802339c:	781b      	ldrb	r3, [r3, #0]
 802339e:	227f      	movs	r2, #127	; 0x7f
 80233a0:	4393      	bics	r3, r2
 80233a2:	b2db      	uxtb	r3, r3
 80233a4:	2b00      	cmp	r3, #0
 80233a6:	d004      	beq.n	80233b2 <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 80233a8:	1d3b      	adds	r3, r7, #4
 80233aa:	0019      	movs	r1, r3
 80233ac:	2003      	movs	r0, #3
 80233ae:	f001 ffb5 	bl	802531c <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 80233b2:	46c0      	nop			; (mov r8, r8)
 80233b4:	46bd      	mov	sp, r7
 80233b6:	b016      	add	sp, #88	; 0x58
 80233b8:	bc80      	pop	{r7}
 80233ba:	bc08      	pop	{r3}
 80233bc:	b004      	add	sp, #16
 80233be:	4718      	bx	r3
 80233c0:	20002388 	.word	0x20002388

080233c4 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 80233c4:	b40f      	push	{r0, r1, r2, r3}
 80233c6:	b580      	push	{r7, lr}
 80233c8:	b096      	sub	sp, #88	; 0x58
 80233ca:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 80233cc:	4b1f      	ldr	r3, [pc, #124]	; (802344c <log_warn+0x88>)
 80233ce:	781b      	ldrb	r3, [r3, #0]
 80233d0:	2204      	movs	r2, #4
 80233d2:	4013      	ands	r3, r2
 80233d4:	b2db      	uxtb	r3, r3
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	d031      	beq.n	802343e <log_warn+0x7a>
 80233da:	4b1c      	ldr	r3, [pc, #112]	; (802344c <log_warn+0x88>)
 80233dc:	781b      	ldrb	r3, [r3, #0]
 80233de:	2201      	movs	r2, #1
 80233e0:	4013      	ands	r3, r2
 80233e2:	b2db      	uxtb	r3, r3
 80233e4:	2b00      	cmp	r3, #0
 80233e6:	d02a      	beq.n	802343e <log_warn+0x7a>
    va_start(args,format);
 80233e8:	2364      	movs	r3, #100	; 0x64
 80233ea:	18fb      	adds	r3, r7, r3
 80233ec:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80233ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80233f2:	1d38      	adds	r0, r7, #4
 80233f4:	2150      	movs	r1, #80	; 0x50
 80233f6:	f002 fde5 	bl	8025fc4 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 80233fa:	4b14      	ldr	r3, [pc, #80]	; (802344c <log_warn+0x88>)
 80233fc:	781b      	ldrb	r3, [r3, #0]
 80233fe:	2220      	movs	r2, #32
 8023400:	4013      	ands	r3, r2
 8023402:	b2db      	uxtb	r3, r3
 8023404:	2b00      	cmp	r3, #0
 8023406:	d003      	beq.n	8023410 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 8023408:	1d3b      	adds	r3, r7, #4
 802340a:	0018      	movs	r0, r3
 802340c:	f001 febc 	bl	8025188 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 8023410:	4b0e      	ldr	r3, [pc, #56]	; (802344c <log_warn+0x88>)
 8023412:	781b      	ldrb	r3, [r3, #0]
 8023414:	2240      	movs	r2, #64	; 0x40
 8023416:	4013      	ands	r3, r2
 8023418:	b2db      	uxtb	r3, r3
 802341a:	2b00      	cmp	r3, #0
 802341c:	d003      	beq.n	8023426 <log_warn+0x62>
    	serial2_print(fmtBuffer);
 802341e:	1d3b      	adds	r3, r7, #4
 8023420:	0018      	movs	r0, r3
 8023422:	f001 fec9 	bl	80251b8 <serial2_print>
    }

    if ( __log.onDebug ) {
 8023426:	4b09      	ldr	r3, [pc, #36]	; (802344c <log_warn+0x88>)
 8023428:	781b      	ldrb	r3, [r3, #0]
 802342a:	227f      	movs	r2, #127	; 0x7f
 802342c:	4393      	bics	r3, r2
 802342e:	b2db      	uxtb	r3, r3
 8023430:	2b00      	cmp	r3, #0
 8023432:	d004      	beq.n	802343e <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 8023434:	1d3b      	adds	r3, r7, #4
 8023436:	0019      	movs	r1, r3
 8023438:	2002      	movs	r0, #2
 802343a:	f001 ff6f 	bl	802531c <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 802343e:	46c0      	nop			; (mov r8, r8)
 8023440:	46bd      	mov	sp, r7
 8023442:	b016      	add	sp, #88	; 0x58
 8023444:	bc80      	pop	{r7}
 8023446:	bc08      	pop	{r3}
 8023448:	b004      	add	sp, #16
 802344a:	4718      	bx	r3
 802344c:	20002388 	.word	0x20002388

08023450 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 8023450:	b40f      	push	{r0, r1, r2, r3}
 8023452:	b580      	push	{r7, lr}
 8023454:	b096      	sub	sp, #88	; 0x58
 8023456:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 8023458:	4b1f      	ldr	r3, [pc, #124]	; (80234d8 <log_info+0x88>)
 802345a:	781b      	ldrb	r3, [r3, #0]
 802345c:	2208      	movs	r2, #8
 802345e:	4013      	ands	r3, r2
 8023460:	b2db      	uxtb	r3, r3
 8023462:	2b00      	cmp	r3, #0
 8023464:	d031      	beq.n	80234ca <log_info+0x7a>
 8023466:	4b1c      	ldr	r3, [pc, #112]	; (80234d8 <log_info+0x88>)
 8023468:	781b      	ldrb	r3, [r3, #0]
 802346a:	2201      	movs	r2, #1
 802346c:	4013      	ands	r3, r2
 802346e:	b2db      	uxtb	r3, r3
 8023470:	2b00      	cmp	r3, #0
 8023472:	d02a      	beq.n	80234ca <log_info+0x7a>
    va_start(args,format);
 8023474:	2364      	movs	r3, #100	; 0x64
 8023476:	18fb      	adds	r3, r7, r3
 8023478:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 802347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802347c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802347e:	1d38      	adds	r0, r7, #4
 8023480:	2150      	movs	r1, #80	; 0x50
 8023482:	f002 fd9f 	bl	8025fc4 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 8023486:	4b14      	ldr	r3, [pc, #80]	; (80234d8 <log_info+0x88>)
 8023488:	781b      	ldrb	r3, [r3, #0]
 802348a:	2220      	movs	r2, #32
 802348c:	4013      	ands	r3, r2
 802348e:	b2db      	uxtb	r3, r3
 8023490:	2b00      	cmp	r3, #0
 8023492:	d003      	beq.n	802349c <log_info+0x4c>
    	serial1_print(fmtBuffer);
 8023494:	1d3b      	adds	r3, r7, #4
 8023496:	0018      	movs	r0, r3
 8023498:	f001 fe76 	bl	8025188 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 802349c:	4b0e      	ldr	r3, [pc, #56]	; (80234d8 <log_info+0x88>)
 802349e:	781b      	ldrb	r3, [r3, #0]
 80234a0:	2240      	movs	r2, #64	; 0x40
 80234a2:	4013      	ands	r3, r2
 80234a4:	b2db      	uxtb	r3, r3
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d003      	beq.n	80234b2 <log_info+0x62>
    	serial2_print(fmtBuffer);
 80234aa:	1d3b      	adds	r3, r7, #4
 80234ac:	0018      	movs	r0, r3
 80234ae:	f001 fe83 	bl	80251b8 <serial2_print>
    }

    if ( __log.onDebug ) {
 80234b2:	4b09      	ldr	r3, [pc, #36]	; (80234d8 <log_info+0x88>)
 80234b4:	781b      	ldrb	r3, [r3, #0]
 80234b6:	227f      	movs	r2, #127	; 0x7f
 80234b8:	4393      	bics	r3, r2
 80234ba:	b2db      	uxtb	r3, r3
 80234bc:	2b00      	cmp	r3, #0
 80234be:	d004      	beq.n	80234ca <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 80234c0:	1d3b      	adds	r3, r7, #4
 80234c2:	0019      	movs	r1, r3
 80234c4:	2001      	movs	r0, #1
 80234c6:	f001 ff29 	bl	802531c <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 80234ca:	46c0      	nop			; (mov r8, r8)
 80234cc:	46bd      	mov	sp, r7
 80234ce:	b016      	add	sp, #88	; 0x58
 80234d0:	bc80      	pop	{r7}
 80234d2:	bc08      	pop	{r3}
 80234d4:	b004      	add	sp, #16
 80234d6:	4718      	bx	r3
 80234d8:	20002388 	.word	0x20002388

080234dc <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 80234dc:	b580      	push	{r7, lr}
 80234de:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 80234e0:	f7e4 fb1a 	bl	8007b18 <lorawan_driver_LORA_getJoinState>
 80234e4:	0003      	movs	r3, r0
 80234e6:	3b03      	subs	r3, #3
 80234e8:	425a      	negs	r2, r3
 80234ea:	4153      	adcs	r3, r2
 80234ec:	b2db      	uxtb	r3, r3
}
 80234ee:	0018      	movs	r0, r3
 80234f0:	46bd      	mov	sp, r7
 80234f2:	bd80      	pop	{r7, pc}

080234f4 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 80234f4:	b5b0      	push	{r4, r5, r7, lr}
 80234f6:	b090      	sub	sp, #64	; 0x40
 80234f8:	af00      	add	r7, sp, #0
 80234fa:	0002      	movs	r2, r0
 80234fc:	1dfb      	adds	r3, r7, #7
 80234fe:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 8023500:	1dfb      	adds	r3, r7, #7
 8023502:	781b      	ldrb	r3, [r3, #0]
 8023504:	2b00      	cmp	r3, #0
 8023506:	d107      	bne.n	8023518 <itsdk_lorawan_resetFactoryDefaults+0x24>
 8023508:	232c      	movs	r3, #44	; 0x2c
 802350a:	18fb      	adds	r3, r7, r3
 802350c:	0019      	movs	r1, r3
 802350e:	2007      	movs	r0, #7
 8023510:	f7fd fd6c 	bl	8020fec <itsdk_secstore_readBlock>
 8023514:	1e03      	subs	r3, r0, #0
 8023516:	d038      	beq.n	802358a <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 8023518:	2324      	movs	r3, #36	; 0x24
 802351a:	18fb      	adds	r3, r7, r3
 802351c:	4a1d      	ldr	r2, [pc, #116]	; (8023594 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 802351e:	ca03      	ldmia	r2!, {r0, r1}
 8023520:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 8023522:	231c      	movs	r3, #28
 8023524:	18fb      	adds	r3, r7, r3
 8023526:	4a1c      	ldr	r2, [pc, #112]	; (8023598 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 8023528:	ca03      	ldmia	r2!, {r0, r1}
 802352a:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 802352c:	2300      	movs	r3, #0
 802352e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023530:	e016      	b.n	8023560 <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 8023532:	2324      	movs	r3, #36	; 0x24
 8023534:	18fa      	adds	r2, r7, r3
 8023536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023538:	18d3      	adds	r3, r2, r3
 802353a:	7819      	ldrb	r1, [r3, #0]
 802353c:	202c      	movs	r0, #44	; 0x2c
 802353e:	183a      	adds	r2, r7, r0
 8023540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023542:	18d3      	adds	r3, r2, r3
 8023544:	1c0a      	adds	r2, r1, #0
 8023546:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 8023548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802354a:	3308      	adds	r3, #8
 802354c:	221c      	movs	r2, #28
 802354e:	18b9      	adds	r1, r7, r2
 8023550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023552:	188a      	adds	r2, r1, r2
 8023554:	7811      	ldrb	r1, [r2, #0]
 8023556:	183a      	adds	r2, r7, r0
 8023558:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 802355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802355c:	3301      	adds	r3, #1
 802355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023562:	2b07      	cmp	r3, #7
 8023564:	dde5      	ble.n	8023532 <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 8023566:	232c      	movs	r3, #44	; 0x2c
 8023568:	18fb      	adds	r3, r7, r3
 802356a:	0019      	movs	r1, r3
 802356c:	2007      	movs	r0, #7
 802356e:	f7fd fd8a 	bl	8021086 <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 8023572:	210c      	movs	r1, #12
 8023574:	187b      	adds	r3, r7, r1
 8023576:	4a09      	ldr	r2, [pc, #36]	; (802359c <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 8023578:	ca31      	ldmia	r2!, {r0, r4, r5}
 802357a:	c331      	stmia	r3!, {r0, r4, r5}
 802357c:	6812      	ldr	r2, [r2, #0]
 802357e:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 8023580:	187b      	adds	r3, r7, r1
 8023582:	0019      	movs	r1, r3
 8023584:	2008      	movs	r0, #8
 8023586:	f7fd fd7e 	bl	8021086 <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 802358a:	2300      	movs	r3, #0
}
 802358c:	0018      	movs	r0, r3
 802358e:	46bd      	mov	sp, r7
 8023590:	b010      	add	sp, #64	; 0x40
 8023592:	bdb0      	pop	{r4, r5, r7, pc}
 8023594:	08028130 	.word	0x08028130
 8023598:	08028138 	.word	0x08028138
 802359c:	08028140 	.word	0x08028140

080235a0 <itsdk_lorawan_loop>:

/**
 * This function need to be called in the project_loop function
 * to manage the lorawan stack ( mandatory for async mode )
 */
void itsdk_lorawan_loop() {
 80235a0:	b580      	push	{r7, lr}
 80235a2:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_loop\r\n"));
	lorawan_driver_loop();
 80235a4:	f7e4 fa9c 	bl	8007ae0 <lorawan_driver_loop>
}
 80235a8:	46c0      	nop			; (mov r8, r8)
 80235aa:	46bd      	mov	sp, r7
 80235ac:	bd80      	pop	{r7, pc}
	...

080235b0 <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 80235b0:	4b13      	ldr	r3, [pc, #76]	; (8023600 <lowPower_switch+0x50>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 80235b2:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 80235b4:	781b      	ldrb	r3, [r3, #0]
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d000      	beq.n	80235bc <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 80235ba:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t schedDur = itdt_sched_nextRun();
 80235bc:	f000 fba6 	bl	8023d0c <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 80235c0:	4d10      	ldr	r5, [pc, #64]	; (8023604 <lowPower_switch+0x54>)
			uint32_t schedDur = itdt_sched_nextRun();
 80235c2:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 80235c4:	42a8      	cmp	r0, r5
 80235c6:	d809      	bhi.n	80235dc <lowPower_switch+0x2c>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 80235c8:	f000 fe2e 	bl	8024228 <itsdk_stimer_nextTimeoutMs>
 80235cc:	0003      	movs	r3, r0
 80235ce:	0020      	movs	r0, r4
 80235d0:	429c      	cmp	r4, r3
 80235d2:	d900      	bls.n	80235d6 <lowPower_switch+0x26>
 80235d4:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 80235d6:	2805      	cmp	r0, #5
 80235d8:	d9ef      	bls.n	80235ba <lowPower_switch+0xa>
 80235da:	e004      	b.n	80235e6 <lowPower_switch+0x36>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 80235dc:	f000 fe24 	bl	8024228 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 80235e0:	42a8      	cmp	r0, r5
 80235e2:	d9f8      	bls.n	80235d6 <lowPower_switch+0x26>
			duration = ITSDK_LOWPOWER_RTC_MS;
 80235e4:	4808      	ldr	r0, [pc, #32]	; (8023608 <lowPower_switch+0x58>)
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 80235e6:	2100      	movs	r1, #0
 80235e8:	f002 f81a 	bl	8025620 <stm32l_lowPowerSetup>
 80235ec:	2800      	cmp	r0, #0
 80235ee:	d1e4      	bne.n	80235ba <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 80235f0:	f002 f88e 	bl	8025710 <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 80235f4:	f000 fc84 	bl	8023f00 <itsdk_time_get_us>
 80235f8:	4b04      	ldr	r3, [pc, #16]	; (802360c <lowPower_switch+0x5c>)
 80235fa:	6098      	str	r0, [r3, #8]
 80235fc:	60d9      	str	r1, [r3, #12]
}
 80235fe:	e7dc      	b.n	80235ba <lowPower_switch+0xa>
 8023600:	20001ef0 	.word	0x20001ef0
 8023604:	0000270f 	.word	0x0000270f
 8023608:	00002710 	.word	0x00002710
 802360c:	20002378 	.word	0x20002378

08023610 <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 8023610:	b580      	push	{r7, lr}
 8023612:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 8023614:	4b02      	ldr	r3, [pc, #8]	; (8023620 <lowPower_enable+0x10>)
 8023616:	2200      	movs	r2, #0
 8023618:	701a      	strb	r2, [r3, #0]
}
 802361a:	46c0      	nop			; (mov r8, r8)
 802361c:	46bd      	mov	sp, r7
 802361e:	bd80      	pop	{r7, pc}
 8023620:	20001ef0 	.word	0x20001ef0

08023624 <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 8023624:	b580      	push	{r7, lr}
 8023626:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 8023628:	4b02      	ldr	r3, [pc, #8]	; (8023634 <lowPower_disable+0x10>)
 802362a:	2201      	movs	r2, #1
 802362c:	701a      	strb	r2, [r3, #0]
}
 802362e:	46c0      	nop			; (mov r8, r8)
 8023630:	46bd      	mov	sp, r7
 8023632:	bd80      	pop	{r7, pc}
 8023634:	20001ef0 	.word	0x20001ef0

08023638 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 8023638:	b580      	push	{r7, lr}
 802363a:	af00      	add	r7, sp, #0

	itsdk_time_init();
 802363c:	f000 fc6c 	bl	8023f18 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 8023640:	20f0      	movs	r0, #240	; 0xf0
 8023642:	f7ff fdc3 	bl	80231cc <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 8023646:	f7fc fb19 	bl	801fc7c <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 802364a:	f7ff fbb9 	bl	8022dc0 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 802364e:	f001 fca3 	bl	8024f98 <itsdk_getResetCause>
 8023652:	0003      	movs	r3, r0
 8023654:	b29b      	uxth	r3, r3
 8023656:	4a11      	ldr	r2, [pc, #68]	; (802369c <itsdk_setup+0x64>)
 8023658:	0019      	movs	r1, r3
 802365a:	0010      	movs	r0, r2
 802365c:	f7ff fbe0 	bl	8022e20 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 8023660:	f7fd fde8 	bl	8021234 <itsdk_secstore_isInit>
 8023664:	1e03      	subs	r3, r0, #0
 8023666:	d008      	beq.n	802367a <itsdk_setup+0x42>
		  itsdk_secstore_init();
 8023668:	f7fd fd84 	bl	8021174 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 802366c:	2001      	movs	r0, #1
 802366e:	f7fe fab4 	bl	8021bda <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 8023672:	2001      	movs	r0, #1
 8023674:	f7ff ff3e 	bl	80234f4 <itsdk_lorawan_resetFactoryDefaults>
 8023678:	e002      	b.n	8023680 <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 802367a:	2000      	movs	r0, #0
 802367c:	f7fe faad 	bl	8021bda <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 8023680:	f7fe f9aa 	bl	80219d8 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 8023684:	2000      	movs	r0, #0
 8023686:	f7fc fef5 	bl	8020474 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 802368a:	f7fd fb09 	bl	8020ca0 <itsdk_state_init>
	// Application setup
	project_setup();
 802368e:	f7df fdef 	bl	8003270 <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 8023692:	f001 fcbf 	bl	8025014 <itsdk_cleanResetCause>
    #endif

}
 8023696:	46c0      	nop			; (mov r8, r8)
 8023698:	46bd      	mov	sp, r7
 802369a:	bd80      	pop	{r7, pc}
 802369c:	10000001 	.word	0x10000001

080236a0 <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 80236a0:	b580      	push	{r7, lr}
 80236a2:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 80236a4:	f000 fd64 	bl	8024170 <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 80236a8:	f000 fa82 	bl	8023bb0 <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 80236ac:	f7df fe0c 	bl	80032c8 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 80236b0:	f7fc fb08 	bl	801fcc4 <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 80236b4:	f000 fcf2 	bl	802409c <itsdk_stimer_isLowPowerSwitchAutorized>
 80236b8:	1e03      	subs	r3, r0, #0
 80236ba:	d001      	beq.n	80236c0 <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 80236bc:	f7ff ff78 	bl	80235b0 <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 80236c0:	46c0      	nop			; (mov r8, r8)
 80236c2:	46bd      	mov	sp, r7
 80236c4:	bd80      	pop	{r7, pc}
	...

080236c8 <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 80236c8:	b580      	push	{r7, lr}
 80236ca:	b086      	sub	sp, #24
 80236cc:	af00      	add	r7, sp, #0
 80236ce:	6078      	str	r0, [r7, #4]
 80236d0:	000a      	movs	r2, r1
 80236d2:	1cbb      	adds	r3, r7, #2
 80236d4:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 80236d6:	2301      	movs	r3, #1
 80236d8:	425b      	negs	r3, r3
 80236da:	617b      	str	r3, [r7, #20]
  while (length--) {
 80236dc:	e039      	b.n	8023752 <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 80236de:	687b      	ldr	r3, [r7, #4]
 80236e0:	1c5a      	adds	r2, r3, #1
 80236e2:	607a      	str	r2, [r7, #4]
 80236e4:	220e      	movs	r2, #14
 80236e6:	18ba      	adds	r2, r7, r2
 80236e8:	781b      	ldrb	r3, [r3, #0]
 80236ea:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 80236ec:	2380      	movs	r3, #128	; 0x80
 80236ee:	613b      	str	r3, [r7, #16]
 80236f0:	e02c      	b.n	802374c <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 80236f2:	697b      	ldr	r3, [r7, #20]
 80236f4:	0fdb      	lsrs	r3, r3, #31
 80236f6:	07da      	lsls	r2, r3, #31
 80236f8:	230f      	movs	r3, #15
 80236fa:	18fb      	adds	r3, r7, r3
 80236fc:	1e51      	subs	r1, r2, #1
 80236fe:	418a      	sbcs	r2, r1
 8023700:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 8023702:	230e      	movs	r3, #14
 8023704:	18fb      	adds	r3, r7, r3
 8023706:	781b      	ldrb	r3, [r3, #0]
 8023708:	693a      	ldr	r2, [r7, #16]
 802370a:	4013      	ands	r3, r2
 802370c:	d00f      	beq.n	802372e <itsdk_computeCRC32+0x66>
        bit = !bit;
 802370e:	210f      	movs	r1, #15
 8023710:	187b      	adds	r3, r7, r1
 8023712:	781b      	ldrb	r3, [r3, #0]
 8023714:	1e5a      	subs	r2, r3, #1
 8023716:	4193      	sbcs	r3, r2
 8023718:	b2db      	uxtb	r3, r3
 802371a:	2201      	movs	r2, #1
 802371c:	4053      	eors	r3, r2
 802371e:	b2db      	uxtb	r3, r3
 8023720:	001a      	movs	r2, r3
 8023722:	187b      	adds	r3, r7, r1
 8023724:	701a      	strb	r2, [r3, #0]
 8023726:	781a      	ldrb	r2, [r3, #0]
 8023728:	2101      	movs	r1, #1
 802372a:	400a      	ands	r2, r1
 802372c:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 802372e:	697b      	ldr	r3, [r7, #20]
 8023730:	005b      	lsls	r3, r3, #1
 8023732:	617b      	str	r3, [r7, #20]
      if (bit) {
 8023734:	230f      	movs	r3, #15
 8023736:	18fb      	adds	r3, r7, r3
 8023738:	781b      	ldrb	r3, [r3, #0]
 802373a:	2b00      	cmp	r3, #0
 802373c:	d003      	beq.n	8023746 <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 802373e:	697b      	ldr	r3, [r7, #20]
 8023740:	4a0a      	ldr	r2, [pc, #40]	; (802376c <itsdk_computeCRC32+0xa4>)
 8023742:	4053      	eors	r3, r2
 8023744:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 8023746:	693b      	ldr	r3, [r7, #16]
 8023748:	085b      	lsrs	r3, r3, #1
 802374a:	613b      	str	r3, [r7, #16]
 802374c:	693b      	ldr	r3, [r7, #16]
 802374e:	2b00      	cmp	r3, #0
 8023750:	d1cf      	bne.n	80236f2 <itsdk_computeCRC32+0x2a>
  while (length--) {
 8023752:	1cbb      	adds	r3, r7, #2
 8023754:	881b      	ldrh	r3, [r3, #0]
 8023756:	1cba      	adds	r2, r7, #2
 8023758:	1e59      	subs	r1, r3, #1
 802375a:	8011      	strh	r1, [r2, #0]
 802375c:	2b00      	cmp	r3, #0
 802375e:	d1be      	bne.n	80236de <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 8023760:	697b      	ldr	r3, [r7, #20]
}
 8023762:	0018      	movs	r0, r3
 8023764:	46bd      	mov	sp, r7
 8023766:	b006      	add	sp, #24
 8023768:	bd80      	pop	{r7, pc}
 802376a:	46c0      	nop			; (mov r8, r8)
 802376c:	04c11db7 	.word	0x04c11db7

08023770 <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 8023770:	b580      	push	{r7, lr}
 8023772:	b082      	sub	sp, #8
 8023774:	af00      	add	r7, sp, #0
 8023776:	0002      	movs	r2, r0
 8023778:	1dfb      	adds	r3, r7, #7
 802377a:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 802377c:	1dfb      	adds	r3, r7, #7
 802377e:	781b      	ldrb	r3, [r3, #0]
 8023780:	2b2f      	cmp	r3, #47	; 0x2f
 8023782:	d908      	bls.n	8023796 <itdt_convertNumChar2Int+0x26>
 8023784:	1dfb      	adds	r3, r7, #7
 8023786:	781b      	ldrb	r3, [r3, #0]
 8023788:	2b39      	cmp	r3, #57	; 0x39
 802378a:	d804      	bhi.n	8023796 <itdt_convertNumChar2Int+0x26>
 802378c:	1dfb      	adds	r3, r7, #7
 802378e:	781b      	ldrb	r3, [r3, #0]
 8023790:	3b30      	subs	r3, #48	; 0x30
 8023792:	b2db      	uxtb	r3, r3
 8023794:	e000      	b.n	8023798 <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 8023796:	23ff      	movs	r3, #255	; 0xff
}
 8023798:	0018      	movs	r0, r3
 802379a:	46bd      	mov	sp, r7
 802379c:	b002      	add	sp, #8
 802379e:	bd80      	pop	{r7, pc}

080237a0 <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 80237a0:	b580      	push	{r7, lr}
 80237a2:	b082      	sub	sp, #8
 80237a4:	af00      	add	r7, sp, #0
 80237a6:	0002      	movs	r2, r0
 80237a8:	1dfb      	adds	r3, r7, #7
 80237aa:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 80237ac:	1dfb      	adds	r3, r7, #7
 80237ae:	781b      	ldrb	r3, [r3, #0]
 80237b0:	2b2f      	cmp	r3, #47	; 0x2f
 80237b2:	d908      	bls.n	80237c6 <itdt_convertHexChar2HalfInt+0x26>
 80237b4:	1dfb      	adds	r3, r7, #7
 80237b6:	781b      	ldrb	r3, [r3, #0]
 80237b8:	2b39      	cmp	r3, #57	; 0x39
 80237ba:	d804      	bhi.n	80237c6 <itdt_convertHexChar2HalfInt+0x26>
 80237bc:	1dfb      	adds	r3, r7, #7
 80237be:	781b      	ldrb	r3, [r3, #0]
 80237c0:	3b30      	subs	r3, #48	; 0x30
 80237c2:	b2db      	uxtb	r3, r3
 80237c4:	e01a      	b.n	80237fc <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 80237c6:	1dfb      	adds	r3, r7, #7
 80237c8:	781b      	ldrb	r3, [r3, #0]
 80237ca:	2b60      	cmp	r3, #96	; 0x60
 80237cc:	d908      	bls.n	80237e0 <itdt_convertHexChar2HalfInt+0x40>
 80237ce:	1dfb      	adds	r3, r7, #7
 80237d0:	781b      	ldrb	r3, [r3, #0]
 80237d2:	2b66      	cmp	r3, #102	; 0x66
 80237d4:	d804      	bhi.n	80237e0 <itdt_convertHexChar2HalfInt+0x40>
 80237d6:	1dfb      	adds	r3, r7, #7
 80237d8:	781b      	ldrb	r3, [r3, #0]
 80237da:	3b57      	subs	r3, #87	; 0x57
 80237dc:	b2db      	uxtb	r3, r3
 80237de:	e00d      	b.n	80237fc <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 80237e0:	1dfb      	adds	r3, r7, #7
 80237e2:	781b      	ldrb	r3, [r3, #0]
 80237e4:	2b40      	cmp	r3, #64	; 0x40
 80237e6:	d908      	bls.n	80237fa <itdt_convertHexChar2HalfInt+0x5a>
 80237e8:	1dfb      	adds	r3, r7, #7
 80237ea:	781b      	ldrb	r3, [r3, #0]
 80237ec:	2b46      	cmp	r3, #70	; 0x46
 80237ee:	d804      	bhi.n	80237fa <itdt_convertHexChar2HalfInt+0x5a>
 80237f0:	1dfb      	adds	r3, r7, #7
 80237f2:	781b      	ldrb	r3, [r3, #0]
 80237f4:	3b37      	subs	r3, #55	; 0x37
 80237f6:	b2db      	uxtb	r3, r3
 80237f8:	e000      	b.n	80237fc <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 80237fa:	2300      	movs	r3, #0
}
 80237fc:	0018      	movs	r0, r3
 80237fe:	46bd      	mov	sp, r7
 8023800:	b002      	add	sp, #8
 8023802:	bd80      	pop	{r7, pc}

08023804 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 8023804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023806:	b085      	sub	sp, #20
 8023808:	af00      	add	r7, sp, #0
 802380a:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 802380c:	687b      	ldr	r3, [r7, #4]
 802380e:	781b      	ldrb	r3, [r3, #0]
 8023810:	250f      	movs	r5, #15
 8023812:	197c      	adds	r4, r7, r5
 8023814:	0018      	movs	r0, r3
 8023816:	f7ff ffc3 	bl	80237a0 <itdt_convertHexChar2HalfInt>
 802381a:	0003      	movs	r3, r0
 802381c:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 802381e:	687b      	ldr	r3, [r7, #4]
 8023820:	3301      	adds	r3, #1
 8023822:	781b      	ldrb	r3, [r3, #0]
 8023824:	260e      	movs	r6, #14
 8023826:	19bc      	adds	r4, r7, r6
 8023828:	0018      	movs	r0, r3
 802382a:	f7ff ffb9 	bl	80237a0 <itdt_convertHexChar2HalfInt>
 802382e:	0003      	movs	r3, r0
 8023830:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 8023832:	197b      	adds	r3, r7, r5
 8023834:	781b      	ldrb	r3, [r3, #0]
 8023836:	011b      	lsls	r3, r3, #4
 8023838:	b2da      	uxtb	r2, r3
 802383a:	19bb      	adds	r3, r7, r6
 802383c:	781b      	ldrb	r3, [r3, #0]
 802383e:	18d3      	adds	r3, r2, r3
 8023840:	b2db      	uxtb	r3, r3
}
 8023842:	0018      	movs	r0, r3
 8023844:	46bd      	mov	sp, r7
 8023846:	b005      	add	sp, #20
 8023848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802384a <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 802384a:	b590      	push	{r4, r7, lr}
 802384c:	b085      	sub	sp, #20
 802384e:	af00      	add	r7, sp, #0
 8023850:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 8023852:	687b      	ldr	r3, [r7, #4]
 8023854:	0018      	movs	r0, r3
 8023856:	f7ff ffd5 	bl	8023804 <itdt_convertHexChar2Int>
 802385a:	0003      	movs	r3, r0
 802385c:	001a      	movs	r2, r3
 802385e:	240e      	movs	r4, #14
 8023860:	193b      	adds	r3, r7, r4
 8023862:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 8023864:	193b      	adds	r3, r7, r4
 8023866:	193a      	adds	r2, r7, r4
 8023868:	8812      	ldrh	r2, [r2, #0]
 802386a:	0212      	lsls	r2, r2, #8
 802386c:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 802386e:	687b      	ldr	r3, [r7, #4]
 8023870:	3302      	adds	r3, #2
 8023872:	0018      	movs	r0, r3
 8023874:	f7ff ffc6 	bl	8023804 <itdt_convertHexChar2Int>
 8023878:	0003      	movs	r3, r0
 802387a:	b299      	uxth	r1, r3
 802387c:	193b      	adds	r3, r7, r4
 802387e:	193a      	adds	r2, r7, r4
 8023880:	8812      	ldrh	r2, [r2, #0]
 8023882:	188a      	adds	r2, r1, r2
 8023884:	801a      	strh	r2, [r3, #0]
  return ret;
 8023886:	193b      	adds	r3, r7, r4
 8023888:	881b      	ldrh	r3, [r3, #0]
}
 802388a:	0018      	movs	r0, r3
 802388c:	46bd      	mov	sp, r7
 802388e:	b005      	add	sp, #20
 8023890:	bd90      	pop	{r4, r7, pc}
	...

08023894 <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 8023894:	b5b0      	push	{r4, r5, r7, lr}
 8023896:	b086      	sub	sp, #24
 8023898:	af00      	add	r7, sp, #0
 802389a:	6078      	str	r0, [r7, #4]
 802389c:	6039      	str	r1, [r7, #0]
	int sign = 1;
 802389e:	2301      	movs	r3, #1
 80238a0:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	781b      	ldrb	r3, [r3, #0]
 80238a6:	2b2d      	cmp	r3, #45	; 0x2d
 80238a8:	d108      	bne.n	80238bc <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 80238aa:	2301      	movs	r3, #1
 80238ac:	425b      	negs	r3, r3
 80238ae:	617b      	str	r3, [r7, #20]
	   v++;
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	3301      	adds	r3, #1
 80238b4:	607b      	str	r3, [r7, #4]
	   sz--;
 80238b6:	683b      	ldr	r3, [r7, #0]
 80238b8:	3b01      	subs	r3, #1
 80238ba:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 80238bc:	2312      	movs	r3, #18
 80238be:	18fb      	adds	r3, r7, r3
 80238c0:	2200      	movs	r2, #0
 80238c2:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 80238c4:	2300      	movs	r3, #0
 80238c6:	60fb      	str	r3, [r7, #12]
 80238c8:	e027      	b.n	802391a <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 80238ca:	2312      	movs	r3, #18
 80238cc:	18fa      	adds	r2, r7, r3
 80238ce:	18fb      	adds	r3, r7, r3
 80238d0:	881b      	ldrh	r3, [r3, #0]
 80238d2:	1c19      	adds	r1, r3, #0
 80238d4:	0089      	lsls	r1, r1, #2
 80238d6:	18cb      	adds	r3, r1, r3
 80238d8:	18db      	adds	r3, r3, r3
 80238da:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	781b      	ldrb	r3, [r3, #0]
 80238e0:	250b      	movs	r5, #11
 80238e2:	197c      	adds	r4, r7, r5
 80238e4:	0018      	movs	r0, r3
 80238e6:	f7ff ff43 	bl	8023770 <itdt_convertNumChar2Int>
 80238ea:	0003      	movs	r3, r0
 80238ec:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 80238ee:	197b      	adds	r3, r7, r5
 80238f0:	781b      	ldrb	r3, [r3, #0]
 80238f2:	2bff      	cmp	r3, #255	; 0xff
 80238f4:	d101      	bne.n	80238fa <itdt_convertDecCharNInt+0x66>
 80238f6:	4b12      	ldr	r3, [pc, #72]	; (8023940 <itdt_convertDecCharNInt+0xac>)
 80238f8:	e01d      	b.n	8023936 <itdt_convertDecCharNInt+0xa2>
	  v++;
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	3301      	adds	r3, #1
 80238fe:	607b      	str	r3, [r7, #4]
	  ret+= c;
 8023900:	230b      	movs	r3, #11
 8023902:	18fb      	adds	r3, r7, r3
 8023904:	781b      	ldrb	r3, [r3, #0]
 8023906:	b299      	uxth	r1, r3
 8023908:	2212      	movs	r2, #18
 802390a:	18bb      	adds	r3, r7, r2
 802390c:	18ba      	adds	r2, r7, r2
 802390e:	8812      	ldrh	r2, [r2, #0]
 8023910:	188a      	adds	r2, r1, r2
 8023912:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	3301      	adds	r3, #1
 8023918:	60fb      	str	r3, [r7, #12]
 802391a:	68fa      	ldr	r2, [r7, #12]
 802391c:	683b      	ldr	r3, [r7, #0]
 802391e:	429a      	cmp	r2, r3
 8023920:	dbd3      	blt.n	80238ca <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 8023922:	697b      	ldr	r3, [r7, #20]
 8023924:	b29a      	uxth	r2, r3
 8023926:	2012      	movs	r0, #18
 8023928:	183b      	adds	r3, r7, r0
 802392a:	1839      	adds	r1, r7, r0
 802392c:	8809      	ldrh	r1, [r1, #0]
 802392e:	434a      	muls	r2, r1
 8023930:	801a      	strh	r2, [r3, #0]
	 return ret;
 8023932:	183b      	adds	r3, r7, r0
 8023934:	881b      	ldrh	r3, [r3, #0]
}
 8023936:	0018      	movs	r0, r3
 8023938:	46bd      	mov	sp, r7
 802393a:	b006      	add	sp, #24
 802393c:	bdb0      	pop	{r4, r5, r7, pc}
 802393e:	46c0      	nop			; (mov r8, r8)
 8023940:	0fffffff 	.word	0x0fffffff

08023944 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 8023944:	b580      	push	{r7, lr}
 8023946:	b082      	sub	sp, #8
 8023948:	af00      	add	r7, sp, #0
 802394a:	0002      	movs	r2, r0
 802394c:	1dfb      	adds	r3, r7, #7
 802394e:	701a      	strb	r2, [r3, #0]
 8023950:	1dbb      	adds	r3, r7, #6
 8023952:	1c0a      	adds	r2, r1, #0
 8023954:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 8023956:	1dfb      	adds	r3, r7, #7
 8023958:	781b      	ldrb	r3, [r3, #0]
 802395a:	2b2f      	cmp	r3, #47	; 0x2f
 802395c:	d903      	bls.n	8023966 <itdt_isHexChar+0x22>
 802395e:	1dfb      	adds	r3, r7, #7
 8023960:	781b      	ldrb	r3, [r3, #0]
 8023962:	2b39      	cmp	r3, #57	; 0x39
 8023964:	d916      	bls.n	8023994 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 8023966:	1dfb      	adds	r3, r7, #7
 8023968:	781b      	ldrb	r3, [r3, #0]
 802396a:	2b40      	cmp	r3, #64	; 0x40
 802396c:	d903      	bls.n	8023976 <itdt_isHexChar+0x32>
 802396e:	1dfb      	adds	r3, r7, #7
 8023970:	781b      	ldrb	r3, [r3, #0]
 8023972:	2b46      	cmp	r3, #70	; 0x46
 8023974:	d90e      	bls.n	8023994 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 8023976:	1dbb      	adds	r3, r7, #6
 8023978:	781b      	ldrb	r3, [r3, #0]
 802397a:	2201      	movs	r2, #1
 802397c:	4053      	eors	r3, r2
 802397e:	b2db      	uxtb	r3, r3
 8023980:	2b00      	cmp	r3, #0
 8023982:	d009      	beq.n	8023998 <itdt_isHexChar+0x54>
 8023984:	1dfb      	adds	r3, r7, #7
 8023986:	781b      	ldrb	r3, [r3, #0]
 8023988:	2b60      	cmp	r3, #96	; 0x60
 802398a:	d905      	bls.n	8023998 <itdt_isHexChar+0x54>
 802398c:	1dfb      	adds	r3, r7, #7
 802398e:	781b      	ldrb	r3, [r3, #0]
 8023990:	2b66      	cmp	r3, #102	; 0x66
 8023992:	d801      	bhi.n	8023998 <itdt_isHexChar+0x54>
    ) {
    return true;
 8023994:	2301      	movs	r3, #1
 8023996:	e000      	b.n	802399a <itdt_isHexChar+0x56>
  }
  return false;
 8023998:	2300      	movs	r3, #0
}
 802399a:	0018      	movs	r0, r3
 802399c:	46bd      	mov	sp, r7
 802399e:	b002      	add	sp, #8
 80239a0:	bd80      	pop	{r7, pc}

080239a2 <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 80239a2:	b580      	push	{r7, lr}
 80239a4:	b086      	sub	sp, #24
 80239a6:	af00      	add	r7, sp, #0
 80239a8:	60f8      	str	r0, [r7, #12]
 80239aa:	60b9      	str	r1, [r7, #8]
 80239ac:	1dfb      	adds	r3, r7, #7
 80239ae:	701a      	strb	r2, [r3, #0]
  int i = 0;
 80239b0:	2300      	movs	r3, #0
 80239b2:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 80239b4:	e02d      	b.n	8023a12 <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 80239b6:	697b      	ldr	r3, [r7, #20]
 80239b8:	68fa      	ldr	r2, [r7, #12]
 80239ba:	18d3      	adds	r3, r2, r3
 80239bc:	781b      	ldrb	r3, [r3, #0]
 80239be:	2b2f      	cmp	r3, #47	; 0x2f
 80239c0:	d905      	bls.n	80239ce <itdt_isHexString+0x2c>
 80239c2:	697b      	ldr	r3, [r7, #20]
 80239c4:	68fa      	ldr	r2, [r7, #12]
 80239c6:	18d3      	adds	r3, r2, r3
 80239c8:	781b      	ldrb	r3, [r3, #0]
 80239ca:	2b39      	cmp	r3, #57	; 0x39
 80239cc:	d91b      	bls.n	8023a06 <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 80239ce:	697b      	ldr	r3, [r7, #20]
 80239d0:	68fa      	ldr	r2, [r7, #12]
 80239d2:	18d3      	adds	r3, r2, r3
 80239d4:	781b      	ldrb	r3, [r3, #0]
 80239d6:	2b40      	cmp	r3, #64	; 0x40
 80239d8:	d905      	bls.n	80239e6 <itdt_isHexString+0x44>
 80239da:	697b      	ldr	r3, [r7, #20]
 80239dc:	68fa      	ldr	r2, [r7, #12]
 80239de:	18d3      	adds	r3, r2, r3
 80239e0:	781b      	ldrb	r3, [r3, #0]
 80239e2:	2b46      	cmp	r3, #70	; 0x46
 80239e4:	d90f      	bls.n	8023a06 <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 80239e6:	1dfb      	adds	r3, r7, #7
 80239e8:	781b      	ldrb	r3, [r3, #0]
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d10f      	bne.n	8023a0e <itdt_isHexString+0x6c>
 80239ee:	697b      	ldr	r3, [r7, #20]
 80239f0:	68fa      	ldr	r2, [r7, #12]
 80239f2:	18d3      	adds	r3, r2, r3
 80239f4:	781b      	ldrb	r3, [r3, #0]
 80239f6:	2b60      	cmp	r3, #96	; 0x60
 80239f8:	d909      	bls.n	8023a0e <itdt_isHexString+0x6c>
 80239fa:	697b      	ldr	r3, [r7, #20]
 80239fc:	68fa      	ldr	r2, [r7, #12]
 80239fe:	18d3      	adds	r3, r2, r3
 8023a00:	781b      	ldrb	r3, [r3, #0]
 8023a02:	2b66      	cmp	r3, #102	; 0x66
 8023a04:	d803      	bhi.n	8023a0e <itdt_isHexString+0x6c>
       ) {
      i++;
 8023a06:	697b      	ldr	r3, [r7, #20]
 8023a08:	3301      	adds	r3, #1
 8023a0a:	617b      	str	r3, [r7, #20]
 8023a0c:	e001      	b.n	8023a12 <itdt_isHexString+0x70>
    } else {
      return false;
 8023a0e:	2300      	movs	r3, #0
 8023a10:	e00f      	b.n	8023a32 <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 8023a12:	697a      	ldr	r2, [r7, #20]
 8023a14:	68bb      	ldr	r3, [r7, #8]
 8023a16:	429a      	cmp	r2, r3
 8023a18:	da05      	bge.n	8023a26 <itdt_isHexString+0x84>
 8023a1a:	697b      	ldr	r3, [r7, #20]
 8023a1c:	68fa      	ldr	r2, [r7, #12]
 8023a1e:	18d3      	adds	r3, r2, r3
 8023a20:	781b      	ldrb	r3, [r3, #0]
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	d1c7      	bne.n	80239b6 <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 8023a26:	697a      	ldr	r2, [r7, #20]
 8023a28:	68bb      	ldr	r3, [r7, #8]
 8023a2a:	1ad3      	subs	r3, r2, r3
 8023a2c:	425a      	negs	r2, r3
 8023a2e:	4153      	adcs	r3, r2
 8023a30:	b2db      	uxtb	r3, r3
}
 8023a32:	0018      	movs	r0, r3
 8023a34:	46bd      	mov	sp, r7
 8023a36:	b006      	add	sp, #24
 8023a38:	bd80      	pop	{r7, pc}

08023a3a <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 8023a3a:	b580      	push	{r7, lr}
 8023a3c:	b084      	sub	sp, #16
 8023a3e:	af00      	add	r7, sp, #0
 8023a40:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8023a42:	230f      	movs	r3, #15
 8023a44:	18fb      	adds	r3, r7, r3
 8023a46:	2200      	movs	r2, #0
 8023a48:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 8023a4a:	e00c      	b.n	8023a66 <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	2201      	movs	r2, #1
 8023a50:	4013      	ands	r3, r2
 8023a52:	d005      	beq.n	8023a60 <itdt_count_bits_1+0x26>
 8023a54:	210f      	movs	r1, #15
 8023a56:	187b      	adds	r3, r7, r1
 8023a58:	781a      	ldrb	r2, [r3, #0]
 8023a5a:	187b      	adds	r3, r7, r1
 8023a5c:	3201      	adds	r2, #1
 8023a5e:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 8023a60:	687b      	ldr	r3, [r7, #4]
 8023a62:	085b      	lsrs	r3, r3, #1
 8023a64:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d1ef      	bne.n	8023a4c <itdt_count_bits_1+0x12>
	}
	return ret;
 8023a6c:	230f      	movs	r3, #15
 8023a6e:	18fb      	adds	r3, r7, r3
 8023a70:	781b      	ldrb	r3, [r3, #0]
}
 8023a72:	0018      	movs	r0, r3
 8023a74:	46bd      	mov	sp, r7
 8023a76:	b004      	add	sp, #16
 8023a78:	bd80      	pop	{r7, pc}
	...

08023a7c <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 8023a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a7e:	b085      	sub	sp, #20
 8023a80:	af00      	add	r7, sp, #0
 8023a82:	60f8      	str	r0, [r7, #12]
 8023a84:	607a      	str	r2, [r7, #4]
 8023a86:	230a      	movs	r3, #10
 8023a88:	18fb      	adds	r3, r7, r3
 8023a8a:	1c0a      	adds	r2, r1, #0
 8023a8c:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	4a43      	ldr	r2, [pc, #268]	; (8023ba0 <itdt_sched_registerSched+0x124>)
 8023a92:	4293      	cmp	r3, r2
 8023a94:	d906      	bls.n	8023aa4 <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 8023a96:	4b43      	ldr	r3, [pc, #268]	; (8023ba4 <itdt_sched_registerSched+0x128>)
 8023a98:	2100      	movs	r1, #0
 8023a9a:	0018      	movs	r0, r3
 8023a9c:	f7ff f9c0 	bl	8022e20 <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 8023aa0:	23ff      	movs	r3, #255	; 0xff
 8023aa2:	e079      	b.n	8023b98 <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 8023aa4:	4b40      	ldr	r3, [pc, #256]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023aa6:	781b      	ldrb	r3, [r3, #0]
 8023aa8:	2b00      	cmp	r3, #0
 8023aaa:	d174      	bne.n	8023b96 <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 8023aac:	4b3e      	ldr	r3, [pc, #248]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023aae:	781b      	ldrb	r3, [r3, #0]
 8023ab0:	4a3e      	ldr	r2, [pc, #248]	; (8023bac <itdt_sched_registerSched+0x130>)
 8023ab2:	011b      	lsls	r3, r3, #4
 8023ab4:	18d3      	adds	r3, r2, r3
 8023ab6:	330c      	adds	r3, #12
 8023ab8:	687a      	ldr	r2, [r7, #4]
 8023aba:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 8023abc:	4b3a      	ldr	r3, [pc, #232]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023abe:	781b      	ldrb	r3, [r3, #0]
 8023ac0:	001e      	movs	r6, r3
 8023ac2:	68fb      	ldr	r3, [r7, #12]
 8023ac4:	021b      	lsls	r3, r3, #8
 8023ac6:	0a1a      	lsrs	r2, r3, #8
 8023ac8:	4938      	ldr	r1, [pc, #224]	; (8023bac <itdt_sched_registerSched+0x130>)
 8023aca:	2008      	movs	r0, #8
 8023acc:	0133      	lsls	r3, r6, #4
 8023ace:	18cb      	adds	r3, r1, r3
 8023ad0:	181b      	adds	r3, r3, r0
 8023ad2:	0212      	lsls	r2, r2, #8
 8023ad4:	0a12      	lsrs	r2, r2, #8
 8023ad6:	6819      	ldr	r1, [r3, #0]
 8023ad8:	0e09      	lsrs	r1, r1, #24
 8023ada:	0609      	lsls	r1, r1, #24
 8023adc:	430a      	orrs	r2, r1
 8023ade:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 8023ae0:	230a      	movs	r3, #10
 8023ae2:	18fb      	adds	r3, r7, r3
 8023ae4:	881a      	ldrh	r2, [r3, #0]
 8023ae6:	2380      	movs	r3, #128	; 0x80
 8023ae8:	005b      	lsls	r3, r3, #1
 8023aea:	4013      	ands	r3, r2
 8023aec:	d004      	beq.n	8023af8 <itdt_sched_registerSched+0x7c>
 8023aee:	f000 f9f5 	bl	8023edc <itsdk_time_get_ms>
 8023af2:	0003      	movs	r3, r0
 8023af4:	000c      	movs	r4, r1
 8023af6:	e00b      	b.n	8023b10 <itdt_sched_registerSched+0x94>
 8023af8:	f000 f9f0 	bl	8023edc <itsdk_time_get_ms>
 8023afc:	0002      	movs	r2, r0
 8023afe:	000b      	movs	r3, r1
 8023b00:	68f9      	ldr	r1, [r7, #12]
 8023b02:	000c      	movs	r4, r1
 8023b04:	2100      	movs	r1, #0
 8023b06:	000d      	movs	r5, r1
 8023b08:	1912      	adds	r2, r2, r4
 8023b0a:	416b      	adcs	r3, r5
 8023b0c:	001c      	movs	r4, r3
 8023b0e:	0013      	movs	r3, r2
 8023b10:	4a25      	ldr	r2, [pc, #148]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023b12:	7812      	ldrb	r2, [r2, #0]
 8023b14:	4925      	ldr	r1, [pc, #148]	; (8023bac <itdt_sched_registerSched+0x130>)
 8023b16:	0112      	lsls	r2, r2, #4
 8023b18:	188a      	adds	r2, r1, r2
 8023b1a:	6013      	str	r3, [r2, #0]
 8023b1c:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 8023b1e:	250a      	movs	r5, #10
 8023b20:	197b      	adds	r3, r7, r5
 8023b22:	881b      	ldrh	r3, [r3, #0]
 8023b24:	105a      	asrs	r2, r3, #1
 8023b26:	4b20      	ldr	r3, [pc, #128]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023b28:	781b      	ldrb	r3, [r3, #0]
 8023b2a:	001c      	movs	r4, r3
 8023b2c:	2301      	movs	r3, #1
 8023b2e:	4013      	ands	r3, r2
 8023b30:	b2da      	uxtb	r2, r3
 8023b32:	491e      	ldr	r1, [pc, #120]	; (8023bac <itdt_sched_registerSched+0x130>)
 8023b34:	2008      	movs	r0, #8
 8023b36:	0123      	lsls	r3, r4, #4
 8023b38:	18cb      	adds	r3, r1, r3
 8023b3a:	181b      	adds	r3, r3, r0
 8023b3c:	2101      	movs	r1, #1
 8023b3e:	400a      	ands	r2, r1
 8023b40:	1890      	adds	r0, r2, r2
 8023b42:	78da      	ldrb	r2, [r3, #3]
 8023b44:	2102      	movs	r1, #2
 8023b46:	438a      	bics	r2, r1
 8023b48:	1c11      	adds	r1, r2, #0
 8023b4a:	1c02      	adds	r2, r0, #0
 8023b4c:	430a      	orrs	r2, r1
 8023b4e:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 8023b50:	4b15      	ldr	r3, [pc, #84]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023b52:	781b      	ldrb	r3, [r3, #0]
 8023b54:	001c      	movs	r4, r3
 8023b56:	197b      	adds	r3, r7, r5
 8023b58:	881b      	ldrh	r3, [r3, #0]
 8023b5a:	1c1a      	adds	r2, r3, #0
 8023b5c:	2301      	movs	r3, #1
 8023b5e:	4013      	ands	r3, r2
 8023b60:	b2da      	uxtb	r2, r3
 8023b62:	4912      	ldr	r1, [pc, #72]	; (8023bac <itdt_sched_registerSched+0x130>)
 8023b64:	2008      	movs	r0, #8
 8023b66:	0123      	lsls	r3, r4, #4
 8023b68:	18cb      	adds	r3, r1, r3
 8023b6a:	181b      	adds	r3, r3, r0
 8023b6c:	2101      	movs	r1, #1
 8023b6e:	400a      	ands	r2, r1
 8023b70:	0010      	movs	r0, r2
 8023b72:	78da      	ldrb	r2, [r3, #3]
 8023b74:	2101      	movs	r1, #1
 8023b76:	438a      	bics	r2, r1
 8023b78:	1c11      	adds	r1, r2, #0
 8023b7a:	1c02      	adds	r2, r0, #0
 8023b7c:	430a      	orrs	r2, r1
 8023b7e:	70da      	strb	r2, [r3, #3]
		__sNum++;
 8023b80:	4b09      	ldr	r3, [pc, #36]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023b82:	781b      	ldrb	r3, [r3, #0]
 8023b84:	3301      	adds	r3, #1
 8023b86:	b2da      	uxtb	r2, r3
 8023b88:	4b07      	ldr	r3, [pc, #28]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023b8a:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 8023b8c:	4b06      	ldr	r3, [pc, #24]	; (8023ba8 <itdt_sched_registerSched+0x12c>)
 8023b8e:	781b      	ldrb	r3, [r3, #0]
 8023b90:	3b01      	subs	r3, #1
 8023b92:	b2db      	uxtb	r3, r3
 8023b94:	e000      	b.n	8023b98 <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 8023b96:	23ff      	movs	r3, #255	; 0xff

}
 8023b98:	0018      	movs	r0, r3
 8023b9a:	46bd      	mov	sp, r7
 8023b9c:	b005      	add	sp, #20
 8023b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ba0:	00ffffff 	.word	0x00ffffff
 8023ba4:	80000050 	.word	0x80000050
 8023ba8:	20001ef1 	.word	0x20001ef1
 8023bac:	20002390 	.word	0x20002390

08023bb0 <itdt_sched_execute>:

/**
 * Task executor
 */
void itdt_sched_execute() {
 8023bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bb2:	b087      	sub	sp, #28
 8023bb4:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 8023bb6:	f000 f991 	bl	8023edc <itsdk_time_get_ms>
 8023bba:	0003      	movs	r3, r0
 8023bbc:	000c      	movs	r4, r1
 8023bbe:	60bb      	str	r3, [r7, #8]
 8023bc0:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 8023bc2:	2300      	movs	r3, #0
 8023bc4:	617b      	str	r3, [r7, #20]
 8023bc6:	e091      	b.n	8023cec <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 8023bc8:	4a4e      	ldr	r2, [pc, #312]	; (8023d04 <itdt_sched_execute+0x154>)
 8023bca:	697b      	ldr	r3, [r7, #20]
 8023bcc:	011b      	lsls	r3, r3, #4
 8023bce:	18d3      	adds	r3, r2, r3
 8023bd0:	685c      	ldr	r4, [r3, #4]
 8023bd2:	681b      	ldr	r3, [r3, #0]
 8023bd4:	68fa      	ldr	r2, [r7, #12]
 8023bd6:	42a2      	cmp	r2, r4
 8023bd8:	d332      	bcc.n	8023c40 <itdt_sched_execute+0x90>
 8023bda:	68fa      	ldr	r2, [r7, #12]
 8023bdc:	42a2      	cmp	r2, r4
 8023bde:	d102      	bne.n	8023be6 <itdt_sched_execute+0x36>
 8023be0:	68ba      	ldr	r2, [r7, #8]
 8023be2:	429a      	cmp	r2, r3
 8023be4:	d32c      	bcc.n	8023c40 <itdt_sched_execute+0x90>
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 8023be6:	4a47      	ldr	r2, [pc, #284]	; (8023d04 <itdt_sched_execute+0x154>)
 8023be8:	697b      	ldr	r3, [r7, #20]
 8023bea:	011b      	lsls	r3, r3, #4
 8023bec:	18d3      	adds	r3, r2, r3
 8023bee:	685c      	ldr	r4, [r3, #4]
 8023bf0:	681b      	ldr	r3, [r3, #0]
 8023bf2:	4944      	ldr	r1, [pc, #272]	; (8023d04 <itdt_sched_execute+0x154>)
 8023bf4:	697a      	ldr	r2, [r7, #20]
 8023bf6:	2008      	movs	r0, #8
 8023bf8:	0112      	lsls	r2, r2, #4
 8023bfa:	188a      	adds	r2, r1, r2
 8023bfc:	1812      	adds	r2, r2, r0
 8023bfe:	6812      	ldr	r2, [r2, #0]
 8023c00:	0212      	lsls	r2, r2, #8
 8023c02:	0a12      	lsrs	r2, r2, #8
 8023c04:	0015      	movs	r5, r2
 8023c06:	2200      	movs	r2, #0
 8023c08:	0016      	movs	r6, r2
 8023c0a:	195b      	adds	r3, r3, r5
 8023c0c:	4174      	adcs	r4, r6
 8023c0e:	493d      	ldr	r1, [pc, #244]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c10:	697a      	ldr	r2, [r7, #20]
 8023c12:	0112      	lsls	r2, r2, #4
 8023c14:	188a      	adds	r2, r1, r2
 8023c16:	6013      	str	r3, [r2, #0]
 8023c18:	6054      	str	r4, [r2, #4]
				if ( !__scheds[i].halt ) {
 8023c1a:	4a3a      	ldr	r2, [pc, #232]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c1c:	697b      	ldr	r3, [r7, #20]
 8023c1e:	2108      	movs	r1, #8
 8023c20:	011b      	lsls	r3, r3, #4
 8023c22:	18d3      	adds	r3, r2, r3
 8023c24:	185b      	adds	r3, r3, r1
 8023c26:	78db      	ldrb	r3, [r3, #3]
 8023c28:	079b      	lsls	r3, r3, #30
 8023c2a:	0fdb      	lsrs	r3, r3, #31
 8023c2c:	b2db      	uxtb	r3, r3
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d106      	bne.n	8023c40 <itdt_sched_execute+0x90>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 8023c32:	4a34      	ldr	r2, [pc, #208]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c34:	697b      	ldr	r3, [r7, #20]
 8023c36:	011b      	lsls	r3, r3, #4
 8023c38:	18d3      	adds	r3, r2, r3
 8023c3a:	330c      	adds	r3, #12
 8023c3c:	681b      	ldr	r3, [r3, #0]
 8023c3e:	4798      	blx	r3
				}
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 8023c40:	4a30      	ldr	r2, [pc, #192]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c42:	697b      	ldr	r3, [r7, #20]
 8023c44:	2108      	movs	r1, #8
 8023c46:	011b      	lsls	r3, r3, #4
 8023c48:	18d3      	adds	r3, r2, r3
 8023c4a:	185b      	adds	r3, r3, r1
 8023c4c:	78db      	ldrb	r3, [r3, #3]
 8023c4e:	07db      	lsls	r3, r3, #31
 8023c50:	0fdb      	lsrs	r3, r3, #31
 8023c52:	b2db      	uxtb	r3, r3
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d12b      	bne.n	8023cb0 <itdt_sched_execute+0x100>
 8023c58:	4a2a      	ldr	r2, [pc, #168]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c5a:	697b      	ldr	r3, [r7, #20]
 8023c5c:	011b      	lsls	r3, r3, #4
 8023c5e:	18d3      	adds	r3, r2, r3
 8023c60:	685c      	ldr	r4, [r3, #4]
 8023c62:	681b      	ldr	r3, [r3, #0]
 8023c64:	68fa      	ldr	r2, [r7, #12]
 8023c66:	42a2      	cmp	r2, r4
 8023c68:	d322      	bcc.n	8023cb0 <itdt_sched_execute+0x100>
 8023c6a:	68fa      	ldr	r2, [r7, #12]
 8023c6c:	42a2      	cmp	r2, r4
 8023c6e:	d1ab      	bne.n	8023bc8 <itdt_sched_execute+0x18>
 8023c70:	68ba      	ldr	r2, [r7, #8]
 8023c72:	429a      	cmp	r2, r3
 8023c74:	d31c      	bcc.n	8023cb0 <itdt_sched_execute+0x100>
 8023c76:	e7a7      	b.n	8023bc8 <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 8023c78:	4a22      	ldr	r2, [pc, #136]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c7a:	697b      	ldr	r3, [r7, #20]
 8023c7c:	011b      	lsls	r3, r3, #4
 8023c7e:	18d3      	adds	r3, r2, r3
 8023c80:	685c      	ldr	r4, [r3, #4]
 8023c82:	681b      	ldr	r3, [r3, #0]
 8023c84:	491f      	ldr	r1, [pc, #124]	; (8023d04 <itdt_sched_execute+0x154>)
 8023c86:	697a      	ldr	r2, [r7, #20]
 8023c88:	2008      	movs	r0, #8
 8023c8a:	0112      	lsls	r2, r2, #4
 8023c8c:	188a      	adds	r2, r1, r2
 8023c8e:	1812      	adds	r2, r2, r0
 8023c90:	6812      	ldr	r2, [r2, #0]
 8023c92:	0212      	lsls	r2, r2, #8
 8023c94:	0a12      	lsrs	r2, r2, #8
 8023c96:	603a      	str	r2, [r7, #0]
 8023c98:	2200      	movs	r2, #0
 8023c9a:	607a      	str	r2, [r7, #4]
 8023c9c:	6839      	ldr	r1, [r7, #0]
 8023c9e:	687a      	ldr	r2, [r7, #4]
 8023ca0:	185b      	adds	r3, r3, r1
 8023ca2:	4154      	adcs	r4, r2
 8023ca4:	4917      	ldr	r1, [pc, #92]	; (8023d04 <itdt_sched_execute+0x154>)
 8023ca6:	697a      	ldr	r2, [r7, #20]
 8023ca8:	0112      	lsls	r2, r2, #4
 8023caa:	188a      	adds	r2, r1, r2
 8023cac:	6013      	str	r3, [r2, #0]
 8023cae:	6054      	str	r4, [r2, #4]
 8023cb0:	4a14      	ldr	r2, [pc, #80]	; (8023d04 <itdt_sched_execute+0x154>)
 8023cb2:	697b      	ldr	r3, [r7, #20]
 8023cb4:	2108      	movs	r1, #8
 8023cb6:	011b      	lsls	r3, r3, #4
 8023cb8:	18d3      	adds	r3, r2, r3
 8023cba:	185b      	adds	r3, r3, r1
 8023cbc:	78db      	ldrb	r3, [r3, #3]
 8023cbe:	07db      	lsls	r3, r3, #31
 8023cc0:	0fdb      	lsrs	r3, r3, #31
 8023cc2:	b2db      	uxtb	r3, r3
 8023cc4:	2b00      	cmp	r3, #0
 8023cc6:	d00e      	beq.n	8023ce6 <itdt_sched_execute+0x136>
 8023cc8:	4a0e      	ldr	r2, [pc, #56]	; (8023d04 <itdt_sched_execute+0x154>)
 8023cca:	697b      	ldr	r3, [r7, #20]
 8023ccc:	011b      	lsls	r3, r3, #4
 8023cce:	18d3      	adds	r3, r2, r3
 8023cd0:	685c      	ldr	r4, [r3, #4]
 8023cd2:	681b      	ldr	r3, [r3, #0]
 8023cd4:	68fa      	ldr	r2, [r7, #12]
 8023cd6:	42a2      	cmp	r2, r4
 8023cd8:	d305      	bcc.n	8023ce6 <itdt_sched_execute+0x136>
 8023cda:	68fa      	ldr	r2, [r7, #12]
 8023cdc:	42a2      	cmp	r2, r4
 8023cde:	d1cb      	bne.n	8023c78 <itdt_sched_execute+0xc8>
 8023ce0:	68ba      	ldr	r2, [r7, #8]
 8023ce2:	429a      	cmp	r2, r3
 8023ce4:	d2c8      	bcs.n	8023c78 <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 8023ce6:	697b      	ldr	r3, [r7, #20]
 8023ce8:	3301      	adds	r3, #1
 8023cea:	617b      	str	r3, [r7, #20]
 8023cec:	4b06      	ldr	r3, [pc, #24]	; (8023d08 <itdt_sched_execute+0x158>)
 8023cee:	781b      	ldrb	r3, [r3, #0]
 8023cf0:	001a      	movs	r2, r3
 8023cf2:	697b      	ldr	r3, [r7, #20]
 8023cf4:	4293      	cmp	r3, r2
 8023cf6:	da00      	bge.n	8023cfa <itdt_sched_execute+0x14a>
 8023cf8:	e766      	b.n	8023bc8 <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 8023cfa:	46c0      	nop			; (mov r8, r8)
 8023cfc:	46bd      	mov	sp, r7
 8023cfe:	b007      	add	sp, #28
 8023d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d02:	46c0      	nop			; (mov r8, r8)
 8023d04:	20002390 	.word	0x20002390
 8023d08:	20001ef1 	.word	0x20001ef1

08023d0c <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 8023d0c:	b590      	push	{r4, r7, lr}
 8023d0e:	b087      	sub	sp, #28
 8023d10:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 8023d12:	2300      	movs	r3, #0
 8023d14:	2400      	movs	r4, #0
 8023d16:	613b      	str	r3, [r7, #16]
 8023d18:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8023d1a:	2300      	movs	r3, #0
 8023d1c:	60fb      	str	r3, [r7, #12]
 8023d1e:	e029      	b.n	8023d74 <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 8023d20:	4a28      	ldr	r2, [pc, #160]	; (8023dc4 <itdt_sched_nextRun+0xb8>)
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	2108      	movs	r1, #8
 8023d26:	011b      	lsls	r3, r3, #4
 8023d28:	18d3      	adds	r3, r2, r3
 8023d2a:	185b      	adds	r3, r3, r1
 8023d2c:	78db      	ldrb	r3, [r3, #3]
 8023d2e:	079b      	lsls	r3, r3, #30
 8023d30:	0fdb      	lsrs	r3, r3, #31
 8023d32:	b2db      	uxtb	r3, r3
 8023d34:	2b00      	cmp	r3, #0
 8023d36:	d11a      	bne.n	8023d6e <itdt_sched_nextRun+0x62>
 8023d38:	693b      	ldr	r3, [r7, #16]
 8023d3a:	697a      	ldr	r2, [r7, #20]
 8023d3c:	4313      	orrs	r3, r2
 8023d3e:	d00e      	beq.n	8023d5e <itdt_sched_nextRun+0x52>
 8023d40:	4a20      	ldr	r2, [pc, #128]	; (8023dc4 <itdt_sched_nextRun+0xb8>)
 8023d42:	68fb      	ldr	r3, [r7, #12]
 8023d44:	011b      	lsls	r3, r3, #4
 8023d46:	18d3      	adds	r3, r2, r3
 8023d48:	685c      	ldr	r4, [r3, #4]
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	697a      	ldr	r2, [r7, #20]
 8023d4e:	42a2      	cmp	r2, r4
 8023d50:	d805      	bhi.n	8023d5e <itdt_sched_nextRun+0x52>
 8023d52:	697a      	ldr	r2, [r7, #20]
 8023d54:	42a2      	cmp	r2, r4
 8023d56:	d10a      	bne.n	8023d6e <itdt_sched_nextRun+0x62>
 8023d58:	693a      	ldr	r2, [r7, #16]
 8023d5a:	429a      	cmp	r2, r3
 8023d5c:	d907      	bls.n	8023d6e <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 8023d5e:	4a19      	ldr	r2, [pc, #100]	; (8023dc4 <itdt_sched_nextRun+0xb8>)
 8023d60:	68fb      	ldr	r3, [r7, #12]
 8023d62:	011b      	lsls	r3, r3, #4
 8023d64:	18d3      	adds	r3, r2, r3
 8023d66:	685c      	ldr	r4, [r3, #4]
 8023d68:	681b      	ldr	r3, [r3, #0]
 8023d6a:	613b      	str	r3, [r7, #16]
 8023d6c:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8023d6e:	68fb      	ldr	r3, [r7, #12]
 8023d70:	3301      	adds	r3, #1
 8023d72:	60fb      	str	r3, [r7, #12]
 8023d74:	4b14      	ldr	r3, [pc, #80]	; (8023dc8 <itdt_sched_nextRun+0xbc>)
 8023d76:	781b      	ldrb	r3, [r3, #0]
 8023d78:	001a      	movs	r2, r3
 8023d7a:	68fb      	ldr	r3, [r7, #12]
 8023d7c:	4293      	cmp	r3, r2
 8023d7e:	dbcf      	blt.n	8023d20 <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 8023d80:	693b      	ldr	r3, [r7, #16]
 8023d82:	697a      	ldr	r2, [r7, #20]
 8023d84:	4313      	orrs	r3, r2
 8023d86:	d017      	beq.n	8023db8 <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 8023d88:	f000 f8a8 	bl	8023edc <itsdk_time_get_ms>
 8023d8c:	0003      	movs	r3, r0
 8023d8e:	000c      	movs	r4, r1
 8023d90:	603b      	str	r3, [r7, #0]
 8023d92:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 8023d94:	687a      	ldr	r2, [r7, #4]
 8023d96:	697b      	ldr	r3, [r7, #20]
 8023d98:	429a      	cmp	r2, r3
 8023d9a:	d80b      	bhi.n	8023db4 <itdt_sched_nextRun+0xa8>
 8023d9c:	687a      	ldr	r2, [r7, #4]
 8023d9e:	697b      	ldr	r3, [r7, #20]
 8023da0:	429a      	cmp	r2, r3
 8023da2:	d103      	bne.n	8023dac <itdt_sched_nextRun+0xa0>
 8023da4:	683a      	ldr	r2, [r7, #0]
 8023da6:	693b      	ldr	r3, [r7, #16]
 8023da8:	429a      	cmp	r2, r3
 8023daa:	d803      	bhi.n	8023db4 <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 8023dac:	693a      	ldr	r2, [r7, #16]
 8023dae:	683b      	ldr	r3, [r7, #0]
 8023db0:	1ad3      	subs	r3, r2, r3
 8023db2:	e003      	b.n	8023dbc <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 8023db4:	2300      	movs	r3, #0
 8023db6:	e001      	b.n	8023dbc <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 8023db8:	2301      	movs	r3, #1
 8023dba:	425b      	negs	r3, r3
	}
}
 8023dbc:	0018      	movs	r0, r3
 8023dbe:	46bd      	mov	sp, r7
 8023dc0:	b007      	add	sp, #28
 8023dc2:	bd90      	pop	{r4, r7, pc}
 8023dc4:	20002390 	.word	0x20002390
 8023dc8:	20001ef1 	.word	0x20001ef1

08023dcc <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 8023dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023dce:	b087      	sub	sp, #28
 8023dd0:	af00      	add	r7, sp, #0
 8023dd2:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 8023dd4:	68fb      	ldr	r3, [r7, #12]
 8023dd6:	603b      	str	r3, [r7, #0]
 8023dd8:	2300      	movs	r3, #0
 8023dda:	607b      	str	r3, [r7, #4]
 8023ddc:	22fa      	movs	r2, #250	; 0xfa
 8023dde:	0092      	lsls	r2, r2, #2
 8023de0:	2300      	movs	r3, #0
 8023de2:	6838      	ldr	r0, [r7, #0]
 8023de4:	6879      	ldr	r1, [r7, #4]
 8023de6:	f7dc fbc9 	bl	800057c <__aeabi_lmul>
 8023dea:	0003      	movs	r3, r0
 8023dec:	000c      	movs	r4, r1
 8023dee:	0018      	movs	r0, r3
 8023df0:	0021      	movs	r1, r4
 8023df2:	22fa      	movs	r2, #250	; 0xfa
 8023df4:	0092      	lsls	r2, r2, #2
 8023df6:	2300      	movs	r3, #0
 8023df8:	f7dc fb7c 	bl	80004f4 <__aeabi_ldivmod>
 8023dfc:	0003      	movs	r3, r0
 8023dfe:	000c      	movs	r4, r1
 8023e00:	001a      	movs	r2, r3
 8023e02:	68fb      	ldr	r3, [r7, #12]
 8023e04:	189b      	adds	r3, r3, r2
 8023e06:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 8023e08:	68fb      	ldr	r3, [r7, #12]
 8023e0a:	001d      	movs	r5, r3
 8023e0c:	2300      	movs	r3, #0
 8023e0e:	001e      	movs	r6, r3
 8023e10:	4b12      	ldr	r3, [pc, #72]	; (8023e5c <itsdk_time_add_us+0x90>)
 8023e12:	685c      	ldr	r4, [r3, #4]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	195b      	adds	r3, r3, r5
 8023e18:	4174      	adcs	r4, r6
 8023e1a:	613b      	str	r3, [r7, #16]
 8023e1c:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 8023e1e:	4b0f      	ldr	r3, [pc, #60]	; (8023e5c <itsdk_time_add_us+0x90>)
 8023e20:	685c      	ldr	r4, [r3, #4]
 8023e22:	681b      	ldr	r3, [r3, #0]
 8023e24:	697a      	ldr	r2, [r7, #20]
 8023e26:	42a2      	cmp	r2, r4
 8023e28:	d305      	bcc.n	8023e36 <itsdk_time_add_us+0x6a>
 8023e2a:	697a      	ldr	r2, [r7, #20]
 8023e2c:	42a2      	cmp	r2, r4
 8023e2e:	d10b      	bne.n	8023e48 <itsdk_time_add_us+0x7c>
 8023e30:	693a      	ldr	r2, [r7, #16]
 8023e32:	429a      	cmp	r2, r3
 8023e34:	d208      	bcs.n	8023e48 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 8023e36:	4b0a      	ldr	r3, [pc, #40]	; (8023e60 <itsdk_time_add_us+0x94>)
 8023e38:	2201      	movs	r2, #1
 8023e3a:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8023e3c:	4b09      	ldr	r3, [pc, #36]	; (8023e64 <itsdk_time_add_us+0x98>)
 8023e3e:	781b      	ldrb	r3, [r3, #0]
 8023e40:	3301      	adds	r3, #1
 8023e42:	b2da      	uxtb	r2, r3
 8023e44:	4b07      	ldr	r3, [pc, #28]	; (8023e64 <itsdk_time_add_us+0x98>)
 8023e46:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8023e48:	4a04      	ldr	r2, [pc, #16]	; (8023e5c <itsdk_time_add_us+0x90>)
 8023e4a:	693b      	ldr	r3, [r7, #16]
 8023e4c:	697c      	ldr	r4, [r7, #20]
 8023e4e:	6013      	str	r3, [r2, #0]
 8023e50:	6054      	str	r4, [r2, #4]
}
 8023e52:	46c0      	nop			; (mov r8, r8)
 8023e54:	46bd      	mov	sp, r7
 8023e56:	b007      	add	sp, #28
 8023e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e5a:	46c0      	nop			; (mov r8, r8)
 8023e5c:	20001ef8 	.word	0x20001ef8
 8023e60:	20001f00 	.word	0x20001f00
 8023e64:	20001f01 	.word	0x20001f01

08023e68 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 8023e68:	b590      	push	{r4, r7, lr}
 8023e6a:	b085      	sub	sp, #20
 8023e6c:	af00      	add	r7, sp, #0
 8023e6e:	6038      	str	r0, [r7, #0]
 8023e70:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 8023e72:	22fa      	movs	r2, #250	; 0xfa
 8023e74:	0092      	lsls	r2, r2, #2
 8023e76:	2300      	movs	r3, #0
 8023e78:	6838      	ldr	r0, [r7, #0]
 8023e7a:	6879      	ldr	r1, [r7, #4]
 8023e7c:	f7dc fb7e 	bl	800057c <__aeabi_lmul>
 8023e80:	0003      	movs	r3, r0
 8023e82:	000c      	movs	r4, r1
 8023e84:	60bb      	str	r3, [r7, #8]
 8023e86:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 8023e88:	4b10      	ldr	r3, [pc, #64]	; (8023ecc <itsdk_time_set_ms+0x64>)
 8023e8a:	6819      	ldr	r1, [r3, #0]
 8023e8c:	685a      	ldr	r2, [r3, #4]
 8023e8e:	68bb      	ldr	r3, [r7, #8]
 8023e90:	68fc      	ldr	r4, [r7, #12]
 8023e92:	1ac9      	subs	r1, r1, r3
 8023e94:	41a2      	sbcs	r2, r4
 8023e96:	000b      	movs	r3, r1
 8023e98:	0014      	movs	r4, r2
 8023e9a:	2c00      	cmp	r4, #0
 8023e9c:	d103      	bne.n	8023ea6 <itsdk_time_set_ms+0x3e>
 8023e9e:	d10b      	bne.n	8023eb8 <itsdk_time_set_ms+0x50>
 8023ea0:	4a0b      	ldr	r2, [pc, #44]	; (8023ed0 <itsdk_time_set_ms+0x68>)
 8023ea2:	4293      	cmp	r3, r2
 8023ea4:	d908      	bls.n	8023eb8 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 8023ea6:	4b0b      	ldr	r3, [pc, #44]	; (8023ed4 <itsdk_time_set_ms+0x6c>)
 8023ea8:	2201      	movs	r2, #1
 8023eaa:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8023eac:	4b0a      	ldr	r3, [pc, #40]	; (8023ed8 <itsdk_time_set_ms+0x70>)
 8023eae:	781b      	ldrb	r3, [r3, #0]
 8023eb0:	3301      	adds	r3, #1
 8023eb2:	b2da      	uxtb	r2, r3
 8023eb4:	4b08      	ldr	r3, [pc, #32]	; (8023ed8 <itsdk_time_set_ms+0x70>)
 8023eb6:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8023eb8:	4a04      	ldr	r2, [pc, #16]	; (8023ecc <itsdk_time_set_ms+0x64>)
 8023eba:	68bb      	ldr	r3, [r7, #8]
 8023ebc:	68fc      	ldr	r4, [r7, #12]
 8023ebe:	6013      	str	r3, [r2, #0]
 8023ec0:	6054      	str	r4, [r2, #4]
}
 8023ec2:	46c0      	nop			; (mov r8, r8)
 8023ec4:	46bd      	mov	sp, r7
 8023ec6:	b005      	add	sp, #20
 8023ec8:	bd90      	pop	{r4, r7, pc}
 8023eca:	46c0      	nop			; (mov r8, r8)
 8023ecc:	20001ef8 	.word	0x20001ef8
 8023ed0:	000f4240 	.word	0x000f4240
 8023ed4:	20001f00 	.word	0x20001f00
 8023ed8:	20001f01 	.word	0x20001f01

08023edc <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 8023edc:	b5b0      	push	{r4, r5, r7, lr}
 8023ede:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 8023ee0:	4b06      	ldr	r3, [pc, #24]	; (8023efc <itsdk_time_get_ms+0x20>)
 8023ee2:	6818      	ldr	r0, [r3, #0]
 8023ee4:	6859      	ldr	r1, [r3, #4]
 8023ee6:	22fa      	movs	r2, #250	; 0xfa
 8023ee8:	0092      	lsls	r2, r2, #2
 8023eea:	2300      	movs	r3, #0
 8023eec:	f7dc fb26 	bl	800053c <__aeabi_uldivmod>
 8023ef0:	0003      	movs	r3, r0
 8023ef2:	000c      	movs	r4, r1
}
 8023ef4:	0018      	movs	r0, r3
 8023ef6:	0021      	movs	r1, r4
 8023ef8:	46bd      	mov	sp, r7
 8023efa:	bdb0      	pop	{r4, r5, r7, pc}
 8023efc:	20001ef8 	.word	0x20001ef8

08023f00 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 8023f00:	b590      	push	{r4, r7, lr}
 8023f02:	af00      	add	r7, sp, #0
	return __timeus;
 8023f04:	4b03      	ldr	r3, [pc, #12]	; (8023f14 <itsdk_time_get_us+0x14>)
 8023f06:	685c      	ldr	r4, [r3, #4]
 8023f08:	681b      	ldr	r3, [r3, #0]
}
 8023f0a:	0018      	movs	r0, r3
 8023f0c:	0021      	movs	r1, r4
 8023f0e:	46bd      	mov	sp, r7
 8023f10:	bd90      	pop	{r4, r7, pc}
 8023f12:	46c0      	nop			; (mov r8, r8)
 8023f14:	20001ef8 	.word	0x20001ef8

08023f18 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 8023f18:	b5b0      	push	{r4, r5, r7, lr}
 8023f1a:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 8023f1c:	f001 fe36 	bl	8025b8c <rtc_resetTime>
	rtc_adjustTime();
 8023f20:	f001 feb8 	bl	8025c94 <rtc_adjustTime>
  #endif
	systick_adjustTime();
 8023f24:	f001 ff14 	bl	8025d50 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 8023f28:	f001 fd42 	bl	80259b0 <rtc_getTimestampMs>
 8023f2c:	0003      	movs	r3, r0
 8023f2e:	000c      	movs	r4, r1
 8023f30:	0018      	movs	r0, r3
 8023f32:	0021      	movs	r1, r4
 8023f34:	f7ff ff98 	bl	8023e68 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 8023f38:	46c0      	nop			; (mov r8, r8)
 8023f3a:	46bd      	mov	sp, r7
 8023f3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08023f40 <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 8023f40:	b5b0      	push	{r4, r5, r7, lr}
 8023f42:	b086      	sub	sp, #24
 8023f44:	af00      	add	r7, sp, #0
 8023f46:	60f8      	str	r0, [r7, #12]
 8023f48:	60b9      	str	r1, [r7, #8]
 8023f4a:	607a      	str	r2, [r7, #4]
 8023f4c:	001a      	movs	r2, r3
 8023f4e:	1cfb      	adds	r3, r7, #3
 8023f50:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 8023f52:	2300      	movs	r3, #0
 8023f54:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 8023f56:	e00e      	b.n	8023f76 <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 8023f58:	492f      	ldr	r1, [pc, #188]	; (8024018 <itsdk_stimer_register+0xd8>)
 8023f5a:	697a      	ldr	r2, [r7, #20]
 8023f5c:	0013      	movs	r3, r2
 8023f5e:	005b      	lsls	r3, r3, #1
 8023f60:	189b      	adds	r3, r3, r2
 8023f62:	00db      	lsls	r3, r3, #3
 8023f64:	5c5b      	ldrb	r3, [r3, r1]
 8023f66:	2201      	movs	r2, #1
 8023f68:	4053      	eors	r3, r2
 8023f6a:	b2db      	uxtb	r3, r3
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d106      	bne.n	8023f7e <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 8023f70:	697b      	ldr	r3, [r7, #20]
 8023f72:	3301      	adds	r3, #1
 8023f74:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 8023f76:	697b      	ldr	r3, [r7, #20]
 8023f78:	2b04      	cmp	r3, #4
 8023f7a:	dded      	ble.n	8023f58 <itsdk_stimer_register+0x18>
 8023f7c:	e000      	b.n	8023f80 <itsdk_stimer_register+0x40>
			break;
 8023f7e:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 8023f80:	697b      	ldr	r3, [r7, #20]
 8023f82:	2b04      	cmp	r3, #4
 8023f84:	dc42      	bgt.n	802400c <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 8023f86:	4924      	ldr	r1, [pc, #144]	; (8024018 <itsdk_stimer_register+0xd8>)
 8023f88:	697a      	ldr	r2, [r7, #20]
 8023f8a:	0013      	movs	r3, r2
 8023f8c:	005b      	lsls	r3, r3, #1
 8023f8e:	189b      	adds	r3, r3, r2
 8023f90:	00db      	lsls	r3, r3, #3
 8023f92:	2201      	movs	r2, #1
 8023f94:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 8023f96:	1cfb      	adds	r3, r7, #3
 8023f98:	781b      	ldrb	r3, [r3, #0]
 8023f9a:	425a      	negs	r2, r3
 8023f9c:	4153      	adcs	r3, r2
 8023f9e:	b2d8      	uxtb	r0, r3
 8023fa0:	491d      	ldr	r1, [pc, #116]	; (8024018 <itsdk_stimer_register+0xd8>)
 8023fa2:	697a      	ldr	r2, [r7, #20]
 8023fa4:	0013      	movs	r3, r2
 8023fa6:	005b      	lsls	r3, r3, #1
 8023fa8:	189b      	adds	r3, r3, r2
 8023faa:	00db      	lsls	r3, r3, #3
 8023fac:	18cb      	adds	r3, r1, r3
 8023fae:	3301      	adds	r3, #1
 8023fb0:	1c02      	adds	r2, r0, #0
 8023fb2:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 8023fb4:	4918      	ldr	r1, [pc, #96]	; (8024018 <itsdk_stimer_register+0xd8>)
 8023fb6:	697a      	ldr	r2, [r7, #20]
 8023fb8:	0013      	movs	r3, r2
 8023fba:	005b      	lsls	r3, r3, #1
 8023fbc:	189b      	adds	r3, r3, r2
 8023fbe:	00db      	lsls	r3, r3, #3
 8023fc0:	18cb      	adds	r3, r1, r3
 8023fc2:	3314      	adds	r3, #20
 8023fc4:	687a      	ldr	r2, [r7, #4]
 8023fc6:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 8023fc8:	4913      	ldr	r1, [pc, #76]	; (8024018 <itsdk_stimer_register+0xd8>)
 8023fca:	697a      	ldr	r2, [r7, #20]
 8023fcc:	0013      	movs	r3, r2
 8023fce:	005b      	lsls	r3, r3, #1
 8023fd0:	189b      	adds	r3, r3, r2
 8023fd2:	00db      	lsls	r3, r3, #3
 8023fd4:	18cb      	adds	r3, r1, r3
 8023fd6:	3310      	adds	r3, #16
 8023fd8:	68ba      	ldr	r2, [r7, #8]
 8023fda:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 8023fdc:	f7ff ff7e 	bl	8023edc <itsdk_time_get_ms>
 8023fe0:	0002      	movs	r2, r0
 8023fe2:	000b      	movs	r3, r1
 8023fe4:	68f9      	ldr	r1, [r7, #12]
 8023fe6:	000c      	movs	r4, r1
 8023fe8:	2100      	movs	r1, #0
 8023fea:	000d      	movs	r5, r1
 8023fec:	1912      	adds	r2, r2, r4
 8023fee:	416b      	adcs	r3, r5
 8023ff0:	0011      	movs	r1, r2
 8023ff2:	001a      	movs	r2, r3
 8023ff4:	4c08      	ldr	r4, [pc, #32]	; (8024018 <itsdk_stimer_register+0xd8>)
 8023ff6:	6978      	ldr	r0, [r7, #20]
 8023ff8:	0003      	movs	r3, r0
 8023ffa:	005b      	lsls	r3, r3, #1
 8023ffc:	181b      	adds	r3, r3, r0
 8023ffe:	00db      	lsls	r3, r3, #3
 8024000:	18e3      	adds	r3, r4, r3
 8024002:	3308      	adds	r3, #8
 8024004:	6019      	str	r1, [r3, #0]
 8024006:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 8024008:	2300      	movs	r3, #0
 802400a:	e000      	b.n	802400e <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 802400c:	2303      	movs	r3, #3
}
 802400e:	0018      	movs	r0, r3
 8024010:	46bd      	mov	sp, r7
 8024012:	b006      	add	sp, #24
 8024014:	bdb0      	pop	{r4, r5, r7, pc}
 8024016:	46c0      	nop			; (mov r8, r8)
 8024018:	20001f08 	.word	0x20001f08

0802401c <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 802401c:	b580      	push	{r7, lr}
 802401e:	b084      	sub	sp, #16
 8024020:	af00      	add	r7, sp, #0
 8024022:	6078      	str	r0, [r7, #4]
 8024024:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 8024026:	2300      	movs	r3, #0
 8024028:	60fb      	str	r3, [r7, #12]
 802402a:	e02d      	b.n	8024088 <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 802402c:	491a      	ldr	r1, [pc, #104]	; (8024098 <itsdk_stimer_stop+0x7c>)
 802402e:	68fa      	ldr	r2, [r7, #12]
 8024030:	0013      	movs	r3, r2
 8024032:	005b      	lsls	r3, r3, #1
 8024034:	189b      	adds	r3, r3, r2
 8024036:	00db      	lsls	r3, r3, #3
 8024038:	5c5b      	ldrb	r3, [r3, r1]
		if (
 802403a:	2b00      	cmp	r3, #0
 802403c:	d021      	beq.n	8024082 <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 802403e:	4916      	ldr	r1, [pc, #88]	; (8024098 <itsdk_stimer_stop+0x7c>)
 8024040:	68fa      	ldr	r2, [r7, #12]
 8024042:	0013      	movs	r3, r2
 8024044:	005b      	lsls	r3, r3, #1
 8024046:	189b      	adds	r3, r3, r2
 8024048:	00db      	lsls	r3, r3, #3
 802404a:	18cb      	adds	r3, r1, r3
 802404c:	3314      	adds	r3, #20
 802404e:	681b      	ldr	r3, [r3, #0]
 8024050:	683a      	ldr	r2, [r7, #0]
 8024052:	429a      	cmp	r2, r3
 8024054:	d115      	bne.n	8024082 <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 8024056:	4910      	ldr	r1, [pc, #64]	; (8024098 <itsdk_stimer_stop+0x7c>)
 8024058:	68fa      	ldr	r2, [r7, #12]
 802405a:	0013      	movs	r3, r2
 802405c:	005b      	lsls	r3, r3, #1
 802405e:	189b      	adds	r3, r3, r2
 8024060:	00db      	lsls	r3, r3, #3
 8024062:	18cb      	adds	r3, r1, r3
 8024064:	3310      	adds	r3, #16
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	687a      	ldr	r2, [r7, #4]
 802406a:	429a      	cmp	r2, r3
 802406c:	d109      	bne.n	8024082 <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 802406e:	490a      	ldr	r1, [pc, #40]	; (8024098 <itsdk_stimer_stop+0x7c>)
 8024070:	68fa      	ldr	r2, [r7, #12]
 8024072:	0013      	movs	r3, r2
 8024074:	005b      	lsls	r3, r3, #1
 8024076:	189b      	adds	r3, r3, r2
 8024078:	00db      	lsls	r3, r3, #3
 802407a:	2200      	movs	r2, #0
 802407c:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 802407e:	2300      	movs	r3, #0
 8024080:	e006      	b.n	8024090 <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 8024082:	68fb      	ldr	r3, [r7, #12]
 8024084:	3301      	adds	r3, #1
 8024086:	60fb      	str	r3, [r7, #12]
 8024088:	68fb      	ldr	r3, [r7, #12]
 802408a:	2b04      	cmp	r3, #4
 802408c:	ddce      	ble.n	802402c <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 802408e:	2304      	movs	r3, #4
}
 8024090:	0018      	movs	r0, r3
 8024092:	46bd      	mov	sp, r7
 8024094:	b004      	add	sp, #16
 8024096:	bd80      	pop	{r7, pc}
 8024098:	20001f08 	.word	0x20001f08

0802409c <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 802409c:	b580      	push	{r7, lr}
 802409e:	b082      	sub	sp, #8
 80240a0:	af00      	add	r7, sp, #0
	int i = 0;
 80240a2:	2300      	movs	r3, #0
 80240a4:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 80240a6:	e01b      	b.n	80240e0 <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 80240a8:	4911      	ldr	r1, [pc, #68]	; (80240f0 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 80240aa:	687a      	ldr	r2, [r7, #4]
 80240ac:	0013      	movs	r3, r2
 80240ae:	005b      	lsls	r3, r3, #1
 80240b0:	189b      	adds	r3, r3, r2
 80240b2:	00db      	lsls	r3, r3, #3
 80240b4:	5c5b      	ldrb	r3, [r3, r1]
 80240b6:	2b00      	cmp	r3, #0
 80240b8:	d00f      	beq.n	80240da <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 80240ba:	490d      	ldr	r1, [pc, #52]	; (80240f0 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 80240bc:	687a      	ldr	r2, [r7, #4]
 80240be:	0013      	movs	r3, r2
 80240c0:	005b      	lsls	r3, r3, #1
 80240c2:	189b      	adds	r3, r3, r2
 80240c4:	00db      	lsls	r3, r3, #3
 80240c6:	18cb      	adds	r3, r1, r3
 80240c8:	3301      	adds	r3, #1
 80240ca:	781b      	ldrb	r3, [r3, #0]
 80240cc:	2201      	movs	r2, #1
 80240ce:	4053      	eors	r3, r2
 80240d0:	b2db      	uxtb	r3, r3
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	d001      	beq.n	80240da <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 80240d6:	2300      	movs	r3, #0
 80240d8:	e006      	b.n	80240e8 <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	3301      	adds	r3, #1
 80240de:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 80240e0:	687b      	ldr	r3, [r7, #4]
 80240e2:	2b04      	cmp	r3, #4
 80240e4:	dde0      	ble.n	80240a8 <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 80240e6:	2301      	movs	r3, #1
}
 80240e8:	0018      	movs	r0, r3
 80240ea:	46bd      	mov	sp, r7
 80240ec:	b002      	add	sp, #8
 80240ee:	bd80      	pop	{r7, pc}
 80240f0:	20001f08 	.word	0x20001f08

080240f4 <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 80240f4:	b580      	push	{r7, lr}
 80240f6:	b084      	sub	sp, #16
 80240f8:	af00      	add	r7, sp, #0
 80240fa:	6078      	str	r0, [r7, #4]
 80240fc:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 80240fe:	2300      	movs	r3, #0
 8024100:	60fb      	str	r3, [r7, #12]
 8024102:	e02b      	b.n	802415c <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 8024104:	4919      	ldr	r1, [pc, #100]	; (802416c <itsdk_stimer_get+0x78>)
 8024106:	68fa      	ldr	r2, [r7, #12]
 8024108:	0013      	movs	r3, r2
 802410a:	005b      	lsls	r3, r3, #1
 802410c:	189b      	adds	r3, r3, r2
 802410e:	00db      	lsls	r3, r3, #3
 8024110:	5c5b      	ldrb	r3, [r3, r1]
		if (
 8024112:	2b00      	cmp	r3, #0
 8024114:	d01f      	beq.n	8024156 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 8024116:	4915      	ldr	r1, [pc, #84]	; (802416c <itsdk_stimer_get+0x78>)
 8024118:	68fa      	ldr	r2, [r7, #12]
 802411a:	0013      	movs	r3, r2
 802411c:	005b      	lsls	r3, r3, #1
 802411e:	189b      	adds	r3, r3, r2
 8024120:	00db      	lsls	r3, r3, #3
 8024122:	18cb      	adds	r3, r1, r3
 8024124:	3314      	adds	r3, #20
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	683a      	ldr	r2, [r7, #0]
 802412a:	429a      	cmp	r2, r3
 802412c:	d113      	bne.n	8024156 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 802412e:	490f      	ldr	r1, [pc, #60]	; (802416c <itsdk_stimer_get+0x78>)
 8024130:	68fa      	ldr	r2, [r7, #12]
 8024132:	0013      	movs	r3, r2
 8024134:	005b      	lsls	r3, r3, #1
 8024136:	189b      	adds	r3, r3, r2
 8024138:	00db      	lsls	r3, r3, #3
 802413a:	18cb      	adds	r3, r1, r3
 802413c:	3310      	adds	r3, #16
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	687a      	ldr	r2, [r7, #4]
 8024142:	429a      	cmp	r2, r3
 8024144:	d107      	bne.n	8024156 <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 8024146:	68fa      	ldr	r2, [r7, #12]
 8024148:	0013      	movs	r3, r2
 802414a:	005b      	lsls	r3, r3, #1
 802414c:	189b      	adds	r3, r3, r2
 802414e:	00db      	lsls	r3, r3, #3
 8024150:	4a06      	ldr	r2, [pc, #24]	; (802416c <itsdk_stimer_get+0x78>)
 8024152:	189b      	adds	r3, r3, r2
 8024154:	e006      	b.n	8024164 <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 8024156:	68fb      	ldr	r3, [r7, #12]
 8024158:	3301      	adds	r3, #1
 802415a:	60fb      	str	r3, [r7, #12]
 802415c:	68fb      	ldr	r3, [r7, #12]
 802415e:	2b04      	cmp	r3, #4
 8024160:	ddd0      	ble.n	8024104 <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 8024162:	2300      	movs	r3, #0

}
 8024164:	0018      	movs	r0, r3
 8024166:	46bd      	mov	sp, r7
 8024168:	b004      	add	sp, #16
 802416a:	bd80      	pop	{r7, pc}
 802416c:	20001f08 	.word	0x20001f08

08024170 <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 8024170:	b590      	push	{r4, r7, lr}
 8024172:	b085      	sub	sp, #20
 8024174:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 8024176:	f7ff feb1 	bl	8023edc <itsdk_time_get_ms>
 802417a:	0003      	movs	r3, r0
 802417c:	000c      	movs	r4, r1
 802417e:	603b      	str	r3, [r7, #0]
 8024180:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8024182:	2300      	movs	r3, #0
 8024184:	60fb      	str	r3, [r7, #12]
 8024186:	e045      	b.n	8024214 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 8024188:	4926      	ldr	r1, [pc, #152]	; (8024224 <itsdk_stimer_run+0xb4>)
 802418a:	68fa      	ldr	r2, [r7, #12]
 802418c:	0013      	movs	r3, r2
 802418e:	005b      	lsls	r3, r3, #1
 8024190:	189b      	adds	r3, r3, r2
 8024192:	00db      	lsls	r3, r3, #3
 8024194:	5c5b      	ldrb	r3, [r3, r1]
 8024196:	2b00      	cmp	r3, #0
 8024198:	d039      	beq.n	802420e <itsdk_stimer_run+0x9e>
 802419a:	4922      	ldr	r1, [pc, #136]	; (8024224 <itsdk_stimer_run+0xb4>)
 802419c:	68fa      	ldr	r2, [r7, #12]
 802419e:	0013      	movs	r3, r2
 80241a0:	005b      	lsls	r3, r3, #1
 80241a2:	189b      	adds	r3, r3, r2
 80241a4:	00db      	lsls	r3, r3, #3
 80241a6:	18cb      	adds	r3, r1, r3
 80241a8:	3308      	adds	r3, #8
 80241aa:	685c      	ldr	r4, [r3, #4]
 80241ac:	681b      	ldr	r3, [r3, #0]
 80241ae:	687a      	ldr	r2, [r7, #4]
 80241b0:	42a2      	cmp	r2, r4
 80241b2:	d32c      	bcc.n	802420e <itsdk_stimer_run+0x9e>
 80241b4:	687a      	ldr	r2, [r7, #4]
 80241b6:	42a2      	cmp	r2, r4
 80241b8:	d102      	bne.n	80241c0 <itsdk_stimer_run+0x50>
 80241ba:	683a      	ldr	r2, [r7, #0]
 80241bc:	429a      	cmp	r2, r3
 80241be:	d326      	bcc.n	802420e <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 80241c0:	4918      	ldr	r1, [pc, #96]	; (8024224 <itsdk_stimer_run+0xb4>)
 80241c2:	68fa      	ldr	r2, [r7, #12]
 80241c4:	0013      	movs	r3, r2
 80241c6:	005b      	lsls	r3, r3, #1
 80241c8:	189b      	adds	r3, r3, r2
 80241ca:	00db      	lsls	r3, r3, #3
 80241cc:	2200      	movs	r2, #0
 80241ce:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 80241d0:	4914      	ldr	r1, [pc, #80]	; (8024224 <itsdk_stimer_run+0xb4>)
 80241d2:	68fa      	ldr	r2, [r7, #12]
 80241d4:	0013      	movs	r3, r2
 80241d6:	005b      	lsls	r3, r3, #1
 80241d8:	189b      	adds	r3, r3, r2
 80241da:	00db      	lsls	r3, r3, #3
 80241dc:	18cb      	adds	r3, r1, r3
 80241de:	3310      	adds	r3, #16
 80241e0:	681b      	ldr	r3, [r3, #0]
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d013      	beq.n	802420e <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 80241e6:	490f      	ldr	r1, [pc, #60]	; (8024224 <itsdk_stimer_run+0xb4>)
 80241e8:	68fa      	ldr	r2, [r7, #12]
 80241ea:	0013      	movs	r3, r2
 80241ec:	005b      	lsls	r3, r3, #1
 80241ee:	189b      	adds	r3, r3, r2
 80241f0:	00db      	lsls	r3, r3, #3
 80241f2:	18cb      	adds	r3, r1, r3
 80241f4:	3310      	adds	r3, #16
 80241f6:	6819      	ldr	r1, [r3, #0]
 80241f8:	480a      	ldr	r0, [pc, #40]	; (8024224 <itsdk_stimer_run+0xb4>)
 80241fa:	68fa      	ldr	r2, [r7, #12]
 80241fc:	0013      	movs	r3, r2
 80241fe:	005b      	lsls	r3, r3, #1
 8024200:	189b      	adds	r3, r3, r2
 8024202:	00db      	lsls	r3, r3, #3
 8024204:	18c3      	adds	r3, r0, r3
 8024206:	3314      	adds	r3, #20
 8024208:	681b      	ldr	r3, [r3, #0]
 802420a:	0018      	movs	r0, r3
 802420c:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 802420e:	68fb      	ldr	r3, [r7, #12]
 8024210:	3301      	adds	r3, #1
 8024212:	60fb      	str	r3, [r7, #12]
 8024214:	68fb      	ldr	r3, [r7, #12]
 8024216:	2b04      	cmp	r3, #4
 8024218:	ddb6      	ble.n	8024188 <itsdk_stimer_run+0x18>
		}
	}
}
 802421a:	46c0      	nop			; (mov r8, r8)
 802421c:	46bd      	mov	sp, r7
 802421e:	b005      	add	sp, #20
 8024220:	bd90      	pop	{r4, r7, pc}
 8024222:	46c0      	nop			; (mov r8, r8)
 8024224:	20001f08 	.word	0x20001f08

08024228 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 8024228:	b590      	push	{r4, r7, lr}
 802422a:	b087      	sub	sp, #28
 802422c:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 802422e:	f7ff fe55 	bl	8023edc <itsdk_time_get_ms>
 8024232:	0003      	movs	r3, r0
 8024234:	000c      	movs	r4, r1
 8024236:	603b      	str	r3, [r7, #0]
 8024238:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 802423a:	2301      	movs	r3, #1
 802423c:	425b      	negs	r3, r3
 802423e:	17dc      	asrs	r4, r3, #31
 8024240:	613b      	str	r3, [r7, #16]
 8024242:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8024244:	2300      	movs	r3, #0
 8024246:	60fb      	str	r3, [r7, #12]
 8024248:	e03d      	b.n	80242c6 <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 802424a:	492c      	ldr	r1, [pc, #176]	; (80242fc <itsdk_stimer_nextTimeoutMs+0xd4>)
 802424c:	68fa      	ldr	r2, [r7, #12]
 802424e:	0013      	movs	r3, r2
 8024250:	005b      	lsls	r3, r3, #1
 8024252:	189b      	adds	r3, r3, r2
 8024254:	00db      	lsls	r3, r3, #3
 8024256:	5c5b      	ldrb	r3, [r3, r1]
 8024258:	2b00      	cmp	r3, #0
 802425a:	d031      	beq.n	80242c0 <itsdk_stimer_nextTimeoutMs+0x98>
 802425c:	4927      	ldr	r1, [pc, #156]	; (80242fc <itsdk_stimer_nextTimeoutMs+0xd4>)
 802425e:	68fa      	ldr	r2, [r7, #12]
 8024260:	0013      	movs	r3, r2
 8024262:	005b      	lsls	r3, r3, #1
 8024264:	189b      	adds	r3, r3, r2
 8024266:	00db      	lsls	r3, r3, #3
 8024268:	18cb      	adds	r3, r1, r3
 802426a:	3308      	adds	r3, #8
 802426c:	685c      	ldr	r4, [r3, #4]
 802426e:	681b      	ldr	r3, [r3, #0]
 8024270:	687a      	ldr	r2, [r7, #4]
 8024272:	42a2      	cmp	r2, r4
 8024274:	d824      	bhi.n	80242c0 <itsdk_stimer_nextTimeoutMs+0x98>
 8024276:	687a      	ldr	r2, [r7, #4]
 8024278:	42a2      	cmp	r2, r4
 802427a:	d102      	bne.n	8024282 <itsdk_stimer_nextTimeoutMs+0x5a>
 802427c:	683a      	ldr	r2, [r7, #0]
 802427e:	429a      	cmp	r2, r3
 8024280:	d81e      	bhi.n	80242c0 <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 8024282:	491e      	ldr	r1, [pc, #120]	; (80242fc <itsdk_stimer_nextTimeoutMs+0xd4>)
 8024284:	68fa      	ldr	r2, [r7, #12]
 8024286:	0013      	movs	r3, r2
 8024288:	005b      	lsls	r3, r3, #1
 802428a:	189b      	adds	r3, r3, r2
 802428c:	00db      	lsls	r3, r3, #3
 802428e:	18cb      	adds	r3, r1, r3
 8024290:	3308      	adds	r3, #8
 8024292:	685c      	ldr	r4, [r3, #4]
 8024294:	681b      	ldr	r3, [r3, #0]
 8024296:	697a      	ldr	r2, [r7, #20]
 8024298:	42a2      	cmp	r2, r4
 802429a:	d805      	bhi.n	80242a8 <itsdk_stimer_nextTimeoutMs+0x80>
 802429c:	697a      	ldr	r2, [r7, #20]
 802429e:	42a2      	cmp	r2, r4
 80242a0:	d10e      	bne.n	80242c0 <itsdk_stimer_nextTimeoutMs+0x98>
 80242a2:	693a      	ldr	r2, [r7, #16]
 80242a4:	429a      	cmp	r2, r3
 80242a6:	d90b      	bls.n	80242c0 <itsdk_stimer_nextTimeoutMs+0x98>
 80242a8:	4914      	ldr	r1, [pc, #80]	; (80242fc <itsdk_stimer_nextTimeoutMs+0xd4>)
 80242aa:	68fa      	ldr	r2, [r7, #12]
 80242ac:	0013      	movs	r3, r2
 80242ae:	005b      	lsls	r3, r3, #1
 80242b0:	189b      	adds	r3, r3, r2
 80242b2:	00db      	lsls	r3, r3, #3
 80242b4:	18cb      	adds	r3, r1, r3
 80242b6:	3308      	adds	r3, #8
 80242b8:	685c      	ldr	r4, [r3, #4]
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	613b      	str	r3, [r7, #16]
 80242be:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 80242c0:	68fb      	ldr	r3, [r7, #12]
 80242c2:	3301      	adds	r3, #1
 80242c4:	60fb      	str	r3, [r7, #12]
 80242c6:	68fb      	ldr	r3, [r7, #12]
 80242c8:	2b04      	cmp	r3, #4
 80242ca:	ddbe      	ble.n	802424a <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 80242cc:	693b      	ldr	r3, [r7, #16]
 80242ce:	3301      	adds	r3, #1
 80242d0:	d102      	bne.n	80242d8 <itsdk_stimer_nextTimeoutMs+0xb0>
 80242d2:	697b      	ldr	r3, [r7, #20]
 80242d4:	3301      	adds	r3, #1
 80242d6:	d00b      	beq.n	80242f0 <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 80242d8:	6939      	ldr	r1, [r7, #16]
 80242da:	697a      	ldr	r2, [r7, #20]
 80242dc:	683b      	ldr	r3, [r7, #0]
 80242de:	687c      	ldr	r4, [r7, #4]
 80242e0:	1ac9      	subs	r1, r1, r3
 80242e2:	41a2      	sbcs	r2, r4
 80242e4:	000b      	movs	r3, r1
 80242e6:	0014      	movs	r4, r2
 80242e8:	613b      	str	r3, [r7, #16]
 80242ea:	617c      	str	r4, [r7, #20]
		return min;
 80242ec:	693b      	ldr	r3, [r7, #16]
 80242ee:	e001      	b.n	80242f4 <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 80242f0:	2301      	movs	r3, #1
 80242f2:	425b      	negs	r3, r3
}
 80242f4:	0018      	movs	r0, r3
 80242f6:	46bd      	mov	sp, r7
 80242f8:	b007      	add	sp, #28
 80242fa:	bd90      	pop	{r4, r7, pc}
 80242fc:	20001f08 	.word	0x20001f08

08024300 <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 8024300:	b580      	push	{r7, lr}
 8024302:	b084      	sub	sp, #16
 8024304:	af00      	add	r7, sp, #0
 8024306:	6078      	str	r0, [r7, #4]
 8024308:	000a      	movs	r2, r1
 802430a:	1cfb      	adds	r3, r7, #3
 802430c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 802430e:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 8024310:	4b73      	ldr	r3, [pc, #460]	; (80244e0 <__getAdcValue+0x1e0>)
 8024312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8024314:	4b72      	ldr	r3, [pc, #456]	; (80244e0 <__getAdcValue+0x1e0>)
 8024316:	2180      	movs	r1, #128	; 0x80
 8024318:	0089      	lsls	r1, r1, #2
 802431a:	430a      	orrs	r2, r1
 802431c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 802431e:	46c0      	nop			; (mov r8, r8)
 8024320:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 8024322:	4b6f      	ldr	r3, [pc, #444]	; (80244e0 <__getAdcValue+0x1e0>)
 8024324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024326:	4b6e      	ldr	r3, [pc, #440]	; (80244e0 <__getAdcValue+0x1e0>)
 8024328:	2180      	movs	r1, #128	; 0x80
 802432a:	0089      	lsls	r1, r1, #2
 802432c:	430a      	orrs	r2, r1
 802432e:	625a      	str	r2, [r3, #36]	; 0x24
 8024330:	46c0      	nop			; (mov r8, r8)
 8024332:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 8024334:	4b6a      	ldr	r3, [pc, #424]	; (80244e0 <__getAdcValue+0x1e0>)
 8024336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024338:	4b69      	ldr	r3, [pc, #420]	; (80244e0 <__getAdcValue+0x1e0>)
 802433a:	496a      	ldr	r1, [pc, #424]	; (80244e4 <__getAdcValue+0x1e4>)
 802433c:	400a      	ands	r2, r1
 802433e:	625a      	str	r2, [r3, #36]	; 0x24
 8024340:	46c0      	nop			; (mov r8, r8)
 8024342:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 8024344:	4b68      	ldr	r3, [pc, #416]	; (80244e8 <__getAdcValue+0x1e8>)
 8024346:	2200      	movs	r2, #0
 8024348:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 802434a:	4b67      	ldr	r3, [pc, #412]	; (80244e8 <__getAdcValue+0x1e8>)
 802434c:	691a      	ldr	r2, [r3, #16]
 802434e:	4b66      	ldr	r3, [pc, #408]	; (80244e8 <__getAdcValue+0x1e8>)
 8024350:	0092      	lsls	r2, r2, #2
 8024352:	0892      	lsrs	r2, r2, #2
 8024354:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 8024356:	4b64      	ldr	r3, [pc, #400]	; (80244e8 <__getAdcValue+0x1e8>)
 8024358:	689a      	ldr	r2, [r3, #8]
 802435a:	4b63      	ldr	r3, [pc, #396]	; (80244e8 <__getAdcValue+0x1e8>)
 802435c:	2180      	movs	r1, #128	; 0x80
 802435e:	0549      	lsls	r1, r1, #21
 8024360:	430a      	orrs	r2, r1
 8024362:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 8024364:	4b61      	ldr	r3, [pc, #388]	; (80244ec <__getAdcValue+0x1ec>)
 8024366:	681a      	ldr	r2, [r3, #0]
 8024368:	4b60      	ldr	r3, [pc, #384]	; (80244ec <__getAdcValue+0x1ec>)
 802436a:	2180      	movs	r1, #128	; 0x80
 802436c:	03c9      	lsls	r1, r1, #15
 802436e:	430a      	orrs	r2, r1
 8024370:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 8024372:	4b5e      	ldr	r3, [pc, #376]	; (80244ec <__getAdcValue+0x1ec>)
 8024374:	681a      	ldr	r2, [r3, #0]
 8024376:	4b5d      	ldr	r3, [pc, #372]	; (80244ec <__getAdcValue+0x1ec>)
 8024378:	2180      	movs	r1, #128	; 0x80
 802437a:	0409      	lsls	r1, r1, #16
 802437c:	430a      	orrs	r2, r1
 802437e:	601a      	str	r2, [r3, #0]
 8024380:	46c0      	nop			; (mov r8, r8)
 8024382:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 8024384:	4b58      	ldr	r3, [pc, #352]	; (80244e8 <__getAdcValue+0x1e8>)
 8024386:	689b      	ldr	r3, [r3, #8]
 8024388:	2201      	movs	r2, #1
 802438a:	4013      	ands	r3, r2
 802438c:	d005      	beq.n	802439a <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 802438e:	4b56      	ldr	r3, [pc, #344]	; (80244e8 <__getAdcValue+0x1e8>)
 8024390:	689a      	ldr	r2, [r3, #8]
 8024392:	4b55      	ldr	r3, [pc, #340]	; (80244e8 <__getAdcValue+0x1e8>)
 8024394:	2101      	movs	r1, #1
 8024396:	438a      	bics	r2, r1
 8024398:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 802439a:	4b53      	ldr	r3, [pc, #332]	; (80244e8 <__getAdcValue+0x1e8>)
 802439c:	689a      	ldr	r2, [r3, #8]
 802439e:	4b52      	ldr	r3, [pc, #328]	; (80244e8 <__getAdcValue+0x1e8>)
 80243a0:	2180      	movs	r1, #128	; 0x80
 80243a2:	0609      	lsls	r1, r1, #24
 80243a4:	430a      	orrs	r2, r1
 80243a6:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 80243a8:	46c0      	nop			; (mov r8, r8)
 80243aa:	4b4f      	ldr	r3, [pc, #316]	; (80244e8 <__getAdcValue+0x1e8>)
 80243ac:	681a      	ldr	r2, [r3, #0]
 80243ae:	2380      	movs	r3, #128	; 0x80
 80243b0:	011b      	lsls	r3, r3, #4
 80243b2:	4013      	ands	r3, r2
 80243b4:	d0f9      	beq.n	80243aa <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 80243b6:	4b4c      	ldr	r3, [pc, #304]	; (80244e8 <__getAdcValue+0x1e8>)
 80243b8:	681a      	ldr	r2, [r3, #0]
 80243ba:	4b4b      	ldr	r3, [pc, #300]	; (80244e8 <__getAdcValue+0x1e8>)
 80243bc:	2180      	movs	r1, #128	; 0x80
 80243be:	0109      	lsls	r1, r1, #4
 80243c0:	430a      	orrs	r2, r1
 80243c2:	601a      	str	r2, [r3, #0]
 80243c4:	46c0      	nop			; (mov r8, r8)
 80243c6:	46c0      	nop			; (mov r8, r8)
 80243c8:	46c0      	nop			; (mov r8, r8)
 80243ca:	46c0      	nop			; (mov r8, r8)
 80243cc:	46c0      	nop			; (mov r8, r8)
 80243ce:	46c0      	nop			; (mov r8, r8)
 80243d0:	46c0      	nop			; (mov r8, r8)
 80243d2:	46c0      	nop			; (mov r8, r8)
 80243d4:	46c0      	nop			; (mov r8, r8)
 80243d6:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 80243d8:	4b43      	ldr	r3, [pc, #268]	; (80244e8 <__getAdcValue+0x1e8>)
 80243da:	681a      	ldr	r2, [r3, #0]
 80243dc:	4b42      	ldr	r3, [pc, #264]	; (80244e8 <__getAdcValue+0x1e8>)
 80243de:	2101      	movs	r1, #1
 80243e0:	430a      	orrs	r2, r1
 80243e2:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 80243e4:	4b40      	ldr	r3, [pc, #256]	; (80244e8 <__getAdcValue+0x1e8>)
 80243e6:	689a      	ldr	r2, [r3, #8]
 80243e8:	4b3f      	ldr	r3, [pc, #252]	; (80244e8 <__getAdcValue+0x1e8>)
 80243ea:	2101      	movs	r1, #1
 80243ec:	430a      	orrs	r2, r1
 80243ee:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 80243f0:	46c0      	nop			; (mov r8, r8)
 80243f2:	4b3d      	ldr	r3, [pc, #244]	; (80244e8 <__getAdcValue+0x1e8>)
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	2201      	movs	r2, #1
 80243f8:	4013      	ands	r3, r2
 80243fa:	d0fa      	beq.n	80243f2 <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 80243fc:	4b3a      	ldr	r3, [pc, #232]	; (80244e8 <__getAdcValue+0x1e8>)
 80243fe:	68da      	ldr	r2, [r3, #12]
 8024400:	4b39      	ldr	r3, [pc, #228]	; (80244e8 <__getAdcValue+0x1e8>)
 8024402:	493b      	ldr	r1, [pc, #236]	; (80244f0 <__getAdcValue+0x1f0>)
 8024404:	400a      	ands	r2, r1
 8024406:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 8024408:	4b37      	ldr	r3, [pc, #220]	; (80244e8 <__getAdcValue+0x1e8>)
 802440a:	68da      	ldr	r2, [r3, #12]
 802440c:	4b36      	ldr	r3, [pc, #216]	; (80244e8 <__getAdcValue+0x1e8>)
 802440e:	2120      	movs	r1, #32
 8024410:	438a      	bics	r2, r1
 8024412:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 8024414:	4b34      	ldr	r3, [pc, #208]	; (80244e8 <__getAdcValue+0x1e8>)
 8024416:	68da      	ldr	r2, [r3, #12]
 8024418:	4b33      	ldr	r3, [pc, #204]	; (80244e8 <__getAdcValue+0x1e8>)
 802441a:	2118      	movs	r1, #24
 802441c:	438a      	bics	r2, r1
 802441e:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 8024420:	4b31      	ldr	r3, [pc, #196]	; (80244e8 <__getAdcValue+0x1e8>)
 8024422:	687a      	ldr	r2, [r7, #4]
 8024424:	0352      	lsls	r2, r2, #13
 8024426:	0b52      	lsrs	r2, r2, #13
 8024428:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 802442a:	4b2f      	ldr	r3, [pc, #188]	; (80244e8 <__getAdcValue+0x1e8>)
 802442c:	695a      	ldr	r2, [r3, #20]
 802442e:	4b2e      	ldr	r3, [pc, #184]	; (80244e8 <__getAdcValue+0x1e8>)
 8024430:	2107      	movs	r1, #7
 8024432:	430a      	orrs	r2, r1
 8024434:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 8024436:	2300      	movs	r3, #0
 8024438:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 802443a:	2300      	movs	r3, #0
 802443c:	60bb      	str	r3, [r7, #8]
 802443e:	e013      	b.n	8024468 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 8024440:	4b29      	ldr	r3, [pc, #164]	; (80244e8 <__getAdcValue+0x1e8>)
 8024442:	689a      	ldr	r2, [r3, #8]
 8024444:	4b28      	ldr	r3, [pc, #160]	; (80244e8 <__getAdcValue+0x1e8>)
 8024446:	2104      	movs	r1, #4
 8024448:	430a      	orrs	r2, r1
 802444a:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 802444c:	46c0      	nop			; (mov r8, r8)
 802444e:	4b26      	ldr	r3, [pc, #152]	; (80244e8 <__getAdcValue+0x1e8>)
 8024450:	681b      	ldr	r3, [r3, #0]
 8024452:	2204      	movs	r2, #4
 8024454:	4013      	ands	r3, r2
 8024456:	d0fa      	beq.n	802444e <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 8024458:	4b23      	ldr	r3, [pc, #140]	; (80244e8 <__getAdcValue+0x1e8>)
 802445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802445c:	68fa      	ldr	r2, [r7, #12]
 802445e:	18d3      	adds	r3, r2, r3
 8024460:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 8024462:	68bb      	ldr	r3, [r7, #8]
 8024464:	3301      	adds	r3, #1
 8024466:	60bb      	str	r3, [r7, #8]
 8024468:	1cfb      	adds	r3, r7, #3
 802446a:	781b      	ldrb	r3, [r3, #0]
 802446c:	68ba      	ldr	r2, [r7, #8]
 802446e:	429a      	cmp	r2, r3
 8024470:	d3e6      	bcc.n	8024440 <__getAdcValue+0x140>
  }
  data = data / oversampling;
 8024472:	1cfb      	adds	r3, r7, #3
 8024474:	781b      	ldrb	r3, [r3, #0]
 8024476:	0019      	movs	r1, r3
 8024478:	68f8      	ldr	r0, [r7, #12]
 802447a:	f7db fe4d 	bl	8000118 <__udivsi3>
 802447e:	0003      	movs	r3, r0
 8024480:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 8024482:	4b19      	ldr	r3, [pc, #100]	; (80244e8 <__getAdcValue+0x1e8>)
 8024484:	689b      	ldr	r3, [r3, #8]
 8024486:	2201      	movs	r2, #1
 8024488:	4013      	ands	r3, r2
 802448a:	d00b      	beq.n	80244a4 <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 802448c:	4b16      	ldr	r3, [pc, #88]	; (80244e8 <__getAdcValue+0x1e8>)
 802448e:	689a      	ldr	r2, [r3, #8]
 8024490:	4b15      	ldr	r3, [pc, #84]	; (80244e8 <__getAdcValue+0x1e8>)
 8024492:	2102      	movs	r1, #2
 8024494:	430a      	orrs	r2, r1
 8024496:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 8024498:	46c0      	nop			; (mov r8, r8)
 802449a:	4b13      	ldr	r3, [pc, #76]	; (80244e8 <__getAdcValue+0x1e8>)
 802449c:	689b      	ldr	r3, [r3, #8]
 802449e:	2201      	movs	r2, #1
 80244a0:	4013      	ands	r3, r2
 80244a2:	d1fa      	bne.n	802449a <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 80244a4:	4b11      	ldr	r3, [pc, #68]	; (80244ec <__getAdcValue+0x1ec>)
 80244a6:	681a      	ldr	r2, [r3, #0]
 80244a8:	4b10      	ldr	r3, [pc, #64]	; (80244ec <__getAdcValue+0x1ec>)
 80244aa:	4912      	ldr	r1, [pc, #72]	; (80244f4 <__getAdcValue+0x1f4>)
 80244ac:	400a      	ands	r2, r1
 80244ae:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 80244b0:	4b0e      	ldr	r3, [pc, #56]	; (80244ec <__getAdcValue+0x1ec>)
 80244b2:	681a      	ldr	r2, [r3, #0]
 80244b4:	4b0d      	ldr	r3, [pc, #52]	; (80244ec <__getAdcValue+0x1ec>)
 80244b6:	4910      	ldr	r1, [pc, #64]	; (80244f8 <__getAdcValue+0x1f8>)
 80244b8:	400a      	ands	r2, r1
 80244ba:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 80244bc:	4b0a      	ldr	r3, [pc, #40]	; (80244e8 <__getAdcValue+0x1e8>)
 80244be:	689a      	ldr	r2, [r3, #8]
 80244c0:	4b09      	ldr	r3, [pc, #36]	; (80244e8 <__getAdcValue+0x1e8>)
 80244c2:	490e      	ldr	r1, [pc, #56]	; (80244fc <__getAdcValue+0x1fc>)
 80244c4:	400a      	ands	r2, r1
 80244c6:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 80244c8:	4b05      	ldr	r3, [pc, #20]	; (80244e0 <__getAdcValue+0x1e0>)
 80244ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80244cc:	4b04      	ldr	r3, [pc, #16]	; (80244e0 <__getAdcValue+0x1e0>)
 80244ce:	4905      	ldr	r1, [pc, #20]	; (80244e4 <__getAdcValue+0x1e4>)
 80244d0:	400a      	ands	r2, r1
 80244d2:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 80244d4:	b662      	cpsie	i

  __enable_irq();
  return data;
 80244d6:	68fb      	ldr	r3, [r7, #12]
}
 80244d8:	0018      	movs	r0, r3
 80244da:	46bd      	mov	sp, r7
 80244dc:	b004      	add	sp, #16
 80244de:	bd80      	pop	{r7, pc}
 80244e0:	40021000 	.word	0x40021000
 80244e4:	fffffdff 	.word	0xfffffdff
 80244e8:	40012400 	.word	0x40012400
 80244ec:	40012708 	.word	0x40012708
 80244f0:	fffff3ff 	.word	0xfffff3ff
 80244f4:	ffbfffff 	.word	0xffbfffff
 80244f8:	ff7fffff 	.word	0xff7fffff
 80244fc:	efffffff 	.word	0xefffffff

08024500 <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 8024500:	b5b0      	push	{r4, r5, r7, lr}
 8024502:	b084      	sub	sp, #16
 8024504:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 8024506:	240e      	movs	r4, #14
 8024508:	0025      	movs	r5, r4
 802450a:	193c      	adds	r4, r7, r4
 802450c:	f000 f850 	bl	80245b0 <adc_getVdd>
 8024510:	0003      	movs	r3, r0
 8024512:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 8024514:	4b21      	ldr	r3, [pc, #132]	; (802459c <adc_getTemperature+0x9c>)
 8024516:	2110      	movs	r1, #16
 8024518:	0018      	movs	r0, r3
 802451a:	f7ff fef1 	bl	8024300 <__getAdcValue>
 802451e:	0003      	movs	r3, r0
 8024520:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 8024522:	4b1f      	ldr	r3, [pc, #124]	; (80245a0 <adc_getTemperature+0xa0>)
 8024524:	881b      	ldrh	r3, [r3, #0]
 8024526:	001a      	movs	r2, r3
 8024528:	4b1e      	ldr	r3, [pc, #120]	; (80245a4 <adc_getTemperature+0xa4>)
 802452a:	435a      	muls	r2, r3
 802452c:	002c      	movs	r4, r5
 802452e:	193b      	adds	r3, r7, r4
 8024530:	881b      	ldrh	r3, [r3, #0]
 8024532:	0019      	movs	r1, r3
 8024534:	0010      	movs	r0, r2
 8024536:	f7db fe79 	bl	800022c <__divsi3>
 802453a:	0003      	movs	r3, r0
 802453c:	001a      	movs	r2, r3
 802453e:	1dbb      	adds	r3, r7, #6
 8024540:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 8024542:	4b19      	ldr	r3, [pc, #100]	; (80245a8 <adc_getTemperature+0xa8>)
 8024544:	881b      	ldrh	r3, [r3, #0]
 8024546:	001a      	movs	r2, r3
 8024548:	4b16      	ldr	r3, [pc, #88]	; (80245a4 <adc_getTemperature+0xa4>)
 802454a:	435a      	muls	r2, r3
 802454c:	193b      	adds	r3, r7, r4
 802454e:	881b      	ldrh	r3, [r3, #0]
 8024550:	0019      	movs	r1, r3
 8024552:	0010      	movs	r0, r2
 8024554:	f7db fe6a 	bl	800022c <__divsi3>
 8024558:	0003      	movs	r3, r0
 802455a:	001a      	movs	r2, r3
 802455c:	1d3b      	adds	r3, r7, #4
 802455e:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 8024560:	1dbb      	adds	r3, r7, #6
 8024562:	881b      	ldrh	r3, [r3, #0]
 8024564:	68ba      	ldr	r2, [r7, #8]
 8024566:	1ad3      	subs	r3, r2, r3
 8024568:	4a10      	ldr	r2, [pc, #64]	; (80245ac <adc_getTemperature+0xac>)
 802456a:	4353      	muls	r3, r2
 802456c:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 802456e:	1d3b      	adds	r3, r7, #4
 8024570:	881a      	ldrh	r2, [r3, #0]
 8024572:	1dbb      	adds	r3, r7, #6
 8024574:	881b      	ldrh	r3, [r3, #0]
 8024576:	1ad3      	subs	r3, r2, r3
 8024578:	0019      	movs	r1, r3
 802457a:	6838      	ldr	r0, [r7, #0]
 802457c:	f7db fe56 	bl	800022c <__divsi3>
 8024580:	0003      	movs	r3, r0
 8024582:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 8024584:	683b      	ldr	r3, [r7, #0]
 8024586:	4a07      	ldr	r2, [pc, #28]	; (80245a4 <adc_getTemperature+0xa4>)
 8024588:	4694      	mov	ip, r2
 802458a:	4463      	add	r3, ip
 802458c:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 802458e:	683b      	ldr	r3, [r7, #0]
 8024590:	b21b      	sxth	r3, r3

}
 8024592:	0018      	movs	r0, r3
 8024594:	46bd      	mov	sp, r7
 8024596:	b004      	add	sp, #16
 8024598:	bdb0      	pop	{r4, r5, r7, pc}
 802459a:	46c0      	nop			; (mov r8, r8)
 802459c:	48040000 	.word	0x48040000
 80245a0:	1ff8007a 	.word	0x1ff8007a
 80245a4:	00000bb8 	.word	0x00000bb8
 80245a8:	1ff8007e 	.word	0x1ff8007e
 80245ac:	00002710 	.word	0x00002710

080245b0 <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 80245b0:	b590      	push	{r4, r7, lr}
 80245b2:	b083      	sub	sp, #12
 80245b4:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 80245b6:	f7ff fca3 	bl	8023f00 <itsdk_time_get_us>
 80245ba:	000a      	movs	r2, r1
 80245bc:	0001      	movs	r1, r0
 80245be:	4b13      	ldr	r3, [pc, #76]	; (802460c <adc_getVdd+0x5c>)
 80245c0:	68dc      	ldr	r4, [r3, #12]
 80245c2:	689b      	ldr	r3, [r3, #8]
 80245c4:	1ac9      	subs	r1, r1, r3
 80245c6:	41a2      	sbcs	r2, r4
 80245c8:	0008      	movs	r0, r1
 80245ca:	0011      	movs	r1, r2
 80245cc:	22fa      	movs	r2, #250	; 0xfa
 80245ce:	0092      	lsls	r2, r2, #2
 80245d0:	2300      	movs	r3, #0
 80245d2:	f7db ffb3 	bl	800053c <__aeabi_uldivmod>
 80245d6:	0003      	movs	r3, r0
 80245d8:	000c      	movs	r4, r1
 80245da:	603b      	str	r3, [r7, #0]
 80245dc:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 80245de:	687b      	ldr	r3, [r7, #4]
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	d10b      	bne.n	80245fc <adc_getVdd+0x4c>
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d102      	bne.n	80245f0 <adc_getVdd+0x40>
 80245ea:	683b      	ldr	r3, [r7, #0]
 80245ec:	2b07      	cmp	r3, #7
 80245ee:	d805      	bhi.n	80245fc <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 80245f0:	683b      	ldr	r3, [r7, #0]
 80245f2:	2208      	movs	r2, #8
 80245f4:	1ad3      	subs	r3, r2, r3
 80245f6:	0018      	movs	r0, r3
 80245f8:	f000 fd1a 	bl	8025030 <itsdk_delayMs>
	}
	return adc_getValue(0);
 80245fc:	2000      	movs	r0, #0
 80245fe:	f000 f813 	bl	8024628 <adc_getValue>
 8024602:	0003      	movs	r3, r0
}
 8024604:	0018      	movs	r0, r3
 8024606:	46bd      	mov	sp, r7
 8024608:	b003      	add	sp, #12
 802460a:	bd90      	pop	{r4, r7, pc}
 802460c:	20002378 	.word	0x20002378

08024610 <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 8024610:	b580      	push	{r7, lr}
 8024612:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 8024614:	2041      	movs	r0, #65	; 0x41
 8024616:	f000 f807 	bl	8024628 <adc_getValue>
 802461a:	0003      	movs	r3, r0
 802461c:	18db      	adds	r3, r3, r3
 802461e:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 8024620:	0018      	movs	r0, r3
 8024622:	46bd      	mov	sp, r7
 8024624:	bd80      	pop	{r7, pc}
	...

08024628 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 8024628:	b580      	push	{r7, lr}
 802462a:	b08c      	sub	sp, #48	; 0x30
 802462c:	af00      	add	r7, sp, #0
 802462e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 8024630:	23a0      	movs	r3, #160	; 0xa0
 8024632:	05db      	lsls	r3, r3, #23
 8024634:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024636:	2108      	movs	r1, #8
 8024638:	187b      	adds	r3, r7, r1
 802463a:	2203      	movs	r2, #3
 802463c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 802463e:	187b      	adds	r3, r7, r1
 8024640:	2200      	movs	r2, #0
 8024642:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 8024644:	2300      	movs	r3, #0
 8024646:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 8024648:	687b      	ldr	r3, [r7, #4]
 802464a:	2b4d      	cmp	r3, #77	; 0x4d
 802464c:	d900      	bls.n	8024650 <adc_getValue+0x28>
 802464e:	e085      	b.n	802475c <adc_getValue+0x134>
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	009a      	lsls	r2, r3, #2
 8024654:	4b5f      	ldr	r3, [pc, #380]	; (80247d4 <adc_getValue+0x1ac>)
 8024656:	18d3      	adds	r3, r2, r3
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 802465c:	4b5e      	ldr	r3, [pc, #376]	; (80247d8 <adc_getValue+0x1b0>)
 802465e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024660:	e083      	b.n	802476a <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8024662:	2308      	movs	r3, #8
 8024664:	18fb      	adds	r3, r7, r3
 8024666:	2201      	movs	r2, #1
 8024668:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 802466a:	23a0      	movs	r3, #160	; 0xa0
 802466c:	05db      	lsls	r3, r3, #23
 802466e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 8024670:	2301      	movs	r3, #1
 8024672:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024674:	e079      	b.n	802476a <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8024676:	2308      	movs	r3, #8
 8024678:	18fb      	adds	r3, r7, r3
 802467a:	2202      	movs	r2, #2
 802467c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 802467e:	23a0      	movs	r3, #160	; 0xa0
 8024680:	05db      	lsls	r3, r3, #23
 8024682:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 8024684:	4b55      	ldr	r3, [pc, #340]	; (80247dc <adc_getValue+0x1b4>)
 8024686:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024688:	e06f      	b.n	802476a <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 802468a:	2308      	movs	r3, #8
 802468c:	18fb      	adds	r3, r7, r3
 802468e:	2204      	movs	r2, #4
 8024690:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8024692:	23a0      	movs	r3, #160	; 0xa0
 8024694:	05db      	lsls	r3, r3, #23
 8024696:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 8024698:	4b51      	ldr	r3, [pc, #324]	; (80247e0 <adc_getValue+0x1b8>)
 802469a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 802469c:	e065      	b.n	802476a <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 802469e:	2308      	movs	r3, #8
 80246a0:	18fb      	adds	r3, r7, r3
 80246a2:	2208      	movs	r2, #8
 80246a4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246a6:	23a0      	movs	r3, #160	; 0xa0
 80246a8:	05db      	lsls	r3, r3, #23
 80246aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 80246ac:	4b4d      	ldr	r3, [pc, #308]	; (80247e4 <adc_getValue+0x1bc>)
 80246ae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246b0:	e05b      	b.n	802476a <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80246b2:	2308      	movs	r3, #8
 80246b4:	18fb      	adds	r3, r7, r3
 80246b6:	2210      	movs	r2, #16
 80246b8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246ba:	23a0      	movs	r3, #160	; 0xa0
 80246bc:	05db      	lsls	r3, r3, #23
 80246be:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 80246c0:	4b49      	ldr	r3, [pc, #292]	; (80247e8 <adc_getValue+0x1c0>)
 80246c2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246c4:	e051      	b.n	802476a <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80246c6:	2308      	movs	r3, #8
 80246c8:	18fb      	adds	r3, r7, r3
 80246ca:	2220      	movs	r2, #32
 80246cc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246ce:	23a0      	movs	r3, #160	; 0xa0
 80246d0:	05db      	lsls	r3, r3, #23
 80246d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 80246d4:	4b45      	ldr	r3, [pc, #276]	; (80247ec <adc_getValue+0x1c4>)
 80246d6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246d8:	e047      	b.n	802476a <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80246da:	2308      	movs	r3, #8
 80246dc:	18fb      	adds	r3, r7, r3
 80246de:	2240      	movs	r2, #64	; 0x40
 80246e0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246e2:	23a0      	movs	r3, #160	; 0xa0
 80246e4:	05db      	lsls	r3, r3, #23
 80246e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 80246e8:	4b41      	ldr	r3, [pc, #260]	; (80247f0 <adc_getValue+0x1c8>)
 80246ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246ec:	e03d      	b.n	802476a <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80246ee:	2308      	movs	r3, #8
 80246f0:	18fb      	adds	r3, r7, r3
 80246f2:	2280      	movs	r2, #128	; 0x80
 80246f4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246f6:	23a0      	movs	r3, #160	; 0xa0
 80246f8:	05db      	lsls	r3, r3, #23
 80246fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 80246fc:	4b3d      	ldr	r3, [pc, #244]	; (80247f4 <adc_getValue+0x1cc>)
 80246fe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024700:	e033      	b.n	802476a <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8024702:	2308      	movs	r3, #8
 8024704:	18fb      	adds	r3, r7, r3
 8024706:	2201      	movs	r2, #1
 8024708:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 802470a:	4b3b      	ldr	r3, [pc, #236]	; (80247f8 <adc_getValue+0x1d0>)
 802470c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 802470e:	4b3b      	ldr	r3, [pc, #236]	; (80247fc <adc_getValue+0x1d4>)
 8024710:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024712:	e02a      	b.n	802476a <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8024714:	2308      	movs	r3, #8
 8024716:	18fb      	adds	r3, r7, r3
 8024718:	2202      	movs	r2, #2
 802471a:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 802471c:	4b36      	ldr	r3, [pc, #216]	; (80247f8 <adc_getValue+0x1d0>)
 802471e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 8024720:	4b37      	ldr	r3, [pc, #220]	; (8024800 <adc_getValue+0x1d8>)
 8024722:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024724:	e021      	b.n	802476a <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8024726:	2308      	movs	r3, #8
 8024728:	18fb      	adds	r3, r7, r3
 802472a:	2201      	movs	r2, #1
 802472c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 802472e:	4b35      	ldr	r3, [pc, #212]	; (8024804 <adc_getValue+0x1dc>)
 8024730:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 8024732:	4b35      	ldr	r3, [pc, #212]	; (8024808 <adc_getValue+0x1e0>)
 8024734:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024736:	e018      	b.n	802476a <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8024738:	2308      	movs	r3, #8
 802473a:	18fb      	adds	r3, r7, r3
 802473c:	2202      	movs	r2, #2
 802473e:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8024740:	4b30      	ldr	r3, [pc, #192]	; (8024804 <adc_getValue+0x1dc>)
 8024742:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 8024744:	4b31      	ldr	r3, [pc, #196]	; (802480c <adc_getValue+0x1e4>)
 8024746:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024748:	e00f      	b.n	802476a <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 802474a:	2308      	movs	r3, #8
 802474c:	18fb      	adds	r3, r7, r3
 802474e:	2204      	movs	r2, #4
 8024750:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8024752:	4b2c      	ldr	r3, [pc, #176]	; (8024804 <adc_getValue+0x1dc>)
 8024754:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 8024756:	4b2e      	ldr	r3, [pc, #184]	; (8024810 <adc_getValue+0x1e8>)
 8024758:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 802475a:	e006      	b.n	802476a <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	b29b      	uxth	r3, r3
 8024760:	4a2c      	ldr	r2, [pc, #176]	; (8024814 <adc_getValue+0x1ec>)
 8024762:	0019      	movs	r1, r3
 8024764:	0010      	movs	r0, r2
 8024766:	f7fe fb5b 	bl	8022e20 <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 802476a:	687b      	ldr	r3, [r7, #4]
 802476c:	2b00      	cmp	r3, #0
 802476e:	d006      	beq.n	802477e <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 8024770:	2308      	movs	r3, #8
 8024772:	18fa      	adds	r2, r7, r3
 8024774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024776:	0011      	movs	r1, r2
 8024778:	0018      	movs	r0, r3
 802477a:	f7df fe5b 	bl	8004434 <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 802477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024780:	2110      	movs	r1, #16
 8024782:	0018      	movs	r0, r3
 8024784:	f7ff fdbc 	bl	8024300 <__getAdcValue>
 8024788:	0003      	movs	r3, r0
 802478a:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	2b00      	cmp	r3, #0
 8024790:	d112      	bne.n	80247b8 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 8024792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024794:	2b00      	cmp	r3, #0
 8024796:	d101      	bne.n	802479c <adc_getValue+0x174>
 8024798:	2300      	movs	r3, #0
 802479a:	e017      	b.n	80247cc <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 802479c:	4b1e      	ldr	r3, [pc, #120]	; (8024818 <adc_getValue+0x1f0>)
 802479e:	881b      	ldrh	r3, [r3, #0]
 80247a0:	001a      	movs	r2, r3
 80247a2:	4b1e      	ldr	r3, [pc, #120]	; (802481c <adc_getValue+0x1f4>)
 80247a4:	4353      	muls	r3, r2
 80247a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80247a8:	0018      	movs	r0, r3
 80247aa:	f7db fcb5 	bl	8000118 <__udivsi3>
 80247ae:	0003      	movs	r3, r0
 80247b0:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 80247b2:	69fb      	ldr	r3, [r7, #28]
 80247b4:	b29b      	uxth	r3, r3
 80247b6:	e009      	b.n	80247cc <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 80247b8:	f7ff fefa 	bl	80245b0 <adc_getVdd>
 80247bc:	0003      	movs	r3, r0
 80247be:	001a      	movs	r2, r3
 80247c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247c2:	4353      	muls	r3, r2
 80247c4:	0b1b      	lsrs	r3, r3, #12
 80247c6:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 80247c8:	6a3b      	ldr	r3, [r7, #32]
 80247ca:	b29b      	uxth	r3, r3
	}

}
 80247cc:	0018      	movs	r0, r3
 80247ce:	46bd      	mov	sp, r7
 80247d0:	b00c      	add	sp, #48	; 0x30
 80247d2:	bd80      	pop	{r7, pc}
 80247d4:	08029aa4 	.word	0x08029aa4
 80247d8:	44020000 	.word	0x44020000
 80247dc:	04000002 	.word	0x04000002
 80247e0:	08000004 	.word	0x08000004
 80247e4:	0c000008 	.word	0x0c000008
 80247e8:	10000010 	.word	0x10000010
 80247ec:	14000020 	.word	0x14000020
 80247f0:	18000040 	.word	0x18000040
 80247f4:	1c000080 	.word	0x1c000080
 80247f8:	50000400 	.word	0x50000400
 80247fc:	20000100 	.word	0x20000100
 8024800:	24000200 	.word	0x24000200
 8024804:	50000800 	.word	0x50000800
 8024808:	28000400 	.word	0x28000400
 802480c:	2c000800 	.word	0x2c000800
 8024810:	30001000 	.word	0x30001000
 8024814:	d0000008 	.word	0xd0000008
 8024818:	1ff80078 	.word	0x1ff80078
 802481c:	00000bb8 	.word	0x00000bb8

08024820 <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 8024820:	b580      	push	{r7, lr}
 8024822:	b082      	sub	sp, #8
 8024824:	af00      	add	r7, sp, #0
 8024826:	0002      	movs	r2, r0
 8024828:	1dfb      	adds	r3, r7, #7
 802482a:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 802482c:	1dfb      	adds	r3, r7, #7
 802482e:	781b      	ldrb	r3, [r3, #0]
 8024830:	2b07      	cmp	r3, #7
 8024832:	d811      	bhi.n	8024858 <getPortFromBankId+0x38>
 8024834:	009a      	lsls	r2, r3, #2
 8024836:	4b0f      	ldr	r3, [pc, #60]	; (8024874 <getPortFromBankId+0x54>)
 8024838:	18d3      	adds	r3, r2, r3
 802483a:	681b      	ldr	r3, [r3, #0]
 802483c:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 802483e:	23a0      	movs	r3, #160	; 0xa0
 8024840:	05db      	lsls	r3, r3, #23
 8024842:	e012      	b.n	802486a <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 8024844:	4b0c      	ldr	r3, [pc, #48]	; (8024878 <getPortFromBankId+0x58>)
 8024846:	e010      	b.n	802486a <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 8024848:	4b0c      	ldr	r3, [pc, #48]	; (802487c <getPortFromBankId+0x5c>)
 802484a:	e00e      	b.n	802486a <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 802484c:	4b0c      	ldr	r3, [pc, #48]	; (8024880 <getPortFromBankId+0x60>)
 802484e:	e00c      	b.n	802486a <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 8024850:	4b0c      	ldr	r3, [pc, #48]	; (8024884 <getPortFromBankId+0x64>)
 8024852:	e00a      	b.n	802486a <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 8024854:	4b0c      	ldr	r3, [pc, #48]	; (8024888 <getPortFromBankId+0x68>)
 8024856:	e008      	b.n	802486a <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 8024858:	1dfb      	adds	r3, r7, #7
 802485a:	781b      	ldrb	r3, [r3, #0]
 802485c:	b29b      	uxth	r3, r3
 802485e:	4a0b      	ldr	r2, [pc, #44]	; (802488c <getPortFromBankId+0x6c>)
 8024860:	0019      	movs	r1, r3
 8024862:	0010      	movs	r0, r2
 8024864:	f7fe fadc 	bl	8022e20 <itsdk_error_report>
	}
	return NULL;
 8024868:	2300      	movs	r3, #0
}
 802486a:	0018      	movs	r0, r3
 802486c:	46bd      	mov	sp, r7
 802486e:	b002      	add	sp, #8
 8024870:	bd80      	pop	{r7, pc}
 8024872:	46c0      	nop			; (mov r8, r8)
 8024874:	08029bdc 	.word	0x08029bdc
 8024878:	50000400 	.word	0x50000400
 802487c:	50000800 	.word	0x50000800
 8024880:	50000c00 	.word	0x50000c00
 8024884:	50001000 	.word	0x50001000
 8024888:	50001c00 	.word	0x50001c00
 802488c:	d0000004 	.word	0xd0000004

08024890 <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 8024890:	b580      	push	{r7, lr}
 8024892:	b084      	sub	sp, #16
 8024894:	af00      	add	r7, sp, #0
 8024896:	0002      	movs	r2, r0
 8024898:	1dbb      	adds	r3, r7, #6
 802489a:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 802489c:	230f      	movs	r3, #15
 802489e:	18fb      	adds	r3, r7, r3
 80248a0:	2200      	movs	r2, #0
 80248a2:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 80248a4:	1dbb      	adds	r3, r7, #6
 80248a6:	881a      	ldrh	r2, [r3, #0]
 80248a8:	23ff      	movs	r3, #255	; 0xff
 80248aa:	021b      	lsls	r3, r3, #8
 80248ac:	4013      	ands	r3, r2
 80248ae:	d006      	beq.n	80248be <getPinNumFromPinVector+0x2e>
 80248b0:	220f      	movs	r2, #15
 80248b2:	18bb      	adds	r3, r7, r2
 80248b4:	18ba      	adds	r2, r7, r2
 80248b6:	7812      	ldrb	r2, [r2, #0]
 80248b8:	2108      	movs	r1, #8
 80248ba:	430a      	orrs	r2, r1
 80248bc:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 80248be:	1dbb      	adds	r3, r7, #6
 80248c0:	881b      	ldrh	r3, [r3, #0]
 80248c2:	4a14      	ldr	r2, [pc, #80]	; (8024914 <getPinNumFromPinVector+0x84>)
 80248c4:	4013      	ands	r3, r2
 80248c6:	d006      	beq.n	80248d6 <getPinNumFromPinVector+0x46>
 80248c8:	220f      	movs	r2, #15
 80248ca:	18bb      	adds	r3, r7, r2
 80248cc:	18ba      	adds	r2, r7, r2
 80248ce:	7812      	ldrb	r2, [r2, #0]
 80248d0:	2104      	movs	r1, #4
 80248d2:	430a      	orrs	r2, r1
 80248d4:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 80248d6:	1dbb      	adds	r3, r7, #6
 80248d8:	881b      	ldrh	r3, [r3, #0]
 80248da:	4a0f      	ldr	r2, [pc, #60]	; (8024918 <getPinNumFromPinVector+0x88>)
 80248dc:	4013      	ands	r3, r2
 80248de:	d006      	beq.n	80248ee <getPinNumFromPinVector+0x5e>
 80248e0:	220f      	movs	r2, #15
 80248e2:	18bb      	adds	r3, r7, r2
 80248e4:	18ba      	adds	r2, r7, r2
 80248e6:	7812      	ldrb	r2, [r2, #0]
 80248e8:	2102      	movs	r1, #2
 80248ea:	430a      	orrs	r2, r1
 80248ec:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 80248ee:	1dbb      	adds	r3, r7, #6
 80248f0:	881b      	ldrh	r3, [r3, #0]
 80248f2:	4a0a      	ldr	r2, [pc, #40]	; (802491c <getPinNumFromPinVector+0x8c>)
 80248f4:	4013      	ands	r3, r2
 80248f6:	d006      	beq.n	8024906 <getPinNumFromPinVector+0x76>
 80248f8:	220f      	movs	r2, #15
 80248fa:	18bb      	adds	r3, r7, r2
 80248fc:	18ba      	adds	r2, r7, r2
 80248fe:	7812      	ldrb	r2, [r2, #0]
 8024900:	2101      	movs	r1, #1
 8024902:	430a      	orrs	r2, r1
 8024904:	701a      	strb	r2, [r3, #0]
	return pinPos;
 8024906:	230f      	movs	r3, #15
 8024908:	18fb      	adds	r3, r7, r3
 802490a:	781b      	ldrb	r3, [r3, #0]
}
 802490c:	0018      	movs	r0, r3
 802490e:	46bd      	mov	sp, r7
 8024910:	b004      	add	sp, #16
 8024912:	bd80      	pop	{r7, pc}
 8024914:	0000f0f0 	.word	0x0000f0f0
 8024918:	0000cccc 	.word	0x0000cccc
 802491c:	0000aaaa 	.word	0x0000aaaa

08024920 <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 8024920:	b5b0      	push	{r4, r5, r7, lr}
 8024922:	b084      	sub	sp, #16
 8024924:	af00      	add	r7, sp, #0
 8024926:	0002      	movs	r2, r0
 8024928:	1dfb      	adds	r3, r7, #7
 802492a:	701a      	strb	r2, [r3, #0]
 802492c:	1d3b      	adds	r3, r7, #4
 802492e:	1c0a      	adds	r2, r1, #0
 8024930:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 8024932:	250f      	movs	r5, #15
 8024934:	197c      	adds	r4, r7, r5
 8024936:	1d3b      	adds	r3, r7, #4
 8024938:	881b      	ldrh	r3, [r3, #0]
 802493a:	0018      	movs	r0, r3
 802493c:	f7ff ffa8 	bl	8024890 <getPinNumFromPinVector>
 8024940:	0003      	movs	r3, r0
 8024942:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 8024944:	197b      	adds	r3, r7, r5
 8024946:	781b      	ldrb	r3, [r3, #0]
 8024948:	2b01      	cmp	r3, #1
 802494a:	d801      	bhi.n	8024950 <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 802494c:	2305      	movs	r3, #5
 802494e:	e007      	b.n	8024960 <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 8024950:	230f      	movs	r3, #15
 8024952:	18fb      	adds	r3, r7, r3
 8024954:	781b      	ldrb	r3, [r3, #0]
 8024956:	2b03      	cmp	r3, #3
 8024958:	d801      	bhi.n	802495e <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 802495a:	2306      	movs	r3, #6
 802495c:	e000      	b.n	8024960 <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 802495e:	2307      	movs	r3, #7
	}
}
 8024960:	0018      	movs	r0, r3
 8024962:	46bd      	mov	sp, r7
 8024964:	b004      	add	sp, #16
 8024966:	bdb0      	pop	{r4, r5, r7, pc}

08024968 <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 8024968:	b590      	push	{r4, r7, lr}
 802496a:	b085      	sub	sp, #20
 802496c:	af02      	add	r7, sp, #8
 802496e:	0004      	movs	r4, r0
 8024970:	0008      	movs	r0, r1
 8024972:	0011      	movs	r1, r2
 8024974:	1dfb      	adds	r3, r7, #7
 8024976:	1c22      	adds	r2, r4, #0
 8024978:	701a      	strb	r2, [r3, #0]
 802497a:	1d3b      	adds	r3, r7, #4
 802497c:	1c02      	adds	r2, r0, #0
 802497e:	801a      	strh	r2, [r3, #0]
 8024980:	1dbb      	adds	r3, r7, #6
 8024982:	1c0a      	adds	r2, r1, #0
 8024984:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 8024986:	1dbb      	adds	r3, r7, #6
 8024988:	781a      	ldrb	r2, [r3, #0]
 802498a:	1d3b      	adds	r3, r7, #4
 802498c:	8819      	ldrh	r1, [r3, #0]
 802498e:	1dfb      	adds	r3, r7, #7
 8024990:	7818      	ldrb	r0, [r3, #0]
 8024992:	2300      	movs	r3, #0
 8024994:	9300      	str	r3, [sp, #0]
 8024996:	2300      	movs	r3, #0
 8024998:	f000 f804 	bl	80249a4 <gpio_configure_ext>
}
 802499c:	46c0      	nop			; (mov r8, r8)
 802499e:	46bd      	mov	sp, r7
 80249a0:	b003      	add	sp, #12
 80249a2:	bd90      	pop	{r4, r7, pc}

080249a4 <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 80249a4:	b5b0      	push	{r4, r5, r7, lr}
 80249a6:	b08e      	sub	sp, #56	; 0x38
 80249a8:	af00      	add	r7, sp, #0
 80249aa:	0005      	movs	r5, r0
 80249ac:	000c      	movs	r4, r1
 80249ae:	0010      	movs	r0, r2
 80249b0:	0019      	movs	r1, r3
 80249b2:	1dfb      	adds	r3, r7, #7
 80249b4:	1c2a      	adds	r2, r5, #0
 80249b6:	701a      	strb	r2, [r3, #0]
 80249b8:	1d3b      	adds	r3, r7, #4
 80249ba:	1c22      	adds	r2, r4, #0
 80249bc:	801a      	strh	r2, [r3, #0]
 80249be:	1dbb      	adds	r3, r7, #6
 80249c0:	1c02      	adds	r2, r0, #0
 80249c2:	701a      	strb	r2, [r3, #0]
 80249c4:	1cfb      	adds	r3, r7, #3
 80249c6:	1c0a      	adds	r2, r1, #0
 80249c8:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 80249ca:	1dfb      	adds	r3, r7, #7
 80249cc:	781b      	ldrb	r3, [r3, #0]
 80249ce:	2b07      	cmp	r3, #7
 80249d0:	d852      	bhi.n	8024a78 <gpio_configure_ext+0xd4>
 80249d2:	009a      	lsls	r2, r3, #2
 80249d4:	4bd0      	ldr	r3, [pc, #832]	; (8024d18 <gpio_configure_ext+0x374>)
 80249d6:	18d3      	adds	r3, r2, r3
 80249d8:	681b      	ldr	r3, [r3, #0]
 80249da:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 80249dc:	4bcf      	ldr	r3, [pc, #828]	; (8024d1c <gpio_configure_ext+0x378>)
 80249de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80249e0:	4bce      	ldr	r3, [pc, #824]	; (8024d1c <gpio_configure_ext+0x378>)
 80249e2:	2101      	movs	r1, #1
 80249e4:	430a      	orrs	r2, r1
 80249e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80249e8:	4bcc      	ldr	r3, [pc, #816]	; (8024d1c <gpio_configure_ext+0x378>)
 80249ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80249ec:	2201      	movs	r2, #1
 80249ee:	4013      	ands	r3, r2
 80249f0:	61fb      	str	r3, [r7, #28]
 80249f2:	69fb      	ldr	r3, [r7, #28]
		  break;
 80249f4:	e040      	b.n	8024a78 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 80249f6:	4bc9      	ldr	r3, [pc, #804]	; (8024d1c <gpio_configure_ext+0x378>)
 80249f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80249fa:	4bc8      	ldr	r3, [pc, #800]	; (8024d1c <gpio_configure_ext+0x378>)
 80249fc:	2102      	movs	r1, #2
 80249fe:	430a      	orrs	r2, r1
 8024a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a02:	4bc6      	ldr	r3, [pc, #792]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a06:	2202      	movs	r2, #2
 8024a08:	4013      	ands	r3, r2
 8024a0a:	61bb      	str	r3, [r7, #24]
 8024a0c:	69bb      	ldr	r3, [r7, #24]
		  break;
 8024a0e:	e033      	b.n	8024a78 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 8024a10:	4bc2      	ldr	r3, [pc, #776]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a14:	4bc1      	ldr	r3, [pc, #772]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a16:	2104      	movs	r1, #4
 8024a18:	430a      	orrs	r2, r1
 8024a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a1c:	4bbf      	ldr	r3, [pc, #764]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a20:	2204      	movs	r2, #4
 8024a22:	4013      	ands	r3, r2
 8024a24:	617b      	str	r3, [r7, #20]
 8024a26:	697b      	ldr	r3, [r7, #20]
		  break;
 8024a28:	e026      	b.n	8024a78 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 8024a2a:	4bbc      	ldr	r3, [pc, #752]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a2e:	4bbb      	ldr	r3, [pc, #748]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a30:	2108      	movs	r1, #8
 8024a32:	430a      	orrs	r2, r1
 8024a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a36:	4bb9      	ldr	r3, [pc, #740]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a3a:	2208      	movs	r2, #8
 8024a3c:	4013      	ands	r3, r2
 8024a3e:	613b      	str	r3, [r7, #16]
 8024a40:	693b      	ldr	r3, [r7, #16]
		  break;
 8024a42:	e019      	b.n	8024a78 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 8024a44:	4bb5      	ldr	r3, [pc, #724]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a48:	4bb4      	ldr	r3, [pc, #720]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a4a:	2110      	movs	r1, #16
 8024a4c:	430a      	orrs	r2, r1
 8024a4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a50:	4bb2      	ldr	r3, [pc, #712]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a54:	2210      	movs	r2, #16
 8024a56:	4013      	ands	r3, r2
 8024a58:	60fb      	str	r3, [r7, #12]
 8024a5a:	68fb      	ldr	r3, [r7, #12]
		  break;
 8024a5c:	e00c      	b.n	8024a78 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 8024a5e:	4baf      	ldr	r3, [pc, #700]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a62:	4bae      	ldr	r3, [pc, #696]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a64:	2180      	movs	r1, #128	; 0x80
 8024a66:	430a      	orrs	r2, r1
 8024a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a6a:	4bac      	ldr	r3, [pc, #688]	; (8024d1c <gpio_configure_ext+0x378>)
 8024a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a6e:	2280      	movs	r2, #128	; 0x80
 8024a70:	4013      	ands	r3, r2
 8024a72:	60bb      	str	r3, [r7, #8]
 8024a74:	68bb      	ldr	r3, [r7, #8]
		  break;
 8024a76:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 8024a78:	1d3b      	adds	r3, r7, #4
 8024a7a:	881a      	ldrh	r2, [r3, #0]
 8024a7c:	2320      	movs	r3, #32
 8024a7e:	18fb      	adds	r3, r7, r3
 8024a80:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 8024a82:	1cfb      	adds	r3, r7, #3
 8024a84:	781b      	ldrb	r3, [r3, #0]
 8024a86:	2b00      	cmp	r3, #0
 8024a88:	d002      	beq.n	8024a90 <gpio_configure_ext+0xec>
 8024a8a:	2b01      	cmp	r3, #1
 8024a8c:	d005      	beq.n	8024a9a <gpio_configure_ext+0xf6>
 8024a8e:	e009      	b.n	8024aa4 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024a90:	2320      	movs	r3, #32
 8024a92:	18fb      	adds	r3, r7, r3
 8024a94:	2200      	movs	r2, #0
 8024a96:	60da      	str	r2, [r3, #12]
		break;
 8024a98:	e004      	b.n	8024aa4 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024a9a:	2320      	movs	r3, #32
 8024a9c:	18fb      	adds	r3, r7, r3
 8024a9e:	2203      	movs	r2, #3
 8024aa0:	60da      	str	r2, [r3, #12]
		break;
 8024aa2:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 8024aa4:	1dbb      	adds	r3, r7, #6
 8024aa6:	781b      	ldrb	r3, [r3, #0]
 8024aa8:	2b13      	cmp	r3, #19
 8024aaa:	d900      	bls.n	8024aae <gpio_configure_ext+0x10a>
 8024aac:	e0a4      	b.n	8024bf8 <gpio_configure_ext+0x254>
 8024aae:	009a      	lsls	r2, r3, #2
 8024ab0:	4b9b      	ldr	r3, [pc, #620]	; (8024d20 <gpio_configure_ext+0x37c>)
 8024ab2:	18d3      	adds	r3, r2, r3
 8024ab4:	681b      	ldr	r3, [r3, #0]
 8024ab6:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024ab8:	2120      	movs	r1, #32
 8024aba:	187b      	adds	r3, r7, r1
 8024abc:	2201      	movs	r2, #1
 8024abe:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024ac0:	187b      	adds	r3, r7, r1
 8024ac2:	2200      	movs	r2, #0
 8024ac4:	609a      	str	r2, [r3, #8]
		break;
 8024ac6:	e097      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024ac8:	2120      	movs	r1, #32
 8024aca:	187b      	adds	r3, r7, r1
 8024acc:	2201      	movs	r2, #1
 8024ace:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024ad0:	187b      	adds	r3, r7, r1
 8024ad2:	2201      	movs	r2, #1
 8024ad4:	609a      	str	r2, [r3, #8]
		break;
 8024ad6:	e08f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024ad8:	2120      	movs	r1, #32
 8024ada:	187b      	adds	r3, r7, r1
 8024adc:	2201      	movs	r2, #1
 8024ade:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024ae0:	187b      	adds	r3, r7, r1
 8024ae2:	2202      	movs	r2, #2
 8024ae4:	609a      	str	r2, [r3, #8]
		break;
 8024ae6:	e087      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8024ae8:	2120      	movs	r1, #32
 8024aea:	187b      	adds	r3, r7, r1
 8024aec:	2211      	movs	r2, #17
 8024aee:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024af0:	187b      	adds	r3, r7, r1
 8024af2:	2200      	movs	r2, #0
 8024af4:	609a      	str	r2, [r3, #8]
		break;
 8024af6:	e07f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024af8:	2120      	movs	r1, #32
 8024afa:	187b      	adds	r3, r7, r1
 8024afc:	2200      	movs	r2, #0
 8024afe:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b00:	187b      	adds	r3, r7, r1
 8024b02:	2200      	movs	r2, #0
 8024b04:	609a      	str	r2, [r3, #8]
		break;
 8024b06:	e077      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024b08:	2120      	movs	r1, #32
 8024b0a:	187b      	adds	r3, r7, r1
 8024b0c:	2200      	movs	r2, #0
 8024b0e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024b10:	187b      	adds	r3, r7, r1
 8024b12:	2201      	movs	r2, #1
 8024b14:	609a      	str	r2, [r3, #8]
		break;
 8024b16:	e06f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024b18:	2120      	movs	r1, #32
 8024b1a:	187b      	adds	r3, r7, r1
 8024b1c:	2200      	movs	r2, #0
 8024b1e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024b20:	187b      	adds	r3, r7, r1
 8024b22:	2202      	movs	r2, #2
 8024b24:	609a      	str	r2, [r3, #8]
		break;
 8024b26:	e067      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8024b28:	2120      	movs	r1, #32
 8024b2a:	187b      	adds	r3, r7, r1
 8024b2c:	4a7d      	ldr	r2, [pc, #500]	; (8024d24 <gpio_configure_ext+0x380>)
 8024b2e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b30:	187b      	adds	r3, r7, r1
 8024b32:	2200      	movs	r2, #0
 8024b34:	609a      	str	r2, [r3, #8]
		break;
 8024b36:	e05f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8024b38:	2120      	movs	r1, #32
 8024b3a:	187b      	adds	r3, r7, r1
 8024b3c:	4a79      	ldr	r2, [pc, #484]	; (8024d24 <gpio_configure_ext+0x380>)
 8024b3e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024b40:	187b      	adds	r3, r7, r1
 8024b42:	2202      	movs	r2, #2
 8024b44:	609a      	str	r2, [r3, #8]
		break;
 8024b46:	e057      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8024b48:	2120      	movs	r1, #32
 8024b4a:	187b      	adds	r3, r7, r1
 8024b4c:	4a75      	ldr	r2, [pc, #468]	; (8024d24 <gpio_configure_ext+0x380>)
 8024b4e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024b50:	187b      	adds	r3, r7, r1
 8024b52:	2201      	movs	r2, #1
 8024b54:	609a      	str	r2, [r3, #8]
		break;
 8024b56:	e04f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8024b58:	2120      	movs	r1, #32
 8024b5a:	187b      	adds	r3, r7, r1
 8024b5c:	4a72      	ldr	r2, [pc, #456]	; (8024d28 <gpio_configure_ext+0x384>)
 8024b5e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b60:	187b      	adds	r3, r7, r1
 8024b62:	2200      	movs	r2, #0
 8024b64:	609a      	str	r2, [r3, #8]
		break;
 8024b66:	e047      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8024b68:	2120      	movs	r1, #32
 8024b6a:	187b      	adds	r3, r7, r1
 8024b6c:	4a6e      	ldr	r2, [pc, #440]	; (8024d28 <gpio_configure_ext+0x384>)
 8024b6e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024b70:	187b      	adds	r3, r7, r1
 8024b72:	2201      	movs	r2, #1
 8024b74:	609a      	str	r2, [r3, #8]
		break;
 8024b76:	e03f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8024b78:	2120      	movs	r1, #32
 8024b7a:	187b      	adds	r3, r7, r1
 8024b7c:	4a6a      	ldr	r2, [pc, #424]	; (8024d28 <gpio_configure_ext+0x384>)
 8024b7e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024b80:	187b      	adds	r3, r7, r1
 8024b82:	2202      	movs	r2, #2
 8024b84:	609a      	str	r2, [r3, #8]
		break;
 8024b86:	e037      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8024b88:	2120      	movs	r1, #32
 8024b8a:	187b      	adds	r3, r7, r1
 8024b8c:	4a67      	ldr	r2, [pc, #412]	; (8024d2c <gpio_configure_ext+0x388>)
 8024b8e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b90:	187b      	adds	r3, r7, r1
 8024b92:	2200      	movs	r2, #0
 8024b94:	609a      	str	r2, [r3, #8]
		break;
 8024b96:	e02f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024b98:	2120      	movs	r1, #32
 8024b9a:	187b      	adds	r3, r7, r1
 8024b9c:	2203      	movs	r2, #3
 8024b9e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024ba0:	187b      	adds	r3, r7, r1
 8024ba2:	2200      	movs	r2, #0
 8024ba4:	609a      	str	r2, [r3, #8]
		break;
 8024ba6:	e027      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024ba8:	2120      	movs	r1, #32
 8024baa:	187b      	adds	r3, r7, r1
 8024bac:	2203      	movs	r2, #3
 8024bae:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bb0:	187b      	adds	r3, r7, r1
 8024bb2:	2200      	movs	r2, #0
 8024bb4:	609a      	str	r2, [r3, #8]
		break;
 8024bb6:	e01f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024bb8:	2120      	movs	r1, #32
 8024bba:	187b      	adds	r3, r7, r1
 8024bbc:	2202      	movs	r2, #2
 8024bbe:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bc0:	187b      	adds	r3, r7, r1
 8024bc2:	2200      	movs	r2, #0
 8024bc4:	609a      	str	r2, [r3, #8]
	    break;
 8024bc6:	e017      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024bc8:	2120      	movs	r1, #32
 8024bca:	187b      	adds	r3, r7, r1
 8024bcc:	2202      	movs	r2, #2
 8024bce:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024bd0:	187b      	adds	r3, r7, r1
 8024bd2:	2201      	movs	r2, #1
 8024bd4:	609a      	str	r2, [r3, #8]
	    break;
 8024bd6:	e00f      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024bd8:	2120      	movs	r1, #32
 8024bda:	187b      	adds	r3, r7, r1
 8024bdc:	2202      	movs	r2, #2
 8024bde:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024be0:	187b      	adds	r3, r7, r1
 8024be2:	2202      	movs	r2, #2
 8024be4:	609a      	str	r2, [r3, #8]
	    break;
 8024be6:	e007      	b.n	8024bf8 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8024be8:	2120      	movs	r1, #32
 8024bea:	187b      	adds	r3, r7, r1
 8024bec:	2212      	movs	r2, #18
 8024bee:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bf0:	187b      	adds	r3, r7, r1
 8024bf2:	2200      	movs	r2, #0
 8024bf4:	609a      	str	r2, [r3, #8]
	    break;
 8024bf6:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 8024bf8:	2300      	movs	r3, #0
 8024bfa:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 8024bfc:	1dbb      	adds	r3, r7, #6
 8024bfe:	781b      	ldrb	r3, [r3, #0]
 8024c00:	3b10      	subs	r3, #16
 8024c02:	2b03      	cmp	r3, #3
 8024c04:	d900      	bls.n	8024c08 <gpio_configure_ext+0x264>
 8024c06:	e0a1      	b.n	8024d4c <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 8024c08:	2348      	movs	r3, #72	; 0x48
 8024c0a:	18fb      	adds	r3, r7, r3
 8024c0c:	781b      	ldrb	r3, [r3, #0]
 8024c0e:	2b06      	cmp	r3, #6
 8024c10:	d900      	bls.n	8024c14 <gpio_configure_ext+0x270>
 8024c12:	e092      	b.n	8024d3a <gpio_configure_ext+0x396>
 8024c14:	009a      	lsls	r2, r3, #2
 8024c16:	4b46      	ldr	r3, [pc, #280]	; (8024d30 <gpio_configure_ext+0x38c>)
 8024c18:	18d3      	adds	r3, r2, r3
 8024c1a:	681b      	ldr	r3, [r3, #0]
 8024c1c:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8024c1e:	1dfb      	adds	r3, r7, #7
 8024c20:	781b      	ldrb	r3, [r3, #0]
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d10a      	bne.n	8024c3c <gpio_configure_ext+0x298>
 8024c26:	1d3b      	adds	r3, r7, #4
 8024c28:	881a      	ldrh	r2, [r3, #0]
 8024c2a:	2380      	movs	r3, #128	; 0x80
 8024c2c:	021b      	lsls	r3, r3, #8
 8024c2e:	429a      	cmp	r2, r3
 8024c30:	d104      	bne.n	8024c3c <gpio_configure_ext+0x298>
 8024c32:	2320      	movs	r3, #32
 8024c34:	18fb      	adds	r3, r7, r3
 8024c36:	2202      	movs	r2, #2
 8024c38:	611a      	str	r2, [r3, #16]
 8024c3a:	e01c      	b.n	8024c76 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8024c3c:	1dfb      	adds	r3, r7, #7
 8024c3e:	781b      	ldrb	r3, [r3, #0]
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d108      	bne.n	8024c56 <gpio_configure_ext+0x2b2>
 8024c44:	1d3b      	adds	r3, r7, #4
 8024c46:	881b      	ldrh	r3, [r3, #0]
 8024c48:	2b20      	cmp	r3, #32
 8024c4a:	d104      	bne.n	8024c56 <gpio_configure_ext+0x2b2>
 8024c4c:	2320      	movs	r3, #32
 8024c4e:	18fb      	adds	r3, r7, r3
 8024c50:	2202      	movs	r2, #2
 8024c52:	611a      	str	r2, [r3, #16]
 8024c54:	e00f      	b.n	8024c76 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8024c56:	1dfb      	adds	r3, r7, #7
 8024c58:	781b      	ldrb	r3, [r3, #0]
 8024c5a:	2b00      	cmp	r3, #0
 8024c5c:	d108      	bne.n	8024c70 <gpio_configure_ext+0x2cc>
 8024c5e:	1d3b      	adds	r3, r7, #4
 8024c60:	881b      	ldrh	r3, [r3, #0]
 8024c62:	2b01      	cmp	r3, #1
 8024c64:	d104      	bne.n	8024c70 <gpio_configure_ext+0x2cc>
 8024c66:	2320      	movs	r3, #32
 8024c68:	18fb      	adds	r3, r7, r3
 8024c6a:	2205      	movs	r2, #5
 8024c6c:	611a      	str	r2, [r3, #16]
 8024c6e:	e002      	b.n	8024c76 <gpio_configure_ext+0x2d2>
			else err=1;
 8024c70:	2301      	movs	r3, #1
 8024c72:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 8024c74:	e062      	b.n	8024d3c <gpio_configure_ext+0x398>
 8024c76:	e061      	b.n	8024d3c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8024c78:	1dfb      	adds	r3, r7, #7
 8024c7a:	781b      	ldrb	r3, [r3, #0]
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	d10a      	bne.n	8024c96 <gpio_configure_ext+0x2f2>
 8024c80:	1d3b      	adds	r3, r7, #4
 8024c82:	881a      	ldrh	r2, [r3, #0]
 8024c84:	2380      	movs	r3, #128	; 0x80
 8024c86:	021b      	lsls	r3, r3, #8
 8024c88:	429a      	cmp	r2, r3
 8024c8a:	d104      	bne.n	8024c96 <gpio_configure_ext+0x2f2>
 8024c8c:	2320      	movs	r3, #32
 8024c8e:	18fb      	adds	r3, r7, r3
 8024c90:	2205      	movs	r2, #5
 8024c92:	611a      	str	r2, [r3, #16]
 8024c94:	e01c      	b.n	8024cd0 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8024c96:	1dfb      	adds	r3, r7, #7
 8024c98:	781b      	ldrb	r3, [r3, #0]
 8024c9a:	2b00      	cmp	r3, #0
 8024c9c:	d108      	bne.n	8024cb0 <gpio_configure_ext+0x30c>
 8024c9e:	1d3b      	adds	r3, r7, #4
 8024ca0:	881b      	ldrh	r3, [r3, #0]
 8024ca2:	2b20      	cmp	r3, #32
 8024ca4:	d104      	bne.n	8024cb0 <gpio_configure_ext+0x30c>
 8024ca6:	2320      	movs	r3, #32
 8024ca8:	18fb      	adds	r3, r7, r3
 8024caa:	2205      	movs	r2, #5
 8024cac:	611a      	str	r2, [r3, #16]
 8024cae:	e00f      	b.n	8024cd0 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8024cb0:	1dfb      	adds	r3, r7, #7
 8024cb2:	781b      	ldrb	r3, [r3, #0]
 8024cb4:	2b00      	cmp	r3, #0
 8024cb6:	d108      	bne.n	8024cca <gpio_configure_ext+0x326>
 8024cb8:	1d3b      	adds	r3, r7, #4
 8024cba:	881b      	ldrh	r3, [r3, #0]
 8024cbc:	2b01      	cmp	r3, #1
 8024cbe:	d104      	bne.n	8024cca <gpio_configure_ext+0x326>
 8024cc0:	2320      	movs	r3, #32
 8024cc2:	18fb      	adds	r3, r7, r3
 8024cc4:	2202      	movs	r2, #2
 8024cc6:	611a      	str	r2, [r3, #16]
 8024cc8:	e002      	b.n	8024cd0 <gpio_configure_ext+0x32c>
			else err=1;
 8024cca:	2301      	movs	r3, #1
 8024ccc:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 8024cce:	e035      	b.n	8024d3c <gpio_configure_ext+0x398>
 8024cd0:	e034      	b.n	8024d3c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8024cd2:	1dfb      	adds	r3, r7, #7
 8024cd4:	781b      	ldrb	r3, [r3, #0]
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	d108      	bne.n	8024cec <gpio_configure_ext+0x348>
 8024cda:	1d3b      	adds	r3, r7, #4
 8024cdc:	881b      	ldrh	r3, [r3, #0]
 8024cde:	2b20      	cmp	r3, #32
 8024ce0:	d104      	bne.n	8024cec <gpio_configure_ext+0x348>
 8024ce2:	2320      	movs	r3, #32
 8024ce4:	18fb      	adds	r3, r7, r3
 8024ce6:	2200      	movs	r2, #0
 8024ce8:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024cea:	e027      	b.n	8024d3c <gpio_configure_ext+0x398>
				else err=1;
 8024cec:	2301      	movs	r3, #1
 8024cee:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8024cf0:	e024      	b.n	8024d3c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8024cf2:	1dfb      	adds	r3, r7, #7
 8024cf4:	781b      	ldrb	r3, [r3, #0]
 8024cf6:	2b01      	cmp	r3, #1
 8024cf8:	d108      	bne.n	8024d0c <gpio_configure_ext+0x368>
 8024cfa:	1d3b      	adds	r3, r7, #4
 8024cfc:	881b      	ldrh	r3, [r3, #0]
 8024cfe:	2b20      	cmp	r3, #32
 8024d00:	d104      	bne.n	8024d0c <gpio_configure_ext+0x368>
 8024d02:	2320      	movs	r3, #32
 8024d04:	18fb      	adds	r3, r7, r3
 8024d06:	2200      	movs	r2, #0
 8024d08:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d0a:	e017      	b.n	8024d3c <gpio_configure_ext+0x398>
				else err=1;
 8024d0c:	2301      	movs	r3, #1
 8024d0e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8024d10:	e014      	b.n	8024d3c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 8024d12:	2301      	movs	r3, #1
 8024d14:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d16:	e011      	b.n	8024d3c <gpio_configure_ext+0x398>
 8024d18:	08029bfc 	.word	0x08029bfc
 8024d1c:	40021000 	.word	0x40021000
 8024d20:	08029c1c 	.word	0x08029c1c
 8024d24:	10110000 	.word	0x10110000
 8024d28:	10210000 	.word	0x10210000
 8024d2c:	10310000 	.word	0x10310000
 8024d30:	08029c6c 	.word	0x08029c6c
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 8024d34:	2301      	movs	r3, #1
 8024d36:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d38:	e000      	b.n	8024d3c <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 8024d3a:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 8024d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024d3e:	2b00      	cmp	r3, #0
 8024d40:	dd06      	ble.n	8024d50 <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 8024d42:	4b0c      	ldr	r3, [pc, #48]	; (8024d74 <gpio_configure_ext+0x3d0>)
 8024d44:	0018      	movs	r0, r3
 8024d46:	f7fe faf7 	bl	8023338 <log_error>
		}
		break;
 8024d4a:	e001      	b.n	8024d50 <gpio_configure_ext+0x3ac>
	default:
		break;
 8024d4c:	46c0      	nop			; (mov r8, r8)
 8024d4e:	e000      	b.n	8024d52 <gpio_configure_ext+0x3ae>
		break;
 8024d50:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 8024d52:	1dfb      	adds	r3, r7, #7
 8024d54:	781b      	ldrb	r3, [r3, #0]
 8024d56:	0018      	movs	r0, r3
 8024d58:	f7ff fd62 	bl	8024820 <getPortFromBankId>
 8024d5c:	0002      	movs	r2, r0
 8024d5e:	2320      	movs	r3, #32
 8024d60:	18fb      	adds	r3, r7, r3
 8024d62:	0019      	movs	r1, r3
 8024d64:	0010      	movs	r0, r2
 8024d66:	f7df fb65 	bl	8004434 <HAL_GPIO_Init>

}
 8024d6a:	46c0      	nop			; (mov r8, r8)
 8024d6c:	46bd      	mov	sp, r7
 8024d6e:	b00e      	add	sp, #56	; 0x38
 8024d70:	bdb0      	pop	{r4, r5, r7, pc}
 8024d72:	46c0      	nop			; (mov r8, r8)
 8024d74:	08028150 	.word	0x08028150

08024d78 <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 8024d78:	b580      	push	{r7, lr}
 8024d7a:	b082      	sub	sp, #8
 8024d7c:	af00      	add	r7, sp, #0
 8024d7e:	0002      	movs	r2, r0
 8024d80:	1dfb      	adds	r3, r7, #7
 8024d82:	701a      	strb	r2, [r3, #0]
 8024d84:	1d3b      	adds	r3, r7, #4
 8024d86:	1c0a      	adds	r2, r1, #0
 8024d88:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 8024d8a:	1dfb      	adds	r3, r7, #7
 8024d8c:	781b      	ldrb	r3, [r3, #0]
 8024d8e:	0018      	movs	r0, r3
 8024d90:	f7ff fd46 	bl	8024820 <getPortFromBankId>
 8024d94:	1d3b      	adds	r3, r7, #4
 8024d96:	881b      	ldrh	r3, [r3, #0]
 8024d98:	2201      	movs	r2, #1
 8024d9a:	0019      	movs	r1, r3
 8024d9c:	f7df fcc8 	bl	8004730 <HAL_GPIO_WritePin>
}
 8024da0:	46c0      	nop			; (mov r8, r8)
 8024da2:	46bd      	mov	sp, r7
 8024da4:	b002      	add	sp, #8
 8024da6:	bd80      	pop	{r7, pc}

08024da8 <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 8024da8:	b580      	push	{r7, lr}
 8024daa:	b082      	sub	sp, #8
 8024dac:	af00      	add	r7, sp, #0
 8024dae:	0002      	movs	r2, r0
 8024db0:	1dfb      	adds	r3, r7, #7
 8024db2:	701a      	strb	r2, [r3, #0]
 8024db4:	1d3b      	adds	r3, r7, #4
 8024db6:	1c0a      	adds	r2, r1, #0
 8024db8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 8024dba:	1dfb      	adds	r3, r7, #7
 8024dbc:	781b      	ldrb	r3, [r3, #0]
 8024dbe:	0018      	movs	r0, r3
 8024dc0:	f7ff fd2e 	bl	8024820 <getPortFromBankId>
 8024dc4:	1d3b      	adds	r3, r7, #4
 8024dc6:	881b      	ldrh	r3, [r3, #0]
 8024dc8:	2200      	movs	r2, #0
 8024dca:	0019      	movs	r1, r3
 8024dcc:	f7df fcb0 	bl	8004730 <HAL_GPIO_WritePin>
}
 8024dd0:	46c0      	nop			; (mov r8, r8)
 8024dd2:	46bd      	mov	sp, r7
 8024dd4:	b002      	add	sp, #8
 8024dd6:	bd80      	pop	{r7, pc}

08024dd8 <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 8024dd8:	b580      	push	{r7, lr}
 8024dda:	b082      	sub	sp, #8
 8024ddc:	af00      	add	r7, sp, #0
 8024dde:	0002      	movs	r2, r0
 8024de0:	1dfb      	adds	r3, r7, #7
 8024de2:	701a      	strb	r2, [r3, #0]
 8024de4:	1d3b      	adds	r3, r7, #4
 8024de6:	1c0a      	adds	r2, r1, #0
 8024de8:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 8024dea:	1d3b      	adds	r3, r7, #4
 8024dec:	881a      	ldrh	r2, [r3, #0]
 8024dee:	1dfb      	adds	r3, r7, #7
 8024df0:	781b      	ldrb	r3, [r3, #0]
 8024df2:	0011      	movs	r1, r2
 8024df4:	0018      	movs	r0, r3
 8024df6:	f7ff fd93 	bl	8024920 <getIrqFromBankPin>
 8024dfa:	0003      	movs	r3, r0
 8024dfc:	0018      	movs	r0, r3
 8024dfe:	f7df faa4 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8024e02:	46c0      	nop			; (mov r8, r8)
 8024e04:	46bd      	mov	sp, r7
 8024e06:	b002      	add	sp, #8
 8024e08:	bd80      	pop	{r7, pc}

08024e0a <gpio_interruptDisableAll>:

void gpio_interruptDisable(uint8_t bank, uint16_t id) {
	HAL_NVIC_DisableIRQ(getIrqFromBankPin(bank,id));
}

void gpio_interruptDisableAll() {
 8024e0a:	b580      	push	{r7, lr}
 8024e0c:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8024e0e:	2005      	movs	r0, #5
 8024e10:	f7df faab 	bl	800436a <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8024e14:	2007      	movs	r0, #7
 8024e16:	f7df faa8 	bl	800436a <HAL_NVIC_DisableIRQ>
}
 8024e1a:	46c0      	nop			; (mov r8, r8)
 8024e1c:	46bd      	mov	sp, r7
 8024e1e:	bd80      	pop	{r7, pc}

08024e20 <gpio_interruptPriority>:

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 8024e20:	b5b0      	push	{r4, r5, r7, lr}
 8024e22:	b082      	sub	sp, #8
 8024e24:	af00      	add	r7, sp, #0
 8024e26:	0005      	movs	r5, r0
 8024e28:	000c      	movs	r4, r1
 8024e2a:	0010      	movs	r0, r2
 8024e2c:	0019      	movs	r1, r3
 8024e2e:	1dfb      	adds	r3, r7, #7
 8024e30:	1c2a      	adds	r2, r5, #0
 8024e32:	701a      	strb	r2, [r3, #0]
 8024e34:	1d3b      	adds	r3, r7, #4
 8024e36:	1c22      	adds	r2, r4, #0
 8024e38:	801a      	strh	r2, [r3, #0]
 8024e3a:	1dbb      	adds	r3, r7, #6
 8024e3c:	1c02      	adds	r2, r0, #0
 8024e3e:	701a      	strb	r2, [r3, #0]
 8024e40:	1cfb      	adds	r3, r7, #3
 8024e42:	1c0a      	adds	r2, r1, #0
 8024e44:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 8024e46:	1d3b      	adds	r3, r7, #4
 8024e48:	881a      	ldrh	r2, [r3, #0]
 8024e4a:	1dfb      	adds	r3, r7, #7
 8024e4c:	781b      	ldrb	r3, [r3, #0]
 8024e4e:	0011      	movs	r1, r2
 8024e50:	0018      	movs	r0, r3
 8024e52:	f7ff fd65 	bl	8024920 <getIrqFromBankPin>
 8024e56:	0003      	movs	r3, r0
 8024e58:	0018      	movs	r0, r3
 8024e5a:	1dbb      	adds	r3, r7, #6
 8024e5c:	7819      	ldrb	r1, [r3, #0]
 8024e5e:	1cfb      	adds	r3, r7, #3
 8024e60:	781b      	ldrb	r3, [r3, #0]
 8024e62:	001a      	movs	r2, r3
 8024e64:	f7df fa5c 	bl	8004320 <HAL_NVIC_SetPriority>
}
 8024e68:	46c0      	nop			; (mov r8, r8)
 8024e6a:	46bd      	mov	sp, r7
 8024e6c:	b002      	add	sp, #8
 8024e6e:	bdb0      	pop	{r4, r5, r7, pc}

08024e70 <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 8024e70:	b580      	push	{r7, lr}
 8024e72:	b082      	sub	sp, #8
 8024e74:	af00      	add	r7, sp, #0
 8024e76:	0002      	movs	r2, r0
 8024e78:	1dfb      	adds	r3, r7, #7
 8024e7a:	701a      	strb	r2, [r3, #0]
 8024e7c:	1d3b      	adds	r3, r7, #4
 8024e7e:	1c0a      	adds	r2, r1, #0
 8024e80:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 8024e82:	4b04      	ldr	r3, [pc, #16]	; (8024e94 <gpio_interruptClear+0x24>)
 8024e84:	1d3a      	adds	r2, r7, #4
 8024e86:	8812      	ldrh	r2, [r2, #0]
 8024e88:	615a      	str	r2, [r3, #20]
}
 8024e8a:	46c0      	nop			; (mov r8, r8)
 8024e8c:	46bd      	mov	sp, r7
 8024e8e:	b002      	add	sp, #8
 8024e90:	bd80      	pop	{r7, pc}
 8024e92:	46c0      	nop			; (mov r8, r8)
 8024e94:	40010400 	.word	0x40010400

08024e98 <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 8024e98:	b580      	push	{r7, lr}
 8024e9a:	b086      	sub	sp, #24
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	0002      	movs	r2, r0
 8024ea0:	1dbb      	adds	r3, r7, #6
 8024ea2:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 8024ea4:	4b1b      	ldr	r3, [pc, #108]	; (8024f14 <HAL_GPIO_EXTI_Callback+0x7c>)
 8024ea6:	681b      	ldr	r3, [r3, #0]
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d00c      	beq.n	8024ec6 <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 8024eac:	4b19      	ldr	r3, [pc, #100]	; (8024f14 <HAL_GPIO_EXTI_Callback+0x7c>)
 8024eae:	681b      	ldr	r3, [r3, #0]
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 8024eb4:	693b      	ldr	r3, [r7, #16]
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d005      	beq.n	8024ec6 <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 8024eba:	1dbb      	adds	r3, r7, #6
 8024ebc:	881a      	ldrh	r2, [r3, #0]
 8024ebe:	693b      	ldr	r3, [r7, #16]
 8024ec0:	0010      	movs	r0, r2
 8024ec2:	4798      	blx	r3
			return;
 8024ec4:	e023      	b.n	8024f0e <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8024ec6:	4b14      	ldr	r3, [pc, #80]	; (8024f18 <HAL_GPIO_EXTI_Callback+0x80>)
 8024ec8:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 8024eca:	e019      	b.n	8024f00 <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 8024ecc:	697b      	ldr	r3, [r7, #20]
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 8024ed2:	68fb      	ldr	r3, [r7, #12]
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	d010      	beq.n	8024efa <HAL_GPIO_EXTI_Callback+0x62>
 8024ed8:	697b      	ldr	r3, [r7, #20]
 8024eda:	889b      	ldrh	r3, [r3, #4]
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	d007      	beq.n	8024ef0 <HAL_GPIO_EXTI_Callback+0x58>
 8024ee0:	697b      	ldr	r3, [r7, #20]
 8024ee2:	889b      	ldrh	r3, [r3, #4]
 8024ee4:	1dba      	adds	r2, r7, #6
 8024ee6:	8812      	ldrh	r2, [r2, #0]
 8024ee8:	4013      	ands	r3, r2
 8024eea:	b29b      	uxth	r3, r3
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d004      	beq.n	8024efa <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 8024ef0:	1dbb      	adds	r3, r7, #6
 8024ef2:	881a      	ldrh	r2, [r3, #0]
 8024ef4:	68fb      	ldr	r3, [r7, #12]
 8024ef6:	0010      	movs	r0, r2
 8024ef8:	4798      	blx	r3
		}
		c = c->next;
 8024efa:	697b      	ldr	r3, [r7, #20]
 8024efc:	689b      	ldr	r3, [r3, #8]
 8024efe:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 8024f00:	697b      	ldr	r3, [r7, #20]
 8024f02:	2b00      	cmp	r3, #0
 8024f04:	d1e2      	bne.n	8024ecc <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024f06:	4b05      	ldr	r3, [pc, #20]	; (8024f1c <HAL_GPIO_EXTI_Callback+0x84>)
 8024f08:	1dba      	adds	r2, r7, #6
 8024f0a:	8812      	ldrh	r2, [r2, #0]
 8024f0c:	615a      	str	r2, [r3, #20]
	#endif
}
 8024f0e:	46bd      	mov	sp, r7
 8024f10:	b006      	add	sp, #24
 8024f12:	bd80      	pop	{r7, pc}
 8024f14:	20001f8c 	.word	0x20001f8c
 8024f18:	20001f80 	.word	0x20001f80
 8024f1c:	40010400 	.word	0x40010400

08024f20 <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 8024f20:	b580      	push	{r7, lr}
 8024f22:	b084      	sub	sp, #16
 8024f24:	af00      	add	r7, sp, #0
 8024f26:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8024f28:	4b0f      	ldr	r3, [pc, #60]	; (8024f68 <gpio_registerIrqAction+0x48>)
 8024f2a:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 8024f2c:	e002      	b.n	8024f34 <gpio_registerIrqAction+0x14>
	  c = c->next;
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	689b      	ldr	r3, [r3, #8]
 8024f32:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 8024f34:	68fb      	ldr	r3, [r7, #12]
 8024f36:	689b      	ldr	r3, [r3, #8]
 8024f38:	2b00      	cmp	r3, #0
 8024f3a:	d005      	beq.n	8024f48 <gpio_registerIrqAction+0x28>
 8024f3c:	68fb      	ldr	r3, [r7, #12]
 8024f3e:	681a      	ldr	r2, [r3, #0]
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	681b      	ldr	r3, [r3, #0]
 8024f44:	429a      	cmp	r2, r3
 8024f46:	d1f2      	bne.n	8024f2e <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 8024f48:	68fb      	ldr	r3, [r7, #12]
 8024f4a:	681a      	ldr	r2, [r3, #0]
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	429a      	cmp	r2, r3
 8024f52:	d005      	beq.n	8024f60 <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 8024f54:	68fb      	ldr	r3, [r7, #12]
 8024f56:	687a      	ldr	r2, [r7, #4]
 8024f58:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	2200      	movs	r2, #0
 8024f5e:	609a      	str	r2, [r3, #8]
	}
}
 8024f60:	46c0      	nop			; (mov r8, r8)
 8024f62:	46bd      	mov	sp, r7
 8024f64:	b004      	add	sp, #16
 8024f66:	bd80      	pop	{r7, pc}
 8024f68:	20001f80 	.word	0x20001f80

08024f6c <NVIC_SystemReset>:
{
 8024f6c:	b580      	push	{r7, lr}
 8024f6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8024f70:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8024f74:	4b03      	ldr	r3, [pc, #12]	; (8024f84 <NVIC_SystemReset+0x18>)
 8024f76:	4a04      	ldr	r2, [pc, #16]	; (8024f88 <NVIC_SystemReset+0x1c>)
 8024f78:	60da      	str	r2, [r3, #12]
 8024f7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8024f7e:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8024f80:	e7fd      	b.n	8024f7e <NVIC_SystemReset+0x12>
 8024f82:	46c0      	nop			; (mov r8, r8)
 8024f84:	e000ed00 	.word	0xe000ed00
 8024f88:	05fa0004 	.word	0x05fa0004

08024f8c <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 8024f8c:	b580      	push	{r7, lr}
 8024f8e:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 8024f90:	f7ff ffec 	bl	8024f6c <NVIC_SystemReset>
 8024f94:	e7fc      	b.n	8024f90 <itsdk_reset+0x4>
	...

08024f98 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 8024f98:	b580      	push	{r7, lr}
 8024f9a:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 8024f9c:	4b1c      	ldr	r3, [pc, #112]	; (8025010 <itsdk_getResetCause+0x78>)
 8024f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	da01      	bge.n	8024fa8 <itsdk_getResetCause+0x10>
 8024fa4:	2306      	movs	r3, #6
 8024fa6:	e030      	b.n	802500a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 8024fa8:	4b19      	ldr	r3, [pc, #100]	; (8025010 <itsdk_getResetCause+0x78>)
 8024faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fac:	2380      	movs	r3, #128	; 0x80
 8024fae:	05db      	lsls	r3, r3, #23
 8024fb0:	4013      	ands	r3, r2
 8024fb2:	d001      	beq.n	8024fb8 <itsdk_getResetCause+0x20>
 8024fb4:	2305      	movs	r3, #5
 8024fb6:	e028      	b.n	802500a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 8024fb8:	4b15      	ldr	r3, [pc, #84]	; (8025010 <itsdk_getResetCause+0x78>)
 8024fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fbc:	2380      	movs	r3, #128	; 0x80
 8024fbe:	059b      	lsls	r3, r3, #22
 8024fc0:	4013      	ands	r3, r2
 8024fc2:	d001      	beq.n	8024fc8 <itsdk_getResetCause+0x30>
 8024fc4:	2304      	movs	r3, #4
 8024fc6:	e020      	b.n	802500a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 8024fc8:	4b11      	ldr	r3, [pc, #68]	; (8025010 <itsdk_getResetCause+0x78>)
 8024fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fcc:	2380      	movs	r3, #128	; 0x80
 8024fce:	055b      	lsls	r3, r3, #21
 8024fd0:	4013      	ands	r3, r2
 8024fd2:	d001      	beq.n	8024fd8 <itsdk_getResetCause+0x40>
 8024fd4:	2303      	movs	r3, #3
 8024fd6:	e018      	b.n	802500a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 8024fd8:	4b0d      	ldr	r3, [pc, #52]	; (8025010 <itsdk_getResetCause+0x78>)
 8024fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fdc:	2380      	movs	r3, #128	; 0x80
 8024fde:	051b      	lsls	r3, r3, #20
 8024fe0:	4013      	ands	r3, r2
 8024fe2:	d001      	beq.n	8024fe8 <itsdk_getResetCause+0x50>
 8024fe4:	2302      	movs	r3, #2
 8024fe6:	e010      	b.n	802500a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 8024fe8:	4b09      	ldr	r3, [pc, #36]	; (8025010 <itsdk_getResetCause+0x78>)
 8024fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fec:	2380      	movs	r3, #128	; 0x80
 8024fee:	04db      	lsls	r3, r3, #19
 8024ff0:	4013      	ands	r3, r2
 8024ff2:	d001      	beq.n	8024ff8 <itsdk_getResetCause+0x60>
 8024ff4:	2301      	movs	r3, #1
 8024ff6:	e008      	b.n	802500a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 8024ff8:	4b05      	ldr	r3, [pc, #20]	; (8025010 <itsdk_getResetCause+0x78>)
 8024ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024ffc:	2380      	movs	r3, #128	; 0x80
 8024ffe:	049b      	lsls	r3, r3, #18
 8025000:	4013      	ands	r3, r2
 8025002:	d001      	beq.n	8025008 <itsdk_getResetCause+0x70>
 8025004:	2306      	movs	r3, #6
 8025006:	e000      	b.n	802500a <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 8025008:	2307      	movs	r3, #7
}
 802500a:	0018      	movs	r0, r3
 802500c:	46bd      	mov	sp, r7
 802500e:	bd80      	pop	{r7, pc}
 8025010:	40021000 	.word	0x40021000

08025014 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 8025014:	b580      	push	{r7, lr}
 8025016:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 8025018:	4b04      	ldr	r3, [pc, #16]	; (802502c <itsdk_cleanResetCause+0x18>)
 802501a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802501c:	4b03      	ldr	r3, [pc, #12]	; (802502c <itsdk_cleanResetCause+0x18>)
 802501e:	2180      	movs	r1, #128	; 0x80
 8025020:	0409      	lsls	r1, r1, #16
 8025022:	430a      	orrs	r2, r1
 8025024:	651a      	str	r2, [r3, #80]	; 0x50
}
 8025026:	46c0      	nop			; (mov r8, r8)
 8025028:	46bd      	mov	sp, r7
 802502a:	bd80      	pop	{r7, pc}
 802502c:	40021000 	.word	0x40021000

08025030 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 8025030:	b580      	push	{r7, lr}
 8025032:	b082      	sub	sp, #8
 8025034:	af00      	add	r7, sp, #0
 8025036:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	0018      	movs	r0, r3
 802503c:	f7de fe24 	bl	8003c88 <HAL_Delay>
}
 8025040:	46c0      	nop			; (mov r8, r8)
 8025042:	46bd      	mov	sp, r7
 8025044:	b002      	add	sp, #8
 8025046:	bd80      	pop	{r7, pc}

08025048 <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 8025048:	b580      	push	{r7, lr}
 802504a:	b082      	sub	sp, #8
 802504c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 802504e:	f3ef 8310 	mrs	r3, PRIMASK
 8025052:	607b      	str	r3, [r7, #4]
  return(result);
 8025054:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 8025056:	46c0      	nop			; (mov r8, r8)
}
 8025058:	0018      	movs	r0, r3
 802505a:	46bd      	mov	sp, r7
 802505c:	b002      	add	sp, #8
 802505e:	bd80      	pop	{r7, pc}

08025060 <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 8025060:	b580      	push	{r7, lr}
 8025062:	b084      	sub	sp, #16
 8025064:	af00      	add	r7, sp, #0
 8025066:	6078      	str	r0, [r7, #4]
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802506c:	68fb      	ldr	r3, [r7, #12]
 802506e:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 8025072:	46c0      	nop			; (mov r8, r8)
 8025074:	46bd      	mov	sp, r7
 8025076:	b004      	add	sp, #16
 8025078:	bd80      	pop	{r7, pc}
	...

0802507c <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 802507c:	b580      	push	{r7, lr}
 802507e:	b082      	sub	sp, #8
 8025080:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 8025082:	f7ff ffe1 	bl	8025048 <itsdk_getIrqMask>
 8025086:	0002      	movs	r2, r0
 8025088:	4b05      	ldr	r3, [pc, #20]	; (80250a0 <itsdk_enterCriticalSection+0x24>)
 802508a:	601a      	str	r2, [r3, #0]
 802508c:	2301      	movs	r3, #1
 802508e:	607b      	str	r3, [r7, #4]
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 8025096:	46c0      	nop			; (mov r8, r8)
 8025098:	46bd      	mov	sp, r7
 802509a:	b002      	add	sp, #8
 802509c:	bd80      	pop	{r7, pc}
 802509e:	46c0      	nop			; (mov r8, r8)
 80250a0:	20001f90 	.word	0x20001f90

080250a4 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 80250a4:	b580      	push	{r7, lr}
 80250a6:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 80250a8:	4b03      	ldr	r3, [pc, #12]	; (80250b8 <itsdk_leaveCriticalSection+0x14>)
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	0018      	movs	r0, r3
 80250ae:	f7ff ffd7 	bl	8025060 <itsdk_setIrqMask>
}
 80250b2:	46c0      	nop			; (mov r8, r8)
 80250b4:	46bd      	mov	sp, r7
 80250b6:	bd80      	pop	{r7, pc}
 80250b8:	20001f90 	.word	0x20001f90

080250bc <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 80250bc:	b580      	push	{r7, lr}
 80250be:	b086      	sub	sp, #24
 80250c0:	af00      	add	r7, sp, #0
 80250c2:	6078      	str	r0, [r7, #4]
 80250c4:	000a      	movs	r2, r1
 80250c6:	1cfb      	adds	r3, r7, #3
 80250c8:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 80250ca:	4b2c      	ldr	r3, [pc, #176]	; (802517c <itsdk_getUniqId+0xc0>)
 80250cc:	681b      	ldr	r3, [r3, #0]
 80250ce:	041a      	lsls	r2, r3, #16
 80250d0:	4b2b      	ldr	r3, [pc, #172]	; (8025180 <itsdk_getUniqId+0xc4>)
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	021b      	lsls	r3, r3, #8
 80250d6:	18d2      	adds	r2, r2, r3
 80250d8:	4b2a      	ldr	r3, [pc, #168]	; (8025184 <itsdk_getUniqId+0xc8>)
 80250da:	681b      	ldr	r3, [r3, #0]
 80250dc:	18d3      	adds	r3, r2, r3
 80250de:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 80250e0:	2317      	movs	r3, #23
 80250e2:	18fb      	adds	r3, r7, r3
 80250e4:	2200      	movs	r2, #0
 80250e6:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 80250e8:	68fb      	ldr	r3, [r7, #12]
 80250ea:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 80250ec:	e03a      	b.n	8025164 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 80250ee:	2317      	movs	r3, #23
 80250f0:	18fb      	adds	r3, r7, r3
 80250f2:	781b      	ldrb	r3, [r3, #0]
 80250f4:	2203      	movs	r2, #3
 80250f6:	4013      	ands	r3, r2
 80250f8:	d11f      	bne.n	802513a <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 80250fa:	2317      	movs	r3, #23
 80250fc:	18fb      	adds	r3, r7, r3
 80250fe:	781b      	ldrb	r3, [r3, #0]
 8025100:	089b      	lsrs	r3, r3, #2
 8025102:	b2db      	uxtb	r3, r3
 8025104:	001a      	movs	r2, r3
 8025106:	2303      	movs	r3, #3
 8025108:	4013      	ands	r3, r2
 802510a:	2b01      	cmp	r3, #1
 802510c:	d008      	beq.n	8025120 <itsdk_getUniqId+0x64>
 802510e:	2b02      	cmp	r3, #2
 8025110:	d00b      	beq.n	802512a <itsdk_getUniqId+0x6e>
 8025112:	2b00      	cmp	r3, #0
 8025114:	d10e      	bne.n	8025134 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 8025116:	68fb      	ldr	r3, [r7, #12]
 8025118:	4a18      	ldr	r2, [pc, #96]	; (802517c <itsdk_getUniqId+0xc0>)
 802511a:	4053      	eors	r3, r2
 802511c:	613b      	str	r3, [r7, #16]
 802511e:	e00d      	b.n	802513c <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 8025120:	68fb      	ldr	r3, [r7, #12]
 8025122:	4a17      	ldr	r2, [pc, #92]	; (8025180 <itsdk_getUniqId+0xc4>)
 8025124:	4053      	eors	r3, r2
 8025126:	613b      	str	r3, [r7, #16]
 8025128:	e008      	b.n	802513c <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 802512a:	68fb      	ldr	r3, [r7, #12]
 802512c:	4a15      	ldr	r2, [pc, #84]	; (8025184 <itsdk_getUniqId+0xc8>)
 802512e:	4053      	eors	r3, r2
 8025130:	613b      	str	r3, [r7, #16]
 8025132:	e003      	b.n	802513c <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 8025134:	68fb      	ldr	r3, [r7, #12]
 8025136:	613b      	str	r3, [r7, #16]
 8025138:	e000      	b.n	802513c <itsdk_getUniqId+0x80>
			}
		}
 802513a:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 802513c:	2017      	movs	r0, #23
 802513e:	183b      	adds	r3, r7, r0
 8025140:	781b      	ldrb	r3, [r3, #0]
 8025142:	2203      	movs	r2, #3
 8025144:	4013      	ands	r3, r2
 8025146:	00db      	lsls	r3, r3, #3
 8025148:	693a      	ldr	r2, [r7, #16]
 802514a:	40da      	lsrs	r2, r3
 802514c:	0011      	movs	r1, r2
 802514e:	183b      	adds	r3, r7, r0
 8025150:	781b      	ldrb	r3, [r3, #0]
 8025152:	687a      	ldr	r2, [r7, #4]
 8025154:	18d3      	adds	r3, r2, r3
 8025156:	b2ca      	uxtb	r2, r1
 8025158:	701a      	strb	r2, [r3, #0]
		l++;
 802515a:	183b      	adds	r3, r7, r0
 802515c:	781a      	ldrb	r2, [r3, #0]
 802515e:	183b      	adds	r3, r7, r0
 8025160:	3201      	adds	r2, #1
 8025162:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 8025164:	2317      	movs	r3, #23
 8025166:	18fb      	adds	r3, r7, r3
 8025168:	781a      	ldrb	r2, [r3, #0]
 802516a:	1cfb      	adds	r3, r7, #3
 802516c:	781b      	ldrb	r3, [r3, #0]
 802516e:	b25b      	sxtb	r3, r3
 8025170:	429a      	cmp	r2, r3
 8025172:	dbbc      	blt.n	80250ee <itsdk_getUniqId+0x32>
	}

}
 8025174:	46c0      	nop			; (mov r8, r8)
 8025176:	46bd      	mov	sp, r7
 8025178:	b006      	add	sp, #24
 802517a:	bd80      	pop	{r7, pc}
 802517c:	1ff80050 	.word	0x1ff80050
 8025180:	1ff80054 	.word	0x1ff80054
 8025184:	1ff80064 	.word	0x1ff80064

08025188 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 8025188:	b580      	push	{r7, lr}
 802518a:	b082      	sub	sp, #8
 802518c:	af00      	add	r7, sp, #0
 802518e:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	0018      	movs	r0, r3
 8025194:	f7da ffb8 	bl	8000108 <strlen>
 8025198:	0003      	movs	r3, r0
 802519a:	b29a      	uxth	r2, r3
 802519c:	4b04      	ldr	r3, [pc, #16]	; (80251b0 <serial1_print+0x28>)
 802519e:	6879      	ldr	r1, [r7, #4]
 80251a0:	4804      	ldr	r0, [pc, #16]	; (80251b4 <serial1_print+0x2c>)
 80251a2:	f7e1 fbdf 	bl	8006964 <HAL_UART_Transmit>
  #endif
}
 80251a6:	46c0      	nop			; (mov r8, r8)
 80251a8:	46bd      	mov	sp, r7
 80251aa:	b002      	add	sp, #8
 80251ac:	bd80      	pop	{r7, pc}
 80251ae:	46c0      	nop			; (mov r8, r8)
 80251b0:	0000ffff 	.word	0x0000ffff
 80251b4:	20002024 	.word	0x20002024

080251b8 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 80251b8:	b580      	push	{r7, lr}
 80251ba:	b082      	sub	sp, #8
 80251bc:	af00      	add	r7, sp, #0
 80251be:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	0018      	movs	r0, r3
 80251c4:	f7da ffa0 	bl	8000108 <strlen>
 80251c8:	0003      	movs	r3, r0
 80251ca:	b29a      	uxth	r2, r3
 80251cc:	4b04      	ldr	r3, [pc, #16]	; (80251e0 <serial2_print+0x28>)
 80251ce:	6879      	ldr	r1, [r7, #4]
 80251d0:	4804      	ldr	r0, [pc, #16]	; (80251e4 <serial2_print+0x2c>)
 80251d2:	f7e1 fbc7 	bl	8006964 <HAL_UART_Transmit>
  #endif
}
 80251d6:	46c0      	nop			; (mov r8, r8)
 80251d8:	46bd      	mov	sp, r7
 80251da:	b002      	add	sp, #8
 80251dc:	bd80      	pop	{r7, pc}
 80251de:	46c0      	nop			; (mov r8, r8)
 80251e0:	0000ffff 	.word	0x0000ffff
 80251e4:	200021b4 	.word	0x200021b4

080251e8 <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 80251e8:	b580      	push	{r7, lr}
 80251ea:	b082      	sub	sp, #8
 80251ec:	af00      	add	r7, sp, #0
 80251ee:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 80251f0:	4b17      	ldr	r3, [pc, #92]	; (8025250 <serial2_read+0x68>)
 80251f2:	781b      	ldrb	r3, [r3, #0]
 80251f4:	b2da      	uxtb	r2, r3
 80251f6:	4b17      	ldr	r3, [pc, #92]	; (8025254 <serial2_read+0x6c>)
 80251f8:	781b      	ldrb	r3, [r3, #0]
 80251fa:	b2db      	uxtb	r3, r3
 80251fc:	429a      	cmp	r2, r3
 80251fe:	d021      	beq.n	8025244 <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 8025200:	4b13      	ldr	r3, [pc, #76]	; (8025250 <serial2_read+0x68>)
 8025202:	781b      	ldrb	r3, [r3, #0]
 8025204:	b2db      	uxtb	r3, r3
 8025206:	001a      	movs	r2, r3
 8025208:	4b13      	ldr	r3, [pc, #76]	; (8025258 <serial2_read+0x70>)
 802520a:	5c9a      	ldrb	r2, [r3, r2]
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 8025210:	f7ff ff34 	bl	802507c <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 8025214:	4b0e      	ldr	r3, [pc, #56]	; (8025250 <serial2_read+0x68>)
 8025216:	781b      	ldrb	r3, [r3, #0]
 8025218:	b2db      	uxtb	r3, r3
 802521a:	3301      	adds	r3, #1
 802521c:	b2db      	uxtb	r3, r3
 802521e:	223f      	movs	r2, #63	; 0x3f
 8025220:	4013      	ands	r3, r2
 8025222:	b2da      	uxtb	r2, r3
 8025224:	4b0a      	ldr	r3, [pc, #40]	; (8025250 <serial2_read+0x68>)
 8025226:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 8025228:	f7ff ff3c 	bl	80250a4 <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 802522c:	4b08      	ldr	r3, [pc, #32]	; (8025250 <serial2_read+0x68>)
 802522e:	781b      	ldrb	r3, [r3, #0]
 8025230:	b2da      	uxtb	r2, r3
 8025232:	4b08      	ldr	r3, [pc, #32]	; (8025254 <serial2_read+0x6c>)
 8025234:	781b      	ldrb	r3, [r3, #0]
 8025236:	b2db      	uxtb	r3, r3
 8025238:	429a      	cmp	r2, r3
 802523a:	d001      	beq.n	8025240 <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 802523c:	2301      	movs	r3, #1
 802523e:	e002      	b.n	8025246 <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 8025240:	2300      	movs	r3, #0
 8025242:	e000      	b.n	8025246 <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 8025244:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 8025246:	0018      	movs	r0, r3
 8025248:	46bd      	mov	sp, r7
 802524a:	b002      	add	sp, #8
 802524c:	bd80      	pop	{r7, pc}
 802524e:	46c0      	nop			; (mov r8, r8)
 8025250:	200023ee 	.word	0x200023ee
 8025254:	200023a5 	.word	0x200023a5
 8025258:	200023a8 	.word	0x200023a8

0802525c <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 802525c:	b580      	push	{r7, lr}
 802525e:	b082      	sub	sp, #8
 8025260:	af00      	add	r7, sp, #0
 8025262:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	2208      	movs	r2, #8
 802526a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	2204      	movs	r2, #4
 8025272:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	681b      	ldr	r3, [r3, #0]
 8025278:	2202      	movs	r2, #2
 802527a:	621a      	str	r2, [r3, #32]
}
 802527c:	46c0      	nop			; (mov r8, r8)
 802527e:	46bd      	mov	sp, r7
 8025280:	b002      	add	sp, #8
 8025282:	bd80      	pop	{r7, pc}

08025284 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8025284:	b580      	push	{r7, lr}
 8025286:	b082      	sub	sp, #8
 8025288:	af00      	add	r7, sp, #0
 802528a:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	4a1c      	ldr	r2, [pc, #112]	; (8025304 <HAL_UART_RxCpltCallback+0x80>)
 8025292:	4293      	cmp	r3, r2
 8025294:	d132      	bne.n	80252fc <HAL_UART_RxCpltCallback+0x78>
	  {
		  //log_info("toto uart wrapper.c l 413");
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 8025296:	4b1c      	ldr	r3, [pc, #112]	; (8025308 <HAL_UART_RxCpltCallback+0x84>)
 8025298:	781b      	ldrb	r3, [r3, #0]
 802529a:	2b52      	cmp	r3, #82	; 0x52
 802529c:	d102      	bne.n	80252a4 <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 802529e:	4b1b      	ldr	r3, [pc, #108]	; (802530c <HAL_UART_RxCpltCallback+0x88>)
 80252a0:	2200      	movs	r2, #0
 80252a2:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 80252a4:	4b19      	ldr	r3, [pc, #100]	; (802530c <HAL_UART_RxCpltCallback+0x88>)
 80252a6:	681b      	ldr	r3, [r3, #0]
 80252a8:	4a17      	ldr	r2, [pc, #92]	; (8025308 <HAL_UART_RxCpltCallback+0x84>)
 80252aa:	7811      	ldrb	r1, [r2, #0]
 80252ac:	4a18      	ldr	r2, [pc, #96]	; (8025310 <HAL_UART_RxCpltCallback+0x8c>)
 80252ae:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 80252b0:	4b16      	ldr	r3, [pc, #88]	; (802530c <HAL_UART_RxCpltCallback+0x88>)
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	1c5a      	adds	r2, r3, #1
 80252b6:	4b15      	ldr	r3, [pc, #84]	; (802530c <HAL_UART_RxCpltCallback+0x88>)
 80252b8:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 80252ba:	4b14      	ldr	r3, [pc, #80]	; (802530c <HAL_UART_RxCpltCallback+0x88>)
 80252bc:	681b      	ldr	r3, [r3, #0]
 80252be:	2b05      	cmp	r3, #5
 80252c0:	d006      	beq.n	80252d0 <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 80252c2:	4911      	ldr	r1, [pc, #68]	; (8025308 <HAL_UART_RxCpltCallback+0x84>)
 80252c4:	4b13      	ldr	r3, [pc, #76]	; (8025314 <HAL_UART_RxCpltCallback+0x90>)
 80252c6:	2201      	movs	r2, #1
 80252c8:	0018      	movs	r0, r3
 80252ca:	f7e1 fbf3 	bl	8006ab4 <HAL_UART_Receive_IT>
			  indexOfReceive = 0;
		  }

	  }

}
 80252ce:	e015      	b.n	80252fc <HAL_UART_RxCpltCallback+0x78>
			  tabToPrint[0] = 0x30; //Force to 0
 80252d0:	4b11      	ldr	r3, [pc, #68]	; (8025318 <HAL_UART_RxCpltCallback+0x94>)
 80252d2:	2230      	movs	r2, #48	; 0x30
 80252d4:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 80252d6:	4b0e      	ldr	r3, [pc, #56]	; (8025310 <HAL_UART_RxCpltCallback+0x8c>)
 80252d8:	785a      	ldrb	r2, [r3, #1]
 80252da:	4b0f      	ldr	r3, [pc, #60]	; (8025318 <HAL_UART_RxCpltCallback+0x94>)
 80252dc:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 80252de:	4b0c      	ldr	r3, [pc, #48]	; (8025310 <HAL_UART_RxCpltCallback+0x8c>)
 80252e0:	789a      	ldrb	r2, [r3, #2]
 80252e2:	4b0d      	ldr	r3, [pc, #52]	; (8025318 <HAL_UART_RxCpltCallback+0x94>)
 80252e4:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 80252e6:	4b0a      	ldr	r3, [pc, #40]	; (8025310 <HAL_UART_RxCpltCallback+0x8c>)
 80252e8:	78da      	ldrb	r2, [r3, #3]
 80252ea:	4b0b      	ldr	r3, [pc, #44]	; (8025318 <HAL_UART_RxCpltCallback+0x94>)
 80252ec:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 80252ee:	4b08      	ldr	r3, [pc, #32]	; (8025310 <HAL_UART_RxCpltCallback+0x8c>)
 80252f0:	791a      	ldrb	r2, [r3, #4]
 80252f2:	4b09      	ldr	r3, [pc, #36]	; (8025318 <HAL_UART_RxCpltCallback+0x94>)
 80252f4:	711a      	strb	r2, [r3, #4]
			  indexOfReceive = 0;
 80252f6:	4b05      	ldr	r3, [pc, #20]	; (802530c <HAL_UART_RxCpltCallback+0x88>)
 80252f8:	2200      	movs	r2, #0
 80252fa:	601a      	str	r2, [r3, #0]
}
 80252fc:	46c0      	nop			; (mov r8, r8)
 80252fe:	46bd      	mov	sp, r7
 8025300:	b002      	add	sp, #8
 8025302:	bd80      	pop	{r7, pc}
 8025304:	40013800 	.word	0x40013800
 8025308:	200023ed 	.word	0x200023ed
 802530c:	20001f94 	.word	0x20001f94
 8025310:	200023a0 	.word	0x200023a0
 8025314:	20002024 	.word	0x20002024
 8025318:	200023e8 	.word	0x200023e8

0802531c <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 802531c:	b580      	push	{r7, lr}
 802531e:	b082      	sub	sp, #8
 8025320:	af00      	add	r7, sp, #0
 8025322:	0002      	movs	r2, r0
 8025324:	6039      	str	r1, [r7, #0]
 8025326:	1dfb      	adds	r3, r7, #7
 8025328:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 802532a:	46c0      	nop			; (mov r8, r8)
 802532c:	46bd      	mov	sp, r7
 802532e:	b002      	add	sp, #8
 8025330:	bd80      	pop	{r7, pc}
	...

08025334 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 8025334:	b580      	push	{r7, lr}
 8025336:	b088      	sub	sp, #32
 8025338:	af00      	add	r7, sp, #0
 802533a:	60b9      	str	r1, [r7, #8]
 802533c:	607a      	str	r2, [r7, #4]
 802533e:	603b      	str	r3, [r7, #0]
 8025340:	210f      	movs	r1, #15
 8025342:	187b      	adds	r3, r7, r1
 8025344:	1c02      	adds	r2, r0, #0
 8025346:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 8025348:	687b      	ldr	r3, [r7, #4]
 802534a:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 802534c:	187b      	adds	r3, r7, r1
 802534e:	781b      	ldrb	r3, [r3, #0]
 8025350:	2b00      	cmp	r3, #0
 8025352:	d106      	bne.n	8025362 <_eeprom_write+0x2e>
 8025354:	683a      	ldr	r2, [r7, #0]
 8025356:	68bb      	ldr	r3, [r7, #8]
 8025358:	18d2      	adds	r2, r2, r3
 802535a:	23c0      	movs	r3, #192	; 0xc0
 802535c:	015b      	lsls	r3, r3, #5
 802535e:	429a      	cmp	r2, r3
 8025360:	d906      	bls.n	8025370 <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 8025362:	683b      	ldr	r3, [r7, #0]
 8025364:	b29b      	uxth	r3, r3
 8025366:	4a3f      	ldr	r2, [pc, #252]	; (8025464 <_eeprom_write+0x130>)
 8025368:	0019      	movs	r1, r3
 802536a:	0010      	movs	r0, r2
 802536c:	f7fd fd58 	bl	8022e20 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 8025370:	68bb      	ldr	r3, [r7, #8]
 8025372:	4a3d      	ldr	r2, [pc, #244]	; (8025468 <_eeprom_write+0x134>)
 8025374:	4694      	mov	ip, r2
 8025376:	4463      	add	r3, ip
 8025378:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 802537a:	69fb      	ldr	r3, [r7, #28]
 802537c:	2203      	movs	r2, #3
 802537e:	4013      	ands	r3, r2
 8025380:	d006      	beq.n	8025390 <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 8025382:	4b3a      	ldr	r3, [pc, #232]	; (802546c <_eeprom_write+0x138>)
 8025384:	2101      	movs	r1, #1
 8025386:	0018      	movs	r0, r3
 8025388:	f7fd fd4a 	bl	8022e20 <itsdk_error_report>
	    return false;
 802538c:	2300      	movs	r3, #0
 802538e:	e064      	b.n	802545a <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 8025390:	4b37      	ldr	r3, [pc, #220]	; (8025470 <_eeprom_write+0x13c>)
 8025392:	685b      	ldr	r3, [r3, #4]
 8025394:	2201      	movs	r2, #1
 8025396:	4013      	ands	r3, r2
 8025398:	d005      	beq.n	80253a6 <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 802539a:	4b35      	ldr	r3, [pc, #212]	; (8025470 <_eeprom_write+0x13c>)
 802539c:	4a35      	ldr	r2, [pc, #212]	; (8025474 <_eeprom_write+0x140>)
 802539e:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 80253a0:	4b33      	ldr	r3, [pc, #204]	; (8025470 <_eeprom_write+0x13c>)
 80253a2:	4a35      	ldr	r2, [pc, #212]	; (8025478 <_eeprom_write+0x144>)
 80253a4:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 80253a6:	2300      	movs	r3, #0
 80253a8:	61bb      	str	r3, [r7, #24]
 80253aa:	e04b      	b.n	8025444 <_eeprom_write+0x110>
		v = _data[i] << 24;
 80253ac:	69bb      	ldr	r3, [r7, #24]
 80253ae:	697a      	ldr	r2, [r7, #20]
 80253b0:	18d3      	adds	r3, r2, r3
 80253b2:	781b      	ldrb	r3, [r3, #0]
 80253b4:	061b      	lsls	r3, r3, #24
 80253b6:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 80253b8:	69bb      	ldr	r3, [r7, #24]
 80253ba:	3301      	adds	r3, #1
 80253bc:	683a      	ldr	r2, [r7, #0]
 80253be:	429a      	cmp	r2, r3
 80253c0:	dd07      	ble.n	80253d2 <_eeprom_write+0x9e>
 80253c2:	69bb      	ldr	r3, [r7, #24]
 80253c4:	3301      	adds	r3, #1
 80253c6:	697a      	ldr	r2, [r7, #20]
 80253c8:	18d3      	adds	r3, r2, r3
 80253ca:	781b      	ldrb	r3, [r3, #0]
 80253cc:	041b      	lsls	r3, r3, #16
 80253ce:	001a      	movs	r2, r3
 80253d0:	e000      	b.n	80253d4 <_eeprom_write+0xa0>
 80253d2:	2200      	movs	r2, #0
 80253d4:	693b      	ldr	r3, [r7, #16]
 80253d6:	189b      	adds	r3, r3, r2
 80253d8:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 80253da:	69bb      	ldr	r3, [r7, #24]
 80253dc:	3302      	adds	r3, #2
 80253de:	683a      	ldr	r2, [r7, #0]
 80253e0:	429a      	cmp	r2, r3
 80253e2:	dd07      	ble.n	80253f4 <_eeprom_write+0xc0>
 80253e4:	69bb      	ldr	r3, [r7, #24]
 80253e6:	3302      	adds	r3, #2
 80253e8:	697a      	ldr	r2, [r7, #20]
 80253ea:	18d3      	adds	r3, r2, r3
 80253ec:	781b      	ldrb	r3, [r3, #0]
 80253ee:	021b      	lsls	r3, r3, #8
 80253f0:	001a      	movs	r2, r3
 80253f2:	e000      	b.n	80253f6 <_eeprom_write+0xc2>
 80253f4:	2200      	movs	r2, #0
 80253f6:	693b      	ldr	r3, [r7, #16]
 80253f8:	189b      	adds	r3, r3, r2
 80253fa:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 80253fc:	69bb      	ldr	r3, [r7, #24]
 80253fe:	3303      	adds	r3, #3
 8025400:	683a      	ldr	r2, [r7, #0]
 8025402:	429a      	cmp	r2, r3
 8025404:	dd06      	ble.n	8025414 <_eeprom_write+0xe0>
 8025406:	69bb      	ldr	r3, [r7, #24]
 8025408:	3303      	adds	r3, #3
 802540a:	697a      	ldr	r2, [r7, #20]
 802540c:	18d3      	adds	r3, r2, r3
 802540e:	781b      	ldrb	r3, [r3, #0]
 8025410:	001a      	movs	r2, r3
 8025412:	e000      	b.n	8025416 <_eeprom_write+0xe2>
 8025414:	2200      	movs	r2, #0
 8025416:	693b      	ldr	r3, [r7, #16]
 8025418:	189b      	adds	r3, r3, r2
 802541a:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 802541c:	69fb      	ldr	r3, [r7, #28]
 802541e:	0018      	movs	r0, r3
 8025420:	f000 f8a6 	bl	8025570 <__eepromRead>
 8025424:	0002      	movs	r2, r0
 8025426:	693b      	ldr	r3, [r7, #16]
 8025428:	4293      	cmp	r3, r2
 802542a:	d005      	beq.n	8025438 <_eeprom_write+0x104>
 802542c:	693a      	ldr	r2, [r7, #16]
 802542e:	69fb      	ldr	r3, [r7, #28]
 8025430:	0011      	movs	r1, r2
 8025432:	0018      	movs	r0, r3
 8025434:	f000 f8a6 	bl	8025584 <__eepromWrite>
		_eepromAddr+=4;
 8025438:	69fb      	ldr	r3, [r7, #28]
 802543a:	3304      	adds	r3, #4
 802543c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 802543e:	69bb      	ldr	r3, [r7, #24]
 8025440:	3304      	adds	r3, #4
 8025442:	61bb      	str	r3, [r7, #24]
 8025444:	69ba      	ldr	r2, [r7, #24]
 8025446:	683b      	ldr	r3, [r7, #0]
 8025448:	429a      	cmp	r2, r3
 802544a:	dbaf      	blt.n	80253ac <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 802544c:	4b08      	ldr	r3, [pc, #32]	; (8025470 <_eeprom_write+0x13c>)
 802544e:	685a      	ldr	r2, [r3, #4]
 8025450:	4b07      	ldr	r3, [pc, #28]	; (8025470 <_eeprom_write+0x13c>)
 8025452:	2101      	movs	r1, #1
 8025454:	430a      	orrs	r2, r1
 8025456:	605a      	str	r2, [r3, #4]
	return true;
 8025458:	2301      	movs	r3, #1
}
 802545a:	0018      	movs	r0, r3
 802545c:	46bd      	mov	sp, r7
 802545e:	b008      	add	sp, #32
 8025460:	bd80      	pop	{r7, pc}
 8025462:	46c0      	nop			; (mov r8, r8)
 8025464:	d0000030 	.word	0xd0000030
 8025468:	08080000 	.word	0x08080000
 802546c:	d0000031 	.word	0xd0000031
 8025470:	40022000 	.word	0x40022000
 8025474:	89abcdef 	.word	0x89abcdef
 8025478:	02030405 	.word	0x02030405

0802547c <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 802547c:	b580      	push	{r7, lr}
 802547e:	b088      	sub	sp, #32
 8025480:	af00      	add	r7, sp, #0
 8025482:	60b9      	str	r1, [r7, #8]
 8025484:	607a      	str	r2, [r7, #4]
 8025486:	603b      	str	r3, [r7, #0]
 8025488:	210f      	movs	r1, #15
 802548a:	187b      	adds	r3, r7, r1
 802548c:	1c02      	adds	r2, r0, #0
 802548e:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 8025494:	187b      	adds	r3, r7, r1
 8025496:	781b      	ldrb	r3, [r3, #0]
 8025498:	2b00      	cmp	r3, #0
 802549a:	d106      	bne.n	80254aa <_eeprom_read+0x2e>
 802549c:	683a      	ldr	r2, [r7, #0]
 802549e:	68bb      	ldr	r3, [r7, #8]
 80254a0:	18d2      	adds	r2, r2, r3
 80254a2:	23c0      	movs	r3, #192	; 0xc0
 80254a4:	015b      	lsls	r3, r3, #5
 80254a6:	429a      	cmp	r2, r3
 80254a8:	d906      	bls.n	80254b8 <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 80254aa:	683b      	ldr	r3, [r7, #0]
 80254ac:	b29b      	uxth	r3, r3
 80254ae:	4a2d      	ldr	r2, [pc, #180]	; (8025564 <_eeprom_read+0xe8>)
 80254b0:	0019      	movs	r1, r3
 80254b2:	0010      	movs	r0, r2
 80254b4:	f7fd fcb4 	bl	8022e20 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 80254b8:	68bb      	ldr	r3, [r7, #8]
 80254ba:	4a2b      	ldr	r2, [pc, #172]	; (8025568 <_eeprom_read+0xec>)
 80254bc:	4694      	mov	ip, r2
 80254be:	4463      	add	r3, ip
 80254c0:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 80254c2:	69fb      	ldr	r3, [r7, #28]
 80254c4:	2203      	movs	r2, #3
 80254c6:	4013      	ands	r3, r2
 80254c8:	d006      	beq.n	80254d8 <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 80254ca:	4b28      	ldr	r3, [pc, #160]	; (802556c <_eeprom_read+0xf0>)
 80254cc:	2100      	movs	r1, #0
 80254ce:	0018      	movs	r0, r3
 80254d0:	f7fd fca6 	bl	8022e20 <itsdk_error_report>
	    return false;
 80254d4:	2300      	movs	r3, #0
 80254d6:	e040      	b.n	802555a <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 80254d8:	2300      	movs	r3, #0
 80254da:	61bb      	str	r3, [r7, #24]
 80254dc:	e038      	b.n	8025550 <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 80254de:	69fb      	ldr	r3, [r7, #28]
 80254e0:	0018      	movs	r0, r3
 80254e2:	f000 f845 	bl	8025570 <__eepromRead>
 80254e6:	0003      	movs	r3, r0
 80254e8:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 80254ea:	693b      	ldr	r3, [r7, #16]
 80254ec:	0e19      	lsrs	r1, r3, #24
 80254ee:	69bb      	ldr	r3, [r7, #24]
 80254f0:	697a      	ldr	r2, [r7, #20]
 80254f2:	18d3      	adds	r3, r2, r3
 80254f4:	b2ca      	uxtb	r2, r1
 80254f6:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 80254f8:	69bb      	ldr	r3, [r7, #24]
 80254fa:	3301      	adds	r3, #1
 80254fc:	683a      	ldr	r2, [r7, #0]
 80254fe:	429a      	cmp	r2, r3
 8025500:	dd07      	ble.n	8025512 <_eeprom_read+0x96>
 8025502:	693b      	ldr	r3, [r7, #16]
 8025504:	0c19      	lsrs	r1, r3, #16
 8025506:	69bb      	ldr	r3, [r7, #24]
 8025508:	3301      	adds	r3, #1
 802550a:	697a      	ldr	r2, [r7, #20]
 802550c:	18d3      	adds	r3, r2, r3
 802550e:	b2ca      	uxtb	r2, r1
 8025510:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 8025512:	69bb      	ldr	r3, [r7, #24]
 8025514:	3302      	adds	r3, #2
 8025516:	683a      	ldr	r2, [r7, #0]
 8025518:	429a      	cmp	r2, r3
 802551a:	dd07      	ble.n	802552c <_eeprom_read+0xb0>
 802551c:	693b      	ldr	r3, [r7, #16]
 802551e:	0a19      	lsrs	r1, r3, #8
 8025520:	69bb      	ldr	r3, [r7, #24]
 8025522:	3302      	adds	r3, #2
 8025524:	697a      	ldr	r2, [r7, #20]
 8025526:	18d3      	adds	r3, r2, r3
 8025528:	b2ca      	uxtb	r2, r1
 802552a:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 802552c:	69bb      	ldr	r3, [r7, #24]
 802552e:	3303      	adds	r3, #3
 8025530:	683a      	ldr	r2, [r7, #0]
 8025532:	429a      	cmp	r2, r3
 8025534:	dd06      	ble.n	8025544 <_eeprom_read+0xc8>
 8025536:	69bb      	ldr	r3, [r7, #24]
 8025538:	3303      	adds	r3, #3
 802553a:	697a      	ldr	r2, [r7, #20]
 802553c:	18d3      	adds	r3, r2, r3
 802553e:	693a      	ldr	r2, [r7, #16]
 8025540:	b2d2      	uxtb	r2, r2
 8025542:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 8025544:	69fb      	ldr	r3, [r7, #28]
 8025546:	3304      	adds	r3, #4
 8025548:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 802554a:	69bb      	ldr	r3, [r7, #24]
 802554c:	3304      	adds	r3, #4
 802554e:	61bb      	str	r3, [r7, #24]
 8025550:	69ba      	ldr	r2, [r7, #24]
 8025552:	683b      	ldr	r3, [r7, #0]
 8025554:	429a      	cmp	r2, r3
 8025556:	dbc2      	blt.n	80254de <_eeprom_read+0x62>
	}
	return true;
 8025558:	2301      	movs	r3, #1
}
 802555a:	0018      	movs	r0, r3
 802555c:	46bd      	mov	sp, r7
 802555e:	b008      	add	sp, #32
 8025560:	bd80      	pop	{r7, pc}
 8025562:	46c0      	nop			; (mov r8, r8)
 8025564:	d0000030 	.word	0xd0000030
 8025568:	08080000 	.word	0x08080000
 802556c:	d0000031 	.word	0xd0000031

08025570 <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 8025570:	b580      	push	{r7, lr}
 8025572:	b082      	sub	sp, #8
 8025574:	af00      	add	r7, sp, #0
 8025576:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	681b      	ldr	r3, [r3, #0]
}
 802557c:	0018      	movs	r0, r3
 802557e:	46bd      	mov	sp, r7
 8025580:	b002      	add	sp, #8
 8025582:	bd80      	pop	{r7, pc}

08025584 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 8025584:	b580      	push	{r7, lr}
 8025586:	b084      	sub	sp, #16
 8025588:	af00      	add	r7, sp, #0
 802558a:	6078      	str	r0, [r7, #4]
 802558c:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 802558e:	230e      	movs	r3, #14
 8025590:	18fb      	adds	r3, r7, r3
 8025592:	4a20      	ldr	r2, [pc, #128]	; (8025614 <__eepromWrite+0x90>)
 8025594:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 8025596:	e005      	b.n	80255a4 <__eepromWrite+0x20>
 8025598:	210e      	movs	r1, #14
 802559a:	187b      	adds	r3, r7, r1
 802559c:	881a      	ldrh	r2, [r3, #0]
 802559e:	187b      	adds	r3, r7, r1
 80255a0:	3a01      	subs	r2, #1
 80255a2:	801a      	strh	r2, [r3, #0]
 80255a4:	4b1c      	ldr	r3, [pc, #112]	; (8025618 <__eepromWrite+0x94>)
 80255a6:	699b      	ldr	r3, [r3, #24]
 80255a8:	2201      	movs	r2, #1
 80255aa:	4013      	ands	r3, r2
 80255ac:	d004      	beq.n	80255b8 <__eepromWrite+0x34>
 80255ae:	230e      	movs	r3, #14
 80255b0:	18fb      	adds	r3, r7, r3
 80255b2:	881b      	ldrh	r3, [r3, #0]
 80255b4:	2b00      	cmp	r3, #0
 80255b6:	d1ef      	bne.n	8025598 <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 80255b8:	230e      	movs	r3, #14
 80255ba:	18fb      	adds	r3, r7, r3
 80255bc:	881b      	ldrh	r3, [r3, #0]
 80255be:	2b00      	cmp	r3, #0
 80255c0:	d101      	bne.n	80255c6 <__eepromWrite+0x42>
 80255c2:	2300      	movs	r3, #0
 80255c4:	e021      	b.n	802560a <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 80255c6:	4b14      	ldr	r3, [pc, #80]	; (8025618 <__eepromWrite+0x94>)
 80255c8:	685a      	ldr	r2, [r3, #4]
 80255ca:	4b13      	ldr	r3, [pc, #76]	; (8025618 <__eepromWrite+0x94>)
 80255cc:	4913      	ldr	r1, [pc, #76]	; (802561c <__eepromWrite+0x98>)
 80255ce:	400a      	ands	r2, r1
 80255d0:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 80255d2:	687b      	ldr	r3, [r7, #4]
 80255d4:	683a      	ldr	r2, [r7, #0]
 80255d6:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 80255d8:	e005      	b.n	80255e6 <__eepromWrite+0x62>
 80255da:	210e      	movs	r1, #14
 80255dc:	187b      	adds	r3, r7, r1
 80255de:	881a      	ldrh	r2, [r3, #0]
 80255e0:	187b      	adds	r3, r7, r1
 80255e2:	3a01      	subs	r2, #1
 80255e4:	801a      	strh	r2, [r3, #0]
 80255e6:	4b0c      	ldr	r3, [pc, #48]	; (8025618 <__eepromWrite+0x94>)
 80255e8:	699b      	ldr	r3, [r3, #24]
 80255ea:	2201      	movs	r2, #1
 80255ec:	4013      	ands	r3, r2
 80255ee:	d004      	beq.n	80255fa <__eepromWrite+0x76>
 80255f0:	230e      	movs	r3, #14
 80255f2:	18fb      	adds	r3, r7, r3
 80255f4:	881b      	ldrh	r3, [r3, #0]
 80255f6:	2b00      	cmp	r3, #0
 80255f8:	d1ef      	bne.n	80255da <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 80255fa:	230e      	movs	r3, #14
 80255fc:	18fb      	adds	r3, r7, r3
 80255fe:	881b      	ldrh	r3, [r3, #0]
 8025600:	2b00      	cmp	r3, #0
 8025602:	d101      	bne.n	8025608 <__eepromWrite+0x84>
 8025604:	2300      	movs	r3, #0
 8025606:	e000      	b.n	802560a <__eepromWrite+0x86>

	return true;
 8025608:	2301      	movs	r3, #1
}
 802560a:	0018      	movs	r0, r3
 802560c:	46bd      	mov	sp, r7
 802560e:	b004      	add	sp, #16
 8025610:	bd80      	pop	{r7, pc}
 8025612:	46c0      	nop			; (mov r8, r8)
 8025614:	00002710 	.word	0x00002710
 8025618:	40022000 	.word	0x40022000
 802561c:	fffffeff 	.word	0xfffffeff

08025620 <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 8025620:	b570      	push	{r4, r5, r6, lr}
 8025622:	000c      	movs	r4, r1
 8025624:	b082      	sub	sp, #8
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 8025626:	1c43      	adds	r3, r0, #1
 8025628:	d062      	beq.n	80256f0 <stm32l_lowPowerSetup+0xd0>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 802562a:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 802562c:	2805      	cmp	r0, #5
 802562e:	d95c      	bls.n	80256ea <stm32l_lowPowerSetup+0xca>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 8025630:	f000 f942 	bl	80258b8 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 8025634:	f7de fb4a 	bl	8003ccc <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 8025638:	2380      	movs	r3, #128	; 0x80
 802563a:	4a2e      	ldr	r2, [pc, #184]	; (80256f4 <stm32l_lowPowerSetup+0xd4>)
 802563c:	055b      	lsls	r3, r3, #21
 802563e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8025640:	430b      	orrs	r3, r1
 8025642:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 8025644:	f7df f8fe 	bl	8004844 <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 8025648:	f7df f8ee 	bl	8004828 <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 802564c:	2c00      	cmp	r4, #0
 802564e:	d144      	bne.n	80256da <stm32l_lowPowerSetup+0xba>
				while(__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART1 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
 8025650:	2280      	movs	r2, #128	; 0x80
 8025652:	4d29      	ldr	r5, [pc, #164]	; (80256f8 <stm32l_lowPowerSetup+0xd8>)
 8025654:	0252      	lsls	r2, r2, #9
 8025656:	6829      	ldr	r1, [r5, #0]
 8025658:	69cb      	ldr	r3, [r1, #28]
 802565a:	4213      	tst	r3, r2
 802565c:	d1fc      	bne.n	8025658 <stm32l_lowPowerSetup+0x38>
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 802565e:	2180      	movs	r1, #128	; 0x80
 8025660:	4e26      	ldr	r6, [pc, #152]	; (80256fc <stm32l_lowPowerSetup+0xdc>)
 8025662:	0249      	lsls	r1, r1, #9
 8025664:	6833      	ldr	r3, [r6, #0]
 8025666:	69da      	ldr	r2, [r3, #28]
 8025668:	420a      	tst	r2, r1
 802566a:	d1fc      	bne.n	8025666 <stm32l_lowPowerSetup+0x46>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 802566c:	2480      	movs	r4, #128	; 0x80
 802566e:	03e4      	lsls	r4, r4, #15
 8025670:	69da      	ldr	r2, [r3, #28]
 8025672:	4222      	tst	r2, r4
 8025674:	d0fc      	beq.n	8025670 <stm32l_lowPowerSetup+0x50>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 8025676:	23c0      	movs	r3, #192	; 0xc0
 8025678:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 802567a:	0019      	movs	r1, r3
 802567c:	9a01      	ldr	r2, [sp, #4]
 802567e:	0030      	movs	r0, r6
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 8025680:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 8025682:	f7e2 f983 	bl	800798c <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8025686:	6833      	ldr	r3, [r6, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 8025688:	0030      	movs	r0, r6
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 802568a:	689a      	ldr	r2, [r3, #8]
 802568c:	4314      	orrs	r4, r2
 802568e:	609c      	str	r4, [r3, #8]
			  #endif
			#endif

			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART1 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 8025690:	2480      	movs	r4, #128	; 0x80
				HAL_UARTEx_EnableStopMode(&huart2);
 8025692:	f7e2 f9e1 	bl	8007a58 <HAL_UARTEx_EnableStopMode>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 8025696:	682a      	ldr	r2, [r5, #0]
 8025698:	03e4      	lsls	r4, r4, #15
 802569a:	69d3      	ldr	r3, [r2, #28]
 802569c:	4223      	tst	r3, r4
 802569e:	d0fc      	beq.n	802569a <stm32l_lowPowerSetup+0x7a>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1,wakeup);
 80256a0:	9900      	ldr	r1, [sp, #0]
 80256a2:	9a01      	ldr	r2, [sp, #4]
 80256a4:	0028      	movs	r0, r5
 80256a6:	f7e2 f971 	bl	800798c <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80256aa:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart1);
 80256ac:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80256ae:	689a      	ldr	r2, [r3, #8]
 80256b0:	4314      	orrs	r4, r2
 80256b2:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart1);
 80256b4:	f7e2 f9d0 	bl	8007a58 <HAL_UARTEx_EnableStopMode>
				#if (ITSDK_WITH_UART & __UART_USART1) > 0
					__HAL_RCC_USART1_CLK_DISABLE();
				#endif
			#endif

			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 80256b8:	f000 f89a 	bl	80257f0 <_stm32l_disableGpios>
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
																// (the previously existing handler will be bypassed)
			#else
			  gpio_interruptDisableAll();						// Disable GPIOs interrupts
 80256bc:	f7ff fba5 	bl	8024e0a <gpio_interruptDisableAll>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
 80256c0:	2204      	movs	r2, #4
				__HAL_RCC_SPI1_CLK_DISABLE();
 80256c2:	4b0c      	ldr	r3, [pc, #48]	; (80256f4 <stm32l_lowPowerSetup+0xd4>)
 80256c4:	4c0e      	ldr	r4, [pc, #56]	; (8025700 <stm32l_lowPowerSetup+0xe0>)
 80256c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 80256c8:	480e      	ldr	r0, [pc, #56]	; (8025704 <stm32l_lowPowerSetup+0xe4>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 80256ca:	4021      	ands	r1, r4
 80256cc:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 80256ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80256d0:	4391      	bics	r1, r2
 80256d2:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 80256d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80256d6:	4002      	ands	r2, r0
 80256d8:	635a      	str	r2, [r3, #52]	; 0x34
		// ??? add ?? Not yet tested
		//__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 80256da:	22ff      	movs	r2, #255	; 0xff
 80256dc:	4b0a      	ldr	r3, [pc, #40]	; (8025708 <stm32l_lowPowerSetup+0xe8>)
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80256de:	2101      	movs	r1, #1
 80256e0:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 80256e2:	701a      	strb	r2, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80256e4:	f7df f86c 	bl	80047c0 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 80256e8:	2300      	movs	r3, #0
}
 80256ea:	0018      	movs	r0, r3
 80256ec:	b002      	add	sp, #8
 80256ee:	bd70      	pop	{r4, r5, r6, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 80256f0:	4806      	ldr	r0, [pc, #24]	; (802570c <stm32l_lowPowerSetup+0xec>)
 80256f2:	e79d      	b.n	8025630 <stm32l_lowPowerSetup+0x10>
 80256f4:	40021000 	.word	0x40021000
 80256f8:	20002024 	.word	0x20002024
 80256fc:	200021b4 	.word	0x200021b4
 8025700:	ffffefff 	.word	0xffffefff
 8025704:	fffffdff 	.word	0xfffffdff
 8025708:	20000058 	.word	0x20000058
 802570c:	00003e7b 	.word	0x00003e7b

08025710 <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 8025710:	b510      	push	{r4, lr}
 8025712:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 8025714:	f7dd fd06 	bl	8003124 <SystemClock_Config>
		HAL_SuspendTick();
 8025718:	f7de fad8 	bl	8003ccc <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 802571c:	f000 f8dd 	bl	80258da <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 8025720:	2c00      	cmp	r4, #0
 8025722:	d10f      	bne.n	8025744 <stm32l_lowPowerResume+0x34>

			stm32l_lowPowerRestoreGpioConfig();
 8025724:	f7dd fc34 	bl	8002f90 <stm32l_lowPowerRestoreGpioConfig>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				HAL_I2C_MspInit(&hi2c2);
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				HAL_SPI_MspInit(&hspi1);
 8025728:	4808      	ldr	r0, [pc, #32]	; (802574c <stm32l_lowPowerResume+0x3c>)
 802572a:	f7dd ffab 	bl	8003684 <HAL_SPI_MspInit>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				HAL_SPI_MspInit(&hspi2);
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				HAL_TIM_Base_MspInit(&htim21);
 802572e:	4808      	ldr	r0, [pc, #32]	; (8025750 <stm32l_lowPowerResume+0x40>)
 8025730:	f7de f924 	bl	800397c <HAL_TIM_Base_MspInit>
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_ENABLE();
 8025734:	2380      	movs	r3, #128	; 0x80
 8025736:	4a07      	ldr	r2, [pc, #28]	; (8025754 <stm32l_lowPowerResume+0x44>)
 8025738:	009b      	lsls	r3, r3, #2
 802573a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 802573c:	430b      	orrs	r3, r1
 802573e:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 8025740:	f7de fd06 	bl	8004150 <HAL_ADCEx_EnableVREFINT>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 8025744:	f7de fad0 	bl	8003ce8 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 8025748:	2000      	movs	r0, #0
 802574a:	bd10      	pop	{r4, pc}
 802574c:	20002120 	.word	0x20002120
 8025750:	20002178 	.word	0x20002178
 8025754:	40021000 	.word	0x40021000

08025758 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 8025758:	b580      	push	{r7, lr}
 802575a:	b086      	sub	sp, #24
 802575c:	af00      	add	r7, sp, #0
 802575e:	6078      	str	r0, [r7, #4]
 8025760:	000a      	movs	r2, r1
 8025762:	1cbb      	adds	r3, r7, #2
 8025764:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 8025766:	2300      	movs	r3, #0
 8025768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802576a:	2300      	movs	r3, #0
 802576c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802576e:	2300      	movs	r3, #0
 8025770:	60fb      	str	r3, [r7, #12]

  // Configure the port pins //
  while ((pins >> position) != 0)
 8025772:	e033      	b.n	80257dc <__GpioAnalog+0x84>
  {
    iocurrent = (pins) & (1U << position);
 8025774:	1cbb      	adds	r3, r7, #2
 8025776:	881b      	ldrh	r3, [r3, #0]
 8025778:	2101      	movs	r1, #1
 802577a:	697a      	ldr	r2, [r7, #20]
 802577c:	4091      	lsls	r1, r2
 802577e:	000a      	movs	r2, r1
 8025780:	4013      	ands	r3, r2
 8025782:	613b      	str	r3, [r7, #16]
    if(iocurrent)
 8025784:	693b      	ldr	r3, [r7, #16]
 8025786:	2b00      	cmp	r3, #0
 8025788:	d025      	beq.n	80257d6 <__GpioAnalog+0x7e>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	681b      	ldr	r3, [r3, #0]
 802578e:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8025790:	697b      	ldr	r3, [r7, #20]
 8025792:	005b      	lsls	r3, r3, #1
 8025794:	2203      	movs	r2, #3
 8025796:	409a      	lsls	r2, r3
 8025798:	0013      	movs	r3, r2
 802579a:	43da      	mvns	r2, r3
 802579c:	68fb      	ldr	r3, [r7, #12]
 802579e:	4013      	ands	r3, r2
 80257a0:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 80257a2:	697b      	ldr	r3, [r7, #20]
 80257a4:	005b      	lsls	r3, r3, #1
 80257a6:	2203      	movs	r2, #3
 80257a8:	409a      	lsls	r2, r3
 80257aa:	0013      	movs	r3, r2
 80257ac:	68fa      	ldr	r2, [r7, #12]
 80257ae:	4313      	orrs	r3, r2
 80257b0:	60fb      	str	r3, [r7, #12]
      GPIOx->MODER = temp;
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	68fa      	ldr	r2, [r7, #12]
 80257b6:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 80257b8:	687b      	ldr	r3, [r7, #4]
 80257ba:	68db      	ldr	r3, [r3, #12]
 80257bc:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80257be:	697b      	ldr	r3, [r7, #20]
 80257c0:	005b      	lsls	r3, r3, #1
 80257c2:	2203      	movs	r2, #3
 80257c4:	409a      	lsls	r2, r3
 80257c6:	0013      	movs	r3, r2
 80257c8:	43da      	mvns	r2, r3
 80257ca:	68fb      	ldr	r3, [r7, #12]
 80257cc:	4013      	ands	r3, r2
 80257ce:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	68fa      	ldr	r2, [r7, #12]
 80257d4:	60da      	str	r2, [r3, #12]
    }
    position++;
 80257d6:	697b      	ldr	r3, [r7, #20]
 80257d8:	3301      	adds	r3, #1
 80257da:	617b      	str	r3, [r7, #20]
  while ((pins >> position) != 0)
 80257dc:	1cbb      	adds	r3, r7, #2
 80257de:	881a      	ldrh	r2, [r3, #0]
 80257e0:	697b      	ldr	r3, [r7, #20]
 80257e2:	411a      	asrs	r2, r3
 80257e4:	1e13      	subs	r3, r2, #0
 80257e6:	d1c5      	bne.n	8025774 <__GpioAnalog+0x1c>
  }
}
 80257e8:	46c0      	nop			; (mov r8, r8)
 80257ea:	46bd      	mov	sp, r7
 80257ec:	b006      	add	sp, #24
 80257ee:	bd80      	pop	{r7, pc}

080257f0 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 80257f0:	b580      	push	{r7, lr}
 80257f2:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 80257f4:	4a1f      	ldr	r2, [pc, #124]	; (8025874 <_stm32l_disableGpios+0x84>)
 80257f6:	23a0      	movs	r3, #160	; 0xa0
 80257f8:	05db      	lsls	r3, r3, #23
 80257fa:	0011      	movs	r1, r2
 80257fc:	0018      	movs	r0, r3
 80257fe:	f7ff ffab 	bl	8025758 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 8025802:	4a1d      	ldr	r2, [pc, #116]	; (8025878 <_stm32l_disableGpios+0x88>)
 8025804:	4b1d      	ldr	r3, [pc, #116]	; (802587c <_stm32l_disableGpios+0x8c>)
 8025806:	0011      	movs	r1, r2
 8025808:	0018      	movs	r0, r3
 802580a:	f7ff ffa5 	bl	8025758 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 802580e:	4a1c      	ldr	r2, [pc, #112]	; (8025880 <_stm32l_disableGpios+0x90>)
 8025810:	4b1c      	ldr	r3, [pc, #112]	; (8025884 <_stm32l_disableGpios+0x94>)
 8025812:	0011      	movs	r1, r2
 8025814:	0018      	movs	r0, r3
 8025816:	f7ff ff9f 	bl	8025758 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_C_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOC_CLK_DISABLE();
 802581a:	4b1b      	ldr	r3, [pc, #108]	; (8025888 <_stm32l_disableGpios+0x98>)
 802581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802581e:	4b1a      	ldr	r3, [pc, #104]	; (8025888 <_stm32l_disableGpios+0x98>)
 8025820:	2104      	movs	r1, #4
 8025822:	438a      	bics	r2, r1
 8025824:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 8025826:	4a16      	ldr	r2, [pc, #88]	; (8025880 <_stm32l_disableGpios+0x90>)
 8025828:	4b18      	ldr	r3, [pc, #96]	; (802588c <_stm32l_disableGpios+0x9c>)
 802582a:	0011      	movs	r1, r2
 802582c:	0018      	movs	r0, r3
 802582e:	f7ff ff93 	bl	8025758 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 8025832:	4b15      	ldr	r3, [pc, #84]	; (8025888 <_stm32l_disableGpios+0x98>)
 8025834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025836:	4b14      	ldr	r3, [pc, #80]	; (8025888 <_stm32l_disableGpios+0x98>)
 8025838:	2108      	movs	r1, #8
 802583a:	438a      	bics	r2, r1
 802583c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 802583e:	4a10      	ldr	r2, [pc, #64]	; (8025880 <_stm32l_disableGpios+0x90>)
 8025840:	4b13      	ldr	r3, [pc, #76]	; (8025890 <_stm32l_disableGpios+0xa0>)
 8025842:	0011      	movs	r1, r2
 8025844:	0018      	movs	r0, r3
 8025846:	f7ff ff87 	bl	8025758 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 802584a:	4b0f      	ldr	r3, [pc, #60]	; (8025888 <_stm32l_disableGpios+0x98>)
 802584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802584e:	4b0e      	ldr	r3, [pc, #56]	; (8025888 <_stm32l_disableGpios+0x98>)
 8025850:	2110      	movs	r1, #16
 8025852:	438a      	bics	r2, r1
 8025854:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 8025856:	4a0f      	ldr	r2, [pc, #60]	; (8025894 <_stm32l_disableGpios+0xa4>)
 8025858:	4b0f      	ldr	r3, [pc, #60]	; (8025898 <_stm32l_disableGpios+0xa8>)
 802585a:	0011      	movs	r1, r2
 802585c:	0018      	movs	r0, r3
 802585e:	f7ff ff7b 	bl	8025758 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 8025862:	4b09      	ldr	r3, [pc, #36]	; (8025888 <_stm32l_disableGpios+0x98>)
 8025864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025866:	4b08      	ldr	r3, [pc, #32]	; (8025888 <_stm32l_disableGpios+0x98>)
 8025868:	2180      	movs	r1, #128	; 0x80
 802586a:	438a      	bics	r2, r1
 802586c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 802586e:	46c0      	nop			; (mov r8, r8)
 8025870:	46bd      	mov	sp, r7
 8025872:	bd80      	pop	{r7, pc}
 8025874:	0000e0f3 	.word	0x0000e0f3
 8025878:	0000ef7b 	.word	0x0000ef7b
 802587c:	50000400 	.word	0x50000400
 8025880:	0000ffff 	.word	0x0000ffff
 8025884:	50000800 	.word	0x50000800
 8025888:	40021000 	.word	0x40021000
 802588c:	50000c00 	.word	0x50000c00
 8025890:	50001000 	.word	0x50001000
 8025894:	00000603 	.word	0x00000603
 8025898:	50001c00 	.word	0x50001c00

0802589c <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 802589c:	b580      	push	{r7, lr}
 802589e:	b082      	sub	sp, #8
 80258a0:	af00      	add	r7, sp, #0
 80258a2:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 80258a4:	4b03      	ldr	r3, [pc, #12]	; (80258b4 <HAL_UARTEx_WakeupCallback+0x18>)
 80258a6:	2203      	movs	r2, #3
 80258a8:	701a      	strb	r2, [r3, #0]
}
 80258aa:	46c0      	nop			; (mov r8, r8)
 80258ac:	46bd      	mov	sp, r7
 80258ae:	b002      	add	sp, #8
 80258b0:	bd80      	pop	{r7, pc}
 80258b2:	46c0      	nop			; (mov r8, r8)
 80258b4:	20000058 	.word	0x20000058

080258b8 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 80258b8:	b580      	push	{r7, lr}
 80258ba:	b082      	sub	sp, #8
 80258bc:	af00      	add	r7, sp, #0
 80258be:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 80258c0:	f000 f99a 	bl	8025bf8 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	d003      	beq.n	80258d2 <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 80258ca:	687b      	ldr	r3, [r7, #4]
 80258cc:	0018      	movs	r0, r3
 80258ce:	f000 f80d 	bl	80258ec <rtc_runRtcUntil>
	}
}
 80258d2:	46c0      	nop			; (mov r8, r8)
 80258d4:	46bd      	mov	sp, r7
 80258d6:	b002      	add	sp, #8
 80258d8:	bd80      	pop	{r7, pc}

080258da <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 80258da:	b580      	push	{r7, lr}
 80258dc:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 80258de:	f000 f85b 	bl	8025998 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 80258e2:	f000 f99b 	bl	8025c1c <rtc_updateTimeAfterSleepTime>
}
 80258e6:	46c0      	nop			; (mov r8, r8)
 80258e8:	46bd      	mov	sp, r7
 80258ea:	bd80      	pop	{r7, pc}

080258ec <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 80258ec:	b580      	push	{r7, lr}
 80258ee:	b084      	sub	sp, #16
 80258f0:	af00      	add	r7, sp, #0
 80258f2:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 80258f4:	687b      	ldr	r3, [r7, #4]
 80258f6:	0018      	movs	r0, r3
 80258f8:	f000 f816 	bl	8025928 <rtc_getTicksFromDuration>
 80258fc:	0003      	movs	r3, r0
 80258fe:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 8025900:	68fb      	ldr	r3, [r7, #12]
 8025902:	4a08      	ldr	r2, [pc, #32]	; (8025924 <rtc_runRtcUntil+0x38>)
 8025904:	4293      	cmp	r3, r2
 8025906:	d804      	bhi.n	8025912 <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 8025908:	68fb      	ldr	r3, [r7, #12]
 802590a:	0018      	movs	r0, r3
 802590c:	f000 f81c 	bl	8025948 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 8025910:	e003      	b.n	802591a <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 8025912:	687b      	ldr	r3, [r7, #4]
 8025914:	0018      	movs	r0, r3
 8025916:	f000 f827 	bl	8025968 <rtc_runRtcUntilMs>
}
 802591a:	46c0      	nop			; (mov r8, r8)
 802591c:	46bd      	mov	sp, r7
 802591e:	b004      	add	sp, #16
 8025920:	bd80      	pop	{r7, pc}
 8025922:	46c0      	nop			; (mov r8, r8)
 8025924:	0000ffff 	.word	0x0000ffff

08025928 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 8025928:	b580      	push	{r7, lr}
 802592a:	b082      	sub	sp, #8
 802592c:	af00      	add	r7, sp, #0
 802592e:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 8025930:	687b      	ldr	r3, [r7, #4]
 8025932:	02da      	lsls	r2, r3, #11
 8025934:	23fa      	movs	r3, #250	; 0xfa
 8025936:	0099      	lsls	r1, r3, #2
 8025938:	0010      	movs	r0, r2
 802593a:	f7da fbed 	bl	8000118 <__udivsi3>
 802593e:	0003      	movs	r3, r0
}
 8025940:	0018      	movs	r0, r3
 8025942:	46bd      	mov	sp, r7
 8025944:	b002      	add	sp, #8
 8025946:	bd80      	pop	{r7, pc}

08025948 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 8025948:	b580      	push	{r7, lr}
 802594a:	b082      	sub	sp, #8
 802594c:	af00      	add	r7, sp, #0
 802594e:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8025950:	6879      	ldr	r1, [r7, #4]
 8025952:	4b04      	ldr	r3, [pc, #16]	; (8025964 <rtc_runRtcUntilTicks+0x1c>)
 8025954:	2200      	movs	r2, #0
 8025956:	0018      	movs	r0, r3
 8025958:	f7e0 fb82 	bl	8006060 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 802595c:	46c0      	nop			; (mov r8, r8)
 802595e:	46bd      	mov	sp, r7
 8025960:	b002      	add	sp, #8
 8025962:	bd80      	pop	{r7, pc}
 8025964:	200020a4 	.word	0x200020a4

08025968 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 8025968:	b580      	push	{r7, lr}
 802596a:	b082      	sub	sp, #8
 802596c:	af00      	add	r7, sp, #0
 802596e:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8025970:	687a      	ldr	r2, [r7, #4]
 8025972:	23fa      	movs	r3, #250	; 0xfa
 8025974:	0099      	lsls	r1, r3, #2
 8025976:	0010      	movs	r0, r2
 8025978:	f7da fbce 	bl	8000118 <__udivsi3>
 802597c:	0003      	movs	r3, r0
 802597e:	0019      	movs	r1, r3
 8025980:	4b04      	ldr	r3, [pc, #16]	; (8025994 <rtc_runRtcUntilMs+0x2c>)
 8025982:	2204      	movs	r2, #4
 8025984:	0018      	movs	r0, r3
 8025986:	f7e0 fb6b 	bl	8006060 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 802598a:	46c0      	nop			; (mov r8, r8)
 802598c:	46bd      	mov	sp, r7
 802598e:	b002      	add	sp, #8
 8025990:	bd80      	pop	{r7, pc}
 8025992:	46c0      	nop			; (mov r8, r8)
 8025994:	200020a4 	.word	0x200020a4

08025998 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 8025998:	b580      	push	{r7, lr}
 802599a:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 802599c:	4b03      	ldr	r3, [pc, #12]	; (80259ac <rtc_disableWakeUp+0x14>)
 802599e:	0018      	movs	r0, r3
 80259a0:	f7e0 fc24 	bl	80061ec <HAL_RTCEx_DeactivateWakeUpTimer>
}
 80259a4:	46c0      	nop			; (mov r8, r8)
 80259a6:	46bd      	mov	sp, r7
 80259a8:	bd80      	pop	{r7, pc}
 80259aa:	46c0      	nop			; (mov r8, r8)
 80259ac:	200020a4 	.word	0x200020a4

080259b0 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 80259b0:	b5b0      	push	{r4, r5, r7, lr}
 80259b2:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 80259b4:	2001      	movs	r0, #1
 80259b6:	f000 f807 	bl	80259c8 <rtc_getTimestampMsRaw>
 80259ba:	0003      	movs	r3, r0
 80259bc:	000c      	movs	r4, r1
}
 80259be:	0018      	movs	r0, r3
 80259c0:	0021      	movs	r1, r4
 80259c2:	46bd      	mov	sp, r7
 80259c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080259c8 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 80259c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259ca:	b095      	sub	sp, #84	; 0x54
 80259cc:	af00      	add	r7, sp, #0
 80259ce:	0003      	movs	r3, r0
 80259d0:	222f      	movs	r2, #47	; 0x2f
 80259d2:	18ba      	adds	r2, r7, r2
 80259d4:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 80259d6:	210c      	movs	r1, #12
 80259d8:	000c      	movs	r4, r1
 80259da:	2328      	movs	r3, #40	; 0x28
 80259dc:	469c      	mov	ip, r3
 80259de:	44bc      	add	ip, r7
 80259e0:	4461      	add	r1, ip
 80259e2:	4b61      	ldr	r3, [pc, #388]	; (8025b68 <rtc_getTimestampMsRaw+0x1a0>)
 80259e4:	2200      	movs	r2, #0
 80259e6:	0018      	movs	r0, r3
 80259e8:	f7df ffa8 	bl	800593c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 80259ec:	2308      	movs	r3, #8
 80259ee:	2028      	movs	r0, #40	; 0x28
 80259f0:	183a      	adds	r2, r7, r0
 80259f2:	18d1      	adds	r1, r2, r3
 80259f4:	4b5c      	ldr	r3, [pc, #368]	; (8025b68 <rtc_getTimestampMsRaw+0x1a0>)
 80259f6:	2200      	movs	r2, #0
 80259f8:	0018      	movs	r0, r3
 80259fa:	f7e0 f8a9 	bl	8005b50 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 80259fe:	0021      	movs	r1, r4
 8025a00:	2028      	movs	r0, #40	; 0x28
 8025a02:	183b      	adds	r3, r7, r0
 8025a04:	185b      	adds	r3, r3, r1
 8025a06:	781b      	ldrb	r3, [r3, #0]
 8025a08:	001a      	movs	r2, r3
 8025a0a:	4b58      	ldr	r3, [pc, #352]	; (8025b6c <rtc_getTimestampMsRaw+0x1a4>)
 8025a0c:	4353      	muls	r3, r2
 8025a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a10:	2300      	movs	r3, #0
 8025a12:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 8025a14:	183a      	adds	r2, r7, r0
 8025a16:	1853      	adds	r3, r2, r1
 8025a18:	785b      	ldrb	r3, [r3, #1]
 8025a1a:	001a      	movs	r2, r3
 8025a1c:	4b54      	ldr	r3, [pc, #336]	; (8025b70 <rtc_getTimestampMsRaw+0x1a8>)
 8025a1e:	4353      	muls	r3, r2
 8025a20:	623b      	str	r3, [r7, #32]
 8025a22:	2300      	movs	r3, #0
 8025a24:	627b      	str	r3, [r7, #36]	; 0x24
 8025a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a28:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025a2a:	6a38      	ldr	r0, [r7, #32]
 8025a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025a2e:	181b      	adds	r3, r3, r0
 8025a30:	414c      	adcs	r4, r1
 8025a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a34:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 8025a36:	210c      	movs	r1, #12
 8025a38:	0008      	movs	r0, r1
 8025a3a:	2328      	movs	r3, #40	; 0x28
 8025a3c:	18fa      	adds	r2, r7, r3
 8025a3e:	1853      	adds	r3, r2, r1
 8025a40:	789b      	ldrb	r3, [r3, #2]
 8025a42:	001a      	movs	r2, r3
 8025a44:	0013      	movs	r3, r2
 8025a46:	015b      	lsls	r3, r3, #5
 8025a48:	1a9b      	subs	r3, r3, r2
 8025a4a:	009b      	lsls	r3, r3, #2
 8025a4c:	189b      	adds	r3, r3, r2
 8025a4e:	00db      	lsls	r3, r3, #3
 8025a50:	61bb      	str	r3, [r7, #24]
 8025a52:	2300      	movs	r3, #0
 8025a54:	61fb      	str	r3, [r7, #28]
 8025a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a58:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025a5a:	69b9      	ldr	r1, [r7, #24]
 8025a5c:	69fa      	ldr	r2, [r7, #28]
 8025a5e:	185b      	adds	r3, r3, r1
 8025a60:	4154      	adcs	r4, r2
 8025a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a64:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 8025a66:	0001      	movs	r1, r0
 8025a68:	2028      	movs	r0, #40	; 0x28
 8025a6a:	183b      	adds	r3, r7, r0
 8025a6c:	185b      	adds	r3, r3, r1
 8025a6e:	689a      	ldr	r2, [r3, #8]
 8025a70:	183b      	adds	r3, r7, r0
 8025a72:	185b      	adds	r3, r3, r1
 8025a74:	685b      	ldr	r3, [r3, #4]
 8025a76:	1ad2      	subs	r2, r2, r3
 8025a78:	0013      	movs	r3, r2
 8025a7a:	015b      	lsls	r3, r3, #5
 8025a7c:	1a9b      	subs	r3, r3, r2
 8025a7e:	009b      	lsls	r3, r3, #2
 8025a80:	189b      	adds	r3, r3, r2
 8025a82:	00db      	lsls	r3, r3, #3
 8025a84:	001a      	movs	r2, r3
 8025a86:	183b      	adds	r3, r7, r0
 8025a88:	185b      	adds	r3, r3, r1
 8025a8a:	689b      	ldr	r3, [r3, #8]
 8025a8c:	0019      	movs	r1, r3
 8025a8e:	0010      	movs	r0, r2
 8025a90:	f7da fb42 	bl	8000118 <__udivsi3>
 8025a94:	0003      	movs	r3, r0
 8025a96:	3301      	adds	r3, #1
 8025a98:	613b      	str	r3, [r7, #16]
 8025a9a:	2300      	movs	r3, #0
 8025a9c:	617b      	str	r3, [r7, #20]
 8025a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025aa0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025aa2:	6939      	ldr	r1, [r7, #16]
 8025aa4:	697a      	ldr	r2, [r7, #20]
 8025aa6:	185b      	adds	r3, r3, r1
 8025aa8:	4154      	adcs	r4, r2
 8025aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8025aac:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 8025aae:	4b31      	ldr	r3, [pc, #196]	; (8025b74 <rtc_getTimestampMsRaw+0x1ac>)
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	001d      	movs	r5, r3
 8025ab4:	2300      	movs	r3, #0
 8025ab6:	001e      	movs	r6, r3
 8025ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025aba:	42b3      	cmp	r3, r6
 8025abc:	d305      	bcc.n	8025aca <rtc_getTimestampMsRaw+0x102>
 8025abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025ac0:	42b3      	cmp	r3, r6
 8025ac2:	d107      	bne.n	8025ad4 <rtc_getTimestampMsRaw+0x10c>
 8025ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025ac6:	42ab      	cmp	r3, r5
 8025ac8:	d204      	bcs.n	8025ad4 <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 8025aca:	4b2b      	ldr	r3, [pc, #172]	; (8025b78 <rtc_getTimestampMsRaw+0x1b0>)
 8025acc:	681b      	ldr	r3, [r3, #0]
 8025ace:	1c5a      	adds	r2, r3, #1
 8025ad0:	4b29      	ldr	r3, [pc, #164]	; (8025b78 <rtc_getTimestampMsRaw+0x1b0>)
 8025ad2:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 8025ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025ad6:	4b27      	ldr	r3, [pc, #156]	; (8025b74 <rtc_getTimestampMsRaw+0x1ac>)
 8025ad8:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 8025ada:	4b27      	ldr	r3, [pc, #156]	; (8025b78 <rtc_getTimestampMsRaw+0x1b0>)
 8025adc:	681b      	ldr	r3, [r3, #0]
 8025ade:	60bb      	str	r3, [r7, #8]
 8025ae0:	2300      	movs	r3, #0
 8025ae2:	60fb      	str	r3, [r7, #12]
 8025ae4:	4a25      	ldr	r2, [pc, #148]	; (8025b7c <rtc_getTimestampMsRaw+0x1b4>)
 8025ae6:	2300      	movs	r3, #0
 8025ae8:	68b8      	ldr	r0, [r7, #8]
 8025aea:	68f9      	ldr	r1, [r7, #12]
 8025aec:	f7da fd46 	bl	800057c <__aeabi_lmul>
 8025af0:	0003      	movs	r3, r0
 8025af2:	000c      	movs	r4, r1
 8025af4:	0019      	movs	r1, r3
 8025af6:	0022      	movs	r2, r4
 8025af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025afa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025afc:	185b      	adds	r3, r3, r1
 8025afe:	4154      	adcs	r4, r2
 8025b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8025b02:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 8025b04:	232f      	movs	r3, #47	; 0x2f
 8025b06:	18fb      	adds	r3, r7, r3
 8025b08:	781b      	ldrb	r3, [r3, #0]
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	d024      	beq.n	8025b58 <rtc_getTimestampMsRaw+0x190>
 8025b0e:	4b1c      	ldr	r3, [pc, #112]	; (8025b80 <rtc_getTimestampMsRaw+0x1b8>)
 8025b10:	781b      	ldrb	r3, [r3, #0]
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	d020      	beq.n	8025b58 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 8025b16:	4b1b      	ldr	r3, [pc, #108]	; (8025b84 <rtc_getTimestampMsRaw+0x1bc>)
 8025b18:	681b      	ldr	r3, [r3, #0]
 8025b1a:	603b      	str	r3, [r7, #0]
 8025b1c:	2300      	movs	r3, #0
 8025b1e:	607b      	str	r3, [r7, #4]
 8025b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b24:	6838      	ldr	r0, [r7, #0]
 8025b26:	6879      	ldr	r1, [r7, #4]
 8025b28:	f7da fd28 	bl	800057c <__aeabi_lmul>
 8025b2c:	0003      	movs	r3, r0
 8025b2e:	000c      	movs	r4, r1
 8025b30:	0018      	movs	r0, r3
 8025b32:	0021      	movs	r1, r4
 8025b34:	22fa      	movs	r2, #250	; 0xfa
 8025b36:	0092      	lsls	r2, r2, #2
 8025b38:	2300      	movs	r3, #0
 8025b3a:	f7da fcff 	bl	800053c <__aeabi_uldivmod>
 8025b3e:	0003      	movs	r3, r0
 8025b40:	000c      	movs	r4, r1
 8025b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8025b44:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 8025b46:	4b10      	ldr	r3, [pc, #64]	; (8025b88 <rtc_getTimestampMsRaw+0x1c0>)
 8025b48:	685c      	ldr	r4, [r3, #4]
 8025b4a:	681b      	ldr	r3, [r3, #0]
 8025b4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025b50:	185b      	adds	r3, r3, r1
 8025b52:	4154      	adcs	r4, r2
 8025b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8025b56:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 8025b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b5a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 8025b5c:	0018      	movs	r0, r3
 8025b5e:	0021      	movs	r1, r4
 8025b60:	46bd      	mov	sp, r7
 8025b62:	b015      	add	sp, #84	; 0x54
 8025b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b66:	46c0      	nop			; (mov r8, r8)
 8025b68:	200020a4 	.word	0x200020a4
 8025b6c:	0036ee80 	.word	0x0036ee80
 8025b70:	0000ea60 	.word	0x0000ea60
 8025b74:	20001fa0 	.word	0x20001fa0
 8025b78:	20001f9c 	.word	0x20001f9c
 8025b7c:	05265c00 	.word	0x05265c00
 8025b80:	20001f98 	.word	0x20001f98
 8025b84:	20002430 	.word	0x20002430
 8025b88:	20002438 	.word	0x20002438

08025b8c <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 8025b8c:	b580      	push	{r7, lr}
 8025b8e:	b086      	sub	sp, #24
 8025b90:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 8025b92:	2114      	movs	r1, #20
 8025b94:	187b      	adds	r3, r7, r1
 8025b96:	2200      	movs	r2, #0
 8025b98:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 8025b9a:	187b      	adds	r3, r7, r1
 8025b9c:	2201      	movs	r2, #1
 8025b9e:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 8025ba0:	187b      	adds	r3, r7, r1
 8025ba2:	2201      	movs	r2, #1
 8025ba4:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 8025ba6:	1879      	adds	r1, r7, r1
 8025ba8:	4b11      	ldr	r3, [pc, #68]	; (8025bf0 <rtc_resetTime+0x64>)
 8025baa:	2200      	movs	r2, #0
 8025bac:	0018      	movs	r0, r3
 8025bae:	f7df ff21 	bl	80059f4 <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 8025bb2:	003b      	movs	r3, r7
 8025bb4:	2200      	movs	r2, #0
 8025bb6:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 8025bb8:	003b      	movs	r3, r7
 8025bba:	2200      	movs	r2, #0
 8025bbc:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 8025bbe:	003b      	movs	r3, r7
 8025bc0:	2200      	movs	r2, #0
 8025bc2:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 8025bc4:	003b      	movs	r3, r7
 8025bc6:	2200      	movs	r2, #0
 8025bc8:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8025bca:	003b      	movs	r3, r7
 8025bcc:	2200      	movs	r2, #0
 8025bce:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8025bd0:	003b      	movs	r3, r7
 8025bd2:	2200      	movs	r2, #0
 8025bd4:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 8025bd6:	0039      	movs	r1, r7
 8025bd8:	4b05      	ldr	r3, [pc, #20]	; (8025bf0 <rtc_resetTime+0x64>)
 8025bda:	2200      	movs	r2, #0
 8025bdc:	0018      	movs	r0, r3
 8025bde:	f7df fde9 	bl	80057b4 <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 8025be2:	4b04      	ldr	r3, [pc, #16]	; (8025bf4 <rtc_resetTime+0x68>)
 8025be4:	2200      	movs	r2, #0
 8025be6:	601a      	str	r2, [r3, #0]
}
 8025be8:	46c0      	nop			; (mov r8, r8)
 8025bea:	46bd      	mov	sp, r7
 8025bec:	b006      	add	sp, #24
 8025bee:	bd80      	pop	{r7, pc}
 8025bf0:	200020a4 	.word	0x200020a4
 8025bf4:	20001fa0 	.word	0x20001fa0

08025bf8 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 8025bf8:	b580      	push	{r7, lr}
 8025bfa:	af00      	add	r7, sp, #0
	__enable_systick=false;
 8025bfc:	4b05      	ldr	r3, [pc, #20]	; (8025c14 <rtc_prepareSleepTime+0x1c>)
 8025bfe:	2200      	movs	r2, #0
 8025c00:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8025c02:	4b05      	ldr	r3, [pc, #20]	; (8025c18 <rtc_prepareSleepTime+0x20>)
 8025c04:	681a      	ldr	r2, [r3, #0]
 8025c06:	4b04      	ldr	r3, [pc, #16]	; (8025c18 <rtc_prepareSleepTime+0x20>)
 8025c08:	2104      	movs	r1, #4
 8025c0a:	430a      	orrs	r2, r1
 8025c0c:	601a      	str	r2, [r3, #0]
}
 8025c0e:	46c0      	nop			; (mov r8, r8)
 8025c10:	46bd      	mov	sp, r7
 8025c12:	bd80      	pop	{r7, pc}
 8025c14:	20000059 	.word	0x20000059
 8025c18:	40007000 	.word	0x40007000

08025c1c <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 8025c1c:	b5b0      	push	{r4, r5, r7, lr}
 8025c1e:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 8025c20:	f7ff fec6 	bl	80259b0 <rtc_getTimestampMs>
 8025c24:	0003      	movs	r3, r0
 8025c26:	000c      	movs	r4, r1
 8025c28:	0018      	movs	r0, r3
 8025c2a:	0021      	movs	r1, r4
 8025c2c:	f7fe f91c 	bl	8023e68 <itsdk_time_set_ms>
	__enable_systick=true;
 8025c30:	4b02      	ldr	r3, [pc, #8]	; (8025c3c <rtc_updateTimeAfterSleepTime+0x20>)
 8025c32:	2201      	movs	r2, #1
 8025c34:	701a      	strb	r2, [r3, #0]
}
 8025c36:	46c0      	nop			; (mov r8, r8)
 8025c38:	46bd      	mov	sp, r7
 8025c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8025c3c:	20000059 	.word	0x20000059

08025c40 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8025c40:	b580      	push	{r7, lr}
 8025c42:	b084      	sub	sp, #16
 8025c44:	af00      	add	r7, sp, #0
 8025c46:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 8025c48:	4b0f      	ldr	r3, [pc, #60]	; (8025c88 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8025c4a:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8025c4c:	e00c      	b.n	8025c68 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 8025c4e:	68fb      	ldr	r3, [r7, #12]
 8025c50:	681b      	ldr	r3, [r3, #0]
 8025c52:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 8025c54:	68bb      	ldr	r3, [r7, #8]
 8025c56:	2b00      	cmp	r3, #0
 8025c58:	d003      	beq.n	8025c62 <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 8025c5a:	687a      	ldr	r2, [r7, #4]
 8025c5c:	68bb      	ldr	r3, [r7, #8]
 8025c5e:	0010      	movs	r0, r2
 8025c60:	4798      	blx	r3
		}
		c = c->next;
 8025c62:	68fb      	ldr	r3, [r7, #12]
 8025c64:	685b      	ldr	r3, [r3, #4]
 8025c66:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8025c68:	68fb      	ldr	r3, [r7, #12]
 8025c6a:	2b00      	cmp	r3, #0
 8025c6c:	d1ef      	bne.n	8025c4e <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8025c6e:	4b07      	ldr	r3, [pc, #28]	; (8025c8c <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8025c70:	681a      	ldr	r2, [r3, #0]
 8025c72:	4b06      	ldr	r3, [pc, #24]	; (8025c8c <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8025c74:	2104      	movs	r1, #4
 8025c76:	430a      	orrs	r2, r1
 8025c78:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 8025c7a:	4b05      	ldr	r3, [pc, #20]	; (8025c90 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8025c7c:	2200      	movs	r2, #0
 8025c7e:	701a      	strb	r2, [r3, #0]
}
 8025c80:	46c0      	nop			; (mov r8, r8)
 8025c82:	46bd      	mov	sp, r7
 8025c84:	b004      	add	sp, #16
 8025c86:	bd80      	pop	{r7, pc}
 8025c88:	20001fa4 	.word	0x20001fa4
 8025c8c:	40007000 	.word	0x40007000
 8025c90:	20000058 	.word	0x20000058

08025c94 <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 8025c94:	b590      	push	{r4, r7, lr}
 8025c96:	b083      	sub	sp, #12
 8025c98:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 8025c9a:	f000 f825 	bl	8025ce8 <rtc_calcClockRatio>
 8025c9e:	0003      	movs	r3, r0
 8025ca0:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 8025ca2:	4b0e      	ldr	r3, [pc, #56]	; (8025cdc <rtc_adjustTime+0x48>)
 8025ca4:	781b      	ldrb	r3, [r3, #0]
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	d009      	beq.n	8025cbe <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 8025caa:	f7ff fe81 	bl	80259b0 <rtc_getTimestampMs>
 8025cae:	0003      	movs	r3, r0
 8025cb0:	000c      	movs	r4, r1
 8025cb2:	4a0b      	ldr	r2, [pc, #44]	; (8025ce0 <rtc_adjustTime+0x4c>)
 8025cb4:	6013      	str	r3, [r2, #0]
 8025cb6:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 8025cb8:	f7ff ff68 	bl	8025b8c <rtc_resetTime>
 8025cbc:	e004      	b.n	8025cc8 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 8025cbe:	4a08      	ldr	r2, [pc, #32]	; (8025ce0 <rtc_adjustTime+0x4c>)
 8025cc0:	2300      	movs	r3, #0
 8025cc2:	2400      	movs	r4, #0
 8025cc4:	6013      	str	r3, [r2, #0]
 8025cc6:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 8025cc8:	4b04      	ldr	r3, [pc, #16]	; (8025cdc <rtc_adjustTime+0x48>)
 8025cca:	2201      	movs	r2, #1
 8025ccc:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 8025cce:	4b05      	ldr	r3, [pc, #20]	; (8025ce4 <rtc_adjustTime+0x50>)
 8025cd0:	687a      	ldr	r2, [r7, #4]
 8025cd2:	601a      	str	r2, [r3, #0]
#endif
}
 8025cd4:	46c0      	nop			; (mov r8, r8)
 8025cd6:	46bd      	mov	sp, r7
 8025cd8:	b003      	add	sp, #12
 8025cda:	bd90      	pop	{r4, r7, pc}
 8025cdc:	20001f98 	.word	0x20001f98
 8025ce0:	20002438 	.word	0x20002438
 8025ce4:	20002430 	.word	0x20002430

08025ce8 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 8025ce8:	b580      	push	{r7, lr}
 8025cea:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 8025cec:	23fa      	movs	r3, #250	; 0xfa
 8025cee:	009b      	lsls	r3, r3, #2
#endif
}
 8025cf0:	0018      	movs	r0, r3
 8025cf2:	46bd      	mov	sp, r7
 8025cf4:	bd80      	pop	{r7, pc}
	...

08025cf8 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 8025cf8:	b580      	push	{r7, lr}
 8025cfa:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 8025cfc:	4b10      	ldr	r3, [pc, #64]	; (8025d40 <HAL_IncTick+0x48>)
 8025cfe:	781b      	ldrb	r3, [r3, #0]
 8025d00:	2b00      	cmp	r3, #0
 8025d02:	d011      	beq.n	8025d28 <HAL_IncTick+0x30>
 8025d04:	4b0f      	ldr	r3, [pc, #60]	; (8025d44 <HAL_IncTick+0x4c>)
 8025d06:	681a      	ldr	r2, [r3, #0]
 8025d08:	0013      	movs	r3, r2
 8025d0a:	015b      	lsls	r3, r3, #5
 8025d0c:	1a9b      	subs	r3, r3, r2
 8025d0e:	009b      	lsls	r3, r3, #2
 8025d10:	189b      	adds	r3, r3, r2
 8025d12:	009b      	lsls	r3, r3, #2
 8025d14:	001a      	movs	r2, r3
 8025d16:	23fa      	movs	r3, #250	; 0xfa
 8025d18:	0099      	lsls	r1, r3, #2
 8025d1a:	0010      	movs	r0, r2
 8025d1c:	f7da f9fc 	bl	8000118 <__udivsi3>
 8025d20:	0003      	movs	r3, r0
 8025d22:	0018      	movs	r0, r3
 8025d24:	f7fe f852 	bl	8023dcc <itsdk_time_add_us>
	uwTick++;
 8025d28:	4b07      	ldr	r3, [pc, #28]	; (8025d48 <HAL_IncTick+0x50>)
 8025d2a:	681b      	ldr	r3, [r3, #0]
 8025d2c:	1c5a      	adds	r2, r3, #1
 8025d2e:	4b06      	ldr	r3, [pc, #24]	; (8025d48 <HAL_IncTick+0x50>)
 8025d30:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 8025d32:	4b06      	ldr	r3, [pc, #24]	; (8025d4c <HAL_IncTick+0x54>)
 8025d34:	2202      	movs	r2, #2
 8025d36:	701a      	strb	r2, [r3, #0]
}
 8025d38:	46c0      	nop			; (mov r8, r8)
 8025d3a:	46bd      	mov	sp, r7
 8025d3c:	bd80      	pop	{r7, pc}
 8025d3e:	46c0      	nop			; (mov r8, r8)
 8025d40:	20000059 	.word	0x20000059
 8025d44:	2000005c 	.word	0x2000005c
 8025d48:	20002234 	.word	0x20002234
 8025d4c:	20000058 	.word	0x20000058

08025d50 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 8025d50:	b590      	push	{r4, r7, lr}
 8025d52:	b089      	sub	sp, #36	; 0x24
 8025d54:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 8025d56:	f7fe f8d3 	bl	8023f00 <itsdk_time_get_us>
 8025d5a:	22fa      	movs	r2, #250	; 0xfa
 8025d5c:	0092      	lsls	r2, r2, #2
 8025d5e:	2300      	movs	r3, #0
 8025d60:	f7da fbec 	bl	800053c <__aeabi_uldivmod>
 8025d64:	0003      	movs	r3, r0
 8025d66:	000c      	movs	r4, r1
 8025d68:	613b      	str	r3, [r7, #16]
 8025d6a:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 8025d6c:	2000      	movs	r0, #0
 8025d6e:	f7ff fe2b 	bl	80259c8 <rtc_getTimestampMsRaw>
 8025d72:	0003      	movs	r3, r0
 8025d74:	000c      	movs	r4, r1
 8025d76:	60bb      	str	r3, [r7, #8]
 8025d78:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 8025d7a:	46c0      	nop			; (mov r8, r8)
 8025d7c:	2000      	movs	r0, #0
 8025d7e:	f7ff fe23 	bl	80259c8 <rtc_getTimestampMsRaw>
 8025d82:	000a      	movs	r2, r1
 8025d84:	0001      	movs	r1, r0
 8025d86:	68bb      	ldr	r3, [r7, #8]
 8025d88:	68fc      	ldr	r4, [r7, #12]
 8025d8a:	1ac9      	subs	r1, r1, r3
 8025d8c:	41a2      	sbcs	r2, r4
 8025d8e:	000b      	movs	r3, r1
 8025d90:	0014      	movs	r4, r2
 8025d92:	2c00      	cmp	r4, #0
 8025d94:	d103      	bne.n	8025d9e <systick_adjustTime+0x4e>
 8025d96:	d1f1      	bne.n	8025d7c <systick_adjustTime+0x2c>
 8025d98:	2bc7      	cmp	r3, #199	; 0xc7
 8025d9a:	d800      	bhi.n	8025d9e <systick_adjustTime+0x4e>
 8025d9c:	e7ee      	b.n	8025d7c <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 8025d9e:	f7fe f8af 	bl	8023f00 <itsdk_time_get_us>
 8025da2:	22fa      	movs	r2, #250	; 0xfa
 8025da4:	0092      	lsls	r2, r2, #2
 8025da6:	2300      	movs	r3, #0
 8025da8:	f7da fbc8 	bl	800053c <__aeabi_uldivmod>
 8025dac:	0003      	movs	r3, r0
 8025dae:	000c      	movs	r4, r1
 8025db0:	603b      	str	r3, [r7, #0]
 8025db2:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 8025db4:	6839      	ldr	r1, [r7, #0]
 8025db6:	687a      	ldr	r2, [r7, #4]
 8025db8:	693b      	ldr	r3, [r7, #16]
 8025dba:	697c      	ldr	r4, [r7, #20]
 8025dbc:	1ac9      	subs	r1, r1, r3
 8025dbe:	41a2      	sbcs	r2, r4
 8025dc0:	000b      	movs	r3, r1
 8025dc2:	0014      	movs	r4, r2
 8025dc4:	001a      	movs	r2, r3
 8025dc6:	0023      	movs	r3, r4
 8025dc8:	4818      	ldr	r0, [pc, #96]	; (8025e2c <systick_adjustTime+0xdc>)
 8025dca:	2100      	movs	r1, #0
 8025dcc:	f7da fbb6 	bl	800053c <__aeabi_uldivmod>
 8025dd0:	0003      	movs	r3, r0
 8025dd2:	000c      	movs	r4, r1
 8025dd4:	61bb      	str	r3, [r7, #24]
 8025dd6:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 8025dd8:	69fb      	ldr	r3, [r7, #28]
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	d111      	bne.n	8025e02 <systick_adjustTime+0xb2>
 8025dde:	69fb      	ldr	r3, [r7, #28]
 8025de0:	2b00      	cmp	r3, #0
 8025de2:	d104      	bne.n	8025dee <systick_adjustTime+0x9e>
 8025de4:	69ba      	ldr	r2, [r7, #24]
 8025de6:	23af      	movs	r3, #175	; 0xaf
 8025de8:	00db      	lsls	r3, r3, #3
 8025dea:	429a      	cmp	r2, r3
 8025dec:	d809      	bhi.n	8025e02 <systick_adjustTime+0xb2>
 8025dee:	69fb      	ldr	r3, [r7, #28]
 8025df0:	2b00      	cmp	r3, #0
 8025df2:	d113      	bne.n	8025e1c <systick_adjustTime+0xcc>
 8025df4:	69fb      	ldr	r3, [r7, #28]
 8025df6:	2b00      	cmp	r3, #0
 8025df8:	d103      	bne.n	8025e02 <systick_adjustTime+0xb2>
 8025dfa:	69bb      	ldr	r3, [r7, #24]
 8025dfc:	4a0c      	ldr	r2, [pc, #48]	; (8025e30 <systick_adjustTime+0xe0>)
 8025dfe:	4293      	cmp	r3, r2
 8025e00:	d80c      	bhi.n	8025e1c <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 8025e02:	69bb      	ldr	r3, [r7, #24]
 8025e04:	69fc      	ldr	r4, [r7, #28]
 8025e06:	b29b      	uxth	r3, r3
 8025e08:	4a0a      	ldr	r2, [pc, #40]	; (8025e34 <systick_adjustTime+0xe4>)
 8025e0a:	0019      	movs	r1, r3
 8025e0c:	0010      	movs	r0, r2
 8025e0e:	f7fd f807 	bl	8022e20 <itsdk_error_report>
		ratio = 1000;
 8025e12:	23fa      	movs	r3, #250	; 0xfa
 8025e14:	009b      	lsls	r3, r3, #2
 8025e16:	2400      	movs	r4, #0
 8025e18:	61bb      	str	r3, [r7, #24]
 8025e1a:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 8025e1c:	69ba      	ldr	r2, [r7, #24]
 8025e1e:	4b06      	ldr	r3, [pc, #24]	; (8025e38 <systick_adjustTime+0xe8>)
 8025e20:	601a      	str	r2, [r3, #0]
#endif
}
 8025e22:	46c0      	nop			; (mov r8, r8)
 8025e24:	46bd      	mov	sp, r7
 8025e26:	b009      	add	sp, #36	; 0x24
 8025e28:	bd90      	pop	{r4, r7, pc}
 8025e2a:	46c0      	nop			; (mov r8, r8)
 8025e2c:	00030d40 	.word	0x00030d40
 8025e30:	00000257 	.word	0x00000257
 8025e34:	90000061 	.word	0x90000061
 8025e38:	2000005c 	.word	0x2000005c

08025e3c <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 8025e3c:	b590      	push	{r4, r7, lr}
 8025e3e:	b087      	sub	sp, #28
 8025e40:	af02      	add	r7, sp, #8
 8025e42:	60f8      	str	r0, [r7, #12]
 8025e44:	60b9      	str	r1, [r7, #8]
 8025e46:	607a      	str	r2, [r7, #4]
 8025e48:	001a      	movs	r2, r3
 8025e4a:	1cfb      	adds	r3, r7, #3
 8025e4c:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 8025e4e:	1cfb      	adds	r3, r7, #3
 8025e50:	781b      	ldrb	r3, [r3, #0]
 8025e52:	b29c      	uxth	r4, r3
 8025e54:	687a      	ldr	r2, [r7, #4]
 8025e56:	68b9      	ldr	r1, [r7, #8]
 8025e58:	68f8      	ldr	r0, [r7, #12]
 8025e5a:	2364      	movs	r3, #100	; 0x64
 8025e5c:	9300      	str	r3, [sp, #0]
 8025e5e:	0023      	movs	r3, r4
 8025e60:	f7e0 fac2 	bl	80063e8 <HAL_SPI_TransmitReceive>
 8025e64:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 8025e66:	0018      	movs	r0, r3
 8025e68:	46bd      	mov	sp, r7
 8025e6a:	b005      	add	sp, #20
 8025e6c:	bd90      	pop	{r4, r7, pc}

08025e6e <bzero>:
 8025e6e:	b510      	push	{r4, lr}
 8025e70:	000a      	movs	r2, r1
 8025e72:	2100      	movs	r1, #0
 8025e74:	f000 f848 	bl	8025f08 <memset>
 8025e78:	bd10      	pop	{r4, pc}
	...

08025e7c <__errno>:
 8025e7c:	4b01      	ldr	r3, [pc, #4]	; (8025e84 <__errno+0x8>)
 8025e7e:	6818      	ldr	r0, [r3, #0]
 8025e80:	4770      	bx	lr
 8025e82:	46c0      	nop			; (mov r8, r8)
 8025e84:	20000060 	.word	0x20000060

08025e88 <__libc_init_array>:
 8025e88:	b570      	push	{r4, r5, r6, lr}
 8025e8a:	2600      	movs	r6, #0
 8025e8c:	4d0c      	ldr	r5, [pc, #48]	; (8025ec0 <__libc_init_array+0x38>)
 8025e8e:	4c0d      	ldr	r4, [pc, #52]	; (8025ec4 <__libc_init_array+0x3c>)
 8025e90:	1b64      	subs	r4, r4, r5
 8025e92:	10a4      	asrs	r4, r4, #2
 8025e94:	42a6      	cmp	r6, r4
 8025e96:	d109      	bne.n	8025eac <__libc_init_array+0x24>
 8025e98:	2600      	movs	r6, #0
 8025e9a:	f001 faaf 	bl	80273fc <_init>
 8025e9e:	4d0a      	ldr	r5, [pc, #40]	; (8025ec8 <__libc_init_array+0x40>)
 8025ea0:	4c0a      	ldr	r4, [pc, #40]	; (8025ecc <__libc_init_array+0x44>)
 8025ea2:	1b64      	subs	r4, r4, r5
 8025ea4:	10a4      	asrs	r4, r4, #2
 8025ea6:	42a6      	cmp	r6, r4
 8025ea8:	d105      	bne.n	8025eb6 <__libc_init_array+0x2e>
 8025eaa:	bd70      	pop	{r4, r5, r6, pc}
 8025eac:	00b3      	lsls	r3, r6, #2
 8025eae:	58eb      	ldr	r3, [r5, r3]
 8025eb0:	4798      	blx	r3
 8025eb2:	3601      	adds	r6, #1
 8025eb4:	e7ee      	b.n	8025e94 <__libc_init_array+0xc>
 8025eb6:	00b3      	lsls	r3, r6, #2
 8025eb8:	58eb      	ldr	r3, [r5, r3]
 8025eba:	4798      	blx	r3
 8025ebc:	3601      	adds	r6, #1
 8025ebe:	e7f2      	b.n	8025ea6 <__libc_init_array+0x1e>
 8025ec0:	08029e4c 	.word	0x08029e4c
 8025ec4:	08029e4c 	.word	0x08029e4c
 8025ec8:	08029e4c 	.word	0x08029e4c
 8025ecc:	08029e50 	.word	0x08029e50

08025ed0 <memcpy>:
 8025ed0:	2300      	movs	r3, #0
 8025ed2:	b510      	push	{r4, lr}
 8025ed4:	429a      	cmp	r2, r3
 8025ed6:	d100      	bne.n	8025eda <memcpy+0xa>
 8025ed8:	bd10      	pop	{r4, pc}
 8025eda:	5ccc      	ldrb	r4, [r1, r3]
 8025edc:	54c4      	strb	r4, [r0, r3]
 8025ede:	3301      	adds	r3, #1
 8025ee0:	e7f8      	b.n	8025ed4 <memcpy+0x4>

08025ee2 <memmove>:
 8025ee2:	b510      	push	{r4, lr}
 8025ee4:	4288      	cmp	r0, r1
 8025ee6:	d902      	bls.n	8025eee <memmove+0xc>
 8025ee8:	188b      	adds	r3, r1, r2
 8025eea:	4298      	cmp	r0, r3
 8025eec:	d303      	bcc.n	8025ef6 <memmove+0x14>
 8025eee:	2300      	movs	r3, #0
 8025ef0:	e007      	b.n	8025f02 <memmove+0x20>
 8025ef2:	5c8b      	ldrb	r3, [r1, r2]
 8025ef4:	5483      	strb	r3, [r0, r2]
 8025ef6:	3a01      	subs	r2, #1
 8025ef8:	d2fb      	bcs.n	8025ef2 <memmove+0x10>
 8025efa:	bd10      	pop	{r4, pc}
 8025efc:	5ccc      	ldrb	r4, [r1, r3]
 8025efe:	54c4      	strb	r4, [r0, r3]
 8025f00:	3301      	adds	r3, #1
 8025f02:	429a      	cmp	r2, r3
 8025f04:	d1fa      	bne.n	8025efc <memmove+0x1a>
 8025f06:	e7f8      	b.n	8025efa <memmove+0x18>

08025f08 <memset>:
 8025f08:	0003      	movs	r3, r0
 8025f0a:	1812      	adds	r2, r2, r0
 8025f0c:	4293      	cmp	r3, r2
 8025f0e:	d100      	bne.n	8025f12 <memset+0xa>
 8025f10:	4770      	bx	lr
 8025f12:	7019      	strb	r1, [r3, #0]
 8025f14:	3301      	adds	r3, #1
 8025f16:	e7f9      	b.n	8025f0c <memset+0x4>

08025f18 <siscanf>:
 8025f18:	b40e      	push	{r1, r2, r3}
 8025f1a:	2381      	movs	r3, #129	; 0x81
 8025f1c:	b570      	push	{r4, r5, r6, lr}
 8025f1e:	b09d      	sub	sp, #116	; 0x74
 8025f20:	ac02      	add	r4, sp, #8
 8025f22:	ad21      	add	r5, sp, #132	; 0x84
 8025f24:	009b      	lsls	r3, r3, #2
 8025f26:	cd40      	ldmia	r5!, {r6}
 8025f28:	81a3      	strh	r3, [r4, #12]
 8025f2a:	9002      	str	r0, [sp, #8]
 8025f2c:	9006      	str	r0, [sp, #24]
 8025f2e:	f7da f8eb 	bl	8000108 <strlen>
 8025f32:	4b0b      	ldr	r3, [pc, #44]	; (8025f60 <siscanf+0x48>)
 8025f34:	6060      	str	r0, [r4, #4]
 8025f36:	6263      	str	r3, [r4, #36]	; 0x24
 8025f38:	2300      	movs	r3, #0
 8025f3a:	6160      	str	r0, [r4, #20]
 8025f3c:	4809      	ldr	r0, [pc, #36]	; (8025f64 <siscanf+0x4c>)
 8025f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8025f40:	64a3      	str	r3, [r4, #72]	; 0x48
 8025f42:	3b01      	subs	r3, #1
 8025f44:	81e3      	strh	r3, [r4, #14]
 8025f46:	0032      	movs	r2, r6
 8025f48:	002b      	movs	r3, r5
 8025f4a:	0021      	movs	r1, r4
 8025f4c:	6800      	ldr	r0, [r0, #0]
 8025f4e:	9501      	str	r5, [sp, #4]
 8025f50:	f000 fa00 	bl	8026354 <__ssvfiscanf_r>
 8025f54:	b01d      	add	sp, #116	; 0x74
 8025f56:	bc70      	pop	{r4, r5, r6}
 8025f58:	bc08      	pop	{r3}
 8025f5a:	b003      	add	sp, #12
 8025f5c:	4718      	bx	r3
 8025f5e:	46c0      	nop			; (mov r8, r8)
 8025f60:	08025f69 	.word	0x08025f69
 8025f64:	20000060 	.word	0x20000060

08025f68 <__seofread>:
 8025f68:	2000      	movs	r0, #0
 8025f6a:	4770      	bx	lr

08025f6c <_vsniprintf_r>:
 8025f6c:	b530      	push	{r4, r5, lr}
 8025f6e:	0014      	movs	r4, r2
 8025f70:	b09b      	sub	sp, #108	; 0x6c
 8025f72:	0005      	movs	r5, r0
 8025f74:	001a      	movs	r2, r3
 8025f76:	2c00      	cmp	r4, #0
 8025f78:	da05      	bge.n	8025f86 <_vsniprintf_r+0x1a>
 8025f7a:	238b      	movs	r3, #139	; 0x8b
 8025f7c:	6003      	str	r3, [r0, #0]
 8025f7e:	2001      	movs	r0, #1
 8025f80:	4240      	negs	r0, r0
 8025f82:	b01b      	add	sp, #108	; 0x6c
 8025f84:	bd30      	pop	{r4, r5, pc}
 8025f86:	2382      	movs	r3, #130	; 0x82
 8025f88:	4668      	mov	r0, sp
 8025f8a:	009b      	lsls	r3, r3, #2
 8025f8c:	8183      	strh	r3, [r0, #12]
 8025f8e:	2300      	movs	r3, #0
 8025f90:	9100      	str	r1, [sp, #0]
 8025f92:	9104      	str	r1, [sp, #16]
 8025f94:	429c      	cmp	r4, r3
 8025f96:	d000      	beq.n	8025f9a <_vsniprintf_r+0x2e>
 8025f98:	1e63      	subs	r3, r4, #1
 8025f9a:	9302      	str	r3, [sp, #8]
 8025f9c:	9305      	str	r3, [sp, #20]
 8025f9e:	2301      	movs	r3, #1
 8025fa0:	4669      	mov	r1, sp
 8025fa2:	425b      	negs	r3, r3
 8025fa4:	81cb      	strh	r3, [r1, #14]
 8025fa6:	0028      	movs	r0, r5
 8025fa8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025faa:	f000 f879 	bl	80260a0 <_svfiprintf_r>
 8025fae:	1c43      	adds	r3, r0, #1
 8025fb0:	da01      	bge.n	8025fb6 <_vsniprintf_r+0x4a>
 8025fb2:	238b      	movs	r3, #139	; 0x8b
 8025fb4:	602b      	str	r3, [r5, #0]
 8025fb6:	2c00      	cmp	r4, #0
 8025fb8:	d0e3      	beq.n	8025f82 <_vsniprintf_r+0x16>
 8025fba:	2300      	movs	r3, #0
 8025fbc:	9a00      	ldr	r2, [sp, #0]
 8025fbe:	7013      	strb	r3, [r2, #0]
 8025fc0:	e7df      	b.n	8025f82 <_vsniprintf_r+0x16>
	...

08025fc4 <vsniprintf>:
 8025fc4:	b507      	push	{r0, r1, r2, lr}
 8025fc6:	9300      	str	r3, [sp, #0]
 8025fc8:	0013      	movs	r3, r2
 8025fca:	000a      	movs	r2, r1
 8025fcc:	0001      	movs	r1, r0
 8025fce:	4802      	ldr	r0, [pc, #8]	; (8025fd8 <vsniprintf+0x14>)
 8025fd0:	6800      	ldr	r0, [r0, #0]
 8025fd2:	f7ff ffcb 	bl	8025f6c <_vsniprintf_r>
 8025fd6:	bd0e      	pop	{r1, r2, r3, pc}
 8025fd8:	20000060 	.word	0x20000060

08025fdc <__ssputs_r>:
 8025fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025fde:	688e      	ldr	r6, [r1, #8]
 8025fe0:	b085      	sub	sp, #20
 8025fe2:	0007      	movs	r7, r0
 8025fe4:	000c      	movs	r4, r1
 8025fe6:	9203      	str	r2, [sp, #12]
 8025fe8:	9301      	str	r3, [sp, #4]
 8025fea:	429e      	cmp	r6, r3
 8025fec:	d83c      	bhi.n	8026068 <__ssputs_r+0x8c>
 8025fee:	2390      	movs	r3, #144	; 0x90
 8025ff0:	898a      	ldrh	r2, [r1, #12]
 8025ff2:	00db      	lsls	r3, r3, #3
 8025ff4:	421a      	tst	r2, r3
 8025ff6:	d034      	beq.n	8026062 <__ssputs_r+0x86>
 8025ff8:	2503      	movs	r5, #3
 8025ffa:	6909      	ldr	r1, [r1, #16]
 8025ffc:	6823      	ldr	r3, [r4, #0]
 8025ffe:	1a5b      	subs	r3, r3, r1
 8026000:	9302      	str	r3, [sp, #8]
 8026002:	6963      	ldr	r3, [r4, #20]
 8026004:	9802      	ldr	r0, [sp, #8]
 8026006:	435d      	muls	r5, r3
 8026008:	0feb      	lsrs	r3, r5, #31
 802600a:	195d      	adds	r5, r3, r5
 802600c:	9b01      	ldr	r3, [sp, #4]
 802600e:	106d      	asrs	r5, r5, #1
 8026010:	3301      	adds	r3, #1
 8026012:	181b      	adds	r3, r3, r0
 8026014:	42ab      	cmp	r3, r5
 8026016:	d900      	bls.n	802601a <__ssputs_r+0x3e>
 8026018:	001d      	movs	r5, r3
 802601a:	0553      	lsls	r3, r2, #21
 802601c:	d532      	bpl.n	8026084 <__ssputs_r+0xa8>
 802601e:	0029      	movs	r1, r5
 8026020:	0038      	movs	r0, r7
 8026022:	f000 fff1 	bl	8027008 <_malloc_r>
 8026026:	1e06      	subs	r6, r0, #0
 8026028:	d109      	bne.n	802603e <__ssputs_r+0x62>
 802602a:	230c      	movs	r3, #12
 802602c:	603b      	str	r3, [r7, #0]
 802602e:	2340      	movs	r3, #64	; 0x40
 8026030:	2001      	movs	r0, #1
 8026032:	89a2      	ldrh	r2, [r4, #12]
 8026034:	4240      	negs	r0, r0
 8026036:	4313      	orrs	r3, r2
 8026038:	81a3      	strh	r3, [r4, #12]
 802603a:	b005      	add	sp, #20
 802603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802603e:	9a02      	ldr	r2, [sp, #8]
 8026040:	6921      	ldr	r1, [r4, #16]
 8026042:	f7ff ff45 	bl	8025ed0 <memcpy>
 8026046:	89a3      	ldrh	r3, [r4, #12]
 8026048:	4a14      	ldr	r2, [pc, #80]	; (802609c <__ssputs_r+0xc0>)
 802604a:	401a      	ands	r2, r3
 802604c:	2380      	movs	r3, #128	; 0x80
 802604e:	4313      	orrs	r3, r2
 8026050:	81a3      	strh	r3, [r4, #12]
 8026052:	9b02      	ldr	r3, [sp, #8]
 8026054:	6126      	str	r6, [r4, #16]
 8026056:	18f6      	adds	r6, r6, r3
 8026058:	6026      	str	r6, [r4, #0]
 802605a:	6165      	str	r5, [r4, #20]
 802605c:	9e01      	ldr	r6, [sp, #4]
 802605e:	1aed      	subs	r5, r5, r3
 8026060:	60a5      	str	r5, [r4, #8]
 8026062:	9b01      	ldr	r3, [sp, #4]
 8026064:	429e      	cmp	r6, r3
 8026066:	d900      	bls.n	802606a <__ssputs_r+0x8e>
 8026068:	9e01      	ldr	r6, [sp, #4]
 802606a:	0032      	movs	r2, r6
 802606c:	9903      	ldr	r1, [sp, #12]
 802606e:	6820      	ldr	r0, [r4, #0]
 8026070:	f7ff ff37 	bl	8025ee2 <memmove>
 8026074:	68a3      	ldr	r3, [r4, #8]
 8026076:	2000      	movs	r0, #0
 8026078:	1b9b      	subs	r3, r3, r6
 802607a:	60a3      	str	r3, [r4, #8]
 802607c:	6823      	ldr	r3, [r4, #0]
 802607e:	199e      	adds	r6, r3, r6
 8026080:	6026      	str	r6, [r4, #0]
 8026082:	e7da      	b.n	802603a <__ssputs_r+0x5e>
 8026084:	002a      	movs	r2, r5
 8026086:	0038      	movs	r0, r7
 8026088:	f001 f81c 	bl	80270c4 <_realloc_r>
 802608c:	1e06      	subs	r6, r0, #0
 802608e:	d1e0      	bne.n	8026052 <__ssputs_r+0x76>
 8026090:	6921      	ldr	r1, [r4, #16]
 8026092:	0038      	movs	r0, r7
 8026094:	f000 ff6e 	bl	8026f74 <_free_r>
 8026098:	e7c7      	b.n	802602a <__ssputs_r+0x4e>
 802609a:	46c0      	nop			; (mov r8, r8)
 802609c:	fffffb7f 	.word	0xfffffb7f

080260a0 <_svfiprintf_r>:
 80260a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260a2:	b0a1      	sub	sp, #132	; 0x84
 80260a4:	9003      	str	r0, [sp, #12]
 80260a6:	001d      	movs	r5, r3
 80260a8:	898b      	ldrh	r3, [r1, #12]
 80260aa:	000f      	movs	r7, r1
 80260ac:	0016      	movs	r6, r2
 80260ae:	061b      	lsls	r3, r3, #24
 80260b0:	d511      	bpl.n	80260d6 <_svfiprintf_r+0x36>
 80260b2:	690b      	ldr	r3, [r1, #16]
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	d10e      	bne.n	80260d6 <_svfiprintf_r+0x36>
 80260b8:	2140      	movs	r1, #64	; 0x40
 80260ba:	f000 ffa5 	bl	8027008 <_malloc_r>
 80260be:	6038      	str	r0, [r7, #0]
 80260c0:	6138      	str	r0, [r7, #16]
 80260c2:	2800      	cmp	r0, #0
 80260c4:	d105      	bne.n	80260d2 <_svfiprintf_r+0x32>
 80260c6:	230c      	movs	r3, #12
 80260c8:	9a03      	ldr	r2, [sp, #12]
 80260ca:	3801      	subs	r0, #1
 80260cc:	6013      	str	r3, [r2, #0]
 80260ce:	b021      	add	sp, #132	; 0x84
 80260d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260d2:	2340      	movs	r3, #64	; 0x40
 80260d4:	617b      	str	r3, [r7, #20]
 80260d6:	2300      	movs	r3, #0
 80260d8:	ac08      	add	r4, sp, #32
 80260da:	6163      	str	r3, [r4, #20]
 80260dc:	3320      	adds	r3, #32
 80260de:	7663      	strb	r3, [r4, #25]
 80260e0:	3310      	adds	r3, #16
 80260e2:	76a3      	strb	r3, [r4, #26]
 80260e4:	9507      	str	r5, [sp, #28]
 80260e6:	0035      	movs	r5, r6
 80260e8:	782b      	ldrb	r3, [r5, #0]
 80260ea:	2b00      	cmp	r3, #0
 80260ec:	d001      	beq.n	80260f2 <_svfiprintf_r+0x52>
 80260ee:	2b25      	cmp	r3, #37	; 0x25
 80260f0:	d146      	bne.n	8026180 <_svfiprintf_r+0xe0>
 80260f2:	1bab      	subs	r3, r5, r6
 80260f4:	9305      	str	r3, [sp, #20]
 80260f6:	d00c      	beq.n	8026112 <_svfiprintf_r+0x72>
 80260f8:	0032      	movs	r2, r6
 80260fa:	0039      	movs	r1, r7
 80260fc:	9803      	ldr	r0, [sp, #12]
 80260fe:	f7ff ff6d 	bl	8025fdc <__ssputs_r>
 8026102:	1c43      	adds	r3, r0, #1
 8026104:	d100      	bne.n	8026108 <_svfiprintf_r+0x68>
 8026106:	e0ae      	b.n	8026266 <_svfiprintf_r+0x1c6>
 8026108:	6962      	ldr	r2, [r4, #20]
 802610a:	9b05      	ldr	r3, [sp, #20]
 802610c:	4694      	mov	ip, r2
 802610e:	4463      	add	r3, ip
 8026110:	6163      	str	r3, [r4, #20]
 8026112:	782b      	ldrb	r3, [r5, #0]
 8026114:	2b00      	cmp	r3, #0
 8026116:	d100      	bne.n	802611a <_svfiprintf_r+0x7a>
 8026118:	e0a5      	b.n	8026266 <_svfiprintf_r+0x1c6>
 802611a:	2201      	movs	r2, #1
 802611c:	2300      	movs	r3, #0
 802611e:	4252      	negs	r2, r2
 8026120:	6062      	str	r2, [r4, #4]
 8026122:	a904      	add	r1, sp, #16
 8026124:	3254      	adds	r2, #84	; 0x54
 8026126:	1852      	adds	r2, r2, r1
 8026128:	1c6e      	adds	r6, r5, #1
 802612a:	6023      	str	r3, [r4, #0]
 802612c:	60e3      	str	r3, [r4, #12]
 802612e:	60a3      	str	r3, [r4, #8]
 8026130:	7013      	strb	r3, [r2, #0]
 8026132:	65a3      	str	r3, [r4, #88]	; 0x58
 8026134:	7831      	ldrb	r1, [r6, #0]
 8026136:	2205      	movs	r2, #5
 8026138:	4853      	ldr	r0, [pc, #332]	; (8026288 <_svfiprintf_r+0x1e8>)
 802613a:	f000 ff0f 	bl	8026f5c <memchr>
 802613e:	1c75      	adds	r5, r6, #1
 8026140:	2800      	cmp	r0, #0
 8026142:	d11f      	bne.n	8026184 <_svfiprintf_r+0xe4>
 8026144:	6822      	ldr	r2, [r4, #0]
 8026146:	06d3      	lsls	r3, r2, #27
 8026148:	d504      	bpl.n	8026154 <_svfiprintf_r+0xb4>
 802614a:	2353      	movs	r3, #83	; 0x53
 802614c:	a904      	add	r1, sp, #16
 802614e:	185b      	adds	r3, r3, r1
 8026150:	2120      	movs	r1, #32
 8026152:	7019      	strb	r1, [r3, #0]
 8026154:	0713      	lsls	r3, r2, #28
 8026156:	d504      	bpl.n	8026162 <_svfiprintf_r+0xc2>
 8026158:	2353      	movs	r3, #83	; 0x53
 802615a:	a904      	add	r1, sp, #16
 802615c:	185b      	adds	r3, r3, r1
 802615e:	212b      	movs	r1, #43	; 0x2b
 8026160:	7019      	strb	r1, [r3, #0]
 8026162:	7833      	ldrb	r3, [r6, #0]
 8026164:	2b2a      	cmp	r3, #42	; 0x2a
 8026166:	d016      	beq.n	8026196 <_svfiprintf_r+0xf6>
 8026168:	0035      	movs	r5, r6
 802616a:	2100      	movs	r1, #0
 802616c:	200a      	movs	r0, #10
 802616e:	68e3      	ldr	r3, [r4, #12]
 8026170:	782a      	ldrb	r2, [r5, #0]
 8026172:	1c6e      	adds	r6, r5, #1
 8026174:	3a30      	subs	r2, #48	; 0x30
 8026176:	2a09      	cmp	r2, #9
 8026178:	d94e      	bls.n	8026218 <_svfiprintf_r+0x178>
 802617a:	2900      	cmp	r1, #0
 802617c:	d018      	beq.n	80261b0 <_svfiprintf_r+0x110>
 802617e:	e010      	b.n	80261a2 <_svfiprintf_r+0x102>
 8026180:	3501      	adds	r5, #1
 8026182:	e7b1      	b.n	80260e8 <_svfiprintf_r+0x48>
 8026184:	4b40      	ldr	r3, [pc, #256]	; (8026288 <_svfiprintf_r+0x1e8>)
 8026186:	6822      	ldr	r2, [r4, #0]
 8026188:	1ac0      	subs	r0, r0, r3
 802618a:	2301      	movs	r3, #1
 802618c:	4083      	lsls	r3, r0
 802618e:	4313      	orrs	r3, r2
 8026190:	6023      	str	r3, [r4, #0]
 8026192:	002e      	movs	r6, r5
 8026194:	e7ce      	b.n	8026134 <_svfiprintf_r+0x94>
 8026196:	9b07      	ldr	r3, [sp, #28]
 8026198:	1d19      	adds	r1, r3, #4
 802619a:	681b      	ldr	r3, [r3, #0]
 802619c:	9107      	str	r1, [sp, #28]
 802619e:	2b00      	cmp	r3, #0
 80261a0:	db01      	blt.n	80261a6 <_svfiprintf_r+0x106>
 80261a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80261a4:	e004      	b.n	80261b0 <_svfiprintf_r+0x110>
 80261a6:	425b      	negs	r3, r3
 80261a8:	60e3      	str	r3, [r4, #12]
 80261aa:	2302      	movs	r3, #2
 80261ac:	4313      	orrs	r3, r2
 80261ae:	6023      	str	r3, [r4, #0]
 80261b0:	782b      	ldrb	r3, [r5, #0]
 80261b2:	2b2e      	cmp	r3, #46	; 0x2e
 80261b4:	d10a      	bne.n	80261cc <_svfiprintf_r+0x12c>
 80261b6:	786b      	ldrb	r3, [r5, #1]
 80261b8:	2b2a      	cmp	r3, #42	; 0x2a
 80261ba:	d135      	bne.n	8026228 <_svfiprintf_r+0x188>
 80261bc:	9b07      	ldr	r3, [sp, #28]
 80261be:	3502      	adds	r5, #2
 80261c0:	1d1a      	adds	r2, r3, #4
 80261c2:	681b      	ldr	r3, [r3, #0]
 80261c4:	9207      	str	r2, [sp, #28]
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	db2b      	blt.n	8026222 <_svfiprintf_r+0x182>
 80261ca:	9309      	str	r3, [sp, #36]	; 0x24
 80261cc:	4e2f      	ldr	r6, [pc, #188]	; (802628c <_svfiprintf_r+0x1ec>)
 80261ce:	7829      	ldrb	r1, [r5, #0]
 80261d0:	2203      	movs	r2, #3
 80261d2:	0030      	movs	r0, r6
 80261d4:	f000 fec2 	bl	8026f5c <memchr>
 80261d8:	2800      	cmp	r0, #0
 80261da:	d006      	beq.n	80261ea <_svfiprintf_r+0x14a>
 80261dc:	2340      	movs	r3, #64	; 0x40
 80261de:	1b80      	subs	r0, r0, r6
 80261e0:	4083      	lsls	r3, r0
 80261e2:	6822      	ldr	r2, [r4, #0]
 80261e4:	3501      	adds	r5, #1
 80261e6:	4313      	orrs	r3, r2
 80261e8:	6023      	str	r3, [r4, #0]
 80261ea:	7829      	ldrb	r1, [r5, #0]
 80261ec:	2206      	movs	r2, #6
 80261ee:	4828      	ldr	r0, [pc, #160]	; (8026290 <_svfiprintf_r+0x1f0>)
 80261f0:	1c6e      	adds	r6, r5, #1
 80261f2:	7621      	strb	r1, [r4, #24]
 80261f4:	f000 feb2 	bl	8026f5c <memchr>
 80261f8:	2800      	cmp	r0, #0
 80261fa:	d03c      	beq.n	8026276 <_svfiprintf_r+0x1d6>
 80261fc:	4b25      	ldr	r3, [pc, #148]	; (8026294 <_svfiprintf_r+0x1f4>)
 80261fe:	2b00      	cmp	r3, #0
 8026200:	d125      	bne.n	802624e <_svfiprintf_r+0x1ae>
 8026202:	2207      	movs	r2, #7
 8026204:	9b07      	ldr	r3, [sp, #28]
 8026206:	3307      	adds	r3, #7
 8026208:	4393      	bics	r3, r2
 802620a:	3308      	adds	r3, #8
 802620c:	9307      	str	r3, [sp, #28]
 802620e:	6963      	ldr	r3, [r4, #20]
 8026210:	9a04      	ldr	r2, [sp, #16]
 8026212:	189b      	adds	r3, r3, r2
 8026214:	6163      	str	r3, [r4, #20]
 8026216:	e766      	b.n	80260e6 <_svfiprintf_r+0x46>
 8026218:	4343      	muls	r3, r0
 802621a:	2101      	movs	r1, #1
 802621c:	189b      	adds	r3, r3, r2
 802621e:	0035      	movs	r5, r6
 8026220:	e7a6      	b.n	8026170 <_svfiprintf_r+0xd0>
 8026222:	2301      	movs	r3, #1
 8026224:	425b      	negs	r3, r3
 8026226:	e7d0      	b.n	80261ca <_svfiprintf_r+0x12a>
 8026228:	2300      	movs	r3, #0
 802622a:	200a      	movs	r0, #10
 802622c:	001a      	movs	r2, r3
 802622e:	3501      	adds	r5, #1
 8026230:	6063      	str	r3, [r4, #4]
 8026232:	7829      	ldrb	r1, [r5, #0]
 8026234:	1c6e      	adds	r6, r5, #1
 8026236:	3930      	subs	r1, #48	; 0x30
 8026238:	2909      	cmp	r1, #9
 802623a:	d903      	bls.n	8026244 <_svfiprintf_r+0x1a4>
 802623c:	2b00      	cmp	r3, #0
 802623e:	d0c5      	beq.n	80261cc <_svfiprintf_r+0x12c>
 8026240:	9209      	str	r2, [sp, #36]	; 0x24
 8026242:	e7c3      	b.n	80261cc <_svfiprintf_r+0x12c>
 8026244:	4342      	muls	r2, r0
 8026246:	2301      	movs	r3, #1
 8026248:	1852      	adds	r2, r2, r1
 802624a:	0035      	movs	r5, r6
 802624c:	e7f1      	b.n	8026232 <_svfiprintf_r+0x192>
 802624e:	ab07      	add	r3, sp, #28
 8026250:	9300      	str	r3, [sp, #0]
 8026252:	003a      	movs	r2, r7
 8026254:	4b10      	ldr	r3, [pc, #64]	; (8026298 <_svfiprintf_r+0x1f8>)
 8026256:	0021      	movs	r1, r4
 8026258:	9803      	ldr	r0, [sp, #12]
 802625a:	e000      	b.n	802625e <_svfiprintf_r+0x1be>
 802625c:	bf00      	nop
 802625e:	9004      	str	r0, [sp, #16]
 8026260:	9b04      	ldr	r3, [sp, #16]
 8026262:	3301      	adds	r3, #1
 8026264:	d1d3      	bne.n	802620e <_svfiprintf_r+0x16e>
 8026266:	89bb      	ldrh	r3, [r7, #12]
 8026268:	980d      	ldr	r0, [sp, #52]	; 0x34
 802626a:	065b      	lsls	r3, r3, #25
 802626c:	d400      	bmi.n	8026270 <_svfiprintf_r+0x1d0>
 802626e:	e72e      	b.n	80260ce <_svfiprintf_r+0x2e>
 8026270:	2001      	movs	r0, #1
 8026272:	4240      	negs	r0, r0
 8026274:	e72b      	b.n	80260ce <_svfiprintf_r+0x2e>
 8026276:	ab07      	add	r3, sp, #28
 8026278:	9300      	str	r3, [sp, #0]
 802627a:	003a      	movs	r2, r7
 802627c:	4b06      	ldr	r3, [pc, #24]	; (8026298 <_svfiprintf_r+0x1f8>)
 802627e:	0021      	movs	r1, r4
 8026280:	9803      	ldr	r0, [sp, #12]
 8026282:	f000 fa43 	bl	802670c <_printf_i>
 8026286:	e7ea      	b.n	802625e <_svfiprintf_r+0x1be>
 8026288:	08029c88 	.word	0x08029c88
 802628c:	08029c8e 	.word	0x08029c8e
 8026290:	08029c92 	.word	0x08029c92
 8026294:	00000000 	.word	0x00000000
 8026298:	08025fdd 	.word	0x08025fdd

0802629c <_sungetc_r>:
 802629c:	b570      	push	{r4, r5, r6, lr}
 802629e:	0014      	movs	r4, r2
 80262a0:	1c4b      	adds	r3, r1, #1
 80262a2:	d103      	bne.n	80262ac <_sungetc_r+0x10>
 80262a4:	2501      	movs	r5, #1
 80262a6:	426d      	negs	r5, r5
 80262a8:	0028      	movs	r0, r5
 80262aa:	bd70      	pop	{r4, r5, r6, pc}
 80262ac:	8993      	ldrh	r3, [r2, #12]
 80262ae:	2220      	movs	r2, #32
 80262b0:	4393      	bics	r3, r2
 80262b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80262b4:	81a3      	strh	r3, [r4, #12]
 80262b6:	b2ce      	uxtb	r6, r1
 80262b8:	b2cd      	uxtb	r5, r1
 80262ba:	6863      	ldr	r3, [r4, #4]
 80262bc:	2a00      	cmp	r2, #0
 80262be:	d010      	beq.n	80262e2 <_sungetc_r+0x46>
 80262c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80262c2:	429a      	cmp	r2, r3
 80262c4:	dd07      	ble.n	80262d6 <_sungetc_r+0x3a>
 80262c6:	6823      	ldr	r3, [r4, #0]
 80262c8:	3b01      	subs	r3, #1
 80262ca:	6023      	str	r3, [r4, #0]
 80262cc:	701e      	strb	r6, [r3, #0]
 80262ce:	6863      	ldr	r3, [r4, #4]
 80262d0:	3301      	adds	r3, #1
 80262d2:	6063      	str	r3, [r4, #4]
 80262d4:	e7e8      	b.n	80262a8 <_sungetc_r+0xc>
 80262d6:	0021      	movs	r1, r4
 80262d8:	f000 fdde 	bl	8026e98 <__submore>
 80262dc:	2800      	cmp	r0, #0
 80262de:	d0f2      	beq.n	80262c6 <_sungetc_r+0x2a>
 80262e0:	e7e0      	b.n	80262a4 <_sungetc_r+0x8>
 80262e2:	6921      	ldr	r1, [r4, #16]
 80262e4:	6822      	ldr	r2, [r4, #0]
 80262e6:	2900      	cmp	r1, #0
 80262e8:	d007      	beq.n	80262fa <_sungetc_r+0x5e>
 80262ea:	4291      	cmp	r1, r2
 80262ec:	d205      	bcs.n	80262fa <_sungetc_r+0x5e>
 80262ee:	1e51      	subs	r1, r2, #1
 80262f0:	7808      	ldrb	r0, [r1, #0]
 80262f2:	42a8      	cmp	r0, r5
 80262f4:	d101      	bne.n	80262fa <_sungetc_r+0x5e>
 80262f6:	6021      	str	r1, [r4, #0]
 80262f8:	e7ea      	b.n	80262d0 <_sungetc_r+0x34>
 80262fa:	6423      	str	r3, [r4, #64]	; 0x40
 80262fc:	0023      	movs	r3, r4
 80262fe:	3344      	adds	r3, #68	; 0x44
 8026300:	6363      	str	r3, [r4, #52]	; 0x34
 8026302:	2303      	movs	r3, #3
 8026304:	63a3      	str	r3, [r4, #56]	; 0x38
 8026306:	0023      	movs	r3, r4
 8026308:	3346      	adds	r3, #70	; 0x46
 802630a:	63e2      	str	r2, [r4, #60]	; 0x3c
 802630c:	701e      	strb	r6, [r3, #0]
 802630e:	6023      	str	r3, [r4, #0]
 8026310:	2301      	movs	r3, #1
 8026312:	e7de      	b.n	80262d2 <_sungetc_r+0x36>

08026314 <__ssrefill_r>:
 8026314:	b510      	push	{r4, lr}
 8026316:	000c      	movs	r4, r1
 8026318:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802631a:	2900      	cmp	r1, #0
 802631c:	d00e      	beq.n	802633c <__ssrefill_r+0x28>
 802631e:	0023      	movs	r3, r4
 8026320:	3344      	adds	r3, #68	; 0x44
 8026322:	4299      	cmp	r1, r3
 8026324:	d001      	beq.n	802632a <__ssrefill_r+0x16>
 8026326:	f000 fe25 	bl	8026f74 <_free_r>
 802632a:	2000      	movs	r0, #0
 802632c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802632e:	6360      	str	r0, [r4, #52]	; 0x34
 8026330:	6063      	str	r3, [r4, #4]
 8026332:	4283      	cmp	r3, r0
 8026334:	d002      	beq.n	802633c <__ssrefill_r+0x28>
 8026336:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026338:	6023      	str	r3, [r4, #0]
 802633a:	bd10      	pop	{r4, pc}
 802633c:	6923      	ldr	r3, [r4, #16]
 802633e:	2001      	movs	r0, #1
 8026340:	6023      	str	r3, [r4, #0]
 8026342:	2300      	movs	r3, #0
 8026344:	89a2      	ldrh	r2, [r4, #12]
 8026346:	6063      	str	r3, [r4, #4]
 8026348:	3320      	adds	r3, #32
 802634a:	4313      	orrs	r3, r2
 802634c:	81a3      	strh	r3, [r4, #12]
 802634e:	4240      	negs	r0, r0
 8026350:	e7f3      	b.n	802633a <__ssrefill_r+0x26>
	...

08026354 <__ssvfiscanf_r>:
 8026354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026356:	0017      	movs	r7, r2
 8026358:	2200      	movs	r2, #0
 802635a:	4cb0      	ldr	r4, [pc, #704]	; (802661c <__ssvfiscanf_r+0x2c8>)
 802635c:	25c0      	movs	r5, #192	; 0xc0
 802635e:	44a5      	add	sp, r4
 8026360:	9248      	str	r2, [sp, #288]	; 0x120
 8026362:	9249      	str	r2, [sp, #292]	; 0x124
 8026364:	aa05      	add	r2, sp, #20
 8026366:	924a      	str	r2, [sp, #296]	; 0x128
 8026368:	22be      	movs	r2, #190	; 0xbe
 802636a:	000c      	movs	r4, r1
 802636c:	49ac      	ldr	r1, [pc, #688]	; (8026620 <__ssvfiscanf_r+0x2cc>)
 802636e:	9000      	str	r0, [sp, #0]
 8026370:	0052      	lsls	r2, r2, #1
 8026372:	a845      	add	r0, sp, #276	; 0x114
 8026374:	5081      	str	r1, [r0, r2]
 8026376:	49ab      	ldr	r1, [pc, #684]	; (8026624 <__ssvfiscanf_r+0x2d0>)
 8026378:	006d      	lsls	r5, r5, #1
 802637a:	5141      	str	r1, [r0, r5]
 802637c:	9304      	str	r3, [sp, #16]
 802637e:	783b      	ldrb	r3, [r7, #0]
 8026380:	2b00      	cmp	r3, #0
 8026382:	d100      	bne.n	8026386 <__ssvfiscanf_r+0x32>
 8026384:	e148      	b.n	8026618 <__ssvfiscanf_r+0x2c4>
 8026386:	f000 fdc9 	bl	8026f1c <__locale_ctype_ptr>
 802638a:	2208      	movs	r2, #8
 802638c:	783b      	ldrb	r3, [r7, #0]
 802638e:	1c7e      	adds	r6, r7, #1
 8026390:	18c0      	adds	r0, r0, r3
 8026392:	9301      	str	r3, [sp, #4]
 8026394:	7843      	ldrb	r3, [r0, #1]
 8026396:	4013      	ands	r3, r2
 8026398:	d020      	beq.n	80263dc <__ssvfiscanf_r+0x88>
 802639a:	6863      	ldr	r3, [r4, #4]
 802639c:	2b00      	cmp	r3, #0
 802639e:	dd14      	ble.n	80263ca <__ssvfiscanf_r+0x76>
 80263a0:	f000 fdbc 	bl	8026f1c <__locale_ctype_ptr>
 80263a4:	2108      	movs	r1, #8
 80263a6:	6823      	ldr	r3, [r4, #0]
 80263a8:	781a      	ldrb	r2, [r3, #0]
 80263aa:	1880      	adds	r0, r0, r2
 80263ac:	7842      	ldrb	r2, [r0, #1]
 80263ae:	420a      	tst	r2, r1
 80263b0:	d101      	bne.n	80263b6 <__ssvfiscanf_r+0x62>
 80263b2:	0037      	movs	r7, r6
 80263b4:	e7e3      	b.n	802637e <__ssvfiscanf_r+0x2a>
 80263b6:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80263b8:	3301      	adds	r3, #1
 80263ba:	9201      	str	r2, [sp, #4]
 80263bc:	3201      	adds	r2, #1
 80263be:	9249      	str	r2, [sp, #292]	; 0x124
 80263c0:	6862      	ldr	r2, [r4, #4]
 80263c2:	6023      	str	r3, [r4, #0]
 80263c4:	3a01      	subs	r2, #1
 80263c6:	6062      	str	r2, [r4, #4]
 80263c8:	e7e7      	b.n	802639a <__ssvfiscanf_r+0x46>
 80263ca:	ab45      	add	r3, sp, #276	; 0x114
 80263cc:	595b      	ldr	r3, [r3, r5]
 80263ce:	0021      	movs	r1, r4
 80263d0:	9800      	ldr	r0, [sp, #0]
 80263d2:	9301      	str	r3, [sp, #4]
 80263d4:	4798      	blx	r3
 80263d6:	2800      	cmp	r0, #0
 80263d8:	d0e2      	beq.n	80263a0 <__ssvfiscanf_r+0x4c>
 80263da:	e7ea      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 80263dc:	9a01      	ldr	r2, [sp, #4]
 80263de:	2a25      	cmp	r2, #37	; 0x25
 80263e0:	d16d      	bne.n	80264be <__ssvfiscanf_r+0x16a>
 80263e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80263e4:	9345      	str	r3, [sp, #276]	; 0x114
 80263e6:	787b      	ldrb	r3, [r7, #1]
 80263e8:	2b2a      	cmp	r3, #42	; 0x2a
 80263ea:	d102      	bne.n	80263f2 <__ssvfiscanf_r+0x9e>
 80263ec:	3b1a      	subs	r3, #26
 80263ee:	9345      	str	r3, [sp, #276]	; 0x114
 80263f0:	1cbe      	adds	r6, r7, #2
 80263f2:	0037      	movs	r7, r6
 80263f4:	220a      	movs	r2, #10
 80263f6:	7839      	ldrb	r1, [r7, #0]
 80263f8:	1c7b      	adds	r3, r7, #1
 80263fa:	9302      	str	r3, [sp, #8]
 80263fc:	000b      	movs	r3, r1
 80263fe:	3b30      	subs	r3, #48	; 0x30
 8026400:	2b09      	cmp	r3, #9
 8026402:	d924      	bls.n	802644e <__ssvfiscanf_r+0xfa>
 8026404:	4e88      	ldr	r6, [pc, #544]	; (8026628 <__ssvfiscanf_r+0x2d4>)
 8026406:	2203      	movs	r2, #3
 8026408:	0030      	movs	r0, r6
 802640a:	f000 fda7 	bl	8026f5c <memchr>
 802640e:	2800      	cmp	r0, #0
 8026410:	d007      	beq.n	8026422 <__ssvfiscanf_r+0xce>
 8026412:	2301      	movs	r3, #1
 8026414:	1b80      	subs	r0, r0, r6
 8026416:	4083      	lsls	r3, r0
 8026418:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802641a:	9f02      	ldr	r7, [sp, #8]
 802641c:	4313      	orrs	r3, r2
 802641e:	9203      	str	r2, [sp, #12]
 8026420:	9345      	str	r3, [sp, #276]	; 0x114
 8026422:	783b      	ldrb	r3, [r7, #0]
 8026424:	1c7e      	adds	r6, r7, #1
 8026426:	2b67      	cmp	r3, #103	; 0x67
 8026428:	d835      	bhi.n	8026496 <__ssvfiscanf_r+0x142>
 802642a:	2b65      	cmp	r3, #101	; 0x65
 802642c:	d300      	bcc.n	8026430 <__ssvfiscanf_r+0xdc>
 802642e:	e0b8      	b.n	80265a2 <__ssvfiscanf_r+0x24e>
 8026430:	2b47      	cmp	r3, #71	; 0x47
 8026432:	d814      	bhi.n	802645e <__ssvfiscanf_r+0x10a>
 8026434:	2b45      	cmp	r3, #69	; 0x45
 8026436:	d300      	bcc.n	802643a <__ssvfiscanf_r+0xe6>
 8026438:	e0b3      	b.n	80265a2 <__ssvfiscanf_r+0x24e>
 802643a:	2b00      	cmp	r3, #0
 802643c:	d100      	bne.n	8026440 <__ssvfiscanf_r+0xec>
 802643e:	e0e8      	b.n	8026612 <__ssvfiscanf_r+0x2be>
 8026440:	2b25      	cmp	r3, #37	; 0x25
 8026442:	d03c      	beq.n	80264be <__ssvfiscanf_r+0x16a>
 8026444:	2303      	movs	r3, #3
 8026446:	934b      	str	r3, [sp, #300]	; 0x12c
 8026448:	3307      	adds	r3, #7
 802644a:	9346      	str	r3, [sp, #280]	; 0x118
 802644c:	e066      	b.n	802651c <__ssvfiscanf_r+0x1c8>
 802644e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8026450:	9f02      	ldr	r7, [sp, #8]
 8026452:	9303      	str	r3, [sp, #12]
 8026454:	4353      	muls	r3, r2
 8026456:	3b30      	subs	r3, #48	; 0x30
 8026458:	1859      	adds	r1, r3, r1
 802645a:	9147      	str	r1, [sp, #284]	; 0x11c
 802645c:	e7cb      	b.n	80263f6 <__ssvfiscanf_r+0xa2>
 802645e:	2b5b      	cmp	r3, #91	; 0x5b
 8026460:	d100      	bne.n	8026464 <__ssvfiscanf_r+0x110>
 8026462:	e07a      	b.n	802655a <__ssvfiscanf_r+0x206>
 8026464:	d810      	bhi.n	8026488 <__ssvfiscanf_r+0x134>
 8026466:	2b58      	cmp	r3, #88	; 0x58
 8026468:	d1ec      	bne.n	8026444 <__ssvfiscanf_r+0xf0>
 802646a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802646c:	9201      	str	r2, [sp, #4]
 802646e:	2280      	movs	r2, #128	; 0x80
 8026470:	9901      	ldr	r1, [sp, #4]
 8026472:	0092      	lsls	r2, r2, #2
 8026474:	430a      	orrs	r2, r1
 8026476:	9245      	str	r2, [sp, #276]	; 0x114
 8026478:	2210      	movs	r2, #16
 802647a:	9246      	str	r2, [sp, #280]	; 0x118
 802647c:	226e      	movs	r2, #110	; 0x6e
 802647e:	429a      	cmp	r2, r3
 8026480:	419b      	sbcs	r3, r3
 8026482:	425b      	negs	r3, r3
 8026484:	3303      	adds	r3, #3
 8026486:	e048      	b.n	802651a <__ssvfiscanf_r+0x1c6>
 8026488:	2b63      	cmp	r3, #99	; 0x63
 802648a:	d100      	bne.n	802648e <__ssvfiscanf_r+0x13a>
 802648c:	e072      	b.n	8026574 <__ssvfiscanf_r+0x220>
 802648e:	2b64      	cmp	r3, #100	; 0x64
 8026490:	d1d8      	bne.n	8026444 <__ssvfiscanf_r+0xf0>
 8026492:	220a      	movs	r2, #10
 8026494:	e7f1      	b.n	802647a <__ssvfiscanf_r+0x126>
 8026496:	2b70      	cmp	r3, #112	; 0x70
 8026498:	d035      	beq.n	8026506 <__ssvfiscanf_r+0x1b2>
 802649a:	d808      	bhi.n	80264ae <__ssvfiscanf_r+0x15a>
 802649c:	2b6e      	cmp	r3, #110	; 0x6e
 802649e:	d100      	bne.n	80264a2 <__ssvfiscanf_r+0x14e>
 80264a0:	e070      	b.n	8026584 <__ssvfiscanf_r+0x230>
 80264a2:	d837      	bhi.n	8026514 <__ssvfiscanf_r+0x1c0>
 80264a4:	2b69      	cmp	r3, #105	; 0x69
 80264a6:	d1cd      	bne.n	8026444 <__ssvfiscanf_r+0xf0>
 80264a8:	2300      	movs	r3, #0
 80264aa:	9346      	str	r3, [sp, #280]	; 0x118
 80264ac:	e7ea      	b.n	8026484 <__ssvfiscanf_r+0x130>
 80264ae:	2b75      	cmp	r3, #117	; 0x75
 80264b0:	d0ef      	beq.n	8026492 <__ssvfiscanf_r+0x13e>
 80264b2:	2b78      	cmp	r3, #120	; 0x78
 80264b4:	d0d9      	beq.n	802646a <__ssvfiscanf_r+0x116>
 80264b6:	2b73      	cmp	r3, #115	; 0x73
 80264b8:	d1c4      	bne.n	8026444 <__ssvfiscanf_r+0xf0>
 80264ba:	2302      	movs	r3, #2
 80264bc:	e02d      	b.n	802651a <__ssvfiscanf_r+0x1c6>
 80264be:	6863      	ldr	r3, [r4, #4]
 80264c0:	2b00      	cmp	r3, #0
 80264c2:	dd0f      	ble.n	80264e4 <__ssvfiscanf_r+0x190>
 80264c4:	6823      	ldr	r3, [r4, #0]
 80264c6:	9901      	ldr	r1, [sp, #4]
 80264c8:	781a      	ldrb	r2, [r3, #0]
 80264ca:	428a      	cmp	r2, r1
 80264cc:	d000      	beq.n	80264d0 <__ssvfiscanf_r+0x17c>
 80264ce:	e0a3      	b.n	8026618 <__ssvfiscanf_r+0x2c4>
 80264d0:	3301      	adds	r3, #1
 80264d2:	6862      	ldr	r2, [r4, #4]
 80264d4:	6023      	str	r3, [r4, #0]
 80264d6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80264d8:	3a01      	subs	r2, #1
 80264da:	9301      	str	r3, [sp, #4]
 80264dc:	3301      	adds	r3, #1
 80264de:	6062      	str	r2, [r4, #4]
 80264e0:	9349      	str	r3, [sp, #292]	; 0x124
 80264e2:	e766      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 80264e4:	ab45      	add	r3, sp, #276	; 0x114
 80264e6:	595b      	ldr	r3, [r3, r5]
 80264e8:	0021      	movs	r1, r4
 80264ea:	9800      	ldr	r0, [sp, #0]
 80264ec:	9302      	str	r3, [sp, #8]
 80264ee:	4798      	blx	r3
 80264f0:	2800      	cmp	r0, #0
 80264f2:	d0e7      	beq.n	80264c4 <__ssvfiscanf_r+0x170>
 80264f4:	9848      	ldr	r0, [sp, #288]	; 0x120
 80264f6:	2800      	cmp	r0, #0
 80264f8:	d000      	beq.n	80264fc <__ssvfiscanf_r+0x1a8>
 80264fa:	e086      	b.n	802660a <__ssvfiscanf_r+0x2b6>
 80264fc:	3801      	subs	r0, #1
 80264fe:	23a7      	movs	r3, #167	; 0xa7
 8026500:	009b      	lsls	r3, r3, #2
 8026502:	449d      	add	sp, r3
 8026504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026506:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8026508:	9201      	str	r2, [sp, #4]
 802650a:	2220      	movs	r2, #32
 802650c:	9901      	ldr	r1, [sp, #4]
 802650e:	430a      	orrs	r2, r1
 8026510:	9245      	str	r2, [sp, #276]	; 0x114
 8026512:	e7aa      	b.n	802646a <__ssvfiscanf_r+0x116>
 8026514:	2308      	movs	r3, #8
 8026516:	9346      	str	r3, [sp, #280]	; 0x118
 8026518:	3b04      	subs	r3, #4
 802651a:	934b      	str	r3, [sp, #300]	; 0x12c
 802651c:	6863      	ldr	r3, [r4, #4]
 802651e:	2b00      	cmp	r3, #0
 8026520:	dd41      	ble.n	80265a6 <__ssvfiscanf_r+0x252>
 8026522:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8026524:	9301      	str	r3, [sp, #4]
 8026526:	065b      	lsls	r3, r3, #25
 8026528:	d408      	bmi.n	802653c <__ssvfiscanf_r+0x1e8>
 802652a:	f000 fcf7 	bl	8026f1c <__locale_ctype_ptr>
 802652e:	2108      	movs	r1, #8
 8026530:	6823      	ldr	r3, [r4, #0]
 8026532:	781a      	ldrb	r2, [r3, #0]
 8026534:	1880      	adds	r0, r0, r2
 8026536:	7842      	ldrb	r2, [r0, #1]
 8026538:	420a      	tst	r2, r1
 802653a:	d13d      	bne.n	80265b8 <__ssvfiscanf_r+0x264>
 802653c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 802653e:	2b02      	cmp	r3, #2
 8026540:	dc4f      	bgt.n	80265e2 <__ssvfiscanf_r+0x28e>
 8026542:	ab04      	add	r3, sp, #16
 8026544:	0022      	movs	r2, r4
 8026546:	a945      	add	r1, sp, #276	; 0x114
 8026548:	9800      	ldr	r0, [sp, #0]
 802654a:	f000 f9e7 	bl	802691c <_scanf_chars>
 802654e:	2801      	cmp	r0, #1
 8026550:	d062      	beq.n	8026618 <__ssvfiscanf_r+0x2c4>
 8026552:	2802      	cmp	r0, #2
 8026554:	d000      	beq.n	8026558 <__ssvfiscanf_r+0x204>
 8026556:	e72c      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 8026558:	e7cc      	b.n	80264f4 <__ssvfiscanf_r+0x1a0>
 802655a:	0031      	movs	r1, r6
 802655c:	a805      	add	r0, sp, #20
 802655e:	f000 fb45 	bl	8026bec <__sccl>
 8026562:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8026564:	0006      	movs	r6, r0
 8026566:	9301      	str	r3, [sp, #4]
 8026568:	2340      	movs	r3, #64	; 0x40
 802656a:	9a01      	ldr	r2, [sp, #4]
 802656c:	4313      	orrs	r3, r2
 802656e:	9345      	str	r3, [sp, #276]	; 0x114
 8026570:	2301      	movs	r3, #1
 8026572:	e7d2      	b.n	802651a <__ssvfiscanf_r+0x1c6>
 8026574:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8026576:	9301      	str	r3, [sp, #4]
 8026578:	2340      	movs	r3, #64	; 0x40
 802657a:	9a01      	ldr	r2, [sp, #4]
 802657c:	4313      	orrs	r3, r2
 802657e:	9345      	str	r3, [sp, #276]	; 0x114
 8026580:	2300      	movs	r3, #0
 8026582:	e7ca      	b.n	802651a <__ssvfiscanf_r+0x1c6>
 8026584:	9845      	ldr	r0, [sp, #276]	; 0x114
 8026586:	06c3      	lsls	r3, r0, #27
 8026588:	d500      	bpl.n	802658c <__ssvfiscanf_r+0x238>
 802658a:	e712      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 802658c:	9b04      	ldr	r3, [sp, #16]
 802658e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8026590:	1d19      	adds	r1, r3, #4
 8026592:	9104      	str	r1, [sp, #16]
 8026594:	681b      	ldr	r3, [r3, #0]
 8026596:	07c7      	lsls	r7, r0, #31
 8026598:	d501      	bpl.n	802659e <__ssvfiscanf_r+0x24a>
 802659a:	801a      	strh	r2, [r3, #0]
 802659c:	e709      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 802659e:	601a      	str	r2, [r3, #0]
 80265a0:	e707      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 80265a2:	2305      	movs	r3, #5
 80265a4:	e7b9      	b.n	802651a <__ssvfiscanf_r+0x1c6>
 80265a6:	ab45      	add	r3, sp, #276	; 0x114
 80265a8:	595b      	ldr	r3, [r3, r5]
 80265aa:	0021      	movs	r1, r4
 80265ac:	9800      	ldr	r0, [sp, #0]
 80265ae:	9301      	str	r3, [sp, #4]
 80265b0:	4798      	blx	r3
 80265b2:	2800      	cmp	r0, #0
 80265b4:	d0b5      	beq.n	8026522 <__ssvfiscanf_r+0x1ce>
 80265b6:	e79d      	b.n	80264f4 <__ssvfiscanf_r+0x1a0>
 80265b8:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80265ba:	9201      	str	r2, [sp, #4]
 80265bc:	3201      	adds	r2, #1
 80265be:	9249      	str	r2, [sp, #292]	; 0x124
 80265c0:	6862      	ldr	r2, [r4, #4]
 80265c2:	3a01      	subs	r2, #1
 80265c4:	6062      	str	r2, [r4, #4]
 80265c6:	2a00      	cmp	r2, #0
 80265c8:	dd02      	ble.n	80265d0 <__ssvfiscanf_r+0x27c>
 80265ca:	3301      	adds	r3, #1
 80265cc:	6023      	str	r3, [r4, #0]
 80265ce:	e7ac      	b.n	802652a <__ssvfiscanf_r+0x1d6>
 80265d0:	ab45      	add	r3, sp, #276	; 0x114
 80265d2:	595b      	ldr	r3, [r3, r5]
 80265d4:	0021      	movs	r1, r4
 80265d6:	9800      	ldr	r0, [sp, #0]
 80265d8:	9301      	str	r3, [sp, #4]
 80265da:	4798      	blx	r3
 80265dc:	2800      	cmp	r0, #0
 80265de:	d0a4      	beq.n	802652a <__ssvfiscanf_r+0x1d6>
 80265e0:	e788      	b.n	80264f4 <__ssvfiscanf_r+0x1a0>
 80265e2:	2b04      	cmp	r3, #4
 80265e4:	dc06      	bgt.n	80265f4 <__ssvfiscanf_r+0x2a0>
 80265e6:	ab04      	add	r3, sp, #16
 80265e8:	0022      	movs	r2, r4
 80265ea:	a945      	add	r1, sp, #276	; 0x114
 80265ec:	9800      	ldr	r0, [sp, #0]
 80265ee:	f000 f9fb 	bl	80269e8 <_scanf_i>
 80265f2:	e7ac      	b.n	802654e <__ssvfiscanf_r+0x1fa>
 80265f4:	4b0d      	ldr	r3, [pc, #52]	; (802662c <__ssvfiscanf_r+0x2d8>)
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d100      	bne.n	80265fc <__ssvfiscanf_r+0x2a8>
 80265fa:	e6da      	b.n	80263b2 <__ssvfiscanf_r+0x5e>
 80265fc:	ab04      	add	r3, sp, #16
 80265fe:	0022      	movs	r2, r4
 8026600:	a945      	add	r1, sp, #276	; 0x114
 8026602:	9800      	ldr	r0, [sp, #0]
 8026604:	e000      	b.n	8026608 <__ssvfiscanf_r+0x2b4>
 8026606:	bf00      	nop
 8026608:	e7a1      	b.n	802654e <__ssvfiscanf_r+0x1fa>
 802660a:	89a3      	ldrh	r3, [r4, #12]
 802660c:	065b      	lsls	r3, r3, #25
 802660e:	d400      	bmi.n	8026612 <__ssvfiscanf_r+0x2be>
 8026610:	e775      	b.n	80264fe <__ssvfiscanf_r+0x1aa>
 8026612:	2001      	movs	r0, #1
 8026614:	4240      	negs	r0, r0
 8026616:	e772      	b.n	80264fe <__ssvfiscanf_r+0x1aa>
 8026618:	9848      	ldr	r0, [sp, #288]	; 0x120
 802661a:	e770      	b.n	80264fe <__ssvfiscanf_r+0x1aa>
 802661c:	fffffd64 	.word	0xfffffd64
 8026620:	0802629d 	.word	0x0802629d
 8026624:	08026315 	.word	0x08026315
 8026628:	08029c8e 	.word	0x08029c8e
 802662c:	00000000 	.word	0x00000000

08026630 <_printf_common>:
 8026630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026632:	0015      	movs	r5, r2
 8026634:	9301      	str	r3, [sp, #4]
 8026636:	688a      	ldr	r2, [r1, #8]
 8026638:	690b      	ldr	r3, [r1, #16]
 802663a:	9000      	str	r0, [sp, #0]
 802663c:	000c      	movs	r4, r1
 802663e:	4293      	cmp	r3, r2
 8026640:	da00      	bge.n	8026644 <_printf_common+0x14>
 8026642:	0013      	movs	r3, r2
 8026644:	0022      	movs	r2, r4
 8026646:	602b      	str	r3, [r5, #0]
 8026648:	3243      	adds	r2, #67	; 0x43
 802664a:	7812      	ldrb	r2, [r2, #0]
 802664c:	2a00      	cmp	r2, #0
 802664e:	d001      	beq.n	8026654 <_printf_common+0x24>
 8026650:	3301      	adds	r3, #1
 8026652:	602b      	str	r3, [r5, #0]
 8026654:	6823      	ldr	r3, [r4, #0]
 8026656:	069b      	lsls	r3, r3, #26
 8026658:	d502      	bpl.n	8026660 <_printf_common+0x30>
 802665a:	682b      	ldr	r3, [r5, #0]
 802665c:	3302      	adds	r3, #2
 802665e:	602b      	str	r3, [r5, #0]
 8026660:	2706      	movs	r7, #6
 8026662:	6823      	ldr	r3, [r4, #0]
 8026664:	401f      	ands	r7, r3
 8026666:	d027      	beq.n	80266b8 <_printf_common+0x88>
 8026668:	0023      	movs	r3, r4
 802666a:	3343      	adds	r3, #67	; 0x43
 802666c:	781b      	ldrb	r3, [r3, #0]
 802666e:	1e5a      	subs	r2, r3, #1
 8026670:	4193      	sbcs	r3, r2
 8026672:	6822      	ldr	r2, [r4, #0]
 8026674:	0692      	lsls	r2, r2, #26
 8026676:	d430      	bmi.n	80266da <_printf_common+0xaa>
 8026678:	0022      	movs	r2, r4
 802667a:	9901      	ldr	r1, [sp, #4]
 802667c:	3243      	adds	r2, #67	; 0x43
 802667e:	9800      	ldr	r0, [sp, #0]
 8026680:	9e08      	ldr	r6, [sp, #32]
 8026682:	47b0      	blx	r6
 8026684:	1c43      	adds	r3, r0, #1
 8026686:	d025      	beq.n	80266d4 <_printf_common+0xa4>
 8026688:	2306      	movs	r3, #6
 802668a:	6820      	ldr	r0, [r4, #0]
 802668c:	682a      	ldr	r2, [r5, #0]
 802668e:	68e1      	ldr	r1, [r4, #12]
 8026690:	4003      	ands	r3, r0
 8026692:	2500      	movs	r5, #0
 8026694:	2b04      	cmp	r3, #4
 8026696:	d103      	bne.n	80266a0 <_printf_common+0x70>
 8026698:	1a8d      	subs	r5, r1, r2
 802669a:	43eb      	mvns	r3, r5
 802669c:	17db      	asrs	r3, r3, #31
 802669e:	401d      	ands	r5, r3
 80266a0:	68a3      	ldr	r3, [r4, #8]
 80266a2:	6922      	ldr	r2, [r4, #16]
 80266a4:	4293      	cmp	r3, r2
 80266a6:	dd01      	ble.n	80266ac <_printf_common+0x7c>
 80266a8:	1a9b      	subs	r3, r3, r2
 80266aa:	18ed      	adds	r5, r5, r3
 80266ac:	2700      	movs	r7, #0
 80266ae:	42bd      	cmp	r5, r7
 80266b0:	d120      	bne.n	80266f4 <_printf_common+0xc4>
 80266b2:	2000      	movs	r0, #0
 80266b4:	e010      	b.n	80266d8 <_printf_common+0xa8>
 80266b6:	3701      	adds	r7, #1
 80266b8:	68e3      	ldr	r3, [r4, #12]
 80266ba:	682a      	ldr	r2, [r5, #0]
 80266bc:	1a9b      	subs	r3, r3, r2
 80266be:	42bb      	cmp	r3, r7
 80266c0:	ddd2      	ble.n	8026668 <_printf_common+0x38>
 80266c2:	0022      	movs	r2, r4
 80266c4:	2301      	movs	r3, #1
 80266c6:	3219      	adds	r2, #25
 80266c8:	9901      	ldr	r1, [sp, #4]
 80266ca:	9800      	ldr	r0, [sp, #0]
 80266cc:	9e08      	ldr	r6, [sp, #32]
 80266ce:	47b0      	blx	r6
 80266d0:	1c43      	adds	r3, r0, #1
 80266d2:	d1f0      	bne.n	80266b6 <_printf_common+0x86>
 80266d4:	2001      	movs	r0, #1
 80266d6:	4240      	negs	r0, r0
 80266d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80266da:	2030      	movs	r0, #48	; 0x30
 80266dc:	18e1      	adds	r1, r4, r3
 80266de:	3143      	adds	r1, #67	; 0x43
 80266e0:	7008      	strb	r0, [r1, #0]
 80266e2:	0021      	movs	r1, r4
 80266e4:	1c5a      	adds	r2, r3, #1
 80266e6:	3145      	adds	r1, #69	; 0x45
 80266e8:	7809      	ldrb	r1, [r1, #0]
 80266ea:	18a2      	adds	r2, r4, r2
 80266ec:	3243      	adds	r2, #67	; 0x43
 80266ee:	3302      	adds	r3, #2
 80266f0:	7011      	strb	r1, [r2, #0]
 80266f2:	e7c1      	b.n	8026678 <_printf_common+0x48>
 80266f4:	0022      	movs	r2, r4
 80266f6:	2301      	movs	r3, #1
 80266f8:	321a      	adds	r2, #26
 80266fa:	9901      	ldr	r1, [sp, #4]
 80266fc:	9800      	ldr	r0, [sp, #0]
 80266fe:	9e08      	ldr	r6, [sp, #32]
 8026700:	47b0      	blx	r6
 8026702:	1c43      	adds	r3, r0, #1
 8026704:	d0e6      	beq.n	80266d4 <_printf_common+0xa4>
 8026706:	3701      	adds	r7, #1
 8026708:	e7d1      	b.n	80266ae <_printf_common+0x7e>
	...

0802670c <_printf_i>:
 802670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802670e:	b089      	sub	sp, #36	; 0x24
 8026710:	9204      	str	r2, [sp, #16]
 8026712:	000a      	movs	r2, r1
 8026714:	3243      	adds	r2, #67	; 0x43
 8026716:	9305      	str	r3, [sp, #20]
 8026718:	9003      	str	r0, [sp, #12]
 802671a:	9202      	str	r2, [sp, #8]
 802671c:	7e0a      	ldrb	r2, [r1, #24]
 802671e:	000c      	movs	r4, r1
 8026720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026722:	2a6e      	cmp	r2, #110	; 0x6e
 8026724:	d100      	bne.n	8026728 <_printf_i+0x1c>
 8026726:	e086      	b.n	8026836 <_printf_i+0x12a>
 8026728:	d81f      	bhi.n	802676a <_printf_i+0x5e>
 802672a:	2a63      	cmp	r2, #99	; 0x63
 802672c:	d033      	beq.n	8026796 <_printf_i+0x8a>
 802672e:	d808      	bhi.n	8026742 <_printf_i+0x36>
 8026730:	2a00      	cmp	r2, #0
 8026732:	d100      	bne.n	8026736 <_printf_i+0x2a>
 8026734:	e08c      	b.n	8026850 <_printf_i+0x144>
 8026736:	2a58      	cmp	r2, #88	; 0x58
 8026738:	d04d      	beq.n	80267d6 <_printf_i+0xca>
 802673a:	0025      	movs	r5, r4
 802673c:	3542      	adds	r5, #66	; 0x42
 802673e:	702a      	strb	r2, [r5, #0]
 8026740:	e030      	b.n	80267a4 <_printf_i+0x98>
 8026742:	2a64      	cmp	r2, #100	; 0x64
 8026744:	d001      	beq.n	802674a <_printf_i+0x3e>
 8026746:	2a69      	cmp	r2, #105	; 0x69
 8026748:	d1f7      	bne.n	802673a <_printf_i+0x2e>
 802674a:	6819      	ldr	r1, [r3, #0]
 802674c:	6825      	ldr	r5, [r4, #0]
 802674e:	1d0a      	adds	r2, r1, #4
 8026750:	0628      	lsls	r0, r5, #24
 8026752:	d529      	bpl.n	80267a8 <_printf_i+0x9c>
 8026754:	6808      	ldr	r0, [r1, #0]
 8026756:	601a      	str	r2, [r3, #0]
 8026758:	2800      	cmp	r0, #0
 802675a:	da03      	bge.n	8026764 <_printf_i+0x58>
 802675c:	232d      	movs	r3, #45	; 0x2d
 802675e:	9a02      	ldr	r2, [sp, #8]
 8026760:	4240      	negs	r0, r0
 8026762:	7013      	strb	r3, [r2, #0]
 8026764:	4e6b      	ldr	r6, [pc, #428]	; (8026914 <_printf_i+0x208>)
 8026766:	270a      	movs	r7, #10
 8026768:	e04f      	b.n	802680a <_printf_i+0xfe>
 802676a:	2a73      	cmp	r2, #115	; 0x73
 802676c:	d074      	beq.n	8026858 <_printf_i+0x14c>
 802676e:	d808      	bhi.n	8026782 <_printf_i+0x76>
 8026770:	2a6f      	cmp	r2, #111	; 0x6f
 8026772:	d01f      	beq.n	80267b4 <_printf_i+0xa8>
 8026774:	2a70      	cmp	r2, #112	; 0x70
 8026776:	d1e0      	bne.n	802673a <_printf_i+0x2e>
 8026778:	2220      	movs	r2, #32
 802677a:	6809      	ldr	r1, [r1, #0]
 802677c:	430a      	orrs	r2, r1
 802677e:	6022      	str	r2, [r4, #0]
 8026780:	e003      	b.n	802678a <_printf_i+0x7e>
 8026782:	2a75      	cmp	r2, #117	; 0x75
 8026784:	d016      	beq.n	80267b4 <_printf_i+0xa8>
 8026786:	2a78      	cmp	r2, #120	; 0x78
 8026788:	d1d7      	bne.n	802673a <_printf_i+0x2e>
 802678a:	0022      	movs	r2, r4
 802678c:	2178      	movs	r1, #120	; 0x78
 802678e:	3245      	adds	r2, #69	; 0x45
 8026790:	7011      	strb	r1, [r2, #0]
 8026792:	4e61      	ldr	r6, [pc, #388]	; (8026918 <_printf_i+0x20c>)
 8026794:	e022      	b.n	80267dc <_printf_i+0xd0>
 8026796:	0025      	movs	r5, r4
 8026798:	681a      	ldr	r2, [r3, #0]
 802679a:	3542      	adds	r5, #66	; 0x42
 802679c:	1d11      	adds	r1, r2, #4
 802679e:	6019      	str	r1, [r3, #0]
 80267a0:	6813      	ldr	r3, [r2, #0]
 80267a2:	702b      	strb	r3, [r5, #0]
 80267a4:	2301      	movs	r3, #1
 80267a6:	e065      	b.n	8026874 <_printf_i+0x168>
 80267a8:	6808      	ldr	r0, [r1, #0]
 80267aa:	601a      	str	r2, [r3, #0]
 80267ac:	0669      	lsls	r1, r5, #25
 80267ae:	d5d3      	bpl.n	8026758 <_printf_i+0x4c>
 80267b0:	b200      	sxth	r0, r0
 80267b2:	e7d1      	b.n	8026758 <_printf_i+0x4c>
 80267b4:	6819      	ldr	r1, [r3, #0]
 80267b6:	6825      	ldr	r5, [r4, #0]
 80267b8:	1d08      	adds	r0, r1, #4
 80267ba:	6018      	str	r0, [r3, #0]
 80267bc:	6808      	ldr	r0, [r1, #0]
 80267be:	062e      	lsls	r6, r5, #24
 80267c0:	d505      	bpl.n	80267ce <_printf_i+0xc2>
 80267c2:	4e54      	ldr	r6, [pc, #336]	; (8026914 <_printf_i+0x208>)
 80267c4:	2708      	movs	r7, #8
 80267c6:	2a6f      	cmp	r2, #111	; 0x6f
 80267c8:	d01b      	beq.n	8026802 <_printf_i+0xf6>
 80267ca:	270a      	movs	r7, #10
 80267cc:	e019      	b.n	8026802 <_printf_i+0xf6>
 80267ce:	066d      	lsls	r5, r5, #25
 80267d0:	d5f7      	bpl.n	80267c2 <_printf_i+0xb6>
 80267d2:	b280      	uxth	r0, r0
 80267d4:	e7f5      	b.n	80267c2 <_printf_i+0xb6>
 80267d6:	3145      	adds	r1, #69	; 0x45
 80267d8:	4e4e      	ldr	r6, [pc, #312]	; (8026914 <_printf_i+0x208>)
 80267da:	700a      	strb	r2, [r1, #0]
 80267dc:	6818      	ldr	r0, [r3, #0]
 80267de:	6822      	ldr	r2, [r4, #0]
 80267e0:	1d01      	adds	r1, r0, #4
 80267e2:	6800      	ldr	r0, [r0, #0]
 80267e4:	6019      	str	r1, [r3, #0]
 80267e6:	0615      	lsls	r5, r2, #24
 80267e8:	d521      	bpl.n	802682e <_printf_i+0x122>
 80267ea:	07d3      	lsls	r3, r2, #31
 80267ec:	d502      	bpl.n	80267f4 <_printf_i+0xe8>
 80267ee:	2320      	movs	r3, #32
 80267f0:	431a      	orrs	r2, r3
 80267f2:	6022      	str	r2, [r4, #0]
 80267f4:	2710      	movs	r7, #16
 80267f6:	2800      	cmp	r0, #0
 80267f8:	d103      	bne.n	8026802 <_printf_i+0xf6>
 80267fa:	2320      	movs	r3, #32
 80267fc:	6822      	ldr	r2, [r4, #0]
 80267fe:	439a      	bics	r2, r3
 8026800:	6022      	str	r2, [r4, #0]
 8026802:	0023      	movs	r3, r4
 8026804:	2200      	movs	r2, #0
 8026806:	3343      	adds	r3, #67	; 0x43
 8026808:	701a      	strb	r2, [r3, #0]
 802680a:	6863      	ldr	r3, [r4, #4]
 802680c:	60a3      	str	r3, [r4, #8]
 802680e:	2b00      	cmp	r3, #0
 8026810:	db58      	blt.n	80268c4 <_printf_i+0x1b8>
 8026812:	2204      	movs	r2, #4
 8026814:	6821      	ldr	r1, [r4, #0]
 8026816:	4391      	bics	r1, r2
 8026818:	6021      	str	r1, [r4, #0]
 802681a:	2800      	cmp	r0, #0
 802681c:	d154      	bne.n	80268c8 <_printf_i+0x1bc>
 802681e:	9d02      	ldr	r5, [sp, #8]
 8026820:	2b00      	cmp	r3, #0
 8026822:	d05a      	beq.n	80268da <_printf_i+0x1ce>
 8026824:	0025      	movs	r5, r4
 8026826:	7833      	ldrb	r3, [r6, #0]
 8026828:	3542      	adds	r5, #66	; 0x42
 802682a:	702b      	strb	r3, [r5, #0]
 802682c:	e055      	b.n	80268da <_printf_i+0x1ce>
 802682e:	0655      	lsls	r5, r2, #25
 8026830:	d5db      	bpl.n	80267ea <_printf_i+0xde>
 8026832:	b280      	uxth	r0, r0
 8026834:	e7d9      	b.n	80267ea <_printf_i+0xde>
 8026836:	681a      	ldr	r2, [r3, #0]
 8026838:	680d      	ldr	r5, [r1, #0]
 802683a:	1d10      	adds	r0, r2, #4
 802683c:	6949      	ldr	r1, [r1, #20]
 802683e:	6018      	str	r0, [r3, #0]
 8026840:	6813      	ldr	r3, [r2, #0]
 8026842:	062e      	lsls	r6, r5, #24
 8026844:	d501      	bpl.n	802684a <_printf_i+0x13e>
 8026846:	6019      	str	r1, [r3, #0]
 8026848:	e002      	b.n	8026850 <_printf_i+0x144>
 802684a:	066d      	lsls	r5, r5, #25
 802684c:	d5fb      	bpl.n	8026846 <_printf_i+0x13a>
 802684e:	8019      	strh	r1, [r3, #0]
 8026850:	2300      	movs	r3, #0
 8026852:	9d02      	ldr	r5, [sp, #8]
 8026854:	6123      	str	r3, [r4, #16]
 8026856:	e04f      	b.n	80268f8 <_printf_i+0x1ec>
 8026858:	681a      	ldr	r2, [r3, #0]
 802685a:	1d11      	adds	r1, r2, #4
 802685c:	6019      	str	r1, [r3, #0]
 802685e:	6815      	ldr	r5, [r2, #0]
 8026860:	2100      	movs	r1, #0
 8026862:	6862      	ldr	r2, [r4, #4]
 8026864:	0028      	movs	r0, r5
 8026866:	f000 fb79 	bl	8026f5c <memchr>
 802686a:	2800      	cmp	r0, #0
 802686c:	d001      	beq.n	8026872 <_printf_i+0x166>
 802686e:	1b40      	subs	r0, r0, r5
 8026870:	6060      	str	r0, [r4, #4]
 8026872:	6863      	ldr	r3, [r4, #4]
 8026874:	6123      	str	r3, [r4, #16]
 8026876:	2300      	movs	r3, #0
 8026878:	9a02      	ldr	r2, [sp, #8]
 802687a:	7013      	strb	r3, [r2, #0]
 802687c:	e03c      	b.n	80268f8 <_printf_i+0x1ec>
 802687e:	6923      	ldr	r3, [r4, #16]
 8026880:	002a      	movs	r2, r5
 8026882:	9904      	ldr	r1, [sp, #16]
 8026884:	9803      	ldr	r0, [sp, #12]
 8026886:	9d05      	ldr	r5, [sp, #20]
 8026888:	47a8      	blx	r5
 802688a:	1c43      	adds	r3, r0, #1
 802688c:	d03e      	beq.n	802690c <_printf_i+0x200>
 802688e:	6823      	ldr	r3, [r4, #0]
 8026890:	079b      	lsls	r3, r3, #30
 8026892:	d415      	bmi.n	80268c0 <_printf_i+0x1b4>
 8026894:	9b07      	ldr	r3, [sp, #28]
 8026896:	68e0      	ldr	r0, [r4, #12]
 8026898:	4298      	cmp	r0, r3
 802689a:	da39      	bge.n	8026910 <_printf_i+0x204>
 802689c:	0018      	movs	r0, r3
 802689e:	e037      	b.n	8026910 <_printf_i+0x204>
 80268a0:	0022      	movs	r2, r4
 80268a2:	2301      	movs	r3, #1
 80268a4:	3219      	adds	r2, #25
 80268a6:	9904      	ldr	r1, [sp, #16]
 80268a8:	9803      	ldr	r0, [sp, #12]
 80268aa:	9e05      	ldr	r6, [sp, #20]
 80268ac:	47b0      	blx	r6
 80268ae:	1c43      	adds	r3, r0, #1
 80268b0:	d02c      	beq.n	802690c <_printf_i+0x200>
 80268b2:	3501      	adds	r5, #1
 80268b4:	68e3      	ldr	r3, [r4, #12]
 80268b6:	9a07      	ldr	r2, [sp, #28]
 80268b8:	1a9b      	subs	r3, r3, r2
 80268ba:	42ab      	cmp	r3, r5
 80268bc:	dcf0      	bgt.n	80268a0 <_printf_i+0x194>
 80268be:	e7e9      	b.n	8026894 <_printf_i+0x188>
 80268c0:	2500      	movs	r5, #0
 80268c2:	e7f7      	b.n	80268b4 <_printf_i+0x1a8>
 80268c4:	2800      	cmp	r0, #0
 80268c6:	d0ad      	beq.n	8026824 <_printf_i+0x118>
 80268c8:	9d02      	ldr	r5, [sp, #8]
 80268ca:	0039      	movs	r1, r7
 80268cc:	f7d9 fcaa 	bl	8000224 <__aeabi_uidivmod>
 80268d0:	5c73      	ldrb	r3, [r6, r1]
 80268d2:	3d01      	subs	r5, #1
 80268d4:	702b      	strb	r3, [r5, #0]
 80268d6:	2800      	cmp	r0, #0
 80268d8:	d1f7      	bne.n	80268ca <_printf_i+0x1be>
 80268da:	2f08      	cmp	r7, #8
 80268dc:	d109      	bne.n	80268f2 <_printf_i+0x1e6>
 80268de:	6823      	ldr	r3, [r4, #0]
 80268e0:	07db      	lsls	r3, r3, #31
 80268e2:	d506      	bpl.n	80268f2 <_printf_i+0x1e6>
 80268e4:	6863      	ldr	r3, [r4, #4]
 80268e6:	6922      	ldr	r2, [r4, #16]
 80268e8:	4293      	cmp	r3, r2
 80268ea:	dc02      	bgt.n	80268f2 <_printf_i+0x1e6>
 80268ec:	2330      	movs	r3, #48	; 0x30
 80268ee:	3d01      	subs	r5, #1
 80268f0:	702b      	strb	r3, [r5, #0]
 80268f2:	9b02      	ldr	r3, [sp, #8]
 80268f4:	1b5b      	subs	r3, r3, r5
 80268f6:	6123      	str	r3, [r4, #16]
 80268f8:	9b05      	ldr	r3, [sp, #20]
 80268fa:	aa07      	add	r2, sp, #28
 80268fc:	9300      	str	r3, [sp, #0]
 80268fe:	0021      	movs	r1, r4
 8026900:	9b04      	ldr	r3, [sp, #16]
 8026902:	9803      	ldr	r0, [sp, #12]
 8026904:	f7ff fe94 	bl	8026630 <_printf_common>
 8026908:	1c43      	adds	r3, r0, #1
 802690a:	d1b8      	bne.n	802687e <_printf_i+0x172>
 802690c:	2001      	movs	r0, #1
 802690e:	4240      	negs	r0, r0
 8026910:	b009      	add	sp, #36	; 0x24
 8026912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026914:	08029c99 	.word	0x08029c99
 8026918:	08029caa 	.word	0x08029caa

0802691c <_scanf_chars>:
 802691c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802691e:	0015      	movs	r5, r2
 8026920:	688a      	ldr	r2, [r1, #8]
 8026922:	9001      	str	r0, [sp, #4]
 8026924:	000c      	movs	r4, r1
 8026926:	2a00      	cmp	r2, #0
 8026928:	d104      	bne.n	8026934 <_scanf_chars+0x18>
 802692a:	698a      	ldr	r2, [r1, #24]
 802692c:	2a00      	cmp	r2, #0
 802692e:	d117      	bne.n	8026960 <_scanf_chars+0x44>
 8026930:	3201      	adds	r2, #1
 8026932:	60a2      	str	r2, [r4, #8]
 8026934:	6822      	ldr	r2, [r4, #0]
 8026936:	06d2      	lsls	r2, r2, #27
 8026938:	d403      	bmi.n	8026942 <_scanf_chars+0x26>
 802693a:	681a      	ldr	r2, [r3, #0]
 802693c:	1d11      	adds	r1, r2, #4
 802693e:	6019      	str	r1, [r3, #0]
 8026940:	6817      	ldr	r7, [r2, #0]
 8026942:	2600      	movs	r6, #0
 8026944:	69a3      	ldr	r3, [r4, #24]
 8026946:	2b00      	cmp	r3, #0
 8026948:	d01f      	beq.n	802698a <_scanf_chars+0x6e>
 802694a:	2b01      	cmp	r3, #1
 802694c:	d10b      	bne.n	8026966 <_scanf_chars+0x4a>
 802694e:	682b      	ldr	r3, [r5, #0]
 8026950:	6962      	ldr	r2, [r4, #20]
 8026952:	781b      	ldrb	r3, [r3, #0]
 8026954:	5cd3      	ldrb	r3, [r2, r3]
 8026956:	2b00      	cmp	r3, #0
 8026958:	d117      	bne.n	802698a <_scanf_chars+0x6e>
 802695a:	2e00      	cmp	r6, #0
 802695c:	d133      	bne.n	80269c6 <_scanf_chars+0xaa>
 802695e:	e009      	b.n	8026974 <_scanf_chars+0x58>
 8026960:	2201      	movs	r2, #1
 8026962:	4252      	negs	r2, r2
 8026964:	e7e5      	b.n	8026932 <_scanf_chars+0x16>
 8026966:	2b02      	cmp	r3, #2
 8026968:	d006      	beq.n	8026978 <_scanf_chars+0x5c>
 802696a:	2e00      	cmp	r6, #0
 802696c:	d12b      	bne.n	80269c6 <_scanf_chars+0xaa>
 802696e:	69a3      	ldr	r3, [r4, #24]
 8026970:	2b01      	cmp	r3, #1
 8026972:	d128      	bne.n	80269c6 <_scanf_chars+0xaa>
 8026974:	2001      	movs	r0, #1
 8026976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026978:	f000 fad0 	bl	8026f1c <__locale_ctype_ptr>
 802697c:	2208      	movs	r2, #8
 802697e:	682b      	ldr	r3, [r5, #0]
 8026980:	781b      	ldrb	r3, [r3, #0]
 8026982:	18c0      	adds	r0, r0, r3
 8026984:	7843      	ldrb	r3, [r0, #1]
 8026986:	4213      	tst	r3, r2
 8026988:	d1ef      	bne.n	802696a <_scanf_chars+0x4e>
 802698a:	2210      	movs	r2, #16
 802698c:	6823      	ldr	r3, [r4, #0]
 802698e:	3601      	adds	r6, #1
 8026990:	4213      	tst	r3, r2
 8026992:	d103      	bne.n	802699c <_scanf_chars+0x80>
 8026994:	682b      	ldr	r3, [r5, #0]
 8026996:	781b      	ldrb	r3, [r3, #0]
 8026998:	703b      	strb	r3, [r7, #0]
 802699a:	3701      	adds	r7, #1
 802699c:	682a      	ldr	r2, [r5, #0]
 802699e:	686b      	ldr	r3, [r5, #4]
 80269a0:	3201      	adds	r2, #1
 80269a2:	602a      	str	r2, [r5, #0]
 80269a4:	68a2      	ldr	r2, [r4, #8]
 80269a6:	3b01      	subs	r3, #1
 80269a8:	3a01      	subs	r2, #1
 80269aa:	606b      	str	r3, [r5, #4]
 80269ac:	60a2      	str	r2, [r4, #8]
 80269ae:	2a00      	cmp	r2, #0
 80269b0:	d009      	beq.n	80269c6 <_scanf_chars+0xaa>
 80269b2:	2b00      	cmp	r3, #0
 80269b4:	dcc6      	bgt.n	8026944 <_scanf_chars+0x28>
 80269b6:	23c0      	movs	r3, #192	; 0xc0
 80269b8:	005b      	lsls	r3, r3, #1
 80269ba:	58e3      	ldr	r3, [r4, r3]
 80269bc:	0029      	movs	r1, r5
 80269be:	9801      	ldr	r0, [sp, #4]
 80269c0:	4798      	blx	r3
 80269c2:	2800      	cmp	r0, #0
 80269c4:	d0be      	beq.n	8026944 <_scanf_chars+0x28>
 80269c6:	2310      	movs	r3, #16
 80269c8:	6822      	ldr	r2, [r4, #0]
 80269ca:	4013      	ands	r3, r2
 80269cc:	d106      	bne.n	80269dc <_scanf_chars+0xc0>
 80269ce:	68e2      	ldr	r2, [r4, #12]
 80269d0:	3201      	adds	r2, #1
 80269d2:	60e2      	str	r2, [r4, #12]
 80269d4:	69a2      	ldr	r2, [r4, #24]
 80269d6:	2a00      	cmp	r2, #0
 80269d8:	d000      	beq.n	80269dc <_scanf_chars+0xc0>
 80269da:	703b      	strb	r3, [r7, #0]
 80269dc:	6923      	ldr	r3, [r4, #16]
 80269de:	2000      	movs	r0, #0
 80269e0:	199e      	adds	r6, r3, r6
 80269e2:	6126      	str	r6, [r4, #16]
 80269e4:	e7c7      	b.n	8026976 <_scanf_chars+0x5a>
	...

080269e8 <_scanf_i>:
 80269e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269ea:	000c      	movs	r4, r1
 80269ec:	b08b      	sub	sp, #44	; 0x2c
 80269ee:	9302      	str	r3, [sp, #8]
 80269f0:	4b78      	ldr	r3, [pc, #480]	; (8026bd4 <_scanf_i+0x1ec>)
 80269f2:	9004      	str	r0, [sp, #16]
 80269f4:	0016      	movs	r6, r2
 80269f6:	aa07      	add	r2, sp, #28
 80269f8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80269fa:	c223      	stmia	r2!, {r0, r1, r5}
 80269fc:	4b76      	ldr	r3, [pc, #472]	; (8026bd8 <_scanf_i+0x1f0>)
 80269fe:	9305      	str	r3, [sp, #20]
 8026a00:	69a3      	ldr	r3, [r4, #24]
 8026a02:	2b03      	cmp	r3, #3
 8026a04:	d101      	bne.n	8026a0a <_scanf_i+0x22>
 8026a06:	4b75      	ldr	r3, [pc, #468]	; (8026bdc <_scanf_i+0x1f4>)
 8026a08:	9305      	str	r3, [sp, #20]
 8026a0a:	22ae      	movs	r2, #174	; 0xae
 8026a0c:	2000      	movs	r0, #0
 8026a0e:	68a3      	ldr	r3, [r4, #8]
 8026a10:	0052      	lsls	r2, r2, #1
 8026a12:	1e59      	subs	r1, r3, #1
 8026a14:	9003      	str	r0, [sp, #12]
 8026a16:	4291      	cmp	r1, r2
 8026a18:	d905      	bls.n	8026a26 <_scanf_i+0x3e>
 8026a1a:	3b5e      	subs	r3, #94	; 0x5e
 8026a1c:	3bff      	subs	r3, #255	; 0xff
 8026a1e:	9303      	str	r3, [sp, #12]
 8026a20:	235e      	movs	r3, #94	; 0x5e
 8026a22:	33ff      	adds	r3, #255	; 0xff
 8026a24:	60a3      	str	r3, [r4, #8]
 8026a26:	0023      	movs	r3, r4
 8026a28:	331c      	adds	r3, #28
 8026a2a:	9301      	str	r3, [sp, #4]
 8026a2c:	23d0      	movs	r3, #208	; 0xd0
 8026a2e:	2700      	movs	r7, #0
 8026a30:	6822      	ldr	r2, [r4, #0]
 8026a32:	011b      	lsls	r3, r3, #4
 8026a34:	4313      	orrs	r3, r2
 8026a36:	6023      	str	r3, [r4, #0]
 8026a38:	9b01      	ldr	r3, [sp, #4]
 8026a3a:	9300      	str	r3, [sp, #0]
 8026a3c:	6833      	ldr	r3, [r6, #0]
 8026a3e:	a807      	add	r0, sp, #28
 8026a40:	7819      	ldrb	r1, [r3, #0]
 8026a42:	00bb      	lsls	r3, r7, #2
 8026a44:	2202      	movs	r2, #2
 8026a46:	5818      	ldr	r0, [r3, r0]
 8026a48:	f000 fa88 	bl	8026f5c <memchr>
 8026a4c:	2800      	cmp	r0, #0
 8026a4e:	d02b      	beq.n	8026aa8 <_scanf_i+0xc0>
 8026a50:	2f01      	cmp	r7, #1
 8026a52:	d162      	bne.n	8026b1a <_scanf_i+0x132>
 8026a54:	6863      	ldr	r3, [r4, #4]
 8026a56:	2b00      	cmp	r3, #0
 8026a58:	d106      	bne.n	8026a68 <_scanf_i+0x80>
 8026a5a:	3308      	adds	r3, #8
 8026a5c:	6822      	ldr	r2, [r4, #0]
 8026a5e:	6063      	str	r3, [r4, #4]
 8026a60:	33f9      	adds	r3, #249	; 0xf9
 8026a62:	33ff      	adds	r3, #255	; 0xff
 8026a64:	4313      	orrs	r3, r2
 8026a66:	6023      	str	r3, [r4, #0]
 8026a68:	4b5d      	ldr	r3, [pc, #372]	; (8026be0 <_scanf_i+0x1f8>)
 8026a6a:	6822      	ldr	r2, [r4, #0]
 8026a6c:	4013      	ands	r3, r2
 8026a6e:	6023      	str	r3, [r4, #0]
 8026a70:	68a3      	ldr	r3, [r4, #8]
 8026a72:	1e5a      	subs	r2, r3, #1
 8026a74:	60a2      	str	r2, [r4, #8]
 8026a76:	2b00      	cmp	r3, #0
 8026a78:	d016      	beq.n	8026aa8 <_scanf_i+0xc0>
 8026a7a:	6833      	ldr	r3, [r6, #0]
 8026a7c:	1c5a      	adds	r2, r3, #1
 8026a7e:	6032      	str	r2, [r6, #0]
 8026a80:	781b      	ldrb	r3, [r3, #0]
 8026a82:	9a00      	ldr	r2, [sp, #0]
 8026a84:	7013      	strb	r3, [r2, #0]
 8026a86:	6873      	ldr	r3, [r6, #4]
 8026a88:	1c55      	adds	r5, r2, #1
 8026a8a:	3b01      	subs	r3, #1
 8026a8c:	6073      	str	r3, [r6, #4]
 8026a8e:	2b00      	cmp	r3, #0
 8026a90:	dc09      	bgt.n	8026aa6 <_scanf_i+0xbe>
 8026a92:	23c0      	movs	r3, #192	; 0xc0
 8026a94:	005b      	lsls	r3, r3, #1
 8026a96:	58e3      	ldr	r3, [r4, r3]
 8026a98:	0031      	movs	r1, r6
 8026a9a:	9804      	ldr	r0, [sp, #16]
 8026a9c:	9300      	str	r3, [sp, #0]
 8026a9e:	4798      	blx	r3
 8026aa0:	2800      	cmp	r0, #0
 8026aa2:	d000      	beq.n	8026aa6 <_scanf_i+0xbe>
 8026aa4:	e080      	b.n	8026ba8 <_scanf_i+0x1c0>
 8026aa6:	9500      	str	r5, [sp, #0]
 8026aa8:	3701      	adds	r7, #1
 8026aaa:	2f03      	cmp	r7, #3
 8026aac:	d1c6      	bne.n	8026a3c <_scanf_i+0x54>
 8026aae:	6863      	ldr	r3, [r4, #4]
 8026ab0:	2b00      	cmp	r3, #0
 8026ab2:	d101      	bne.n	8026ab8 <_scanf_i+0xd0>
 8026ab4:	330a      	adds	r3, #10
 8026ab6:	6063      	str	r3, [r4, #4]
 8026ab8:	2110      	movs	r1, #16
 8026aba:	2700      	movs	r7, #0
 8026abc:	6863      	ldr	r3, [r4, #4]
 8026abe:	6960      	ldr	r0, [r4, #20]
 8026ac0:	1ac9      	subs	r1, r1, r3
 8026ac2:	4b48      	ldr	r3, [pc, #288]	; (8026be4 <_scanf_i+0x1fc>)
 8026ac4:	18c9      	adds	r1, r1, r3
 8026ac6:	f000 f891 	bl	8026bec <__sccl>
 8026aca:	9d00      	ldr	r5, [sp, #0]
 8026acc:	68a3      	ldr	r3, [r4, #8]
 8026ace:	6822      	ldr	r2, [r4, #0]
 8026ad0:	9300      	str	r3, [sp, #0]
 8026ad2:	2b00      	cmp	r3, #0
 8026ad4:	d041      	beq.n	8026b5a <_scanf_i+0x172>
 8026ad6:	6831      	ldr	r1, [r6, #0]
 8026ad8:	6963      	ldr	r3, [r4, #20]
 8026ada:	7808      	ldrb	r0, [r1, #0]
 8026adc:	5c1b      	ldrb	r3, [r3, r0]
 8026ade:	2b00      	cmp	r3, #0
 8026ae0:	d03b      	beq.n	8026b5a <_scanf_i+0x172>
 8026ae2:	2830      	cmp	r0, #48	; 0x30
 8026ae4:	d129      	bne.n	8026b3a <_scanf_i+0x152>
 8026ae6:	2380      	movs	r3, #128	; 0x80
 8026ae8:	011b      	lsls	r3, r3, #4
 8026aea:	421a      	tst	r2, r3
 8026aec:	d025      	beq.n	8026b3a <_scanf_i+0x152>
 8026aee:	9b03      	ldr	r3, [sp, #12]
 8026af0:	3701      	adds	r7, #1
 8026af2:	2b00      	cmp	r3, #0
 8026af4:	d005      	beq.n	8026b02 <_scanf_i+0x11a>
 8026af6:	001a      	movs	r2, r3
 8026af8:	9b00      	ldr	r3, [sp, #0]
 8026afa:	3a01      	subs	r2, #1
 8026afc:	3301      	adds	r3, #1
 8026afe:	9203      	str	r2, [sp, #12]
 8026b00:	60a3      	str	r3, [r4, #8]
 8026b02:	6873      	ldr	r3, [r6, #4]
 8026b04:	3b01      	subs	r3, #1
 8026b06:	6073      	str	r3, [r6, #4]
 8026b08:	2b00      	cmp	r3, #0
 8026b0a:	dd1d      	ble.n	8026b48 <_scanf_i+0x160>
 8026b0c:	6833      	ldr	r3, [r6, #0]
 8026b0e:	3301      	adds	r3, #1
 8026b10:	6033      	str	r3, [r6, #0]
 8026b12:	68a3      	ldr	r3, [r4, #8]
 8026b14:	3b01      	subs	r3, #1
 8026b16:	60a3      	str	r3, [r4, #8]
 8026b18:	e7d8      	b.n	8026acc <_scanf_i+0xe4>
 8026b1a:	2f02      	cmp	r7, #2
 8026b1c:	d1a8      	bne.n	8026a70 <_scanf_i+0x88>
 8026b1e:	21c0      	movs	r1, #192	; 0xc0
 8026b20:	2380      	movs	r3, #128	; 0x80
 8026b22:	6822      	ldr	r2, [r4, #0]
 8026b24:	00c9      	lsls	r1, r1, #3
 8026b26:	4011      	ands	r1, r2
 8026b28:	009b      	lsls	r3, r3, #2
 8026b2a:	4299      	cmp	r1, r3
 8026b2c:	d1bf      	bne.n	8026aae <_scanf_i+0xc6>
 8026b2e:	3bf1      	subs	r3, #241	; 0xf1
 8026b30:	3bff      	subs	r3, #255	; 0xff
 8026b32:	6063      	str	r3, [r4, #4]
 8026b34:	33f0      	adds	r3, #240	; 0xf0
 8026b36:	4313      	orrs	r3, r2
 8026b38:	e799      	b.n	8026a6e <_scanf_i+0x86>
 8026b3a:	4b2b      	ldr	r3, [pc, #172]	; (8026be8 <_scanf_i+0x200>)
 8026b3c:	4013      	ands	r3, r2
 8026b3e:	6023      	str	r3, [r4, #0]
 8026b40:	780b      	ldrb	r3, [r1, #0]
 8026b42:	702b      	strb	r3, [r5, #0]
 8026b44:	3501      	adds	r5, #1
 8026b46:	e7dc      	b.n	8026b02 <_scanf_i+0x11a>
 8026b48:	23c0      	movs	r3, #192	; 0xc0
 8026b4a:	005b      	lsls	r3, r3, #1
 8026b4c:	58e3      	ldr	r3, [r4, r3]
 8026b4e:	0031      	movs	r1, r6
 8026b50:	9804      	ldr	r0, [sp, #16]
 8026b52:	9300      	str	r3, [sp, #0]
 8026b54:	4798      	blx	r3
 8026b56:	2800      	cmp	r0, #0
 8026b58:	d0db      	beq.n	8026b12 <_scanf_i+0x12a>
 8026b5a:	6823      	ldr	r3, [r4, #0]
 8026b5c:	05db      	lsls	r3, r3, #23
 8026b5e:	d50e      	bpl.n	8026b7e <_scanf_i+0x196>
 8026b60:	9b01      	ldr	r3, [sp, #4]
 8026b62:	429d      	cmp	r5, r3
 8026b64:	d907      	bls.n	8026b76 <_scanf_i+0x18e>
 8026b66:	23be      	movs	r3, #190	; 0xbe
 8026b68:	3d01      	subs	r5, #1
 8026b6a:	005b      	lsls	r3, r3, #1
 8026b6c:	7829      	ldrb	r1, [r5, #0]
 8026b6e:	58e3      	ldr	r3, [r4, r3]
 8026b70:	0032      	movs	r2, r6
 8026b72:	9804      	ldr	r0, [sp, #16]
 8026b74:	4798      	blx	r3
 8026b76:	9b01      	ldr	r3, [sp, #4]
 8026b78:	2001      	movs	r0, #1
 8026b7a:	429d      	cmp	r5, r3
 8026b7c:	d027      	beq.n	8026bce <_scanf_i+0x1e6>
 8026b7e:	2210      	movs	r2, #16
 8026b80:	6823      	ldr	r3, [r4, #0]
 8026b82:	401a      	ands	r2, r3
 8026b84:	d11c      	bne.n	8026bc0 <_scanf_i+0x1d8>
 8026b86:	702a      	strb	r2, [r5, #0]
 8026b88:	6863      	ldr	r3, [r4, #4]
 8026b8a:	9901      	ldr	r1, [sp, #4]
 8026b8c:	9804      	ldr	r0, [sp, #16]
 8026b8e:	9e05      	ldr	r6, [sp, #20]
 8026b90:	47b0      	blx	r6
 8026b92:	9b02      	ldr	r3, [sp, #8]
 8026b94:	6821      	ldr	r1, [r4, #0]
 8026b96:	681b      	ldr	r3, [r3, #0]
 8026b98:	068a      	lsls	r2, r1, #26
 8026b9a:	d507      	bpl.n	8026bac <_scanf_i+0x1c4>
 8026b9c:	1d1a      	adds	r2, r3, #4
 8026b9e:	9902      	ldr	r1, [sp, #8]
 8026ba0:	600a      	str	r2, [r1, #0]
 8026ba2:	681b      	ldr	r3, [r3, #0]
 8026ba4:	6018      	str	r0, [r3, #0]
 8026ba6:	e008      	b.n	8026bba <_scanf_i+0x1d2>
 8026ba8:	2700      	movs	r7, #0
 8026baa:	e7d6      	b.n	8026b5a <_scanf_i+0x172>
 8026bac:	1d1a      	adds	r2, r3, #4
 8026bae:	07ce      	lsls	r6, r1, #31
 8026bb0:	d5f5      	bpl.n	8026b9e <_scanf_i+0x1b6>
 8026bb2:	9902      	ldr	r1, [sp, #8]
 8026bb4:	600a      	str	r2, [r1, #0]
 8026bb6:	681b      	ldr	r3, [r3, #0]
 8026bb8:	8018      	strh	r0, [r3, #0]
 8026bba:	68e3      	ldr	r3, [r4, #12]
 8026bbc:	3301      	adds	r3, #1
 8026bbe:	60e3      	str	r3, [r4, #12]
 8026bc0:	2000      	movs	r0, #0
 8026bc2:	9b01      	ldr	r3, [sp, #4]
 8026bc4:	1aed      	subs	r5, r5, r3
 8026bc6:	6923      	ldr	r3, [r4, #16]
 8026bc8:	19ef      	adds	r7, r5, r7
 8026bca:	19df      	adds	r7, r3, r7
 8026bcc:	6127      	str	r7, [r4, #16]
 8026bce:	b00b      	add	sp, #44	; 0x2c
 8026bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026bd2:	46c0      	nop			; (mov r8, r8)
 8026bd4:	0802816c 	.word	0x0802816c
 8026bd8:	08026e79 	.word	0x08026e79
 8026bdc:	08026d51 	.word	0x08026d51
 8026be0:	fffffaff 	.word	0xfffffaff
 8026be4:	08029cbb 	.word	0x08029cbb
 8026be8:	fffff6ff 	.word	0xfffff6ff

08026bec <__sccl>:
 8026bec:	b570      	push	{r4, r5, r6, lr}
 8026bee:	780b      	ldrb	r3, [r1, #0]
 8026bf0:	0005      	movs	r5, r0
 8026bf2:	2b5e      	cmp	r3, #94	; 0x5e
 8026bf4:	d018      	beq.n	8026c28 <__sccl+0x3c>
 8026bf6:	1c4a      	adds	r2, r1, #1
 8026bf8:	2100      	movs	r1, #0
 8026bfa:	0028      	movs	r0, r5
 8026bfc:	1c6c      	adds	r4, r5, #1
 8026bfe:	34ff      	adds	r4, #255	; 0xff
 8026c00:	7001      	strb	r1, [r0, #0]
 8026c02:	3001      	adds	r0, #1
 8026c04:	42a0      	cmp	r0, r4
 8026c06:	d1fb      	bne.n	8026c00 <__sccl+0x14>
 8026c08:	1e50      	subs	r0, r2, #1
 8026c0a:	2b00      	cmp	r3, #0
 8026c0c:	d00b      	beq.n	8026c26 <__sccl+0x3a>
 8026c0e:	2001      	movs	r0, #1
 8026c10:	4041      	eors	r1, r0
 8026c12:	54e9      	strb	r1, [r5, r3]
 8026c14:	7814      	ldrb	r4, [r2, #0]
 8026c16:	1c50      	adds	r0, r2, #1
 8026c18:	2c2d      	cmp	r4, #45	; 0x2d
 8026c1a:	d00c      	beq.n	8026c36 <__sccl+0x4a>
 8026c1c:	2c5d      	cmp	r4, #93	; 0x5d
 8026c1e:	d002      	beq.n	8026c26 <__sccl+0x3a>
 8026c20:	2c00      	cmp	r4, #0
 8026c22:	d105      	bne.n	8026c30 <__sccl+0x44>
 8026c24:	0010      	movs	r0, r2
 8026c26:	bd70      	pop	{r4, r5, r6, pc}
 8026c28:	1c8a      	adds	r2, r1, #2
 8026c2a:	784b      	ldrb	r3, [r1, #1]
 8026c2c:	2101      	movs	r1, #1
 8026c2e:	e7e4      	b.n	8026bfa <__sccl+0xe>
 8026c30:	0023      	movs	r3, r4
 8026c32:	0002      	movs	r2, r0
 8026c34:	e7ed      	b.n	8026c12 <__sccl+0x26>
 8026c36:	7856      	ldrb	r6, [r2, #1]
 8026c38:	2e5d      	cmp	r6, #93	; 0x5d
 8026c3a:	d0f9      	beq.n	8026c30 <__sccl+0x44>
 8026c3c:	42b3      	cmp	r3, r6
 8026c3e:	dcf7      	bgt.n	8026c30 <__sccl+0x44>
 8026c40:	3202      	adds	r2, #2
 8026c42:	3301      	adds	r3, #1
 8026c44:	54e9      	strb	r1, [r5, r3]
 8026c46:	429e      	cmp	r6, r3
 8026c48:	dcfb      	bgt.n	8026c42 <__sccl+0x56>
 8026c4a:	e7e3      	b.n	8026c14 <__sccl+0x28>

08026c4c <_strtol_l.isra.0>:
 8026c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026c4e:	001f      	movs	r7, r3
 8026c50:	000e      	movs	r6, r1
 8026c52:	b087      	sub	sp, #28
 8026c54:	9005      	str	r0, [sp, #20]
 8026c56:	9101      	str	r1, [sp, #4]
 8026c58:	9202      	str	r2, [sp, #8]
 8026c5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026c5c:	7834      	ldrb	r4, [r6, #0]
 8026c5e:	f000 f959 	bl	8026f14 <__locale_ctype_ptr_l>
 8026c62:	2208      	movs	r2, #8
 8026c64:	1900      	adds	r0, r0, r4
 8026c66:	7843      	ldrb	r3, [r0, #1]
 8026c68:	1c75      	adds	r5, r6, #1
 8026c6a:	4013      	ands	r3, r2
 8026c6c:	d136      	bne.n	8026cdc <_strtol_l.isra.0+0x90>
 8026c6e:	2c2d      	cmp	r4, #45	; 0x2d
 8026c70:	d136      	bne.n	8026ce0 <_strtol_l.isra.0+0x94>
 8026c72:	1cb5      	adds	r5, r6, #2
 8026c74:	7874      	ldrb	r4, [r6, #1]
 8026c76:	2601      	movs	r6, #1
 8026c78:	2f00      	cmp	r7, #0
 8026c7a:	d062      	beq.n	8026d42 <_strtol_l.isra.0+0xf6>
 8026c7c:	2f10      	cmp	r7, #16
 8026c7e:	d109      	bne.n	8026c94 <_strtol_l.isra.0+0x48>
 8026c80:	2c30      	cmp	r4, #48	; 0x30
 8026c82:	d107      	bne.n	8026c94 <_strtol_l.isra.0+0x48>
 8026c84:	2220      	movs	r2, #32
 8026c86:	782b      	ldrb	r3, [r5, #0]
 8026c88:	4393      	bics	r3, r2
 8026c8a:	2b58      	cmp	r3, #88	; 0x58
 8026c8c:	d154      	bne.n	8026d38 <_strtol_l.isra.0+0xec>
 8026c8e:	2710      	movs	r7, #16
 8026c90:	786c      	ldrb	r4, [r5, #1]
 8026c92:	3502      	adds	r5, #2
 8026c94:	4b2d      	ldr	r3, [pc, #180]	; (8026d4c <_strtol_l.isra.0+0x100>)
 8026c96:	0039      	movs	r1, r7
 8026c98:	18f3      	adds	r3, r6, r3
 8026c9a:	0018      	movs	r0, r3
 8026c9c:	9303      	str	r3, [sp, #12]
 8026c9e:	f7d9 fac1 	bl	8000224 <__aeabi_uidivmod>
 8026ca2:	9104      	str	r1, [sp, #16]
 8026ca4:	2101      	movs	r1, #1
 8026ca6:	2300      	movs	r3, #0
 8026ca8:	4249      	negs	r1, r1
 8026caa:	0002      	movs	r2, r0
 8026cac:	468c      	mov	ip, r1
 8026cae:	0018      	movs	r0, r3
 8026cb0:	0021      	movs	r1, r4
 8026cb2:	3930      	subs	r1, #48	; 0x30
 8026cb4:	2909      	cmp	r1, #9
 8026cb6:	d81a      	bhi.n	8026cee <_strtol_l.isra.0+0xa2>
 8026cb8:	000c      	movs	r4, r1
 8026cba:	42a7      	cmp	r7, r4
 8026cbc:	dd23      	ble.n	8026d06 <_strtol_l.isra.0+0xba>
 8026cbe:	1c59      	adds	r1, r3, #1
 8026cc0:	d009      	beq.n	8026cd6 <_strtol_l.isra.0+0x8a>
 8026cc2:	4663      	mov	r3, ip
 8026cc4:	4282      	cmp	r2, r0
 8026cc6:	d306      	bcc.n	8026cd6 <_strtol_l.isra.0+0x8a>
 8026cc8:	d102      	bne.n	8026cd0 <_strtol_l.isra.0+0x84>
 8026cca:	9904      	ldr	r1, [sp, #16]
 8026ccc:	42a1      	cmp	r1, r4
 8026cce:	db02      	blt.n	8026cd6 <_strtol_l.isra.0+0x8a>
 8026cd0:	2301      	movs	r3, #1
 8026cd2:	4378      	muls	r0, r7
 8026cd4:	1820      	adds	r0, r4, r0
 8026cd6:	782c      	ldrb	r4, [r5, #0]
 8026cd8:	3501      	adds	r5, #1
 8026cda:	e7e9      	b.n	8026cb0 <_strtol_l.isra.0+0x64>
 8026cdc:	002e      	movs	r6, r5
 8026cde:	e7bc      	b.n	8026c5a <_strtol_l.isra.0+0xe>
 8026ce0:	2c2b      	cmp	r4, #43	; 0x2b
 8026ce2:	d001      	beq.n	8026ce8 <_strtol_l.isra.0+0x9c>
 8026ce4:	001e      	movs	r6, r3
 8026ce6:	e7c7      	b.n	8026c78 <_strtol_l.isra.0+0x2c>
 8026ce8:	1cb5      	adds	r5, r6, #2
 8026cea:	7874      	ldrb	r4, [r6, #1]
 8026cec:	e7fa      	b.n	8026ce4 <_strtol_l.isra.0+0x98>
 8026cee:	0021      	movs	r1, r4
 8026cf0:	3941      	subs	r1, #65	; 0x41
 8026cf2:	2919      	cmp	r1, #25
 8026cf4:	d801      	bhi.n	8026cfa <_strtol_l.isra.0+0xae>
 8026cf6:	3c37      	subs	r4, #55	; 0x37
 8026cf8:	e7df      	b.n	8026cba <_strtol_l.isra.0+0x6e>
 8026cfa:	0021      	movs	r1, r4
 8026cfc:	3961      	subs	r1, #97	; 0x61
 8026cfe:	2919      	cmp	r1, #25
 8026d00:	d801      	bhi.n	8026d06 <_strtol_l.isra.0+0xba>
 8026d02:	3c57      	subs	r4, #87	; 0x57
 8026d04:	e7d9      	b.n	8026cba <_strtol_l.isra.0+0x6e>
 8026d06:	1c5a      	adds	r2, r3, #1
 8026d08:	d108      	bne.n	8026d1c <_strtol_l.isra.0+0xd0>
 8026d0a:	9a05      	ldr	r2, [sp, #20]
 8026d0c:	3323      	adds	r3, #35	; 0x23
 8026d0e:	6013      	str	r3, [r2, #0]
 8026d10:	9b02      	ldr	r3, [sp, #8]
 8026d12:	9803      	ldr	r0, [sp, #12]
 8026d14:	2b00      	cmp	r3, #0
 8026d16:	d109      	bne.n	8026d2c <_strtol_l.isra.0+0xe0>
 8026d18:	b007      	add	sp, #28
 8026d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d1c:	2e00      	cmp	r6, #0
 8026d1e:	d000      	beq.n	8026d22 <_strtol_l.isra.0+0xd6>
 8026d20:	4240      	negs	r0, r0
 8026d22:	9a02      	ldr	r2, [sp, #8]
 8026d24:	2a00      	cmp	r2, #0
 8026d26:	d0f7      	beq.n	8026d18 <_strtol_l.isra.0+0xcc>
 8026d28:	2b00      	cmp	r3, #0
 8026d2a:	d001      	beq.n	8026d30 <_strtol_l.isra.0+0xe4>
 8026d2c:	1e6b      	subs	r3, r5, #1
 8026d2e:	9301      	str	r3, [sp, #4]
 8026d30:	9b02      	ldr	r3, [sp, #8]
 8026d32:	9a01      	ldr	r2, [sp, #4]
 8026d34:	601a      	str	r2, [r3, #0]
 8026d36:	e7ef      	b.n	8026d18 <_strtol_l.isra.0+0xcc>
 8026d38:	2430      	movs	r4, #48	; 0x30
 8026d3a:	2f00      	cmp	r7, #0
 8026d3c:	d1aa      	bne.n	8026c94 <_strtol_l.isra.0+0x48>
 8026d3e:	2708      	movs	r7, #8
 8026d40:	e7a8      	b.n	8026c94 <_strtol_l.isra.0+0x48>
 8026d42:	2c30      	cmp	r4, #48	; 0x30
 8026d44:	d09e      	beq.n	8026c84 <_strtol_l.isra.0+0x38>
 8026d46:	270a      	movs	r7, #10
 8026d48:	e7a4      	b.n	8026c94 <_strtol_l.isra.0+0x48>
 8026d4a:	46c0      	nop			; (mov r8, r8)
 8026d4c:	7fffffff 	.word	0x7fffffff

08026d50 <_strtol_r>:
 8026d50:	b513      	push	{r0, r1, r4, lr}
 8026d52:	4c05      	ldr	r4, [pc, #20]	; (8026d68 <_strtol_r+0x18>)
 8026d54:	6824      	ldr	r4, [r4, #0]
 8026d56:	6a24      	ldr	r4, [r4, #32]
 8026d58:	2c00      	cmp	r4, #0
 8026d5a:	d100      	bne.n	8026d5e <_strtol_r+0xe>
 8026d5c:	4c03      	ldr	r4, [pc, #12]	; (8026d6c <_strtol_r+0x1c>)
 8026d5e:	9400      	str	r4, [sp, #0]
 8026d60:	f7ff ff74 	bl	8026c4c <_strtol_l.isra.0>
 8026d64:	bd16      	pop	{r1, r2, r4, pc}
 8026d66:	46c0      	nop			; (mov r8, r8)
 8026d68:	20000060 	.word	0x20000060
 8026d6c:	200000c4 	.word	0x200000c4

08026d70 <_strtoul_l.isra.0>:
 8026d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026d72:	001f      	movs	r7, r3
 8026d74:	000e      	movs	r6, r1
 8026d76:	b085      	sub	sp, #20
 8026d78:	9003      	str	r0, [sp, #12]
 8026d7a:	9101      	str	r1, [sp, #4]
 8026d7c:	9202      	str	r2, [sp, #8]
 8026d7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026d80:	7834      	ldrb	r4, [r6, #0]
 8026d82:	f000 f8c7 	bl	8026f14 <__locale_ctype_ptr_l>
 8026d86:	2208      	movs	r2, #8
 8026d88:	1900      	adds	r0, r0, r4
 8026d8a:	7843      	ldrb	r3, [r0, #1]
 8026d8c:	1c75      	adds	r5, r6, #1
 8026d8e:	4013      	ands	r3, r2
 8026d90:	d138      	bne.n	8026e04 <_strtoul_l.isra.0+0x94>
 8026d92:	2c2d      	cmp	r4, #45	; 0x2d
 8026d94:	d138      	bne.n	8026e08 <_strtoul_l.isra.0+0x98>
 8026d96:	7874      	ldrb	r4, [r6, #1]
 8026d98:	1cb5      	adds	r5, r6, #2
 8026d9a:	3301      	adds	r3, #1
 8026d9c:	9300      	str	r3, [sp, #0]
 8026d9e:	2f00      	cmp	r7, #0
 8026da0:	d065      	beq.n	8026e6e <_strtoul_l.isra.0+0xfe>
 8026da2:	2f10      	cmp	r7, #16
 8026da4:	d109      	bne.n	8026dba <_strtoul_l.isra.0+0x4a>
 8026da6:	2c30      	cmp	r4, #48	; 0x30
 8026da8:	d107      	bne.n	8026dba <_strtoul_l.isra.0+0x4a>
 8026daa:	2220      	movs	r2, #32
 8026dac:	782b      	ldrb	r3, [r5, #0]
 8026dae:	4393      	bics	r3, r2
 8026db0:	2b58      	cmp	r3, #88	; 0x58
 8026db2:	d157      	bne.n	8026e64 <_strtoul_l.isra.0+0xf4>
 8026db4:	2710      	movs	r7, #16
 8026db6:	786c      	ldrb	r4, [r5, #1]
 8026db8:	3502      	adds	r5, #2
 8026dba:	2001      	movs	r0, #1
 8026dbc:	0039      	movs	r1, r7
 8026dbe:	4240      	negs	r0, r0
 8026dc0:	f7d9 f9aa 	bl	8000118 <__udivsi3>
 8026dc4:	0006      	movs	r6, r0
 8026dc6:	2001      	movs	r0, #1
 8026dc8:	0039      	movs	r1, r7
 8026dca:	4240      	negs	r0, r0
 8026dcc:	f7d9 fa2a 	bl	8000224 <__aeabi_uidivmod>
 8026dd0:	2300      	movs	r3, #0
 8026dd2:	2201      	movs	r2, #1
 8026dd4:	468c      	mov	ip, r1
 8026dd6:	0018      	movs	r0, r3
 8026dd8:	4252      	negs	r2, r2
 8026dda:	0021      	movs	r1, r4
 8026ddc:	3930      	subs	r1, #48	; 0x30
 8026dde:	2909      	cmp	r1, #9
 8026de0:	d817      	bhi.n	8026e12 <_strtoul_l.isra.0+0xa2>
 8026de2:	000c      	movs	r4, r1
 8026de4:	42a7      	cmp	r7, r4
 8026de6:	dd22      	ble.n	8026e2e <_strtoul_l.isra.0+0xbe>
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	db1e      	blt.n	8026e2a <_strtoul_l.isra.0+0xba>
 8026dec:	0013      	movs	r3, r2
 8026dee:	4286      	cmp	r6, r0
 8026df0:	d305      	bcc.n	8026dfe <_strtoul_l.isra.0+0x8e>
 8026df2:	d101      	bne.n	8026df8 <_strtoul_l.isra.0+0x88>
 8026df4:	45a4      	cmp	ip, r4
 8026df6:	db02      	blt.n	8026dfe <_strtoul_l.isra.0+0x8e>
 8026df8:	2301      	movs	r3, #1
 8026dfa:	4378      	muls	r0, r7
 8026dfc:	1820      	adds	r0, r4, r0
 8026dfe:	782c      	ldrb	r4, [r5, #0]
 8026e00:	3501      	adds	r5, #1
 8026e02:	e7ea      	b.n	8026dda <_strtoul_l.isra.0+0x6a>
 8026e04:	002e      	movs	r6, r5
 8026e06:	e7ba      	b.n	8026d7e <_strtoul_l.isra.0+0xe>
 8026e08:	2c2b      	cmp	r4, #43	; 0x2b
 8026e0a:	d1c7      	bne.n	8026d9c <_strtoul_l.isra.0+0x2c>
 8026e0c:	1cb5      	adds	r5, r6, #2
 8026e0e:	7874      	ldrb	r4, [r6, #1]
 8026e10:	e7c4      	b.n	8026d9c <_strtoul_l.isra.0+0x2c>
 8026e12:	0021      	movs	r1, r4
 8026e14:	3941      	subs	r1, #65	; 0x41
 8026e16:	2919      	cmp	r1, #25
 8026e18:	d801      	bhi.n	8026e1e <_strtoul_l.isra.0+0xae>
 8026e1a:	3c37      	subs	r4, #55	; 0x37
 8026e1c:	e7e2      	b.n	8026de4 <_strtoul_l.isra.0+0x74>
 8026e1e:	0021      	movs	r1, r4
 8026e20:	3961      	subs	r1, #97	; 0x61
 8026e22:	2919      	cmp	r1, #25
 8026e24:	d803      	bhi.n	8026e2e <_strtoul_l.isra.0+0xbe>
 8026e26:	3c57      	subs	r4, #87	; 0x57
 8026e28:	e7dc      	b.n	8026de4 <_strtoul_l.isra.0+0x74>
 8026e2a:	0013      	movs	r3, r2
 8026e2c:	e7e7      	b.n	8026dfe <_strtoul_l.isra.0+0x8e>
 8026e2e:	2b00      	cmp	r3, #0
 8026e30:	da09      	bge.n	8026e46 <_strtoul_l.isra.0+0xd6>
 8026e32:	2322      	movs	r3, #34	; 0x22
 8026e34:	2001      	movs	r0, #1
 8026e36:	9a03      	ldr	r2, [sp, #12]
 8026e38:	4240      	negs	r0, r0
 8026e3a:	6013      	str	r3, [r2, #0]
 8026e3c:	9b02      	ldr	r3, [sp, #8]
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	d10a      	bne.n	8026e58 <_strtoul_l.isra.0+0xe8>
 8026e42:	b005      	add	sp, #20
 8026e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026e46:	9a00      	ldr	r2, [sp, #0]
 8026e48:	2a00      	cmp	r2, #0
 8026e4a:	d000      	beq.n	8026e4e <_strtoul_l.isra.0+0xde>
 8026e4c:	4240      	negs	r0, r0
 8026e4e:	9a02      	ldr	r2, [sp, #8]
 8026e50:	2a00      	cmp	r2, #0
 8026e52:	d0f6      	beq.n	8026e42 <_strtoul_l.isra.0+0xd2>
 8026e54:	2b00      	cmp	r3, #0
 8026e56:	d001      	beq.n	8026e5c <_strtoul_l.isra.0+0xec>
 8026e58:	1e6b      	subs	r3, r5, #1
 8026e5a:	9301      	str	r3, [sp, #4]
 8026e5c:	9b02      	ldr	r3, [sp, #8]
 8026e5e:	9a01      	ldr	r2, [sp, #4]
 8026e60:	601a      	str	r2, [r3, #0]
 8026e62:	e7ee      	b.n	8026e42 <_strtoul_l.isra.0+0xd2>
 8026e64:	2430      	movs	r4, #48	; 0x30
 8026e66:	2f00      	cmp	r7, #0
 8026e68:	d1a7      	bne.n	8026dba <_strtoul_l.isra.0+0x4a>
 8026e6a:	2708      	movs	r7, #8
 8026e6c:	e7a5      	b.n	8026dba <_strtoul_l.isra.0+0x4a>
 8026e6e:	2c30      	cmp	r4, #48	; 0x30
 8026e70:	d09b      	beq.n	8026daa <_strtoul_l.isra.0+0x3a>
 8026e72:	270a      	movs	r7, #10
 8026e74:	e7a1      	b.n	8026dba <_strtoul_l.isra.0+0x4a>
	...

08026e78 <_strtoul_r>:
 8026e78:	b513      	push	{r0, r1, r4, lr}
 8026e7a:	4c05      	ldr	r4, [pc, #20]	; (8026e90 <_strtoul_r+0x18>)
 8026e7c:	6824      	ldr	r4, [r4, #0]
 8026e7e:	6a24      	ldr	r4, [r4, #32]
 8026e80:	2c00      	cmp	r4, #0
 8026e82:	d100      	bne.n	8026e86 <_strtoul_r+0xe>
 8026e84:	4c03      	ldr	r4, [pc, #12]	; (8026e94 <_strtoul_r+0x1c>)
 8026e86:	9400      	str	r4, [sp, #0]
 8026e88:	f7ff ff72 	bl	8026d70 <_strtoul_l.isra.0>
 8026e8c:	bd16      	pop	{r1, r2, r4, pc}
 8026e8e:	46c0      	nop			; (mov r8, r8)
 8026e90:	20000060 	.word	0x20000060
 8026e94:	200000c4 	.word	0x200000c4

08026e98 <__submore>:
 8026e98:	000b      	movs	r3, r1
 8026e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026e9c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8026e9e:	3344      	adds	r3, #68	; 0x44
 8026ea0:	000c      	movs	r4, r1
 8026ea2:	429d      	cmp	r5, r3
 8026ea4:	d11c      	bne.n	8026ee0 <__submore+0x48>
 8026ea6:	2680      	movs	r6, #128	; 0x80
 8026ea8:	00f6      	lsls	r6, r6, #3
 8026eaa:	0031      	movs	r1, r6
 8026eac:	f000 f8ac 	bl	8027008 <_malloc_r>
 8026eb0:	2800      	cmp	r0, #0
 8026eb2:	d102      	bne.n	8026eba <__submore+0x22>
 8026eb4:	2001      	movs	r0, #1
 8026eb6:	4240      	negs	r0, r0
 8026eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026eba:	0023      	movs	r3, r4
 8026ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8026ebe:	63a6      	str	r6, [r4, #56]	; 0x38
 8026ec0:	3346      	adds	r3, #70	; 0x46
 8026ec2:	781a      	ldrb	r2, [r3, #0]
 8026ec4:	4b10      	ldr	r3, [pc, #64]	; (8026f08 <__submore+0x70>)
 8026ec6:	54c2      	strb	r2, [r0, r3]
 8026ec8:	0023      	movs	r3, r4
 8026eca:	3345      	adds	r3, #69	; 0x45
 8026ecc:	781a      	ldrb	r2, [r3, #0]
 8026ece:	4b0f      	ldr	r3, [pc, #60]	; (8026f0c <__submore+0x74>)
 8026ed0:	54c2      	strb	r2, [r0, r3]
 8026ed2:	782a      	ldrb	r2, [r5, #0]
 8026ed4:	4b0e      	ldr	r3, [pc, #56]	; (8026f10 <__submore+0x78>)
 8026ed6:	54c2      	strb	r2, [r0, r3]
 8026ed8:	18c0      	adds	r0, r0, r3
 8026eda:	6020      	str	r0, [r4, #0]
 8026edc:	2000      	movs	r0, #0
 8026ede:	e7eb      	b.n	8026eb8 <__submore+0x20>
 8026ee0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8026ee2:	0029      	movs	r1, r5
 8026ee4:	0073      	lsls	r3, r6, #1
 8026ee6:	001a      	movs	r2, r3
 8026ee8:	9301      	str	r3, [sp, #4]
 8026eea:	f000 f8eb 	bl	80270c4 <_realloc_r>
 8026eee:	1e05      	subs	r5, r0, #0
 8026ef0:	d0e0      	beq.n	8026eb4 <__submore+0x1c>
 8026ef2:	1987      	adds	r7, r0, r6
 8026ef4:	0001      	movs	r1, r0
 8026ef6:	0032      	movs	r2, r6
 8026ef8:	0038      	movs	r0, r7
 8026efa:	f7fe ffe9 	bl	8025ed0 <memcpy>
 8026efe:	9b01      	ldr	r3, [sp, #4]
 8026f00:	6027      	str	r7, [r4, #0]
 8026f02:	6365      	str	r5, [r4, #52]	; 0x34
 8026f04:	63a3      	str	r3, [r4, #56]	; 0x38
 8026f06:	e7e9      	b.n	8026edc <__submore+0x44>
 8026f08:	000003ff 	.word	0x000003ff
 8026f0c:	000003fe 	.word	0x000003fe
 8026f10:	000003fd 	.word	0x000003fd

08026f14 <__locale_ctype_ptr_l>:
 8026f14:	30ec      	adds	r0, #236	; 0xec
 8026f16:	6800      	ldr	r0, [r0, #0]
 8026f18:	4770      	bx	lr
	...

08026f1c <__locale_ctype_ptr>:
 8026f1c:	4b04      	ldr	r3, [pc, #16]	; (8026f30 <__locale_ctype_ptr+0x14>)
 8026f1e:	681b      	ldr	r3, [r3, #0]
 8026f20:	6a1b      	ldr	r3, [r3, #32]
 8026f22:	2b00      	cmp	r3, #0
 8026f24:	d100      	bne.n	8026f28 <__locale_ctype_ptr+0xc>
 8026f26:	4b03      	ldr	r3, [pc, #12]	; (8026f34 <__locale_ctype_ptr+0x18>)
 8026f28:	33ec      	adds	r3, #236	; 0xec
 8026f2a:	6818      	ldr	r0, [r3, #0]
 8026f2c:	4770      	bx	lr
 8026f2e:	46c0      	nop			; (mov r8, r8)
 8026f30:	20000060 	.word	0x20000060
 8026f34:	200000c4 	.word	0x200000c4

08026f38 <__ascii_mbtowc>:
 8026f38:	b082      	sub	sp, #8
 8026f3a:	2900      	cmp	r1, #0
 8026f3c:	d100      	bne.n	8026f40 <__ascii_mbtowc+0x8>
 8026f3e:	a901      	add	r1, sp, #4
 8026f40:	1e10      	subs	r0, r2, #0
 8026f42:	d006      	beq.n	8026f52 <__ascii_mbtowc+0x1a>
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	d006      	beq.n	8026f56 <__ascii_mbtowc+0x1e>
 8026f48:	7813      	ldrb	r3, [r2, #0]
 8026f4a:	600b      	str	r3, [r1, #0]
 8026f4c:	7810      	ldrb	r0, [r2, #0]
 8026f4e:	1e43      	subs	r3, r0, #1
 8026f50:	4198      	sbcs	r0, r3
 8026f52:	b002      	add	sp, #8
 8026f54:	4770      	bx	lr
 8026f56:	2002      	movs	r0, #2
 8026f58:	4240      	negs	r0, r0
 8026f5a:	e7fa      	b.n	8026f52 <__ascii_mbtowc+0x1a>

08026f5c <memchr>:
 8026f5c:	b2c9      	uxtb	r1, r1
 8026f5e:	1882      	adds	r2, r0, r2
 8026f60:	4290      	cmp	r0, r2
 8026f62:	d101      	bne.n	8026f68 <memchr+0xc>
 8026f64:	2000      	movs	r0, #0
 8026f66:	4770      	bx	lr
 8026f68:	7803      	ldrb	r3, [r0, #0]
 8026f6a:	428b      	cmp	r3, r1
 8026f6c:	d0fb      	beq.n	8026f66 <memchr+0xa>
 8026f6e:	3001      	adds	r0, #1
 8026f70:	e7f6      	b.n	8026f60 <memchr+0x4>
	...

08026f74 <_free_r>:
 8026f74:	b570      	push	{r4, r5, r6, lr}
 8026f76:	0005      	movs	r5, r0
 8026f78:	2900      	cmp	r1, #0
 8026f7a:	d010      	beq.n	8026f9e <_free_r+0x2a>
 8026f7c:	1f0c      	subs	r4, r1, #4
 8026f7e:	6823      	ldr	r3, [r4, #0]
 8026f80:	2b00      	cmp	r3, #0
 8026f82:	da00      	bge.n	8026f86 <_free_r+0x12>
 8026f84:	18e4      	adds	r4, r4, r3
 8026f86:	0028      	movs	r0, r5
 8026f88:	f000 f8e0 	bl	802714c <__malloc_lock>
 8026f8c:	4a1d      	ldr	r2, [pc, #116]	; (8027004 <_free_r+0x90>)
 8026f8e:	6813      	ldr	r3, [r2, #0]
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	d105      	bne.n	8026fa0 <_free_r+0x2c>
 8026f94:	6063      	str	r3, [r4, #4]
 8026f96:	6014      	str	r4, [r2, #0]
 8026f98:	0028      	movs	r0, r5
 8026f9a:	f000 f8d8 	bl	802714e <__malloc_unlock>
 8026f9e:	bd70      	pop	{r4, r5, r6, pc}
 8026fa0:	42a3      	cmp	r3, r4
 8026fa2:	d909      	bls.n	8026fb8 <_free_r+0x44>
 8026fa4:	6821      	ldr	r1, [r4, #0]
 8026fa6:	1860      	adds	r0, r4, r1
 8026fa8:	4283      	cmp	r3, r0
 8026faa:	d1f3      	bne.n	8026f94 <_free_r+0x20>
 8026fac:	6818      	ldr	r0, [r3, #0]
 8026fae:	685b      	ldr	r3, [r3, #4]
 8026fb0:	1841      	adds	r1, r0, r1
 8026fb2:	6021      	str	r1, [r4, #0]
 8026fb4:	e7ee      	b.n	8026f94 <_free_r+0x20>
 8026fb6:	0013      	movs	r3, r2
 8026fb8:	685a      	ldr	r2, [r3, #4]
 8026fba:	2a00      	cmp	r2, #0
 8026fbc:	d001      	beq.n	8026fc2 <_free_r+0x4e>
 8026fbe:	42a2      	cmp	r2, r4
 8026fc0:	d9f9      	bls.n	8026fb6 <_free_r+0x42>
 8026fc2:	6819      	ldr	r1, [r3, #0]
 8026fc4:	1858      	adds	r0, r3, r1
 8026fc6:	42a0      	cmp	r0, r4
 8026fc8:	d10b      	bne.n	8026fe2 <_free_r+0x6e>
 8026fca:	6820      	ldr	r0, [r4, #0]
 8026fcc:	1809      	adds	r1, r1, r0
 8026fce:	1858      	adds	r0, r3, r1
 8026fd0:	6019      	str	r1, [r3, #0]
 8026fd2:	4282      	cmp	r2, r0
 8026fd4:	d1e0      	bne.n	8026f98 <_free_r+0x24>
 8026fd6:	6810      	ldr	r0, [r2, #0]
 8026fd8:	6852      	ldr	r2, [r2, #4]
 8026fda:	1841      	adds	r1, r0, r1
 8026fdc:	6019      	str	r1, [r3, #0]
 8026fde:	605a      	str	r2, [r3, #4]
 8026fe0:	e7da      	b.n	8026f98 <_free_r+0x24>
 8026fe2:	42a0      	cmp	r0, r4
 8026fe4:	d902      	bls.n	8026fec <_free_r+0x78>
 8026fe6:	230c      	movs	r3, #12
 8026fe8:	602b      	str	r3, [r5, #0]
 8026fea:	e7d5      	b.n	8026f98 <_free_r+0x24>
 8026fec:	6821      	ldr	r1, [r4, #0]
 8026fee:	1860      	adds	r0, r4, r1
 8026ff0:	4282      	cmp	r2, r0
 8026ff2:	d103      	bne.n	8026ffc <_free_r+0x88>
 8026ff4:	6810      	ldr	r0, [r2, #0]
 8026ff6:	6852      	ldr	r2, [r2, #4]
 8026ff8:	1841      	adds	r1, r0, r1
 8026ffa:	6021      	str	r1, [r4, #0]
 8026ffc:	6062      	str	r2, [r4, #4]
 8026ffe:	605c      	str	r4, [r3, #4]
 8027000:	e7ca      	b.n	8026f98 <_free_r+0x24>
 8027002:	46c0      	nop			; (mov r8, r8)
 8027004:	20001fac 	.word	0x20001fac

08027008 <_malloc_r>:
 8027008:	2303      	movs	r3, #3
 802700a:	b570      	push	{r4, r5, r6, lr}
 802700c:	1ccd      	adds	r5, r1, #3
 802700e:	439d      	bics	r5, r3
 8027010:	3508      	adds	r5, #8
 8027012:	0006      	movs	r6, r0
 8027014:	2d0c      	cmp	r5, #12
 8027016:	d21e      	bcs.n	8027056 <_malloc_r+0x4e>
 8027018:	250c      	movs	r5, #12
 802701a:	42a9      	cmp	r1, r5
 802701c:	d81d      	bhi.n	802705a <_malloc_r+0x52>
 802701e:	0030      	movs	r0, r6
 8027020:	f000 f894 	bl	802714c <__malloc_lock>
 8027024:	4a25      	ldr	r2, [pc, #148]	; (80270bc <_malloc_r+0xb4>)
 8027026:	6814      	ldr	r4, [r2, #0]
 8027028:	0021      	movs	r1, r4
 802702a:	2900      	cmp	r1, #0
 802702c:	d119      	bne.n	8027062 <_malloc_r+0x5a>
 802702e:	4c24      	ldr	r4, [pc, #144]	; (80270c0 <_malloc_r+0xb8>)
 8027030:	6823      	ldr	r3, [r4, #0]
 8027032:	2b00      	cmp	r3, #0
 8027034:	d103      	bne.n	802703e <_malloc_r+0x36>
 8027036:	0030      	movs	r0, r6
 8027038:	f000 f86a 	bl	8027110 <_sbrk_r>
 802703c:	6020      	str	r0, [r4, #0]
 802703e:	0029      	movs	r1, r5
 8027040:	0030      	movs	r0, r6
 8027042:	f000 f865 	bl	8027110 <_sbrk_r>
 8027046:	1c43      	adds	r3, r0, #1
 8027048:	d12b      	bne.n	80270a2 <_malloc_r+0x9a>
 802704a:	230c      	movs	r3, #12
 802704c:	0030      	movs	r0, r6
 802704e:	6033      	str	r3, [r6, #0]
 8027050:	f000 f87d 	bl	802714e <__malloc_unlock>
 8027054:	e003      	b.n	802705e <_malloc_r+0x56>
 8027056:	2d00      	cmp	r5, #0
 8027058:	dadf      	bge.n	802701a <_malloc_r+0x12>
 802705a:	230c      	movs	r3, #12
 802705c:	6033      	str	r3, [r6, #0]
 802705e:	2000      	movs	r0, #0
 8027060:	bd70      	pop	{r4, r5, r6, pc}
 8027062:	680b      	ldr	r3, [r1, #0]
 8027064:	1b5b      	subs	r3, r3, r5
 8027066:	d419      	bmi.n	802709c <_malloc_r+0x94>
 8027068:	2b0b      	cmp	r3, #11
 802706a:	d903      	bls.n	8027074 <_malloc_r+0x6c>
 802706c:	600b      	str	r3, [r1, #0]
 802706e:	18cc      	adds	r4, r1, r3
 8027070:	6025      	str	r5, [r4, #0]
 8027072:	e003      	b.n	802707c <_malloc_r+0x74>
 8027074:	684b      	ldr	r3, [r1, #4]
 8027076:	428c      	cmp	r4, r1
 8027078:	d10d      	bne.n	8027096 <_malloc_r+0x8e>
 802707a:	6013      	str	r3, [r2, #0]
 802707c:	0030      	movs	r0, r6
 802707e:	f000 f866 	bl	802714e <__malloc_unlock>
 8027082:	0020      	movs	r0, r4
 8027084:	2207      	movs	r2, #7
 8027086:	300b      	adds	r0, #11
 8027088:	1d23      	adds	r3, r4, #4
 802708a:	4390      	bics	r0, r2
 802708c:	1ac3      	subs	r3, r0, r3
 802708e:	d0e7      	beq.n	8027060 <_malloc_r+0x58>
 8027090:	425a      	negs	r2, r3
 8027092:	50e2      	str	r2, [r4, r3]
 8027094:	e7e4      	b.n	8027060 <_malloc_r+0x58>
 8027096:	6063      	str	r3, [r4, #4]
 8027098:	000c      	movs	r4, r1
 802709a:	e7ef      	b.n	802707c <_malloc_r+0x74>
 802709c:	000c      	movs	r4, r1
 802709e:	6849      	ldr	r1, [r1, #4]
 80270a0:	e7c3      	b.n	802702a <_malloc_r+0x22>
 80270a2:	2303      	movs	r3, #3
 80270a4:	1cc4      	adds	r4, r0, #3
 80270a6:	439c      	bics	r4, r3
 80270a8:	42a0      	cmp	r0, r4
 80270aa:	d0e1      	beq.n	8027070 <_malloc_r+0x68>
 80270ac:	1a21      	subs	r1, r4, r0
 80270ae:	0030      	movs	r0, r6
 80270b0:	f000 f82e 	bl	8027110 <_sbrk_r>
 80270b4:	1c43      	adds	r3, r0, #1
 80270b6:	d1db      	bne.n	8027070 <_malloc_r+0x68>
 80270b8:	e7c7      	b.n	802704a <_malloc_r+0x42>
 80270ba:	46c0      	nop			; (mov r8, r8)
 80270bc:	20001fac 	.word	0x20001fac
 80270c0:	20001fb0 	.word	0x20001fb0

080270c4 <_realloc_r>:
 80270c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270c6:	0007      	movs	r7, r0
 80270c8:	000d      	movs	r5, r1
 80270ca:	0016      	movs	r6, r2
 80270cc:	2900      	cmp	r1, #0
 80270ce:	d105      	bne.n	80270dc <_realloc_r+0x18>
 80270d0:	0011      	movs	r1, r2
 80270d2:	f7ff ff99 	bl	8027008 <_malloc_r>
 80270d6:	0004      	movs	r4, r0
 80270d8:	0020      	movs	r0, r4
 80270da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80270dc:	2a00      	cmp	r2, #0
 80270de:	d103      	bne.n	80270e8 <_realloc_r+0x24>
 80270e0:	f7ff ff48 	bl	8026f74 <_free_r>
 80270e4:	0034      	movs	r4, r6
 80270e6:	e7f7      	b.n	80270d8 <_realloc_r+0x14>
 80270e8:	f000 f832 	bl	8027150 <_malloc_usable_size_r>
 80270ec:	002c      	movs	r4, r5
 80270ee:	42b0      	cmp	r0, r6
 80270f0:	d2f2      	bcs.n	80270d8 <_realloc_r+0x14>
 80270f2:	0031      	movs	r1, r6
 80270f4:	0038      	movs	r0, r7
 80270f6:	f7ff ff87 	bl	8027008 <_malloc_r>
 80270fa:	1e04      	subs	r4, r0, #0
 80270fc:	d0ec      	beq.n	80270d8 <_realloc_r+0x14>
 80270fe:	0029      	movs	r1, r5
 8027100:	0032      	movs	r2, r6
 8027102:	f7fe fee5 	bl	8025ed0 <memcpy>
 8027106:	0029      	movs	r1, r5
 8027108:	0038      	movs	r0, r7
 802710a:	f7ff ff33 	bl	8026f74 <_free_r>
 802710e:	e7e3      	b.n	80270d8 <_realloc_r+0x14>

08027110 <_sbrk_r>:
 8027110:	2300      	movs	r3, #0
 8027112:	b570      	push	{r4, r5, r6, lr}
 8027114:	4c06      	ldr	r4, [pc, #24]	; (8027130 <_sbrk_r+0x20>)
 8027116:	0005      	movs	r5, r0
 8027118:	0008      	movs	r0, r1
 802711a:	6023      	str	r3, [r4, #0]
 802711c:	f7dc fbba 	bl	8003894 <_sbrk>
 8027120:	1c43      	adds	r3, r0, #1
 8027122:	d103      	bne.n	802712c <_sbrk_r+0x1c>
 8027124:	6823      	ldr	r3, [r4, #0]
 8027126:	2b00      	cmp	r3, #0
 8027128:	d000      	beq.n	802712c <_sbrk_r+0x1c>
 802712a:	602b      	str	r3, [r5, #0]
 802712c:	bd70      	pop	{r4, r5, r6, pc}
 802712e:	46c0      	nop			; (mov r8, r8)
 8027130:	20002440 	.word	0x20002440

08027134 <__ascii_wctomb>:
 8027134:	1e0b      	subs	r3, r1, #0
 8027136:	d004      	beq.n	8027142 <__ascii_wctomb+0xe>
 8027138:	2aff      	cmp	r2, #255	; 0xff
 802713a:	d904      	bls.n	8027146 <__ascii_wctomb+0x12>
 802713c:	238a      	movs	r3, #138	; 0x8a
 802713e:	6003      	str	r3, [r0, #0]
 8027140:	3b8b      	subs	r3, #139	; 0x8b
 8027142:	0018      	movs	r0, r3
 8027144:	4770      	bx	lr
 8027146:	700a      	strb	r2, [r1, #0]
 8027148:	2301      	movs	r3, #1
 802714a:	e7fa      	b.n	8027142 <__ascii_wctomb+0xe>

0802714c <__malloc_lock>:
 802714c:	4770      	bx	lr

0802714e <__malloc_unlock>:
 802714e:	4770      	bx	lr

08027150 <_malloc_usable_size_r>:
 8027150:	1f0b      	subs	r3, r1, #4
 8027152:	681b      	ldr	r3, [r3, #0]
 8027154:	1f18      	subs	r0, r3, #4
 8027156:	2b00      	cmp	r3, #0
 8027158:	da01      	bge.n	802715e <_malloc_usable_size_r+0xe>
 802715a:	580b      	ldr	r3, [r1, r0]
 802715c:	18c0      	adds	r0, r0, r3
 802715e:	4770      	bx	lr

08027160 <ceil>:
 8027160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027162:	004b      	lsls	r3, r1, #1
 8027164:	4a39      	ldr	r2, [pc, #228]	; (802724c <ceil+0xec>)
 8027166:	0d5b      	lsrs	r3, r3, #21
 8027168:	b085      	sub	sp, #20
 802716a:	189e      	adds	r6, r3, r2
 802716c:	000c      	movs	r4, r1
 802716e:	0005      	movs	r5, r0
 8027170:	9003      	str	r0, [sp, #12]
 8027172:	2e13      	cmp	r6, #19
 8027174:	dc32      	bgt.n	80271dc <ceil+0x7c>
 8027176:	2e00      	cmp	r6, #0
 8027178:	da13      	bge.n	80271a2 <ceil+0x42>
 802717a:	4a35      	ldr	r2, [pc, #212]	; (8027250 <ceil+0xf0>)
 802717c:	4b35      	ldr	r3, [pc, #212]	; (8027254 <ceil+0xf4>)
 802717e:	f7d9 fe37 	bl	8000df0 <__aeabi_dadd>
 8027182:	2200      	movs	r2, #0
 8027184:	2300      	movs	r3, #0
 8027186:	f7d9 f967 	bl	8000458 <__aeabi_dcmpgt>
 802718a:	2800      	cmp	r0, #0
 802718c:	d006      	beq.n	802719c <ceil+0x3c>
 802718e:	2c00      	cmp	r4, #0
 8027190:	db57      	blt.n	8027242 <ceil+0xe2>
 8027192:	432c      	orrs	r4, r5
 8027194:	2500      	movs	r5, #0
 8027196:	42ac      	cmp	r4, r5
 8027198:	d000      	beq.n	802719c <ceil+0x3c>
 802719a:	4c2f      	ldr	r4, [pc, #188]	; (8027258 <ceil+0xf8>)
 802719c:	0028      	movs	r0, r5
 802719e:	0021      	movs	r1, r4
 80271a0:	e026      	b.n	80271f0 <ceil+0x90>
 80271a2:	4f2e      	ldr	r7, [pc, #184]	; (802725c <ceil+0xfc>)
 80271a4:	4137      	asrs	r7, r6
 80271a6:	003b      	movs	r3, r7
 80271a8:	400b      	ands	r3, r1
 80271aa:	4303      	orrs	r3, r0
 80271ac:	d020      	beq.n	80271f0 <ceil+0x90>
 80271ae:	9000      	str	r0, [sp, #0]
 80271b0:	9101      	str	r1, [sp, #4]
 80271b2:	4a27      	ldr	r2, [pc, #156]	; (8027250 <ceil+0xf0>)
 80271b4:	4b27      	ldr	r3, [pc, #156]	; (8027254 <ceil+0xf4>)
 80271b6:	9800      	ldr	r0, [sp, #0]
 80271b8:	9901      	ldr	r1, [sp, #4]
 80271ba:	f7d9 fe19 	bl	8000df0 <__aeabi_dadd>
 80271be:	2200      	movs	r2, #0
 80271c0:	2300      	movs	r3, #0
 80271c2:	f7d9 f949 	bl	8000458 <__aeabi_dcmpgt>
 80271c6:	2800      	cmp	r0, #0
 80271c8:	d0e8      	beq.n	802719c <ceil+0x3c>
 80271ca:	2c00      	cmp	r4, #0
 80271cc:	dd03      	ble.n	80271d6 <ceil+0x76>
 80271ce:	2380      	movs	r3, #128	; 0x80
 80271d0:	035b      	lsls	r3, r3, #13
 80271d2:	4133      	asrs	r3, r6
 80271d4:	18e4      	adds	r4, r4, r3
 80271d6:	43bc      	bics	r4, r7
 80271d8:	2500      	movs	r5, #0
 80271da:	e7df      	b.n	802719c <ceil+0x3c>
 80271dc:	2e33      	cmp	r6, #51	; 0x33
 80271de:	dd09      	ble.n	80271f4 <ceil+0x94>
 80271e0:	2380      	movs	r3, #128	; 0x80
 80271e2:	00db      	lsls	r3, r3, #3
 80271e4:	429e      	cmp	r6, r3
 80271e6:	d103      	bne.n	80271f0 <ceil+0x90>
 80271e8:	0002      	movs	r2, r0
 80271ea:	000b      	movs	r3, r1
 80271ec:	f7d9 fe00 	bl	8000df0 <__aeabi_dadd>
 80271f0:	b005      	add	sp, #20
 80271f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80271f4:	2701      	movs	r7, #1
 80271f6:	4a1a      	ldr	r2, [pc, #104]	; (8027260 <ceil+0x100>)
 80271f8:	427f      	negs	r7, r7
 80271fa:	189b      	adds	r3, r3, r2
 80271fc:	40df      	lsrs	r7, r3
 80271fe:	4238      	tst	r0, r7
 8027200:	d0f6      	beq.n	80271f0 <ceil+0x90>
 8027202:	9000      	str	r0, [sp, #0]
 8027204:	9101      	str	r1, [sp, #4]
 8027206:	4a12      	ldr	r2, [pc, #72]	; (8027250 <ceil+0xf0>)
 8027208:	4b12      	ldr	r3, [pc, #72]	; (8027254 <ceil+0xf4>)
 802720a:	9800      	ldr	r0, [sp, #0]
 802720c:	9901      	ldr	r1, [sp, #4]
 802720e:	f7d9 fdef 	bl	8000df0 <__aeabi_dadd>
 8027212:	2200      	movs	r2, #0
 8027214:	2300      	movs	r3, #0
 8027216:	f7d9 f91f 	bl	8000458 <__aeabi_dcmpgt>
 802721a:	2800      	cmp	r0, #0
 802721c:	d0be      	beq.n	802719c <ceil+0x3c>
 802721e:	2c00      	cmp	r4, #0
 8027220:	dd02      	ble.n	8027228 <ceil+0xc8>
 8027222:	2e14      	cmp	r6, #20
 8027224:	d102      	bne.n	802722c <ceil+0xcc>
 8027226:	3401      	adds	r4, #1
 8027228:	43bd      	bics	r5, r7
 802722a:	e7b7      	b.n	802719c <ceil+0x3c>
 802722c:	2334      	movs	r3, #52	; 0x34
 802722e:	1b9e      	subs	r6, r3, r6
 8027230:	3b33      	subs	r3, #51	; 0x33
 8027232:	40b3      	lsls	r3, r6
 8027234:	18ed      	adds	r5, r5, r3
 8027236:	9b03      	ldr	r3, [sp, #12]
 8027238:	429d      	cmp	r5, r3
 802723a:	419b      	sbcs	r3, r3
 802723c:	425b      	negs	r3, r3
 802723e:	18e4      	adds	r4, r4, r3
 8027240:	e7f2      	b.n	8027228 <ceil+0xc8>
 8027242:	2480      	movs	r4, #128	; 0x80
 8027244:	2500      	movs	r5, #0
 8027246:	0624      	lsls	r4, r4, #24
 8027248:	e7a8      	b.n	802719c <ceil+0x3c>
 802724a:	46c0      	nop			; (mov r8, r8)
 802724c:	fffffc01 	.word	0xfffffc01
 8027250:	8800759c 	.word	0x8800759c
 8027254:	7e37e43c 	.word	0x7e37e43c
 8027258:	3ff00000 	.word	0x3ff00000
 802725c:	000fffff 	.word	0x000fffff
 8027260:	fffffbed 	.word	0xfffffbed

08027264 <floor>:
 8027264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027266:	004b      	lsls	r3, r1, #1
 8027268:	4a39      	ldr	r2, [pc, #228]	; (8027350 <floor+0xec>)
 802726a:	0d5b      	lsrs	r3, r3, #21
 802726c:	b085      	sub	sp, #20
 802726e:	189e      	adds	r6, r3, r2
 8027270:	000c      	movs	r4, r1
 8027272:	0005      	movs	r5, r0
 8027274:	9003      	str	r0, [sp, #12]
 8027276:	2e13      	cmp	r6, #19
 8027278:	dc34      	bgt.n	80272e4 <floor+0x80>
 802727a:	2e00      	cmp	r6, #0
 802727c:	da15      	bge.n	80272aa <floor+0x46>
 802727e:	4a35      	ldr	r2, [pc, #212]	; (8027354 <floor+0xf0>)
 8027280:	4b35      	ldr	r3, [pc, #212]	; (8027358 <floor+0xf4>)
 8027282:	f7d9 fdb5 	bl	8000df0 <__aeabi_dadd>
 8027286:	2200      	movs	r2, #0
 8027288:	2300      	movs	r3, #0
 802728a:	f7d9 f8e5 	bl	8000458 <__aeabi_dcmpgt>
 802728e:	2800      	cmp	r0, #0
 8027290:	d008      	beq.n	80272a4 <floor+0x40>
 8027292:	2c00      	cmp	r4, #0
 8027294:	da59      	bge.n	802734a <floor+0xe6>
 8027296:	0063      	lsls	r3, r4, #1
 8027298:	085b      	lsrs	r3, r3, #1
 802729a:	432b      	orrs	r3, r5
 802729c:	2500      	movs	r5, #0
 802729e:	42ab      	cmp	r3, r5
 80272a0:	d000      	beq.n	80272a4 <floor+0x40>
 80272a2:	4c2e      	ldr	r4, [pc, #184]	; (802735c <floor+0xf8>)
 80272a4:	0028      	movs	r0, r5
 80272a6:	0021      	movs	r1, r4
 80272a8:	e026      	b.n	80272f8 <floor+0x94>
 80272aa:	4f2d      	ldr	r7, [pc, #180]	; (8027360 <floor+0xfc>)
 80272ac:	4137      	asrs	r7, r6
 80272ae:	003b      	movs	r3, r7
 80272b0:	400b      	ands	r3, r1
 80272b2:	4303      	orrs	r3, r0
 80272b4:	d020      	beq.n	80272f8 <floor+0x94>
 80272b6:	9000      	str	r0, [sp, #0]
 80272b8:	9101      	str	r1, [sp, #4]
 80272ba:	4a26      	ldr	r2, [pc, #152]	; (8027354 <floor+0xf0>)
 80272bc:	4b26      	ldr	r3, [pc, #152]	; (8027358 <floor+0xf4>)
 80272be:	9800      	ldr	r0, [sp, #0]
 80272c0:	9901      	ldr	r1, [sp, #4]
 80272c2:	f7d9 fd95 	bl	8000df0 <__aeabi_dadd>
 80272c6:	2200      	movs	r2, #0
 80272c8:	2300      	movs	r3, #0
 80272ca:	f7d9 f8c5 	bl	8000458 <__aeabi_dcmpgt>
 80272ce:	2800      	cmp	r0, #0
 80272d0:	d0e8      	beq.n	80272a4 <floor+0x40>
 80272d2:	2c00      	cmp	r4, #0
 80272d4:	da03      	bge.n	80272de <floor+0x7a>
 80272d6:	2380      	movs	r3, #128	; 0x80
 80272d8:	035b      	lsls	r3, r3, #13
 80272da:	4133      	asrs	r3, r6
 80272dc:	18e4      	adds	r4, r4, r3
 80272de:	43bc      	bics	r4, r7
 80272e0:	2500      	movs	r5, #0
 80272e2:	e7df      	b.n	80272a4 <floor+0x40>
 80272e4:	2e33      	cmp	r6, #51	; 0x33
 80272e6:	dd09      	ble.n	80272fc <floor+0x98>
 80272e8:	2380      	movs	r3, #128	; 0x80
 80272ea:	00db      	lsls	r3, r3, #3
 80272ec:	429e      	cmp	r6, r3
 80272ee:	d103      	bne.n	80272f8 <floor+0x94>
 80272f0:	0002      	movs	r2, r0
 80272f2:	000b      	movs	r3, r1
 80272f4:	f7d9 fd7c 	bl	8000df0 <__aeabi_dadd>
 80272f8:	b005      	add	sp, #20
 80272fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80272fc:	2701      	movs	r7, #1
 80272fe:	4a19      	ldr	r2, [pc, #100]	; (8027364 <floor+0x100>)
 8027300:	427f      	negs	r7, r7
 8027302:	189b      	adds	r3, r3, r2
 8027304:	40df      	lsrs	r7, r3
 8027306:	4238      	tst	r0, r7
 8027308:	d0f6      	beq.n	80272f8 <floor+0x94>
 802730a:	9000      	str	r0, [sp, #0]
 802730c:	9101      	str	r1, [sp, #4]
 802730e:	4a11      	ldr	r2, [pc, #68]	; (8027354 <floor+0xf0>)
 8027310:	4b11      	ldr	r3, [pc, #68]	; (8027358 <floor+0xf4>)
 8027312:	9800      	ldr	r0, [sp, #0]
 8027314:	9901      	ldr	r1, [sp, #4]
 8027316:	f7d9 fd6b 	bl	8000df0 <__aeabi_dadd>
 802731a:	2200      	movs	r2, #0
 802731c:	2300      	movs	r3, #0
 802731e:	f7d9 f89b 	bl	8000458 <__aeabi_dcmpgt>
 8027322:	2800      	cmp	r0, #0
 8027324:	d0be      	beq.n	80272a4 <floor+0x40>
 8027326:	2c00      	cmp	r4, #0
 8027328:	da02      	bge.n	8027330 <floor+0xcc>
 802732a:	2e14      	cmp	r6, #20
 802732c:	d102      	bne.n	8027334 <floor+0xd0>
 802732e:	3401      	adds	r4, #1
 8027330:	43bd      	bics	r5, r7
 8027332:	e7b7      	b.n	80272a4 <floor+0x40>
 8027334:	2334      	movs	r3, #52	; 0x34
 8027336:	1b9e      	subs	r6, r3, r6
 8027338:	3b33      	subs	r3, #51	; 0x33
 802733a:	40b3      	lsls	r3, r6
 802733c:	18ed      	adds	r5, r5, r3
 802733e:	9b03      	ldr	r3, [sp, #12]
 8027340:	429d      	cmp	r5, r3
 8027342:	419b      	sbcs	r3, r3
 8027344:	425b      	negs	r3, r3
 8027346:	18e4      	adds	r4, r4, r3
 8027348:	e7f2      	b.n	8027330 <floor+0xcc>
 802734a:	2500      	movs	r5, #0
 802734c:	002c      	movs	r4, r5
 802734e:	e7a9      	b.n	80272a4 <floor+0x40>
 8027350:	fffffc01 	.word	0xfffffc01
 8027354:	8800759c 	.word	0x8800759c
 8027358:	7e37e43c 	.word	0x7e37e43c
 802735c:	bff00000 	.word	0xbff00000
 8027360:	000fffff 	.word	0x000fffff
 8027364:	fffffbed 	.word	0xfffffbed

08027368 <round>:
 8027368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802736a:	004a      	lsls	r2, r1, #1
 802736c:	0007      	movs	r7, r0
 802736e:	481f      	ldr	r0, [pc, #124]	; (80273ec <round+0x84>)
 8027370:	0d52      	lsrs	r2, r2, #21
 8027372:	1815      	adds	r5, r2, r0
 8027374:	000e      	movs	r6, r1
 8027376:	2d13      	cmp	r5, #19
 8027378:	dc18      	bgt.n	80273ac <round+0x44>
 802737a:	2d00      	cmp	r5, #0
 802737c:	da09      	bge.n	8027392 <round+0x2a>
 802737e:	0fcb      	lsrs	r3, r1, #31
 8027380:	07db      	lsls	r3, r3, #31
 8027382:	2200      	movs	r2, #0
 8027384:	1c69      	adds	r1, r5, #1
 8027386:	d101      	bne.n	802738c <round+0x24>
 8027388:	4919      	ldr	r1, [pc, #100]	; (80273f0 <round+0x88>)
 802738a:	430b      	orrs	r3, r1
 802738c:	0019      	movs	r1, r3
 802738e:	0010      	movs	r0, r2
 8027390:	e017      	b.n	80273c2 <round+0x5a>
 8027392:	4a18      	ldr	r2, [pc, #96]	; (80273f4 <round+0x8c>)
 8027394:	412a      	asrs	r2, r5
 8027396:	420a      	tst	r2, r1
 8027398:	d101      	bne.n	802739e <round+0x36>
 802739a:	2f00      	cmp	r7, #0
 802739c:	d012      	beq.n	80273c4 <round+0x5c>
 802739e:	2380      	movs	r3, #128	; 0x80
 80273a0:	031b      	lsls	r3, r3, #12
 80273a2:	412b      	asrs	r3, r5
 80273a4:	199b      	adds	r3, r3, r6
 80273a6:	4393      	bics	r3, r2
 80273a8:	2200      	movs	r2, #0
 80273aa:	e7ef      	b.n	802738c <round+0x24>
 80273ac:	2d33      	cmp	r5, #51	; 0x33
 80273ae:	dd0b      	ble.n	80273c8 <round+0x60>
 80273b0:	2380      	movs	r3, #128	; 0x80
 80273b2:	00db      	lsls	r3, r3, #3
 80273b4:	429d      	cmp	r5, r3
 80273b6:	d105      	bne.n	80273c4 <round+0x5c>
 80273b8:	003a      	movs	r2, r7
 80273ba:	000b      	movs	r3, r1
 80273bc:	0038      	movs	r0, r7
 80273be:	f7d9 fd17 	bl	8000df0 <__aeabi_dadd>
 80273c2:	0007      	movs	r7, r0
 80273c4:	0038      	movs	r0, r7
 80273c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80273c8:	2601      	movs	r6, #1
 80273ca:	480b      	ldr	r0, [pc, #44]	; (80273f8 <round+0x90>)
 80273cc:	4276      	negs	r6, r6
 80273ce:	1812      	adds	r2, r2, r0
 80273d0:	40d6      	lsrs	r6, r2
 80273d2:	423e      	tst	r6, r7
 80273d4:	d0f6      	beq.n	80273c4 <round+0x5c>
 80273d6:	2233      	movs	r2, #51	; 0x33
 80273d8:	1b55      	subs	r5, r2, r5
 80273da:	3a32      	subs	r2, #50	; 0x32
 80273dc:	40aa      	lsls	r2, r5
 80273de:	19d2      	adds	r2, r2, r7
 80273e0:	42ba      	cmp	r2, r7
 80273e2:	41a4      	sbcs	r4, r4
 80273e4:	4264      	negs	r4, r4
 80273e6:	190b      	adds	r3, r1, r4
 80273e8:	43b2      	bics	r2, r6
 80273ea:	e7cf      	b.n	802738c <round+0x24>
 80273ec:	fffffc01 	.word	0xfffffc01
 80273f0:	3ff00000 	.word	0x3ff00000
 80273f4:	000fffff 	.word	0x000fffff
 80273f8:	fffffbed 	.word	0xfffffbed

080273fc <_init>:
 80273fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273fe:	46c0      	nop			; (mov r8, r8)
 8027400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027402:	bc08      	pop	{r3}
 8027404:	469e      	mov	lr, r3
 8027406:	4770      	bx	lr

08027408 <_fini>:
 8027408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802740a:	46c0      	nop			; (mov r8, r8)
 802740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802740e:	bc08      	pop	{r3}
 8027410:	469e      	mov	lr, r3
 8027412:	4770      	bx	lr
