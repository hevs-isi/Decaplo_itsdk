
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a9ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b6c  0801aa6c  0801aa6c  0002aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5d8  0801c5d8  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c5d8  0801c5d8  0002c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c5e0  0801c5e0  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c5e0  0801c5e0  0002c5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c5e4  0801c5e4  0002c5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0801c5e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011cc  200000c8  0801c6ac  000300c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001294  0801c6ac  00031294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066914  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a805  00000000  00000000  00096a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a78  00000000  00000000  000a1208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002678  00000000  00000000  000a3c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002745f  00000000  00000000  000a62f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000396ba  00000000  00000000  000cd757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000afcf6  00000000  00000000  00106e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6b07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099b0  00000000  00000000  001b6b84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c8 	.word	0x200000c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801aa54 	.word	0x0801aa54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000cc 	.word	0x200000cc
 8000104:	0801aa54 	.word	0x0801aa54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa5f 	bl	80018d8 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9b7 	bl	8001798 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa51 	bl	80018d8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa47 	bl	80018d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9cf 	bl	8001810 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f930 	bl	800071c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84e 	bl	8000598 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	002e      	movs	r6, r5
 8000514:	b580      	push	{r7, lr}
 8000516:	0407      	lsls	r7, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c3f      	lsrs	r7, r7, #16
 800051c:	4699      	mov	r9, r3
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	437e      	muls	r6, r7
 8000522:	435d      	muls	r5, r3
 8000524:	4367      	muls	r7, r4
 8000526:	4363      	muls	r3, r4
 8000528:	197f      	adds	r7, r7, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	19e4      	adds	r4, r4, r7
 800052e:	469c      	mov	ip, r3
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	025b      	lsls	r3, r3, #9
 8000538:	4698      	mov	r8, r3
 800053a:	44c4      	add	ip, r8
 800053c:	464b      	mov	r3, r9
 800053e:	4343      	muls	r3, r0
 8000540:	4351      	muls	r1, r2
 8000542:	0c25      	lsrs	r5, r4, #16
 8000544:	0436      	lsls	r6, r6, #16
 8000546:	4465      	add	r5, ip
 8000548:	0c36      	lsrs	r6, r6, #16
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	19a4      	adds	r4, r4, r6
 800054e:	195b      	adds	r3, r3, r5
 8000550:	1859      	adds	r1, r3, r1
 8000552:	0020      	movs	r0, r4
 8000554:	bc0c      	pop	{r2, r3}
 8000556:	4690      	mov	r8, r2
 8000558:	4699      	mov	r9, r3
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_d2uiz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__aeabi_d2uiz+0x38>)
 8000562:	0004      	movs	r4, r0
 8000564:	000d      	movs	r5, r1
 8000566:	f7ff ff81 	bl	800046c <__aeabi_dcmpge>
 800056a:	2800      	cmp	r0, #0
 800056c:	d104      	bne.n	8000578 <__aeabi_d2uiz+0x1c>
 800056e:	0020      	movs	r0, r4
 8000570:	0029      	movs	r1, r5
 8000572:	f001 ffd3 	bl	800251c <__aeabi_d2iz>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__aeabi_d2uiz+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	0020      	movs	r0, r4
 800057e:	0029      	movs	r1, r5
 8000580:	f001 fc84 	bl	8001e8c <__aeabi_dsub>
 8000584:	f001 ffca 	bl	800251c <__aeabi_d2iz>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	469c      	mov	ip, r3
 800058e:	4460      	add	r0, ip
 8000590:	e7f1      	b.n	8000576 <__aeabi_d2uiz+0x1a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	41e00000 	.word	0x41e00000

08000598 <__udivmoddi4>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	464f      	mov	r7, r9
 800059c:	4646      	mov	r6, r8
 800059e:	46d6      	mov	lr, sl
 80005a0:	b5c0      	push	{r6, r7, lr}
 80005a2:	0004      	movs	r4, r0
 80005a4:	b082      	sub	sp, #8
 80005a6:	000d      	movs	r5, r1
 80005a8:	4691      	mov	r9, r2
 80005aa:	4698      	mov	r8, r3
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d82f      	bhi.n	8000610 <__udivmoddi4+0x78>
 80005b0:	d02c      	beq.n	800060c <__udivmoddi4+0x74>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4648      	mov	r0, r9
 80005b6:	f002 f8c3 	bl	8002740 <__clzdi2>
 80005ba:	0029      	movs	r1, r5
 80005bc:	0006      	movs	r6, r0
 80005be:	0020      	movs	r0, r4
 80005c0:	f002 f8be 	bl	8002740 <__clzdi2>
 80005c4:	1a33      	subs	r3, r6, r0
 80005c6:	469c      	mov	ip, r3
 80005c8:	3b20      	subs	r3, #32
 80005ca:	469a      	mov	sl, r3
 80005cc:	d500      	bpl.n	80005d0 <__udivmoddi4+0x38>
 80005ce:	e076      	b.n	80006be <__udivmoddi4+0x126>
 80005d0:	464b      	mov	r3, r9
 80005d2:	4652      	mov	r2, sl
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001f      	movs	r7, r3
 80005d8:	464b      	mov	r3, r9
 80005da:	4662      	mov	r2, ip
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d828      	bhi.n	8000636 <__udivmoddi4+0x9e>
 80005e4:	d025      	beq.n	8000632 <__udivmoddi4+0x9a>
 80005e6:	4653      	mov	r3, sl
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5a>
 80005f0:	e07b      	b.n	80006ea <__udivmoddi4+0x152>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4652      	mov	r2, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4662      	mov	r2, ip
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e018      	b.n	800063e <__udivmoddi4+0xa6>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9d0      	bls.n	80005b2 <__udivmoddi4+0x1a>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8a>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b002      	add	sp, #8
 8000628:	bc1c      	pop	{r2, r3, r4}
 800062a:	4690      	mov	r8, r2
 800062c:	4699      	mov	r9, r3
 800062e:	46a2      	mov	sl, r4
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	42a3      	cmp	r3, r4
 8000634:	d9d7      	bls.n	80005e6 <__udivmoddi4+0x4e>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4663      	mov	r3, ip
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e9      	beq.n	8000618 <__udivmoddi4+0x80>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	4698      	mov	r8, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0872      	lsrs	r2, r6, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	087b      	lsrs	r3, r7, #1
 8000650:	4666      	mov	r6, ip
 8000652:	e00e      	b.n	8000672 <__udivmoddi4+0xda>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d101      	bne.n	800065c <__udivmoddi4+0xc4>
 8000658:	42a2      	cmp	r2, r4
 800065a:	d80c      	bhi.n	8000676 <__udivmoddi4+0xde>
 800065c:	1aa4      	subs	r4, r4, r2
 800065e:	419d      	sbcs	r5, r3
 8000660:	2001      	movs	r0, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2100      	movs	r1, #0
 8000668:	3e01      	subs	r6, #1
 800066a:	1824      	adds	r4, r4, r0
 800066c:	414d      	adcs	r5, r1
 800066e:	2e00      	cmp	r6, #0
 8000670:	d006      	beq.n	8000680 <__udivmoddi4+0xe8>
 8000672:	42ab      	cmp	r3, r5
 8000674:	d9ee      	bls.n	8000654 <__udivmoddi4+0xbc>
 8000676:	3e01      	subs	r6, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2e00      	cmp	r6, #0
 800067e:	d1f8      	bne.n	8000672 <__udivmoddi4+0xda>
 8000680:	9800      	ldr	r0, [sp, #0]
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	4653      	mov	r3, sl
 8000686:	1900      	adds	r0, r0, r4
 8000688:	4169      	adcs	r1, r5
 800068a:	2b00      	cmp	r3, #0
 800068c:	db23      	blt.n	80006d6 <__udivmoddi4+0x13e>
 800068e:	002b      	movs	r3, r5
 8000690:	4652      	mov	r2, sl
 8000692:	40d3      	lsrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	4664      	mov	r4, ip
 8000698:	40e2      	lsrs	r2, r4
 800069a:	001c      	movs	r4, r3
 800069c:	4653      	mov	r3, sl
 800069e:	0015      	movs	r5, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db2d      	blt.n	8000700 <__udivmoddi4+0x168>
 80006a4:	0026      	movs	r6, r4
 80006a6:	4657      	mov	r7, sl
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4667      	mov	r7, ip
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e7ac      	b.n	8000618 <__udivmoddi4+0x80>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	464a      	mov	r2, r9
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	4661      	mov	r1, ip
 80006ca:	0013      	movs	r3, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	408a      	lsls	r2, r1
 80006d0:	0017      	movs	r7, r2
 80006d2:	431f      	orrs	r7, r3
 80006d4:	e780      	b.n	80005d8 <__udivmoddi4+0x40>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2320      	movs	r3, #32
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	002a      	movs	r2, r5
 80006de:	4666      	mov	r6, ip
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0023      	movs	r3, r4
 80006e4:	40f3      	lsrs	r3, r6
 80006e6:	4313      	orrs	r3, r2
 80006e8:	e7d4      	b.n	8000694 <__udivmoddi4+0xfc>
 80006ea:	4662      	mov	r2, ip
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e780      	b.n	8000602 <__udivmoddi4+0x6a>
 8000700:	2320      	movs	r3, #32
 8000702:	4662      	mov	r2, ip
 8000704:	0026      	movs	r6, r4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	002f      	movs	r7, r5
 800070c:	46b0      	mov	r8, r6
 800070e:	4666      	mov	r6, ip
 8000710:	40b7      	lsls	r7, r6
 8000712:	4646      	mov	r6, r8
 8000714:	003b      	movs	r3, r7
 8000716:	4333      	orrs	r3, r6
 8000718:	e7c8      	b.n	80006ac <__udivmoddi4+0x114>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gnu_ldivmod_helper>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	0016      	movs	r6, r2
 8000722:	001f      	movs	r7, r3
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	f002 f816 	bl	8002758 <__divdi3>
 800072c:	0004      	movs	r4, r0
 800072e:	000d      	movs	r5, r1
 8000730:	0002      	movs	r2, r0
 8000732:	000b      	movs	r3, r1
 8000734:	0030      	movs	r0, r6
 8000736:	0039      	movs	r1, r7
 8000738:	f7ff fee6 	bl	8000508 <__aeabi_lmul>
 800073c:	9a00      	ldr	r2, [sp, #0]
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	1a12      	subs	r2, r2, r0
 8000742:	418b      	sbcs	r3, r1
 8000744:	9908      	ldr	r1, [sp, #32]
 8000746:	0020      	movs	r0, r4
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	604b      	str	r3, [r1, #4]
 800074c:	0029      	movs	r1, r5
 800074e:	b003      	add	sp, #12
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <__aeabi_fsub>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	4647      	mov	r7, r8
 8000758:	46ce      	mov	lr, r9
 800075a:	0044      	lsls	r4, r0, #1
 800075c:	0fc2      	lsrs	r2, r0, #31
 800075e:	b580      	push	{r7, lr}
 8000760:	0247      	lsls	r7, r0, #9
 8000762:	0248      	lsls	r0, r1, #9
 8000764:	0a40      	lsrs	r0, r0, #9
 8000766:	4684      	mov	ip, r0
 8000768:	4666      	mov	r6, ip
 800076a:	0048      	lsls	r0, r1, #1
 800076c:	0a7f      	lsrs	r7, r7, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	00f6      	lsls	r6, r6, #3
 8000772:	0025      	movs	r5, r4
 8000774:	4690      	mov	r8, r2
 8000776:	00fb      	lsls	r3, r7, #3
 8000778:	0e00      	lsrs	r0, r0, #24
 800077a:	0fc9      	lsrs	r1, r1, #31
 800077c:	46b1      	mov	r9, r6
 800077e:	28ff      	cmp	r0, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x30>
 8000782:	e085      	b.n	8000890 <__aeabi_fsub+0x13c>
 8000784:	2601      	movs	r6, #1
 8000786:	4071      	eors	r1, r6
 8000788:	1a26      	subs	r6, r4, r0
 800078a:	4291      	cmp	r1, r2
 800078c:	d057      	beq.n	800083e <__aeabi_fsub+0xea>
 800078e:	2e00      	cmp	r6, #0
 8000790:	dd43      	ble.n	800081a <__aeabi_fsub+0xc6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0x44>
 8000796:	e07f      	b.n	8000898 <__aeabi_fsub+0x144>
 8000798:	4649      	mov	r1, r9
 800079a:	2900      	cmp	r1, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x4c>
 800079e:	e0aa      	b.n	80008f6 <__aeabi_fsub+0x1a2>
 80007a0:	3e01      	subs	r6, #1
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fsub+0x54>
 80007a6:	e0f7      	b.n	8000998 <__aeabi_fsub+0x244>
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	015a      	lsls	r2, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0x5c>
 80007ae:	e08b      	b.n	80008c8 <__aeabi_fsub+0x174>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	099c      	lsrs	r4, r3, #6
 80007b4:	0020      	movs	r0, r4
 80007b6:	f001 ffa5 	bl	8002704 <__clzsi2>
 80007ba:	3805      	subs	r0, #5
 80007bc:	4084      	lsls	r4, r0
 80007be:	4285      	cmp	r5, r0
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_fsub+0x70>
 80007c2:	e0d3      	b.n	800096c <__aeabi_fsub+0x218>
 80007c4:	1b45      	subs	r5, r0, r5
 80007c6:	0023      	movs	r3, r4
 80007c8:	2020      	movs	r0, #32
 80007ca:	3501      	adds	r5, #1
 80007cc:	40eb      	lsrs	r3, r5
 80007ce:	1b45      	subs	r5, r0, r5
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	1e62      	subs	r2, r4, #1
 80007d4:	4194      	sbcs	r4, r2
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2407      	movs	r4, #7
 80007da:	2500      	movs	r5, #0
 80007dc:	401c      	ands	r4, r3
 80007de:	2201      	movs	r2, #1
 80007e0:	4641      	mov	r1, r8
 80007e2:	400a      	ands	r2, r1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d004      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007e8:	210f      	movs	r1, #15
 80007ea:	4019      	ands	r1, r3
 80007ec:	2904      	cmp	r1, #4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007f0:	3304      	adds	r3, #4
 80007f2:	0159      	lsls	r1, r3, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fsub+0xa4>
 80007f6:	e080      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80007f8:	3501      	adds	r5, #1
 80007fa:	b2ec      	uxtb	r4, r5
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0xae>
 8000800:	e0a3      	b.n	800094a <__aeabi_fsub+0x1f6>
 8000802:	24ff      	movs	r4, #255	; 0xff
 8000804:	2300      	movs	r3, #0
 8000806:	025b      	lsls	r3, r3, #9
 8000808:	05e4      	lsls	r4, r4, #23
 800080a:	0a58      	lsrs	r0, r3, #9
 800080c:	07d2      	lsls	r2, r2, #31
 800080e:	4320      	orrs	r0, r4
 8000810:	4310      	orrs	r0, r2
 8000812:	bc0c      	pop	{r2, r3}
 8000814:	4690      	mov	r8, r2
 8000816:	4699      	mov	r9, r3
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	2e00      	cmp	r6, #0
 800081c:	d174      	bne.n	8000908 <__aeabi_fsub+0x1b4>
 800081e:	1c60      	adds	r0, r4, #1
 8000820:	b2c0      	uxtb	r0, r0
 8000822:	2801      	cmp	r0, #1
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fsub+0xd4>
 8000826:	e0a7      	b.n	8000978 <__aeabi_fsub+0x224>
 8000828:	464a      	mov	r2, r9
 800082a:	1a9c      	subs	r4, r3, r2
 800082c:	0162      	lsls	r2, r4, #5
 800082e:	d500      	bpl.n	8000832 <__aeabi_fsub+0xde>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fsub+0x24c>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d1be      	bne.n	80007b4 <__aeabi_fsub+0x60>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	2300      	movs	r3, #0
 800083c:	e7e3      	b.n	8000806 <__aeabi_fsub+0xb2>
 800083e:	2e00      	cmp	r6, #0
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fsub+0xf0>
 8000842:	e085      	b.n	8000950 <__aeabi_fsub+0x1fc>
 8000844:	2800      	cmp	r0, #0
 8000846:	d046      	beq.n	80008d6 <__aeabi_fsub+0x182>
 8000848:	2cff      	cmp	r4, #255	; 0xff
 800084a:	d049      	beq.n	80008e0 <__aeabi_fsub+0x18c>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	4648      	mov	r0, r9
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4310      	orrs	r0, r2
 8000854:	4681      	mov	r9, r0
 8000856:	2201      	movs	r2, #1
 8000858:	2e1b      	cmp	r6, #27
 800085a:	dc09      	bgt.n	8000870 <__aeabi_fsub+0x11c>
 800085c:	2020      	movs	r0, #32
 800085e:	464c      	mov	r4, r9
 8000860:	1b80      	subs	r0, r0, r6
 8000862:	4084      	lsls	r4, r0
 8000864:	464a      	mov	r2, r9
 8000866:	0020      	movs	r0, r4
 8000868:	40f2      	lsrs	r2, r6
 800086a:	1e44      	subs	r4, r0, #1
 800086c:	41a0      	sbcs	r0, r4
 800086e:	4302      	orrs	r2, r0
 8000870:	189b      	adds	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d528      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 8000876:	3501      	adds	r5, #1
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x12a>
 800087c:	e0a8      	b.n	80009d0 <__aeabi_fsub+0x27c>
 800087e:	2201      	movs	r2, #1
 8000880:	2407      	movs	r4, #7
 8000882:	4994      	ldr	r1, [pc, #592]	; (8000ad4 <__aeabi_fsub+0x380>)
 8000884:	401a      	ands	r2, r3
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	400b      	ands	r3, r1
 800088a:	4313      	orrs	r3, r2
 800088c:	401c      	ands	r4, r3
 800088e:	e7a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x142>
 8000894:	e778      	b.n	8000788 <__aeabi_fsub+0x34>
 8000896:	e775      	b.n	8000784 <__aeabi_fsub+0x30>
 8000898:	2cff      	cmp	r4, #255	; 0xff
 800089a:	d054      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4649      	mov	r1, r9
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4689      	mov	r9, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	2e1b      	cmp	r6, #27
 80008aa:	dc09      	bgt.n	80008c0 <__aeabi_fsub+0x16c>
 80008ac:	2120      	movs	r1, #32
 80008ae:	4648      	mov	r0, r9
 80008b0:	1b89      	subs	r1, r1, r6
 80008b2:	4088      	lsls	r0, r1
 80008b4:	464a      	mov	r2, r9
 80008b6:	0001      	movs	r1, r0
 80008b8:	40f2      	lsrs	r2, r6
 80008ba:	1e48      	subs	r0, r1, #1
 80008bc:	4181      	sbcs	r1, r0
 80008be:	430a      	orrs	r2, r1
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d500      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 80008c6:	e773      	b.n	80007b0 <__aeabi_fsub+0x5c>
 80008c8:	2201      	movs	r2, #1
 80008ca:	4641      	mov	r1, r8
 80008cc:	400a      	ands	r2, r1
 80008ce:	0759      	lsls	r1, r3, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fsub+0x180>
 80008d2:	e789      	b.n	80007e8 <__aeabi_fsub+0x94>
 80008d4:	e011      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80008d6:	4648      	mov	r0, r9
 80008d8:	2800      	cmp	r0, #0
 80008da:	d158      	bne.n	800098e <__aeabi_fsub+0x23a>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d10c      	bne.n	80008fa <__aeabi_fsub+0x1a6>
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x194>
 80008e6:	e78c      	b.n	8000802 <__aeabi_fsub+0xae>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4303      	orrs	r3, r0
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	24ff      	movs	r4, #255	; 0xff
 80008f4:	e787      	b.n	8000806 <__aeabi_fsub+0xb2>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d025      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d0f0      	beq.n	80008e2 <__aeabi_fsub+0x18e>
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	b2ec      	uxtb	r4, r5
 8000906:	e77e      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000908:	2c00      	cmp	r4, #0
 800090a:	d04d      	beq.n	80009a8 <__aeabi_fsub+0x254>
 800090c:	28ff      	cmp	r0, #255	; 0xff
 800090e:	d018      	beq.n	8000942 <__aeabi_fsub+0x1ee>
 8000910:	2480      	movs	r4, #128	; 0x80
 8000912:	04e4      	lsls	r4, r4, #19
 8000914:	4272      	negs	r2, r6
 8000916:	4323      	orrs	r3, r4
 8000918:	2a1b      	cmp	r2, #27
 800091a:	dd00      	ble.n	800091e <__aeabi_fsub+0x1ca>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_fsub+0x354>
 800091e:	001c      	movs	r4, r3
 8000920:	2520      	movs	r5, #32
 8000922:	40d4      	lsrs	r4, r2
 8000924:	1aaa      	subs	r2, r5, r2
 8000926:	4093      	lsls	r3, r2
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	4323      	orrs	r3, r4
 800092e:	464a      	mov	r2, r9
 8000930:	0005      	movs	r5, r0
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4688      	mov	r8, r1
 8000936:	e738      	b.n	80007aa <__aeabi_fsub+0x56>
 8000938:	1c72      	adds	r2, r6, #1
 800093a:	d0f8      	beq.n	800092e <__aeabi_fsub+0x1da>
 800093c:	43f2      	mvns	r2, r6
 800093e:	28ff      	cmp	r0, #255	; 0xff
 8000940:	d1ea      	bne.n	8000918 <__aeabi_fsub+0x1c4>
 8000942:	000a      	movs	r2, r1
 8000944:	464b      	mov	r3, r9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	e7d7      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800094a:	019b      	lsls	r3, r3, #6
 800094c:	0a5b      	lsrs	r3, r3, #9
 800094e:	e75a      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000950:	2e00      	cmp	r6, #0
 8000952:	d141      	bne.n	80009d8 <__aeabi_fsub+0x284>
 8000954:	1c65      	adds	r5, r4, #1
 8000956:	b2e9      	uxtb	r1, r5
 8000958:	2901      	cmp	r1, #1
 800095a:	dd45      	ble.n	80009e8 <__aeabi_fsub+0x294>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x20e>
 8000960:	e74f      	b.n	8000802 <__aeabi_fsub+0xae>
 8000962:	2407      	movs	r4, #7
 8000964:	444b      	add	r3, r9
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	401c      	ands	r4, r3
 800096a:	e738      	b.n	80007de <__aeabi_fsub+0x8a>
 800096c:	2207      	movs	r2, #7
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000970:	1a2d      	subs	r5, r5, r0
 8000972:	4023      	ands	r3, r4
 8000974:	4014      	ands	r4, r2
 8000976:	e732      	b.n	80007de <__aeabi_fsub+0x8a>
 8000978:	2c00      	cmp	r4, #0
 800097a:	d11d      	bne.n	80009b8 <__aeabi_fsub+0x264>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d17a      	bne.n	8000a76 <__aeabi_fsub+0x322>
 8000980:	464b      	mov	r3, r9
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x234>
 8000986:	e091      	b.n	8000aac <__aeabi_fsub+0x358>
 8000988:	000a      	movs	r2, r1
 800098a:	2500      	movs	r5, #0
 800098c:	e7b5      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800098e:	3e01      	subs	r6, #1
 8000990:	2e00      	cmp	r6, #0
 8000992:	d119      	bne.n	80009c8 <__aeabi_fsub+0x274>
 8000994:	444b      	add	r3, r9
 8000996:	e76c      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000998:	2cff      	cmp	r4, #255	; 0xff
 800099a:	d184      	bne.n	80008a6 <__aeabi_fsub+0x152>
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	e7ac      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009a0:	464a      	mov	r2, r9
 80009a2:	4688      	mov	r8, r1
 80009a4:	1ad4      	subs	r4, r2, r3
 80009a6:	e705      	b.n	80007b4 <__aeabi_fsub+0x60>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1c5      	bne.n	8000938 <__aeabi_fsub+0x1e4>
 80009ac:	000a      	movs	r2, r1
 80009ae:	28ff      	cmp	r0, #255	; 0xff
 80009b0:	d0c8      	beq.n	8000944 <__aeabi_fsub+0x1f0>
 80009b2:	0005      	movs	r5, r0
 80009b4:	464b      	mov	r3, r9
 80009b6:	e7a0      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d149      	bne.n	8000a50 <__aeabi_fsub+0x2fc>
 80009bc:	464b      	mov	r3, r9
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d077      	beq.n	8000ab2 <__aeabi_fsub+0x35e>
 80009c2:	000a      	movs	r2, r1
 80009c4:	25ff      	movs	r5, #255	; 0xff
 80009c6:	e798      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009c8:	2cff      	cmp	r4, #255	; 0xff
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x27a>
 80009cc:	e743      	b.n	8000856 <__aeabi_fsub+0x102>
 80009ce:	e787      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009d0:	000a      	movs	r2, r1
 80009d2:	24ff      	movs	r4, #255	; 0xff
 80009d4:	2300      	movs	r3, #0
 80009d6:	e716      	b.n	8000806 <__aeabi_fsub+0xb2>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d115      	bne.n	8000a08 <__aeabi_fsub+0x2b4>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d157      	bne.n	8000a90 <__aeabi_fsub+0x33c>
 80009e0:	28ff      	cmp	r0, #255	; 0xff
 80009e2:	d1e6      	bne.n	80009b2 <__aeabi_fsub+0x25e>
 80009e4:	464b      	mov	r3, r9
 80009e6:	e77b      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d120      	bne.n	8000a2e <__aeabi_fsub+0x2da>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_fsub+0x34c>
 80009f0:	4649      	mov	r1, r9
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d053      	beq.n	8000a9e <__aeabi_fsub+0x34a>
 80009f6:	444b      	add	r3, r9
 80009f8:	015a      	lsls	r2, r3, #5
 80009fa:	d568      	bpl.n	8000ace <__aeabi_fsub+0x37a>
 80009fc:	2407      	movs	r4, #7
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000a00:	401c      	ands	r4, r3
 8000a02:	2501      	movs	r5, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	e6ea      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d0eb      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	4276      	negs	r6, r6
 8000a12:	4313      	orrs	r3, r2
 8000a14:	2e1b      	cmp	r6, #27
 8000a16:	dc53      	bgt.n	8000ac0 <__aeabi_fsub+0x36c>
 8000a18:	2520      	movs	r5, #32
 8000a1a:	1bad      	subs	r5, r5, r6
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	40ab      	lsls	r3, r5
 8000a20:	40f2      	lsrs	r2, r6
 8000a22:	1e5c      	subs	r4, r3, #1
 8000a24:	41a3      	sbcs	r3, r4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	444b      	add	r3, r9
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	e721      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0d8      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a32:	4649      	mov	r1, r9
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x2e6>
 8000a38:	e752      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	03c9      	lsls	r1, r1, #15
 8000a3e:	420f      	tst	r7, r1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x2f0>
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a44:	4660      	mov	r0, ip
 8000a46:	4208      	tst	r0, r1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x2f8>
 8000a4a:	e749      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	e747      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a50:	4648      	mov	r0, r9
 8000a52:	25ff      	movs	r5, #255	; 0xff
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fsub+0x306>
 8000a58:	e74f      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	4217      	tst	r7, r2
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fsub+0x318>
 8000a62:	4660      	mov	r0, ip
 8000a64:	4210      	tst	r0, r2
 8000a66:	d101      	bne.n	8000a6c <__aeabi_fsub+0x318>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4641      	mov	r1, r8
 8000a70:	25ff      	movs	r5, #255	; 0xff
 8000a72:	400a      	ands	r2, r1
 8000a74:	e741      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a76:	4648      	mov	r0, r9
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d01f      	beq.n	8000abc <__aeabi_fsub+0x368>
 8000a7c:	1a1a      	subs	r2, r3, r0
 8000a7e:	0150      	lsls	r0, r2, #5
 8000a80:	d520      	bpl.n	8000ac4 <__aeabi_fsub+0x370>
 8000a82:	464a      	mov	r2, r9
 8000a84:	2407      	movs	r4, #7
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	401c      	ands	r4, r3
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e6a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a90:	1c74      	adds	r4, r6, #1
 8000a92:	d0c9      	beq.n	8000a28 <__aeabi_fsub+0x2d4>
 8000a94:	43f6      	mvns	r6, r6
 8000a96:	28ff      	cmp	r0, #255	; 0xff
 8000a98:	d1bc      	bne.n	8000a14 <__aeabi_fsub+0x2c0>
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	e720      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	e72b      	b.n	8000900 <__aeabi_fsub+0x1ac>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e740      	b.n	800092e <__aeabi_fsub+0x1da>
 8000aac:	2200      	movs	r2, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e6a9      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	24ff      	movs	r4, #255	; 0xff
 8000aba:	e6a4      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000abc:	2500      	movs	r5, #0
 8000abe:	e71c      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e7b1      	b.n	8000a28 <__aeabi_fsub+0x2d4>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d0f1      	beq.n	8000aac <__aeabi_fsub+0x358>
 8000ac8:	0013      	movs	r3, r2
 8000aca:	2500      	movs	r5, #0
 8000acc:	e6fc      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ace:	2500      	movs	r5, #0
 8000ad0:	e6fa      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	fbffffff 	.word	0xfbffffff

08000adc <__aeabi_ui2f>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	1e04      	subs	r4, r0, #0
 8000ae0:	d034      	beq.n	8000b4c <__aeabi_ui2f+0x70>
 8000ae2:	f001 fe0f 	bl	8002704 <__clzsi2>
 8000ae6:	229e      	movs	r2, #158	; 0x9e
 8000ae8:	1a12      	subs	r2, r2, r0
 8000aea:	2a96      	cmp	r2, #150	; 0x96
 8000aec:	dc07      	bgt.n	8000afe <__aeabi_ui2f+0x22>
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	2808      	cmp	r0, #8
 8000af2:	dd2e      	ble.n	8000b52 <__aeabi_ui2f+0x76>
 8000af4:	3808      	subs	r0, #8
 8000af6:	4084      	lsls	r4, r0
 8000af8:	0260      	lsls	r0, r4, #9
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	e021      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000afe:	2a99      	cmp	r2, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x3a>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0021      	movs	r1, r4
 8000b06:	331b      	adds	r3, #27
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	1e4b      	subs	r3, r1, #1
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	2305      	movs	r3, #5
 8000b10:	1a1b      	subs	r3, r3, r0
 8000b12:	40dc      	lsrs	r4, r3
 8000b14:	430c      	orrs	r4, r1
 8000b16:	2805      	cmp	r0, #5
 8000b18:	dd01      	ble.n	8000b1e <__aeabi_ui2f+0x42>
 8000b1a:	1f43      	subs	r3, r0, #5
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	0023      	movs	r3, r4
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <__aeabi_ui2f+0x7c>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	0765      	lsls	r5, r4, #29
 8000b26:	d009      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b28:	250f      	movs	r5, #15
 8000b2a:	402c      	ands	r4, r5
 8000b2c:	2c04      	cmp	r4, #4
 8000b2e:	d005      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b30:	3304      	adds	r3, #4
 8000b32:	015c      	lsls	r4, r3, #5
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_ui2f+0x60>
 8000b36:	229f      	movs	r2, #159	; 0x9f
 8000b38:	400b      	ands	r3, r1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	0a58      	lsrs	r0, r3, #9
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0240      	lsls	r0, r0, #9
 8000b44:	05d2      	lsls	r2, r2, #23
 8000b46:	0a40      	lsrs	r0, r0, #9
 8000b48:	4310      	orrs	r0, r2
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7f7      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b52:	0260      	lsls	r0, r4, #9
 8000b54:	0a40      	lsrs	r0, r0, #9
 8000b56:	e7f4      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b58:	fbffffff 	.word	0xfbffffff

08000b5c <__aeabi_dadd>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	000c      	movs	r4, r1
 8000b66:	0309      	lsls	r1, r1, #12
 8000b68:	b5c0      	push	{r6, r7, lr}
 8000b6a:	0a49      	lsrs	r1, r1, #9
 8000b6c:	0f47      	lsrs	r7, r0, #29
 8000b6e:	005e      	lsls	r6, r3, #1
 8000b70:	4339      	orrs	r1, r7
 8000b72:	031f      	lsls	r7, r3, #12
 8000b74:	0fdb      	lsrs	r3, r3, #31
 8000b76:	469c      	mov	ip, r3
 8000b78:	0065      	lsls	r5, r4, #1
 8000b7a:	0a7b      	lsrs	r3, r7, #9
 8000b7c:	0f57      	lsrs	r7, r2, #29
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	0d6d      	lsrs	r5, r5, #21
 8000b82:	0fe4      	lsrs	r4, r4, #31
 8000b84:	0d76      	lsrs	r6, r6, #21
 8000b86:	46a1      	mov	r9, r4
 8000b88:	00c0      	lsls	r0, r0, #3
 8000b8a:	46b8      	mov	r8, r7
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	1bab      	subs	r3, r5, r6
 8000b90:	4564      	cmp	r4, ip
 8000b92:	d07b      	beq.n	8000c8c <__aeabi_dadd+0x130>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd5f      	ble.n	8000c58 <__aeabi_dadd+0xfc>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x42>
 8000b9c:	e0a4      	b.n	8000ce8 <__aeabi_dadd+0x18c>
 8000b9e:	003e      	movs	r6, r7
 8000ba0:	4316      	orrs	r6, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4a>
 8000ba4:	e112      	b.n	8000dcc <__aeabi_dadd+0x270>
 8000ba6:	1e5e      	subs	r6, r3, #1
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x52>
 8000bac:	e19e      	b.n	8000eec <__aeabi_dadd+0x390>
 8000bae:	1a87      	subs	r7, r0, r2
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1a09      	subs	r1, r1, r0
 8000bbe:	020b      	lsls	r3, r1, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x68>
 8000bc2:	e131      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	0a4e      	lsrs	r6, r1, #9
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x72>
 8000bcc:	e16e      	b.n	8000eac <__aeabi_dadd+0x350>
 8000bce:	0030      	movs	r0, r6
 8000bd0:	f001 fd98 	bl	8002704 <__clzsi2>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	dd00      	ble.n	8000bde <__aeabi_dadd+0x82>
 8000bdc:	e161      	b.n	8000ea2 <__aeabi_dadd+0x346>
 8000bde:	2220      	movs	r2, #32
 8000be0:	0039      	movs	r1, r7
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	409e      	lsls	r6, r3
 8000be6:	40d1      	lsrs	r1, r2
 8000be8:	409f      	lsls	r7, r3
 8000bea:	430e      	orrs	r6, r1
 8000bec:	429d      	cmp	r5, r3
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dadd+0x96>
 8000bf0:	e151      	b.n	8000e96 <__aeabi_dadd+0x33a>
 8000bf2:	1b5d      	subs	r5, r3, r5
 8000bf4:	1c6b      	adds	r3, r5, #1
 8000bf6:	2b1f      	cmp	r3, #31
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_dadd+0xa0>
 8000bfa:	e17c      	b.n	8000ef6 <__aeabi_dadd+0x39a>
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	1ac9      	subs	r1, r1, r3
 8000c00:	003d      	movs	r5, r7
 8000c02:	0030      	movs	r0, r6
 8000c04:	408f      	lsls	r7, r1
 8000c06:	4088      	lsls	r0, r1
 8000c08:	40dd      	lsrs	r5, r3
 8000c0a:	1e79      	subs	r1, r7, #1
 8000c0c:	418f      	sbcs	r7, r1
 8000c0e:	0031      	movs	r1, r6
 8000c10:	2207      	movs	r2, #7
 8000c12:	4328      	orrs	r0, r5
 8000c14:	40d9      	lsrs	r1, r3
 8000c16:	2500      	movs	r5, #0
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c20:	230f      	movs	r3, #15
 8000c22:	403b      	ands	r3, r7
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	42bb      	cmp	r3, r7
 8000c2c:	41bf      	sbcs	r7, r7
 8000c2e:	427f      	negs	r7, r7
 8000c30:	19c9      	adds	r1, r1, r7
 8000c32:	001f      	movs	r7, r3
 8000c34:	020b      	lsls	r3, r1, #8
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_dadd+0xde>
 8000c38:	e226      	b.n	8001088 <__aeabi_dadd+0x52c>
 8000c3a:	1c6a      	adds	r2, r5, #1
 8000c3c:	4bc6      	ldr	r3, [pc, #792]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c3e:	0555      	lsls	r5, r2, #21
 8000c40:	0d6d      	lsrs	r5, r5, #21
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0xec>
 8000c46:	e106      	b.n	8000e56 <__aeabi_dadd+0x2fa>
 8000c48:	4ac4      	ldr	r2, [pc, #784]	; (8000f5c <__aeabi_dadd+0x400>)
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	0753      	lsls	r3, r2, #29
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	433b      	orrs	r3, r7
 8000c54:	0b12      	lsrs	r2, r2, #12
 8000c56:	e08e      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x102>
 8000c5c:	e0b8      	b.n	8000dd0 <__aeabi_dadd+0x274>
 8000c5e:	1c6b      	adds	r3, r5, #1
 8000c60:	055b      	lsls	r3, r3, #21
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dadd+0x10e>
 8000c68:	e130      	b.n	8000ecc <__aeabi_dadd+0x370>
 8000c6a:	1a87      	subs	r7, r0, r2
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	41b6      	sbcs	r6, r6
 8000c72:	1acb      	subs	r3, r1, r3
 8000c74:	4276      	negs	r6, r6
 8000c76:	1b9e      	subs	r6, r3, r6
 8000c78:	0233      	lsls	r3, r6, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x122>
 8000c7c:	e14c      	b.n	8000f18 <__aeabi_dadd+0x3bc>
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4333      	orrs	r3, r6
 8000c82:	d1a1      	bne.n	8000bc8 <__aeabi_dadd+0x6c>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2400      	movs	r4, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e070      	b.n	8000d6e <__aeabi_dadd+0x212>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x136>
 8000c90:	e0e5      	b.n	8000e5e <__aeabi_dadd+0x302>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x13c>
 8000c96:	e083      	b.n	8000da0 <__aeabi_dadd+0x244>
 8000c98:	4eaf      	ldr	r6, [pc, #700]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d060      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000c9e:	2680      	movs	r6, #128	; 0x80
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4337      	orrs	r7, r6
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	2b38      	cmp	r3, #56	; 0x38
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_dadd+0x150>
 8000caa:	e13e      	b.n	8000f2a <__aeabi_dadd+0x3ce>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	001f      	movs	r7, r3
 8000cb2:	1e7a      	subs	r2, r7, #1
 8000cb4:	4197      	sbcs	r7, r2
 8000cb6:	183f      	adds	r7, r7, r0
 8000cb8:	4287      	cmp	r7, r0
 8000cba:	4180      	sbcs	r0, r0
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	1809      	adds	r1, r1, r0
 8000cc0:	020b      	lsls	r3, r1, #8
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_dadd+0x16a>
 8000cc4:	e0b0      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000cc6:	4ba4      	ldr	r3, [pc, #656]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cc8:	3501      	adds	r5, #1
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dadd+0x174>
 8000cce:	e0c3      	b.n	8000e58 <__aeabi_dadd+0x2fc>
 8000cd0:	4aa2      	ldr	r2, [pc, #648]	; (8000f5c <__aeabi_dadd+0x400>)
 8000cd2:	087b      	lsrs	r3, r7, #1
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	400f      	ands	r7, r1
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	0851      	lsrs	r1, r2, #1
 8000cde:	07d3      	lsls	r3, r2, #31
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	403a      	ands	r2, r7
 8000ce6:	e799      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ce8:	4e9b      	ldr	r6, [pc, #620]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d038      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	4337      	orrs	r7, r6
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	2b38      	cmp	r3, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x1a0>
 8000cfa:	e0dc      	b.n	8000eb6 <__aeabi_dadd+0x35a>
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dadd+0x1a6>
 8000d00:	e130      	b.n	8000f64 <__aeabi_dadd+0x408>
 8000d02:	001e      	movs	r6, r3
 8000d04:	4647      	mov	r7, r8
 8000d06:	3e20      	subs	r6, #32
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	46bc      	mov	ip, r7
 8000d0c:	2b20      	cmp	r3, #32
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_dadd+0x1be>
 8000d10:	2640      	movs	r6, #64	; 0x40
 8000d12:	1af3      	subs	r3, r6, r3
 8000d14:	4646      	mov	r6, r8
 8000d16:	409e      	lsls	r6, r3
 8000d18:	4332      	orrs	r2, r6
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	1e7a      	subs	r2, r7, #1
 8000d20:	4197      	sbcs	r7, r2
 8000d22:	431f      	orrs	r7, r3
 8000d24:	e0cc      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x1d0>
 8000d2a:	e204      	b.n	8001136 <__aeabi_dadd+0x5da>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x1d8>
 8000d32:	e159      	b.n	8000fe8 <__aeabi_dadd+0x48c>
 8000d34:	074b      	lsls	r3, r1, #29
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	08c9      	lsrs	r1, r1, #3
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4219      	tst	r1, r3
 8000d42:	d008      	beq.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d44:	4645      	mov	r5, r8
 8000d46:	08ed      	lsrs	r5, r5, #3
 8000d48:	421d      	tst	r5, r3
 8000d4a:	d104      	bne.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	08d0      	lsrs	r0, r2, #3
 8000d50:	0759      	lsls	r1, r3, #29
 8000d52:	4308      	orrs	r0, r1
 8000d54:	0029      	movs	r1, r5
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	4d7f      	ldr	r5, [pc, #508]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	00c0      	lsls	r0, r0, #3
 8000d60:	074b      	lsls	r3, r1, #29
 8000d62:	08ca      	lsrs	r2, r1, #3
 8000d64:	497c      	ldr	r1, [pc, #496]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	d068      	beq.n	8000e40 <__aeabi_dadd+0x2e4>
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	056d      	lsls	r5, r5, #21
 8000d72:	0b12      	lsrs	r2, r2, #12
 8000d74:	0d6d      	lsrs	r5, r5, #21
 8000d76:	2100      	movs	r1, #0
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	0b13      	lsrs	r3, r2, #12
 8000d7e:	0d0a      	lsrs	r2, r1, #20
 8000d80:	0512      	lsls	r2, r2, #20
 8000d82:	431a      	orrs	r2, r3
 8000d84:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <__aeabi_dadd+0x404>)
 8000d86:	052d      	lsls	r5, r5, #20
 8000d88:	4013      	ands	r3, r2
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	07e4      	lsls	r4, r4, #31
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	4323      	orrs	r3, r4
 8000d94:	0019      	movs	r1, r3
 8000d96:	bc1c      	pop	{r2, r3, r4}
 8000d98:	4690      	mov	r8, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	003e      	movs	r6, r7
 8000da2:	4316      	orrs	r6, r2
 8000da4:	d012      	beq.n	8000dcc <__aeabi_dadd+0x270>
 8000da6:	1e5e      	subs	r6, r3, #1
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x252>
 8000dac:	e100      	b.n	8000fb0 <__aeabi_dadd+0x454>
 8000dae:	1887      	adds	r7, r0, r2
 8000db0:	4287      	cmp	r7, r0
 8000db2:	4180      	sbcs	r0, r0
 8000db4:	4441      	add	r1, r8
 8000db6:	4240      	negs	r0, r0
 8000db8:	1809      	adds	r1, r1, r0
 8000dba:	2501      	movs	r5, #1
 8000dbc:	020b      	lsls	r3, r1, #8
 8000dbe:	d533      	bpl.n	8000e28 <__aeabi_dadd+0x2cc>
 8000dc0:	2502      	movs	r5, #2
 8000dc2:	e785      	b.n	8000cd0 <__aeabi_dadd+0x174>
 8000dc4:	4664      	mov	r4, ip
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	4641      	mov	r1, r8
 8000dca:	0010      	movs	r0, r2
 8000dcc:	001d      	movs	r5, r3
 8000dce:	e7c7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x27a>
 8000dd4:	e0da      	b.n	8000f8c <__aeabi_dadd+0x430>
 8000dd6:	000c      	movs	r4, r1
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	d0f3      	beq.n	8000dc4 <__aeabi_dadd+0x268>
 8000ddc:	1c5c      	adds	r4, r3, #1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x286>
 8000de0:	e19f      	b.n	8001122 <__aeabi_dadd+0x5c6>
 8000de2:	4c5d      	ldr	r4, [pc, #372]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000de4:	42a6      	cmp	r6, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x28e>
 8000de8:	e12f      	b.n	800104a <__aeabi_dadd+0x4ee>
 8000dea:	43db      	mvns	r3, r3
 8000dec:	2b38      	cmp	r3, #56	; 0x38
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x296>
 8000df0:	e166      	b.n	80010c0 <__aeabi_dadd+0x564>
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x29c>
 8000df6:	e183      	b.n	8001100 <__aeabi_dadd+0x5a4>
 8000df8:	2420      	movs	r4, #32
 8000dfa:	0005      	movs	r5, r0
 8000dfc:	1ae4      	subs	r4, r4, r3
 8000dfe:	000f      	movs	r7, r1
 8000e00:	40dd      	lsrs	r5, r3
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	40a0      	lsls	r0, r4
 8000e06:	4643      	mov	r3, r8
 8000e08:	40a7      	lsls	r7, r4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	1e44      	subs	r4, r0, #1
 8000e0e:	41a0      	sbcs	r0, r4
 8000e10:	4698      	mov	r8, r3
 8000e12:	432f      	orrs	r7, r5
 8000e14:	4338      	orrs	r0, r7
 8000e16:	1a17      	subs	r7, r2, r0
 8000e18:	42ba      	cmp	r2, r7
 8000e1a:	4192      	sbcs	r2, r2
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a99      	subs	r1, r3, r2
 8000e22:	4664      	mov	r4, ip
 8000e24:	0035      	movs	r5, r6
 8000e26:	e6ca      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000e28:	2207      	movs	r2, #7
 8000e2a:	403a      	ands	r2, r7
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x2d6>
 8000e30:	e6f6      	b.n	8000c20 <__aeabi_dadd+0xc4>
 8000e32:	074b      	lsls	r3, r1, #29
 8000e34:	08ca      	lsrs	r2, r1, #3
 8000e36:	4948      	ldr	r1, [pc, #288]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e38:	08ff      	lsrs	r7, r7, #3
 8000e3a:	433b      	orrs	r3, r7
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d196      	bne.n	8000d6e <__aeabi_dadd+0x212>
 8000e40:	0019      	movs	r1, r3
 8000e42:	4311      	orrs	r1, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x2ec>
 8000e46:	e19e      	b.n	8001186 <__aeabi_dadd+0x62a>
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	0b12      	lsrs	r2, r2, #12
 8000e52:	4d41      	ldr	r5, [pc, #260]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e54:	e78f      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e56:	0015      	movs	r5, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e78b      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x308>
 8000e62:	e0c7      	b.n	8000ff4 <__aeabi_dadd+0x498>
 8000e64:	1c6b      	adds	r3, r5, #1
 8000e66:	055f      	lsls	r7, r3, #21
 8000e68:	0d7f      	lsrs	r7, r7, #21
 8000e6a:	2f01      	cmp	r7, #1
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x314>
 8000e6e:	e0f1      	b.n	8001054 <__aeabi_dadd+0x4f8>
 8000e70:	4d39      	ldr	r5, [pc, #228]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x31c>
 8000e76:	e0b9      	b.n	8000fec <__aeabi_dadd+0x490>
 8000e78:	1885      	adds	r5, r0, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4285      	cmp	r5, r0
 8000e7e:	4189      	sbcs	r1, r1
 8000e80:	4442      	add	r2, r8
 8000e82:	4249      	negs	r1, r1
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	2207      	movs	r2, #7
 8000e88:	07cf      	lsls	r7, r1, #31
 8000e8a:	086d      	lsrs	r5, r5, #1
 8000e8c:	432f      	orrs	r7, r5
 8000e8e:	0849      	lsrs	r1, r1, #1
 8000e90:	403a      	ands	r2, r7
 8000e92:	001d      	movs	r5, r3
 8000e94:	e6c2      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000e96:	2207      	movs	r2, #7
 8000e98:	4930      	ldr	r1, [pc, #192]	; (8000f5c <__aeabi_dadd+0x400>)
 8000e9a:	1aed      	subs	r5, r5, r3
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	403a      	ands	r2, r7
 8000ea0:	e6bc      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ea2:	003e      	movs	r6, r7
 8000ea4:	3828      	subs	r0, #40	; 0x28
 8000ea6:	4086      	lsls	r6, r0
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e69f      	b.n	8000bec <__aeabi_dadd+0x90>
 8000eac:	0038      	movs	r0, r7
 8000eae:	f001 fc29 	bl	8002704 <__clzsi2>
 8000eb2:	3020      	adds	r0, #32
 8000eb4:	e68e      	b.n	8000bd4 <__aeabi_dadd+0x78>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	001f      	movs	r7, r3
 8000ebc:	1e7a      	subs	r2, r7, #1
 8000ebe:	4197      	sbcs	r7, r2
 8000ec0:	1bc7      	subs	r7, r0, r7
 8000ec2:	42b8      	cmp	r0, r7
 8000ec4:	4180      	sbcs	r0, r0
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	e678      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000ecc:	000e      	movs	r6, r1
 8000ece:	003b      	movs	r3, r7
 8000ed0:	4306      	orrs	r6, r0
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d161      	bne.n	8000f9c <__aeabi_dadd+0x440>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x382>
 8000edc:	e0f4      	b.n	80010c8 <__aeabi_dadd+0x56c>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x388>
 8000ee2:	e11b      	b.n	800111c <__aeabi_dadd+0x5c0>
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	0039      	movs	r1, r7
 8000ee8:	0010      	movs	r0, r2
 8000eea:	e739      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000eec:	4f1a      	ldr	r7, [pc, #104]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000eee:	42bb      	cmp	r3, r7
 8000ef0:	d07a      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	e6ff      	b.n	8000cf6 <__aeabi_dadd+0x19a>
 8000ef6:	0030      	movs	r0, r6
 8000ef8:	3d1f      	subs	r5, #31
 8000efa:	40e8      	lsrs	r0, r5
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d003      	beq.n	8000f08 <__aeabi_dadd+0x3ac>
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	409e      	lsls	r6, r3
 8000f06:	4337      	orrs	r7, r6
 8000f08:	1e7b      	subs	r3, r7, #1
 8000f0a:	419f      	sbcs	r7, r3
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4307      	orrs	r7, r0
 8000f10:	403a      	ands	r2, r7
 8000f12:	2100      	movs	r1, #0
 8000f14:	2500      	movs	r5, #0
 8000f16:	e789      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8000f18:	1a17      	subs	r7, r2, r0
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	42ba      	cmp	r2, r7
 8000f1e:	41b6      	sbcs	r6, r6
 8000f20:	1a59      	subs	r1, r3, r1
 8000f22:	4276      	negs	r6, r6
 8000f24:	1b8e      	subs	r6, r1, r6
 8000f26:	4664      	mov	r4, ip
 8000f28:	e64e      	b.n	8000bc8 <__aeabi_dadd+0x6c>
 8000f2a:	2b1f      	cmp	r3, #31
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dadd+0x3d4>
 8000f2e:	e0ad      	b.n	800108c <__aeabi_dadd+0x530>
 8000f30:	2620      	movs	r6, #32
 8000f32:	4647      	mov	r7, r8
 8000f34:	1af6      	subs	r6, r6, r3
 8000f36:	40b7      	lsls	r7, r6
 8000f38:	46b9      	mov	r9, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	40df      	lsrs	r7, r3
 8000f40:	464e      	mov	r6, r9
 8000f42:	433e      	orrs	r6, r7
 8000f44:	0037      	movs	r7, r6
 8000f46:	4656      	mov	r6, sl
 8000f48:	40b2      	lsls	r2, r6
 8000f4a:	1e56      	subs	r6, r2, #1
 8000f4c:	41b2      	sbcs	r2, r6
 8000f4e:	4317      	orrs	r7, r2
 8000f50:	4642      	mov	r2, r8
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1889      	adds	r1, r1, r2
 8000f56:	e6ae      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ff7fffff 	.word	0xff7fffff
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	2620      	movs	r6, #32
 8000f66:	4647      	mov	r7, r8
 8000f68:	1af6      	subs	r6, r6, r3
 8000f6a:	40b7      	lsls	r7, r6
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	46b2      	mov	sl, r6
 8000f72:	40df      	lsrs	r7, r3
 8000f74:	464e      	mov	r6, r9
 8000f76:	433e      	orrs	r6, r7
 8000f78:	0037      	movs	r7, r6
 8000f7a:	4656      	mov	r6, sl
 8000f7c:	40b2      	lsls	r2, r6
 8000f7e:	1e56      	subs	r6, r2, #1
 8000f80:	41b2      	sbcs	r2, r6
 8000f82:	4317      	orrs	r7, r2
 8000f84:	4642      	mov	r2, r8
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	e799      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000f8c:	4c7f      	ldr	r4, [pc, #508]	; (800118c <__aeabi_dadd+0x630>)
 8000f8e:	42a6      	cmp	r6, r4
 8000f90:	d05b      	beq.n	800104a <__aeabi_dadd+0x4ee>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	0424      	lsls	r4, r4, #16
 8000f96:	425b      	negs	r3, r3
 8000f98:	4321      	orrs	r1, r4
 8000f9a:	e727      	b.n	8000dec <__aeabi_dadd+0x290>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_dadd+0x45e>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x44a>
 8000fa4:	e0cb      	b.n	800113e <__aeabi_dadd+0x5e2>
 8000fa6:	4664      	mov	r4, ip
 8000fa8:	0039      	movs	r1, r7
 8000faa:	0010      	movs	r0, r2
 8000fac:	4d77      	ldr	r5, [pc, #476]	; (800118c <__aeabi_dadd+0x630>)
 8000fae:	e6d7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fb0:	4f76      	ldr	r7, [pc, #472]	; (800118c <__aeabi_dadd+0x630>)
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	d018      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e675      	b.n	8000ca6 <__aeabi_dadd+0x14a>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d014      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fbe:	074b      	lsls	r3, r1, #29
 8000fc0:	08c0      	lsrs	r0, r0, #3
 8000fc2:	4318      	orrs	r0, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	08c9      	lsrs	r1, r1, #3
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4219      	tst	r1, r3
 8000fcc:	d007      	beq.n	8000fde <__aeabi_dadd+0x482>
 8000fce:	08fc      	lsrs	r4, r7, #3
 8000fd0:	421c      	tst	r4, r3
 8000fd2:	d104      	bne.n	8000fde <__aeabi_dadd+0x482>
 8000fd4:	0779      	lsls	r1, r7, #29
 8000fd6:	08d0      	lsrs	r0, r2, #3
 8000fd8:	4308      	orrs	r0, r1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	0021      	movs	r1, r4
 8000fde:	464c      	mov	r4, r9
 8000fe0:	0f42      	lsrs	r2, r0, #29
 8000fe2:	00c9      	lsls	r1, r1, #3
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	00c0      	lsls	r0, r0, #3
 8000fe8:	4d68      	ldr	r5, [pc, #416]	; (800118c <__aeabi_dadd+0x630>)
 8000fea:	e6b9      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fec:	001d      	movs	r5, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e6c0      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d15b      	bne.n	80010b0 <__aeabi_dadd+0x554>
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x4a4>
 8000ffe:	e6e2      	b.n	8000dc6 <__aeabi_dadd+0x26a>
 8001000:	1c5d      	adds	r5, r3, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x4aa>
 8001004:	e0b0      	b.n	8001168 <__aeabi_dadd+0x60c>
 8001006:	4d61      	ldr	r5, [pc, #388]	; (800118c <__aeabi_dadd+0x630>)
 8001008:	42ae      	cmp	r6, r5
 800100a:	d01f      	beq.n	800104c <__aeabi_dadd+0x4f0>
 800100c:	43db      	mvns	r3, r3
 800100e:	2b38      	cmp	r3, #56	; 0x38
 8001010:	dc71      	bgt.n	80010f6 <__aeabi_dadd+0x59a>
 8001012:	2b1f      	cmp	r3, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dadd+0x4bc>
 8001016:	e096      	b.n	8001146 <__aeabi_dadd+0x5ea>
 8001018:	2520      	movs	r5, #32
 800101a:	000f      	movs	r7, r1
 800101c:	1aed      	subs	r5, r5, r3
 800101e:	40af      	lsls	r7, r5
 8001020:	46b9      	mov	r9, r7
 8001022:	0007      	movs	r7, r0
 8001024:	46aa      	mov	sl, r5
 8001026:	40df      	lsrs	r7, r3
 8001028:	464d      	mov	r5, r9
 800102a:	433d      	orrs	r5, r7
 800102c:	002f      	movs	r7, r5
 800102e:	4655      	mov	r5, sl
 8001030:	40a8      	lsls	r0, r5
 8001032:	40d9      	lsrs	r1, r3
 8001034:	1e45      	subs	r5, r0, #1
 8001036:	41a8      	sbcs	r0, r5
 8001038:	4488      	add	r8, r1
 800103a:	4307      	orrs	r7, r0
 800103c:	18bf      	adds	r7, r7, r2
 800103e:	4297      	cmp	r7, r2
 8001040:	4192      	sbcs	r2, r2
 8001042:	4251      	negs	r1, r2
 8001044:	4441      	add	r1, r8
 8001046:	0035      	movs	r5, r6
 8001048:	e63a      	b.n	8000cc0 <__aeabi_dadd+0x164>
 800104a:	4664      	mov	r4, ip
 800104c:	0035      	movs	r5, r6
 800104e:	4641      	mov	r1, r8
 8001050:	0010      	movs	r0, r2
 8001052:	e685      	b.n	8000d60 <__aeabi_dadd+0x204>
 8001054:	000b      	movs	r3, r1
 8001056:	4303      	orrs	r3, r0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x502>
 800105c:	e663      	b.n	8000d26 <__aeabi_dadd+0x1ca>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f5      	beq.n	800104e <__aeabi_dadd+0x4f2>
 8001062:	4643      	mov	r3, r8
 8001064:	4313      	orrs	r3, r2
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x50e>
 8001068:	e67a      	b.n	8000d60 <__aeabi_dadd+0x204>
 800106a:	1887      	adds	r7, r0, r2
 800106c:	4287      	cmp	r7, r0
 800106e:	4180      	sbcs	r0, r0
 8001070:	2207      	movs	r2, #7
 8001072:	4441      	add	r1, r8
 8001074:	4240      	negs	r0, r0
 8001076:	1809      	adds	r1, r1, r0
 8001078:	403a      	ands	r2, r7
 800107a:	020b      	lsls	r3, r1, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dadd+0x524>
 800107e:	e6d5      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <__aeabi_dadd+0x634>)
 8001082:	3501      	adds	r5, #1
 8001084:	4019      	ands	r1, r3
 8001086:	e5c9      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8001088:	0038      	movs	r0, r7
 800108a:	e669      	b.n	8000d60 <__aeabi_dadd+0x204>
 800108c:	001e      	movs	r6, r3
 800108e:	4647      	mov	r7, r8
 8001090:	3e20      	subs	r6, #32
 8001092:	40f7      	lsrs	r7, r6
 8001094:	46bc      	mov	ip, r7
 8001096:	2b20      	cmp	r3, #32
 8001098:	d004      	beq.n	80010a4 <__aeabi_dadd+0x548>
 800109a:	2640      	movs	r6, #64	; 0x40
 800109c:	1af3      	subs	r3, r6, r3
 800109e:	4646      	mov	r6, r8
 80010a0:	409e      	lsls	r6, r3
 80010a2:	4332      	orrs	r2, r6
 80010a4:	0017      	movs	r7, r2
 80010a6:	4663      	mov	r3, ip
 80010a8:	1e7a      	subs	r2, r7, #1
 80010aa:	4197      	sbcs	r7, r2
 80010ac:	431f      	orrs	r7, r3
 80010ae:	e602      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 80010b0:	4d36      	ldr	r5, [pc, #216]	; (800118c <__aeabi_dadd+0x630>)
 80010b2:	42ae      	cmp	r6, r5
 80010b4:	d0ca      	beq.n	800104c <__aeabi_dadd+0x4f0>
 80010b6:	2580      	movs	r5, #128	; 0x80
 80010b8:	042d      	lsls	r5, r5, #16
 80010ba:	425b      	negs	r3, r3
 80010bc:	4329      	orrs	r1, r5
 80010be:	e7a6      	b.n	800100e <__aeabi_dadd+0x4b2>
 80010c0:	4308      	orrs	r0, r1
 80010c2:	1e41      	subs	r1, r0, #1
 80010c4:	4188      	sbcs	r0, r1
 80010c6:	e6a6      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x572>
 80010cc:	e648      	b.n	8000d60 <__aeabi_dadd+0x204>
 80010ce:	1a87      	subs	r7, r0, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	42b8      	cmp	r0, r7
 80010d4:	41b6      	sbcs	r6, r6
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	4276      	negs	r6, r6
 80010da:	1b9e      	subs	r6, r3, r6
 80010dc:	0233      	lsls	r3, r6, #8
 80010de:	d54b      	bpl.n	8001178 <__aeabi_dadd+0x61c>
 80010e0:	1a17      	subs	r7, r2, r0
 80010e2:	4643      	mov	r3, r8
 80010e4:	42ba      	cmp	r2, r7
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	1a59      	subs	r1, r3, r1
 80010ea:	4252      	negs	r2, r2
 80010ec:	1a89      	subs	r1, r1, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	4664      	mov	r4, ip
 80010f2:	403a      	ands	r2, r7
 80010f4:	e592      	b.n	8000c1c <__aeabi_dadd+0xc0>
 80010f6:	4301      	orrs	r1, r0
 80010f8:	000f      	movs	r7, r1
 80010fa:	1e79      	subs	r1, r7, #1
 80010fc:	418f      	sbcs	r7, r1
 80010fe:	e79d      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001100:	001c      	movs	r4, r3
 8001102:	000f      	movs	r7, r1
 8001104:	3c20      	subs	r4, #32
 8001106:	40e7      	lsrs	r7, r4
 8001108:	2b20      	cmp	r3, #32
 800110a:	d003      	beq.n	8001114 <__aeabi_dadd+0x5b8>
 800110c:	2440      	movs	r4, #64	; 0x40
 800110e:	1ae3      	subs	r3, r4, r3
 8001110:	4099      	lsls	r1, r3
 8001112:	4308      	orrs	r0, r1
 8001114:	1e41      	subs	r1, r0, #1
 8001116:	4188      	sbcs	r0, r1
 8001118:	4338      	orrs	r0, r7
 800111a:	e67c      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 800111c:	2200      	movs	r2, #0
 800111e:	2400      	movs	r4, #0
 8001120:	e625      	b.n	8000d6e <__aeabi_dadd+0x212>
 8001122:	1a17      	subs	r7, r2, r0
 8001124:	4643      	mov	r3, r8
 8001126:	42ba      	cmp	r2, r7
 8001128:	4192      	sbcs	r2, r2
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	4252      	negs	r2, r2
 800112e:	1a89      	subs	r1, r1, r2
 8001130:	4664      	mov	r4, ip
 8001132:	0035      	movs	r5, r6
 8001134:	e543      	b.n	8000bbe <__aeabi_dadd+0x62>
 8001136:	4641      	mov	r1, r8
 8001138:	0010      	movs	r0, r2
 800113a:	4d14      	ldr	r5, [pc, #80]	; (800118c <__aeabi_dadd+0x630>)
 800113c:	e610      	b.n	8000d60 <__aeabi_dadd+0x204>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	2400      	movs	r4, #0
 8001142:	0312      	lsls	r2, r2, #12
 8001144:	e680      	b.n	8000e48 <__aeabi_dadd+0x2ec>
 8001146:	001d      	movs	r5, r3
 8001148:	000f      	movs	r7, r1
 800114a:	3d20      	subs	r5, #32
 800114c:	40ef      	lsrs	r7, r5
 800114e:	46bc      	mov	ip, r7
 8001150:	2b20      	cmp	r3, #32
 8001152:	d003      	beq.n	800115c <__aeabi_dadd+0x600>
 8001154:	2540      	movs	r5, #64	; 0x40
 8001156:	1aeb      	subs	r3, r5, r3
 8001158:	4099      	lsls	r1, r3
 800115a:	4308      	orrs	r0, r1
 800115c:	0007      	movs	r7, r0
 800115e:	4663      	mov	r3, ip
 8001160:	1e78      	subs	r0, r7, #1
 8001162:	4187      	sbcs	r7, r0
 8001164:	431f      	orrs	r7, r3
 8001166:	e769      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001168:	1887      	adds	r7, r0, r2
 800116a:	4297      	cmp	r7, r2
 800116c:	419b      	sbcs	r3, r3
 800116e:	4441      	add	r1, r8
 8001170:	425b      	negs	r3, r3
 8001172:	18c9      	adds	r1, r1, r3
 8001174:	0035      	movs	r5, r6
 8001176:	e5a3      	b.n	8000cc0 <__aeabi_dadd+0x164>
 8001178:	003b      	movs	r3, r7
 800117a:	4333      	orrs	r3, r6
 800117c:	d0ce      	beq.n	800111c <__aeabi_dadd+0x5c0>
 800117e:	2207      	movs	r2, #7
 8001180:	0031      	movs	r1, r6
 8001182:	403a      	ands	r2, r7
 8001184:	e652      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001186:	2300      	movs	r3, #0
 8001188:	001a      	movs	r2, r3
 800118a:	e5f4      	b.n	8000d76 <__aeabi_dadd+0x21a>
 800118c:	000007ff 	.word	0x000007ff
 8001190:	ff7fffff 	.word	0xff7fffff

08001194 <__aeabi_ddiv>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	4657      	mov	r7, sl
 8001198:	46de      	mov	lr, fp
 800119a:	464e      	mov	r6, r9
 800119c:	4645      	mov	r5, r8
 800119e:	b5e0      	push	{r5, r6, r7, lr}
 80011a0:	4683      	mov	fp, r0
 80011a2:	0007      	movs	r7, r0
 80011a4:	030e      	lsls	r6, r1, #12
 80011a6:	0048      	lsls	r0, r1, #1
 80011a8:	b085      	sub	sp, #20
 80011aa:	4692      	mov	sl, r2
 80011ac:	001c      	movs	r4, r3
 80011ae:	0b36      	lsrs	r6, r6, #12
 80011b0:	0d40      	lsrs	r0, r0, #21
 80011b2:	0fcd      	lsrs	r5, r1, #31
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x26>
 80011b8:	e09d      	b.n	80012f6 <__aeabi_ddiv+0x162>
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d039      	beq.n	8001234 <__aeabi_ddiv+0xa0>
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	00f6      	lsls	r6, r6, #3
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431e      	orrs	r6, r3
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <__aeabi_ddiv+0x280>)
 80011ca:	0f7b      	lsrs	r3, r7, #29
 80011cc:	4333      	orrs	r3, r6
 80011ce:	4699      	mov	r9, r3
 80011d0:	4694      	mov	ip, r2
 80011d2:	0003      	movs	r3, r0
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2600      	movs	r6, #0
 80011dc:	00ff      	lsls	r7, r7, #3
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	0323      	lsls	r3, r4, #12
 80011e2:	0b1b      	lsrs	r3, r3, #12
 80011e4:	4698      	mov	r8, r3
 80011e6:	0063      	lsls	r3, r4, #1
 80011e8:	0fe4      	lsrs	r4, r4, #31
 80011ea:	4652      	mov	r2, sl
 80011ec:	0d5b      	lsrs	r3, r3, #21
 80011ee:	9401      	str	r4, [sp, #4]
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x60>
 80011f2:	e0b3      	b.n	800135c <__aeabi_ddiv+0x1c8>
 80011f4:	4986      	ldr	r1, [pc, #536]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x68>
 80011fa:	e09e      	b.n	800133a <__aeabi_ddiv+0x1a6>
 80011fc:	4642      	mov	r2, r8
 80011fe:	00d1      	lsls	r1, r2, #3
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	430a      	orrs	r2, r1
 8001206:	4651      	mov	r1, sl
 8001208:	0f49      	lsrs	r1, r1, #29
 800120a:	4311      	orrs	r1, r2
 800120c:	468b      	mov	fp, r1
 800120e:	4981      	ldr	r1, [pc, #516]	; (8001414 <__aeabi_ddiv+0x280>)
 8001210:	4652      	mov	r2, sl
 8001212:	468c      	mov	ip, r1
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	4463      	add	r3, ip
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	2100      	movs	r1, #0
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	002b      	movs	r3, r5
 8001222:	4063      	eors	r3, r4
 8001224:	469a      	mov	sl, r3
 8001226:	2e0f      	cmp	r6, #15
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x98>
 800122a:	e105      	b.n	8001438 <__aeabi_ddiv+0x2a4>
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <__aeabi_ddiv+0x284>)
 800122e:	00b6      	lsls	r6, r6, #2
 8001230:	599b      	ldr	r3, [r3, r6]
 8001232:	469f      	mov	pc, r3
 8001234:	465b      	mov	r3, fp
 8001236:	4333      	orrs	r3, r6
 8001238:	4699      	mov	r9, r3
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0xaa>
 800123c:	e0b8      	b.n	80013b0 <__aeabi_ddiv+0x21c>
 800123e:	2302      	movs	r3, #2
 8001240:	2608      	movs	r6, #8
 8001242:	2700      	movs	r7, #0
 8001244:	9000      	str	r0, [sp, #0]
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	e7ca      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800124a:	46cb      	mov	fp, r9
 800124c:	003a      	movs	r2, r7
 800124e:	9902      	ldr	r1, [sp, #8]
 8001250:	9501      	str	r5, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	469a      	mov	sl, r3
 8001256:	2902      	cmp	r1, #2
 8001258:	d027      	beq.n	80012aa <__aeabi_ddiv+0x116>
 800125a:	2903      	cmp	r1, #3
 800125c:	d100      	bne.n	8001260 <__aeabi_ddiv+0xcc>
 800125e:	e280      	b.n	8001762 <__aeabi_ddiv+0x5ce>
 8001260:	2901      	cmp	r1, #1
 8001262:	d044      	beq.n	80012ee <__aeabi_ddiv+0x15a>
 8001264:	496d      	ldr	r1, [pc, #436]	; (800141c <__aeabi_ddiv+0x288>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	001c      	movs	r4, r3
 800126e:	2c00      	cmp	r4, #0
 8001270:	dd38      	ble.n	80012e4 <__aeabi_ddiv+0x150>
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	d000      	beq.n	8001278 <__aeabi_ddiv+0xe4>
 8001276:	e213      	b.n	80016a0 <__aeabi_ddiv+0x50c>
 8001278:	08d2      	lsrs	r2, r2, #3
 800127a:	465b      	mov	r3, fp
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	d509      	bpl.n	8001294 <__aeabi_ddiv+0x100>
 8001280:	4659      	mov	r1, fp
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <__aeabi_ddiv+0x28c>)
 8001284:	4019      	ands	r1, r3
 8001286:	468b      	mov	fp, r1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	00c9      	lsls	r1, r1, #3
 800128c:	468c      	mov	ip, r1
 800128e:	9b00      	ldr	r3, [sp, #0]
 8001290:	4463      	add	r3, ip
 8001292:	001c      	movs	r4, r3
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <__aeabi_ddiv+0x290>)
 8001296:	429c      	cmp	r4, r3
 8001298:	dc07      	bgt.n	80012aa <__aeabi_ddiv+0x116>
 800129a:	465b      	mov	r3, fp
 800129c:	0564      	lsls	r4, r4, #21
 800129e:	075f      	lsls	r7, r3, #29
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4317      	orrs	r7, r2
 80012a4:	0b1b      	lsrs	r3, r3, #12
 80012a6:	0d62      	lsrs	r2, r4, #21
 80012a8:	e002      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2700      	movs	r7, #0
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <__aeabi_ddiv+0x27c>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	0b1c      	lsrs	r4, r3, #12
 80012b6:	0d0b      	lsrs	r3, r1, #20
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	4323      	orrs	r3, r4
 80012bc:	0514      	lsls	r4, r2, #20
 80012be:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <__aeabi_ddiv+0x294>)
 80012c0:	0038      	movs	r0, r7
 80012c2:	4013      	ands	r3, r2
 80012c4:	431c      	orrs	r4, r3
 80012c6:	4653      	mov	r3, sl
 80012c8:	0064      	lsls	r4, r4, #1
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	0864      	lsrs	r4, r4, #1
 80012ce:	431c      	orrs	r4, r3
 80012d0:	0021      	movs	r1, r4
 80012d2:	b005      	add	sp, #20
 80012d4:	bc3c      	pop	{r2, r3, r4, r5}
 80012d6:	4690      	mov	r8, r2
 80012d8:	4699      	mov	r9, r3
 80012da:	46a2      	mov	sl, r4
 80012dc:	46ab      	mov	fp, r5
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	2201      	movs	r2, #1
 80012e2:	4252      	negs	r2, r2
 80012e4:	2301      	movs	r3, #1
 80012e6:	1b1b      	subs	r3, r3, r4
 80012e8:	2b38      	cmp	r3, #56	; 0x38
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_ddiv+0x15a>
 80012ec:	e1ad      	b.n	800164a <__aeabi_ddiv+0x4b6>
 80012ee:	2200      	movs	r2, #0
 80012f0:	2300      	movs	r3, #0
 80012f2:	2700      	movs	r7, #0
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012f6:	465b      	mov	r3, fp
 80012f8:	4333      	orrs	r3, r6
 80012fa:	4699      	mov	r9, r3
 80012fc:	d05e      	beq.n	80013bc <__aeabi_ddiv+0x228>
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x170>
 8001302:	e18a      	b.n	800161a <__aeabi_ddiv+0x486>
 8001304:	0030      	movs	r0, r6
 8001306:	f001 f9fd 	bl	8002704 <__clzsi2>
 800130a:	0003      	movs	r3, r0
 800130c:	3b0b      	subs	r3, #11
 800130e:	2b1c      	cmp	r3, #28
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x180>
 8001312:	e17b      	b.n	800160c <__aeabi_ddiv+0x478>
 8001314:	221d      	movs	r2, #29
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	465a      	mov	r2, fp
 800131a:	0001      	movs	r1, r0
 800131c:	40da      	lsrs	r2, r3
 800131e:	3908      	subs	r1, #8
 8001320:	408e      	lsls	r6, r1
 8001322:	0013      	movs	r3, r2
 8001324:	465f      	mov	r7, fp
 8001326:	4333      	orrs	r3, r6
 8001328:	4699      	mov	r9, r3
 800132a:	408f      	lsls	r7, r1
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <__aeabi_ddiv+0x298>)
 800132e:	2600      	movs	r6, #0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e752      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800133a:	4641      	mov	r1, r8
 800133c:	4653      	mov	r3, sl
 800133e:	430b      	orrs	r3, r1
 8001340:	493b      	ldr	r1, [pc, #236]	; (8001430 <__aeabi_ddiv+0x29c>)
 8001342:	469b      	mov	fp, r3
 8001344:	468c      	mov	ip, r1
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	4463      	add	r3, ip
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	465b      	mov	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	d13b      	bne.n	80013ca <__aeabi_ddiv+0x236>
 8001352:	2302      	movs	r3, #2
 8001354:	2200      	movs	r2, #0
 8001356:	431e      	orrs	r6, r3
 8001358:	2102      	movs	r1, #2
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x8c>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	469b      	mov	fp, r3
 8001362:	d037      	beq.n	80013d4 <__aeabi_ddiv+0x240>
 8001364:	4643      	mov	r3, r8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x1d8>
 800136a:	e162      	b.n	8001632 <__aeabi_ddiv+0x49e>
 800136c:	4640      	mov	r0, r8
 800136e:	f001 f9c9 	bl	8002704 <__clzsi2>
 8001372:	0003      	movs	r3, r0
 8001374:	3b0b      	subs	r3, #11
 8001376:	2b1c      	cmp	r3, #28
 8001378:	dd00      	ble.n	800137c <__aeabi_ddiv+0x1e8>
 800137a:	e153      	b.n	8001624 <__aeabi_ddiv+0x490>
 800137c:	0002      	movs	r2, r0
 800137e:	4641      	mov	r1, r8
 8001380:	3a08      	subs	r2, #8
 8001382:	4091      	lsls	r1, r2
 8001384:	4688      	mov	r8, r1
 8001386:	211d      	movs	r1, #29
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	4651      	mov	r1, sl
 800138c:	40d9      	lsrs	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	4641      	mov	r1, r8
 8001392:	430b      	orrs	r3, r1
 8001394:	469b      	mov	fp, r3
 8001396:	4653      	mov	r3, sl
 8001398:	4093      	lsls	r3, r2
 800139a:	001a      	movs	r2, r3
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <__aeabi_ddiv+0x2a0>)
 80013a0:	469c      	mov	ip, r3
 80013a2:	4460      	add	r0, ip
 80013a4:	0003      	movs	r3, r0
 80013a6:	468c      	mov	ip, r1
 80013a8:	4463      	add	r3, ip
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e737      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013b0:	2303      	movs	r3, #3
 80013b2:	46b1      	mov	r9, r6
 80013b4:	9000      	str	r0, [sp, #0]
 80013b6:	260c      	movs	r6, #12
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	e711      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	2604      	movs	r6, #4
 80013c4:	2700      	movs	r7, #0
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	e70a      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013ca:	2303      	movs	r3, #3
 80013cc:	46c3      	mov	fp, r8
 80013ce:	431e      	orrs	r6, r3
 80013d0:	2103      	movs	r1, #3
 80013d2:	e725      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013d4:	3301      	adds	r3, #1
 80013d6:	431e      	orrs	r6, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	e720      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013de:	2300      	movs	r3, #0
 80013e0:	469a      	mov	sl, r3
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	2700      	movs	r7, #0
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <__aeabi_ddiv+0x27c>)
 80013ea:	e761      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	4649      	mov	r1, r9
 80013f0:	031b      	lsls	r3, r3, #12
 80013f2:	4219      	tst	r1, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x264>
 80013f6:	e0e2      	b.n	80015be <__aeabi_ddiv+0x42a>
 80013f8:	4659      	mov	r1, fp
 80013fa:	4219      	tst	r1, r3
 80013fc:	d000      	beq.n	8001400 <__aeabi_ddiv+0x26c>
 80013fe:	e0de      	b.n	80015be <__aeabi_ddiv+0x42a>
 8001400:	430b      	orrs	r3, r1
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0017      	movs	r7, r2
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	46a2      	mov	sl, r4
 800140a:	4a01      	ldr	r2, [pc, #4]	; (8001410 <__aeabi_ddiv+0x27c>)
 800140c:	e750      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	fffffc01 	.word	0xfffffc01
 8001418:	0801b6c4 	.word	0x0801b6c4
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	800fffff 	.word	0x800fffff
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	fffff801 	.word	0xfffff801
 8001434:	000003f3 	.word	0x000003f3
 8001438:	45d9      	cmp	r9, fp
 800143a:	d900      	bls.n	800143e <__aeabi_ddiv+0x2aa>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x442>
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x2ae>
 8001440:	e0c6      	b.n	80015d0 <__aeabi_ddiv+0x43c>
 8001442:	003c      	movs	r4, r7
 8001444:	4648      	mov	r0, r9
 8001446:	2700      	movs	r7, #0
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	465b      	mov	r3, fp
 8001450:	0e16      	lsrs	r6, r2, #24
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	431e      	orrs	r6, r3
 8001456:	0213      	lsls	r3, r2, #8
 8001458:	4698      	mov	r8, r3
 800145a:	0433      	lsls	r3, r6, #16
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	4699      	mov	r9, r3
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	9101      	str	r1, [sp, #4]
 8001464:	f7fe fede 	bl	8000224 <__aeabi_uidivmod>
 8001468:	464a      	mov	r2, r9
 800146a:	4342      	muls	r2, r0
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	0c21      	lsrs	r1, r4, #16
 8001470:	0005      	movs	r5, r0
 8001472:	4319      	orrs	r1, r3
 8001474:	428a      	cmp	r2, r1
 8001476:	d907      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001478:	1989      	adds	r1, r1, r6
 800147a:	3d01      	subs	r5, #1
 800147c:	428e      	cmp	r6, r1
 800147e:	d803      	bhi.n	8001488 <__aeabi_ddiv+0x2f4>
 8001480:	428a      	cmp	r2, r1
 8001482:	d901      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001484:	1e85      	subs	r5, r0, #2
 8001486:	1989      	adds	r1, r1, r6
 8001488:	1a88      	subs	r0, r1, r2
 800148a:	9901      	ldr	r1, [sp, #4]
 800148c:	f7fe feca 	bl	8000224 <__aeabi_uidivmod>
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	468c      	mov	ip, r1
 8001494:	464a      	mov	r2, r9
 8001496:	0421      	lsls	r1, r4, #16
 8001498:	4664      	mov	r4, ip
 800149a:	4342      	muls	r2, r0
 800149c:	0c09      	lsrs	r1, r1, #16
 800149e:	0003      	movs	r3, r0
 80014a0:	4321      	orrs	r1, r4
 80014a2:	428a      	cmp	r2, r1
 80014a4:	d904      	bls.n	80014b0 <__aeabi_ddiv+0x31c>
 80014a6:	1989      	adds	r1, r1, r6
 80014a8:	3b01      	subs	r3, #1
 80014aa:	428e      	cmp	r6, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x31c>
 80014ae:	e0f1      	b.n	8001694 <__aeabi_ddiv+0x500>
 80014b0:	042d      	lsls	r5, r5, #16
 80014b2:	431d      	orrs	r5, r3
 80014b4:	46ab      	mov	fp, r5
 80014b6:	4643      	mov	r3, r8
 80014b8:	1a89      	subs	r1, r1, r2
 80014ba:	4642      	mov	r2, r8
 80014bc:	0c28      	lsrs	r0, r5, #16
 80014be:	0412      	lsls	r2, r2, #16
 80014c0:	0c1d      	lsrs	r5, r3, #16
 80014c2:	465b      	mov	r3, fp
 80014c4:	0c14      	lsrs	r4, r2, #16
 80014c6:	0022      	movs	r2, r4
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	435a      	muls	r2, r3
 80014ce:	9403      	str	r4, [sp, #12]
 80014d0:	436b      	muls	r3, r5
 80014d2:	4344      	muls	r4, r0
 80014d4:	9502      	str	r5, [sp, #8]
 80014d6:	4368      	muls	r0, r5
 80014d8:	191b      	adds	r3, r3, r4
 80014da:	0c15      	lsrs	r5, r2, #16
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	429c      	cmp	r4, r3
 80014e0:	d903      	bls.n	80014ea <__aeabi_ddiv+0x356>
 80014e2:	2480      	movs	r4, #128	; 0x80
 80014e4:	0264      	lsls	r4, r4, #9
 80014e6:	46a4      	mov	ip, r4
 80014e8:	4460      	add	r0, ip
 80014ea:	0c1c      	lsrs	r4, r3, #16
 80014ec:	0415      	lsls	r5, r2, #16
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	1820      	adds	r0, r4, r0
 80014f4:	195d      	adds	r5, r3, r5
 80014f6:	4281      	cmp	r1, r0
 80014f8:	d377      	bcc.n	80015ea <__aeabi_ddiv+0x456>
 80014fa:	d073      	beq.n	80015e4 <__aeabi_ddiv+0x450>
 80014fc:	1a0c      	subs	r4, r1, r0
 80014fe:	4aa2      	ldr	r2, [pc, #648]	; (8001788 <__aeabi_ddiv+0x5f4>)
 8001500:	1b7d      	subs	r5, r7, r5
 8001502:	42af      	cmp	r7, r5
 8001504:	41bf      	sbcs	r7, r7
 8001506:	4694      	mov	ip, r2
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	427f      	negs	r7, r7
 800150c:	4463      	add	r3, ip
 800150e:	1be0      	subs	r0, r4, r7
 8001510:	001c      	movs	r4, r3
 8001512:	4286      	cmp	r6, r0
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x384>
 8001516:	e0db      	b.n	80016d0 <__aeabi_ddiv+0x53c>
 8001518:	9901      	ldr	r1, [sp, #4]
 800151a:	f7fe fe83 	bl	8000224 <__aeabi_uidivmod>
 800151e:	464a      	mov	r2, r9
 8001520:	4342      	muls	r2, r0
 8001522:	040b      	lsls	r3, r1, #16
 8001524:	0c29      	lsrs	r1, r5, #16
 8001526:	0007      	movs	r7, r0
 8001528:	4319      	orrs	r1, r3
 800152a:	428a      	cmp	r2, r1
 800152c:	d907      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800152e:	1989      	adds	r1, r1, r6
 8001530:	3f01      	subs	r7, #1
 8001532:	428e      	cmp	r6, r1
 8001534:	d803      	bhi.n	800153e <__aeabi_ddiv+0x3aa>
 8001536:	428a      	cmp	r2, r1
 8001538:	d901      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800153a:	1e87      	subs	r7, r0, #2
 800153c:	1989      	adds	r1, r1, r6
 800153e:	1a88      	subs	r0, r1, r2
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	f7fe fe6f 	bl	8000224 <__aeabi_uidivmod>
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	464a      	mov	r2, r9
 800154a:	4689      	mov	r9, r1
 800154c:	0429      	lsls	r1, r5, #16
 800154e:	464d      	mov	r5, r9
 8001550:	4342      	muls	r2, r0
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	0003      	movs	r3, r0
 8001556:	4329      	orrs	r1, r5
 8001558:	428a      	cmp	r2, r1
 800155a:	d907      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 800155c:	1989      	adds	r1, r1, r6
 800155e:	3b01      	subs	r3, #1
 8001560:	428e      	cmp	r6, r1
 8001562:	d803      	bhi.n	800156c <__aeabi_ddiv+0x3d8>
 8001564:	428a      	cmp	r2, r1
 8001566:	d901      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 8001568:	1e83      	subs	r3, r0, #2
 800156a:	1989      	adds	r1, r1, r6
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	1a89      	subs	r1, r1, r2
 8001570:	003a      	movs	r2, r7
 8001572:	9f03      	ldr	r7, [sp, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	0038      	movs	r0, r7
 8001578:	0413      	lsls	r3, r2, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4358      	muls	r0, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9802      	ldr	r0, [sp, #8]
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	436f      	muls	r7, r5
 8001586:	4343      	muls	r3, r0
 8001588:	4345      	muls	r5, r0
 800158a:	4648      	mov	r0, r9
 800158c:	0c00      	lsrs	r0, r0, #16
 800158e:	4684      	mov	ip, r0
 8001590:	19db      	adds	r3, r3, r7
 8001592:	4463      	add	r3, ip
 8001594:	429f      	cmp	r7, r3
 8001596:	d903      	bls.n	80015a0 <__aeabi_ddiv+0x40c>
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	0240      	lsls	r0, r0, #9
 800159c:	4684      	mov	ip, r0
 800159e:	4465      	add	r5, ip
 80015a0:	4648      	mov	r0, r9
 80015a2:	0c1f      	lsrs	r7, r3, #16
 80015a4:	0400      	lsls	r0, r0, #16
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c00      	lsrs	r0, r0, #16
 80015aa:	197d      	adds	r5, r7, r5
 80015ac:	1818      	adds	r0, r3, r0
 80015ae:	42a9      	cmp	r1, r5
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x420>
 80015b2:	e084      	b.n	80016be <__aeabi_ddiv+0x52a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x424>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_ddiv+0x524>
 80015b8:	2301      	movs	r3, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	e657      	b.n	800126e <__aeabi_ddiv+0xda>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	464a      	mov	r2, r9
 80015c2:	031b      	lsls	r3, r3, #12
 80015c4:	4313      	orrs	r3, r2
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	0b1b      	lsrs	r3, r3, #12
 80015ca:	46aa      	mov	sl, r5
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <__aeabi_ddiv+0x5f8>)
 80015ce:	e66f      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80015d0:	42ba      	cmp	r2, r7
 80015d2:	d900      	bls.n	80015d6 <__aeabi_ddiv+0x442>
 80015d4:	e735      	b.n	8001442 <__aeabi_ddiv+0x2ae>
 80015d6:	464b      	mov	r3, r9
 80015d8:	07dc      	lsls	r4, r3, #31
 80015da:	0858      	lsrs	r0, r3, #1
 80015dc:	087b      	lsrs	r3, r7, #1
 80015de:	431c      	orrs	r4, r3
 80015e0:	07ff      	lsls	r7, r7, #31
 80015e2:	e734      	b.n	800144e <__aeabi_ddiv+0x2ba>
 80015e4:	2400      	movs	r4, #0
 80015e6:	42af      	cmp	r7, r5
 80015e8:	d289      	bcs.n	80014fe <__aeabi_ddiv+0x36a>
 80015ea:	4447      	add	r7, r8
 80015ec:	4547      	cmp	r7, r8
 80015ee:	41a4      	sbcs	r4, r4
 80015f0:	465b      	mov	r3, fp
 80015f2:	4264      	negs	r4, r4
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	1864      	adds	r4, r4, r1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d21e      	bcs.n	800163c <__aeabi_ddiv+0x4a8>
 80015fe:	42a0      	cmp	r0, r4
 8001600:	d86d      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001604:	e0b6      	b.n	8001774 <__aeabi_ddiv+0x5e0>
 8001606:	1a24      	subs	r4, r4, r0
 8001608:	469b      	mov	fp, r3
 800160a:	e778      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800160c:	0003      	movs	r3, r0
 800160e:	465a      	mov	r2, fp
 8001610:	3b28      	subs	r3, #40	; 0x28
 8001612:	409a      	lsls	r2, r3
 8001614:	2700      	movs	r7, #0
 8001616:	4691      	mov	r9, r2
 8001618:	e688      	b.n	800132c <__aeabi_ddiv+0x198>
 800161a:	4658      	mov	r0, fp
 800161c:	f001 f872 	bl	8002704 <__clzsi2>
 8001620:	3020      	adds	r0, #32
 8001622:	e672      	b.n	800130a <__aeabi_ddiv+0x176>
 8001624:	0003      	movs	r3, r0
 8001626:	4652      	mov	r2, sl
 8001628:	3b28      	subs	r3, #40	; 0x28
 800162a:	409a      	lsls	r2, r3
 800162c:	4693      	mov	fp, r2
 800162e:	2200      	movs	r2, #0
 8001630:	e6b4      	b.n	800139c <__aeabi_ddiv+0x208>
 8001632:	4650      	mov	r0, sl
 8001634:	f001 f866 	bl	8002704 <__clzsi2>
 8001638:	3020      	adds	r0, #32
 800163a:	e69a      	b.n	8001372 <__aeabi_ddiv+0x1de>
 800163c:	42a6      	cmp	r6, r4
 800163e:	d1e2      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001640:	45b8      	cmp	r8, r7
 8001642:	d9dc      	bls.n	80015fe <__aeabi_ddiv+0x46a>
 8001644:	1a34      	subs	r4, r6, r0
 8001646:	469b      	mov	fp, r3
 8001648:	e759      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc65      	bgt.n	800171a <__aeabi_ddiv+0x586>
 800164e:	4c50      	ldr	r4, [pc, #320]	; (8001790 <__aeabi_ddiv+0x5fc>)
 8001650:	9900      	ldr	r1, [sp, #0]
 8001652:	46a4      	mov	ip, r4
 8001654:	465c      	mov	r4, fp
 8001656:	4461      	add	r1, ip
 8001658:	0008      	movs	r0, r1
 800165a:	408c      	lsls	r4, r1
 800165c:	0011      	movs	r1, r2
 800165e:	4082      	lsls	r2, r0
 8001660:	40d9      	lsrs	r1, r3
 8001662:	1e50      	subs	r0, r2, #1
 8001664:	4182      	sbcs	r2, r0
 8001666:	430c      	orrs	r4, r1
 8001668:	4314      	orrs	r4, r2
 800166a:	465a      	mov	r2, fp
 800166c:	40da      	lsrs	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	0762      	lsls	r2, r4, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 8001674:	220f      	movs	r2, #15
 8001676:	4022      	ands	r2, r4
 8001678:	2a04      	cmp	r2, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 800167c:	0022      	movs	r2, r4
 800167e:	1d14      	adds	r4, r2, #4
 8001680:	4294      	cmp	r4, r2
 8001682:	4189      	sbcs	r1, r1
 8001684:	4249      	negs	r1, r1
 8001686:	185b      	adds	r3, r3, r1
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	d562      	bpl.n	8001752 <__aeabi_ddiv+0x5be>
 800168c:	2201      	movs	r2, #1
 800168e:	2300      	movs	r3, #0
 8001690:	2700      	movs	r7, #0
 8001692:	e60d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001694:	428a      	cmp	r2, r1
 8001696:	d800      	bhi.n	800169a <__aeabi_ddiv+0x506>
 8001698:	e70a      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 800169a:	1e83      	subs	r3, r0, #2
 800169c:	1989      	adds	r1, r1, r6
 800169e:	e707      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 80016a0:	230f      	movs	r3, #15
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d100      	bne.n	80016aa <__aeabi_ddiv+0x516>
 80016a8:	e5e6      	b.n	8001278 <__aeabi_ddiv+0xe4>
 80016aa:	1d17      	adds	r7, r2, #4
 80016ac:	4297      	cmp	r7, r2
 80016ae:	4192      	sbcs	r2, r2
 80016b0:	4253      	negs	r3, r2
 80016b2:	449b      	add	fp, r3
 80016b4:	08fa      	lsrs	r2, r7, #3
 80016b6:	e5e0      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x52a>
 80016bc:	e5d7      	b.n	800126e <__aeabi_ddiv+0xda>
 80016be:	1871      	adds	r1, r6, r1
 80016c0:	1e53      	subs	r3, r2, #1
 80016c2:	42b1      	cmp	r1, r6
 80016c4:	d327      	bcc.n	8001716 <__aeabi_ddiv+0x582>
 80016c6:	42a9      	cmp	r1, r5
 80016c8:	d315      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 80016ca:	d058      	beq.n	800177e <__aeabi_ddiv+0x5ea>
 80016cc:	001a      	movs	r2, r3
 80016ce:	e773      	b.n	80015b8 <__aeabi_ddiv+0x424>
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x542>
 80016d4:	e604      	b.n	80012e0 <__aeabi_ddiv+0x14c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	2200      	movs	r2, #0
 80016da:	449b      	add	fp, r3
 80016dc:	e5cd      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016de:	2302      	movs	r3, #2
 80016e0:	4447      	add	r7, r8
 80016e2:	4547      	cmp	r7, r8
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	4249      	negs	r1, r1
 80016ec:	1989      	adds	r1, r1, r6
 80016ee:	190c      	adds	r4, r1, r4
 80016f0:	44e3      	add	fp, ip
 80016f2:	1a24      	subs	r4, r4, r0
 80016f4:	e703      	b.n	80014fe <__aeabi_ddiv+0x36a>
 80016f6:	4643      	mov	r3, r8
 80016f8:	005f      	lsls	r7, r3, #1
 80016fa:	4547      	cmp	r7, r8
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	46b8      	mov	r8, r7
 8001700:	425b      	negs	r3, r3
 8001702:	199e      	adds	r6, r3, r6
 8001704:	3a02      	subs	r2, #2
 8001706:	1989      	adds	r1, r1, r6
 8001708:	42a9      	cmp	r1, r5
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x57a>
 800170c:	e754      	b.n	80015b8 <__aeabi_ddiv+0x424>
 800170e:	4540      	cmp	r0, r8
 8001710:	d000      	beq.n	8001714 <__aeabi_ddiv+0x580>
 8001712:	e751      	b.n	80015b8 <__aeabi_ddiv+0x424>
 8001714:	e5ab      	b.n	800126e <__aeabi_ddiv+0xda>
 8001716:	001a      	movs	r2, r3
 8001718:	e7f6      	b.n	8001708 <__aeabi_ddiv+0x574>
 800171a:	211f      	movs	r1, #31
 800171c:	465f      	mov	r7, fp
 800171e:	4249      	negs	r1, r1
 8001720:	1b0c      	subs	r4, r1, r4
 8001722:	40e7      	lsrs	r7, r4
 8001724:	2b20      	cmp	r3, #32
 8001726:	d007      	beq.n	8001738 <__aeabi_ddiv+0x5a4>
 8001728:	491a      	ldr	r1, [pc, #104]	; (8001794 <__aeabi_ddiv+0x600>)
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	468c      	mov	ip, r1
 800172e:	4463      	add	r3, ip
 8001730:	0018      	movs	r0, r3
 8001732:	465b      	mov	r3, fp
 8001734:	4083      	lsls	r3, r0
 8001736:	431a      	orrs	r2, r3
 8001738:	1e50      	subs	r0, r2, #1
 800173a:	4182      	sbcs	r2, r0
 800173c:	433a      	orrs	r2, r7
 800173e:	2707      	movs	r7, #7
 8001740:	2300      	movs	r3, #0
 8001742:	4017      	ands	r7, r2
 8001744:	d009      	beq.n	800175a <__aeabi_ddiv+0x5c6>
 8001746:	210f      	movs	r1, #15
 8001748:	2300      	movs	r3, #0
 800174a:	4011      	ands	r1, r2
 800174c:	0014      	movs	r4, r2
 800174e:	2904      	cmp	r1, #4
 8001750:	d195      	bne.n	800167e <__aeabi_ddiv+0x4ea>
 8001752:	0022      	movs	r2, r4
 8001754:	075f      	lsls	r7, r3, #29
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	0b1b      	lsrs	r3, r3, #12
 800175a:	08d2      	lsrs	r2, r2, #3
 800175c:	4317      	orrs	r7, r2
 800175e:	2200      	movs	r2, #0
 8001760:	e5a6      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	4659      	mov	r1, fp
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	430b      	orrs	r3, r1
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	0017      	movs	r7, r2
 800176e:	0b1b      	lsrs	r3, r3, #12
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <__aeabi_ddiv+0x5f8>)
 8001772:	e59d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001774:	42bd      	cmp	r5, r7
 8001776:	d8b2      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001778:	469b      	mov	fp, r3
 800177a:	2400      	movs	r4, #0
 800177c:	e6bf      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800177e:	4580      	cmp	r8, r0
 8001780:	d3b9      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 8001782:	001a      	movs	r2, r3
 8001784:	e7c3      	b.n	800170e <__aeabi_ddiv+0x57a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff
 8001790:	0000041e 	.word	0x0000041e
 8001794:	0000043e 	.word	0x0000043e

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464f      	mov	r7, r9
 800179c:	4646      	mov	r6, r8
 800179e:	46d6      	mov	lr, sl
 80017a0:	4684      	mov	ip, r0
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	4680      	mov	r8, r0
 80017a6:	4e19      	ldr	r6, [pc, #100]	; (800180c <__eqdf2+0x74>)
 80017a8:	0318      	lsls	r0, r3, #12
 80017aa:	030f      	lsls	r7, r1, #12
 80017ac:	004d      	lsls	r5, r1, #1
 80017ae:	0b00      	lsrs	r0, r0, #12
 80017b0:	005c      	lsls	r4, r3, #1
 80017b2:	4682      	mov	sl, r0
 80017b4:	0b3f      	lsrs	r7, r7, #12
 80017b6:	0d6d      	lsrs	r5, r5, #21
 80017b8:	0fc9      	lsrs	r1, r1, #31
 80017ba:	4691      	mov	r9, r2
 80017bc:	0d64      	lsrs	r4, r4, #21
 80017be:	0fdb      	lsrs	r3, r3, #31
 80017c0:	2001      	movs	r0, #1
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d00a      	beq.n	80017dc <__eqdf2+0x44>
 80017c6:	42b4      	cmp	r4, r6
 80017c8:	d003      	beq.n	80017d2 <__eqdf2+0x3a>
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d101      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ce:	4557      	cmp	r7, sl
 80017d0:	d00c      	beq.n	80017ec <__eqdf2+0x54>
 80017d2:	bc1c      	pop	{r2, r3, r4}
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	46a2      	mov	sl, r4
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	4666      	mov	r6, ip
 80017de:	433e      	orrs	r6, r7
 80017e0:	d1f7      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e2:	42ac      	cmp	r4, r5
 80017e4:	d1f5      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e6:	4654      	mov	r4, sl
 80017e8:	4314      	orrs	r4, r2
 80017ea:	d1f2      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ec:	2001      	movs	r0, #1
 80017ee:	45c8      	cmp	r8, r9
 80017f0:	d1ef      	bne.n	80017d2 <__eqdf2+0x3a>
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d007      	beq.n	8001806 <__eqdf2+0x6e>
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	d1eb      	bne.n	80017d2 <__eqdf2+0x3a>
 80017fa:	4663      	mov	r3, ip
 80017fc:	431f      	orrs	r7, r3
 80017fe:	0038      	movs	r0, r7
 8001800:	1e47      	subs	r7, r0, #1
 8001802:	41b8      	sbcs	r0, r7
 8001804:	e7e5      	b.n	80017d2 <__eqdf2+0x3a>
 8001806:	2000      	movs	r0, #0
 8001808:	e7e3      	b.n	80017d2 <__eqdf2+0x3a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff

08001810 <__gedf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464f      	mov	r7, r9
 8001814:	4646      	mov	r6, r8
 8001816:	46d6      	mov	lr, sl
 8001818:	004d      	lsls	r5, r1, #1
 800181a:	b5c0      	push	{r6, r7, lr}
 800181c:	030e      	lsls	r6, r1, #12
 800181e:	0fc9      	lsrs	r1, r1, #31
 8001820:	468a      	mov	sl, r1
 8001822:	492c      	ldr	r1, [pc, #176]	; (80018d4 <__gedf2+0xc4>)
 8001824:	031f      	lsls	r7, r3, #12
 8001826:	005c      	lsls	r4, r3, #1
 8001828:	4680      	mov	r8, r0
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	4691      	mov	r9, r2
 8001830:	0b3f      	lsrs	r7, r7, #12
 8001832:	0d64      	lsrs	r4, r4, #21
 8001834:	0fdb      	lsrs	r3, r3, #31
 8001836:	428d      	cmp	r5, r1
 8001838:	d01e      	beq.n	8001878 <__gedf2+0x68>
 800183a:	428c      	cmp	r4, r1
 800183c:	d016      	beq.n	800186c <__gedf2+0x5c>
 800183e:	2d00      	cmp	r5, #0
 8001840:	d11e      	bne.n	8001880 <__gedf2+0x70>
 8001842:	4330      	orrs	r0, r6
 8001844:	4684      	mov	ip, r0
 8001846:	2c00      	cmp	r4, #0
 8001848:	d101      	bne.n	800184e <__gedf2+0x3e>
 800184a:	433a      	orrs	r2, r7
 800184c:	d023      	beq.n	8001896 <__gedf2+0x86>
 800184e:	4662      	mov	r2, ip
 8001850:	2a00      	cmp	r2, #0
 8001852:	d01a      	beq.n	800188a <__gedf2+0x7a>
 8001854:	459a      	cmp	sl, r3
 8001856:	d029      	beq.n	80018ac <__gedf2+0x9c>
 8001858:	4651      	mov	r1, sl
 800185a:	2002      	movs	r0, #2
 800185c:	3901      	subs	r1, #1
 800185e:	4008      	ands	r0, r1
 8001860:	3801      	subs	r0, #1
 8001862:	bc1c      	pop	{r2, r3, r4}
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	46a2      	mov	sl, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	0039      	movs	r1, r7
 800186e:	4311      	orrs	r1, r2
 8001870:	d0e5      	beq.n	800183e <__gedf2+0x2e>
 8001872:	2002      	movs	r0, #2
 8001874:	4240      	negs	r0, r0
 8001876:	e7f4      	b.n	8001862 <__gedf2+0x52>
 8001878:	4330      	orrs	r0, r6
 800187a:	d1fa      	bne.n	8001872 <__gedf2+0x62>
 800187c:	42ac      	cmp	r4, r5
 800187e:	d00f      	beq.n	80018a0 <__gedf2+0x90>
 8001880:	2c00      	cmp	r4, #0
 8001882:	d10f      	bne.n	80018a4 <__gedf2+0x94>
 8001884:	433a      	orrs	r2, r7
 8001886:	d0e7      	beq.n	8001858 <__gedf2+0x48>
 8001888:	e00c      	b.n	80018a4 <__gedf2+0x94>
 800188a:	2201      	movs	r2, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	4393      	bics	r3, r2
 8001890:	0018      	movs	r0, r3
 8001892:	3001      	adds	r0, #1
 8001894:	e7e5      	b.n	8001862 <__gedf2+0x52>
 8001896:	4663      	mov	r3, ip
 8001898:	2000      	movs	r0, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <__gedf2+0x52>
 800189e:	e7db      	b.n	8001858 <__gedf2+0x48>
 80018a0:	433a      	orrs	r2, r7
 80018a2:	d1e6      	bne.n	8001872 <__gedf2+0x62>
 80018a4:	459a      	cmp	sl, r3
 80018a6:	d1d7      	bne.n	8001858 <__gedf2+0x48>
 80018a8:	42a5      	cmp	r5, r4
 80018aa:	dcd5      	bgt.n	8001858 <__gedf2+0x48>
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	db05      	blt.n	80018bc <__gedf2+0xac>
 80018b0:	42be      	cmp	r6, r7
 80018b2:	d8d1      	bhi.n	8001858 <__gedf2+0x48>
 80018b4:	d008      	beq.n	80018c8 <__gedf2+0xb8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	42be      	cmp	r6, r7
 80018ba:	d2d2      	bcs.n	8001862 <__gedf2+0x52>
 80018bc:	4650      	mov	r0, sl
 80018be:	2301      	movs	r3, #1
 80018c0:	3801      	subs	r0, #1
 80018c2:	4398      	bics	r0, r3
 80018c4:	3001      	adds	r0, #1
 80018c6:	e7cc      	b.n	8001862 <__gedf2+0x52>
 80018c8:	45c8      	cmp	r8, r9
 80018ca:	d8c5      	bhi.n	8001858 <__gedf2+0x48>
 80018cc:	2000      	movs	r0, #0
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d3f4      	bcc.n	80018bc <__gedf2+0xac>
 80018d2:	e7c6      	b.n	8001862 <__gedf2+0x52>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464f      	mov	r7, r9
 80018dc:	4646      	mov	r6, r8
 80018de:	46d6      	mov	lr, sl
 80018e0:	004d      	lsls	r5, r1, #1
 80018e2:	b5c0      	push	{r6, r7, lr}
 80018e4:	030e      	lsls	r6, r1, #12
 80018e6:	0fc9      	lsrs	r1, r1, #31
 80018e8:	468a      	mov	sl, r1
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <__ledf2+0xcc>)
 80018ec:	031f      	lsls	r7, r3, #12
 80018ee:	005c      	lsls	r4, r3, #1
 80018f0:	4680      	mov	r8, r0
 80018f2:	0b36      	lsrs	r6, r6, #12
 80018f4:	0d6d      	lsrs	r5, r5, #21
 80018f6:	4691      	mov	r9, r2
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	0fdb      	lsrs	r3, r3, #31
 80018fe:	428d      	cmp	r5, r1
 8001900:	d018      	beq.n	8001934 <__ledf2+0x5c>
 8001902:	428c      	cmp	r4, r1
 8001904:	d011      	beq.n	800192a <__ledf2+0x52>
 8001906:	2d00      	cmp	r5, #0
 8001908:	d118      	bne.n	800193c <__ledf2+0x64>
 800190a:	4330      	orrs	r0, r6
 800190c:	4684      	mov	ip, r0
 800190e:	2c00      	cmp	r4, #0
 8001910:	d11e      	bne.n	8001950 <__ledf2+0x78>
 8001912:	433a      	orrs	r2, r7
 8001914:	d11c      	bne.n	8001950 <__ledf2+0x78>
 8001916:	4663      	mov	r3, ip
 8001918:	2000      	movs	r0, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <__ledf2+0xa8>
 800191e:	4651      	mov	r1, sl
 8001920:	2002      	movs	r0, #2
 8001922:	3901      	subs	r1, #1
 8001924:	4008      	ands	r0, r1
 8001926:	3801      	subs	r0, #1
 8001928:	e02a      	b.n	8001980 <__ledf2+0xa8>
 800192a:	0039      	movs	r1, r7
 800192c:	4311      	orrs	r1, r2
 800192e:	d0ea      	beq.n	8001906 <__ledf2+0x2e>
 8001930:	2002      	movs	r0, #2
 8001932:	e025      	b.n	8001980 <__ledf2+0xa8>
 8001934:	4330      	orrs	r0, r6
 8001936:	d1fb      	bne.n	8001930 <__ledf2+0x58>
 8001938:	42ac      	cmp	r4, r5
 800193a:	d026      	beq.n	800198a <__ledf2+0xb2>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d126      	bne.n	800198e <__ledf2+0xb6>
 8001940:	433a      	orrs	r2, r7
 8001942:	d124      	bne.n	800198e <__ledf2+0xb6>
 8001944:	4651      	mov	r1, sl
 8001946:	2002      	movs	r0, #2
 8001948:	3901      	subs	r1, #1
 800194a:	4008      	ands	r0, r1
 800194c:	3801      	subs	r0, #1
 800194e:	e017      	b.n	8001980 <__ledf2+0xa8>
 8001950:	4662      	mov	r2, ip
 8001952:	2a00      	cmp	r2, #0
 8001954:	d00f      	beq.n	8001976 <__ledf2+0x9e>
 8001956:	459a      	cmp	sl, r3
 8001958:	d1e1      	bne.n	800191e <__ledf2+0x46>
 800195a:	42a5      	cmp	r5, r4
 800195c:	db05      	blt.n	800196a <__ledf2+0x92>
 800195e:	42be      	cmp	r6, r7
 8001960:	d8dd      	bhi.n	800191e <__ledf2+0x46>
 8001962:	d019      	beq.n	8001998 <__ledf2+0xc0>
 8001964:	2000      	movs	r0, #0
 8001966:	42be      	cmp	r6, r7
 8001968:	d20a      	bcs.n	8001980 <__ledf2+0xa8>
 800196a:	4650      	mov	r0, sl
 800196c:	2301      	movs	r3, #1
 800196e:	3801      	subs	r0, #1
 8001970:	4398      	bics	r0, r3
 8001972:	3001      	adds	r0, #1
 8001974:	e004      	b.n	8001980 <__ledf2+0xa8>
 8001976:	2201      	movs	r2, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	4393      	bics	r3, r2
 800197c:	0018      	movs	r0, r3
 800197e:	3001      	adds	r0, #1
 8001980:	bc1c      	pop	{r2, r3, r4}
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	46a2      	mov	sl, r4
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	433a      	orrs	r2, r7
 800198c:	d1d0      	bne.n	8001930 <__ledf2+0x58>
 800198e:	459a      	cmp	sl, r3
 8001990:	d1c5      	bne.n	800191e <__ledf2+0x46>
 8001992:	42a5      	cmp	r5, r4
 8001994:	dcc3      	bgt.n	800191e <__ledf2+0x46>
 8001996:	e7e0      	b.n	800195a <__ledf2+0x82>
 8001998:	45c8      	cmp	r8, r9
 800199a:	d8c0      	bhi.n	800191e <__ledf2+0x46>
 800199c:	2000      	movs	r0, #0
 800199e:	45c8      	cmp	r8, r9
 80019a0:	d3e3      	bcc.n	800196a <__ledf2+0x92>
 80019a2:	e7ed      	b.n	8001980 <__ledf2+0xa8>
 80019a4:	000007ff 	.word	0x000007ff

080019a8 <__aeabi_dmul>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	46de      	mov	lr, fp
 80019ae:	464e      	mov	r6, r9
 80019b0:	4645      	mov	r5, r8
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4683      	mov	fp, r0
 80019b6:	0006      	movs	r6, r0
 80019b8:	030f      	lsls	r7, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	b087      	sub	sp, #28
 80019be:	4692      	mov	sl, r2
 80019c0:	001d      	movs	r5, r3
 80019c2:	0b3f      	lsrs	r7, r7, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fcc      	lsrs	r4, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x26>
 80019cc:	e06f      	b.n	8001aae <__aeabi_dmul+0x106>
 80019ce:	4bde      	ldr	r3, [pc, #888]	; (8001d48 <__aeabi_dmul+0x3a0>)
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d038      	beq.n	8001a46 <__aeabi_dmul+0x9e>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00ff      	lsls	r7, r7, #3
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431f      	orrs	r7, r3
 80019dc:	0f73      	lsrs	r3, r6, #29
 80019de:	433b      	orrs	r3, r7
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4bda      	ldr	r3, [pc, #872]	; (8001d4c <__aeabi_dmul+0x3a4>)
 80019e4:	2700      	movs	r7, #0
 80019e6:	4699      	mov	r9, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	00f6      	lsls	r6, r6, #3
 80019ee:	4481      	add	r9, r0
 80019f0:	032b      	lsls	r3, r5, #12
 80019f2:	0069      	lsls	r1, r5, #1
 80019f4:	0b1b      	lsrs	r3, r3, #12
 80019f6:	4652      	mov	r2, sl
 80019f8:	4698      	mov	r8, r3
 80019fa:	0d49      	lsrs	r1, r1, #21
 80019fc:	0fed      	lsrs	r5, r5, #31
 80019fe:	2900      	cmp	r1, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x5c>
 8001a02:	e085      	b.n	8001b10 <__aeabi_dmul+0x168>
 8001a04:	4bd0      	ldr	r3, [pc, #832]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dmul+0x64>
 8001a0a:	e073      	b.n	8001af4 <__aeabi_dmul+0x14c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	00da      	lsls	r2, r3, #3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	4652      	mov	r2, sl
 8001a18:	48cc      	ldr	r0, [pc, #816]	; (8001d4c <__aeabi_dmul+0x3a4>)
 8001a1a:	0f52      	lsrs	r2, r2, #29
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	4652      	mov	r2, sl
 8001a22:	2000      	movs	r0, #0
 8001a24:	4461      	add	r1, ip
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4489      	add	r9, r1
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	4069      	eors	r1, r5
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	468c      	mov	ip, r1
 8001a32:	2101      	movs	r1, #1
 8001a34:	4449      	add	r1, r9
 8001a36:	468a      	mov	sl, r1
 8001a38:	2f0f      	cmp	r7, #15
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_dmul+0x96>
 8001a3c:	e090      	b.n	8001b60 <__aeabi_dmul+0x1b8>
 8001a3e:	49c4      	ldr	r1, [pc, #784]	; (8001d50 <__aeabi_dmul+0x3a8>)
 8001a40:	00bf      	lsls	r7, r7, #2
 8001a42:	59cf      	ldr	r7, [r1, r7]
 8001a44:	46bf      	mov	pc, r7
 8001a46:	465b      	mov	r3, fp
 8001a48:	433b      	orrs	r3, r7
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dmul+0xa8>
 8001a4e:	e16a      	b.n	8001d26 <__aeabi_dmul+0x37e>
 8001a50:	2302      	movs	r3, #2
 8001a52:	2708      	movs	r7, #8
 8001a54:	2600      	movs	r6, #0
 8001a56:	4681      	mov	r9, r0
 8001a58:	469b      	mov	fp, r3
 8001a5a:	e7c9      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001a5c:	0032      	movs	r2, r6
 8001a5e:	4658      	mov	r0, fp
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	4661      	mov	r1, ip
 8001a64:	9100      	str	r1, [sp, #0]
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0xc4>
 8001a6a:	e075      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001a6c:	2803      	cmp	r0, #3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0xca>
 8001a70:	e1fe      	b.n	8001e70 <__aeabi_dmul+0x4c8>
 8001a72:	2801      	cmp	r0, #1
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dmul+0xd0>
 8001a76:	e12c      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2700      	movs	r7, #0
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	2500      	movs	r5, #0
 8001a80:	033f      	lsls	r7, r7, #12
 8001a82:	0d2a      	lsrs	r2, r5, #20
 8001a84:	0b3f      	lsrs	r7, r7, #12
 8001a86:	48b3      	ldr	r0, [pc, #716]	; (8001d54 <__aeabi_dmul+0x3ac>)
 8001a88:	0512      	lsls	r2, r2, #20
 8001a8a:	433a      	orrs	r2, r7
 8001a8c:	4002      	ands	r2, r0
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	4313      	orrs	r3, r2
 8001a92:	9a00      	ldr	r2, [sp, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	07d1      	lsls	r1, r2, #31
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	0030      	movs	r0, r6
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bc3c      	pop	{r2, r3, r4, r5}
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	46a2      	mov	sl, r4
 8001aaa:	46ab      	mov	fp, r5
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	465b      	mov	r3, fp
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x110>
 8001ab6:	e12f      	b.n	8001d18 <__aeabi_dmul+0x370>
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dmul+0x116>
 8001abc:	e1a5      	b.n	8001e0a <__aeabi_dmul+0x462>
 8001abe:	0038      	movs	r0, r7
 8001ac0:	f000 fe20 	bl	8002704 <__clzsi2>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	3b0b      	subs	r3, #11
 8001ac8:	2b1c      	cmp	r3, #28
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x126>
 8001acc:	e196      	b.n	8001dfc <__aeabi_dmul+0x454>
 8001ace:	221d      	movs	r2, #29
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	465e      	mov	r6, fp
 8001ada:	3908      	subs	r1, #8
 8001adc:	408f      	lsls	r7, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001ae8:	2700      	movs	r7, #0
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	e77d      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4653      	mov	r3, sl
 8001af8:	430b      	orrs	r3, r1
 8001afa:	4993      	ldr	r1, [pc, #588]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001afc:	468c      	mov	ip, r1
 8001afe:	44e1      	add	r9, ip
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0x15e>
 8001b04:	e11a      	b.n	8001d3c <__aeabi_dmul+0x394>
 8001b06:	2202      	movs	r2, #2
 8001b08:	2002      	movs	r0, #2
 8001b0a:	4317      	orrs	r7, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	e78c      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x16e>
 8001b14:	e10d      	b.n	8001d32 <__aeabi_dmul+0x38a>
 8001b16:	4643      	mov	r3, r8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x176>
 8001b1c:	e181      	b.n	8001e22 <__aeabi_dmul+0x47a>
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f000 fdf0 	bl	8002704 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	2a1c      	cmp	r2, #28
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dmul+0x186>
 8001b2c:	e172      	b.n	8001e14 <__aeabi_dmul+0x46c>
 8001b2e:	0001      	movs	r1, r0
 8001b30:	4643      	mov	r3, r8
 8001b32:	3908      	subs	r1, #8
 8001b34:	408b      	lsls	r3, r1
 8001b36:	4698      	mov	r8, r3
 8001b38:	231d      	movs	r3, #29
 8001b3a:	1a9a      	subs	r2, r3, r2
 8001b3c:	4653      	mov	r3, sl
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	001a      	movs	r2, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4652      	mov	r2, sl
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	1a08      	subs	r0, r1, r0
 8001b4e:	4982      	ldr	r1, [pc, #520]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001b50:	4689      	mov	r9, r1
 8001b52:	4481      	add	r9, r0
 8001b54:	2000      	movs	r0, #0
 8001b56:	e768      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	e78e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001b60:	0c14      	lsrs	r4, r2, #16
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	0011      	movs	r1, r2
 8001b68:	0c37      	lsrs	r7, r6, #16
 8001b6a:	0436      	lsls	r6, r6, #16
 8001b6c:	0c35      	lsrs	r5, r6, #16
 8001b6e:	4379      	muls	r1, r7
 8001b70:	0028      	movs	r0, r5
 8001b72:	468c      	mov	ip, r1
 8001b74:	002e      	movs	r6, r5
 8001b76:	4360      	muls	r0, r4
 8001b78:	4460      	add	r0, ip
 8001b7a:	4683      	mov	fp, r0
 8001b7c:	4356      	muls	r6, r2
 8001b7e:	0021      	movs	r1, r4
 8001b80:	0c30      	lsrs	r0, r6, #16
 8001b82:	4680      	mov	r8, r0
 8001b84:	4658      	mov	r0, fp
 8001b86:	4379      	muls	r1, r7
 8001b88:	4440      	add	r0, r8
 8001b8a:	9102      	str	r1, [sp, #8]
 8001b8c:	4584      	cmp	ip, r0
 8001b8e:	d906      	bls.n	8001b9e <__aeabi_dmul+0x1f6>
 8001b90:	4688      	mov	r8, r1
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	468c      	mov	ip, r1
 8001b98:	44e0      	add	r8, ip
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	9102      	str	r1, [sp, #8]
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	0c01      	lsrs	r1, r0, #16
 8001ba2:	0c36      	lsrs	r6, r6, #16
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	468b      	mov	fp, r1
 8001ba8:	1981      	adds	r1, r0, r6
 8001baa:	0c1e      	lsrs	r6, r3, #16
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	9103      	str	r1, [sp, #12]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4379      	muls	r1, r7
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	0028      	movs	r0, r5
 8001bba:	4375      	muls	r5, r6
 8001bbc:	4465      	add	r5, ip
 8001bbe:	46a8      	mov	r8, r5
 8001bc0:	4358      	muls	r0, r3
 8001bc2:	0c05      	lsrs	r5, r0, #16
 8001bc4:	4445      	add	r5, r8
 8001bc6:	4377      	muls	r7, r6
 8001bc8:	42a9      	cmp	r1, r5
 8001bca:	d903      	bls.n	8001bd4 <__aeabi_dmul+0x22c>
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	4467      	add	r7, ip
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	468c      	mov	ip, r1
 8001bd8:	0039      	movs	r1, r7
 8001bda:	0400      	lsls	r0, r0, #16
 8001bdc:	0c00      	lsrs	r0, r0, #16
 8001bde:	042d      	lsls	r5, r5, #16
 8001be0:	182d      	adds	r5, r5, r0
 8001be2:	4461      	add	r1, ip
 8001be4:	44ab      	add	fp, r5
 8001be6:	9105      	str	r1, [sp, #20]
 8001be8:	4659      	mov	r1, fp
 8001bea:	9104      	str	r1, [sp, #16]
 8001bec:	9901      	ldr	r1, [sp, #4]
 8001bee:	040f      	lsls	r7, r1, #16
 8001bf0:	0c3f      	lsrs	r7, r7, #16
 8001bf2:	0c08      	lsrs	r0, r1, #16
 8001bf4:	0039      	movs	r1, r7
 8001bf6:	4351      	muls	r1, r2
 8001bf8:	4342      	muls	r2, r0
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	468c      	mov	ip, r1
 8001c00:	0c09      	lsrs	r1, r1, #16
 8001c02:	468b      	mov	fp, r1
 8001c04:	4362      	muls	r2, r4
 8001c06:	437c      	muls	r4, r7
 8001c08:	4444      	add	r4, r8
 8001c0a:	445c      	add	r4, fp
 8001c0c:	45a0      	cmp	r8, r4
 8001c0e:	d903      	bls.n	8001c18 <__aeabi_dmul+0x270>
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	4688      	mov	r8, r1
 8001c16:	4442      	add	r2, r8
 8001c18:	0c21      	lsrs	r1, r4, #16
 8001c1a:	4688      	mov	r8, r1
 8001c1c:	4661      	mov	r1, ip
 8001c1e:	0409      	lsls	r1, r1, #16
 8001c20:	0c09      	lsrs	r1, r1, #16
 8001c22:	468c      	mov	ip, r1
 8001c24:	0039      	movs	r1, r7
 8001c26:	4359      	muls	r1, r3
 8001c28:	4343      	muls	r3, r0
 8001c2a:	4370      	muls	r0, r6
 8001c2c:	437e      	muls	r6, r7
 8001c2e:	0c0f      	lsrs	r7, r1, #16
 8001c30:	18f6      	adds	r6, r6, r3
 8001c32:	0424      	lsls	r4, r4, #16
 8001c34:	19be      	adds	r6, r7, r6
 8001c36:	4464      	add	r4, ip
 8001c38:	4442      	add	r2, r8
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	42b3      	cmp	r3, r6
 8001c3e:	d903      	bls.n	8001c48 <__aeabi_dmul+0x2a0>
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4698      	mov	r8, r3
 8001c46:	4440      	add	r0, r8
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	4661      	mov	r1, ip
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	9b04      	ldr	r3, [sp, #16]
 8001c50:	0437      	lsls	r7, r6, #16
 8001c52:	4443      	add	r3, r8
 8001c54:	469b      	mov	fp, r3
 8001c56:	45ab      	cmp	fp, r5
 8001c58:	41ad      	sbcs	r5, r5
 8001c5a:	426b      	negs	r3, r5
 8001c5c:	040d      	lsls	r5, r1, #16
 8001c5e:	9905      	ldr	r1, [sp, #20]
 8001c60:	0c2d      	lsrs	r5, r5, #16
 8001c62:	468c      	mov	ip, r1
 8001c64:	197f      	adds	r7, r7, r5
 8001c66:	4467      	add	r7, ip
 8001c68:	18fd      	adds	r5, r7, r3
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	192d      	adds	r5, r5, r4
 8001c70:	42a5      	cmp	r5, r4
 8001c72:	41a4      	sbcs	r4, r4
 8001c74:	4693      	mov	fp, r2
 8001c76:	4264      	negs	r4, r4
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44c3      	add	fp, r8
 8001c7c:	44dc      	add	ip, fp
 8001c7e:	428f      	cmp	r7, r1
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4598      	cmp	r8, r3
 8001c84:	419b      	sbcs	r3, r3
 8001c86:	4593      	cmp	fp, r2
 8001c88:	4192      	sbcs	r2, r2
 8001c8a:	45a4      	cmp	ip, r4
 8001c8c:	41a4      	sbcs	r4, r4
 8001c8e:	425b      	negs	r3, r3
 8001c90:	427f      	negs	r7, r7
 8001c92:	431f      	orrs	r7, r3
 8001c94:	0c36      	lsrs	r6, r6, #16
 8001c96:	4252      	negs	r2, r2
 8001c98:	4264      	negs	r4, r4
 8001c9a:	19bf      	adds	r7, r7, r6
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	18bf      	adds	r7, r7, r2
 8001ca0:	4662      	mov	r2, ip
 8001ca2:	1838      	adds	r0, r7, r0
 8001ca4:	0243      	lsls	r3, r0, #9
 8001ca6:	0dd2      	lsrs	r2, r2, #23
 8001ca8:	9903      	ldr	r1, [sp, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	026a      	lsls	r2, r5, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	1e50      	subs	r0, r2, #1
 8001cb2:	4182      	sbcs	r2, r0
 8001cb4:	4661      	mov	r1, ip
 8001cb6:	0ded      	lsrs	r5, r5, #23
 8001cb8:	432a      	orrs	r2, r5
 8001cba:	024e      	lsls	r6, r1, #9
 8001cbc:	4332      	orrs	r2, r6
 8001cbe:	01d9      	lsls	r1, r3, #7
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dmul+0x31c>
 8001cc2:	e0b3      	b.n	8001e2c <__aeabi_dmul+0x484>
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	0850      	lsrs	r0, r2, #1
 8001cc8:	4032      	ands	r2, r6
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	07de      	lsls	r6, r3, #31
 8001cce:	4332      	orrs	r2, r6
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	4c22      	ldr	r4, [pc, #136]	; (8001d5c <__aeabi_dmul+0x3b4>)
 8001cd4:	4454      	add	r4, sl
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	dd62      	ble.n	8001da0 <__aeabi_dmul+0x3f8>
 8001cda:	0751      	lsls	r1, r2, #29
 8001cdc:	d009      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001cde:	200f      	movs	r0, #15
 8001ce0:	4010      	ands	r0, r2
 8001ce2:	2804      	cmp	r0, #4
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001ce6:	1d10      	adds	r0, r2, #4
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	4252      	negs	r2, r2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	01d9      	lsls	r1, r3, #7
 8001cf4:	d504      	bpl.n	8001d00 <__aeabi_dmul+0x358>
 8001cf6:	2480      	movs	r4, #128	; 0x80
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <__aeabi_dmul+0x3b8>)
 8001cfa:	00e4      	lsls	r4, r4, #3
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	4454      	add	r4, sl
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <__aeabi_dmul+0x3bc>)
 8001d02:	4284      	cmp	r4, r0
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x360>
 8001d06:	e727      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001d08:	075e      	lsls	r6, r3, #29
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	0b1f      	lsrs	r7, r3, #12
 8001d10:	0563      	lsls	r3, r4, #21
 8001d12:	4316      	orrs	r6, r2
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	e6b2      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2704      	movs	r7, #4
 8001d20:	2600      	movs	r6, #0
 8001d22:	469b      	mov	fp, r3
 8001d24:	e664      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d26:	2303      	movs	r3, #3
 8001d28:	9701      	str	r7, [sp, #4]
 8001d2a:	4681      	mov	r9, r0
 8001d2c:	270c      	movs	r7, #12
 8001d2e:	469b      	mov	fp, r3
 8001d30:	e65e      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d32:	2201      	movs	r2, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	4317      	orrs	r7, r2
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e676      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	2003      	movs	r0, #3
 8001d40:	431f      	orrs	r7, r3
 8001d42:	4643      	mov	r3, r8
 8001d44:	e671      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	000007ff 	.word	0x000007ff
 8001d4c:	fffffc01 	.word	0xfffffc01
 8001d50:	0801b704 	.word	0x0801b704
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	fffffc0d 	.word	0xfffffc0d
 8001d5c:	000003ff 	.word	0x000003ff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	000007fe 	.word	0x000007fe
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2780      	movs	r7, #128	; 0x80
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	033f      	lsls	r7, r7, #12
 8001d70:	2600      	movs	r6, #0
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d74:	e683      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	0032      	movs	r2, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	e670      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d80:	46ac      	mov	ip, r5
 8001d82:	e66e      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d84:	2780      	movs	r7, #128	; 0x80
 8001d86:	9901      	ldr	r1, [sp, #4]
 8001d88:	033f      	lsls	r7, r7, #12
 8001d8a:	4239      	tst	r1, r7
 8001d8c:	d02d      	beq.n	8001dea <__aeabi_dmul+0x442>
 8001d8e:	423b      	tst	r3, r7
 8001d90:	d12b      	bne.n	8001dea <__aeabi_dmul+0x442>
 8001d92:	431f      	orrs	r7, r3
 8001d94:	033f      	lsls	r7, r7, #12
 8001d96:	0b3f      	lsrs	r7, r7, #12
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	0016      	movs	r6, r2
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d9e:	e66e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001da0:	2501      	movs	r5, #1
 8001da2:	1b2d      	subs	r5, r5, r4
 8001da4:	2d38      	cmp	r5, #56	; 0x38
 8001da6:	dd00      	ble.n	8001daa <__aeabi_dmul+0x402>
 8001da8:	e666      	b.n	8001a78 <__aeabi_dmul+0xd0>
 8001daa:	2d1f      	cmp	r5, #31
 8001dac:	dc40      	bgt.n	8001e30 <__aeabi_dmul+0x488>
 8001dae:	4835      	ldr	r0, [pc, #212]	; (8001e84 <__aeabi_dmul+0x4dc>)
 8001db0:	001c      	movs	r4, r3
 8001db2:	4450      	add	r0, sl
 8001db4:	0016      	movs	r6, r2
 8001db6:	4082      	lsls	r2, r0
 8001db8:	4084      	lsls	r4, r0
 8001dba:	40ee      	lsrs	r6, r5
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	4334      	orrs	r4, r6
 8001dc2:	4314      	orrs	r4, r2
 8001dc4:	40eb      	lsrs	r3, r5
 8001dc6:	0762      	lsls	r2, r4, #29
 8001dc8:	d009      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4022      	ands	r2, r4
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d005      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dd2:	0022      	movs	r2, r4
 8001dd4:	1d14      	adds	r4, r2, #4
 8001dd6:	4294      	cmp	r4, r2
 8001dd8:	4180      	sbcs	r0, r0
 8001dda:	4240      	negs	r0, r0
 8001ddc:	181b      	adds	r3, r3, r0
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	d53e      	bpl.n	8001e60 <__aeabi_dmul+0x4b8>
 8001de2:	2301      	movs	r3, #1
 8001de4:	2700      	movs	r7, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	e649      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dea:	2780      	movs	r7, #128	; 0x80
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	033f      	lsls	r7, r7, #12
 8001df0:	431f      	orrs	r7, r3
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001dfa:	e640      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	465a      	mov	r2, fp
 8001e00:	3b28      	subs	r3, #40	; 0x28
 8001e02:	409a      	lsls	r2, r3
 8001e04:	2600      	movs	r6, #0
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	e66d      	b.n	8001ae6 <__aeabi_dmul+0x13e>
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f000 fc7a 	bl	8002704 <__clzsi2>
 8001e10:	3020      	adds	r0, #32
 8001e12:	e657      	b.n	8001ac4 <__aeabi_dmul+0x11c>
 8001e14:	0003      	movs	r3, r0
 8001e16:	4652      	mov	r2, sl
 8001e18:	3b28      	subs	r3, #40	; 0x28
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e693      	b.n	8001b4a <__aeabi_dmul+0x1a2>
 8001e22:	4650      	mov	r0, sl
 8001e24:	f000 fc6e 	bl	8002704 <__clzsi2>
 8001e28:	3020      	adds	r0, #32
 8001e2a:	e67b      	b.n	8001b24 <__aeabi_dmul+0x17c>
 8001e2c:	46ca      	mov	sl, r9
 8001e2e:	e750      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001e30:	201f      	movs	r0, #31
 8001e32:	001e      	movs	r6, r3
 8001e34:	4240      	negs	r0, r0
 8001e36:	1b04      	subs	r4, r0, r4
 8001e38:	40e6      	lsrs	r6, r4
 8001e3a:	2d20      	cmp	r5, #32
 8001e3c:	d003      	beq.n	8001e46 <__aeabi_dmul+0x49e>
 8001e3e:	4c12      	ldr	r4, [pc, #72]	; (8001e88 <__aeabi_dmul+0x4e0>)
 8001e40:	4454      	add	r4, sl
 8001e42:	40a3      	lsls	r3, r4
 8001e44:	431a      	orrs	r2, r3
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	4332      	orrs	r2, r6
 8001e4c:	2607      	movs	r6, #7
 8001e4e:	2700      	movs	r7, #0
 8001e50:	4016      	ands	r6, r2
 8001e52:	d009      	beq.n	8001e68 <__aeabi_dmul+0x4c0>
 8001e54:	200f      	movs	r0, #15
 8001e56:	2300      	movs	r3, #0
 8001e58:	4010      	ands	r0, r2
 8001e5a:	0014      	movs	r4, r2
 8001e5c:	2804      	cmp	r0, #4
 8001e5e:	d1b9      	bne.n	8001dd4 <__aeabi_dmul+0x42c>
 8001e60:	0022      	movs	r2, r4
 8001e62:	075e      	lsls	r6, r3, #29
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	0b1f      	lsrs	r7, r3, #12
 8001e68:	08d2      	lsrs	r2, r2, #3
 8001e6a:	4316      	orrs	r6, r2
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e606      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e70:	2780      	movs	r7, #128	; 0x80
 8001e72:	033f      	lsls	r7, r7, #12
 8001e74:	431f      	orrs	r7, r3
 8001e76:	033f      	lsls	r7, r7, #12
 8001e78:	0b3f      	lsrs	r7, r7, #12
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	4b00      	ldr	r3, [pc, #0]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001e7e:	e5fe      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	0000043e 	.word	0x0000043e

08001e8c <__aeabi_dsub>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	464e      	mov	r6, r9
 8001e92:	4645      	mov	r5, r8
 8001e94:	46de      	mov	lr, fp
 8001e96:	000c      	movs	r4, r1
 8001e98:	0309      	lsls	r1, r1, #12
 8001e9a:	b5e0      	push	{r5, r6, r7, lr}
 8001e9c:	0a49      	lsrs	r1, r1, #9
 8001e9e:	0f46      	lsrs	r6, r0, #29
 8001ea0:	005f      	lsls	r7, r3, #1
 8001ea2:	4331      	orrs	r1, r6
 8001ea4:	031e      	lsls	r6, r3, #12
 8001ea6:	0fdb      	lsrs	r3, r3, #31
 8001ea8:	0a76      	lsrs	r6, r6, #9
 8001eaa:	469b      	mov	fp, r3
 8001eac:	0f53      	lsrs	r3, r2, #29
 8001eae:	4333      	orrs	r3, r6
 8001eb0:	4ec8      	ldr	r6, [pc, #800]	; (80021d4 <__aeabi_dsub+0x348>)
 8001eb2:	0065      	lsls	r5, r4, #1
 8001eb4:	00c0      	lsls	r0, r0, #3
 8001eb6:	0fe4      	lsrs	r4, r4, #31
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	0d6d      	lsrs	r5, r5, #21
 8001ebc:	46a2      	mov	sl, r4
 8001ebe:	4681      	mov	r9, r0
 8001ec0:	0d7f      	lsrs	r7, r7, #21
 8001ec2:	469c      	mov	ip, r3
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	42b7      	cmp	r7, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x40>
 8001eca:	e0b9      	b.n	8002040 <__aeabi_dsub+0x1b4>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	2601      	movs	r6, #1
 8001ed0:	4073      	eors	r3, r6
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	1bee      	subs	r6, r5, r7
 8001ed6:	45a3      	cmp	fp, r4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x50>
 8001eda:	e083      	b.n	8001fe4 <__aeabi_dsub+0x158>
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	dd63      	ble.n	8001fa8 <__aeabi_dsub+0x11c>
 8001ee0:	2f00      	cmp	r7, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x5a>
 8001ee4:	e0b1      	b.n	800204a <__aeabi_dsub+0x1be>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x62>
 8001eec:	e123      	b.n	8002136 <__aeabi_dsub+0x2aa>
 8001eee:	1e73      	subs	r3, r6, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_dsub+0x6a>
 8001ef4:	e1ba      	b.n	800226c <__aeabi_dsub+0x3e0>
 8001ef6:	1a86      	subs	r6, r0, r2
 8001ef8:	4663      	mov	r3, ip
 8001efa:	42b0      	cmp	r0, r6
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	2501      	movs	r5, #1
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	4240      	negs	r0, r0
 8001f04:	1a09      	subs	r1, r1, r0
 8001f06:	020b      	lsls	r3, r1, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x80>
 8001f0a:	e147      	b.n	800219c <__aeabi_dsub+0x310>
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	0a4b      	lsrs	r3, r1, #9
 8001f10:	4698      	mov	r8, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x8e>
 8001f18:	e189      	b.n	800222e <__aeabi_dsub+0x3a2>
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f000 fbf2 	bl	8002704 <__clzsi2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3b08      	subs	r3, #8
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x9e>
 8001f28:	e17c      	b.n	8002224 <__aeabi_dsub+0x398>
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	0030      	movs	r0, r6
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	4641      	mov	r1, r8
 8001f32:	40d0      	lsrs	r0, r2
 8001f34:	4099      	lsls	r1, r3
 8001f36:	0002      	movs	r2, r0
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0xb6>
 8001f40:	e16a      	b.n	8002218 <__aeabi_dsub+0x38c>
 8001f42:	1b5d      	subs	r5, r3, r5
 8001f44:	1c6b      	adds	r3, r5, #1
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dsub+0xc0>
 8001f4a:	e194      	b.n	8002276 <__aeabi_dsub+0x3ea>
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	0010      	movs	r0, r2
 8001f50:	0035      	movs	r5, r6
 8001f52:	1ac9      	subs	r1, r1, r3
 8001f54:	408e      	lsls	r6, r1
 8001f56:	40da      	lsrs	r2, r3
 8001f58:	4088      	lsls	r0, r1
 8001f5a:	40dd      	lsrs	r5, r3
 8001f5c:	1e71      	subs	r1, r6, #1
 8001f5e:	418e      	sbcs	r6, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	4328      	orrs	r0, r5
 8001f66:	2500      	movs	r5, #0
 8001f68:	4306      	orrs	r6, r0
 8001f6a:	4032      	ands	r2, r6
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d009      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4033      	ands	r3, r6
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d005      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	42b3      	cmp	r3, r6
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	4276      	negs	r6, r6
 8001f80:	1989      	adds	r1, r1, r6
 8001f82:	001e      	movs	r6, r3
 8001f84:	020b      	lsls	r3, r1, #8
 8001f86:	d400      	bmi.n	8001f8a <__aeabi_dsub+0xfe>
 8001f88:	e23d      	b.n	8002406 <__aeabi_dsub+0x57a>
 8001f8a:	1c6a      	adds	r2, r5, #1
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <__aeabi_dsub+0x348>)
 8001f8e:	0555      	lsls	r5, r2, #21
 8001f90:	0d6d      	lsrs	r5, r5, #21
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x10c>
 8001f96:	e119      	b.n	80021cc <__aeabi_dsub+0x340>
 8001f98:	4a8f      	ldr	r2, [pc, #572]	; (80021d8 <__aeabi_dsub+0x34c>)
 8001f9a:	08f6      	lsrs	r6, r6, #3
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	0757      	lsls	r7, r2, #29
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4337      	orrs	r7, r6
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	e09b      	b.n	80020e0 <__aeabi_dsub+0x254>
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x122>
 8001fac:	e0c5      	b.n	800213a <__aeabi_dsub+0x2ae>
 8001fae:	1c6e      	adds	r6, r5, #1
 8001fb0:	0576      	lsls	r6, r6, #21
 8001fb2:	0d76      	lsrs	r6, r6, #21
 8001fb4:	2e01      	cmp	r6, #1
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x12e>
 8001fb8:	e148      	b.n	800224c <__aeabi_dsub+0x3c0>
 8001fba:	4667      	mov	r7, ip
 8001fbc:	1a86      	subs	r6, r0, r2
 8001fbe:	1bcb      	subs	r3, r1, r7
 8001fc0:	42b0      	cmp	r0, r6
 8001fc2:	41bf      	sbcs	r7, r7
 8001fc4:	427f      	negs	r7, r7
 8001fc6:	46b8      	mov	r8, r7
 8001fc8:	001f      	movs	r7, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	1aff      	subs	r7, r7, r3
 8001fce:	003b      	movs	r3, r7
 8001fd0:	46b8      	mov	r8, r7
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	d500      	bpl.n	8001fd8 <__aeabi_dsub+0x14c>
 8001fd6:	e15f      	b.n	8002298 <__aeabi_dsub+0x40c>
 8001fd8:	4337      	orrs	r7, r6
 8001fda:	d19a      	bne.n	8001f12 <__aeabi_dsub+0x86>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2400      	movs	r4, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e079      	b.n	80020d8 <__aeabi_dsub+0x24c>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x15e>
 8001fe8:	e0fa      	b.n	80021e0 <__aeabi_dsub+0x354>
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x164>
 8001fee:	e08d      	b.n	800210c <__aeabi_dsub+0x280>
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <__aeabi_dsub+0x348>)
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	d067      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431f      	orrs	r7, r3
 8001ffe:	46bc      	mov	ip, r7
 8002000:	2e38      	cmp	r6, #56	; 0x38
 8002002:	dc00      	bgt.n	8002006 <__aeabi_dsub+0x17a>
 8002004:	e152      	b.n	80022ac <__aeabi_dsub+0x420>
 8002006:	4663      	mov	r3, ip
 8002008:	4313      	orrs	r3, r2
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	181e      	adds	r6, r3, r0
 8002010:	4286      	cmp	r6, r0
 8002012:	4180      	sbcs	r0, r0
 8002014:	4240      	negs	r0, r0
 8002016:	1809      	adds	r1, r1, r0
 8002018:	020b      	lsls	r3, r1, #8
 800201a:	d400      	bmi.n	800201e <__aeabi_dsub+0x192>
 800201c:	e0be      	b.n	800219c <__aeabi_dsub+0x310>
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <__aeabi_dsub+0x348>)
 8002020:	3501      	adds	r5, #1
 8002022:	429d      	cmp	r5, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x19c>
 8002026:	e0d2      	b.n	80021ce <__aeabi_dsub+0x342>
 8002028:	4a6b      	ldr	r2, [pc, #428]	; (80021d8 <__aeabi_dsub+0x34c>)
 800202a:	0873      	lsrs	r3, r6, #1
 800202c:	400a      	ands	r2, r1
 800202e:	2101      	movs	r1, #1
 8002030:	400e      	ands	r6, r1
 8002032:	431e      	orrs	r6, r3
 8002034:	0851      	lsrs	r1, r2, #1
 8002036:	07d3      	lsls	r3, r2, #31
 8002038:	2207      	movs	r2, #7
 800203a:	431e      	orrs	r6, r3
 800203c:	4032      	ands	r2, r6
 800203e:	e795      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002040:	001e      	movs	r6, r3
 8002042:	4316      	orrs	r6, r2
 8002044:	d000      	beq.n	8002048 <__aeabi_dsub+0x1bc>
 8002046:	e745      	b.n	8001ed4 <__aeabi_dsub+0x48>
 8002048:	e740      	b.n	8001ecc <__aeabi_dsub+0x40>
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <__aeabi_dsub+0x348>)
 800204c:	429d      	cmp	r5, r3
 800204e:	d03a      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	4667      	mov	r7, ip
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431f      	orrs	r7, r3
 8002058:	46bc      	mov	ip, r7
 800205a:	2e38      	cmp	r6, #56	; 0x38
 800205c:	dd00      	ble.n	8002060 <__aeabi_dsub+0x1d4>
 800205e:	e0eb      	b.n	8002238 <__aeabi_dsub+0x3ac>
 8002060:	2e1f      	cmp	r6, #31
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dsub+0x1da>
 8002064:	e13a      	b.n	80022dc <__aeabi_dsub+0x450>
 8002066:	0033      	movs	r3, r6
 8002068:	4667      	mov	r7, ip
 800206a:	3b20      	subs	r3, #32
 800206c:	40df      	lsrs	r7, r3
 800206e:	003b      	movs	r3, r7
 8002070:	2e20      	cmp	r6, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x1f4>
 8002074:	2740      	movs	r7, #64	; 0x40
 8002076:	1bbf      	subs	r7, r7, r6
 8002078:	4666      	mov	r6, ip
 800207a:	40be      	lsls	r6, r7
 800207c:	4332      	orrs	r2, r6
 800207e:	4690      	mov	r8, r2
 8002080:	4646      	mov	r6, r8
 8002082:	1e72      	subs	r2, r6, #1
 8002084:	4196      	sbcs	r6, r2
 8002086:	4333      	orrs	r3, r6
 8002088:	e0da      	b.n	8002240 <__aeabi_dsub+0x3b4>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x204>
 800208e:	e214      	b.n	80024ba <__aeabi_dsub+0x62e>
 8002090:	4663      	mov	r3, ip
 8002092:	4313      	orrs	r3, r2
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x20c>
 8002096:	e168      	b.n	800236a <__aeabi_dsub+0x4de>
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	08c0      	lsrs	r0, r0, #3
 800209e:	08c9      	lsrs	r1, r1, #3
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	4306      	orrs	r6, r0
 80020a4:	4219      	tst	r1, r3
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x22e>
 80020a8:	4660      	mov	r0, ip
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	4218      	tst	r0, r3
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x22e>
 80020b0:	4663      	mov	r3, ip
 80020b2:	0001      	movs	r1, r0
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	0f72      	lsrs	r2, r6, #29
 80020c2:	4d44      	ldr	r5, [pc, #272]	; (80021d4 <__aeabi_dsub+0x348>)
 80020c4:	4311      	orrs	r1, r2
 80020c6:	464b      	mov	r3, r9
 80020c8:	08de      	lsrs	r6, r3, #3
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <__aeabi_dsub+0x348>)
 80020cc:	074f      	lsls	r7, r1, #29
 80020ce:	4337      	orrs	r7, r6
 80020d0:	08ca      	lsrs	r2, r1, #3
 80020d2:	429d      	cmp	r5, r3
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x24c>
 80020d6:	e06e      	b.n	80021b6 <__aeabi_dsub+0x32a>
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	056d      	lsls	r5, r5, #21
 80020dc:	0b12      	lsrs	r2, r2, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	2100      	movs	r1, #0
 80020e2:	0312      	lsls	r2, r2, #12
 80020e4:	0b13      	lsrs	r3, r2, #12
 80020e6:	0d0a      	lsrs	r2, r1, #20
 80020e8:	0512      	lsls	r2, r2, #20
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <__aeabi_dsub+0x350>)
 80020ee:	052d      	lsls	r5, r5, #20
 80020f0:	4013      	ands	r3, r2
 80020f2:	432b      	orrs	r3, r5
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	07e4      	lsls	r4, r4, #31
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	4323      	orrs	r3, r4
 80020fc:	0038      	movs	r0, r7
 80020fe:	0019      	movs	r1, r3
 8002100:	bc3c      	pop	{r2, r3, r4, r5}
 8002102:	4690      	mov	r8, r2
 8002104:	4699      	mov	r9, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	46ab      	mov	fp, r5
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210c:	4663      	mov	r3, ip
 800210e:	4313      	orrs	r3, r2
 8002110:	d011      	beq.n	8002136 <__aeabi_dsub+0x2aa>
 8002112:	1e73      	subs	r3, r6, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x28e>
 8002118:	e107      	b.n	800232a <__aeabi_dsub+0x49e>
 800211a:	1886      	adds	r6, r0, r2
 800211c:	4286      	cmp	r6, r0
 800211e:	4180      	sbcs	r0, r0
 8002120:	4461      	add	r1, ip
 8002122:	4240      	negs	r0, r0
 8002124:	1809      	adds	r1, r1, r0
 8002126:	2501      	movs	r5, #1
 8002128:	020b      	lsls	r3, r1, #8
 800212a:	d537      	bpl.n	800219c <__aeabi_dsub+0x310>
 800212c:	2502      	movs	r5, #2
 800212e:	e77b      	b.n	8002028 <__aeabi_dsub+0x19c>
 8002130:	003e      	movs	r6, r7
 8002132:	4661      	mov	r1, ip
 8002134:	4691      	mov	r9, r2
 8002136:	0035      	movs	r5, r6
 8002138:	e7c5      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800213a:	465c      	mov	r4, fp
 800213c:	2d00      	cmp	r5, #0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x2b6>
 8002140:	e0e1      	b.n	8002306 <__aeabi_dsub+0x47a>
 8002142:	000b      	movs	r3, r1
 8002144:	4303      	orrs	r3, r0
 8002146:	d0f3      	beq.n	8002130 <__aeabi_dsub+0x2a4>
 8002148:	1c73      	adds	r3, r6, #1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x2c2>
 800214c:	e1ac      	b.n	80024a8 <__aeabi_dsub+0x61c>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <__aeabi_dsub+0x348>)
 8002150:	429f      	cmp	r7, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2ca>
 8002154:	e13a      	b.n	80023cc <__aeabi_dsub+0x540>
 8002156:	43f3      	mvns	r3, r6
 8002158:	2b38      	cmp	r3, #56	; 0x38
 800215a:	dd00      	ble.n	800215e <__aeabi_dsub+0x2d2>
 800215c:	e16f      	b.n	800243e <__aeabi_dsub+0x5b2>
 800215e:	2b1f      	cmp	r3, #31
 8002160:	dd00      	ble.n	8002164 <__aeabi_dsub+0x2d8>
 8002162:	e18c      	b.n	800247e <__aeabi_dsub+0x5f2>
 8002164:	2520      	movs	r5, #32
 8002166:	000e      	movs	r6, r1
 8002168:	1aed      	subs	r5, r5, r3
 800216a:	40ae      	lsls	r6, r5
 800216c:	46b0      	mov	r8, r6
 800216e:	0006      	movs	r6, r0
 8002170:	46aa      	mov	sl, r5
 8002172:	40de      	lsrs	r6, r3
 8002174:	4645      	mov	r5, r8
 8002176:	4335      	orrs	r5, r6
 8002178:	002e      	movs	r6, r5
 800217a:	4655      	mov	r5, sl
 800217c:	40d9      	lsrs	r1, r3
 800217e:	40a8      	lsls	r0, r5
 8002180:	4663      	mov	r3, ip
 8002182:	1e45      	subs	r5, r0, #1
 8002184:	41a8      	sbcs	r0, r5
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	469c      	mov	ip, r3
 800218a:	4330      	orrs	r0, r6
 800218c:	1a16      	subs	r6, r2, r0
 800218e:	42b2      	cmp	r2, r6
 8002190:	4192      	sbcs	r2, r2
 8002192:	4663      	mov	r3, ip
 8002194:	4252      	negs	r2, r2
 8002196:	1a99      	subs	r1, r3, r2
 8002198:	003d      	movs	r5, r7
 800219a:	e6b4      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800219c:	2207      	movs	r2, #7
 800219e:	4032      	ands	r2, r6
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x31a>
 80021a4:	e6e4      	b.n	8001f70 <__aeabi_dsub+0xe4>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__aeabi_dsub+0x348>)
 80021a8:	08f6      	lsrs	r6, r6, #3
 80021aa:	074f      	lsls	r7, r1, #29
 80021ac:	4337      	orrs	r7, r6
 80021ae:	08ca      	lsrs	r2, r1, #3
 80021b0:	429d      	cmp	r5, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x32a>
 80021b4:	e790      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80021b6:	003b      	movs	r3, r7
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x332>
 80021bc:	e1a6      	b.n	800250c <__aeabi_dsub+0x680>
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0312      	lsls	r2, r2, #12
 80021c6:	0b12      	lsrs	r2, r2, #12
 80021c8:	4d02      	ldr	r5, [pc, #8]	; (80021d4 <__aeabi_dsub+0x348>)
 80021ca:	e789      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021cc:	0015      	movs	r5, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	2700      	movs	r7, #0
 80021d2:	e785      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	ff7fffff 	.word	0xff7fffff
 80021dc:	800fffff 	.word	0x800fffff
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x35a>
 80021e4:	e0c7      	b.n	8002376 <__aeabi_dsub+0x4ea>
 80021e6:	1c6b      	adds	r3, r5, #1
 80021e8:	055e      	lsls	r6, r3, #21
 80021ea:	0d76      	lsrs	r6, r6, #21
 80021ec:	2e01      	cmp	r6, #1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x366>
 80021f0:	e0f0      	b.n	80023d4 <__aeabi_dsub+0x548>
 80021f2:	4dc8      	ldr	r5, [pc, #800]	; (8002514 <__aeabi_dsub+0x688>)
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x36e>
 80021f8:	e0b9      	b.n	800236e <__aeabi_dsub+0x4e2>
 80021fa:	1885      	adds	r5, r0, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	4285      	cmp	r5, r0
 8002200:	4189      	sbcs	r1, r1
 8002202:	4462      	add	r2, ip
 8002204:	4249      	negs	r1, r1
 8002206:	1851      	adds	r1, r2, r1
 8002208:	2207      	movs	r2, #7
 800220a:	07ce      	lsls	r6, r1, #31
 800220c:	086d      	lsrs	r5, r5, #1
 800220e:	432e      	orrs	r6, r5
 8002210:	0849      	lsrs	r1, r1, #1
 8002212:	4032      	ands	r2, r6
 8002214:	001d      	movs	r5, r3
 8002216:	e6a9      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002218:	49bf      	ldr	r1, [pc, #764]	; (8002518 <__aeabi_dsub+0x68c>)
 800221a:	1aed      	subs	r5, r5, r3
 800221c:	4011      	ands	r1, r2
 800221e:	2207      	movs	r2, #7
 8002220:	4032      	ands	r2, r6
 8002222:	e6a3      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002224:	0032      	movs	r2, r6
 8002226:	3828      	subs	r0, #40	; 0x28
 8002228:	4082      	lsls	r2, r0
 800222a:	2600      	movs	r6, #0
 800222c:	e686      	b.n	8001f3c <__aeabi_dsub+0xb0>
 800222e:	0030      	movs	r0, r6
 8002230:	f000 fa68 	bl	8002704 <__clzsi2>
 8002234:	3020      	adds	r0, #32
 8002236:	e673      	b.n	8001f20 <__aeabi_dsub+0x94>
 8002238:	4663      	mov	r3, ip
 800223a:	4313      	orrs	r3, r2
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	4193      	sbcs	r3, r2
 8002240:	1ac6      	subs	r6, r0, r3
 8002242:	42b0      	cmp	r0, r6
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	1a09      	subs	r1, r1, r0
 800224a:	e65c      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800224c:	000e      	movs	r6, r1
 800224e:	4667      	mov	r7, ip
 8002250:	4306      	orrs	r6, r0
 8002252:	4317      	orrs	r7, r2
 8002254:	2d00      	cmp	r5, #0
 8002256:	d15e      	bne.n	8002316 <__aeabi_dsub+0x48a>
 8002258:	2e00      	cmp	r6, #0
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x3d2>
 800225c:	e0f3      	b.n	8002446 <__aeabi_dsub+0x5ba>
 800225e:	2f00      	cmp	r7, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x3d8>
 8002262:	e11e      	b.n	80024a2 <__aeabi_dsub+0x616>
 8002264:	465c      	mov	r4, fp
 8002266:	4661      	mov	r1, ip
 8002268:	4691      	mov	r9, r2
 800226a:	e72c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800226c:	4fa9      	ldr	r7, [pc, #676]	; (8002514 <__aeabi_dsub+0x688>)
 800226e:	42be      	cmp	r6, r7
 8002270:	d07b      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002272:	001e      	movs	r6, r3
 8002274:	e6f1      	b.n	800205a <__aeabi_dsub+0x1ce>
 8002276:	0010      	movs	r0, r2
 8002278:	3d1f      	subs	r5, #31
 800227a:	40e8      	lsrs	r0, r5
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <__aeabi_dsub+0x3fc>
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	1acb      	subs	r3, r1, r3
 8002284:	409a      	lsls	r2, r3
 8002286:	4316      	orrs	r6, r2
 8002288:	1e73      	subs	r3, r6, #1
 800228a:	419e      	sbcs	r6, r3
 800228c:	2207      	movs	r2, #7
 800228e:	4306      	orrs	r6, r0
 8002290:	4032      	ands	r2, r6
 8002292:	2100      	movs	r1, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e783      	b.n	80021a0 <__aeabi_dsub+0x314>
 8002298:	1a16      	subs	r6, r2, r0
 800229a:	4663      	mov	r3, ip
 800229c:	42b2      	cmp	r2, r6
 800229e:	4180      	sbcs	r0, r0
 80022a0:	1a59      	subs	r1, r3, r1
 80022a2:	4240      	negs	r0, r0
 80022a4:	1a0b      	subs	r3, r1, r0
 80022a6:	4698      	mov	r8, r3
 80022a8:	465c      	mov	r4, fp
 80022aa:	e632      	b.n	8001f12 <__aeabi_dsub+0x86>
 80022ac:	2e1f      	cmp	r6, #31
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0x426>
 80022b0:	e0ab      	b.n	800240a <__aeabi_dsub+0x57e>
 80022b2:	2720      	movs	r7, #32
 80022b4:	1bbb      	subs	r3, r7, r6
 80022b6:	469a      	mov	sl, r3
 80022b8:	4663      	mov	r3, ip
 80022ba:	4657      	mov	r7, sl
 80022bc:	40bb      	lsls	r3, r7
 80022be:	4699      	mov	r9, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	464f      	mov	r7, r9
 80022c4:	40f3      	lsrs	r3, r6
 80022c6:	431f      	orrs	r7, r3
 80022c8:	003b      	movs	r3, r7
 80022ca:	4657      	mov	r7, sl
 80022cc:	40ba      	lsls	r2, r7
 80022ce:	1e57      	subs	r7, r2, #1
 80022d0:	41ba      	sbcs	r2, r7
 80022d2:	4313      	orrs	r3, r2
 80022d4:	4662      	mov	r2, ip
 80022d6:	40f2      	lsrs	r2, r6
 80022d8:	1889      	adds	r1, r1, r2
 80022da:	e698      	b.n	800200e <__aeabi_dsub+0x182>
 80022dc:	2720      	movs	r7, #32
 80022de:	1bbb      	subs	r3, r7, r6
 80022e0:	469a      	mov	sl, r3
 80022e2:	4663      	mov	r3, ip
 80022e4:	4657      	mov	r7, sl
 80022e6:	40bb      	lsls	r3, r7
 80022e8:	4699      	mov	r9, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	464f      	mov	r7, r9
 80022ee:	40f3      	lsrs	r3, r6
 80022f0:	431f      	orrs	r7, r3
 80022f2:	003b      	movs	r3, r7
 80022f4:	4657      	mov	r7, sl
 80022f6:	40ba      	lsls	r2, r7
 80022f8:	1e57      	subs	r7, r2, #1
 80022fa:	41ba      	sbcs	r2, r7
 80022fc:	4313      	orrs	r3, r2
 80022fe:	4662      	mov	r2, ip
 8002300:	40f2      	lsrs	r2, r6
 8002302:	1a89      	subs	r1, r1, r2
 8002304:	e79c      	b.n	8002240 <__aeabi_dsub+0x3b4>
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <__aeabi_dsub+0x688>)
 8002308:	429f      	cmp	r7, r3
 800230a:	d05f      	beq.n	80023cc <__aeabi_dsub+0x540>
 800230c:	2580      	movs	r5, #128	; 0x80
 800230e:	042d      	lsls	r5, r5, #16
 8002310:	4273      	negs	r3, r6
 8002312:	4329      	orrs	r1, r5
 8002314:	e720      	b.n	8002158 <__aeabi_dsub+0x2cc>
 8002316:	2e00      	cmp	r6, #0
 8002318:	d10c      	bne.n	8002334 <__aeabi_dsub+0x4a8>
 800231a:	2f00      	cmp	r7, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x494>
 800231e:	e0d0      	b.n	80024c2 <__aeabi_dsub+0x636>
 8002320:	465c      	mov	r4, fp
 8002322:	4661      	mov	r1, ip
 8002324:	4691      	mov	r9, r2
 8002326:	4d7b      	ldr	r5, [pc, #492]	; (8002514 <__aeabi_dsub+0x688>)
 8002328:	e6cd      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800232a:	4f7a      	ldr	r7, [pc, #488]	; (8002514 <__aeabi_dsub+0x688>)
 800232c:	42be      	cmp	r6, r7
 800232e:	d01c      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002330:	001e      	movs	r6, r3
 8002332:	e665      	b.n	8002000 <__aeabi_dsub+0x174>
 8002334:	2f00      	cmp	r7, #0
 8002336:	d018      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002338:	08c0      	lsrs	r0, r0, #3
 800233a:	074e      	lsls	r6, r1, #29
 800233c:	4306      	orrs	r6, r0
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	08c9      	lsrs	r1, r1, #3
 8002342:	0300      	lsls	r0, r0, #12
 8002344:	4201      	tst	r1, r0
 8002346:	d008      	beq.n	800235a <__aeabi_dsub+0x4ce>
 8002348:	4663      	mov	r3, ip
 800234a:	08dc      	lsrs	r4, r3, #3
 800234c:	4204      	tst	r4, r0
 800234e:	d104      	bne.n	800235a <__aeabi_dsub+0x4ce>
 8002350:	0021      	movs	r1, r4
 8002352:	46da      	mov	sl, fp
 8002354:	08d2      	lsrs	r2, r2, #3
 8002356:	075e      	lsls	r6, r3, #29
 8002358:	4316      	orrs	r6, r2
 800235a:	00f3      	lsls	r3, r6, #3
 800235c:	4699      	mov	r9, r3
 800235e:	2401      	movs	r4, #1
 8002360:	4653      	mov	r3, sl
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	0f72      	lsrs	r2, r6, #29
 8002366:	4311      	orrs	r1, r2
 8002368:	401c      	ands	r4, r3
 800236a:	4d6a      	ldr	r5, [pc, #424]	; (8002514 <__aeabi_dsub+0x688>)
 800236c:	e6ab      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800236e:	001d      	movs	r5, r3
 8002370:	2200      	movs	r2, #0
 8002372:	2700      	movs	r7, #0
 8002374:	e6b4      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002376:	2d00      	cmp	r5, #0
 8002378:	d159      	bne.n	800242e <__aeabi_dsub+0x5a2>
 800237a:	000b      	movs	r3, r1
 800237c:	4303      	orrs	r3, r0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x4f6>
 8002380:	e6d6      	b.n	8002130 <__aeabi_dsub+0x2a4>
 8002382:	1c73      	adds	r3, r6, #1
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x4fc>
 8002386:	e0b2      	b.n	80024ee <__aeabi_dsub+0x662>
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <__aeabi_dsub+0x688>)
 800238a:	429f      	cmp	r7, r3
 800238c:	d01e      	beq.n	80023cc <__aeabi_dsub+0x540>
 800238e:	43f3      	mvns	r3, r6
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	dc6f      	bgt.n	8002474 <__aeabi_dsub+0x5e8>
 8002394:	2b1f      	cmp	r3, #31
 8002396:	dd00      	ble.n	800239a <__aeabi_dsub+0x50e>
 8002398:	e097      	b.n	80024ca <__aeabi_dsub+0x63e>
 800239a:	2520      	movs	r5, #32
 800239c:	000e      	movs	r6, r1
 800239e:	1aed      	subs	r5, r5, r3
 80023a0:	40ae      	lsls	r6, r5
 80023a2:	46b0      	mov	r8, r6
 80023a4:	0006      	movs	r6, r0
 80023a6:	46aa      	mov	sl, r5
 80023a8:	40de      	lsrs	r6, r3
 80023aa:	4645      	mov	r5, r8
 80023ac:	4335      	orrs	r5, r6
 80023ae:	002e      	movs	r6, r5
 80023b0:	4655      	mov	r5, sl
 80023b2:	40a8      	lsls	r0, r5
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	1e45      	subs	r5, r0, #1
 80023b8:	41a8      	sbcs	r0, r5
 80023ba:	448c      	add	ip, r1
 80023bc:	4306      	orrs	r6, r0
 80023be:	18b6      	adds	r6, r6, r2
 80023c0:	4296      	cmp	r6, r2
 80023c2:	4192      	sbcs	r2, r2
 80023c4:	4251      	negs	r1, r2
 80023c6:	4461      	add	r1, ip
 80023c8:	003d      	movs	r5, r7
 80023ca:	e625      	b.n	8002018 <__aeabi_dsub+0x18c>
 80023cc:	003d      	movs	r5, r7
 80023ce:	4661      	mov	r1, ip
 80023d0:	4691      	mov	r9, r2
 80023d2:	e678      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023d4:	000b      	movs	r3, r1
 80023d6:	4303      	orrs	r3, r0
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x552>
 80023dc:	e655      	b.n	800208a <__aeabi_dsub+0x1fe>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f5      	beq.n	80023ce <__aeabi_dsub+0x542>
 80023e2:	4663      	mov	r3, ip
 80023e4:	4313      	orrs	r3, r2
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x55e>
 80023e8:	e66d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023ea:	1886      	adds	r6, r0, r2
 80023ec:	4286      	cmp	r6, r0
 80023ee:	4180      	sbcs	r0, r0
 80023f0:	4461      	add	r1, ip
 80023f2:	4240      	negs	r0, r0
 80023f4:	1809      	adds	r1, r1, r0
 80023f6:	2200      	movs	r2, #0
 80023f8:	020b      	lsls	r3, r1, #8
 80023fa:	d400      	bmi.n	80023fe <__aeabi_dsub+0x572>
 80023fc:	e6d0      	b.n	80021a0 <__aeabi_dsub+0x314>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <__aeabi_dsub+0x68c>)
 8002400:	3501      	adds	r5, #1
 8002402:	4019      	ands	r1, r3
 8002404:	e5b2      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002406:	46b1      	mov	r9, r6
 8002408:	e65d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800240a:	0033      	movs	r3, r6
 800240c:	4667      	mov	r7, ip
 800240e:	3b20      	subs	r3, #32
 8002410:	40df      	lsrs	r7, r3
 8002412:	003b      	movs	r3, r7
 8002414:	2e20      	cmp	r6, #32
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0x598>
 8002418:	2740      	movs	r7, #64	; 0x40
 800241a:	1bbf      	subs	r7, r7, r6
 800241c:	4666      	mov	r6, ip
 800241e:	40be      	lsls	r6, r7
 8002420:	4332      	orrs	r2, r6
 8002422:	4690      	mov	r8, r2
 8002424:	4646      	mov	r6, r8
 8002426:	1e72      	subs	r2, r6, #1
 8002428:	4196      	sbcs	r6, r2
 800242a:	4333      	orrs	r3, r6
 800242c:	e5ef      	b.n	800200e <__aeabi_dsub+0x182>
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <__aeabi_dsub+0x688>)
 8002430:	429f      	cmp	r7, r3
 8002432:	d0cb      	beq.n	80023cc <__aeabi_dsub+0x540>
 8002434:	2580      	movs	r5, #128	; 0x80
 8002436:	042d      	lsls	r5, r5, #16
 8002438:	4273      	negs	r3, r6
 800243a:	4329      	orrs	r1, r5
 800243c:	e7a8      	b.n	8002390 <__aeabi_dsub+0x504>
 800243e:	4308      	orrs	r0, r1
 8002440:	1e41      	subs	r1, r0, #1
 8002442:	4188      	sbcs	r0, r1
 8002444:	e6a2      	b.n	800218c <__aeabi_dsub+0x300>
 8002446:	2f00      	cmp	r7, #0
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x5c0>
 800244a:	e63c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800244c:	4663      	mov	r3, ip
 800244e:	1a86      	subs	r6, r0, r2
 8002450:	1acf      	subs	r7, r1, r3
 8002452:	42b0      	cmp	r0, r6
 8002454:	419b      	sbcs	r3, r3
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	4698      	mov	r8, r3
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d54e      	bpl.n	80024fe <__aeabi_dsub+0x672>
 8002460:	1a16      	subs	r6, r2, r0
 8002462:	4663      	mov	r3, ip
 8002464:	42b2      	cmp	r2, r6
 8002466:	4192      	sbcs	r2, r2
 8002468:	1a59      	subs	r1, r3, r1
 800246a:	4252      	negs	r2, r2
 800246c:	1a89      	subs	r1, r1, r2
 800246e:	465c      	mov	r4, fp
 8002470:	2200      	movs	r2, #0
 8002472:	e57b      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002474:	4301      	orrs	r1, r0
 8002476:	000e      	movs	r6, r1
 8002478:	1e71      	subs	r1, r6, #1
 800247a:	418e      	sbcs	r6, r1
 800247c:	e79f      	b.n	80023be <__aeabi_dsub+0x532>
 800247e:	001d      	movs	r5, r3
 8002480:	000e      	movs	r6, r1
 8002482:	3d20      	subs	r5, #32
 8002484:	40ee      	lsrs	r6, r5
 8002486:	46b0      	mov	r8, r6
 8002488:	2b20      	cmp	r3, #32
 800248a:	d004      	beq.n	8002496 <__aeabi_dsub+0x60a>
 800248c:	2540      	movs	r5, #64	; 0x40
 800248e:	1aeb      	subs	r3, r5, r3
 8002490:	4099      	lsls	r1, r3
 8002492:	4308      	orrs	r0, r1
 8002494:	4681      	mov	r9, r0
 8002496:	4648      	mov	r0, r9
 8002498:	4643      	mov	r3, r8
 800249a:	1e41      	subs	r1, r0, #1
 800249c:	4188      	sbcs	r0, r1
 800249e:	4318      	orrs	r0, r3
 80024a0:	e674      	b.n	800218c <__aeabi_dsub+0x300>
 80024a2:	2200      	movs	r2, #0
 80024a4:	2400      	movs	r4, #0
 80024a6:	e617      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80024a8:	1a16      	subs	r6, r2, r0
 80024aa:	4663      	mov	r3, ip
 80024ac:	42b2      	cmp	r2, r6
 80024ae:	4192      	sbcs	r2, r2
 80024b0:	1a59      	subs	r1, r3, r1
 80024b2:	4252      	negs	r2, r2
 80024b4:	1a89      	subs	r1, r1, r2
 80024b6:	003d      	movs	r5, r7
 80024b8:	e525      	b.n	8001f06 <__aeabi_dsub+0x7a>
 80024ba:	4661      	mov	r1, ip
 80024bc:	4691      	mov	r9, r2
 80024be:	4d15      	ldr	r5, [pc, #84]	; (8002514 <__aeabi_dsub+0x688>)
 80024c0:	e601      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2400      	movs	r4, #0
 80024c6:	0312      	lsls	r2, r2, #12
 80024c8:	e679      	b.n	80021be <__aeabi_dsub+0x332>
 80024ca:	001d      	movs	r5, r3
 80024cc:	000e      	movs	r6, r1
 80024ce:	3d20      	subs	r5, #32
 80024d0:	40ee      	lsrs	r6, r5
 80024d2:	46b0      	mov	r8, r6
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d004      	beq.n	80024e2 <__aeabi_dsub+0x656>
 80024d8:	2540      	movs	r5, #64	; 0x40
 80024da:	1aeb      	subs	r3, r5, r3
 80024dc:	4099      	lsls	r1, r3
 80024de:	4308      	orrs	r0, r1
 80024e0:	4681      	mov	r9, r0
 80024e2:	464e      	mov	r6, r9
 80024e4:	4643      	mov	r3, r8
 80024e6:	1e71      	subs	r1, r6, #1
 80024e8:	418e      	sbcs	r6, r1
 80024ea:	431e      	orrs	r6, r3
 80024ec:	e767      	b.n	80023be <__aeabi_dsub+0x532>
 80024ee:	1886      	adds	r6, r0, r2
 80024f0:	4296      	cmp	r6, r2
 80024f2:	419b      	sbcs	r3, r3
 80024f4:	4461      	add	r1, ip
 80024f6:	425b      	negs	r3, r3
 80024f8:	18c9      	adds	r1, r1, r3
 80024fa:	003d      	movs	r5, r7
 80024fc:	e58c      	b.n	8002018 <__aeabi_dsub+0x18c>
 80024fe:	4647      	mov	r7, r8
 8002500:	4337      	orrs	r7, r6
 8002502:	d0ce      	beq.n	80024a2 <__aeabi_dsub+0x616>
 8002504:	2207      	movs	r2, #7
 8002506:	4641      	mov	r1, r8
 8002508:	4032      	ands	r2, r6
 800250a:	e649      	b.n	80021a0 <__aeabi_dsub+0x314>
 800250c:	2700      	movs	r7, #0
 800250e:	003a      	movs	r2, r7
 8002510:	e5e6      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	000007ff 	.word	0x000007ff
 8002518:	ff7fffff 	.word	0xff7fffff

0800251c <__aeabi_d2iz>:
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	4d14      	ldr	r5, [pc, #80]	; (8002570 <__aeabi_d2iz+0x54>)
 8002520:	030a      	lsls	r2, r1, #12
 8002522:	004b      	lsls	r3, r1, #1
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	0fc9      	lsrs	r1, r1, #31
 800252a:	2400      	movs	r4, #0
 800252c:	42ab      	cmp	r3, r5
 800252e:	dd11      	ble.n	8002554 <__aeabi_d2iz+0x38>
 8002530:	4c10      	ldr	r4, [pc, #64]	; (8002574 <__aeabi_d2iz+0x58>)
 8002532:	42a3      	cmp	r3, r4
 8002534:	dc10      	bgt.n	8002558 <__aeabi_d2iz+0x3c>
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	0364      	lsls	r4, r4, #13
 800253a:	4322      	orrs	r2, r4
 800253c:	4c0e      	ldr	r4, [pc, #56]	; (8002578 <__aeabi_d2iz+0x5c>)
 800253e:	1ae4      	subs	r4, r4, r3
 8002540:	2c1f      	cmp	r4, #31
 8002542:	dd0c      	ble.n	800255e <__aeabi_d2iz+0x42>
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <__aeabi_d2iz+0x60>)
 8002546:	1ac3      	subs	r3, r0, r3
 8002548:	40da      	lsrs	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	425c      	negs	r4, r3
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_d2iz+0x38>
 8002552:	001c      	movs	r4, r3
 8002554:	0020      	movs	r0, r4
 8002556:	bd30      	pop	{r4, r5, pc}
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <__aeabi_d2iz+0x64>)
 800255a:	18cc      	adds	r4, r1, r3
 800255c:	e7fa      	b.n	8002554 <__aeabi_d2iz+0x38>
 800255e:	4d09      	ldr	r5, [pc, #36]	; (8002584 <__aeabi_d2iz+0x68>)
 8002560:	40e0      	lsrs	r0, r4
 8002562:	46ac      	mov	ip, r5
 8002564:	4463      	add	r3, ip
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	4303      	orrs	r3, r0
 800256c:	e7ee      	b.n	800254c <__aeabi_d2iz+0x30>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	000003fe 	.word	0x000003fe
 8002574:	0000041d 	.word	0x0000041d
 8002578:	00000433 	.word	0x00000433
 800257c:	00000413 	.word	0x00000413
 8002580:	7fffffff 	.word	0x7fffffff
 8002584:	fffffbed 	.word	0xfffffbed

08002588 <__aeabi_i2d>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2800      	cmp	r0, #0
 800258c:	d02d      	beq.n	80025ea <__aeabi_i2d+0x62>
 800258e:	17c3      	asrs	r3, r0, #31
 8002590:	18c5      	adds	r5, r0, r3
 8002592:	405d      	eors	r5, r3
 8002594:	0fc4      	lsrs	r4, r0, #31
 8002596:	0028      	movs	r0, r5
 8002598:	f000 f8b4 	bl	8002704 <__clzsi2>
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <__aeabi_i2d+0x6c>)
 800259e:	1a1b      	subs	r3, r3, r0
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	0d5b      	lsrs	r3, r3, #21
 80025a4:	280a      	cmp	r0, #10
 80025a6:	dd15      	ble.n	80025d4 <__aeabi_i2d+0x4c>
 80025a8:	380b      	subs	r0, #11
 80025aa:	4085      	lsls	r5, r0
 80025ac:	2200      	movs	r2, #0
 80025ae:	032d      	lsls	r5, r5, #12
 80025b0:	0b2d      	lsrs	r5, r5, #12
 80025b2:	2100      	movs	r1, #0
 80025b4:	0010      	movs	r0, r2
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	0d0a      	lsrs	r2, r1, #20
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	0512      	lsls	r2, r2, #20
 80025be:	432a      	orrs	r2, r5
 80025c0:	4d0d      	ldr	r5, [pc, #52]	; (80025f8 <__aeabi_i2d+0x70>)
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	402a      	ands	r2, r5
 80025c6:	4313      	orrs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	07e4      	lsls	r4, r4, #31
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	4323      	orrs	r3, r4
 80025d0:	0019      	movs	r1, r3
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	0002      	movs	r2, r0
 80025d6:	0029      	movs	r1, r5
 80025d8:	3215      	adds	r2, #21
 80025da:	4091      	lsls	r1, r2
 80025dc:	000a      	movs	r2, r1
 80025de:	210b      	movs	r1, #11
 80025e0:	1a08      	subs	r0, r1, r0
 80025e2:	40c5      	lsrs	r5, r0
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	0b2d      	lsrs	r5, r5, #12
 80025e8:	e7e3      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025ea:	2400      	movs	r4, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	2500      	movs	r5, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	e7de      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025f4:	0000041e 	.word	0x0000041e
 80025f8:	800fffff 	.word	0x800fffff

080025fc <__aeabi_ui2d>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	1e04      	subs	r4, r0, #0
 8002600:	d025      	beq.n	800264e <__aeabi_ui2d+0x52>
 8002602:	f000 f87f 	bl	8002704 <__clzsi2>
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <__aeabi_ui2d+0x5c>)
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	0d5b      	lsrs	r3, r3, #21
 800260e:	280a      	cmp	r0, #10
 8002610:	dd12      	ble.n	8002638 <__aeabi_ui2d+0x3c>
 8002612:	380b      	subs	r0, #11
 8002614:	4084      	lsls	r4, r0
 8002616:	2200      	movs	r2, #0
 8002618:	0324      	lsls	r4, r4, #12
 800261a:	0b24      	lsrs	r4, r4, #12
 800261c:	2100      	movs	r1, #0
 800261e:	0010      	movs	r0, r2
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	0d0a      	lsrs	r2, r1, #20
 8002624:	0b24      	lsrs	r4, r4, #12
 8002626:	0512      	lsls	r2, r2, #20
 8002628:	4322      	orrs	r2, r4
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__aeabi_ui2d+0x60>)
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4022      	ands	r2, r4
 8002630:	4313      	orrs	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	0859      	lsrs	r1, r3, #1
 8002636:	bd10      	pop	{r4, pc}
 8002638:	0002      	movs	r2, r0
 800263a:	0021      	movs	r1, r4
 800263c:	3215      	adds	r2, #21
 800263e:	4091      	lsls	r1, r2
 8002640:	000a      	movs	r2, r1
 8002642:	210b      	movs	r1, #11
 8002644:	1a08      	subs	r0, r1, r0
 8002646:	40c4      	lsrs	r4, r0
 8002648:	0324      	lsls	r4, r4, #12
 800264a:	0b24      	lsrs	r4, r4, #12
 800264c:	e7e6      	b.n	800261c <__aeabi_ui2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	e7e2      	b.n	800261c <__aeabi_ui2d+0x20>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	0000041e 	.word	0x0000041e
 800265c:	800fffff 	.word	0x800fffff

08002660 <__aeabi_f2d>:
 8002660:	0041      	lsls	r1, r0, #1
 8002662:	0e09      	lsrs	r1, r1, #24
 8002664:	1c4b      	adds	r3, r1, #1
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	b2db      	uxtb	r3, r3
 800266a:	0246      	lsls	r6, r0, #9
 800266c:	0a75      	lsrs	r5, r6, #9
 800266e:	0fc4      	lsrs	r4, r0, #31
 8002670:	2b01      	cmp	r3, #1
 8002672:	dd14      	ble.n	800269e <__aeabi_f2d+0x3e>
 8002674:	23e0      	movs	r3, #224	; 0xe0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	076d      	lsls	r5, r5, #29
 800267a:	0b36      	lsrs	r6, r6, #12
 800267c:	18cb      	adds	r3, r1, r3
 800267e:	2100      	movs	r1, #0
 8002680:	0d0a      	lsrs	r2, r1, #20
 8002682:	0028      	movs	r0, r5
 8002684:	0512      	lsls	r2, r2, #20
 8002686:	4d1c      	ldr	r5, [pc, #112]	; (80026f8 <__aeabi_f2d+0x98>)
 8002688:	4332      	orrs	r2, r6
 800268a:	055b      	lsls	r3, r3, #21
 800268c:	402a      	ands	r2, r5
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	4313      	orrs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	4323      	orrs	r3, r4
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	2900      	cmp	r1, #0
 80026a0:	d114      	bne.n	80026cc <__aeabi_f2d+0x6c>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d01e      	beq.n	80026e4 <__aeabi_f2d+0x84>
 80026a6:	0028      	movs	r0, r5
 80026a8:	f000 f82c 	bl	8002704 <__clzsi2>
 80026ac:	280a      	cmp	r0, #10
 80026ae:	dc1c      	bgt.n	80026ea <__aeabi_f2d+0x8a>
 80026b0:	230b      	movs	r3, #11
 80026b2:	002a      	movs	r2, r5
 80026b4:	1a1b      	subs	r3, r3, r0
 80026b6:	40da      	lsrs	r2, r3
 80026b8:	0003      	movs	r3, r0
 80026ba:	3315      	adds	r3, #21
 80026bc:	409d      	lsls	r5, r3
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_f2d+0x9c>)
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	1a1b      	subs	r3, r3, r0
 80026c4:	055b      	lsls	r3, r3, #21
 80026c6:	0b16      	lsrs	r6, r2, #12
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	e7d8      	b.n	800267e <__aeabi_f2d+0x1e>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d006      	beq.n	80026de <__aeabi_f2d+0x7e>
 80026d0:	0b32      	lsrs	r2, r6, #12
 80026d2:	2680      	movs	r6, #128	; 0x80
 80026d4:	0336      	lsls	r6, r6, #12
 80026d6:	076d      	lsls	r5, r5, #29
 80026d8:	4316      	orrs	r6, r2
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <__aeabi_f2d+0xa0>)
 80026dc:	e7cf      	b.n	800267e <__aeabi_f2d+0x1e>
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <__aeabi_f2d+0xa0>)
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7cc      	b.n	800267e <__aeabi_f2d+0x1e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2600      	movs	r6, #0
 80026e8:	e7c9      	b.n	800267e <__aeabi_f2d+0x1e>
 80026ea:	0003      	movs	r3, r0
 80026ec:	002a      	movs	r2, r5
 80026ee:	3b0b      	subs	r3, #11
 80026f0:	409a      	lsls	r2, r3
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7e3      	b.n	80026be <__aeabi_f2d+0x5e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	800fffff 	.word	0x800fffff
 80026fc:	00000389 	.word	0x00000389
 8002700:	000007ff 	.word	0x000007ff

08002704 <__clzsi2>:
 8002704:	211c      	movs	r1, #28
 8002706:	2301      	movs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	4298      	cmp	r0, r3
 800270c:	d301      	bcc.n	8002712 <__clzsi2+0xe>
 800270e:	0c00      	lsrs	r0, r0, #16
 8002710:	3910      	subs	r1, #16
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	4298      	cmp	r0, r3
 8002716:	d301      	bcc.n	800271c <__clzsi2+0x18>
 8002718:	0a00      	lsrs	r0, r0, #8
 800271a:	3908      	subs	r1, #8
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	4298      	cmp	r0, r3
 8002720:	d301      	bcc.n	8002726 <__clzsi2+0x22>
 8002722:	0900      	lsrs	r0, r0, #4
 8002724:	3904      	subs	r1, #4
 8002726:	a202      	add	r2, pc, #8	; (adr r2, 8002730 <__clzsi2+0x2c>)
 8002728:	5c10      	ldrb	r0, [r2, r0]
 800272a:	1840      	adds	r0, r0, r1
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	02020304 	.word	0x02020304
 8002734:	01010101 	.word	0x01010101
	...

08002740 <__clzdi2>:
 8002740:	b510      	push	{r4, lr}
 8002742:	2900      	cmp	r1, #0
 8002744:	d103      	bne.n	800274e <__clzdi2+0xe>
 8002746:	f7ff ffdd 	bl	8002704 <__clzsi2>
 800274a:	3020      	adds	r0, #32
 800274c:	e002      	b.n	8002754 <__clzdi2+0x14>
 800274e:	1c08      	adds	r0, r1, #0
 8002750:	f7ff ffd8 	bl	8002704 <__clzsi2>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)

08002758 <__divdi3>:
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	464e      	mov	r6, r9
 800275c:	4657      	mov	r7, sl
 800275e:	46de      	mov	lr, fp
 8002760:	4645      	mov	r5, r8
 8002762:	b5e0      	push	{r5, r6, r7, lr}
 8002764:	000f      	movs	r7, r1
 8002766:	2100      	movs	r1, #0
 8002768:	b083      	sub	sp, #12
 800276a:	0006      	movs	r6, r0
 800276c:	4689      	mov	r9, r1
 800276e:	2f00      	cmp	r7, #0
 8002770:	da06      	bge.n	8002780 <__divdi3+0x28>
 8002772:	0039      	movs	r1, r7
 8002774:	2700      	movs	r7, #0
 8002776:	4246      	negs	r6, r0
 8002778:	418f      	sbcs	r7, r1
 800277a:	2101      	movs	r1, #1
 800277c:	4249      	negs	r1, r1
 800277e:	4689      	mov	r9, r1
 8002780:	2b00      	cmp	r3, #0
 8002782:	da07      	bge.n	8002794 <__divdi3+0x3c>
 8002784:	4649      	mov	r1, r9
 8002786:	43c9      	mvns	r1, r1
 8002788:	0010      	movs	r0, r2
 800278a:	4689      	mov	r9, r1
 800278c:	0019      	movs	r1, r3
 800278e:	2300      	movs	r3, #0
 8002790:	4242      	negs	r2, r0
 8002792:	418b      	sbcs	r3, r1
 8002794:	0034      	movs	r4, r6
 8002796:	003d      	movs	r5, r7
 8002798:	4692      	mov	sl, r2
 800279a:	4698      	mov	r8, r3
 800279c:	42bb      	cmp	r3, r7
 800279e:	d869      	bhi.n	8002874 <__divdi3+0x11c>
 80027a0:	d066      	beq.n	8002870 <__divdi3+0x118>
 80027a2:	4641      	mov	r1, r8
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff ffcb 	bl	8002740 <__clzdi2>
 80027aa:	4683      	mov	fp, r0
 80027ac:	0039      	movs	r1, r7
 80027ae:	0030      	movs	r0, r6
 80027b0:	f7ff ffc6 	bl	8002740 <__clzdi2>
 80027b4:	465b      	mov	r3, fp
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	469c      	mov	ip, r3
 80027ba:	3b20      	subs	r3, #32
 80027bc:	469b      	mov	fp, r3
 80027be:	d500      	bpl.n	80027c2 <__divdi3+0x6a>
 80027c0:	e075      	b.n	80028ae <__divdi3+0x156>
 80027c2:	4651      	mov	r1, sl
 80027c4:	4658      	mov	r0, fp
 80027c6:	4081      	lsls	r1, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	4651      	mov	r1, sl
 80027cc:	4660      	mov	r0, ip
 80027ce:	4081      	lsls	r1, r0
 80027d0:	000a      	movs	r2, r1
 80027d2:	42bb      	cmp	r3, r7
 80027d4:	d861      	bhi.n	800289a <__divdi3+0x142>
 80027d6:	d05e      	beq.n	8002896 <__divdi3+0x13e>
 80027d8:	0034      	movs	r4, r6
 80027da:	003d      	movs	r5, r7
 80027dc:	4659      	mov	r1, fp
 80027de:	1aa4      	subs	r4, r4, r2
 80027e0:	419d      	sbcs	r5, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	da00      	bge.n	80027e8 <__divdi3+0x90>
 80027e6:	e07a      	b.n	80028de <__divdi3+0x186>
 80027e8:	2100      	movs	r1, #0
 80027ea:	2000      	movs	r0, #0
 80027ec:	2601      	movs	r6, #1
 80027ee:	9000      	str	r0, [sp, #0]
 80027f0:	9101      	str	r1, [sp, #4]
 80027f2:	4659      	mov	r1, fp
 80027f4:	408e      	lsls	r6, r1
 80027f6:	9601      	str	r6, [sp, #4]
 80027f8:	4661      	mov	r1, ip
 80027fa:	2601      	movs	r6, #1
 80027fc:	408e      	lsls	r6, r1
 80027fe:	4661      	mov	r1, ip
 8002800:	9600      	str	r6, [sp, #0]
 8002802:	2900      	cmp	r1, #0
 8002804:	d050      	beq.n	80028a8 <__divdi3+0x150>
 8002806:	07d9      	lsls	r1, r3, #31
 8002808:	0856      	lsrs	r6, r2, #1
 800280a:	085f      	lsrs	r7, r3, #1
 800280c:	430e      	orrs	r6, r1
 800280e:	4663      	mov	r3, ip
 8002810:	e00e      	b.n	8002830 <__divdi3+0xd8>
 8002812:	42af      	cmp	r7, r5
 8002814:	d101      	bne.n	800281a <__divdi3+0xc2>
 8002816:	42a6      	cmp	r6, r4
 8002818:	d80c      	bhi.n	8002834 <__divdi3+0xdc>
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	41bd      	sbcs	r5, r7
 800281e:	2101      	movs	r1, #1
 8002820:	1924      	adds	r4, r4, r4
 8002822:	416d      	adcs	r5, r5
 8002824:	2200      	movs	r2, #0
 8002826:	3b01      	subs	r3, #1
 8002828:	1864      	adds	r4, r4, r1
 800282a:	4155      	adcs	r5, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <__divdi3+0xe6>
 8002830:	42af      	cmp	r7, r5
 8002832:	d9ee      	bls.n	8002812 <__divdi3+0xba>
 8002834:	3b01      	subs	r3, #1
 8002836:	1924      	adds	r4, r4, r4
 8002838:	416d      	adcs	r5, r5
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f8      	bne.n	8002830 <__divdi3+0xd8>
 800283e:	9800      	ldr	r0, [sp, #0]
 8002840:	9901      	ldr	r1, [sp, #4]
 8002842:	465b      	mov	r3, fp
 8002844:	1900      	adds	r0, r0, r4
 8002846:	4169      	adcs	r1, r5
 8002848:	2b00      	cmp	r3, #0
 800284a:	db3d      	blt.n	80028c8 <__divdi3+0x170>
 800284c:	002e      	movs	r6, r5
 800284e:	40de      	lsrs	r6, r3
 8002850:	4663      	mov	r3, ip
 8002852:	002c      	movs	r4, r5
 8002854:	40dc      	lsrs	r4, r3
 8002856:	465b      	mov	r3, fp
 8002858:	2b00      	cmp	r3, #0
 800285a:	db4b      	blt.n	80028f4 <__divdi3+0x19c>
 800285c:	0034      	movs	r4, r6
 800285e:	465d      	mov	r5, fp
 8002860:	40ac      	lsls	r4, r5
 8002862:	0023      	movs	r3, r4
 8002864:	4664      	mov	r4, ip
 8002866:	40a6      	lsls	r6, r4
 8002868:	0032      	movs	r2, r6
 800286a:	1a80      	subs	r0, r0, r2
 800286c:	4199      	sbcs	r1, r3
 800286e:	e003      	b.n	8002878 <__divdi3+0x120>
 8002870:	42b2      	cmp	r2, r6
 8002872:	d996      	bls.n	80027a2 <__divdi3+0x4a>
 8002874:	2000      	movs	r0, #0
 8002876:	2100      	movs	r1, #0
 8002878:	464b      	mov	r3, r9
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <__divdi3+0x130>
 800287e:	0003      	movs	r3, r0
 8002880:	000c      	movs	r4, r1
 8002882:	2100      	movs	r1, #0
 8002884:	4258      	negs	r0, r3
 8002886:	41a1      	sbcs	r1, r4
 8002888:	b003      	add	sp, #12
 800288a:	bc3c      	pop	{r2, r3, r4, r5}
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	46a2      	mov	sl, r4
 8002892:	46ab      	mov	fp, r5
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	42b1      	cmp	r1, r6
 8002898:	d99e      	bls.n	80027d8 <__divdi3+0x80>
 800289a:	2100      	movs	r1, #0
 800289c:	2000      	movs	r0, #0
 800289e:	9000      	str	r0, [sp, #0]
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	4661      	mov	r1, ip
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1ae      	bne.n	8002806 <__divdi3+0xae>
 80028a8:	9800      	ldr	r0, [sp, #0]
 80028aa:	9901      	ldr	r1, [sp, #4]
 80028ac:	e7e4      	b.n	8002878 <__divdi3+0x120>
 80028ae:	2320      	movs	r3, #32
 80028b0:	4662      	mov	r2, ip
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	40d9      	lsrs	r1, r3
 80028b8:	4640      	mov	r0, r8
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	4661      	mov	r1, ip
 80028be:	4088      	lsls	r0, r1
 80028c0:	0003      	movs	r3, r0
 80028c2:	9900      	ldr	r1, [sp, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	e780      	b.n	80027ca <__divdi3+0x72>
 80028c8:	4662      	mov	r2, ip
 80028ca:	2320      	movs	r3, #32
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	002a      	movs	r2, r5
 80028d0:	409a      	lsls	r2, r3
 80028d2:	0026      	movs	r6, r4
 80028d4:	0013      	movs	r3, r2
 80028d6:	4662      	mov	r2, ip
 80028d8:	40d6      	lsrs	r6, r2
 80028da:	431e      	orrs	r6, r3
 80028dc:	e7b8      	b.n	8002850 <__divdi3+0xf8>
 80028de:	4661      	mov	r1, ip
 80028e0:	2620      	movs	r6, #32
 80028e2:	2701      	movs	r7, #1
 80028e4:	1a76      	subs	r6, r6, r1
 80028e6:	2000      	movs	r0, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	40f7      	lsrs	r7, r6
 80028ec:	9000      	str	r0, [sp, #0]
 80028ee:	9101      	str	r1, [sp, #4]
 80028f0:	9701      	str	r7, [sp, #4]
 80028f2:	e781      	b.n	80027f8 <__divdi3+0xa0>
 80028f4:	4667      	mov	r7, ip
 80028f6:	2320      	movs	r3, #32
 80028f8:	4662      	mov	r2, ip
 80028fa:	0035      	movs	r5, r6
 80028fc:	40bc      	lsls	r4, r7
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	40dd      	lsrs	r5, r3
 8002902:	0023      	movs	r3, r4
 8002904:	432b      	orrs	r3, r5
 8002906:	e7ad      	b.n	8002864 <__divdi3+0x10c>

08002908 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f017 fb42 	bl	8019fa0 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <MX_ADC_Init+0xc0>)
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <MX_ADC_Init+0xc4>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <MX_ADC_Init+0xc0>)
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	05d2      	lsls	r2, r2, #23
 800292e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_ADC_Init+0xc0>)
 800293e:	2201      	movs	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_ADC_Init+0xc0>)
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_ADC_Init+0xc0>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002960:	22c2      	movs	r2, #194	; 0xc2
 8002962:	32ff      	adds	r2, #255	; 0xff
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002968:	222c      	movs	r2, #44	; 0x2c
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002970:	2204      	movs	r2, #4
 8002972:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_ADC_Init+0xc0>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_ADC_Init+0xc0>)
 800298e:	0018      	movs	r0, r3
 8002990:	f001 f85e 	bl	8003a50 <HAL_ADC_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002998:	f000 fb5e 	bl	8003058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800299c:	003b      	movs	r3, r7
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <MX_ADC_Init+0xc8>)
 80029a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0152      	lsls	r2, r2, #5
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029aa:	003a      	movs	r2, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_ADC_Init+0xc0>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 f9c1 	bl	8003d38 <HAL_ADC_ConfigChannel>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80029ba:	f000 fb4d 	bl	8003058 <Error_Handler>
  }

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20000de0 	.word	0x20000de0
 80029cc:	40012400 	.word	0x40012400
 80029d0:	48040000 	.word	0x48040000

080029d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x28>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0089      	lsls	r1, r1, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012400 	.word	0x40012400
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	2424      	movs	r4, #36	; 0x24
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2314      	movs	r3, #20
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f017 fac3 	bl	8019fa0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4bbf      	ldr	r3, [pc, #764]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4bbe      	ldr	r3, [pc, #760]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a26:	4bbc      	ldr	r3, [pc, #752]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4bb9      	ldr	r3, [pc, #740]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4bb8      	ldr	r3, [pc, #736]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4bb6      	ldr	r3, [pc, #728]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4bb3      	ldr	r3, [pc, #716]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4bb2      	ldr	r3, [pc, #712]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a56:	4bb0      	ldr	r3, [pc, #704]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a62:	4bad      	ldr	r3, [pc, #692]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	4bac      	ldr	r3, [pc, #688]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6e:	4baa      	ldr	r3, [pc, #680]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a7a:	49a8      	ldr	r1, [pc, #672]	; (8002d1c <MX_GPIO_Init+0x318>)
 8002a7c:	23a0      	movs	r3, #160	; 0xa0
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	2200      	movs	r2, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 fcec 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002a88:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	21e0      	movs	r1, #224	; 0xe0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f001 fce6 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	2107      	movs	r1, #7
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 fce0 	bl	8004460 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	4aa1      	ldr	r2, [pc, #644]	; (8002d28 <MX_GPIO_Init+0x324>)
 8002aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fb4f 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	22e0      	movs	r2, #224	; 0xe0
 8002acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f001 fb3b 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	22f0      	movs	r2, #240	; 0xf0
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af8:	000c      	movs	r4, r1
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2203      	movs	r2, #3
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f001 fb29 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	4a85      	ldr	r2, [pc, #532]	; (8002d2c <MX_GPIO_Init+0x328>)
 8002b16:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	193a      	adds	r2, r7, r4
 8002b26:	23a0      	movs	r3, #160	; 0xa0
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 fb19 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2213      	movs	r2, #19
 8002b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f001 fb0a 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0192      	lsls	r2, r2, #6
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	4a74      	ldr	r2, [pc, #464]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	0010      	movs	r0, r2
 8002b70:	f001 faf8 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2207      	movs	r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	2202      	movs	r2, #2
 8002b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f001 fae6 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002baa:	193b      	adds	r3, r7, r4
 8002bac:	4a5c      	ldr	r2, [pc, #368]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f001 fad7 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2220      	movs	r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fac4 	bl	8004164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2005      	movs	r0, #5
 8002be2:	f001 fa35 	bl	8004050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f001 fa47 	bl	800407a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2007      	movs	r0, #7
 8002bf2:	f001 fa2d 	bl	8004050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002bf6:	2007      	movs	r0, #7
 8002bf8:	f001 fa3f 	bl	800407a <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <MX_GPIO_Init+0x330>)
 8002c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 faa4 	bl	8004164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2208      	movs	r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2203      	movs	r2, #3
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fa94 	bl	8004164 <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002c3c:	0021      	movs	r1, r4
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2290      	movs	r2, #144	; 0x90
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	000c      	movs	r4, r1
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	193a      	adds	r2, r7, r4
 8002c5c:	23a0      	movs	r3, #160	; 0xa0
 8002c5e:	05db      	lsls	r3, r3, #23
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f001 fa7e 	bl	8004164 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	2200      	movs	r2, #0
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fbf3 	bl	8004460 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <MX_GPIO_Init+0x334>)
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f001 fa63 	bl	8004164 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	481e      	ldr	r0, [pc, #120]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f001 fbd9 	bl	8004460 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_GPIO_Init+0x338>)
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f001 fa4c 	bl	8004164 <HAL_GPIO_Init>


  //desable for lowpower
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2110      	movs	r1, #16
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	22c0      	movs	r2, #192	; 0xc0
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	23a0      	movs	r3, #160	; 0xa0
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fa3a 	bl	8004164 <HAL_GPIO_Init>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	03c9      	lsls	r1, r1, #15
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGStopMode();
 8002cfe:	f000 fe99 	bl	8003a34 <HAL_DBGMCU_DisableDBGStopMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d08:	490d      	ldr	r1, [pc, #52]	; (8002d40 <MX_GPIO_Init+0x33c>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b00f      	add	sp, #60	; 0x3c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	00009022 	.word	0x00009022
 8002d20:	50000400 	.word	0x50000400
 8002d24:	50000800 	.word	0x50000800
 8002d28:	00009002 	.word	0x00009002
 8002d2c:	00006f11 	.word	0x00006f11
 8002d30:	10110000 	.word	0x10110000
 8002d34:	00006735 	.word	0x00006735
 8002d38:	00001004 	.word	0x00001004
 8002d3c:	50001c00 	.word	0x50001c00
 8002d40:	ffbfffff 	.word	0xffbfffff

08002d44 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d68:	2102      	movs	r1, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d80:	2104      	movs	r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	2200      	movs	r2, #0
 8002db2:	2102      	movs	r1, #2
 8002db4:	2000      	movs	r0, #0
 8002db6:	f015 fea3 	bl	8018b00 <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	0219      	lsls	r1, r3, #8
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f015 fe9a 	bl	8018b00 <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f015 fe91 	bl	8018b00 <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	2207      	movs	r2, #7
 8002de6:	2110      	movs	r1, #16
 8002de8:	2001      	movs	r0, #1
 8002dea:	f015 fe89 	bl	8018b00 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2301      	movs	r3, #1
 8002df4:	2207      	movs	r2, #7
 8002df6:	2102      	movs	r1, #2
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f015 fe81 	bl	8018b00 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	2207      	movs	r2, #7
 8002e06:	2101      	movs	r1, #1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f015 fe79 	bl	8018b00 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	0199      	lsls	r1, r3, #6
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	2207      	movs	r2, #7
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f015 fe70 	bl	8018b00 <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2005      	movs	r0, #5
 8002e26:	f001 f913 	bl	8004050 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e2a:	2005      	movs	r0, #5
 8002e2c:	f001 f925 	bl	800407a <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2007      	movs	r0, #7
 8002e36:	f001 f90b 	bl	8004050 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f001 f91d 	bl	800407a <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin = LD4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <main>:

/**
 * main loop
 */
int main(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e50:	f000 fd54 	bl	80038fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e54:	f000 f872 	bl	8002f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e58:	f7ff fdd4 	bl	8002a04 <MX_GPIO_Init>
  MX_RTC_Init();
 8002e5c:	f000 f952 	bl	8003104 <MX_RTC_Init>
  MX_SPI1_Init();
 8002e60:	f000 fa18 	bl	8003294 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8002e64:	f000 fc6a 	bl	800373c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002e68:	f000 fc38 	bl	80036dc <MX_USART1_UART_Init>

//  MX_IWDG_Init();
  MX_ADC_Init();
 8002e6c:	f7ff fd4c 	bl	8002908 <MX_ADC_Init>
//  MX_TIM21_Init();
  MX_LPTIM1_Init();
 8002e70:	f000 f834 	bl	8002edc <MX_LPTIM1_Init>

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8002e74:	f014 fc8e 	bl	8017794 <itsdk_setup>
  /* USER CODE BEGIN WHILE */
  /********desable debug module and pins (SWLCK & SWDIO)*******/



  HAL_LPTIM_Counter_Start_IT(&hlptim1, 20);
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <main+0x40>)
 8002e7a:	2114      	movs	r1, #20
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 fba9 	bl	80045d4 <HAL_LPTIM_Counter_Start_IT>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */


	 itsdk_loop();
 8002e82:	f014 fcbb 	bl	80177fc <itsdk_loop>
	  test_pulse_lp_timer();
 8002e86:	f000 f803 	bl	8002e90 <test_pulse_lp_timer>
	 itsdk_loop();
 8002e8a:	e7fa      	b.n	8002e82 <main+0x36>
 8002e8c:	20000e3c 	.word	0x20000e3c

08002e90 <test_pulse_lp_timer>:
 * TODO: When the CPU enters in stop mode, it continues instead of stopping there until the interrupt occurs
 *
 *
 */
static void test_pulse_lp_timer()
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
  uint8_t buf[32];

  // start counter
  //HAL_LPTIM_Counter_Start_IT(&hlptim1, 1);    // period of the counting up to 65535

  ticks = HAL_LPTIM_ReadCounter(&hlptim1);
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <test_pulse_lp_timer+0x24>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f001 fbef 	bl	800467c <HAL_LPTIM_ReadCounter>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <test_pulse_lp_timer+0x28>)
 8002ea4:	801a      	strh	r2, [r3, #0]
  //snprintf((char*)buf, 32, "Pulse input counter=%d\n\r", ticks);
  //log_info(buf);
  HAL_Delay(100);
 8002ea6:	2064      	movs	r0, #100	; 0x64
 8002ea8:	f000 fd86 	bl	80039b8 <HAL_Delay>


}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b008      	add	sp, #32
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000e3c 	.word	0x20000e3c
 8002eb8:	200000e4 	.word	0x200000e4

08002ebc <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  //log_info("HAL_LPTIM_AutoReloadMatchCallback");
	flow +=1;
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_LPTIM_AutoReloadMatchCallback+0x1c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_LPTIM_AutoReloadMatchCallback+0x1c>)
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	200000e8 	.word	0x200000e8

08002edc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <MX_LPTIM1_Init+0x58>)
 8002ee4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <MX_LPTIM1_Init+0x5c>)
 8002f02:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	0412      	lsls	r2, r2, #16
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <MX_LPTIM1_Init+0x54>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f001 fada 	bl	80044d4 <HAL_LPTIM_Init>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d001      	beq.n	8002f28 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8002f24:	f000 f898 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	20000e3c 	.word	0x20000e3c
 8002f34:	40007c00 	.word	0x40007c00
 8002f38:	0000ffff 	.word	0x0000ffff

08002f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b09d      	sub	sp, #116	; 0x74
 8002f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f42:	2438      	movs	r4, #56	; 0x38
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	0018      	movs	r0, r3
 8002f48:	2338      	movs	r3, #56	; 0x38
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f017 f827 	bl	8019fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f52:	2324      	movs	r3, #36	; 0x24
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	0018      	movs	r0, r3
 8002f58:	2314      	movs	r3, #20
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	f017 f81f 	bl	8019fa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f62:	003b      	movs	r3, r7
 8002f64:	0018      	movs	r0, r3
 8002f66:	2324      	movs	r3, #36	; 0x24
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f017 f818 	bl	8019fa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <SystemClock_Config+0x110>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a36      	ldr	r2, [pc, #216]	; (8003050 <SystemClock_Config+0x114>)
 8002f76:	401a      	ands	r2, r3
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <SystemClock_Config+0x110>)
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	0109      	lsls	r1, r1, #4
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f82:	f001 fc59 	bl	8004838 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <SystemClock_Config+0x118>)
 8002f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <SystemClock_Config+0x118>)
 8002f8c:	4930      	ldr	r1, [pc, #192]	; (8003050 <SystemClock_Config+0x114>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002f92:	193b      	adds	r3, r7, r4
 8002f94:	220e      	movs	r2, #14
 8002f96:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0052      	lsls	r2, r2, #1
 8002f9e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fa0:	0021      	movs	r1, r4
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	2210      	movs	r2, #16
 8002fac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0312      	lsls	r2, r2, #12
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0412      	lsls	r2, r2, #16
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 fc8e 	bl	80048f4 <HAL_RCC_OscConfig>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d001      	beq.n	8002fe0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002fdc:	f000 f83c 	bl	8003058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fe0:	2124      	movs	r1, #36	; 0x24
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2203      	movs	r2, #3
 8002fec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003000:	187b      	adds	r3, r7, r1
 8003002:	2101      	movs	r1, #1
 8003004:	0018      	movs	r0, r3
 8003006:	f002 f845 	bl	8005094 <HAL_RCC_ClockConfig>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800300e:	f000 f823 	bl	8003058 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8003012:	003b      	movs	r3, r7
 8003014:	22a3      	movs	r2, #163	; 0xa3
 8003016:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003018:	003b      	movs	r3, r7
 800301a:	2208      	movs	r2, #8
 800301c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800301e:	003b      	movs	r3, r7
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003024:	003b      	movs	r3, r7
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	0252      	lsls	r2, r2, #9
 800302a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800302c:	003b      	movs	r3, r7
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003032:	003b      	movs	r3, r7
 8003034:	0018      	movs	r0, r3
 8003036:	f002 fa11 	bl	800545c <HAL_RCCEx_PeriphCLKConfig>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d001      	beq.n	8003042 <SystemClock_Config+0x106>
  {
    Error_Handler();
 800303e:	f000 f80b 	bl	8003058 <Error_Handler>
  }



}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b01d      	add	sp, #116	; 0x74
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	40007000 	.word	0x40007000
 8003050:	ffffe7ff 	.word	0xffffe7ff
 8003054:	40021000 	.word	0x40021000

08003058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <task>:
uint8_t bistable_valve_state = 0;
void toggle_valve();
extern uint16_t ticks;
extern uint32_t flow;

void task() {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	log_info("task %d\n\r", ticks);
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <task+0x28>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	001a      	movs	r2, r3
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <task+0x2c>)
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f014 fa9a 	bl	80175ac <log_info>
	log_info("flow %d\n\r", flow);
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <task+0x30>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <task+0x34>)
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f014 fa93 	bl	80175ac <log_info>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
		}
	}*/
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200000e4 	.word	0x200000e4
 8003090:	0801aa6c 	.word	0x0801aa6c
 8003094:	200000e8 	.word	0x200000e8
 8003098:	0801aa78 	.word	0x0801aa78

0800309c <project_setup>:
}

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 80030a0:	f00d ff10 	bl	8010ec4 <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <project_setup+0x44>)
 80030a6:	0018      	movs	r0, r3
 80030a8:	f014 fa80 	bl	80175ac <log_info>
	itsdk_delayMs(2000);
 80030ac:	23fa      	movs	r3, #250	; 0xfa
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	0018      	movs	r0, r3
 80030b2:	f016 f86b 	bl	801918c <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <project_setup+0x48>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <project_setup+0x4c>)
 80030bc:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <project_setup+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	2001      	movs	r0, #1
 80030c8:	f015 ff1c 	bl	8018f04 <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 80030cc:	4a07      	ldr	r2, [pc, #28]	; (80030ec <project_setup+0x50>)
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4807      	ldr	r0, [pc, #28]	; (80030f0 <project_setup+0x54>)
 80030d4:	0019      	movs	r1, r3
 80030d6:	f014 fd7f 	bl	8017bd8 <itdt_sched_registerSched>
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	0801ab20 	.word	0x0801ab20
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000e6c 	.word	0x20000e6c
 80030ec:	08003065 	.word	0x08003065
 80030f0:	00000bb8 	.word	0x00000bb8

080030f4 <project_loop>:

/****************************************************************************************
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 ****************************************************************************************/
void project_loop() {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
    itsdk_lorawan_loop();
 80030f8:	f014 fb00 	bl	80176fc <itsdk_lorawan_loop>

}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b090      	sub	sp, #64	; 0x40
 8003108:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800310a:	232c      	movs	r3, #44	; 0x2c
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	0018      	movs	r0, r3
 8003110:	2314      	movs	r3, #20
 8003112:	001a      	movs	r2, r3
 8003114:	2100      	movs	r1, #0
 8003116:	f016 ff43 	bl	8019fa0 <memset>
  RTC_DateTypeDef sDate = {0};
 800311a:	2328      	movs	r3, #40	; 0x28
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003122:	003b      	movs	r3, r7
 8003124:	0018      	movs	r0, r3
 8003126:	2328      	movs	r3, #40	; 0x28
 8003128:	001a      	movs	r2, r3
 800312a:	2100      	movs	r1, #0
 800312c:	f016 ff38 	bl	8019fa0 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <MX_RTC_Init+0x148>)
 8003132:	4a47      	ldr	r2, [pc, #284]	; (8003250 <MX_RTC_Init+0x14c>)
 8003134:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <MX_RTC_Init+0x148>)
 8003138:	2200      	movs	r2, #0
 800313a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <MX_RTC_Init+0x148>)
 800313e:	227f      	movs	r2, #127	; 0x7f
 8003140:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <MX_RTC_Init+0x148>)
 8003144:	22ff      	movs	r2, #255	; 0xff
 8003146:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <MX_RTC_Init+0x148>)
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <MX_RTC_Init+0x148>)
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <MX_RTC_Init+0x148>)
 8003156:	2200      	movs	r2, #0
 8003158:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <MX_RTC_Init+0x148>)
 800315c:	2200      	movs	r2, #0
 800315e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003160:	4b3a      	ldr	r3, [pc, #232]	; (800324c <MX_RTC_Init+0x148>)
 8003162:	0018      	movs	r0, r3
 8003164:	f002 fad2 	bl	800570c <HAL_RTC_Init>
 8003168:	1e03      	subs	r3, r0, #0
 800316a:	d001      	beq.n	8003170 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800316c:	f7ff ff74 	bl	8003058 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2200      	movs	r2, #0
 8003182:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003190:	1879      	adds	r1, r7, r1
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <MX_RTC_Init+0x148>)
 8003194:	2200      	movs	r2, #0
 8003196:	0018      	movs	r0, r3
 8003198:	f002 fb56 	bl	8005848 <HAL_RTC_SetTime>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80031a0:	f7ff ff5a 	bl	8003058 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80031a4:	2128      	movs	r1, #40	; 0x28
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2201      	movs	r2, #1
 80031b0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2201      	movs	r2, #1
 80031b6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	2200      	movs	r2, #0
 80031bc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80031be:	1879      	adds	r1, r7, r1
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <MX_RTC_Init+0x148>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	0018      	movs	r0, r3
 80031c6:	f002 fc5f 	bl	8005a88 <HAL_RTC_SetDate>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d001      	beq.n	80031d2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80031ce:	f7ff ff43 	bl	8003058 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80031d2:	003b      	movs	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80031d8:	003b      	movs	r3, r7
 80031da:	2200      	movs	r2, #0
 80031dc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80031de:	003b      	movs	r3, r7
 80031e0:	2200      	movs	r2, #0
 80031e2:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80031e4:	003b      	movs	r3, r7
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031ea:	003b      	movs	r3, r7
 80031ec:	2200      	movs	r2, #0
 80031ee:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031f0:	003b      	movs	r3, r7
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80031f6:	003b      	movs	r3, r7
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80031fc:	003b      	movs	r3, r7
 80031fe:	22f0      	movs	r2, #240	; 0xf0
 8003200:	0512      	lsls	r2, r2, #20
 8003202:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003204:	003b      	movs	r3, r7
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800320a:	003b      	movs	r3, r7
 800320c:	2220      	movs	r2, #32
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003212:	003b      	movs	r3, r7
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	0052      	lsls	r2, r2, #1
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800321a:	0039      	movs	r1, r7
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <MX_RTC_Init+0x148>)
 800321e:	2200      	movs	r2, #0
 8003220:	0018      	movs	r0, r3
 8003222:	f002 fd2d 	bl	8005c80 <HAL_RTC_SetAlarm_IT>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d001      	beq.n	800322e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800322a:	f7ff ff15 	bl	8003058 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <MX_RTC_Init+0x148>)
 8003230:	2200      	movs	r2, #0
 8003232:	2100      	movs	r1, #0
 8003234:	0018      	movs	r0, r3
 8003236:	f002 ff5d 	bl	80060f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 800323e:	f7ff ff0b 	bl	8003058 <Error_Handler>
  }

}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b010      	add	sp, #64	; 0x40
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000ef8 	.word	0x20000ef8
 8003250:	40002800 	.word	0x40002800

08003254 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RTC_MspInit+0x38>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10e      	bne.n	8003284 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RTC_MspInit+0x3c>)
 8003268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RTC_MspInit+0x3c>)
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	02c9      	lsls	r1, r1, #11
 8003270:	430a      	orrs	r2, r1
 8003272:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2002      	movs	r0, #2
 800327a:	f000 fee9 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800327e:	2002      	movs	r0, #2
 8003280:	f000 fefb 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40002800 	.word	0x40002800
 8003290:	40021000 	.word	0x40021000

08003294 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <MX_SPI1_Init+0x68>)
 800329a:	4a19      	ldr	r2, [pc, #100]	; (8003300 <MX_SPI1_Init+0x6c>)
 800329c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <MX_SPI1_Init+0x68>)
 80032a0:	2282      	movs	r2, #130	; 0x82
 80032a2:	0052      	lsls	r2, r2, #1
 80032a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <MX_SPI1_Init+0x68>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <MX_SPI1_Init+0x68>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <MX_SPI1_Init+0x68>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <MX_SPI1_Init+0x68>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <MX_SPI1_Init+0x68>)
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <MX_SPI1_Init+0x68>)
 80032c8:	2220      	movs	r2, #32
 80032ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <MX_SPI1_Init+0x68>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <MX_SPI1_Init+0x68>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <MX_SPI1_Init+0x68>)
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <MX_SPI1_Init+0x68>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <MX_SPI1_Init+0x68>)
 80032e6:	0018      	movs	r0, r3
 80032e8:	f003 f85e 	bl	80063a8 <HAL_SPI_Init>
 80032ec:	1e03      	subs	r3, r0, #0
 80032ee:	d001      	beq.n	80032f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80032f0:	f7ff feb2 	bl	8003058 <Error_Handler>
  }

}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20000f74 	.word	0x20000f74
 8003300:	40013000 	.word	0x40013000

08003304 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	2314      	movs	r3, #20
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	0018      	movs	r0, r3
 8003312:	2314      	movs	r3, #20
 8003314:	001a      	movs	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f016 fe42 	bl	8019fa0 <memset>
  if(spiHandle->Instance==SPI1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_SPI_MspInit+0x124>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d14d      	bne.n	80033c2 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_SPI_MspInit+0x128>)
 8003328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332a:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_SPI_MspInit+0x128>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0149      	lsls	r1, r1, #5
 8003330:	430a      	orrs	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003334:	4b3d      	ldr	r3, [pc, #244]	; (800342c <HAL_SPI_MspInit+0x128>)
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_SPI_MspInit+0x128>)
 800333a:	2102      	movs	r1, #2
 800333c:	430a      	orrs	r2, r1
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003340:	4b3a      	ldr	r3, [pc, #232]	; (800342c <HAL_SPI_MspInit+0x128>)
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2202      	movs	r2, #2
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_SPI_MspInit+0x128>)
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_SPI_MspInit+0x128>)
 8003352:	2101      	movs	r1, #1
 8003354:	430a      	orrs	r2, r1
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
 8003358:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_SPI_MspInit+0x128>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8003364:	2114      	movs	r1, #20
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2208      	movs	r2, #8
 800336a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2202      	movs	r2, #2
 8003370:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2203      	movs	r2, #3
 800337c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2200      	movs	r2, #0
 8003382:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8003384:	000c      	movs	r4, r1
 8003386:	187b      	adds	r3, r7, r1
 8003388:	4a29      	ldr	r2, [pc, #164]	; (8003430 <HAL_SPI_MspInit+0x12c>)
 800338a:	0019      	movs	r1, r3
 800338c:	0010      	movs	r0, r2
 800338e:	f000 fee9 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8003392:	0021      	movs	r1, r4
 8003394:	187b      	adds	r3, r7, r1
 8003396:	22c0      	movs	r2, #192	; 0xc0
 8003398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	187b      	adds	r3, r7, r1
 800339c:	2202      	movs	r2, #2
 800339e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2203      	movs	r2, #3
 80033aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	187a      	adds	r2, r7, r1
 80033b4:	23a0      	movs	r3, #160	; 0xa0
 80033b6:	05db      	lsls	r3, r3, #23
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fed2 	bl	8004164 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80033c0:	e02e      	b.n	8003420 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <HAL_SPI_MspInit+0x130>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d129      	bne.n	8003420 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_SPI_MspInit+0x128>)
 80033ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <HAL_SPI_MspInit+0x128>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	01c9      	lsls	r1, r1, #7
 80033d6:	430a      	orrs	r2, r1
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <HAL_SPI_MspInit+0x128>)
 80033dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_SPI_MspInit+0x128>)
 80033e0:	2102      	movs	r1, #2
 80033e2:	430a      	orrs	r2, r1
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_SPI_MspInit+0x128>)
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	2202      	movs	r2, #2
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80033f2:	2114      	movs	r1, #20
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	22f0      	movs	r2, #240	; 0xf0
 80033f8:	0212      	lsls	r2, r2, #8
 80033fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2202      	movs	r2, #2
 8003400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2203      	movs	r2, #3
 800340c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	187b      	adds	r3, r7, r1
 8003416:	4a06      	ldr	r2, [pc, #24]	; (8003430 <HAL_SPI_MspInit+0x12c>)
 8003418:	0019      	movs	r1, r3
 800341a:	0010      	movs	r0, r2
 800341c:	f000 fea2 	bl	8004164 <HAL_GPIO_Init>
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b00b      	add	sp, #44	; 0x2c
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	40013000 	.word	0x40013000
 800342c:	40021000 	.word	0x40021000
 8003430:	50000400 	.word	0x50000400
 8003434:	40003800 	.word	0x40003800

08003438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_MspInit+0x24>)
 800343e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_MspInit+0x24>)
 8003442:	2101      	movs	r1, #1
 8003444:	430a      	orrs	r2, r1
 8003446:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <HAL_MspInit+0x24>)
 800344a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_MspInit+0x24>)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0549      	lsls	r1, r1, #21
 8003452:	430a      	orrs	r2, r1
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000

08003460 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	230c      	movs	r3, #12
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	0018      	movs	r0, r3
 800346e:	2314      	movs	r3, #20
 8003470:	001a      	movs	r2, r3
 8003472:	2100      	movs	r1, #0
 8003474:	f016 fd94 	bl	8019fa0 <memset>
  if(hlptim->Instance==LPTIM1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_LPTIM_MspInit+0x8c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d130      	bne.n	80034e4 <HAL_LPTIM_MspInit+0x84>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_LPTIM_MspInit+0x90>)
 8003484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <HAL_LPTIM_MspInit+0x90>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0609      	lsls	r1, r1, #24
 800348c:	430a      	orrs	r2, r1
 800348e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <HAL_LPTIM_MspInit+0x90>)
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_LPTIM_MspInit+0x90>)
 8003496:	2102      	movs	r1, #2
 8003498:	430a      	orrs	r2, r1
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <HAL_LPTIM_MspInit+0x90>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	2202      	movs	r2, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034a8:	210c      	movs	r1, #12
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2220      	movs	r2, #32
 80034ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2202      	movs	r2, #2
 80034b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2202      	movs	r2, #2
 80034c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <HAL_LPTIM_MspInit+0x94>)
 80034cc:	0019      	movs	r1, r3
 80034ce:	0010      	movs	r0, r2
 80034d0:	f000 fe48 	bl	8004164 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	200d      	movs	r0, #13
 80034da:	f000 fdb9 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80034de:	200d      	movs	r0, #13
 80034e0:	f000 fdcb 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b008      	add	sp, #32
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40007c00 	.word	0x40007c00
 80034f0:	40021000 	.word	0x40021000
 80034f4:	50000400 	.word	0x50000400

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <HardFault_Handler+0x4>

08003508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003520:	f016 fc36 	bl	8019d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <RTC_IRQHandler+0x1c>)
 8003532:	0018      	movs	r0, r3
 8003534:	f002 fcf0 	bl	8005f18 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <RTC_IRQHandler+0x1c>)
 800353a:	0018      	movs	r0, r3
 800353c:	f002 ff02 	bl	8006344 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	20000ef8 	.word	0x20000ef8

0800354c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003550:	2001      	movs	r0, #1
 8003552:	f000 ffa3 	bl	800449c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003556:	2002      	movs	r0, #2
 8003558:	f000 ffa0 	bl	800449c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003566:	2010      	movs	r0, #16
 8003568:	f000 ff98 	bl	800449c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	0018      	movs	r0, r3
 8003572:	f000 ff93 	bl	800449c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <USART1_IRQHandler+0x14>)
 8003582:	0018      	movs	r0, r3
 8003584:	f003 fae0 	bl	8006b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	20000e78 	.word	0x20000e78

08003594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <USART2_IRQHandler+0x14>)
 800359a:	0018      	movs	r0, r3
 800359c:	f003 fad4 	bl	8006b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20001008 	.word	0x20001008

080035ac <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <LPTIM1_IRQHandler+0x14>)
 80035b2:	0018      	movs	r0, r3
 80035b4:	f001 f86d 	bl	8004692 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000e3c 	.word	0x20000e3c

080035c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <_sbrk+0x5c>)
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <_sbrk+0x60>)
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <_sbrk+0x64>)
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <_sbrk+0x68>)
 80035e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <_sbrk+0x64>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	18d3      	adds	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d207      	bcs.n	8003604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f4:	f016 fc8e 	bl	8019f14 <__errno>
 80035f8:	0003      	movs	r3, r0
 80035fa:	220c      	movs	r2, #12
 80035fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035fe:	2301      	movs	r3, #1
 8003600:	425b      	negs	r3, r3
 8003602:	e009      	b.n	8003618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <_sbrk+0x64>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	18d2      	adds	r2, r2, r3
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <_sbrk+0x64>)
 8003614:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b006      	add	sp, #24
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20005000 	.word	0x20005000
 8003624:	00000400 	.word	0x00000400
 8003628:	200000ec 	.word	0x200000ec
 800362c:	20001298 	.word	0x20001298

08003630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <SystemInit+0x64>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <SystemInit+0x64>)
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	0049      	lsls	r1, r1, #1
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <SystemInit+0x64>)
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <SystemInit+0x64>)
 8003648:	4913      	ldr	r1, [pc, #76]	; (8003698 <SystemInit+0x68>)
 800364a:	400a      	ands	r2, r1
 800364c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <SystemInit+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <SystemInit+0x64>)
 8003654:	4911      	ldr	r1, [pc, #68]	; (800369c <SystemInit+0x6c>)
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <SystemInit+0x64>)
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <SystemInit+0x64>)
 8003660:	2101      	movs	r1, #1
 8003662:	438a      	bics	r2, r1
 8003664:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <SystemInit+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <SystemInit+0x64>)
 800366c:	490c      	ldr	r1, [pc, #48]	; (80036a0 <SystemInit+0x70>)
 800366e:	400a      	ands	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <SystemInit+0x64>)
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <SystemInit+0x64>)
 8003678:	490a      	ldr	r1, [pc, #40]	; (80036a4 <SystemInit+0x74>)
 800367a:	400a      	ands	r2, r1
 800367c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <SystemInit+0x64>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <SystemInit+0x78>)
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	0512      	lsls	r2, r2, #20
 800368a:	609a      	str	r2, [r3, #8]
#endif
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	40021000 	.word	0x40021000
 8003698:	88ff400c 	.word	0x88ff400c
 800369c:	fef6fff6 	.word	0xfef6fff6
 80036a0:	fffbffff 	.word	0xfffbffff
 80036a4:	ff02ffff 	.word	0xff02ffff
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <HAL_TIM_Base_MspInit+0x28>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d105      	bne.n	80036ca <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_TIM_Base_MspInit+0x2c>)
 80036c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_TIM_Base_MspInit+0x2c>)
 80036c4:	2104      	movs	r1, #4
 80036c6:	430a      	orrs	r2, r1
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b002      	add	sp, #8
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	40010800 	.word	0x40010800
 80036d8:	40021000 	.word	0x40021000

080036dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <MX_USART1_UART_Init+0x58>)
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <MX_USART1_UART_Init+0x5c>)
 80036e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <MX_USART1_UART_Init+0x58>)
 80036e8:	2296      	movs	r2, #150	; 0x96
 80036ea:	0192      	lsls	r2, r2, #6
 80036ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <MX_USART1_UART_Init+0x58>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_USART1_UART_Init+0x58>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <MX_USART1_UART_Init+0x58>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <MX_USART1_UART_Init+0x58>)
 8003702:	220c      	movs	r2, #12
 8003704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <MX_USART1_UART_Init+0x58>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <MX_USART1_UART_Init+0x58>)
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <MX_USART1_UART_Init+0x58>)
 8003714:	2200      	movs	r2, #0
 8003716:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <MX_USART1_UART_Init+0x58>)
 800371a:	2200      	movs	r2, #0
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <MX_USART1_UART_Init+0x58>)
 8003720:	0018      	movs	r0, r3
 8003722:	f003 f915 	bl	8006950 <HAL_UART_Init>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800372a:	f7ff fc95 	bl	8003058 <Error_Handler>
  }

}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000e78 	.word	0x20000e78
 8003738:	40013800 	.word	0x40013800

0800373c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <MX_USART2_UART_Init+0x5c>)
 8003744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003748:	2296      	movs	r2, #150	; 0x96
 800374a:	0192      	lsls	r2, r2, #6
 800374c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <MX_USART2_UART_Init+0x58>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003762:	220c      	movs	r2, #12
 8003764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_USART2_UART_Init+0x58>)
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_USART2_UART_Init+0x58>)
 800377a:	2200      	movs	r2, #0
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <MX_USART2_UART_Init+0x58>)
 8003780:	0018      	movs	r0, r3
 8003782:	f003 f8e5 	bl	8006950 <HAL_UART_Init>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800378a:	f7ff fc65 	bl	8003058 <Error_Handler>
  }

}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20001008 	.word	0x20001008
 8003798:	40004400 	.word	0x40004400

0800379c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	2314      	movs	r3, #20
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	0018      	movs	r0, r3
 80037aa:	2314      	movs	r3, #20
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f016 fbf6 	bl	8019fa0 <memset>
  if(uartHandle->Instance==USART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a38      	ldr	r2, [pc, #224]	; (800389c <HAL_UART_MspInit+0x100>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d133      	bne.n	8003826 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <HAL_UART_MspInit+0x104>)
 80037c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_UART_MspInit+0x104>)
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	01c9      	lsls	r1, r1, #7
 80037c8:	430a      	orrs	r2, r1
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_UART_MspInit+0x104>)
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_UART_MspInit+0x104>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	430a      	orrs	r2, r1
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_UART_MspInit+0x104>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80037e4:	2114      	movs	r1, #20
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	22c0      	movs	r2, #192	; 0xc0
 80037ea:	00d2      	lsls	r2, r2, #3
 80037ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	2202      	movs	r2, #2
 80037f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2203      	movs	r2, #3
 80037fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2204      	movs	r2, #4
 8003804:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	187a      	adds	r2, r7, r1
 8003808:	23a0      	movs	r3, #160	; 0xa0
 800380a:	05db      	lsls	r3, r3, #23
 800380c:	0011      	movs	r1, r2
 800380e:	0018      	movs	r0, r3
 8003810:	f000 fca8 	bl	8004164 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2100      	movs	r1, #0
 8003818:	201b      	movs	r0, #27
 800381a:	f000 fc19 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800381e:	201b      	movs	r0, #27
 8003820:	f000 fc2b 	bl	800407a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003824:	e036      	b.n	8003894 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_UART_MspInit+0x108>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d131      	bne.n	8003894 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_UART_MspInit+0x104>)
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_UART_MspInit+0x104>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0289      	lsls	r1, r1, #10
 800383a:	430a      	orrs	r2, r1
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_UART_MspInit+0x104>)
 8003840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_UART_MspInit+0x104>)
 8003844:	2101      	movs	r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_UART_MspInit+0x104>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	2201      	movs	r2, #1
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003856:	2114      	movs	r1, #20
 8003858:	187b      	adds	r3, r7, r1
 800385a:	220c      	movs	r2, #12
 800385c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2202      	movs	r2, #2
 8003862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_NOPULL
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2201      	movs	r2, #1
 8003868:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2203      	movs	r2, #3
 800386e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003870:	187b      	adds	r3, r7, r1
 8003872:	2204      	movs	r2, #4
 8003874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	187a      	adds	r2, r7, r1
 8003878:	23a0      	movs	r3, #160	; 0xa0
 800387a:	05db      	lsls	r3, r3, #23
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f000 fc70 	bl	8004164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	201c      	movs	r0, #28
 800388a:	f000 fbe1 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800388e:	201c      	movs	r0, #28
 8003890:	f000 fbf3 	bl	800407a <HAL_NVIC_EnableIRQ>
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b00a      	add	sp, #40	; 0x28
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40013800 	.word	0x40013800
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40004400 	.word	0x40004400

080038a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80038a8:	480d      	ldr	r0, [pc, #52]	; (80038e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80038aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80038ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038ae:	e003      	b.n	80038b8 <LoopCopyDataInit>

080038b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80038b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038b6:	3104      	adds	r1, #4

080038b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80038b8:	480b      	ldr	r0, [pc, #44]	; (80038e8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <LoopForever+0xe>)
  adds  r2, r0, r1
 80038bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038c0:	d3f6      	bcc.n	80038b0 <CopyDataInit>
  ldr  r2, =_sbss
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80038c4:	e002      	b.n	80038cc <LoopFillZerobss>

080038c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80038c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80038c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ca:	3204      	adds	r2, #4

080038cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <LoopForever+0x16>)
  cmp  r2, r3
 80038ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038d0:	d3f9      	bcc.n	80038c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80038d2:	f7ff fead 	bl	8003630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038d6:	f016 fb23 	bl	8019f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038da:	f7ff fab7 	bl	8002e4c <main>

080038de <LoopForever>:

LoopForever:
    b LoopForever
 80038de:	e7fe      	b.n	80038de <LoopForever>
   ldr   r0, =_estack
 80038e0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80038e4:	0801c5e8 	.word	0x0801c5e8
  ldr  r0, =_sdata
 80038e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038ec:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 80038f0:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 80038f4:	20001294 	.word	0x20001294

080038f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f8:	e7fe      	b.n	80038f8 <ADC1_COMP_IRQHandler>
	...

080038fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_Init+0x3c>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_Init+0x3c>)
 800390e:	2140      	movs	r1, #64	; 0x40
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003914:	2000      	movs	r0, #0
 8003916:	f000 f811 	bl	800393c <HAL_InitTick>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d003      	beq.n	8003926 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e001      	b.n	800392a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003926:	f7ff fd87 	bl	8003438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800392a:	1dfb      	adds	r3, r7, #7
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	40022000 	.word	0x40022000

0800393c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <HAL_InitTick+0x5c>)
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_InitTick+0x60>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	0019      	movs	r1, r3
 800394e:	23fa      	movs	r3, #250	; 0xfa
 8003950:	0098      	lsls	r0, r3, #2
 8003952:	f7fc fbe1 	bl	8000118 <__udivsi3>
 8003956:	0003      	movs	r3, r0
 8003958:	0019      	movs	r1, r3
 800395a:	0020      	movs	r0, r4
 800395c:	f7fc fbdc 	bl	8000118 <__udivsi3>
 8003960:	0003      	movs	r3, r0
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fba9 	bl	80040ba <HAL_SYSTICK_Config>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d001      	beq.n	8003970 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e00f      	b.n	8003990 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d80b      	bhi.n	800398e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	2301      	movs	r3, #1
 800397a:	425b      	negs	r3, r3
 800397c:	2200      	movs	r2, #0
 800397e:	0018      	movs	r0, r3
 8003980:	f000 fb66 	bl	8004050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_InitTick+0x64>)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b003      	add	sp, #12
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	20000004 	.word	0x20000004
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	20000008 	.word	0x20000008

080039a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  return uwTick;
 80039a8:	4b02      	ldr	r3, [pc, #8]	; (80039b4 <HAL_GetTick+0x10>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	20001088 	.word	0x20001088

080039b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff fff0 	bl	80039a4 <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	d005      	beq.n	80039de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_Delay+0x40>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	001a      	movs	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	f7ff ffe0 	bl	80039a4 <HAL_GetTick>
 80039e4:	0002      	movs	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d8f7      	bhi.n	80039e0 <HAL_Delay+0x28>
  {
  }
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2000000c 	.word	0x2000000c

080039fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_SuspendTick+0x18>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_SuspendTick+0x18>)
 8003a06:	2102      	movs	r1, #2
 8003a08:	438a      	bics	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_ResumeTick+0x18>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_ResumeTick+0x18>)
 8003a22:	2102      	movs	r1, #2
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	e000e010 	.word	0xe000e010

08003a34 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003a3e:	2102      	movs	r1, #2
 8003a40:	438a      	bics	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	40015800 	.word	0x40015800

08003a50 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e159      	b.n	8003d16 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2250      	movs	r2, #80	; 0x50
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fe ffaa 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	2210      	movs	r2, #16
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d005      	beq.n	8003a98 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003a96:	d00b      	beq.n	8003ab0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2250      	movs	r2, #80	; 0x50
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e132      	b.n	8003d16 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	4a9a      	ldr	r2, [pc, #616]	; (8003d20 <HAL_ADC_Init+0x2d0>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2202      	movs	r2, #2
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_ADC_Init+0x90>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_Init+0x90>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_ADC_Init+0x92>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d149      	bne.n	8003b7a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	23c0      	movs	r3, #192	; 0xc0
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d00b      	beq.n	8003b0a <HAL_ADC_Init+0xba>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	05db      	lsls	r3, r3, #23
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d005      	beq.n	8003b0a <HAL_ADC_Init+0xba>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d111      	bne.n	8003b2e <HAL_ADC_Init+0xde>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	0892      	lsrs	r2, r2, #2
 8003b18:	611a      	str	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6919      	ldr	r1, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]
 8003b2c:	e014      	b.n	8003b58 <HAL_ADC_Init+0x108>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	0092      	lsls	r2, r2, #2
 8003b3a:	0892      	lsrs	r2, r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
 8003b3e:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b44:	4978      	ldr	r1, [pc, #480]	; (8003d28 <HAL_ADC_Init+0x2d8>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4b74      	ldr	r3, [pc, #464]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2118      	movs	r1, #24
 8003b64:	438a      	bics	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68d9      	ldr	r1, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b80:	496a      	ldr	r1, [pc, #424]	; (8003d2c <HAL_ADC_Init+0x2dc>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003b86:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	065a      	lsls	r2, r3, #25
 8003b90:	4b64      	ldr	r3, [pc, #400]	; (8003d24 <HAL_ADC_Init+0x2d4>)
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	055b      	lsls	r3, r3, #21
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	0549      	lsls	r1, r1, #21
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	495b      	ldr	r1, [pc, #364]	; (8003d30 <HAL_ADC_Init+0x2e0>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68d9      	ldr	r1, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_Init+0x18c>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	e000      	b.n	8003bde <HAL_ADC_Init+0x18e>
 8003bdc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003bde:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2020      	movs	r0, #32
 8003be4:	5c1b      	ldrb	r3, [r3, r0]
 8003be6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003be8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	202c      	movs	r0, #44	; 0x2c
 8003bee:	5c1b      	ldrb	r3, [r3, r0]
 8003bf0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003bf2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003bf8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003c00:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003c08:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c16:	23c2      	movs	r3, #194	; 0xc2
 8003c18:	33ff      	adds	r3, #255	; 0xff
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d00b      	beq.n	8003c36 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68d9      	ldr	r1, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	5c9b      	ldrb	r3, [r3, r2]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d11a      	bne.n	8003c76 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	5c9b      	ldrb	r3, [r3, r2]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	0249      	lsls	r1, r1, #9
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	e00b      	b.n	8003c76 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	2220      	movs	r2, #32
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	2201      	movs	r2, #1
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d11f      	bne.n	8003cbe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	492a      	ldr	r1, [pc, #168]	; (8003d34 <HAL_ADC_Init+0x2e4>)
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6919      	ldr	r1, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003c9c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003ca2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	611a      	str	r2, [r3, #16]
 8003cbc:	e00e      	b.n	8003cdc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	438a      	bics	r2, r1
 8003cda:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2107      	movs	r1, #7
 8003ce8:	438a      	bics	r2, r1
 8003cea:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6959      	ldr	r1, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	2203      	movs	r2, #3
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	fffffefd 	.word	0xfffffefd
 8003d24:	40012708 	.word	0x40012708
 8003d28:	ffc3ffff 	.word	0xffc3ffff
 8003d2c:	fdffffff 	.word	0xfdffffff
 8003d30:	fffe0219 	.word	0xfffe0219
 8003d34:	fffffc03 	.word	0xfffffc03

08003d38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2250      	movs	r2, #80	; 0x50
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e06c      	b.n	8003e2a <HAL_ADC_ConfigChannel+0xf2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2250      	movs	r2, #80	; 0x50
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	2220      	movs	r2, #32
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2250      	movs	r2, #80	; 0x50
 8003d74:	2100      	movs	r1, #0
 8003d76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e056      	b.n	8003e2a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <HAL_ADC_ConfigChannel+0xfc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d028      	beq.n	8003dd8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	035b      	lsls	r3, r3, #13
 8003d92:	0b5a      	lsrs	r2, r3, #13
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	02db      	lsls	r3, r3, #11
 8003da4:	4013      	ands	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003da8:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	0409      	lsls	r1, r1, #16
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003db6:	200a      	movs	r0, #10
 8003db8:	f000 f844 	bl	8003e44 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	029b      	lsls	r3, r3, #10
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d02b      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	03c9      	lsls	r1, r1, #15
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e023      	b.n	8003e20 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	035b      	lsls	r3, r3, #13
 8003de4:	0b5b      	lsrs	r3, r3, #13
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	02db      	lsls	r3, r3, #11
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d005      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003e02:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_ADC_ConfigChannel+0x104>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	029b      	lsls	r3, r3, #10
 8003e10:	4013      	ands	r3, r2
 8003e12:	d005      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_ADC_ConfigChannel+0x100>)
 8003e1a:	4909      	ldr	r1, [pc, #36]	; (8003e40 <HAL_ADC_ConfigChannel+0x108>)
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2250      	movs	r2, #80	; 0x50
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b002      	add	sp, #8
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	00001001 	.word	0x00001001
 8003e38:	40012708 	.word	0x40012708
 8003e3c:	ff7fffff 	.word	0xff7fffff
 8003e40:	ffbfffff 	.word	0xffbfffff

08003e44 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <ADC_DelayMicroSecond+0x34>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	490a      	ldr	r1, [pc, #40]	; (8003e7c <ADC_DelayMicroSecond+0x38>)
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7fc f960 	bl	8000118 <__udivsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4353      	muls	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003e62:	e002      	b.n	8003e6a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f9      	bne.n	8003e64 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	000f4240 	.word	0x000f4240

08003e80 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_ADCEx_EnableVREFINT+0x4c>)
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <HAL_ADCEx_EnableVREFINT+0x4c>)
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	0049      	lsls	r1, r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e98:	f7ff fd84 	bl	80039a4 <HAL_GetTick>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8003ea0:	e008      	b.n	8003eb4 <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8003ea2:	f7ff fd7f 	bl	80039a4 <HAL_GetTick>
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d901      	bls.n	8003eb4 <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e006      	b.n	8003ec2 <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_ADCEx_EnableVREFINT+0x4c>)
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	05db      	lsls	r3, r3, #23
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	40010000 	.word	0x40010000

08003ed0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003edc:	1dfb      	adds	r3, r7, #7
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	231f      	movs	r3, #31
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <NVIC_EnableIRQ+0x28>)
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4091      	lsls	r1, r2
 8003eec:	000a      	movs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	0002      	movs	r2, r0
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	231f      	movs	r3, #31
 8003f10:	4013      	ands	r3, r2
 8003f12:	4905      	ldr	r1, [pc, #20]	; (8003f28 <NVIC_DisableIRQ+0x2c>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	0013      	movs	r3, r2
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	508b      	str	r3, [r1, r2]
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b002      	add	sp, #8
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	0002      	movs	r2, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	1dfb      	adds	r3, r7, #7
 8003f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f40:	d932      	bls.n	8003fa8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <NVIC_SetPriority+0xd4>)
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	0019      	movs	r1, r3
 8003f4a:	230f      	movs	r3, #15
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	3b08      	subs	r3, #8
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3306      	adds	r3, #6
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	18d3      	adds	r3, r2, r3
 8003f58:	3304      	adds	r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1dfa      	adds	r2, r7, #7
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	0011      	movs	r1, r2
 8003f62:	2203      	movs	r2, #3
 8003f64:	400a      	ands	r2, r1
 8003f66:	00d2      	lsls	r2, r2, #3
 8003f68:	21ff      	movs	r1, #255	; 0xff
 8003f6a:	4091      	lsls	r1, r2
 8003f6c:	000a      	movs	r2, r1
 8003f6e:	43d2      	mvns	r2, r2
 8003f70:	401a      	ands	r2, r3
 8003f72:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	019b      	lsls	r3, r3, #6
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	1dfb      	adds	r3, r7, #7
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	0018      	movs	r0, r3
 8003f82:	2303      	movs	r3, #3
 8003f84:	4003      	ands	r3, r0
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8a:	481d      	ldr	r0, [pc, #116]	; (8004000 <NVIC_SetPriority+0xd4>)
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	001c      	movs	r4, r3
 8003f92:	230f      	movs	r3, #15
 8003f94:	4023      	ands	r3, r4
 8003f96:	3b08      	subs	r3, #8
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	3306      	adds	r3, #6
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	18c3      	adds	r3, r0, r3
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fa6:	e027      	b.n	8003ff8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fa8:	4a16      	ldr	r2, [pc, #88]	; (8004004 <NVIC_SetPriority+0xd8>)
 8003faa:	1dfb      	adds	r3, r7, #7
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	b25b      	sxtb	r3, r3
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	33c0      	adds	r3, #192	; 0xc0
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	589b      	ldr	r3, [r3, r2]
 8003fb8:	1dfa      	adds	r2, r7, #7
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	00d2      	lsls	r2, r2, #3
 8003fc4:	21ff      	movs	r1, #255	; 0xff
 8003fc6:	4091      	lsls	r1, r2
 8003fc8:	000a      	movs	r2, r1
 8003fca:	43d2      	mvns	r2, r2
 8003fcc:	401a      	ands	r2, r3
 8003fce:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	019b      	lsls	r3, r3, #6
 8003fd4:	22ff      	movs	r2, #255	; 0xff
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	1dfb      	adds	r3, r7, #7
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	2303      	movs	r3, #3
 8003fe0:	4003      	ands	r3, r0
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe6:	4807      	ldr	r0, [pc, #28]	; (8004004 <NVIC_SetPriority+0xd8>)
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	33c0      	adds	r3, #192	; 0xc0
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	501a      	str	r2, [r3, r0]
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b003      	add	sp, #12
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	e000ed00 	.word	0xe000ed00
 8004004:	e000e100 	.word	0xe000e100

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <SysTick_Config+0x40>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e010      	b.n	8004040 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <SysTick_Config+0x44>)
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	3a01      	subs	r2, #1
 8004024:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	2301      	movs	r3, #1
 8004028:	425b      	negs	r3, r3
 800402a:	2103      	movs	r1, #3
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff ff7d 	bl	8003f2c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <SysTick_Config+0x44>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <SysTick_Config+0x44>)
 800403a:	2207      	movs	r2, #7
 800403c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403e:	2300      	movs	r3, #0
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}
 8004048:	00ffffff 	.word	0x00ffffff
 800404c:	e000e010 	.word	0xe000e010

08004050 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	210f      	movs	r1, #15
 800405c:	187b      	adds	r3, r7, r1
 800405e:	1c02      	adds	r2, r0, #0
 8004060:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	187b      	adds	r3, r7, r1
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b25b      	sxtb	r3, r3
 800406a:	0011      	movs	r1, r2
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff ff5d 	bl	8003f2c <NVIC_SetPriority>
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	0002      	movs	r2, r0
 8004082:	1dfb      	adds	r3, r7, #7
 8004084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b25b      	sxtb	r3, r3
 800408c:	0018      	movs	r0, r3
 800408e:	f7ff ff1f 	bl	8003ed0 <NVIC_EnableIRQ>
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	0002      	movs	r2, r0
 80040a2:	1dfb      	adds	r3, r7, #7
 80040a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	b25b      	sxtb	r3, r3
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff ff25 	bl	8003efc <NVIC_DisableIRQ>
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff ff9f 	bl	8004008 <SysTick_Config>
 80040ca:	0003      	movs	r3, r0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	230f      	movs	r3, #15
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2225      	movs	r2, #37	; 0x25
 80040e8:	5c9b      	ldrb	r3, [r3, r2]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d007      	beq.n	8004100 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2204      	movs	r2, #4
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040f6:	230f      	movs	r3, #15
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e02a      	b.n	8004156 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	210e      	movs	r1, #14
 800410c:	438a      	bics	r2, r1
 800410e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2101      	movs	r1, #1
 800411c:	438a      	bics	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	221c      	movs	r2, #28
 8004126:	401a      	ands	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2101      	movs	r1, #1
 800412e:	4091      	lsls	r1, r2
 8004130:	000a      	movs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2225      	movs	r2, #37	; 0x25
 8004138:	2101      	movs	r1, #1
 800413a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	2100      	movs	r1, #0
 8004142:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	0010      	movs	r0, r2
 8004154:	4798      	blx	r3
    }
  }
  return status;
 8004156:	230f      	movs	r3, #15
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	781b      	ldrb	r3, [r3, #0]
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b004      	add	sp, #16
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800417a:	e155      	b.n	8004428 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2101      	movs	r1, #1
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4091      	lsls	r1, r2
 8004186:	000a      	movs	r2, r1
 8004188:	4013      	ands	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d100      	bne.n	8004194 <HAL_GPIO_Init+0x30>
 8004192:	e146      	b.n	8004422 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d00b      	beq.n	80041b4 <HAL_GPIO_Init+0x50>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d007      	beq.n	80041b4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041a8:	2b11      	cmp	r3, #17
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b12      	cmp	r3, #18
 80041b2:	d130      	bne.n	8004216 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	2203      	movs	r2, #3
 80041c0:	409a      	lsls	r2, r3
 80041c2:	0013      	movs	r3, r2
 80041c4:	43da      	mvns	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	409a      	lsls	r2, r3
 80041d6:	0013      	movs	r3, r2
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ea:	2201      	movs	r2, #1
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	43da      	mvns	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	2201      	movs	r2, #1
 8004202:	401a      	ands	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0xf2>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b12      	cmp	r3, #18
 8004254:	d123      	bne.n	800429e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	0092      	lsls	r2, r2, #2
 8004260:	58d3      	ldr	r3, [r2, r3]
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2207      	movs	r2, #7
 8004268:	4013      	ands	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	220f      	movs	r2, #15
 800426e:	409a      	lsls	r2, r3
 8004270:	0013      	movs	r3, r2
 8004272:	43da      	mvns	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2107      	movs	r1, #7
 8004282:	400b      	ands	r3, r1
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	409a      	lsls	r2, r3
 8004288:	0013      	movs	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	08da      	lsrs	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3208      	adds	r2, #8
 8004298:	0092      	lsls	r2, r2, #2
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	2203      	movs	r2, #3
 80042aa:	409a      	lsls	r2, r3
 80042ac:	0013      	movs	r3, r2
 80042ae:	43da      	mvns	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2203      	movs	r2, #3
 80042bc:	401a      	ands	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	409a      	lsls	r2, r3
 80042c4:	0013      	movs	r3, r2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	055b      	lsls	r3, r3, #21
 80042da:	4013      	ands	r3, r2
 80042dc:	d100      	bne.n	80042e0 <HAL_GPIO_Init+0x17c>
 80042de:	e0a0      	b.n	8004422 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e0:	4b57      	ldr	r3, [pc, #348]	; (8004440 <HAL_GPIO_Init+0x2dc>)
 80042e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e4:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_GPIO_Init+0x2dc>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	430a      	orrs	r2, r1
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ec:	4a55      	ldr	r2, [pc, #340]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	3302      	adds	r3, #2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	589b      	ldr	r3, [r3, r2]
 80042f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2203      	movs	r2, #3
 80042fe:	4013      	ands	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	220f      	movs	r2, #15
 8004304:	409a      	lsls	r2, r3
 8004306:	0013      	movs	r3, r2
 8004308:	43da      	mvns	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	23a0      	movs	r3, #160	; 0xa0
 8004314:	05db      	lsls	r3, r3, #23
 8004316:	429a      	cmp	r2, r3
 8004318:	d01f      	beq.n	800435a <HAL_GPIO_Init+0x1f6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a4a      	ldr	r2, [pc, #296]	; (8004448 <HAL_GPIO_Init+0x2e4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d019      	beq.n	8004356 <HAL_GPIO_Init+0x1f2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a49      	ldr	r2, [pc, #292]	; (800444c <HAL_GPIO_Init+0x2e8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_GPIO_Init+0x1ee>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a48      	ldr	r2, [pc, #288]	; (8004450 <HAL_GPIO_Init+0x2ec>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00d      	beq.n	800434e <HAL_GPIO_Init+0x1ea>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a47      	ldr	r2, [pc, #284]	; (8004454 <HAL_GPIO_Init+0x2f0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_GPIO_Init+0x1e6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a46      	ldr	r2, [pc, #280]	; (8004458 <HAL_GPIO_Init+0x2f4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_GPIO_Init+0x1e2>
 8004342:	2305      	movs	r3, #5
 8004344:	e00a      	b.n	800435c <HAL_GPIO_Init+0x1f8>
 8004346:	2306      	movs	r3, #6
 8004348:	e008      	b.n	800435c <HAL_GPIO_Init+0x1f8>
 800434a:	2304      	movs	r3, #4
 800434c:	e006      	b.n	800435c <HAL_GPIO_Init+0x1f8>
 800434e:	2303      	movs	r3, #3
 8004350:	e004      	b.n	800435c <HAL_GPIO_Init+0x1f8>
 8004352:	2302      	movs	r3, #2
 8004354:	e002      	b.n	800435c <HAL_GPIO_Init+0x1f8>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_GPIO_Init+0x1f8>
 800435a:	2300      	movs	r3, #0
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	2103      	movs	r1, #3
 8004360:	400a      	ands	r2, r1
 8004362:	0092      	lsls	r2, r2, #2
 8004364:	4093      	lsls	r3, r2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800436c:	4935      	ldr	r1, [pc, #212]	; (8004444 <HAL_GPIO_Init+0x2e0>)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	3302      	adds	r3, #2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_GPIO_Init+0x2f8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43da      	mvns	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	4013      	ands	r3, r2
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800439e:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_GPIO_Init+0x2f8>)
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80043a4:	4b2d      	ldr	r3, [pc, #180]	; (800445c <HAL_GPIO_Init+0x2f8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	43da      	mvns	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	4013      	ands	r3, r2
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_GPIO_Init+0x2f8>)
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ce:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_GPIO_Init+0x2f8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	43da      	mvns	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	035b      	lsls	r3, r3, #13
 80043e6:	4013      	ands	r3, r2
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_GPIO_Init+0x2f8>)
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <HAL_GPIO_Init+0x2f8>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	43da      	mvns	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4013      	ands	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	039b      	lsls	r3, r3, #14
 8004410:	4013      	ands	r3, r2
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_GPIO_Init+0x2f8>)
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3301      	adds	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	40da      	lsrs	r2, r3
 8004430:	1e13      	subs	r3, r2, #0
 8004432:	d000      	beq.n	8004436 <HAL_GPIO_Init+0x2d2>
 8004434:	e6a2      	b.n	800417c <HAL_GPIO_Init+0x18>
  }
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b006      	add	sp, #24
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	40021000 	.word	0x40021000
 8004444:	40010000 	.word	0x40010000
 8004448:	50000400 	.word	0x50000400
 800444c:	50000800 	.word	0x50000800
 8004450:	50000c00 	.word	0x50000c00
 8004454:	50001000 	.word	0x50001000
 8004458:	50001c00 	.word	0x50001c00
 800445c:	40010400 	.word	0x40010400

08004460 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	0008      	movs	r0, r1
 800446a:	0011      	movs	r1, r2
 800446c:	1cbb      	adds	r3, r7, #2
 800446e:	1c02      	adds	r2, r0, #0
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	1c7b      	adds	r3, r7, #1
 8004474:	1c0a      	adds	r2, r1, #0
 8004476:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004478:	1c7b      	adds	r3, r7, #1
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004480:	1cbb      	adds	r3, r7, #2
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004488:	e003      	b.n	8004492 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800448a:	1cbb      	adds	r3, r7, #2
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b002      	add	sp, #8
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	0002      	movs	r2, r0
 80044a4:	1dbb      	adds	r3, r7, #6
 80044a6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	1dba      	adds	r2, r7, #6
 80044ae:	8812      	ldrh	r2, [r2, #0]
 80044b0:	4013      	ands	r3, r2
 80044b2:	d008      	beq.n	80044c6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044b6:	1dba      	adds	r2, r7, #6
 80044b8:	8812      	ldrh	r2, [r2, #0]
 80044ba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044bc:	1dbb      	adds	r3, r7, #6
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f014 fd97 	bl	8018ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b002      	add	sp, #8
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	40010400 	.word	0x40010400

080044d4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06c      	b.n	80045c0 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	222e      	movs	r2, #46	; 0x2e
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	222d      	movs	r2, #45	; 0x2d
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7fe ffaf 	bl	8003460 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	222e      	movs	r2, #46	; 0x2e
 8004506:	2102      	movs	r1, #2
 8004508:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d005      	beq.n	8004526 <HAL_LPTIM_Init+0x52>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	429a      	cmp	r2, r3
 8004524:	d103      	bne.n	800452e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	221e      	movs	r2, #30
 800452a:	4393      	bics	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <HAL_LPTIM_Init+0xf4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a24      	ldr	r2, [pc, #144]	; (80045cc <HAL_LPTIM_Init+0xf8>)
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <HAL_LPTIM_Init+0xfc>)
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004550:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004556:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800455c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004562:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d005      	beq.n	800457e <HAL_LPTIM_Init+0xaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	429a      	cmp	r2, r3
 800457c:	d107      	bne.n	800458e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004586:	4313      	orrs	r3, r2
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <HAL_LPTIM_Init+0xf4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00a      	beq.n	80045ae <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80045a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	222e      	movs	r2, #46	; 0x2e
 80045ba:	2101      	movs	r1, #1
 80045bc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	0000ffff 	.word	0x0000ffff
 80045cc:	ffff1f3f 	.word	0xffff1f3f
 80045d0:	ff19f1f8 	.word	0xff19f1f8

080045d4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	222e      	movs	r2, #46	; 0x2e
 80045e2:	2102      	movs	r1, #2
 80045e4:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	0589      	lsls	r1, r1, #22
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d00d      	beq.n	8004618 <HAL_LPTIM_Counter_Start_IT+0x44>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4919      	ldr	r1, [pc, #100]	; (8004678 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8004614:	400a      	ands	r2, r1
 8004616:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2110      	movs	r1, #16
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2102      	movs	r1, #2
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2101      	movs	r1, #1
 8004644:	430a      	orrs	r2, r1
 8004646:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2104      	movs	r1, #4
 800465c:	430a      	orrs	r2, r1
 800465e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	222e      	movs	r2, #46	; 0x2e
 8004664:	2101      	movs	r1, #1
 8004666:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b002      	add	sp, #8
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	40010400 	.word	0x40010400
 8004678:	fffff1ff 	.word	0xfffff1ff

0800467c <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10e      	bne.n	80046c6 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2201      	movs	r2, #1
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2201      	movs	r2, #1
 80046bc:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 f888 	bl	80047d6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2202      	movs	r2, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d10e      	bne.n	80046f2 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2202      	movs	r2, #2
 80046dc:	4013      	ands	r3, r2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d107      	bne.n	80046f2 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2202      	movs	r2, #2
 80046e8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fe fbe5 	bl	8002ebc <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2204      	movs	r2, #4
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d10e      	bne.n	800471e <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2204      	movs	r2, #4
 8004708:	4013      	ands	r3, r2
 800470a:	2b04      	cmp	r3, #4
 800470c:	d107      	bne.n	800471e <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2204      	movs	r2, #4
 8004714:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f864 	bl	80047e6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2208      	movs	r2, #8
 8004726:	4013      	ands	r3, r2
 8004728:	2b08      	cmp	r3, #8
 800472a:	d10e      	bne.n	800474a <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2208      	movs	r2, #8
 8004734:	4013      	ands	r3, r2
 8004736:	2b08      	cmp	r3, #8
 8004738:	d107      	bne.n	800474a <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2208      	movs	r2, #8
 8004740:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f856 	bl	80047f6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2210      	movs	r2, #16
 8004752:	4013      	ands	r3, r2
 8004754:	2b10      	cmp	r3, #16
 8004756:	d10e      	bne.n	8004776 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2210      	movs	r2, #16
 8004760:	4013      	ands	r3, r2
 8004762:	2b10      	cmp	r3, #16
 8004764:	d107      	bne.n	8004776 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2210      	movs	r2, #16
 800476c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f848 	bl	8004806 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2220      	movs	r2, #32
 800477e:	4013      	ands	r3, r2
 8004780:	2b20      	cmp	r3, #32
 8004782:	d10e      	bne.n	80047a2 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2220      	movs	r2, #32
 800478c:	4013      	ands	r3, r2
 800478e:	2b20      	cmp	r3, #32
 8004790:	d107      	bne.n	80047a2 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2220      	movs	r2, #32
 8004798:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 f83a 	bl	8004816 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2240      	movs	r2, #64	; 0x40
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d10e      	bne.n	80047ce <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d107      	bne.n	80047ce <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 f82c 	bl	8004826 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b002      	add	sp, #8
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <HAL_PWR_EnableBkUpAccess+0x18>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004842:	2180      	movs	r1, #128	; 0x80
 8004844:	0049      	lsls	r1, r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40007000 	.word	0x40007000

08004854 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	000a      	movs	r2, r1
 800485e:	1cfb      	adds	r3, r7, #3
 8004860:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_PWR_EnterSTOPMode+0x60>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2203      	movs	r2, #3
 8004870:	4393      	bics	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_PWR_EnterSTOPMode+0x60>)
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_PWR_EnterSTOPMode+0x64>)
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_PWR_EnterSTOPMode+0x64>)
 8004888:	2104      	movs	r1, #4
 800488a:	430a      	orrs	r2, r1
 800488c:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800488e:	1cfb      	adds	r3, r7, #3
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004896:	bf30      	wfi
 8004898:	e002      	b.n	80048a0 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800489a:	bf40      	sev
  __ASM volatile ("wfe");
 800489c:	bf20      	wfe
 800489e:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_PWR_EnterSTOPMode+0x64>)
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <HAL_PWR_EnterSTOPMode+0x64>)
 80048a6:	2104      	movs	r1, #4
 80048a8:	438a      	bics	r2, r1
 80048aa:	611a      	str	r2, [r3, #16]

}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b004      	add	sp, #16
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40007000 	.word	0x40007000
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	00c9      	lsls	r1, r1, #3
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40007000 	.word	0x40007000

080048d8 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	0089      	lsls	r1, r1, #2
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40007000 	.word	0x40007000

080048f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b5b0      	push	{r4, r5, r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f000 fbbc 	bl	8005080 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004908:	4bc8      	ldr	r3, [pc, #800]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	220c      	movs	r2, #12
 800490e:	4013      	ands	r3, r2
 8004910:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004912:	4bc6      	ldr	r3, [pc, #792]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	025b      	lsls	r3, r3, #9
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	4013      	ands	r3, r2
 8004926:	d100      	bne.n	800492a <HAL_RCC_OscConfig+0x36>
 8004928:	e07e      	b.n	8004a28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d007      	beq.n	8004940 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d112      	bne.n	800495c <HAL_RCC_OscConfig+0x68>
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	025b      	lsls	r3, r3, #9
 800493c:	429a      	cmp	r2, r3
 800493e:	d10d      	bne.n	800495c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4bba      	ldr	r3, [pc, #744]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	4013      	ands	r3, r2
 800494a:	d100      	bne.n	800494e <HAL_RCC_OscConfig+0x5a>
 800494c:	e06b      	b.n	8004a26 <HAL_RCC_OscConfig+0x132>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d167      	bne.n	8004a26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f000 fb92 	bl	8005080 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	025b      	lsls	r3, r3, #9
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_RCC_OscConfig+0x84>
 8004968:	4bb0      	ldr	r3, [pc, #704]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4baf      	ldr	r3, [pc, #700]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	0249      	lsls	r1, r1, #9
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e027      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	23a0      	movs	r3, #160	; 0xa0
 800497e:	02db      	lsls	r3, r3, #11
 8004980:	429a      	cmp	r2, r3
 8004982:	d10e      	bne.n	80049a2 <HAL_RCC_OscConfig+0xae>
 8004984:	4ba9      	ldr	r3, [pc, #676]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4ba8      	ldr	r3, [pc, #672]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	02c9      	lsls	r1, r1, #11
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	4ba6      	ldr	r3, [pc, #664]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4ba5      	ldr	r3, [pc, #660]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004998:	2180      	movs	r1, #128	; 0x80
 800499a:	0249      	lsls	r1, r1, #9
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e012      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 80049a2:	4ba2      	ldr	r3, [pc, #648]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4ba1      	ldr	r3, [pc, #644]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 80049a8:	49a1      	ldr	r1, [pc, #644]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049aa:	400a      	ands	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	4b9f      	ldr	r3, [pc, #636]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	025b      	lsls	r3, r3, #9
 80049b6:	4013      	ands	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4b9b      	ldr	r3, [pc, #620]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b9a      	ldr	r3, [pc, #616]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 80049c2:	499c      	ldr	r1, [pc, #624]	; (8004c34 <HAL_RCC_OscConfig+0x340>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fe ffe8 	bl	80039a4 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d8:	e009      	b.n	80049ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049da:	f7fe ffe3 	bl	80039a4 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d902      	bls.n	80049ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	f000 fb49 	bl	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ee:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	029b      	lsls	r3, r3, #10
 80049f6:	4013      	ands	r3, r2
 80049f8:	d0ef      	beq.n	80049da <HAL_RCC_OscConfig+0xe6>
 80049fa:	e015      	b.n	8004a28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fe ffd2 	bl	80039a4 <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a06:	f7fe ffcd 	bl	80039a4 <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e333      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a18:	4b84      	ldr	r3, [pc, #528]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	029b      	lsls	r3, r3, #10
 8004a20:	4013      	ands	r3, r2
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x112>
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d100      	bne.n	8004a34 <HAL_RCC_OscConfig+0x140>
 8004a32:	e098      	b.n	8004b66 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004a42:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b79      	ldr	r3, [pc, #484]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a48:	2120      	movs	r1, #32
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2220      	movs	r2, #32
 8004a52:	4393      	bics	r3, r2
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d13d      	bne.n	8004ade <HAL_RCC_OscConfig+0x1ea>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13a      	bne.n	8004ade <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004a68:	4b70      	ldr	r3, [pc, #448]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_RCC_OscConfig+0x188>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e301      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b6b      	ldr	r3, [pc, #428]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a6d      	ldr	r2, [pc, #436]	; (8004c38 <HAL_RCC_OscConfig+0x344>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	4b67      	ldr	r3, [pc, #412]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a92:	4b66      	ldr	r3, [pc, #408]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2209      	movs	r2, #9
 8004a98:	4393      	bics	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa4:	f000 fc20 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8004aa8:	0001      	movs	r1, r0
 8004aaa:	4b60      	ldr	r3, [pc, #384]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	4a61      	ldr	r2, [pc, #388]	; (8004c3c <HAL_RCC_OscConfig+0x348>)
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	000a      	movs	r2, r1
 8004aba:	40da      	lsrs	r2, r3
 8004abc:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <HAL_RCC_OscConfig+0x34c>)
 8004abe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004ac0:	2513      	movs	r5, #19
 8004ac2:	197c      	adds	r4, r7, r5
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7fe ff39 	bl	800393c <HAL_InitTick>
 8004aca:	0003      	movs	r3, r0
 8004acc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004ace:	197b      	adds	r3, r7, r5
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d047      	beq.n	8004b66 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004ad6:	2313      	movs	r3, #19
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	e2d0      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d027      	beq.n	8004b34 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ae4:	4b51      	ldr	r3, [pc, #324]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2209      	movs	r2, #9
 8004aea:	4393      	bics	r3, r2
 8004aec:	0019      	movs	r1, r3
 8004aee:	4b4f      	ldr	r3, [pc, #316]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	430a      	orrs	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fe ff55 	bl	80039a4 <HAL_GetTick>
 8004afa:	0003      	movs	r3, r0
 8004afc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b00:	f7fe ff50 	bl	80039a4 <HAL_GetTick>
 8004b04:	0002      	movs	r2, r0
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e2b6      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b12:	4b46      	ldr	r3, [pc, #280]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2204      	movs	r2, #4
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d0f1      	beq.n	8004b00 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a45      	ldr	r2, [pc, #276]	; (8004c38 <HAL_RCC_OscConfig+0x344>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	e018      	b.n	8004b66 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b34:	4b3d      	ldr	r3, [pc, #244]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b3c      	ldr	r3, [pc, #240]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	438a      	bics	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fe ff30 	bl	80039a4 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b4a:	f7fe ff2b 	bl	80039a4 <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e291      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b5c:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2204      	movs	r2, #4
 8004b62:	4013      	ands	r3, r2
 8004b64:	d1f1      	bne.n	8004b4a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <HAL_RCC_OscConfig+0x27e>
 8004b70:	e09f      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d13f      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b78:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_OscConfig+0x29c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e277      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a2b      	ldr	r2, [pc, #172]	; (8004c44 <HAL_RCC_OscConfig+0x350>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9e:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba4:	4b21      	ldr	r3, [pc, #132]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	0a19      	lsrs	r1, r3, #8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	061a      	lsls	r2, r3, #24
 8004bb2:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	0b5b      	lsrs	r3, r3, #13
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	0212      	lsls	r2, r2, #8
 8004bc4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bc6:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	210f      	movs	r1, #15
 8004bce:	400b      	ands	r3, r1
 8004bd0:	491a      	ldr	r1, [pc, #104]	; (8004c3c <HAL_RCC_OscConfig+0x348>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCC_OscConfig+0x34c>)
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004bda:	2513      	movs	r5, #19
 8004bdc:	197c      	adds	r4, r7, r5
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fe feac 	bl	800393c <HAL_InitTick>
 8004be4:	0003      	movs	r3, r0
 8004be6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004be8:	197b      	adds	r3, r7, r5
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d060      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004bf0:	2313      	movs	r3, #19
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	e243      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d03e      	beq.n	8004c7e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_RCC_OscConfig+0x338>)
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	0049      	lsls	r1, r1, #1
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fe fec9 	bl	80039a4 <HAL_GetTick>
 8004c12:	0003      	movs	r3, r0
 8004c14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c16:	e017      	b.n	8004c48 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c18:	f7fe fec4 	bl	80039a4 <HAL_GetTick>
 8004c1c:	0002      	movs	r2, r0
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d910      	bls.n	8004c48 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e22a      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	fffeffff 	.word	0xfffeffff
 8004c34:	fffbffff 	.word	0xfffbffff
 8004c38:	ffffe0ff 	.word	0xffffe0ff
 8004c3c:	0801b744 	.word	0x0801b744
 8004c40:	20000004 	.word	0x20000004
 8004c44:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c48:	4bc6      	ldr	r3, [pc, #792]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4013      	ands	r3, r2
 8004c52:	d0e1      	beq.n	8004c18 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c54:	4bc3      	ldr	r3, [pc, #780]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4ac3      	ldr	r2, [pc, #780]	; (8004f68 <HAL_RCC_OscConfig+0x674>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c62:	4bc0      	ldr	r3, [pc, #768]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c68:	4bbe      	ldr	r3, [pc, #760]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	0a19      	lsrs	r1, r3, #8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	061a      	lsls	r2, r3, #24
 8004c76:	4bbb      	ldr	r3, [pc, #748]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e019      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c7e:	4bb9      	ldr	r3, [pc, #740]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4bb8      	ldr	r3, [pc, #736]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004c84:	49b9      	ldr	r1, [pc, #740]	; (8004f6c <HAL_RCC_OscConfig+0x678>)
 8004c86:	400a      	ands	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fe fe8b 	bl	80039a4 <HAL_GetTick>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c94:	f7fe fe86 	bl	80039a4 <HAL_GetTick>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1ec      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ca6:	4baf      	ldr	r3, [pc, #700]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d036      	beq.n	8004d2a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d019      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc4:	4ba7      	ldr	r3, [pc, #668]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc8:	4ba6      	ldr	r3, [pc, #664]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd0:	f7fe fe68 	bl	80039a4 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fe fe63 	bl	80039a4 <HAL_GetTick>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e1c9      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cec:	4b9d      	ldr	r3, [pc, #628]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d0f1      	beq.n	8004cda <HAL_RCC_OscConfig+0x3e6>
 8004cf6:	e018      	b.n	8004d2a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf8:	4b9a      	ldr	r3, [pc, #616]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cfc:	4b99      	ldr	r3, [pc, #612]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004cfe:	2101      	movs	r1, #1
 8004d00:	438a      	bics	r2, r1
 8004d02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d04:	f7fe fe4e 	bl	80039a4 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fe fe49 	bl	80039a4 <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1af      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d20:	4b90      	ldr	r3, [pc, #576]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d1f1      	bne.n	8004d0e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4013      	ands	r3, r2
 8004d32:	d100      	bne.n	8004d36 <HAL_RCC_OscConfig+0x442>
 8004d34:	e0af      	b.n	8004e96 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	2323      	movs	r3, #35	; 0x23
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b89      	ldr	r3, [pc, #548]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	055b      	lsls	r3, r3, #21
 8004d46:	4013      	ands	r3, r2
 8004d48:	d10a      	bne.n	8004d60 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b86      	ldr	r3, [pc, #536]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	4b85      	ldr	r3, [pc, #532]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	0549      	lsls	r1, r1, #21
 8004d54:	430a      	orrs	r2, r1
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004d58:	2323      	movs	r3, #35	; 0x23
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_RCC_OscConfig+0x67c>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d11a      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6c:	4b80      	ldr	r3, [pc, #512]	; (8004f70 <HAL_RCC_OscConfig+0x67c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x67c>)
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	0049      	lsls	r1, r1, #1
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fe fe13 	bl	80039a4 <HAL_GetTick>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fe fe0e 	bl	80039a4 <HAL_GetTick>
 8004d88:	0002      	movs	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e174      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b76      	ldr	r3, [pc, #472]	; (8004f70 <HAL_RCC_OscConfig+0x67c>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_OscConfig+0x4ca>
 8004dae:	4b6d      	ldr	r3, [pc, #436]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004db0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db2:	4b6c      	ldr	r3, [pc, #432]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004db4:	2180      	movs	r1, #128	; 0x80
 8004db6:	0049      	lsls	r1, r1, #1
 8004db8:	430a      	orrs	r2, r1
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
 8004dbc:	e031      	b.n	8004e22 <HAL_RCC_OscConfig+0x52e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x4ec>
 8004dc6:	4b67      	ldr	r3, [pc, #412]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dca:	4b66      	ldr	r3, [pc, #408]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004dcc:	4967      	ldr	r1, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x678>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8004dd2:	4b64      	ldr	r3, [pc, #400]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd6:	4b63      	ldr	r3, [pc, #396]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004dd8:	4966      	ldr	r1, [pc, #408]	; (8004f74 <HAL_RCC_OscConfig+0x680>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50
 8004dde:	e020      	b.n	8004e22 <HAL_RCC_OscConfig+0x52e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	23a0      	movs	r3, #160	; 0xa0
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d10e      	bne.n	8004e0a <HAL_RCC_OscConfig+0x516>
 8004dec:	4b5d      	ldr	r3, [pc, #372]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004df0:	4b5c      	ldr	r3, [pc, #368]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	00c9      	lsls	r1, r1, #3
 8004df6:	430a      	orrs	r2, r1
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50
 8004dfa:	4b5a      	ldr	r3, [pc, #360]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dfe:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	0049      	lsls	r1, r1, #1
 8004e04:	430a      	orrs	r2, r1
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50
 8004e08:	e00b      	b.n	8004e22 <HAL_RCC_OscConfig+0x52e>
 8004e0a:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0e:	4b55      	ldr	r3, [pc, #340]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e10:	4956      	ldr	r1, [pc, #344]	; (8004f6c <HAL_RCC_OscConfig+0x678>)
 8004e12:	400a      	ands	r2, r1
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
 8004e16:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1a:	4b52      	ldr	r3, [pc, #328]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e1c:	4955      	ldr	r1, [pc, #340]	; (8004f74 <HAL_RCC_OscConfig+0x680>)
 8004e1e:	400a      	ands	r2, r1
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fe fdbb 	bl	80039a4 <HAL_GetTick>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fe fdb6 	bl	80039a4 <HAL_GetTick>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	4a4e      	ldr	r2, [pc, #312]	; (8004f78 <HAL_RCC_OscConfig+0x684>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e11b      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e48:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCC_OscConfig+0x540>
 8004e54:	e014      	b.n	8004e80 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e56:	f7fe fda5 	bl	80039a4 <HAL_GetTick>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e5e:	e009      	b.n	8004e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fe fda0 	bl	80039a4 <HAL_GetTick>
 8004e64:	0002      	movs	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	4a43      	ldr	r2, [pc, #268]	; (8004f78 <HAL_RCC_OscConfig+0x684>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e105      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e74:	4b3b      	ldr	r3, [pc, #236]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d1ef      	bne.n	8004e60 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e80:	2323      	movs	r3, #35	; 0x23
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8e:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004e90:	493a      	ldr	r1, [pc, #232]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d049      	beq.n	8004f34 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d026      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004eba:	2101      	movs	r1, #1
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec0:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <HAL_RCC_OscConfig+0x68c>)
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_RCC_OscConfig+0x68c>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0189      	lsls	r1, r1, #6
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ece:	f7fe fd69 	bl	80039a4 <HAL_GetTick>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed8:	f7fe fd64 	bl	80039a4 <HAL_GetTick>
 8004edc:	0002      	movs	r2, r0
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0ca      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d0f1      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x5e4>
 8004ef4:	e01e      	b.n	8004f34 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004efc:	2101      	movs	r1, #1
 8004efe:	438a      	bics	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
 8004f02:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <HAL_RCC_OscConfig+0x68c>)
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <HAL_RCC_OscConfig+0x68c>)
 8004f08:	491e      	ldr	r1, [pc, #120]	; (8004f84 <HAL_RCC_OscConfig+0x690>)
 8004f0a:	400a      	ands	r2, r1
 8004f0c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fe fd49 	bl	80039a4 <HAL_GetTick>
 8004f12:	0003      	movs	r3, r0
 8004f14:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f18:	f7fe fd44 	bl	80039a4 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0aa      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	4013      	ands	r3, r2
 8004f32:	d1f1      	bne.n	8004f18 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d100      	bne.n	8004f3e <HAL_RCC_OscConfig+0x64a>
 8004f3c:	e09f      	b.n	800507e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d100      	bne.n	8004f46 <HAL_RCC_OscConfig+0x652>
 8004f44:	e078      	b.n	8005038 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d159      	bne.n	8005002 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCC_OscConfig+0x670>)
 8004f54:	490c      	ldr	r1, [pc, #48]	; (8004f88 <HAL_RCC_OscConfig+0x694>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5a:	f7fe fd23 	bl	80039a4 <HAL_GetTick>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f62:	e01c      	b.n	8004f9e <HAL_RCC_OscConfig+0x6aa>
 8004f64:	40021000 	.word	0x40021000
 8004f68:	ffff1fff 	.word	0xffff1fff
 8004f6c:	fffffeff 	.word	0xfffffeff
 8004f70:	40007000 	.word	0x40007000
 8004f74:	fffffbff 	.word	0xfffffbff
 8004f78:	00001388 	.word	0x00001388
 8004f7c:	efffffff 	.word	0xefffffff
 8004f80:	40010000 	.word	0x40010000
 8004f84:	ffffdfff 	.word	0xffffdfff
 8004f88:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fe fd0a 	bl	80039a4 <HAL_GetTick>
 8004f90:	0002      	movs	r2, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e070      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	049b      	lsls	r3, r3, #18
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004faa:	4b37      	ldr	r3, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4a37      	ldr	r2, [pc, #220]	; (800508c <HAL_RCC_OscConfig+0x798>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	4b30      	ldr	r3, [pc, #192]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	0449      	lsls	r1, r1, #17
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fe fce4 	bl	80039a4 <HAL_GetTick>
 8004fdc:	0003      	movs	r3, r0
 8004fde:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fe fcdf 	bl	80039a4 <HAL_GetTick>
 8004fe6:	0002      	movs	r2, r0
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e045      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ff4:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	049b      	lsls	r3, r3, #18
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x6ee>
 8005000:	e03d      	b.n	800507e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8005008:	4921      	ldr	r1, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 800500a:	400a      	ands	r2, r1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500e:	f7fe fcc9 	bl	80039a4 <HAL_GetTick>
 8005012:	0003      	movs	r3, r0
 8005014:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005018:	f7fe fcc4 	bl	80039a4 <HAL_GetTick>
 800501c:	0002      	movs	r2, r0
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e02a      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800502a:	4b17      	ldr	r3, [pc, #92]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	049b      	lsls	r3, r3, #18
 8005032:	4013      	ands	r3, r2
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x724>
 8005036:	e022      	b.n	800507e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e01d      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005044:	4b10      	ldr	r3, [pc, #64]	; (8005088 <HAL_RCC_OscConfig+0x794>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	025b      	lsls	r3, r3, #9
 8005050:	401a      	ands	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	429a      	cmp	r2, r3
 8005058:	d10f      	bne.n	800507a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	23f0      	movs	r3, #240	; 0xf0
 800505e:	039b      	lsls	r3, r3, #14
 8005060:	401a      	ands	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d107      	bne.n	800507a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	23c0      	movs	r3, #192	; 0xc0
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	401a      	ands	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b00a      	add	sp, #40	; 0x28
 8005086:	bdb0      	pop	{r4, r5, r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	ff02ffff 	.word	0xff02ffff
 8005090:	feffffff 	.word	0xfeffffff

08005094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e10d      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a8:	4b88      	ldr	r3, [pc, #544]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d911      	bls.n	80050da <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b6:	4b85      	ldr	r3, [pc, #532]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2201      	movs	r2, #1
 80050bc:	4393      	bics	r3, r2
 80050be:	0019      	movs	r1, r3
 80050c0:	4b82      	ldr	r3, [pc, #520]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c8:	4b80      	ldr	r3, [pc, #512]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d001      	beq.n	80050da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0f4      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e4:	4b7a      	ldr	r3, [pc, #488]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	22f0      	movs	r2, #240	; 0xf0
 80050ea:	4393      	bics	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	4b77      	ldr	r3, [pc, #476]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 80050f4:	430a      	orrs	r2, r1
 80050f6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	4013      	ands	r3, r2
 8005100:	d100      	bne.n	8005104 <HAL_RCC_ClockConfig+0x70>
 8005102:	e089      	b.n	8005218 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d107      	bne.n	800511c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800510c:	4b70      	ldr	r3, [pc, #448]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	4013      	ands	r3, r2
 8005116:	d120      	bne.n	800515a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0d3      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d107      	bne.n	8005134 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005124:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	049b      	lsls	r3, r3, #18
 800512c:	4013      	ands	r3, r2
 800512e:	d114      	bne.n	800515a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0c7      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d106      	bne.n	800514a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800513c:	4b64      	ldr	r3, [pc, #400]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2204      	movs	r2, #4
 8005142:	4013      	ands	r3, r2
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0bc      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800514a:	4b61      	ldr	r3, [pc, #388]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4013      	ands	r3, r2
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0b4      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b5d      	ldr	r3, [pc, #372]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2203      	movs	r2, #3
 8005160:	4393      	bics	r3, r2
 8005162:	0019      	movs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	4b59      	ldr	r3, [pc, #356]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 800516a:	430a      	orrs	r2, r1
 800516c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800516e:	f7fe fc19 	bl	80039a4 <HAL_GetTick>
 8005172:	0003      	movs	r3, r0
 8005174:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d111      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800517e:	e009      	b.n	8005194 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005180:	f7fe fc10 	bl	80039a4 <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_RCC_ClockConfig+0x240>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e097      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005194:	4b4e      	ldr	r3, [pc, #312]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	220c      	movs	r2, #12
 800519a:	4013      	ands	r3, r2
 800519c:	2b08      	cmp	r3, #8
 800519e:	d1ef      	bne.n	8005180 <HAL_RCC_ClockConfig+0xec>
 80051a0:	e03a      	b.n	8005218 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d111      	bne.n	80051ce <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051aa:	e009      	b.n	80051c0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ac:	f7fe fbfa 	bl	80039a4 <HAL_GetTick>
 80051b0:	0002      	movs	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	4a47      	ldr	r2, [pc, #284]	; (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e081      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c0:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	220c      	movs	r2, #12
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d1ef      	bne.n	80051ac <HAL_RCC_ClockConfig+0x118>
 80051cc:	e024      	b.n	8005218 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d11b      	bne.n	800520e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051d6:	e009      	b.n	80051ec <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d8:	f7fe fbe4 	bl	80039a4 <HAL_GetTick>
 80051dc:	0002      	movs	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e06b      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ec:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	220c      	movs	r2, #12
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d1ef      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x144>
 80051f8:	e00e      	b.n	8005218 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fa:	f7fe fbd3 	bl	80039a4 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <HAL_RCC_ClockConfig+0x240>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e05a      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800520e:	4b30      	ldr	r3, [pc, #192]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	220c      	movs	r2, #12
 8005214:	4013      	ands	r3, r2
 8005216:	d1f0      	bne.n	80051fa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2201      	movs	r2, #1
 800521e:	4013      	ands	r3, r2
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d211      	bcs.n	800524a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	4393      	bics	r3, r2
 800522e:	0019      	movs	r1, r3
 8005230:	4b26      	ldr	r3, [pc, #152]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCC_ClockConfig+0x238>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	4013      	ands	r3, r2
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e03c      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2204      	movs	r2, #4
 8005250:	4013      	ands	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_RCC_ClockConfig+0x244>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005264:	430a      	orrs	r2, r1
 8005266:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2208      	movs	r2, #8
 800526e:	4013      	ands	r3, r2
 8005270:	d00a      	beq.n	8005288 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4a19      	ldr	r2, [pc, #100]	; (80052dc <HAL_RCC_ClockConfig+0x248>)
 8005278:	4013      	ands	r3, r2
 800527a:	0019      	movs	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	00da      	lsls	r2, r3, #3
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005284:	430a      	orrs	r2, r1
 8005286:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005288:	f000 f82e 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 800528c:	0001      	movs	r1, r0
 800528e:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <HAL_RCC_ClockConfig+0x23c>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	220f      	movs	r2, #15
 8005296:	4013      	ands	r3, r2
 8005298:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <HAL_RCC_ClockConfig+0x24c>)
 800529a:	5cd3      	ldrb	r3, [r2, r3]
 800529c:	000a      	movs	r2, r1
 800529e:	40da      	lsrs	r2, r3
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_RCC_ClockConfig+0x250>)
 80052a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80052a4:	250b      	movs	r5, #11
 80052a6:	197c      	adds	r4, r7, r5
 80052a8:	2000      	movs	r0, #0
 80052aa:	f7fe fb47 	bl	800393c <HAL_InitTick>
 80052ae:	0003      	movs	r3, r0
 80052b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052b2:	197b      	adds	r3, r7, r5
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80052ba:	230b      	movs	r3, #11
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	e000      	b.n	80052c4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b004      	add	sp, #16
 80052ca:	bdb0      	pop	{r4, r5, r7, pc}
 80052cc:	40022000 	.word	0x40022000
 80052d0:	40021000 	.word	0x40021000
 80052d4:	00001388 	.word	0x00001388
 80052d8:	fffff8ff 	.word	0xfffff8ff
 80052dc:	ffffc7ff 	.word	0xffffc7ff
 80052e0:	0801b744 	.word	0x0801b744
 80052e4:	20000004 	.word	0x20000004

080052e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80052ee:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCC_GetSysClockFreq+0xf4>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	220c      	movs	r2, #12
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d00e      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x34>
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d00f      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x3a>
 8005302:	2b04      	cmp	r3, #4
 8005304:	d157      	bne.n	80053b6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005306:	4b35      	ldr	r3, [pc, #212]	; (80053dc <HAL_RCC_GetSysClockFreq+0xf4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2210      	movs	r2, #16
 800530c:	4013      	ands	r3, r2
 800530e:	d002      	beq.n	8005316 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005310:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005312:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005314:	e05d      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005316:	4b33      	ldr	r3, [pc, #204]	; (80053e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005318:	613b      	str	r3, [r7, #16]
      break;
 800531a:	e05a      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800531c:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800531e:	613b      	str	r3, [r7, #16]
      break;
 8005320:	e057      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0c9b      	lsrs	r3, r3, #18
 8005326:	220f      	movs	r2, #15
 8005328:	4013      	ands	r3, r2
 800532a:	4a30      	ldr	r2, [pc, #192]	; (80053ec <HAL_RCC_GetSysClockFreq+0x104>)
 800532c:	5cd3      	ldrb	r3, [r2, r3]
 800532e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	0d9b      	lsrs	r3, r3, #22
 8005334:	2203      	movs	r2, #3
 8005336:	4013      	ands	r3, r2
 8005338:	3301      	adds	r3, #1
 800533a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800533c:	4b27      	ldr	r3, [pc, #156]	; (80053dc <HAL_RCC_GetSysClockFreq+0xf4>)
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	4013      	ands	r3, r2
 8005346:	d00f      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	000a      	movs	r2, r1
 800534c:	0152      	lsls	r2, r2, #5
 800534e:	1a52      	subs	r2, r2, r1
 8005350:	0193      	lsls	r3, r2, #6
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	185b      	adds	r3, r3, r1
 8005358:	025b      	lsls	r3, r3, #9
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	0018      	movs	r0, r3
 800535e:	f7fa fedb 	bl	8000118 <__udivsi3>
 8005362:	0003      	movs	r3, r0
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e023      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005368:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <HAL_RCC_GetSysClockFreq+0xf4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2210      	movs	r2, #16
 800536e:	4013      	ands	r3, r2
 8005370:	d00f      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	000a      	movs	r2, r1
 8005376:	0152      	lsls	r2, r2, #5
 8005378:	1a52      	subs	r2, r2, r1
 800537a:	0193      	lsls	r3, r2, #6
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	185b      	adds	r3, r3, r1
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	0018      	movs	r0, r3
 8005388:	f7fa fec6 	bl	8000118 <__udivsi3>
 800538c:	0003      	movs	r3, r0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e00e      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	000a      	movs	r2, r1
 8005396:	0152      	lsls	r2, r2, #5
 8005398:	1a52      	subs	r2, r2, r1
 800539a:	0193      	lsls	r3, r2, #6
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	185b      	adds	r3, r3, r1
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7fa feb6 	bl	8000118 <__udivsi3>
 80053ac:	0003      	movs	r3, r0
 80053ae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
      break;
 80053b4:	e00d      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCC_GetSysClockFreq+0xf4>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	0b5b      	lsrs	r3, r3, #13
 80053bc:	2207      	movs	r2, #7
 80053be:	4013      	ands	r3, r2
 80053c0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	0212      	lsls	r2, r2, #8
 80053ca:	409a      	lsls	r2, r3
 80053cc:	0013      	movs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
      break;
 80053d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053d2:	693b      	ldr	r3, [r7, #16]
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b006      	add	sp, #24
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	003d0900 	.word	0x003d0900
 80053e4:	00f42400 	.word	0x00f42400
 80053e8:	007a1200 	.word	0x007a1200
 80053ec:	0801b75c 	.word	0x0801b75c

080053f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f4:	4b02      	ldr	r3, [pc, #8]	; (8005400 <HAL_RCC_GetHCLKFreq+0x10>)
 80053f6:	681b      	ldr	r3, [r3, #0]
}
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	20000004 	.word	0x20000004

08005404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005408:	f7ff fff2 	bl	80053f0 <HAL_RCC_GetHCLKFreq>
 800540c:	0001      	movs	r1, r0
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	0a1b      	lsrs	r3, r3, #8
 8005414:	2207      	movs	r2, #7
 8005416:	4013      	ands	r3, r2
 8005418:	4a04      	ldr	r2, [pc, #16]	; (800542c <HAL_RCC_GetPCLK1Freq+0x28>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	40d9      	lsrs	r1, r3
 800541e:	000b      	movs	r3, r1
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	40021000 	.word	0x40021000
 800542c:	0801b754 	.word	0x0801b754

08005430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005434:	f7ff ffdc 	bl	80053f0 <HAL_RCC_GetHCLKFreq>
 8005438:	0001      	movs	r1, r0
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	0adb      	lsrs	r3, r3, #11
 8005440:	2207      	movs	r2, #7
 8005442:	4013      	ands	r3, r2
 8005444:	4a04      	ldr	r2, [pc, #16]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005446:	5cd3      	ldrb	r3, [r2, r3]
 8005448:	40d9      	lsrs	r1, r3
 800544a:	000b      	movs	r3, r1
}
 800544c:	0018      	movs	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	40021000 	.word	0x40021000
 8005458:	0801b754 	.word	0x0801b754

0800545c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2220      	movs	r2, #32
 800546a:	4013      	ands	r3, r2
 800546c:	d100      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800546e:	e0c7      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005470:	2317      	movs	r3, #23
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005478:	4b99      	ldr	r3, [pc, #612]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800547a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	055b      	lsls	r3, r3, #21
 8005480:	4013      	ands	r3, r2
 8005482:	d10a      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	4b96      	ldr	r3, [pc, #600]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005488:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	0549      	lsls	r1, r1, #21
 800548e:	430a      	orrs	r2, r1
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005492:	2317      	movs	r3, #23
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b92      	ldr	r3, [pc, #584]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	4013      	ands	r3, r2
 80054a4:	d11a      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4b8f      	ldr	r3, [pc, #572]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b8e      	ldr	r3, [pc, #568]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	0049      	lsls	r1, r1, #1
 80054b0:	430a      	orrs	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b4:	f7fe fa76 	bl	80039a4 <HAL_GetTick>
 80054b8:	0003      	movs	r3, r0
 80054ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054be:	f7fe fa71 	bl	80039a4 <HAL_GetTick>
 80054c2:	0002      	movs	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b64      	cmp	r3, #100	; 0x64
 80054ca:	d901      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e102      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d0:	4b84      	ldr	r3, [pc, #528]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4013      	ands	r3, r2
 80054da:	d0f0      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80054dc:	4b80      	ldr	r3, [pc, #512]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	23c0      	movs	r3, #192	; 0xc0
 80054e2:	039b      	lsls	r3, r3, #14
 80054e4:	4013      	ands	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	23c0      	movs	r3, #192	; 0xc0
 80054ee:	039b      	lsls	r3, r3, #14
 80054f0:	4013      	ands	r3, r2
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d013      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	23c0      	movs	r3, #192	; 0xc0
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	401a      	ands	r2, r3
 8005502:	23c0      	movs	r3, #192	; 0xc0
 8005504:	029b      	lsls	r3, r3, #10
 8005506:	429a      	cmp	r2, r3
 8005508:	d10a      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800550a:	4b75      	ldr	r3, [pc, #468]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	401a      	ands	r2, r3
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	029b      	lsls	r3, r3, #10
 8005518:	429a      	cmp	r2, r3
 800551a:	d101      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0da      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005520:	4b6f      	ldr	r3, [pc, #444]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005524:	23c0      	movs	r3, #192	; 0xc0
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d03b      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	23c0      	movs	r3, #192	; 0xc0
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	4013      	ands	r3, r2
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d033      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2220      	movs	r2, #32
 8005548:	4013      	ands	r3, r2
 800554a:	d02e      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800554c:	4b64      	ldr	r3, [pc, #400]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	4a65      	ldr	r2, [pc, #404]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005552:	4013      	ands	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005556:	4b62      	ldr	r3, [pc, #392]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800555a:	4b61      	ldr	r3, [pc, #388]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800555c:	2180      	movs	r1, #128	; 0x80
 800555e:	0309      	lsls	r1, r1, #12
 8005560:	430a      	orrs	r2, r1
 8005562:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005564:	4b5e      	ldr	r3, [pc, #376]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005568:	4b5d      	ldr	r3, [pc, #372]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556a:	4960      	ldr	r1, [pc, #384]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800556c:	400a      	ands	r2, r1
 800556e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005570:	4b5b      	ldr	r3, [pc, #364]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4013      	ands	r3, r2
 800557e:	d014      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fe fa10 	bl	80039a4 <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005588:	e009      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fe fa0b 	bl	80039a4 <HAL_GetTick>
 800558e:	0002      	movs	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	4a56      	ldr	r2, [pc, #344]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e09b      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800559e:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d0ef      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	23c0      	movs	r3, #192	; 0xc0
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	401a      	ands	r2, r3
 80055b4:	23c0      	movs	r3, #192	; 0xc0
 80055b6:	029b      	lsls	r3, r3, #10
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d10c      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80055bc:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a4c      	ldr	r2, [pc, #304]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	0019      	movs	r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	23c0      	movs	r3, #192	; 0xc0
 80055cc:	039b      	lsls	r3, r3, #14
 80055ce:	401a      	ands	r2, r3
 80055d0:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	4b42      	ldr	r3, [pc, #264]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	23c0      	movs	r3, #192	; 0xc0
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	401a      	ands	r2, r3
 80055e4:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ea:	2317      	movs	r3, #23
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f4:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f8:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055fa:	493f      	ldr	r1, [pc, #252]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	4013      	ands	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800560a:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	2203      	movs	r2, #3
 8005610:	4393      	bics	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800561a:	430a      	orrs	r2, r1
 800561c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2202      	movs	r2, #2
 8005624:	4013      	ands	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005628:	4b2d      	ldr	r3, [pc, #180]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	220c      	movs	r2, #12
 800562e:	4393      	bics	r3, r2
 8005630:	0019      	movs	r1, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005638:	430a      	orrs	r2, r1
 800563a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2204      	movs	r2, #4
 8005642:	4013      	ands	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005646:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	4a2c      	ldr	r2, [pc, #176]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800564c:	4013      	ands	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005656:	430a      	orrs	r2, r1
 8005658:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2208      	movs	r2, #8
 8005660:	4013      	ands	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005664:	4b1e      	ldr	r3, [pc, #120]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	4a25      	ldr	r2, [pc, #148]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005674:	430a      	orrs	r2, r1
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4013      	ands	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800568a:	4013      	ands	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005694:	430a      	orrs	r2, r1
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2240      	movs	r2, #64	; 0x40
 800569e:	4013      	ands	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056b2:	430a      	orrs	r2, r1
 80056b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	4013      	ands	r3, r2
 80056be:	d009      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c4:	4a10      	ldr	r2, [pc, #64]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056d0:	430a      	orrs	r2, r1
 80056d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	b006      	add	sp, #24
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40007000 	.word	0x40007000
 80056e8:	fffcffff 	.word	0xfffcffff
 80056ec:	fff7ffff 	.word	0xfff7ffff
 80056f0:	00001388 	.word	0x00001388
 80056f4:	ffcfffff 	.word	0xffcfffff
 80056f8:	efffffff 	.word	0xefffffff
 80056fc:	fffff3ff 	.word	0xfffff3ff
 8005700:	ffffcfff 	.word	0xffffcfff
 8005704:	fbffffff 	.word	0xfbffffff
 8005708:	fff3ffff 	.word	0xfff3ffff

0800570c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e08e      	b.n	800583c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2221      	movs	r2, #33	; 0x21
 8005722:	5c9b      	ldrb	r3, [r3, r2]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d107      	bne.n	800573a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	2100      	movs	r1, #0
 8005730:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	0018      	movs	r0, r3
 8005736:	f7fd fd8d 	bl	8003254 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2221      	movs	r2, #33	; 0x21
 800573e:	2102      	movs	r1, #2
 8005740:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	22ca      	movs	r2, #202	; 0xca
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2253      	movs	r2, #83	; 0x53
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fc5c 	bl	8006012 <RTC_EnterInitMode>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d009      	beq.n	8005772 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2221      	movs	r2, #33	; 0x21
 800576a:	2104      	movs	r1, #4
 800576c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e064      	b.n	800583c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4931      	ldr	r1, [pc, #196]	; (8005844 <HAL_RTC_Init+0x138>)
 800577e:	400a      	ands	r2, r1
 8005780:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68d2      	ldr	r2, [r2, #12]
 80057a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6919      	ldr	r1, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2180      	movs	r1, #128	; 0x80
 80057ca:	438a      	bics	r2, r1
 80057cc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2103      	movs	r1, #3
 80057da:	438a      	bics	r2, r1
 80057dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2220      	movs	r2, #32
 80057fe:	4013      	ands	r3, r2
 8005800:	d113      	bne.n	800582a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0018      	movs	r0, r3
 8005806:	f000 fbdd 	bl	8005fc4 <HAL_RTC_WaitForSynchro>
 800580a:	1e03      	subs	r3, r0, #0
 800580c:	d00d      	beq.n	800582a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	22ff      	movs	r2, #255	; 0xff
 8005814:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2221      	movs	r2, #33	; 0x21
 800581a:	2104      	movs	r1, #4
 800581c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	2100      	movs	r1, #0
 8005824:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e008      	b.n	800583c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	22ff      	movs	r2, #255	; 0xff
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2221      	movs	r2, #33	; 0x21
 8005836:	2101      	movs	r1, #1
 8005838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800583a:	2300      	movs	r3, #0
  }
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b002      	add	sp, #8
 8005842:	bd80      	pop	{r7, pc}
 8005844:	ff8fffbf 	.word	0xff8fffbf

08005848 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_RTC_SetTime+0x1a>
 800585e:	2302      	movs	r3, #2
 8005860:	e0ad      	b.n	80059be <HAL_RTC_SetTime+0x176>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	2101      	movs	r1, #1
 8005868:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2221      	movs	r2, #33	; 0x21
 800586e:	2102      	movs	r1, #2
 8005870:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d125      	bne.n	80058c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	4013      	ands	r3, r2
 8005882:	d102      	bne.n	800588a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	0018      	movs	r0, r3
 8005890:	f000 fbe9 	bl	8006066 <RTC_ByteToBcd2>
 8005894:	0003      	movs	r3, r0
 8005896:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	0018      	movs	r0, r3
 800589e:	f000 fbe2 	bl	8006066 <RTC_ByteToBcd2>
 80058a2:	0003      	movs	r3, r0
 80058a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058a6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	789b      	ldrb	r3, [r3, #2]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 fbda 	bl	8006066 <RTC_ByteToBcd2>
 80058b2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80058b4:	0022      	movs	r2, r4
 80058b6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e017      	b.n	80058f4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	4013      	ands	r3, r2
 80058ce:	d102      	bne.n	80058d6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058e2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80058e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	22ca      	movs	r2, #202	; 0xca
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2253      	movs	r2, #83	; 0x53
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	0018      	movs	r0, r3
 8005908:	f000 fb83 	bl	8006012 <RTC_EnterInitMode>
 800590c:	1e03      	subs	r3, r0, #0
 800590e:	d00d      	beq.n	800592c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2221      	movs	r2, #33	; 0x21
 800591c:	2104      	movs	r1, #4
 800591e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	2100      	movs	r1, #0
 8005926:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e048      	b.n	80059be <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4925      	ldr	r1, [pc, #148]	; (80059c8 <HAL_RTC_SetTime+0x180>)
 8005934:	400a      	ands	r2, r1
 8005936:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4922      	ldr	r1, [pc, #136]	; (80059cc <HAL_RTC_SetTime+0x184>)
 8005944:	400a      	ands	r2, r1
 8005946:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	431a      	orrs	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	438a      	bics	r2, r1
 800596e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2220      	movs	r2, #32
 8005978:	4013      	ands	r3, r2
 800597a:	d113      	bne.n	80059a4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	0018      	movs	r0, r3
 8005980:	f000 fb20 	bl	8005fc4 <HAL_RTC_WaitForSynchro>
 8005984:	1e03      	subs	r3, r0, #0
 8005986:	d00d      	beq.n	80059a4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2221      	movs	r2, #33	; 0x21
 8005994:	2104      	movs	r1, #4
 8005996:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	2100      	movs	r1, #0
 800599e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e00c      	b.n	80059be <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2221      	movs	r2, #33	; 0x21
 80059b0:	2101      	movs	r1, #1
 80059b2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	2100      	movs	r1, #0
 80059ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
  }
}
 80059be:	0018      	movs	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b007      	add	sp, #28
 80059c4:	bd90      	pop	{r4, r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	007f7f7f 	.word	0x007f7f7f
 80059cc:	fffbffff 	.word	0xfffbffff

080059d0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	045b      	lsls	r3, r3, #17
 80059ee:	0c5a      	lsrs	r2, r3, #17
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <HAL_RTC_GetTime+0xb4>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	223f      	movs	r2, #63	; 0x3f
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	227f      	movs	r2, #127	; 0x7f
 8005a18:	4013      	ands	r3, r2
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	227f      	movs	r2, #127	; 0x7f
 8005a26:	4013      	ands	r3, r2
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2240      	movs	r2, #64	; 0x40
 8005a36:	4013      	ands	r3, r2
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11a      	bne.n	8005a7a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 fb35 	bl	80060b8 <RTC_Bcd2ToByte>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	001a      	movs	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 fb2c 	bl	80060b8 <RTC_Bcd2ToByte>
 8005a60:	0003      	movs	r3, r0
 8005a62:	001a      	movs	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	789b      	ldrb	r3, [r3, #2]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 fb23 	bl	80060b8 <RTC_Bcd2ToByte>
 8005a72:	0003      	movs	r3, r0
 8005a74:	001a      	movs	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b006      	add	sp, #24
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	007f7f7f 	.word	0x007f7f7f

08005a88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	5c9b      	ldrb	r3, [r3, r2]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RTC_SetDate+0x1a>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e099      	b.n	8005bd6 <HAL_RTC_SetDate+0x14e>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2221      	movs	r2, #33	; 0x21
 8005aae:	2102      	movs	r1, #2
 8005ab0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_RTC_SetDate+0x4e>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	001a      	movs	r2, r3
 8005abe:	2310      	movs	r3, #16
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	4393      	bics	r3, r2
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	330a      	adds	r3, #10
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11c      	bne.n	8005b16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 fac0 	bl	8006066 <RTC_ByteToBcd2>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 fab9 	bl	8006066 <RTC_ByteToBcd2>
 8005af4:	0003      	movs	r3, r0
 8005af6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005af8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	789b      	ldrb	r3, [r3, #2]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f000 fab1 	bl	8006066 <RTC_ByteToBcd2>
 8005b04:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b06:	0022      	movs	r2, r4
 8005b08:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e00e      	b.n	8005b34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b22:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ca      	movs	r2, #202	; 0xca
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2253      	movs	r2, #83	; 0x53
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 fa63 	bl	8006012 <RTC_EnterInitMode>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d00d      	beq.n	8005b6c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2221      	movs	r2, #33	; 0x21
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e034      	b.n	8005bd6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	491b      	ldr	r1, [pc, #108]	; (8005be0 <HAL_RTC_SetDate+0x158>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	438a      	bics	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	4013      	ands	r3, r2
 8005b92:	d113      	bne.n	8005bbc <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f000 fa14 	bl	8005fc4 <HAL_RTC_WaitForSynchro>
 8005b9c:	1e03      	subs	r3, r0, #0
 8005b9e:	d00d      	beq.n	8005bbc <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	22ff      	movs	r2, #255	; 0xff
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2221      	movs	r2, #33	; 0x21
 8005bac:	2104      	movs	r1, #4
 8005bae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e00c      	b.n	8005bd6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2221      	movs	r2, #33	; 0x21
 8005bc8:	2101      	movs	r1, #1
 8005bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
  }
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b007      	add	sp, #28
 8005bdc:	bd90      	pop	{r4, r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	00ffff3f 	.word	0x00ffff3f

08005be4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <HAL_RTC_GetDate+0x98>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	221f      	movs	r2, #31
 8005c0e:	4013      	ands	r3, r2
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	223f      	movs	r2, #63	; 0x3f
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	0b5b      	lsrs	r3, r3, #13
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2207      	movs	r2, #7
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d11a      	bne.n	8005c70 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	78db      	ldrb	r3, [r3, #3]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 fa3a 	bl	80060b8 <RTC_Bcd2ToByte>
 8005c44:	0003      	movs	r3, r0
 8005c46:	001a      	movs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 fa31 	bl	80060b8 <RTC_Bcd2ToByte>
 8005c56:	0003      	movs	r3, r0
 8005c58:	001a      	movs	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	789b      	ldrb	r3, [r3, #2]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f000 fa28 	bl	80060b8 <RTC_Bcd2ToByte>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	0018      	movs	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b006      	add	sp, #24
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	00ffff3f 	.word	0x00ffff3f

08005c80 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	5c9b      	ldrb	r3, [r3, r2]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_RTC_SetAlarm_IT+0x1a>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e130      	b.n	8005efc <HAL_RTC_SetAlarm_IT+0x27c>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	; 0x21
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d136      	bne.n	8005d1e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2240      	movs	r2, #64	; 0x40
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d102      	bne.n	8005cc2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 f9cd 	bl	8006066 <RTC_ByteToBcd2>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 f9c6 	bl	8006066 <RTC_ByteToBcd2>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cde:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	789b      	ldrb	r3, [r3, #2]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 f9be 	bl	8006066 <RTC_ByteToBcd2>
 8005cea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005cec:	0022      	movs	r2, r4
 8005cee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	78db      	ldrb	r3, [r3, #3]
 8005cf4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 f9b0 	bl	8006066 <RTC_ByteToBcd2>
 8005d06:	0003      	movs	r3, r0
 8005d08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d0a:	0022      	movs	r2, r4
 8005d0c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e022      	b.n	8005d64 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4013      	ands	r3, r2
 8005d28:	d102      	bne.n	8005d30 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d3c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005d4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2120      	movs	r1, #32
 8005d50:	5c5b      	ldrb	r3, [r3, r1]
 8005d52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	22ca      	movs	r2, #202	; 0xca
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2253      	movs	r2, #83	; 0x53
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d14e      	bne.n	8005e2a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	495b      	ldr	r1, [pc, #364]	; (8005f04 <HAL_RTC_SetAlarm_IT+0x284>)
 8005d98:	400a      	ands	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	22ff      	movs	r2, #255	; 0xff
 8005da4:	401a      	ands	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4957      	ldr	r1, [pc, #348]	; (8005f08 <HAL_RTC_SetAlarm_IT+0x288>)
 8005dac:	430a      	orrs	r2, r1
 8005dae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005db0:	f7fd fdf8 	bl	80039a4 <HAL_GetTick>
 8005db4:	0003      	movs	r3, r0
 8005db6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005db8:	e016      	b.n	8005de8 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dba:	f7fd fdf3 	bl	80039a4 <HAL_GetTick>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	23fa      	movs	r3, #250	; 0xfa
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d90d      	bls.n	8005de8 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	22ff      	movs	r2, #255	; 0xff
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2221      	movs	r2, #33	; 0x21
 8005dd8:	2103      	movs	r1, #3
 8005dda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	2100      	movs	r1, #0
 8005de2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e089      	b.n	8005efc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	d0e2      	beq.n	8005dba <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	0049      	lsls	r1, r1, #1
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2180      	movs	r1, #128	; 0x80
 8005e22:	0149      	lsls	r1, r1, #5
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	e04d      	b.n	8005ec6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4935      	ldr	r1, [pc, #212]	; (8005f0c <HAL_RTC_SetAlarm_IT+0x28c>)
 8005e36:	400a      	ands	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	22ff      	movs	r2, #255	; 0xff
 8005e42:	401a      	ands	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4931      	ldr	r1, [pc, #196]	; (8005f10 <HAL_RTC_SetAlarm_IT+0x290>)
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e4e:	f7fd fda9 	bl	80039a4 <HAL_GetTick>
 8005e52:	0003      	movs	r3, r0
 8005e54:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005e56:	e016      	b.n	8005e86 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e58:	f7fd fda4 	bl	80039a4 <HAL_GetTick>
 8005e5c:	0002      	movs	r2, r0
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	23fa      	movs	r3, #250	; 0xfa
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90d      	bls.n	8005e86 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	22ff      	movs	r2, #255	; 0xff
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2221      	movs	r2, #33	; 0x21
 8005e76:	2103      	movs	r1, #3
 8005e78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e03a      	b.n	8005efc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d0e2      	beq.n	8005e58 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2180      	movs	r1, #128	; 0x80
 8005eae:	0089      	lsls	r1, r1, #2
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	0189      	lsls	r1, r1, #6
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005ec6:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <HAL_RTC_SetAlarm_IT+0x294>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <HAL_RTC_SetAlarm_IT+0x294>)
 8005ecc:	2180      	movs	r1, #128	; 0x80
 8005ece:	0289      	lsls	r1, r1, #10
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <HAL_RTC_SetAlarm_IT+0x294>)
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <HAL_RTC_SetAlarm_IT+0x294>)
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	0289      	lsls	r1, r1, #10
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	22ff      	movs	r2, #255	; 0xff
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2221      	movs	r2, #33	; 0x21
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b009      	add	sp, #36	; 0x24
 8005f02:	bd90      	pop	{r4, r7, pc}
 8005f04:	fffffeff 	.word	0xfffffeff
 8005f08:	fffffe7f 	.word	0xfffffe7f
 8005f0c:	fffffdff 	.word	0xfffffdff
 8005f10:	fffffd7f 	.word	0xfffffd7f
 8005f14:	40010400 	.word	0x40010400

08005f18 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	015b      	lsls	r3, r3, #5
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	d014      	beq.n	8005f58 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d00d      	beq.n	8005f58 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 f838 	bl	8005fb4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	22ff      	movs	r2, #255	; 0xff
 8005f4c:	401a      	ands	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4915      	ldr	r1, [pc, #84]	; (8005fa8 <HAL_RTC_AlarmIRQHandler+0x90>)
 8005f54:	430a      	orrs	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	019b      	lsls	r3, r3, #6
 8005f62:	4013      	ands	r3, r2
 8005f64:	d014      	beq.n	8005f90 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4013      	ands	r3, r2
 8005f72:	d00d      	beq.n	8005f90 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 fa0e 	bl	8006398 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	22ff      	movs	r2, #255	; 0xff
 8005f84:	401a      	ands	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4908      	ldr	r1, [pc, #32]	; (8005fac <HAL_RTC_AlarmIRQHandler+0x94>)
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <HAL_RTC_AlarmIRQHandler+0x98>)
 8005f92:	2280      	movs	r2, #128	; 0x80
 8005f94:	0292      	lsls	r2, r2, #10
 8005f96:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2221      	movs	r2, #33	; 0x21
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	5499      	strb	r1, [r3, r2]
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	fffffe7f 	.word	0xfffffe7f
 8005fac:	fffffd7f 	.word	0xfffffd7f
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	21a0      	movs	r1, #160	; 0xa0
 8005fd8:	438a      	bics	r2, r1
 8005fda:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005fdc:	f7fd fce2 	bl	80039a4 <HAL_GetTick>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fe6:	f7fd fcdd 	bl	80039a4 <HAL_GetTick>
 8005fea:	0002      	movs	r2, r0
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	23fa      	movs	r3, #250	; 0xfa
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d901      	bls.n	8005ffc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e006      	b.n	800600a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	4013      	ands	r3, r2
 8006006:	d0ee      	beq.n	8005fe6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b004      	add	sp, #16
 8006010:	bd80      	pop	{r7, pc}

08006012 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2240      	movs	r2, #64	; 0x40
 8006022:	4013      	ands	r3, r2
 8006024:	d11a      	bne.n	800605c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2201      	movs	r2, #1
 800602c:	4252      	negs	r2, r2
 800602e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006030:	f7fd fcb8 	bl	80039a4 <HAL_GetTick>
 8006034:	0003      	movs	r3, r0
 8006036:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006038:	e00a      	b.n	8006050 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800603a:	f7fd fcb3 	bl	80039a4 <HAL_GetTick>
 800603e:	0002      	movs	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	23fa      	movs	r3, #250	; 0xfa
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	429a      	cmp	r2, r3
 800604a:	d901      	bls.n	8006050 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e006      	b.n	800605e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	4013      	ands	r3, r2
 800605a:	d0ee      	beq.n	800603a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b004      	add	sp, #16
 8006064:	bd80      	pop	{r7, pc}

08006066 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	0002      	movs	r2, r0
 800606e:	1dfb      	adds	r3, r7, #7
 8006070:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006076:	230b      	movs	r3, #11
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	1dfa      	adds	r2, r7, #7
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006080:	e008      	b.n	8006094 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006088:	220b      	movs	r2, #11
 800608a:	18bb      	adds	r3, r7, r2
 800608c:	18ba      	adds	r2, r7, r2
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	3a0a      	subs	r2, #10
 8006092:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006094:	230b      	movs	r3, #11
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d8f1      	bhi.n	8006082 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	230b      	movs	r3, #11
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b2db      	uxtb	r3, r3
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b004      	add	sp, #16
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	0002      	movs	r2, r0
 80060c0:	1dfb      	adds	r3, r7, #7
 80060c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80060c4:	1dfb      	adds	r3, r7, #7
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	001a      	movs	r2, r3
 80060ce:	0013      	movs	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	1dfb      	adds	r3, r7, #7
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	210f      	movs	r1, #15
 80060e2:	400b      	ands	r3, r1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	b2db      	uxtb	r3, r3
}
 80060ea:	0018      	movs	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b004      	add	sp, #16
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800610a:	2302      	movs	r3, #2
 800610c:	e0ad      	b.n	800626a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	2101      	movs	r1, #1
 8006114:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2221      	movs	r2, #33	; 0x21
 800611a:	2102      	movs	r1, #2
 800611c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	22ca      	movs	r2, #202	; 0xca
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2253      	movs	r2, #83	; 0x53
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4013      	ands	r3, r2
 800613a:	d021      	beq.n	8006180 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 800613c:	f7fd fc32 	bl	80039a4 <HAL_GetTick>
 8006140:	0003      	movs	r3, r0
 8006142:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006144:	e016      	b.n	8006174 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006146:	f7fd fc2d 	bl	80039a4 <HAL_GetTick>
 800614a:	0002      	movs	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	23fa      	movs	r3, #250	; 0xfa
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	429a      	cmp	r2, r3
 8006156:	d90d      	bls.n	8006174 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2221      	movs	r2, #33	; 0x21
 8006164:	2103      	movs	r1, #3
 8006166:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	2100      	movs	r1, #0
 800616e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e07a      	b.n	800626a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2204      	movs	r2, #4
 800617c:	4013      	ands	r3, r2
 800617e:	d1e2      	bne.n	8006146 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	493a      	ldr	r1, [pc, #232]	; (8006274 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800618c:	400a      	ands	r2, r1
 800618e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	401a      	ands	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4936      	ldr	r1, [pc, #216]	; (8006278 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80061a0:	430a      	orrs	r2, r1
 80061a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061a4:	f7fd fbfe 	bl	80039a4 <HAL_GetTick>
 80061a8:	0003      	movs	r3, r0
 80061aa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80061ac:	e016      	b.n	80061dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061ae:	f7fd fbf9 	bl	80039a4 <HAL_GetTick>
 80061b2:	0002      	movs	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	23fa      	movs	r3, #250	; 0xfa
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	429a      	cmp	r2, r3
 80061be:	d90d      	bls.n	80061dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2221      	movs	r2, #33	; 0x21
 80061cc:	2103      	movs	r1, #3
 80061ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	2100      	movs	r1, #0
 80061d6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e046      	b.n	800626a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2204      	movs	r2, #4
 80061e4:	4013      	ands	r3, r2
 80061e6:	d0e2      	beq.n	80061ae <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2107      	movs	r1, #7
 80061fc:	438a      	bics	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6899      	ldr	r1, [r3, #8]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	430a      	orrs	r2, r1
 800620e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b19      	ldr	r3, [pc, #100]	; (800627c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006216:	2180      	movs	r1, #128	; 0x80
 8006218:	0349      	lsls	r1, r1, #13
 800621a:	430a      	orrs	r2, r1
 800621c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800621e:	4b17      	ldr	r3, [pc, #92]	; (800627c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	4b16      	ldr	r3, [pc, #88]	; (800627c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006224:	2180      	movs	r1, #128	; 0x80
 8006226:	0349      	lsls	r1, r1, #13
 8006228:	430a      	orrs	r2, r1
 800622a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	01c9      	lsls	r1, r1, #7
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	00c9      	lsls	r1, r1, #3
 800624c:	430a      	orrs	r2, r1
 800624e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2221      	movs	r2, #33	; 0x21
 800625c:	2101      	movs	r1, #1
 800625e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	0018      	movs	r0, r3
 800626c:	46bd      	mov	sp, r7
 800626e:	b006      	add	sp, #24
 8006270:	bd80      	pop	{r7, pc}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	fffffbff 	.word	0xfffffbff
 8006278:	fffffb7f 	.word	0xfffffb7f
 800627c:	40010400 	.word	0x40010400

08006280 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	5c9b      	ldrb	r3, [r3, r2]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006292:	2302      	movs	r3, #2
 8006294:	e04e      	b.n	8006334 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	2101      	movs	r1, #1
 800629c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2221      	movs	r2, #33	; 0x21
 80062a2:	2102      	movs	r1, #2
 80062a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	22ca      	movs	r2, #202	; 0xca
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2253      	movs	r2, #83	; 0x53
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	491e      	ldr	r1, [pc, #120]	; (800633c <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 80062c2:	400a      	ands	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	491b      	ldr	r1, [pc, #108]	; (8006340 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80062d2:	400a      	ands	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80062d6:	f7fd fb65 	bl	80039a4 <HAL_GetTick>
 80062da:	0003      	movs	r3, r0
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062de:	e016      	b.n	800630e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062e0:	f7fd fb60 	bl	80039a4 <HAL_GetTick>
 80062e4:	0002      	movs	r2, r0
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	23fa      	movs	r3, #250	; 0xfa
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90d      	bls.n	800630e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	22ff      	movs	r2, #255	; 0xff
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2221      	movs	r2, #33	; 0x21
 80062fe:	2103      	movs	r1, #3
 8006300:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	2100      	movs	r1, #0
 8006308:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e012      	b.n	8006334 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2204      	movs	r2, #4
 8006316:	4013      	ands	r3, r2
 8006318:	d0e2      	beq.n	80062e0 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	22ff      	movs	r2, #255	; 0xff
 8006320:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2221      	movs	r2, #33	; 0x21
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	2100      	movs	r1, #0
 8006330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b004      	add	sp, #16
 800633a:	bd80      	pop	{r7, pc}
 800633c:	fffffbff 	.word	0xfffffbff
 8006340:	ffffbfff 	.word	0xffffbfff

08006344 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4013      	ands	r3, r2
 8006358:	d00d      	beq.n	8006376 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0018      	movs	r0, r3
 800635e:	f013 fcbb 	bl	8019cd8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	22ff      	movs	r2, #255	; 0xff
 800636a:	401a      	ands	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4907      	ldr	r1, [pc, #28]	; (8006390 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8006372:	430a      	orrs	r2, r1
 8006374:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8006378:	2280      	movs	r2, #128	; 0x80
 800637a:	0352      	lsls	r2, r2, #13
 800637c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2221      	movs	r2, #33	; 0x21
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	fffffb7f 	.word	0xfffffb7f
 8006394:	40010400 	.word	0x40010400

08006398 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80063a0:	46c0      	nop			; (mov r8, r8)
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e059      	b.n	800646e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2251      	movs	r2, #81	; 0x51
 80063c4:	5c9b      	ldrb	r3, [r3, r2]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d107      	bne.n	80063dc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2250      	movs	r2, #80	; 0x50
 80063d0:	2100      	movs	r1, #0
 80063d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7fc ff94 	bl	8003304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2251      	movs	r2, #81	; 0x51
 80063e0:	2102      	movs	r1, #2
 80063e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2140      	movs	r1, #64	; 0x40
 80063f0:	438a      	bics	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	400b      	ands	r3, r1
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	431a      	orrs	r2, r3
 8006428:	0011      	movs	r1, r2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	2204      	movs	r2, #4
 800643e:	4013      	ands	r3, r2
 8006440:	0019      	movs	r1, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4907      	ldr	r1, [pc, #28]	; (8006478 <HAL_SPI_Init+0xd0>)
 800645a:	400a      	ands	r2, r1
 800645c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2251      	movs	r2, #81	; 0x51
 8006468:	2101      	movs	r1, #1
 800646a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b002      	add	sp, #8
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	fffff7ff 	.word	0xfffff7ff

0800647c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08c      	sub	sp, #48	; 0x30
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	001a      	movs	r2, r3
 800648a:	1cbb      	adds	r3, r7, #2
 800648c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800648e:	2301      	movs	r3, #1
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006492:	232b      	movs	r3, #43	; 0x2b
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2250      	movs	r2, #80	; 0x50
 800649e:	5c9b      	ldrb	r3, [r3, r2]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x2c>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e1a1      	b.n	80067ec <HAL_SPI_TransmitReceive+0x370>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2250      	movs	r2, #80	; 0x50
 80064ac:	2101      	movs	r1, #1
 80064ae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b0:	f7fd fa78 	bl	80039a4 <HAL_GetTick>
 80064b4:	0003      	movs	r3, r0
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064b8:	2023      	movs	r0, #35	; 0x23
 80064ba:	183b      	adds	r3, r7, r0
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	2151      	movs	r1, #81	; 0x51
 80064c0:	5c52      	ldrb	r2, [r2, r1]
 80064c2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064ca:	231a      	movs	r3, #26
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	1cba      	adds	r2, r7, #2
 80064d0:	8812      	ldrh	r2, [r2, #0]
 80064d2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064d4:	183b      	adds	r3, r7, r0
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d012      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x86>
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	2382      	movs	r3, #130	; 0x82
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d108      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x7c>
 80064ee:	2323      	movs	r3, #35	; 0x23
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d004      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80064f8:	232b      	movs	r3, #43	; 0x2b
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	2202      	movs	r2, #2
 80064fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8006500:	e169      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d006      	beq.n	8006516 <HAL_SPI_TransmitReceive+0x9a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_SPI_TransmitReceive+0x9a>
 800650e:	1cbb      	adds	r3, r7, #2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8006516:	232b      	movs	r3, #43	; 0x2b
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
    goto error;
 800651e:	e15a      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2251      	movs	r2, #81	; 0x51
 8006524:	5c9b      	ldrb	r3, [r3, r2]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b04      	cmp	r3, #4
 800652a:	d003      	beq.n	8006534 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2251      	movs	r2, #81	; 0x51
 8006530:	2105      	movs	r1, #5
 8006532:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1cba      	adds	r2, r7, #2
 8006544:	8812      	ldrh	r2, [r2, #0]
 8006546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1cba      	adds	r2, r7, #2
 800654c:	8812      	ldrh	r2, [r2, #0]
 800654e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1cba      	adds	r2, r7, #2
 800655a:	8812      	ldrh	r2, [r2, #0]
 800655c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1cba      	adds	r2, r7, #2
 8006562:	8812      	ldrh	r2, [r2, #0]
 8006564:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2240      	movs	r2, #64	; 0x40
 800657a:	4013      	ands	r3, r2
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d007      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2140      	movs	r1, #64	; 0x40
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	429a      	cmp	r2, r3
 800659a:	d000      	beq.n	800659e <HAL_SPI_TransmitReceive+0x122>
 800659c:	e07a      	b.n	8006694 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <HAL_SPI_TransmitReceive+0x134>
 80065a6:	231a      	movs	r3, #26
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d166      	bne.n	800667e <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	881a      	ldrh	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d4:	e053      	b.n	800667e <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2202      	movs	r2, #2
 80065de:	4013      	ands	r3, r2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d11b      	bne.n	800661c <HAL_SPI_TransmitReceive+0x1a0>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <HAL_SPI_TransmitReceive+0x1a0>
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d113      	bne.n	800661c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	881a      	ldrh	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	1c9a      	adds	r2, r3, #2
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2201      	movs	r2, #1
 8006624:	4013      	ands	r3, r2
 8006626:	2b01      	cmp	r3, #1
 8006628:	d119      	bne.n	800665e <HAL_SPI_TransmitReceive+0x1e2>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d014      	beq.n	800665e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	b292      	uxth	r2, r2
 8006640:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	1c9a      	adds	r2, r3, #2
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800665a:	2301      	movs	r3, #1
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800665e:	f7fd f9a1 	bl	80039a4 <HAL_GetTick>
 8006662:	0002      	movs	r2, r0
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800666a:	429a      	cmp	r2, r3
 800666c:	d807      	bhi.n	800667e <HAL_SPI_TransmitReceive+0x202>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	3301      	adds	r3, #1
 8006672:	d004      	beq.n	800667e <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8006674:	232b      	movs	r3, #43	; 0x2b
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2203      	movs	r2, #3
 800667a:	701a      	strb	r2, [r3, #0]
        goto error;
 800667c:	e0ab      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1a6      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x15a>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1a1      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x15a>
 8006692:	e07f      	b.n	8006794 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x22c>
 800669c:	231a      	movs	r3, #26
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d000      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x22c>
 80066a6:	e06b      	b.n	8006780 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ce:	e057      	b.n	8006780 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2202      	movs	r2, #2
 80066d8:	4013      	ands	r3, r2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d11c      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x29c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d017      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x29c>
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d114      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2201      	movs	r2, #1
 8006720:	4013      	ands	r3, r2
 8006722:	2b01      	cmp	r3, #1
 8006724:	d119      	bne.n	800675a <HAL_SPI_TransmitReceive+0x2de>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d014      	beq.n	800675a <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006756:	2301      	movs	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800675a:	f7fd f923 	bl	80039a4 <HAL_GetTick>
 800675e:	0002      	movs	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006766:	429a      	cmp	r2, r3
 8006768:	d802      	bhi.n	8006770 <HAL_SPI_TransmitReceive+0x2f4>
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	3301      	adds	r3, #1
 800676e:	d102      	bne.n	8006776 <HAL_SPI_TransmitReceive+0x2fa>
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8006776:	232b      	movs	r3, #43	; 0x2b
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	2203      	movs	r2, #3
 800677c:	701a      	strb	r2, [r3, #0]
        goto error;
 800677e:	e02a      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1a2      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x254>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d19d      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	0018      	movs	r0, r3
 800679c:	f000 f89a 	bl	80068d4 <SPI_EndRxTxTransaction>
 80067a0:	1e03      	subs	r3, r0, #0
 80067a2:	d007      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80067a4:	232b      	movs	r3, #43	; 0x2b
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067b2:	e010      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	e000      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80067d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2251      	movs	r2, #81	; 0x51
 80067da:	2101      	movs	r1, #1
 80067dc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2250      	movs	r2, #80	; 0x50
 80067e2:	2100      	movs	r1, #0
 80067e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80067e6:	232b      	movs	r3, #43	; 0x2b
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	781b      	ldrb	r3, [r3, #0]
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b00c      	add	sp, #48	; 0x30
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	1dfb      	adds	r3, r7, #7
 8006802:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006804:	e050      	b.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	d04d      	beq.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800680c:	f7fd f8ca 	bl	80039a4 <HAL_GetTick>
 8006810:	0002      	movs	r2, r0
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d902      	bls.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d142      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	21e0      	movs	r1, #224	; 0xe0
 800682e:	438a      	bics	r2, r1
 8006830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	2382      	movs	r3, #130	; 0x82
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	429a      	cmp	r2, r3
 800683c:	d113      	bne.n	8006866 <SPI_WaitFlagStateUntilTimeout+0x72>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	2380      	movs	r3, #128	; 0x80
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	429a      	cmp	r2, r3
 8006848:	d005      	beq.n	8006856 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	429a      	cmp	r2, r3
 8006854:	d107      	bne.n	8006866 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2140      	movs	r1, #64	; 0x40
 8006862:	438a      	bics	r2, r1
 8006864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	019b      	lsls	r3, r3, #6
 800686e:	429a      	cmp	r2, r3
 8006870:	d110      	bne.n	8006894 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4914      	ldr	r1, [pc, #80]	; (80068d0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800687e:	400a      	ands	r2, r1
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2180      	movs	r1, #128	; 0x80
 800688e:	0189      	lsls	r1, r1, #6
 8006890:	430a      	orrs	r2, r1
 8006892:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2251      	movs	r2, #81	; 0x51
 8006898:	2101      	movs	r1, #1
 800689a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2250      	movs	r2, #80	; 0x50
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e00f      	b.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4013      	ands	r3, r2
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	425a      	negs	r2, r3
 80068b8:	4153      	adcs	r3, r2
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	001a      	movs	r2, r3
 80068be:	1dfb      	adds	r3, r7, #7
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d19f      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b004      	add	sp, #16
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	ffffdfff 	.word	0xffffdfff

080068d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	2382      	movs	r3, #130	; 0x82
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d112      	bne.n	8006912 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	0013      	movs	r3, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	f7ff ff7b 	bl	80067f4 <SPI_WaitFlagStateUntilTimeout>
 80068fe:	1e03      	subs	r3, r0, #0
 8006900:	d020      	beq.n	8006944 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	2220      	movs	r2, #32
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e019      	b.n	8006946 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2251      	movs	r2, #81	; 0x51
 8006916:	5c9b      	ldrb	r3, [r3, r2]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b05      	cmp	r3, #5
 800691c:	d112      	bne.n	8006944 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	0013      	movs	r3, r2
 8006928:	2200      	movs	r2, #0
 800692a:	2101      	movs	r1, #1
 800692c:	f7ff ff62 	bl	80067f4 <SPI_WaitFlagStateUntilTimeout>
 8006930:	1e03      	subs	r3, r0, #0
 8006932:	d007      	beq.n	8006944 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	2220      	movs	r2, #32
 800693a:	431a      	orrs	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e000      	b.n	8006946 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b004      	add	sp, #16
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e044      	b.n	80069ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2270      	movs	r2, #112	; 0x70
 800696e:	2100      	movs	r1, #0
 8006970:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f7fc ff11 	bl	800379c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2224      	movs	r2, #36	; 0x24
 800697e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2101      	movs	r1, #1
 800698c:	438a      	bics	r2, r1
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0018      	movs	r0, r3
 8006994:	f000 fa06 	bl	8006da4 <UART_SetConfig>
 8006998:	0003      	movs	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e024      	b.n	80069ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 fd2d 	bl	800740c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	490d      	ldr	r1, [pc, #52]	; (80069f4 <HAL_UART_Init+0xa4>)
 80069be:	400a      	ands	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	212a      	movs	r1, #42	; 0x2a
 80069ce:	438a      	bics	r2, r1
 80069d0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2101      	movs	r1, #1
 80069de:	430a      	orrs	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	0018      	movs	r0, r3
 80069e6:	f000 fdc5 	bl	8007574 <UART_CheckIdleState>
 80069ea:	0003      	movs	r3, r0
}
 80069ec:	0018      	movs	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	ffffb7ff 	.word	0xffffb7ff

080069f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	; 0x28
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	1dbb      	adds	r3, r7, #6
 8006a06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d000      	beq.n	8006a12 <HAL_UART_Transmit+0x1a>
 8006a10:	e094      	b.n	8006b3c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_UART_Transmit+0x28>
 8006a18:	1dbb      	adds	r3, r7, #6
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e08c      	b.n	8006b3e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	015b      	lsls	r3, r3, #5
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d109      	bne.n	8006a44 <HAL_UART_Transmit+0x4c>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d001      	beq.n	8006a44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e07c      	b.n	8006b3e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2270      	movs	r2, #112	; 0x70
 8006a48:	5c9b      	ldrb	r3, [r3, r2]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Transmit+0x5a>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e075      	b.n	8006b3e <HAL_UART_Transmit+0x146>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2270      	movs	r2, #112	; 0x70
 8006a56:	2101      	movs	r1, #1
 8006a58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2221      	movs	r2, #33	; 0x21
 8006a64:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a66:	f7fc ff9d 	bl	80039a4 <HAL_GetTick>
 8006a6a:	0003      	movs	r3, r0
 8006a6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1dba      	adds	r2, r7, #6
 8006a72:	2150      	movs	r1, #80	; 0x50
 8006a74:	8812      	ldrh	r2, [r2, #0]
 8006a76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1dba      	adds	r2, r7, #6
 8006a7c:	2152      	movs	r1, #82	; 0x52
 8006a7e:	8812      	ldrh	r2, [r2, #0]
 8006a80:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	015b      	lsls	r3, r3, #5
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d108      	bne.n	8006aa0 <HAL_UART_Transmit+0xa8>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e003      	b.n	8006aa8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006aa8:	e02c      	b.n	8006b04 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	0013      	movs	r3, r2
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	f000 fda2 	bl	8007600 <UART_WaitOnFlagUntilTimeout>
 8006abc:	1e03      	subs	r3, r0, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e03c      	b.n	8006b3e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	001a      	movs	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	05d2      	lsls	r2, r2, #23
 8006ad6:	0dd2      	lsrs	r2, r2, #23
 8006ad8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	3302      	adds	r3, #2
 8006ade:	61bb      	str	r3, [r7, #24]
 8006ae0:	e007      	b.n	8006af2 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2252      	movs	r2, #82	; 0x52
 8006af6:	5a9b      	ldrh	r3, [r3, r2]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b299      	uxth	r1, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2252      	movs	r2, #82	; 0x52
 8006b02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2252      	movs	r2, #82	; 0x52
 8006b08:	5a9b      	ldrh	r3, [r3, r2]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1cc      	bne.n	8006aaa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	0013      	movs	r3, r2
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2140      	movs	r1, #64	; 0x40
 8006b1e:	f000 fd6f 	bl	8007600 <UART_WaitOnFlagUntilTimeout>
 8006b22:	1e03      	subs	r3, r0, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e009      	b.n	8006b3e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2270      	movs	r2, #112	; 0x70
 8006b34:	2100      	movs	r1, #0
 8006b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e000      	b.n	8006b3e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
  }
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b008      	add	sp, #32
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	220f      	movs	r2, #15
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d112      	bne.n	8006b9c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2220      	movs	r2, #32
 8006b82:	4013      	ands	r3, r2
 8006b84:	d00a      	beq.n	8006b9c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d100      	bne.n	8006b90 <HAL_UART_IRQHandler+0x48>
 8006b8e:	e0f6      	b.n	8006d7e <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	0010      	movs	r0, r2
 8006b98:	4798      	blx	r3
      }
      return;
 8006b9a:	e0f0      	b.n	8006d7e <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d100      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x5c>
 8006ba2:	e0b8      	b.n	8006d16 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d105      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	2390      	movs	r3, #144	; 0x90
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	d100      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x70>
 8006bb6:	e0ae      	b.n	8006d16 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <HAL_UART_IRQHandler+0x96>
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2202      	movs	r2, #2
 8006be2:	4013      	ands	r3, r2
 8006be4:	d00d      	beq.n	8006c02 <HAL_UART_IRQHandler+0xba>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2201      	movs	r2, #1
 8006bea:	4013      	ands	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2204      	movs	r2, #4
 8006c06:	4013      	ands	r3, r2
 8006c08:	d00d      	beq.n	8006c26 <HAL_UART_IRQHandler+0xde>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2204      	movs	r2, #4
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1e:	2202      	movs	r2, #2
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d011      	beq.n	8006c52 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2220      	movs	r2, #32
 8006c32:	4013      	ands	r3, r2
 8006c34:	d103      	bne.n	8006c3e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c3c:	d009      	beq.n	8006c52 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2208      	movs	r2, #8
 8006c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d100      	bne.n	8006c5c <HAL_UART_IRQHandler+0x114>
 8006c5a:	e092      	b.n	8006d82 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	4013      	ands	r3, r2
 8006c62:	d00c      	beq.n	8006c7e <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2220      	movs	r2, #32
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d008      	beq.n	8006c7e <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	0010      	movs	r0, r2
 8006c7c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c82:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2240      	movs	r2, #64	; 0x40
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d003      	beq.n	8006c9a <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2208      	movs	r2, #8
 8006c96:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c98:	d033      	beq.n	8006d02 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 fcf9 	bl	8007694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2240      	movs	r2, #64	; 0x40
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d123      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2140      	movs	r1, #64	; 0x40
 8006cbc:	438a      	bics	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ccc:	4a30      	ldr	r2, [pc, #192]	; (8006d90 <HAL_UART_IRQHandler+0x248>)
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f7fd f9fd 	bl	80040d4 <HAL_DMA_Abort_IT>
 8006cda:	1e03      	subs	r3, r0, #0
 8006cdc:	d019      	beq.n	8006d12 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce8:	0018      	movs	r0, r3
 8006cea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	e011      	b.n	8006d12 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f012 fb51 	bl	8019398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf6:	e00c      	b.n	8006d12 <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f012 fb4c 	bl	8019398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d00:	e007      	b.n	8006d12 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f012 fb47 	bl	8019398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006d10:	e037      	b.n	8006d82 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d12:	46c0      	nop			; (mov r8, r8)
    return;
 8006d14:	e035      	b.n	8006d82 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	035b      	lsls	r3, r3, #13
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	2380      	movs	r3, #128	; 0x80
 8006d24:	03db      	lsls	r3, r3, #15
 8006d26:	4013      	ands	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2280      	movs	r2, #128	; 0x80
 8006d30:	0352      	lsls	r2, r2, #13
 8006d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	0018      	movs	r0, r3
 8006d38:	f012 fdfc 	bl	8019934 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d3c:	e024      	b.n	8006d88 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2280      	movs	r2, #128	; 0x80
 8006d42:	4013      	ands	r3, r2
 8006d44:	d00d      	beq.n	8006d62 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d017      	beq.n	8006d86 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	0010      	movs	r0, r2
 8006d5e:	4798      	blx	r3
    }
    return;
 8006d60:	e011      	b.n	8006d86 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2240      	movs	r2, #64	; 0x40
 8006d66:	4013      	ands	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_UART_IRQHandler+0x240>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	4013      	ands	r3, r2
 8006d70:	d00a      	beq.n	8006d88 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	0018      	movs	r0, r3
 8006d76:	f000 fcc4 	bl	8007702 <UART_EndTransmit_IT>
    return;
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	e004      	b.n	8006d88 <HAL_UART_IRQHandler+0x240>
      return;
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	e002      	b.n	8006d88 <HAL_UART_IRQHandler+0x240>
    return;
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	e000      	b.n	8006d88 <HAL_UART_IRQHandler+0x240>
    return;
 8006d86:	46c0      	nop			; (mov r8, r8)
  }

}
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b008      	add	sp, #32
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	46c0      	nop			; (mov r8, r8)
 8006d90:	080076d5 	.word	0x080076d5

08006d94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d9c:	46c0      	nop			; (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da4:	b5b0      	push	{r4, r5, r7, lr}
 8006da6:	b08e      	sub	sp, #56	; 0x38
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006dac:	231b      	movs	r3, #27
 8006dae:	2218      	movs	r2, #24
 8006db0:	4694      	mov	ip, r2
 8006db2:	44bc      	add	ip, r7
 8006db4:	4463      	add	r3, ip
 8006db6:	2210      	movs	r2, #16
 8006db8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dbe:	2313      	movs	r3, #19
 8006dc0:	2218      	movs	r2, #24
 8006dc2:	4694      	mov	ip, r2
 8006dc4:	44bc      	add	ip, r7
 8006dc6:	4463      	add	r3, ip
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4aca      	ldr	r2, [pc, #808]	; (8007118 <UART_SetConfig+0x374>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	0019      	movs	r1, r3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4ac5      	ldr	r2, [pc, #788]	; (800711c <UART_SetConfig+0x378>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	0019      	movs	r1, r3
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4abf      	ldr	r2, [pc, #764]	; (8007120 <UART_SetConfig+0x37c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4abb      	ldr	r2, [pc, #748]	; (8007124 <UART_SetConfig+0x380>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e42:	430a      	orrs	r2, r1
 8006e44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4ab7      	ldr	r2, [pc, #732]	; (8007128 <UART_SetConfig+0x384>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d134      	bne.n	8006eba <UART_SetConfig+0x116>
 8006e50:	4bb6      	ldr	r3, [pc, #728]	; (800712c <UART_SetConfig+0x388>)
 8006e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e54:	2203      	movs	r2, #3
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d015      	beq.n	8006e88 <UART_SetConfig+0xe4>
 8006e5c:	d304      	bcc.n	8006e68 <UART_SetConfig+0xc4>
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d00a      	beq.n	8006e78 <UART_SetConfig+0xd4>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d018      	beq.n	8006e98 <UART_SetConfig+0xf4>
 8006e66:	e01f      	b.n	8006ea8 <UART_SetConfig+0x104>
 8006e68:	231b      	movs	r3, #27
 8006e6a:	2218      	movs	r2, #24
 8006e6c:	4694      	mov	ip, r2
 8006e6e:	44bc      	add	ip, r7
 8006e70:	4463      	add	r3, ip
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e0c5      	b.n	8007004 <UART_SetConfig+0x260>
 8006e78:	231b      	movs	r3, #27
 8006e7a:	2218      	movs	r2, #24
 8006e7c:	4694      	mov	ip, r2
 8006e7e:	44bc      	add	ip, r7
 8006e80:	4463      	add	r3, ip
 8006e82:	2202      	movs	r2, #2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	e0bd      	b.n	8007004 <UART_SetConfig+0x260>
 8006e88:	231b      	movs	r3, #27
 8006e8a:	2218      	movs	r2, #24
 8006e8c:	4694      	mov	ip, r2
 8006e8e:	44bc      	add	ip, r7
 8006e90:	4463      	add	r3, ip
 8006e92:	2204      	movs	r2, #4
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e0b5      	b.n	8007004 <UART_SetConfig+0x260>
 8006e98:	231b      	movs	r3, #27
 8006e9a:	2218      	movs	r2, #24
 8006e9c:	4694      	mov	ip, r2
 8006e9e:	44bc      	add	ip, r7
 8006ea0:	4463      	add	r3, ip
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e0ad      	b.n	8007004 <UART_SetConfig+0x260>
 8006ea8:	231b      	movs	r3, #27
 8006eaa:	2218      	movs	r2, #24
 8006eac:	4694      	mov	ip, r2
 8006eae:	44bc      	add	ip, r7
 8006eb0:	4463      	add	r3, ip
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	e0a4      	b.n	8007004 <UART_SetConfig+0x260>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a9c      	ldr	r2, [pc, #624]	; (8007130 <UART_SetConfig+0x38c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d137      	bne.n	8006f34 <UART_SetConfig+0x190>
 8006ec4:	4b99      	ldr	r3, [pc, #612]	; (800712c <UART_SetConfig+0x388>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	220c      	movs	r2, #12
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d018      	beq.n	8006f02 <UART_SetConfig+0x15e>
 8006ed0:	d802      	bhi.n	8006ed8 <UART_SetConfig+0x134>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <UART_SetConfig+0x13e>
 8006ed6:	e024      	b.n	8006f22 <UART_SetConfig+0x17e>
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d00a      	beq.n	8006ef2 <UART_SetConfig+0x14e>
 8006edc:	2b0c      	cmp	r3, #12
 8006ede:	d018      	beq.n	8006f12 <UART_SetConfig+0x16e>
 8006ee0:	e01f      	b.n	8006f22 <UART_SetConfig+0x17e>
 8006ee2:	231b      	movs	r3, #27
 8006ee4:	2218      	movs	r2, #24
 8006ee6:	4694      	mov	ip, r2
 8006ee8:	44bc      	add	ip, r7
 8006eea:	4463      	add	r3, ip
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e088      	b.n	8007004 <UART_SetConfig+0x260>
 8006ef2:	231b      	movs	r3, #27
 8006ef4:	2218      	movs	r2, #24
 8006ef6:	4694      	mov	ip, r2
 8006ef8:	44bc      	add	ip, r7
 8006efa:	4463      	add	r3, ip
 8006efc:	2202      	movs	r2, #2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	e080      	b.n	8007004 <UART_SetConfig+0x260>
 8006f02:	231b      	movs	r3, #27
 8006f04:	2218      	movs	r2, #24
 8006f06:	4694      	mov	ip, r2
 8006f08:	44bc      	add	ip, r7
 8006f0a:	4463      	add	r3, ip
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e078      	b.n	8007004 <UART_SetConfig+0x260>
 8006f12:	231b      	movs	r3, #27
 8006f14:	2218      	movs	r2, #24
 8006f16:	4694      	mov	ip, r2
 8006f18:	44bc      	add	ip, r7
 8006f1a:	4463      	add	r3, ip
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e070      	b.n	8007004 <UART_SetConfig+0x260>
 8006f22:	231b      	movs	r3, #27
 8006f24:	2218      	movs	r2, #24
 8006f26:	4694      	mov	ip, r2
 8006f28:	44bc      	add	ip, r7
 8006f2a:	4463      	add	r3, ip
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	e067      	b.n	8007004 <UART_SetConfig+0x260>
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a7e      	ldr	r2, [pc, #504]	; (8007134 <UART_SetConfig+0x390>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d107      	bne.n	8006f4e <UART_SetConfig+0x1aa>
 8006f3e:	231b      	movs	r3, #27
 8006f40:	2218      	movs	r2, #24
 8006f42:	4694      	mov	ip, r2
 8006f44:	44bc      	add	ip, r7
 8006f46:	4463      	add	r3, ip
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e05a      	b.n	8007004 <UART_SetConfig+0x260>
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a79      	ldr	r2, [pc, #484]	; (8007138 <UART_SetConfig+0x394>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d107      	bne.n	8006f68 <UART_SetConfig+0x1c4>
 8006f58:	231b      	movs	r3, #27
 8006f5a:	2218      	movs	r2, #24
 8006f5c:	4694      	mov	ip, r2
 8006f5e:	44bc      	add	ip, r7
 8006f60:	4463      	add	r3, ip
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e04d      	b.n	8007004 <UART_SetConfig+0x260>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6c      	ldr	r2, [pc, #432]	; (8007120 <UART_SetConfig+0x37c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d141      	bne.n	8006ff6 <UART_SetConfig+0x252>
 8006f72:	4b6e      	ldr	r3, [pc, #440]	; (800712c <UART_SetConfig+0x388>)
 8006f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f76:	23c0      	movs	r3, #192	; 0xc0
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2280      	movs	r2, #128	; 0x80
 8006f7e:	00d2      	lsls	r2, r2, #3
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d01f      	beq.n	8006fc4 <UART_SetConfig+0x220>
 8006f84:	2280      	movs	r2, #128	; 0x80
 8006f86:	00d2      	lsls	r2, r2, #3
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d802      	bhi.n	8006f92 <UART_SetConfig+0x1ee>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <UART_SetConfig+0x200>
 8006f90:	e028      	b.n	8006fe4 <UART_SetConfig+0x240>
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	0112      	lsls	r2, r2, #4
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00c      	beq.n	8006fb4 <UART_SetConfig+0x210>
 8006f9a:	22c0      	movs	r2, #192	; 0xc0
 8006f9c:	0112      	lsls	r2, r2, #4
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d018      	beq.n	8006fd4 <UART_SetConfig+0x230>
 8006fa2:	e01f      	b.n	8006fe4 <UART_SetConfig+0x240>
 8006fa4:	231b      	movs	r3, #27
 8006fa6:	2218      	movs	r2, #24
 8006fa8:	4694      	mov	ip, r2
 8006faa:	44bc      	add	ip, r7
 8006fac:	4463      	add	r3, ip
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e027      	b.n	8007004 <UART_SetConfig+0x260>
 8006fb4:	231b      	movs	r3, #27
 8006fb6:	2218      	movs	r2, #24
 8006fb8:	4694      	mov	ip, r2
 8006fba:	44bc      	add	ip, r7
 8006fbc:	4463      	add	r3, ip
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e01f      	b.n	8007004 <UART_SetConfig+0x260>
 8006fc4:	231b      	movs	r3, #27
 8006fc6:	2218      	movs	r2, #24
 8006fc8:	4694      	mov	ip, r2
 8006fca:	44bc      	add	ip, r7
 8006fcc:	4463      	add	r3, ip
 8006fce:	2204      	movs	r2, #4
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e017      	b.n	8007004 <UART_SetConfig+0x260>
 8006fd4:	231b      	movs	r3, #27
 8006fd6:	2218      	movs	r2, #24
 8006fd8:	4694      	mov	ip, r2
 8006fda:	44bc      	add	ip, r7
 8006fdc:	4463      	add	r3, ip
 8006fde:	2208      	movs	r2, #8
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e00f      	b.n	8007004 <UART_SetConfig+0x260>
 8006fe4:	231b      	movs	r3, #27
 8006fe6:	2218      	movs	r2, #24
 8006fe8:	4694      	mov	ip, r2
 8006fea:	44bc      	add	ip, r7
 8006fec:	4463      	add	r3, ip
 8006fee:	2210      	movs	r2, #16
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	e006      	b.n	8007004 <UART_SetConfig+0x260>
 8006ff6:	231b      	movs	r3, #27
 8006ff8:	2218      	movs	r2, #24
 8006ffa:	4694      	mov	ip, r2
 8006ffc:	44bc      	add	ip, r7
 8006ffe:	4463      	add	r3, ip
 8007000:	2210      	movs	r2, #16
 8007002:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a45      	ldr	r2, [pc, #276]	; (8007120 <UART_SetConfig+0x37c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d000      	beq.n	8007010 <UART_SetConfig+0x26c>
 800700e:	e09d      	b.n	800714c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007010:	231b      	movs	r3, #27
 8007012:	2218      	movs	r2, #24
 8007014:	4694      	mov	ip, r2
 8007016:	44bc      	add	ip, r7
 8007018:	4463      	add	r3, ip
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d00d      	beq.n	800703c <UART_SetConfig+0x298>
 8007020:	dc02      	bgt.n	8007028 <UART_SetConfig+0x284>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <UART_SetConfig+0x28e>
 8007026:	e01d      	b.n	8007064 <UART_SetConfig+0x2c0>
 8007028:	2b04      	cmp	r3, #4
 800702a:	d012      	beq.n	8007052 <UART_SetConfig+0x2ae>
 800702c:	2b08      	cmp	r3, #8
 800702e:	d015      	beq.n	800705c <UART_SetConfig+0x2b8>
 8007030:	e018      	b.n	8007064 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007032:	f7fe f9e7 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 8007036:	0003      	movs	r3, r0
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800703a:	e01b      	b.n	8007074 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703c:	4b3b      	ldr	r3, [pc, #236]	; (800712c <UART_SetConfig+0x388>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2210      	movs	r2, #16
 8007042:	4013      	ands	r3, r2
 8007044:	d002      	beq.n	800704c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <UART_SetConfig+0x398>)
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800704a:	e013      	b.n	8007074 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800704c:	4b3c      	ldr	r3, [pc, #240]	; (8007140 <UART_SetConfig+0x39c>)
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007050:	e010      	b.n	8007074 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007052:	f7fe f949 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8007056:	0003      	movs	r3, r0
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800705a:	e00b      	b.n	8007074 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007062:	e007      	b.n	8007074 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007064:	2313      	movs	r3, #19
 8007066:	2218      	movs	r2, #24
 8007068:	4694      	mov	ip, r2
 800706a:	44bc      	add	ip, r7
 800706c:	4463      	add	r3, ip
 800706e:	2201      	movs	r2, #1
 8007070:	701a      	strb	r2, [r3, #0]
        break;
 8007072:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	d100      	bne.n	800707c <UART_SetConfig+0x2d8>
 800707a:	e1a6      	b.n	80073ca <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	0013      	movs	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	189b      	adds	r3, r3, r2
 8007086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007088:	429a      	cmp	r2, r3
 800708a:	d305      	bcc.n	8007098 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007094:	429a      	cmp	r2, r3
 8007096:	d907      	bls.n	80070a8 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8007098:	2313      	movs	r3, #19
 800709a:	2218      	movs	r2, #24
 800709c:	4694      	mov	ip, r2
 800709e:	44bc      	add	ip, r7
 80070a0:	4463      	add	r3, ip
 80070a2:	2201      	movs	r2, #1
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e190      	b.n	80073ca <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	6939      	ldr	r1, [r7, #16]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	000b      	movs	r3, r1
 80070b6:	0e1b      	lsrs	r3, r3, #24
 80070b8:	0010      	movs	r0, r2
 80070ba:	0205      	lsls	r5, r0, #8
 80070bc:	431d      	orrs	r5, r3
 80070be:	000b      	movs	r3, r1
 80070c0:	021c      	lsls	r4, r3, #8
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	68b8      	ldr	r0, [r7, #8]
 80070d0:	68f9      	ldr	r1, [r7, #12]
 80070d2:	1900      	adds	r0, r0, r4
 80070d4:	4169      	adcs	r1, r5
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	607b      	str	r3, [r7, #4]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f7f9 f9f0 	bl	80004c8 <__aeabi_uldivmod>
 80070e8:	0003      	movs	r3, r0
 80070ea:	000c      	movs	r4, r1
 80070ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	4a14      	ldr	r2, [pc, #80]	; (8007144 <UART_SetConfig+0x3a0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d908      	bls.n	8007108 <UART_SetConfig+0x364>
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	4a13      	ldr	r2, [pc, #76]	; (8007148 <UART_SetConfig+0x3a4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d804      	bhi.n	8007108 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	e160      	b.n	80073ca <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8007108:	2313      	movs	r3, #19
 800710a:	2218      	movs	r2, #24
 800710c:	4694      	mov	ip, r2
 800710e:	44bc      	add	ip, r7
 8007110:	4463      	add	r3, ip
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e158      	b.n	80073ca <UART_SetConfig+0x626>
 8007118:	efff69f3 	.word	0xefff69f3
 800711c:	ffffcfff 	.word	0xffffcfff
 8007120:	40004800 	.word	0x40004800
 8007124:	fffff4ff 	.word	0xfffff4ff
 8007128:	40013800 	.word	0x40013800
 800712c:	40021000 	.word	0x40021000
 8007130:	40004400 	.word	0x40004400
 8007134:	40004c00 	.word	0x40004c00
 8007138:	40005000 	.word	0x40005000
 800713c:	003d0900 	.word	0x003d0900
 8007140:	00f42400 	.word	0x00f42400
 8007144:	000002ff 	.word	0x000002ff
 8007148:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	2380      	movs	r3, #128	; 0x80
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	429a      	cmp	r2, r3
 8007156:	d000      	beq.n	800715a <UART_SetConfig+0x3b6>
 8007158:	e0a9      	b.n	80072ae <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800715a:	231b      	movs	r3, #27
 800715c:	2218      	movs	r2, #24
 800715e:	4694      	mov	ip, r2
 8007160:	44bc      	add	ip, r7
 8007162:	4463      	add	r3, ip
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b08      	cmp	r3, #8
 8007168:	d86d      	bhi.n	8007246 <UART_SetConfig+0x4a2>
 800716a:	009a      	lsls	r2, r3, #2
 800716c:	4b9f      	ldr	r3, [pc, #636]	; (80073ec <UART_SetConfig+0x648>)
 800716e:	18d3      	adds	r3, r2, r3
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007174:	f7fe f946 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 8007178:	0003      	movs	r3, r0
 800717a:	005a      	lsls	r2, r3, #1
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	18d2      	adds	r2, r2, r3
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	0019      	movs	r1, r3
 800718a:	0010      	movs	r0, r2
 800718c:	f7f8 ffc4 	bl	8000118 <__udivsi3>
 8007190:	0003      	movs	r3, r0
 8007192:	b29b      	uxth	r3, r3
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007196:	e05e      	b.n	8007256 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007198:	f7fe f94a 	bl	8005430 <HAL_RCC_GetPCLK2Freq>
 800719c:	0003      	movs	r3, r0
 800719e:	005a      	lsls	r2, r3, #1
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	18d2      	adds	r2, r2, r3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	0019      	movs	r1, r3
 80071ae:	0010      	movs	r0, r2
 80071b0:	f7f8 ffb2 	bl	8000118 <__udivsi3>
 80071b4:	0003      	movs	r3, r0
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071ba:	e04c      	b.n	8007256 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071bc:	4b8c      	ldr	r3, [pc, #560]	; (80073f0 <UART_SetConfig+0x64c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2210      	movs	r2, #16
 80071c2:	4013      	ands	r3, r2
 80071c4:	d00e      	beq.n	80071e4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	4a89      	ldr	r2, [pc, #548]	; (80073f4 <UART_SetConfig+0x650>)
 80071ce:	189a      	adds	r2, r3, r2
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	0019      	movs	r1, r3
 80071d6:	0010      	movs	r0, r2
 80071d8:	f7f8 ff9e 	bl	8000118 <__udivsi3>
 80071dc:	0003      	movs	r3, r0
 80071de:	b29b      	uxth	r3, r3
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80071e2:	e038      	b.n	8007256 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	4a83      	ldr	r2, [pc, #524]	; (80073f8 <UART_SetConfig+0x654>)
 80071ec:	189a      	adds	r2, r3, r2
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	0019      	movs	r1, r3
 80071f4:	0010      	movs	r0, r2
 80071f6:	f7f8 ff8f 	bl	8000118 <__udivsi3>
 80071fa:	0003      	movs	r3, r0
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007200:	e029      	b.n	8007256 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007202:	f7fe f871 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8007206:	0003      	movs	r3, r0
 8007208:	005a      	lsls	r2, r3, #1
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	18d2      	adds	r2, r2, r3
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	0019      	movs	r1, r3
 8007218:	0010      	movs	r0, r2
 800721a:	f7f8 ff7d 	bl	8000118 <__udivsi3>
 800721e:	0003      	movs	r3, r0
 8007220:	b29b      	uxth	r3, r3
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007224:	e017      	b.n	8007256 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	2280      	movs	r2, #128	; 0x80
 800722e:	0252      	lsls	r2, r2, #9
 8007230:	189a      	adds	r2, r3, r2
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	0019      	movs	r1, r3
 8007238:	0010      	movs	r0, r2
 800723a:	f7f8 ff6d 	bl	8000118 <__udivsi3>
 800723e:	0003      	movs	r3, r0
 8007240:	b29b      	uxth	r3, r3
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007244:	e007      	b.n	8007256 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007246:	2313      	movs	r3, #19
 8007248:	2218      	movs	r2, #24
 800724a:	4694      	mov	ip, r2
 800724c:	44bc      	add	ip, r7
 800724e:	4463      	add	r3, ip
 8007250:	2201      	movs	r2, #1
 8007252:	701a      	strb	r2, [r3, #0]
        break;
 8007254:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	2b0f      	cmp	r3, #15
 800725a:	d920      	bls.n	800729e <UART_SetConfig+0x4fa>
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	4a67      	ldr	r2, [pc, #412]	; (80073fc <UART_SetConfig+0x658>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d81c      	bhi.n	800729e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	b29a      	uxth	r2, r3
 8007268:	200a      	movs	r0, #10
 800726a:	2418      	movs	r4, #24
 800726c:	193b      	adds	r3, r7, r4
 800726e:	181b      	adds	r3, r3, r0
 8007270:	210f      	movs	r1, #15
 8007272:	438a      	bics	r2, r1
 8007274:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	b29b      	uxth	r3, r3
 800727c:	2207      	movs	r2, #7
 800727e:	4013      	ands	r3, r2
 8007280:	b299      	uxth	r1, r3
 8007282:	193b      	adds	r3, r7, r4
 8007284:	181b      	adds	r3, r3, r0
 8007286:	193a      	adds	r2, r7, r4
 8007288:	1812      	adds	r2, r2, r0
 800728a:	8812      	ldrh	r2, [r2, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	193a      	adds	r2, r7, r4
 8007296:	1812      	adds	r2, r2, r0
 8007298:	8812      	ldrh	r2, [r2, #0]
 800729a:	60da      	str	r2, [r3, #12]
 800729c:	e095      	b.n	80073ca <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800729e:	2313      	movs	r3, #19
 80072a0:	2218      	movs	r2, #24
 80072a2:	4694      	mov	ip, r2
 80072a4:	44bc      	add	ip, r7
 80072a6:	4463      	add	r3, ip
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e08d      	b.n	80073ca <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80072ae:	231b      	movs	r3, #27
 80072b0:	2218      	movs	r2, #24
 80072b2:	4694      	mov	ip, r2
 80072b4:	44bc      	add	ip, r7
 80072b6:	4463      	add	r3, ip
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d86a      	bhi.n	8007394 <UART_SetConfig+0x5f0>
 80072be:	009a      	lsls	r2, r3, #2
 80072c0:	4b4f      	ldr	r3, [pc, #316]	; (8007400 <UART_SetConfig+0x65c>)
 80072c2:	18d3      	adds	r3, r2, r3
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80072c8:	f7fe f89c 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 80072cc:	0002      	movs	r2, r0
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	18d2      	adds	r2, r2, r3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	0019      	movs	r1, r3
 80072dc:	0010      	movs	r0, r2
 80072de:	f7f8 ff1b 	bl	8000118 <__udivsi3>
 80072e2:	0003      	movs	r3, r0
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072e8:	e05c      	b.n	80073a4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80072ea:	f7fe f8a1 	bl	8005430 <HAL_RCC_GetPCLK2Freq>
 80072ee:	0002      	movs	r2, r0
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	18d2      	adds	r2, r2, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	0019      	movs	r1, r3
 80072fe:	0010      	movs	r0, r2
 8007300:	f7f8 ff0a 	bl	8000118 <__udivsi3>
 8007304:	0003      	movs	r3, r0
 8007306:	b29b      	uxth	r3, r3
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800730a:	e04b      	b.n	80073a4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800730c:	4b38      	ldr	r3, [pc, #224]	; (80073f0 <UART_SetConfig+0x64c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2210      	movs	r2, #16
 8007312:	4013      	ands	r3, r2
 8007314:	d00e      	beq.n	8007334 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	4a39      	ldr	r2, [pc, #228]	; (8007404 <UART_SetConfig+0x660>)
 800731e:	189a      	adds	r2, r3, r2
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	0019      	movs	r1, r3
 8007326:	0010      	movs	r0, r2
 8007328:	f7f8 fef6 	bl	8000118 <__udivsi3>
 800732c:	0003      	movs	r3, r0
 800732e:	b29b      	uxth	r3, r3
 8007330:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8007332:	e037      	b.n	80073a4 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	085b      	lsrs	r3, r3, #1
 800733a:	4a33      	ldr	r2, [pc, #204]	; (8007408 <UART_SetConfig+0x664>)
 800733c:	189a      	adds	r2, r3, r2
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	0019      	movs	r1, r3
 8007344:	0010      	movs	r0, r2
 8007346:	f7f8 fee7 	bl	8000118 <__udivsi3>
 800734a:	0003      	movs	r3, r0
 800734c:	b29b      	uxth	r3, r3
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007350:	e028      	b.n	80073a4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007352:	f7fd ffc9 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8007356:	0002      	movs	r2, r0
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	18d2      	adds	r2, r2, r3
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	0019      	movs	r1, r3
 8007366:	0010      	movs	r0, r2
 8007368:	f7f8 fed6 	bl	8000118 <__udivsi3>
 800736c:	0003      	movs	r3, r0
 800736e:	b29b      	uxth	r3, r3
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007372:	e017      	b.n	80073a4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	2280      	movs	r2, #128	; 0x80
 800737c:	0212      	lsls	r2, r2, #8
 800737e:	189a      	adds	r2, r3, r2
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	0019      	movs	r1, r3
 8007386:	0010      	movs	r0, r2
 8007388:	f7f8 fec6 	bl	8000118 <__udivsi3>
 800738c:	0003      	movs	r3, r0
 800738e:	b29b      	uxth	r3, r3
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007392:	e007      	b.n	80073a4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007394:	2313      	movs	r3, #19
 8007396:	2218      	movs	r2, #24
 8007398:	4694      	mov	ip, r2
 800739a:	44bc      	add	ip, r7
 800739c:	4463      	add	r3, ip
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
        break;
 80073a2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d908      	bls.n	80073bc <UART_SetConfig+0x618>
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <UART_SetConfig+0x658>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d804      	bhi.n	80073bc <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	e006      	b.n	80073ca <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80073bc:	2313      	movs	r3, #19
 80073be:	2218      	movs	r2, #24
 80073c0:	4694      	mov	ip, r2
 80073c2:	44bc      	add	ip, r7
 80073c4:	4463      	add	r3, ip
 80073c6:	2201      	movs	r2, #1
 80073c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2200      	movs	r2, #0
 80073ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	2200      	movs	r2, #0
 80073d4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80073d6:	2313      	movs	r3, #19
 80073d8:	2218      	movs	r2, #24
 80073da:	4694      	mov	ip, r2
 80073dc:	44bc      	add	ip, r7
 80073de:	4463      	add	r3, ip
 80073e0:	781b      	ldrb	r3, [r3, #0]
}
 80073e2:	0018      	movs	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b00e      	add	sp, #56	; 0x38
 80073e8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	0801b768 	.word	0x0801b768
 80073f0:	40021000 	.word	0x40021000
 80073f4:	007a1200 	.word	0x007a1200
 80073f8:	01e84800 	.word	0x01e84800
 80073fc:	0000ffff 	.word	0x0000ffff
 8007400:	0801b78c 	.word	0x0801b78c
 8007404:	003d0900 	.word	0x003d0900
 8007408:	00f42400 	.word	0x00f42400

0800740c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	2201      	movs	r2, #1
 800741a:	4013      	ands	r3, r2
 800741c:	d00b      	beq.n	8007436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	4a4a      	ldr	r2, [pc, #296]	; (8007550 <UART_AdvFeatureConfig+0x144>)
 8007426:	4013      	ands	r3, r2
 8007428:	0019      	movs	r1, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2202      	movs	r2, #2
 800743c:	4013      	ands	r3, r2
 800743e:	d00b      	beq.n	8007458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4a43      	ldr	r2, [pc, #268]	; (8007554 <UART_AdvFeatureConfig+0x148>)
 8007448:	4013      	ands	r3, r2
 800744a:	0019      	movs	r1, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2204      	movs	r2, #4
 800745e:	4013      	ands	r3, r2
 8007460:	d00b      	beq.n	800747a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a3b      	ldr	r2, [pc, #236]	; (8007558 <UART_AdvFeatureConfig+0x14c>)
 800746a:	4013      	ands	r3, r2
 800746c:	0019      	movs	r1, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2208      	movs	r2, #8
 8007480:	4013      	ands	r3, r2
 8007482:	d00b      	beq.n	800749c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4a34      	ldr	r2, [pc, #208]	; (800755c <UART_AdvFeatureConfig+0x150>)
 800748c:	4013      	ands	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	2210      	movs	r2, #16
 80074a2:	4013      	ands	r3, r2
 80074a4:	d00b      	beq.n	80074be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4a2c      	ldr	r2, [pc, #176]	; (8007560 <UART_AdvFeatureConfig+0x154>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	0019      	movs	r1, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2220      	movs	r2, #32
 80074c4:	4013      	ands	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	4a25      	ldr	r2, [pc, #148]	; (8007564 <UART_AdvFeatureConfig+0x158>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	0019      	movs	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2240      	movs	r2, #64	; 0x40
 80074e6:	4013      	ands	r3, r2
 80074e8:	d01d      	beq.n	8007526 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <UART_AdvFeatureConfig+0x15c>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	0019      	movs	r1, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	035b      	lsls	r3, r3, #13
 800750a:	429a      	cmp	r2, r3
 800750c:	d10b      	bne.n	8007526 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a15      	ldr	r2, [pc, #84]	; (800756c <UART_AdvFeatureConfig+0x160>)
 8007516:	4013      	ands	r3, r2
 8007518:	0019      	movs	r1, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2280      	movs	r2, #128	; 0x80
 800752c:	4013      	ands	r3, r2
 800752e:	d00b      	beq.n	8007548 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	4a0e      	ldr	r2, [pc, #56]	; (8007570 <UART_AdvFeatureConfig+0x164>)
 8007538:	4013      	ands	r3, r2
 800753a:	0019      	movs	r1, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }
}
 8007548:	46c0      	nop			; (mov r8, r8)
 800754a:	46bd      	mov	sp, r7
 800754c:	b002      	add	sp, #8
 800754e:	bd80      	pop	{r7, pc}
 8007550:	fffdffff 	.word	0xfffdffff
 8007554:	fffeffff 	.word	0xfffeffff
 8007558:	fffbffff 	.word	0xfffbffff
 800755c:	ffff7fff 	.word	0xffff7fff
 8007560:	ffffefff 	.word	0xffffefff
 8007564:	ffffdfff 	.word	0xffffdfff
 8007568:	ffefffff 	.word	0xffefffff
 800756c:	ff9fffff 	.word	0xff9fffff
 8007570:	fff7ffff 	.word	0xfff7ffff

08007574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af02      	add	r7, sp, #8
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007582:	f7fc fa0f 	bl	80039a4 <HAL_GetTick>
 8007586:	0003      	movs	r3, r0
 8007588:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2208      	movs	r2, #8
 8007592:	4013      	ands	r3, r2
 8007594:	2b08      	cmp	r3, #8
 8007596:	d10d      	bne.n	80075b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	0399      	lsls	r1, r3, #14
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4b16      	ldr	r3, [pc, #88]	; (80075fc <UART_CheckIdleState+0x88>)
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	0013      	movs	r3, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	f000 f82a 	bl	8007600 <UART_WaitOnFlagUntilTimeout>
 80075ac:	1e03      	subs	r3, r0, #0
 80075ae:	d001      	beq.n	80075b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e01f      	b.n	80075f4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2204      	movs	r2, #4
 80075bc:	4013      	ands	r3, r2
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d10d      	bne.n	80075de <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	2380      	movs	r3, #128	; 0x80
 80075c6:	03d9      	lsls	r1, r3, #15
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <UART_CheckIdleState+0x88>)
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	0013      	movs	r3, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	f000 f815 	bl	8007600 <UART_WaitOnFlagUntilTimeout>
 80075d6:	1e03      	subs	r3, r0, #0
 80075d8:	d001      	beq.n	80075de <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e00a      	b.n	80075f4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2270      	movs	r2, #112	; 0x70
 80075ee:	2100      	movs	r1, #0
 80075f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	0018      	movs	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b004      	add	sp, #16
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	01ffffff 	.word	0x01ffffff

08007600 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	1dfb      	adds	r3, r7, #7
 800760e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007610:	e029      	b.n	8007666 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	3301      	adds	r3, #1
 8007616:	d026      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007618:	f7fc f9c4 	bl	80039a4 <HAL_GetTick>
 800761c:	0002      	movs	r2, r0
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11b      	bne.n	8007666 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4915      	ldr	r1, [pc, #84]	; (8007690 <UART_WaitOnFlagUntilTimeout+0x90>)
 800763a:	400a      	ands	r2, r1
 800763c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2101      	movs	r1, #1
 800764a:	438a      	bics	r2, r1
 800764c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2270      	movs	r2, #112	; 0x70
 800765e:	2100      	movs	r1, #0
 8007660:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e00f      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	4013      	ands	r3, r2
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	425a      	negs	r2, r3
 8007676:	4153      	adcs	r3, r2
 8007678:	b2db      	uxtb	r3, r3
 800767a:	001a      	movs	r2, r3
 800767c:	1dfb      	adds	r3, r7, #7
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d0c6      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	0018      	movs	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	b004      	add	sp, #16
 800768c:	bd80      	pop	{r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	fffffe5f 	.word	0xfffffe5f

08007694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	490a      	ldr	r1, [pc, #40]	; (80076d0 <UART_EndRxTransfer+0x3c>)
 80076a8:	400a      	ands	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2101      	movs	r1, #1
 80076b8:	438a      	bics	r2, r1
 80076ba:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	fffffedf 	.word	0xfffffedf

080076d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	225a      	movs	r2, #90	; 0x5a
 80076e6:	2100      	movs	r1, #0
 80076e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2252      	movs	r2, #82	; 0x52
 80076ee:	2100      	movs	r1, #0
 80076f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f011 fe4f 	bl	8019398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b004      	add	sp, #16
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2140      	movs	r1, #64	; 0x40
 8007716:	438a      	bics	r2, r1
 8007718:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0018      	movs	r0, r3
 800772a:	f7ff fb33 	bl	8006d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b002      	add	sp, #8
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	6019      	str	r1, [r3, #0]
 8007744:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2317      	movs	r3, #23
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2270      	movs	r2, #112	; 0x70
 8007752:	5c9b      	ldrb	r3, [r3, r2]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007758:	2302      	movs	r3, #2
 800775a:	e04b      	b.n	80077f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2270      	movs	r2, #112	; 0x70
 8007760:	2101      	movs	r1, #1
 8007762:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2224      	movs	r2, #36	; 0x24
 8007768:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2101      	movs	r1, #1
 8007776:	438a      	bics	r2, r1
 8007778:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007782:	4013      	ands	r3, r2
 8007784:	0019      	movs	r1, r3
 8007786:	1d3b      	adds	r3, r7, #4
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007792:	1d3b      	adds	r3, r7, #4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	6819      	ldr	r1, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	f000 f84f 	bl	8007844 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2101      	movs	r1, #1
 80077b2:	430a      	orrs	r2, r1
 80077b4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80077b6:	f7fc f8f5 	bl	80039a4 <HAL_GetTick>
 80077ba:	0003      	movs	r3, r0
 80077bc:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	2380      	movs	r3, #128	; 0x80
 80077c2:	03d9      	lsls	r1, r3, #15
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	0013      	movs	r3, r2
 80077cc:	2200      	movs	r2, #0
 80077ce:	f7ff ff17 	bl	8007600 <UART_WaitOnFlagUntilTimeout>
 80077d2:	1e03      	subs	r3, r0, #0
 80077d4:	d004      	beq.n	80077e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 80077d6:	2317      	movs	r3, #23
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	2203      	movs	r2, #3
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	e002      	b.n	80077e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2270      	movs	r2, #112	; 0x70
 80077ea:	2100      	movs	r1, #0
 80077ec:	5499      	strb	r1, [r3, r2]

  return status;
 80077ee:	2317      	movs	r3, #23
 80077f0:	18fb      	adds	r3, r7, r3
 80077f2:	781b      	ldrb	r3, [r3, #0]
}
 80077f4:	0018      	movs	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	b006      	add	sp, #24
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	ffcfffff 	.word	0xffcfffff
 8007800:	01ffffff 	.word	0x01ffffff

08007804 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2270      	movs	r2, #112	; 0x70
 8007810:	5c9b      	ldrb	r3, [r3, r2]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_UARTEx_EnableStopMode+0x16>
 8007816:	2302      	movs	r3, #2
 8007818:	e010      	b.n	800783c <HAL_UARTEx_EnableStopMode+0x38>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2270      	movs	r2, #112	; 0x70
 800781e:	2101      	movs	r1, #1
 8007820:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2102      	movs	r1, #2
 800782e:	430a      	orrs	r2, r1
 8007830:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2270      	movs	r2, #112	; 0x70
 8007836:	2100      	movs	r1, #0
 8007838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	0018      	movs	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	b002      	add	sp, #8
 8007842:	bd80      	pop	{r7, pc}

08007844 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	1d3b      	adds	r3, r7, #4
 800784e:	6019      	str	r1, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2210      	movs	r2, #16
 800785a:	4393      	bics	r3, r2
 800785c:	001a      	movs	r2, r3
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	889b      	ldrh	r3, [r3, #4]
 8007862:	0019      	movs	r1, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	0a19      	lsrs	r1, r3, #8
 8007876:	1d3b      	adds	r3, r7, #4
 8007878:	799b      	ldrb	r3, [r3, #6]
 800787a:	061a      	lsls	r2, r3, #24
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
}
 8007884:	46c0      	nop			; (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b004      	add	sp, #16
 800788a:	bd80      	pop	{r7, pc}

0800788c <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007890:	e004      	b.n	800789c <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <lorawan_driver_loop+0x34>)
 8007894:	2200      	movs	r2, #0
 8007896:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8007898:	f002 fc50 	bl	800a13c <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 800789c:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <lorawan_driver_loop+0x34>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 80078a6:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <lorawan_driver_loop+0x34>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d003      	beq.n	80078b8 <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 80078b0:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <lorawan_driver_loop+0x34>)
 80078b2:	7a1b      	ldrb	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1ec      	bne.n	8007892 <lorawan_driver_loop+0x6>
	}

}
 80078b8:	46c0      	nop			; (mov r8, r8)
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	200000f0 	.word	0x200000f0

080078c4 <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <lorawan_driver_LORA_getJoinState+0x10>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200000f0 	.word	0x200000f0

080078d8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3301      	adds	r3, #1
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	7852      	ldrb	r2, [r2, #1]
 80078f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3302      	adds	r3, #2
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	7892      	ldrb	r2, [r2, #2]
 80078fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3303      	adds	r3, #3
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	78d2      	ldrb	r2, [r2, #3]
 8007906:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	7912      	ldrb	r2, [r2, #4]
 8007910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3305      	adds	r3, #5
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	7952      	ldrb	r2, [r2, #5]
 800791a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3306      	adds	r3, #6
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	7992      	ldrb	r2, [r2, #6]
 8007924:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3307      	adds	r3, #7
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	79d2      	ldrb	r2, [r2, #7]
 800792e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3308      	adds	r3, #8
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	7a12      	ldrb	r2, [r2, #8]
 8007938:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3309      	adds	r3, #9
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	7a52      	ldrb	r2, [r2, #9]
 8007942:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	330a      	adds	r3, #10
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	7a92      	ldrb	r2, [r2, #10]
 800794c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	330b      	adds	r3, #11
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	7ad2      	ldrb	r2, [r2, #11]
 8007956:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	330c      	adds	r3, #12
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	7b12      	ldrb	r2, [r2, #12]
 8007960:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	330d      	adds	r3, #13
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	7b52      	ldrb	r2, [r2, #13]
 800796a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	330e      	adds	r3, #14
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	7b92      	ldrb	r2, [r2, #14]
 8007974:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	330f      	adds	r3, #15
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	7bd2      	ldrb	r2, [r2, #15]
 800797e:	701a      	strb	r2, [r3, #0]
#endif
}
 8007980:	46c0      	nop			; (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b002      	add	sp, #8
 8007986:	bd80      	pop	{r7, pc}

08007988 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	1dfb      	adds	r3, r7, #7
 8007994:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007996:	e007      	b.n	80079a8 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	1c53      	adds	r3, r2, #1
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1c59      	adds	r1, r3, #1
 80079a2:	60f9      	str	r1, [r7, #12]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 80079a8:	1dfb      	adds	r3, r7, #7
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	1dfa      	adds	r2, r7, #7
 80079ae:	1e59      	subs	r1, r3, #1
 80079b0:	7011      	strb	r1, [r2, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f0      	bne.n	8007998 <copy_block_nn+0x10>
}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b004      	add	sp, #16
 80079bc:	bd80      	pop	{r7, pc}

080079be <xor_block>:

static void xor_block( void *d, const void *s )
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	4053      	eors	r3, r2
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3301      	adds	r3, #1
 80079dc:	7819      	ldrb	r1, [r3, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	781a      	ldrb	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3301      	adds	r3, #1
 80079e8:	404a      	eors	r2, r1
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3302      	adds	r3, #2
 80079f2:	7819      	ldrb	r1, [r3, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	3302      	adds	r3, #2
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3302      	adds	r3, #2
 80079fe:	404a      	eors	r2, r1
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3303      	adds	r3, #3
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	3303      	adds	r3, #3
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3303      	adds	r3, #3
 8007a14:	404a      	eors	r2, r1
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	7819      	ldrb	r1, [r3, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	3304      	adds	r3, #4
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	404a      	eors	r2, r1
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3305      	adds	r3, #5
 8007a34:	7819      	ldrb	r1, [r3, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	3305      	adds	r3, #5
 8007a3a:	781a      	ldrb	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3305      	adds	r3, #5
 8007a40:	404a      	eors	r2, r1
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3306      	adds	r3, #6
 8007a4a:	7819      	ldrb	r1, [r3, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	3306      	adds	r3, #6
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3306      	adds	r3, #6
 8007a56:	404a      	eors	r2, r1
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3307      	adds	r3, #7
 8007a60:	7819      	ldrb	r1, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	3307      	adds	r3, #7
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3307      	adds	r3, #7
 8007a6c:	404a      	eors	r2, r1
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3308      	adds	r3, #8
 8007a76:	7819      	ldrb	r1, [r3, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3308      	adds	r3, #8
 8007a82:	404a      	eors	r2, r1
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3309      	adds	r3, #9
 8007a8c:	7819      	ldrb	r1, [r3, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	3309      	adds	r3, #9
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3309      	adds	r3, #9
 8007a98:	404a      	eors	r2, r1
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	330a      	adds	r3, #10
 8007aa2:	7819      	ldrb	r1, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	330a      	adds	r3, #10
 8007aa8:	781a      	ldrb	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	330a      	adds	r3, #10
 8007aae:	404a      	eors	r2, r1
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	330b      	adds	r3, #11
 8007ab8:	7819      	ldrb	r1, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	330b      	adds	r3, #11
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	330b      	adds	r3, #11
 8007ac4:	404a      	eors	r2, r1
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	330c      	adds	r3, #12
 8007ace:	7819      	ldrb	r1, [r3, #0]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	404a      	eors	r2, r1
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	330d      	adds	r3, #13
 8007ae4:	7819      	ldrb	r1, [r3, #0]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	330d      	adds	r3, #13
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	330d      	adds	r3, #13
 8007af0:	404a      	eors	r2, r1
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	330e      	adds	r3, #14
 8007afa:	7819      	ldrb	r1, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	330e      	adds	r3, #14
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	330e      	adds	r3, #14
 8007b06:	404a      	eors	r2, r1
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	330f      	adds	r3, #15
 8007b10:	7819      	ldrb	r1, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	330f      	adds	r3, #15
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	330f      	adds	r3, #15
 8007b1c:	404a      	eors	r2, r1
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
#endif
}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b002      	add	sp, #8
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	4053      	eors	r3, r2
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	7819      	ldrb	r1, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	404a      	eors	r2, r1
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	3302      	adds	r3, #2
 8007b60:	7819      	ldrb	r1, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3302      	adds	r3, #2
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3302      	adds	r3, #2
 8007b6c:	404a      	eors	r2, r1
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3303      	adds	r3, #3
 8007b76:	7819      	ldrb	r1, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3303      	adds	r3, #3
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3303      	adds	r3, #3
 8007b82:	404a      	eors	r2, r1
 8007b84:	b2d2      	uxtb	r2, r2
 8007b86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	7819      	ldrb	r1, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3304      	adds	r3, #4
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3304      	adds	r3, #4
 8007b98:	404a      	eors	r2, r1
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3305      	adds	r3, #5
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3305      	adds	r3, #5
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3305      	adds	r3, #5
 8007bae:	404a      	eors	r2, r1
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	3306      	adds	r3, #6
 8007bb8:	7819      	ldrb	r1, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3306      	adds	r3, #6
 8007bbe:	781a      	ldrb	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3306      	adds	r3, #6
 8007bc4:	404a      	eors	r2, r1
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	7819      	ldrb	r1, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3307      	adds	r3, #7
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3307      	adds	r3, #7
 8007bda:	404a      	eors	r2, r1
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	3308      	adds	r3, #8
 8007be4:	7819      	ldrb	r1, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3308      	adds	r3, #8
 8007bea:	781a      	ldrb	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	404a      	eors	r2, r1
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	3309      	adds	r3, #9
 8007bfa:	7819      	ldrb	r1, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3309      	adds	r3, #9
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3309      	adds	r3, #9
 8007c06:	404a      	eors	r2, r1
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	330a      	adds	r3, #10
 8007c10:	7819      	ldrb	r1, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	330a      	adds	r3, #10
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	330a      	adds	r3, #10
 8007c1c:	404a      	eors	r2, r1
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	330b      	adds	r3, #11
 8007c26:	7819      	ldrb	r1, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	330b      	adds	r3, #11
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	330b      	adds	r3, #11
 8007c32:	404a      	eors	r2, r1
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	7819      	ldrb	r1, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	330c      	adds	r3, #12
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	330c      	adds	r3, #12
 8007c48:	404a      	eors	r2, r1
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	330d      	adds	r3, #13
 8007c52:	7819      	ldrb	r1, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	330d      	adds	r3, #13
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	330d      	adds	r3, #13
 8007c5e:	404a      	eors	r2, r1
 8007c60:	b2d2      	uxtb	r2, r2
 8007c62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	330e      	adds	r3, #14
 8007c68:	7819      	ldrb	r1, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	330e      	adds	r3, #14
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	330e      	adds	r3, #14
 8007c74:	404a      	eors	r2, r1
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	330f      	adds	r3, #15
 8007c7e:	7819      	ldrb	r1, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	330f      	adds	r3, #15
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	330f      	adds	r3, #15
 8007c8a:	404a      	eors	r2, r1
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007c90:	46c0      	nop			; (mov r8, r8)
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b004      	add	sp, #16
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	0011      	movs	r1, r2
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7ff fe88 	bl	80079be <xor_block>
}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	4b4c      	ldr	r3, [pc, #304]	; (8007df8 <shift_sub_rows+0x140>)
 8007cc8:	5c9a      	ldrb	r2, [r3, r2]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	0019      	movs	r1, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4a47      	ldr	r2, [pc, #284]	; (8007df8 <shift_sub_rows+0x140>)
 8007cdc:	5c52      	ldrb	r2, [r2, r1]
 8007cde:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	0019      	movs	r1, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3308      	adds	r3, #8
 8007cec:	4a42      	ldr	r2, [pc, #264]	; (8007df8 <shift_sub_rows+0x140>)
 8007cee:	5c52      	ldrb	r2, [r2, r1]
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	0019      	movs	r1, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	4a3e      	ldr	r2, [pc, #248]	; (8007df8 <shift_sub_rows+0x140>)
 8007d00:	5c52      	ldrb	r2, [r2, r1]
 8007d02:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007d04:	200f      	movs	r0, #15
 8007d06:	183b      	adds	r3, r7, r0
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7852      	ldrb	r2, [r2, #1]
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3305      	adds	r3, #5
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	0019      	movs	r1, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	4a37      	ldr	r2, [pc, #220]	; (8007df8 <shift_sub_rows+0x140>)
 8007d1c:	5c52      	ldrb	r2, [r2, r1]
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3309      	adds	r3, #9
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	0019      	movs	r1, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3305      	adds	r3, #5
 8007d2c:	4a32      	ldr	r2, [pc, #200]	; (8007df8 <shift_sub_rows+0x140>)
 8007d2e:	5c52      	ldrb	r2, [r2, r1]
 8007d30:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	330d      	adds	r3, #13
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	0019      	movs	r1, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3309      	adds	r3, #9
 8007d3e:	4a2e      	ldr	r2, [pc, #184]	; (8007df8 <shift_sub_rows+0x140>)
 8007d40:	5c52      	ldrb	r2, [r2, r1]
 8007d42:	701a      	strb	r2, [r3, #0]
 8007d44:	183b      	adds	r3, r7, r0
 8007d46:	781a      	ldrb	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	330d      	adds	r3, #13
 8007d4c:	492a      	ldr	r1, [pc, #168]	; (8007df8 <shift_sub_rows+0x140>)
 8007d4e:	5c8a      	ldrb	r2, [r1, r2]
 8007d50:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007d52:	183b      	adds	r3, r7, r0
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7892      	ldrb	r2, [r2, #2]
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	330a      	adds	r3, #10
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	0019      	movs	r1, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3302      	adds	r3, #2
 8007d66:	4a24      	ldr	r2, [pc, #144]	; (8007df8 <shift_sub_rows+0x140>)
 8007d68:	5c52      	ldrb	r2, [r2, r1]
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	183b      	adds	r3, r7, r0
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	330a      	adds	r3, #10
 8007d74:	4920      	ldr	r1, [pc, #128]	; (8007df8 <shift_sub_rows+0x140>)
 8007d76:	5c8a      	ldrb	r2, [r1, r2]
 8007d78:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007d7a:	183b      	adds	r3, r7, r0
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7992      	ldrb	r2, [r2, #6]
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	330e      	adds	r3, #14
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	0019      	movs	r1, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3306      	adds	r3, #6
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	; (8007df8 <shift_sub_rows+0x140>)
 8007d90:	5c52      	ldrb	r2, [r2, r1]
 8007d92:	701a      	strb	r2, [r3, #0]
 8007d94:	183b      	adds	r3, r7, r0
 8007d96:	781a      	ldrb	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	330e      	adds	r3, #14
 8007d9c:	4916      	ldr	r1, [pc, #88]	; (8007df8 <shift_sub_rows+0x140>)
 8007d9e:	5c8a      	ldrb	r2, [r1, r2]
 8007da0:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007da2:	183b      	adds	r3, r7, r0
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7bd2      	ldrb	r2, [r2, #15]
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	330b      	adds	r3, #11
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	0019      	movs	r1, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	330f      	adds	r3, #15
 8007db6:	4a10      	ldr	r2, [pc, #64]	; (8007df8 <shift_sub_rows+0x140>)
 8007db8:	5c52      	ldrb	r2, [r2, r1]
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3307      	adds	r3, #7
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	330b      	adds	r3, #11
 8007dc8:	4a0b      	ldr	r2, [pc, #44]	; (8007df8 <shift_sub_rows+0x140>)
 8007dca:	5c52      	ldrb	r2, [r2, r1]
 8007dcc:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	0019      	movs	r1, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3307      	adds	r3, #7
 8007dda:	4a07      	ldr	r2, [pc, #28]	; (8007df8 <shift_sub_rows+0x140>)
 8007ddc:	5c52      	ldrb	r2, [r2, r1]
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	183b      	adds	r3, r7, r0
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3303      	adds	r3, #3
 8007de8:	4903      	ldr	r1, [pc, #12]	; (8007df8 <shift_sub_rows+0x140>)
 8007dea:	5c8a      	ldrb	r2, [r1, r2]
 8007dec:	701a      	strb	r2, [r3, #0]
}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b004      	add	sp, #16
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	0801b7b0 	.word	0x0801b7b0

08007dfc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8007dfc:	b590      	push	{r4, r7, lr}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	2008      	movs	r0, #8
 8007e08:	0004      	movs	r4, r0
 8007e0a:	183b      	adds	r3, r7, r0
 8007e0c:	0011      	movs	r1, r2
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7ff fd62 	bl	80078d8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007e14:	0020      	movs	r0, r4
 8007e16:	183b      	adds	r3, r7, r0
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	4be7      	ldr	r3, [pc, #924]	; (80081bc <mix_sub_columns+0x3c0>)
 8007e1e:	5c9a      	ldrb	r2, [r3, r2]
 8007e20:	183b      	adds	r3, r7, r0
 8007e22:	795b      	ldrb	r3, [r3, #5]
 8007e24:	0019      	movs	r1, r3
 8007e26:	4be6      	ldr	r3, [pc, #920]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007e28:	5c5b      	ldrb	r3, [r3, r1]
 8007e2a:	4053      	eors	r3, r2
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	183b      	adds	r3, r7, r0
 8007e30:	7a9b      	ldrb	r3, [r3, #10]
 8007e32:	0019      	movs	r1, r3
 8007e34:	4be3      	ldr	r3, [pc, #908]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007e36:	5c5b      	ldrb	r3, [r3, r1]
 8007e38:	4053      	eors	r3, r2
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	183b      	adds	r3, r7, r0
 8007e3e:	7bdb      	ldrb	r3, [r3, #15]
 8007e40:	0019      	movs	r1, r3
 8007e42:	4be0      	ldr	r3, [pc, #896]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007e44:	5c5b      	ldrb	r3, [r3, r1]
 8007e46:	4053      	eors	r3, r2
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007e4e:	183b      	adds	r3, r7, r0
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	001a      	movs	r2, r3
 8007e54:	4bdb      	ldr	r3, [pc, #876]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007e56:	5c9a      	ldrb	r2, [r3, r2]
 8007e58:	183b      	adds	r3, r7, r0
 8007e5a:	795b      	ldrb	r3, [r3, #5]
 8007e5c:	0019      	movs	r1, r3
 8007e5e:	4bd7      	ldr	r3, [pc, #860]	; (80081bc <mix_sub_columns+0x3c0>)
 8007e60:	5c5b      	ldrb	r3, [r3, r1]
 8007e62:	4053      	eors	r3, r2
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	183b      	adds	r3, r7, r0
 8007e68:	7a9b      	ldrb	r3, [r3, #10]
 8007e6a:	0019      	movs	r1, r3
 8007e6c:	4bd4      	ldr	r3, [pc, #848]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007e6e:	5c5b      	ldrb	r3, [r3, r1]
 8007e70:	4053      	eors	r3, r2
 8007e72:	b2d9      	uxtb	r1, r3
 8007e74:	183b      	adds	r3, r7, r0
 8007e76:	7bdb      	ldrb	r3, [r3, #15]
 8007e78:	001a      	movs	r2, r3
 8007e7a:	4bd2      	ldr	r3, [pc, #840]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007e7c:	5c9a      	ldrb	r2, [r3, r2]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3301      	adds	r3, #1
 8007e82:	404a      	eors	r2, r1
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007e88:	183b      	adds	r3, r7, r0
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	4bcd      	ldr	r3, [pc, #820]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007e90:	5c9a      	ldrb	r2, [r3, r2]
 8007e92:	183b      	adds	r3, r7, r0
 8007e94:	795b      	ldrb	r3, [r3, #5]
 8007e96:	0019      	movs	r1, r3
 8007e98:	4bca      	ldr	r3, [pc, #808]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007e9a:	5c5b      	ldrb	r3, [r3, r1]
 8007e9c:	4053      	eors	r3, r2
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	183b      	adds	r3, r7, r0
 8007ea2:	7a9b      	ldrb	r3, [r3, #10]
 8007ea4:	0019      	movs	r1, r3
 8007ea6:	4bc5      	ldr	r3, [pc, #788]	; (80081bc <mix_sub_columns+0x3c0>)
 8007ea8:	5c5b      	ldrb	r3, [r3, r1]
 8007eaa:	4053      	eors	r3, r2
 8007eac:	b2d9      	uxtb	r1, r3
 8007eae:	183b      	adds	r3, r7, r0
 8007eb0:	7bdb      	ldrb	r3, [r3, #15]
 8007eb2:	001a      	movs	r2, r3
 8007eb4:	4bc2      	ldr	r3, [pc, #776]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007eb6:	5c9a      	ldrb	r2, [r3, r2]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3302      	adds	r3, #2
 8007ebc:	404a      	eors	r2, r1
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007ec2:	183b      	adds	r3, r7, r0
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	001a      	movs	r2, r3
 8007ec8:	4bbd      	ldr	r3, [pc, #756]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007eca:	5c9a      	ldrb	r2, [r3, r2]
 8007ecc:	183b      	adds	r3, r7, r0
 8007ece:	795b      	ldrb	r3, [r3, #5]
 8007ed0:	0019      	movs	r1, r3
 8007ed2:	4bbc      	ldr	r3, [pc, #752]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007ed4:	5c5b      	ldrb	r3, [r3, r1]
 8007ed6:	4053      	eors	r3, r2
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	183b      	adds	r3, r7, r0
 8007edc:	7a9b      	ldrb	r3, [r3, #10]
 8007ede:	0019      	movs	r1, r3
 8007ee0:	4bb8      	ldr	r3, [pc, #736]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007ee2:	5c5b      	ldrb	r3, [r3, r1]
 8007ee4:	4053      	eors	r3, r2
 8007ee6:	b2d9      	uxtb	r1, r3
 8007ee8:	183b      	adds	r3, r7, r0
 8007eea:	7bdb      	ldrb	r3, [r3, #15]
 8007eec:	001a      	movs	r2, r3
 8007eee:	4bb3      	ldr	r3, [pc, #716]	; (80081bc <mix_sub_columns+0x3c0>)
 8007ef0:	5c9a      	ldrb	r2, [r3, r2]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3303      	adds	r3, #3
 8007ef6:	404a      	eors	r2, r1
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007efc:	183b      	adds	r3, r7, r0
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	001a      	movs	r2, r3
 8007f02:	4bae      	ldr	r3, [pc, #696]	; (80081bc <mix_sub_columns+0x3c0>)
 8007f04:	5c9a      	ldrb	r2, [r3, r2]
 8007f06:	183b      	adds	r3, r7, r0
 8007f08:	7a5b      	ldrb	r3, [r3, #9]
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	4bac      	ldr	r3, [pc, #688]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007f0e:	5c5b      	ldrb	r3, [r3, r1]
 8007f10:	4053      	eors	r3, r2
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	183b      	adds	r3, r7, r0
 8007f16:	7b9b      	ldrb	r3, [r3, #14]
 8007f18:	0019      	movs	r1, r3
 8007f1a:	4baa      	ldr	r3, [pc, #680]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007f1c:	5c5b      	ldrb	r3, [r3, r1]
 8007f1e:	4053      	eors	r3, r2
 8007f20:	b2d9      	uxtb	r1, r3
 8007f22:	183b      	adds	r3, r7, r0
 8007f24:	78db      	ldrb	r3, [r3, #3]
 8007f26:	001a      	movs	r2, r3
 8007f28:	4ba6      	ldr	r3, [pc, #664]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007f2a:	5c9a      	ldrb	r2, [r3, r2]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	404a      	eors	r2, r1
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007f36:	183b      	adds	r3, r7, r0
 8007f38:	791b      	ldrb	r3, [r3, #4]
 8007f3a:	001a      	movs	r2, r3
 8007f3c:	4ba1      	ldr	r3, [pc, #644]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007f3e:	5c9a      	ldrb	r2, [r3, r2]
 8007f40:	183b      	adds	r3, r7, r0
 8007f42:	7a5b      	ldrb	r3, [r3, #9]
 8007f44:	0019      	movs	r1, r3
 8007f46:	4b9d      	ldr	r3, [pc, #628]	; (80081bc <mix_sub_columns+0x3c0>)
 8007f48:	5c5b      	ldrb	r3, [r3, r1]
 8007f4a:	4053      	eors	r3, r2
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	183b      	adds	r3, r7, r0
 8007f50:	7b9b      	ldrb	r3, [r3, #14]
 8007f52:	0019      	movs	r1, r3
 8007f54:	4b9a      	ldr	r3, [pc, #616]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007f56:	5c5b      	ldrb	r3, [r3, r1]
 8007f58:	4053      	eors	r3, r2
 8007f5a:	b2d9      	uxtb	r1, r3
 8007f5c:	183b      	adds	r3, r7, r0
 8007f5e:	78db      	ldrb	r3, [r3, #3]
 8007f60:	001a      	movs	r2, r3
 8007f62:	4b98      	ldr	r3, [pc, #608]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007f64:	5c9a      	ldrb	r2, [r3, r2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3305      	adds	r3, #5
 8007f6a:	404a      	eors	r2, r1
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007f70:	183b      	adds	r3, r7, r0
 8007f72:	791b      	ldrb	r3, [r3, #4]
 8007f74:	001a      	movs	r2, r3
 8007f76:	4b93      	ldr	r3, [pc, #588]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007f78:	5c9a      	ldrb	r2, [r3, r2]
 8007f7a:	183b      	adds	r3, r7, r0
 8007f7c:	7a5b      	ldrb	r3, [r3, #9]
 8007f7e:	0019      	movs	r1, r3
 8007f80:	4b90      	ldr	r3, [pc, #576]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007f82:	5c5b      	ldrb	r3, [r3, r1]
 8007f84:	4053      	eors	r3, r2
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	183b      	adds	r3, r7, r0
 8007f8a:	7b9b      	ldrb	r3, [r3, #14]
 8007f8c:	0019      	movs	r1, r3
 8007f8e:	4b8b      	ldr	r3, [pc, #556]	; (80081bc <mix_sub_columns+0x3c0>)
 8007f90:	5c5b      	ldrb	r3, [r3, r1]
 8007f92:	4053      	eors	r3, r2
 8007f94:	b2d9      	uxtb	r1, r3
 8007f96:	183b      	adds	r3, r7, r0
 8007f98:	78db      	ldrb	r3, [r3, #3]
 8007f9a:	001a      	movs	r2, r3
 8007f9c:	4b88      	ldr	r3, [pc, #544]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007f9e:	5c9a      	ldrb	r2, [r3, r2]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3306      	adds	r3, #6
 8007fa4:	404a      	eors	r2, r1
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007faa:	183b      	adds	r3, r7, r0
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	001a      	movs	r2, r3
 8007fb0:	4b83      	ldr	r3, [pc, #524]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007fb2:	5c9a      	ldrb	r2, [r3, r2]
 8007fb4:	183b      	adds	r3, r7, r0
 8007fb6:	7a5b      	ldrb	r3, [r3, #9]
 8007fb8:	0019      	movs	r1, r3
 8007fba:	4b82      	ldr	r3, [pc, #520]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007fbc:	5c5b      	ldrb	r3, [r3, r1]
 8007fbe:	4053      	eors	r3, r2
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	183b      	adds	r3, r7, r0
 8007fc4:	7b9b      	ldrb	r3, [r3, #14]
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	4b7e      	ldr	r3, [pc, #504]	; (80081c4 <mix_sub_columns+0x3c8>)
 8007fca:	5c5b      	ldrb	r3, [r3, r1]
 8007fcc:	4053      	eors	r3, r2
 8007fce:	b2d9      	uxtb	r1, r3
 8007fd0:	183b      	adds	r3, r7, r0
 8007fd2:	78db      	ldrb	r3, [r3, #3]
 8007fd4:	001a      	movs	r2, r3
 8007fd6:	4b79      	ldr	r3, [pc, #484]	; (80081bc <mix_sub_columns+0x3c0>)
 8007fd8:	5c9a      	ldrb	r2, [r3, r2]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3307      	adds	r3, #7
 8007fde:	404a      	eors	r2, r1
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007fe4:	183b      	adds	r3, r7, r0
 8007fe6:	7a1b      	ldrb	r3, [r3, #8]
 8007fe8:	001a      	movs	r2, r3
 8007fea:	4b74      	ldr	r3, [pc, #464]	; (80081bc <mix_sub_columns+0x3c0>)
 8007fec:	5c9a      	ldrb	r2, [r3, r2]
 8007fee:	183b      	adds	r3, r7, r0
 8007ff0:	7b5b      	ldrb	r3, [r3, #13]
 8007ff2:	0019      	movs	r1, r3
 8007ff4:	4b72      	ldr	r3, [pc, #456]	; (80081c0 <mix_sub_columns+0x3c4>)
 8007ff6:	5c5b      	ldrb	r3, [r3, r1]
 8007ff8:	4053      	eors	r3, r2
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	183b      	adds	r3, r7, r0
 8007ffe:	789b      	ldrb	r3, [r3, #2]
 8008000:	0019      	movs	r1, r3
 8008002:	4b70      	ldr	r3, [pc, #448]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008004:	5c5b      	ldrb	r3, [r3, r1]
 8008006:	4053      	eors	r3, r2
 8008008:	b2d9      	uxtb	r1, r3
 800800a:	183b      	adds	r3, r7, r0
 800800c:	79db      	ldrb	r3, [r3, #7]
 800800e:	001a      	movs	r2, r3
 8008010:	4b6c      	ldr	r3, [pc, #432]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008012:	5c9a      	ldrb	r2, [r3, r2]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3308      	adds	r3, #8
 8008018:	404a      	eors	r2, r1
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800801e:	183b      	adds	r3, r7, r0
 8008020:	7a1b      	ldrb	r3, [r3, #8]
 8008022:	001a      	movs	r2, r3
 8008024:	4b67      	ldr	r3, [pc, #412]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008026:	5c9a      	ldrb	r2, [r3, r2]
 8008028:	183b      	adds	r3, r7, r0
 800802a:	7b5b      	ldrb	r3, [r3, #13]
 800802c:	0019      	movs	r1, r3
 800802e:	4b63      	ldr	r3, [pc, #396]	; (80081bc <mix_sub_columns+0x3c0>)
 8008030:	5c5b      	ldrb	r3, [r3, r1]
 8008032:	4053      	eors	r3, r2
 8008034:	b2da      	uxtb	r2, r3
 8008036:	183b      	adds	r3, r7, r0
 8008038:	789b      	ldrb	r3, [r3, #2]
 800803a:	0019      	movs	r1, r3
 800803c:	4b60      	ldr	r3, [pc, #384]	; (80081c0 <mix_sub_columns+0x3c4>)
 800803e:	5c5b      	ldrb	r3, [r3, r1]
 8008040:	4053      	eors	r3, r2
 8008042:	b2d9      	uxtb	r1, r3
 8008044:	183b      	adds	r3, r7, r0
 8008046:	79db      	ldrb	r3, [r3, #7]
 8008048:	001a      	movs	r2, r3
 800804a:	4b5e      	ldr	r3, [pc, #376]	; (80081c4 <mix_sub_columns+0x3c8>)
 800804c:	5c9a      	ldrb	r2, [r3, r2]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3309      	adds	r3, #9
 8008052:	404a      	eors	r2, r1
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8008058:	183b      	adds	r3, r7, r0
 800805a:	7a1b      	ldrb	r3, [r3, #8]
 800805c:	001a      	movs	r2, r3
 800805e:	4b59      	ldr	r3, [pc, #356]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008060:	5c9a      	ldrb	r2, [r3, r2]
 8008062:	183b      	adds	r3, r7, r0
 8008064:	7b5b      	ldrb	r3, [r3, #13]
 8008066:	0019      	movs	r1, r3
 8008068:	4b56      	ldr	r3, [pc, #344]	; (80081c4 <mix_sub_columns+0x3c8>)
 800806a:	5c5b      	ldrb	r3, [r3, r1]
 800806c:	4053      	eors	r3, r2
 800806e:	b2da      	uxtb	r2, r3
 8008070:	183b      	adds	r3, r7, r0
 8008072:	789b      	ldrb	r3, [r3, #2]
 8008074:	0019      	movs	r1, r3
 8008076:	4b51      	ldr	r3, [pc, #324]	; (80081bc <mix_sub_columns+0x3c0>)
 8008078:	5c5b      	ldrb	r3, [r3, r1]
 800807a:	4053      	eors	r3, r2
 800807c:	b2d9      	uxtb	r1, r3
 800807e:	183b      	adds	r3, r7, r0
 8008080:	79db      	ldrb	r3, [r3, #7]
 8008082:	001a      	movs	r2, r3
 8008084:	4b4e      	ldr	r3, [pc, #312]	; (80081c0 <mix_sub_columns+0x3c4>)
 8008086:	5c9a      	ldrb	r2, [r3, r2]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	330a      	adds	r3, #10
 800808c:	404a      	eors	r2, r1
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8008092:	183b      	adds	r3, r7, r0
 8008094:	7a1b      	ldrb	r3, [r3, #8]
 8008096:	001a      	movs	r2, r3
 8008098:	4b49      	ldr	r3, [pc, #292]	; (80081c0 <mix_sub_columns+0x3c4>)
 800809a:	5c9a      	ldrb	r2, [r3, r2]
 800809c:	183b      	adds	r3, r7, r0
 800809e:	7b5b      	ldrb	r3, [r3, #13]
 80080a0:	0019      	movs	r1, r3
 80080a2:	4b48      	ldr	r3, [pc, #288]	; (80081c4 <mix_sub_columns+0x3c8>)
 80080a4:	5c5b      	ldrb	r3, [r3, r1]
 80080a6:	4053      	eors	r3, r2
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	183b      	adds	r3, r7, r0
 80080ac:	789b      	ldrb	r3, [r3, #2]
 80080ae:	0019      	movs	r1, r3
 80080b0:	4b44      	ldr	r3, [pc, #272]	; (80081c4 <mix_sub_columns+0x3c8>)
 80080b2:	5c5b      	ldrb	r3, [r3, r1]
 80080b4:	4053      	eors	r3, r2
 80080b6:	b2d9      	uxtb	r1, r3
 80080b8:	183b      	adds	r3, r7, r0
 80080ba:	79db      	ldrb	r3, [r3, #7]
 80080bc:	001a      	movs	r2, r3
 80080be:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <mix_sub_columns+0x3c0>)
 80080c0:	5c9a      	ldrb	r2, [r3, r2]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	330b      	adds	r3, #11
 80080c6:	404a      	eors	r2, r1
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80080cc:	183b      	adds	r3, r7, r0
 80080ce:	7b1b      	ldrb	r3, [r3, #12]
 80080d0:	001a      	movs	r2, r3
 80080d2:	4b3a      	ldr	r3, [pc, #232]	; (80081bc <mix_sub_columns+0x3c0>)
 80080d4:	5c9a      	ldrb	r2, [r3, r2]
 80080d6:	183b      	adds	r3, r7, r0
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	0019      	movs	r1, r3
 80080dc:	4b38      	ldr	r3, [pc, #224]	; (80081c0 <mix_sub_columns+0x3c4>)
 80080de:	5c5b      	ldrb	r3, [r3, r1]
 80080e0:	4053      	eors	r3, r2
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	183b      	adds	r3, r7, r0
 80080e6:	799b      	ldrb	r3, [r3, #6]
 80080e8:	0019      	movs	r1, r3
 80080ea:	4b36      	ldr	r3, [pc, #216]	; (80081c4 <mix_sub_columns+0x3c8>)
 80080ec:	5c5b      	ldrb	r3, [r3, r1]
 80080ee:	4053      	eors	r3, r2
 80080f0:	b2d9      	uxtb	r1, r3
 80080f2:	183b      	adds	r3, r7, r0
 80080f4:	7adb      	ldrb	r3, [r3, #11]
 80080f6:	001a      	movs	r2, r3
 80080f8:	4b32      	ldr	r3, [pc, #200]	; (80081c4 <mix_sub_columns+0x3c8>)
 80080fa:	5c9a      	ldrb	r2, [r3, r2]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	330c      	adds	r3, #12
 8008100:	404a      	eors	r2, r1
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8008106:	183b      	adds	r3, r7, r0
 8008108:	7b1b      	ldrb	r3, [r3, #12]
 800810a:	001a      	movs	r2, r3
 800810c:	4b2d      	ldr	r3, [pc, #180]	; (80081c4 <mix_sub_columns+0x3c8>)
 800810e:	5c9a      	ldrb	r2, [r3, r2]
 8008110:	183b      	adds	r3, r7, r0
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	0019      	movs	r1, r3
 8008116:	4b29      	ldr	r3, [pc, #164]	; (80081bc <mix_sub_columns+0x3c0>)
 8008118:	5c5b      	ldrb	r3, [r3, r1]
 800811a:	4053      	eors	r3, r2
 800811c:	b2da      	uxtb	r2, r3
 800811e:	183b      	adds	r3, r7, r0
 8008120:	799b      	ldrb	r3, [r3, #6]
 8008122:	0019      	movs	r1, r3
 8008124:	4b26      	ldr	r3, [pc, #152]	; (80081c0 <mix_sub_columns+0x3c4>)
 8008126:	5c5b      	ldrb	r3, [r3, r1]
 8008128:	4053      	eors	r3, r2
 800812a:	b2d9      	uxtb	r1, r3
 800812c:	183b      	adds	r3, r7, r0
 800812e:	7adb      	ldrb	r3, [r3, #11]
 8008130:	001a      	movs	r2, r3
 8008132:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008134:	5c9a      	ldrb	r2, [r3, r2]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	330d      	adds	r3, #13
 800813a:	404a      	eors	r2, r1
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8008140:	183b      	adds	r3, r7, r0
 8008142:	7b1b      	ldrb	r3, [r3, #12]
 8008144:	001a      	movs	r2, r3
 8008146:	4b1f      	ldr	r3, [pc, #124]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008148:	5c9a      	ldrb	r2, [r3, r2]
 800814a:	183b      	adds	r3, r7, r0
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	0019      	movs	r1, r3
 8008150:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <mix_sub_columns+0x3c8>)
 8008152:	5c5b      	ldrb	r3, [r3, r1]
 8008154:	4053      	eors	r3, r2
 8008156:	b2da      	uxtb	r2, r3
 8008158:	183b      	adds	r3, r7, r0
 800815a:	799b      	ldrb	r3, [r3, #6]
 800815c:	0019      	movs	r1, r3
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <mix_sub_columns+0x3c0>)
 8008160:	5c5b      	ldrb	r3, [r3, r1]
 8008162:	4053      	eors	r3, r2
 8008164:	b2d9      	uxtb	r1, r3
 8008166:	183b      	adds	r3, r7, r0
 8008168:	7adb      	ldrb	r3, [r3, #11]
 800816a:	001a      	movs	r2, r3
 800816c:	4b14      	ldr	r3, [pc, #80]	; (80081c0 <mix_sub_columns+0x3c4>)
 800816e:	5c9a      	ldrb	r2, [r3, r2]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	330e      	adds	r3, #14
 8008174:	404a      	eors	r2, r1
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800817a:	183b      	adds	r3, r7, r0
 800817c:	7b1b      	ldrb	r3, [r3, #12]
 800817e:	001a      	movs	r2, r3
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <mix_sub_columns+0x3c4>)
 8008182:	5c9a      	ldrb	r2, [r3, r2]
 8008184:	183b      	adds	r3, r7, r0
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	0019      	movs	r1, r3
 800818a:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <mix_sub_columns+0x3c8>)
 800818c:	5c5b      	ldrb	r3, [r3, r1]
 800818e:	4053      	eors	r3, r2
 8008190:	b2da      	uxtb	r2, r3
 8008192:	183b      	adds	r3, r7, r0
 8008194:	799b      	ldrb	r3, [r3, #6]
 8008196:	0019      	movs	r1, r3
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <mix_sub_columns+0x3c8>)
 800819a:	5c5b      	ldrb	r3, [r3, r1]
 800819c:	4053      	eors	r3, r2
 800819e:	b2d9      	uxtb	r1, r3
 80081a0:	183b      	adds	r3, r7, r0
 80081a2:	7adb      	ldrb	r3, [r3, #11]
 80081a4:	001a      	movs	r2, r3
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <mix_sub_columns+0x3c0>)
 80081a8:	5c9a      	ldrb	r2, [r3, r2]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	330f      	adds	r3, #15
 80081ae:	404a      	eors	r2, r1
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]
  }
 80081b4:	46c0      	nop			; (mov r8, r8)
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b007      	add	sp, #28
 80081ba:	bd90      	pop	{r4, r7, pc}
 80081bc:	0801b8b0 	.word	0x0801b8b0
 80081c0:	0801b9b0 	.word	0x0801b9b0
 80081c4:	0801b7b0 	.word	0x0801b7b0

080081c8 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	200b      	movs	r0, #11
 80081d4:	183b      	adds	r3, r7, r0
 80081d6:	1c0a      	adds	r2, r1, #0
 80081d8:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 80081da:	183b      	adds	r3, r7, r0
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b18      	cmp	r3, #24
 80081e0:	d009      	beq.n	80081f6 <aes_set_key+0x2e>
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d007      	beq.n	80081f6 <aes_set_key+0x2e>
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d005      	beq.n	80081f6 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	22f0      	movs	r2, #240	; 0xf0
 80081ee:	2100      	movs	r1, #0
 80081f0:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 80081f2:	23ff      	movs	r3, #255	; 0xff
 80081f4:	e113      	b.n	800841e <aes_set_key+0x256>
        break;
 80081f6:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	240b      	movs	r4, #11
 80081fc:	193b      	adds	r3, r7, r4
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	0019      	movs	r1, r3
 8008204:	f7ff fbc0 	bl	8007988 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8008208:	0020      	movs	r0, r4
 800820a:	183b      	adds	r3, r7, r0
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	331c      	adds	r3, #28
 8008210:	b2da      	uxtb	r2, r3
 8008212:	2111      	movs	r1, #17
 8008214:	187b      	adds	r3, r7, r1
 8008216:	0092      	lsls	r2, r2, #2
 8008218:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800821a:	187b      	adds	r3, r7, r1
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	091b      	lsrs	r3, r3, #4
 8008220:	b2db      	uxtb	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b2d9      	uxtb	r1, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	22f0      	movs	r2, #240	; 0xf0
 800822a:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800822c:	2317      	movs	r3, #23
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	183a      	adds	r2, r7, r0
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	2316      	movs	r3, #22
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	e0e4      	b.n	800840a <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8008240:	2017      	movs	r0, #23
 8008242:	183b      	adds	r3, r7, r0
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	1f1a      	subs	r2, r3, #4
 8008248:	2315      	movs	r3, #21
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	5c8a      	ldrb	r2, [r1, r2]
 8008250:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 8008252:	183b      	adds	r3, r7, r0
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	1eda      	subs	r2, r3, #3
 8008258:	2314      	movs	r3, #20
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	5c8a      	ldrb	r2, [r1, r2]
 8008260:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 8008262:	183b      	adds	r3, r7, r0
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	1e9a      	subs	r2, r3, #2
 8008268:	2313      	movs	r3, #19
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	5c8a      	ldrb	r2, [r1, r2]
 8008270:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 8008272:	183b      	adds	r3, r7, r0
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	1e5a      	subs	r2, r3, #1
 8008278:	2312      	movs	r3, #18
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	5c8a      	ldrb	r2, [r1, r2]
 8008280:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 8008282:	183a      	adds	r2, r7, r0
 8008284:	230b      	movs	r3, #11
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	0019      	movs	r1, r3
 800828e:	0010      	movs	r0, r2
 8008290:	f7f7 ffc8 	bl	8000224 <__aeabi_uidivmod>
 8008294:	000b      	movs	r3, r1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d13e      	bne.n	800831a <aes_set_key+0x152>
        {
            tt = t0;
 800829c:	2410      	movs	r4, #16
 800829e:	193b      	adds	r3, r7, r4
 80082a0:	2015      	movs	r0, #21
 80082a2:	183a      	adds	r2, r7, r0
 80082a4:	7812      	ldrb	r2, [r2, #0]
 80082a6:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 80082a8:	2514      	movs	r5, #20
 80082aa:	197b      	adds	r3, r7, r5
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	4a5e      	ldr	r2, [pc, #376]	; (8008428 <aes_set_key+0x260>)
 80082b0:	5cd1      	ldrb	r1, [r2, r3]
 80082b2:	183b      	adds	r3, r7, r0
 80082b4:	2016      	movs	r0, #22
 80082b6:	183a      	adds	r2, r7, r0
 80082b8:	7812      	ldrb	r2, [r2, #0]
 80082ba:	404a      	eors	r2, r1
 80082bc:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 80082be:	2613      	movs	r6, #19
 80082c0:	19bb      	adds	r3, r7, r6
 80082c2:	781a      	ldrb	r2, [r3, #0]
 80082c4:	197b      	adds	r3, r7, r5
 80082c6:	4958      	ldr	r1, [pc, #352]	; (8008428 <aes_set_key+0x260>)
 80082c8:	5c8a      	ldrb	r2, [r1, r2]
 80082ca:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 80082cc:	2512      	movs	r5, #18
 80082ce:	197b      	adds	r3, r7, r5
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	19bb      	adds	r3, r7, r6
 80082d4:	4954      	ldr	r1, [pc, #336]	; (8008428 <aes_set_key+0x260>)
 80082d6:	5c8a      	ldrb	r2, [r1, r2]
 80082d8:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 80082da:	193b      	adds	r3, r7, r4
 80082dc:	781a      	ldrb	r2, [r3, #0]
 80082de:	197b      	adds	r3, r7, r5
 80082e0:	4951      	ldr	r1, [pc, #324]	; (8008428 <aes_set_key+0x260>)
 80082e2:	5c8a      	ldrb	r2, [r1, r2]
 80082e4:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 80082e6:	183b      	adds	r3, r7, r0
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	b25a      	sxtb	r2, r3
 80082ee:	0004      	movs	r4, r0
 80082f0:	183b      	adds	r3, r7, r0
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	09db      	lsrs	r3, r3, #7
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	1c19      	adds	r1, r3, #0
 80082fa:	1c0b      	adds	r3, r1, #0
 80082fc:	18db      	adds	r3, r3, r3
 80082fe:	185b      	adds	r3, r3, r1
 8008300:	1c19      	adds	r1, r3, #0
 8008302:	00c8      	lsls	r0, r1, #3
 8008304:	1c19      	adds	r1, r3, #0
 8008306:	1c03      	adds	r3, r0, #0
 8008308:	18cb      	adds	r3, r1, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	b25b      	sxtb	r3, r3
 800830e:	4053      	eors	r3, r2
 8008310:	b25a      	sxtb	r2, r3
 8008312:	0020      	movs	r0, r4
 8008314:	183b      	adds	r3, r7, r0
 8008316:	701a      	strb	r2, [r3, #0]
 8008318:	e02e      	b.n	8008378 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800831a:	230b      	movs	r3, #11
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b18      	cmp	r3, #24
 8008322:	d929      	bls.n	8008378 <aes_set_key+0x1b0>
 8008324:	2317      	movs	r3, #23
 8008326:	18fa      	adds	r2, r7, r3
 8008328:	230b      	movs	r3, #11
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	0019      	movs	r1, r3
 8008332:	0010      	movs	r0, r2
 8008334:	f7f7 ff76 	bl	8000224 <__aeabi_uidivmod>
 8008338:	000b      	movs	r3, r1
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b10      	cmp	r3, #16
 800833e:	d11b      	bne.n	8008378 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 8008340:	2115      	movs	r1, #21
 8008342:	187b      	adds	r3, r7, r1
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	187b      	adds	r3, r7, r1
 8008348:	4937      	ldr	r1, [pc, #220]	; (8008428 <aes_set_key+0x260>)
 800834a:	5c8a      	ldrb	r2, [r1, r2]
 800834c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800834e:	2114      	movs	r1, #20
 8008350:	187b      	adds	r3, r7, r1
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	187b      	adds	r3, r7, r1
 8008356:	4934      	ldr	r1, [pc, #208]	; (8008428 <aes_set_key+0x260>)
 8008358:	5c8a      	ldrb	r2, [r1, r2]
 800835a:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800835c:	2113      	movs	r1, #19
 800835e:	187b      	adds	r3, r7, r1
 8008360:	781a      	ldrb	r2, [r3, #0]
 8008362:	187b      	adds	r3, r7, r1
 8008364:	4930      	ldr	r1, [pc, #192]	; (8008428 <aes_set_key+0x260>)
 8008366:	5c8a      	ldrb	r2, [r1, r2]
 8008368:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800836a:	2112      	movs	r1, #18
 800836c:	187b      	adds	r3, r7, r1
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	187b      	adds	r3, r7, r1
 8008372:	492d      	ldr	r1, [pc, #180]	; (8008428 <aes_set_key+0x260>)
 8008374:	5c8a      	ldrb	r2, [r1, r2]
 8008376:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 8008378:	2410      	movs	r4, #16
 800837a:	193b      	adds	r3, r7, r4
 800837c:	2017      	movs	r0, #23
 800837e:	1839      	adds	r1, r7, r0
 8008380:	220b      	movs	r2, #11
 8008382:	18ba      	adds	r2, r7, r2
 8008384:	7809      	ldrb	r1, [r1, #0]
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	1a8a      	subs	r2, r1, r2
 800838a:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800838c:	193b      	adds	r3, r7, r4
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	5cd1      	ldrb	r1, [r2, r3]
 8008394:	183b      	adds	r3, r7, r0
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2215      	movs	r2, #21
 800839a:	18ba      	adds	r2, r7, r2
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	404a      	eors	r2, r1
 80083a0:	b2d1      	uxtb	r1, r2
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80083a6:	193b      	adds	r3, r7, r4
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	5cd1      	ldrb	r1, [r2, r3]
 80083b0:	183b      	adds	r3, r7, r0
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	2214      	movs	r2, #20
 80083b8:	18ba      	adds	r2, r7, r2
 80083ba:	7812      	ldrb	r2, [r2, #0]
 80083bc:	404a      	eors	r2, r1
 80083be:	b2d1      	uxtb	r1, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80083c4:	193b      	adds	r3, r7, r4
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	3302      	adds	r3, #2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	5cd1      	ldrb	r1, [r2, r3]
 80083ce:	183b      	adds	r3, r7, r0
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	3302      	adds	r3, #2
 80083d4:	2213      	movs	r2, #19
 80083d6:	18ba      	adds	r2, r7, r2
 80083d8:	7812      	ldrb	r2, [r2, #0]
 80083da:	404a      	eors	r2, r1
 80083dc:	b2d1      	uxtb	r1, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80083e2:	193b      	adds	r3, r7, r4
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	3303      	adds	r3, #3
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	5cd1      	ldrb	r1, [r2, r3]
 80083ec:	183b      	adds	r3, r7, r0
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	3303      	adds	r3, #3
 80083f2:	2212      	movs	r2, #18
 80083f4:	18ba      	adds	r2, r7, r2
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	404a      	eors	r2, r1
 80083fa:	b2d1      	uxtb	r1, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008400:	183b      	adds	r3, r7, r0
 8008402:	183a      	adds	r2, r7, r0
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	3204      	adds	r2, #4
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	2317      	movs	r3, #23
 800840c:	18fa      	adds	r2, r7, r3
 800840e:	2311      	movs	r3, #17
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	7812      	ldrb	r2, [r2, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d200      	bcs.n	800841c <aes_set_key+0x254>
 800841a:	e711      	b.n	8008240 <aes_set_key+0x78>
    }
    return 0;
 800841c:	2300      	movs	r3, #0
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b007      	add	sp, #28
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	0801b7b0 	.word	0x0801b7b0

0800842c <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800842c:	b5b0      	push	{r4, r5, r7, lr}
 800842e:	b08a      	sub	sp, #40	; 0x28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	22f0      	movs	r2, #240	; 0xf0
 800843c:	5c9b      	ldrb	r3, [r3, r2]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d03a      	beq.n	80084b8 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	2314      	movs	r3, #20
 8008448:	18fb      	adds	r3, r7, r3
 800844a:	0018      	movs	r0, r3
 800844c:	f7ff fb6d 	bl	8007b2a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8008450:	2327      	movs	r3, #39	; 0x27
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	2201      	movs	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e014      	b.n	8008484 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800845a:	2514      	movs	r5, #20
 800845c:	197b      	adds	r3, r7, r5
 800845e:	0018      	movs	r0, r3
 8008460:	f7ff fccc 	bl	8007dfc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2427      	movs	r4, #39	; 0x27
 8008468:	193a      	adds	r2, r7, r4
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	0112      	lsls	r2, r2, #4
 800846e:	189a      	adds	r2, r3, r2
 8008470:	197b      	adds	r3, r7, r5
 8008472:	0011      	movs	r1, r2
 8008474:	0018      	movs	r0, r3
 8008476:	f7ff fc0f 	bl	8007c98 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800847a:	193b      	adds	r3, r7, r4
 800847c:	193a      	adds	r2, r7, r4
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	3201      	adds	r2, #1
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	22f0      	movs	r2, #240	; 0xf0
 8008488:	5c9b      	ldrb	r3, [r3, r2]
 800848a:	2227      	movs	r2, #39	; 0x27
 800848c:	18ba      	adds	r2, r7, r2
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d3e2      	bcc.n	800845a <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8008494:	2414      	movs	r4, #20
 8008496:	193b      	adds	r3, r7, r4
 8008498:	0018      	movs	r0, r3
 800849a:	f7ff fc0d 	bl	8007cb8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2227      	movs	r2, #39	; 0x27
 80084a2:	18ba      	adds	r2, r7, r2
 80084a4:	7812      	ldrb	r2, [r2, #0]
 80084a6:	0112      	lsls	r2, r2, #4
 80084a8:	189a      	adds	r2, r3, r2
 80084aa:	1939      	adds	r1, r7, r4
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7ff fb3b 	bl	8007b2a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e000      	b.n	80084ba <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 80084b8:	23ff      	movs	r3, #255	; 0xff
}
 80084ba:	0018      	movs	r0, r3
 80084bc:	46bd      	mov	sp, r7
 80084be:	b00a      	add	sp, #40	; 0x28
 80084c0:	bdb0      	pop	{r4, r5, r7, pc}

080084c2 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	33f1      	adds	r3, #241	; 0xf1
 80084ce:	2210      	movs	r2, #16
 80084d0:	2100      	movs	r1, #0
 80084d2:	0018      	movs	r0, r3
 80084d4:	f008 fcd8 	bl	8010e88 <memset1>
            ctx->M_n = 0;
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	238a      	movs	r3, #138	; 0x8a
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	2100      	movs	r1, #0
 80084e0:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	22f0      	movs	r2, #240	; 0xf0
 80084e6:	2100      	movs	r1, #0
 80084e8:	0018      	movs	r0, r3
 80084ea:	f008 fccd 	bl	8010e88 <memset1>
}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	46bd      	mov	sp, r7
 80084f2:	b002      	add	sp, #8
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2110      	movs	r1, #16
 8008506:	0018      	movs	r0, r3
 8008508:	f7ff fe5e 	bl	80081c8 <aes_set_key>
}
 800850c:	46c0      	nop			; (mov r8, r8)
 800850e:	46bd      	mov	sp, r7
 8008510:	b002      	add	sp, #8
 8008512:	bd80      	pop	{r7, pc}

08008514 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b08d      	sub	sp, #52	; 0x34
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	238a      	movs	r3, #138	; 0x8a
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	58d3      	ldr	r3, [r2, r3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d100      	bne.n	800852e <AES_CMAC_Update+0x1a>
 800852c:	e097      	b.n	800865e <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	238a      	movs	r3, #138	; 0x8a
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	58d3      	ldr	r3, [r2, r3]
 8008536:	2210      	movs	r2, #16
 8008538:	1ad2      	subs	r2, r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4293      	cmp	r3, r2
 800853e:	d900      	bls.n	8008542 <AES_CMAC_Update+0x2e>
 8008540:	0013      	movs	r3, r2
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	1c9a      	adds	r2, r3, #2
 8008548:	32ff      	adds	r2, #255	; 0xff
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	238a      	movs	r3, #138	; 0x8a
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	58cb      	ldr	r3, [r1, r3]
 8008552:	18d3      	adds	r3, r2, r3
 8008554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008556:	b292      	uxth	r2, r2
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	0018      	movs	r0, r3
 800855c:	f008 fc58 	bl	8010e10 <memcpy1>
                    ctx->M_n += mlen;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	238a      	movs	r3, #138	; 0x8a
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	58d2      	ldr	r2, [r2, r3]
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	18d1      	adds	r1, r2, r3
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	238a      	movs	r3, #138	; 0x8a
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	238a      	movs	r3, #138	; 0x8a
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	58d3      	ldr	r3, [r2, r3]
 800857c:	2b0f      	cmp	r3, #15
 800857e:	d800      	bhi.n	8008582 <AES_CMAC_Update+0x6e>
 8008580:	e07f      	b.n	8008682 <AES_CMAC_Update+0x16e>
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	429a      	cmp	r2, r3
 8008588:	d100      	bne.n	800858c <AES_CMAC_Update+0x78>
 800858a:	e07a      	b.n	8008682 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800858c:	2300      	movs	r3, #0
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008590:	e018      	b.n	80085c4 <AES_CMAC_Update+0xb0>
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	21f1      	movs	r1, #241	; 0xf1
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	18d3      	adds	r3, r2, r3
 800859a:	185b      	adds	r3, r3, r1
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	2302      	movs	r3, #2
 80085a2:	33ff      	adds	r3, #255	; 0xff
 80085a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a6:	1841      	adds	r1, r0, r1
 80085a8:	18cb      	adds	r3, r1, r3
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4053      	eors	r3, r2
 80085ae:	b2d8      	uxtb	r0, r3
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	21f1      	movs	r1, #241	; 0xf1
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	18d3      	adds	r3, r2, r3
 80085b8:	185b      	adds	r3, r3, r1
 80085ba:	1c02      	adds	r2, r0, #0
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	3301      	adds	r3, #1
 80085c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	dde3      	ble.n	8008592 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	33f1      	adds	r3, #241	; 0xf1
 80085ce:	0018      	movs	r0, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	33f1      	adds	r3, #241	; 0xf1
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	0019      	movs	r1, r3
 80085d8:	f7ff ff28 	bl	800842c <aes_encrypt>
                    data += mlen;
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	18d3      	adds	r3, r2, r3
 80085e2:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 80085ec:	e037      	b.n	800865e <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 80085ee:	2300      	movs	r3, #0
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f2:	e015      	b.n	8008620 <AES_CMAC_Update+0x10c>
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	21f1      	movs	r1, #241	; 0xf1
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	185b      	adds	r3, r3, r1
 80085fe:	781a      	ldrb	r2, [r3, #0]
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	68b9      	ldr	r1, [r7, #8]
 8008604:	18cb      	adds	r3, r1, r3
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	4053      	eors	r3, r2
 800860a:	b2d8      	uxtb	r0, r3
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	21f1      	movs	r1, #241	; 0xf1
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	18d3      	adds	r3, r2, r3
 8008614:	185b      	adds	r3, r3, r1
 8008616:	1c02      	adds	r2, r0, #0
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	3301      	adds	r3, #1
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	2b0f      	cmp	r3, #15
 8008624:	dde6      	ble.n	80085f4 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	33f1      	adds	r3, #241	; 0xf1
 800862a:	0019      	movs	r1, r3
 800862c:	2414      	movs	r4, #20
 800862e:	193b      	adds	r3, r7, r4
 8008630:	2210      	movs	r2, #16
 8008632:	0018      	movs	r0, r3
 8008634:	f008 fbec 	bl	8010e10 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	1939      	adds	r1, r7, r4
 800863c:	193b      	adds	r3, r7, r4
 800863e:	0018      	movs	r0, r3
 8008640:	f7ff fef4 	bl	800842c <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	33f1      	adds	r3, #241	; 0xf1
 8008648:	1939      	adds	r1, r7, r4
 800864a:	2210      	movs	r2, #16
 800864c:	0018      	movs	r0, r3
 800864e:	f008 fbdf 	bl	8010e10 <memcpy1>

                    data += 16;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	3310      	adds	r3, #16
 8008656:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3b10      	subs	r3, #16
 800865c:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b10      	cmp	r3, #16
 8008662:	d8c4      	bhi.n	80085ee <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3302      	adds	r3, #2
 8008668:	33ff      	adds	r3, #255	; 0xff
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	b292      	uxth	r2, r2
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	0018      	movs	r0, r3
 8008672:	f008 fbcd 	bl	8010e10 <memcpy1>
            ctx->M_n = len;
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	238a      	movs	r3, #138	; 0x8a
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	50d1      	str	r1, [r2, r3]
 8008680:	e000      	b.n	8008684 <AES_CMAC_Update+0x170>
                            return;
 8008682:	46c0      	nop			; (mov r8, r8)
}
 8008684:	46bd      	mov	sp, r7
 8008686:	b00d      	add	sp, #52	; 0x34
 8008688:	bd90      	pop	{r4, r7, pc}

0800868a <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800868a:	b590      	push	{r4, r7, lr}
 800868c:	b093      	sub	sp, #76	; 0x4c
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8008694:	241c      	movs	r4, #28
 8008696:	193b      	adds	r3, r7, r4
 8008698:	2210      	movs	r2, #16
 800869a:	2100      	movs	r1, #0
 800869c:	0018      	movs	r0, r3
 800869e:	f008 fbf3 	bl	8010e88 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	1939      	adds	r1, r7, r4
 80086a6:	193b      	adds	r3, r7, r4
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7ff febf 	bl	800842c <aes_encrypt>

            if (K[0] & 0x80) {
 80086ae:	193b      	adds	r3, r7, r4
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	b25b      	sxtb	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da2e      	bge.n	8008716 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 80086b8:	2300      	movs	r3, #0
 80086ba:	647b      	str	r3, [r7, #68]	; 0x44
 80086bc:	e018      	b.n	80086f0 <AES_CMAC_Final+0x66>
 80086be:	201c      	movs	r0, #28
 80086c0:	183a      	adds	r2, r7, r0
 80086c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c4:	18d3      	adds	r3, r2, r3
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	b25a      	sxtb	r2, r3
 80086cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ce:	3301      	adds	r3, #1
 80086d0:	1839      	adds	r1, r7, r0
 80086d2:	5ccb      	ldrb	r3, [r1, r3]
 80086d4:	09db      	lsrs	r3, r3, #7
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	4313      	orrs	r3, r2
 80086dc:	b25b      	sxtb	r3, r3
 80086de:	b2d9      	uxtb	r1, r3
 80086e0:	183a      	adds	r2, r7, r0
 80086e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e4:	18d3      	adds	r3, r2, r3
 80086e6:	1c0a      	adds	r2, r1, #0
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ec:	3301      	adds	r3, #1
 80086ee:	647b      	str	r3, [r7, #68]	; 0x44
 80086f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f2:	2b0e      	cmp	r3, #14
 80086f4:	dde3      	ble.n	80086be <AES_CMAC_Final+0x34>
 80086f6:	211c      	movs	r1, #28
 80086f8:	187b      	adds	r3, r7, r1
 80086fa:	7bdb      	ldrb	r3, [r3, #15]
 80086fc:	18db      	adds	r3, r3, r3
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	187b      	adds	r3, r7, r1
 8008702:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8008704:	187b      	adds	r3, r7, r1
 8008706:	7bdb      	ldrb	r3, [r3, #15]
 8008708:	2279      	movs	r2, #121	; 0x79
 800870a:	4252      	negs	r2, r2
 800870c:	4053      	eors	r3, r2
 800870e:	b2da      	uxtb	r2, r3
 8008710:	187b      	adds	r3, r7, r1
 8008712:	73da      	strb	r2, [r3, #15]
 8008714:	e025      	b.n	8008762 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 8008716:	2300      	movs	r3, #0
 8008718:	643b      	str	r3, [r7, #64]	; 0x40
 800871a:	e018      	b.n	800874e <AES_CMAC_Final+0xc4>
 800871c:	201c      	movs	r0, #28
 800871e:	183a      	adds	r2, r7, r0
 8008720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008722:	18d3      	adds	r3, r2, r3
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	b25a      	sxtb	r2, r3
 800872a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872c:	3301      	adds	r3, #1
 800872e:	1839      	adds	r1, r7, r0
 8008730:	5ccb      	ldrb	r3, [r1, r3]
 8008732:	09db      	lsrs	r3, r3, #7
 8008734:	b2db      	uxtb	r3, r3
 8008736:	b25b      	sxtb	r3, r3
 8008738:	4313      	orrs	r3, r2
 800873a:	b25b      	sxtb	r3, r3
 800873c:	b2d9      	uxtb	r1, r3
 800873e:	183a      	adds	r2, r7, r0
 8008740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008742:	18d3      	adds	r3, r2, r3
 8008744:	1c0a      	adds	r2, r1, #0
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874a:	3301      	adds	r3, #1
 800874c:	643b      	str	r3, [r7, #64]	; 0x40
 800874e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008750:	2b0e      	cmp	r3, #14
 8008752:	dde3      	ble.n	800871c <AES_CMAC_Final+0x92>
 8008754:	211c      	movs	r1, #28
 8008756:	187b      	adds	r3, r7, r1
 8008758:	7bdb      	ldrb	r3, [r3, #15]
 800875a:	18db      	adds	r3, r3, r3
 800875c:	b2da      	uxtb	r2, r3
 800875e:	187b      	adds	r3, r7, r1
 8008760:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	238a      	movs	r3, #138	; 0x8a
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	58d3      	ldr	r3, [r2, r3]
 800876a:	2b10      	cmp	r3, #16
 800876c:	d11f      	bne.n	80087ae <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800876e:	2300      	movs	r3, #0
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008772:	e018      	b.n	80087a6 <AES_CMAC_Final+0x11c>
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	2302      	movs	r3, #2
 8008778:	33ff      	adds	r3, #255	; 0xff
 800877a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877c:	188a      	adds	r2, r1, r2
 800877e:	18d3      	adds	r3, r2, r3
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	231c      	movs	r3, #28
 8008784:	18f9      	adds	r1, r7, r3
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008788:	18cb      	adds	r3, r1, r3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	4053      	eors	r3, r2
 800878e:	b2d8      	uxtb	r0, r3
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	2302      	movs	r3, #2
 8008794:	33ff      	adds	r3, #255	; 0xff
 8008796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008798:	188a      	adds	r2, r1, r2
 800879a:	18d3      	adds	r3, r2, r3
 800879c:	1c02      	adds	r2, r0, #0
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a2:	3301      	adds	r3, #1
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a8:	2b0f      	cmp	r3, #15
 80087aa:	dde3      	ble.n	8008774 <AES_CMAC_Final+0xea>
 80087ac:	e09f      	b.n	80088ee <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 80087ae:	231c      	movs	r3, #28
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b25b      	sxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da2e      	bge.n	8008818 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 80087ba:	2300      	movs	r3, #0
 80087bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80087be:	e018      	b.n	80087f2 <AES_CMAC_Final+0x168>
 80087c0:	201c      	movs	r0, #28
 80087c2:	183a      	adds	r2, r7, r0
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	18d3      	adds	r3, r2, r3
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	b25a      	sxtb	r2, r3
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	3301      	adds	r3, #1
 80087d2:	1839      	adds	r1, r7, r0
 80087d4:	5ccb      	ldrb	r3, [r1, r3]
 80087d6:	09db      	lsrs	r3, r3, #7
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	4313      	orrs	r3, r2
 80087de:	b25b      	sxtb	r3, r3
 80087e0:	b2d9      	uxtb	r1, r3
 80087e2:	183a      	adds	r2, r7, r0
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	18d3      	adds	r3, r2, r3
 80087e8:	1c0a      	adds	r2, r1, #0
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	3301      	adds	r3, #1
 80087f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	2b0e      	cmp	r3, #14
 80087f6:	dde3      	ble.n	80087c0 <AES_CMAC_Final+0x136>
 80087f8:	211c      	movs	r1, #28
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	7bdb      	ldrb	r3, [r3, #15]
 80087fe:	18db      	adds	r3, r3, r3
 8008800:	b2da      	uxtb	r2, r3
 8008802:	187b      	adds	r3, r7, r1
 8008804:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8008806:	187b      	adds	r3, r7, r1
 8008808:	7bdb      	ldrb	r3, [r3, #15]
 800880a:	2279      	movs	r2, #121	; 0x79
 800880c:	4252      	negs	r2, r2
 800880e:	4053      	eors	r3, r2
 8008810:	b2da      	uxtb	r2, r3
 8008812:	187b      	adds	r3, r7, r1
 8008814:	73da      	strb	r2, [r3, #15]
 8008816:	e025      	b.n	8008864 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8008818:	2300      	movs	r3, #0
 800881a:	637b      	str	r3, [r7, #52]	; 0x34
 800881c:	e018      	b.n	8008850 <AES_CMAC_Final+0x1c6>
 800881e:	201c      	movs	r0, #28
 8008820:	183a      	adds	r2, r7, r0
 8008822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008824:	18d3      	adds	r3, r2, r3
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	b25a      	sxtb	r2, r3
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	3301      	adds	r3, #1
 8008830:	1839      	adds	r1, r7, r0
 8008832:	5ccb      	ldrb	r3, [r1, r3]
 8008834:	09db      	lsrs	r3, r3, #7
 8008836:	b2db      	uxtb	r3, r3
 8008838:	b25b      	sxtb	r3, r3
 800883a:	4313      	orrs	r3, r2
 800883c:	b25b      	sxtb	r3, r3
 800883e:	b2d9      	uxtb	r1, r3
 8008840:	183a      	adds	r2, r7, r0
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	18d3      	adds	r3, r2, r3
 8008846:	1c0a      	adds	r2, r1, #0
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	3301      	adds	r3, #1
 800884e:	637b      	str	r3, [r7, #52]	; 0x34
 8008850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008852:	2b0e      	cmp	r3, #14
 8008854:	dde3      	ble.n	800881e <AES_CMAC_Final+0x194>
 8008856:	211c      	movs	r1, #28
 8008858:	187b      	adds	r3, r7, r1
 800885a:	7bdb      	ldrb	r3, [r3, #15]
 800885c:	18db      	adds	r3, r3, r3
 800885e:	b2da      	uxtb	r2, r3
 8008860:	187b      	adds	r3, r7, r1
 8008862:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	238a      	movs	r3, #138	; 0x8a
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	58d2      	ldr	r2, [r2, r3]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	2302      	movs	r3, #2
 8008870:	33ff      	adds	r3, #255	; 0xff
 8008872:	188a      	adds	r2, r1, r2
 8008874:	18d3      	adds	r3, r2, r3
 8008876:	2280      	movs	r2, #128	; 0x80
 8008878:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800887a:	e00a      	b.n	8008892 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	238a      	movs	r3, #138	; 0x8a
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	58d2      	ldr	r2, [r2, r3]
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	2302      	movs	r3, #2
 8008888:	33ff      	adds	r3, #255	; 0xff
 800888a:	188a      	adds	r2, r1, r2
 800888c:	18d3      	adds	r3, r2, r3
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	238a      	movs	r3, #138	; 0x8a
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	58d3      	ldr	r3, [r2, r3]
 800889a:	1c59      	adds	r1, r3, #1
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	238a      	movs	r3, #138	; 0x8a
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	50d1      	str	r1, [r2, r3]
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	238a      	movs	r3, #138	; 0x8a
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	58d3      	ldr	r3, [r2, r3]
 80088ac:	2b0f      	cmp	r3, #15
 80088ae:	d9e5      	bls.n	800887c <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 80088b0:	2300      	movs	r3, #0
 80088b2:	633b      	str	r3, [r7, #48]	; 0x30
 80088b4:	e018      	b.n	80088e8 <AES_CMAC_Final+0x25e>
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	2302      	movs	r3, #2
 80088ba:	33ff      	adds	r3, #255	; 0xff
 80088bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088be:	188a      	adds	r2, r1, r2
 80088c0:	18d3      	adds	r3, r2, r3
 80088c2:	781a      	ldrb	r2, [r3, #0]
 80088c4:	231c      	movs	r3, #28
 80088c6:	18f9      	adds	r1, r7, r3
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	18cb      	adds	r3, r1, r3
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	4053      	eors	r3, r2
 80088d0:	b2d8      	uxtb	r0, r3
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	2302      	movs	r3, #2
 80088d6:	33ff      	adds	r3, #255	; 0xff
 80088d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088da:	188a      	adds	r2, r1, r2
 80088dc:	18d3      	adds	r3, r2, r3
 80088de:	1c02      	adds	r2, r0, #0
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	3301      	adds	r3, #1
 80088e6:	633b      	str	r3, [r7, #48]	; 0x30
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	2b0f      	cmp	r3, #15
 80088ec:	dde3      	ble.n	80088b6 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 80088ee:	2300      	movs	r3, #0
 80088f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088f2:	e018      	b.n	8008926 <AES_CMAC_Final+0x29c>
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	21f1      	movs	r1, #241	; 0xf1
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	18d3      	adds	r3, r2, r3
 80088fc:	185b      	adds	r3, r3, r1
 80088fe:	781a      	ldrb	r2, [r3, #0]
 8008900:	6838      	ldr	r0, [r7, #0]
 8008902:	2302      	movs	r3, #2
 8008904:	33ff      	adds	r3, #255	; 0xff
 8008906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008908:	1841      	adds	r1, r0, r1
 800890a:	18cb      	adds	r3, r1, r3
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4053      	eors	r3, r2
 8008910:	b2d8      	uxtb	r0, r3
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	21f1      	movs	r1, #241	; 0xf1
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	185b      	adds	r3, r3, r1
 800891c:	1c02      	adds	r2, r0, #0
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	3301      	adds	r3, #1
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	2b0f      	cmp	r3, #15
 800892a:	dde3      	ble.n	80088f4 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	33f1      	adds	r3, #241	; 0xf1
 8008930:	0019      	movs	r1, r3
 8008932:	240c      	movs	r4, #12
 8008934:	193b      	adds	r3, r7, r4
 8008936:	2210      	movs	r2, #16
 8008938:	0018      	movs	r0, r3
 800893a:	f008 fa69 	bl	8010e10 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	193b      	adds	r3, r7, r4
 8008944:	0018      	movs	r0, r3
 8008946:	f7ff fd71 	bl	800842c <aes_encrypt>
           memset1(K, 0, sizeof K);
 800894a:	231c      	movs	r3, #28
 800894c:	18fb      	adds	r3, r7, r3
 800894e:	2210      	movs	r2, #16
 8008950:	2100      	movs	r1, #0
 8008952:	0018      	movs	r0, r3
 8008954:	f008 fa98 	bl	8010e88 <memset1>

}
 8008958:	46c0      	nop			; (mov r8, r8)
 800895a:	46bd      	mov	sp, r7
 800895c:	b013      	add	sp, #76	; 0x4c
 800895e:	bd90      	pop	{r4, r7, pc}

08008960 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	0002      	movs	r2, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	1dfb      	adds	r3, r7, #7
 800896c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800896e:	230f      	movs	r3, #15
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e025      	b.n	80089c4 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008978:	230f      	movs	r3, #15
 800897a:	18fb      	adds	r3, r7, r3
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	4816      	ldr	r0, [pc, #88]	; (80089d8 <GetKeyByID+0x78>)
 8008980:	2383      	movs	r3, #131	; 0x83
 8008982:	0099      	lsls	r1, r3, #2
 8008984:	0013      	movs	r3, r2
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	189b      	adds	r3, r3, r2
 800898a:	18c3      	adds	r3, r0, r3
 800898c:	185b      	adds	r3, r3, r1
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	1dfa      	adds	r2, r7, #7
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d10f      	bne.n	80089b8 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8008998:	230f      	movs	r3, #15
 800899a:	18fb      	adds	r3, r7, r3
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	0013      	movs	r3, r2
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	189b      	adds	r3, r3, r2
 80089a4:	2282      	movs	r2, #130	; 0x82
 80089a6:	0092      	lsls	r2, r2, #2
 80089a8:	189a      	adds	r2, r3, r2
 80089aa:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <GetKeyByID+0x78>)
 80089ac:	18d3      	adds	r3, r2, r3
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 80089b4:	2300      	movs	r3, #0
 80089b6:	e00b      	b.n	80089d0 <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80089b8:	210f      	movs	r1, #15
 80089ba:	187b      	adds	r3, r7, r1
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	187b      	adds	r3, r7, r1
 80089c0:	3201      	adds	r2, #1
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	230f      	movs	r3, #15
 80089c6:	18fb      	adds	r3, r7, r3
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b15      	cmp	r3, #21
 80089cc:	d9d4      	bls.n	8008978 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80089ce:	2303      	movs	r3, #3
}
 80089d0:	0018      	movs	r0, r3
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b004      	add	sp, #16
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000114 	.word	0x20000114

080089dc <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 80089dc:	b5b0      	push	{r4, r5, r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	0008      	movs	r0, r1
 80089e6:	0011      	movs	r1, r2
 80089e8:	607b      	str	r3, [r7, #4]
 80089ea:	230a      	movs	r3, #10
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	1c02      	adds	r2, r0, #0
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	2309      	movs	r3, #9
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	1c0a      	adds	r2, r1, #0
 80089f8:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <ComputeCmac+0x2a>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008a06:	2302      	movs	r3, #2
 8008a08:	e03f      	b.n	8008a8a <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8008a0a:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <ComputeCmac+0xb8>)
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7ff fd58 	bl	80084c2 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8008a12:	2527      	movs	r5, #39	; 0x27
 8008a14:	197c      	adds	r4, r7, r5
 8008a16:	2310      	movs	r3, #16
 8008a18:	18fa      	adds	r2, r7, r3
 8008a1a:	2309      	movs	r3, #9
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	0011      	movs	r1, r2
 8008a22:	0018      	movs	r0, r3
 8008a24:	f7ff ff9c 	bl	8008960 <GetKeyByID>
 8008a28:	0003      	movs	r3, r0
 8008a2a:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008a2c:	197b      	adds	r3, r7, r5
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d127      	bne.n	8008a84 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <ComputeCmac+0xb8>)
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff fd5a 	bl	80084f6 <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8008a42:	230a      	movs	r3, #10
 8008a44:	18fb      	adds	r3, r7, r3
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	68f9      	ldr	r1, [r7, #12]
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <ComputeCmac+0xb8>)
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7ff fd61 	bl	8008514 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8008a52:	4a10      	ldr	r2, [pc, #64]	; (8008a94 <ComputeCmac+0xb8>)
 8008a54:	2114      	movs	r1, #20
 8008a56:	000c      	movs	r4, r1
 8008a58:	187b      	adds	r3, r7, r1
 8008a5a:	0011      	movs	r1, r2
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7ff fe14 	bl	800868a <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8008a62:	0021      	movs	r1, r4
 8008a64:	187b      	adds	r3, r7, r1
 8008a66:	78db      	ldrb	r3, [r3, #3]
 8008a68:	061a      	lsls	r2, r3, #24
 8008a6a:	187b      	adds	r3, r7, r1
 8008a6c:	789b      	ldrb	r3, [r3, #2]
 8008a6e:	041b      	lsls	r3, r3, #16
 8008a70:	431a      	orrs	r2, r3
 8008a72:	187b      	adds	r3, r7, r1
 8008a74:	785b      	ldrb	r3, [r3, #1]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	187a      	adds	r2, r7, r1
 8008a7c:	7812      	ldrb	r2, [r2, #0]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8008a84:	2327      	movs	r3, #39	; 0x27
 8008a86:	18fb      	adds	r3, r7, r3
 8008a88:	781b      	ldrb	r3, [r3, #0]
}
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	b00a      	add	sp, #40	; 0x28
 8008a90:	bdb0      	pop	{r4, r5, r7, pc}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	20000208 	.word	0x20000208

08008a98 <SecureElementSetKey>:
    *seNvmCtxSize = sizeof( SeNvmCtx );
    return &SeNvmCtx;
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8008a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a9a:	b089      	sub	sp, #36	; 0x24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	0002      	movs	r2, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	1dfb      	adds	r3, r7, #7
 8008aa4:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008aac:	2302      	movs	r3, #2
 8008aae:	e063      	b.n	8008b78 <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008ab0:	231e      	movs	r3, #30
 8008ab2:	18fb      	adds	r3, r7, r3
 8008ab4:	2206      	movs	r2, #6
 8008ab6:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008ab8:	231f      	movs	r3, #31
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e054      	b.n	8008b6c <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008ac2:	231f      	movs	r3, #31
 8008ac4:	18fb      	adds	r3, r7, r3
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	482d      	ldr	r0, [pc, #180]	; (8008b80 <SecureElementSetKey+0xe8>)
 8008aca:	2383      	movs	r3, #131	; 0x83
 8008acc:	0099      	lsls	r1, r3, #2
 8008ace:	0013      	movs	r3, r2
 8008ad0:	011b      	lsls	r3, r3, #4
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	18c3      	adds	r3, r0, r3
 8008ad6:	185b      	adds	r3, r3, r1
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	1dfa      	adds	r2, r7, #7
 8008adc:	7812      	ldrb	r2, [r2, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d13e      	bne.n	8008b60 <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 8008ae2:	231f      	movs	r3, #31
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	781a      	ldrb	r2, [r3, #0]
 8008ae8:	4825      	ldr	r0, [pc, #148]	; (8008b80 <SecureElementSetKey+0xe8>)
 8008aea:	2383      	movs	r3, #131	; 0x83
 8008aec:	0099      	lsls	r1, r3, #2
 8008aee:	0013      	movs	r3, r2
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	189b      	adds	r3, r3, r2
 8008af4:	18c3      	adds	r3, r0, r3
 8008af6:	185b      	adds	r3, r3, r1
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da19      	bge.n	8008b34 <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 8008b00:	250c      	movs	r5, #12
 8008b02:	197b      	adds	r3, r7, r5
 8008b04:	0018      	movs	r0, r3
 8008b06:	2310      	movs	r3, #16
 8008b08:	001a      	movs	r2, r3
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	f011 fa48 	bl	8019fa0 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8008b10:	261e      	movs	r6, #30
 8008b12:	19bc      	adds	r4, r7, r6
 8008b14:	197b      	adds	r3, r7, r5
 8008b16:	6838      	ldr	r0, [r7, #0]
 8008b18:	227f      	movs	r2, #127	; 0x7f
 8008b1a:	2110      	movs	r1, #16
 8008b1c:	f000 f89a 	bl	8008c54 <SecureElementAesEncrypt>
 8008b20:	0003      	movs	r3, r0
 8008b22:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 8008b24:	19bb      	adds	r3, r7, r6
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d019      	beq.n	8008b60 <SecureElementSetKey+0xc8>
                {
                    return retval;
 8008b2c:	231e      	movs	r3, #30
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	e021      	b.n	8008b78 <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8008b34:	231f      	movs	r3, #31
 8008b36:	18fb      	adds	r3, r7, r3
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	0013      	movs	r3, r2
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	189b      	adds	r3, r3, r2
 8008b40:	2282      	movs	r2, #130	; 0x82
 8008b42:	0092      	lsls	r2, r2, #2
 8008b44:	189a      	adds	r2, r3, r2
 8008b46:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <SecureElementSetKey+0xe8>)
 8008b48:	18d3      	adds	r3, r2, r3
 8008b4a:	3305      	adds	r3, #5
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	2210      	movs	r2, #16
 8008b50:	0018      	movs	r0, r3
 8008b52:	f008 f95d 	bl	8010e10 <memcpy1>
                SeNvmCtxChanged( );
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <SecureElementSetKey+0xec>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e00b      	b.n	8008b78 <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008b60:	211f      	movs	r1, #31
 8008b62:	187b      	adds	r3, r7, r1
 8008b64:	781a      	ldrb	r2, [r3, #0]
 8008b66:	187b      	adds	r3, r7, r1
 8008b68:	3201      	adds	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	231f      	movs	r3, #31
 8008b6e:	18fb      	adds	r3, r7, r3
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b15      	cmp	r3, #21
 8008b74:	d9a5      	bls.n	8008ac2 <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008b76:	2303      	movs	r3, #3
}
 8008b78:	0018      	movs	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	b009      	add	sp, #36	; 0x24
 8008b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b80:	20000114 	.word	0x20000114
 8008b84:	20000498 	.word	0x20000498

08008b88 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008b88:	b590      	push	{r4, r7, lr}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	0008      	movs	r0, r1
 8008b92:	0011      	movs	r1, r2
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	230a      	movs	r3, #10
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	1c02      	adds	r2, r0, #0
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	2009      	movs	r0, #9
 8008ba0:	183b      	adds	r3, r7, r0
 8008ba2:	1c0a      	adds	r2, r1, #0
 8008ba4:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 8008ba6:	183b      	adds	r3, r7, r0
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b7e      	cmp	r3, #126	; 0x7e
 8008bac:	d901      	bls.n	8008bb2 <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e00b      	b.n	8008bca <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 8008bb2:	687c      	ldr	r4, [r7, #4]
 8008bb4:	2309      	movs	r3, #9
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	230a      	movs	r3, #10
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	8819      	ldrh	r1, [r3, #0]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	0023      	movs	r3, r4
 8008bc4:	f7ff ff0a 	bl	80089dc <ComputeCmac>
 8008bc8:	0003      	movs	r3, r0
}
 8008bca:	0018      	movs	r0, r3
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b005      	add	sp, #20
 8008bd0:	bd90      	pop	{r4, r7, pc}

08008bd2 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8008bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd4:	b087      	sub	sp, #28
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	0008      	movs	r0, r1
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	0019      	movs	r1, r3
 8008be0:	230a      	movs	r3, #10
 8008be2:	18fb      	adds	r3, r7, r3
 8008be4:	1c02      	adds	r2, r0, #0
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	2309      	movs	r3, #9
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	1c0a      	adds	r2, r1, #0
 8008bee:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e027      	b.n	8008c4a <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008bfa:	2617      	movs	r6, #23
 8008bfc:	19bb      	adds	r3, r7, r6
 8008bfe:	2206      	movs	r2, #6
 8008c00:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 8008c06:	19bc      	adds	r4, r7, r6
 8008c08:	2310      	movs	r3, #16
 8008c0a:	18fd      	adds	r5, r7, r3
 8008c0c:	2309      	movs	r3, #9
 8008c0e:	18fb      	adds	r3, r7, r3
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	230a      	movs	r3, #10
 8008c14:	18fb      	adds	r3, r7, r3
 8008c16:	8819      	ldrh	r1, [r3, #0]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	002b      	movs	r3, r5
 8008c1c:	f7ff fede 	bl	80089dc <ComputeCmac>
 8008c20:	0003      	movs	r3, r0
 8008c22:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008c24:	19bb      	adds	r3, r7, r6
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 8008c2c:	2317      	movs	r3, #23
 8008c2e:	18fb      	adds	r3, r7, r3
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	e00a      	b.n	8008c4a <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d003      	beq.n	8008c44 <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8008c3c:	2317      	movs	r3, #23
 8008c3e:	18fb      	adds	r3, r7, r3
 8008c40:	2201      	movs	r2, #1
 8008c42:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 8008c44:	2317      	movs	r3, #23
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	781b      	ldrb	r3, [r3, #0]
}
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	b007      	add	sp, #28
 8008c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008c54 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8008c54:	b5b0      	push	{r4, r5, r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	0008      	movs	r0, r1
 8008c5e:	0011      	movs	r1, r2
 8008c60:	607b      	str	r3, [r7, #4]
 8008c62:	230a      	movs	r3, #10
 8008c64:	18fb      	adds	r3, r7, r3
 8008c66:	1c02      	adds	r2, r0, #0
 8008c68:	801a      	strh	r2, [r3, #0]
 8008c6a:	2309      	movs	r3, #9
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	1c0a      	adds	r2, r1, #0
 8008c70:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <SecureElementAesEncrypt+0x2a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e04c      	b.n	8008d1c <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8008c82:	230a      	movs	r3, #10
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	220f      	movs	r2, #15
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8008c92:	2305      	movs	r3, #5
 8008c94:	e042      	b.n	8008d1c <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8008c96:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <SecureElementAesEncrypt+0xd0>)
 8008c98:	22f0      	movs	r2, #240	; 0xf0
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f008 f8f3 	bl	8010e88 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8008ca2:	2516      	movs	r5, #22
 8008ca4:	197c      	adds	r4, r7, r5
 8008ca6:	2310      	movs	r3, #16
 8008ca8:	18fa      	adds	r2, r7, r3
 8008caa:	2309      	movs	r3, #9
 8008cac:	18fb      	adds	r3, r7, r3
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	0011      	movs	r1, r2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f7ff fe54 	bl	8008960 <GetKeyByID>
 8008cb8:	0003      	movs	r3, r0
 8008cba:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008cbc:	197b      	adds	r3, r7, r5
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d128      	bne.n	8008d16 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	4a16      	ldr	r2, [pc, #88]	; (8008d24 <SecureElementAesEncrypt+0xd0>)
 8008cca:	2110      	movs	r1, #16
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7ff fa7b 	bl	80081c8 <aes_set_key>

        uint8_t block = 0;
 8008cd2:	2317      	movs	r3, #23
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 8008cda:	e017      	b.n	8008d0c <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8008cdc:	2417      	movs	r4, #23
 8008cde:	193b      	adds	r3, r7, r4
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	18d0      	adds	r0, r2, r3
 8008ce6:	193b      	adds	r3, r7, r4
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	18d3      	adds	r3, r2, r3
 8008cee:	4a0d      	ldr	r2, [pc, #52]	; (8008d24 <SecureElementAesEncrypt+0xd0>)
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	f7ff fb9b 	bl	800842c <aes_encrypt>
            block = block + 16;
 8008cf6:	193b      	adds	r3, r7, r4
 8008cf8:	193a      	adds	r2, r7, r4
 8008cfa:	7812      	ldrb	r2, [r2, #0]
 8008cfc:	3210      	adds	r2, #16
 8008cfe:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 8008d00:	220a      	movs	r2, #10
 8008d02:	18bb      	adds	r3, r7, r2
 8008d04:	18ba      	adds	r2, r7, r2
 8008d06:	8812      	ldrh	r2, [r2, #0]
 8008d08:	3a10      	subs	r2, #16
 8008d0a:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 8008d0c:	230a      	movs	r3, #10
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e2      	bne.n	8008cdc <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 8008d16:	2316      	movs	r3, #22
 8008d18:	18fb      	adds	r3, r7, r3
 8008d1a:	781b      	ldrb	r3, [r3, #0]
}
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	b006      	add	sp, #24
 8008d22:	bdb0      	pop	{r4, r5, r7, pc}
 8008d24:	20000114 	.word	0x20000114

08008d28 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8008d28:	b5b0      	push	{r4, r5, r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	0019      	movs	r1, r3
 8008d34:	1dfb      	adds	r3, r7, #7
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	1dbb      	adds	r3, r7, #6
 8008d3a:	1c0a      	adds	r2, r1, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008d44:	2302      	movs	r3, #2
 8008d46:	e066      	b.n	8008e16 <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008d48:	2327      	movs	r3, #39	; 0x27
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	2206      	movs	r2, #6
 8008d4e:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 8008d50:	2314      	movs	r3, #20
 8008d52:	18fb      	adds	r3, r7, r3
 8008d54:	0018      	movs	r0, r3
 8008d56:	2310      	movs	r3, #16
 8008d58:	001a      	movs	r2, r3
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	f011 f920 	bl	8019fa0 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8008d60:	1dbb      	adds	r3, r7, #6
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b7f      	cmp	r3, #127	; 0x7f
 8008d66:	d10e      	bne.n	8008d86 <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8008d68:	1dfb      	adds	r3, r7, #7
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <SecureElementDeriveAndStoreKey+0x52>
 8008d70:	230c      	movs	r3, #12
 8008d72:	18fb      	adds	r3, r7, r3
 8008d74:	789b      	ldrb	r3, [r3, #2]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <SecureElementDeriveAndStoreKey+0x5a>
 8008d7a:	1dfb      	adds	r3, r7, #7
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e047      	b.n	8008e16 <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	2124      	movs	r1, #36	; 0x24
 8008d8c:	187b      	adds	r3, r7, r1
 8008d8e:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3301      	adds	r3, #1
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	b21a      	sxth	r2, r3
 8008d9a:	187b      	adds	r3, r7, r1
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	5e1b      	ldrsh	r3, [r3, r0]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	b21a      	sxth	r2, r3
 8008da4:	187b      	adds	r3, r7, r1
 8008da6:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 8008da8:	1dbb      	adds	r3, r7, #6
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b7f      	cmp	r3, #127	; 0x7f
 8008dae:	d108      	bne.n	8008dc2 <SecureElementDeriveAndStoreKey+0x9a>
 8008db0:	2324      	movs	r3, #36	; 0x24
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d803      	bhi.n	8008dc2 <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 8008dba:	2327      	movs	r3, #39	; 0x27
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	e029      	b.n	8008e16 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8008dc2:	2527      	movs	r5, #39	; 0x27
 8008dc4:	197c      	adds	r4, r7, r5
 8008dc6:	2314      	movs	r3, #20
 8008dc8:	18f9      	adds	r1, r7, r3
 8008dca:	1dfb      	adds	r3, r7, #7
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	68b8      	ldr	r0, [r7, #8]
 8008dd0:	000b      	movs	r3, r1
 8008dd2:	2110      	movs	r1, #16
 8008dd4:	f7ff ff3e 	bl	8008c54 <SecureElementAesEncrypt>
 8008dd8:	0003      	movs	r3, r0
 8008dda:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008ddc:	197b      	adds	r3, r7, r5
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 8008de4:	2327      	movs	r3, #39	; 0x27
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	e014      	b.n	8008e16 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 8008dec:	2527      	movs	r5, #39	; 0x27
 8008dee:	197c      	adds	r4, r7, r5
 8008df0:	2314      	movs	r3, #20
 8008df2:	18fa      	adds	r2, r7, r3
 8008df4:	1dbb      	adds	r3, r7, #6
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	0011      	movs	r1, r2
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f7ff fe4c 	bl	8008a98 <SecureElementSetKey>
 8008e00:	0003      	movs	r3, r0
 8008e02:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008e04:	197b      	adds	r3, r7, r5
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 8008e0c:	2327      	movs	r3, #39	; 0x27
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	e000      	b.n	8008e16 <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	0018      	movs	r0, r3
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	b00a      	add	sp, #40	; 0x28
 8008e1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e20 <ProcessRadioTxDone>:
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}

static void ProcessRadioTxDone( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008e26:	4a5e      	ldr	r2, [pc, #376]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008e28:	238e      	movs	r3, #142	; 0x8e
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	58d3      	ldr	r3, [r2, r3]
 8008e2e:	22c8      	movs	r2, #200	; 0xc8
 8008e30:	5c9b      	ldrb	r3, [r3, r2]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d003      	beq.n	8008e3e <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 8008e36:	4b5b      	ldr	r3, [pc, #364]	; (8008fa4 <ProcessRadioTxDone+0x184>)
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	4798      	blx	r3
 8008e3c:	e001      	b.n	8008e42 <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 8008e3e:	f002 fbc5 	bl	800b5cc <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008e42:	4a57      	ldr	r2, [pc, #348]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008e44:	23f1      	movs	r3, #241	; 0xf1
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	58d2      	ldr	r2, [r2, r3]
 8008e4a:	4b57      	ldr	r3, [pc, #348]	; (8008fa8 <ProcessRadioTxDone+0x188>)
 8008e4c:	0011      	movs	r1, r2
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f007 feda 	bl	8010c08 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008e54:	4b54      	ldr	r3, [pc, #336]	; (8008fa8 <ProcessRadioTxDone+0x188>)
 8008e56:	0018      	movs	r0, r3
 8008e58:	f007 ff02 	bl	8010c60 <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008e5c:	4a50      	ldr	r2, [pc, #320]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008e5e:	238e      	movs	r3, #142	; 0x8e
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	58d3      	ldr	r3, [r2, r3]
 8008e64:	22c8      	movs	r2, #200	; 0xc8
 8008e66:	5c9b      	ldrb	r3, [r3, r2]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d00c      	beq.n	8008e86 <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8008e6c:	4a4c      	ldr	r2, [pc, #304]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008e6e:	23f2      	movs	r3, #242	; 0xf2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	58d2      	ldr	r2, [r2, r3]
 8008e74:	4b4d      	ldr	r3, [pc, #308]	; (8008fac <ProcessRadioTxDone+0x18c>)
 8008e76:	0011      	movs	r1, r2
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f007 fec5 	bl	8010c08 <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 8008e7e:	4b4b      	ldr	r3, [pc, #300]	; (8008fac <ProcessRadioTxDone+0x18c>)
 8008e80:	0018      	movs	r0, r3
 8008e82:	f007 feed 	bl	8010c60 <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 8008e86:	4a46      	ldr	r2, [pc, #280]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008e88:	238e      	movs	r3, #142	; 0x8e
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	58d3      	ldr	r3, [r2, r3]
 8008e8e:	22c8      	movs	r2, #200	; 0xc8
 8008e90:	5c9b      	ldrb	r3, [r3, r2]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d007      	beq.n	8008ea6 <ProcessRadioTxDone+0x86>
 8008e96:	4a42      	ldr	r2, [pc, #264]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008e98:	238e      	movs	r3, #142	; 0x8e
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	58d3      	ldr	r3, [r2, r3]
 8008e9e:	4a44      	ldr	r2, [pc, #272]	; (8008fb0 <ProcessRadioTxDone+0x190>)
 8008ea0:	5c9b      	ldrb	r3, [r3, r2]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d022      	beq.n	8008eec <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008ea6:	210c      	movs	r1, #12
 8008ea8:	187b      	adds	r3, r7, r1
 8008eaa:	2215      	movs	r2, #21
 8008eac:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008eae:	4a3c      	ldr	r2, [pc, #240]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008eb0:	238e      	movs	r3, #142	; 0x8e
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	58d3      	ldr	r3, [r2, r3]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	187a      	adds	r2, r7, r1
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f005 fb77 	bl	800e5b0 <RegionGetPhyParam>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	2108      	movs	r1, #8
 8008ec8:	187b      	adds	r3, r7, r1
 8008eca:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008ecc:	4a34      	ldr	r2, [pc, #208]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008ece:	23f2      	movs	r3, #242	; 0xf2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	58d2      	ldr	r2, [r2, r3]
 8008ed4:	187b      	adds	r3, r7, r1
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	18d2      	adds	r2, r2, r3
 8008eda:	4b36      	ldr	r3, [pc, #216]	; (8008fb4 <ProcessRadioTxDone+0x194>)
 8008edc:	0011      	movs	r1, r2
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f007 fe92 	bl	8010c08 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008ee4:	4b33      	ldr	r3, [pc, #204]	; (8008fb4 <ProcessRadioTxDone+0x194>)
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f007 feba 	bl	8010c60 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 8008eec:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008eee:	238e      	movs	r3, #142	; 0x8e
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	58d1      	ldr	r1, [r2, r3]
 8008ef4:	4a2a      	ldr	r2, [pc, #168]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008ef6:	238e      	movs	r3, #142	; 0x8e
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	58d2      	ldr	r2, [r2, r3]
 8008efc:	2314      	movs	r3, #20
 8008efe:	33ff      	adds	r3, #255	; 0xff
 8008f00:	5cc9      	ldrb	r1, [r1, r3]
 8008f02:	238a      	movs	r3, #138	; 0x8a
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 8008f08:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f0a:	238e      	movs	r3, #142	; 0x8e
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	58d2      	ldr	r2, [r2, r3]
 8008f10:	2314      	movs	r3, #20
 8008f12:	33ff      	adds	r3, #255	; 0xff
 8008f14:	5cd2      	ldrb	r2, [r2, r3]
 8008f16:	003b      	movs	r3, r7
 8008f18:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f1a:	4a21      	ldr	r2, [pc, #132]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f1c:	238e      	movs	r3, #142	; 0x8e
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	58d2      	ldr	r2, [r2, r3]
 8008f22:	2389      	movs	r3, #137	; 0x89
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	5cd3      	ldrb	r3, [r2, r3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 8008f2c:	003b      	movs	r3, r7
 8008f2e:	2200      	movs	r2, #0
 8008f30:	705a      	strb	r2, [r3, #1]
 8008f32:	e002      	b.n	8008f3a <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 8008f34:	003b      	movs	r3, r7
 8008f36:	2201      	movs	r2, #1
 8008f38:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	; (8008fb8 <ProcessRadioTxDone+0x198>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	003b      	movs	r3, r7
 8008f40:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8008f42:	4a17      	ldr	r2, [pc, #92]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f44:	238e      	movs	r3, #142	; 0x8e
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	58d3      	ldr	r3, [r2, r3]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	003a      	movs	r2, r7
 8008f4e:	0011      	movs	r1, r2
 8008f50:	0018      	movs	r0, r3
 8008f52:	f005 fb55 	bl	800e600 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 8008f56:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <ProcessRadioTxDone+0x198>)
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	4a11      	ldr	r2, [pc, #68]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f5c:	23d0      	movs	r3, #208	; 0xd0
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 8008f62:	4a0f      	ldr	r2, [pc, #60]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f64:	238e      	movs	r3, #142	; 0x8e
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	58d3      	ldr	r3, [r2, r3]
 8008f6a:	4a11      	ldr	r2, [pc, #68]	; (8008fb0 <ProcessRadioTxDone+0x190>)
 8008f6c:	5c9b      	ldrb	r3, [r3, r2]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4053      	eors	r3, r2
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00f      	beq.n	8008f98 <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f7a:	4a10      	ldr	r2, [pc, #64]	; (8008fbc <ProcessRadioTxDone+0x19c>)
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 8008f80:	4a07      	ldr	r2, [pc, #28]	; (8008fa0 <ProcessRadioTxDone+0x180>)
 8008f82:	238e      	movs	r3, #142	; 0x8e
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	58d3      	ldr	r3, [r2, r3]
 8008f88:	2288      	movs	r2, #136	; 0x88
 8008f8a:	0052      	lsls	r2, r2, #1
 8008f8c:	5c9a      	ldrb	r2, [r3, r2]
 8008f8e:	3201      	adds	r2, #1
 8008f90:	b2d1      	uxtb	r1, r2
 8008f92:	2288      	movs	r2, #136	; 0x88
 8008f94:	0052      	lsls	r2, r2, #1
 8008f96:	5499      	strb	r1, [r3, r2]
    }
}
 8008f98:	46c0      	nop			; (mov r8, r8)
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b004      	add	sp, #16
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	2000049c 	.word	0x2000049c
 8008fa4:	0801bc94 	.word	0x0801bc94
 8008fa8:	20000830 	.word	0x20000830
 8008fac:	20000848 	.word	0x20000848
 8008fb0:	00000219 	.word	0x00000219
 8008fb4:	20000890 	.word	0x20000890
 8008fb8:	2000108c 	.word	0x2000108c
 8008fbc:	0000042d 	.word	0x0000042d

08008fc0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008fc4:	4a12      	ldr	r2, [pc, #72]	; (8009010 <PrepareRxDoneAbort+0x50>)
 8008fc6:	23d5      	movs	r3, #213	; 0xd5
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	58d3      	ldr	r3, [r2, r3]
 8008fcc:	2280      	movs	r2, #128	; 0x80
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	0011      	movs	r1, r2
 8008fd2:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <PrepareRxDoneAbort+0x50>)
 8008fd4:	23d5      	movs	r3, #213	; 0xd5
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 8008fda:	4a0d      	ldr	r2, [pc, #52]	; (8009010 <PrepareRxDoneAbort+0x50>)
 8008fdc:	238e      	movs	r3, #142	; 0x8e
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	58d3      	ldr	r3, [r2, r3]
 8008fe2:	4a0c      	ldr	r2, [pc, #48]	; (8009014 <PrepareRxDoneAbort+0x54>)
 8008fe4:	5c9b      	ldrb	r3, [r3, r2]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 8008fea:	2000      	movs	r0, #0
 8008fec:	f001 f9d4 	bl	800a398 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <PrepareRxDoneAbort+0x50>)
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <PrepareRxDoneAbort+0x58>)
 8008ff4:	5c99      	ldrb	r1, [r3, r2]
 8008ff6:	2002      	movs	r0, #2
 8008ff8:	4301      	orrs	r1, r0
 8008ffa:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <PrepareRxDoneAbort+0x50>)
 8008ffe:	4a06      	ldr	r2, [pc, #24]	; (8009018 <PrepareRxDoneAbort+0x58>)
 8009000:	5c99      	ldrb	r1, [r3, r2]
 8009002:	2010      	movs	r0, #16
 8009004:	4301      	orrs	r1, r0
 8009006:	5499      	strb	r1, [r3, r2]
}
 8009008:	46c0      	nop			; (mov r8, r8)
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	2000049c 	.word	0x2000049c
 8009014:	00000219 	.word	0x00000219
 8009018:	0000046d 	.word	0x0000046d

0800901c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	b0a7      	sub	sp, #156	; 0x9c
 8009020:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	2210      	movs	r2, #16
 8009028:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800902a:	4bda      	ldr	r3, [pc, #872]	; (8009394 <ProcessRadioRxDone+0x378>)
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 8009030:	247a      	movs	r4, #122	; 0x7a
 8009032:	193b      	adds	r3, r7, r4
 8009034:	4ad7      	ldr	r2, [pc, #860]	; (8009394 <ProcessRadioRxDone+0x378>)
 8009036:	8912      	ldrh	r2, [r2, #8]
 8009038:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800903a:	2078      	movs	r0, #120	; 0x78
 800903c:	183b      	adds	r3, r7, r0
 800903e:	4ad5      	ldr	r2, [pc, #852]	; (8009394 <ProcessRadioRxDone+0x378>)
 8009040:	8952      	ldrh	r2, [r2, #10]
 8009042:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 8009044:	2577      	movs	r5, #119	; 0x77
 8009046:	197b      	adds	r3, r7, r5
 8009048:	4ad2      	ldr	r2, [pc, #840]	; (8009394 <ProcessRadioRxDone+0x378>)
 800904a:	7b12      	ldrb	r2, [r2, #12]
 800904c:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800904e:	2376      	movs	r3, #118	; 0x76
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800905a:	4acf      	ldr	r2, [pc, #828]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800905c:	238e      	movs	r3, #142	; 0x8e
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	58d3      	ldr	r3, [r2, r3]
 8009062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009064:	2284      	movs	r2, #132	; 0x84
 8009066:	18ba      	adds	r2, r7, r2
 8009068:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800906a:	2383      	movs	r3, #131	; 0x83
 800906c:	18fb      	adds	r3, r7, r3
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8009072:	2382      	movs	r3, #130	; 0x82
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	2204      	movs	r2, #4
 8009078:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800907a:	4ac7      	ldr	r2, [pc, #796]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800907c:	2386      	movs	r3, #134	; 0x86
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	2100      	movs	r1, #0
 8009082:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 8009084:	4bc4      	ldr	r3, [pc, #784]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009086:	183a      	adds	r2, r7, r0
 8009088:	49c4      	ldr	r1, [pc, #784]	; (800939c <ProcessRadioRxDone+0x380>)
 800908a:	8812      	ldrh	r2, [r2, #0]
 800908c:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800908e:	4ac2      	ldr	r2, [pc, #776]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009090:	1979      	adds	r1, r7, r5
 8009092:	2384      	movs	r3, #132	; 0x84
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	7809      	ldrb	r1, [r1, #0]
 8009098:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800909a:	4bbf      	ldr	r3, [pc, #764]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800909c:	4ac0      	ldr	r2, [pc, #768]	; (80093a0 <ProcessRadioRxDone+0x384>)
 800909e:	5c99      	ldrb	r1, [r3, r2]
 80090a0:	4bbd      	ldr	r3, [pc, #756]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090a2:	4ac0      	ldr	r2, [pc, #768]	; (80093a4 <ProcessRadioRxDone+0x388>)
 80090a4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 80090a6:	4bbc      	ldr	r3, [pc, #752]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090a8:	4abf      	ldr	r2, [pc, #764]	; (80093a8 <ProcessRadioRxDone+0x38c>)
 80090aa:	2100      	movs	r1, #0
 80090ac:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 80090ae:	4bba      	ldr	r3, [pc, #744]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090b0:	4abe      	ldr	r2, [pc, #760]	; (80093ac <ProcessRadioRxDone+0x390>)
 80090b2:	2100      	movs	r1, #0
 80090b4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 80090b6:	4bb8      	ldr	r3, [pc, #736]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090b8:	4abd      	ldr	r2, [pc, #756]	; (80093b0 <ProcessRadioRxDone+0x394>)
 80090ba:	2100      	movs	r1, #0
 80090bc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 80090be:	4ab6      	ldr	r2, [pc, #728]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090c0:	2383      	movs	r3, #131	; 0x83
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	2100      	movs	r1, #0
 80090c6:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 80090c8:	4bb3      	ldr	r3, [pc, #716]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090ca:	4aba      	ldr	r2, [pc, #744]	; (80093b4 <ProcessRadioRxDone+0x398>)
 80090cc:	2100      	movs	r1, #0
 80090ce:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 80090d0:	4bb1      	ldr	r3, [pc, #708]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090d2:	4ab9      	ldr	r2, [pc, #740]	; (80093b8 <ProcessRadioRxDone+0x39c>)
 80090d4:	2100      	movs	r1, #0
 80090d6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80090d8:	4baf      	ldr	r3, [pc, #700]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090da:	4ab8      	ldr	r2, [pc, #736]	; (80093bc <ProcessRadioRxDone+0x3a0>)
 80090dc:	2100      	movs	r1, #0
 80090de:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80090e0:	4bad      	ldr	r3, [pc, #692]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090e2:	4ab7      	ldr	r2, [pc, #732]	; (80093c0 <ProcessRadioRxDone+0x3a4>)
 80090e4:	2100      	movs	r1, #0
 80090e6:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80090e8:	4aab      	ldr	r2, [pc, #684]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090ea:	2382      	movs	r3, #130	; 0x82
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	2100      	movs	r1, #0
 80090f0:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 80090f2:	4aa9      	ldr	r2, [pc, #676]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80090f4:	2385      	movs	r3, #133	; 0x85
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	2100      	movs	r1, #0
 80090fa:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 80090fc:	4bb1      	ldr	r3, [pc, #708]	; (80093c4 <ProcessRadioRxDone+0x3a8>)
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009102:	4bb1      	ldr	r3, [pc, #708]	; (80093c8 <ProcessRadioRxDone+0x3ac>)
 8009104:	0018      	movs	r0, r3
 8009106:	f007 fe01 	bl	8010d0c <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800910a:	193b      	adds	r3, r7, r4
 800910c:	881a      	ldrh	r2, [r3, #0]
 800910e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009110:	0011      	movs	r1, r2
 8009112:	0018      	movs	r0, r3
 8009114:	f002 fd32 	bl	800bb7c <LoRaMacClassBRxBeacon>
 8009118:	1e03      	subs	r3, r0, #0
 800911a:	d00d      	beq.n	8009138 <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800911c:	4b9e      	ldr	r3, [pc, #632]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800911e:	2278      	movs	r2, #120	; 0x78
 8009120:	18ba      	adds	r2, r7, r2
 8009122:	49aa      	ldr	r1, [pc, #680]	; (80093cc <ProcessRadioRxDone+0x3b0>)
 8009124:	8812      	ldrh	r2, [r2, #0]
 8009126:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009128:	4b9b      	ldr	r3, [pc, #620]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800912a:	2277      	movs	r2, #119	; 0x77
 800912c:	18ba      	adds	r2, r7, r2
 800912e:	49a8      	ldr	r1, [pc, #672]	; (80093d0 <ProcessRadioRxDone+0x3b4>)
 8009130:	7812      	ldrb	r2, [r2, #0]
 8009132:	545a      	strb	r2, [r3, r1]
        return;
 8009134:	f000 fc85 	bl	8009a42 <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009138:	4a97      	ldr	r2, [pc, #604]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800913a:	238e      	movs	r3, #142	; 0x8e
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	58d3      	ldr	r3, [r2, r3]
 8009140:	22c8      	movs	r2, #200	; 0xc8
 8009142:	5c9b      	ldrb	r3, [r3, r2]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d11c      	bne.n	8009182 <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009148:	f002 fd2a 	bl	800bba0 <LoRaMacClassBIsPingExpected>
 800914c:	1e03      	subs	r3, r0, #0
 800914e:	d00a      	beq.n	8009166 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009150:	2000      	movs	r0, #0
 8009152:	f002 fce7 	bl	800bb24 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009156:	2000      	movs	r0, #0
 8009158:	f002 fd00 	bl	800bb5c <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 800915c:	4b8e      	ldr	r3, [pc, #568]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800915e:	4a91      	ldr	r2, [pc, #580]	; (80093a4 <ProcessRadioRxDone+0x388>)
 8009160:	2103      	movs	r1, #3
 8009162:	5499      	strb	r1, [r3, r2]
 8009164:	e00d      	b.n	8009182 <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009166:	f002 fd21 	bl	800bbac <LoRaMacClassBIsMulticastExpected>
 800916a:	1e03      	subs	r3, r0, #0
 800916c:	d009      	beq.n	8009182 <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800916e:	2000      	movs	r0, #0
 8009170:	f002 fce2 	bl	800bb38 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009174:	2000      	movs	r0, #0
 8009176:	f002 fcf9 	bl	800bb6c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 800917a:	4b87      	ldr	r3, [pc, #540]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800917c:	4a89      	ldr	r2, [pc, #548]	; (80093a4 <ProcessRadioRxDone+0x388>)
 800917e:	2104      	movs	r1, #4
 8009180:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8009182:	2276      	movs	r2, #118	; 0x76
 8009184:	18bb      	adds	r3, r7, r2
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	18ba      	adds	r2, r7, r2
 800918a:	1c59      	adds	r1, r3, #1
 800918c:	7011      	strb	r1, [r2, #0]
 800918e:	001a      	movs	r2, r3
 8009190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009192:	189b      	adds	r3, r3, r2
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	2174      	movs	r1, #116	; 0x74
 8009198:	187b      	adds	r3, r7, r1
 800919a:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800919c:	187b      	adds	r3, r7, r1
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	061b      	lsls	r3, r3, #24
 80091a2:	0f5b      	lsrs	r3, r3, #29
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d100      	bne.n	80091ac <ProcessRadioRxDone+0x190>
 80091aa:	e11c      	b.n	80093e6 <ProcessRadioRxDone+0x3ca>
 80091ac:	dc03      	bgt.n	80091b6 <ProcessRadioRxDone+0x19a>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d00a      	beq.n	80091c8 <ProcessRadioRxDone+0x1ac>
 80091b2:	f000 fc18 	bl	80099e6 <ProcessRadioRxDone+0x9ca>
 80091b6:	2b05      	cmp	r3, #5
 80091b8:	d100      	bne.n	80091bc <ProcessRadioRxDone+0x1a0>
 80091ba:	e10f      	b.n	80093dc <ProcessRadioRxDone+0x3c0>
 80091bc:	2b07      	cmp	r3, #7
 80091be:	d101      	bne.n	80091c4 <ProcessRadioRxDone+0x1a8>
 80091c0:	f000 fbe6 	bl	8009990 <ProcessRadioRxDone+0x974>
 80091c4:	f000 fc0f 	bl	80099e6 <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 80091c8:	210c      	movs	r1, #12
 80091ca:	187b      	adds	r3, r7, r1
 80091cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091ce:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 80091d0:	237a      	movs	r3, #122	; 0x7a
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	187b      	adds	r3, r7, r1
 80091da:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80091dc:	4a6e      	ldr	r2, [pc, #440]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80091de:	238e      	movs	r3, #142	; 0x8e
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	58d2      	ldr	r2, [r2, r3]
 80091e4:	2389      	movs	r3, #137	; 0x89
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	5cd3      	ldrb	r3, [r2, r3]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091ee:	4b6a      	ldr	r3, [pc, #424]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80091f0:	4a78      	ldr	r2, [pc, #480]	; (80093d4 <ProcessRadioRxDone+0x3b8>)
 80091f2:	2101      	movs	r1, #1
 80091f4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 80091f6:	f7ff fee3 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 80091fa:	f000 fc22 	bl	8009a42 <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 80091fe:	4b66      	ldr	r3, [pc, #408]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2580      	movs	r5, #128	; 0x80
 8009204:	197c      	adds	r4, r7, r5
 8009206:	220c      	movs	r2, #12
 8009208:	18ba      	adds	r2, r7, r2
 800920a:	0019      	movs	r1, r3
 800920c:	20ff      	movs	r0, #255	; 0xff
 800920e:	f004 f841 	bl	800d294 <LoRaMacCryptoHandleJoinAccept>
 8009212:	0003      	movs	r3, r0
 8009214:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009216:	197b      	adds	r3, r7, r5
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d000      	beq.n	8009220 <ProcessRadioRxDone+0x204>
 800921e:	e0ad      	b.n	800937c <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009220:	240c      	movs	r4, #12
 8009222:	193b      	adds	r3, r7, r4
 8009224:	7a59      	ldrb	r1, [r3, #9]
 8009226:	4a5c      	ldr	r2, [pc, #368]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009228:	238e      	movs	r3, #142	; 0x8e
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	58d3      	ldr	r3, [r2, r3]
 800922e:	000a      	movs	r2, r1
 8009230:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009232:	4a59      	ldr	r2, [pc, #356]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009234:	238e      	movs	r3, #142	; 0x8e
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	58d3      	ldr	r3, [r2, r3]
 800923a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800923c:	193b      	adds	r3, r7, r4
 800923e:	7a9b      	ldrb	r3, [r3, #10]
 8009240:	021a      	lsls	r2, r3, #8
 8009242:	4855      	ldr	r0, [pc, #340]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009244:	238e      	movs	r3, #142	; 0x8e
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	58c3      	ldr	r3, [r0, r3]
 800924a:	430a      	orrs	r2, r1
 800924c:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800924e:	4a52      	ldr	r2, [pc, #328]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009250:	238e      	movs	r3, #142	; 0x8e
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	58d3      	ldr	r3, [r2, r3]
 8009256:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009258:	193b      	adds	r3, r7, r4
 800925a:	7adb      	ldrb	r3, [r3, #11]
 800925c:	041a      	lsls	r2, r3, #16
 800925e:	484e      	ldr	r0, [pc, #312]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009260:	238e      	movs	r3, #142	; 0x8e
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	58c3      	ldr	r3, [r0, r3]
 8009266:	430a      	orrs	r2, r1
 8009268:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800926a:	4a4b      	ldr	r2, [pc, #300]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800926c:	238e      	movs	r3, #142	; 0x8e
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	58d3      	ldr	r3, [r2, r3]
 8009272:	193a      	adds	r2, r7, r4
 8009274:	68d2      	ldr	r2, [r2, #12]
 8009276:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009278:	193b      	adds	r3, r7, r4
 800927a:	7c1b      	ldrb	r3, [r3, #16]
 800927c:	065b      	lsls	r3, r3, #25
 800927e:	0f5b      	lsrs	r3, r3, #29
 8009280:	b2d9      	uxtb	r1, r3
 8009282:	4a45      	ldr	r2, [pc, #276]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009284:	238e      	movs	r3, #142	; 0x8e
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	58d3      	ldr	r3, [r2, r3]
 800928a:	22f5      	movs	r2, #245	; 0xf5
 800928c:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800928e:	193b      	adds	r3, r7, r4
 8009290:	7c1b      	ldrb	r3, [r3, #16]
 8009292:	071b      	lsls	r3, r3, #28
 8009294:	0f1b      	lsrs	r3, r3, #28
 8009296:	b2d9      	uxtb	r1, r3
 8009298:	4a3f      	ldr	r2, [pc, #252]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800929a:	238e      	movs	r3, #142	; 0x8e
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	58d3      	ldr	r3, [r2, r3]
 80092a0:	22fc      	movs	r2, #252	; 0xfc
 80092a2:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80092a4:	193b      	adds	r3, r7, r4
 80092a6:	7c59      	ldrb	r1, [r3, #17]
 80092a8:	4a3b      	ldr	r2, [pc, #236]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80092aa:	238e      	movs	r3, #142	; 0x8e
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	58d3      	ldr	r3, [r2, r3]
 80092b0:	22e4      	movs	r2, #228	; 0xe4
 80092b2:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 80092b4:	4a38      	ldr	r2, [pc, #224]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80092b6:	238e      	movs	r3, #142	; 0x8e
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	58d3      	ldr	r3, [r2, r3]
 80092bc:	22e4      	movs	r2, #228	; 0xe4
 80092be:	589b      	ldr	r3, [r3, r2]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 80092c4:	4a34      	ldr	r2, [pc, #208]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80092c6:	238e      	movs	r3, #142	; 0x8e
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	58d3      	ldr	r3, [r2, r3]
 80092cc:	22e4      	movs	r2, #228	; 0xe4
 80092ce:	2101      	movs	r1, #1
 80092d0:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 80092d2:	4a31      	ldr	r2, [pc, #196]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80092d4:	238e      	movs	r3, #142	; 0x8e
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	58d3      	ldr	r3, [r2, r3]
 80092da:	22e4      	movs	r2, #228	; 0xe4
 80092dc:	589a      	ldr	r2, [r3, r2]
 80092de:	492e      	ldr	r1, [pc, #184]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80092e0:	238e      	movs	r3, #142	; 0x8e
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	58c9      	ldr	r1, [r1, r3]
 80092e6:	0013      	movs	r3, r2
 80092e8:	015b      	lsls	r3, r3, #5
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	001a      	movs	r2, r3
 80092f4:	23e4      	movs	r3, #228	; 0xe4
 80092f6:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80092f8:	4a27      	ldr	r2, [pc, #156]	; (8009398 <ProcessRadioRxDone+0x37c>)
 80092fa:	238e      	movs	r3, #142	; 0x8e
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	58d3      	ldr	r3, [r2, r3]
 8009300:	22e4      	movs	r2, #228	; 0xe4
 8009302:	589a      	ldr	r2, [r3, r2]
 8009304:	4924      	ldr	r1, [pc, #144]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009306:	238e      	movs	r3, #142	; 0x8e
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	58cb      	ldr	r3, [r1, r3]
 800930c:	21fa      	movs	r1, #250	; 0xfa
 800930e:	0089      	lsls	r1, r1, #2
 8009310:	468c      	mov	ip, r1
 8009312:	4462      	add	r2, ip
 8009314:	21e8      	movs	r1, #232	; 0xe8
 8009316:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8009318:	4a1f      	ldr	r2, [pc, #124]	; (8009398 <ProcessRadioRxDone+0x37c>)
 800931a:	238e      	movs	r3, #142	; 0x8e
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	58d3      	ldr	r3, [r2, r3]
 8009320:	4a2d      	ldr	r2, [pc, #180]	; (80093d8 <ProcessRadioRxDone+0x3bc>)
 8009322:	2100      	movs	r1, #0
 8009324:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009326:	216c      	movs	r1, #108	; 0x6c
 8009328:	187b      	adds	r3, r7, r1
 800932a:	220c      	movs	r2, #12
 800932c:	18ba      	adds	r2, r7, r2
 800932e:	3212      	adds	r2, #18
 8009330:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8009332:	237a      	movs	r3, #122	; 0x7a
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	3b11      	subs	r3, #17
 800933c:	b2da      	uxtb	r2, r3
 800933e:	187b      	adds	r3, r7, r1
 8009340:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009342:	4a15      	ldr	r2, [pc, #84]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009344:	238e      	movs	r3, #142	; 0x8e
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	58d3      	ldr	r3, [r2, r3]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	187a      	adds	r2, r7, r1
 800934e:	0011      	movs	r1, r2
 8009350:	0018      	movs	r0, r3
 8009352:	f005 f97e 	bl	800e652 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009356:	4a10      	ldr	r2, [pc, #64]	; (8009398 <ProcessRadioRxDone+0x37c>)
 8009358:	238e      	movs	r3, #142	; 0x8e
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	58d2      	ldr	r2, [r2, r3]
 800935e:	2389      	movs	r3, #137	; 0x89
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	2102      	movs	r1, #2
 8009364:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009366:	2000      	movs	r0, #0
 8009368:	f002 ffa6 	bl	800c2b8 <LoRaMacConfirmQueueIsCmdActive>
 800936c:	1e03      	subs	r3, r0, #0
 800936e:	d100      	bne.n	8009372 <ProcessRadioRxDone+0x356>
 8009370:	e340      	b.n	80099f4 <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009372:	2100      	movs	r1, #0
 8009374:	2000      	movs	r0, #0
 8009376:	f002 ff11 	bl	800c19c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800937a:	e33b      	b.n	80099f4 <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800937c:	2000      	movs	r0, #0
 800937e:	f002 ff9b 	bl	800c2b8 <LoRaMacConfirmQueueIsCmdActive>
 8009382:	1e03      	subs	r3, r0, #0
 8009384:	d100      	bne.n	8009388 <ProcessRadioRxDone+0x36c>
 8009386:	e335      	b.n	80099f4 <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009388:	2100      	movs	r1, #0
 800938a:	2007      	movs	r0, #7
 800938c:	f002 ff06 	bl	800c19c <LoRaMacConfirmQueueSetStatus>
            break;
 8009390:	e330      	b.n	80099f4 <ProcessRadioRxDone+0x9d8>
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	20001090 	.word	0x20001090
 8009398:	2000049c 	.word	0x2000049c
 800939c:	0000041e 	.word	0x0000041e
 80093a0:	0000046c 	.word	0x0000046c
 80093a4:	00000421 	.word	0x00000421
 80093a8:	00000413 	.word	0x00000413
 80093ac:	00000412 	.word	0x00000412
 80093b0:	00000415 	.word	0x00000415
 80093b4:	0000041c 	.word	0x0000041c
 80093b8:	0000041d 	.word	0x0000041d
 80093bc:	00000422 	.word	0x00000422
 80093c0:	00000424 	.word	0x00000424
 80093c4:	0801bc94 	.word	0x0801bc94
 80093c8:	20000848 	.word	0x20000848
 80093cc:	00000462 	.word	0x00000462
 80093d0:	00000464 	.word	0x00000464
 80093d4:	00000411 	.word	0x00000411
 80093d8:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80093dc:	4ac7      	ldr	r2, [pc, #796]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80093de:	2382      	movs	r3, #130	; 0x82
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	2101      	movs	r1, #1
 80093e4:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80093e6:	4ac5      	ldr	r2, [pc, #788]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80093e8:	238e      	movs	r3, #142	; 0x8e
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	58d2      	ldr	r2, [r2, r3]
 80093ee:	2302      	movs	r3, #2
 80093f0:	33ff      	adds	r3, #255	; 0xff
 80093f2:	5cd2      	ldrb	r2, [r2, r3]
 80093f4:	2168      	movs	r1, #104	; 0x68
 80093f6:	187b      	adds	r3, r7, r1
 80093f8:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80093fa:	4bc0      	ldr	r3, [pc, #768]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80093fc:	4ac0      	ldr	r2, [pc, #768]	; (8009700 <ProcessRadioRxDone+0x6e4>)
 80093fe:	5c9b      	ldrb	r3, [r3, r2]
 8009400:	b25a      	sxtb	r2, r3
 8009402:	187b      	adds	r3, r7, r1
 8009404:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009406:	187b      	adds	r3, r7, r1
 8009408:	220c      	movs	r2, #12
 800940a:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800940c:	4abb      	ldr	r2, [pc, #748]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800940e:	238e      	movs	r3, #142	; 0x8e
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	58d2      	ldr	r2, [r2, r3]
 8009414:	2316      	movs	r3, #22
 8009416:	33ff      	adds	r3, #255	; 0xff
 8009418:	5cd3      	ldrb	r3, [r2, r3]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800941e:	2368      	movs	r3, #104	; 0x68
 8009420:	18fb      	adds	r3, r7, r3
 8009422:	220d      	movs	r2, #13
 8009424:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009426:	4ab5      	ldr	r2, [pc, #724]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009428:	238e      	movs	r3, #142	; 0x8e
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	58d3      	ldr	r3, [r2, r3]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2268      	movs	r2, #104	; 0x68
 8009432:	18ba      	adds	r2, r7, r2
 8009434:	0011      	movs	r1, r2
 8009436:	0018      	movs	r0, r3
 8009438:	f005 f8ba 	bl	800e5b0 <RegionGetPhyParam>
 800943c:	0003      	movs	r3, r0
 800943e:	001a      	movs	r2, r3
 8009440:	2364      	movs	r3, #100	; 0x64
 8009442:	18fb      	adds	r3, r7, r3
 8009444:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8009446:	237a      	movs	r3, #122	; 0x7a
 8009448:	18fb      	adds	r3, r7, r3
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	3b0d      	subs	r3, #13
 800944e:	b29b      	uxth	r3, r3
 8009450:	b21b      	sxth	r3, r3
 8009452:	1c1a      	adds	r2, r3, #0
 8009454:	b213      	sxth	r3, r2
 8009456:	2b00      	cmp	r3, #0
 8009458:	da01      	bge.n	800945e <ProcessRadioRxDone+0x442>
 800945a:	2300      	movs	r3, #0
 800945c:	1c1a      	adds	r2, r3, #0
 800945e:	b212      	sxth	r2, r2
 8009460:	2364      	movs	r3, #100	; 0x64
 8009462:	18fb      	adds	r3, r7, r3
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	b21b      	sxth	r3, r3
 8009468:	429a      	cmp	r2, r3
 800946a:	dd06      	ble.n	800947a <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800946c:	4ba3      	ldr	r3, [pc, #652]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800946e:	4aa5      	ldr	r2, [pc, #660]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 8009470:	2101      	movs	r1, #1
 8009472:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009474:	f7ff fda4 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 8009478:	e2e3      	b.n	8009a42 <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 800947a:	2134      	movs	r1, #52	; 0x34
 800947c:	187b      	adds	r3, r7, r1
 800947e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009480:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 8009482:	237a      	movs	r3, #122	; 0x7a
 8009484:	18fb      	adds	r3, r7, r3
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	187b      	adds	r3, r7, r1
 800948c:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800948e:	187b      	adds	r3, r7, r1
 8009490:	4a9d      	ldr	r2, [pc, #628]	; (8009708 <ProcessRadioRxDone+0x6ec>)
 8009492:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009494:	0008      	movs	r0, r1
 8009496:	187b      	adds	r3, r7, r1
 8009498:	2228      	movs	r2, #40	; 0x28
 800949a:	21ff      	movs	r1, #255	; 0xff
 800949c:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800949e:	183b      	adds	r3, r7, r0
 80094a0:	0018      	movs	r0, r3
 80094a2:	f004 fdb6 	bl	800e012 <LoRaMacParserData>
 80094a6:	1e03      	subs	r3, r0, #0
 80094a8:	d006      	beq.n	80094b8 <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80094aa:	4b94      	ldr	r3, [pc, #592]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80094ac:	4a95      	ldr	r2, [pc, #596]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 80094ae:	2101      	movs	r1, #1
 80094b0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 80094b2:	f7ff fd85 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 80094b6:	e2c4      	b.n	8009a42 <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80094b8:	2034      	movs	r0, #52	; 0x34
 80094ba:	183b      	adds	r3, r7, r0
 80094bc:	6899      	ldr	r1, [r3, #8]
 80094be:	4a8f      	ldr	r2, [pc, #572]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80094c0:	2385      	movs	r3, #133	; 0x85
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80094c6:	1dba      	adds	r2, r7, #6
 80094c8:	183b      	adds	r3, r7, r0
 80094ca:	0011      	movs	r1, r2
 80094cc:	0018      	movs	r0, r3
 80094ce:	f002 f951 	bl	800b774 <DetermineFrameType>
 80094d2:	1e03      	subs	r3, r0, #0
 80094d4:	d006      	beq.n	80094e4 <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80094d6:	4b89      	ldr	r3, [pc, #548]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80094d8:	4a8a      	ldr	r2, [pc, #552]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 80094da:	2101      	movs	r1, #1
 80094dc:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 80094de:	f7ff fd6f 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 80094e2:	e2ae      	b.n	8009a42 <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 80094e4:	2383      	movs	r3, #131	; 0x83
 80094e6:	18fb      	adds	r3, r7, r3
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80094f0:	2381      	movs	r3, #129	; 0x81
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	2200      	movs	r2, #0
 80094f6:	701a      	strb	r2, [r3, #0]
 80094f8:	e051      	b.n	800959e <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 80094fa:	4a80      	ldr	r2, [pc, #512]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80094fc:	238e      	movs	r3, #142	; 0x8e
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	58d2      	ldr	r2, [r2, r3]
 8009502:	2381      	movs	r3, #129	; 0x81
 8009504:	18fb      	adds	r3, r7, r3
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	015b      	lsls	r3, r3, #5
 800950a:	18d3      	adds	r3, r2, r3
 800950c:	334c      	adds	r3, #76	; 0x4c
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	2334      	movs	r3, #52	; 0x34
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	d13b      	bne.n	8009592 <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 800951a:	4a78      	ldr	r2, [pc, #480]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800951c:	238e      	movs	r3, #142	; 0x8e
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	58d2      	ldr	r2, [r2, r3]
 8009522:	2381      	movs	r3, #129	; 0x81
 8009524:	18fb      	adds	r3, r7, r3
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2154      	movs	r1, #84	; 0x54
 800952a:	015b      	lsls	r3, r3, #5
 800952c:	18d3      	adds	r3, r2, r3
 800952e:	185b      	adds	r3, r3, r1
 8009530:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 8009532:	2b00      	cmp	r3, #0
 8009534:	d02d      	beq.n	8009592 <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 8009536:	2383      	movs	r3, #131	; 0x83
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	2201      	movs	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 800953e:	4a6f      	ldr	r2, [pc, #444]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009540:	238e      	movs	r3, #142	; 0x8e
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	58d1      	ldr	r1, [r2, r3]
 8009546:	2481      	movs	r4, #129	; 0x81
 8009548:	193b      	adds	r3, r7, r4
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	2382      	movs	r3, #130	; 0x82
 800954e:	18fb      	adds	r3, r7, r3
 8009550:	2048      	movs	r0, #72	; 0x48
 8009552:	0152      	lsls	r2, r2, #5
 8009554:	188a      	adds	r2, r1, r2
 8009556:	1812      	adds	r2, r2, r0
 8009558:	7812      	ldrb	r2, [r2, #0]
 800955a:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800955c:	4a67      	ldr	r2, [pc, #412]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800955e:	238e      	movs	r3, #142	; 0x8e
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	58d2      	ldr	r2, [r2, r3]
 8009564:	0021      	movs	r1, r4
 8009566:	187b      	adds	r3, r7, r1
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	015b      	lsls	r3, r3, #5
 800956c:	18d3      	adds	r3, r2, r3
 800956e:	3350      	adds	r3, #80	; 0x50
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 8009576:	4a61      	ldr	r2, [pc, #388]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009578:	238e      	movs	r3, #142	; 0x8e
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	58d2      	ldr	r2, [r2, r3]
 800957e:	187b      	adds	r3, r7, r1
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	015b      	lsls	r3, r3, #5
 8009584:	18d3      	adds	r3, r2, r3
 8009586:	334c      	adds	r3, #76	; 0x4c
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2284      	movs	r2, #132	; 0x84
 800958c:	18ba      	adds	r2, r7, r2
 800958e:	6013      	str	r3, [r2, #0]
                    break;
 8009590:	e00a      	b.n	80095a8 <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009592:	2181      	movs	r1, #129	; 0x81
 8009594:	187b      	adds	r3, r7, r1
 8009596:	781a      	ldrb	r2, [r3, #0]
 8009598:	187b      	adds	r3, r7, r1
 800959a:	3201      	adds	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	2381      	movs	r3, #129	; 0x81
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d9a8      	bls.n	80094fa <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80095a8:	2168      	movs	r1, #104	; 0x68
 80095aa:	187b      	adds	r3, r7, r1
 80095ac:	2214      	movs	r2, #20
 80095ae:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095b0:	4a52      	ldr	r2, [pc, #328]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80095b2:	238e      	movs	r3, #142	; 0x8e
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	58d3      	ldr	r3, [r2, r3]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	187a      	adds	r2, r7, r1
 80095bc:	0011      	movs	r1, r2
 80095be:	0018      	movs	r0, r3
 80095c0:	f004 fff6 	bl	800e5b0 <RegionGetPhyParam>
 80095c4:	0003      	movs	r3, r0
 80095c6:	001a      	movs	r2, r3
 80095c8:	2064      	movs	r0, #100	; 0x64
 80095ca:	183b      	adds	r3, r7, r0
 80095cc:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80095ce:	1dbb      	adds	r3, r7, #6
 80095d0:	781d      	ldrb	r5, [r3, #0]
 80095d2:	4a4a      	ldr	r2, [pc, #296]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80095d4:	238e      	movs	r3, #142	; 0x8e
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	58d1      	ldr	r1, [r2, r3]
 80095da:	183b      	adds	r3, r7, r0
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	2275      	movs	r2, #117	; 0x75
 80095e2:	18bc      	adds	r4, r7, r2
 80095e4:	2288      	movs	r2, #136	; 0x88
 80095e6:	0092      	lsls	r2, r2, #2
 80095e8:	588e      	ldr	r6, [r1, r2]
 80095ea:	2134      	movs	r1, #52	; 0x34
 80095ec:	1879      	adds	r1, r7, r1
 80095ee:	2082      	movs	r0, #130	; 0x82
 80095f0:	183a      	adds	r2, r7, r0
 80095f2:	7810      	ldrb	r0, [r2, #0]
 80095f4:	2208      	movs	r2, #8
 80095f6:	18ba      	adds	r2, r7, r2
 80095f8:	9202      	str	r2, [sp, #8]
 80095fa:	1dfa      	adds	r2, r7, #7
 80095fc:	9201      	str	r2, [sp, #4]
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	0033      	movs	r3, r6
 8009602:	000a      	movs	r2, r1
 8009604:	0029      	movs	r1, r5
 8009606:	f004 fad9 	bl	800dbbc <LoRaMacGetFCntDown>
 800960a:	0003      	movs	r3, r0
 800960c:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 800960e:	2275      	movs	r2, #117	; 0x75
 8009610:	18bb      	adds	r3, r7, r2
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d041      	beq.n	800969c <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 8009618:	2375      	movs	r3, #117	; 0x75
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d127      	bne.n	8009672 <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009622:	4b36      	ldr	r3, [pc, #216]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009624:	4a37      	ldr	r2, [pc, #220]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 8009626:	2108      	movs	r1, #8
 8009628:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800962a:	4a34      	ldr	r2, [pc, #208]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800962c:	238e      	movs	r3, #142	; 0x8e
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	58d3      	ldr	r3, [r2, r3]
 8009632:	4a36      	ldr	r2, [pc, #216]	; (800970c <ProcessRadioRxDone+0x6f0>)
 8009634:	5c9b      	ldrb	r3, [r3, r2]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d129      	bne.n	800968e <ProcessRadioRxDone+0x672>
 800963a:	2374      	movs	r3, #116	; 0x74
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	221f      	movs	r2, #31
 8009642:	4393      	bics	r3, r2
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2ba0      	cmp	r3, #160	; 0xa0
 8009648:	d121      	bne.n	800968e <ProcessRadioRxDone+0x672>
 800964a:	4a2c      	ldr	r2, [pc, #176]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800964c:	238e      	movs	r3, #142	; 0x8e
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	58d2      	ldr	r2, [r2, r3]
 8009652:	238a      	movs	r3, #138	; 0x8a
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	58d2      	ldr	r2, [r2, r3]
 8009658:	2334      	movs	r3, #52	; 0x34
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	429a      	cmp	r2, r3
 8009660:	d115      	bne.n	800968e <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8009662:	4a26      	ldr	r2, [pc, #152]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009664:	238e      	movs	r3, #142	; 0x8e
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	58d3      	ldr	r3, [r2, r3]
 800966a:	4a29      	ldr	r2, [pc, #164]	; (8009710 <ProcessRadioRxDone+0x6f4>)
 800966c:	2101      	movs	r1, #1
 800966e:	5499      	strb	r1, [r3, r2]
 8009670:	e00d      	b.n	800968e <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 8009672:	2375      	movs	r3, #117	; 0x75
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d104      	bne.n	8009686 <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800967c:	4b1f      	ldr	r3, [pc, #124]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 800967e:	4a21      	ldr	r2, [pc, #132]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 8009680:	210a      	movs	r1, #10
 8009682:	5499      	strb	r1, [r3, r2]
 8009684:	e003      	b.n	800968e <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009686:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009688:	4a1e      	ldr	r2, [pc, #120]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 800968a:	2101      	movs	r1, #1
 800968c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 8009692:	4920      	ldr	r1, [pc, #128]	; (8009714 <ProcessRadioRxDone+0x6f8>)
 8009694:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 8009696:	f7ff fc93 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 800969a:	e1d2      	b.n	8009a42 <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800969c:	1dfb      	adds	r3, r7, #7
 800969e:	781a      	ldrb	r2, [r3, #0]
 80096a0:	68bd      	ldr	r5, [r7, #8]
 80096a2:	2680      	movs	r6, #128	; 0x80
 80096a4:	19bc      	adds	r4, r7, r6
 80096a6:	2384      	movs	r3, #132	; 0x84
 80096a8:	18fb      	adds	r3, r7, r3
 80096aa:	6819      	ldr	r1, [r3, #0]
 80096ac:	2382      	movs	r3, #130	; 0x82
 80096ae:	18fb      	adds	r3, r7, r3
 80096b0:	7818      	ldrb	r0, [r3, #0]
 80096b2:	2334      	movs	r3, #52	; 0x34
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	002b      	movs	r3, r5
 80096ba:	f004 f987 	bl	800d9cc <LoRaMacCryptoUnsecureMessage>
 80096be:	0003      	movs	r3, r0
 80096c0:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80096c2:	19bb      	adds	r3, r7, r6
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d028      	beq.n	800971c <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80096ca:	2380      	movs	r3, #128	; 0x80
 80096cc:	18fb      	adds	r3, r7, r3
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d10c      	bne.n	80096ee <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80096d4:	4b09      	ldr	r3, [pc, #36]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80096d6:	4a0b      	ldr	r2, [pc, #44]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 80096d8:	210b      	movs	r1, #11
 80096da:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 80096dc:	4b07      	ldr	r3, [pc, #28]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80096de:	4a0e      	ldr	r2, [pc, #56]	; (8009718 <ProcessRadioRxDone+0x6fc>)
 80096e0:	5c9b      	ldrb	r3, [r3, r2]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d100      	bne.n	80096e8 <ProcessRadioRxDone+0x6cc>
 80096e6:	e1ab      	b.n	8009a40 <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 80096e8:	f7ff fc6a 	bl	8008fc0 <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 80096ec:	e1a8      	b.n	8009a40 <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80096ee:	4b03      	ldr	r3, [pc, #12]	; (80096fc <ProcessRadioRxDone+0x6e0>)
 80096f0:	4a04      	ldr	r2, [pc, #16]	; (8009704 <ProcessRadioRxDone+0x6e8>)
 80096f2:	210c      	movs	r1, #12
 80096f4:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 80096f6:	f7ff fc63 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 80096fa:	e1a1      	b.n	8009a40 <ProcessRadioRxDone+0xa24>
 80096fc:	2000049c 	.word	0x2000049c
 8009700:	00000414 	.word	0x00000414
 8009704:	00000411 	.word	0x00000411
 8009708:	200006dc 	.word	0x200006dc
 800970c:	00000222 	.word	0x00000222
 8009710:	0000021a 	.word	0x0000021a
 8009714:	00000424 	.word	0x00000424
 8009718:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800971c:	4bca      	ldr	r3, [pc, #808]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800971e:	4acb      	ldr	r2, [pc, #812]	; (8009a4c <ProcessRadioRxDone+0xa30>)
 8009720:	2100      	movs	r1, #0
 8009722:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 8009724:	4bc8      	ldr	r3, [pc, #800]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009726:	2483      	movs	r4, #131	; 0x83
 8009728:	193a      	adds	r2, r7, r4
 800972a:	49c9      	ldr	r1, [pc, #804]	; (8009a50 <ProcessRadioRxDone+0xa34>)
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009730:	2034      	movs	r0, #52	; 0x34
 8009732:	183b      	adds	r3, r7, r0
 8009734:	7b1b      	ldrb	r3, [r3, #12]
 8009736:	06db      	lsls	r3, r3, #27
 8009738:	0fdb      	lsrs	r3, r3, #31
 800973a:	b2db      	uxtb	r3, r3
 800973c:	0019      	movs	r1, r3
 800973e:	4bc2      	ldr	r3, [pc, #776]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009740:	4ac4      	ldr	r2, [pc, #784]	; (8009a54 <ProcessRadioRxDone+0xa38>)
 8009742:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 8009744:	4ac0      	ldr	r2, [pc, #768]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009746:	2383      	movs	r3, #131	; 0x83
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	2100      	movs	r1, #0
 800974c:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 800974e:	4bbe      	ldr	r3, [pc, #760]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009750:	4ac1      	ldr	r2, [pc, #772]	; (8009a58 <ProcessRadioRxDone+0xa3c>)
 8009752:	2100      	movs	r1, #0
 8009754:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	4bbb      	ldr	r3, [pc, #748]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800975a:	49c0      	ldr	r1, [pc, #768]	; (8009a5c <ProcessRadioRxDone+0xa40>)
 800975c:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800975e:	183b      	adds	r3, r7, r0
 8009760:	7b1b      	ldrb	r3, [r3, #12]
 8009762:	069b      	lsls	r3, r3, #26
 8009764:	0fdb      	lsrs	r3, r3, #31
 8009766:	b2db      	uxtb	r3, r3
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	4193      	sbcs	r3, r2
 800976c:	b2d9      	uxtb	r1, r3
 800976e:	4bb6      	ldr	r3, [pc, #728]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009770:	4abb      	ldr	r2, [pc, #748]	; (8009a60 <ProcessRadioRxDone+0xa44>)
 8009772:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009774:	4bb4      	ldr	r3, [pc, #720]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009776:	4abb      	ldr	r2, [pc, #748]	; (8009a64 <ProcessRadioRxDone+0xa48>)
 8009778:	2100      	movs	r1, #0
 800977a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800977c:	183b      	adds	r3, r7, r0
 800977e:	7b1b      	ldrb	r3, [r3, #12]
 8009780:	069b      	lsls	r3, r3, #26
 8009782:	0fdb      	lsrs	r3, r3, #31
 8009784:	b2db      	uxtb	r3, r3
 8009786:	1e5a      	subs	r2, r3, #1
 8009788:	4193      	sbcs	r3, r2
 800978a:	b2d9      	uxtb	r1, r3
 800978c:	4aae      	ldr	r2, [pc, #696]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800978e:	2386      	movs	r3, #134	; 0x86
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 8009794:	4aac      	ldr	r2, [pc, #688]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009796:	238e      	movs	r3, #142	; 0x8e
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	58d3      	ldr	r3, [r2, r3]
 800979c:	22cc      	movs	r2, #204	; 0xcc
 800979e:	2100      	movs	r1, #0
 80097a0:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 80097a2:	193b      	adds	r3, r7, r4
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80097aa:	4aa7      	ldr	r2, [pc, #668]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80097ac:	2382      	movs	r3, #130	; 0x82
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	2102      	movs	r1, #2
 80097b2:	54d1      	strb	r1, [r2, r3]
 80097b4:	e032      	b.n	800981c <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80097b6:	2374      	movs	r3, #116	; 0x74
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	221f      	movs	r2, #31
 80097be:	4393      	bics	r3, r2
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2ba0      	cmp	r3, #160	; 0xa0
 80097c4:	d11e      	bne.n	8009804 <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 80097c6:	4aa0      	ldr	r2, [pc, #640]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80097c8:	238e      	movs	r3, #142	; 0x8e
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	58d3      	ldr	r3, [r2, r3]
 80097ce:	4aa6      	ldr	r2, [pc, #664]	; (8009a68 <ProcessRadioRxDone+0xa4c>)
 80097d0:	2101      	movs	r1, #1
 80097d2:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80097d4:	4a9c      	ldr	r2, [pc, #624]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80097d6:	238e      	movs	r3, #142	; 0x8e
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	58d3      	ldr	r3, [r2, r3]
 80097dc:	4aa3      	ldr	r2, [pc, #652]	; (8009a6c <ProcessRadioRxDone+0xa50>)
 80097de:	5c9b      	ldrb	r3, [r3, r2]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d109      	bne.n	80097f8 <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80097e4:	4a98      	ldr	r2, [pc, #608]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80097e6:	238e      	movs	r3, #142	; 0x8e
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	58d2      	ldr	r2, [r2, r3]
 80097ec:	2334      	movs	r3, #52	; 0x34
 80097ee:	18fb      	adds	r3, r7, r3
 80097f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097f2:	238a      	movs	r3, #138	; 0x8a
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80097f8:	4a93      	ldr	r2, [pc, #588]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80097fa:	2382      	movs	r3, #130	; 0x82
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	2101      	movs	r1, #1
 8009800:	54d1      	strb	r1, [r2, r3]
 8009802:	e00b      	b.n	800981c <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8009804:	4a90      	ldr	r2, [pc, #576]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009806:	238e      	movs	r3, #142	; 0x8e
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	58d3      	ldr	r3, [r2, r3]
 800980c:	4a96      	ldr	r2, [pc, #600]	; (8009a68 <ProcessRadioRxDone+0xa4c>)
 800980e:	2100      	movs	r1, #0
 8009810:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009812:	4a8d      	ldr	r2, [pc, #564]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009814:	2382      	movs	r3, #130	; 0x82
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	2100      	movs	r1, #0
 800981a:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 800981c:	1dfb      	adds	r3, r7, #7
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	0011      	movs	r1, r2
 8009824:	0018      	movs	r0, r3
 8009826:	f004 fa77 	bl	800dd18 <LoRaMacSetFCntDown>
 800982a:	1e03      	subs	r3, r0, #0
 800982c:	d007      	beq.n	800983e <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800982e:	4b86      	ldr	r3, [pc, #536]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009830:	4a86      	ldr	r2, [pc, #536]	; (8009a4c <ProcessRadioRxDone+0xa30>)
 8009832:	2101      	movs	r1, #1
 8009834:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009836:	f7ff fbc3 	bl	8008fc0 <PrepareRxDoneAbort>
                return;
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	e101      	b.n	8009a42 <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800983e:	4b82      	ldr	r3, [pc, #520]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009840:	4a8b      	ldr	r2, [pc, #556]	; (8009a70 <ProcessRadioRxDone+0xa54>)
 8009842:	5c98      	ldrb	r0, [r3, r2]
 8009844:	4b80      	ldr	r3, [pc, #512]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009846:	4a8b      	ldr	r2, [pc, #556]	; (8009a74 <ProcessRadioRxDone+0xa58>)
 8009848:	5c9a      	ldrb	r2, [r3, r2]
 800984a:	2334      	movs	r3, #52	; 0x34
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	7b1b      	ldrb	r3, [r3, #12]
 8009850:	1c19      	adds	r1, r3, #0
 8009852:	f001 fe93 	bl	800b57c <RemoveMacCommands>

            switch( fType )
 8009856:	1dbb      	adds	r3, r7, #6
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d038      	beq.n	80098d0 <ProcessRadioRxDone+0x8b4>
 800985e:	dc02      	bgt.n	8009866 <ProcessRadioRxDone+0x84a>
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <ProcessRadioRxDone+0x854>
 8009864:	e086      	b.n	8009974 <ProcessRadioRxDone+0x958>
 8009866:	2b02      	cmp	r3, #2
 8009868:	d052      	beq.n	8009910 <ProcessRadioRxDone+0x8f4>
 800986a:	2b03      	cmp	r3, #3
 800986c:	d06a      	beq.n	8009944 <ProcessRadioRxDone+0x928>
 800986e:	e081      	b.n	8009974 <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009870:	2034      	movs	r0, #52	; 0x34
 8009872:	183b      	adds	r3, r7, r0
 8009874:	7b1b      	ldrb	r3, [r3, #12]
 8009876:	071b      	lsls	r3, r3, #28
 8009878:	0f1b      	lsrs	r3, r3, #28
 800987a:	b2db      	uxtb	r3, r3
 800987c:	001c      	movs	r4, r3
 800987e:	4b72      	ldr	r3, [pc, #456]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009880:	4a7b      	ldr	r2, [pc, #492]	; (8009a70 <ProcessRadioRxDone+0xa54>)
 8009882:	5c9b      	ldrb	r3, [r3, r2]
 8009884:	2277      	movs	r2, #119	; 0x77
 8009886:	18ba      	adds	r2, r7, r2
 8009888:	2100      	movs	r1, #0
 800988a:	5651      	ldrsb	r1, [r2, r1]
 800988c:	0005      	movs	r5, r0
 800988e:	183a      	adds	r2, r7, r0
 8009890:	3210      	adds	r2, #16
 8009892:	0010      	movs	r0, r2
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	000b      	movs	r3, r1
 8009898:	0022      	movs	r2, r4
 800989a:	2100      	movs	r1, #0
 800989c:	f000 fe72 	bl	800a584 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80098a0:	0028      	movs	r0, r5
 80098a2:	183b      	adds	r3, r7, r0
 80098a4:	2220      	movs	r2, #32
 80098a6:	5c99      	ldrb	r1, [r3, r2]
 80098a8:	4b67      	ldr	r3, [pc, #412]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80098aa:	4a73      	ldr	r2, [pc, #460]	; (8009a78 <ProcessRadioRxDone+0xa5c>)
 80098ac:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80098ae:	183b      	adds	r3, r7, r0
 80098b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098b2:	4a65      	ldr	r2, [pc, #404]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80098b4:	2383      	movs	r3, #131	; 0x83
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80098ba:	183b      	adds	r3, r7, r0
 80098bc:	2228      	movs	r2, #40	; 0x28
 80098be:	5c99      	ldrb	r1, [r3, r2]
 80098c0:	4b61      	ldr	r3, [pc, #388]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80098c2:	4a65      	ldr	r2, [pc, #404]	; (8009a58 <ProcessRadioRxDone+0xa3c>)
 80098c4:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 80098c6:	4b60      	ldr	r3, [pc, #384]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80098c8:	4a6c      	ldr	r2, [pc, #432]	; (8009a7c <ProcessRadioRxDone+0xa60>)
 80098ca:	2101      	movs	r1, #1
 80098cc:	5499      	strb	r1, [r3, r2]
                    break;
 80098ce:	e058      	b.n	8009982 <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80098d0:	2034      	movs	r0, #52	; 0x34
 80098d2:	183b      	adds	r3, r7, r0
 80098d4:	7b1b      	ldrb	r3, [r3, #12]
 80098d6:	071b      	lsls	r3, r3, #28
 80098d8:	0f1b      	lsrs	r3, r3, #28
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	001c      	movs	r4, r3
 80098de:	4b5a      	ldr	r3, [pc, #360]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80098e0:	4a63      	ldr	r2, [pc, #396]	; (8009a70 <ProcessRadioRxDone+0xa54>)
 80098e2:	5c9b      	ldrb	r3, [r3, r2]
 80098e4:	2277      	movs	r2, #119	; 0x77
 80098e6:	18ba      	adds	r2, r7, r2
 80098e8:	2100      	movs	r1, #0
 80098ea:	5651      	ldrsb	r1, [r2, r1]
 80098ec:	0005      	movs	r5, r0
 80098ee:	183a      	adds	r2, r7, r0
 80098f0:	3210      	adds	r2, #16
 80098f2:	0010      	movs	r0, r2
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	000b      	movs	r3, r1
 80098f8:	0022      	movs	r2, r4
 80098fa:	2100      	movs	r1, #0
 80098fc:	f000 fe42 	bl	800a584 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009900:	0028      	movs	r0, r5
 8009902:	183b      	adds	r3, r7, r0
 8009904:	2220      	movs	r2, #32
 8009906:	5c99      	ldrb	r1, [r3, r2]
 8009908:	4b4f      	ldr	r3, [pc, #316]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800990a:	4a5b      	ldr	r2, [pc, #364]	; (8009a78 <ProcessRadioRxDone+0xa5c>)
 800990c:	5499      	strb	r1, [r3, r2]
                    break;
 800990e:	e038      	b.n	8009982 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8009910:	2434      	movs	r4, #52	; 0x34
 8009912:	193b      	adds	r3, r7, r4
 8009914:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009916:	193b      	adds	r3, r7, r4
 8009918:	2228      	movs	r2, #40	; 0x28
 800991a:	5c99      	ldrb	r1, [r3, r2]
 800991c:	4b4a      	ldr	r3, [pc, #296]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800991e:	4a54      	ldr	r2, [pc, #336]	; (8009a70 <ProcessRadioRxDone+0xa54>)
 8009920:	5c9b      	ldrb	r3, [r3, r2]
 8009922:	2277      	movs	r2, #119	; 0x77
 8009924:	18ba      	adds	r2, r7, r2
 8009926:	7812      	ldrb	r2, [r2, #0]
 8009928:	b252      	sxtb	r2, r2
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	0013      	movs	r3, r2
 800992e:	000a      	movs	r2, r1
 8009930:	2100      	movs	r1, #0
 8009932:	f000 fe27 	bl	800a584 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009936:	193b      	adds	r3, r7, r4
 8009938:	2220      	movs	r2, #32
 800993a:	5c99      	ldrb	r1, [r3, r2]
 800993c:	4b42      	ldr	r3, [pc, #264]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800993e:	4a4e      	ldr	r2, [pc, #312]	; (8009a78 <ProcessRadioRxDone+0xa5c>)
 8009940:	5499      	strb	r1, [r3, r2]
                    break;
 8009942:	e01e      	b.n	8009982 <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009944:	2034      	movs	r0, #52	; 0x34
 8009946:	183b      	adds	r3, r7, r0
 8009948:	2220      	movs	r2, #32
 800994a:	5c99      	ldrb	r1, [r3, r2]
 800994c:	4b3e      	ldr	r3, [pc, #248]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800994e:	4a4a      	ldr	r2, [pc, #296]	; (8009a78 <ProcessRadioRxDone+0xa5c>)
 8009950:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009952:	183b      	adds	r3, r7, r0
 8009954:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009956:	4a3c      	ldr	r2, [pc, #240]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009958:	2383      	movs	r3, #131	; 0x83
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800995e:	183b      	adds	r3, r7, r0
 8009960:	2228      	movs	r2, #40	; 0x28
 8009962:	5c99      	ldrb	r1, [r3, r2]
 8009964:	4b38      	ldr	r3, [pc, #224]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009966:	4a3c      	ldr	r2, [pc, #240]	; (8009a58 <ProcessRadioRxDone+0xa3c>)
 8009968:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800996a:	4b37      	ldr	r3, [pc, #220]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 800996c:	4a43      	ldr	r2, [pc, #268]	; (8009a7c <ProcessRadioRxDone+0xa60>)
 800996e:	2101      	movs	r1, #1
 8009970:	5499      	strb	r1, [r3, r2]
                    break;
 8009972:	e006      	b.n	8009982 <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009974:	4b34      	ldr	r3, [pc, #208]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009976:	4a35      	ldr	r2, [pc, #212]	; (8009a4c <ProcessRadioRxDone+0xa30>)
 8009978:	2101      	movs	r1, #1
 800997a:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800997c:	f7ff fb20 	bl	8008fc0 <PrepareRxDoneAbort>
                    break;
 8009980:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009982:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009984:	4a3e      	ldr	r2, [pc, #248]	; (8009a80 <ProcessRadioRxDone+0xa64>)
 8009986:	5c99      	ldrb	r1, [r3, r2]
 8009988:	2002      	movs	r0, #2
 800998a:	4301      	orrs	r1, r0
 800998c:	5499      	strb	r1, [r3, r2]

            break;
 800998e:	e032      	b.n	80099f6 <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 8009990:	2476      	movs	r4, #118	; 0x76
 8009992:	193b      	adds	r3, r7, r4
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009998:	18d1      	adds	r1, r2, r3
 800999a:	257a      	movs	r5, #122	; 0x7a
 800999c:	197b      	adds	r3, r7, r5
 800999e:	881a      	ldrh	r2, [r3, #0]
 80099a0:	4b38      	ldr	r3, [pc, #224]	; (8009a84 <ProcessRadioRxDone+0xa68>)
 80099a2:	0018      	movs	r0, r3
 80099a4:	f007 fa34 	bl	8010e10 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80099a8:	4a27      	ldr	r2, [pc, #156]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099aa:	2382      	movs	r3, #130	; 0x82
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	2103      	movs	r1, #3
 80099b0:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80099b2:	4b25      	ldr	r3, [pc, #148]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099b4:	4a25      	ldr	r2, [pc, #148]	; (8009a4c <ProcessRadioRxDone+0xa30>)
 80099b6:	2100      	movs	r1, #0
 80099b8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80099ba:	4a23      	ldr	r2, [pc, #140]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099bc:	2383      	movs	r3, #131	; 0x83
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	4930      	ldr	r1, [pc, #192]	; (8009a84 <ProcessRadioRxDone+0xa68>)
 80099c2:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80099c4:	197b      	adds	r3, r7, r5
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	193b      	adds	r3, r7, r4
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	b2d9      	uxtb	r1, r3
 80099d2:	4b1d      	ldr	r3, [pc, #116]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099d4:	4a20      	ldr	r2, [pc, #128]	; (8009a58 <ProcessRadioRxDone+0xa3c>)
 80099d6:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80099d8:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099da:	4a29      	ldr	r2, [pc, #164]	; (8009a80 <ProcessRadioRxDone+0xa64>)
 80099dc:	5c99      	ldrb	r1, [r3, r2]
 80099de:	2002      	movs	r0, #2
 80099e0:	4301      	orrs	r1, r0
 80099e2:	5499      	strb	r1, [r3, r2]
            break;
 80099e4:	e007      	b.n	80099f6 <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099e6:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099e8:	4a18      	ldr	r2, [pc, #96]	; (8009a4c <ProcessRadioRxDone+0xa30>)
 80099ea:	2101      	movs	r1, #1
 80099ec:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 80099ee:	f7ff fae7 	bl	8008fc0 <PrepareRxDoneAbort>
            break;
 80099f2:	e000      	b.n	80099f6 <ProcessRadioRxDone+0x9da>
            break;
 80099f4:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 80099f6:	4a14      	ldr	r2, [pc, #80]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 80099f8:	238e      	movs	r3, #142	; 0x8e
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	58d3      	ldr	r3, [r2, r3]
 80099fe:	4a22      	ldr	r2, [pc, #136]	; (8009a88 <ProcessRadioRxDone+0xa6c>)
 8009a00:	5c98      	ldrb	r0, [r3, r2]
 8009a02:	4a11      	ldr	r2, [pc, #68]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009a04:	238e      	movs	r3, #142	; 0x8e
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	58d3      	ldr	r3, [r2, r3]
 8009a0a:	22c8      	movs	r2, #200	; 0xc8
 8009a0c:	5c99      	ldrb	r1, [r3, r2]
 8009a0e:	4a0e      	ldr	r2, [pc, #56]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009a10:	2386      	movs	r3, #134	; 0x86
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	5cd3      	ldrb	r3, [r2, r3]
 8009a16:	001a      	movs	r2, r3
 8009a18:	f000 fc94 	bl	800a344 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 8009a1c:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <ProcessRadioRxDone+0xa70>)
 8009a1e:	0018      	movs	r0, r3
 8009a20:	f007 f9a4 	bl	8010d6c <TimerIsStarted>
 8009a24:	0003      	movs	r3, r0
 8009a26:	001a      	movs	r2, r3
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4053      	eors	r3, r2
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <ProcessRadioRxDone+0xa2c>)
 8009a34:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <ProcessRadioRxDone+0xa64>)
 8009a36:	5c99      	ldrb	r1, [r3, r2]
 8009a38:	2010      	movs	r0, #16
 8009a3a:	4301      	orrs	r1, r0
 8009a3c:	5499      	strb	r1, [r3, r2]
 8009a3e:	e000      	b.n	8009a42 <ProcessRadioRxDone+0xa26>
                return;
 8009a40:	46c0      	nop			; (mov r8, r8)
    }
}
 8009a42:	46bd      	mov	sp, r7
 8009a44:	b023      	add	sp, #140	; 0x8c
 8009a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a48:	2000049c 	.word	0x2000049c
 8009a4c:	00000411 	.word	0x00000411
 8009a50:	00000412 	.word	0x00000412
 8009a54:	00000415 	.word	0x00000415
 8009a58:	0000041c 	.word	0x0000041c
 8009a5c:	00000424 	.word	0x00000424
 8009a60:	00000422 	.word	0x00000422
 8009a64:	0000042d 	.word	0x0000042d
 8009a68:	0000021a 	.word	0x0000021a
 8009a6c:	00000222 	.word	0x00000222
 8009a70:	00000421 	.word	0x00000421
 8009a74:	0000042c 	.word	0x0000042c
 8009a78:	00000413 	.word	0x00000413
 8009a7c:	0000041d 	.word	0x0000041d
 8009a80:	0000046d 	.word	0x0000046d
 8009a84:	200006dc 	.word	0x200006dc
 8009a88:	00000219 	.word	0x00000219
 8009a8c:	20000890 	.word	0x20000890

08009a90 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009a94:	4a0e      	ldr	r2, [pc, #56]	; (8009ad0 <ProcessRadioTxTimeout+0x40>)
 8009a96:	238e      	movs	r3, #142	; 0x8e
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	58d3      	ldr	r3, [r2, r3]
 8009a9c:	22c8      	movs	r2, #200	; 0xc8
 8009a9e:	5c9b      	ldrb	r3, [r3, r2]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d003      	beq.n	8009aac <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <ProcessRadioTxTimeout+0x44>)
 8009aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa8:	4798      	blx	r3
 8009aaa:	e001      	b.n	8009ab0 <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 8009aac:	f001 fd8e 	bl	800b5cc <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <ProcessRadioTxTimeout+0x40>)
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <ProcessRadioTxTimeout+0x48>)
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009ab8:	2002      	movs	r0, #2
 8009aba:	f002 fbc1 	bl	800c240 <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009abe:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <ProcessRadioTxTimeout+0x40>)
 8009ac0:	4a06      	ldr	r2, [pc, #24]	; (8009adc <ProcessRadioTxTimeout+0x4c>)
 8009ac2:	5c99      	ldrb	r1, [r3, r2]
 8009ac4:	2010      	movs	r0, #16
 8009ac6:	4301      	orrs	r1, r0
 8009ac8:	5499      	strb	r1, [r3, r2]
}
 8009aca:	46c0      	nop			; (mov r8, r8)
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	2000049c 	.word	0x2000049c
 8009ad4:	0801bc94 	.word	0x0801bc94
 8009ad8:	0000042d 	.word	0x0000042d
 8009adc:	0000046d 	.word	0x0000046d

08009ae0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	0002      	movs	r2, r0
 8009ae8:	1dfb      	adds	r3, r7, #7
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	1dbb      	adds	r3, r7, #6
 8009aee:	1c0a      	adds	r2, r1, #0
 8009af0:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 8009af2:	230f      	movs	r3, #15
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009afa:	4a55      	ldr	r2, [pc, #340]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009afc:	238e      	movs	r3, #142	; 0x8e
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	58d3      	ldr	r3, [r2, r3]
 8009b02:	22c8      	movs	r2, #200	; 0xc8
 8009b04:	5c9b      	ldrb	r3, [r3, r2]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d002      	beq.n	8009b10 <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 8009b0a:	4b52      	ldr	r3, [pc, #328]	; (8009c54 <HandleRadioRxErrorTimeout+0x174>)
 8009b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009b10:	f002 f840 	bl	800bb94 <LoRaMacClassBIsBeaconExpected>
 8009b14:	1e03      	subs	r3, r0, #0
 8009b16:	d009      	beq.n	8009b2c <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009b18:	2002      	movs	r0, #2
 8009b1a:	f001 fff9 	bl	800bb10 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009b1e:	2000      	movs	r0, #0
 8009b20:	f002 f814 	bl	800bb4c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009b24:	230f      	movs	r3, #15
 8009b26:	18fb      	adds	r3, r7, r3
 8009b28:	2201      	movs	r2, #1
 8009b2a:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009b2c:	4a48      	ldr	r2, [pc, #288]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009b2e:	238e      	movs	r3, #142	; 0x8e
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	58d3      	ldr	r3, [r2, r3]
 8009b34:	22c8      	movs	r2, #200	; 0xc8
 8009b36:	5c9b      	ldrb	r3, [r3, r2]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d11b      	bne.n	8009b74 <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009b3c:	f002 f830 	bl	800bba0 <LoRaMacClassBIsPingExpected>
 8009b40:	1e03      	subs	r3, r0, #0
 8009b42:	d009      	beq.n	8009b58 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009b44:	2000      	movs	r0, #0
 8009b46:	f001 ffed 	bl	800bb24 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f002 f806 	bl	800bb5c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009b50:	230f      	movs	r3, #15
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	2201      	movs	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009b58:	f002 f828 	bl	800bbac <LoRaMacClassBIsMulticastExpected>
 8009b5c:	1e03      	subs	r3, r0, #0
 8009b5e:	d009      	beq.n	8009b74 <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009b60:	2000      	movs	r0, #0
 8009b62:	f001 ffe9 	bl	800bb38 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009b66:	2000      	movs	r0, #0
 8009b68:	f002 f800 	bl	800bb6c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8009b6c:	230f      	movs	r3, #15
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	2201      	movs	r2, #1
 8009b72:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8009b74:	230f      	movs	r3, #15
 8009b76:	18fb      	adds	r3, r7, r3
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4053      	eors	r3, r2
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d057      	beq.n	8009c34 <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009b84:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009b86:	4a34      	ldr	r2, [pc, #208]	; (8009c58 <HandleRadioRxErrorTimeout+0x178>)
 8009b88:	5c9b      	ldrb	r3, [r3, r2]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d132      	bne.n	8009bf4 <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 8009b8e:	4a30      	ldr	r2, [pc, #192]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009b90:	238e      	movs	r3, #142	; 0x8e
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	58d3      	ldr	r3, [r2, r3]
 8009b96:	4a31      	ldr	r2, [pc, #196]	; (8009c5c <HandleRadioRxErrorTimeout+0x17c>)
 8009b98:	5c9b      	ldrb	r3, [r3, r2]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009b9e:	4b2c      	ldr	r3, [pc, #176]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009ba0:	1dfa      	adds	r2, r7, #7
 8009ba2:	492f      	ldr	r1, [pc, #188]	; (8009c60 <HandleRadioRxErrorTimeout+0x180>)
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009ba8:	1dfb      	adds	r3, r7, #7
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	0018      	movs	r0, r3
 8009bae:	f002 fb47 	bl	800c240 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009bb2:	4a27      	ldr	r2, [pc, #156]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009bb4:	238e      	movs	r3, #142	; 0x8e
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	58d3      	ldr	r3, [r2, r3]
 8009bba:	22c8      	movs	r2, #200	; 0xc8
 8009bbc:	5c9b      	ldrb	r3, [r3, r2]
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d038      	beq.n	8009c34 <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009bc2:	4a23      	ldr	r2, [pc, #140]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009bc4:	23d0      	movs	r3, #208	; 0xd0
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	58d3      	ldr	r3, [r2, r3]
 8009bca:	0018      	movs	r0, r3
 8009bcc:	f007 f8e1 	bl	8010d92 <TimerGetElapsedTime>
 8009bd0:	0001      	movs	r1, r0
 8009bd2:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009bd4:	23f2      	movs	r3, #242	; 0xf2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	58d3      	ldr	r3, [r2, r3]
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d32a      	bcc.n	8009c34 <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 8009bde:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <HandleRadioRxErrorTimeout+0x184>)
 8009be0:	0018      	movs	r0, r3
 8009be2:	f007 f893 	bl	8010d0c <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 8009be6:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009be8:	4a1f      	ldr	r2, [pc, #124]	; (8009c68 <HandleRadioRxErrorTimeout+0x188>)
 8009bea:	5c99      	ldrb	r1, [r3, r2]
 8009bec:	2010      	movs	r0, #16
 8009bee:	4301      	orrs	r1, r0
 8009bf0:	5499      	strb	r1, [r3, r2]
 8009bf2:	e01f      	b.n	8009c34 <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 8009bf4:	4a16      	ldr	r2, [pc, #88]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009bf6:	238e      	movs	r3, #142	; 0x8e
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	58d3      	ldr	r3, [r2, r3]
 8009bfc:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <HandleRadioRxErrorTimeout+0x17c>)
 8009bfe:	5c9b      	ldrb	r3, [r3, r2]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009c04:	4b12      	ldr	r3, [pc, #72]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009c06:	1dba      	adds	r2, r7, #6
 8009c08:	4915      	ldr	r1, [pc, #84]	; (8009c60 <HandleRadioRxErrorTimeout+0x180>)
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009c0e:	1dbb      	adds	r3, r7, #6
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	0018      	movs	r0, r3
 8009c14:	f002 fb14 	bl	800c240 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009c18:	4a0d      	ldr	r2, [pc, #52]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009c1a:	238e      	movs	r3, #142	; 0x8e
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	58d3      	ldr	r3, [r2, r3]
 8009c20:	22c8      	movs	r2, #200	; 0xc8
 8009c22:	5c9b      	ldrb	r3, [r3, r2]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d005      	beq.n	8009c34 <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009c28:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009c2a:	4a0f      	ldr	r2, [pc, #60]	; (8009c68 <HandleRadioRxErrorTimeout+0x188>)
 8009c2c:	5c99      	ldrb	r1, [r3, r2]
 8009c2e:	2010      	movs	r0, #16
 8009c30:	4301      	orrs	r1, r0
 8009c32:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009c34:	4a06      	ldr	r2, [pc, #24]	; (8009c50 <HandleRadioRxErrorTimeout+0x170>)
 8009c36:	238e      	movs	r3, #142	; 0x8e
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	58d3      	ldr	r3, [r2, r3]
 8009c3c:	22c8      	movs	r2, #200	; 0xc8
 8009c3e:	5c9b      	ldrb	r3, [r3, r2]
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d101      	bne.n	8009c48 <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 8009c44:	f001 fcc2 	bl	800b5cc <OpenContinuousRx2Window>
    }
}
 8009c48:	46c0      	nop			; (mov r8, r8)
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	b004      	add	sp, #16
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	2000049c 	.word	0x2000049c
 8009c54:	0801bc94 	.word	0x0801bc94
 8009c58:	0000046c 	.word	0x0000046c
 8009c5c:	00000219 	.word	0x00000219
 8009c60:	0000042d 	.word	0x0000042d
 8009c64:	20000848 	.word	0x20000848
 8009c68:	0000046d 	.word	0x0000046d

08009c6c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009c70:	2106      	movs	r1, #6
 8009c72:	2005      	movs	r0, #5
 8009c74:	f7ff ff34 	bl	8009ae0 <HandleRadioRxErrorTimeout>
}
 8009c78:	46c0      	nop			; (mov r8, r8)
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009c82:	2104      	movs	r1, #4
 8009c84:	2003      	movs	r0, #3
 8009c86:	f7ff ff2b 	bl	8009ae0 <HandleRadioRxErrorTimeout>
}
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8009c96:	f00f fa9f 	bl	80191d8 <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 8009c9a:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <LoRaMacHandleIrqEvents+0x84>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 8009ca0:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <LoRaMacHandleIrqEvents+0x84>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 8009ca6:	f00f faab 	bl	8019200 <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d02c      	beq.n	8009d0a <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 8009cb0:	1d3b      	adds	r3, r7, #4
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2210      	movs	r2, #16
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 8009cbe:	f7ff f8af 	bl	8008e20 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8009cc2:	1d3b      	adds	r3, r7, #4
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2208      	movs	r2, #8
 8009cc8:	4013      	ands	r3, r2
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 8009cd0:	f7ff f9a4 	bl	800901c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8009cd4:	1d3b      	adds	r3, r7, #4
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2204      	movs	r2, #4
 8009cda:	4013      	ands	r3, r2
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 8009ce2:	f7ff fed5 	bl	8009a90 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8009ce6:	1d3b      	adds	r3, r7, #4
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2202      	movs	r2, #2
 8009cec:	4013      	ands	r3, r2
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 8009cf4:	f7ff ffba 	bl	8009c6c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8009cf8:	1d3b      	adds	r3, r7, #4
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	4013      	ands	r3, r2
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 8009d06:	f7ff ffba 	bl	8009c7e <ProcessRadioRxTimeout>
        }
    }
}
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	b002      	add	sp, #8
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	20000910 	.word	0x20000910

08009d18 <LoRaMacEnableRequests>:
    return LORAMAC_TRUE;
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	0002      	movs	r2, r0
 8009d20:	1dfb      	adds	r3, r7, #7
 8009d22:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <LoRaMacEnableRequests+0x20>)
 8009d26:	1dfa      	adds	r2, r7, #7
 8009d28:	4904      	ldr	r1, [pc, #16]	; (8009d3c <LoRaMacEnableRequests+0x24>)
 8009d2a:	7812      	ldrb	r2, [r2, #0]
 8009d2c:	545a      	strb	r2, [r3, r1]
}
 8009d2e:	46c0      	nop			; (mov r8, r8)
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b002      	add	sp, #8
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	2000049c 	.word	0x2000049c
 8009d3c:	0000046e 	.word	0x0000046e

08009d40 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	4a2c      	ldr	r2, [pc, #176]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009d4a:	492d      	ldr	r1, [pc, #180]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009d4c:	5c52      	ldrb	r2, [r2, r1]
 8009d4e:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8009d50:	4a2a      	ldr	r2, [pc, #168]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009d52:	23d5      	movs	r3, #213	; 0xd5
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	58d3      	ldr	r3, [r2, r3]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d14a      	bne.n	8009df2 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009d5c:	4b27      	ldr	r3, [pc, #156]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009d5e:	4a28      	ldr	r2, [pc, #160]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009d60:	5c9b      	ldrb	r3, [r3, r2]
 8009d62:	2201      	movs	r2, #1
 8009d64:	4013      	ands	r3, r2
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009d6c:	4b23      	ldr	r3, [pc, #140]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009d6e:	4a24      	ldr	r2, [pc, #144]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009d70:	5c99      	ldrb	r1, [r3, r2]
 8009d72:	2001      	movs	r0, #1
 8009d74:	4381      	bics	r1, r0
 8009d76:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009d78:	4b20      	ldr	r3, [pc, #128]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009d7a:	4a21      	ldr	r2, [pc, #132]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009d7c:	5c9b      	ldrb	r3, [r3, r2]
 8009d7e:	2204      	movs	r2, #4
 8009d80:	4013      	ands	r3, r2
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009d88:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009d8a:	4a1d      	ldr	r2, [pc, #116]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009d8c:	5c99      	ldrb	r1, [r3, r2]
 8009d8e:	2004      	movs	r0, #4
 8009d90:	4381      	bics	r1, r0
 8009d92:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009d94:	2001      	movs	r0, #1
 8009d96:	f7ff ffbf 	bl	8009d18 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8009d9a:	1d3b      	adds	r3, r7, #4
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	4013      	ands	r3, r2
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009da8:	4a14      	ldr	r2, [pc, #80]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009daa:	23d6      	movs	r3, #214	; 0xd6
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	58d3      	ldr	r3, [r2, r3]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a14      	ldr	r2, [pc, #80]	; (8009e04 <LoRaMacHandleRequestEvents+0xc4>)
 8009db4:	0010      	movs	r0, r2
 8009db6:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8009db8:	1d3b      	adds	r3, r7, #4
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009dc6:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <LoRaMacHandleRequestEvents+0xc8>)
 8009dc8:	0018      	movs	r0, r3
 8009dca:	f002 fa8f 	bl	800c2ec <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009dce:	f002 faef 	bl	800c3b0 <LoRaMacConfirmQueueGetCnt>
 8009dd2:	1e03      	subs	r3, r0, #0
 8009dd4:	d005      	beq.n	8009de2 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009dd8:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009dda:	5c99      	ldrb	r1, [r3, r2]
 8009ddc:	2004      	movs	r0, #4
 8009dde:	4301      	orrs	r1, r0
 8009de0:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8009de2:	f001 fef4 	bl	800bbce <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009de6:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <LoRaMacHandleRequestEvents+0xbc>)
 8009de8:	4a05      	ldr	r2, [pc, #20]	; (8009e00 <LoRaMacHandleRequestEvents+0xc0>)
 8009dea:	5c99      	ldrb	r1, [r3, r2]
 8009dec:	2010      	movs	r0, #16
 8009dee:	4381      	bics	r1, r0
 8009df0:	5499      	strb	r1, [r3, r2]
    }
}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	46bd      	mov	sp, r7
 8009df6:	b002      	add	sp, #8
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	2000049c 	.word	0x2000049c
 8009e00:	0000046d 	.word	0x0000046d
 8009e04:	200008c8 	.word	0x200008c8
 8009e08:	200008dc 	.word	0x200008dc

08009e0c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8009e12:	4b2d      	ldr	r3, [pc, #180]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e14:	4a2d      	ldr	r2, [pc, #180]	; (8009ecc <LoRaMacHandleIndicationEvents+0xc0>)
 8009e16:	5c9b      	ldrb	r3, [r3, r2]
 8009e18:	2208      	movs	r2, #8
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00d      	beq.n	8009e3e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8009e22:	4a29      	ldr	r2, [pc, #164]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e24:	23d6      	movs	r3, #214	; 0xd6
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	58d3      	ldr	r3, [r2, r3]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	4a28      	ldr	r2, [pc, #160]	; (8009ed0 <LoRaMacHandleIndicationEvents+0xc4>)
 8009e2e:	0010      	movs	r0, r2
 8009e30:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009e32:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e34:	4a25      	ldr	r2, [pc, #148]	; (8009ecc <LoRaMacHandleIndicationEvents+0xc0>)
 8009e36:	5c99      	ldrb	r1, [r3, r2]
 8009e38:	2008      	movs	r0, #8
 8009e3a:	4381      	bics	r1, r0
 8009e3c:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e3e:	4a22      	ldr	r2, [pc, #136]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e40:	23d5      	movs	r3, #213	; 0xd5
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	58d3      	ldr	r3, [r2, r3]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d114      	bne.n	8009e74 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8009e4a:	1dfb      	adds	r3, r7, #7
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009e50:	1dfb      	adds	r3, r7, #7
 8009e52:	0018      	movs	r0, r3
 8009e54:	f002 f8ee 	bl	800c034 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009e58:	1dfb      	adds	r3, r7, #7
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d009      	beq.n	8009e74 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8009e60:	f000 fb7a 	bl	800a558 <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8009e64:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e66:	23d6      	movs	r3, #214	; 0xd6
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	58d3      	ldr	r3, [r2, r3]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	4a18      	ldr	r2, [pc, #96]	; (8009ed0 <LoRaMacHandleIndicationEvents+0xc4>)
 8009e70:	0010      	movs	r0, r2
 8009e72:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009e74:	4b14      	ldr	r3, [pc, #80]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e76:	4a15      	ldr	r2, [pc, #84]	; (8009ecc <LoRaMacHandleIndicationEvents+0xc0>)
 8009e78:	5c9b      	ldrb	r3, [r3, r2]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01d      	beq.n	8009ec0 <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009e84:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e86:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <LoRaMacHandleIndicationEvents+0xc0>)
 8009e88:	5c99      	ldrb	r1, [r3, r2]
 8009e8a:	2002      	movs	r0, #2
 8009e8c:	4381      	bics	r1, r0
 8009e8e:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009e90:	4a0d      	ldr	r2, [pc, #52]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009e92:	238e      	movs	r3, #142	; 0x8e
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	58d3      	ldr	r3, [r2, r3]
 8009e98:	22c8      	movs	r2, #200	; 0xc8
 8009e9a:	5c9b      	ldrb	r3, [r3, r2]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d107      	bne.n	8009eb0 <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 8009ea0:	4a09      	ldr	r2, [pc, #36]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009ea2:	23d5      	movs	r3, #213	; 0xd5
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	58d3      	ldr	r3, [r2, r3]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 8009eac:	f001 fb8e 	bl	800b5cc <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8009eb0:	4a05      	ldr	r2, [pc, #20]	; (8009ec8 <LoRaMacHandleIndicationEvents+0xbc>)
 8009eb2:	23d6      	movs	r3, #214	; 0xd6
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	58d3      	ldr	r3, [r2, r3]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	4a06      	ldr	r2, [pc, #24]	; (8009ed4 <LoRaMacHandleIndicationEvents+0xc8>)
 8009ebc:	0010      	movs	r0, r2
 8009ebe:	4798      	blx	r3
    }
}
 8009ec0:	46c0      	nop			; (mov r8, r8)
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	2000049c 	.word	0x2000049c
 8009ecc:	0000046d 	.word	0x0000046d
 8009ed0:	200008f0 	.word	0x200008f0
 8009ed4:	200008ac 	.word	0x200008ac

08009ed8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009ede:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009ee0:	4a36      	ldr	r2, [pc, #216]	; (8009fbc <LoRaMacHandleMcpsRequest+0xe4>)
 8009ee2:	5c9b      	ldrb	r3, [r3, r2]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d05f      	beq.n	8009fae <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 8009eee:	1dfb      	adds	r3, r7, #7
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 8009ef4:	1dbb      	adds	r3, r7, #6
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009efa:	4b2f      	ldr	r3, [pc, #188]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009efc:	4a30      	ldr	r2, [pc, #192]	; (8009fc0 <LoRaMacHandleMcpsRequest+0xe8>)
 8009efe:	5c9b      	ldrb	r3, [r3, r2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8009f04:	4b2c      	ldr	r3, [pc, #176]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009f06:	4a2e      	ldr	r2, [pc, #184]	; (8009fc0 <LoRaMacHandleMcpsRequest+0xe8>)
 8009f08:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d105      	bne.n	8009f1a <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009f0e:	1dfc      	adds	r4, r7, #7
 8009f10:	f001 fc7e 	bl	800b810 <CheckRetransUnconfirmedUplink>
 8009f14:	0003      	movs	r3, r0
 8009f16:	7023      	strb	r3, [r4, #0]
 8009f18:	e02a      	b.n	8009f70 <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009f1a:	4b27      	ldr	r3, [pc, #156]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009f1c:	4a28      	ldr	r2, [pc, #160]	; (8009fc0 <LoRaMacHandleMcpsRequest+0xe8>)
 8009f1e:	5c9b      	ldrb	r3, [r3, r2]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d125      	bne.n	8009f70 <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 8009f24:	4a24      	ldr	r2, [pc, #144]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009f26:	238e      	movs	r3, #142	; 0x8e
 8009f28:	00db      	lsls	r3, r3, #3
 8009f2a:	58d2      	ldr	r2, [r2, r3]
 8009f2c:	2386      	movs	r3, #134	; 0x86
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	5cd3      	ldrb	r3, [r2, r3]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d019      	beq.n	8009f6a <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009f36:	1dfc      	adds	r4, r7, #7
 8009f38:	f001 fca0 	bl	800b87c <CheckRetransConfirmedUplink>
 8009f3c:	0003      	movs	r3, r0
 8009f3e:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009f40:	4a1d      	ldr	r2, [pc, #116]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009f42:	238e      	movs	r3, #142	; 0x8e
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	58d3      	ldr	r3, [r2, r3]
 8009f48:	4a1e      	ldr	r2, [pc, #120]	; (8009fc4 <LoRaMacHandleMcpsRequest+0xec>)
 8009f4a:	5c9b      	ldrb	r3, [r3, r2]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10f      	bne.n	8009f70 <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 8009f50:	1dfb      	adds	r3, r7, #7
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2201      	movs	r2, #1
 8009f56:	4053      	eors	r3, r2
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 8009f5e:	f001 fd17 	bl	800b990 <AckTimeoutRetriesProcess>
 8009f62:	e005      	b.n	8009f70 <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8009f64:	f001 fd78 	bl	800ba58 <AckTimeoutRetriesFinalize>
 8009f68:	e002      	b.n	8009f70 <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8009f6a:	1dbb      	adds	r3, r7, #6
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 8009f70:	1dfb      	adds	r3, r7, #7
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 8009f78:	f001 fcae 	bl	800b8d8 <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8009f7c:	e017      	b.n	8009fae <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 8009f7e:	1dbb      	adds	r3, r7, #6
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2201      	movs	r2, #1
 8009f84:	4053      	eors	r3, r2
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d010      	beq.n	8009fae <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009f8e:	4a0b      	ldr	r2, [pc, #44]	; (8009fbc <LoRaMacHandleMcpsRequest+0xe4>)
 8009f90:	5c99      	ldrb	r1, [r3, r2]
 8009f92:	2010      	movs	r0, #16
 8009f94:	4381      	bics	r1, r0
 8009f96:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 8009f98:	4a07      	ldr	r2, [pc, #28]	; (8009fb8 <LoRaMacHandleMcpsRequest+0xe0>)
 8009f9a:	238e      	movs	r3, #142	; 0x8e
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	58d2      	ldr	r2, [r2, r3]
 8009fa0:	2386      	movs	r3, #134	; 0x86
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f000 f90b 	bl	800a1c4 <OnTxDelayedTimerEvent>
}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b003      	add	sp, #12
 8009fb4:	bd90      	pop	{r4, r7, pc}
 8009fb6:	46c0      	nop			; (mov r8, r8)
 8009fb8:	2000049c 	.word	0x2000049c
 8009fbc:	0000046d 	.word	0x0000046d
 8009fc0:	0000042c 	.word	0x0000042c
 8009fc4:	00000222 	.word	0x00000222

08009fc8 <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8009fcc:	4b14      	ldr	r3, [pc, #80]	; (800a020 <LoRaMacHandleJoinRequest+0x58>)
 8009fce:	4a15      	ldr	r2, [pc, #84]	; (800a024 <LoRaMacHandleJoinRequest+0x5c>)
 8009fd0:	5c9b      	ldrb	r3, [r3, r2]
 8009fd2:	2204      	movs	r2, #4
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01e      	beq.n	800a01a <LoRaMacHandleJoinRequest+0x52>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	f002 f96b 	bl	800c2b8 <LoRaMacConfirmQueueIsCmdActive>
 8009fe2:	1e03      	subs	r3, r0, #0
 8009fe4:	d019      	beq.n	800a01a <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	f002 f904 	bl	800c1f4 <LoRaMacConfirmQueueGetStatus>
 8009fec:	1e03      	subs	r3, r0, #0
 8009fee:	d109      	bne.n	800a004 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 8009ff0:	f003 fef4 	bl	800dddc <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 8009ff4:	4a0a      	ldr	r2, [pc, #40]	; (800a020 <LoRaMacHandleJoinRequest+0x58>)
 8009ff6:	238e      	movs	r3, #142	; 0x8e
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	58d2      	ldr	r2, [r2, r3]
 8009ffc:	2388      	movs	r3, #136	; 0x88
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	2100      	movs	r1, #0
 800a002:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a004:	4a06      	ldr	r2, [pc, #24]	; (800a020 <LoRaMacHandleJoinRequest+0x58>)
 800a006:	23d5      	movs	r3, #213	; 0xd5
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	58d3      	ldr	r3, [r2, r3]
 800a00c:	2202      	movs	r2, #2
 800a00e:	4393      	bics	r3, r2
 800a010:	0019      	movs	r1, r3
 800a012:	4a03      	ldr	r2, [pc, #12]	; (800a020 <LoRaMacHandleJoinRequest+0x58>)
 800a014:	23d5      	movs	r3, #213	; 0xd5
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	50d1      	str	r1, [r2, r3]
    }
}
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	2000049c 	.word	0x2000049c
 800a024:	0000046d 	.word	0x0000046d

0800a028 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800a02c:	f002 f93a 	bl	800c2a4 <LoRaMacConfirmQueueGetStatusCmn>
 800a030:	0003      	movs	r3, r0
 800a032:	2b02      	cmp	r3, #2
 800a034:	d004      	beq.n	800a040 <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800a036:	4b14      	ldr	r3, [pc, #80]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a038:	4a14      	ldr	r2, [pc, #80]	; (800a08c <LoRaMacCheckForTxTimeout+0x64>)
 800a03a:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d11e      	bne.n	800a07e <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a040:	4a11      	ldr	r2, [pc, #68]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a042:	23d5      	movs	r3, #213	; 0xd5
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	58d3      	ldr	r3, [r2, r3]
 800a048:	2202      	movs	r2, #2
 800a04a:	4393      	bics	r3, r2
 800a04c:	0019      	movs	r1, r3
 800a04e:	4a0e      	ldr	r2, [pc, #56]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a050:	23d5      	movs	r3, #213	; 0xd5
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800a056:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a058:	238e      	movs	r3, #142	; 0x8e
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	58d3      	ldr	r3, [r2, r3]
 800a05e:	4a0c      	ldr	r2, [pc, #48]	; (800a090 <LoRaMacCheckForTxTimeout+0x68>)
 800a060:	5c99      	ldrb	r1, [r3, r2]
 800a062:	4b09      	ldr	r3, [pc, #36]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a064:	4a0b      	ldr	r2, [pc, #44]	; (800a094 <LoRaMacCheckForTxTimeout+0x6c>)
 800a066:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800a068:	4a07      	ldr	r2, [pc, #28]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a06a:	2386      	movs	r3, #134	; 0x86
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	2100      	movs	r1, #0
 800a070:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <LoRaMacCheckForTxTimeout+0x60>)
 800a074:	4a08      	ldr	r2, [pc, #32]	; (800a098 <LoRaMacCheckForTxTimeout+0x70>)
 800a076:	2100      	movs	r1, #0
 800a078:	5099      	str	r1, [r3, r2]
        return 0x01;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e000      	b.n	800a080 <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	0018      	movs	r0, r3
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	46c0      	nop			; (mov r8, r8)
 800a088:	2000049c 	.word	0x2000049c
 800a08c:	0000042d 	.word	0x0000042d
 800a090:	00000217 	.word	0x00000217
 800a094:	00000431 	.word	0x00000431
 800a098:	00000434 	.word	0x00000434

0800a09c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a0a0:	200b      	movs	r0, #11
 800a0a2:	f002 f909 	bl	800c2b8 <LoRaMacConfirmQueueIsCmdActive>
 800a0a6:	1e03      	subs	r3, r0, #0
 800a0a8:	d01c      	beq.n	800a0e4 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800a0aa:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a0ac:	4a10      	ldr	r2, [pc, #64]	; (800a0f0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800a0ae:	5c9b      	ldrb	r3, [r3, r2]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d114      	bne.n	800a0e4 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a0bc:	4a0c      	ldr	r2, [pc, #48]	; (800a0f0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800a0be:	5c9b      	ldrb	r3, [r3, r2]
 800a0c0:	2204      	movs	r2, #4
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a0ca:	4a08      	ldr	r2, [pc, #32]	; (800a0ec <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a0cc:	23d5      	movs	r3, #213	; 0xd5
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	58d3      	ldr	r3, [r2, r3]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	4393      	bics	r3, r2
 800a0d6:	0019      	movs	r1, r3
 800a0d8:	4a04      	ldr	r2, [pc, #16]	; (800a0ec <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a0da:	23d5      	movs	r3, #213	; 0xd5
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e000      	b.n	800a0e6 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	2000049c 	.word	0x2000049c
 800a0f0:	0000046d 	.word	0x0000046d

0800a0f4 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a0f8:	4a0f      	ldr	r2, [pc, #60]	; (800a138 <LoRaMacCheckForRxAbort+0x44>)
 800a0fa:	23d5      	movs	r3, #213	; 0xd5
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	58d3      	ldr	r3, [r2, r3]
 800a100:	2280      	movs	r2, #128	; 0x80
 800a102:	4013      	ands	r3, r2
 800a104:	d015      	beq.n	800a132 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800a106:	4a0c      	ldr	r2, [pc, #48]	; (800a138 <LoRaMacCheckForRxAbort+0x44>)
 800a108:	23d5      	movs	r3, #213	; 0xd5
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	58d3      	ldr	r3, [r2, r3]
 800a10e:	2280      	movs	r2, #128	; 0x80
 800a110:	4393      	bics	r3, r2
 800a112:	0019      	movs	r1, r3
 800a114:	4a08      	ldr	r2, [pc, #32]	; (800a138 <LoRaMacCheckForRxAbort+0x44>)
 800a116:	23d5      	movs	r3, #213	; 0xd5
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a11c:	4a06      	ldr	r2, [pc, #24]	; (800a138 <LoRaMacCheckForRxAbort+0x44>)
 800a11e:	23d5      	movs	r3, #213	; 0xd5
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	58d3      	ldr	r3, [r2, r3]
 800a124:	2202      	movs	r2, #2
 800a126:	4393      	bics	r3, r2
 800a128:	0019      	movs	r1, r3
 800a12a:	4a03      	ldr	r2, [pc, #12]	; (800a138 <LoRaMacCheckForRxAbort+0x44>)
 800a12c:	23d5      	movs	r3, #213	; 0xd5
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	50d1      	str	r1, [r2, r3]
    }
}
 800a132:	46c0      	nop			; (mov r8, r8)
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	2000049c 	.word	0x2000049c

0800a13c <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800a142:	1dfb      	adds	r3, r7, #7
 800a144:	2200      	movs	r2, #0
 800a146:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800a148:	f7ff fda2 	bl	8009c90 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a14c:	f001 fd7f 	bl	800bc4e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a150:	4b1a      	ldr	r3, [pc, #104]	; (800a1bc <LoRaMacProcess+0x80>)
 800a152:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <LoRaMacProcess+0x84>)
 800a154:	5c9b      	ldrb	r3, [r3, r2]
 800a156:	2210      	movs	r2, #16
 800a158:	4013      	ands	r3, r2
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d027      	beq.n	800a1b0 <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a160:	2000      	movs	r0, #0
 800a162:	f7ff fdd9 	bl	8009d18 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a166:	f7ff ffc5 	bl	800a0f4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800a16a:	f001 fcb5 	bl	800bad8 <IsRequestPending>
 800a16e:	1e03      	subs	r3, r0, #0
 800a170:	d011      	beq.n	800a196 <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800a172:	f7ff ff59 	bl	800a028 <LoRaMacCheckForTxTimeout>
 800a176:	0003      	movs	r3, r0
 800a178:	0019      	movs	r1, r3
 800a17a:	1dfb      	adds	r3, r7, #7
 800a17c:	1dfa      	adds	r2, r7, #7
 800a17e:	7812      	ldrb	r2, [r2, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a184:	f7ff ff8a 	bl	800a09c <LoRaMacCheckForBeaconAcquisition>
 800a188:	0003      	movs	r3, r0
 800a18a:	0019      	movs	r1, r3
 800a18c:	1dfb      	adds	r3, r7, #7
 800a18e:	1dfa      	adds	r2, r7, #7
 800a190:	7812      	ldrb	r2, [r2, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800a196:	1dfb      	adds	r3, r7, #7
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800a19e:	f7ff ff13 	bl	8009fc8 <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800a1a2:	f7ff fe99 	bl	8009ed8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800a1a6:	f7ff fdcb 	bl	8009d40 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f7ff fdb4 	bl	8009d18 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800a1b0:	f7ff fe2c 	bl	8009e0c <LoRaMacHandleIndicationEvents>
}
 800a1b4:	46c0      	nop			; (mov r8, r8)
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	b002      	add	sp, #8
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	2000049c 	.word	0x2000049c
 800a1c0:	0000046d 	.word	0x0000046d

0800a1c4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800a1cc:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <OnTxDelayedTimerEvent+0x78>)
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f006 fd9c 	bl	8010d0c <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a1d4:	4a1a      	ldr	r2, [pc, #104]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a1d6:	23d5      	movs	r3, #213	; 0xd5
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	58d3      	ldr	r3, [r2, r3]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	4393      	bics	r3, r2
 800a1e0:	0019      	movs	r1, r3
 800a1e2:	4a17      	ldr	r2, [pc, #92]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a1e4:	23d5      	movs	r3, #213	; 0xd5
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	f000 ff7a 	bl	800b0e4 <ScheduleTx>
 800a1f0:	1e03      	subs	r3, r0, #0
 800a1f2:	d01e      	beq.n	800a232 <OnTxDelayedTimerEvent+0x6e>
 800a1f4:	2b0b      	cmp	r3, #11
 800a1f6:	d01c      	beq.n	800a232 <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a1f8:	4a11      	ldr	r2, [pc, #68]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a1fa:	238e      	movs	r3, #142	; 0x8e
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	58d3      	ldr	r3, [r2, r3]
 800a200:	22d5      	movs	r2, #213	; 0xd5
 800a202:	569b      	ldrsb	r3, [r3, r2]
 800a204:	b2d9      	uxtb	r1, r3
 800a206:	4b0e      	ldr	r3, [pc, #56]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a208:	4a0e      	ldr	r2, [pc, #56]	; (800a244 <OnTxDelayedTimerEvent+0x80>)
 800a20a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800a20c:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a20e:	238e      	movs	r3, #142	; 0x8e
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	58d3      	ldr	r3, [r2, r3]
 800a214:	4a0c      	ldr	r2, [pc, #48]	; (800a248 <OnTxDelayedTimerEvent+0x84>)
 800a216:	5c99      	ldrb	r1, [r3, r2]
 800a218:	4b09      	ldr	r3, [pc, #36]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a21a:	4a0c      	ldr	r2, [pc, #48]	; (800a24c <OnTxDelayedTimerEvent+0x88>)
 800a21c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a21e:	4b08      	ldr	r3, [pc, #32]	; (800a240 <OnTxDelayedTimerEvent+0x7c>)
 800a220:	4a0b      	ldr	r2, [pc, #44]	; (800a250 <OnTxDelayedTimerEvent+0x8c>)
 800a222:	2109      	movs	r1, #9
 800a224:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a226:	2009      	movs	r0, #9
 800a228:	f002 f80a 	bl	800c240 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a22c:	f001 fb54 	bl	800b8d8 <StopRetransmission>
            break;
 800a230:	e000      	b.n	800a234 <OnTxDelayedTimerEvent+0x70>
            break;
 800a232:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800a234:	46c0      	nop			; (mov r8, r8)
 800a236:	46bd      	mov	sp, r7
 800a238:	b002      	add	sp, #8
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000818 	.word	0x20000818
 800a240:	2000049c 	.word	0x2000049c
 800a244:	0000042e 	.word	0x0000042e
 800a248:	00000217 	.word	0x00000217
 800a24c:	00000431 	.word	0x00000431
 800a250:	0000042d 	.word	0x0000042d

0800a254 <OnRxWindow2TimerEvent>:
    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
}

static void OnRxWindow2TimerEvent( void* context )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a25c:	4b31      	ldr	r3, [pc, #196]	; (800a324 <OnRxWindow2TimerEvent+0xd0>)
 800a25e:	0018      	movs	r0, r3
 800a260:	f006 fd54 	bl	8010d0c <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800a264:	4a30      	ldr	r2, [pc, #192]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a266:	238e      	movs	r3, #142	; 0x8e
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	58d2      	ldr	r2, [r2, r3]
 800a26c:	2314      	movs	r3, #20
 800a26e:	33ff      	adds	r3, #255	; 0xff
 800a270:	5cd1      	ldrb	r1, [r2, r3]
 800a272:	4a2d      	ldr	r2, [pc, #180]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a274:	23f8      	movs	r3, #248	; 0xf8
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800a27a:	4a2b      	ldr	r2, [pc, #172]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a27c:	238e      	movs	r3, #142	; 0x8e
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	58d3      	ldr	r3, [r2, r3]
 800a282:	22f8      	movs	r2, #248	; 0xf8
 800a284:	5899      	ldr	r1, [r3, r2]
 800a286:	4a28      	ldr	r2, [pc, #160]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a288:	23f9      	movs	r3, #249	; 0xf9
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a28e:	4a26      	ldr	r2, [pc, #152]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a290:	238e      	movs	r3, #142	; 0x8e
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	58d2      	ldr	r2, [r2, r3]
 800a296:	2302      	movs	r3, #2
 800a298:	33ff      	adds	r3, #255	; 0xff
 800a29a:	5cd1      	ldrb	r1, [r2, r3]
 800a29c:	4a22      	ldr	r2, [pc, #136]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a29e:	23fc      	movs	r3, #252	; 0xfc
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a2a4:	4a20      	ldr	r2, [pc, #128]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2a6:	238e      	movs	r3, #142	; 0x8e
 800a2a8:	00db      	lsls	r3, r3, #3
 800a2aa:	58d2      	ldr	r2, [r2, r3]
 800a2ac:	2316      	movs	r3, #22
 800a2ae:	33ff      	adds	r3, #255	; 0xff
 800a2b0:	5cd1      	ldrb	r1, [r2, r3]
 800a2b2:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2b4:	4a1d      	ldr	r2, [pc, #116]	; (800a32c <OnRxWindow2TimerEvent+0xd8>)
 800a2b6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a2b8:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2ba:	4a1d      	ldr	r2, [pc, #116]	; (800a330 <OnRxWindow2TimerEvent+0xdc>)
 800a2bc:	2101      	movs	r1, #1
 800a2be:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a2c0:	4a19      	ldr	r2, [pc, #100]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2c2:	238e      	movs	r3, #142	; 0x8e
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	58d3      	ldr	r3, [r2, r3]
 800a2c8:	22c8      	movs	r2, #200	; 0xc8
 800a2ca:	5c9b      	ldrb	r3, [r3, r2]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d004      	beq.n	800a2da <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800a2d0:	4b15      	ldr	r3, [pc, #84]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <OnRxWindow2TimerEvent+0xe0>)
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	5499      	strb	r1, [r3, r2]
 800a2d8:	e003      	b.n	800a2e2 <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800a2da:	4b13      	ldr	r3, [pc, #76]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2dc:	4a15      	ldr	r2, [pc, #84]	; (800a334 <OnRxWindow2TimerEvent+0xe0>)
 800a2de:	2101      	movs	r1, #1
 800a2e0:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800a2e2:	4a11      	ldr	r2, [pc, #68]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2e4:	238e      	movs	r3, #142	; 0x8e
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	58d3      	ldr	r3, [r2, r3]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	4a12      	ldr	r2, [pc, #72]	; (800a338 <OnRxWindow2TimerEvent+0xe4>)
 800a2ee:	4913      	ldr	r1, [pc, #76]	; (800a33c <OnRxWindow2TimerEvent+0xe8>)
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f004 f9e7 	bl	800e6c4 <RegionRxConfig>
 800a2f6:	1e03      	subs	r3, r0, #0
 800a2f8:	d00f      	beq.n	800a31a <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a2fc:	4a0d      	ldr	r2, [pc, #52]	; (800a334 <OnRxWindow2TimerEvent+0xe0>)
 800a2fe:	5c98      	ldrb	r0, [r3, r2]
 800a300:	4a09      	ldr	r2, [pc, #36]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a302:	238e      	movs	r3, #142	; 0x8e
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	58d3      	ldr	r3, [r2, r3]
 800a308:	22e0      	movs	r2, #224	; 0xe0
 800a30a:	589b      	ldr	r3, [r3, r2]
 800a30c:	0019      	movs	r1, r3
 800a30e:	f000 f889 	bl	800a424 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800a312:	4b05      	ldr	r3, [pc, #20]	; (800a328 <OnRxWindow2TimerEvent+0xd4>)
 800a314:	4a0a      	ldr	r2, [pc, #40]	; (800a340 <OnRxWindow2TimerEvent+0xec>)
 800a316:	2101      	movs	r1, #1
 800a318:	5499      	strb	r1, [r3, r2]
    }
}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	46bd      	mov	sp, r7
 800a31e:	b002      	add	sp, #8
 800a320:	bd80      	pop	{r7, pc}
 800a322:	46c0      	nop			; (mov r8, r8)
 800a324:	20000848 	.word	0x20000848
 800a328:	2000049c 	.word	0x2000049c
 800a32c:	000003f1 	.word	0x000003f1
 800a330:	000003f3 	.word	0x000003f3
 800a334:	000003f2 	.word	0x000003f2
 800a338:	200008b0 	.word	0x200008b0
 800a33c:	2000087c 	.word	0x2000087c
 800a340:	0000046c 	.word	0x0000046c

0800a344 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800a344:	b590      	push	{r4, r7, lr}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	0004      	movs	r4, r0
 800a34c:	0008      	movs	r0, r1
 800a34e:	0011      	movs	r1, r2
 800a350:	1dfb      	adds	r3, r7, #7
 800a352:	1c22      	adds	r2, r4, #0
 800a354:	701a      	strb	r2, [r3, #0]
 800a356:	1dbb      	adds	r3, r7, #6
 800a358:	1c02      	adds	r2, r0, #0
 800a35a:	701a      	strb	r2, [r3, #0]
 800a35c:	1d7b      	adds	r3, r7, #5
 800a35e:	1c0a      	adds	r2, r1, #0
 800a360:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800a362:	1dfb      	adds	r3, r7, #7
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2201      	movs	r2, #1
 800a368:	4053      	eors	r3, r2
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800a370:	1dbb      	adds	r3, r7, #6
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d10a      	bne.n	800a38e <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800a378:	2000      	movs	r0, #0
 800a37a:	f000 f80d 	bl	800a398 <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800a37e:	e006      	b.n	800a38e <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800a380:	1d7b      	adds	r3, r7, #5
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800a388:	2000      	movs	r0, #0
 800a38a:	f000 f805 	bl	800a398 <OnAckTimeoutTimerEvent>
}
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	46bd      	mov	sp, r7
 800a392:	b003      	add	sp, #12
 800a394:	bd90      	pop	{r4, r7, pc}
	...

0800a398 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a3a0:	4b1c      	ldr	r3, [pc, #112]	; (800a414 <OnAckTimeoutTimerEvent+0x7c>)
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f006 fcb2 	bl	8010d0c <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a3aa:	238e      	movs	r3, #142	; 0x8e
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	58d3      	ldr	r3, [r2, r3]
 800a3b0:	4a1a      	ldr	r2, [pc, #104]	; (800a41c <OnAckTimeoutTimerEvent+0x84>)
 800a3b2:	5c9b      	ldrb	r3, [r3, r2]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800a3b8:	4a17      	ldr	r2, [pc, #92]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a3ba:	238e      	movs	r3, #142	; 0x8e
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	58d2      	ldr	r2, [r2, r3]
 800a3c0:	2386      	movs	r3, #134	; 0x86
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a3c8:	4a13      	ldr	r2, [pc, #76]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a3ca:	238e      	movs	r3, #142	; 0x8e
 800a3cc:	00db      	lsls	r3, r3, #3
 800a3ce:	58d3      	ldr	r3, [r2, r3]
 800a3d0:	22c8      	movs	r2, #200	; 0xc8
 800a3d2:	5c9b      	ldrb	r3, [r3, r2]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d105      	bne.n	800a3e4 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a3da:	4a11      	ldr	r2, [pc, #68]	; (800a420 <OnAckTimeoutTimerEvent+0x88>)
 800a3dc:	5c99      	ldrb	r1, [r3, r2]
 800a3de:	2010      	movs	r0, #16
 800a3e0:	4301      	orrs	r1, r0
 800a3e2:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a3e4:	4a0c      	ldr	r2, [pc, #48]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a3e6:	23d7      	movs	r3, #215	; 0xd7
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	58d3      	ldr	r3, [r2, r3]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00c      	beq.n	800a40a <OnAckTimeoutTimerEvent+0x72>
 800a3f0:	4a09      	ldr	r2, [pc, #36]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a3f2:	23d7      	movs	r3, #215	; 0xd7
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	58d3      	ldr	r3, [r2, r3]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a3fe:	4a06      	ldr	r2, [pc, #24]	; (800a418 <OnAckTimeoutTimerEvent+0x80>)
 800a400:	23d7      	movs	r3, #215	; 0xd7
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	58d3      	ldr	r3, [r2, r3]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	4798      	blx	r3
    }
}
 800a40a:	46c0      	nop			; (mov r8, r8)
 800a40c:	46bd      	mov	sp, r7
 800a40e:	b002      	add	sp, #8
 800a410:	bd80      	pop	{r7, pc}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	20000890 	.word	0x20000890
 800a418:	2000049c 	.word	0x2000049c
 800a41c:	00000219 	.word	0x00000219
 800a420:	0000046d 	.word	0x0000046d

0800a424 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	0002      	movs	r2, r0
 800a42c:	6039      	str	r1, [r7, #0]
 800a42e:	1dfb      	adds	r3, r7, #7
 800a430:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800a432:	1dfb      	adds	r3, r7, #7
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2201      	movs	r2, #1
 800a438:	4053      	eors	r3, r2
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <RxWindowSetup+0x38>)
 800a442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	0010      	movs	r0, r2
 800a448:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800a44a:	e003      	b.n	800a454 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800a44c:	4b03      	ldr	r3, [pc, #12]	; (800a45c <RxWindowSetup+0x38>)
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	2000      	movs	r0, #0
 800a452:	4798      	blx	r3
}
 800a454:	46c0      	nop			; (mov r8, r8)
 800a456:	46bd      	mov	sp, r7
 800a458:	b002      	add	sp, #8
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	0801bc94 	.word	0x0801bc94

0800a460 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	0002      	movs	r2, r0
 800a468:	1dfb      	adds	r3, r7, #7
 800a46a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a46c:	4a1a      	ldr	r2, [pc, #104]	; (800a4d8 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a46e:	238e      	movs	r3, #142	; 0x8e
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	58d2      	ldr	r2, [r2, r3]
 800a474:	2380      	movs	r3, #128	; 0x80
 800a476:	005b      	lsls	r3, r3, #1
 800a478:	5cd2      	ldrb	r2, [r2, r3]
 800a47a:	210c      	movs	r1, #12
 800a47c:	187b      	adds	r3, r7, r1
 800a47e:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800a480:	187b      	adds	r3, r7, r1
 800a482:	1dfa      	adds	r2, r7, #7
 800a484:	7812      	ldrb	r2, [r2, #0]
 800a486:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a488:	187b      	adds	r3, r7, r1
 800a48a:	220c      	movs	r2, #12
 800a48c:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a48e:	4a12      	ldr	r2, [pc, #72]	; (800a4d8 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a490:	238e      	movs	r3, #142	; 0x8e
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	58d2      	ldr	r2, [r2, r3]
 800a496:	2316      	movs	r3, #22
 800a498:	33ff      	adds	r3, #255	; 0xff
 800a49a:	5cd3      	ldrb	r3, [r2, r3]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d003      	beq.n	800a4a8 <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	18fb      	adds	r3, r7, r3
 800a4a4:	220d      	movs	r2, #13
 800a4a6:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4a8:	4a0b      	ldr	r2, [pc, #44]	; (800a4d8 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a4aa:	238e      	movs	r3, #142	; 0x8e
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	58d3      	ldr	r3, [r2, r3]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	220c      	movs	r2, #12
 800a4b4:	18ba      	adds	r2, r7, r2
 800a4b6:	0011      	movs	r1, r2
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f004 f879 	bl	800e5b0 <RegionGetPhyParam>
 800a4be:	0003      	movs	r3, r0
 800a4c0:	001a      	movs	r2, r3
 800a4c2:	2108      	movs	r1, #8
 800a4c4:	187b      	adds	r3, r7, r1
 800a4c6:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800a4c8:	187b      	adds	r3, r7, r1
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	b2db      	uxtb	r3, r3
}
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	b004      	add	sp, #16
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	2000049c 	.word	0x2000049c

0800a4dc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800a4dc:	b5b0      	push	{r4, r5, r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	0004      	movs	r4, r0
 800a4e4:	0008      	movs	r0, r1
 800a4e6:	0011      	movs	r1, r2
 800a4e8:	1dfb      	adds	r3, r7, #7
 800a4ea:	1c22      	adds	r2, r4, #0
 800a4ec:	701a      	strb	r2, [r3, #0]
 800a4ee:	1dbb      	adds	r3, r7, #6
 800a4f0:	1c02      	adds	r2, r0, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	1d7b      	adds	r3, r7, #5
 800a4f6:	1c0a      	adds	r2, r1, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800a4fa:	200e      	movs	r0, #14
 800a4fc:	0004      	movs	r4, r0
 800a4fe:	183b      	adds	r3, r7, r0
 800a500:	2200      	movs	r2, #0
 800a502:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800a504:	250c      	movs	r5, #12
 800a506:	197b      	adds	r3, r7, r5
 800a508:	2200      	movs	r2, #0
 800a50a:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a50c:	1dbb      	adds	r3, r7, #6
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	b25b      	sxtb	r3, r3
 800a512:	0018      	movs	r0, r3
 800a514:	f7ff ffa4 	bl	800a460 <GetMaxAppPayloadWithoutFOptsLength>
 800a518:	0003      	movs	r3, r0
 800a51a:	001a      	movs	r2, r3
 800a51c:	0020      	movs	r0, r4
 800a51e:	183b      	adds	r3, r7, r0
 800a520:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800a522:	1dfb      	adds	r3, r7, #7
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	b299      	uxth	r1, r3
 800a528:	1d7b      	adds	r3, r7, #5
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	197b      	adds	r3, r7, r5
 800a530:	188a      	adds	r2, r1, r2
 800a532:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800a534:	197a      	adds	r2, r7, r5
 800a536:	183b      	adds	r3, r7, r0
 800a538:	8812      	ldrh	r2, [r2, #0]
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d806      	bhi.n	800a54e <ValidatePayloadLength+0x72>
 800a540:	230c      	movs	r3, #12
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	2bff      	cmp	r3, #255	; 0xff
 800a548:	d801      	bhi.n	800a54e <ValidatePayloadLength+0x72>
    {
        return true;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <ValidatePayloadLength+0x74>
    }
    return false;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	0018      	movs	r0, r3
 800a552:	46bd      	mov	sp, r7
 800a554:	b004      	add	sp, #16
 800a556:	bdb0      	pop	{r4, r5, r7, pc}

0800a558 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a55c:	4b06      	ldr	r3, [pc, #24]	; (800a578 <SetMlmeScheduleUplinkIndication+0x20>)
 800a55e:	4a07      	ldr	r2, [pc, #28]	; (800a57c <SetMlmeScheduleUplinkIndication+0x24>)
 800a560:	2106      	movs	r1, #6
 800a562:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a564:	4b04      	ldr	r3, [pc, #16]	; (800a578 <SetMlmeScheduleUplinkIndication+0x20>)
 800a566:	4a06      	ldr	r2, [pc, #24]	; (800a580 <SetMlmeScheduleUplinkIndication+0x28>)
 800a568:	5c99      	ldrb	r1, [r3, r2]
 800a56a:	2008      	movs	r0, #8
 800a56c:	4301      	orrs	r1, r0
 800a56e:	5499      	strb	r1, [r3, r2]
}
 800a570:	46c0      	nop			; (mov r8, r8)
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	2000049c 	.word	0x2000049c
 800a57c:	00000454 	.word	0x00000454
 800a580:	0000046d 	.word	0x0000046d

0800a584 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800a584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a586:	b0a5      	sub	sp, #148	; 0x94
 800a588:	af02      	add	r7, sp, #8
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	000c      	movs	r4, r1
 800a58e:	0010      	movs	r0, r2
 800a590:	0019      	movs	r1, r3
 800a592:	1cfb      	adds	r3, r7, #3
 800a594:	1c22      	adds	r2, r4, #0
 800a596:	701a      	strb	r2, [r3, #0]
 800a598:	1cbb      	adds	r3, r7, #2
 800a59a:	1c02      	adds	r2, r0, #0
 800a59c:	701a      	strb	r2, [r3, #0]
 800a59e:	1c7b      	adds	r3, r7, #1
 800a5a0:	1c0a      	adds	r2, r1, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800a5a4:	236b      	movs	r3, #107	; 0x6b
 800a5a6:	18fb      	adds	r3, r7, r3
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800a5ac:	2387      	movs	r3, #135	; 0x87
 800a5ae:	18fb      	adds	r3, r7, r3
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a5b4:	2168      	movs	r1, #104	; 0x68
 800a5b6:	187b      	adds	r3, r7, r1
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	187b      	adds	r3, r7, r1
 800a5be:	2200      	movs	r2, #0
 800a5c0:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800a5c2:	f000 fd7a 	bl	800b0ba <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800a5c6:	1cfb      	adds	r3, r7, #3
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	1cfa      	adds	r2, r7, #3
 800a5cc:	1c59      	adds	r1, r3, #1
 800a5ce:	7011      	strb	r1, [r2, #0]
 800a5d0:	001a      	movs	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	189b      	adds	r3, r3, r2
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b13      	cmp	r3, #19
 800a5da:	d901      	bls.n	800a5e0 <ProcessMacCommands+0x5c>
 800a5dc:	f000 fd76 	bl	800b0cc <ProcessMacCommands+0xb48>
 800a5e0:	009a      	lsls	r2, r3, #2
 800a5e2:	4be3      	ldr	r3, [pc, #908]	; (800a970 <ProcessMacCommands+0x3ec>)
 800a5e4:	18d3      	adds	r3, r2, r3
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800a5ea:	2003      	movs	r0, #3
 800a5ec:	f001 fe64 	bl	800c2b8 <LoRaMacConfirmQueueIsCmdActive>
 800a5f0:	1e03      	subs	r3, r0, #0
 800a5f2:	d01c      	beq.n	800a62e <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a5f4:	2103      	movs	r1, #3
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f001 fdd0 	bl	800c19c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a5fc:	1cfb      	adds	r3, r7, #3
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	1cfa      	adds	r2, r7, #3
 800a602:	1c59      	adds	r1, r3, #1
 800a604:	7011      	strb	r1, [r2, #0]
 800a606:	001a      	movs	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	189b      	adds	r3, r3, r2
 800a60c:	7819      	ldrb	r1, [r3, #0]
 800a60e:	4ad9      	ldr	r2, [pc, #868]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a610:	2389      	movs	r3, #137	; 0x89
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a616:	1cfb      	adds	r3, r7, #3
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	1cfa      	adds	r2, r7, #3
 800a61c:	1c59      	adds	r1, r3, #1
 800a61e:	7011      	strb	r1, [r2, #0]
 800a620:	001a      	movs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	189b      	adds	r3, r3, r2
 800a626:	7819      	ldrb	r1, [r3, #0]
 800a628:	4bd2      	ldr	r3, [pc, #840]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a62a:	4ad3      	ldr	r2, [pc, #844]	; (800a978 <ProcessMacCommands+0x3f4>)
 800a62c:	5499      	strb	r1, [r3, r2]
 800a62e:	2287      	movs	r2, #135	; 0x87
 800a630:	18bb      	adds	r3, r7, r2
 800a632:	18ba      	adds	r2, r7, r2
 800a634:	7812      	ldrb	r2, [r2, #0]
 800a636:	701a      	strb	r2, [r3, #0]
                }
                break;
 800a638:	f000 fd3f 	bl	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800a63c:	2357      	movs	r3, #87	; 0x57
 800a63e:	18fb      	adds	r3, r7, r3
 800a640:	2200      	movs	r2, #0
 800a642:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800a644:	2356      	movs	r3, #86	; 0x56
 800a646:	18fb      	adds	r3, r7, r3
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800a64c:	2355      	movs	r3, #85	; 0x55
 800a64e:	18fb      	adds	r3, r7, r3
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800a654:	2354      	movs	r3, #84	; 0x54
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800a65c:	2387      	movs	r3, #135	; 0x87
 800a65e:	18fb      	adds	r3, r7, r3
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2201      	movs	r2, #1
 800a664:	4053      	eors	r3, r2
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d100      	bne.n	800a66e <ProcessMacCommands+0xea>
 800a66c:	e0ae      	b.n	800a7cc <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800a66e:	2387      	movs	r3, #135	; 0x87
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	2201      	movs	r2, #1
 800a674:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a676:	1cfb      	adds	r3, r7, #3
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	18d2      	adds	r2, r2, r3
 800a680:	2158      	movs	r1, #88	; 0x58
 800a682:	187b      	adds	r3, r7, r1
 800a684:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a686:	1cba      	adds	r2, r7, #2
 800a688:	1cfb      	adds	r3, r7, #3
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	b2db      	uxtb	r3, r3
 800a692:	3301      	adds	r3, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	187b      	adds	r3, r7, r1
 800a698:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a69a:	4ab6      	ldr	r2, [pc, #728]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a69c:	238e      	movs	r3, #142	; 0x8e
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	58d3      	ldr	r3, [r2, r3]
 800a6a2:	22ca      	movs	r2, #202	; 0xca
 800a6a4:	5c9a      	ldrb	r2, [r3, r2]
 800a6a6:	187b      	adds	r3, r7, r1
 800a6a8:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a6aa:	4ab2      	ldr	r2, [pc, #712]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a6ac:	238e      	movs	r3, #142	; 0x8e
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	58d2      	ldr	r2, [r2, r3]
 800a6b2:	2380      	movs	r3, #128	; 0x80
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	5cd2      	ldrb	r2, [r2, r3]
 800a6b8:	187b      	adds	r3, r7, r1
 800a6ba:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a6bc:	4aad      	ldr	r2, [pc, #692]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a6be:	238e      	movs	r3, #142	; 0x8e
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	58d3      	ldr	r3, [r2, r3]
 800a6c4:	22d5      	movs	r2, #213	; 0xd5
 800a6c6:	569a      	ldrsb	r2, [r3, r2]
 800a6c8:	187b      	adds	r3, r7, r1
 800a6ca:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a6cc:	4aa9      	ldr	r2, [pc, #676]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a6ce:	238e      	movs	r3, #142	; 0x8e
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	58d3      	ldr	r3, [r2, r3]
 800a6d4:	22d4      	movs	r2, #212	; 0xd4
 800a6d6:	569a      	ldrsb	r2, [r3, r2]
 800a6d8:	187b      	adds	r3, r7, r1
 800a6da:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a6dc:	4aa5      	ldr	r2, [pc, #660]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a6de:	238e      	movs	r3, #142	; 0x8e
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	58d3      	ldr	r3, [r2, r3]
 800a6e4:	22f4      	movs	r2, #244	; 0xf4
 800a6e6:	5c9a      	ldrb	r2, [r3, r2]
 800a6e8:	000d      	movs	r5, r1
 800a6ea:	197b      	adds	r3, r7, r5
 800a6ec:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a6ee:	4aa1      	ldr	r2, [pc, #644]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a6f0:	238e      	movs	r3, #142	; 0x8e
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	58d1      	ldr	r1, [r2, r3]
 800a6f6:	197b      	adds	r3, r7, r5
 800a6f8:	2288      	movs	r2, #136	; 0x88
 800a6fa:	0092      	lsls	r2, r2, #2
 800a6fc:	588a      	ldr	r2, [r1, r2]
 800a6fe:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a700:	4a9c      	ldr	r2, [pc, #624]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a702:	238e      	movs	r3, #142	; 0x8e
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	58d3      	ldr	r3, [r2, r3]
 800a708:	7818      	ldrb	r0, [r3, #0]
 800a70a:	2356      	movs	r3, #86	; 0x56
 800a70c:	18fc      	adds	r4, r7, r3
 800a70e:	2357      	movs	r3, #87	; 0x57
 800a710:	18fa      	adds	r2, r7, r3
 800a712:	1979      	adds	r1, r7, r5
 800a714:	2354      	movs	r3, #84	; 0x54
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	2355      	movs	r3, #85	; 0x55
 800a71c:	18fb      	adds	r3, r7, r3
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	0023      	movs	r3, r4
 800a722:	f004 f804 	bl	800e72e <RegionLinkAdrReq>
 800a726:	0003      	movs	r3, r0
 800a728:	001a      	movs	r2, r3
 800a72a:	216b      	movs	r1, #107	; 0x6b
 800a72c:	187b      	adds	r3, r7, r1
 800a72e:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800a730:	187b      	adds	r3, r7, r1
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	001a      	movs	r2, r3
 800a736:	2307      	movs	r3, #7
 800a738:	4013      	ands	r3, r2
 800a73a:	2b07      	cmp	r3, #7
 800a73c:	d11c      	bne.n	800a778 <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800a73e:	4a8d      	ldr	r2, [pc, #564]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a740:	238e      	movs	r3, #142	; 0x8e
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	58d3      	ldr	r3, [r2, r3]
 800a746:	2257      	movs	r2, #87	; 0x57
 800a748:	18ba      	adds	r2, r7, r2
 800a74a:	2100      	movs	r1, #0
 800a74c:	5651      	ldrsb	r1, [r2, r1]
 800a74e:	22d5      	movs	r2, #213	; 0xd5
 800a750:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800a752:	4a88      	ldr	r2, [pc, #544]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a754:	238e      	movs	r3, #142	; 0x8e
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	58d3      	ldr	r3, [r2, r3]
 800a75a:	2256      	movs	r2, #86	; 0x56
 800a75c:	18ba      	adds	r2, r7, r2
 800a75e:	2100      	movs	r1, #0
 800a760:	5651      	ldrsb	r1, [r2, r1]
 800a762:	22d4      	movs	r2, #212	; 0xd4
 800a764:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a766:	4a83      	ldr	r2, [pc, #524]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a768:	238e      	movs	r3, #142	; 0x8e
 800a76a:	00db      	lsls	r3, r3, #3
 800a76c:	58d3      	ldr	r3, [r2, r3]
 800a76e:	2255      	movs	r2, #85	; 0x55
 800a770:	18ba      	adds	r2, r7, r2
 800a772:	7811      	ldrb	r1, [r2, #0]
 800a774:	22f4      	movs	r2, #244	; 0xf4
 800a776:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a778:	2386      	movs	r3, #134	; 0x86
 800a77a:	18fb      	adds	r3, r7, r3
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
 800a780:	e00c      	b.n	800a79c <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a782:	236b      	movs	r3, #107	; 0x6b
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	2201      	movs	r2, #1
 800a788:	0019      	movs	r1, r3
 800a78a:	2003      	movs	r0, #3
 800a78c:	f001 fb76 	bl	800be7c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a790:	2186      	movs	r1, #134	; 0x86
 800a792:	187b      	adds	r3, r7, r1
 800a794:	781a      	ldrb	r2, [r3, #0]
 800a796:	187b      	adds	r3, r7, r1
 800a798:	3201      	adds	r2, #1
 800a79a:	701a      	strb	r2, [r3, #0]
 800a79c:	2354      	movs	r3, #84	; 0x54
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2105      	movs	r1, #5
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f7f5 fcb7 	bl	8000118 <__udivsi3>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2286      	movs	r2, #134	; 0x86
 800a7b0:	18ba      	adds	r2, r7, r2
 800a7b2:	7812      	ldrb	r2, [r2, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d3e4      	bcc.n	800a782 <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800a7b8:	2354      	movs	r3, #84	; 0x54
 800a7ba:	18fb      	adds	r3, r7, r3
 800a7bc:	781a      	ldrb	r2, [r3, #0]
 800a7be:	1cfb      	adds	r3, r7, #3
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	18d3      	adds	r3, r2, r3
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	1cfb      	adds	r3, r7, #3
 800a7c8:	3a01      	subs	r2, #1
 800a7ca:	701a      	strb	r2, [r3, #0]
                }
                break;
 800a7cc:	46c0      	nop			; (mov r8, r8)
 800a7ce:	f000 fc74 	bl	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800a7d2:	1cfb      	adds	r3, r7, #3
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	1cfa      	adds	r2, r7, #3
 800a7d8:	1c59      	adds	r1, r3, #1
 800a7da:	7011      	strb	r1, [r2, #0]
 800a7dc:	001a      	movs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	189b      	adds	r3, r3, r2
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	4963      	ldr	r1, [pc, #396]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a7e6:	228e      	movs	r2, #142	; 0x8e
 800a7e8:	00d2      	lsls	r2, r2, #3
 800a7ea:	588a      	ldr	r2, [r1, r2]
 800a7ec:	210f      	movs	r1, #15
 800a7ee:	400b      	ands	r3, r1
 800a7f0:	b2d9      	uxtb	r1, r3
 800a7f2:	2312      	movs	r3, #18
 800a7f4:	33ff      	adds	r3, #255	; 0xff
 800a7f6:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800a7f8:	4a5e      	ldr	r2, [pc, #376]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a7fa:	238e      	movs	r3, #142	; 0x8e
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	58d2      	ldr	r2, [r2, r3]
 800a800:	2312      	movs	r3, #18
 800a802:	33ff      	adds	r3, #255	; 0xff
 800a804:	5cd3      	ldrb	r3, [r2, r3]
 800a806:	001a      	movs	r2, r3
 800a808:	2301      	movs	r3, #1
 800a80a:	4093      	lsls	r3, r2
 800a80c:	0019      	movs	r1, r3
 800a80e:	4a59      	ldr	r2, [pc, #356]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a810:	238e      	movs	r3, #142	; 0x8e
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	58d2      	ldr	r2, [r2, r3]
 800a816:	b289      	uxth	r1, r1
 800a818:	2387      	movs	r3, #135	; 0x87
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a81e:	2368      	movs	r3, #104	; 0x68
 800a820:	18fb      	adds	r3, r7, r3
 800a822:	2200      	movs	r2, #0
 800a824:	0019      	movs	r1, r3
 800a826:	2004      	movs	r0, #4
 800a828:	f001 fb28 	bl	800be7c <LoRaMacCommandsAddCmd>
 800a82c:	2287      	movs	r2, #135	; 0x87
 800a82e:	18bb      	adds	r3, r7, r2
 800a830:	18ba      	adds	r2, r7, r2
 800a832:	7812      	ldrb	r2, [r2, #0]
 800a834:	701a      	strb	r2, [r3, #0]
                break;
 800a836:	f000 fc40 	bl	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800a83a:	246b      	movs	r4, #107	; 0x6b
 800a83c:	193b      	adds	r3, r7, r4
 800a83e:	2207      	movs	r2, #7
 800a840:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800a842:	1cfb      	adds	r3, r7, #3
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	18d3      	adds	r3, r2, r3
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	091b      	lsrs	r3, r3, #4
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	b25b      	sxtb	r3, r3
 800a852:	2207      	movs	r2, #7
 800a854:	4013      	ands	r3, r2
 800a856:	b25a      	sxtb	r2, r3
 800a858:	204c      	movs	r0, #76	; 0x4c
 800a85a:	183b      	adds	r3, r7, r0
 800a85c:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800a85e:	1cfb      	adds	r3, r7, #3
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	18d3      	adds	r3, r2, r3
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	220f      	movs	r2, #15
 800a86c:	4013      	ands	r3, r2
 800a86e:	b25a      	sxtb	r2, r3
 800a870:	183b      	adds	r3, r7, r0
 800a872:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800a874:	1cfb      	adds	r3, r7, #3
 800a876:	781a      	ldrb	r2, [r3, #0]
 800a878:	1cfb      	adds	r3, r7, #3
 800a87a:	3201      	adds	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a87e:	1cfb      	adds	r3, r7, #3
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	1cfa      	adds	r2, r7, #3
 800a884:	1c59      	adds	r1, r3, #1
 800a886:	7011      	strb	r1, [r2, #0]
 800a888:	001a      	movs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	189b      	adds	r3, r3, r2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	001a      	movs	r2, r3
 800a892:	183b      	adds	r3, r7, r0
 800a894:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a896:	1cfb      	adds	r3, r7, #3
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	1cfa      	adds	r2, r7, #3
 800a89c:	1c59      	adds	r1, r3, #1
 800a89e:	7011      	strb	r1, [r2, #0]
 800a8a0:	001a      	movs	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	189b      	adds	r3, r3, r2
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	021a      	lsls	r2, r3, #8
 800a8aa:	183b      	adds	r3, r7, r0
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	183b      	adds	r3, r7, r0
 800a8b2:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a8b4:	1cfb      	adds	r3, r7, #3
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	1cfa      	adds	r2, r7, #3
 800a8ba:	1c59      	adds	r1, r3, #1
 800a8bc:	7011      	strb	r1, [r2, #0]
 800a8be:	001a      	movs	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	189b      	adds	r3, r3, r2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	041a      	lsls	r2, r3, #16
 800a8c8:	0001      	movs	r1, r0
 800a8ca:	187b      	adds	r3, r7, r1
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	187b      	adds	r3, r7, r1
 800a8d2:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800a8d4:	187b      	adds	r3, r7, r1
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2264      	movs	r2, #100	; 0x64
 800a8da:	435a      	muls	r2, r3
 800a8dc:	187b      	adds	r3, r7, r1
 800a8de:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800a8e0:	4a24      	ldr	r2, [pc, #144]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a8e2:	238e      	movs	r3, #142	; 0x8e
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	58d3      	ldr	r3, [r2, r3]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	187a      	adds	r2, r7, r1
 800a8ec:	0011      	movs	r1, r2
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f003 ff3b 	bl	800e76a <RegionRxParamSetupReq>
 800a8f4:	0003      	movs	r3, r0
 800a8f6:	001a      	movs	r2, r3
 800a8f8:	193b      	adds	r3, r7, r4
 800a8fa:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800a8fc:	193b      	adds	r3, r7, r4
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	001a      	movs	r2, r3
 800a902:	2307      	movs	r3, #7
 800a904:	4013      	ands	r3, r2
 800a906:	2b07      	cmp	r3, #7
 800a908:	d11c      	bne.n	800a944 <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800a90a:	204c      	movs	r0, #76	; 0x4c
 800a90c:	183b      	adds	r3, r7, r0
 800a90e:	2100      	movs	r1, #0
 800a910:	5659      	ldrsb	r1, [r3, r1]
 800a912:	4a18      	ldr	r2, [pc, #96]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a914:	238e      	movs	r3, #142	; 0x8e
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	58d3      	ldr	r3, [r2, r3]
 800a91a:	b2c9      	uxtb	r1, r1
 800a91c:	22fc      	movs	r2, #252	; 0xfc
 800a91e:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800a920:	4a14      	ldr	r2, [pc, #80]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a922:	238e      	movs	r3, #142	; 0x8e
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	58d2      	ldr	r2, [r2, r3]
 800a928:	183b      	adds	r3, r7, r0
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	21f8      	movs	r1, #248	; 0xf8
 800a92e:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800a930:	183b      	adds	r3, r7, r0
 800a932:	2101      	movs	r1, #1
 800a934:	5659      	ldrsb	r1, [r3, r1]
 800a936:	4a0f      	ldr	r2, [pc, #60]	; (800a974 <ProcessMacCommands+0x3f0>)
 800a938:	238e      	movs	r3, #142	; 0x8e
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	58d3      	ldr	r3, [r2, r3]
 800a93e:	b2c9      	uxtb	r1, r1
 800a940:	22f5      	movs	r2, #245	; 0xf5
 800a942:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800a944:	236b      	movs	r3, #107	; 0x6b
 800a946:	18fb      	adds	r3, r7, r3
 800a948:	781a      	ldrb	r2, [r3, #0]
 800a94a:	2168      	movs	r1, #104	; 0x68
 800a94c:	187b      	adds	r3, r7, r1
 800a94e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800a950:	187b      	adds	r3, r7, r1
 800a952:	2201      	movs	r2, #1
 800a954:	0019      	movs	r1, r3
 800a956:	2005      	movs	r0, #5
 800a958:	f001 fa90 	bl	800be7c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800a95c:	f7ff fdfc 	bl	800a558 <SetMlmeScheduleUplinkIndication>
                break;
 800a960:	46c0      	nop			; (mov r8, r8)
 800a962:	2287      	movs	r2, #135	; 0x87
 800a964:	18bb      	adds	r3, r7, r2
 800a966:	18ba      	adds	r2, r7, r2
 800a968:	7812      	ldrb	r2, [r2, #0]
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e3a5      	b.n	800b0ba <ProcessMacCommands+0xb36>
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	0801bac0 	.word	0x0801bac0
 800a974:	2000049c 	.word	0x2000049c
 800a978:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800a97c:	2385      	movs	r3, #133	; 0x85
 800a97e:	18fb      	adds	r3, r7, r3
 800a980:	22ff      	movs	r2, #255	; 0xff
 800a982:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a984:	4ac5      	ldr	r2, [pc, #788]	; (800ac9c <ProcessMacCommands+0x718>)
 800a986:	23d7      	movs	r3, #215	; 0xd7
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	58d3      	ldr	r3, [r2, r3]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d010      	beq.n	800a9b2 <ProcessMacCommands+0x42e>
 800a990:	4ac2      	ldr	r2, [pc, #776]	; (800ac9c <ProcessMacCommands+0x718>)
 800a992:	23d7      	movs	r3, #215	; 0xd7
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	58d3      	ldr	r3, [r2, r3]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800a99e:	4abf      	ldr	r2, [pc, #764]	; (800ac9c <ProcessMacCommands+0x718>)
 800a9a0:	23d7      	movs	r3, #215	; 0xd7
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	58d3      	ldr	r3, [r2, r3]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2285      	movs	r2, #133	; 0x85
 800a9aa:	18bc      	adds	r4, r7, r2
 800a9ac:	4798      	blx	r3
 800a9ae:	0003      	movs	r3, r0
 800a9b0:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800a9b2:	2168      	movs	r1, #104	; 0x68
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	2285      	movs	r2, #133	; 0x85
 800a9b8:	18ba      	adds	r2, r7, r2
 800a9ba:	7812      	ldrb	r2, [r2, #0]
 800a9bc:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a9be:	1c7b      	adds	r3, r7, #1
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	223f      	movs	r2, #63	; 0x3f
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	187b      	adds	r3, r7, r1
 800a9ca:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a9cc:	187b      	adds	r3, r7, r1
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	0019      	movs	r1, r3
 800a9d2:	2006      	movs	r0, #6
 800a9d4:	f001 fa52 	bl	800be7c <LoRaMacCommandsAddCmd>
 800a9d8:	2287      	movs	r2, #135	; 0x87
 800a9da:	18bb      	adds	r3, r7, r2
 800a9dc:	18ba      	adds	r2, r7, r2
 800a9de:	7812      	ldrb	r2, [r2, #0]
 800a9e0:	701a      	strb	r2, [r3, #0]
                break;
 800a9e2:	e36a      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800a9e4:	246b      	movs	r4, #107	; 0x6b
 800a9e6:	193b      	adds	r3, r7, r4
 800a9e8:	2203      	movs	r2, #3
 800a9ea:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800a9ec:	1cfb      	adds	r3, r7, #3
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	1cfa      	adds	r2, r7, #3
 800a9f2:	1c59      	adds	r1, r3, #1
 800a9f4:	7011      	strb	r1, [r2, #0]
 800a9f6:	001a      	movs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	189b      	adds	r3, r3, r2
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b25a      	sxtb	r2, r3
 800aa00:	2544      	movs	r5, #68	; 0x44
 800aa02:	197b      	adds	r3, r7, r5
 800aa04:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800aa06:	197b      	adds	r3, r7, r5
 800aa08:	2038      	movs	r0, #56	; 0x38
 800aa0a:	183a      	adds	r2, r7, r0
 800aa0c:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800aa0e:	1cfb      	adds	r3, r7, #3
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	1cfa      	adds	r2, r7, #3
 800aa14:	1c59      	adds	r1, r3, #1
 800aa16:	7011      	strb	r1, [r2, #0]
 800aa18:	001a      	movs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	189b      	adds	r3, r3, r2
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	001a      	movs	r2, r3
 800aa22:	183b      	adds	r3, r7, r0
 800aa24:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800aa26:	1cfb      	adds	r3, r7, #3
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	1cfa      	adds	r2, r7, #3
 800aa2c:	1c59      	adds	r1, r3, #1
 800aa2e:	7011      	strb	r1, [r2, #0]
 800aa30:	001a      	movs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	189b      	adds	r3, r3, r2
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	021a      	lsls	r2, r3, #8
 800aa3a:	183b      	adds	r3, r7, r0
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	183b      	adds	r3, r7, r0
 800aa42:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800aa44:	1cfb      	adds	r3, r7, #3
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	1cfa      	adds	r2, r7, #3
 800aa4a:	1c59      	adds	r1, r3, #1
 800aa4c:	7011      	strb	r1, [r2, #0]
 800aa4e:	001a      	movs	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	189b      	adds	r3, r3, r2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	041a      	lsls	r2, r3, #16
 800aa58:	183b      	adds	r3, r7, r0
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	183b      	adds	r3, r7, r0
 800aa60:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800aa62:	183b      	adds	r3, r7, r0
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2264      	movs	r2, #100	; 0x64
 800aa68:	435a      	muls	r2, r3
 800aa6a:	183b      	adds	r3, r7, r0
 800aa6c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800aa6e:	183b      	adds	r3, r7, r0
 800aa70:	2200      	movs	r2, #0
 800aa72:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800aa74:	1cfb      	adds	r3, r7, #3
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	1cfa      	adds	r2, r7, #3
 800aa7a:	1c59      	adds	r1, r3, #1
 800aa7c:	7011      	strb	r1, [r2, #0]
 800aa7e:	001a      	movs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	189b      	adds	r3, r3, r2
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	b25a      	sxtb	r2, r3
 800aa88:	183b      	adds	r3, r7, r0
 800aa8a:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800aa8c:	4a83      	ldr	r2, [pc, #524]	; (800ac9c <ProcessMacCommands+0x718>)
 800aa8e:	238e      	movs	r3, #142	; 0x8e
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	58d3      	ldr	r3, [r2, r3]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	197a      	adds	r2, r7, r5
 800aa98:	0011      	movs	r1, r2
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	f003 fe7b 	bl	800e796 <RegionNewChannelReq>
 800aaa0:	0003      	movs	r3, r0
 800aaa2:	001a      	movs	r2, r3
 800aaa4:	193b      	adds	r3, r7, r4
 800aaa6:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800aaa8:	193b      	adds	r3, r7, r4
 800aaaa:	781a      	ldrb	r2, [r3, #0]
 800aaac:	2168      	movs	r1, #104	; 0x68
 800aaae:	187b      	adds	r3, r7, r1
 800aab0:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800aab2:	187b      	adds	r3, r7, r1
 800aab4:	2201      	movs	r2, #1
 800aab6:	0019      	movs	r1, r3
 800aab8:	2007      	movs	r0, #7
 800aaba:	f001 f9df 	bl	800be7c <LoRaMacCommandsAddCmd>
                break;
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	2287      	movs	r2, #135	; 0x87
 800aac2:	18bb      	adds	r3, r7, r2
 800aac4:	18ba      	adds	r2, r7, r2
 800aac6:	7812      	ldrb	r2, [r2, #0]
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	e2f6      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800aacc:	1cfb      	adds	r3, r7, #3
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	1cfa      	adds	r2, r7, #3
 800aad2:	1c59      	adds	r1, r3, #1
 800aad4:	7011      	strb	r1, [r2, #0]
 800aad6:	001a      	movs	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	189b      	adds	r3, r3, r2
 800aadc:	781a      	ldrb	r2, [r3, #0]
 800aade:	2084      	movs	r0, #132	; 0x84
 800aae0:	183b      	adds	r3, r7, r0
 800aae2:	210f      	movs	r1, #15
 800aae4:	400a      	ands	r2, r1
 800aae6:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800aae8:	183b      	adds	r3, r7, r0
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <ProcessMacCommands+0x578>
                {
                    delay++;
 800aaf0:	2184      	movs	r1, #132	; 0x84
 800aaf2:	187b      	adds	r3, r7, r1
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	187b      	adds	r3, r7, r1
 800aaf8:	3201      	adds	r2, #1
 800aafa:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800aafc:	2384      	movs	r3, #132	; 0x84
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	781a      	ldrb	r2, [r3, #0]
 800ab02:	0013      	movs	r3, r2
 800ab04:	015b      	lsls	r3, r3, #5
 800ab06:	1a9b      	subs	r3, r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	189b      	adds	r3, r3, r2
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	0019      	movs	r1, r3
 800ab10:	4a62      	ldr	r2, [pc, #392]	; (800ac9c <ProcessMacCommands+0x718>)
 800ab12:	238e      	movs	r3, #142	; 0x8e
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	58d3      	ldr	r3, [r2, r3]
 800ab18:	22e4      	movs	r2, #228	; 0xe4
 800ab1a:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800ab1c:	4a5f      	ldr	r2, [pc, #380]	; (800ac9c <ProcessMacCommands+0x718>)
 800ab1e:	238e      	movs	r3, #142	; 0x8e
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	58d3      	ldr	r3, [r2, r3]
 800ab24:	22e4      	movs	r2, #228	; 0xe4
 800ab26:	589a      	ldr	r2, [r3, r2]
 800ab28:	495c      	ldr	r1, [pc, #368]	; (800ac9c <ProcessMacCommands+0x718>)
 800ab2a:	238e      	movs	r3, #142	; 0x8e
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	58cb      	ldr	r3, [r1, r3]
 800ab30:	21fa      	movs	r1, #250	; 0xfa
 800ab32:	0089      	lsls	r1, r1, #2
 800ab34:	468c      	mov	ip, r1
 800ab36:	4462      	add	r2, ip
 800ab38:	21e8      	movs	r1, #232	; 0xe8
 800ab3a:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800ab3c:	2368      	movs	r3, #104	; 0x68
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	2200      	movs	r2, #0
 800ab42:	0019      	movs	r1, r3
 800ab44:	2008      	movs	r0, #8
 800ab46:	f001 f999 	bl	800be7c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800ab4a:	f7ff fd05 	bl	800a558 <SetMlmeScheduleUplinkIndication>
 800ab4e:	2287      	movs	r2, #135	; 0x87
 800ab50:	18bb      	adds	r3, r7, r2
 800ab52:	18ba      	adds	r2, r7, r2
 800ab54:	7812      	ldrb	r2, [r2, #0]
 800ab56:	701a      	strb	r2, [r3, #0]
                break;
 800ab58:	e2af      	b.n	800b0ba <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800ab5a:	1cfb      	adds	r3, r7, #3
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	1cfa      	adds	r2, r7, #3
 800ab60:	1c59      	adds	r1, r3, #1
 800ab62:	7011      	strb	r1, [r2, #0]
 800ab64:	001a      	movs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	189a      	adds	r2, r3, r2
 800ab6a:	2176      	movs	r1, #118	; 0x76
 800ab6c:	187b      	adds	r3, r7, r1
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800ab72:	2034      	movs	r0, #52	; 0x34
 800ab74:	183b      	adds	r3, r7, r0
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800ab7a:	183b      	adds	r3, r7, r0
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800ab80:	187b      	adds	r3, r7, r1
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2220      	movs	r2, #32
 800ab86:	4013      	ands	r3, r2
 800ab88:	d003      	beq.n	800ab92 <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800ab8a:	2334      	movs	r3, #52	; 0x34
 800ab8c:	18fb      	adds	r3, r7, r3
 800ab8e:	2201      	movs	r2, #1
 800ab90:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800ab92:	2376      	movs	r3, #118	; 0x76
 800ab94:	18fb      	adds	r3, r7, r3
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2210      	movs	r2, #16
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	d003      	beq.n	800aba6 <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800ab9e:	2334      	movs	r3, #52	; 0x34
 800aba0:	18fb      	adds	r3, r7, r3
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800aba6:	2376      	movs	r3, #118	; 0x76
 800aba8:	18fb      	adds	r3, r7, r3
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	220f      	movs	r2, #15
 800abae:	4013      	ands	r3, r2
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	2134      	movs	r1, #52	; 0x34
 800abb4:	187b      	adds	r3, r7, r1
 800abb6:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800abb8:	4a38      	ldr	r2, [pc, #224]	; (800ac9c <ProcessMacCommands+0x718>)
 800abba:	238e      	movs	r3, #142	; 0x8e
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	58d3      	ldr	r3, [r2, r3]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	187a      	adds	r2, r7, r1
 800abc4:	0011      	movs	r1, r2
 800abc6:	0018      	movs	r0, r3
 800abc8:	f003 fdfb 	bl	800e7c2 <RegionTxParamSetupReq>
 800abcc:	0003      	movs	r3, r0
 800abce:	3301      	adds	r3, #1
 800abd0:	d05c      	beq.n	800ac8c <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800abd2:	4a32      	ldr	r2, [pc, #200]	; (800ac9c <ProcessMacCommands+0x718>)
 800abd4:	238e      	movs	r3, #142	; 0x8e
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	58d2      	ldr	r2, [r2, r3]
 800abda:	2034      	movs	r0, #52	; 0x34
 800abdc:	183b      	adds	r3, r7, r0
 800abde:	7819      	ldrb	r1, [r3, #0]
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800abe6:	4a2d      	ldr	r2, [pc, #180]	; (800ac9c <ProcessMacCommands+0x718>)
 800abe8:	238e      	movs	r3, #142	; 0x8e
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	58d2      	ldr	r2, [r2, r3]
 800abee:	183b      	adds	r3, r7, r0
 800abf0:	7859      	ldrb	r1, [r3, #1]
 800abf2:	2302      	movs	r3, #2
 800abf4:	33ff      	adds	r3, #255	; 0xff
 800abf6:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800abf8:	183b      	adds	r3, r7, r0
 800abfa:	789b      	ldrb	r3, [r3, #2]
 800abfc:	001a      	movs	r2, r3
 800abfe:	4b28      	ldr	r3, [pc, #160]	; (800aca0 <ProcessMacCommands+0x71c>)
 800ac00:	5c99      	ldrb	r1, [r3, r2]
 800ac02:	4a26      	ldr	r2, [pc, #152]	; (800ac9c <ProcessMacCommands+0x718>)
 800ac04:	238e      	movs	r3, #142	; 0x8e
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	58d4      	ldr	r4, [r2, r3]
 800ac0a:	0008      	movs	r0, r1
 800ac0c:	f7f5 ff66 	bl	8000adc <__aeabi_ui2f>
 800ac10:	1c02      	adds	r2, r0, #0
 800ac12:	2382      	movs	r3, #130	; 0x82
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ac18:	2130      	movs	r1, #48	; 0x30
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ac20:	4a1e      	ldr	r2, [pc, #120]	; (800ac9c <ProcessMacCommands+0x718>)
 800ac22:	238e      	movs	r3, #142	; 0x8e
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	58d2      	ldr	r2, [r2, r3]
 800ac28:	2380      	movs	r3, #128	; 0x80
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	5cd2      	ldrb	r2, [r2, r3]
 800ac2e:	187b      	adds	r3, r7, r1
 800ac30:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac32:	4a1a      	ldr	r2, [pc, #104]	; (800ac9c <ProcessMacCommands+0x718>)
 800ac34:	238e      	movs	r3, #142	; 0x8e
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	58d3      	ldr	r3, [r2, r3]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	187a      	adds	r2, r7, r1
 800ac3e:	0011      	movs	r1, r2
 800ac40:	0018      	movs	r0, r3
 800ac42:	f003 fcb5 	bl	800e5b0 <RegionGetPhyParam>
 800ac46:	0003      	movs	r3, r0
 800ac48:	001a      	movs	r2, r3
 800ac4a:	212c      	movs	r1, #44	; 0x2c
 800ac4c:	187b      	adds	r3, r7, r1
 800ac4e:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ac50:	187b      	adds	r3, r7, r1
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	b259      	sxtb	r1, r3
 800ac56:	4a11      	ldr	r2, [pc, #68]	; (800ac9c <ProcessMacCommands+0x718>)
 800ac58:	238e      	movs	r3, #142	; 0x8e
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	58d3      	ldr	r3, [r2, r3]
 800ac5e:	22d5      	movs	r2, #213	; 0xd5
 800ac60:	5698      	ldrsb	r0, [r3, r2]
 800ac62:	4a0e      	ldr	r2, [pc, #56]	; (800ac9c <ProcessMacCommands+0x718>)
 800ac64:	238e      	movs	r3, #142	; 0x8e
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	58d3      	ldr	r3, [r2, r3]
 800ac6a:	1c04      	adds	r4, r0, #0
 800ac6c:	1c08      	adds	r0, r1, #0
 800ac6e:	b241      	sxtb	r1, r0
 800ac70:	b262      	sxtb	r2, r4
 800ac72:	4291      	cmp	r1, r2
 800ac74:	da00      	bge.n	800ac78 <ProcessMacCommands+0x6f4>
 800ac76:	1c20      	adds	r0, r4, #0
 800ac78:	b241      	sxtb	r1, r0
 800ac7a:	22d5      	movs	r2, #213	; 0xd5
 800ac7c:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ac7e:	2368      	movs	r3, #104	; 0x68
 800ac80:	18fb      	adds	r3, r7, r3
 800ac82:	2200      	movs	r2, #0
 800ac84:	0019      	movs	r1, r3
 800ac86:	2009      	movs	r0, #9
 800ac88:	f001 f8f8 	bl	800be7c <LoRaMacCommandsAddCmd>
                }
                break;
 800ac8c:	46c0      	nop			; (mov r8, r8)
 800ac8e:	2287      	movs	r2, #135	; 0x87
 800ac90:	18bb      	adds	r3, r7, r2
 800ac92:	18ba      	adds	r2, r7, r2
 800ac94:	7812      	ldrb	r2, [r2, #0]
 800ac96:	701a      	strb	r2, [r3, #0]
 800ac98:	e20f      	b.n	800b0ba <ProcessMacCommands+0xb36>
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	2000049c 	.word	0x2000049c
 800aca0:	0801bab0 	.word	0x0801bab0
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800aca4:	246b      	movs	r4, #107	; 0x6b
 800aca6:	193b      	adds	r3, r7, r4
 800aca8:	2203      	movs	r2, #3
 800acaa:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800acac:	1cfb      	adds	r3, r7, #3
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	1cfa      	adds	r2, r7, #3
 800acb2:	1c59      	adds	r1, r3, #1
 800acb4:	7011      	strb	r1, [r2, #0]
 800acb6:	001a      	movs	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	189b      	adds	r3, r3, r2
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	2024      	movs	r0, #36	; 0x24
 800acc0:	183b      	adds	r3, r7, r0
 800acc2:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800acc4:	1cfb      	adds	r3, r7, #3
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	1cfa      	adds	r2, r7, #3
 800acca:	1c59      	adds	r1, r3, #1
 800accc:	7011      	strb	r1, [r2, #0]
 800acce:	001a      	movs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	189b      	adds	r3, r3, r2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	001a      	movs	r2, r3
 800acd8:	183b      	adds	r3, r7, r0
 800acda:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800acdc:	1cfb      	adds	r3, r7, #3
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	1cfa      	adds	r2, r7, #3
 800ace2:	1c59      	adds	r1, r3, #1
 800ace4:	7011      	strb	r1, [r2, #0]
 800ace6:	001a      	movs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	189b      	adds	r3, r3, r2
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	021a      	lsls	r2, r3, #8
 800acf0:	183b      	adds	r3, r7, r0
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	431a      	orrs	r2, r3
 800acf6:	183b      	adds	r3, r7, r0
 800acf8:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800acfa:	1cfb      	adds	r3, r7, #3
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	1cfa      	adds	r2, r7, #3
 800ad00:	1c59      	adds	r1, r3, #1
 800ad02:	7011      	strb	r1, [r2, #0]
 800ad04:	001a      	movs	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	189b      	adds	r3, r3, r2
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	041a      	lsls	r2, r3, #16
 800ad0e:	0001      	movs	r1, r0
 800ad10:	187b      	adds	r3, r7, r1
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	431a      	orrs	r2, r3
 800ad16:	187b      	adds	r3, r7, r1
 800ad18:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800ad1a:	187b      	adds	r3, r7, r1
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2264      	movs	r2, #100	; 0x64
 800ad20:	435a      	muls	r2, r3
 800ad22:	187b      	adds	r3, r7, r1
 800ad24:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800ad26:	4aeb      	ldr	r2, [pc, #940]	; (800b0d4 <ProcessMacCommands+0xb50>)
 800ad28:	238e      	movs	r3, #142	; 0x8e
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	58d3      	ldr	r3, [r2, r3]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	187a      	adds	r2, r7, r1
 800ad32:	0011      	movs	r1, r2
 800ad34:	0018      	movs	r0, r3
 800ad36:	f003 fd5a 	bl	800e7ee <RegionDlChannelReq>
 800ad3a:	0003      	movs	r3, r0
 800ad3c:	001a      	movs	r2, r3
 800ad3e:	193b      	adds	r3, r7, r4
 800ad40:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800ad42:	193b      	adds	r3, r7, r4
 800ad44:	781a      	ldrb	r2, [r3, #0]
 800ad46:	2168      	movs	r1, #104	; 0x68
 800ad48:	187b      	adds	r3, r7, r1
 800ad4a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ad4c:	187b      	adds	r3, r7, r1
 800ad4e:	2201      	movs	r2, #1
 800ad50:	0019      	movs	r1, r3
 800ad52:	200a      	movs	r0, #10
 800ad54:	f001 f892 	bl	800be7c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800ad58:	f7ff fbfe 	bl	800a558 <SetMlmeScheduleUplinkIndication>
                break;
 800ad5c:	46c0      	nop			; (mov r8, r8)
 800ad5e:	2287      	movs	r2, #135	; 0x87
 800ad60:	18bb      	adds	r3, r7, r2
 800ad62:	18ba      	adds	r2, r7, r2
 800ad64:	7812      	ldrb	r2, [r2, #0]
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	e1a7      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800ad6a:	241c      	movs	r4, #28
 800ad6c:	193b      	adds	r3, r7, r4
 800ad6e:	0018      	movs	r0, r3
 800ad70:	2308      	movs	r3, #8
 800ad72:	001a      	movs	r2, r3
 800ad74:	2100      	movs	r1, #0
 800ad76:	f00f f913 	bl	8019fa0 <memset>
                SysTime_t sysTime = { 0 };
 800ad7a:	2514      	movs	r5, #20
 800ad7c:	197b      	adds	r3, r7, r5
 800ad7e:	0018      	movs	r0, r3
 800ad80:	2308      	movs	r3, #8
 800ad82:	001a      	movs	r2, r3
 800ad84:	2100      	movs	r1, #0
 800ad86:	f00f f90b 	bl	8019fa0 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800ad8a:	260c      	movs	r6, #12
 800ad8c:	19bb      	adds	r3, r7, r6
 800ad8e:	0018      	movs	r0, r3
 800ad90:	2308      	movs	r3, #8
 800ad92:	001a      	movs	r2, r3
 800ad94:	2100      	movs	r1, #0
 800ad96:	f00f f903 	bl	8019fa0 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ad9a:	1cfb      	adds	r3, r7, #3
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	1cfa      	adds	r2, r7, #3
 800ada0:	1c59      	adds	r1, r3, #1
 800ada2:	7011      	strb	r1, [r2, #0]
 800ada4:	001a      	movs	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	189b      	adds	r3, r3, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	001a      	movs	r2, r3
 800adae:	0020      	movs	r0, r4
 800adb0:	183b      	adds	r3, r7, r0
 800adb2:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800adb4:	1cfb      	adds	r3, r7, #3
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	1cfa      	adds	r2, r7, #3
 800adba:	1c59      	adds	r1, r3, #1
 800adbc:	7011      	strb	r1, [r2, #0]
 800adbe:	001a      	movs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	189b      	adds	r3, r3, r2
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	183b      	adds	r3, r7, r0
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	431a      	orrs	r2, r3
 800adce:	183b      	adds	r3, r7, r0
 800add0:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800add2:	1cfb      	adds	r3, r7, #3
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	1cfa      	adds	r2, r7, #3
 800add8:	1c59      	adds	r1, r3, #1
 800adda:	7011      	strb	r1, [r2, #0]
 800addc:	001a      	movs	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	189b      	adds	r3, r3, r2
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	041a      	lsls	r2, r3, #16
 800ade6:	183b      	adds	r3, r7, r0
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	431a      	orrs	r2, r3
 800adec:	183b      	adds	r3, r7, r0
 800adee:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800adf0:	1cfb      	adds	r3, r7, #3
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	1cfa      	adds	r2, r7, #3
 800adf6:	1c59      	adds	r1, r3, #1
 800adf8:	7011      	strb	r1, [r2, #0]
 800adfa:	001a      	movs	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	189b      	adds	r3, r3, r2
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	061a      	lsls	r2, r3, #24
 800ae04:	183b      	adds	r3, r7, r0
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	183b      	adds	r3, r7, r0
 800ae0c:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800ae0e:	1cfb      	adds	r3, r7, #3
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	1cfa      	adds	r2, r7, #3
 800ae14:	1c59      	adds	r1, r3, #1
 800ae16:	7011      	strb	r1, [r2, #0]
 800ae18:	001a      	movs	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	189b      	adds	r3, r3, r2
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b21a      	sxth	r2, r3
 800ae22:	183b      	adds	r3, r7, r0
 800ae24:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ae26:	0001      	movs	r1, r0
 800ae28:	183b      	adds	r3, r7, r0
 800ae2a:	2204      	movs	r2, #4
 800ae2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ae2e:	001a      	movs	r2, r3
 800ae30:	0013      	movs	r3, r2
 800ae32:	015b      	lsls	r3, r3, #5
 800ae34:	1a9b      	subs	r3, r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	189b      	adds	r3, r3, r2
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	121b      	asrs	r3, r3, #8
 800ae3e:	b21a      	sxth	r2, r3
 800ae40:	187b      	adds	r3, r7, r1
 800ae42:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800ae44:	002c      	movs	r4, r5
 800ae46:	193b      	adds	r3, r7, r4
 800ae48:	187a      	adds	r2, r7, r1
 800ae4a:	ca03      	ldmia	r2!, {r0, r1}
 800ae4c:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ae4e:	193b      	adds	r3, r7, r4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4aa1      	ldr	r2, [pc, #644]	; (800b0d8 <ProcessMacCommands+0xb54>)
 800ae54:	189a      	adds	r2, r3, r2
 800ae56:	193b      	adds	r3, r7, r4
 800ae58:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800ae5a:	19bb      	adds	r3, r7, r6
 800ae5c:	0018      	movs	r0, r3
 800ae5e:	f005 fe03 	bl	8010a68 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ae62:	236c      	movs	r3, #108	; 0x6c
 800ae64:	18fd      	adds	r5, r7, r3
 800ae66:	499b      	ldr	r1, [pc, #620]	; (800b0d4 <ProcessMacCommands+0xb50>)
 800ae68:	23d3      	movs	r3, #211	; 0xd3
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	0026      	movs	r6, r4
 800ae6e:	193a      	adds	r2, r7, r4
 800ae70:	2404      	movs	r4, #4
 800ae72:	18c8      	adds	r0, r1, r3
 800ae74:	1900      	adds	r0, r0, r4
 800ae76:	466c      	mov	r4, sp
 800ae78:	6800      	ldr	r0, [r0, #0]
 800ae7a:	6020      	str	r0, [r4, #0]
 800ae7c:	58cb      	ldr	r3, [r1, r3]
 800ae7e:	6811      	ldr	r1, [r2, #0]
 800ae80:	6852      	ldr	r2, [r2, #4]
 800ae82:	0028      	movs	r0, r5
 800ae84:	f005 fd70 	bl	8010968 <SysTimeSub>
 800ae88:	0034      	movs	r4, r6
 800ae8a:	0025      	movs	r5, r4
 800ae8c:	193c      	adds	r4, r7, r4
 800ae8e:	236c      	movs	r3, #108	; 0x6c
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	260c      	movs	r6, #12
 800ae94:	19ba      	adds	r2, r7, r6
 800ae96:	4669      	mov	r1, sp
 800ae98:	6858      	ldr	r0, [r3, #4]
 800ae9a:	6008      	str	r0, [r1, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6811      	ldr	r1, [r2, #0]
 800aea0:	6852      	ldr	r2, [r2, #4]
 800aea2:	0020      	movs	r0, r4
 800aea4:	f005 fd08 	bl	80108b8 <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800aea8:	002c      	movs	r4, r5
 800aeaa:	193b      	adds	r3, r7, r4
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	6859      	ldr	r1, [r3, #4]
 800aeb0:	f005 fdae 	bl	8010a10 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800aeb4:	f000 feaf 	bl	800bc16 <LoRaMacClassBDeviceTimeAns>
                break;
 800aeb8:	46c0      	nop			; (mov r8, r8)
 800aeba:	2287      	movs	r2, #135	; 0x87
 800aebc:	18bb      	adds	r3, r7, r2
 800aebe:	18ba      	adds	r2, r7, r2
 800aec0:	7812      	ldrb	r2, [r2, #0]
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e0f9      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800aec6:	4b83      	ldr	r3, [pc, #524]	; (800b0d4 <ProcessMacCommands+0xb50>)
 800aec8:	4a84      	ldr	r2, [pc, #528]	; (800b0dc <ProcessMacCommands+0xb58>)
 800aeca:	5c9b      	ldrb	r3, [r3, r2]
 800aecc:	2b03      	cmp	r3, #3
 800aece:	d006      	beq.n	800aede <ProcessMacCommands+0x95a>
 800aed0:	4b80      	ldr	r3, [pc, #512]	; (800b0d4 <ProcessMacCommands+0xb50>)
 800aed2:	4a82      	ldr	r2, [pc, #520]	; (800b0dc <ProcessMacCommands+0xb58>)
 800aed4:	5c9b      	ldrb	r3, [r3, r2]
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d001      	beq.n	800aede <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800aeda:	f000 fe7d 	bl	800bbd8 <LoRaMacClassBPingSlotInfoAns>
 800aede:	2287      	movs	r2, #135	; 0x87
 800aee0:	18bb      	adds	r3, r7, r2
 800aee2:	18ba      	adds	r2, r7, r2
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	701a      	strb	r2, [r3, #0]
                }
                break;
 800aee8:	e0e7      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800aeea:	207c      	movs	r0, #124	; 0x7c
 800aeec:	183b      	adds	r3, r7, r0
 800aeee:	2203      	movs	r2, #3
 800aef0:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800aef6:	1cfb      	adds	r3, r7, #3
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	1cfa      	adds	r2, r7, #3
 800aefc:	1c59      	adds	r1, r3, #1
 800aefe:	7011      	strb	r1, [r2, #0]
 800af00:	001a      	movs	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	189b      	adds	r3, r3, r2
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800af0a:	1cfb      	adds	r3, r7, #3
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	1cfa      	adds	r2, r7, #3
 800af10:	1c59      	adds	r1, r3, #1
 800af12:	7011      	strb	r1, [r2, #0]
 800af14:	001a      	movs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	189b      	adds	r3, r3, r2
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af20:	4313      	orrs	r3, r2
 800af22:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800af24:	1cfb      	adds	r3, r7, #3
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	1cfa      	adds	r2, r7, #3
 800af2a:	1c59      	adds	r1, r3, #1
 800af2c:	7011      	strb	r1, [r2, #0]
 800af2e:	001a      	movs	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	189b      	adds	r3, r3, r2
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	041b      	lsls	r3, r3, #16
 800af38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af3a:	4313      	orrs	r3, r2
 800af3c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800af3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af40:	2264      	movs	r2, #100	; 0x64
 800af42:	4353      	muls	r3, r2
 800af44:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800af46:	1cfb      	adds	r3, r7, #3
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	1cfa      	adds	r2, r7, #3
 800af4c:	1c59      	adds	r1, r3, #1
 800af4e:	7011      	strb	r1, [r2, #0]
 800af50:	001a      	movs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	189b      	adds	r3, r3, r2
 800af56:	781a      	ldrb	r2, [r3, #0]
 800af58:	2677      	movs	r6, #119	; 0x77
 800af5a:	19bb      	adds	r3, r7, r6
 800af5c:	210f      	movs	r1, #15
 800af5e:	400a      	ands	r2, r1
 800af60:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800af62:	0005      	movs	r5, r0
 800af64:	183c      	adds	r4, r7, r0
 800af66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af68:	19bb      	adds	r3, r7, r6
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	0011      	movs	r1, r2
 800af6e:	0018      	movs	r0, r3
 800af70:	f000 fe37 	bl	800bbe2 <LoRaMacClassBPingSlotChannelReq>
 800af74:	0003      	movs	r3, r0
 800af76:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800af78:	2168      	movs	r1, #104	; 0x68
 800af7a:	187b      	adds	r3, r7, r1
 800af7c:	0028      	movs	r0, r5
 800af7e:	183a      	adds	r2, r7, r0
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800af84:	187b      	adds	r3, r7, r1
 800af86:	2201      	movs	r2, #1
 800af88:	0019      	movs	r1, r3
 800af8a:	2011      	movs	r0, #17
 800af8c:	f000 ff76 	bl	800be7c <LoRaMacCommandsAddCmd>
 800af90:	2287      	movs	r2, #135	; 0x87
 800af92:	18bb      	adds	r3, r7, r2
 800af94:	18ba      	adds	r2, r7, r2
 800af96:	7812      	ldrb	r2, [r2, #0]
 800af98:	701a      	strb	r2, [r3, #0]
                break;
 800af9a:	e08e      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800af9c:	207e      	movs	r0, #126	; 0x7e
 800af9e:	183b      	adds	r3, r7, r0
 800afa0:	2200      	movs	r2, #0
 800afa2:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800afa4:	247d      	movs	r4, #125	; 0x7d
 800afa6:	193b      	adds	r3, r7, r4
 800afa8:	2200      	movs	r2, #0
 800afaa:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800afac:	1cfb      	adds	r3, r7, #3
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	1cfa      	adds	r2, r7, #3
 800afb2:	1c59      	adds	r1, r3, #1
 800afb4:	7011      	strb	r1, [r2, #0]
 800afb6:	001a      	movs	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	189b      	adds	r3, r3, r2
 800afbc:	781a      	ldrb	r2, [r3, #0]
 800afbe:	183b      	adds	r3, r7, r0
 800afc0:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800afc2:	1cfb      	adds	r3, r7, #3
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	1cfa      	adds	r2, r7, #3
 800afc8:	1c59      	adds	r1, r3, #1
 800afca:	7011      	strb	r1, [r2, #0]
 800afcc:	001a      	movs	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	189b      	adds	r3, r3, r2
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	021b      	lsls	r3, r3, #8
 800afd6:	b21a      	sxth	r2, r3
 800afd8:	183b      	adds	r3, r7, r0
 800afda:	2100      	movs	r1, #0
 800afdc:	5e5b      	ldrsh	r3, [r3, r1]
 800afde:	4313      	orrs	r3, r2
 800afe0:	b21a      	sxth	r2, r3
 800afe2:	183b      	adds	r3, r7, r0
 800afe4:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800afe6:	1cfb      	adds	r3, r7, #3
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	1cfa      	adds	r2, r7, #3
 800afec:	1c59      	adds	r1, r3, #1
 800afee:	7011      	strb	r1, [r2, #0]
 800aff0:	001a      	movs	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	189a      	adds	r2, r3, r2
 800aff6:	193b      	adds	r3, r7, r4
 800aff8:	7812      	ldrb	r2, [r2, #0]
 800affa:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800affc:	4b38      	ldr	r3, [pc, #224]	; (800b0e0 <ProcessMacCommands+0xb5c>)
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	193b      	adds	r3, r7, r4
 800b002:	7819      	ldrb	r1, [r3, #0]
 800b004:	183b      	adds	r3, r7, r0
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	0018      	movs	r0, r3
 800b00a:	f000 fdf6 	bl	800bbfa <LoRaMacClassBBeaconTimingAns>
 800b00e:	2287      	movs	r2, #135	; 0x87
 800b010:	18bb      	adds	r3, r7, r2
 800b012:	18ba      	adds	r2, r7, r2
 800b014:	7812      	ldrb	r2, [r2, #0]
 800b016:	701a      	strb	r2, [r3, #0]
                break;
 800b018:	e04f      	b.n	800b0ba <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	2080      	movs	r0, #128	; 0x80
 800b01e:	183a      	adds	r2, r7, r0
 800b020:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800b022:	1cfb      	adds	r3, r7, #3
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	1cfa      	adds	r2, r7, #3
 800b028:	1c59      	adds	r1, r3, #1
 800b02a:	7011      	strb	r1, [r2, #0]
 800b02c:	001a      	movs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	189b      	adds	r3, r3, r2
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	183a      	adds	r2, r7, r0
 800b036:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b038:	1cfb      	adds	r3, r7, #3
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	1cfa      	adds	r2, r7, #3
 800b03e:	1c59      	adds	r1, r3, #1
 800b040:	7011      	strb	r1, [r2, #0]
 800b042:	001a      	movs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	189b      	adds	r3, r3, r2
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	021b      	lsls	r3, r3, #8
 800b04c:	183a      	adds	r2, r7, r0
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	4313      	orrs	r3, r2
 800b052:	183a      	adds	r2, r7, r0
 800b054:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b056:	1cfb      	adds	r3, r7, #3
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	1cfa      	adds	r2, r7, #3
 800b05c:	1c59      	adds	r1, r3, #1
 800b05e:	7011      	strb	r1, [r2, #0]
 800b060:	001a      	movs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	189b      	adds	r3, r3, r2
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	041b      	lsls	r3, r3, #16
 800b06a:	183a      	adds	r2, r7, r0
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	4313      	orrs	r3, r2
 800b070:	183a      	adds	r2, r7, r0
 800b072:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800b074:	183b      	adds	r3, r7, r0
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2264      	movs	r2, #100	; 0x64
 800b07a:	4353      	muls	r3, r2
 800b07c:	183a      	adds	r2, r7, r0
 800b07e:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800b080:	183b      	adds	r3, r7, r0
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	0018      	movs	r0, r3
 800b086:	f000 fdcb 	bl	800bc20 <LoRaMacClassBBeaconFreqReq>
 800b08a:	1e03      	subs	r3, r0, #0
 800b08c:	d004      	beq.n	800b098 <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800b08e:	2368      	movs	r3, #104	; 0x68
 800b090:	18fb      	adds	r3, r7, r3
 800b092:	2201      	movs	r2, #1
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	e003      	b.n	800b0a0 <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800b098:	2368      	movs	r3, #104	; 0x68
 800b09a:	18fb      	adds	r3, r7, r3
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800b0a0:	2368      	movs	r3, #104	; 0x68
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	0019      	movs	r1, r3
 800b0a8:	2013      	movs	r0, #19
 800b0aa:	f000 fee7 	bl	800be7c <LoRaMacCommandsAddCmd>
 800b0ae:	2287      	movs	r2, #135	; 0x87
 800b0b0:	18bb      	adds	r3, r7, r2
 800b0b2:	18ba      	adds	r2, r7, r2
 800b0b4:	7812      	ldrb	r2, [r2, #0]
 800b0b6:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b0b8:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800b0ba:	1cfa      	adds	r2, r7, #3
 800b0bc:	1cbb      	adds	r3, r7, #2
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d201      	bcs.n	800b0ca <ProcessMacCommands+0xb46>
 800b0c6:	f7ff fa7e 	bl	800a5c6 <ProcessMacCommands+0x42>
 800b0ca:	e000      	b.n	800b0ce <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800b0cc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b023      	add	sp, #140	; 0x8c
 800b0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d4:	2000049c 	.word	0x2000049c
 800b0d8:	12d53d80 	.word	0x12d53d80
 800b0dc:	0000046c 	.word	0x0000046c
 800b0e0:	20001090 	.word	0x20001090

0800b0e4 <ScheduleTx>:
    status = ScheduleTx( allowDelayedTx );
    return status;
}

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e6:	b08b      	sub	sp, #44	; 0x2c
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	0002      	movs	r2, r0
 800b0ec:	1dfb      	adds	r3, r7, #7
 800b0ee:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b0f0:	231f      	movs	r3, #31
 800b0f2:	18fb      	adds	r3, r7, r3
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800b100:	4ab1      	ldr	r2, [pc, #708]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b102:	238e      	movs	r3, #142	; 0x8e
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	58d2      	ldr	r2, [r2, r3]
 800b108:	238a      	movs	r3, #138	; 0x8a
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	5cd3      	ldrb	r3, [r2, r3]
 800b10e:	0018      	movs	r0, r3
 800b110:	f000 f9c4 	bl	800b49c <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800b114:	4aac      	ldr	r2, [pc, #688]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b116:	23d1      	movs	r3, #209	; 0xd1
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	58d2      	ldr	r2, [r2, r3]
 800b11c:	210c      	movs	r1, #12
 800b11e:	187b      	adds	r3, r7, r1
 800b120:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b122:	4aa9      	ldr	r2, [pc, #676]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b124:	238e      	movs	r3, #142	; 0x8e
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	58d3      	ldr	r3, [r2, r3]
 800b12a:	22d5      	movs	r2, #213	; 0xd5
 800b12c:	569a      	ldrsb	r2, [r3, r2]
 800b12e:	187b      	adds	r3, r7, r1
 800b130:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800b132:	4aa5      	ldr	r2, [pc, #660]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b134:	238e      	movs	r3, #142	; 0x8e
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	58d2      	ldr	r2, [r2, r3]
 800b13a:	2389      	movs	r3, #137	; 0x89
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	5cd2      	ldrb	r2, [r2, r3]
 800b140:	187b      	adds	r3, r7, r1
 800b142:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b144:	4aa0      	ldr	r2, [pc, #640]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b146:	238e      	movs	r3, #142	; 0x8e
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	58d2      	ldr	r2, [r2, r3]
 800b14c:	2389      	movs	r3, #137	; 0x89
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	5cd3      	ldrb	r3, [r2, r3]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d104      	bne.n	800b160 <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800b156:	230c      	movs	r3, #12
 800b158:	18fb      	adds	r3, r7, r3
 800b15a:	2200      	movs	r2, #0
 800b15c:	725a      	strb	r2, [r3, #9]
 800b15e:	e003      	b.n	800b168 <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800b160:	230c      	movs	r3, #12
 800b162:	18fb      	adds	r3, r7, r3
 800b164:	2201      	movs	r2, #1
 800b166:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800b168:	4a97      	ldr	r2, [pc, #604]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b16a:	23d0      	movs	r3, #208	; 0xd0
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	58d2      	ldr	r2, [r2, r3]
 800b170:	210c      	movs	r1, #12
 800b172:	187b      	adds	r3, r7, r1
 800b174:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800b176:	4a94      	ldr	r2, [pc, #592]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b178:	238e      	movs	r3, #142	; 0x8e
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	58d3      	ldr	r3, [r2, r3]
 800b17e:	7818      	ldrb	r0, [r3, #0]
 800b180:	4a91      	ldr	r2, [pc, #580]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b182:	238e      	movs	r3, #142	; 0x8e
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	58d3      	ldr	r3, [r2, r3]
 800b188:	3314      	adds	r3, #20
 800b18a:	33ff      	adds	r3, #255	; 0xff
 800b18c:	001a      	movs	r2, r3
 800b18e:	261f      	movs	r6, #31
 800b190:	19bc      	adds	r4, r7, r6
 800b192:	2318      	movs	r3, #24
 800b194:	18fd      	adds	r5, r7, r3
 800b196:	1879      	adds	r1, r7, r1
 800b198:	4b8c      	ldr	r3, [pc, #560]	; (800b3cc <ScheduleTx+0x2e8>)
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	002b      	movs	r3, r5
 800b19e:	f003 fb51 	bl	800e844 <RegionNextChannel>
 800b1a2:	0003      	movs	r3, r0
 800b1a4:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800b1a6:	19bb      	adds	r3, r7, r6
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d026      	beq.n	800b1fc <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800b1ae:	231f      	movs	r3, #31
 800b1b0:	18fb      	adds	r3, r7, r3
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b0b      	cmp	r3, #11
 800b1b6:	d11d      	bne.n	800b1f4 <ScheduleTx+0x110>
 800b1b8:	1dfb      	adds	r3, r7, #7
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d019      	beq.n	800b1f4 <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d014      	beq.n	800b1f0 <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b1c6:	4a80      	ldr	r2, [pc, #512]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b1c8:	23d5      	movs	r3, #213	; 0xd5
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	58d3      	ldr	r3, [r2, r3]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	0011      	movs	r1, r2
 800b1d4:	4a7c      	ldr	r2, [pc, #496]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b1d6:	23d5      	movs	r3, #213	; 0xd5
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	4b7c      	ldr	r3, [pc, #496]	; (800b3d0 <ScheduleTx+0x2ec>)
 800b1e0:	0011      	movs	r1, r2
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f005 fd10 	bl	8010c08 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800b1e8:	4b79      	ldr	r3, [pc, #484]	; (800b3d0 <ScheduleTx+0x2ec>)
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f005 fd38 	bl	8010c60 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e0e5      	b.n	800b3c0 <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800b1f4:	231f      	movs	r3, #31
 800b1f6:	18fb      	adds	r3, r7, r3
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	e0e1      	b.n	800b3c0 <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b1fc:	4a72      	ldr	r2, [pc, #456]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b1fe:	238e      	movs	r3, #142	; 0x8e
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	58d3      	ldr	r3, [r2, r3]
 800b204:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800b206:	4a70      	ldr	r2, [pc, #448]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b208:	238e      	movs	r3, #142	; 0x8e
 800b20a:	00db      	lsls	r3, r3, #3
 800b20c:	58d3      	ldr	r3, [r2, r3]
 800b20e:	7818      	ldrb	r0, [r3, #0]
 800b210:	4a6d      	ldr	r2, [pc, #436]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b212:	238e      	movs	r3, #142	; 0x8e
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	58d2      	ldr	r2, [r2, r3]
 800b218:	2302      	movs	r3, #2
 800b21a:	33ff      	adds	r3, #255	; 0xff
 800b21c:	5cd1      	ldrb	r1, [r2, r3]
 800b21e:	4a6a      	ldr	r2, [pc, #424]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b220:	238e      	movs	r3, #142	; 0x8e
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	58d3      	ldr	r3, [r2, r3]
 800b226:	22d5      	movs	r2, #213	; 0xd5
 800b228:	569d      	ldrsb	r5, [r3, r2]
 800b22a:	4a67      	ldr	r2, [pc, #412]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b22c:	238e      	movs	r3, #142	; 0x8e
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	58d3      	ldr	r3, [r2, r3]
 800b232:	22f5      	movs	r2, #245	; 0xf5
 800b234:	5c9b      	ldrb	r3, [r3, r2]
 800b236:	b25b      	sxtb	r3, r3
 800b238:	002a      	movs	r2, r5
 800b23a:	f003 fb1e 	bl	800e87a <RegionApplyDrOffset>
 800b23e:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b240:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b242:	4a61      	ldr	r2, [pc, #388]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b244:	238e      	movs	r3, #142	; 0x8e
 800b246:	00db      	lsls	r3, r3, #3
 800b248:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b24a:	22dc      	movs	r2, #220	; 0xdc
 800b24c:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b24e:	4a5e      	ldr	r2, [pc, #376]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b250:	238e      	movs	r3, #142	; 0x8e
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b256:	22d8      	movs	r2, #216	; 0xd8
 800b258:	589a      	ldr	r2, [r3, r2]
 800b25a:	4b5e      	ldr	r3, [pc, #376]	; (800b3d4 <ScheduleTx+0x2f0>)
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	0013      	movs	r3, r2
 800b260:	0002      	movs	r2, r0
 800b262:	0020      	movs	r0, r4
 800b264:	f003 fa0a 	bl	800e67c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b268:	4a57      	ldr	r2, [pc, #348]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b26a:	238e      	movs	r3, #142	; 0x8e
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	58d3      	ldr	r3, [r2, r3]
 800b270:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800b272:	4a55      	ldr	r2, [pc, #340]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b274:	238e      	movs	r3, #142	; 0x8e
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	58d3      	ldr	r3, [r2, r3]
 800b27a:	22fc      	movs	r2, #252	; 0xfc
 800b27c:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b27e:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b280:	4a51      	ldr	r2, [pc, #324]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b282:	238e      	movs	r3, #142	; 0x8e
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b288:	22dc      	movs	r2, #220	; 0xdc
 800b28a:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b28c:	4a4e      	ldr	r2, [pc, #312]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b28e:	238e      	movs	r3, #142	; 0x8e
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b294:	22d8      	movs	r2, #216	; 0xd8
 800b296:	589a      	ldr	r2, [r3, r2]
 800b298:	4b4f      	ldr	r3, [pc, #316]	; (800b3d8 <ScheduleTx+0x2f4>)
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	0013      	movs	r3, r2
 800b29e:	0022      	movs	r2, r4
 800b2a0:	f003 f9ec 	bl	800e67c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b2a4:	4a48      	ldr	r2, [pc, #288]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2a6:	238e      	movs	r3, #142	; 0x8e
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	58d2      	ldr	r2, [r2, r3]
 800b2ac:	2389      	movs	r3, #137	; 0x89
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	5cd3      	ldrb	r3, [r2, r3]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d11e      	bne.n	800b2f4 <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b2b6:	4a44      	ldr	r2, [pc, #272]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2b8:	238e      	movs	r3, #142	; 0x8e
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	58d3      	ldr	r3, [r2, r3]
 800b2be:	22ec      	movs	r2, #236	; 0xec
 800b2c0:	589b      	ldr	r3, [r3, r2]
 800b2c2:	4941      	ldr	r1, [pc, #260]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2c4:	22f6      	movs	r2, #246	; 0xf6
 800b2c6:	0092      	lsls	r2, r2, #2
 800b2c8:	588a      	ldr	r2, [r1, r2]
 800b2ca:	1899      	adds	r1, r3, r2
 800b2cc:	4a3e      	ldr	r2, [pc, #248]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2ce:	23f1      	movs	r3, #241	; 0xf1
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b2d4:	4a3c      	ldr	r2, [pc, #240]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2d6:	238e      	movs	r3, #142	; 0x8e
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	58d3      	ldr	r3, [r2, r3]
 800b2dc:	22f0      	movs	r2, #240	; 0xf0
 800b2de:	589b      	ldr	r3, [r3, r2]
 800b2e0:	4939      	ldr	r1, [pc, #228]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2e2:	22fb      	movs	r2, #251	; 0xfb
 800b2e4:	0092      	lsls	r2, r2, #2
 800b2e6:	588a      	ldr	r2, [r1, r2]
 800b2e8:	1899      	adds	r1, r3, r2
 800b2ea:	4a37      	ldr	r2, [pc, #220]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b2ec:	23f2      	movs	r3, #242	; 0xf2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	50d1      	str	r1, [r2, r3]
 800b2f2:	e03d      	b.n	800b370 <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b2f4:	2308      	movs	r3, #8
 800b2f6:	18fb      	adds	r3, r7, r3
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f000 fe85 	bl	800c008 <LoRaMacCommandsGetSizeSerializedCmds>
 800b2fe:	1e03      	subs	r3, r0, #0
 800b300:	d001      	beq.n	800b306 <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b302:	2313      	movs	r3, #19
 800b304:	e05c      	b.n	800b3c0 <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800b306:	4b30      	ldr	r3, [pc, #192]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b308:	4a34      	ldr	r2, [pc, #208]	; (800b3dc <ScheduleTx+0x2f8>)
 800b30a:	5c98      	ldrb	r0, [r3, r2]
 800b30c:	4a2e      	ldr	r2, [pc, #184]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b30e:	238e      	movs	r3, #142	; 0x8e
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	58d3      	ldr	r3, [r2, r3]
 800b314:	22d5      	movs	r2, #213	; 0xd5
 800b316:	569b      	ldrsb	r3, [r3, r2]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	0019      	movs	r1, r3
 800b31e:	f7ff f8dd 	bl	800a4dc <ValidatePayloadLength>
 800b322:	0003      	movs	r3, r0
 800b324:	001a      	movs	r2, r3
 800b326:	2301      	movs	r3, #1
 800b328:	4053      	eors	r3, r2
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800b330:	2308      	movs	r3, #8
 800b332:	e045      	b.n	800b3c0 <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b334:	4a24      	ldr	r2, [pc, #144]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b336:	238e      	movs	r3, #142	; 0x8e
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	58d3      	ldr	r3, [r2, r3]
 800b33c:	22e4      	movs	r2, #228	; 0xe4
 800b33e:	589b      	ldr	r3, [r3, r2]
 800b340:	4921      	ldr	r1, [pc, #132]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b342:	22f6      	movs	r2, #246	; 0xf6
 800b344:	0092      	lsls	r2, r2, #2
 800b346:	588a      	ldr	r2, [r1, r2]
 800b348:	1899      	adds	r1, r3, r2
 800b34a:	4a1f      	ldr	r2, [pc, #124]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b34c:	23f1      	movs	r3, #241	; 0xf1
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b352:	4a1d      	ldr	r2, [pc, #116]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b354:	238e      	movs	r3, #142	; 0x8e
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	58d3      	ldr	r3, [r2, r3]
 800b35a:	22e8      	movs	r2, #232	; 0xe8
 800b35c:	589b      	ldr	r3, [r3, r2]
 800b35e:	491a      	ldr	r1, [pc, #104]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b360:	22fb      	movs	r2, #251	; 0xfb
 800b362:	0092      	lsls	r2, r2, #2
 800b364:	588a      	ldr	r2, [r1, r2]
 800b366:	1899      	adds	r1, r3, r2
 800b368:	4a17      	ldr	r2, [pc, #92]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b36a:	23f2      	movs	r3, #242	; 0xf2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800b370:	4a15      	ldr	r2, [pc, #84]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b372:	238e      	movs	r3, #142	; 0x8e
 800b374:	00db      	lsls	r3, r3, #3
 800b376:	58d3      	ldr	r3, [r2, r3]
 800b378:	22d5      	movs	r2, #213	; 0xd5
 800b37a:	569b      	ldrsb	r3, [r3, r2]
 800b37c:	b2d8      	uxtb	r0, r3
 800b37e:	4a12      	ldr	r2, [pc, #72]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b380:	238e      	movs	r3, #142	; 0x8e
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	58d2      	ldr	r2, [r2, r3]
 800b386:	2314      	movs	r3, #20
 800b388:	33ff      	adds	r3, #255	; 0xff
 800b38a:	5cd3      	ldrb	r3, [r2, r3]
 800b38c:	251e      	movs	r5, #30
 800b38e:	197c      	adds	r4, r7, r5
 800b390:	0019      	movs	r1, r3
 800b392:	f000 f825 	bl	800b3e0 <SecureFrame>
 800b396:	0003      	movs	r3, r0
 800b398:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800b39a:	197b      	adds	r3, r7, r5
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <ScheduleTx+0x2c6>
    {
        return retval;
 800b3a2:	231e      	movs	r3, #30
 800b3a4:	18fb      	adds	r3, r7, r3
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	e00a      	b.n	800b3c0 <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800b3aa:	4a07      	ldr	r2, [pc, #28]	; (800b3c8 <ScheduleTx+0x2e4>)
 800b3ac:	238e      	movs	r3, #142	; 0x8e
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	58d2      	ldr	r2, [r2, r3]
 800b3b2:	2314      	movs	r3, #20
 800b3b4:	33ff      	adds	r3, #255	; 0xff
 800b3b6:	5cd3      	ldrb	r3, [r2, r3]
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	f000 f917 	bl	800b5ec <SendFrameOnChannel>
 800b3be:	0003      	movs	r3, r0
}
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	b009      	add	sp, #36	; 0x24
 800b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c8:	2000049c 	.word	0x2000049c
 800b3cc:	200007e0 	.word	0x200007e0
 800b3d0:	20000818 	.word	0x20000818
 800b3d4:	20000868 	.word	0x20000868
 800b3d8:	2000087c 	.word	0x2000087c
 800b3dc:	0000023f 	.word	0x0000023f

0800b3e0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	0002      	movs	r2, r0
 800b3e8:	1dfb      	adds	r3, r7, #7
 800b3ea:	701a      	strb	r2, [r3, #0]
 800b3ec:	1dbb      	adds	r3, r7, #6
 800b3ee:	1c0a      	adds	r2, r1, #0
 800b3f0:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800b3f2:	230f      	movs	r3, #15
 800b3f4:	18fb      	adds	r3, r7, r3
 800b3f6:	2210      	movs	r2, #16
 800b3f8:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800b3fe:	4a25      	ldr	r2, [pc, #148]	; (800b494 <SecureFrame+0xb4>)
 800b400:	2386      	movs	r3, #134	; 0x86
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	5cd3      	ldrb	r3, [r2, r3]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <SecureFrame+0x30>
 800b40a:	2b04      	cmp	r3, #4
 800b40c:	d016      	beq.n	800b43c <SecureFrame+0x5c>
 800b40e:	e039      	b.n	800b484 <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b410:	250f      	movs	r5, #15
 800b412:	197c      	adds	r4, r7, r5
 800b414:	4b20      	ldr	r3, [pc, #128]	; (800b498 <SecureFrame+0xb8>)
 800b416:	0018      	movs	r0, r3
 800b418:	f001 fec8 	bl	800d1ac <LoRaMacCryptoPrepareJoinRequest>
 800b41c:	0003      	movs	r3, r0
 800b41e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b420:	197b      	adds	r3, r7, r5
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b428:	2311      	movs	r3, #17
 800b42a:	e02e      	b.n	800b48a <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b42c:	4a19      	ldr	r2, [pc, #100]	; (800b494 <SecureFrame+0xb4>)
 800b42e:	238a      	movs	r3, #138	; 0x8a
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	5cd3      	ldrb	r3, [r2, r3]
 800b434:	b29a      	uxth	r2, r3
 800b436:	4b17      	ldr	r3, [pc, #92]	; (800b494 <SecureFrame+0xb4>)
 800b438:	811a      	strh	r2, [r3, #8]
            break;
 800b43a:	e025      	b.n	800b488 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800b43c:	2308      	movs	r3, #8
 800b43e:	18fb      	adds	r3, r7, r3
 800b440:	0018      	movs	r0, r3
 800b442:	f002 fca5 	bl	800dd90 <LoRaMacGetFCntUp>
 800b446:	1e03      	subs	r3, r0, #0
 800b448:	d001      	beq.n	800b44e <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b44a:	2312      	movs	r3, #18
 800b44c:	e01d      	b.n	800b48a <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800b44e:	68b8      	ldr	r0, [r7, #8]
 800b450:	260f      	movs	r6, #15
 800b452:	19bc      	adds	r4, r7, r6
 800b454:	4d10      	ldr	r5, [pc, #64]	; (800b498 <SecureFrame+0xb8>)
 800b456:	1dbb      	adds	r3, r7, #6
 800b458:	781a      	ldrb	r2, [r3, #0]
 800b45a:	1dfb      	adds	r3, r7, #7
 800b45c:	7819      	ldrb	r1, [r3, #0]
 800b45e:	002b      	movs	r3, r5
 800b460:	f002 f992 	bl	800d788 <LoRaMacCryptoSecureMessage>
 800b464:	0003      	movs	r3, r0
 800b466:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b468:	19bb      	adds	r3, r7, r6
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b470:	2311      	movs	r3, #17
 800b472:	e00a      	b.n	800b48a <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b474:	4a07      	ldr	r2, [pc, #28]	; (800b494 <SecureFrame+0xb4>)
 800b476:	238a      	movs	r3, #138	; 0x8a
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	5cd3      	ldrb	r3, [r2, r3]
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <SecureFrame+0xb4>)
 800b480:	811a      	strh	r2, [r3, #8]
            break;
 800b482:	e001      	b.n	800b488 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800b484:	2303      	movs	r3, #3
 800b486:	e000      	b.n	800b48a <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	0018      	movs	r0, r3
 800b48c:	46bd      	mov	sp, r7
 800b48e:	b005      	add	sp, #20
 800b490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b492:	46c0      	nop			; (mov r8, r8)
 800b494:	2000049c 	.word	0x2000049c
 800b498:	200005ac 	.word	0x200005ac

0800b49c <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800b49c:	b590      	push	{r4, r7, lr}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	0002      	movs	r2, r0
 800b4a4:	1dfb      	adds	r3, r7, #7
 800b4a6:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b4a8:	4a31      	ldr	r2, [pc, #196]	; (800b570 <CalculateBackOff+0xd4>)
 800b4aa:	238e      	movs	r3, #142	; 0x8e
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	58d2      	ldr	r2, [r2, r3]
 800b4b0:	2389      	movs	r3, #137	; 0x89
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	5cd3      	ldrb	r3, [r2, r3]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d104      	bne.n	800b4c4 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800b4ba:	230c      	movs	r3, #12
 800b4bc:	18fb      	adds	r3, r7, r3
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
 800b4c2:	e003      	b.n	800b4cc <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800b4c4:	230c      	movs	r3, #12
 800b4c6:	18fb      	adds	r3, r7, r3
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800b4cc:	4a28      	ldr	r2, [pc, #160]	; (800b570 <CalculateBackOff+0xd4>)
 800b4ce:	238e      	movs	r3, #142	; 0x8e
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	58d2      	ldr	r2, [r2, r3]
 800b4d4:	2389      	movs	r3, #137	; 0x89
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	5cd2      	ldrb	r2, [r2, r3]
 800b4da:	240c      	movs	r4, #12
 800b4dc:	193b      	adds	r3, r7, r4
 800b4de:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800b4e0:	193b      	adds	r3, r7, r4
 800b4e2:	1dfa      	adds	r2, r7, #7
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800b4e8:	4a21      	ldr	r2, [pc, #132]	; (800b570 <CalculateBackOff+0xd4>)
 800b4ea:	23d2      	movs	r3, #210	; 0xd2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	58d3      	ldr	r3, [r2, r3]
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	f005 fc4e 	bl	8010d92 <TimerGetElapsedTime>
 800b4f6:	0002      	movs	r2, r0
 800b4f8:	193b      	adds	r3, r7, r4
 800b4fa:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b4fc:	4b1c      	ldr	r3, [pc, #112]	; (800b570 <CalculateBackOff+0xd4>)
 800b4fe:	4a1d      	ldr	r2, [pc, #116]	; (800b574 <CalculateBackOff+0xd8>)
 800b500:	589a      	ldr	r2, [r3, r2]
 800b502:	193b      	adds	r3, r7, r4
 800b504:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800b506:	193b      	adds	r3, r7, r4
 800b508:	2200      	movs	r2, #0
 800b50a:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b50c:	4b18      	ldr	r3, [pc, #96]	; (800b570 <CalculateBackOff+0xd4>)
 800b50e:	4a1a      	ldr	r2, [pc, #104]	; (800b578 <CalculateBackOff+0xdc>)
 800b510:	5c9b      	ldrb	r3, [r3, r2]
 800b512:	2204      	movs	r2, #4
 800b514:	4013      	ands	r3, r2
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <CalculateBackOff+0x92>
 800b51c:	2000      	movs	r0, #0
 800b51e:	f000 fecb 	bl	800c2b8 <LoRaMacConfirmQueueIsCmdActive>
 800b522:	1e03      	subs	r3, r0, #0
 800b524:	d003      	beq.n	800b52e <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800b526:	230c      	movs	r3, #12
 800b528:	18fb      	adds	r3, r7, r3
 800b52a:	2201      	movs	r2, #1
 800b52c:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800b52e:	4a10      	ldr	r2, [pc, #64]	; (800b570 <CalculateBackOff+0xd4>)
 800b530:	238e      	movs	r3, #142	; 0x8e
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	58d3      	ldr	r3, [r2, r3]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	220c      	movs	r2, #12
 800b53a:	18ba      	adds	r2, r7, r2
 800b53c:	0011      	movs	r1, r2
 800b53e:	0018      	movs	r0, r3
 800b540:	f003 f96b 	bl	800e81a <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b544:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <CalculateBackOff+0xd4>)
 800b546:	238e      	movs	r3, #142	; 0x8e
 800b548:	00db      	lsls	r3, r3, #3
 800b54a:	58d2      	ldr	r2, [r2, r3]
 800b54c:	2387      	movs	r3, #135	; 0x87
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	5ad3      	ldrh	r3, [r2, r3]
 800b552:	3b01      	subs	r3, #1
 800b554:	4a06      	ldr	r2, [pc, #24]	; (800b570 <CalculateBackOff+0xd4>)
 800b556:	4907      	ldr	r1, [pc, #28]	; (800b574 <CalculateBackOff+0xd8>)
 800b558:	5852      	ldr	r2, [r2, r1]
 800b55a:	435a      	muls	r2, r3
 800b55c:	0011      	movs	r1, r2
 800b55e:	4a04      	ldr	r2, [pc, #16]	; (800b570 <CalculateBackOff+0xd4>)
 800b560:	23d1      	movs	r3, #209	; 0xd1
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	50d1      	str	r1, [r2, r3]
}
 800b566:	46c0      	nop			; (mov r8, r8)
 800b568:	46bd      	mov	sp, r7
 800b56a:	b007      	add	sp, #28
 800b56c:	bd90      	pop	{r4, r7, pc}
 800b56e:	46c0      	nop			; (mov r8, r8)
 800b570:	2000049c 	.word	0x2000049c
 800b574:	0000040c 	.word	0x0000040c
 800b578:	0000046d 	.word	0x0000046d

0800b57c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	1d3b      	adds	r3, r7, #4
 800b584:	7019      	strb	r1, [r3, #0]
 800b586:	0011      	movs	r1, r2
 800b588:	1dfb      	adds	r3, r7, #7
 800b58a:	1c02      	adds	r2, r0, #0
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	1dbb      	adds	r3, r7, #6
 800b590:	1c0a      	adds	r2, r1, #0
 800b592:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b594:	1dfb      	adds	r3, r7, #7
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <RemoveMacCommands+0x28>
 800b59c:	1dfb      	adds	r3, r7, #7
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d10f      	bne.n	800b5c4 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800b5a4:	1dbb      	adds	r3, r7, #6
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d109      	bne.n	800b5c0 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800b5ac:	1d3b      	adds	r3, r7, #4
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2220      	movs	r2, #32
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b5ba:	f000 fce9 	bl	800bf90 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800b5be:	e001      	b.n	800b5c4 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b5c0:	f000 fce6 	bl	800bf90 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b5c4:	46c0      	nop			; (mov r8, r8)
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	b002      	add	sp, #8
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <OpenContinuousRx2Window>:
    MacCtx.NvmCtx->Channel = 0;
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
}

static void OpenContinuousRx2Window( void )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	f7fe fe3f 	bl	800a254 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b5d6:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <OpenContinuousRx2Window+0x18>)
 800b5d8:	4a03      	ldr	r2, [pc, #12]	; (800b5e8 <OpenContinuousRx2Window+0x1c>)
 800b5da:	2102      	movs	r1, #2
 800b5dc:	5499      	strb	r1, [r3, r2]
}
 800b5de:	46c0      	nop			; (mov r8, r8)
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	2000049c 	.word	0x2000049c
 800b5e8:	0000046c 	.word	0x0000046c

0800b5ec <SendFrameOnChannel>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800b5ec:	b590      	push	{r4, r7, lr}
 800b5ee:	b089      	sub	sp, #36	; 0x24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	0002      	movs	r2, r0
 800b5f4:	1dfb      	adds	r3, r7, #7
 800b5f6:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800b5f8:	230b      	movs	r3, #11
 800b5fa:	18fb      	adds	r3, r7, r3
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800b600:	210c      	movs	r1, #12
 800b602:	187b      	adds	r3, r7, r1
 800b604:	1dfa      	adds	r2, r7, #7
 800b606:	7812      	ldrb	r2, [r2, #0]
 800b608:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b60a:	4a4f      	ldr	r2, [pc, #316]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b60c:	238e      	movs	r3, #142	; 0x8e
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	58d3      	ldr	r3, [r2, r3]
 800b612:	22d5      	movs	r2, #213	; 0xd5
 800b614:	569a      	ldrsb	r2, [r3, r2]
 800b616:	187b      	adds	r3, r7, r1
 800b618:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b61a:	4a4b      	ldr	r2, [pc, #300]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b61c:	238e      	movs	r3, #142	; 0x8e
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	58d3      	ldr	r3, [r2, r3]
 800b622:	22d4      	movs	r2, #212	; 0xd4
 800b624:	569a      	ldrsb	r2, [r3, r2]
 800b626:	187b      	adds	r3, r7, r1
 800b628:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800b62a:	4a47      	ldr	r2, [pc, #284]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b62c:	238e      	movs	r3, #142	; 0x8e
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	58d2      	ldr	r2, [r2, r3]
 800b632:	2382      	movs	r3, #130	; 0x82
 800b634:	005b      	lsls	r3, r3, #1
 800b636:	58d2      	ldr	r2, [r2, r3]
 800b638:	187b      	adds	r3, r7, r1
 800b63a:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b63c:	4a42      	ldr	r2, [pc, #264]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b63e:	238e      	movs	r3, #142	; 0x8e
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	58d2      	ldr	r2, [r2, r3]
 800b644:	2384      	movs	r3, #132	; 0x84
 800b646:	005b      	lsls	r3, r3, #1
 800b648:	58d2      	ldr	r2, [r2, r3]
 800b64a:	187b      	adds	r3, r7, r1
 800b64c:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800b64e:	4b3e      	ldr	r3, [pc, #248]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b650:	891a      	ldrh	r2, [r3, #8]
 800b652:	187b      	adds	r3, r7, r1
 800b654:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b656:	f000 fa9d 	bl	800bb94 <LoRaMacClassBIsBeaconExpected>
 800b65a:	1e03      	subs	r3, r0, #0
 800b65c:	d001      	beq.n	800b662 <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800b65e:	230e      	movs	r3, #14
 800b660:	e06d      	b.n	800b73e <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b662:	4a39      	ldr	r2, [pc, #228]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b664:	238e      	movs	r3, #142	; 0x8e
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	58d3      	ldr	r3, [r2, r3]
 800b66a:	22c8      	movs	r2, #200	; 0xc8
 800b66c:	5c9b      	ldrb	r3, [r3, r2]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d10d      	bne.n	800b68e <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b672:	f000 fa95 	bl	800bba0 <LoRaMacClassBIsPingExpected>
 800b676:	1e03      	subs	r3, r0, #0
 800b678:	d001      	beq.n	800b67e <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b67a:	230f      	movs	r3, #15
 800b67c:	e05f      	b.n	800b73e <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b67e:	f000 fa95 	bl	800bbac <LoRaMacClassBIsMulticastExpected>
 800b682:	1e03      	subs	r3, r0, #0
 800b684:	d001      	beq.n	800b68a <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b686:	230f      	movs	r3, #15
 800b688:	e059      	b.n	800b73e <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800b68a:	f000 fadb 	bl	800bc44 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800b68e:	4a2e      	ldr	r2, [pc, #184]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b690:	238e      	movs	r3, #142	; 0x8e
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	58d3      	ldr	r3, [r2, r3]
 800b696:	7818      	ldrb	r0, [r3, #0]
 800b698:	4b2c      	ldr	r3, [pc, #176]	; (800b74c <SendFrameOnChannel+0x160>)
 800b69a:	240b      	movs	r4, #11
 800b69c:	193a      	adds	r2, r7, r4
 800b69e:	210c      	movs	r1, #12
 800b6a0:	1879      	adds	r1, r7, r1
 800b6a2:	f003 f829 	bl	800e6f8 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b6a6:	4b28      	ldr	r3, [pc, #160]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6a8:	4a29      	ldr	r2, [pc, #164]	; (800b750 <SendFrameOnChannel+0x164>)
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b6ae:	4a26      	ldr	r2, [pc, #152]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6b0:	238e      	movs	r3, #142	; 0x8e
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	58d3      	ldr	r3, [r2, r3]
 800b6b6:	22d5      	movs	r2, #213	; 0xd5
 800b6b8:	569b      	ldrsb	r3, [r3, r2]
 800b6ba:	b2d9      	uxtb	r1, r3
 800b6bc:	4b22      	ldr	r3, [pc, #136]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6be:	4a25      	ldr	r2, [pc, #148]	; (800b754 <SendFrameOnChannel+0x168>)
 800b6c0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800b6c2:	193b      	adds	r3, r7, r4
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	5659      	ldrsb	r1, [r3, r1]
 800b6c8:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6ca:	4a23      	ldr	r2, [pc, #140]	; (800b758 <SendFrameOnChannel+0x16c>)
 800b6cc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800b6ce:	1dfb      	adds	r3, r7, #7
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6d4:	4921      	ldr	r1, [pc, #132]	; (800b75c <SendFrameOnChannel+0x170>)
 800b6d6:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b6d8:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6da:	4a21      	ldr	r2, [pc, #132]	; (800b760 <SendFrameOnChannel+0x174>)
 800b6dc:	589a      	ldr	r2, [r3, r2]
 800b6de:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6e0:	4920      	ldr	r1, [pc, #128]	; (800b764 <SendFrameOnChannel+0x178>)
 800b6e2:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b6e4:	4b18      	ldr	r3, [pc, #96]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6e6:	4a1e      	ldr	r2, [pc, #120]	; (800b760 <SendFrameOnChannel+0x174>)
 800b6e8:	589a      	ldr	r2, [r3, r2]
 800b6ea:	4b17      	ldr	r3, [pc, #92]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6ec:	491e      	ldr	r1, [pc, #120]	; (800b768 <SendFrameOnChannel+0x17c>)
 800b6ee:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b6f0:	f000 fa62 	bl	800bbb8 <LoRaMacClassBIsBeaconModeActive>
 800b6f4:	1e03      	subs	r3, r0, #0
 800b6f6:	d00c      	beq.n	800b712 <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b6f8:	4b13      	ldr	r3, [pc, #76]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b6fa:	4a19      	ldr	r2, [pc, #100]	; (800b760 <SendFrameOnChannel+0x174>)
 800b6fc:	589b      	ldr	r3, [r3, r2]
 800b6fe:	0018      	movs	r0, r3
 800b700:	f000 fa97 	bl	800bc32 <LoRaMacClassBIsUplinkCollision>
 800b704:	0003      	movs	r3, r0
 800b706:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b70e:	2310      	movs	r3, #16
 800b710:	e015      	b.n	800b73e <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800b712:	f000 fa57 	bl	800bbc4 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b716:	4a0c      	ldr	r2, [pc, #48]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b718:	23d5      	movs	r3, #213	; 0xd5
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	58d3      	ldr	r3, [r2, r3]
 800b71e:	2202      	movs	r2, #2
 800b720:	431a      	orrs	r2, r3
 800b722:	0011      	movs	r1, r2
 800b724:	4a08      	ldr	r2, [pc, #32]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b726:	23d5      	movs	r3, #213	; 0xd5
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b72c:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <SendFrameOnChannel+0x180>)
 800b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b730:	4a05      	ldr	r2, [pc, #20]	; (800b748 <SendFrameOnChannel+0x15c>)
 800b732:	8912      	ldrh	r2, [r2, #8]
 800b734:	b2d1      	uxtb	r1, r2
 800b736:	4a0e      	ldr	r2, [pc, #56]	; (800b770 <SendFrameOnChannel+0x184>)
 800b738:	0010      	movs	r0, r2
 800b73a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	0018      	movs	r0, r3
 800b740:	46bd      	mov	sp, r7
 800b742:	b009      	add	sp, #36	; 0x24
 800b744:	bd90      	pop	{r4, r7, pc}
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	2000049c 	.word	0x2000049c
 800b74c:	200008a8 	.word	0x200008a8
 800b750:	0000042d 	.word	0x0000042d
 800b754:	0000042e 	.word	0x0000042e
 800b758:	0000042f 	.word	0x0000042f
 800b75c:	0000043c 	.word	0x0000043c
 800b760:	0000040c 	.word	0x0000040c
 800b764:	00000434 	.word	0x00000434
 800b768:	00000444 	.word	0x00000444
 800b76c:	0801bc94 	.word	0x0801bc94
 800b770:	200004a6 	.word	0x200004a6

0800b774 <DetermineFrameType>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <DetermineFrameType+0x16>
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e03b      	b.n	800b806 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	7b1b      	ldrb	r3, [r3, #12]
 800b792:	220f      	movs	r2, #15
 800b794:	4013      	ands	r3, r2
 800b796:	b2db      	uxtb	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d008      	beq.n	800b7ae <DetermineFrameType+0x3a>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	5c9b      	ldrb	r3, [r3, r2]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
 800b7ac:	e02a      	b.n	800b804 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2228      	movs	r2, #40	; 0x28
 800b7b2:	5c9b      	ldrb	r3, [r3, r2]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e021      	b.n	800b804 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	7b1b      	ldrb	r3, [r3, #12]
 800b7c4:	220f      	movs	r2, #15
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d108      	bne.n	800b7e0 <DetermineFrameType+0x6c>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	5c9b      	ldrb	r3, [r3, r2]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2202      	movs	r2, #2
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	e011      	b.n	800b804 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7b1b      	ldrb	r3, [r3, #12]
 800b7e4:	220f      	movs	r2, #15
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d108      	bne.n	800b800 <DetermineFrameType+0x8c>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	5c9b      	ldrb	r3, [r3, r2]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	701a      	strb	r2, [r3, #0]
 800b7fe:	e001      	b.n	800b804 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800b800:	2316      	movs	r3, #22
 800b802:	e000      	b.n	800b806 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	0018      	movs	r0, r3
 800b808:	46bd      	mov	sp, r7
 800b80a:	b002      	add	sp, #8
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800b814:	4a16      	ldr	r2, [pc, #88]	; (800b870 <CheckRetransUnconfirmedUplink+0x60>)
 800b816:	238e      	movs	r3, #142	; 0x8e
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	58d2      	ldr	r2, [r2, r3]
 800b81c:	2388      	movs	r3, #136	; 0x88
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800b822:	4913      	ldr	r1, [pc, #76]	; (800b870 <CheckRetransUnconfirmedUplink+0x60>)
 800b824:	238e      	movs	r3, #142	; 0x8e
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	58cb      	ldr	r3, [r1, r3]
 800b82a:	21f4      	movs	r1, #244	; 0xf4
 800b82c:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800b82e:	429a      	cmp	r2, r3
 800b830:	d301      	bcc.n	800b836 <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800b832:	2301      	movs	r3, #1
 800b834:	e019      	b.n	800b86a <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b836:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <CheckRetransUnconfirmedUplink+0x60>)
 800b838:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <CheckRetransUnconfirmedUplink+0x64>)
 800b83a:	5c9b      	ldrb	r3, [r3, r2]
 800b83c:	2202      	movs	r2, #2
 800b83e:	4013      	ands	r3, r2
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d010      	beq.n	800b868 <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b846:	4a0a      	ldr	r2, [pc, #40]	; (800b870 <CheckRetransUnconfirmedUplink+0x60>)
 800b848:	238e      	movs	r3, #142	; 0x8e
 800b84a:	00db      	lsls	r3, r3, #3
 800b84c:	58d3      	ldr	r3, [r2, r3]
 800b84e:	22c8      	movs	r2, #200	; 0xc8
 800b850:	5c9b      	ldrb	r3, [r3, r2]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800b856:	2301      	movs	r3, #1
 800b858:	e007      	b.n	800b86a <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b85a:	4b05      	ldr	r3, [pc, #20]	; (800b870 <CheckRetransUnconfirmedUplink+0x60>)
 800b85c:	4a06      	ldr	r2, [pc, #24]	; (800b878 <CheckRetransUnconfirmedUplink+0x68>)
 800b85e:	5c9b      	ldrb	r3, [r3, r2]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800b864:	2301      	movs	r3, #1
 800b866:	e000      	b.n	800b86a <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	0018      	movs	r0, r3
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	2000049c 	.word	0x2000049c
 800b874:	0000046d 	.word	0x0000046d
 800b878:	0000046c 	.word	0x0000046c

0800b87c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800b880:	4a11      	ldr	r2, [pc, #68]	; (800b8c8 <CheckRetransConfirmedUplink+0x4c>)
 800b882:	238e      	movs	r3, #142	; 0x8e
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	58d3      	ldr	r3, [r2, r3]
 800b888:	4a10      	ldr	r2, [pc, #64]	; (800b8cc <CheckRetransConfirmedUplink+0x50>)
 800b88a:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800b88c:	490e      	ldr	r1, [pc, #56]	; (800b8c8 <CheckRetransConfirmedUplink+0x4c>)
 800b88e:	238e      	movs	r3, #142	; 0x8e
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	58cb      	ldr	r3, [r1, r3]
 800b894:	490e      	ldr	r1, [pc, #56]	; (800b8d0 <CheckRetransConfirmedUplink+0x54>)
 800b896:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800b898:	429a      	cmp	r2, r3
 800b89a:	d301      	bcc.n	800b8a0 <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e010      	b.n	800b8c2 <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b8a0:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <CheckRetransConfirmedUplink+0x4c>)
 800b8a2:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <CheckRetransConfirmedUplink+0x58>)
 800b8a4:	5c9b      	ldrb	r3, [r3, r2]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d007      	beq.n	800b8c0 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800b8b0:	4a05      	ldr	r2, [pc, #20]	; (800b8c8 <CheckRetransConfirmedUplink+0x4c>)
 800b8b2:	2386      	movs	r3, #134	; 0x86
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	5cd3      	ldrb	r3, [r2, r3]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e000      	b.n	800b8c2 <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	2000049c 	.word	0x2000049c
 800b8cc:	00000217 	.word	0x00000217
 800b8d0:	00000216 	.word	0x00000216
 800b8d4:	0000046d 	.word	0x0000046d

0800b8d8 <StopRetransmission>:


static bool StopRetransmission( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800b8e2:	1d3b      	adds	r3, r7, #4
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f002 fa53 	bl	800dd90 <LoRaMacGetFCntUp>
 800b8ea:	1e03      	subs	r3, r0, #0
 800b8ec:	d001      	beq.n	800b8f2 <StopRetransmission+0x1a>
    {
        return false;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e043      	b.n	800b97a <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f002 fa61 	bl	800ddbc <LoRaMacSetFCntUp>
 800b8fa:	1e03      	subs	r3, r0, #0
 800b8fc:	d001      	beq.n	800b902 <StopRetransmission+0x2a>
    {
        return false;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e03b      	b.n	800b97a <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800b902:	4b20      	ldr	r3, [pc, #128]	; (800b984 <StopRetransmission+0xac>)
 800b904:	4a20      	ldr	r2, [pc, #128]	; (800b988 <StopRetransmission+0xb0>)
 800b906:	5c9b      	ldrb	r3, [r3, r2]
 800b908:	2202      	movs	r2, #2
 800b90a:	4013      	ands	r3, r2
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d110      	bne.n	800b934 <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800b912:	4a1c      	ldr	r2, [pc, #112]	; (800b984 <StopRetransmission+0xac>)
 800b914:	238e      	movs	r3, #142	; 0x8e
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	58d3      	ldr	r3, [r2, r3]
 800b91a:	22ca      	movs	r2, #202	; 0xca
 800b91c:	5c9b      	ldrb	r3, [r3, r2]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d008      	beq.n	800b934 <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800b922:	4a18      	ldr	r2, [pc, #96]	; (800b984 <StopRetransmission+0xac>)
 800b924:	238e      	movs	r3, #142	; 0x8e
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	58d3      	ldr	r3, [r2, r3]
 800b92a:	22cc      	movs	r2, #204	; 0xcc
 800b92c:	589a      	ldr	r2, [r3, r2]
 800b92e:	3201      	adds	r2, #1
 800b930:	21cc      	movs	r1, #204	; 0xcc
 800b932:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800b934:	4a13      	ldr	r2, [pc, #76]	; (800b984 <StopRetransmission+0xac>)
 800b936:	238e      	movs	r3, #142	; 0x8e
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	58d2      	ldr	r2, [r2, r3]
 800b93c:	2388      	movs	r3, #136	; 0x88
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	2100      	movs	r1, #0
 800b942:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800b944:	4a0f      	ldr	r2, [pc, #60]	; (800b984 <StopRetransmission+0xac>)
 800b946:	238e      	movs	r3, #142	; 0x8e
 800b948:	00db      	lsls	r3, r3, #3
 800b94a:	58d3      	ldr	r3, [r2, r3]
 800b94c:	4a0f      	ldr	r2, [pc, #60]	; (800b98c <StopRetransmission+0xb4>)
 800b94e:	2100      	movs	r1, #0
 800b950:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800b952:	4a0c      	ldr	r2, [pc, #48]	; (800b984 <StopRetransmission+0xac>)
 800b954:	238e      	movs	r3, #142	; 0x8e
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	58d2      	ldr	r2, [r2, r3]
 800b95a:	2386      	movs	r3, #134	; 0x86
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	2100      	movs	r1, #0
 800b960:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b962:	4a08      	ldr	r2, [pc, #32]	; (800b984 <StopRetransmission+0xac>)
 800b964:	23d5      	movs	r3, #213	; 0xd5
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	58d3      	ldr	r3, [r2, r3]
 800b96a:	2202      	movs	r2, #2
 800b96c:	4393      	bics	r3, r2
 800b96e:	0019      	movs	r1, r3
 800b970:	4a04      	ldr	r2, [pc, #16]	; (800b984 <StopRetransmission+0xac>)
 800b972:	23d5      	movs	r3, #213	; 0xd5
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	50d1      	str	r1, [r2, r3]

    return true;
 800b978:	2301      	movs	r3, #1
}
 800b97a:	0018      	movs	r0, r3
 800b97c:	46bd      	mov	sp, r7
 800b97e:	b002      	add	sp, #8
 800b980:	bd80      	pop	{r7, pc}
 800b982:	46c0      	nop			; (mov r8, r8)
 800b984:	2000049c 	.word	0x2000049c
 800b988:	0000046d 	.word	0x0000046d
 800b98c:	00000219 	.word	0x00000219

0800b990 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800b996:	4a2d      	ldr	r2, [pc, #180]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800b998:	238e      	movs	r3, #142	; 0x8e
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	58d3      	ldr	r3, [r2, r3]
 800b99e:	4a2c      	ldr	r2, [pc, #176]	; (800ba50 <AckTimeoutRetriesProcess+0xc0>)
 800b9a0:	5c9a      	ldrb	r2, [r3, r2]
 800b9a2:	492a      	ldr	r1, [pc, #168]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800b9a4:	238e      	movs	r3, #142	; 0x8e
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	58cb      	ldr	r3, [r1, r3]
 800b9aa:	492a      	ldr	r1, [pc, #168]	; (800ba54 <AckTimeoutRetriesProcess+0xc4>)
 800b9ac:	5c5b      	ldrb	r3, [r3, r1]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d247      	bcs.n	800ba42 <AckTimeoutRetriesProcess+0xb2>
 800b9b2:	4a26      	ldr	r2, [pc, #152]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800b9b4:	238e      	movs	r3, #142	; 0x8e
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	58d3      	ldr	r3, [r2, r3]
 800b9ba:	4a25      	ldr	r2, [pc, #148]	; (800ba50 <AckTimeoutRetriesProcess+0xc0>)
 800b9bc:	5c9b      	ldrb	r3, [r3, r2]
 800b9be:	2b08      	cmp	r3, #8
 800b9c0:	d83f      	bhi.n	800ba42 <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800b9c2:	4a22      	ldr	r2, [pc, #136]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800b9c4:	238e      	movs	r3, #142	; 0x8e
 800b9c6:	00db      	lsls	r3, r3, #3
 800b9c8:	58d3      	ldr	r3, [r2, r3]
 800b9ca:	4a21      	ldr	r2, [pc, #132]	; (800ba50 <AckTimeoutRetriesProcess+0xc0>)
 800b9cc:	5c9a      	ldrb	r2, [r3, r2]
 800b9ce:	3201      	adds	r2, #1
 800b9d0:	b2d1      	uxtb	r1, r2
 800b9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <AckTimeoutRetriesProcess+0xc0>)
 800b9d4:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800b9d6:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800b9d8:	238e      	movs	r3, #142	; 0x8e
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	58d3      	ldr	r3, [r2, r3]
 800b9de:	4a1c      	ldr	r2, [pc, #112]	; (800ba50 <AckTimeoutRetriesProcess+0xc0>)
 800b9e0:	5c9b      	ldrb	r3, [r3, r2]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d02a      	beq.n	800ba42 <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b9ec:	1d3b      	adds	r3, r7, #4
 800b9ee:	2221      	movs	r2, #33	; 0x21
 800b9f0:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b9f2:	4a16      	ldr	r2, [pc, #88]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800b9f4:	238e      	movs	r3, #142	; 0x8e
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	58d2      	ldr	r2, [r2, r3]
 800b9fa:	2380      	movs	r3, #128	; 0x80
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	5cd2      	ldrb	r2, [r2, r3]
 800ba00:	1d3b      	adds	r3, r7, #4
 800ba02:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ba04:	4a11      	ldr	r2, [pc, #68]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800ba06:	238e      	movs	r3, #142	; 0x8e
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	58d3      	ldr	r3, [r2, r3]
 800ba0c:	22d5      	movs	r2, #213	; 0xd5
 800ba0e:	569a      	ldrsb	r2, [r3, r2]
 800ba10:	1d3b      	adds	r3, r7, #4
 800ba12:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ba14:	4a0d      	ldr	r2, [pc, #52]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800ba16:	238e      	movs	r3, #142	; 0x8e
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	58d3      	ldr	r3, [r2, r3]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	1d3a      	adds	r2, r7, #4
 800ba20:	0011      	movs	r1, r2
 800ba22:	0018      	movs	r0, r3
 800ba24:	f002 fdc4 	bl	800e5b0 <RegionGetPhyParam>
 800ba28:	0003      	movs	r3, r0
 800ba2a:	001a      	movs	r2, r3
 800ba2c:	003b      	movs	r3, r7
 800ba2e:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800ba30:	003b      	movs	r3, r7
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	4a05      	ldr	r2, [pc, #20]	; (800ba4c <AckTimeoutRetriesProcess+0xbc>)
 800ba36:	238e      	movs	r3, #142	; 0x8e
 800ba38:	00db      	lsls	r3, r3, #3
 800ba3a:	58d3      	ldr	r3, [r2, r3]
 800ba3c:	b249      	sxtb	r1, r1
 800ba3e:	22d5      	movs	r2, #213	; 0xd5
 800ba40:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800ba42:	46c0      	nop			; (mov r8, r8)
 800ba44:	46bd      	mov	sp, r7
 800ba46:	b002      	add	sp, #8
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	2000049c 	.word	0x2000049c
 800ba50:	00000217 	.word	0x00000217
 800ba54:	00000216 	.word	0x00000216

0800ba58 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800ba5e:	4a19      	ldr	r2, [pc, #100]	; (800bac4 <AckTimeoutRetriesFinalize+0x6c>)
 800ba60:	2386      	movs	r3, #134	; 0x86
 800ba62:	00db      	lsls	r3, r3, #3
 800ba64:	5cd3      	ldrb	r3, [r2, r3]
 800ba66:	2201      	movs	r2, #1
 800ba68:	4053      	eors	r3, r2
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01c      	beq.n	800baaa <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800ba70:	003b      	movs	r3, r7
 800ba72:	2201      	movs	r2, #1
 800ba74:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800ba76:	4b14      	ldr	r3, [pc, #80]	; (800bac8 <AckTimeoutRetriesFinalize+0x70>)
 800ba78:	689a      	ldr	r2, [r3, #8]
 800ba7a:	003b      	movs	r3, r7
 800ba7c:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800ba7e:	4a11      	ldr	r2, [pc, #68]	; (800bac4 <AckTimeoutRetriesFinalize+0x6c>)
 800ba80:	238e      	movs	r3, #142	; 0x8e
 800ba82:	00db      	lsls	r3, r3, #3
 800ba84:	58d3      	ldr	r3, [r2, r3]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	003a      	movs	r2, r7
 800ba8a:	0011      	movs	r1, r2
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f002 fdcb 	bl	800e628 <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800ba92:	4a0c      	ldr	r2, [pc, #48]	; (800bac4 <AckTimeoutRetriesFinalize+0x6c>)
 800ba94:	238e      	movs	r3, #142	; 0x8e
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	58d3      	ldr	r3, [r2, r3]
 800ba9a:	4a0c      	ldr	r2, [pc, #48]	; (800bacc <AckTimeoutRetriesFinalize+0x74>)
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800baa0:	4a08      	ldr	r2, [pc, #32]	; (800bac4 <AckTimeoutRetriesFinalize+0x6c>)
 800baa2:	2386      	movs	r3, #134	; 0x86
 800baa4:	00db      	lsls	r3, r3, #3
 800baa6:	2100      	movs	r1, #0
 800baa8:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800baaa:	4a06      	ldr	r2, [pc, #24]	; (800bac4 <AckTimeoutRetriesFinalize+0x6c>)
 800baac:	238e      	movs	r3, #142	; 0x8e
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	58d3      	ldr	r3, [r2, r3]
 800bab2:	4a07      	ldr	r2, [pc, #28]	; (800bad0 <AckTimeoutRetriesFinalize+0x78>)
 800bab4:	5c99      	ldrb	r1, [r3, r2]
 800bab6:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <AckTimeoutRetriesFinalize+0x6c>)
 800bab8:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <AckTimeoutRetriesFinalize+0x7c>)
 800baba:	5499      	strb	r1, [r3, r2]
}
 800babc:	46c0      	nop			; (mov r8, r8)
 800babe:	46bd      	mov	sp, r7
 800bac0:	b002      	add	sp, #8
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	2000049c 	.word	0x2000049c
 800bac8:	200010a0 	.word	0x200010a0
 800bacc:	00000219 	.word	0x00000219
 800bad0:	00000217 	.word	0x00000217
 800bad4:	00000431 	.word	0x00000431

0800bad8 <IsRequestPending>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
}

static uint8_t IsRequestPending( void )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800badc:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <IsRequestPending+0x30>)
 800bade:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <IsRequestPending+0x34>)
 800bae0:	5c9b      	ldrb	r3, [r3, r2]
 800bae2:	2204      	movs	r2, #4
 800bae4:	4013      	ands	r3, r2
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d107      	bne.n	800bafc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800baec:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <IsRequestPending+0x30>)
 800baee:	4a07      	ldr	r2, [pc, #28]	; (800bb0c <IsRequestPending+0x34>)
 800baf0:	5c9b      	ldrb	r3, [r3, r2]
 800baf2:	2201      	movs	r2, #1
 800baf4:	4013      	ands	r3, r2
 800baf6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <IsRequestPending+0x28>
    {
        return 1;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e000      	b.n	800bb02 <IsRequestPending+0x2a>
    }
    return 0;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	0018      	movs	r0, r3
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	2000049c 	.word	0x2000049c
 800bb0c:	0000046d 	.word	0x0000046d

0800bb10 <LoRaMacClassBSetBeaconState>:
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	0002      	movs	r2, r0
 800bb18:	1dfb      	adds	r3, r7, #7
 800bb1a:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800bb1c:	46c0      	nop			; (mov r8, r8)
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	b002      	add	sp, #8
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	0002      	movs	r2, r0
 800bb2c:	1dfb      	adds	r3, r7, #7
 800bb2e:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb30:	46c0      	nop			; (mov r8, r8)
 800bb32:	46bd      	mov	sp, r7
 800bb34:	b002      	add	sp, #8
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	0002      	movs	r2, r0
 800bb40:	1dfb      	adds	r3, r7, #7
 800bb42:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb44:	46c0      	nop			; (mov r8, r8)
 800bb46:	46bd      	mov	sp, r7
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <LoRaMacClassBBeaconTimerEvent>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb54:	46c0      	nop			; (mov r8, r8)
 800bb56:	46bd      	mov	sp, r7
 800bb58:	b002      	add	sp, #8
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb64:	46c0      	nop			; (mov r8, r8)
 800bb66:	46bd      	mov	sp, r7
 800bb68:	b002      	add	sp, #8
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb74:	46c0      	nop			; (mov r8, r8)
 800bb76:	46bd      	mov	sp, r7
 800bb78:	b002      	add	sp, #8
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	000a      	movs	r2, r1
 800bb86:	1cbb      	adds	r3, r7, #2
 800bb88:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800bb8a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	b002      	add	sp, #8
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800bb98:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800bba4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bba6:	0018      	movs	r0, r3
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800bbb0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bbb2:	0018      	movs	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800bbbc:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <LoRaMacClassBHaltBeaconing>:
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBHaltBeaconing( void )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bbc8:	46c0      	nop			; (mov r8, r8)
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bbd2:	46c0      	nop			; (mov r8, r8)
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <LoRaMacClassBPingSlotInfoAns>:
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBPingSlotInfoAns( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bbdc:	46c0      	nop			; (mov r8, r8)
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	0002      	movs	r2, r0
 800bbea:	6039      	str	r1, [r7, #0]
 800bbec:	1dfb      	adds	r3, r7, #7
 800bbee:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800bbf0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	b002      	add	sp, #8
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b082      	sub	sp, #8
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	603a      	str	r2, [r7, #0]
 800bc02:	1dbb      	adds	r3, r7, #6
 800bc04:	1c02      	adds	r2, r0, #0
 800bc06:	801a      	strh	r2, [r3, #0]
 800bc08:	1d7b      	adds	r3, r7, #5
 800bc0a:	1c0a      	adds	r2, r1, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b002      	add	sp, #8
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc1a:	46c0      	nop			; (mov r8, r8)
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 800bc28:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc2a:	0018      	movs	r0, r3
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	b002      	add	sp, #8
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800bc3a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	b002      	add	sp, #8
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc48:	46c0      	nop			; (mov r8, r8)
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bc52:	46c0      	nop			; (mov r8, r8)
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bc64:	230e      	movs	r3, #14
 800bc66:	18fb      	adds	r3, r7, r3
 800bc68:	2200      	movs	r2, #0
 800bc6a:	801a      	strh	r2, [r3, #0]
 800bc6c:	e00f      	b.n	800bc8e <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800bc6e:	230e      	movs	r3, #14
 800bc70:	18fb      	adds	r3, r7, r3
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	18d3      	adds	r3, r2, r3
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <isSlotFree+0x2a>
        {
            return false;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e00b      	b.n	800bc9a <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bc82:	210e      	movs	r1, #14
 800bc84:	187b      	adds	r3, r7, r1
 800bc86:	881a      	ldrh	r2, [r3, #0]
 800bc88:	187b      	adds	r3, r7, r1
 800bc8a:	3201      	adds	r2, #1
 800bc8c:	801a      	strh	r2, [r3, #0]
 800bc8e:	230e      	movs	r3, #14
 800bc90:	18fb      	adds	r3, r7, r3
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	2b0f      	cmp	r3, #15
 800bc96:	d9ea      	bls.n	800bc6e <isSlotFree+0x16>
        }
    }
    return true;
 800bc98:	2301      	movs	r3, #1
}
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	b004      	add	sp, #16
 800bca0:	bd80      	pop	{r7, pc}
	...

0800bca4 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800bcaa:	1dfb      	adds	r3, r7, #7
 800bcac:	2200      	movs	r2, #0
 800bcae:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800bcb0:	e00a      	b.n	800bcc8 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 800bcb2:	1dfb      	adds	r3, r7, #7
 800bcb4:	781a      	ldrb	r2, [r3, #0]
 800bcb6:	1dfb      	adds	r3, r7, #7
 800bcb8:	3201      	adds	r2, #1
 800bcba:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800bcbc:	1dfb      	adds	r3, r7, #7
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b0f      	cmp	r3, #15
 800bcc2:	d101      	bne.n	800bcc8 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	e017      	b.n	800bcf8 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800bcc8:	1dfb      	adds	r3, r7, #7
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	011b      	lsls	r3, r3, #4
 800bcce:	3308      	adds	r3, #8
 800bcd0:	001a      	movs	r2, r3
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <mallocNewMacCommandSlot+0x5c>)
 800bcd4:	18d3      	adds	r3, r2, r3
 800bcd6:	0018      	movs	r0, r3
 800bcd8:	f7ff ffbe 	bl	800bc58 <isSlotFree>
 800bcdc:	0003      	movs	r3, r0
 800bcde:	001a      	movs	r2, r3
 800bce0:	2301      	movs	r3, #1
 800bce2:	4053      	eors	r3, r2
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e3      	bne.n	800bcb2 <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800bcea:	1dfb      	adds	r3, r7, #7
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	001a      	movs	r2, r3
 800bcf4:	4b02      	ldr	r3, [pc, #8]	; (800bd00 <mallocNewMacCommandSlot+0x5c>)
 800bcf6:	18d3      	adds	r3, r2, r3
}
 800bcf8:	0018      	movs	r0, r3
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	b002      	add	sp, #8
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20000918 	.word	0x20000918

0800bd04 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <freeMacCommandSlot+0x12>
    {
        return false;
 800bd12:	2300      	movs	r3, #0
 800bd14:	e006      	b.n	800bd24 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2210      	movs	r2, #16
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f005 f8b3 	bl	8010e88 <memset1>

    return true;
 800bd22:	2301      	movs	r3, #1
}
 800bd24:	0018      	movs	r0, r3
 800bd26:	46bd      	mov	sp, r7
 800bd28:	b002      	add	sp, #8
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d104      	bne.n	800bd46 <linkedListAdd+0x1a>
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <linkedListAdd+0x1a>
    {
        return false;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e015      	b.n	800bd72 <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d102      	bne.n	800bd54 <linkedListAdd+0x28>
    {
        list->First = element;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	683a      	ldr	r2, [r7, #0]
 800bd52:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d003      	beq.n	800bd64 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	605a      	str	r2, [r3, #4]

    return true;
 800bd70:	2301      	movs	r3, #1
}
 800bd72:	0018      	movs	r0, r3
 800bd74:	46bd      	mov	sp, r7
 800bd76:	b002      	add	sp, #8
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d104      	bne.n	800bd94 <linkedListGetPrevious+0x1a>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <linkedListGetPrevious+0x1a>
    {
        return NULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	e016      	b.n	800bdc2 <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d00c      	beq.n	800bdbc <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 800bda2:	e002      	b.n	800bdaa <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <linkedListGetPrevious+0x46>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d1f4      	bne.n	800bda4 <linkedListGetPrevious+0x2a>
 800bdba:	e001      	b.n	800bdc0 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
}
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	b004      	add	sp, #16
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d104      	bne.n	800bde4 <linkedListRemove+0x1a>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <linkedListRemove+0x1a>
    {
        return false;
 800bde0:	2300      	movs	r3, #0
 800bde2:	e023      	b.n	800be2c <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	0011      	movs	r1, r2
 800bdea:	0018      	movs	r0, r3
 800bdec:	f7ff ffc5 	bl	800bd7a <linkedListGetPrevious>
 800bdf0:	0003      	movs	r3, r0
 800bdf2:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d103      	bne.n	800be06 <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d102      	bne.n	800be16 <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d003      	beq.n	800be24 <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]

    return true;
 800be2a:	2301      	movs	r3, #1
}
 800be2c:	0018      	movs	r0, r3
 800be2e:	46bd      	mov	sp, r7
 800be30:	b004      	add	sp, #16
 800be32:	bd80      	pop	{r7, pc}

0800be34 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	0002      	movs	r2, r0
 800be3c:	1dfb      	adds	r3, r7, #7
 800be3e:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800be40:	1dfb      	adds	r3, r7, #7
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b08      	cmp	r3, #8
 800be46:	d003      	beq.n	800be50 <IsSticky+0x1c>
 800be48:	2b0a      	cmp	r3, #10
 800be4a:	d001      	beq.n	800be50 <IsSticky+0x1c>
 800be4c:	2b05      	cmp	r3, #5
 800be4e:	d101      	bne.n	800be54 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800be50:	2301      	movs	r3, #1
 800be52:	e000      	b.n	800be56 <IsSticky+0x22>
        default:
            return false;
 800be54:	2300      	movs	r3, #0
    }
}
 800be56:	0018      	movs	r0, r3
 800be58:	46bd      	mov	sp, r7
 800be5a:	b002      	add	sp, #8
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800be64:	4b04      	ldr	r3, [pc, #16]	; (800be78 <NvmCtxCallback+0x18>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800be6c:	4b02      	ldr	r3, [pc, #8]	; (800be78 <NvmCtxCallback+0x18>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4798      	blx	r3
    }
}
 800be72:	46c0      	nop			; (mov r8, r8)
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000914 	.word	0x20000914

0800be7c <LoRaMacCommandsAddCmd>:
    *commandsNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60b9      	str	r1, [r7, #8]
 800be84:	607a      	str	r2, [r7, #4]
 800be86:	230f      	movs	r3, #15
 800be88:	18fb      	adds	r3, r7, r3
 800be8a:	1c02      	adds	r2, r0, #0
 800be8c:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800be94:	2301      	movs	r3, #1
 800be96:	e03c      	b.n	800bf12 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 800be98:	f7ff ff04 	bl	800bca4 <mallocNewMacCommandSlot>
 800be9c:	0003      	movs	r3, r0
 800be9e:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800bea6:	2302      	movs	r3, #2
 800bea8:	e033      	b.n	800bf12 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	4b1b      	ldr	r3, [pc, #108]	; (800bf1c <LoRaMacCommandsAddCmd+0xa0>)
 800beae:	0011      	movs	r1, r2
 800beb0:	0018      	movs	r0, r3
 800beb2:	f7ff ff3b 	bl	800bd2c <linkedListAdd>
 800beb6:	0003      	movs	r3, r0
 800beb8:	001a      	movs	r2, r3
 800beba:	2301      	movs	r3, #1
 800bebc:	4053      	eors	r3, r2
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 800bec4:	2305      	movs	r3, #5
 800bec6:	e024      	b.n	800bf12 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	240f      	movs	r4, #15
 800becc:	193a      	adds	r2, r7, r4
 800bece:	7812      	ldrb	r2, [r2, #0]
 800bed0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	3305      	adds	r3, #5
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	b292      	uxth	r2, r2
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	0018      	movs	r0, r3
 800bee4:	f004 ff94 	bl	8010e10 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800bee8:	193b      	adds	r3, r7, r4
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	0018      	movs	r0, r3
 800beee:	f7ff ffa1 	bl	800be34 <IsSticky>
 800bef2:	0003      	movs	r3, r0
 800bef4:	001a      	movs	r2, r3
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800befa:	4b08      	ldr	r3, [pc, #32]	; (800bf1c <LoRaMacCommandsAddCmd+0xa0>)
 800befc:	22f8      	movs	r2, #248	; 0xf8
 800befe:	589a      	ldr	r2, [r3, r2]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	18d3      	adds	r3, r2, r3
 800bf04:	1c5a      	adds	r2, r3, #1
 800bf06:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <LoRaMacCommandsAddCmd+0xa0>)
 800bf08:	21f8      	movs	r1, #248	; 0xf8
 800bf0a:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 800bf0c:	f7ff ffa8 	bl	800be60 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	0018      	movs	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	b007      	add	sp, #28
 800bf18:	bd90      	pop	{r4, r7, pc}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	20000918 	.word	0x20000918

0800bf20 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e028      	b.n	800bf84 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <LoRaMacCommandsRemoveCmd+0x6c>)
 800bf36:	0011      	movs	r1, r2
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f7ff ff46 	bl	800bdca <linkedListRemove>
 800bf3e:	0003      	movs	r3, r0
 800bf40:	001a      	movs	r2, r3
 800bf42:	2301      	movs	r3, #1
 800bf44:	4053      	eors	r3, r2
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e019      	b.n	800bf84 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <LoRaMacCommandsRemoveCmd+0x6c>)
 800bf52:	22f8      	movs	r2, #248	; 0xf8
 800bf54:	589a      	ldr	r2, [r3, r2]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	1e5a      	subs	r2, r3, #1
 800bf5e:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <LoRaMacCommandsRemoveCmd+0x6c>)
 800bf60:	21f8      	movs	r1, #248	; 0xf8
 800bf62:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	0018      	movs	r0, r3
 800bf68:	f7ff fecc 	bl	800bd04 <freeMacCommandSlot>
 800bf6c:	0003      	movs	r3, r0
 800bf6e:	001a      	movs	r2, r3
 800bf70:	2301      	movs	r3, #1
 800bf72:	4053      	eors	r3, r2
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 800bf7a:	2305      	movs	r3, #5
 800bf7c:	e002      	b.n	800bf84 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 800bf7e:	f7ff ff6f 	bl	800be60 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	0018      	movs	r0, r3
 800bf86:	46bd      	mov	sp, r7
 800bf88:	b002      	add	sp, #8
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20000918 	.word	0x20000918

0800bf90 <LoRaMacCommandsRemoveStickyAnsCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800bf96:	4b1a      	ldr	r3, [pc, #104]	; (800c000 <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 800bf9c:	e026      	b.n	800bfec <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	7b1b      	ldrb	r3, [r3, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01d      	beq.n	800bfe8 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800bfac:	230b      	movs	r3, #11
 800bfae:	18fb      	adds	r3, r7, r3
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	e013      	b.n	800bfde <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	791a      	ldrb	r2, [r3, #4]
 800bfba:	230b      	movs	r3, #11
 800bfbc:	18fb      	adds	r3, r7, r3
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4910      	ldr	r1, [pc, #64]	; (800c004 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 800bfc2:	5ccb      	ldrb	r3, [r1, r3]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d104      	bne.n	800bfd2 <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f7ff ffa8 	bl	800bf20 <LoRaMacCommandsRemoveCmd>
                    break;
 800bfd0:	e00a      	b.n	800bfe8 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800bfd2:	210b      	movs	r1, #11
 800bfd4:	187b      	adds	r3, r7, r1
 800bfd6:	781a      	ldrb	r2, [r3, #0]
 800bfd8:	187b      	adds	r3, r7, r1
 800bfda:	3201      	adds	r2, #1
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	230b      	movs	r3, #11
 800bfe0:	18fb      	adds	r3, r7, r3
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d9e6      	bls.n	800bfb6 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1d5      	bne.n	800bf9e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 800bff2:	f7ff ff35 	bl	800be60 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	0018      	movs	r0, r3
 800bffa:	46bd      	mov	sp, r7
 800bffc:	b004      	add	sp, #16
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20000918 	.word	0x20000918
 800c004:	0801bb10 	.word	0x0801bb10

0800c008 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c016:	2301      	movs	r3, #1
 800c018:	e005      	b.n	800c026 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800c01a:	4b05      	ldr	r3, [pc, #20]	; (800c030 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800c01c:	22f8      	movs	r2, #248	; 0xf8
 800c01e:	589a      	ldr	r2, [r3, r2]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c024:	2300      	movs	r3, #0

}
 800c026:	0018      	movs	r0, r3
 800c028:	46bd      	mov	sp, r7
 800c02a:	b002      	add	sp, #8
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	46c0      	nop			; (mov r8, r8)
 800c030:	20000918 	.word	0x20000918

0800c034 <LoRaMacCommandsStickyCmdsPending>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c042:	2301      	movs	r3, #1
 800c044:	e016      	b.n	800c074 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800c046:	4b0d      	ldr	r3, [pc, #52]	; (800c07c <LoRaMacCommandsStickyCmdsPending+0x48>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 800c052:	e00b      	b.n	800c06c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	7b1b      	ldrb	r3, [r3, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800c062:	2300      	movs	r3, #0
 800c064:	e006      	b.n	800c074 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60fb      	str	r3, [r7, #12]
    while( curElement )
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1f0      	bne.n	800c054 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c072:	2300      	movs	r3, #0
}
 800c074:	0018      	movs	r0, r3
 800c076:	46bd      	mov	sp, r7
 800c078:	b004      	add	sp, #16
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	20000918 	.word	0x20000918

0800c080 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c088:	4b08      	ldr	r3, [pc, #32]	; (800c0ac <IncreaseBufferPointer+0x2c>)
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	3310      	adds	r3, #16
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	429a      	cmp	r2, r3
 800c092:	d103      	bne.n	800c09c <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c094:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <IncreaseBufferPointer+0x2c>)
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	e002      	b.n	800c0a2 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800c0a2:	687b      	ldr	r3, [r7, #4]
}
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	b002      	add	sp, #8
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20000a14 	.word	0x20000a14

0800c0b0 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
 800c0ba:	230f      	movs	r3, #15
 800c0bc:	18fb      	adds	r3, r7, r3
 800c0be:	1c02      	adds	r2, r0, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 800c0c6:	e00e      	b.n	800c0e6 <GetElement+0x36>
    {
        if( element->Request == request )
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	220f      	movs	r2, #15
 800c0ce:	18ba      	adds	r2, r7, r2
 800c0d0:	7812      	ldrb	r2, [r2, #0]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d101      	bne.n	800c0da <GetElement+0x2a>
        {
            // We have found the element
            return element;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	e00a      	b.n	800c0f0 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f7ff ffcf 	bl	800c080 <IncreaseBufferPointer>
 800c0e2:	0003      	movs	r3, r0
 800c0e4:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d1ec      	bne.n	800c0c8 <GetElement+0x18>
        }
    }
    return NULL;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b006      	add	sp, #24
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <LoRaMacConfirmQueueAdd>:
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    return &ConfirmQueueNvmCtx;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c100:	4b16      	ldr	r3, [pc, #88]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	7d1b      	ldrb	r3, [r3, #20]
 800c106:	2b04      	cmp	r3, #4
 800c108:	d901      	bls.n	800c10e <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 800c10a:	2300      	movs	r3, #0
 800c10c:	e021      	b.n	800c152 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	7812      	ldrb	r2, [r2, #0]
 800c116:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c118:	4b10      	ldr	r3, [pc, #64]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	7852      	ldrb	r2, [r2, #1]
 800c120:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c122:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	78d2      	ldrb	r2, [r2, #3]
 800c12a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800c12c:	4b0b      	ldr	r3, [pc, #44]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	2200      	movs	r2, #0
 800c132:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800c134:	4b09      	ldr	r3, [pc, #36]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	7d1a      	ldrb	r2, [r3, #20]
 800c13a:	3201      	adds	r2, #1
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	0018      	movs	r0, r3
 800c146:	f7ff ff9b 	bl	800c080 <IncreaseBufferPointer>
 800c14a:	0002      	movs	r2, r0
 800c14c:	4b03      	ldr	r3, [pc, #12]	; (800c15c <LoRaMacConfirmQueueAdd+0x64>)
 800c14e:	609a      	str	r2, [r3, #8]

    return true;
 800c150:	2301      	movs	r3, #1
}
 800c152:	0018      	movs	r0, r3
 800c154:	46bd      	mov	sp, r7
 800c156:	b002      	add	sp, #8
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	20000a14 	.word	0x20000a14

0800c160 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800c164:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	7d1b      	ldrb	r3, [r3, #20]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 800c16e:	2300      	movs	r3, #0
 800c170:	e00e      	b.n	800c190 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800c172:	4b09      	ldr	r3, [pc, #36]	; (800c198 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	7d1a      	ldrb	r2, [r3, #20]
 800c178:	3a01      	subs	r2, #1
 800c17a:	b2d2      	uxtb	r2, r2
 800c17c:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c17e:	4b06      	ldr	r3, [pc, #24]	; (800c198 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	0018      	movs	r0, r3
 800c184:	f7ff ff7c 	bl	800c080 <IncreaseBufferPointer>
 800c188:	0002      	movs	r2, r0
 800c18a:	4b03      	ldr	r3, [pc, #12]	; (800c198 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c18c:	605a      	str	r2, [r3, #4]

    return true;
 800c18e:	2301      	movs	r3, #1
}
 800c190:	0018      	movs	r0, r3
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	20000a14 	.word	0x20000a14

0800c19c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	0002      	movs	r2, r0
 800c1a4:	1dfb      	adds	r3, r7, #7
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	1dbb      	adds	r3, r7, #6
 800c1aa:	1c0a      	adds	r2, r1, #0
 800c1ac:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <LoRaMacConfirmQueueSetStatus+0x54>)
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	7d1b      	ldrb	r3, [r3, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d014      	beq.n	800c1e6 <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c1bc:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <LoRaMacConfirmQueueSetStatus+0x54>)
 800c1be:	6859      	ldr	r1, [r3, #4]
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <LoRaMacConfirmQueueSetStatus+0x54>)
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	1dbb      	adds	r3, r7, #6
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	0018      	movs	r0, r3
 800c1ca:	f7ff ff71 	bl	800c0b0 <GetElement>
 800c1ce:	0003      	movs	r3, r0
 800c1d0:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d006      	beq.n	800c1e6 <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	1dfa      	adds	r2, r7, #7
 800c1dc:	7812      	ldrb	r2, [r2, #0]
 800c1de:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800c1e6:	46c0      	nop			; (mov r8, r8)
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	b004      	add	sp, #16
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	20000a14 	.word	0x20000a14

0800c1f4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	0002      	movs	r2, r0
 800c1fc:	1dfb      	adds	r3, r7, #7
 800c1fe:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800c200:	2300      	movs	r3, #0
 800c202:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c204:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <LoRaMacConfirmQueueGetStatus+0x48>)
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	7d1b      	ldrb	r3, [r3, #20]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d010      	beq.n	800c230 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c20e:	4b0b      	ldr	r3, [pc, #44]	; (800c23c <LoRaMacConfirmQueueGetStatus+0x48>)
 800c210:	6859      	ldr	r1, [r3, #4]
 800c212:	4b0a      	ldr	r3, [pc, #40]	; (800c23c <LoRaMacConfirmQueueGetStatus+0x48>)
 800c214:	689a      	ldr	r2, [r3, #8]
 800c216:	1dfb      	adds	r3, r7, #7
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	0018      	movs	r0, r3
 800c21c:	f7ff ff48 	bl	800c0b0 <GetElement>
 800c220:	0003      	movs	r3, r0
 800c222:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d002      	beq.n	800c230 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	785b      	ldrb	r3, [r3, #1]
 800c22e:	e000      	b.n	800c232 <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c230:	2301      	movs	r3, #1
}
 800c232:	0018      	movs	r0, r3
 800c234:	46bd      	mov	sp, r7
 800c236:	b004      	add	sp, #16
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	20000a14 	.word	0x20000a14

0800c240 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	0002      	movs	r2, r0
 800c248:	1dfb      	adds	r3, r7, #7
 800c24a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c24c:	4b14      	ldr	r3, [pc, #80]	; (800c2a0 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800c252:	4b13      	ldr	r3, [pc, #76]	; (800c2a0 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	1dfa      	adds	r2, r7, #7
 800c258:	7812      	ldrb	r2, [r2, #0]
 800c25a:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c25c:	4b10      	ldr	r3, [pc, #64]	; (800c2a0 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	7d1b      	ldrb	r3, [r3, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d018      	beq.n	800c298 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	1dfa      	adds	r2, r7, #7
 800c26a:	7812      	ldrb	r2, [r2, #0]
 800c26c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	78db      	ldrb	r3, [r3, #3]
 800c272:	2201      	movs	r2, #1
 800c274:	4053      	eors	r3, r2
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2201      	movs	r2, #1
 800c280:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	0018      	movs	r0, r3
 800c286:	f7ff fefb 	bl	800c080 <IncreaseBufferPointer>
 800c28a:	0003      	movs	r3, r0
 800c28c:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c28e:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	429a      	cmp	r2, r3
 800c296:	d1e6      	bne.n	800c266 <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 800c298:	46c0      	nop			; (mov r8, r8)
 800c29a:	46bd      	mov	sp, r7
 800c29c:	b004      	add	sp, #16
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	20000a14 	.word	0x20000a14

0800c2a4 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 800c2a8:	4b02      	ldr	r3, [pc, #8]	; (800c2b4 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	7d5b      	ldrb	r3, [r3, #21]
}
 800c2ae:	0018      	movs	r0, r3
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20000a14 	.word	0x20000a14

0800c2b8 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	0002      	movs	r2, r0
 800c2c0:	1dfb      	adds	r3, r7, #7
 800c2c2:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c2c4:	4b08      	ldr	r3, [pc, #32]	; (800c2e8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800c2c6:	6859      	ldr	r1, [r3, #4]
 800c2c8:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800c2ca:	689a      	ldr	r2, [r3, #8]
 800c2cc:	1dfb      	adds	r3, r7, #7
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	0018      	movs	r0, r3
 800c2d2:	f7ff feed 	bl	800c0b0 <GetElement>
 800c2d6:	1e03      	subs	r3, r0, #0
 800c2d8:	d001      	beq.n	800c2de <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e000      	b.n	800c2e0 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	b002      	add	sp, #8
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	20000a14 	.word	0x20000a14

0800c2ec <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c2f4:	4b2d      	ldr	r3, [pc, #180]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c2f6:	691a      	ldr	r2, [r3, #16]
 800c2f8:	230e      	movs	r3, #14
 800c2fa:	18fb      	adds	r3, r7, r3
 800c2fc:	7d12      	ldrb	r2, [r2, #20]
 800c2fe:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 800c300:	230d      	movs	r3, #13
 800c302:	18fb      	adds	r3, r7, r3
 800c304:	2200      	movs	r2, #0
 800c306:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800c308:	230f      	movs	r3, #15
 800c30a:	18fb      	adds	r3, r7, r3
 800c30c:	2200      	movs	r2, #0
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	e03f      	b.n	800c392 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c312:	4b26      	ldr	r3, [pc, #152]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c31c:	4b23      	ldr	r3, [pc, #140]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	785a      	ldrb	r2, [r3, #1]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c326:	4b21      	ldr	r3, [pc, #132]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	210d      	movs	r1, #13
 800c32c:	187b      	adds	r3, r7, r1
 800c32e:	7892      	ldrb	r2, [r2, #2]
 800c330:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 800c332:	187b      	adds	r3, r7, r1
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d006      	beq.n	800c348 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c33a:	4b1c      	ldr	r3, [pc, #112]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	0010      	movs	r0, r2
 800c344:	4798      	blx	r3
 800c346:	e00f      	b.n	800c368 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c348:	4b18      	ldr	r3, [pc, #96]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	781a      	ldrb	r2, [r3, #0]
 800c34e:	2108      	movs	r1, #8
 800c350:	187b      	adds	r3, r7, r1
 800c352:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c354:	4b15      	ldr	r3, [pc, #84]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	785a      	ldrb	r2, [r3, #1]
 800c35a:	187b      	adds	r3, r7, r1
 800c35c:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c35e:	4b13      	ldr	r3, [pc, #76]	; (800c3ac <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	78da      	ldrb	r2, [r3, #3]
 800c364:	187b      	adds	r3, r7, r1
 800c366:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c368:	f7ff fefa 	bl	800c160 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c36c:	230d      	movs	r3, #13
 800c36e:	18fb      	adds	r3, r7, r3
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2201      	movs	r2, #1
 800c374:	4053      	eors	r3, r2
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c37c:	2308      	movs	r3, #8
 800c37e:	18fb      	adds	r3, r7, r3
 800c380:	0018      	movs	r0, r3
 800c382:	f7ff feb9 	bl	800c0f8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c386:	210f      	movs	r1, #15
 800c388:	187b      	adds	r3, r7, r1
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	187b      	adds	r3, r7, r1
 800c38e:	3201      	adds	r2, #1
 800c390:	701a      	strb	r2, [r3, #0]
 800c392:	230f      	movs	r3, #15
 800c394:	18fa      	adds	r2, r7, r3
 800c396:	230e      	movs	r3, #14
 800c398:	18fb      	adds	r3, r7, r3
 800c39a:	7812      	ldrb	r2, [r2, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d3b7      	bcc.n	800c312 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	b004      	add	sp, #16
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	46c0      	nop			; (mov r8, r8)
 800c3ac:	20000a14 	.word	0x20000a14

0800c3b0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c3b4:	4b02      	ldr	r3, [pc, #8]	; (800c3c0 <LoRaMacConfirmQueueGetCnt+0x10>)
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	7d1b      	ldrb	r3, [r3, #20]
}
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	20000a14 	.word	0x20000a14

0800c3c4 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800c3c4:	b590      	push	{r4, r7, lr}
 800c3c6:	b08f      	sub	sp, #60	; 0x3c
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	0008      	movs	r0, r1
 800c3ce:	0011      	movs	r1, r2
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	230a      	movs	r3, #10
 800c3d4:	18fb      	adds	r3, r7, r3
 800c3d6:	1c02      	adds	r2, r0, #0
 800c3d8:	801a      	strh	r2, [r3, #0]
 800c3da:	2309      	movs	r3, #9
 800c3dc:	18fb      	adds	r3, r7, r3
 800c3de:	1c0a      	adds	r2, r1, #0
 800c3e0:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c3e8:	2307      	movs	r3, #7
 800c3ea:	e0e9      	b.n	800c5c0 <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 800c3ec:	2337      	movs	r3, #55	; 0x37
 800c3ee:	18fb      	adds	r3, r7, r3
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 800c3f4:	2334      	movs	r3, #52	; 0x34
 800c3f6:	18fb      	adds	r3, r7, r3
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800c3fc:	2320      	movs	r3, #32
 800c3fe:	18fb      	adds	r3, r7, r3
 800c400:	0018      	movs	r0, r3
 800c402:	2310      	movs	r3, #16
 800c404:	001a      	movs	r2, r3
 800c406:	2100      	movs	r1, #0
 800c408:	f00d fdca 	bl	8019fa0 <memset>
    uint8_t aBlock[16] = { 0 };
 800c40c:	2110      	movs	r1, #16
 800c40e:	000c      	movs	r4, r1
 800c410:	187b      	adds	r3, r7, r1
 800c412:	0018      	movs	r0, r3
 800c414:	2310      	movs	r3, #16
 800c416:	001a      	movs	r2, r3
 800c418:	2100      	movs	r1, #0
 800c41a:	f00d fdc1 	bl	8019fa0 <memset>

    aBlock[0] = 0x01;
 800c41e:	0021      	movs	r1, r4
 800c420:	187b      	adds	r3, r7, r1
 800c422:	2201      	movs	r2, #1
 800c424:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 800c426:	187b      	adds	r3, r7, r1
 800c428:	2240      	movs	r2, #64	; 0x40
 800c42a:	2008      	movs	r0, #8
 800c42c:	4684      	mov	ip, r0
 800c42e:	44bc      	add	ip, r7
 800c430:	4462      	add	r2, ip
 800c432:	7812      	ldrb	r2, [r2, #0]
 800c434:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	187b      	adds	r3, r7, r1
 800c43c:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	0a1b      	lsrs	r3, r3, #8
 800c442:	b2da      	uxtb	r2, r3
 800c444:	187b      	adds	r3, r7, r1
 800c446:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	187b      	adds	r3, r7, r1
 800c450:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	0e1b      	lsrs	r3, r3, #24
 800c456:	b2da      	uxtb	r2, r3
 800c458:	187b      	adds	r3, r7, r1
 800c45a:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800c45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	187b      	adds	r3, r7, r1
 800c462:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c466:	0a1b      	lsrs	r3, r3, #8
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	187b      	adds	r3, r7, r1
 800c46c:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c470:	0c1b      	lsrs	r3, r3, #16
 800c472:	b2da      	uxtb	r2, r3
 800c474:	187b      	adds	r3, r7, r1
 800c476:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c47a:	0e1b      	lsrs	r3, r3, #24
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	187b      	adds	r3, r7, r1
 800c480:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 800c482:	e04f      	b.n	800c524 <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 800c484:	2134      	movs	r1, #52	; 0x34
 800c486:	187b      	adds	r3, r7, r1
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	2010      	movs	r0, #16
 800c48e:	183b      	adds	r3, r7, r0
 800c490:	73da      	strb	r2, [r3, #15]
        ctr++;
 800c492:	187b      	adds	r3, r7, r1
 800c494:	881a      	ldrh	r2, [r3, #0]
 800c496:	187b      	adds	r3, r7, r1
 800c498:	3201      	adds	r2, #1
 800c49a:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c49c:	2320      	movs	r3, #32
 800c49e:	18f9      	adds	r1, r7, r3
 800c4a0:	2309      	movs	r3, #9
 800c4a2:	18fb      	adds	r3, r7, r3
 800c4a4:	781a      	ldrb	r2, [r3, #0]
 800c4a6:	1838      	adds	r0, r7, r0
 800c4a8:	000b      	movs	r3, r1
 800c4aa:	2110      	movs	r1, #16
 800c4ac:	f7fc fbd2 	bl	8008c54 <SecureElementAesEncrypt>
 800c4b0:	1e03      	subs	r3, r0, #0
 800c4b2:	d001      	beq.n	800c4b8 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c4b4:	230c      	movs	r3, #12
 800c4b6:	e083      	b.n	800c5c0 <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 800c4b8:	2333      	movs	r3, #51	; 0x33
 800c4ba:	18fb      	adds	r3, r7, r3
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	e01f      	b.n	800c502 <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c4c2:	2037      	movs	r0, #55	; 0x37
 800c4c4:	183b      	adds	r3, r7, r0
 800c4c6:	781a      	ldrb	r2, [r3, #0]
 800c4c8:	2433      	movs	r4, #51	; 0x33
 800c4ca:	193b      	adds	r3, r7, r4
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	18d3      	adds	r3, r2, r3
 800c4d0:	001a      	movs	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	189b      	adds	r3, r3, r2
 800c4d6:	7819      	ldrb	r1, [r3, #0]
 800c4d8:	193b      	adds	r3, r7, r4
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	18ba      	adds	r2, r7, r2
 800c4e0:	5cd2      	ldrb	r2, [r2, r3]
 800c4e2:	183b      	adds	r3, r7, r0
 800c4e4:	7818      	ldrb	r0, [r3, #0]
 800c4e6:	193b      	adds	r3, r7, r4
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	18c3      	adds	r3, r0, r3
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	181b      	adds	r3, r3, r0
 800c4f2:	404a      	eors	r2, r1
 800c4f4:	b2d2      	uxtb	r2, r2
 800c4f6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 800c4f8:	193b      	adds	r3, r7, r4
 800c4fa:	781a      	ldrb	r2, [r3, #0]
 800c4fc:	193b      	adds	r3, r7, r4
 800c4fe:	3201      	adds	r2, #1
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	2333      	movs	r3, #51	; 0x33
 800c504:	18fb      	adds	r3, r7, r3
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b0f      	cmp	r3, #15
 800c50a:	d9da      	bls.n	800c4c2 <PayloadEncrypt+0xfe>
        }
        size -= 16;
 800c50c:	220a      	movs	r2, #10
 800c50e:	18bb      	adds	r3, r7, r2
 800c510:	18ba      	adds	r2, r7, r2
 800c512:	8812      	ldrh	r2, [r2, #0]
 800c514:	3a10      	subs	r2, #16
 800c516:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 800c518:	2237      	movs	r2, #55	; 0x37
 800c51a:	18bb      	adds	r3, r7, r2
 800c51c:	18ba      	adds	r2, r7, r2
 800c51e:	7812      	ldrb	r2, [r2, #0]
 800c520:	3210      	adds	r2, #16
 800c522:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 800c524:	230a      	movs	r3, #10
 800c526:	18fb      	adds	r3, r7, r3
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	2b0f      	cmp	r3, #15
 800c52c:	d8aa      	bhi.n	800c484 <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 800c52e:	230a      	movs	r3, #10
 800c530:	18fb      	adds	r3, r7, r3
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d042      	beq.n	800c5be <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 800c538:	2334      	movs	r3, #52	; 0x34
 800c53a:	18fb      	adds	r3, r7, r3
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	2010      	movs	r0, #16
 800c542:	183b      	adds	r3, r7, r0
 800c544:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c546:	2320      	movs	r3, #32
 800c548:	18f9      	adds	r1, r7, r3
 800c54a:	2309      	movs	r3, #9
 800c54c:	18fb      	adds	r3, r7, r3
 800c54e:	781a      	ldrb	r2, [r3, #0]
 800c550:	1838      	adds	r0, r7, r0
 800c552:	000b      	movs	r3, r1
 800c554:	2110      	movs	r1, #16
 800c556:	f7fc fb7d 	bl	8008c54 <SecureElementAesEncrypt>
 800c55a:	1e03      	subs	r3, r0, #0
 800c55c:	d001      	beq.n	800c562 <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c55e:	230c      	movs	r3, #12
 800c560:	e02e      	b.n	800c5c0 <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 800c562:	2332      	movs	r3, #50	; 0x32
 800c564:	18fb      	adds	r3, r7, r3
 800c566:	2200      	movs	r2, #0
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	e01f      	b.n	800c5ac <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c56c:	2037      	movs	r0, #55	; 0x37
 800c56e:	183b      	adds	r3, r7, r0
 800c570:	781a      	ldrb	r2, [r3, #0]
 800c572:	2432      	movs	r4, #50	; 0x32
 800c574:	193b      	adds	r3, r7, r4
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	18d3      	adds	r3, r2, r3
 800c57a:	001a      	movs	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	189b      	adds	r3, r3, r2
 800c580:	7819      	ldrb	r1, [r3, #0]
 800c582:	193b      	adds	r3, r7, r4
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2220      	movs	r2, #32
 800c588:	18ba      	adds	r2, r7, r2
 800c58a:	5cd2      	ldrb	r2, [r2, r3]
 800c58c:	183b      	adds	r3, r7, r0
 800c58e:	7818      	ldrb	r0, [r3, #0]
 800c590:	193b      	adds	r3, r7, r4
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	18c3      	adds	r3, r0, r3
 800c596:	0018      	movs	r0, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	181b      	adds	r3, r3, r0
 800c59c:	404a      	eors	r2, r1
 800c59e:	b2d2      	uxtb	r2, r2
 800c5a0:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 800c5a2:	193b      	adds	r3, r7, r4
 800c5a4:	781a      	ldrb	r2, [r3, #0]
 800c5a6:	193b      	adds	r3, r7, r4
 800c5a8:	3201      	adds	r2, #1
 800c5aa:	701a      	strb	r2, [r3, #0]
 800c5ac:	2332      	movs	r3, #50	; 0x32
 800c5ae:	18fb      	adds	r3, r7, r3
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	220a      	movs	r2, #10
 800c5b6:	18ba      	adds	r2, r7, r2
 800c5b8:	8812      	ldrh	r2, [r2, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d8d6      	bhi.n	800c56c <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	0018      	movs	r0, r3
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	b00f      	add	sp, #60	; 0x3c
 800c5c6:	bd90      	pop	{r4, r7, pc}

0800c5c8 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b08d      	sub	sp, #52	; 0x34
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	0004      	movs	r4, r0
 800c5d0:	6039      	str	r1, [r7, #0]
 800c5d2:	0010      	movs	r0, r2
 800c5d4:	0019      	movs	r1, r3
 800c5d6:	1dbb      	adds	r3, r7, #6
 800c5d8:	1c22      	adds	r2, r4, #0
 800c5da:	801a      	strh	r2, [r3, #0]
 800c5dc:	1d7b      	adds	r3, r7, #5
 800c5de:	1c02      	adds	r2, r0, #0
 800c5e0:	701a      	strb	r2, [r3, #0]
 800c5e2:	1d3b      	adds	r3, r7, #4
 800c5e4:	1c0a      	adds	r2, r1, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800c5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c5ee:	2307      	movs	r3, #7
 800c5f0:	e09b      	b.n	800c72a <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 800c5f2:	232e      	movs	r3, #46	; 0x2e
 800c5f4:	18fb      	adds	r3, r7, r3
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800c5fa:	231c      	movs	r3, #28
 800c5fc:	18fb      	adds	r3, r7, r3
 800c5fe:	0018      	movs	r0, r3
 800c600:	2310      	movs	r3, #16
 800c602:	001a      	movs	r2, r3
 800c604:	2100      	movs	r1, #0
 800c606:	f00d fccb 	bl	8019fa0 <memset>
    uint8_t aBlock[16] = { 0 };
 800c60a:	240c      	movs	r4, #12
 800c60c:	193b      	adds	r3, r7, r4
 800c60e:	0018      	movs	r0, r3
 800c610:	2310      	movs	r3, #16
 800c612:	001a      	movs	r2, r3
 800c614:	2100      	movs	r1, #0
 800c616:	f00d fcc3 	bl	8019fa0 <memset>

    aBlock[0] = 0x01;
 800c61a:	193b      	adds	r3, r7, r4
 800c61c:	2201      	movs	r2, #1
 800c61e:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 800c620:	1d3b      	adds	r3, r7, #4
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d008      	beq.n	800c63a <FOptsEncrypt+0x72>
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d00b      	beq.n	800c644 <FOptsEncrypt+0x7c>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10e      	bne.n	800c64e <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 800c630:	230c      	movs	r3, #12
 800c632:	18fb      	adds	r3, r7, r3
 800c634:	2201      	movs	r2, #1
 800c636:	711a      	strb	r2, [r3, #4]
            break;
 800c638:	e00b      	b.n	800c652 <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 800c63a:	230c      	movs	r3, #12
 800c63c:	18fb      	adds	r3, r7, r3
 800c63e:	2201      	movs	r2, #1
 800c640:	711a      	strb	r2, [r3, #4]
            break;
 800c642:	e006      	b.n	800c652 <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 800c644:	230c      	movs	r3, #12
 800c646:	18fb      	adds	r3, r7, r3
 800c648:	2202      	movs	r2, #2
 800c64a:	711a      	strb	r2, [r3, #4]
            break;
 800c64c:	e001      	b.n	800c652 <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 800c64e:	2306      	movs	r3, #6
 800c650:	e06b      	b.n	800c72a <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 800c652:	210c      	movs	r1, #12
 800c654:	187b      	adds	r3, r7, r1
 800c656:	1d7a      	adds	r2, r7, #5
 800c658:	7812      	ldrb	r2, [r2, #0]
 800c65a:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	187b      	adds	r3, r7, r1
 800c662:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	0a1b      	lsrs	r3, r3, #8
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	187b      	adds	r3, r7, r1
 800c66c:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	0c1b      	lsrs	r3, r3, #16
 800c672:	b2da      	uxtb	r2, r3
 800c674:	187b      	adds	r3, r7, r1
 800c676:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	0e1b      	lsrs	r3, r3, #24
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	187b      	adds	r3, r7, r1
 800c680:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800c682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c684:	b2da      	uxtb	r2, r3
 800c686:	187b      	adds	r3, r7, r1
 800c688:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c68c:	0a1b      	lsrs	r3, r3, #8
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	187b      	adds	r3, r7, r1
 800c692:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c696:	0c1b      	lsrs	r3, r3, #16
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	187b      	adds	r3, r7, r1
 800c69c:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6a0:	0e1b      	lsrs	r3, r3, #24
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	187b      	adds	r3, r7, r1
 800c6a6:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 800c6a8:	187b      	adds	r3, r7, r1
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 800c6ae:	1dbb      	adds	r3, r7, #6
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d038      	beq.n	800c728 <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c6b6:	231c      	movs	r3, #28
 800c6b8:	18fb      	adds	r3, r7, r3
 800c6ba:	220c      	movs	r2, #12
 800c6bc:	18b8      	adds	r0, r7, r2
 800c6be:	2206      	movs	r2, #6
 800c6c0:	2110      	movs	r1, #16
 800c6c2:	f7fc fac7 	bl	8008c54 <SecureElementAesEncrypt>
 800c6c6:	1e03      	subs	r3, r0, #0
 800c6c8:	d001      	beq.n	800c6ce <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	e02d      	b.n	800c72a <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 800c6ce:	232f      	movs	r3, #47	; 0x2f
 800c6d0:	18fb      	adds	r3, r7, r3
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	e01f      	b.n	800c718 <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c6d8:	202e      	movs	r0, #46	; 0x2e
 800c6da:	183b      	adds	r3, r7, r0
 800c6dc:	781a      	ldrb	r2, [r3, #0]
 800c6de:	242f      	movs	r4, #47	; 0x2f
 800c6e0:	193b      	adds	r3, r7, r4
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	18d3      	adds	r3, r2, r3
 800c6e6:	001a      	movs	r2, r3
 800c6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ea:	189b      	adds	r3, r3, r2
 800c6ec:	7819      	ldrb	r1, [r3, #0]
 800c6ee:	193b      	adds	r3, r7, r4
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	221c      	movs	r2, #28
 800c6f4:	18ba      	adds	r2, r7, r2
 800c6f6:	5cd2      	ldrb	r2, [r2, r3]
 800c6f8:	183b      	adds	r3, r7, r0
 800c6fa:	7818      	ldrb	r0, [r3, #0]
 800c6fc:	193b      	adds	r3, r7, r4
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	18c3      	adds	r3, r0, r3
 800c702:	0018      	movs	r0, r3
 800c704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c706:	181b      	adds	r3, r3, r0
 800c708:	404a      	eors	r2, r1
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 800c70e:	193b      	adds	r3, r7, r4
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	193b      	adds	r3, r7, r4
 800c714:	3201      	adds	r2, #1
 800c716:	701a      	strb	r2, [r3, #0]
 800c718:	232f      	movs	r3, #47	; 0x2f
 800c71a:	18fb      	adds	r3, r7, r3
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	1dba      	adds	r2, r7, #6
 800c722:	8812      	ldrh	r2, [r2, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d8d7      	bhi.n	800c6d8 <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	0018      	movs	r0, r3
 800c72c:	46bd      	mov	sp, r7
 800c72e:	b00d      	add	sp, #52	; 0x34
 800c730:	bd90      	pop	{r4, r7, pc}

0800c732 <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c732:	b5b0      	push	{r4, r5, r7, lr}
 800c734:	b084      	sub	sp, #16
 800c736:	af00      	add	r7, sp, #0
 800c738:	60f8      	str	r0, [r7, #12]
 800c73a:	0008      	movs	r0, r1
 800c73c:	0011      	movs	r1, r2
 800c73e:	607b      	str	r3, [r7, #4]
 800c740:	250a      	movs	r5, #10
 800c742:	197b      	adds	r3, r7, r5
 800c744:	1c02      	adds	r2, r0, #0
 800c746:	801a      	strh	r2, [r3, #0]
 800c748:	2009      	movs	r0, #9
 800c74a:	183b      	adds	r3, r7, r0
 800c74c:	1c0a      	adds	r2, r1, #0
 800c74e:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c750:	687c      	ldr	r4, [r7, #4]
 800c752:	183b      	adds	r3, r7, r0
 800c754:	781a      	ldrb	r2, [r3, #0]
 800c756:	197b      	adds	r3, r7, r5
 800c758:	8819      	ldrh	r1, [r3, #0]
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	0023      	movs	r3, r4
 800c75e:	f7fc fa13 	bl	8008b88 <SecureElementComputeAesCmac>
 800c762:	1e03      	subs	r3, r0, #0
 800c764:	d001      	beq.n	800c76a <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c766:	230c      	movs	r3, #12
 800c768:	e000      	b.n	800c76c <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	0018      	movs	r0, r3
 800c76e:	46bd      	mov	sp, r7
 800c770:	b004      	add	sp, #16
 800c772:	bdb0      	pop	{r4, r5, r7, pc}

0800c774 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 800c774:	b5b0      	push	{r4, r5, r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	0008      	movs	r0, r1
 800c77e:	0011      	movs	r1, r2
 800c780:	607b      	str	r3, [r7, #4]
 800c782:	250a      	movs	r5, #10
 800c784:	197b      	adds	r3, r7, r5
 800c786:	1c02      	adds	r2, r0, #0
 800c788:	801a      	strh	r2, [r3, #0]
 800c78a:	2009      	movs	r0, #9
 800c78c:	183b      	adds	r3, r7, r0
 800c78e:	1c0a      	adds	r2, r1, #0
 800c790:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c792:	183b      	adds	r3, r7, r0
 800c794:	781c      	ldrb	r4, [r3, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	197b      	adds	r3, r7, r5
 800c79a:	8819      	ldrh	r1, [r3, #0]
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	0023      	movs	r3, r4
 800c7a0:	f7fc fa17 	bl	8008bd2 <SecureElementVerifyAesCmac>
 800c7a4:	1e03      	subs	r3, r0, #0
 800c7a6:	d001      	beq.n	800c7ac <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c7a8:	230c      	movs	r3, #12
 800c7aa:	e000      	b.n	800c7ae <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	b004      	add	sp, #16
 800c7b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c7b8 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800c7b8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	0005      	movs	r5, r0
 800c7c0:	000c      	movs	r4, r1
 800c7c2:	0010      	movs	r0, r2
 800c7c4:	0019      	movs	r1, r3
 800c7c6:	1dbb      	adds	r3, r7, #6
 800c7c8:	1c2a      	adds	r2, r5, #0
 800c7ca:	801a      	strh	r2, [r3, #0]
 800c7cc:	1d7b      	adds	r3, r7, #5
 800c7ce:	1c22      	adds	r2, r4, #0
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	1d3b      	adds	r3, r7, #4
 800c7d4:	1c02      	adds	r2, r0, #0
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	1cfb      	adds	r3, r7, #3
 800c7da:	1c0a      	adds	r2, r1, #0
 800c7dc:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 800c7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c7e4:	2307      	movs	r3, #7
 800c7e6:	e079      	b.n	800c8dc <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	2249      	movs	r2, #73	; 0x49
 800c7ec:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 800c7ee:	1d3b      	adds	r3, r7, #4
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d024      	beq.n	800c840 <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 800c7f6:	230e      	movs	r3, #14
 800c7f8:	18fb      	adds	r3, r7, r3
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 800c7fe:	1cfb      	adds	r3, r7, #3
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d106      	bne.n	800c814 <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 800c806:	4b37      	ldr	r3, [pc, #220]	; (800c8e4 <PrepareB0+0x12c>)
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	695a      	ldr	r2, [r3, #20]
 800c80c:	230e      	movs	r3, #14
 800c80e:	18fb      	adds	r3, r7, r3
 800c810:	801a      	strh	r2, [r3, #0]
 800c812:	e005      	b.n	800c820 <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 800c814:	4b33      	ldr	r3, [pc, #204]	; (800c8e4 <PrepareB0+0x12c>)
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	230e      	movs	r3, #14
 800c81c:	18fb      	adds	r3, r7, r3
 800c81e:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	3301      	adds	r3, #1
 800c824:	210e      	movs	r1, #14
 800c826:	187a      	adds	r2, r7, r1
 800c828:	8812      	ldrh	r2, [r2, #0]
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800c82e:	187b      	adds	r3, r7, r1
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	0a1b      	lsrs	r3, r3, #8
 800c834:	b29a      	uxth	r2, r3
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	3302      	adds	r3, #2
 800c83a:	b2d2      	uxtb	r2, r2
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	e007      	b.n	800c850 <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	3301      	adds	r3, #1
 800c844:	2200      	movs	r2, #0
 800c846:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	3302      	adds	r3, #2
 800c84c:	2200      	movs	r2, #0
 800c84e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c852:	3303      	adds	r3, #3
 800c854:	2200      	movs	r2, #0
 800c856:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	3304      	adds	r3, #4
 800c85c:	2200      	movs	r2, #0
 800c85e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	3305      	adds	r3, #5
 800c864:	1cfa      	adds	r2, r7, #3
 800c866:	7812      	ldrb	r2, [r2, #0]
 800c868:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	3306      	adds	r3, #6
 800c86e:	6a3a      	ldr	r2, [r7, #32]
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	0a1a      	lsrs	r2, r3, #8
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	3307      	adds	r3, #7
 800c87c:	b2d2      	uxtb	r2, r2
 800c87e:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	0c1a      	lsrs	r2, r3, #16
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	3308      	adds	r3, #8
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	0e1a      	lsrs	r2, r3, #24
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	3309      	adds	r3, #9
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800c898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89a:	330a      	adds	r3, #10
 800c89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	0a1a      	lsrs	r2, r3, #8
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	330b      	adds	r3, #11
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	0c1a      	lsrs	r2, r3, #16
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	330c      	adds	r3, #12
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	0e1a      	lsrs	r2, r3, #24
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	330d      	adds	r3, #13
 800c8c2:	b2d2      	uxtb	r2, r2
 800c8c4:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	330e      	adds	r3, #14
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	330f      	adds	r3, #15
 800c8d2:	1dba      	adds	r2, r7, #6
 800c8d4:	8812      	ldrh	r2, [r2, #0]
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	0018      	movs	r0, r3
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	b004      	add	sp, #16
 800c8e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8e4:	20000a28 	.word	0x20000a28

0800c8e8 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800c8e8:	b5b0      	push	{r4, r5, r7, lr}
 800c8ea:	b0ca      	sub	sp, #296	; 0x128
 800c8ec:	af04      	add	r7, sp, #16
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	000c      	movs	r4, r1
 800c8f2:	0010      	movs	r0, r2
 800c8f4:	0019      	movs	r1, r3
 800c8f6:	4b47      	ldr	r3, [pc, #284]	; (800ca14 <ComputeCmacB0+0x12c>)
 800c8f8:	228c      	movs	r2, #140	; 0x8c
 800c8fa:	0052      	lsls	r2, r2, #1
 800c8fc:	4694      	mov	ip, r2
 800c8fe:	44bc      	add	ip, r7
 800c900:	4463      	add	r3, ip
 800c902:	1c22      	adds	r2, r4, #0
 800c904:	801a      	strh	r2, [r3, #0]
 800c906:	4b44      	ldr	r3, [pc, #272]	; (800ca18 <ComputeCmacB0+0x130>)
 800c908:	228c      	movs	r2, #140	; 0x8c
 800c90a:	0052      	lsls	r2, r2, #1
 800c90c:	4694      	mov	ip, r2
 800c90e:	44bc      	add	ip, r7
 800c910:	4463      	add	r3, ip
 800c912:	1c02      	adds	r2, r0, #0
 800c914:	701a      	strb	r2, [r3, #0]
 800c916:	4b41      	ldr	r3, [pc, #260]	; (800ca1c <ComputeCmacB0+0x134>)
 800c918:	228c      	movs	r2, #140	; 0x8c
 800c91a:	0052      	lsls	r2, r2, #1
 800c91c:	4694      	mov	ip, r2
 800c91e:	44bc      	add	ip, r7
 800c920:	4463      	add	r3, ip
 800c922:	1c0a      	adds	r2, r1, #0
 800c924:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d005      	beq.n	800c938 <ComputeCmacB0+0x50>
 800c92c:	239a      	movs	r3, #154	; 0x9a
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	18fb      	adds	r3, r7, r3
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c938:	2307      	movs	r3, #7
 800c93a:	e066      	b.n	800ca0a <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c93c:	4b35      	ldr	r3, [pc, #212]	; (800ca14 <ComputeCmacB0+0x12c>)
 800c93e:	228c      	movs	r2, #140	; 0x8c
 800c940:	0052      	lsls	r2, r2, #1
 800c942:	4694      	mov	ip, r2
 800c944:	44bc      	add	ip, r7
 800c946:	4463      	add	r3, ip
 800c948:	881a      	ldrh	r2, [r3, #0]
 800c94a:	2380      	movs	r3, #128	; 0x80
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	429a      	cmp	r2, r3
 800c950:	d901      	bls.n	800c956 <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c952:	230b      	movs	r3, #11
 800c954:	e059      	b.n	800ca0a <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c956:	2388      	movs	r3, #136	; 0x88
 800c958:	005a      	lsls	r2, r3, #1
 800c95a:	2508      	movs	r5, #8
 800c95c:	197b      	adds	r3, r7, r5
 800c95e:	2100      	movs	r1, #0
 800c960:	0018      	movs	r0, r3
 800c962:	f004 fa91 	bl	8010e88 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c966:	2394      	movs	r3, #148	; 0x94
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	18fb      	adds	r3, r7, r3
 800c96c:	781c      	ldrb	r4, [r3, #0]
 800c96e:	4b2b      	ldr	r3, [pc, #172]	; (800ca1c <ComputeCmacB0+0x134>)
 800c970:	228c      	movs	r2, #140	; 0x8c
 800c972:	0052      	lsls	r2, r2, #1
 800c974:	4694      	mov	ip, r2
 800c976:	44bc      	add	ip, r7
 800c978:	4463      	add	r3, ip
 800c97a:	781a      	ldrb	r2, [r3, #0]
 800c97c:	4b26      	ldr	r3, [pc, #152]	; (800ca18 <ComputeCmacB0+0x130>)
 800c97e:	218c      	movs	r1, #140	; 0x8c
 800c980:	0049      	lsls	r1, r1, #1
 800c982:	468c      	mov	ip, r1
 800c984:	44bc      	add	ip, r7
 800c986:	4463      	add	r3, ip
 800c988:	7819      	ldrb	r1, [r3, #0]
 800c98a:	4b22      	ldr	r3, [pc, #136]	; (800ca14 <ComputeCmacB0+0x12c>)
 800c98c:	208c      	movs	r0, #140	; 0x8c
 800c98e:	0040      	lsls	r0, r0, #1
 800c990:	4684      	mov	ip, r0
 800c992:	44bc      	add	ip, r7
 800c994:	4463      	add	r3, ip
 800c996:	8818      	ldrh	r0, [r3, #0]
 800c998:	197b      	adds	r3, r7, r5
 800c99a:	9302      	str	r3, [sp, #8]
 800c99c:	2398      	movs	r3, #152	; 0x98
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	18fb      	adds	r3, r7, r3
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	2396      	movs	r3, #150	; 0x96
 800c9a8:	005b      	lsls	r3, r3, #1
 800c9aa:	18fb      	adds	r3, r7, r3
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	0023      	movs	r3, r4
 800c9b2:	f7ff ff01 	bl	800c7b8 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c9b6:	197b      	adds	r3, r7, r5
 800c9b8:	3310      	adds	r3, #16
 800c9ba:	4a16      	ldr	r2, [pc, #88]	; (800ca14 <ComputeCmacB0+0x12c>)
 800c9bc:	218c      	movs	r1, #140	; 0x8c
 800c9be:	0049      	lsls	r1, r1, #1
 800c9c0:	468c      	mov	ip, r1
 800c9c2:	44bc      	add	ip, r7
 800c9c4:	4462      	add	r2, ip
 800c9c6:	8812      	ldrh	r2, [r2, #0]
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	0018      	movs	r0, r3
 800c9cc:	f004 fa20 	bl	8010e10 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c9d0:	4b10      	ldr	r3, [pc, #64]	; (800ca14 <ComputeCmacB0+0x12c>)
 800c9d2:	228c      	movs	r2, #140	; 0x8c
 800c9d4:	0052      	lsls	r2, r2, #1
 800c9d6:	4694      	mov	ip, r2
 800c9d8:	44bc      	add	ip, r7
 800c9da:	4463      	add	r3, ip
 800c9dc:	881b      	ldrh	r3, [r3, #0]
 800c9de:	3310      	adds	r3, #16
 800c9e0:	b299      	uxth	r1, r3
 800c9e2:	239a      	movs	r3, #154	; 0x9a
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	18fb      	adds	r3, r7, r3
 800c9e8:	681c      	ldr	r4, [r3, #0]
 800c9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <ComputeCmacB0+0x130>)
 800c9ec:	228c      	movs	r2, #140	; 0x8c
 800c9ee:	0052      	lsls	r2, r2, #1
 800c9f0:	4694      	mov	ip, r2
 800c9f2:	44bc      	add	ip, r7
 800c9f4:	4463      	add	r3, ip
 800c9f6:	781a      	ldrb	r2, [r3, #0]
 800c9f8:	1978      	adds	r0, r7, r5
 800c9fa:	0023      	movs	r3, r4
 800c9fc:	f7fc f8c4 	bl	8008b88 <SecureElementComputeAesCmac>
 800ca00:	1e03      	subs	r3, r0, #0
 800ca02:	d001      	beq.n	800ca08 <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca04:	230c      	movs	r3, #12
 800ca06:	e000      	b.n	800ca0a <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	b046      	add	sp, #280	; 0x118
 800ca10:	bdb0      	pop	{r4, r5, r7, pc}
 800ca12:	46c0      	nop			; (mov r8, r8)
 800ca14:	fffffeea 	.word	0xfffffeea
 800ca18:	fffffee9 	.word	0xfffffee9
 800ca1c:	fffffee8 	.word	0xfffffee8

0800ca20 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800ca20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca22:	b0cd      	sub	sp, #308	; 0x134
 800ca24:	af04      	add	r7, sp, #16
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	000c      	movs	r4, r1
 800ca2a:	0010      	movs	r0, r2
 800ca2c:	0019      	movs	r1, r3
 800ca2e:	4b52      	ldr	r3, [pc, #328]	; (800cb78 <VerifyCmacB0+0x158>)
 800ca30:	2290      	movs	r2, #144	; 0x90
 800ca32:	0052      	lsls	r2, r2, #1
 800ca34:	4694      	mov	ip, r2
 800ca36:	44bc      	add	ip, r7
 800ca38:	4463      	add	r3, ip
 800ca3a:	1c22      	adds	r2, r4, #0
 800ca3c:	801a      	strh	r2, [r3, #0]
 800ca3e:	4b4f      	ldr	r3, [pc, #316]	; (800cb7c <VerifyCmacB0+0x15c>)
 800ca40:	2290      	movs	r2, #144	; 0x90
 800ca42:	0052      	lsls	r2, r2, #1
 800ca44:	4694      	mov	ip, r2
 800ca46:	44bc      	add	ip, r7
 800ca48:	4463      	add	r3, ip
 800ca4a:	1c02      	adds	r2, r0, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	4b4c      	ldr	r3, [pc, #304]	; (800cb80 <VerifyCmacB0+0x160>)
 800ca50:	2290      	movs	r2, #144	; 0x90
 800ca52:	0052      	lsls	r2, r2, #1
 800ca54:	4694      	mov	ip, r2
 800ca56:	44bc      	add	ip, r7
 800ca58:	4463      	add	r3, ip
 800ca5a:	1c0a      	adds	r2, r1, #0
 800ca5c:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca64:	2307      	movs	r3, #7
 800ca66:	e083      	b.n	800cb70 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ca68:	4b43      	ldr	r3, [pc, #268]	; (800cb78 <VerifyCmacB0+0x158>)
 800ca6a:	2290      	movs	r2, #144	; 0x90
 800ca6c:	0052      	lsls	r2, r2, #1
 800ca6e:	4694      	mov	ip, r2
 800ca70:	44bc      	add	ip, r7
 800ca72:	4463      	add	r3, ip
 800ca74:	881a      	ldrh	r2, [r3, #0]
 800ca76:	2380      	movs	r3, #128	; 0x80
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d901      	bls.n	800ca82 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ca7e:	230b      	movs	r3, #11
 800ca80:	e076      	b.n	800cb70 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ca82:	2388      	movs	r3, #136	; 0x88
 800ca84:	005a      	lsls	r2, r3, #1
 800ca86:	250c      	movs	r5, #12
 800ca88:	197b      	adds	r3, r7, r5
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	0018      	movs	r0, r3
 800ca8e:	f004 f9fb 	bl	8010e88 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ca92:	2398      	movs	r3, #152	; 0x98
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	2208      	movs	r2, #8
 800ca98:	4694      	mov	ip, r2
 800ca9a:	44bc      	add	ip, r7
 800ca9c:	4463      	add	r3, ip
 800ca9e:	781c      	ldrb	r4, [r3, #0]
 800caa0:	4b37      	ldr	r3, [pc, #220]	; (800cb80 <VerifyCmacB0+0x160>)
 800caa2:	2290      	movs	r2, #144	; 0x90
 800caa4:	0052      	lsls	r2, r2, #1
 800caa6:	4694      	mov	ip, r2
 800caa8:	44bc      	add	ip, r7
 800caaa:	4463      	add	r3, ip
 800caac:	781a      	ldrb	r2, [r3, #0]
 800caae:	4b33      	ldr	r3, [pc, #204]	; (800cb7c <VerifyCmacB0+0x15c>)
 800cab0:	2190      	movs	r1, #144	; 0x90
 800cab2:	0049      	lsls	r1, r1, #1
 800cab4:	468c      	mov	ip, r1
 800cab6:	44bc      	add	ip, r7
 800cab8:	4463      	add	r3, ip
 800caba:	7819      	ldrb	r1, [r3, #0]
 800cabc:	4b2e      	ldr	r3, [pc, #184]	; (800cb78 <VerifyCmacB0+0x158>)
 800cabe:	2090      	movs	r0, #144	; 0x90
 800cac0:	0040      	lsls	r0, r0, #1
 800cac2:	4684      	mov	ip, r0
 800cac4:	44bc      	add	ip, r7
 800cac6:	4463      	add	r3, ip
 800cac8:	8818      	ldrh	r0, [r3, #0]
 800caca:	197b      	adds	r3, r7, r5
 800cacc:	9302      	str	r3, [sp, #8]
 800cace:	239c      	movs	r3, #156	; 0x9c
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	2608      	movs	r6, #8
 800cad4:	46b4      	mov	ip, r6
 800cad6:	44bc      	add	ip, r7
 800cad8:	4463      	add	r3, ip
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	239a      	movs	r3, #154	; 0x9a
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	2608      	movs	r6, #8
 800cae4:	46b4      	mov	ip, r6
 800cae6:	44bc      	add	ip, r7
 800cae8:	4463      	add	r3, ip
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	0023      	movs	r3, r4
 800caf0:	f7ff fe62 	bl	800c7b8 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800caf4:	197b      	adds	r3, r7, r5
 800caf6:	3310      	adds	r3, #16
 800caf8:	4a1f      	ldr	r2, [pc, #124]	; (800cb78 <VerifyCmacB0+0x158>)
 800cafa:	2190      	movs	r1, #144	; 0x90
 800cafc:	0049      	lsls	r1, r1, #1
 800cafe:	468c      	mov	ip, r1
 800cb00:	44bc      	add	ip, r7
 800cb02:	4462      	add	r2, ip
 800cb04:	8812      	ldrh	r2, [r2, #0]
 800cb06:	6879      	ldr	r1, [r7, #4]
 800cb08:	0018      	movs	r0, r3
 800cb0a:	f004 f981 	bl	8010e10 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cb0e:	2620      	movs	r6, #32
 800cb10:	36ff      	adds	r6, #255	; 0xff
 800cb12:	19bb      	adds	r3, r7, r6
 800cb14:	2206      	movs	r2, #6
 800cb16:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800cb18:	4b17      	ldr	r3, [pc, #92]	; (800cb78 <VerifyCmacB0+0x158>)
 800cb1a:	2290      	movs	r2, #144	; 0x90
 800cb1c:	0052      	lsls	r2, r2, #1
 800cb1e:	4694      	mov	ip, r2
 800cb20:	44bc      	add	ip, r7
 800cb22:	4463      	add	r3, ip
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	3310      	adds	r3, #16
 800cb28:	b299      	uxth	r1, r3
 800cb2a:	19bc      	adds	r4, r7, r6
 800cb2c:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <VerifyCmacB0+0x15c>)
 800cb2e:	2290      	movs	r2, #144	; 0x90
 800cb30:	0052      	lsls	r2, r2, #1
 800cb32:	4694      	mov	ip, r2
 800cb34:	44bc      	add	ip, r7
 800cb36:	4463      	add	r3, ip
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	229e      	movs	r2, #158	; 0x9e
 800cb3c:	0052      	lsls	r2, r2, #1
 800cb3e:	2008      	movs	r0, #8
 800cb40:	4684      	mov	ip, r0
 800cb42:	44bc      	add	ip, r7
 800cb44:	4462      	add	r2, ip
 800cb46:	6812      	ldr	r2, [r2, #0]
 800cb48:	1978      	adds	r0, r7, r5
 800cb4a:	f7fc f842 	bl	8008bd2 <SecureElementVerifyAesCmac>
 800cb4e:	0003      	movs	r3, r0
 800cb50:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cb52:	19bb      	adds	r3, r7, r6
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e008      	b.n	800cb70 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800cb5e:	2320      	movs	r3, #32
 800cb60:	33ff      	adds	r3, #255	; 0xff
 800cb62:	18fb      	adds	r3, r7, r3
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d101      	bne.n	800cb6e <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e000      	b.n	800cb70 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cb6e:	230c      	movs	r3, #12
}
 800cb70:	0018      	movs	r0, r3
 800cb72:	46bd      	mov	sp, r7
 800cb74:	b049      	add	sp, #292	; 0x124
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb78:	fffffee2 	.word	0xfffffee2
 800cb7c:	fffffee1 	.word	0xfffffee1
 800cb80:	fffffee0 	.word	0xfffffee0

0800cb84 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 800cb84:	b5b0      	push	{r4, r5, r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	0005      	movs	r5, r0
 800cb8c:	000c      	movs	r4, r1
 800cb8e:	0010      	movs	r0, r2
 800cb90:	0019      	movs	r1, r3
 800cb92:	1dbb      	adds	r3, r7, #6
 800cb94:	1c2a      	adds	r2, r5, #0
 800cb96:	801a      	strh	r2, [r3, #0]
 800cb98:	1d7b      	adds	r3, r7, #5
 800cb9a:	1c22      	adds	r2, r4, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	1d3b      	adds	r3, r7, #4
 800cba0:	1c02      	adds	r2, r0, #0
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	1cfb      	adds	r3, r7, #3
 800cba6:	1c0a      	adds	r2, r1, #0
 800cba8:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cbb0:	2307      	movs	r3, #7
 800cbb2:	e06c      	b.n	800cc8e <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	2249      	movs	r2, #73	; 0x49
 800cbb8:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 800cbba:	1d3b      	adds	r3, r7, #4
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d015      	beq.n	800cbee <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 800cbc2:	4b35      	ldr	r3, [pc, #212]	; (800cc98 <PrepareB1+0x114>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	210e      	movs	r1, #14
 800cbcc:	187b      	adds	r3, r7, r1
 800cbce:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 800cbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	187a      	adds	r2, r7, r1
 800cbd6:	8812      	ldrh	r2, [r2, #0]
 800cbd8:	b2d2      	uxtb	r2, r2
 800cbda:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 800cbdc:	187b      	adds	r3, r7, r1
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	0a1b      	lsrs	r3, r3, #8
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	3302      	adds	r3, #2
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	e007      	b.n	800cbfe <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	3302      	adds	r3, #2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	3303      	adds	r3, #3
 800cc02:	1cfa      	adds	r2, r7, #3
 800cc04:	7812      	ldrb	r2, [r2, #0]
 800cc06:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	18ba      	adds	r2, r7, r2
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	3305      	adds	r3, #5
 800cc18:	2200      	movs	r2, #0
 800cc1a:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	3306      	adds	r3, #6
 800cc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	0a1a      	lsrs	r2, r3, #8
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	3307      	adds	r3, #7
 800cc2e:	b2d2      	uxtb	r2, r2
 800cc30:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	0c1a      	lsrs	r2, r3, #16
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	3308      	adds	r3, #8
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	0e1a      	lsrs	r2, r3, #24
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	3309      	adds	r3, #9
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	330a      	adds	r3, #10
 800cc4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc50:	b2d2      	uxtb	r2, r2
 800cc52:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	0a1a      	lsrs	r2, r3, #8
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	330b      	adds	r3, #11
 800cc5c:	b2d2      	uxtb	r2, r2
 800cc5e:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	0c1a      	lsrs	r2, r3, #16
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	330c      	adds	r3, #12
 800cc68:	b2d2      	uxtb	r2, r2
 800cc6a:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	0e1a      	lsrs	r2, r3, #24
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	330d      	adds	r3, #13
 800cc74:	b2d2      	uxtb	r2, r2
 800cc76:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	330e      	adds	r3, #14
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 800cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc82:	330f      	adds	r3, #15
 800cc84:	1dba      	adds	r2, r7, #6
 800cc86:	8812      	ldrh	r2, [r2, #0]
 800cc88:	b2d2      	uxtb	r2, r2
 800cc8a:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	0018      	movs	r0, r3
 800cc90:	46bd      	mov	sp, r7
 800cc92:	b004      	add	sp, #16
 800cc94:	bdb0      	pop	{r4, r5, r7, pc}
 800cc96:	46c0      	nop			; (mov r8, r8)
 800cc98:	20000a28 	.word	0x20000a28

0800cc9c <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 800cc9c:	b5b0      	push	{r4, r5, r7, lr}
 800cc9e:	b0ca      	sub	sp, #296	; 0x128
 800cca0:	af04      	add	r7, sp, #16
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	000c      	movs	r4, r1
 800cca6:	0010      	movs	r0, r2
 800cca8:	0019      	movs	r1, r3
 800ccaa:	4b49      	ldr	r3, [pc, #292]	; (800cdd0 <ComputeCmacB1+0x134>)
 800ccac:	228c      	movs	r2, #140	; 0x8c
 800ccae:	0052      	lsls	r2, r2, #1
 800ccb0:	4694      	mov	ip, r2
 800ccb2:	44bc      	add	ip, r7
 800ccb4:	4463      	add	r3, ip
 800ccb6:	1c22      	adds	r2, r4, #0
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	4b46      	ldr	r3, [pc, #280]	; (800cdd4 <ComputeCmacB1+0x138>)
 800ccbc:	228c      	movs	r2, #140	; 0x8c
 800ccbe:	0052      	lsls	r2, r2, #1
 800ccc0:	4694      	mov	ip, r2
 800ccc2:	44bc      	add	ip, r7
 800ccc4:	4463      	add	r3, ip
 800ccc6:	1c02      	adds	r2, r0, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	4b43      	ldr	r3, [pc, #268]	; (800cdd8 <ComputeCmacB1+0x13c>)
 800cccc:	228c      	movs	r2, #140	; 0x8c
 800ccce:	0052      	lsls	r2, r2, #1
 800ccd0:	4694      	mov	ip, r2
 800ccd2:	44bc      	add	ip, r7
 800ccd4:	4463      	add	r3, ip
 800ccd6:	1c0a      	adds	r2, r1, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d005      	beq.n	800ccec <ComputeCmacB1+0x50>
 800cce0:	239c      	movs	r3, #156	; 0x9c
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	18fb      	adds	r3, r7, r3
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ccec:	2307      	movs	r3, #7
 800ccee:	e06b      	b.n	800cdc8 <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ccf0:	4b37      	ldr	r3, [pc, #220]	; (800cdd0 <ComputeCmacB1+0x134>)
 800ccf2:	228c      	movs	r2, #140	; 0x8c
 800ccf4:	0052      	lsls	r2, r2, #1
 800ccf6:	4694      	mov	ip, r2
 800ccf8:	44bc      	add	ip, r7
 800ccfa:	4463      	add	r3, ip
 800ccfc:	881a      	ldrh	r2, [r3, #0]
 800ccfe:	2380      	movs	r3, #128	; 0x80
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d901      	bls.n	800cd0a <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cd06:	230b      	movs	r3, #11
 800cd08:	e05e      	b.n	800cdc8 <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800cd0a:	2388      	movs	r3, #136	; 0x88
 800cd0c:	005a      	lsls	r2, r3, #1
 800cd0e:	2508      	movs	r5, #8
 800cd10:	197b      	adds	r3, r7, r5
 800cd12:	2100      	movs	r1, #0
 800cd14:	0018      	movs	r0, r3
 800cd16:	f004 f8b7 	bl	8010e88 <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 800cd1a:	2394      	movs	r3, #148	; 0x94
 800cd1c:	005b      	lsls	r3, r3, #1
 800cd1e:	18fb      	adds	r3, r7, r3
 800cd20:	781c      	ldrb	r4, [r3, #0]
 800cd22:	4b2d      	ldr	r3, [pc, #180]	; (800cdd8 <ComputeCmacB1+0x13c>)
 800cd24:	228c      	movs	r2, #140	; 0x8c
 800cd26:	0052      	lsls	r2, r2, #1
 800cd28:	4694      	mov	ip, r2
 800cd2a:	44bc      	add	ip, r7
 800cd2c:	4463      	add	r3, ip
 800cd2e:	781a      	ldrb	r2, [r3, #0]
 800cd30:	4b28      	ldr	r3, [pc, #160]	; (800cdd4 <ComputeCmacB1+0x138>)
 800cd32:	218c      	movs	r1, #140	; 0x8c
 800cd34:	0049      	lsls	r1, r1, #1
 800cd36:	468c      	mov	ip, r1
 800cd38:	44bc      	add	ip, r7
 800cd3a:	4463      	add	r3, ip
 800cd3c:	7819      	ldrb	r1, [r3, #0]
 800cd3e:	4b24      	ldr	r3, [pc, #144]	; (800cdd0 <ComputeCmacB1+0x134>)
 800cd40:	208c      	movs	r0, #140	; 0x8c
 800cd42:	0040      	lsls	r0, r0, #1
 800cd44:	4684      	mov	ip, r0
 800cd46:	44bc      	add	ip, r7
 800cd48:	4463      	add	r3, ip
 800cd4a:	8818      	ldrh	r0, [r3, #0]
 800cd4c:	197b      	adds	r3, r7, r5
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	239a      	movs	r3, #154	; 0x9a
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	18fb      	adds	r3, r7, r3
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	9302      	str	r3, [sp, #8]
 800cd5a:	2398      	movs	r3, #152	; 0x98
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	18fb      	adds	r3, r7, r3
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	2396      	movs	r3, #150	; 0x96
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	18fb      	adds	r3, r7, r3
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	0023      	movs	r3, r4
 800cd70:	f7ff ff08 	bl	800cb84 <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cd74:	197b      	adds	r3, r7, r5
 800cd76:	3310      	adds	r3, #16
 800cd78:	4a15      	ldr	r2, [pc, #84]	; (800cdd0 <ComputeCmacB1+0x134>)
 800cd7a:	218c      	movs	r1, #140	; 0x8c
 800cd7c:	0049      	lsls	r1, r1, #1
 800cd7e:	468c      	mov	ip, r1
 800cd80:	44bc      	add	ip, r7
 800cd82:	4462      	add	r2, ip
 800cd84:	8812      	ldrh	r2, [r2, #0]
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	0018      	movs	r0, r3
 800cd8a:	f004 f841 	bl	8010e10 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800cd8e:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <ComputeCmacB1+0x134>)
 800cd90:	228c      	movs	r2, #140	; 0x8c
 800cd92:	0052      	lsls	r2, r2, #1
 800cd94:	4694      	mov	ip, r2
 800cd96:	44bc      	add	ip, r7
 800cd98:	4463      	add	r3, ip
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	3310      	adds	r3, #16
 800cd9e:	b299      	uxth	r1, r3
 800cda0:	239c      	movs	r3, #156	; 0x9c
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	18fb      	adds	r3, r7, r3
 800cda6:	681c      	ldr	r4, [r3, #0]
 800cda8:	4b0a      	ldr	r3, [pc, #40]	; (800cdd4 <ComputeCmacB1+0x138>)
 800cdaa:	228c      	movs	r2, #140	; 0x8c
 800cdac:	0052      	lsls	r2, r2, #1
 800cdae:	4694      	mov	ip, r2
 800cdb0:	44bc      	add	ip, r7
 800cdb2:	4463      	add	r3, ip
 800cdb4:	781a      	ldrb	r2, [r3, #0]
 800cdb6:	1978      	adds	r0, r7, r5
 800cdb8:	0023      	movs	r3, r4
 800cdba:	f7fb fee5 	bl	8008b88 <SecureElementComputeAesCmac>
 800cdbe:	1e03      	subs	r3, r0, #0
 800cdc0:	d001      	beq.n	800cdc6 <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cdc2:	230c      	movs	r3, #12
 800cdc4:	e000      	b.n	800cdc8 <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	0018      	movs	r0, r3
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	b046      	add	sp, #280	; 0x118
 800cdce:	bdb0      	pop	{r4, r5, r7, pc}
 800cdd0:	fffffeea 	.word	0xfffffeea
 800cdd4:	fffffee9 	.word	0xfffffee9
 800cdd8:	fffffee8 	.word	0xfffffee8

0800cddc <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	0002      	movs	r2, r0
 800cde4:	6039      	str	r1, [r7, #0]
 800cde6:	1dfb      	adds	r3, r7, #7
 800cde8:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800cdea:	230f      	movs	r3, #15
 800cdec:	18fb      	adds	r3, r7, r3
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	e019      	b.n	800ce28 <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800cdf4:	230f      	movs	r3, #15
 800cdf6:	18fb      	adds	r3, r7, r3
 800cdf8:	781a      	ldrb	r2, [r3, #0]
 800cdfa:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <GetKeyAddrItem+0x60>)
 800cdfc:	0092      	lsls	r2, r2, #2
 800cdfe:	5cd3      	ldrb	r3, [r2, r3]
 800ce00:	1dfa      	adds	r2, r7, #7
 800ce02:	7812      	ldrb	r2, [r2, #0]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d109      	bne.n	800ce1c <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 800ce08:	230f      	movs	r3, #15
 800ce0a:	18fb      	adds	r3, r7, r3
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	009a      	lsls	r2, r3, #2
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <GetKeyAddrItem+0x60>)
 800ce12:	18d2      	adds	r2, r2, r3
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e00b      	b.n	800ce34 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800ce1c:	210f      	movs	r1, #15
 800ce1e:	187b      	adds	r3, r7, r1
 800ce20:	781a      	ldrb	r2, [r3, #0]
 800ce22:	187b      	adds	r3, r7, r1
 800ce24:	3201      	adds	r2, #1
 800ce26:	701a      	strb	r2, [r3, #0]
 800ce28:	230f      	movs	r3, #15
 800ce2a:	18fb      	adds	r3, r7, r3
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d9e0      	bls.n	800cdf4 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800ce32:	2309      	movs	r3, #9
}
 800ce34:	0018      	movs	r0, r3
 800ce36:	46bd      	mov	sp, r7
 800ce38:	b004      	add	sp, #16
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	20000010 	.word	0x20000010

0800ce40 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b089      	sub	sp, #36	; 0x24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	607a      	str	r2, [r7, #4]
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	230f      	movs	r3, #15
 800ce4e:	18fb      	adds	r3, r7, r3
 800ce50:	1c02      	adds	r2, r0, #0
 800ce52:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d005      	beq.n	800ce66 <DeriveSessionKey10x+0x26>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <DeriveSessionKey10x+0x26>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d101      	bne.n	800ce6a <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce66:	2307      	movs	r3, #7
 800ce68:	e042      	b.n	800cef0 <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 800ce6a:	2310      	movs	r3, #16
 800ce6c:	18fb      	adds	r3, r7, r3
 800ce6e:	0018      	movs	r0, r3
 800ce70:	2310      	movs	r3, #16
 800ce72:	001a      	movs	r2, r3
 800ce74:	2100      	movs	r1, #0
 800ce76:	f00d f893 	bl	8019fa0 <memset>

    switch( keyID )
 800ce7a:	230f      	movs	r3, #15
 800ce7c:	18fb      	adds	r3, r7, r3
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	db0e      	blt.n	800cea2 <DeriveSessionKey10x+0x62>
 800ce84:	2b06      	cmp	r3, #6
 800ce86:	dd02      	ble.n	800ce8e <DeriveSessionKey10x+0x4e>
 800ce88:	2b07      	cmp	r3, #7
 800ce8a:	d005      	beq.n	800ce98 <DeriveSessionKey10x+0x58>
 800ce8c:	e009      	b.n	800cea2 <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 800ce8e:	2310      	movs	r3, #16
 800ce90:	18fb      	adds	r3, r7, r3
 800ce92:	2201      	movs	r2, #1
 800ce94:	701a      	strb	r2, [r3, #0]
            break;
 800ce96:	e006      	b.n	800cea6 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 800ce98:	2310      	movs	r3, #16
 800ce9a:	18fb      	adds	r3, r7, r3
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	701a      	strb	r2, [r3, #0]
            break;
 800cea0:	e001      	b.n	800cea6 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cea2:	2308      	movs	r3, #8
 800cea4:	e024      	b.n	800cef0 <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 800cea6:	2410      	movs	r4, #16
 800cea8:	193b      	adds	r3, r7, r4
 800ceaa:	3301      	adds	r3, #1
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	2203      	movs	r2, #3
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f003 ffad 	bl	8010e10 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800ceb6:	193b      	adds	r3, r7, r4
 800ceb8:	3304      	adds	r3, #4
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	2203      	movs	r2, #3
 800cebe:	0018      	movs	r0, r3
 800cec0:	f003 ffa6 	bl	8010e10 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800cec4:	193b      	adds	r3, r7, r4
 800cec6:	3307      	adds	r3, #7
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	2202      	movs	r2, #2
 800cecc:	0018      	movs	r0, r3
 800cece:	f003 ff9f 	bl	8010e10 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800ced2:	230f      	movs	r3, #15
 800ced4:	18fb      	adds	r3, r7, r3
 800ced6:	781a      	ldrb	r2, [r3, #0]
 800ced8:	1939      	adds	r1, r7, r4
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <DeriveSessionKey10x+0xb8>)
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	0013      	movs	r3, r2
 800cee0:	2201      	movs	r2, #1
 800cee2:	f7fb ff21 	bl	8008d28 <SecureElementDeriveAndStoreKey>
 800cee6:	1e03      	subs	r3, r0, #0
 800cee8:	d001      	beq.n	800ceee <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ceea:	230c      	movs	r3, #12
 800ceec:	e000      	b.n	800cef0 <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	0018      	movs	r0, r3
 800cef2:	46bd      	mov	sp, r7
 800cef4:	b009      	add	sp, #36	; 0x24
 800cef6:	bd90      	pop	{r4, r7, pc}
 800cef8:	20000a28 	.word	0x20000a28

0800cefc <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 800cefc:	b5b0      	push	{r4, r5, r7, lr}
 800cefe:	b08a      	sub	sp, #40	; 0x28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60b9      	str	r1, [r7, #8]
 800cf04:	607a      	str	r2, [r7, #4]
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	230f      	movs	r3, #15
 800cf0a:	18fb      	adds	r3, r7, r3
 800cf0c:	1c02      	adds	r2, r0, #0
 800cf0e:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <DeriveSessionKey11x+0x26>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <DeriveSessionKey11x+0x26>
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d101      	bne.n	800cf26 <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cf22:	2307      	movs	r3, #7
 800cf24:	e05a      	b.n	800cfdc <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 800cf26:	2314      	movs	r3, #20
 800cf28:	18fb      	adds	r3, r7, r3
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	2310      	movs	r3, #16
 800cf2e:	001a      	movs	r2, r3
 800cf30:	2100      	movs	r1, #0
 800cf32:	f00d f835 	bl	8019fa0 <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 800cf36:	2327      	movs	r3, #39	; 0x27
 800cf38:	18fb      	adds	r3, r7, r3
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 800cf3e:	230f      	movs	r3, #15
 800cf40:	18fb      	adds	r3, r7, r3
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	2b05      	cmp	r3, #5
 800cf46:	d00d      	beq.n	800cf64 <DeriveSessionKey11x+0x68>
 800cf48:	dc02      	bgt.n	800cf50 <DeriveSessionKey11x+0x54>
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	d005      	beq.n	800cf5a <DeriveSessionKey11x+0x5e>
 800cf4e:	e01c      	b.n	800cf8a <DeriveSessionKey11x+0x8e>
 800cf50:	2b06      	cmp	r3, #6
 800cf52:	d00c      	beq.n	800cf6e <DeriveSessionKey11x+0x72>
 800cf54:	2b07      	cmp	r3, #7
 800cf56:	d00f      	beq.n	800cf78 <DeriveSessionKey11x+0x7c>
 800cf58:	e017      	b.n	800cf8a <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 800cf5a:	2314      	movs	r3, #20
 800cf5c:	18fb      	adds	r3, r7, r3
 800cf5e:	2201      	movs	r2, #1
 800cf60:	701a      	strb	r2, [r3, #0]
            break;
 800cf62:	e014      	b.n	800cf8e <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 800cf64:	2314      	movs	r3, #20
 800cf66:	18fb      	adds	r3, r7, r3
 800cf68:	2203      	movs	r2, #3
 800cf6a:	701a      	strb	r2, [r3, #0]
            break;
 800cf6c:	e00f      	b.n	800cf8e <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 800cf6e:	2314      	movs	r3, #20
 800cf70:	18fb      	adds	r3, r7, r3
 800cf72:	2204      	movs	r2, #4
 800cf74:	701a      	strb	r2, [r3, #0]
            break;
 800cf76:	e00a      	b.n	800cf8e <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 800cf78:	2327      	movs	r3, #39	; 0x27
 800cf7a:	18fb      	adds	r3, r7, r3
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 800cf80:	2314      	movs	r3, #20
 800cf82:	18fb      	adds	r3, r7, r3
 800cf84:	2202      	movs	r2, #2
 800cf86:	701a      	strb	r2, [r3, #0]
            break;
 800cf88:	e001      	b.n	800cf8e <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	e026      	b.n	800cfdc <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 800cf8e:	2514      	movs	r5, #20
 800cf90:	197b      	adds	r3, r7, r5
 800cf92:	3301      	adds	r3, #1
 800cf94:	68b9      	ldr	r1, [r7, #8]
 800cf96:	2203      	movs	r2, #3
 800cf98:	0018      	movs	r0, r3
 800cf9a:	f003 ff39 	bl	8010e10 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 800cf9e:	197b      	adds	r3, r7, r5
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	2208      	movs	r2, #8
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	f003 ff4d 	bl	8010e46 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 800cfac:	197b      	adds	r3, r7, r5
 800cfae:	330c      	adds	r3, #12
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	f003 ff2b 	bl	8010e10 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800cfba:	230f      	movs	r3, #15
 800cfbc:	18fb      	adds	r3, r7, r3
 800cfbe:	781c      	ldrb	r4, [r3, #0]
 800cfc0:	2327      	movs	r3, #39	; 0x27
 800cfc2:	18fb      	adds	r3, r7, r3
 800cfc4:	781a      	ldrb	r2, [r3, #0]
 800cfc6:	1979      	adds	r1, r7, r5
 800cfc8:	4b06      	ldr	r3, [pc, #24]	; (800cfe4 <DeriveSessionKey11x+0xe8>)
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	0023      	movs	r3, r4
 800cfce:	f7fb feab 	bl	8008d28 <SecureElementDeriveAndStoreKey>
 800cfd2:	1e03      	subs	r3, r0, #0
 800cfd4:	d001      	beq.n	800cfda <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cfd6:	230c      	movs	r3, #12
 800cfd8:	e000      	b.n	800cfdc <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	0018      	movs	r0, r3
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	b00a      	add	sp, #40	; 0x28
 800cfe2:	bdb0      	pop	{r4, r5, r7, pc}
 800cfe4:	20000a28 	.word	0x20000a28

0800cfe8 <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 800cfe8:	b590      	push	{r4, r7, lr}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	0002      	movs	r2, r0
 800cff0:	6039      	str	r1, [r7, #0]
 800cff2:	1dfb      	adds	r3, r7, #7
 800cff4:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cffc:	2307      	movs	r3, #7
 800cffe:	e030      	b.n	800d062 <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 800d000:	2308      	movs	r3, #8
 800d002:	18fb      	adds	r3, r7, r3
 800d004:	0018      	movs	r0, r3
 800d006:	2310      	movs	r3, #16
 800d008:	001a      	movs	r2, r3
 800d00a:	2100      	movs	r1, #0
 800d00c:	f00c ffc8 	bl	8019fa0 <memset>

    switch( keyID )
 800d010:	1dfb      	adds	r3, r7, #7
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b02      	cmp	r3, #2
 800d016:	d002      	beq.n	800d01e <DeriveLifeTimeSessionKey+0x36>
 800d018:	2b03      	cmp	r3, #3
 800d01a:	d005      	beq.n	800d028 <DeriveLifeTimeSessionKey+0x40>
 800d01c:	e009      	b.n	800d032 <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 800d01e:	2308      	movs	r3, #8
 800d020:	18fb      	adds	r3, r7, r3
 800d022:	2206      	movs	r2, #6
 800d024:	701a      	strb	r2, [r3, #0]
            break;
 800d026:	e006      	b.n	800d036 <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 800d028:	2308      	movs	r3, #8
 800d02a:	18fb      	adds	r3, r7, r3
 800d02c:	2205      	movs	r2, #5
 800d02e:	701a      	strb	r2, [r3, #0]
            break;
 800d030:	e001      	b.n	800d036 <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d032:	2308      	movs	r3, #8
 800d034:	e015      	b.n	800d062 <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 800d036:	2408      	movs	r4, #8
 800d038:	193b      	adds	r3, r7, r4
 800d03a:	3301      	adds	r3, #1
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	2208      	movs	r2, #8
 800d040:	0018      	movs	r0, r3
 800d042:	f003 ff00 	bl	8010e46 <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d046:	1dfb      	adds	r3, r7, #7
 800d048:	781a      	ldrb	r2, [r3, #0]
 800d04a:	1939      	adds	r1, r7, r4
 800d04c:	4b07      	ldr	r3, [pc, #28]	; (800d06c <DeriveLifeTimeSessionKey+0x84>)
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	0013      	movs	r3, r2
 800d052:	2201      	movs	r2, #1
 800d054:	f7fb fe68 	bl	8008d28 <SecureElementDeriveAndStoreKey>
 800d058:	1e03      	subs	r3, r0, #0
 800d05a:	d001      	beq.n	800d060 <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d05c:	230c      	movs	r3, #12
 800d05e:	e000      	b.n	800d062 <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d060:	2300      	movs	r3, #0
}
 800d062:	0018      	movs	r0, r3
 800d064:	46bd      	mov	sp, r7
 800d066:	b007      	add	sp, #28
 800d068:	bd90      	pop	{r4, r7, pc}
 800d06a:	46c0      	nop			; (mov r8, r8)
 800d06c:	20000a28 	.word	0x20000a28

0800d070 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	0002      	movs	r2, r0
 800d078:	6039      	str	r1, [r7, #0]
 800d07a:	1dfb      	adds	r3, r7, #7
 800d07c:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 800d082:	1dfb      	adds	r3, r7, #7
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b07      	cmp	r3, #7
 800d088:	d83b      	bhi.n	800d102 <CheckFCntDown+0x92>
 800d08a:	009a      	lsls	r2, r3, #2
 800d08c:	4b25      	ldr	r3, [pc, #148]	; (800d124 <CheckFCntDown+0xb4>)
 800d08e:	18d3      	adds	r3, r2, r3
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 800d094:	2300      	movs	r3, #0
 800d096:	e040      	b.n	800d11a <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 800d098:	4b23      	ldr	r3, [pc, #140]	; (800d128 <CheckFCntDown+0xb8>)
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 800d0a0:	4b21      	ldr	r3, [pc, #132]	; (800d128 <CheckFCntDown+0xb8>)
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	4b20      	ldr	r3, [pc, #128]	; (800d128 <CheckFCntDown+0xb8>)
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	320c      	adds	r2, #12
 800d0aa:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d0ac:	e02b      	b.n	800d106 <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 800d0ae:	4b1e      	ldr	r3, [pc, #120]	; (800d128 <CheckFCntDown+0xb8>)
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 800d0b6:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <CheckFCntDown+0xb8>)
 800d0b8:	689a      	ldr	r2, [r3, #8]
 800d0ba:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <CheckFCntDown+0xb8>)
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	3210      	adds	r2, #16
 800d0c0:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d0c2:	e020      	b.n	800d106 <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 800d0c4:	4b18      	ldr	r3, [pc, #96]	; (800d128 <CheckFCntDown+0xb8>)
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 800d0cc:	4b16      	ldr	r3, [pc, #88]	; (800d128 <CheckFCntDown+0xb8>)
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	4b15      	ldr	r3, [pc, #84]	; (800d128 <CheckFCntDown+0xb8>)
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	3214      	adds	r2, #20
 800d0d6:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d0d8:	e015      	b.n	800d106 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 800d0da:	4b13      	ldr	r3, [pc, #76]	; (800d128 <CheckFCntDown+0xb8>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	60fb      	str	r3, [r7, #12]
            break;
 800d0e2:	e010      	b.n	800d106 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 800d0e4:	4b10      	ldr	r3, [pc, #64]	; (800d128 <CheckFCntDown+0xb8>)
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	60fb      	str	r3, [r7, #12]
            break;
 800d0ec:	e00b      	b.n	800d106 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 800d0ee:	4b0e      	ldr	r3, [pc, #56]	; (800d128 <CheckFCntDown+0xb8>)
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	60fb      	str	r3, [r7, #12]
            break;
 800d0f6:	e006      	b.n	800d106 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 800d0f8:	4b0b      	ldr	r3, [pc, #44]	; (800d128 <CheckFCntDown+0xb8>)
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fe:	60fb      	str	r3, [r7, #12]
            break;
 800d100:	e001      	b.n	800d106 <CheckFCntDown+0x96>
        default:
            return false;
 800d102:	2300      	movs	r3, #0
 800d104:	e009      	b.n	800d11a <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d802      	bhi.n	800d114 <CheckFCntDown+0xa4>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	d101      	bne.n	800d118 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 800d114:	2301      	movs	r3, #1
 800d116:	e000      	b.n	800d11a <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 800d118:	2300      	movs	r3, #0
    }
}
 800d11a:	0018      	movs	r0, r3
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b004      	add	sp, #16
 800d120:	bd80      	pop	{r7, pc}
 800d122:	46c0      	nop			; (mov r8, r8)
 800d124:	0801bb14 	.word	0x0801bb14
 800d128:	20000a28 	.word	0x20000a28

0800d12c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	0002      	movs	r2, r0
 800d134:	6039      	str	r1, [r7, #0]
 800d136:	1dfb      	adds	r3, r7, #7
 800d138:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 800d13a:	1dfb      	adds	r3, r7, #7
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	2b07      	cmp	r3, #7
 800d140:	d827      	bhi.n	800d192 <UpdateFCntDown+0x66>
 800d142:	009a      	lsls	r2, r3, #2
 800d144:	4b17      	ldr	r3, [pc, #92]	; (800d1a4 <UpdateFCntDown+0x78>)
 800d146:	18d3      	adds	r3, r2, r3
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 800d14c:	4b16      	ldr	r3, [pc, #88]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	60da      	str	r2, [r3, #12]
            break;
 800d154:	e01e      	b.n	800d194 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 800d156:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	611a      	str	r2, [r3, #16]
            break;
 800d15e:	e019      	b.n	800d194 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 800d160:	4b11      	ldr	r3, [pc, #68]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	615a      	str	r2, [r3, #20]
            break;
 800d168:	e014      	b.n	800d194 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 800d16a:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	619a      	str	r2, [r3, #24]
            break;
 800d172:	e00f      	b.n	800d194 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 800d174:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	61da      	str	r2, [r3, #28]
            break;
 800d17c:	e00a      	b.n	800d194 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 800d17e:	4b0a      	ldr	r3, [pc, #40]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	621a      	str	r2, [r3, #32]
            break;
 800d186:	e005      	b.n	800d194 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 800d188:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800d190:	e000      	b.n	800d194 <UpdateFCntDown+0x68>
        default:
            break;
 800d192:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d194:	4b04      	ldr	r3, [pc, #16]	; (800d1a8 <UpdateFCntDown+0x7c>)
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	4798      	blx	r3
}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	46bd      	mov	sp, r7
 800d19e:	b002      	add	sp, #8
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	46c0      	nop			; (mov r8, r8)
 800d1a4:	0801bb34 	.word	0x0801bb34
 800d1a8:	20000a28 	.word	0x20000a28

0800d1ac <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800d1ac:	b5b0      	push	{r4, r5, r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d1ba:	2307      	movs	r3, #7
 800d1bc:	e064      	b.n	800d288 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 800d1be:	230f      	movs	r3, #15
 800d1c0:	18fb      	adds	r3, r7, r3
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d1c6:	240e      	movs	r4, #14
 800d1c8:	193b      	adds	r3, r7, r4
 800d1ca:	2210      	movs	r2, #16
 800d1cc:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 800d1ce:	f003 fded 	bl	8010dac <rand1>
 800d1d2:	0002      	movs	r2, r0
 800d1d4:	4b2e      	ldr	r3, [pc, #184]	; (800d290 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	b292      	uxth	r2, r2
 800d1da:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d1dc:	4b2c      	ldr	r3, [pc, #176]	; (800d290 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800d1e2:	4b2b      	ldr	r3, [pc, #172]	; (800d290 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	881a      	ldrh	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	330e      	adds	r3, #14
 800d1f0:	0025      	movs	r5, r4
 800d1f2:	193c      	adds	r4, r7, r4
 800d1f4:	0019      	movs	r1, r3
 800d1f6:	2002      	movs	r0, #2
 800d1f8:	f7ff fef6 	bl	800cfe8 <DeriveLifeTimeSessionKey>
 800d1fc:	0003      	movs	r3, r0
 800d1fe:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d200:	002c      	movs	r4, r5
 800d202:	193b      	adds	r3, r7, r4
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 800d20a:	230e      	movs	r3, #14
 800d20c:	18fb      	adds	r3, r7, r3
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	e03a      	b.n	800d288 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	330e      	adds	r3, #14
 800d216:	250e      	movs	r5, #14
 800d218:	197c      	adds	r4, r7, r5
 800d21a:	0019      	movs	r1, r3
 800d21c:	2003      	movs	r0, #3
 800d21e:	f7ff fee3 	bl	800cfe8 <DeriveLifeTimeSessionKey>
 800d222:	0003      	movs	r3, r0
 800d224:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d226:	197b      	adds	r3, r7, r5
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 800d22e:	230e      	movs	r3, #14
 800d230:	18fb      	adds	r3, r7, r3
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	e028      	b.n	800d288 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	0018      	movs	r0, r3
 800d23a:	f000 fffc 	bl	800e236 <LoRaMacSerializerJoinRequest>
 800d23e:	1e03      	subs	r3, r0, #0
 800d240:	d001      	beq.n	800d246 <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d242:	230e      	movs	r3, #14
 800d244:	e020      	b.n	800d288 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6818      	ldr	r0, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	3318      	adds	r3, #24
 800d24e:	0019      	movs	r1, r3
 800d250:	250e      	movs	r5, #14
 800d252:	197c      	adds	r4, r7, r5
 800d254:	230f      	movs	r3, #15
 800d256:	18fb      	adds	r3, r7, r3
 800d258:	781a      	ldrb	r2, [r3, #0]
 800d25a:	000b      	movs	r3, r1
 800d25c:	2113      	movs	r1, #19
 800d25e:	f7ff fa68 	bl	800c732 <LoraMacCryptoComputeCmac>
 800d262:	0003      	movs	r3, r0
 800d264:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d266:	197b      	adds	r3, r7, r5
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d003      	beq.n	800d276 <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 800d26e:	230e      	movs	r3, #14
 800d270:	18fb      	adds	r3, r7, r3
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	e008      	b.n	800d288 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	0018      	movs	r0, r3
 800d27a:	f000 ffdc 	bl	800e236 <LoRaMacSerializerJoinRequest>
 800d27e:	1e03      	subs	r3, r0, #0
 800d280:	d001      	beq.n	800d286 <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d282:	230e      	movs	r3, #14
 800d284:	e000      	b.n	800d288 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d286:	2300      	movs	r3, #0
}
 800d288:	0018      	movs	r0, r3
 800d28a:	46bd      	mov	sp, r7
 800d28c:	b004      	add	sp, #16
 800d28e:	bdb0      	pop	{r4, r5, r7, pc}
 800d290:	20000a28 	.word	0x20000a28

0800d294 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 800d294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d296:	b0cd      	sub	sp, #308	; 0x134
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	607a      	str	r2, [r7, #4]
 800d29e:	4bde      	ldr	r3, [pc, #888]	; (800d618 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d2a0:	2298      	movs	r2, #152	; 0x98
 800d2a2:	0052      	lsls	r2, r2, #1
 800d2a4:	4694      	mov	ip, r2
 800d2a6:	44bc      	add	ip, r7
 800d2a8:	4463      	add	r3, ip
 800d2aa:	1c02      	adds	r2, r0, #0
 800d2ac:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <LoRaMacCryptoHandleJoinAccept+0x26>
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d2ba:	2307      	movs	r3, #7
 800d2bc:	e25e      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d2be:	2328      	movs	r3, #40	; 0x28
 800d2c0:	33ff      	adds	r3, #255	; 0xff
 800d2c2:	18fb      	adds	r3, r7, r3
 800d2c4:	2210      	movs	r2, #16
 800d2c6:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 800d2c8:	232e      	movs	r3, #46	; 0x2e
 800d2ca:	33ff      	adds	r3, #255	; 0xff
 800d2cc:	18fb      	adds	r3, r7, r3
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 800d2d2:	4bd2      	ldr	r3, [pc, #840]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	2294      	movs	r2, #148	; 0x94
 800d2d8:	0052      	lsls	r2, r2, #1
 800d2da:	18ba      	adds	r2, r7, r2
 800d2dc:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 800d2de:	4bce      	ldr	r3, [pc, #824]	; (800d618 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d2e0:	2298      	movs	r2, #152	; 0x98
 800d2e2:	0052      	lsls	r2, r2, #1
 800d2e4:	4694      	mov	ip, r2
 800d2e6:	44bc      	add	ip, r7
 800d2e8:	4463      	add	r3, ip
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2bff      	cmp	r3, #255	; 0xff
 800d2ee:	d10a      	bne.n	800d306 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 800d2f0:	2397      	movs	r3, #151	; 0x97
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	18fb      	adds	r3, r7, r3
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800d2fa:	232e      	movs	r3, #46	; 0x2e
 800d2fc:	33ff      	adds	r3, #255	; 0xff
 800d2fe:	18fb      	adds	r3, r7, r3
 800d300:	220c      	movs	r2, #12
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	e023      	b.n	800d34e <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 800d306:	2397      	movs	r3, #151	; 0x97
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	18fb      	adds	r3, r7, r3
 800d30c:	2203      	movs	r2, #3
 800d30e:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 800d310:	4bc1      	ldr	r3, [pc, #772]	; (800d618 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d312:	2298      	movs	r2, #152	; 0x98
 800d314:	0052      	lsls	r2, r2, #1
 800d316:	4694      	mov	ip, r2
 800d318:	44bc      	add	ip, r7
 800d31a:	4463      	add	r3, ip
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d008      	beq.n	800d334 <LoRaMacCryptoHandleJoinAccept+0xa0>
 800d322:	4bbd      	ldr	r3, [pc, #756]	; (800d618 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d324:	2298      	movs	r2, #152	; 0x98
 800d326:	0052      	lsls	r2, r2, #1
 800d328:	4694      	mov	ip, r2
 800d32a:	44bc      	add	ip, r7
 800d32c:	4463      	add	r3, ip
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	2b02      	cmp	r3, #2
 800d332:	d105      	bne.n	800d340 <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 800d334:	4bba      	ldr	r3, [pc, #744]	; (800d620 <LoRaMacCryptoHandleJoinAccept+0x38c>)
 800d336:	2294      	movs	r2, #148	; 0x94
 800d338:	0052      	lsls	r2, r2, #1
 800d33a:	18ba      	adds	r2, r7, r2
 800d33c:	6013      	str	r3, [r2, #0]
 800d33e:	e006      	b.n	800d34e <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 800d340:	4bb6      	ldr	r3, [pc, #728]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	3328      	adds	r3, #40	; 0x28
 800d346:	2294      	movs	r2, #148	; 0x94
 800d348:	0052      	lsls	r2, r2, #1
 800d34a:	18ba      	adds	r2, r7, r2
 800d34c:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	791b      	ldrb	r3, [r3, #4]
 800d352:	b29a      	uxth	r2, r3
 800d354:	242e      	movs	r4, #46	; 0x2e
 800d356:	34ff      	adds	r4, #255	; 0xff
 800d358:	193b      	adds	r3, r7, r4
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	18d3      	adds	r3, r2, r3
 800d360:	b29a      	uxth	r2, r3
 800d362:	2514      	movs	r5, #20
 800d364:	197b      	adds	r3, r7, r5
 800d366:	2100      	movs	r1, #0
 800d368:	0018      	movs	r0, r3
 800d36a:	f003 fd8d 	bl	8010e88 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	1c58      	adds	r0, r3, #1
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	791b      	ldrb	r3, [r3, #4]
 800d378:	b29b      	uxth	r3, r3
 800d37a:	3b01      	subs	r3, #1
 800d37c:	b299      	uxth	r1, r3
 800d37e:	193b      	adds	r3, r7, r4
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	197a      	adds	r2, r7, r5
 800d384:	18d4      	adds	r4, r2, r3
 800d386:	2397      	movs	r3, #151	; 0x97
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	18fb      	adds	r3, r7, r3
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	0023      	movs	r3, r4
 800d390:	f7fb fc60 	bl	8008c54 <SecureElementAesEncrypt>
 800d394:	1e03      	subs	r3, r0, #0
 800d396:	d001      	beq.n	800d39c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d398:	230c      	movs	r3, #12
 800d39a:	e1ef      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	1c58      	adds	r0, r3, #1
 800d3a2:	232e      	movs	r3, #46	; 0x2e
 800d3a4:	33ff      	adds	r3, #255	; 0xff
 800d3a6:	18fb      	adds	r3, r7, r3
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2214      	movs	r2, #20
 800d3ac:	18ba      	adds	r2, r7, r2
 800d3ae:	18d1      	adds	r1, r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	791b      	ldrb	r3, [r3, #4]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	001a      	movs	r2, r3
 800d3bc:	f003 fd28 	bl	8010e10 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	f000 fd34 	bl	800de30 <LoRaMacParserJoinAccept>
 800d3c8:	1e03      	subs	r3, r0, #0
 800d3ca:	d001      	beq.n	800d3d0 <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d3cc:	230d      	movs	r3, #13
 800d3ce:	e1d5      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7c1b      	ldrb	r3, [r3, #16]
 800d3d4:	227f      	movs	r2, #127	; 0x7f
 800d3d6:	4393      	bics	r3, r2
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d008      	beq.n	800d3f0 <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 800d3de:	4b8f      	ldr	r3, [pc, #572]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 800d3e4:	2330      	movs	r3, #48	; 0x30
 800d3e6:	33ff      	adds	r3, #255	; 0xff
 800d3e8:	18fb      	adds	r3, r7, r3
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	e007      	b.n	800d400 <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 800d3f0:	4b8a      	ldr	r3, [pc, #552]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 800d3f6:	2330      	movs	r3, #48	; 0x30
 800d3f8:	33ff      	adds	r3, #255	; 0xff
 800d3fa:	18fb      	adds	r3, r7, r3
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 800d400:	4b86      	ldr	r3, [pc, #536]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d402:	789b      	ldrb	r3, [r3, #2]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d11e      	bne.n	800d446 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6818      	ldr	r0, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	791b      	ldrb	r3, [r3, #4]
 800d410:	b29b      	uxth	r3, r3
 800d412:	3b04      	subs	r3, #4
 800d414:	b299      	uxth	r1, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d41a:	2628      	movs	r6, #40	; 0x28
 800d41c:	36ff      	adds	r6, #255	; 0xff
 800d41e:	19bc      	adds	r4, r7, r6
 800d420:	2330      	movs	r3, #48	; 0x30
 800d422:	33ff      	adds	r3, #255	; 0xff
 800d424:	18fb      	adds	r3, r7, r3
 800d426:	781a      	ldrb	r2, [r3, #0]
 800d428:	002b      	movs	r3, r5
 800d42a:	f7ff f9a3 	bl	800c774 <VerifyCmac>
 800d42e:	0003      	movs	r3, r0
 800d430:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d432:	19bb      	adds	r3, r7, r6
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d100      	bne.n	800d43c <LoRaMacCryptoHandleJoinAccept+0x1a8>
 800d43a:	e0b9      	b.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 800d43c:	2328      	movs	r3, #40	; 0x28
 800d43e:	33ff      	adds	r3, #255	; 0xff
 800d440:	18fb      	adds	r3, r7, r3
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	e19a      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 800d446:	2092      	movs	r0, #146	; 0x92
 800d448:	0040      	lsls	r0, r0, #1
 800d44a:	183b      	adds	r3, r7, r0
 800d44c:	2200      	movs	r2, #0
 800d44e:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800d450:	183b      	adds	r3, r7, r0
 800d452:	881b      	ldrh	r3, [r3, #0]
 800d454:	183a      	adds	r2, r7, r0
 800d456:	1c59      	adds	r1, r3, #1
 800d458:	8011      	strh	r1, [r2, #0]
 800d45a:	0019      	movs	r1, r3
 800d45c:	4b71      	ldr	r3, [pc, #452]	; (800d624 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d45e:	2298      	movs	r2, #152	; 0x98
 800d460:	0052      	lsls	r2, r2, #1
 800d462:	4694      	mov	ip, r2
 800d464:	44bc      	add	ip, r7
 800d466:	4463      	add	r3, ip
 800d468:	4a6b      	ldr	r2, [pc, #428]	; (800d618 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d46a:	2498      	movs	r4, #152	; 0x98
 800d46c:	0064      	lsls	r4, r4, #1
 800d46e:	46a4      	mov	ip, r4
 800d470:	44bc      	add	ip, r7
 800d472:	4462      	add	r2, ip
 800d474:	7812      	ldrb	r2, [r2, #0]
 800d476:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d478:	0004      	movs	r4, r0
 800d47a:	183b      	adds	r3, r7, r0
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	2614      	movs	r6, #20
 800d480:	19ba      	adds	r2, r7, r6
 800d482:	18d3      	adds	r3, r2, r3
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	2208      	movs	r2, #8
 800d488:	0018      	movs	r0, r3
 800d48a:	f003 fcdc 	bl	8010e46 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800d48e:	0020      	movs	r0, r4
 800d490:	183b      	adds	r3, r7, r0
 800d492:	183a      	adds	r2, r7, r0
 800d494:	8812      	ldrh	r2, [r2, #0]
 800d496:	3208      	adds	r2, #8
 800d498:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800d49a:	4b60      	ldr	r3, [pc, #384]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	8819      	ldrh	r1, [r3, #0]
 800d4a0:	183b      	adds	r3, r7, r0
 800d4a2:	881b      	ldrh	r3, [r3, #0]
 800d4a4:	0004      	movs	r4, r0
 800d4a6:	183a      	adds	r2, r7, r0
 800d4a8:	1c58      	adds	r0, r3, #1
 800d4aa:	8010      	strh	r0, [r2, #0]
 800d4ac:	001a      	movs	r2, r3
 800d4ae:	b2c9      	uxtb	r1, r1
 800d4b0:	4b5c      	ldr	r3, [pc, #368]	; (800d624 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d4b2:	2098      	movs	r0, #152	; 0x98
 800d4b4:	0040      	lsls	r0, r0, #1
 800d4b6:	4684      	mov	ip, r0
 800d4b8:	44bc      	add	ip, r7
 800d4ba:	4463      	add	r3, ip
 800d4bc:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800d4be:	4b57      	ldr	r3, [pc, #348]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	881b      	ldrh	r3, [r3, #0]
 800d4c4:	0a1b      	lsrs	r3, r3, #8
 800d4c6:	b299      	uxth	r1, r3
 800d4c8:	193b      	adds	r3, r7, r4
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	193a      	adds	r2, r7, r4
 800d4ce:	1c58      	adds	r0, r3, #1
 800d4d0:	8010      	strh	r0, [r2, #0]
 800d4d2:	001a      	movs	r2, r3
 800d4d4:	b2c9      	uxtb	r1, r1
 800d4d6:	4b53      	ldr	r3, [pc, #332]	; (800d624 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d4d8:	2098      	movs	r0, #152	; 0x98
 800d4da:	0040      	lsls	r0, r0, #1
 800d4dc:	4684      	mov	ip, r0
 800d4de:	44bc      	add	ip, r7
 800d4e0:	4463      	add	r3, ip
 800d4e2:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800d4e4:	193b      	adds	r3, r7, r4
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	193a      	adds	r2, r7, r4
 800d4ea:	1c59      	adds	r1, r3, #1
 800d4ec:	8011      	strh	r1, [r2, #0]
 800d4ee:	001a      	movs	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7959      	ldrb	r1, [r3, #5]
 800d4f4:	4b4b      	ldr	r3, [pc, #300]	; (800d624 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d4f6:	2098      	movs	r0, #152	; 0x98
 800d4f8:	0040      	lsls	r0, r0, #1
 800d4fa:	4684      	mov	ip, r0
 800d4fc:	44bc      	add	ip, r7
 800d4fe:	4463      	add	r3, ip
 800d500:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	791b      	ldrb	r3, [r3, #4]
 800d506:	b29a      	uxth	r2, r3
 800d508:	232e      	movs	r3, #46	; 0x2e
 800d50a:	33ff      	adds	r3, #255	; 0xff
 800d50c:	18fb      	adds	r3, r7, r3
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	b29b      	uxth	r3, r3
 800d512:	18d3      	adds	r3, r2, r3
 800d514:	b29b      	uxth	r3, r3
 800d516:	3b05      	subs	r3, #5
 800d518:	b299      	uxth	r1, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d51e:	2328      	movs	r3, #40	; 0x28
 800d520:	33ff      	adds	r3, #255	; 0xff
 800d522:	18fc      	adds	r4, r7, r3
 800d524:	2230      	movs	r2, #48	; 0x30
 800d526:	32ff      	adds	r2, #255	; 0xff
 800d528:	18bb      	adds	r3, r7, r2
 800d52a:	781a      	ldrb	r2, [r3, #0]
 800d52c:	19b8      	adds	r0, r7, r6
 800d52e:	002b      	movs	r3, r5
 800d530:	f7ff f920 	bl	800c774 <VerifyCmac>
 800d534:	0003      	movs	r3, r0
 800d536:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d538:	2328      	movs	r3, #40	; 0x28
 800d53a:	33ff      	adds	r3, #255	; 0xff
 800d53c:	18fb      	adds	r3, r7, r3
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 800d544:	2328      	movs	r3, #40	; 0x28
 800d546:	33ff      	adds	r3, #255	; 0xff
 800d548:	18fb      	adds	r3, r7, r3
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	e116      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	2290      	movs	r2, #144	; 0x90
 800d552:	0052      	lsls	r2, r2, #1
 800d554:	18b9      	adds	r1, r7, r2
 800d556:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	799b      	ldrb	r3, [r3, #6]
 800d55c:	18b9      	adds	r1, r7, r2
 800d55e:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	79db      	ldrb	r3, [r3, #7]
 800d564:	021b      	lsls	r3, r3, #8
 800d566:	0011      	movs	r1, r2
 800d568:	18ba      	adds	r2, r7, r2
 800d56a:	6812      	ldr	r2, [r2, #0]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	000a      	movs	r2, r1
 800d570:	18b9      	adds	r1, r7, r2
 800d572:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7a1b      	ldrb	r3, [r3, #8]
 800d578:	041b      	lsls	r3, r3, #16
 800d57a:	0011      	movs	r1, r2
 800d57c:	18ba      	adds	r2, r7, r2
 800d57e:	6812      	ldr	r2, [r2, #0]
 800d580:	4313      	orrs	r3, r2
 800d582:	000a      	movs	r2, r1
 800d584:	18b9      	adds	r1, r7, r2
 800d586:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800d588:	4b24      	ldr	r3, [pc, #144]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	18ba      	adds	r2, r7, r2
 800d590:	6812      	ldr	r2, [r2, #0]
 800d592:	429a      	cmp	r2, r3
 800d594:	d90a      	bls.n	800d5ac <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800d596:	4b21      	ldr	r3, [pc, #132]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	2290      	movs	r2, #144	; 0x90
 800d59c:	0052      	lsls	r2, r2, #1
 800d59e:	18ba      	adds	r2, r7, r2
 800d5a0:	6812      	ldr	r2, [r2, #0]
 800d5a2:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800d5a4:	4b1d      	ldr	r3, [pc, #116]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	4798      	blx	r3
 800d5aa:	e001      	b.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e0e5      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800d5b0:	4b1a      	ldr	r3, [pc, #104]	; (800d61c <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d5b2:	789b      	ldrb	r3, [r3, #2]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d167      	bne.n	800d688 <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	1d99      	adds	r1, r3, #6
 800d5bc:	2528      	movs	r5, #40	; 0x28
 800d5be:	35ff      	adds	r5, #255	; 0xff
 800d5c0:	197c      	adds	r4, r7, r5
 800d5c2:	2394      	movs	r3, #148	; 0x94
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	18fb      	adds	r3, r7, r3
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	2004      	movs	r0, #4
 800d5ce:	f7ff fc95 	bl	800cefc <DeriveSessionKey11x>
 800d5d2:	0003      	movs	r3, r0
 800d5d4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d5d6:	197b      	adds	r3, r7, r5
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d004      	beq.n	800d5e8 <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 800d5de:	2328      	movs	r3, #40	; 0x28
 800d5e0:	33ff      	adds	r3, #255	; 0xff
 800d5e2:	18fb      	adds	r3, r7, r3
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	e0c9      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	1d99      	adds	r1, r3, #6
 800d5ec:	2528      	movs	r5, #40	; 0x28
 800d5ee:	35ff      	adds	r5, #255	; 0xff
 800d5f0:	197c      	adds	r4, r7, r5
 800d5f2:	2394      	movs	r3, #148	; 0x94
 800d5f4:	005b      	lsls	r3, r3, #1
 800d5f6:	18fb      	adds	r3, r7, r3
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	2005      	movs	r0, #5
 800d5fe:	f7ff fc7d 	bl	800cefc <DeriveSessionKey11x>
 800d602:	0003      	movs	r3, r0
 800d604:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d606:	197b      	adds	r3, r7, r5
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00c      	beq.n	800d628 <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 800d60e:	2328      	movs	r3, #40	; 0x28
 800d610:	33ff      	adds	r3, #255	; 0xff
 800d612:	18fb      	adds	r3, r7, r3
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	e0b1      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
 800d618:	fffffedf 	.word	0xfffffedf
 800d61c:	20000a28 	.word	0x20000a28
 800d620:	20000a2c 	.word	0x20000a2c
 800d624:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	1d99      	adds	r1, r3, #6
 800d62c:	2528      	movs	r5, #40	; 0x28
 800d62e:	35ff      	adds	r5, #255	; 0xff
 800d630:	197c      	adds	r4, r7, r5
 800d632:	2394      	movs	r3, #148	; 0x94
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	18fb      	adds	r3, r7, r3
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	2006      	movs	r0, #6
 800d63e:	f7ff fc5d 	bl	800cefc <DeriveSessionKey11x>
 800d642:	0003      	movs	r3, r0
 800d644:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d646:	197b      	adds	r3, r7, r5
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d004      	beq.n	800d658 <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 800d64e:	2328      	movs	r3, #40	; 0x28
 800d650:	33ff      	adds	r3, #255	; 0xff
 800d652:	18fb      	adds	r3, r7, r3
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	e091      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	1d99      	adds	r1, r3, #6
 800d65c:	2528      	movs	r5, #40	; 0x28
 800d65e:	35ff      	adds	r5, #255	; 0xff
 800d660:	197c      	adds	r4, r7, r5
 800d662:	2394      	movs	r3, #148	; 0x94
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	2007      	movs	r0, #7
 800d66e:	f7ff fc45 	bl	800cefc <DeriveSessionKey11x>
 800d672:	0003      	movs	r3, r0
 800d674:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d676:	197b      	adds	r3, r7, r5
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d064      	beq.n	800d748 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 800d67e:	2328      	movs	r3, #40	; 0x28
 800d680:	33ff      	adds	r3, #255	; 0xff
 800d682:	18fb      	adds	r3, r7, r3
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	e079      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	1d99      	adds	r1, r3, #6
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3309      	adds	r3, #9
 800d690:	001a      	movs	r2, r3
 800d692:	4b3c      	ldr	r3, [pc, #240]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	2528      	movs	r5, #40	; 0x28
 800d698:	35ff      	adds	r5, #255	; 0xff
 800d69a:	197c      	adds	r4, r7, r5
 800d69c:	2007      	movs	r0, #7
 800d69e:	f7ff fbcf 	bl	800ce40 <DeriveSessionKey10x>
 800d6a2:	0003      	movs	r3, r0
 800d6a4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6a6:	197b      	adds	r3, r7, r5
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d004      	beq.n	800d6b8 <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 800d6ae:	2328      	movs	r3, #40	; 0x28
 800d6b0:	33ff      	adds	r3, #255	; 0xff
 800d6b2:	18fb      	adds	r3, r7, r3
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	e061      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	1d99      	adds	r1, r3, #6
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	3309      	adds	r3, #9
 800d6c0:	001a      	movs	r2, r3
 800d6c2:	4b30      	ldr	r3, [pc, #192]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	2528      	movs	r5, #40	; 0x28
 800d6c8:	35ff      	adds	r5, #255	; 0xff
 800d6ca:	197c      	adds	r4, r7, r5
 800d6cc:	2006      	movs	r0, #6
 800d6ce:	f7ff fbb7 	bl	800ce40 <DeriveSessionKey10x>
 800d6d2:	0003      	movs	r3, r0
 800d6d4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6d6:	197b      	adds	r3, r7, r5
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d004      	beq.n	800d6e8 <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 800d6de:	2328      	movs	r3, #40	; 0x28
 800d6e0:	33ff      	adds	r3, #255	; 0xff
 800d6e2:	18fb      	adds	r3, r7, r3
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	e049      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	1d99      	adds	r1, r3, #6
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	3309      	adds	r3, #9
 800d6f0:	001a      	movs	r2, r3
 800d6f2:	4b24      	ldr	r3, [pc, #144]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2528      	movs	r5, #40	; 0x28
 800d6f8:	35ff      	adds	r5, #255	; 0xff
 800d6fa:	197c      	adds	r4, r7, r5
 800d6fc:	2004      	movs	r0, #4
 800d6fe:	f7ff fb9f 	bl	800ce40 <DeriveSessionKey10x>
 800d702:	0003      	movs	r3, r0
 800d704:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d706:	197b      	adds	r3, r7, r5
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d004      	beq.n	800d718 <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 800d70e:	2328      	movs	r3, #40	; 0x28
 800d710:	33ff      	adds	r3, #255	; 0xff
 800d712:	18fb      	adds	r3, r7, r3
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	e031      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	1d99      	adds	r1, r3, #6
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	3309      	adds	r3, #9
 800d720:	001a      	movs	r2, r3
 800d722:	4b18      	ldr	r3, [pc, #96]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	2528      	movs	r5, #40	; 0x28
 800d728:	35ff      	adds	r5, #255	; 0xff
 800d72a:	197c      	adds	r4, r7, r5
 800d72c:	2005      	movs	r0, #5
 800d72e:	f7ff fb87 	bl	800ce40 <DeriveSessionKey10x>
 800d732:	0003      	movs	r3, r0
 800d734:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d736:	197b      	adds	r3, r7, r5
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d004      	beq.n	800d748 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 800d73e:	2328      	movs	r3, #40	; 0x28
 800d740:	33ff      	adds	r3, #255	; 0xff
 800d742:	18fb      	adds	r3, r7, r3
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	e019      	b.n	800d77c <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 800d748:	4b0e      	ldr	r3, [pc, #56]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 800d74e:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	2200      	movs	r2, #0
 800d754:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d756:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	2201      	movs	r2, #1
 800d75c:	4252      	negs	r2, r2
 800d75e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d760:	4b08      	ldr	r3, [pc, #32]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	2201      	movs	r2, #1
 800d766:	4252      	negs	r2, r2
 800d768:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d76a:	4b06      	ldr	r3, [pc, #24]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	2201      	movs	r2, #1
 800d770:	4252      	negs	r2, r2
 800d772:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d774:	4b03      	ldr	r3, [pc, #12]	; (800d784 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	0018      	movs	r0, r3
 800d77e:	46bd      	mov	sp, r7
 800d780:	b04d      	add	sp, #308	; 0x134
 800d782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d784:	20000a28 	.word	0x20000a28

0800d788 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800d788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d78a:	b08f      	sub	sp, #60	; 0x3c
 800d78c:	af06      	add	r7, sp, #24
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	0008      	movs	r0, r1
 800d792:	0011      	movs	r1, r2
 800d794:	607b      	str	r3, [r7, #4]
 800d796:	230b      	movs	r3, #11
 800d798:	18fb      	adds	r3, r7, r3
 800d79a:	1c02      	adds	r2, r0, #0
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	230a      	movs	r3, #10
 800d7a0:	18fb      	adds	r3, r7, r3
 800d7a2:	1c0a      	adds	r2, r1, #0
 800d7a4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d7a6:	231e      	movs	r3, #30
 800d7a8:	18fb      	adds	r3, r7, r3
 800d7aa:	2210      	movs	r2, #16
 800d7ac:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 800d7ae:	231f      	movs	r3, #31
 800d7b0:	18fb      	adds	r3, r7, r3
 800d7b2:	2207      	movs	r2, #7
 800d7b4:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7bc:	2307      	movs	r3, #7
 800d7be:	e0ff      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 800d7c0:	4b81      	ldr	r3, [pc, #516]	; (800d9c8 <LoRaMacCryptoSecureMessage+0x240>)
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d201      	bcs.n	800d7d0 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 800d7cc:	2305      	movs	r3, #5
 800d7ce:	e0f7      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2220      	movs	r2, #32
 800d7d4:	5c9b      	ldrb	r3, [r3, r2]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d103      	bne.n	800d7e2 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 800d7da:	231f      	movs	r3, #31
 800d7dc:	18fb      	adds	r3, r7, r3
 800d7de:	2206      	movs	r2, #6
 800d7e0:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 800d7e2:	4b79      	ldr	r3, [pc, #484]	; (800d9c8 <LoRaMacCryptoSecureMessage+0x240>)
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d93e      	bls.n	800d86c <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2228      	movs	r2, #40	; 0x28
 800d7f6:	5c9b      	ldrb	r3, [r3, r2]
 800d7f8:	b299      	uxth	r1, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	689d      	ldr	r5, [r3, #8]
 800d7fe:	261e      	movs	r6, #30
 800d800:	19bc      	adds	r4, r7, r6
 800d802:	231f      	movs	r3, #31
 800d804:	18fb      	adds	r3, r7, r3
 800d806:	781a      	ldrb	r2, [r3, #0]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	9301      	str	r3, [sp, #4]
 800d80c:	2300      	movs	r3, #0
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	002b      	movs	r3, r5
 800d812:	f7fe fdd7 	bl	800c3c4 <PayloadEncrypt>
 800d816:	0003      	movs	r3, r0
 800d818:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d81a:	19bb      	adds	r3, r7, r6
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d003      	beq.n	800d82a <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 800d822:	231e      	movs	r3, #30
 800d824:	18fb      	adds	r3, r7, r3
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	e0ca      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800d82a:	4b67      	ldr	r3, [pc, #412]	; (800d9c8 <LoRaMacCryptoSecureMessage+0x240>)
 800d82c:	789b      	ldrb	r3, [r3, #2]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d11c      	bne.n	800d86c <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	7b1b      	ldrb	r3, [r3, #12]
 800d836:	071b      	lsls	r3, r3, #28
 800d838:	0f1b      	lsrs	r3, r3, #28
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	b298      	uxth	r0, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6899      	ldr	r1, [r3, #8]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	3310      	adds	r3, #16
 800d846:	251e      	movs	r5, #30
 800d848:	197c      	adds	r4, r7, r5
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	2300      	movs	r3, #0
 800d852:	2200      	movs	r2, #0
 800d854:	f7fe feb8 	bl	800c5c8 <FOptsEncrypt>
 800d858:	0003      	movs	r3, r0
 800d85a:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d85c:	197b      	adds	r3, r7, r5
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 800d864:	231e      	movs	r3, #30
 800d866:	18fb      	adds	r3, r7, r3
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	e0a9      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 800d86c:	4b56      	ldr	r3, [pc, #344]	; (800d9c8 <LoRaMacCryptoSecureMessage+0x240>)
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d874:	4b54      	ldr	r3, [pc, #336]	; (800d9c8 <LoRaMacCryptoSecureMessage+0x240>)
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	0018      	movs	r0, r3
 800d87e:	f000 fd75 	bl	800e36c <LoRaMacSerializerData>
 800d882:	1e03      	subs	r3, r0, #0
 800d884:	d001      	beq.n	800d88a <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d886:	230e      	movs	r3, #14
 800d888:	e09a      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800d88a:	4b4f      	ldr	r3, [pc, #316]	; (800d9c8 <LoRaMacCryptoSecureMessage+0x240>)
 800d88c:	789b      	ldrb	r3, [r3, #2]
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d16a      	bne.n	800d968 <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	791b      	ldrb	r3, [r3, #4]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	3b04      	subs	r3, #4
 800d8a6:	b299      	uxth	r1, r3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7b1b      	ldrb	r3, [r3, #12]
 800d8ac:	069b      	lsls	r3, r3, #26
 800d8ae:	0fdb      	lsrs	r3, r3, #31
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	1e5a      	subs	r2, r3, #1
 800d8b4:	4193      	sbcs	r3, r2
 800d8b6:	b2dd      	uxtb	r5, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	89d2      	ldrh	r2, [r2, #14]
 800d8c0:	0016      	movs	r6, r2
 800d8c2:	221e      	movs	r2, #30
 800d8c4:	18bc      	adds	r4, r7, r2
 800d8c6:	2218      	movs	r2, #24
 800d8c8:	18ba      	adds	r2, r7, r2
 800d8ca:	9204      	str	r2, [sp, #16]
 800d8cc:	9603      	str	r6, [sp, #12]
 800d8ce:	9302      	str	r3, [sp, #8]
 800d8d0:	230a      	movs	r3, #10
 800d8d2:	18fb      	adds	r3, r7, r3
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	230b      	movs	r3, #11
 800d8da:	18fb      	adds	r3, r7, r3
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	002b      	movs	r3, r5
 800d8e2:	2205      	movs	r2, #5
 800d8e4:	f7ff f9da 	bl	800cc9c <ComputeCmacB1>
 800d8e8:	0003      	movs	r3, r0
 800d8ea:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8ec:	221e      	movs	r2, #30
 800d8ee:	18bb      	adds	r3, r7, r2
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 800d8f6:	231e      	movs	r3, #30
 800d8f8:	18fb      	adds	r3, r7, r3
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	e060      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	791b      	ldrb	r3, [r3, #4]
 800d906:	b29b      	uxth	r3, r3
 800d908:	3b04      	subs	r3, #4
 800d90a:	b299      	uxth	r1, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7b1b      	ldrb	r3, [r3, #12]
 800d910:	069b      	lsls	r3, r3, #26
 800d912:	0fdb      	lsrs	r3, r3, #31
 800d914:	b2db      	uxtb	r3, r3
 800d916:	1e5a      	subs	r2, r3, #1
 800d918:	4193      	sbcs	r3, r2
 800d91a:	b2dd      	uxtb	r5, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	89d2      	ldrh	r2, [r2, #14]
 800d924:	0016      	movs	r6, r2
 800d926:	221e      	movs	r2, #30
 800d928:	18bc      	adds	r4, r7, r2
 800d92a:	2214      	movs	r2, #20
 800d92c:	18ba      	adds	r2, r7, r2
 800d92e:	9203      	str	r2, [sp, #12]
 800d930:	9602      	str	r6, [sp, #8]
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	2300      	movs	r3, #0
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	002b      	movs	r3, r5
 800d93a:	2204      	movs	r2, #4
 800d93c:	f7fe ffd4 	bl	800c8e8 <ComputeCmacB0>
 800d940:	0003      	movs	r3, r0
 800d942:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d944:	221e      	movs	r2, #30
 800d946:	18bb      	adds	r3, r7, r2
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 800d94e:	231e      	movs	r3, #30
 800d950:	18fb      	adds	r3, r7, r3
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	e034      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	041a      	lsls	r2, r3, #16
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	041b      	lsls	r3, r3, #16
 800d95e:	0c1b      	lsrs	r3, r3, #16
 800d960:	431a      	orrs	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	62da      	str	r2, [r3, #44]	; 0x2c
 800d966:	e022      	b.n	800d9ae <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6818      	ldr	r0, [r3, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	791b      	ldrb	r3, [r3, #4]
 800d970:	b29b      	uxth	r3, r3
 800d972:	3b04      	subs	r3, #4
 800d974:	b299      	uxth	r1, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	89d2      	ldrh	r2, [r2, #14]
 800d97e:	0015      	movs	r5, r2
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	322c      	adds	r2, #44	; 0x2c
 800d984:	261e      	movs	r6, #30
 800d986:	19bc      	adds	r4, r7, r6
 800d988:	9203      	str	r2, [sp, #12]
 800d98a:	9502      	str	r5, [sp, #8]
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	2300      	movs	r3, #0
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	2300      	movs	r3, #0
 800d994:	2206      	movs	r2, #6
 800d996:	f7fe ffa7 	bl	800c8e8 <ComputeCmacB0>
 800d99a:	0003      	movs	r3, r0
 800d99c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d99e:	19bb      	adds	r3, r7, r6
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 800d9a6:	231e      	movs	r3, #30
 800d9a8:	18fb      	adds	r3, r7, r3
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	e008      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	0018      	movs	r0, r3
 800d9b2:	f000 fcdb 	bl	800e36c <LoRaMacSerializerData>
 800d9b6:	1e03      	subs	r3, r0, #0
 800d9b8:	d001      	beq.n	800d9be <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d9ba:	230e      	movs	r3, #14
 800d9bc:	e000      	b.n	800d9c0 <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	b009      	add	sp, #36	; 0x24
 800d9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9c8:	20000a28 	.word	0x20000a28

0800d9cc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ce:	b08b      	sub	sp, #44	; 0x2c
 800d9d0:	af04      	add	r7, sp, #16
 800d9d2:	60b9      	str	r1, [r7, #8]
 800d9d4:	0011      	movs	r1, r2
 800d9d6:	607b      	str	r3, [r7, #4]
 800d9d8:	230f      	movs	r3, #15
 800d9da:	18fb      	adds	r3, r7, r3
 800d9dc:	1c02      	adds	r2, r0, #0
 800d9de:	701a      	strb	r2, [r3, #0]
 800d9e0:	230e      	movs	r3, #14
 800d9e2:	18fb      	adds	r3, r7, r3
 800d9e4:	1c0a      	adds	r2, r1, #0
 800d9e6:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d101      	bne.n	800d9f2 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d9ee:	2307      	movs	r3, #7
 800d9f0:	e0cf      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	230e      	movs	r3, #14
 800d9f6:	18fb      	adds	r3, r7, r3
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	0011      	movs	r1, r2
 800d9fc:	0018      	movs	r0, r3
 800d9fe:	f7ff fb37 	bl	800d070 <CheckFCntDown>
 800da02:	0003      	movs	r3, r0
 800da04:	001a      	movs	r2, r3
 800da06:	2301      	movs	r3, #1
 800da08:	4053      	eors	r3, r2
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 800da10:	2305      	movs	r3, #5
 800da12:	e0be      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800da14:	2315      	movs	r3, #21
 800da16:	18fb      	adds	r3, r7, r3
 800da18:	2210      	movs	r2, #16
 800da1a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 800da1c:	2317      	movs	r3, #23
 800da1e:	18fb      	adds	r3, r7, r3
 800da20:	2207      	movs	r2, #7
 800da22:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 800da24:	2314      	movs	r3, #20
 800da26:	18fb      	adds	r3, r7, r3
 800da28:	2205      	movs	r2, #5
 800da2a:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	0018      	movs	r0, r3
 800da30:	f000 faef 	bl	800e012 <LoRaMacParserData>
 800da34:	1e03      	subs	r3, r0, #0
 800da36:	d001      	beq.n	800da3c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800da38:	230d      	movs	r3, #13
 800da3a:	e0aa      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800da3c:	2515      	movs	r5, #21
 800da3e:	197c      	adds	r4, r7, r5
 800da40:	2310      	movs	r3, #16
 800da42:	18fa      	adds	r2, r7, r3
 800da44:	230f      	movs	r3, #15
 800da46:	18fb      	adds	r3, r7, r3
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	0011      	movs	r1, r2
 800da4c:	0018      	movs	r0, r3
 800da4e:	f7ff f9c5 	bl	800cddc <GetKeyAddrItem>
 800da52:	0003      	movs	r3, r0
 800da54:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da56:	197b      	adds	r3, r7, r5
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 800da5e:	2315      	movs	r3, #21
 800da60:	18fb      	adds	r3, r7, r3
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	e095      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	2317      	movs	r3, #23
 800da6a:	18fb      	adds	r3, r7, r3
 800da6c:	7852      	ldrb	r2, [r2, #1]
 800da6e:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	429a      	cmp	r2, r3
 800da78:	d001      	beq.n	800da7e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800da7a:	2302      	movs	r3, #2
 800da7c:	e089      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800da7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da80:	7b1b      	ldrb	r3, [r3, #12]
 800da82:	069b      	lsls	r3, r3, #26
 800da84:	0fdb      	lsrs	r3, r3, #31
 800da86:	b2db      	uxtb	r3, r3
 800da88:	001a      	movs	r2, r3
 800da8a:	2316      	movs	r3, #22
 800da8c:	18fb      	adds	r3, r7, r3
 800da8e:	1e51      	subs	r1, r2, #1
 800da90:	418a      	sbcs	r2, r1
 800da92:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 800da94:	4b41      	ldr	r3, [pc, #260]	; (800db9c <LoRaMacCryptoUnsecureMessage+0x1d0>)
 800da96:	789b      	ldrb	r3, [r3, #2]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d103      	bne.n	800daa4 <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800da9c:	2316      	movs	r3, #22
 800da9e:	18fb      	adds	r3, r7, r3
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800daa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa6:	6818      	ldr	r0, [r3, #0]
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	791b      	ldrb	r3, [r3, #4]
 800daac:	b29b      	uxth	r3, r3
 800daae:	3b04      	subs	r3, #4
 800dab0:	b299      	uxth	r1, r3
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab6:	2615      	movs	r6, #21
 800dab8:	19bc      	adds	r4, r7, r6
 800daba:	2216      	movs	r2, #22
 800dabc:	18ba      	adds	r2, r7, r2
 800dabe:	7815      	ldrb	r5, [r2, #0]
 800dac0:	2214      	movs	r2, #20
 800dac2:	18ba      	adds	r2, r7, r2
 800dac4:	7812      	ldrb	r2, [r2, #0]
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	9302      	str	r3, [sp, #8]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	2301      	movs	r3, #1
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	002b      	movs	r3, r5
 800dad6:	f7fe ffa3 	bl	800ca20 <VerifyCmacB0>
 800dada:	0003      	movs	r3, r0
 800dadc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dade:	19bb      	adds	r3, r7, r6
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 800dae6:	2315      	movs	r3, #21
 800dae8:	18fb      	adds	r3, r7, r3
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	e051      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	2220      	movs	r2, #32
 800daf2:	5c9b      	ldrb	r3, [r3, r2]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d103      	bne.n	800db00 <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 800daf8:	2317      	movs	r3, #23
 800dafa:	18fb      	adds	r3, r7, r3
 800dafc:	2206      	movs	r2, #6
 800dafe:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	2228      	movs	r2, #40	; 0x28
 800db08:	5c9b      	ldrb	r3, [r3, r2]
 800db0a:	b299      	uxth	r1, r3
 800db0c:	2615      	movs	r6, #21
 800db0e:	19bc      	adds	r4, r7, r6
 800db10:	68bd      	ldr	r5, [r7, #8]
 800db12:	2317      	movs	r3, #23
 800db14:	18fb      	adds	r3, r7, r3
 800db16:	781a      	ldrb	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	2301      	movs	r3, #1
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	002b      	movs	r3, r5
 800db22:	f7fe fc4f 	bl	800c3c4 <PayloadEncrypt>
 800db26:	0003      	movs	r3, r0
 800db28:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db2a:	19bb      	adds	r3, r7, r6
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 800db32:	2315      	movs	r3, #21
 800db34:	18fb      	adds	r3, r7, r3
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	e02b      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800db3a:	4b18      	ldr	r3, [pc, #96]	; (800db9c <LoRaMacCryptoUnsecureMessage+0x1d0>)
 800db3c:	789b      	ldrb	r3, [r3, #2]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d11e      	bne.n	800db80 <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	7b1b      	ldrb	r3, [r3, #12]
 800db46:	071b      	lsls	r3, r3, #28
 800db48:	0f1b      	lsrs	r3, r3, #28
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	b298      	uxth	r0, r3
 800db4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db50:	3310      	adds	r3, #16
 800db52:	2515      	movs	r5, #21
 800db54:	197c      	adds	r4, r7, r5
 800db56:	220e      	movs	r2, #14
 800db58:	18ba      	adds	r2, r7, r2
 800db5a:	7812      	ldrb	r2, [r2, #0]
 800db5c:	68b9      	ldr	r1, [r7, #8]
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	0013      	movs	r3, r2
 800db66:	2201      	movs	r2, #1
 800db68:	f7fe fd2e 	bl	800c5c8 <FOptsEncrypt>
 800db6c:	0003      	movs	r3, r0
 800db6e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db70:	197b      	adds	r3, r7, r5
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d003      	beq.n	800db80 <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 800db78:	2315      	movs	r3, #21
 800db7a:	18fb      	adds	r3, r7, r3
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	e008      	b.n	800db92 <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	230e      	movs	r3, #14
 800db84:	18fb      	adds	r3, r7, r3
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	0011      	movs	r1, r2
 800db8a:	0018      	movs	r0, r3
 800db8c:	f7ff face 	bl	800d12c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800db90:	2300      	movs	r3, #0
}
 800db92:	0018      	movs	r0, r3
 800db94:	46bd      	mov	sp, r7
 800db96:	b007      	add	sp, #28
 800db98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db9a:	46c0      	nop			; (mov r8, r8)
 800db9c:	20000a28 	.word	0x20000a28

0800dba0 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 800dba4:	4b04      	ldr	r3, [pc, #16]	; (800dbb8 <NvmCtxChanged+0x18>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <NvmCtxChanged+0x18>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4798      	blx	r3
    }
}
 800dbb2:	46c0      	nop			; (mov r8, r8)
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20000a58 	.word	0x20000a58

0800dbbc <LoRaMacGetFCntDown>:
    return &FCntHandlerNvmCtx;
}

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60ba      	str	r2, [r7, #8]
 800dbc4:	607b      	str	r3, [r7, #4]
 800dbc6:	230f      	movs	r3, #15
 800dbc8:	18fb      	adds	r3, r7, r3
 800dbca:	1c02      	adds	r2, r0, #0
 800dbcc:	701a      	strb	r2, [r3, #0]
 800dbce:	230e      	movs	r3, #14
 800dbd0:	18fb      	adds	r3, r7, r3
 800dbd2:	1c0a      	adds	r2, r1, #0
 800dbd4:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d005      	beq.n	800dbf0 <LoRaMacGetFCntDown+0x34>
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <LoRaMacGetFCntDown+0x34>
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d101      	bne.n	800dbf4 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 800dbf0:	2304      	movs	r3, #4
 800dbf2:	e088      	b.n	800dd06 <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800dbf4:	230f      	movs	r3, #15
 800dbf6:	18fb      	adds	r3, r7, r3
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	d843      	bhi.n	800dc86 <LoRaMacGetFCntDown+0xca>
 800dbfe:	009a      	lsls	r2, r3, #2
 800dc00:	4b43      	ldr	r3, [pc, #268]	; (800dd10 <LoRaMacGetFCntDown+0x154>)
 800dc02:	18d3      	adds	r3, r2, r3
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800dc08:	1d3b      	adds	r3, r7, #4
 800dc0a:	789b      	ldrb	r3, [r3, #2]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d117      	bne.n	800dc40 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800dc10:	230e      	movs	r3, #14
 800dc12:	18fb      	adds	r3, r7, r3
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d004      	beq.n	800dc24 <LoRaMacGetFCntDown+0x68>
 800dc1a:	230e      	movs	r3, #14
 800dc1c:	18fb      	adds	r3, r7, r3
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d106      	bne.n	800dc32 <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	2202      	movs	r2, #2
 800dc28:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 800dc2a:	4b3a      	ldr	r3, [pc, #232]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 800dc30:	e02b      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	2201      	movs	r2, #1
 800dc36:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 800dc38:	4b36      	ldr	r3, [pc, #216]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	617b      	str	r3, [r7, #20]
            break;
 800dc3e:	e024      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	2203      	movs	r2, #3
 800dc44:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 800dc46:	4b33      	ldr	r3, [pc, #204]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	617b      	str	r3, [r7, #20]
            break;
 800dc4c:	e01d      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	2204      	movs	r2, #4
 800dc52:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 800dc54:	4b2f      	ldr	r3, [pc, #188]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	617b      	str	r3, [r7, #20]
            break;
 800dc5a:	e016      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	2205      	movs	r2, #5
 800dc60:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 800dc62:	4b2c      	ldr	r3, [pc, #176]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	617b      	str	r3, [r7, #20]
            break;
 800dc68:	e00f      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	2206      	movs	r2, #6
 800dc6e:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 800dc70:	4b28      	ldr	r3, [pc, #160]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc72:	69db      	ldr	r3, [r3, #28]
 800dc74:	617b      	str	r3, [r7, #20]
            break;
 800dc76:	e008      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	2207      	movs	r2, #7
 800dc7c:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 800dc7e:	4b25      	ldr	r3, [pc, #148]	; (800dd14 <LoRaMacGetFCntDown+0x158>)
 800dc80:	69db      	ldr	r3, [r3, #28]
 800dc82:	617b      	str	r3, [r7, #20]
            break;
 800dc84:	e001      	b.n	800dc8a <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 800dc86:	2305      	movs	r3, #5
 800dc88:	e03d      	b.n	800dd06 <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	d105      	bne.n	800dc9c <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	89db      	ldrh	r3, [r3, #14]
 800dc94:	001a      	movs	r2, r3
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	e023      	b.n	800dce4 <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	89db      	ldrh	r3, [r3, #14]
 800dca0:	001a      	movs	r2, r3
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	041b      	lsls	r3, r3, #16
 800dca6:	0c1b      	lsrs	r3, r3, #16
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd05      	ble.n	800dcbe <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 800dcb2:	693a      	ldr	r2, [r7, #16]
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	18d2      	adds	r2, r2, r3
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	e012      	b.n	800dce4 <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d104      	bne.n	800dcce <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e01b      	b.n	800dd06 <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	0c1b      	lsrs	r3, r3, #16
 800dcd2:	041b      	lsls	r3, r3, #16
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	89d2      	ldrh	r2, [r2, #14]
 800dcd8:	189b      	adds	r3, r3, r2
 800dcda:	2280      	movs	r2, #128	; 0x80
 800dcdc:	0252      	lsls	r2, r2, #9
 800dcde:	189a      	adds	r2, r3, r2
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 800dce4:	1d3b      	adds	r3, r7, #4
 800dce6:	789b      	ldrb	r3, [r3, #2]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10b      	bne.n	800dd04 <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	001a      	movs	r2, r3
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	1ad2      	subs	r2, r2, r3
 800dcf6:	2320      	movs	r3, #32
 800dcf8:	18fb      	adds	r3, r7, r3
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	db01      	blt.n	800dd04 <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 800dd00:	2302      	movs	r3, #2
 800dd02:	e000      	b.n	800dd06 <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	0018      	movs	r0, r3
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	b006      	add	sp, #24
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	46c0      	nop			; (mov r8, r8)
 800dd10:	0801bb54 	.word	0x0801bb54
 800dd14:	20000a38 	.word	0x20000a38

0800dd18 <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	0002      	movs	r2, r0
 800dd20:	6039      	str	r1, [r7, #0]
 800dd22:	1dfb      	adds	r3, r7, #7
 800dd24:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 800dd26:	1dfb      	adds	r3, r7, #7
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	2b07      	cmp	r3, #7
 800dd2c:	d822      	bhi.n	800dd74 <LoRaMacSetFCntDown+0x5c>
 800dd2e:	009a      	lsls	r2, r3, #2
 800dd30:	4b15      	ldr	r3, [pc, #84]	; (800dd88 <LoRaMacSetFCntDown+0x70>)
 800dd32:	18d3      	adds	r3, r2, r3
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e020      	b.n	800dd7e <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 800dd3c:	4b13      	ldr	r3, [pc, #76]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	605a      	str	r2, [r3, #4]
            break;
 800dd42:	e019      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 800dd44:	4b11      	ldr	r3, [pc, #68]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	609a      	str	r2, [r3, #8]
            break;
 800dd4a:	e015      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 800dd4c:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	60da      	str	r2, [r3, #12]
            break;
 800dd52:	e011      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 800dd54:	4b0d      	ldr	r3, [pc, #52]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	611a      	str	r2, [r3, #16]
            break;
 800dd5a:	e00d      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd5e:	683a      	ldr	r2, [r7, #0]
 800dd60:	615a      	str	r2, [r3, #20]
            break;
 800dd62:	e009      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 800dd64:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	619a      	str	r2, [r3, #24]
            break;
 800dd6a:	e005      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 800dd6c:	4b07      	ldr	r3, [pc, #28]	; (800dd8c <LoRaMacSetFCntDown+0x74>)
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	61da      	str	r2, [r3, #28]
            break;
 800dd72:	e001      	b.n	800dd78 <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 800dd74:	2305      	movs	r3, #5
 800dd76:	e002      	b.n	800dd7e <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 800dd78:	f7ff ff12 	bl	800dba0 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	0018      	movs	r0, r3
 800dd80:	46bd      	mov	sp, r7
 800dd82:	b002      	add	sp, #8
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	0801bb68 	.word	0x0801bb68
 800dd8c:	20000a38 	.word	0x20000a38

0800dd90 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 800dd9e:	2304      	movs	r3, #4
 800dda0:	e005      	b.n	800ddae <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 800dda2:	4b05      	ldr	r3, [pc, #20]	; (800ddb8 <LoRaMacGetFCntUp+0x28>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	1c5a      	adds	r2, r3, #1
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	0018      	movs	r0, r3
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	b002      	add	sp, #8
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	46c0      	nop			; (mov r8, r8)
 800ddb8:	20000a38 	.word	0x20000a38

0800ddbc <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 800ddc4:	4b04      	ldr	r3, [pc, #16]	; (800ddd8 <LoRaMacSetFCntUp+0x1c>)
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 800ddca:	f7ff fee9 	bl	800dba0 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	b002      	add	sp, #8
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20000a38 	.word	0x20000a38

0800dddc <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 800dde0:	4b12      	ldr	r3, [pc, #72]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800dde6:	4b11      	ldr	r3, [pc, #68]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800dde8:	2201      	movs	r2, #1
 800ddea:	4252      	negs	r2, r2
 800ddec:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ddee:	4b0f      	ldr	r3, [pc, #60]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	4252      	negs	r2, r2
 800ddf4:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ddf6:	4b0d      	ldr	r3, [pc, #52]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	4252      	negs	r2, r2
 800ddfc:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800ddfe:	4b0b      	ldr	r3, [pc, #44]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800de00:	2201      	movs	r2, #1
 800de02:	4252      	negs	r2, r2
 800de04:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800de06:	4b09      	ldr	r3, [pc, #36]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800de08:	2201      	movs	r2, #1
 800de0a:	4252      	negs	r2, r2
 800de0c:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800de0e:	4b07      	ldr	r3, [pc, #28]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800de10:	2201      	movs	r2, #1
 800de12:	4252      	negs	r2, r2
 800de14:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800de16:	4b05      	ldr	r3, [pc, #20]	; (800de2c <LoRaMacResetFCnts+0x50>)
 800de18:	2201      	movs	r2, #1
 800de1a:	4252      	negs	r2, r2
 800de1c:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 800de1e:	f7ff febf 	bl	800dba0 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800de22:	2300      	movs	r3, #0
}
 800de24:	0018      	movs	r0, r3
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	46c0      	nop			; (mov r8, r8)
 800de2c:	20000a38 	.word	0x20000a38

0800de30 <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800de30:	b590      	push	{r4, r7, lr}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d003      	beq.n	800de46 <LoRaMacParserJoinAccept+0x16>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d101      	bne.n	800de4a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800de46:	2302      	movs	r3, #2
 800de48:	e0df      	b.n	800e00a <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 800de4a:	240e      	movs	r4, #14
 800de4c:	193b      	adds	r3, r7, r4
 800de4e:	2200      	movs	r2, #0
 800de50:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	193b      	adds	r3, r7, r4
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	1939      	adds	r1, r7, r4
 800de5c:	1c58      	adds	r0, r3, #1
 800de5e:	8008      	strh	r0, [r1, #0]
 800de60:	18d3      	adds	r3, r2, r3
 800de62:	781a      	ldrb	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	1d98      	adds	r0, r3, #6
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	193b      	adds	r3, r7, r4
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	18d3      	adds	r3, r2, r3
 800de76:	2203      	movs	r2, #3
 800de78:	0019      	movs	r1, r3
 800de7a:	f002 ffc9 	bl	8010e10 <memcpy1>
    bufItr = bufItr + 3;
 800de7e:	193b      	adds	r3, r7, r4
 800de80:	193a      	adds	r2, r7, r4
 800de82:	8812      	ldrh	r2, [r2, #0]
 800de84:	3203      	adds	r2, #3
 800de86:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3309      	adds	r3, #9
 800de8c:	0018      	movs	r0, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	193b      	adds	r3, r7, r4
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	18d3      	adds	r3, r2, r3
 800de98:	2203      	movs	r2, #3
 800de9a:	0019      	movs	r1, r3
 800de9c:	f002 ffb8 	bl	8010e10 <memcpy1>
    bufItr = bufItr + 3;
 800dea0:	193b      	adds	r3, r7, r4
 800dea2:	193a      	adds	r2, r7, r4
 800dea4:	8812      	ldrh	r2, [r2, #0]
 800dea6:	3203      	adds	r2, #3
 800dea8:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	193b      	adds	r3, r7, r4
 800deb0:	881b      	ldrh	r3, [r3, #0]
 800deb2:	1939      	adds	r1, r7, r4
 800deb4:	1c58      	adds	r0, r3, #1
 800deb6:	8008      	strh	r0, [r1, #0]
 800deb8:	18d3      	adds	r3, r2, r3
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	001a      	movs	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	193b      	adds	r3, r7, r4
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	1939      	adds	r1, r7, r4
 800decc:	1c58      	adds	r0, r3, #1
 800dece:	8008      	strh	r0, [r1, #0]
 800ded0:	18d3      	adds	r3, r2, r3
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	021a      	lsls	r2, r3, #8
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	431a      	orrs	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	193b      	adds	r3, r7, r4
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	1939      	adds	r1, r7, r4
 800deea:	1c58      	adds	r0, r3, #1
 800deec:	8008      	strh	r0, [r1, #0]
 800deee:	18d3      	adds	r3, r2, r3
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	041a      	lsls	r2, r3, #16
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	193b      	adds	r3, r7, r4
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	1939      	adds	r1, r7, r4
 800df08:	1c58      	adds	r0, r3, #1
 800df0a:	8008      	strh	r0, [r1, #0]
 800df0c:	18d3      	adds	r3, r2, r3
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	061a      	lsls	r2, r3, #24
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	431a      	orrs	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	193b      	adds	r3, r7, r4
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	1939      	adds	r1, r7, r4
 800df26:	1c58      	adds	r0, r3, #1
 800df28:	8008      	strh	r0, [r1, #0]
 800df2a:	18d3      	adds	r3, r2, r3
 800df2c:	781a      	ldrb	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	193b      	adds	r3, r7, r4
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	1939      	adds	r1, r7, r4
 800df3c:	1c58      	adds	r0, r3, #1
 800df3e:	8008      	strh	r0, [r1, #0]
 800df40:	18d3      	adds	r3, r2, r3
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	791b      	ldrb	r3, [r3, #4]
 800df4c:	1f1a      	subs	r2, r3, #4
 800df4e:	193b      	adds	r3, r7, r4
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	2b10      	cmp	r3, #16
 800df56:	d112      	bne.n	800df7e <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3312      	adds	r3, #18
 800df5c:	0018      	movs	r0, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	240e      	movs	r4, #14
 800df64:	193b      	adds	r3, r7, r4
 800df66:	881b      	ldrh	r3, [r3, #0]
 800df68:	18d3      	adds	r3, r2, r3
 800df6a:	2210      	movs	r2, #16
 800df6c:	0019      	movs	r1, r3
 800df6e:	f002 ff4f 	bl	8010e10 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800df72:	193b      	adds	r3, r7, r4
 800df74:	193a      	adds	r2, r7, r4
 800df76:	8812      	ldrh	r2, [r2, #0]
 800df78:	3210      	adds	r2, #16
 800df7a:	801a      	strh	r2, [r3, #0]
 800df7c:	e00a      	b.n	800df94 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	791b      	ldrb	r3, [r3, #4]
 800df82:	1f1a      	subs	r2, r3, #4
 800df84:	230e      	movs	r3, #14
 800df86:	18fb      	adds	r3, r7, r3
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dd01      	ble.n	800df94 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 800df90:	2301      	movs	r3, #1
 800df92:	e03a      	b.n	800e00a <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	240e      	movs	r4, #14
 800df9a:	193b      	adds	r3, r7, r4
 800df9c:	881b      	ldrh	r3, [r3, #0]
 800df9e:	1939      	adds	r1, r7, r4
 800dfa0:	1c58      	adds	r0, r3, #1
 800dfa2:	8008      	strh	r0, [r1, #0]
 800dfa4:	18d3      	adds	r3, r2, r3
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	001a      	movs	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	193b      	adds	r3, r7, r4
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	1939      	adds	r1, r7, r4
 800dfb8:	1c58      	adds	r0, r3, #1
 800dfba:	8008      	strh	r0, [r1, #0]
 800dfbc:	18d3      	adds	r3, r2, r3
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	021a      	lsls	r2, r3, #8
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc6:	431a      	orrs	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	193b      	adds	r3, r7, r4
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	1939      	adds	r1, r7, r4
 800dfd6:	1c58      	adds	r0, r3, #1
 800dfd8:	8008      	strh	r0, [r1, #0]
 800dfda:	18d3      	adds	r3, r2, r3
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	041a      	lsls	r2, r3, #16
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	193b      	adds	r3, r7, r4
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	1939      	adds	r1, r7, r4
 800dff4:	1c58      	adds	r0, r3, #1
 800dff6:	8008      	strh	r0, [r1, #0]
 800dff8:	18d3      	adds	r3, r2, r3
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	061a      	lsls	r2, r3, #24
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e002:	431a      	orrs	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	0018      	movs	r0, r3
 800e00c:	46bd      	mov	sp, r7
 800e00e:	b005      	add	sp, #20
 800e010:	bd90      	pop	{r4, r7, pc}

0800e012 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800e012:	b590      	push	{r4, r7, lr}
 800e014:	b085      	sub	sp, #20
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d003      	beq.n	800e028 <LoRaMacParserData+0x16>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800e028:	2302      	movs	r3, #2
 800e02a:	e100      	b.n	800e22e <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 800e02c:	240e      	movs	r4, #14
 800e02e:	193b      	adds	r3, r7, r4
 800e030:	2200      	movs	r2, #0
 800e032:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	193b      	adds	r3, r7, r4
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	1939      	adds	r1, r7, r4
 800e03e:	1c58      	adds	r0, r3, #1
 800e040:	8008      	strh	r0, [r1, #0]
 800e042:	18d3      	adds	r3, r2, r3
 800e044:	781a      	ldrb	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	193b      	adds	r3, r7, r4
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	1939      	adds	r1, r7, r4
 800e054:	1c58      	adds	r0, r3, #1
 800e056:	8008      	strh	r0, [r1, #0]
 800e058:	18d3      	adds	r3, r2, r3
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	001a      	movs	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	193b      	adds	r3, r7, r4
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	1939      	adds	r1, r7, r4
 800e06c:	1c58      	adds	r0, r3, #1
 800e06e:	8008      	strh	r0, [r1, #0]
 800e070:	18d3      	adds	r3, r2, r3
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	021a      	lsls	r2, r3, #8
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	431a      	orrs	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	193b      	adds	r3, r7, r4
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	1939      	adds	r1, r7, r4
 800e08a:	1c58      	adds	r0, r3, #1
 800e08c:	8008      	strh	r0, [r1, #0]
 800e08e:	18d3      	adds	r3, r2, r3
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	041a      	lsls	r2, r3, #16
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	431a      	orrs	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	193b      	adds	r3, r7, r4
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	1939      	adds	r1, r7, r4
 800e0a8:	1c58      	adds	r0, r3, #1
 800e0aa:	8008      	strh	r0, [r1, #0]
 800e0ac:	18d3      	adds	r3, r2, r3
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	061a      	lsls	r2, r3, #24
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	193b      	adds	r3, r7, r4
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	1939      	adds	r1, r7, r4
 800e0c6:	1c58      	adds	r0, r3, #1
 800e0c8:	8008      	strh	r0, [r1, #0]
 800e0ca:	18d3      	adds	r3, r2, r3
 800e0cc:	781a      	ldrb	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	193b      	adds	r3, r7, r4
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	1939      	adds	r1, r7, r4
 800e0dc:	1c58      	adds	r0, r3, #1
 800e0de:	8008      	strh	r0, [r1, #0]
 800e0e0:	18d3      	adds	r3, r2, r3
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	193b      	adds	r3, r7, r4
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	1939      	adds	r1, r7, r4
 800e0f4:	1c58      	adds	r0, r3, #1
 800e0f6:	8008      	strh	r0, [r1, #0]
 800e0f8:	18d3      	adds	r3, r2, r3
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	0219      	lsls	r1, r3, #8
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	89db      	ldrh	r3, [r3, #14]
 800e102:	b21a      	sxth	r2, r3
 800e104:	b20b      	sxth	r3, r1
 800e106:	4313      	orrs	r3, r2
 800e108:	b21b      	sxth	r3, r3
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3310      	adds	r3, #16
 800e114:	0018      	movs	r0, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	193b      	adds	r3, r7, r4
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	18d1      	adds	r1, r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7b1b      	ldrb	r3, [r3, #12]
 800e124:	071b      	lsls	r3, r3, #28
 800e126:	0f1b      	lsrs	r3, r3, #28
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	001a      	movs	r2, r3
 800e12e:	f002 fe6f 	bl	8010e10 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	7b1b      	ldrb	r3, [r3, #12]
 800e136:	071b      	lsls	r3, r3, #28
 800e138:	0f1b      	lsrs	r3, r3, #28
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	b299      	uxth	r1, r3
 800e13e:	193b      	adds	r3, r7, r4
 800e140:	193a      	adds	r2, r7, r4
 800e142:	8812      	ldrh	r2, [r2, #0]
 800e144:	188a      	adds	r2, r1, r2
 800e146:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2220      	movs	r2, #32
 800e14c:	2100      	movs	r1, #0
 800e14e:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2228      	movs	r2, #40	; 0x28
 800e154:	2100      	movs	r1, #0
 800e156:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	791b      	ldrb	r3, [r3, #4]
 800e15c:	001a      	movs	r2, r3
 800e15e:	193b      	adds	r3, r7, r4
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	3b04      	subs	r3, #4
 800e166:	2b00      	cmp	r3, #0
 800e168:	dd2f      	ble.n	800e1ca <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	240e      	movs	r4, #14
 800e170:	193b      	adds	r3, r7, r4
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	1939      	adds	r1, r7, r4
 800e176:	1c58      	adds	r0, r3, #1
 800e178:	8008      	strh	r0, [r1, #0]
 800e17a:	18d3      	adds	r3, r2, r3
 800e17c:	7819      	ldrb	r1, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2220      	movs	r2, #32
 800e182:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	791a      	ldrb	r2, [r3, #4]
 800e188:	193b      	adds	r3, r7, r4
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	b2db      	uxtb	r3, r3
 800e192:	3b04      	subs	r3, #4
 800e194:	b2d9      	uxtb	r1, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2228      	movs	r2, #40	; 0x28
 800e19a:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	193b      	adds	r3, r7, r4
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	18d1      	adds	r1, r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2228      	movs	r2, #40	; 0x28
 800e1ae:	5c9b      	ldrb	r3, [r3, r2]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	001a      	movs	r2, r3
 800e1b4:	f002 fe2c 	bl	8010e10 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2228      	movs	r2, #40	; 0x28
 800e1bc:	5c9b      	ldrb	r3, [r3, r2]
 800e1be:	b299      	uxth	r1, r3
 800e1c0:	193b      	adds	r3, r7, r4
 800e1c2:	193a      	adds	r2, r7, r4
 800e1c4:	8812      	ldrh	r2, [r2, #0]
 800e1c6:	188a      	adds	r2, r1, r2
 800e1c8:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	791b      	ldrb	r3, [r3, #4]
 800e1d2:	3b04      	subs	r3, #4
 800e1d4:	18d3      	adds	r3, r2, r3
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	001a      	movs	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6819      	ldr	r1, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	791b      	ldrb	r3, [r3, #4]
 800e1ea:	3b03      	subs	r3, #3
 800e1ec:	18cb      	adds	r3, r1, r3
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	021b      	lsls	r3, r3, #8
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6819      	ldr	r1, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	791b      	ldrb	r3, [r3, #4]
 800e204:	3b02      	subs	r3, #2
 800e206:	18cb      	adds	r3, r1, r3
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	041b      	lsls	r3, r3, #16
 800e20c:	431a      	orrs	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6819      	ldr	r1, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	791b      	ldrb	r3, [r3, #4]
 800e21e:	3b01      	subs	r3, #1
 800e220:	18cb      	adds	r3, r1, r3
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	061b      	lsls	r3, r3, #24
 800e226:	431a      	orrs	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	0018      	movs	r0, r3
 800e230:	46bd      	mov	sp, r7
 800e232:	b005      	add	sp, #20
 800e234:	bd90      	pop	{r4, r7, pc}

0800e236 <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800e236:	b5b0      	push	{r4, r5, r7, lr}
 800e238:	b084      	sub	sp, #16
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d003      	beq.n	800e24c <LoRaMacSerializerJoinRequest+0x16>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e089      	b.n	800e364 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 800e250:	230e      	movs	r3, #14
 800e252:	18fb      	adds	r3, r7, r3
 800e254:	2200      	movs	r2, #0
 800e256:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	791b      	ldrb	r3, [r3, #4]
 800e25c:	2b16      	cmp	r3, #22
 800e25e:	d801      	bhi.n	800e264 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e260:	2302      	movs	r3, #2
 800e262:	e07f      	b.n	800e364 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	240e      	movs	r4, #14
 800e26a:	193b      	adds	r3, r7, r4
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	1939      	adds	r1, r7, r4
 800e270:	1c58      	adds	r0, r3, #1
 800e272:	8008      	strh	r0, [r1, #0]
 800e274:	18d3      	adds	r3, r2, r3
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	7952      	ldrb	r2, [r2, #5]
 800e27a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	193b      	adds	r3, r7, r4
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	18d0      	adds	r0, r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3306      	adds	r3, #6
 800e28a:	2208      	movs	r2, #8
 800e28c:	0019      	movs	r1, r3
 800e28e:	f002 fdda 	bl	8010e46 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800e292:	193b      	adds	r3, r7, r4
 800e294:	193a      	adds	r2, r7, r4
 800e296:	8812      	ldrh	r2, [r2, #0]
 800e298:	3208      	adds	r2, #8
 800e29a:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	193b      	adds	r3, r7, r4
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	18d0      	adds	r0, r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	330e      	adds	r3, #14
 800e2aa:	2208      	movs	r2, #8
 800e2ac:	0019      	movs	r1, r3
 800e2ae:	f002 fdca 	bl	8010e46 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 800e2b2:	193b      	adds	r3, r7, r4
 800e2b4:	0025      	movs	r5, r4
 800e2b6:	193a      	adds	r2, r7, r4
 800e2b8:	8812      	ldrh	r2, [r2, #0]
 800e2ba:	3208      	adds	r2, #8
 800e2bc:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	8ad8      	ldrh	r0, [r3, #22]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	197b      	adds	r3, r7, r5
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	1979      	adds	r1, r7, r5
 800e2cc:	1c5c      	adds	r4, r3, #1
 800e2ce:	800c      	strh	r4, [r1, #0]
 800e2d0:	18d3      	adds	r3, r2, r3
 800e2d2:	b2c2      	uxtb	r2, r0
 800e2d4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	8adb      	ldrh	r3, [r3, #22]
 800e2da:	0a1b      	lsrs	r3, r3, #8
 800e2dc:	b298      	uxth	r0, r3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	197b      	adds	r3, r7, r5
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	1979      	adds	r1, r7, r5
 800e2e8:	1c5c      	adds	r4, r3, #1
 800e2ea:	800c      	strh	r4, [r1, #0]
 800e2ec:	18d3      	adds	r3, r2, r3
 800e2ee:	b2c2      	uxtb	r2, r0
 800e2f0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6998      	ldr	r0, [r3, #24]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	197b      	adds	r3, r7, r5
 800e2fc:	881b      	ldrh	r3, [r3, #0]
 800e2fe:	1979      	adds	r1, r7, r5
 800e300:	1c5c      	adds	r4, r3, #1
 800e302:	800c      	strh	r4, [r1, #0]
 800e304:	18d3      	adds	r3, r2, r3
 800e306:	b2c2      	uxtb	r2, r0
 800e308:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	0a18      	lsrs	r0, r3, #8
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	197b      	adds	r3, r7, r5
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	1979      	adds	r1, r7, r5
 800e31a:	1c5c      	adds	r4, r3, #1
 800e31c:	800c      	strh	r4, [r1, #0]
 800e31e:	18d3      	adds	r3, r2, r3
 800e320:	b2c2      	uxtb	r2, r0
 800e322:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	0c18      	lsrs	r0, r3, #16
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	197b      	adds	r3, r7, r5
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	1979      	adds	r1, r7, r5
 800e334:	1c5c      	adds	r4, r3, #1
 800e336:	800c      	strh	r4, [r1, #0]
 800e338:	18d3      	adds	r3, r2, r3
 800e33a:	b2c2      	uxtb	r2, r0
 800e33c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	699b      	ldr	r3, [r3, #24]
 800e342:	0e18      	lsrs	r0, r3, #24
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	197b      	adds	r3, r7, r5
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	1979      	adds	r1, r7, r5
 800e34e:	1c5c      	adds	r4, r3, #1
 800e350:	800c      	strh	r4, [r1, #0]
 800e352:	18d3      	adds	r3, r2, r3
 800e354:	b2c2      	uxtb	r2, r0
 800e356:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800e358:	197b      	adds	r3, r7, r5
 800e35a:	881b      	ldrh	r3, [r3, #0]
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e362:	2300      	movs	r3, #0
}
 800e364:	0018      	movs	r0, r3
 800e366:	46bd      	mov	sp, r7
 800e368:	b004      	add	sp, #16
 800e36a:	bdb0      	pop	{r4, r5, r7, pc}

0800e36c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800e36c:	b5b0      	push	{r4, r5, r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d003      	beq.n	800e382 <LoRaMacSerializerData+0x16>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e382:	2301      	movs	r3, #1
 800e384:	e110      	b.n	800e5a8 <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 800e386:	230e      	movs	r3, #14
 800e388:	18fb      	adds	r3, r7, r3
 800e38a:	2200      	movs	r2, #0
 800e38c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800e38e:	230c      	movs	r3, #12
 800e390:	18fb      	adds	r3, r7, r3
 800e392:	2208      	movs	r2, #8
 800e394:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2228      	movs	r2, #40	; 0x28
 800e39a:	5c9b      	ldrb	r3, [r3, r2]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d109      	bne.n	800e3b4 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	791b      	ldrb	r3, [r3, #4]
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	220c      	movs	r2, #12
 800e3a8:	18ba      	adds	r2, r7, r2
 800e3aa:	8812      	ldrh	r2, [r2, #0]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d916      	bls.n	800e3de <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	e0f9      	b.n	800e5a8 <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	791b      	ldrb	r3, [r3, #4]
 800e3b8:	0018      	movs	r0, r3
 800e3ba:	230c      	movs	r3, #12
 800e3bc:	18fb      	adds	r3, r7, r3
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	7b12      	ldrb	r2, [r2, #12]
 800e3c4:	0712      	lsls	r2, r2, #28
 800e3c6:	0f12      	lsrs	r2, r2, #28
 800e3c8:	b2d2      	uxtb	r2, r2
 800e3ca:	189b      	adds	r3, r3, r2
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	2128      	movs	r1, #40	; 0x28
 800e3d0:	5c52      	ldrb	r2, [r2, r1]
 800e3d2:	189b      	adds	r3, r3, r2
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	4298      	cmp	r0, r3
 800e3d8:	da01      	bge.n	800e3de <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e3da:	2302      	movs	r3, #2
 800e3dc:	e0e4      	b.n	800e5a8 <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	250e      	movs	r5, #14
 800e3e4:	197b      	adds	r3, r7, r5
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	1979      	adds	r1, r7, r5
 800e3ea:	1c58      	adds	r0, r3, #1
 800e3ec:	8008      	strh	r0, [r1, #0]
 800e3ee:	18d3      	adds	r3, r2, r3
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	7952      	ldrb	r2, [r2, #5]
 800e3f4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6898      	ldr	r0, [r3, #8]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	197b      	adds	r3, r7, r5
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	1979      	adds	r1, r7, r5
 800e404:	1c5c      	adds	r4, r3, #1
 800e406:	800c      	strh	r4, [r1, #0]
 800e408:	18d3      	adds	r3, r2, r3
 800e40a:	b2c2      	uxtb	r2, r0
 800e40c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	0a18      	lsrs	r0, r3, #8
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	197b      	adds	r3, r7, r5
 800e41a:	881b      	ldrh	r3, [r3, #0]
 800e41c:	1979      	adds	r1, r7, r5
 800e41e:	1c5c      	adds	r4, r3, #1
 800e420:	800c      	strh	r4, [r1, #0]
 800e422:	18d3      	adds	r3, r2, r3
 800e424:	b2c2      	uxtb	r2, r0
 800e426:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	0c18      	lsrs	r0, r3, #16
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	197b      	adds	r3, r7, r5
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	1979      	adds	r1, r7, r5
 800e438:	1c5c      	adds	r4, r3, #1
 800e43a:	800c      	strh	r4, [r1, #0]
 800e43c:	18d3      	adds	r3, r2, r3
 800e43e:	b2c2      	uxtb	r2, r0
 800e440:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	0e18      	lsrs	r0, r3, #24
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	197b      	adds	r3, r7, r5
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	1979      	adds	r1, r7, r5
 800e452:	1c5c      	adds	r4, r3, #1
 800e454:	800c      	strh	r4, [r1, #0]
 800e456:	18d3      	adds	r3, r2, r3
 800e458:	b2c2      	uxtb	r2, r0
 800e45a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	197b      	adds	r3, r7, r5
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	1979      	adds	r1, r7, r5
 800e466:	1c58      	adds	r0, r3, #1
 800e468:	8008      	strh	r0, [r1, #0]
 800e46a:	18d3      	adds	r3, r2, r3
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	7b12      	ldrb	r2, [r2, #12]
 800e470:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	89d8      	ldrh	r0, [r3, #14]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	197b      	adds	r3, r7, r5
 800e47c:	881b      	ldrh	r3, [r3, #0]
 800e47e:	1979      	adds	r1, r7, r5
 800e480:	1c5c      	adds	r4, r3, #1
 800e482:	800c      	strh	r4, [r1, #0]
 800e484:	18d3      	adds	r3, r2, r3
 800e486:	b2c2      	uxtb	r2, r0
 800e488:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	89db      	ldrh	r3, [r3, #14]
 800e48e:	0a1b      	lsrs	r3, r3, #8
 800e490:	b298      	uxth	r0, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	197b      	adds	r3, r7, r5
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	1979      	adds	r1, r7, r5
 800e49c:	1c5c      	adds	r4, r3, #1
 800e49e:	800c      	strh	r4, [r1, #0]
 800e4a0:	18d3      	adds	r3, r2, r3
 800e4a2:	b2c2      	uxtb	r2, r0
 800e4a4:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	002c      	movs	r4, r5
 800e4ac:	197b      	adds	r3, r7, r5
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	18d0      	adds	r0, r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	3310      	adds	r3, #16
 800e4b6:	0019      	movs	r1, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7b1b      	ldrb	r3, [r3, #12]
 800e4bc:	071b      	lsls	r3, r3, #28
 800e4be:	0f1b      	lsrs	r3, r3, #28
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	001a      	movs	r2, r3
 800e4c6:	f002 fca3 	bl	8010e10 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	7b1b      	ldrb	r3, [r3, #12]
 800e4ce:	071b      	lsls	r3, r3, #28
 800e4d0:	0f1b      	lsrs	r3, r3, #28
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	b299      	uxth	r1, r3
 800e4d6:	193b      	adds	r3, r7, r4
 800e4d8:	193a      	adds	r2, r7, r4
 800e4da:	8812      	ldrh	r2, [r2, #0]
 800e4dc:	188a      	adds	r2, r1, r2
 800e4de:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2228      	movs	r2, #40	; 0x28
 800e4e4:	5c9b      	ldrb	r3, [r3, r2]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00c      	beq.n	800e504 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	210e      	movs	r1, #14
 800e4f0:	187b      	adds	r3, r7, r1
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	1879      	adds	r1, r7, r1
 800e4f6:	1c58      	adds	r0, r3, #1
 800e4f8:	8008      	strh	r0, [r1, #0]
 800e4fa:	18d3      	adds	r3, r2, r3
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	2120      	movs	r1, #32
 800e500:	5c52      	ldrb	r2, [r2, r1]
 800e502:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	240e      	movs	r4, #14
 800e50a:	193b      	adds	r3, r7, r4
 800e50c:	881b      	ldrh	r3, [r3, #0]
 800e50e:	18d0      	adds	r0, r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2228      	movs	r2, #40	; 0x28
 800e518:	5c9b      	ldrb	r3, [r3, r2]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	001a      	movs	r2, r3
 800e51e:	f002 fc77 	bl	8010e10 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2228      	movs	r2, #40	; 0x28
 800e526:	5c9b      	ldrb	r3, [r3, r2]
 800e528:	b299      	uxth	r1, r3
 800e52a:	193b      	adds	r3, r7, r4
 800e52c:	193a      	adds	r2, r7, r4
 800e52e:	8812      	ldrh	r2, [r2, #0]
 800e530:	188a      	adds	r2, r1, r2
 800e532:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	193b      	adds	r3, r7, r4
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	0025      	movs	r5, r4
 800e542:	1939      	adds	r1, r7, r4
 800e544:	1c5c      	adds	r4, r3, #1
 800e546:	800c      	strh	r4, [r1, #0]
 800e548:	18d3      	adds	r3, r2, r3
 800e54a:	b2c2      	uxtb	r2, r0
 800e54c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e552:	0a18      	lsrs	r0, r3, #8
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	197b      	adds	r3, r7, r5
 800e55a:	881b      	ldrh	r3, [r3, #0]
 800e55c:	1979      	adds	r1, r7, r5
 800e55e:	1c5c      	adds	r4, r3, #1
 800e560:	800c      	strh	r4, [r1, #0]
 800e562:	18d3      	adds	r3, r2, r3
 800e564:	b2c2      	uxtb	r2, r0
 800e566:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56c:	0c18      	lsrs	r0, r3, #16
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	197b      	adds	r3, r7, r5
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	1979      	adds	r1, r7, r5
 800e578:	1c5c      	adds	r4, r3, #1
 800e57a:	800c      	strh	r4, [r1, #0]
 800e57c:	18d3      	adds	r3, r2, r3
 800e57e:	b2c2      	uxtb	r2, r0
 800e580:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e586:	0e18      	lsrs	r0, r3, #24
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	197b      	adds	r3, r7, r5
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	1979      	adds	r1, r7, r5
 800e592:	1c5c      	adds	r4, r3, #1
 800e594:	800c      	strh	r4, [r1, #0]
 800e596:	18d3      	adds	r3, r2, r3
 800e598:	b2c2      	uxtb	r2, r0
 800e59a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800e59c:	197b      	adds	r3, r7, r5
 800e59e:	881b      	ldrh	r3, [r3, #0]
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e5a6:	2300      	movs	r3, #0
}
 800e5a8:	0018      	movs	r0, r3
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	b004      	add	sp, #16
 800e5ae:	bdb0      	pop	{r4, r5, r7, pc}

0800e5b0 <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	0002      	movs	r2, r0
 800e5b8:	6039      	str	r1, [r7, #0]
 800e5ba:	1dfb      	adds	r3, r7, #7
 800e5bc:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 800e5be:	2308      	movs	r3, #8
 800e5c0:	18fb      	adds	r3, r7, r3
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	601a      	str	r2, [r3, #0]
    switch( region )
 800e5c6:	1dfb      	adds	r3, r7, #7
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b05      	cmp	r3, #5
 800e5cc:	d109      	bne.n	800e5e2 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	0018      	movs	r0, r3
 800e5d2:	f001 f8c1 	bl	800f758 <RegionEU868GetPhyParam>
 800e5d6:	0003      	movs	r3, r0
 800e5d8:	001a      	movs	r2, r3
 800e5da:	230c      	movs	r3, #12
 800e5dc:	18fb      	adds	r3, r7, r3
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	e005      	b.n	800e5ee <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800e5e2:	230c      	movs	r3, #12
 800e5e4:	18fb      	adds	r3, r7, r3
 800e5e6:	2208      	movs	r2, #8
 800e5e8:	18ba      	adds	r2, r7, r2
 800e5ea:	6812      	ldr	r2, [r2, #0]
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	230c      	movs	r3, #12
 800e5f0:	18fb      	adds	r3, r7, r3
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	0013      	movs	r3, r2
        }
    }
}
 800e5f8:	0018      	movs	r0, r3
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	b004      	add	sp, #16
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	0002      	movs	r2, r0
 800e608:	6039      	str	r1, [r7, #0]
 800e60a:	1dfb      	adds	r3, r7, #7
 800e60c:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e60e:	1dfb      	adds	r3, r7, #7
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	2b05      	cmp	r3, #5
 800e614:	d000      	beq.n	800e618 <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 800e616:	e004      	b.n	800e622 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	0018      	movs	r0, r3
 800e61c:	f001 f9a0 	bl	800f960 <RegionEU868SetBandTxDone>
 800e620:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e622:	46bd      	mov	sp, r7
 800e624:	b002      	add	sp, #8
 800e626:	bd80      	pop	{r7, pc}

0800e628 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	0002      	movs	r2, r0
 800e630:	6039      	str	r1, [r7, #0]
 800e632:	1dfb      	adds	r3, r7, #7
 800e634:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e636:	1dfb      	adds	r3, r7, #7
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b05      	cmp	r3, #5
 800e63c:	d000      	beq.n	800e640 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 800e63e:	e004      	b.n	800e64a <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	0018      	movs	r0, r3
 800e644:	f001 f9ac 	bl	800f9a0 <RegionEU868InitDefaults>
 800e648:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e64a:	46c0      	nop			; (mov r8, r8)
 800e64c:	46bd      	mov	sp, r7
 800e64e:	b002      	add	sp, #8
 800e650:	bd80      	pop	{r7, pc}

0800e652 <RegionApplyCFList>:
        }
    }
}

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b082      	sub	sp, #8
 800e656:	af00      	add	r7, sp, #0
 800e658:	0002      	movs	r2, r0
 800e65a:	6039      	str	r1, [r7, #0]
 800e65c:	1dfb      	adds	r3, r7, #7
 800e65e:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e660:	1dfb      	adds	r3, r7, #7
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b05      	cmp	r3, #5
 800e666:	d000      	beq.n	800e66a <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 800e668:	e004      	b.n	800e674 <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	0018      	movs	r0, r3
 800e66e:	f001 fa0f 	bl	800fa90 <RegionEU868ApplyCFList>
 800e672:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e674:	46c0      	nop			; (mov r8, r8)
 800e676:	46bd      	mov	sp, r7
 800e678:	b002      	add	sp, #8
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <RegionComputeRxWindowParameters>:
        }
    }
}

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	0004      	movs	r4, r0
 800e684:	0008      	movs	r0, r1
 800e686:	0011      	movs	r1, r2
 800e688:	603b      	str	r3, [r7, #0]
 800e68a:	1dfb      	adds	r3, r7, #7
 800e68c:	1c22      	adds	r2, r4, #0
 800e68e:	701a      	strb	r2, [r3, #0]
 800e690:	1dbb      	adds	r3, r7, #6
 800e692:	1c02      	adds	r2, r0, #0
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	1d7b      	adds	r3, r7, #5
 800e698:	1c0a      	adds	r2, r1, #0
 800e69a:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e69c:	1dfb      	adds	r3, r7, #7
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b05      	cmp	r3, #5
 800e6a2:	d000      	beq.n	800e6a6 <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 800e6a4:	e00a      	b.n	800e6bc <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800e6a6:	69bc      	ldr	r4, [r7, #24]
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	1d7b      	adds	r3, r7, #5
 800e6ac:	7819      	ldrb	r1, [r3, #0]
 800e6ae:	1dbb      	adds	r3, r7, #6
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	5618      	ldrsb	r0, [r3, r0]
 800e6b4:	0023      	movs	r3, r4
 800e6b6:	f001 fa7d 	bl	800fbb4 <RegionEU868ComputeRxWindowParameters>
 800e6ba:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e6bc:	46c0      	nop			; (mov r8, r8)
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	b003      	add	sp, #12
 800e6c2:	bd90      	pop	{r4, r7, pc}

0800e6c4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60b9      	str	r1, [r7, #8]
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	210f      	movs	r1, #15
 800e6d0:	187b      	adds	r3, r7, r1
 800e6d2:	1c02      	adds	r2, r0, #0
 800e6d4:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e6d6:	187b      	adds	r3, r7, r1
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b05      	cmp	r3, #5
 800e6dc:	d107      	bne.n	800e6ee <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	0011      	movs	r1, r2
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f001 facf 	bl	800fc88 <RegionEU868RxConfig>
 800e6ea:	0003      	movs	r3, r0
 800e6ec:	e000      	b.n	800e6f0 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800e6ee:	2300      	movs	r3, #0
        }
    }
}
 800e6f0:	0018      	movs	r0, r3
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	b004      	add	sp, #16
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60b9      	str	r1, [r7, #8]
 800e700:	607a      	str	r2, [r7, #4]
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	210f      	movs	r1, #15
 800e706:	187b      	adds	r3, r7, r1
 800e708:	1c02      	adds	r2, r0, #0
 800e70a:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e70c:	187b      	adds	r3, r7, r1
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b05      	cmp	r3, #5
 800e712:	d107      	bne.n	800e724 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	6879      	ldr	r1, [r7, #4]
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	0018      	movs	r0, r3
 800e71c:	f001 fba0 	bl	800fe60 <RegionEU868TxConfig>
 800e720:	0003      	movs	r3, r0
 800e722:	e000      	b.n	800e726 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800e724:	2300      	movs	r3, #0
        }
    }
}
 800e726:	0018      	movs	r0, r3
 800e728:	46bd      	mov	sp, r7
 800e72a:	b004      	add	sp, #16
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e72e:	b590      	push	{r4, r7, lr}
 800e730:	b087      	sub	sp, #28
 800e732:	af02      	add	r7, sp, #8
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
 800e73a:	210f      	movs	r1, #15
 800e73c:	187b      	adds	r3, r7, r1
 800e73e:	1c02      	adds	r2, r0, #0
 800e740:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e742:	187b      	adds	r3, r7, r1
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	2b05      	cmp	r3, #5
 800e748:	d10a      	bne.n	800e760 <RegionLinkAdrReq+0x32>
        //AS923_LINK_ADR_REQ( );
        //AU915_LINK_ADR_REQ( );
       // CN470_LINK_ADR_REQ( );
       // CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800e74a:	6a3c      	ldr	r4, [r7, #32]
 800e74c:	683a      	ldr	r2, [r7, #0]
 800e74e:	6879      	ldr	r1, [r7, #4]
 800e750:	68b8      	ldr	r0, [r7, #8]
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	0023      	movs	r3, r4
 800e758:	f001 fc5a 	bl	8010010 <RegionEU868LinkAdrReq>
 800e75c:	0003      	movs	r3, r0
 800e75e:	e000      	b.n	800e762 <RegionLinkAdrReq+0x34>
       // IN865_LINK_ADR_REQ( );
       // US915_LINK_ADR_REQ( );
       // RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800e760:	2300      	movs	r3, #0
        }
    }
}
 800e762:	0018      	movs	r0, r3
 800e764:	46bd      	mov	sp, r7
 800e766:	b005      	add	sp, #20
 800e768:	bd90      	pop	{r4, r7, pc}

0800e76a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	0002      	movs	r2, r0
 800e772:	6039      	str	r1, [r7, #0]
 800e774:	1dfb      	adds	r3, r7, #7
 800e776:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e778:	1dfb      	adds	r3, r7, #7
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	2b05      	cmp	r3, #5
 800e77e:	d105      	bne.n	800e78c <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	0018      	movs	r0, r3
 800e784:	f001 fd9a 	bl	80102bc <RegionEU868RxParamSetupReq>
 800e788:	0003      	movs	r3, r0
 800e78a:	e000      	b.n	800e78e <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800e78c:	2300      	movs	r3, #0
        }
    }
}
 800e78e:	0018      	movs	r0, r3
 800e790:	46bd      	mov	sp, r7
 800e792:	b002      	add	sp, #8
 800e794:	bd80      	pop	{r7, pc}

0800e796 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b082      	sub	sp, #8
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	0002      	movs	r2, r0
 800e79e:	6039      	str	r1, [r7, #0]
 800e7a0:	1dfb      	adds	r3, r7, #7
 800e7a2:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e7a4:	1dfb      	adds	r3, r7, #7
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2b05      	cmp	r3, #5
 800e7aa:	d105      	bne.n	800e7b8 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f001 fdce 	bl	8010350 <RegionEU868NewChannelReq>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	e000      	b.n	800e7ba <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800e7b8:	2300      	movs	r3, #0
        }
    }
}
 800e7ba:	0018      	movs	r0, r3
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	b002      	add	sp, #8
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	0002      	movs	r2, r0
 800e7ca:	6039      	str	r1, [r7, #0]
 800e7cc:	1dfb      	adds	r3, r7, #7
 800e7ce:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e7d0:	1dfb      	adds	r3, r7, #7
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b05      	cmp	r3, #5
 800e7d6:	d105      	bne.n	800e7e4 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	0018      	movs	r0, r3
 800e7dc:	f001 fe22 	bl	8010424 <RegionEU868TxParamSetupReq>
 800e7e0:	0003      	movs	r3, r0
 800e7e2:	e000      	b.n	800e7e6 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800e7e4:	2300      	movs	r3, #0
        }
    }
}
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	b002      	add	sp, #8
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	0002      	movs	r2, r0
 800e7f6:	6039      	str	r1, [r7, #0]
 800e7f8:	1dfb      	adds	r3, r7, #7
 800e7fa:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e7fc:	1dfb      	adds	r3, r7, #7
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2b05      	cmp	r3, #5
 800e802:	d105      	bne.n	800e810 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	0018      	movs	r0, r3
 800e808:	f001 fe16 	bl	8010438 <RegionEU868DlChannelReq>
 800e80c:	0003      	movs	r3, r0
 800e80e:	e000      	b.n	800e812 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800e810:	2300      	movs	r3, #0
        }
    }
}
 800e812:	0018      	movs	r0, r3
 800e814:	46bd      	mov	sp, r7
 800e816:	b002      	add	sp, #8
 800e818:	bd80      	pop	{r7, pc}

0800e81a <RegionCalcBackOff>:
        }
    }
}

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	0002      	movs	r2, r0
 800e822:	6039      	str	r1, [r7, #0]
 800e824:	1dfb      	adds	r3, r7, #7
 800e826:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e828:	1dfb      	adds	r3, r7, #7
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	2b05      	cmp	r3, #5
 800e82e:	d000      	beq.n	800e832 <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 800e830:	e004      	b.n	800e83c <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	0018      	movs	r0, r3
 800e836:	f001 fe4d 	bl	80104d4 <RegionEU868CalcBackOff>
 800e83a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e83c:	46c0      	nop			; (mov r8, r8)
 800e83e:	46bd      	mov	sp, r7
 800e840:	b002      	add	sp, #8
 800e842:	bd80      	pop	{r7, pc}

0800e844 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60b9      	str	r1, [r7, #8]
 800e84c:	607a      	str	r2, [r7, #4]
 800e84e:	603b      	str	r3, [r7, #0]
 800e850:	210f      	movs	r1, #15
 800e852:	187b      	adds	r3, r7, r1
 800e854:	1c02      	adds	r2, r0, #0
 800e856:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e858:	187b      	adds	r3, r7, r1
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	2b05      	cmp	r3, #5
 800e85e:	d107      	bne.n	800e870 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	6879      	ldr	r1, [r7, #4]
 800e866:	68b8      	ldr	r0, [r7, #8]
 800e868:	f001 fe64 	bl	8010534 <RegionEU868NextChannel>
 800e86c:	0003      	movs	r3, r0
 800e86e:	e000      	b.n	800e872 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e870:	2309      	movs	r3, #9
        }
    }
}
 800e872:	0018      	movs	r0, r3
 800e874:	46bd      	mov	sp, r7
 800e876:	b004      	add	sp, #16
 800e878:	bd80      	pop	{r7, pc}

0800e87a <RegionApplyDrOffset>:
        }
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800e87a:	b5b0      	push	{r4, r5, r7, lr}
 800e87c:	b082      	sub	sp, #8
 800e87e:	af00      	add	r7, sp, #0
 800e880:	0005      	movs	r5, r0
 800e882:	000c      	movs	r4, r1
 800e884:	0010      	movs	r0, r2
 800e886:	0019      	movs	r1, r3
 800e888:	1dfb      	adds	r3, r7, #7
 800e88a:	1c2a      	adds	r2, r5, #0
 800e88c:	701a      	strb	r2, [r3, #0]
 800e88e:	1dbb      	adds	r3, r7, #6
 800e890:	1c22      	adds	r2, r4, #0
 800e892:	701a      	strb	r2, [r3, #0]
 800e894:	1d7b      	adds	r3, r7, #5
 800e896:	1c02      	adds	r2, r0, #0
 800e898:	701a      	strb	r2, [r3, #0]
 800e89a:	1d3b      	adds	r3, r7, #4
 800e89c:	1c0a      	adds	r2, r1, #0
 800e89e:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e8a0:	1dfb      	adds	r3, r7, #7
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	2b05      	cmp	r3, #5
 800e8a6:	d10c      	bne.n	800e8c2 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 800e8a8:	1d3b      	adds	r3, r7, #4
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	569a      	ldrsb	r2, [r3, r2]
 800e8ae:	1d7b      	adds	r3, r7, #5
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	5659      	ldrsb	r1, [r3, r1]
 800e8b4:	1dbb      	adds	r3, r7, #6
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	0018      	movs	r0, r3
 800e8ba:	f001 ffd5 	bl	8010868 <RegionEU868ApplyDrOffset>
 800e8be:	0003      	movs	r3, r0
 800e8c0:	e001      	b.n	800e8c6 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800e8c2:	1d7b      	adds	r3, r7, #5
 800e8c4:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 800e8c6:	0018      	movs	r0, r3
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	b002      	add	sp, #8
 800e8cc:	bdb0      	pop	{r4, r5, r7, pc}

0800e8ce <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b084      	sub	sp, #16
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	0002      	movs	r2, r0
 800e8d6:	1dbb      	adds	r3, r7, #6
 800e8d8:	801a      	strh	r2, [r3, #0]
 800e8da:	1d7b      	adds	r3, r7, #5
 800e8dc:	1c0a      	adds	r2, r1, #0
 800e8de:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 800e8e0:	230f      	movs	r3, #15
 800e8e2:	18fb      	adds	r3, r7, r3
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 800e8e8:	230e      	movs	r3, #14
 800e8ea:	18fb      	adds	r3, r7, r3
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	701a      	strb	r2, [r3, #0]
 800e8f0:	e01b      	b.n	800e92a <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800e8f2:	1dbb      	adds	r3, r7, #6
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	200e      	movs	r0, #14
 800e8f8:	183a      	adds	r2, r7, r0
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	2101      	movs	r1, #1
 800e8fe:	4091      	lsls	r1, r2
 800e900:	000a      	movs	r2, r1
 800e902:	401a      	ands	r2, r3
 800e904:	183b      	adds	r3, r7, r0
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	2101      	movs	r1, #1
 800e90a:	4099      	lsls	r1, r3
 800e90c:	000b      	movs	r3, r1
 800e90e:	429a      	cmp	r2, r3
 800e910:	d105      	bne.n	800e91e <CountChannels+0x50>
        {
            nbActiveBits++;
 800e912:	210f      	movs	r1, #15
 800e914:	187b      	adds	r3, r7, r1
 800e916:	781a      	ldrb	r2, [r3, #0]
 800e918:	187b      	adds	r3, r7, r1
 800e91a:	3201      	adds	r2, #1
 800e91c:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 800e91e:	210e      	movs	r1, #14
 800e920:	187b      	adds	r3, r7, r1
 800e922:	781a      	ldrb	r2, [r3, #0]
 800e924:	187b      	adds	r3, r7, r1
 800e926:	3201      	adds	r2, #1
 800e928:	701a      	strb	r2, [r3, #0]
 800e92a:	230e      	movs	r3, #14
 800e92c:	18fa      	adds	r2, r7, r3
 800e92e:	1d7b      	adds	r3, r7, #5
 800e930:	7812      	ldrb	r2, [r2, #0]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	429a      	cmp	r2, r3
 800e936:	d3dc      	bcc.n	800e8f2 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 800e938:	230f      	movs	r3, #15
 800e93a:	18fb      	adds	r3, r7, r3
 800e93c:	781b      	ldrb	r3, [r3, #0]
}
 800e93e:	0018      	movs	r0, r3
 800e940:	46bd      	mov	sp, r7
 800e942:	b004      	add	sp, #16
 800e944:	bd80      	pop	{r7, pc}
	...

0800e948 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 800e950:	230e      	movs	r3, #14
 800e952:	18fb      	adds	r3, r7, r3
 800e954:	2200      	movs	r2, #0
 800e956:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a0e      	ldr	r2, [pc, #56]	; (800e994 <RegionCommonGetJoinDc+0x4c>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d804      	bhi.n	800e96a <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 800e960:	230e      	movs	r3, #14
 800e962:	18fb      	adds	r3, r7, r3
 800e964:	2264      	movs	r2, #100	; 0x64
 800e966:	801a      	strh	r2, [r3, #0]
 800e968:	e00d      	b.n	800e986 <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a0a      	ldr	r2, [pc, #40]	; (800e998 <RegionCommonGetJoinDc+0x50>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d805      	bhi.n	800e97e <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 800e972:	230e      	movs	r3, #14
 800e974:	18fb      	adds	r3, r7, r3
 800e976:	22fa      	movs	r2, #250	; 0xfa
 800e978:	0092      	lsls	r2, r2, #2
 800e97a:	801a      	strh	r2, [r3, #0]
 800e97c:	e003      	b.n	800e986 <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800e97e:	230e      	movs	r3, #14
 800e980:	18fb      	adds	r3, r7, r3
 800e982:	4a06      	ldr	r2, [pc, #24]	; (800e99c <RegionCommonGetJoinDc+0x54>)
 800e984:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 800e986:	230e      	movs	r3, #14
 800e988:	18fb      	adds	r3, r7, r3
 800e98a:	881b      	ldrh	r3, [r3, #0]
}
 800e98c:	0018      	movs	r0, r3
 800e98e:	46bd      	mov	sp, r7
 800e990:	b004      	add	sp, #16
 800e992:	bd80      	pop	{r7, pc}
 800e994:	0036ee7f 	.word	0x0036ee7f
 800e998:	025c3f7f 	.word	0x025c3f7f
 800e99c:	00002710 	.word	0x00002710

0800e9a0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800e9a0:	b590      	push	{r4, r7, lr}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	0004      	movs	r4, r0
 800e9a8:	6039      	str	r1, [r7, #0]
 800e9aa:	0010      	movs	r0, r2
 800e9ac:	0019      	movs	r1, r3
 800e9ae:	1dfb      	adds	r3, r7, #7
 800e9b0:	1c22      	adds	r2, r4, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	1dbb      	adds	r3, r7, #6
 800e9b6:	1c02      	adds	r2, r0, #0
 800e9b8:	701a      	strb	r2, [r3, #0]
 800e9ba:	1d7b      	adds	r3, r7, #5
 800e9bc:	1c0a      	adds	r2, r1, #0
 800e9be:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e9c0:	2320      	movs	r3, #32
 800e9c2:	18fb      	adds	r3, r7, r3
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	569a      	ldrsb	r2, [r3, r2]
 800e9c8:	1d7b      	adds	r3, r7, #5
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	5659      	ldrsb	r1, [r3, r1]
 800e9ce:	1dbb      	adds	r3, r7, #6
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	b25b      	sxtb	r3, r3
 800e9d4:	0018      	movs	r0, r3
 800e9d6:	f000 f87d 	bl	800ead4 <RegionCommonValueInRange>
 800e9da:	1e03      	subs	r3, r0, #0
 800e9dc:	d101      	bne.n	800e9e2 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e074      	b.n	800eacc <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e9e2:	230f      	movs	r3, #15
 800e9e4:	18fb      	adds	r3, r7, r3
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	701a      	strb	r2, [r3, #0]
 800e9ea:	230e      	movs	r3, #14
 800e9ec:	18fb      	adds	r3, r7, r3
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	701a      	strb	r2, [r3, #0]
 800e9f2:	e063      	b.n	800eabc <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800e9f4:	230d      	movs	r3, #13
 800e9f6:	18fb      	adds	r3, r7, r3
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	701a      	strb	r2, [r3, #0]
 800e9fc:	e04d      	b.n	800ea9a <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e9fe:	230e      	movs	r3, #14
 800ea00:	18fb      	adds	r3, r7, r3
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	18d3      	adds	r3, r2, r3
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	001a      	movs	r2, r3
 800ea0e:	230d      	movs	r3, #13
 800ea10:	18fb      	adds	r3, r7, r3
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	411a      	asrs	r2, r3
 800ea16:	0013      	movs	r3, r2
 800ea18:	2201      	movs	r2, #1
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	d037      	beq.n	800ea8e <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ea1e:	200f      	movs	r0, #15
 800ea20:	183b      	adds	r3, r7, r0
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	240d      	movs	r4, #13
 800ea26:	193b      	adds	r3, r7, r4
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	18d3      	adds	r3, r2, r3
 800ea2c:	001a      	movs	r2, r3
 800ea2e:	0013      	movs	r3, r2
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	189b      	adds	r3, r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	001a      	movs	r2, r3
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	189b      	adds	r3, r3, r2
 800ea3c:	7a1b      	ldrb	r3, [r3, #8]
 800ea3e:	011b      	lsls	r3, r3, #4
 800ea40:	b25b      	sxtb	r3, r3
 800ea42:	111b      	asrs	r3, r3, #4
 800ea44:	b25b      	sxtb	r3, r3
 800ea46:	001a      	movs	r2, r3
 800ea48:	230f      	movs	r3, #15
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ea4e:	183b      	adds	r3, r7, r0
 800ea50:	781a      	ldrb	r2, [r3, #0]
 800ea52:	193b      	adds	r3, r7, r4
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	18d3      	adds	r3, r2, r3
 800ea58:	001a      	movs	r2, r3
 800ea5a:	0013      	movs	r3, r2
 800ea5c:	005b      	lsls	r3, r3, #1
 800ea5e:	189b      	adds	r3, r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	001a      	movs	r2, r3
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	189b      	adds	r3, r3, r2
 800ea68:	7a1b      	ldrb	r3, [r3, #8]
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	111b      	asrs	r3, r3, #4
 800ea6e:	b25b      	sxtb	r3, r3
 800ea70:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ea72:	230f      	movs	r3, #15
 800ea74:	4013      	ands	r3, r2
 800ea76:	b25a      	sxtb	r2, r3
 800ea78:	1dbb      	adds	r3, r7, #6
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	0018      	movs	r0, r3
 800ea80:	f000 f828 	bl	800ead4 <RegionCommonValueInRange>
 800ea84:	0003      	movs	r3, r0
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d101      	bne.n	800ea8e <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e01e      	b.n	800eacc <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 800ea8e:	210d      	movs	r1, #13
 800ea90:	187b      	adds	r3, r7, r1
 800ea92:	781a      	ldrb	r2, [r3, #0]
 800ea94:	187b      	adds	r3, r7, r1
 800ea96:	3201      	adds	r2, #1
 800ea98:	701a      	strb	r2, [r3, #0]
 800ea9a:	230d      	movs	r3, #13
 800ea9c:	18fb      	adds	r3, r7, r3
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2b0f      	cmp	r3, #15
 800eaa2:	d9ac      	bls.n	800e9fe <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800eaa4:	220f      	movs	r2, #15
 800eaa6:	18bb      	adds	r3, r7, r2
 800eaa8:	18ba      	adds	r2, r7, r2
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	3210      	adds	r2, #16
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	210e      	movs	r1, #14
 800eab2:	187b      	adds	r3, r7, r1
 800eab4:	781a      	ldrb	r2, [r3, #0]
 800eab6:	187b      	adds	r3, r7, r1
 800eab8:	3201      	adds	r2, #1
 800eaba:	701a      	strb	r2, [r3, #0]
 800eabc:	230f      	movs	r3, #15
 800eabe:	18fa      	adds	r2, r7, r3
 800eac0:	1dfb      	adds	r3, r7, #7
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d394      	bcc.n	800e9f4 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	0018      	movs	r0, r3
 800eace:	46bd      	mov	sp, r7
 800ead0:	b005      	add	sp, #20
 800ead2:	bd90      	pop	{r4, r7, pc}

0800ead4 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800ead4:	b590      	push	{r4, r7, lr}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	0004      	movs	r4, r0
 800eadc:	0008      	movs	r0, r1
 800eade:	0011      	movs	r1, r2
 800eae0:	1dfb      	adds	r3, r7, #7
 800eae2:	1c22      	adds	r2, r4, #0
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	1dbb      	adds	r3, r7, #6
 800eae8:	1c02      	adds	r2, r0, #0
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	1d7b      	adds	r3, r7, #5
 800eaee:	1c0a      	adds	r2, r1, #0
 800eaf0:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 800eaf2:	1dfa      	adds	r2, r7, #7
 800eaf4:	1dbb      	adds	r3, r7, #6
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	b252      	sxtb	r2, r2
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	b25b      	sxtb	r3, r3
 800eafe:	429a      	cmp	r2, r3
 800eb00:	db09      	blt.n	800eb16 <RegionCommonValueInRange+0x42>
 800eb02:	1dfa      	adds	r2, r7, #7
 800eb04:	1d7b      	adds	r3, r7, #5
 800eb06:	7812      	ldrb	r2, [r2, #0]
 800eb08:	b252      	sxtb	r2, r2
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	b25b      	sxtb	r3, r3
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	dc01      	bgt.n	800eb16 <RegionCommonValueInRange+0x42>
    {
        return 1;
 800eb12:	2301      	movs	r3, #1
 800eb14:	e000      	b.n	800eb18 <RegionCommonValueInRange+0x44>
    }
    return 0;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	0018      	movs	r0, r3
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	b003      	add	sp, #12
 800eb1e:	bd90      	pop	{r4, r7, pc}

0800eb20 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	0008      	movs	r0, r1
 800eb2a:	0011      	movs	r1, r2
 800eb2c:	1cfb      	adds	r3, r7, #3
 800eb2e:	1c02      	adds	r2, r0, #0
 800eb30:	701a      	strb	r2, [r3, #0]
 800eb32:	1cbb      	adds	r3, r7, #2
 800eb34:	1c0a      	adds	r2, r1, #0
 800eb36:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 800eb38:	210f      	movs	r1, #15
 800eb3a:	187b      	adds	r3, r7, r1
 800eb3c:	1cfa      	adds	r2, r7, #3
 800eb3e:	7812      	ldrb	r2, [r2, #0]
 800eb40:	0912      	lsrs	r2, r2, #4
 800eb42:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800eb44:	1cbb      	adds	r3, r7, #2
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	091b      	lsrs	r3, r3, #4
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	187a      	adds	r2, r7, r1
 800eb4e:	7812      	ldrb	r2, [r2, #0]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d805      	bhi.n	800eb60 <RegionCommonChanDisable+0x40>
 800eb54:	1cfa      	adds	r2, r7, #3
 800eb56:	1cbb      	adds	r3, r7, #2
 800eb58:	7812      	ldrb	r2, [r2, #0]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d301      	bcc.n	800eb64 <RegionCommonChanDisable+0x44>
    {
        return false;
 800eb60:	2300      	movs	r3, #0
 800eb62:	e01b      	b.n	800eb9c <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800eb64:	200f      	movs	r0, #15
 800eb66:	183b      	adds	r3, r7, r0
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	18d3      	adds	r3, r2, r3
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	b21b      	sxth	r3, r3
 800eb74:	1cfa      	adds	r2, r7, #3
 800eb76:	7812      	ldrb	r2, [r2, #0]
 800eb78:	210f      	movs	r1, #15
 800eb7a:	400a      	ands	r2, r1
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	4091      	lsls	r1, r2
 800eb80:	000a      	movs	r2, r1
 800eb82:	b212      	sxth	r2, r2
 800eb84:	43d2      	mvns	r2, r2
 800eb86:	b212      	sxth	r2, r2
 800eb88:	4013      	ands	r3, r2
 800eb8a:	b219      	sxth	r1, r3
 800eb8c:	183b      	adds	r3, r7, r0
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	18d3      	adds	r3, r2, r3
 800eb96:	b28a      	uxth	r2, r1
 800eb98:	801a      	strh	r2, [r3, #0]

    return true;
 800eb9a:	2301      	movs	r3, #1
}
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	b004      	add	sp, #16
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800eba4:	b590      	push	{r4, r7, lr}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	0008      	movs	r0, r1
 800ebae:	0011      	movs	r1, r2
 800ebb0:	1cfb      	adds	r3, r7, #3
 800ebb2:	1c02      	adds	r2, r0, #0
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	1cbb      	adds	r3, r7, #2
 800ebb8:	1c0a      	adds	r2, r1, #0
 800ebba:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 800ebbc:	230f      	movs	r3, #15
 800ebbe:	18fb      	adds	r3, r7, r3
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <RegionCommonCountChannels+0x2a>
    {
        return 0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e027      	b.n	800ec1e <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ebce:	230e      	movs	r3, #14
 800ebd0:	18fb      	adds	r3, r7, r3
 800ebd2:	1cfa      	adds	r2, r7, #3
 800ebd4:	7812      	ldrb	r2, [r2, #0]
 800ebd6:	701a      	strb	r2, [r3, #0]
 800ebd8:	e017      	b.n	800ec0a <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ebda:	240e      	movs	r4, #14
 800ebdc:	193b      	adds	r3, r7, r4
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	18d3      	adds	r3, r2, r3
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	2110      	movs	r1, #16
 800ebea:	0018      	movs	r0, r3
 800ebec:	f7ff fe6f 	bl	800e8ce <CountChannels>
 800ebf0:	0003      	movs	r3, r0
 800ebf2:	0019      	movs	r1, r3
 800ebf4:	220f      	movs	r2, #15
 800ebf6:	18bb      	adds	r3, r7, r2
 800ebf8:	18ba      	adds	r2, r7, r2
 800ebfa:	7812      	ldrb	r2, [r2, #0]
 800ebfc:	188a      	adds	r2, r1, r2
 800ebfe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ec00:	193b      	adds	r3, r7, r4
 800ec02:	781a      	ldrb	r2, [r3, #0]
 800ec04:	193b      	adds	r3, r7, r4
 800ec06:	3201      	adds	r2, #1
 800ec08:	701a      	strb	r2, [r3, #0]
 800ec0a:	230e      	movs	r3, #14
 800ec0c:	18fa      	adds	r2, r7, r3
 800ec0e:	1cbb      	adds	r3, r7, #2
 800ec10:	7812      	ldrb	r2, [r2, #0]
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d3e0      	bcc.n	800ebda <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 800ec18:	230f      	movs	r3, #15
 800ec1a:	18fb      	adds	r3, r7, r3
 800ec1c:	781b      	ldrb	r3, [r3, #0]
}
 800ec1e:	0018      	movs	r0, r3
 800ec20:	46bd      	mov	sp, r7
 800ec22:	b005      	add	sp, #20
 800ec24:	bd90      	pop	{r4, r7, pc}

0800ec26 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b086      	sub	sp, #24
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	60f8      	str	r0, [r7, #12]
 800ec2e:	60b9      	str	r1, [r7, #8]
 800ec30:	1dfb      	adds	r3, r7, #7
 800ec32:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d020      	beq.n	800ec7c <RegionCommonChanMaskCopy+0x56>
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d01d      	beq.n	800ec7c <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 800ec40:	2317      	movs	r3, #23
 800ec42:	18fb      	adds	r3, r7, r3
 800ec44:	2200      	movs	r2, #0
 800ec46:	701a      	strb	r2, [r3, #0]
 800ec48:	e011      	b.n	800ec6e <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ec4a:	2017      	movs	r0, #23
 800ec4c:	183b      	adds	r3, r7, r0
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	18d2      	adds	r2, r2, r3
 800ec56:	183b      	adds	r3, r7, r0
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	005b      	lsls	r3, r3, #1
 800ec5c:	68f9      	ldr	r1, [r7, #12]
 800ec5e:	18cb      	adds	r3, r1, r3
 800ec60:	8812      	ldrh	r2, [r2, #0]
 800ec62:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800ec64:	183b      	adds	r3, r7, r0
 800ec66:	781a      	ldrb	r2, [r3, #0]
 800ec68:	183b      	adds	r3, r7, r0
 800ec6a:	3201      	adds	r2, #1
 800ec6c:	701a      	strb	r2, [r3, #0]
 800ec6e:	2317      	movs	r3, #23
 800ec70:	18fa      	adds	r2, r7, r3
 800ec72:	1dfb      	adds	r3, r7, #7
 800ec74:	7812      	ldrb	r2, [r2, #0]
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d3e6      	bcc.n	800ec4a <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 800ec7c:	46c0      	nop			; (mov r8, r8)
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	b006      	add	sp, #24
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	210f      	movs	r1, #15
 800ec90:	187b      	adds	r3, r7, r1
 800ec92:	1c02      	adds	r2, r0, #0
 800ec94:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 800ec96:	187b      	adds	r3, r7, r1
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d003      	beq.n	800eca6 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800eca4:	e005      	b.n	800ecb2 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	605a      	str	r2, [r3, #4]
}
 800ecb2:	46c0      	nop			; (mov r8, r8)
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	b004      	add	sp, #16
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800ecba:	b590      	push	{r4, r7, lr}
 800ecbc:	b087      	sub	sp, #28
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	0004      	movs	r4, r0
 800ecc2:	0008      	movs	r0, r1
 800ecc4:	603a      	str	r2, [r7, #0]
 800ecc6:	0019      	movs	r1, r3
 800ecc8:	1dfb      	adds	r3, r7, #7
 800ecca:	1c22      	adds	r2, r4, #0
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	1dbb      	adds	r3, r7, #6
 800ecd0:	1c02      	adds	r2, r0, #0
 800ecd2:	701a      	strb	r2, [r3, #0]
 800ecd4:	1d7b      	adds	r3, r7, #5
 800ecd6:	1c0a      	adds	r2, r1, #0
 800ecd8:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800ecda:	2301      	movs	r3, #1
 800ecdc:	425b      	negs	r3, r3
 800ecde:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800ece0:	2313      	movs	r3, #19
 800ece2:	18fb      	adds	r3, r7, r3
 800ece4:	2200      	movs	r2, #0
 800ece6:	701a      	strb	r2, [r3, #0]
 800ece8:	e0cf      	b.n	800ee8a <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 800ecea:	1dfb      	adds	r3, r7, #7
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	4053      	eors	r3, r2
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d065      	beq.n	800edc4 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800ecf8:	2313      	movs	r3, #19
 800ecfa:	18fb      	adds	r3, r7, r3
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	011b      	lsls	r3, r3, #4
 800ed00:	683a      	ldr	r2, [r7, #0]
 800ed02:	18d3      	adds	r3, r2, r3
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	0018      	movs	r0, r3
 800ed08:	f002 f843 	bl	8010d92 <TimerGetElapsedTime>
 800ed0c:	0004      	movs	r4, r0
 800ed0e:	1dbb      	adds	r3, r7, #6
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00b      	beq.n	800ed2e <RegionCommonUpdateBandTimeOff+0x74>
 800ed16:	2313      	movs	r3, #19
 800ed18:	18fb      	adds	r3, r7, r3
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	011b      	lsls	r3, r3, #4
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	18d3      	adds	r3, r2, r3
 800ed22:	689b      	ldr	r3, [r3, #8]
 800ed24:	0018      	movs	r0, r3
 800ed26:	f002 f834 	bl	8010d92 <TimerGetElapsedTime>
 800ed2a:	0003      	movs	r3, r0
 800ed2c:	e000      	b.n	800ed30 <RegionCommonUpdateBandTimeOff+0x76>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	42a3      	cmp	r3, r4
 800ed32:	d20b      	bcs.n	800ed4c <RegionCommonUpdateBandTimeOff+0x92>
 800ed34:	2313      	movs	r3, #19
 800ed36:	18fb      	adds	r3, r7, r3
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	011b      	lsls	r3, r3, #4
 800ed3c:	683a      	ldr	r2, [r7, #0]
 800ed3e:	18d3      	adds	r3, r2, r3
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	0018      	movs	r0, r3
 800ed44:	f002 f825 	bl	8010d92 <TimerGetElapsedTime>
 800ed48:	0003      	movs	r3, r0
 800ed4a:	e010      	b.n	800ed6e <RegionCommonUpdateBandTimeOff+0xb4>
 800ed4c:	1dbb      	adds	r3, r7, #6
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00b      	beq.n	800ed6c <RegionCommonUpdateBandTimeOff+0xb2>
 800ed54:	2313      	movs	r3, #19
 800ed56:	18fb      	adds	r3, r7, r3
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	011b      	lsls	r3, r3, #4
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	18d3      	adds	r3, r2, r3
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	0018      	movs	r0, r3
 800ed64:	f002 f815 	bl	8010d92 <TimerGetElapsedTime>
 800ed68:	0003      	movs	r3, r0
 800ed6a:	e000      	b.n	800ed6e <RegionCommonUpdateBandTimeOff+0xb4>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 800ed70:	2313      	movs	r3, #19
 800ed72:	18fb      	adds	r3, r7, r3
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	011b      	lsls	r3, r3, #4
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	18d3      	adds	r3, r2, r3
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d307      	bcc.n	800ed94 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 800ed84:	2313      	movs	r3, #19
 800ed86:	18fb      	adds	r3, r7, r3
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	011b      	lsls	r3, r3, #4
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	18d3      	adds	r3, r2, r3
 800ed90:	2200      	movs	r2, #0
 800ed92:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 800ed94:	2313      	movs	r3, #19
 800ed96:	18fb      	adds	r3, r7, r3
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	011b      	lsls	r3, r3, #4
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	18d3      	adds	r3, r2, r3
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d06b      	beq.n	800ee7e <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 800eda6:	2313      	movs	r3, #19
 800eda8:	18fb      	adds	r3, r7, r3
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	011b      	lsls	r3, r3, #4
 800edae:	683a      	ldr	r2, [r7, #0]
 800edb0:	18d3      	adds	r3, r2, r3
 800edb2:	68da      	ldr	r2, [r3, #12]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	1ad2      	subs	r2, r2, r3
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	4293      	cmp	r3, r2
 800edbc:	d900      	bls.n	800edc0 <RegionCommonUpdateBandTimeOff+0x106>
 800edbe:	0013      	movs	r3, r2
 800edc0:	617b      	str	r3, [r7, #20]
 800edc2:	e05c      	b.n	800ee7e <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 800edc4:	1dbb      	adds	r3, r7, #6
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d04e      	beq.n	800ee6a <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 800edcc:	2113      	movs	r1, #19
 800edce:	187b      	adds	r3, r7, r1
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	011b      	lsls	r3, r3, #4
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	18d3      	adds	r3, r2, r3
 800edd8:	68dc      	ldr	r4, [r3, #12]
 800edda:	187b      	adds	r3, r7, r1
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	011b      	lsls	r3, r3, #4
 800ede0:	683a      	ldr	r2, [r7, #0]
 800ede2:	18d3      	adds	r3, r2, r3
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	0018      	movs	r0, r3
 800ede8:	f001 ffd3 	bl	8010d92 <TimerGetElapsedTime>
 800edec:	0003      	movs	r3, r0
 800edee:	429c      	cmp	r4, r3
 800edf0:	d807      	bhi.n	800ee02 <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 800edf2:	2313      	movs	r3, #19
 800edf4:	18fb      	adds	r3, r7, r3
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	011b      	lsls	r3, r3, #4
 800edfa:	683a      	ldr	r2, [r7, #0]
 800edfc:	18d3      	adds	r3, r2, r3
 800edfe:	2200      	movs	r2, #0
 800ee00:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 800ee02:	2313      	movs	r3, #19
 800ee04:	18fb      	adds	r3, r7, r3
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	011b      	lsls	r3, r3, #4
 800ee0a:	683a      	ldr	r2, [r7, #0]
 800ee0c:	18d3      	adds	r3, r2, r3
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d034      	beq.n	800ee7e <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 800ee14:	2113      	movs	r1, #19
 800ee16:	187b      	adds	r3, r7, r1
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	011b      	lsls	r3, r3, #4
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	18d3      	adds	r3, r2, r3
 800ee20:	68dc      	ldr	r4, [r3, #12]
 800ee22:	187b      	adds	r3, r7, r1
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	011b      	lsls	r3, r3, #4
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	18d3      	adds	r3, r2, r3
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	0018      	movs	r0, r3
 800ee30:	f001 ffaf 	bl	8010d92 <TimerGetElapsedTime>
 800ee34:	0003      	movs	r3, r0
 800ee36:	1ae3      	subs	r3, r4, r3
 800ee38:	697a      	ldr	r2, [r7, #20]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d912      	bls.n	800ee64 <RegionCommonUpdateBandTimeOff+0x1aa>
 800ee3e:	2113      	movs	r1, #19
 800ee40:	187b      	adds	r3, r7, r1
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	011b      	lsls	r3, r3, #4
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	18d3      	adds	r3, r2, r3
 800ee4a:	68dc      	ldr	r4, [r3, #12]
 800ee4c:	187b      	adds	r3, r7, r1
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	011b      	lsls	r3, r3, #4
 800ee52:	683a      	ldr	r2, [r7, #0]
 800ee54:	18d3      	adds	r3, r2, r3
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	0018      	movs	r0, r3
 800ee5a:	f001 ff9a 	bl	8010d92 <TimerGetElapsedTime>
 800ee5e:	0003      	movs	r3, r0
 800ee60:	1ae3      	subs	r3, r4, r3
 800ee62:	e000      	b.n	800ee66 <RegionCommonUpdateBandTimeOff+0x1ac>
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	617b      	str	r3, [r7, #20]
 800ee68:	e009      	b.n	800ee7e <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 800ee6e:	2313      	movs	r3, #19
 800ee70:	18fb      	adds	r3, r7, r3
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	011b      	lsls	r3, r3, #4
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	18d3      	adds	r3, r2, r3
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800ee7e:	2113      	movs	r1, #19
 800ee80:	187b      	adds	r3, r7, r1
 800ee82:	781a      	ldrb	r2, [r3, #0]
 800ee84:	187b      	adds	r3, r7, r1
 800ee86:	3201      	adds	r2, #1
 800ee88:	701a      	strb	r2, [r3, #0]
 800ee8a:	2313      	movs	r3, #19
 800ee8c:	18fa      	adds	r2, r7, r3
 800ee8e:	1d7b      	adds	r3, r7, #5
 800ee90:	7812      	ldrb	r2, [r2, #0]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d200      	bcs.n	800ee9a <RegionCommonUpdateBandTimeOff+0x1e0>
 800ee98:	e727      	b.n	800ecea <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 800ee9a:	697b      	ldr	r3, [r7, #20]
}
 800ee9c:	0018      	movs	r0, r3
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	b007      	add	sp, #28
 800eea2:	bd90      	pop	{r4, r7, pc}

0800eea4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 800eeae:	230f      	movs	r3, #15
 800eeb0:	18fb      	adds	r3, r7, r3
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	2b03      	cmp	r3, #3
 800eebc:	d141      	bne.n	800ef42 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3301      	adds	r3, #1
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	b25a      	sxtb	r2, r3
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	785b      	ldrb	r3, [r3, #1]
 800eece:	b25b      	sxtb	r3, r3
 800eed0:	220f      	movs	r2, #15
 800eed2:	4013      	ands	r3, r2
 800eed4:	b25a      	sxtb	r2, r3
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	785b      	ldrb	r3, [r3, #1]
 800eede:	b25b      	sxtb	r3, r3
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	091b      	lsrs	r3, r3, #4
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	b25a      	sxtb	r2, r3
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	3302      	adds	r3, #2
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	889b      	ldrh	r3, [r3, #4]
 800eefc:	b21a      	sxth	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3303      	adds	r3, #3
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	021b      	lsls	r3, r3, #8
 800ef06:	b21b      	sxth	r3, r3
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	b21b      	sxth	r3, r3
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	791a      	ldrb	r2, [r3, #4]
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	091b      	lsrs	r3, r3, #4
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	2207      	movs	r2, #7
 800ef24:	4013      	ands	r3, r2
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	220f      	movs	r2, #15
 800ef32:	4013      	ands	r3, r2
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800ef3a:	230f      	movs	r3, #15
 800ef3c:	18fb      	adds	r3, r7, r3
 800ef3e:	2205      	movs	r2, #5
 800ef40:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 800ef42:	230f      	movs	r3, #15
 800ef44:	18fb      	adds	r3, r7, r3
 800ef46:	781b      	ldrb	r3, [r3, #0]
}
 800ef48:	0018      	movs	r0, r3
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	b004      	add	sp, #16
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800ef50:	b5b0      	push	{r4, r5, r7, lr}
 800ef52:	b088      	sub	sp, #32
 800ef54:	af02      	add	r7, sp, #8
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 800ef5e:	2317      	movs	r3, #23
 800ef60:	18fb      	adds	r3, r7, r3
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	7912      	ldrb	r2, [r2, #4]
 800ef66:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 800ef68:	2316      	movs	r3, #22
 800ef6a:	18fb      	adds	r3, r7, r3
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	7992      	ldrb	r2, [r2, #6]
 800ef70:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 800ef72:	2315      	movs	r3, #21
 800ef74:	18fb      	adds	r3, r7, r3
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	79d2      	ldrb	r2, [r2, #7]
 800ef7a:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	7a1a      	ldrb	r2, [r3, #8]
 800ef80:	2314      	movs	r3, #20
 800ef82:	18fb      	adds	r3, r7, r3
 800ef84:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	795b      	ldrb	r3, [r3, #5]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	4053      	eors	r3, r2
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00e      	beq.n	800efb2 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800ef94:	2314      	movs	r3, #20
 800ef96:	18fb      	adds	r3, r7, r3
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	7ad2      	ldrb	r2, [r2, #11]
 800ef9c:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 800ef9e:	2316      	movs	r3, #22
 800efa0:	18fb      	adds	r3, r7, r3
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	7a52      	ldrb	r2, [r2, #9]
 800efa6:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 800efa8:	2315      	movs	r3, #21
 800efaa:	18fb      	adds	r3, r7, r3
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	7a92      	ldrb	r2, [r2, #10]
 800efb0:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 800efb2:	2317      	movs	r3, #23
 800efb4:	18fb      	adds	r3, r7, r3
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d049      	beq.n	800f050 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	7b18      	ldrb	r0, [r3, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	691c      	ldr	r4, [r3, #16]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2514      	movs	r5, #20
 800efc8:	575d      	ldrsb	r5, [r3, r5]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2215      	movs	r2, #21
 800efce:	569a      	ldrsb	r2, [r3, r2]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	2116      	movs	r1, #22
 800efd6:	1879      	adds	r1, r7, r1
 800efd8:	7809      	ldrb	r1, [r1, #0]
 800efda:	b249      	sxtb	r1, r1
 800efdc:	9301      	str	r3, [sp, #4]
 800efde:	9200      	str	r2, [sp, #0]
 800efe0:	002b      	movs	r3, r5
 800efe2:	000a      	movs	r2, r1
 800efe4:	0021      	movs	r1, r4
 800efe6:	f7ff fcdb 	bl	800e9a0 <RegionCommonChanVerifyDr>
 800efea:	0003      	movs	r3, r0
 800efec:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 800efee:	2301      	movs	r3, #1
 800eff0:	4053      	eors	r3, r2
 800eff2:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d006      	beq.n	800f006 <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 800eff8:	2217      	movs	r2, #23
 800effa:	18bb      	adds	r3, r7, r2
 800effc:	18ba      	adds	r2, r7, r2
 800effe:	7812      	ldrb	r2, [r2, #0]
 800f000:	2102      	movs	r1, #2
 800f002:	438a      	bics	r2, r1
 800f004:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	211d      	movs	r1, #29
 800f00a:	5659      	ldrsb	r1, [r3, r1]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	221c      	movs	r2, #28
 800f010:	569a      	ldrsb	r2, [r3, r2]
 800f012:	2315      	movs	r3, #21
 800f014:	18fb      	adds	r3, r7, r3
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	b25b      	sxtb	r3, r3
 800f01a:	0018      	movs	r0, r3
 800f01c:	f7ff fd5a 	bl	800ead4 <RegionCommonValueInRange>
 800f020:	1e03      	subs	r3, r0, #0
 800f022:	d115      	bne.n	800f050 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	7f5b      	ldrb	r3, [r3, #29]
 800f028:	b25b      	sxtb	r3, r3
 800f02a:	2215      	movs	r2, #21
 800f02c:	18ba      	adds	r2, r7, r2
 800f02e:	7812      	ldrb	r2, [r2, #0]
 800f030:	b252      	sxtb	r2, r2
 800f032:	429a      	cmp	r2, r3
 800f034:	da05      	bge.n	800f042 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 800f036:	2315      	movs	r3, #21
 800f038:	18fb      	adds	r3, r7, r3
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	7f52      	ldrb	r2, [r2, #29]
 800f03e:	701a      	strb	r2, [r3, #0]
 800f040:	e006      	b.n	800f050 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800f042:	2217      	movs	r2, #23
 800f044:	18bb      	adds	r3, r7, r2
 800f046:	18ba      	adds	r2, r7, r2
 800f048:	7812      	ldrb	r2, [r2, #0]
 800f04a:	2104      	movs	r1, #4
 800f04c:	438a      	bics	r2, r1
 800f04e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800f050:	2317      	movs	r3, #23
 800f052:	18fb      	adds	r3, r7, r3
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b07      	cmp	r3, #7
 800f058:	d109      	bne.n	800f06e <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 800f05a:	2314      	movs	r3, #20
 800f05c:	18fb      	adds	r3, r7, r3
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	b25b      	sxtb	r3, r3
 800f062:	2b00      	cmp	r3, #0
 800f064:	d103      	bne.n	800f06e <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 800f066:	2314      	movs	r3, #20
 800f068:	18fb      	adds	r3, r7, r3
 800f06a:	2201      	movs	r2, #1
 800f06c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2216      	movs	r2, #22
 800f072:	18ba      	adds	r2, r7, r2
 800f074:	7812      	ldrb	r2, [r2, #0]
 800f076:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2215      	movs	r2, #21
 800f07c:	18ba      	adds	r2, r7, r2
 800f07e:	7812      	ldrb	r2, [r2, #0]
 800f080:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 800f082:	2314      	movs	r3, #20
 800f084:	18fb      	adds	r3, r7, r3
 800f086:	781a      	ldrb	r2, [r3, #0]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	701a      	strb	r2, [r3, #0]

    return status;
 800f08c:	2317      	movs	r3, #23
 800f08e:	18fb      	adds	r3, r7, r3
 800f090:	781b      	ldrb	r3, [r3, #0]
}
 800f092:	0018      	movs	r0, r3
 800f094:	46bd      	mov	sp, r7
 800f096:	b006      	add	sp, #24
 800f098:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f09c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800f09c:	b5b0      	push	{r4, r5, r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	0002      	movs	r2, r0
 800f0a4:	6039      	str	r1, [r7, #0]
 800f0a6:	1dfb      	adds	r3, r7, #7
 800f0a8:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800f0aa:	1dfb      	adds	r3, r7, #7
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	409a      	lsls	r2, r3
 800f0b2:	0013      	movs	r3, r2
 800f0b4:	0018      	movs	r0, r3
 800f0b6:	f7f3 fa67 	bl	8002588 <__aeabi_i2d>
 800f0ba:	0004      	movs	r4, r0
 800f0bc:	000d      	movs	r5, r1
 800f0be:	6838      	ldr	r0, [r7, #0]
 800f0c0:	f7f3 fa9c 	bl	80025fc <__aeabi_ui2d>
 800f0c4:	0002      	movs	r2, r0
 800f0c6:	000b      	movs	r3, r1
 800f0c8:	0020      	movs	r0, r4
 800f0ca:	0029      	movs	r1, r5
 800f0cc:	f7f2 f862 	bl	8001194 <__aeabi_ddiv>
 800f0d0:	0003      	movs	r3, r0
 800f0d2:	000c      	movs	r4, r1
 800f0d4:	0018      	movs	r0, r3
 800f0d6:	0021      	movs	r1, r4
 800f0d8:	2200      	movs	r2, #0
 800f0da:	4b05      	ldr	r3, [pc, #20]	; (800f0f0 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 800f0dc:	f7f2 fc64 	bl	80019a8 <__aeabi_dmul>
 800f0e0:	0003      	movs	r3, r0
 800f0e2:	000c      	movs	r4, r1
}
 800f0e4:	0018      	movs	r0, r3
 800f0e6:	0021      	movs	r1, r4
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	b002      	add	sp, #8
 800f0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ee:	46c0      	nop			; (mov r8, r8)
 800f0f0:	408f4000 	.word	0x408f4000

0800f0f4 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800f0f4:	b590      	push	{r4, r7, lr}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	0002      	movs	r2, r0
 800f0fc:	1dfb      	adds	r3, r7, #7
 800f0fe:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800f100:	1dfb      	adds	r3, r7, #7
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	0018      	movs	r0, r3
 800f106:	f7f3 fa79 	bl	80025fc <__aeabi_ui2d>
 800f10a:	0003      	movs	r3, r0
 800f10c:	000c      	movs	r4, r1
 800f10e:	001a      	movs	r2, r3
 800f110:	0023      	movs	r3, r4
 800f112:	2000      	movs	r0, #0
 800f114:	4904      	ldr	r1, [pc, #16]	; (800f128 <RegionCommonComputeSymbolTimeFsk+0x34>)
 800f116:	f7f2 f83d 	bl	8001194 <__aeabi_ddiv>
 800f11a:	0003      	movs	r3, r0
 800f11c:	000c      	movs	r4, r1
}
 800f11e:	0018      	movs	r0, r3
 800f120:	0021      	movs	r1, r4
 800f122:	46bd      	mov	sp, r7
 800f124:	b003      	add	sp, #12
 800f126:	bd90      	pop	{r4, r7, pc}
 800f128:	40200000 	.word	0x40200000

0800f12c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800f12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	60b8      	str	r0, [r7, #8]
 800f134:	60f9      	str	r1, [r7, #12]
 800f136:	603b      	str	r3, [r7, #0]
 800f138:	1dfb      	adds	r3, r7, #7
 800f13a:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800f13c:	1dfb      	adds	r3, r7, #7
 800f13e:	781c      	ldrb	r4, [r3, #0]
 800f140:	1dfb      	adds	r3, r7, #7
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	3b04      	subs	r3, #4
 800f146:	005b      	lsls	r3, r3, #1
 800f148:	0018      	movs	r0, r3
 800f14a:	f7f3 fa1d 	bl	8002588 <__aeabi_i2d>
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f7f2 fc29 	bl	80019a8 <__aeabi_dmul>
 800f156:	0002      	movs	r2, r0
 800f158:	000b      	movs	r3, r1
 800f15a:	0015      	movs	r5, r2
 800f15c:	001e      	movs	r6, r3
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	005b      	lsls	r3, r3, #1
 800f162:	0018      	movs	r0, r3
 800f164:	f7f3 fa4a 	bl	80025fc <__aeabi_ui2d>
 800f168:	0002      	movs	r2, r0
 800f16a:	000b      	movs	r3, r1
 800f16c:	0028      	movs	r0, r5
 800f16e:	0031      	movs	r1, r6
 800f170:	f7f1 fcf4 	bl	8000b5c <__aeabi_dadd>
 800f174:	0002      	movs	r2, r0
 800f176:	000b      	movs	r3, r1
 800f178:	0010      	movs	r0, r2
 800f17a:	0019      	movs	r1, r3
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f7f2 f808 	bl	8001194 <__aeabi_ddiv>
 800f184:	0002      	movs	r2, r0
 800f186:	000b      	movs	r3, r1
 800f188:	0010      	movs	r0, r2
 800f18a:	0019      	movs	r1, r3
 800f18c:	f00b fb14 	bl	801a7b8 <ceil>
 800f190:	0002      	movs	r2, r0
 800f192:	000b      	movs	r3, r1
 800f194:	0010      	movs	r0, r2
 800f196:	0019      	movs	r1, r3
 800f198:	f7f1 f9e0 	bl	800055c <__aeabi_d2uiz>
 800f19c:	0002      	movs	r2, r0
 800f19e:	0023      	movs	r3, r4
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d200      	bcs.n	800f1a6 <RegionCommonComputeRxWindowParameters+0x7a>
 800f1a4:	0013      	movs	r3, r2
 800f1a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1a8:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	4b20      	ldr	r3, [pc, #128]	; (800f230 <RegionCommonComputeRxWindowParameters+0x104>)
 800f1ae:	68b8      	ldr	r0, [r7, #8]
 800f1b0:	68f9      	ldr	r1, [r7, #12]
 800f1b2:	f7f2 fbf9 	bl	80019a8 <__aeabi_dmul>
 800f1b6:	0003      	movs	r3, r0
 800f1b8:	000c      	movs	r4, r1
 800f1ba:	0025      	movs	r5, r4
 800f1bc:	001c      	movs	r4, r3
 800f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	0018      	movs	r0, r3
 800f1c4:	f7f3 fa1a 	bl	80025fc <__aeabi_ui2d>
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f7f2 fbec 	bl	80019a8 <__aeabi_dmul>
 800f1d0:	0002      	movs	r2, r0
 800f1d2:	000b      	movs	r3, r1
 800f1d4:	0010      	movs	r0, r2
 800f1d6:	0019      	movs	r1, r3
 800f1d8:	2200      	movs	r2, #0
 800f1da:	2380      	movs	r3, #128	; 0x80
 800f1dc:	05db      	lsls	r3, r3, #23
 800f1de:	f7f1 ffd9 	bl	8001194 <__aeabi_ddiv>
 800f1e2:	0002      	movs	r2, r0
 800f1e4:	000b      	movs	r3, r1
 800f1e6:	0020      	movs	r0, r4
 800f1e8:	0029      	movs	r1, r5
 800f1ea:	f7f2 fe4f 	bl	8001e8c <__aeabi_dsub>
 800f1ee:	0003      	movs	r3, r0
 800f1f0:	000c      	movs	r4, r1
 800f1f2:	0025      	movs	r5, r4
 800f1f4:	001c      	movs	r4, r3
 800f1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1f8:	f7f3 fa00 	bl	80025fc <__aeabi_ui2d>
 800f1fc:	0002      	movs	r2, r0
 800f1fe:	000b      	movs	r3, r1
 800f200:	0020      	movs	r0, r4
 800f202:	0029      	movs	r1, r5
 800f204:	f7f2 fe42 	bl	8001e8c <__aeabi_dsub>
 800f208:	0003      	movs	r3, r0
 800f20a:	000c      	movs	r4, r1
 800f20c:	0018      	movs	r0, r3
 800f20e:	0021      	movs	r1, r4
 800f210:	f00b fad2 	bl	801a7b8 <ceil>
 800f214:	0003      	movs	r3, r0
 800f216:	000c      	movs	r4, r1
 800f218:	0018      	movs	r0, r3
 800f21a:	0021      	movs	r1, r4
 800f21c:	f7f3 f97e 	bl	800251c <__aeabi_d2iz>
 800f220:	0002      	movs	r2, r0
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	601a      	str	r2, [r3, #0]
}
 800f226:	46c0      	nop			; (mov r8, r8)
 800f228:	46bd      	mov	sp, r7
 800f22a:	b005      	add	sp, #20
 800f22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f22e:	46c0      	nop			; (mov r8, r8)
 800f230:	40100000 	.word	0x40100000

0800f234 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800f234:	b5b0      	push	{r4, r5, r7, lr}
 800f236:	b086      	sub	sp, #24
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	607a      	str	r2, [r7, #4]
 800f23e:	210f      	movs	r1, #15
 800f240:	187b      	adds	r3, r7, r1
 800f242:	1c02      	adds	r2, r0, #0
 800f244:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 800f246:	2517      	movs	r5, #23
 800f248:	197b      	adds	r3, r7, r5
 800f24a:	2200      	movs	r2, #0
 800f24c:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800f24e:	187b      	adds	r3, r7, r1
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	b25b      	sxtb	r3, r3
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	0018      	movs	r0, r3
 800f258:	f7f1 fc40 	bl	8000adc <__aeabi_ui2f>
 800f25c:	1c03      	adds	r3, r0, #0
 800f25e:	1c19      	adds	r1, r3, #0
 800f260:	68b8      	ldr	r0, [r7, #8]
 800f262:	f7f1 fa77 	bl	8000754 <__aeabi_fsub>
 800f266:	1c03      	adds	r3, r0, #0
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	1c18      	adds	r0, r3, #0
 800f26c:	f7f1 fa72 	bl	8000754 <__aeabi_fsub>
 800f270:	1c03      	adds	r3, r0, #0
 800f272:	1c18      	adds	r0, r3, #0
 800f274:	f7f3 f9f4 	bl	8002660 <__aeabi_f2d>
 800f278:	0003      	movs	r3, r0
 800f27a:	000c      	movs	r4, r1
 800f27c:	0018      	movs	r0, r3
 800f27e:	0021      	movs	r1, r4
 800f280:	f00b fb1c 	bl	801a8bc <floor>
 800f284:	0002      	movs	r2, r0
 800f286:	000b      	movs	r3, r1
 800f288:	197c      	adds	r4, r7, r5
 800f28a:	0010      	movs	r0, r2
 800f28c:	0019      	movs	r1, r3
 800f28e:	f7f3 f945 	bl	800251c <__aeabi_d2iz>
 800f292:	0003      	movs	r3, r0
 800f294:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 800f296:	197b      	adds	r3, r7, r5
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	b25b      	sxtb	r3, r3
}
 800f29c:	0018      	movs	r0, r3
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	b006      	add	sp, #24
 800f2a2:	bdb0      	pop	{r4, r5, r7, pc}

0800f2a4 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 800f2a4:	b5b0      	push	{r4, r5, r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	7adb      	ldrb	r3, [r3, #11]
 800f2b4:	0019      	movs	r1, r3
 800f2b6:	000b      	movs	r3, r1
 800f2b8:	005b      	lsls	r3, r3, #1
 800f2ba:	185b      	adds	r3, r3, r1
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	18d2      	adds	r2, r2, r3
 800f2c0:	210f      	movs	r1, #15
 800f2c2:	187b      	adds	r3, r7, r1
 800f2c4:	7a52      	ldrb	r2, [r2, #9]
 800f2c6:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	187b      	adds	r3, r7, r1
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	011b      	lsls	r3, r3, #4
 800f2d2:	18d2      	adds	r2, r2, r3
 800f2d4:	230c      	movs	r3, #12
 800f2d6:	18fb      	adds	r3, r7, r3
 800f2d8:	8812      	ldrh	r2, [r2, #0]
 800f2da:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 800f2dc:	230a      	movs	r3, #10
 800f2de:	18fb      	adds	r3, r7, r3
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	685a      	ldr	r2, [r3, #4]
 800f2e8:	187b      	adds	r3, r7, r1
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	011b      	lsls	r3, r3, #4
 800f2ee:	18d3      	adds	r3, r2, r3
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	7a5b      	ldrb	r3, [r3, #9]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	4053      	eors	r3, r2
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d03c      	beq.n	800f37c <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	250a      	movs	r5, #10
 800f308:	197c      	adds	r4, r7, r5
 800f30a:	0018      	movs	r0, r3
 800f30c:	f7ff fb1c 	bl	800e948 <RegionCommonGetJoinDc>
 800f310:	0003      	movs	r3, r0
 800f312:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800f314:	210c      	movs	r1, #12
 800f316:	187a      	adds	r2, r7, r1
 800f318:	197b      	adds	r3, r7, r5
 800f31a:	1879      	adds	r1, r7, r1
 800f31c:	880c      	ldrh	r4, [r1, #0]
 800f31e:	881b      	ldrh	r3, [r3, #0]
 800f320:	b298      	uxth	r0, r3
 800f322:	b2a1      	uxth	r1, r4
 800f324:	4288      	cmp	r0, r1
 800f326:	d200      	bcs.n	800f32a <RegionCommonCalcBackOff+0x86>
 800f328:	1c23      	adds	r3, r4, #0
 800f32a:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	7a9b      	ldrb	r3, [r3, #10]
 800f330:	2201      	movs	r2, #1
 800f332:	4053      	eors	r3, r2
 800f334:	b2db      	uxtb	r3, r3
 800f336:	2b00      	cmp	r3, #0
 800f338:	d010      	beq.n	800f35c <RegionCommonCalcBackOff+0xb8>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	7a1b      	ldrb	r3, [r3, #8]
 800f33e:	2201      	movs	r2, #1
 800f340:	4053      	eors	r3, r2
 800f342:	b2db      	uxtb	r3, r3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d009      	beq.n	800f35c <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685a      	ldr	r2, [r3, #4]
 800f34c:	230f      	movs	r3, #15
 800f34e:	18fb      	adds	r3, r7, r3
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	18d3      	adds	r3, r2, r3
 800f356:	2200      	movs	r2, #0
 800f358:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 800f35a:	e02c      	b.n	800f3b6 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800f35c:	230c      	movs	r3, #12
 800f35e:	18fb      	adds	r3, r7, r3
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	1e5a      	subs	r2, r3, #1
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6919      	ldr	r1, [r3, #16]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6858      	ldr	r0, [r3, #4]
 800f36c:	230f      	movs	r3, #15
 800f36e:	18fb      	adds	r3, r7, r3
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	011b      	lsls	r3, r3, #4
 800f374:	18c3      	adds	r3, r0, r3
 800f376:	434a      	muls	r2, r1
 800f378:	60da      	str	r2, [r3, #12]
}
 800f37a:	e01c      	b.n	800f3b6 <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	7a9b      	ldrb	r3, [r3, #10]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00f      	beq.n	800f3a4 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800f384:	230c      	movs	r3, #12
 800f386:	18fb      	adds	r3, r7, r3
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	1e5a      	subs	r2, r3, #1
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6919      	ldr	r1, [r3, #16]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6858      	ldr	r0, [r3, #4]
 800f394:	230f      	movs	r3, #15
 800f396:	18fb      	adds	r3, r7, r3
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	011b      	lsls	r3, r3, #4
 800f39c:	18c3      	adds	r3, r0, r3
 800f39e:	434a      	muls	r2, r1
 800f3a0:	60da      	str	r2, [r3, #12]
}
 800f3a2:	e008      	b.n	800f3b6 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	230f      	movs	r3, #15
 800f3aa:	18fb      	adds	r3, r7, r3
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	011b      	lsls	r3, r3, #4
 800f3b0:	18d3      	adds	r3, r2, r3
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	60da      	str	r2, [r3, #12]
}
 800f3b6:	46c0      	nop			; (mov r8, r8)
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	b004      	add	sp, #16
 800f3bc:	bdb0      	pop	{r4, r5, r7, pc}

0800f3be <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b084      	sub	sp, #16
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	0002      	movs	r2, r0
 800f3c6:	1dfb      	adds	r3, r7, #7
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	1dbb      	adds	r3, r7, #6
 800f3cc:	1c0a      	adds	r2, r1, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 800f3d0:	230f      	movs	r3, #15
 800f3d2:	18fb      	adds	r3, r7, r3
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 800f3d8:	1dfa      	adds	r2, r7, #7
 800f3da:	1dbb      	adds	r3, r7, #6
 800f3dc:	7812      	ldrb	r2, [r2, #0]
 800f3de:	b252      	sxtb	r2, r2
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	b25b      	sxtb	r3, r3
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d105      	bne.n	800f3f4 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 800f3e8:	230f      	movs	r3, #15
 800f3ea:	18fb      	adds	r3, r7, r3
 800f3ec:	1dba      	adds	r2, r7, #6
 800f3ee:	7812      	ldrb	r2, [r2, #0]
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	e005      	b.n	800f400 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 800f3f4:	1dfb      	adds	r3, r7, #7
 800f3f6:	781a      	ldrb	r2, [r3, #0]
 800f3f8:	230f      	movs	r3, #15
 800f3fa:	18fb      	adds	r3, r7, r3
 800f3fc:	3a01      	subs	r2, #1
 800f3fe:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 800f400:	230f      	movs	r3, #15
 800f402:	18fb      	adds	r3, r7, r3
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	b25b      	sxtb	r3, r3
}
 800f408:	0018      	movs	r0, r3
 800f40a:	46bd      	mov	sp, r7
 800f40c:	b004      	add	sp, #16
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 800f418:	4b09      	ldr	r3, [pc, #36]	; (800f440 <GetBandwidth+0x30>)
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	0092      	lsls	r2, r2, #2
 800f41e:	58d3      	ldr	r3, [r2, r3]
 800f420:	4a08      	ldr	r2, [pc, #32]	; (800f444 <GetBandwidth+0x34>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d004      	beq.n	800f430 <GetBandwidth+0x20>
 800f426:	4a08      	ldr	r2, [pc, #32]	; (800f448 <GetBandwidth+0x38>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d003      	beq.n	800f434 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	e002      	b.n	800f436 <GetBandwidth+0x26>
        case 250000:
            return 1;
 800f430:	2301      	movs	r3, #1
 800f432:	e000      	b.n	800f436 <GetBandwidth+0x26>
        case 500000:
            return 2;
 800f434:	2302      	movs	r3, #2
    }
}
 800f436:	0018      	movs	r0, r3
 800f438:	46bd      	mov	sp, r7
 800f43a:	b002      	add	sp, #8
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	46c0      	nop			; (mov r8, r8)
 800f440:	0801bb90 	.word	0x0801bb90
 800f444:	0003d090 	.word	0x0003d090
 800f448:	0007a120 	.word	0x0007a120

0800f44c <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 800f44c:	b590      	push	{r4, r7, lr}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	0004      	movs	r4, r0
 800f454:	0008      	movs	r0, r1
 800f456:	0011      	movs	r1, r2
 800f458:	603b      	str	r3, [r7, #0]
 800f45a:	1dfb      	adds	r3, r7, #7
 800f45c:	1c22      	adds	r2, r4, #0
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	1dbb      	adds	r3, r7, #6
 800f462:	1c02      	adds	r2, r0, #0
 800f464:	701a      	strb	r2, [r3, #0]
 800f466:	1d7b      	adds	r3, r7, #5
 800f468:	1c0a      	adds	r2, r1, #0
 800f46a:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 800f46c:	210f      	movs	r1, #15
 800f46e:	187b      	adds	r3, r7, r1
 800f470:	1dfa      	adds	r2, r7, #7
 800f472:	7812      	ldrb	r2, [r2, #0]
 800f474:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800f476:	187a      	adds	r2, r7, r1
 800f478:	1dbb      	adds	r3, r7, #6
 800f47a:	1df9      	adds	r1, r7, #7
 800f47c:	780c      	ldrb	r4, [r1, #0]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	b258      	sxtb	r0, r3
 800f482:	b261      	sxtb	r1, r4
 800f484:	4288      	cmp	r0, r1
 800f486:	da00      	bge.n	800f48a <LimitTxPower+0x3e>
 800f488:	1c23      	adds	r3, r4, #0
 800f48a:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 800f48c:	230f      	movs	r3, #15
 800f48e:	18fb      	adds	r3, r7, r3
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	b25b      	sxtb	r3, r3
}
 800f494:	0018      	movs	r0, r3
 800f496:	46bd      	mov	sp, r7
 800f498:	b005      	add	sp, #20
 800f49a:	bd90      	pop	{r4, r7, pc}

0800f49c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f4a6:	4b2e      	ldr	r3, [pc, #184]	; (800f560 <VerifyRfFreq+0xc4>)
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	0010      	movs	r0, r2
 800f4ae:	4798      	blx	r3
 800f4b0:	0003      	movs	r3, r0
 800f4b2:	001a      	movs	r2, r3
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	4053      	eors	r3, r2
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <VerifyRfFreq+0x26>
    {
        return false;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e04a      	b.n	800f558 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a27      	ldr	r2, [pc, #156]	; (800f564 <VerifyRfFreq+0xc8>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d907      	bls.n	800f4da <VerifyRfFreq+0x3e>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a26      	ldr	r2, [pc, #152]	; (800f568 <VerifyRfFreq+0xcc>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d803      	bhi.n	800f4da <VerifyRfFreq+0x3e>
    {
        *band = 2;
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	701a      	strb	r2, [r3, #0]
 800f4d8:	e03d      	b.n	800f556 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a22      	ldr	r2, [pc, #136]	; (800f568 <VerifyRfFreq+0xcc>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d907      	bls.n	800f4f2 <VerifyRfFreq+0x56>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a21      	ldr	r2, [pc, #132]	; (800f56c <VerifyRfFreq+0xd0>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d803      	bhi.n	800f4f2 <VerifyRfFreq+0x56>
    {
        *band = 0;
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	701a      	strb	r2, [r3, #0]
 800f4f0:	e031      	b.n	800f556 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a1d      	ldr	r2, [pc, #116]	; (800f56c <VerifyRfFreq+0xd0>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d907      	bls.n	800f50a <VerifyRfFreq+0x6e>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a1c      	ldr	r2, [pc, #112]	; (800f570 <VerifyRfFreq+0xd4>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d803      	bhi.n	800f50a <VerifyRfFreq+0x6e>
    {
        *band = 1;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	2201      	movs	r2, #1
 800f506:	701a      	strb	r2, [r3, #0]
 800f508:	e025      	b.n	800f556 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a19      	ldr	r2, [pc, #100]	; (800f574 <VerifyRfFreq+0xd8>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d907      	bls.n	800f522 <VerifyRfFreq+0x86>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a18      	ldr	r2, [pc, #96]	; (800f578 <VerifyRfFreq+0xdc>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d803      	bhi.n	800f522 <VerifyRfFreq+0x86>
    {
        *band = 2;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2202      	movs	r2, #2
 800f51e:	701a      	strb	r2, [r3, #0]
 800f520:	e019      	b.n	800f556 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a15      	ldr	r2, [pc, #84]	; (800f57c <VerifyRfFreq+0xe0>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d907      	bls.n	800f53a <VerifyRfFreq+0x9e>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a14      	ldr	r2, [pc, #80]	; (800f580 <VerifyRfFreq+0xe4>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d803      	bhi.n	800f53a <VerifyRfFreq+0x9e>
    {
        *band = 3;
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	2203      	movs	r2, #3
 800f536:	701a      	strb	r2, [r3, #0]
 800f538:	e00d      	b.n	800f556 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a11      	ldr	r2, [pc, #68]	; (800f584 <VerifyRfFreq+0xe8>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d907      	bls.n	800f552 <VerifyRfFreq+0xb6>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a10      	ldr	r2, [pc, #64]	; (800f588 <VerifyRfFreq+0xec>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d803      	bhi.n	800f552 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	2204      	movs	r2, #4
 800f54e:	701a      	strb	r2, [r3, #0]
 800f550:	e001      	b.n	800f556 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 800f552:	2300      	movs	r3, #0
 800f554:	e000      	b.n	800f558 <VerifyRfFreq+0xbc>
    }
    return true;
 800f556:	2301      	movs	r3, #1
}
 800f558:	0018      	movs	r0, r3
 800f55a:	46bd      	mov	sp, r7
 800f55c:	b002      	add	sp, #8
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	0801bc94 	.word	0x0801bc94
 800f564:	337055bf 	.word	0x337055bf
 800f568:	338eda3f 	.word	0x338eda3f
 800f56c:	33bca100 	.word	0x33bca100
 800f570:	33c5c8c0 	.word	0x33c5c8c0
 800f574:	33c74f5f 	.word	0x33c74f5f
 800f578:	33cef080 	.word	0x33cef080
 800f57c:	33d1fdbf 	.word	0x33d1fdbf
 800f580:	33d5ce50 	.word	0x33d5ce50
 800f584:	33d6919f 	.word	0x33d6919f
 800f588:	33db2580 	.word	0x33db2580

0800f58c <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 800f58c:	b5b0      	push	{r4, r5, r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	60ba      	str	r2, [r7, #8]
 800f594:	607b      	str	r3, [r7, #4]
 800f596:	230f      	movs	r3, #15
 800f598:	18fb      	adds	r3, r7, r3
 800f59a:	1c02      	adds	r2, r0, #0
 800f59c:	701a      	strb	r2, [r3, #0]
 800f59e:	230e      	movs	r3, #14
 800f5a0:	18fb      	adds	r3, r7, r3
 800f5a2:	1c0a      	adds	r2, r1, #0
 800f5a4:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 800f5a6:	2317      	movs	r3, #23
 800f5a8:	18fb      	adds	r3, r7, r3
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 800f5ae:	2316      	movs	r3, #22
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 800f5b6:	2315      	movs	r3, #21
 800f5b8:	18fb      	adds	r3, r7, r3
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	701a      	strb	r2, [r3, #0]
 800f5be:	2314      	movs	r3, #20
 800f5c0:	18fb      	adds	r3, r7, r3
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	701a      	strb	r2, [r3, #0]
 800f5c6:	e0b4      	b.n	800f732 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800f5c8:	2313      	movs	r3, #19
 800f5ca:	18fb      	adds	r3, r7, r3
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	e09d      	b.n	800f70e <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800f5d2:	2314      	movs	r3, #20
 800f5d4:	18fb      	adds	r3, r7, r3
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	18d3      	adds	r3, r2, r3
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	001a      	movs	r2, r3
 800f5e2:	2313      	movs	r3, #19
 800f5e4:	18fb      	adds	r3, r7, r3
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	411a      	asrs	r2, r3
 800f5ea:	0013      	movs	r3, r2
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	4013      	ands	r3, r2
 800f5f0:	d100      	bne.n	800f5f4 <CountNbOfEnabledChannels+0x68>
 800f5f2:	e086      	b.n	800f702 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 800f5f4:	2315      	movs	r3, #21
 800f5f6:	18fb      	adds	r3, r7, r3
 800f5f8:	781a      	ldrb	r2, [r3, #0]
 800f5fa:	2313      	movs	r3, #19
 800f5fc:	18fb      	adds	r3, r7, r3
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	18d3      	adds	r3, r2, r3
 800f602:	001a      	movs	r2, r3
 800f604:	0013      	movs	r3, r2
 800f606:	005b      	lsls	r3, r3, #1
 800f608:	189b      	adds	r3, r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	001a      	movs	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	189b      	adds	r3, r3, r2
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d06f      	beq.n	800f6f8 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 800f618:	230f      	movs	r3, #15
 800f61a:	18fb      	adds	r3, r7, r3
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	2201      	movs	r2, #1
 800f620:	4053      	eors	r3, r2
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d008      	beq.n	800f63a <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800f628:	2313      	movs	r3, #19
 800f62a:	18fb      	adds	r3, r7, r3
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2207      	movs	r2, #7
 800f630:	411a      	asrs	r2, r3
 800f632:	0013      	movs	r3, r2
 800f634:	2201      	movs	r2, #1
 800f636:	4013      	ands	r3, r2
 800f638:	d060      	beq.n	800f6fc <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800f63a:	230e      	movs	r3, #14
 800f63c:	18fb      	adds	r3, r7, r3
 800f63e:	2000      	movs	r0, #0
 800f640:	5618      	ldrsb	r0, [r3, r0]
 800f642:	2415      	movs	r4, #21
 800f644:	193b      	adds	r3, r7, r4
 800f646:	781a      	ldrb	r2, [r3, #0]
 800f648:	2513      	movs	r5, #19
 800f64a:	197b      	adds	r3, r7, r5
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	18d3      	adds	r3, r2, r3
 800f650:	001a      	movs	r2, r3
 800f652:	0013      	movs	r3, r2
 800f654:	005b      	lsls	r3, r3, #1
 800f656:	189b      	adds	r3, r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	001a      	movs	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	189b      	adds	r3, r3, r2
 800f660:	7a1b      	ldrb	r3, [r3, #8]
 800f662:	011b      	lsls	r3, r3, #4
 800f664:	b25b      	sxtb	r3, r3
 800f666:	111b      	asrs	r3, r3, #4
 800f668:	b25b      	sxtb	r3, r3
 800f66a:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800f66c:	193b      	adds	r3, r7, r4
 800f66e:	781a      	ldrb	r2, [r3, #0]
 800f670:	197b      	adds	r3, r7, r5
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	18d3      	adds	r3, r2, r3
 800f676:	001a      	movs	r2, r3
 800f678:	0013      	movs	r3, r2
 800f67a:	005b      	lsls	r3, r3, #1
 800f67c:	189b      	adds	r3, r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	001a      	movs	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	189b      	adds	r3, r3, r2
 800f686:	7a1b      	ldrb	r3, [r3, #8]
 800f688:	b25b      	sxtb	r3, r3
 800f68a:	111b      	asrs	r3, r3, #4
 800f68c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800f68e:	001a      	movs	r2, r3
 800f690:	f7ff fa20 	bl	800ead4 <RegionCommonValueInRange>
 800f694:	1e03      	subs	r3, r0, #0
 800f696:	d033      	beq.n	800f700 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800f698:	2315      	movs	r3, #21
 800f69a:	18fb      	adds	r3, r7, r3
 800f69c:	781a      	ldrb	r2, [r3, #0]
 800f69e:	2313      	movs	r3, #19
 800f6a0:	18fb      	adds	r3, r7, r3
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	18d3      	adds	r3, r2, r3
 800f6a6:	001a      	movs	r2, r3
 800f6a8:	0013      	movs	r3, r2
 800f6aa:	005b      	lsls	r3, r3, #1
 800f6ac:	189b      	adds	r3, r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	001a      	movs	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	189b      	adds	r3, r3, r2
 800f6b6:	7a5b      	ldrb	r3, [r3, #9]
 800f6b8:	011b      	lsls	r3, r3, #4
 800f6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6bc:	18d3      	adds	r3, r2, r3
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d006      	beq.n	800f6d2 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 800f6c4:	2116      	movs	r1, #22
 800f6c6:	187b      	adds	r3, r7, r1
 800f6c8:	781a      	ldrb	r2, [r3, #0]
 800f6ca:	187b      	adds	r3, r7, r1
 800f6cc:	3201      	adds	r2, #1
 800f6ce:	701a      	strb	r2, [r3, #0]
                    continue;
 800f6d0:	e017      	b.n	800f702 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 800f6d2:	2217      	movs	r2, #23
 800f6d4:	18bb      	adds	r3, r7, r2
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	18ba      	adds	r2, r7, r2
 800f6da:	1c59      	adds	r1, r3, #1
 800f6dc:	7011      	strb	r1, [r2, #0]
 800f6de:	001a      	movs	r2, r3
 800f6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e2:	189b      	adds	r3, r3, r2
 800f6e4:	2215      	movs	r2, #21
 800f6e6:	18b9      	adds	r1, r7, r2
 800f6e8:	2213      	movs	r2, #19
 800f6ea:	18ba      	adds	r2, r7, r2
 800f6ec:	7809      	ldrb	r1, [r1, #0]
 800f6ee:	7812      	ldrb	r2, [r2, #0]
 800f6f0:	188a      	adds	r2, r1, r2
 800f6f2:	b2d2      	uxtb	r2, r2
 800f6f4:	701a      	strb	r2, [r3, #0]
 800f6f6:	e004      	b.n	800f702 <CountNbOfEnabledChannels+0x176>
                    continue;
 800f6f8:	46c0      	nop			; (mov r8, r8)
 800f6fa:	e002      	b.n	800f702 <CountNbOfEnabledChannels+0x176>
                        continue;
 800f6fc:	46c0      	nop			; (mov r8, r8)
 800f6fe:	e000      	b.n	800f702 <CountNbOfEnabledChannels+0x176>
                    continue;
 800f700:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 800f702:	2113      	movs	r1, #19
 800f704:	187b      	adds	r3, r7, r1
 800f706:	781a      	ldrb	r2, [r3, #0]
 800f708:	187b      	adds	r3, r7, r1
 800f70a:	3201      	adds	r2, #1
 800f70c:	701a      	strb	r2, [r3, #0]
 800f70e:	2313      	movs	r3, #19
 800f710:	18fb      	adds	r3, r7, r3
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b0f      	cmp	r3, #15
 800f716:	d800      	bhi.n	800f71a <CountNbOfEnabledChannels+0x18e>
 800f718:	e75b      	b.n	800f5d2 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 800f71a:	2215      	movs	r2, #21
 800f71c:	18bb      	adds	r3, r7, r2
 800f71e:	18ba      	adds	r2, r7, r2
 800f720:	7812      	ldrb	r2, [r2, #0]
 800f722:	3210      	adds	r2, #16
 800f724:	701a      	strb	r2, [r3, #0]
 800f726:	2114      	movs	r1, #20
 800f728:	187b      	adds	r3, r7, r1
 800f72a:	781a      	ldrb	r2, [r3, #0]
 800f72c:	187b      	adds	r3, r7, r1
 800f72e:	3201      	adds	r2, #1
 800f730:	701a      	strb	r2, [r3, #0]
 800f732:	2315      	movs	r3, #21
 800f734:	18fb      	adds	r3, r7, r3
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	2b0f      	cmp	r3, #15
 800f73a:	d800      	bhi.n	800f73e <CountNbOfEnabledChannels+0x1b2>
 800f73c:	e744      	b.n	800f5c8 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	2216      	movs	r2, #22
 800f742:	18ba      	adds	r2, r7, r2
 800f744:	7812      	ldrb	r2, [r2, #0]
 800f746:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 800f748:	2317      	movs	r3, #23
 800f74a:	18fb      	adds	r3, r7, r3
 800f74c:	781b      	ldrb	r3, [r3, #0]
}
 800f74e:	0018      	movs	r0, r3
 800f750:	46bd      	mov	sp, r7
 800f752:	b006      	add	sp, #24
 800f754:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f758 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800f760:	2308      	movs	r3, #8
 800f762:	18fb      	adds	r3, r7, r3
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	2b34      	cmp	r3, #52	; 0x34
 800f76e:	d900      	bls.n	800f772 <RegionEU868GetPhyParam+0x1a>
 800f770:	e0ce      	b.n	800f910 <RegionEU868GetPhyParam+0x1b8>
 800f772:	009a      	lsls	r2, r3, #2
 800f774:	4b6e      	ldr	r3, [pc, #440]	; (800f930 <RegionEU868GetPhyParam+0x1d8>)
 800f776:	18d3      	adds	r3, r2, r3
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 800f77c:	2308      	movs	r3, #8
 800f77e:	18fb      	adds	r3, r7, r3
 800f780:	2200      	movs	r2, #0
 800f782:	601a      	str	r2, [r3, #0]
            break;
 800f784:	e0c5      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 800f786:	2308      	movs	r3, #8
 800f788:	18fb      	adds	r3, r7, r3
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]
            break;
 800f78e:	e0c0      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 800f790:	2308      	movs	r3, #8
 800f792:	18fb      	adds	r3, r7, r3
 800f794:	2200      	movs	r2, #0
 800f796:	601a      	str	r2, [r3, #0]
            break;
 800f798:	e0bb      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	b25b      	sxtb	r3, r3
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	0018      	movs	r0, r3
 800f7a4:	f7ff fe0b 	bl	800f3be <GetNextLowerTxDr>
 800f7a8:	0003      	movs	r3, r0
 800f7aa:	001a      	movs	r2, r3
 800f7ac:	2308      	movs	r3, #8
 800f7ae:	18fb      	adds	r3, r7, r3
 800f7b0:	601a      	str	r2, [r3, #0]
            break;
 800f7b2:	e0ae      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 800f7b4:	2308      	movs	r3, #8
 800f7b6:	18fb      	adds	r3, r7, r3
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	601a      	str	r2, [r3, #0]
            break;
 800f7bc:	e0a9      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 800f7be:	2308      	movs	r3, #8
 800f7c0:	18fb      	adds	r3, r7, r3
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]
            break;
 800f7c6:	e0a4      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 800f7c8:	2308      	movs	r3, #8
 800f7ca:	18fb      	adds	r3, r7, r3
 800f7cc:	2240      	movs	r2, #64	; 0x40
 800f7ce:	601a      	str	r2, [r3, #0]
            break;
 800f7d0:	e09f      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 800f7d2:	2308      	movs	r3, #8
 800f7d4:	18fb      	adds	r3, r7, r3
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	601a      	str	r2, [r3, #0]
            break;
 800f7da:	e09a      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	785b      	ldrb	r3, [r3, #1]
 800f7e0:	b25b      	sxtb	r3, r3
 800f7e2:	001a      	movs	r2, r3
 800f7e4:	4b53      	ldr	r3, [pc, #332]	; (800f934 <RegionEU868GetPhyParam+0x1dc>)
 800f7e6:	5c9b      	ldrb	r3, [r3, r2]
 800f7e8:	001a      	movs	r2, r3
 800f7ea:	2308      	movs	r3, #8
 800f7ec:	18fb      	adds	r3, r7, r3
 800f7ee:	601a      	str	r2, [r3, #0]
            break;
 800f7f0:	e08f      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	785b      	ldrb	r3, [r3, #1]
 800f7f6:	b25b      	sxtb	r3, r3
 800f7f8:	001a      	movs	r2, r3
 800f7fa:	4b4f      	ldr	r3, [pc, #316]	; (800f938 <RegionEU868GetPhyParam+0x1e0>)
 800f7fc:	5c9b      	ldrb	r3, [r3, r2]
 800f7fe:	001a      	movs	r2, r3
 800f800:	2308      	movs	r3, #8
 800f802:	18fb      	adds	r3, r7, r3
 800f804:	601a      	str	r2, [r3, #0]
            break;
 800f806:	e084      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800f808:	2308      	movs	r3, #8
 800f80a:	18fb      	adds	r3, r7, r3
 800f80c:	2201      	movs	r2, #1
 800f80e:	601a      	str	r2, [r3, #0]
            break;
 800f810:	e07f      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800f812:	2308      	movs	r3, #8
 800f814:	18fb      	adds	r3, r7, r3
 800f816:	4a49      	ldr	r2, [pc, #292]	; (800f93c <RegionEU868GetPhyParam+0x1e4>)
 800f818:	601a      	str	r2, [r3, #0]
            break;
 800f81a:	e07a      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 800f81c:	2308      	movs	r3, #8
 800f81e:	18fb      	adds	r3, r7, r3
 800f820:	22fa      	movs	r2, #250	; 0xfa
 800f822:	0092      	lsls	r2, r2, #2
 800f824:	601a      	str	r2, [r3, #0]
            break;
 800f826:	e074      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 800f828:	2308      	movs	r3, #8
 800f82a:	18fb      	adds	r3, r7, r3
 800f82c:	22fa      	movs	r2, #250	; 0xfa
 800f82e:	00d2      	lsls	r2, r2, #3
 800f830:	601a      	str	r2, [r3, #0]
            break;
 800f832:	e06e      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 800f834:	2308      	movs	r3, #8
 800f836:	18fb      	adds	r3, r7, r3
 800f838:	4a41      	ldr	r2, [pc, #260]	; (800f940 <RegionEU868GetPhyParam+0x1e8>)
 800f83a:	601a      	str	r2, [r3, #0]
            break;
 800f83c:	e069      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 800f83e:	2308      	movs	r3, #8
 800f840:	18fb      	adds	r3, r7, r3
 800f842:	4a40      	ldr	r2, [pc, #256]	; (800f944 <RegionEU868GetPhyParam+0x1ec>)
 800f844:	601a      	str	r2, [r3, #0]
            break;
 800f846:	e064      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 800f848:	2308      	movs	r3, #8
 800f84a:	18fb      	adds	r3, r7, r3
 800f84c:	2280      	movs	r2, #128	; 0x80
 800f84e:	01d2      	lsls	r2, r2, #7
 800f850:	601a      	str	r2, [r3, #0]
            break;
 800f852:	e05e      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 800f854:	23fa      	movs	r3, #250	; 0xfa
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	4a3b      	ldr	r2, [pc, #236]	; (800f948 <RegionEU868GetPhyParam+0x1f0>)
 800f85a:	0019      	movs	r1, r3
 800f85c:	0010      	movs	r0, r2
 800f85e:	f001 fac1 	bl	8010de4 <randr>
 800f862:	0003      	movs	r3, r0
 800f864:	22fa      	movs	r2, #250	; 0xfa
 800f866:	00d2      	lsls	r2, r2, #3
 800f868:	4694      	mov	ip, r2
 800f86a:	4463      	add	r3, ip
 800f86c:	001a      	movs	r2, r3
 800f86e:	2308      	movs	r3, #8
 800f870:	18fb      	adds	r3, r7, r3
 800f872:	601a      	str	r2, [r3, #0]
            break;
 800f874:	e04d      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 800f876:	2308      	movs	r3, #8
 800f878:	18fb      	adds	r3, r7, r3
 800f87a:	2200      	movs	r2, #0
 800f87c:	601a      	str	r2, [r3, #0]
            break;
 800f87e:	e048      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800f880:	2308      	movs	r3, #8
 800f882:	18fb      	adds	r3, r7, r3
 800f884:	4a31      	ldr	r2, [pc, #196]	; (800f94c <RegionEU868GetPhyParam+0x1f4>)
 800f886:	601a      	str	r2, [r3, #0]
            break;
 800f888:	e043      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 800f88a:	2308      	movs	r3, #8
 800f88c:	18fb      	adds	r3, r7, r3
 800f88e:	2200      	movs	r2, #0
 800f890:	601a      	str	r2, [r3, #0]
            break;
 800f892:	e03e      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800f894:	2308      	movs	r3, #8
 800f896:	18fb      	adds	r3, r7, r3
 800f898:	4a2d      	ldr	r2, [pc, #180]	; (800f950 <RegionEU868GetPhyParam+0x1f8>)
 800f89a:	601a      	str	r2, [r3, #0]
            break;
 800f89c:	e039      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800f89e:	2308      	movs	r3, #8
 800f8a0:	18fb      	adds	r3, r7, r3
 800f8a2:	4a2c      	ldr	r2, [pc, #176]	; (800f954 <RegionEU868GetPhyParam+0x1fc>)
 800f8a4:	601a      	str	r2, [r3, #0]
            break;
 800f8a6:	e034      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800f8a8:	2308      	movs	r3, #8
 800f8aa:	18fb      	adds	r3, r7, r3
 800f8ac:	2210      	movs	r2, #16
 800f8ae:	601a      	str	r2, [r3, #0]
            break;
 800f8b0:	e02f      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 800f8b2:	2308      	movs	r3, #8
 800f8b4:	18fb      	adds	r3, r7, r3
 800f8b6:	4a28      	ldr	r2, [pc, #160]	; (800f958 <RegionEU868GetPhyParam+0x200>)
 800f8b8:	601a      	str	r2, [r3, #0]
            break;
 800f8ba:	e02a      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 800f8bc:	2308      	movs	r3, #8
 800f8be:	18fb      	adds	r3, r7, r3
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	601a      	str	r2, [r3, #0]
            break;
 800f8c4:	e025      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800f8c6:	2308      	movs	r3, #8
 800f8c8:	18fb      	adds	r3, r7, r3
 800f8ca:	2283      	movs	r2, #131	; 0x83
 800f8cc:	05d2      	lsls	r2, r2, #23
 800f8ce:	601a      	str	r2, [r3, #0]
            break;
 800f8d0:	e01f      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800f8d2:	2308      	movs	r3, #8
 800f8d4:	18fb      	adds	r3, r7, r3
 800f8d6:	4a21      	ldr	r2, [pc, #132]	; (800f95c <RegionEU868GetPhyParam+0x204>)
 800f8d8:	601a      	str	r2, [r3, #0]
            break;
 800f8da:	e01a      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800f8dc:	2308      	movs	r3, #8
 800f8de:	18fb      	adds	r3, r7, r3
 800f8e0:	4a1a      	ldr	r2, [pc, #104]	; (800f94c <RegionEU868GetPhyParam+0x1f4>)
 800f8e2:	601a      	str	r2, [r3, #0]
            break;
 800f8e4:	e015      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800f8e6:	2108      	movs	r1, #8
 800f8e8:	187b      	adds	r3, r7, r1
 800f8ea:	2211      	movs	r2, #17
 800f8ec:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800f8ee:	187b      	adds	r3, r7, r1
 800f8f0:	2202      	movs	r2, #2
 800f8f2:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800f8f4:	187b      	adds	r3, r7, r1
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	709a      	strb	r2, [r3, #2]
            break;
 800f8fa:	e00a      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800f8fc:	2308      	movs	r3, #8
 800f8fe:	18fb      	adds	r3, r7, r3
 800f900:	2203      	movs	r2, #3
 800f902:	601a      	str	r2, [r3, #0]
            break;
 800f904:	e005      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800f906:	2308      	movs	r3, #8
 800f908:	18fb      	adds	r3, r7, r3
 800f90a:	2203      	movs	r2, #3
 800f90c:	601a      	str	r2, [r3, #0]
            break;
 800f90e:	e000      	b.n	800f912 <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 800f910:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 800f912:	210c      	movs	r1, #12
 800f914:	187b      	adds	r3, r7, r1
 800f916:	2208      	movs	r2, #8
 800f918:	18ba      	adds	r2, r7, r2
 800f91a:	6812      	ldr	r2, [r2, #0]
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	187b      	adds	r3, r7, r1
 800f920:	2200      	movs	r2, #0
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	0013      	movs	r3, r2
}
 800f926:	0018      	movs	r0, r3
 800f928:	46bd      	mov	sp, r7
 800f92a:	b004      	add	sp, #16
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	46c0      	nop			; (mov r8, r8)
 800f930:	0801bbc0 	.word	0x0801bbc0
 800f934:	0801bbb0 	.word	0x0801bbb0
 800f938:	0801bbb8 	.word	0x0801bbb8
 800f93c:	00000bb8 	.word	0x00000bb8
 800f940:	00001388 	.word	0x00001388
 800f944:	00001770 	.word	0x00001770
 800f948:	fffffc18 	.word	0xfffffc18
 800f94c:	33d3e608 	.word	0x33d3e608
 800f950:	20000b6c 	.word	0x20000b6c
 800f954:	20000b6e 	.word	0x20000b6e
 800f958:	20000a5c 	.word	0x20000a5c
 800f95c:	4009999a 	.word	0x4009999a

0800f960 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	7858      	ldrb	r0, [r3, #1]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	0019      	movs	r1, r3
 800f972:	4a0a      	ldr	r2, [pc, #40]	; (800f99c <RegionEU868SetBandTxDone+0x3c>)
 800f974:	000b      	movs	r3, r1
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	185b      	adds	r3, r3, r1
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	18d3      	adds	r3, r2, r3
 800f97e:	3309      	adds	r3, #9
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	330c      	adds	r3, #12
 800f984:	011a      	lsls	r2, r3, #4
 800f986:	4b05      	ldr	r3, [pc, #20]	; (800f99c <RegionEU868SetBandTxDone+0x3c>)
 800f988:	18d1      	adds	r1, r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	001a      	movs	r2, r3
 800f990:	f7ff f978 	bl	800ec84 <RegionCommonSetBandTxDone>
}
 800f994:	46c0      	nop			; (mov r8, r8)
 800f996:	46bd      	mov	sp, r7
 800f998:	b002      	add	sp, #8
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	20000a5c 	.word	0x20000a5c

0800f9a0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800f9a0:	b590      	push	{r4, r7, lr}
 800f9a2:	b097      	sub	sp, #92	; 0x5c
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 800f9a8:	2108      	movs	r1, #8
 800f9aa:	000c      	movs	r4, r1
 800f9ac:	187b      	adds	r3, r7, r1
 800f9ae:	0018      	movs	r0, r3
 800f9b0:	2350      	movs	r3, #80	; 0x50
 800f9b2:	001a      	movs	r2, r3
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	f00a faf3 	bl	8019fa0 <memset>
 800f9ba:	0021      	movs	r1, r4
 800f9bc:	187b      	adds	r3, r7, r1
 800f9be:	2264      	movs	r2, #100	; 0x64
 800f9c0:	801a      	strh	r2, [r3, #0]
 800f9c2:	187b      	adds	r3, r7, r1
 800f9c4:	2264      	movs	r2, #100	; 0x64
 800f9c6:	821a      	strh	r2, [r3, #16]
 800f9c8:	187b      	adds	r3, r7, r1
 800f9ca:	22fa      	movs	r2, #250	; 0xfa
 800f9cc:	0092      	lsls	r2, r2, #2
 800f9ce:	841a      	strh	r2, [r3, #32]
 800f9d0:	187b      	adds	r3, r7, r1
 800f9d2:	220a      	movs	r2, #10
 800f9d4:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9d6:	187b      	adds	r3, r7, r1
 800f9d8:	2240      	movs	r2, #64	; 0x40
 800f9da:	2164      	movs	r1, #100	; 0x64
 800f9dc:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	791b      	ldrb	r3, [r3, #4]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d032      	beq.n	800fa4c <RegionEU868InitDefaults+0xac>
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d023      	beq.n	800fa32 <RegionEU868InitDefaults+0x92>
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d000      	beq.n	800f9f0 <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800f9ee:	e03d      	b.n	800fa6c <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	18f9      	adds	r1, r7, r3
 800f9f4:	4b1f      	ldr	r3, [pc, #124]	; (800fa74 <RegionEU868InitDefaults+0xd4>)
 800f9f6:	2250      	movs	r2, #80	; 0x50
 800f9f8:	0018      	movs	r0, r3
 800f9fa:	f001 fa09 	bl	8010e10 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800f9fe:	4b1e      	ldr	r3, [pc, #120]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa00:	4a1e      	ldr	r2, [pc, #120]	; (800fa7c <RegionEU868InitDefaults+0xdc>)
 800fa02:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa04:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800fa06:	4b1c      	ldr	r3, [pc, #112]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa08:	4a1d      	ldr	r2, [pc, #116]	; (800fa80 <RegionEU868InitDefaults+0xe0>)
 800fa0a:	330c      	adds	r3, #12
 800fa0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa0e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800fa10:	4b19      	ldr	r3, [pc, #100]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa12:	4a1c      	ldr	r2, [pc, #112]	; (800fa84 <RegionEU868InitDefaults+0xe4>)
 800fa14:	3318      	adds	r3, #24
 800fa16:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa18:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800fa1a:	4a17      	ldr	r2, [pc, #92]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa1c:	2389      	movs	r3, #137	; 0x89
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	2107      	movs	r1, #7
 800fa22:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800fa24:	4918      	ldr	r1, [pc, #96]	; (800fa88 <RegionEU868InitDefaults+0xe8>)
 800fa26:	4b19      	ldr	r3, [pc, #100]	; (800fa8c <RegionEU868InitDefaults+0xec>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	0018      	movs	r0, r3
 800fa2c:	f7ff f8fb 	bl	800ec26 <RegionCommonChanMaskCopy>
            break;
 800fa30:	e01c      	b.n	800fa6c <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d017      	beq.n	800fa6a <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6819      	ldr	r1, [r3, #0]
 800fa3e:	238a      	movs	r3, #138	; 0x8a
 800fa40:	005a      	lsls	r2, r3, #1
 800fa42:	4b0d      	ldr	r3, [pc, #52]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa44:	0018      	movs	r0, r3
 800fa46:	f001 f9e3 	bl	8010e10 <memcpy1>
            break;
 800fa4a:	e00e      	b.n	800fa6a <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800fa4c:	4a0a      	ldr	r2, [pc, #40]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa4e:	2388      	movs	r3, #136	; 0x88
 800fa50:	005b      	lsls	r3, r3, #1
 800fa52:	5ad2      	ldrh	r2, [r2, r3]
 800fa54:	4908      	ldr	r1, [pc, #32]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa56:	2389      	movs	r3, #137	; 0x89
 800fa58:	005b      	lsls	r3, r3, #1
 800fa5a:	5acb      	ldrh	r3, [r1, r3]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	b299      	uxth	r1, r3
 800fa60:	4a05      	ldr	r2, [pc, #20]	; (800fa78 <RegionEU868InitDefaults+0xd8>)
 800fa62:	2388      	movs	r3, #136	; 0x88
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	52d1      	strh	r1, [r2, r3]
            break;
 800fa68:	e000      	b.n	800fa6c <RegionEU868InitDefaults+0xcc>
            break;
 800fa6a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800fa6c:	46c0      	nop			; (mov r8, r8)
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	b017      	add	sp, #92	; 0x5c
 800fa72:	bd90      	pop	{r4, r7, pc}
 800fa74:	20000b1c 	.word	0x20000b1c
 800fa78:	20000a5c 	.word	0x20000a5c
 800fa7c:	0801ab8c 	.word	0x0801ab8c
 800fa80:	0801ab98 	.word	0x0801ab98
 800fa84:	0801aba4 	.word	0x0801aba4
 800fa88:	20000b6e 	.word	0x20000b6e
 800fa8c:	20000b6c 	.word	0x20000b6c

0800fa90 <RegionEU868ApplyCFList>:
            return false;
    }
}

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800fa90:	b590      	push	{r4, r7, lr}
 800fa92:	b08b      	sub	sp, #44	; 0x2c
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800fa98:	2318      	movs	r3, #24
 800fa9a:	18fb      	adds	r3, r7, r3
 800fa9c:	2250      	movs	r2, #80	; 0x50
 800fa9e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	791b      	ldrb	r3, [r3, #4]
 800faa4:	2b10      	cmp	r3, #16
 800faa6:	d000      	beq.n	800faaa <RegionEU868ApplyCFList+0x1a>
 800faa8:	e07d      	b.n	800fba6 <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	330f      	adds	r3, #15
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d000      	beq.n	800fab8 <RegionEU868ApplyCFList+0x28>
 800fab6:	e078      	b.n	800fbaa <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fab8:	2327      	movs	r3, #39	; 0x27
 800faba:	18fb      	adds	r3, r7, r3
 800fabc:	2200      	movs	r2, #0
 800fabe:	701a      	strb	r2, [r3, #0]
 800fac0:	2326      	movs	r3, #38	; 0x26
 800fac2:	18fb      	adds	r3, r7, r3
 800fac4:	2203      	movs	r2, #3
 800fac6:	701a      	strb	r2, [r3, #0]
 800fac8:	e067      	b.n	800fb9a <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800faca:	2326      	movs	r3, #38	; 0x26
 800facc:	18fb      	adds	r3, r7, r3
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	2b07      	cmp	r3, #7
 800fad2:	d82e      	bhi.n	800fb32 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	2427      	movs	r4, #39	; 0x27
 800fada:	193b      	adds	r3, r7, r4
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	18d3      	adds	r3, r2, r3
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	001a      	movs	r2, r3
 800fae4:	2018      	movs	r0, #24
 800fae6:	183b      	adds	r3, r7, r0
 800fae8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800faea:	183b      	adds	r3, r7, r0
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6819      	ldr	r1, [r3, #0]
 800faf2:	193b      	adds	r3, r7, r4
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	3301      	adds	r3, #1
 800faf8:	18cb      	adds	r3, r1, r3
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	021b      	lsls	r3, r3, #8
 800fafe:	431a      	orrs	r2, r3
 800fb00:	183b      	adds	r3, r7, r0
 800fb02:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800fb04:	183b      	adds	r3, r7, r0
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6819      	ldr	r1, [r3, #0]
 800fb0c:	193b      	adds	r3, r7, r4
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	3302      	adds	r3, #2
 800fb12:	18cb      	adds	r3, r1, r3
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	041b      	lsls	r3, r3, #16
 800fb18:	431a      	orrs	r2, r3
 800fb1a:	183b      	adds	r3, r7, r0
 800fb1c:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 800fb1e:	183b      	adds	r3, r7, r0
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2264      	movs	r2, #100	; 0x64
 800fb24:	435a      	muls	r2, r3
 800fb26:	183b      	adds	r3, r7, r0
 800fb28:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 800fb2a:	183b      	adds	r3, r7, r0
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	605a      	str	r2, [r3, #4]
 800fb30:	e009      	b.n	800fb46 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 800fb32:	2118      	movs	r1, #24
 800fb34:	187b      	adds	r3, r7, r1
 800fb36:	2200      	movs	r2, #0
 800fb38:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 800fb3a:	187b      	adds	r3, r7, r1
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 800fb40:	187b      	adds	r3, r7, r1
 800fb42:	2200      	movs	r2, #0
 800fb44:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 800fb46:	2318      	movs	r3, #24
 800fb48:	18fb      	adds	r3, r7, r3
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00e      	beq.n	800fb6e <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 800fb50:	2110      	movs	r1, #16
 800fb52:	187b      	adds	r3, r7, r1
 800fb54:	2218      	movs	r2, #24
 800fb56:	18ba      	adds	r2, r7, r2
 800fb58:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 800fb5a:	187b      	adds	r3, r7, r1
 800fb5c:	2226      	movs	r2, #38	; 0x26
 800fb5e:	18ba      	adds	r2, r7, r2
 800fb60:	7812      	ldrb	r2, [r2, #0]
 800fb62:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 800fb64:	187b      	adds	r3, r7, r1
 800fb66:	0018      	movs	r0, r3
 800fb68:	f000 fd8c 	bl	8010684 <RegionEU868ChannelAdd>
 800fb6c:	e009      	b.n	800fb82 <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 800fb6e:	210c      	movs	r1, #12
 800fb70:	187b      	adds	r3, r7, r1
 800fb72:	2226      	movs	r2, #38	; 0x26
 800fb74:	18ba      	adds	r2, r7, r2
 800fb76:	7812      	ldrb	r2, [r2, #0]
 800fb78:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 800fb7a:	187b      	adds	r3, r7, r1
 800fb7c:	0018      	movs	r0, r3
 800fb7e:	f000 fe45 	bl	801080c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fb82:	2227      	movs	r2, #39	; 0x27
 800fb84:	18bb      	adds	r3, r7, r2
 800fb86:	18ba      	adds	r2, r7, r2
 800fb88:	7812      	ldrb	r2, [r2, #0]
 800fb8a:	3203      	adds	r2, #3
 800fb8c:	701a      	strb	r2, [r3, #0]
 800fb8e:	2126      	movs	r1, #38	; 0x26
 800fb90:	187b      	adds	r3, r7, r1
 800fb92:	781a      	ldrb	r2, [r3, #0]
 800fb94:	187b      	adds	r3, r7, r1
 800fb96:	3201      	adds	r2, #1
 800fb98:	701a      	strb	r2, [r3, #0]
 800fb9a:	2326      	movs	r3, #38	; 0x26
 800fb9c:	18fb      	adds	r3, r7, r3
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b0f      	cmp	r3, #15
 800fba2:	d992      	bls.n	800faca <RegionEU868ApplyCFList+0x3a>
 800fba4:	e002      	b.n	800fbac <RegionEU868ApplyCFList+0x11c>
        return;
 800fba6:	46c0      	nop			; (mov r8, r8)
 800fba8:	e000      	b.n	800fbac <RegionEU868ApplyCFList+0x11c>
        return;
 800fbaa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800fbac:	46bd      	mov	sp, r7
 800fbae:	b00b      	add	sp, #44	; 0x2c
 800fbb0:	bd90      	pop	{r4, r7, pc}
	...

0800fbb4 <RegionEU868ComputeRxWindowParameters>:
    }
    return true;
}

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbb6:	b08b      	sub	sp, #44	; 0x2c
 800fbb8:	af04      	add	r7, sp, #16
 800fbba:	60ba      	str	r2, [r7, #8]
 800fbbc:	607b      	str	r3, [r7, #4]
 800fbbe:	250f      	movs	r5, #15
 800fbc0:	197b      	adds	r3, r7, r5
 800fbc2:	1c02      	adds	r2, r0, #0
 800fbc4:	701a      	strb	r2, [r3, #0]
 800fbc6:	230e      	movs	r3, #14
 800fbc8:	18fb      	adds	r3, r7, r3
 800fbca:	1c0a      	adds	r2, r1, #0
 800fbcc:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	2400      	movs	r4, #0
 800fbd2:	613b      	str	r3, [r7, #16]
 800fbd4:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800fbd6:	197b      	adds	r3, r7, r5
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	b25a      	sxtb	r2, r3
 800fbdc:	2a07      	cmp	r2, #7
 800fbde:	dd00      	ble.n	800fbe2 <RegionEU868ComputeRxWindowParameters+0x2e>
 800fbe0:	2307      	movs	r3, #7
 800fbe2:	b25a      	sxtb	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	785b      	ldrb	r3, [r3, #1]
 800fbec:	b25b      	sxtb	r3, r3
 800fbee:	0018      	movs	r0, r3
 800fbf0:	f7ff fc0e 	bl	800f410 <GetBandwidth>
 800fbf4:	0003      	movs	r3, r0
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	785b      	ldrb	r3, [r3, #1]
 800fc00:	b25b      	sxtb	r3, r3
 800fc02:	2b07      	cmp	r3, #7
 800fc04:	d10d      	bne.n	800fc22 <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	785b      	ldrb	r3, [r3, #1]
 800fc0a:	b25b      	sxtb	r3, r3
 800fc0c:	001a      	movs	r2, r3
 800fc0e:	4b1b      	ldr	r3, [pc, #108]	; (800fc7c <RegionEU868ComputeRxWindowParameters+0xc8>)
 800fc10:	5c9b      	ldrb	r3, [r3, r2]
 800fc12:	0018      	movs	r0, r3
 800fc14:	f7ff fa6e 	bl	800f0f4 <RegionCommonComputeSymbolTimeFsk>
 800fc18:	0003      	movs	r3, r0
 800fc1a:	000c      	movs	r4, r1
 800fc1c:	613b      	str	r3, [r7, #16]
 800fc1e:	617c      	str	r4, [r7, #20]
 800fc20:	e013      	b.n	800fc4a <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	785b      	ldrb	r3, [r3, #1]
 800fc26:	b25b      	sxtb	r3, r3
 800fc28:	001a      	movs	r2, r3
 800fc2a:	4b14      	ldr	r3, [pc, #80]	; (800fc7c <RegionEU868ComputeRxWindowParameters+0xc8>)
 800fc2c:	5c98      	ldrb	r0, [r3, r2]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	785b      	ldrb	r3, [r3, #1]
 800fc32:	b25b      	sxtb	r3, r3
 800fc34:	001a      	movs	r2, r3
 800fc36:	4b12      	ldr	r3, [pc, #72]	; (800fc80 <RegionEU868ComputeRxWindowParameters+0xcc>)
 800fc38:	0092      	lsls	r2, r2, #2
 800fc3a:	58d3      	ldr	r3, [r2, r3]
 800fc3c:	0019      	movs	r1, r3
 800fc3e:	f7ff fa2d 	bl	800f09c <RegionCommonComputeSymbolTimeLoRa>
 800fc42:	0003      	movs	r3, r0
 800fc44:	000c      	movs	r4, r1
 800fc46:	613b      	str	r3, [r7, #16]
 800fc48:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fc4a:	4b0e      	ldr	r3, [pc, #56]	; (800fc84 <RegionEU868ComputeRxWindowParameters+0xd0>)
 800fc4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc4e:	4798      	blx	r3
 800fc50:	0006      	movs	r6, r0
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	3308      	adds	r3, #8
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	320c      	adds	r2, #12
 800fc5a:	68bd      	ldr	r5, [r7, #8]
 800fc5c:	210e      	movs	r1, #14
 800fc5e:	1879      	adds	r1, r7, r1
 800fc60:	780c      	ldrb	r4, [r1, #0]
 800fc62:	6938      	ldr	r0, [r7, #16]
 800fc64:	6979      	ldr	r1, [r7, #20]
 800fc66:	9202      	str	r2, [sp, #8]
 800fc68:	9301      	str	r3, [sp, #4]
 800fc6a:	9600      	str	r6, [sp, #0]
 800fc6c:	002b      	movs	r3, r5
 800fc6e:	0022      	movs	r2, r4
 800fc70:	f7ff fa5c 	bl	800f12c <RegionCommonComputeRxWindowParameters>
}
 800fc74:	46c0      	nop			; (mov r8, r8)
 800fc76:	46bd      	mov	sp, r7
 800fc78:	b007      	add	sp, #28
 800fc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc7c:	0801bb88 	.word	0x0801bb88
 800fc80:	0801bb90 	.word	0x0801bb90
 800fc84:	0801bc94 	.word	0x0801bc94

0800fc88 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc8a:	b091      	sub	sp, #68	; 0x44
 800fc8c:	af0a      	add	r7, sp, #40	; 0x28
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800fc92:	230f      	movs	r3, #15
 800fc94:	18fb      	adds	r3, r7, r3
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	7852      	ldrb	r2, [r2, #1]
 800fc9a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 800fc9c:	2316      	movs	r3, #22
 800fc9e:	18fb      	adds	r3, r7, r3
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 800fca4:	230e      	movs	r3, #14
 800fca6:	18fb      	adds	r3, r7, r3
 800fca8:	2200      	movs	r2, #0
 800fcaa:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800fcb2:	4b64      	ldr	r3, [pc, #400]	; (800fe44 <RegionEU868RxConfig+0x1bc>)
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	4798      	blx	r3
 800fcb8:	1e03      	subs	r3, r0, #0
 800fcba:	d001      	beq.n	800fcc0 <RegionEU868RxConfig+0x38>
    {
        return false;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	e0bc      	b.n	800fe3a <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7cdb      	ldrb	r3, [r3, #19]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d122      	bne.n	800fd0e <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	0019      	movs	r1, r3
 800fcce:	4a5e      	ldr	r2, [pc, #376]	; (800fe48 <RegionEU868RxConfig+0x1c0>)
 800fcd0:	000b      	movs	r3, r1
 800fcd2:	005b      	lsls	r3, r3, #1
 800fcd4:	185b      	adds	r3, r3, r1
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	589b      	ldr	r3, [r3, r2]
 800fcda:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	0019      	movs	r1, r3
 800fce2:	4a59      	ldr	r2, [pc, #356]	; (800fe48 <RegionEU868RxConfig+0x1c0>)
 800fce4:	000b      	movs	r3, r1
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	185b      	adds	r3, r3, r1
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	18d3      	adds	r3, r2, r3
 800fcee:	3304      	adds	r3, #4
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00b      	beq.n	800fd0e <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	0019      	movs	r1, r3
 800fcfc:	4a52      	ldr	r2, [pc, #328]	; (800fe48 <RegionEU868RxConfig+0x1c0>)
 800fcfe:	000b      	movs	r3, r1
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	185b      	adds	r3, r3, r1
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	18d3      	adds	r3, r2, r3
 800fd08:	3304      	adds	r3, #4
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800fd0e:	240f      	movs	r4, #15
 800fd10:	193b      	adds	r3, r7, r4
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	b25b      	sxtb	r3, r3
 800fd16:	4a4d      	ldr	r2, [pc, #308]	; (800fe4c <RegionEU868RxConfig+0x1c4>)
 800fd18:	5cd2      	ldrb	r2, [r2, r3]
 800fd1a:	230e      	movs	r3, #14
 800fd1c:	18fb      	adds	r3, r7, r3
 800fd1e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 800fd20:	4b48      	ldr	r3, [pc, #288]	; (800fe44 <RegionEU868RxConfig+0x1bc>)
 800fd22:	695b      	ldr	r3, [r3, #20]
 800fd24:	693a      	ldr	r2, [r7, #16]
 800fd26:	0010      	movs	r0, r2
 800fd28:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800fd2a:	193b      	adds	r3, r7, r4
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	b25b      	sxtb	r3, r3
 800fd30:	2b07      	cmp	r3, #7
 800fd32:	d12f      	bne.n	800fd94 <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 800fd34:	2117      	movs	r1, #23
 800fd36:	187b      	adds	r3, r7, r1
 800fd38:	2200      	movs	r2, #0
 800fd3a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800fd3c:	4b41      	ldr	r3, [pc, #260]	; (800fe44 <RegionEU868RxConfig+0x1bc>)
 800fd3e:	6a1c      	ldr	r4, [r3, #32]
 800fd40:	230e      	movs	r3, #14
 800fd42:	18fb      	adds	r3, r7, r3
 800fd44:	2200      	movs	r2, #0
 800fd46:	569a      	ldrsb	r2, [r3, r2]
 800fd48:	0013      	movs	r3, r2
 800fd4a:	015b      	lsls	r3, r3, #5
 800fd4c:	1a9b      	subs	r3, r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	189b      	adds	r3, r3, r2
 800fd52:	00db      	lsls	r3, r3, #3
 800fd54:	001e      	movs	r6, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	689b      	ldr	r3, [r3, #8]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	7c92      	ldrb	r2, [r2, #18]
 800fd60:	4d3b      	ldr	r5, [pc, #236]	; (800fe50 <RegionEU868RxConfig+0x1c8>)
 800fd62:	1879      	adds	r1, r7, r1
 800fd64:	7808      	ldrb	r0, [r1, #0]
 800fd66:	9209      	str	r2, [sp, #36]	; 0x24
 800fd68:	2200      	movs	r2, #0
 800fd6a:	9208      	str	r2, [sp, #32]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	9207      	str	r2, [sp, #28]
 800fd70:	2200      	movs	r2, #0
 800fd72:	9206      	str	r2, [sp, #24]
 800fd74:	2201      	movs	r2, #1
 800fd76:	9205      	str	r2, [sp, #20]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	9204      	str	r2, [sp, #16]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	9203      	str	r2, [sp, #12]
 800fd80:	9302      	str	r3, [sp, #8]
 800fd82:	2305      	movs	r3, #5
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	4b33      	ldr	r3, [pc, #204]	; (800fe54 <RegionEU868RxConfig+0x1cc>)
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	0032      	movs	r2, r6
 800fd8e:	0029      	movs	r1, r5
 800fd90:	47a0      	blx	r4
 800fd92:	e029      	b.n	800fde8 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 800fd94:	2117      	movs	r1, #23
 800fd96:	187b      	adds	r3, r7, r1
 800fd98:	2201      	movs	r2, #1
 800fd9a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800fd9c:	4b29      	ldr	r3, [pc, #164]	; (800fe44 <RegionEU868RxConfig+0x1bc>)
 800fd9e:	6a1c      	ldr	r4, [r3, #32]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	789b      	ldrb	r3, [r3, #2]
 800fda4:	001e      	movs	r6, r3
 800fda6:	230e      	movs	r3, #14
 800fda8:	18fb      	adds	r3, r7, r3
 800fdaa:	2500      	movs	r5, #0
 800fdac:	575d      	ldrsb	r5, [r3, r5]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	7c92      	ldrb	r2, [r2, #18]
 800fdb8:	1879      	adds	r1, r7, r1
 800fdba:	7808      	ldrb	r0, [r1, #0]
 800fdbc:	9209      	str	r2, [sp, #36]	; 0x24
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	9208      	str	r2, [sp, #32]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	9207      	str	r2, [sp, #28]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	9206      	str	r2, [sp, #24]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	9205      	str	r2, [sp, #20]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	9204      	str	r2, [sp, #16]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	9203      	str	r2, [sp, #12]
 800fdd6:	9302      	str	r3, [sp, #8]
 800fdd8:	2308      	movs	r3, #8
 800fdda:	9301      	str	r3, [sp, #4]
 800fddc:	2300      	movs	r3, #0
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	2301      	movs	r3, #1
 800fde2:	002a      	movs	r2, r5
 800fde4:	0031      	movs	r1, r6
 800fde6:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	7c5b      	ldrb	r3, [r3, #17]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d009      	beq.n	800fe04 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800fdf0:	230f      	movs	r3, #15
 800fdf2:	18fb      	adds	r3, r7, r3
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	569a      	ldrsb	r2, [r3, r2]
 800fdf8:	2316      	movs	r3, #22
 800fdfa:	18fb      	adds	r3, r7, r3
 800fdfc:	4916      	ldr	r1, [pc, #88]	; (800fe58 <RegionEU868RxConfig+0x1d0>)
 800fdfe:	5c8a      	ldrb	r2, [r1, r2]
 800fe00:	701a      	strb	r2, [r3, #0]
 800fe02:	e008      	b.n	800fe16 <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800fe04:	230f      	movs	r3, #15
 800fe06:	18fb      	adds	r3, r7, r3
 800fe08:	2200      	movs	r2, #0
 800fe0a:	569a      	ldrsb	r2, [r3, r2]
 800fe0c:	2316      	movs	r3, #22
 800fe0e:	18fb      	adds	r3, r7, r3
 800fe10:	4912      	ldr	r1, [pc, #72]	; (800fe5c <RegionEU868RxConfig+0x1d4>)
 800fe12:	5c8a      	ldrb	r2, [r1, r2]
 800fe14:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800fe16:	4b0b      	ldr	r3, [pc, #44]	; (800fe44 <RegionEU868RxConfig+0x1bc>)
 800fe18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe1a:	2216      	movs	r2, #22
 800fe1c:	18ba      	adds	r2, r7, r2
 800fe1e:	7812      	ldrb	r2, [r2, #0]
 800fe20:	320d      	adds	r2, #13
 800fe22:	b2d1      	uxtb	r1, r2
 800fe24:	2217      	movs	r2, #23
 800fe26:	18ba      	adds	r2, r7, r2
 800fe28:	7812      	ldrb	r2, [r2, #0]
 800fe2a:	0010      	movs	r0, r2
 800fe2c:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	220f      	movs	r2, #15
 800fe32:	18ba      	adds	r2, r7, r2
 800fe34:	7812      	ldrb	r2, [r2, #0]
 800fe36:	701a      	strb	r2, [r3, #0]
    return true;
 800fe38:	2301      	movs	r3, #1
}
 800fe3a:	0018      	movs	r0, r3
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	b007      	add	sp, #28
 800fe40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe42:	46c0      	nop			; (mov r8, r8)
 800fe44:	0801bc94 	.word	0x0801bc94
 800fe48:	20000a5c 	.word	0x20000a5c
 800fe4c:	0801bb88 	.word	0x0801bb88
 800fe50:	0000c350 	.word	0x0000c350
 800fe54:	00014585 	.word	0x00014585
 800fe58:	0801bbb8 	.word	0x0801bbb8
 800fe5c:	0801bbb0 	.word	0x0801bbb0

0800fe60 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800fe60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe62:	b093      	sub	sp, #76	; 0x4c
 800fe64:	af0a      	add	r7, sp, #40	; 0x28
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	785b      	ldrb	r3, [r3, #1]
 800fe70:	b25b      	sxtb	r3, r3
 800fe72:	001a      	movs	r2, r3
 800fe74:	4b60      	ldr	r3, [pc, #384]	; (800fff8 <RegionEU868TxConfig+0x198>)
 800fe76:	5c9a      	ldrb	r2, [r3, r2]
 800fe78:	231e      	movs	r3, #30
 800fe7a:	18fb      	adds	r3, r7, r3
 800fe7c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2002      	movs	r0, #2
 800fe82:	5618      	ldrsb	r0, [r3, r0]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	0019      	movs	r1, r3
 800fe8a:	4a5c      	ldr	r2, [pc, #368]	; (800fffc <RegionEU868TxConfig+0x19c>)
 800fe8c:	000b      	movs	r3, r1
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	185b      	adds	r3, r3, r1
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	18d3      	adds	r3, r2, r3
 800fe96:	3309      	adds	r3, #9
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	4a58      	ldr	r2, [pc, #352]	; (800fffc <RegionEU868TxConfig+0x19c>)
 800fe9c:	330c      	adds	r3, #12
 800fe9e:	011b      	lsls	r3, r3, #4
 800fea0:	18d3      	adds	r3, r2, r3
 800fea2:	3302      	adds	r3, #2
 800fea4:	2100      	movs	r1, #0
 800fea6:	5659      	ldrsb	r1, [r3, r1]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2201      	movs	r2, #1
 800feac:	569a      	ldrsb	r2, [r3, r2]
 800feae:	251d      	movs	r5, #29
 800feb0:	197c      	adds	r4, r7, r5
 800feb2:	4b53      	ldr	r3, [pc, #332]	; (8010000 <RegionEU868TxConfig+0x1a0>)
 800feb4:	f7ff faca 	bl	800f44c <LimitTxPower>
 800feb8:	0003      	movs	r3, r0
 800feba:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	785b      	ldrb	r3, [r3, #1]
 800fec0:	b25b      	sxtb	r3, r3
 800fec2:	0018      	movs	r0, r3
 800fec4:	f7ff faa4 	bl	800f410 <GetBandwidth>
 800fec8:	0003      	movs	r3, r0
 800feca:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 800fecc:	2017      	movs	r0, #23
 800fece:	183b      	adds	r3, r7, r0
 800fed0:	2200      	movs	r2, #0
 800fed2:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6859      	ldr	r1, [r3, #4]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	689a      	ldr	r2, [r3, #8]
 800fedc:	183c      	adds	r4, r7, r0
 800fede:	197b      	adds	r3, r7, r5
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	b25b      	sxtb	r3, r3
 800fee4:	0018      	movs	r0, r3
 800fee6:	f7ff f9a5 	bl	800f234 <RegionCommonComputeTxPower>
 800feea:	0003      	movs	r3, r0
 800feec:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800feee:	4b45      	ldr	r3, [pc, #276]	; (8010004 <RegionEU868TxConfig+0x1a4>)
 800fef0:	695a      	ldr	r2, [r3, #20]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	0018      	movs	r0, r3
 800fef8:	4940      	ldr	r1, [pc, #256]	; (800fffc <RegionEU868TxConfig+0x19c>)
 800fefa:	0003      	movs	r3, r0
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	181b      	adds	r3, r3, r0
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	585b      	ldr	r3, [r3, r1]
 800ff04:	0018      	movs	r0, r3
 800ff06:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	785b      	ldrb	r3, [r3, #1]
 800ff0c:	b25b      	sxtb	r3, r3
 800ff0e:	2b07      	cmp	r3, #7
 800ff10:	d12d      	bne.n	800ff6e <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800ff12:	201f      	movs	r0, #31
 800ff14:	183b      	adds	r3, r7, r0
 800ff16:	2200      	movs	r2, #0
 800ff18:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 800ff1a:	4b3a      	ldr	r3, [pc, #232]	; (8010004 <RegionEU868TxConfig+0x1a4>)
 800ff1c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff1e:	231e      	movs	r3, #30
 800ff20:	18fb      	adds	r3, r7, r3
 800ff22:	2200      	movs	r2, #0
 800ff24:	569a      	ldrsb	r2, [r3, r2]
 800ff26:	0013      	movs	r3, r2
 800ff28:	015b      	lsls	r3, r3, #5
 800ff2a:	1a9b      	subs	r3, r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	189b      	adds	r3, r3, r2
 800ff30:	00db      	lsls	r3, r3, #3
 800ff32:	001d      	movs	r5, r3
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	4e34      	ldr	r6, [pc, #208]	; (8010008 <RegionEU868TxConfig+0x1a8>)
 800ff38:	2317      	movs	r3, #23
 800ff3a:	18fb      	adds	r3, r7, r3
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	5659      	ldrsb	r1, [r3, r1]
 800ff40:	183b      	adds	r3, r7, r0
 800ff42:	7818      	ldrb	r0, [r3, #0]
 800ff44:	4b31      	ldr	r3, [pc, #196]	; (801000c <RegionEU868TxConfig+0x1ac>)
 800ff46:	9308      	str	r3, [sp, #32]
 800ff48:	2300      	movs	r3, #0
 800ff4a:	9307      	str	r3, [sp, #28]
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	9306      	str	r3, [sp, #24]
 800ff50:	2300      	movs	r3, #0
 800ff52:	9305      	str	r3, [sp, #20]
 800ff54:	2301      	movs	r3, #1
 800ff56:	9304      	str	r3, [sp, #16]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	9303      	str	r3, [sp, #12]
 800ff5c:	2305      	movs	r3, #5
 800ff5e:	9302      	str	r3, [sp, #8]
 800ff60:	2300      	movs	r3, #0
 800ff62:	9301      	str	r3, [sp, #4]
 800ff64:	9500      	str	r5, [sp, #0]
 800ff66:	0013      	movs	r3, r2
 800ff68:	0032      	movs	r2, r6
 800ff6a:	47a0      	blx	r4
 800ff6c:	e024      	b.n	800ffb8 <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 800ff6e:	201f      	movs	r0, #31
 800ff70:	183b      	adds	r3, r7, r0
 800ff72:	2201      	movs	r2, #1
 800ff74:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 800ff76:	4b23      	ldr	r3, [pc, #140]	; (8010004 <RegionEU868TxConfig+0x1a4>)
 800ff78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff7a:	231e      	movs	r3, #30
 800ff7c:	18fb      	adds	r3, r7, r3
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	b25b      	sxtb	r3, r3
 800ff82:	69bd      	ldr	r5, [r7, #24]
 800ff84:	2217      	movs	r2, #23
 800ff86:	18ba      	adds	r2, r7, r2
 800ff88:	2100      	movs	r1, #0
 800ff8a:	5651      	ldrsb	r1, [r2, r1]
 800ff8c:	183a      	adds	r2, r7, r0
 800ff8e:	7810      	ldrb	r0, [r2, #0]
 800ff90:	4a1e      	ldr	r2, [pc, #120]	; (801000c <RegionEU868TxConfig+0x1ac>)
 800ff92:	9208      	str	r2, [sp, #32]
 800ff94:	2200      	movs	r2, #0
 800ff96:	9207      	str	r2, [sp, #28]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	9206      	str	r2, [sp, #24]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	9205      	str	r2, [sp, #20]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	9204      	str	r2, [sp, #16]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	9203      	str	r2, [sp, #12]
 800ffa8:	2208      	movs	r2, #8
 800ffaa:	9202      	str	r2, [sp, #8]
 800ffac:	2201      	movs	r2, #1
 800ffae:	9201      	str	r2, [sp, #4]
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	002b      	movs	r3, r5
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ffb8:	4b12      	ldr	r3, [pc, #72]	; (8010004 <RegionEU868TxConfig+0x1a4>)
 800ffba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	8992      	ldrh	r2, [r2, #12]
 800ffc0:	b2d1      	uxtb	r1, r2
 800ffc2:	241f      	movs	r4, #31
 800ffc4:	193a      	adds	r2, r7, r4
 800ffc6:	7812      	ldrb	r2, [r2, #0]
 800ffc8:	0010      	movs	r0, r2
 800ffca:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800ffcc:	4b0d      	ldr	r3, [pc, #52]	; (8010004 <RegionEU868TxConfig+0x1a4>)
 800ffce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	8992      	ldrh	r2, [r2, #12]
 800ffd4:	b2d1      	uxtb	r1, r2
 800ffd6:	193a      	adds	r2, r7, r4
 800ffd8:	7812      	ldrb	r2, [r2, #0]
 800ffda:	0010      	movs	r0, r2
 800ffdc:	4798      	blx	r3
 800ffde:	0002      	movs	r2, r0
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	221d      	movs	r2, #29
 800ffe8:	18ba      	adds	r2, r7, r2
 800ffea:	7812      	ldrb	r2, [r2, #0]
 800ffec:	701a      	strb	r2, [r3, #0]
    return true;
 800ffee:	2301      	movs	r3, #1
}
 800fff0:	0018      	movs	r0, r3
 800fff2:	46bd      	mov	sp, r7
 800fff4:	b009      	add	sp, #36	; 0x24
 800fff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fff8:	0801bb88 	.word	0x0801bb88
 800fffc:	20000a5c 	.word	0x20000a5c
 8010000:	20000b6c 	.word	0x20000b6c
 8010004:	0801bc94 	.word	0x0801bc94
 8010008:	000061a8 	.word	0x000061a8
 801000c:	00000bb8 	.word	0x00000bb8

08010010 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010012:	b093      	sub	sp, #76	; 0x4c
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801001e:	2347      	movs	r3, #71	; 0x47
 8010020:	18fb      	adds	r3, r7, r3
 8010022:	2207      	movs	r2, #7
 8010024:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8010026:	2344      	movs	r3, #68	; 0x44
 8010028:	18fb      	adds	r3, r7, r3
 801002a:	2200      	movs	r2, #0
 801002c:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801002e:	2346      	movs	r3, #70	; 0x46
 8010030:	18fb      	adds	r3, r7, r3
 8010032:	2200      	movs	r2, #0
 8010034:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8010036:	233a      	movs	r3, #58	; 0x3a
 8010038:	18fb      	adds	r3, r7, r3
 801003a:	2200      	movs	r2, #0
 801003c:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801003e:	e09e      	b.n	801017e <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	685a      	ldr	r2, [r3, #4]
 8010044:	2346      	movs	r3, #70	; 0x46
 8010046:	18fb      	adds	r3, r7, r3
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	18d3      	adds	r3, r2, r3
 801004c:	2544      	movs	r5, #68	; 0x44
 801004e:	197c      	adds	r4, r7, r5
 8010050:	223c      	movs	r2, #60	; 0x3c
 8010052:	18ba      	adds	r2, r7, r2
 8010054:	0011      	movs	r1, r2
 8010056:	0018      	movs	r0, r3
 8010058:	f7fe ff24 	bl	800eea4 <RegionCommonParseLinkAdrReq>
 801005c:	0003      	movs	r3, r0
 801005e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8010060:	197b      	adds	r3, r7, r5
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d100      	bne.n	801006a <RegionEU868LinkAdrReq+0x5a>
 8010068:	e092      	b.n	8010190 <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801006a:	2246      	movs	r2, #70	; 0x46
 801006c:	18bb      	adds	r3, r7, r2
 801006e:	18b9      	adds	r1, r7, r2
 8010070:	2244      	movs	r2, #68	; 0x44
 8010072:	18ba      	adds	r2, r7, r2
 8010074:	7809      	ldrb	r1, [r1, #0]
 8010076:	7812      	ldrb	r2, [r2, #0]
 8010078:	188a      	adds	r2, r1, r2
 801007a:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801007c:	2347      	movs	r3, #71	; 0x47
 801007e:	18fb      	adds	r3, r7, r3
 8010080:	2207      	movs	r2, #7
 8010082:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8010084:	213c      	movs	r1, #60	; 0x3c
 8010086:	187b      	adds	r3, r7, r1
 8010088:	889a      	ldrh	r2, [r3, #4]
 801008a:	233a      	movs	r3, #58	; 0x3a
 801008c:	18fb      	adds	r3, r7, r3
 801008e:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8010090:	187b      	adds	r3, r7, r1
 8010092:	78db      	ldrb	r3, [r3, #3]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d10c      	bne.n	80100b2 <RegionEU868LinkAdrReq+0xa2>
 8010098:	233a      	movs	r3, #58	; 0x3a
 801009a:	18fb      	adds	r3, r7, r3
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d107      	bne.n	80100b2 <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 80100a2:	2247      	movs	r2, #71	; 0x47
 80100a4:	18bb      	adds	r3, r7, r2
 80100a6:	18ba      	adds	r2, r7, r2
 80100a8:	7812      	ldrb	r2, [r2, #0]
 80100aa:	2101      	movs	r1, #1
 80100ac:	438a      	bics	r2, r1
 80100ae:	701a      	strb	r2, [r3, #0]
 80100b0:	e065      	b.n	801017e <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80100b2:	233c      	movs	r3, #60	; 0x3c
 80100b4:	18fb      	adds	r3, r7, r3
 80100b6:	78db      	ldrb	r3, [r3, #3]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d004      	beq.n	80100c6 <RegionEU868LinkAdrReq+0xb6>
 80100bc:	233c      	movs	r3, #60	; 0x3c
 80100be:	18fb      	adds	r3, r7, r3
 80100c0:	78db      	ldrb	r3, [r3, #3]
 80100c2:	2b05      	cmp	r3, #5
 80100c4:	d904      	bls.n	80100d0 <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80100c6:	233c      	movs	r3, #60	; 0x3c
 80100c8:	18fb      	adds	r3, r7, r3
 80100ca:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80100cc:	2b06      	cmp	r3, #6
 80100ce:	d907      	bls.n	80100e0 <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80100d0:	2247      	movs	r2, #71	; 0x47
 80100d2:	18bb      	adds	r3, r7, r2
 80100d4:	18ba      	adds	r2, r7, r2
 80100d6:	7812      	ldrb	r2, [r2, #0]
 80100d8:	2101      	movs	r1, #1
 80100da:	438a      	bics	r2, r1
 80100dc:	701a      	strb	r2, [r3, #0]
 80100de:	e04e      	b.n	801017e <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80100e0:	2345      	movs	r3, #69	; 0x45
 80100e2:	18fb      	adds	r3, r7, r3
 80100e4:	2200      	movs	r2, #0
 80100e6:	701a      	strb	r2, [r3, #0]
 80100e8:	e044      	b.n	8010174 <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80100ea:	233c      	movs	r3, #60	; 0x3c
 80100ec:	18fb      	adds	r3, r7, r3
 80100ee:	78db      	ldrb	r3, [r3, #3]
 80100f0:	2b06      	cmp	r3, #6
 80100f2:	d11b      	bne.n	801012c <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80100f4:	2345      	movs	r3, #69	; 0x45
 80100f6:	18fb      	adds	r3, r7, r3
 80100f8:	781a      	ldrb	r2, [r3, #0]
 80100fa:	496e      	ldr	r1, [pc, #440]	; (80102b4 <RegionEU868LinkAdrReq+0x2a4>)
 80100fc:	0013      	movs	r3, r2
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	189b      	adds	r3, r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	585b      	ldr	r3, [r3, r1]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d02e      	beq.n	8010168 <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801010a:	2345      	movs	r3, #69	; 0x45
 801010c:	18fb      	adds	r3, r7, r3
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	2201      	movs	r2, #1
 8010112:	409a      	lsls	r2, r3
 8010114:	0013      	movs	r3, r2
 8010116:	b21a      	sxth	r2, r3
 8010118:	213a      	movs	r1, #58	; 0x3a
 801011a:	187b      	adds	r3, r7, r1
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	b21b      	sxth	r3, r3
 8010120:	4313      	orrs	r3, r2
 8010122:	b21b      	sxth	r3, r3
 8010124:	b29a      	uxth	r2, r3
 8010126:	187b      	adds	r3, r7, r1
 8010128:	801a      	strh	r2, [r3, #0]
 801012a:	e01d      	b.n	8010168 <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801012c:	233a      	movs	r3, #58	; 0x3a
 801012e:	18fb      	adds	r3, r7, r3
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	001a      	movs	r2, r3
 8010134:	2345      	movs	r3, #69	; 0x45
 8010136:	18fb      	adds	r3, r7, r3
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	411a      	asrs	r2, r3
 801013c:	0013      	movs	r3, r2
 801013e:	2201      	movs	r2, #1
 8010140:	4013      	ands	r3, r2
 8010142:	d011      	beq.n	8010168 <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8010144:	2345      	movs	r3, #69	; 0x45
 8010146:	18fb      	adds	r3, r7, r3
 8010148:	781a      	ldrb	r2, [r3, #0]
 801014a:	495a      	ldr	r1, [pc, #360]	; (80102b4 <RegionEU868LinkAdrReq+0x2a4>)
 801014c:	0013      	movs	r3, r2
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	189b      	adds	r3, r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801015a:	2247      	movs	r2, #71	; 0x47
 801015c:	18bb      	adds	r3, r7, r2
 801015e:	18ba      	adds	r2, r7, r2
 8010160:	7812      	ldrb	r2, [r2, #0]
 8010162:	2101      	movs	r1, #1
 8010164:	438a      	bics	r2, r1
 8010166:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010168:	2145      	movs	r1, #69	; 0x45
 801016a:	187b      	adds	r3, r7, r1
 801016c:	781a      	ldrb	r2, [r3, #0]
 801016e:	187b      	adds	r3, r7, r1
 8010170:	3201      	adds	r2, #1
 8010172:	701a      	strb	r2, [r3, #0]
 8010174:	2345      	movs	r3, #69	; 0x45
 8010176:	18fb      	adds	r3, r7, r3
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2b0f      	cmp	r3, #15
 801017c:	d9b5      	bls.n	80100ea <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	7a1b      	ldrb	r3, [r3, #8]
 8010182:	2246      	movs	r2, #70	; 0x46
 8010184:	18ba      	adds	r2, r7, r2
 8010186:	7812      	ldrb	r2, [r2, #0]
 8010188:	429a      	cmp	r2, r3
 801018a:	d200      	bcs.n	801018e <RegionEU868LinkAdrReq+0x17e>
 801018c:	e758      	b.n	8010040 <RegionEU868LinkAdrReq+0x30>
 801018e:	e000      	b.n	8010192 <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8010190:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010192:	2134      	movs	r1, #52	; 0x34
 8010194:	187b      	adds	r3, r7, r1
 8010196:	2201      	movs	r2, #1
 8010198:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	7a5a      	ldrb	r2, [r3, #9]
 801019e:	187b      	adds	r3, r7, r1
 80101a0:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80101a2:	187b      	adds	r3, r7, r1
 80101a4:	0018      	movs	r0, r3
 80101a6:	f7ff fad7 	bl	800f758 <RegionEU868GetPhyParam>
 80101aa:	0003      	movs	r3, r0
 80101ac:	001a      	movs	r2, r3
 80101ae:	2030      	movs	r0, #48	; 0x30
 80101b0:	183b      	adds	r3, r7, r0
 80101b2:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80101b4:	2110      	movs	r1, #16
 80101b6:	187b      	adds	r3, r7, r1
 80101b8:	2447      	movs	r4, #71	; 0x47
 80101ba:	193a      	adds	r2, r7, r4
 80101bc:	7812      	ldrb	r2, [r2, #0]
 80101be:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	7a9a      	ldrb	r2, [r3, #10]
 80101c4:	187b      	adds	r3, r7, r1
 80101c6:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80101c8:	253c      	movs	r5, #60	; 0x3c
 80101ca:	197b      	adds	r3, r7, r5
 80101cc:	2201      	movs	r2, #1
 80101ce:	569a      	ldrsb	r2, [r3, r2]
 80101d0:	187b      	adds	r3, r7, r1
 80101d2:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80101d4:	197b      	adds	r3, r7, r5
 80101d6:	2202      	movs	r2, #2
 80101d8:	569a      	ldrsb	r2, [r3, r2]
 80101da:	187b      	adds	r3, r7, r1
 80101dc:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80101de:	197b      	adds	r3, r7, r5
 80101e0:	781a      	ldrb	r2, [r3, #0]
 80101e2:	187b      	adds	r3, r7, r1
 80101e4:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	220b      	movs	r2, #11
 80101ea:	569a      	ldrsb	r2, [r3, r2]
 80101ec:	187b      	adds	r3, r7, r1
 80101ee:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	220c      	movs	r2, #12
 80101f4:	569a      	ldrsb	r2, [r3, r2]
 80101f6:	187b      	adds	r3, r7, r1
 80101f8:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	7b5b      	ldrb	r3, [r3, #13]
 80101fe:	b25a      	sxtb	r2, r3
 8010200:	187b      	adds	r3, r7, r1
 8010202:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8010204:	187b      	adds	r3, r7, r1
 8010206:	2210      	movs	r2, #16
 8010208:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801020a:	187b      	adds	r3, r7, r1
 801020c:	223a      	movs	r2, #58	; 0x3a
 801020e:	18ba      	adds	r2, r7, r2
 8010210:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010212:	183b      	adds	r3, r7, r0
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	b25a      	sxtb	r2, r3
 8010218:	0008      	movs	r0, r1
 801021a:	183b      	adds	r3, r7, r0
 801021c:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801021e:	183b      	adds	r3, r7, r0
 8010220:	2207      	movs	r2, #7
 8010222:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8010224:	183b      	adds	r3, r7, r0
 8010226:	4a23      	ldr	r2, [pc, #140]	; (80102b4 <RegionEU868LinkAdrReq+0x2a4>)
 8010228:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801022a:	183b      	adds	r3, r7, r0
 801022c:	2207      	movs	r2, #7
 801022e:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8010230:	183b      	adds	r3, r7, r0
 8010232:	2200      	movs	r2, #0
 8010234:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010236:	183b      	adds	r3, r7, r0
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	6812      	ldr	r2, [r2, #0]
 801023c:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801023e:	0026      	movs	r6, r4
 8010240:	193c      	adds	r4, r7, r4
 8010242:	0029      	movs	r1, r5
 8010244:	187d      	adds	r5, r7, r1
 8010246:	187b      	adds	r3, r7, r1
 8010248:	1c9a      	adds	r2, r3, #2
 801024a:	187b      	adds	r3, r7, r1
 801024c:	1c59      	adds	r1, r3, #1
 801024e:	1838      	adds	r0, r7, r0
 8010250:	002b      	movs	r3, r5
 8010252:	f7fe fe7d 	bl	800ef50 <RegionCommonLinkAdrReqVerifyParams>
 8010256:	0003      	movs	r3, r0
 8010258:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801025a:	0034      	movs	r4, r6
 801025c:	193b      	adds	r3, r7, r4
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	2b07      	cmp	r3, #7
 8010262:	d10c      	bne.n	801027e <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8010264:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <RegionEU868LinkAdrReq+0x2a8>)
 8010266:	2202      	movs	r2, #2
 8010268:	2100      	movs	r1, #0
 801026a:	0018      	movs	r0, r3
 801026c:	f000 fe0c 	bl	8010e88 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8010270:	233a      	movs	r3, #58	; 0x3a
 8010272:	18fb      	adds	r3, r7, r3
 8010274:	8819      	ldrh	r1, [r3, #0]
 8010276:	4a0f      	ldr	r2, [pc, #60]	; (80102b4 <RegionEU868LinkAdrReq+0x2a4>)
 8010278:	2388      	movs	r3, #136	; 0x88
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801027e:	213c      	movs	r1, #60	; 0x3c
 8010280:	187b      	adds	r3, r7, r1
 8010282:	2201      	movs	r2, #1
 8010284:	569a      	ldrsb	r2, [r3, r2]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801028a:	187b      	adds	r3, r7, r1
 801028c:	2202      	movs	r2, #2
 801028e:	569a      	ldrsb	r2, [r3, r2]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8010294:	187b      	adds	r3, r7, r1
 8010296:	781a      	ldrb	r2, [r3, #0]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801029c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801029e:	2246      	movs	r2, #70	; 0x46
 80102a0:	18ba      	adds	r2, r7, r2
 80102a2:	7812      	ldrb	r2, [r2, #0]
 80102a4:	701a      	strb	r2, [r3, #0]

    return status;
 80102a6:	2347      	movs	r3, #71	; 0x47
 80102a8:	18fb      	adds	r3, r7, r3
 80102aa:	781b      	ldrb	r3, [r3, #0]
}
 80102ac:	0018      	movs	r0, r3
 80102ae:	46bd      	mov	sp, r7
 80102b0:	b013      	add	sp, #76	; 0x4c
 80102b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b4:	20000a5c 	.word	0x20000a5c
 80102b8:	20000b6c 	.word	0x20000b6c

080102bc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80102c4:	230f      	movs	r3, #15
 80102c6:	18fb      	adds	r3, r7, r3
 80102c8:	2207      	movs	r2, #7
 80102ca:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80102cc:	210e      	movs	r1, #14
 80102ce:	187b      	adds	r3, r7, r1
 80102d0:	2200      	movs	r2, #0
 80102d2:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	187a      	adds	r2, r7, r1
 80102da:	0011      	movs	r1, r2
 80102dc:	0018      	movs	r0, r3
 80102de:	f7ff f8dd 	bl	800f49c <VerifyRfFreq>
 80102e2:	0003      	movs	r3, r0
 80102e4:	001a      	movs	r2, r3
 80102e6:	2301      	movs	r3, #1
 80102e8:	4053      	eors	r3, r2
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 80102f0:	220f      	movs	r2, #15
 80102f2:	18bb      	adds	r3, r7, r2
 80102f4:	18ba      	adds	r2, r7, r2
 80102f6:	7812      	ldrb	r2, [r2, #0]
 80102f8:	2101      	movs	r1, #1
 80102fa:	438a      	bics	r2, r1
 80102fc:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	b25b      	sxtb	r3, r3
 8010304:	2207      	movs	r2, #7
 8010306:	2100      	movs	r1, #0
 8010308:	0018      	movs	r0, r3
 801030a:	f7fe fbe3 	bl	800ead4 <RegionCommonValueInRange>
 801030e:	1e03      	subs	r3, r0, #0
 8010310:	d106      	bne.n	8010320 <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8010312:	220f      	movs	r2, #15
 8010314:	18bb      	adds	r3, r7, r2
 8010316:	18ba      	adds	r2, r7, r2
 8010318:	7812      	ldrb	r2, [r2, #0]
 801031a:	2102      	movs	r1, #2
 801031c:	438a      	bics	r2, r1
 801031e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	785b      	ldrb	r3, [r3, #1]
 8010324:	b25b      	sxtb	r3, r3
 8010326:	2205      	movs	r2, #5
 8010328:	2100      	movs	r1, #0
 801032a:	0018      	movs	r0, r3
 801032c:	f7fe fbd2 	bl	800ead4 <RegionCommonValueInRange>
 8010330:	1e03      	subs	r3, r0, #0
 8010332:	d106      	bne.n	8010342 <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8010334:	220f      	movs	r2, #15
 8010336:	18bb      	adds	r3, r7, r2
 8010338:	18ba      	adds	r2, r7, r2
 801033a:	7812      	ldrb	r2, [r2, #0]
 801033c:	2104      	movs	r1, #4
 801033e:	438a      	bics	r2, r1
 8010340:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8010342:	230f      	movs	r3, #15
 8010344:	18fb      	adds	r3, r7, r3
 8010346:	781b      	ldrb	r3, [r3, #0]
}
 8010348:	0018      	movs	r0, r3
 801034a:	46bd      	mov	sp, r7
 801034c:	b004      	add	sp, #16
 801034e:	bd80      	pop	{r7, pc}

08010350 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8010358:	2317      	movs	r3, #23
 801035a:	18fb      	adds	r3, r7, r3
 801035c:	2203      	movs	r2, #3
 801035e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d119      	bne.n	801039e <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	791b      	ldrb	r3, [r3, #4]
 801036e:	b25b      	sxtb	r3, r3
 8010370:	b2da      	uxtb	r2, r3
 8010372:	2108      	movs	r1, #8
 8010374:	187b      	adds	r3, r7, r1
 8010376:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8010378:	187b      	adds	r3, r7, r1
 801037a:	0018      	movs	r0, r3
 801037c:	f000 fa46 	bl	801080c <RegionEU868ChannelsRemove>
 8010380:	0003      	movs	r3, r0
 8010382:	001a      	movs	r2, r3
 8010384:	2301      	movs	r3, #1
 8010386:	4053      	eors	r3, r2
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	d043      	beq.n	8010416 <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801038e:	2217      	movs	r2, #23
 8010390:	18bb      	adds	r3, r7, r2
 8010392:	18ba      	adds	r2, r7, r2
 8010394:	7812      	ldrb	r2, [r2, #0]
 8010396:	2103      	movs	r1, #3
 8010398:	438a      	bics	r2, r1
 801039a:	701a      	strb	r2, [r3, #0]
 801039c:	e03b      	b.n	8010416 <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	210c      	movs	r1, #12
 80103a4:	187b      	adds	r3, r7, r1
 80103a6:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	791b      	ldrb	r3, [r3, #4]
 80103ac:	b25b      	sxtb	r3, r3
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	187b      	adds	r3, r7, r1
 80103b2:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80103b4:	187b      	adds	r3, r7, r1
 80103b6:	0018      	movs	r0, r3
 80103b8:	f000 f964 	bl	8010684 <RegionEU868ChannelAdd>
 80103bc:	0003      	movs	r3, r0
 80103be:	2b04      	cmp	r3, #4
 80103c0:	d008      	beq.n	80103d4 <RegionEU868NewChannelReq+0x84>
 80103c2:	dc02      	bgt.n	80103ca <RegionEU868NewChannelReq+0x7a>
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d025      	beq.n	8010414 <RegionEU868NewChannelReq+0xc4>
 80103c8:	e01c      	b.n	8010404 <RegionEU868NewChannelReq+0xb4>
 80103ca:	2b05      	cmp	r3, #5
 80103cc:	d00a      	beq.n	80103e4 <RegionEU868NewChannelReq+0x94>
 80103ce:	2b06      	cmp	r3, #6
 80103d0:	d010      	beq.n	80103f4 <RegionEU868NewChannelReq+0xa4>
 80103d2:	e017      	b.n	8010404 <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80103d4:	2217      	movs	r2, #23
 80103d6:	18bb      	adds	r3, r7, r2
 80103d8:	18ba      	adds	r2, r7, r2
 80103da:	7812      	ldrb	r2, [r2, #0]
 80103dc:	2101      	movs	r1, #1
 80103de:	438a      	bics	r2, r1
 80103e0:	701a      	strb	r2, [r3, #0]
                break;
 80103e2:	e018      	b.n	8010416 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80103e4:	2217      	movs	r2, #23
 80103e6:	18bb      	adds	r3, r7, r2
 80103e8:	18ba      	adds	r2, r7, r2
 80103ea:	7812      	ldrb	r2, [r2, #0]
 80103ec:	2102      	movs	r1, #2
 80103ee:	438a      	bics	r2, r1
 80103f0:	701a      	strb	r2, [r3, #0]
                break;
 80103f2:	e010      	b.n	8010416 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80103f4:	2217      	movs	r2, #23
 80103f6:	18bb      	adds	r3, r7, r2
 80103f8:	18ba      	adds	r2, r7, r2
 80103fa:	7812      	ldrb	r2, [r2, #0]
 80103fc:	2103      	movs	r1, #3
 80103fe:	438a      	bics	r2, r1
 8010400:	701a      	strb	r2, [r3, #0]
                break;
 8010402:	e008      	b.n	8010416 <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8010404:	2217      	movs	r2, #23
 8010406:	18bb      	adds	r3, r7, r2
 8010408:	18ba      	adds	r2, r7, r2
 801040a:	7812      	ldrb	r2, [r2, #0]
 801040c:	2103      	movs	r1, #3
 801040e:	438a      	bics	r2, r1
 8010410:	701a      	strb	r2, [r3, #0]
                break;
 8010412:	e000      	b.n	8010416 <RegionEU868NewChannelReq+0xc6>
                break;
 8010414:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8010416:	2317      	movs	r3, #23
 8010418:	18fb      	adds	r3, r7, r3
 801041a:	781b      	ldrb	r3, [r3, #0]
}
 801041c:	0018      	movs	r0, r3
 801041e:	46bd      	mov	sp, r7
 8010420:	b006      	add	sp, #24
 8010422:	bd80      	pop	{r7, pc}

08010424 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    return -1;
 801042c:	2301      	movs	r3, #1
 801042e:	425b      	negs	r3, r3
}
 8010430:	0018      	movs	r0, r3
 8010432:	46bd      	mov	sp, r7
 8010434:	b002      	add	sp, #8
 8010436:	bd80      	pop	{r7, pc}

08010438 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8010440:	230f      	movs	r3, #15
 8010442:	18fb      	adds	r3, r7, r3
 8010444:	2203      	movs	r2, #3
 8010446:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8010448:	210e      	movs	r1, #14
 801044a:	187b      	adds	r3, r7, r1
 801044c:	2200      	movs	r2, #0
 801044e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	187a      	adds	r2, r7, r1
 8010456:	0011      	movs	r1, r2
 8010458:	0018      	movs	r0, r3
 801045a:	f7ff f81f 	bl	800f49c <VerifyRfFreq>
 801045e:	0003      	movs	r3, r0
 8010460:	001a      	movs	r2, r3
 8010462:	2301      	movs	r3, #1
 8010464:	4053      	eors	r3, r2
 8010466:	b2db      	uxtb	r3, r3
 8010468:	2b00      	cmp	r3, #0
 801046a:	d006      	beq.n	801047a <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 801046c:	220f      	movs	r2, #15
 801046e:	18bb      	adds	r3, r7, r2
 8010470:	18ba      	adds	r2, r7, r2
 8010472:	7812      	ldrb	r2, [r2, #0]
 8010474:	2101      	movs	r1, #1
 8010476:	438a      	bics	r2, r1
 8010478:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	0019      	movs	r1, r3
 8010480:	4a13      	ldr	r2, [pc, #76]	; (80104d0 <RegionEU868DlChannelReq+0x98>)
 8010482:	000b      	movs	r3, r1
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	185b      	adds	r3, r3, r1
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	589b      	ldr	r3, [r3, r2]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d106      	bne.n	801049e <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8010490:	220f      	movs	r2, #15
 8010492:	18bb      	adds	r3, r7, r2
 8010494:	18ba      	adds	r2, r7, r2
 8010496:	7812      	ldrb	r2, [r2, #0]
 8010498:	2102      	movs	r1, #2
 801049a:	438a      	bics	r2, r1
 801049c:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801049e:	230f      	movs	r3, #15
 80104a0:	18fb      	adds	r3, r7, r3
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	2b03      	cmp	r3, #3
 80104a6:	d10c      	bne.n	80104c2 <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	0018      	movs	r0, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	4907      	ldr	r1, [pc, #28]	; (80104d0 <RegionEU868DlChannelReq+0x98>)
 80104b4:	0003      	movs	r3, r0
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	181b      	adds	r3, r3, r0
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	18cb      	adds	r3, r1, r3
 80104be:	3304      	adds	r3, #4
 80104c0:	601a      	str	r2, [r3, #0]
    }

    return status;
 80104c2:	230f      	movs	r3, #15
 80104c4:	18fb      	adds	r3, r7, r3
 80104c6:	781b      	ldrb	r3, [r3, #0]
}
 80104c8:	0018      	movs	r0, r3
 80104ca:	46bd      	mov	sp, r7
 80104cc:	b004      	add	sp, #16
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	20000a5c 	.word	0x20000a5c

080104d4 <RegionEU868CalcBackOff>:
{
    return currentDr;
}

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b088      	sub	sp, #32
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80104dc:	210c      	movs	r1, #12
 80104de:	187b      	adds	r3, r7, r1
 80104e0:	4a12      	ldr	r2, [pc, #72]	; (801052c <RegionEU868CalcBackOff+0x58>)
 80104e2:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 80104e4:	187b      	adds	r3, r7, r1
 80104e6:	4a12      	ldr	r2, [pc, #72]	; (8010530 <RegionEU868CalcBackOff+0x5c>)
 80104e8:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	785a      	ldrb	r2, [r3, #1]
 80104ee:	187b      	adds	r3, r7, r1
 80104f0:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	781a      	ldrb	r2, [r3, #0]
 80104f6:	187b      	adds	r3, r7, r1
 80104f8:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	789a      	ldrb	r2, [r3, #2]
 80104fe:	187b      	adds	r3, r7, r1
 8010500:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	78da      	ldrb	r2, [r3, #3]
 8010506:	187b      	adds	r3, r7, r1
 8010508:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	685a      	ldr	r2, [r3, #4]
 801050e:	187b      	adds	r3, r7, r1
 8010510:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	689a      	ldr	r2, [r3, #8]
 8010516:	187b      	adds	r3, r7, r1
 8010518:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801051a:	187b      	adds	r3, r7, r1
 801051c:	0018      	movs	r0, r3
 801051e:	f7fe fec1 	bl	800f2a4 <RegionCommonCalcBackOff>
}
 8010522:	46c0      	nop			; (mov r8, r8)
 8010524:	46bd      	mov	sp, r7
 8010526:	b008      	add	sp, #32
 8010528:	bd80      	pop	{r7, pc}
 801052a:	46c0      	nop			; (mov r8, r8)
 801052c:	20000a5c 	.word	0x20000a5c
 8010530:	20000b1c 	.word	0x20000b1c

08010534 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010534:	b5b0      	push	{r4, r5, r7, lr}
 8010536:	b090      	sub	sp, #64	; 0x40
 8010538:	af04      	add	r7, sp, #16
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8010542:	232f      	movs	r3, #47	; 0x2f
 8010544:	18fb      	adds	r3, r7, r3
 8010546:	2200      	movs	r2, #0
 8010548:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801054a:	2327      	movs	r3, #39	; 0x27
 801054c:	18fb      	adds	r3, r7, r3
 801054e:	2200      	movs	r2, #0
 8010550:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8010552:	2314      	movs	r3, #20
 8010554:	18fb      	adds	r3, r7, r3
 8010556:	0018      	movs	r0, r3
 8010558:	2310      	movs	r3, #16
 801055a:	001a      	movs	r2, r3
 801055c:	2100      	movs	r1, #0
 801055e:	f009 fd1f 	bl	8019fa0 <memset>
    TimerTime_t nextTxDelay = 0;
 8010562:	2300      	movs	r3, #0
 8010564:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8010566:	4b44      	ldr	r3, [pc, #272]	; (8010678 <RegionEU868NextChannel+0x144>)
 8010568:	2201      	movs	r2, #1
 801056a:	2100      	movs	r1, #0
 801056c:	0018      	movs	r0, r3
 801056e:	f7fe fb19 	bl	800eba4 <RegionCommonCountChannels>
 8010572:	1e03      	subs	r3, r0, #0
 8010574:	d10a      	bne.n	801058c <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010576:	4a41      	ldr	r2, [pc, #260]	; (801067c <RegionEU868NextChannel+0x148>)
 8010578:	2388      	movs	r3, #136	; 0x88
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	5ad3      	ldrh	r3, [r2, r3]
 801057e:	2207      	movs	r2, #7
 8010580:	4313      	orrs	r3, r2
 8010582:	b299      	uxth	r1, r3
 8010584:	4a3d      	ldr	r2, [pc, #244]	; (801067c <RegionEU868NextChannel+0x148>)
 8010586:	2388      	movs	r3, #136	; 0x88
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681c      	ldr	r4, [r3, #0]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	0018      	movs	r0, r3
 8010596:	f000 fbfc 	bl	8010d92 <TimerGetElapsedTime>
 801059a:	0003      	movs	r3, r0
 801059c:	429c      	cmp	r4, r3
 801059e:	d824      	bhi.n	80105ea <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2200      	movs	r2, #0
 80105a4:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	7a58      	ldrb	r0, [r3, #9]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	7a99      	ldrb	r1, [r3, #10]
 80105ae:	4a34      	ldr	r2, [pc, #208]	; (8010680 <RegionEU868NextChannel+0x14c>)
 80105b0:	2305      	movs	r3, #5
 80105b2:	f7fe fb82 	bl	800ecba <RegionCommonUpdateBandTimeOff>
 80105b6:	0003      	movs	r3, r0
 80105b8:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	7a58      	ldrb	r0, [r3, #9]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	7a1b      	ldrb	r3, [r3, #8]
 80105c2:	b25b      	sxtb	r3, r3
 80105c4:	b2d9      	uxtb	r1, r3
 80105c6:	232f      	movs	r3, #47	; 0x2f
 80105c8:	18fc      	adds	r4, r7, r3
 80105ca:	4d2c      	ldr	r5, [pc, #176]	; (801067c <RegionEU868NextChannel+0x148>)
 80105cc:	4a2a      	ldr	r2, [pc, #168]	; (8010678 <RegionEU868NextChannel+0x144>)
 80105ce:	2327      	movs	r3, #39	; 0x27
 80105d0:	18fb      	adds	r3, r7, r3
 80105d2:	9302      	str	r3, [sp, #8]
 80105d4:	2314      	movs	r3, #20
 80105d6:	18fb      	adds	r3, r7, r3
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	4b29      	ldr	r3, [pc, #164]	; (8010680 <RegionEU868NextChannel+0x14c>)
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	002b      	movs	r3, r5
 80105e0:	f7fe ffd4 	bl	800f58c <CountNbOfEnabledChannels>
 80105e4:	0003      	movs	r3, r0
 80105e6:	7023      	strb	r3, [r4, #0]
 80105e8:	e010      	b.n	801060c <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 80105ea:	2127      	movs	r1, #39	; 0x27
 80105ec:	187b      	adds	r3, r7, r1
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	3301      	adds	r3, #1
 80105f2:	b2da      	uxtb	r2, r3
 80105f4:	187b      	adds	r3, r7, r1
 80105f6:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681c      	ldr	r4, [r3, #0]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	0018      	movs	r0, r3
 8010602:	f000 fbc6 	bl	8010d92 <TimerGetElapsedTime>
 8010606:	0003      	movs	r3, r0
 8010608:	1ae3      	subs	r3, r4, r3
 801060a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 801060c:	232f      	movs	r3, #47	; 0x2f
 801060e:	18fb      	adds	r3, r7, r3
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d012      	beq.n	801063c <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8010616:	232f      	movs	r3, #47	; 0x2f
 8010618:	18fb      	adds	r3, r7, r3
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	3b01      	subs	r3, #1
 801061e:	0019      	movs	r1, r3
 8010620:	2000      	movs	r0, #0
 8010622:	f000 fbdf 	bl	8010de4 <randr>
 8010626:	0002      	movs	r2, r0
 8010628:	2314      	movs	r3, #20
 801062a:	18fb      	adds	r3, r7, r3
 801062c:	5c9a      	ldrb	r2, [r3, r2]
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8010638:	2300      	movs	r3, #0
 801063a:	e018      	b.n	801066e <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 801063c:	2327      	movs	r3, #39	; 0x27
 801063e:	18fb      	adds	r3, r7, r3
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d004      	beq.n	8010650 <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801064a:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801064c:	230b      	movs	r3, #11
 801064e:	e00e      	b.n	801066e <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010650:	4a0a      	ldr	r2, [pc, #40]	; (801067c <RegionEU868NextChannel+0x148>)
 8010652:	2388      	movs	r3, #136	; 0x88
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	5ad3      	ldrh	r3, [r2, r3]
 8010658:	2207      	movs	r2, #7
 801065a:	4313      	orrs	r3, r2
 801065c:	b299      	uxth	r1, r3
 801065e:	4a07      	ldr	r2, [pc, #28]	; (801067c <RegionEU868NextChannel+0x148>)
 8010660:	2388      	movs	r3, #136	; 0x88
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801066c:	230c      	movs	r3, #12
    }
}
 801066e:	0018      	movs	r0, r3
 8010670:	46bd      	mov	sp, r7
 8010672:	b00c      	add	sp, #48	; 0x30
 8010674:	bdb0      	pop	{r4, r5, r7, pc}
 8010676:	46c0      	nop			; (mov r8, r8)
 8010678:	20000b6c 	.word	0x20000b6c
 801067c:	20000a5c 	.word	0x20000a5c
 8010680:	20000b1c 	.word	0x20000b1c

08010684 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8010684:	b590      	push	{r4, r7, lr}
 8010686:	b085      	sub	sp, #20
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 801068c:	230c      	movs	r3, #12
 801068e:	18fb      	adds	r3, r7, r3
 8010690:	2200      	movs	r2, #0
 8010692:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8010694:	230f      	movs	r3, #15
 8010696:	18fb      	adds	r3, r7, r3
 8010698:	2200      	movs	r2, #0
 801069a:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 801069c:	230e      	movs	r3, #14
 801069e:	18fb      	adds	r3, r7, r3
 80106a0:	2200      	movs	r2, #0
 80106a2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80106a4:	210d      	movs	r1, #13
 80106a6:	187b      	adds	r3, r7, r1
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	7912      	ldrb	r2, [r2, #4]
 80106ac:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80106ae:	187b      	adds	r3, r7, r1
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d801      	bhi.n	80106ba <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80106b6:	2306      	movs	r3, #6
 80106b8:	e0a2      	b.n	8010800 <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80106ba:	230d      	movs	r3, #13
 80106bc:	18fb      	adds	r3, r7, r3
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	2b0f      	cmp	r3, #15
 80106c2:	d901      	bls.n	80106c8 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80106c4:	2303      	movs	r3, #3
 80106c6:	e09b      	b.n	8010800 <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	7a1b      	ldrb	r3, [r3, #8]
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	b25b      	sxtb	r3, r3
 80106d2:	111b      	asrs	r3, r3, #4
 80106d4:	b25b      	sxtb	r3, r3
 80106d6:	2207      	movs	r2, #7
 80106d8:	2100      	movs	r1, #0
 80106da:	0018      	movs	r0, r3
 80106dc:	f7fe f9fa 	bl	800ead4 <RegionCommonValueInRange>
 80106e0:	1e03      	subs	r3, r0, #0
 80106e2:	d103      	bne.n	80106ec <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 80106e4:	230f      	movs	r3, #15
 80106e6:	18fb      	adds	r3, r7, r3
 80106e8:	2201      	movs	r2, #1
 80106ea:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	7a1b      	ldrb	r3, [r3, #8]
 80106f2:	b25b      	sxtb	r3, r3
 80106f4:	111b      	asrs	r3, r3, #4
 80106f6:	b25b      	sxtb	r3, r3
 80106f8:	2207      	movs	r2, #7
 80106fa:	2100      	movs	r1, #0
 80106fc:	0018      	movs	r0, r3
 80106fe:	f7fe f9e9 	bl	800ead4 <RegionCommonValueInRange>
 8010702:	1e03      	subs	r3, r0, #0
 8010704:	d103      	bne.n	801070e <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8010706:	230f      	movs	r3, #15
 8010708:	18fb      	adds	r3, r7, r3
 801070a:	2201      	movs	r2, #1
 801070c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	7a1b      	ldrb	r3, [r3, #8]
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	b25b      	sxtb	r3, r3
 8010718:	111b      	asrs	r3, r3, #4
 801071a:	b25a      	sxtb	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	7a1b      	ldrb	r3, [r3, #8]
 8010722:	b25b      	sxtb	r3, r3
 8010724:	111b      	asrs	r3, r3, #4
 8010726:	b25b      	sxtb	r3, r3
 8010728:	429a      	cmp	r2, r3
 801072a:	dd03      	ble.n	8010734 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 801072c:	230f      	movs	r3, #15
 801072e:	18fb      	adds	r3, r7, r3
 8010730:	2201      	movs	r2, #1
 8010732:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8010734:	230e      	movs	r3, #14
 8010736:	18fb      	adds	r3, r7, r3
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	2201      	movs	r2, #1
 801073c:	4053      	eors	r3, r2
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b00      	cmp	r3, #0
 8010742:	d013      	beq.n	801076c <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	220c      	movs	r2, #12
 801074c:	18ba      	adds	r2, r7, r2
 801074e:	0011      	movs	r1, r2
 8010750:	0018      	movs	r0, r3
 8010752:	f7fe fea3 	bl	800f49c <VerifyRfFreq>
 8010756:	0003      	movs	r3, r0
 8010758:	001a      	movs	r2, r3
 801075a:	2301      	movs	r3, #1
 801075c:	4053      	eors	r3, r2
 801075e:	b2db      	uxtb	r3, r3
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 8010764:	230e      	movs	r3, #14
 8010766:	18fb      	adds	r3, r7, r3
 8010768:	2201      	movs	r2, #1
 801076a:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801076c:	230f      	movs	r3, #15
 801076e:	18fb      	adds	r3, r7, r3
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d006      	beq.n	8010784 <RegionEU868ChannelAdd+0x100>
 8010776:	230e      	movs	r3, #14
 8010778:	18fb      	adds	r3, r7, r3
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d001      	beq.n	8010784 <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010780:	2306      	movs	r3, #6
 8010782:	e03d      	b.n	8010800 <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 8010784:	230f      	movs	r3, #15
 8010786:	18fb      	adds	r3, r7, r3
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801078e:	2305      	movs	r3, #5
 8010790:	e036      	b.n	8010800 <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 8010792:	230e      	movs	r3, #14
 8010794:	18fb      	adds	r3, r7, r3
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d001      	beq.n	80107a0 <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801079c:	2304      	movs	r3, #4
 801079e:	e02f      	b.n	8010800 <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80107a0:	240d      	movs	r4, #13
 80107a2:	193b      	adds	r3, r7, r4
 80107a4:	781a      	ldrb	r2, [r3, #0]
 80107a6:	0013      	movs	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	189b      	adds	r3, r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4a16      	ldr	r2, [pc, #88]	; (8010808 <RegionEU868ChannelAdd+0x184>)
 80107b0:	1898      	adds	r0, r3, r2
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	220c      	movs	r2, #12
 80107b8:	0019      	movs	r1, r3
 80107ba:	f000 fb29 	bl	8010e10 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80107be:	193b      	adds	r3, r7, r4
 80107c0:	781a      	ldrb	r2, [r3, #0]
 80107c2:	230c      	movs	r3, #12
 80107c4:	18fb      	adds	r3, r7, r3
 80107c6:	7818      	ldrb	r0, [r3, #0]
 80107c8:	490f      	ldr	r1, [pc, #60]	; (8010808 <RegionEU868ChannelAdd+0x184>)
 80107ca:	0013      	movs	r3, r2
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	189b      	adds	r3, r3, r2
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	18cb      	adds	r3, r1, r3
 80107d4:	3309      	adds	r3, #9
 80107d6:	1c02      	adds	r2, r0, #0
 80107d8:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80107da:	4a0b      	ldr	r2, [pc, #44]	; (8010808 <RegionEU868ChannelAdd+0x184>)
 80107dc:	2388      	movs	r3, #136	; 0x88
 80107de:	005b      	lsls	r3, r3, #1
 80107e0:	5ad3      	ldrh	r3, [r2, r3]
 80107e2:	b21a      	sxth	r2, r3
 80107e4:	193b      	adds	r3, r7, r4
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	2101      	movs	r1, #1
 80107ea:	4099      	lsls	r1, r3
 80107ec:	000b      	movs	r3, r1
 80107ee:	b21b      	sxth	r3, r3
 80107f0:	4313      	orrs	r3, r2
 80107f2:	b21b      	sxth	r3, r3
 80107f4:	b299      	uxth	r1, r3
 80107f6:	4a04      	ldr	r2, [pc, #16]	; (8010808 <RegionEU868ChannelAdd+0x184>)
 80107f8:	2388      	movs	r3, #136	; 0x88
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 80107fe:	2300      	movs	r3, #0
}
 8010800:	0018      	movs	r0, r3
 8010802:	46bd      	mov	sp, r7
 8010804:	b005      	add	sp, #20
 8010806:	bd90      	pop	{r4, r7, pc}
 8010808:	20000a5c 	.word	0x20000a5c

0801080c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801080c:	b590      	push	{r4, r7, lr}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8010814:	210f      	movs	r1, #15
 8010816:	187b      	adds	r3, r7, r1
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	7812      	ldrb	r2, [r2, #0]
 801081c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801081e:	187b      	adds	r3, r7, r1
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	2b02      	cmp	r3, #2
 8010824:	d801      	bhi.n	801082a <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8010826:	2300      	movs	r3, #0
 8010828:	e015      	b.n	8010856 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801082a:	240f      	movs	r4, #15
 801082c:	193b      	adds	r3, r7, r4
 801082e:	781a      	ldrb	r2, [r3, #0]
 8010830:	490b      	ldr	r1, [pc, #44]	; (8010860 <RegionEU868ChannelsRemove+0x54>)
 8010832:	0013      	movs	r3, r2
 8010834:	005b      	lsls	r3, r3, #1
 8010836:	189b      	adds	r3, r3, r2
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	18cb      	adds	r3, r1, r3
 801083c:	220c      	movs	r2, #12
 801083e:	2100      	movs	r1, #0
 8010840:	0018      	movs	r0, r3
 8010842:	f009 fbad 	bl	8019fa0 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8010846:	193b      	adds	r3, r7, r4
 8010848:	7819      	ldrb	r1, [r3, #0]
 801084a:	4b06      	ldr	r3, [pc, #24]	; (8010864 <RegionEU868ChannelsRemove+0x58>)
 801084c:	2210      	movs	r2, #16
 801084e:	0018      	movs	r0, r3
 8010850:	f7fe f966 	bl	800eb20 <RegionCommonChanDisable>
 8010854:	0003      	movs	r3, r0
}
 8010856:	0018      	movs	r0, r3
 8010858:	46bd      	mov	sp, r7
 801085a:	b005      	add	sp, #20
 801085c:	bd90      	pop	{r4, r7, pc}
 801085e:	46c0      	nop			; (mov r8, r8)
 8010860:	20000a5c 	.word	0x20000a5c
 8010864:	20000b6c 	.word	0x20000b6c

08010868 <RegionEU868ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	0004      	movs	r4, r0
 8010870:	0008      	movs	r0, r1
 8010872:	0011      	movs	r1, r2
 8010874:	1dfb      	adds	r3, r7, #7
 8010876:	1c22      	adds	r2, r4, #0
 8010878:	701a      	strb	r2, [r3, #0]
 801087a:	1dbb      	adds	r3, r7, #6
 801087c:	1c02      	adds	r2, r0, #0
 801087e:	701a      	strb	r2, [r3, #0]
 8010880:	1d7b      	adds	r3, r7, #5
 8010882:	1c0a      	adds	r2, r1, #0
 8010884:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8010886:	1dbb      	adds	r3, r7, #6
 8010888:	781a      	ldrb	r2, [r3, #0]
 801088a:	1d7b      	adds	r3, r7, #5
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	b2da      	uxtb	r2, r3
 8010892:	210f      	movs	r1, #15
 8010894:	187b      	adds	r3, r7, r1
 8010896:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8010898:	187b      	adds	r3, r7, r1
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	2b7f      	cmp	r3, #127	; 0x7f
 801089e:	d903      	bls.n	80108a8 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 80108a0:	230f      	movs	r3, #15
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	2200      	movs	r2, #0
 80108a6:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 80108a8:	230f      	movs	r3, #15
 80108aa:	18fb      	adds	r3, r7, r3
 80108ac:	781b      	ldrb	r3, [r3, #0]
}
 80108ae:	0018      	movs	r0, r3
 80108b0:	46bd      	mov	sp, r7
 80108b2:	b005      	add	sp, #20
 80108b4:	bd90      	pop	{r4, r7, pc}
	...

080108b8 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80108b8:	b082      	sub	sp, #8
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b086      	sub	sp, #24
 80108be:	af00      	add	r7, sp, #0
 80108c0:	60f8      	str	r0, [r7, #12]
 80108c2:	1d38      	adds	r0, r7, #4
 80108c4:	6001      	str	r1, [r0, #0]
 80108c6:	6042      	str	r2, [r0, #4]
 80108c8:	2204      	movs	r2, #4
 80108ca:	2120      	movs	r1, #32
 80108cc:	468c      	mov	ip, r1
 80108ce:	44bc      	add	ip, r7
 80108d0:	4462      	add	r2, ip
 80108d2:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80108d4:	2110      	movs	r1, #16
 80108d6:	187b      	adds	r3, r7, r1
 80108d8:	2200      	movs	r2, #0
 80108da:	601a      	str	r2, [r3, #0]
 80108dc:	187b      	adds	r3, r7, r1
 80108de:	2200      	movs	r2, #0
 80108e0:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 80108e2:	1d3b      	adds	r3, r7, #4
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	2304      	movs	r3, #4
 80108e8:	2020      	movs	r0, #32
 80108ea:	4684      	mov	ip, r0
 80108ec:	44bc      	add	ip, r7
 80108ee:	4463      	add	r3, ip
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	18d2      	adds	r2, r2, r3
 80108f4:	187b      	adds	r3, r7, r1
 80108f6:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80108f8:	1d3b      	adds	r3, r7, #4
 80108fa:	2204      	movs	r2, #4
 80108fc:	5e9b      	ldrsh	r3, [r3, r2]
 80108fe:	b29a      	uxth	r2, r3
 8010900:	2304      	movs	r3, #4
 8010902:	2020      	movs	r0, #32
 8010904:	4684      	mov	ip, r0
 8010906:	44bc      	add	ip, r7
 8010908:	4463      	add	r3, ip
 801090a:	2004      	movs	r0, #4
 801090c:	5e1b      	ldrsh	r3, [r3, r0]
 801090e:	b29b      	uxth	r3, r3
 8010910:	18d3      	adds	r3, r2, r3
 8010912:	b29b      	uxth	r3, r3
 8010914:	b21a      	sxth	r2, r3
 8010916:	187b      	adds	r3, r7, r1
 8010918:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 801091a:	187b      	adds	r3, r7, r1
 801091c:	2204      	movs	r2, #4
 801091e:	5e9b      	ldrsh	r3, [r3, r2]
 8010920:	4a0f      	ldr	r2, [pc, #60]	; (8010960 <SysTimeAdd+0xa8>)
 8010922:	4293      	cmp	r3, r2
 8010924:	dd10      	ble.n	8010948 <SysTimeAdd+0x90>
    {
        c.Seconds++;
 8010926:	2110      	movs	r1, #16
 8010928:	187b      	adds	r3, r7, r1
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	1c5a      	adds	r2, r3, #1
 801092e:	187b      	adds	r3, r7, r1
 8010930:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 8010932:	187b      	adds	r3, r7, r1
 8010934:	2204      	movs	r2, #4
 8010936:	5e9b      	ldrsh	r3, [r3, r2]
 8010938:	b29b      	uxth	r3, r3
 801093a:	4a0a      	ldr	r2, [pc, #40]	; (8010964 <SysTimeAdd+0xac>)
 801093c:	4694      	mov	ip, r2
 801093e:	4463      	add	r3, ip
 8010940:	b29b      	uxth	r3, r3
 8010942:	b21a      	sxth	r2, r3
 8010944:	187b      	adds	r3, r7, r1
 8010946:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2210      	movs	r2, #16
 801094c:	18ba      	adds	r2, r7, r2
 801094e:	ca03      	ldmia	r2!, {r0, r1}
 8010950:	c303      	stmia	r3!, {r0, r1}
}
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	46bd      	mov	sp, r7
 8010956:	b006      	add	sp, #24
 8010958:	bc80      	pop	{r7}
 801095a:	bc08      	pop	{r3}
 801095c:	b002      	add	sp, #8
 801095e:	4718      	bx	r3
 8010960:	000003e7 	.word	0x000003e7
 8010964:	fffffc18 	.word	0xfffffc18

08010968 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8010968:	b082      	sub	sp, #8
 801096a:	b580      	push	{r7, lr}
 801096c:	b086      	sub	sp, #24
 801096e:	af00      	add	r7, sp, #0
 8010970:	60f8      	str	r0, [r7, #12]
 8010972:	1d38      	adds	r0, r7, #4
 8010974:	6001      	str	r1, [r0, #0]
 8010976:	6042      	str	r2, [r0, #4]
 8010978:	2204      	movs	r2, #4
 801097a:	2120      	movs	r1, #32
 801097c:	468c      	mov	ip, r1
 801097e:	44bc      	add	ip, r7
 8010980:	4462      	add	r2, ip
 8010982:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8010984:	2110      	movs	r1, #16
 8010986:	187b      	adds	r3, r7, r1
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	187b      	adds	r3, r7, r1
 801098e:	2200      	movs	r2, #0
 8010990:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8010992:	1d3b      	adds	r3, r7, #4
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	2304      	movs	r3, #4
 8010998:	2020      	movs	r0, #32
 801099a:	4684      	mov	ip, r0
 801099c:	44bc      	add	ip, r7
 801099e:	4463      	add	r3, ip
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	1ad2      	subs	r2, r2, r3
 80109a4:	187b      	adds	r3, r7, r1
 80109a6:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80109a8:	1d3b      	adds	r3, r7, #4
 80109aa:	2204      	movs	r2, #4
 80109ac:	5e9b      	ldrsh	r3, [r3, r2]
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	2304      	movs	r3, #4
 80109b2:	2020      	movs	r0, #32
 80109b4:	4684      	mov	ip, r0
 80109b6:	44bc      	add	ip, r7
 80109b8:	4463      	add	r3, ip
 80109ba:	2004      	movs	r0, #4
 80109bc:	5e1b      	ldrsh	r3, [r3, r0]
 80109be:	b29b      	uxth	r3, r3
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	b21a      	sxth	r2, r3
 80109c6:	187b      	adds	r3, r7, r1
 80109c8:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 80109ca:	187b      	adds	r3, r7, r1
 80109cc:	2204      	movs	r2, #4
 80109ce:	5e9b      	ldrsh	r3, [r3, r2]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	da11      	bge.n	80109f8 <SysTimeSub+0x90>
    {
        c.Seconds--;
 80109d4:	2110      	movs	r1, #16
 80109d6:	187b      	adds	r3, r7, r1
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	1e5a      	subs	r2, r3, #1
 80109dc:	187b      	adds	r3, r7, r1
 80109de:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 80109e0:	187b      	adds	r3, r7, r1
 80109e2:	2204      	movs	r2, #4
 80109e4:	5e9b      	ldrsh	r3, [r3, r2]
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	22fa      	movs	r2, #250	; 0xfa
 80109ea:	0092      	lsls	r2, r2, #2
 80109ec:	4694      	mov	ip, r2
 80109ee:	4463      	add	r3, ip
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	b21a      	sxth	r2, r3
 80109f4:	187b      	adds	r3, r7, r1
 80109f6:	809a      	strh	r2, [r3, #4]
    }
    return c;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2210      	movs	r2, #16
 80109fc:	18ba      	adds	r2, r7, r2
 80109fe:	ca03      	ldmia	r2!, {r0, r1}
 8010a00:	c303      	stmia	r3!, {r0, r1}
}
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	46bd      	mov	sp, r7
 8010a06:	b006      	add	sp, #24
 8010a08:	bc80      	pop	{r7}
 8010a0a:	bc08      	pop	{r3}
 8010a0c:	b002      	add	sp, #8
 8010a0e:	4718      	bx	r3

08010a10 <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 8010a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a12:	b085      	sub	sp, #20
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	003b      	movs	r3, r7
 8010a18:	6018      	str	r0, [r3, #0]
 8010a1a:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 8010a1c:	003b      	movs	r3, r7
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	60bb      	str	r3, [r7, #8]
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 8010a26:	22fa      	movs	r2, #250	; 0xfa
 8010a28:	0092      	lsls	r2, r2, #2
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	68b8      	ldr	r0, [r7, #8]
 8010a2e:	68f9      	ldr	r1, [r7, #12]
 8010a30:	f7ef fd6a 	bl	8000508 <__aeabi_lmul>
 8010a34:	0003      	movs	r3, r0
 8010a36:	000c      	movs	r4, r1
 8010a38:	60bb      	str	r3, [r7, #8]
 8010a3a:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 8010a3c:	003b      	movs	r3, r7
 8010a3e:	2204      	movs	r2, #4
 8010a40:	5e9b      	ldrsh	r3, [r3, r2]
 8010a42:	001d      	movs	r5, r3
 8010a44:	17db      	asrs	r3, r3, #31
 8010a46:	001e      	movs	r6, r3
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	68fc      	ldr	r4, [r7, #12]
 8010a4c:	195b      	adds	r3, r3, r5
 8010a4e:	4174      	adcs	r4, r6
 8010a50:	60bb      	str	r3, [r7, #8]
 8010a52:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	68fc      	ldr	r4, [r7, #12]
 8010a58:	0018      	movs	r0, r3
 8010a5a:	0021      	movs	r1, r4
 8010a5c:	f007 fab2 	bl	8017fc4 <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 8010a60:	46c0      	nop			; (mov r8, r8)
 8010a62:	46bd      	mov	sp, r7
 8010a64:	b005      	add	sp, #20
 8010a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a68 <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 8010a68:	b5b0      	push	{r4, r5, r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8010a70:	2008      	movs	r0, #8
 8010a72:	183b      	adds	r3, r7, r0
 8010a74:	2200      	movs	r2, #0
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	0005      	movs	r5, r0
 8010a7a:	183b      	adds	r3, r7, r0
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 8010a80:	f007 fada 	bl	8018038 <itsdk_time_get_ms>
 8010a84:	0003      	movs	r3, r0
 8010a86:	000c      	movs	r4, r1
 8010a88:	613b      	str	r3, [r7, #16]
 8010a8a:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 8010a8c:	6938      	ldr	r0, [r7, #16]
 8010a8e:	6979      	ldr	r1, [r7, #20]
 8010a90:	22fa      	movs	r2, #250	; 0xfa
 8010a92:	0092      	lsls	r2, r2, #2
 8010a94:	2300      	movs	r3, #0
 8010a96:	f7ef fd17 	bl	80004c8 <__aeabi_uldivmod>
 8010a9a:	0003      	movs	r3, r0
 8010a9c:	000c      	movs	r4, r1
 8010a9e:	001a      	movs	r2, r3
 8010aa0:	0028      	movs	r0, r5
 8010aa2:	183b      	adds	r3, r7, r0
 8010aa4:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	697c      	ldr	r4, [r7, #20]
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	183b      	adds	r3, r7, r0
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	21fa      	movs	r1, #250	; 0xfa
 8010ab4:	0089      	lsls	r1, r1, #2
 8010ab6:	434b      	muls	r3, r1
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	b21a      	sxth	r2, r3
 8010ac0:	183b      	adds	r3, r7, r0
 8010ac2:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	183a      	adds	r2, r7, r0
 8010ac8:	ca03      	ldmia	r2!, {r0, r1}
 8010aca:	c303      	stmia	r3!, {r0, r1}
}
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	b006      	add	sp, #24
 8010ad2:	bdb0      	pop	{r4, r5, r7, pc}

08010ad4 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 8010adc:	4b11      	ldr	r3, [pc, #68]	; (8010b24 <removeFromList+0x50>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d105      	bne.n	8010af2 <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 8010ae6:	4b0f      	ldr	r3, [pc, #60]	; (8010b24 <removeFromList+0x50>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	695a      	ldr	r2, [r3, #20]
 8010aec:	4b0d      	ldr	r3, [pc, #52]	; (8010b24 <removeFromList+0x50>)
 8010aee:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 8010af0:	e014      	b.n	8010b1c <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 8010af2:	4b0c      	ldr	r3, [pc, #48]	; (8010b24 <removeFromList+0x50>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 8010af8:	e00d      	b.n	8010b16 <removeFromList+0x42>
		   if( cur->Next == obj ) {
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	695b      	ldr	r3, [r3, #20]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d105      	bne.n	8010b10 <removeFromList+0x3c>
			   cur->Next = obj->Next;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	695a      	ldr	r2, [r3, #20]
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	615a      	str	r2, [r3, #20]
			   break;
 8010b0c:	46c0      	nop			; (mov r8, r8)
}
 8010b0e:	e005      	b.n	8010b1c <removeFromList+0x48>
		   cur = cur->Next;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	695b      	ldr	r3, [r3, #20]
 8010b14:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1ee      	bne.n	8010afa <removeFromList+0x26>
}
 8010b1c:	46c0      	nop			; (mov r8, r8)
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	b004      	add	sp, #16
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	20000b70 	.word	0x20000b70

08010b28 <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8010b30:	4b0a      	ldr	r3, [pc, #40]	; (8010b5c <TimerExists+0x34>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 8010b36:	e008      	b.n	8010b4a <TimerExists+0x22>
    if( cur == obj ) {
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d101      	bne.n	8010b44 <TimerExists+0x1c>
      return true;
 8010b40:	2301      	movs	r3, #1
 8010b42:	e006      	b.n	8010b52 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	695b      	ldr	r3, [r3, #20]
 8010b48:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d1f3      	bne.n	8010b38 <TimerExists+0x10>
  }
  return false;
 8010b50:	2300      	movs	r3, #0

}
 8010b52:	0018      	movs	r0, r3
 8010b54:	46bd      	mov	sp, r7
 8010b56:	b004      	add	sp, #16
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	46c0      	nop			; (mov r8, r8)
 8010b5c:	20000b70 	.word	0x20000b70

08010b60 <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 8010b68:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <TimerInsertTimer+0x20>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 8010b70:	4b03      	ldr	r3, [pc, #12]	; (8010b80 <TimerInsertTimer+0x20>)
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	601a      	str	r2, [r3, #0]
}
 8010b76:	46c0      	nop			; (mov r8, r8)
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	b002      	add	sp, #8
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	46c0      	nop			; (mov r8, r8)
 8010b80:	20000b70 	.word	0x20000b70

08010b84 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2200      	movs	r2, #0
 8010b94:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d006      	beq.n	8010bac <TimerCallback+0x28>
		obj->Callback(obj->Context);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	68da      	ldr	r2, [r3, #12]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	0018      	movs	r0, r3
 8010ba8:	4790      	blx	r2
 8010baa:	e004      	b.n	8010bb6 <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 8010bac:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <TimerCallback+0x44>)
 8010bae:	2100      	movs	r1, #0
 8010bb0:	0018      	movs	r0, r3
 8010bb2:	f006 f9e3 	bl	8016f7c <itsdk_error_report>
	}
	removeFromList(obj);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	0018      	movs	r0, r3
 8010bba:	f7ff ff8b 	bl	8010ad4 <removeFromList>
}
 8010bbe:	46c0      	nop			; (mov r8, r8)
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	b004      	add	sp, #16
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	46c0      	nop			; (mov r8, r8)
 8010bc8:	c0000104 	.word	0xc0000104

08010bcc <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2200      	movs	r2, #0
 8010bec:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	683a      	ldr	r2, [r7, #0]
 8010bf2:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	615a      	str	r2, [r3, #20]
}
 8010c00:	46c0      	nop			; (mov r8, r8)
 8010c02:	46bd      	mov	sp, r7
 8010c04:	b002      	add	sp, #8
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	4b11      	ldr	r3, [pc, #68]	; (8010c5c <TimerSetValue+0x54>)
 8010c16:	0011      	movs	r1, r2
 8010c18:	0018      	movs	r0, r3
 8010c1a:	f007 fb19 	bl	8018250 <itsdk_stimer_get>
 8010c1e:	0003      	movs	r3, r0
 8010c20:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d00e      	beq.n	8010c46 <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	0018      	movs	r0, r3
 8010c2c:	f000 f86e 	bl	8010d0c <TimerStop>
		obj->Timestamp = value;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	683a      	ldr	r2, [r7, #0]
 8010c3a:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	0018      	movs	r0, r3
 8010c40:	f000 f80e 	bl	8010c60 <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 8010c44:	e005      	b.n	8010c52 <TimerSetValue+0x4a>
		obj->Timestamp = value;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	683a      	ldr	r2, [r7, #0]
 8010c4a:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	605a      	str	r2, [r3, #4]
}
 8010c52:	46c0      	nop			; (mov r8, r8)
 8010c54:	46bd      	mov	sp, r7
 8010c56:	b004      	add	sp, #16
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	46c0      	nop			; (mov r8, r8)
 8010c5c:	08010b85 	.word	0x08010b85

08010c60 <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 8010c60:	b5b0      	push	{r4, r5, r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 8010c68:	f008 fab6 	bl	80191d8 <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d005      	beq.n	8010c7e <TimerStart+0x1e>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	0018      	movs	r0, r3
 8010c76:	f7ff ff57 	bl	8010b28 <TimerExists>
 8010c7a:	1e03      	subs	r3, r0, #0
 8010c7c:	d007      	beq.n	8010c8e <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 8010c7e:	f008 fabf 	bl	8019200 <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 8010c82:	4b1e      	ldr	r3, [pc, #120]	; (8010cfc <TimerStart+0x9c>)
 8010c84:	2100      	movs	r1, #0
 8010c86:	0018      	movs	r0, r3
 8010c88:	f006 f978 	bl	8016f7c <itsdk_error_report>
	    return;
 8010c8c:	e032      	b.n	8010cf4 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2201      	movs	r2, #1
 8010c9a:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 8010ca2:	4b17      	ldr	r3, [pc, #92]	; (8010d00 <TimerStart+0xa0>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <TimerStart+0x58>
		obj->Next = NULL;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 8010cb0:	4b13      	ldr	r3, [pc, #76]	; (8010d00 <TimerStart+0xa0>)
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	601a      	str	r2, [r3, #0]
 8010cb6:	e003      	b.n	8010cc0 <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	0018      	movs	r0, r3
 8010cbc:	f7ff ff50 	bl	8010b60 <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6858      	ldr	r0, [r3, #4]
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	250f      	movs	r5, #15
 8010cc8:	197c      	adds	r4, r7, r5
 8010cca:	490e      	ldr	r1, [pc, #56]	; (8010d04 <TimerStart+0xa4>)
 8010ccc:	2300      	movs	r3, #0
 8010cce:	f007 f9e5 	bl	801809c <itsdk_stimer_register>
 8010cd2:	0003      	movs	r3, r0
 8010cd4:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 8010cd6:	197b      	adds	r3, r7, r5
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d008      	beq.n	8010cf0 <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 8010cde:	230f      	movs	r3, #15
 8010ce0:	18fb      	adds	r3, r7, r3
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	4a08      	ldr	r2, [pc, #32]	; (8010d08 <TimerStart+0xa8>)
 8010ce8:	0019      	movs	r1, r3
 8010cea:	0010      	movs	r0, r2
 8010cec:	f006 f946 	bl	8016f7c <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 8010cf0:	f008 fa86 	bl	8019200 <itsdk_leaveCriticalSection>

}
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	b004      	add	sp, #16
 8010cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8010cfa:	46c0      	nop			; (mov r8, r8)
 8010cfc:	80000011 	.word	0x80000011
 8010d00:	20000b70 	.word	0x20000b70
 8010d04:	08010b85 	.word	0x08010b85
 8010d08:	d0000105 	.word	0xd0000105

08010d0c <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 8010d14:	f008 fa60 	bl	80191d8 <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d00a      	beq.n	8010d34 <TimerStop+0x28>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	0018      	movs	r0, r3
 8010d22:	f7ff ff01 	bl	8010b28 <TimerExists>
 8010d26:	0003      	movs	r3, r0
 8010d28:	001a      	movs	r2, r3
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4053      	eors	r3, r2
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 8010d34:	f008 fa64 	bl	8019200 <itsdk_leaveCriticalSection>
	    return;
 8010d38:	e012      	b.n	8010d60 <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	7a1b      	ldrb	r3, [r3, #8]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d008      	beq.n	8010d54 <TimerStop+0x48>
		itsdk_stimer_stop(
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <TimerStop+0x5c>)
 8010d46:	0011      	movs	r1, r2
 8010d48:	0018      	movs	r0, r3
 8010d4a:	f007 fa15 	bl	8018178 <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2200      	movs	r2, #0
 8010d52:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	0018      	movs	r0, r3
 8010d58:	f7ff febc 	bl	8010ad4 <removeFromList>
	itsdk_leaveCriticalSection();
 8010d5c:	f008 fa50 	bl	8019200 <itsdk_leaveCriticalSection>
}  
 8010d60:	46bd      	mov	sp, r7
 8010d62:	b002      	add	sp, #8
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	46c0      	nop			; (mov r8, r8)
 8010d68:	08010b85 	.word	0x08010b85

08010d6c <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	7a1b      	ldrb	r3, [r3, #8]
}
 8010d78:	0018      	movs	r0, r3
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	b002      	add	sp, #8
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 8010d80:	b5b0      	push	{r4, r5, r7, lr}
 8010d82:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 8010d84:	f007 f958 	bl	8018038 <itsdk_time_get_ms>
 8010d88:	0003      	movs	r3, r0
 8010d8a:	000c      	movs	r4, r1
}
 8010d8c:	0018      	movs	r0, r3
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bdb0      	pop	{r4, r5, r7, pc}

08010d92 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b082      	sub	sp, #8
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 8010d9a:	f7ff fff1 	bl	8010d80 <TimerGetCurrentTime>
 8010d9e:	0002      	movs	r2, r0
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	1ad3      	subs	r3, r2, r3
}
 8010da4:	0018      	movs	r0, r3
 8010da6:	46bd      	mov	sp, r7
 8010da8:	b002      	add	sp, #8
 8010daa:	bd80      	pop	{r7, pc}

08010dac <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010db0:	4b08      	ldr	r3, [pc, #32]	; (8010dd4 <rand1+0x28>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a08      	ldr	r2, [pc, #32]	; (8010dd8 <rand1+0x2c>)
 8010db6:	4353      	muls	r3, r2
 8010db8:	4a08      	ldr	r2, [pc, #32]	; (8010ddc <rand1+0x30>)
 8010dba:	189a      	adds	r2, r3, r2
 8010dbc:	4b05      	ldr	r3, [pc, #20]	; (8010dd4 <rand1+0x28>)
 8010dbe:	601a      	str	r2, [r3, #0]
 8010dc0:	4b04      	ldr	r3, [pc, #16]	; (8010dd4 <rand1+0x28>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4906      	ldr	r1, [pc, #24]	; (8010de0 <rand1+0x34>)
 8010dc6:	0018      	movs	r0, r3
 8010dc8:	f7ef fa2c 	bl	8000224 <__aeabi_uidivmod>
 8010dcc:	000b      	movs	r3, r1
}
 8010dce:	0018      	movs	r0, r3
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	20000024 	.word	0x20000024
 8010dd8:	41c64e6d 	.word	0x41c64e6d
 8010ddc:	00003039 	.word	0x00003039
 8010de0:	7fffffff 	.word	0x7fffffff

08010de4 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010dee:	f7ff ffdd 	bl	8010dac <rand1>
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	3301      	adds	r3, #1
 8010dfa:	0019      	movs	r1, r3
 8010dfc:	f7ef fafc 	bl	80003f8 <__aeabi_idivmod>
 8010e00:	000b      	movs	r3, r1
 8010e02:	001a      	movs	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	18d3      	adds	r3, r2, r3
}
 8010e08:	0018      	movs	r0, r3
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	b002      	add	sp, #8
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	1dbb      	adds	r3, r7, #6
 8010e1c:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8010e1e:	e007      	b.n	8010e30 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8010e20:	68ba      	ldr	r2, [r7, #8]
 8010e22:	1c53      	adds	r3, r2, #1
 8010e24:	60bb      	str	r3, [r7, #8]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	1c59      	adds	r1, r3, #1
 8010e2a:	60f9      	str	r1, [r7, #12]
 8010e2c:	7812      	ldrb	r2, [r2, #0]
 8010e2e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010e30:	1dbb      	adds	r3, r7, #6
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	1dba      	adds	r2, r7, #6
 8010e36:	1e59      	subs	r1, r3, #1
 8010e38:	8011      	strh	r1, [r2, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d1f0      	bne.n	8010e20 <memcpy1+0x10>
    }
}
 8010e3e:	46c0      	nop			; (mov r8, r8)
 8010e40:	46bd      	mov	sp, r7
 8010e42:	b004      	add	sp, #16
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b084      	sub	sp, #16
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	60f8      	str	r0, [r7, #12]
 8010e4e:	60b9      	str	r1, [r7, #8]
 8010e50:	1dbb      	adds	r3, r7, #6
 8010e52:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8010e54:	1dbb      	adds	r3, r7, #6
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	18d3      	adds	r3, r2, r3
 8010e5e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8010e60:	e007      	b.n	8010e72 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8010e62:	68ba      	ldr	r2, [r7, #8]
 8010e64:	1c53      	adds	r3, r2, #1
 8010e66:	60bb      	str	r3, [r7, #8]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	1e59      	subs	r1, r3, #1
 8010e6c:	60f9      	str	r1, [r7, #12]
 8010e6e:	7812      	ldrb	r2, [r2, #0]
 8010e70:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010e72:	1dbb      	adds	r3, r7, #6
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	1dba      	adds	r2, r7, #6
 8010e78:	1e59      	subs	r1, r3, #1
 8010e7a:	8011      	strh	r1, [r2, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f0      	bne.n	8010e62 <memcpyr+0x1c>
    }
}
 8010e80:	46c0      	nop			; (mov r8, r8)
 8010e82:	46bd      	mov	sp, r7
 8010e84:	b004      	add	sp, #16
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	0008      	movs	r0, r1
 8010e92:	0011      	movs	r1, r2
 8010e94:	1cfb      	adds	r3, r7, #3
 8010e96:	1c02      	adds	r2, r0, #0
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	003b      	movs	r3, r7
 8010e9c:	1c0a      	adds	r2, r1, #0
 8010e9e:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8010ea0:	e005      	b.n	8010eae <memset1+0x26>
    {
        *dst++ = value;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	1c5a      	adds	r2, r3, #1
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	1cfa      	adds	r2, r7, #3
 8010eaa:	7812      	ldrb	r2, [r2, #0]
 8010eac:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010eae:	003b      	movs	r3, r7
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	003a      	movs	r2, r7
 8010eb4:	1e59      	subs	r1, r3, #1
 8010eb6:	8011      	strh	r1, [r2, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d1f2      	bne.n	8010ea2 <memset1+0x1a>
    }
}
 8010ebc:	46c0      	nop			; (mov r8, r8)
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	b002      	add	sp, #8
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8010ec8:	2380      	movs	r3, #128	; 0x80
 8010eca:	015b      	lsls	r3, r3, #5
 8010ecc:	2200      	movs	r2, #0
 8010ece:	0019      	movs	r1, r3
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	f007 fdf7 	bl	8018ac4 <gpio_configure>
    TCXO_ON();
 8010ed6:	2380      	movs	r3, #128	; 0x80
 8010ed8:	015b      	lsls	r3, r3, #5
 8010eda:	0019      	movs	r1, r3
 8010edc:	2000      	movs	r0, #0
 8010ede:	f007 fff9 	bl	8018ed4 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 8010ee2:	2035      	movs	r0, #53	; 0x35
 8010ee4:	f008 f952 	bl	801918c <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8010ee8:	220e      	movs	r2, #14
 8010eea:	2110      	movs	r1, #16
 8010eec:	2001      	movs	r0, #1
 8010eee:	f007 fde9 	bl	8018ac4 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8010ef2:	220e      	movs	r2, #14
 8010ef4:	2102      	movs	r1, #2
 8010ef6:	2001      	movs	r0, #1
 8010ef8:	f007 fde4 	bl	8018ac4 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8010efc:	220e      	movs	r2, #14
 8010efe:	2101      	movs	r1, #1
 8010f00:	2001      	movs	r0, #1
 8010f02:	f007 fddf 	bl	8018ac4 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8010f06:	2380      	movs	r3, #128	; 0x80
 8010f08:	019b      	lsls	r3, r3, #6
 8010f0a:	220e      	movs	r2, #14
 8010f0c:	0019      	movs	r1, r3
 8010f0e:	2002      	movs	r0, #2
 8010f10:	f007 fdd8 	bl	8018ac4 <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 8010f14:	2380      	movs	r3, #128	; 0x80
 8010f16:	021b      	lsls	r3, r3, #8
 8010f18:	2201      	movs	r2, #1
 8010f1a:	0019      	movs	r1, r3
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	f007 fdd1 	bl	8018ac4 <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8010f22:	2380      	movs	r3, #128	; 0x80
 8010f24:	021b      	lsls	r3, r3, #8
 8010f26:	0019      	movs	r1, r3
 8010f28:	2000      	movs	r0, #0
 8010f2a:	f007 ffd3 	bl	8018ed4 <gpio_set>
	SX1276Reset();
 8010f2e:	f001 fead 	bl	8012c8c <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 8010f32:	2001      	movs	r0, #1
 8010f34:	f001 ff80 	bl	8012e38 <SX1276Read>
 8010f38:	0003      	movs	r3, r0
 8010f3a:	001a      	movs	r2, r3
 8010f3c:	2307      	movs	r3, #7
 8010f3e:	439a      	bics	r2, r3
 8010f40:	0013      	movs	r3, r2
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	0019      	movs	r1, r3
 8010f46:	2001      	movs	r0, #1
 8010f48:	f001 ff62 	bl	8012e10 <SX1276Write>
	SX1276SetAntSwLowPower(true);
 8010f4c:	2001      	movs	r0, #1
 8010f4e:	f000 f9fc 	bl	801134a <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 8010f52:	200a      	movs	r0, #10
 8010f54:	f008 f91a 	bl	801918c <itsdk_delayMs>
	TCXO_OFF();
 8010f58:	2380      	movs	r3, #128	; 0x80
 8010f5a:	015b      	lsls	r3, r3, #5
 8010f5c:	0019      	movs	r1, r3
 8010f5e:	2000      	movs	r0, #0
 8010f60:	f007 ffd0 	bl	8018f04 <gpio_reset>

}
 8010f64:	46c0      	nop			; (mov r8, r8)
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 8010f6e:	2300      	movs	r3, #0
}
 8010f70:	0018      	movs	r0, r3
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b082      	sub	sp, #8
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	0002      	movs	r2, r0
 8010f7e:	1dfb      	adds	r3, r7, #7
 8010f80:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 8010f82:	1dfb      	adds	r3, r7, #7
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d109      	bne.n	8010f9e <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 8010f8a:	2380      	movs	r3, #128	; 0x80
 8010f8c:	015b      	lsls	r3, r3, #5
 8010f8e:	0019      	movs	r1, r3
 8010f90:	2000      	movs	r0, #0
 8010f92:	f007 ff9f 	bl	8018ed4 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 8010f96:	2032      	movs	r0, #50	; 0x32
 8010f98:	f008 f8f8 	bl	801918c <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 8010f9c:	e008      	b.n	8010fb0 <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 8010f9e:	200a      	movs	r0, #10
 8010fa0:	f008 f8f4 	bl	801918c <itsdk_delayMs>
    TCXO_OFF(); 
 8010fa4:	2380      	movs	r3, #128	; 0x80
 8010fa6:	015b      	lsls	r3, r3, #5
 8010fa8:	0019      	movs	r1, r3
 8010faa:	2000      	movs	r0, #0
 8010fac:	f007 ffaa 	bl	8018f04 <gpio_reset>
}
 8010fb0:	46c0      	nop			; (mov r8, r8)
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	b002      	add	sp, #8
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 8010fbc:	4b11      	ldr	r3, [pc, #68]	; (8011004 <SX1276IoInit+0x4c>)
 8010fbe:	0018      	movs	r0, r3
 8010fc0:	f000 fa48 	bl	8011454 <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8010fc4:	220e      	movs	r2, #14
 8010fc6:	2110      	movs	r1, #16
 8010fc8:	2001      	movs	r0, #1
 8010fca:	f007 fd7b 	bl	8018ac4 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8010fce:	220e      	movs	r2, #14
 8010fd0:	2102      	movs	r1, #2
 8010fd2:	2001      	movs	r0, #1
 8010fd4:	f007 fd76 	bl	8018ac4 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8010fd8:	220e      	movs	r2, #14
 8010fda:	2101      	movs	r1, #1
 8010fdc:	2001      	movs	r0, #1
 8010fde:	f007 fd71 	bl	8018ac4 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8010fe2:	2380      	movs	r3, #128	; 0x80
 8010fe4:	019b      	lsls	r3, r3, #6
 8010fe6:	220e      	movs	r2, #14
 8010fe8:	0019      	movs	r1, r3
 8010fea:	2002      	movs	r0, #2
 8010fec:	f007 fd6a 	bl	8018ac4 <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8010ff0:	2380      	movs	r3, #128	; 0x80
 8010ff2:	015b      	lsls	r3, r3, #5
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	0019      	movs	r1, r3
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	f007 fd63 	bl	8018ac4 <gpio_configure>

}
 8010ffe:	46c0      	nop			; (mov r8, r8)
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	20000028 	.word	0x20000028

08011008 <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8011010:	2110      	movs	r1, #16
 8011012:	2001      	movs	r0, #1
 8011014:	f007 ffda 	bl	8018fcc <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 8011018:	2207      	movs	r2, #7
 801101a:	2110      	movs	r1, #16
 801101c:	2001      	movs	r0, #1
 801101e:	f007 fd51 	bl	8018ac4 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 8011022:	2300      	movs	r3, #0
 8011024:	2200      	movs	r2, #0
 8011026:	2110      	movs	r1, #16
 8011028:	2001      	movs	r0, #1
 801102a:	f007 ffa7 	bl	8018f7c <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	4b39      	ldr	r3, [pc, #228]	; (8011118 <SX1276IoIrqInit+0x110>)
 8011034:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 8011036:	4b38      	ldr	r3, [pc, #224]	; (8011118 <SX1276IoIrqInit+0x110>)
 8011038:	2210      	movs	r2, #16
 801103a:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 801103c:	4b36      	ldr	r3, [pc, #216]	; (8011118 <SX1276IoIrqInit+0x110>)
 801103e:	0018      	movs	r0, r3
 8011040:	f008 f81c 	bl	801907c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8011044:	2110      	movs	r1, #16
 8011046:	2001      	movs	r0, #1
 8011048:	f007 ff74 	bl	8018f34 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801104c:	2102      	movs	r1, #2
 801104e:	2001      	movs	r0, #1
 8011050:	f007 ffbc 	bl	8018fcc <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 8011054:	2207      	movs	r2, #7
 8011056:	2102      	movs	r1, #2
 8011058:	2001      	movs	r0, #1
 801105a:	f007 fd33 	bl	8018ac4 <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 801105e:	2300      	movs	r3, #0
 8011060:	2200      	movs	r2, #0
 8011062:	2102      	movs	r1, #2
 8011064:	2001      	movs	r0, #1
 8011066:	f007 ff89 	bl	8018f7c <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	685a      	ldr	r2, [r3, #4]
 801106e:	4b2a      	ldr	r3, [pc, #168]	; (8011118 <SX1276IoIrqInit+0x110>)
 8011070:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 8011072:	4b29      	ldr	r3, [pc, #164]	; (8011118 <SX1276IoIrqInit+0x110>)
 8011074:	2202      	movs	r2, #2
 8011076:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 8011078:	4b28      	ldr	r3, [pc, #160]	; (801111c <SX1276IoIrqInit+0x114>)
 801107a:	0018      	movs	r0, r3
 801107c:	f007 fffe 	bl	801907c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8011080:	2102      	movs	r1, #2
 8011082:	2001      	movs	r0, #1
 8011084:	f007 ff56 	bl	8018f34 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8011088:	2101      	movs	r1, #1
 801108a:	2001      	movs	r0, #1
 801108c:	f007 ff9e 	bl	8018fcc <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 8011090:	2207      	movs	r2, #7
 8011092:	2101      	movs	r1, #1
 8011094:	2001      	movs	r0, #1
 8011096:	f007 fd15 	bl	8018ac4 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 801109a:	2300      	movs	r3, #0
 801109c:	2200      	movs	r2, #0
 801109e:	2101      	movs	r1, #1
 80110a0:	2001      	movs	r0, #1
 80110a2:	f007 ff6b 	bl	8018f7c <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	689a      	ldr	r2, [r3, #8]
 80110aa:	4b1b      	ldr	r3, [pc, #108]	; (8011118 <SX1276IoIrqInit+0x110>)
 80110ac:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 80110ae:	4b1a      	ldr	r3, [pc, #104]	; (8011118 <SX1276IoIrqInit+0x110>)
 80110b0:	2201      	movs	r2, #1
 80110b2:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 80110b4:	4b1a      	ldr	r3, [pc, #104]	; (8011120 <SX1276IoIrqInit+0x118>)
 80110b6:	0018      	movs	r0, r3
 80110b8:	f007 ffe0 	bl	801907c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 80110bc:	2101      	movs	r1, #1
 80110be:	2001      	movs	r0, #1
 80110c0:	f007 ff38 	bl	8018f34 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 80110c4:	2380      	movs	r3, #128	; 0x80
 80110c6:	019b      	lsls	r3, r3, #6
 80110c8:	0019      	movs	r1, r3
 80110ca:	2002      	movs	r0, #2
 80110cc:	f007 ff7e 	bl	8018fcc <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 80110d0:	2380      	movs	r3, #128	; 0x80
 80110d2:	019b      	lsls	r3, r3, #6
 80110d4:	2207      	movs	r2, #7
 80110d6:	0019      	movs	r1, r3
 80110d8:	2002      	movs	r0, #2
 80110da:	f007 fcf3 	bl	8018ac4 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 80110de:	2380      	movs	r3, #128	; 0x80
 80110e0:	0199      	lsls	r1, r3, #6
 80110e2:	2300      	movs	r3, #0
 80110e4:	2200      	movs	r2, #0
 80110e6:	2002      	movs	r0, #2
 80110e8:	f007 ff48 	bl	8018f7c <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	68da      	ldr	r2, [r3, #12]
 80110f0:	4b09      	ldr	r3, [pc, #36]	; (8011118 <SX1276IoIrqInit+0x110>)
 80110f2:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 80110f4:	4b08      	ldr	r3, [pc, #32]	; (8011118 <SX1276IoIrqInit+0x110>)
 80110f6:	2280      	movs	r2, #128	; 0x80
 80110f8:	0192      	lsls	r2, r2, #6
 80110fa:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 80110fc:	4b09      	ldr	r3, [pc, #36]	; (8011124 <SX1276IoIrqInit+0x11c>)
 80110fe:	0018      	movs	r0, r3
 8011100:	f007 ffbc 	bl	801907c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8011104:	2380      	movs	r3, #128	; 0x80
 8011106:	019b      	lsls	r3, r3, #6
 8011108:	0019      	movs	r1, r3
 801110a:	2002      	movs	r0, #2
 801110c:	f007 ff12 	bl	8018f34 <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 8011110:	46c0      	nop			; (mov r8, r8)
 8011112:	46bd      	mov	sp, r7
 8011114:	b002      	add	sp, #8
 8011116:	bd80      	pop	{r7, pc}
 8011118:	20000b74 	.word	0x20000b74
 801111c:	20000b80 	.word	0x20000b80
 8011120:	20000b8c 	.word	0x20000b8c
 8011124:	20000b98 	.word	0x20000b98

08011128 <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801112c:	220e      	movs	r2, #14
 801112e:	2110      	movs	r1, #16
 8011130:	2001      	movs	r0, #1
 8011132:	f007 fcc7 	bl	8018ac4 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8011136:	2110      	movs	r1, #16
 8011138:	2001      	movs	r0, #1
 801113a:	f007 ff47 	bl	8018fcc <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801113e:	220e      	movs	r2, #14
 8011140:	2102      	movs	r1, #2
 8011142:	2001      	movs	r0, #1
 8011144:	f007 fcbe 	bl	8018ac4 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8011148:	2102      	movs	r1, #2
 801114a:	2001      	movs	r0, #1
 801114c:	f007 ff3e 	bl	8018fcc <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8011150:	220e      	movs	r2, #14
 8011152:	2101      	movs	r1, #1
 8011154:	2001      	movs	r0, #1
 8011156:	f007 fcb5 	bl	8018ac4 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801115a:	2101      	movs	r1, #1
 801115c:	2001      	movs	r0, #1
 801115e:	f007 ff35 	bl	8018fcc <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8011162:	2380      	movs	r3, #128	; 0x80
 8011164:	019b      	lsls	r3, r3, #6
 8011166:	220e      	movs	r2, #14
 8011168:	0019      	movs	r1, r3
 801116a:	2002      	movs	r0, #2
 801116c:	f007 fcaa 	bl	8018ac4 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8011170:	2380      	movs	r3, #128	; 0x80
 8011172:	019b      	lsls	r3, r3, #6
 8011174:	0019      	movs	r1, r3
 8011176:	2002      	movs	r0, #2
 8011178:	f007 ff28 	bl	8018fcc <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 801117c:	46c0      	nop			; (mov r8, r8)
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 8011182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011184:	b085      	sub	sp, #20
 8011186:	af00      	add	r7, sp, #0
 8011188:	0002      	movs	r2, r0
 801118a:	1dfb      	adds	r3, r7, #7
 801118c:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 801118e:	250f      	movs	r5, #15
 8011190:	197b      	adds	r3, r7, r5
 8011192:	2200      	movs	r2, #0
 8011194:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8011196:	260e      	movs	r6, #14
 8011198:	19bb      	adds	r3, r7, r6
 801119a:	2200      	movs	r2, #0
 801119c:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 801119e:	197c      	adds	r4, r7, r5
 80111a0:	2009      	movs	r0, #9
 80111a2:	f001 fe49 	bl	8012e38 <SX1276Read>
 80111a6:	0003      	movs	r3, r0
 80111a8:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 80111aa:	19bc      	adds	r4, r7, r6
 80111ac:	204d      	movs	r0, #77	; 0x4d
 80111ae:	f001 fe43 	bl	8012e38 <SX1276Read>
 80111b2:	0003      	movs	r3, r0
 80111b4:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80111b6:	197b      	adds	r3, r7, r5
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	b25b      	sxtb	r3, r3
 80111bc:	227f      	movs	r2, #127	; 0x7f
 80111be:	4013      	ands	r3, r2
 80111c0:	b25c      	sxtb	r4, r3
 80111c2:	1dfb      	adds	r3, r7, #7
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	0018      	movs	r0, r3
 80111c8:	f000 f8ae 	bl	8011328 <SX1276GetPaSelect>
 80111cc:	0003      	movs	r3, r0
 80111ce:	b25b      	sxtb	r3, r3
 80111d0:	4323      	orrs	r3, r4
 80111d2:	b25a      	sxtb	r2, r3
 80111d4:	197b      	adds	r3, r7, r5
 80111d6:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 80111d8:	197b      	adds	r3, r7, r5
 80111da:	197a      	adds	r2, r7, r5
 80111dc:	7812      	ldrb	r2, [r2, #0]
 80111de:	2170      	movs	r1, #112	; 0x70
 80111e0:	430a      	orrs	r2, r1
 80111e2:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80111e4:	197b      	adds	r3, r7, r5
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	b25b      	sxtb	r3, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	da67      	bge.n	80112be <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 80111ee:	1dfb      	adds	r3, r7, #7
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	b25b      	sxtb	r3, r3
 80111f4:	2b11      	cmp	r3, #17
 80111f6:	dd07      	ble.n	8011208 <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80111f8:	220e      	movs	r2, #14
 80111fa:	18bb      	adds	r3, r7, r2
 80111fc:	18ba      	adds	r2, r7, r2
 80111fe:	7812      	ldrb	r2, [r2, #0]
 8011200:	2107      	movs	r1, #7
 8011202:	430a      	orrs	r2, r1
 8011204:	701a      	strb	r2, [r3, #0]
 8011206:	e00b      	b.n	8011220 <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8011208:	210e      	movs	r1, #14
 801120a:	187b      	adds	r3, r7, r1
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	b25b      	sxtb	r3, r3
 8011210:	2207      	movs	r2, #7
 8011212:	4393      	bics	r3, r2
 8011214:	b25b      	sxtb	r3, r3
 8011216:	2204      	movs	r2, #4
 8011218:	4313      	orrs	r3, r2
 801121a:	b25a      	sxtb	r2, r3
 801121c:	187b      	adds	r3, r7, r1
 801121e:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8011220:	230e      	movs	r3, #14
 8011222:	18fb      	adds	r3, r7, r3
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	2207      	movs	r2, #7
 8011228:	4013      	ands	r3, r2
 801122a:	2b07      	cmp	r3, #7
 801122c:	d123      	bne.n	8011276 <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 801122e:	1dfb      	adds	r3, r7, #7
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	b25b      	sxtb	r3, r3
 8011234:	2b04      	cmp	r3, #4
 8011236:	dc02      	bgt.n	801123e <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 8011238:	1dfb      	adds	r3, r7, #7
 801123a:	2205      	movs	r2, #5
 801123c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801123e:	1dfb      	adds	r3, r7, #7
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	b25b      	sxtb	r3, r3
 8011244:	2b14      	cmp	r3, #20
 8011246:	dd02      	ble.n	801124e <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 8011248:	1dfb      	adds	r3, r7, #7
 801124a:	2214      	movs	r2, #20
 801124c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801124e:	200f      	movs	r0, #15
 8011250:	183b      	adds	r3, r7, r0
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	b25b      	sxtb	r3, r3
 8011256:	220f      	movs	r2, #15
 8011258:	4393      	bics	r3, r2
 801125a:	b25a      	sxtb	r2, r3
 801125c:	1dfb      	adds	r3, r7, #7
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	3b05      	subs	r3, #5
 8011262:	b2db      	uxtb	r3, r3
 8011264:	b25b      	sxtb	r3, r3
 8011266:	210f      	movs	r1, #15
 8011268:	400b      	ands	r3, r1
 801126a:	b25b      	sxtb	r3, r3
 801126c:	4313      	orrs	r3, r2
 801126e:	b25a      	sxtb	r2, r3
 8011270:	183b      	adds	r3, r7, r0
 8011272:	701a      	strb	r2, [r3, #0]
 8011274:	e046      	b.n	8011304 <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 8011276:	1dfb      	adds	r3, r7, #7
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	b25b      	sxtb	r3, r3
 801127c:	2b01      	cmp	r3, #1
 801127e:	dc02      	bgt.n	8011286 <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 8011280:	1dfb      	adds	r3, r7, #7
 8011282:	2202      	movs	r2, #2
 8011284:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8011286:	1dfb      	adds	r3, r7, #7
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	b25b      	sxtb	r3, r3
 801128c:	2b11      	cmp	r3, #17
 801128e:	dd02      	ble.n	8011296 <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 8011290:	1dfb      	adds	r3, r7, #7
 8011292:	2211      	movs	r2, #17
 8011294:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8011296:	200f      	movs	r0, #15
 8011298:	183b      	adds	r3, r7, r0
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	b25b      	sxtb	r3, r3
 801129e:	220f      	movs	r2, #15
 80112a0:	4393      	bics	r3, r2
 80112a2:	b25a      	sxtb	r2, r3
 80112a4:	1dfb      	adds	r3, r7, #7
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	3b02      	subs	r3, #2
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	b25b      	sxtb	r3, r3
 80112ae:	210f      	movs	r1, #15
 80112b0:	400b      	ands	r3, r1
 80112b2:	b25b      	sxtb	r3, r3
 80112b4:	4313      	orrs	r3, r2
 80112b6:	b25a      	sxtb	r2, r3
 80112b8:	183b      	adds	r3, r7, r0
 80112ba:	701a      	strb	r2, [r3, #0]
 80112bc:	e022      	b.n	8011304 <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 80112be:	1dfb      	adds	r3, r7, #7
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	b25b      	sxtb	r3, r3
 80112c4:	3301      	adds	r3, #1
 80112c6:	da02      	bge.n	80112ce <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 80112c8:	1dfb      	adds	r3, r7, #7
 80112ca:	22ff      	movs	r2, #255	; 0xff
 80112cc:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 80112ce:	1dfb      	adds	r3, r7, #7
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	b25b      	sxtb	r3, r3
 80112d4:	2b0e      	cmp	r3, #14
 80112d6:	dd02      	ble.n	80112de <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 80112d8:	1dfb      	adds	r3, r7, #7
 80112da:	220e      	movs	r2, #14
 80112dc:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 80112de:	200f      	movs	r0, #15
 80112e0:	183b      	adds	r3, r7, r0
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	b25b      	sxtb	r3, r3
 80112e6:	220f      	movs	r2, #15
 80112e8:	4393      	bics	r3, r2
 80112ea:	b25a      	sxtb	r2, r3
 80112ec:	1dfb      	adds	r3, r7, #7
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	3301      	adds	r3, #1
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	b25b      	sxtb	r3, r3
 80112f6:	210f      	movs	r1, #15
 80112f8:	400b      	ands	r3, r1
 80112fa:	b25b      	sxtb	r3, r3
 80112fc:	4313      	orrs	r3, r2
 80112fe:	b25a      	sxtb	r2, r3
 8011300:	183b      	adds	r3, r7, r0
 8011302:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8011304:	230f      	movs	r3, #15
 8011306:	18fb      	adds	r3, r7, r3
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	0019      	movs	r1, r3
 801130c:	2009      	movs	r0, #9
 801130e:	f001 fd7f 	bl	8012e10 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8011312:	230e      	movs	r3, #14
 8011314:	18fb      	adds	r3, r7, r3
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	0019      	movs	r1, r3
 801131a:	204d      	movs	r0, #77	; 0x4d
 801131c:	f001 fd78 	bl	8012e10 <SX1276Write>
}
 8011320:	46c0      	nop			; (mov r8, r8)
 8011322:	46bd      	mov	sp, r7
 8011324:	b005      	add	sp, #20
 8011326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011328 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	0002      	movs	r2, r0
 8011330:	1dfb      	adds	r3, r7, #7
 8011332:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 8011334:	1dfb      	adds	r3, r7, #7
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b0e      	cmp	r3, #14
 801133a:	d901      	bls.n	8011340 <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 801133c:	2380      	movs	r3, #128	; 0x80
 801133e:	e000      	b.n	8011342 <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8011340:	2300      	movs	r3, #0
    }
}
 8011342:	0018      	movs	r0, r3
 8011344:	46bd      	mov	sp, r7
 8011346:	b002      	add	sp, #8
 8011348:	bd80      	pop	{r7, pc}

0801134a <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 801134a:	b580      	push	{r7, lr}
 801134c:	b082      	sub	sp, #8
 801134e:	af00      	add	r7, sp, #0
 8011350:	0002      	movs	r2, r0
 8011352:	1dfb      	adds	r3, r7, #7
 8011354:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 8011356:	1dfb      	adds	r3, r7, #7
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	2201      	movs	r2, #1
 801135c:	4053      	eors	r3, r2
 801135e:	b2db      	uxtb	r3, r3
 8011360:	2b00      	cmp	r3, #0
 8011362:	d01b      	beq.n	801139c <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 8011364:	2200      	movs	r2, #0
 8011366:	2102      	movs	r1, #2
 8011368:	2000      	movs	r0, #0
 801136a:	f007 fbab 	bl	8018ac4 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801136e:	2102      	movs	r1, #2
 8011370:	2000      	movs	r0, #0
 8011372:	f007 fdc7 	bl	8018f04 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 8011376:	2200      	movs	r2, #0
 8011378:	2102      	movs	r1, #2
 801137a:	2002      	movs	r0, #2
 801137c:	f007 fba2 	bl	8018ac4 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8011380:	2102      	movs	r1, #2
 8011382:	2002      	movs	r0, #2
 8011384:	f007 fdbe 	bl	8018f04 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 8011388:	2200      	movs	r2, #0
 801138a:	2104      	movs	r1, #4
 801138c:	2002      	movs	r0, #2
 801138e:	f007 fb99 	bl	8018ac4 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8011392:	2104      	movs	r1, #4
 8011394:	2002      	movs	r0, #2
 8011396:	f007 fdb5 	bl	8018f04 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 801139a:	e01a      	b.n	80113d2 <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 801139c:	220e      	movs	r2, #14
 801139e:	2102      	movs	r1, #2
 80113a0:	2000      	movs	r0, #0
 80113a2:	f007 fb8f 	bl	8018ac4 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 80113a6:	2102      	movs	r1, #2
 80113a8:	2000      	movs	r0, #0
 80113aa:	f007 fdab 	bl	8018f04 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 80113ae:	220e      	movs	r2, #14
 80113b0:	2102      	movs	r1, #2
 80113b2:	2002      	movs	r0, #2
 80113b4:	f007 fb86 	bl	8018ac4 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 80113b8:	2102      	movs	r1, #2
 80113ba:	2002      	movs	r0, #2
 80113bc:	f007 fda2 	bl	8018f04 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 80113c0:	220e      	movs	r2, #14
 80113c2:	2104      	movs	r1, #4
 80113c4:	2002      	movs	r0, #2
 80113c6:	f007 fb7d 	bl	8018ac4 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 80113ca:	2104      	movs	r1, #4
 80113cc:	2002      	movs	r0, #2
 80113ce:	f007 fd99 	bl	8018f04 <gpio_reset>
}
 80113d2:	46c0      	nop			; (mov r8, r8)
 80113d4:	46bd      	mov	sp, r7
 80113d6:	b002      	add	sp, #8
 80113d8:	bd80      	pop	{r7, pc}
	...

080113dc <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80113dc:	b590      	push	{r4, r7, lr}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	0002      	movs	r2, r0
 80113e4:	1dfb      	adds	r3, r7, #7
 80113e6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80113e8:	230f      	movs	r3, #15
 80113ea:	18fc      	adds	r4, r7, r3
 80113ec:	2009      	movs	r0, #9
 80113ee:	f001 fd23 	bl	8012e38 <SX1276Read>
 80113f2:	0003      	movs	r3, r0
 80113f4:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 80113f6:	1dfb      	adds	r3, r7, #7
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	2b03      	cmp	r3, #3
 80113fc:	d112      	bne.n	8011424 <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 80113fe:	230f      	movs	r3, #15
 8011400:	18fb      	adds	r3, r7, r3
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	b25b      	sxtb	r3, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	da04      	bge.n	8011414 <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801140a:	2102      	movs	r1, #2
 801140c:	2002      	movs	r0, #2
 801140e:	f007 fd61 	bl	8018ed4 <gpio_set>
 8011412:	e003      	b.n	801141c <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8011414:	2104      	movs	r1, #4
 8011416:	2002      	movs	r0, #2
 8011418:	f007 fd5c 	bl	8018ed4 <gpio_set>
      }
      SX1276.RxTx = 1;
 801141c:	4b07      	ldr	r3, [pc, #28]	; (801143c <SX1276SetAntSw+0x60>)
 801141e:	2201      	movs	r2, #1
 8011420:	701a      	strb	r2, [r3, #0]
      break;
 8011422:	e007      	b.n	8011434 <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 8011424:	4b05      	ldr	r3, [pc, #20]	; (801143c <SX1276SetAntSw+0x60>)
 8011426:	2200      	movs	r2, #0
 8011428:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801142a:	2102      	movs	r1, #2
 801142c:	2000      	movs	r0, #0
 801142e:	f007 fd51 	bl	8018ed4 <gpio_set>
     break;
 8011432:	46c0      	nop			; (mov r8, r8)
    }
}
 8011434:	46c0      	nop			; (mov r8, r8)
 8011436:	46bd      	mov	sp, r7
 8011438:	b005      	add	sp, #20
 801143a:	bd90      	pop	{r4, r7, pc}
 801143c:	20001110 	.word	0x20001110

08011440 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 8011448:	2301      	movs	r3, #1
}
 801144a:	0018      	movs	r0, r3
 801144c:	46bd      	mov	sp, r7
 801144e:	b002      	add	sp, #8
 8011450:	bd80      	pop	{r7, pc}
	...

08011454 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 801145c:	4b03      	ldr	r3, [pc, #12]	; (801146c <SX1276BoardInit+0x18>)
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	601a      	str	r2, [r3, #0]
}
 8011462:	46c0      	nop			; (mov r8, r8)
 8011464:	46bd      	mov	sp, r7
 8011466:	b002      	add	sp, #8
 8011468:	bd80      	pop	{r7, pc}
 801146a:	46c0      	nop			; (mov r8, r8)
 801146c:	20000cc0 	.word	0x20000cc0

08011470 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 8011470:	b590      	push	{r4, r7, lr}
 8011472:	b085      	sub	sp, #20
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 8011478:	4b33      	ldr	r3, [pc, #204]	; (8011548 <SX1276Init+0xd8>)
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801147e:	4a33      	ldr	r2, [pc, #204]	; (801154c <SX1276Init+0xdc>)
 8011480:	4b33      	ldr	r3, [pc, #204]	; (8011550 <SX1276Init+0xe0>)
 8011482:	0011      	movs	r1, r2
 8011484:	0018      	movs	r0, r3
 8011486:	f7ff fba1 	bl	8010bcc <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 801148a:	4a30      	ldr	r2, [pc, #192]	; (801154c <SX1276Init+0xdc>)
 801148c:	4b31      	ldr	r3, [pc, #196]	; (8011554 <SX1276Init+0xe4>)
 801148e:	0011      	movs	r1, r2
 8011490:	0018      	movs	r0, r3
 8011492:	f7ff fb9b 	bl	8010bcc <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8011496:	4a2d      	ldr	r2, [pc, #180]	; (801154c <SX1276Init+0xdc>)
 8011498:	4b2f      	ldr	r3, [pc, #188]	; (8011558 <SX1276Init+0xe8>)
 801149a:	0011      	movs	r1, r2
 801149c:	0018      	movs	r0, r3
 801149e:	f7ff fb95 	bl	8010bcc <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 80114a2:	4b2e      	ldr	r3, [pc, #184]	; (801155c <SX1276Init+0xec>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2001      	movs	r0, #1
 80114aa:	4798      	blx	r3

    SX1276Reset( );
 80114ac:	f001 fbee 	bl	8012c8c <SX1276Reset>
    RxChainCalibration( );
 80114b0:	f000 f936 	bl	8011720 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80114b4:	2000      	movs	r0, #0
 80114b6:	f001 fc03 	bl	8012cc0 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 80114ba:	4b28      	ldr	r3, [pc, #160]	; (801155c <SX1276Init+0xec>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	689b      	ldr	r3, [r3, #8]
 80114c0:	4a27      	ldr	r2, [pc, #156]	; (8011560 <SX1276Init+0xf0>)
 80114c2:	0010      	movs	r0, r2
 80114c4:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80114c6:	230f      	movs	r3, #15
 80114c8:	18fb      	adds	r3, r7, r3
 80114ca:	2200      	movs	r2, #0
 80114cc:	701a      	strb	r2, [r3, #0]
 80114ce:	e025      	b.n	801151c <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80114d0:	240f      	movs	r4, #15
 80114d2:	193b      	adds	r3, r7, r4
 80114d4:	781a      	ldrb	r2, [r3, #0]
 80114d6:	4923      	ldr	r1, [pc, #140]	; (8011564 <SX1276Init+0xf4>)
 80114d8:	0013      	movs	r3, r2
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	189b      	adds	r3, r3, r2
 80114de:	5c5b      	ldrb	r3, [r3, r1]
 80114e0:	0018      	movs	r0, r3
 80114e2:	f001 fc3d 	bl	8012d60 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80114e6:	193b      	adds	r3, r7, r4
 80114e8:	781a      	ldrb	r2, [r3, #0]
 80114ea:	491e      	ldr	r1, [pc, #120]	; (8011564 <SX1276Init+0xf4>)
 80114ec:	0013      	movs	r3, r2
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	189b      	adds	r3, r3, r2
 80114f2:	18cb      	adds	r3, r1, r3
 80114f4:	3301      	adds	r3, #1
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	b298      	uxth	r0, r3
 80114fa:	193b      	adds	r3, r7, r4
 80114fc:	781a      	ldrb	r2, [r3, #0]
 80114fe:	4919      	ldr	r1, [pc, #100]	; (8011564 <SX1276Init+0xf4>)
 8011500:	0013      	movs	r3, r2
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	189b      	adds	r3, r3, r2
 8011506:	18cb      	adds	r3, r1, r3
 8011508:	3302      	adds	r3, #2
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	0019      	movs	r1, r3
 801150e:	f001 fc7f 	bl	8012e10 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8011512:	193b      	adds	r3, r7, r4
 8011514:	781a      	ldrb	r2, [r3, #0]
 8011516:	193b      	adds	r3, r7, r4
 8011518:	3201      	adds	r2, #1
 801151a:	701a      	strb	r2, [r3, #0]
 801151c:	230f      	movs	r3, #15
 801151e:	18fb      	adds	r3, r7, r3
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	2b0f      	cmp	r3, #15
 8011524:	d9d4      	bls.n	80114d0 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8011526:	2000      	movs	r0, #0
 8011528:	f001 fc1a 	bl	8012d60 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 801152c:	4b0e      	ldr	r3, [pc, #56]	; (8011568 <SX1276Init+0xf8>)
 801152e:	2200      	movs	r2, #0
 8011530:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8011532:	4b0a      	ldr	r3, [pc, #40]	; (801155c <SX1276Init+0xec>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	4798      	blx	r3
 801153a:	0003      	movs	r3, r0
 801153c:	3335      	adds	r3, #53	; 0x35
}
 801153e:	0018      	movs	r0, r3
 8011540:	46bd      	mov	sp, r7
 8011542:	b005      	add	sp, #20
 8011544:	bd90      	pop	{r4, r7, pc}
 8011546:	46c0      	nop			; (mov r8, r8)
 8011548:	20000bbc 	.word	0x20000bbc
 801154c:	080130b1 	.word	0x080130b1
 8011550:	200010e0 	.word	0x200010e0
 8011554:	20001178 	.word	0x20001178
 8011558:	200010f8 	.word	0x200010f8
 801155c:	20000cc0 	.word	0x20000cc0
 8011560:	20000040 	.word	0x20000040
 8011564:	0801bd08 	.word	0x0801bd08
 8011568:	20001110 	.word	0x20001110

0801156c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 8011570:	4b02      	ldr	r3, [pc, #8]	; (801157c <SX1276GetStatus+0x10>)
 8011572:	791b      	ldrb	r3, [r3, #4]
}
 8011574:	0018      	movs	r0, r3
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	46c0      	nop			; (mov r8, r8)
 801157c:	20001110 	.word	0x20001110

08011580 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8011580:	b590      	push	{r4, r7, lr}
 8011582:	b087      	sub	sp, #28
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8011588:	4b1d      	ldr	r3, [pc, #116]	; (8011600 <SX1276SetChannel+0x80>)
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	491c      	ldr	r1, [pc, #112]	; (8011604 <SX1276SetChannel+0x84>)
 8011592:	0018      	movs	r0, r3
 8011594:	f7ee fdc0 	bl	8000118 <__udivsi3>
 8011598:	0003      	movs	r3, r0
 801159a:	617b      	str	r3, [r7, #20]
 801159c:	6979      	ldr	r1, [r7, #20]
 801159e:	000b      	movs	r3, r1
 80115a0:	015b      	lsls	r3, r3, #5
 80115a2:	1a5b      	subs	r3, r3, r1
 80115a4:	019a      	lsls	r2, r3, #6
 80115a6:	1ad2      	subs	r2, r2, r3
 80115a8:	00d2      	lsls	r2, r2, #3
 80115aa:	1853      	adds	r3, r2, r1
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	1ad3      	subs	r3, r2, r3
 80115b0:	613b      	str	r3, [r7, #16]
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	021c      	lsls	r4, r3, #8
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	021b      	lsls	r3, r3, #8
 80115ba:	4a13      	ldr	r2, [pc, #76]	; (8011608 <SX1276SetChannel+0x88>)
 80115bc:	4694      	mov	ip, r2
 80115be:	4463      	add	r3, ip
 80115c0:	4910      	ldr	r1, [pc, #64]	; (8011604 <SX1276SetChannel+0x84>)
 80115c2:	0018      	movs	r0, r3
 80115c4:	f7ee fda8 	bl	8000118 <__udivsi3>
 80115c8:	0003      	movs	r3, r0
 80115ca:	18e3      	adds	r3, r4, r3
 80115cc:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	0c1b      	lsrs	r3, r3, #16
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	0019      	movs	r1, r3
 80115d6:	2006      	movs	r0, #6
 80115d8:	f001 fc1a 	bl	8012e10 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	0a1b      	lsrs	r3, r3, #8
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	0019      	movs	r1, r3
 80115e4:	2007      	movs	r0, #7
 80115e6:	f001 fc13 	bl	8012e10 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	0019      	movs	r1, r3
 80115f0:	2008      	movs	r0, #8
 80115f2:	f001 fc0d 	bl	8012e10 <SX1276Write>
}
 80115f6:	46c0      	nop			; (mov r8, r8)
 80115f8:	46bd      	mov	sp, r7
 80115fa:	b007      	add	sp, #28
 80115fc:	bd90      	pop	{r4, r7, pc}
 80115fe:	46c0      	nop			; (mov r8, r8)
 8011600:	20001110 	.word	0x20001110
 8011604:	00003d09 	.word	0x00003d09
 8011608:	00001e84 	.word	0x00001e84

0801160c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801160c:	b5b0      	push	{r4, r5, r7, lr}
 801160e:	b086      	sub	sp, #24
 8011610:	af00      	add	r7, sp, #0
 8011612:	60b9      	str	r1, [r7, #8]
 8011614:	0011      	movs	r1, r2
 8011616:	607b      	str	r3, [r7, #4]
 8011618:	240f      	movs	r4, #15
 801161a:	193b      	adds	r3, r7, r4
 801161c:	1c02      	adds	r2, r0, #0
 801161e:	701a      	strb	r2, [r3, #0]
 8011620:	230c      	movs	r3, #12
 8011622:	18fb      	adds	r3, r7, r3
 8011624:	1c0a      	adds	r2, r1, #0
 8011626:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 8011628:	2317      	movs	r3, #23
 801162a:	18fb      	adds	r3, r7, r3
 801162c:	2201      	movs	r2, #1
 801162e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8011630:	2314      	movs	r3, #20
 8011632:	18fb      	adds	r3, r7, r3
 8011634:	2200      	movs	r2, #0
 8011636:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8011638:	2300      	movs	r3, #0
 801163a:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 801163c:	193b      	adds	r3, r7, r4
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	0018      	movs	r0, r3
 8011642:	f001 fb8d 	bl	8012d60 <SX1276SetModem>

    SX1276SetChannel( freq );
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	0018      	movs	r0, r3
 801164a:	f7ff ff99 	bl	8011580 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801164e:	2005      	movs	r0, #5
 8011650:	f001 fb36 	bl	8012cc0 <SX1276SetOpMode>

    DelayMs( 1 );
 8011654:	2001      	movs	r0, #1
 8011656:	f007 fd99 	bl	801918c <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 801165a:	f7ff fb91 	bl	8010d80 <TimerGetCurrentTime>
 801165e:	0003      	movs	r3, r0
 8011660:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011662:	e017      	b.n	8011694 <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 8011664:	2514      	movs	r5, #20
 8011666:	197c      	adds	r4, r7, r5
 8011668:	230f      	movs	r3, #15
 801166a:	18fb      	adds	r3, r7, r3
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	0018      	movs	r0, r3
 8011670:	f001 fac0 	bl	8012bf4 <SX1276ReadRssi>
 8011674:	0003      	movs	r3, r0
 8011676:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8011678:	197a      	adds	r2, r7, r5
 801167a:	230c      	movs	r3, #12
 801167c:	18fb      	adds	r3, r7, r3
 801167e:	2100      	movs	r1, #0
 8011680:	5e52      	ldrsh	r2, [r2, r1]
 8011682:	2100      	movs	r1, #0
 8011684:	5e5b      	ldrsh	r3, [r3, r1]
 8011686:	429a      	cmp	r2, r3
 8011688:	dd04      	ble.n	8011694 <SX1276IsChannelFree+0x88>
        {
            status = false;
 801168a:	2317      	movs	r3, #23
 801168c:	18fb      	adds	r3, r7, r3
 801168e:	2200      	movs	r2, #0
 8011690:	701a      	strb	r2, [r3, #0]
            break;
 8011692:	e007      	b.n	80116a4 <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	0018      	movs	r0, r3
 8011698:	f7ff fb7b 	bl	8010d92 <TimerGetElapsedTime>
 801169c:	0002      	movs	r2, r0
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d8df      	bhi.n	8011664 <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 80116a4:	f000 ffde 	bl	8012664 <SX1276SetSleep>
    return status;
 80116a8:	2317      	movs	r3, #23
 80116aa:	18fb      	adds	r3, r7, r3
 80116ac:	781b      	ldrb	r3, [r3, #0]
}
 80116ae:	0018      	movs	r0, r3
 80116b0:	46bd      	mov	sp, r7
 80116b2:	b006      	add	sp, #24
 80116b4:	bdb0      	pop	{r4, r5, r7, pc}

080116b6 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80116b6:	b580      	push	{r7, lr}
 80116b8:	b082      	sub	sp, #8
 80116ba:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 80116bc:	2300      	movs	r3, #0
 80116be:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80116c0:	2001      	movs	r0, #1
 80116c2:	f001 fb4d 	bl	8012d60 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80116c6:	21ff      	movs	r1, #255	; 0xff
 80116c8:	2011      	movs	r0, #17
 80116ca:	f001 fba1 	bl	8012e10 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80116ce:	2005      	movs	r0, #5
 80116d0:	f001 faf6 	bl	8012cc0 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80116d4:	1dfb      	adds	r3, r7, #7
 80116d6:	2200      	movs	r2, #0
 80116d8:	701a      	strb	r2, [r3, #0]
 80116da:	e015      	b.n	8011708 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80116dc:	2001      	movs	r0, #1
 80116de:	f007 fd55 	bl	801918c <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80116e2:	202c      	movs	r0, #44	; 0x2c
 80116e4:	f001 fba8 	bl	8012e38 <SX1276Read>
 80116e8:	0003      	movs	r3, r0
 80116ea:	001a      	movs	r2, r3
 80116ec:	2301      	movs	r3, #1
 80116ee:	401a      	ands	r2, r3
 80116f0:	1dfb      	adds	r3, r7, #7
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	409a      	lsls	r2, r3
 80116f6:	0013      	movs	r3, r2
 80116f8:	683a      	ldr	r2, [r7, #0]
 80116fa:	4313      	orrs	r3, r2
 80116fc:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80116fe:	1dfb      	adds	r3, r7, #7
 8011700:	781a      	ldrb	r2, [r3, #0]
 8011702:	1dfb      	adds	r3, r7, #7
 8011704:	3201      	adds	r2, #1
 8011706:	701a      	strb	r2, [r3, #0]
 8011708:	1dfb      	adds	r3, r7, #7
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2b1f      	cmp	r3, #31
 801170e:	d9e5      	bls.n	80116dc <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8011710:	f000 ffa8 	bl	8012664 <SX1276SetSleep>

    return rnd;
 8011714:	683b      	ldr	r3, [r7, #0]
}
 8011716:	0018      	movs	r0, r3
 8011718:	46bd      	mov	sp, r7
 801171a:	b002      	add	sp, #8
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8011720:	b590      	push	{r4, r7, lr}
 8011722:	b087      	sub	sp, #28
 8011724:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8011726:	2317      	movs	r3, #23
 8011728:	18fc      	adds	r4, r7, r3
 801172a:	2009      	movs	r0, #9
 801172c:	f001 fb84 	bl	8012e38 <SX1276Read>
 8011730:	0003      	movs	r3, r0
 8011732:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8011734:	2006      	movs	r0, #6
 8011736:	f001 fb7f 	bl	8012e38 <SX1276Read>
 801173a:	0003      	movs	r3, r0
 801173c:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801173e:	2007      	movs	r0, #7
 8011740:	f001 fb7a 	bl	8012e38 <SX1276Read>
 8011744:	0003      	movs	r3, r0
 8011746:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8011748:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801174a:	2008      	movs	r0, #8
 801174c:	f001 fb74 	bl	8012e38 <SX1276Read>
 8011750:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8011752:	4323      	orrs	r3, r4
 8011754:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	0a1b      	lsrs	r3, r3, #8
 801175a:	60fb      	str	r3, [r7, #12]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	021b      	lsls	r3, r3, #8
 8011760:	693a      	ldr	r2, [r7, #16]
 8011762:	1ad3      	subs	r3, r2, r3
 8011764:	60bb      	str	r3, [r7, #8]
 8011766:	68f9      	ldr	r1, [r7, #12]
 8011768:	000b      	movs	r3, r1
 801176a:	015b      	lsls	r3, r3, #5
 801176c:	1a5b      	subs	r3, r3, r1
 801176e:	019a      	lsls	r2, r3, #6
 8011770:	1ad2      	subs	r2, r2, r3
 8011772:	00d2      	lsls	r2, r2, #3
 8011774:	1850      	adds	r0, r2, r1
 8011776:	68b9      	ldr	r1, [r7, #8]
 8011778:	000b      	movs	r3, r1
 801177a:	015b      	lsls	r3, r3, #5
 801177c:	1a5b      	subs	r3, r3, r1
 801177e:	019a      	lsls	r2, r3, #6
 8011780:	1ad2      	subs	r2, r2, r3
 8011782:	00d2      	lsls	r2, r2, #3
 8011784:	1853      	adds	r3, r2, r1
 8011786:	3380      	adds	r3, #128	; 0x80
 8011788:	0a1b      	lsrs	r3, r3, #8
 801178a:	18c3      	adds	r3, r0, r3
 801178c:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801178e:	2100      	movs	r1, #0
 8011790:	2009      	movs	r0, #9
 8011792:	f001 fb3d 	bl	8012e10 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8011796:	203b      	movs	r0, #59	; 0x3b
 8011798:	f001 fb4e 	bl	8012e38 <SX1276Read>
 801179c:	0003      	movs	r3, r0
 801179e:	001a      	movs	r2, r3
 80117a0:	2340      	movs	r3, #64	; 0x40
 80117a2:	4313      	orrs	r3, r2
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	0019      	movs	r1, r3
 80117a8:	203b      	movs	r0, #59	; 0x3b
 80117aa:	f001 fb31 	bl	8012e10 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80117ae:	46c0      	nop			; (mov r8, r8)
 80117b0:	203b      	movs	r0, #59	; 0x3b
 80117b2:	f001 fb41 	bl	8012e38 <SX1276Read>
 80117b6:	0003      	movs	r3, r0
 80117b8:	001a      	movs	r2, r3
 80117ba:	2320      	movs	r3, #32
 80117bc:	4013      	ands	r3, r2
 80117be:	2b20      	cmp	r3, #32
 80117c0:	d0f6      	beq.n	80117b0 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80117c2:	4b14      	ldr	r3, [pc, #80]	; (8011814 <RxChainCalibration+0xf4>)
 80117c4:	0018      	movs	r0, r3
 80117c6:	f7ff fedb 	bl	8011580 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80117ca:	203b      	movs	r0, #59	; 0x3b
 80117cc:	f001 fb34 	bl	8012e38 <SX1276Read>
 80117d0:	0003      	movs	r3, r0
 80117d2:	001a      	movs	r2, r3
 80117d4:	2340      	movs	r3, #64	; 0x40
 80117d6:	4313      	orrs	r3, r2
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	0019      	movs	r1, r3
 80117dc:	203b      	movs	r0, #59	; 0x3b
 80117de:	f001 fb17 	bl	8012e10 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80117e2:	46c0      	nop			; (mov r8, r8)
 80117e4:	203b      	movs	r0, #59	; 0x3b
 80117e6:	f001 fb27 	bl	8012e38 <SX1276Read>
 80117ea:	0003      	movs	r3, r0
 80117ec:	001a      	movs	r2, r3
 80117ee:	2320      	movs	r3, #32
 80117f0:	4013      	ands	r3, r2
 80117f2:	2b20      	cmp	r3, #32
 80117f4:	d0f6      	beq.n	80117e4 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80117f6:	2317      	movs	r3, #23
 80117f8:	18fb      	adds	r3, r7, r3
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	0019      	movs	r1, r3
 80117fe:	2009      	movs	r0, #9
 8011800:	f001 fb06 	bl	8012e10 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	0018      	movs	r0, r3
 8011808:	f7ff feba 	bl	8011580 <SX1276SetChannel>
}
 801180c:	46c0      	nop			; (mov r8, r8)
 801180e:	46bd      	mov	sp, r7
 8011810:	b007      	add	sp, #28
 8011812:	bd90      	pop	{r4, r7, pc}
 8011814:	33bca100 	.word	0x33bca100

08011818 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8011820:	230f      	movs	r3, #15
 8011822:	18fb      	adds	r3, r7, r3
 8011824:	2200      	movs	r2, #0
 8011826:	701a      	strb	r2, [r3, #0]
 8011828:	e021      	b.n	801186e <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 801182a:	230f      	movs	r3, #15
 801182c:	18fb      	adds	r3, r7, r3
 801182e:	781a      	ldrb	r2, [r3, #0]
 8011830:	4b14      	ldr	r3, [pc, #80]	; (8011884 <GetFskBandwidthRegValue+0x6c>)
 8011832:	00d2      	lsls	r2, r2, #3
 8011834:	58d3      	ldr	r3, [r2, r3]
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	429a      	cmp	r2, r3
 801183a:	d312      	bcc.n	8011862 <GetFskBandwidthRegValue+0x4a>
 801183c:	230f      	movs	r3, #15
 801183e:	18fb      	adds	r3, r7, r3
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	4b0f      	ldr	r3, [pc, #60]	; (8011884 <GetFskBandwidthRegValue+0x6c>)
 8011846:	00d2      	lsls	r2, r2, #3
 8011848:	58d3      	ldr	r3, [r2, r3]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d208      	bcs.n	8011862 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8011850:	230f      	movs	r3, #15
 8011852:	18fb      	adds	r3, r7, r3
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	4a0b      	ldr	r2, [pc, #44]	; (8011884 <GetFskBandwidthRegValue+0x6c>)
 8011858:	00db      	lsls	r3, r3, #3
 801185a:	18d3      	adds	r3, r2, r3
 801185c:	3304      	adds	r3, #4
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	e00b      	b.n	801187a <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8011862:	210f      	movs	r1, #15
 8011864:	187b      	adds	r3, r7, r1
 8011866:	781a      	ldrb	r2, [r3, #0]
 8011868:	187b      	adds	r3, r7, r1
 801186a:	3201      	adds	r2, #1
 801186c:	701a      	strb	r2, [r3, #0]
 801186e:	230f      	movs	r3, #15
 8011870:	18fb      	adds	r3, r7, r3
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	2b14      	cmp	r3, #20
 8011876:	d9d8      	bls.n	801182a <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8011878:	e7fe      	b.n	8011878 <GetFskBandwidthRegValue+0x60>
}
 801187a:	0018      	movs	r0, r3
 801187c:	46bd      	mov	sp, r7
 801187e:	b004      	add	sp, #16
 8011880:	bd80      	pop	{r7, pc}
 8011882:	46c0      	nop			; (mov r8, r8)
 8011884:	0801bd38 	.word	0x0801bd38

08011888 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8011888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801188a:	46c6      	mov	lr, r8
 801188c:	b500      	push	{lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	60b9      	str	r1, [r7, #8]
 8011894:	607a      	str	r2, [r7, #4]
 8011896:	0019      	movs	r1, r3
 8011898:	240f      	movs	r4, #15
 801189a:	193b      	adds	r3, r7, r4
 801189c:	1c02      	adds	r2, r0, #0
 801189e:	701a      	strb	r2, [r3, #0]
 80118a0:	230e      	movs	r3, #14
 80118a2:	18fb      	adds	r3, r7, r3
 80118a4:	1c0a      	adds	r2, r1, #0
 80118a6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 80118a8:	193b      	adds	r3, r7, r4
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	0018      	movs	r0, r3
 80118ae:	f001 fa57 	bl	8012d60 <SX1276SetModem>

    switch( modem )
 80118b2:	193b      	adds	r3, r7, r4
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d003      	beq.n	80118c2 <SX1276SetRxConfig+0x3a>
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d100      	bne.n	80118c0 <SX1276SetRxConfig+0x38>
 80118be:	e100      	b.n	8011ac2 <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80118c0:	e274      	b.n	8011dac <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80118c2:	4bc0      	ldr	r3, [pc, #768]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80118c8:	4bbe      	ldr	r3, [pc, #760]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80118ce:	4bbd      	ldr	r3, [pc, #756]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80118d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118d2:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80118d4:	4bbb      	ldr	r3, [pc, #748]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80118d6:	222c      	movs	r2, #44	; 0x2c
 80118d8:	2108      	movs	r1, #8
 80118da:	468c      	mov	ip, r1
 80118dc:	44bc      	add	ip, r7
 80118de:	4462      	add	r2, ip
 80118e0:	2122      	movs	r1, #34	; 0x22
 80118e2:	7812      	ldrb	r2, [r2, #0]
 80118e4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80118e6:	4bb7      	ldr	r3, [pc, #732]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80118e8:	2130      	movs	r1, #48	; 0x30
 80118ea:	2008      	movs	r0, #8
 80118ec:	183a      	adds	r2, r7, r0
 80118ee:	1852      	adds	r2, r2, r1
 80118f0:	2123      	movs	r1, #35	; 0x23
 80118f2:	7812      	ldrb	r2, [r2, #0]
 80118f4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80118f6:	4bb3      	ldr	r3, [pc, #716]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80118f8:	2134      	movs	r1, #52	; 0x34
 80118fa:	183a      	adds	r2, r7, r0
 80118fc:	1852      	adds	r2, r2, r1
 80118fe:	2124      	movs	r1, #36	; 0x24
 8011900:	7812      	ldrb	r2, [r2, #0]
 8011902:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8011904:	4baf      	ldr	r3, [pc, #700]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011906:	2220      	movs	r2, #32
 8011908:	2120      	movs	r1, #32
 801190a:	468c      	mov	ip, r1
 801190c:	2108      	movs	r1, #8
 801190e:	4688      	mov	r8, r1
 8011910:	44b8      	add	r8, r7
 8011912:	44c4      	add	ip, r8
 8011914:	4462      	add	r2, ip
 8011916:	2125      	movs	r1, #37	; 0x25
 8011918:	7812      	ldrb	r2, [r2, #0]
 801191a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 801191c:	4ba9      	ldr	r3, [pc, #676]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 801191e:	2224      	movs	r2, #36	; 0x24
 8011920:	2120      	movs	r1, #32
 8011922:	468c      	mov	ip, r1
 8011924:	2108      	movs	r1, #8
 8011926:	4688      	mov	r8, r1
 8011928:	44b8      	add	r8, r7
 801192a:	44c4      	add	ip, r8
 801192c:	4462      	add	r2, ip
 801192e:	2126      	movs	r1, #38	; 0x26
 8011930:	7812      	ldrb	r2, [r2, #0]
 8011932:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8011934:	4ba3      	ldr	r3, [pc, #652]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011936:	2624      	movs	r6, #36	; 0x24
 8011938:	183a      	adds	r2, r7, r0
 801193a:	1992      	adds	r2, r2, r6
 801193c:	8812      	ldrh	r2, [r2, #0]
 801193e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8011940:	2328      	movs	r3, #40	; 0x28
 8011942:	2208      	movs	r2, #8
 8011944:	4694      	mov	ip, r2
 8011946:	44bc      	add	ip, r7
 8011948:	4463      	add	r3, ip
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	0018      	movs	r0, r3
 801194e:	f7f0 fe1b 	bl	8002588 <__aeabi_i2d>
 8011952:	0004      	movs	r4, r0
 8011954:	000d      	movs	r5, r1
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7f0 fe50 	bl	80025fc <__aeabi_ui2d>
 801195c:	0002      	movs	r2, r0
 801195e:	000b      	movs	r3, r1
 8011960:	2000      	movs	r0, #0
 8011962:	4999      	ldr	r1, [pc, #612]	; (8011bc8 <SX1276SetRxConfig+0x340>)
 8011964:	f7ef fc16 	bl	8001194 <__aeabi_ddiv>
 8011968:	0002      	movs	r2, r0
 801196a:	000b      	movs	r3, r1
 801196c:	0010      	movs	r0, r2
 801196e:	0019      	movs	r1, r3
 8011970:	2200      	movs	r2, #0
 8011972:	4b96      	ldr	r3, [pc, #600]	; (8011bcc <SX1276SetRxConfig+0x344>)
 8011974:	f7f0 f818 	bl	80019a8 <__aeabi_dmul>
 8011978:	0002      	movs	r2, r0
 801197a:	000b      	movs	r3, r1
 801197c:	0020      	movs	r0, r4
 801197e:	0029      	movs	r1, r5
 8011980:	f7f0 f812 	bl	80019a8 <__aeabi_dmul>
 8011984:	0003      	movs	r3, r0
 8011986:	000c      	movs	r4, r1
 8011988:	0018      	movs	r0, r3
 801198a:	0021      	movs	r1, r4
 801198c:	2200      	movs	r2, #0
 801198e:	4b90      	ldr	r3, [pc, #576]	; (8011bd0 <SX1276SetRxConfig+0x348>)
 8011990:	f7f0 f80a 	bl	80019a8 <__aeabi_dmul>
 8011994:	0003      	movs	r3, r0
 8011996:	000c      	movs	r4, r1
 8011998:	0018      	movs	r0, r3
 801199a:	0021      	movs	r1, r4
 801199c:	f7ee fdde 	bl	800055c <__aeabi_d2uiz>
 80119a0:	0002      	movs	r2, r0
 80119a2:	4b88      	ldr	r3, [pc, #544]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 80119a4:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7f0 fe28 	bl	80025fc <__aeabi_ui2d>
 80119ac:	0003      	movs	r3, r0
 80119ae:	000c      	movs	r4, r1
 80119b0:	001a      	movs	r2, r3
 80119b2:	0023      	movs	r3, r4
 80119b4:	2000      	movs	r0, #0
 80119b6:	4987      	ldr	r1, [pc, #540]	; (8011bd4 <SX1276SetRxConfig+0x34c>)
 80119b8:	f7ef fbec 	bl	8001194 <__aeabi_ddiv>
 80119bc:	0003      	movs	r3, r0
 80119be:	000c      	movs	r4, r1
 80119c0:	0018      	movs	r0, r3
 80119c2:	0021      	movs	r1, r4
 80119c4:	f7ee fdca 	bl	800055c <__aeabi_d2uiz>
 80119c8:	0003      	movs	r3, r0
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	0a1b      	lsrs	r3, r3, #8
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	0019      	movs	r1, r3
 80119d6:	2002      	movs	r0, #2
 80119d8:	f001 fa1a 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	0019      	movs	r1, r3
 80119e2:	2003      	movs	r0, #3
 80119e4:	f001 fa14 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	0018      	movs	r0, r3
 80119ec:	f7ff ff14 	bl	8011818 <GetFskBandwidthRegValue>
 80119f0:	0003      	movs	r3, r0
 80119f2:	0019      	movs	r1, r3
 80119f4:	2012      	movs	r0, #18
 80119f6:	f001 fa0b 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80119fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fc:	0018      	movs	r0, r3
 80119fe:	f7ff ff0b 	bl	8011818 <GetFskBandwidthRegValue>
 8011a02:	0003      	movs	r3, r0
 8011a04:	0019      	movs	r1, r3
 8011a06:	2013      	movs	r0, #19
 8011a08:	f001 fa02 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8011a0c:	2008      	movs	r0, #8
 8011a0e:	0004      	movs	r4, r0
 8011a10:	183b      	adds	r3, r7, r0
 8011a12:	199b      	adds	r3, r3, r6
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	0a1b      	lsrs	r3, r3, #8
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	0019      	movs	r1, r3
 8011a1e:	2025      	movs	r0, #37	; 0x25
 8011a20:	f001 f9f6 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8011a24:	193b      	adds	r3, r7, r4
 8011a26:	199b      	adds	r3, r3, r6
 8011a28:	881b      	ldrh	r3, [r3, #0]
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	0019      	movs	r1, r3
 8011a2e:	2026      	movs	r0, #38	; 0x26
 8011a30:	f001 f9ee 	bl	8012e10 <SX1276Write>
            if( fixLen == 1 )
 8011a34:	222c      	movs	r2, #44	; 0x2c
 8011a36:	193b      	adds	r3, r7, r4
 8011a38:	189b      	adds	r3, r3, r2
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00a      	beq.n	8011a56 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8011a40:	2330      	movs	r3, #48	; 0x30
 8011a42:	2208      	movs	r2, #8
 8011a44:	4694      	mov	ip, r2
 8011a46:	44bc      	add	ip, r7
 8011a48:	4463      	add	r3, ip
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	0019      	movs	r1, r3
 8011a4e:	2032      	movs	r0, #50	; 0x32
 8011a50:	f001 f9de 	bl	8012e10 <SX1276Write>
 8011a54:	e003      	b.n	8011a5e <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8011a56:	21ff      	movs	r1, #255	; 0xff
 8011a58:	2032      	movs	r0, #50	; 0x32
 8011a5a:	f001 f9d9 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8011a5e:	2030      	movs	r0, #48	; 0x30
 8011a60:	f001 f9ea 	bl	8012e38 <SX1276Read>
 8011a64:	0003      	movs	r3, r0
 8011a66:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8011a68:	226f      	movs	r2, #111	; 0x6f
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8011a6e:	232c      	movs	r3, #44	; 0x2c
 8011a70:	2108      	movs	r1, #8
 8011a72:	468c      	mov	ip, r1
 8011a74:	44bc      	add	ip, r7
 8011a76:	4463      	add	r3, ip
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d001      	beq.n	8011a82 <SX1276SetRxConfig+0x1fa>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	e001      	b.n	8011a86 <SX1276SetRxConfig+0x1fe>
 8011a82:	2380      	movs	r3, #128	; 0x80
 8011a84:	425b      	negs	r3, r3
 8011a86:	4313      	orrs	r3, r2
 8011a88:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8011a8a:	2334      	movs	r3, #52	; 0x34
 8011a8c:	2108      	movs	r1, #8
 8011a8e:	468c      	mov	ip, r1
 8011a90:	44bc      	add	ip, r7
 8011a92:	4463      	add	r3, ip
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8011a98:	b25b      	sxtb	r3, r3
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	0019      	movs	r1, r3
 8011aa2:	2030      	movs	r0, #48	; 0x30
 8011aa4:	f001 f9b4 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8011aa8:	2031      	movs	r0, #49	; 0x31
 8011aaa:	f001 f9c5 	bl	8012e38 <SX1276Read>
 8011aae:	0003      	movs	r3, r0
 8011ab0:	001a      	movs	r2, r3
 8011ab2:	2340      	movs	r3, #64	; 0x40
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	0019      	movs	r1, r3
 8011aba:	2031      	movs	r0, #49	; 0x31
 8011abc:	f001 f9a8 	bl	8012e10 <SX1276Write>
        break;
 8011ac0:	e174      	b.n	8011dac <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	d900      	bls.n	8011aca <SX1276SetRxConfig+0x242>
                while( 1 );
 8011ac8:	e7fe      	b.n	8011ac8 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	3307      	adds	r3, #7
 8011ace:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8011ad0:	4b3c      	ldr	r3, [pc, #240]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011ad2:	68ba      	ldr	r2, [r7, #8]
 8011ad4:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8011ad6:	4b3b      	ldr	r3, [pc, #236]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8011adc:	4b39      	ldr	r3, [pc, #228]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011ade:	220e      	movs	r2, #14
 8011ae0:	18ba      	adds	r2, r7, r2
 8011ae2:	214d      	movs	r1, #77	; 0x4d
 8011ae4:	7812      	ldrb	r2, [r2, #0]
 8011ae6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8011ae8:	4b36      	ldr	r3, [pc, #216]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011aea:	2224      	movs	r2, #36	; 0x24
 8011aec:	2108      	movs	r1, #8
 8011aee:	468c      	mov	ip, r1
 8011af0:	44bc      	add	ip, r7
 8011af2:	4462      	add	r2, ip
 8011af4:	214e      	movs	r1, #78	; 0x4e
 8011af6:	8812      	ldrh	r2, [r2, #0]
 8011af8:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8011afa:	4b32      	ldr	r3, [pc, #200]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011afc:	222c      	movs	r2, #44	; 0x2c
 8011afe:	2108      	movs	r1, #8
 8011b00:	468c      	mov	ip, r1
 8011b02:	44bc      	add	ip, r7
 8011b04:	4462      	add	r2, ip
 8011b06:	2150      	movs	r1, #80	; 0x50
 8011b08:	7812      	ldrb	r2, [r2, #0]
 8011b0a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8011b0c:	4b2d      	ldr	r3, [pc, #180]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011b0e:	2230      	movs	r2, #48	; 0x30
 8011b10:	2108      	movs	r1, #8
 8011b12:	468c      	mov	ip, r1
 8011b14:	44bc      	add	ip, r7
 8011b16:	4462      	add	r2, ip
 8011b18:	2151      	movs	r1, #81	; 0x51
 8011b1a:	7812      	ldrb	r2, [r2, #0]
 8011b1c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8011b1e:	4b29      	ldr	r3, [pc, #164]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011b20:	2234      	movs	r2, #52	; 0x34
 8011b22:	2108      	movs	r1, #8
 8011b24:	468c      	mov	ip, r1
 8011b26:	44bc      	add	ip, r7
 8011b28:	4462      	add	r2, ip
 8011b2a:	2152      	movs	r1, #82	; 0x52
 8011b2c:	7812      	ldrb	r2, [r2, #0]
 8011b2e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8011b30:	4b24      	ldr	r3, [pc, #144]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011b32:	2238      	movs	r2, #56	; 0x38
 8011b34:	2108      	movs	r1, #8
 8011b36:	468c      	mov	ip, r1
 8011b38:	44bc      	add	ip, r7
 8011b3a:	4462      	add	r2, ip
 8011b3c:	2153      	movs	r1, #83	; 0x53
 8011b3e:	7812      	ldrb	r2, [r2, #0]
 8011b40:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8011b42:	4b20      	ldr	r3, [pc, #128]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011b44:	223c      	movs	r2, #60	; 0x3c
 8011b46:	2108      	movs	r1, #8
 8011b48:	468c      	mov	ip, r1
 8011b4a:	44bc      	add	ip, r7
 8011b4c:	4462      	add	r2, ip
 8011b4e:	2154      	movs	r1, #84	; 0x54
 8011b50:	7812      	ldrb	r2, [r2, #0]
 8011b52:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8011b54:	4b1b      	ldr	r3, [pc, #108]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011b56:	2220      	movs	r2, #32
 8011b58:	2120      	movs	r1, #32
 8011b5a:	468c      	mov	ip, r1
 8011b5c:	2108      	movs	r1, #8
 8011b5e:	4688      	mov	r8, r1
 8011b60:	44b8      	add	r8, r7
 8011b62:	44c4      	add	ip, r8
 8011b64:	4462      	add	r2, ip
 8011b66:	2155      	movs	r1, #85	; 0x55
 8011b68:	7812      	ldrb	r2, [r2, #0]
 8011b6a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8011b6c:	4b15      	ldr	r3, [pc, #84]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011b6e:	2224      	movs	r2, #36	; 0x24
 8011b70:	2120      	movs	r1, #32
 8011b72:	468c      	mov	ip, r1
 8011b74:	2108      	movs	r1, #8
 8011b76:	4688      	mov	r8, r1
 8011b78:	44b8      	add	r8, r7
 8011b7a:	44c4      	add	ip, r8
 8011b7c:	4462      	add	r2, ip
 8011b7e:	2156      	movs	r1, #86	; 0x56
 8011b80:	7812      	ldrb	r2, [r2, #0]
 8011b82:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b0c      	cmp	r3, #12
 8011b88:	d902      	bls.n	8011b90 <SX1276SetRxConfig+0x308>
                datarate = 12;
 8011b8a:	230c      	movs	r3, #12
 8011b8c:	607b      	str	r3, [r7, #4]
 8011b8e:	e004      	b.n	8011b9a <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b05      	cmp	r3, #5
 8011b94:	d801      	bhi.n	8011b9a <SX1276SetRxConfig+0x312>
                datarate = 6;
 8011b96:	2306      	movs	r3, #6
 8011b98:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	2b07      	cmp	r3, #7
 8011b9e:	d105      	bne.n	8011bac <SX1276SetRxConfig+0x324>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2b0b      	cmp	r3, #11
 8011ba4:	d008      	beq.n	8011bb8 <SX1276SetRxConfig+0x330>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b0c      	cmp	r3, #12
 8011baa:	d005      	beq.n	8011bb8 <SX1276SetRxConfig+0x330>
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	2b08      	cmp	r3, #8
 8011bb0:	d112      	bne.n	8011bd8 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b0c      	cmp	r3, #12
 8011bb6:	d10f      	bne.n	8011bd8 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8011bb8:	4b02      	ldr	r3, [pc, #8]	; (8011bc4 <SX1276SetRxConfig+0x33c>)
 8011bba:	224c      	movs	r2, #76	; 0x4c
 8011bbc:	2101      	movs	r1, #1
 8011bbe:	5499      	strb	r1, [r3, r2]
 8011bc0:	e00e      	b.n	8011be0 <SX1276SetRxConfig+0x358>
 8011bc2:	46c0      	nop			; (mov r8, r8)
 8011bc4:	20001110 	.word	0x20001110
 8011bc8:	3ff00000 	.word	0x3ff00000
 8011bcc:	40200000 	.word	0x40200000
 8011bd0:	408f4000 	.word	0x408f4000
 8011bd4:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8011bd8:	4b77      	ldr	r3, [pc, #476]	; (8011db8 <SX1276SetRxConfig+0x530>)
 8011bda:	224c      	movs	r2, #76	; 0x4c
 8011bdc:	2100      	movs	r1, #0
 8011bde:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8011be0:	201d      	movs	r0, #29
 8011be2:	f001 f929 	bl	8012e38 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	011b      	lsls	r3, r3, #4
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	230e      	movs	r3, #14
 8011bf0:	18fb      	adds	r3, r7, r3
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	18db      	adds	r3, r3, r3
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8011bfc:	242c      	movs	r4, #44	; 0x2c
 8011bfe:	2608      	movs	r6, #8
 8011c00:	19bb      	adds	r3, r7, r6
 8011c02:	191b      	adds	r3, r3, r4
 8011c04:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8011c06:	4313      	orrs	r3, r2
 8011c08:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8011c0a:	0019      	movs	r1, r3
 8011c0c:	201d      	movs	r0, #29
 8011c0e:	f001 f8ff 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8011c12:	201e      	movs	r0, #30
 8011c14:	f001 f910 	bl	8012e38 <SX1276Read>
 8011c18:	0003      	movs	r3, r0
 8011c1a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8011c1c:	2308      	movs	r3, #8
 8011c1e:	4013      	ands	r3, r2
 8011c20:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8011c2e:	2334      	movs	r3, #52	; 0x34
 8011c30:	2108      	movs	r1, #8
 8011c32:	468c      	mov	ip, r1
 8011c34:	44bc      	add	ip, r7
 8011c36:	4463      	add	r3, ip
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	4313      	orrs	r3, r2
 8011c40:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8011c42:	2528      	movs	r5, #40	; 0x28
 8011c44:	19bb      	adds	r3, r7, r6
 8011c46:	195b      	adds	r3, r3, r5
 8011c48:	881b      	ldrh	r3, [r3, #0]
 8011c4a:	0a1b      	lsrs	r3, r3, #8
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2103      	movs	r1, #3
 8011c52:	400b      	ands	r3, r1
 8011c54:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8011c56:	4313      	orrs	r3, r2
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	0019      	movs	r1, r3
 8011c5c:	201e      	movs	r0, #30
 8011c5e:	f001 f8d7 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8011c62:	2026      	movs	r0, #38	; 0x26
 8011c64:	f001 f8e8 	bl	8012e38 <SX1276Read>
 8011c68:	0003      	movs	r3, r0
 8011c6a:	b25b      	sxtb	r3, r3
 8011c6c:	2208      	movs	r2, #8
 8011c6e:	4393      	bics	r3, r2
 8011c70:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8011c72:	4b51      	ldr	r3, [pc, #324]	; (8011db8 <SX1276SetRxConfig+0x530>)
 8011c74:	214c      	movs	r1, #76	; 0x4c
 8011c76:	5c5b      	ldrb	r3, [r3, r1]
 8011c78:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8011c7a:	b25b      	sxtb	r3, r3
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	0019      	movs	r1, r3
 8011c84:	2026      	movs	r0, #38	; 0x26
 8011c86:	f001 f8c3 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8011c8a:	19bb      	adds	r3, r7, r6
 8011c8c:	195b      	adds	r3, r3, r5
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	0019      	movs	r1, r3
 8011c94:	201f      	movs	r0, #31
 8011c96:	f001 f8bb 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8011c9a:	2524      	movs	r5, #36	; 0x24
 8011c9c:	19bb      	adds	r3, r7, r6
 8011c9e:	195b      	adds	r3, r3, r5
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	0a1b      	lsrs	r3, r3, #8
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	0019      	movs	r1, r3
 8011caa:	2020      	movs	r0, #32
 8011cac:	f001 f8b0 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8011cb0:	19bb      	adds	r3, r7, r6
 8011cb2:	195b      	adds	r3, r3, r5
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	0019      	movs	r1, r3
 8011cba:	2021      	movs	r0, #33	; 0x21
 8011cbc:	f001 f8a8 	bl	8012e10 <SX1276Write>
            if( fixLen == 1 )
 8011cc0:	19bb      	adds	r3, r7, r6
 8011cc2:	191b      	adds	r3, r3, r4
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d009      	beq.n	8011cde <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8011cca:	2330      	movs	r3, #48	; 0x30
 8011ccc:	2208      	movs	r2, #8
 8011cce:	4694      	mov	ip, r2
 8011cd0:	44bc      	add	ip, r7
 8011cd2:	4463      	add	r3, ip
 8011cd4:	781b      	ldrb	r3, [r3, #0]
 8011cd6:	0019      	movs	r1, r3
 8011cd8:	2022      	movs	r0, #34	; 0x22
 8011cda:	f001 f899 	bl	8012e10 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8011cde:	4b36      	ldr	r3, [pc, #216]	; (8011db8 <SX1276SetRxConfig+0x530>)
 8011ce0:	2253      	movs	r2, #83	; 0x53
 8011ce2:	5c9b      	ldrb	r3, [r3, r2]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d013      	beq.n	8011d10 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8011ce8:	2044      	movs	r0, #68	; 0x44
 8011cea:	f001 f8a5 	bl	8012e38 <SX1276Read>
 8011cee:	0003      	movs	r3, r0
 8011cf0:	001a      	movs	r2, r3
 8011cf2:	2380      	movs	r3, #128	; 0x80
 8011cf4:	425b      	negs	r3, r3
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	0019      	movs	r1, r3
 8011cfc:	2044      	movs	r0, #68	; 0x44
 8011cfe:	f001 f887 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8011d02:	4b2d      	ldr	r3, [pc, #180]	; (8011db8 <SX1276SetRxConfig+0x530>)
 8011d04:	2254      	movs	r2, #84	; 0x54
 8011d06:	5c9b      	ldrb	r3, [r3, r2]
 8011d08:	0019      	movs	r1, r3
 8011d0a:	2024      	movs	r0, #36	; 0x24
 8011d0c:	f001 f880 	bl	8012e10 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	2b09      	cmp	r3, #9
 8011d14:	d10d      	bne.n	8011d32 <SX1276SetRxConfig+0x4aa>
 8011d16:	4b28      	ldr	r3, [pc, #160]	; (8011db8 <SX1276SetRxConfig+0x530>)
 8011d18:	689b      	ldr	r3, [r3, #8]
 8011d1a:	4a28      	ldr	r2, [pc, #160]	; (8011dbc <SX1276SetRxConfig+0x534>)
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	d908      	bls.n	8011d32 <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8011d20:	2102      	movs	r1, #2
 8011d22:	2036      	movs	r0, #54	; 0x36
 8011d24:	f001 f874 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8011d28:	2164      	movs	r1, #100	; 0x64
 8011d2a:	203a      	movs	r0, #58	; 0x3a
 8011d2c:	f001 f870 	bl	8012e10 <SX1276Write>
 8011d30:	e00f      	b.n	8011d52 <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	2b09      	cmp	r3, #9
 8011d36:	d108      	bne.n	8011d4a <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8011d38:	2102      	movs	r1, #2
 8011d3a:	2036      	movs	r0, #54	; 0x36
 8011d3c:	f001 f868 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8011d40:	217f      	movs	r1, #127	; 0x7f
 8011d42:	203a      	movs	r0, #58	; 0x3a
 8011d44:	f001 f864 	bl	8012e10 <SX1276Write>
 8011d48:	e003      	b.n	8011d52 <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8011d4a:	2103      	movs	r1, #3
 8011d4c:	2036      	movs	r0, #54	; 0x36
 8011d4e:	f001 f85f 	bl	8012e10 <SX1276Write>
            if( datarate == 6 )
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b06      	cmp	r3, #6
 8011d56:	d114      	bne.n	8011d82 <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8011d58:	2031      	movs	r0, #49	; 0x31
 8011d5a:	f001 f86d 	bl	8012e38 <SX1276Read>
 8011d5e:	0003      	movs	r3, r0
 8011d60:	b25b      	sxtb	r3, r3
 8011d62:	2207      	movs	r2, #7
 8011d64:	4393      	bics	r3, r2
 8011d66:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8011d68:	2205      	movs	r2, #5
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	0019      	movs	r1, r3
 8011d72:	2031      	movs	r0, #49	; 0x31
 8011d74:	f001 f84c 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8011d78:	210c      	movs	r1, #12
 8011d7a:	2037      	movs	r0, #55	; 0x37
 8011d7c:	f001 f848 	bl	8012e10 <SX1276Write>
        break;
 8011d80:	e013      	b.n	8011daa <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8011d82:	2031      	movs	r0, #49	; 0x31
 8011d84:	f001 f858 	bl	8012e38 <SX1276Read>
 8011d88:	0003      	movs	r3, r0
 8011d8a:	b25b      	sxtb	r3, r3
 8011d8c:	2207      	movs	r2, #7
 8011d8e:	4393      	bics	r3, r2
 8011d90:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8011d92:	2203      	movs	r2, #3
 8011d94:	4313      	orrs	r3, r2
 8011d96:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	0019      	movs	r1, r3
 8011d9c:	2031      	movs	r0, #49	; 0x31
 8011d9e:	f001 f837 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8011da2:	210a      	movs	r1, #10
 8011da4:	2037      	movs	r0, #55	; 0x37
 8011da6:	f001 f833 	bl	8012e10 <SX1276Write>
        break;
 8011daa:	46c0      	nop			; (mov r8, r8)
}
 8011dac:	46c0      	nop			; (mov r8, r8)
 8011dae:	46bd      	mov	sp, r7
 8011db0:	b004      	add	sp, #16
 8011db2:	bc04      	pop	{r2}
 8011db4:	4690      	mov	r8, r2
 8011db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011db8:	20001110 	.word	0x20001110
 8011dbc:	1f4add40 	.word	0x1f4add40

08011dc0 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8011dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60ba      	str	r2, [r7, #8]
 8011dc8:	607b      	str	r3, [r7, #4]
 8011dca:	240f      	movs	r4, #15
 8011dcc:	193b      	adds	r3, r7, r4
 8011dce:	1c02      	adds	r2, r0, #0
 8011dd0:	701a      	strb	r2, [r3, #0]
 8011dd2:	250e      	movs	r5, #14
 8011dd4:	197b      	adds	r3, r7, r5
 8011dd6:	1c0a      	adds	r2, r1, #0
 8011dd8:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 8011dda:	193b      	adds	r3, r7, r4
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	0018      	movs	r0, r3
 8011de0:	f000 ffbe 	bl	8012d60 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8011de4:	4be5      	ldr	r3, [pc, #916]	; (801217c <SX1276SetTxConfig+0x3bc>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	197a      	adds	r2, r7, r5
 8011dec:	7812      	ldrb	r2, [r2, #0]
 8011dee:	b252      	sxtb	r2, r2
 8011df0:	0010      	movs	r0, r2
 8011df2:	4798      	blx	r3

    switch( modem )
 8011df4:	193b      	adds	r3, r7, r4
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d003      	beq.n	8011e04 <SX1276SetTxConfig+0x44>
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d100      	bne.n	8011e02 <SX1276SetTxConfig+0x42>
 8011e00:	e0b1      	b.n	8011f66 <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8011e02:	e1d8      	b.n	80121b6 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 8011e04:	4bde      	ldr	r3, [pc, #888]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e06:	220e      	movs	r2, #14
 8011e08:	18ba      	adds	r2, r7, r2
 8011e0a:	7812      	ldrb	r2, [r2, #0]
 8011e0c:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8011e0e:	4bdc      	ldr	r3, [pc, #880]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8011e14:	4bda      	ldr	r3, [pc, #872]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8011e1a:	4bd9      	ldr	r3, [pc, #868]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e1e:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8011e20:	4bd7      	ldr	r3, [pc, #860]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e22:	2528      	movs	r5, #40	; 0x28
 8011e24:	2408      	movs	r4, #8
 8011e26:	193a      	adds	r2, r7, r4
 8011e28:	1952      	adds	r2, r2, r5
 8011e2a:	8812      	ldrh	r2, [r2, #0]
 8011e2c:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8011e2e:	4bd4      	ldr	r3, [pc, #848]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e30:	262c      	movs	r6, #44	; 0x2c
 8011e32:	193a      	adds	r2, r7, r4
 8011e34:	1992      	adds	r2, r2, r6
 8011e36:	2122      	movs	r1, #34	; 0x22
 8011e38:	7812      	ldrb	r2, [r2, #0]
 8011e3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8011e3c:	4bd0      	ldr	r3, [pc, #832]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e3e:	2230      	movs	r2, #48	; 0x30
 8011e40:	2108      	movs	r1, #8
 8011e42:	468c      	mov	ip, r1
 8011e44:	44bc      	add	ip, r7
 8011e46:	4462      	add	r2, ip
 8011e48:	2124      	movs	r1, #36	; 0x24
 8011e4a:	7812      	ldrb	r2, [r2, #0]
 8011e4c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8011e4e:	4bcc      	ldr	r3, [pc, #816]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e50:	223c      	movs	r2, #60	; 0x3c
 8011e52:	2108      	movs	r1, #8
 8011e54:	468c      	mov	ip, r1
 8011e56:	44bc      	add	ip, r7
 8011e58:	4462      	add	r2, ip
 8011e5a:	2125      	movs	r1, #37	; 0x25
 8011e5c:	7812      	ldrb	r2, [r2, #0]
 8011e5e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8011e60:	4bc7      	ldr	r3, [pc, #796]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e64:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8011e66:	68b8      	ldr	r0, [r7, #8]
 8011e68:	f7f0 fbc8 	bl	80025fc <__aeabi_ui2d>
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	4bc5      	ldr	r3, [pc, #788]	; (8012184 <SX1276SetTxConfig+0x3c4>)
 8011e70:	f7ef f990 	bl	8001194 <__aeabi_ddiv>
 8011e74:	0003      	movs	r3, r0
 8011e76:	000c      	movs	r4, r1
 8011e78:	0018      	movs	r0, r3
 8011e7a:	0021      	movs	r1, r4
 8011e7c:	f7ee fb6e 	bl	800055c <__aeabi_d2uiz>
 8011e80:	0003      	movs	r3, r0
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	0a1b      	lsrs	r3, r3, #8
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	0019      	movs	r1, r3
 8011e8e:	2004      	movs	r0, #4
 8011e90:	f000 ffbe 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	0019      	movs	r1, r3
 8011e9a:	2005      	movs	r0, #5
 8011e9c:	f000 ffb8 	bl	8012e10 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8011ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ea2:	f7f0 fbab 	bl	80025fc <__aeabi_ui2d>
 8011ea6:	0003      	movs	r3, r0
 8011ea8:	000c      	movs	r4, r1
 8011eaa:	001a      	movs	r2, r3
 8011eac:	0023      	movs	r3, r4
 8011eae:	2000      	movs	r0, #0
 8011eb0:	49b5      	ldr	r1, [pc, #724]	; (8012188 <SX1276SetTxConfig+0x3c8>)
 8011eb2:	f7ef f96f 	bl	8001194 <__aeabi_ddiv>
 8011eb6:	0003      	movs	r3, r0
 8011eb8:	000c      	movs	r4, r1
 8011eba:	0018      	movs	r0, r3
 8011ebc:	0021      	movs	r1, r4
 8011ebe:	f7ee fb4d 	bl	800055c <__aeabi_d2uiz>
 8011ec2:	0003      	movs	r3, r0
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8011ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eca:	0a1b      	lsrs	r3, r3, #8
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	0019      	movs	r1, r3
 8011ed0:	2002      	movs	r0, #2
 8011ed2:	f000 ff9d 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	0019      	movs	r1, r3
 8011edc:	2003      	movs	r0, #3
 8011ede:	f000 ff97 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8011ee2:	2408      	movs	r4, #8
 8011ee4:	193b      	adds	r3, r7, r4
 8011ee6:	195b      	adds	r3, r3, r5
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	0a1b      	lsrs	r3, r3, #8
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	0019      	movs	r1, r3
 8011ef2:	2025      	movs	r0, #37	; 0x25
 8011ef4:	f000 ff8c 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8011ef8:	193b      	adds	r3, r7, r4
 8011efa:	195b      	adds	r3, r3, r5
 8011efc:	881b      	ldrh	r3, [r3, #0]
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	0019      	movs	r1, r3
 8011f02:	2026      	movs	r0, #38	; 0x26
 8011f04:	f000 ff84 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8011f08:	2030      	movs	r0, #48	; 0x30
 8011f0a:	f000 ff95 	bl	8012e38 <SX1276Read>
 8011f0e:	0003      	movs	r3, r0
 8011f10:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8011f12:	226f      	movs	r2, #111	; 0x6f
 8011f14:	4013      	ands	r3, r2
 8011f16:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8011f18:	193b      	adds	r3, r7, r4
 8011f1a:	199b      	adds	r3, r3, r6
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d001      	beq.n	8011f26 <SX1276SetTxConfig+0x166>
 8011f22:	2300      	movs	r3, #0
 8011f24:	e001      	b.n	8011f2a <SX1276SetTxConfig+0x16a>
 8011f26:	2380      	movs	r3, #128	; 0x80
 8011f28:	425b      	negs	r3, r3
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8011f2e:	2330      	movs	r3, #48	; 0x30
 8011f30:	2108      	movs	r1, #8
 8011f32:	468c      	mov	ip, r1
 8011f34:	44bc      	add	ip, r7
 8011f36:	4463      	add	r3, ip
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8011f3c:	b25b      	sxtb	r3, r3
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	0019      	movs	r1, r3
 8011f46:	2030      	movs	r0, #48	; 0x30
 8011f48:	f000 ff62 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8011f4c:	2031      	movs	r0, #49	; 0x31
 8011f4e:	f000 ff73 	bl	8012e38 <SX1276Read>
 8011f52:	0003      	movs	r3, r0
 8011f54:	001a      	movs	r2, r3
 8011f56:	2340      	movs	r3, #64	; 0x40
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	0019      	movs	r1, r3
 8011f5e:	2031      	movs	r0, #49	; 0x31
 8011f60:	f000 ff56 	bl	8012e10 <SX1276Write>
        break;
 8011f64:	e127      	b.n	80121b6 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 8011f66:	4b86      	ldr	r3, [pc, #536]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011f68:	220e      	movs	r2, #14
 8011f6a:	18ba      	adds	r2, r7, r2
 8011f6c:	2140      	movs	r1, #64	; 0x40
 8011f6e:	7812      	ldrb	r2, [r2, #0]
 8011f70:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b02      	cmp	r3, #2
 8011f76:	d900      	bls.n	8011f7a <SX1276SetTxConfig+0x1ba>
                while( 1 );
 8011f78:	e7fe      	b.n	8011f78 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	3307      	adds	r3, #7
 8011f7e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8011f80:	4b7f      	ldr	r3, [pc, #508]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8011f86:	4b7e      	ldr	r3, [pc, #504]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f8a:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8011f8c:	4b7c      	ldr	r3, [pc, #496]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011f8e:	2224      	movs	r2, #36	; 0x24
 8011f90:	2108      	movs	r1, #8
 8011f92:	468c      	mov	ip, r1
 8011f94:	44bc      	add	ip, r7
 8011f96:	4462      	add	r2, ip
 8011f98:	214d      	movs	r1, #77	; 0x4d
 8011f9a:	7812      	ldrb	r2, [r2, #0]
 8011f9c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8011f9e:	4b78      	ldr	r3, [pc, #480]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011fa0:	2228      	movs	r2, #40	; 0x28
 8011fa2:	2108      	movs	r1, #8
 8011fa4:	468c      	mov	ip, r1
 8011fa6:	44bc      	add	ip, r7
 8011fa8:	4462      	add	r2, ip
 8011faa:	214e      	movs	r1, #78	; 0x4e
 8011fac:	8812      	ldrh	r2, [r2, #0]
 8011fae:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8011fb0:	4b73      	ldr	r3, [pc, #460]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011fb2:	222c      	movs	r2, #44	; 0x2c
 8011fb4:	2108      	movs	r1, #8
 8011fb6:	468c      	mov	ip, r1
 8011fb8:	44bc      	add	ip, r7
 8011fba:	4462      	add	r2, ip
 8011fbc:	2150      	movs	r1, #80	; 0x50
 8011fbe:	7812      	ldrb	r2, [r2, #0]
 8011fc0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8011fc2:	4b6f      	ldr	r3, [pc, #444]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011fc4:	2234      	movs	r2, #52	; 0x34
 8011fc6:	2108      	movs	r1, #8
 8011fc8:	468c      	mov	ip, r1
 8011fca:	44bc      	add	ip, r7
 8011fcc:	4462      	add	r2, ip
 8011fce:	2153      	movs	r1, #83	; 0x53
 8011fd0:	7812      	ldrb	r2, [r2, #0]
 8011fd2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8011fd4:	4b6a      	ldr	r3, [pc, #424]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011fd6:	2238      	movs	r2, #56	; 0x38
 8011fd8:	2108      	movs	r1, #8
 8011fda:	468c      	mov	ip, r1
 8011fdc:	44bc      	add	ip, r7
 8011fde:	4462      	add	r2, ip
 8011fe0:	2154      	movs	r1, #84	; 0x54
 8011fe2:	7812      	ldrb	r2, [r2, #0]
 8011fe4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8011fe6:	4b66      	ldr	r3, [pc, #408]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011fe8:	2230      	movs	r2, #48	; 0x30
 8011fea:	2108      	movs	r1, #8
 8011fec:	468c      	mov	ip, r1
 8011fee:	44bc      	add	ip, r7
 8011ff0:	4462      	add	r2, ip
 8011ff2:	2152      	movs	r1, #82	; 0x52
 8011ff4:	7812      	ldrb	r2, [r2, #0]
 8011ff6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8011ff8:	4b61      	ldr	r3, [pc, #388]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8011ffa:	223c      	movs	r2, #60	; 0x3c
 8011ffc:	2108      	movs	r1, #8
 8011ffe:	468c      	mov	ip, r1
 8012000:	44bc      	add	ip, r7
 8012002:	4462      	add	r2, ip
 8012004:	2155      	movs	r1, #85	; 0x55
 8012006:	7812      	ldrb	r2, [r2, #0]
 8012008:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801200a:	4b5d      	ldr	r3, [pc, #372]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 801200c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801200e:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8012010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012012:	2b0c      	cmp	r3, #12
 8012014:	d902      	bls.n	801201c <SX1276SetTxConfig+0x25c>
                datarate = 12;
 8012016:	230c      	movs	r3, #12
 8012018:	62bb      	str	r3, [r7, #40]	; 0x28
 801201a:	e004      	b.n	8012026 <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	2b05      	cmp	r3, #5
 8012020:	d801      	bhi.n	8012026 <SX1276SetTxConfig+0x266>
                datarate = 6;
 8012022:	2306      	movs	r3, #6
 8012024:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2b07      	cmp	r3, #7
 801202a:	d105      	bne.n	8012038 <SX1276SetTxConfig+0x278>
 801202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202e:	2b0b      	cmp	r3, #11
 8012030:	d008      	beq.n	8012044 <SX1276SetTxConfig+0x284>
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	2b0c      	cmp	r3, #12
 8012036:	d005      	beq.n	8012044 <SX1276SetTxConfig+0x284>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b08      	cmp	r3, #8
 801203c:	d107      	bne.n	801204e <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012040:	2b0c      	cmp	r3, #12
 8012042:	d104      	bne.n	801204e <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8012044:	4b4e      	ldr	r3, [pc, #312]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8012046:	224c      	movs	r2, #76	; 0x4c
 8012048:	2101      	movs	r1, #1
 801204a:	5499      	strb	r1, [r3, r2]
 801204c:	e003      	b.n	8012056 <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801204e:	4b4c      	ldr	r3, [pc, #304]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8012050:	224c      	movs	r2, #76	; 0x4c
 8012052:	2100      	movs	r1, #0
 8012054:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8012056:	4b4a      	ldr	r3, [pc, #296]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 8012058:	2253      	movs	r2, #83	; 0x53
 801205a:	5c9b      	ldrb	r3, [r3, r2]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d013      	beq.n	8012088 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8012060:	2044      	movs	r0, #68	; 0x44
 8012062:	f000 fee9 	bl	8012e38 <SX1276Read>
 8012066:	0003      	movs	r3, r0
 8012068:	001a      	movs	r2, r3
 801206a:	2380      	movs	r3, #128	; 0x80
 801206c:	425b      	negs	r3, r3
 801206e:	4313      	orrs	r3, r2
 8012070:	b2db      	uxtb	r3, r3
 8012072:	0019      	movs	r1, r3
 8012074:	2044      	movs	r0, #68	; 0x44
 8012076:	f000 fecb 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801207a:	4b41      	ldr	r3, [pc, #260]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 801207c:	2254      	movs	r2, #84	; 0x54
 801207e:	5c9b      	ldrb	r3, [r3, r2]
 8012080:	0019      	movs	r1, r3
 8012082:	2024      	movs	r0, #36	; 0x24
 8012084:	f000 fec4 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8012088:	201d      	movs	r0, #29
 801208a:	f000 fed5 	bl	8012e38 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	b2db      	uxtb	r3, r3
 8012092:	011b      	lsls	r3, r3, #4
 8012094:	b2da      	uxtb	r2, r3
 8012096:	2324      	movs	r3, #36	; 0x24
 8012098:	2108      	movs	r1, #8
 801209a:	468c      	mov	ip, r1
 801209c:	44bc      	add	ip, r7
 801209e:	4463      	add	r3, ip
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	18db      	adds	r3, r3, r3
 80120a4:	b2db      	uxtb	r3, r3
 80120a6:	4313      	orrs	r3, r2
 80120a8:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80120aa:	232c      	movs	r3, #44	; 0x2c
 80120ac:	2108      	movs	r1, #8
 80120ae:	468c      	mov	ip, r1
 80120b0:	44bc      	add	ip, r7
 80120b2:	4463      	add	r3, ip
 80120b4:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80120b6:	4313      	orrs	r3, r2
 80120b8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80120ba:	0019      	movs	r1, r3
 80120bc:	201d      	movs	r0, #29
 80120be:	f000 fea7 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80120c2:	201e      	movs	r0, #30
 80120c4:	f000 feb8 	bl	8012e38 <SX1276Read>
 80120c8:	0003      	movs	r3, r0
 80120ca:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80120cc:	230b      	movs	r3, #11
 80120ce:	4013      	ands	r3, r2
 80120d0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	011b      	lsls	r3, r3, #4
 80120d8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80120da:	4313      	orrs	r3, r2
 80120dc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80120de:	2330      	movs	r3, #48	; 0x30
 80120e0:	2108      	movs	r1, #8
 80120e2:	468c      	mov	ip, r1
 80120e4:	44bc      	add	ip, r7
 80120e6:	4463      	add	r3, ip
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80120ee:	4313      	orrs	r3, r2
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	0019      	movs	r1, r3
 80120f4:	201e      	movs	r0, #30
 80120f6:	f000 fe8b 	bl	8012e10 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80120fa:	2026      	movs	r0, #38	; 0x26
 80120fc:	f000 fe9c 	bl	8012e38 <SX1276Read>
 8012100:	0003      	movs	r3, r0
 8012102:	b25b      	sxtb	r3, r3
 8012104:	2208      	movs	r2, #8
 8012106:	4393      	bics	r3, r2
 8012108:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801210a:	4b1d      	ldr	r3, [pc, #116]	; (8012180 <SX1276SetTxConfig+0x3c0>)
 801210c:	214c      	movs	r1, #76	; 0x4c
 801210e:	5c5b      	ldrb	r3, [r3, r1]
 8012110:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8012112:	b25b      	sxtb	r3, r3
 8012114:	4313      	orrs	r3, r2
 8012116:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8012118:	b2db      	uxtb	r3, r3
 801211a:	0019      	movs	r1, r3
 801211c:	2026      	movs	r0, #38	; 0x26
 801211e:	f000 fe77 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8012122:	2428      	movs	r4, #40	; 0x28
 8012124:	2508      	movs	r5, #8
 8012126:	197b      	adds	r3, r7, r5
 8012128:	191b      	adds	r3, r3, r4
 801212a:	881b      	ldrh	r3, [r3, #0]
 801212c:	0a1b      	lsrs	r3, r3, #8
 801212e:	b29b      	uxth	r3, r3
 8012130:	b2db      	uxtb	r3, r3
 8012132:	0019      	movs	r1, r3
 8012134:	2020      	movs	r0, #32
 8012136:	f000 fe6b 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801213a:	197b      	adds	r3, r7, r5
 801213c:	191b      	adds	r3, r3, r4
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	b2db      	uxtb	r3, r3
 8012142:	0019      	movs	r1, r3
 8012144:	2021      	movs	r0, #33	; 0x21
 8012146:	f000 fe63 	bl	8012e10 <SX1276Write>
            if( datarate == 6 )
 801214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214c:	2b06      	cmp	r3, #6
 801214e:	d11d      	bne.n	801218c <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8012150:	2031      	movs	r0, #49	; 0x31
 8012152:	f000 fe71 	bl	8012e38 <SX1276Read>
 8012156:	0003      	movs	r3, r0
 8012158:	b25b      	sxtb	r3, r3
 801215a:	2207      	movs	r2, #7
 801215c:	4393      	bics	r3, r2
 801215e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8012160:	2205      	movs	r2, #5
 8012162:	4313      	orrs	r3, r2
 8012164:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8012166:	b2db      	uxtb	r3, r3
 8012168:	0019      	movs	r1, r3
 801216a:	2031      	movs	r0, #49	; 0x31
 801216c:	f000 fe50 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8012170:	210c      	movs	r1, #12
 8012172:	2037      	movs	r0, #55	; 0x37
 8012174:	f000 fe4c 	bl	8012e10 <SX1276Write>
        break;
 8012178:	e01c      	b.n	80121b4 <SX1276SetTxConfig+0x3f4>
 801217a:	46c0      	nop			; (mov r8, r8)
 801217c:	20000cc0 	.word	0x20000cc0
 8012180:	20001110 	.word	0x20001110
 8012184:	404e8480 	.word	0x404e8480
 8012188:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801218c:	2031      	movs	r0, #49	; 0x31
 801218e:	f000 fe53 	bl	8012e38 <SX1276Read>
 8012192:	0003      	movs	r3, r0
 8012194:	b25b      	sxtb	r3, r3
 8012196:	2207      	movs	r2, #7
 8012198:	4393      	bics	r3, r2
 801219a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801219c:	2203      	movs	r2, #3
 801219e:	4313      	orrs	r3, r2
 80121a0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	0019      	movs	r1, r3
 80121a6:	2031      	movs	r0, #49	; 0x31
 80121a8:	f000 fe32 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80121ac:	210a      	movs	r1, #10
 80121ae:	2037      	movs	r0, #55	; 0x37
 80121b0:	f000 fe2e 	bl	8012e10 <SX1276Write>
        break;
 80121b4:	46c0      	nop			; (mov r8, r8)
}
 80121b6:	46c0      	nop			; (mov r8, r8)
 80121b8:	46bd      	mov	sp, r7
 80121ba:	b005      	add	sp, #20
 80121bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121be:	46c0      	nop			; (mov r8, r8)

080121c0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 80121c0:	b5b0      	push	{r4, r5, r7, lr}
 80121c2:	b094      	sub	sp, #80	; 0x50
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	0002      	movs	r2, r0
 80121c8:	1dfb      	adds	r3, r7, #7
 80121ca:	701a      	strb	r2, [r3, #0]
 80121cc:	1dbb      	adds	r3, r7, #6
 80121ce:	1c0a      	adds	r2, r1, #0
 80121d0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 80121d2:	2300      	movs	r3, #0
 80121d4:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 80121d6:	1dfb      	adds	r3, r7, #7
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d003      	beq.n	80121e6 <SX1276GetTimeOnAir+0x26>
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d100      	bne.n	80121e4 <SX1276GetTimeOnAir+0x24>
 80121e2:	e086      	b.n	80122f2 <SX1276GetTimeOnAir+0x132>
 80121e4:	e164      	b.n	80124b0 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80121e6:	4bb5      	ldr	r3, [pc, #724]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80121e8:	8c1b      	ldrh	r3, [r3, #32]
 80121ea:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80121ec:	2027      	movs	r0, #39	; 0x27
 80121ee:	f000 fe23 	bl	8012e38 <SX1276Read>
 80121f2:	0003      	movs	r3, r0
 80121f4:	001a      	movs	r2, r3
 80121f6:	23f8      	movs	r3, #248	; 0xf8
 80121f8:	439a      	bics	r2, r3
 80121fa:	0013      	movs	r3, r2
 80121fc:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80121fe:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8012200:	0018      	movs	r0, r3
 8012202:	f7f0 f9c1 	bl	8002588 <__aeabi_i2d>
 8012206:	0004      	movs	r4, r0
 8012208:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801220a:	4bac      	ldr	r3, [pc, #688]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 801220c:	2222      	movs	r2, #34	; 0x22
 801220e:	5c9b      	ldrb	r3, [r3, r2]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d002      	beq.n	801221a <SX1276GetTimeOnAir+0x5a>
 8012214:	2000      	movs	r0, #0
 8012216:	2100      	movs	r1, #0
 8012218:	e001      	b.n	801221e <SX1276GetTimeOnAir+0x5e>
 801221a:	2000      	movs	r0, #0
 801221c:	49a8      	ldr	r1, [pc, #672]	; (80124c0 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801221e:	0022      	movs	r2, r4
 8012220:	002b      	movs	r3, r5
 8012222:	f7ee fc9b 	bl	8000b5c <__aeabi_dadd>
 8012226:	0003      	movs	r3, r0
 8012228:	000c      	movs	r4, r1
 801222a:	0025      	movs	r5, r4
 801222c:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801222e:	2030      	movs	r0, #48	; 0x30
 8012230:	f000 fe02 	bl	8012e38 <SX1276Read>
 8012234:	0003      	movs	r3, r0
 8012236:	001a      	movs	r2, r3
 8012238:	23f9      	movs	r3, #249	; 0xf9
 801223a:	439a      	bics	r2, r3
 801223c:	1e13      	subs	r3, r2, #0
 801223e:	d002      	beq.n	8012246 <SX1276GetTimeOnAir+0x86>
 8012240:	2000      	movs	r0, #0
 8012242:	499f      	ldr	r1, [pc, #636]	; (80124c0 <SX1276GetTimeOnAir+0x300>)
 8012244:	e001      	b.n	801224a <SX1276GetTimeOnAir+0x8a>
 8012246:	2000      	movs	r0, #0
 8012248:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801224a:	0022      	movs	r2, r4
 801224c:	002b      	movs	r3, r5
 801224e:	f7ee fc85 	bl	8000b5c <__aeabi_dadd>
 8012252:	0003      	movs	r3, r0
 8012254:	000c      	movs	r4, r1
 8012256:	0025      	movs	r5, r4
 8012258:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801225a:	1dbb      	adds	r3, r7, #6
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	0018      	movs	r0, r3
 8012260:	f7f0 f992 	bl	8002588 <__aeabi_i2d>
 8012264:	0002      	movs	r2, r0
 8012266:	000b      	movs	r3, r1
 8012268:	0020      	movs	r0, r4
 801226a:	0029      	movs	r1, r5
 801226c:	f7ee fc76 	bl	8000b5c <__aeabi_dadd>
 8012270:	0003      	movs	r3, r0
 8012272:	000c      	movs	r4, r1
 8012274:	0025      	movs	r5, r4
 8012276:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8012278:	4b90      	ldr	r3, [pc, #576]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 801227a:	2224      	movs	r2, #36	; 0x24
 801227c:	5c9b      	ldrb	r3, [r3, r2]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d003      	beq.n	801228a <SX1276GetTimeOnAir+0xca>
 8012282:	2000      	movs	r0, #0
 8012284:	2180      	movs	r1, #128	; 0x80
 8012286:	05c9      	lsls	r1, r1, #23
 8012288:	e001      	b.n	801228e <SX1276GetTimeOnAir+0xce>
 801228a:	2000      	movs	r0, #0
 801228c:	2100      	movs	r1, #0
                                     pktLen +
 801228e:	0022      	movs	r2, r4
 8012290:	002b      	movs	r3, r5
 8012292:	f7ee fc63 	bl	8000b5c <__aeabi_dadd>
 8012296:	0003      	movs	r3, r0
 8012298:	000c      	movs	r4, r1
 801229a:	0018      	movs	r0, r3
 801229c:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801229e:	2200      	movs	r2, #0
 80122a0:	4b88      	ldr	r3, [pc, #544]	; (80124c4 <SX1276GetTimeOnAir+0x304>)
 80122a2:	f7ef fb81 	bl	80019a8 <__aeabi_dmul>
 80122a6:	0003      	movs	r3, r0
 80122a8:	000c      	movs	r4, r1
 80122aa:	0025      	movs	r5, r4
 80122ac:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 80122ae:	4b83      	ldr	r3, [pc, #524]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80122b0:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80122b2:	0018      	movs	r0, r3
 80122b4:	f7f0 f9a2 	bl	80025fc <__aeabi_ui2d>
 80122b8:	0002      	movs	r2, r0
 80122ba:	000b      	movs	r3, r1
 80122bc:	0020      	movs	r0, r4
 80122be:	0029      	movs	r1, r5
 80122c0:	f7ee ff68 	bl	8001194 <__aeabi_ddiv>
 80122c4:	0003      	movs	r3, r0
 80122c6:	000c      	movs	r4, r1
 80122c8:	0018      	movs	r0, r3
 80122ca:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80122cc:	2200      	movs	r2, #0
 80122ce:	4b7e      	ldr	r3, [pc, #504]	; (80124c8 <SX1276GetTimeOnAir+0x308>)
 80122d0:	f7ef fb6a 	bl	80019a8 <__aeabi_dmul>
 80122d4:	0003      	movs	r3, r0
 80122d6:	000c      	movs	r4, r1
 80122d8:	0018      	movs	r0, r3
 80122da:	0021      	movs	r1, r4
 80122dc:	f008 fb70 	bl	801a9c0 <round>
 80122e0:	0003      	movs	r3, r0
 80122e2:	000c      	movs	r4, r1
 80122e4:	0018      	movs	r0, r3
 80122e6:	0021      	movs	r1, r4
 80122e8:	f7ee f938 	bl	800055c <__aeabi_d2uiz>
 80122ec:	0003      	movs	r3, r0
 80122ee:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80122f0:	e0de      	b.n	80124b0 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	2400      	movs	r4, #0
 80122f6:	643b      	str	r3, [r7, #64]	; 0x40
 80122f8:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 80122fa:	4b70      	ldr	r3, [pc, #448]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80122fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122fe:	2b08      	cmp	r3, #8
 8012300:	d008      	beq.n	8012314 <SX1276GetTimeOnAir+0x154>
 8012302:	2b09      	cmp	r3, #9
 8012304:	d00b      	beq.n	801231e <SX1276GetTimeOnAir+0x15e>
 8012306:	2b07      	cmp	r3, #7
 8012308:	d10e      	bne.n	8012328 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 801230a:	2300      	movs	r3, #0
 801230c:	4c6f      	ldr	r4, [pc, #444]	; (80124cc <SX1276GetTimeOnAir+0x30c>)
 801230e:	643b      	str	r3, [r7, #64]	; 0x40
 8012310:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8012312:	e009      	b.n	8012328 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 8012314:	2300      	movs	r3, #0
 8012316:	4c6e      	ldr	r4, [pc, #440]	; (80124d0 <SX1276GetTimeOnAir+0x310>)
 8012318:	643b      	str	r3, [r7, #64]	; 0x40
 801231a:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801231c:	e004      	b.n	8012328 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 801231e:	2300      	movs	r3, #0
 8012320:	4c6c      	ldr	r4, [pc, #432]	; (80124d4 <SX1276GetTimeOnAir+0x314>)
 8012322:	643b      	str	r3, [r7, #64]	; 0x40
 8012324:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8012326:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8012328:	4b64      	ldr	r3, [pc, #400]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 801232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801232c:	2201      	movs	r2, #1
 801232e:	409a      	lsls	r2, r3
 8012330:	0013      	movs	r3, r2
 8012332:	0018      	movs	r0, r3
 8012334:	f7f0 f928 	bl	8002588 <__aeabi_i2d>
 8012338:	0003      	movs	r3, r0
 801233a:	000c      	movs	r4, r1
 801233c:	001a      	movs	r2, r3
 801233e:	0023      	movs	r3, r4
 8012340:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012344:	f7ee ff26 	bl	8001194 <__aeabi_ddiv>
 8012348:	0003      	movs	r3, r0
 801234a:	000c      	movs	r4, r1
 801234c:	63bb      	str	r3, [r7, #56]	; 0x38
 801234e:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8012350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012354:	2000      	movs	r0, #0
 8012356:	495a      	ldr	r1, [pc, #360]	; (80124c0 <SX1276GetTimeOnAir+0x300>)
 8012358:	f7ee ff1c 	bl	8001194 <__aeabi_ddiv>
 801235c:	0003      	movs	r3, r0
 801235e:	000c      	movs	r4, r1
 8012360:	633b      	str	r3, [r7, #48]	; 0x30
 8012362:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8012364:	4b55      	ldr	r3, [pc, #340]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 8012366:	224e      	movs	r2, #78	; 0x4e
 8012368:	5a9b      	ldrh	r3, [r3, r2]
 801236a:	0018      	movs	r0, r3
 801236c:	f7f0 f90c 	bl	8002588 <__aeabi_i2d>
 8012370:	2200      	movs	r2, #0
 8012372:	4b59      	ldr	r3, [pc, #356]	; (80124d8 <SX1276GetTimeOnAir+0x318>)
 8012374:	f7ee fbf2 	bl	8000b5c <__aeabi_dadd>
 8012378:	0003      	movs	r3, r0
 801237a:	000c      	movs	r4, r1
 801237c:	001a      	movs	r2, r3
 801237e:	0023      	movs	r3, r4
 8012380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012382:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012384:	f7ef fb10 	bl	80019a8 <__aeabi_dmul>
 8012388:	0003      	movs	r3, r0
 801238a:	000c      	movs	r4, r1
 801238c:	62bb      	str	r3, [r7, #40]	; 0x28
 801238e:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8012390:	1dbb      	adds	r3, r7, #6
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	00db      	lsls	r3, r3, #3
 8012396:	001a      	movs	r2, r3
 8012398:	4b48      	ldr	r3, [pc, #288]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 801239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80123a0:	4a46      	ldr	r2, [pc, #280]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80123a2:	2152      	movs	r1, #82	; 0x52
 80123a4:	5c52      	ldrb	r2, [r2, r1]
 80123a6:	0112      	lsls	r2, r2, #4
 80123a8:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80123aa:	4b44      	ldr	r3, [pc, #272]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80123ac:	2150      	movs	r1, #80	; 0x50
 80123ae:	5c5b      	ldrb	r3, [r3, r1]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <SX1276GetTimeOnAir+0x1f8>
 80123b4:	2314      	movs	r3, #20
 80123b6:	e000      	b.n	80123ba <SX1276GetTimeOnAir+0x1fa>
 80123b8:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80123be:	0018      	movs	r0, r3
 80123c0:	f7f0 f91c 	bl	80025fc <__aeabi_ui2d>
 80123c4:	0004      	movs	r4, r0
 80123c6:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80123c8:	4b3c      	ldr	r3, [pc, #240]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80123ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80123cc:	4b3b      	ldr	r3, [pc, #236]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 80123ce:	214c      	movs	r1, #76	; 0x4c
 80123d0:	5c5b      	ldrb	r3, [r3, r1]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d001      	beq.n	80123da <SX1276GetTimeOnAir+0x21a>
 80123d6:	2302      	movs	r3, #2
 80123d8:	e000      	b.n	80123dc <SX1276GetTimeOnAir+0x21c>
 80123da:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	0018      	movs	r0, r3
 80123e2:	f7f0 f90b 	bl	80025fc <__aeabi_ui2d>
 80123e6:	0002      	movs	r2, r0
 80123e8:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80123ea:	0020      	movs	r0, r4
 80123ec:	0029      	movs	r1, r5
 80123ee:	f7ee fed1 	bl	8001194 <__aeabi_ddiv>
 80123f2:	0003      	movs	r3, r0
 80123f4:	000c      	movs	r4, r1
 80123f6:	0018      	movs	r0, r3
 80123f8:	0021      	movs	r1, r4
 80123fa:	f008 f9dd 	bl	801a7b8 <ceil>
 80123fe:	0004      	movs	r4, r0
 8012400:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8012402:	4b2e      	ldr	r3, [pc, #184]	; (80124bc <SX1276GetTimeOnAir+0x2fc>)
 8012404:	224d      	movs	r2, #77	; 0x4d
 8012406:	5c9b      	ldrb	r3, [r3, r2]
 8012408:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801240a:	0018      	movs	r0, r3
 801240c:	f7f0 f8bc 	bl	8002588 <__aeabi_i2d>
 8012410:	0002      	movs	r2, r0
 8012412:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8012414:	0020      	movs	r0, r4
 8012416:	0029      	movs	r1, r5
 8012418:	f7ef fac6 	bl	80019a8 <__aeabi_dmul>
 801241c:	0003      	movs	r3, r0
 801241e:	000c      	movs	r4, r1
 8012420:	623b      	str	r3, [r7, #32]
 8012422:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8012424:	2200      	movs	r2, #0
 8012426:	2300      	movs	r3, #0
 8012428:	6a38      	ldr	r0, [r7, #32]
 801242a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801242c:	f7ee f814 	bl	8000458 <__aeabi_dcmpgt>
 8012430:	1e03      	subs	r3, r0, #0
 8012432:	d008      	beq.n	8012446 <SX1276GetTimeOnAir+0x286>
 8012434:	2200      	movs	r2, #0
 8012436:	4b23      	ldr	r3, [pc, #140]	; (80124c4 <SX1276GetTimeOnAir+0x304>)
 8012438:	6a38      	ldr	r0, [r7, #32]
 801243a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801243c:	f7ee fb8e 	bl	8000b5c <__aeabi_dadd>
 8012440:	0003      	movs	r3, r0
 8012442:	000c      	movs	r4, r1
 8012444:	e001      	b.n	801244a <SX1276GetTimeOnAir+0x28a>
 8012446:	2300      	movs	r3, #0
 8012448:	4c1e      	ldr	r4, [pc, #120]	; (80124c4 <SX1276GetTimeOnAir+0x304>)
 801244a:	61bb      	str	r3, [r7, #24]
 801244c:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 801244e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012452:	69b8      	ldr	r0, [r7, #24]
 8012454:	69f9      	ldr	r1, [r7, #28]
 8012456:	f7ef faa7 	bl	80019a8 <__aeabi_dmul>
 801245a:	0003      	movs	r3, r0
 801245c:	000c      	movs	r4, r1
 801245e:	613b      	str	r3, [r7, #16]
 8012460:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8012462:	693a      	ldr	r2, [r7, #16]
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801246a:	f7ee fb77 	bl	8000b5c <__aeabi_dadd>
 801246e:	0003      	movs	r3, r0
 8012470:	000c      	movs	r4, r1
 8012472:	60bb      	str	r3, [r7, #8]
 8012474:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8012476:	2200      	movs	r2, #0
 8012478:	4b13      	ldr	r3, [pc, #76]	; (80124c8 <SX1276GetTimeOnAir+0x308>)
 801247a:	68b8      	ldr	r0, [r7, #8]
 801247c:	68f9      	ldr	r1, [r7, #12]
 801247e:	f7ef fa93 	bl	80019a8 <__aeabi_dmul>
 8012482:	0003      	movs	r3, r0
 8012484:	000c      	movs	r4, r1
 8012486:	0018      	movs	r0, r3
 8012488:	0021      	movs	r1, r4
 801248a:	4a14      	ldr	r2, [pc, #80]	; (80124dc <SX1276GetTimeOnAir+0x31c>)
 801248c:	4b14      	ldr	r3, [pc, #80]	; (80124e0 <SX1276GetTimeOnAir+0x320>)
 801248e:	f7ee fb65 	bl	8000b5c <__aeabi_dadd>
 8012492:	0003      	movs	r3, r0
 8012494:	000c      	movs	r4, r1
 8012496:	0018      	movs	r0, r3
 8012498:	0021      	movs	r1, r4
 801249a:	f008 fa0f 	bl	801a8bc <floor>
 801249e:	0003      	movs	r3, r0
 80124a0:	000c      	movs	r4, r1
 80124a2:	0018      	movs	r0, r3
 80124a4:	0021      	movs	r1, r4
 80124a6:	f7ee f859 	bl	800055c <__aeabi_d2uiz>
 80124aa:	0003      	movs	r3, r0
 80124ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80124ae:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 80124b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80124b2:	0018      	movs	r0, r3
 80124b4:	46bd      	mov	sp, r7
 80124b6:	b014      	add	sp, #80	; 0x50
 80124b8:	bdb0      	pop	{r4, r5, r7, pc}
 80124ba:	46c0      	nop			; (mov r8, r8)
 80124bc:	20001110 	.word	0x20001110
 80124c0:	3ff00000 	.word	0x3ff00000
 80124c4:	40200000 	.word	0x40200000
 80124c8:	408f4000 	.word	0x408f4000
 80124cc:	40fe8480 	.word	0x40fe8480
 80124d0:	410e8480 	.word	0x410e8480
 80124d4:	411e8480 	.word	0x411e8480
 80124d8:	40110000 	.word	0x40110000
 80124dc:	d916872b 	.word	0xd916872b
 80124e0:	3feff7ce 	.word	0x3feff7ce

080124e4 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	000a      	movs	r2, r1
 80124ee:	1cfb      	adds	r3, r7, #3
 80124f0:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 80124f2:	2300      	movs	r3, #0
 80124f4:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80124f6:	4b59      	ldr	r3, [pc, #356]	; (801265c <SX1276Send+0x178>)
 80124f8:	795b      	ldrb	r3, [r3, #5]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d002      	beq.n	8012504 <SX1276Send+0x20>
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d04c      	beq.n	801259c <SX1276Send+0xb8>
 8012502:	e0a2      	b.n	801264a <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8012504:	4b55      	ldr	r3, [pc, #340]	; (801265c <SX1276Send+0x178>)
 8012506:	2200      	movs	r2, #0
 8012508:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801250a:	1cfb      	adds	r3, r7, #3
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	b29a      	uxth	r2, r3
 8012510:	4b52      	ldr	r3, [pc, #328]	; (801265c <SX1276Send+0x178>)
 8012512:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8012514:	4b51      	ldr	r3, [pc, #324]	; (801265c <SX1276Send+0x178>)
 8012516:	2222      	movs	r2, #34	; 0x22
 8012518:	5c9b      	ldrb	r3, [r3, r2]
 801251a:	2201      	movs	r2, #1
 801251c:	4053      	eors	r3, r2
 801251e:	b2db      	uxtb	r3, r3
 8012520:	2b00      	cmp	r3, #0
 8012522:	d005      	beq.n	8012530 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8012524:	1cfb      	adds	r3, r7, #3
 8012526:	2101      	movs	r1, #1
 8012528:	0018      	movs	r0, r3
 801252a:	f000 fd3b 	bl	8012fa4 <SX1276WriteFifo>
 801252e:	e005      	b.n	801253c <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8012530:	1cfb      	adds	r3, r7, #3
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	0019      	movs	r1, r3
 8012536:	2032      	movs	r0, #50	; 0x32
 8012538:	f000 fc6a 	bl	8012e10 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801253c:	1cfb      	adds	r3, r7, #3
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d009      	beq.n	8012558 <SX1276Send+0x74>
 8012544:	1cfb      	adds	r3, r7, #3
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	2b40      	cmp	r3, #64	; 0x40
 801254a:	d805      	bhi.n	8012558 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801254c:	1cfb      	adds	r3, r7, #3
 801254e:	7819      	ldrb	r1, [r3, #0]
 8012550:	4b42      	ldr	r3, [pc, #264]	; (801265c <SX1276Send+0x178>)
 8012552:	223f      	movs	r2, #63	; 0x3f
 8012554:	5499      	strb	r1, [r3, r2]
 8012556:	e00b      	b.n	8012570 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8012558:	1cfb      	adds	r3, r7, #3
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	b29a      	uxth	r2, r3
 801255e:	6879      	ldr	r1, [r7, #4]
 8012560:	4b3f      	ldr	r3, [pc, #252]	; (8012660 <SX1276Send+0x17c>)
 8012562:	0018      	movs	r0, r3
 8012564:	f7fe fc54 	bl	8010e10 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8012568:	4b3c      	ldr	r3, [pc, #240]	; (801265c <SX1276Send+0x178>)
 801256a:	223f      	movs	r2, #63	; 0x3f
 801256c:	2120      	movs	r1, #32
 801256e:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8012570:	4b3a      	ldr	r3, [pc, #232]	; (801265c <SX1276Send+0x178>)
 8012572:	223f      	movs	r2, #63	; 0x3f
 8012574:	5c9a      	ldrb	r2, [r3, r2]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	0011      	movs	r1, r2
 801257a:	0018      	movs	r0, r3
 801257c:	f000 fd12 	bl	8012fa4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8012580:	4b36      	ldr	r3, [pc, #216]	; (801265c <SX1276Send+0x178>)
 8012582:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8012584:	4b35      	ldr	r3, [pc, #212]	; (801265c <SX1276Send+0x178>)
 8012586:	213f      	movs	r1, #63	; 0x3f
 8012588:	5c5b      	ldrb	r3, [r3, r1]
 801258a:	b29b      	uxth	r3, r3
 801258c:	18d3      	adds	r3, r2, r3
 801258e:	b29a      	uxth	r2, r3
 8012590:	4b32      	ldr	r3, [pc, #200]	; (801265c <SX1276Send+0x178>)
 8012592:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8012594:	4b31      	ldr	r3, [pc, #196]	; (801265c <SX1276Send+0x178>)
 8012596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012598:	60fb      	str	r3, [r7, #12]
        }
        break;
 801259a:	e056      	b.n	801264a <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801259c:	4b2f      	ldr	r3, [pc, #188]	; (801265c <SX1276Send+0x178>)
 801259e:	2255      	movs	r2, #85	; 0x55
 80125a0:	5c9b      	ldrb	r3, [r3, r2]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d011      	beq.n	80125ca <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80125a6:	2033      	movs	r0, #51	; 0x33
 80125a8:	f000 fc46 	bl	8012e38 <SX1276Read>
 80125ac:	0003      	movs	r3, r0
 80125ae:	001a      	movs	r2, r3
 80125b0:	2341      	movs	r3, #65	; 0x41
 80125b2:	439a      	bics	r2, r3
 80125b4:	0013      	movs	r3, r2
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	0019      	movs	r1, r3
 80125ba:	2033      	movs	r0, #51	; 0x33
 80125bc:	f000 fc28 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80125c0:	2119      	movs	r1, #25
 80125c2:	203b      	movs	r0, #59	; 0x3b
 80125c4:	f000 fc24 	bl	8012e10 <SX1276Write>
 80125c8:	e013      	b.n	80125f2 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80125ca:	2033      	movs	r0, #51	; 0x33
 80125cc:	f000 fc34 	bl	8012e38 <SX1276Read>
 80125d0:	0003      	movs	r3, r0
 80125d2:	b25b      	sxtb	r3, r3
 80125d4:	2241      	movs	r2, #65	; 0x41
 80125d6:	4393      	bics	r3, r2
 80125d8:	b25b      	sxtb	r3, r3
 80125da:	2201      	movs	r2, #1
 80125dc:	4313      	orrs	r3, r2
 80125de:	b25b      	sxtb	r3, r3
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	0019      	movs	r1, r3
 80125e4:	2033      	movs	r0, #51	; 0x33
 80125e6:	f000 fc13 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80125ea:	211d      	movs	r1, #29
 80125ec:	203b      	movs	r0, #59	; 0x3b
 80125ee:	f000 fc0f 	bl	8012e10 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80125f2:	1cfb      	adds	r3, r7, #3
 80125f4:	7819      	ldrb	r1, [r3, #0]
 80125f6:	4b19      	ldr	r3, [pc, #100]	; (801265c <SX1276Send+0x178>)
 80125f8:	2264      	movs	r2, #100	; 0x64
 80125fa:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80125fc:	1cfb      	adds	r3, r7, #3
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	0019      	movs	r1, r3
 8012602:	2022      	movs	r0, #34	; 0x22
 8012604:	f000 fc04 	bl	8012e10 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8012608:	2100      	movs	r1, #0
 801260a:	200e      	movs	r0, #14
 801260c:	f000 fc00 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8012610:	2100      	movs	r1, #0
 8012612:	200d      	movs	r0, #13
 8012614:	f000 fbfc 	bl	8012e10 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8012618:	2001      	movs	r0, #1
 801261a:	f000 fc0d 	bl	8012e38 <SX1276Read>
 801261e:	0003      	movs	r3, r0
 8012620:	001a      	movs	r2, r3
 8012622:	23f8      	movs	r3, #248	; 0xf8
 8012624:	439a      	bics	r2, r3
 8012626:	1e13      	subs	r3, r2, #0
 8012628:	d104      	bne.n	8012634 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801262a:	f000 f835 	bl	8012698 <SX1276SetStby>
                DelayMs( 1 );
 801262e:	2001      	movs	r0, #1
 8012630:	f006 fdac 	bl	801918c <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8012634:	1cfb      	adds	r3, r7, #3
 8012636:	781a      	ldrb	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	0011      	movs	r1, r2
 801263c:	0018      	movs	r0, r3
 801263e:	f000 fcb1 	bl	8012fa4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8012642:	4b06      	ldr	r3, [pc, #24]	; (801265c <SX1276Send+0x178>)
 8012644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012646:	60fb      	str	r3, [r7, #12]
        }
        break;
 8012648:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	0018      	movs	r0, r3
 801264e:	f000 f9cd 	bl	80129ec <SX1276SetTx>
}
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	46bd      	mov	sp, r7
 8012656:	b004      	add	sp, #16
 8012658:	bd80      	pop	{r7, pc}
 801265a:	46c0      	nop			; (mov r8, r8)
 801265c:	20001110 	.word	0x20001110
 8012660:	20000bc0 	.word	0x20000bc0

08012664 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 8012668:	4b08      	ldr	r3, [pc, #32]	; (801268c <SX1276SetSleep+0x28>)
 801266a:	0018      	movs	r0, r3
 801266c:	f7fe fb4e 	bl	8010d0c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8012670:	4b07      	ldr	r3, [pc, #28]	; (8012690 <SX1276SetSleep+0x2c>)
 8012672:	0018      	movs	r0, r3
 8012674:	f7fe fb4a 	bl	8010d0c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8012678:	2000      	movs	r0, #0
 801267a:	f000 fb21 	bl	8012cc0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801267e:	4b05      	ldr	r3, [pc, #20]	; (8012694 <SX1276SetSleep+0x30>)
 8012680:	2200      	movs	r2, #0
 8012682:	711a      	strb	r2, [r3, #4]
}
 8012684:	46c0      	nop			; (mov r8, r8)
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	46c0      	nop			; (mov r8, r8)
 801268c:	20001178 	.word	0x20001178
 8012690:	200010e0 	.word	0x200010e0
 8012694:	20001110 	.word	0x20001110

08012698 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 801269c:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <SX1276SetStby+0x28>)
 801269e:	0018      	movs	r0, r3
 80126a0:	f7fe fb34 	bl	8010d0c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80126a4:	4b07      	ldr	r3, [pc, #28]	; (80126c4 <SX1276SetStby+0x2c>)
 80126a6:	0018      	movs	r0, r3
 80126a8:	f7fe fb30 	bl	8010d0c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80126ac:	2001      	movs	r0, #1
 80126ae:	f000 fb07 	bl	8012cc0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80126b2:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <SX1276SetStby+0x30>)
 80126b4:	2200      	movs	r2, #0
 80126b6:	711a      	strb	r2, [r3, #4]
}
 80126b8:	46c0      	nop			; (mov r8, r8)
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	46c0      	nop			; (mov r8, r8)
 80126c0:	20001178 	.word	0x20001178
 80126c4:	200010e0 	.word	0x200010e0
 80126c8:	20001110 	.word	0x20001110

080126cc <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 80126d4:	230f      	movs	r3, #15
 80126d6:	18fb      	adds	r3, r7, r3
 80126d8:	2200      	movs	r2, #0
 80126da:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 80126dc:	4bb8      	ldr	r3, [pc, #736]	; (80129c0 <SX1276SetRx+0x2f4>)
 80126de:	795b      	ldrb	r3, [r3, #5]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d002      	beq.n	80126ea <SX1276SetRx+0x1e>
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d041      	beq.n	801276c <SX1276SetRx+0xa0>
 80126e8:	e128      	b.n	801293c <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80126ea:	230f      	movs	r3, #15
 80126ec:	18fb      	adds	r3, r7, r3
 80126ee:	4ab4      	ldr	r2, [pc, #720]	; (80129c0 <SX1276SetRx+0x2f4>)
 80126f0:	2126      	movs	r1, #38	; 0x26
 80126f2:	5c52      	ldrb	r2, [r2, r1]
 80126f4:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80126f6:	2040      	movs	r0, #64	; 0x40
 80126f8:	f000 fb9e 	bl	8012e38 <SX1276Read>
 80126fc:	0003      	movs	r3, r0
 80126fe:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8012700:	2203      	movs	r2, #3
 8012702:	4013      	ands	r3, r2
 8012704:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8012706:	220c      	movs	r2, #12
 8012708:	4313      	orrs	r3, r2
 801270a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801270c:	b2db      	uxtb	r3, r3
 801270e:	0019      	movs	r1, r3
 8012710:	2040      	movs	r0, #64	; 0x40
 8012712:	f000 fb7d 	bl	8012e10 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8012716:	2041      	movs	r0, #65	; 0x41
 8012718:	f000 fb8e 	bl	8012e38 <SX1276Read>
 801271c:	0003      	movs	r3, r0
 801271e:	001a      	movs	r2, r3
 8012720:	233f      	movs	r3, #63	; 0x3f
 8012722:	425b      	negs	r3, r3
 8012724:	4313      	orrs	r3, r2
 8012726:	b2db      	uxtb	r3, r3
 8012728:	0019      	movs	r1, r3
 801272a:	2041      	movs	r0, #65	; 0x41
 801272c:	f000 fb70 	bl	8012e10 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8012730:	2035      	movs	r0, #53	; 0x35
 8012732:	f000 fb81 	bl	8012e38 <SX1276Read>
 8012736:	0003      	movs	r3, r0
 8012738:	001a      	movs	r2, r3
 801273a:	233f      	movs	r3, #63	; 0x3f
 801273c:	4013      	ands	r3, r2
 801273e:	b2d9      	uxtb	r1, r3
 8012740:	4b9f      	ldr	r3, [pc, #636]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012742:	223e      	movs	r2, #62	; 0x3e
 8012744:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8012746:	211e      	movs	r1, #30
 8012748:	200d      	movs	r0, #13
 801274a:	f000 fb61 	bl	8012e10 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801274e:	4b9c      	ldr	r3, [pc, #624]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012750:	2230      	movs	r2, #48	; 0x30
 8012752:	2100      	movs	r1, #0
 8012754:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8012756:	4b9a      	ldr	r3, [pc, #616]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012758:	2231      	movs	r2, #49	; 0x31
 801275a:	2100      	movs	r1, #0
 801275c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801275e:	4b98      	ldr	r3, [pc, #608]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012760:	2200      	movs	r2, #0
 8012762:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8012764:	4b96      	ldr	r3, [pc, #600]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012766:	2200      	movs	r2, #0
 8012768:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801276a:	e0e7      	b.n	801293c <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801276c:	4b94      	ldr	r3, [pc, #592]	; (80129c0 <SX1276SetRx+0x2f4>)
 801276e:	2255      	movs	r2, #85	; 0x55
 8012770:	5c9b      	ldrb	r3, [r3, r2]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d010      	beq.n	8012798 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8012776:	2033      	movs	r0, #51	; 0x33
 8012778:	f000 fb5e 	bl	8012e38 <SX1276Read>
 801277c:	0003      	movs	r3, r0
 801277e:	001a      	movs	r2, r3
 8012780:	2341      	movs	r3, #65	; 0x41
 8012782:	4313      	orrs	r3, r2
 8012784:	b2db      	uxtb	r3, r3
 8012786:	0019      	movs	r1, r3
 8012788:	2033      	movs	r0, #51	; 0x33
 801278a:	f000 fb41 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801278e:	2119      	movs	r1, #25
 8012790:	203b      	movs	r0, #59	; 0x3b
 8012792:	f000 fb3d 	bl	8012e10 <SX1276Write>
 8012796:	e013      	b.n	80127c0 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8012798:	2033      	movs	r0, #51	; 0x33
 801279a:	f000 fb4d 	bl	8012e38 <SX1276Read>
 801279e:	0003      	movs	r3, r0
 80127a0:	b25b      	sxtb	r3, r3
 80127a2:	2241      	movs	r2, #65	; 0x41
 80127a4:	4393      	bics	r3, r2
 80127a6:	b25b      	sxtb	r3, r3
 80127a8:	2201      	movs	r2, #1
 80127aa:	4313      	orrs	r3, r2
 80127ac:	b25b      	sxtb	r3, r3
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	0019      	movs	r1, r3
 80127b2:	2033      	movs	r0, #51	; 0x33
 80127b4:	f000 fb2c 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80127b8:	211d      	movs	r1, #29
 80127ba:	203b      	movs	r0, #59	; 0x3b
 80127bc:	f000 fb28 	bl	8012e10 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80127c0:	4b7f      	ldr	r3, [pc, #508]	; (80129c0 <SX1276SetRx+0x2f4>)
 80127c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127c4:	2b08      	cmp	r3, #8
 80127c6:	d900      	bls.n	80127ca <SX1276SetRx+0xfe>
 80127c8:	e076      	b.n	80128b8 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80127ca:	2031      	movs	r0, #49	; 0x31
 80127cc:	f000 fb34 	bl	8012e38 <SX1276Read>
 80127d0:	0003      	movs	r3, r0
 80127d2:	001a      	movs	r2, r3
 80127d4:	237f      	movs	r3, #127	; 0x7f
 80127d6:	4013      	ands	r3, r2
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	0019      	movs	r1, r3
 80127dc:	2031      	movs	r0, #49	; 0x31
 80127de:	f000 fb17 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80127e2:	2100      	movs	r1, #0
 80127e4:	2030      	movs	r0, #48	; 0x30
 80127e6:	f000 fb13 	bl	8012e10 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80127ea:	4b75      	ldr	r3, [pc, #468]	; (80129c0 <SX1276SetRx+0x2f4>)
 80127ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127ee:	2b08      	cmp	r3, #8
 80127f0:	d86f      	bhi.n	80128d2 <SX1276SetRx+0x206>
 80127f2:	009a      	lsls	r2, r3, #2
 80127f4:	4b73      	ldr	r3, [pc, #460]	; (80129c4 <SX1276SetRx+0x2f8>)
 80127f6:	18d3      	adds	r3, r2, r3
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80127fc:	2148      	movs	r1, #72	; 0x48
 80127fe:	202f      	movs	r0, #47	; 0x2f
 8012800:	f000 fb06 	bl	8012e10 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8012804:	4b6e      	ldr	r3, [pc, #440]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	4a6f      	ldr	r2, [pc, #444]	; (80129c8 <SX1276SetRx+0x2fc>)
 801280a:	4694      	mov	ip, r2
 801280c:	4463      	add	r3, ip
 801280e:	0018      	movs	r0, r3
 8012810:	f7fe feb6 	bl	8011580 <SX1276SetChannel>
                    break;
 8012814:	e05d      	b.n	80128d2 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8012816:	2144      	movs	r1, #68	; 0x44
 8012818:	202f      	movs	r0, #47	; 0x2f
 801281a:	f000 faf9 	bl	8012e10 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801281e:	4b68      	ldr	r3, [pc, #416]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	4a6a      	ldr	r2, [pc, #424]	; (80129cc <SX1276SetRx+0x300>)
 8012824:	4694      	mov	ip, r2
 8012826:	4463      	add	r3, ip
 8012828:	0018      	movs	r0, r3
 801282a:	f7fe fea9 	bl	8011580 <SX1276SetChannel>
                    break;
 801282e:	e050      	b.n	80128d2 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8012830:	2144      	movs	r1, #68	; 0x44
 8012832:	202f      	movs	r0, #47	; 0x2f
 8012834:	f000 faec 	bl	8012e10 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8012838:	4b61      	ldr	r3, [pc, #388]	; (80129c0 <SX1276SetRx+0x2f4>)
 801283a:	689b      	ldr	r3, [r3, #8]
 801283c:	4a64      	ldr	r2, [pc, #400]	; (80129d0 <SX1276SetRx+0x304>)
 801283e:	4694      	mov	ip, r2
 8012840:	4463      	add	r3, ip
 8012842:	0018      	movs	r0, r3
 8012844:	f7fe fe9c 	bl	8011580 <SX1276SetChannel>
                    break;
 8012848:	e043      	b.n	80128d2 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801284a:	2144      	movs	r1, #68	; 0x44
 801284c:	202f      	movs	r0, #47	; 0x2f
 801284e:	f000 fadf 	bl	8012e10 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8012852:	4b5b      	ldr	r3, [pc, #364]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012854:	689b      	ldr	r3, [r3, #8]
 8012856:	4a5f      	ldr	r2, [pc, #380]	; (80129d4 <SX1276SetRx+0x308>)
 8012858:	4694      	mov	ip, r2
 801285a:	4463      	add	r3, ip
 801285c:	0018      	movs	r0, r3
 801285e:	f7fe fe8f 	bl	8011580 <SX1276SetChannel>
                    break;
 8012862:	e036      	b.n	80128d2 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8012864:	2144      	movs	r1, #68	; 0x44
 8012866:	202f      	movs	r0, #47	; 0x2f
 8012868:	f000 fad2 	bl	8012e10 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801286c:	4b54      	ldr	r3, [pc, #336]	; (80129c0 <SX1276SetRx+0x2f4>)
 801286e:	689b      	ldr	r3, [r3, #8]
 8012870:	4a59      	ldr	r2, [pc, #356]	; (80129d8 <SX1276SetRx+0x30c>)
 8012872:	4694      	mov	ip, r2
 8012874:	4463      	add	r3, ip
 8012876:	0018      	movs	r0, r3
 8012878:	f7fe fe82 	bl	8011580 <SX1276SetChannel>
                    break;
 801287c:	e029      	b.n	80128d2 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801287e:	2144      	movs	r1, #68	; 0x44
 8012880:	202f      	movs	r0, #47	; 0x2f
 8012882:	f000 fac5 	bl	8012e10 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8012886:	4b4e      	ldr	r3, [pc, #312]	; (80129c0 <SX1276SetRx+0x2f4>)
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	4a54      	ldr	r2, [pc, #336]	; (80129dc <SX1276SetRx+0x310>)
 801288c:	4694      	mov	ip, r2
 801288e:	4463      	add	r3, ip
 8012890:	0018      	movs	r0, r3
 8012892:	f7fe fe75 	bl	8011580 <SX1276SetChannel>
                    break;
 8012896:	e01c      	b.n	80128d2 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8012898:	2140      	movs	r1, #64	; 0x40
 801289a:	202f      	movs	r0, #47	; 0x2f
 801289c:	f000 fab8 	bl	8012e10 <SX1276Write>
                    break;
 80128a0:	e017      	b.n	80128d2 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80128a2:	2140      	movs	r1, #64	; 0x40
 80128a4:	202f      	movs	r0, #47	; 0x2f
 80128a6:	f000 fab3 	bl	8012e10 <SX1276Write>
                    break;
 80128aa:	e012      	b.n	80128d2 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80128ac:	2140      	movs	r1, #64	; 0x40
 80128ae:	202f      	movs	r0, #47	; 0x2f
 80128b0:	f000 faae 	bl	8012e10 <SX1276Write>
                    break;
 80128b4:	46c0      	nop			; (mov r8, r8)
 80128b6:	e00c      	b.n	80128d2 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80128b8:	2031      	movs	r0, #49	; 0x31
 80128ba:	f000 fabd 	bl	8012e38 <SX1276Read>
 80128be:	0003      	movs	r3, r0
 80128c0:	001a      	movs	r2, r3
 80128c2:	2380      	movs	r3, #128	; 0x80
 80128c4:	425b      	negs	r3, r3
 80128c6:	4313      	orrs	r3, r2
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	0019      	movs	r1, r3
 80128cc:	2031      	movs	r0, #49	; 0x31
 80128ce:	f000 fa9f 	bl	8012e10 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80128d2:	230f      	movs	r3, #15
 80128d4:	18fb      	adds	r3, r7, r3
 80128d6:	4a3a      	ldr	r2, [pc, #232]	; (80129c0 <SX1276SetRx+0x2f4>)
 80128d8:	2156      	movs	r1, #86	; 0x56
 80128da:	5c52      	ldrb	r2, [r2, r1]
 80128dc:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80128de:	4b38      	ldr	r3, [pc, #224]	; (80129c0 <SX1276SetRx+0x2f4>)
 80128e0:	2253      	movs	r2, #83	; 0x53
 80128e2:	5c9b      	ldrb	r3, [r3, r2]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d010      	beq.n	801290a <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80128e8:	211d      	movs	r1, #29
 80128ea:	2011      	movs	r0, #17
 80128ec:	f000 fa90 	bl	8012e10 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80128f0:	2040      	movs	r0, #64	; 0x40
 80128f2:	f000 faa1 	bl	8012e38 <SX1276Read>
 80128f6:	0003      	movs	r3, r0
 80128f8:	001a      	movs	r2, r3
 80128fa:	2333      	movs	r3, #51	; 0x33
 80128fc:	4013      	ands	r3, r2
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	0019      	movs	r1, r3
 8012902:	2040      	movs	r0, #64	; 0x40
 8012904:	f000 fa84 	bl	8012e10 <SX1276Write>
 8012908:	e00f      	b.n	801292a <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801290a:	211f      	movs	r1, #31
 801290c:	2011      	movs	r0, #17
 801290e:	f000 fa7f 	bl	8012e10 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8012912:	2040      	movs	r0, #64	; 0x40
 8012914:	f000 fa90 	bl	8012e38 <SX1276Read>
 8012918:	0003      	movs	r3, r0
 801291a:	001a      	movs	r2, r3
 801291c:	233f      	movs	r3, #63	; 0x3f
 801291e:	4013      	ands	r3, r2
 8012920:	b2db      	uxtb	r3, r3
 8012922:	0019      	movs	r1, r3
 8012924:	2040      	movs	r0, #64	; 0x40
 8012926:	f000 fa73 	bl	8012e10 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801292a:	2100      	movs	r1, #0
 801292c:	200f      	movs	r0, #15
 801292e:	f000 fa6f 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8012932:	2100      	movs	r1, #0
 8012934:	200d      	movs	r0, #13
 8012936:	f000 fa6b 	bl	8012e10 <SX1276Write>
        }
        break;
 801293a:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801293c:	2380      	movs	r3, #128	; 0x80
 801293e:	005a      	lsls	r2, r3, #1
 8012940:	4b27      	ldr	r3, [pc, #156]	; (80129e0 <SX1276SetRx+0x314>)
 8012942:	2100      	movs	r1, #0
 8012944:	0018      	movs	r0, r3
 8012946:	f007 fb2b 	bl	8019fa0 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801294a:	4b1d      	ldr	r3, [pc, #116]	; (80129c0 <SX1276SetRx+0x2f4>)
 801294c:	2201      	movs	r2, #1
 801294e:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d009      	beq.n	801296a <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	4b22      	ldr	r3, [pc, #136]	; (80129e4 <SX1276SetRx+0x318>)
 801295a:	0011      	movs	r1, r2
 801295c:	0018      	movs	r0, r3
 801295e:	f7fe f953 	bl	8010c08 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8012962:	4b20      	ldr	r3, [pc, #128]	; (80129e4 <SX1276SetRx+0x318>)
 8012964:	0018      	movs	r0, r3
 8012966:	f7fe f97b 	bl	8010c60 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801296a:	4b15      	ldr	r3, [pc, #84]	; (80129c0 <SX1276SetRx+0x2f4>)
 801296c:	795b      	ldrb	r3, [r3, #5]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d116      	bne.n	80129a0 <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8012972:	2005      	movs	r0, #5
 8012974:	f000 f9a4 	bl	8012cc0 <SX1276SetOpMode>

        if( rxContinuous == false )
 8012978:	230f      	movs	r3, #15
 801297a:	18fb      	adds	r3, r7, r3
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	2201      	movs	r2, #1
 8012980:	4053      	eors	r3, r2
 8012982:	b2db      	uxtb	r3, r3
 8012984:	2b00      	cmp	r3, #0
 8012986:	d017      	beq.n	80129b8 <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8012988:	4b0d      	ldr	r3, [pc, #52]	; (80129c0 <SX1276SetRx+0x2f4>)
 801298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801298c:	4b16      	ldr	r3, [pc, #88]	; (80129e8 <SX1276SetRx+0x31c>)
 801298e:	0011      	movs	r1, r2
 8012990:	0018      	movs	r0, r3
 8012992:	f7fe f939 	bl	8010c08 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8012996:	4b14      	ldr	r3, [pc, #80]	; (80129e8 <SX1276SetRx+0x31c>)
 8012998:	0018      	movs	r0, r3
 801299a:	f7fe f961 	bl	8010c60 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801299e:	e00b      	b.n	80129b8 <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 80129a0:	230f      	movs	r3, #15
 80129a2:	18fb      	adds	r3, r7, r3
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d003      	beq.n	80129b2 <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80129aa:	2005      	movs	r0, #5
 80129ac:	f000 f988 	bl	8012cc0 <SX1276SetOpMode>
}
 80129b0:	e002      	b.n	80129b8 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80129b2:	2006      	movs	r0, #6
 80129b4:	f000 f984 	bl	8012cc0 <SX1276SetOpMode>
}
 80129b8:	46c0      	nop			; (mov r8, r8)
 80129ba:	46bd      	mov	sp, r7
 80129bc:	b004      	add	sp, #16
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	20001110 	.word	0x20001110
 80129c4:	0801bde8 	.word	0x0801bde8
 80129c8:	00001e82 	.word	0x00001e82
 80129cc:	000028b4 	.word	0x000028b4
 80129d0:	00003d04 	.word	0x00003d04
 80129d4:	0000515e 	.word	0x0000515e
 80129d8:	00007a12 	.word	0x00007a12
 80129dc:	0000a2c6 	.word	0x0000a2c6
 80129e0:	20000bc0 	.word	0x20000bc0
 80129e4:	20001178 	.word	0x20001178
 80129e8:	200010f8 	.word	0x200010f8

080129ec <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	4b38      	ldr	r3, [pc, #224]	; (8012ad8 <SX1276SetTx+0xec>)
 80129f8:	0011      	movs	r1, r2
 80129fa:	0018      	movs	r0, r3
 80129fc:	f7fe f904 	bl	8010c08 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8012a00:	4b36      	ldr	r3, [pc, #216]	; (8012adc <SX1276SetTx+0xf0>)
 8012a02:	795b      	ldrb	r3, [r3, #5]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <SX1276SetTx+0x22>
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d028      	beq.n	8012a5e <SX1276SetTx+0x72>
 8012a0c:	e056      	b.n	8012abc <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8012a0e:	2040      	movs	r0, #64	; 0x40
 8012a10:	f000 fa12 	bl	8012e38 <SX1276Read>
 8012a14:	0003      	movs	r3, r0
 8012a16:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8012a18:	2203      	movs	r2, #3
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8012a1e:	2210      	movs	r2, #16
 8012a20:	4313      	orrs	r3, r2
 8012a22:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	0019      	movs	r1, r3
 8012a28:	2040      	movs	r0, #64	; 0x40
 8012a2a:	f000 f9f1 	bl	8012e10 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8012a2e:	2041      	movs	r0, #65	; 0x41
 8012a30:	f000 fa02 	bl	8012e38 <SX1276Read>
 8012a34:	0003      	movs	r3, r0
 8012a36:	001a      	movs	r2, r3
 8012a38:	233e      	movs	r3, #62	; 0x3e
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	0019      	movs	r1, r3
 8012a40:	2041      	movs	r0, #65	; 0x41
 8012a42:	f000 f9e5 	bl	8012e10 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8012a46:	2035      	movs	r0, #53	; 0x35
 8012a48:	f000 f9f6 	bl	8012e38 <SX1276Read>
 8012a4c:	0003      	movs	r3, r0
 8012a4e:	001a      	movs	r2, r3
 8012a50:	233f      	movs	r3, #63	; 0x3f
 8012a52:	4013      	ands	r3, r2
 8012a54:	b2d9      	uxtb	r1, r3
 8012a56:	4b21      	ldr	r3, [pc, #132]	; (8012adc <SX1276SetTx+0xf0>)
 8012a58:	223e      	movs	r2, #62	; 0x3e
 8012a5a:	5499      	strb	r1, [r3, r2]
        }
        break;
 8012a5c:	e02e      	b.n	8012abc <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8012a5e:	4b1f      	ldr	r3, [pc, #124]	; (8012adc <SX1276SetTx+0xf0>)
 8012a60:	2253      	movs	r2, #83	; 0x53
 8012a62:	5c9b      	ldrb	r3, [r3, r2]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d014      	beq.n	8012a92 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8012a68:	21f5      	movs	r1, #245	; 0xf5
 8012a6a:	2011      	movs	r0, #17
 8012a6c:	f000 f9d0 	bl	8012e10 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8012a70:	2040      	movs	r0, #64	; 0x40
 8012a72:	f000 f9e1 	bl	8012e38 <SX1276Read>
 8012a76:	0003      	movs	r3, r0
 8012a78:	b25b      	sxtb	r3, r3
 8012a7a:	2233      	movs	r2, #51	; 0x33
 8012a7c:	4013      	ands	r3, r2
 8012a7e:	b25b      	sxtb	r3, r3
 8012a80:	2240      	movs	r2, #64	; 0x40
 8012a82:	4313      	orrs	r3, r2
 8012a84:	b25b      	sxtb	r3, r3
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	0019      	movs	r1, r3
 8012a8a:	2040      	movs	r0, #64	; 0x40
 8012a8c:	f000 f9c0 	bl	8012e10 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8012a90:	e013      	b.n	8012aba <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8012a92:	21f7      	movs	r1, #247	; 0xf7
 8012a94:	2011      	movs	r0, #17
 8012a96:	f000 f9bb 	bl	8012e10 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8012a9a:	2040      	movs	r0, #64	; 0x40
 8012a9c:	f000 f9cc 	bl	8012e38 <SX1276Read>
 8012aa0:	0003      	movs	r3, r0
 8012aa2:	b25b      	sxtb	r3, r3
 8012aa4:	223f      	movs	r2, #63	; 0x3f
 8012aa6:	4013      	ands	r3, r2
 8012aa8:	b25b      	sxtb	r3, r3
 8012aaa:	2240      	movs	r2, #64	; 0x40
 8012aac:	4313      	orrs	r3, r2
 8012aae:	b25b      	sxtb	r3, r3
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	0019      	movs	r1, r3
 8012ab4:	2040      	movs	r0, #64	; 0x40
 8012ab6:	f000 f9ab 	bl	8012e10 <SX1276Write>
        break;
 8012aba:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8012abc:	4b07      	ldr	r3, [pc, #28]	; (8012adc <SX1276SetTx+0xf0>)
 8012abe:	2202      	movs	r2, #2
 8012ac0:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8012ac2:	4b05      	ldr	r3, [pc, #20]	; (8012ad8 <SX1276SetTx+0xec>)
 8012ac4:	0018      	movs	r0, r3
 8012ac6:	f7fe f8cb 	bl	8010c60 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8012aca:	2003      	movs	r0, #3
 8012acc:	f000 f8f8 	bl	8012cc0 <SX1276SetOpMode>
}
 8012ad0:	46c0      	nop			; (mov r8, r8)
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	b002      	add	sp, #8
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	200010e0 	.word	0x200010e0
 8012adc:	20001110 	.word	0x20001110

08012ae0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 8012ae4:	4b11      	ldr	r3, [pc, #68]	; (8012b2c <SX1276StartCad+0x4c>)
 8012ae6:	795b      	ldrb	r3, [r3, #5]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d01a      	beq.n	8012b22 <SX1276StartCad+0x42>
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d000      	beq.n	8012af2 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8012af0:	e018      	b.n	8012b24 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8012af2:	21fa      	movs	r1, #250	; 0xfa
 8012af4:	2011      	movs	r0, #17
 8012af6:	f000 f98b 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8012afa:	2040      	movs	r0, #64	; 0x40
 8012afc:	f000 f99c 	bl	8012e38 <SX1276Read>
 8012b00:	0003      	movs	r3, r0
 8012b02:	001a      	movs	r2, r3
 8012b04:	2303      	movs	r3, #3
 8012b06:	439a      	bics	r2, r3
 8012b08:	0013      	movs	r3, r2
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	0019      	movs	r1, r3
 8012b0e:	2040      	movs	r0, #64	; 0x40
 8012b10:	f000 f97e 	bl	8012e10 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8012b14:	4b05      	ldr	r3, [pc, #20]	; (8012b2c <SX1276StartCad+0x4c>)
 8012b16:	2203      	movs	r2, #3
 8012b18:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8012b1a:	2007      	movs	r0, #7
 8012b1c:	f000 f8d0 	bl	8012cc0 <SX1276SetOpMode>
        break;
 8012b20:	e000      	b.n	8012b24 <SX1276StartCad+0x44>
        break;
 8012b22:	46c0      	nop			; (mov r8, r8)
    }
}
 8012b24:	46c0      	nop			; (mov r8, r8)
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	46c0      	nop			; (mov r8, r8)
 8012b2c:	20001110 	.word	0x20001110

08012b30 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b08e      	sub	sp, #56	; 0x38
 8012b34:	af0a      	add	r7, sp, #40	; 0x28
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	0008      	movs	r0, r1
 8012b3a:	0011      	movs	r1, r2
 8012b3c:	1cfb      	adds	r3, r7, #3
 8012b3e:	1c02      	adds	r2, r0, #0
 8012b40:	701a      	strb	r2, [r3, #0]
 8012b42:	003b      	movs	r3, r7
 8012b44:	1c0a      	adds	r2, r1, #0
 8012b46:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 8012b48:	003b      	movs	r3, r7
 8012b4a:	881a      	ldrh	r2, [r3, #0]
 8012b4c:	0013      	movs	r3, r2
 8012b4e:	015b      	lsls	r3, r3, #5
 8012b50:	1a9b      	subs	r3, r3, r2
 8012b52:	009b      	lsls	r3, r3, #2
 8012b54:	189b      	adds	r3, r3, r2
 8012b56:	00db      	lsls	r3, r3, #3
 8012b58:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	0018      	movs	r0, r3
 8012b5e:	f7fe fd0f 	bl	8011580 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8012b62:	1cfb      	adds	r3, r7, #3
 8012b64:	2100      	movs	r1, #0
 8012b66:	5659      	ldrsb	r1, [r3, r1]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	9308      	str	r3, [sp, #32]
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	9307      	str	r3, [sp, #28]
 8012b70:	2300      	movs	r3, #0
 8012b72:	9306      	str	r3, [sp, #24]
 8012b74:	2300      	movs	r3, #0
 8012b76:	9305      	str	r3, [sp, #20]
 8012b78:	2300      	movs	r3, #0
 8012b7a:	9304      	str	r3, [sp, #16]
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	9303      	str	r3, [sp, #12]
 8012b80:	2305      	movs	r3, #5
 8012b82:	9302      	str	r3, [sp, #8]
 8012b84:	2300      	movs	r3, #0
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	2396      	movs	r3, #150	; 0x96
 8012b8a:	015b      	lsls	r3, r3, #5
 8012b8c:	9300      	str	r3, [sp, #0]
 8012b8e:	2300      	movs	r3, #0
 8012b90:	2200      	movs	r2, #0
 8012b92:	2000      	movs	r0, #0
 8012b94:	f7ff f914 	bl	8011dc0 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8012b98:	2031      	movs	r0, #49	; 0x31
 8012b9a:	f000 f94d 	bl	8012e38 <SX1276Read>
 8012b9e:	0003      	movs	r3, r0
 8012ba0:	001a      	movs	r2, r3
 8012ba2:	2340      	movs	r3, #64	; 0x40
 8012ba4:	439a      	bics	r2, r3
 8012ba6:	0013      	movs	r3, r2
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	0019      	movs	r1, r3
 8012bac:	2031      	movs	r0, #49	; 0x31
 8012bae:	f000 f92f 	bl	8012e10 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8012bb2:	21f0      	movs	r1, #240	; 0xf0
 8012bb4:	2040      	movs	r0, #64	; 0x40
 8012bb6:	f000 f92b 	bl	8012e10 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8012bba:	21a0      	movs	r1, #160	; 0xa0
 8012bbc:	2041      	movs	r0, #65	; 0x41
 8012bbe:	f000 f927 	bl	8012e10 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	4b09      	ldr	r3, [pc, #36]	; (8012bec <SX1276SetTxContinuousWave+0xbc>)
 8012bc6:	0011      	movs	r1, r2
 8012bc8:	0018      	movs	r0, r3
 8012bca:	f7fe f81d 	bl	8010c08 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8012bce:	4b08      	ldr	r3, [pc, #32]	; (8012bf0 <SX1276SetTxContinuousWave+0xc0>)
 8012bd0:	2202      	movs	r2, #2
 8012bd2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8012bd4:	4b05      	ldr	r3, [pc, #20]	; (8012bec <SX1276SetTxContinuousWave+0xbc>)
 8012bd6:	0018      	movs	r0, r3
 8012bd8:	f7fe f842 	bl	8010c60 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8012bdc:	2003      	movs	r0, #3
 8012bde:	f000 f86f 	bl	8012cc0 <SX1276SetOpMode>
}
 8012be2:	46c0      	nop			; (mov r8, r8)
 8012be4:	46bd      	mov	sp, r7
 8012be6:	b004      	add	sp, #16
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	46c0      	nop			; (mov r8, r8)
 8012bec:	200010e0 	.word	0x200010e0
 8012bf0:	20001110 	.word	0x20001110

08012bf4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	0002      	movs	r2, r0
 8012bfc:	1dfb      	adds	r3, r7, #7
 8012bfe:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 8012c00:	230e      	movs	r3, #14
 8012c02:	18fb      	adds	r3, r7, r3
 8012c04:	2200      	movs	r2, #0
 8012c06:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8012c08:	1dfb      	adds	r3, r7, #7
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <SX1276ReadRssi+0x22>
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d00d      	beq.n	8012c30 <SX1276ReadRssi+0x3c>
 8012c14:	e027      	b.n	8012c66 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8012c16:	2011      	movs	r0, #17
 8012c18:	f000 f90e 	bl	8012e38 <SX1276Read>
 8012c1c:	0003      	movs	r3, r0
 8012c1e:	085b      	lsrs	r3, r3, #1
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	425b      	negs	r3, r3
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	230e      	movs	r3, #14
 8012c2a:	18fb      	adds	r3, r7, r3
 8012c2c:	801a      	strh	r2, [r3, #0]
        break;
 8012c2e:	e020      	b.n	8012c72 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8012c30:	4b14      	ldr	r3, [pc, #80]	; (8012c84 <SX1276ReadRssi+0x90>)
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	4a14      	ldr	r2, [pc, #80]	; (8012c88 <SX1276ReadRssi+0x94>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d90a      	bls.n	8012c50 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8012c3a:	201b      	movs	r0, #27
 8012c3c:	f000 f8fc 	bl	8012e38 <SX1276Read>
 8012c40:	0003      	movs	r3, r0
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	3b9d      	subs	r3, #157	; 0x9d
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	230e      	movs	r3, #14
 8012c4a:	18fb      	adds	r3, r7, r3
 8012c4c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8012c4e:	e010      	b.n	8012c72 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8012c50:	201b      	movs	r0, #27
 8012c52:	f000 f8f1 	bl	8012e38 <SX1276Read>
 8012c56:	0003      	movs	r3, r0
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	3ba4      	subs	r3, #164	; 0xa4
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	230e      	movs	r3, #14
 8012c60:	18fb      	adds	r3, r7, r3
 8012c62:	801a      	strh	r2, [r3, #0]
        break;
 8012c64:	e005      	b.n	8012c72 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8012c66:	230e      	movs	r3, #14
 8012c68:	18fb      	adds	r3, r7, r3
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	4252      	negs	r2, r2
 8012c6e:	801a      	strh	r2, [r3, #0]
        break;
 8012c70:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8012c72:	230e      	movs	r3, #14
 8012c74:	18fb      	adds	r3, r7, r3
 8012c76:	2200      	movs	r2, #0
 8012c78:	5e9b      	ldrsh	r3, [r3, r2]
}
 8012c7a:	0018      	movs	r0, r3
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	b004      	add	sp, #16
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	46c0      	nop			; (mov r8, r8)
 8012c84:	20001110 	.word	0x20001110
 8012c88:	1f4add40 	.word	0x1f4add40

08012c8c <SX1276Reset>:

void SX1276Reset( void )
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 8012c90:	2200      	movs	r2, #0
 8012c92:	2101      	movs	r1, #1
 8012c94:	2002      	movs	r0, #2
 8012c96:	f005 ff15 	bl	8018ac4 <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 8012c9a:	2101      	movs	r1, #1
 8012c9c:	2002      	movs	r0, #2
 8012c9e:	f006 f931 	bl	8018f04 <gpio_reset>
	itsdk_delayMs(2);
 8012ca2:	2002      	movs	r0, #2
 8012ca4:	f006 fa72 	bl	801918c <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 8012ca8:	2204      	movs	r2, #4
 8012caa:	2101      	movs	r1, #1
 8012cac:	2002      	movs	r0, #2
 8012cae:	f005 ff09 	bl	8018ac4 <gpio_configure>
	itsdk_delayMs(10);
 8012cb2:	200a      	movs	r0, #10
 8012cb4:	f006 fa6a 	bl	801918c <itsdk_delayMs>
}
 8012cb8:	46c0      	nop			; (mov r8, r8)
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	0002      	movs	r2, r0
 8012cc8:	1dfb      	adds	r3, r7, #7
 8012cca:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 8012ccc:	1dfb      	adds	r3, r7, #7
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d11c      	bne.n	8012d0e <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	f000 f8af 	bl	8012e38 <SX1276Read>
 8012cda:	0003      	movs	r3, r0
 8012cdc:	b25b      	sxtb	r3, r3
 8012cde:	2207      	movs	r2, #7
 8012ce0:	4393      	bics	r3, r2
 8012ce2:	b25a      	sxtb	r2, r3
 8012ce4:	1dfb      	adds	r3, r7, #7
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	b25b      	sxtb	r3, r3
 8012cea:	4313      	orrs	r3, r2
 8012cec:	b25b      	sxtb	r3, r3
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	0019      	movs	r1, r3
 8012cf2:	2001      	movs	r0, #1
 8012cf4:	f000 f88c 	bl	8012e10 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8012cf8:	4b18      	ldr	r3, [pc, #96]	; (8012d5c <SX1276SetOpMode+0x9c>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	691b      	ldr	r3, [r3, #16]
 8012cfe:	2001      	movs	r0, #1
 8012d00:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8012d02:	4b16      	ldr	r3, [pc, #88]	; (8012d5c <SX1276SetOpMode+0x9c>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2000      	movs	r0, #0
 8012d0a:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8012d0c:	e022      	b.n	8012d54 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8012d0e:	4b13      	ldr	r3, [pc, #76]	; (8012d5c <SX1276SetOpMode+0x9c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2001      	movs	r0, #1
 8012d16:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8012d18:	4b10      	ldr	r3, [pc, #64]	; (8012d5c <SX1276SetOpMode+0x9c>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	691b      	ldr	r3, [r3, #16]
 8012d1e:	2000      	movs	r0, #0
 8012d20:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8012d22:	4b0e      	ldr	r3, [pc, #56]	; (8012d5c <SX1276SetOpMode+0x9c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	695b      	ldr	r3, [r3, #20]
 8012d28:	1dfa      	adds	r2, r7, #7
 8012d2a:	7812      	ldrb	r2, [r2, #0]
 8012d2c:	0010      	movs	r0, r2
 8012d2e:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8012d30:	2001      	movs	r0, #1
 8012d32:	f000 f881 	bl	8012e38 <SX1276Read>
 8012d36:	0003      	movs	r3, r0
 8012d38:	b25b      	sxtb	r3, r3
 8012d3a:	2207      	movs	r2, #7
 8012d3c:	4393      	bics	r3, r2
 8012d3e:	b25a      	sxtb	r2, r3
 8012d40:	1dfb      	adds	r3, r7, #7
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	b25b      	sxtb	r3, r3
 8012d46:	4313      	orrs	r3, r2
 8012d48:	b25b      	sxtb	r3, r3
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	0019      	movs	r1, r3
 8012d4e:	2001      	movs	r0, #1
 8012d50:	f000 f85e 	bl	8012e10 <SX1276Write>
}
 8012d54:	46c0      	nop			; (mov r8, r8)
 8012d56:	46bd      	mov	sp, r7
 8012d58:	b002      	add	sp, #8
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	20000cc0 	.word	0x20000cc0

08012d60 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	0002      	movs	r2, r0
 8012d68:	1dfb      	adds	r3, r7, #7
 8012d6a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8012d6c:	2001      	movs	r0, #1
 8012d6e:	f000 f863 	bl	8012e38 <SX1276Read>
 8012d72:	0003      	movs	r3, r0
 8012d74:	b25b      	sxtb	r3, r3
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	da03      	bge.n	8012d82 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8012d7a:	4b24      	ldr	r3, [pc, #144]	; (8012e0c <SX1276SetModem+0xac>)
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	715a      	strb	r2, [r3, #5]
 8012d80:	e002      	b.n	8012d88 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8012d82:	4b22      	ldr	r3, [pc, #136]	; (8012e0c <SX1276SetModem+0xac>)
 8012d84:	2200      	movs	r2, #0
 8012d86:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8012d88:	4b20      	ldr	r3, [pc, #128]	; (8012e0c <SX1276SetModem+0xac>)
 8012d8a:	795b      	ldrb	r3, [r3, #5]
 8012d8c:	1dfa      	adds	r2, r7, #7
 8012d8e:	7812      	ldrb	r2, [r2, #0]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d037      	beq.n	8012e04 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8012d94:	4b1d      	ldr	r3, [pc, #116]	; (8012e0c <SX1276SetModem+0xac>)
 8012d96:	1dfa      	adds	r2, r7, #7
 8012d98:	7812      	ldrb	r2, [r2, #0]
 8012d9a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8012d9c:	4b1b      	ldr	r3, [pc, #108]	; (8012e0c <SX1276SetModem+0xac>)
 8012d9e:	795b      	ldrb	r3, [r3, #5]
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	d016      	beq.n	8012dd2 <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 8012da4:	f7ff fc5e 	bl	8012664 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8012da8:	2001      	movs	r0, #1
 8012daa:	f000 f845 	bl	8012e38 <SX1276Read>
 8012dae:	0003      	movs	r3, r0
 8012db0:	001a      	movs	r2, r3
 8012db2:	237f      	movs	r3, #127	; 0x7f
 8012db4:	4013      	ands	r3, r2
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	0019      	movs	r1, r3
 8012dba:	2001      	movs	r0, #1
 8012dbc:	f000 f828 	bl	8012e10 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8012dc0:	2100      	movs	r1, #0
 8012dc2:	2040      	movs	r0, #64	; 0x40
 8012dc4:	f000 f824 	bl	8012e10 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8012dc8:	2130      	movs	r1, #48	; 0x30
 8012dca:	2041      	movs	r0, #65	; 0x41
 8012dcc:	f000 f820 	bl	8012e10 <SX1276Write>
        break;
 8012dd0:	e019      	b.n	8012e06 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 8012dd2:	f7ff fc47 	bl	8012664 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8012dd6:	2001      	movs	r0, #1
 8012dd8:	f000 f82e 	bl	8012e38 <SX1276Read>
 8012ddc:	0003      	movs	r3, r0
 8012dde:	001a      	movs	r2, r3
 8012de0:	2380      	movs	r3, #128	; 0x80
 8012de2:	425b      	negs	r3, r3
 8012de4:	4313      	orrs	r3, r2
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	0019      	movs	r1, r3
 8012dea:	2001      	movs	r0, #1
 8012dec:	f000 f810 	bl	8012e10 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8012df0:	2100      	movs	r1, #0
 8012df2:	2040      	movs	r0, #64	; 0x40
 8012df4:	f000 f80c 	bl	8012e10 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8012df8:	2100      	movs	r1, #0
 8012dfa:	2041      	movs	r0, #65	; 0x41
 8012dfc:	f000 f808 	bl	8012e10 <SX1276Write>
        break;
 8012e00:	46c0      	nop			; (mov r8, r8)
 8012e02:	e000      	b.n	8012e06 <SX1276SetModem+0xa6>
        return;
 8012e04:	46c0      	nop			; (mov r8, r8)
    }
}
 8012e06:	46bd      	mov	sp, r7
 8012e08:	b002      	add	sp, #8
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	20001110 	.word	0x20001110

08012e10 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	0002      	movs	r2, r0
 8012e18:	1dbb      	adds	r3, r7, #6
 8012e1a:	801a      	strh	r2, [r3, #0]
 8012e1c:	1d7b      	adds	r3, r7, #5
 8012e1e:	1c0a      	adds	r2, r1, #0
 8012e20:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 8012e22:	1d79      	adds	r1, r7, #5
 8012e24:	1dbb      	adds	r3, r7, #6
 8012e26:	881b      	ldrh	r3, [r3, #0]
 8012e28:	2201      	movs	r2, #1
 8012e2a:	0018      	movs	r0, r3
 8012e2c:	f000 f818 	bl	8012e60 <SX1276WriteBuffer>
}
 8012e30:	46c0      	nop			; (mov r8, r8)
 8012e32:	46bd      	mov	sp, r7
 8012e34:	b002      	add	sp, #8
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8012e38:	b590      	push	{r4, r7, lr}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	0002      	movs	r2, r0
 8012e40:	1dbb      	adds	r3, r7, #6
 8012e42:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8012e44:	240f      	movs	r4, #15
 8012e46:	1939      	adds	r1, r7, r4
 8012e48:	1dbb      	adds	r3, r7, #6
 8012e4a:	881b      	ldrh	r3, [r3, #0]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	0018      	movs	r0, r3
 8012e50:	f000 f854 	bl	8012efc <SX1276ReadBuffer>
    return data;
 8012e54:	193b      	adds	r3, r7, r4
 8012e56:	781b      	ldrb	r3, [r3, #0]
}
 8012e58:	0018      	movs	r0, r3
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	b005      	add	sp, #20
 8012e5e:	bd90      	pop	{r4, r7, pc}

08012e60 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8012e60:	b590      	push	{r4, r7, lr}
 8012e62:	b085      	sub	sp, #20
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6039      	str	r1, [r7, #0]
 8012e68:	0011      	movs	r1, r2
 8012e6a:	1dbb      	adds	r3, r7, #6
 8012e6c:	1c02      	adds	r2, r0, #0
 8012e6e:	801a      	strh	r2, [r3, #0]
 8012e70:	1d7b      	adds	r3, r7, #5
 8012e72:	1c0a      	adds	r2, r1, #0
 8012e74:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8012e76:	2380      	movs	r3, #128	; 0x80
 8012e78:	021b      	lsls	r3, r3, #8
 8012e7a:	0019      	movs	r1, r3
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	f006 f841 	bl	8018f04 <gpio_reset>

	uint16_t tx = addr | 0x80;
 8012e82:	1dbb      	adds	r3, r7, #6
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	2280      	movs	r2, #128	; 0x80
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	210c      	movs	r1, #12
 8012e8e:	187b      	adds	r3, r7, r1
 8012e90:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8012e92:	230a      	movs	r3, #10
 8012e94:	18fa      	adds	r2, r7, r3
 8012e96:	1879      	adds	r1, r7, r1
 8012e98:	4817      	ldr	r0, [pc, #92]	; (8012ef8 <SX1276WriteBuffer+0x98>)
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	f007 f81a 	bl	8019ed4 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8012ea0:	230f      	movs	r3, #15
 8012ea2:	18fb      	adds	r3, r7, r3
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	701a      	strb	r2, [r3, #0]
 8012ea8:	e015      	b.n	8012ed6 <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 8012eaa:	240f      	movs	r4, #15
 8012eac:	193b      	adds	r3, r7, r4
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	683a      	ldr	r2, [r7, #0]
 8012eb2:	18d3      	adds	r3, r2, r3
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	210c      	movs	r1, #12
 8012eba:	187b      	adds	r3, r7, r1
 8012ebc:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8012ebe:	230a      	movs	r3, #10
 8012ec0:	18fa      	adds	r2, r7, r3
 8012ec2:	1879      	adds	r1, r7, r1
 8012ec4:	480c      	ldr	r0, [pc, #48]	; (8012ef8 <SX1276WriteBuffer+0x98>)
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	f007 f804 	bl	8019ed4 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8012ecc:	193b      	adds	r3, r7, r4
 8012ece:	781a      	ldrb	r2, [r3, #0]
 8012ed0:	193b      	adds	r3, r7, r4
 8012ed2:	3201      	adds	r2, #1
 8012ed4:	701a      	strb	r2, [r3, #0]
 8012ed6:	230f      	movs	r3, #15
 8012ed8:	18fa      	adds	r2, r7, r3
 8012eda:	1d7b      	adds	r3, r7, #5
 8012edc:	7812      	ldrb	r2, [r2, #0]
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d3e2      	bcc.n	8012eaa <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8012ee4:	2380      	movs	r3, #128	; 0x80
 8012ee6:	021b      	lsls	r3, r3, #8
 8012ee8:	0019      	movs	r1, r3
 8012eea:	2000      	movs	r0, #0
 8012eec:	f005 fff2 	bl	8018ed4 <gpio_set>
}
 8012ef0:	46c0      	nop			; (mov r8, r8)
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	b005      	add	sp, #20
 8012ef6:	bd90      	pop	{r4, r7, pc}
 8012ef8:	20000f74 	.word	0x20000f74

08012efc <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8012efc:	b590      	push	{r4, r7, lr}
 8012efe:	b085      	sub	sp, #20
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6039      	str	r1, [r7, #0]
 8012f04:	0011      	movs	r1, r2
 8012f06:	1dbb      	adds	r3, r7, #6
 8012f08:	1c02      	adds	r2, r0, #0
 8012f0a:	801a      	strh	r2, [r3, #0]
 8012f0c:	1d7b      	adds	r3, r7, #5
 8012f0e:	1c0a      	adds	r2, r1, #0
 8012f10:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8012f12:	2380      	movs	r3, #128	; 0x80
 8012f14:	021b      	lsls	r3, r3, #8
 8012f16:	0019      	movs	r1, r3
 8012f18:	2000      	movs	r0, #0
 8012f1a:	f005 fff3 	bl	8018f04 <gpio_reset>

	uint16_t tx = addr & 0x7f;
 8012f1e:	1dbb      	adds	r3, r7, #6
 8012f20:	881b      	ldrh	r3, [r3, #0]
 8012f22:	227f      	movs	r2, #127	; 0x7f
 8012f24:	4013      	ands	r3, r2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	210c      	movs	r1, #12
 8012f2a:	187b      	adds	r3, r7, r1
 8012f2c:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8012f2e:	230a      	movs	r3, #10
 8012f30:	18fa      	adds	r2, r7, r3
 8012f32:	000c      	movs	r4, r1
 8012f34:	1879      	adds	r1, r7, r1
 8012f36:	481a      	ldr	r0, [pc, #104]	; (8012fa0 <SX1276ReadBuffer+0xa4>)
 8012f38:	2301      	movs	r3, #1
 8012f3a:	f006 ffcb 	bl	8019ed4 <spi_rwRegister>

	tx = 0;
 8012f3e:	0021      	movs	r1, r4
 8012f40:	187b      	adds	r3, r7, r1
 8012f42:	2200      	movs	r2, #0
 8012f44:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8012f46:	230f      	movs	r3, #15
 8012f48:	18fb      	adds	r3, r7, r3
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	701a      	strb	r2, [r3, #0]
 8012f4e:	e015      	b.n	8012f7c <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8012f50:	240a      	movs	r4, #10
 8012f52:	193a      	adds	r2, r7, r4
 8012f54:	230c      	movs	r3, #12
 8012f56:	18f9      	adds	r1, r7, r3
 8012f58:	4811      	ldr	r0, [pc, #68]	; (8012fa0 <SX1276ReadBuffer+0xa4>)
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	f006 ffba 	bl	8019ed4 <spi_rwRegister>
    	buffer[i] = rx;
 8012f60:	193b      	adds	r3, r7, r4
 8012f62:	8819      	ldrh	r1, [r3, #0]
 8012f64:	200f      	movs	r0, #15
 8012f66:	183b      	adds	r3, r7, r0
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	683a      	ldr	r2, [r7, #0]
 8012f6c:	18d3      	adds	r3, r2, r3
 8012f6e:	b2ca      	uxtb	r2, r1
 8012f70:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8012f72:	183b      	adds	r3, r7, r0
 8012f74:	781a      	ldrb	r2, [r3, #0]
 8012f76:	183b      	adds	r3, r7, r0
 8012f78:	3201      	adds	r2, #1
 8012f7a:	701a      	strb	r2, [r3, #0]
 8012f7c:	230f      	movs	r3, #15
 8012f7e:	18fa      	adds	r2, r7, r3
 8012f80:	1d7b      	adds	r3, r7, #5
 8012f82:	7812      	ldrb	r2, [r2, #0]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d3e2      	bcc.n	8012f50 <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8012f8a:	2380      	movs	r3, #128	; 0x80
 8012f8c:	021b      	lsls	r3, r3, #8
 8012f8e:	0019      	movs	r1, r3
 8012f90:	2000      	movs	r0, #0
 8012f92:	f005 ff9f 	bl	8018ed4 <gpio_set>
}
 8012f96:	46c0      	nop			; (mov r8, r8)
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	b005      	add	sp, #20
 8012f9c:	bd90      	pop	{r4, r7, pc}
 8012f9e:	46c0      	nop			; (mov r8, r8)
 8012fa0:	20000f74 	.word	0x20000f74

08012fa4 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	000a      	movs	r2, r1
 8012fae:	1cfb      	adds	r3, r7, #3
 8012fb0:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 8012fb2:	1cfb      	adds	r3, r7, #3
 8012fb4:	781a      	ldrb	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	0019      	movs	r1, r3
 8012fba:	2000      	movs	r0, #0
 8012fbc:	f7ff ff50 	bl	8012e60 <SX1276WriteBuffer>
}
 8012fc0:	46c0      	nop			; (mov r8, r8)
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	b002      	add	sp, #8
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	000a      	movs	r2, r1
 8012fd2:	1cfb      	adds	r3, r7, #3
 8012fd4:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 8012fd6:	1cfb      	adds	r3, r7, #3
 8012fd8:	781a      	ldrb	r2, [r3, #0]
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	0019      	movs	r1, r3
 8012fde:	2000      	movs	r0, #0
 8012fe0:	f7ff ff8c 	bl	8012efc <SX1276ReadBuffer>
}
 8012fe4:	46c0      	nop			; (mov r8, r8)
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	b002      	add	sp, #8
 8012fea:	bd80      	pop	{r7, pc}

08012fec <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	0002      	movs	r2, r0
 8012ff4:	1dfb      	adds	r3, r7, #7
 8012ff6:	701a      	strb	r2, [r3, #0]
 8012ff8:	1dbb      	adds	r3, r7, #6
 8012ffa:	1c0a      	adds	r2, r1, #0
 8012ffc:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 8012ffe:	1dfb      	adds	r3, r7, #7
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	0018      	movs	r0, r3
 8013004:	f7ff feac 	bl	8012d60 <SX1276SetModem>

    switch( modem )
 8013008:	1dfb      	adds	r3, r7, #7
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d002      	beq.n	8013016 <SX1276SetMaxPayloadLength+0x2a>
 8013010:	2b01      	cmp	r3, #1
 8013012:	d00f      	beq.n	8013034 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8013014:	e016      	b.n	8013044 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8013016:	4b0d      	ldr	r3, [pc, #52]	; (801304c <SX1276SetMaxPayloadLength+0x60>)
 8013018:	2222      	movs	r2, #34	; 0x22
 801301a:	5c9b      	ldrb	r3, [r3, r2]
 801301c:	2201      	movs	r2, #1
 801301e:	4053      	eors	r3, r2
 8013020:	b2db      	uxtb	r3, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	d00d      	beq.n	8013042 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8013026:	1dbb      	adds	r3, r7, #6
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	0019      	movs	r1, r3
 801302c:	2032      	movs	r0, #50	; 0x32
 801302e:	f7ff feef 	bl	8012e10 <SX1276Write>
        break;
 8013032:	e006      	b.n	8013042 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8013034:	1dbb      	adds	r3, r7, #6
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	0019      	movs	r1, r3
 801303a:	2023      	movs	r0, #35	; 0x23
 801303c:	f7ff fee8 	bl	8012e10 <SX1276Write>
        break;
 8013040:	e000      	b.n	8013044 <SX1276SetMaxPayloadLength+0x58>
        break;
 8013042:	46c0      	nop			; (mov r8, r8)
}
 8013044:	46c0      	nop			; (mov r8, r8)
 8013046:	46bd      	mov	sp, r7
 8013048:	b002      	add	sp, #8
 801304a:	bd80      	pop	{r7, pc}
 801304c:	20001110 	.word	0x20001110

08013050 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	0002      	movs	r2, r0
 8013058:	1dfb      	adds	r3, r7, #7
 801305a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 801305c:	2001      	movs	r0, #1
 801305e:	f7ff fe7f 	bl	8012d60 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8013062:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <SX1276SetPublicNetwork+0x40>)
 8013064:	1dfa      	adds	r2, r7, #7
 8013066:	215c      	movs	r1, #92	; 0x5c
 8013068:	7812      	ldrb	r2, [r2, #0]
 801306a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801306c:	1dfb      	adds	r3, r7, #7
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d004      	beq.n	801307e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8013074:	2134      	movs	r1, #52	; 0x34
 8013076:	2039      	movs	r0, #57	; 0x39
 8013078:	f7ff feca 	bl	8012e10 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801307c:	e003      	b.n	8013086 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801307e:	2112      	movs	r1, #18
 8013080:	2039      	movs	r0, #57	; 0x39
 8013082:	f7ff fec5 	bl	8012e10 <SX1276Write>
}
 8013086:	46c0      	nop			; (mov r8, r8)
 8013088:	46bd      	mov	sp, r7
 801308a:	b002      	add	sp, #8
 801308c:	bd80      	pop	{r7, pc}
 801308e:	46c0      	nop			; (mov r8, r8)
 8013090:	20001110 	.word	0x20001110

08013094 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8013094:	b580      	push	{r7, lr}
 8013096:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 8013098:	4b04      	ldr	r3, [pc, #16]	; (80130ac <SX1276GetWakeupTime+0x18>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4798      	blx	r3
 80130a0:	0003      	movs	r3, r0
 80130a2:	3335      	adds	r3, #53	; 0x35
}
 80130a4:	0018      	movs	r0, r3
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	46c0      	nop			; (mov r8, r8)
 80130ac:	20000cc0 	.word	0x20000cc0

080130b0 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 80130b0:	b590      	push	{r4, r7, lr}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 80130b8:	4b51      	ldr	r3, [pc, #324]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130ba:	791b      	ldrb	r3, [r3, #4]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d002      	beq.n	80130c6 <SX1276OnTimeoutIrq+0x16>
 80130c0:	2b02      	cmp	r3, #2
 80130c2:	d045      	beq.n	8013150 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 80130c4:	e098      	b.n	80131f8 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 80130c6:	4b4e      	ldr	r3, [pc, #312]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130c8:	795b      	ldrb	r3, [r3, #5]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d132      	bne.n	8013134 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80130ce:	4b4c      	ldr	r3, [pc, #304]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130d0:	2230      	movs	r2, #48	; 0x30
 80130d2:	2100      	movs	r1, #0
 80130d4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80130d6:	4b4a      	ldr	r3, [pc, #296]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130d8:	2231      	movs	r2, #49	; 0x31
 80130da:	2100      	movs	r1, #0
 80130dc:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80130de:	4b48      	ldr	r3, [pc, #288]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80130e4:	4b46      	ldr	r3, [pc, #280]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130e6:	2200      	movs	r2, #0
 80130e8:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80130ea:	210b      	movs	r1, #11
 80130ec:	203e      	movs	r0, #62	; 0x3e
 80130ee:	f7ff fe8f 	bl	8012e10 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80130f2:	2110      	movs	r1, #16
 80130f4:	203f      	movs	r0, #63	; 0x3f
 80130f6:	f7ff fe8b 	bl	8012e10 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80130fa:	4b41      	ldr	r3, [pc, #260]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80130fc:	2226      	movs	r2, #38	; 0x26
 80130fe:	5c9b      	ldrb	r3, [r3, r2]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d010      	beq.n	8013126 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8013104:	200d      	movs	r0, #13
 8013106:	f7ff fe97 	bl	8012e38 <SX1276Read>
 801310a:	0003      	movs	r3, r0
 801310c:	001a      	movs	r2, r3
 801310e:	2340      	movs	r3, #64	; 0x40
 8013110:	4313      	orrs	r3, r2
 8013112:	b2db      	uxtb	r3, r3
 8013114:	0019      	movs	r1, r3
 8013116:	200d      	movs	r0, #13
 8013118:	f7ff fe7a 	bl	8012e10 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 801311c:	4b39      	ldr	r3, [pc, #228]	; (8013204 <SX1276OnTimeoutIrq+0x154>)
 801311e:	0018      	movs	r0, r3
 8013120:	f7fd fd9e 	bl	8010c60 <TimerStart>
 8013124:	e006      	b.n	8013134 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8013126:	4b36      	ldr	r3, [pc, #216]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 8013128:	2200      	movs	r2, #0
 801312a:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801312c:	4b35      	ldr	r3, [pc, #212]	; (8013204 <SX1276OnTimeoutIrq+0x154>)
 801312e:	0018      	movs	r0, r3
 8013130:	f7fd fdec 	bl	8010d0c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8013134:	4b34      	ldr	r3, [pc, #208]	; (8013208 <SX1276OnTimeoutIrq+0x158>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d05a      	beq.n	80131f2 <SX1276OnTimeoutIrq+0x142>
 801313c:	4b32      	ldr	r3, [pc, #200]	; (8013208 <SX1276OnTimeoutIrq+0x158>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d055      	beq.n	80131f2 <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 8013146:	4b30      	ldr	r3, [pc, #192]	; (8013208 <SX1276OnTimeoutIrq+0x158>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	4798      	blx	r3
        break;
 801314e:	e050      	b.n	80131f2 <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 8013150:	f7ff fd9c 	bl	8012c8c <SX1276Reset>
        RxChainCalibration( );
 8013154:	f7fe fae4 	bl	8011720 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8013158:	2000      	movs	r0, #0
 801315a:	f7ff fdb1 	bl	8012cc0 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801315e:	230f      	movs	r3, #15
 8013160:	18fb      	adds	r3, r7, r3
 8013162:	2200      	movs	r2, #0
 8013164:	701a      	strb	r2, [r3, #0]
 8013166:	e025      	b.n	80131b4 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8013168:	240f      	movs	r4, #15
 801316a:	193b      	adds	r3, r7, r4
 801316c:	781a      	ldrb	r2, [r3, #0]
 801316e:	4927      	ldr	r1, [pc, #156]	; (801320c <SX1276OnTimeoutIrq+0x15c>)
 8013170:	0013      	movs	r3, r2
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	189b      	adds	r3, r3, r2
 8013176:	5c5b      	ldrb	r3, [r3, r1]
 8013178:	0018      	movs	r0, r3
 801317a:	f7ff fdf1 	bl	8012d60 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801317e:	193b      	adds	r3, r7, r4
 8013180:	781a      	ldrb	r2, [r3, #0]
 8013182:	4922      	ldr	r1, [pc, #136]	; (801320c <SX1276OnTimeoutIrq+0x15c>)
 8013184:	0013      	movs	r3, r2
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	189b      	adds	r3, r3, r2
 801318a:	18cb      	adds	r3, r1, r3
 801318c:	3301      	adds	r3, #1
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	b298      	uxth	r0, r3
 8013192:	193b      	adds	r3, r7, r4
 8013194:	781a      	ldrb	r2, [r3, #0]
 8013196:	491d      	ldr	r1, [pc, #116]	; (801320c <SX1276OnTimeoutIrq+0x15c>)
 8013198:	0013      	movs	r3, r2
 801319a:	005b      	lsls	r3, r3, #1
 801319c:	189b      	adds	r3, r3, r2
 801319e:	18cb      	adds	r3, r1, r3
 80131a0:	3302      	adds	r3, #2
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	0019      	movs	r1, r3
 80131a6:	f7ff fe33 	bl	8012e10 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80131aa:	193b      	adds	r3, r7, r4
 80131ac:	781a      	ldrb	r2, [r3, #0]
 80131ae:	193b      	adds	r3, r7, r4
 80131b0:	3201      	adds	r2, #1
 80131b2:	701a      	strb	r2, [r3, #0]
 80131b4:	230f      	movs	r3, #15
 80131b6:	18fb      	adds	r3, r7, r3
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	2b0f      	cmp	r3, #15
 80131bc:	d9d4      	bls.n	8013168 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 80131be:	2000      	movs	r0, #0
 80131c0:	f7ff fdce 	bl	8012d60 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80131c4:	4b0e      	ldr	r3, [pc, #56]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80131c6:	225c      	movs	r2, #92	; 0x5c
 80131c8:	5c9b      	ldrb	r3, [r3, r2]
 80131ca:	0018      	movs	r0, r3
 80131cc:	f7ff ff40 	bl	8013050 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80131d0:	4b0b      	ldr	r3, [pc, #44]	; (8013200 <SX1276OnTimeoutIrq+0x150>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80131d6:	4b0c      	ldr	r3, [pc, #48]	; (8013208 <SX1276OnTimeoutIrq+0x158>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d00b      	beq.n	80131f6 <SX1276OnTimeoutIrq+0x146>
 80131de:	4b0a      	ldr	r3, [pc, #40]	; (8013208 <SX1276OnTimeoutIrq+0x158>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d006      	beq.n	80131f6 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 80131e8:	4b07      	ldr	r3, [pc, #28]	; (8013208 <SX1276OnTimeoutIrq+0x158>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	4798      	blx	r3
        break;
 80131f0:	e001      	b.n	80131f6 <SX1276OnTimeoutIrq+0x146>
        break;
 80131f2:	46c0      	nop			; (mov r8, r8)
 80131f4:	e000      	b.n	80131f8 <SX1276OnTimeoutIrq+0x148>
        break;
 80131f6:	46c0      	nop			; (mov r8, r8)
    }
}
 80131f8:	46c0      	nop			; (mov r8, r8)
 80131fa:	46bd      	mov	sp, r7
 80131fc:	b005      	add	sp, #20
 80131fe:	bd90      	pop	{r4, r7, pc}
 8013200:	20001110 	.word	0x20001110
 8013204:	200010f8 	.word	0x200010f8
 8013208:	20000bbc 	.word	0x20000bbc
 801320c:	0801bd08 	.word	0x0801bd08

08013210 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8013210:	b5b0      	push	{r4, r5, r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 8013218:	230d      	movs	r3, #13
 801321a:	18fb      	adds	r3, r7, r3
 801321c:	2200      	movs	r2, #0
 801321e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8013220:	4bca      	ldr	r3, [pc, #808]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013222:	791b      	ldrb	r3, [r3, #4]
 8013224:	2b01      	cmp	r3, #1
 8013226:	d003      	beq.n	8013230 <SX1276OnDio0Irq+0x20>
 8013228:	2b02      	cmp	r3, #2
 801322a:	d100      	bne.n	801322e <SX1276OnDio0Irq+0x1e>
 801322c:	e1f2      	b.n	8013614 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 801322e:	e20f      	b.n	8013650 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8013230:	4bc6      	ldr	r3, [pc, #792]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013232:	795b      	ldrb	r3, [r3, #5]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d003      	beq.n	8013240 <SX1276OnDio0Irq+0x30>
 8013238:	2b01      	cmp	r3, #1
 801323a:	d100      	bne.n	801323e <SX1276OnDio0Irq+0x2e>
 801323c:	e0eb      	b.n	8013416 <SX1276OnDio0Irq+0x206>
                break;
 801323e:	e1e8      	b.n	8013612 <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8013240:	4bc2      	ldr	r3, [pc, #776]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013242:	2224      	movs	r2, #36	; 0x24
 8013244:	5c9b      	ldrb	r3, [r3, r2]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d057      	beq.n	80132fa <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801324a:	203f      	movs	r0, #63	; 0x3f
 801324c:	f7ff fdf4 	bl	8012e38 <SX1276Read>
 8013250:	0003      	movs	r3, r0
 8013252:	001a      	movs	r2, r3
 8013254:	210d      	movs	r1, #13
 8013256:	187b      	adds	r3, r7, r1
 8013258:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801325a:	187b      	adds	r3, r7, r1
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	b2db      	uxtb	r3, r3
 8013260:	001a      	movs	r2, r3
 8013262:	2302      	movs	r3, #2
 8013264:	4013      	ands	r3, r2
 8013266:	2b02      	cmp	r3, #2
 8013268:	d047      	beq.n	80132fa <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801326a:	210b      	movs	r1, #11
 801326c:	203e      	movs	r0, #62	; 0x3e
 801326e:	f7ff fdcf 	bl	8012e10 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8013272:	2110      	movs	r1, #16
 8013274:	203f      	movs	r0, #63	; 0x3f
 8013276:	f7ff fdcb 	bl	8012e10 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801327a:	4bb5      	ldr	r3, [pc, #724]	; (8013550 <SX1276OnDio0Irq+0x340>)
 801327c:	0018      	movs	r0, r3
 801327e:	f7fd fd45 	bl	8010d0c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8013282:	4bb2      	ldr	r3, [pc, #712]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013284:	2226      	movs	r2, #38	; 0x26
 8013286:	5c9b      	ldrb	r3, [r3, r2]
 8013288:	2201      	movs	r2, #1
 801328a:	4053      	eors	r3, r2
 801328c:	b2db      	uxtb	r3, r3
 801328e:	2b00      	cmp	r3, #0
 8013290:	d007      	beq.n	80132a2 <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 8013292:	4bb0      	ldr	r3, [pc, #704]	; (8013554 <SX1276OnDio0Irq+0x344>)
 8013294:	0018      	movs	r0, r3
 8013296:	f7fd fd39 	bl	8010d0c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 801329a:	4bac      	ldr	r3, [pc, #688]	; (801354c <SX1276OnDio0Irq+0x33c>)
 801329c:	2200      	movs	r2, #0
 801329e:	711a      	strb	r2, [r3, #4]
 80132a0:	e00f      	b.n	80132c2 <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80132a2:	200d      	movs	r0, #13
 80132a4:	f7ff fdc8 	bl	8012e38 <SX1276Read>
 80132a8:	0003      	movs	r3, r0
 80132aa:	001a      	movs	r2, r3
 80132ac:	2340      	movs	r3, #64	; 0x40
 80132ae:	4313      	orrs	r3, r2
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	0019      	movs	r1, r3
 80132b4:	200d      	movs	r0, #13
 80132b6:	f7ff fdab 	bl	8012e10 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80132ba:	4ba6      	ldr	r3, [pc, #664]	; (8013554 <SX1276OnDio0Irq+0x344>)
 80132bc:	0018      	movs	r0, r3
 80132be:	f7fd fccf 	bl	8010c60 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80132c2:	4ba5      	ldr	r3, [pc, #660]	; (8013558 <SX1276OnDio0Irq+0x348>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d008      	beq.n	80132dc <SX1276OnDio0Irq+0xcc>
 80132ca:	4ba3      	ldr	r3, [pc, #652]	; (8013558 <SX1276OnDio0Irq+0x348>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	691b      	ldr	r3, [r3, #16]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d003      	beq.n	80132dc <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 80132d4:	4ba0      	ldr	r3, [pc, #640]	; (8013558 <SX1276OnDio0Irq+0x348>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	691b      	ldr	r3, [r3, #16]
 80132da:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80132dc:	4b9b      	ldr	r3, [pc, #620]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80132de:	2230      	movs	r2, #48	; 0x30
 80132e0:	2100      	movs	r1, #0
 80132e2:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80132e4:	4b99      	ldr	r3, [pc, #612]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80132e6:	2231      	movs	r2, #49	; 0x31
 80132e8:	2100      	movs	r1, #0
 80132ea:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80132ec:	4b97      	ldr	r3, [pc, #604]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80132ee:	2200      	movs	r2, #0
 80132f0:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80132f2:	4b96      	ldr	r3, [pc, #600]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 80132f8:	e18b      	b.n	8013612 <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80132fa:	4b94      	ldr	r3, [pc, #592]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80132fc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d12d      	bne.n	801335e <SX1276OnDio0Irq+0x14e>
 8013302:	4b92      	ldr	r3, [pc, #584]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013304:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013306:	2b00      	cmp	r3, #0
 8013308:	d129      	bne.n	801335e <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801330a:	4b90      	ldr	r3, [pc, #576]	; (801354c <SX1276OnDio0Irq+0x33c>)
 801330c:	2222      	movs	r2, #34	; 0x22
 801330e:	5c9b      	ldrb	r3, [r3, r2]
 8013310:	2201      	movs	r2, #1
 8013312:	4053      	eors	r3, r2
 8013314:	b2db      	uxtb	r3, r3
 8013316:	2b00      	cmp	r3, #0
 8013318:	d005      	beq.n	8013326 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801331a:	4b90      	ldr	r3, [pc, #576]	; (801355c <SX1276OnDio0Irq+0x34c>)
 801331c:	2101      	movs	r1, #1
 801331e:	0018      	movs	r0, r3
 8013320:	f7ff fe52 	bl	8012fc8 <SX1276ReadFifo>
 8013324:	e006      	b.n	8013334 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8013326:	2032      	movs	r0, #50	; 0x32
 8013328:	f7ff fd86 	bl	8012e38 <SX1276Read>
 801332c:	0003      	movs	r3, r0
 801332e:	b29a      	uxth	r2, r3
 8013330:	4b86      	ldr	r3, [pc, #536]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013332:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8013334:	4b85      	ldr	r3, [pc, #532]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013336:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013338:	001a      	movs	r2, r3
 801333a:	4b89      	ldr	r3, [pc, #548]	; (8013560 <SX1276OnDio0Irq+0x350>)
 801333c:	18d0      	adds	r0, r2, r3
 801333e:	4b83      	ldr	r3, [pc, #524]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013340:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013342:	b2da      	uxtb	r2, r3
 8013344:	4b81      	ldr	r3, [pc, #516]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013346:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013348:	b2db      	uxtb	r3, r3
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	b2db      	uxtb	r3, r3
 801334e:	0019      	movs	r1, r3
 8013350:	f7ff fe3a 	bl	8012fc8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8013354:	4b7d      	ldr	r3, [pc, #500]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013356:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8013358:	4b7c      	ldr	r3, [pc, #496]	; (801354c <SX1276OnDio0Irq+0x33c>)
 801335a:	879a      	strh	r2, [r3, #60]	; 0x3c
 801335c:	e013      	b.n	8013386 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801335e:	4b7b      	ldr	r3, [pc, #492]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013360:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013362:	001a      	movs	r2, r3
 8013364:	4b7e      	ldr	r3, [pc, #504]	; (8013560 <SX1276OnDio0Irq+0x350>)
 8013366:	18d0      	adds	r0, r2, r3
 8013368:	4b78      	ldr	r3, [pc, #480]	; (801354c <SX1276OnDio0Irq+0x33c>)
 801336a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801336c:	b2da      	uxtb	r2, r3
 801336e:	4b77      	ldr	r3, [pc, #476]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013370:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013372:	b2db      	uxtb	r3, r3
 8013374:	1ad3      	subs	r3, r2, r3
 8013376:	b2db      	uxtb	r3, r3
 8013378:	0019      	movs	r1, r3
 801337a:	f7ff fe25 	bl	8012fc8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801337e:	4b73      	ldr	r3, [pc, #460]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013380:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8013382:	4b72      	ldr	r3, [pc, #456]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013384:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8013386:	4b72      	ldr	r3, [pc, #456]	; (8013550 <SX1276OnDio0Irq+0x340>)
 8013388:	0018      	movs	r0, r3
 801338a:	f7fd fcbf 	bl	8010d0c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801338e:	4b6f      	ldr	r3, [pc, #444]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013390:	2226      	movs	r2, #38	; 0x26
 8013392:	5c9b      	ldrb	r3, [r3, r2]
 8013394:	2201      	movs	r2, #1
 8013396:	4053      	eors	r3, r2
 8013398:	b2db      	uxtb	r3, r3
 801339a:	2b00      	cmp	r3, #0
 801339c:	d007      	beq.n	80133ae <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 801339e:	4b6b      	ldr	r3, [pc, #428]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80133a0:	2200      	movs	r2, #0
 80133a2:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80133a4:	4b6b      	ldr	r3, [pc, #428]	; (8013554 <SX1276OnDio0Irq+0x344>)
 80133a6:	0018      	movs	r0, r3
 80133a8:	f7fd fcb0 	bl	8010d0c <TimerStop>
 80133ac:	e00f      	b.n	80133ce <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80133ae:	200d      	movs	r0, #13
 80133b0:	f7ff fd42 	bl	8012e38 <SX1276Read>
 80133b4:	0003      	movs	r3, r0
 80133b6:	001a      	movs	r2, r3
 80133b8:	2340      	movs	r3, #64	; 0x40
 80133ba:	4313      	orrs	r3, r2
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	0019      	movs	r1, r3
 80133c0:	200d      	movs	r0, #13
 80133c2:	f7ff fd25 	bl	8012e10 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 80133c6:	4b63      	ldr	r3, [pc, #396]	; (8013554 <SX1276OnDio0Irq+0x344>)
 80133c8:	0018      	movs	r0, r3
 80133ca:	f7fd fc49 	bl	8010c60 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80133ce:	4b62      	ldr	r3, [pc, #392]	; (8013558 <SX1276OnDio0Irq+0x348>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d010      	beq.n	80133f8 <SX1276OnDio0Irq+0x1e8>
 80133d6:	4b60      	ldr	r3, [pc, #384]	; (8013558 <SX1276OnDio0Irq+0x348>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00b      	beq.n	80133f8 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80133e0:	4b5d      	ldr	r3, [pc, #372]	; (8013558 <SX1276OnDio0Irq+0x348>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	689c      	ldr	r4, [r3, #8]
 80133e6:	4b59      	ldr	r3, [pc, #356]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80133e8:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80133ea:	4b58      	ldr	r3, [pc, #352]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80133ec:	2232      	movs	r2, #50	; 0x32
 80133ee:	569b      	ldrsb	r3, [r3, r2]
 80133f0:	b21a      	sxth	r2, r3
 80133f2:	485b      	ldr	r0, [pc, #364]	; (8013560 <SX1276OnDio0Irq+0x350>)
 80133f4:	2300      	movs	r3, #0
 80133f6:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80133f8:	4b54      	ldr	r3, [pc, #336]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80133fa:	2230      	movs	r2, #48	; 0x30
 80133fc:	2100      	movs	r1, #0
 80133fe:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8013400:	4b52      	ldr	r3, [pc, #328]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013402:	2231      	movs	r2, #49	; 0x31
 8013404:	2100      	movs	r1, #0
 8013406:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8013408:	4b50      	ldr	r3, [pc, #320]	; (801354c <SX1276OnDio0Irq+0x33c>)
 801340a:	2200      	movs	r2, #0
 801340c:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801340e:	4b4f      	ldr	r3, [pc, #316]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013410:	2200      	movs	r2, #0
 8013412:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8013414:	e0fd      	b.n	8013612 <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8013416:	2140      	movs	r1, #64	; 0x40
 8013418:	2012      	movs	r0, #18
 801341a:	f7ff fcf9 	bl	8012e10 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801341e:	2012      	movs	r0, #18
 8013420:	f7ff fd0a 	bl	8012e38 <SX1276Read>
 8013424:	0003      	movs	r3, r0
 8013426:	001a      	movs	r2, r3
 8013428:	210d      	movs	r1, #13
 801342a:	187b      	adds	r3, r7, r1
 801342c:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801342e:	187b      	adds	r3, r7, r1
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	b2db      	uxtb	r3, r3
 8013434:	001a      	movs	r2, r3
 8013436:	2320      	movs	r3, #32
 8013438:	4013      	ands	r3, r2
 801343a:	2b20      	cmp	r3, #32
 801343c:	d122      	bne.n	8013484 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801343e:	2120      	movs	r1, #32
 8013440:	2012      	movs	r0, #18
 8013442:	f7ff fce5 	bl	8012e10 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8013446:	4b41      	ldr	r3, [pc, #260]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013448:	2256      	movs	r2, #86	; 0x56
 801344a:	5c9b      	ldrb	r3, [r3, r2]
 801344c:	2201      	movs	r2, #1
 801344e:	4053      	eors	r3, r2
 8013450:	b2db      	uxtb	r3, r3
 8013452:	2b00      	cmp	r3, #0
 8013454:	d002      	beq.n	801345c <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8013456:	4b3d      	ldr	r3, [pc, #244]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013458:	2200      	movs	r2, #0
 801345a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801345c:	4b3c      	ldr	r3, [pc, #240]	; (8013550 <SX1276OnDio0Irq+0x340>)
 801345e:	0018      	movs	r0, r3
 8013460:	f7fd fc54 	bl	8010d0c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8013464:	4b3c      	ldr	r3, [pc, #240]	; (8013558 <SX1276OnDio0Irq+0x348>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d100      	bne.n	801346e <SX1276OnDio0Irq+0x25e>
 801346c:	e0ce      	b.n	801360c <SX1276OnDio0Irq+0x3fc>
 801346e:	4b3a      	ldr	r3, [pc, #232]	; (8013558 <SX1276OnDio0Irq+0x348>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	691b      	ldr	r3, [r3, #16]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d100      	bne.n	801347a <SX1276OnDio0Irq+0x26a>
 8013478:	e0c8      	b.n	801360c <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 801347a:	4b37      	ldr	r3, [pc, #220]	; (8013558 <SX1276OnDio0Irq+0x348>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	691b      	ldr	r3, [r3, #16]
 8013480:	4798      	blx	r3
                        break;
 8013482:	e0c3      	b.n	801360c <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8013484:	2019      	movs	r0, #25
 8013486:	f7ff fcd7 	bl	8012e38 <SX1276Read>
 801348a:	0003      	movs	r3, r0
 801348c:	b25b      	sxtb	r3, r3
 801348e:	3302      	adds	r3, #2
 8013490:	109b      	asrs	r3, r3, #2
 8013492:	b259      	sxtb	r1, r3
 8013494:	4b2d      	ldr	r3, [pc, #180]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013496:	2260      	movs	r2, #96	; 0x60
 8013498:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801349a:	201a      	movs	r0, #26
 801349c:	f7ff fccc 	bl	8012e38 <SX1276Read>
 80134a0:	0003      	movs	r3, r0
 80134a2:	001a      	movs	r2, r3
 80134a4:	230e      	movs	r3, #14
 80134a6:	18fb      	adds	r3, r7, r3
 80134a8:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80134aa:	4b28      	ldr	r3, [pc, #160]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80134ac:	2260      	movs	r2, #96	; 0x60
 80134ae:	569b      	ldrsb	r3, [r3, r2]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	da34      	bge.n	801351e <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80134b4:	4b25      	ldr	r3, [pc, #148]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	4a2a      	ldr	r2, [pc, #168]	; (8013564 <SX1276OnDio0Irq+0x354>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d917      	bls.n	80134ee <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80134be:	210e      	movs	r1, #14
 80134c0:	187b      	adds	r3, r7, r1
 80134c2:	2200      	movs	r2, #0
 80134c4:	5e9b      	ldrsh	r3, [r3, r2]
 80134c6:	111b      	asrs	r3, r3, #4
 80134c8:	b21b      	sxth	r3, r3
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	187b      	adds	r3, r7, r1
 80134ce:	881b      	ldrh	r3, [r3, #0]
 80134d0:	18d3      	adds	r3, r2, r3
 80134d2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80134d4:	4b1d      	ldr	r3, [pc, #116]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80134d6:	2160      	movs	r1, #96	; 0x60
 80134d8:	565b      	ldrsb	r3, [r3, r1]
 80134da:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80134dc:	18d3      	adds	r3, r2, r3
 80134de:	b29b      	uxth	r3, r3
 80134e0:	3b9d      	subs	r3, #157	; 0x9d
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	b219      	sxth	r1, r3
 80134e6:	4b19      	ldr	r3, [pc, #100]	; (801354c <SX1276OnDio0Irq+0x33c>)
 80134e8:	2262      	movs	r2, #98	; 0x62
 80134ea:	5299      	strh	r1, [r3, r2]
 80134ec:	e04d      	b.n	801358a <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80134ee:	210e      	movs	r1, #14
 80134f0:	187b      	adds	r3, r7, r1
 80134f2:	2200      	movs	r2, #0
 80134f4:	5e9b      	ldrsh	r3, [r3, r2]
 80134f6:	111b      	asrs	r3, r3, #4
 80134f8:	b21b      	sxth	r3, r3
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	187b      	adds	r3, r7, r1
 80134fe:	881b      	ldrh	r3, [r3, #0]
 8013500:	18d3      	adds	r3, r2, r3
 8013502:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8013504:	4b11      	ldr	r3, [pc, #68]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013506:	2160      	movs	r1, #96	; 0x60
 8013508:	565b      	ldrsb	r3, [r3, r1]
 801350a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801350c:	18d3      	adds	r3, r2, r3
 801350e:	b29b      	uxth	r3, r3
 8013510:	3ba4      	subs	r3, #164	; 0xa4
 8013512:	b29b      	uxth	r3, r3
 8013514:	b219      	sxth	r1, r3
 8013516:	4b0d      	ldr	r3, [pc, #52]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013518:	2262      	movs	r2, #98	; 0x62
 801351a:	5299      	strh	r1, [r3, r2]
 801351c:	e035      	b.n	801358a <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801351e:	4b0b      	ldr	r3, [pc, #44]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013520:	689b      	ldr	r3, [r3, #8]
 8013522:	4a10      	ldr	r2, [pc, #64]	; (8013564 <SX1276OnDio0Irq+0x354>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d91f      	bls.n	8013568 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8013528:	210e      	movs	r1, #14
 801352a:	187b      	adds	r3, r7, r1
 801352c:	2200      	movs	r2, #0
 801352e:	5e9b      	ldrsh	r3, [r3, r2]
 8013530:	111b      	asrs	r3, r3, #4
 8013532:	b21b      	sxth	r3, r3
 8013534:	b29a      	uxth	r2, r3
 8013536:	187b      	adds	r3, r7, r1
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	18d3      	adds	r3, r2, r3
 801353c:	b29b      	uxth	r3, r3
 801353e:	3b9d      	subs	r3, #157	; 0x9d
 8013540:	b29b      	uxth	r3, r3
 8013542:	b219      	sxth	r1, r3
 8013544:	4b01      	ldr	r3, [pc, #4]	; (801354c <SX1276OnDio0Irq+0x33c>)
 8013546:	2262      	movs	r2, #98	; 0x62
 8013548:	5299      	strh	r1, [r3, r2]
 801354a:	e01e      	b.n	801358a <SX1276OnDio0Irq+0x37a>
 801354c:	20001110 	.word	0x20001110
 8013550:	20001178 	.word	0x20001178
 8013554:	200010f8 	.word	0x200010f8
 8013558:	20000bbc 	.word	0x20000bbc
 801355c:	2000114a 	.word	0x2000114a
 8013560:	20000bc0 	.word	0x20000bc0
 8013564:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8013568:	210e      	movs	r1, #14
 801356a:	187b      	adds	r3, r7, r1
 801356c:	2200      	movs	r2, #0
 801356e:	5e9b      	ldrsh	r3, [r3, r2]
 8013570:	111b      	asrs	r3, r3, #4
 8013572:	b21b      	sxth	r3, r3
 8013574:	b29a      	uxth	r2, r3
 8013576:	187b      	adds	r3, r7, r1
 8013578:	881b      	ldrh	r3, [r3, #0]
 801357a:	18d3      	adds	r3, r2, r3
 801357c:	b29b      	uxth	r3, r3
 801357e:	3ba4      	subs	r3, #164	; 0xa4
 8013580:	b29b      	uxth	r3, r3
 8013582:	b219      	sxth	r1, r3
 8013584:	4b34      	ldr	r3, [pc, #208]	; (8013658 <SX1276OnDio0Irq+0x448>)
 8013586:	2262      	movs	r2, #98	; 0x62
 8013588:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801358a:	2013      	movs	r0, #19
 801358c:	f7ff fc54 	bl	8012e38 <SX1276Read>
 8013590:	0003      	movs	r3, r0
 8013592:	0019      	movs	r1, r3
 8013594:	4b30      	ldr	r3, [pc, #192]	; (8013658 <SX1276OnDio0Irq+0x448>)
 8013596:	2264      	movs	r2, #100	; 0x64
 8013598:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801359a:	2010      	movs	r0, #16
 801359c:	f7ff fc4c 	bl	8012e38 <SX1276Read>
 80135a0:	0003      	movs	r3, r0
 80135a2:	0019      	movs	r1, r3
 80135a4:	200d      	movs	r0, #13
 80135a6:	f7ff fc33 	bl	8012e10 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80135aa:	4b2b      	ldr	r3, [pc, #172]	; (8013658 <SX1276OnDio0Irq+0x448>)
 80135ac:	2264      	movs	r2, #100	; 0x64
 80135ae:	5c9a      	ldrb	r2, [r3, r2]
 80135b0:	4b2a      	ldr	r3, [pc, #168]	; (801365c <SX1276OnDio0Irq+0x44c>)
 80135b2:	0011      	movs	r1, r2
 80135b4:	0018      	movs	r0, r3
 80135b6:	f7ff fd07 	bl	8012fc8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80135ba:	4b27      	ldr	r3, [pc, #156]	; (8013658 <SX1276OnDio0Irq+0x448>)
 80135bc:	2256      	movs	r2, #86	; 0x56
 80135be:	5c9b      	ldrb	r3, [r3, r2]
 80135c0:	2201      	movs	r2, #1
 80135c2:	4053      	eors	r3, r2
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d002      	beq.n	80135d0 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 80135ca:	4b23      	ldr	r3, [pc, #140]	; (8013658 <SX1276OnDio0Irq+0x448>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80135d0:	4b23      	ldr	r3, [pc, #140]	; (8013660 <SX1276OnDio0Irq+0x450>)
 80135d2:	0018      	movs	r0, r3
 80135d4:	f7fd fb9a 	bl	8010d0c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80135d8:	4b22      	ldr	r3, [pc, #136]	; (8013664 <SX1276OnDio0Irq+0x454>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d017      	beq.n	8013610 <SX1276OnDio0Irq+0x400>
 80135e0:	4b20      	ldr	r3, [pc, #128]	; (8013664 <SX1276OnDio0Irq+0x454>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	689b      	ldr	r3, [r3, #8]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d012      	beq.n	8013610 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80135ea:	4b1e      	ldr	r3, [pc, #120]	; (8013664 <SX1276OnDio0Irq+0x454>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	689c      	ldr	r4, [r3, #8]
 80135f0:	4b19      	ldr	r3, [pc, #100]	; (8013658 <SX1276OnDio0Irq+0x448>)
 80135f2:	2264      	movs	r2, #100	; 0x64
 80135f4:	5c9b      	ldrb	r3, [r3, r2]
 80135f6:	b299      	uxth	r1, r3
 80135f8:	4b17      	ldr	r3, [pc, #92]	; (8013658 <SX1276OnDio0Irq+0x448>)
 80135fa:	2262      	movs	r2, #98	; 0x62
 80135fc:	5e9d      	ldrsh	r5, [r3, r2]
 80135fe:	4b16      	ldr	r3, [pc, #88]	; (8013658 <SX1276OnDio0Irq+0x448>)
 8013600:	2260      	movs	r2, #96	; 0x60
 8013602:	569b      	ldrsb	r3, [r3, r2]
 8013604:	4815      	ldr	r0, [pc, #84]	; (801365c <SX1276OnDio0Irq+0x44c>)
 8013606:	002a      	movs	r2, r5
 8013608:	47a0      	blx	r4
                break;
 801360a:	e001      	b.n	8013610 <SX1276OnDio0Irq+0x400>
                        break;
 801360c:	46c0      	nop			; (mov r8, r8)
 801360e:	e01f      	b.n	8013650 <SX1276OnDio0Irq+0x440>
                break;
 8013610:	46c0      	nop			; (mov r8, r8)
            break;
 8013612:	e01d      	b.n	8013650 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8013614:	4b14      	ldr	r3, [pc, #80]	; (8013668 <SX1276OnDio0Irq+0x458>)
 8013616:	0018      	movs	r0, r3
 8013618:	f7fd fb78 	bl	8010d0c <TimerStop>
            switch( SX1276.Settings.Modem )
 801361c:	4b0e      	ldr	r3, [pc, #56]	; (8013658 <SX1276OnDio0Irq+0x448>)
 801361e:	795b      	ldrb	r3, [r3, #5]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d103      	bne.n	801362c <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8013624:	2108      	movs	r1, #8
 8013626:	2012      	movs	r0, #18
 8013628:	f7ff fbf2 	bl	8012e10 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801362c:	4b0a      	ldr	r3, [pc, #40]	; (8013658 <SX1276OnDio0Irq+0x448>)
 801362e:	2200      	movs	r2, #0
 8013630:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8013632:	4b0c      	ldr	r3, [pc, #48]	; (8013664 <SX1276OnDio0Irq+0x454>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d008      	beq.n	801364c <SX1276OnDio0Irq+0x43c>
 801363a:	4b0a      	ldr	r3, [pc, #40]	; (8013664 <SX1276OnDio0Irq+0x454>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d003      	beq.n	801364c <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8013644:	4b07      	ldr	r3, [pc, #28]	; (8013664 <SX1276OnDio0Irq+0x454>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	4798      	blx	r3
                break;
 801364c:	46c0      	nop			; (mov r8, r8)
            break;
 801364e:	46c0      	nop			; (mov r8, r8)
    }
}
 8013650:	46c0      	nop			; (mov r8, r8)
 8013652:	46bd      	mov	sp, r7
 8013654:	b004      	add	sp, #16
 8013656:	bdb0      	pop	{r4, r5, r7, pc}
 8013658:	20001110 	.word	0x20001110
 801365c:	20000bc0 	.word	0x20000bc0
 8013660:	20001178 	.word	0x20001178
 8013664:	20000bbc 	.word	0x20000bbc
 8013668:	200010e0 	.word	0x200010e0

0801366c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 8013674:	4b61      	ldr	r3, [pc, #388]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013676:	791b      	ldrb	r3, [r3, #4]
 8013678:	2b01      	cmp	r3, #1
 801367a:	d003      	beq.n	8013684 <SX1276OnDio1Irq+0x18>
 801367c:	2b02      	cmp	r3, #2
 801367e:	d100      	bne.n	8013682 <SX1276OnDio1Irq+0x16>
 8013680:	e078      	b.n	8013774 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 8013682:	e0b6      	b.n	80137f2 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8013684:	4b5d      	ldr	r3, [pc, #372]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013686:	795b      	ldrb	r3, [r3, #5]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d002      	beq.n	8013692 <SX1276OnDio1Irq+0x26>
 801368c:	2b01      	cmp	r3, #1
 801368e:	d057      	beq.n	8013740 <SX1276OnDio1Irq+0xd4>
                break;
 8013690:	e06f      	b.n	8013772 <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8013692:	4b5a      	ldr	r3, [pc, #360]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013694:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013696:	2b00      	cmp	r3, #0
 8013698:	d118      	bne.n	80136cc <SX1276OnDio1Irq+0x60>
 801369a:	4b58      	ldr	r3, [pc, #352]	; (80137fc <SX1276OnDio1Irq+0x190>)
 801369c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d114      	bne.n	80136cc <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80136a2:	4b56      	ldr	r3, [pc, #344]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136a4:	2222      	movs	r2, #34	; 0x22
 80136a6:	5c9b      	ldrb	r3, [r3, r2]
 80136a8:	2201      	movs	r2, #1
 80136aa:	4053      	eors	r3, r2
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d005      	beq.n	80136be <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80136b2:	4b53      	ldr	r3, [pc, #332]	; (8013800 <SX1276OnDio1Irq+0x194>)
 80136b4:	2101      	movs	r1, #1
 80136b6:	0018      	movs	r0, r3
 80136b8:	f7ff fc86 	bl	8012fc8 <SX1276ReadFifo>
 80136bc:	e006      	b.n	80136cc <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80136be:	2032      	movs	r0, #50	; 0x32
 80136c0:	f7ff fbba 	bl	8012e38 <SX1276Read>
 80136c4:	0003      	movs	r3, r0
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	4b4c      	ldr	r3, [pc, #304]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136ca:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80136cc:	4b4b      	ldr	r3, [pc, #300]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136ce:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80136d0:	001a      	movs	r2, r3
 80136d2:	4b4a      	ldr	r3, [pc, #296]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	4a48      	ldr	r2, [pc, #288]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136da:	213e      	movs	r1, #62	; 0x3e
 80136dc:	5c52      	ldrb	r2, [r2, r1]
 80136de:	4293      	cmp	r3, r2
 80136e0:	db19      	blt.n	8013716 <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80136e2:	4b46      	ldr	r3, [pc, #280]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80136e6:	001a      	movs	r2, r3
 80136e8:	4b46      	ldr	r3, [pc, #280]	; (8013804 <SX1276OnDio1Irq+0x198>)
 80136ea:	18d0      	adds	r0, r2, r3
 80136ec:	4b43      	ldr	r3, [pc, #268]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136ee:	223e      	movs	r2, #62	; 0x3e
 80136f0:	5c9b      	ldrb	r3, [r3, r2]
 80136f2:	3b01      	subs	r3, #1
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	0019      	movs	r1, r3
 80136f8:	f7ff fc66 	bl	8012fc8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80136fc:	4b3f      	ldr	r3, [pc, #252]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80136fe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8013700:	4b3e      	ldr	r3, [pc, #248]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013702:	213e      	movs	r1, #62	; 0x3e
 8013704:	5c5b      	ldrb	r3, [r3, r1]
 8013706:	b29b      	uxth	r3, r3
 8013708:	18d3      	adds	r3, r2, r3
 801370a:	b29b      	uxth	r3, r3
 801370c:	3b01      	subs	r3, #1
 801370e:	b29a      	uxth	r2, r3
 8013710:	4b3a      	ldr	r3, [pc, #232]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013712:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8013714:	e02d      	b.n	8013772 <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8013716:	4b39      	ldr	r3, [pc, #228]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013718:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801371a:	001a      	movs	r2, r3
 801371c:	4b39      	ldr	r3, [pc, #228]	; (8013804 <SX1276OnDio1Irq+0x198>)
 801371e:	18d0      	adds	r0, r2, r3
 8013720:	4b36      	ldr	r3, [pc, #216]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013722:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013724:	b2da      	uxtb	r2, r3
 8013726:	4b35      	ldr	r3, [pc, #212]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013728:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801372a:	b2db      	uxtb	r3, r3
 801372c:	1ad3      	subs	r3, r2, r3
 801372e:	b2db      	uxtb	r3, r3
 8013730:	0019      	movs	r1, r3
 8013732:	f7ff fc49 	bl	8012fc8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8013736:	4b31      	ldr	r3, [pc, #196]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013738:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801373a:	4b30      	ldr	r3, [pc, #192]	; (80137fc <SX1276OnDio1Irq+0x190>)
 801373c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801373e:	e018      	b.n	8013772 <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 8013740:	4b31      	ldr	r3, [pc, #196]	; (8013808 <SX1276OnDio1Irq+0x19c>)
 8013742:	0018      	movs	r0, r3
 8013744:	f7fd fae2 	bl	8010d0c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8013748:	2180      	movs	r1, #128	; 0x80
 801374a:	2012      	movs	r0, #18
 801374c:	f7ff fb60 	bl	8012e10 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8013750:	4b2a      	ldr	r3, [pc, #168]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013752:	2200      	movs	r2, #0
 8013754:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8013756:	4b2d      	ldr	r3, [pc, #180]	; (801380c <SX1276OnDio1Irq+0x1a0>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d008      	beq.n	8013770 <SX1276OnDio1Irq+0x104>
 801375e:	4b2b      	ldr	r3, [pc, #172]	; (801380c <SX1276OnDio1Irq+0x1a0>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d003      	beq.n	8013770 <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 8013768:	4b28      	ldr	r3, [pc, #160]	; (801380c <SX1276OnDio1Irq+0x1a0>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	68db      	ldr	r3, [r3, #12]
 801376e:	4798      	blx	r3
                break;
 8013770:	46c0      	nop			; (mov r8, r8)
            break;
 8013772:	e03e      	b.n	80137f2 <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8013774:	4b21      	ldr	r3, [pc, #132]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013776:	795b      	ldrb	r3, [r3, #5]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <SX1276OnDio1Irq+0x116>
 801377c:	2b01      	cmp	r3, #1
 801377e:	d036      	beq.n	80137ee <SX1276OnDio1Irq+0x182>
                break;
 8013780:	e036      	b.n	80137f0 <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8013782:	4b1e      	ldr	r3, [pc, #120]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013784:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013786:	001a      	movs	r2, r3
 8013788:	4b1c      	ldr	r3, [pc, #112]	; (80137fc <SX1276OnDio1Irq+0x190>)
 801378a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801378c:	1ad3      	subs	r3, r2, r3
 801378e:	4a1b      	ldr	r2, [pc, #108]	; (80137fc <SX1276OnDio1Irq+0x190>)
 8013790:	213f      	movs	r1, #63	; 0x3f
 8013792:	5c52      	ldrb	r2, [r2, r1]
 8013794:	4293      	cmp	r3, r2
 8013796:	dd15      	ble.n	80137c4 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8013798:	4b18      	ldr	r3, [pc, #96]	; (80137fc <SX1276OnDio1Irq+0x190>)
 801379a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801379c:	001a      	movs	r2, r3
 801379e:	4b19      	ldr	r3, [pc, #100]	; (8013804 <SX1276OnDio1Irq+0x198>)
 80137a0:	18d0      	adds	r0, r2, r3
 80137a2:	4b16      	ldr	r3, [pc, #88]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137a4:	223f      	movs	r2, #63	; 0x3f
 80137a6:	5c9b      	ldrb	r3, [r3, r2]
 80137a8:	0019      	movs	r1, r3
 80137aa:	f7ff fbfb 	bl	8012fa4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80137ae:	4b13      	ldr	r3, [pc, #76]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137b0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80137b2:	4b12      	ldr	r3, [pc, #72]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137b4:	213f      	movs	r1, #63	; 0x3f
 80137b6:	5c5b      	ldrb	r3, [r3, r1]
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	18d3      	adds	r3, r2, r3
 80137bc:	b29a      	uxth	r2, r3
 80137be:	4b0f      	ldr	r3, [pc, #60]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137c0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80137c2:	e015      	b.n	80137f0 <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80137c4:	4b0d      	ldr	r3, [pc, #52]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80137c8:	001a      	movs	r2, r3
 80137ca:	4b0e      	ldr	r3, [pc, #56]	; (8013804 <SX1276OnDio1Irq+0x198>)
 80137cc:	18d0      	adds	r0, r2, r3
 80137ce:	4b0b      	ldr	r3, [pc, #44]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137d0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80137d2:	b2da      	uxtb	r2, r3
 80137d4:	4b09      	ldr	r3, [pc, #36]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	0019      	movs	r1, r3
 80137e0:	f7ff fbe0 	bl	8012fa4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80137e4:	4b05      	ldr	r3, [pc, #20]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137e6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80137e8:	4b04      	ldr	r3, [pc, #16]	; (80137fc <SX1276OnDio1Irq+0x190>)
 80137ea:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80137ec:	e000      	b.n	80137f0 <SX1276OnDio1Irq+0x184>
                break;
 80137ee:	46c0      	nop			; (mov r8, r8)
            break;
 80137f0:	46c0      	nop			; (mov r8, r8)
    }
}
 80137f2:	46c0      	nop			; (mov r8, r8)
 80137f4:	46bd      	mov	sp, r7
 80137f6:	b002      	add	sp, #8
 80137f8:	bd80      	pop	{r7, pc}
 80137fa:	46c0      	nop			; (mov r8, r8)
 80137fc:	20001110 	.word	0x20001110
 8013800:	2000114a 	.word	0x2000114a
 8013804:	20000bc0 	.word	0x20000bc0
 8013808:	20001178 	.word	0x20001178
 801380c:	20000bbc 	.word	0x20000bbc

08013810 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8013810:	b590      	push	{r4, r7, lr}
 8013812:	b087      	sub	sp, #28
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 8013818:	2300      	movs	r3, #0
 801381a:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 801381c:	4b5c      	ldr	r3, [pc, #368]	; (8013990 <SX1276OnDio2Irq+0x180>)
 801381e:	791b      	ldrb	r3, [r3, #4]
 8013820:	2b01      	cmp	r3, #1
 8013822:	d003      	beq.n	801382c <SX1276OnDio2Irq+0x1c>
 8013824:	2b02      	cmp	r3, #2
 8013826:	d100      	bne.n	801382a <SX1276OnDio2Irq+0x1a>
 8013828:	e083      	b.n	8013932 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 801382a:	e0ad      	b.n	8013988 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801382c:	4b58      	ldr	r3, [pc, #352]	; (8013990 <SX1276OnDio2Irq+0x180>)
 801382e:	795b      	ldrb	r3, [r3, #5]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <SX1276OnDio2Irq+0x2a>
 8013834:	2b01      	cmp	r3, #1
 8013836:	d058      	beq.n	80138ea <SX1276OnDio2Irq+0xda>
                break;
 8013838:	e07a      	b.n	8013930 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801383a:	4b55      	ldr	r3, [pc, #340]	; (8013990 <SX1276OnDio2Irq+0x180>)
 801383c:	2230      	movs	r2, #48	; 0x30
 801383e:	2101      	movs	r1, #1
 8013840:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8013842:	4b53      	ldr	r3, [pc, #332]	; (8013990 <SX1276OnDio2Irq+0x180>)
 8013844:	2230      	movs	r2, #48	; 0x30
 8013846:	5c9b      	ldrb	r3, [r3, r2]
 8013848:	2b01      	cmp	r3, #1
 801384a:	d16e      	bne.n	801392a <SX1276OnDio2Irq+0x11a>
 801384c:	4b50      	ldr	r3, [pc, #320]	; (8013990 <SX1276OnDio2Irq+0x180>)
 801384e:	2231      	movs	r2, #49	; 0x31
 8013850:	5c9b      	ldrb	r3, [r3, r2]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d169      	bne.n	801392a <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8013856:	4b4f      	ldr	r3, [pc, #316]	; (8013994 <SX1276OnDio2Irq+0x184>)
 8013858:	0018      	movs	r0, r3
 801385a:	f7fd fa57 	bl	8010d0c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801385e:	4b4c      	ldr	r3, [pc, #304]	; (8013990 <SX1276OnDio2Irq+0x180>)
 8013860:	2231      	movs	r2, #49	; 0x31
 8013862:	2101      	movs	r1, #1
 8013864:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8013866:	2011      	movs	r0, #17
 8013868:	f7ff fae6 	bl	8012e38 <SX1276Read>
 801386c:	0003      	movs	r3, r0
 801386e:	085b      	lsrs	r3, r3, #1
 8013870:	b2db      	uxtb	r3, r3
 8013872:	425b      	negs	r3, r3
 8013874:	b2db      	uxtb	r3, r3
 8013876:	b259      	sxtb	r1, r3
 8013878:	4b45      	ldr	r3, [pc, #276]	; (8013990 <SX1276OnDio2Irq+0x180>)
 801387a:	2232      	movs	r2, #50	; 0x32
 801387c:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801387e:	201b      	movs	r0, #27
 8013880:	f7ff fada 	bl	8012e38 <SX1276Read>
 8013884:	0003      	movs	r3, r0
 8013886:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8013888:	201c      	movs	r0, #28
 801388a:	f7ff fad5 	bl	8012e38 <SX1276Read>
 801388e:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8013890:	4323      	orrs	r3, r4
 8013892:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	0a1b      	lsrs	r3, r3, #8
 8013898:	613b      	str	r3, [r7, #16]
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	021b      	lsls	r3, r3, #8
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	1ad3      	subs	r3, r2, r3
 80138a2:	60fb      	str	r3, [r7, #12]
 80138a4:	6939      	ldr	r1, [r7, #16]
 80138a6:	000b      	movs	r3, r1
 80138a8:	015b      	lsls	r3, r3, #5
 80138aa:	1a5b      	subs	r3, r3, r1
 80138ac:	019a      	lsls	r2, r3, #6
 80138ae:	1ad2      	subs	r2, r2, r3
 80138b0:	00d2      	lsls	r2, r2, #3
 80138b2:	1850      	adds	r0, r2, r1
 80138b4:	68f9      	ldr	r1, [r7, #12]
 80138b6:	000b      	movs	r3, r1
 80138b8:	015b      	lsls	r3, r3, #5
 80138ba:	1a5b      	subs	r3, r3, r1
 80138bc:	019a      	lsls	r2, r3, #6
 80138be:	1ad2      	subs	r2, r2, r3
 80138c0:	00d2      	lsls	r2, r2, #3
 80138c2:	1853      	adds	r3, r2, r1
 80138c4:	3380      	adds	r3, #128	; 0x80
 80138c6:	0a1b      	lsrs	r3, r3, #8
 80138c8:	18c3      	adds	r3, r0, r3
 80138ca:	001a      	movs	r2, r3
 80138cc:	4b30      	ldr	r3, [pc, #192]	; (8013990 <SX1276OnDio2Irq+0x180>)
 80138ce:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80138d0:	200c      	movs	r0, #12
 80138d2:	f7ff fab1 	bl	8012e38 <SX1276Read>
 80138d6:	0003      	movs	r3, r0
 80138d8:	095b      	lsrs	r3, r3, #5
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2207      	movs	r2, #7
 80138de:	4013      	ands	r3, r2
 80138e0:	b2d9      	uxtb	r1, r3
 80138e2:	4b2b      	ldr	r3, [pc, #172]	; (8013990 <SX1276OnDio2Irq+0x180>)
 80138e4:	2238      	movs	r2, #56	; 0x38
 80138e6:	5499      	strb	r1, [r3, r2]
                break;
 80138e8:	e01f      	b.n	801392a <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80138ea:	4b29      	ldr	r3, [pc, #164]	; (8013990 <SX1276OnDio2Irq+0x180>)
 80138ec:	2253      	movs	r2, #83	; 0x53
 80138ee:	5c9b      	ldrb	r3, [r3, r2]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d01c      	beq.n	801392e <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80138f4:	2102      	movs	r1, #2
 80138f6:	2012      	movs	r0, #18
 80138f8:	f7ff fa8a 	bl	8012e10 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80138fc:	4b26      	ldr	r3, [pc, #152]	; (8013998 <SX1276OnDio2Irq+0x188>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d014      	beq.n	801392e <SX1276OnDio2Irq+0x11e>
 8013904:	4b24      	ldr	r3, [pc, #144]	; (8013998 <SX1276OnDio2Irq+0x188>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	695b      	ldr	r3, [r3, #20]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d00f      	beq.n	801392e <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801390e:	4b22      	ldr	r3, [pc, #136]	; (8013998 <SX1276OnDio2Irq+0x188>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	695c      	ldr	r4, [r3, #20]
 8013914:	201c      	movs	r0, #28
 8013916:	f7ff fa8f 	bl	8012e38 <SX1276Read>
 801391a:	0003      	movs	r3, r0
 801391c:	001a      	movs	r2, r3
 801391e:	233f      	movs	r3, #63	; 0x3f
 8013920:	4013      	ands	r3, r2
 8013922:	b2db      	uxtb	r3, r3
 8013924:	0018      	movs	r0, r3
 8013926:	47a0      	blx	r4
                break;
 8013928:	e001      	b.n	801392e <SX1276OnDio2Irq+0x11e>
                break;
 801392a:	46c0      	nop			; (mov r8, r8)
 801392c:	e02c      	b.n	8013988 <SX1276OnDio2Irq+0x178>
                break;
 801392e:	46c0      	nop			; (mov r8, r8)
            break;
 8013930:	e02a      	b.n	8013988 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8013932:	4b17      	ldr	r3, [pc, #92]	; (8013990 <SX1276OnDio2Irq+0x180>)
 8013934:	795b      	ldrb	r3, [r3, #5]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d022      	beq.n	8013980 <SX1276OnDio2Irq+0x170>
 801393a:	2b01      	cmp	r3, #1
 801393c:	d000      	beq.n	8013940 <SX1276OnDio2Irq+0x130>
                break;
 801393e:	e022      	b.n	8013986 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8013940:	4b13      	ldr	r3, [pc, #76]	; (8013990 <SX1276OnDio2Irq+0x180>)
 8013942:	2253      	movs	r2, #83	; 0x53
 8013944:	5c9b      	ldrb	r3, [r3, r2]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d01c      	beq.n	8013984 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801394a:	2102      	movs	r1, #2
 801394c:	2012      	movs	r0, #18
 801394e:	f7ff fa5f 	bl	8012e10 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8013952:	4b11      	ldr	r3, [pc, #68]	; (8013998 <SX1276OnDio2Irq+0x188>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d014      	beq.n	8013984 <SX1276OnDio2Irq+0x174>
 801395a:	4b0f      	ldr	r3, [pc, #60]	; (8013998 <SX1276OnDio2Irq+0x188>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	695b      	ldr	r3, [r3, #20]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d00f      	beq.n	8013984 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8013964:	4b0c      	ldr	r3, [pc, #48]	; (8013998 <SX1276OnDio2Irq+0x188>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	695c      	ldr	r4, [r3, #20]
 801396a:	201c      	movs	r0, #28
 801396c:	f7ff fa64 	bl	8012e38 <SX1276Read>
 8013970:	0003      	movs	r3, r0
 8013972:	001a      	movs	r2, r3
 8013974:	233f      	movs	r3, #63	; 0x3f
 8013976:	4013      	ands	r3, r2
 8013978:	b2db      	uxtb	r3, r3
 801397a:	0018      	movs	r0, r3
 801397c:	47a0      	blx	r4
                break;
 801397e:	e001      	b.n	8013984 <SX1276OnDio2Irq+0x174>
                break;
 8013980:	46c0      	nop			; (mov r8, r8)
 8013982:	e000      	b.n	8013986 <SX1276OnDio2Irq+0x176>
                break;
 8013984:	46c0      	nop			; (mov r8, r8)
            break;
 8013986:	46c0      	nop			; (mov r8, r8)
    }
}
 8013988:	46c0      	nop			; (mov r8, r8)
 801398a:	46bd      	mov	sp, r7
 801398c:	b007      	add	sp, #28
 801398e:	bd90      	pop	{r4, r7, pc}
 8013990:	20001110 	.word	0x20001110
 8013994:	200010f8 	.word	0x200010f8
 8013998:	20000bbc 	.word	0x20000bbc

0801399c <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 80139a4:	4b1e      	ldr	r3, [pc, #120]	; (8013a20 <SX1276OnDio3Irq+0x84>)
 80139a6:	795b      	ldrb	r3, [r3, #5]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d031      	beq.n	8013a10 <SX1276OnDio3Irq+0x74>
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d000      	beq.n	80139b2 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80139b0:	e031      	b.n	8013a16 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80139b2:	2012      	movs	r0, #18
 80139b4:	f7ff fa40 	bl	8012e38 <SX1276Read>
 80139b8:	0003      	movs	r3, r0
 80139ba:	001a      	movs	r2, r3
 80139bc:	2301      	movs	r3, #1
 80139be:	4013      	ands	r3, r2
 80139c0:	2b01      	cmp	r3, #1
 80139c2:	d112      	bne.n	80139ea <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80139c4:	2105      	movs	r1, #5
 80139c6:	2012      	movs	r0, #18
 80139c8:	f7ff fa22 	bl	8012e10 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80139cc:	4b15      	ldr	r3, [pc, #84]	; (8013a24 <SX1276OnDio3Irq+0x88>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d01f      	beq.n	8013a14 <SX1276OnDio3Irq+0x78>
 80139d4:	4b13      	ldr	r3, [pc, #76]	; (8013a24 <SX1276OnDio3Irq+0x88>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	699b      	ldr	r3, [r3, #24]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d01a      	beq.n	8013a14 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 80139de:	4b11      	ldr	r3, [pc, #68]	; (8013a24 <SX1276OnDio3Irq+0x88>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	699b      	ldr	r3, [r3, #24]
 80139e4:	2001      	movs	r0, #1
 80139e6:	4798      	blx	r3
        break;
 80139e8:	e014      	b.n	8013a14 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80139ea:	2104      	movs	r1, #4
 80139ec:	2012      	movs	r0, #18
 80139ee:	f7ff fa0f 	bl	8012e10 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80139f2:	4b0c      	ldr	r3, [pc, #48]	; (8013a24 <SX1276OnDio3Irq+0x88>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00c      	beq.n	8013a14 <SX1276OnDio3Irq+0x78>
 80139fa:	4b0a      	ldr	r3, [pc, #40]	; (8013a24 <SX1276OnDio3Irq+0x88>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	699b      	ldr	r3, [r3, #24]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d007      	beq.n	8013a14 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8013a04:	4b07      	ldr	r3, [pc, #28]	; (8013a24 <SX1276OnDio3Irq+0x88>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	699b      	ldr	r3, [r3, #24]
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	4798      	blx	r3
        break;
 8013a0e:	e001      	b.n	8013a14 <SX1276OnDio3Irq+0x78>
        break;
 8013a10:	46c0      	nop			; (mov r8, r8)
 8013a12:	e000      	b.n	8013a16 <SX1276OnDio3Irq+0x7a>
        break;
 8013a14:	46c0      	nop			; (mov r8, r8)
    }
}
 8013a16:	46c0      	nop			; (mov r8, r8)
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	b002      	add	sp, #8
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	46c0      	nop			; (mov r8, r8)
 8013a20:	20001110 	.word	0x20001110
 8013a24:	20000bbc 	.word	0x20000bbc

08013a28 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8013a30:	4b0b      	ldr	r3, [pc, #44]	; (8013a60 <SX1276OnDio4Irq+0x38>)
 8013a32:	795b      	ldrb	r3, [r3, #5]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d002      	beq.n	8013a3e <SX1276OnDio4Irq+0x16>
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d00a      	beq.n	8013a52 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8013a3c:	e00c      	b.n	8013a58 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8013a3e:	4b08      	ldr	r3, [pc, #32]	; (8013a60 <SX1276OnDio4Irq+0x38>)
 8013a40:	2230      	movs	r2, #48	; 0x30
 8013a42:	5c9b      	ldrb	r3, [r3, r2]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d106      	bne.n	8013a56 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8013a48:	4b05      	ldr	r3, [pc, #20]	; (8013a60 <SX1276OnDio4Irq+0x38>)
 8013a4a:	2230      	movs	r2, #48	; 0x30
 8013a4c:	2101      	movs	r1, #1
 8013a4e:	5499      	strb	r1, [r3, r2]
        break;
 8013a50:	e001      	b.n	8013a56 <SX1276OnDio4Irq+0x2e>
        break;
 8013a52:	46c0      	nop			; (mov r8, r8)
 8013a54:	e000      	b.n	8013a58 <SX1276OnDio4Irq+0x30>
        break;
 8013a56:	46c0      	nop			; (mov r8, r8)
    }
}
 8013a58:	46c0      	nop			; (mov r8, r8)
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	b002      	add	sp, #8
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	20001110 	.word	0x20001110

08013a64 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 8013a64:	b5b0      	push	{r4, r5, r7, lr}
 8013a66:	b084      	sub	sp, #16
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	000a      	movs	r2, r1
 8013a6e:	1cfb      	adds	r3, r7, #3
 8013a70:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8013a72:	1cfb      	adds	r3, r7, #3
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d000      	beq.n	8013a7c <_itsdk_console_private+0x18>
 8013a7a:	e0d1      	b.n	8013c20 <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	3b3f      	subs	r3, #63	; 0x3f
 8013a82:	2b35      	cmp	r3, #53	; 0x35
 8013a84:	d900      	bls.n	8013a88 <_itsdk_console_private+0x24>
 8013a86:	e0e5      	b.n	8013c54 <_itsdk_console_private+0x1f0>
 8013a88:	009a      	lsls	r2, r3, #2
 8013a8a:	4b78      	ldr	r3, [pc, #480]	; (8013c6c <_itsdk_console_private+0x208>)
 8013a8c:	18d3      	adds	r3, r2, r3
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 8013a92:	4b77      	ldr	r3, [pc, #476]	; (8013c70 <_itsdk_console_private+0x20c>)
 8013a94:	0018      	movs	r0, r3
 8013a96:	f000 fa0f 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 8013a9a:	4b76      	ldr	r3, [pc, #472]	; (8013c74 <_itsdk_console_private+0x210>)
 8013a9c:	0018      	movs	r0, r3
 8013a9e:	f000 fa0b 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 8013aa2:	4b75      	ldr	r3, [pc, #468]	; (8013c78 <_itsdk_console_private+0x214>)
 8013aa4:	0018      	movs	r0, r3
 8013aa6:	f000 fa07 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 8013aaa:	4b74      	ldr	r3, [pc, #464]	; (8013c7c <_itsdk_console_private+0x218>)
 8013aac:	0018      	movs	r0, r3
 8013aae:	f000 fa03 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 8013ab2:	4b73      	ldr	r3, [pc, #460]	; (8013c80 <_itsdk_console_private+0x21c>)
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	f000 f9ff 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 8013aba:	4b72      	ldr	r3, [pc, #456]	; (8013c84 <_itsdk_console_private+0x220>)
 8013abc:	0018      	movs	r0, r3
 8013abe:	f000 f9fb 	bl	8013eb8 <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 8013ac2:	4b71      	ldr	r3, [pc, #452]	; (8013c88 <_itsdk_console_private+0x224>)
 8013ac4:	0018      	movs	r0, r3
 8013ac6:	f000 f9f7 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 8013aca:	4b70      	ldr	r3, [pc, #448]	; (8013c8c <_itsdk_console_private+0x228>)
 8013acc:	0018      	movs	r0, r3
 8013ace:	f000 f9f3 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 8013ad2:	4b6f      	ldr	r3, [pc, #444]	; (8013c90 <_itsdk_console_private+0x22c>)
 8013ad4:	0018      	movs	r0, r3
 8013ad6:	f000 f9ef 	bl	8013eb8 <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 8013ada:	4b6e      	ldr	r3, [pc, #440]	; (8013c94 <_itsdk_console_private+0x230>)
 8013adc:	0018      	movs	r0, r3
 8013ade:	f000 f9eb 	bl	8013eb8 <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e0bd      	b.n	8013c62 <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 8013ae6:	4b6c      	ldr	r3, [pc, #432]	; (8013c98 <_itsdk_console_private+0x234>)
 8013ae8:	781a      	ldrb	r2, [r3, #0]
 8013aea:	2101      	movs	r1, #1
 8013aec:	438a      	bics	r2, r1
 8013aee:	701a      	strb	r2, [r3, #0]
			goto success;
 8013af0:	e0b2      	b.n	8013c58 <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 8013af2:	f004 faa1 	bl	8018038 <itsdk_time_get_ms>
 8013af6:	22fa      	movs	r2, #250	; 0xfa
 8013af8:	0092      	lsls	r2, r2, #2
 8013afa:	2300      	movs	r3, #0
 8013afc:	f7ec fce4 	bl	80004c8 <__aeabi_uldivmod>
 8013b00:	0003      	movs	r3, r0
 8013b02:	000c      	movs	r4, r1
 8013b04:	001a      	movs	r2, r3
 8013b06:	4b65      	ldr	r3, [pc, #404]	; (8013c9c <_itsdk_console_private+0x238>)
 8013b08:	0011      	movs	r1, r2
 8013b0a:	0018      	movs	r0, r3
 8013b0c:	f000 f9d4 	bl	8013eb8 <_itsdk_console_printf>
			goto success;
 8013b10:	e0a2      	b.n	8013c58 <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 8013b12:	f004 fda3 	bl	801865c <adc_getTemperature>
 8013b16:	0003      	movs	r3, r0
 8013b18:	001a      	movs	r2, r3
 8013b1a:	240e      	movs	r4, #14
 8013b1c:	193b      	adds	r3, r7, r4
 8013b1e:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 8013b20:	193b      	adds	r3, r7, r4
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	2164      	movs	r1, #100	; 0x64
 8013b26:	0018      	movs	r0, r3
 8013b28:	f7ec faf6 	bl	8000118 <__udivsi3>
 8013b2c:	0003      	movs	r3, r0
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	001d      	movs	r5, r3
 8013b32:	0022      	movs	r2, r4
 8013b34:	18bb      	adds	r3, r7, r2
 8013b36:	881c      	ldrh	r4, [r3, #0]
 8013b38:	18bb      	adds	r3, r7, r2
 8013b3a:	881b      	ldrh	r3, [r3, #0]
 8013b3c:	2164      	movs	r1, #100	; 0x64
 8013b3e:	0018      	movs	r0, r3
 8013b40:	f7ec faea 	bl	8000118 <__udivsi3>
 8013b44:	0003      	movs	r3, r0
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	001a      	movs	r2, r3
 8013b4a:	0013      	movs	r3, r2
 8013b4c:	065b      	lsls	r3, r3, #25
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	189b      	adds	r3, r3, r2
 8013b54:	00db      	lsls	r3, r3, #3
 8013b56:	1a9b      	subs	r3, r3, r2
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	18e2      	adds	r2, r4, r3
 8013b5c:	4b50      	ldr	r3, [pc, #320]	; (8013ca0 <_itsdk_console_private+0x23c>)
 8013b5e:	0029      	movs	r1, r5
 8013b60:	0018      	movs	r0, r3
 8013b62:	f000 f9a9 	bl	8013eb8 <_itsdk_console_printf>
			goto success;
 8013b66:	e077      	b.n	8013c58 <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 8013b68:	f004 fe00 	bl	801876c <adc_getVBat>
 8013b6c:	0003      	movs	r3, r0
 8013b6e:	001a      	movs	r2, r3
 8013b70:	4b4c      	ldr	r3, [pc, #304]	; (8013ca4 <_itsdk_console_private+0x240>)
 8013b72:	0011      	movs	r1, r2
 8013b74:	0018      	movs	r0, r3
 8013b76:	f000 f99f 	bl	8013eb8 <_itsdk_console_printf>
			goto success;
 8013b7a:	e06d      	b.n	8013c58 <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 8013b7c:	f004 fdc6 	bl	801870c <adc_getVdd>
 8013b80:	0003      	movs	r3, r0
 8013b82:	001a      	movs	r2, r3
 8013b84:	4b48      	ldr	r3, [pc, #288]	; (8013ca8 <_itsdk_console_private+0x244>)
 8013b86:	0011      	movs	r1, r2
 8013b88:	0018      	movs	r0, r3
 8013b8a:	f000 f995 	bl	8013eb8 <_itsdk_console_printf>
			goto success;
 8013b8e:	e063      	b.n	8013c58 <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 8013b90:	4b46      	ldr	r3, [pc, #280]	; (8013cac <_itsdk_console_private+0x248>)
 8013b92:	0018      	movs	r0, r3
 8013b94:	f000 f990 	bl	8013eb8 <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 8013b98:	4b45      	ldr	r3, [pc, #276]	; (8013cb0 <_itsdk_console_private+0x24c>)
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b06      	cmp	r3, #6
 8013b9e:	d827      	bhi.n	8013bf0 <_itsdk_console_private+0x18c>
 8013ba0:	009a      	lsls	r2, r3, #2
 8013ba2:	4b44      	ldr	r3, [pc, #272]	; (8013cb4 <_itsdk_console_private+0x250>)
 8013ba4:	18d3      	adds	r3, r2, r3
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 8013baa:	4b43      	ldr	r3, [pc, #268]	; (8013cb8 <_itsdk_console_private+0x254>)
 8013bac:	0018      	movs	r0, r3
 8013bae:	f000 f983 	bl	8013eb8 <_itsdk_console_printf>
 8013bb2:	e022      	b.n	8013bfa <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 8013bb4:	4b41      	ldr	r3, [pc, #260]	; (8013cbc <_itsdk_console_private+0x258>)
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	f000 f97e 	bl	8013eb8 <_itsdk_console_printf>
 8013bbc:	e01d      	b.n	8013bfa <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 8013bbe:	4b40      	ldr	r3, [pc, #256]	; (8013cc0 <_itsdk_console_private+0x25c>)
 8013bc0:	0018      	movs	r0, r3
 8013bc2:	f000 f979 	bl	8013eb8 <_itsdk_console_printf>
 8013bc6:	e018      	b.n	8013bfa <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 8013bc8:	4b3e      	ldr	r3, [pc, #248]	; (8013cc4 <_itsdk_console_private+0x260>)
 8013bca:	0018      	movs	r0, r3
 8013bcc:	f000 f974 	bl	8013eb8 <_itsdk_console_printf>
 8013bd0:	e013      	b.n	8013bfa <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 8013bd2:	4b3d      	ldr	r3, [pc, #244]	; (8013cc8 <_itsdk_console_private+0x264>)
 8013bd4:	0018      	movs	r0, r3
 8013bd6:	f000 f96f 	bl	8013eb8 <_itsdk_console_printf>
 8013bda:	e00e      	b.n	8013bfa <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 8013bdc:	4b3b      	ldr	r3, [pc, #236]	; (8013ccc <_itsdk_console_private+0x268>)
 8013bde:	0018      	movs	r0, r3
 8013be0:	f000 f96a 	bl	8013eb8 <_itsdk_console_printf>
 8013be4:	e009      	b.n	8013bfa <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 8013be6:	4b3a      	ldr	r3, [pc, #232]	; (8013cd0 <_itsdk_console_private+0x26c>)
 8013be8:	0018      	movs	r0, r3
 8013bea:	f000 f965 	bl	8013eb8 <_itsdk_console_printf>
 8013bee:	e004      	b.n	8013bfa <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 8013bf0:	4b38      	ldr	r3, [pc, #224]	; (8013cd4 <_itsdk_console_private+0x270>)
 8013bf2:	0018      	movs	r0, r3
 8013bf4:	f000 f960 	bl	8013eb8 <_itsdk_console_printf>
 8013bf8:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 8013bfa:	e02d      	b.n	8013c58 <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 8013bfc:	4b36      	ldr	r3, [pc, #216]	; (8013cd8 <_itsdk_console_private+0x274>)
 8013bfe:	0018      	movs	r0, r3
 8013c00:	f000 f95a 	bl	8013eb8 <_itsdk_console_printf>
			itsdk_reset();
 8013c04:	f005 fa70 	bl	80190e8 <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 8013c08:	4b34      	ldr	r3, [pc, #208]	; (8013cdc <_itsdk_console_private+0x278>)
 8013c0a:	0018      	movs	r0, r3
 8013c0c:	f000 f954 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8013c10:	2302      	movs	r3, #2
 8013c12:	e026      	b.n	8013c62 <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 8013c14:	f003 fdaa 	bl	801776c <lowPower_enable>
			goto success;
 8013c18:	e01e      	b.n	8013c58 <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 8013c1a:	f003 fdb1 	bl	8017780 <lowPower_disable>
			goto success;
 8013c1e:	e01b      	b.n	8013c58 <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 8013c20:	1cfb      	adds	r3, r7, #3
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	2b02      	cmp	r3, #2
 8013c26:	d115      	bne.n	8013c54 <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2b52      	cmp	r3, #82	; 0x52
 8013c2e:	d111      	bne.n	8013c54 <_itsdk_console_private+0x1f0>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	3301      	adds	r3, #1
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	2b21      	cmp	r3, #33	; 0x21
 8013c38:	d10c      	bne.n	8013c54 <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 8013c3a:	4b27      	ldr	r3, [pc, #156]	; (8013cd8 <_itsdk_console_private+0x274>)
 8013c3c:	0018      	movs	r0, r3
 8013c3e:	f000 f93b 	bl	8013eb8 <_itsdk_console_printf>
			eeprom_clearAllEprom();
 8013c42:	f000 fc23 	bl	801448c <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 8013c46:	2064      	movs	r0, #100	; 0x64
 8013c48:	f005 faa0 	bl	801918c <itsdk_delayMs>
			itsdk_reset();
 8013c4c:	f005 fa4c 	bl	80190e8 <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 8013c50:	2302      	movs	r3, #2
 8013c52:	e006      	b.n	8013c62 <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 8013c54:	2301      	movs	r3, #1
 8013c56:	e004      	b.n	8013c62 <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 8013c58:	4b1f      	ldr	r3, [pc, #124]	; (8013cd8 <_itsdk_console_private+0x274>)
 8013c5a:	0018      	movs	r0, r3
 8013c5c:	f000 f92c 	bl	8013eb8 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 8013c60:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 8013c62:	0018      	movs	r0, r3
 8013c64:	46bd      	mov	sp, r7
 8013c66:	b004      	add	sp, #16
 8013c68:	bdb0      	pop	{r4, r5, r7, pc}
 8013c6a:	46c0      	nop			; (mov r8, r8)
 8013c6c:	0801be0c 	.word	0x0801be0c
 8013c70:	0801abb0 	.word	0x0801abb0
 8013c74:	0801abcc 	.word	0x0801abcc
 8013c78:	0801abe8 	.word	0x0801abe8
 8013c7c:	0801ac10 	.word	0x0801ac10
 8013c80:	0801ac38 	.word	0x0801ac38
 8013c84:	0801ac5c 	.word	0x0801ac5c
 8013c88:	0801ac84 	.word	0x0801ac84
 8013c8c:	0801acb8 	.word	0x0801acb8
 8013c90:	0801acdc 	.word	0x0801acdc
 8013c94:	0801acfc 	.word	0x0801acfc
 8013c98:	20000cc4 	.word	0x20000cc4
 8013c9c:	0801ad24 	.word	0x0801ad24
 8013ca0:	0801ad38 	.word	0x0801ad38
 8013ca4:	0801ad54 	.word	0x0801ad54
 8013ca8:	0801ad6c 	.word	0x0801ad6c
 8013cac:	0801ad80 	.word	0x0801ad80
 8013cb0:	200011c8 	.word	0x200011c8
 8013cb4:	0801bee4 	.word	0x0801bee4
 8013cb8:	0801ad88 	.word	0x0801ad88
 8013cbc:	0801ad90 	.word	0x0801ad90
 8013cc0:	0801ad9c 	.word	0x0801ad9c
 8013cc4:	0801ada8 	.word	0x0801ada8
 8013cc8:	0801adb0 	.word	0x0801adb0
 8013ccc:	0801adb8 	.word	0x0801adb8
 8013cd0:	0801adc0 	.word	0x0801adc0
 8013cd4:	0801adcc 	.word	0x0801adcc
 8013cd8:	0801add8 	.word	0x0801add8
 8013cdc:	0801ade0 	.word	0x0801ade0

08013ce0 <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	000a      	movs	r2, r1
 8013cea:	1cfb      	adds	r3, r7, #3
 8013cec:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8013cee:	1cfb      	adds	r3, r7, #3
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	d14c      	bne.n	8013d90 <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	2b6f      	cmp	r3, #111	; 0x6f
 8013cfc:	d020      	beq.n	8013d40 <_itsdk_console_public+0x60>
 8013cfe:	dc04      	bgt.n	8013d0a <_itsdk_console_public+0x2a>
 8013d00:	2b21      	cmp	r3, #33	; 0x21
 8013d02:	d023      	beq.n	8013d4c <_itsdk_console_public+0x6c>
 8013d04:	2b3f      	cmp	r3, #63	; 0x3f
 8013d06:	d005      	beq.n	8013d14 <_itsdk_console_public+0x34>
 8013d08:	e042      	b.n	8013d90 <_itsdk_console_public+0xb0>
 8013d0a:	2b73      	cmp	r3, #115	; 0x73
 8013d0c:	d03c      	beq.n	8013d88 <_itsdk_console_public+0xa8>
 8013d0e:	2b76      	cmp	r3, #118	; 0x76
 8013d10:	d026      	beq.n	8013d60 <_itsdk_console_public+0x80>
 8013d12:	e03d      	b.n	8013d90 <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 8013d14:	4b21      	ldr	r3, [pc, #132]	; (8013d9c <_itsdk_console_public+0xbc>)
 8013d16:	0018      	movs	r0, r3
 8013d18:	f000 f8ce 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 8013d1c:	4b20      	ldr	r3, [pc, #128]	; (8013da0 <_itsdk_console_public+0xc0>)
 8013d1e:	0018      	movs	r0, r3
 8013d20:	f000 f8ca 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 8013d24:	4b1f      	ldr	r3, [pc, #124]	; (8013da4 <_itsdk_console_public+0xc4>)
 8013d26:	0018      	movs	r0, r3
 8013d28:	f000 f8c6 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 8013d2c:	4b1e      	ldr	r3, [pc, #120]	; (8013da8 <_itsdk_console_public+0xc8>)
 8013d2e:	0018      	movs	r0, r3
 8013d30:	f000 f8c2 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 8013d34:	4b1d      	ldr	r3, [pc, #116]	; (8013dac <_itsdk_console_public+0xcc>)
 8013d36:	0018      	movs	r0, r3
 8013d38:	f000 f8be 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	e028      	b.n	8013d92 <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 8013d40:	4b1b      	ldr	r3, [pc, #108]	; (8013db0 <_itsdk_console_public+0xd0>)
 8013d42:	0018      	movs	r0, r3
 8013d44:	f000 f8b8 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	e022      	b.n	8013d92 <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 8013d4c:	4b19      	ldr	r3, [pc, #100]	; (8013db4 <_itsdk_console_public+0xd4>)
 8013d4e:	0018      	movs	r0, r3
 8013d50:	f000 f8b2 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 8013d54:	4b18      	ldr	r3, [pc, #96]	; (8013db8 <_itsdk_console_public+0xd8>)
 8013d56:	0018      	movs	r0, r3
 8013d58:	f000 f8ae 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	e018      	b.n	8013d92 <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 8013d60:	4a16      	ldr	r2, [pc, #88]	; (8013dbc <_itsdk_console_public+0xdc>)
 8013d62:	4b17      	ldr	r3, [pc, #92]	; (8013dc0 <_itsdk_console_public+0xe0>)
 8013d64:	0011      	movs	r1, r2
 8013d66:	0018      	movs	r0, r3
 8013d68:	f000 f8a6 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 8013d6c:	4a15      	ldr	r2, [pc, #84]	; (8013dc4 <_itsdk_console_public+0xe4>)
 8013d6e:	4916      	ldr	r1, [pc, #88]	; (8013dc8 <_itsdk_console_public+0xe8>)
 8013d70:	4b16      	ldr	r3, [pc, #88]	; (8013dcc <_itsdk_console_public+0xec>)
 8013d72:	0018      	movs	r0, r3
 8013d74:	f000 f8a0 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 8013d78:	4a15      	ldr	r2, [pc, #84]	; (8013dd0 <_itsdk_console_public+0xf0>)
 8013d7a:	4b16      	ldr	r3, [pc, #88]	; (8013dd4 <_itsdk_console_public+0xf4>)
 8013d7c:	0011      	movs	r1, r2
 8013d7e:	0018      	movs	r0, r3
 8013d80:	f000 f89a 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8013d84:	2300      	movs	r3, #0
 8013d86:	e004      	b.n	8013d92 <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 8013d88:	f001 f852 	bl	8014e30 <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	e000      	b.n	8013d92 <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 8013d90:	2301      	movs	r3, #1
}
 8013d92:	0018      	movs	r0, r3
 8013d94:	46bd      	mov	sp, r7
 8013d96:	b002      	add	sp, #8
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	46c0      	nop			; (mov r8, r8)
 8013d9c:	0801ade8 	.word	0x0801ade8
 8013da0:	0801adf8 	.word	0x0801adf8
 8013da4:	0801ae14 	.word	0x0801ae14
 8013da8:	0801ae34 	.word	0x0801ae34
 8013dac:	0801ae54 	.word	0x0801ae54
 8013db0:	0801add8 	.word	0x0801add8
 8013db4:	0801ae6c 	.word	0x0801ae6c
 8013db8:	0801ae9c 	.word	0x0801ae9c
 8013dbc:	0801aeb4 	.word	0x0801aeb4
 8013dc0:	0801aeb8 	.word	0x0801aeb8
 8013dc4:	0801aec8 	.word	0x0801aec8
 8013dc8:	0801aed4 	.word	0x0801aed4
 8013dcc:	0801aee0 	.word	0x0801aee0
 8013dd0:	0801aef0 	.word	0x0801aef0
 8013dd4:	0801af00 	.word	0x0801af00

08013dd8 <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	af00      	add	r7, sp, #0
	__console.expire = 0;
 8013ddc:	4b0c      	ldr	r3, [pc, #48]	; (8013e10 <itsdk_console_setup+0x38>)
 8013dde:	2200      	movs	r2, #0
 8013de0:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 8013de2:	4b0b      	ldr	r3, [pc, #44]	; (8013e10 <itsdk_console_setup+0x38>)
 8013de4:	781a      	ldrb	r2, [r3, #0]
 8013de6:	2101      	movs	r1, #1
 8013de8:	438a      	bics	r2, r1
 8013dea:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 8013dec:	4b08      	ldr	r3, [pc, #32]	; (8013e10 <itsdk_console_setup+0x38>)
 8013dee:	781a      	ldrb	r2, [r3, #0]
 8013df0:	2101      	movs	r1, #1
 8013df2:	400a      	ands	r2, r1
 8013df4:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 8013df6:	4b07      	ldr	r3, [pc, #28]	; (8013e14 <itsdk_console_setup+0x3c>)
 8013df8:	4a07      	ldr	r2, [pc, #28]	; (8013e18 <itsdk_console_setup+0x40>)
 8013dfa:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 8013dfc:	4b05      	ldr	r3, [pc, #20]	; (8013e14 <itsdk_console_setup+0x3c>)
 8013dfe:	4a07      	ldr	r2, [pc, #28]	; (8013e1c <itsdk_console_setup+0x44>)
 8013e00:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 8013e02:	4b04      	ldr	r3, [pc, #16]	; (8013e14 <itsdk_console_setup+0x3c>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	609a      	str	r2, [r3, #8]
}
 8013e08:	46c0      	nop			; (mov r8, r8)
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	46c0      	nop			; (mov r8, r8)
 8013e10:	20000cc4 	.word	0x20000cc4
 8013e14:	20000cf4 	.word	0x20000cf4
 8013e18:	08013a65 	.word	0x08013a65
 8013e1c:	08013ce1 	.word	0x08013ce1

08013e20 <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 8013e20:	b5b0      	push	{r4, r5, r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 8013e26:	4b22      	ldr	r3, [pc, #136]	; (8013eb0 <itsdk_console_loop+0x90>)
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	4013      	ands	r3, r2
 8013e2e:	b2db      	uxtb	r3, r3
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d021      	beq.n	8013e78 <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 8013e34:	f004 f900 	bl	8018038 <itsdk_time_get_ms>
 8013e38:	22fa      	movs	r2, #250	; 0xfa
 8013e3a:	0092      	lsls	r2, r2, #2
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	f7ec fb43 	bl	80004c8 <__aeabi_uldivmod>
 8013e42:	0002      	movs	r2, r0
 8013e44:	000b      	movs	r3, r1
 8013e46:	60ba      	str	r2, [r7, #8]
 8013e48:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 8013e4a:	4b19      	ldr	r3, [pc, #100]	; (8013eb0 <itsdk_console_loop+0x90>)
 8013e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e4e:	001c      	movs	r4, r3
 8013e50:	2300      	movs	r3, #0
 8013e52:	001d      	movs	r5, r3
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	42ab      	cmp	r3, r5
 8013e58:	d805      	bhi.n	8013e66 <itsdk_console_loop+0x46>
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	42ab      	cmp	r3, r5
 8013e5e:	d10b      	bne.n	8013e78 <itsdk_console_loop+0x58>
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	42a3      	cmp	r3, r4
 8013e64:	d908      	bls.n	8013e78 <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 8013e66:	4b12      	ldr	r3, [pc, #72]	; (8013eb0 <itsdk_console_loop+0x90>)
 8013e68:	781a      	ldrb	r2, [r3, #0]
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	438a      	bics	r2, r1
 8013e6e:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 8013e70:	4b10      	ldr	r3, [pc, #64]	; (8013eb4 <itsdk_console_loop+0x94>)
 8013e72:	0018      	movs	r0, r3
 8013e74:	f000 f820 	bl	8013eb8 <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 8013e78:	1dfc      	adds	r4, r7, #7
 8013e7a:	1dbb      	adds	r3, r7, #6
 8013e7c:	0018      	movs	r0, r3
 8013e7e:	f005 fa51 	bl	8019324 <serial2_read>
 8013e82:	0003      	movs	r3, r0
 8013e84:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 8013e86:	1dfb      	adds	r3, r7, #7
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d003      	beq.n	8013e96 <itsdk_console_loop+0x76>
 8013e8e:	1dfb      	adds	r3, r7, #7
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d104      	bne.n	8013ea0 <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 8013e96:	1dbb      	adds	r3, r7, #6
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	0018      	movs	r0, r3
 8013e9c:	f000 f97e 	bl	801419c <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 8013ea0:	1dfb      	adds	r3, r7, #7
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	2b01      	cmp	r3, #1
 8013ea6:	d0e7      	beq.n	8013e78 <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 8013ea8:	46c0      	nop			; (mov r8, r8)
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	b004      	add	sp, #16
 8013eae:	bdb0      	pop	{r4, r5, r7, pc}
 8013eb0:	20000cc4 	.word	0x20000cc4
 8013eb4:	0801af14 	.word	0x0801af14

08013eb8 <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 8013eb8:	b40f      	push	{r0, r1, r2, r3}
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b096      	sub	sp, #88	; 0x58
 8013ebe:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 8013ec0:	2364      	movs	r3, #100	; 0x64
 8013ec2:	18fb      	adds	r3, r7, r3
 8013ec4:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8013ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013eca:	1d38      	adds	r0, r7, #4
 8013ecc:	2150      	movs	r1, #80	; 0x50
 8013ece:	f006 f89b 	bl	801a008 <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 8013ed2:	1d3b      	adds	r3, r7, #4
 8013ed4:	0018      	movs	r0, r3
 8013ed6:	f005 fa0d 	bl	80192f4 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 8013eda:	46c0      	nop			; (mov r8, r8)
 8013edc:	46bd      	mov	sp, r7
 8013ede:	b016      	add	sp, #88	; 0x58
 8013ee0:	bc80      	pop	{r7}
 8013ee2:	bc08      	pop	{r3}
 8013ee4:	b004      	add	sp, #16
 8013ee6:	4718      	bx	r3

08013ee8 <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 8013ee8:	b5b0      	push	{r4, r5, r7, lr}
 8013eea:	b090      	sub	sp, #64	; 0x40
 8013eec:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 8013eee:	4ba5      	ldr	r3, [pc, #660]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	4393      	bics	r3, r2
 8013ef6:	b2db      	uxtb	r3, r3
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d100      	bne.n	8013efe <_itsdk_console_processLine+0x16>
 8013efc:	e13d      	b.n	801417a <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 8013efe:	4ba1      	ldr	r3, [pc, #644]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	2201      	movs	r2, #1
 8013f04:	4393      	bics	r3, r2
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d01d      	beq.n	8013f48 <_itsdk_console_processLine+0x60>
 8013f0c:	4b9d      	ldr	r3, [pc, #628]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	061b      	lsls	r3, r3, #24
 8013f12:	0e5b      	lsrs	r3, r3, #25
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	3b01      	subs	r3, #1
 8013f18:	4a9a      	ldr	r2, [pc, #616]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f1a:	18d3      	adds	r3, r2, r3
 8013f1c:	785b      	ldrb	r3, [r3, #1]
 8013f1e:	2b0d      	cmp	r3, #13
 8013f20:	d112      	bne.n	8013f48 <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 8013f22:	4b98      	ldr	r3, [pc, #608]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	061b      	lsls	r3, r3, #24
 8013f28:	0e5b      	lsrs	r3, r3, #25
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	337f      	adds	r3, #127	; 0x7f
 8013f2e:	1c1a      	adds	r2, r3, #0
 8013f30:	237f      	movs	r3, #127	; 0x7f
 8013f32:	4013      	ands	r3, r2
 8013f34:	b2da      	uxtb	r2, r3
 8013f36:	4b93      	ldr	r3, [pc, #588]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f38:	1890      	adds	r0, r2, r2
 8013f3a:	781a      	ldrb	r2, [r3, #0]
 8013f3c:	2101      	movs	r1, #1
 8013f3e:	400a      	ands	r2, r1
 8013f40:	1c11      	adds	r1, r2, #0
 8013f42:	1c02      	adds	r2, r0, #0
 8013f44:	430a      	orrs	r2, r1
 8013f46:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8013f48:	4b8e      	ldr	r3, [pc, #568]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	061b      	lsls	r3, r3, #24
 8013f4e:	0e5b      	lsrs	r3, r3, #25
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f54:	e008      	b.n	8013f68 <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 8013f56:	4a8b      	ldr	r2, [pc, #556]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f5a:	18d3      	adds	r3, r2, r3
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	2200      	movs	r2, #0
 8013f60:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8013f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f64:	3301      	adds	r3, #1
 8013f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f6a:	2b27      	cmp	r3, #39	; 0x27
 8013f6c:	ddf3      	ble.n	8013f56 <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 8013f6e:	4b85      	ldr	r3, [pc, #532]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f70:	781b      	ldrb	r3, [r3, #0]
 8013f72:	2201      	movs	r2, #1
 8013f74:	4013      	ands	r3, r2
 8013f76:	b2db      	uxtb	r3, r3
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d000      	beq.n	8013f7e <_itsdk_console_processLine+0x96>
 8013f7c:	e08e      	b.n	801409c <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 8013f7e:	4b81      	ldr	r3, [pc, #516]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	061b      	lsls	r3, r3, #24
 8013f84:	0e5b      	lsrs	r3, r3, #25
 8013f86:	b2db      	uxtb	r3, r3
 8013f88:	2b0f      	cmp	r3, #15
 8013f8a:	d82e      	bhi.n	8013fea <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 8013f8c:	4b7d      	ldr	r3, [pc, #500]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013f8e:	781a      	ldrb	r2, [r3, #0]
 8013f90:	2101      	movs	r1, #1
 8013f92:	430a      	orrs	r2, r1
 8013f94:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 8013f96:	003b      	movs	r3, r7
 8013f98:	0019      	movs	r1, r3
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	f001 f8d4 	bl	8015148 <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8013fa4:	e019      	b.n	8013fda <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 8013fa6:	4a77      	ldr	r2, [pc, #476]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013faa:	18d3      	adds	r3, r2, r3
 8013fac:	3301      	adds	r3, #1
 8013fae:	781a      	ldrb	r2, [r3, #0]
 8013fb0:	0039      	movs	r1, r7
 8013fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb4:	18cb      	adds	r3, r1, r3
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d00b      	beq.n	8013fd4 <_itsdk_console_processLine+0xec>
 8013fbc:	4b71      	ldr	r3, [pc, #452]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d004      	beq.n	8013fd4 <_itsdk_console_processLine+0xec>
 8013fca:	4b6e      	ldr	r3, [pc, #440]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013fcc:	781a      	ldrb	r2, [r3, #0]
 8013fce:	2101      	movs	r1, #1
 8013fd0:	438a      	bics	r2, r1
 8013fd2:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 8013fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8013fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fdc:	2b0f      	cmp	r3, #15
 8013fde:	dde2      	ble.n	8013fa6 <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 8013fe0:	003b      	movs	r3, r7
 8013fe2:	2110      	movs	r1, #16
 8013fe4:	0018      	movs	r0, r3
 8013fe6:	f005 ff8e 	bl	8019f06 <bzero>
		}
		if ( __console.loginState == 1 ) {
 8013fea:	4b66      	ldr	r3, [pc, #408]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	2201      	movs	r2, #1
 8013ff0:	4013      	ands	r3, r2
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d015      	beq.n	8014024 <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 8013ff8:	f004 f81e 	bl	8018038 <itsdk_time_get_ms>
 8013ffc:	22fa      	movs	r2, #250	; 0xfa
 8013ffe:	0092      	lsls	r2, r2, #2
 8014000:	2300      	movs	r3, #0
 8014002:	f7ec fa61 	bl	80004c8 <__aeabi_uldivmod>
 8014006:	0003      	movs	r3, r0
 8014008:	000c      	movs	r4, r1
 801400a:	613b      	str	r3, [r7, #16]
 801400c:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	332d      	adds	r3, #45	; 0x2d
 8014012:	33ff      	adds	r3, #255	; 0xff
 8014014:	001a      	movs	r2, r3
 8014016:	4b5b      	ldr	r3, [pc, #364]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8014018:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 801401a:	4b5b      	ldr	r3, [pc, #364]	; (8014188 <_itsdk_console_processLine+0x2a0>)
 801401c:	0018      	movs	r0, r3
 801401e:	f7ff ff4b 	bl	8013eb8 <_itsdk_console_printf>
 8014022:	e0ab      	b.n	801417c <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 8014024:	4b59      	ldr	r3, [pc, #356]	; (801418c <_itsdk_console_processLine+0x2a4>)
 8014026:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8014028:	2333      	movs	r3, #51	; 0x33
 801402a:	18fb      	adds	r3, r7, r3
 801402c:	2201      	movs	r2, #1
 801402e:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8014030:	e022      	b.n	8014078 <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 8014032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d01a      	beq.n	8014070 <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	4a51      	ldr	r2, [pc, #324]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8014040:	7812      	ldrb	r2, [r2, #0]
 8014042:	0612      	lsls	r2, r2, #24
 8014044:	0e52      	lsrs	r2, r2, #25
 8014046:	b2d2      	uxtb	r2, r2
 8014048:	0011      	movs	r1, r2
 801404a:	251e      	movs	r5, #30
 801404c:	197c      	adds	r4, r7, r5
 801404e:	4a50      	ldr	r2, [pc, #320]	; (8014190 <_itsdk_console_processLine+0x2a8>)
 8014050:	0010      	movs	r0, r2
 8014052:	4798      	blx	r3
 8014054:	0003      	movs	r3, r0
 8014056:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 8014058:	197b      	adds	r3, r7, r5
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d002      	beq.n	8014066 <_itsdk_console_processLine+0x17e>
 8014060:	2b02      	cmp	r3, #2
 8014062:	d000      	beq.n	8014066 <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 8014064:	e005      	b.n	8014072 <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 8014066:	2333      	movs	r3, #51	; 0x33
 8014068:	18fb      	adds	r3, r7, r3
 801406a:	2200      	movs	r2, #0
 801406c:	701a      	strb	r2, [r3, #0]
						  break;
 801406e:	e000      	b.n	8014072 <_itsdk_console_processLine+0x18a>
				   }
				}
 8014070:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 8014072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 8014078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407a:	2b00      	cmp	r3, #0
 801407c:	d1d9      	bne.n	8014032 <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 801407e:	2333      	movs	r3, #51	; 0x33
 8014080:	18fb      	adds	r3, r7, r3
 8014082:	781b      	ldrb	r3, [r3, #0]
 8014084:	2b01      	cmp	r3, #1
 8014086:	d000      	beq.n	801408a <_itsdk_console_processLine+0x1a2>
 8014088:	e078      	b.n	801417c <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 801408a:	4b42      	ldr	r3, [pc, #264]	; (8014194 <_itsdk_console_processLine+0x2ac>)
 801408c:	0018      	movs	r0, r3
 801408e:	f7ff ff13 	bl	8013eb8 <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 8014092:	4b41      	ldr	r3, [pc, #260]	; (8014198 <_itsdk_console_processLine+0x2b0>)
 8014094:	0018      	movs	r0, r3
 8014096:	f7ff ff0f 	bl	8013eb8 <_itsdk_console_printf>
 801409a:	e06f      	b.n	801417c <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 801409c:	4b39      	ldr	r3, [pc, #228]	; (8014184 <_itsdk_console_processLine+0x29c>)
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	2201      	movs	r2, #1
 80140a2:	4393      	bics	r3, r2
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d068      	beq.n	801417c <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 80140aa:	f003 ffc5 	bl	8018038 <itsdk_time_get_ms>
 80140ae:	22fa      	movs	r2, #250	; 0xfa
 80140b0:	0092      	lsls	r2, r2, #2
 80140b2:	2300      	movs	r3, #0
 80140b4:	f7ec fa08 	bl	80004c8 <__aeabi_uldivmod>
 80140b8:	0003      	movs	r3, r0
 80140ba:	000c      	movs	r4, r1
 80140bc:	623b      	str	r3, [r7, #32]
 80140be:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 80140c0:	6a3b      	ldr	r3, [r7, #32]
 80140c2:	332d      	adds	r3, #45	; 0x2d
 80140c4:	33ff      	adds	r3, #255	; 0xff
 80140c6:	001a      	movs	r2, r3
 80140c8:	4b2e      	ldr	r3, [pc, #184]	; (8014184 <_itsdk_console_processLine+0x29c>)
 80140ca:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 80140cc:	4b2f      	ldr	r3, [pc, #188]	; (801418c <_itsdk_console_processLine+0x2a4>)
 80140ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 80140d0:	232b      	movs	r3, #43	; 0x2b
 80140d2:	18fb      	adds	r3, r7, r3
 80140d4:	2201      	movs	r2, #1
 80140d6:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 80140d8:	e042      	b.n	8014160 <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 80140da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d01a      	beq.n	8014118 <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 80140e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	4a27      	ldr	r2, [pc, #156]	; (8014184 <_itsdk_console_processLine+0x29c>)
 80140e8:	7812      	ldrb	r2, [r2, #0]
 80140ea:	0612      	lsls	r2, r2, #24
 80140ec:	0e52      	lsrs	r2, r2, #25
 80140ee:	b2d2      	uxtb	r2, r2
 80140f0:	0011      	movs	r1, r2
 80140f2:	251f      	movs	r5, #31
 80140f4:	197c      	adds	r4, r7, r5
 80140f6:	4a26      	ldr	r2, [pc, #152]	; (8014190 <_itsdk_console_processLine+0x2a8>)
 80140f8:	0010      	movs	r0, r2
 80140fa:	4798      	blx	r3
 80140fc:	0003      	movs	r3, r0
 80140fe:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8014100:	197b      	adds	r3, r7, r5
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <_itsdk_console_processLine+0x226>
 8014108:	2b02      	cmp	r3, #2
 801410a:	d000      	beq.n	801410e <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 801410c:	e005      	b.n	801411a <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 801410e:	232b      	movs	r3, #43	; 0x2b
 8014110:	18fb      	adds	r3, r7, r3
 8014112:	2200      	movs	r2, #0
 8014114:	701a      	strb	r2, [r3, #0]
						  break;
 8014116:	e000      	b.n	801411a <_itsdk_console_processLine+0x232>
				   }
			  }
 8014118:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 801411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d01a      	beq.n	8014158 <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8014122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4a17      	ldr	r2, [pc, #92]	; (8014184 <_itsdk_console_processLine+0x29c>)
 8014128:	7812      	ldrb	r2, [r2, #0]
 801412a:	0612      	lsls	r2, r2, #24
 801412c:	0e52      	lsrs	r2, r2, #25
 801412e:	b2d2      	uxtb	r2, r2
 8014130:	0011      	movs	r1, r2
 8014132:	251f      	movs	r5, #31
 8014134:	197c      	adds	r4, r7, r5
 8014136:	4a16      	ldr	r2, [pc, #88]	; (8014190 <_itsdk_console_processLine+0x2a8>)
 8014138:	0010      	movs	r0, r2
 801413a:	4798      	blx	r3
 801413c:	0003      	movs	r3, r0
 801413e:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8014140:	197b      	adds	r3, r7, r5
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d002      	beq.n	801414e <_itsdk_console_processLine+0x266>
 8014148:	2b02      	cmp	r3, #2
 801414a:	d000      	beq.n	801414e <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 801414c:	e005      	b.n	801415a <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 801414e:	232b      	movs	r3, #43	; 0x2b
 8014150:	18fb      	adds	r3, r7, r3
 8014152:	2200      	movs	r2, #0
 8014154:	701a      	strb	r2, [r3, #0]
						  break;
 8014156:	e000      	b.n	801415a <_itsdk_console_processLine+0x272>
				   }
			  }
 8014158:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 801415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415c:	689b      	ldr	r3, [r3, #8]
 801415e:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 8014160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014162:	2b00      	cmp	r3, #0
 8014164:	d1b9      	bne.n	80140da <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8014166:	232b      	movs	r3, #43	; 0x2b
 8014168:	18fb      	adds	r3, r7, r3
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	2b01      	cmp	r3, #1
 801416e:	d105      	bne.n	801417c <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 8014170:	4b09      	ldr	r3, [pc, #36]	; (8014198 <_itsdk_console_processLine+0x2b0>)
 8014172:	0018      	movs	r0, r3
 8014174:	f7ff fea0 	bl	8013eb8 <_itsdk_console_printf>
 8014178:	e000      	b.n	801417c <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 801417a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 801417c:	46bd      	mov	sp, r7
 801417e:	b010      	add	sp, #64	; 0x40
 8014180:	bdb0      	pop	{r4, r5, r7, pc}
 8014182:	46c0      	nop			; (mov r8, r8)
 8014184:	20000cc4 	.word	0x20000cc4
 8014188:	0801add8 	.word	0x0801add8
 801418c:	20000cf4 	.word	0x20000cf4
 8014190:	20000cc5 	.word	0x20000cc5
 8014194:	0801af20 	.word	0x0801af20
 8014198:	0801ade0 	.word	0x0801ade0

0801419c <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	0002      	movs	r2, r0
 80141a4:	1dfb      	adds	r3, r7, #7
 80141a6:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 80141a8:	1dfb      	adds	r3, r7, #7
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	2b0a      	cmp	r3, #10
 80141ae:	d007      	beq.n	80141c0 <_itsdk_console_processChar+0x24>
 80141b0:	1dfb      	adds	r3, r7, #7
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	2b0d      	cmp	r3, #13
 80141b6:	d003      	beq.n	80141c0 <_itsdk_console_processChar+0x24>
 80141b8:	1dfb      	adds	r3, r7, #7
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d10e      	bne.n	80141de <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 80141c0:	4b1c      	ldr	r3, [pc, #112]	; (8014234 <_itsdk_console_processChar+0x98>)
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2201      	movs	r2, #1
 80141c6:	4393      	bics	r3, r2
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d02d      	beq.n	801422a <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 80141ce:	f7ff fe8b 	bl	8013ee8 <_itsdk_console_processLine>
			__console.pBuffer = 0;
 80141d2:	4b18      	ldr	r3, [pc, #96]	; (8014234 <_itsdk_console_processChar+0x98>)
 80141d4:	781a      	ldrb	r2, [r3, #0]
 80141d6:	2101      	movs	r1, #1
 80141d8:	400a      	ands	r2, r1
 80141da:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 80141dc:	e025      	b.n	801422a <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 80141de:	4b15      	ldr	r3, [pc, #84]	; (8014234 <_itsdk_console_processChar+0x98>)
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	061b      	lsls	r3, r3, #24
 80141e4:	0e5b      	lsrs	r3, r3, #25
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	2b27      	cmp	r3, #39	; 0x27
 80141ea:	d81e      	bhi.n	801422a <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 80141ec:	4b11      	ldr	r3, [pc, #68]	; (8014234 <_itsdk_console_processChar+0x98>)
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	061b      	lsls	r3, r3, #24
 80141f2:	0e5b      	lsrs	r3, r3, #25
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	001a      	movs	r2, r3
 80141f8:	4b0e      	ldr	r3, [pc, #56]	; (8014234 <_itsdk_console_processChar+0x98>)
 80141fa:	189b      	adds	r3, r3, r2
 80141fc:	1dfa      	adds	r2, r7, #7
 80141fe:	7812      	ldrb	r2, [r2, #0]
 8014200:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 8014202:	4b0c      	ldr	r3, [pc, #48]	; (8014234 <_itsdk_console_processChar+0x98>)
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	061b      	lsls	r3, r3, #24
 8014208:	0e5b      	lsrs	r3, r3, #25
 801420a:	b2db      	uxtb	r3, r3
 801420c:	3301      	adds	r3, #1
 801420e:	1c1a      	adds	r2, r3, #0
 8014210:	237f      	movs	r3, #127	; 0x7f
 8014212:	4013      	ands	r3, r2
 8014214:	b2da      	uxtb	r2, r3
 8014216:	4b07      	ldr	r3, [pc, #28]	; (8014234 <_itsdk_console_processChar+0x98>)
 8014218:	1890      	adds	r0, r2, r2
 801421a:	781a      	ldrb	r2, [r3, #0]
 801421c:	2101      	movs	r1, #1
 801421e:	400a      	ands	r2, r1
 8014220:	1c11      	adds	r1, r2, #0
 8014222:	1c02      	adds	r2, r0, #0
 8014224:	430a      	orrs	r2, r1
 8014226:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8014228:	e7ff      	b.n	801422a <_itsdk_console_processChar+0x8e>
 801422a:	46c0      	nop			; (mov r8, r8)
 801422c:	46bd      	mov	sp, r7
 801422e:	b002      	add	sp, #8
 8014230:	bd80      	pop	{r7, pc}
 8014232:	46c0      	nop			; (mov r8, r8)
 8014234:	20000cc4 	.word	0x20000cc4

08014238 <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 8014240:	4b13      	ldr	r3, [pc, #76]	; (8014290 <itsdk_console_registerCommand+0x58>)
 8014242:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	681a      	ldr	r2, [r3, #0]
 8014248:	4b12      	ldr	r3, [pc, #72]	; (8014294 <itsdk_console_registerCommand+0x5c>)
 801424a:	429a      	cmp	r2, r3
 801424c:	d008      	beq.n	8014260 <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 801424e:	4b12      	ldr	r3, [pc, #72]	; (8014298 <itsdk_console_registerCommand+0x60>)
 8014250:	2100      	movs	r1, #0
 8014252:	0018      	movs	r0, r3
 8014254:	f002 fe92 	bl	8016f7c <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 8014258:	e002      	b.n	8014260 <itsdk_console_registerCommand+0x28>
	  c = c->next;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	689b      	ldr	r3, [r3, #8]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d004      	beq.n	8014272 <itsdk_console_registerCommand+0x3a>
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	689b      	ldr	r3, [r3, #8]
 801426c:	687a      	ldr	r2, [r7, #4]
 801426e:	429a      	cmp	r2, r3
 8014270:	d1f3      	bne.n	801425a <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	429a      	cmp	r2, r3
 801427a:	d005      	beq.n	8014288 <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2200      	movs	r2, #0
 8014286:	609a      	str	r2, [r3, #8]
	}
}
 8014288:	46c0      	nop			; (mov r8, r8)
 801428a:	46bd      	mov	sp, r7
 801428c:	b004      	add	sp, #16
 801428e:	bd80      	pop	{r7, pc}
 8014290:	20000cf4 	.word	0x20000cf4
 8014294:	08013a65 	.word	0x08013a65
 8014298:	c0000003 	.word	0xc0000003

0801429c <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 801429c:	b590      	push	{r4, r7, lr}
 801429e:	b089      	sub	sp, #36	; 0x24
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	0008      	movs	r0, r1
 80142a6:	0011      	movs	r1, r2
 80142a8:	1cbb      	adds	r3, r7, #2
 80142aa:	1c02      	adds	r2, r0, #0
 80142ac:	801a      	strh	r2, [r3, #0]
 80142ae:	1c7b      	adds	r3, r7, #1
 80142b0:	1c0a      	adds	r2, r1, #0
 80142b2:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 80142b4:	2410      	movs	r4, #16
 80142b6:	193b      	adds	r3, r7, r4
 80142b8:	4a17      	ldr	r2, [pc, #92]	; (8014318 <eeprom_write_config+0x7c>)
 80142ba:	801a      	strh	r2, [r3, #0]
	t.size = len;
 80142bc:	193b      	adds	r3, r7, r4
 80142be:	1cba      	adds	r2, r7, #2
 80142c0:	8812      	ldrh	r2, [r2, #0]
 80142c2:	809a      	strh	r2, [r3, #4]
	t.version = version;
 80142c4:	193b      	adds	r3, r7, r4
 80142c6:	1c7a      	adds	r2, r7, #1
 80142c8:	7812      	ldrb	r2, [r2, #0]
 80142ca:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 80142cc:	1cbb      	adds	r3, r7, #2
 80142ce:	881a      	ldrh	r2, [r3, #0]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	0011      	movs	r1, r2
 80142d4:	0018      	movs	r0, r3
 80142d6:	f003 faa5 	bl	8017824 <itsdk_computeCRC32>
 80142da:	0002      	movs	r2, r0
 80142dc:	193b      	adds	r3, r7, r4
 80142de:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 80142e4:	230c      	movs	r3, #12
 80142e6:	18fb      	adds	r3, r7, r3
 80142e8:	0018      	movs	r0, r3
 80142ea:	f000 f88f 	bl	801440c <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 80142ee:	68f9      	ldr	r1, [r7, #12]
 80142f0:	193a      	adds	r2, r7, r4
 80142f2:	2310      	movs	r3, #16
 80142f4:	2000      	movs	r0, #0
 80142f6:	f005 f86f 	bl	80193d8 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	3310      	adds	r3, #16
 80142fe:	0019      	movs	r1, r3
 8014300:	1cbb      	adds	r3, r7, #2
 8014302:	881b      	ldrh	r3, [r3, #0]
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	2000      	movs	r0, #0
 8014308:	f005 f866 	bl	80193d8 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 801430c:	2301      	movs	r3, #1
}
 801430e:	0018      	movs	r0, r3
 8014310:	46bd      	mov	sp, r7
 8014312:	b009      	add	sp, #36	; 0x24
 8014314:	bd90      	pop	{r4, r7, pc}
 8014316:	46c0      	nop			; (mov r8, r8)
 8014318:	ffffa5fc 	.word	0xffffa5fc

0801431c <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 801431c:	b5b0      	push	{r4, r5, r7, lr}
 801431e:	b08a      	sub	sp, #40	; 0x28
 8014320:	af00      	add	r7, sp, #0
 8014322:	60f8      	str	r0, [r7, #12]
 8014324:	0008      	movs	r0, r1
 8014326:	0011      	movs	r1, r2
 8014328:	607b      	str	r3, [r7, #4]
 801432a:	230a      	movs	r3, #10
 801432c:	18fb      	adds	r3, r7, r3
 801432e:	1c02      	adds	r2, r0, #0
 8014330:	801a      	strh	r2, [r3, #0]
 8014332:	2309      	movs	r3, #9
 8014334:	18fb      	adds	r3, r7, r3
 8014336:	1c0a      	adds	r2, r1, #0
 8014338:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 801433a:	2300      	movs	r3, #0
 801433c:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 801433e:	2310      	movs	r3, #16
 8014340:	18fb      	adds	r3, r7, r3
 8014342:	0018      	movs	r0, r3
 8014344:	f000 f862 	bl	801440c <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8014348:	6939      	ldr	r1, [r7, #16]
 801434a:	2414      	movs	r4, #20
 801434c:	193a      	adds	r2, r7, r4
 801434e:	2310      	movs	r3, #16
 8014350:	2000      	movs	r0, #0
 8014352:	f005 f8e5 	bl	8019520 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 8014356:	193b      	adds	r3, r7, r4
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	4a2b      	ldr	r2, [pc, #172]	; (8014408 <eeprom_read_config+0xec>)
 801435c:	4293      	cmp	r3, r2
 801435e:	d004      	beq.n	801436a <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2200      	movs	r2, #0
 8014364:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 8014366:	2300      	movs	r3, #0
 8014368:	e049      	b.n	80143fe <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 801436a:	2114      	movs	r1, #20
 801436c:	187b      	adds	r3, r7, r1
 801436e:	789a      	ldrb	r2, [r3, #2]
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 8014374:	187b      	adds	r3, r7, r1
 8014376:	789b      	ldrb	r3, [r3, #2]
 8014378:	2209      	movs	r2, #9
 801437a:	18ba      	adds	r2, r7, r2
 801437c:	7812      	ldrb	r2, [r2, #0]
 801437e:	429a      	cmp	r2, r3
 8014380:	d001      	beq.n	8014386 <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 8014382:	2300      	movs	r3, #0
 8014384:	e03b      	b.n	80143fe <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 8014386:	2314      	movs	r3, #20
 8014388:	18fb      	adds	r3, r7, r3
 801438a:	889b      	ldrh	r3, [r3, #4]
 801438c:	220a      	movs	r2, #10
 801438e:	18ba      	adds	r2, r7, r2
 8014390:	8812      	ldrh	r2, [r2, #0]
 8014392:	429a      	cmp	r2, r3
 8014394:	d009      	beq.n	80143aa <eeprom_read_config+0x8e>
 8014396:	2330      	movs	r3, #48	; 0x30
 8014398:	2208      	movs	r2, #8
 801439a:	4694      	mov	ip, r2
 801439c:	44bc      	add	ip, r7
 801439e:	4463      	add	r3, ip
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d101      	bne.n	80143aa <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 80143a6:	2300      	movs	r3, #0
 80143a8:	e029      	b.n	80143fe <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 80143aa:	200a      	movs	r0, #10
 80143ac:	183b      	adds	r3, r7, r0
 80143ae:	2514      	movs	r5, #20
 80143b0:	197a      	adds	r2, r7, r5
 80143b2:	8892      	ldrh	r2, [r2, #4]
 80143b4:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	3310      	adds	r3, #16
 80143ba:	0019      	movs	r1, r3
 80143bc:	0004      	movs	r4, r0
 80143be:	183b      	adds	r3, r7, r0
 80143c0:	881b      	ldrh	r3, [r3, #0]
 80143c2:	68fa      	ldr	r2, [r7, #12]
 80143c4:	2000      	movs	r0, #0
 80143c6:	f005 f8ab 	bl	8019520 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 80143ca:	0020      	movs	r0, r4
 80143cc:	183b      	adds	r3, r7, r0
 80143ce:	881a      	ldrh	r2, [r3, #0]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	0011      	movs	r1, r2
 80143d4:	0018      	movs	r0, r3
 80143d6:	f003 fa25 	bl	8017824 <itsdk_computeCRC32>
 80143da:	0003      	movs	r3, r0
 80143dc:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 80143de:	197b      	adds	r3, r7, r5
 80143e0:	689b      	ldr	r3, [r3, #8]
 80143e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d009      	beq.n	80143fc <eeprom_read_config+0xe0>
 80143e8:	2330      	movs	r3, #48	; 0x30
 80143ea:	2208      	movs	r2, #8
 80143ec:	4694      	mov	ip, r2
 80143ee:	44bc      	add	ip, r7
 80143f0:	4463      	add	r3, ip
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d101      	bne.n	80143fc <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 80143f8:	2300      	movs	r3, #0
 80143fa:	e000      	b.n	80143fe <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 80143fc:	2301      	movs	r3, #1
}
 80143fe:	0018      	movs	r0, r3
 8014400:	46bd      	mov	sp, r7
 8014402:	b00a      	add	sp, #40	; 0x28
 8014404:	bdb0      	pop	{r4, r5, r7, pc}
 8014406:	46c0      	nop			; (mov r8, r8)
 8014408:	0000a5fc 	.word	0x0000a5fc

0801440c <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 801440c:	b580      	push	{r7, lr}
 801440e:	b086      	sub	sp, #24
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 8014414:	2300      	movs	r3, #0
 8014416:	613b      	str	r3, [r7, #16]
 8014418:	2300      	movs	r3, #0
 801441a:	60fb      	str	r3, [r7, #12]
 801441c:	2300      	movs	r3, #0
 801441e:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 8014420:	2310      	movs	r3, #16
 8014422:	18fb      	adds	r3, r7, r3
 8014424:	0018      	movs	r0, r3
 8014426:	f000 fde6 	bl	8014ff6 <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 801442a:	230c      	movs	r3, #12
 801442c:	18fb      	adds	r3, r7, r3
 801442e:	0018      	movs	r0, r3
 8014430:	f002 fec9 	bl	80171c6 <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	6939      	ldr	r1, [r7, #16]
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	18c9      	adds	r1, r1, r3
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	18cb      	adds	r3, r1, r3
 8014442:	18d2      	adds	r2, r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 8014448:	2301      	movs	r3, #1
}
 801444a:	0018      	movs	r0, r3
 801444c:	46bd      	mov	sp, r7
 801444e:	b006      	add	sp, #24
 8014450:	bd80      	pop	{r7, pc}

08014452 <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 8014452:	b590      	push	{r4, r7, lr}
 8014454:	b089      	sub	sp, #36	; 0x24
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 801445a:	2300      	movs	r3, #0
 801445c:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 801445e:	230c      	movs	r3, #12
 8014460:	18fb      	adds	r3, r7, r3
 8014462:	0018      	movs	r0, r3
 8014464:	f7ff ffd2 	bl	801440c <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8014468:	68f9      	ldr	r1, [r7, #12]
 801446a:	2410      	movs	r4, #16
 801446c:	193a      	adds	r2, r7, r4
 801446e:	2310      	movs	r3, #16
 8014470:	2000      	movs	r0, #0
 8014472:	f005 f855 	bl	8019520 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 8014476:	193b      	adds	r3, r7, r4
 8014478:	889b      	ldrh	r3, [r3, #4]
 801447a:	3310      	adds	r3, #16
 801447c:	001a      	movs	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 8014482:	2301      	movs	r3, #1
}
 8014484:	0018      	movs	r0, r3
 8014486:	46bd      	mov	sp, r7
 8014488:	b009      	add	sp, #36	; 0x24
 801448a:	bd90      	pop	{r4, r7, pc}

0801448c <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 8014492:	2300      	movs	r3, #0
 8014494:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8014496:	2300      	movs	r3, #0
 8014498:	607b      	str	r3, [r7, #4]
 801449a:	e008      	b.n	80144ae <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 801449c:	6879      	ldr	r1, [r7, #4]
 801449e:	003a      	movs	r2, r7
 80144a0:	2304      	movs	r3, #4
 80144a2:	2000      	movs	r0, #0
 80144a4:	f004 ff98 	bl	80193d8 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	3304      	adds	r3, #4
 80144ac:	607b      	str	r3, [r7, #4]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	4a03      	ldr	r2, [pc, #12]	; (80144c0 <eeprom_clearAllEprom+0x34>)
 80144b2:	4293      	cmp	r3, r2
 80144b4:	ddf2      	ble.n	801449c <eeprom_clearAllEprom+0x10>
	}
}
 80144b6:	46c0      	nop			; (mov r8, r8)
 80144b8:	46bd      	mov	sp, r7
 80144ba:	b002      	add	sp, #8
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	46c0      	nop			; (mov r8, r8)
 80144c0:	000017ff 	.word	0x000017ff

080144c4 <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 80144c4:	b580      	push	{r7, lr}
 80144c6:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 80144c8:	4b1b      	ldr	r3, [pc, #108]	; (8014538 <itsdk_config_sdk_resetToFactory+0x74>)
 80144ca:	2100      	movs	r1, #0
 80144cc:	0018      	movs	r0, r3
 80144ce:	f002 fd55 	bl	8016f7c <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 80144d2:	4b1a      	ldr	r3, [pc, #104]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 80144d4:	2216      	movs	r2, #22
 80144d6:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80144d8:	4b18      	ldr	r3, [pc, #96]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 80144da:	2218      	movs	r2, #24
 80144dc:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80144de:	4b17      	ldr	r3, [pc, #92]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 80144e0:	2202      	movs	r2, #2
 80144e2:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 80144e4:	4b15      	ldr	r3, [pc, #84]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 80144e6:	7a9a      	ldrb	r2, [r3, #10]
 80144e8:	213f      	movs	r1, #63	; 0x3f
 80144ea:	400a      	ands	r2, r1
 80144ec:	1c11      	adds	r1, r2, #0
 80144ee:	2240      	movs	r2, #64	; 0x40
 80144f0:	430a      	orrs	r2, r1
 80144f2:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 80144f4:	4b11      	ldr	r3, [pc, #68]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 80144f6:	7a9a      	ldrb	r2, [r3, #10]
 80144f8:	2130      	movs	r1, #48	; 0x30
 80144fa:	438a      	bics	r2, r1
 80144fc:	1c11      	adds	r1, r2, #0
 80144fe:	2210      	movs	r2, #16
 8014500:	430a      	orrs	r2, r1
 8014502:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 8014504:	4b0d      	ldr	r3, [pc, #52]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 8014506:	7a9a      	ldrb	r2, [r3, #10]
 8014508:	2103      	movs	r1, #3
 801450a:	438a      	bics	r2, r1
 801450c:	1c11      	adds	r1, r2, #0
 801450e:	2201      	movs	r2, #1
 8014510:	430a      	orrs	r2, r1
 8014512:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 8014514:	4b09      	ldr	r3, [pc, #36]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 8014516:	7a9a      	ldrb	r2, [r3, #10]
 8014518:	210c      	movs	r1, #12
 801451a:	438a      	bics	r2, r1
 801451c:	1c11      	adds	r1, r2, #0
 801451e:	2204      	movs	r2, #4
 8014520:	430a      	orrs	r2, r1
 8014522:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 8014524:	4b05      	ldr	r3, [pc, #20]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 8014526:	2200      	movs	r2, #0
 8014528:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 801452a:	4b04      	ldr	r3, [pc, #16]	; (801453c <itsdk_config_sdk_resetToFactory+0x78>)
 801452c:	2220      	movs	r2, #32
 801452e:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 8014530:	2302      	movs	r3, #2
	}
 8014532:	0018      	movs	r0, r3
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	10000073 	.word	0x10000073
 801453c:	200011ac 	.word	0x200011ac

08014540 <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 8014540:	b580      	push	{r7, lr}
 8014542:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8014544:	4b05      	ldr	r3, [pc, #20]	; (801455c <itsdk_config_app_resetToFactory+0x1c>)
 8014546:	2201      	movs	r2, #1
 8014548:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 801454a:	4b05      	ldr	r3, [pc, #20]	; (8014560 <itsdk_config_app_resetToFactory+0x20>)
 801454c:	2100      	movs	r1, #0
 801454e:	0018      	movs	r0, r3
 8014550:	f002 fd14 	bl	8016f7c <itsdk_error_report>
			return CONFIG_FAILED;
 8014554:	2304      	movs	r3, #4
		}
 8014556:	0018      	movs	r0, r3
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	200011ac 	.word	0x200011ac
 8014560:	40000070 	.word	0x40000070

08014564 <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8014564:	b580      	push	{r7, lr}
 8014566:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8014568:	4b05      	ldr	r3, [pc, #20]	; (8014580 <itsdk_config_app_upgradeConfiguration+0x1c>)
 801456a:	2201      	movs	r2, #1
 801456c:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 801456e:	4b05      	ldr	r3, [pc, #20]	; (8014584 <itsdk_config_app_upgradeConfiguration+0x20>)
 8014570:	2100      	movs	r1, #0
 8014572:	0018      	movs	r0, r3
 8014574:	f002 fd02 	bl	8016f7c <itsdk_error_report>
			return CONFIG_FAILED;
 8014578:	2304      	movs	r3, #4
		}
 801457a:	0018      	movs	r0, r3
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	200011ac 	.word	0x200011ac
 8014584:	40000070 	.word	0x40000070

08014588 <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 8014588:	b5b0      	push	{r4, r5, r7, lr}
 801458a:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 801458c:	f7ff ff9a 	bl	80144c4 <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 8014590:	f7ff ffd6 	bl	8014540 <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8014594:	4b0b      	ldr	r3, [pc, #44]	; (80145c4 <itsdk_config_resetToFactory+0x3c>)
 8014596:	2201      	movs	r2, #1
 8014598:	211c      	movs	r1, #28
 801459a:	0018      	movs	r0, r3
 801459c:	f7ff fe7e 	bl	801429c <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 80145a0:	4b09      	ldr	r3, [pc, #36]	; (80145c8 <itsdk_config_resetToFactory+0x40>)
 80145a2:	4a08      	ldr	r2, [pc, #32]	; (80145c4 <itsdk_config_resetToFactory+0x3c>)
 80145a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80145a6:	c313      	stmia	r3!, {r0, r1, r4}
 80145a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80145aa:	c313      	stmia	r3!, {r0, r1, r4}
 80145ac:	6812      	ldr	r2, [r2, #0]
 80145ae:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80145b0:	4b06      	ldr	r3, [pc, #24]	; (80145cc <itsdk_config_resetToFactory+0x44>)
 80145b2:	2103      	movs	r1, #3
 80145b4:	0018      	movs	r0, r3
 80145b6:	f002 fce1 	bl	8016f7c <itsdk_error_report>
	     return CONFIG_SUCCESS;
 80145ba:	2300      	movs	r3, #0
	}
 80145bc:	0018      	movs	r0, r3
 80145be:	46bd      	mov	sp, r7
 80145c0:	bdb0      	pop	{r4, r5, r7, pc}
 80145c2:	46c0      	nop			; (mov r8, r8)
 80145c4:	200011ac 	.word	0x200011ac
 80145c8:	20001190 	.word	0x20001190
 80145cc:	50000071 	.word	0x50000071

080145d0 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 80145d0:	b590      	push	{r4, r7, lr}
 80145d2:	b087      	sub	sp, #28
 80145d4:	af02      	add	r7, sp, #8
 80145d6:	0002      	movs	r2, r0
 80145d8:	1dfb      	adds	r3, r7, #7
 80145da:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 80145dc:	4b60      	ldr	r3, [pc, #384]	; (8014760 <itsdk_config_loadConfiguration+0x190>)
 80145de:	4a61      	ldr	r2, [pc, #388]	; (8014764 <itsdk_config_loadConfiguration+0x194>)
 80145e0:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 80145e2:	4b5f      	ldr	r3, [pc, #380]	; (8014760 <itsdk_config_loadConfiguration+0x190>)
 80145e4:	4a60      	ldr	r2, [pc, #384]	; (8014768 <itsdk_config_loadConfiguration+0x198>)
 80145e6:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 80145e8:	4b5d      	ldr	r3, [pc, #372]	; (8014760 <itsdk_config_loadConfiguration+0x190>)
 80145ea:	2200      	movs	r2, #0
 80145ec:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 80145ee:	4b5c      	ldr	r3, [pc, #368]	; (8014760 <itsdk_config_loadConfiguration+0x190>)
 80145f0:	0018      	movs	r0, r3
 80145f2:	f7ff fe21 	bl	8014238 <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 80145f6:	230f      	movs	r3, #15
 80145f8:	18fb      	adds	r3, r7, r3
 80145fa:	2200      	movs	r2, #0
 80145fc:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 80145fe:	230e      	movs	r3, #14
 8014600:	18fb      	adds	r3, r7, r3
 8014602:	2200      	movs	r2, #0
 8014604:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 8014606:	1dfb      	adds	r3, r7, #7
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	2b01      	cmp	r3, #1
 801460c:	d100      	bne.n	8014610 <itsdk_config_loadConfiguration+0x40>
 801460e:	e071      	b.n	80146f4 <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 8014610:	230d      	movs	r3, #13
 8014612:	18fa      	adds	r2, r7, r3
 8014614:	4855      	ldr	r0, [pc, #340]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 8014616:	2301      	movs	r3, #1
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	0013      	movs	r3, r2
 801461c:	2201      	movs	r2, #1
 801461e:	211c      	movs	r1, #28
 8014620:	f7ff fe7c 	bl	801431c <eeprom_read_config>
 8014624:	1e03      	subs	r3, r0, #0
 8014626:	d11c      	bne.n	8014662 <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 8014628:	230d      	movs	r3, #13
 801462a:	18fb      	adds	r3, r7, r3
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d109      	bne.n	8014646 <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 8014632:	4b4f      	ldr	r3, [pc, #316]	; (8014770 <itsdk_config_loadConfiguration+0x1a0>)
 8014634:	2100      	movs	r1, #0
 8014636:	0018      	movs	r0, r3
 8014638:	f002 fca0 	bl	8016f7c <itsdk_error_report>
			requestFactoryReset=1;
 801463c:	230f      	movs	r3, #15
 801463e:	18fb      	adds	r3, r7, r3
 8014640:	2201      	movs	r2, #1
 8014642:	701a      	strb	r2, [r3, #0]
 8014644:	e00d      	b.n	8014662 <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 8014646:	230d      	movs	r3, #13
 8014648:	18fb      	adds	r3, r7, r3
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	2b01      	cmp	r3, #1
 801464e:	d008      	beq.n	8014662 <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 8014650:	4b48      	ldr	r3, [pc, #288]	; (8014774 <itsdk_config_loadConfiguration+0x1a4>)
 8014652:	2100      	movs	r1, #0
 8014654:	0018      	movs	r0, r3
 8014656:	f002 fc91 	bl	8016f7c <itsdk_error_report>
			requestFactoryReset=1;
 801465a:	230f      	movs	r3, #15
 801465c:	18fb      	adds	r3, r7, r3
 801465e:	2201      	movs	r2, #1
 8014660:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 8014662:	230f      	movs	r3, #15
 8014664:	18fb      	adds	r3, r7, r3
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d121      	bne.n	80146b0 <itsdk_config_loadConfiguration+0xe0>
 801466c:	4b3f      	ldr	r3, [pc, #252]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	2b16      	cmp	r3, #22
 8014672:	d103      	bne.n	801467c <itsdk_config_loadConfiguration+0xac>
 8014674:	4b3d      	ldr	r3, [pc, #244]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 8014676:	885b      	ldrh	r3, [r3, #2]
 8014678:	2b18      	cmp	r3, #24
 801467a:	d019      	beq.n	80146b0 <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 801467c:	4b3b      	ldr	r3, [pc, #236]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 801467e:	885b      	ldrh	r3, [r3, #2]
 8014680:	2b18      	cmp	r3, #24
 8014682:	d009      	beq.n	8014698 <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8014684:	230f      	movs	r3, #15
 8014686:	18fb      	adds	r3, r7, r3
 8014688:	2201      	movs	r2, #1
 801468a:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 801468c:	4b3a      	ldr	r3, [pc, #232]	; (8014778 <itsdk_config_loadConfiguration+0x1a8>)
 801468e:	2100      	movs	r1, #0
 8014690:	0018      	movs	r0, r3
 8014692:	f002 fc73 	bl	8016f7c <itsdk_error_report>
 8014696:	e00b      	b.n	80146b0 <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8014698:	4b34      	ldr	r3, [pc, #208]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 801469a:	2216      	movs	r2, #22
 801469c:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 801469e:	230e      	movs	r3, #14
 80146a0:	18fb      	adds	r3, r7, r3
 80146a2:	2201      	movs	r2, #1
 80146a4:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 80146a6:	4b35      	ldr	r3, [pc, #212]	; (801477c <itsdk_config_loadConfiguration+0x1ac>)
 80146a8:	2116      	movs	r1, #22
 80146aa:	0018      	movs	r0, r3
 80146ac:	f002 fc66 	bl	8016f7c <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 80146b0:	230f      	movs	r3, #15
 80146b2:	18fb      	adds	r3, r7, r3
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d120      	bne.n	80146fc <itsdk_config_loadConfiguration+0x12c>
 80146ba:	4b2c      	ldr	r3, [pc, #176]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 80146bc:	7e1b      	ldrb	r3, [r3, #24]
 80146be:	2b01      	cmp	r3, #1
 80146c0:	d01c      	beq.n	80146fc <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 80146c2:	f7ff ff4f 	bl	8014564 <itsdk_config_app_upgradeConfiguration>
 80146c6:	0003      	movs	r3, r0
 80146c8:	2b03      	cmp	r3, #3
 80146ca:	d109      	bne.n	80146e0 <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 80146cc:	230e      	movs	r3, #14
 80146ce:	18fb      	adds	r3, r7, r3
 80146d0:	2201      	movs	r2, #1
 80146d2:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 80146d4:	4b2a      	ldr	r3, [pc, #168]	; (8014780 <itsdk_config_loadConfiguration+0x1b0>)
 80146d6:	2101      	movs	r1, #1
 80146d8:	0018      	movs	r0, r3
 80146da:	f002 fc4f 	bl	8016f7c <itsdk_error_report>
 80146de:	e00d      	b.n	80146fc <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 80146e0:	230f      	movs	r3, #15
 80146e2:	18fb      	adds	r3, r7, r3
 80146e4:	2201      	movs	r2, #1
 80146e6:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 80146e8:	4b23      	ldr	r3, [pc, #140]	; (8014778 <itsdk_config_loadConfiguration+0x1a8>)
 80146ea:	2101      	movs	r1, #1
 80146ec:	0018      	movs	r0, r3
 80146ee:	f002 fc45 	bl	8016f7c <itsdk_error_report>
 80146f2:	e003      	b.n	80146fc <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 80146f4:	230f      	movs	r3, #15
 80146f6:	18fb      	adds	r3, r7, r3
 80146f8:	2201      	movs	r2, #1
 80146fa:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 80146fc:	230f      	movs	r3, #15
 80146fe:	18fb      	adds	r3, r7, r3
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	2b01      	cmp	r3, #1
 8014704:	d10c      	bne.n	8014720 <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 8014706:	f7ff fedd 	bl	80144c4 <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 801470a:	f7ff ff19 	bl	8014540 <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 801470e:	230e      	movs	r3, #14
 8014710:	18fb      	adds	r3, r7, r3
 8014712:	2201      	movs	r2, #1
 8014714:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8014716:	4b1b      	ldr	r3, [pc, #108]	; (8014784 <itsdk_config_loadConfiguration+0x1b4>)
 8014718:	2103      	movs	r1, #3
 801471a:	0018      	movs	r0, r3
 801471c:	f002 fc2e 	bl	8016f7c <itsdk_error_report>
   }

   if (configUpdated == 1) {
 8014720:	230e      	movs	r3, #14
 8014722:	18fb      	adds	r3, r7, r3
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	2b01      	cmp	r3, #1
 8014728:	d105      	bne.n	8014736 <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 801472a:	4b10      	ldr	r3, [pc, #64]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 801472c:	2201      	movs	r2, #1
 801472e:	211c      	movs	r1, #28
 8014730:	0018      	movs	r0, r3
 8014732:	f7ff fdb3 	bl	801429c <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8014736:	4b14      	ldr	r3, [pc, #80]	; (8014788 <itsdk_config_loadConfiguration+0x1b8>)
 8014738:	4a0c      	ldr	r2, [pc, #48]	; (801476c <itsdk_config_loadConfiguration+0x19c>)
 801473a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801473c:	c313      	stmia	r3!, {r0, r1, r4}
 801473e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014740:	c313      	stmia	r3!, {r0, r1, r4}
 8014742:	6812      	ldr	r2, [r2, #0]
 8014744:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 8014746:	230f      	movs	r3, #15
 8014748:	18fb      	adds	r3, r7, r3
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d101      	bne.n	8014754 <itsdk_config_loadConfiguration+0x184>
 8014750:	2302      	movs	r3, #2
 8014752:	e000      	b.n	8014756 <itsdk_config_loadConfiguration+0x186>
 8014754:	2301      	movs	r3, #1

}
 8014756:	0018      	movs	r0, r3
 8014758:	46bd      	mov	sp, r7
 801475a:	b005      	add	sp, #20
 801475c:	bd90      	pop	{r4, r7, pc}
 801475e:	46c0      	nop			; (mov r8, r8)
 8014760:	20000d00 	.word	0x20000d00
 8014764:	08014981 	.word	0x08014981
 8014768:	08014839 	.word	0x08014839
 801476c:	200011ac 	.word	0x200011ac
 8014770:	40000076 	.word	0x40000076
 8014774:	40000077 	.word	0x40000077
 8014778:	50000078 	.word	0x50000078
 801477c:	10000074 	.word	0x10000074
 8014780:	10000075 	.word	0x10000075
 8014784:	50000071 	.word	0x50000071
 8014788:	20001190 	.word	0x20001190

0801478c <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 801478c:	b580      	push	{r7, lr}
 801478e:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 8014790:	2300      	movs	r3, #0
}
 8014792:	0018      	movs	r0, r3
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 8014798:	b5b0      	push	{r4, r5, r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	0002      	movs	r2, r0
 80147a0:	1dfb      	adds	r3, r7, #7
 80147a2:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 80147a4:	250f      	movs	r5, #15
 80147a6:	197c      	adds	r4, r7, r5
 80147a8:	f7ff fff0 	bl	801478c <itsdk_config_app_commitConfiguration>
 80147ac:	0003      	movs	r3, r0
 80147ae:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 80147b0:	197b      	adds	r3, r7, r5
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d003      	beq.n	80147c0 <itsdk_config_commitConfiguration+0x28>
 80147b8:	230f      	movs	r3, #15
 80147ba:	18fb      	adds	r3, r7, r3
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	e023      	b.n	8014808 <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 80147c0:	4b13      	ldr	r3, [pc, #76]	; (8014810 <itsdk_config_commitConfiguration+0x78>)
 80147c2:	4a14      	ldr	r2, [pc, #80]	; (8014814 <itsdk_config_commitConfiguration+0x7c>)
 80147c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80147c6:	c313      	stmia	r3!, {r0, r1, r4}
 80147c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80147ca:	c313      	stmia	r3!, {r0, r1, r4}
 80147cc:	6812      	ldr	r2, [r2, #0]
 80147ce:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 80147d0:	2100      	movs	r1, #0
 80147d2:	2072      	movs	r0, #114	; 0x72
 80147d4:	f002 fbd2 	bl	8016f7c <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80147d8:	1dfb      	adds	r3, r7, #7
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d003      	beq.n	80147e8 <itsdk_config_commitConfiguration+0x50>
 80147e0:	1dfb      	adds	r3, r7, #7
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b02      	cmp	r3, #2
 80147e6:	d105      	bne.n	80147f4 <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 80147e8:	4b09      	ldr	r3, [pc, #36]	; (8014810 <itsdk_config_commitConfiguration+0x78>)
 80147ea:	2201      	movs	r2, #1
 80147ec:	211c      	movs	r1, #28
 80147ee:	0018      	movs	r0, r3
 80147f0:	f7ff fd54 	bl	801429c <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80147f4:	1dfb      	adds	r3, r7, #7
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	2b02      	cmp	r3, #2
 80147fa:	d104      	bne.n	8014806 <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 80147fc:	20c8      	movs	r0, #200	; 0xc8
 80147fe:	f004 fcc5 	bl	801918c <itsdk_delayMs>
	 itsdk_reset();
 8014802:	f004 fc71 	bl	80190e8 <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 8014806:	2300      	movs	r3, #0
}
 8014808:	0018      	movs	r0, r3
 801480a:	46bd      	mov	sp, r7
 801480c:	b004      	add	sp, #16
 801480e:	bdb0      	pop	{r4, r5, r7, pc}
 8014810:	200011ac 	.word	0x200011ac
 8014814:	20001190 	.word	0x20001190

08014818 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8014820:	4b04      	ldr	r3, [pc, #16]	; (8014834 <itsdk_config_app_printConfig+0x1c>)
 8014822:	2100      	movs	r1, #0
 8014824:	0018      	movs	r0, r3
 8014826:	f002 fba9 	bl	8016f7c <itsdk_error_report>
			return;
 801482a:	46c0      	nop			; (mov r8, r8)
		}
 801482c:	46bd      	mov	sp, r7
 801482e:	b002      	add	sp, #8
 8014830:	bd80      	pop	{r7, pc}
 8014832:	46c0      	nop			; (mov r8, r8)
 8014834:	40000070 	.word	0x40000070

08014838 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	000a      	movs	r2, r1
 8014842:	1cfb      	adds	r3, r7, #3
 8014844:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8014846:	1cfb      	adds	r3, r7, #3
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	2b01      	cmp	r3, #1
 801484c:	d000      	beq.n	8014850 <_itsdk_config_consolePublic+0x18>
 801484e:	e074      	b.n	801493a <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	2b43      	cmp	r3, #67	; 0x43
 8014856:	d012      	beq.n	801487e <_itsdk_config_consolePublic+0x46>
 8014858:	2b63      	cmp	r3, #99	; 0x63
 801485a:	d010      	beq.n	801487e <_itsdk_config_consolePublic+0x46>
 801485c:	2b3f      	cmp	r3, #63	; 0x3f
 801485e:	d000      	beq.n	8014862 <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 8014860:	e06c      	b.n	801493c <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 8014862:	4b39      	ldr	r3, [pc, #228]	; (8014948 <_itsdk_config_consolePublic+0x110>)
 8014864:	0018      	movs	r0, r3
 8014866:	f7ff fb27 	bl	8013eb8 <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 801486a:	4b38      	ldr	r3, [pc, #224]	; (801494c <_itsdk_config_consolePublic+0x114>)
 801486c:	0018      	movs	r0, r3
 801486e:	f7ff fb23 	bl	8013eb8 <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 8014872:	4b37      	ldr	r3, [pc, #220]	; (8014950 <_itsdk_config_consolePublic+0x118>)
 8014874:	0018      	movs	r0, r3
 8014876:	f7ff fb1f 	bl	8013eb8 <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 801487a:	2300      	movs	r3, #0
 801487c:	e05f      	b.n	801493e <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 801487e:	4b35      	ldr	r3, [pc, #212]	; (8014954 <_itsdk_config_consolePublic+0x11c>)
 8014880:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	2b43      	cmp	r3, #67	; 0x43
 8014888:	d101      	bne.n	801488e <_itsdk_config_consolePublic+0x56>
 801488a:	4b33      	ldr	r3, [pc, #204]	; (8014958 <_itsdk_config_consolePublic+0x120>)
 801488c:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	001a      	movs	r2, r3
 8014894:	4b31      	ldr	r3, [pc, #196]	; (801495c <_itsdk_config_consolePublic+0x124>)
 8014896:	0011      	movs	r1, r2
 8014898:	0018      	movs	r0, r3
 801489a:	f7ff fb0d 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	88db      	ldrh	r3, [r3, #6]
 80148a2:	001a      	movs	r2, r3
 80148a4:	4b2e      	ldr	r3, [pc, #184]	; (8014960 <_itsdk_config_consolePublic+0x128>)
 80148a6:	0011      	movs	r1, r2
 80148a8:	0018      	movs	r0, r3
 80148aa:	f7ff fb05 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	891b      	ldrh	r3, [r3, #8]
 80148b2:	001a      	movs	r2, r3
 80148b4:	4b2b      	ldr	r3, [pc, #172]	; (8014964 <_itsdk_config_consolePublic+0x12c>)
 80148b6:	0011      	movs	r1, r2
 80148b8:	0018      	movs	r0, r3
 80148ba:	f7ff fafd 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	7a9b      	ldrb	r3, [r3, #10]
 80148c2:	061b      	lsls	r3, r3, #24
 80148c4:	0f9b      	lsrs	r3, r3, #30
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	001a      	movs	r2, r3
 80148ca:	4b27      	ldr	r3, [pc, #156]	; (8014968 <_itsdk_config_consolePublic+0x130>)
 80148cc:	0011      	movs	r1, r2
 80148ce:	0018      	movs	r0, r3
 80148d0:	f7ff faf2 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	7a9b      	ldrb	r3, [r3, #10]
 80148d8:	069b      	lsls	r3, r3, #26
 80148da:	0f9b      	lsrs	r3, r3, #30
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	001a      	movs	r2, r3
 80148e0:	4b22      	ldr	r3, [pc, #136]	; (801496c <_itsdk_config_consolePublic+0x134>)
 80148e2:	0011      	movs	r1, r2
 80148e4:	0018      	movs	r0, r3
 80148e6:	f7ff fae7 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	7a9b      	ldrb	r3, [r3, #10]
 80148ee:	079b      	lsls	r3, r3, #30
 80148f0:	0f9b      	lsrs	r3, r3, #30
 80148f2:	b2db      	uxtb	r3, r3
 80148f4:	001a      	movs	r2, r3
 80148f6:	4b1e      	ldr	r3, [pc, #120]	; (8014970 <_itsdk_config_consolePublic+0x138>)
 80148f8:	0011      	movs	r1, r2
 80148fa:	0018      	movs	r0, r3
 80148fc:	f7ff fadc 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	7a9b      	ldrb	r3, [r3, #10]
 8014904:	071b      	lsls	r3, r3, #28
 8014906:	0f9b      	lsrs	r3, r3, #30
 8014908:	b2db      	uxtb	r3, r3
 801490a:	001a      	movs	r2, r3
 801490c:	4b19      	ldr	r3, [pc, #100]	; (8014974 <_itsdk_config_consolePublic+0x13c>)
 801490e:	0011      	movs	r1, r2
 8014910:	0018      	movs	r0, r3
 8014912:	f7ff fad1 	bl	8013eb8 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	7adb      	ldrb	r3, [r3, #11]
 801491a:	001a      	movs	r2, r3
 801491c:	4b16      	ldr	r3, [pc, #88]	; (8014978 <_itsdk_config_consolePublic+0x140>)
 801491e:	0011      	movs	r1, r2
 8014920:	0018      	movs	r0, r3
 8014922:	f7ff fac9 	bl	8013eb8 <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	0018      	movs	r0, r3
 801492a:	f7ff ff75 	bl	8014818 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 801492e:	4b13      	ldr	r3, [pc, #76]	; (801497c <_itsdk_config_consolePublic+0x144>)
 8014930:	0018      	movs	r0, r3
 8014932:	f7ff fac1 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8014936:	2300      	movs	r3, #0
 8014938:	e001      	b.n	801493e <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 801493a:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 801493c:	2301      	movs	r3, #1
	}
 801493e:	0018      	movs	r0, r3
 8014940:	46bd      	mov	sp, r7
 8014942:	b004      	add	sp, #16
 8014944:	bd80      	pop	{r7, pc}
 8014946:	46c0      	nop			; (mov r8, r8)
 8014948:	0801af2c 	.word	0x0801af2c
 801494c:	0801af3c 	.word	0x0801af3c
 8014950:	0801af58 	.word	0x0801af58
 8014954:	200011ac 	.word	0x200011ac
 8014958:	20001190 	.word	0x20001190
 801495c:	0801af7c 	.word	0x0801af7c
 8014960:	0801af94 	.word	0x0801af94
 8014964:	0801afb0 	.word	0x0801afb0
 8014968:	0801afcc 	.word	0x0801afcc
 801496c:	0801afe4 	.word	0x0801afe4
 8014970:	0801b000 	.word	0x0801b000
 8014974:	0801b01c 	.word	0x0801b01c
 8014978:	0801b038 	.word	0x0801b038
 801497c:	0801b050 	.word	0x0801b050

08014980 <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 8014980:	b5b0      	push	{r4, r5, r7, lr}
 8014982:	b088      	sub	sp, #32
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	000a      	movs	r2, r1
 801498a:	1cfb      	adds	r3, r7, #3
 801498c:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 801498e:	1cfb      	adds	r3, r7, #3
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	2b01      	cmp	r3, #1
 8014994:	d000      	beq.n	8014998 <_itsdk_config_consolePriv+0x18>
 8014996:	e098      	b.n	8014aca <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	2b46      	cmp	r3, #70	; 0x46
 801499e:	d03b      	beq.n	8014a18 <_itsdk_config_consolePriv+0x98>
 80149a0:	dc02      	bgt.n	80149a8 <_itsdk_config_consolePriv+0x28>
 80149a2:	2b3f      	cmp	r3, #63	; 0x3f
 80149a4:	d005      	beq.n	80149b2 <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 80149a6:	e21c      	b.n	8014de2 <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 80149a8:	2b53      	cmp	r3, #83	; 0x53
 80149aa:	d02c      	beq.n	8014a06 <_itsdk_config_consolePriv+0x86>
 80149ac:	2b6d      	cmp	r3, #109	; 0x6d
 80149ae:	d040      	beq.n	8014a32 <_itsdk_config_consolePriv+0xb2>
			break;
 80149b0:	e217      	b.n	8014de2 <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 80149b2:	4bd9      	ldr	r3, [pc, #868]	; (8014d18 <_itsdk_config_consolePriv+0x398>)
 80149b4:	0018      	movs	r0, r3
 80149b6:	f7ff fa7f 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 80149ba:	4bd8      	ldr	r3, [pc, #864]	; (8014d1c <_itsdk_config_consolePriv+0x39c>)
 80149bc:	0018      	movs	r0, r3
 80149be:	f7ff fa7b 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 80149c2:	4bd7      	ldr	r3, [pc, #860]	; (8014d20 <_itsdk_config_consolePriv+0x3a0>)
 80149c4:	0018      	movs	r0, r3
 80149c6:	f7ff fa77 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 80149ca:	4bd6      	ldr	r3, [pc, #856]	; (8014d24 <_itsdk_config_consolePriv+0x3a4>)
 80149cc:	0018      	movs	r0, r3
 80149ce:	f7ff fa73 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 80149d2:	4bd5      	ldr	r3, [pc, #852]	; (8014d28 <_itsdk_config_consolePriv+0x3a8>)
 80149d4:	0018      	movs	r0, r3
 80149d6:	f7ff fa6f 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 80149da:	4bd4      	ldr	r3, [pc, #848]	; (8014d2c <_itsdk_config_consolePriv+0x3ac>)
 80149dc:	0018      	movs	r0, r3
 80149de:	f7ff fa6b 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 80149e2:	4bd3      	ldr	r3, [pc, #844]	; (8014d30 <_itsdk_config_consolePriv+0x3b0>)
 80149e4:	0018      	movs	r0, r3
 80149e6:	f7ff fa67 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 80149ea:	4bd2      	ldr	r3, [pc, #840]	; (8014d34 <_itsdk_config_consolePriv+0x3b4>)
 80149ec:	0018      	movs	r0, r3
 80149ee:	f7ff fa63 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 80149f2:	4bd1      	ldr	r3, [pc, #836]	; (8014d38 <_itsdk_config_consolePriv+0x3b8>)
 80149f4:	0018      	movs	r0, r3
 80149f6:	f7ff fa5f 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 80149fa:	4bd0      	ldr	r3, [pc, #832]	; (8014d3c <_itsdk_config_consolePriv+0x3bc>)
 80149fc:	0018      	movs	r0, r3
 80149fe:	f7ff fa5b 	bl	8013eb8 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8014a02:	2300      	movs	r3, #0
 8014a04:	e1ee      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 8014a06:	2001      	movs	r0, #1
 8014a08:	f7ff fec6 	bl	8014798 <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 8014a0c:	4bcc      	ldr	r3, [pc, #816]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014a0e:	0018      	movs	r0, r3
 8014a10:	f7ff fa52 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8014a14:	2300      	movs	r3, #0
 8014a16:	e1e5      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8014a18:	4bca      	ldr	r3, [pc, #808]	; (8014d44 <_itsdk_config_consolePriv+0x3c4>)
 8014a1a:	2103      	movs	r1, #3
 8014a1c:	0018      	movs	r0, r3
 8014a1e:	f002 faad 	bl	8016f7c <itsdk_error_report>
			  itsdk_config_resetToFactory();
 8014a22:	f7ff fdb1 	bl	8014588 <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 8014a26:	4bc6      	ldr	r3, [pc, #792]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014a28:	0018      	movs	r0, r3
 8014a2a:	f7ff fa45 	bl	8013eb8 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e1d8      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 8014a32:	2300      	movs	r3, #0
 8014a34:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 8014a3e:	240c      	movs	r4, #12
 8014a40:	193b      	adds	r3, r7, r4
 8014a42:	0018      	movs	r0, r3
 8014a44:	f000 fad7 	bl	8014ff6 <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	18d2      	adds	r2, r2, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	6979      	ldr	r1, [r7, #20]
 8014a52:	48bd      	ldr	r0, [pc, #756]	; (8014d48 <_itsdk_config_consolePriv+0x3c8>)
 8014a54:	f7ff fa30 	bl	8013eb8 <_itsdk_console_printf>
			  	offset += size;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	697a      	ldr	r2, [r7, #20]
 8014a5c:	18d3      	adds	r3, r2, r3
 8014a5e:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	693a      	ldr	r2, [r7, #16]
 8014a64:	18d3      	adds	r3, r2, r3
 8014a66:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 8014a68:	193b      	adds	r3, r7, r4
 8014a6a:	0018      	movs	r0, r3
 8014a6c:	f002 fbab 	bl	80171c6 <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8014a70:	68fa      	ldr	r2, [r7, #12]
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	18d2      	adds	r2, r2, r3
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	6979      	ldr	r1, [r7, #20]
 8014a7a:	48b4      	ldr	r0, [pc, #720]	; (8014d4c <_itsdk_config_consolePriv+0x3cc>)
 8014a7c:	f7ff fa1c 	bl	8013eb8 <_itsdk_console_printf>
			  	offset += size;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	697a      	ldr	r2, [r7, #20]
 8014a84:	18d3      	adds	r3, r2, r3
 8014a86:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	693a      	ldr	r2, [r7, #16]
 8014a8c:	18d3      	adds	r3, r2, r3
 8014a8e:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 8014a90:	193b      	adds	r3, r7, r4
 8014a92:	0018      	movs	r0, r3
 8014a94:	f7ff fcdd 	bl	8014452 <eeprom_getConfigSize>
  		  	  totSize += size;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	693a      	ldr	r2, [r7, #16]
 8014a9c:	18d3      	adds	r3, r2, r3
 8014a9e:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8014aa0:	68fa      	ldr	r2, [r7, #12]
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	18d2      	adds	r2, r2, r3
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	6979      	ldr	r1, [r7, #20]
 8014aaa:	48a9      	ldr	r0, [pc, #676]	; (8014d50 <_itsdk_config_consolePriv+0x3d0>)
 8014aac:	f7ff fa04 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 8014ab0:	23c0      	movs	r3, #192	; 0xc0
 8014ab2:	015a      	lsls	r2, r3, #5
 8014ab4:	6939      	ldr	r1, [r7, #16]
 8014ab6:	4ba7      	ldr	r3, [pc, #668]	; (8014d54 <_itsdk_config_consolePriv+0x3d4>)
 8014ab8:	0018      	movs	r0, r3
 8014aba:	f7ff f9fd 	bl	8013eb8 <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 8014abe:	4ba0      	ldr	r3, [pc, #640]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014ac0:	0018      	movs	r0, r3
 8014ac2:	f7ff f9f9 	bl	8013eb8 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	e18c      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 8014aca:	1cfb      	adds	r3, r7, #3
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	2b04      	cmp	r3, #4
 8014ad0:	d116      	bne.n	8014b00 <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	2b73      	cmp	r3, #115	; 0x73
 8014ad8:	d000      	beq.n	8014adc <_itsdk_config_consolePriv+0x15c>
 8014ada:	e182      	b.n	8014de2 <_itsdk_config_consolePriv+0x462>
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	2b63      	cmp	r3, #99	; 0x63
 8014ae4:	d000      	beq.n	8014ae8 <_itsdk_config_consolePriv+0x168>
 8014ae6:	e17c      	b.n	8014de2 <_itsdk_config_consolePriv+0x462>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	3302      	adds	r3, #2
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	2b3a      	cmp	r3, #58	; 0x3a
 8014af0:	d000      	beq.n	8014af4 <_itsdk_config_consolePriv+0x174>
 8014af2:	e176      	b.n	8014de2 <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 8014af4:	4b98      	ldr	r3, [pc, #608]	; (8014d58 <_itsdk_config_consolePriv+0x3d8>)
 8014af6:	0018      	movs	r0, r3
 8014af8:	f7ff f9de 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8014afc:	2302      	movs	r3, #2
 8014afe:	e171      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 8014b00:	1cfb      	adds	r3, r7, #3
 8014b02:	781b      	ldrb	r3, [r3, #0]
 8014b04:	2b05      	cmp	r3, #5
 8014b06:	d800      	bhi.n	8014b0a <_itsdk_config_consolePriv+0x18a>
 8014b08:	e168      	b.n	8014ddc <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	2b53      	cmp	r3, #83	; 0x53
 8014b10:	d000      	beq.n	8014b14 <_itsdk_config_consolePriv+0x194>
 8014b12:	e163      	b.n	8014ddc <_itsdk_config_consolePriv+0x45c>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	3301      	adds	r3, #1
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	2b43      	cmp	r3, #67	; 0x43
 8014b1c:	d000      	beq.n	8014b20 <_itsdk_config_consolePriv+0x1a0>
 8014b1e:	e15d      	b.n	8014ddc <_itsdk_config_consolePriv+0x45c>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	3302      	adds	r3, #2
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	2b3a      	cmp	r3, #58	; 0x3a
 8014b28:	d000      	beq.n	8014b2c <_itsdk_config_consolePriv+0x1ac>
 8014b2a:	e157      	b.n	8014ddc <_itsdk_config_consolePriv+0x45c>
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3304      	adds	r3, #4
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	2b3a      	cmp	r3, #58	; 0x3a
 8014b34:	d000      	beq.n	8014b38 <_itsdk_config_consolePriv+0x1b8>
 8014b36:	e151      	b.n	8014ddc <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	3303      	adds	r3, #3
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	3b30      	subs	r3, #48	; 0x30
 8014b40:	2b22      	cmp	r3, #34	; 0x22
 8014b42:	d900      	bls.n	8014b46 <_itsdk_config_consolePriv+0x1c6>
 8014b44:	e14c      	b.n	8014de0 <_itsdk_config_consolePriv+0x460>
 8014b46:	009a      	lsls	r2, r3, #2
 8014b48:	4b84      	ldr	r3, [pc, #528]	; (8014d5c <_itsdk_config_consolePriv+0x3dc>)
 8014b4a:	18d3      	adds	r3, r2, r3
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3305      	adds	r3, #5
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	2b31      	cmp	r3, #49	; 0x31
 8014b58:	d007      	beq.n	8014b6a <_itsdk_config_consolePriv+0x1ea>
 8014b5a:	2b32      	cmp	r3, #50	; 0x32
 8014b5c:	d009      	beq.n	8014b72 <_itsdk_config_consolePriv+0x1f2>
 8014b5e:	2b30      	cmp	r3, #48	; 0x30
 8014b60:	d10b      	bne.n	8014b7a <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 8014b62:	4b7f      	ldr	r3, [pc, #508]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014b64:	2200      	movs	r2, #0
 8014b66:	80da      	strh	r2, [r3, #6]
					   break;
 8014b68:	e00d      	b.n	8014b86 <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 8014b6a:	4b7d      	ldr	r3, [pc, #500]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	80da      	strh	r2, [r3, #6]
					   break;
 8014b70:	e009      	b.n	8014b86 <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 8014b72:	4b7b      	ldr	r3, [pc, #492]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014b74:	2202      	movs	r2, #2
 8014b76:	80da      	strh	r2, [r3, #6]
					   break;
 8014b78:	e005      	b.n	8014b86 <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 8014b7a:	4b77      	ldr	r3, [pc, #476]	; (8014d58 <_itsdk_config_consolePriv+0x3d8>)
 8014b7c:	0018      	movs	r0, r3
 8014b7e:	f7ff f99b 	bl	8013eb8 <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 8014b82:	2302      	movs	r3, #2
 8014b84:	e12e      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 8014b86:	4b6e      	ldr	r3, [pc, #440]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014b88:	0018      	movs	r0, r3
 8014b8a:	f7ff f995 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	e128      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	3305      	adds	r3, #5
 8014b96:	2200      	movs	r2, #0
 8014b98:	2104      	movs	r1, #4
 8014b9a:	0018      	movs	r0, r3
 8014b9c:	f002 ffaf 	bl	8017afe <itdt_isHexString>
 8014ba0:	1e03      	subs	r3, r0, #0
 8014ba2:	d01b      	beq.n	8014bdc <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	3305      	adds	r3, #5
 8014ba8:	251e      	movs	r5, #30
 8014baa:	197c      	adds	r4, r7, r5
 8014bac:	0018      	movs	r0, r3
 8014bae:	f002 fefa 	bl	80179a6 <itdt_convertHexChar4Int>
 8014bb2:	0003      	movs	r3, r0
 8014bb4:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 8014bb6:	197b      	adds	r3, r7, r5
 8014bb8:	881b      	ldrh	r3, [r3, #0]
 8014bba:	0018      	movs	r0, r3
 8014bbc:	f002 ffeb 	bl	8017b96 <itdt_count_bits_1>
 8014bc0:	0003      	movs	r3, r0
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	d80a      	bhi.n	8014bdc <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 8014bc6:	4b66      	ldr	r3, [pc, #408]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014bc8:	221e      	movs	r2, #30
 8014bca:	18ba      	adds	r2, r7, r2
 8014bcc:	8812      	ldrh	r2, [r2, #0]
 8014bce:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 8014bd0:	4b5b      	ldr	r3, [pc, #364]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014bd2:	0018      	movs	r0, r3
 8014bd4:	f7ff f970 	bl	8013eb8 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	e103      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8014bdc:	4b5e      	ldr	r3, [pc, #376]	; (8014d58 <_itsdk_config_consolePriv+0x3d8>)
 8014bde:	0018      	movs	r0, r3
 8014be0:	f7ff f96a 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8014be4:	2302      	movs	r3, #2
 8014be6:	e0fd      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	3305      	adds	r3, #5
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	2b31      	cmp	r3, #49	; 0x31
 8014bf0:	d10d      	bne.n	8014c0e <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 8014bf2:	4b5b      	ldr	r3, [pc, #364]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014bf4:	7a9a      	ldrb	r2, [r3, #10]
 8014bf6:	213f      	movs	r1, #63	; 0x3f
 8014bf8:	400a      	ands	r2, r1
 8014bfa:	1c11      	adds	r1, r2, #0
 8014bfc:	2240      	movs	r2, #64	; 0x40
 8014bfe:	430a      	orrs	r2, r1
 8014c00:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014c02:	4b4f      	ldr	r3, [pc, #316]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014c04:	0018      	movs	r0, r3
 8014c06:	f7ff f957 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	e0ea      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	3305      	adds	r3, #5
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	2b32      	cmp	r3, #50	; 0x32
 8014c16:	d10e      	bne.n	8014c36 <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8014c18:	4b51      	ldr	r3, [pc, #324]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014c1a:	7a9a      	ldrb	r2, [r3, #10]
 8014c1c:	213f      	movs	r1, #63	; 0x3f
 8014c1e:	400a      	ands	r2, r1
 8014c20:	1c11      	adds	r1, r2, #0
 8014c22:	2280      	movs	r2, #128	; 0x80
 8014c24:	4252      	negs	r2, r2
 8014c26:	430a      	orrs	r2, r1
 8014c28:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014c2a:	4b45      	ldr	r3, [pc, #276]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014c2c:	0018      	movs	r0, r3
 8014c2e:	f7ff f943 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014c32:	2300      	movs	r3, #0
 8014c34:	e0d6      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8014c36:	4b48      	ldr	r3, [pc, #288]	; (8014d58 <_itsdk_config_consolePriv+0x3d8>)
 8014c38:	0018      	movs	r0, r3
 8014c3a:	f7ff f93d 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8014c3e:	2302      	movs	r3, #2
 8014c40:	e0d0      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	3305      	adds	r3, #5
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	2b31      	cmp	r3, #49	; 0x31
 8014c4a:	d10d      	bne.n	8014c68 <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 8014c4c:	4b44      	ldr	r3, [pc, #272]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014c4e:	7a9a      	ldrb	r2, [r3, #10]
 8014c50:	2130      	movs	r1, #48	; 0x30
 8014c52:	438a      	bics	r2, r1
 8014c54:	1c11      	adds	r1, r2, #0
 8014c56:	2210      	movs	r2, #16
 8014c58:	430a      	orrs	r2, r1
 8014c5a:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014c5c:	4b38      	ldr	r3, [pc, #224]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014c5e:	0018      	movs	r0, r3
 8014c60:	f7ff f92a 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014c64:	2300      	movs	r3, #0
 8014c66:	e0bd      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	3305      	adds	r3, #5
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	2b32      	cmp	r3, #50	; 0x32
 8014c70:	d10d      	bne.n	8014c8e <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 8014c72:	4b3b      	ldr	r3, [pc, #236]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014c74:	7a9a      	ldrb	r2, [r3, #10]
 8014c76:	2130      	movs	r1, #48	; 0x30
 8014c78:	438a      	bics	r2, r1
 8014c7a:	1c11      	adds	r1, r2, #0
 8014c7c:	2220      	movs	r2, #32
 8014c7e:	430a      	orrs	r2, r1
 8014c80:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014c82:	4b2f      	ldr	r3, [pc, #188]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014c84:	0018      	movs	r0, r3
 8014c86:	f7ff f917 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	e0aa      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8014c8e:	4b32      	ldr	r3, [pc, #200]	; (8014d58 <_itsdk_config_consolePriv+0x3d8>)
 8014c90:	0018      	movs	r0, r3
 8014c92:	f7ff f911 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8014c96:	2302      	movs	r3, #2
 8014c98:	e0a4      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	3305      	adds	r3, #5
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	2b31      	cmp	r3, #49	; 0x31
 8014ca2:	d10d      	bne.n	8014cc0 <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 8014ca4:	4b2e      	ldr	r3, [pc, #184]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014ca6:	7a9a      	ldrb	r2, [r3, #10]
 8014ca8:	2103      	movs	r1, #3
 8014caa:	438a      	bics	r2, r1
 8014cac:	1c11      	adds	r1, r2, #0
 8014cae:	2201      	movs	r2, #1
 8014cb0:	430a      	orrs	r2, r1
 8014cb2:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014cb4:	4b22      	ldr	r3, [pc, #136]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014cb6:	0018      	movs	r0, r3
 8014cb8:	f7ff f8fe 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	e091      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	3305      	adds	r3, #5
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	2b32      	cmp	r3, #50	; 0x32
 8014cc8:	d10d      	bne.n	8014ce6 <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 8014cca:	4b25      	ldr	r3, [pc, #148]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014ccc:	7a9a      	ldrb	r2, [r3, #10]
 8014cce:	2103      	movs	r1, #3
 8014cd0:	438a      	bics	r2, r1
 8014cd2:	1c11      	adds	r1, r2, #0
 8014cd4:	2202      	movs	r2, #2
 8014cd6:	430a      	orrs	r2, r1
 8014cd8:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014cda:	4b19      	ldr	r3, [pc, #100]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014cdc:	0018      	movs	r0, r3
 8014cde:	f7ff f8eb 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	e07e      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8014ce6:	4b1c      	ldr	r3, [pc, #112]	; (8014d58 <_itsdk_config_consolePriv+0x3d8>)
 8014ce8:	0018      	movs	r0, r3
 8014cea:	f7ff f8e5 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8014cee:	2302      	movs	r3, #2
 8014cf0:	e078      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	3305      	adds	r3, #5
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	2b31      	cmp	r3, #49	; 0x31
 8014cfa:	d133      	bne.n	8014d64 <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 8014cfc:	4b18      	ldr	r3, [pc, #96]	; (8014d60 <_itsdk_config_consolePriv+0x3e0>)
 8014cfe:	7a9a      	ldrb	r2, [r3, #10]
 8014d00:	210c      	movs	r1, #12
 8014d02:	438a      	bics	r2, r1
 8014d04:	1c11      	adds	r1, r2, #0
 8014d06:	2204      	movs	r2, #4
 8014d08:	430a      	orrs	r2, r1
 8014d0a:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014d0c:	4b0c      	ldr	r3, [pc, #48]	; (8014d40 <_itsdk_config_consolePriv+0x3c0>)
 8014d0e:	0018      	movs	r0, r3
 8014d10:	f7ff f8d2 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014d14:	2300      	movs	r3, #0
 8014d16:	e065      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
 8014d18:	0801b058 	.word	0x0801b058
 8014d1c:	0801b07c 	.word	0x0801b07c
 8014d20:	0801b0ac 	.word	0x0801b0ac
 8014d24:	0801b0d4 	.word	0x0801b0d4
 8014d28:	0801b104 	.word	0x0801b104
 8014d2c:	0801b138 	.word	0x0801b138
 8014d30:	0801b160 	.word	0x0801b160
 8014d34:	0801b194 	.word	0x0801b194
 8014d38:	0801b1c0 	.word	0x0801b1c0
 8014d3c:	0801b1f4 	.word	0x0801b1f4
 8014d40:	0801b050 	.word	0x0801b050
 8014d44:	50000071 	.word	0x50000071
 8014d48:	0801b218 	.word	0x0801b218
 8014d4c:	0801b23c 	.word	0x0801b23c
 8014d50:	0801b260 	.word	0x0801b260
 8014d54:	0801b28c 	.word	0x0801b28c
 8014d58:	0801b2a8 	.word	0x0801b2a8
 8014d5c:	0801bf00 	.word	0x0801bf00
 8014d60:	20001190 	.word	0x20001190
				}
			    if ( buffer[5] == '2' ) {
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3305      	adds	r3, #5
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	2b32      	cmp	r3, #50	; 0x32
 8014d6c:	d10d      	bne.n	8014d8a <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 8014d6e:	4b1f      	ldr	r3, [pc, #124]	; (8014dec <_itsdk_config_consolePriv+0x46c>)
 8014d70:	7a9a      	ldrb	r2, [r3, #10]
 8014d72:	210c      	movs	r1, #12
 8014d74:	438a      	bics	r2, r1
 8014d76:	1c11      	adds	r1, r2, #0
 8014d78:	2208      	movs	r2, #8
 8014d7a:	430a      	orrs	r2, r1
 8014d7c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8014d7e:	4b1c      	ldr	r3, [pc, #112]	; (8014df0 <_itsdk_config_consolePriv+0x470>)
 8014d80:	0018      	movs	r0, r3
 8014d82:	f7ff f899 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8014d86:	2300      	movs	r3, #0
 8014d88:	e02c      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8014d8a:	4b1a      	ldr	r3, [pc, #104]	; (8014df4 <_itsdk_config_consolePriv+0x474>)
 8014d8c:	0018      	movs	r0, r3
 8014d8e:	f7ff f893 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8014d92:	2302      	movs	r3, #2
 8014d94:	e026      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 8014d96:	1cfb      	adds	r3, r7, #3
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	2b06      	cmp	r3, #6
 8014d9c:	d918      	bls.n	8014dd0 <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	3305      	adds	r3, #5
 8014da2:	2102      	movs	r1, #2
 8014da4:	0018      	movs	r0, r3
 8014da6:	f002 fe23 	bl	80179f0 <itdt_convertDecCharNInt>
 8014daa:	0003      	movs	r3, r0
 8014dac:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 8014dae:	69bb      	ldr	r3, [r7, #24]
 8014db0:	4a11      	ldr	r2, [pc, #68]	; (8014df8 <_itsdk_config_consolePriv+0x478>)
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d00c      	beq.n	8014dd0 <_itsdk_config_consolePriv+0x450>
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	2b05      	cmp	r3, #5
 8014dba:	dc09      	bgt.n	8014dd0 <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	b2da      	uxtb	r2, r3
 8014dc0:	4b0a      	ldr	r3, [pc, #40]	; (8014dec <_itsdk_config_consolePriv+0x46c>)
 8014dc2:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 8014dc4:	4b0a      	ldr	r3, [pc, #40]	; (8014df0 <_itsdk_config_consolePriv+0x470>)
 8014dc6:	0018      	movs	r0, r3
 8014dc8:	f7ff f876 	bl	8013eb8 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	e009      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8014dd0:	4b08      	ldr	r3, [pc, #32]	; (8014df4 <_itsdk_config_consolePriv+0x474>)
 8014dd2:	0018      	movs	r0, r3
 8014dd4:	f7ff f870 	bl	8013eb8 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8014dd8:	2302      	movs	r3, #2
 8014dda:	e003      	b.n	8014de4 <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 8014ddc:	46c0      	nop			; (mov r8, r8)
 8014dde:	e000      	b.n	8014de2 <_itsdk_config_consolePriv+0x462>
				break;
 8014de0:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 8014de2:	2301      	movs	r3, #1
}
 8014de4:	0018      	movs	r0, r3
 8014de6:	46bd      	mov	sp, r7
 8014de8:	b008      	add	sp, #32
 8014dea:	bdb0      	pop	{r4, r5, r7, pc}
 8014dec:	20001190 	.word	0x20001190
 8014df0:	0801b050 	.word	0x0801b050
 8014df4:	0801b2a8 	.word	0x0801b2a8
 8014df8:	0fffffff 	.word	0x0fffffff

08014dfc <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 8014dfc:	b5b0      	push	{r4, r5, r7, lr}
 8014dfe:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 8014e00:	4a09      	ldr	r2, [pc, #36]	; (8014e28 <itsdk_state_init+0x2c>)
 8014e02:	2300      	movs	r3, #0
 8014e04:	2400      	movs	r4, #0
 8014e06:	6093      	str	r3, [r2, #8]
 8014e08:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 8014e0a:	f004 f973 	bl	80190f4 <itsdk_getResetCause>
 8014e0e:	0003      	movs	r3, r0
 8014e10:	001a      	movs	r2, r3
 8014e12:	4b05      	ldr	r3, [pc, #20]	; (8014e28 <itsdk_state_init+0x2c>)
 8014e14:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 8014e16:	4b05      	ldr	r3, [pc, #20]	; (8014e2c <itsdk_state_init+0x30>)
 8014e18:	88db      	ldrh	r3, [r3, #6]
 8014e1a:	b2da      	uxtb	r2, r3
 8014e1c:	4b02      	ldr	r3, [pc, #8]	; (8014e28 <itsdk_state_init+0x2c>)
 8014e1e:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8014e20:	46c0      	nop			; (mov r8, r8)
}
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bdb0      	pop	{r4, r5, r7, pc}
 8014e26:	46c0      	nop			; (mov r8, r8)
 8014e28:	200011c8 	.word	0x200011c8
 8014e2c:	200011ac 	.word	0x200011ac

08014e30 <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8014e30:	b5b0      	push	{r4, r5, r7, lr}
 8014e32:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 8014e34:	4b19      	ldr	r3, [pc, #100]	; (8014e9c <itsdk_print_state+0x6c>)
 8014e36:	6898      	ldr	r0, [r3, #8]
 8014e38:	68d9      	ldr	r1, [r3, #12]
 8014e3a:	22fa      	movs	r2, #250	; 0xfa
 8014e3c:	0092      	lsls	r2, r2, #2
 8014e3e:	2300      	movs	r3, #0
 8014e40:	f7eb fb42 	bl	80004c8 <__aeabi_uldivmod>
 8014e44:	0003      	movs	r3, r0
 8014e46:	000c      	movs	r4, r1
 8014e48:	001a      	movs	r2, r3
 8014e4a:	4b15      	ldr	r3, [pc, #84]	; (8014ea0 <itsdk_print_state+0x70>)
 8014e4c:	0011      	movs	r1, r2
 8014e4e:	0018      	movs	r0, r3
 8014e50:	f7ff f832 	bl	8013eb8 <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 8014e54:	4b11      	ldr	r3, [pc, #68]	; (8014e9c <itsdk_print_state+0x6c>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	001a      	movs	r2, r3
 8014e5a:	4b12      	ldr	r3, [pc, #72]	; (8014ea4 <itsdk_print_state+0x74>)
 8014e5c:	0011      	movs	r1, r2
 8014e5e:	0018      	movs	r0, r3
 8014e60:	f7ff f82a 	bl	8013eb8 <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 8014e64:	4b0d      	ldr	r3, [pc, #52]	; (8014e9c <itsdk_print_state+0x6c>)
 8014e66:	785b      	ldrb	r3, [r3, #1]
 8014e68:	001a      	movs	r2, r3
 8014e6a:	4b0f      	ldr	r3, [pc, #60]	; (8014ea8 <itsdk_print_state+0x78>)
 8014e6c:	0011      	movs	r1, r2
 8014e6e:	0018      	movs	r0, r3
 8014e70:	f7ff f822 	bl	8013eb8 <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 8014e74:	4b09      	ldr	r3, [pc, #36]	; (8014e9c <itsdk_print_state+0x6c>)
 8014e76:	785b      	ldrb	r3, [r3, #1]
 8014e78:	2b02      	cmp	r3, #2
 8014e7a:	d10b      	bne.n	8014e94 <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 8014e7c:	f002 fbdc 	bl	8017638 <itsdk_lorawan_hasjoined>
 8014e80:	1e03      	subs	r3, r0, #0
 8014e82:	d001      	beq.n	8014e88 <itsdk_print_state+0x58>
 8014e84:	2359      	movs	r3, #89	; 0x59
 8014e86:	e000      	b.n	8014e8a <itsdk_print_state+0x5a>
 8014e88:	234e      	movs	r3, #78	; 0x4e
 8014e8a:	4a08      	ldr	r2, [pc, #32]	; (8014eac <itsdk_print_state+0x7c>)
 8014e8c:	0019      	movs	r1, r3
 8014e8e:	0010      	movs	r0, r2
 8014e90:	f7ff f812 	bl	8013eb8 <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 8014e94:	46c0      	nop			; (mov r8, r8)
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bdb0      	pop	{r4, r5, r7, pc}
 8014e9a:	46c0      	nop			; (mov r8, r8)
 8014e9c:	200011c8 	.word	0x200011c8
 8014ea0:	0801b2b0 	.word	0x0801b2b0
 8014ea4:	0801b2d0 	.word	0x0801b2d0
 8014ea8:	0801b2f0 	.word	0x0801b2f0
 8014eac:	0801b30c 	.word	0x0801b30c

08014eb0 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	1dfb      	adds	r3, r7, #7
 8014ebc:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 8014ec2:	1dfb      	adds	r3, r7, #7
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	2b13      	cmp	r3, #19
 8014ec8:	d83d      	bhi.n	8014f46 <_itsdk_secstore_getOffset+0x96>
 8014eca:	009a      	lsls	r2, r3, #2
 8014ecc:	4b27      	ldr	r3, [pc, #156]	; (8014f6c <_itsdk_secstore_getOffset+0xbc>)
 8014ece:	18d3      	adds	r3, r2, r3
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	617b      	str	r3, [r7, #20]
		break;
 8014ed8:	e037      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8014eda:	2301      	movs	r3, #1
 8014edc:	e041      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	3310      	adds	r3, #16
 8014ee2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014ee4:	e031      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	3320      	adds	r3, #32
 8014eea:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014eec:	e02d      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	3330      	adds	r3, #48	; 0x30
 8014ef2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014ef4:	e029      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	3340      	adds	r3, #64	; 0x40
 8014efa:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014efc:	e025      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	3350      	adds	r3, #80	; 0x50
 8014f02:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014f04:	e021      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	3310      	adds	r3, #16
 8014f0a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014f0c:	e01d      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	3320      	adds	r3, #32
 8014f12:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014f14:	e019      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	3330      	adds	r3, #48	; 0x30
 8014f1a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8014f1c:	e015      	b.n	8014f4a <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	e01f      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f22:	2301      	movs	r3, #1
 8014f24:	e01d      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f26:	2301      	movs	r3, #1
 8014f28:	e01b      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e019      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f2e:	2301      	movs	r3, #1
 8014f30:	e017      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f32:	2301      	movs	r3, #1
 8014f34:	e015      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f36:	2301      	movs	r3, #1
 8014f38:	e013      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e011      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	e00f      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8014f42:	2301      	movs	r3, #1
 8014f44:	e00d      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 8014f46:	2301      	movs	r3, #1
 8014f48:	e00b      	b.n	8014f62 <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	091b      	lsrs	r3, r3, #4
 8014f4e:	b2da      	uxtb	r2, r3
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	3310      	adds	r3, #16
 8014f58:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	697a      	ldr	r2, [r7, #20]
 8014f5e:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8014f60:	2300      	movs	r3, #0
}
 8014f62:	0018      	movs	r0, r3
 8014f64:	46bd      	mov	sp, r7
 8014f66:	b006      	add	sp, #24
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	46c0      	nop			; (mov r8, r8)
 8014f6c:	0801bf8c 	.word	0x0801bf8c

08014f70 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8014f78:	210f      	movs	r1, #15
 8014f7a:	187b      	adds	r3, r7, r1
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8014f80:	187b      	adds	r3, r7, r1
 8014f82:	187a      	adds	r2, r7, r1
 8014f84:	7812      	ldrb	r2, [r2, #0]
 8014f86:	3205      	adds	r2, #5
 8014f88:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8014f8a:	187b      	adds	r3, r7, r1
 8014f8c:	187a      	adds	r2, r7, r1
 8014f8e:	7812      	ldrb	r2, [r2, #0]
 8014f90:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	187a      	adds	r2, r7, r1
 8014f96:	7812      	ldrb	r2, [r2, #0]
 8014f98:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8014f9a:	2300      	movs	r3, #0
}
 8014f9c:	0018      	movs	r0, r3
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	b004      	add	sp, #16
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 8014fa4:	b590      	push	{r4, r7, lr}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	2310      	movs	r3, #16
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	2000      	movs	r0, #0
 8014fb4:	f004 fab4 	bl	8019520 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	220f      	movs	r2, #15
 8014fbe:	4013      	ands	r3, r2
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	2b0c      	cmp	r3, #12
 8014fc4:	d001      	beq.n	8014fca <_itsdk_secstore_controlHeader+0x26>
 8014fc6:	2302      	movs	r3, #2
 8014fc8:	e011      	b.n	8014fee <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8014fca:	240f      	movs	r4, #15
 8014fcc:	193b      	adds	r3, r7, r4
 8014fce:	0018      	movs	r0, r3
 8014fd0:	f7ff ffce 	bl	8014f70 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	061b      	lsls	r3, r3, #24
 8014fda:	0f1b      	lsrs	r3, r3, #28
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	001a      	movs	r2, r3
 8014fe0:	193b      	adds	r3, r7, r4
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d001      	beq.n	8014fec <_itsdk_secstore_controlHeader+0x48>
 8014fe8:	2302      	movs	r3, #2
 8014fea:	e000      	b.n	8014fee <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8014fec:	2300      	movs	r3, #0
}
 8014fee:	0018      	movs	r0, r3
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	b005      	add	sp, #20
 8014ff4:	bd90      	pop	{r4, r7, pc}

08014ff6 <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b082      	sub	sp, #8
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2270      	movs	r2, #112	; 0x70
 8015002:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8015004:	2300      	movs	r3, #0
}
 8015006:	0018      	movs	r0, r3
 8015008:	46bd      	mov	sp, r7
 801500a:	b002      	add	sp, #8
 801500c:	bd80      	pop	{r7, pc}

0801500e <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 801500e:	b580      	push	{r7, lr}
 8015010:	b084      	sub	sp, #16
 8015012:	af00      	add	r7, sp, #0
 8015014:	6078      	str	r0, [r7, #4]
 8015016:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8015018:	2308      	movs	r3, #8
 801501a:	18fb      	adds	r3, r7, r3
 801501c:	2104      	movs	r1, #4
 801501e:	0018      	movs	r0, r3
 8015020:	f004 f8fa 	bl	8019218 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 8015024:	2300      	movs	r3, #0
 8015026:	60fb      	str	r3, [r7, #12]
 8015028:	e081      	b.n	801512e <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2b01      	cmp	r3, #1
 801502e:	dc21      	bgt.n	8015074 <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	683a      	ldr	r2, [r7, #0]
 8015034:	18d3      	adds	r3, r2, r3
 8015036:	2208      	movs	r2, #8
 8015038:	18b9      	adds	r1, r7, r2
 801503a:	68fa      	ldr	r2, [r7, #12]
 801503c:	188a      	adds	r2, r1, r2
 801503e:	7812      	ldrb	r2, [r2, #0]
 8015040:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	683a      	ldr	r2, [r7, #0]
 8015046:	18d3      	adds	r3, r2, r3
 8015048:	7819      	ldrb	r1, [r3, #0]
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	687a      	ldr	r2, [r7, #4]
 801504e:	18d3      	adds	r3, r2, r3
 8015050:	781a      	ldrb	r2, [r3, #0]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	6838      	ldr	r0, [r7, #0]
 8015056:	18c3      	adds	r3, r0, r3
 8015058:	404a      	eors	r2, r1
 801505a:	b2d2      	uxtb	r2, r2
 801505c:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	683a      	ldr	r2, [r7, #0]
 8015062:	18d3      	adds	r3, r2, r3
 8015064:	781a      	ldrb	r2, [r3, #0]
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	6839      	ldr	r1, [r7, #0]
 801506a:	18cb      	adds	r3, r1, r3
 801506c:	3a33      	subs	r2, #51	; 0x33
 801506e:	b2d2      	uxtb	r2, r2
 8015070:	701a      	strb	r2, [r3, #0]
 8015072:	e059      	b.n	8015128 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2b0d      	cmp	r3, #13
 8015078:	dc33      	bgt.n	80150e2 <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	3b02      	subs	r3, #2
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	18d2      	adds	r2, r2, r3
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	18cb      	adds	r3, r1, r3
 8015088:	7812      	ldrb	r2, [r2, #0]
 801508a:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	683a      	ldr	r2, [r7, #0]
 8015090:	18d3      	adds	r3, r2, r3
 8015092:	7819      	ldrb	r1, [r3, #0]
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2203      	movs	r2, #3
 8015098:	4013      	ands	r3, r2
 801509a:	2208      	movs	r2, #8
 801509c:	18ba      	adds	r2, r7, r2
 801509e:	5cd2      	ldrb	r2, [r2, r3]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	6838      	ldr	r0, [r7, #0]
 80150a4:	18c3      	adds	r3, r0, r3
 80150a6:	404a      	eors	r2, r1
 80150a8:	b2d2      	uxtb	r2, r2
 80150aa:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	683a      	ldr	r2, [r7, #0]
 80150b0:	18d3      	adds	r3, r2, r3
 80150b2:	781a      	ldrb	r2, [r3, #0]
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	18cb      	adds	r3, r1, r3
 80150ba:	212c      	movs	r1, #44	; 0x2c
 80150bc:	404a      	eors	r2, r1
 80150be:	b2d2      	uxtb	r2, r2
 80150c0:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	683a      	ldr	r2, [r7, #0]
 80150c6:	18d3      	adds	r3, r2, r3
 80150c8:	7819      	ldrb	r1, [r3, #0]
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	3b01      	subs	r3, #1
 80150ce:	683a      	ldr	r2, [r7, #0]
 80150d0:	18d3      	adds	r3, r2, r3
 80150d2:	781a      	ldrb	r2, [r3, #0]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	6838      	ldr	r0, [r7, #0]
 80150d8:	18c3      	adds	r3, r0, r3
 80150da:	404a      	eors	r2, r1
 80150dc:	b2d2      	uxtb	r2, r2
 80150de:	701a      	strb	r2, [r3, #0]
 80150e0:	e022      	b.n	8015128 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	3b0c      	subs	r3, #12
 80150e6:	001a      	movs	r2, r3
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	18cb      	adds	r3, r1, r3
 80150ee:	2108      	movs	r1, #8
 80150f0:	1879      	adds	r1, r7, r1
 80150f2:	5c8a      	ldrb	r2, [r1, r2]
 80150f4:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	683a      	ldr	r2, [r7, #0]
 80150fa:	18d3      	adds	r3, r2, r3
 80150fc:	7819      	ldrb	r1, [r3, #0]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	3b05      	subs	r3, #5
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	18d3      	adds	r3, r2, r3
 8015106:	781a      	ldrb	r2, [r3, #0]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	6838      	ldr	r0, [r7, #0]
 801510c:	18c3      	adds	r3, r0, r3
 801510e:	404a      	eors	r2, r1
 8015110:	b2d2      	uxtb	r2, r2
 8015112:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	683a      	ldr	r2, [r7, #0]
 8015118:	18d3      	adds	r3, r2, r3
 801511a:	781a      	ldrb	r2, [r3, #0]
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	6839      	ldr	r1, [r7, #0]
 8015120:	18cb      	adds	r3, r1, r3
 8015122:	3a6f      	subs	r2, #111	; 0x6f
 8015124:	b2d2      	uxtb	r2, r2
 8015126:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3301      	adds	r3, #1
 801512c:	60fb      	str	r3, [r7, #12]
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2b0f      	cmp	r3, #15
 8015132:	dc00      	bgt.n	8015136 <itsdk_secstore_generateMasterKey+0x128>
 8015134:	e779      	b.n	801502a <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	2110      	movs	r1, #16
 801513a:	0018      	movs	r0, r3
 801513c:	f000 fd96 	bl	8015c6c <itsdk_encrypt_cifferKey>
}
 8015140:	46c0      	nop			; (mov r8, r8)
 8015142:	46bd      	mov	sp, r7
 8015144:	b004      	add	sp, #16
 8015146:	bd80      	pop	{r7, pc}

08015148 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8015148:	b590      	push	{r4, r7, lr}
 801514a:	b08d      	sub	sp, #52	; 0x34
 801514c:	af00      	add	r7, sp, #0
 801514e:	0002      	movs	r2, r0
 8015150:	6039      	str	r1, [r7, #0]
 8015152:	1dfb      	adds	r3, r7, #7
 8015154:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8015156:	2320      	movs	r3, #32
 8015158:	18fb      	adds	r3, r7, r3
 801515a:	0018      	movs	r0, r3
 801515c:	f7ff ff22 	bl	8014fa4 <_itsdk_secstore_controlHeader>
 8015160:	1e03      	subs	r3, r0, #0
 8015162:	d001      	beq.n	8015168 <itsdk_secstore_readBlock+0x20>
 8015164:	2302      	movs	r3, #2
 8015166:	e038      	b.n	80151da <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8015168:	2300      	movs	r3, #0
 801516a:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 801516c:	211b      	movs	r1, #27
 801516e:	187b      	adds	r3, r7, r1
 8015170:	2200      	movs	r2, #0
 8015172:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8015174:	1dfb      	adds	r3, r7, #7
 8015176:	781a      	ldrb	r2, [r3, #0]
 8015178:	1879      	adds	r1, r7, r1
 801517a:	231c      	movs	r3, #28
 801517c:	18fb      	adds	r3, r7, r3
 801517e:	0018      	movs	r0, r3
 8015180:	f7ff fe96 	bl	8014eb0 <_itsdk_secstore_getOffset>
 8015184:	1e03      	subs	r3, r0, #0
 8015186:	d001      	beq.n	801518c <itsdk_secstore_readBlock+0x44>
 8015188:	2301      	movs	r3, #1
 801518a:	e026      	b.n	80151da <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 801518c:	2320      	movs	r3, #32
 801518e:	18fb      	adds	r3, r7, r3
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	021b      	lsls	r3, r3, #8
 8015194:	0c1b      	lsrs	r3, r3, #16
 8015196:	b29b      	uxth	r3, r3
 8015198:	001a      	movs	r2, r3
 801519a:	231b      	movs	r3, #27
 801519c:	18fb      	adds	r3, r7, r3
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	411a      	asrs	r2, r3
 80151a2:	0013      	movs	r3, r2
 80151a4:	2201      	movs	r2, #1
 80151a6:	4013      	ands	r3, r2
 80151a8:	d101      	bne.n	80151ae <itsdk_secstore_readBlock+0x66>
 80151aa:	2303      	movs	r3, #3
 80151ac:	e015      	b.n	80151da <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 80151ae:	69f9      	ldr	r1, [r7, #28]
 80151b0:	683a      	ldr	r2, [r7, #0]
 80151b2:	2310      	movs	r3, #16
 80151b4:	2000      	movs	r0, #0
 80151b6:	f004 f9b3 	bl	8019520 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 80151ba:	2408      	movs	r4, #8
 80151bc:	193a      	adds	r2, r7, r4
 80151be:	2320      	movs	r3, #32
 80151c0:	18fb      	adds	r3, r7, r3
 80151c2:	3304      	adds	r3, #4
 80151c4:	0011      	movs	r1, r2
 80151c6:	0018      	movs	r0, r3
 80151c8:	f7ff ff21 	bl	801500e <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 80151cc:	193b      	adds	r3, r7, r4
 80151ce:	6839      	ldr	r1, [r7, #0]
 80151d0:	6838      	ldr	r0, [r7, #0]
 80151d2:	2210      	movs	r2, #16
 80151d4:	f000 fd0a 	bl	8015bec <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 80151d8:	2300      	movs	r3, #0
}
 80151da:	0018      	movs	r0, r3
 80151dc:	46bd      	mov	sp, r7
 80151de:	b00d      	add	sp, #52	; 0x34
 80151e0:	bd90      	pop	{r4, r7, pc}

080151e2 <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 80151e2:	b5b0      	push	{r4, r5, r7, lr}
 80151e4:	b08c      	sub	sp, #48	; 0x30
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	0002      	movs	r2, r0
 80151ea:	6039      	str	r1, [r7, #0]
 80151ec:	1dfb      	adds	r3, r7, #7
 80151ee:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 80151f0:	2320      	movs	r3, #32
 80151f2:	18fb      	adds	r3, r7, r3
 80151f4:	0018      	movs	r0, r3
 80151f6:	f7ff fed5 	bl	8014fa4 <_itsdk_secstore_controlHeader>
 80151fa:	1e03      	subs	r3, r0, #0
 80151fc:	d001      	beq.n	8015202 <itsdk_secstore_writeBlock+0x20>
 80151fe:	2302      	movs	r3, #2
 8015200:	e061      	b.n	80152c6 <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 8015202:	2300      	movs	r3, #0
 8015204:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8015206:	211b      	movs	r1, #27
 8015208:	187b      	adds	r3, r7, r1
 801520a:	2200      	movs	r2, #0
 801520c:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 801520e:	1dfb      	adds	r3, r7, #7
 8015210:	781a      	ldrb	r2, [r3, #0]
 8015212:	1879      	adds	r1, r7, r1
 8015214:	231c      	movs	r3, #28
 8015216:	18fb      	adds	r3, r7, r3
 8015218:	0018      	movs	r0, r3
 801521a:	f7ff fe49 	bl	8014eb0 <_itsdk_secstore_getOffset>
 801521e:	1e03      	subs	r3, r0, #0
 8015220:	d001      	beq.n	8015226 <itsdk_secstore_writeBlock+0x44>
 8015222:	2301      	movs	r3, #1
 8015224:	e04f      	b.n	80152c6 <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8015226:	2408      	movs	r4, #8
 8015228:	193a      	adds	r2, r7, r4
 801522a:	2520      	movs	r5, #32
 801522c:	197b      	adds	r3, r7, r5
 801522e:	3304      	adds	r3, #4
 8015230:	0011      	movs	r1, r2
 8015232:	0018      	movs	r0, r3
 8015234:	f7ff feeb 	bl	801500e <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8015238:	193b      	adds	r3, r7, r4
 801523a:	6839      	ldr	r1, [r7, #0]
 801523c:	6838      	ldr	r0, [r7, #0]
 801523e:	2210      	movs	r2, #16
 8015240:	f000 fc90 	bl	8015b64 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8015244:	69f9      	ldr	r1, [r7, #28]
 8015246:	683a      	ldr	r2, [r7, #0]
 8015248:	2310      	movs	r3, #16
 801524a:	2000      	movs	r0, #0
 801524c:	f004 f8c4 	bl	80193d8 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 8015250:	197b      	adds	r3, r7, r5
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	021b      	lsls	r3, r3, #8
 8015256:	0c1b      	lsrs	r3, r3, #16
 8015258:	b29b      	uxth	r3, r3
 801525a:	001a      	movs	r2, r3
 801525c:	231b      	movs	r3, #27
 801525e:	18fb      	adds	r3, r7, r3
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	411a      	asrs	r2, r3
 8015264:	0013      	movs	r3, r2
 8015266:	2201      	movs	r2, #1
 8015268:	4013      	ands	r3, r2
 801526a:	d12b      	bne.n	80152c4 <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 801526c:	2520      	movs	r5, #32
 801526e:	197b      	adds	r3, r7, r5
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	021b      	lsls	r3, r3, #8
 8015274:	0c1b      	lsrs	r3, r3, #16
 8015276:	b29b      	uxth	r3, r3
 8015278:	b21a      	sxth	r2, r3
 801527a:	231b      	movs	r3, #27
 801527c:	18fb      	adds	r3, r7, r3
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	0019      	movs	r1, r3
 8015282:	2301      	movs	r3, #1
 8015284:	408b      	lsls	r3, r1
 8015286:	b21b      	sxth	r3, r3
 8015288:	4313      	orrs	r3, r2
 801528a:	b21b      	sxth	r3, r3
 801528c:	b29a      	uxth	r2, r3
 801528e:	197b      	adds	r3, r7, r5
 8015290:	3301      	adds	r3, #1
 8015292:	21ff      	movs	r1, #255	; 0xff
 8015294:	4011      	ands	r1, r2
 8015296:	000c      	movs	r4, r1
 8015298:	7819      	ldrb	r1, [r3, #0]
 801529a:	2000      	movs	r0, #0
 801529c:	4001      	ands	r1, r0
 801529e:	1c08      	adds	r0, r1, #0
 80152a0:	1c21      	adds	r1, r4, #0
 80152a2:	4301      	orrs	r1, r0
 80152a4:	7019      	strb	r1, [r3, #0]
 80152a6:	0a12      	lsrs	r2, r2, #8
 80152a8:	b290      	uxth	r0, r2
 80152aa:	785a      	ldrb	r2, [r3, #1]
 80152ac:	2100      	movs	r1, #0
 80152ae:	400a      	ands	r2, r1
 80152b0:	1c11      	adds	r1, r2, #0
 80152b2:	1c02      	adds	r2, r0, #0
 80152b4:	430a      	orrs	r2, r1
 80152b6:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 80152b8:	197a      	adds	r2, r7, r5
 80152ba:	2310      	movs	r3, #16
 80152bc:	2100      	movs	r1, #0
 80152be:	2000      	movs	r0, #0
 80152c0:	f004 f88a 	bl	80193d8 <_eeprom_write>
	}

	return SS_SUCCESS;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	0018      	movs	r0, r3
 80152c8:	46bd      	mov	sp, r7
 80152ca:	b00c      	add	sp, #48	; 0x30
 80152cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080152d0 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 80152d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152d2:	b08d      	sub	sp, #52	; 0x34
 80152d4:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 80152d6:	2020      	movs	r0, #32
 80152d8:	0004      	movs	r4, r0
 80152da:	183b      	adds	r3, r7, r0
 80152dc:	781a      	ldrb	r2, [r3, #0]
 80152de:	210f      	movs	r1, #15
 80152e0:	438a      	bics	r2, r1
 80152e2:	1c11      	adds	r1, r2, #0
 80152e4:	220c      	movs	r2, #12
 80152e6:	430a      	orrs	r2, r1
 80152e8:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 80152ea:	251f      	movs	r5, #31
 80152ec:	197b      	adds	r3, r7, r5
 80152ee:	0018      	movs	r0, r3
 80152f0:	f7ff fe3e 	bl	8014f70 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 80152f4:	197b      	adds	r3, r7, r5
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	1c1a      	adds	r2, r3, #0
 80152fa:	230f      	movs	r3, #15
 80152fc:	4013      	ands	r3, r2
 80152fe:	b2da      	uxtb	r2, r3
 8015300:	193b      	adds	r3, r7, r4
 8015302:	0110      	lsls	r0, r2, #4
 8015304:	781a      	ldrb	r2, [r3, #0]
 8015306:	210f      	movs	r1, #15
 8015308:	400a      	ands	r2, r1
 801530a:	1c11      	adds	r1, r2, #0
 801530c:	1c02      	adds	r2, r0, #0
 801530e:	430a      	orrs	r2, r1
 8015310:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 8015312:	0020      	movs	r0, r4
 8015314:	193b      	adds	r3, r7, r4
 8015316:	3301      	adds	r3, #1
 8015318:	781a      	ldrb	r2, [r3, #0]
 801531a:	2100      	movs	r1, #0
 801531c:	400a      	ands	r2, r1
 801531e:	1c11      	adds	r1, r2, #0
 8015320:	2201      	movs	r2, #1
 8015322:	430a      	orrs	r2, r1
 8015324:	701a      	strb	r2, [r3, #0]
 8015326:	785a      	ldrb	r2, [r3, #1]
 8015328:	2100      	movs	r1, #0
 801532a:	400a      	ands	r2, r1
 801532c:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 801532e:	2110      	movs	r1, #16
 8015330:	187b      	adds	r3, r7, r1
 8015332:	4a15      	ldr	r2, [pc, #84]	; (8015388 <itsdk_secstore_init+0xb8>)
 8015334:	ca70      	ldmia	r2!, {r4, r5, r6}
 8015336:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8015338:	183b      	adds	r3, r7, r0
 801533a:	187a      	adds	r2, r7, r1
 801533c:	3304      	adds	r3, #4
 801533e:	ca32      	ldmia	r2!, {r1, r4, r5}
 8015340:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8015342:	183a      	adds	r2, r7, r0
 8015344:	2310      	movs	r3, #16
 8015346:	2100      	movs	r1, #0
 8015348:	2000      	movs	r0, #0
 801534a:	f004 f845 	bl	80193d8 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 801534e:	0039      	movs	r1, r7
 8015350:	4a0e      	ldr	r2, [pc, #56]	; (801538c <itsdk_secstore_init+0xbc>)
 8015352:	000b      	movs	r3, r1
 8015354:	ca11      	ldmia	r2!, {r0, r4}
 8015356:	c311      	stmia	r3!, {r0, r4}
 8015358:	7812      	ldrb	r2, [r2, #0]
 801535a:	701a      	strb	r2, [r3, #0]
 801535c:	2309      	movs	r3, #9
 801535e:	18cb      	adds	r3, r1, r3
 8015360:	2207      	movs	r2, #7
 8015362:	2100      	movs	r1, #0
 8015364:	0018      	movs	r0, r3
 8015366:	f004 fe1b 	bl	8019fa0 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 801536a:	003b      	movs	r3, r7
 801536c:	0019      	movs	r1, r3
 801536e:	2000      	movs	r0, #0
 8015370:	f7ff ff37 	bl	80151e2 <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8015374:	003b      	movs	r3, r7
 8015376:	2110      	movs	r1, #16
 8015378:	0018      	movs	r0, r3
 801537a:	f004 fdc4 	bl	8019f06 <bzero>

	return SS_SUCCESS;
 801537e:	2300      	movs	r3, #0
}
 8015380:	0018      	movs	r0, r3
 8015382:	46bd      	mov	sp, r7
 8015384:	b00d      	add	sp, #52	; 0x34
 8015386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015388:	0801b328 	.word	0x0801b328
 801538c:	0801b334 	.word	0x0801b334

08015390 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 8015396:	003b      	movs	r3, r7
 8015398:	0018      	movs	r0, r3
 801539a:	f7ff fe03 	bl	8014fa4 <_itsdk_secstore_controlHeader>
 801539e:	0003      	movs	r3, r0
}
 80153a0:	0018      	movs	r0, r3
 80153a2:	46bd      	mov	sp, r7
 80153a4:	b004      	add	sp, #16
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b086      	sub	sp, #24
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	60b9      	str	r1, [r7, #8]
 80153b0:	607a      	str	r2, [r7, #4]
 80153b2:	210f      	movs	r1, #15
 80153b4:	187b      	adds	r3, r7, r1
 80153b6:	1c02      	adds	r2, r0, #0
 80153b8:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 80153ba:	2300      	movs	r3, #0
 80153bc:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 80153be:	2013      	movs	r0, #19
 80153c0:	183b      	adds	r3, r7, r0
 80153c2:	2200      	movs	r2, #0
 80153c4:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 80153c6:	187b      	adds	r3, r7, r1
 80153c8:	781a      	ldrb	r2, [r3, #0]
 80153ca:	1839      	adds	r1, r7, r0
 80153cc:	2314      	movs	r3, #20
 80153ce:	18fb      	adds	r3, r7, r3
 80153d0:	0018      	movs	r0, r3
 80153d2:	f7ff fd6d 	bl	8014eb0 <_itsdk_secstore_getOffset>
 80153d6:	1e03      	subs	r3, r0, #0
 80153d8:	d001      	beq.n	80153de <_itsdk_secstore_writeBlockKey+0x36>
 80153da:	2301      	movs	r3, #1
 80153dc:	e00c      	b.n	80153f8 <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	68b9      	ldr	r1, [r7, #8]
 80153e2:	68b8      	ldr	r0, [r7, #8]
 80153e4:	2210      	movs	r2, #16
 80153e6:	f000 fbbd 	bl	8015b64 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 80153ea:	6979      	ldr	r1, [r7, #20]
 80153ec:	68ba      	ldr	r2, [r7, #8]
 80153ee:	2310      	movs	r3, #16
 80153f0:	2000      	movs	r0, #0
 80153f2:	f003 fff1 	bl	80193d8 <_eeprom_write>

	return SS_SUCCESS;
 80153f6:	2300      	movs	r3, #0
}
 80153f8:	0018      	movs	r0, r3
 80153fa:	46bd      	mov	sp, r7
 80153fc:	b006      	add	sp, #24
 80153fe:	bd80      	pop	{r7, pc}

08015400 <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 8015400:	b580      	push	{r7, lr}
 8015402:	b090      	sub	sp, #64	; 0x40
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 8015408:	232c      	movs	r3, #44	; 0x2c
 801540a:	18fb      	adds	r3, r7, r3
 801540c:	0018      	movs	r0, r3
 801540e:	f7ff fdc9 	bl	8014fa4 <_itsdk_secstore_controlHeader>
 8015412:	1e03      	subs	r3, r0, #0
 8015414:	d005      	beq.n	8015422 <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 8015416:	4b4b      	ldr	r3, [pc, #300]	; (8015544 <_itsk_secstore_rekey+0x144>)
 8015418:	0018      	movs	r0, r3
 801541a:	f7fe fd4d 	bl	8013eb8 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801541e:	2302      	movs	r3, #2
 8015420:	e08c      	b.n	801553c <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 8015422:	230c      	movs	r3, #12
 8015424:	18fa      	adds	r2, r7, r3
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	0011      	movs	r1, r2
 801542a:	0018      	movs	r0, r3
 801542c:	f7ff fdef 	bl	801500e <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 8015430:	231c      	movs	r3, #28
 8015432:	18fb      	adds	r3, r7, r3
 8015434:	0019      	movs	r1, r3
 8015436:	2000      	movs	r0, #0
 8015438:	f7ff fe86 	bl	8015148 <itsdk_secstore_readBlock>
 801543c:	0003      	movs	r3, r0
 801543e:	2b03      	cmp	r3, #3
 8015440:	d007      	beq.n	8015452 <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 8015442:	230c      	movs	r3, #12
 8015444:	18fa      	adds	r2, r7, r3
 8015446:	231c      	movs	r3, #28
 8015448:	18fb      	adds	r3, r7, r3
 801544a:	0019      	movs	r1, r3
 801544c:	2000      	movs	r0, #0
 801544e:	f7ff ffab 	bl	80153a8 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 8015452:	231c      	movs	r3, #28
 8015454:	18fb      	adds	r3, r7, r3
 8015456:	0019      	movs	r1, r3
 8015458:	2002      	movs	r0, #2
 801545a:	f7ff fe75 	bl	8015148 <itsdk_secstore_readBlock>
 801545e:	0003      	movs	r3, r0
 8015460:	2b03      	cmp	r3, #3
 8015462:	d007      	beq.n	8015474 <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 8015464:	230c      	movs	r3, #12
 8015466:	18fa      	adds	r2, r7, r3
 8015468:	231c      	movs	r3, #28
 801546a:	18fb      	adds	r3, r7, r3
 801546c:	0019      	movs	r1, r3
 801546e:	2002      	movs	r0, #2
 8015470:	f7ff ff9a 	bl	80153a8 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 8015474:	231c      	movs	r3, #28
 8015476:	18fb      	adds	r3, r7, r3
 8015478:	0019      	movs	r1, r3
 801547a:	2003      	movs	r0, #3
 801547c:	f7ff fe64 	bl	8015148 <itsdk_secstore_readBlock>
 8015480:	0003      	movs	r3, r0
 8015482:	2b03      	cmp	r3, #3
 8015484:	d007      	beq.n	8015496 <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 8015486:	230c      	movs	r3, #12
 8015488:	18fa      	adds	r2, r7, r3
 801548a:	231c      	movs	r3, #28
 801548c:	18fb      	adds	r3, r7, r3
 801548e:	0019      	movs	r1, r3
 8015490:	2003      	movs	r0, #3
 8015492:	f7ff ff89 	bl	80153a8 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 8015496:	231c      	movs	r3, #28
 8015498:	18fb      	adds	r3, r7, r3
 801549a:	0019      	movs	r1, r3
 801549c:	2004      	movs	r0, #4
 801549e:	f7ff fe53 	bl	8015148 <itsdk_secstore_readBlock>
 80154a2:	0003      	movs	r3, r0
 80154a4:	2b03      	cmp	r3, #3
 80154a6:	d007      	beq.n	80154b8 <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 80154a8:	230c      	movs	r3, #12
 80154aa:	18fa      	adds	r2, r7, r3
 80154ac:	231c      	movs	r3, #28
 80154ae:	18fb      	adds	r3, r7, r3
 80154b0:	0019      	movs	r1, r3
 80154b2:	2004      	movs	r0, #4
 80154b4:	f7ff ff78 	bl	80153a8 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 80154b8:	231c      	movs	r3, #28
 80154ba:	18fb      	adds	r3, r7, r3
 80154bc:	0019      	movs	r1, r3
 80154be:	2005      	movs	r0, #5
 80154c0:	f7ff fe42 	bl	8015148 <itsdk_secstore_readBlock>
 80154c4:	0003      	movs	r3, r0
 80154c6:	2b03      	cmp	r3, #3
 80154c8:	d007      	beq.n	80154da <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 80154ca:	230c      	movs	r3, #12
 80154cc:	18fa      	adds	r2, r7, r3
 80154ce:	231c      	movs	r3, #28
 80154d0:	18fb      	adds	r3, r7, r3
 80154d2:	0019      	movs	r1, r3
 80154d4:	2005      	movs	r0, #5
 80154d6:	f7ff ff67 	bl	80153a8 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 80154da:	231c      	movs	r3, #28
 80154dc:	18fb      	adds	r3, r7, r3
 80154de:	0019      	movs	r1, r3
 80154e0:	2006      	movs	r0, #6
 80154e2:	f7ff fe31 	bl	8015148 <itsdk_secstore_readBlock>
 80154e6:	0003      	movs	r3, r0
 80154e8:	2b03      	cmp	r3, #3
 80154ea:	d007      	beq.n	80154fc <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 80154ec:	230c      	movs	r3, #12
 80154ee:	18fa      	adds	r2, r7, r3
 80154f0:	231c      	movs	r3, #28
 80154f2:	18fb      	adds	r3, r7, r3
 80154f4:	0019      	movs	r1, r3
 80154f6:	2006      	movs	r0, #6
 80154f8:	f7ff ff56 	bl	80153a8 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 80154fc:	2300      	movs	r3, #0
 80154fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015500:	e00d      	b.n	801551e <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 8015502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	18d3      	adds	r3, r2, r3
 8015508:	7819      	ldrb	r1, [r3, #0]
 801550a:	232c      	movs	r3, #44	; 0x2c
 801550c:	18fa      	adds	r2, r7, r3
 801550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015510:	18d3      	adds	r3, r2, r3
 8015512:	3304      	adds	r3, #4
 8015514:	1c0a      	adds	r2, r1, #0
 8015516:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 8015518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801551a:	3301      	adds	r3, #1
 801551c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015520:	2b0b      	cmp	r3, #11
 8015522:	ddee      	ble.n	8015502 <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8015524:	232c      	movs	r3, #44	; 0x2c
 8015526:	18fa      	adds	r2, r7, r3
 8015528:	2310      	movs	r3, #16
 801552a:	2100      	movs	r1, #0
 801552c:	2000      	movs	r0, #0
 801552e:	f003 ff53 	bl	80193d8 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 8015532:	4b05      	ldr	r3, [pc, #20]	; (8015548 <_itsk_secstore_rekey+0x148>)
 8015534:	0018      	movs	r0, r3
 8015536:	f7fe fcbf 	bl	8013eb8 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 801553a:	2300      	movs	r3, #0
}
 801553c:	0018      	movs	r0, r3
 801553e:	46bd      	mov	sp, r7
 8015540:	b010      	add	sp, #64	; 0x40
 8015542:	bd80      	pop	{r7, pc}
 8015544:	0801b344 	.word	0x0801b344
 8015548:	0801b34c 	.word	0x0801b34c

0801554c <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 801554c:	b590      	push	{r4, r7, lr}
 801554e:	b085      	sub	sp, #20
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	000c      	movs	r4, r1
 8015556:	0010      	movs	r0, r2
 8015558:	0019      	movs	r1, r3
 801555a:	1cfb      	adds	r3, r7, #3
 801555c:	1c22      	adds	r2, r4, #0
 801555e:	701a      	strb	r2, [r3, #0]
 8015560:	1cbb      	adds	r3, r7, #2
 8015562:	1c02      	adds	r2, r0, #0
 8015564:	701a      	strb	r2, [r3, #0]
 8015566:	1c7b      	adds	r3, r7, #1
 8015568:	1c0a      	adds	r2, r1, #0
 801556a:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 801556c:	1cbb      	adds	r3, r7, #2
 801556e:	781a      	ldrb	r2, [r3, #0]
 8015570:	1cfb      	adds	r3, r7, #3
 8015572:	781b      	ldrb	r3, [r3, #0]
 8015574:	1ad2      	subs	r2, r2, r3
 8015576:	1c7b      	adds	r3, r7, #1
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	005b      	lsls	r3, r3, #1
 801557c:	429a      	cmp	r2, r3
 801557e:	da01      	bge.n	8015584 <__checkAndConvert+0x38>
 8015580:	2300      	movs	r3, #0
 8015582:	e034      	b.n	80155ee <__checkAndConvert+0xa2>
	int k = 0;
 8015584:	2300      	movs	r3, #0
 8015586:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 8015588:	1cfb      	adds	r3, r7, #3
 801558a:	781b      	ldrb	r3, [r3, #0]
 801558c:	60bb      	str	r3, [r7, #8]
 801558e:	e028      	b.n	80155e2 <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	18d3      	adds	r3, r2, r3
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	2100      	movs	r1, #0
 801559a:	0018      	movs	r0, r3
 801559c:	f002 fa80 	bl	8017aa0 <itdt_isHexChar>
 80155a0:	1e03      	subs	r3, r0, #0
 80155a2:	d01c      	beq.n	80155de <__checkAndConvert+0x92>
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	3301      	adds	r3, #1
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	18d3      	adds	r3, r2, r3
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	2100      	movs	r1, #0
 80155b0:	0018      	movs	r0, r3
 80155b2:	f002 fa75 	bl	8017aa0 <itdt_isHexChar>
 80155b6:	1e03      	subs	r3, r0, #0
 80155b8:	d011      	beq.n	80155de <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	18d1      	adds	r1, r2, r3
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	6a3a      	ldr	r2, [r7, #32]
 80155c4:	18d4      	adds	r4, r2, r3
 80155c6:	0008      	movs	r0, r1
 80155c8:	f002 f9ca 	bl	8017960 <itdt_convertHexChar2Int>
 80155cc:	0003      	movs	r3, r0
 80155ce:	7023      	strb	r3, [r4, #0]
			k++;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	3301      	adds	r3, #1
 80155d4:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	3302      	adds	r3, #2
 80155da:	60bb      	str	r3, [r7, #8]
 80155dc:	e001      	b.n	80155e2 <__checkAndConvert+0x96>
		} else return false;
 80155de:	2300      	movs	r3, #0
 80155e0:	e005      	b.n	80155ee <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 80155e2:	1cbb      	adds	r3, r7, #2
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	68ba      	ldr	r2, [r7, #8]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	dbd1      	blt.n	8015590 <__checkAndConvert+0x44>
	}
	return true;
 80155ec:	2301      	movs	r3, #1
}
 80155ee:	0018      	movs	r0, r3
 80155f0:	46bd      	mov	sp, r7
 80155f2:	b005      	add	sp, #20
 80155f4:	bd90      	pop	{r4, r7, pc}
	...

080155f8 <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 80155f8:	b590      	push	{r4, r7, lr}
 80155fa:	b087      	sub	sp, #28
 80155fc:	af02      	add	r7, sp, #8
 80155fe:	60f8      	str	r0, [r7, #12]
 8015600:	0008      	movs	r0, r1
 8015602:	607a      	str	r2, [r7, #4]
 8015604:	0019      	movs	r1, r3
 8015606:	240b      	movs	r4, #11
 8015608:	193b      	adds	r3, r7, r4
 801560a:	1c02      	adds	r2, r0, #0
 801560c:	701a      	strb	r2, [r3, #0]
 801560e:	230a      	movs	r3, #10
 8015610:	18fb      	adds	r3, r7, r3
 8015612:	1c0a      	adds	r2, r1, #0
 8015614:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 8015616:	193b      	adds	r3, r7, r4
 8015618:	781a      	ldrb	r2, [r3, #0]
 801561a:	68f8      	ldr	r0, [r7, #12]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	9300      	str	r3, [sp, #0]
 8015620:	2310      	movs	r3, #16
 8015622:	2105      	movs	r1, #5
 8015624:	f7ff ff92 	bl	801554c <__checkAndConvert>
 8015628:	1e03      	subs	r3, r0, #0
 801562a:	d01f      	beq.n	801566c <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 801562c:	230a      	movs	r3, #10
 801562e:	18fb      	adds	r3, r7, r3
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	2b01      	cmp	r3, #1
 8015634:	d104      	bne.n	8015640 <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2110      	movs	r1, #16
 801563a:	0018      	movs	r0, r3
 801563c:	f000 fb16 	bl	8015c6c <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	230a      	movs	r3, #10
 8015644:	18fb      	adds	r3, r7, r3
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	0011      	movs	r1, r2
 801564a:	0018      	movs	r0, r3
 801564c:	f7ff fdc9 	bl	80151e2 <itsdk_secstore_writeBlock>
 8015650:	1e03      	subs	r3, r0, #0
 8015652:	d105      	bne.n	8015660 <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 8015654:	4b0a      	ldr	r3, [pc, #40]	; (8015680 <__updateField+0x88>)
 8015656:	0018      	movs	r0, r3
 8015658:	f7fe fc2e 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801565c:	2300      	movs	r3, #0
 801565e:	e00a      	b.n	8015676 <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 8015660:	4b08      	ldr	r3, [pc, #32]	; (8015684 <__updateField+0x8c>)
 8015662:	0018      	movs	r0, r3
 8015664:	f7fe fc28 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8015668:	2302      	movs	r3, #2
 801566a:	e004      	b.n	8015676 <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 801566c:	4b05      	ldr	r3, [pc, #20]	; (8015684 <__updateField+0x8c>)
 801566e:	0018      	movs	r0, r3
 8015670:	f7fe fc22 	bl	8013eb8 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8015674:	2302      	movs	r3, #2
	}
}
 8015676:	0018      	movs	r0, r3
 8015678:	46bd      	mov	sp, r7
 801567a:	b005      	add	sp, #20
 801567c:	bd90      	pop	{r4, r7, pc}
 801567e:	46c0      	nop			; (mov r8, r8)
 8015680:	0801b34c 	.word	0x0801b34c
 8015684:	0801b344 	.word	0x0801b344

08015688 <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 8015688:	b590      	push	{r4, r7, lr}
 801568a:	b08d      	sub	sp, #52	; 0x34
 801568c:	af02      	add	r7, sp, #8
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	0008      	movs	r0, r1
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	0019      	movs	r1, r3
 8015696:	240b      	movs	r4, #11
 8015698:	193b      	adds	r3, r7, r4
 801569a:	1c02      	adds	r2, r0, #0
 801569c:	701a      	strb	r2, [r3, #0]
 801569e:	230a      	movs	r3, #10
 80156a0:	18fb      	adds	r3, r7, r3
 80156a2:	1c0a      	adds	r2, r1, #0
 80156a4:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 80156a6:	2334      	movs	r3, #52	; 0x34
 80156a8:	2208      	movs	r2, #8
 80156aa:	4694      	mov	ip, r2
 80156ac:	44bc      	add	ip, r7
 80156ae:	4463      	add	r3, ip
 80156b0:	7819      	ldrb	r1, [r3, #0]
 80156b2:	193b      	adds	r3, r7, r4
 80156b4:	781a      	ldrb	r2, [r3, #0]
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	000b      	movs	r3, r1
 80156be:	2105      	movs	r1, #5
 80156c0:	f7ff ff44 	bl	801554c <__checkAndConvert>
 80156c4:	1e03      	subs	r3, r0, #0
 80156c6:	d045      	beq.n	8015754 <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 80156c8:	2314      	movs	r3, #20
 80156ca:	18fa      	adds	r2, r7, r3
 80156cc:	230a      	movs	r3, #10
 80156ce:	18fb      	adds	r3, r7, r3
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	0011      	movs	r1, r2
 80156d4:	0018      	movs	r0, r3
 80156d6:	f7ff fd37 	bl	8015148 <itsdk_secstore_readBlock>
 80156da:	1e03      	subs	r3, r0, #0
 80156dc:	d005      	beq.n	80156ea <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 80156de:	4b22      	ldr	r3, [pc, #136]	; (8015768 <__updateField2+0xe0>)
 80156e0:	0018      	movs	r0, r3
 80156e2:	f7fe fbe9 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80156e6:	2302      	movs	r3, #2
 80156e8:	e039      	b.n	801575e <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 80156ea:	2300      	movs	r3, #0
 80156ec:	627b      	str	r3, [r7, #36]	; 0x24
 80156ee:	e011      	b.n	8015714 <__updateField2+0x8c>
			_b[i+offset] = b[i];
 80156f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	18d2      	adds	r2, r2, r3
 80156f6:	2330      	movs	r3, #48	; 0x30
 80156f8:	2108      	movs	r1, #8
 80156fa:	468c      	mov	ip, r1
 80156fc:	44bc      	add	ip, r7
 80156fe:	4463      	add	r3, ip
 8015700:	7819      	ldrb	r1, [r3, #0]
 8015702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015704:	18cb      	adds	r3, r1, r3
 8015706:	7811      	ldrb	r1, [r2, #0]
 8015708:	2214      	movs	r2, #20
 801570a:	18ba      	adds	r2, r7, r2
 801570c:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 801570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015710:	3301      	adds	r3, #1
 8015712:	627b      	str	r3, [r7, #36]	; 0x24
 8015714:	2334      	movs	r3, #52	; 0x34
 8015716:	2208      	movs	r2, #8
 8015718:	4694      	mov	ip, r2
 801571a:	44bc      	add	ip, r7
 801571c:	4463      	add	r3, ip
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015722:	429a      	cmp	r2, r3
 8015724:	dbe4      	blt.n	80156f0 <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 8015726:	2314      	movs	r3, #20
 8015728:	18fa      	adds	r2, r7, r3
 801572a:	230a      	movs	r3, #10
 801572c:	18fb      	adds	r3, r7, r3
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	0011      	movs	r1, r2
 8015732:	0018      	movs	r0, r3
 8015734:	f7ff fd55 	bl	80151e2 <itsdk_secstore_writeBlock>
 8015738:	1e03      	subs	r3, r0, #0
 801573a:	d105      	bne.n	8015748 <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 801573c:	4b0b      	ldr	r3, [pc, #44]	; (801576c <__updateField2+0xe4>)
 801573e:	0018      	movs	r0, r3
 8015740:	f7fe fbba 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8015744:	2300      	movs	r3, #0
 8015746:	e00a      	b.n	801575e <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 8015748:	4b07      	ldr	r3, [pc, #28]	; (8015768 <__updateField2+0xe0>)
 801574a:	0018      	movs	r0, r3
 801574c:	f7fe fbb4 	bl	8013eb8 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8015750:	2302      	movs	r3, #2
 8015752:	e004      	b.n	801575e <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8015754:	4b04      	ldr	r3, [pc, #16]	; (8015768 <__updateField2+0xe0>)
 8015756:	0018      	movs	r0, r3
 8015758:	f7fe fbae 	bl	8013eb8 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801575c:	2302      	movs	r3, #2
	}
}
 801575e:	0018      	movs	r0, r3
 8015760:	46bd      	mov	sp, r7
 8015762:	b00b      	add	sp, #44	; 0x2c
 8015764:	bd90      	pop	{r4, r7, pc}
 8015766:	46c0      	nop			; (mov r8, r8)
 8015768:	0801b344 	.word	0x0801b344
 801576c:	0801b34c 	.word	0x0801b34c

08015770 <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 8015770:	b5b0      	push	{r4, r5, r7, lr}
 8015772:	b090      	sub	sp, #64	; 0x40
 8015774:	af02      	add	r7, sp, #8
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	000a      	movs	r2, r1
 801577a:	1cfb      	adds	r3, r7, #3
 801577c:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801577e:	1cfb      	adds	r3, r7, #3
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	2b01      	cmp	r3, #1
 8015784:	d136      	bne.n	80157f4 <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	2b3f      	cmp	r3, #63	; 0x3f
 801578c:	d000      	beq.n	8015790 <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 801578e:	e1cb      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 8015790:	4bd3      	ldr	r3, [pc, #844]	; (8015ae0 <_itsdk_secStore_consolePriv+0x370>)
 8015792:	0018      	movs	r0, r3
 8015794:	f7fe fb90 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 8015798:	4bd2      	ldr	r3, [pc, #840]	; (8015ae4 <_itsdk_secStore_consolePriv+0x374>)
 801579a:	0018      	movs	r0, r3
 801579c:	f7fe fb8c 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 80157a0:	4bd1      	ldr	r3, [pc, #836]	; (8015ae8 <_itsdk_secStore_consolePriv+0x378>)
 80157a2:	0018      	movs	r0, r3
 80157a4:	f7fe fb88 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 80157a8:	4bd0      	ldr	r3, [pc, #832]	; (8015aec <_itsdk_secStore_consolePriv+0x37c>)
 80157aa:	0018      	movs	r0, r3
 80157ac:	f7fe fb84 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 80157b0:	4bcf      	ldr	r3, [pc, #828]	; (8015af0 <_itsdk_secStore_consolePriv+0x380>)
 80157b2:	0018      	movs	r0, r3
 80157b4:	f7fe fb80 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 80157b8:	4bce      	ldr	r3, [pc, #824]	; (8015af4 <_itsdk_secStore_consolePriv+0x384>)
 80157ba:	0018      	movs	r0, r3
 80157bc:	f7fe fb7c 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 80157c0:	4bcd      	ldr	r3, [pc, #820]	; (8015af8 <_itsdk_secStore_consolePriv+0x388>)
 80157c2:	0018      	movs	r0, r3
 80157c4:	f7fe fb78 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 80157c8:	4bcc      	ldr	r3, [pc, #816]	; (8015afc <_itsdk_secStore_consolePriv+0x38c>)
 80157ca:	0018      	movs	r0, r3
 80157cc:	f7fe fb74 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 80157d0:	4bcb      	ldr	r3, [pc, #812]	; (8015b00 <_itsdk_secStore_consolePriv+0x390>)
 80157d2:	0018      	movs	r0, r3
 80157d4:	f7fe fb70 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 80157d8:	4bca      	ldr	r3, [pc, #808]	; (8015b04 <_itsdk_secStore_consolePriv+0x394>)
 80157da:	0018      	movs	r0, r3
 80157dc:	f7fe fb6c 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 80157e0:	4bc9      	ldr	r3, [pc, #804]	; (8015b08 <_itsdk_secStore_consolePriv+0x398>)
 80157e2:	0018      	movs	r0, r3
 80157e4:	f7fe fb68 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 80157e8:	4bc8      	ldr	r3, [pc, #800]	; (8015b0c <_itsdk_secStore_consolePriv+0x39c>)
 80157ea:	0018      	movs	r0, r3
 80157ec:	f7fe fb64 	bl	8013eb8 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80157f0:	2300      	movs	r3, #0
 80157f2:	e19a      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 80157f4:	1cfb      	adds	r3, r7, #3
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	2b03      	cmp	r3, #3
 80157fa:	d800      	bhi.n	80157fe <_itsdk_secStore_consolePriv+0x8e>
 80157fc:	e194      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	2b73      	cmp	r3, #115	; 0x73
 8015804:	d000      	beq.n	8015808 <_itsdk_secStore_consolePriv+0x98>
 8015806:	e096      	b.n	8015936 <_itsdk_secStore_consolePriv+0x1c6>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3301      	adds	r3, #1
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	2b73      	cmp	r3, #115	; 0x73
 8015810:	d000      	beq.n	8015814 <_itsdk_secStore_consolePriv+0xa4>
 8015812:	e090      	b.n	8015936 <_itsdk_secStore_consolePriv+0x1c6>
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	3302      	adds	r3, #2
 8015818:	781b      	ldrb	r3, [r3, #0]
 801581a:	2b3a      	cmp	r3, #58	; 0x3a
 801581c:	d000      	beq.n	8015820 <_itsdk_secStore_consolePriv+0xb0>
 801581e:	e08a      	b.n	8015936 <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	3303      	adds	r3, #3
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	3b39      	subs	r3, #57	; 0x39
 8015828:	2b28      	cmp	r3, #40	; 0x28
 801582a:	d900      	bls.n	801582e <_itsdk_secStore_consolePriv+0xbe>
 801582c:	e085      	b.n	801593a <_itsdk_secStore_consolePriv+0x1ca>
 801582e:	009a      	lsls	r2, r3, #2
 8015830:	4bb7      	ldr	r3, [pc, #732]	; (8015b10 <_itsdk_secStore_consolePriv+0x3a0>)
 8015832:	18d3      	adds	r3, r2, r3
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 8015838:	2337      	movs	r3, #55	; 0x37
 801583a:	18fb      	adds	r3, r7, r3
 801583c:	2200      	movs	r2, #0
 801583e:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 8015840:	2001      	movs	r0, #1
 8015842:	f001 ff05 	bl	8017650 <itsdk_lorawan_resetFactoryDefaults>
 8015846:	1e03      	subs	r3, r0, #0
 8015848:	d003      	beq.n	8015852 <_itsdk_secStore_consolePriv+0xe2>
 801584a:	2337      	movs	r3, #55	; 0x37
 801584c:	18fb      	adds	r3, r7, r3
 801584e:	2201      	movs	r2, #1
 8015850:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 8015852:	2337      	movs	r3, #55	; 0x37
 8015854:	18fb      	adds	r3, r7, r3
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d105      	bne.n	8015868 <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 801585c:	4bad      	ldr	r3, [pc, #692]	; (8015b14 <_itsdk_secStore_consolePriv+0x3a4>)
 801585e:	0018      	movs	r0, r3
 8015860:	f7fe fb2a 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8015864:	2300      	movs	r3, #0
 8015866:	e160      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 8015868:	4bab      	ldr	r3, [pc, #684]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 801586a:	0018      	movs	r0, r3
 801586c:	f7fe fb24 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8015870:	2302      	movs	r3, #2
 8015872:	e15a      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 8015874:	2001      	movs	r0, #1
 8015876:	f001 feeb 	bl	8017650 <itsdk_lorawan_resetFactoryDefaults>
 801587a:	1e03      	subs	r3, r0, #0
 801587c:	d105      	bne.n	801588a <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 801587e:	4ba5      	ldr	r3, [pc, #660]	; (8015b14 <_itsdk_secStore_consolePriv+0x3a4>)
 8015880:	0018      	movs	r0, r3
 8015882:	f7fe fb19 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8015886:	2300      	movs	r3, #0
 8015888:	e14f      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801588a:	4ba3      	ldr	r3, [pc, #652]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 801588c:	0018      	movs	r0, r3
 801588e:	f7fe fb13 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8015892:	2302      	movs	r3, #2
 8015894:	e149      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 8015896:	230c      	movs	r3, #12
 8015898:	18fb      	adds	r3, r7, r3
 801589a:	0019      	movs	r1, r3
 801589c:	2007      	movs	r0, #7
 801589e:	f7ff fc53 	bl	8015148 <itsdk_secstore_readBlock>
 80158a2:	1e03      	subs	r3, r0, #0
 80158a4:	d119      	bne.n	80158da <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 80158a6:	2300      	movs	r3, #0
 80158a8:	633b      	str	r3, [r7, #48]	; 0x30
 80158aa:	e00d      	b.n	80158c8 <_itsdk_secStore_consolePriv+0x158>
 80158ac:	230c      	movs	r3, #12
 80158ae:	18fa      	adds	r2, r7, r3
 80158b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b2:	18d3      	adds	r3, r2, r3
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	001a      	movs	r2, r3
 80158b8:	4b98      	ldr	r3, [pc, #608]	; (8015b1c <_itsdk_secStore_consolePriv+0x3ac>)
 80158ba:	0011      	movs	r1, r2
 80158bc:	0018      	movs	r0, r3
 80158be:	f7fe fafb 	bl	8013eb8 <_itsdk_console_printf>
 80158c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c4:	3301      	adds	r3, #1
 80158c6:	633b      	str	r3, [r7, #48]	; 0x30
 80158c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ca:	2b07      	cmp	r3, #7
 80158cc:	ddee      	ble.n	80158ac <_itsdk_secStore_consolePriv+0x13c>
 80158ce:	4b94      	ldr	r3, [pc, #592]	; (8015b20 <_itsdk_secStore_consolePriv+0x3b0>)
 80158d0:	0018      	movs	r0, r3
 80158d2:	f7fe faf1 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 80158d6:	2300      	movs	r3, #0
 80158d8:	e127      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 80158da:	4b8f      	ldr	r3, [pc, #572]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 80158dc:	0018      	movs	r0, r3
 80158de:	f7fe faeb 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80158e2:	2302      	movs	r3, #2
 80158e4:	e121      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 80158e6:	230c      	movs	r3, #12
 80158e8:	18fb      	adds	r3, r7, r3
 80158ea:	0019      	movs	r1, r3
 80158ec:	2007      	movs	r0, #7
 80158ee:	f7ff fc2b 	bl	8015148 <itsdk_secstore_readBlock>
 80158f2:	1e03      	subs	r3, r0, #0
 80158f4:	d119      	bne.n	801592a <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 80158f6:	2308      	movs	r3, #8
 80158f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158fa:	e00d      	b.n	8015918 <_itsdk_secStore_consolePriv+0x1a8>
 80158fc:	230c      	movs	r3, #12
 80158fe:	18fa      	adds	r2, r7, r3
 8015900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015902:	18d3      	adds	r3, r2, r3
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	001a      	movs	r2, r3
 8015908:	4b84      	ldr	r3, [pc, #528]	; (8015b1c <_itsdk_secStore_consolePriv+0x3ac>)
 801590a:	0011      	movs	r1, r2
 801590c:	0018      	movs	r0, r3
 801590e:	f7fe fad3 	bl	8013eb8 <_itsdk_console_printf>
 8015912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015914:	3301      	adds	r3, #1
 8015916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591a:	2b0f      	cmp	r3, #15
 801591c:	ddee      	ble.n	80158fc <_itsdk_secStore_consolePriv+0x18c>
 801591e:	4b80      	ldr	r3, [pc, #512]	; (8015b20 <_itsdk_secStore_consolePriv+0x3b0>)
 8015920:	0018      	movs	r0, r3
 8015922:	f7fe fac9 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8015926:	2300      	movs	r3, #0
 8015928:	e0ff      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801592a:	4b7b      	ldr	r3, [pc, #492]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 801592c:	0018      	movs	r0, r3
 801592e:	f7fe fac3 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8015932:	2302      	movs	r3, #2
 8015934:	e0f9      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 8015936:	46c0      	nop			; (mov r8, r8)
 8015938:	e000      	b.n	801593c <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 801593a:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	2b53      	cmp	r3, #83	; 0x53
 8015942:	d000      	beq.n	8015946 <_itsdk_secStore_consolePriv+0x1d6>
 8015944:	e0f0      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	3301      	adds	r3, #1
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	2b53      	cmp	r3, #83	; 0x53
 801594e:	d000      	beq.n	8015952 <_itsdk_secStore_consolePriv+0x1e2>
 8015950:	e0ea      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	3302      	adds	r3, #2
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	2b3a      	cmp	r3, #58	; 0x3a
 801595a:	d000      	beq.n	801595e <_itsdk_secStore_consolePriv+0x1ee>
 801595c:	e0e4      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	3304      	adds	r3, #4
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b3a      	cmp	r3, #58	; 0x3a
 8015966:	d000      	beq.n	801596a <_itsdk_secStore_consolePriv+0x1fa>
 8015968:	e0de      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 801596a:	1cfb      	adds	r3, r7, #3
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	3b05      	subs	r3, #5
 8015970:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	3303      	adds	r3, #3
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	3b30      	subs	r3, #48	; 0x30
 801597a:	2b34      	cmp	r3, #52	; 0x34
 801597c:	d900      	bls.n	8015980 <_itsdk_secStore_consolePriv+0x210>
 801597e:	e0d3      	b.n	8015b28 <_itsdk_secStore_consolePriv+0x3b8>
 8015980:	009a      	lsls	r2, r3, #2
 8015982:	4b68      	ldr	r3, [pc, #416]	; (8015b24 <_itsdk_secStore_consolePriv+0x3b4>)
 8015984:	18d3      	adds	r3, r2, r3
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 801598a:	1cfb      	adds	r3, r7, #3
 801598c:	781a      	ldrb	r2, [r3, #0]
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	230c      	movs	r3, #12
 8015992:	18fb      	adds	r3, r7, r3
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	230c      	movs	r3, #12
 8015998:	2105      	movs	r1, #5
 801599a:	f7ff fdd7 	bl	801554c <__checkAndConvert>
 801599e:	1e03      	subs	r3, r0, #0
 80159a0:	d006      	beq.n	80159b0 <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 80159a2:	230c      	movs	r3, #12
 80159a4:	18fb      	adds	r3, r7, r3
 80159a6:	0018      	movs	r0, r3
 80159a8:	f7ff fd2a 	bl	8015400 <_itsk_secstore_rekey>
 80159ac:	0003      	movs	r3, r0
 80159ae:	e0bc      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 80159b0:	4b59      	ldr	r3, [pc, #356]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 80159b2:	0018      	movs	r0, r3
 80159b4:	f7fe fa80 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80159b8:	2302      	movs	r3, #2
 80159ba:	e0b6      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	2b0f      	cmp	r3, #15
 80159c0:	dd05      	ble.n	80159ce <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 80159c2:	4b55      	ldr	r3, [pc, #340]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 80159c4:	0018      	movs	r0, r3
 80159c6:	f7fe fa77 	bl	8013eb8 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80159ca:	2302      	movs	r3, #2
 80159cc:	e0ad      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 80159ce:	2300      	movs	r3, #0
 80159d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80159d2:	e00d      	b.n	80159f0 <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 80159d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d6:	3305      	adds	r3, #5
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	18d3      	adds	r3, r2, r3
 80159dc:	7819      	ldrb	r1, [r3, #0]
 80159de:	230c      	movs	r3, #12
 80159e0:	18fa      	adds	r2, r7, r3
 80159e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e4:	18d3      	adds	r3, r2, r3
 80159e6:	1c0a      	adds	r2, r1, #0
 80159e8:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 80159ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ec:	3301      	adds	r3, #1
 80159ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80159f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159f2:	69fb      	ldr	r3, [r7, #28]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	dbed      	blt.n	80159d4 <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	627b      	str	r3, [r7, #36]	; 0x24
 80159fc:	e008      	b.n	8015a10 <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 80159fe:	230c      	movs	r3, #12
 8015a00:	18fa      	adds	r2, r7, r3
 8015a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a04:	18d3      	adds	r3, r2, r3
 8015a06:	2200      	movs	r2, #0
 8015a08:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8015a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a12:	2b0f      	cmp	r3, #15
 8015a14:	ddf3      	ble.n	80159fe <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 8015a16:	230c      	movs	r3, #12
 8015a18:	18fb      	adds	r3, r7, r3
 8015a1a:	0019      	movs	r1, r3
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	f7ff fbe0 	bl	80151e2 <itsdk_secstore_writeBlock>
 8015a22:	1e03      	subs	r3, r0, #0
 8015a24:	d105      	bne.n	8015a32 <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 8015a26:	4b3b      	ldr	r3, [pc, #236]	; (8015b14 <_itsdk_secStore_consolePriv+0x3a4>)
 8015a28:	0018      	movs	r0, r3
 8015a2a:	f7fe fa45 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	e07b      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 8015a32:	4b39      	ldr	r3, [pc, #228]	; (8015b18 <_itsdk_secStore_consolePriv+0x3a8>)
 8015a34:	0018      	movs	r0, r3
 8015a36:	f7fe fa3f 	bl	8013eb8 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8015a3a:	2302      	movs	r3, #2
 8015a3c:	e075      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 8015a3e:	230c      	movs	r3, #12
 8015a40:	18fa      	adds	r2, r7, r3
 8015a42:	1cfb      	adds	r3, r7, #3
 8015a44:	7819      	ldrb	r1, [r3, #0]
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	2308      	movs	r3, #8
 8015a4a:	9301      	str	r3, [sp, #4]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	9300      	str	r3, [sp, #0]
 8015a50:	2307      	movs	r3, #7
 8015a52:	f7ff fe19 	bl	8015688 <__updateField2>
 8015a56:	0003      	movs	r3, r0
 8015a58:	e067      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 8015a5a:	230c      	movs	r3, #12
 8015a5c:	18fa      	adds	r2, r7, r3
 8015a5e:	1cfb      	adds	r3, r7, #3
 8015a60:	7819      	ldrb	r1, [r3, #0]
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	2308      	movs	r3, #8
 8015a66:	9301      	str	r3, [sp, #4]
 8015a68:	2308      	movs	r3, #8
 8015a6a:	9300      	str	r3, [sp, #0]
 8015a6c:	2307      	movs	r3, #7
 8015a6e:	f7ff fe0b 	bl	8015688 <__updateField2>
 8015a72:	0003      	movs	r3, r0
 8015a74:	e059      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8015a76:	230c      	movs	r3, #12
 8015a78:	18fa      	adds	r2, r7, r3
 8015a7a:	1cfb      	adds	r3, r7, #3
 8015a7c:	7819      	ldrb	r1, [r3, #0]
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	2308      	movs	r3, #8
 8015a82:	f7ff fdb9 	bl	80155f8 <__updateField>
 8015a86:	0003      	movs	r3, r0
 8015a88:	e04f      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 8015a8a:	230c      	movs	r3, #12
 8015a8c:	18fa      	adds	r2, r7, r3
 8015a8e:	1cfb      	adds	r3, r7, #3
 8015a90:	7819      	ldrb	r1, [r3, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	2309      	movs	r3, #9
 8015a96:	f7ff fdaf 	bl	80155f8 <__updateField>
 8015a9a:	0003      	movs	r3, r0
 8015a9c:	e045      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 8015a9e:	2523      	movs	r5, #35	; 0x23
 8015aa0:	197c      	adds	r4, r7, r5
 8015aa2:	230c      	movs	r3, #12
 8015aa4:	18fa      	adds	r2, r7, r3
 8015aa6:	1cfb      	adds	r3, r7, #3
 8015aa8:	7819      	ldrb	r1, [r3, #0]
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	2309      	movs	r3, #9
 8015aae:	f7ff fda3 	bl	80155f8 <__updateField>
 8015ab2:	0003      	movs	r3, r0
 8015ab4:	7023      	strb	r3, [r4, #0]
 8015ab6:	197b      	adds	r3, r7, r5
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d10b      	bne.n	8015ad6 <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8015abe:	2323      	movs	r3, #35	; 0x23
 8015ac0:	18fc      	adds	r4, r7, r3
 8015ac2:	230c      	movs	r3, #12
 8015ac4:	18fa      	adds	r2, r7, r3
 8015ac6:	1cfb      	adds	r3, r7, #3
 8015ac8:	7819      	ldrb	r1, [r3, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	2308      	movs	r3, #8
 8015ace:	f7ff fd93 	bl	80155f8 <__updateField>
 8015ad2:	0003      	movs	r3, r0
 8015ad4:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 8015ad6:	2323      	movs	r3, #35	; 0x23
 8015ad8:	18fb      	adds	r3, r7, r3
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	e025      	b.n	8015b2a <_itsdk_secStore_consolePriv+0x3ba>
 8015ade:	46c0      	nop			; (mov r8, r8)
 8015ae0:	0801b354 	.word	0x0801b354
 8015ae4:	0801b368 	.word	0x0801b368
 8015ae8:	0801b39c 	.word	0x0801b39c
 8015aec:	0801b3d4 	.word	0x0801b3d4
 8015af0:	0801b410 	.word	0x0801b410
 8015af4:	0801b43c 	.word	0x0801b43c
 8015af8:	0801b46c 	.word	0x0801b46c
 8015afc:	0801b49c 	.word	0x0801b49c
 8015b00:	0801b4cc 	.word	0x0801b4cc
 8015b04:	0801b4fc 	.word	0x0801b4fc
 8015b08:	0801b530 	.word	0x0801b530
 8015b0c:	0801b564 	.word	0x0801b564
 8015b10:	0801bfdc 	.word	0x0801bfdc
 8015b14:	0801b34c 	.word	0x0801b34c
 8015b18:	0801b344 	.word	0x0801b344
 8015b1c:	0801b598 	.word	0x0801b598
 8015b20:	0801b5a0 	.word	0x0801b5a0
 8015b24:	0801c080 	.word	0x0801c080
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 8015b28:	2301      	movs	r3, #1
}
 8015b2a:	0018      	movs	r0, r3
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	b00e      	add	sp, #56	; 0x38
 8015b30:	bdb0      	pop	{r4, r5, r7, pc}
 8015b32:	46c0      	nop			; (mov r8, r8)

08015b34 <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 8015b34:	b580      	push	{r7, lr}
 8015b36:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 8015b38:	4b08      	ldr	r3, [pc, #32]	; (8015b5c <itsdk_secStore_RegisterConsole+0x28>)
 8015b3a:	4a09      	ldr	r2, [pc, #36]	; (8015b60 <itsdk_secStore_RegisterConsole+0x2c>)
 8015b3c:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 8015b3e:	4b07      	ldr	r3, [pc, #28]	; (8015b5c <itsdk_secStore_RegisterConsole+0x28>)
 8015b40:	2200      	movs	r2, #0
 8015b42:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 8015b44:	4b05      	ldr	r3, [pc, #20]	; (8015b5c <itsdk_secStore_RegisterConsole+0x28>)
 8015b46:	2200      	movs	r2, #0
 8015b48:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 8015b4a:	4b04      	ldr	r3, [pc, #16]	; (8015b5c <itsdk_secStore_RegisterConsole+0x28>)
 8015b4c:	0018      	movs	r0, r3
 8015b4e:	f7fe fb73 	bl	8014238 <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 8015b52:	2300      	movs	r3, #0
}
 8015b54:	0018      	movs	r0, r3
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd80      	pop	{r7, pc}
 8015b5a:	46c0      	nop			; (mov r8, r8)
 8015b5c:	20000d0c 	.word	0x20000d0c
 8015b60:	08015771 	.word	0x08015771

08015b64 <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8015b64:	b5b0      	push	{r4, r5, r7, lr}
 8015b66:	b0b8      	sub	sp, #224	; 0xe0
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	60f8      	str	r0, [r7, #12]
 8015b6c:	60b9      	str	r1, [r7, #8]
 8015b6e:	603b      	str	r3, [r7, #0]
 8015b70:	1dfb      	adds	r3, r7, #7
 8015b72:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	2110      	movs	r1, #16
 8015b78:	0018      	movs	r0, r3
 8015b7a:	f000 f8cd 	bl	8015d18 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8015b7e:	24d0      	movs	r4, #208	; 0xd0
 8015b80:	193a      	adds	r2, r7, r4
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	0010      	movs	r0, r2
 8015b86:	0019      	movs	r1, r3
 8015b88:	2310      	movs	r3, #16
 8015b8a:	001a      	movs	r2, r3
 8015b8c:	f004 f9ec 	bl	8019f68 <memcpy>
	bzero(ctx.Iv,16);
 8015b90:	2510      	movs	r5, #16
 8015b92:	197b      	adds	r3, r7, r5
 8015b94:	33b0      	adds	r3, #176	; 0xb0
 8015b96:	2110      	movs	r1, #16
 8015b98:	0018      	movs	r0, r3
 8015b9a:	f004 f9b4 	bl	8019f06 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8015b9e:	683a      	ldr	r2, [r7, #0]
 8015ba0:	197b      	adds	r3, r7, r5
 8015ba2:	0011      	movs	r1, r2
 8015ba4:	0018      	movs	r0, r3
 8015ba6:	f000 f9c5 	bl	8015f34 <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 8015baa:	1939      	adds	r1, r7, r4
 8015bac:	197b      	adds	r3, r7, r5
 8015bae:	2210      	movs	r2, #16
 8015bb0:	0018      	movs	r0, r3
 8015bb2:	f001 f8d8 	bl	8016d66 <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	2110      	movs	r1, #16
 8015bba:	0018      	movs	r0, r3
 8015bbc:	f000 f856 	bl	8015c6c <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8015bc0:	68ba      	ldr	r2, [r7, #8]
 8015bc2:	193b      	adds	r3, r7, r4
 8015bc4:	0010      	movs	r0, r2
 8015bc6:	0019      	movs	r1, r3
 8015bc8:	2310      	movs	r3, #16
 8015bca:	001a      	movs	r2, r3
 8015bcc:	f004 f9cc 	bl	8019f68 <memcpy>
	bzero(aesResult,16);
 8015bd0:	193b      	adds	r3, r7, r4
 8015bd2:	2110      	movs	r1, #16
 8015bd4:	0018      	movs	r0, r3
 8015bd6:	f004 f996 	bl	8019f06 <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 8015bda:	197b      	adds	r3, r7, r5
 8015bdc:	21c0      	movs	r1, #192	; 0xc0
 8015bde:	0018      	movs	r0, r3
 8015be0:	f004 f991 	bl	8019f06 <bzero>
}
 8015be4:	46c0      	nop			; (mov r8, r8)
 8015be6:	46bd      	mov	sp, r7
 8015be8:	b038      	add	sp, #224	; 0xe0
 8015bea:	bdb0      	pop	{r4, r5, r7, pc}

08015bec <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8015bec:	b5b0      	push	{r4, r5, r7, lr}
 8015bee:	b0b8      	sub	sp, #224	; 0xe0
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	603b      	str	r3, [r7, #0]
 8015bf8:	1dfb      	adds	r3, r7, #7
 8015bfa:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	2110      	movs	r1, #16
 8015c00:	0018      	movs	r0, r3
 8015c02:	f000 f889 	bl	8015d18 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8015c06:	24d0      	movs	r4, #208	; 0xd0
 8015c08:	193a      	adds	r2, r7, r4
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	0010      	movs	r0, r2
 8015c0e:	0019      	movs	r1, r3
 8015c10:	2310      	movs	r3, #16
 8015c12:	001a      	movs	r2, r3
 8015c14:	f004 f9a8 	bl	8019f68 <memcpy>
	bzero(ctx.Iv,16);
 8015c18:	2510      	movs	r5, #16
 8015c1a:	197b      	adds	r3, r7, r5
 8015c1c:	33b0      	adds	r3, #176	; 0xb0
 8015c1e:	2110      	movs	r1, #16
 8015c20:	0018      	movs	r0, r3
 8015c22:	f004 f970 	bl	8019f06 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	197b      	adds	r3, r7, r5
 8015c2a:	0011      	movs	r1, r2
 8015c2c:	0018      	movs	r0, r3
 8015c2e:	f000 f981 	bl	8015f34 <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 8015c32:	1939      	adds	r1, r7, r4
 8015c34:	197b      	adds	r3, r7, r5
 8015c36:	2210      	movs	r2, #16
 8015c38:	0018      	movs	r0, r3
 8015c3a:	f001 f8c3 	bl	8016dc4 <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8015c3e:	683b      	ldr	r3, [r7, #0]
 8015c40:	2110      	movs	r1, #16
 8015c42:	0018      	movs	r0, r3
 8015c44:	f000 f812 	bl	8015c6c <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8015c48:	68ba      	ldr	r2, [r7, #8]
 8015c4a:	193b      	adds	r3, r7, r4
 8015c4c:	0010      	movs	r0, r2
 8015c4e:	0019      	movs	r1, r3
 8015c50:	2310      	movs	r3, #16
 8015c52:	001a      	movs	r2, r3
 8015c54:	f004 f988 	bl	8019f68 <memcpy>
	bzero(aesResult,16);
 8015c58:	193b      	adds	r3, r7, r4
 8015c5a:	2110      	movs	r1, #16
 8015c5c:	0018      	movs	r0, r3
 8015c5e:	f004 f952 	bl	8019f06 <bzero>
}
 8015c62:	46c0      	nop			; (mov r8, r8)
 8015c64:	46bd      	mov	sp, r7
 8015c66:	b038      	add	sp, #224	; 0xe0
 8015c68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015c6c <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	2203      	movs	r2, #3
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	dd06      	ble.n	8015c8e <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	4a23      	ldr	r2, [pc, #140]	; (8015d14 <itsdk_encrypt_cifferKey+0xa8>)
 8015c86:	0019      	movs	r1, r3
 8015c88:	0010      	movs	r0, r2
 8015c8a:	f001 f977 	bl	8016f7c <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 8015c8e:	2300      	movs	r3, #0
 8015c90:	60fb      	str	r3, [r7, #12]
 8015c92:	e037      	b.n	8015d04 <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	687a      	ldr	r2, [r7, #4]
 8015c98:	18d3      	adds	r3, r2, r3
 8015c9a:	781a      	ldrb	r2, [r3, #0]
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	6879      	ldr	r1, [r7, #4]
 8015ca0:	18cb      	adds	r3, r1, r3
 8015ca2:	2159      	movs	r1, #89	; 0x59
 8015ca4:	4249      	negs	r1, r1
 8015ca6:	404a      	eors	r2, r1
 8015ca8:	b2d2      	uxtb	r2, r2
 8015caa:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	18d3      	adds	r3, r2, r3
 8015cb4:	781a      	ldrb	r2, [r3, #0]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	6879      	ldr	r1, [r7, #4]
 8015cbc:	18cb      	adds	r3, r1, r3
 8015cbe:	2145      	movs	r1, #69	; 0x45
 8015cc0:	404a      	eors	r2, r1
 8015cc2:	b2d2      	uxtb	r2, r2
 8015cc4:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	3302      	adds	r3, #2
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	18d3      	adds	r3, r2, r3
 8015cce:	781a      	ldrb	r2, [r3, #0]
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	3302      	adds	r3, #2
 8015cd4:	6879      	ldr	r1, [r7, #4]
 8015cd6:	18cb      	adds	r3, r1, r3
 8015cd8:	2165      	movs	r1, #101	; 0x65
 8015cda:	4249      	negs	r1, r1
 8015cdc:	404a      	eors	r2, r1
 8015cde:	b2d2      	uxtb	r2, r2
 8015ce0:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	3303      	adds	r3, #3
 8015ce6:	687a      	ldr	r2, [r7, #4]
 8015ce8:	18d3      	adds	r3, r2, r3
 8015cea:	781a      	ldrb	r2, [r3, #0]
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	3303      	adds	r3, #3
 8015cf0:	6879      	ldr	r1, [r7, #4]
 8015cf2:	18cb      	adds	r3, r1, r3
 8015cf4:	213d      	movs	r1, #61	; 0x3d
 8015cf6:	4249      	negs	r1, r1
 8015cf8:	404a      	eors	r2, r1
 8015cfa:	b2d2      	uxtb	r2, r2
 8015cfc:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	3304      	adds	r3, #4
 8015d02:	60fb      	str	r3, [r7, #12]
 8015d04:	68fa      	ldr	r2, [r7, #12]
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	dbc3      	blt.n	8015c94 <itsdk_encrypt_cifferKey+0x28>
	}
}
 8015d0c:	46c0      	nop			; (mov r8, r8)
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	b004      	add	sp, #16
 8015d12:	bd80      	pop	{r7, pc}
 8015d14:	d0000020 	.word	0xd0000020

08015d18 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 8015d22:	683a      	ldr	r2, [r7, #0]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	0011      	movs	r1, r2
 8015d28:	0018      	movs	r0, r3
 8015d2a:	f7ff ff9f 	bl	8015c6c <itsdk_encrypt_cifferKey>
}
 8015d2e:	46c0      	nop			; (mov r8, r8)
 8015d30:	46bd      	mov	sp, r7
 8015d32:	b002      	add	sp, #8
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b082      	sub	sp, #8
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	0002      	movs	r2, r0
 8015d3e:	1dfb      	adds	r3, r7, #7
 8015d40:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 8015d42:	2300      	movs	r3, #0
}
 8015d44:	0018      	movs	r0, r3
 8015d46:	46bd      	mov	sp, r7
 8015d48:	b002      	add	sp, #8
 8015d4a:	bd80      	pop	{r7, pc}

08015d4c <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8015d4c:	b590      	push	{r4, r7, lr}
 8015d4e:	b089      	sub	sp, #36	; 0x24
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8015d56:	2300      	movs	r3, #0
 8015d58:	61fb      	str	r3, [r7, #28]
 8015d5a:	e030      	b.n	8015dbe <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	683a      	ldr	r2, [r7, #0]
 8015d62:	18d2      	adds	r2, r2, r3
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	009b      	lsls	r3, r3, #2
 8015d68:	6879      	ldr	r1, [r7, #4]
 8015d6a:	18cb      	adds	r3, r1, r3
 8015d6c:	7812      	ldrb	r2, [r2, #0]
 8015d6e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	009b      	lsls	r3, r3, #2
 8015d74:	3301      	adds	r3, #1
 8015d76:	683a      	ldr	r2, [r7, #0]
 8015d78:	18d2      	adds	r2, r2, r3
 8015d7a:	69fb      	ldr	r3, [r7, #28]
 8015d7c:	009b      	lsls	r3, r3, #2
 8015d7e:	3301      	adds	r3, #1
 8015d80:	6879      	ldr	r1, [r7, #4]
 8015d82:	18cb      	adds	r3, r1, r3
 8015d84:	7812      	ldrb	r2, [r2, #0]
 8015d86:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	3302      	adds	r3, #2
 8015d8e:	683a      	ldr	r2, [r7, #0]
 8015d90:	18d2      	adds	r2, r2, r3
 8015d92:	69fb      	ldr	r3, [r7, #28]
 8015d94:	009b      	lsls	r3, r3, #2
 8015d96:	3302      	adds	r3, #2
 8015d98:	6879      	ldr	r1, [r7, #4]
 8015d9a:	18cb      	adds	r3, r1, r3
 8015d9c:	7812      	ldrb	r2, [r2, #0]
 8015d9e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	3303      	adds	r3, #3
 8015da6:	683a      	ldr	r2, [r7, #0]
 8015da8:	18d2      	adds	r2, r2, r3
 8015daa:	69fb      	ldr	r3, [r7, #28]
 8015dac:	009b      	lsls	r3, r3, #2
 8015dae:	3303      	adds	r3, #3
 8015db0:	6879      	ldr	r1, [r7, #4]
 8015db2:	18cb      	adds	r3, r1, r3
 8015db4:	7812      	ldrb	r2, [r2, #0]
 8015db6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	3301      	adds	r3, #1
 8015dbc:	61fb      	str	r3, [r7, #28]
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	2b03      	cmp	r3, #3
 8015dc2:	d9cb      	bls.n	8015d5c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8015dc4:	2304      	movs	r3, #4
 8015dc6:	61fb      	str	r3, [r7, #28]
 8015dc8:	e0a4      	b.n	8015f14 <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	4a55      	ldr	r2, [pc, #340]	; (8015f24 <KeyExpansion+0x1d8>)
 8015dce:	4694      	mov	ip, r2
 8015dd0:	4463      	add	r3, ip
 8015dd2:	009b      	lsls	r3, r3, #2
 8015dd4:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8015dd6:	687a      	ldr	r2, [r7, #4]
 8015dd8:	69bb      	ldr	r3, [r7, #24]
 8015dda:	18d3      	adds	r3, r2, r3
 8015ddc:	781a      	ldrb	r2, [r3, #0]
 8015dde:	210c      	movs	r1, #12
 8015de0:	187b      	adds	r3, r7, r1
 8015de2:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8015de4:	69bb      	ldr	r3, [r7, #24]
 8015de6:	3301      	adds	r3, #1
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	18d3      	adds	r3, r2, r3
 8015dec:	781a      	ldrb	r2, [r3, #0]
 8015dee:	187b      	adds	r3, r7, r1
 8015df0:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8015df2:	69bb      	ldr	r3, [r7, #24]
 8015df4:	3302      	adds	r3, #2
 8015df6:	687a      	ldr	r2, [r7, #4]
 8015df8:	18d3      	adds	r3, r2, r3
 8015dfa:	781a      	ldrb	r2, [r3, #0]
 8015dfc:	187b      	adds	r3, r7, r1
 8015dfe:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8015e00:	69bb      	ldr	r3, [r7, #24]
 8015e02:	3303      	adds	r3, #3
 8015e04:	687a      	ldr	r2, [r7, #4]
 8015e06:	18d3      	adds	r3, r2, r3
 8015e08:	781a      	ldrb	r2, [r3, #0]
 8015e0a:	187b      	adds	r3, r7, r1
 8015e0c:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	2203      	movs	r2, #3
 8015e12:	4013      	ands	r3, r2
 8015e14:	d13b      	bne.n	8015e8e <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8015e16:	2117      	movs	r1, #23
 8015e18:	187b      	adds	r3, r7, r1
 8015e1a:	200c      	movs	r0, #12
 8015e1c:	183a      	adds	r2, r7, r0
 8015e1e:	7812      	ldrb	r2, [r2, #0]
 8015e20:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8015e22:	183b      	adds	r3, r7, r0
 8015e24:	785a      	ldrb	r2, [r3, #1]
 8015e26:	183b      	adds	r3, r7, r0
 8015e28:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 8015e2a:	183b      	adds	r3, r7, r0
 8015e2c:	789a      	ldrb	r2, [r3, #2]
 8015e2e:	183b      	adds	r3, r7, r0
 8015e30:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8015e32:	183b      	adds	r3, r7, r0
 8015e34:	78da      	ldrb	r2, [r3, #3]
 8015e36:	183b      	adds	r3, r7, r0
 8015e38:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 8015e3a:	183b      	adds	r3, r7, r0
 8015e3c:	187a      	adds	r2, r7, r1
 8015e3e:	7812      	ldrb	r2, [r2, #0]
 8015e40:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8015e42:	183b      	adds	r3, r7, r0
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	001a      	movs	r2, r3
 8015e48:	4b37      	ldr	r3, [pc, #220]	; (8015f28 <KeyExpansion+0x1dc>)
 8015e4a:	5c9a      	ldrb	r2, [r3, r2]
 8015e4c:	183b      	adds	r3, r7, r0
 8015e4e:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8015e50:	183b      	adds	r3, r7, r0
 8015e52:	785b      	ldrb	r3, [r3, #1]
 8015e54:	001a      	movs	r2, r3
 8015e56:	4b34      	ldr	r3, [pc, #208]	; (8015f28 <KeyExpansion+0x1dc>)
 8015e58:	5c9a      	ldrb	r2, [r3, r2]
 8015e5a:	183b      	adds	r3, r7, r0
 8015e5c:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 8015e5e:	183b      	adds	r3, r7, r0
 8015e60:	789b      	ldrb	r3, [r3, #2]
 8015e62:	001a      	movs	r2, r3
 8015e64:	4b30      	ldr	r3, [pc, #192]	; (8015f28 <KeyExpansion+0x1dc>)
 8015e66:	5c9a      	ldrb	r2, [r3, r2]
 8015e68:	183b      	adds	r3, r7, r0
 8015e6a:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 8015e6c:	183b      	adds	r3, r7, r0
 8015e6e:	78db      	ldrb	r3, [r3, #3]
 8015e70:	001a      	movs	r2, r3
 8015e72:	4b2d      	ldr	r3, [pc, #180]	; (8015f28 <KeyExpansion+0x1dc>)
 8015e74:	5c9a      	ldrb	r2, [r3, r2]
 8015e76:	183b      	adds	r3, r7, r0
 8015e78:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8015e7a:	183b      	adds	r3, r7, r0
 8015e7c:	781a      	ldrb	r2, [r3, #0]
 8015e7e:	69fb      	ldr	r3, [r7, #28]
 8015e80:	089b      	lsrs	r3, r3, #2
 8015e82:	492a      	ldr	r1, [pc, #168]	; (8015f2c <KeyExpansion+0x1e0>)
 8015e84:	5ccb      	ldrb	r3, [r1, r3]
 8015e86:	4053      	eors	r3, r2
 8015e88:	b2da      	uxtb	r2, r3
 8015e8a:	183b      	adds	r3, r7, r0
 8015e8c:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	613b      	str	r3, [r7, #16]
 8015e94:	69fb      	ldr	r3, [r7, #28]
 8015e96:	4a26      	ldr	r2, [pc, #152]	; (8015f30 <KeyExpansion+0x1e4>)
 8015e98:	4694      	mov	ip, r2
 8015e9a:	4463      	add	r3, ip
 8015e9c:	009b      	lsls	r3, r3, #2
 8015e9e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	69bb      	ldr	r3, [r7, #24]
 8015ea4:	18d3      	adds	r3, r2, r3
 8015ea6:	7819      	ldrb	r1, [r3, #0]
 8015ea8:	240c      	movs	r4, #12
 8015eaa:	193b      	adds	r3, r7, r4
 8015eac:	781a      	ldrb	r2, [r3, #0]
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	693b      	ldr	r3, [r7, #16]
 8015eb2:	18c3      	adds	r3, r0, r3
 8015eb4:	404a      	eors	r2, r1
 8015eb6:	b2d2      	uxtb	r2, r2
 8015eb8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	687a      	ldr	r2, [r7, #4]
 8015ec0:	18d3      	adds	r3, r2, r3
 8015ec2:	7819      	ldrb	r1, [r3, #0]
 8015ec4:	193b      	adds	r3, r7, r4
 8015ec6:	785a      	ldrb	r2, [r3, #1]
 8015ec8:	693b      	ldr	r3, [r7, #16]
 8015eca:	3301      	adds	r3, #1
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	18c3      	adds	r3, r0, r3
 8015ed0:	404a      	eors	r2, r1
 8015ed2:	b2d2      	uxtb	r2, r2
 8015ed4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8015ed6:	69bb      	ldr	r3, [r7, #24]
 8015ed8:	3302      	adds	r3, #2
 8015eda:	687a      	ldr	r2, [r7, #4]
 8015edc:	18d3      	adds	r3, r2, r3
 8015ede:	7819      	ldrb	r1, [r3, #0]
 8015ee0:	193b      	adds	r3, r7, r4
 8015ee2:	789a      	ldrb	r2, [r3, #2]
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	3302      	adds	r3, #2
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	18c3      	adds	r3, r0, r3
 8015eec:	404a      	eors	r2, r1
 8015eee:	b2d2      	uxtb	r2, r2
 8015ef0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8015ef2:	69bb      	ldr	r3, [r7, #24]
 8015ef4:	3303      	adds	r3, #3
 8015ef6:	687a      	ldr	r2, [r7, #4]
 8015ef8:	18d3      	adds	r3, r2, r3
 8015efa:	7819      	ldrb	r1, [r3, #0]
 8015efc:	193b      	adds	r3, r7, r4
 8015efe:	78da      	ldrb	r2, [r3, #3]
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	3303      	adds	r3, #3
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	18c3      	adds	r3, r0, r3
 8015f08:	404a      	eors	r2, r1
 8015f0a:	b2d2      	uxtb	r2, r2
 8015f0c:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	3301      	adds	r3, #1
 8015f12:	61fb      	str	r3, [r7, #28]
 8015f14:	69fb      	ldr	r3, [r7, #28]
 8015f16:	2b2b      	cmp	r3, #43	; 0x2b
 8015f18:	d800      	bhi.n	8015f1c <KeyExpansion+0x1d0>
 8015f1a:	e756      	b.n	8015dca <KeyExpansion+0x7e>
  }
}
 8015f1c:	46c0      	nop			; (mov r8, r8)
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	b009      	add	sp, #36	; 0x24
 8015f22:	bd90      	pop	{r4, r7, pc}
 8015f24:	3fffffff 	.word	0x3fffffff
 8015f28:	0801c154 	.word	0x0801c154
 8015f2c:	0801c354 	.word	0x0801c354
 8015f30:	3ffffffc 	.word	0x3ffffffc

08015f34 <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	683a      	ldr	r2, [r7, #0]
 8015f42:	0011      	movs	r1, r2
 8015f44:	0018      	movs	r0, r3
 8015f46:	f7ff ff01 	bl	8015d4c <KeyExpansion>
}
 8015f4a:	46c0      	nop			; (mov r8, r8)
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	b002      	add	sp, #8
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 8015f52:	b5b0      	push	{r4, r5, r7, lr}
 8015f54:	b086      	sub	sp, #24
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
 8015f5c:	230f      	movs	r3, #15
 8015f5e:	18fb      	adds	r3, r7, r3
 8015f60:	1c02      	adds	r2, r0, #0
 8015f62:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8015f64:	2317      	movs	r3, #23
 8015f66:	18fb      	adds	r3, r7, r3
 8015f68:	2200      	movs	r2, #0
 8015f6a:	701a      	strb	r2, [r3, #0]
 8015f6c:	e038      	b.n	8015fe0 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8015f6e:	2316      	movs	r3, #22
 8015f70:	18fb      	adds	r3, r7, r3
 8015f72:	2200      	movs	r2, #0
 8015f74:	701a      	strb	r2, [r3, #0]
 8015f76:	e028      	b.n	8015fca <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8015f78:	2517      	movs	r5, #23
 8015f7a:	197b      	adds	r3, r7, r5
 8015f7c:	781a      	ldrb	r2, [r3, #0]
 8015f7e:	2416      	movs	r4, #22
 8015f80:	193b      	adds	r3, r7, r4
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	68b9      	ldr	r1, [r7, #8]
 8015f86:	0092      	lsls	r2, r2, #2
 8015f88:	188a      	adds	r2, r1, r2
 8015f8a:	5cd0      	ldrb	r0, [r2, r3]
 8015f8c:	230f      	movs	r3, #15
 8015f8e:	18fb      	adds	r3, r7, r3
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	009a      	lsls	r2, r3, #2
 8015f94:	197b      	adds	r3, r7, r5
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	18d3      	adds	r3, r2, r3
 8015f9a:	009a      	lsls	r2, r3, #2
 8015f9c:	193b      	adds	r3, r7, r4
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	18d3      	adds	r3, r2, r3
 8015fa2:	001a      	movs	r2, r3
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	189b      	adds	r3, r3, r2
 8015fa8:	7819      	ldrb	r1, [r3, #0]
 8015faa:	197b      	adds	r3, r7, r5
 8015fac:	781a      	ldrb	r2, [r3, #0]
 8015fae:	193b      	adds	r3, r7, r4
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	4041      	eors	r1, r0
 8015fb4:	b2c8      	uxtb	r0, r1
 8015fb6:	68b9      	ldr	r1, [r7, #8]
 8015fb8:	0092      	lsls	r2, r2, #2
 8015fba:	188a      	adds	r2, r1, r2
 8015fbc:	1c01      	adds	r1, r0, #0
 8015fbe:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8015fc0:	193b      	adds	r3, r7, r4
 8015fc2:	193a      	adds	r2, r7, r4
 8015fc4:	7812      	ldrb	r2, [r2, #0]
 8015fc6:	3201      	adds	r2, #1
 8015fc8:	701a      	strb	r2, [r3, #0]
 8015fca:	2316      	movs	r3, #22
 8015fcc:	18fb      	adds	r3, r7, r3
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	2b03      	cmp	r3, #3
 8015fd2:	d9d1      	bls.n	8015f78 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 8015fd4:	2217      	movs	r2, #23
 8015fd6:	18bb      	adds	r3, r7, r2
 8015fd8:	18ba      	adds	r2, r7, r2
 8015fda:	7812      	ldrb	r2, [r2, #0]
 8015fdc:	3201      	adds	r2, #1
 8015fde:	701a      	strb	r2, [r3, #0]
 8015fe0:	2317      	movs	r3, #23
 8015fe2:	18fb      	adds	r3, r7, r3
 8015fe4:	781b      	ldrb	r3, [r3, #0]
 8015fe6:	2b03      	cmp	r3, #3
 8015fe8:	d9c1      	bls.n	8015f6e <AddRoundKey+0x1c>
    }
  }
}
 8015fea:	46c0      	nop			; (mov r8, r8)
 8015fec:	46bd      	mov	sp, r7
 8015fee:	b006      	add	sp, #24
 8015ff0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015ff4 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8015ff4:	b5b0      	push	{r4, r5, r7, lr}
 8015ff6:	b084      	sub	sp, #16
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8015ffc:	230f      	movs	r3, #15
 8015ffe:	18fb      	adds	r3, r7, r3
 8016000:	2200      	movs	r2, #0
 8016002:	701a      	strb	r2, [r3, #0]
 8016004:	e02a      	b.n	801605c <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8016006:	230e      	movs	r3, #14
 8016008:	18fb      	adds	r3, r7, r3
 801600a:	2200      	movs	r2, #0
 801600c:	701a      	strb	r2, [r3, #0]
 801600e:	e01a      	b.n	8016046 <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8016010:	240e      	movs	r4, #14
 8016012:	193b      	adds	r3, r7, r4
 8016014:	781a      	ldrb	r2, [r3, #0]
 8016016:	250f      	movs	r5, #15
 8016018:	197b      	adds	r3, r7, r5
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	6879      	ldr	r1, [r7, #4]
 801601e:	0092      	lsls	r2, r2, #2
 8016020:	188a      	adds	r2, r1, r2
 8016022:	5cd3      	ldrb	r3, [r2, r3]
 8016024:	0018      	movs	r0, r3
 8016026:	193b      	adds	r3, r7, r4
 8016028:	781a      	ldrb	r2, [r3, #0]
 801602a:	197b      	adds	r3, r7, r5
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	4910      	ldr	r1, [pc, #64]	; (8016070 <SubBytes+0x7c>)
 8016030:	5c08      	ldrb	r0, [r1, r0]
 8016032:	6879      	ldr	r1, [r7, #4]
 8016034:	0092      	lsls	r2, r2, #2
 8016036:	188a      	adds	r2, r1, r2
 8016038:	1c01      	adds	r1, r0, #0
 801603a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801603c:	193b      	adds	r3, r7, r4
 801603e:	193a      	adds	r2, r7, r4
 8016040:	7812      	ldrb	r2, [r2, #0]
 8016042:	3201      	adds	r2, #1
 8016044:	701a      	strb	r2, [r3, #0]
 8016046:	230e      	movs	r3, #14
 8016048:	18fb      	adds	r3, r7, r3
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	2b03      	cmp	r3, #3
 801604e:	d9df      	bls.n	8016010 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8016050:	220f      	movs	r2, #15
 8016052:	18bb      	adds	r3, r7, r2
 8016054:	18ba      	adds	r2, r7, r2
 8016056:	7812      	ldrb	r2, [r2, #0]
 8016058:	3201      	adds	r2, #1
 801605a:	701a      	strb	r2, [r3, #0]
 801605c:	230f      	movs	r3, #15
 801605e:	18fb      	adds	r3, r7, r3
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	2b03      	cmp	r3, #3
 8016064:	d9cf      	bls.n	8016006 <SubBytes+0x12>
    }
  }
}
 8016066:	46c0      	nop			; (mov r8, r8)
 8016068:	46bd      	mov	sp, r7
 801606a:	b004      	add	sp, #16
 801606c:	bdb0      	pop	{r4, r5, r7, pc}
 801606e:	46c0      	nop			; (mov r8, r8)
 8016070:	0801c154 	.word	0x0801c154

08016074 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 801607c:	210f      	movs	r1, #15
 801607e:	187b      	adds	r3, r7, r1
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	7852      	ldrb	r2, [r2, #1]
 8016084:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	795a      	ldrb	r2, [r3, #5]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	7a5a      	ldrb	r2, [r3, #9]
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	7b5a      	ldrb	r2, [r3, #13]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	187a      	adds	r2, r7, r1
 80160a2:	7812      	ldrb	r2, [r2, #0]
 80160a4:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 80160a6:	187b      	adds	r3, r7, r1
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	7892      	ldrb	r2, [r2, #2]
 80160ac:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	7a9a      	ldrb	r2, [r3, #10]
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	187a      	adds	r2, r7, r1
 80160ba:	7812      	ldrb	r2, [r2, #0]
 80160bc:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80160be:	187b      	adds	r3, r7, r1
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	7992      	ldrb	r2, [r2, #6]
 80160c4:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	7b9a      	ldrb	r2, [r3, #14]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	187a      	adds	r2, r7, r1
 80160d2:	7812      	ldrb	r2, [r2, #0]
 80160d4:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80160d6:	187b      	adds	r3, r7, r1
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	78d2      	ldrb	r2, [r2, #3]
 80160dc:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	7bda      	ldrb	r2, [r3, #15]
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	7ada      	ldrb	r2, [r3, #11]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	79da      	ldrb	r2, [r3, #7]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	187a      	adds	r2, r7, r1
 80160fa:	7812      	ldrb	r2, [r2, #0]
 80160fc:	71da      	strb	r2, [r3, #7]
}
 80160fe:	46c0      	nop			; (mov r8, r8)
 8016100:	46bd      	mov	sp, r7
 8016102:	b004      	add	sp, #16
 8016104:	bd80      	pop	{r7, pc}

08016106 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8016106:	b580      	push	{r7, lr}
 8016108:	b082      	sub	sp, #8
 801610a:	af00      	add	r7, sp, #0
 801610c:	0002      	movs	r2, r0
 801610e:	1dfb      	adds	r3, r7, #7
 8016110:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8016112:	1dfb      	adds	r3, r7, #7
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	005b      	lsls	r3, r3, #1
 8016118:	b25a      	sxtb	r2, r3
 801611a:	1dfb      	adds	r3, r7, #7
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	09db      	lsrs	r3, r3, #7
 8016120:	b2db      	uxtb	r3, r3
 8016122:	1c19      	adds	r1, r3, #0
 8016124:	1c0b      	adds	r3, r1, #0
 8016126:	18db      	adds	r3, r3, r3
 8016128:	185b      	adds	r3, r3, r1
 801612a:	1c19      	adds	r1, r3, #0
 801612c:	00c8      	lsls	r0, r1, #3
 801612e:	1c19      	adds	r1, r3, #0
 8016130:	1c03      	adds	r3, r0, #0
 8016132:	18cb      	adds	r3, r1, r3
 8016134:	b2db      	uxtb	r3, r3
 8016136:	b25b      	sxtb	r3, r3
 8016138:	4053      	eors	r3, r2
 801613a:	b25b      	sxtb	r3, r3
 801613c:	b2db      	uxtb	r3, r3
}
 801613e:	0018      	movs	r0, r3
 8016140:	46bd      	mov	sp, r7
 8016142:	b002      	add	sp, #8
 8016144:	bd80      	pop	{r7, pc}

08016146 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8016146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016148:	b085      	sub	sp, #20
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 801614e:	230f      	movs	r3, #15
 8016150:	18fb      	adds	r3, r7, r3
 8016152:	2200      	movs	r2, #0
 8016154:	701a      	strb	r2, [r3, #0]
 8016156:	e0f0      	b.n	801633a <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 8016158:	250f      	movs	r5, #15
 801615a:	197b      	adds	r3, r7, r5
 801615c:	7819      	ldrb	r1, [r3, #0]
 801615e:	230e      	movs	r3, #14
 8016160:	18fb      	adds	r3, r7, r3
 8016162:	687a      	ldr	r2, [r7, #4]
 8016164:	0089      	lsls	r1, r1, #2
 8016166:	5c8a      	ldrb	r2, [r1, r2]
 8016168:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 801616a:	197b      	adds	r3, r7, r5
 801616c:	781a      	ldrb	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	0092      	lsls	r2, r2, #2
 8016172:	5cd2      	ldrb	r2, [r2, r3]
 8016174:	197b      	adds	r3, r7, r5
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	6879      	ldr	r1, [r7, #4]
 801617a:	009b      	lsls	r3, r3, #2
 801617c:	18cb      	adds	r3, r1, r3
 801617e:	3301      	adds	r3, #1
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	4053      	eors	r3, r2
 8016184:	b2da      	uxtb	r2, r3
 8016186:	197b      	adds	r3, r7, r5
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	6879      	ldr	r1, [r7, #4]
 801618c:	009b      	lsls	r3, r3, #2
 801618e:	18cb      	adds	r3, r1, r3
 8016190:	3302      	adds	r3, #2
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	4053      	eors	r3, r2
 8016196:	b2d9      	uxtb	r1, r3
 8016198:	197b      	adds	r3, r7, r5
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	687a      	ldr	r2, [r7, #4]
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	18d3      	adds	r3, r2, r3
 80161a2:	3303      	adds	r3, #3
 80161a4:	781a      	ldrb	r2, [r3, #0]
 80161a6:	230d      	movs	r3, #13
 80161a8:	18fb      	adds	r3, r7, r3
 80161aa:	404a      	eors	r2, r1
 80161ac:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80161ae:	197b      	adds	r3, r7, r5
 80161b0:	781a      	ldrb	r2, [r3, #0]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	0092      	lsls	r2, r2, #2
 80161b6:	5cd1      	ldrb	r1, [r2, r3]
 80161b8:	197b      	adds	r3, r7, r5
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	687a      	ldr	r2, [r7, #4]
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	18d3      	adds	r3, r2, r3
 80161c2:	3301      	adds	r3, #1
 80161c4:	781a      	ldrb	r2, [r3, #0]
 80161c6:	200c      	movs	r0, #12
 80161c8:	183b      	adds	r3, r7, r0
 80161ca:	404a      	eors	r2, r1
 80161cc:	701a      	strb	r2, [r3, #0]
 80161ce:	183c      	adds	r4, r7, r0
 80161d0:	0006      	movs	r6, r0
 80161d2:	183b      	adds	r3, r7, r0
 80161d4:	781b      	ldrb	r3, [r3, #0]
 80161d6:	0018      	movs	r0, r3
 80161d8:	f7ff ff95 	bl	8016106 <xtime>
 80161dc:	0003      	movs	r3, r0
 80161de:	7023      	strb	r3, [r4, #0]
 80161e0:	197b      	adds	r3, r7, r5
 80161e2:	781a      	ldrb	r2, [r3, #0]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	0092      	lsls	r2, r2, #2
 80161e8:	5cd1      	ldrb	r1, [r2, r3]
 80161ea:	0030      	movs	r0, r6
 80161ec:	183a      	adds	r2, r7, r0
 80161ee:	230d      	movs	r3, #13
 80161f0:	18fb      	adds	r3, r7, r3
 80161f2:	7812      	ldrb	r2, [r2, #0]
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	4053      	eors	r3, r2
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	197a      	adds	r2, r7, r5
 80161fc:	7812      	ldrb	r2, [r2, #0]
 80161fe:	404b      	eors	r3, r1
 8016200:	b2d9      	uxtb	r1, r3
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	0092      	lsls	r2, r2, #2
 8016206:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8016208:	197b      	adds	r3, r7, r5
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	18d3      	adds	r3, r2, r3
 8016212:	3301      	adds	r3, #1
 8016214:	7819      	ldrb	r1, [r3, #0]
 8016216:	197b      	adds	r3, r7, r5
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	18d3      	adds	r3, r2, r3
 8016220:	3302      	adds	r3, #2
 8016222:	781a      	ldrb	r2, [r3, #0]
 8016224:	183b      	adds	r3, r7, r0
 8016226:	404a      	eors	r2, r1
 8016228:	701a      	strb	r2, [r3, #0]
 801622a:	183c      	adds	r4, r7, r0
 801622c:	0006      	movs	r6, r0
 801622e:	183b      	adds	r3, r7, r0
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	0018      	movs	r0, r3
 8016234:	f7ff ff67 	bl	8016106 <xtime>
 8016238:	0003      	movs	r3, r0
 801623a:	7023      	strb	r3, [r4, #0]
 801623c:	197b      	adds	r3, r7, r5
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	687a      	ldr	r2, [r7, #4]
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	18d3      	adds	r3, r2, r3
 8016246:	3301      	adds	r3, #1
 8016248:	7819      	ldrb	r1, [r3, #0]
 801624a:	0030      	movs	r0, r6
 801624c:	183a      	adds	r2, r7, r0
 801624e:	230d      	movs	r3, #13
 8016250:	18fb      	adds	r3, r7, r3
 8016252:	7812      	ldrb	r2, [r2, #0]
 8016254:	781b      	ldrb	r3, [r3, #0]
 8016256:	4053      	eors	r3, r2
 8016258:	b2da      	uxtb	r2, r3
 801625a:	197b      	adds	r3, r7, r5
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	404a      	eors	r2, r1
 8016260:	b2d1      	uxtb	r1, r2
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	009b      	lsls	r3, r3, #2
 8016266:	18d3      	adds	r3, r2, r3
 8016268:	3301      	adds	r3, #1
 801626a:	1c0a      	adds	r2, r1, #0
 801626c:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 801626e:	197b      	adds	r3, r7, r5
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	009b      	lsls	r3, r3, #2
 8016276:	18d3      	adds	r3, r2, r3
 8016278:	3302      	adds	r3, #2
 801627a:	7819      	ldrb	r1, [r3, #0]
 801627c:	197b      	adds	r3, r7, r5
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	687a      	ldr	r2, [r7, #4]
 8016282:	009b      	lsls	r3, r3, #2
 8016284:	18d3      	adds	r3, r2, r3
 8016286:	3303      	adds	r3, #3
 8016288:	781a      	ldrb	r2, [r3, #0]
 801628a:	183b      	adds	r3, r7, r0
 801628c:	404a      	eors	r2, r1
 801628e:	701a      	strb	r2, [r3, #0]
 8016290:	183c      	adds	r4, r7, r0
 8016292:	0006      	movs	r6, r0
 8016294:	183b      	adds	r3, r7, r0
 8016296:	781b      	ldrb	r3, [r3, #0]
 8016298:	0018      	movs	r0, r3
 801629a:	f7ff ff34 	bl	8016106 <xtime>
 801629e:	0003      	movs	r3, r0
 80162a0:	7023      	strb	r3, [r4, #0]
 80162a2:	197b      	adds	r3, r7, r5
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	18d3      	adds	r3, r2, r3
 80162ac:	3302      	adds	r3, #2
 80162ae:	7819      	ldrb	r1, [r3, #0]
 80162b0:	0030      	movs	r0, r6
 80162b2:	183a      	adds	r2, r7, r0
 80162b4:	230d      	movs	r3, #13
 80162b6:	18fb      	adds	r3, r7, r3
 80162b8:	7812      	ldrb	r2, [r2, #0]
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	4053      	eors	r3, r2
 80162be:	b2da      	uxtb	r2, r3
 80162c0:	197b      	adds	r3, r7, r5
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	404a      	eors	r2, r1
 80162c6:	b2d1      	uxtb	r1, r2
 80162c8:	687a      	ldr	r2, [r7, #4]
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	18d3      	adds	r3, r2, r3
 80162ce:	3302      	adds	r3, #2
 80162d0:	1c0a      	adds	r2, r1, #0
 80162d2:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80162d4:	197b      	adds	r3, r7, r5
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	687a      	ldr	r2, [r7, #4]
 80162da:	009b      	lsls	r3, r3, #2
 80162dc:	18d3      	adds	r3, r2, r3
 80162de:	3303      	adds	r3, #3
 80162e0:	7819      	ldrb	r1, [r3, #0]
 80162e2:	183b      	adds	r3, r7, r0
 80162e4:	220e      	movs	r2, #14
 80162e6:	18ba      	adds	r2, r7, r2
 80162e8:	7812      	ldrb	r2, [r2, #0]
 80162ea:	404a      	eors	r2, r1
 80162ec:	701a      	strb	r2, [r3, #0]
 80162ee:	183c      	adds	r4, r7, r0
 80162f0:	0006      	movs	r6, r0
 80162f2:	183b      	adds	r3, r7, r0
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	0018      	movs	r0, r3
 80162f8:	f7ff ff05 	bl	8016106 <xtime>
 80162fc:	0003      	movs	r3, r0
 80162fe:	7023      	strb	r3, [r4, #0]
 8016300:	197b      	adds	r3, r7, r5
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	18d3      	adds	r3, r2, r3
 801630a:	3303      	adds	r3, #3
 801630c:	7819      	ldrb	r1, [r3, #0]
 801630e:	19ba      	adds	r2, r7, r6
 8016310:	230d      	movs	r3, #13
 8016312:	18fb      	adds	r3, r7, r3
 8016314:	7812      	ldrb	r2, [r2, #0]
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	4053      	eors	r3, r2
 801631a:	b2da      	uxtb	r2, r3
 801631c:	197b      	adds	r3, r7, r5
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	404a      	eors	r2, r1
 8016322:	b2d1      	uxtb	r1, r2
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	18d3      	adds	r3, r2, r3
 801632a:	3303      	adds	r3, #3
 801632c:	1c0a      	adds	r2, r1, #0
 801632e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8016330:	197b      	adds	r3, r7, r5
 8016332:	197a      	adds	r2, r7, r5
 8016334:	7812      	ldrb	r2, [r2, #0]
 8016336:	3201      	adds	r2, #1
 8016338:	701a      	strb	r2, [r3, #0]
 801633a:	230f      	movs	r3, #15
 801633c:	18fb      	adds	r3, r7, r3
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	2b03      	cmp	r3, #3
 8016342:	d800      	bhi.n	8016346 <MixColumns+0x200>
 8016344:	e708      	b.n	8016158 <MixColumns+0x12>
  }
}
 8016346:	46c0      	nop			; (mov r8, r8)
 8016348:	46bd      	mov	sp, r7
 801634a:	b005      	add	sp, #20
 801634c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801634e <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 801634e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016350:	b085      	sub	sp, #20
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8016356:	2300      	movs	r3, #0
 8016358:	60fb      	str	r3, [r7, #12]
 801635a:	e3c3      	b.n	8016ae4 <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 801635c:	260b      	movs	r6, #11
 801635e:	19bb      	adds	r3, r7, r6
 8016360:	687a      	ldr	r2, [r7, #4]
 8016362:	68f9      	ldr	r1, [r7, #12]
 8016364:	0089      	lsls	r1, r1, #2
 8016366:	5c8a      	ldrb	r2, [r1, r2]
 8016368:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 801636a:	250a      	movs	r5, #10
 801636c:	197b      	adds	r3, r7, r5
 801636e:	6879      	ldr	r1, [r7, #4]
 8016370:	68fa      	ldr	r2, [r7, #12]
 8016372:	0092      	lsls	r2, r2, #2
 8016374:	188a      	adds	r2, r1, r2
 8016376:	3201      	adds	r2, #1
 8016378:	7812      	ldrb	r2, [r2, #0]
 801637a:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 801637c:	2409      	movs	r4, #9
 801637e:	193b      	adds	r3, r7, r4
 8016380:	6879      	ldr	r1, [r7, #4]
 8016382:	68fa      	ldr	r2, [r7, #12]
 8016384:	0092      	lsls	r2, r2, #2
 8016386:	188a      	adds	r2, r1, r2
 8016388:	3202      	adds	r2, #2
 801638a:	7812      	ldrb	r2, [r2, #0]
 801638c:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 801638e:	2308      	movs	r3, #8
 8016390:	18fb      	adds	r3, r7, r3
 8016392:	6879      	ldr	r1, [r7, #4]
 8016394:	68fa      	ldr	r2, [r7, #12]
 8016396:	0092      	lsls	r2, r2, #2
 8016398:	188a      	adds	r2, r1, r2
 801639a:	3203      	adds	r2, #3
 801639c:	7812      	ldrb	r2, [r2, #0]
 801639e:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80163a0:	19bb      	adds	r3, r7, r6
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	0018      	movs	r0, r3
 80163a6:	f7ff feae 	bl	8016106 <xtime>
 80163aa:	0003      	movs	r3, r0
 80163ac:	0018      	movs	r0, r3
 80163ae:	f7ff feaa 	bl	8016106 <xtime>
 80163b2:	0003      	movs	r3, r0
 80163b4:	0018      	movs	r0, r3
 80163b6:	f7ff fea6 	bl	8016106 <xtime>
 80163ba:	0003      	movs	r3, r0
 80163bc:	0018      	movs	r0, r3
 80163be:	f7ff fea2 	bl	8016106 <xtime>
 80163c2:	197b      	adds	r3, r7, r5
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	0018      	movs	r0, r3
 80163c8:	f7ff fe9d 	bl	8016106 <xtime>
 80163cc:	0003      	movs	r3, r0
 80163ce:	0018      	movs	r0, r3
 80163d0:	f7ff fe99 	bl	8016106 <xtime>
 80163d4:	197b      	adds	r3, r7, r5
 80163d6:	781b      	ldrb	r3, [r3, #0]
 80163d8:	0018      	movs	r0, r3
 80163da:	f7ff fe94 	bl	8016106 <xtime>
 80163de:	0003      	movs	r3, r0
 80163e0:	0018      	movs	r0, r3
 80163e2:	f7ff fe90 	bl	8016106 <xtime>
 80163e6:	0003      	movs	r3, r0
 80163e8:	0018      	movs	r0, r3
 80163ea:	f7ff fe8c 	bl	8016106 <xtime>
 80163ee:	0003      	movs	r3, r0
 80163f0:	0018      	movs	r0, r3
 80163f2:	f7ff fe88 	bl	8016106 <xtime>
 80163f6:	193b      	adds	r3, r7, r4
 80163f8:	781b      	ldrb	r3, [r3, #0]
 80163fa:	0018      	movs	r0, r3
 80163fc:	f7ff fe83 	bl	8016106 <xtime>
 8016400:	193b      	adds	r3, r7, r4
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	0018      	movs	r0, r3
 8016406:	f7ff fe7e 	bl	8016106 <xtime>
 801640a:	0003      	movs	r3, r0
 801640c:	0018      	movs	r0, r3
 801640e:	f7ff fe7a 	bl	8016106 <xtime>
 8016412:	0003      	movs	r3, r0
 8016414:	0018      	movs	r0, r3
 8016416:	f7ff fe76 	bl	8016106 <xtime>
 801641a:	0003      	movs	r3, r0
 801641c:	0018      	movs	r0, r3
 801641e:	f7ff fe72 	bl	8016106 <xtime>
 8016422:	2308      	movs	r3, #8
 8016424:	001c      	movs	r4, r3
 8016426:	18fb      	adds	r3, r7, r3
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	0018      	movs	r0, r3
 801642c:	f7ff fe6b 	bl	8016106 <xtime>
 8016430:	0023      	movs	r3, r4
 8016432:	001c      	movs	r4, r3
 8016434:	18fb      	adds	r3, r7, r3
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	0018      	movs	r0, r3
 801643a:	f7ff fe64 	bl	8016106 <xtime>
 801643e:	0003      	movs	r3, r0
 8016440:	0018      	movs	r0, r3
 8016442:	f7ff fe60 	bl	8016106 <xtime>
 8016446:	0023      	movs	r3, r4
 8016448:	18fb      	adds	r3, r7, r3
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	0018      	movs	r0, r3
 801644e:	f7ff fe5a 	bl	8016106 <xtime>
 8016452:	0003      	movs	r3, r0
 8016454:	0018      	movs	r0, r3
 8016456:	f7ff fe56 	bl	8016106 <xtime>
 801645a:	0003      	movs	r3, r0
 801645c:	0018      	movs	r0, r3
 801645e:	f7ff fe52 	bl	8016106 <xtime>
 8016462:	0003      	movs	r3, r0
 8016464:	0018      	movs	r0, r3
 8016466:	f7ff fe4e 	bl	8016106 <xtime>
 801646a:	19bb      	adds	r3, r7, r6
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	0018      	movs	r0, r3
 8016470:	f7ff fe49 	bl	8016106 <xtime>
 8016474:	0003      	movs	r3, r0
 8016476:	001c      	movs	r4, r3
 8016478:	19bb      	adds	r3, r7, r6
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	0018      	movs	r0, r3
 801647e:	f7ff fe42 	bl	8016106 <xtime>
 8016482:	0003      	movs	r3, r0
 8016484:	0018      	movs	r0, r3
 8016486:	f7ff fe3e 	bl	8016106 <xtime>
 801648a:	0003      	movs	r3, r0
 801648c:	4063      	eors	r3, r4
 801648e:	b2dc      	uxtb	r4, r3
 8016490:	19bb      	adds	r3, r7, r6
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	0018      	movs	r0, r3
 8016496:	f7ff fe36 	bl	8016106 <xtime>
 801649a:	0003      	movs	r3, r0
 801649c:	0018      	movs	r0, r3
 801649e:	f7ff fe32 	bl	8016106 <xtime>
 80164a2:	0003      	movs	r3, r0
 80164a4:	0018      	movs	r0, r3
 80164a6:	f7ff fe2e 	bl	8016106 <xtime>
 80164aa:	0003      	movs	r3, r0
 80164ac:	4063      	eors	r3, r4
 80164ae:	b2dc      	uxtb	r4, r3
 80164b0:	197b      	adds	r3, r7, r5
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	0018      	movs	r0, r3
 80164b6:	f7ff fe26 	bl	8016106 <xtime>
 80164ba:	0003      	movs	r3, r0
 80164bc:	001a      	movs	r2, r3
 80164be:	0029      	movs	r1, r5
 80164c0:	197b      	adds	r3, r7, r5
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	4053      	eors	r3, r2
 80164c6:	b2dd      	uxtb	r5, r3
 80164c8:	187b      	adds	r3, r7, r1
 80164ca:	781b      	ldrb	r3, [r3, #0]
 80164cc:	0018      	movs	r0, r3
 80164ce:	f7ff fe1a 	bl	8016106 <xtime>
 80164d2:	0003      	movs	r3, r0
 80164d4:	0018      	movs	r0, r3
 80164d6:	f7ff fe16 	bl	8016106 <xtime>
 80164da:	0003      	movs	r3, r0
 80164dc:	0018      	movs	r0, r3
 80164de:	f7ff fe12 	bl	8016106 <xtime>
 80164e2:	0003      	movs	r3, r0
 80164e4:	406b      	eors	r3, r5
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	4063      	eors	r3, r4
 80164ea:	b2dc      	uxtb	r4, r3
 80164ec:	2309      	movs	r3, #9
 80164ee:	001d      	movs	r5, r3
 80164f0:	18fb      	adds	r3, r7, r3
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	0018      	movs	r0, r3
 80164f6:	f7ff fe06 	bl	8016106 <xtime>
 80164fa:	0003      	movs	r3, r0
 80164fc:	0018      	movs	r0, r3
 80164fe:	f7ff fe02 	bl	8016106 <xtime>
 8016502:	0003      	movs	r3, r0
 8016504:	001a      	movs	r2, r3
 8016506:	002b      	movs	r3, r5
 8016508:	0018      	movs	r0, r3
 801650a:	18fb      	adds	r3, r7, r3
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	4053      	eors	r3, r2
 8016510:	b2dd      	uxtb	r5, r3
 8016512:	0003      	movs	r3, r0
 8016514:	18fb      	adds	r3, r7, r3
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	0018      	movs	r0, r3
 801651a:	f7ff fdf4 	bl	8016106 <xtime>
 801651e:	0003      	movs	r3, r0
 8016520:	0018      	movs	r0, r3
 8016522:	f7ff fdf0 	bl	8016106 <xtime>
 8016526:	0003      	movs	r3, r0
 8016528:	0018      	movs	r0, r3
 801652a:	f7ff fdec 	bl	8016106 <xtime>
 801652e:	0003      	movs	r3, r0
 8016530:	406b      	eors	r3, r5
 8016532:	b2db      	uxtb	r3, r3
 8016534:	4063      	eors	r3, r4
 8016536:	b2dc      	uxtb	r4, r3
 8016538:	2308      	movs	r3, #8
 801653a:	001d      	movs	r5, r3
 801653c:	18fb      	adds	r3, r7, r3
 801653e:	781b      	ldrb	r3, [r3, #0]
 8016540:	0018      	movs	r0, r3
 8016542:	f7ff fde0 	bl	8016106 <xtime>
 8016546:	0003      	movs	r3, r0
 8016548:	0018      	movs	r0, r3
 801654a:	f7ff fddc 	bl	8016106 <xtime>
 801654e:	0003      	movs	r3, r0
 8016550:	0018      	movs	r0, r3
 8016552:	f7ff fdd8 	bl	8016106 <xtime>
 8016556:	0003      	movs	r3, r0
 8016558:	001a      	movs	r2, r3
 801655a:	002b      	movs	r3, r5
 801655c:	18fb      	adds	r3, r7, r3
 801655e:	781b      	ldrb	r3, [r3, #0]
 8016560:	4053      	eors	r3, r2
 8016562:	b2db      	uxtb	r3, r3
 8016564:	4063      	eors	r3, r4
 8016566:	b2d9      	uxtb	r1, r3
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	0092      	lsls	r2, r2, #2
 801656e:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8016570:	19bb      	adds	r3, r7, r6
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	0018      	movs	r0, r3
 8016576:	f7ff fdc6 	bl	8016106 <xtime>
 801657a:	19bb      	adds	r3, r7, r6
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	0018      	movs	r0, r3
 8016580:	f7ff fdc1 	bl	8016106 <xtime>
 8016584:	0003      	movs	r3, r0
 8016586:	0018      	movs	r0, r3
 8016588:	f7ff fdbd 	bl	8016106 <xtime>
 801658c:	19bb      	adds	r3, r7, r6
 801658e:	781b      	ldrb	r3, [r3, #0]
 8016590:	0018      	movs	r0, r3
 8016592:	f7ff fdb8 	bl	8016106 <xtime>
 8016596:	0003      	movs	r3, r0
 8016598:	0018      	movs	r0, r3
 801659a:	f7ff fdb4 	bl	8016106 <xtime>
 801659e:	0003      	movs	r3, r0
 80165a0:	0018      	movs	r0, r3
 80165a2:	f7ff fdb0 	bl	8016106 <xtime>
 80165a6:	0003      	movs	r3, r0
 80165a8:	0018      	movs	r0, r3
 80165aa:	f7ff fdac 	bl	8016106 <xtime>
 80165ae:	210a      	movs	r1, #10
 80165b0:	000d      	movs	r5, r1
 80165b2:	187b      	adds	r3, r7, r1
 80165b4:	781b      	ldrb	r3, [r3, #0]
 80165b6:	0018      	movs	r0, r3
 80165b8:	f7ff fda5 	bl	8016106 <xtime>
 80165bc:	0003      	movs	r3, r0
 80165be:	0018      	movs	r0, r3
 80165c0:	f7ff fda1 	bl	8016106 <xtime>
 80165c4:	0003      	movs	r3, r0
 80165c6:	0018      	movs	r0, r3
 80165c8:	f7ff fd9d 	bl	8016106 <xtime>
 80165cc:	0003      	movs	r3, r0
 80165ce:	0018      	movs	r0, r3
 80165d0:	f7ff fd99 	bl	8016106 <xtime>
 80165d4:	2409      	movs	r4, #9
 80165d6:	193b      	adds	r3, r7, r4
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	0018      	movs	r0, r3
 80165dc:	f7ff fd93 	bl	8016106 <xtime>
 80165e0:	0003      	movs	r3, r0
 80165e2:	0018      	movs	r0, r3
 80165e4:	f7ff fd8f 	bl	8016106 <xtime>
 80165e8:	193b      	adds	r3, r7, r4
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	0018      	movs	r0, r3
 80165ee:	f7ff fd8a 	bl	8016106 <xtime>
 80165f2:	0003      	movs	r3, r0
 80165f4:	0018      	movs	r0, r3
 80165f6:	f7ff fd86 	bl	8016106 <xtime>
 80165fa:	0003      	movs	r3, r0
 80165fc:	0018      	movs	r0, r3
 80165fe:	f7ff fd82 	bl	8016106 <xtime>
 8016602:	0003      	movs	r3, r0
 8016604:	0018      	movs	r0, r3
 8016606:	f7ff fd7e 	bl	8016106 <xtime>
 801660a:	2308      	movs	r3, #8
 801660c:	001c      	movs	r4, r3
 801660e:	18fb      	adds	r3, r7, r3
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	0018      	movs	r0, r3
 8016614:	f7ff fd77 	bl	8016106 <xtime>
 8016618:	0023      	movs	r3, r4
 801661a:	18fb      	adds	r3, r7, r3
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	0018      	movs	r0, r3
 8016620:	f7ff fd71 	bl	8016106 <xtime>
 8016624:	0003      	movs	r3, r0
 8016626:	0018      	movs	r0, r3
 8016628:	f7ff fd6d 	bl	8016106 <xtime>
 801662c:	0003      	movs	r3, r0
 801662e:	0018      	movs	r0, r3
 8016630:	f7ff fd69 	bl	8016106 <xtime>
 8016634:	0003      	movs	r3, r0
 8016636:	0018      	movs	r0, r3
 8016638:	f7ff fd65 	bl	8016106 <xtime>
 801663c:	19bb      	adds	r3, r7, r6
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	0018      	movs	r0, r3
 8016642:	f7ff fd60 	bl	8016106 <xtime>
 8016646:	0003      	movs	r3, r0
 8016648:	0018      	movs	r0, r3
 801664a:	f7ff fd5c 	bl	8016106 <xtime>
 801664e:	0003      	movs	r3, r0
 8016650:	0018      	movs	r0, r3
 8016652:	f7ff fd58 	bl	8016106 <xtime>
 8016656:	0003      	movs	r3, r0
 8016658:	001a      	movs	r2, r3
 801665a:	19bb      	adds	r3, r7, r6
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	4053      	eors	r3, r2
 8016660:	b2dc      	uxtb	r4, r3
 8016662:	197b      	adds	r3, r7, r5
 8016664:	781b      	ldrb	r3, [r3, #0]
 8016666:	0018      	movs	r0, r3
 8016668:	f7ff fd4d 	bl	8016106 <xtime>
 801666c:	0003      	movs	r3, r0
 801666e:	001d      	movs	r5, r3
 8016670:	230a      	movs	r3, #10
 8016672:	18fb      	adds	r3, r7, r3
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	0018      	movs	r0, r3
 8016678:	f7ff fd45 	bl	8016106 <xtime>
 801667c:	0003      	movs	r3, r0
 801667e:	0018      	movs	r0, r3
 8016680:	f7ff fd41 	bl	8016106 <xtime>
 8016684:	0003      	movs	r3, r0
 8016686:	406b      	eors	r3, r5
 8016688:	b2dd      	uxtb	r5, r3
 801668a:	230a      	movs	r3, #10
 801668c:	18fb      	adds	r3, r7, r3
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	0018      	movs	r0, r3
 8016692:	f7ff fd38 	bl	8016106 <xtime>
 8016696:	0003      	movs	r3, r0
 8016698:	0018      	movs	r0, r3
 801669a:	f7ff fd34 	bl	8016106 <xtime>
 801669e:	0003      	movs	r3, r0
 80166a0:	0018      	movs	r0, r3
 80166a2:	f7ff fd30 	bl	8016106 <xtime>
 80166a6:	0003      	movs	r3, r0
 80166a8:	406b      	eors	r3, r5
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	4063      	eors	r3, r4
 80166ae:	b2dc      	uxtb	r4, r3
 80166b0:	2209      	movs	r2, #9
 80166b2:	0015      	movs	r5, r2
 80166b4:	18bb      	adds	r3, r7, r2
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	0018      	movs	r0, r3
 80166ba:	f7ff fd24 	bl	8016106 <xtime>
 80166be:	0003      	movs	r3, r0
 80166c0:	001a      	movs	r2, r3
 80166c2:	0029      	movs	r1, r5
 80166c4:	187b      	adds	r3, r7, r1
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	4053      	eors	r3, r2
 80166ca:	b2dd      	uxtb	r5, r3
 80166cc:	187b      	adds	r3, r7, r1
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	0018      	movs	r0, r3
 80166d2:	f7ff fd18 	bl	8016106 <xtime>
 80166d6:	0003      	movs	r3, r0
 80166d8:	0018      	movs	r0, r3
 80166da:	f7ff fd14 	bl	8016106 <xtime>
 80166de:	0003      	movs	r3, r0
 80166e0:	0018      	movs	r0, r3
 80166e2:	f7ff fd10 	bl	8016106 <xtime>
 80166e6:	0003      	movs	r3, r0
 80166e8:	406b      	eors	r3, r5
 80166ea:	b2db      	uxtb	r3, r3
 80166ec:	4063      	eors	r3, r4
 80166ee:	b2dc      	uxtb	r4, r3
 80166f0:	2208      	movs	r2, #8
 80166f2:	0015      	movs	r5, r2
 80166f4:	18bb      	adds	r3, r7, r2
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	0018      	movs	r0, r3
 80166fa:	f7ff fd04 	bl	8016106 <xtime>
 80166fe:	0003      	movs	r3, r0
 8016700:	0018      	movs	r0, r3
 8016702:	f7ff fd00 	bl	8016106 <xtime>
 8016706:	0003      	movs	r3, r0
 8016708:	001a      	movs	r2, r3
 801670a:	0028      	movs	r0, r5
 801670c:	183b      	adds	r3, r7, r0
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	4053      	eors	r3, r2
 8016712:	b2dd      	uxtb	r5, r3
 8016714:	0002      	movs	r2, r0
 8016716:	18bb      	adds	r3, r7, r2
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	0018      	movs	r0, r3
 801671c:	f7ff fcf3 	bl	8016106 <xtime>
 8016720:	0003      	movs	r3, r0
 8016722:	0018      	movs	r0, r3
 8016724:	f7ff fcef 	bl	8016106 <xtime>
 8016728:	0003      	movs	r3, r0
 801672a:	0018      	movs	r0, r3
 801672c:	f7ff fceb 	bl	8016106 <xtime>
 8016730:	0003      	movs	r3, r0
 8016732:	406b      	eors	r3, r5
 8016734:	b2db      	uxtb	r3, r3
 8016736:	4063      	eors	r3, r4
 8016738:	b2d9      	uxtb	r1, r3
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	18d3      	adds	r3, r2, r3
 8016742:	3301      	adds	r3, #1
 8016744:	1c0a      	adds	r2, r1, #0
 8016746:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8016748:	19bb      	adds	r3, r7, r6
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	0018      	movs	r0, r3
 801674e:	f7ff fcda 	bl	8016106 <xtime>
 8016752:	19bb      	adds	r3, r7, r6
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	0018      	movs	r0, r3
 8016758:	f7ff fcd5 	bl	8016106 <xtime>
 801675c:	0003      	movs	r3, r0
 801675e:	0018      	movs	r0, r3
 8016760:	f7ff fcd1 	bl	8016106 <xtime>
 8016764:	0003      	movs	r3, r0
 8016766:	0018      	movs	r0, r3
 8016768:	f7ff fccd 	bl	8016106 <xtime>
 801676c:	0003      	movs	r3, r0
 801676e:	0018      	movs	r0, r3
 8016770:	f7ff fcc9 	bl	8016106 <xtime>
 8016774:	250a      	movs	r5, #10
 8016776:	197b      	adds	r3, r7, r5
 8016778:	781b      	ldrb	r3, [r3, #0]
 801677a:	0018      	movs	r0, r3
 801677c:	f7ff fcc3 	bl	8016106 <xtime>
 8016780:	197b      	adds	r3, r7, r5
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	0018      	movs	r0, r3
 8016786:	f7ff fcbe 	bl	8016106 <xtime>
 801678a:	0003      	movs	r3, r0
 801678c:	0018      	movs	r0, r3
 801678e:	f7ff fcba 	bl	8016106 <xtime>
 8016792:	197b      	adds	r3, r7, r5
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	0018      	movs	r0, r3
 8016798:	f7ff fcb5 	bl	8016106 <xtime>
 801679c:	0003      	movs	r3, r0
 801679e:	0018      	movs	r0, r3
 80167a0:	f7ff fcb1 	bl	8016106 <xtime>
 80167a4:	0003      	movs	r3, r0
 80167a6:	0018      	movs	r0, r3
 80167a8:	f7ff fcad 	bl	8016106 <xtime>
 80167ac:	0003      	movs	r3, r0
 80167ae:	0018      	movs	r0, r3
 80167b0:	f7ff fca9 	bl	8016106 <xtime>
 80167b4:	2109      	movs	r1, #9
 80167b6:	187b      	adds	r3, r7, r1
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	0018      	movs	r0, r3
 80167bc:	f7ff fca3 	bl	8016106 <xtime>
 80167c0:	0003      	movs	r3, r0
 80167c2:	0018      	movs	r0, r3
 80167c4:	f7ff fc9f 	bl	8016106 <xtime>
 80167c8:	0003      	movs	r3, r0
 80167ca:	0018      	movs	r0, r3
 80167cc:	f7ff fc9b 	bl	8016106 <xtime>
 80167d0:	0003      	movs	r3, r0
 80167d2:	0018      	movs	r0, r3
 80167d4:	f7ff fc97 	bl	8016106 <xtime>
 80167d8:	2408      	movs	r4, #8
 80167da:	193b      	adds	r3, r7, r4
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	0018      	movs	r0, r3
 80167e0:	f7ff fc91 	bl	8016106 <xtime>
 80167e4:	0003      	movs	r3, r0
 80167e6:	0018      	movs	r0, r3
 80167e8:	f7ff fc8d 	bl	8016106 <xtime>
 80167ec:	193b      	adds	r3, r7, r4
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	0018      	movs	r0, r3
 80167f2:	f7ff fc88 	bl	8016106 <xtime>
 80167f6:	0003      	movs	r3, r0
 80167f8:	0018      	movs	r0, r3
 80167fa:	f7ff fc84 	bl	8016106 <xtime>
 80167fe:	0003      	movs	r3, r0
 8016800:	0018      	movs	r0, r3
 8016802:	f7ff fc80 	bl	8016106 <xtime>
 8016806:	0003      	movs	r3, r0
 8016808:	0018      	movs	r0, r3
 801680a:	f7ff fc7c 	bl	8016106 <xtime>
 801680e:	19bb      	adds	r3, r7, r6
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	0018      	movs	r0, r3
 8016814:	f7ff fc77 	bl	8016106 <xtime>
 8016818:	0003      	movs	r3, r0
 801681a:	0018      	movs	r0, r3
 801681c:	f7ff fc73 	bl	8016106 <xtime>
 8016820:	0003      	movs	r3, r0
 8016822:	001a      	movs	r2, r3
 8016824:	19bb      	adds	r3, r7, r6
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	4053      	eors	r3, r2
 801682a:	b2dc      	uxtb	r4, r3
 801682c:	19bb      	adds	r3, r7, r6
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	0018      	movs	r0, r3
 8016832:	f7ff fc68 	bl	8016106 <xtime>
 8016836:	0003      	movs	r3, r0
 8016838:	0018      	movs	r0, r3
 801683a:	f7ff fc64 	bl	8016106 <xtime>
 801683e:	0003      	movs	r3, r0
 8016840:	0018      	movs	r0, r3
 8016842:	f7ff fc60 	bl	8016106 <xtime>
 8016846:	0003      	movs	r3, r0
 8016848:	4063      	eors	r3, r4
 801684a:	b2dc      	uxtb	r4, r3
 801684c:	197b      	adds	r3, r7, r5
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	0018      	movs	r0, r3
 8016852:	f7ff fc58 	bl	8016106 <xtime>
 8016856:	0003      	movs	r3, r0
 8016858:	0018      	movs	r0, r3
 801685a:	f7ff fc54 	bl	8016106 <xtime>
 801685e:	0003      	movs	r3, r0
 8016860:	0018      	movs	r0, r3
 8016862:	f7ff fc50 	bl	8016106 <xtime>
 8016866:	0003      	movs	r3, r0
 8016868:	001a      	movs	r2, r3
 801686a:	197b      	adds	r3, r7, r5
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	4053      	eors	r3, r2
 8016870:	b2db      	uxtb	r3, r3
 8016872:	4063      	eors	r3, r4
 8016874:	b2dc      	uxtb	r4, r3
 8016876:	2109      	movs	r1, #9
 8016878:	187b      	adds	r3, r7, r1
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	0018      	movs	r0, r3
 801687e:	f7ff fc42 	bl	8016106 <xtime>
 8016882:	0003      	movs	r3, r0
 8016884:	001d      	movs	r5, r3
 8016886:	2109      	movs	r1, #9
 8016888:	187b      	adds	r3, r7, r1
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	0018      	movs	r0, r3
 801688e:	f7ff fc3a 	bl	8016106 <xtime>
 8016892:	0003      	movs	r3, r0
 8016894:	0018      	movs	r0, r3
 8016896:	f7ff fc36 	bl	8016106 <xtime>
 801689a:	0003      	movs	r3, r0
 801689c:	406b      	eors	r3, r5
 801689e:	b2dd      	uxtb	r5, r3
 80168a0:	2109      	movs	r1, #9
 80168a2:	187b      	adds	r3, r7, r1
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	0018      	movs	r0, r3
 80168a8:	f7ff fc2d 	bl	8016106 <xtime>
 80168ac:	0003      	movs	r3, r0
 80168ae:	0018      	movs	r0, r3
 80168b0:	f7ff fc29 	bl	8016106 <xtime>
 80168b4:	0003      	movs	r3, r0
 80168b6:	0018      	movs	r0, r3
 80168b8:	f7ff fc25 	bl	8016106 <xtime>
 80168bc:	0003      	movs	r3, r0
 80168be:	406b      	eors	r3, r5
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	4063      	eors	r3, r4
 80168c4:	b2dc      	uxtb	r4, r3
 80168c6:	2308      	movs	r3, #8
 80168c8:	001d      	movs	r5, r3
 80168ca:	18fb      	adds	r3, r7, r3
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	0018      	movs	r0, r3
 80168d0:	f7ff fc19 	bl	8016106 <xtime>
 80168d4:	0003      	movs	r3, r0
 80168d6:	001a      	movs	r2, r3
 80168d8:	0028      	movs	r0, r5
 80168da:	183b      	adds	r3, r7, r0
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	4053      	eors	r3, r2
 80168e0:	b2dd      	uxtb	r5, r3
 80168e2:	0003      	movs	r3, r0
 80168e4:	18fb      	adds	r3, r7, r3
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	0018      	movs	r0, r3
 80168ea:	f7ff fc0c 	bl	8016106 <xtime>
 80168ee:	0003      	movs	r3, r0
 80168f0:	0018      	movs	r0, r3
 80168f2:	f7ff fc08 	bl	8016106 <xtime>
 80168f6:	0003      	movs	r3, r0
 80168f8:	0018      	movs	r0, r3
 80168fa:	f7ff fc04 	bl	8016106 <xtime>
 80168fe:	0003      	movs	r3, r0
 8016900:	406b      	eors	r3, r5
 8016902:	b2db      	uxtb	r3, r3
 8016904:	4063      	eors	r3, r4
 8016906:	b2d9      	uxtb	r1, r3
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	009b      	lsls	r3, r3, #2
 801690e:	18d3      	adds	r3, r2, r3
 8016910:	3302      	adds	r3, #2
 8016912:	1c0a      	adds	r2, r1, #0
 8016914:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8016916:	19bb      	adds	r3, r7, r6
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	0018      	movs	r0, r3
 801691c:	f7ff fbf3 	bl	8016106 <xtime>
 8016920:	0003      	movs	r3, r0
 8016922:	0018      	movs	r0, r3
 8016924:	f7ff fbef 	bl	8016106 <xtime>
 8016928:	19bb      	adds	r3, r7, r6
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	0018      	movs	r0, r3
 801692e:	f7ff fbea 	bl	8016106 <xtime>
 8016932:	0003      	movs	r3, r0
 8016934:	0018      	movs	r0, r3
 8016936:	f7ff fbe6 	bl	8016106 <xtime>
 801693a:	0003      	movs	r3, r0
 801693c:	0018      	movs	r0, r3
 801693e:	f7ff fbe2 	bl	8016106 <xtime>
 8016942:	0003      	movs	r3, r0
 8016944:	0018      	movs	r0, r3
 8016946:	f7ff fbde 	bl	8016106 <xtime>
 801694a:	250a      	movs	r5, #10
 801694c:	197b      	adds	r3, r7, r5
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	0018      	movs	r0, r3
 8016952:	f7ff fbd8 	bl	8016106 <xtime>
 8016956:	197b      	adds	r3, r7, r5
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	0018      	movs	r0, r3
 801695c:	f7ff fbd3 	bl	8016106 <xtime>
 8016960:	0003      	movs	r3, r0
 8016962:	0018      	movs	r0, r3
 8016964:	f7ff fbcf 	bl	8016106 <xtime>
 8016968:	0003      	movs	r3, r0
 801696a:	0018      	movs	r0, r3
 801696c:	f7ff fbcb 	bl	8016106 <xtime>
 8016970:	0003      	movs	r3, r0
 8016972:	0018      	movs	r0, r3
 8016974:	f7ff fbc7 	bl	8016106 <xtime>
 8016978:	2109      	movs	r1, #9
 801697a:	000c      	movs	r4, r1
 801697c:	187b      	adds	r3, r7, r1
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	0018      	movs	r0, r3
 8016982:	f7ff fbc0 	bl	8016106 <xtime>
 8016986:	193b      	adds	r3, r7, r4
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	0018      	movs	r0, r3
 801698c:	f7ff fbbb 	bl	8016106 <xtime>
 8016990:	0003      	movs	r3, r0
 8016992:	0018      	movs	r0, r3
 8016994:	f7ff fbb7 	bl	8016106 <xtime>
 8016998:	193b      	adds	r3, r7, r4
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	0018      	movs	r0, r3
 801699e:	f7ff fbb2 	bl	8016106 <xtime>
 80169a2:	0003      	movs	r3, r0
 80169a4:	0018      	movs	r0, r3
 80169a6:	f7ff fbae 	bl	8016106 <xtime>
 80169aa:	0003      	movs	r3, r0
 80169ac:	0018      	movs	r0, r3
 80169ae:	f7ff fbaa 	bl	8016106 <xtime>
 80169b2:	0003      	movs	r3, r0
 80169b4:	0018      	movs	r0, r3
 80169b6:	f7ff fba6 	bl	8016106 <xtime>
 80169ba:	2308      	movs	r3, #8
 80169bc:	18fb      	adds	r3, r7, r3
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	0018      	movs	r0, r3
 80169c2:	f7ff fba0 	bl	8016106 <xtime>
 80169c6:	0003      	movs	r3, r0
 80169c8:	0018      	movs	r0, r3
 80169ca:	f7ff fb9c 	bl	8016106 <xtime>
 80169ce:	0003      	movs	r3, r0
 80169d0:	0018      	movs	r0, r3
 80169d2:	f7ff fb98 	bl	8016106 <xtime>
 80169d6:	0003      	movs	r3, r0
 80169d8:	0018      	movs	r0, r3
 80169da:	f7ff fb94 	bl	8016106 <xtime>
 80169de:	19bb      	adds	r3, r7, r6
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	0018      	movs	r0, r3
 80169e4:	f7ff fb8f 	bl	8016106 <xtime>
 80169e8:	0003      	movs	r3, r0
 80169ea:	001a      	movs	r2, r3
 80169ec:	19bb      	adds	r3, r7, r6
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	4053      	eors	r3, r2
 80169f2:	b2dc      	uxtb	r4, r3
 80169f4:	19bb      	adds	r3, r7, r6
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	0018      	movs	r0, r3
 80169fa:	f7ff fb84 	bl	8016106 <xtime>
 80169fe:	0003      	movs	r3, r0
 8016a00:	0018      	movs	r0, r3
 8016a02:	f7ff fb80 	bl	8016106 <xtime>
 8016a06:	0003      	movs	r3, r0
 8016a08:	0018      	movs	r0, r3
 8016a0a:	f7ff fb7c 	bl	8016106 <xtime>
 8016a0e:	0003      	movs	r3, r0
 8016a10:	4063      	eors	r3, r4
 8016a12:	b2dc      	uxtb	r4, r3
 8016a14:	197b      	adds	r3, r7, r5
 8016a16:	781b      	ldrb	r3, [r3, #0]
 8016a18:	0018      	movs	r0, r3
 8016a1a:	f7ff fb74 	bl	8016106 <xtime>
 8016a1e:	0003      	movs	r3, r0
 8016a20:	0018      	movs	r0, r3
 8016a22:	f7ff fb70 	bl	8016106 <xtime>
 8016a26:	0003      	movs	r3, r0
 8016a28:	001a      	movs	r2, r3
 8016a2a:	0029      	movs	r1, r5
 8016a2c:	197b      	adds	r3, r7, r5
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	4053      	eors	r3, r2
 8016a32:	b2dd      	uxtb	r5, r3
 8016a34:	187b      	adds	r3, r7, r1
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	0018      	movs	r0, r3
 8016a3a:	f7ff fb64 	bl	8016106 <xtime>
 8016a3e:	0003      	movs	r3, r0
 8016a40:	0018      	movs	r0, r3
 8016a42:	f7ff fb60 	bl	8016106 <xtime>
 8016a46:	0003      	movs	r3, r0
 8016a48:	0018      	movs	r0, r3
 8016a4a:	f7ff fb5c 	bl	8016106 <xtime>
 8016a4e:	0003      	movs	r3, r0
 8016a50:	406b      	eors	r3, r5
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	4063      	eors	r3, r4
 8016a56:	b2dc      	uxtb	r4, r3
 8016a58:	2509      	movs	r5, #9
 8016a5a:	197b      	adds	r3, r7, r5
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	0018      	movs	r0, r3
 8016a60:	f7ff fb51 	bl	8016106 <xtime>
 8016a64:	0003      	movs	r3, r0
 8016a66:	0018      	movs	r0, r3
 8016a68:	f7ff fb4d 	bl	8016106 <xtime>
 8016a6c:	0003      	movs	r3, r0
 8016a6e:	0018      	movs	r0, r3
 8016a70:	f7ff fb49 	bl	8016106 <xtime>
 8016a74:	0003      	movs	r3, r0
 8016a76:	001a      	movs	r2, r3
 8016a78:	197b      	adds	r3, r7, r5
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	4053      	eors	r3, r2
 8016a7e:	b2db      	uxtb	r3, r3
 8016a80:	4063      	eors	r3, r4
 8016a82:	b2dc      	uxtb	r4, r3
 8016a84:	2608      	movs	r6, #8
 8016a86:	19bb      	adds	r3, r7, r6
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	0018      	movs	r0, r3
 8016a8c:	f7ff fb3b 	bl	8016106 <xtime>
 8016a90:	0003      	movs	r3, r0
 8016a92:	001d      	movs	r5, r3
 8016a94:	19bb      	adds	r3, r7, r6
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	0018      	movs	r0, r3
 8016a9a:	f7ff fb34 	bl	8016106 <xtime>
 8016a9e:	0003      	movs	r3, r0
 8016aa0:	0018      	movs	r0, r3
 8016aa2:	f7ff fb30 	bl	8016106 <xtime>
 8016aa6:	0003      	movs	r3, r0
 8016aa8:	406b      	eors	r3, r5
 8016aaa:	b2dd      	uxtb	r5, r3
 8016aac:	19bb      	adds	r3, r7, r6
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	0018      	movs	r0, r3
 8016ab2:	f7ff fb28 	bl	8016106 <xtime>
 8016ab6:	0003      	movs	r3, r0
 8016ab8:	0018      	movs	r0, r3
 8016aba:	f7ff fb24 	bl	8016106 <xtime>
 8016abe:	0003      	movs	r3, r0
 8016ac0:	0018      	movs	r0, r3
 8016ac2:	f7ff fb20 	bl	8016106 <xtime>
 8016ac6:	0003      	movs	r3, r0
 8016ac8:	406b      	eors	r3, r5
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	4063      	eors	r3, r4
 8016ace:	b2d9      	uxtb	r1, r3
 8016ad0:	687a      	ldr	r2, [r7, #4]
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	18d3      	adds	r3, r2, r3
 8016ad8:	3303      	adds	r3, #3
 8016ada:	1c0a      	adds	r2, r1, #0
 8016adc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	60fb      	str	r3, [r7, #12]
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	2b03      	cmp	r3, #3
 8016ae8:	dc00      	bgt.n	8016aec <InvMixColumns+0x79e>
 8016aea:	e437      	b.n	801635c <InvMixColumns+0xe>
  }
}
 8016aec:	46c0      	nop			; (mov r8, r8)
 8016aee:	46bd      	mov	sp, r7
 8016af0:	b005      	add	sp, #20
 8016af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016af4 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8016af4:	b5b0      	push	{r4, r5, r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8016afc:	230f      	movs	r3, #15
 8016afe:	18fb      	adds	r3, r7, r3
 8016b00:	2200      	movs	r2, #0
 8016b02:	701a      	strb	r2, [r3, #0]
 8016b04:	e02a      	b.n	8016b5c <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8016b06:	230e      	movs	r3, #14
 8016b08:	18fb      	adds	r3, r7, r3
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	701a      	strb	r2, [r3, #0]
 8016b0e:	e01a      	b.n	8016b46 <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8016b10:	240e      	movs	r4, #14
 8016b12:	193b      	adds	r3, r7, r4
 8016b14:	781a      	ldrb	r2, [r3, #0]
 8016b16:	250f      	movs	r5, #15
 8016b18:	197b      	adds	r3, r7, r5
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	6879      	ldr	r1, [r7, #4]
 8016b1e:	0092      	lsls	r2, r2, #2
 8016b20:	188a      	adds	r2, r1, r2
 8016b22:	5cd3      	ldrb	r3, [r2, r3]
 8016b24:	0018      	movs	r0, r3
 8016b26:	193b      	adds	r3, r7, r4
 8016b28:	781a      	ldrb	r2, [r3, #0]
 8016b2a:	197b      	adds	r3, r7, r5
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	4910      	ldr	r1, [pc, #64]	; (8016b70 <InvSubBytes+0x7c>)
 8016b30:	5c08      	ldrb	r0, [r1, r0]
 8016b32:	6879      	ldr	r1, [r7, #4]
 8016b34:	0092      	lsls	r2, r2, #2
 8016b36:	188a      	adds	r2, r1, r2
 8016b38:	1c01      	adds	r1, r0, #0
 8016b3a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8016b3c:	193b      	adds	r3, r7, r4
 8016b3e:	193a      	adds	r2, r7, r4
 8016b40:	7812      	ldrb	r2, [r2, #0]
 8016b42:	3201      	adds	r2, #1
 8016b44:	701a      	strb	r2, [r3, #0]
 8016b46:	230e      	movs	r3, #14
 8016b48:	18fb      	adds	r3, r7, r3
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	2b03      	cmp	r3, #3
 8016b4e:	d9df      	bls.n	8016b10 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8016b50:	220f      	movs	r2, #15
 8016b52:	18bb      	adds	r3, r7, r2
 8016b54:	18ba      	adds	r2, r7, r2
 8016b56:	7812      	ldrb	r2, [r2, #0]
 8016b58:	3201      	adds	r2, #1
 8016b5a:	701a      	strb	r2, [r3, #0]
 8016b5c:	230f      	movs	r3, #15
 8016b5e:	18fb      	adds	r3, r7, r3
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	2b03      	cmp	r3, #3
 8016b64:	d9cf      	bls.n	8016b06 <InvSubBytes+0x12>
    }
  }
}
 8016b66:	46c0      	nop			; (mov r8, r8)
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	b004      	add	sp, #16
 8016b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8016b6e:	46c0      	nop			; (mov r8, r8)
 8016b70:	0801c254 	.word	0x0801c254

08016b74 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b084      	sub	sp, #16
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8016b7c:	210f      	movs	r1, #15
 8016b7e:	187b      	adds	r3, r7, r1
 8016b80:	687a      	ldr	r2, [r7, #4]
 8016b82:	7b52      	ldrb	r2, [r2, #13]
 8016b84:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	7a5a      	ldrb	r2, [r3, #9]
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	795a      	ldrb	r2, [r3, #5]
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	785a      	ldrb	r2, [r3, #1]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	187a      	adds	r2, r7, r1
 8016ba2:	7812      	ldrb	r2, [r2, #0]
 8016ba4:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8016ba6:	187b      	adds	r3, r7, r1
 8016ba8:	687a      	ldr	r2, [r7, #4]
 8016baa:	7892      	ldrb	r2, [r2, #2]
 8016bac:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	7a9a      	ldrb	r2, [r3, #10]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	187a      	adds	r2, r7, r1
 8016bba:	7812      	ldrb	r2, [r2, #0]
 8016bbc:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8016bbe:	187b      	adds	r3, r7, r1
 8016bc0:	687a      	ldr	r2, [r7, #4]
 8016bc2:	7992      	ldrb	r2, [r2, #6]
 8016bc4:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	7b9a      	ldrb	r2, [r3, #14]
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	187a      	adds	r2, r7, r1
 8016bd2:	7812      	ldrb	r2, [r2, #0]
 8016bd4:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8016bd6:	187b      	adds	r3, r7, r1
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	78d2      	ldrb	r2, [r2, #3]
 8016bdc:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	79da      	ldrb	r2, [r3, #7]
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	7ada      	ldrb	r2, [r3, #11]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	7bda      	ldrb	r2, [r3, #15]
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	187a      	adds	r2, r7, r1
 8016bfa:	7812      	ldrb	r2, [r2, #0]
 8016bfc:	73da      	strb	r2, [r3, #15]
}
 8016bfe:	46c0      	nop			; (mov r8, r8)
 8016c00:	46bd      	mov	sp, r7
 8016c02:	b004      	add	sp, #16
 8016c04:	bd80      	pop	{r7, pc}

08016c06 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 8016c06:	b590      	push	{r4, r7, lr}
 8016c08:	b085      	sub	sp, #20
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	6078      	str	r0, [r7, #4]
 8016c0e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8016c10:	240f      	movs	r4, #15
 8016c12:	193b      	adds	r3, r7, r4
 8016c14:	2200      	movs	r2, #0
 8016c16:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8016c18:	683a      	ldr	r2, [r7, #0]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	0019      	movs	r1, r3
 8016c1e:	2000      	movs	r0, #0
 8016c20:	f7ff f997 	bl	8015f52 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 8016c24:	193b      	adds	r3, r7, r4
 8016c26:	2201      	movs	r2, #1
 8016c28:	701a      	strb	r2, [r3, #0]
 8016c2a:	e018      	b.n	8016c5e <Cipher+0x58>
  {
    SubBytes(state);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	0018      	movs	r0, r3
 8016c30:	f7ff f9e0 	bl	8015ff4 <SubBytes>
    ShiftRows(state);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	0018      	movs	r0, r3
 8016c38:	f7ff fa1c 	bl	8016074 <ShiftRows>
    MixColumns(state);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	0018      	movs	r0, r3
 8016c40:	f7ff fa81 	bl	8016146 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8016c44:	683a      	ldr	r2, [r7, #0]
 8016c46:	6879      	ldr	r1, [r7, #4]
 8016c48:	240f      	movs	r4, #15
 8016c4a:	193b      	adds	r3, r7, r4
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	0018      	movs	r0, r3
 8016c50:	f7ff f97f 	bl	8015f52 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8016c54:	193b      	adds	r3, r7, r4
 8016c56:	193a      	adds	r2, r7, r4
 8016c58:	7812      	ldrb	r2, [r2, #0]
 8016c5a:	3201      	adds	r2, #1
 8016c5c:	701a      	strb	r2, [r3, #0]
 8016c5e:	230f      	movs	r3, #15
 8016c60:	18fb      	adds	r3, r7, r3
 8016c62:	781b      	ldrb	r3, [r3, #0]
 8016c64:	2b09      	cmp	r3, #9
 8016c66:	d9e1      	bls.n	8016c2c <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	0018      	movs	r0, r3
 8016c6c:	f7ff f9c2 	bl	8015ff4 <SubBytes>
  ShiftRows(state);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	0018      	movs	r0, r3
 8016c74:	f7ff f9fe 	bl	8016074 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 8016c78:	683a      	ldr	r2, [r7, #0]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	0019      	movs	r1, r3
 8016c7e:	200a      	movs	r0, #10
 8016c80:	f7ff f967 	bl	8015f52 <AddRoundKey>
}
 8016c84:	46c0      	nop			; (mov r8, r8)
 8016c86:	46bd      	mov	sp, r7
 8016c88:	b005      	add	sp, #20
 8016c8a:	bd90      	pop	{r4, r7, pc}

08016c8c <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 8016c8c:	b590      	push	{r4, r7, lr}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8016c96:	240f      	movs	r4, #15
 8016c98:	193b      	adds	r3, r7, r4
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8016c9e:	683a      	ldr	r2, [r7, #0]
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	0019      	movs	r1, r3
 8016ca4:	200a      	movs	r0, #10
 8016ca6:	f7ff f954 	bl	8015f52 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8016caa:	193b      	adds	r3, r7, r4
 8016cac:	2209      	movs	r2, #9
 8016cae:	701a      	strb	r2, [r3, #0]
 8016cb0:	e018      	b.n	8016ce4 <InvCipher+0x58>
  {
    InvShiftRows(state);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	0018      	movs	r0, r3
 8016cb6:	f7ff ff5d 	bl	8016b74 <InvShiftRows>
    InvSubBytes(state);
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	0018      	movs	r0, r3
 8016cbe:	f7ff ff19 	bl	8016af4 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8016cc2:	683a      	ldr	r2, [r7, #0]
 8016cc4:	6879      	ldr	r1, [r7, #4]
 8016cc6:	240f      	movs	r4, #15
 8016cc8:	193b      	adds	r3, r7, r4
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	0018      	movs	r0, r3
 8016cce:	f7ff f940 	bl	8015f52 <AddRoundKey>
    InvMixColumns(state);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	0018      	movs	r0, r3
 8016cd6:	f7ff fb3a 	bl	801634e <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8016cda:	193b      	adds	r3, r7, r4
 8016cdc:	193a      	adds	r2, r7, r4
 8016cde:	7812      	ldrb	r2, [r2, #0]
 8016ce0:	3a01      	subs	r2, #1
 8016ce2:	701a      	strb	r2, [r3, #0]
 8016ce4:	230f      	movs	r3, #15
 8016ce6:	18fb      	adds	r3, r7, r3
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1e1      	bne.n	8016cb2 <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	0018      	movs	r0, r3
 8016cf2:	f7ff ff3f 	bl	8016b74 <InvShiftRows>
  InvSubBytes(state);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	0018      	movs	r0, r3
 8016cfa:	f7ff fefb 	bl	8016af4 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 8016cfe:	683a      	ldr	r2, [r7, #0]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	0019      	movs	r1, r3
 8016d04:	2000      	movs	r0, #0
 8016d06:	f7ff f924 	bl	8015f52 <AddRoundKey>
}
 8016d0a:	46c0      	nop			; (mov r8, r8)
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	b005      	add	sp, #20
 8016d10:	bd90      	pop	{r4, r7, pc}

08016d12 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 8016d12:	b590      	push	{r4, r7, lr}
 8016d14:	b085      	sub	sp, #20
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
 8016d1a:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8016d1c:	230f      	movs	r3, #15
 8016d1e:	18fb      	adds	r3, r7, r3
 8016d20:	2200      	movs	r2, #0
 8016d22:	701a      	strb	r2, [r3, #0]
 8016d24:	e016      	b.n	8016d54 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 8016d26:	240f      	movs	r4, #15
 8016d28:	193b      	adds	r3, r7, r4
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	687a      	ldr	r2, [r7, #4]
 8016d2e:	18d3      	adds	r3, r2, r3
 8016d30:	7819      	ldrb	r1, [r3, #0]
 8016d32:	193b      	adds	r3, r7, r4
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	683a      	ldr	r2, [r7, #0]
 8016d38:	18d3      	adds	r3, r2, r3
 8016d3a:	781a      	ldrb	r2, [r3, #0]
 8016d3c:	193b      	adds	r3, r7, r4
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	18c3      	adds	r3, r0, r3
 8016d44:	404a      	eors	r2, r1
 8016d46:	b2d2      	uxtb	r2, r2
 8016d48:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8016d4a:	193b      	adds	r3, r7, r4
 8016d4c:	193a      	adds	r2, r7, r4
 8016d4e:	7812      	ldrb	r2, [r2, #0]
 8016d50:	3201      	adds	r2, #1
 8016d52:	701a      	strb	r2, [r3, #0]
 8016d54:	230f      	movs	r3, #15
 8016d56:	18fb      	adds	r3, r7, r3
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	2b0f      	cmp	r3, #15
 8016d5c:	d9e3      	bls.n	8016d26 <XorWithIv+0x14>
  }
}
 8016d5e:	46c0      	nop			; (mov r8, r8)
 8016d60:	46bd      	mov	sp, r7
 8016d62:	b005      	add	sp, #20
 8016d64:	bd90      	pop	{r4, r7, pc}

08016d66 <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 8016d66:	b580      	push	{r7, lr}
 8016d68:	b086      	sub	sp, #24
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	60f8      	str	r0, [r7, #12]
 8016d6e:	60b9      	str	r1, [r7, #8]
 8016d70:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	33b0      	adds	r3, #176	; 0xb0
 8016d76:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8016d78:	2300      	movs	r3, #0
 8016d7a:	617b      	str	r3, [r7, #20]
 8016d7c:	e013      	b.n	8016da6 <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8016d7e:	693a      	ldr	r2, [r7, #16]
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	0011      	movs	r1, r2
 8016d84:	0018      	movs	r0, r3
 8016d86:	f7ff ffc4 	bl	8016d12 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 8016d8a:	68fa      	ldr	r2, [r7, #12]
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	0011      	movs	r1, r2
 8016d90:	0018      	movs	r0, r3
 8016d92:	f7ff ff38 	bl	8016c06 <Cipher>
    Iv = buf;
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	3310      	adds	r3, #16
 8016d9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	3310      	adds	r3, #16
 8016da4:	617b      	str	r3, [r7, #20]
 8016da6:	697a      	ldr	r2, [r7, #20]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d3e7      	bcc.n	8016d7e <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	33b0      	adds	r3, #176	; 0xb0
 8016db2:	6939      	ldr	r1, [r7, #16]
 8016db4:	2210      	movs	r2, #16
 8016db6:	0018      	movs	r0, r3
 8016db8:	f003 f8d6 	bl	8019f68 <memcpy>
}
 8016dbc:	46c0      	nop			; (mov r8, r8)
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	b006      	add	sp, #24
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 8016dc4:	b590      	push	{r4, r7, lr}
 8016dc6:	b08b      	sub	sp, #44	; 0x2c
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	60f8      	str	r0, [r7, #12]
 8016dcc:	60b9      	str	r1, [r7, #8]
 8016dce:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8016dd4:	e026      	b.n	8016e24 <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8016dd6:	2414      	movs	r4, #20
 8016dd8:	193a      	adds	r2, r7, r4
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	0010      	movs	r0, r2
 8016dde:	0019      	movs	r1, r3
 8016de0:	2310      	movs	r3, #16
 8016de2:	001a      	movs	r2, r3
 8016de4:	f003 f8c0 	bl	8019f68 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 8016de8:	68fa      	ldr	r2, [r7, #12]
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	0011      	movs	r1, r2
 8016dee:	0018      	movs	r0, r3
 8016df0:	f7ff ff4c 	bl	8016c8c <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	33b0      	adds	r3, #176	; 0xb0
 8016df8:	001a      	movs	r2, r3
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	0011      	movs	r1, r2
 8016dfe:	0018      	movs	r0, r3
 8016e00:	f7ff ff87 	bl	8016d12 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	33b0      	adds	r3, #176	; 0xb0
 8016e08:	001a      	movs	r2, r3
 8016e0a:	193b      	adds	r3, r7, r4
 8016e0c:	0010      	movs	r0, r2
 8016e0e:	0019      	movs	r1, r3
 8016e10:	2310      	movs	r3, #16
 8016e12:	001a      	movs	r2, r3
 8016e14:	f003 f8a8 	bl	8019f68 <memcpy>
    buf += AES_BLOCKLEN;
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	3310      	adds	r3, #16
 8016e1c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8016e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e20:	3310      	adds	r3, #16
 8016e22:	627b      	str	r3, [r7, #36]	; 0x24
 8016e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d3d4      	bcc.n	8016dd6 <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 8016e2c:	46c0      	nop			; (mov r8, r8)
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	b00b      	add	sp, #44	; 0x2c
 8016e32:	bd90      	pop	{r4, r7, pc}

08016e34 <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8016e40:	230c      	movs	r3, #12
 8016e42:	18fb      	adds	r3, r7, r3
 8016e44:	0018      	movs	r0, r3
 8016e46:	f7fe f8d6 	bl	8014ff6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8016e4a:	68f9      	ldr	r1, [r7, #12]
 8016e4c:	687a      	ldr	r2, [r7, #4]
 8016e4e:	2308      	movs	r3, #8
 8016e50:	2000      	movs	r0, #0
 8016e52:	f002 fb65 	bl	8019520 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	4a05      	ldr	r2, [pc, #20]	; (8016e70 <_itsdk_error_readHeader+0x3c>)
 8016e5c:	4293      	cmp	r3, r2
 8016e5e:	d001      	beq.n	8016e64 <_itsdk_error_readHeader+0x30>
 8016e60:	2301      	movs	r3, #1
 8016e62:	e000      	b.n	8016e66 <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 8016e64:	2300      	movs	r3, #0
}
 8016e66:	0018      	movs	r0, r3
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	b004      	add	sp, #16
 8016e6c:	bd80      	pop	{r7, pc}
 8016e6e:	46c0      	nop			; (mov r8, r8)
 8016e70:	0000ae73 	.word	0x0000ae73

08016e74 <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b084      	sub	sp, #16
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8016e80:	230c      	movs	r3, #12
 8016e82:	18fb      	adds	r3, r7, r3
 8016e84:	0018      	movs	r0, r3
 8016e86:	f7fe f8b6 	bl	8014ff6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8016e8a:	68f9      	ldr	r1, [r7, #12]
 8016e8c:	687a      	ldr	r2, [r7, #4]
 8016e8e:	2308      	movs	r3, #8
 8016e90:	2000      	movs	r0, #0
 8016e92:	f002 faa1 	bl	80193d8 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 8016e96:	2300      	movs	r3, #0
}
 8016e98:	0018      	movs	r0, r3
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	b004      	add	sp, #16
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	0002      	movs	r2, r0
 8016ea8:	6039      	str	r1, [r7, #0]
 8016eaa:	1dbb      	adds	r3, r7, #6
 8016eac:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8016eb2:	230c      	movs	r3, #12
 8016eb4:	18fb      	adds	r3, r7, r3
 8016eb6:	0018      	movs	r0, r3
 8016eb8:	f7fe f89d 	bl	8014ff6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8016ebc:	1dbb      	adds	r3, r7, #6
 8016ebe:	881b      	ldrh	r3, [r3, #0]
 8016ec0:	00da      	lsls	r2, r3, #3
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 8016ec6:	3308      	adds	r3, #8
 8016ec8:	0019      	movs	r1, r3
 8016eca:	683a      	ldr	r2, [r7, #0]
 8016ecc:	2308      	movs	r3, #8
 8016ece:	2000      	movs	r0, #0
 8016ed0:	f002 fa82 	bl	80193d8 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8016ed4:	2300      	movs	r3, #0
}
 8016ed6:	0018      	movs	r0, r3
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	b004      	add	sp, #16
 8016edc:	bd80      	pop	{r7, pc}

08016ede <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 8016ede:	b580      	push	{r7, lr}
 8016ee0:	b084      	sub	sp, #16
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	0002      	movs	r2, r0
 8016ee6:	6039      	str	r1, [r7, #0]
 8016ee8:	1dbb      	adds	r3, r7, #6
 8016eea:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8016eec:	2300      	movs	r3, #0
 8016eee:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8016ef0:	230c      	movs	r3, #12
 8016ef2:	18fb      	adds	r3, r7, r3
 8016ef4:	0018      	movs	r0, r3
 8016ef6:	f7fe f87e 	bl	8014ff6 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8016efa:	1dbb      	adds	r3, r7, #6
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	00da      	lsls	r2, r3, #3
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 8016f04:	3308      	adds	r3, #8
 8016f06:	0019      	movs	r1, r3
 8016f08:	683a      	ldr	r2, [r7, #0]
 8016f0a:	2308      	movs	r3, #8
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	f002 fb07 	bl	8019520 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8016f12:	2300      	movs	r3, #0
}
 8016f14:	0018      	movs	r0, r3
 8016f16:	46bd      	mov	sp, r7
 8016f18:	b004      	add	sp, #16
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b082      	sub	sp, #8
 8016f20:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 8016f22:	003b      	movs	r3, r7
 8016f24:	0018      	movs	r0, r3
 8016f26:	f7ff ff85 	bl	8016e34 <_itsdk_error_readHeader>
 8016f2a:	0003      	movs	r3, r0
 8016f2c:	2b01      	cmp	r3, #1
 8016f2e:	d10c      	bne.n	8016f4a <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 8016f30:	003b      	movs	r3, r7
 8016f32:	4a0f      	ldr	r2, [pc, #60]	; (8016f70 <itsdk_error_setup+0x54>)
 8016f34:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 8016f36:	003b      	movs	r3, r7
 8016f38:	2200      	movs	r2, #0
 8016f3a:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 8016f3c:	003b      	movs	r3, r7
 8016f3e:	2200      	movs	r2, #0
 8016f40:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 8016f42:	003b      	movs	r3, r7
 8016f44:	0018      	movs	r0, r3
 8016f46:	f7ff ff95 	bl	8016e74 <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 8016f4a:	4b0a      	ldr	r3, [pc, #40]	; (8016f74 <itsdk_error_setup+0x58>)
 8016f4c:	4a0a      	ldr	r2, [pc, #40]	; (8016f78 <itsdk_error_setup+0x5c>)
 8016f4e:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 8016f50:	4b08      	ldr	r3, [pc, #32]	; (8016f74 <itsdk_error_setup+0x58>)
 8016f52:	2200      	movs	r2, #0
 8016f54:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 8016f56:	4b07      	ldr	r3, [pc, #28]	; (8016f74 <itsdk_error_setup+0x58>)
 8016f58:	2200      	movs	r2, #0
 8016f5a:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 8016f5c:	4b05      	ldr	r3, [pc, #20]	; (8016f74 <itsdk_error_setup+0x58>)
 8016f5e:	0018      	movs	r0, r3
 8016f60:	f7fd f96a 	bl	8014238 <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 8016f64:	2300      	movs	r3, #0
}
 8016f66:	0018      	movs	r0, r3
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	b002      	add	sp, #8
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	46c0      	nop			; (mov r8, r8)
 8016f70:	ffffae73 	.word	0xffffae73
 8016f74:	20000d18 	.word	0x20000d18
 8016f78:	080171e1 	.word	0x080171e1

08016f7c <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 8016f7c:	b590      	push	{r4, r7, lr}
 8016f7e:	b08b      	sub	sp, #44	; 0x2c
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	000a      	movs	r2, r1
 8016f86:	1cbb      	adds	r3, r7, #2
 8016f88:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	2380      	movs	r3, #128	; 0x80
 8016f8e:	055b      	lsls	r3, r3, #21
 8016f90:	4013      	ands	r3, r2
 8016f92:	d008      	beq.n	8016fa6 <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 8016f94:	1cbb      	adds	r3, r7, #2
 8016f96:	881b      	ldrh	r3, [r3, #0]
 8016f98:	031b      	lsls	r3, r3, #12
 8016f9a:	001a      	movs	r2, r3
 8016f9c:	4b4b      	ldr	r3, [pc, #300]	; (80170cc <itsdk_error_report+0x150>)
 8016f9e:	4013      	ands	r3, r2
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	4313      	orrs	r3, r2
 8016fa4:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 8016fa6:	f001 f847 	bl	8018038 <itsdk_time_get_ms>
 8016faa:	22fa      	movs	r2, #250	; 0xfa
 8016fac:	0092      	lsls	r2, r2, #2
 8016fae:	2300      	movs	r3, #0
 8016fb0:	f7e9 fa8a 	bl	80004c8 <__aeabi_uldivmod>
 8016fb4:	0003      	movs	r3, r0
 8016fb6:	000c      	movs	r4, r1
 8016fb8:	61bb      	str	r3, [r7, #24]
 8016fba:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 8016fbc:	2110      	movs	r1, #16
 8016fbe:	187b      	adds	r3, r7, r1
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 8016fc4:	69ba      	ldr	r2, [r7, #24]
 8016fc6:	187b      	adds	r3, r7, r1
 8016fc8:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 8016fca:	2308      	movs	r3, #8
 8016fcc:	18fb      	adds	r3, r7, r3
 8016fce:	0018      	movs	r0, r3
 8016fd0:	f7ff ff30 	bl	8016e34 <_itsdk_error_readHeader>
 8016fd4:	0003      	movs	r3, r0
 8016fd6:	2b01      	cmp	r3, #1
 8016fd8:	d101      	bne.n	8016fde <itsdk_error_report+0x62>
 8016fda:	2301      	movs	r3, #1
 8016fdc:	e072      	b.n	80170c4 <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 8016fde:	2408      	movs	r4, #8
 8016fe0:	193b      	adds	r3, r7, r4
 8016fe2:	889b      	ldrh	r3, [r3, #4]
 8016fe4:	2210      	movs	r2, #16
 8016fe6:	18ba      	adds	r2, r7, r2
 8016fe8:	0011      	movs	r1, r2
 8016fea:	0018      	movs	r0, r3
 8016fec:	f7ff ff58 	bl	8016ea0 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 8016ff0:	193b      	adds	r3, r7, r4
 8016ff2:	889b      	ldrh	r3, [r3, #4]
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	4a36      	ldr	r2, [pc, #216]	; (80170d0 <itsdk_error_report+0x154>)
 8016ff8:	4013      	ands	r3, r2
 8016ffa:	d504      	bpl.n	8017006 <itsdk_error_report+0x8a>
 8016ffc:	3b01      	subs	r3, #1
 8016ffe:	2240      	movs	r2, #64	; 0x40
 8017000:	4252      	negs	r2, r2
 8017002:	4313      	orrs	r3, r2
 8017004:	3301      	adds	r3, #1
 8017006:	b29a      	uxth	r2, r3
 8017008:	2108      	movs	r1, #8
 801700a:	187b      	adds	r3, r7, r1
 801700c:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 801700e:	187b      	adds	r3, r7, r1
 8017010:	889a      	ldrh	r2, [r3, #4]
 8017012:	187b      	adds	r3, r7, r1
 8017014:	885b      	ldrh	r3, [r3, #2]
 8017016:	429a      	cmp	r2, r3
 8017018:	d10f      	bne.n	801703a <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 801701a:	2308      	movs	r3, #8
 801701c:	18fb      	adds	r3, r7, r3
 801701e:	885b      	ldrh	r3, [r3, #2]
 8017020:	3301      	adds	r3, #1
 8017022:	4a2b      	ldr	r2, [pc, #172]	; (80170d0 <itsdk_error_report+0x154>)
 8017024:	4013      	ands	r3, r2
 8017026:	d504      	bpl.n	8017032 <itsdk_error_report+0xb6>
 8017028:	3b01      	subs	r3, #1
 801702a:	2240      	movs	r2, #64	; 0x40
 801702c:	4252      	negs	r2, r2
 801702e:	4313      	orrs	r3, r2
 8017030:	3301      	adds	r3, #1
 8017032:	b29a      	uxth	r2, r3
 8017034:	2308      	movs	r3, #8
 8017036:	18fb      	adds	r3, r7, r3
 8017038:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 801703a:	2308      	movs	r3, #8
 801703c:	18fb      	adds	r3, r7, r3
 801703e:	0018      	movs	r0, r3
 8017040:	f7ff ff18 	bl	8016e74 <_itsdk_error_writeHeader>

	char t = 'S';
 8017044:	2327      	movs	r3, #39	; 0x27
 8017046:	18fb      	adds	r3, r7, r3
 8017048:	2253      	movs	r2, #83	; 0x53
 801704a:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	2380      	movs	r3, #128	; 0x80
 8017050:	059b      	lsls	r3, r3, #22
 8017052:	4013      	ands	r3, r2
 8017054:	d003      	beq.n	801705e <itsdk_error_report+0xe2>
		t = 'A';
 8017056:	2327      	movs	r3, #39	; 0x27
 8017058:	18fb      	adds	r3, r7, r3
 801705a:	2241      	movs	r2, #65	; 0x41
 801705c:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	0f9b      	lsrs	r3, r3, #30
 8017062:	079a      	lsls	r2, r3, #30
 8017064:	23c0      	movs	r3, #192	; 0xc0
 8017066:	061b      	lsls	r3, r3, #24
 8017068:	429a      	cmp	r2, r3
 801706a:	d108      	bne.n	801707e <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 801706c:	2327      	movs	r3, #39	; 0x27
 801706e:	18fb      	adds	r3, r7, r3
 8017070:	7819      	ldrb	r1, [r3, #0]
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	4b17      	ldr	r3, [pc, #92]	; (80170d4 <itsdk_error_report+0x158>)
 8017076:	0018      	movs	r0, r3
 8017078:	f000 fa0c 	bl	8017494 <log_error>
		while(1);
 801707c:	e7fe      	b.n	801707c <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	da08      	bge.n	8017096 <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 8017084:	2327      	movs	r3, #39	; 0x27
 8017086:	18fb      	adds	r3, r7, r3
 8017088:	7819      	ldrb	r1, [r3, #0]
 801708a:	687a      	ldr	r2, [r7, #4]
 801708c:	4b12      	ldr	r3, [pc, #72]	; (80170d8 <itsdk_error_report+0x15c>)
 801708e:	0018      	movs	r0, r3
 8017090:	f000 fa00 	bl	8017494 <log_error>
 8017094:	e015      	b.n	80170c2 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 8017096:	687a      	ldr	r2, [r7, #4]
 8017098:	2380      	movs	r3, #128	; 0x80
 801709a:	05db      	lsls	r3, r3, #23
 801709c:	4013      	ands	r3, r2
 801709e:	d008      	beq.n	80170b2 <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 80170a0:	2327      	movs	r3, #39	; 0x27
 80170a2:	18fb      	adds	r3, r7, r3
 80170a4:	7819      	ldrb	r1, [r3, #0]
 80170a6:	687a      	ldr	r2, [r7, #4]
 80170a8:	4b0c      	ldr	r3, [pc, #48]	; (80170dc <itsdk_error_report+0x160>)
 80170aa:	0018      	movs	r0, r3
 80170ac:	f000 fa38 	bl	8017520 <log_warn>
 80170b0:	e007      	b.n	80170c2 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 80170b2:	2327      	movs	r3, #39	; 0x27
 80170b4:	18fb      	adds	r3, r7, r3
 80170b6:	7819      	ldrb	r1, [r3, #0]
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	4b09      	ldr	r3, [pc, #36]	; (80170e0 <itsdk_error_report+0x164>)
 80170bc:	0018      	movs	r0, r3
 80170be:	f000 fa75 	bl	80175ac <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 80170c2:	2300      	movs	r3, #0
}
 80170c4:	0018      	movs	r0, r3
 80170c6:	46bd      	mov	sp, r7
 80170c8:	b00b      	add	sp, #44	; 0x2c
 80170ca:	bd90      	pop	{r4, r7, pc}
 80170cc:	0ffff000 	.word	0x0ffff000
 80170d0:	8000003f 	.word	0x8000003f
 80170d4:	0801b5a4 	.word	0x0801b5a4
 80170d8:	0801b5c4 	.word	0x0801b5c4
 80170dc:	0801b5d8 	.word	0x0801b5d8
 80170e0:	0801b5ec 	.word	0x0801b5ec

080170e4 <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b084      	sub	sp, #16
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
 80170ec:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 80170ee:	2308      	movs	r3, #8
 80170f0:	18fb      	adds	r3, r7, r3
 80170f2:	0018      	movs	r0, r3
 80170f4:	f7ff fe9e 	bl	8016e34 <_itsdk_error_readHeader>
 80170f8:	1e03      	subs	r3, r0, #0
 80170fa:	d138      	bne.n	801716e <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	881b      	ldrh	r3, [r3, #0]
 8017100:	4a22      	ldr	r2, [pc, #136]	; (801718c <itsdk_error_get+0xa8>)
 8017102:	4293      	cmp	r3, r2
 8017104:	d104      	bne.n	8017110 <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 8017106:	2308      	movs	r3, #8
 8017108:	18fb      	adds	r3, r7, r3
 801710a:	885a      	ldrh	r2, [r3, #2]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	881a      	ldrh	r2, [r3, #0]
 8017114:	2308      	movs	r3, #8
 8017116:	18fb      	adds	r3, r7, r3
 8017118:	889b      	ldrh	r3, [r3, #4]
 801711a:	429a      	cmp	r2, r3
 801711c:	d027      	beq.n	801716e <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	881b      	ldrh	r3, [r3, #0]
 8017122:	2b3f      	cmp	r3, #63	; 0x3f
 8017124:	d823      	bhi.n	801716e <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	881b      	ldrh	r3, [r3, #0]
 801712a:	683a      	ldr	r2, [r7, #0]
 801712c:	0011      	movs	r1, r2
 801712e:	0018      	movs	r0, r3
 8017130:	f7ff fed5 	bl	8016ede <_itsdk_error_read>
 8017134:	1e03      	subs	r3, r0, #0
 8017136:	d11a      	bne.n	801716e <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	881b      	ldrh	r3, [r3, #0]
 801713c:	3301      	adds	r3, #1
 801713e:	4a14      	ldr	r2, [pc, #80]	; (8017190 <itsdk_error_get+0xac>)
 8017140:	4013      	ands	r3, r2
 8017142:	d504      	bpl.n	801714e <itsdk_error_get+0x6a>
 8017144:	3b01      	subs	r3, #1
 8017146:	2240      	movs	r2, #64	; 0x40
 8017148:	4252      	negs	r2, r2
 801714a:	4313      	orrs	r3, r2
 801714c:	3301      	adds	r3, #1
 801714e:	b29a      	uxth	r2, r3
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	881a      	ldrh	r2, [r3, #0]
 8017158:	2308      	movs	r3, #8
 801715a:	18fb      	adds	r3, r7, r3
 801715c:	889b      	ldrh	r3, [r3, #4]
 801715e:	429a      	cmp	r2, r3
 8017160:	d103      	bne.n	801716a <itsdk_error_get+0x86>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	2201      	movs	r2, #1
 8017166:	4252      	negs	r2, r2
 8017168:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 801716a:	2300      	movs	r3, #0
 801716c:	e00a      	b.n	8017184 <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	2200      	movs	r2, #0
 8017172:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	2200      	movs	r2, #0
 8017178:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	2201      	movs	r2, #1
 801717e:	4252      	negs	r2, r2
 8017180:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 8017182:	2301      	movs	r3, #1
}
 8017184:	0018      	movs	r0, r3
 8017186:	46bd      	mov	sp, r7
 8017188:	b004      	add	sp, #16
 801718a:	bd80      	pop	{r7, pc}
 801718c:	0000fffe 	.word	0x0000fffe
 8017190:	8000003f 	.word	0x8000003f

08017194 <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 8017194:	b580      	push	{r7, lr}
 8017196:	b082      	sub	sp, #8
 8017198:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801719a:	003b      	movs	r3, r7
 801719c:	0018      	movs	r0, r3
 801719e:	f7ff fe49 	bl	8016e34 <_itsdk_error_readHeader>
 80171a2:	0003      	movs	r3, r0
 80171a4:	2b01      	cmp	r3, #1
 80171a6:	d101      	bne.n	80171ac <itsdk_error_clear+0x18>
 80171a8:	2301      	movs	r3, #1
 80171aa:	e008      	b.n	80171be <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 80171ac:	003b      	movs	r3, r7
 80171ae:	889a      	ldrh	r2, [r3, #4]
 80171b0:	003b      	movs	r3, r7
 80171b2:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 80171b4:	003b      	movs	r3, r7
 80171b6:	0018      	movs	r0, r3
 80171b8:	f7ff fe5c 	bl	8016e74 <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 80171bc:	2300      	movs	r3, #0
}
 80171be:	0018      	movs	r0, r3
 80171c0:	46bd      	mov	sp, r7
 80171c2:	b002      	add	sp, #8
 80171c4:	bd80      	pop	{r7, pc}

080171c6 <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 80171c6:	b580      	push	{r7, lr}
 80171c8:	b082      	sub	sp, #8
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2282      	movs	r2, #130	; 0x82
 80171d2:	0092      	lsls	r2, r2, #2
 80171d4:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 80171d6:	2300      	movs	r3, #0
}
 80171d8:	0018      	movs	r0, r3
 80171da:	46bd      	mov	sp, r7
 80171dc:	b002      	add	sp, #8
 80171de:	bd80      	pop	{r7, pc}

080171e0 <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 80171e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171e2:	b08b      	sub	sp, #44	; 0x2c
 80171e4:	af04      	add	r7, sp, #16
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	000a      	movs	r2, r1
 80171ea:	1cfb      	adds	r3, r7, #3
 80171ec:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 80171ee:	1cfb      	adds	r3, r7, #3
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	d000      	beq.n	80171f8 <_itsdk_error_consolePriv+0x18>
 80171f6:	e087      	b.n	8017308 <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	2b45      	cmp	r3, #69	; 0x45
 80171fe:	d100      	bne.n	8017202 <_itsdk_error_consolePriv+0x22>
 8017200:	e07a      	b.n	80172f8 <_itsdk_error_consolePriv+0x118>
 8017202:	2b65      	cmp	r3, #101	; 0x65
 8017204:	d010      	beq.n	8017228 <_itsdk_error_consolePriv+0x48>
 8017206:	2b3f      	cmp	r3, #63	; 0x3f
 8017208:	d000      	beq.n	801720c <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 801720a:	e07e      	b.n	801730a <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 801720c:	4b41      	ldr	r3, [pc, #260]	; (8017314 <_itsdk_error_consolePriv+0x134>)
 801720e:	0018      	movs	r0, r3
 8017210:	f7fc fe52 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 8017214:	4b40      	ldr	r3, [pc, #256]	; (8017318 <_itsdk_error_consolePriv+0x138>)
 8017216:	0018      	movs	r0, r3
 8017218:	f7fc fe4e 	bl	8013eb8 <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 801721c:	4b3f      	ldr	r3, [pc, #252]	; (801731c <_itsdk_error_consolePriv+0x13c>)
 801721e:	0018      	movs	r0, r3
 8017220:	f7fc fe4a 	bl	8013eb8 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8017224:	2300      	movs	r3, #0
 8017226:	e071      	b.n	801730c <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 8017228:	2314      	movs	r3, #20
 801722a:	18fb      	adds	r3, r7, r3
 801722c:	2202      	movs	r2, #2
 801722e:	4252      	negs	r2, r2
 8017230:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 8017232:	e051      	b.n	80172d8 <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 8017234:	230c      	movs	r3, #12
 8017236:	18fb      	adds	r3, r7, r3
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	0f9b      	lsrs	r3, r3, #30
 801723c:	079b      	lsls	r3, r3, #30
 801723e:	2280      	movs	r2, #128	; 0x80
 8017240:	0612      	lsls	r2, r2, #24
 8017242:	4293      	cmp	r3, r2
 8017244:	d011      	beq.n	801726a <_itsdk_error_consolePriv+0x8a>
 8017246:	22c0      	movs	r2, #192	; 0xc0
 8017248:	0612      	lsls	r2, r2, #24
 801724a:	4293      	cmp	r3, r2
 801724c:	d012      	beq.n	8017274 <_itsdk_error_consolePriv+0x94>
 801724e:	2280      	movs	r2, #128	; 0x80
 8017250:	05d2      	lsls	r2, r2, #23
 8017252:	4293      	cmp	r3, r2
 8017254:	d004      	beq.n	8017260 <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 8017256:	2317      	movs	r3, #23
 8017258:	18fb      	adds	r3, r7, r3
 801725a:	2249      	movs	r2, #73	; 0x49
 801725c:	701a      	strb	r2, [r3, #0]
 801725e:	e00e      	b.n	801727e <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 8017260:	2317      	movs	r3, #23
 8017262:	18fb      	adds	r3, r7, r3
 8017264:	2257      	movs	r2, #87	; 0x57
 8017266:	701a      	strb	r2, [r3, #0]
 8017268:	e009      	b.n	801727e <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 801726a:	2317      	movs	r3, #23
 801726c:	18fb      	adds	r3, r7, r3
 801726e:	2245      	movs	r2, #69	; 0x45
 8017270:	701a      	strb	r2, [r3, #0]
 8017272:	e004      	b.n	801727e <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 8017274:	2317      	movs	r3, #23
 8017276:	18fb      	adds	r3, r7, r3
 8017278:	2246      	movs	r2, #70	; 0x46
 801727a:	701a      	strb	r2, [r3, #0]
 801727c:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801727e:	2317      	movs	r3, #23
 8017280:	18fb      	adds	r3, r7, r3
 8017282:	781c      	ldrb	r4, [r3, #0]
 8017284:	220c      	movs	r2, #12
 8017286:	18bb      	adds	r3, r7, r2
 8017288:	681d      	ldr	r5, [r3, #0]
 801728a:	18bb      	adds	r3, r7, r2
 801728c:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 801728e:	18bb      	adds	r3, r7, r2
 8017290:	685a      	ldr	r2, [r3, #4]
 8017292:	2380      	movs	r3, #128	; 0x80
 8017294:	059b      	lsls	r3, r3, #22
 8017296:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8017298:	d001      	beq.n	801729e <_itsdk_error_consolePriv+0xbe>
 801729a:	2241      	movs	r2, #65	; 0x41
 801729c:	e000      	b.n	80172a0 <_itsdk_error_consolePriv+0xc0>
 801729e:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 80172a0:	200c      	movs	r0, #12
 80172a2:	183b      	adds	r3, r7, r0
 80172a4:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 80172a6:	051b      	lsls	r3, r3, #20
 80172a8:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 80172aa:	183b      	adds	r3, r7, r0
 80172ac:	6858      	ldr	r0, [r3, #4]
 80172ae:	2380      	movs	r3, #128	; 0x80
 80172b0:	055b      	lsls	r3, r3, #21
 80172b2:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 80172b4:	d006      	beq.n	80172c4 <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 80172b6:	230c      	movs	r3, #12
 80172b8:	18fb      	adds	r3, r7, r3
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 80172be:	041b      	lsls	r3, r3, #16
 80172c0:	0c1b      	lsrs	r3, r3, #16
 80172c2:	e000      	b.n	80172c6 <_itsdk_error_consolePriv+0xe6>
 80172c4:	2300      	movs	r3, #0
 80172c6:	4816      	ldr	r0, [pc, #88]	; (8017320 <_itsdk_error_consolePriv+0x140>)
 80172c8:	9302      	str	r3, [sp, #8]
 80172ca:	9101      	str	r1, [sp, #4]
 80172cc:	9200      	str	r2, [sp, #0]
 80172ce:	0033      	movs	r3, r6
 80172d0:	002a      	movs	r2, r5
 80172d2:	0021      	movs	r1, r4
 80172d4:	f7fc fdf0 	bl	8013eb8 <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 80172d8:	230c      	movs	r3, #12
 80172da:	18fa      	adds	r2, r7, r3
 80172dc:	2314      	movs	r3, #20
 80172de:	18fb      	adds	r3, r7, r3
 80172e0:	0011      	movs	r1, r2
 80172e2:	0018      	movs	r0, r3
 80172e4:	f7ff fefe 	bl	80170e4 <itsdk_error_get>
 80172e8:	1e03      	subs	r3, r0, #0
 80172ea:	d0a3      	beq.n	8017234 <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 80172ec:	4b0d      	ldr	r3, [pc, #52]	; (8017324 <_itsdk_error_consolePriv+0x144>)
 80172ee:	0018      	movs	r0, r3
 80172f0:	f7fc fde2 	bl	8013eb8 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 80172f4:	2300      	movs	r3, #0
 80172f6:	e009      	b.n	801730c <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 80172f8:	f7ff ff4c 	bl	8017194 <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 80172fc:	4b09      	ldr	r3, [pc, #36]	; (8017324 <_itsdk_error_consolePriv+0x144>)
 80172fe:	0018      	movs	r0, r3
 8017300:	f7fc fdda 	bl	8013eb8 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 8017304:	2300      	movs	r3, #0
 8017306:	e001      	b.n	801730c <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 8017308:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 801730a:	2301      	movs	r3, #1
}
 801730c:	0018      	movs	r0, r3
 801730e:	46bd      	mov	sp, r7
 8017310:	b007      	add	sp, #28
 8017312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017314:	0801b600 	.word	0x0801b600
 8017318:	0801b610 	.word	0x0801b610
 801731c:	0801b630 	.word	0x0801b630
 8017320:	0801b654 	.word	0x0801b654
 8017324:	0801b680 	.word	0x0801b680

08017328 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	0002      	movs	r2, r0
 8017330:	1dbb      	adds	r3, r7, #6
 8017332:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 8017334:	1dbb      	adds	r3, r7, #6
 8017336:	881b      	ldrh	r3, [r3, #0]
 8017338:	4a51      	ldr	r2, [pc, #324]	; (8017480 <log_init+0x158>)
 801733a:	4013      	ands	r3, r2
 801733c:	17da      	asrs	r2, r3, #31
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	0fdb      	lsrs	r3, r3, #31
 8017342:	b2da      	uxtb	r2, r3
 8017344:	4b4f      	ldr	r3, [pc, #316]	; (8017484 <log_init+0x15c>)
 8017346:	2101      	movs	r1, #1
 8017348:	400a      	ands	r2, r1
 801734a:	1890      	adds	r0, r2, r2
 801734c:	781a      	ldrb	r2, [r3, #0]
 801734e:	2102      	movs	r1, #2
 8017350:	438a      	bics	r2, r1
 8017352:	1c11      	adds	r1, r2, #0
 8017354:	1c02      	adds	r2, r0, #0
 8017356:	430a      	orrs	r2, r1
 8017358:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 801735a:	1dbb      	adds	r3, r7, #6
 801735c:	881b      	ldrh	r3, [r3, #0]
 801735e:	4a4a      	ldr	r2, [pc, #296]	; (8017488 <log_init+0x160>)
 8017360:	4013      	ands	r3, r2
 8017362:	17da      	asrs	r2, r3, #31
 8017364:	1ad3      	subs	r3, r2, r3
 8017366:	0fdb      	lsrs	r3, r3, #31
 8017368:	b2da      	uxtb	r2, r3
 801736a:	4b46      	ldr	r3, [pc, #280]	; (8017484 <log_init+0x15c>)
 801736c:	2101      	movs	r1, #1
 801736e:	400a      	ands	r2, r1
 8017370:	0090      	lsls	r0, r2, #2
 8017372:	781a      	ldrb	r2, [r3, #0]
 8017374:	2104      	movs	r1, #4
 8017376:	438a      	bics	r2, r1
 8017378:	1c11      	adds	r1, r2, #0
 801737a:	1c02      	adds	r2, r0, #0
 801737c:	430a      	orrs	r2, r1
 801737e:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 8017380:	1dbb      	adds	r3, r7, #6
 8017382:	881b      	ldrh	r3, [r3, #0]
 8017384:	4a41      	ldr	r2, [pc, #260]	; (801748c <log_init+0x164>)
 8017386:	4013      	ands	r3, r2
 8017388:	17da      	asrs	r2, r3, #31
 801738a:	1ad3      	subs	r3, r2, r3
 801738c:	0fdb      	lsrs	r3, r3, #31
 801738e:	b2da      	uxtb	r2, r3
 8017390:	4b3c      	ldr	r3, [pc, #240]	; (8017484 <log_init+0x15c>)
 8017392:	2101      	movs	r1, #1
 8017394:	400a      	ands	r2, r1
 8017396:	00d0      	lsls	r0, r2, #3
 8017398:	781a      	ldrb	r2, [r3, #0]
 801739a:	2108      	movs	r1, #8
 801739c:	438a      	bics	r2, r1
 801739e:	1c11      	adds	r1, r2, #0
 80173a0:	1c02      	adds	r2, r0, #0
 80173a2:	430a      	orrs	r2, r1
 80173a4:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 80173a6:	1dbb      	adds	r3, r7, #6
 80173a8:	881b      	ldrh	r3, [r3, #0]
 80173aa:	4a39      	ldr	r2, [pc, #228]	; (8017490 <log_init+0x168>)
 80173ac:	4013      	ands	r3, r2
 80173ae:	17da      	asrs	r2, r3, #31
 80173b0:	1ad3      	subs	r3, r2, r3
 80173b2:	0fdb      	lsrs	r3, r3, #31
 80173b4:	b2da      	uxtb	r2, r3
 80173b6:	4b33      	ldr	r3, [pc, #204]	; (8017484 <log_init+0x15c>)
 80173b8:	2101      	movs	r1, #1
 80173ba:	400a      	ands	r2, r1
 80173bc:	0110      	lsls	r0, r2, #4
 80173be:	781a      	ldrb	r2, [r3, #0]
 80173c0:	2110      	movs	r1, #16
 80173c2:	438a      	bics	r2, r1
 80173c4:	1c11      	adds	r1, r2, #0
 80173c6:	1c02      	adds	r2, r0, #0
 80173c8:	430a      	orrs	r2, r1
 80173ca:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 80173cc:	1dbb      	adds	r3, r7, #6
 80173ce:	881a      	ldrh	r2, [r3, #0]
 80173d0:	23f0      	movs	r3, #240	; 0xf0
 80173d2:	011b      	lsls	r3, r3, #4
 80173d4:	4013      	ands	r3, r2
 80173d6:	17da      	asrs	r2, r3, #31
 80173d8:	1ad3      	subs	r3, r2, r3
 80173da:	0fdb      	lsrs	r3, r3, #31
 80173dc:	b2da      	uxtb	r2, r3
 80173de:	4b29      	ldr	r3, [pc, #164]	; (8017484 <log_init+0x15c>)
 80173e0:	2101      	movs	r1, #1
 80173e2:	400a      	ands	r2, r1
 80173e4:	0150      	lsls	r0, r2, #5
 80173e6:	781a      	ldrb	r2, [r3, #0]
 80173e8:	2120      	movs	r1, #32
 80173ea:	438a      	bics	r2, r1
 80173ec:	1c11      	adds	r1, r2, #0
 80173ee:	1c02      	adds	r2, r0, #0
 80173f0:	430a      	orrs	r2, r1
 80173f2:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 80173f4:	1dbb      	adds	r3, r7, #6
 80173f6:	881b      	ldrh	r3, [r3, #0]
 80173f8:	22f0      	movs	r2, #240	; 0xf0
 80173fa:	4013      	ands	r3, r2
 80173fc:	17da      	asrs	r2, r3, #31
 80173fe:	1ad3      	subs	r3, r2, r3
 8017400:	0fdb      	lsrs	r3, r3, #31
 8017402:	b2da      	uxtb	r2, r3
 8017404:	4b1f      	ldr	r3, [pc, #124]	; (8017484 <log_init+0x15c>)
 8017406:	2101      	movs	r1, #1
 8017408:	400a      	ands	r2, r1
 801740a:	0190      	lsls	r0, r2, #6
 801740c:	781a      	ldrb	r2, [r3, #0]
 801740e:	2140      	movs	r1, #64	; 0x40
 8017410:	438a      	bics	r2, r1
 8017412:	1c11      	adds	r1, r2, #0
 8017414:	1c02      	adds	r2, r0, #0
 8017416:	430a      	orrs	r2, r1
 8017418:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 801741a:	1dbb      	adds	r3, r7, #6
 801741c:	881b      	ldrh	r3, [r3, #0]
 801741e:	220f      	movs	r2, #15
 8017420:	4013      	ands	r3, r2
 8017422:	17da      	asrs	r2, r3, #31
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	0fdb      	lsrs	r3, r3, #31
 8017428:	b2da      	uxtb	r2, r3
 801742a:	4b16      	ldr	r3, [pc, #88]	; (8017484 <log_init+0x15c>)
 801742c:	01d0      	lsls	r0, r2, #7
 801742e:	781a      	ldrb	r2, [r3, #0]
 8017430:	217f      	movs	r1, #127	; 0x7f
 8017432:	400a      	ands	r2, r1
 8017434:	1c11      	adds	r1, r2, #0
 8017436:	1c02      	adds	r2, r0, #0
 8017438:	430a      	orrs	r2, r1
 801743a:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 801743c:	1dbb      	adds	r3, r7, #6
 801743e:	881a      	ldrh	r2, [r3, #0]
 8017440:	23f0      	movs	r3, #240	; 0xf0
 8017442:	021b      	lsls	r3, r3, #8
 8017444:	4013      	ands	r3, r2
 8017446:	17da      	asrs	r2, r3, #31
 8017448:	1ad3      	subs	r3, r2, r3
 801744a:	0fdb      	lsrs	r3, r3, #31
 801744c:	b2da      	uxtb	r2, r3
 801744e:	4b0d      	ldr	r3, [pc, #52]	; (8017484 <log_init+0x15c>)
 8017450:	2101      	movs	r1, #1
 8017452:	400a      	ands	r2, r1
 8017454:	0010      	movs	r0, r2
 8017456:	785a      	ldrb	r2, [r3, #1]
 8017458:	2101      	movs	r1, #1
 801745a:	438a      	bics	r2, r1
 801745c:	1c11      	adds	r1, r2, #0
 801745e:	1c02      	adds	r2, r0, #0
 8017460:	430a      	orrs	r2, r1
 8017462:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 8017464:	4b07      	ldr	r3, [pc, #28]	; (8017484 <log_init+0x15c>)
 8017466:	1dba      	adds	r2, r7, #6
 8017468:	8812      	ldrh	r2, [r2, #0]
 801746a:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 801746c:	4b05      	ldr	r3, [pc, #20]	; (8017484 <log_init+0x15c>)
 801746e:	781a      	ldrb	r2, [r3, #0]
 8017470:	2101      	movs	r1, #1
 8017472:	430a      	orrs	r2, r1
 8017474:	701a      	strb	r2, [r3, #0]
  return true;
 8017476:	2301      	movs	r3, #1
}
 8017478:	0018      	movs	r0, r3
 801747a:	46bd      	mov	sp, r7
 801747c:	b002      	add	sp, #8
 801747e:	bd80      	pop	{r7, pc}
 8017480:	00001111 	.word	0x00001111
 8017484:	200011d8 	.word	0x200011d8
 8017488:	00002222 	.word	0x00002222
 801748c:	00004444 	.word	0x00004444
 8017490:	00008888 	.word	0x00008888

08017494 <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 8017494:	b40f      	push	{r0, r1, r2, r3}
 8017496:	b580      	push	{r7, lr}
 8017498:	b096      	sub	sp, #88	; 0x58
 801749a:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 801749c:	4b1f      	ldr	r3, [pc, #124]	; (801751c <log_error+0x88>)
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	2202      	movs	r2, #2
 80174a2:	4013      	ands	r3, r2
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d031      	beq.n	801750e <log_error+0x7a>
 80174aa:	4b1c      	ldr	r3, [pc, #112]	; (801751c <log_error+0x88>)
 80174ac:	781b      	ldrb	r3, [r3, #0]
 80174ae:	2201      	movs	r2, #1
 80174b0:	4013      	ands	r3, r2
 80174b2:	b2db      	uxtb	r3, r3
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d02a      	beq.n	801750e <log_error+0x7a>
    va_start(args,format);
 80174b8:	2364      	movs	r3, #100	; 0x64
 80174ba:	18fb      	adds	r3, r7, r3
 80174bc:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80174be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80174c2:	1d38      	adds	r0, r7, #4
 80174c4:	2150      	movs	r1, #80	; 0x50
 80174c6:	f002 fd9f 	bl	801a008 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 80174ca:	4b14      	ldr	r3, [pc, #80]	; (801751c <log_error+0x88>)
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2220      	movs	r2, #32
 80174d0:	4013      	ands	r3, r2
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d003      	beq.n	80174e0 <log_error+0x4c>
      serial1_print(fmtBuffer);
 80174d8:	1d3b      	adds	r3, r7, #4
 80174da:	0018      	movs	r0, r3
 80174dc:	f001 ff02 	bl	80192e4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 80174e0:	4b0e      	ldr	r3, [pc, #56]	; (801751c <log_error+0x88>)
 80174e2:	781b      	ldrb	r3, [r3, #0]
 80174e4:	2240      	movs	r2, #64	; 0x40
 80174e6:	4013      	ands	r3, r2
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d003      	beq.n	80174f6 <log_error+0x62>
      serial2_print(fmtBuffer);
 80174ee:	1d3b      	adds	r3, r7, #4
 80174f0:	0018      	movs	r0, r3
 80174f2:	f001 feff 	bl	80192f4 <serial2_print>
    }

    if ( __log.onDebug  ) {
 80174f6:	4b09      	ldr	r3, [pc, #36]	; (801751c <log_error+0x88>)
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	227f      	movs	r2, #127	; 0x7f
 80174fc:	4393      	bics	r3, r2
 80174fe:	b2db      	uxtb	r3, r3
 8017500:	2b00      	cmp	r3, #0
 8017502:	d004      	beq.n	801750e <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 8017504:	1d3b      	adds	r3, r7, #4
 8017506:	0019      	movs	r1, r3
 8017508:	2003      	movs	r0, #3
 801750a:	f001 ff59 	bl	80193c0 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 801750e:	46c0      	nop			; (mov r8, r8)
 8017510:	46bd      	mov	sp, r7
 8017512:	b016      	add	sp, #88	; 0x58
 8017514:	bc80      	pop	{r7}
 8017516:	bc08      	pop	{r3}
 8017518:	b004      	add	sp, #16
 801751a:	4718      	bx	r3
 801751c:	200011d8 	.word	0x200011d8

08017520 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 8017520:	b40f      	push	{r0, r1, r2, r3}
 8017522:	b580      	push	{r7, lr}
 8017524:	b096      	sub	sp, #88	; 0x58
 8017526:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 8017528:	4b1f      	ldr	r3, [pc, #124]	; (80175a8 <log_warn+0x88>)
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	2204      	movs	r2, #4
 801752e:	4013      	ands	r3, r2
 8017530:	b2db      	uxtb	r3, r3
 8017532:	2b00      	cmp	r3, #0
 8017534:	d031      	beq.n	801759a <log_warn+0x7a>
 8017536:	4b1c      	ldr	r3, [pc, #112]	; (80175a8 <log_warn+0x88>)
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	2201      	movs	r2, #1
 801753c:	4013      	ands	r3, r2
 801753e:	b2db      	uxtb	r3, r3
 8017540:	2b00      	cmp	r3, #0
 8017542:	d02a      	beq.n	801759a <log_warn+0x7a>
    va_start(args,format);
 8017544:	2364      	movs	r3, #100	; 0x64
 8017546:	18fb      	adds	r3, r7, r3
 8017548:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801754a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801754c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801754e:	1d38      	adds	r0, r7, #4
 8017550:	2150      	movs	r1, #80	; 0x50
 8017552:	f002 fd59 	bl	801a008 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 8017556:	4b14      	ldr	r3, [pc, #80]	; (80175a8 <log_warn+0x88>)
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	2220      	movs	r2, #32
 801755c:	4013      	ands	r3, r2
 801755e:	b2db      	uxtb	r3, r3
 8017560:	2b00      	cmp	r3, #0
 8017562:	d003      	beq.n	801756c <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 8017564:	1d3b      	adds	r3, r7, #4
 8017566:	0018      	movs	r0, r3
 8017568:	f001 febc 	bl	80192e4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801756c:	4b0e      	ldr	r3, [pc, #56]	; (80175a8 <log_warn+0x88>)
 801756e:	781b      	ldrb	r3, [r3, #0]
 8017570:	2240      	movs	r2, #64	; 0x40
 8017572:	4013      	ands	r3, r2
 8017574:	b2db      	uxtb	r3, r3
 8017576:	2b00      	cmp	r3, #0
 8017578:	d003      	beq.n	8017582 <log_warn+0x62>
    	serial2_print(fmtBuffer);
 801757a:	1d3b      	adds	r3, r7, #4
 801757c:	0018      	movs	r0, r3
 801757e:	f001 feb9 	bl	80192f4 <serial2_print>
    }

    if ( __log.onDebug ) {
 8017582:	4b09      	ldr	r3, [pc, #36]	; (80175a8 <log_warn+0x88>)
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	227f      	movs	r2, #127	; 0x7f
 8017588:	4393      	bics	r3, r2
 801758a:	b2db      	uxtb	r3, r3
 801758c:	2b00      	cmp	r3, #0
 801758e:	d004      	beq.n	801759a <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 8017590:	1d3b      	adds	r3, r7, #4
 8017592:	0019      	movs	r1, r3
 8017594:	2002      	movs	r0, #2
 8017596:	f001 ff13 	bl	80193c0 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 801759a:	46c0      	nop			; (mov r8, r8)
 801759c:	46bd      	mov	sp, r7
 801759e:	b016      	add	sp, #88	; 0x58
 80175a0:	bc80      	pop	{r7}
 80175a2:	bc08      	pop	{r3}
 80175a4:	b004      	add	sp, #16
 80175a6:	4718      	bx	r3
 80175a8:	200011d8 	.word	0x200011d8

080175ac <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 80175ac:	b40f      	push	{r0, r1, r2, r3}
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b096      	sub	sp, #88	; 0x58
 80175b2:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 80175b4:	4b1f      	ldr	r3, [pc, #124]	; (8017634 <log_info+0x88>)
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	2208      	movs	r2, #8
 80175ba:	4013      	ands	r3, r2
 80175bc:	b2db      	uxtb	r3, r3
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d031      	beq.n	8017626 <log_info+0x7a>
 80175c2:	4b1c      	ldr	r3, [pc, #112]	; (8017634 <log_info+0x88>)
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	2201      	movs	r2, #1
 80175c8:	4013      	ands	r3, r2
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d02a      	beq.n	8017626 <log_info+0x7a>
    va_start(args,format);
 80175d0:	2364      	movs	r3, #100	; 0x64
 80175d2:	18fb      	adds	r3, r7, r3
 80175d4:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80175d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80175da:	1d38      	adds	r0, r7, #4
 80175dc:	2150      	movs	r1, #80	; 0x50
 80175de:	f002 fd13 	bl	801a008 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 80175e2:	4b14      	ldr	r3, [pc, #80]	; (8017634 <log_info+0x88>)
 80175e4:	781b      	ldrb	r3, [r3, #0]
 80175e6:	2220      	movs	r2, #32
 80175e8:	4013      	ands	r3, r2
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d003      	beq.n	80175f8 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 80175f0:	1d3b      	adds	r3, r7, #4
 80175f2:	0018      	movs	r0, r3
 80175f4:	f001 fe76 	bl	80192e4 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 80175f8:	4b0e      	ldr	r3, [pc, #56]	; (8017634 <log_info+0x88>)
 80175fa:	781b      	ldrb	r3, [r3, #0]
 80175fc:	2240      	movs	r2, #64	; 0x40
 80175fe:	4013      	ands	r3, r2
 8017600:	b2db      	uxtb	r3, r3
 8017602:	2b00      	cmp	r3, #0
 8017604:	d003      	beq.n	801760e <log_info+0x62>
    	serial2_print(fmtBuffer);
 8017606:	1d3b      	adds	r3, r7, #4
 8017608:	0018      	movs	r0, r3
 801760a:	f001 fe73 	bl	80192f4 <serial2_print>
    }

    if ( __log.onDebug ) {
 801760e:	4b09      	ldr	r3, [pc, #36]	; (8017634 <log_info+0x88>)
 8017610:	781b      	ldrb	r3, [r3, #0]
 8017612:	227f      	movs	r2, #127	; 0x7f
 8017614:	4393      	bics	r3, r2
 8017616:	b2db      	uxtb	r3, r3
 8017618:	2b00      	cmp	r3, #0
 801761a:	d004      	beq.n	8017626 <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 801761c:	1d3b      	adds	r3, r7, #4
 801761e:	0019      	movs	r1, r3
 8017620:	2001      	movs	r0, #1
 8017622:	f001 fecd 	bl	80193c0 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 8017626:	46c0      	nop			; (mov r8, r8)
 8017628:	46bd      	mov	sp, r7
 801762a:	b016      	add	sp, #88	; 0x58
 801762c:	bc80      	pop	{r7}
 801762e:	bc08      	pop	{r3}
 8017630:	b004      	add	sp, #16
 8017632:	4718      	bx	r3
 8017634:	200011d8 	.word	0x200011d8

08017638 <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 8017638:	b580      	push	{r7, lr}
 801763a:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 801763c:	f7f0 f942 	bl	80078c4 <lorawan_driver_LORA_getJoinState>
 8017640:	0003      	movs	r3, r0
 8017642:	3b03      	subs	r3, #3
 8017644:	425a      	negs	r2, r3
 8017646:	4153      	adcs	r3, r2
 8017648:	b2db      	uxtb	r3, r3
}
 801764a:	0018      	movs	r0, r3
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}

08017650 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 8017650:	b5b0      	push	{r4, r5, r7, lr}
 8017652:	b090      	sub	sp, #64	; 0x40
 8017654:	af00      	add	r7, sp, #0
 8017656:	0002      	movs	r2, r0
 8017658:	1dfb      	adds	r3, r7, #7
 801765a:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801765c:	1dfb      	adds	r3, r7, #7
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d107      	bne.n	8017674 <itsdk_lorawan_resetFactoryDefaults+0x24>
 8017664:	232c      	movs	r3, #44	; 0x2c
 8017666:	18fb      	adds	r3, r7, r3
 8017668:	0019      	movs	r1, r3
 801766a:	2007      	movs	r0, #7
 801766c:	f7fd fd6c 	bl	8015148 <itsdk_secstore_readBlock>
 8017670:	1e03      	subs	r3, r0, #0
 8017672:	d038      	beq.n	80176e6 <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 8017674:	2324      	movs	r3, #36	; 0x24
 8017676:	18fb      	adds	r3, r7, r3
 8017678:	4a1d      	ldr	r2, [pc, #116]	; (80176f0 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 801767a:	ca03      	ldmia	r2!, {r0, r1}
 801767c:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 801767e:	231c      	movs	r3, #28
 8017680:	18fb      	adds	r3, r7, r3
 8017682:	4a1c      	ldr	r2, [pc, #112]	; (80176f4 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 8017684:	ca03      	ldmia	r2!, {r0, r1}
 8017686:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 8017688:	2300      	movs	r3, #0
 801768a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801768c:	e016      	b.n	80176bc <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 801768e:	2324      	movs	r3, #36	; 0x24
 8017690:	18fa      	adds	r2, r7, r3
 8017692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017694:	18d3      	adds	r3, r2, r3
 8017696:	7819      	ldrb	r1, [r3, #0]
 8017698:	202c      	movs	r0, #44	; 0x2c
 801769a:	183a      	adds	r2, r7, r0
 801769c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801769e:	18d3      	adds	r3, r2, r3
 80176a0:	1c0a      	adds	r2, r1, #0
 80176a2:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 80176a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a6:	3308      	adds	r3, #8
 80176a8:	221c      	movs	r2, #28
 80176aa:	18b9      	adds	r1, r7, r2
 80176ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80176ae:	188a      	adds	r2, r1, r2
 80176b0:	7811      	ldrb	r1, [r2, #0]
 80176b2:	183a      	adds	r2, r7, r0
 80176b4:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 80176b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176b8:	3301      	adds	r3, #1
 80176ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80176bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176be:	2b07      	cmp	r3, #7
 80176c0:	dde5      	ble.n	801768e <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 80176c2:	232c      	movs	r3, #44	; 0x2c
 80176c4:	18fb      	adds	r3, r7, r3
 80176c6:	0019      	movs	r1, r3
 80176c8:	2007      	movs	r0, #7
 80176ca:	f7fd fd8a 	bl	80151e2 <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 80176ce:	210c      	movs	r1, #12
 80176d0:	187b      	adds	r3, r7, r1
 80176d2:	4a09      	ldr	r2, [pc, #36]	; (80176f8 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 80176d4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80176d6:	c331      	stmia	r3!, {r0, r4, r5}
 80176d8:	6812      	ldr	r2, [r2, #0]
 80176da:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 80176dc:	187b      	adds	r3, r7, r1
 80176de:	0019      	movs	r1, r3
 80176e0:	2008      	movs	r0, #8
 80176e2:	f7fd fd7e 	bl	80151e2 <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 80176e6:	2300      	movs	r3, #0
}
 80176e8:	0018      	movs	r0, r3
 80176ea:	46bd      	mov	sp, r7
 80176ec:	b010      	add	sp, #64	; 0x40
 80176ee:	bdb0      	pop	{r4, r5, r7, pc}
 80176f0:	0801b688 	.word	0x0801b688
 80176f4:	0801b690 	.word	0x0801b690
 80176f8:	0801b698 	.word	0x0801b698

080176fc <itsdk_lorawan_loop>:

/**
 * This function need to be called in the project_loop function
 * to manage the lorawan stack ( mandatory for async mode )
 */
void itsdk_lorawan_loop() {
 80176fc:	b580      	push	{r7, lr}
 80176fe:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_loop\r\n"));
	lorawan_driver_loop();
 8017700:	f7f0 f8c4 	bl	800788c <lorawan_driver_loop>
}
 8017704:	46c0      	nop			; (mov r8, r8)
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
	...

0801770c <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 801770c:	4b13      	ldr	r3, [pc, #76]	; (801775c <lowPower_switch+0x50>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 801770e:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d000      	beq.n	8017718 <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 8017716:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t schedDur = itdt_sched_nextRun();
 8017718:	f000 fba6 	bl	8017e68 <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 801771c:	4d10      	ldr	r5, [pc, #64]	; (8017760 <lowPower_switch+0x54>)
			uint32_t schedDur = itdt_sched_nextRun();
 801771e:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 8017720:	42a8      	cmp	r0, r5
 8017722:	d809      	bhi.n	8017738 <lowPower_switch+0x2c>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 8017724:	f000 fe2e 	bl	8018384 <itsdk_stimer_nextTimeoutMs>
 8017728:	0003      	movs	r3, r0
 801772a:	0020      	movs	r0, r4
 801772c:	429c      	cmp	r4, r3
 801772e:	d900      	bls.n	8017732 <lowPower_switch+0x26>
 8017730:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 8017732:	2805      	cmp	r0, #5
 8017734:	d9ef      	bls.n	8017716 <lowPower_switch+0xa>
 8017736:	e004      	b.n	8017742 <lowPower_switch+0x36>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 8017738:	f000 fe24 	bl	8018384 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 801773c:	42a8      	cmp	r0, r5
 801773e:	d9f8      	bls.n	8017732 <lowPower_switch+0x26>
			duration = ITSDK_LOWPOWER_RTC_MS;
 8017740:	4808      	ldr	r0, [pc, #32]	; (8017764 <lowPower_switch+0x58>)
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 8017742:	2100      	movs	r1, #0
 8017744:	f001 ffbe 	bl	80196c4 <stm32l_lowPowerSetup>
 8017748:	2800      	cmp	r0, #0
 801774a:	d1e4      	bne.n	8017716 <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 801774c:	f002 f82c 	bl	80197a8 <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 8017750:	f000 fc84 	bl	801805c <itsdk_time_get_us>
 8017754:	4b04      	ldr	r3, [pc, #16]	; (8017768 <lowPower_switch+0x5c>)
 8017756:	6098      	str	r0, [r3, #8]
 8017758:	60d9      	str	r1, [r3, #12]
}
 801775a:	e7dc      	b.n	8017716 <lowPower_switch+0xa>
 801775c:	20000d24 	.word	0x20000d24
 8017760:	0000270f 	.word	0x0000270f
 8017764:	00002710 	.word	0x00002710
 8017768:	200011c8 	.word	0x200011c8

0801776c <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 801776c:	b580      	push	{r7, lr}
 801776e:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 8017770:	4b02      	ldr	r3, [pc, #8]	; (801777c <lowPower_enable+0x10>)
 8017772:	2200      	movs	r2, #0
 8017774:	701a      	strb	r2, [r3, #0]
}
 8017776:	46c0      	nop			; (mov r8, r8)
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}
 801777c:	20000d24 	.word	0x20000d24

08017780 <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 8017780:	b580      	push	{r7, lr}
 8017782:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 8017784:	4b02      	ldr	r3, [pc, #8]	; (8017790 <lowPower_disable+0x10>)
 8017786:	2201      	movs	r2, #1
 8017788:	701a      	strb	r2, [r3, #0]
}
 801778a:	46c0      	nop			; (mov r8, r8)
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}
 8017790:	20000d24 	.word	0x20000d24

08017794 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 8017794:	b580      	push	{r7, lr}
 8017796:	af00      	add	r7, sp, #0

	itsdk_time_init();
 8017798:	f000 fc6c 	bl	8018074 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 801779c:	20f0      	movs	r0, #240	; 0xf0
 801779e:	f7ff fdc3 	bl	8017328 <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 80177a2:	f7fc fb19 	bl	8013dd8 <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 80177a6:	f7ff fbb9 	bl	8016f1c <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 80177aa:	f001 fca3 	bl	80190f4 <itsdk_getResetCause>
 80177ae:	0003      	movs	r3, r0
 80177b0:	b29b      	uxth	r3, r3
 80177b2:	4a11      	ldr	r2, [pc, #68]	; (80177f8 <itsdk_setup+0x64>)
 80177b4:	0019      	movs	r1, r3
 80177b6:	0010      	movs	r0, r2
 80177b8:	f7ff fbe0 	bl	8016f7c <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 80177bc:	f7fd fde8 	bl	8015390 <itsdk_secstore_isInit>
 80177c0:	1e03      	subs	r3, r0, #0
 80177c2:	d008      	beq.n	80177d6 <itsdk_setup+0x42>
		  itsdk_secstore_init();
 80177c4:	f7fd fd84 	bl	80152d0 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 80177c8:	2001      	movs	r0, #1
 80177ca:	f7fe fab4 	bl	8015d36 <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 80177ce:	2001      	movs	r0, #1
 80177d0:	f7ff ff3e 	bl	8017650 <itsdk_lorawan_resetFactoryDefaults>
 80177d4:	e002      	b.n	80177dc <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 80177d6:	2000      	movs	r0, #0
 80177d8:	f7fe faad 	bl	8015d36 <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 80177dc:	f7fe f9aa 	bl	8015b34 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 80177e0:	2000      	movs	r0, #0
 80177e2:	f7fc fef5 	bl	80145d0 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 80177e6:	f7fd fb09 	bl	8014dfc <itsdk_state_init>
	// Application setup
	project_setup();
 80177ea:	f7eb fc57 	bl	800309c <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 80177ee:	f001 fcbf 	bl	8019170 <itsdk_cleanResetCause>
    #endif

}
 80177f2:	46c0      	nop			; (mov r8, r8)
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	10000001 	.word	0x10000001

080177fc <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 80177fc:	b580      	push	{r7, lr}
 80177fe:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 8017800:	f000 fd64 	bl	80182cc <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 8017804:	f000 fa82 	bl	8017d0c <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 8017808:	f7eb fc74 	bl	80030f4 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 801780c:	f7fc fb08 	bl	8013e20 <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 8017810:	f000 fcf2 	bl	80181f8 <itsdk_stimer_isLowPowerSwitchAutorized>
 8017814:	1e03      	subs	r3, r0, #0
 8017816:	d001      	beq.n	801781c <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 8017818:	f7ff ff78 	bl	801770c <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 801781c:	46c0      	nop			; (mov r8, r8)
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}
	...

08017824 <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 8017824:	b580      	push	{r7, lr}
 8017826:	b086      	sub	sp, #24
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	000a      	movs	r2, r1
 801782e:	1cbb      	adds	r3, r7, #2
 8017830:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 8017832:	2301      	movs	r3, #1
 8017834:	425b      	negs	r3, r3
 8017836:	617b      	str	r3, [r7, #20]
  while (length--) {
 8017838:	e039      	b.n	80178ae <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	1c5a      	adds	r2, r3, #1
 801783e:	607a      	str	r2, [r7, #4]
 8017840:	220e      	movs	r2, #14
 8017842:	18ba      	adds	r2, r7, r2
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 8017848:	2380      	movs	r3, #128	; 0x80
 801784a:	613b      	str	r3, [r7, #16]
 801784c:	e02c      	b.n	80178a8 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	0fdb      	lsrs	r3, r3, #31
 8017852:	07da      	lsls	r2, r3, #31
 8017854:	230f      	movs	r3, #15
 8017856:	18fb      	adds	r3, r7, r3
 8017858:	1e51      	subs	r1, r2, #1
 801785a:	418a      	sbcs	r2, r1
 801785c:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 801785e:	230e      	movs	r3, #14
 8017860:	18fb      	adds	r3, r7, r3
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	693a      	ldr	r2, [r7, #16]
 8017866:	4013      	ands	r3, r2
 8017868:	d00f      	beq.n	801788a <itsdk_computeCRC32+0x66>
        bit = !bit;
 801786a:	210f      	movs	r1, #15
 801786c:	187b      	adds	r3, r7, r1
 801786e:	781b      	ldrb	r3, [r3, #0]
 8017870:	1e5a      	subs	r2, r3, #1
 8017872:	4193      	sbcs	r3, r2
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2201      	movs	r2, #1
 8017878:	4053      	eors	r3, r2
 801787a:	b2db      	uxtb	r3, r3
 801787c:	001a      	movs	r2, r3
 801787e:	187b      	adds	r3, r7, r1
 8017880:	701a      	strb	r2, [r3, #0]
 8017882:	781a      	ldrb	r2, [r3, #0]
 8017884:	2101      	movs	r1, #1
 8017886:	400a      	ands	r2, r1
 8017888:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	005b      	lsls	r3, r3, #1
 801788e:	617b      	str	r3, [r7, #20]
      if (bit) {
 8017890:	230f      	movs	r3, #15
 8017892:	18fb      	adds	r3, r7, r3
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d003      	beq.n	80178a2 <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	4a0a      	ldr	r2, [pc, #40]	; (80178c8 <itsdk_computeCRC32+0xa4>)
 801789e:	4053      	eors	r3, r2
 80178a0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 80178a2:	693b      	ldr	r3, [r7, #16]
 80178a4:	085b      	lsrs	r3, r3, #1
 80178a6:	613b      	str	r3, [r7, #16]
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d1cf      	bne.n	801784e <itsdk_computeCRC32+0x2a>
  while (length--) {
 80178ae:	1cbb      	adds	r3, r7, #2
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	1cba      	adds	r2, r7, #2
 80178b4:	1e59      	subs	r1, r3, #1
 80178b6:	8011      	strh	r1, [r2, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d1be      	bne.n	801783a <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 80178bc:	697b      	ldr	r3, [r7, #20]
}
 80178be:	0018      	movs	r0, r3
 80178c0:	46bd      	mov	sp, r7
 80178c2:	b006      	add	sp, #24
 80178c4:	bd80      	pop	{r7, pc}
 80178c6:	46c0      	nop			; (mov r8, r8)
 80178c8:	04c11db7 	.word	0x04c11db7

080178cc <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	0002      	movs	r2, r0
 80178d4:	1dfb      	adds	r3, r7, #7
 80178d6:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 80178d8:	1dfb      	adds	r3, r7, #7
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	2b2f      	cmp	r3, #47	; 0x2f
 80178de:	d908      	bls.n	80178f2 <itdt_convertNumChar2Int+0x26>
 80178e0:	1dfb      	adds	r3, r7, #7
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	2b39      	cmp	r3, #57	; 0x39
 80178e6:	d804      	bhi.n	80178f2 <itdt_convertNumChar2Int+0x26>
 80178e8:	1dfb      	adds	r3, r7, #7
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	3b30      	subs	r3, #48	; 0x30
 80178ee:	b2db      	uxtb	r3, r3
 80178f0:	e000      	b.n	80178f4 <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 80178f2:	23ff      	movs	r3, #255	; 0xff
}
 80178f4:	0018      	movs	r0, r3
 80178f6:	46bd      	mov	sp, r7
 80178f8:	b002      	add	sp, #8
 80178fa:	bd80      	pop	{r7, pc}

080178fc <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	0002      	movs	r2, r0
 8017904:	1dfb      	adds	r3, r7, #7
 8017906:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 8017908:	1dfb      	adds	r3, r7, #7
 801790a:	781b      	ldrb	r3, [r3, #0]
 801790c:	2b2f      	cmp	r3, #47	; 0x2f
 801790e:	d908      	bls.n	8017922 <itdt_convertHexChar2HalfInt+0x26>
 8017910:	1dfb      	adds	r3, r7, #7
 8017912:	781b      	ldrb	r3, [r3, #0]
 8017914:	2b39      	cmp	r3, #57	; 0x39
 8017916:	d804      	bhi.n	8017922 <itdt_convertHexChar2HalfInt+0x26>
 8017918:	1dfb      	adds	r3, r7, #7
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	3b30      	subs	r3, #48	; 0x30
 801791e:	b2db      	uxtb	r3, r3
 8017920:	e01a      	b.n	8017958 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 8017922:	1dfb      	adds	r3, r7, #7
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	2b60      	cmp	r3, #96	; 0x60
 8017928:	d908      	bls.n	801793c <itdt_convertHexChar2HalfInt+0x40>
 801792a:	1dfb      	adds	r3, r7, #7
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	2b66      	cmp	r3, #102	; 0x66
 8017930:	d804      	bhi.n	801793c <itdt_convertHexChar2HalfInt+0x40>
 8017932:	1dfb      	adds	r3, r7, #7
 8017934:	781b      	ldrb	r3, [r3, #0]
 8017936:	3b57      	subs	r3, #87	; 0x57
 8017938:	b2db      	uxtb	r3, r3
 801793a:	e00d      	b.n	8017958 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 801793c:	1dfb      	adds	r3, r7, #7
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	2b40      	cmp	r3, #64	; 0x40
 8017942:	d908      	bls.n	8017956 <itdt_convertHexChar2HalfInt+0x5a>
 8017944:	1dfb      	adds	r3, r7, #7
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	2b46      	cmp	r3, #70	; 0x46
 801794a:	d804      	bhi.n	8017956 <itdt_convertHexChar2HalfInt+0x5a>
 801794c:	1dfb      	adds	r3, r7, #7
 801794e:	781b      	ldrb	r3, [r3, #0]
 8017950:	3b37      	subs	r3, #55	; 0x37
 8017952:	b2db      	uxtb	r3, r3
 8017954:	e000      	b.n	8017958 <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 8017956:	2300      	movs	r3, #0
}
 8017958:	0018      	movs	r0, r3
 801795a:	46bd      	mov	sp, r7
 801795c:	b002      	add	sp, #8
 801795e:	bd80      	pop	{r7, pc}

08017960 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 8017960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017962:	b085      	sub	sp, #20
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	781b      	ldrb	r3, [r3, #0]
 801796c:	250f      	movs	r5, #15
 801796e:	197c      	adds	r4, r7, r5
 8017970:	0018      	movs	r0, r3
 8017972:	f7ff ffc3 	bl	80178fc <itdt_convertHexChar2HalfInt>
 8017976:	0003      	movs	r3, r0
 8017978:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	3301      	adds	r3, #1
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	260e      	movs	r6, #14
 8017982:	19bc      	adds	r4, r7, r6
 8017984:	0018      	movs	r0, r3
 8017986:	f7ff ffb9 	bl	80178fc <itdt_convertHexChar2HalfInt>
 801798a:	0003      	movs	r3, r0
 801798c:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 801798e:	197b      	adds	r3, r7, r5
 8017990:	781b      	ldrb	r3, [r3, #0]
 8017992:	011b      	lsls	r3, r3, #4
 8017994:	b2da      	uxtb	r2, r3
 8017996:	19bb      	adds	r3, r7, r6
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	18d3      	adds	r3, r2, r3
 801799c:	b2db      	uxtb	r3, r3
}
 801799e:	0018      	movs	r0, r3
 80179a0:	46bd      	mov	sp, r7
 80179a2:	b005      	add	sp, #20
 80179a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080179a6 <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 80179a6:	b590      	push	{r4, r7, lr}
 80179a8:	b085      	sub	sp, #20
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	0018      	movs	r0, r3
 80179b2:	f7ff ffd5 	bl	8017960 <itdt_convertHexChar2Int>
 80179b6:	0003      	movs	r3, r0
 80179b8:	001a      	movs	r2, r3
 80179ba:	240e      	movs	r4, #14
 80179bc:	193b      	adds	r3, r7, r4
 80179be:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 80179c0:	193b      	adds	r3, r7, r4
 80179c2:	193a      	adds	r2, r7, r4
 80179c4:	8812      	ldrh	r2, [r2, #0]
 80179c6:	0212      	lsls	r2, r2, #8
 80179c8:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	3302      	adds	r3, #2
 80179ce:	0018      	movs	r0, r3
 80179d0:	f7ff ffc6 	bl	8017960 <itdt_convertHexChar2Int>
 80179d4:	0003      	movs	r3, r0
 80179d6:	b299      	uxth	r1, r3
 80179d8:	193b      	adds	r3, r7, r4
 80179da:	193a      	adds	r2, r7, r4
 80179dc:	8812      	ldrh	r2, [r2, #0]
 80179de:	188a      	adds	r2, r1, r2
 80179e0:	801a      	strh	r2, [r3, #0]
  return ret;
 80179e2:	193b      	adds	r3, r7, r4
 80179e4:	881b      	ldrh	r3, [r3, #0]
}
 80179e6:	0018      	movs	r0, r3
 80179e8:	46bd      	mov	sp, r7
 80179ea:	b005      	add	sp, #20
 80179ec:	bd90      	pop	{r4, r7, pc}
	...

080179f0 <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 80179f0:	b5b0      	push	{r4, r5, r7, lr}
 80179f2:	b086      	sub	sp, #24
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
 80179f8:	6039      	str	r1, [r7, #0]
	int sign = 1;
 80179fa:	2301      	movs	r3, #1
 80179fc:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	2b2d      	cmp	r3, #45	; 0x2d
 8017a04:	d108      	bne.n	8017a18 <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 8017a06:	2301      	movs	r3, #1
 8017a08:	425b      	negs	r3, r3
 8017a0a:	617b      	str	r3, [r7, #20]
	   v++;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	3301      	adds	r3, #1
 8017a10:	607b      	str	r3, [r7, #4]
	   sz--;
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	3b01      	subs	r3, #1
 8017a16:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 8017a18:	2312      	movs	r3, #18
 8017a1a:	18fb      	adds	r3, r7, r3
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 8017a20:	2300      	movs	r3, #0
 8017a22:	60fb      	str	r3, [r7, #12]
 8017a24:	e027      	b.n	8017a76 <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 8017a26:	2312      	movs	r3, #18
 8017a28:	18fa      	adds	r2, r7, r3
 8017a2a:	18fb      	adds	r3, r7, r3
 8017a2c:	881b      	ldrh	r3, [r3, #0]
 8017a2e:	1c19      	adds	r1, r3, #0
 8017a30:	0089      	lsls	r1, r1, #2
 8017a32:	18cb      	adds	r3, r1, r3
 8017a34:	18db      	adds	r3, r3, r3
 8017a36:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	250b      	movs	r5, #11
 8017a3e:	197c      	adds	r4, r7, r5
 8017a40:	0018      	movs	r0, r3
 8017a42:	f7ff ff43 	bl	80178cc <itdt_convertNumChar2Int>
 8017a46:	0003      	movs	r3, r0
 8017a48:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 8017a4a:	197b      	adds	r3, r7, r5
 8017a4c:	781b      	ldrb	r3, [r3, #0]
 8017a4e:	2bff      	cmp	r3, #255	; 0xff
 8017a50:	d101      	bne.n	8017a56 <itdt_convertDecCharNInt+0x66>
 8017a52:	4b12      	ldr	r3, [pc, #72]	; (8017a9c <itdt_convertDecCharNInt+0xac>)
 8017a54:	e01d      	b.n	8017a92 <itdt_convertDecCharNInt+0xa2>
	  v++;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	3301      	adds	r3, #1
 8017a5a:	607b      	str	r3, [r7, #4]
	  ret+= c;
 8017a5c:	230b      	movs	r3, #11
 8017a5e:	18fb      	adds	r3, r7, r3
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	b299      	uxth	r1, r3
 8017a64:	2212      	movs	r2, #18
 8017a66:	18bb      	adds	r3, r7, r2
 8017a68:	18ba      	adds	r2, r7, r2
 8017a6a:	8812      	ldrh	r2, [r2, #0]
 8017a6c:	188a      	adds	r2, r1, r2
 8017a6e:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	3301      	adds	r3, #1
 8017a74:	60fb      	str	r3, [r7, #12]
 8017a76:	68fa      	ldr	r2, [r7, #12]
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	dbd3      	blt.n	8017a26 <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 8017a7e:	697b      	ldr	r3, [r7, #20]
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	2012      	movs	r0, #18
 8017a84:	183b      	adds	r3, r7, r0
 8017a86:	1839      	adds	r1, r7, r0
 8017a88:	8809      	ldrh	r1, [r1, #0]
 8017a8a:	434a      	muls	r2, r1
 8017a8c:	801a      	strh	r2, [r3, #0]
	 return ret;
 8017a8e:	183b      	adds	r3, r7, r0
 8017a90:	881b      	ldrh	r3, [r3, #0]
}
 8017a92:	0018      	movs	r0, r3
 8017a94:	46bd      	mov	sp, r7
 8017a96:	b006      	add	sp, #24
 8017a98:	bdb0      	pop	{r4, r5, r7, pc}
 8017a9a:	46c0      	nop			; (mov r8, r8)
 8017a9c:	0fffffff 	.word	0x0fffffff

08017aa0 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	0002      	movs	r2, r0
 8017aa8:	1dfb      	adds	r3, r7, #7
 8017aaa:	701a      	strb	r2, [r3, #0]
 8017aac:	1dbb      	adds	r3, r7, #6
 8017aae:	1c0a      	adds	r2, r1, #0
 8017ab0:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 8017ab2:	1dfb      	adds	r3, r7, #7
 8017ab4:	781b      	ldrb	r3, [r3, #0]
 8017ab6:	2b2f      	cmp	r3, #47	; 0x2f
 8017ab8:	d903      	bls.n	8017ac2 <itdt_isHexChar+0x22>
 8017aba:	1dfb      	adds	r3, r7, #7
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	2b39      	cmp	r3, #57	; 0x39
 8017ac0:	d916      	bls.n	8017af0 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 8017ac2:	1dfb      	adds	r3, r7, #7
 8017ac4:	781b      	ldrb	r3, [r3, #0]
 8017ac6:	2b40      	cmp	r3, #64	; 0x40
 8017ac8:	d903      	bls.n	8017ad2 <itdt_isHexChar+0x32>
 8017aca:	1dfb      	adds	r3, r7, #7
 8017acc:	781b      	ldrb	r3, [r3, #0]
 8017ace:	2b46      	cmp	r3, #70	; 0x46
 8017ad0:	d90e      	bls.n	8017af0 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 8017ad2:	1dbb      	adds	r3, r7, #6
 8017ad4:	781b      	ldrb	r3, [r3, #0]
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	4053      	eors	r3, r2
 8017ada:	b2db      	uxtb	r3, r3
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d009      	beq.n	8017af4 <itdt_isHexChar+0x54>
 8017ae0:	1dfb      	adds	r3, r7, #7
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	2b60      	cmp	r3, #96	; 0x60
 8017ae6:	d905      	bls.n	8017af4 <itdt_isHexChar+0x54>
 8017ae8:	1dfb      	adds	r3, r7, #7
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	2b66      	cmp	r3, #102	; 0x66
 8017aee:	d801      	bhi.n	8017af4 <itdt_isHexChar+0x54>
    ) {
    return true;
 8017af0:	2301      	movs	r3, #1
 8017af2:	e000      	b.n	8017af6 <itdt_isHexChar+0x56>
  }
  return false;
 8017af4:	2300      	movs	r3, #0
}
 8017af6:	0018      	movs	r0, r3
 8017af8:	46bd      	mov	sp, r7
 8017afa:	b002      	add	sp, #8
 8017afc:	bd80      	pop	{r7, pc}

08017afe <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 8017afe:	b580      	push	{r7, lr}
 8017b00:	b086      	sub	sp, #24
 8017b02:	af00      	add	r7, sp, #0
 8017b04:	60f8      	str	r0, [r7, #12]
 8017b06:	60b9      	str	r1, [r7, #8]
 8017b08:	1dfb      	adds	r3, r7, #7
 8017b0a:	701a      	strb	r2, [r3, #0]
  int i = 0;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 8017b10:	e02d      	b.n	8017b6e <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 8017b12:	697b      	ldr	r3, [r7, #20]
 8017b14:	68fa      	ldr	r2, [r7, #12]
 8017b16:	18d3      	adds	r3, r2, r3
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	2b2f      	cmp	r3, #47	; 0x2f
 8017b1c:	d905      	bls.n	8017b2a <itdt_isHexString+0x2c>
 8017b1e:	697b      	ldr	r3, [r7, #20]
 8017b20:	68fa      	ldr	r2, [r7, #12]
 8017b22:	18d3      	adds	r3, r2, r3
 8017b24:	781b      	ldrb	r3, [r3, #0]
 8017b26:	2b39      	cmp	r3, #57	; 0x39
 8017b28:	d91b      	bls.n	8017b62 <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 8017b2a:	697b      	ldr	r3, [r7, #20]
 8017b2c:	68fa      	ldr	r2, [r7, #12]
 8017b2e:	18d3      	adds	r3, r2, r3
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	2b40      	cmp	r3, #64	; 0x40
 8017b34:	d905      	bls.n	8017b42 <itdt_isHexString+0x44>
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	68fa      	ldr	r2, [r7, #12]
 8017b3a:	18d3      	adds	r3, r2, r3
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	2b46      	cmp	r3, #70	; 0x46
 8017b40:	d90f      	bls.n	8017b62 <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 8017b42:	1dfb      	adds	r3, r7, #7
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d10f      	bne.n	8017b6a <itdt_isHexString+0x6c>
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	68fa      	ldr	r2, [r7, #12]
 8017b4e:	18d3      	adds	r3, r2, r3
 8017b50:	781b      	ldrb	r3, [r3, #0]
 8017b52:	2b60      	cmp	r3, #96	; 0x60
 8017b54:	d909      	bls.n	8017b6a <itdt_isHexString+0x6c>
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	68fa      	ldr	r2, [r7, #12]
 8017b5a:	18d3      	adds	r3, r2, r3
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	2b66      	cmp	r3, #102	; 0x66
 8017b60:	d803      	bhi.n	8017b6a <itdt_isHexString+0x6c>
       ) {
      i++;
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	3301      	adds	r3, #1
 8017b66:	617b      	str	r3, [r7, #20]
 8017b68:	e001      	b.n	8017b6e <itdt_isHexString+0x70>
    } else {
      return false;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	e00f      	b.n	8017b8e <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 8017b6e:	697a      	ldr	r2, [r7, #20]
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	da05      	bge.n	8017b82 <itdt_isHexString+0x84>
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	68fa      	ldr	r2, [r7, #12]
 8017b7a:	18d3      	adds	r3, r2, r3
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d1c7      	bne.n	8017b12 <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 8017b82:	697a      	ldr	r2, [r7, #20]
 8017b84:	68bb      	ldr	r3, [r7, #8]
 8017b86:	1ad3      	subs	r3, r2, r3
 8017b88:	425a      	negs	r2, r3
 8017b8a:	4153      	adcs	r3, r2
 8017b8c:	b2db      	uxtb	r3, r3
}
 8017b8e:	0018      	movs	r0, r3
 8017b90:	46bd      	mov	sp, r7
 8017b92:	b006      	add	sp, #24
 8017b94:	bd80      	pop	{r7, pc}

08017b96 <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 8017b96:	b580      	push	{r7, lr}
 8017b98:	b084      	sub	sp, #16
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8017b9e:	230f      	movs	r3, #15
 8017ba0:	18fb      	adds	r3, r7, r3
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 8017ba6:	e00c      	b.n	8017bc2 <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2201      	movs	r2, #1
 8017bac:	4013      	ands	r3, r2
 8017bae:	d005      	beq.n	8017bbc <itdt_count_bits_1+0x26>
 8017bb0:	210f      	movs	r1, #15
 8017bb2:	187b      	adds	r3, r7, r1
 8017bb4:	781a      	ldrb	r2, [r3, #0]
 8017bb6:	187b      	adds	r3, r7, r1
 8017bb8:	3201      	adds	r2, #1
 8017bba:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	085b      	lsrs	r3, r3, #1
 8017bc0:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d1ef      	bne.n	8017ba8 <itdt_count_bits_1+0x12>
	}
	return ret;
 8017bc8:	230f      	movs	r3, #15
 8017bca:	18fb      	adds	r3, r7, r3
 8017bcc:	781b      	ldrb	r3, [r3, #0]
}
 8017bce:	0018      	movs	r0, r3
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	b004      	add	sp, #16
 8017bd4:	bd80      	pop	{r7, pc}
	...

08017bd8 <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 8017bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bda:	b085      	sub	sp, #20
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	60f8      	str	r0, [r7, #12]
 8017be0:	607a      	str	r2, [r7, #4]
 8017be2:	230a      	movs	r3, #10
 8017be4:	18fb      	adds	r3, r7, r3
 8017be6:	1c0a      	adds	r2, r1, #0
 8017be8:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	4a43      	ldr	r2, [pc, #268]	; (8017cfc <itdt_sched_registerSched+0x124>)
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	d906      	bls.n	8017c00 <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 8017bf2:	4b43      	ldr	r3, [pc, #268]	; (8017d00 <itdt_sched_registerSched+0x128>)
 8017bf4:	2100      	movs	r1, #0
 8017bf6:	0018      	movs	r0, r3
 8017bf8:	f7ff f9c0 	bl	8016f7c <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 8017bfc:	23ff      	movs	r3, #255	; 0xff
 8017bfe:	e079      	b.n	8017cf4 <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 8017c00:	4b40      	ldr	r3, [pc, #256]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d174      	bne.n	8017cf2 <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 8017c08:	4b3e      	ldr	r3, [pc, #248]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	4a3e      	ldr	r2, [pc, #248]	; (8017d08 <itdt_sched_registerSched+0x130>)
 8017c0e:	011b      	lsls	r3, r3, #4
 8017c10:	18d3      	adds	r3, r2, r3
 8017c12:	330c      	adds	r3, #12
 8017c14:	687a      	ldr	r2, [r7, #4]
 8017c16:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 8017c18:	4b3a      	ldr	r3, [pc, #232]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	001e      	movs	r6, r3
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	021b      	lsls	r3, r3, #8
 8017c22:	0a1a      	lsrs	r2, r3, #8
 8017c24:	4938      	ldr	r1, [pc, #224]	; (8017d08 <itdt_sched_registerSched+0x130>)
 8017c26:	2008      	movs	r0, #8
 8017c28:	0133      	lsls	r3, r6, #4
 8017c2a:	18cb      	adds	r3, r1, r3
 8017c2c:	181b      	adds	r3, r3, r0
 8017c2e:	0212      	lsls	r2, r2, #8
 8017c30:	0a12      	lsrs	r2, r2, #8
 8017c32:	6819      	ldr	r1, [r3, #0]
 8017c34:	0e09      	lsrs	r1, r1, #24
 8017c36:	0609      	lsls	r1, r1, #24
 8017c38:	430a      	orrs	r2, r1
 8017c3a:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 8017c3c:	230a      	movs	r3, #10
 8017c3e:	18fb      	adds	r3, r7, r3
 8017c40:	881a      	ldrh	r2, [r3, #0]
 8017c42:	2380      	movs	r3, #128	; 0x80
 8017c44:	005b      	lsls	r3, r3, #1
 8017c46:	4013      	ands	r3, r2
 8017c48:	d004      	beq.n	8017c54 <itdt_sched_registerSched+0x7c>
 8017c4a:	f000 f9f5 	bl	8018038 <itsdk_time_get_ms>
 8017c4e:	0003      	movs	r3, r0
 8017c50:	000c      	movs	r4, r1
 8017c52:	e00b      	b.n	8017c6c <itdt_sched_registerSched+0x94>
 8017c54:	f000 f9f0 	bl	8018038 <itsdk_time_get_ms>
 8017c58:	0002      	movs	r2, r0
 8017c5a:	000b      	movs	r3, r1
 8017c5c:	68f9      	ldr	r1, [r7, #12]
 8017c5e:	000c      	movs	r4, r1
 8017c60:	2100      	movs	r1, #0
 8017c62:	000d      	movs	r5, r1
 8017c64:	1912      	adds	r2, r2, r4
 8017c66:	416b      	adcs	r3, r5
 8017c68:	001c      	movs	r4, r3
 8017c6a:	0013      	movs	r3, r2
 8017c6c:	4a25      	ldr	r2, [pc, #148]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017c6e:	7812      	ldrb	r2, [r2, #0]
 8017c70:	4925      	ldr	r1, [pc, #148]	; (8017d08 <itdt_sched_registerSched+0x130>)
 8017c72:	0112      	lsls	r2, r2, #4
 8017c74:	188a      	adds	r2, r1, r2
 8017c76:	6013      	str	r3, [r2, #0]
 8017c78:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 8017c7a:	250a      	movs	r5, #10
 8017c7c:	197b      	adds	r3, r7, r5
 8017c7e:	881b      	ldrh	r3, [r3, #0]
 8017c80:	105a      	asrs	r2, r3, #1
 8017c82:	4b20      	ldr	r3, [pc, #128]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017c84:	781b      	ldrb	r3, [r3, #0]
 8017c86:	001c      	movs	r4, r3
 8017c88:	2301      	movs	r3, #1
 8017c8a:	4013      	ands	r3, r2
 8017c8c:	b2da      	uxtb	r2, r3
 8017c8e:	491e      	ldr	r1, [pc, #120]	; (8017d08 <itdt_sched_registerSched+0x130>)
 8017c90:	2008      	movs	r0, #8
 8017c92:	0123      	lsls	r3, r4, #4
 8017c94:	18cb      	adds	r3, r1, r3
 8017c96:	181b      	adds	r3, r3, r0
 8017c98:	2101      	movs	r1, #1
 8017c9a:	400a      	ands	r2, r1
 8017c9c:	1890      	adds	r0, r2, r2
 8017c9e:	78da      	ldrb	r2, [r3, #3]
 8017ca0:	2102      	movs	r1, #2
 8017ca2:	438a      	bics	r2, r1
 8017ca4:	1c11      	adds	r1, r2, #0
 8017ca6:	1c02      	adds	r2, r0, #0
 8017ca8:	430a      	orrs	r2, r1
 8017caa:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 8017cac:	4b15      	ldr	r3, [pc, #84]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	001c      	movs	r4, r3
 8017cb2:	197b      	adds	r3, r7, r5
 8017cb4:	881b      	ldrh	r3, [r3, #0]
 8017cb6:	1c1a      	adds	r2, r3, #0
 8017cb8:	2301      	movs	r3, #1
 8017cba:	4013      	ands	r3, r2
 8017cbc:	b2da      	uxtb	r2, r3
 8017cbe:	4912      	ldr	r1, [pc, #72]	; (8017d08 <itdt_sched_registerSched+0x130>)
 8017cc0:	2008      	movs	r0, #8
 8017cc2:	0123      	lsls	r3, r4, #4
 8017cc4:	18cb      	adds	r3, r1, r3
 8017cc6:	181b      	adds	r3, r3, r0
 8017cc8:	2101      	movs	r1, #1
 8017cca:	400a      	ands	r2, r1
 8017ccc:	0010      	movs	r0, r2
 8017cce:	78da      	ldrb	r2, [r3, #3]
 8017cd0:	2101      	movs	r1, #1
 8017cd2:	438a      	bics	r2, r1
 8017cd4:	1c11      	adds	r1, r2, #0
 8017cd6:	1c02      	adds	r2, r0, #0
 8017cd8:	430a      	orrs	r2, r1
 8017cda:	70da      	strb	r2, [r3, #3]
		__sNum++;
 8017cdc:	4b09      	ldr	r3, [pc, #36]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	b2da      	uxtb	r2, r3
 8017ce4:	4b07      	ldr	r3, [pc, #28]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017ce6:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 8017ce8:	4b06      	ldr	r3, [pc, #24]	; (8017d04 <itdt_sched_registerSched+0x12c>)
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	3b01      	subs	r3, #1
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	e000      	b.n	8017cf4 <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 8017cf2:	23ff      	movs	r3, #255	; 0xff

}
 8017cf4:	0018      	movs	r0, r3
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	b005      	add	sp, #20
 8017cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cfc:	00ffffff 	.word	0x00ffffff
 8017d00:	80000050 	.word	0x80000050
 8017d04:	20000d25 	.word	0x20000d25
 8017d08:	200011e0 	.word	0x200011e0

08017d0c <itdt_sched_execute>:

/**
 * Task executor
 */
void itdt_sched_execute() {
 8017d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d0e:	b087      	sub	sp, #28
 8017d10:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 8017d12:	f000 f991 	bl	8018038 <itsdk_time_get_ms>
 8017d16:	0003      	movs	r3, r0
 8017d18:	000c      	movs	r4, r1
 8017d1a:	60bb      	str	r3, [r7, #8]
 8017d1c:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 8017d1e:	2300      	movs	r3, #0
 8017d20:	617b      	str	r3, [r7, #20]
 8017d22:	e091      	b.n	8017e48 <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 8017d24:	4a4e      	ldr	r2, [pc, #312]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	011b      	lsls	r3, r3, #4
 8017d2a:	18d3      	adds	r3, r2, r3
 8017d2c:	685c      	ldr	r4, [r3, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	68fa      	ldr	r2, [r7, #12]
 8017d32:	42a2      	cmp	r2, r4
 8017d34:	d332      	bcc.n	8017d9c <itdt_sched_execute+0x90>
 8017d36:	68fa      	ldr	r2, [r7, #12]
 8017d38:	42a2      	cmp	r2, r4
 8017d3a:	d102      	bne.n	8017d42 <itdt_sched_execute+0x36>
 8017d3c:	68ba      	ldr	r2, [r7, #8]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d32c      	bcc.n	8017d9c <itdt_sched_execute+0x90>
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 8017d42:	4a47      	ldr	r2, [pc, #284]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	011b      	lsls	r3, r3, #4
 8017d48:	18d3      	adds	r3, r2, r3
 8017d4a:	685c      	ldr	r4, [r3, #4]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	4944      	ldr	r1, [pc, #272]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d50:	697a      	ldr	r2, [r7, #20]
 8017d52:	2008      	movs	r0, #8
 8017d54:	0112      	lsls	r2, r2, #4
 8017d56:	188a      	adds	r2, r1, r2
 8017d58:	1812      	adds	r2, r2, r0
 8017d5a:	6812      	ldr	r2, [r2, #0]
 8017d5c:	0212      	lsls	r2, r2, #8
 8017d5e:	0a12      	lsrs	r2, r2, #8
 8017d60:	0015      	movs	r5, r2
 8017d62:	2200      	movs	r2, #0
 8017d64:	0016      	movs	r6, r2
 8017d66:	195b      	adds	r3, r3, r5
 8017d68:	4174      	adcs	r4, r6
 8017d6a:	493d      	ldr	r1, [pc, #244]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d6c:	697a      	ldr	r2, [r7, #20]
 8017d6e:	0112      	lsls	r2, r2, #4
 8017d70:	188a      	adds	r2, r1, r2
 8017d72:	6013      	str	r3, [r2, #0]
 8017d74:	6054      	str	r4, [r2, #4]
				if ( !__scheds[i].halt ) {
 8017d76:	4a3a      	ldr	r2, [pc, #232]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	2108      	movs	r1, #8
 8017d7c:	011b      	lsls	r3, r3, #4
 8017d7e:	18d3      	adds	r3, r2, r3
 8017d80:	185b      	adds	r3, r3, r1
 8017d82:	78db      	ldrb	r3, [r3, #3]
 8017d84:	079b      	lsls	r3, r3, #30
 8017d86:	0fdb      	lsrs	r3, r3, #31
 8017d88:	b2db      	uxtb	r3, r3
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d106      	bne.n	8017d9c <itdt_sched_execute+0x90>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 8017d8e:	4a34      	ldr	r2, [pc, #208]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d90:	697b      	ldr	r3, [r7, #20]
 8017d92:	011b      	lsls	r3, r3, #4
 8017d94:	18d3      	adds	r3, r2, r3
 8017d96:	330c      	adds	r3, #12
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4798      	blx	r3
				}
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 8017d9c:	4a30      	ldr	r2, [pc, #192]	; (8017e60 <itdt_sched_execute+0x154>)
 8017d9e:	697b      	ldr	r3, [r7, #20]
 8017da0:	2108      	movs	r1, #8
 8017da2:	011b      	lsls	r3, r3, #4
 8017da4:	18d3      	adds	r3, r2, r3
 8017da6:	185b      	adds	r3, r3, r1
 8017da8:	78db      	ldrb	r3, [r3, #3]
 8017daa:	07db      	lsls	r3, r3, #31
 8017dac:	0fdb      	lsrs	r3, r3, #31
 8017dae:	b2db      	uxtb	r3, r3
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d12b      	bne.n	8017e0c <itdt_sched_execute+0x100>
 8017db4:	4a2a      	ldr	r2, [pc, #168]	; (8017e60 <itdt_sched_execute+0x154>)
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	011b      	lsls	r3, r3, #4
 8017dba:	18d3      	adds	r3, r2, r3
 8017dbc:	685c      	ldr	r4, [r3, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	68fa      	ldr	r2, [r7, #12]
 8017dc2:	42a2      	cmp	r2, r4
 8017dc4:	d322      	bcc.n	8017e0c <itdt_sched_execute+0x100>
 8017dc6:	68fa      	ldr	r2, [r7, #12]
 8017dc8:	42a2      	cmp	r2, r4
 8017dca:	d1ab      	bne.n	8017d24 <itdt_sched_execute+0x18>
 8017dcc:	68ba      	ldr	r2, [r7, #8]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d31c      	bcc.n	8017e0c <itdt_sched_execute+0x100>
 8017dd2:	e7a7      	b.n	8017d24 <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 8017dd4:	4a22      	ldr	r2, [pc, #136]	; (8017e60 <itdt_sched_execute+0x154>)
 8017dd6:	697b      	ldr	r3, [r7, #20]
 8017dd8:	011b      	lsls	r3, r3, #4
 8017dda:	18d3      	adds	r3, r2, r3
 8017ddc:	685c      	ldr	r4, [r3, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	491f      	ldr	r1, [pc, #124]	; (8017e60 <itdt_sched_execute+0x154>)
 8017de2:	697a      	ldr	r2, [r7, #20]
 8017de4:	2008      	movs	r0, #8
 8017de6:	0112      	lsls	r2, r2, #4
 8017de8:	188a      	adds	r2, r1, r2
 8017dea:	1812      	adds	r2, r2, r0
 8017dec:	6812      	ldr	r2, [r2, #0]
 8017dee:	0212      	lsls	r2, r2, #8
 8017df0:	0a12      	lsrs	r2, r2, #8
 8017df2:	603a      	str	r2, [r7, #0]
 8017df4:	2200      	movs	r2, #0
 8017df6:	607a      	str	r2, [r7, #4]
 8017df8:	6839      	ldr	r1, [r7, #0]
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	185b      	adds	r3, r3, r1
 8017dfe:	4154      	adcs	r4, r2
 8017e00:	4917      	ldr	r1, [pc, #92]	; (8017e60 <itdt_sched_execute+0x154>)
 8017e02:	697a      	ldr	r2, [r7, #20]
 8017e04:	0112      	lsls	r2, r2, #4
 8017e06:	188a      	adds	r2, r1, r2
 8017e08:	6013      	str	r3, [r2, #0]
 8017e0a:	6054      	str	r4, [r2, #4]
 8017e0c:	4a14      	ldr	r2, [pc, #80]	; (8017e60 <itdt_sched_execute+0x154>)
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	2108      	movs	r1, #8
 8017e12:	011b      	lsls	r3, r3, #4
 8017e14:	18d3      	adds	r3, r2, r3
 8017e16:	185b      	adds	r3, r3, r1
 8017e18:	78db      	ldrb	r3, [r3, #3]
 8017e1a:	07db      	lsls	r3, r3, #31
 8017e1c:	0fdb      	lsrs	r3, r3, #31
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d00e      	beq.n	8017e42 <itdt_sched_execute+0x136>
 8017e24:	4a0e      	ldr	r2, [pc, #56]	; (8017e60 <itdt_sched_execute+0x154>)
 8017e26:	697b      	ldr	r3, [r7, #20]
 8017e28:	011b      	lsls	r3, r3, #4
 8017e2a:	18d3      	adds	r3, r2, r3
 8017e2c:	685c      	ldr	r4, [r3, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	68fa      	ldr	r2, [r7, #12]
 8017e32:	42a2      	cmp	r2, r4
 8017e34:	d305      	bcc.n	8017e42 <itdt_sched_execute+0x136>
 8017e36:	68fa      	ldr	r2, [r7, #12]
 8017e38:	42a2      	cmp	r2, r4
 8017e3a:	d1cb      	bne.n	8017dd4 <itdt_sched_execute+0xc8>
 8017e3c:	68ba      	ldr	r2, [r7, #8]
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d2c8      	bcs.n	8017dd4 <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	3301      	adds	r3, #1
 8017e46:	617b      	str	r3, [r7, #20]
 8017e48:	4b06      	ldr	r3, [pc, #24]	; (8017e64 <itdt_sched_execute+0x158>)
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	001a      	movs	r2, r3
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	4293      	cmp	r3, r2
 8017e52:	da00      	bge.n	8017e56 <itdt_sched_execute+0x14a>
 8017e54:	e766      	b.n	8017d24 <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 8017e56:	46c0      	nop			; (mov r8, r8)
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	b007      	add	sp, #28
 8017e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e5e:	46c0      	nop			; (mov r8, r8)
 8017e60:	200011e0 	.word	0x200011e0
 8017e64:	20000d25 	.word	0x20000d25

08017e68 <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 8017e68:	b590      	push	{r4, r7, lr}
 8017e6a:	b087      	sub	sp, #28
 8017e6c:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	2400      	movs	r4, #0
 8017e72:	613b      	str	r3, [r7, #16]
 8017e74:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8017e76:	2300      	movs	r3, #0
 8017e78:	60fb      	str	r3, [r7, #12]
 8017e7a:	e029      	b.n	8017ed0 <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 8017e7c:	4a28      	ldr	r2, [pc, #160]	; (8017f20 <itdt_sched_nextRun+0xb8>)
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	2108      	movs	r1, #8
 8017e82:	011b      	lsls	r3, r3, #4
 8017e84:	18d3      	adds	r3, r2, r3
 8017e86:	185b      	adds	r3, r3, r1
 8017e88:	78db      	ldrb	r3, [r3, #3]
 8017e8a:	079b      	lsls	r3, r3, #30
 8017e8c:	0fdb      	lsrs	r3, r3, #31
 8017e8e:	b2db      	uxtb	r3, r3
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d11a      	bne.n	8017eca <itdt_sched_nextRun+0x62>
 8017e94:	693b      	ldr	r3, [r7, #16]
 8017e96:	697a      	ldr	r2, [r7, #20]
 8017e98:	4313      	orrs	r3, r2
 8017e9a:	d00e      	beq.n	8017eba <itdt_sched_nextRun+0x52>
 8017e9c:	4a20      	ldr	r2, [pc, #128]	; (8017f20 <itdt_sched_nextRun+0xb8>)
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	011b      	lsls	r3, r3, #4
 8017ea2:	18d3      	adds	r3, r2, r3
 8017ea4:	685c      	ldr	r4, [r3, #4]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	697a      	ldr	r2, [r7, #20]
 8017eaa:	42a2      	cmp	r2, r4
 8017eac:	d805      	bhi.n	8017eba <itdt_sched_nextRun+0x52>
 8017eae:	697a      	ldr	r2, [r7, #20]
 8017eb0:	42a2      	cmp	r2, r4
 8017eb2:	d10a      	bne.n	8017eca <itdt_sched_nextRun+0x62>
 8017eb4:	693a      	ldr	r2, [r7, #16]
 8017eb6:	429a      	cmp	r2, r3
 8017eb8:	d907      	bls.n	8017eca <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 8017eba:	4a19      	ldr	r2, [pc, #100]	; (8017f20 <itdt_sched_nextRun+0xb8>)
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	011b      	lsls	r3, r3, #4
 8017ec0:	18d3      	adds	r3, r2, r3
 8017ec2:	685c      	ldr	r4, [r3, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	613b      	str	r3, [r7, #16]
 8017ec8:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	3301      	adds	r3, #1
 8017ece:	60fb      	str	r3, [r7, #12]
 8017ed0:	4b14      	ldr	r3, [pc, #80]	; (8017f24 <itdt_sched_nextRun+0xbc>)
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	001a      	movs	r2, r3
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	4293      	cmp	r3, r2
 8017eda:	dbcf      	blt.n	8017e7c <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	697a      	ldr	r2, [r7, #20]
 8017ee0:	4313      	orrs	r3, r2
 8017ee2:	d017      	beq.n	8017f14 <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 8017ee4:	f000 f8a8 	bl	8018038 <itsdk_time_get_ms>
 8017ee8:	0003      	movs	r3, r0
 8017eea:	000c      	movs	r4, r1
 8017eec:	603b      	str	r3, [r7, #0]
 8017eee:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 8017ef0:	687a      	ldr	r2, [r7, #4]
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d80b      	bhi.n	8017f10 <itdt_sched_nextRun+0xa8>
 8017ef8:	687a      	ldr	r2, [r7, #4]
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d103      	bne.n	8017f08 <itdt_sched_nextRun+0xa0>
 8017f00:	683a      	ldr	r2, [r7, #0]
 8017f02:	693b      	ldr	r3, [r7, #16]
 8017f04:	429a      	cmp	r2, r3
 8017f06:	d803      	bhi.n	8017f10 <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 8017f08:	693a      	ldr	r2, [r7, #16]
 8017f0a:	683b      	ldr	r3, [r7, #0]
 8017f0c:	1ad3      	subs	r3, r2, r3
 8017f0e:	e003      	b.n	8017f18 <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 8017f10:	2300      	movs	r3, #0
 8017f12:	e001      	b.n	8017f18 <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 8017f14:	2301      	movs	r3, #1
 8017f16:	425b      	negs	r3, r3
	}
}
 8017f18:	0018      	movs	r0, r3
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	b007      	add	sp, #28
 8017f1e:	bd90      	pop	{r4, r7, pc}
 8017f20:	200011e0 	.word	0x200011e0
 8017f24:	20000d25 	.word	0x20000d25

08017f28 <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 8017f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f2a:	b087      	sub	sp, #28
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	603b      	str	r3, [r7, #0]
 8017f34:	2300      	movs	r3, #0
 8017f36:	607b      	str	r3, [r7, #4]
 8017f38:	22fa      	movs	r2, #250	; 0xfa
 8017f3a:	0092      	lsls	r2, r2, #2
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	6838      	ldr	r0, [r7, #0]
 8017f40:	6879      	ldr	r1, [r7, #4]
 8017f42:	f7e8 fae1 	bl	8000508 <__aeabi_lmul>
 8017f46:	0003      	movs	r3, r0
 8017f48:	000c      	movs	r4, r1
 8017f4a:	0018      	movs	r0, r3
 8017f4c:	0021      	movs	r1, r4
 8017f4e:	22fa      	movs	r2, #250	; 0xfa
 8017f50:	0092      	lsls	r2, r2, #2
 8017f52:	2300      	movs	r3, #0
 8017f54:	f7e8 fa94 	bl	8000480 <__aeabi_ldivmod>
 8017f58:	0003      	movs	r3, r0
 8017f5a:	000c      	movs	r4, r1
 8017f5c:	001a      	movs	r2, r3
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	189b      	adds	r3, r3, r2
 8017f62:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	001d      	movs	r5, r3
 8017f68:	2300      	movs	r3, #0
 8017f6a:	001e      	movs	r6, r3
 8017f6c:	4b12      	ldr	r3, [pc, #72]	; (8017fb8 <itsdk_time_add_us+0x90>)
 8017f6e:	685c      	ldr	r4, [r3, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	195b      	adds	r3, r3, r5
 8017f74:	4174      	adcs	r4, r6
 8017f76:	613b      	str	r3, [r7, #16]
 8017f78:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 8017f7a:	4b0f      	ldr	r3, [pc, #60]	; (8017fb8 <itsdk_time_add_us+0x90>)
 8017f7c:	685c      	ldr	r4, [r3, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	697a      	ldr	r2, [r7, #20]
 8017f82:	42a2      	cmp	r2, r4
 8017f84:	d305      	bcc.n	8017f92 <itsdk_time_add_us+0x6a>
 8017f86:	697a      	ldr	r2, [r7, #20]
 8017f88:	42a2      	cmp	r2, r4
 8017f8a:	d10b      	bne.n	8017fa4 <itsdk_time_add_us+0x7c>
 8017f8c:	693a      	ldr	r2, [r7, #16]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d208      	bcs.n	8017fa4 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 8017f92:	4b0a      	ldr	r3, [pc, #40]	; (8017fbc <itsdk_time_add_us+0x94>)
 8017f94:	2201      	movs	r2, #1
 8017f96:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8017f98:	4b09      	ldr	r3, [pc, #36]	; (8017fc0 <itsdk_time_add_us+0x98>)
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	b2da      	uxtb	r2, r3
 8017fa0:	4b07      	ldr	r3, [pc, #28]	; (8017fc0 <itsdk_time_add_us+0x98>)
 8017fa2:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8017fa4:	4a04      	ldr	r2, [pc, #16]	; (8017fb8 <itsdk_time_add_us+0x90>)
 8017fa6:	693b      	ldr	r3, [r7, #16]
 8017fa8:	697c      	ldr	r4, [r7, #20]
 8017faa:	6013      	str	r3, [r2, #0]
 8017fac:	6054      	str	r4, [r2, #4]
}
 8017fae:	46c0      	nop			; (mov r8, r8)
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	b007      	add	sp, #28
 8017fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fb6:	46c0      	nop			; (mov r8, r8)
 8017fb8:	20000d28 	.word	0x20000d28
 8017fbc:	20000d30 	.word	0x20000d30
 8017fc0:	20000d31 	.word	0x20000d31

08017fc4 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 8017fc4:	b590      	push	{r4, r7, lr}
 8017fc6:	b085      	sub	sp, #20
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6038      	str	r0, [r7, #0]
 8017fcc:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 8017fce:	22fa      	movs	r2, #250	; 0xfa
 8017fd0:	0092      	lsls	r2, r2, #2
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	6838      	ldr	r0, [r7, #0]
 8017fd6:	6879      	ldr	r1, [r7, #4]
 8017fd8:	f7e8 fa96 	bl	8000508 <__aeabi_lmul>
 8017fdc:	0003      	movs	r3, r0
 8017fde:	000c      	movs	r4, r1
 8017fe0:	60bb      	str	r3, [r7, #8]
 8017fe2:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 8017fe4:	4b10      	ldr	r3, [pc, #64]	; (8018028 <itsdk_time_set_ms+0x64>)
 8017fe6:	6819      	ldr	r1, [r3, #0]
 8017fe8:	685a      	ldr	r2, [r3, #4]
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	68fc      	ldr	r4, [r7, #12]
 8017fee:	1ac9      	subs	r1, r1, r3
 8017ff0:	41a2      	sbcs	r2, r4
 8017ff2:	000b      	movs	r3, r1
 8017ff4:	0014      	movs	r4, r2
 8017ff6:	2c00      	cmp	r4, #0
 8017ff8:	d103      	bne.n	8018002 <itsdk_time_set_ms+0x3e>
 8017ffa:	d10b      	bne.n	8018014 <itsdk_time_set_ms+0x50>
 8017ffc:	4a0b      	ldr	r2, [pc, #44]	; (801802c <itsdk_time_set_ms+0x68>)
 8017ffe:	4293      	cmp	r3, r2
 8018000:	d908      	bls.n	8018014 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 8018002:	4b0b      	ldr	r3, [pc, #44]	; (8018030 <itsdk_time_set_ms+0x6c>)
 8018004:	2201      	movs	r2, #1
 8018006:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8018008:	4b0a      	ldr	r3, [pc, #40]	; (8018034 <itsdk_time_set_ms+0x70>)
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	3301      	adds	r3, #1
 801800e:	b2da      	uxtb	r2, r3
 8018010:	4b08      	ldr	r3, [pc, #32]	; (8018034 <itsdk_time_set_ms+0x70>)
 8018012:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8018014:	4a04      	ldr	r2, [pc, #16]	; (8018028 <itsdk_time_set_ms+0x64>)
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	68fc      	ldr	r4, [r7, #12]
 801801a:	6013      	str	r3, [r2, #0]
 801801c:	6054      	str	r4, [r2, #4]
}
 801801e:	46c0      	nop			; (mov r8, r8)
 8018020:	46bd      	mov	sp, r7
 8018022:	b005      	add	sp, #20
 8018024:	bd90      	pop	{r4, r7, pc}
 8018026:	46c0      	nop			; (mov r8, r8)
 8018028:	20000d28 	.word	0x20000d28
 801802c:	000f4240 	.word	0x000f4240
 8018030:	20000d30 	.word	0x20000d30
 8018034:	20000d31 	.word	0x20000d31

08018038 <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 8018038:	b5b0      	push	{r4, r5, r7, lr}
 801803a:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 801803c:	4b06      	ldr	r3, [pc, #24]	; (8018058 <itsdk_time_get_ms+0x20>)
 801803e:	6818      	ldr	r0, [r3, #0]
 8018040:	6859      	ldr	r1, [r3, #4]
 8018042:	22fa      	movs	r2, #250	; 0xfa
 8018044:	0092      	lsls	r2, r2, #2
 8018046:	2300      	movs	r3, #0
 8018048:	f7e8 fa3e 	bl	80004c8 <__aeabi_uldivmod>
 801804c:	0003      	movs	r3, r0
 801804e:	000c      	movs	r4, r1
}
 8018050:	0018      	movs	r0, r3
 8018052:	0021      	movs	r1, r4
 8018054:	46bd      	mov	sp, r7
 8018056:	bdb0      	pop	{r4, r5, r7, pc}
 8018058:	20000d28 	.word	0x20000d28

0801805c <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 801805c:	b590      	push	{r4, r7, lr}
 801805e:	af00      	add	r7, sp, #0
	return __timeus;
 8018060:	4b03      	ldr	r3, [pc, #12]	; (8018070 <itsdk_time_get_us+0x14>)
 8018062:	685c      	ldr	r4, [r3, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
}
 8018066:	0018      	movs	r0, r3
 8018068:	0021      	movs	r1, r4
 801806a:	46bd      	mov	sp, r7
 801806c:	bd90      	pop	{r4, r7, pc}
 801806e:	46c0      	nop			; (mov r8, r8)
 8018070:	20000d28 	.word	0x20000d28

08018074 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 8018074:	b5b0      	push	{r4, r5, r7, lr}
 8018076:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 8018078:	f001 fdd4 	bl	8019c24 <rtc_resetTime>
	rtc_adjustTime();
 801807c:	f001 fe56 	bl	8019d2c <rtc_adjustTime>
  #endif
	systick_adjustTime();
 8018080:	f001 feb2 	bl	8019de8 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 8018084:	f001 fce0 	bl	8019a48 <rtc_getTimestampMs>
 8018088:	0003      	movs	r3, r0
 801808a:	000c      	movs	r4, r1
 801808c:	0018      	movs	r0, r3
 801808e:	0021      	movs	r1, r4
 8018090:	f7ff ff98 	bl	8017fc4 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 8018094:	46c0      	nop			; (mov r8, r8)
 8018096:	46bd      	mov	sp, r7
 8018098:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801809c <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 801809c:	b5b0      	push	{r4, r5, r7, lr}
 801809e:	b086      	sub	sp, #24
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	60f8      	str	r0, [r7, #12]
 80180a4:	60b9      	str	r1, [r7, #8]
 80180a6:	607a      	str	r2, [r7, #4]
 80180a8:	001a      	movs	r2, r3
 80180aa:	1cfb      	adds	r3, r7, #3
 80180ac:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 80180ae:	2300      	movs	r3, #0
 80180b0:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 80180b2:	e00e      	b.n	80180d2 <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 80180b4:	492f      	ldr	r1, [pc, #188]	; (8018174 <itsdk_stimer_register+0xd8>)
 80180b6:	697a      	ldr	r2, [r7, #20]
 80180b8:	0013      	movs	r3, r2
 80180ba:	005b      	lsls	r3, r3, #1
 80180bc:	189b      	adds	r3, r3, r2
 80180be:	00db      	lsls	r3, r3, #3
 80180c0:	5c5b      	ldrb	r3, [r3, r1]
 80180c2:	2201      	movs	r2, #1
 80180c4:	4053      	eors	r3, r2
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d106      	bne.n	80180da <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	3301      	adds	r3, #1
 80180d0:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	2b04      	cmp	r3, #4
 80180d6:	dded      	ble.n	80180b4 <itsdk_stimer_register+0x18>
 80180d8:	e000      	b.n	80180dc <itsdk_stimer_register+0x40>
			break;
 80180da:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	2b04      	cmp	r3, #4
 80180e0:	dc42      	bgt.n	8018168 <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 80180e2:	4924      	ldr	r1, [pc, #144]	; (8018174 <itsdk_stimer_register+0xd8>)
 80180e4:	697a      	ldr	r2, [r7, #20]
 80180e6:	0013      	movs	r3, r2
 80180e8:	005b      	lsls	r3, r3, #1
 80180ea:	189b      	adds	r3, r3, r2
 80180ec:	00db      	lsls	r3, r3, #3
 80180ee:	2201      	movs	r2, #1
 80180f0:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 80180f2:	1cfb      	adds	r3, r7, #3
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	425a      	negs	r2, r3
 80180f8:	4153      	adcs	r3, r2
 80180fa:	b2d8      	uxtb	r0, r3
 80180fc:	491d      	ldr	r1, [pc, #116]	; (8018174 <itsdk_stimer_register+0xd8>)
 80180fe:	697a      	ldr	r2, [r7, #20]
 8018100:	0013      	movs	r3, r2
 8018102:	005b      	lsls	r3, r3, #1
 8018104:	189b      	adds	r3, r3, r2
 8018106:	00db      	lsls	r3, r3, #3
 8018108:	18cb      	adds	r3, r1, r3
 801810a:	3301      	adds	r3, #1
 801810c:	1c02      	adds	r2, r0, #0
 801810e:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 8018110:	4918      	ldr	r1, [pc, #96]	; (8018174 <itsdk_stimer_register+0xd8>)
 8018112:	697a      	ldr	r2, [r7, #20]
 8018114:	0013      	movs	r3, r2
 8018116:	005b      	lsls	r3, r3, #1
 8018118:	189b      	adds	r3, r3, r2
 801811a:	00db      	lsls	r3, r3, #3
 801811c:	18cb      	adds	r3, r1, r3
 801811e:	3314      	adds	r3, #20
 8018120:	687a      	ldr	r2, [r7, #4]
 8018122:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 8018124:	4913      	ldr	r1, [pc, #76]	; (8018174 <itsdk_stimer_register+0xd8>)
 8018126:	697a      	ldr	r2, [r7, #20]
 8018128:	0013      	movs	r3, r2
 801812a:	005b      	lsls	r3, r3, #1
 801812c:	189b      	adds	r3, r3, r2
 801812e:	00db      	lsls	r3, r3, #3
 8018130:	18cb      	adds	r3, r1, r3
 8018132:	3310      	adds	r3, #16
 8018134:	68ba      	ldr	r2, [r7, #8]
 8018136:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 8018138:	f7ff ff7e 	bl	8018038 <itsdk_time_get_ms>
 801813c:	0002      	movs	r2, r0
 801813e:	000b      	movs	r3, r1
 8018140:	68f9      	ldr	r1, [r7, #12]
 8018142:	000c      	movs	r4, r1
 8018144:	2100      	movs	r1, #0
 8018146:	000d      	movs	r5, r1
 8018148:	1912      	adds	r2, r2, r4
 801814a:	416b      	adcs	r3, r5
 801814c:	0011      	movs	r1, r2
 801814e:	001a      	movs	r2, r3
 8018150:	4c08      	ldr	r4, [pc, #32]	; (8018174 <itsdk_stimer_register+0xd8>)
 8018152:	6978      	ldr	r0, [r7, #20]
 8018154:	0003      	movs	r3, r0
 8018156:	005b      	lsls	r3, r3, #1
 8018158:	181b      	adds	r3, r3, r0
 801815a:	00db      	lsls	r3, r3, #3
 801815c:	18e3      	adds	r3, r4, r3
 801815e:	3308      	adds	r3, #8
 8018160:	6019      	str	r1, [r3, #0]
 8018162:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 8018164:	2300      	movs	r3, #0
 8018166:	e000      	b.n	801816a <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 8018168:	2303      	movs	r3, #3
}
 801816a:	0018      	movs	r0, r3
 801816c:	46bd      	mov	sp, r7
 801816e:	b006      	add	sp, #24
 8018170:	bdb0      	pop	{r4, r5, r7, pc}
 8018172:	46c0      	nop			; (mov r8, r8)
 8018174:	20000d38 	.word	0x20000d38

08018178 <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 8018178:	b580      	push	{r7, lr}
 801817a:	b084      	sub	sp, #16
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 8018182:	2300      	movs	r3, #0
 8018184:	60fb      	str	r3, [r7, #12]
 8018186:	e02d      	b.n	80181e4 <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 8018188:	491a      	ldr	r1, [pc, #104]	; (80181f4 <itsdk_stimer_stop+0x7c>)
 801818a:	68fa      	ldr	r2, [r7, #12]
 801818c:	0013      	movs	r3, r2
 801818e:	005b      	lsls	r3, r3, #1
 8018190:	189b      	adds	r3, r3, r2
 8018192:	00db      	lsls	r3, r3, #3
 8018194:	5c5b      	ldrb	r3, [r3, r1]
		if (
 8018196:	2b00      	cmp	r3, #0
 8018198:	d021      	beq.n	80181de <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 801819a:	4916      	ldr	r1, [pc, #88]	; (80181f4 <itsdk_stimer_stop+0x7c>)
 801819c:	68fa      	ldr	r2, [r7, #12]
 801819e:	0013      	movs	r3, r2
 80181a0:	005b      	lsls	r3, r3, #1
 80181a2:	189b      	adds	r3, r3, r2
 80181a4:	00db      	lsls	r3, r3, #3
 80181a6:	18cb      	adds	r3, r1, r3
 80181a8:	3314      	adds	r3, #20
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	683a      	ldr	r2, [r7, #0]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d115      	bne.n	80181de <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 80181b2:	4910      	ldr	r1, [pc, #64]	; (80181f4 <itsdk_stimer_stop+0x7c>)
 80181b4:	68fa      	ldr	r2, [r7, #12]
 80181b6:	0013      	movs	r3, r2
 80181b8:	005b      	lsls	r3, r3, #1
 80181ba:	189b      	adds	r3, r3, r2
 80181bc:	00db      	lsls	r3, r3, #3
 80181be:	18cb      	adds	r3, r1, r3
 80181c0:	3310      	adds	r3, #16
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d109      	bne.n	80181de <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 80181ca:	490a      	ldr	r1, [pc, #40]	; (80181f4 <itsdk_stimer_stop+0x7c>)
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	0013      	movs	r3, r2
 80181d0:	005b      	lsls	r3, r3, #1
 80181d2:	189b      	adds	r3, r3, r2
 80181d4:	00db      	lsls	r3, r3, #3
 80181d6:	2200      	movs	r2, #0
 80181d8:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 80181da:	2300      	movs	r3, #0
 80181dc:	e006      	b.n	80181ec <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	3301      	adds	r3, #1
 80181e2:	60fb      	str	r3, [r7, #12]
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	2b04      	cmp	r3, #4
 80181e8:	ddce      	ble.n	8018188 <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 80181ea:	2304      	movs	r3, #4
}
 80181ec:	0018      	movs	r0, r3
 80181ee:	46bd      	mov	sp, r7
 80181f0:	b004      	add	sp, #16
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	20000d38 	.word	0x20000d38

080181f8 <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b082      	sub	sp, #8
 80181fc:	af00      	add	r7, sp, #0
	int i = 0;
 80181fe:	2300      	movs	r3, #0
 8018200:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 8018202:	e01b      	b.n	801823c <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 8018204:	4911      	ldr	r1, [pc, #68]	; (801824c <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 8018206:	687a      	ldr	r2, [r7, #4]
 8018208:	0013      	movs	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	189b      	adds	r3, r3, r2
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	5c5b      	ldrb	r3, [r3, r1]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d00f      	beq.n	8018236 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 8018216:	490d      	ldr	r1, [pc, #52]	; (801824c <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 8018218:	687a      	ldr	r2, [r7, #4]
 801821a:	0013      	movs	r3, r2
 801821c:	005b      	lsls	r3, r3, #1
 801821e:	189b      	adds	r3, r3, r2
 8018220:	00db      	lsls	r3, r3, #3
 8018222:	18cb      	adds	r3, r1, r3
 8018224:	3301      	adds	r3, #1
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	2201      	movs	r2, #1
 801822a:	4053      	eors	r3, r2
 801822c:	b2db      	uxtb	r3, r3
 801822e:	2b00      	cmp	r3, #0
 8018230:	d001      	beq.n	8018236 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 8018232:	2300      	movs	r3, #0
 8018234:	e006      	b.n	8018244 <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	3301      	adds	r3, #1
 801823a:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2b04      	cmp	r3, #4
 8018240:	dde0      	ble.n	8018204 <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 8018242:	2301      	movs	r3, #1
}
 8018244:	0018      	movs	r0, r3
 8018246:	46bd      	mov	sp, r7
 8018248:	b002      	add	sp, #8
 801824a:	bd80      	pop	{r7, pc}
 801824c:	20000d38 	.word	0x20000d38

08018250 <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 8018250:	b580      	push	{r7, lr}
 8018252:	b084      	sub	sp, #16
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
 8018258:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801825a:	2300      	movs	r3, #0
 801825c:	60fb      	str	r3, [r7, #12]
 801825e:	e02b      	b.n	80182b8 <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 8018260:	4919      	ldr	r1, [pc, #100]	; (80182c8 <itsdk_stimer_get+0x78>)
 8018262:	68fa      	ldr	r2, [r7, #12]
 8018264:	0013      	movs	r3, r2
 8018266:	005b      	lsls	r3, r3, #1
 8018268:	189b      	adds	r3, r3, r2
 801826a:	00db      	lsls	r3, r3, #3
 801826c:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801826e:	2b00      	cmp	r3, #0
 8018270:	d01f      	beq.n	80182b2 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 8018272:	4915      	ldr	r1, [pc, #84]	; (80182c8 <itsdk_stimer_get+0x78>)
 8018274:	68fa      	ldr	r2, [r7, #12]
 8018276:	0013      	movs	r3, r2
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	189b      	adds	r3, r3, r2
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	18cb      	adds	r3, r1, r3
 8018280:	3314      	adds	r3, #20
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	683a      	ldr	r2, [r7, #0]
 8018286:	429a      	cmp	r2, r3
 8018288:	d113      	bne.n	80182b2 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 801828a:	490f      	ldr	r1, [pc, #60]	; (80182c8 <itsdk_stimer_get+0x78>)
 801828c:	68fa      	ldr	r2, [r7, #12]
 801828e:	0013      	movs	r3, r2
 8018290:	005b      	lsls	r3, r3, #1
 8018292:	189b      	adds	r3, r3, r2
 8018294:	00db      	lsls	r3, r3, #3
 8018296:	18cb      	adds	r3, r1, r3
 8018298:	3310      	adds	r3, #16
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	687a      	ldr	r2, [r7, #4]
 801829e:	429a      	cmp	r2, r3
 80182a0:	d107      	bne.n	80182b2 <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 80182a2:	68fa      	ldr	r2, [r7, #12]
 80182a4:	0013      	movs	r3, r2
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	189b      	adds	r3, r3, r2
 80182aa:	00db      	lsls	r3, r3, #3
 80182ac:	4a06      	ldr	r2, [pc, #24]	; (80182c8 <itsdk_stimer_get+0x78>)
 80182ae:	189b      	adds	r3, r3, r2
 80182b0:	e006      	b.n	80182c0 <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	3301      	adds	r3, #1
 80182b6:	60fb      	str	r3, [r7, #12]
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	2b04      	cmp	r3, #4
 80182bc:	ddd0      	ble.n	8018260 <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 80182be:	2300      	movs	r3, #0

}
 80182c0:	0018      	movs	r0, r3
 80182c2:	46bd      	mov	sp, r7
 80182c4:	b004      	add	sp, #16
 80182c6:	bd80      	pop	{r7, pc}
 80182c8:	20000d38 	.word	0x20000d38

080182cc <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 80182cc:	b590      	push	{r4, r7, lr}
 80182ce:	b085      	sub	sp, #20
 80182d0:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 80182d2:	f7ff feb1 	bl	8018038 <itsdk_time_get_ms>
 80182d6:	0003      	movs	r3, r0
 80182d8:	000c      	movs	r4, r1
 80182da:	603b      	str	r3, [r7, #0]
 80182dc:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 80182de:	2300      	movs	r3, #0
 80182e0:	60fb      	str	r3, [r7, #12]
 80182e2:	e045      	b.n	8018370 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 80182e4:	4926      	ldr	r1, [pc, #152]	; (8018380 <itsdk_stimer_run+0xb4>)
 80182e6:	68fa      	ldr	r2, [r7, #12]
 80182e8:	0013      	movs	r3, r2
 80182ea:	005b      	lsls	r3, r3, #1
 80182ec:	189b      	adds	r3, r3, r2
 80182ee:	00db      	lsls	r3, r3, #3
 80182f0:	5c5b      	ldrb	r3, [r3, r1]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d039      	beq.n	801836a <itsdk_stimer_run+0x9e>
 80182f6:	4922      	ldr	r1, [pc, #136]	; (8018380 <itsdk_stimer_run+0xb4>)
 80182f8:	68fa      	ldr	r2, [r7, #12]
 80182fa:	0013      	movs	r3, r2
 80182fc:	005b      	lsls	r3, r3, #1
 80182fe:	189b      	adds	r3, r3, r2
 8018300:	00db      	lsls	r3, r3, #3
 8018302:	18cb      	adds	r3, r1, r3
 8018304:	3308      	adds	r3, #8
 8018306:	685c      	ldr	r4, [r3, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	687a      	ldr	r2, [r7, #4]
 801830c:	42a2      	cmp	r2, r4
 801830e:	d32c      	bcc.n	801836a <itsdk_stimer_run+0x9e>
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	42a2      	cmp	r2, r4
 8018314:	d102      	bne.n	801831c <itsdk_stimer_run+0x50>
 8018316:	683a      	ldr	r2, [r7, #0]
 8018318:	429a      	cmp	r2, r3
 801831a:	d326      	bcc.n	801836a <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 801831c:	4918      	ldr	r1, [pc, #96]	; (8018380 <itsdk_stimer_run+0xb4>)
 801831e:	68fa      	ldr	r2, [r7, #12]
 8018320:	0013      	movs	r3, r2
 8018322:	005b      	lsls	r3, r3, #1
 8018324:	189b      	adds	r3, r3, r2
 8018326:	00db      	lsls	r3, r3, #3
 8018328:	2200      	movs	r2, #0
 801832a:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 801832c:	4914      	ldr	r1, [pc, #80]	; (8018380 <itsdk_stimer_run+0xb4>)
 801832e:	68fa      	ldr	r2, [r7, #12]
 8018330:	0013      	movs	r3, r2
 8018332:	005b      	lsls	r3, r3, #1
 8018334:	189b      	adds	r3, r3, r2
 8018336:	00db      	lsls	r3, r3, #3
 8018338:	18cb      	adds	r3, r1, r3
 801833a:	3310      	adds	r3, #16
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d013      	beq.n	801836a <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 8018342:	490f      	ldr	r1, [pc, #60]	; (8018380 <itsdk_stimer_run+0xb4>)
 8018344:	68fa      	ldr	r2, [r7, #12]
 8018346:	0013      	movs	r3, r2
 8018348:	005b      	lsls	r3, r3, #1
 801834a:	189b      	adds	r3, r3, r2
 801834c:	00db      	lsls	r3, r3, #3
 801834e:	18cb      	adds	r3, r1, r3
 8018350:	3310      	adds	r3, #16
 8018352:	6819      	ldr	r1, [r3, #0]
 8018354:	480a      	ldr	r0, [pc, #40]	; (8018380 <itsdk_stimer_run+0xb4>)
 8018356:	68fa      	ldr	r2, [r7, #12]
 8018358:	0013      	movs	r3, r2
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	189b      	adds	r3, r3, r2
 801835e:	00db      	lsls	r3, r3, #3
 8018360:	18c3      	adds	r3, r0, r3
 8018362:	3314      	adds	r3, #20
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	0018      	movs	r0, r3
 8018368:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	3301      	adds	r3, #1
 801836e:	60fb      	str	r3, [r7, #12]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2b04      	cmp	r3, #4
 8018374:	ddb6      	ble.n	80182e4 <itsdk_stimer_run+0x18>
		}
	}
}
 8018376:	46c0      	nop			; (mov r8, r8)
 8018378:	46bd      	mov	sp, r7
 801837a:	b005      	add	sp, #20
 801837c:	bd90      	pop	{r4, r7, pc}
 801837e:	46c0      	nop			; (mov r8, r8)
 8018380:	20000d38 	.word	0x20000d38

08018384 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 8018384:	b590      	push	{r4, r7, lr}
 8018386:	b087      	sub	sp, #28
 8018388:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801838a:	f7ff fe55 	bl	8018038 <itsdk_time_get_ms>
 801838e:	0003      	movs	r3, r0
 8018390:	000c      	movs	r4, r1
 8018392:	603b      	str	r3, [r7, #0]
 8018394:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 8018396:	2301      	movs	r3, #1
 8018398:	425b      	negs	r3, r3
 801839a:	17dc      	asrs	r4, r3, #31
 801839c:	613b      	str	r3, [r7, #16]
 801839e:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 80183a0:	2300      	movs	r3, #0
 80183a2:	60fb      	str	r3, [r7, #12]
 80183a4:	e03d      	b.n	8018422 <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 80183a6:	492c      	ldr	r1, [pc, #176]	; (8018458 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80183a8:	68fa      	ldr	r2, [r7, #12]
 80183aa:	0013      	movs	r3, r2
 80183ac:	005b      	lsls	r3, r3, #1
 80183ae:	189b      	adds	r3, r3, r2
 80183b0:	00db      	lsls	r3, r3, #3
 80183b2:	5c5b      	ldrb	r3, [r3, r1]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d031      	beq.n	801841c <itsdk_stimer_nextTimeoutMs+0x98>
 80183b8:	4927      	ldr	r1, [pc, #156]	; (8018458 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80183ba:	68fa      	ldr	r2, [r7, #12]
 80183bc:	0013      	movs	r3, r2
 80183be:	005b      	lsls	r3, r3, #1
 80183c0:	189b      	adds	r3, r3, r2
 80183c2:	00db      	lsls	r3, r3, #3
 80183c4:	18cb      	adds	r3, r1, r3
 80183c6:	3308      	adds	r3, #8
 80183c8:	685c      	ldr	r4, [r3, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	687a      	ldr	r2, [r7, #4]
 80183ce:	42a2      	cmp	r2, r4
 80183d0:	d824      	bhi.n	801841c <itsdk_stimer_nextTimeoutMs+0x98>
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	42a2      	cmp	r2, r4
 80183d6:	d102      	bne.n	80183de <itsdk_stimer_nextTimeoutMs+0x5a>
 80183d8:	683a      	ldr	r2, [r7, #0]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d81e      	bhi.n	801841c <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 80183de:	491e      	ldr	r1, [pc, #120]	; (8018458 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80183e0:	68fa      	ldr	r2, [r7, #12]
 80183e2:	0013      	movs	r3, r2
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	189b      	adds	r3, r3, r2
 80183e8:	00db      	lsls	r3, r3, #3
 80183ea:	18cb      	adds	r3, r1, r3
 80183ec:	3308      	adds	r3, #8
 80183ee:	685c      	ldr	r4, [r3, #4]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	697a      	ldr	r2, [r7, #20]
 80183f4:	42a2      	cmp	r2, r4
 80183f6:	d805      	bhi.n	8018404 <itsdk_stimer_nextTimeoutMs+0x80>
 80183f8:	697a      	ldr	r2, [r7, #20]
 80183fa:	42a2      	cmp	r2, r4
 80183fc:	d10e      	bne.n	801841c <itsdk_stimer_nextTimeoutMs+0x98>
 80183fe:	693a      	ldr	r2, [r7, #16]
 8018400:	429a      	cmp	r2, r3
 8018402:	d90b      	bls.n	801841c <itsdk_stimer_nextTimeoutMs+0x98>
 8018404:	4914      	ldr	r1, [pc, #80]	; (8018458 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8018406:	68fa      	ldr	r2, [r7, #12]
 8018408:	0013      	movs	r3, r2
 801840a:	005b      	lsls	r3, r3, #1
 801840c:	189b      	adds	r3, r3, r2
 801840e:	00db      	lsls	r3, r3, #3
 8018410:	18cb      	adds	r3, r1, r3
 8018412:	3308      	adds	r3, #8
 8018414:	685c      	ldr	r4, [r3, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	613b      	str	r3, [r7, #16]
 801841a:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	3301      	adds	r3, #1
 8018420:	60fb      	str	r3, [r7, #12]
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	2b04      	cmp	r3, #4
 8018426:	ddbe      	ble.n	80183a6 <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	3301      	adds	r3, #1
 801842c:	d102      	bne.n	8018434 <itsdk_stimer_nextTimeoutMs+0xb0>
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	3301      	adds	r3, #1
 8018432:	d00b      	beq.n	801844c <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 8018434:	6939      	ldr	r1, [r7, #16]
 8018436:	697a      	ldr	r2, [r7, #20]
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	687c      	ldr	r4, [r7, #4]
 801843c:	1ac9      	subs	r1, r1, r3
 801843e:	41a2      	sbcs	r2, r4
 8018440:	000b      	movs	r3, r1
 8018442:	0014      	movs	r4, r2
 8018444:	613b      	str	r3, [r7, #16]
 8018446:	617c      	str	r4, [r7, #20]
		return min;
 8018448:	693b      	ldr	r3, [r7, #16]
 801844a:	e001      	b.n	8018450 <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 801844c:	2301      	movs	r3, #1
 801844e:	425b      	negs	r3, r3
}
 8018450:	0018      	movs	r0, r3
 8018452:	46bd      	mov	sp, r7
 8018454:	b007      	add	sp, #28
 8018456:	bd90      	pop	{r4, r7, pc}
 8018458:	20000d38 	.word	0x20000d38

0801845c <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 801845c:	b580      	push	{r7, lr}
 801845e:	b084      	sub	sp, #16
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
 8018464:	000a      	movs	r2, r1
 8018466:	1cfb      	adds	r3, r7, #3
 8018468:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801846a:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 801846c:	4b73      	ldr	r3, [pc, #460]	; (801863c <__getAdcValue+0x1e0>)
 801846e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018470:	4b72      	ldr	r3, [pc, #456]	; (801863c <__getAdcValue+0x1e0>)
 8018472:	2180      	movs	r1, #128	; 0x80
 8018474:	0089      	lsls	r1, r1, #2
 8018476:	430a      	orrs	r2, r1
 8018478:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 801847a:	46c0      	nop			; (mov r8, r8)
 801847c:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 801847e:	4b6f      	ldr	r3, [pc, #444]	; (801863c <__getAdcValue+0x1e0>)
 8018480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018482:	4b6e      	ldr	r3, [pc, #440]	; (801863c <__getAdcValue+0x1e0>)
 8018484:	2180      	movs	r1, #128	; 0x80
 8018486:	0089      	lsls	r1, r1, #2
 8018488:	430a      	orrs	r2, r1
 801848a:	625a      	str	r2, [r3, #36]	; 0x24
 801848c:	46c0      	nop			; (mov r8, r8)
 801848e:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 8018490:	4b6a      	ldr	r3, [pc, #424]	; (801863c <__getAdcValue+0x1e0>)
 8018492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018494:	4b69      	ldr	r3, [pc, #420]	; (801863c <__getAdcValue+0x1e0>)
 8018496:	496a      	ldr	r1, [pc, #424]	; (8018640 <__getAdcValue+0x1e4>)
 8018498:	400a      	ands	r2, r1
 801849a:	625a      	str	r2, [r3, #36]	; 0x24
 801849c:	46c0      	nop			; (mov r8, r8)
 801849e:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 80184a0:	4b68      	ldr	r3, [pc, #416]	; (8018644 <__getAdcValue+0x1e8>)
 80184a2:	2200      	movs	r2, #0
 80184a4:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 80184a6:	4b67      	ldr	r3, [pc, #412]	; (8018644 <__getAdcValue+0x1e8>)
 80184a8:	691a      	ldr	r2, [r3, #16]
 80184aa:	4b66      	ldr	r3, [pc, #408]	; (8018644 <__getAdcValue+0x1e8>)
 80184ac:	0092      	lsls	r2, r2, #2
 80184ae:	0892      	lsrs	r2, r2, #2
 80184b0:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 80184b2:	4b64      	ldr	r3, [pc, #400]	; (8018644 <__getAdcValue+0x1e8>)
 80184b4:	689a      	ldr	r2, [r3, #8]
 80184b6:	4b63      	ldr	r3, [pc, #396]	; (8018644 <__getAdcValue+0x1e8>)
 80184b8:	2180      	movs	r1, #128	; 0x80
 80184ba:	0549      	lsls	r1, r1, #21
 80184bc:	430a      	orrs	r2, r1
 80184be:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 80184c0:	4b61      	ldr	r3, [pc, #388]	; (8018648 <__getAdcValue+0x1ec>)
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	4b60      	ldr	r3, [pc, #384]	; (8018648 <__getAdcValue+0x1ec>)
 80184c6:	2180      	movs	r1, #128	; 0x80
 80184c8:	03c9      	lsls	r1, r1, #15
 80184ca:	430a      	orrs	r2, r1
 80184cc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 80184ce:	4b5e      	ldr	r3, [pc, #376]	; (8018648 <__getAdcValue+0x1ec>)
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	4b5d      	ldr	r3, [pc, #372]	; (8018648 <__getAdcValue+0x1ec>)
 80184d4:	2180      	movs	r1, #128	; 0x80
 80184d6:	0409      	lsls	r1, r1, #16
 80184d8:	430a      	orrs	r2, r1
 80184da:	601a      	str	r2, [r3, #0]
 80184dc:	46c0      	nop			; (mov r8, r8)
 80184de:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 80184e0:	4b58      	ldr	r3, [pc, #352]	; (8018644 <__getAdcValue+0x1e8>)
 80184e2:	689b      	ldr	r3, [r3, #8]
 80184e4:	2201      	movs	r2, #1
 80184e6:	4013      	ands	r3, r2
 80184e8:	d005      	beq.n	80184f6 <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 80184ea:	4b56      	ldr	r3, [pc, #344]	; (8018644 <__getAdcValue+0x1e8>)
 80184ec:	689a      	ldr	r2, [r3, #8]
 80184ee:	4b55      	ldr	r3, [pc, #340]	; (8018644 <__getAdcValue+0x1e8>)
 80184f0:	2101      	movs	r1, #1
 80184f2:	438a      	bics	r2, r1
 80184f4:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 80184f6:	4b53      	ldr	r3, [pc, #332]	; (8018644 <__getAdcValue+0x1e8>)
 80184f8:	689a      	ldr	r2, [r3, #8]
 80184fa:	4b52      	ldr	r3, [pc, #328]	; (8018644 <__getAdcValue+0x1e8>)
 80184fc:	2180      	movs	r1, #128	; 0x80
 80184fe:	0609      	lsls	r1, r1, #24
 8018500:	430a      	orrs	r2, r1
 8018502:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 8018504:	46c0      	nop			; (mov r8, r8)
 8018506:	4b4f      	ldr	r3, [pc, #316]	; (8018644 <__getAdcValue+0x1e8>)
 8018508:	681a      	ldr	r2, [r3, #0]
 801850a:	2380      	movs	r3, #128	; 0x80
 801850c:	011b      	lsls	r3, r3, #4
 801850e:	4013      	ands	r3, r2
 8018510:	d0f9      	beq.n	8018506 <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 8018512:	4b4c      	ldr	r3, [pc, #304]	; (8018644 <__getAdcValue+0x1e8>)
 8018514:	681a      	ldr	r2, [r3, #0]
 8018516:	4b4b      	ldr	r3, [pc, #300]	; (8018644 <__getAdcValue+0x1e8>)
 8018518:	2180      	movs	r1, #128	; 0x80
 801851a:	0109      	lsls	r1, r1, #4
 801851c:	430a      	orrs	r2, r1
 801851e:	601a      	str	r2, [r3, #0]
 8018520:	46c0      	nop			; (mov r8, r8)
 8018522:	46c0      	nop			; (mov r8, r8)
 8018524:	46c0      	nop			; (mov r8, r8)
 8018526:	46c0      	nop			; (mov r8, r8)
 8018528:	46c0      	nop			; (mov r8, r8)
 801852a:	46c0      	nop			; (mov r8, r8)
 801852c:	46c0      	nop			; (mov r8, r8)
 801852e:	46c0      	nop			; (mov r8, r8)
 8018530:	46c0      	nop			; (mov r8, r8)
 8018532:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 8018534:	4b43      	ldr	r3, [pc, #268]	; (8018644 <__getAdcValue+0x1e8>)
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	4b42      	ldr	r3, [pc, #264]	; (8018644 <__getAdcValue+0x1e8>)
 801853a:	2101      	movs	r1, #1
 801853c:	430a      	orrs	r2, r1
 801853e:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 8018540:	4b40      	ldr	r3, [pc, #256]	; (8018644 <__getAdcValue+0x1e8>)
 8018542:	689a      	ldr	r2, [r3, #8]
 8018544:	4b3f      	ldr	r3, [pc, #252]	; (8018644 <__getAdcValue+0x1e8>)
 8018546:	2101      	movs	r1, #1
 8018548:	430a      	orrs	r2, r1
 801854a:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 801854c:	46c0      	nop			; (mov r8, r8)
 801854e:	4b3d      	ldr	r3, [pc, #244]	; (8018644 <__getAdcValue+0x1e8>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	2201      	movs	r2, #1
 8018554:	4013      	ands	r3, r2
 8018556:	d0fa      	beq.n	801854e <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 8018558:	4b3a      	ldr	r3, [pc, #232]	; (8018644 <__getAdcValue+0x1e8>)
 801855a:	68da      	ldr	r2, [r3, #12]
 801855c:	4b39      	ldr	r3, [pc, #228]	; (8018644 <__getAdcValue+0x1e8>)
 801855e:	493b      	ldr	r1, [pc, #236]	; (801864c <__getAdcValue+0x1f0>)
 8018560:	400a      	ands	r2, r1
 8018562:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 8018564:	4b37      	ldr	r3, [pc, #220]	; (8018644 <__getAdcValue+0x1e8>)
 8018566:	68da      	ldr	r2, [r3, #12]
 8018568:	4b36      	ldr	r3, [pc, #216]	; (8018644 <__getAdcValue+0x1e8>)
 801856a:	2120      	movs	r1, #32
 801856c:	438a      	bics	r2, r1
 801856e:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 8018570:	4b34      	ldr	r3, [pc, #208]	; (8018644 <__getAdcValue+0x1e8>)
 8018572:	68da      	ldr	r2, [r3, #12]
 8018574:	4b33      	ldr	r3, [pc, #204]	; (8018644 <__getAdcValue+0x1e8>)
 8018576:	2118      	movs	r1, #24
 8018578:	438a      	bics	r2, r1
 801857a:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 801857c:	4b31      	ldr	r3, [pc, #196]	; (8018644 <__getAdcValue+0x1e8>)
 801857e:	687a      	ldr	r2, [r7, #4]
 8018580:	0352      	lsls	r2, r2, #13
 8018582:	0b52      	lsrs	r2, r2, #13
 8018584:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 8018586:	4b2f      	ldr	r3, [pc, #188]	; (8018644 <__getAdcValue+0x1e8>)
 8018588:	695a      	ldr	r2, [r3, #20]
 801858a:	4b2e      	ldr	r3, [pc, #184]	; (8018644 <__getAdcValue+0x1e8>)
 801858c:	2107      	movs	r1, #7
 801858e:	430a      	orrs	r2, r1
 8018590:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 8018592:	2300      	movs	r3, #0
 8018594:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 8018596:	2300      	movs	r3, #0
 8018598:	60bb      	str	r3, [r7, #8]
 801859a:	e013      	b.n	80185c4 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 801859c:	4b29      	ldr	r3, [pc, #164]	; (8018644 <__getAdcValue+0x1e8>)
 801859e:	689a      	ldr	r2, [r3, #8]
 80185a0:	4b28      	ldr	r3, [pc, #160]	; (8018644 <__getAdcValue+0x1e8>)
 80185a2:	2104      	movs	r1, #4
 80185a4:	430a      	orrs	r2, r1
 80185a6:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 80185a8:	46c0      	nop			; (mov r8, r8)
 80185aa:	4b26      	ldr	r3, [pc, #152]	; (8018644 <__getAdcValue+0x1e8>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	2204      	movs	r2, #4
 80185b0:	4013      	ands	r3, r2
 80185b2:	d0fa      	beq.n	80185aa <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 80185b4:	4b23      	ldr	r3, [pc, #140]	; (8018644 <__getAdcValue+0x1e8>)
 80185b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185b8:	68fa      	ldr	r2, [r7, #12]
 80185ba:	18d3      	adds	r3, r2, r3
 80185bc:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	3301      	adds	r3, #1
 80185c2:	60bb      	str	r3, [r7, #8]
 80185c4:	1cfb      	adds	r3, r7, #3
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	68ba      	ldr	r2, [r7, #8]
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d3e6      	bcc.n	801859c <__getAdcValue+0x140>
  }
  data = data / oversampling;
 80185ce:	1cfb      	adds	r3, r7, #3
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	0019      	movs	r1, r3
 80185d4:	68f8      	ldr	r0, [r7, #12]
 80185d6:	f7e7 fd9f 	bl	8000118 <__udivsi3>
 80185da:	0003      	movs	r3, r0
 80185dc:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 80185de:	4b19      	ldr	r3, [pc, #100]	; (8018644 <__getAdcValue+0x1e8>)
 80185e0:	689b      	ldr	r3, [r3, #8]
 80185e2:	2201      	movs	r2, #1
 80185e4:	4013      	ands	r3, r2
 80185e6:	d00b      	beq.n	8018600 <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 80185e8:	4b16      	ldr	r3, [pc, #88]	; (8018644 <__getAdcValue+0x1e8>)
 80185ea:	689a      	ldr	r2, [r3, #8]
 80185ec:	4b15      	ldr	r3, [pc, #84]	; (8018644 <__getAdcValue+0x1e8>)
 80185ee:	2102      	movs	r1, #2
 80185f0:	430a      	orrs	r2, r1
 80185f2:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 80185f4:	46c0      	nop			; (mov r8, r8)
 80185f6:	4b13      	ldr	r3, [pc, #76]	; (8018644 <__getAdcValue+0x1e8>)
 80185f8:	689b      	ldr	r3, [r3, #8]
 80185fa:	2201      	movs	r2, #1
 80185fc:	4013      	ands	r3, r2
 80185fe:	d1fa      	bne.n	80185f6 <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 8018600:	4b11      	ldr	r3, [pc, #68]	; (8018648 <__getAdcValue+0x1ec>)
 8018602:	681a      	ldr	r2, [r3, #0]
 8018604:	4b10      	ldr	r3, [pc, #64]	; (8018648 <__getAdcValue+0x1ec>)
 8018606:	4912      	ldr	r1, [pc, #72]	; (8018650 <__getAdcValue+0x1f4>)
 8018608:	400a      	ands	r2, r1
 801860a:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 801860c:	4b0e      	ldr	r3, [pc, #56]	; (8018648 <__getAdcValue+0x1ec>)
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	4b0d      	ldr	r3, [pc, #52]	; (8018648 <__getAdcValue+0x1ec>)
 8018612:	4910      	ldr	r1, [pc, #64]	; (8018654 <__getAdcValue+0x1f8>)
 8018614:	400a      	ands	r2, r1
 8018616:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 8018618:	4b0a      	ldr	r3, [pc, #40]	; (8018644 <__getAdcValue+0x1e8>)
 801861a:	689a      	ldr	r2, [r3, #8]
 801861c:	4b09      	ldr	r3, [pc, #36]	; (8018644 <__getAdcValue+0x1e8>)
 801861e:	490e      	ldr	r1, [pc, #56]	; (8018658 <__getAdcValue+0x1fc>)
 8018620:	400a      	ands	r2, r1
 8018622:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 8018624:	4b05      	ldr	r3, [pc, #20]	; (801863c <__getAdcValue+0x1e0>)
 8018626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018628:	4b04      	ldr	r3, [pc, #16]	; (801863c <__getAdcValue+0x1e0>)
 801862a:	4905      	ldr	r1, [pc, #20]	; (8018640 <__getAdcValue+0x1e4>)
 801862c:	400a      	ands	r2, r1
 801862e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 8018630:	b662      	cpsie	i

  __enable_irq();
  return data;
 8018632:	68fb      	ldr	r3, [r7, #12]
}
 8018634:	0018      	movs	r0, r3
 8018636:	46bd      	mov	sp, r7
 8018638:	b004      	add	sp, #16
 801863a:	bd80      	pop	{r7, pc}
 801863c:	40021000 	.word	0x40021000
 8018640:	fffffdff 	.word	0xfffffdff
 8018644:	40012400 	.word	0x40012400
 8018648:	40012708 	.word	0x40012708
 801864c:	fffff3ff 	.word	0xfffff3ff
 8018650:	ffbfffff 	.word	0xffbfffff
 8018654:	ff7fffff 	.word	0xff7fffff
 8018658:	efffffff 	.word	0xefffffff

0801865c <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 801865c:	b5b0      	push	{r4, r5, r7, lr}
 801865e:	b084      	sub	sp, #16
 8018660:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 8018662:	240e      	movs	r4, #14
 8018664:	0025      	movs	r5, r4
 8018666:	193c      	adds	r4, r7, r4
 8018668:	f000 f850 	bl	801870c <adc_getVdd>
 801866c:	0003      	movs	r3, r0
 801866e:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 8018670:	4b21      	ldr	r3, [pc, #132]	; (80186f8 <adc_getTemperature+0x9c>)
 8018672:	2110      	movs	r1, #16
 8018674:	0018      	movs	r0, r3
 8018676:	f7ff fef1 	bl	801845c <__getAdcValue>
 801867a:	0003      	movs	r3, r0
 801867c:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 801867e:	4b1f      	ldr	r3, [pc, #124]	; (80186fc <adc_getTemperature+0xa0>)
 8018680:	881b      	ldrh	r3, [r3, #0]
 8018682:	001a      	movs	r2, r3
 8018684:	4b1e      	ldr	r3, [pc, #120]	; (8018700 <adc_getTemperature+0xa4>)
 8018686:	435a      	muls	r2, r3
 8018688:	002c      	movs	r4, r5
 801868a:	193b      	adds	r3, r7, r4
 801868c:	881b      	ldrh	r3, [r3, #0]
 801868e:	0019      	movs	r1, r3
 8018690:	0010      	movs	r0, r2
 8018692:	f7e7 fdcb 	bl	800022c <__divsi3>
 8018696:	0003      	movs	r3, r0
 8018698:	001a      	movs	r2, r3
 801869a:	1dbb      	adds	r3, r7, #6
 801869c:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 801869e:	4b19      	ldr	r3, [pc, #100]	; (8018704 <adc_getTemperature+0xa8>)
 80186a0:	881b      	ldrh	r3, [r3, #0]
 80186a2:	001a      	movs	r2, r3
 80186a4:	4b16      	ldr	r3, [pc, #88]	; (8018700 <adc_getTemperature+0xa4>)
 80186a6:	435a      	muls	r2, r3
 80186a8:	193b      	adds	r3, r7, r4
 80186aa:	881b      	ldrh	r3, [r3, #0]
 80186ac:	0019      	movs	r1, r3
 80186ae:	0010      	movs	r0, r2
 80186b0:	f7e7 fdbc 	bl	800022c <__divsi3>
 80186b4:	0003      	movs	r3, r0
 80186b6:	001a      	movs	r2, r3
 80186b8:	1d3b      	adds	r3, r7, #4
 80186ba:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 80186bc:	1dbb      	adds	r3, r7, #6
 80186be:	881b      	ldrh	r3, [r3, #0]
 80186c0:	68ba      	ldr	r2, [r7, #8]
 80186c2:	1ad3      	subs	r3, r2, r3
 80186c4:	4a10      	ldr	r2, [pc, #64]	; (8018708 <adc_getTemperature+0xac>)
 80186c6:	4353      	muls	r3, r2
 80186c8:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 80186ca:	1d3b      	adds	r3, r7, #4
 80186cc:	881a      	ldrh	r2, [r3, #0]
 80186ce:	1dbb      	adds	r3, r7, #6
 80186d0:	881b      	ldrh	r3, [r3, #0]
 80186d2:	1ad3      	subs	r3, r2, r3
 80186d4:	0019      	movs	r1, r3
 80186d6:	6838      	ldr	r0, [r7, #0]
 80186d8:	f7e7 fda8 	bl	800022c <__divsi3>
 80186dc:	0003      	movs	r3, r0
 80186de:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	4a07      	ldr	r2, [pc, #28]	; (8018700 <adc_getTemperature+0xa4>)
 80186e4:	4694      	mov	ip, r2
 80186e6:	4463      	add	r3, ip
 80186e8:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	b21b      	sxth	r3, r3

}
 80186ee:	0018      	movs	r0, r3
 80186f0:	46bd      	mov	sp, r7
 80186f2:	b004      	add	sp, #16
 80186f4:	bdb0      	pop	{r4, r5, r7, pc}
 80186f6:	46c0      	nop			; (mov r8, r8)
 80186f8:	48040000 	.word	0x48040000
 80186fc:	1ff8007a 	.word	0x1ff8007a
 8018700:	00000bb8 	.word	0x00000bb8
 8018704:	1ff8007e 	.word	0x1ff8007e
 8018708:	00002710 	.word	0x00002710

0801870c <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 801870c:	b590      	push	{r4, r7, lr}
 801870e:	b083      	sub	sp, #12
 8018710:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 8018712:	f7ff fca3 	bl	801805c <itsdk_time_get_us>
 8018716:	000a      	movs	r2, r1
 8018718:	0001      	movs	r1, r0
 801871a:	4b13      	ldr	r3, [pc, #76]	; (8018768 <adc_getVdd+0x5c>)
 801871c:	68dc      	ldr	r4, [r3, #12]
 801871e:	689b      	ldr	r3, [r3, #8]
 8018720:	1ac9      	subs	r1, r1, r3
 8018722:	41a2      	sbcs	r2, r4
 8018724:	0008      	movs	r0, r1
 8018726:	0011      	movs	r1, r2
 8018728:	22fa      	movs	r2, #250	; 0xfa
 801872a:	0092      	lsls	r2, r2, #2
 801872c:	2300      	movs	r3, #0
 801872e:	f7e7 fecb 	bl	80004c8 <__aeabi_uldivmod>
 8018732:	0003      	movs	r3, r0
 8018734:	000c      	movs	r4, r1
 8018736:	603b      	str	r3, [r7, #0]
 8018738:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d10b      	bne.n	8018758 <adc_getVdd+0x4c>
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d102      	bne.n	801874c <adc_getVdd+0x40>
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	2b07      	cmp	r3, #7
 801874a:	d805      	bhi.n	8018758 <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	2208      	movs	r2, #8
 8018750:	1ad3      	subs	r3, r2, r3
 8018752:	0018      	movs	r0, r3
 8018754:	f000 fd1a 	bl	801918c <itsdk_delayMs>
	}
	return adc_getValue(0);
 8018758:	2000      	movs	r0, #0
 801875a:	f000 f813 	bl	8018784 <adc_getValue>
 801875e:	0003      	movs	r3, r0
}
 8018760:	0018      	movs	r0, r3
 8018762:	46bd      	mov	sp, r7
 8018764:	b003      	add	sp, #12
 8018766:	bd90      	pop	{r4, r7, pc}
 8018768:	200011c8 	.word	0x200011c8

0801876c <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 801876c:	b580      	push	{r7, lr}
 801876e:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 8018770:	2041      	movs	r0, #65	; 0x41
 8018772:	f000 f807 	bl	8018784 <adc_getValue>
 8018776:	0003      	movs	r3, r0
 8018778:	18db      	adds	r3, r3, r3
 801877a:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 801877c:	0018      	movs	r0, r3
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
	...

08018784 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 8018784:	b580      	push	{r7, lr}
 8018786:	b08c      	sub	sp, #48	; 0x30
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 801878c:	23a0      	movs	r3, #160	; 0xa0
 801878e:	05db      	lsls	r3, r3, #23
 8018790:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018792:	2108      	movs	r1, #8
 8018794:	187b      	adds	r3, r7, r1
 8018796:	2203      	movs	r2, #3
 8018798:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801879a:	187b      	adds	r3, r7, r1
 801879c:	2200      	movs	r2, #0
 801879e:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 80187a0:	2300      	movs	r3, #0
 80187a2:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2b4d      	cmp	r3, #77	; 0x4d
 80187a8:	d900      	bls.n	80187ac <adc_getValue+0x28>
 80187aa:	e085      	b.n	80188b8 <adc_getValue+0x134>
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	009a      	lsls	r2, r3, #2
 80187b0:	4b5f      	ldr	r3, [pc, #380]	; (8018930 <adc_getValue+0x1ac>)
 80187b2:	18d3      	adds	r3, r2, r3
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 80187b8:	4b5e      	ldr	r3, [pc, #376]	; (8018934 <adc_getValue+0x1b0>)
 80187ba:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80187bc:	e083      	b.n	80188c6 <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80187be:	2308      	movs	r3, #8
 80187c0:	18fb      	adds	r3, r7, r3
 80187c2:	2201      	movs	r2, #1
 80187c4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80187c6:	23a0      	movs	r3, #160	; 0xa0
 80187c8:	05db      	lsls	r3, r3, #23
 80187ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 80187cc:	2301      	movs	r3, #1
 80187ce:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80187d0:	e079      	b.n	80188c6 <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 80187d2:	2308      	movs	r3, #8
 80187d4:	18fb      	adds	r3, r7, r3
 80187d6:	2202      	movs	r2, #2
 80187d8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80187da:	23a0      	movs	r3, #160	; 0xa0
 80187dc:	05db      	lsls	r3, r3, #23
 80187de:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 80187e0:	4b55      	ldr	r3, [pc, #340]	; (8018938 <adc_getValue+0x1b4>)
 80187e2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80187e4:	e06f      	b.n	80188c6 <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 80187e6:	2308      	movs	r3, #8
 80187e8:	18fb      	adds	r3, r7, r3
 80187ea:	2204      	movs	r2, #4
 80187ec:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80187ee:	23a0      	movs	r3, #160	; 0xa0
 80187f0:	05db      	lsls	r3, r3, #23
 80187f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 80187f4:	4b51      	ldr	r3, [pc, #324]	; (801893c <adc_getValue+0x1b8>)
 80187f6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80187f8:	e065      	b.n	80188c6 <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80187fa:	2308      	movs	r3, #8
 80187fc:	18fb      	adds	r3, r7, r3
 80187fe:	2208      	movs	r2, #8
 8018800:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8018802:	23a0      	movs	r3, #160	; 0xa0
 8018804:	05db      	lsls	r3, r3, #23
 8018806:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 8018808:	4b4d      	ldr	r3, [pc, #308]	; (8018940 <adc_getValue+0x1bc>)
 801880a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801880c:	e05b      	b.n	80188c6 <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 801880e:	2308      	movs	r3, #8
 8018810:	18fb      	adds	r3, r7, r3
 8018812:	2210      	movs	r2, #16
 8018814:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8018816:	23a0      	movs	r3, #160	; 0xa0
 8018818:	05db      	lsls	r3, r3, #23
 801881a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 801881c:	4b49      	ldr	r3, [pc, #292]	; (8018944 <adc_getValue+0x1c0>)
 801881e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8018820:	e051      	b.n	80188c6 <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8018822:	2308      	movs	r3, #8
 8018824:	18fb      	adds	r3, r7, r3
 8018826:	2220      	movs	r2, #32
 8018828:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801882a:	23a0      	movs	r3, #160	; 0xa0
 801882c:	05db      	lsls	r3, r3, #23
 801882e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 8018830:	4b45      	ldr	r3, [pc, #276]	; (8018948 <adc_getValue+0x1c4>)
 8018832:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8018834:	e047      	b.n	80188c6 <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8018836:	2308      	movs	r3, #8
 8018838:	18fb      	adds	r3, r7, r3
 801883a:	2240      	movs	r2, #64	; 0x40
 801883c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801883e:	23a0      	movs	r3, #160	; 0xa0
 8018840:	05db      	lsls	r3, r3, #23
 8018842:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 8018844:	4b41      	ldr	r3, [pc, #260]	; (801894c <adc_getValue+0x1c8>)
 8018846:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8018848:	e03d      	b.n	80188c6 <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 801884a:	2308      	movs	r3, #8
 801884c:	18fb      	adds	r3, r7, r3
 801884e:	2280      	movs	r2, #128	; 0x80
 8018850:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8018852:	23a0      	movs	r3, #160	; 0xa0
 8018854:	05db      	lsls	r3, r3, #23
 8018856:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 8018858:	4b3d      	ldr	r3, [pc, #244]	; (8018950 <adc_getValue+0x1cc>)
 801885a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801885c:	e033      	b.n	80188c6 <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801885e:	2308      	movs	r3, #8
 8018860:	18fb      	adds	r3, r7, r3
 8018862:	2201      	movs	r2, #1
 8018864:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 8018866:	4b3b      	ldr	r3, [pc, #236]	; (8018954 <adc_getValue+0x1d0>)
 8018868:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 801886a:	4b3b      	ldr	r3, [pc, #236]	; (8018958 <adc_getValue+0x1d4>)
 801886c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801886e:	e02a      	b.n	80188c6 <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8018870:	2308      	movs	r3, #8
 8018872:	18fb      	adds	r3, r7, r3
 8018874:	2202      	movs	r2, #2
 8018876:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 8018878:	4b36      	ldr	r3, [pc, #216]	; (8018954 <adc_getValue+0x1d0>)
 801887a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 801887c:	4b37      	ldr	r3, [pc, #220]	; (801895c <adc_getValue+0x1d8>)
 801887e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8018880:	e021      	b.n	80188c6 <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8018882:	2308      	movs	r3, #8
 8018884:	18fb      	adds	r3, r7, r3
 8018886:	2201      	movs	r2, #1
 8018888:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801888a:	4b35      	ldr	r3, [pc, #212]	; (8018960 <adc_getValue+0x1dc>)
 801888c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 801888e:	4b35      	ldr	r3, [pc, #212]	; (8018964 <adc_getValue+0x1e0>)
 8018890:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8018892:	e018      	b.n	80188c6 <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8018894:	2308      	movs	r3, #8
 8018896:	18fb      	adds	r3, r7, r3
 8018898:	2202      	movs	r2, #2
 801889a:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801889c:	4b30      	ldr	r3, [pc, #192]	; (8018960 <adc_getValue+0x1dc>)
 801889e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 80188a0:	4b31      	ldr	r3, [pc, #196]	; (8018968 <adc_getValue+0x1e4>)
 80188a2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80188a4:	e00f      	b.n	80188c6 <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 80188a6:	2308      	movs	r3, #8
 80188a8:	18fb      	adds	r3, r7, r3
 80188aa:	2204      	movs	r2, #4
 80188ac:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 80188ae:	4b2c      	ldr	r3, [pc, #176]	; (8018960 <adc_getValue+0x1dc>)
 80188b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 80188b2:	4b2e      	ldr	r3, [pc, #184]	; (801896c <adc_getValue+0x1e8>)
 80188b4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80188b6:	e006      	b.n	80188c6 <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	4a2c      	ldr	r2, [pc, #176]	; (8018970 <adc_getValue+0x1ec>)
 80188be:	0019      	movs	r1, r3
 80188c0:	0010      	movs	r0, r2
 80188c2:	f7fe fb5b 	bl	8016f7c <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d006      	beq.n	80188da <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 80188cc:	2308      	movs	r3, #8
 80188ce:	18fa      	adds	r2, r7, r3
 80188d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d2:	0011      	movs	r1, r2
 80188d4:	0018      	movs	r0, r3
 80188d6:	f7eb fc45 	bl	8004164 <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 80188da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188dc:	2110      	movs	r1, #16
 80188de:	0018      	movs	r0, r3
 80188e0:	f7ff fdbc 	bl	801845c <__getAdcValue>
 80188e4:	0003      	movs	r3, r0
 80188e6:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d112      	bne.n	8018914 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 80188ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d101      	bne.n	80188f8 <adc_getValue+0x174>
 80188f4:	2300      	movs	r3, #0
 80188f6:	e017      	b.n	8018928 <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 80188f8:	4b1e      	ldr	r3, [pc, #120]	; (8018974 <adc_getValue+0x1f0>)
 80188fa:	881b      	ldrh	r3, [r3, #0]
 80188fc:	001a      	movs	r2, r3
 80188fe:	4b1e      	ldr	r3, [pc, #120]	; (8018978 <adc_getValue+0x1f4>)
 8018900:	4353      	muls	r3, r2
 8018902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018904:	0018      	movs	r0, r3
 8018906:	f7e7 fc07 	bl	8000118 <__udivsi3>
 801890a:	0003      	movs	r3, r0
 801890c:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 801890e:	69fb      	ldr	r3, [r7, #28]
 8018910:	b29b      	uxth	r3, r3
 8018912:	e009      	b.n	8018928 <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 8018914:	f7ff fefa 	bl	801870c <adc_getVdd>
 8018918:	0003      	movs	r3, r0
 801891a:	001a      	movs	r2, r3
 801891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891e:	4353      	muls	r3, r2
 8018920:	0b1b      	lsrs	r3, r3, #12
 8018922:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 8018924:	6a3b      	ldr	r3, [r7, #32]
 8018926:	b29b      	uxth	r3, r3
	}

}
 8018928:	0018      	movs	r0, r3
 801892a:	46bd      	mov	sp, r7
 801892c:	b00c      	add	sp, #48	; 0x30
 801892e:	bd80      	pop	{r7, pc}
 8018930:	0801c360 	.word	0x0801c360
 8018934:	44020000 	.word	0x44020000
 8018938:	04000002 	.word	0x04000002
 801893c:	08000004 	.word	0x08000004
 8018940:	0c000008 	.word	0x0c000008
 8018944:	10000010 	.word	0x10000010
 8018948:	14000020 	.word	0x14000020
 801894c:	18000040 	.word	0x18000040
 8018950:	1c000080 	.word	0x1c000080
 8018954:	50000400 	.word	0x50000400
 8018958:	20000100 	.word	0x20000100
 801895c:	24000200 	.word	0x24000200
 8018960:	50000800 	.word	0x50000800
 8018964:	28000400 	.word	0x28000400
 8018968:	2c000800 	.word	0x2c000800
 801896c:	30001000 	.word	0x30001000
 8018970:	d0000008 	.word	0xd0000008
 8018974:	1ff80078 	.word	0x1ff80078
 8018978:	00000bb8 	.word	0x00000bb8

0801897c <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	0002      	movs	r2, r0
 8018984:	1dfb      	adds	r3, r7, #7
 8018986:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 8018988:	1dfb      	adds	r3, r7, #7
 801898a:	781b      	ldrb	r3, [r3, #0]
 801898c:	2b07      	cmp	r3, #7
 801898e:	d811      	bhi.n	80189b4 <getPortFromBankId+0x38>
 8018990:	009a      	lsls	r2, r3, #2
 8018992:	4b0f      	ldr	r3, [pc, #60]	; (80189d0 <getPortFromBankId+0x54>)
 8018994:	18d3      	adds	r3, r2, r3
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 801899a:	23a0      	movs	r3, #160	; 0xa0
 801899c:	05db      	lsls	r3, r3, #23
 801899e:	e012      	b.n	80189c6 <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 80189a0:	4b0c      	ldr	r3, [pc, #48]	; (80189d4 <getPortFromBankId+0x58>)
 80189a2:	e010      	b.n	80189c6 <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 80189a4:	4b0c      	ldr	r3, [pc, #48]	; (80189d8 <getPortFromBankId+0x5c>)
 80189a6:	e00e      	b.n	80189c6 <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 80189a8:	4b0c      	ldr	r3, [pc, #48]	; (80189dc <getPortFromBankId+0x60>)
 80189aa:	e00c      	b.n	80189c6 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 80189ac:	4b0c      	ldr	r3, [pc, #48]	; (80189e0 <getPortFromBankId+0x64>)
 80189ae:	e00a      	b.n	80189c6 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 80189b0:	4b0c      	ldr	r3, [pc, #48]	; (80189e4 <getPortFromBankId+0x68>)
 80189b2:	e008      	b.n	80189c6 <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 80189b4:	1dfb      	adds	r3, r7, #7
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	4a0b      	ldr	r2, [pc, #44]	; (80189e8 <getPortFromBankId+0x6c>)
 80189bc:	0019      	movs	r1, r3
 80189be:	0010      	movs	r0, r2
 80189c0:	f7fe fadc 	bl	8016f7c <itsdk_error_report>
	}
	return NULL;
 80189c4:	2300      	movs	r3, #0
}
 80189c6:	0018      	movs	r0, r3
 80189c8:	46bd      	mov	sp, r7
 80189ca:	b002      	add	sp, #8
 80189cc:	bd80      	pop	{r7, pc}
 80189ce:	46c0      	nop			; (mov r8, r8)
 80189d0:	0801c498 	.word	0x0801c498
 80189d4:	50000400 	.word	0x50000400
 80189d8:	50000800 	.word	0x50000800
 80189dc:	50000c00 	.word	0x50000c00
 80189e0:	50001000 	.word	0x50001000
 80189e4:	50001c00 	.word	0x50001c00
 80189e8:	d0000004 	.word	0xd0000004

080189ec <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b084      	sub	sp, #16
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	0002      	movs	r2, r0
 80189f4:	1dbb      	adds	r3, r7, #6
 80189f6:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 80189f8:	230f      	movs	r3, #15
 80189fa:	18fb      	adds	r3, r7, r3
 80189fc:	2200      	movs	r2, #0
 80189fe:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 8018a00:	1dbb      	adds	r3, r7, #6
 8018a02:	881a      	ldrh	r2, [r3, #0]
 8018a04:	23ff      	movs	r3, #255	; 0xff
 8018a06:	021b      	lsls	r3, r3, #8
 8018a08:	4013      	ands	r3, r2
 8018a0a:	d006      	beq.n	8018a1a <getPinNumFromPinVector+0x2e>
 8018a0c:	220f      	movs	r2, #15
 8018a0e:	18bb      	adds	r3, r7, r2
 8018a10:	18ba      	adds	r2, r7, r2
 8018a12:	7812      	ldrb	r2, [r2, #0]
 8018a14:	2108      	movs	r1, #8
 8018a16:	430a      	orrs	r2, r1
 8018a18:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 8018a1a:	1dbb      	adds	r3, r7, #6
 8018a1c:	881b      	ldrh	r3, [r3, #0]
 8018a1e:	4a14      	ldr	r2, [pc, #80]	; (8018a70 <getPinNumFromPinVector+0x84>)
 8018a20:	4013      	ands	r3, r2
 8018a22:	d006      	beq.n	8018a32 <getPinNumFromPinVector+0x46>
 8018a24:	220f      	movs	r2, #15
 8018a26:	18bb      	adds	r3, r7, r2
 8018a28:	18ba      	adds	r2, r7, r2
 8018a2a:	7812      	ldrb	r2, [r2, #0]
 8018a2c:	2104      	movs	r1, #4
 8018a2e:	430a      	orrs	r2, r1
 8018a30:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 8018a32:	1dbb      	adds	r3, r7, #6
 8018a34:	881b      	ldrh	r3, [r3, #0]
 8018a36:	4a0f      	ldr	r2, [pc, #60]	; (8018a74 <getPinNumFromPinVector+0x88>)
 8018a38:	4013      	ands	r3, r2
 8018a3a:	d006      	beq.n	8018a4a <getPinNumFromPinVector+0x5e>
 8018a3c:	220f      	movs	r2, #15
 8018a3e:	18bb      	adds	r3, r7, r2
 8018a40:	18ba      	adds	r2, r7, r2
 8018a42:	7812      	ldrb	r2, [r2, #0]
 8018a44:	2102      	movs	r1, #2
 8018a46:	430a      	orrs	r2, r1
 8018a48:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 8018a4a:	1dbb      	adds	r3, r7, #6
 8018a4c:	881b      	ldrh	r3, [r3, #0]
 8018a4e:	4a0a      	ldr	r2, [pc, #40]	; (8018a78 <getPinNumFromPinVector+0x8c>)
 8018a50:	4013      	ands	r3, r2
 8018a52:	d006      	beq.n	8018a62 <getPinNumFromPinVector+0x76>
 8018a54:	220f      	movs	r2, #15
 8018a56:	18bb      	adds	r3, r7, r2
 8018a58:	18ba      	adds	r2, r7, r2
 8018a5a:	7812      	ldrb	r2, [r2, #0]
 8018a5c:	2101      	movs	r1, #1
 8018a5e:	430a      	orrs	r2, r1
 8018a60:	701a      	strb	r2, [r3, #0]
	return pinPos;
 8018a62:	230f      	movs	r3, #15
 8018a64:	18fb      	adds	r3, r7, r3
 8018a66:	781b      	ldrb	r3, [r3, #0]
}
 8018a68:	0018      	movs	r0, r3
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	b004      	add	sp, #16
 8018a6e:	bd80      	pop	{r7, pc}
 8018a70:	0000f0f0 	.word	0x0000f0f0
 8018a74:	0000cccc 	.word	0x0000cccc
 8018a78:	0000aaaa 	.word	0x0000aaaa

08018a7c <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 8018a7c:	b5b0      	push	{r4, r5, r7, lr}
 8018a7e:	b084      	sub	sp, #16
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	0002      	movs	r2, r0
 8018a84:	1dfb      	adds	r3, r7, #7
 8018a86:	701a      	strb	r2, [r3, #0]
 8018a88:	1d3b      	adds	r3, r7, #4
 8018a8a:	1c0a      	adds	r2, r1, #0
 8018a8c:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 8018a8e:	250f      	movs	r5, #15
 8018a90:	197c      	adds	r4, r7, r5
 8018a92:	1d3b      	adds	r3, r7, #4
 8018a94:	881b      	ldrh	r3, [r3, #0]
 8018a96:	0018      	movs	r0, r3
 8018a98:	f7ff ffa8 	bl	80189ec <getPinNumFromPinVector>
 8018a9c:	0003      	movs	r3, r0
 8018a9e:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 8018aa0:	197b      	adds	r3, r7, r5
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	2b01      	cmp	r3, #1
 8018aa6:	d801      	bhi.n	8018aac <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 8018aa8:	2305      	movs	r3, #5
 8018aaa:	e007      	b.n	8018abc <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 8018aac:	230f      	movs	r3, #15
 8018aae:	18fb      	adds	r3, r7, r3
 8018ab0:	781b      	ldrb	r3, [r3, #0]
 8018ab2:	2b03      	cmp	r3, #3
 8018ab4:	d801      	bhi.n	8018aba <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 8018ab6:	2306      	movs	r3, #6
 8018ab8:	e000      	b.n	8018abc <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 8018aba:	2307      	movs	r3, #7
	}
}
 8018abc:	0018      	movs	r0, r3
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	b004      	add	sp, #16
 8018ac2:	bdb0      	pop	{r4, r5, r7, pc}

08018ac4 <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 8018ac4:	b590      	push	{r4, r7, lr}
 8018ac6:	b085      	sub	sp, #20
 8018ac8:	af02      	add	r7, sp, #8
 8018aca:	0004      	movs	r4, r0
 8018acc:	0008      	movs	r0, r1
 8018ace:	0011      	movs	r1, r2
 8018ad0:	1dfb      	adds	r3, r7, #7
 8018ad2:	1c22      	adds	r2, r4, #0
 8018ad4:	701a      	strb	r2, [r3, #0]
 8018ad6:	1d3b      	adds	r3, r7, #4
 8018ad8:	1c02      	adds	r2, r0, #0
 8018ada:	801a      	strh	r2, [r3, #0]
 8018adc:	1dbb      	adds	r3, r7, #6
 8018ade:	1c0a      	adds	r2, r1, #0
 8018ae0:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 8018ae2:	1dbb      	adds	r3, r7, #6
 8018ae4:	781a      	ldrb	r2, [r3, #0]
 8018ae6:	1d3b      	adds	r3, r7, #4
 8018ae8:	8819      	ldrh	r1, [r3, #0]
 8018aea:	1dfb      	adds	r3, r7, #7
 8018aec:	7818      	ldrb	r0, [r3, #0]
 8018aee:	2300      	movs	r3, #0
 8018af0:	9300      	str	r3, [sp, #0]
 8018af2:	2300      	movs	r3, #0
 8018af4:	f000 f804 	bl	8018b00 <gpio_configure_ext>
}
 8018af8:	46c0      	nop			; (mov r8, r8)
 8018afa:	46bd      	mov	sp, r7
 8018afc:	b003      	add	sp, #12
 8018afe:	bd90      	pop	{r4, r7, pc}

08018b00 <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 8018b00:	b5b0      	push	{r4, r5, r7, lr}
 8018b02:	b08e      	sub	sp, #56	; 0x38
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	0005      	movs	r5, r0
 8018b08:	000c      	movs	r4, r1
 8018b0a:	0010      	movs	r0, r2
 8018b0c:	0019      	movs	r1, r3
 8018b0e:	1dfb      	adds	r3, r7, #7
 8018b10:	1c2a      	adds	r2, r5, #0
 8018b12:	701a      	strb	r2, [r3, #0]
 8018b14:	1d3b      	adds	r3, r7, #4
 8018b16:	1c22      	adds	r2, r4, #0
 8018b18:	801a      	strh	r2, [r3, #0]
 8018b1a:	1dbb      	adds	r3, r7, #6
 8018b1c:	1c02      	adds	r2, r0, #0
 8018b1e:	701a      	strb	r2, [r3, #0]
 8018b20:	1cfb      	adds	r3, r7, #3
 8018b22:	1c0a      	adds	r2, r1, #0
 8018b24:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 8018b26:	1dfb      	adds	r3, r7, #7
 8018b28:	781b      	ldrb	r3, [r3, #0]
 8018b2a:	2b07      	cmp	r3, #7
 8018b2c:	d852      	bhi.n	8018bd4 <gpio_configure_ext+0xd4>
 8018b2e:	009a      	lsls	r2, r3, #2
 8018b30:	4bd0      	ldr	r3, [pc, #832]	; (8018e74 <gpio_configure_ext+0x374>)
 8018b32:	18d3      	adds	r3, r2, r3
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 8018b38:	4bcf      	ldr	r3, [pc, #828]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b3c:	4bce      	ldr	r3, [pc, #824]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b3e:	2101      	movs	r1, #1
 8018b40:	430a      	orrs	r2, r1
 8018b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8018b44:	4bcc      	ldr	r3, [pc, #816]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b48:	2201      	movs	r2, #1
 8018b4a:	4013      	ands	r3, r2
 8018b4c:	61fb      	str	r3, [r7, #28]
 8018b4e:	69fb      	ldr	r3, [r7, #28]
		  break;
 8018b50:	e040      	b.n	8018bd4 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 8018b52:	4bc9      	ldr	r3, [pc, #804]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b56:	4bc8      	ldr	r3, [pc, #800]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b58:	2102      	movs	r1, #2
 8018b5a:	430a      	orrs	r2, r1
 8018b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8018b5e:	4bc6      	ldr	r3, [pc, #792]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b62:	2202      	movs	r2, #2
 8018b64:	4013      	ands	r3, r2
 8018b66:	61bb      	str	r3, [r7, #24]
 8018b68:	69bb      	ldr	r3, [r7, #24]
		  break;
 8018b6a:	e033      	b.n	8018bd4 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 8018b6c:	4bc2      	ldr	r3, [pc, #776]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b70:	4bc1      	ldr	r3, [pc, #772]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b72:	2104      	movs	r1, #4
 8018b74:	430a      	orrs	r2, r1
 8018b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8018b78:	4bbf      	ldr	r3, [pc, #764]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b7c:	2204      	movs	r2, #4
 8018b7e:	4013      	ands	r3, r2
 8018b80:	617b      	str	r3, [r7, #20]
 8018b82:	697b      	ldr	r3, [r7, #20]
		  break;
 8018b84:	e026      	b.n	8018bd4 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 8018b86:	4bbc      	ldr	r3, [pc, #752]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b8a:	4bbb      	ldr	r3, [pc, #748]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b8c:	2108      	movs	r1, #8
 8018b8e:	430a      	orrs	r2, r1
 8018b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8018b92:	4bb9      	ldr	r3, [pc, #740]	; (8018e78 <gpio_configure_ext+0x378>)
 8018b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b96:	2208      	movs	r2, #8
 8018b98:	4013      	ands	r3, r2
 8018b9a:	613b      	str	r3, [r7, #16]
 8018b9c:	693b      	ldr	r3, [r7, #16]
		  break;
 8018b9e:	e019      	b.n	8018bd4 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 8018ba0:	4bb5      	ldr	r3, [pc, #724]	; (8018e78 <gpio_configure_ext+0x378>)
 8018ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ba4:	4bb4      	ldr	r3, [pc, #720]	; (8018e78 <gpio_configure_ext+0x378>)
 8018ba6:	2110      	movs	r1, #16
 8018ba8:	430a      	orrs	r2, r1
 8018baa:	62da      	str	r2, [r3, #44]	; 0x2c
 8018bac:	4bb2      	ldr	r3, [pc, #712]	; (8018e78 <gpio_configure_ext+0x378>)
 8018bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb0:	2210      	movs	r2, #16
 8018bb2:	4013      	ands	r3, r2
 8018bb4:	60fb      	str	r3, [r7, #12]
 8018bb6:	68fb      	ldr	r3, [r7, #12]
		  break;
 8018bb8:	e00c      	b.n	8018bd4 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 8018bba:	4baf      	ldr	r3, [pc, #700]	; (8018e78 <gpio_configure_ext+0x378>)
 8018bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bbe:	4bae      	ldr	r3, [pc, #696]	; (8018e78 <gpio_configure_ext+0x378>)
 8018bc0:	2180      	movs	r1, #128	; 0x80
 8018bc2:	430a      	orrs	r2, r1
 8018bc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8018bc6:	4bac      	ldr	r3, [pc, #688]	; (8018e78 <gpio_configure_ext+0x378>)
 8018bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bca:	2280      	movs	r2, #128	; 0x80
 8018bcc:	4013      	ands	r3, r2
 8018bce:	60bb      	str	r3, [r7, #8]
 8018bd0:	68bb      	ldr	r3, [r7, #8]
		  break;
 8018bd2:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 8018bd4:	1d3b      	adds	r3, r7, #4
 8018bd6:	881a      	ldrh	r2, [r3, #0]
 8018bd8:	2320      	movs	r3, #32
 8018bda:	18fb      	adds	r3, r7, r3
 8018bdc:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 8018bde:	1cfb      	adds	r3, r7, #3
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d002      	beq.n	8018bec <gpio_configure_ext+0xec>
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d005      	beq.n	8018bf6 <gpio_configure_ext+0xf6>
 8018bea:	e009      	b.n	8018c00 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018bec:	2320      	movs	r3, #32
 8018bee:	18fb      	adds	r3, r7, r3
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	60da      	str	r2, [r3, #12]
		break;
 8018bf4:	e004      	b.n	8018c00 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bf6:	2320      	movs	r3, #32
 8018bf8:	18fb      	adds	r3, r7, r3
 8018bfa:	2203      	movs	r2, #3
 8018bfc:	60da      	str	r2, [r3, #12]
		break;
 8018bfe:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 8018c00:	1dbb      	adds	r3, r7, #6
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	2b13      	cmp	r3, #19
 8018c06:	d900      	bls.n	8018c0a <gpio_configure_ext+0x10a>
 8018c08:	e0a4      	b.n	8018d54 <gpio_configure_ext+0x254>
 8018c0a:	009a      	lsls	r2, r3, #2
 8018c0c:	4b9b      	ldr	r3, [pc, #620]	; (8018e7c <gpio_configure_ext+0x37c>)
 8018c0e:	18d3      	adds	r3, r2, r3
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018c14:	2120      	movs	r1, #32
 8018c16:	187b      	adds	r3, r7, r1
 8018c18:	2201      	movs	r2, #1
 8018c1a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c1c:	187b      	adds	r3, r7, r1
 8018c1e:	2200      	movs	r2, #0
 8018c20:	609a      	str	r2, [r3, #8]
		break;
 8018c22:	e097      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018c24:	2120      	movs	r1, #32
 8018c26:	187b      	adds	r3, r7, r1
 8018c28:	2201      	movs	r2, #1
 8018c2a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018c2c:	187b      	adds	r3, r7, r1
 8018c2e:	2201      	movs	r2, #1
 8018c30:	609a      	str	r2, [r3, #8]
		break;
 8018c32:	e08f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018c34:	2120      	movs	r1, #32
 8018c36:	187b      	adds	r3, r7, r1
 8018c38:	2201      	movs	r2, #1
 8018c3a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8018c3c:	187b      	adds	r3, r7, r1
 8018c3e:	2202      	movs	r2, #2
 8018c40:	609a      	str	r2, [r3, #8]
		break;
 8018c42:	e087      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8018c44:	2120      	movs	r1, #32
 8018c46:	187b      	adds	r3, r7, r1
 8018c48:	2211      	movs	r2, #17
 8018c4a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c4c:	187b      	adds	r3, r7, r1
 8018c4e:	2200      	movs	r2, #0
 8018c50:	609a      	str	r2, [r3, #8]
		break;
 8018c52:	e07f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018c54:	2120      	movs	r1, #32
 8018c56:	187b      	adds	r3, r7, r1
 8018c58:	2200      	movs	r2, #0
 8018c5a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c5c:	187b      	adds	r3, r7, r1
 8018c5e:	2200      	movs	r2, #0
 8018c60:	609a      	str	r2, [r3, #8]
		break;
 8018c62:	e077      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018c64:	2120      	movs	r1, #32
 8018c66:	187b      	adds	r3, r7, r1
 8018c68:	2200      	movs	r2, #0
 8018c6a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018c6c:	187b      	adds	r3, r7, r1
 8018c6e:	2201      	movs	r2, #1
 8018c70:	609a      	str	r2, [r3, #8]
		break;
 8018c72:	e06f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018c74:	2120      	movs	r1, #32
 8018c76:	187b      	adds	r3, r7, r1
 8018c78:	2200      	movs	r2, #0
 8018c7a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8018c7c:	187b      	adds	r3, r7, r1
 8018c7e:	2202      	movs	r2, #2
 8018c80:	609a      	str	r2, [r3, #8]
		break;
 8018c82:	e067      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8018c84:	2120      	movs	r1, #32
 8018c86:	187b      	adds	r3, r7, r1
 8018c88:	4a7d      	ldr	r2, [pc, #500]	; (8018e80 <gpio_configure_ext+0x380>)
 8018c8a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c8c:	187b      	adds	r3, r7, r1
 8018c8e:	2200      	movs	r2, #0
 8018c90:	609a      	str	r2, [r3, #8]
		break;
 8018c92:	e05f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8018c94:	2120      	movs	r1, #32
 8018c96:	187b      	adds	r3, r7, r1
 8018c98:	4a79      	ldr	r2, [pc, #484]	; (8018e80 <gpio_configure_ext+0x380>)
 8018c9a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8018c9c:	187b      	adds	r3, r7, r1
 8018c9e:	2202      	movs	r2, #2
 8018ca0:	609a      	str	r2, [r3, #8]
		break;
 8018ca2:	e057      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8018ca4:	2120      	movs	r1, #32
 8018ca6:	187b      	adds	r3, r7, r1
 8018ca8:	4a75      	ldr	r2, [pc, #468]	; (8018e80 <gpio_configure_ext+0x380>)
 8018caa:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018cac:	187b      	adds	r3, r7, r1
 8018cae:	2201      	movs	r2, #1
 8018cb0:	609a      	str	r2, [r3, #8]
		break;
 8018cb2:	e04f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8018cb4:	2120      	movs	r1, #32
 8018cb6:	187b      	adds	r3, r7, r1
 8018cb8:	4a72      	ldr	r2, [pc, #456]	; (8018e84 <gpio_configure_ext+0x384>)
 8018cba:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018cbc:	187b      	adds	r3, r7, r1
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	609a      	str	r2, [r3, #8]
		break;
 8018cc2:	e047      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8018cc4:	2120      	movs	r1, #32
 8018cc6:	187b      	adds	r3, r7, r1
 8018cc8:	4a6e      	ldr	r2, [pc, #440]	; (8018e84 <gpio_configure_ext+0x384>)
 8018cca:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018ccc:	187b      	adds	r3, r7, r1
 8018cce:	2201      	movs	r2, #1
 8018cd0:	609a      	str	r2, [r3, #8]
		break;
 8018cd2:	e03f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8018cd4:	2120      	movs	r1, #32
 8018cd6:	187b      	adds	r3, r7, r1
 8018cd8:	4a6a      	ldr	r2, [pc, #424]	; (8018e84 <gpio_configure_ext+0x384>)
 8018cda:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8018cdc:	187b      	adds	r3, r7, r1
 8018cde:	2202      	movs	r2, #2
 8018ce0:	609a      	str	r2, [r3, #8]
		break;
 8018ce2:	e037      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8018ce4:	2120      	movs	r1, #32
 8018ce6:	187b      	adds	r3, r7, r1
 8018ce8:	4a67      	ldr	r2, [pc, #412]	; (8018e88 <gpio_configure_ext+0x388>)
 8018cea:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018cec:	187b      	adds	r3, r7, r1
 8018cee:	2200      	movs	r2, #0
 8018cf0:	609a      	str	r2, [r3, #8]
		break;
 8018cf2:	e02f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018cf4:	2120      	movs	r1, #32
 8018cf6:	187b      	adds	r3, r7, r1
 8018cf8:	2203      	movs	r2, #3
 8018cfa:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018cfc:	187b      	adds	r3, r7, r1
 8018cfe:	2200      	movs	r2, #0
 8018d00:	609a      	str	r2, [r3, #8]
		break;
 8018d02:	e027      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018d04:	2120      	movs	r1, #32
 8018d06:	187b      	adds	r3, r7, r1
 8018d08:	2203      	movs	r2, #3
 8018d0a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d0c:	187b      	adds	r3, r7, r1
 8018d0e:	2200      	movs	r2, #0
 8018d10:	609a      	str	r2, [r3, #8]
		break;
 8018d12:	e01f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d14:	2120      	movs	r1, #32
 8018d16:	187b      	adds	r3, r7, r1
 8018d18:	2202      	movs	r2, #2
 8018d1a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d1c:	187b      	adds	r3, r7, r1
 8018d1e:	2200      	movs	r2, #0
 8018d20:	609a      	str	r2, [r3, #8]
	    break;
 8018d22:	e017      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d24:	2120      	movs	r1, #32
 8018d26:	187b      	adds	r3, r7, r1
 8018d28:	2202      	movs	r2, #2
 8018d2a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018d2c:	187b      	adds	r3, r7, r1
 8018d2e:	2201      	movs	r2, #1
 8018d30:	609a      	str	r2, [r3, #8]
	    break;
 8018d32:	e00f      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d34:	2120      	movs	r1, #32
 8018d36:	187b      	adds	r3, r7, r1
 8018d38:	2202      	movs	r2, #2
 8018d3a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8018d3c:	187b      	adds	r3, r7, r1
 8018d3e:	2202      	movs	r2, #2
 8018d40:	609a      	str	r2, [r3, #8]
	    break;
 8018d42:	e007      	b.n	8018d54 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8018d44:	2120      	movs	r1, #32
 8018d46:	187b      	adds	r3, r7, r1
 8018d48:	2212      	movs	r2, #18
 8018d4a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d4c:	187b      	adds	r3, r7, r1
 8018d4e:	2200      	movs	r2, #0
 8018d50:	609a      	str	r2, [r3, #8]
	    break;
 8018d52:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 8018d54:	2300      	movs	r3, #0
 8018d56:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 8018d58:	1dbb      	adds	r3, r7, #6
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	3b10      	subs	r3, #16
 8018d5e:	2b03      	cmp	r3, #3
 8018d60:	d900      	bls.n	8018d64 <gpio_configure_ext+0x264>
 8018d62:	e0a1      	b.n	8018ea8 <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 8018d64:	2348      	movs	r3, #72	; 0x48
 8018d66:	18fb      	adds	r3, r7, r3
 8018d68:	781b      	ldrb	r3, [r3, #0]
 8018d6a:	2b06      	cmp	r3, #6
 8018d6c:	d900      	bls.n	8018d70 <gpio_configure_ext+0x270>
 8018d6e:	e092      	b.n	8018e96 <gpio_configure_ext+0x396>
 8018d70:	009a      	lsls	r2, r3, #2
 8018d72:	4b46      	ldr	r3, [pc, #280]	; (8018e8c <gpio_configure_ext+0x38c>)
 8018d74:	18d3      	adds	r3, r2, r3
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8018d7a:	1dfb      	adds	r3, r7, #7
 8018d7c:	781b      	ldrb	r3, [r3, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d10a      	bne.n	8018d98 <gpio_configure_ext+0x298>
 8018d82:	1d3b      	adds	r3, r7, #4
 8018d84:	881a      	ldrh	r2, [r3, #0]
 8018d86:	2380      	movs	r3, #128	; 0x80
 8018d88:	021b      	lsls	r3, r3, #8
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d104      	bne.n	8018d98 <gpio_configure_ext+0x298>
 8018d8e:	2320      	movs	r3, #32
 8018d90:	18fb      	adds	r3, r7, r3
 8018d92:	2202      	movs	r2, #2
 8018d94:	611a      	str	r2, [r3, #16]
 8018d96:	e01c      	b.n	8018dd2 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8018d98:	1dfb      	adds	r3, r7, #7
 8018d9a:	781b      	ldrb	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d108      	bne.n	8018db2 <gpio_configure_ext+0x2b2>
 8018da0:	1d3b      	adds	r3, r7, #4
 8018da2:	881b      	ldrh	r3, [r3, #0]
 8018da4:	2b20      	cmp	r3, #32
 8018da6:	d104      	bne.n	8018db2 <gpio_configure_ext+0x2b2>
 8018da8:	2320      	movs	r3, #32
 8018daa:	18fb      	adds	r3, r7, r3
 8018dac:	2202      	movs	r2, #2
 8018dae:	611a      	str	r2, [r3, #16]
 8018db0:	e00f      	b.n	8018dd2 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8018db2:	1dfb      	adds	r3, r7, #7
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d108      	bne.n	8018dcc <gpio_configure_ext+0x2cc>
 8018dba:	1d3b      	adds	r3, r7, #4
 8018dbc:	881b      	ldrh	r3, [r3, #0]
 8018dbe:	2b01      	cmp	r3, #1
 8018dc0:	d104      	bne.n	8018dcc <gpio_configure_ext+0x2cc>
 8018dc2:	2320      	movs	r3, #32
 8018dc4:	18fb      	adds	r3, r7, r3
 8018dc6:	2205      	movs	r2, #5
 8018dc8:	611a      	str	r2, [r3, #16]
 8018dca:	e002      	b.n	8018dd2 <gpio_configure_ext+0x2d2>
			else err=1;
 8018dcc:	2301      	movs	r3, #1
 8018dce:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 8018dd0:	e062      	b.n	8018e98 <gpio_configure_ext+0x398>
 8018dd2:	e061      	b.n	8018e98 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8018dd4:	1dfb      	adds	r3, r7, #7
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d10a      	bne.n	8018df2 <gpio_configure_ext+0x2f2>
 8018ddc:	1d3b      	adds	r3, r7, #4
 8018dde:	881a      	ldrh	r2, [r3, #0]
 8018de0:	2380      	movs	r3, #128	; 0x80
 8018de2:	021b      	lsls	r3, r3, #8
 8018de4:	429a      	cmp	r2, r3
 8018de6:	d104      	bne.n	8018df2 <gpio_configure_ext+0x2f2>
 8018de8:	2320      	movs	r3, #32
 8018dea:	18fb      	adds	r3, r7, r3
 8018dec:	2205      	movs	r2, #5
 8018dee:	611a      	str	r2, [r3, #16]
 8018df0:	e01c      	b.n	8018e2c <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8018df2:	1dfb      	adds	r3, r7, #7
 8018df4:	781b      	ldrb	r3, [r3, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d108      	bne.n	8018e0c <gpio_configure_ext+0x30c>
 8018dfa:	1d3b      	adds	r3, r7, #4
 8018dfc:	881b      	ldrh	r3, [r3, #0]
 8018dfe:	2b20      	cmp	r3, #32
 8018e00:	d104      	bne.n	8018e0c <gpio_configure_ext+0x30c>
 8018e02:	2320      	movs	r3, #32
 8018e04:	18fb      	adds	r3, r7, r3
 8018e06:	2205      	movs	r2, #5
 8018e08:	611a      	str	r2, [r3, #16]
 8018e0a:	e00f      	b.n	8018e2c <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8018e0c:	1dfb      	adds	r3, r7, #7
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d108      	bne.n	8018e26 <gpio_configure_ext+0x326>
 8018e14:	1d3b      	adds	r3, r7, #4
 8018e16:	881b      	ldrh	r3, [r3, #0]
 8018e18:	2b01      	cmp	r3, #1
 8018e1a:	d104      	bne.n	8018e26 <gpio_configure_ext+0x326>
 8018e1c:	2320      	movs	r3, #32
 8018e1e:	18fb      	adds	r3, r7, r3
 8018e20:	2202      	movs	r2, #2
 8018e22:	611a      	str	r2, [r3, #16]
 8018e24:	e002      	b.n	8018e2c <gpio_configure_ext+0x32c>
			else err=1;
 8018e26:	2301      	movs	r3, #1
 8018e28:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 8018e2a:	e035      	b.n	8018e98 <gpio_configure_ext+0x398>
 8018e2c:	e034      	b.n	8018e98 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8018e2e:	1dfb      	adds	r3, r7, #7
 8018e30:	781b      	ldrb	r3, [r3, #0]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d108      	bne.n	8018e48 <gpio_configure_ext+0x348>
 8018e36:	1d3b      	adds	r3, r7, #4
 8018e38:	881b      	ldrh	r3, [r3, #0]
 8018e3a:	2b20      	cmp	r3, #32
 8018e3c:	d104      	bne.n	8018e48 <gpio_configure_ext+0x348>
 8018e3e:	2320      	movs	r3, #32
 8018e40:	18fb      	adds	r3, r7, r3
 8018e42:	2200      	movs	r2, #0
 8018e44:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8018e46:	e027      	b.n	8018e98 <gpio_configure_ext+0x398>
				else err=1;
 8018e48:	2301      	movs	r3, #1
 8018e4a:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8018e4c:	e024      	b.n	8018e98 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8018e4e:	1dfb      	adds	r3, r7, #7
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	2b01      	cmp	r3, #1
 8018e54:	d108      	bne.n	8018e68 <gpio_configure_ext+0x368>
 8018e56:	1d3b      	adds	r3, r7, #4
 8018e58:	881b      	ldrh	r3, [r3, #0]
 8018e5a:	2b20      	cmp	r3, #32
 8018e5c:	d104      	bne.n	8018e68 <gpio_configure_ext+0x368>
 8018e5e:	2320      	movs	r3, #32
 8018e60:	18fb      	adds	r3, r7, r3
 8018e62:	2200      	movs	r2, #0
 8018e64:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8018e66:	e017      	b.n	8018e98 <gpio_configure_ext+0x398>
				else err=1;
 8018e68:	2301      	movs	r3, #1
 8018e6a:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8018e6c:	e014      	b.n	8018e98 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 8018e6e:	2301      	movs	r3, #1
 8018e70:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8018e72:	e011      	b.n	8018e98 <gpio_configure_ext+0x398>
 8018e74:	0801c4b8 	.word	0x0801c4b8
 8018e78:	40021000 	.word	0x40021000
 8018e7c:	0801c4d8 	.word	0x0801c4d8
 8018e80:	10110000 	.word	0x10110000
 8018e84:	10210000 	.word	0x10210000
 8018e88:	10310000 	.word	0x10310000
 8018e8c:	0801c528 	.word	0x0801c528
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 8018e90:	2301      	movs	r3, #1
 8018e92:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8018e94:	e000      	b.n	8018e98 <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 8018e96:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 8018e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	dd06      	ble.n	8018eac <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 8018e9e:	4b0c      	ldr	r3, [pc, #48]	; (8018ed0 <gpio_configure_ext+0x3d0>)
 8018ea0:	0018      	movs	r0, r3
 8018ea2:	f7fe faf7 	bl	8017494 <log_error>
		}
		break;
 8018ea6:	e001      	b.n	8018eac <gpio_configure_ext+0x3ac>
	default:
		break;
 8018ea8:	46c0      	nop			; (mov r8, r8)
 8018eaa:	e000      	b.n	8018eae <gpio_configure_ext+0x3ae>
		break;
 8018eac:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 8018eae:	1dfb      	adds	r3, r7, #7
 8018eb0:	781b      	ldrb	r3, [r3, #0]
 8018eb2:	0018      	movs	r0, r3
 8018eb4:	f7ff fd62 	bl	801897c <getPortFromBankId>
 8018eb8:	0002      	movs	r2, r0
 8018eba:	2320      	movs	r3, #32
 8018ebc:	18fb      	adds	r3, r7, r3
 8018ebe:	0019      	movs	r1, r3
 8018ec0:	0010      	movs	r0, r2
 8018ec2:	f7eb f94f 	bl	8004164 <HAL_GPIO_Init>

}
 8018ec6:	46c0      	nop			; (mov r8, r8)
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	b00e      	add	sp, #56	; 0x38
 8018ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8018ece:	46c0      	nop			; (mov r8, r8)
 8018ed0:	0801b6a8 	.word	0x0801b6a8

08018ed4 <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b082      	sub	sp, #8
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	0002      	movs	r2, r0
 8018edc:	1dfb      	adds	r3, r7, #7
 8018ede:	701a      	strb	r2, [r3, #0]
 8018ee0:	1d3b      	adds	r3, r7, #4
 8018ee2:	1c0a      	adds	r2, r1, #0
 8018ee4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 8018ee6:	1dfb      	adds	r3, r7, #7
 8018ee8:	781b      	ldrb	r3, [r3, #0]
 8018eea:	0018      	movs	r0, r3
 8018eec:	f7ff fd46 	bl	801897c <getPortFromBankId>
 8018ef0:	1d3b      	adds	r3, r7, #4
 8018ef2:	881b      	ldrh	r3, [r3, #0]
 8018ef4:	2201      	movs	r2, #1
 8018ef6:	0019      	movs	r1, r3
 8018ef8:	f7eb fab2 	bl	8004460 <HAL_GPIO_WritePin>
}
 8018efc:	46c0      	nop			; (mov r8, r8)
 8018efe:	46bd      	mov	sp, r7
 8018f00:	b002      	add	sp, #8
 8018f02:	bd80      	pop	{r7, pc}

08018f04 <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b082      	sub	sp, #8
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	0002      	movs	r2, r0
 8018f0c:	1dfb      	adds	r3, r7, #7
 8018f0e:	701a      	strb	r2, [r3, #0]
 8018f10:	1d3b      	adds	r3, r7, #4
 8018f12:	1c0a      	adds	r2, r1, #0
 8018f14:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 8018f16:	1dfb      	adds	r3, r7, #7
 8018f18:	781b      	ldrb	r3, [r3, #0]
 8018f1a:	0018      	movs	r0, r3
 8018f1c:	f7ff fd2e 	bl	801897c <getPortFromBankId>
 8018f20:	1d3b      	adds	r3, r7, #4
 8018f22:	881b      	ldrh	r3, [r3, #0]
 8018f24:	2200      	movs	r2, #0
 8018f26:	0019      	movs	r1, r3
 8018f28:	f7eb fa9a 	bl	8004460 <HAL_GPIO_WritePin>
}
 8018f2c:	46c0      	nop			; (mov r8, r8)
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	b002      	add	sp, #8
 8018f32:	bd80      	pop	{r7, pc}

08018f34 <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b082      	sub	sp, #8
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	0002      	movs	r2, r0
 8018f3c:	1dfb      	adds	r3, r7, #7
 8018f3e:	701a      	strb	r2, [r3, #0]
 8018f40:	1d3b      	adds	r3, r7, #4
 8018f42:	1c0a      	adds	r2, r1, #0
 8018f44:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 8018f46:	1d3b      	adds	r3, r7, #4
 8018f48:	881a      	ldrh	r2, [r3, #0]
 8018f4a:	1dfb      	adds	r3, r7, #7
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	0011      	movs	r1, r2
 8018f50:	0018      	movs	r0, r3
 8018f52:	f7ff fd93 	bl	8018a7c <getIrqFromBankPin>
 8018f56:	0003      	movs	r3, r0
 8018f58:	0018      	movs	r0, r3
 8018f5a:	f7eb f88e 	bl	800407a <HAL_NVIC_EnableIRQ>
}
 8018f5e:	46c0      	nop			; (mov r8, r8)
 8018f60:	46bd      	mov	sp, r7
 8018f62:	b002      	add	sp, #8
 8018f64:	bd80      	pop	{r7, pc}

08018f66 <gpio_interruptDisableAll>:

void gpio_interruptDisable(uint8_t bank, uint16_t id) {
	HAL_NVIC_DisableIRQ(getIrqFromBankPin(bank,id));
}

void gpio_interruptDisableAll() {
 8018f66:	b580      	push	{r7, lr}
 8018f68:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8018f6a:	2005      	movs	r0, #5
 8018f6c:	f7eb f895 	bl	800409a <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8018f70:	2007      	movs	r0, #7
 8018f72:	f7eb f892 	bl	800409a <HAL_NVIC_DisableIRQ>
}
 8018f76:	46c0      	nop			; (mov r8, r8)
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}

08018f7c <gpio_interruptPriority>:

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 8018f7c:	b5b0      	push	{r4, r5, r7, lr}
 8018f7e:	b082      	sub	sp, #8
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	0005      	movs	r5, r0
 8018f84:	000c      	movs	r4, r1
 8018f86:	0010      	movs	r0, r2
 8018f88:	0019      	movs	r1, r3
 8018f8a:	1dfb      	adds	r3, r7, #7
 8018f8c:	1c2a      	adds	r2, r5, #0
 8018f8e:	701a      	strb	r2, [r3, #0]
 8018f90:	1d3b      	adds	r3, r7, #4
 8018f92:	1c22      	adds	r2, r4, #0
 8018f94:	801a      	strh	r2, [r3, #0]
 8018f96:	1dbb      	adds	r3, r7, #6
 8018f98:	1c02      	adds	r2, r0, #0
 8018f9a:	701a      	strb	r2, [r3, #0]
 8018f9c:	1cfb      	adds	r3, r7, #3
 8018f9e:	1c0a      	adds	r2, r1, #0
 8018fa0:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 8018fa2:	1d3b      	adds	r3, r7, #4
 8018fa4:	881a      	ldrh	r2, [r3, #0]
 8018fa6:	1dfb      	adds	r3, r7, #7
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	0011      	movs	r1, r2
 8018fac:	0018      	movs	r0, r3
 8018fae:	f7ff fd65 	bl	8018a7c <getIrqFromBankPin>
 8018fb2:	0003      	movs	r3, r0
 8018fb4:	0018      	movs	r0, r3
 8018fb6:	1dbb      	adds	r3, r7, #6
 8018fb8:	7819      	ldrb	r1, [r3, #0]
 8018fba:	1cfb      	adds	r3, r7, #3
 8018fbc:	781b      	ldrb	r3, [r3, #0]
 8018fbe:	001a      	movs	r2, r3
 8018fc0:	f7eb f846 	bl	8004050 <HAL_NVIC_SetPriority>
}
 8018fc4:	46c0      	nop			; (mov r8, r8)
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	b002      	add	sp, #8
 8018fca:	bdb0      	pop	{r4, r5, r7, pc}

08018fcc <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b082      	sub	sp, #8
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	0002      	movs	r2, r0
 8018fd4:	1dfb      	adds	r3, r7, #7
 8018fd6:	701a      	strb	r2, [r3, #0]
 8018fd8:	1d3b      	adds	r3, r7, #4
 8018fda:	1c0a      	adds	r2, r1, #0
 8018fdc:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 8018fde:	4b04      	ldr	r3, [pc, #16]	; (8018ff0 <gpio_interruptClear+0x24>)
 8018fe0:	1d3a      	adds	r2, r7, #4
 8018fe2:	8812      	ldrh	r2, [r2, #0]
 8018fe4:	615a      	str	r2, [r3, #20]
}
 8018fe6:	46c0      	nop			; (mov r8, r8)
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	b002      	add	sp, #8
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	46c0      	nop			; (mov r8, r8)
 8018ff0:	40010400 	.word	0x40010400

08018ff4 <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b086      	sub	sp, #24
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	0002      	movs	r2, r0
 8018ffc:	1dbb      	adds	r3, r7, #6
 8018ffe:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 8019000:	4b1b      	ldr	r3, [pc, #108]	; (8019070 <HAL_GPIO_EXTI_Callback+0x7c>)
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d00c      	beq.n	8019022 <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 8019008:	4b19      	ldr	r3, [pc, #100]	; (8019070 <HAL_GPIO_EXTI_Callback+0x7c>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 8019010:	693b      	ldr	r3, [r7, #16]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d005      	beq.n	8019022 <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 8019016:	1dbb      	adds	r3, r7, #6
 8019018:	881a      	ldrh	r2, [r3, #0]
 801901a:	693b      	ldr	r3, [r7, #16]
 801901c:	0010      	movs	r0, r2
 801901e:	4798      	blx	r3
			return;
 8019020:	e023      	b.n	801906a <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8019022:	4b14      	ldr	r3, [pc, #80]	; (8019074 <HAL_GPIO_EXTI_Callback+0x80>)
 8019024:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 8019026:	e019      	b.n	801905c <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d010      	beq.n	8019056 <HAL_GPIO_EXTI_Callback+0x62>
 8019034:	697b      	ldr	r3, [r7, #20]
 8019036:	889b      	ldrh	r3, [r3, #4]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d007      	beq.n	801904c <HAL_GPIO_EXTI_Callback+0x58>
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	889b      	ldrh	r3, [r3, #4]
 8019040:	1dba      	adds	r2, r7, #6
 8019042:	8812      	ldrh	r2, [r2, #0]
 8019044:	4013      	ands	r3, r2
 8019046:	b29b      	uxth	r3, r3
 8019048:	2b00      	cmp	r3, #0
 801904a:	d004      	beq.n	8019056 <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 801904c:	1dbb      	adds	r3, r7, #6
 801904e:	881a      	ldrh	r2, [r3, #0]
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	0010      	movs	r0, r2
 8019054:	4798      	blx	r3
		}
		c = c->next;
 8019056:	697b      	ldr	r3, [r7, #20]
 8019058:	689b      	ldr	r3, [r3, #8]
 801905a:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d1e2      	bne.n	8019028 <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8019062:	4b05      	ldr	r3, [pc, #20]	; (8019078 <HAL_GPIO_EXTI_Callback+0x84>)
 8019064:	1dba      	adds	r2, r7, #6
 8019066:	8812      	ldrh	r2, [r2, #0]
 8019068:	615a      	str	r2, [r3, #20]
	#endif
}
 801906a:	46bd      	mov	sp, r7
 801906c:	b006      	add	sp, #24
 801906e:	bd80      	pop	{r7, pc}
 8019070:	20000dbc 	.word	0x20000dbc
 8019074:	20000db0 	.word	0x20000db0
 8019078:	40010400 	.word	0x40010400

0801907c <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 801907c:	b580      	push	{r7, lr}
 801907e:	b084      	sub	sp, #16
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8019084:	4b0f      	ldr	r3, [pc, #60]	; (80190c4 <gpio_registerIrqAction+0x48>)
 8019086:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 8019088:	e002      	b.n	8019090 <gpio_registerIrqAction+0x14>
	  c = c->next;
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	689b      	ldr	r3, [r3, #8]
 801908e:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	689b      	ldr	r3, [r3, #8]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d005      	beq.n	80190a4 <gpio_registerIrqAction+0x28>
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681a      	ldr	r2, [r3, #0]
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	429a      	cmp	r2, r3
 80190a2:	d1f2      	bne.n	801908a <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	681a      	ldr	r2, [r3, #0]
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	429a      	cmp	r2, r3
 80190ae:	d005      	beq.n	80190bc <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	687a      	ldr	r2, [r7, #4]
 80190b4:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	2200      	movs	r2, #0
 80190ba:	609a      	str	r2, [r3, #8]
	}
}
 80190bc:	46c0      	nop			; (mov r8, r8)
 80190be:	46bd      	mov	sp, r7
 80190c0:	b004      	add	sp, #16
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	20000db0 	.word	0x20000db0

080190c8 <NVIC_SystemReset>:
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80190cc:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80190d0:	4b03      	ldr	r3, [pc, #12]	; (80190e0 <NVIC_SystemReset+0x18>)
 80190d2:	4a04      	ldr	r2, [pc, #16]	; (80190e4 <NVIC_SystemReset+0x1c>)
 80190d4:	60da      	str	r2, [r3, #12]
 80190d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80190da:	46c0      	nop			; (mov r8, r8)
    __NOP();
 80190dc:	e7fd      	b.n	80190da <NVIC_SystemReset+0x12>
 80190de:	46c0      	nop			; (mov r8, r8)
 80190e0:	e000ed00 	.word	0xe000ed00
 80190e4:	05fa0004 	.word	0x05fa0004

080190e8 <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 80190e8:	b580      	push	{r7, lr}
 80190ea:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 80190ec:	f7ff ffec 	bl	80190c8 <NVIC_SystemReset>
 80190f0:	e7fc      	b.n	80190ec <itsdk_reset+0x4>
	...

080190f4 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 80190f4:	b580      	push	{r7, lr}
 80190f6:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 80190f8:	4b1c      	ldr	r3, [pc, #112]	; (801916c <itsdk_getResetCause+0x78>)
 80190fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	da01      	bge.n	8019104 <itsdk_getResetCause+0x10>
 8019100:	2306      	movs	r3, #6
 8019102:	e030      	b.n	8019166 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 8019104:	4b19      	ldr	r3, [pc, #100]	; (801916c <itsdk_getResetCause+0x78>)
 8019106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019108:	2380      	movs	r3, #128	; 0x80
 801910a:	05db      	lsls	r3, r3, #23
 801910c:	4013      	ands	r3, r2
 801910e:	d001      	beq.n	8019114 <itsdk_getResetCause+0x20>
 8019110:	2305      	movs	r3, #5
 8019112:	e028      	b.n	8019166 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 8019114:	4b15      	ldr	r3, [pc, #84]	; (801916c <itsdk_getResetCause+0x78>)
 8019116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019118:	2380      	movs	r3, #128	; 0x80
 801911a:	059b      	lsls	r3, r3, #22
 801911c:	4013      	ands	r3, r2
 801911e:	d001      	beq.n	8019124 <itsdk_getResetCause+0x30>
 8019120:	2304      	movs	r3, #4
 8019122:	e020      	b.n	8019166 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 8019124:	4b11      	ldr	r3, [pc, #68]	; (801916c <itsdk_getResetCause+0x78>)
 8019126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019128:	2380      	movs	r3, #128	; 0x80
 801912a:	055b      	lsls	r3, r3, #21
 801912c:	4013      	ands	r3, r2
 801912e:	d001      	beq.n	8019134 <itsdk_getResetCause+0x40>
 8019130:	2303      	movs	r3, #3
 8019132:	e018      	b.n	8019166 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 8019134:	4b0d      	ldr	r3, [pc, #52]	; (801916c <itsdk_getResetCause+0x78>)
 8019136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019138:	2380      	movs	r3, #128	; 0x80
 801913a:	051b      	lsls	r3, r3, #20
 801913c:	4013      	ands	r3, r2
 801913e:	d001      	beq.n	8019144 <itsdk_getResetCause+0x50>
 8019140:	2302      	movs	r3, #2
 8019142:	e010      	b.n	8019166 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 8019144:	4b09      	ldr	r3, [pc, #36]	; (801916c <itsdk_getResetCause+0x78>)
 8019146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019148:	2380      	movs	r3, #128	; 0x80
 801914a:	04db      	lsls	r3, r3, #19
 801914c:	4013      	ands	r3, r2
 801914e:	d001      	beq.n	8019154 <itsdk_getResetCause+0x60>
 8019150:	2301      	movs	r3, #1
 8019152:	e008      	b.n	8019166 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 8019154:	4b05      	ldr	r3, [pc, #20]	; (801916c <itsdk_getResetCause+0x78>)
 8019156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019158:	2380      	movs	r3, #128	; 0x80
 801915a:	049b      	lsls	r3, r3, #18
 801915c:	4013      	ands	r3, r2
 801915e:	d001      	beq.n	8019164 <itsdk_getResetCause+0x70>
 8019160:	2306      	movs	r3, #6
 8019162:	e000      	b.n	8019166 <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 8019164:	2307      	movs	r3, #7
}
 8019166:	0018      	movs	r0, r3
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}
 801916c:	40021000 	.word	0x40021000

08019170 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 8019170:	b580      	push	{r7, lr}
 8019172:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 8019174:	4b04      	ldr	r3, [pc, #16]	; (8019188 <itsdk_cleanResetCause+0x18>)
 8019176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019178:	4b03      	ldr	r3, [pc, #12]	; (8019188 <itsdk_cleanResetCause+0x18>)
 801917a:	2180      	movs	r1, #128	; 0x80
 801917c:	0409      	lsls	r1, r1, #16
 801917e:	430a      	orrs	r2, r1
 8019180:	651a      	str	r2, [r3, #80]	; 0x50
}
 8019182:	46c0      	nop			; (mov r8, r8)
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	40021000 	.word	0x40021000

0801918c <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 801918c:	b580      	push	{r7, lr}
 801918e:	b082      	sub	sp, #8
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	0018      	movs	r0, r3
 8019198:	f7ea fc0e 	bl	80039b8 <HAL_Delay>
}
 801919c:	46c0      	nop			; (mov r8, r8)
 801919e:	46bd      	mov	sp, r7
 80191a0:	b002      	add	sp, #8
 80191a2:	bd80      	pop	{r7, pc}

080191a4 <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b082      	sub	sp, #8
 80191a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80191aa:	f3ef 8310 	mrs	r3, PRIMASK
 80191ae:	607b      	str	r3, [r7, #4]
  return(result);
 80191b0:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 80191b2:	46c0      	nop			; (mov r8, r8)
}
 80191b4:	0018      	movs	r0, r3
 80191b6:	46bd      	mov	sp, r7
 80191b8:	b002      	add	sp, #8
 80191ba:	bd80      	pop	{r7, pc}

080191bc <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 80191bc:	b580      	push	{r7, lr}
 80191be:	b084      	sub	sp, #16
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 80191ce:	46c0      	nop			; (mov r8, r8)
 80191d0:	46bd      	mov	sp, r7
 80191d2:	b004      	add	sp, #16
 80191d4:	bd80      	pop	{r7, pc}
	...

080191d8 <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 80191d8:	b580      	push	{r7, lr}
 80191da:	b082      	sub	sp, #8
 80191dc:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 80191de:	f7ff ffe1 	bl	80191a4 <itsdk_getIrqMask>
 80191e2:	0002      	movs	r2, r0
 80191e4:	4b05      	ldr	r3, [pc, #20]	; (80191fc <itsdk_enterCriticalSection+0x24>)
 80191e6:	601a      	str	r2, [r3, #0]
 80191e8:	2301      	movs	r3, #1
 80191ea:	607b      	str	r3, [r7, #4]
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 80191f2:	46c0      	nop			; (mov r8, r8)
 80191f4:	46bd      	mov	sp, r7
 80191f6:	b002      	add	sp, #8
 80191f8:	bd80      	pop	{r7, pc}
 80191fa:	46c0      	nop			; (mov r8, r8)
 80191fc:	20000dc0 	.word	0x20000dc0

08019200 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 8019200:	b580      	push	{r7, lr}
 8019202:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 8019204:	4b03      	ldr	r3, [pc, #12]	; (8019214 <itsdk_leaveCriticalSection+0x14>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	0018      	movs	r0, r3
 801920a:	f7ff ffd7 	bl	80191bc <itsdk_setIrqMask>
}
 801920e:	46c0      	nop			; (mov r8, r8)
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}
 8019214:	20000dc0 	.word	0x20000dc0

08019218 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 8019218:	b580      	push	{r7, lr}
 801921a:	b086      	sub	sp, #24
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
 8019220:	000a      	movs	r2, r1
 8019222:	1cfb      	adds	r3, r7, #3
 8019224:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 8019226:	4b2c      	ldr	r3, [pc, #176]	; (80192d8 <itsdk_getUniqId+0xc0>)
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	041a      	lsls	r2, r3, #16
 801922c:	4b2b      	ldr	r3, [pc, #172]	; (80192dc <itsdk_getUniqId+0xc4>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	021b      	lsls	r3, r3, #8
 8019232:	18d2      	adds	r2, r2, r3
 8019234:	4b2a      	ldr	r3, [pc, #168]	; (80192e0 <itsdk_getUniqId+0xc8>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	18d3      	adds	r3, r2, r3
 801923a:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 801923c:	2317      	movs	r3, #23
 801923e:	18fb      	adds	r3, r7, r3
 8019240:	2200      	movs	r2, #0
 8019242:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 8019248:	e03a      	b.n	80192c0 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 801924a:	2317      	movs	r3, #23
 801924c:	18fb      	adds	r3, r7, r3
 801924e:	781b      	ldrb	r3, [r3, #0]
 8019250:	2203      	movs	r2, #3
 8019252:	4013      	ands	r3, r2
 8019254:	d11f      	bne.n	8019296 <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 8019256:	2317      	movs	r3, #23
 8019258:	18fb      	adds	r3, r7, r3
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	089b      	lsrs	r3, r3, #2
 801925e:	b2db      	uxtb	r3, r3
 8019260:	001a      	movs	r2, r3
 8019262:	2303      	movs	r3, #3
 8019264:	4013      	ands	r3, r2
 8019266:	2b01      	cmp	r3, #1
 8019268:	d008      	beq.n	801927c <itsdk_getUniqId+0x64>
 801926a:	2b02      	cmp	r3, #2
 801926c:	d00b      	beq.n	8019286 <itsdk_getUniqId+0x6e>
 801926e:	2b00      	cmp	r3, #0
 8019270:	d10e      	bne.n	8019290 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	4a18      	ldr	r2, [pc, #96]	; (80192d8 <itsdk_getUniqId+0xc0>)
 8019276:	4053      	eors	r3, r2
 8019278:	613b      	str	r3, [r7, #16]
 801927a:	e00d      	b.n	8019298 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	4a17      	ldr	r2, [pc, #92]	; (80192dc <itsdk_getUniqId+0xc4>)
 8019280:	4053      	eors	r3, r2
 8019282:	613b      	str	r3, [r7, #16]
 8019284:	e008      	b.n	8019298 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	4a15      	ldr	r2, [pc, #84]	; (80192e0 <itsdk_getUniqId+0xc8>)
 801928a:	4053      	eors	r3, r2
 801928c:	613b      	str	r3, [r7, #16]
 801928e:	e003      	b.n	8019298 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	613b      	str	r3, [r7, #16]
 8019294:	e000      	b.n	8019298 <itsdk_getUniqId+0x80>
			}
		}
 8019296:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 8019298:	2017      	movs	r0, #23
 801929a:	183b      	adds	r3, r7, r0
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	2203      	movs	r2, #3
 80192a0:	4013      	ands	r3, r2
 80192a2:	00db      	lsls	r3, r3, #3
 80192a4:	693a      	ldr	r2, [r7, #16]
 80192a6:	40da      	lsrs	r2, r3
 80192a8:	0011      	movs	r1, r2
 80192aa:	183b      	adds	r3, r7, r0
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	687a      	ldr	r2, [r7, #4]
 80192b0:	18d3      	adds	r3, r2, r3
 80192b2:	b2ca      	uxtb	r2, r1
 80192b4:	701a      	strb	r2, [r3, #0]
		l++;
 80192b6:	183b      	adds	r3, r7, r0
 80192b8:	781a      	ldrb	r2, [r3, #0]
 80192ba:	183b      	adds	r3, r7, r0
 80192bc:	3201      	adds	r2, #1
 80192be:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 80192c0:	2317      	movs	r3, #23
 80192c2:	18fb      	adds	r3, r7, r3
 80192c4:	781a      	ldrb	r2, [r3, #0]
 80192c6:	1cfb      	adds	r3, r7, #3
 80192c8:	781b      	ldrb	r3, [r3, #0]
 80192ca:	b25b      	sxtb	r3, r3
 80192cc:	429a      	cmp	r2, r3
 80192ce:	dbbc      	blt.n	801924a <itsdk_getUniqId+0x32>
	}

}
 80192d0:	46c0      	nop			; (mov r8, r8)
 80192d2:	46bd      	mov	sp, r7
 80192d4:	b006      	add	sp, #24
 80192d6:	bd80      	pop	{r7, pc}
 80192d8:	1ff80050 	.word	0x1ff80050
 80192dc:	1ff80054 	.word	0x1ff80054
 80192e0:	1ff80064 	.word	0x1ff80064

080192e4 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b082      	sub	sp, #8
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #endif
}
 80192ec:	46c0      	nop			; (mov r8, r8)
 80192ee:	46bd      	mov	sp, r7
 80192f0:	b002      	add	sp, #8
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	0018      	movs	r0, r3
 8019300:	f7e6 ff02 	bl	8000108 <strlen>
 8019304:	0003      	movs	r3, r0
 8019306:	b29a      	uxth	r2, r3
 8019308:	4b04      	ldr	r3, [pc, #16]	; (801931c <serial2_print+0x28>)
 801930a:	6879      	ldr	r1, [r7, #4]
 801930c:	4804      	ldr	r0, [pc, #16]	; (8019320 <serial2_print+0x2c>)
 801930e:	f7ed fb73 	bl	80069f8 <HAL_UART_Transmit>
  #endif
}
 8019312:	46c0      	nop			; (mov r8, r8)
 8019314:	46bd      	mov	sp, r7
 8019316:	b002      	add	sp, #8
 8019318:	bd80      	pop	{r7, pc}
 801931a:	46c0      	nop			; (mov r8, r8)
 801931c:	0000ffff 	.word	0x0000ffff
 8019320:	20001008 	.word	0x20001008

08019324 <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 8019324:	b580      	push	{r7, lr}
 8019326:	b082      	sub	sp, #8
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801932c:	4b17      	ldr	r3, [pc, #92]	; (801938c <serial2_read+0x68>)
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	b2da      	uxtb	r2, r3
 8019332:	4b17      	ldr	r3, [pc, #92]	; (8019390 <serial2_read+0x6c>)
 8019334:	781b      	ldrb	r3, [r3, #0]
 8019336:	b2db      	uxtb	r3, r3
 8019338:	429a      	cmp	r2, r3
 801933a:	d021      	beq.n	8019380 <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 801933c:	4b13      	ldr	r3, [pc, #76]	; (801938c <serial2_read+0x68>)
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	b2db      	uxtb	r3, r3
 8019342:	001a      	movs	r2, r3
 8019344:	4b13      	ldr	r3, [pc, #76]	; (8019394 <serial2_read+0x70>)
 8019346:	5c9a      	ldrb	r2, [r3, r2]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 801934c:	f7ff ff44 	bl	80191d8 <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 8019350:	4b0e      	ldr	r3, [pc, #56]	; (801938c <serial2_read+0x68>)
 8019352:	781b      	ldrb	r3, [r3, #0]
 8019354:	b2db      	uxtb	r3, r3
 8019356:	3301      	adds	r3, #1
 8019358:	b2db      	uxtb	r3, r3
 801935a:	223f      	movs	r2, #63	; 0x3f
 801935c:	4013      	ands	r3, r2
 801935e:	b2da      	uxtb	r2, r3
 8019360:	4b0a      	ldr	r3, [pc, #40]	; (801938c <serial2_read+0x68>)
 8019362:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 8019364:	f7ff ff4c 	bl	8019200 <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 8019368:	4b08      	ldr	r3, [pc, #32]	; (801938c <serial2_read+0x68>)
 801936a:	781b      	ldrb	r3, [r3, #0]
 801936c:	b2da      	uxtb	r2, r3
 801936e:	4b08      	ldr	r3, [pc, #32]	; (8019390 <serial2_read+0x6c>)
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	b2db      	uxtb	r3, r3
 8019374:	429a      	cmp	r2, r3
 8019376:	d001      	beq.n	801937c <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 8019378:	2301      	movs	r3, #1
 801937a:	e002      	b.n	8019382 <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 801937c:	2300      	movs	r3, #0
 801937e:	e000      	b.n	8019382 <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 8019380:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 8019382:	0018      	movs	r0, r3
 8019384:	46bd      	mov	sp, r7
 8019386:	b002      	add	sp, #8
 8019388:	bd80      	pop	{r7, pc}
 801938a:	46c0      	nop			; (mov r8, r8)
 801938c:	2000123e 	.word	0x2000123e
 8019390:	200011f5 	.word	0x200011f5
 8019394:	200011f8 	.word	0x200011f8

08019398 <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	2208      	movs	r2, #8
 80193a6:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2204      	movs	r2, #4
 80193ae:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	2202      	movs	r2, #2
 80193b6:	621a      	str	r2, [r3, #32]
}
 80193b8:	46c0      	nop			; (mov r8, r8)
 80193ba:	46bd      	mov	sp, r7
 80193bc:	b002      	add	sp, #8
 80193be:	bd80      	pop	{r7, pc}

080193c0 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b082      	sub	sp, #8
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	0002      	movs	r2, r0
 80193c8:	6039      	str	r1, [r7, #0]
 80193ca:	1dfb      	adds	r3, r7, #7
 80193cc:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 80193ce:	46c0      	nop			; (mov r8, r8)
 80193d0:	46bd      	mov	sp, r7
 80193d2:	b002      	add	sp, #8
 80193d4:	bd80      	pop	{r7, pc}
	...

080193d8 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 80193d8:	b580      	push	{r7, lr}
 80193da:	b088      	sub	sp, #32
 80193dc:	af00      	add	r7, sp, #0
 80193de:	60b9      	str	r1, [r7, #8]
 80193e0:	607a      	str	r2, [r7, #4]
 80193e2:	603b      	str	r3, [r7, #0]
 80193e4:	210f      	movs	r1, #15
 80193e6:	187b      	adds	r3, r7, r1
 80193e8:	1c02      	adds	r2, r0, #0
 80193ea:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 80193f0:	187b      	adds	r3, r7, r1
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d106      	bne.n	8019406 <_eeprom_write+0x2e>
 80193f8:	683a      	ldr	r2, [r7, #0]
 80193fa:	68bb      	ldr	r3, [r7, #8]
 80193fc:	18d2      	adds	r2, r2, r3
 80193fe:	23c0      	movs	r3, #192	; 0xc0
 8019400:	015b      	lsls	r3, r3, #5
 8019402:	429a      	cmp	r2, r3
 8019404:	d906      	bls.n	8019414 <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	b29b      	uxth	r3, r3
 801940a:	4a3f      	ldr	r2, [pc, #252]	; (8019508 <_eeprom_write+0x130>)
 801940c:	0019      	movs	r1, r3
 801940e:	0010      	movs	r0, r2
 8019410:	f7fd fdb4 	bl	8016f7c <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	4a3d      	ldr	r2, [pc, #244]	; (801950c <_eeprom_write+0x134>)
 8019418:	4694      	mov	ip, r2
 801941a:	4463      	add	r3, ip
 801941c:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801941e:	69fb      	ldr	r3, [r7, #28]
 8019420:	2203      	movs	r2, #3
 8019422:	4013      	ands	r3, r2
 8019424:	d006      	beq.n	8019434 <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 8019426:	4b3a      	ldr	r3, [pc, #232]	; (8019510 <_eeprom_write+0x138>)
 8019428:	2101      	movs	r1, #1
 801942a:	0018      	movs	r0, r3
 801942c:	f7fd fda6 	bl	8016f7c <itsdk_error_report>
	    return false;
 8019430:	2300      	movs	r3, #0
 8019432:	e064      	b.n	80194fe <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 8019434:	4b37      	ldr	r3, [pc, #220]	; (8019514 <_eeprom_write+0x13c>)
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	2201      	movs	r2, #1
 801943a:	4013      	ands	r3, r2
 801943c:	d005      	beq.n	801944a <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 801943e:	4b35      	ldr	r3, [pc, #212]	; (8019514 <_eeprom_write+0x13c>)
 8019440:	4a35      	ldr	r2, [pc, #212]	; (8019518 <_eeprom_write+0x140>)
 8019442:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 8019444:	4b33      	ldr	r3, [pc, #204]	; (8019514 <_eeprom_write+0x13c>)
 8019446:	4a35      	ldr	r2, [pc, #212]	; (801951c <_eeprom_write+0x144>)
 8019448:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 801944a:	2300      	movs	r3, #0
 801944c:	61bb      	str	r3, [r7, #24]
 801944e:	e04b      	b.n	80194e8 <_eeprom_write+0x110>
		v = _data[i] << 24;
 8019450:	69bb      	ldr	r3, [r7, #24]
 8019452:	697a      	ldr	r2, [r7, #20]
 8019454:	18d3      	adds	r3, r2, r3
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	061b      	lsls	r3, r3, #24
 801945a:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 801945c:	69bb      	ldr	r3, [r7, #24]
 801945e:	3301      	adds	r3, #1
 8019460:	683a      	ldr	r2, [r7, #0]
 8019462:	429a      	cmp	r2, r3
 8019464:	dd07      	ble.n	8019476 <_eeprom_write+0x9e>
 8019466:	69bb      	ldr	r3, [r7, #24]
 8019468:	3301      	adds	r3, #1
 801946a:	697a      	ldr	r2, [r7, #20]
 801946c:	18d3      	adds	r3, r2, r3
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	041b      	lsls	r3, r3, #16
 8019472:	001a      	movs	r2, r3
 8019474:	e000      	b.n	8019478 <_eeprom_write+0xa0>
 8019476:	2200      	movs	r2, #0
 8019478:	693b      	ldr	r3, [r7, #16]
 801947a:	189b      	adds	r3, r3, r2
 801947c:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	3302      	adds	r3, #2
 8019482:	683a      	ldr	r2, [r7, #0]
 8019484:	429a      	cmp	r2, r3
 8019486:	dd07      	ble.n	8019498 <_eeprom_write+0xc0>
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	3302      	adds	r3, #2
 801948c:	697a      	ldr	r2, [r7, #20]
 801948e:	18d3      	adds	r3, r2, r3
 8019490:	781b      	ldrb	r3, [r3, #0]
 8019492:	021b      	lsls	r3, r3, #8
 8019494:	001a      	movs	r2, r3
 8019496:	e000      	b.n	801949a <_eeprom_write+0xc2>
 8019498:	2200      	movs	r2, #0
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	189b      	adds	r3, r3, r2
 801949e:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 80194a0:	69bb      	ldr	r3, [r7, #24]
 80194a2:	3303      	adds	r3, #3
 80194a4:	683a      	ldr	r2, [r7, #0]
 80194a6:	429a      	cmp	r2, r3
 80194a8:	dd06      	ble.n	80194b8 <_eeprom_write+0xe0>
 80194aa:	69bb      	ldr	r3, [r7, #24]
 80194ac:	3303      	adds	r3, #3
 80194ae:	697a      	ldr	r2, [r7, #20]
 80194b0:	18d3      	adds	r3, r2, r3
 80194b2:	781b      	ldrb	r3, [r3, #0]
 80194b4:	001a      	movs	r2, r3
 80194b6:	e000      	b.n	80194ba <_eeprom_write+0xe2>
 80194b8:	2200      	movs	r2, #0
 80194ba:	693b      	ldr	r3, [r7, #16]
 80194bc:	189b      	adds	r3, r3, r2
 80194be:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 80194c0:	69fb      	ldr	r3, [r7, #28]
 80194c2:	0018      	movs	r0, r3
 80194c4:	f000 f8a6 	bl	8019614 <__eepromRead>
 80194c8:	0002      	movs	r2, r0
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	4293      	cmp	r3, r2
 80194ce:	d005      	beq.n	80194dc <_eeprom_write+0x104>
 80194d0:	693a      	ldr	r2, [r7, #16]
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	0011      	movs	r1, r2
 80194d6:	0018      	movs	r0, r3
 80194d8:	f000 f8a6 	bl	8019628 <__eepromWrite>
		_eepromAddr+=4;
 80194dc:	69fb      	ldr	r3, [r7, #28]
 80194de:	3304      	adds	r3, #4
 80194e0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 80194e2:	69bb      	ldr	r3, [r7, #24]
 80194e4:	3304      	adds	r3, #4
 80194e6:	61bb      	str	r3, [r7, #24]
 80194e8:	69ba      	ldr	r2, [r7, #24]
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	429a      	cmp	r2, r3
 80194ee:	dbaf      	blt.n	8019450 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 80194f0:	4b08      	ldr	r3, [pc, #32]	; (8019514 <_eeprom_write+0x13c>)
 80194f2:	685a      	ldr	r2, [r3, #4]
 80194f4:	4b07      	ldr	r3, [pc, #28]	; (8019514 <_eeprom_write+0x13c>)
 80194f6:	2101      	movs	r1, #1
 80194f8:	430a      	orrs	r2, r1
 80194fa:	605a      	str	r2, [r3, #4]
	return true;
 80194fc:	2301      	movs	r3, #1
}
 80194fe:	0018      	movs	r0, r3
 8019500:	46bd      	mov	sp, r7
 8019502:	b008      	add	sp, #32
 8019504:	bd80      	pop	{r7, pc}
 8019506:	46c0      	nop			; (mov r8, r8)
 8019508:	d0000030 	.word	0xd0000030
 801950c:	08080000 	.word	0x08080000
 8019510:	d0000031 	.word	0xd0000031
 8019514:	40022000 	.word	0x40022000
 8019518:	89abcdef 	.word	0x89abcdef
 801951c:	02030405 	.word	0x02030405

08019520 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 8019520:	b580      	push	{r7, lr}
 8019522:	b088      	sub	sp, #32
 8019524:	af00      	add	r7, sp, #0
 8019526:	60b9      	str	r1, [r7, #8]
 8019528:	607a      	str	r2, [r7, #4]
 801952a:	603b      	str	r3, [r7, #0]
 801952c:	210f      	movs	r1, #15
 801952e:	187b      	adds	r3, r7, r1
 8019530:	1c02      	adds	r2, r0, #0
 8019532:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 8019538:	187b      	adds	r3, r7, r1
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d106      	bne.n	801954e <_eeprom_read+0x2e>
 8019540:	683a      	ldr	r2, [r7, #0]
 8019542:	68bb      	ldr	r3, [r7, #8]
 8019544:	18d2      	adds	r2, r2, r3
 8019546:	23c0      	movs	r3, #192	; 0xc0
 8019548:	015b      	lsls	r3, r3, #5
 801954a:	429a      	cmp	r2, r3
 801954c:	d906      	bls.n	801955c <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	b29b      	uxth	r3, r3
 8019552:	4a2d      	ldr	r2, [pc, #180]	; (8019608 <_eeprom_read+0xe8>)
 8019554:	0019      	movs	r1, r3
 8019556:	0010      	movs	r0, r2
 8019558:	f7fd fd10 	bl	8016f7c <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801955c:	68bb      	ldr	r3, [r7, #8]
 801955e:	4a2b      	ldr	r2, [pc, #172]	; (801960c <_eeprom_read+0xec>)
 8019560:	4694      	mov	ip, r2
 8019562:	4463      	add	r3, ip
 8019564:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 8019566:	69fb      	ldr	r3, [r7, #28]
 8019568:	2203      	movs	r2, #3
 801956a:	4013      	ands	r3, r2
 801956c:	d006      	beq.n	801957c <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 801956e:	4b28      	ldr	r3, [pc, #160]	; (8019610 <_eeprom_read+0xf0>)
 8019570:	2100      	movs	r1, #0
 8019572:	0018      	movs	r0, r3
 8019574:	f7fd fd02 	bl	8016f7c <itsdk_error_report>
	    return false;
 8019578:	2300      	movs	r3, #0
 801957a:	e040      	b.n	80195fe <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 801957c:	2300      	movs	r3, #0
 801957e:	61bb      	str	r3, [r7, #24]
 8019580:	e038      	b.n	80195f4 <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 8019582:	69fb      	ldr	r3, [r7, #28]
 8019584:	0018      	movs	r0, r3
 8019586:	f000 f845 	bl	8019614 <__eepromRead>
 801958a:	0003      	movs	r3, r0
 801958c:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	0e19      	lsrs	r1, r3, #24
 8019592:	69bb      	ldr	r3, [r7, #24]
 8019594:	697a      	ldr	r2, [r7, #20]
 8019596:	18d3      	adds	r3, r2, r3
 8019598:	b2ca      	uxtb	r2, r1
 801959a:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 801959c:	69bb      	ldr	r3, [r7, #24]
 801959e:	3301      	adds	r3, #1
 80195a0:	683a      	ldr	r2, [r7, #0]
 80195a2:	429a      	cmp	r2, r3
 80195a4:	dd07      	ble.n	80195b6 <_eeprom_read+0x96>
 80195a6:	693b      	ldr	r3, [r7, #16]
 80195a8:	0c19      	lsrs	r1, r3, #16
 80195aa:	69bb      	ldr	r3, [r7, #24]
 80195ac:	3301      	adds	r3, #1
 80195ae:	697a      	ldr	r2, [r7, #20]
 80195b0:	18d3      	adds	r3, r2, r3
 80195b2:	b2ca      	uxtb	r2, r1
 80195b4:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 80195b6:	69bb      	ldr	r3, [r7, #24]
 80195b8:	3302      	adds	r3, #2
 80195ba:	683a      	ldr	r2, [r7, #0]
 80195bc:	429a      	cmp	r2, r3
 80195be:	dd07      	ble.n	80195d0 <_eeprom_read+0xb0>
 80195c0:	693b      	ldr	r3, [r7, #16]
 80195c2:	0a19      	lsrs	r1, r3, #8
 80195c4:	69bb      	ldr	r3, [r7, #24]
 80195c6:	3302      	adds	r3, #2
 80195c8:	697a      	ldr	r2, [r7, #20]
 80195ca:	18d3      	adds	r3, r2, r3
 80195cc:	b2ca      	uxtb	r2, r1
 80195ce:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 80195d0:	69bb      	ldr	r3, [r7, #24]
 80195d2:	3303      	adds	r3, #3
 80195d4:	683a      	ldr	r2, [r7, #0]
 80195d6:	429a      	cmp	r2, r3
 80195d8:	dd06      	ble.n	80195e8 <_eeprom_read+0xc8>
 80195da:	69bb      	ldr	r3, [r7, #24]
 80195dc:	3303      	adds	r3, #3
 80195de:	697a      	ldr	r2, [r7, #20]
 80195e0:	18d3      	adds	r3, r2, r3
 80195e2:	693a      	ldr	r2, [r7, #16]
 80195e4:	b2d2      	uxtb	r2, r2
 80195e6:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 80195e8:	69fb      	ldr	r3, [r7, #28]
 80195ea:	3304      	adds	r3, #4
 80195ec:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 80195ee:	69bb      	ldr	r3, [r7, #24]
 80195f0:	3304      	adds	r3, #4
 80195f2:	61bb      	str	r3, [r7, #24]
 80195f4:	69ba      	ldr	r2, [r7, #24]
 80195f6:	683b      	ldr	r3, [r7, #0]
 80195f8:	429a      	cmp	r2, r3
 80195fa:	dbc2      	blt.n	8019582 <_eeprom_read+0x62>
	}
	return true;
 80195fc:	2301      	movs	r3, #1
}
 80195fe:	0018      	movs	r0, r3
 8019600:	46bd      	mov	sp, r7
 8019602:	b008      	add	sp, #32
 8019604:	bd80      	pop	{r7, pc}
 8019606:	46c0      	nop			; (mov r8, r8)
 8019608:	d0000030 	.word	0xd0000030
 801960c:	08080000 	.word	0x08080000
 8019610:	d0000031 	.word	0xd0000031

08019614 <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 8019614:	b580      	push	{r7, lr}
 8019616:	b082      	sub	sp, #8
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	681b      	ldr	r3, [r3, #0]
}
 8019620:	0018      	movs	r0, r3
 8019622:	46bd      	mov	sp, r7
 8019624:	b002      	add	sp, #8
 8019626:	bd80      	pop	{r7, pc}

08019628 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 8019628:	b580      	push	{r7, lr}
 801962a:	b084      	sub	sp, #16
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
 8019630:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 8019632:	230e      	movs	r3, #14
 8019634:	18fb      	adds	r3, r7, r3
 8019636:	4a20      	ldr	r2, [pc, #128]	; (80196b8 <__eepromWrite+0x90>)
 8019638:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801963a:	e005      	b.n	8019648 <__eepromWrite+0x20>
 801963c:	210e      	movs	r1, #14
 801963e:	187b      	adds	r3, r7, r1
 8019640:	881a      	ldrh	r2, [r3, #0]
 8019642:	187b      	adds	r3, r7, r1
 8019644:	3a01      	subs	r2, #1
 8019646:	801a      	strh	r2, [r3, #0]
 8019648:	4b1c      	ldr	r3, [pc, #112]	; (80196bc <__eepromWrite+0x94>)
 801964a:	699b      	ldr	r3, [r3, #24]
 801964c:	2201      	movs	r2, #1
 801964e:	4013      	ands	r3, r2
 8019650:	d004      	beq.n	801965c <__eepromWrite+0x34>
 8019652:	230e      	movs	r3, #14
 8019654:	18fb      	adds	r3, r7, r3
 8019656:	881b      	ldrh	r3, [r3, #0]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d1ef      	bne.n	801963c <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 801965c:	230e      	movs	r3, #14
 801965e:	18fb      	adds	r3, r7, r3
 8019660:	881b      	ldrh	r3, [r3, #0]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d101      	bne.n	801966a <__eepromWrite+0x42>
 8019666:	2300      	movs	r3, #0
 8019668:	e021      	b.n	80196ae <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 801966a:	4b14      	ldr	r3, [pc, #80]	; (80196bc <__eepromWrite+0x94>)
 801966c:	685a      	ldr	r2, [r3, #4]
 801966e:	4b13      	ldr	r3, [pc, #76]	; (80196bc <__eepromWrite+0x94>)
 8019670:	4913      	ldr	r1, [pc, #76]	; (80196c0 <__eepromWrite+0x98>)
 8019672:	400a      	ands	r2, r1
 8019674:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	683a      	ldr	r2, [r7, #0]
 801967a:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801967c:	e005      	b.n	801968a <__eepromWrite+0x62>
 801967e:	210e      	movs	r1, #14
 8019680:	187b      	adds	r3, r7, r1
 8019682:	881a      	ldrh	r2, [r3, #0]
 8019684:	187b      	adds	r3, r7, r1
 8019686:	3a01      	subs	r2, #1
 8019688:	801a      	strh	r2, [r3, #0]
 801968a:	4b0c      	ldr	r3, [pc, #48]	; (80196bc <__eepromWrite+0x94>)
 801968c:	699b      	ldr	r3, [r3, #24]
 801968e:	2201      	movs	r2, #1
 8019690:	4013      	ands	r3, r2
 8019692:	d004      	beq.n	801969e <__eepromWrite+0x76>
 8019694:	230e      	movs	r3, #14
 8019696:	18fb      	adds	r3, r7, r3
 8019698:	881b      	ldrh	r3, [r3, #0]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d1ef      	bne.n	801967e <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 801969e:	230e      	movs	r3, #14
 80196a0:	18fb      	adds	r3, r7, r3
 80196a2:	881b      	ldrh	r3, [r3, #0]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d101      	bne.n	80196ac <__eepromWrite+0x84>
 80196a8:	2300      	movs	r3, #0
 80196aa:	e000      	b.n	80196ae <__eepromWrite+0x86>

	return true;
 80196ac:	2301      	movs	r3, #1
}
 80196ae:	0018      	movs	r0, r3
 80196b0:	46bd      	mov	sp, r7
 80196b2:	b004      	add	sp, #16
 80196b4:	bd80      	pop	{r7, pc}
 80196b6:	46c0      	nop			; (mov r8, r8)
 80196b8:	00002710 	.word	0x00002710
 80196bc:	40022000 	.word	0x40022000
 80196c0:	fffffeff 	.word	0xfffffeff

080196c4 <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 80196c4:	b530      	push	{r4, r5, lr}
 80196c6:	000c      	movs	r4, r1
 80196c8:	b083      	sub	sp, #12
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 80196ca:	1c43      	adds	r3, r0, #1
 80196cc:	d05c      	beq.n	8019788 <stm32l_lowPowerSetup+0xc4>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 80196ce:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 80196d0:	2805      	cmp	r0, #5
 80196d2:	d956      	bls.n	8019782 <stm32l_lowPowerSetup+0xbe>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 80196d4:	f000 f93c 	bl	8019950 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 80196d8:	f7ea f990 	bl	80039fc <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 80196dc:	2380      	movs	r3, #128	; 0x80
 80196de:	4a2b      	ldr	r2, [pc, #172]	; (801978c <stm32l_lowPowerSetup+0xc8>)
 80196e0:	055b      	lsls	r3, r3, #21
 80196e2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80196e4:	430b      	orrs	r3, r1
 80196e6:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 80196e8:	f7eb f8f6 	bl	80048d8 <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 80196ec:	f7eb f8e6 	bl	80048bc <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 80196f0:	2c00      	cmp	r4, #0
 80196f2:	d13e      	bne.n	8019772 <stm32l_lowPowerSetup+0xae>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 80196f4:	2180      	movs	r1, #128	; 0x80
 80196f6:	4d26      	ldr	r5, [pc, #152]	; (8019790 <stm32l_lowPowerSetup+0xcc>)
 80196f8:	0249      	lsls	r1, r1, #9
 80196fa:	682b      	ldr	r3, [r5, #0]
 80196fc:	69da      	ldr	r2, [r3, #28]
 80196fe:	420a      	tst	r2, r1
 8019700:	d1fc      	bne.n	80196fc <stm32l_lowPowerSetup+0x38>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 8019702:	2480      	movs	r4, #128	; 0x80
 8019704:	03e4      	lsls	r4, r4, #15
 8019706:	69da      	ldr	r2, [r3, #28]
 8019708:	4222      	tst	r2, r4
 801970a:	d0fc      	beq.n	8019706 <stm32l_lowPowerSetup+0x42>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801970c:	23c0      	movs	r3, #192	; 0xc0
 801970e:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 8019710:	0019      	movs	r1, r3
 8019712:	9a01      	ldr	r2, [sp, #4]
 8019714:	0028      	movs	r0, r5
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 8019716:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 8019718:	f7ee f80e 	bl	8007738 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801971c:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 801971e:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8019720:	689a      	ldr	r2, [r3, #8]
 8019722:	4314      	orrs	r4, r2
 8019724:	609c      	str	r4, [r3, #8]
			  #endif
			#endif

			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART1 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 8019726:	2480      	movs	r4, #128	; 0x80
				HAL_UARTEx_EnableStopMode(&huart2);
 8019728:	f7ee f86c 	bl	8007804 <HAL_UARTEx_EnableStopMode>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801972c:	4d19      	ldr	r5, [pc, #100]	; (8019794 <stm32l_lowPowerSetup+0xd0>)
 801972e:	03e4      	lsls	r4, r4, #15
 8019730:	682a      	ldr	r2, [r5, #0]
 8019732:	69d3      	ldr	r3, [r2, #28]
 8019734:	4223      	tst	r3, r4
 8019736:	d0fc      	beq.n	8019732 <stm32l_lowPowerSetup+0x6e>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1,wakeup);
 8019738:	9900      	ldr	r1, [sp, #0]
 801973a:	9a01      	ldr	r2, [sp, #4]
 801973c:	0028      	movs	r0, r5
 801973e:	f7ed fffb 	bl	8007738 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8019742:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart1);
 8019744:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8019746:	689a      	ldr	r2, [r3, #8]
 8019748:	4314      	orrs	r4, r2
 801974a:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart1);
 801974c:	f7ee f85a 	bl	8007804 <HAL_UARTEx_EnableStopMode>
				#if (ITSDK_WITH_UART & __UART_USART1) > 0
					__HAL_RCC_USART1_CLK_DISABLE();
				#endif
			#endif

			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 8019750:	f000 f89a 	bl	8019888 <_stm32l_disableGpios>
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
																// (the previously existing handler will be bypassed)
			#else
			  gpio_interruptDisableAll();						// Disable GPIOs interrupts
 8019754:	f7ff fc07 	bl	8018f66 <gpio_interruptDisableAll>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
 8019758:	2204      	movs	r2, #4
				__HAL_RCC_SPI1_CLK_DISABLE();
 801975a:	4b0c      	ldr	r3, [pc, #48]	; (801978c <stm32l_lowPowerSetup+0xc8>)
 801975c:	4c0e      	ldr	r4, [pc, #56]	; (8019798 <stm32l_lowPowerSetup+0xd4>)
 801975e:	6b59      	ldr	r1, [r3, #52]	; 0x34
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 8019760:	480e      	ldr	r0, [pc, #56]	; (801979c <stm32l_lowPowerSetup+0xd8>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 8019762:	4021      	ands	r1, r4
 8019764:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 8019766:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8019768:	4391      	bics	r1, r2
 801976a:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 801976c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801976e:	4002      	ands	r2, r0
 8019770:	635a      	str	r2, [r3, #52]	; 0x34
		// ??? add ?? Not yet tested
		//__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 8019772:	22ff      	movs	r2, #255	; 0xff
 8019774:	4b0a      	ldr	r3, [pc, #40]	; (80197a0 <stm32l_lowPowerSetup+0xdc>)
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8019776:	2101      	movs	r1, #1
 8019778:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801977a:	701a      	strb	r2, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801977c:	f7eb f86a 	bl	8004854 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 8019780:	2300      	movs	r3, #0
}
 8019782:	0018      	movs	r0, r3
 8019784:	b003      	add	sp, #12
 8019786:	bd30      	pop	{r4, r5, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 8019788:	4806      	ldr	r0, [pc, #24]	; (80197a4 <stm32l_lowPowerSetup+0xe0>)
 801978a:	e7a3      	b.n	80196d4 <stm32l_lowPowerSetup+0x10>
 801978c:	40021000 	.word	0x40021000
 8019790:	20001008 	.word	0x20001008
 8019794:	20000e78 	.word	0x20000e78
 8019798:	ffffefff 	.word	0xffffefff
 801979c:	fffffdff 	.word	0xfffffdff
 80197a0:	20000058 	.word	0x20000058
 80197a4:	00003e7b 	.word	0x00003e7b

080197a8 <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 80197a8:	b510      	push	{r4, lr}
 80197aa:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 80197ac:	f7e9 fbc6 	bl	8002f3c <SystemClock_Config>
		HAL_SuspendTick();
 80197b0:	f7ea f924 	bl	80039fc <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 80197b4:	f000 f8dd 	bl	8019972 <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 80197b8:	2c00      	cmp	r4, #0
 80197ba:	d10f      	bne.n	80197dc <stm32l_lowPowerResume+0x34>

			stm32l_lowPowerRestoreGpioConfig();
 80197bc:	f7e9 fac2 	bl	8002d44 <stm32l_lowPowerRestoreGpioConfig>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				HAL_I2C_MspInit(&hi2c2);
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				HAL_SPI_MspInit(&hspi1);
 80197c0:	4808      	ldr	r0, [pc, #32]	; (80197e4 <stm32l_lowPowerResume+0x3c>)
 80197c2:	f7e9 fd9f 	bl	8003304 <HAL_SPI_MspInit>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				HAL_SPI_MspInit(&hspi2);
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				HAL_TIM_Base_MspInit(&htim21);
 80197c6:	4808      	ldr	r0, [pc, #32]	; (80197e8 <stm32l_lowPowerResume+0x40>)
 80197c8:	f7e9 ff70 	bl	80036ac <HAL_TIM_Base_MspInit>
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_ENABLE();
 80197cc:	2380      	movs	r3, #128	; 0x80
 80197ce:	4a07      	ldr	r2, [pc, #28]	; (80197ec <stm32l_lowPowerResume+0x44>)
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80197d4:	430b      	orrs	r3, r1
 80197d6:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 80197d8:	f7ea fb52 	bl	8003e80 <HAL_ADCEx_EnableVREFINT>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 80197dc:	f7ea f91c 	bl	8003a18 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 80197e0:	2000      	movs	r0, #0
 80197e2:	bd10      	pop	{r4, pc}
 80197e4:	20000f74 	.word	0x20000f74
 80197e8:	20000fcc 	.word	0x20000fcc
 80197ec:	40021000 	.word	0x40021000

080197f0 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b086      	sub	sp, #24
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	000a      	movs	r2, r1
 80197fa:	1cbb      	adds	r3, r7, #2
 80197fc:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 80197fe:	2300      	movs	r3, #0
 8019800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8019802:	2300      	movs	r3, #0
 8019804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019806:	2300      	movs	r3, #0
 8019808:	60fb      	str	r3, [r7, #12]

  // Configure the port pins //
  while ((pins >> position) != 0)
 801980a:	e033      	b.n	8019874 <__GpioAnalog+0x84>
  {
    iocurrent = (pins) & (1U << position);
 801980c:	1cbb      	adds	r3, r7, #2
 801980e:	881b      	ldrh	r3, [r3, #0]
 8019810:	2101      	movs	r1, #1
 8019812:	697a      	ldr	r2, [r7, #20]
 8019814:	4091      	lsls	r1, r2
 8019816:	000a      	movs	r2, r1
 8019818:	4013      	ands	r3, r2
 801981a:	613b      	str	r3, [r7, #16]
    if(iocurrent)
 801981c:	693b      	ldr	r3, [r7, #16]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d025      	beq.n	801986e <__GpioAnalog+0x7e>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	005b      	lsls	r3, r3, #1
 801982c:	2203      	movs	r2, #3
 801982e:	409a      	lsls	r2, r3
 8019830:	0013      	movs	r3, r2
 8019832:	43da      	mvns	r2, r3
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	4013      	ands	r3, r2
 8019838:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	005b      	lsls	r3, r3, #1
 801983e:	2203      	movs	r2, #3
 8019840:	409a      	lsls	r2, r3
 8019842:	0013      	movs	r3, r2
 8019844:	68fa      	ldr	r2, [r7, #12]
 8019846:	4313      	orrs	r3, r2
 8019848:	60fb      	str	r3, [r7, #12]
      GPIOx->MODER = temp;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	68fa      	ldr	r2, [r7, #12]
 801984e:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	68db      	ldr	r3, [r3, #12]
 8019854:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019856:	697b      	ldr	r3, [r7, #20]
 8019858:	005b      	lsls	r3, r3, #1
 801985a:	2203      	movs	r2, #3
 801985c:	409a      	lsls	r2, r3
 801985e:	0013      	movs	r3, r2
 8019860:	43da      	mvns	r2, r3
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	4013      	ands	r3, r2
 8019866:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	68fa      	ldr	r2, [r7, #12]
 801986c:	60da      	str	r2, [r3, #12]
    }
    position++;
 801986e:	697b      	ldr	r3, [r7, #20]
 8019870:	3301      	adds	r3, #1
 8019872:	617b      	str	r3, [r7, #20]
  while ((pins >> position) != 0)
 8019874:	1cbb      	adds	r3, r7, #2
 8019876:	881a      	ldrh	r2, [r3, #0]
 8019878:	697b      	ldr	r3, [r7, #20]
 801987a:	411a      	asrs	r2, r3
 801987c:	1e13      	subs	r3, r2, #0
 801987e:	d1c5      	bne.n	801980c <__GpioAnalog+0x1c>
  }
}
 8019880:	46c0      	nop			; (mov r8, r8)
 8019882:	46bd      	mov	sp, r7
 8019884:	b006      	add	sp, #24
 8019886:	bd80      	pop	{r7, pc}

08019888 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 8019888:	b580      	push	{r7, lr}
 801988a:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 801988c:	4a1f      	ldr	r2, [pc, #124]	; (801990c <_stm32l_disableGpios+0x84>)
 801988e:	23a0      	movs	r3, #160	; 0xa0
 8019890:	05db      	lsls	r3, r3, #23
 8019892:	0011      	movs	r1, r2
 8019894:	0018      	movs	r0, r3
 8019896:	f7ff ffab 	bl	80197f0 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 801989a:	4a1d      	ldr	r2, [pc, #116]	; (8019910 <_stm32l_disableGpios+0x88>)
 801989c:	4b1d      	ldr	r3, [pc, #116]	; (8019914 <_stm32l_disableGpios+0x8c>)
 801989e:	0011      	movs	r1, r2
 80198a0:	0018      	movs	r0, r3
 80198a2:	f7ff ffa5 	bl	80197f0 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 80198a6:	4a1c      	ldr	r2, [pc, #112]	; (8019918 <_stm32l_disableGpios+0x90>)
 80198a8:	4b1c      	ldr	r3, [pc, #112]	; (801991c <_stm32l_disableGpios+0x94>)
 80198aa:	0011      	movs	r1, r2
 80198ac:	0018      	movs	r0, r3
 80198ae:	f7ff ff9f 	bl	80197f0 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_C_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOC_CLK_DISABLE();
 80198b2:	4b1b      	ldr	r3, [pc, #108]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198b6:	4b1a      	ldr	r3, [pc, #104]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198b8:	2104      	movs	r1, #4
 80198ba:	438a      	bics	r2, r1
 80198bc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 80198be:	4a16      	ldr	r2, [pc, #88]	; (8019918 <_stm32l_disableGpios+0x90>)
 80198c0:	4b18      	ldr	r3, [pc, #96]	; (8019924 <_stm32l_disableGpios+0x9c>)
 80198c2:	0011      	movs	r1, r2
 80198c4:	0018      	movs	r0, r3
 80198c6:	f7ff ff93 	bl	80197f0 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 80198ca:	4b15      	ldr	r3, [pc, #84]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198ce:	4b14      	ldr	r3, [pc, #80]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198d0:	2108      	movs	r1, #8
 80198d2:	438a      	bics	r2, r1
 80198d4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 80198d6:	4a10      	ldr	r2, [pc, #64]	; (8019918 <_stm32l_disableGpios+0x90>)
 80198d8:	4b13      	ldr	r3, [pc, #76]	; (8019928 <_stm32l_disableGpios+0xa0>)
 80198da:	0011      	movs	r1, r2
 80198dc:	0018      	movs	r0, r3
 80198de:	f7ff ff87 	bl	80197f0 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 80198e2:	4b0f      	ldr	r3, [pc, #60]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198e6:	4b0e      	ldr	r3, [pc, #56]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198e8:	2110      	movs	r1, #16
 80198ea:	438a      	bics	r2, r1
 80198ec:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 80198ee:	4a0f      	ldr	r2, [pc, #60]	; (801992c <_stm32l_disableGpios+0xa4>)
 80198f0:	4b0f      	ldr	r3, [pc, #60]	; (8019930 <_stm32l_disableGpios+0xa8>)
 80198f2:	0011      	movs	r1, r2
 80198f4:	0018      	movs	r0, r3
 80198f6:	f7ff ff7b 	bl	80197f0 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 80198fa:	4b09      	ldr	r3, [pc, #36]	; (8019920 <_stm32l_disableGpios+0x98>)
 80198fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198fe:	4b08      	ldr	r3, [pc, #32]	; (8019920 <_stm32l_disableGpios+0x98>)
 8019900:	2180      	movs	r1, #128	; 0x80
 8019902:	438a      	bics	r2, r1
 8019904:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 8019906:	46c0      	nop			; (mov r8, r8)
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}
 801990c:	0000e0f3 	.word	0x0000e0f3
 8019910:	0000ef5b 	.word	0x0000ef5b
 8019914:	50000400 	.word	0x50000400
 8019918:	0000ffff 	.word	0x0000ffff
 801991c:	50000800 	.word	0x50000800
 8019920:	40021000 	.word	0x40021000
 8019924:	50000c00 	.word	0x50000c00
 8019928:	50001000 	.word	0x50001000
 801992c:	00000603 	.word	0x00000603
 8019930:	50001c00 	.word	0x50001c00

08019934 <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 801993c:	4b03      	ldr	r3, [pc, #12]	; (801994c <HAL_UARTEx_WakeupCallback+0x18>)
 801993e:	2203      	movs	r2, #3
 8019940:	701a      	strb	r2, [r3, #0]
}
 8019942:	46c0      	nop			; (mov r8, r8)
 8019944:	46bd      	mov	sp, r7
 8019946:	b002      	add	sp, #8
 8019948:	bd80      	pop	{r7, pc}
 801994a:	46c0      	nop			; (mov r8, r8)
 801994c:	20000058 	.word	0x20000058

08019950 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 8019950:	b580      	push	{r7, lr}
 8019952:	b082      	sub	sp, #8
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 8019958:	f000 f99a 	bl	8019c90 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d003      	beq.n	801996a <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	0018      	movs	r0, r3
 8019966:	f000 f80d 	bl	8019984 <rtc_runRtcUntil>
	}
}
 801996a:	46c0      	nop			; (mov r8, r8)
 801996c:	46bd      	mov	sp, r7
 801996e:	b002      	add	sp, #8
 8019970:	bd80      	pop	{r7, pc}

08019972 <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 8019972:	b580      	push	{r7, lr}
 8019974:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 8019976:	f000 f85b 	bl	8019a30 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 801997a:	f000 f99b 	bl	8019cb4 <rtc_updateTimeAfterSleepTime>
}
 801997e:	46c0      	nop			; (mov r8, r8)
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}

08019984 <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	0018      	movs	r0, r3
 8019990:	f000 f816 	bl	80199c0 <rtc_getTicksFromDuration>
 8019994:	0003      	movs	r3, r0
 8019996:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	4a08      	ldr	r2, [pc, #32]	; (80199bc <rtc_runRtcUntil+0x38>)
 801999c:	4293      	cmp	r3, r2
 801999e:	d804      	bhi.n	80199aa <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	0018      	movs	r0, r3
 80199a4:	f000 f81c 	bl	80199e0 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 80199a8:	e003      	b.n	80199b2 <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	0018      	movs	r0, r3
 80199ae:	f000 f827 	bl	8019a00 <rtc_runRtcUntilMs>
}
 80199b2:	46c0      	nop			; (mov r8, r8)
 80199b4:	46bd      	mov	sp, r7
 80199b6:	b004      	add	sp, #16
 80199b8:	bd80      	pop	{r7, pc}
 80199ba:	46c0      	nop			; (mov r8, r8)
 80199bc:	0000ffff 	.word	0x0000ffff

080199c0 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b082      	sub	sp, #8
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	02da      	lsls	r2, r3, #11
 80199cc:	23fa      	movs	r3, #250	; 0xfa
 80199ce:	0099      	lsls	r1, r3, #2
 80199d0:	0010      	movs	r0, r2
 80199d2:	f7e6 fba1 	bl	8000118 <__udivsi3>
 80199d6:	0003      	movs	r3, r0
}
 80199d8:	0018      	movs	r0, r3
 80199da:	46bd      	mov	sp, r7
 80199dc:	b002      	add	sp, #8
 80199de:	bd80      	pop	{r7, pc}

080199e0 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b082      	sub	sp, #8
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80199e8:	6879      	ldr	r1, [r7, #4]
 80199ea:	4b04      	ldr	r3, [pc, #16]	; (80199fc <rtc_runRtcUntilTicks+0x1c>)
 80199ec:	2200      	movs	r2, #0
 80199ee:	0018      	movs	r0, r3
 80199f0:	f7ec fb80 	bl	80060f4 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80199f4:	46c0      	nop			; (mov r8, r8)
 80199f6:	46bd      	mov	sp, r7
 80199f8:	b002      	add	sp, #8
 80199fa:	bd80      	pop	{r7, pc}
 80199fc:	20000ef8 	.word	0x20000ef8

08019a00 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b082      	sub	sp, #8
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8019a08:	687a      	ldr	r2, [r7, #4]
 8019a0a:	23fa      	movs	r3, #250	; 0xfa
 8019a0c:	0099      	lsls	r1, r3, #2
 8019a0e:	0010      	movs	r0, r2
 8019a10:	f7e6 fb82 	bl	8000118 <__udivsi3>
 8019a14:	0003      	movs	r3, r0
 8019a16:	0019      	movs	r1, r3
 8019a18:	4b04      	ldr	r3, [pc, #16]	; (8019a2c <rtc_runRtcUntilMs+0x2c>)
 8019a1a:	2204      	movs	r2, #4
 8019a1c:	0018      	movs	r0, r3
 8019a1e:	f7ec fb69 	bl	80060f4 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8019a22:	46c0      	nop			; (mov r8, r8)
 8019a24:	46bd      	mov	sp, r7
 8019a26:	b002      	add	sp, #8
 8019a28:	bd80      	pop	{r7, pc}
 8019a2a:	46c0      	nop			; (mov r8, r8)
 8019a2c:	20000ef8 	.word	0x20000ef8

08019a30 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 8019a30:	b580      	push	{r7, lr}
 8019a32:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8019a34:	4b03      	ldr	r3, [pc, #12]	; (8019a44 <rtc_disableWakeUp+0x14>)
 8019a36:	0018      	movs	r0, r3
 8019a38:	f7ec fc22 	bl	8006280 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8019a3c:	46c0      	nop			; (mov r8, r8)
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}
 8019a42:	46c0      	nop			; (mov r8, r8)
 8019a44:	20000ef8 	.word	0x20000ef8

08019a48 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 8019a48:	b5b0      	push	{r4, r5, r7, lr}
 8019a4a:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 8019a4c:	2001      	movs	r0, #1
 8019a4e:	f000 f807 	bl	8019a60 <rtc_getTimestampMsRaw>
 8019a52:	0003      	movs	r3, r0
 8019a54:	000c      	movs	r4, r1
}
 8019a56:	0018      	movs	r0, r3
 8019a58:	0021      	movs	r1, r4
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019a60 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 8019a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a62:	b095      	sub	sp, #84	; 0x54
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	0003      	movs	r3, r0
 8019a68:	222f      	movs	r2, #47	; 0x2f
 8019a6a:	18ba      	adds	r2, r7, r2
 8019a6c:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 8019a6e:	210c      	movs	r1, #12
 8019a70:	000c      	movs	r4, r1
 8019a72:	2328      	movs	r3, #40	; 0x28
 8019a74:	469c      	mov	ip, r3
 8019a76:	44bc      	add	ip, r7
 8019a78:	4461      	add	r1, ip
 8019a7a:	4b61      	ldr	r3, [pc, #388]	; (8019c00 <rtc_getTimestampMsRaw+0x1a0>)
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	0018      	movs	r0, r3
 8019a80:	f7eb ffa6 	bl	80059d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 8019a84:	2308      	movs	r3, #8
 8019a86:	2028      	movs	r0, #40	; 0x28
 8019a88:	183a      	adds	r2, r7, r0
 8019a8a:	18d1      	adds	r1, r2, r3
 8019a8c:	4b5c      	ldr	r3, [pc, #368]	; (8019c00 <rtc_getTimestampMsRaw+0x1a0>)
 8019a8e:	2200      	movs	r2, #0
 8019a90:	0018      	movs	r0, r3
 8019a92:	f7ec f8a7 	bl	8005be4 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 8019a96:	0021      	movs	r1, r4
 8019a98:	2028      	movs	r0, #40	; 0x28
 8019a9a:	183b      	adds	r3, r7, r0
 8019a9c:	185b      	adds	r3, r3, r1
 8019a9e:	781b      	ldrb	r3, [r3, #0]
 8019aa0:	001a      	movs	r2, r3
 8019aa2:	4b58      	ldr	r3, [pc, #352]	; (8019c04 <rtc_getTimestampMsRaw+0x1a4>)
 8019aa4:	4353      	muls	r3, r2
 8019aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 8019aac:	183a      	adds	r2, r7, r0
 8019aae:	1853      	adds	r3, r2, r1
 8019ab0:	785b      	ldrb	r3, [r3, #1]
 8019ab2:	001a      	movs	r2, r3
 8019ab4:	4b54      	ldr	r3, [pc, #336]	; (8019c08 <rtc_getTimestampMsRaw+0x1a8>)
 8019ab6:	4353      	muls	r3, r2
 8019ab8:	623b      	str	r3, [r7, #32]
 8019aba:	2300      	movs	r3, #0
 8019abc:	627b      	str	r3, [r7, #36]	; 0x24
 8019abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ac0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019ac2:	6a38      	ldr	r0, [r7, #32]
 8019ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ac6:	181b      	adds	r3, r3, r0
 8019ac8:	414c      	adcs	r4, r1
 8019aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8019acc:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 8019ace:	210c      	movs	r1, #12
 8019ad0:	0008      	movs	r0, r1
 8019ad2:	2328      	movs	r3, #40	; 0x28
 8019ad4:	18fa      	adds	r2, r7, r3
 8019ad6:	1853      	adds	r3, r2, r1
 8019ad8:	789b      	ldrb	r3, [r3, #2]
 8019ada:	001a      	movs	r2, r3
 8019adc:	0013      	movs	r3, r2
 8019ade:	015b      	lsls	r3, r3, #5
 8019ae0:	1a9b      	subs	r3, r3, r2
 8019ae2:	009b      	lsls	r3, r3, #2
 8019ae4:	189b      	adds	r3, r3, r2
 8019ae6:	00db      	lsls	r3, r3, #3
 8019ae8:	61bb      	str	r3, [r7, #24]
 8019aea:	2300      	movs	r3, #0
 8019aec:	61fb      	str	r3, [r7, #28]
 8019aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019af0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019af2:	69b9      	ldr	r1, [r7, #24]
 8019af4:	69fa      	ldr	r2, [r7, #28]
 8019af6:	185b      	adds	r3, r3, r1
 8019af8:	4154      	adcs	r4, r2
 8019afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8019afc:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 8019afe:	0001      	movs	r1, r0
 8019b00:	2028      	movs	r0, #40	; 0x28
 8019b02:	183b      	adds	r3, r7, r0
 8019b04:	185b      	adds	r3, r3, r1
 8019b06:	689a      	ldr	r2, [r3, #8]
 8019b08:	183b      	adds	r3, r7, r0
 8019b0a:	185b      	adds	r3, r3, r1
 8019b0c:	685b      	ldr	r3, [r3, #4]
 8019b0e:	1ad2      	subs	r2, r2, r3
 8019b10:	0013      	movs	r3, r2
 8019b12:	015b      	lsls	r3, r3, #5
 8019b14:	1a9b      	subs	r3, r3, r2
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	189b      	adds	r3, r3, r2
 8019b1a:	00db      	lsls	r3, r3, #3
 8019b1c:	001a      	movs	r2, r3
 8019b1e:	183b      	adds	r3, r7, r0
 8019b20:	185b      	adds	r3, r3, r1
 8019b22:	689b      	ldr	r3, [r3, #8]
 8019b24:	0019      	movs	r1, r3
 8019b26:	0010      	movs	r0, r2
 8019b28:	f7e6 faf6 	bl	8000118 <__udivsi3>
 8019b2c:	0003      	movs	r3, r0
 8019b2e:	3301      	adds	r3, #1
 8019b30:	613b      	str	r3, [r7, #16]
 8019b32:	2300      	movs	r3, #0
 8019b34:	617b      	str	r3, [r7, #20]
 8019b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b38:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019b3a:	6939      	ldr	r1, [r7, #16]
 8019b3c:	697a      	ldr	r2, [r7, #20]
 8019b3e:	185b      	adds	r3, r3, r1
 8019b40:	4154      	adcs	r4, r2
 8019b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8019b44:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 8019b46:	4b31      	ldr	r3, [pc, #196]	; (8019c0c <rtc_getTimestampMsRaw+0x1ac>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	001d      	movs	r5, r3
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	001e      	movs	r6, r3
 8019b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b52:	42b3      	cmp	r3, r6
 8019b54:	d305      	bcc.n	8019b62 <rtc_getTimestampMsRaw+0x102>
 8019b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b58:	42b3      	cmp	r3, r6
 8019b5a:	d107      	bne.n	8019b6c <rtc_getTimestampMsRaw+0x10c>
 8019b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b5e:	42ab      	cmp	r3, r5
 8019b60:	d204      	bcs.n	8019b6c <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 8019b62:	4b2b      	ldr	r3, [pc, #172]	; (8019c10 <rtc_getTimestampMsRaw+0x1b0>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	1c5a      	adds	r2, r3, #1
 8019b68:	4b29      	ldr	r3, [pc, #164]	; (8019c10 <rtc_getTimestampMsRaw+0x1b0>)
 8019b6a:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 8019b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019b6e:	4b27      	ldr	r3, [pc, #156]	; (8019c0c <rtc_getTimestampMsRaw+0x1ac>)
 8019b70:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 8019b72:	4b27      	ldr	r3, [pc, #156]	; (8019c10 <rtc_getTimestampMsRaw+0x1b0>)
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	60bb      	str	r3, [r7, #8]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	60fb      	str	r3, [r7, #12]
 8019b7c:	4a25      	ldr	r2, [pc, #148]	; (8019c14 <rtc_getTimestampMsRaw+0x1b4>)
 8019b7e:	2300      	movs	r3, #0
 8019b80:	68b8      	ldr	r0, [r7, #8]
 8019b82:	68f9      	ldr	r1, [r7, #12]
 8019b84:	f7e6 fcc0 	bl	8000508 <__aeabi_lmul>
 8019b88:	0003      	movs	r3, r0
 8019b8a:	000c      	movs	r4, r1
 8019b8c:	0019      	movs	r1, r3
 8019b8e:	0022      	movs	r2, r4
 8019b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b92:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019b94:	185b      	adds	r3, r3, r1
 8019b96:	4154      	adcs	r4, r2
 8019b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8019b9a:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 8019b9c:	232f      	movs	r3, #47	; 0x2f
 8019b9e:	18fb      	adds	r3, r7, r3
 8019ba0:	781b      	ldrb	r3, [r3, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d024      	beq.n	8019bf0 <rtc_getTimestampMsRaw+0x190>
 8019ba6:	4b1c      	ldr	r3, [pc, #112]	; (8019c18 <rtc_getTimestampMsRaw+0x1b8>)
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d020      	beq.n	8019bf0 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 8019bae:	4b1b      	ldr	r3, [pc, #108]	; (8019c1c <rtc_getTimestampMsRaw+0x1bc>)
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	603b      	str	r3, [r7, #0]
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	607b      	str	r3, [r7, #4]
 8019bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bbc:	6838      	ldr	r0, [r7, #0]
 8019bbe:	6879      	ldr	r1, [r7, #4]
 8019bc0:	f7e6 fca2 	bl	8000508 <__aeabi_lmul>
 8019bc4:	0003      	movs	r3, r0
 8019bc6:	000c      	movs	r4, r1
 8019bc8:	0018      	movs	r0, r3
 8019bca:	0021      	movs	r1, r4
 8019bcc:	22fa      	movs	r2, #250	; 0xfa
 8019bce:	0092      	lsls	r2, r2, #2
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	f7e6 fc79 	bl	80004c8 <__aeabi_uldivmod>
 8019bd6:	0003      	movs	r3, r0
 8019bd8:	000c      	movs	r4, r1
 8019bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8019bdc:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 8019bde:	4b10      	ldr	r3, [pc, #64]	; (8019c20 <rtc_getTimestampMsRaw+0x1c0>)
 8019be0:	685c      	ldr	r4, [r3, #4]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019be8:	185b      	adds	r3, r3, r1
 8019bea:	4154      	adcs	r4, r2
 8019bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8019bee:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 8019bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bf2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 8019bf4:	0018      	movs	r0, r3
 8019bf6:	0021      	movs	r1, r4
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	b015      	add	sp, #84	; 0x54
 8019bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bfe:	46c0      	nop			; (mov r8, r8)
 8019c00:	20000ef8 	.word	0x20000ef8
 8019c04:	0036ee80 	.word	0x0036ee80
 8019c08:	0000ea60 	.word	0x0000ea60
 8019c0c:	20000dcc 	.word	0x20000dcc
 8019c10:	20000dc8 	.word	0x20000dc8
 8019c14:	05265c00 	.word	0x05265c00
 8019c18:	20000dc4 	.word	0x20000dc4
 8019c1c:	20001280 	.word	0x20001280
 8019c20:	20001288 	.word	0x20001288

08019c24 <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b086      	sub	sp, #24
 8019c28:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 8019c2a:	2114      	movs	r1, #20
 8019c2c:	187b      	adds	r3, r7, r1
 8019c2e:	2200      	movs	r2, #0
 8019c30:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 8019c32:	187b      	adds	r3, r7, r1
 8019c34:	2201      	movs	r2, #1
 8019c36:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 8019c38:	187b      	adds	r3, r7, r1
 8019c3a:	2201      	movs	r2, #1
 8019c3c:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 8019c3e:	1879      	adds	r1, r7, r1
 8019c40:	4b11      	ldr	r3, [pc, #68]	; (8019c88 <rtc_resetTime+0x64>)
 8019c42:	2200      	movs	r2, #0
 8019c44:	0018      	movs	r0, r3
 8019c46:	f7eb ff1f 	bl	8005a88 <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 8019c4a:	003b      	movs	r3, r7
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 8019c50:	003b      	movs	r3, r7
 8019c52:	2200      	movs	r2, #0
 8019c54:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 8019c56:	003b      	movs	r3, r7
 8019c58:	2200      	movs	r2, #0
 8019c5a:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 8019c5c:	003b      	movs	r3, r7
 8019c5e:	2200      	movs	r2, #0
 8019c60:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8019c62:	003b      	movs	r3, r7
 8019c64:	2200      	movs	r2, #0
 8019c66:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8019c68:	003b      	movs	r3, r7
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 8019c6e:	0039      	movs	r1, r7
 8019c70:	4b05      	ldr	r3, [pc, #20]	; (8019c88 <rtc_resetTime+0x64>)
 8019c72:	2200      	movs	r2, #0
 8019c74:	0018      	movs	r0, r3
 8019c76:	f7eb fde7 	bl	8005848 <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 8019c7a:	4b04      	ldr	r3, [pc, #16]	; (8019c8c <rtc_resetTime+0x68>)
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	601a      	str	r2, [r3, #0]
}
 8019c80:	46c0      	nop			; (mov r8, r8)
 8019c82:	46bd      	mov	sp, r7
 8019c84:	b006      	add	sp, #24
 8019c86:	bd80      	pop	{r7, pc}
 8019c88:	20000ef8 	.word	0x20000ef8
 8019c8c:	20000dcc 	.word	0x20000dcc

08019c90 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 8019c90:	b580      	push	{r7, lr}
 8019c92:	af00      	add	r7, sp, #0
	__enable_systick=false;
 8019c94:	4b05      	ldr	r3, [pc, #20]	; (8019cac <rtc_prepareSleepTime+0x1c>)
 8019c96:	2200      	movs	r2, #0
 8019c98:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8019c9a:	4b05      	ldr	r3, [pc, #20]	; (8019cb0 <rtc_prepareSleepTime+0x20>)
 8019c9c:	681a      	ldr	r2, [r3, #0]
 8019c9e:	4b04      	ldr	r3, [pc, #16]	; (8019cb0 <rtc_prepareSleepTime+0x20>)
 8019ca0:	2104      	movs	r1, #4
 8019ca2:	430a      	orrs	r2, r1
 8019ca4:	601a      	str	r2, [r3, #0]
}
 8019ca6:	46c0      	nop			; (mov r8, r8)
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	20000059 	.word	0x20000059
 8019cb0:	40007000 	.word	0x40007000

08019cb4 <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 8019cb4:	b5b0      	push	{r4, r5, r7, lr}
 8019cb6:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 8019cb8:	f7ff fec6 	bl	8019a48 <rtc_getTimestampMs>
 8019cbc:	0003      	movs	r3, r0
 8019cbe:	000c      	movs	r4, r1
 8019cc0:	0018      	movs	r0, r3
 8019cc2:	0021      	movs	r1, r4
 8019cc4:	f7fe f97e 	bl	8017fc4 <itsdk_time_set_ms>
	__enable_systick=true;
 8019cc8:	4b02      	ldr	r3, [pc, #8]	; (8019cd4 <rtc_updateTimeAfterSleepTime+0x20>)
 8019cca:	2201      	movs	r2, #1
 8019ccc:	701a      	strb	r2, [r3, #0]
}
 8019cce:	46c0      	nop			; (mov r8, r8)
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8019cd4:	20000059 	.word	0x20000059

08019cd8 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b084      	sub	sp, #16
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 8019ce0:	4b0f      	ldr	r3, [pc, #60]	; (8019d20 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8019ce2:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8019ce4:	e00c      	b.n	8019d00 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 8019cec:	68bb      	ldr	r3, [r7, #8]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d003      	beq.n	8019cfa <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 8019cf2:	687a      	ldr	r2, [r7, #4]
 8019cf4:	68bb      	ldr	r3, [r7, #8]
 8019cf6:	0010      	movs	r0, r2
 8019cf8:	4798      	blx	r3
		}
		c = c->next;
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d1ef      	bne.n	8019ce6 <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8019d06:	4b07      	ldr	r3, [pc, #28]	; (8019d24 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8019d08:	681a      	ldr	r2, [r3, #0]
 8019d0a:	4b06      	ldr	r3, [pc, #24]	; (8019d24 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8019d0c:	2104      	movs	r1, #4
 8019d0e:	430a      	orrs	r2, r1
 8019d10:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 8019d12:	4b05      	ldr	r3, [pc, #20]	; (8019d28 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8019d14:	2200      	movs	r2, #0
 8019d16:	701a      	strb	r2, [r3, #0]
}
 8019d18:	46c0      	nop			; (mov r8, r8)
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	b004      	add	sp, #16
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	20000dd0 	.word	0x20000dd0
 8019d24:	40007000 	.word	0x40007000
 8019d28:	20000058 	.word	0x20000058

08019d2c <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 8019d2c:	b590      	push	{r4, r7, lr}
 8019d2e:	b083      	sub	sp, #12
 8019d30:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 8019d32:	f000 f825 	bl	8019d80 <rtc_calcClockRatio>
 8019d36:	0003      	movs	r3, r0
 8019d38:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 8019d3a:	4b0e      	ldr	r3, [pc, #56]	; (8019d74 <rtc_adjustTime+0x48>)
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d009      	beq.n	8019d56 <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 8019d42:	f7ff fe81 	bl	8019a48 <rtc_getTimestampMs>
 8019d46:	0003      	movs	r3, r0
 8019d48:	000c      	movs	r4, r1
 8019d4a:	4a0b      	ldr	r2, [pc, #44]	; (8019d78 <rtc_adjustTime+0x4c>)
 8019d4c:	6013      	str	r3, [r2, #0]
 8019d4e:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 8019d50:	f7ff ff68 	bl	8019c24 <rtc_resetTime>
 8019d54:	e004      	b.n	8019d60 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 8019d56:	4a08      	ldr	r2, [pc, #32]	; (8019d78 <rtc_adjustTime+0x4c>)
 8019d58:	2300      	movs	r3, #0
 8019d5a:	2400      	movs	r4, #0
 8019d5c:	6013      	str	r3, [r2, #0]
 8019d5e:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 8019d60:	4b04      	ldr	r3, [pc, #16]	; (8019d74 <rtc_adjustTime+0x48>)
 8019d62:	2201      	movs	r2, #1
 8019d64:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 8019d66:	4b05      	ldr	r3, [pc, #20]	; (8019d7c <rtc_adjustTime+0x50>)
 8019d68:	687a      	ldr	r2, [r7, #4]
 8019d6a:	601a      	str	r2, [r3, #0]
#endif
}
 8019d6c:	46c0      	nop			; (mov r8, r8)
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	b003      	add	sp, #12
 8019d72:	bd90      	pop	{r4, r7, pc}
 8019d74:	20000dc4 	.word	0x20000dc4
 8019d78:	20001288 	.word	0x20001288
 8019d7c:	20001280 	.word	0x20001280

08019d80 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 8019d80:	b580      	push	{r7, lr}
 8019d82:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 8019d84:	23fa      	movs	r3, #250	; 0xfa
 8019d86:	009b      	lsls	r3, r3, #2
#endif
}
 8019d88:	0018      	movs	r0, r3
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}
	...

08019d90 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 8019d90:	b580      	push	{r7, lr}
 8019d92:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 8019d94:	4b10      	ldr	r3, [pc, #64]	; (8019dd8 <HAL_IncTick+0x48>)
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d011      	beq.n	8019dc0 <HAL_IncTick+0x30>
 8019d9c:	4b0f      	ldr	r3, [pc, #60]	; (8019ddc <HAL_IncTick+0x4c>)
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	0013      	movs	r3, r2
 8019da2:	015b      	lsls	r3, r3, #5
 8019da4:	1a9b      	subs	r3, r3, r2
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	189b      	adds	r3, r3, r2
 8019daa:	009b      	lsls	r3, r3, #2
 8019dac:	001a      	movs	r2, r3
 8019dae:	23fa      	movs	r3, #250	; 0xfa
 8019db0:	0099      	lsls	r1, r3, #2
 8019db2:	0010      	movs	r0, r2
 8019db4:	f7e6 f9b0 	bl	8000118 <__udivsi3>
 8019db8:	0003      	movs	r3, r0
 8019dba:	0018      	movs	r0, r3
 8019dbc:	f7fe f8b4 	bl	8017f28 <itsdk_time_add_us>
	uwTick++;
 8019dc0:	4b07      	ldr	r3, [pc, #28]	; (8019de0 <HAL_IncTick+0x50>)
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	1c5a      	adds	r2, r3, #1
 8019dc6:	4b06      	ldr	r3, [pc, #24]	; (8019de0 <HAL_IncTick+0x50>)
 8019dc8:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 8019dca:	4b06      	ldr	r3, [pc, #24]	; (8019de4 <HAL_IncTick+0x54>)
 8019dcc:	2202      	movs	r2, #2
 8019dce:	701a      	strb	r2, [r3, #0]
}
 8019dd0:	46c0      	nop			; (mov r8, r8)
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	46c0      	nop			; (mov r8, r8)
 8019dd8:	20000059 	.word	0x20000059
 8019ddc:	2000005c 	.word	0x2000005c
 8019de0:	20001088 	.word	0x20001088
 8019de4:	20000058 	.word	0x20000058

08019de8 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 8019de8:	b590      	push	{r4, r7, lr}
 8019dea:	b089      	sub	sp, #36	; 0x24
 8019dec:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 8019dee:	f7fe f935 	bl	801805c <itsdk_time_get_us>
 8019df2:	22fa      	movs	r2, #250	; 0xfa
 8019df4:	0092      	lsls	r2, r2, #2
 8019df6:	2300      	movs	r3, #0
 8019df8:	f7e6 fb66 	bl	80004c8 <__aeabi_uldivmod>
 8019dfc:	0003      	movs	r3, r0
 8019dfe:	000c      	movs	r4, r1
 8019e00:	613b      	str	r3, [r7, #16]
 8019e02:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 8019e04:	2000      	movs	r0, #0
 8019e06:	f7ff fe2b 	bl	8019a60 <rtc_getTimestampMsRaw>
 8019e0a:	0003      	movs	r3, r0
 8019e0c:	000c      	movs	r4, r1
 8019e0e:	60bb      	str	r3, [r7, #8]
 8019e10:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 8019e12:	46c0      	nop			; (mov r8, r8)
 8019e14:	2000      	movs	r0, #0
 8019e16:	f7ff fe23 	bl	8019a60 <rtc_getTimestampMsRaw>
 8019e1a:	000a      	movs	r2, r1
 8019e1c:	0001      	movs	r1, r0
 8019e1e:	68bb      	ldr	r3, [r7, #8]
 8019e20:	68fc      	ldr	r4, [r7, #12]
 8019e22:	1ac9      	subs	r1, r1, r3
 8019e24:	41a2      	sbcs	r2, r4
 8019e26:	000b      	movs	r3, r1
 8019e28:	0014      	movs	r4, r2
 8019e2a:	2c00      	cmp	r4, #0
 8019e2c:	d103      	bne.n	8019e36 <systick_adjustTime+0x4e>
 8019e2e:	d1f1      	bne.n	8019e14 <systick_adjustTime+0x2c>
 8019e30:	2bc7      	cmp	r3, #199	; 0xc7
 8019e32:	d800      	bhi.n	8019e36 <systick_adjustTime+0x4e>
 8019e34:	e7ee      	b.n	8019e14 <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 8019e36:	f7fe f911 	bl	801805c <itsdk_time_get_us>
 8019e3a:	22fa      	movs	r2, #250	; 0xfa
 8019e3c:	0092      	lsls	r2, r2, #2
 8019e3e:	2300      	movs	r3, #0
 8019e40:	f7e6 fb42 	bl	80004c8 <__aeabi_uldivmod>
 8019e44:	0003      	movs	r3, r0
 8019e46:	000c      	movs	r4, r1
 8019e48:	603b      	str	r3, [r7, #0]
 8019e4a:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 8019e4c:	6839      	ldr	r1, [r7, #0]
 8019e4e:	687a      	ldr	r2, [r7, #4]
 8019e50:	693b      	ldr	r3, [r7, #16]
 8019e52:	697c      	ldr	r4, [r7, #20]
 8019e54:	1ac9      	subs	r1, r1, r3
 8019e56:	41a2      	sbcs	r2, r4
 8019e58:	000b      	movs	r3, r1
 8019e5a:	0014      	movs	r4, r2
 8019e5c:	001a      	movs	r2, r3
 8019e5e:	0023      	movs	r3, r4
 8019e60:	4818      	ldr	r0, [pc, #96]	; (8019ec4 <systick_adjustTime+0xdc>)
 8019e62:	2100      	movs	r1, #0
 8019e64:	f7e6 fb30 	bl	80004c8 <__aeabi_uldivmod>
 8019e68:	0003      	movs	r3, r0
 8019e6a:	000c      	movs	r4, r1
 8019e6c:	61bb      	str	r3, [r7, #24]
 8019e6e:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 8019e70:	69fb      	ldr	r3, [r7, #28]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d111      	bne.n	8019e9a <systick_adjustTime+0xb2>
 8019e76:	69fb      	ldr	r3, [r7, #28]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d104      	bne.n	8019e86 <systick_adjustTime+0x9e>
 8019e7c:	69ba      	ldr	r2, [r7, #24]
 8019e7e:	23af      	movs	r3, #175	; 0xaf
 8019e80:	00db      	lsls	r3, r3, #3
 8019e82:	429a      	cmp	r2, r3
 8019e84:	d809      	bhi.n	8019e9a <systick_adjustTime+0xb2>
 8019e86:	69fb      	ldr	r3, [r7, #28]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d113      	bne.n	8019eb4 <systick_adjustTime+0xcc>
 8019e8c:	69fb      	ldr	r3, [r7, #28]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d103      	bne.n	8019e9a <systick_adjustTime+0xb2>
 8019e92:	69bb      	ldr	r3, [r7, #24]
 8019e94:	4a0c      	ldr	r2, [pc, #48]	; (8019ec8 <systick_adjustTime+0xe0>)
 8019e96:	4293      	cmp	r3, r2
 8019e98:	d80c      	bhi.n	8019eb4 <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 8019e9a:	69bb      	ldr	r3, [r7, #24]
 8019e9c:	69fc      	ldr	r4, [r7, #28]
 8019e9e:	b29b      	uxth	r3, r3
 8019ea0:	4a0a      	ldr	r2, [pc, #40]	; (8019ecc <systick_adjustTime+0xe4>)
 8019ea2:	0019      	movs	r1, r3
 8019ea4:	0010      	movs	r0, r2
 8019ea6:	f7fd f869 	bl	8016f7c <itsdk_error_report>
		ratio = 1000;
 8019eaa:	23fa      	movs	r3, #250	; 0xfa
 8019eac:	009b      	lsls	r3, r3, #2
 8019eae:	2400      	movs	r4, #0
 8019eb0:	61bb      	str	r3, [r7, #24]
 8019eb2:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 8019eb4:	69ba      	ldr	r2, [r7, #24]
 8019eb6:	4b06      	ldr	r3, [pc, #24]	; (8019ed0 <systick_adjustTime+0xe8>)
 8019eb8:	601a      	str	r2, [r3, #0]
#endif
}
 8019eba:	46c0      	nop			; (mov r8, r8)
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	b009      	add	sp, #36	; 0x24
 8019ec0:	bd90      	pop	{r4, r7, pc}
 8019ec2:	46c0      	nop			; (mov r8, r8)
 8019ec4:	00030d40 	.word	0x00030d40
 8019ec8:	00000257 	.word	0x00000257
 8019ecc:	90000061 	.word	0x90000061
 8019ed0:	2000005c 	.word	0x2000005c

08019ed4 <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 8019ed4:	b590      	push	{r4, r7, lr}
 8019ed6:	b087      	sub	sp, #28
 8019ed8:	af02      	add	r7, sp, #8
 8019eda:	60f8      	str	r0, [r7, #12]
 8019edc:	60b9      	str	r1, [r7, #8]
 8019ede:	607a      	str	r2, [r7, #4]
 8019ee0:	001a      	movs	r2, r3
 8019ee2:	1cfb      	adds	r3, r7, #3
 8019ee4:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 8019ee6:	1cfb      	adds	r3, r7, #3
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	b29c      	uxth	r4, r3
 8019eec:	687a      	ldr	r2, [r7, #4]
 8019eee:	68b9      	ldr	r1, [r7, #8]
 8019ef0:	68f8      	ldr	r0, [r7, #12]
 8019ef2:	2364      	movs	r3, #100	; 0x64
 8019ef4:	9300      	str	r3, [sp, #0]
 8019ef6:	0023      	movs	r3, r4
 8019ef8:	f7ec fac0 	bl	800647c <HAL_SPI_TransmitReceive>
 8019efc:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 8019efe:	0018      	movs	r0, r3
 8019f00:	46bd      	mov	sp, r7
 8019f02:	b005      	add	sp, #20
 8019f04:	bd90      	pop	{r4, r7, pc}

08019f06 <bzero>:
 8019f06:	b510      	push	{r4, lr}
 8019f08:	000a      	movs	r2, r1
 8019f0a:	2100      	movs	r1, #0
 8019f0c:	f000 f848 	bl	8019fa0 <memset>
 8019f10:	bd10      	pop	{r4, pc}
	...

08019f14 <__errno>:
 8019f14:	4b01      	ldr	r3, [pc, #4]	; (8019f1c <__errno+0x8>)
 8019f16:	6818      	ldr	r0, [r3, #0]
 8019f18:	4770      	bx	lr
 8019f1a:	46c0      	nop			; (mov r8, r8)
 8019f1c:	20000060 	.word	0x20000060

08019f20 <__libc_init_array>:
 8019f20:	b570      	push	{r4, r5, r6, lr}
 8019f22:	2600      	movs	r6, #0
 8019f24:	4d0c      	ldr	r5, [pc, #48]	; (8019f58 <__libc_init_array+0x38>)
 8019f26:	4c0d      	ldr	r4, [pc, #52]	; (8019f5c <__libc_init_array+0x3c>)
 8019f28:	1b64      	subs	r4, r4, r5
 8019f2a:	10a4      	asrs	r4, r4, #2
 8019f2c:	42a6      	cmp	r6, r4
 8019f2e:	d109      	bne.n	8019f44 <__libc_init_array+0x24>
 8019f30:	2600      	movs	r6, #0
 8019f32:	f000 fd8f 	bl	801aa54 <_init>
 8019f36:	4d0a      	ldr	r5, [pc, #40]	; (8019f60 <__libc_init_array+0x40>)
 8019f38:	4c0a      	ldr	r4, [pc, #40]	; (8019f64 <__libc_init_array+0x44>)
 8019f3a:	1b64      	subs	r4, r4, r5
 8019f3c:	10a4      	asrs	r4, r4, #2
 8019f3e:	42a6      	cmp	r6, r4
 8019f40:	d105      	bne.n	8019f4e <__libc_init_array+0x2e>
 8019f42:	bd70      	pop	{r4, r5, r6, pc}
 8019f44:	00b3      	lsls	r3, r6, #2
 8019f46:	58eb      	ldr	r3, [r5, r3]
 8019f48:	4798      	blx	r3
 8019f4a:	3601      	adds	r6, #1
 8019f4c:	e7ee      	b.n	8019f2c <__libc_init_array+0xc>
 8019f4e:	00b3      	lsls	r3, r6, #2
 8019f50:	58eb      	ldr	r3, [r5, r3]
 8019f52:	4798      	blx	r3
 8019f54:	3601      	adds	r6, #1
 8019f56:	e7f2      	b.n	8019f3e <__libc_init_array+0x1e>
 8019f58:	0801c5e0 	.word	0x0801c5e0
 8019f5c:	0801c5e0 	.word	0x0801c5e0
 8019f60:	0801c5e0 	.word	0x0801c5e0
 8019f64:	0801c5e4 	.word	0x0801c5e4

08019f68 <memcpy>:
 8019f68:	2300      	movs	r3, #0
 8019f6a:	b510      	push	{r4, lr}
 8019f6c:	429a      	cmp	r2, r3
 8019f6e:	d100      	bne.n	8019f72 <memcpy+0xa>
 8019f70:	bd10      	pop	{r4, pc}
 8019f72:	5ccc      	ldrb	r4, [r1, r3]
 8019f74:	54c4      	strb	r4, [r0, r3]
 8019f76:	3301      	adds	r3, #1
 8019f78:	e7f8      	b.n	8019f6c <memcpy+0x4>

08019f7a <memmove>:
 8019f7a:	b510      	push	{r4, lr}
 8019f7c:	4288      	cmp	r0, r1
 8019f7e:	d902      	bls.n	8019f86 <memmove+0xc>
 8019f80:	188b      	adds	r3, r1, r2
 8019f82:	4298      	cmp	r0, r3
 8019f84:	d303      	bcc.n	8019f8e <memmove+0x14>
 8019f86:	2300      	movs	r3, #0
 8019f88:	e007      	b.n	8019f9a <memmove+0x20>
 8019f8a:	5c8b      	ldrb	r3, [r1, r2]
 8019f8c:	5483      	strb	r3, [r0, r2]
 8019f8e:	3a01      	subs	r2, #1
 8019f90:	d2fb      	bcs.n	8019f8a <memmove+0x10>
 8019f92:	bd10      	pop	{r4, pc}
 8019f94:	5ccc      	ldrb	r4, [r1, r3]
 8019f96:	54c4      	strb	r4, [r0, r3]
 8019f98:	3301      	adds	r3, #1
 8019f9a:	429a      	cmp	r2, r3
 8019f9c:	d1fa      	bne.n	8019f94 <memmove+0x1a>
 8019f9e:	e7f8      	b.n	8019f92 <memmove+0x18>

08019fa0 <memset>:
 8019fa0:	0003      	movs	r3, r0
 8019fa2:	1812      	adds	r2, r2, r0
 8019fa4:	4293      	cmp	r3, r2
 8019fa6:	d100      	bne.n	8019faa <memset+0xa>
 8019fa8:	4770      	bx	lr
 8019faa:	7019      	strb	r1, [r3, #0]
 8019fac:	3301      	adds	r3, #1
 8019fae:	e7f9      	b.n	8019fa4 <memset+0x4>

08019fb0 <_vsniprintf_r>:
 8019fb0:	b530      	push	{r4, r5, lr}
 8019fb2:	0014      	movs	r4, r2
 8019fb4:	b09b      	sub	sp, #108	; 0x6c
 8019fb6:	0005      	movs	r5, r0
 8019fb8:	001a      	movs	r2, r3
 8019fba:	2c00      	cmp	r4, #0
 8019fbc:	da05      	bge.n	8019fca <_vsniprintf_r+0x1a>
 8019fbe:	238b      	movs	r3, #139	; 0x8b
 8019fc0:	6003      	str	r3, [r0, #0]
 8019fc2:	2001      	movs	r0, #1
 8019fc4:	4240      	negs	r0, r0
 8019fc6:	b01b      	add	sp, #108	; 0x6c
 8019fc8:	bd30      	pop	{r4, r5, pc}
 8019fca:	2382      	movs	r3, #130	; 0x82
 8019fcc:	4668      	mov	r0, sp
 8019fce:	009b      	lsls	r3, r3, #2
 8019fd0:	8183      	strh	r3, [r0, #12]
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	9100      	str	r1, [sp, #0]
 8019fd6:	9104      	str	r1, [sp, #16]
 8019fd8:	429c      	cmp	r4, r3
 8019fda:	d000      	beq.n	8019fde <_vsniprintf_r+0x2e>
 8019fdc:	1e63      	subs	r3, r4, #1
 8019fde:	9302      	str	r3, [sp, #8]
 8019fe0:	9305      	str	r3, [sp, #20]
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	4669      	mov	r1, sp
 8019fe6:	425b      	negs	r3, r3
 8019fe8:	81cb      	strh	r3, [r1, #14]
 8019fea:	0028      	movs	r0, r5
 8019fec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019fee:	f000 f879 	bl	801a0e4 <_svfiprintf_r>
 8019ff2:	1c43      	adds	r3, r0, #1
 8019ff4:	da01      	bge.n	8019ffa <_vsniprintf_r+0x4a>
 8019ff6:	238b      	movs	r3, #139	; 0x8b
 8019ff8:	602b      	str	r3, [r5, #0]
 8019ffa:	2c00      	cmp	r4, #0
 8019ffc:	d0e3      	beq.n	8019fc6 <_vsniprintf_r+0x16>
 8019ffe:	2300      	movs	r3, #0
 801a000:	9a00      	ldr	r2, [sp, #0]
 801a002:	7013      	strb	r3, [r2, #0]
 801a004:	e7df      	b.n	8019fc6 <_vsniprintf_r+0x16>
	...

0801a008 <vsniprintf>:
 801a008:	b507      	push	{r0, r1, r2, lr}
 801a00a:	9300      	str	r3, [sp, #0]
 801a00c:	0013      	movs	r3, r2
 801a00e:	000a      	movs	r2, r1
 801a010:	0001      	movs	r1, r0
 801a012:	4802      	ldr	r0, [pc, #8]	; (801a01c <vsniprintf+0x14>)
 801a014:	6800      	ldr	r0, [r0, #0]
 801a016:	f7ff ffcb 	bl	8019fb0 <_vsniprintf_r>
 801a01a:	bd0e      	pop	{r1, r2, r3, pc}
 801a01c:	20000060 	.word	0x20000060

0801a020 <__ssputs_r>:
 801a020:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a022:	688e      	ldr	r6, [r1, #8]
 801a024:	b085      	sub	sp, #20
 801a026:	0007      	movs	r7, r0
 801a028:	000c      	movs	r4, r1
 801a02a:	9203      	str	r2, [sp, #12]
 801a02c:	9301      	str	r3, [sp, #4]
 801a02e:	429e      	cmp	r6, r3
 801a030:	d83c      	bhi.n	801a0ac <__ssputs_r+0x8c>
 801a032:	2390      	movs	r3, #144	; 0x90
 801a034:	898a      	ldrh	r2, [r1, #12]
 801a036:	00db      	lsls	r3, r3, #3
 801a038:	421a      	tst	r2, r3
 801a03a:	d034      	beq.n	801a0a6 <__ssputs_r+0x86>
 801a03c:	2503      	movs	r5, #3
 801a03e:	6909      	ldr	r1, [r1, #16]
 801a040:	6823      	ldr	r3, [r4, #0]
 801a042:	1a5b      	subs	r3, r3, r1
 801a044:	9302      	str	r3, [sp, #8]
 801a046:	6963      	ldr	r3, [r4, #20]
 801a048:	9802      	ldr	r0, [sp, #8]
 801a04a:	435d      	muls	r5, r3
 801a04c:	0feb      	lsrs	r3, r5, #31
 801a04e:	195d      	adds	r5, r3, r5
 801a050:	9b01      	ldr	r3, [sp, #4]
 801a052:	106d      	asrs	r5, r5, #1
 801a054:	3301      	adds	r3, #1
 801a056:	181b      	adds	r3, r3, r0
 801a058:	42ab      	cmp	r3, r5
 801a05a:	d900      	bls.n	801a05e <__ssputs_r+0x3e>
 801a05c:	001d      	movs	r5, r3
 801a05e:	0553      	lsls	r3, r2, #21
 801a060:	d532      	bpl.n	801a0c8 <__ssputs_r+0xa8>
 801a062:	0029      	movs	r1, r5
 801a064:	0038      	movs	r0, r7
 801a066:	f000 fb07 	bl	801a678 <_malloc_r>
 801a06a:	1e06      	subs	r6, r0, #0
 801a06c:	d109      	bne.n	801a082 <__ssputs_r+0x62>
 801a06e:	230c      	movs	r3, #12
 801a070:	603b      	str	r3, [r7, #0]
 801a072:	2340      	movs	r3, #64	; 0x40
 801a074:	2001      	movs	r0, #1
 801a076:	89a2      	ldrh	r2, [r4, #12]
 801a078:	4240      	negs	r0, r0
 801a07a:	4313      	orrs	r3, r2
 801a07c:	81a3      	strh	r3, [r4, #12]
 801a07e:	b005      	add	sp, #20
 801a080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a082:	9a02      	ldr	r2, [sp, #8]
 801a084:	6921      	ldr	r1, [r4, #16]
 801a086:	f7ff ff6f 	bl	8019f68 <memcpy>
 801a08a:	89a3      	ldrh	r3, [r4, #12]
 801a08c:	4a14      	ldr	r2, [pc, #80]	; (801a0e0 <__ssputs_r+0xc0>)
 801a08e:	401a      	ands	r2, r3
 801a090:	2380      	movs	r3, #128	; 0x80
 801a092:	4313      	orrs	r3, r2
 801a094:	81a3      	strh	r3, [r4, #12]
 801a096:	9b02      	ldr	r3, [sp, #8]
 801a098:	6126      	str	r6, [r4, #16]
 801a09a:	18f6      	adds	r6, r6, r3
 801a09c:	6026      	str	r6, [r4, #0]
 801a09e:	6165      	str	r5, [r4, #20]
 801a0a0:	9e01      	ldr	r6, [sp, #4]
 801a0a2:	1aed      	subs	r5, r5, r3
 801a0a4:	60a5      	str	r5, [r4, #8]
 801a0a6:	9b01      	ldr	r3, [sp, #4]
 801a0a8:	429e      	cmp	r6, r3
 801a0aa:	d900      	bls.n	801a0ae <__ssputs_r+0x8e>
 801a0ac:	9e01      	ldr	r6, [sp, #4]
 801a0ae:	0032      	movs	r2, r6
 801a0b0:	9903      	ldr	r1, [sp, #12]
 801a0b2:	6820      	ldr	r0, [r4, #0]
 801a0b4:	f7ff ff61 	bl	8019f7a <memmove>
 801a0b8:	68a3      	ldr	r3, [r4, #8]
 801a0ba:	2000      	movs	r0, #0
 801a0bc:	1b9b      	subs	r3, r3, r6
 801a0be:	60a3      	str	r3, [r4, #8]
 801a0c0:	6823      	ldr	r3, [r4, #0]
 801a0c2:	199e      	adds	r6, r3, r6
 801a0c4:	6026      	str	r6, [r4, #0]
 801a0c6:	e7da      	b.n	801a07e <__ssputs_r+0x5e>
 801a0c8:	002a      	movs	r2, r5
 801a0ca:	0038      	movs	r0, r7
 801a0cc:	f000 fb32 	bl	801a734 <_realloc_r>
 801a0d0:	1e06      	subs	r6, r0, #0
 801a0d2:	d1e0      	bne.n	801a096 <__ssputs_r+0x76>
 801a0d4:	6921      	ldr	r1, [r4, #16]
 801a0d6:	0038      	movs	r0, r7
 801a0d8:	f000 fa84 	bl	801a5e4 <_free_r>
 801a0dc:	e7c7      	b.n	801a06e <__ssputs_r+0x4e>
 801a0de:	46c0      	nop			; (mov r8, r8)
 801a0e0:	fffffb7f 	.word	0xfffffb7f

0801a0e4 <_svfiprintf_r>:
 801a0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0e6:	b0a1      	sub	sp, #132	; 0x84
 801a0e8:	9003      	str	r0, [sp, #12]
 801a0ea:	001d      	movs	r5, r3
 801a0ec:	898b      	ldrh	r3, [r1, #12]
 801a0ee:	000f      	movs	r7, r1
 801a0f0:	0016      	movs	r6, r2
 801a0f2:	061b      	lsls	r3, r3, #24
 801a0f4:	d511      	bpl.n	801a11a <_svfiprintf_r+0x36>
 801a0f6:	690b      	ldr	r3, [r1, #16]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d10e      	bne.n	801a11a <_svfiprintf_r+0x36>
 801a0fc:	2140      	movs	r1, #64	; 0x40
 801a0fe:	f000 fabb 	bl	801a678 <_malloc_r>
 801a102:	6038      	str	r0, [r7, #0]
 801a104:	6138      	str	r0, [r7, #16]
 801a106:	2800      	cmp	r0, #0
 801a108:	d105      	bne.n	801a116 <_svfiprintf_r+0x32>
 801a10a:	230c      	movs	r3, #12
 801a10c:	9a03      	ldr	r2, [sp, #12]
 801a10e:	3801      	subs	r0, #1
 801a110:	6013      	str	r3, [r2, #0]
 801a112:	b021      	add	sp, #132	; 0x84
 801a114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a116:	2340      	movs	r3, #64	; 0x40
 801a118:	617b      	str	r3, [r7, #20]
 801a11a:	2300      	movs	r3, #0
 801a11c:	ac08      	add	r4, sp, #32
 801a11e:	6163      	str	r3, [r4, #20]
 801a120:	3320      	adds	r3, #32
 801a122:	7663      	strb	r3, [r4, #25]
 801a124:	3310      	adds	r3, #16
 801a126:	76a3      	strb	r3, [r4, #26]
 801a128:	9507      	str	r5, [sp, #28]
 801a12a:	0035      	movs	r5, r6
 801a12c:	782b      	ldrb	r3, [r5, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d001      	beq.n	801a136 <_svfiprintf_r+0x52>
 801a132:	2b25      	cmp	r3, #37	; 0x25
 801a134:	d146      	bne.n	801a1c4 <_svfiprintf_r+0xe0>
 801a136:	1bab      	subs	r3, r5, r6
 801a138:	9305      	str	r3, [sp, #20]
 801a13a:	d00c      	beq.n	801a156 <_svfiprintf_r+0x72>
 801a13c:	0032      	movs	r2, r6
 801a13e:	0039      	movs	r1, r7
 801a140:	9803      	ldr	r0, [sp, #12]
 801a142:	f7ff ff6d 	bl	801a020 <__ssputs_r>
 801a146:	1c43      	adds	r3, r0, #1
 801a148:	d100      	bne.n	801a14c <_svfiprintf_r+0x68>
 801a14a:	e0ae      	b.n	801a2aa <_svfiprintf_r+0x1c6>
 801a14c:	6962      	ldr	r2, [r4, #20]
 801a14e:	9b05      	ldr	r3, [sp, #20]
 801a150:	4694      	mov	ip, r2
 801a152:	4463      	add	r3, ip
 801a154:	6163      	str	r3, [r4, #20]
 801a156:	782b      	ldrb	r3, [r5, #0]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d100      	bne.n	801a15e <_svfiprintf_r+0x7a>
 801a15c:	e0a5      	b.n	801a2aa <_svfiprintf_r+0x1c6>
 801a15e:	2201      	movs	r2, #1
 801a160:	2300      	movs	r3, #0
 801a162:	4252      	negs	r2, r2
 801a164:	6062      	str	r2, [r4, #4]
 801a166:	a904      	add	r1, sp, #16
 801a168:	3254      	adds	r2, #84	; 0x54
 801a16a:	1852      	adds	r2, r2, r1
 801a16c:	1c6e      	adds	r6, r5, #1
 801a16e:	6023      	str	r3, [r4, #0]
 801a170:	60e3      	str	r3, [r4, #12]
 801a172:	60a3      	str	r3, [r4, #8]
 801a174:	7013      	strb	r3, [r2, #0]
 801a176:	65a3      	str	r3, [r4, #88]	; 0x58
 801a178:	7831      	ldrb	r1, [r6, #0]
 801a17a:	2205      	movs	r2, #5
 801a17c:	4853      	ldr	r0, [pc, #332]	; (801a2cc <_svfiprintf_r+0x1e8>)
 801a17e:	f000 fa25 	bl	801a5cc <memchr>
 801a182:	1c75      	adds	r5, r6, #1
 801a184:	2800      	cmp	r0, #0
 801a186:	d11f      	bne.n	801a1c8 <_svfiprintf_r+0xe4>
 801a188:	6822      	ldr	r2, [r4, #0]
 801a18a:	06d3      	lsls	r3, r2, #27
 801a18c:	d504      	bpl.n	801a198 <_svfiprintf_r+0xb4>
 801a18e:	2353      	movs	r3, #83	; 0x53
 801a190:	a904      	add	r1, sp, #16
 801a192:	185b      	adds	r3, r3, r1
 801a194:	2120      	movs	r1, #32
 801a196:	7019      	strb	r1, [r3, #0]
 801a198:	0713      	lsls	r3, r2, #28
 801a19a:	d504      	bpl.n	801a1a6 <_svfiprintf_r+0xc2>
 801a19c:	2353      	movs	r3, #83	; 0x53
 801a19e:	a904      	add	r1, sp, #16
 801a1a0:	185b      	adds	r3, r3, r1
 801a1a2:	212b      	movs	r1, #43	; 0x2b
 801a1a4:	7019      	strb	r1, [r3, #0]
 801a1a6:	7833      	ldrb	r3, [r6, #0]
 801a1a8:	2b2a      	cmp	r3, #42	; 0x2a
 801a1aa:	d016      	beq.n	801a1da <_svfiprintf_r+0xf6>
 801a1ac:	0035      	movs	r5, r6
 801a1ae:	2100      	movs	r1, #0
 801a1b0:	200a      	movs	r0, #10
 801a1b2:	68e3      	ldr	r3, [r4, #12]
 801a1b4:	782a      	ldrb	r2, [r5, #0]
 801a1b6:	1c6e      	adds	r6, r5, #1
 801a1b8:	3a30      	subs	r2, #48	; 0x30
 801a1ba:	2a09      	cmp	r2, #9
 801a1bc:	d94e      	bls.n	801a25c <_svfiprintf_r+0x178>
 801a1be:	2900      	cmp	r1, #0
 801a1c0:	d018      	beq.n	801a1f4 <_svfiprintf_r+0x110>
 801a1c2:	e010      	b.n	801a1e6 <_svfiprintf_r+0x102>
 801a1c4:	3501      	adds	r5, #1
 801a1c6:	e7b1      	b.n	801a12c <_svfiprintf_r+0x48>
 801a1c8:	4b40      	ldr	r3, [pc, #256]	; (801a2cc <_svfiprintf_r+0x1e8>)
 801a1ca:	6822      	ldr	r2, [r4, #0]
 801a1cc:	1ac0      	subs	r0, r0, r3
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	4083      	lsls	r3, r0
 801a1d2:	4313      	orrs	r3, r2
 801a1d4:	6023      	str	r3, [r4, #0]
 801a1d6:	002e      	movs	r6, r5
 801a1d8:	e7ce      	b.n	801a178 <_svfiprintf_r+0x94>
 801a1da:	9b07      	ldr	r3, [sp, #28]
 801a1dc:	1d19      	adds	r1, r3, #4
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	9107      	str	r1, [sp, #28]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	db01      	blt.n	801a1ea <_svfiprintf_r+0x106>
 801a1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1e8:	e004      	b.n	801a1f4 <_svfiprintf_r+0x110>
 801a1ea:	425b      	negs	r3, r3
 801a1ec:	60e3      	str	r3, [r4, #12]
 801a1ee:	2302      	movs	r3, #2
 801a1f0:	4313      	orrs	r3, r2
 801a1f2:	6023      	str	r3, [r4, #0]
 801a1f4:	782b      	ldrb	r3, [r5, #0]
 801a1f6:	2b2e      	cmp	r3, #46	; 0x2e
 801a1f8:	d10a      	bne.n	801a210 <_svfiprintf_r+0x12c>
 801a1fa:	786b      	ldrb	r3, [r5, #1]
 801a1fc:	2b2a      	cmp	r3, #42	; 0x2a
 801a1fe:	d135      	bne.n	801a26c <_svfiprintf_r+0x188>
 801a200:	9b07      	ldr	r3, [sp, #28]
 801a202:	3502      	adds	r5, #2
 801a204:	1d1a      	adds	r2, r3, #4
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	9207      	str	r2, [sp, #28]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	db2b      	blt.n	801a266 <_svfiprintf_r+0x182>
 801a20e:	9309      	str	r3, [sp, #36]	; 0x24
 801a210:	4e2f      	ldr	r6, [pc, #188]	; (801a2d0 <_svfiprintf_r+0x1ec>)
 801a212:	7829      	ldrb	r1, [r5, #0]
 801a214:	2203      	movs	r2, #3
 801a216:	0030      	movs	r0, r6
 801a218:	f000 f9d8 	bl	801a5cc <memchr>
 801a21c:	2800      	cmp	r0, #0
 801a21e:	d006      	beq.n	801a22e <_svfiprintf_r+0x14a>
 801a220:	2340      	movs	r3, #64	; 0x40
 801a222:	1b80      	subs	r0, r0, r6
 801a224:	4083      	lsls	r3, r0
 801a226:	6822      	ldr	r2, [r4, #0]
 801a228:	3501      	adds	r5, #1
 801a22a:	4313      	orrs	r3, r2
 801a22c:	6023      	str	r3, [r4, #0]
 801a22e:	7829      	ldrb	r1, [r5, #0]
 801a230:	2206      	movs	r2, #6
 801a232:	4828      	ldr	r0, [pc, #160]	; (801a2d4 <_svfiprintf_r+0x1f0>)
 801a234:	1c6e      	adds	r6, r5, #1
 801a236:	7621      	strb	r1, [r4, #24]
 801a238:	f000 f9c8 	bl	801a5cc <memchr>
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d03c      	beq.n	801a2ba <_svfiprintf_r+0x1d6>
 801a240:	4b25      	ldr	r3, [pc, #148]	; (801a2d8 <_svfiprintf_r+0x1f4>)
 801a242:	2b00      	cmp	r3, #0
 801a244:	d125      	bne.n	801a292 <_svfiprintf_r+0x1ae>
 801a246:	2207      	movs	r2, #7
 801a248:	9b07      	ldr	r3, [sp, #28]
 801a24a:	3307      	adds	r3, #7
 801a24c:	4393      	bics	r3, r2
 801a24e:	3308      	adds	r3, #8
 801a250:	9307      	str	r3, [sp, #28]
 801a252:	6963      	ldr	r3, [r4, #20]
 801a254:	9a04      	ldr	r2, [sp, #16]
 801a256:	189b      	adds	r3, r3, r2
 801a258:	6163      	str	r3, [r4, #20]
 801a25a:	e766      	b.n	801a12a <_svfiprintf_r+0x46>
 801a25c:	4343      	muls	r3, r0
 801a25e:	2101      	movs	r1, #1
 801a260:	189b      	adds	r3, r3, r2
 801a262:	0035      	movs	r5, r6
 801a264:	e7a6      	b.n	801a1b4 <_svfiprintf_r+0xd0>
 801a266:	2301      	movs	r3, #1
 801a268:	425b      	negs	r3, r3
 801a26a:	e7d0      	b.n	801a20e <_svfiprintf_r+0x12a>
 801a26c:	2300      	movs	r3, #0
 801a26e:	200a      	movs	r0, #10
 801a270:	001a      	movs	r2, r3
 801a272:	3501      	adds	r5, #1
 801a274:	6063      	str	r3, [r4, #4]
 801a276:	7829      	ldrb	r1, [r5, #0]
 801a278:	1c6e      	adds	r6, r5, #1
 801a27a:	3930      	subs	r1, #48	; 0x30
 801a27c:	2909      	cmp	r1, #9
 801a27e:	d903      	bls.n	801a288 <_svfiprintf_r+0x1a4>
 801a280:	2b00      	cmp	r3, #0
 801a282:	d0c5      	beq.n	801a210 <_svfiprintf_r+0x12c>
 801a284:	9209      	str	r2, [sp, #36]	; 0x24
 801a286:	e7c3      	b.n	801a210 <_svfiprintf_r+0x12c>
 801a288:	4342      	muls	r2, r0
 801a28a:	2301      	movs	r3, #1
 801a28c:	1852      	adds	r2, r2, r1
 801a28e:	0035      	movs	r5, r6
 801a290:	e7f1      	b.n	801a276 <_svfiprintf_r+0x192>
 801a292:	ab07      	add	r3, sp, #28
 801a294:	9300      	str	r3, [sp, #0]
 801a296:	003a      	movs	r2, r7
 801a298:	4b10      	ldr	r3, [pc, #64]	; (801a2dc <_svfiprintf_r+0x1f8>)
 801a29a:	0021      	movs	r1, r4
 801a29c:	9803      	ldr	r0, [sp, #12]
 801a29e:	e000      	b.n	801a2a2 <_svfiprintf_r+0x1be>
 801a2a0:	bf00      	nop
 801a2a2:	9004      	str	r0, [sp, #16]
 801a2a4:	9b04      	ldr	r3, [sp, #16]
 801a2a6:	3301      	adds	r3, #1
 801a2a8:	d1d3      	bne.n	801a252 <_svfiprintf_r+0x16e>
 801a2aa:	89bb      	ldrh	r3, [r7, #12]
 801a2ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a2ae:	065b      	lsls	r3, r3, #25
 801a2b0:	d400      	bmi.n	801a2b4 <_svfiprintf_r+0x1d0>
 801a2b2:	e72e      	b.n	801a112 <_svfiprintf_r+0x2e>
 801a2b4:	2001      	movs	r0, #1
 801a2b6:	4240      	negs	r0, r0
 801a2b8:	e72b      	b.n	801a112 <_svfiprintf_r+0x2e>
 801a2ba:	ab07      	add	r3, sp, #28
 801a2bc:	9300      	str	r3, [sp, #0]
 801a2be:	003a      	movs	r2, r7
 801a2c0:	4b06      	ldr	r3, [pc, #24]	; (801a2dc <_svfiprintf_r+0x1f8>)
 801a2c2:	0021      	movs	r1, r4
 801a2c4:	9803      	ldr	r0, [sp, #12]
 801a2c6:	f000 f879 	bl	801a3bc <_printf_i>
 801a2ca:	e7ea      	b.n	801a2a2 <_svfiprintf_r+0x1be>
 801a2cc:	0801c544 	.word	0x0801c544
 801a2d0:	0801c54a 	.word	0x0801c54a
 801a2d4:	0801c54e 	.word	0x0801c54e
 801a2d8:	00000000 	.word	0x00000000
 801a2dc:	0801a021 	.word	0x0801a021

0801a2e0 <_printf_common>:
 801a2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2e2:	0015      	movs	r5, r2
 801a2e4:	9301      	str	r3, [sp, #4]
 801a2e6:	688a      	ldr	r2, [r1, #8]
 801a2e8:	690b      	ldr	r3, [r1, #16]
 801a2ea:	9000      	str	r0, [sp, #0]
 801a2ec:	000c      	movs	r4, r1
 801a2ee:	4293      	cmp	r3, r2
 801a2f0:	da00      	bge.n	801a2f4 <_printf_common+0x14>
 801a2f2:	0013      	movs	r3, r2
 801a2f4:	0022      	movs	r2, r4
 801a2f6:	602b      	str	r3, [r5, #0]
 801a2f8:	3243      	adds	r2, #67	; 0x43
 801a2fa:	7812      	ldrb	r2, [r2, #0]
 801a2fc:	2a00      	cmp	r2, #0
 801a2fe:	d001      	beq.n	801a304 <_printf_common+0x24>
 801a300:	3301      	adds	r3, #1
 801a302:	602b      	str	r3, [r5, #0]
 801a304:	6823      	ldr	r3, [r4, #0]
 801a306:	069b      	lsls	r3, r3, #26
 801a308:	d502      	bpl.n	801a310 <_printf_common+0x30>
 801a30a:	682b      	ldr	r3, [r5, #0]
 801a30c:	3302      	adds	r3, #2
 801a30e:	602b      	str	r3, [r5, #0]
 801a310:	2706      	movs	r7, #6
 801a312:	6823      	ldr	r3, [r4, #0]
 801a314:	401f      	ands	r7, r3
 801a316:	d027      	beq.n	801a368 <_printf_common+0x88>
 801a318:	0023      	movs	r3, r4
 801a31a:	3343      	adds	r3, #67	; 0x43
 801a31c:	781b      	ldrb	r3, [r3, #0]
 801a31e:	1e5a      	subs	r2, r3, #1
 801a320:	4193      	sbcs	r3, r2
 801a322:	6822      	ldr	r2, [r4, #0]
 801a324:	0692      	lsls	r2, r2, #26
 801a326:	d430      	bmi.n	801a38a <_printf_common+0xaa>
 801a328:	0022      	movs	r2, r4
 801a32a:	9901      	ldr	r1, [sp, #4]
 801a32c:	3243      	adds	r2, #67	; 0x43
 801a32e:	9800      	ldr	r0, [sp, #0]
 801a330:	9e08      	ldr	r6, [sp, #32]
 801a332:	47b0      	blx	r6
 801a334:	1c43      	adds	r3, r0, #1
 801a336:	d025      	beq.n	801a384 <_printf_common+0xa4>
 801a338:	2306      	movs	r3, #6
 801a33a:	6820      	ldr	r0, [r4, #0]
 801a33c:	682a      	ldr	r2, [r5, #0]
 801a33e:	68e1      	ldr	r1, [r4, #12]
 801a340:	4003      	ands	r3, r0
 801a342:	2500      	movs	r5, #0
 801a344:	2b04      	cmp	r3, #4
 801a346:	d103      	bne.n	801a350 <_printf_common+0x70>
 801a348:	1a8d      	subs	r5, r1, r2
 801a34a:	43eb      	mvns	r3, r5
 801a34c:	17db      	asrs	r3, r3, #31
 801a34e:	401d      	ands	r5, r3
 801a350:	68a3      	ldr	r3, [r4, #8]
 801a352:	6922      	ldr	r2, [r4, #16]
 801a354:	4293      	cmp	r3, r2
 801a356:	dd01      	ble.n	801a35c <_printf_common+0x7c>
 801a358:	1a9b      	subs	r3, r3, r2
 801a35a:	18ed      	adds	r5, r5, r3
 801a35c:	2700      	movs	r7, #0
 801a35e:	42bd      	cmp	r5, r7
 801a360:	d120      	bne.n	801a3a4 <_printf_common+0xc4>
 801a362:	2000      	movs	r0, #0
 801a364:	e010      	b.n	801a388 <_printf_common+0xa8>
 801a366:	3701      	adds	r7, #1
 801a368:	68e3      	ldr	r3, [r4, #12]
 801a36a:	682a      	ldr	r2, [r5, #0]
 801a36c:	1a9b      	subs	r3, r3, r2
 801a36e:	42bb      	cmp	r3, r7
 801a370:	ddd2      	ble.n	801a318 <_printf_common+0x38>
 801a372:	0022      	movs	r2, r4
 801a374:	2301      	movs	r3, #1
 801a376:	3219      	adds	r2, #25
 801a378:	9901      	ldr	r1, [sp, #4]
 801a37a:	9800      	ldr	r0, [sp, #0]
 801a37c:	9e08      	ldr	r6, [sp, #32]
 801a37e:	47b0      	blx	r6
 801a380:	1c43      	adds	r3, r0, #1
 801a382:	d1f0      	bne.n	801a366 <_printf_common+0x86>
 801a384:	2001      	movs	r0, #1
 801a386:	4240      	negs	r0, r0
 801a388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a38a:	2030      	movs	r0, #48	; 0x30
 801a38c:	18e1      	adds	r1, r4, r3
 801a38e:	3143      	adds	r1, #67	; 0x43
 801a390:	7008      	strb	r0, [r1, #0]
 801a392:	0021      	movs	r1, r4
 801a394:	1c5a      	adds	r2, r3, #1
 801a396:	3145      	adds	r1, #69	; 0x45
 801a398:	7809      	ldrb	r1, [r1, #0]
 801a39a:	18a2      	adds	r2, r4, r2
 801a39c:	3243      	adds	r2, #67	; 0x43
 801a39e:	3302      	adds	r3, #2
 801a3a0:	7011      	strb	r1, [r2, #0]
 801a3a2:	e7c1      	b.n	801a328 <_printf_common+0x48>
 801a3a4:	0022      	movs	r2, r4
 801a3a6:	2301      	movs	r3, #1
 801a3a8:	321a      	adds	r2, #26
 801a3aa:	9901      	ldr	r1, [sp, #4]
 801a3ac:	9800      	ldr	r0, [sp, #0]
 801a3ae:	9e08      	ldr	r6, [sp, #32]
 801a3b0:	47b0      	blx	r6
 801a3b2:	1c43      	adds	r3, r0, #1
 801a3b4:	d0e6      	beq.n	801a384 <_printf_common+0xa4>
 801a3b6:	3701      	adds	r7, #1
 801a3b8:	e7d1      	b.n	801a35e <_printf_common+0x7e>
	...

0801a3bc <_printf_i>:
 801a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3be:	b089      	sub	sp, #36	; 0x24
 801a3c0:	9204      	str	r2, [sp, #16]
 801a3c2:	000a      	movs	r2, r1
 801a3c4:	3243      	adds	r2, #67	; 0x43
 801a3c6:	9305      	str	r3, [sp, #20]
 801a3c8:	9003      	str	r0, [sp, #12]
 801a3ca:	9202      	str	r2, [sp, #8]
 801a3cc:	7e0a      	ldrb	r2, [r1, #24]
 801a3ce:	000c      	movs	r4, r1
 801a3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3d2:	2a6e      	cmp	r2, #110	; 0x6e
 801a3d4:	d100      	bne.n	801a3d8 <_printf_i+0x1c>
 801a3d6:	e086      	b.n	801a4e6 <_printf_i+0x12a>
 801a3d8:	d81f      	bhi.n	801a41a <_printf_i+0x5e>
 801a3da:	2a63      	cmp	r2, #99	; 0x63
 801a3dc:	d033      	beq.n	801a446 <_printf_i+0x8a>
 801a3de:	d808      	bhi.n	801a3f2 <_printf_i+0x36>
 801a3e0:	2a00      	cmp	r2, #0
 801a3e2:	d100      	bne.n	801a3e6 <_printf_i+0x2a>
 801a3e4:	e08c      	b.n	801a500 <_printf_i+0x144>
 801a3e6:	2a58      	cmp	r2, #88	; 0x58
 801a3e8:	d04d      	beq.n	801a486 <_printf_i+0xca>
 801a3ea:	0025      	movs	r5, r4
 801a3ec:	3542      	adds	r5, #66	; 0x42
 801a3ee:	702a      	strb	r2, [r5, #0]
 801a3f0:	e030      	b.n	801a454 <_printf_i+0x98>
 801a3f2:	2a64      	cmp	r2, #100	; 0x64
 801a3f4:	d001      	beq.n	801a3fa <_printf_i+0x3e>
 801a3f6:	2a69      	cmp	r2, #105	; 0x69
 801a3f8:	d1f7      	bne.n	801a3ea <_printf_i+0x2e>
 801a3fa:	6819      	ldr	r1, [r3, #0]
 801a3fc:	6825      	ldr	r5, [r4, #0]
 801a3fe:	1d0a      	adds	r2, r1, #4
 801a400:	0628      	lsls	r0, r5, #24
 801a402:	d529      	bpl.n	801a458 <_printf_i+0x9c>
 801a404:	6808      	ldr	r0, [r1, #0]
 801a406:	601a      	str	r2, [r3, #0]
 801a408:	2800      	cmp	r0, #0
 801a40a:	da03      	bge.n	801a414 <_printf_i+0x58>
 801a40c:	232d      	movs	r3, #45	; 0x2d
 801a40e:	9a02      	ldr	r2, [sp, #8]
 801a410:	4240      	negs	r0, r0
 801a412:	7013      	strb	r3, [r2, #0]
 801a414:	4e6b      	ldr	r6, [pc, #428]	; (801a5c4 <_printf_i+0x208>)
 801a416:	270a      	movs	r7, #10
 801a418:	e04f      	b.n	801a4ba <_printf_i+0xfe>
 801a41a:	2a73      	cmp	r2, #115	; 0x73
 801a41c:	d074      	beq.n	801a508 <_printf_i+0x14c>
 801a41e:	d808      	bhi.n	801a432 <_printf_i+0x76>
 801a420:	2a6f      	cmp	r2, #111	; 0x6f
 801a422:	d01f      	beq.n	801a464 <_printf_i+0xa8>
 801a424:	2a70      	cmp	r2, #112	; 0x70
 801a426:	d1e0      	bne.n	801a3ea <_printf_i+0x2e>
 801a428:	2220      	movs	r2, #32
 801a42a:	6809      	ldr	r1, [r1, #0]
 801a42c:	430a      	orrs	r2, r1
 801a42e:	6022      	str	r2, [r4, #0]
 801a430:	e003      	b.n	801a43a <_printf_i+0x7e>
 801a432:	2a75      	cmp	r2, #117	; 0x75
 801a434:	d016      	beq.n	801a464 <_printf_i+0xa8>
 801a436:	2a78      	cmp	r2, #120	; 0x78
 801a438:	d1d7      	bne.n	801a3ea <_printf_i+0x2e>
 801a43a:	0022      	movs	r2, r4
 801a43c:	2178      	movs	r1, #120	; 0x78
 801a43e:	3245      	adds	r2, #69	; 0x45
 801a440:	7011      	strb	r1, [r2, #0]
 801a442:	4e61      	ldr	r6, [pc, #388]	; (801a5c8 <_printf_i+0x20c>)
 801a444:	e022      	b.n	801a48c <_printf_i+0xd0>
 801a446:	0025      	movs	r5, r4
 801a448:	681a      	ldr	r2, [r3, #0]
 801a44a:	3542      	adds	r5, #66	; 0x42
 801a44c:	1d11      	adds	r1, r2, #4
 801a44e:	6019      	str	r1, [r3, #0]
 801a450:	6813      	ldr	r3, [r2, #0]
 801a452:	702b      	strb	r3, [r5, #0]
 801a454:	2301      	movs	r3, #1
 801a456:	e065      	b.n	801a524 <_printf_i+0x168>
 801a458:	6808      	ldr	r0, [r1, #0]
 801a45a:	601a      	str	r2, [r3, #0]
 801a45c:	0669      	lsls	r1, r5, #25
 801a45e:	d5d3      	bpl.n	801a408 <_printf_i+0x4c>
 801a460:	b200      	sxth	r0, r0
 801a462:	e7d1      	b.n	801a408 <_printf_i+0x4c>
 801a464:	6819      	ldr	r1, [r3, #0]
 801a466:	6825      	ldr	r5, [r4, #0]
 801a468:	1d08      	adds	r0, r1, #4
 801a46a:	6018      	str	r0, [r3, #0]
 801a46c:	6808      	ldr	r0, [r1, #0]
 801a46e:	062e      	lsls	r6, r5, #24
 801a470:	d505      	bpl.n	801a47e <_printf_i+0xc2>
 801a472:	4e54      	ldr	r6, [pc, #336]	; (801a5c4 <_printf_i+0x208>)
 801a474:	2708      	movs	r7, #8
 801a476:	2a6f      	cmp	r2, #111	; 0x6f
 801a478:	d01b      	beq.n	801a4b2 <_printf_i+0xf6>
 801a47a:	270a      	movs	r7, #10
 801a47c:	e019      	b.n	801a4b2 <_printf_i+0xf6>
 801a47e:	066d      	lsls	r5, r5, #25
 801a480:	d5f7      	bpl.n	801a472 <_printf_i+0xb6>
 801a482:	b280      	uxth	r0, r0
 801a484:	e7f5      	b.n	801a472 <_printf_i+0xb6>
 801a486:	3145      	adds	r1, #69	; 0x45
 801a488:	4e4e      	ldr	r6, [pc, #312]	; (801a5c4 <_printf_i+0x208>)
 801a48a:	700a      	strb	r2, [r1, #0]
 801a48c:	6818      	ldr	r0, [r3, #0]
 801a48e:	6822      	ldr	r2, [r4, #0]
 801a490:	1d01      	adds	r1, r0, #4
 801a492:	6800      	ldr	r0, [r0, #0]
 801a494:	6019      	str	r1, [r3, #0]
 801a496:	0615      	lsls	r5, r2, #24
 801a498:	d521      	bpl.n	801a4de <_printf_i+0x122>
 801a49a:	07d3      	lsls	r3, r2, #31
 801a49c:	d502      	bpl.n	801a4a4 <_printf_i+0xe8>
 801a49e:	2320      	movs	r3, #32
 801a4a0:	431a      	orrs	r2, r3
 801a4a2:	6022      	str	r2, [r4, #0]
 801a4a4:	2710      	movs	r7, #16
 801a4a6:	2800      	cmp	r0, #0
 801a4a8:	d103      	bne.n	801a4b2 <_printf_i+0xf6>
 801a4aa:	2320      	movs	r3, #32
 801a4ac:	6822      	ldr	r2, [r4, #0]
 801a4ae:	439a      	bics	r2, r3
 801a4b0:	6022      	str	r2, [r4, #0]
 801a4b2:	0023      	movs	r3, r4
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	3343      	adds	r3, #67	; 0x43
 801a4b8:	701a      	strb	r2, [r3, #0]
 801a4ba:	6863      	ldr	r3, [r4, #4]
 801a4bc:	60a3      	str	r3, [r4, #8]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	db58      	blt.n	801a574 <_printf_i+0x1b8>
 801a4c2:	2204      	movs	r2, #4
 801a4c4:	6821      	ldr	r1, [r4, #0]
 801a4c6:	4391      	bics	r1, r2
 801a4c8:	6021      	str	r1, [r4, #0]
 801a4ca:	2800      	cmp	r0, #0
 801a4cc:	d154      	bne.n	801a578 <_printf_i+0x1bc>
 801a4ce:	9d02      	ldr	r5, [sp, #8]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d05a      	beq.n	801a58a <_printf_i+0x1ce>
 801a4d4:	0025      	movs	r5, r4
 801a4d6:	7833      	ldrb	r3, [r6, #0]
 801a4d8:	3542      	adds	r5, #66	; 0x42
 801a4da:	702b      	strb	r3, [r5, #0]
 801a4dc:	e055      	b.n	801a58a <_printf_i+0x1ce>
 801a4de:	0655      	lsls	r5, r2, #25
 801a4e0:	d5db      	bpl.n	801a49a <_printf_i+0xde>
 801a4e2:	b280      	uxth	r0, r0
 801a4e4:	e7d9      	b.n	801a49a <_printf_i+0xde>
 801a4e6:	681a      	ldr	r2, [r3, #0]
 801a4e8:	680d      	ldr	r5, [r1, #0]
 801a4ea:	1d10      	adds	r0, r2, #4
 801a4ec:	6949      	ldr	r1, [r1, #20]
 801a4ee:	6018      	str	r0, [r3, #0]
 801a4f0:	6813      	ldr	r3, [r2, #0]
 801a4f2:	062e      	lsls	r6, r5, #24
 801a4f4:	d501      	bpl.n	801a4fa <_printf_i+0x13e>
 801a4f6:	6019      	str	r1, [r3, #0]
 801a4f8:	e002      	b.n	801a500 <_printf_i+0x144>
 801a4fa:	066d      	lsls	r5, r5, #25
 801a4fc:	d5fb      	bpl.n	801a4f6 <_printf_i+0x13a>
 801a4fe:	8019      	strh	r1, [r3, #0]
 801a500:	2300      	movs	r3, #0
 801a502:	9d02      	ldr	r5, [sp, #8]
 801a504:	6123      	str	r3, [r4, #16]
 801a506:	e04f      	b.n	801a5a8 <_printf_i+0x1ec>
 801a508:	681a      	ldr	r2, [r3, #0]
 801a50a:	1d11      	adds	r1, r2, #4
 801a50c:	6019      	str	r1, [r3, #0]
 801a50e:	6815      	ldr	r5, [r2, #0]
 801a510:	2100      	movs	r1, #0
 801a512:	6862      	ldr	r2, [r4, #4]
 801a514:	0028      	movs	r0, r5
 801a516:	f000 f859 	bl	801a5cc <memchr>
 801a51a:	2800      	cmp	r0, #0
 801a51c:	d001      	beq.n	801a522 <_printf_i+0x166>
 801a51e:	1b40      	subs	r0, r0, r5
 801a520:	6060      	str	r0, [r4, #4]
 801a522:	6863      	ldr	r3, [r4, #4]
 801a524:	6123      	str	r3, [r4, #16]
 801a526:	2300      	movs	r3, #0
 801a528:	9a02      	ldr	r2, [sp, #8]
 801a52a:	7013      	strb	r3, [r2, #0]
 801a52c:	e03c      	b.n	801a5a8 <_printf_i+0x1ec>
 801a52e:	6923      	ldr	r3, [r4, #16]
 801a530:	002a      	movs	r2, r5
 801a532:	9904      	ldr	r1, [sp, #16]
 801a534:	9803      	ldr	r0, [sp, #12]
 801a536:	9d05      	ldr	r5, [sp, #20]
 801a538:	47a8      	blx	r5
 801a53a:	1c43      	adds	r3, r0, #1
 801a53c:	d03e      	beq.n	801a5bc <_printf_i+0x200>
 801a53e:	6823      	ldr	r3, [r4, #0]
 801a540:	079b      	lsls	r3, r3, #30
 801a542:	d415      	bmi.n	801a570 <_printf_i+0x1b4>
 801a544:	9b07      	ldr	r3, [sp, #28]
 801a546:	68e0      	ldr	r0, [r4, #12]
 801a548:	4298      	cmp	r0, r3
 801a54a:	da39      	bge.n	801a5c0 <_printf_i+0x204>
 801a54c:	0018      	movs	r0, r3
 801a54e:	e037      	b.n	801a5c0 <_printf_i+0x204>
 801a550:	0022      	movs	r2, r4
 801a552:	2301      	movs	r3, #1
 801a554:	3219      	adds	r2, #25
 801a556:	9904      	ldr	r1, [sp, #16]
 801a558:	9803      	ldr	r0, [sp, #12]
 801a55a:	9e05      	ldr	r6, [sp, #20]
 801a55c:	47b0      	blx	r6
 801a55e:	1c43      	adds	r3, r0, #1
 801a560:	d02c      	beq.n	801a5bc <_printf_i+0x200>
 801a562:	3501      	adds	r5, #1
 801a564:	68e3      	ldr	r3, [r4, #12]
 801a566:	9a07      	ldr	r2, [sp, #28]
 801a568:	1a9b      	subs	r3, r3, r2
 801a56a:	42ab      	cmp	r3, r5
 801a56c:	dcf0      	bgt.n	801a550 <_printf_i+0x194>
 801a56e:	e7e9      	b.n	801a544 <_printf_i+0x188>
 801a570:	2500      	movs	r5, #0
 801a572:	e7f7      	b.n	801a564 <_printf_i+0x1a8>
 801a574:	2800      	cmp	r0, #0
 801a576:	d0ad      	beq.n	801a4d4 <_printf_i+0x118>
 801a578:	9d02      	ldr	r5, [sp, #8]
 801a57a:	0039      	movs	r1, r7
 801a57c:	f7e5 fe52 	bl	8000224 <__aeabi_uidivmod>
 801a580:	5c73      	ldrb	r3, [r6, r1]
 801a582:	3d01      	subs	r5, #1
 801a584:	702b      	strb	r3, [r5, #0]
 801a586:	2800      	cmp	r0, #0
 801a588:	d1f7      	bne.n	801a57a <_printf_i+0x1be>
 801a58a:	2f08      	cmp	r7, #8
 801a58c:	d109      	bne.n	801a5a2 <_printf_i+0x1e6>
 801a58e:	6823      	ldr	r3, [r4, #0]
 801a590:	07db      	lsls	r3, r3, #31
 801a592:	d506      	bpl.n	801a5a2 <_printf_i+0x1e6>
 801a594:	6863      	ldr	r3, [r4, #4]
 801a596:	6922      	ldr	r2, [r4, #16]
 801a598:	4293      	cmp	r3, r2
 801a59a:	dc02      	bgt.n	801a5a2 <_printf_i+0x1e6>
 801a59c:	2330      	movs	r3, #48	; 0x30
 801a59e:	3d01      	subs	r5, #1
 801a5a0:	702b      	strb	r3, [r5, #0]
 801a5a2:	9b02      	ldr	r3, [sp, #8]
 801a5a4:	1b5b      	subs	r3, r3, r5
 801a5a6:	6123      	str	r3, [r4, #16]
 801a5a8:	9b05      	ldr	r3, [sp, #20]
 801a5aa:	aa07      	add	r2, sp, #28
 801a5ac:	9300      	str	r3, [sp, #0]
 801a5ae:	0021      	movs	r1, r4
 801a5b0:	9b04      	ldr	r3, [sp, #16]
 801a5b2:	9803      	ldr	r0, [sp, #12]
 801a5b4:	f7ff fe94 	bl	801a2e0 <_printf_common>
 801a5b8:	1c43      	adds	r3, r0, #1
 801a5ba:	d1b8      	bne.n	801a52e <_printf_i+0x172>
 801a5bc:	2001      	movs	r0, #1
 801a5be:	4240      	negs	r0, r0
 801a5c0:	b009      	add	sp, #36	; 0x24
 801a5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5c4:	0801c555 	.word	0x0801c555
 801a5c8:	0801c566 	.word	0x0801c566

0801a5cc <memchr>:
 801a5cc:	b2c9      	uxtb	r1, r1
 801a5ce:	1882      	adds	r2, r0, r2
 801a5d0:	4290      	cmp	r0, r2
 801a5d2:	d101      	bne.n	801a5d8 <memchr+0xc>
 801a5d4:	2000      	movs	r0, #0
 801a5d6:	4770      	bx	lr
 801a5d8:	7803      	ldrb	r3, [r0, #0]
 801a5da:	428b      	cmp	r3, r1
 801a5dc:	d0fb      	beq.n	801a5d6 <memchr+0xa>
 801a5de:	3001      	adds	r0, #1
 801a5e0:	e7f6      	b.n	801a5d0 <memchr+0x4>
	...

0801a5e4 <_free_r>:
 801a5e4:	b570      	push	{r4, r5, r6, lr}
 801a5e6:	0005      	movs	r5, r0
 801a5e8:	2900      	cmp	r1, #0
 801a5ea:	d010      	beq.n	801a60e <_free_r+0x2a>
 801a5ec:	1f0c      	subs	r4, r1, #4
 801a5ee:	6823      	ldr	r3, [r4, #0]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	da00      	bge.n	801a5f6 <_free_r+0x12>
 801a5f4:	18e4      	adds	r4, r4, r3
 801a5f6:	0028      	movs	r0, r5
 801a5f8:	f000 f8d4 	bl	801a7a4 <__malloc_lock>
 801a5fc:	4a1d      	ldr	r2, [pc, #116]	; (801a674 <_free_r+0x90>)
 801a5fe:	6813      	ldr	r3, [r2, #0]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d105      	bne.n	801a610 <_free_r+0x2c>
 801a604:	6063      	str	r3, [r4, #4]
 801a606:	6014      	str	r4, [r2, #0]
 801a608:	0028      	movs	r0, r5
 801a60a:	f000 f8cc 	bl	801a7a6 <__malloc_unlock>
 801a60e:	bd70      	pop	{r4, r5, r6, pc}
 801a610:	42a3      	cmp	r3, r4
 801a612:	d909      	bls.n	801a628 <_free_r+0x44>
 801a614:	6821      	ldr	r1, [r4, #0]
 801a616:	1860      	adds	r0, r4, r1
 801a618:	4283      	cmp	r3, r0
 801a61a:	d1f3      	bne.n	801a604 <_free_r+0x20>
 801a61c:	6818      	ldr	r0, [r3, #0]
 801a61e:	685b      	ldr	r3, [r3, #4]
 801a620:	1841      	adds	r1, r0, r1
 801a622:	6021      	str	r1, [r4, #0]
 801a624:	e7ee      	b.n	801a604 <_free_r+0x20>
 801a626:	0013      	movs	r3, r2
 801a628:	685a      	ldr	r2, [r3, #4]
 801a62a:	2a00      	cmp	r2, #0
 801a62c:	d001      	beq.n	801a632 <_free_r+0x4e>
 801a62e:	42a2      	cmp	r2, r4
 801a630:	d9f9      	bls.n	801a626 <_free_r+0x42>
 801a632:	6819      	ldr	r1, [r3, #0]
 801a634:	1858      	adds	r0, r3, r1
 801a636:	42a0      	cmp	r0, r4
 801a638:	d10b      	bne.n	801a652 <_free_r+0x6e>
 801a63a:	6820      	ldr	r0, [r4, #0]
 801a63c:	1809      	adds	r1, r1, r0
 801a63e:	1858      	adds	r0, r3, r1
 801a640:	6019      	str	r1, [r3, #0]
 801a642:	4282      	cmp	r2, r0
 801a644:	d1e0      	bne.n	801a608 <_free_r+0x24>
 801a646:	6810      	ldr	r0, [r2, #0]
 801a648:	6852      	ldr	r2, [r2, #4]
 801a64a:	1841      	adds	r1, r0, r1
 801a64c:	6019      	str	r1, [r3, #0]
 801a64e:	605a      	str	r2, [r3, #4]
 801a650:	e7da      	b.n	801a608 <_free_r+0x24>
 801a652:	42a0      	cmp	r0, r4
 801a654:	d902      	bls.n	801a65c <_free_r+0x78>
 801a656:	230c      	movs	r3, #12
 801a658:	602b      	str	r3, [r5, #0]
 801a65a:	e7d5      	b.n	801a608 <_free_r+0x24>
 801a65c:	6821      	ldr	r1, [r4, #0]
 801a65e:	1860      	adds	r0, r4, r1
 801a660:	4282      	cmp	r2, r0
 801a662:	d103      	bne.n	801a66c <_free_r+0x88>
 801a664:	6810      	ldr	r0, [r2, #0]
 801a666:	6852      	ldr	r2, [r2, #4]
 801a668:	1841      	adds	r1, r0, r1
 801a66a:	6021      	str	r1, [r4, #0]
 801a66c:	6062      	str	r2, [r4, #4]
 801a66e:	605c      	str	r4, [r3, #4]
 801a670:	e7ca      	b.n	801a608 <_free_r+0x24>
 801a672:	46c0      	nop			; (mov r8, r8)
 801a674:	20000dd8 	.word	0x20000dd8

0801a678 <_malloc_r>:
 801a678:	2303      	movs	r3, #3
 801a67a:	b570      	push	{r4, r5, r6, lr}
 801a67c:	1ccd      	adds	r5, r1, #3
 801a67e:	439d      	bics	r5, r3
 801a680:	3508      	adds	r5, #8
 801a682:	0006      	movs	r6, r0
 801a684:	2d0c      	cmp	r5, #12
 801a686:	d21e      	bcs.n	801a6c6 <_malloc_r+0x4e>
 801a688:	250c      	movs	r5, #12
 801a68a:	42a9      	cmp	r1, r5
 801a68c:	d81d      	bhi.n	801a6ca <_malloc_r+0x52>
 801a68e:	0030      	movs	r0, r6
 801a690:	f000 f888 	bl	801a7a4 <__malloc_lock>
 801a694:	4a25      	ldr	r2, [pc, #148]	; (801a72c <_malloc_r+0xb4>)
 801a696:	6814      	ldr	r4, [r2, #0]
 801a698:	0021      	movs	r1, r4
 801a69a:	2900      	cmp	r1, #0
 801a69c:	d119      	bne.n	801a6d2 <_malloc_r+0x5a>
 801a69e:	4c24      	ldr	r4, [pc, #144]	; (801a730 <_malloc_r+0xb8>)
 801a6a0:	6823      	ldr	r3, [r4, #0]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d103      	bne.n	801a6ae <_malloc_r+0x36>
 801a6a6:	0030      	movs	r0, r6
 801a6a8:	f000 f86a 	bl	801a780 <_sbrk_r>
 801a6ac:	6020      	str	r0, [r4, #0]
 801a6ae:	0029      	movs	r1, r5
 801a6b0:	0030      	movs	r0, r6
 801a6b2:	f000 f865 	bl	801a780 <_sbrk_r>
 801a6b6:	1c43      	adds	r3, r0, #1
 801a6b8:	d12b      	bne.n	801a712 <_malloc_r+0x9a>
 801a6ba:	230c      	movs	r3, #12
 801a6bc:	0030      	movs	r0, r6
 801a6be:	6033      	str	r3, [r6, #0]
 801a6c0:	f000 f871 	bl	801a7a6 <__malloc_unlock>
 801a6c4:	e003      	b.n	801a6ce <_malloc_r+0x56>
 801a6c6:	2d00      	cmp	r5, #0
 801a6c8:	dadf      	bge.n	801a68a <_malloc_r+0x12>
 801a6ca:	230c      	movs	r3, #12
 801a6cc:	6033      	str	r3, [r6, #0]
 801a6ce:	2000      	movs	r0, #0
 801a6d0:	bd70      	pop	{r4, r5, r6, pc}
 801a6d2:	680b      	ldr	r3, [r1, #0]
 801a6d4:	1b5b      	subs	r3, r3, r5
 801a6d6:	d419      	bmi.n	801a70c <_malloc_r+0x94>
 801a6d8:	2b0b      	cmp	r3, #11
 801a6da:	d903      	bls.n	801a6e4 <_malloc_r+0x6c>
 801a6dc:	600b      	str	r3, [r1, #0]
 801a6de:	18cc      	adds	r4, r1, r3
 801a6e0:	6025      	str	r5, [r4, #0]
 801a6e2:	e003      	b.n	801a6ec <_malloc_r+0x74>
 801a6e4:	684b      	ldr	r3, [r1, #4]
 801a6e6:	428c      	cmp	r4, r1
 801a6e8:	d10d      	bne.n	801a706 <_malloc_r+0x8e>
 801a6ea:	6013      	str	r3, [r2, #0]
 801a6ec:	0030      	movs	r0, r6
 801a6ee:	f000 f85a 	bl	801a7a6 <__malloc_unlock>
 801a6f2:	0020      	movs	r0, r4
 801a6f4:	2207      	movs	r2, #7
 801a6f6:	300b      	adds	r0, #11
 801a6f8:	1d23      	adds	r3, r4, #4
 801a6fa:	4390      	bics	r0, r2
 801a6fc:	1ac3      	subs	r3, r0, r3
 801a6fe:	d0e7      	beq.n	801a6d0 <_malloc_r+0x58>
 801a700:	425a      	negs	r2, r3
 801a702:	50e2      	str	r2, [r4, r3]
 801a704:	e7e4      	b.n	801a6d0 <_malloc_r+0x58>
 801a706:	6063      	str	r3, [r4, #4]
 801a708:	000c      	movs	r4, r1
 801a70a:	e7ef      	b.n	801a6ec <_malloc_r+0x74>
 801a70c:	000c      	movs	r4, r1
 801a70e:	6849      	ldr	r1, [r1, #4]
 801a710:	e7c3      	b.n	801a69a <_malloc_r+0x22>
 801a712:	2303      	movs	r3, #3
 801a714:	1cc4      	adds	r4, r0, #3
 801a716:	439c      	bics	r4, r3
 801a718:	42a0      	cmp	r0, r4
 801a71a:	d0e1      	beq.n	801a6e0 <_malloc_r+0x68>
 801a71c:	1a21      	subs	r1, r4, r0
 801a71e:	0030      	movs	r0, r6
 801a720:	f000 f82e 	bl	801a780 <_sbrk_r>
 801a724:	1c43      	adds	r3, r0, #1
 801a726:	d1db      	bne.n	801a6e0 <_malloc_r+0x68>
 801a728:	e7c7      	b.n	801a6ba <_malloc_r+0x42>
 801a72a:	46c0      	nop			; (mov r8, r8)
 801a72c:	20000dd8 	.word	0x20000dd8
 801a730:	20000ddc 	.word	0x20000ddc

0801a734 <_realloc_r>:
 801a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a736:	0007      	movs	r7, r0
 801a738:	000d      	movs	r5, r1
 801a73a:	0016      	movs	r6, r2
 801a73c:	2900      	cmp	r1, #0
 801a73e:	d105      	bne.n	801a74c <_realloc_r+0x18>
 801a740:	0011      	movs	r1, r2
 801a742:	f7ff ff99 	bl	801a678 <_malloc_r>
 801a746:	0004      	movs	r4, r0
 801a748:	0020      	movs	r0, r4
 801a74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a74c:	2a00      	cmp	r2, #0
 801a74e:	d103      	bne.n	801a758 <_realloc_r+0x24>
 801a750:	f7ff ff48 	bl	801a5e4 <_free_r>
 801a754:	0034      	movs	r4, r6
 801a756:	e7f7      	b.n	801a748 <_realloc_r+0x14>
 801a758:	f000 f826 	bl	801a7a8 <_malloc_usable_size_r>
 801a75c:	002c      	movs	r4, r5
 801a75e:	42b0      	cmp	r0, r6
 801a760:	d2f2      	bcs.n	801a748 <_realloc_r+0x14>
 801a762:	0031      	movs	r1, r6
 801a764:	0038      	movs	r0, r7
 801a766:	f7ff ff87 	bl	801a678 <_malloc_r>
 801a76a:	1e04      	subs	r4, r0, #0
 801a76c:	d0ec      	beq.n	801a748 <_realloc_r+0x14>
 801a76e:	0029      	movs	r1, r5
 801a770:	0032      	movs	r2, r6
 801a772:	f7ff fbf9 	bl	8019f68 <memcpy>
 801a776:	0029      	movs	r1, r5
 801a778:	0038      	movs	r0, r7
 801a77a:	f7ff ff33 	bl	801a5e4 <_free_r>
 801a77e:	e7e3      	b.n	801a748 <_realloc_r+0x14>

0801a780 <_sbrk_r>:
 801a780:	2300      	movs	r3, #0
 801a782:	b570      	push	{r4, r5, r6, lr}
 801a784:	4c06      	ldr	r4, [pc, #24]	; (801a7a0 <_sbrk_r+0x20>)
 801a786:	0005      	movs	r5, r0
 801a788:	0008      	movs	r0, r1
 801a78a:	6023      	str	r3, [r4, #0]
 801a78c:	f7e8 ff1a 	bl	80035c4 <_sbrk>
 801a790:	1c43      	adds	r3, r0, #1
 801a792:	d103      	bne.n	801a79c <_sbrk_r+0x1c>
 801a794:	6823      	ldr	r3, [r4, #0]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d000      	beq.n	801a79c <_sbrk_r+0x1c>
 801a79a:	602b      	str	r3, [r5, #0]
 801a79c:	bd70      	pop	{r4, r5, r6, pc}
 801a79e:	46c0      	nop			; (mov r8, r8)
 801a7a0:	20001290 	.word	0x20001290

0801a7a4 <__malloc_lock>:
 801a7a4:	4770      	bx	lr

0801a7a6 <__malloc_unlock>:
 801a7a6:	4770      	bx	lr

0801a7a8 <_malloc_usable_size_r>:
 801a7a8:	1f0b      	subs	r3, r1, #4
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	1f18      	subs	r0, r3, #4
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	da01      	bge.n	801a7b6 <_malloc_usable_size_r+0xe>
 801a7b2:	580b      	ldr	r3, [r1, r0]
 801a7b4:	18c0      	adds	r0, r0, r3
 801a7b6:	4770      	bx	lr

0801a7b8 <ceil>:
 801a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7ba:	004b      	lsls	r3, r1, #1
 801a7bc:	4a39      	ldr	r2, [pc, #228]	; (801a8a4 <ceil+0xec>)
 801a7be:	0d5b      	lsrs	r3, r3, #21
 801a7c0:	b085      	sub	sp, #20
 801a7c2:	189e      	adds	r6, r3, r2
 801a7c4:	000c      	movs	r4, r1
 801a7c6:	0005      	movs	r5, r0
 801a7c8:	9003      	str	r0, [sp, #12]
 801a7ca:	2e13      	cmp	r6, #19
 801a7cc:	dc32      	bgt.n	801a834 <ceil+0x7c>
 801a7ce:	2e00      	cmp	r6, #0
 801a7d0:	da13      	bge.n	801a7fa <ceil+0x42>
 801a7d2:	4a35      	ldr	r2, [pc, #212]	; (801a8a8 <ceil+0xf0>)
 801a7d4:	4b35      	ldr	r3, [pc, #212]	; (801a8ac <ceil+0xf4>)
 801a7d6:	f7e6 f9c1 	bl	8000b5c <__aeabi_dadd>
 801a7da:	2200      	movs	r2, #0
 801a7dc:	2300      	movs	r3, #0
 801a7de:	f7e5 fe3b 	bl	8000458 <__aeabi_dcmpgt>
 801a7e2:	2800      	cmp	r0, #0
 801a7e4:	d006      	beq.n	801a7f4 <ceil+0x3c>
 801a7e6:	2c00      	cmp	r4, #0
 801a7e8:	db57      	blt.n	801a89a <ceil+0xe2>
 801a7ea:	432c      	orrs	r4, r5
 801a7ec:	2500      	movs	r5, #0
 801a7ee:	42ac      	cmp	r4, r5
 801a7f0:	d000      	beq.n	801a7f4 <ceil+0x3c>
 801a7f2:	4c2f      	ldr	r4, [pc, #188]	; (801a8b0 <ceil+0xf8>)
 801a7f4:	0028      	movs	r0, r5
 801a7f6:	0021      	movs	r1, r4
 801a7f8:	e026      	b.n	801a848 <ceil+0x90>
 801a7fa:	4f2e      	ldr	r7, [pc, #184]	; (801a8b4 <ceil+0xfc>)
 801a7fc:	4137      	asrs	r7, r6
 801a7fe:	003b      	movs	r3, r7
 801a800:	400b      	ands	r3, r1
 801a802:	4303      	orrs	r3, r0
 801a804:	d020      	beq.n	801a848 <ceil+0x90>
 801a806:	9000      	str	r0, [sp, #0]
 801a808:	9101      	str	r1, [sp, #4]
 801a80a:	4a27      	ldr	r2, [pc, #156]	; (801a8a8 <ceil+0xf0>)
 801a80c:	4b27      	ldr	r3, [pc, #156]	; (801a8ac <ceil+0xf4>)
 801a80e:	9800      	ldr	r0, [sp, #0]
 801a810:	9901      	ldr	r1, [sp, #4]
 801a812:	f7e6 f9a3 	bl	8000b5c <__aeabi_dadd>
 801a816:	2200      	movs	r2, #0
 801a818:	2300      	movs	r3, #0
 801a81a:	f7e5 fe1d 	bl	8000458 <__aeabi_dcmpgt>
 801a81e:	2800      	cmp	r0, #0
 801a820:	d0e8      	beq.n	801a7f4 <ceil+0x3c>
 801a822:	2c00      	cmp	r4, #0
 801a824:	dd03      	ble.n	801a82e <ceil+0x76>
 801a826:	2380      	movs	r3, #128	; 0x80
 801a828:	035b      	lsls	r3, r3, #13
 801a82a:	4133      	asrs	r3, r6
 801a82c:	18e4      	adds	r4, r4, r3
 801a82e:	43bc      	bics	r4, r7
 801a830:	2500      	movs	r5, #0
 801a832:	e7df      	b.n	801a7f4 <ceil+0x3c>
 801a834:	2e33      	cmp	r6, #51	; 0x33
 801a836:	dd09      	ble.n	801a84c <ceil+0x94>
 801a838:	2380      	movs	r3, #128	; 0x80
 801a83a:	00db      	lsls	r3, r3, #3
 801a83c:	429e      	cmp	r6, r3
 801a83e:	d103      	bne.n	801a848 <ceil+0x90>
 801a840:	0002      	movs	r2, r0
 801a842:	000b      	movs	r3, r1
 801a844:	f7e6 f98a 	bl	8000b5c <__aeabi_dadd>
 801a848:	b005      	add	sp, #20
 801a84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a84c:	2701      	movs	r7, #1
 801a84e:	4a1a      	ldr	r2, [pc, #104]	; (801a8b8 <ceil+0x100>)
 801a850:	427f      	negs	r7, r7
 801a852:	189b      	adds	r3, r3, r2
 801a854:	40df      	lsrs	r7, r3
 801a856:	4238      	tst	r0, r7
 801a858:	d0f6      	beq.n	801a848 <ceil+0x90>
 801a85a:	9000      	str	r0, [sp, #0]
 801a85c:	9101      	str	r1, [sp, #4]
 801a85e:	4a12      	ldr	r2, [pc, #72]	; (801a8a8 <ceil+0xf0>)
 801a860:	4b12      	ldr	r3, [pc, #72]	; (801a8ac <ceil+0xf4>)
 801a862:	9800      	ldr	r0, [sp, #0]
 801a864:	9901      	ldr	r1, [sp, #4]
 801a866:	f7e6 f979 	bl	8000b5c <__aeabi_dadd>
 801a86a:	2200      	movs	r2, #0
 801a86c:	2300      	movs	r3, #0
 801a86e:	f7e5 fdf3 	bl	8000458 <__aeabi_dcmpgt>
 801a872:	2800      	cmp	r0, #0
 801a874:	d0be      	beq.n	801a7f4 <ceil+0x3c>
 801a876:	2c00      	cmp	r4, #0
 801a878:	dd02      	ble.n	801a880 <ceil+0xc8>
 801a87a:	2e14      	cmp	r6, #20
 801a87c:	d102      	bne.n	801a884 <ceil+0xcc>
 801a87e:	3401      	adds	r4, #1
 801a880:	43bd      	bics	r5, r7
 801a882:	e7b7      	b.n	801a7f4 <ceil+0x3c>
 801a884:	2334      	movs	r3, #52	; 0x34
 801a886:	1b9e      	subs	r6, r3, r6
 801a888:	3b33      	subs	r3, #51	; 0x33
 801a88a:	40b3      	lsls	r3, r6
 801a88c:	18ed      	adds	r5, r5, r3
 801a88e:	9b03      	ldr	r3, [sp, #12]
 801a890:	429d      	cmp	r5, r3
 801a892:	419b      	sbcs	r3, r3
 801a894:	425b      	negs	r3, r3
 801a896:	18e4      	adds	r4, r4, r3
 801a898:	e7f2      	b.n	801a880 <ceil+0xc8>
 801a89a:	2480      	movs	r4, #128	; 0x80
 801a89c:	2500      	movs	r5, #0
 801a89e:	0624      	lsls	r4, r4, #24
 801a8a0:	e7a8      	b.n	801a7f4 <ceil+0x3c>
 801a8a2:	46c0      	nop			; (mov r8, r8)
 801a8a4:	fffffc01 	.word	0xfffffc01
 801a8a8:	8800759c 	.word	0x8800759c
 801a8ac:	7e37e43c 	.word	0x7e37e43c
 801a8b0:	3ff00000 	.word	0x3ff00000
 801a8b4:	000fffff 	.word	0x000fffff
 801a8b8:	fffffbed 	.word	0xfffffbed

0801a8bc <floor>:
 801a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8be:	004b      	lsls	r3, r1, #1
 801a8c0:	4a39      	ldr	r2, [pc, #228]	; (801a9a8 <floor+0xec>)
 801a8c2:	0d5b      	lsrs	r3, r3, #21
 801a8c4:	b085      	sub	sp, #20
 801a8c6:	189e      	adds	r6, r3, r2
 801a8c8:	000c      	movs	r4, r1
 801a8ca:	0005      	movs	r5, r0
 801a8cc:	9003      	str	r0, [sp, #12]
 801a8ce:	2e13      	cmp	r6, #19
 801a8d0:	dc34      	bgt.n	801a93c <floor+0x80>
 801a8d2:	2e00      	cmp	r6, #0
 801a8d4:	da15      	bge.n	801a902 <floor+0x46>
 801a8d6:	4a35      	ldr	r2, [pc, #212]	; (801a9ac <floor+0xf0>)
 801a8d8:	4b35      	ldr	r3, [pc, #212]	; (801a9b0 <floor+0xf4>)
 801a8da:	f7e6 f93f 	bl	8000b5c <__aeabi_dadd>
 801a8de:	2200      	movs	r2, #0
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	f7e5 fdb9 	bl	8000458 <__aeabi_dcmpgt>
 801a8e6:	2800      	cmp	r0, #0
 801a8e8:	d008      	beq.n	801a8fc <floor+0x40>
 801a8ea:	2c00      	cmp	r4, #0
 801a8ec:	da59      	bge.n	801a9a2 <floor+0xe6>
 801a8ee:	0063      	lsls	r3, r4, #1
 801a8f0:	085b      	lsrs	r3, r3, #1
 801a8f2:	432b      	orrs	r3, r5
 801a8f4:	2500      	movs	r5, #0
 801a8f6:	42ab      	cmp	r3, r5
 801a8f8:	d000      	beq.n	801a8fc <floor+0x40>
 801a8fa:	4c2e      	ldr	r4, [pc, #184]	; (801a9b4 <floor+0xf8>)
 801a8fc:	0028      	movs	r0, r5
 801a8fe:	0021      	movs	r1, r4
 801a900:	e026      	b.n	801a950 <floor+0x94>
 801a902:	4f2d      	ldr	r7, [pc, #180]	; (801a9b8 <floor+0xfc>)
 801a904:	4137      	asrs	r7, r6
 801a906:	003b      	movs	r3, r7
 801a908:	400b      	ands	r3, r1
 801a90a:	4303      	orrs	r3, r0
 801a90c:	d020      	beq.n	801a950 <floor+0x94>
 801a90e:	9000      	str	r0, [sp, #0]
 801a910:	9101      	str	r1, [sp, #4]
 801a912:	4a26      	ldr	r2, [pc, #152]	; (801a9ac <floor+0xf0>)
 801a914:	4b26      	ldr	r3, [pc, #152]	; (801a9b0 <floor+0xf4>)
 801a916:	9800      	ldr	r0, [sp, #0]
 801a918:	9901      	ldr	r1, [sp, #4]
 801a91a:	f7e6 f91f 	bl	8000b5c <__aeabi_dadd>
 801a91e:	2200      	movs	r2, #0
 801a920:	2300      	movs	r3, #0
 801a922:	f7e5 fd99 	bl	8000458 <__aeabi_dcmpgt>
 801a926:	2800      	cmp	r0, #0
 801a928:	d0e8      	beq.n	801a8fc <floor+0x40>
 801a92a:	2c00      	cmp	r4, #0
 801a92c:	da03      	bge.n	801a936 <floor+0x7a>
 801a92e:	2380      	movs	r3, #128	; 0x80
 801a930:	035b      	lsls	r3, r3, #13
 801a932:	4133      	asrs	r3, r6
 801a934:	18e4      	adds	r4, r4, r3
 801a936:	43bc      	bics	r4, r7
 801a938:	2500      	movs	r5, #0
 801a93a:	e7df      	b.n	801a8fc <floor+0x40>
 801a93c:	2e33      	cmp	r6, #51	; 0x33
 801a93e:	dd09      	ble.n	801a954 <floor+0x98>
 801a940:	2380      	movs	r3, #128	; 0x80
 801a942:	00db      	lsls	r3, r3, #3
 801a944:	429e      	cmp	r6, r3
 801a946:	d103      	bne.n	801a950 <floor+0x94>
 801a948:	0002      	movs	r2, r0
 801a94a:	000b      	movs	r3, r1
 801a94c:	f7e6 f906 	bl	8000b5c <__aeabi_dadd>
 801a950:	b005      	add	sp, #20
 801a952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a954:	2701      	movs	r7, #1
 801a956:	4a19      	ldr	r2, [pc, #100]	; (801a9bc <floor+0x100>)
 801a958:	427f      	negs	r7, r7
 801a95a:	189b      	adds	r3, r3, r2
 801a95c:	40df      	lsrs	r7, r3
 801a95e:	4238      	tst	r0, r7
 801a960:	d0f6      	beq.n	801a950 <floor+0x94>
 801a962:	9000      	str	r0, [sp, #0]
 801a964:	9101      	str	r1, [sp, #4]
 801a966:	4a11      	ldr	r2, [pc, #68]	; (801a9ac <floor+0xf0>)
 801a968:	4b11      	ldr	r3, [pc, #68]	; (801a9b0 <floor+0xf4>)
 801a96a:	9800      	ldr	r0, [sp, #0]
 801a96c:	9901      	ldr	r1, [sp, #4]
 801a96e:	f7e6 f8f5 	bl	8000b5c <__aeabi_dadd>
 801a972:	2200      	movs	r2, #0
 801a974:	2300      	movs	r3, #0
 801a976:	f7e5 fd6f 	bl	8000458 <__aeabi_dcmpgt>
 801a97a:	2800      	cmp	r0, #0
 801a97c:	d0be      	beq.n	801a8fc <floor+0x40>
 801a97e:	2c00      	cmp	r4, #0
 801a980:	da02      	bge.n	801a988 <floor+0xcc>
 801a982:	2e14      	cmp	r6, #20
 801a984:	d102      	bne.n	801a98c <floor+0xd0>
 801a986:	3401      	adds	r4, #1
 801a988:	43bd      	bics	r5, r7
 801a98a:	e7b7      	b.n	801a8fc <floor+0x40>
 801a98c:	2334      	movs	r3, #52	; 0x34
 801a98e:	1b9e      	subs	r6, r3, r6
 801a990:	3b33      	subs	r3, #51	; 0x33
 801a992:	40b3      	lsls	r3, r6
 801a994:	18ed      	adds	r5, r5, r3
 801a996:	9b03      	ldr	r3, [sp, #12]
 801a998:	429d      	cmp	r5, r3
 801a99a:	419b      	sbcs	r3, r3
 801a99c:	425b      	negs	r3, r3
 801a99e:	18e4      	adds	r4, r4, r3
 801a9a0:	e7f2      	b.n	801a988 <floor+0xcc>
 801a9a2:	2500      	movs	r5, #0
 801a9a4:	002c      	movs	r4, r5
 801a9a6:	e7a9      	b.n	801a8fc <floor+0x40>
 801a9a8:	fffffc01 	.word	0xfffffc01
 801a9ac:	8800759c 	.word	0x8800759c
 801a9b0:	7e37e43c 	.word	0x7e37e43c
 801a9b4:	bff00000 	.word	0xbff00000
 801a9b8:	000fffff 	.word	0x000fffff
 801a9bc:	fffffbed 	.word	0xfffffbed

0801a9c0 <round>:
 801a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9c2:	004a      	lsls	r2, r1, #1
 801a9c4:	0007      	movs	r7, r0
 801a9c6:	481f      	ldr	r0, [pc, #124]	; (801aa44 <round+0x84>)
 801a9c8:	0d52      	lsrs	r2, r2, #21
 801a9ca:	1815      	adds	r5, r2, r0
 801a9cc:	000e      	movs	r6, r1
 801a9ce:	2d13      	cmp	r5, #19
 801a9d0:	dc18      	bgt.n	801aa04 <round+0x44>
 801a9d2:	2d00      	cmp	r5, #0
 801a9d4:	da09      	bge.n	801a9ea <round+0x2a>
 801a9d6:	0fcb      	lsrs	r3, r1, #31
 801a9d8:	07db      	lsls	r3, r3, #31
 801a9da:	2200      	movs	r2, #0
 801a9dc:	1c69      	adds	r1, r5, #1
 801a9de:	d101      	bne.n	801a9e4 <round+0x24>
 801a9e0:	4919      	ldr	r1, [pc, #100]	; (801aa48 <round+0x88>)
 801a9e2:	430b      	orrs	r3, r1
 801a9e4:	0019      	movs	r1, r3
 801a9e6:	0010      	movs	r0, r2
 801a9e8:	e017      	b.n	801aa1a <round+0x5a>
 801a9ea:	4a18      	ldr	r2, [pc, #96]	; (801aa4c <round+0x8c>)
 801a9ec:	412a      	asrs	r2, r5
 801a9ee:	420a      	tst	r2, r1
 801a9f0:	d101      	bne.n	801a9f6 <round+0x36>
 801a9f2:	2f00      	cmp	r7, #0
 801a9f4:	d012      	beq.n	801aa1c <round+0x5c>
 801a9f6:	2380      	movs	r3, #128	; 0x80
 801a9f8:	031b      	lsls	r3, r3, #12
 801a9fa:	412b      	asrs	r3, r5
 801a9fc:	199b      	adds	r3, r3, r6
 801a9fe:	4393      	bics	r3, r2
 801aa00:	2200      	movs	r2, #0
 801aa02:	e7ef      	b.n	801a9e4 <round+0x24>
 801aa04:	2d33      	cmp	r5, #51	; 0x33
 801aa06:	dd0b      	ble.n	801aa20 <round+0x60>
 801aa08:	2380      	movs	r3, #128	; 0x80
 801aa0a:	00db      	lsls	r3, r3, #3
 801aa0c:	429d      	cmp	r5, r3
 801aa0e:	d105      	bne.n	801aa1c <round+0x5c>
 801aa10:	003a      	movs	r2, r7
 801aa12:	000b      	movs	r3, r1
 801aa14:	0038      	movs	r0, r7
 801aa16:	f7e6 f8a1 	bl	8000b5c <__aeabi_dadd>
 801aa1a:	0007      	movs	r7, r0
 801aa1c:	0038      	movs	r0, r7
 801aa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa20:	2601      	movs	r6, #1
 801aa22:	480b      	ldr	r0, [pc, #44]	; (801aa50 <round+0x90>)
 801aa24:	4276      	negs	r6, r6
 801aa26:	1812      	adds	r2, r2, r0
 801aa28:	40d6      	lsrs	r6, r2
 801aa2a:	423e      	tst	r6, r7
 801aa2c:	d0f6      	beq.n	801aa1c <round+0x5c>
 801aa2e:	2233      	movs	r2, #51	; 0x33
 801aa30:	1b55      	subs	r5, r2, r5
 801aa32:	3a32      	subs	r2, #50	; 0x32
 801aa34:	40aa      	lsls	r2, r5
 801aa36:	19d2      	adds	r2, r2, r7
 801aa38:	42ba      	cmp	r2, r7
 801aa3a:	41a4      	sbcs	r4, r4
 801aa3c:	4264      	negs	r4, r4
 801aa3e:	190b      	adds	r3, r1, r4
 801aa40:	43b2      	bics	r2, r6
 801aa42:	e7cf      	b.n	801a9e4 <round+0x24>
 801aa44:	fffffc01 	.word	0xfffffc01
 801aa48:	3ff00000 	.word	0x3ff00000
 801aa4c:	000fffff 	.word	0x000fffff
 801aa50:	fffffbed 	.word	0xfffffbed

0801aa54 <_init>:
 801aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa56:	46c0      	nop			; (mov r8, r8)
 801aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa5a:	bc08      	pop	{r3}
 801aa5c:	469e      	mov	lr, r3
 801aa5e:	4770      	bx	lr

0801aa60 <_fini>:
 801aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa62:	46c0      	nop			; (mov r8, r8)
 801aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa66:	bc08      	pop	{r3}
 801aa68:	469e      	mov	lr, r3
 801aa6a:	4770      	bx	lr
