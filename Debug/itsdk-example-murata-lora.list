
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020588  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f6c  08020648  08020648  00030648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080225b4  080225b4  00040288  2**0
                  CONTENTS
  4 .ARM          00000008  080225b4  080225b4  000325b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080225bc  080225bc  00040288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080225bc  080225bc  000325bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080225c0  080225c0  000325c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  080225c4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ec  20000288  0802284c  00040288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0802284c  00041774  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a0f0  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000aa89  00000000  00000000  000aa3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002960  00000000  00000000  000b4e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002550  00000000  00000000  000b7790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c6b  00000000  00000000  000b9ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003a1b2  00000000  00000000  000e194b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000adfa7  00000000  00000000  0011bafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c9aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009968  00000000  00000000  001c9b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000288 	.word	0x20000288
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08020630 	.word	0x08020630

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000028c 	.word	0x2000028c
 8000104:	08020630 	.word	0x08020630

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa5f 	bl	80018d8 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9b7 	bl	8001798 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa51 	bl	80018d8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa47 	bl	80018d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9cf 	bl	8001810 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f930 	bl	800071c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84e 	bl	8000598 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	002e      	movs	r6, r5
 8000514:	b580      	push	{r7, lr}
 8000516:	0407      	lsls	r7, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c3f      	lsrs	r7, r7, #16
 800051c:	4699      	mov	r9, r3
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	437e      	muls	r6, r7
 8000522:	435d      	muls	r5, r3
 8000524:	4367      	muls	r7, r4
 8000526:	4363      	muls	r3, r4
 8000528:	197f      	adds	r7, r7, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	19e4      	adds	r4, r4, r7
 800052e:	469c      	mov	ip, r3
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	025b      	lsls	r3, r3, #9
 8000538:	4698      	mov	r8, r3
 800053a:	44c4      	add	ip, r8
 800053c:	464b      	mov	r3, r9
 800053e:	4343      	muls	r3, r0
 8000540:	4351      	muls	r1, r2
 8000542:	0c25      	lsrs	r5, r4, #16
 8000544:	0436      	lsls	r6, r6, #16
 8000546:	4465      	add	r5, ip
 8000548:	0c36      	lsrs	r6, r6, #16
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	19a4      	adds	r4, r4, r6
 800054e:	195b      	adds	r3, r3, r5
 8000550:	1859      	adds	r1, r3, r1
 8000552:	0020      	movs	r0, r4
 8000554:	bc0c      	pop	{r2, r3}
 8000556:	4690      	mov	r8, r2
 8000558:	4699      	mov	r9, r3
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_d2uiz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__aeabi_d2uiz+0x38>)
 8000562:	0004      	movs	r4, r0
 8000564:	000d      	movs	r5, r1
 8000566:	f7ff ff81 	bl	800046c <__aeabi_dcmpge>
 800056a:	2800      	cmp	r0, #0
 800056c:	d104      	bne.n	8000578 <__aeabi_d2uiz+0x1c>
 800056e:	0020      	movs	r0, r4
 8000570:	0029      	movs	r1, r5
 8000572:	f001 ffd3 	bl	800251c <__aeabi_d2iz>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__aeabi_d2uiz+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	0020      	movs	r0, r4
 800057e:	0029      	movs	r1, r5
 8000580:	f001 fc84 	bl	8001e8c <__aeabi_dsub>
 8000584:	f001 ffca 	bl	800251c <__aeabi_d2iz>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	469c      	mov	ip, r3
 800058e:	4460      	add	r0, ip
 8000590:	e7f1      	b.n	8000576 <__aeabi_d2uiz+0x1a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	41e00000 	.word	0x41e00000

08000598 <__udivmoddi4>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	464f      	mov	r7, r9
 800059c:	4646      	mov	r6, r8
 800059e:	46d6      	mov	lr, sl
 80005a0:	b5c0      	push	{r6, r7, lr}
 80005a2:	0004      	movs	r4, r0
 80005a4:	b082      	sub	sp, #8
 80005a6:	000d      	movs	r5, r1
 80005a8:	4691      	mov	r9, r2
 80005aa:	4698      	mov	r8, r3
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d82f      	bhi.n	8000610 <__udivmoddi4+0x78>
 80005b0:	d02c      	beq.n	800060c <__udivmoddi4+0x74>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4648      	mov	r0, r9
 80005b6:	f002 f8c3 	bl	8002740 <__clzdi2>
 80005ba:	0029      	movs	r1, r5
 80005bc:	0006      	movs	r6, r0
 80005be:	0020      	movs	r0, r4
 80005c0:	f002 f8be 	bl	8002740 <__clzdi2>
 80005c4:	1a33      	subs	r3, r6, r0
 80005c6:	469c      	mov	ip, r3
 80005c8:	3b20      	subs	r3, #32
 80005ca:	469a      	mov	sl, r3
 80005cc:	d500      	bpl.n	80005d0 <__udivmoddi4+0x38>
 80005ce:	e076      	b.n	80006be <__udivmoddi4+0x126>
 80005d0:	464b      	mov	r3, r9
 80005d2:	4652      	mov	r2, sl
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001f      	movs	r7, r3
 80005d8:	464b      	mov	r3, r9
 80005da:	4662      	mov	r2, ip
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d828      	bhi.n	8000636 <__udivmoddi4+0x9e>
 80005e4:	d025      	beq.n	8000632 <__udivmoddi4+0x9a>
 80005e6:	4653      	mov	r3, sl
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5a>
 80005f0:	e07b      	b.n	80006ea <__udivmoddi4+0x152>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4652      	mov	r2, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4662      	mov	r2, ip
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e018      	b.n	800063e <__udivmoddi4+0xa6>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9d0      	bls.n	80005b2 <__udivmoddi4+0x1a>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8a>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b002      	add	sp, #8
 8000628:	bc1c      	pop	{r2, r3, r4}
 800062a:	4690      	mov	r8, r2
 800062c:	4699      	mov	r9, r3
 800062e:	46a2      	mov	sl, r4
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	42a3      	cmp	r3, r4
 8000634:	d9d7      	bls.n	80005e6 <__udivmoddi4+0x4e>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4663      	mov	r3, ip
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e9      	beq.n	8000618 <__udivmoddi4+0x80>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	4698      	mov	r8, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0872      	lsrs	r2, r6, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	087b      	lsrs	r3, r7, #1
 8000650:	4666      	mov	r6, ip
 8000652:	e00e      	b.n	8000672 <__udivmoddi4+0xda>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d101      	bne.n	800065c <__udivmoddi4+0xc4>
 8000658:	42a2      	cmp	r2, r4
 800065a:	d80c      	bhi.n	8000676 <__udivmoddi4+0xde>
 800065c:	1aa4      	subs	r4, r4, r2
 800065e:	419d      	sbcs	r5, r3
 8000660:	2001      	movs	r0, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2100      	movs	r1, #0
 8000668:	3e01      	subs	r6, #1
 800066a:	1824      	adds	r4, r4, r0
 800066c:	414d      	adcs	r5, r1
 800066e:	2e00      	cmp	r6, #0
 8000670:	d006      	beq.n	8000680 <__udivmoddi4+0xe8>
 8000672:	42ab      	cmp	r3, r5
 8000674:	d9ee      	bls.n	8000654 <__udivmoddi4+0xbc>
 8000676:	3e01      	subs	r6, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2e00      	cmp	r6, #0
 800067e:	d1f8      	bne.n	8000672 <__udivmoddi4+0xda>
 8000680:	9800      	ldr	r0, [sp, #0]
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	4653      	mov	r3, sl
 8000686:	1900      	adds	r0, r0, r4
 8000688:	4169      	adcs	r1, r5
 800068a:	2b00      	cmp	r3, #0
 800068c:	db23      	blt.n	80006d6 <__udivmoddi4+0x13e>
 800068e:	002b      	movs	r3, r5
 8000690:	4652      	mov	r2, sl
 8000692:	40d3      	lsrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	4664      	mov	r4, ip
 8000698:	40e2      	lsrs	r2, r4
 800069a:	001c      	movs	r4, r3
 800069c:	4653      	mov	r3, sl
 800069e:	0015      	movs	r5, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db2d      	blt.n	8000700 <__udivmoddi4+0x168>
 80006a4:	0026      	movs	r6, r4
 80006a6:	4657      	mov	r7, sl
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4667      	mov	r7, ip
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e7ac      	b.n	8000618 <__udivmoddi4+0x80>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	464a      	mov	r2, r9
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	4661      	mov	r1, ip
 80006ca:	0013      	movs	r3, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	408a      	lsls	r2, r1
 80006d0:	0017      	movs	r7, r2
 80006d2:	431f      	orrs	r7, r3
 80006d4:	e780      	b.n	80005d8 <__udivmoddi4+0x40>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2320      	movs	r3, #32
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	002a      	movs	r2, r5
 80006de:	4666      	mov	r6, ip
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0023      	movs	r3, r4
 80006e4:	40f3      	lsrs	r3, r6
 80006e6:	4313      	orrs	r3, r2
 80006e8:	e7d4      	b.n	8000694 <__udivmoddi4+0xfc>
 80006ea:	4662      	mov	r2, ip
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e780      	b.n	8000602 <__udivmoddi4+0x6a>
 8000700:	2320      	movs	r3, #32
 8000702:	4662      	mov	r2, ip
 8000704:	0026      	movs	r6, r4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	002f      	movs	r7, r5
 800070c:	46b0      	mov	r8, r6
 800070e:	4666      	mov	r6, ip
 8000710:	40b7      	lsls	r7, r6
 8000712:	4646      	mov	r6, r8
 8000714:	003b      	movs	r3, r7
 8000716:	4333      	orrs	r3, r6
 8000718:	e7c8      	b.n	80006ac <__udivmoddi4+0x114>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gnu_ldivmod_helper>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	0016      	movs	r6, r2
 8000722:	001f      	movs	r7, r3
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	f002 f816 	bl	8002758 <__divdi3>
 800072c:	0004      	movs	r4, r0
 800072e:	000d      	movs	r5, r1
 8000730:	0002      	movs	r2, r0
 8000732:	000b      	movs	r3, r1
 8000734:	0030      	movs	r0, r6
 8000736:	0039      	movs	r1, r7
 8000738:	f7ff fee6 	bl	8000508 <__aeabi_lmul>
 800073c:	9a00      	ldr	r2, [sp, #0]
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	1a12      	subs	r2, r2, r0
 8000742:	418b      	sbcs	r3, r1
 8000744:	9908      	ldr	r1, [sp, #32]
 8000746:	0020      	movs	r0, r4
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	604b      	str	r3, [r1, #4]
 800074c:	0029      	movs	r1, r5
 800074e:	b003      	add	sp, #12
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <__aeabi_fsub>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	4647      	mov	r7, r8
 8000758:	46ce      	mov	lr, r9
 800075a:	0044      	lsls	r4, r0, #1
 800075c:	0fc2      	lsrs	r2, r0, #31
 800075e:	b580      	push	{r7, lr}
 8000760:	0247      	lsls	r7, r0, #9
 8000762:	0248      	lsls	r0, r1, #9
 8000764:	0a40      	lsrs	r0, r0, #9
 8000766:	4684      	mov	ip, r0
 8000768:	4666      	mov	r6, ip
 800076a:	0048      	lsls	r0, r1, #1
 800076c:	0a7f      	lsrs	r7, r7, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	00f6      	lsls	r6, r6, #3
 8000772:	0025      	movs	r5, r4
 8000774:	4690      	mov	r8, r2
 8000776:	00fb      	lsls	r3, r7, #3
 8000778:	0e00      	lsrs	r0, r0, #24
 800077a:	0fc9      	lsrs	r1, r1, #31
 800077c:	46b1      	mov	r9, r6
 800077e:	28ff      	cmp	r0, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x30>
 8000782:	e085      	b.n	8000890 <__aeabi_fsub+0x13c>
 8000784:	2601      	movs	r6, #1
 8000786:	4071      	eors	r1, r6
 8000788:	1a26      	subs	r6, r4, r0
 800078a:	4291      	cmp	r1, r2
 800078c:	d057      	beq.n	800083e <__aeabi_fsub+0xea>
 800078e:	2e00      	cmp	r6, #0
 8000790:	dd43      	ble.n	800081a <__aeabi_fsub+0xc6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0x44>
 8000796:	e07f      	b.n	8000898 <__aeabi_fsub+0x144>
 8000798:	4649      	mov	r1, r9
 800079a:	2900      	cmp	r1, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x4c>
 800079e:	e0aa      	b.n	80008f6 <__aeabi_fsub+0x1a2>
 80007a0:	3e01      	subs	r6, #1
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fsub+0x54>
 80007a6:	e0f7      	b.n	8000998 <__aeabi_fsub+0x244>
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	015a      	lsls	r2, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0x5c>
 80007ae:	e08b      	b.n	80008c8 <__aeabi_fsub+0x174>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	099c      	lsrs	r4, r3, #6
 80007b4:	0020      	movs	r0, r4
 80007b6:	f001 ffa5 	bl	8002704 <__clzsi2>
 80007ba:	3805      	subs	r0, #5
 80007bc:	4084      	lsls	r4, r0
 80007be:	4285      	cmp	r5, r0
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_fsub+0x70>
 80007c2:	e0d3      	b.n	800096c <__aeabi_fsub+0x218>
 80007c4:	1b45      	subs	r5, r0, r5
 80007c6:	0023      	movs	r3, r4
 80007c8:	2020      	movs	r0, #32
 80007ca:	3501      	adds	r5, #1
 80007cc:	40eb      	lsrs	r3, r5
 80007ce:	1b45      	subs	r5, r0, r5
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	1e62      	subs	r2, r4, #1
 80007d4:	4194      	sbcs	r4, r2
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2407      	movs	r4, #7
 80007da:	2500      	movs	r5, #0
 80007dc:	401c      	ands	r4, r3
 80007de:	2201      	movs	r2, #1
 80007e0:	4641      	mov	r1, r8
 80007e2:	400a      	ands	r2, r1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d004      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007e8:	210f      	movs	r1, #15
 80007ea:	4019      	ands	r1, r3
 80007ec:	2904      	cmp	r1, #4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007f0:	3304      	adds	r3, #4
 80007f2:	0159      	lsls	r1, r3, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fsub+0xa4>
 80007f6:	e080      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80007f8:	3501      	adds	r5, #1
 80007fa:	b2ec      	uxtb	r4, r5
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0xae>
 8000800:	e0a3      	b.n	800094a <__aeabi_fsub+0x1f6>
 8000802:	24ff      	movs	r4, #255	; 0xff
 8000804:	2300      	movs	r3, #0
 8000806:	025b      	lsls	r3, r3, #9
 8000808:	05e4      	lsls	r4, r4, #23
 800080a:	0a58      	lsrs	r0, r3, #9
 800080c:	07d2      	lsls	r2, r2, #31
 800080e:	4320      	orrs	r0, r4
 8000810:	4310      	orrs	r0, r2
 8000812:	bc0c      	pop	{r2, r3}
 8000814:	4690      	mov	r8, r2
 8000816:	4699      	mov	r9, r3
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	2e00      	cmp	r6, #0
 800081c:	d174      	bne.n	8000908 <__aeabi_fsub+0x1b4>
 800081e:	1c60      	adds	r0, r4, #1
 8000820:	b2c0      	uxtb	r0, r0
 8000822:	2801      	cmp	r0, #1
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fsub+0xd4>
 8000826:	e0a7      	b.n	8000978 <__aeabi_fsub+0x224>
 8000828:	464a      	mov	r2, r9
 800082a:	1a9c      	subs	r4, r3, r2
 800082c:	0162      	lsls	r2, r4, #5
 800082e:	d500      	bpl.n	8000832 <__aeabi_fsub+0xde>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fsub+0x24c>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d1be      	bne.n	80007b4 <__aeabi_fsub+0x60>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	2300      	movs	r3, #0
 800083c:	e7e3      	b.n	8000806 <__aeabi_fsub+0xb2>
 800083e:	2e00      	cmp	r6, #0
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fsub+0xf0>
 8000842:	e085      	b.n	8000950 <__aeabi_fsub+0x1fc>
 8000844:	2800      	cmp	r0, #0
 8000846:	d046      	beq.n	80008d6 <__aeabi_fsub+0x182>
 8000848:	2cff      	cmp	r4, #255	; 0xff
 800084a:	d049      	beq.n	80008e0 <__aeabi_fsub+0x18c>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	4648      	mov	r0, r9
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4310      	orrs	r0, r2
 8000854:	4681      	mov	r9, r0
 8000856:	2201      	movs	r2, #1
 8000858:	2e1b      	cmp	r6, #27
 800085a:	dc09      	bgt.n	8000870 <__aeabi_fsub+0x11c>
 800085c:	2020      	movs	r0, #32
 800085e:	464c      	mov	r4, r9
 8000860:	1b80      	subs	r0, r0, r6
 8000862:	4084      	lsls	r4, r0
 8000864:	464a      	mov	r2, r9
 8000866:	0020      	movs	r0, r4
 8000868:	40f2      	lsrs	r2, r6
 800086a:	1e44      	subs	r4, r0, #1
 800086c:	41a0      	sbcs	r0, r4
 800086e:	4302      	orrs	r2, r0
 8000870:	189b      	adds	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d528      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 8000876:	3501      	adds	r5, #1
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x12a>
 800087c:	e0a8      	b.n	80009d0 <__aeabi_fsub+0x27c>
 800087e:	2201      	movs	r2, #1
 8000880:	2407      	movs	r4, #7
 8000882:	4994      	ldr	r1, [pc, #592]	; (8000ad4 <__aeabi_fsub+0x380>)
 8000884:	401a      	ands	r2, r3
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	400b      	ands	r3, r1
 800088a:	4313      	orrs	r3, r2
 800088c:	401c      	ands	r4, r3
 800088e:	e7a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x142>
 8000894:	e778      	b.n	8000788 <__aeabi_fsub+0x34>
 8000896:	e775      	b.n	8000784 <__aeabi_fsub+0x30>
 8000898:	2cff      	cmp	r4, #255	; 0xff
 800089a:	d054      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4649      	mov	r1, r9
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4689      	mov	r9, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	2e1b      	cmp	r6, #27
 80008aa:	dc09      	bgt.n	80008c0 <__aeabi_fsub+0x16c>
 80008ac:	2120      	movs	r1, #32
 80008ae:	4648      	mov	r0, r9
 80008b0:	1b89      	subs	r1, r1, r6
 80008b2:	4088      	lsls	r0, r1
 80008b4:	464a      	mov	r2, r9
 80008b6:	0001      	movs	r1, r0
 80008b8:	40f2      	lsrs	r2, r6
 80008ba:	1e48      	subs	r0, r1, #1
 80008bc:	4181      	sbcs	r1, r0
 80008be:	430a      	orrs	r2, r1
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d500      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 80008c6:	e773      	b.n	80007b0 <__aeabi_fsub+0x5c>
 80008c8:	2201      	movs	r2, #1
 80008ca:	4641      	mov	r1, r8
 80008cc:	400a      	ands	r2, r1
 80008ce:	0759      	lsls	r1, r3, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fsub+0x180>
 80008d2:	e789      	b.n	80007e8 <__aeabi_fsub+0x94>
 80008d4:	e011      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80008d6:	4648      	mov	r0, r9
 80008d8:	2800      	cmp	r0, #0
 80008da:	d158      	bne.n	800098e <__aeabi_fsub+0x23a>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d10c      	bne.n	80008fa <__aeabi_fsub+0x1a6>
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x194>
 80008e6:	e78c      	b.n	8000802 <__aeabi_fsub+0xae>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4303      	orrs	r3, r0
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	24ff      	movs	r4, #255	; 0xff
 80008f4:	e787      	b.n	8000806 <__aeabi_fsub+0xb2>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d025      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d0f0      	beq.n	80008e2 <__aeabi_fsub+0x18e>
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	b2ec      	uxtb	r4, r5
 8000906:	e77e      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000908:	2c00      	cmp	r4, #0
 800090a:	d04d      	beq.n	80009a8 <__aeabi_fsub+0x254>
 800090c:	28ff      	cmp	r0, #255	; 0xff
 800090e:	d018      	beq.n	8000942 <__aeabi_fsub+0x1ee>
 8000910:	2480      	movs	r4, #128	; 0x80
 8000912:	04e4      	lsls	r4, r4, #19
 8000914:	4272      	negs	r2, r6
 8000916:	4323      	orrs	r3, r4
 8000918:	2a1b      	cmp	r2, #27
 800091a:	dd00      	ble.n	800091e <__aeabi_fsub+0x1ca>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_fsub+0x354>
 800091e:	001c      	movs	r4, r3
 8000920:	2520      	movs	r5, #32
 8000922:	40d4      	lsrs	r4, r2
 8000924:	1aaa      	subs	r2, r5, r2
 8000926:	4093      	lsls	r3, r2
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	4323      	orrs	r3, r4
 800092e:	464a      	mov	r2, r9
 8000930:	0005      	movs	r5, r0
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4688      	mov	r8, r1
 8000936:	e738      	b.n	80007aa <__aeabi_fsub+0x56>
 8000938:	1c72      	adds	r2, r6, #1
 800093a:	d0f8      	beq.n	800092e <__aeabi_fsub+0x1da>
 800093c:	43f2      	mvns	r2, r6
 800093e:	28ff      	cmp	r0, #255	; 0xff
 8000940:	d1ea      	bne.n	8000918 <__aeabi_fsub+0x1c4>
 8000942:	000a      	movs	r2, r1
 8000944:	464b      	mov	r3, r9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	e7d7      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800094a:	019b      	lsls	r3, r3, #6
 800094c:	0a5b      	lsrs	r3, r3, #9
 800094e:	e75a      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000950:	2e00      	cmp	r6, #0
 8000952:	d141      	bne.n	80009d8 <__aeabi_fsub+0x284>
 8000954:	1c65      	adds	r5, r4, #1
 8000956:	b2e9      	uxtb	r1, r5
 8000958:	2901      	cmp	r1, #1
 800095a:	dd45      	ble.n	80009e8 <__aeabi_fsub+0x294>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x20e>
 8000960:	e74f      	b.n	8000802 <__aeabi_fsub+0xae>
 8000962:	2407      	movs	r4, #7
 8000964:	444b      	add	r3, r9
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	401c      	ands	r4, r3
 800096a:	e738      	b.n	80007de <__aeabi_fsub+0x8a>
 800096c:	2207      	movs	r2, #7
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000970:	1a2d      	subs	r5, r5, r0
 8000972:	4023      	ands	r3, r4
 8000974:	4014      	ands	r4, r2
 8000976:	e732      	b.n	80007de <__aeabi_fsub+0x8a>
 8000978:	2c00      	cmp	r4, #0
 800097a:	d11d      	bne.n	80009b8 <__aeabi_fsub+0x264>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d17a      	bne.n	8000a76 <__aeabi_fsub+0x322>
 8000980:	464b      	mov	r3, r9
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x234>
 8000986:	e091      	b.n	8000aac <__aeabi_fsub+0x358>
 8000988:	000a      	movs	r2, r1
 800098a:	2500      	movs	r5, #0
 800098c:	e7b5      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800098e:	3e01      	subs	r6, #1
 8000990:	2e00      	cmp	r6, #0
 8000992:	d119      	bne.n	80009c8 <__aeabi_fsub+0x274>
 8000994:	444b      	add	r3, r9
 8000996:	e76c      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000998:	2cff      	cmp	r4, #255	; 0xff
 800099a:	d184      	bne.n	80008a6 <__aeabi_fsub+0x152>
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	e7ac      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009a0:	464a      	mov	r2, r9
 80009a2:	4688      	mov	r8, r1
 80009a4:	1ad4      	subs	r4, r2, r3
 80009a6:	e705      	b.n	80007b4 <__aeabi_fsub+0x60>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1c5      	bne.n	8000938 <__aeabi_fsub+0x1e4>
 80009ac:	000a      	movs	r2, r1
 80009ae:	28ff      	cmp	r0, #255	; 0xff
 80009b0:	d0c8      	beq.n	8000944 <__aeabi_fsub+0x1f0>
 80009b2:	0005      	movs	r5, r0
 80009b4:	464b      	mov	r3, r9
 80009b6:	e7a0      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d149      	bne.n	8000a50 <__aeabi_fsub+0x2fc>
 80009bc:	464b      	mov	r3, r9
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d077      	beq.n	8000ab2 <__aeabi_fsub+0x35e>
 80009c2:	000a      	movs	r2, r1
 80009c4:	25ff      	movs	r5, #255	; 0xff
 80009c6:	e798      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009c8:	2cff      	cmp	r4, #255	; 0xff
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x27a>
 80009cc:	e743      	b.n	8000856 <__aeabi_fsub+0x102>
 80009ce:	e787      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009d0:	000a      	movs	r2, r1
 80009d2:	24ff      	movs	r4, #255	; 0xff
 80009d4:	2300      	movs	r3, #0
 80009d6:	e716      	b.n	8000806 <__aeabi_fsub+0xb2>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d115      	bne.n	8000a08 <__aeabi_fsub+0x2b4>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d157      	bne.n	8000a90 <__aeabi_fsub+0x33c>
 80009e0:	28ff      	cmp	r0, #255	; 0xff
 80009e2:	d1e6      	bne.n	80009b2 <__aeabi_fsub+0x25e>
 80009e4:	464b      	mov	r3, r9
 80009e6:	e77b      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d120      	bne.n	8000a2e <__aeabi_fsub+0x2da>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_fsub+0x34c>
 80009f0:	4649      	mov	r1, r9
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d053      	beq.n	8000a9e <__aeabi_fsub+0x34a>
 80009f6:	444b      	add	r3, r9
 80009f8:	015a      	lsls	r2, r3, #5
 80009fa:	d568      	bpl.n	8000ace <__aeabi_fsub+0x37a>
 80009fc:	2407      	movs	r4, #7
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000a00:	401c      	ands	r4, r3
 8000a02:	2501      	movs	r5, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	e6ea      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d0eb      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	4276      	negs	r6, r6
 8000a12:	4313      	orrs	r3, r2
 8000a14:	2e1b      	cmp	r6, #27
 8000a16:	dc53      	bgt.n	8000ac0 <__aeabi_fsub+0x36c>
 8000a18:	2520      	movs	r5, #32
 8000a1a:	1bad      	subs	r5, r5, r6
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	40ab      	lsls	r3, r5
 8000a20:	40f2      	lsrs	r2, r6
 8000a22:	1e5c      	subs	r4, r3, #1
 8000a24:	41a3      	sbcs	r3, r4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	444b      	add	r3, r9
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	e721      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0d8      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a32:	4649      	mov	r1, r9
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x2e6>
 8000a38:	e752      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	03c9      	lsls	r1, r1, #15
 8000a3e:	420f      	tst	r7, r1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x2f0>
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a44:	4660      	mov	r0, ip
 8000a46:	4208      	tst	r0, r1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x2f8>
 8000a4a:	e749      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	e747      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a50:	4648      	mov	r0, r9
 8000a52:	25ff      	movs	r5, #255	; 0xff
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fsub+0x306>
 8000a58:	e74f      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	4217      	tst	r7, r2
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fsub+0x318>
 8000a62:	4660      	mov	r0, ip
 8000a64:	4210      	tst	r0, r2
 8000a66:	d101      	bne.n	8000a6c <__aeabi_fsub+0x318>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4641      	mov	r1, r8
 8000a70:	25ff      	movs	r5, #255	; 0xff
 8000a72:	400a      	ands	r2, r1
 8000a74:	e741      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a76:	4648      	mov	r0, r9
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d01f      	beq.n	8000abc <__aeabi_fsub+0x368>
 8000a7c:	1a1a      	subs	r2, r3, r0
 8000a7e:	0150      	lsls	r0, r2, #5
 8000a80:	d520      	bpl.n	8000ac4 <__aeabi_fsub+0x370>
 8000a82:	464a      	mov	r2, r9
 8000a84:	2407      	movs	r4, #7
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	401c      	ands	r4, r3
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e6a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a90:	1c74      	adds	r4, r6, #1
 8000a92:	d0c9      	beq.n	8000a28 <__aeabi_fsub+0x2d4>
 8000a94:	43f6      	mvns	r6, r6
 8000a96:	28ff      	cmp	r0, #255	; 0xff
 8000a98:	d1bc      	bne.n	8000a14 <__aeabi_fsub+0x2c0>
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	e720      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	e72b      	b.n	8000900 <__aeabi_fsub+0x1ac>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e740      	b.n	800092e <__aeabi_fsub+0x1da>
 8000aac:	2200      	movs	r2, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e6a9      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	24ff      	movs	r4, #255	; 0xff
 8000aba:	e6a4      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000abc:	2500      	movs	r5, #0
 8000abe:	e71c      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e7b1      	b.n	8000a28 <__aeabi_fsub+0x2d4>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d0f1      	beq.n	8000aac <__aeabi_fsub+0x358>
 8000ac8:	0013      	movs	r3, r2
 8000aca:	2500      	movs	r5, #0
 8000acc:	e6fc      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ace:	2500      	movs	r5, #0
 8000ad0:	e6fa      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	fbffffff 	.word	0xfbffffff

08000adc <__aeabi_ui2f>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	1e04      	subs	r4, r0, #0
 8000ae0:	d034      	beq.n	8000b4c <__aeabi_ui2f+0x70>
 8000ae2:	f001 fe0f 	bl	8002704 <__clzsi2>
 8000ae6:	229e      	movs	r2, #158	; 0x9e
 8000ae8:	1a12      	subs	r2, r2, r0
 8000aea:	2a96      	cmp	r2, #150	; 0x96
 8000aec:	dc07      	bgt.n	8000afe <__aeabi_ui2f+0x22>
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	2808      	cmp	r0, #8
 8000af2:	dd2e      	ble.n	8000b52 <__aeabi_ui2f+0x76>
 8000af4:	3808      	subs	r0, #8
 8000af6:	4084      	lsls	r4, r0
 8000af8:	0260      	lsls	r0, r4, #9
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	e021      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000afe:	2a99      	cmp	r2, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x3a>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0021      	movs	r1, r4
 8000b06:	331b      	adds	r3, #27
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	1e4b      	subs	r3, r1, #1
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	2305      	movs	r3, #5
 8000b10:	1a1b      	subs	r3, r3, r0
 8000b12:	40dc      	lsrs	r4, r3
 8000b14:	430c      	orrs	r4, r1
 8000b16:	2805      	cmp	r0, #5
 8000b18:	dd01      	ble.n	8000b1e <__aeabi_ui2f+0x42>
 8000b1a:	1f43      	subs	r3, r0, #5
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	0023      	movs	r3, r4
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <__aeabi_ui2f+0x7c>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	0765      	lsls	r5, r4, #29
 8000b26:	d009      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b28:	250f      	movs	r5, #15
 8000b2a:	402c      	ands	r4, r5
 8000b2c:	2c04      	cmp	r4, #4
 8000b2e:	d005      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b30:	3304      	adds	r3, #4
 8000b32:	015c      	lsls	r4, r3, #5
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_ui2f+0x60>
 8000b36:	229f      	movs	r2, #159	; 0x9f
 8000b38:	400b      	ands	r3, r1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	0a58      	lsrs	r0, r3, #9
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0240      	lsls	r0, r0, #9
 8000b44:	05d2      	lsls	r2, r2, #23
 8000b46:	0a40      	lsrs	r0, r0, #9
 8000b48:	4310      	orrs	r0, r2
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7f7      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b52:	0260      	lsls	r0, r4, #9
 8000b54:	0a40      	lsrs	r0, r0, #9
 8000b56:	e7f4      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b58:	fbffffff 	.word	0xfbffffff

08000b5c <__aeabi_dadd>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	000c      	movs	r4, r1
 8000b66:	0309      	lsls	r1, r1, #12
 8000b68:	b5c0      	push	{r6, r7, lr}
 8000b6a:	0a49      	lsrs	r1, r1, #9
 8000b6c:	0f47      	lsrs	r7, r0, #29
 8000b6e:	005e      	lsls	r6, r3, #1
 8000b70:	4339      	orrs	r1, r7
 8000b72:	031f      	lsls	r7, r3, #12
 8000b74:	0fdb      	lsrs	r3, r3, #31
 8000b76:	469c      	mov	ip, r3
 8000b78:	0065      	lsls	r5, r4, #1
 8000b7a:	0a7b      	lsrs	r3, r7, #9
 8000b7c:	0f57      	lsrs	r7, r2, #29
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	0d6d      	lsrs	r5, r5, #21
 8000b82:	0fe4      	lsrs	r4, r4, #31
 8000b84:	0d76      	lsrs	r6, r6, #21
 8000b86:	46a1      	mov	r9, r4
 8000b88:	00c0      	lsls	r0, r0, #3
 8000b8a:	46b8      	mov	r8, r7
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	1bab      	subs	r3, r5, r6
 8000b90:	4564      	cmp	r4, ip
 8000b92:	d07b      	beq.n	8000c8c <__aeabi_dadd+0x130>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd5f      	ble.n	8000c58 <__aeabi_dadd+0xfc>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x42>
 8000b9c:	e0a4      	b.n	8000ce8 <__aeabi_dadd+0x18c>
 8000b9e:	003e      	movs	r6, r7
 8000ba0:	4316      	orrs	r6, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4a>
 8000ba4:	e112      	b.n	8000dcc <__aeabi_dadd+0x270>
 8000ba6:	1e5e      	subs	r6, r3, #1
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x52>
 8000bac:	e19e      	b.n	8000eec <__aeabi_dadd+0x390>
 8000bae:	1a87      	subs	r7, r0, r2
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1a09      	subs	r1, r1, r0
 8000bbe:	020b      	lsls	r3, r1, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x68>
 8000bc2:	e131      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	0a4e      	lsrs	r6, r1, #9
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x72>
 8000bcc:	e16e      	b.n	8000eac <__aeabi_dadd+0x350>
 8000bce:	0030      	movs	r0, r6
 8000bd0:	f001 fd98 	bl	8002704 <__clzsi2>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	dd00      	ble.n	8000bde <__aeabi_dadd+0x82>
 8000bdc:	e161      	b.n	8000ea2 <__aeabi_dadd+0x346>
 8000bde:	2220      	movs	r2, #32
 8000be0:	0039      	movs	r1, r7
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	409e      	lsls	r6, r3
 8000be6:	40d1      	lsrs	r1, r2
 8000be8:	409f      	lsls	r7, r3
 8000bea:	430e      	orrs	r6, r1
 8000bec:	429d      	cmp	r5, r3
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dadd+0x96>
 8000bf0:	e151      	b.n	8000e96 <__aeabi_dadd+0x33a>
 8000bf2:	1b5d      	subs	r5, r3, r5
 8000bf4:	1c6b      	adds	r3, r5, #1
 8000bf6:	2b1f      	cmp	r3, #31
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_dadd+0xa0>
 8000bfa:	e17c      	b.n	8000ef6 <__aeabi_dadd+0x39a>
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	1ac9      	subs	r1, r1, r3
 8000c00:	003d      	movs	r5, r7
 8000c02:	0030      	movs	r0, r6
 8000c04:	408f      	lsls	r7, r1
 8000c06:	4088      	lsls	r0, r1
 8000c08:	40dd      	lsrs	r5, r3
 8000c0a:	1e79      	subs	r1, r7, #1
 8000c0c:	418f      	sbcs	r7, r1
 8000c0e:	0031      	movs	r1, r6
 8000c10:	2207      	movs	r2, #7
 8000c12:	4328      	orrs	r0, r5
 8000c14:	40d9      	lsrs	r1, r3
 8000c16:	2500      	movs	r5, #0
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c20:	230f      	movs	r3, #15
 8000c22:	403b      	ands	r3, r7
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	42bb      	cmp	r3, r7
 8000c2c:	41bf      	sbcs	r7, r7
 8000c2e:	427f      	negs	r7, r7
 8000c30:	19c9      	adds	r1, r1, r7
 8000c32:	001f      	movs	r7, r3
 8000c34:	020b      	lsls	r3, r1, #8
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_dadd+0xde>
 8000c38:	e226      	b.n	8001088 <__aeabi_dadd+0x52c>
 8000c3a:	1c6a      	adds	r2, r5, #1
 8000c3c:	4bc6      	ldr	r3, [pc, #792]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c3e:	0555      	lsls	r5, r2, #21
 8000c40:	0d6d      	lsrs	r5, r5, #21
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0xec>
 8000c46:	e106      	b.n	8000e56 <__aeabi_dadd+0x2fa>
 8000c48:	4ac4      	ldr	r2, [pc, #784]	; (8000f5c <__aeabi_dadd+0x400>)
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	0753      	lsls	r3, r2, #29
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	433b      	orrs	r3, r7
 8000c54:	0b12      	lsrs	r2, r2, #12
 8000c56:	e08e      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x102>
 8000c5c:	e0b8      	b.n	8000dd0 <__aeabi_dadd+0x274>
 8000c5e:	1c6b      	adds	r3, r5, #1
 8000c60:	055b      	lsls	r3, r3, #21
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dadd+0x10e>
 8000c68:	e130      	b.n	8000ecc <__aeabi_dadd+0x370>
 8000c6a:	1a87      	subs	r7, r0, r2
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	41b6      	sbcs	r6, r6
 8000c72:	1acb      	subs	r3, r1, r3
 8000c74:	4276      	negs	r6, r6
 8000c76:	1b9e      	subs	r6, r3, r6
 8000c78:	0233      	lsls	r3, r6, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x122>
 8000c7c:	e14c      	b.n	8000f18 <__aeabi_dadd+0x3bc>
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4333      	orrs	r3, r6
 8000c82:	d1a1      	bne.n	8000bc8 <__aeabi_dadd+0x6c>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2400      	movs	r4, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e070      	b.n	8000d6e <__aeabi_dadd+0x212>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x136>
 8000c90:	e0e5      	b.n	8000e5e <__aeabi_dadd+0x302>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x13c>
 8000c96:	e083      	b.n	8000da0 <__aeabi_dadd+0x244>
 8000c98:	4eaf      	ldr	r6, [pc, #700]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d060      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000c9e:	2680      	movs	r6, #128	; 0x80
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4337      	orrs	r7, r6
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	2b38      	cmp	r3, #56	; 0x38
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_dadd+0x150>
 8000caa:	e13e      	b.n	8000f2a <__aeabi_dadd+0x3ce>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	001f      	movs	r7, r3
 8000cb2:	1e7a      	subs	r2, r7, #1
 8000cb4:	4197      	sbcs	r7, r2
 8000cb6:	183f      	adds	r7, r7, r0
 8000cb8:	4287      	cmp	r7, r0
 8000cba:	4180      	sbcs	r0, r0
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	1809      	adds	r1, r1, r0
 8000cc0:	020b      	lsls	r3, r1, #8
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_dadd+0x16a>
 8000cc4:	e0b0      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000cc6:	4ba4      	ldr	r3, [pc, #656]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cc8:	3501      	adds	r5, #1
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dadd+0x174>
 8000cce:	e0c3      	b.n	8000e58 <__aeabi_dadd+0x2fc>
 8000cd0:	4aa2      	ldr	r2, [pc, #648]	; (8000f5c <__aeabi_dadd+0x400>)
 8000cd2:	087b      	lsrs	r3, r7, #1
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	400f      	ands	r7, r1
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	0851      	lsrs	r1, r2, #1
 8000cde:	07d3      	lsls	r3, r2, #31
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	403a      	ands	r2, r7
 8000ce6:	e799      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ce8:	4e9b      	ldr	r6, [pc, #620]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d038      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	4337      	orrs	r7, r6
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	2b38      	cmp	r3, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x1a0>
 8000cfa:	e0dc      	b.n	8000eb6 <__aeabi_dadd+0x35a>
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dadd+0x1a6>
 8000d00:	e130      	b.n	8000f64 <__aeabi_dadd+0x408>
 8000d02:	001e      	movs	r6, r3
 8000d04:	4647      	mov	r7, r8
 8000d06:	3e20      	subs	r6, #32
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	46bc      	mov	ip, r7
 8000d0c:	2b20      	cmp	r3, #32
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_dadd+0x1be>
 8000d10:	2640      	movs	r6, #64	; 0x40
 8000d12:	1af3      	subs	r3, r6, r3
 8000d14:	4646      	mov	r6, r8
 8000d16:	409e      	lsls	r6, r3
 8000d18:	4332      	orrs	r2, r6
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	1e7a      	subs	r2, r7, #1
 8000d20:	4197      	sbcs	r7, r2
 8000d22:	431f      	orrs	r7, r3
 8000d24:	e0cc      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x1d0>
 8000d2a:	e204      	b.n	8001136 <__aeabi_dadd+0x5da>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x1d8>
 8000d32:	e159      	b.n	8000fe8 <__aeabi_dadd+0x48c>
 8000d34:	074b      	lsls	r3, r1, #29
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	08c9      	lsrs	r1, r1, #3
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4219      	tst	r1, r3
 8000d42:	d008      	beq.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d44:	4645      	mov	r5, r8
 8000d46:	08ed      	lsrs	r5, r5, #3
 8000d48:	421d      	tst	r5, r3
 8000d4a:	d104      	bne.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	08d0      	lsrs	r0, r2, #3
 8000d50:	0759      	lsls	r1, r3, #29
 8000d52:	4308      	orrs	r0, r1
 8000d54:	0029      	movs	r1, r5
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	4d7f      	ldr	r5, [pc, #508]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	00c0      	lsls	r0, r0, #3
 8000d60:	074b      	lsls	r3, r1, #29
 8000d62:	08ca      	lsrs	r2, r1, #3
 8000d64:	497c      	ldr	r1, [pc, #496]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	d068      	beq.n	8000e40 <__aeabi_dadd+0x2e4>
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	056d      	lsls	r5, r5, #21
 8000d72:	0b12      	lsrs	r2, r2, #12
 8000d74:	0d6d      	lsrs	r5, r5, #21
 8000d76:	2100      	movs	r1, #0
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	0b13      	lsrs	r3, r2, #12
 8000d7e:	0d0a      	lsrs	r2, r1, #20
 8000d80:	0512      	lsls	r2, r2, #20
 8000d82:	431a      	orrs	r2, r3
 8000d84:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <__aeabi_dadd+0x404>)
 8000d86:	052d      	lsls	r5, r5, #20
 8000d88:	4013      	ands	r3, r2
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	07e4      	lsls	r4, r4, #31
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	4323      	orrs	r3, r4
 8000d94:	0019      	movs	r1, r3
 8000d96:	bc1c      	pop	{r2, r3, r4}
 8000d98:	4690      	mov	r8, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	003e      	movs	r6, r7
 8000da2:	4316      	orrs	r6, r2
 8000da4:	d012      	beq.n	8000dcc <__aeabi_dadd+0x270>
 8000da6:	1e5e      	subs	r6, r3, #1
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x252>
 8000dac:	e100      	b.n	8000fb0 <__aeabi_dadd+0x454>
 8000dae:	1887      	adds	r7, r0, r2
 8000db0:	4287      	cmp	r7, r0
 8000db2:	4180      	sbcs	r0, r0
 8000db4:	4441      	add	r1, r8
 8000db6:	4240      	negs	r0, r0
 8000db8:	1809      	adds	r1, r1, r0
 8000dba:	2501      	movs	r5, #1
 8000dbc:	020b      	lsls	r3, r1, #8
 8000dbe:	d533      	bpl.n	8000e28 <__aeabi_dadd+0x2cc>
 8000dc0:	2502      	movs	r5, #2
 8000dc2:	e785      	b.n	8000cd0 <__aeabi_dadd+0x174>
 8000dc4:	4664      	mov	r4, ip
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	4641      	mov	r1, r8
 8000dca:	0010      	movs	r0, r2
 8000dcc:	001d      	movs	r5, r3
 8000dce:	e7c7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x27a>
 8000dd4:	e0da      	b.n	8000f8c <__aeabi_dadd+0x430>
 8000dd6:	000c      	movs	r4, r1
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	d0f3      	beq.n	8000dc4 <__aeabi_dadd+0x268>
 8000ddc:	1c5c      	adds	r4, r3, #1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x286>
 8000de0:	e19f      	b.n	8001122 <__aeabi_dadd+0x5c6>
 8000de2:	4c5d      	ldr	r4, [pc, #372]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000de4:	42a6      	cmp	r6, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x28e>
 8000de8:	e12f      	b.n	800104a <__aeabi_dadd+0x4ee>
 8000dea:	43db      	mvns	r3, r3
 8000dec:	2b38      	cmp	r3, #56	; 0x38
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x296>
 8000df0:	e166      	b.n	80010c0 <__aeabi_dadd+0x564>
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x29c>
 8000df6:	e183      	b.n	8001100 <__aeabi_dadd+0x5a4>
 8000df8:	2420      	movs	r4, #32
 8000dfa:	0005      	movs	r5, r0
 8000dfc:	1ae4      	subs	r4, r4, r3
 8000dfe:	000f      	movs	r7, r1
 8000e00:	40dd      	lsrs	r5, r3
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	40a0      	lsls	r0, r4
 8000e06:	4643      	mov	r3, r8
 8000e08:	40a7      	lsls	r7, r4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	1e44      	subs	r4, r0, #1
 8000e0e:	41a0      	sbcs	r0, r4
 8000e10:	4698      	mov	r8, r3
 8000e12:	432f      	orrs	r7, r5
 8000e14:	4338      	orrs	r0, r7
 8000e16:	1a17      	subs	r7, r2, r0
 8000e18:	42ba      	cmp	r2, r7
 8000e1a:	4192      	sbcs	r2, r2
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a99      	subs	r1, r3, r2
 8000e22:	4664      	mov	r4, ip
 8000e24:	0035      	movs	r5, r6
 8000e26:	e6ca      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000e28:	2207      	movs	r2, #7
 8000e2a:	403a      	ands	r2, r7
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x2d6>
 8000e30:	e6f6      	b.n	8000c20 <__aeabi_dadd+0xc4>
 8000e32:	074b      	lsls	r3, r1, #29
 8000e34:	08ca      	lsrs	r2, r1, #3
 8000e36:	4948      	ldr	r1, [pc, #288]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e38:	08ff      	lsrs	r7, r7, #3
 8000e3a:	433b      	orrs	r3, r7
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d196      	bne.n	8000d6e <__aeabi_dadd+0x212>
 8000e40:	0019      	movs	r1, r3
 8000e42:	4311      	orrs	r1, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x2ec>
 8000e46:	e19e      	b.n	8001186 <__aeabi_dadd+0x62a>
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	0b12      	lsrs	r2, r2, #12
 8000e52:	4d41      	ldr	r5, [pc, #260]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e54:	e78f      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e56:	0015      	movs	r5, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e78b      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x308>
 8000e62:	e0c7      	b.n	8000ff4 <__aeabi_dadd+0x498>
 8000e64:	1c6b      	adds	r3, r5, #1
 8000e66:	055f      	lsls	r7, r3, #21
 8000e68:	0d7f      	lsrs	r7, r7, #21
 8000e6a:	2f01      	cmp	r7, #1
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x314>
 8000e6e:	e0f1      	b.n	8001054 <__aeabi_dadd+0x4f8>
 8000e70:	4d39      	ldr	r5, [pc, #228]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x31c>
 8000e76:	e0b9      	b.n	8000fec <__aeabi_dadd+0x490>
 8000e78:	1885      	adds	r5, r0, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4285      	cmp	r5, r0
 8000e7e:	4189      	sbcs	r1, r1
 8000e80:	4442      	add	r2, r8
 8000e82:	4249      	negs	r1, r1
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	2207      	movs	r2, #7
 8000e88:	07cf      	lsls	r7, r1, #31
 8000e8a:	086d      	lsrs	r5, r5, #1
 8000e8c:	432f      	orrs	r7, r5
 8000e8e:	0849      	lsrs	r1, r1, #1
 8000e90:	403a      	ands	r2, r7
 8000e92:	001d      	movs	r5, r3
 8000e94:	e6c2      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000e96:	2207      	movs	r2, #7
 8000e98:	4930      	ldr	r1, [pc, #192]	; (8000f5c <__aeabi_dadd+0x400>)
 8000e9a:	1aed      	subs	r5, r5, r3
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	403a      	ands	r2, r7
 8000ea0:	e6bc      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ea2:	003e      	movs	r6, r7
 8000ea4:	3828      	subs	r0, #40	; 0x28
 8000ea6:	4086      	lsls	r6, r0
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e69f      	b.n	8000bec <__aeabi_dadd+0x90>
 8000eac:	0038      	movs	r0, r7
 8000eae:	f001 fc29 	bl	8002704 <__clzsi2>
 8000eb2:	3020      	adds	r0, #32
 8000eb4:	e68e      	b.n	8000bd4 <__aeabi_dadd+0x78>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	001f      	movs	r7, r3
 8000ebc:	1e7a      	subs	r2, r7, #1
 8000ebe:	4197      	sbcs	r7, r2
 8000ec0:	1bc7      	subs	r7, r0, r7
 8000ec2:	42b8      	cmp	r0, r7
 8000ec4:	4180      	sbcs	r0, r0
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	e678      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000ecc:	000e      	movs	r6, r1
 8000ece:	003b      	movs	r3, r7
 8000ed0:	4306      	orrs	r6, r0
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d161      	bne.n	8000f9c <__aeabi_dadd+0x440>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x382>
 8000edc:	e0f4      	b.n	80010c8 <__aeabi_dadd+0x56c>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x388>
 8000ee2:	e11b      	b.n	800111c <__aeabi_dadd+0x5c0>
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	0039      	movs	r1, r7
 8000ee8:	0010      	movs	r0, r2
 8000eea:	e739      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000eec:	4f1a      	ldr	r7, [pc, #104]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000eee:	42bb      	cmp	r3, r7
 8000ef0:	d07a      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	e6ff      	b.n	8000cf6 <__aeabi_dadd+0x19a>
 8000ef6:	0030      	movs	r0, r6
 8000ef8:	3d1f      	subs	r5, #31
 8000efa:	40e8      	lsrs	r0, r5
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d003      	beq.n	8000f08 <__aeabi_dadd+0x3ac>
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	409e      	lsls	r6, r3
 8000f06:	4337      	orrs	r7, r6
 8000f08:	1e7b      	subs	r3, r7, #1
 8000f0a:	419f      	sbcs	r7, r3
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4307      	orrs	r7, r0
 8000f10:	403a      	ands	r2, r7
 8000f12:	2100      	movs	r1, #0
 8000f14:	2500      	movs	r5, #0
 8000f16:	e789      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8000f18:	1a17      	subs	r7, r2, r0
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	42ba      	cmp	r2, r7
 8000f1e:	41b6      	sbcs	r6, r6
 8000f20:	1a59      	subs	r1, r3, r1
 8000f22:	4276      	negs	r6, r6
 8000f24:	1b8e      	subs	r6, r1, r6
 8000f26:	4664      	mov	r4, ip
 8000f28:	e64e      	b.n	8000bc8 <__aeabi_dadd+0x6c>
 8000f2a:	2b1f      	cmp	r3, #31
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dadd+0x3d4>
 8000f2e:	e0ad      	b.n	800108c <__aeabi_dadd+0x530>
 8000f30:	2620      	movs	r6, #32
 8000f32:	4647      	mov	r7, r8
 8000f34:	1af6      	subs	r6, r6, r3
 8000f36:	40b7      	lsls	r7, r6
 8000f38:	46b9      	mov	r9, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	40df      	lsrs	r7, r3
 8000f40:	464e      	mov	r6, r9
 8000f42:	433e      	orrs	r6, r7
 8000f44:	0037      	movs	r7, r6
 8000f46:	4656      	mov	r6, sl
 8000f48:	40b2      	lsls	r2, r6
 8000f4a:	1e56      	subs	r6, r2, #1
 8000f4c:	41b2      	sbcs	r2, r6
 8000f4e:	4317      	orrs	r7, r2
 8000f50:	4642      	mov	r2, r8
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1889      	adds	r1, r1, r2
 8000f56:	e6ae      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ff7fffff 	.word	0xff7fffff
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	2620      	movs	r6, #32
 8000f66:	4647      	mov	r7, r8
 8000f68:	1af6      	subs	r6, r6, r3
 8000f6a:	40b7      	lsls	r7, r6
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	46b2      	mov	sl, r6
 8000f72:	40df      	lsrs	r7, r3
 8000f74:	464e      	mov	r6, r9
 8000f76:	433e      	orrs	r6, r7
 8000f78:	0037      	movs	r7, r6
 8000f7a:	4656      	mov	r6, sl
 8000f7c:	40b2      	lsls	r2, r6
 8000f7e:	1e56      	subs	r6, r2, #1
 8000f80:	41b2      	sbcs	r2, r6
 8000f82:	4317      	orrs	r7, r2
 8000f84:	4642      	mov	r2, r8
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	e799      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000f8c:	4c7f      	ldr	r4, [pc, #508]	; (800118c <__aeabi_dadd+0x630>)
 8000f8e:	42a6      	cmp	r6, r4
 8000f90:	d05b      	beq.n	800104a <__aeabi_dadd+0x4ee>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	0424      	lsls	r4, r4, #16
 8000f96:	425b      	negs	r3, r3
 8000f98:	4321      	orrs	r1, r4
 8000f9a:	e727      	b.n	8000dec <__aeabi_dadd+0x290>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_dadd+0x45e>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x44a>
 8000fa4:	e0cb      	b.n	800113e <__aeabi_dadd+0x5e2>
 8000fa6:	4664      	mov	r4, ip
 8000fa8:	0039      	movs	r1, r7
 8000faa:	0010      	movs	r0, r2
 8000fac:	4d77      	ldr	r5, [pc, #476]	; (800118c <__aeabi_dadd+0x630>)
 8000fae:	e6d7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fb0:	4f76      	ldr	r7, [pc, #472]	; (800118c <__aeabi_dadd+0x630>)
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	d018      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e675      	b.n	8000ca6 <__aeabi_dadd+0x14a>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d014      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fbe:	074b      	lsls	r3, r1, #29
 8000fc0:	08c0      	lsrs	r0, r0, #3
 8000fc2:	4318      	orrs	r0, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	08c9      	lsrs	r1, r1, #3
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4219      	tst	r1, r3
 8000fcc:	d007      	beq.n	8000fde <__aeabi_dadd+0x482>
 8000fce:	08fc      	lsrs	r4, r7, #3
 8000fd0:	421c      	tst	r4, r3
 8000fd2:	d104      	bne.n	8000fde <__aeabi_dadd+0x482>
 8000fd4:	0779      	lsls	r1, r7, #29
 8000fd6:	08d0      	lsrs	r0, r2, #3
 8000fd8:	4308      	orrs	r0, r1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	0021      	movs	r1, r4
 8000fde:	464c      	mov	r4, r9
 8000fe0:	0f42      	lsrs	r2, r0, #29
 8000fe2:	00c9      	lsls	r1, r1, #3
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	00c0      	lsls	r0, r0, #3
 8000fe8:	4d68      	ldr	r5, [pc, #416]	; (800118c <__aeabi_dadd+0x630>)
 8000fea:	e6b9      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fec:	001d      	movs	r5, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e6c0      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d15b      	bne.n	80010b0 <__aeabi_dadd+0x554>
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x4a4>
 8000ffe:	e6e2      	b.n	8000dc6 <__aeabi_dadd+0x26a>
 8001000:	1c5d      	adds	r5, r3, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x4aa>
 8001004:	e0b0      	b.n	8001168 <__aeabi_dadd+0x60c>
 8001006:	4d61      	ldr	r5, [pc, #388]	; (800118c <__aeabi_dadd+0x630>)
 8001008:	42ae      	cmp	r6, r5
 800100a:	d01f      	beq.n	800104c <__aeabi_dadd+0x4f0>
 800100c:	43db      	mvns	r3, r3
 800100e:	2b38      	cmp	r3, #56	; 0x38
 8001010:	dc71      	bgt.n	80010f6 <__aeabi_dadd+0x59a>
 8001012:	2b1f      	cmp	r3, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dadd+0x4bc>
 8001016:	e096      	b.n	8001146 <__aeabi_dadd+0x5ea>
 8001018:	2520      	movs	r5, #32
 800101a:	000f      	movs	r7, r1
 800101c:	1aed      	subs	r5, r5, r3
 800101e:	40af      	lsls	r7, r5
 8001020:	46b9      	mov	r9, r7
 8001022:	0007      	movs	r7, r0
 8001024:	46aa      	mov	sl, r5
 8001026:	40df      	lsrs	r7, r3
 8001028:	464d      	mov	r5, r9
 800102a:	433d      	orrs	r5, r7
 800102c:	002f      	movs	r7, r5
 800102e:	4655      	mov	r5, sl
 8001030:	40a8      	lsls	r0, r5
 8001032:	40d9      	lsrs	r1, r3
 8001034:	1e45      	subs	r5, r0, #1
 8001036:	41a8      	sbcs	r0, r5
 8001038:	4488      	add	r8, r1
 800103a:	4307      	orrs	r7, r0
 800103c:	18bf      	adds	r7, r7, r2
 800103e:	4297      	cmp	r7, r2
 8001040:	4192      	sbcs	r2, r2
 8001042:	4251      	negs	r1, r2
 8001044:	4441      	add	r1, r8
 8001046:	0035      	movs	r5, r6
 8001048:	e63a      	b.n	8000cc0 <__aeabi_dadd+0x164>
 800104a:	4664      	mov	r4, ip
 800104c:	0035      	movs	r5, r6
 800104e:	4641      	mov	r1, r8
 8001050:	0010      	movs	r0, r2
 8001052:	e685      	b.n	8000d60 <__aeabi_dadd+0x204>
 8001054:	000b      	movs	r3, r1
 8001056:	4303      	orrs	r3, r0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x502>
 800105c:	e663      	b.n	8000d26 <__aeabi_dadd+0x1ca>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f5      	beq.n	800104e <__aeabi_dadd+0x4f2>
 8001062:	4643      	mov	r3, r8
 8001064:	4313      	orrs	r3, r2
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x50e>
 8001068:	e67a      	b.n	8000d60 <__aeabi_dadd+0x204>
 800106a:	1887      	adds	r7, r0, r2
 800106c:	4287      	cmp	r7, r0
 800106e:	4180      	sbcs	r0, r0
 8001070:	2207      	movs	r2, #7
 8001072:	4441      	add	r1, r8
 8001074:	4240      	negs	r0, r0
 8001076:	1809      	adds	r1, r1, r0
 8001078:	403a      	ands	r2, r7
 800107a:	020b      	lsls	r3, r1, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dadd+0x524>
 800107e:	e6d5      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <__aeabi_dadd+0x634>)
 8001082:	3501      	adds	r5, #1
 8001084:	4019      	ands	r1, r3
 8001086:	e5c9      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8001088:	0038      	movs	r0, r7
 800108a:	e669      	b.n	8000d60 <__aeabi_dadd+0x204>
 800108c:	001e      	movs	r6, r3
 800108e:	4647      	mov	r7, r8
 8001090:	3e20      	subs	r6, #32
 8001092:	40f7      	lsrs	r7, r6
 8001094:	46bc      	mov	ip, r7
 8001096:	2b20      	cmp	r3, #32
 8001098:	d004      	beq.n	80010a4 <__aeabi_dadd+0x548>
 800109a:	2640      	movs	r6, #64	; 0x40
 800109c:	1af3      	subs	r3, r6, r3
 800109e:	4646      	mov	r6, r8
 80010a0:	409e      	lsls	r6, r3
 80010a2:	4332      	orrs	r2, r6
 80010a4:	0017      	movs	r7, r2
 80010a6:	4663      	mov	r3, ip
 80010a8:	1e7a      	subs	r2, r7, #1
 80010aa:	4197      	sbcs	r7, r2
 80010ac:	431f      	orrs	r7, r3
 80010ae:	e602      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 80010b0:	4d36      	ldr	r5, [pc, #216]	; (800118c <__aeabi_dadd+0x630>)
 80010b2:	42ae      	cmp	r6, r5
 80010b4:	d0ca      	beq.n	800104c <__aeabi_dadd+0x4f0>
 80010b6:	2580      	movs	r5, #128	; 0x80
 80010b8:	042d      	lsls	r5, r5, #16
 80010ba:	425b      	negs	r3, r3
 80010bc:	4329      	orrs	r1, r5
 80010be:	e7a6      	b.n	800100e <__aeabi_dadd+0x4b2>
 80010c0:	4308      	orrs	r0, r1
 80010c2:	1e41      	subs	r1, r0, #1
 80010c4:	4188      	sbcs	r0, r1
 80010c6:	e6a6      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x572>
 80010cc:	e648      	b.n	8000d60 <__aeabi_dadd+0x204>
 80010ce:	1a87      	subs	r7, r0, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	42b8      	cmp	r0, r7
 80010d4:	41b6      	sbcs	r6, r6
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	4276      	negs	r6, r6
 80010da:	1b9e      	subs	r6, r3, r6
 80010dc:	0233      	lsls	r3, r6, #8
 80010de:	d54b      	bpl.n	8001178 <__aeabi_dadd+0x61c>
 80010e0:	1a17      	subs	r7, r2, r0
 80010e2:	4643      	mov	r3, r8
 80010e4:	42ba      	cmp	r2, r7
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	1a59      	subs	r1, r3, r1
 80010ea:	4252      	negs	r2, r2
 80010ec:	1a89      	subs	r1, r1, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	4664      	mov	r4, ip
 80010f2:	403a      	ands	r2, r7
 80010f4:	e592      	b.n	8000c1c <__aeabi_dadd+0xc0>
 80010f6:	4301      	orrs	r1, r0
 80010f8:	000f      	movs	r7, r1
 80010fa:	1e79      	subs	r1, r7, #1
 80010fc:	418f      	sbcs	r7, r1
 80010fe:	e79d      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001100:	001c      	movs	r4, r3
 8001102:	000f      	movs	r7, r1
 8001104:	3c20      	subs	r4, #32
 8001106:	40e7      	lsrs	r7, r4
 8001108:	2b20      	cmp	r3, #32
 800110a:	d003      	beq.n	8001114 <__aeabi_dadd+0x5b8>
 800110c:	2440      	movs	r4, #64	; 0x40
 800110e:	1ae3      	subs	r3, r4, r3
 8001110:	4099      	lsls	r1, r3
 8001112:	4308      	orrs	r0, r1
 8001114:	1e41      	subs	r1, r0, #1
 8001116:	4188      	sbcs	r0, r1
 8001118:	4338      	orrs	r0, r7
 800111a:	e67c      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 800111c:	2200      	movs	r2, #0
 800111e:	2400      	movs	r4, #0
 8001120:	e625      	b.n	8000d6e <__aeabi_dadd+0x212>
 8001122:	1a17      	subs	r7, r2, r0
 8001124:	4643      	mov	r3, r8
 8001126:	42ba      	cmp	r2, r7
 8001128:	4192      	sbcs	r2, r2
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	4252      	negs	r2, r2
 800112e:	1a89      	subs	r1, r1, r2
 8001130:	4664      	mov	r4, ip
 8001132:	0035      	movs	r5, r6
 8001134:	e543      	b.n	8000bbe <__aeabi_dadd+0x62>
 8001136:	4641      	mov	r1, r8
 8001138:	0010      	movs	r0, r2
 800113a:	4d14      	ldr	r5, [pc, #80]	; (800118c <__aeabi_dadd+0x630>)
 800113c:	e610      	b.n	8000d60 <__aeabi_dadd+0x204>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	2400      	movs	r4, #0
 8001142:	0312      	lsls	r2, r2, #12
 8001144:	e680      	b.n	8000e48 <__aeabi_dadd+0x2ec>
 8001146:	001d      	movs	r5, r3
 8001148:	000f      	movs	r7, r1
 800114a:	3d20      	subs	r5, #32
 800114c:	40ef      	lsrs	r7, r5
 800114e:	46bc      	mov	ip, r7
 8001150:	2b20      	cmp	r3, #32
 8001152:	d003      	beq.n	800115c <__aeabi_dadd+0x600>
 8001154:	2540      	movs	r5, #64	; 0x40
 8001156:	1aeb      	subs	r3, r5, r3
 8001158:	4099      	lsls	r1, r3
 800115a:	4308      	orrs	r0, r1
 800115c:	0007      	movs	r7, r0
 800115e:	4663      	mov	r3, ip
 8001160:	1e78      	subs	r0, r7, #1
 8001162:	4187      	sbcs	r7, r0
 8001164:	431f      	orrs	r7, r3
 8001166:	e769      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001168:	1887      	adds	r7, r0, r2
 800116a:	4297      	cmp	r7, r2
 800116c:	419b      	sbcs	r3, r3
 800116e:	4441      	add	r1, r8
 8001170:	425b      	negs	r3, r3
 8001172:	18c9      	adds	r1, r1, r3
 8001174:	0035      	movs	r5, r6
 8001176:	e5a3      	b.n	8000cc0 <__aeabi_dadd+0x164>
 8001178:	003b      	movs	r3, r7
 800117a:	4333      	orrs	r3, r6
 800117c:	d0ce      	beq.n	800111c <__aeabi_dadd+0x5c0>
 800117e:	2207      	movs	r2, #7
 8001180:	0031      	movs	r1, r6
 8001182:	403a      	ands	r2, r7
 8001184:	e652      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001186:	2300      	movs	r3, #0
 8001188:	001a      	movs	r2, r3
 800118a:	e5f4      	b.n	8000d76 <__aeabi_dadd+0x21a>
 800118c:	000007ff 	.word	0x000007ff
 8001190:	ff7fffff 	.word	0xff7fffff

08001194 <__aeabi_ddiv>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	4657      	mov	r7, sl
 8001198:	46de      	mov	lr, fp
 800119a:	464e      	mov	r6, r9
 800119c:	4645      	mov	r5, r8
 800119e:	b5e0      	push	{r5, r6, r7, lr}
 80011a0:	4683      	mov	fp, r0
 80011a2:	0007      	movs	r7, r0
 80011a4:	030e      	lsls	r6, r1, #12
 80011a6:	0048      	lsls	r0, r1, #1
 80011a8:	b085      	sub	sp, #20
 80011aa:	4692      	mov	sl, r2
 80011ac:	001c      	movs	r4, r3
 80011ae:	0b36      	lsrs	r6, r6, #12
 80011b0:	0d40      	lsrs	r0, r0, #21
 80011b2:	0fcd      	lsrs	r5, r1, #31
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x26>
 80011b8:	e09d      	b.n	80012f6 <__aeabi_ddiv+0x162>
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d039      	beq.n	8001234 <__aeabi_ddiv+0xa0>
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	00f6      	lsls	r6, r6, #3
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431e      	orrs	r6, r3
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <__aeabi_ddiv+0x280>)
 80011ca:	0f7b      	lsrs	r3, r7, #29
 80011cc:	4333      	orrs	r3, r6
 80011ce:	4699      	mov	r9, r3
 80011d0:	4694      	mov	ip, r2
 80011d2:	0003      	movs	r3, r0
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2600      	movs	r6, #0
 80011dc:	00ff      	lsls	r7, r7, #3
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	0323      	lsls	r3, r4, #12
 80011e2:	0b1b      	lsrs	r3, r3, #12
 80011e4:	4698      	mov	r8, r3
 80011e6:	0063      	lsls	r3, r4, #1
 80011e8:	0fe4      	lsrs	r4, r4, #31
 80011ea:	4652      	mov	r2, sl
 80011ec:	0d5b      	lsrs	r3, r3, #21
 80011ee:	9401      	str	r4, [sp, #4]
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x60>
 80011f2:	e0b3      	b.n	800135c <__aeabi_ddiv+0x1c8>
 80011f4:	4986      	ldr	r1, [pc, #536]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x68>
 80011fa:	e09e      	b.n	800133a <__aeabi_ddiv+0x1a6>
 80011fc:	4642      	mov	r2, r8
 80011fe:	00d1      	lsls	r1, r2, #3
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	430a      	orrs	r2, r1
 8001206:	4651      	mov	r1, sl
 8001208:	0f49      	lsrs	r1, r1, #29
 800120a:	4311      	orrs	r1, r2
 800120c:	468b      	mov	fp, r1
 800120e:	4981      	ldr	r1, [pc, #516]	; (8001414 <__aeabi_ddiv+0x280>)
 8001210:	4652      	mov	r2, sl
 8001212:	468c      	mov	ip, r1
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	4463      	add	r3, ip
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	2100      	movs	r1, #0
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	002b      	movs	r3, r5
 8001222:	4063      	eors	r3, r4
 8001224:	469a      	mov	sl, r3
 8001226:	2e0f      	cmp	r6, #15
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x98>
 800122a:	e105      	b.n	8001438 <__aeabi_ddiv+0x2a4>
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <__aeabi_ddiv+0x284>)
 800122e:	00b6      	lsls	r6, r6, #2
 8001230:	599b      	ldr	r3, [r3, r6]
 8001232:	469f      	mov	pc, r3
 8001234:	465b      	mov	r3, fp
 8001236:	4333      	orrs	r3, r6
 8001238:	4699      	mov	r9, r3
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0xaa>
 800123c:	e0b8      	b.n	80013b0 <__aeabi_ddiv+0x21c>
 800123e:	2302      	movs	r3, #2
 8001240:	2608      	movs	r6, #8
 8001242:	2700      	movs	r7, #0
 8001244:	9000      	str	r0, [sp, #0]
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	e7ca      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800124a:	46cb      	mov	fp, r9
 800124c:	003a      	movs	r2, r7
 800124e:	9902      	ldr	r1, [sp, #8]
 8001250:	9501      	str	r5, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	469a      	mov	sl, r3
 8001256:	2902      	cmp	r1, #2
 8001258:	d027      	beq.n	80012aa <__aeabi_ddiv+0x116>
 800125a:	2903      	cmp	r1, #3
 800125c:	d100      	bne.n	8001260 <__aeabi_ddiv+0xcc>
 800125e:	e280      	b.n	8001762 <__aeabi_ddiv+0x5ce>
 8001260:	2901      	cmp	r1, #1
 8001262:	d044      	beq.n	80012ee <__aeabi_ddiv+0x15a>
 8001264:	496d      	ldr	r1, [pc, #436]	; (800141c <__aeabi_ddiv+0x288>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	001c      	movs	r4, r3
 800126e:	2c00      	cmp	r4, #0
 8001270:	dd38      	ble.n	80012e4 <__aeabi_ddiv+0x150>
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	d000      	beq.n	8001278 <__aeabi_ddiv+0xe4>
 8001276:	e213      	b.n	80016a0 <__aeabi_ddiv+0x50c>
 8001278:	08d2      	lsrs	r2, r2, #3
 800127a:	465b      	mov	r3, fp
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	d509      	bpl.n	8001294 <__aeabi_ddiv+0x100>
 8001280:	4659      	mov	r1, fp
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <__aeabi_ddiv+0x28c>)
 8001284:	4019      	ands	r1, r3
 8001286:	468b      	mov	fp, r1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	00c9      	lsls	r1, r1, #3
 800128c:	468c      	mov	ip, r1
 800128e:	9b00      	ldr	r3, [sp, #0]
 8001290:	4463      	add	r3, ip
 8001292:	001c      	movs	r4, r3
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <__aeabi_ddiv+0x290>)
 8001296:	429c      	cmp	r4, r3
 8001298:	dc07      	bgt.n	80012aa <__aeabi_ddiv+0x116>
 800129a:	465b      	mov	r3, fp
 800129c:	0564      	lsls	r4, r4, #21
 800129e:	075f      	lsls	r7, r3, #29
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4317      	orrs	r7, r2
 80012a4:	0b1b      	lsrs	r3, r3, #12
 80012a6:	0d62      	lsrs	r2, r4, #21
 80012a8:	e002      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2700      	movs	r7, #0
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <__aeabi_ddiv+0x27c>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	0b1c      	lsrs	r4, r3, #12
 80012b6:	0d0b      	lsrs	r3, r1, #20
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	4323      	orrs	r3, r4
 80012bc:	0514      	lsls	r4, r2, #20
 80012be:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <__aeabi_ddiv+0x294>)
 80012c0:	0038      	movs	r0, r7
 80012c2:	4013      	ands	r3, r2
 80012c4:	431c      	orrs	r4, r3
 80012c6:	4653      	mov	r3, sl
 80012c8:	0064      	lsls	r4, r4, #1
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	0864      	lsrs	r4, r4, #1
 80012ce:	431c      	orrs	r4, r3
 80012d0:	0021      	movs	r1, r4
 80012d2:	b005      	add	sp, #20
 80012d4:	bc3c      	pop	{r2, r3, r4, r5}
 80012d6:	4690      	mov	r8, r2
 80012d8:	4699      	mov	r9, r3
 80012da:	46a2      	mov	sl, r4
 80012dc:	46ab      	mov	fp, r5
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	2201      	movs	r2, #1
 80012e2:	4252      	negs	r2, r2
 80012e4:	2301      	movs	r3, #1
 80012e6:	1b1b      	subs	r3, r3, r4
 80012e8:	2b38      	cmp	r3, #56	; 0x38
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_ddiv+0x15a>
 80012ec:	e1ad      	b.n	800164a <__aeabi_ddiv+0x4b6>
 80012ee:	2200      	movs	r2, #0
 80012f0:	2300      	movs	r3, #0
 80012f2:	2700      	movs	r7, #0
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012f6:	465b      	mov	r3, fp
 80012f8:	4333      	orrs	r3, r6
 80012fa:	4699      	mov	r9, r3
 80012fc:	d05e      	beq.n	80013bc <__aeabi_ddiv+0x228>
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x170>
 8001302:	e18a      	b.n	800161a <__aeabi_ddiv+0x486>
 8001304:	0030      	movs	r0, r6
 8001306:	f001 f9fd 	bl	8002704 <__clzsi2>
 800130a:	0003      	movs	r3, r0
 800130c:	3b0b      	subs	r3, #11
 800130e:	2b1c      	cmp	r3, #28
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x180>
 8001312:	e17b      	b.n	800160c <__aeabi_ddiv+0x478>
 8001314:	221d      	movs	r2, #29
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	465a      	mov	r2, fp
 800131a:	0001      	movs	r1, r0
 800131c:	40da      	lsrs	r2, r3
 800131e:	3908      	subs	r1, #8
 8001320:	408e      	lsls	r6, r1
 8001322:	0013      	movs	r3, r2
 8001324:	465f      	mov	r7, fp
 8001326:	4333      	orrs	r3, r6
 8001328:	4699      	mov	r9, r3
 800132a:	408f      	lsls	r7, r1
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <__aeabi_ddiv+0x298>)
 800132e:	2600      	movs	r6, #0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e752      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800133a:	4641      	mov	r1, r8
 800133c:	4653      	mov	r3, sl
 800133e:	430b      	orrs	r3, r1
 8001340:	493b      	ldr	r1, [pc, #236]	; (8001430 <__aeabi_ddiv+0x29c>)
 8001342:	469b      	mov	fp, r3
 8001344:	468c      	mov	ip, r1
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	4463      	add	r3, ip
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	465b      	mov	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	d13b      	bne.n	80013ca <__aeabi_ddiv+0x236>
 8001352:	2302      	movs	r3, #2
 8001354:	2200      	movs	r2, #0
 8001356:	431e      	orrs	r6, r3
 8001358:	2102      	movs	r1, #2
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x8c>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	469b      	mov	fp, r3
 8001362:	d037      	beq.n	80013d4 <__aeabi_ddiv+0x240>
 8001364:	4643      	mov	r3, r8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x1d8>
 800136a:	e162      	b.n	8001632 <__aeabi_ddiv+0x49e>
 800136c:	4640      	mov	r0, r8
 800136e:	f001 f9c9 	bl	8002704 <__clzsi2>
 8001372:	0003      	movs	r3, r0
 8001374:	3b0b      	subs	r3, #11
 8001376:	2b1c      	cmp	r3, #28
 8001378:	dd00      	ble.n	800137c <__aeabi_ddiv+0x1e8>
 800137a:	e153      	b.n	8001624 <__aeabi_ddiv+0x490>
 800137c:	0002      	movs	r2, r0
 800137e:	4641      	mov	r1, r8
 8001380:	3a08      	subs	r2, #8
 8001382:	4091      	lsls	r1, r2
 8001384:	4688      	mov	r8, r1
 8001386:	211d      	movs	r1, #29
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	4651      	mov	r1, sl
 800138c:	40d9      	lsrs	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	4641      	mov	r1, r8
 8001392:	430b      	orrs	r3, r1
 8001394:	469b      	mov	fp, r3
 8001396:	4653      	mov	r3, sl
 8001398:	4093      	lsls	r3, r2
 800139a:	001a      	movs	r2, r3
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <__aeabi_ddiv+0x2a0>)
 80013a0:	469c      	mov	ip, r3
 80013a2:	4460      	add	r0, ip
 80013a4:	0003      	movs	r3, r0
 80013a6:	468c      	mov	ip, r1
 80013a8:	4463      	add	r3, ip
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e737      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013b0:	2303      	movs	r3, #3
 80013b2:	46b1      	mov	r9, r6
 80013b4:	9000      	str	r0, [sp, #0]
 80013b6:	260c      	movs	r6, #12
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	e711      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	2604      	movs	r6, #4
 80013c4:	2700      	movs	r7, #0
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	e70a      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013ca:	2303      	movs	r3, #3
 80013cc:	46c3      	mov	fp, r8
 80013ce:	431e      	orrs	r6, r3
 80013d0:	2103      	movs	r1, #3
 80013d2:	e725      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013d4:	3301      	adds	r3, #1
 80013d6:	431e      	orrs	r6, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	e720      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013de:	2300      	movs	r3, #0
 80013e0:	469a      	mov	sl, r3
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	2700      	movs	r7, #0
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <__aeabi_ddiv+0x27c>)
 80013ea:	e761      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	4649      	mov	r1, r9
 80013f0:	031b      	lsls	r3, r3, #12
 80013f2:	4219      	tst	r1, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x264>
 80013f6:	e0e2      	b.n	80015be <__aeabi_ddiv+0x42a>
 80013f8:	4659      	mov	r1, fp
 80013fa:	4219      	tst	r1, r3
 80013fc:	d000      	beq.n	8001400 <__aeabi_ddiv+0x26c>
 80013fe:	e0de      	b.n	80015be <__aeabi_ddiv+0x42a>
 8001400:	430b      	orrs	r3, r1
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0017      	movs	r7, r2
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	46a2      	mov	sl, r4
 800140a:	4a01      	ldr	r2, [pc, #4]	; (8001410 <__aeabi_ddiv+0x27c>)
 800140c:	e750      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	fffffc01 	.word	0xfffffc01
 8001418:	080212e0 	.word	0x080212e0
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	800fffff 	.word	0x800fffff
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	fffff801 	.word	0xfffff801
 8001434:	000003f3 	.word	0x000003f3
 8001438:	45d9      	cmp	r9, fp
 800143a:	d900      	bls.n	800143e <__aeabi_ddiv+0x2aa>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x442>
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x2ae>
 8001440:	e0c6      	b.n	80015d0 <__aeabi_ddiv+0x43c>
 8001442:	003c      	movs	r4, r7
 8001444:	4648      	mov	r0, r9
 8001446:	2700      	movs	r7, #0
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	465b      	mov	r3, fp
 8001450:	0e16      	lsrs	r6, r2, #24
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	431e      	orrs	r6, r3
 8001456:	0213      	lsls	r3, r2, #8
 8001458:	4698      	mov	r8, r3
 800145a:	0433      	lsls	r3, r6, #16
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	4699      	mov	r9, r3
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	9101      	str	r1, [sp, #4]
 8001464:	f7fe fede 	bl	8000224 <__aeabi_uidivmod>
 8001468:	464a      	mov	r2, r9
 800146a:	4342      	muls	r2, r0
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	0c21      	lsrs	r1, r4, #16
 8001470:	0005      	movs	r5, r0
 8001472:	4319      	orrs	r1, r3
 8001474:	428a      	cmp	r2, r1
 8001476:	d907      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001478:	1989      	adds	r1, r1, r6
 800147a:	3d01      	subs	r5, #1
 800147c:	428e      	cmp	r6, r1
 800147e:	d803      	bhi.n	8001488 <__aeabi_ddiv+0x2f4>
 8001480:	428a      	cmp	r2, r1
 8001482:	d901      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001484:	1e85      	subs	r5, r0, #2
 8001486:	1989      	adds	r1, r1, r6
 8001488:	1a88      	subs	r0, r1, r2
 800148a:	9901      	ldr	r1, [sp, #4]
 800148c:	f7fe feca 	bl	8000224 <__aeabi_uidivmod>
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	468c      	mov	ip, r1
 8001494:	464a      	mov	r2, r9
 8001496:	0421      	lsls	r1, r4, #16
 8001498:	4664      	mov	r4, ip
 800149a:	4342      	muls	r2, r0
 800149c:	0c09      	lsrs	r1, r1, #16
 800149e:	0003      	movs	r3, r0
 80014a0:	4321      	orrs	r1, r4
 80014a2:	428a      	cmp	r2, r1
 80014a4:	d904      	bls.n	80014b0 <__aeabi_ddiv+0x31c>
 80014a6:	1989      	adds	r1, r1, r6
 80014a8:	3b01      	subs	r3, #1
 80014aa:	428e      	cmp	r6, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x31c>
 80014ae:	e0f1      	b.n	8001694 <__aeabi_ddiv+0x500>
 80014b0:	042d      	lsls	r5, r5, #16
 80014b2:	431d      	orrs	r5, r3
 80014b4:	46ab      	mov	fp, r5
 80014b6:	4643      	mov	r3, r8
 80014b8:	1a89      	subs	r1, r1, r2
 80014ba:	4642      	mov	r2, r8
 80014bc:	0c28      	lsrs	r0, r5, #16
 80014be:	0412      	lsls	r2, r2, #16
 80014c0:	0c1d      	lsrs	r5, r3, #16
 80014c2:	465b      	mov	r3, fp
 80014c4:	0c14      	lsrs	r4, r2, #16
 80014c6:	0022      	movs	r2, r4
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	435a      	muls	r2, r3
 80014ce:	9403      	str	r4, [sp, #12]
 80014d0:	436b      	muls	r3, r5
 80014d2:	4344      	muls	r4, r0
 80014d4:	9502      	str	r5, [sp, #8]
 80014d6:	4368      	muls	r0, r5
 80014d8:	191b      	adds	r3, r3, r4
 80014da:	0c15      	lsrs	r5, r2, #16
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	429c      	cmp	r4, r3
 80014e0:	d903      	bls.n	80014ea <__aeabi_ddiv+0x356>
 80014e2:	2480      	movs	r4, #128	; 0x80
 80014e4:	0264      	lsls	r4, r4, #9
 80014e6:	46a4      	mov	ip, r4
 80014e8:	4460      	add	r0, ip
 80014ea:	0c1c      	lsrs	r4, r3, #16
 80014ec:	0415      	lsls	r5, r2, #16
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	1820      	adds	r0, r4, r0
 80014f4:	195d      	adds	r5, r3, r5
 80014f6:	4281      	cmp	r1, r0
 80014f8:	d377      	bcc.n	80015ea <__aeabi_ddiv+0x456>
 80014fa:	d073      	beq.n	80015e4 <__aeabi_ddiv+0x450>
 80014fc:	1a0c      	subs	r4, r1, r0
 80014fe:	4aa2      	ldr	r2, [pc, #648]	; (8001788 <__aeabi_ddiv+0x5f4>)
 8001500:	1b7d      	subs	r5, r7, r5
 8001502:	42af      	cmp	r7, r5
 8001504:	41bf      	sbcs	r7, r7
 8001506:	4694      	mov	ip, r2
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	427f      	negs	r7, r7
 800150c:	4463      	add	r3, ip
 800150e:	1be0      	subs	r0, r4, r7
 8001510:	001c      	movs	r4, r3
 8001512:	4286      	cmp	r6, r0
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x384>
 8001516:	e0db      	b.n	80016d0 <__aeabi_ddiv+0x53c>
 8001518:	9901      	ldr	r1, [sp, #4]
 800151a:	f7fe fe83 	bl	8000224 <__aeabi_uidivmod>
 800151e:	464a      	mov	r2, r9
 8001520:	4342      	muls	r2, r0
 8001522:	040b      	lsls	r3, r1, #16
 8001524:	0c29      	lsrs	r1, r5, #16
 8001526:	0007      	movs	r7, r0
 8001528:	4319      	orrs	r1, r3
 800152a:	428a      	cmp	r2, r1
 800152c:	d907      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800152e:	1989      	adds	r1, r1, r6
 8001530:	3f01      	subs	r7, #1
 8001532:	428e      	cmp	r6, r1
 8001534:	d803      	bhi.n	800153e <__aeabi_ddiv+0x3aa>
 8001536:	428a      	cmp	r2, r1
 8001538:	d901      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800153a:	1e87      	subs	r7, r0, #2
 800153c:	1989      	adds	r1, r1, r6
 800153e:	1a88      	subs	r0, r1, r2
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	f7fe fe6f 	bl	8000224 <__aeabi_uidivmod>
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	464a      	mov	r2, r9
 800154a:	4689      	mov	r9, r1
 800154c:	0429      	lsls	r1, r5, #16
 800154e:	464d      	mov	r5, r9
 8001550:	4342      	muls	r2, r0
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	0003      	movs	r3, r0
 8001556:	4329      	orrs	r1, r5
 8001558:	428a      	cmp	r2, r1
 800155a:	d907      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 800155c:	1989      	adds	r1, r1, r6
 800155e:	3b01      	subs	r3, #1
 8001560:	428e      	cmp	r6, r1
 8001562:	d803      	bhi.n	800156c <__aeabi_ddiv+0x3d8>
 8001564:	428a      	cmp	r2, r1
 8001566:	d901      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 8001568:	1e83      	subs	r3, r0, #2
 800156a:	1989      	adds	r1, r1, r6
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	1a89      	subs	r1, r1, r2
 8001570:	003a      	movs	r2, r7
 8001572:	9f03      	ldr	r7, [sp, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	0038      	movs	r0, r7
 8001578:	0413      	lsls	r3, r2, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4358      	muls	r0, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9802      	ldr	r0, [sp, #8]
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	436f      	muls	r7, r5
 8001586:	4343      	muls	r3, r0
 8001588:	4345      	muls	r5, r0
 800158a:	4648      	mov	r0, r9
 800158c:	0c00      	lsrs	r0, r0, #16
 800158e:	4684      	mov	ip, r0
 8001590:	19db      	adds	r3, r3, r7
 8001592:	4463      	add	r3, ip
 8001594:	429f      	cmp	r7, r3
 8001596:	d903      	bls.n	80015a0 <__aeabi_ddiv+0x40c>
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	0240      	lsls	r0, r0, #9
 800159c:	4684      	mov	ip, r0
 800159e:	4465      	add	r5, ip
 80015a0:	4648      	mov	r0, r9
 80015a2:	0c1f      	lsrs	r7, r3, #16
 80015a4:	0400      	lsls	r0, r0, #16
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c00      	lsrs	r0, r0, #16
 80015aa:	197d      	adds	r5, r7, r5
 80015ac:	1818      	adds	r0, r3, r0
 80015ae:	42a9      	cmp	r1, r5
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x420>
 80015b2:	e084      	b.n	80016be <__aeabi_ddiv+0x52a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x424>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_ddiv+0x524>
 80015b8:	2301      	movs	r3, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	e657      	b.n	800126e <__aeabi_ddiv+0xda>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	464a      	mov	r2, r9
 80015c2:	031b      	lsls	r3, r3, #12
 80015c4:	4313      	orrs	r3, r2
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	0b1b      	lsrs	r3, r3, #12
 80015ca:	46aa      	mov	sl, r5
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <__aeabi_ddiv+0x5f8>)
 80015ce:	e66f      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80015d0:	42ba      	cmp	r2, r7
 80015d2:	d900      	bls.n	80015d6 <__aeabi_ddiv+0x442>
 80015d4:	e735      	b.n	8001442 <__aeabi_ddiv+0x2ae>
 80015d6:	464b      	mov	r3, r9
 80015d8:	07dc      	lsls	r4, r3, #31
 80015da:	0858      	lsrs	r0, r3, #1
 80015dc:	087b      	lsrs	r3, r7, #1
 80015de:	431c      	orrs	r4, r3
 80015e0:	07ff      	lsls	r7, r7, #31
 80015e2:	e734      	b.n	800144e <__aeabi_ddiv+0x2ba>
 80015e4:	2400      	movs	r4, #0
 80015e6:	42af      	cmp	r7, r5
 80015e8:	d289      	bcs.n	80014fe <__aeabi_ddiv+0x36a>
 80015ea:	4447      	add	r7, r8
 80015ec:	4547      	cmp	r7, r8
 80015ee:	41a4      	sbcs	r4, r4
 80015f0:	465b      	mov	r3, fp
 80015f2:	4264      	negs	r4, r4
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	1864      	adds	r4, r4, r1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d21e      	bcs.n	800163c <__aeabi_ddiv+0x4a8>
 80015fe:	42a0      	cmp	r0, r4
 8001600:	d86d      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001604:	e0b6      	b.n	8001774 <__aeabi_ddiv+0x5e0>
 8001606:	1a24      	subs	r4, r4, r0
 8001608:	469b      	mov	fp, r3
 800160a:	e778      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800160c:	0003      	movs	r3, r0
 800160e:	465a      	mov	r2, fp
 8001610:	3b28      	subs	r3, #40	; 0x28
 8001612:	409a      	lsls	r2, r3
 8001614:	2700      	movs	r7, #0
 8001616:	4691      	mov	r9, r2
 8001618:	e688      	b.n	800132c <__aeabi_ddiv+0x198>
 800161a:	4658      	mov	r0, fp
 800161c:	f001 f872 	bl	8002704 <__clzsi2>
 8001620:	3020      	adds	r0, #32
 8001622:	e672      	b.n	800130a <__aeabi_ddiv+0x176>
 8001624:	0003      	movs	r3, r0
 8001626:	4652      	mov	r2, sl
 8001628:	3b28      	subs	r3, #40	; 0x28
 800162a:	409a      	lsls	r2, r3
 800162c:	4693      	mov	fp, r2
 800162e:	2200      	movs	r2, #0
 8001630:	e6b4      	b.n	800139c <__aeabi_ddiv+0x208>
 8001632:	4650      	mov	r0, sl
 8001634:	f001 f866 	bl	8002704 <__clzsi2>
 8001638:	3020      	adds	r0, #32
 800163a:	e69a      	b.n	8001372 <__aeabi_ddiv+0x1de>
 800163c:	42a6      	cmp	r6, r4
 800163e:	d1e2      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001640:	45b8      	cmp	r8, r7
 8001642:	d9dc      	bls.n	80015fe <__aeabi_ddiv+0x46a>
 8001644:	1a34      	subs	r4, r6, r0
 8001646:	469b      	mov	fp, r3
 8001648:	e759      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc65      	bgt.n	800171a <__aeabi_ddiv+0x586>
 800164e:	4c50      	ldr	r4, [pc, #320]	; (8001790 <__aeabi_ddiv+0x5fc>)
 8001650:	9900      	ldr	r1, [sp, #0]
 8001652:	46a4      	mov	ip, r4
 8001654:	465c      	mov	r4, fp
 8001656:	4461      	add	r1, ip
 8001658:	0008      	movs	r0, r1
 800165a:	408c      	lsls	r4, r1
 800165c:	0011      	movs	r1, r2
 800165e:	4082      	lsls	r2, r0
 8001660:	40d9      	lsrs	r1, r3
 8001662:	1e50      	subs	r0, r2, #1
 8001664:	4182      	sbcs	r2, r0
 8001666:	430c      	orrs	r4, r1
 8001668:	4314      	orrs	r4, r2
 800166a:	465a      	mov	r2, fp
 800166c:	40da      	lsrs	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	0762      	lsls	r2, r4, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 8001674:	220f      	movs	r2, #15
 8001676:	4022      	ands	r2, r4
 8001678:	2a04      	cmp	r2, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 800167c:	0022      	movs	r2, r4
 800167e:	1d14      	adds	r4, r2, #4
 8001680:	4294      	cmp	r4, r2
 8001682:	4189      	sbcs	r1, r1
 8001684:	4249      	negs	r1, r1
 8001686:	185b      	adds	r3, r3, r1
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	d562      	bpl.n	8001752 <__aeabi_ddiv+0x5be>
 800168c:	2201      	movs	r2, #1
 800168e:	2300      	movs	r3, #0
 8001690:	2700      	movs	r7, #0
 8001692:	e60d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001694:	428a      	cmp	r2, r1
 8001696:	d800      	bhi.n	800169a <__aeabi_ddiv+0x506>
 8001698:	e70a      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 800169a:	1e83      	subs	r3, r0, #2
 800169c:	1989      	adds	r1, r1, r6
 800169e:	e707      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 80016a0:	230f      	movs	r3, #15
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d100      	bne.n	80016aa <__aeabi_ddiv+0x516>
 80016a8:	e5e6      	b.n	8001278 <__aeabi_ddiv+0xe4>
 80016aa:	1d17      	adds	r7, r2, #4
 80016ac:	4297      	cmp	r7, r2
 80016ae:	4192      	sbcs	r2, r2
 80016b0:	4253      	negs	r3, r2
 80016b2:	449b      	add	fp, r3
 80016b4:	08fa      	lsrs	r2, r7, #3
 80016b6:	e5e0      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x52a>
 80016bc:	e5d7      	b.n	800126e <__aeabi_ddiv+0xda>
 80016be:	1871      	adds	r1, r6, r1
 80016c0:	1e53      	subs	r3, r2, #1
 80016c2:	42b1      	cmp	r1, r6
 80016c4:	d327      	bcc.n	8001716 <__aeabi_ddiv+0x582>
 80016c6:	42a9      	cmp	r1, r5
 80016c8:	d315      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 80016ca:	d058      	beq.n	800177e <__aeabi_ddiv+0x5ea>
 80016cc:	001a      	movs	r2, r3
 80016ce:	e773      	b.n	80015b8 <__aeabi_ddiv+0x424>
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x542>
 80016d4:	e604      	b.n	80012e0 <__aeabi_ddiv+0x14c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	2200      	movs	r2, #0
 80016da:	449b      	add	fp, r3
 80016dc:	e5cd      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016de:	2302      	movs	r3, #2
 80016e0:	4447      	add	r7, r8
 80016e2:	4547      	cmp	r7, r8
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	4249      	negs	r1, r1
 80016ec:	1989      	adds	r1, r1, r6
 80016ee:	190c      	adds	r4, r1, r4
 80016f0:	44e3      	add	fp, ip
 80016f2:	1a24      	subs	r4, r4, r0
 80016f4:	e703      	b.n	80014fe <__aeabi_ddiv+0x36a>
 80016f6:	4643      	mov	r3, r8
 80016f8:	005f      	lsls	r7, r3, #1
 80016fa:	4547      	cmp	r7, r8
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	46b8      	mov	r8, r7
 8001700:	425b      	negs	r3, r3
 8001702:	199e      	adds	r6, r3, r6
 8001704:	3a02      	subs	r2, #2
 8001706:	1989      	adds	r1, r1, r6
 8001708:	42a9      	cmp	r1, r5
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x57a>
 800170c:	e754      	b.n	80015b8 <__aeabi_ddiv+0x424>
 800170e:	4540      	cmp	r0, r8
 8001710:	d000      	beq.n	8001714 <__aeabi_ddiv+0x580>
 8001712:	e751      	b.n	80015b8 <__aeabi_ddiv+0x424>
 8001714:	e5ab      	b.n	800126e <__aeabi_ddiv+0xda>
 8001716:	001a      	movs	r2, r3
 8001718:	e7f6      	b.n	8001708 <__aeabi_ddiv+0x574>
 800171a:	211f      	movs	r1, #31
 800171c:	465f      	mov	r7, fp
 800171e:	4249      	negs	r1, r1
 8001720:	1b0c      	subs	r4, r1, r4
 8001722:	40e7      	lsrs	r7, r4
 8001724:	2b20      	cmp	r3, #32
 8001726:	d007      	beq.n	8001738 <__aeabi_ddiv+0x5a4>
 8001728:	491a      	ldr	r1, [pc, #104]	; (8001794 <__aeabi_ddiv+0x600>)
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	468c      	mov	ip, r1
 800172e:	4463      	add	r3, ip
 8001730:	0018      	movs	r0, r3
 8001732:	465b      	mov	r3, fp
 8001734:	4083      	lsls	r3, r0
 8001736:	431a      	orrs	r2, r3
 8001738:	1e50      	subs	r0, r2, #1
 800173a:	4182      	sbcs	r2, r0
 800173c:	433a      	orrs	r2, r7
 800173e:	2707      	movs	r7, #7
 8001740:	2300      	movs	r3, #0
 8001742:	4017      	ands	r7, r2
 8001744:	d009      	beq.n	800175a <__aeabi_ddiv+0x5c6>
 8001746:	210f      	movs	r1, #15
 8001748:	2300      	movs	r3, #0
 800174a:	4011      	ands	r1, r2
 800174c:	0014      	movs	r4, r2
 800174e:	2904      	cmp	r1, #4
 8001750:	d195      	bne.n	800167e <__aeabi_ddiv+0x4ea>
 8001752:	0022      	movs	r2, r4
 8001754:	075f      	lsls	r7, r3, #29
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	0b1b      	lsrs	r3, r3, #12
 800175a:	08d2      	lsrs	r2, r2, #3
 800175c:	4317      	orrs	r7, r2
 800175e:	2200      	movs	r2, #0
 8001760:	e5a6      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	4659      	mov	r1, fp
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	430b      	orrs	r3, r1
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	0017      	movs	r7, r2
 800176e:	0b1b      	lsrs	r3, r3, #12
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <__aeabi_ddiv+0x5f8>)
 8001772:	e59d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001774:	42bd      	cmp	r5, r7
 8001776:	d8b2      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001778:	469b      	mov	fp, r3
 800177a:	2400      	movs	r4, #0
 800177c:	e6bf      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800177e:	4580      	cmp	r8, r0
 8001780:	d3b9      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 8001782:	001a      	movs	r2, r3
 8001784:	e7c3      	b.n	800170e <__aeabi_ddiv+0x57a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff
 8001790:	0000041e 	.word	0x0000041e
 8001794:	0000043e 	.word	0x0000043e

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464f      	mov	r7, r9
 800179c:	4646      	mov	r6, r8
 800179e:	46d6      	mov	lr, sl
 80017a0:	4684      	mov	ip, r0
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	4680      	mov	r8, r0
 80017a6:	4e19      	ldr	r6, [pc, #100]	; (800180c <__eqdf2+0x74>)
 80017a8:	0318      	lsls	r0, r3, #12
 80017aa:	030f      	lsls	r7, r1, #12
 80017ac:	004d      	lsls	r5, r1, #1
 80017ae:	0b00      	lsrs	r0, r0, #12
 80017b0:	005c      	lsls	r4, r3, #1
 80017b2:	4682      	mov	sl, r0
 80017b4:	0b3f      	lsrs	r7, r7, #12
 80017b6:	0d6d      	lsrs	r5, r5, #21
 80017b8:	0fc9      	lsrs	r1, r1, #31
 80017ba:	4691      	mov	r9, r2
 80017bc:	0d64      	lsrs	r4, r4, #21
 80017be:	0fdb      	lsrs	r3, r3, #31
 80017c0:	2001      	movs	r0, #1
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d00a      	beq.n	80017dc <__eqdf2+0x44>
 80017c6:	42b4      	cmp	r4, r6
 80017c8:	d003      	beq.n	80017d2 <__eqdf2+0x3a>
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d101      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ce:	4557      	cmp	r7, sl
 80017d0:	d00c      	beq.n	80017ec <__eqdf2+0x54>
 80017d2:	bc1c      	pop	{r2, r3, r4}
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	46a2      	mov	sl, r4
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	4666      	mov	r6, ip
 80017de:	433e      	orrs	r6, r7
 80017e0:	d1f7      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e2:	42ac      	cmp	r4, r5
 80017e4:	d1f5      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e6:	4654      	mov	r4, sl
 80017e8:	4314      	orrs	r4, r2
 80017ea:	d1f2      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ec:	2001      	movs	r0, #1
 80017ee:	45c8      	cmp	r8, r9
 80017f0:	d1ef      	bne.n	80017d2 <__eqdf2+0x3a>
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d007      	beq.n	8001806 <__eqdf2+0x6e>
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	d1eb      	bne.n	80017d2 <__eqdf2+0x3a>
 80017fa:	4663      	mov	r3, ip
 80017fc:	431f      	orrs	r7, r3
 80017fe:	0038      	movs	r0, r7
 8001800:	1e47      	subs	r7, r0, #1
 8001802:	41b8      	sbcs	r0, r7
 8001804:	e7e5      	b.n	80017d2 <__eqdf2+0x3a>
 8001806:	2000      	movs	r0, #0
 8001808:	e7e3      	b.n	80017d2 <__eqdf2+0x3a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff

08001810 <__gedf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464f      	mov	r7, r9
 8001814:	4646      	mov	r6, r8
 8001816:	46d6      	mov	lr, sl
 8001818:	004d      	lsls	r5, r1, #1
 800181a:	b5c0      	push	{r6, r7, lr}
 800181c:	030e      	lsls	r6, r1, #12
 800181e:	0fc9      	lsrs	r1, r1, #31
 8001820:	468a      	mov	sl, r1
 8001822:	492c      	ldr	r1, [pc, #176]	; (80018d4 <__gedf2+0xc4>)
 8001824:	031f      	lsls	r7, r3, #12
 8001826:	005c      	lsls	r4, r3, #1
 8001828:	4680      	mov	r8, r0
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	4691      	mov	r9, r2
 8001830:	0b3f      	lsrs	r7, r7, #12
 8001832:	0d64      	lsrs	r4, r4, #21
 8001834:	0fdb      	lsrs	r3, r3, #31
 8001836:	428d      	cmp	r5, r1
 8001838:	d01e      	beq.n	8001878 <__gedf2+0x68>
 800183a:	428c      	cmp	r4, r1
 800183c:	d016      	beq.n	800186c <__gedf2+0x5c>
 800183e:	2d00      	cmp	r5, #0
 8001840:	d11e      	bne.n	8001880 <__gedf2+0x70>
 8001842:	4330      	orrs	r0, r6
 8001844:	4684      	mov	ip, r0
 8001846:	2c00      	cmp	r4, #0
 8001848:	d101      	bne.n	800184e <__gedf2+0x3e>
 800184a:	433a      	orrs	r2, r7
 800184c:	d023      	beq.n	8001896 <__gedf2+0x86>
 800184e:	4662      	mov	r2, ip
 8001850:	2a00      	cmp	r2, #0
 8001852:	d01a      	beq.n	800188a <__gedf2+0x7a>
 8001854:	459a      	cmp	sl, r3
 8001856:	d029      	beq.n	80018ac <__gedf2+0x9c>
 8001858:	4651      	mov	r1, sl
 800185a:	2002      	movs	r0, #2
 800185c:	3901      	subs	r1, #1
 800185e:	4008      	ands	r0, r1
 8001860:	3801      	subs	r0, #1
 8001862:	bc1c      	pop	{r2, r3, r4}
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	46a2      	mov	sl, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	0039      	movs	r1, r7
 800186e:	4311      	orrs	r1, r2
 8001870:	d0e5      	beq.n	800183e <__gedf2+0x2e>
 8001872:	2002      	movs	r0, #2
 8001874:	4240      	negs	r0, r0
 8001876:	e7f4      	b.n	8001862 <__gedf2+0x52>
 8001878:	4330      	orrs	r0, r6
 800187a:	d1fa      	bne.n	8001872 <__gedf2+0x62>
 800187c:	42ac      	cmp	r4, r5
 800187e:	d00f      	beq.n	80018a0 <__gedf2+0x90>
 8001880:	2c00      	cmp	r4, #0
 8001882:	d10f      	bne.n	80018a4 <__gedf2+0x94>
 8001884:	433a      	orrs	r2, r7
 8001886:	d0e7      	beq.n	8001858 <__gedf2+0x48>
 8001888:	e00c      	b.n	80018a4 <__gedf2+0x94>
 800188a:	2201      	movs	r2, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	4393      	bics	r3, r2
 8001890:	0018      	movs	r0, r3
 8001892:	3001      	adds	r0, #1
 8001894:	e7e5      	b.n	8001862 <__gedf2+0x52>
 8001896:	4663      	mov	r3, ip
 8001898:	2000      	movs	r0, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <__gedf2+0x52>
 800189e:	e7db      	b.n	8001858 <__gedf2+0x48>
 80018a0:	433a      	orrs	r2, r7
 80018a2:	d1e6      	bne.n	8001872 <__gedf2+0x62>
 80018a4:	459a      	cmp	sl, r3
 80018a6:	d1d7      	bne.n	8001858 <__gedf2+0x48>
 80018a8:	42a5      	cmp	r5, r4
 80018aa:	dcd5      	bgt.n	8001858 <__gedf2+0x48>
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	db05      	blt.n	80018bc <__gedf2+0xac>
 80018b0:	42be      	cmp	r6, r7
 80018b2:	d8d1      	bhi.n	8001858 <__gedf2+0x48>
 80018b4:	d008      	beq.n	80018c8 <__gedf2+0xb8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	42be      	cmp	r6, r7
 80018ba:	d2d2      	bcs.n	8001862 <__gedf2+0x52>
 80018bc:	4650      	mov	r0, sl
 80018be:	2301      	movs	r3, #1
 80018c0:	3801      	subs	r0, #1
 80018c2:	4398      	bics	r0, r3
 80018c4:	3001      	adds	r0, #1
 80018c6:	e7cc      	b.n	8001862 <__gedf2+0x52>
 80018c8:	45c8      	cmp	r8, r9
 80018ca:	d8c5      	bhi.n	8001858 <__gedf2+0x48>
 80018cc:	2000      	movs	r0, #0
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d3f4      	bcc.n	80018bc <__gedf2+0xac>
 80018d2:	e7c6      	b.n	8001862 <__gedf2+0x52>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464f      	mov	r7, r9
 80018dc:	4646      	mov	r6, r8
 80018de:	46d6      	mov	lr, sl
 80018e0:	004d      	lsls	r5, r1, #1
 80018e2:	b5c0      	push	{r6, r7, lr}
 80018e4:	030e      	lsls	r6, r1, #12
 80018e6:	0fc9      	lsrs	r1, r1, #31
 80018e8:	468a      	mov	sl, r1
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <__ledf2+0xcc>)
 80018ec:	031f      	lsls	r7, r3, #12
 80018ee:	005c      	lsls	r4, r3, #1
 80018f0:	4680      	mov	r8, r0
 80018f2:	0b36      	lsrs	r6, r6, #12
 80018f4:	0d6d      	lsrs	r5, r5, #21
 80018f6:	4691      	mov	r9, r2
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	0fdb      	lsrs	r3, r3, #31
 80018fe:	428d      	cmp	r5, r1
 8001900:	d018      	beq.n	8001934 <__ledf2+0x5c>
 8001902:	428c      	cmp	r4, r1
 8001904:	d011      	beq.n	800192a <__ledf2+0x52>
 8001906:	2d00      	cmp	r5, #0
 8001908:	d118      	bne.n	800193c <__ledf2+0x64>
 800190a:	4330      	orrs	r0, r6
 800190c:	4684      	mov	ip, r0
 800190e:	2c00      	cmp	r4, #0
 8001910:	d11e      	bne.n	8001950 <__ledf2+0x78>
 8001912:	433a      	orrs	r2, r7
 8001914:	d11c      	bne.n	8001950 <__ledf2+0x78>
 8001916:	4663      	mov	r3, ip
 8001918:	2000      	movs	r0, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <__ledf2+0xa8>
 800191e:	4651      	mov	r1, sl
 8001920:	2002      	movs	r0, #2
 8001922:	3901      	subs	r1, #1
 8001924:	4008      	ands	r0, r1
 8001926:	3801      	subs	r0, #1
 8001928:	e02a      	b.n	8001980 <__ledf2+0xa8>
 800192a:	0039      	movs	r1, r7
 800192c:	4311      	orrs	r1, r2
 800192e:	d0ea      	beq.n	8001906 <__ledf2+0x2e>
 8001930:	2002      	movs	r0, #2
 8001932:	e025      	b.n	8001980 <__ledf2+0xa8>
 8001934:	4330      	orrs	r0, r6
 8001936:	d1fb      	bne.n	8001930 <__ledf2+0x58>
 8001938:	42ac      	cmp	r4, r5
 800193a:	d026      	beq.n	800198a <__ledf2+0xb2>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d126      	bne.n	800198e <__ledf2+0xb6>
 8001940:	433a      	orrs	r2, r7
 8001942:	d124      	bne.n	800198e <__ledf2+0xb6>
 8001944:	4651      	mov	r1, sl
 8001946:	2002      	movs	r0, #2
 8001948:	3901      	subs	r1, #1
 800194a:	4008      	ands	r0, r1
 800194c:	3801      	subs	r0, #1
 800194e:	e017      	b.n	8001980 <__ledf2+0xa8>
 8001950:	4662      	mov	r2, ip
 8001952:	2a00      	cmp	r2, #0
 8001954:	d00f      	beq.n	8001976 <__ledf2+0x9e>
 8001956:	459a      	cmp	sl, r3
 8001958:	d1e1      	bne.n	800191e <__ledf2+0x46>
 800195a:	42a5      	cmp	r5, r4
 800195c:	db05      	blt.n	800196a <__ledf2+0x92>
 800195e:	42be      	cmp	r6, r7
 8001960:	d8dd      	bhi.n	800191e <__ledf2+0x46>
 8001962:	d019      	beq.n	8001998 <__ledf2+0xc0>
 8001964:	2000      	movs	r0, #0
 8001966:	42be      	cmp	r6, r7
 8001968:	d20a      	bcs.n	8001980 <__ledf2+0xa8>
 800196a:	4650      	mov	r0, sl
 800196c:	2301      	movs	r3, #1
 800196e:	3801      	subs	r0, #1
 8001970:	4398      	bics	r0, r3
 8001972:	3001      	adds	r0, #1
 8001974:	e004      	b.n	8001980 <__ledf2+0xa8>
 8001976:	2201      	movs	r2, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	4393      	bics	r3, r2
 800197c:	0018      	movs	r0, r3
 800197e:	3001      	adds	r0, #1
 8001980:	bc1c      	pop	{r2, r3, r4}
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	46a2      	mov	sl, r4
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	433a      	orrs	r2, r7
 800198c:	d1d0      	bne.n	8001930 <__ledf2+0x58>
 800198e:	459a      	cmp	sl, r3
 8001990:	d1c5      	bne.n	800191e <__ledf2+0x46>
 8001992:	42a5      	cmp	r5, r4
 8001994:	dcc3      	bgt.n	800191e <__ledf2+0x46>
 8001996:	e7e0      	b.n	800195a <__ledf2+0x82>
 8001998:	45c8      	cmp	r8, r9
 800199a:	d8c0      	bhi.n	800191e <__ledf2+0x46>
 800199c:	2000      	movs	r0, #0
 800199e:	45c8      	cmp	r8, r9
 80019a0:	d3e3      	bcc.n	800196a <__ledf2+0x92>
 80019a2:	e7ed      	b.n	8001980 <__ledf2+0xa8>
 80019a4:	000007ff 	.word	0x000007ff

080019a8 <__aeabi_dmul>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	46de      	mov	lr, fp
 80019ae:	464e      	mov	r6, r9
 80019b0:	4645      	mov	r5, r8
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4683      	mov	fp, r0
 80019b6:	0006      	movs	r6, r0
 80019b8:	030f      	lsls	r7, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	b087      	sub	sp, #28
 80019be:	4692      	mov	sl, r2
 80019c0:	001d      	movs	r5, r3
 80019c2:	0b3f      	lsrs	r7, r7, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fcc      	lsrs	r4, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x26>
 80019cc:	e06f      	b.n	8001aae <__aeabi_dmul+0x106>
 80019ce:	4bde      	ldr	r3, [pc, #888]	; (8001d48 <__aeabi_dmul+0x3a0>)
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d038      	beq.n	8001a46 <__aeabi_dmul+0x9e>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00ff      	lsls	r7, r7, #3
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431f      	orrs	r7, r3
 80019dc:	0f73      	lsrs	r3, r6, #29
 80019de:	433b      	orrs	r3, r7
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4bda      	ldr	r3, [pc, #872]	; (8001d4c <__aeabi_dmul+0x3a4>)
 80019e4:	2700      	movs	r7, #0
 80019e6:	4699      	mov	r9, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	00f6      	lsls	r6, r6, #3
 80019ee:	4481      	add	r9, r0
 80019f0:	032b      	lsls	r3, r5, #12
 80019f2:	0069      	lsls	r1, r5, #1
 80019f4:	0b1b      	lsrs	r3, r3, #12
 80019f6:	4652      	mov	r2, sl
 80019f8:	4698      	mov	r8, r3
 80019fa:	0d49      	lsrs	r1, r1, #21
 80019fc:	0fed      	lsrs	r5, r5, #31
 80019fe:	2900      	cmp	r1, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x5c>
 8001a02:	e085      	b.n	8001b10 <__aeabi_dmul+0x168>
 8001a04:	4bd0      	ldr	r3, [pc, #832]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dmul+0x64>
 8001a0a:	e073      	b.n	8001af4 <__aeabi_dmul+0x14c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	00da      	lsls	r2, r3, #3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	4652      	mov	r2, sl
 8001a18:	48cc      	ldr	r0, [pc, #816]	; (8001d4c <__aeabi_dmul+0x3a4>)
 8001a1a:	0f52      	lsrs	r2, r2, #29
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	4652      	mov	r2, sl
 8001a22:	2000      	movs	r0, #0
 8001a24:	4461      	add	r1, ip
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4489      	add	r9, r1
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	4069      	eors	r1, r5
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	468c      	mov	ip, r1
 8001a32:	2101      	movs	r1, #1
 8001a34:	4449      	add	r1, r9
 8001a36:	468a      	mov	sl, r1
 8001a38:	2f0f      	cmp	r7, #15
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_dmul+0x96>
 8001a3c:	e090      	b.n	8001b60 <__aeabi_dmul+0x1b8>
 8001a3e:	49c4      	ldr	r1, [pc, #784]	; (8001d50 <__aeabi_dmul+0x3a8>)
 8001a40:	00bf      	lsls	r7, r7, #2
 8001a42:	59cf      	ldr	r7, [r1, r7]
 8001a44:	46bf      	mov	pc, r7
 8001a46:	465b      	mov	r3, fp
 8001a48:	433b      	orrs	r3, r7
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dmul+0xa8>
 8001a4e:	e16a      	b.n	8001d26 <__aeabi_dmul+0x37e>
 8001a50:	2302      	movs	r3, #2
 8001a52:	2708      	movs	r7, #8
 8001a54:	2600      	movs	r6, #0
 8001a56:	4681      	mov	r9, r0
 8001a58:	469b      	mov	fp, r3
 8001a5a:	e7c9      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001a5c:	0032      	movs	r2, r6
 8001a5e:	4658      	mov	r0, fp
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	4661      	mov	r1, ip
 8001a64:	9100      	str	r1, [sp, #0]
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0xc4>
 8001a6a:	e075      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001a6c:	2803      	cmp	r0, #3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0xca>
 8001a70:	e1fe      	b.n	8001e70 <__aeabi_dmul+0x4c8>
 8001a72:	2801      	cmp	r0, #1
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dmul+0xd0>
 8001a76:	e12c      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2700      	movs	r7, #0
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	2500      	movs	r5, #0
 8001a80:	033f      	lsls	r7, r7, #12
 8001a82:	0d2a      	lsrs	r2, r5, #20
 8001a84:	0b3f      	lsrs	r7, r7, #12
 8001a86:	48b3      	ldr	r0, [pc, #716]	; (8001d54 <__aeabi_dmul+0x3ac>)
 8001a88:	0512      	lsls	r2, r2, #20
 8001a8a:	433a      	orrs	r2, r7
 8001a8c:	4002      	ands	r2, r0
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	4313      	orrs	r3, r2
 8001a92:	9a00      	ldr	r2, [sp, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	07d1      	lsls	r1, r2, #31
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	0030      	movs	r0, r6
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bc3c      	pop	{r2, r3, r4, r5}
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	46a2      	mov	sl, r4
 8001aaa:	46ab      	mov	fp, r5
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	465b      	mov	r3, fp
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x110>
 8001ab6:	e12f      	b.n	8001d18 <__aeabi_dmul+0x370>
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dmul+0x116>
 8001abc:	e1a5      	b.n	8001e0a <__aeabi_dmul+0x462>
 8001abe:	0038      	movs	r0, r7
 8001ac0:	f000 fe20 	bl	8002704 <__clzsi2>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	3b0b      	subs	r3, #11
 8001ac8:	2b1c      	cmp	r3, #28
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x126>
 8001acc:	e196      	b.n	8001dfc <__aeabi_dmul+0x454>
 8001ace:	221d      	movs	r2, #29
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	465e      	mov	r6, fp
 8001ada:	3908      	subs	r1, #8
 8001adc:	408f      	lsls	r7, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001ae8:	2700      	movs	r7, #0
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	e77d      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4653      	mov	r3, sl
 8001af8:	430b      	orrs	r3, r1
 8001afa:	4993      	ldr	r1, [pc, #588]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001afc:	468c      	mov	ip, r1
 8001afe:	44e1      	add	r9, ip
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0x15e>
 8001b04:	e11a      	b.n	8001d3c <__aeabi_dmul+0x394>
 8001b06:	2202      	movs	r2, #2
 8001b08:	2002      	movs	r0, #2
 8001b0a:	4317      	orrs	r7, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	e78c      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x16e>
 8001b14:	e10d      	b.n	8001d32 <__aeabi_dmul+0x38a>
 8001b16:	4643      	mov	r3, r8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x176>
 8001b1c:	e181      	b.n	8001e22 <__aeabi_dmul+0x47a>
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f000 fdf0 	bl	8002704 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	2a1c      	cmp	r2, #28
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dmul+0x186>
 8001b2c:	e172      	b.n	8001e14 <__aeabi_dmul+0x46c>
 8001b2e:	0001      	movs	r1, r0
 8001b30:	4643      	mov	r3, r8
 8001b32:	3908      	subs	r1, #8
 8001b34:	408b      	lsls	r3, r1
 8001b36:	4698      	mov	r8, r3
 8001b38:	231d      	movs	r3, #29
 8001b3a:	1a9a      	subs	r2, r3, r2
 8001b3c:	4653      	mov	r3, sl
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	001a      	movs	r2, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4652      	mov	r2, sl
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	1a08      	subs	r0, r1, r0
 8001b4e:	4982      	ldr	r1, [pc, #520]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001b50:	4689      	mov	r9, r1
 8001b52:	4481      	add	r9, r0
 8001b54:	2000      	movs	r0, #0
 8001b56:	e768      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	e78e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001b60:	0c14      	lsrs	r4, r2, #16
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	0011      	movs	r1, r2
 8001b68:	0c37      	lsrs	r7, r6, #16
 8001b6a:	0436      	lsls	r6, r6, #16
 8001b6c:	0c35      	lsrs	r5, r6, #16
 8001b6e:	4379      	muls	r1, r7
 8001b70:	0028      	movs	r0, r5
 8001b72:	468c      	mov	ip, r1
 8001b74:	002e      	movs	r6, r5
 8001b76:	4360      	muls	r0, r4
 8001b78:	4460      	add	r0, ip
 8001b7a:	4683      	mov	fp, r0
 8001b7c:	4356      	muls	r6, r2
 8001b7e:	0021      	movs	r1, r4
 8001b80:	0c30      	lsrs	r0, r6, #16
 8001b82:	4680      	mov	r8, r0
 8001b84:	4658      	mov	r0, fp
 8001b86:	4379      	muls	r1, r7
 8001b88:	4440      	add	r0, r8
 8001b8a:	9102      	str	r1, [sp, #8]
 8001b8c:	4584      	cmp	ip, r0
 8001b8e:	d906      	bls.n	8001b9e <__aeabi_dmul+0x1f6>
 8001b90:	4688      	mov	r8, r1
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	468c      	mov	ip, r1
 8001b98:	44e0      	add	r8, ip
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	9102      	str	r1, [sp, #8]
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	0c01      	lsrs	r1, r0, #16
 8001ba2:	0c36      	lsrs	r6, r6, #16
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	468b      	mov	fp, r1
 8001ba8:	1981      	adds	r1, r0, r6
 8001baa:	0c1e      	lsrs	r6, r3, #16
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	9103      	str	r1, [sp, #12]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4379      	muls	r1, r7
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	0028      	movs	r0, r5
 8001bba:	4375      	muls	r5, r6
 8001bbc:	4465      	add	r5, ip
 8001bbe:	46a8      	mov	r8, r5
 8001bc0:	4358      	muls	r0, r3
 8001bc2:	0c05      	lsrs	r5, r0, #16
 8001bc4:	4445      	add	r5, r8
 8001bc6:	4377      	muls	r7, r6
 8001bc8:	42a9      	cmp	r1, r5
 8001bca:	d903      	bls.n	8001bd4 <__aeabi_dmul+0x22c>
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	4467      	add	r7, ip
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	468c      	mov	ip, r1
 8001bd8:	0039      	movs	r1, r7
 8001bda:	0400      	lsls	r0, r0, #16
 8001bdc:	0c00      	lsrs	r0, r0, #16
 8001bde:	042d      	lsls	r5, r5, #16
 8001be0:	182d      	adds	r5, r5, r0
 8001be2:	4461      	add	r1, ip
 8001be4:	44ab      	add	fp, r5
 8001be6:	9105      	str	r1, [sp, #20]
 8001be8:	4659      	mov	r1, fp
 8001bea:	9104      	str	r1, [sp, #16]
 8001bec:	9901      	ldr	r1, [sp, #4]
 8001bee:	040f      	lsls	r7, r1, #16
 8001bf0:	0c3f      	lsrs	r7, r7, #16
 8001bf2:	0c08      	lsrs	r0, r1, #16
 8001bf4:	0039      	movs	r1, r7
 8001bf6:	4351      	muls	r1, r2
 8001bf8:	4342      	muls	r2, r0
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	468c      	mov	ip, r1
 8001c00:	0c09      	lsrs	r1, r1, #16
 8001c02:	468b      	mov	fp, r1
 8001c04:	4362      	muls	r2, r4
 8001c06:	437c      	muls	r4, r7
 8001c08:	4444      	add	r4, r8
 8001c0a:	445c      	add	r4, fp
 8001c0c:	45a0      	cmp	r8, r4
 8001c0e:	d903      	bls.n	8001c18 <__aeabi_dmul+0x270>
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	4688      	mov	r8, r1
 8001c16:	4442      	add	r2, r8
 8001c18:	0c21      	lsrs	r1, r4, #16
 8001c1a:	4688      	mov	r8, r1
 8001c1c:	4661      	mov	r1, ip
 8001c1e:	0409      	lsls	r1, r1, #16
 8001c20:	0c09      	lsrs	r1, r1, #16
 8001c22:	468c      	mov	ip, r1
 8001c24:	0039      	movs	r1, r7
 8001c26:	4359      	muls	r1, r3
 8001c28:	4343      	muls	r3, r0
 8001c2a:	4370      	muls	r0, r6
 8001c2c:	437e      	muls	r6, r7
 8001c2e:	0c0f      	lsrs	r7, r1, #16
 8001c30:	18f6      	adds	r6, r6, r3
 8001c32:	0424      	lsls	r4, r4, #16
 8001c34:	19be      	adds	r6, r7, r6
 8001c36:	4464      	add	r4, ip
 8001c38:	4442      	add	r2, r8
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	42b3      	cmp	r3, r6
 8001c3e:	d903      	bls.n	8001c48 <__aeabi_dmul+0x2a0>
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4698      	mov	r8, r3
 8001c46:	4440      	add	r0, r8
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	4661      	mov	r1, ip
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	9b04      	ldr	r3, [sp, #16]
 8001c50:	0437      	lsls	r7, r6, #16
 8001c52:	4443      	add	r3, r8
 8001c54:	469b      	mov	fp, r3
 8001c56:	45ab      	cmp	fp, r5
 8001c58:	41ad      	sbcs	r5, r5
 8001c5a:	426b      	negs	r3, r5
 8001c5c:	040d      	lsls	r5, r1, #16
 8001c5e:	9905      	ldr	r1, [sp, #20]
 8001c60:	0c2d      	lsrs	r5, r5, #16
 8001c62:	468c      	mov	ip, r1
 8001c64:	197f      	adds	r7, r7, r5
 8001c66:	4467      	add	r7, ip
 8001c68:	18fd      	adds	r5, r7, r3
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	192d      	adds	r5, r5, r4
 8001c70:	42a5      	cmp	r5, r4
 8001c72:	41a4      	sbcs	r4, r4
 8001c74:	4693      	mov	fp, r2
 8001c76:	4264      	negs	r4, r4
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44c3      	add	fp, r8
 8001c7c:	44dc      	add	ip, fp
 8001c7e:	428f      	cmp	r7, r1
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4598      	cmp	r8, r3
 8001c84:	419b      	sbcs	r3, r3
 8001c86:	4593      	cmp	fp, r2
 8001c88:	4192      	sbcs	r2, r2
 8001c8a:	45a4      	cmp	ip, r4
 8001c8c:	41a4      	sbcs	r4, r4
 8001c8e:	425b      	negs	r3, r3
 8001c90:	427f      	negs	r7, r7
 8001c92:	431f      	orrs	r7, r3
 8001c94:	0c36      	lsrs	r6, r6, #16
 8001c96:	4252      	negs	r2, r2
 8001c98:	4264      	negs	r4, r4
 8001c9a:	19bf      	adds	r7, r7, r6
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	18bf      	adds	r7, r7, r2
 8001ca0:	4662      	mov	r2, ip
 8001ca2:	1838      	adds	r0, r7, r0
 8001ca4:	0243      	lsls	r3, r0, #9
 8001ca6:	0dd2      	lsrs	r2, r2, #23
 8001ca8:	9903      	ldr	r1, [sp, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	026a      	lsls	r2, r5, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	1e50      	subs	r0, r2, #1
 8001cb2:	4182      	sbcs	r2, r0
 8001cb4:	4661      	mov	r1, ip
 8001cb6:	0ded      	lsrs	r5, r5, #23
 8001cb8:	432a      	orrs	r2, r5
 8001cba:	024e      	lsls	r6, r1, #9
 8001cbc:	4332      	orrs	r2, r6
 8001cbe:	01d9      	lsls	r1, r3, #7
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dmul+0x31c>
 8001cc2:	e0b3      	b.n	8001e2c <__aeabi_dmul+0x484>
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	0850      	lsrs	r0, r2, #1
 8001cc8:	4032      	ands	r2, r6
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	07de      	lsls	r6, r3, #31
 8001cce:	4332      	orrs	r2, r6
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	4c22      	ldr	r4, [pc, #136]	; (8001d5c <__aeabi_dmul+0x3b4>)
 8001cd4:	4454      	add	r4, sl
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	dd62      	ble.n	8001da0 <__aeabi_dmul+0x3f8>
 8001cda:	0751      	lsls	r1, r2, #29
 8001cdc:	d009      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001cde:	200f      	movs	r0, #15
 8001ce0:	4010      	ands	r0, r2
 8001ce2:	2804      	cmp	r0, #4
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001ce6:	1d10      	adds	r0, r2, #4
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	4252      	negs	r2, r2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	01d9      	lsls	r1, r3, #7
 8001cf4:	d504      	bpl.n	8001d00 <__aeabi_dmul+0x358>
 8001cf6:	2480      	movs	r4, #128	; 0x80
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <__aeabi_dmul+0x3b8>)
 8001cfa:	00e4      	lsls	r4, r4, #3
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	4454      	add	r4, sl
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <__aeabi_dmul+0x3bc>)
 8001d02:	4284      	cmp	r4, r0
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x360>
 8001d06:	e727      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001d08:	075e      	lsls	r6, r3, #29
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	0b1f      	lsrs	r7, r3, #12
 8001d10:	0563      	lsls	r3, r4, #21
 8001d12:	4316      	orrs	r6, r2
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	e6b2      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2704      	movs	r7, #4
 8001d20:	2600      	movs	r6, #0
 8001d22:	469b      	mov	fp, r3
 8001d24:	e664      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d26:	2303      	movs	r3, #3
 8001d28:	9701      	str	r7, [sp, #4]
 8001d2a:	4681      	mov	r9, r0
 8001d2c:	270c      	movs	r7, #12
 8001d2e:	469b      	mov	fp, r3
 8001d30:	e65e      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d32:	2201      	movs	r2, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	4317      	orrs	r7, r2
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e676      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	2003      	movs	r0, #3
 8001d40:	431f      	orrs	r7, r3
 8001d42:	4643      	mov	r3, r8
 8001d44:	e671      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	000007ff 	.word	0x000007ff
 8001d4c:	fffffc01 	.word	0xfffffc01
 8001d50:	08021320 	.word	0x08021320
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	fffffc0d 	.word	0xfffffc0d
 8001d5c:	000003ff 	.word	0x000003ff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	000007fe 	.word	0x000007fe
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2780      	movs	r7, #128	; 0x80
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	033f      	lsls	r7, r7, #12
 8001d70:	2600      	movs	r6, #0
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d74:	e683      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	0032      	movs	r2, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	e670      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d80:	46ac      	mov	ip, r5
 8001d82:	e66e      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d84:	2780      	movs	r7, #128	; 0x80
 8001d86:	9901      	ldr	r1, [sp, #4]
 8001d88:	033f      	lsls	r7, r7, #12
 8001d8a:	4239      	tst	r1, r7
 8001d8c:	d02d      	beq.n	8001dea <__aeabi_dmul+0x442>
 8001d8e:	423b      	tst	r3, r7
 8001d90:	d12b      	bne.n	8001dea <__aeabi_dmul+0x442>
 8001d92:	431f      	orrs	r7, r3
 8001d94:	033f      	lsls	r7, r7, #12
 8001d96:	0b3f      	lsrs	r7, r7, #12
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	0016      	movs	r6, r2
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d9e:	e66e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001da0:	2501      	movs	r5, #1
 8001da2:	1b2d      	subs	r5, r5, r4
 8001da4:	2d38      	cmp	r5, #56	; 0x38
 8001da6:	dd00      	ble.n	8001daa <__aeabi_dmul+0x402>
 8001da8:	e666      	b.n	8001a78 <__aeabi_dmul+0xd0>
 8001daa:	2d1f      	cmp	r5, #31
 8001dac:	dc40      	bgt.n	8001e30 <__aeabi_dmul+0x488>
 8001dae:	4835      	ldr	r0, [pc, #212]	; (8001e84 <__aeabi_dmul+0x4dc>)
 8001db0:	001c      	movs	r4, r3
 8001db2:	4450      	add	r0, sl
 8001db4:	0016      	movs	r6, r2
 8001db6:	4082      	lsls	r2, r0
 8001db8:	4084      	lsls	r4, r0
 8001dba:	40ee      	lsrs	r6, r5
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	4334      	orrs	r4, r6
 8001dc2:	4314      	orrs	r4, r2
 8001dc4:	40eb      	lsrs	r3, r5
 8001dc6:	0762      	lsls	r2, r4, #29
 8001dc8:	d009      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4022      	ands	r2, r4
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d005      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dd2:	0022      	movs	r2, r4
 8001dd4:	1d14      	adds	r4, r2, #4
 8001dd6:	4294      	cmp	r4, r2
 8001dd8:	4180      	sbcs	r0, r0
 8001dda:	4240      	negs	r0, r0
 8001ddc:	181b      	adds	r3, r3, r0
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	d53e      	bpl.n	8001e60 <__aeabi_dmul+0x4b8>
 8001de2:	2301      	movs	r3, #1
 8001de4:	2700      	movs	r7, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	e649      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dea:	2780      	movs	r7, #128	; 0x80
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	033f      	lsls	r7, r7, #12
 8001df0:	431f      	orrs	r7, r3
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001dfa:	e640      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	465a      	mov	r2, fp
 8001e00:	3b28      	subs	r3, #40	; 0x28
 8001e02:	409a      	lsls	r2, r3
 8001e04:	2600      	movs	r6, #0
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	e66d      	b.n	8001ae6 <__aeabi_dmul+0x13e>
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f000 fc7a 	bl	8002704 <__clzsi2>
 8001e10:	3020      	adds	r0, #32
 8001e12:	e657      	b.n	8001ac4 <__aeabi_dmul+0x11c>
 8001e14:	0003      	movs	r3, r0
 8001e16:	4652      	mov	r2, sl
 8001e18:	3b28      	subs	r3, #40	; 0x28
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e693      	b.n	8001b4a <__aeabi_dmul+0x1a2>
 8001e22:	4650      	mov	r0, sl
 8001e24:	f000 fc6e 	bl	8002704 <__clzsi2>
 8001e28:	3020      	adds	r0, #32
 8001e2a:	e67b      	b.n	8001b24 <__aeabi_dmul+0x17c>
 8001e2c:	46ca      	mov	sl, r9
 8001e2e:	e750      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001e30:	201f      	movs	r0, #31
 8001e32:	001e      	movs	r6, r3
 8001e34:	4240      	negs	r0, r0
 8001e36:	1b04      	subs	r4, r0, r4
 8001e38:	40e6      	lsrs	r6, r4
 8001e3a:	2d20      	cmp	r5, #32
 8001e3c:	d003      	beq.n	8001e46 <__aeabi_dmul+0x49e>
 8001e3e:	4c12      	ldr	r4, [pc, #72]	; (8001e88 <__aeabi_dmul+0x4e0>)
 8001e40:	4454      	add	r4, sl
 8001e42:	40a3      	lsls	r3, r4
 8001e44:	431a      	orrs	r2, r3
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	4332      	orrs	r2, r6
 8001e4c:	2607      	movs	r6, #7
 8001e4e:	2700      	movs	r7, #0
 8001e50:	4016      	ands	r6, r2
 8001e52:	d009      	beq.n	8001e68 <__aeabi_dmul+0x4c0>
 8001e54:	200f      	movs	r0, #15
 8001e56:	2300      	movs	r3, #0
 8001e58:	4010      	ands	r0, r2
 8001e5a:	0014      	movs	r4, r2
 8001e5c:	2804      	cmp	r0, #4
 8001e5e:	d1b9      	bne.n	8001dd4 <__aeabi_dmul+0x42c>
 8001e60:	0022      	movs	r2, r4
 8001e62:	075e      	lsls	r6, r3, #29
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	0b1f      	lsrs	r7, r3, #12
 8001e68:	08d2      	lsrs	r2, r2, #3
 8001e6a:	4316      	orrs	r6, r2
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e606      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e70:	2780      	movs	r7, #128	; 0x80
 8001e72:	033f      	lsls	r7, r7, #12
 8001e74:	431f      	orrs	r7, r3
 8001e76:	033f      	lsls	r7, r7, #12
 8001e78:	0b3f      	lsrs	r7, r7, #12
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	4b00      	ldr	r3, [pc, #0]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001e7e:	e5fe      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	0000043e 	.word	0x0000043e

08001e8c <__aeabi_dsub>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	464e      	mov	r6, r9
 8001e92:	4645      	mov	r5, r8
 8001e94:	46de      	mov	lr, fp
 8001e96:	000c      	movs	r4, r1
 8001e98:	0309      	lsls	r1, r1, #12
 8001e9a:	b5e0      	push	{r5, r6, r7, lr}
 8001e9c:	0a49      	lsrs	r1, r1, #9
 8001e9e:	0f46      	lsrs	r6, r0, #29
 8001ea0:	005f      	lsls	r7, r3, #1
 8001ea2:	4331      	orrs	r1, r6
 8001ea4:	031e      	lsls	r6, r3, #12
 8001ea6:	0fdb      	lsrs	r3, r3, #31
 8001ea8:	0a76      	lsrs	r6, r6, #9
 8001eaa:	469b      	mov	fp, r3
 8001eac:	0f53      	lsrs	r3, r2, #29
 8001eae:	4333      	orrs	r3, r6
 8001eb0:	4ec8      	ldr	r6, [pc, #800]	; (80021d4 <__aeabi_dsub+0x348>)
 8001eb2:	0065      	lsls	r5, r4, #1
 8001eb4:	00c0      	lsls	r0, r0, #3
 8001eb6:	0fe4      	lsrs	r4, r4, #31
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	0d6d      	lsrs	r5, r5, #21
 8001ebc:	46a2      	mov	sl, r4
 8001ebe:	4681      	mov	r9, r0
 8001ec0:	0d7f      	lsrs	r7, r7, #21
 8001ec2:	469c      	mov	ip, r3
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	42b7      	cmp	r7, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x40>
 8001eca:	e0b9      	b.n	8002040 <__aeabi_dsub+0x1b4>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	2601      	movs	r6, #1
 8001ed0:	4073      	eors	r3, r6
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	1bee      	subs	r6, r5, r7
 8001ed6:	45a3      	cmp	fp, r4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x50>
 8001eda:	e083      	b.n	8001fe4 <__aeabi_dsub+0x158>
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	dd63      	ble.n	8001fa8 <__aeabi_dsub+0x11c>
 8001ee0:	2f00      	cmp	r7, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x5a>
 8001ee4:	e0b1      	b.n	800204a <__aeabi_dsub+0x1be>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x62>
 8001eec:	e123      	b.n	8002136 <__aeabi_dsub+0x2aa>
 8001eee:	1e73      	subs	r3, r6, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_dsub+0x6a>
 8001ef4:	e1ba      	b.n	800226c <__aeabi_dsub+0x3e0>
 8001ef6:	1a86      	subs	r6, r0, r2
 8001ef8:	4663      	mov	r3, ip
 8001efa:	42b0      	cmp	r0, r6
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	2501      	movs	r5, #1
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	4240      	negs	r0, r0
 8001f04:	1a09      	subs	r1, r1, r0
 8001f06:	020b      	lsls	r3, r1, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x80>
 8001f0a:	e147      	b.n	800219c <__aeabi_dsub+0x310>
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	0a4b      	lsrs	r3, r1, #9
 8001f10:	4698      	mov	r8, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x8e>
 8001f18:	e189      	b.n	800222e <__aeabi_dsub+0x3a2>
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f000 fbf2 	bl	8002704 <__clzsi2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3b08      	subs	r3, #8
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x9e>
 8001f28:	e17c      	b.n	8002224 <__aeabi_dsub+0x398>
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	0030      	movs	r0, r6
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	4641      	mov	r1, r8
 8001f32:	40d0      	lsrs	r0, r2
 8001f34:	4099      	lsls	r1, r3
 8001f36:	0002      	movs	r2, r0
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0xb6>
 8001f40:	e16a      	b.n	8002218 <__aeabi_dsub+0x38c>
 8001f42:	1b5d      	subs	r5, r3, r5
 8001f44:	1c6b      	adds	r3, r5, #1
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dsub+0xc0>
 8001f4a:	e194      	b.n	8002276 <__aeabi_dsub+0x3ea>
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	0010      	movs	r0, r2
 8001f50:	0035      	movs	r5, r6
 8001f52:	1ac9      	subs	r1, r1, r3
 8001f54:	408e      	lsls	r6, r1
 8001f56:	40da      	lsrs	r2, r3
 8001f58:	4088      	lsls	r0, r1
 8001f5a:	40dd      	lsrs	r5, r3
 8001f5c:	1e71      	subs	r1, r6, #1
 8001f5e:	418e      	sbcs	r6, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	4328      	orrs	r0, r5
 8001f66:	2500      	movs	r5, #0
 8001f68:	4306      	orrs	r6, r0
 8001f6a:	4032      	ands	r2, r6
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d009      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4033      	ands	r3, r6
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d005      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	42b3      	cmp	r3, r6
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	4276      	negs	r6, r6
 8001f80:	1989      	adds	r1, r1, r6
 8001f82:	001e      	movs	r6, r3
 8001f84:	020b      	lsls	r3, r1, #8
 8001f86:	d400      	bmi.n	8001f8a <__aeabi_dsub+0xfe>
 8001f88:	e23d      	b.n	8002406 <__aeabi_dsub+0x57a>
 8001f8a:	1c6a      	adds	r2, r5, #1
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <__aeabi_dsub+0x348>)
 8001f8e:	0555      	lsls	r5, r2, #21
 8001f90:	0d6d      	lsrs	r5, r5, #21
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x10c>
 8001f96:	e119      	b.n	80021cc <__aeabi_dsub+0x340>
 8001f98:	4a8f      	ldr	r2, [pc, #572]	; (80021d8 <__aeabi_dsub+0x34c>)
 8001f9a:	08f6      	lsrs	r6, r6, #3
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	0757      	lsls	r7, r2, #29
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4337      	orrs	r7, r6
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	e09b      	b.n	80020e0 <__aeabi_dsub+0x254>
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x122>
 8001fac:	e0c5      	b.n	800213a <__aeabi_dsub+0x2ae>
 8001fae:	1c6e      	adds	r6, r5, #1
 8001fb0:	0576      	lsls	r6, r6, #21
 8001fb2:	0d76      	lsrs	r6, r6, #21
 8001fb4:	2e01      	cmp	r6, #1
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x12e>
 8001fb8:	e148      	b.n	800224c <__aeabi_dsub+0x3c0>
 8001fba:	4667      	mov	r7, ip
 8001fbc:	1a86      	subs	r6, r0, r2
 8001fbe:	1bcb      	subs	r3, r1, r7
 8001fc0:	42b0      	cmp	r0, r6
 8001fc2:	41bf      	sbcs	r7, r7
 8001fc4:	427f      	negs	r7, r7
 8001fc6:	46b8      	mov	r8, r7
 8001fc8:	001f      	movs	r7, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	1aff      	subs	r7, r7, r3
 8001fce:	003b      	movs	r3, r7
 8001fd0:	46b8      	mov	r8, r7
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	d500      	bpl.n	8001fd8 <__aeabi_dsub+0x14c>
 8001fd6:	e15f      	b.n	8002298 <__aeabi_dsub+0x40c>
 8001fd8:	4337      	orrs	r7, r6
 8001fda:	d19a      	bne.n	8001f12 <__aeabi_dsub+0x86>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2400      	movs	r4, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e079      	b.n	80020d8 <__aeabi_dsub+0x24c>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x15e>
 8001fe8:	e0fa      	b.n	80021e0 <__aeabi_dsub+0x354>
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x164>
 8001fee:	e08d      	b.n	800210c <__aeabi_dsub+0x280>
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <__aeabi_dsub+0x348>)
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	d067      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431f      	orrs	r7, r3
 8001ffe:	46bc      	mov	ip, r7
 8002000:	2e38      	cmp	r6, #56	; 0x38
 8002002:	dc00      	bgt.n	8002006 <__aeabi_dsub+0x17a>
 8002004:	e152      	b.n	80022ac <__aeabi_dsub+0x420>
 8002006:	4663      	mov	r3, ip
 8002008:	4313      	orrs	r3, r2
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	181e      	adds	r6, r3, r0
 8002010:	4286      	cmp	r6, r0
 8002012:	4180      	sbcs	r0, r0
 8002014:	4240      	negs	r0, r0
 8002016:	1809      	adds	r1, r1, r0
 8002018:	020b      	lsls	r3, r1, #8
 800201a:	d400      	bmi.n	800201e <__aeabi_dsub+0x192>
 800201c:	e0be      	b.n	800219c <__aeabi_dsub+0x310>
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <__aeabi_dsub+0x348>)
 8002020:	3501      	adds	r5, #1
 8002022:	429d      	cmp	r5, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x19c>
 8002026:	e0d2      	b.n	80021ce <__aeabi_dsub+0x342>
 8002028:	4a6b      	ldr	r2, [pc, #428]	; (80021d8 <__aeabi_dsub+0x34c>)
 800202a:	0873      	lsrs	r3, r6, #1
 800202c:	400a      	ands	r2, r1
 800202e:	2101      	movs	r1, #1
 8002030:	400e      	ands	r6, r1
 8002032:	431e      	orrs	r6, r3
 8002034:	0851      	lsrs	r1, r2, #1
 8002036:	07d3      	lsls	r3, r2, #31
 8002038:	2207      	movs	r2, #7
 800203a:	431e      	orrs	r6, r3
 800203c:	4032      	ands	r2, r6
 800203e:	e795      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002040:	001e      	movs	r6, r3
 8002042:	4316      	orrs	r6, r2
 8002044:	d000      	beq.n	8002048 <__aeabi_dsub+0x1bc>
 8002046:	e745      	b.n	8001ed4 <__aeabi_dsub+0x48>
 8002048:	e740      	b.n	8001ecc <__aeabi_dsub+0x40>
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <__aeabi_dsub+0x348>)
 800204c:	429d      	cmp	r5, r3
 800204e:	d03a      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	4667      	mov	r7, ip
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431f      	orrs	r7, r3
 8002058:	46bc      	mov	ip, r7
 800205a:	2e38      	cmp	r6, #56	; 0x38
 800205c:	dd00      	ble.n	8002060 <__aeabi_dsub+0x1d4>
 800205e:	e0eb      	b.n	8002238 <__aeabi_dsub+0x3ac>
 8002060:	2e1f      	cmp	r6, #31
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dsub+0x1da>
 8002064:	e13a      	b.n	80022dc <__aeabi_dsub+0x450>
 8002066:	0033      	movs	r3, r6
 8002068:	4667      	mov	r7, ip
 800206a:	3b20      	subs	r3, #32
 800206c:	40df      	lsrs	r7, r3
 800206e:	003b      	movs	r3, r7
 8002070:	2e20      	cmp	r6, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x1f4>
 8002074:	2740      	movs	r7, #64	; 0x40
 8002076:	1bbf      	subs	r7, r7, r6
 8002078:	4666      	mov	r6, ip
 800207a:	40be      	lsls	r6, r7
 800207c:	4332      	orrs	r2, r6
 800207e:	4690      	mov	r8, r2
 8002080:	4646      	mov	r6, r8
 8002082:	1e72      	subs	r2, r6, #1
 8002084:	4196      	sbcs	r6, r2
 8002086:	4333      	orrs	r3, r6
 8002088:	e0da      	b.n	8002240 <__aeabi_dsub+0x3b4>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x204>
 800208e:	e214      	b.n	80024ba <__aeabi_dsub+0x62e>
 8002090:	4663      	mov	r3, ip
 8002092:	4313      	orrs	r3, r2
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x20c>
 8002096:	e168      	b.n	800236a <__aeabi_dsub+0x4de>
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	08c0      	lsrs	r0, r0, #3
 800209e:	08c9      	lsrs	r1, r1, #3
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	4306      	orrs	r6, r0
 80020a4:	4219      	tst	r1, r3
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x22e>
 80020a8:	4660      	mov	r0, ip
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	4218      	tst	r0, r3
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x22e>
 80020b0:	4663      	mov	r3, ip
 80020b2:	0001      	movs	r1, r0
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	0f72      	lsrs	r2, r6, #29
 80020c2:	4d44      	ldr	r5, [pc, #272]	; (80021d4 <__aeabi_dsub+0x348>)
 80020c4:	4311      	orrs	r1, r2
 80020c6:	464b      	mov	r3, r9
 80020c8:	08de      	lsrs	r6, r3, #3
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <__aeabi_dsub+0x348>)
 80020cc:	074f      	lsls	r7, r1, #29
 80020ce:	4337      	orrs	r7, r6
 80020d0:	08ca      	lsrs	r2, r1, #3
 80020d2:	429d      	cmp	r5, r3
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x24c>
 80020d6:	e06e      	b.n	80021b6 <__aeabi_dsub+0x32a>
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	056d      	lsls	r5, r5, #21
 80020dc:	0b12      	lsrs	r2, r2, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	2100      	movs	r1, #0
 80020e2:	0312      	lsls	r2, r2, #12
 80020e4:	0b13      	lsrs	r3, r2, #12
 80020e6:	0d0a      	lsrs	r2, r1, #20
 80020e8:	0512      	lsls	r2, r2, #20
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <__aeabi_dsub+0x350>)
 80020ee:	052d      	lsls	r5, r5, #20
 80020f0:	4013      	ands	r3, r2
 80020f2:	432b      	orrs	r3, r5
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	07e4      	lsls	r4, r4, #31
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	4323      	orrs	r3, r4
 80020fc:	0038      	movs	r0, r7
 80020fe:	0019      	movs	r1, r3
 8002100:	bc3c      	pop	{r2, r3, r4, r5}
 8002102:	4690      	mov	r8, r2
 8002104:	4699      	mov	r9, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	46ab      	mov	fp, r5
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210c:	4663      	mov	r3, ip
 800210e:	4313      	orrs	r3, r2
 8002110:	d011      	beq.n	8002136 <__aeabi_dsub+0x2aa>
 8002112:	1e73      	subs	r3, r6, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x28e>
 8002118:	e107      	b.n	800232a <__aeabi_dsub+0x49e>
 800211a:	1886      	adds	r6, r0, r2
 800211c:	4286      	cmp	r6, r0
 800211e:	4180      	sbcs	r0, r0
 8002120:	4461      	add	r1, ip
 8002122:	4240      	negs	r0, r0
 8002124:	1809      	adds	r1, r1, r0
 8002126:	2501      	movs	r5, #1
 8002128:	020b      	lsls	r3, r1, #8
 800212a:	d537      	bpl.n	800219c <__aeabi_dsub+0x310>
 800212c:	2502      	movs	r5, #2
 800212e:	e77b      	b.n	8002028 <__aeabi_dsub+0x19c>
 8002130:	003e      	movs	r6, r7
 8002132:	4661      	mov	r1, ip
 8002134:	4691      	mov	r9, r2
 8002136:	0035      	movs	r5, r6
 8002138:	e7c5      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800213a:	465c      	mov	r4, fp
 800213c:	2d00      	cmp	r5, #0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x2b6>
 8002140:	e0e1      	b.n	8002306 <__aeabi_dsub+0x47a>
 8002142:	000b      	movs	r3, r1
 8002144:	4303      	orrs	r3, r0
 8002146:	d0f3      	beq.n	8002130 <__aeabi_dsub+0x2a4>
 8002148:	1c73      	adds	r3, r6, #1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x2c2>
 800214c:	e1ac      	b.n	80024a8 <__aeabi_dsub+0x61c>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <__aeabi_dsub+0x348>)
 8002150:	429f      	cmp	r7, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2ca>
 8002154:	e13a      	b.n	80023cc <__aeabi_dsub+0x540>
 8002156:	43f3      	mvns	r3, r6
 8002158:	2b38      	cmp	r3, #56	; 0x38
 800215a:	dd00      	ble.n	800215e <__aeabi_dsub+0x2d2>
 800215c:	e16f      	b.n	800243e <__aeabi_dsub+0x5b2>
 800215e:	2b1f      	cmp	r3, #31
 8002160:	dd00      	ble.n	8002164 <__aeabi_dsub+0x2d8>
 8002162:	e18c      	b.n	800247e <__aeabi_dsub+0x5f2>
 8002164:	2520      	movs	r5, #32
 8002166:	000e      	movs	r6, r1
 8002168:	1aed      	subs	r5, r5, r3
 800216a:	40ae      	lsls	r6, r5
 800216c:	46b0      	mov	r8, r6
 800216e:	0006      	movs	r6, r0
 8002170:	46aa      	mov	sl, r5
 8002172:	40de      	lsrs	r6, r3
 8002174:	4645      	mov	r5, r8
 8002176:	4335      	orrs	r5, r6
 8002178:	002e      	movs	r6, r5
 800217a:	4655      	mov	r5, sl
 800217c:	40d9      	lsrs	r1, r3
 800217e:	40a8      	lsls	r0, r5
 8002180:	4663      	mov	r3, ip
 8002182:	1e45      	subs	r5, r0, #1
 8002184:	41a8      	sbcs	r0, r5
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	469c      	mov	ip, r3
 800218a:	4330      	orrs	r0, r6
 800218c:	1a16      	subs	r6, r2, r0
 800218e:	42b2      	cmp	r2, r6
 8002190:	4192      	sbcs	r2, r2
 8002192:	4663      	mov	r3, ip
 8002194:	4252      	negs	r2, r2
 8002196:	1a99      	subs	r1, r3, r2
 8002198:	003d      	movs	r5, r7
 800219a:	e6b4      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800219c:	2207      	movs	r2, #7
 800219e:	4032      	ands	r2, r6
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x31a>
 80021a4:	e6e4      	b.n	8001f70 <__aeabi_dsub+0xe4>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__aeabi_dsub+0x348>)
 80021a8:	08f6      	lsrs	r6, r6, #3
 80021aa:	074f      	lsls	r7, r1, #29
 80021ac:	4337      	orrs	r7, r6
 80021ae:	08ca      	lsrs	r2, r1, #3
 80021b0:	429d      	cmp	r5, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x32a>
 80021b4:	e790      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80021b6:	003b      	movs	r3, r7
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x332>
 80021bc:	e1a6      	b.n	800250c <__aeabi_dsub+0x680>
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0312      	lsls	r2, r2, #12
 80021c6:	0b12      	lsrs	r2, r2, #12
 80021c8:	4d02      	ldr	r5, [pc, #8]	; (80021d4 <__aeabi_dsub+0x348>)
 80021ca:	e789      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021cc:	0015      	movs	r5, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	2700      	movs	r7, #0
 80021d2:	e785      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	ff7fffff 	.word	0xff7fffff
 80021dc:	800fffff 	.word	0x800fffff
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x35a>
 80021e4:	e0c7      	b.n	8002376 <__aeabi_dsub+0x4ea>
 80021e6:	1c6b      	adds	r3, r5, #1
 80021e8:	055e      	lsls	r6, r3, #21
 80021ea:	0d76      	lsrs	r6, r6, #21
 80021ec:	2e01      	cmp	r6, #1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x366>
 80021f0:	e0f0      	b.n	80023d4 <__aeabi_dsub+0x548>
 80021f2:	4dc8      	ldr	r5, [pc, #800]	; (8002514 <__aeabi_dsub+0x688>)
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x36e>
 80021f8:	e0b9      	b.n	800236e <__aeabi_dsub+0x4e2>
 80021fa:	1885      	adds	r5, r0, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	4285      	cmp	r5, r0
 8002200:	4189      	sbcs	r1, r1
 8002202:	4462      	add	r2, ip
 8002204:	4249      	negs	r1, r1
 8002206:	1851      	adds	r1, r2, r1
 8002208:	2207      	movs	r2, #7
 800220a:	07ce      	lsls	r6, r1, #31
 800220c:	086d      	lsrs	r5, r5, #1
 800220e:	432e      	orrs	r6, r5
 8002210:	0849      	lsrs	r1, r1, #1
 8002212:	4032      	ands	r2, r6
 8002214:	001d      	movs	r5, r3
 8002216:	e6a9      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002218:	49bf      	ldr	r1, [pc, #764]	; (8002518 <__aeabi_dsub+0x68c>)
 800221a:	1aed      	subs	r5, r5, r3
 800221c:	4011      	ands	r1, r2
 800221e:	2207      	movs	r2, #7
 8002220:	4032      	ands	r2, r6
 8002222:	e6a3      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002224:	0032      	movs	r2, r6
 8002226:	3828      	subs	r0, #40	; 0x28
 8002228:	4082      	lsls	r2, r0
 800222a:	2600      	movs	r6, #0
 800222c:	e686      	b.n	8001f3c <__aeabi_dsub+0xb0>
 800222e:	0030      	movs	r0, r6
 8002230:	f000 fa68 	bl	8002704 <__clzsi2>
 8002234:	3020      	adds	r0, #32
 8002236:	e673      	b.n	8001f20 <__aeabi_dsub+0x94>
 8002238:	4663      	mov	r3, ip
 800223a:	4313      	orrs	r3, r2
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	4193      	sbcs	r3, r2
 8002240:	1ac6      	subs	r6, r0, r3
 8002242:	42b0      	cmp	r0, r6
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	1a09      	subs	r1, r1, r0
 800224a:	e65c      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800224c:	000e      	movs	r6, r1
 800224e:	4667      	mov	r7, ip
 8002250:	4306      	orrs	r6, r0
 8002252:	4317      	orrs	r7, r2
 8002254:	2d00      	cmp	r5, #0
 8002256:	d15e      	bne.n	8002316 <__aeabi_dsub+0x48a>
 8002258:	2e00      	cmp	r6, #0
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x3d2>
 800225c:	e0f3      	b.n	8002446 <__aeabi_dsub+0x5ba>
 800225e:	2f00      	cmp	r7, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x3d8>
 8002262:	e11e      	b.n	80024a2 <__aeabi_dsub+0x616>
 8002264:	465c      	mov	r4, fp
 8002266:	4661      	mov	r1, ip
 8002268:	4691      	mov	r9, r2
 800226a:	e72c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800226c:	4fa9      	ldr	r7, [pc, #676]	; (8002514 <__aeabi_dsub+0x688>)
 800226e:	42be      	cmp	r6, r7
 8002270:	d07b      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002272:	001e      	movs	r6, r3
 8002274:	e6f1      	b.n	800205a <__aeabi_dsub+0x1ce>
 8002276:	0010      	movs	r0, r2
 8002278:	3d1f      	subs	r5, #31
 800227a:	40e8      	lsrs	r0, r5
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <__aeabi_dsub+0x3fc>
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	1acb      	subs	r3, r1, r3
 8002284:	409a      	lsls	r2, r3
 8002286:	4316      	orrs	r6, r2
 8002288:	1e73      	subs	r3, r6, #1
 800228a:	419e      	sbcs	r6, r3
 800228c:	2207      	movs	r2, #7
 800228e:	4306      	orrs	r6, r0
 8002290:	4032      	ands	r2, r6
 8002292:	2100      	movs	r1, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e783      	b.n	80021a0 <__aeabi_dsub+0x314>
 8002298:	1a16      	subs	r6, r2, r0
 800229a:	4663      	mov	r3, ip
 800229c:	42b2      	cmp	r2, r6
 800229e:	4180      	sbcs	r0, r0
 80022a0:	1a59      	subs	r1, r3, r1
 80022a2:	4240      	negs	r0, r0
 80022a4:	1a0b      	subs	r3, r1, r0
 80022a6:	4698      	mov	r8, r3
 80022a8:	465c      	mov	r4, fp
 80022aa:	e632      	b.n	8001f12 <__aeabi_dsub+0x86>
 80022ac:	2e1f      	cmp	r6, #31
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0x426>
 80022b0:	e0ab      	b.n	800240a <__aeabi_dsub+0x57e>
 80022b2:	2720      	movs	r7, #32
 80022b4:	1bbb      	subs	r3, r7, r6
 80022b6:	469a      	mov	sl, r3
 80022b8:	4663      	mov	r3, ip
 80022ba:	4657      	mov	r7, sl
 80022bc:	40bb      	lsls	r3, r7
 80022be:	4699      	mov	r9, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	464f      	mov	r7, r9
 80022c4:	40f3      	lsrs	r3, r6
 80022c6:	431f      	orrs	r7, r3
 80022c8:	003b      	movs	r3, r7
 80022ca:	4657      	mov	r7, sl
 80022cc:	40ba      	lsls	r2, r7
 80022ce:	1e57      	subs	r7, r2, #1
 80022d0:	41ba      	sbcs	r2, r7
 80022d2:	4313      	orrs	r3, r2
 80022d4:	4662      	mov	r2, ip
 80022d6:	40f2      	lsrs	r2, r6
 80022d8:	1889      	adds	r1, r1, r2
 80022da:	e698      	b.n	800200e <__aeabi_dsub+0x182>
 80022dc:	2720      	movs	r7, #32
 80022de:	1bbb      	subs	r3, r7, r6
 80022e0:	469a      	mov	sl, r3
 80022e2:	4663      	mov	r3, ip
 80022e4:	4657      	mov	r7, sl
 80022e6:	40bb      	lsls	r3, r7
 80022e8:	4699      	mov	r9, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	464f      	mov	r7, r9
 80022ee:	40f3      	lsrs	r3, r6
 80022f0:	431f      	orrs	r7, r3
 80022f2:	003b      	movs	r3, r7
 80022f4:	4657      	mov	r7, sl
 80022f6:	40ba      	lsls	r2, r7
 80022f8:	1e57      	subs	r7, r2, #1
 80022fa:	41ba      	sbcs	r2, r7
 80022fc:	4313      	orrs	r3, r2
 80022fe:	4662      	mov	r2, ip
 8002300:	40f2      	lsrs	r2, r6
 8002302:	1a89      	subs	r1, r1, r2
 8002304:	e79c      	b.n	8002240 <__aeabi_dsub+0x3b4>
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <__aeabi_dsub+0x688>)
 8002308:	429f      	cmp	r7, r3
 800230a:	d05f      	beq.n	80023cc <__aeabi_dsub+0x540>
 800230c:	2580      	movs	r5, #128	; 0x80
 800230e:	042d      	lsls	r5, r5, #16
 8002310:	4273      	negs	r3, r6
 8002312:	4329      	orrs	r1, r5
 8002314:	e720      	b.n	8002158 <__aeabi_dsub+0x2cc>
 8002316:	2e00      	cmp	r6, #0
 8002318:	d10c      	bne.n	8002334 <__aeabi_dsub+0x4a8>
 800231a:	2f00      	cmp	r7, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x494>
 800231e:	e0d0      	b.n	80024c2 <__aeabi_dsub+0x636>
 8002320:	465c      	mov	r4, fp
 8002322:	4661      	mov	r1, ip
 8002324:	4691      	mov	r9, r2
 8002326:	4d7b      	ldr	r5, [pc, #492]	; (8002514 <__aeabi_dsub+0x688>)
 8002328:	e6cd      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800232a:	4f7a      	ldr	r7, [pc, #488]	; (8002514 <__aeabi_dsub+0x688>)
 800232c:	42be      	cmp	r6, r7
 800232e:	d01c      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002330:	001e      	movs	r6, r3
 8002332:	e665      	b.n	8002000 <__aeabi_dsub+0x174>
 8002334:	2f00      	cmp	r7, #0
 8002336:	d018      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002338:	08c0      	lsrs	r0, r0, #3
 800233a:	074e      	lsls	r6, r1, #29
 800233c:	4306      	orrs	r6, r0
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	08c9      	lsrs	r1, r1, #3
 8002342:	0300      	lsls	r0, r0, #12
 8002344:	4201      	tst	r1, r0
 8002346:	d008      	beq.n	800235a <__aeabi_dsub+0x4ce>
 8002348:	4663      	mov	r3, ip
 800234a:	08dc      	lsrs	r4, r3, #3
 800234c:	4204      	tst	r4, r0
 800234e:	d104      	bne.n	800235a <__aeabi_dsub+0x4ce>
 8002350:	0021      	movs	r1, r4
 8002352:	46da      	mov	sl, fp
 8002354:	08d2      	lsrs	r2, r2, #3
 8002356:	075e      	lsls	r6, r3, #29
 8002358:	4316      	orrs	r6, r2
 800235a:	00f3      	lsls	r3, r6, #3
 800235c:	4699      	mov	r9, r3
 800235e:	2401      	movs	r4, #1
 8002360:	4653      	mov	r3, sl
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	0f72      	lsrs	r2, r6, #29
 8002366:	4311      	orrs	r1, r2
 8002368:	401c      	ands	r4, r3
 800236a:	4d6a      	ldr	r5, [pc, #424]	; (8002514 <__aeabi_dsub+0x688>)
 800236c:	e6ab      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800236e:	001d      	movs	r5, r3
 8002370:	2200      	movs	r2, #0
 8002372:	2700      	movs	r7, #0
 8002374:	e6b4      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002376:	2d00      	cmp	r5, #0
 8002378:	d159      	bne.n	800242e <__aeabi_dsub+0x5a2>
 800237a:	000b      	movs	r3, r1
 800237c:	4303      	orrs	r3, r0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x4f6>
 8002380:	e6d6      	b.n	8002130 <__aeabi_dsub+0x2a4>
 8002382:	1c73      	adds	r3, r6, #1
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x4fc>
 8002386:	e0b2      	b.n	80024ee <__aeabi_dsub+0x662>
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <__aeabi_dsub+0x688>)
 800238a:	429f      	cmp	r7, r3
 800238c:	d01e      	beq.n	80023cc <__aeabi_dsub+0x540>
 800238e:	43f3      	mvns	r3, r6
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	dc6f      	bgt.n	8002474 <__aeabi_dsub+0x5e8>
 8002394:	2b1f      	cmp	r3, #31
 8002396:	dd00      	ble.n	800239a <__aeabi_dsub+0x50e>
 8002398:	e097      	b.n	80024ca <__aeabi_dsub+0x63e>
 800239a:	2520      	movs	r5, #32
 800239c:	000e      	movs	r6, r1
 800239e:	1aed      	subs	r5, r5, r3
 80023a0:	40ae      	lsls	r6, r5
 80023a2:	46b0      	mov	r8, r6
 80023a4:	0006      	movs	r6, r0
 80023a6:	46aa      	mov	sl, r5
 80023a8:	40de      	lsrs	r6, r3
 80023aa:	4645      	mov	r5, r8
 80023ac:	4335      	orrs	r5, r6
 80023ae:	002e      	movs	r6, r5
 80023b0:	4655      	mov	r5, sl
 80023b2:	40a8      	lsls	r0, r5
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	1e45      	subs	r5, r0, #1
 80023b8:	41a8      	sbcs	r0, r5
 80023ba:	448c      	add	ip, r1
 80023bc:	4306      	orrs	r6, r0
 80023be:	18b6      	adds	r6, r6, r2
 80023c0:	4296      	cmp	r6, r2
 80023c2:	4192      	sbcs	r2, r2
 80023c4:	4251      	negs	r1, r2
 80023c6:	4461      	add	r1, ip
 80023c8:	003d      	movs	r5, r7
 80023ca:	e625      	b.n	8002018 <__aeabi_dsub+0x18c>
 80023cc:	003d      	movs	r5, r7
 80023ce:	4661      	mov	r1, ip
 80023d0:	4691      	mov	r9, r2
 80023d2:	e678      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023d4:	000b      	movs	r3, r1
 80023d6:	4303      	orrs	r3, r0
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x552>
 80023dc:	e655      	b.n	800208a <__aeabi_dsub+0x1fe>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f5      	beq.n	80023ce <__aeabi_dsub+0x542>
 80023e2:	4663      	mov	r3, ip
 80023e4:	4313      	orrs	r3, r2
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x55e>
 80023e8:	e66d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023ea:	1886      	adds	r6, r0, r2
 80023ec:	4286      	cmp	r6, r0
 80023ee:	4180      	sbcs	r0, r0
 80023f0:	4461      	add	r1, ip
 80023f2:	4240      	negs	r0, r0
 80023f4:	1809      	adds	r1, r1, r0
 80023f6:	2200      	movs	r2, #0
 80023f8:	020b      	lsls	r3, r1, #8
 80023fa:	d400      	bmi.n	80023fe <__aeabi_dsub+0x572>
 80023fc:	e6d0      	b.n	80021a0 <__aeabi_dsub+0x314>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <__aeabi_dsub+0x68c>)
 8002400:	3501      	adds	r5, #1
 8002402:	4019      	ands	r1, r3
 8002404:	e5b2      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002406:	46b1      	mov	r9, r6
 8002408:	e65d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800240a:	0033      	movs	r3, r6
 800240c:	4667      	mov	r7, ip
 800240e:	3b20      	subs	r3, #32
 8002410:	40df      	lsrs	r7, r3
 8002412:	003b      	movs	r3, r7
 8002414:	2e20      	cmp	r6, #32
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0x598>
 8002418:	2740      	movs	r7, #64	; 0x40
 800241a:	1bbf      	subs	r7, r7, r6
 800241c:	4666      	mov	r6, ip
 800241e:	40be      	lsls	r6, r7
 8002420:	4332      	orrs	r2, r6
 8002422:	4690      	mov	r8, r2
 8002424:	4646      	mov	r6, r8
 8002426:	1e72      	subs	r2, r6, #1
 8002428:	4196      	sbcs	r6, r2
 800242a:	4333      	orrs	r3, r6
 800242c:	e5ef      	b.n	800200e <__aeabi_dsub+0x182>
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <__aeabi_dsub+0x688>)
 8002430:	429f      	cmp	r7, r3
 8002432:	d0cb      	beq.n	80023cc <__aeabi_dsub+0x540>
 8002434:	2580      	movs	r5, #128	; 0x80
 8002436:	042d      	lsls	r5, r5, #16
 8002438:	4273      	negs	r3, r6
 800243a:	4329      	orrs	r1, r5
 800243c:	e7a8      	b.n	8002390 <__aeabi_dsub+0x504>
 800243e:	4308      	orrs	r0, r1
 8002440:	1e41      	subs	r1, r0, #1
 8002442:	4188      	sbcs	r0, r1
 8002444:	e6a2      	b.n	800218c <__aeabi_dsub+0x300>
 8002446:	2f00      	cmp	r7, #0
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x5c0>
 800244a:	e63c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800244c:	4663      	mov	r3, ip
 800244e:	1a86      	subs	r6, r0, r2
 8002450:	1acf      	subs	r7, r1, r3
 8002452:	42b0      	cmp	r0, r6
 8002454:	419b      	sbcs	r3, r3
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	4698      	mov	r8, r3
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d54e      	bpl.n	80024fe <__aeabi_dsub+0x672>
 8002460:	1a16      	subs	r6, r2, r0
 8002462:	4663      	mov	r3, ip
 8002464:	42b2      	cmp	r2, r6
 8002466:	4192      	sbcs	r2, r2
 8002468:	1a59      	subs	r1, r3, r1
 800246a:	4252      	negs	r2, r2
 800246c:	1a89      	subs	r1, r1, r2
 800246e:	465c      	mov	r4, fp
 8002470:	2200      	movs	r2, #0
 8002472:	e57b      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002474:	4301      	orrs	r1, r0
 8002476:	000e      	movs	r6, r1
 8002478:	1e71      	subs	r1, r6, #1
 800247a:	418e      	sbcs	r6, r1
 800247c:	e79f      	b.n	80023be <__aeabi_dsub+0x532>
 800247e:	001d      	movs	r5, r3
 8002480:	000e      	movs	r6, r1
 8002482:	3d20      	subs	r5, #32
 8002484:	40ee      	lsrs	r6, r5
 8002486:	46b0      	mov	r8, r6
 8002488:	2b20      	cmp	r3, #32
 800248a:	d004      	beq.n	8002496 <__aeabi_dsub+0x60a>
 800248c:	2540      	movs	r5, #64	; 0x40
 800248e:	1aeb      	subs	r3, r5, r3
 8002490:	4099      	lsls	r1, r3
 8002492:	4308      	orrs	r0, r1
 8002494:	4681      	mov	r9, r0
 8002496:	4648      	mov	r0, r9
 8002498:	4643      	mov	r3, r8
 800249a:	1e41      	subs	r1, r0, #1
 800249c:	4188      	sbcs	r0, r1
 800249e:	4318      	orrs	r0, r3
 80024a0:	e674      	b.n	800218c <__aeabi_dsub+0x300>
 80024a2:	2200      	movs	r2, #0
 80024a4:	2400      	movs	r4, #0
 80024a6:	e617      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80024a8:	1a16      	subs	r6, r2, r0
 80024aa:	4663      	mov	r3, ip
 80024ac:	42b2      	cmp	r2, r6
 80024ae:	4192      	sbcs	r2, r2
 80024b0:	1a59      	subs	r1, r3, r1
 80024b2:	4252      	negs	r2, r2
 80024b4:	1a89      	subs	r1, r1, r2
 80024b6:	003d      	movs	r5, r7
 80024b8:	e525      	b.n	8001f06 <__aeabi_dsub+0x7a>
 80024ba:	4661      	mov	r1, ip
 80024bc:	4691      	mov	r9, r2
 80024be:	4d15      	ldr	r5, [pc, #84]	; (8002514 <__aeabi_dsub+0x688>)
 80024c0:	e601      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2400      	movs	r4, #0
 80024c6:	0312      	lsls	r2, r2, #12
 80024c8:	e679      	b.n	80021be <__aeabi_dsub+0x332>
 80024ca:	001d      	movs	r5, r3
 80024cc:	000e      	movs	r6, r1
 80024ce:	3d20      	subs	r5, #32
 80024d0:	40ee      	lsrs	r6, r5
 80024d2:	46b0      	mov	r8, r6
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d004      	beq.n	80024e2 <__aeabi_dsub+0x656>
 80024d8:	2540      	movs	r5, #64	; 0x40
 80024da:	1aeb      	subs	r3, r5, r3
 80024dc:	4099      	lsls	r1, r3
 80024de:	4308      	orrs	r0, r1
 80024e0:	4681      	mov	r9, r0
 80024e2:	464e      	mov	r6, r9
 80024e4:	4643      	mov	r3, r8
 80024e6:	1e71      	subs	r1, r6, #1
 80024e8:	418e      	sbcs	r6, r1
 80024ea:	431e      	orrs	r6, r3
 80024ec:	e767      	b.n	80023be <__aeabi_dsub+0x532>
 80024ee:	1886      	adds	r6, r0, r2
 80024f0:	4296      	cmp	r6, r2
 80024f2:	419b      	sbcs	r3, r3
 80024f4:	4461      	add	r1, ip
 80024f6:	425b      	negs	r3, r3
 80024f8:	18c9      	adds	r1, r1, r3
 80024fa:	003d      	movs	r5, r7
 80024fc:	e58c      	b.n	8002018 <__aeabi_dsub+0x18c>
 80024fe:	4647      	mov	r7, r8
 8002500:	4337      	orrs	r7, r6
 8002502:	d0ce      	beq.n	80024a2 <__aeabi_dsub+0x616>
 8002504:	2207      	movs	r2, #7
 8002506:	4641      	mov	r1, r8
 8002508:	4032      	ands	r2, r6
 800250a:	e649      	b.n	80021a0 <__aeabi_dsub+0x314>
 800250c:	2700      	movs	r7, #0
 800250e:	003a      	movs	r2, r7
 8002510:	e5e6      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	000007ff 	.word	0x000007ff
 8002518:	ff7fffff 	.word	0xff7fffff

0800251c <__aeabi_d2iz>:
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	4d14      	ldr	r5, [pc, #80]	; (8002570 <__aeabi_d2iz+0x54>)
 8002520:	030a      	lsls	r2, r1, #12
 8002522:	004b      	lsls	r3, r1, #1
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	0fc9      	lsrs	r1, r1, #31
 800252a:	2400      	movs	r4, #0
 800252c:	42ab      	cmp	r3, r5
 800252e:	dd11      	ble.n	8002554 <__aeabi_d2iz+0x38>
 8002530:	4c10      	ldr	r4, [pc, #64]	; (8002574 <__aeabi_d2iz+0x58>)
 8002532:	42a3      	cmp	r3, r4
 8002534:	dc10      	bgt.n	8002558 <__aeabi_d2iz+0x3c>
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	0364      	lsls	r4, r4, #13
 800253a:	4322      	orrs	r2, r4
 800253c:	4c0e      	ldr	r4, [pc, #56]	; (8002578 <__aeabi_d2iz+0x5c>)
 800253e:	1ae4      	subs	r4, r4, r3
 8002540:	2c1f      	cmp	r4, #31
 8002542:	dd0c      	ble.n	800255e <__aeabi_d2iz+0x42>
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <__aeabi_d2iz+0x60>)
 8002546:	1ac3      	subs	r3, r0, r3
 8002548:	40da      	lsrs	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	425c      	negs	r4, r3
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_d2iz+0x38>
 8002552:	001c      	movs	r4, r3
 8002554:	0020      	movs	r0, r4
 8002556:	bd30      	pop	{r4, r5, pc}
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <__aeabi_d2iz+0x64>)
 800255a:	18cc      	adds	r4, r1, r3
 800255c:	e7fa      	b.n	8002554 <__aeabi_d2iz+0x38>
 800255e:	4d09      	ldr	r5, [pc, #36]	; (8002584 <__aeabi_d2iz+0x68>)
 8002560:	40e0      	lsrs	r0, r4
 8002562:	46ac      	mov	ip, r5
 8002564:	4463      	add	r3, ip
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	4303      	orrs	r3, r0
 800256c:	e7ee      	b.n	800254c <__aeabi_d2iz+0x30>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	000003fe 	.word	0x000003fe
 8002574:	0000041d 	.word	0x0000041d
 8002578:	00000433 	.word	0x00000433
 800257c:	00000413 	.word	0x00000413
 8002580:	7fffffff 	.word	0x7fffffff
 8002584:	fffffbed 	.word	0xfffffbed

08002588 <__aeabi_i2d>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2800      	cmp	r0, #0
 800258c:	d02d      	beq.n	80025ea <__aeabi_i2d+0x62>
 800258e:	17c3      	asrs	r3, r0, #31
 8002590:	18c5      	adds	r5, r0, r3
 8002592:	405d      	eors	r5, r3
 8002594:	0fc4      	lsrs	r4, r0, #31
 8002596:	0028      	movs	r0, r5
 8002598:	f000 f8b4 	bl	8002704 <__clzsi2>
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <__aeabi_i2d+0x6c>)
 800259e:	1a1b      	subs	r3, r3, r0
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	0d5b      	lsrs	r3, r3, #21
 80025a4:	280a      	cmp	r0, #10
 80025a6:	dd15      	ble.n	80025d4 <__aeabi_i2d+0x4c>
 80025a8:	380b      	subs	r0, #11
 80025aa:	4085      	lsls	r5, r0
 80025ac:	2200      	movs	r2, #0
 80025ae:	032d      	lsls	r5, r5, #12
 80025b0:	0b2d      	lsrs	r5, r5, #12
 80025b2:	2100      	movs	r1, #0
 80025b4:	0010      	movs	r0, r2
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	0d0a      	lsrs	r2, r1, #20
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	0512      	lsls	r2, r2, #20
 80025be:	432a      	orrs	r2, r5
 80025c0:	4d0d      	ldr	r5, [pc, #52]	; (80025f8 <__aeabi_i2d+0x70>)
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	402a      	ands	r2, r5
 80025c6:	4313      	orrs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	07e4      	lsls	r4, r4, #31
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	4323      	orrs	r3, r4
 80025d0:	0019      	movs	r1, r3
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	0002      	movs	r2, r0
 80025d6:	0029      	movs	r1, r5
 80025d8:	3215      	adds	r2, #21
 80025da:	4091      	lsls	r1, r2
 80025dc:	000a      	movs	r2, r1
 80025de:	210b      	movs	r1, #11
 80025e0:	1a08      	subs	r0, r1, r0
 80025e2:	40c5      	lsrs	r5, r0
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	0b2d      	lsrs	r5, r5, #12
 80025e8:	e7e3      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025ea:	2400      	movs	r4, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	2500      	movs	r5, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	e7de      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025f4:	0000041e 	.word	0x0000041e
 80025f8:	800fffff 	.word	0x800fffff

080025fc <__aeabi_ui2d>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	1e04      	subs	r4, r0, #0
 8002600:	d025      	beq.n	800264e <__aeabi_ui2d+0x52>
 8002602:	f000 f87f 	bl	8002704 <__clzsi2>
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <__aeabi_ui2d+0x5c>)
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	0d5b      	lsrs	r3, r3, #21
 800260e:	280a      	cmp	r0, #10
 8002610:	dd12      	ble.n	8002638 <__aeabi_ui2d+0x3c>
 8002612:	380b      	subs	r0, #11
 8002614:	4084      	lsls	r4, r0
 8002616:	2200      	movs	r2, #0
 8002618:	0324      	lsls	r4, r4, #12
 800261a:	0b24      	lsrs	r4, r4, #12
 800261c:	2100      	movs	r1, #0
 800261e:	0010      	movs	r0, r2
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	0d0a      	lsrs	r2, r1, #20
 8002624:	0b24      	lsrs	r4, r4, #12
 8002626:	0512      	lsls	r2, r2, #20
 8002628:	4322      	orrs	r2, r4
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__aeabi_ui2d+0x60>)
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4022      	ands	r2, r4
 8002630:	4313      	orrs	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	0859      	lsrs	r1, r3, #1
 8002636:	bd10      	pop	{r4, pc}
 8002638:	0002      	movs	r2, r0
 800263a:	0021      	movs	r1, r4
 800263c:	3215      	adds	r2, #21
 800263e:	4091      	lsls	r1, r2
 8002640:	000a      	movs	r2, r1
 8002642:	210b      	movs	r1, #11
 8002644:	1a08      	subs	r0, r1, r0
 8002646:	40c4      	lsrs	r4, r0
 8002648:	0324      	lsls	r4, r4, #12
 800264a:	0b24      	lsrs	r4, r4, #12
 800264c:	e7e6      	b.n	800261c <__aeabi_ui2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	e7e2      	b.n	800261c <__aeabi_ui2d+0x20>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	0000041e 	.word	0x0000041e
 800265c:	800fffff 	.word	0x800fffff

08002660 <__aeabi_f2d>:
 8002660:	0041      	lsls	r1, r0, #1
 8002662:	0e09      	lsrs	r1, r1, #24
 8002664:	1c4b      	adds	r3, r1, #1
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	b2db      	uxtb	r3, r3
 800266a:	0246      	lsls	r6, r0, #9
 800266c:	0a75      	lsrs	r5, r6, #9
 800266e:	0fc4      	lsrs	r4, r0, #31
 8002670:	2b01      	cmp	r3, #1
 8002672:	dd14      	ble.n	800269e <__aeabi_f2d+0x3e>
 8002674:	23e0      	movs	r3, #224	; 0xe0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	076d      	lsls	r5, r5, #29
 800267a:	0b36      	lsrs	r6, r6, #12
 800267c:	18cb      	adds	r3, r1, r3
 800267e:	2100      	movs	r1, #0
 8002680:	0d0a      	lsrs	r2, r1, #20
 8002682:	0028      	movs	r0, r5
 8002684:	0512      	lsls	r2, r2, #20
 8002686:	4d1c      	ldr	r5, [pc, #112]	; (80026f8 <__aeabi_f2d+0x98>)
 8002688:	4332      	orrs	r2, r6
 800268a:	055b      	lsls	r3, r3, #21
 800268c:	402a      	ands	r2, r5
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	4313      	orrs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	4323      	orrs	r3, r4
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	2900      	cmp	r1, #0
 80026a0:	d114      	bne.n	80026cc <__aeabi_f2d+0x6c>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d01e      	beq.n	80026e4 <__aeabi_f2d+0x84>
 80026a6:	0028      	movs	r0, r5
 80026a8:	f000 f82c 	bl	8002704 <__clzsi2>
 80026ac:	280a      	cmp	r0, #10
 80026ae:	dc1c      	bgt.n	80026ea <__aeabi_f2d+0x8a>
 80026b0:	230b      	movs	r3, #11
 80026b2:	002a      	movs	r2, r5
 80026b4:	1a1b      	subs	r3, r3, r0
 80026b6:	40da      	lsrs	r2, r3
 80026b8:	0003      	movs	r3, r0
 80026ba:	3315      	adds	r3, #21
 80026bc:	409d      	lsls	r5, r3
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_f2d+0x9c>)
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	1a1b      	subs	r3, r3, r0
 80026c4:	055b      	lsls	r3, r3, #21
 80026c6:	0b16      	lsrs	r6, r2, #12
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	e7d8      	b.n	800267e <__aeabi_f2d+0x1e>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d006      	beq.n	80026de <__aeabi_f2d+0x7e>
 80026d0:	0b32      	lsrs	r2, r6, #12
 80026d2:	2680      	movs	r6, #128	; 0x80
 80026d4:	0336      	lsls	r6, r6, #12
 80026d6:	076d      	lsls	r5, r5, #29
 80026d8:	4316      	orrs	r6, r2
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <__aeabi_f2d+0xa0>)
 80026dc:	e7cf      	b.n	800267e <__aeabi_f2d+0x1e>
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <__aeabi_f2d+0xa0>)
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7cc      	b.n	800267e <__aeabi_f2d+0x1e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2600      	movs	r6, #0
 80026e8:	e7c9      	b.n	800267e <__aeabi_f2d+0x1e>
 80026ea:	0003      	movs	r3, r0
 80026ec:	002a      	movs	r2, r5
 80026ee:	3b0b      	subs	r3, #11
 80026f0:	409a      	lsls	r2, r3
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7e3      	b.n	80026be <__aeabi_f2d+0x5e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	800fffff 	.word	0x800fffff
 80026fc:	00000389 	.word	0x00000389
 8002700:	000007ff 	.word	0x000007ff

08002704 <__clzsi2>:
 8002704:	211c      	movs	r1, #28
 8002706:	2301      	movs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	4298      	cmp	r0, r3
 800270c:	d301      	bcc.n	8002712 <__clzsi2+0xe>
 800270e:	0c00      	lsrs	r0, r0, #16
 8002710:	3910      	subs	r1, #16
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	4298      	cmp	r0, r3
 8002716:	d301      	bcc.n	800271c <__clzsi2+0x18>
 8002718:	0a00      	lsrs	r0, r0, #8
 800271a:	3908      	subs	r1, #8
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	4298      	cmp	r0, r3
 8002720:	d301      	bcc.n	8002726 <__clzsi2+0x22>
 8002722:	0900      	lsrs	r0, r0, #4
 8002724:	3904      	subs	r1, #4
 8002726:	a202      	add	r2, pc, #8	; (adr r2, 8002730 <__clzsi2+0x2c>)
 8002728:	5c10      	ldrb	r0, [r2, r0]
 800272a:	1840      	adds	r0, r0, r1
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	02020304 	.word	0x02020304
 8002734:	01010101 	.word	0x01010101
	...

08002740 <__clzdi2>:
 8002740:	b510      	push	{r4, lr}
 8002742:	2900      	cmp	r1, #0
 8002744:	d103      	bne.n	800274e <__clzdi2+0xe>
 8002746:	f7ff ffdd 	bl	8002704 <__clzsi2>
 800274a:	3020      	adds	r0, #32
 800274c:	e002      	b.n	8002754 <__clzdi2+0x14>
 800274e:	1c08      	adds	r0, r1, #0
 8002750:	f7ff ffd8 	bl	8002704 <__clzsi2>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)

08002758 <__divdi3>:
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	464e      	mov	r6, r9
 800275c:	4657      	mov	r7, sl
 800275e:	46de      	mov	lr, fp
 8002760:	4645      	mov	r5, r8
 8002762:	b5e0      	push	{r5, r6, r7, lr}
 8002764:	000f      	movs	r7, r1
 8002766:	2100      	movs	r1, #0
 8002768:	b083      	sub	sp, #12
 800276a:	0006      	movs	r6, r0
 800276c:	4689      	mov	r9, r1
 800276e:	2f00      	cmp	r7, #0
 8002770:	da06      	bge.n	8002780 <__divdi3+0x28>
 8002772:	0039      	movs	r1, r7
 8002774:	2700      	movs	r7, #0
 8002776:	4246      	negs	r6, r0
 8002778:	418f      	sbcs	r7, r1
 800277a:	2101      	movs	r1, #1
 800277c:	4249      	negs	r1, r1
 800277e:	4689      	mov	r9, r1
 8002780:	2b00      	cmp	r3, #0
 8002782:	da07      	bge.n	8002794 <__divdi3+0x3c>
 8002784:	4649      	mov	r1, r9
 8002786:	43c9      	mvns	r1, r1
 8002788:	0010      	movs	r0, r2
 800278a:	4689      	mov	r9, r1
 800278c:	0019      	movs	r1, r3
 800278e:	2300      	movs	r3, #0
 8002790:	4242      	negs	r2, r0
 8002792:	418b      	sbcs	r3, r1
 8002794:	0034      	movs	r4, r6
 8002796:	003d      	movs	r5, r7
 8002798:	4692      	mov	sl, r2
 800279a:	4698      	mov	r8, r3
 800279c:	42bb      	cmp	r3, r7
 800279e:	d869      	bhi.n	8002874 <__divdi3+0x11c>
 80027a0:	d066      	beq.n	8002870 <__divdi3+0x118>
 80027a2:	4641      	mov	r1, r8
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff ffcb 	bl	8002740 <__clzdi2>
 80027aa:	4683      	mov	fp, r0
 80027ac:	0039      	movs	r1, r7
 80027ae:	0030      	movs	r0, r6
 80027b0:	f7ff ffc6 	bl	8002740 <__clzdi2>
 80027b4:	465b      	mov	r3, fp
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	469c      	mov	ip, r3
 80027ba:	3b20      	subs	r3, #32
 80027bc:	469b      	mov	fp, r3
 80027be:	d500      	bpl.n	80027c2 <__divdi3+0x6a>
 80027c0:	e075      	b.n	80028ae <__divdi3+0x156>
 80027c2:	4651      	mov	r1, sl
 80027c4:	4658      	mov	r0, fp
 80027c6:	4081      	lsls	r1, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	4651      	mov	r1, sl
 80027cc:	4660      	mov	r0, ip
 80027ce:	4081      	lsls	r1, r0
 80027d0:	000a      	movs	r2, r1
 80027d2:	42bb      	cmp	r3, r7
 80027d4:	d861      	bhi.n	800289a <__divdi3+0x142>
 80027d6:	d05e      	beq.n	8002896 <__divdi3+0x13e>
 80027d8:	0034      	movs	r4, r6
 80027da:	003d      	movs	r5, r7
 80027dc:	4659      	mov	r1, fp
 80027de:	1aa4      	subs	r4, r4, r2
 80027e0:	419d      	sbcs	r5, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	da00      	bge.n	80027e8 <__divdi3+0x90>
 80027e6:	e07a      	b.n	80028de <__divdi3+0x186>
 80027e8:	2100      	movs	r1, #0
 80027ea:	2000      	movs	r0, #0
 80027ec:	2601      	movs	r6, #1
 80027ee:	9000      	str	r0, [sp, #0]
 80027f0:	9101      	str	r1, [sp, #4]
 80027f2:	4659      	mov	r1, fp
 80027f4:	408e      	lsls	r6, r1
 80027f6:	9601      	str	r6, [sp, #4]
 80027f8:	4661      	mov	r1, ip
 80027fa:	2601      	movs	r6, #1
 80027fc:	408e      	lsls	r6, r1
 80027fe:	4661      	mov	r1, ip
 8002800:	9600      	str	r6, [sp, #0]
 8002802:	2900      	cmp	r1, #0
 8002804:	d050      	beq.n	80028a8 <__divdi3+0x150>
 8002806:	07d9      	lsls	r1, r3, #31
 8002808:	0856      	lsrs	r6, r2, #1
 800280a:	085f      	lsrs	r7, r3, #1
 800280c:	430e      	orrs	r6, r1
 800280e:	4663      	mov	r3, ip
 8002810:	e00e      	b.n	8002830 <__divdi3+0xd8>
 8002812:	42af      	cmp	r7, r5
 8002814:	d101      	bne.n	800281a <__divdi3+0xc2>
 8002816:	42a6      	cmp	r6, r4
 8002818:	d80c      	bhi.n	8002834 <__divdi3+0xdc>
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	41bd      	sbcs	r5, r7
 800281e:	2101      	movs	r1, #1
 8002820:	1924      	adds	r4, r4, r4
 8002822:	416d      	adcs	r5, r5
 8002824:	2200      	movs	r2, #0
 8002826:	3b01      	subs	r3, #1
 8002828:	1864      	adds	r4, r4, r1
 800282a:	4155      	adcs	r5, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <__divdi3+0xe6>
 8002830:	42af      	cmp	r7, r5
 8002832:	d9ee      	bls.n	8002812 <__divdi3+0xba>
 8002834:	3b01      	subs	r3, #1
 8002836:	1924      	adds	r4, r4, r4
 8002838:	416d      	adcs	r5, r5
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f8      	bne.n	8002830 <__divdi3+0xd8>
 800283e:	9800      	ldr	r0, [sp, #0]
 8002840:	9901      	ldr	r1, [sp, #4]
 8002842:	465b      	mov	r3, fp
 8002844:	1900      	adds	r0, r0, r4
 8002846:	4169      	adcs	r1, r5
 8002848:	2b00      	cmp	r3, #0
 800284a:	db3d      	blt.n	80028c8 <__divdi3+0x170>
 800284c:	002e      	movs	r6, r5
 800284e:	40de      	lsrs	r6, r3
 8002850:	4663      	mov	r3, ip
 8002852:	002c      	movs	r4, r5
 8002854:	40dc      	lsrs	r4, r3
 8002856:	465b      	mov	r3, fp
 8002858:	2b00      	cmp	r3, #0
 800285a:	db4b      	blt.n	80028f4 <__divdi3+0x19c>
 800285c:	0034      	movs	r4, r6
 800285e:	465d      	mov	r5, fp
 8002860:	40ac      	lsls	r4, r5
 8002862:	0023      	movs	r3, r4
 8002864:	4664      	mov	r4, ip
 8002866:	40a6      	lsls	r6, r4
 8002868:	0032      	movs	r2, r6
 800286a:	1a80      	subs	r0, r0, r2
 800286c:	4199      	sbcs	r1, r3
 800286e:	e003      	b.n	8002878 <__divdi3+0x120>
 8002870:	42b2      	cmp	r2, r6
 8002872:	d996      	bls.n	80027a2 <__divdi3+0x4a>
 8002874:	2000      	movs	r0, #0
 8002876:	2100      	movs	r1, #0
 8002878:	464b      	mov	r3, r9
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <__divdi3+0x130>
 800287e:	0003      	movs	r3, r0
 8002880:	000c      	movs	r4, r1
 8002882:	2100      	movs	r1, #0
 8002884:	4258      	negs	r0, r3
 8002886:	41a1      	sbcs	r1, r4
 8002888:	b003      	add	sp, #12
 800288a:	bc3c      	pop	{r2, r3, r4, r5}
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	46a2      	mov	sl, r4
 8002892:	46ab      	mov	fp, r5
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	42b1      	cmp	r1, r6
 8002898:	d99e      	bls.n	80027d8 <__divdi3+0x80>
 800289a:	2100      	movs	r1, #0
 800289c:	2000      	movs	r0, #0
 800289e:	9000      	str	r0, [sp, #0]
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	4661      	mov	r1, ip
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1ae      	bne.n	8002806 <__divdi3+0xae>
 80028a8:	9800      	ldr	r0, [sp, #0]
 80028aa:	9901      	ldr	r1, [sp, #4]
 80028ac:	e7e4      	b.n	8002878 <__divdi3+0x120>
 80028ae:	2320      	movs	r3, #32
 80028b0:	4662      	mov	r2, ip
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	40d9      	lsrs	r1, r3
 80028b8:	4640      	mov	r0, r8
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	4661      	mov	r1, ip
 80028be:	4088      	lsls	r0, r1
 80028c0:	0003      	movs	r3, r0
 80028c2:	9900      	ldr	r1, [sp, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	e780      	b.n	80027ca <__divdi3+0x72>
 80028c8:	4662      	mov	r2, ip
 80028ca:	2320      	movs	r3, #32
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	002a      	movs	r2, r5
 80028d0:	409a      	lsls	r2, r3
 80028d2:	0026      	movs	r6, r4
 80028d4:	0013      	movs	r3, r2
 80028d6:	4662      	mov	r2, ip
 80028d8:	40d6      	lsrs	r6, r2
 80028da:	431e      	orrs	r6, r3
 80028dc:	e7b8      	b.n	8002850 <__divdi3+0xf8>
 80028de:	4661      	mov	r1, ip
 80028e0:	2620      	movs	r6, #32
 80028e2:	2701      	movs	r7, #1
 80028e4:	1a76      	subs	r6, r6, r1
 80028e6:	2000      	movs	r0, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	40f7      	lsrs	r7, r6
 80028ec:	9000      	str	r0, [sp, #0]
 80028ee:	9101      	str	r1, [sp, #4]
 80028f0:	9701      	str	r7, [sp, #4]
 80028f2:	e781      	b.n	80027f8 <__divdi3+0xa0>
 80028f4:	4667      	mov	r7, ip
 80028f6:	2320      	movs	r3, #32
 80028f8:	4662      	mov	r2, ip
 80028fa:	0035      	movs	r5, r6
 80028fc:	40bc      	lsls	r4, r7
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	40dd      	lsrs	r5, r3
 8002902:	0023      	movs	r3, r4
 8002904:	432b      	orrs	r3, r5
 8002906:	e7ad      	b.n	8002864 <__divdi3+0x10c>

08002908 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f01c fc10 	bl	801f13c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <MX_ADC_Init+0xc0>)
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <MX_ADC_Init+0xc4>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <MX_ADC_Init+0xc0>)
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	05d2      	lsls	r2, r2, #23
 800292e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_ADC_Init+0xc0>)
 800293e:	2201      	movs	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_ADC_Init+0xc0>)
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_ADC_Init+0xc0>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002960:	22c2      	movs	r2, #194	; 0xc2
 8002962:	32ff      	adds	r2, #255	; 0xff
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002968:	222c      	movs	r2, #44	; 0x2c
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002970:	2204      	movs	r2, #4
 8002972:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_ADC_Init+0xc0>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_ADC_Init+0xc0>)
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fab8 	bl	8003f04 <HAL_ADC_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002998:	f000 fafa 	bl	8002f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800299c:	003b      	movs	r3, r7
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <MX_ADC_Init+0xc8>)
 80029a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0152      	lsls	r2, r2, #5
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029aa:	003a      	movs	r2, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_ADC_Init+0xc0>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fc1b 	bl	80041ec <HAL_ADC_ConfigChannel>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80029ba:	f000 fae9 	bl	8002f90 <Error_Handler>
  }

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	200012ec 	.word	0x200012ec
 80029cc:	40012400 	.word	0x40012400
 80029d0:	48040000 	.word	0x48040000

080029d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x28>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0089      	lsls	r1, r1, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012400 	.word	0x40012400
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	2424      	movs	r4, #36	; 0x24
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2314      	movs	r3, #20
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f01c fb91 	bl	801f13c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4bbf      	ldr	r3, [pc, #764]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4bbe      	ldr	r3, [pc, #760]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a26:	4bbc      	ldr	r3, [pc, #752]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4bb9      	ldr	r3, [pc, #740]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4bb8      	ldr	r3, [pc, #736]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4bb6      	ldr	r3, [pc, #728]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4bb3      	ldr	r3, [pc, #716]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4bb2      	ldr	r3, [pc, #712]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a56:	4bb0      	ldr	r3, [pc, #704]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a62:	4bad      	ldr	r3, [pc, #692]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	4bac      	ldr	r3, [pc, #688]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6e:	4baa      	ldr	r3, [pc, #680]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a7a:	49a8      	ldr	r1, [pc, #672]	; (8002d1c <MX_GPIO_Init+0x318>)
 8002a7c:	23a0      	movs	r3, #160	; 0xa0
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	2200      	movs	r2, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 ff46 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002a88:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	21e0      	movs	r1, #224	; 0xe0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f001 ff40 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	2107      	movs	r1, #7
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 ff3a 	bl	8004914 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	4aa1      	ldr	r2, [pc, #644]	; (8002d28 <MX_GPIO_Init+0x324>)
 8002aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fda9 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	22e0      	movs	r2, #224	; 0xe0
 8002acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f001 fd95 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	22f0      	movs	r2, #240	; 0xf0
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af8:	000c      	movs	r4, r1
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2203      	movs	r2, #3
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f001 fd83 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	4a85      	ldr	r2, [pc, #532]	; (8002d2c <MX_GPIO_Init+0x328>)
 8002b16:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	193a      	adds	r2, r7, r4
 8002b26:	23a0      	movs	r3, #160	; 0xa0
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 fd73 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2213      	movs	r2, #19
 8002b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f001 fd64 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0192      	lsls	r2, r2, #6
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	4a74      	ldr	r2, [pc, #464]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	0010      	movs	r0, r2
 8002b70:	f001 fd52 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2207      	movs	r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	2202      	movs	r2, #2
 8002b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f001 fd40 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002baa:	193b      	adds	r3, r7, r4
 8002bac:	4a5c      	ldr	r2, [pc, #368]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f001 fd31 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2220      	movs	r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fd1e 	bl	8004618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2005      	movs	r0, #5
 8002be2:	f001 fc8f 	bl	8004504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f001 fca1 	bl	800452e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2007      	movs	r0, #7
 8002bf2:	f001 fc87 	bl	8004504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002bf6:	2007      	movs	r0, #7
 8002bf8:	f001 fc99 	bl	800452e <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <MX_GPIO_Init+0x330>)
 8002c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 fcfe 	bl	8004618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2208      	movs	r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2203      	movs	r2, #3
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fcee 	bl	8004618 <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002c3c:	0021      	movs	r1, r4
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2290      	movs	r2, #144	; 0x90
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	000c      	movs	r4, r1
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	193a      	adds	r2, r7, r4
 8002c5c:	23a0      	movs	r3, #160	; 0xa0
 8002c5e:	05db      	lsls	r3, r3, #23
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f001 fcd8 	bl	8004618 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	2200      	movs	r2, #0
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fe4d 	bl	8004914 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <MX_GPIO_Init+0x334>)
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f001 fcbd 	bl	8004618 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	481e      	ldr	r0, [pc, #120]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f001 fe33 	bl	8004914 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_GPIO_Init+0x338>)
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f001 fca6 	bl	8004618 <HAL_GPIO_Init>


  //desable for lowpower
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2110      	movs	r1, #16
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	22c0      	movs	r2, #192	; 0xc0
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	23a0      	movs	r3, #160	; 0xa0
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fc94 	bl	8004618 <HAL_GPIO_Init>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	03c9      	lsls	r1, r1, #15
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGStopMode();
 8002cfe:	f001 f8f3 	bl	8003ee8 <HAL_DBGMCU_DisableDBGStopMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d08:	490d      	ldr	r1, [pc, #52]	; (8002d40 <MX_GPIO_Init+0x33c>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b00f      	add	sp, #60	; 0x3c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	00009022 	.word	0x00009022
 8002d20:	50000400 	.word	0x50000400
 8002d24:	50000800 	.word	0x50000800
 8002d28:	00009002 	.word	0x00009002
 8002d2c:	00006f11 	.word	0x00006f11
 8002d30:	10110000 	.word	0x10110000
 8002d34:	00006735 	.word	0x00006735
 8002d38:	00001004 	.word	0x00001004
 8002d3c:	50001c00 	.word	0x50001c00
 8002d40:	ffbfffff 	.word	0xffbfffff

08002d44 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d68:	2102      	movs	r1, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d80:	2104      	movs	r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	2200      	movs	r2, #0
 8002db2:	2102      	movs	r1, #2
 8002db4:	2000      	movs	r0, #0
 8002db6:	f01a fefd 	bl	801dbb4 <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	0219      	lsls	r1, r3, #8
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f01a fef4 	bl	801dbb4 <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f01a feeb 	bl	801dbb4 <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	2207      	movs	r2, #7
 8002de6:	2110      	movs	r1, #16
 8002de8:	2001      	movs	r0, #1
 8002dea:	f01a fee3 	bl	801dbb4 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2301      	movs	r3, #1
 8002df4:	2207      	movs	r2, #7
 8002df6:	2102      	movs	r1, #2
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f01a fedb 	bl	801dbb4 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	2207      	movs	r2, #7
 8002e06:	2101      	movs	r1, #1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f01a fed3 	bl	801dbb4 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	0199      	lsls	r1, r3, #6
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	2207      	movs	r2, #7
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f01a feca 	bl	801dbb4 <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2005      	movs	r0, #5
 8002e26:	f001 fb6d 	bl	8004504 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e2a:	2005      	movs	r0, #5
 8002e2c:	f001 fb7f 	bl	800452e <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2007      	movs	r0, #7
 8002e36:	f001 fb65 	bl	8004504 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f001 fb77 	bl	800452e <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin = LD4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <main>:

/**
 * main loop
 */
int main(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e50:	f000 ffae 	bl	8003db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e54:	f000 f812 	bl	8002e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e58:	f7ff fdd4 	bl	8002a04 <MX_GPIO_Init>
  MX_RTC_Init();
 8002e5c:	f000 fc04 	bl	8003668 <MX_RTC_Init>
  MX_SPI1_Init();
 8002e60:	f000 fcca 	bl	80037f8 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8002e64:	f000 fec4 	bl	8003bf0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002e68:	f000 fe92 	bl	8003b90 <MX_USART1_UART_Init>


//  MX_IWDG_Init();
  MX_ADC_Init();
 8002e6c:	f7ff fd4c 	bl	8002908 <MX_ADC_Init>
//  MX_TIM21_Init();

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8002e70:	f019 fcea 	bl	801c848 <itsdk_setup>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */


	 itsdk_loop();
 8002e74:	f019 fd1c 	bl	801c8b0 <itsdk_loop>
 8002e78:	e7fc      	b.n	8002e74 <main+0x28>
	...

08002e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b09d      	sub	sp, #116	; 0x74
 8002e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e82:	2438      	movs	r4, #56	; 0x38
 8002e84:	193b      	adds	r3, r7, r4
 8002e86:	0018      	movs	r0, r3
 8002e88:	2338      	movs	r3, #56	; 0x38
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f01c f955 	bl	801f13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e92:	2324      	movs	r3, #36	; 0x24
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	0018      	movs	r0, r3
 8002e98:	2314      	movs	r3, #20
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f01c f94d 	bl	801f13c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	2324      	movs	r3, #36	; 0x24
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f01c f946 	bl	801f13c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <SystemClock_Config+0x108>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a34      	ldr	r2, [pc, #208]	; (8002f88 <SystemClock_Config+0x10c>)
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <SystemClock_Config+0x108>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0109      	lsls	r1, r1, #4
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ec2:	f001 fd61 	bl	8004988 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <SystemClock_Config+0x110>)
 8002ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eca:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <SystemClock_Config+0x110>)
 8002ecc:	492e      	ldr	r1, [pc, #184]	; (8002f88 <SystemClock_Config+0x10c>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	220e      	movs	r2, #14
 8002ed6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee0:	0021      	movs	r1, r4
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2210      	movs	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	0312      	lsls	r2, r2, #12
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	0412      	lsls	r2, r2, #16
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 fd96 	bl	8004a44 <HAL_RCC_OscConfig>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f1c:	f000 f838 	bl	8002f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f20:	2124      	movs	r1, #36	; 0x24
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	220f      	movs	r2, #15
 8002f26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2101      	movs	r1, #1
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 f94d 	bl	80051e4 <HAL_RCC_ClockConfig>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002f4e:	f000 f81f 	bl	8002f90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8002f52:	003b      	movs	r3, r7
 8002f54:	2223      	movs	r2, #35	; 0x23
 8002f56:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002f58:	003b      	movs	r3, r7
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f5e:	003b      	movs	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f64:	003b      	movs	r3, r7
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0252      	lsls	r2, r2, #9
 8002f6a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f002 fb1c 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d001      	beq.n	8002f7c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002f78:	f000 f80a 	bl	8002f90 <Error_Handler>
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
  	  Error_Handler();
    }*/

}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b01d      	add	sp, #116	; 0x74
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	40007000 	.word	0x40007000
 8002f88:	ffffe7ff 	.word	0xffffe7ff
 8002f8c:	40021000 	.word	0x40021000

08002f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <task>:
void resetMeasure(uint8_t * array, uint8_t size);
uint16_t measureUart;												//measure as int
uint8_t numberMeasure = 90;
/**************************/

void task() {
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0

// readUart();
	/**
	 * if not joined set the green led to 1
	 */
	if(!itsdk_lorawan_hasjoined()){
 8002fa2:	f019 fa67 	bl	801c474 <itsdk_lorawan_hasjoined>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	001a      	movs	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	4053      	eors	r3, r2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <task+0x20>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f01a ffe6 	bl	801df88 <gpio_set>
	}


	// wait for the board configuration
	uint8_t i = 0;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
	uint8_t devEui[8] = {0};
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	2308      	movs	r3, #8
 8002fca:	001a      	movs	r2, r3
 8002fcc:	2100      	movs	r1, #0
 8002fce:	f01c f8b5 	bl	801f13c <memset>
	itsdk_lorawan_getDeviceEUI(devEui);
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f019 fb09 	bl	801c5ec <itsdk_lorawan_getDeviceEUI>
	while ( i < 8 && devEui[i] == 0 ) i++;
 8002fda:	e005      	b.n	8002fe8 <task+0x4c>
 8002fdc:	210f      	movs	r1, #15
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	3201      	adds	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	230f      	movs	r3, #15
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b07      	cmp	r3, #7
 8002ff0:	d806      	bhi.n	8003000 <task+0x64>
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	1d3a      	adds	r2, r7, #4
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ed      	beq.n	8002fdc <task+0x40>
	if  ( i < 8 ) {
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b07      	cmp	r3, #7
 8003008:	d86b      	bhi.n	80030e2 <task+0x146>
		if ( s_state.setup == BOOL_FALSE) {
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <task+0x150>)
 800300c:	791b      	ldrb	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11e      	bne.n	8003050 <task+0xb4>
			log_info("Init LoRawan Stack ");
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <task+0x154>)
 8003014:	0018      	movs	r0, r3
 8003016:	f019 f8bf 	bl	801c198 <log_info>
			itsdk_lorawan_init_t r;
			#ifdef ITSDK_LORAWAN_CHANNEL
				static itsdk_lorawan_channelInit_t channels= ITSDK_LORAWAN_CHANNEL;
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,&channels);
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <task+0x158>)
 800301c:	891b      	ldrh	r3, [r3, #8]
 800301e:	250e      	movs	r5, #14
 8003020:	197c      	adds	r4, r7, r5
 8003022:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <task+0x15c>)
 8003024:	0011      	movs	r1, r2
 8003026:	0018      	movs	r0, r3
 8003028:	f019 f8fc 	bl	801c224 <itsdk_lorawan_setup>
 800302c:	0003      	movs	r3, r0
 800302e:	7023      	strb	r3, [r4, #0]
			#else
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,NULL);
			#endif
			if ( r == LORAWAN_INIT_SUCESS ) {
 8003030:	197b      	adds	r3, r7, r5
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <task+0xac>
				log_info("success\r\n");
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <task+0x160>)
 800303a:	0018      	movs	r0, r3
 800303c:	f019 f8ac 	bl	801c198 <log_info>
				s_state.setup = BOOL_TRUE;
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <task+0x150>)
 8003042:	2201      	movs	r2, #1
 8003044:	711a      	strb	r2, [r3, #4]
 8003046:	e003      	b.n	8003050 <task+0xb4>
			} else {
				log_info("failed\r\n");
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <task+0x164>)
 800304a:	0018      	movs	r0, r3
 800304c:	f019 f8a4 	bl	801c198 <log_info>
			}
		}
		if ( s_state.setup == BOOL_TRUE && s_state.lastComMS > COMFREQS) {
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <task+0x150>)
 8003052:	791b      	ldrb	r3, [r3, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d13d      	bne.n	80030d4 <task+0x138>
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <task+0x150>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <task+0x168>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	dd37      	ble.n	80030d4 <task+0x138>
			//check if joined
			if ( !itsdk_lorawan_hasjoined() ) {
 8003064:	f019 fa06 	bl	801c474 <itsdk_lorawan_hasjoined>
 8003068:	0003      	movs	r3, r0
 800306a:	001a      	movs	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	4053      	eors	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01c      	beq.n	80030b0 <task+0x114>
				log_info("Connecting LoRaWAN ");
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <task+0x16c>)
 8003078:	0018      	movs	r0, r3
 800307a:	f019 f88d 	bl	801c198 <log_info>
				if ( itsdk_lorawan_join_sync() == LORAWAN_JOIN_SUCCESS ) {
 800307e:	f019 f9cf 	bl	801c420 <itsdk_lorawan_join_sync>
 8003082:	0003      	movs	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d108      	bne.n	800309a <task+0xfe>
					gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	2001      	movs	r0, #1
 800308c:	f01a ff94 	bl	801dfb8 <gpio_reset>
					log_info("success\r\n");
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <task+0x160>)
 8003092:	0018      	movs	r0, r3
 8003094:	f019 f880 	bl	801c198 <log_info>
			if ( !itsdk_lorawan_hasjoined() ) {
 8003098:	e023      	b.n	80030e2 <task+0x146>
				} else {
					log_info("failed\r\n");
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <task+0x164>)
 800309c:	0018      	movs	r0, r3
 800309e:	f019 f87b 	bl	801c198 <log_info>
					s_state.lastComMS = COMFREQS - 30*1000; // retry in 30 seconds
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <task+0x168>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a19      	ldr	r2, [pc, #100]	; (800310c <task+0x170>)
 80030a8:	189a      	adds	r2, r3, r2
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <task+0x150>)
 80030ac:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 80030ae:	e018      	b.n	80030e2 <task+0x146>
				}
			} else {
				// Send a LoRaWan Frame
				uint8_t measureValidity = readUart();
 80030b0:	250d      	movs	r5, #13
 80030b2:	197c      	adds	r4, r7, r5
 80030b4:	f000 fa26 	bl	8003504 <readUart>
 80030b8:	0003      	movs	r3, r0
 80030ba:	7023      	strb	r3, [r4, #0]

				sendUplink(measureUart, measureValidity);
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <task+0x174>)
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f000 f826 	bl	8003118 <sendUplink>
				s_state.lastComMS = 0;
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <task+0x150>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 80030d2:	e006      	b.n	80030e2 <task+0x146>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <task+0x150>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <task+0x178>)
 80030da:	189a      	adds	r2, r3, r2
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <task+0x150>)
 80030de:	601a      	str	r2, [r3, #0]
		}
	}
}
 80030e0:	e7ff      	b.n	80030e2 <task+0x146>
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	20001348 	.word	0x20001348
 80030f0:	08020648 	.word	0x08020648
 80030f4:	20001688 	.word	0x20001688
 80030f8:	20000008 	.word	0x20000008
 80030fc:	0802065c 	.word	0x0802065c
 8003100:	08020668 	.word	0x08020668
 8003104:	20000000 	.word	0x20000000
 8003108:	08020674 	.word	0x08020674
 800310c:	ffff8ad0 	.word	0xffff8ad0
 8003110:	20001350 	.word	0x20001350
 8003114:	00002710 	.word	0x00002710

08003118 <sendUplink>:


/****************************************************************************************
 * SendUplink packet
 ****************************************************************************************/
void sendUplink(uint16_t measure, uint8_t validity){
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b095      	sub	sp, #84	; 0x54
 800311c:	af06      	add	r7, sp, #24
 800311e:	0002      	movs	r2, r0
 8003120:	1dbb      	adds	r3, r7, #6
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	1d7b      	adds	r3, r7, #5
 8003126:	1c0a      	adds	r2, r1, #0
 8003128:	701a      	strb	r2, [r3, #0]
	log_info("Fire a LoRaWAN message \n\r");
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <sendUplink+0x180>)
 800312c:	0018      	movs	r0, r3
 800312e:	f019 f833 	bl	801c198 <log_info>

	uint16_t vbat = getBatteryLevel();
 8003132:	2636      	movs	r6, #54	; 0x36
 8003134:	19bc      	adds	r4, r7, r6
 8003136:	f000 f98b 	bl	8003450 <getBatteryLevel>
 800313a:	0003      	movs	r3, r0
 800313c:	8023      	strh	r3, [r4, #0]
	uint8_t port;
	uint8_t size=16;
 800313e:	2332      	movs	r3, #50	; 0x32
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2210      	movs	r2, #16
 8003144:	701a      	strb	r2, [r3, #0]
	uint8_t rx[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8003146:	2220      	movs	r2, #32
 8003148:	18bb      	adds	r3, r7, r2
 800314a:	0018      	movs	r0, r3
 800314c:	2310      	movs	r3, #16
 800314e:	001a      	movs	r2, r3
 8003150:	2100      	movs	r1, #0
 8003152:	f01b fff3 	bl	801f13c <memset>
	uint8_t sendBuff[20];
	uint8_t sendBuffIndex = 0; //uint32
 8003156:	2035      	movs	r0, #53	; 0x35
 8003158:	183b      	adds	r3, r7, r0
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
	
	sendBuff[sendBuffIndex++] = (vbat >> 8 ) & 0xFF; 	//send Vbat on 2bytes
 800315e:	19bb      	adds	r3, r7, r6
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b299      	uxth	r1, r3
 8003166:	183b      	adds	r3, r7, r0
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	0004      	movs	r4, r0
 800316c:	183a      	adds	r2, r7, r0
 800316e:	1c58      	adds	r0, r3, #1
 8003170:	7010      	strb	r0, [r2, #0]
 8003172:	001a      	movs	r2, r3
 8003174:	b2c9      	uxtb	r1, r1
 8003176:	250c      	movs	r5, #12
 8003178:	197b      	adds	r3, r7, r5
 800317a:	5499      	strb	r1, [r3, r2]
	sendBuff[sendBuffIndex++] = vbat & 0xFF;			//
 800317c:	0020      	movs	r0, r4
 800317e:	183b      	adds	r3, r7, r0
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	183a      	adds	r2, r7, r0
 8003184:	1c59      	adds	r1, r3, #1
 8003186:	7011      	strb	r1, [r2, #0]
 8003188:	001a      	movs	r2, r3
 800318a:	19bb      	adds	r3, r7, r6
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b2d9      	uxtb	r1, r3
 8003190:	197b      	adds	r3, r7, r5
 8003192:	5499      	strb	r1, [r3, r2]


	sendBuff[sendBuffIndex++] = (measure >> 8 ) & 0xFF;	//send uart measure on 2bytes
 8003194:	1dbb      	adds	r3, r7, #6
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	b299      	uxth	r1, r3
 800319c:	183b      	adds	r3, r7, r0
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	0004      	movs	r4, r0
 80031a2:	183a      	adds	r2, r7, r0
 80031a4:	1c58      	adds	r0, r3, #1
 80031a6:	7010      	strb	r0, [r2, #0]
 80031a8:	001a      	movs	r2, r3
 80031aa:	b2c9      	uxtb	r1, r1
 80031ac:	197b      	adds	r3, r7, r5
 80031ae:	5499      	strb	r1, [r3, r2]
	sendBuff[sendBuffIndex++] = measure & 0xFF;			//
 80031b0:	0020      	movs	r0, r4
 80031b2:	183b      	adds	r3, r7, r0
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	183a      	adds	r2, r7, r0
 80031b8:	1c59      	adds	r1, r3, #1
 80031ba:	7011      	strb	r1, [r2, #0]
 80031bc:	001a      	movs	r2, r3
 80031be:	1dbb      	adds	r3, r7, #6
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b2d9      	uxtb	r1, r3
 80031c4:	197b      	adds	r3, r7, r5
 80031c6:	5499      	strb	r1, [r3, r2]
	sendBuff[sendBuffIndex++] = validity;				//send uart measure validity on 1byte
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	183a      	adds	r2, r7, r0
 80031ce:	1c59      	adds	r1, r3, #1
 80031d0:	7011      	strb	r1, [r2, #0]
 80031d2:	0019      	movs	r1, r3
 80031d4:	197b      	adds	r3, r7, r5
 80031d6:	1d7a      	adds	r2, r7, #5
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	545a      	strb	r2, [r3, r1]


	
	itsdk_lorawan_send_t r = itsdk_lorawan_send_sync(
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <sendUplink+0x184>)
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	2634      	movs	r6, #52	; 0x34
 80031e2:	19bc      	adds	r4, r7, r6
 80031e4:	183b      	adds	r3, r7, r0
 80031e6:	7819      	ldrb	r1, [r3, #0]
 80031e8:	1978      	adds	r0, r7, r5
 80031ea:	2300      	movs	r3, #0
 80031ec:	9305      	str	r3, [sp, #20]
 80031ee:	2520      	movs	r5, #32
 80031f0:	197b      	adds	r3, r7, r5
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	2332      	movs	r3, #50	; 0x32
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	9303      	str	r3, [sp, #12]
 80031fa:	2333      	movs	r3, #51	; 0x33
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	9302      	str	r3, [sp, #8]
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2301      	movs	r3, #1
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	0013      	movs	r3, r2
 800320a:	2201      	movs	r2, #1
 800320c:	f019 f94e 	bl	801c4ac <itsdk_lorawan_send_sync>
 8003210:	0003      	movs	r3, r0
 8003212:	7023      	strb	r3, [r4, #0]
			&port,							// In case of reception - Port (uint8_t)
			&size,							// In case of reception - Size (uint8_t) - init with buffer max size
			rx,								// In case of reception - Data (uint8_t[] bcopied)
			PAYLOAD_ENCRYPT_NONE			// End to End encryption mode
	);
	if ( r == LORAWAN_SEND_SENT || r == LORAWAN_SEND_ACKED || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING) {
 8003214:	19bb      	adds	r3, r7, r6
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d00e      	beq.n	800323a <sendUplink+0x122>
 800321c:	2334      	movs	r3, #52	; 0x34
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d009      	beq.n	800323a <sendUplink+0x122>
 8003226:	2334      	movs	r3, #52	; 0x34
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d004      	beq.n	800323a <sendUplink+0x122>
 8003230:	2334      	movs	r3, #52	; 0x34
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b04      	cmp	r3, #4
 8003238:	d122      	bne.n	8003280 <sendUplink+0x168>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	2001      	movs	r0, #1
 800323e:	f01a fea3 	bl	801df88 <gpio_set>
		log_info("Send Success\r\n",r);
 8003242:	2334      	movs	r3, #52	; 0x34
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	781a      	ldrb	r2, [r3, #0]
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <sendUplink+0x188>)
 800324a:	0011      	movs	r1, r2
 800324c:	0018      	movs	r0, r3
 800324e:	f018 ffa3 	bl	801c198 <log_info>
		itsdk_delayMs(500);
 8003252:	23fa      	movs	r3, #250	; 0xfa
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	0018      	movs	r0, r3
 8003258:	f01a fff2 	bl	801e240 <itsdk_delayMs>
		gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	2001      	movs	r0, #1
 8003260:	f01a feaa 	bl	801dfb8 <gpio_reset>
		process_downlink(port, rx);
 8003264:	2433      	movs	r4, #51	; 0x33
 8003266:	193b      	adds	r3, r7, r4
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	001a      	movs	r2, r3
 800326c:	2320      	movs	r3, #32
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	0019      	movs	r1, r3
 8003272:	0010      	movs	r0, r2
 8003274:	f000 f818 	bl	80032a8 <process_downlink>
		port = 0;
 8003278:	193b      	adds	r3, r7, r4
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
	if ( r == LORAWAN_SEND_SENT || r == LORAWAN_SEND_ACKED || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK || r == LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING) {
 800327e:	e007      	b.n	8003290 <sendUplink+0x178>
	}else {
		log_info("Send Failed (%d)\r\n",r);
 8003280:	2334      	movs	r3, #52	; 0x34
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <sendUplink+0x18c>)
 8003288:	0011      	movs	r1, r2
 800328a:	0018      	movs	r0, r3
 800328c:	f018 ff84 	bl	801c198 <log_info>
	}
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b00f      	add	sp, #60	; 0x3c
 8003296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003298:	08020688 	.word	0x08020688
 800329c:	20000004 	.word	0x20000004
 80032a0:	080206a4 	.word	0x080206a4
 80032a4:	080206b4 	.word	0x080206b4

080032a8 <process_downlink>:
	*	A201 : adr off
	*	A202 : adr on
	* 0xA3 : set Datarate
 * Send on port 3
 ****************************************************************************************/
void process_downlink(uint8_t port, uint8_t rx[]){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	0002      	movs	r2, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	1dfb      	adds	r3, r7, #7
 80032b4:	701a      	strb	r2, [r3, #0]

	if(port == 3 && rx[0] != 0){
 80032b6:	1dfb      	adds	r3, r7, #7
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d000      	beq.n	80032c0 <process_downlink+0x18>
 80032be:	e08c      	b.n	80033da <process_downlink+0x132>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d100      	bne.n	80032ca <process_downlink+0x22>
 80032c8:	e087      	b.n	80033da <process_downlink+0x132>
		log_info("Downlink received \n\r");
 80032ca:	4b48      	ldr	r3, [pc, #288]	; (80033ec <process_downlink+0x144>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f018 ff63 	bl	801c198 <log_info>
		log_info("Port : %d\n\r", port);
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <process_downlink+0x148>)
 80032d8:	0011      	movs	r1, r2
 80032da:	0018      	movs	r0, r3
 80032dc:	f018 ff5c 	bl	801c198 <log_info>
		log_info_array("RX : ",rx, 16);
 80032e0:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <process_downlink+0x14c>)
 80032e2:	0018      	movs	r0, r3
 80032e4:	f018 ff58 	bl	801c198 <log_info>
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e00c      	b.n	8003308 <process_downlink+0x60>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	18d3      	adds	r3, r2, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	001a      	movs	r2, r3
 80032f8:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <process_downlink+0x150>)
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f018 ff4b 	bl	801c198 <log_info>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	ddef      	ble.n	80032ee <process_downlink+0x46>
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <process_downlink+0x154>)
 8003310:	0018      	movs	r0, r3
 8003312:	f018 ff41 	bl	801c198 <log_info>
		switch(rx[0]){
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d01f      	beq.n	800335e <process_downlink+0xb6>
 800331e:	dc02      	bgt.n	8003326 <process_downlink+0x7e>
 8003320:	2b01      	cmp	r3, #1
 8003322:	d005      	beq.n	8003330 <process_downlink+0x88>
			case 163:
				//set datarate
				dataRate = setDataRate(rx[1]);
				break;
			default:
				break;
 8003324:	e05e      	b.n	80033e4 <process_downlink+0x13c>
		switch(rx[0]){
 8003326:	2ba2      	cmp	r3, #162	; 0xa2
 8003328:	d021      	beq.n	800336e <process_downlink+0xc6>
 800332a:	2ba3      	cmp	r3, #163	; 0xa3
 800332c:	d04a      	beq.n	80033c4 <process_downlink+0x11c>
				break;
 800332e:	e059      	b.n	80033e4 <process_downlink+0x13c>
				COMFREQS = ((rx[1]<<16) + (rx[2]<<8) + (rx[3]<<0))*1000;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	041a      	lsls	r2, r3, #16
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	3302      	adds	r3, #2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	3203      	adds	r2, #3
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	189a      	adds	r2, r3, r2
 800334a:	0013      	movs	r3, r2
 800334c:	015b      	lsls	r3, r3, #5
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	189b      	adds	r3, r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	001a      	movs	r2, r3
 8003358:	4b29      	ldr	r3, [pc, #164]	; (8003400 <process_downlink+0x158>)
 800335a:	601a      	str	r2, [r3, #0]
				break;
 800335c:	e042      	b.n	80033e4 <process_downlink+0x13c>
				if(rx[1] == 15){
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d13a      	bne.n	80033de <process_downlink+0x136>
					itsdk_reset();
 8003368:	f01a ff18 	bl	801e19c <itsdk_reset>
				break;
 800336c:	e037      	b.n	80033de <process_downlink+0x136>
				if(rx[1]==01){
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10f      	bne.n	8003398 <process_downlink+0xf0>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <process_downlink+0x15c>)
 800337a:	7a9a      	ldrb	r2, [r3, #10]
 800337c:	213f      	movs	r1, #63	; 0x3f
 800337e:	400a      	ands	r2, r1
 8003380:	1c11      	adds	r1, r2, #0
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	430a      	orrs	r2, r1
 8003386:	729a      	strb	r2, [r3, #10]
					itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 8003388:	2001      	movs	r0, #1
 800338a:	f015 fffb 	bl	8019384 <itsdk_config_commitConfiguration>
					_itsdk_console_printf("OK\r\n");
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <process_downlink+0x160>)
 8003390:	0018      	movs	r0, r3
 8003392:	f015 fb87 	bl	8018aa4 <_itsdk_console_printf>
				break;
 8003396:	e024      	b.n	80033e2 <process_downlink+0x13a>
				}else if(rx[1]==02){
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d11f      	bne.n	80033e2 <process_downlink+0x13a>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <process_downlink+0x15c>)
 80033a4:	7a9a      	ldrb	r2, [r3, #10]
 80033a6:	213f      	movs	r1, #63	; 0x3f
 80033a8:	400a      	ands	r2, r1
 80033aa:	1c11      	adds	r1, r2, #0
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	4252      	negs	r2, r2
 80033b0:	430a      	orrs	r2, r1
 80033b2:	729a      	strb	r2, [r3, #10]
					itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f015 ffe5 	bl	8019384 <itsdk_config_commitConfiguration>
					_itsdk_console_printf("OK\r\n");
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <process_downlink+0x160>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f015 fb71 	bl	8018aa4 <_itsdk_console_printf>
				break;
 80033c2:	e00e      	b.n	80033e2 <process_downlink+0x13a>
				dataRate = setDataRate(rx[1]);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f820 	bl	8003410 <setDataRate>
 80033d0:	0003      	movs	r3, r0
 80033d2:	001a      	movs	r2, r3
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <process_downlink+0x164>)
 80033d6:	701a      	strb	r2, [r3, #0]
				break;
 80033d8:	e004      	b.n	80033e4 <process_downlink+0x13c>
		}

	}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	e002      	b.n	80033e4 <process_downlink+0x13c>
				break;
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	e000      	b.n	80033e4 <process_downlink+0x13c>
				break;
 80033e2:	46c0      	nop			; (mov r8, r8)
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	080206c8 	.word	0x080206c8
 80033f0:	080206e0 	.word	0x080206e0
 80033f4:	080206ec 	.word	0x080206ec
 80033f8:	080206f4 	.word	0x080206f4
 80033fc:	080206fc 	.word	0x080206fc
 8003400:	20000000 	.word	0x20000000
 8003404:	2000166c 	.word	0x2000166c
 8003408:	08020700 	.word	0x08020700
 800340c:	20000004 	.word	0x20000004

08003410 <setDataRate>:
/****************************************************************************************
 * return datarate in Function of a number
 ****************************************************************************************/
uint8_t setDataRate(uint8_t nbr){
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	0002      	movs	r2, r0
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	701a      	strb	r2, [r3, #0]
	switch(nbr){
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d80e      	bhi.n	8003442 <setDataRate+0x32>
 8003424:	009a      	lsls	r2, r3, #2
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <setDataRate+0x3c>)
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	469f      	mov	pc, r3
	case 0:
		return __LORAWAN_DR_0;
 800342e:	2301      	movs	r3, #1
 8003430:	e008      	b.n	8003444 <setDataRate+0x34>
		break;
	case 1:
		return __LORAWAN_DR_1;
 8003432:	2302      	movs	r3, #2
 8003434:	e006      	b.n	8003444 <setDataRate+0x34>
		break;
	case 2:
		return __LORAWAN_DR_2;
 8003436:	2303      	movs	r3, #3
 8003438:	e004      	b.n	8003444 <setDataRate+0x34>
		break;
	case 3:
		return __LORAWAN_DR_3;
 800343a:	2304      	movs	r3, #4
 800343c:	e002      	b.n	8003444 <setDataRate+0x34>
		break;
	case 4:
		return __LORAWAN_DR_4;
 800343e:	2305      	movs	r3, #5
 8003440:	e000      	b.n	8003444 <setDataRate+0x34>
		break;
	default :
		return __LORAWAN_DR_0;
 8003442:	2301      	movs	r3, #1
		break;

	}
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08021360 	.word	0x08021360

08003450 <getBatteryLevel>:


/****************************************************************************************
 *	Get the Battery level and print it on console
 ****************************************************************************************/
uint16_t getBatteryLevel(){
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
	HAL_Delay(8);			//recommended by DISK91
 8003456:	2008      	movs	r0, #8
 8003458:	f000 fd08 	bl	8003e6c <HAL_Delay>
	uint16_t battery=0;
 800345c:	1dbb      	adds	r3, r7, #6
 800345e:	2200      	movs	r2, #0
 8003460:	801a      	strh	r2, [r3, #0]
	gpio_set(__BANK_B, __LP_GPIO_2);
 8003462:	2104      	movs	r1, #4
 8003464:	2001      	movs	r0, #1
 8003466:	f01a fd8f 	bl	801df88 <gpio_set>
	battery = adc_getVBat();
 800346a:	1dbc      	adds	r4, r7, #6
 800346c:	f01a f9d8 	bl	801d820 <adc_getVBat>
 8003470:	0003      	movs	r3, r0
 8003472:	8023      	strh	r3, [r4, #0]

	gpio_reset(VBAT_DIV2_PORT, VBAT_DIV2_PIN);
 8003474:	2104      	movs	r1, #4
 8003476:	2001      	movs	r0, #1
 8003478:	f01a fd9e 	bl	801dfb8 <gpio_reset>

	log_info("ADC value get vbat: %d\n\r", battery);
 800347c:	1dbb      	adds	r3, r7, #6
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <getBatteryLevel+0x48>)
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f018 fe87 	bl	801c198 <log_info>
	return battery;
 800348a:	1dbb      	adds	r3, r7, #6
 800348c:	881b      	ldrh	r3, [r3, #0]
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b003      	add	sp, #12
 8003494:	bd90      	pop	{r4, r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	08020708 	.word	0x08020708

0800349c <project_setup>:

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 80034a0:	f012 fb06 	bl	8015ab0 <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 80034a4:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <project_setup+0x44>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f018 fe76 	bl	801c198 <log_info>
	itsdk_delayMs(2000);
 80034ac:	23fa      	movs	r3, #250	; 0xfa
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	0018      	movs	r0, r3
 80034b2:	f01a fec5 	bl	801e240 <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <project_setup+0x48>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <project_setup+0x4c>)
 80034bc:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <project_setup+0x4c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	2001      	movs	r0, #1
 80034c8:	f01a fd76 	bl	801dfb8 <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <project_setup+0x50>)
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4807      	ldr	r0, [pc, #28]	; (80034f0 <project_setup+0x54>)
 80034d4:	0019      	movs	r1, r3
 80034d6:	f019 fbd9 	bl	801cc8c <itdt_sched_registerSched>
}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08020724 	.word	0x08020724
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20001348 	.word	0x20001348
 80034ec:	08002f9d 	.word	0x08002f9d
 80034f0:	00002710 	.word	0x00002710

080034f4 <project_loop>:

/****************************************************************************************
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 ****************************************************************************************/
void project_loop() {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
    itsdk_lorawan_loop();
 80034f8:	f019 f95a 	bl	801c7b0 <itsdk_lorawan_loop>

}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <readUart>:

/****************************************************************************************
 * UART sensor part
 ****************************************************************************************/
#define debugUart   0
uint8_t readUart(){
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef POWER_ACTIVE;
	  POWER_ACTIVE.Pin   = GPIO_PIN_11 ;
 800350a:	2408      	movs	r4, #8
 800350c:	193b      	adds	r3, r7, r4
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	601a      	str	r2, [r3, #0]
	  POWER_ACTIVE.Mode  = GPIO_MODE_OUTPUT_PP;
 8003514:	193b      	adds	r3, r7, r4
 8003516:	2201      	movs	r2, #1
 8003518:	605a      	str	r2, [r3, #4]


	 int measureAttempt = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
	 resetMeasure(&tabToPrint[0], 4); 							//Reset the return array
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <readUart+0x100>)
 8003520:	2104      	movs	r1, #4
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f884 	bl	8003630 <resetMeasure>
	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_SET);  //Set on the ultrasonic sensor
 8003528:	193b      	adds	r3, r7, r4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b299      	uxth	r1, r3
 800352e:	23a0      	movs	r3, #160	; 0xa0
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	2201      	movs	r2, #1
 8003534:	0018      	movs	r0, r3
 8003536:	f001 f9ed 	bl	8004914 <HAL_GPIO_WritePin>
	 	HAL_Delay(50);											//
 800353a:	2032      	movs	r0, #50	; 0x32
 800353c:	f000 fc96 	bl	8003e6c <HAL_Delay>

	 log_info("Start the measure !\r\n");
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <readUart+0x104>)
 8003542:	0018      	movs	r0, r3
 8003544:	f018 fe28 	bl	801c198 <log_info>
	 while(measureAttempt < numberMeasure){
 8003548:	e00b      	b.n	8003562 <readUart+0x5e>
	 	HAL_UART_Receive_IT(&huart1, &byte, 1); 				//start measure, result is into tabToPrint
 800354a:	4930      	ldr	r1, [pc, #192]	; (800360c <readUart+0x108>)
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <readUart+0x10c>)
 800354e:	2201      	movs	r2, #1
 8003550:	0018      	movs	r0, r3
 8003552:	f003 fba1 	bl	8006c98 <HAL_UART_Receive_IT>
	 	HAL_Delay(50);											//
 8003556:	2032      	movs	r0, #50	; 0x32
 8003558:	f000 fc88 	bl	8003e6c <HAL_Delay>
		#if debugUart											//DEBUG
	 	log_info("Measure #%d : ", measureAttempt);				//Print all 90 measure
	 		HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500); //
	 		log_info("\n\r");									//
		#endif
	 	measureAttempt++;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
	 while(measureAttempt < numberMeasure){
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <readUart+0x110>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	001a      	movs	r2, r3
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4293      	cmp	r3, r2
 800356c:	dbed      	blt.n	800354a <readUart+0x46>
	 }

	 HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_RESET);//PowerOff the sensor
 800356e:	2308      	movs	r3, #8
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b299      	uxth	r1, r3
 8003576:	23a0      	movs	r3, #160	; 0xa0
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	2200      	movs	r2, #0
 800357c:	0018      	movs	r0, r3
 800357e:	f001 f9c9 	bl	8004914 <HAL_GPIO_WritePin>

     uint8_t tabToConvert[4];									//remove first 'R' char
	 tabToConvert[0] = tabToPrint[1];							//
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <readUart+0x100>)
 8003584:	785a      	ldrb	r2, [r3, #1]
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	701a      	strb	r2, [r3, #0]
	 tabToConvert[1] = tabToPrint[2];							//
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <readUart+0x100>)
 800358c:	789a      	ldrb	r2, [r3, #2]
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	705a      	strb	r2, [r3, #1]
	 tabToConvert[2] = tabToPrint[3];							//
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <readUart+0x100>)
 8003594:	78da      	ldrb	r2, [r3, #3]
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	709a      	strb	r2, [r3, #2]
	 tabToConvert[3] = tabToPrint[4];							//
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <readUart+0x100>)
 800359c:	791a      	ldrb	r2, [r3, #4]
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	70da      	strb	r2, [r3, #3]


	 sscanf(tabToConvert, "%d", &measureUart);					//convert char[] to int
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <readUart+0x114>)
 80035a4:	491d      	ldr	r1, [pc, #116]	; (800361c <readUart+0x118>)
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	0018      	movs	r0, r3
 80035aa:	f01b fdcf 	bl	801f14c <siscanf>
	 log_info("Final measure : %d", measureUart);				//print final measure
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <readUart+0x114>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	001a      	movs	r2, r3
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <readUart+0x11c>)
 80035b6:	0011      	movs	r1, r2
 80035b8:	0018      	movs	r0, r3
 80035ba:	f018 fded 	bl	801c198 <log_info>


	 if(measureUart==0 || measureUart<=500 || measureUart>=5000 || measureUart == 4999){	//check if the measure is valid or not
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <readUart+0x114>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00f      	beq.n	80035e6 <readUart+0xe2>
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <readUart+0x114>)
 80035c8:	881a      	ldrh	r2, [r3, #0]
 80035ca:	23fa      	movs	r3, #250	; 0xfa
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d909      	bls.n	80035e6 <readUart+0xe2>
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <readUart+0x114>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <readUart+0x120>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d804      	bhi.n	80035e6 <readUart+0xe2>
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <readUart+0x114>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <readUart+0x120>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d105      	bne.n	80035f2 <readUart+0xee>
		log_info(" Measure is not valid\r\n");
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <readUart+0x124>)
 80035e8:	0018      	movs	r0, r3
 80035ea:	f018 fdd5 	bl	801c198 <log_info>
	 	return 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e004      	b.n	80035fc <readUart+0xf8>
	 }else{
	 	log_info(" Measure is valid\r\n");
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <readUart+0x128>)
 80035f4:	0018      	movs	r0, r3
 80035f6:	f018 fdcf 	bl	801c198 <log_info>
	 	return 1;
 80035fa:	2301      	movs	r3, #1
	 }


}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b009      	add	sp, #36	; 0x24
 8003602:	bd90      	pop	{r4, r7, pc}
 8003604:	20001718 	.word	0x20001718
 8003608:	08020734 	.word	0x08020734
 800360c:	2000171d 	.word	0x2000171d
 8003610:	20001354 	.word	0x20001354
 8003614:	20000005 	.word	0x20000005
 8003618:	20001350 	.word	0x20001350
 800361c:	0802074c 	.word	0x0802074c
 8003620:	08020750 	.word	0x08020750
 8003624:	00001387 	.word	0x00001387
 8003628:	08020764 	.word	0x08020764
 800362c:	0802077c 	.word	0x0802077c

08003630 <resetMeasure>:


/**
 * Reset the Uart Buffer
 */
void resetMeasure(uint8_t * array, uint8_t size){
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	000a      	movs	r2, r1
 800363a:	1cfb      	adds	r3, r7, #3
 800363c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	e007      	b.n	8003654 <resetMeasure+0x24>
		array[i] = 0x30; //Set to 0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	2230      	movs	r2, #48	; 0x30
 800364c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3301      	adds	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	1cfb      	adds	r3, r7, #3
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	429a      	cmp	r2, r3
 800365c:	dbf2      	blt.n	8003644 <resetMeasure+0x14>
	}
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b004      	add	sp, #16
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b090      	sub	sp, #64	; 0x40
 800366c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800366e:	232c      	movs	r3, #44	; 0x2c
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	0018      	movs	r0, r3
 8003674:	2314      	movs	r3, #20
 8003676:	001a      	movs	r2, r3
 8003678:	2100      	movs	r1, #0
 800367a:	f01b fd5f 	bl	801f13c <memset>
  RTC_DateTypeDef sDate = {0};
 800367e:	2328      	movs	r3, #40	; 0x28
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003686:	003b      	movs	r3, r7
 8003688:	0018      	movs	r0, r3
 800368a:	2328      	movs	r3, #40	; 0x28
 800368c:	001a      	movs	r2, r3
 800368e:	2100      	movs	r1, #0
 8003690:	f01b fd54 	bl	801f13c <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003694:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <MX_RTC_Init+0x148>)
 8003696:	4a47      	ldr	r2, [pc, #284]	; (80037b4 <MX_RTC_Init+0x14c>)
 8003698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800369a:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <MX_RTC_Init+0x148>)
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036a0:	4b43      	ldr	r3, [pc, #268]	; (80037b0 <MX_RTC_Init+0x148>)
 80036a2:	227f      	movs	r2, #127	; 0x7f
 80036a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <MX_RTC_Init+0x148>)
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ac:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <MX_RTC_Init+0x148>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <MX_RTC_Init+0x148>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036b8:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <MX_RTC_Init+0x148>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036be:	4b3c      	ldr	r3, [pc, #240]	; (80037b0 <MX_RTC_Init+0x148>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036c4:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <MX_RTC_Init+0x148>)
 80036c6:	0018      	movs	r0, r3
 80036c8:	f002 f8c8 	bl	800585c <HAL_RTC_Init>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80036d0:	f7ff fc5e 	bl	8002f90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2200      	movs	r2, #0
 80036e0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2200      	movs	r2, #0
 80036e6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80036f4:	1879      	adds	r1, r7, r1
 80036f6:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <MX_RTC_Init+0x148>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	0018      	movs	r0, r3
 80036fc:	f002 f94c 	bl	8005998 <HAL_RTC_SetTime>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003704:	f7ff fc44 	bl	8002f90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003708:	2128      	movs	r1, #40	; 0x28
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2201      	movs	r2, #1
 8003714:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2201      	movs	r2, #1
 800371a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2200      	movs	r2, #0
 8003720:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003722:	1879      	adds	r1, r7, r1
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <MX_RTC_Init+0x148>)
 8003726:	2200      	movs	r2, #0
 8003728:	0018      	movs	r0, r3
 800372a:	f002 fa55 	bl	8005bd8 <HAL_RTC_SetDate>
 800372e:	1e03      	subs	r3, r0, #0
 8003730:	d001      	beq.n	8003736 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003732:	f7ff fc2d 	bl	8002f90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003736:	003b      	movs	r3, r7
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800373c:	003b      	movs	r3, r7
 800373e:	2200      	movs	r2, #0
 8003740:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003742:	003b      	movs	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003748:	003b      	movs	r3, r7
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800374e:	003b      	movs	r3, r7
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003754:	003b      	movs	r3, r7
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800375a:	003b      	movs	r3, r7
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8003760:	003b      	movs	r3, r7
 8003762:	22f0      	movs	r2, #240	; 0xf0
 8003764:	0512      	lsls	r2, r2, #20
 8003766:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003768:	003b      	movs	r3, r7
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800376e:	003b      	movs	r3, r7
 8003770:	2220      	movs	r2, #32
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003776:	003b      	movs	r3, r7
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	0052      	lsls	r2, r2, #1
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800377e:	0039      	movs	r1, r7
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <MX_RTC_Init+0x148>)
 8003782:	2200      	movs	r2, #0
 8003784:	0018      	movs	r0, r3
 8003786:	f002 fb23 	bl	8005dd0 <HAL_RTC_SetAlarm_IT>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d001      	beq.n	8003792 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800378e:	f7ff fbff 	bl	8002f90 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <MX_RTC_Init+0x148>)
 8003794:	2200      	movs	r2, #0
 8003796:	2100      	movs	r1, #0
 8003798:	0018      	movs	r0, r3
 800379a:	f002 fd53 	bl	8006244 <HAL_RTCEx_SetWakeUpTimer_IT>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d001      	beq.n	80037a6 <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 80037a2:	f7ff fbf5 	bl	8002f90 <Error_Handler>
  }

}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b010      	add	sp, #64	; 0x40
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	200013d4 	.word	0x200013d4
 80037b4:	40002800 	.word	0x40002800

080037b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <HAL_RTC_MspInit+0x38>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10e      	bne.n	80037e8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_RTC_MspInit+0x3c>)
 80037cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RTC_MspInit+0x3c>)
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	02c9      	lsls	r1, r1, #11
 80037d4:	430a      	orrs	r2, r1
 80037d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2100      	movs	r1, #0
 80037dc:	2002      	movs	r0, #2
 80037de:	f000 fe91 	bl	8004504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80037e2:	2002      	movs	r0, #2
 80037e4:	f000 fea3 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40002800 	.word	0x40002800
 80037f4:	40021000 	.word	0x40021000

080037f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_SPI1_Init+0x68>)
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <MX_SPI1_Init+0x6c>)
 8003800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <MX_SPI1_Init+0x68>)
 8003804:	2282      	movs	r2, #130	; 0x82
 8003806:	0052      	lsls	r2, r2, #1
 8003808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <MX_SPI1_Init+0x68>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <MX_SPI1_Init+0x68>)
 8003812:	2200      	movs	r2, #0
 8003814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <MX_SPI1_Init+0x68>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800381c:	4b10      	ldr	r3, [pc, #64]	; (8003860 <MX_SPI1_Init+0x68>)
 800381e:	2200      	movs	r2, #0
 8003820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <MX_SPI1_Init+0x68>)
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <MX_SPI1_Init+0x68>)
 800382c:	2220      	movs	r2, #32
 800382e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <MX_SPI1_Init+0x68>)
 8003832:	2200      	movs	r2, #0
 8003834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <MX_SPI1_Init+0x68>)
 8003838:	2200      	movs	r2, #0
 800383a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_SPI1_Init+0x68>)
 800383e:	2200      	movs	r2, #0
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <MX_SPI1_Init+0x68>)
 8003844:	2207      	movs	r2, #7
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <MX_SPI1_Init+0x68>)
 800384a:	0018      	movs	r0, r3
 800384c:	f002 fe54 	bl	80064f8 <HAL_SPI_Init>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003854:	f7ff fb9c 	bl	8002f90 <Error_Handler>
  }

}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	20001450 	.word	0x20001450
 8003864:	40013000 	.word	0x40013000

08003868 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b08b      	sub	sp, #44	; 0x2c
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	2314      	movs	r3, #20
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	0018      	movs	r0, r3
 8003876:	2314      	movs	r3, #20
 8003878:	001a      	movs	r2, r3
 800387a:	2100      	movs	r1, #0
 800387c:	f01b fc5e 	bl	801f13c <memset>
  if(spiHandle->Instance==SPI1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a41      	ldr	r2, [pc, #260]	; (800398c <HAL_SPI_MspInit+0x124>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d14d      	bne.n	8003926 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_SPI_MspInit+0x128>)
 800388c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388e:	4b40      	ldr	r3, [pc, #256]	; (8003990 <HAL_SPI_MspInit+0x128>)
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	0149      	lsls	r1, r1, #5
 8003894:	430a      	orrs	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003898:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_SPI_MspInit+0x128>)
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4b3c      	ldr	r3, [pc, #240]	; (8003990 <HAL_SPI_MspInit+0x128>)
 800389e:	2102      	movs	r1, #2
 80038a0:	430a      	orrs	r2, r1
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80038a4:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <HAL_SPI_MspInit+0x128>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2202      	movs	r2, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b0:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_SPI_MspInit+0x128>)
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4b36      	ldr	r3, [pc, #216]	; (8003990 <HAL_SPI_MspInit+0x128>)
 80038b6:	2101      	movs	r1, #1
 80038b8:	430a      	orrs	r2, r1
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_SPI_MspInit+0x128>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2201      	movs	r2, #1
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 80038c8:	2114      	movs	r1, #20
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	2208      	movs	r2, #8
 80038ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2202      	movs	r2, #2
 80038d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	2203      	movs	r2, #3
 80038e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 80038e8:	000c      	movs	r4, r1
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_SPI_MspInit+0x12c>)
 80038ee:	0019      	movs	r1, r3
 80038f0:	0010      	movs	r0, r2
 80038f2:	f000 fe91 	bl	8004618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 80038f6:	0021      	movs	r1, r4
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	22c0      	movs	r2, #192	; 0xc0
 80038fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2202      	movs	r2, #2
 8003902:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	187b      	adds	r3, r7, r1
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	187b      	adds	r3, r7, r1
 800390c:	2203      	movs	r2, #3
 800390e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003910:	187b      	adds	r3, r7, r1
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	187a      	adds	r2, r7, r1
 8003918:	23a0      	movs	r3, #160	; 0xa0
 800391a:	05db      	lsls	r3, r3, #23
 800391c:	0011      	movs	r1, r2
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fe7a 	bl	8004618 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003924:	e02e      	b.n	8003984 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_SPI_MspInit+0x130>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d129      	bne.n	8003984 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <HAL_SPI_MspInit+0x128>)
 8003932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_SPI_MspInit+0x128>)
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	01c9      	lsls	r1, r1, #7
 800393a:	430a      	orrs	r2, r1
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <HAL_SPI_MspInit+0x128>)
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_SPI_MspInit+0x128>)
 8003944:	2102      	movs	r1, #2
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_SPI_MspInit+0x128>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	2202      	movs	r2, #2
 8003950:	4013      	ands	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8003956:	2114      	movs	r1, #20
 8003958:	187b      	adds	r3, r7, r1
 800395a:	22f0      	movs	r2, #240	; 0xf0
 800395c:	0212      	lsls	r2, r2, #8
 800395e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	187b      	adds	r3, r7, r1
 8003962:	2202      	movs	r2, #2
 8003964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	187b      	adds	r3, r7, r1
 800396e:	2203      	movs	r2, #3
 8003970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003972:	187b      	adds	r3, r7, r1
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003978:	187b      	adds	r3, r7, r1
 800397a:	4a06      	ldr	r2, [pc, #24]	; (8003994 <HAL_SPI_MspInit+0x12c>)
 800397c:	0019      	movs	r1, r3
 800397e:	0010      	movs	r0, r2
 8003980:	f000 fe4a 	bl	8004618 <HAL_GPIO_Init>
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b00b      	add	sp, #44	; 0x2c
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	40013000 	.word	0x40013000
 8003990:	40021000 	.word	0x40021000
 8003994:	50000400 	.word	0x50000400
 8003998:	40003800 	.word	0x40003800

0800399c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_MspInit+0x24>)
 80039a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_MspInit+0x24>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	430a      	orrs	r2, r1
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <HAL_MspInit+0x24>)
 80039ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_MspInit+0x24>)
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	0549      	lsls	r1, r1, #21
 80039b6:	430a      	orrs	r2, r1
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000

080039c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039d2:	e7fe      	b.n	80039d2 <HardFault_Handler+0x4>

080039d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ec:	f01b fa98 	bl	801ef20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <RTC_IRQHandler+0x1c>)
 80039fe:	0018      	movs	r0, r3
 8003a00:	f002 fb32 	bl	8006068 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <RTC_IRQHandler+0x1c>)
 8003a06:	0018      	movs	r0, r3
 8003a08:	f002 fd44 	bl	8006494 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	200013d4 	.word	0x200013d4

08003a18 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f000 ff97 	bl	8004950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003a22:	2002      	movs	r0, #2
 8003a24:	f000 ff94 	bl	8004950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003a32:	2010      	movs	r0, #16
 8003a34:	f000 ff8c 	bl	8004950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	019b      	lsls	r3, r3, #6
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 ff87 	bl	8004950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <USART1_IRQHandler+0x14>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f003 f9da 	bl	8006e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	20001354 	.word	0x20001354

08003a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <USART2_IRQHandler+0x14>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f003 f9ce 	bl	8006e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	200014e4 	.word	0x200014e4

08003a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <_sbrk+0x5c>)
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <_sbrk+0x60>)
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <_sbrk+0x64>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <_sbrk+0x64>)
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <_sbrk+0x68>)
 8003a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <_sbrk+0x64>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d207      	bcs.n	8003ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa8:	f01b fb02 	bl	801f0b0 <__errno>
 8003aac:	0003      	movs	r3, r0
 8003aae:	220c      	movs	r2, #12
 8003ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	e009      	b.n	8003acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <_sbrk+0x64>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <_sbrk+0x64>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	18d2      	adds	r2, r2, r3
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_sbrk+0x64>)
 8003ac8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b006      	add	sp, #24
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20005000 	.word	0x20005000
 8003ad8:	00000400 	.word	0x00000400
 8003adc:	200002a4 	.word	0x200002a4
 8003ae0:	20001778 	.word	0x20001778

08003ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <SystemInit+0x64>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <SystemInit+0x64>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0049      	lsls	r1, r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <SystemInit+0x64>)
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <SystemInit+0x64>)
 8003afc:	4913      	ldr	r1, [pc, #76]	; (8003b4c <SystemInit+0x68>)
 8003afe:	400a      	ands	r2, r1
 8003b00:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <SystemInit+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <SystemInit+0x64>)
 8003b08:	4911      	ldr	r1, [pc, #68]	; (8003b50 <SystemInit+0x6c>)
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <SystemInit+0x64>)
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <SystemInit+0x64>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	438a      	bics	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <SystemInit+0x64>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <SystemInit+0x64>)
 8003b20:	490c      	ldr	r1, [pc, #48]	; (8003b54 <SystemInit+0x70>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <SystemInit+0x64>)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <SystemInit+0x64>)
 8003b2c:	490a      	ldr	r1, [pc, #40]	; (8003b58 <SystemInit+0x74>)
 8003b2e:	400a      	ands	r2, r1
 8003b30:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <SystemInit+0x64>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <SystemInit+0x78>)
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	0512      	lsls	r2, r2, #20
 8003b3e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	88ff400c 	.word	0x88ff400c
 8003b50:	fef6fff6 	.word	0xfef6fff6
 8003b54:	fffbffff 	.word	0xfffbffff
 8003b58:	ff02ffff 	.word	0xff02ffff
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <HAL_TIM_Base_MspInit+0x28>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d105      	bne.n	8003b7e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_TIM_Base_MspInit+0x2c>)
 8003b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_TIM_Base_MspInit+0x2c>)
 8003b78:	2104      	movs	r1, #4
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b002      	add	sp, #8
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	40010800 	.word	0x40010800
 8003b8c:	40021000 	.word	0x40021000

08003b90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <MX_USART1_UART_Init+0x5c>)
 8003b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003b9c:	2296      	movs	r2, #150	; 0x96
 8003b9e:	0192      	lsls	r2, r2, #6
 8003ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <MX_USART1_UART_Init+0x58>)
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f002 ff63 	bl	8006aa0 <HAL_UART_Init>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bde:	f7ff f9d7 	bl	8002f90 <Error_Handler>
  }

}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20001354 	.word	0x20001354
 8003bec:	40013800 	.word	0x40013800

08003bf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003bf6:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <MX_USART2_UART_Init+0x5c>)
 8003bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003bfc:	2296      	movs	r2, #150	; 0x96
 8003bfe:	0192      	lsls	r2, r2, #6
 8003c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c16:	220c      	movs	r2, #12
 8003c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <MX_USART2_UART_Init+0x58>)
 8003c34:	0018      	movs	r0, r3
 8003c36:	f002 ff33 	bl	8006aa0 <HAL_UART_Init>
 8003c3a:	1e03      	subs	r3, r0, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c3e:	f7ff f9a7 	bl	8002f90 <Error_Handler>
  }

}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200014e4 	.word	0x200014e4
 8003c4c:	40004400 	.word	0x40004400

08003c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	2314      	movs	r3, #20
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	2314      	movs	r3, #20
 8003c60:	001a      	movs	r2, r3
 8003c62:	2100      	movs	r1, #0
 8003c64:	f01b fa6a 	bl	801f13c <memset>
  if(uartHandle->Instance==USART1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a38      	ldr	r2, [pc, #224]	; (8003d50 <HAL_UART_MspInit+0x100>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d133      	bne.n	8003cda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	01c9      	lsls	r1, r1, #7
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003c86:	2101      	movs	r1, #1
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	2201      	movs	r2, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003c98:	2114      	movs	r1, #20
 8003c9a:	187b      	adds	r3, r7, r1
 8003c9c:	22c0      	movs	r2, #192	; 0xc0
 8003c9e:	00d2      	lsls	r2, r2, #3
 8003ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cba:	187a      	adds	r2, r7, r1
 8003cbc:	23a0      	movs	r3, #160	; 0xa0
 8003cbe:	05db      	lsls	r3, r3, #23
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fca8 	bl	8004618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	201b      	movs	r0, #27
 8003cce:	f000 fc19 	bl	8004504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cd2:	201b      	movs	r0, #27
 8003cd4:	f000 fc2b 	bl	800452e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003cd8:	e036      	b.n	8003d48 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_UART_MspInit+0x108>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d131      	bne.n	8003d48 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	0289      	lsls	r1, r1, #10
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <HAL_UART_MspInit+0x104>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	2201      	movs	r2, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003d0a:	2114      	movs	r1, #20
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	220c      	movs	r2, #12
 8003d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2202      	movs	r2, #2
 8003d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_NOPULL
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	2203      	movs	r2, #3
 8003d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	2204      	movs	r2, #4
 8003d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2a:	187a      	adds	r2, r7, r1
 8003d2c:	23a0      	movs	r3, #160	; 0xa0
 8003d2e:	05db      	lsls	r3, r3, #23
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 fc70 	bl	8004618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	201c      	movs	r0, #28
 8003d3e:	f000 fbe1 	bl	8004504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d42:	201c      	movs	r0, #28
 8003d44:	f000 fbf3 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b00a      	add	sp, #40	; 0x28
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40013800 	.word	0x40013800
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40004400 	.word	0x40004400

08003d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d5c:	480d      	ldr	r0, [pc, #52]	; (8003d94 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d62:	e003      	b.n	8003d6c <LoopCopyDataInit>

08003d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d6a:	3104      	adds	r1, #4

08003d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d6c:	480b      	ldr	r0, [pc, #44]	; (8003d9c <LoopForever+0xa>)
  ldr  r3, =_edata
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d74:	d3f6      	bcc.n	8003d64 <CopyDataInit>
  ldr  r2, =_sbss
 8003d76:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003d78:	e002      	b.n	8003d80 <LoopFillZerobss>

08003d7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003d7a:	2300      	movs	r3, #0
  str  r3, [r2]
 8003d7c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d7e:	3204      	adds	r2, #4

08003d80 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <LoopForever+0x16>)
  cmp  r2, r3
 8003d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d84:	d3f9      	bcc.n	8003d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d86:	f7ff fead 	bl	8003ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8a:	f01b f997 	bl	801f0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d8e:	f7ff f85d 	bl	8002e4c <main>

08003d92 <LoopForever>:

LoopForever:
    b LoopForever
 8003d92:	e7fe      	b.n	8003d92 <LoopForever>
   ldr   r0, =_estack
 8003d94:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003d98:	080225c4 	.word	0x080225c4
  ldr  r0, =_sdata
 8003d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003da0:	20000288 	.word	0x20000288
  ldr  r2, =_sbss
 8003da4:	20000288 	.word	0x20000288
  ldr  r3, = _ebss
 8003da8:	20001774 	.word	0x20001774

08003dac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dac:	e7fe      	b.n	8003dac <ADC1_COMP_IRQHandler>
	...

08003db0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_Init+0x3c>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <HAL_Init+0x3c>)
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f000 f811 	bl	8003df0 <HAL_InitTick>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e001      	b.n	8003dde <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dda:	f7ff fddf 	bl	800399c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	781b      	ldrb	r3, [r3, #0]
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	40022000 	.word	0x40022000

08003df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_InitTick+0x5c>)
 8003dfa:	681c      	ldr	r4, [r3, #0]
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_InitTick+0x60>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	0019      	movs	r1, r3
 8003e02:	23fa      	movs	r3, #250	; 0xfa
 8003e04:	0098      	lsls	r0, r3, #2
 8003e06:	f7fc f987 	bl	8000118 <__udivsi3>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7fc f982 	bl	8000118 <__udivsi3>
 8003e14:	0003      	movs	r3, r0
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fba9 	bl	800456e <HAL_SYSTICK_Config>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e00f      	b.n	8003e44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d80b      	bhi.n	8003e42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	425b      	negs	r3, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 fb66 	bl	8004504 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_InitTick+0x64>)
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b003      	add	sp, #12
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	2000005c 	.word	0x2000005c
 8003e50:	20000064 	.word	0x20000064
 8003e54:	20000060 	.word	0x20000060

08003e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e5c:	4b02      	ldr	r3, [pc, #8]	; (8003e68 <HAL_GetTick+0x10>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	20001564 	.word	0x20001564

08003e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e74:	f7ff fff0 	bl	8003e58 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3301      	adds	r3, #1
 8003e84:	d005      	beq.n	8003e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_Delay+0x40>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	f7ff ffe0 	bl	8003e58 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f7      	bhi.n	8003e94 <HAL_Delay+0x28>
  {
  }
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000064 	.word	0x20000064

08003eb0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <HAL_SuspendTick+0x18>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_SuspendTick+0x18>)
 8003eba:	2102      	movs	r1, #2
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <HAL_ResumeTick+0x18>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_ResumeTick+0x18>)
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	e000e010 	.word	0xe000e010

08003ee8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	40015800 	.word	0x40015800

08003f04 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e159      	b.n	80041ca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2250      	movs	r2, #80	; 0x50
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fe fd50 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2210      	movs	r2, #16
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d005      	beq.n	8003f4c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2204      	movs	r2, #4
 8003f48:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f4a:	d00b      	beq.n	8003f64 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	2210      	movs	r2, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2250      	movs	r2, #80	; 0x50
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e132      	b.n	80041ca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	4a9a      	ldr	r2, [pc, #616]	; (80041d4 <HAL_ADC_Init+0x2d0>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d108      	bne.n	8003f94 <HAL_ADC_Init+0x90>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_Init+0x90>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_ADC_Init+0x92>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d149      	bne.n	800402e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	23c0      	movs	r3, #192	; 0xc0
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d00b      	beq.n	8003fbe <HAL_ADC_Init+0xba>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	05db      	lsls	r3, r3, #23
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d005      	beq.n	8003fbe <HAL_ADC_Init+0xba>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d111      	bne.n	8003fe2 <HAL_ADC_Init+0xde>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0092      	lsls	r2, r2, #2
 8003fca:	0892      	lsrs	r2, r2, #2
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6919      	ldr	r1, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	611a      	str	r2, [r3, #16]
 8003fe0:	e014      	b.n	800400c <HAL_ADC_Init+0x108>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	0892      	lsrs	r2, r2, #2
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	4b79      	ldr	r3, [pc, #484]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8003ff8:	4978      	ldr	r1, [pc, #480]	; (80041dc <HAL_ADC_Init+0x2d8>)
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4b74      	ldr	r3, [pc, #464]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2118      	movs	r1, #24
 8004018:	438a      	bics	r2, r1
 800401a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68d9      	ldr	r1, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800402e:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b69      	ldr	r3, [pc, #420]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8004034:	496a      	ldr	r1, [pc, #424]	; (80041e0 <HAL_ADC_Init+0x2dc>)
 8004036:	400a      	ands	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800403a:	4b67      	ldr	r3, [pc, #412]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	065a      	lsls	r2, r3, #25
 8004044:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <HAL_ADC_Init+0x2d4>)
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	055b      	lsls	r3, r3, #21
 8004054:	4013      	ands	r3, r2
 8004056:	d108      	bne.n	800406a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	0549      	lsls	r1, r1, #21
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	495b      	ldr	r1, [pc, #364]	; (80041e4 <HAL_ADC_Init+0x2e0>)
 8004076:	400a      	ands	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68d9      	ldr	r1, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d101      	bne.n	8004090 <HAL_ADC_Init+0x18c>
 800408c:	2304      	movs	r3, #4
 800408e:	e000      	b.n	8004092 <HAL_ADC_Init+0x18e>
 8004090:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004092:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2020      	movs	r0, #32
 8004098:	5c1b      	ldrb	r3, [r3, r0]
 800409a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800409c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	202c      	movs	r0, #44	; 0x2c
 80040a2:	5c1b      	ldrb	r3, [r3, r0]
 80040a4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040a6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80040ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80040b4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80040bc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ca:	23c2      	movs	r3, #194	; 0xc2
 80040cc:	33ff      	adds	r3, #255	; 0xff
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d00b      	beq.n	80040ea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68d9      	ldr	r1, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2221      	movs	r2, #33	; 0x21
 80040ee:	5c9b      	ldrb	r3, [r3, r2]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d11a      	bne.n	800412a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	5c9b      	ldrb	r3, [r3, r2]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	0249      	lsls	r1, r1, #9
 800410c:	430a      	orrs	r2, r1
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e00b      	b.n	800412a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	2220      	movs	r2, #32
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	2201      	movs	r2, #1
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d11f      	bne.n	8004172 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	492a      	ldr	r1, [pc, #168]	; (80041e8 <HAL_ADC_Init+0x2e4>)
 800413e:	400a      	ands	r2, r1
 8004140:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6919      	ldr	r1, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004150:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004156:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2101      	movs	r1, #1
 800416c:	430a      	orrs	r2, r1
 800416e:	611a      	str	r2, [r3, #16]
 8004170:	e00e      	b.n	8004190 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2101      	movs	r1, #1
 800418c:	438a      	bics	r2, r1
 800418e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2107      	movs	r1, #7
 800419c:	438a      	bics	r2, r1
 800419e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6959      	ldr	r1, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	2203      	movs	r2, #3
 80041be:	4393      	bics	r3, r2
 80041c0:	2201      	movs	r2, #1
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b002      	add	sp, #8
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	fffffefd 	.word	0xfffffefd
 80041d8:	40012708 	.word	0x40012708
 80041dc:	ffc3ffff 	.word	0xffc3ffff
 80041e0:	fdffffff 	.word	0xfdffffff
 80041e4:	fffe0219 	.word	0xfffe0219
 80041e8:	fffffc03 	.word	0xfffffc03

080041ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2250      	movs	r2, #80	; 0x50
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x18>
 8004200:	2302      	movs	r3, #2
 8004202:	e06c      	b.n	80042de <HAL_ADC_ConfigChannel+0xf2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2250      	movs	r2, #80	; 0x50
 8004208:	2101      	movs	r1, #1
 800420a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2204      	movs	r2, #4
 8004214:	4013      	ands	r3, r2
 8004216:	d00b      	beq.n	8004230 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	2220      	movs	r2, #32
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2250      	movs	r2, #80	; 0x50
 8004228:	2100      	movs	r1, #0
 800422a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e056      	b.n	80042de <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <HAL_ADC_ConfigChannel+0xfc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d028      	beq.n	800428c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	035b      	lsls	r3, r3, #13
 8004246:	0b5a      	lsrs	r2, r3, #13
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	02db      	lsls	r3, r3, #11
 8004258:	4013      	ands	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	0409      	lsls	r1, r1, #16
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800426a:	200a      	movs	r0, #10
 800426c:	f000 f844 	bl	80042f8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	4013      	ands	r3, r2
 800427a:	d02b      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	03c9      	lsls	r1, r1, #15
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e023      	b.n	80042d4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	035b      	lsls	r3, r3, #13
 8004298:	0b5b      	lsrs	r3, r3, #13
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	400a      	ands	r2, r1
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	02db      	lsls	r3, r3, #11
 80042ac:	4013      	ands	r3, r2
 80042ae:	d005      	beq.n	80042bc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 80042b6:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_ADC_ConfigChannel+0x104>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	029b      	lsls	r3, r3, #10
 80042c4:	4013      	ands	r3, r2
 80042c6:	d005      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b07      	ldr	r3, [pc, #28]	; (80042ec <HAL_ADC_ConfigChannel+0x100>)
 80042ce:	4909      	ldr	r1, [pc, #36]	; (80042f4 <HAL_ADC_ConfigChannel+0x108>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2250      	movs	r2, #80	; 0x50
 80042d8:	2100      	movs	r1, #0
 80042da:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	00001001 	.word	0x00001001
 80042ec:	40012708 	.word	0x40012708
 80042f0:	ff7fffff 	.word	0xff7fffff
 80042f4:	ffbfffff 	.word	0xffbfffff

080042f8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <ADC_DelayMicroSecond+0x34>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	490a      	ldr	r1, [pc, #40]	; (8004330 <ADC_DelayMicroSecond+0x38>)
 8004306:	0018      	movs	r0, r3
 8004308:	f7fb ff06 	bl	8000118 <__udivsi3>
 800430c:	0003      	movs	r3, r0
 800430e:	001a      	movs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4353      	muls	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004316:	e002      	b.n	800431e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f9      	bne.n	8004318 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000005c 	.word	0x2000005c
 8004330:	000f4240 	.word	0x000f4240

08004334 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004340:	6a1a      	ldr	r2, [r3, #32]
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	0049      	lsls	r1, r1, #1
 8004348:	430a      	orrs	r2, r1
 800434a:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 800434c:	f7ff fd84 	bl	8003e58 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004354:	e008      	b.n	8004368 <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8004356:	f7ff fd7f 	bl	8003e58 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b03      	cmp	r3, #3
 8004362:	d901      	bls.n	8004368 <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e006      	b.n	8004376 <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_ADCEx_EnableVREFINT+0x4c>)
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	05db      	lsls	r3, r3, #23
 8004370:	4013      	ands	r3, r2
 8004372:	d0f0      	beq.n	8004356 <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	40010000 	.word	0x40010000

08004384 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004390:	1dfb      	adds	r3, r7, #7
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	001a      	movs	r2, r3
 8004396:	231f      	movs	r3, #31
 8004398:	401a      	ands	r2, r3
 800439a:	4b04      	ldr	r3, [pc, #16]	; (80043ac <NVIC_EnableIRQ+0x28>)
 800439c:	2101      	movs	r1, #1
 800439e:	4091      	lsls	r1, r2
 80043a0:	000a      	movs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	e000e100 	.word	0xe000e100

080043b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	0002      	movs	r2, r0
 80043b8:	1dfb      	adds	r3, r7, #7
 80043ba:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	001a      	movs	r2, r3
 80043c2:	231f      	movs	r3, #31
 80043c4:	4013      	ands	r3, r2
 80043c6:	4905      	ldr	r1, [pc, #20]	; (80043dc <NVIC_DisableIRQ+0x2c>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	0013      	movs	r3, r2
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	508b      	str	r3, [r1, r2]
}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b002      	add	sp, #8
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	e000e100 	.word	0xe000e100

080043e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	0002      	movs	r2, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	1dfb      	adds	r3, r7, #7
 80043ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80043ee:	1dfb      	adds	r3, r7, #7
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b7f      	cmp	r3, #127	; 0x7f
 80043f4:	d932      	bls.n	800445c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043f6:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <NVIC_SetPriority+0xd4>)
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	0019      	movs	r1, r3
 80043fe:	230f      	movs	r3, #15
 8004400:	400b      	ands	r3, r1
 8004402:	3b08      	subs	r3, #8
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	3306      	adds	r3, #6
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	3304      	adds	r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1dfa      	adds	r2, r7, #7
 8004412:	7812      	ldrb	r2, [r2, #0]
 8004414:	0011      	movs	r1, r2
 8004416:	2203      	movs	r2, #3
 8004418:	400a      	ands	r2, r1
 800441a:	00d2      	lsls	r2, r2, #3
 800441c:	21ff      	movs	r1, #255	; 0xff
 800441e:	4091      	lsls	r1, r2
 8004420:	000a      	movs	r2, r1
 8004422:	43d2      	mvns	r2, r2
 8004424:	401a      	ands	r2, r3
 8004426:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	019b      	lsls	r3, r3, #6
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	401a      	ands	r2, r3
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	0018      	movs	r0, r3
 8004436:	2303      	movs	r3, #3
 8004438:	4003      	ands	r3, r0
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800443e:	481d      	ldr	r0, [pc, #116]	; (80044b4 <NVIC_SetPriority+0xd4>)
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	001c      	movs	r4, r3
 8004446:	230f      	movs	r3, #15
 8004448:	4023      	ands	r3, r4
 800444a:	3b08      	subs	r3, #8
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	430a      	orrs	r2, r1
 8004450:	3306      	adds	r3, #6
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	18c3      	adds	r3, r0, r3
 8004456:	3304      	adds	r3, #4
 8004458:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800445a:	e027      	b.n	80044ac <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <NVIC_SetPriority+0xd8>)
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b25b      	sxtb	r3, r3
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	33c0      	adds	r3, #192	; 0xc0
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	589b      	ldr	r3, [r3, r2]
 800446c:	1dfa      	adds	r2, r7, #7
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	0011      	movs	r1, r2
 8004472:	2203      	movs	r2, #3
 8004474:	400a      	ands	r2, r1
 8004476:	00d2      	lsls	r2, r2, #3
 8004478:	21ff      	movs	r1, #255	; 0xff
 800447a:	4091      	lsls	r1, r2
 800447c:	000a      	movs	r2, r1
 800447e:	43d2      	mvns	r2, r2
 8004480:	401a      	ands	r2, r3
 8004482:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	22ff      	movs	r2, #255	; 0xff
 800448a:	401a      	ands	r2, r3
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	0018      	movs	r0, r3
 8004492:	2303      	movs	r3, #3
 8004494:	4003      	ands	r3, r0
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800449a:	4807      	ldr	r0, [pc, #28]	; (80044b8 <NVIC_SetPriority+0xd8>)
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b25b      	sxtb	r3, r3
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	430a      	orrs	r2, r1
 80044a6:	33c0      	adds	r3, #192	; 0xc0
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	501a      	str	r2, [r3, r0]
}
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b003      	add	sp, #12
 80044b2:	bd90      	pop	{r4, r7, pc}
 80044b4:	e000ed00 	.word	0xe000ed00
 80044b8:	e000e100 	.word	0xe000e100

080044bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <SysTick_Config+0x40>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ce:	2301      	movs	r3, #1
 80044d0:	e010      	b.n	80044f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <SysTick_Config+0x44>)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	3a01      	subs	r2, #1
 80044d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044da:	2301      	movs	r3, #1
 80044dc:	425b      	negs	r3, r3
 80044de:	2103      	movs	r1, #3
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7ff ff7d 	bl	80043e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <SysTick_Config+0x44>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <SysTick_Config+0x44>)
 80044ee:	2207      	movs	r2, #7
 80044f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	00ffffff 	.word	0x00ffffff
 8004500:	e000e010 	.word	0xe000e010

08004504 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	210f      	movs	r1, #15
 8004510:	187b      	adds	r3, r7, r1
 8004512:	1c02      	adds	r2, r0, #0
 8004514:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	187b      	adds	r3, r7, r1
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b25b      	sxtb	r3, r3
 800451e:	0011      	movs	r1, r2
 8004520:	0018      	movs	r0, r3
 8004522:	f7ff ff5d 	bl	80043e0 <NVIC_SetPriority>
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	0002      	movs	r2, r0
 8004536:	1dfb      	adds	r3, r7, #7
 8004538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b25b      	sxtb	r3, r3
 8004540:	0018      	movs	r0, r3
 8004542:	f7ff ff1f 	bl	8004384 <NVIC_EnableIRQ>
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	b002      	add	sp, #8
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	0002      	movs	r2, r0
 8004556:	1dfb      	adds	r3, r7, #7
 8004558:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800455a:	1dfb      	adds	r3, r7, #7
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b25b      	sxtb	r3, r3
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff ff25 	bl	80043b0 <NVIC_DisableIRQ>
}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	46bd      	mov	sp, r7
 800456a:	b002      	add	sp, #8
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7ff ff9f 	bl	80044bc <SysTick_Config>
 800457e:	0003      	movs	r3, r0
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	230f      	movs	r3, #15
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2225      	movs	r2, #37	; 0x25
 800459c:	5c9b      	ldrb	r3, [r3, r2]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d007      	beq.n	80045b4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2204      	movs	r2, #4
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045aa:	230f      	movs	r3, #15
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e02a      	b.n	800460a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	210e      	movs	r1, #14
 80045c0:	438a      	bics	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2101      	movs	r1, #1
 80045d0:	438a      	bics	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	221c      	movs	r2, #28
 80045da:	401a      	ands	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2101      	movs	r1, #1
 80045e2:	4091      	lsls	r1, r2
 80045e4:	000a      	movs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2225      	movs	r2, #37	; 0x25
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	0010      	movs	r0, r2
 8004608:	4798      	blx	r3
    }
  }
  return status;
 800460a:	230f      	movs	r3, #15
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800462e:	e155      	b.n	80048dc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4091      	lsls	r1, r2
 800463a:	000a      	movs	r2, r1
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d100      	bne.n	8004648 <HAL_GPIO_Init+0x30>
 8004646:	e146      	b.n	80048d6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d00b      	beq.n	8004668 <HAL_GPIO_Init+0x50>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d007      	beq.n	8004668 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800465c:	2b11      	cmp	r3, #17
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b12      	cmp	r3, #18
 8004666:	d130      	bne.n	80046ca <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	409a      	lsls	r2, r3
 8004676:	0013      	movs	r3, r2
 8004678:	43da      	mvns	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	409a      	lsls	r2, r3
 800468a:	0013      	movs	r3, r2
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800469e:	2201      	movs	r2, #1
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	409a      	lsls	r2, r3
 80046a4:	0013      	movs	r3, r2
 80046a6:	43da      	mvns	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	2201      	movs	r2, #1
 80046b6:	401a      	ands	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	409a      	lsls	r2, r3
 80046bc:	0013      	movs	r3, r2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	2203      	movs	r2, #3
 80046d6:	409a      	lsls	r2, r3
 80046d8:	0013      	movs	r3, r2
 80046da:	43da      	mvns	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4013      	ands	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	409a      	lsls	r2, r3
 80046ec:	0013      	movs	r3, r2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0xf2>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b12      	cmp	r3, #18
 8004708:	d123      	bne.n	8004752 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	08da      	lsrs	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3208      	adds	r2, #8
 8004712:	0092      	lsls	r2, r2, #2
 8004714:	58d3      	ldr	r3, [r2, r3]
 8004716:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2207      	movs	r2, #7
 800471c:	4013      	ands	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	220f      	movs	r2, #15
 8004722:	409a      	lsls	r2, r3
 8004724:	0013      	movs	r3, r2
 8004726:	43da      	mvns	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2107      	movs	r1, #7
 8004736:	400b      	ands	r3, r1
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	409a      	lsls	r2, r3
 800473c:	0013      	movs	r3, r2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	08da      	lsrs	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3208      	adds	r2, #8
 800474c:	0092      	lsls	r2, r2, #2
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	409a      	lsls	r2, r3
 8004760:	0013      	movs	r3, r2
 8004762:	43da      	mvns	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2203      	movs	r2, #3
 8004770:	401a      	ands	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	0013      	movs	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	055b      	lsls	r3, r3, #21
 800478e:	4013      	ands	r3, r2
 8004790:	d100      	bne.n	8004794 <HAL_GPIO_Init+0x17c>
 8004792:	e0a0      	b.n	80048d6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004794:	4b57      	ldr	r3, [pc, #348]	; (80048f4 <HAL_GPIO_Init+0x2dc>)
 8004796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004798:	4b56      	ldr	r3, [pc, #344]	; (80048f4 <HAL_GPIO_Init+0x2dc>)
 800479a:	2101      	movs	r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a0:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <HAL_GPIO_Init+0x2e0>)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3302      	adds	r3, #2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	589b      	ldr	r3, [r3, r2]
 80047ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2203      	movs	r2, #3
 80047b2:	4013      	ands	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	220f      	movs	r2, #15
 80047b8:	409a      	lsls	r2, r3
 80047ba:	0013      	movs	r3, r2
 80047bc:	43da      	mvns	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	23a0      	movs	r3, #160	; 0xa0
 80047c8:	05db      	lsls	r3, r3, #23
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d01f      	beq.n	800480e <HAL_GPIO_Init+0x1f6>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a4a      	ldr	r2, [pc, #296]	; (80048fc <HAL_GPIO_Init+0x2e4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d019      	beq.n	800480a <HAL_GPIO_Init+0x1f2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a49      	ldr	r2, [pc, #292]	; (8004900 <HAL_GPIO_Init+0x2e8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_GPIO_Init+0x1ee>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a48      	ldr	r2, [pc, #288]	; (8004904 <HAL_GPIO_Init+0x2ec>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00d      	beq.n	8004802 <HAL_GPIO_Init+0x1ea>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a47      	ldr	r2, [pc, #284]	; (8004908 <HAL_GPIO_Init+0x2f0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d007      	beq.n	80047fe <HAL_GPIO_Init+0x1e6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a46      	ldr	r2, [pc, #280]	; (800490c <HAL_GPIO_Init+0x2f4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <HAL_GPIO_Init+0x1e2>
 80047f6:	2305      	movs	r3, #5
 80047f8:	e00a      	b.n	8004810 <HAL_GPIO_Init+0x1f8>
 80047fa:	2306      	movs	r3, #6
 80047fc:	e008      	b.n	8004810 <HAL_GPIO_Init+0x1f8>
 80047fe:	2304      	movs	r3, #4
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x1f8>
 8004802:	2303      	movs	r3, #3
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x1f8>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x1f8>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x1f8>
 800480e:	2300      	movs	r3, #0
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	2103      	movs	r1, #3
 8004814:	400a      	ands	r2, r1
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4093      	lsls	r3, r2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004820:	4935      	ldr	r1, [pc, #212]	; (80048f8 <HAL_GPIO_Init+0x2e0>)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43da      	mvns	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	4013      	ands	r3, r2
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004852:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004858:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43da      	mvns	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	029b      	lsls	r3, r3, #10
 8004870:	4013      	ands	r3, r2
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800487c:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43da      	mvns	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	035b      	lsls	r3, r3, #13
 800489a:	4013      	ands	r3, r2
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048a6:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80048ac:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	43da      	mvns	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4013      	ands	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	039b      	lsls	r3, r3, #14
 80048c4:	4013      	ands	r3, r2
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	3301      	adds	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	40da      	lsrs	r2, r3
 80048e4:	1e13      	subs	r3, r2, #0
 80048e6:	d000      	beq.n	80048ea <HAL_GPIO_Init+0x2d2>
 80048e8:	e6a2      	b.n	8004630 <HAL_GPIO_Init+0x18>
  }
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b006      	add	sp, #24
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40010000 	.word	0x40010000
 80048fc:	50000400 	.word	0x50000400
 8004900:	50000800 	.word	0x50000800
 8004904:	50000c00 	.word	0x50000c00
 8004908:	50001000 	.word	0x50001000
 800490c:	50001c00 	.word	0x50001c00
 8004910:	40010400 	.word	0x40010400

08004914 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	0008      	movs	r0, r1
 800491e:	0011      	movs	r1, r2
 8004920:	1cbb      	adds	r3, r7, #2
 8004922:	1c02      	adds	r2, r0, #0
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	1c7b      	adds	r3, r7, #1
 8004928:	1c0a      	adds	r2, r1, #0
 800492a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800492c:	1c7b      	adds	r3, r7, #1
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004934:	1cbb      	adds	r3, r7, #2
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800493c:	e003      	b.n	8004946 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800493e:	1cbb      	adds	r3, r7, #2
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	0002      	movs	r2, r0
 8004958:	1dbb      	adds	r3, r7, #6
 800495a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	1dba      	adds	r2, r7, #6
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	4013      	ands	r3, r2
 8004966:	d008      	beq.n	800497a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800496a:	1dba      	adds	r2, r7, #6
 800496c:	8812      	ldrh	r2, [r2, #0]
 800496e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004970:	1dbb      	adds	r3, r7, #6
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	0018      	movs	r0, r3
 8004976:	f019 fb97 	bl	801e0a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b002      	add	sp, #8
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	40010400 	.word	0x40010400

08004988 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	0049      	lsls	r1, r1, #1
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40007000 	.word	0x40007000

080049a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	000a      	movs	r2, r1
 80049ae:	1cfb      	adds	r3, r7, #3
 80049b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <HAL_PWR_EnterSTOPMode+0x60>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2203      	movs	r2, #3
 80049c0:	4393      	bics	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <HAL_PWR_EnterSTOPMode+0x60>)
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_PWR_EnterSTOPMode+0x64>)
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_PWR_EnterSTOPMode+0x64>)
 80049d8:	2104      	movs	r1, #4
 80049da:	430a      	orrs	r2, r1
 80049dc:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80049de:	1cfb      	adds	r3, r7, #3
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80049e6:	bf30      	wfi
 80049e8:	e002      	b.n	80049f0 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80049ea:	bf40      	sev
  __ASM volatile ("wfe");
 80049ec:	bf20      	wfe
 80049ee:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_PWR_EnterSTOPMode+0x64>)
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <HAL_PWR_EnterSTOPMode+0x64>)
 80049f6:	2104      	movs	r1, #4
 80049f8:	438a      	bics	r2, r1
 80049fa:	611a      	str	r2, [r3, #16]

}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40007000 	.word	0x40007000
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	00c9      	lsls	r1, r1, #3
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40007000 	.word	0x40007000

08004a28 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	0089      	lsls	r1, r1, #2
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40007000 	.word	0x40007000

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f000 fbbc 	bl	80051d0 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a58:	4bc8      	ldr	r3, [pc, #800]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	220c      	movs	r2, #12
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a62:	4bc6      	ldr	r3, [pc, #792]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	025b      	lsls	r3, r3, #9
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	d100      	bne.n	8004a7a <HAL_RCC_OscConfig+0x36>
 8004a78:	e07e      	b.n	8004b78 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d007      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x68>
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	025b      	lsls	r3, r3, #9
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	4bba      	ldr	r3, [pc, #744]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d100      	bne.n	8004a9e <HAL_RCC_OscConfig+0x5a>
 8004a9c:	e06b      	b.n	8004b76 <HAL_RCC_OscConfig+0x132>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d167      	bne.n	8004b76 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f000 fb92 	bl	80051d0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	025b      	lsls	r3, r3, #9
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x84>
 8004ab8:	4bb0      	ldr	r3, [pc, #704]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4baf      	ldr	r3, [pc, #700]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	0249      	lsls	r1, r1, #9
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e027      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	23a0      	movs	r3, #160	; 0xa0
 8004ace:	02db      	lsls	r3, r3, #11
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d10e      	bne.n	8004af2 <HAL_RCC_OscConfig+0xae>
 8004ad4:	4ba9      	ldr	r3, [pc, #676]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4ba8      	ldr	r3, [pc, #672]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	02c9      	lsls	r1, r1, #11
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	4ba6      	ldr	r3, [pc, #664]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4ba5      	ldr	r3, [pc, #660]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	0249      	lsls	r1, r1, #9
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e012      	b.n	8004b18 <HAL_RCC_OscConfig+0xd4>
 8004af2:	4ba2      	ldr	r3, [pc, #648]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4ba1      	ldr	r3, [pc, #644]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004af8:	49a1      	ldr	r1, [pc, #644]	; (8004d80 <HAL_RCC_OscConfig+0x33c>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	4b9f      	ldr	r3, [pc, #636]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	025b      	lsls	r3, r3, #9
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b9a      	ldr	r3, [pc, #616]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b12:	499c      	ldr	r1, [pc, #624]	; (8004d84 <HAL_RCC_OscConfig+0x340>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7ff f99a 	bl	8003e58 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b28:	e009      	b.n	8004b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2a:	f7ff f995 	bl	8003e58 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d902      	bls.n	8004b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	f000 fb49 	bl	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b3e:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	029b      	lsls	r3, r3, #10
 8004b46:	4013      	ands	r3, r2
 8004b48:	d0ef      	beq.n	8004b2a <HAL_RCC_OscConfig+0xe6>
 8004b4a:	e015      	b.n	8004b78 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7ff f984 	bl	8003e58 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b56:	f7ff f97f 	bl	8003e58 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e333      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b68:	4b84      	ldr	r3, [pc, #528]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	4013      	ands	r3, r2
 8004b72:	d1f0      	bne.n	8004b56 <HAL_RCC_OscConfig+0x112>
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d100      	bne.n	8004b84 <HAL_RCC_OscConfig+0x140>
 8004b82:	e098      	b.n	8004cb6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b79      	ldr	r3, [pc, #484]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b98:	2120      	movs	r1, #32
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d13d      	bne.n	8004c2e <HAL_RCC_OscConfig+0x1ea>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d13a      	bne.n	8004c2e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004bb8:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_RCC_OscConfig+0x188>
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e301      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a6d      	ldr	r2, [pc, #436]	; (8004d88 <HAL_RCC_OscConfig+0x344>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	4b67      	ldr	r3, [pc, #412]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2209      	movs	r2, #9
 8004be8:	4393      	bics	r3, r2
 8004bea:	0019      	movs	r1, r3
 8004bec:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bf4:	f000 fc20 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8004bf8:	0001      	movs	r1, r0
 8004bfa:	4b60      	ldr	r3, [pc, #384]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	220f      	movs	r2, #15
 8004c02:	4013      	ands	r3, r2
 8004c04:	4a61      	ldr	r2, [pc, #388]	; (8004d8c <HAL_RCC_OscConfig+0x348>)
 8004c06:	5cd3      	ldrb	r3, [r2, r3]
 8004c08:	000a      	movs	r2, r1
 8004c0a:	40da      	lsrs	r2, r3
 8004c0c:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <HAL_RCC_OscConfig+0x34c>)
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004c10:	2513      	movs	r5, #19
 8004c12:	197c      	adds	r4, r7, r5
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7ff f8eb 	bl	8003df0 <HAL_InitTick>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004c1e:	197b      	adds	r3, r7, r5
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d047      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004c26:	2313      	movs	r3, #19
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	e2d0      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d027      	beq.n	8004c84 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c34:	4b51      	ldr	r3, [pc, #324]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2209      	movs	r2, #9
 8004c3a:	4393      	bics	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	430a      	orrs	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7ff f907 	bl	8003e58 <HAL_GetTick>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c50:	f7ff f902 	bl	8003e58 <HAL_GetTick>
 8004c54:	0002      	movs	r2, r0
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e2b6      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2204      	movs	r2, #4
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d0f1      	beq.n	8004c50 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4a45      	ldr	r2, [pc, #276]	; (8004d88 <HAL_RCC_OscConfig+0x344>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	e018      	b.n	8004cb6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c84:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b3c      	ldr	r3, [pc, #240]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7ff f8e2 	bl	8003e58 <HAL_GetTick>
 8004c94:	0003      	movs	r3, r0
 8004c96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7ff f8dd 	bl	8003e58 <HAL_GetTick>
 8004c9e:	0002      	movs	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e291      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cac:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d1f1      	bne.n	8004c9a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x27e>
 8004cc0:	e09f      	b.n	8004e02 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d13f      	bne.n	8004d48 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc8:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	2380      	movs	r3, #128	; 0x80
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e277      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce0:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <HAL_RCC_OscConfig+0x350>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cee:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	0a19      	lsrs	r1, r3, #8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	061a      	lsls	r2, r3, #24
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	0b5b      	lsrs	r3, r3, #13
 8004d0e:	3301      	adds	r3, #1
 8004d10:	2280      	movs	r2, #128	; 0x80
 8004d12:	0212      	lsls	r2, r2, #8
 8004d14:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	210f      	movs	r1, #15
 8004d1e:	400b      	ands	r3, r1
 8004d20:	491a      	ldr	r1, [pc, #104]	; (8004d8c <HAL_RCC_OscConfig+0x348>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004d26:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <HAL_RCC_OscConfig+0x34c>)
 8004d28:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004d2a:	2513      	movs	r5, #19
 8004d2c:	197c      	adds	r4, r7, r5
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7ff f85e 	bl	8003df0 <HAL_InitTick>
 8004d34:	0003      	movs	r3, r0
 8004d36:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004d38:	197b      	adds	r3, r7, r5
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d060      	beq.n	8004e02 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004d40:	2313      	movs	r3, #19
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	e243      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03e      	beq.n	8004dce <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	0049      	lsls	r1, r1, #1
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7ff f87b 	bl	8003e58 <HAL_GetTick>
 8004d62:	0003      	movs	r3, r0
 8004d64:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d66:	e017      	b.n	8004d98 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d68:	f7ff f876 	bl	8003e58 <HAL_GetTick>
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d910      	bls.n	8004d98 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e22a      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	fffeffff 	.word	0xfffeffff
 8004d84:	fffbffff 	.word	0xfffbffff
 8004d88:	ffffe0ff 	.word	0xffffe0ff
 8004d8c:	08021374 	.word	0x08021374
 8004d90:	2000005c 	.word	0x2000005c
 8004d94:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d98:	4bc6      	ldr	r3, [pc, #792]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d0e1      	beq.n	8004d68 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da4:	4bc3      	ldr	r3, [pc, #780]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4ac3      	ldr	r2, [pc, #780]	; (80050b8 <HAL_RCC_OscConfig+0x674>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	0019      	movs	r1, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db2:	4bc0      	ldr	r3, [pc, #768]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db8:	4bbe      	ldr	r3, [pc, #760]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	0a19      	lsrs	r1, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	061a      	lsls	r2, r3, #24
 8004dc6:	4bbb      	ldr	r3, [pc, #748]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	e019      	b.n	8004e02 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dce:	4bb9      	ldr	r3, [pc, #740]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4bb8      	ldr	r3, [pc, #736]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004dd4:	49b9      	ldr	r1, [pc, #740]	; (80050bc <HAL_RCC_OscConfig+0x678>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7ff f83d 	bl	8003e58 <HAL_GetTick>
 8004dde:	0003      	movs	r3, r0
 8004de0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004de4:	f7ff f838 	bl	8003e58 <HAL_GetTick>
 8004de8:	0002      	movs	r2, r0
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e1ec      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004df6:	4baf      	ldr	r3, [pc, #700]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2208      	movs	r2, #8
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d036      	beq.n	8004e7a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e14:	4ba7      	ldr	r3, [pc, #668]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e18:	4ba6      	ldr	r3, [pc, #664]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e20:	f7ff f81a 	bl	8003e58 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7ff f815 	bl	8003e58 <HAL_GetTick>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1c9      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3c:	4b9d      	ldr	r3, [pc, #628]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	2202      	movs	r2, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	d0f1      	beq.n	8004e2a <HAL_RCC_OscConfig+0x3e6>
 8004e46:	e018      	b.n	8004e7a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e48:	4b9a      	ldr	r3, [pc, #616]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4c:	4b99      	ldr	r3, [pc, #612]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	438a      	bics	r2, r1
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e54:	f7ff f800 	bl	8003e58 <HAL_GetTick>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5e:	f7fe fffb 	bl	8003e58 <HAL_GetTick>
 8004e62:	0002      	movs	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1af      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e70:	4b90      	ldr	r3, [pc, #576]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	2202      	movs	r2, #2
 8004e76:	4013      	ands	r3, r2
 8004e78:	d1f1      	bne.n	8004e5e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <HAL_RCC_OscConfig+0x442>
 8004e84:	e0af      	b.n	8004fe6 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2323      	movs	r3, #35	; 0x23
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8e:	4b89      	ldr	r3, [pc, #548]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	055b      	lsls	r3, r3, #21
 8004e96:	4013      	ands	r3, r2
 8004e98:	d10a      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9a:	4b86      	ldr	r3, [pc, #536]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004ea0:	2180      	movs	r1, #128	; 0x80
 8004ea2:	0549      	lsls	r1, r1, #21
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ea8:	2323      	movs	r3, #35	; 0x23
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	4b83      	ldr	r3, [pc, #524]	; (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d11a      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebc:	4b80      	ldr	r3, [pc, #512]	; (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b7f      	ldr	r3, [pc, #508]	; (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	0049      	lsls	r1, r1, #1
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eca:	f7fe ffc5 	bl	8003e58 <HAL_GetTick>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed4:	f7fe ffc0 	bl	8003e58 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e174      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_OscConfig+0x4ca>
 8004efe:	4b6d      	ldr	r3, [pc, #436]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f02:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	0049      	lsls	r1, r1, #1
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f0c:	e031      	b.n	8004f72 <HAL_RCC_OscConfig+0x52e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4ec>
 8004f16:	4b67      	ldr	r3, [pc, #412]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1a:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f1c:	4967      	ldr	r1, [pc, #412]	; (80050bc <HAL_RCC_OscConfig+0x678>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50
 8004f22:	4b64      	ldr	r3, [pc, #400]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f26:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f28:	4966      	ldr	r1, [pc, #408]	; (80050c4 <HAL_RCC_OscConfig+0x680>)
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f2e:	e020      	b.n	8004f72 <HAL_RCC_OscConfig+0x52e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	23a0      	movs	r3, #160	; 0xa0
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10e      	bne.n	8004f5a <HAL_RCC_OscConfig+0x516>
 8004f3c:	4b5d      	ldr	r3, [pc, #372]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f40:	4b5c      	ldr	r3, [pc, #368]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	00c9      	lsls	r1, r1, #3
 8004f46:	430a      	orrs	r2, r1
 8004f48:	651a      	str	r2, [r3, #80]	; 0x50
 8004f4a:	4b5a      	ldr	r3, [pc, #360]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f4e:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	0049      	lsls	r1, r1, #1
 8004f54:	430a      	orrs	r2, r1
 8004f56:	651a      	str	r2, [r3, #80]	; 0x50
 8004f58:	e00b      	b.n	8004f72 <HAL_RCC_OscConfig+0x52e>
 8004f5a:	4b56      	ldr	r3, [pc, #344]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5e:	4b55      	ldr	r3, [pc, #340]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f60:	4956      	ldr	r1, [pc, #344]	; (80050bc <HAL_RCC_OscConfig+0x678>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50
 8004f66:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f6c:	4955      	ldr	r1, [pc, #340]	; (80050c4 <HAL_RCC_OscConfig+0x680>)
 8004f6e:	400a      	ands	r2, r1
 8004f70:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d015      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7a:	f7fe ff6d 	bl	8003e58 <HAL_GetTick>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f82:	e009      	b.n	8004f98 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f84:	f7fe ff68 	bl	8003e58 <HAL_GetTick>
 8004f88:	0002      	movs	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	4a4e      	ldr	r2, [pc, #312]	; (80050c8 <HAL_RCC_OscConfig+0x684>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e11b      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f98:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d0ef      	beq.n	8004f84 <HAL_RCC_OscConfig+0x540>
 8004fa4:	e014      	b.n	8004fd0 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fe ff57 	bl	8003e58 <HAL_GetTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fae:	e009      	b.n	8004fc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fe ff52 	bl	8003e58 <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	4a43      	ldr	r2, [pc, #268]	; (80050c8 <HAL_RCC_OscConfig+0x684>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e105      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004fc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d1ef      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fd0:	2323      	movs	r3, #35	; 0x23
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d105      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004fe0:	493a      	ldr	r1, [pc, #232]	; (80050cc <HAL_RCC_OscConfig+0x688>)
 8004fe2:	400a      	ands	r2, r1
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2220      	movs	r2, #32
 8004fec:	4013      	ands	r3, r2
 8004fee:	d049      	beq.n	8005084 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d026      	beq.n	8005046 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ff8:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004ffe:	2101      	movs	r1, #1
 8005000:	430a      	orrs	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8005006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 800500a:	2101      	movs	r1, #1
 800500c:	430a      	orrs	r2, r1
 800500e:	635a      	str	r2, [r3, #52]	; 0x34
 8005010:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_RCC_OscConfig+0x68c>)
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <HAL_RCC_OscConfig+0x68c>)
 8005016:	2180      	movs	r1, #128	; 0x80
 8005018:	0189      	lsls	r1, r1, #6
 800501a:	430a      	orrs	r2, r1
 800501c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501e:	f7fe ff1b 	bl	8003e58 <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005028:	f7fe ff16 	bl	8003e58 <HAL_GetTick>
 800502c:	0002      	movs	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e0ca      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	d0f1      	beq.n	8005028 <HAL_RCC_OscConfig+0x5e4>
 8005044:	e01e      	b.n	8005084 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005046:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 800504c:	2101      	movs	r1, #1
 800504e:	438a      	bics	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <HAL_RCC_OscConfig+0x68c>)
 8005054:	6a1a      	ldr	r2, [r3, #32]
 8005056:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <HAL_RCC_OscConfig+0x68c>)
 8005058:	491e      	ldr	r1, [pc, #120]	; (80050d4 <HAL_RCC_OscConfig+0x690>)
 800505a:	400a      	ands	r2, r1
 800505c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505e:	f7fe fefb 	bl	8003e58 <HAL_GetTick>
 8005062:	0003      	movs	r3, r0
 8005064:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005068:	f7fe fef6 	bl	8003e58 <HAL_GetTick>
 800506c:	0002      	movs	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0aa      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2202      	movs	r2, #2
 8005080:	4013      	ands	r3, r2
 8005082:	d1f1      	bne.n	8005068 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d100      	bne.n	800508e <HAL_RCC_OscConfig+0x64a>
 800508c:	e09f      	b.n	80051ce <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d100      	bne.n	8005096 <HAL_RCC_OscConfig+0x652>
 8005094:	e078      	b.n	8005188 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2b02      	cmp	r3, #2
 800509c:	d159      	bne.n	8005152 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 80050a4:	490c      	ldr	r1, [pc, #48]	; (80050d8 <HAL_RCC_OscConfig+0x694>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050aa:	f7fe fed5 	bl	8003e58 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050b2:	e01c      	b.n	80050ee <HAL_RCC_OscConfig+0x6aa>
 80050b4:	40021000 	.word	0x40021000
 80050b8:	ffff1fff 	.word	0xffff1fff
 80050bc:	fffffeff 	.word	0xfffffeff
 80050c0:	40007000 	.word	0x40007000
 80050c4:	fffffbff 	.word	0xfffffbff
 80050c8:	00001388 	.word	0x00001388
 80050cc:	efffffff 	.word	0xefffffff
 80050d0:	40010000 	.word	0x40010000
 80050d4:	ffffdfff 	.word	0xffffdfff
 80050d8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fe febc 	bl	8003e58 <HAL_GetTick>
 80050e0:	0002      	movs	r2, r0
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e070      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050ee:	4b3a      	ldr	r3, [pc, #232]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	049b      	lsls	r3, r3, #18
 80050f6:	4013      	ands	r3, r2
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fa:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4a37      	ldr	r2, [pc, #220]	; (80051dc <HAL_RCC_OscConfig+0x798>)
 8005100:	4013      	ands	r3, r2
 8005102:	0019      	movs	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	431a      	orrs	r2, r3
 8005114:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 8005116:	430a      	orrs	r2, r1
 8005118:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511a:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 8005120:	2180      	movs	r1, #128	; 0x80
 8005122:	0449      	lsls	r1, r1, #17
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fe fe96 	bl	8003e58 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005132:	f7fe fe91 	bl	8003e58 <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e045      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005144:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	049b      	lsls	r3, r3, #18
 800514c:	4013      	ands	r3, r2
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x6ee>
 8005150:	e03d      	b.n	80051ce <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 8005158:	4921      	ldr	r1, [pc, #132]	; (80051e0 <HAL_RCC_OscConfig+0x79c>)
 800515a:	400a      	ands	r2, r1
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515e:	f7fe fe7b 	bl	8003e58 <HAL_GetTick>
 8005162:	0003      	movs	r3, r0
 8005164:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005168:	f7fe fe76 	bl	8003e58 <HAL_GetTick>
 800516c:	0002      	movs	r2, r0
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e02a      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	049b      	lsls	r3, r3, #18
 8005182:	4013      	ands	r3, r2
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x724>
 8005186:	e022      	b.n	80051ce <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e01d      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <HAL_RCC_OscConfig+0x794>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	025b      	lsls	r3, r3, #9
 80051a0:	401a      	ands	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d10f      	bne.n	80051ca <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	23f0      	movs	r3, #240	; 0xf0
 80051ae:	039b      	lsls	r3, r3, #14
 80051b0:	401a      	ands	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	23c0      	movs	r3, #192	; 0xc0
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	401a      	ands	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b00a      	add	sp, #40	; 0x28
 80051d6:	bdb0      	pop	{r4, r5, r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	ff02ffff 	.word	0xff02ffff
 80051e0:	feffffff 	.word	0xfeffffff

080051e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e4:	b5b0      	push	{r4, r5, r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e10d      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f8:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2201      	movs	r2, #1
 80051fe:	4013      	ands	r3, r2
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d911      	bls.n	800522a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b85      	ldr	r3, [pc, #532]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	4393      	bics	r3, r2
 800520e:	0019      	movs	r1, r3
 8005210:	4b82      	ldr	r3, [pc, #520]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005218:	4b80      	ldr	r3, [pc, #512]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2201      	movs	r2, #1
 800521e:	4013      	ands	r3, r2
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d001      	beq.n	800522a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0f4      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2202      	movs	r2, #2
 8005230:	4013      	ands	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005234:	4b7a      	ldr	r3, [pc, #488]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	22f0      	movs	r2, #240	; 0xf0
 800523a:	4393      	bics	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	4b77      	ldr	r3, [pc, #476]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 8005244:	430a      	orrs	r2, r1
 8005246:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	4013      	ands	r3, r2
 8005250:	d100      	bne.n	8005254 <HAL_RCC_ClockConfig+0x70>
 8005252:	e089      	b.n	8005368 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d107      	bne.n	800526c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800525c:	4b70      	ldr	r3, [pc, #448]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	4013      	ands	r3, r2
 8005266:	d120      	bne.n	80052aa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0d3      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d107      	bne.n	8005284 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005274:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	049b      	lsls	r3, r3, #18
 800527c:	4013      	ands	r3, r2
 800527e:	d114      	bne.n	80052aa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0c7      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d106      	bne.n	800529a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800528c:	4b64      	ldr	r3, [pc, #400]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2204      	movs	r2, #4
 8005292:	4013      	ands	r3, r2
 8005294:	d109      	bne.n	80052aa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e0bc      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800529a:	4b61      	ldr	r3, [pc, #388]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4013      	ands	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0b4      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052aa:	4b5d      	ldr	r3, [pc, #372]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2203      	movs	r2, #3
 80052b0:	4393      	bics	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052be:	f7fe fdcb 	bl	8003e58 <HAL_GetTick>
 80052c2:	0003      	movs	r3, r0
 80052c4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d111      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052ce:	e009      	b.n	80052e4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fe fdc2 	bl	8003e58 <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	4a52      	ldr	r2, [pc, #328]	; (8005424 <HAL_RCC_ClockConfig+0x240>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e097      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e4:	4b4e      	ldr	r3, [pc, #312]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	220c      	movs	r2, #12
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d1ef      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xec>
 80052f0:	e03a      	b.n	8005368 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d111      	bne.n	800531e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052fa:	e009      	b.n	8005310 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fc:	f7fe fdac 	bl	8003e58 <HAL_GetTick>
 8005300:	0002      	movs	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	4a47      	ldr	r2, [pc, #284]	; (8005424 <HAL_RCC_ClockConfig+0x240>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e081      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005310:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	220c      	movs	r2, #12
 8005316:	4013      	ands	r3, r2
 8005318:	2b0c      	cmp	r3, #12
 800531a:	d1ef      	bne.n	80052fc <HAL_RCC_ClockConfig+0x118>
 800531c:	e024      	b.n	8005368 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d11b      	bne.n	800535e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005326:	e009      	b.n	800533c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fe fd96 	bl	8003e58 <HAL_GetTick>
 800532c:	0002      	movs	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a3c      	ldr	r2, [pc, #240]	; (8005424 <HAL_RCC_ClockConfig+0x240>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e06b      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800533c:	4b38      	ldr	r3, [pc, #224]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	220c      	movs	r2, #12
 8005342:	4013      	ands	r3, r2
 8005344:	2b04      	cmp	r3, #4
 8005346:	d1ef      	bne.n	8005328 <HAL_RCC_ClockConfig+0x144>
 8005348:	e00e      	b.n	8005368 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534a:	f7fe fd85 	bl	8003e58 <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	4a33      	ldr	r2, [pc, #204]	; (8005424 <HAL_RCC_ClockConfig+0x240>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e05a      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800535e:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	220c      	movs	r2, #12
 8005364:	4013      	ands	r3, r2
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005368:	4b2c      	ldr	r3, [pc, #176]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	4013      	ands	r3, r2
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d211      	bcs.n	800539a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b29      	ldr	r3, [pc, #164]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	4393      	bics	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	4b26      	ldr	r3, [pc, #152]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005388:	4b24      	ldr	r3, [pc, #144]	; (800541c <HAL_RCC_ClockConfig+0x238>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d001      	beq.n	800539a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e03c      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2204      	movs	r2, #4
 80053a0:	4013      	ands	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a4:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	0019      	movs	r1, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80053b4:	430a      	orrs	r2, r1
 80053b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2208      	movs	r2, #8
 80053be:	4013      	ands	r3, r2
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_RCC_ClockConfig+0x248>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	0019      	movs	r1, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	00da      	lsls	r2, r3, #3
 80053d2:	4b13      	ldr	r3, [pc, #76]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80053d4:	430a      	orrs	r2, r1
 80053d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d8:	f000 f82e 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 80053dc:	0001      	movs	r1, r0
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <HAL_RCC_ClockConfig+0x23c>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	220f      	movs	r2, #15
 80053e6:	4013      	ands	r3, r2
 80053e8:	4a11      	ldr	r2, [pc, #68]	; (8005430 <HAL_RCC_ClockConfig+0x24c>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	000a      	movs	r2, r1
 80053ee:	40da      	lsrs	r2, r3
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_ClockConfig+0x250>)
 80053f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80053f4:	250b      	movs	r5, #11
 80053f6:	197c      	adds	r4, r7, r5
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fe fcf9 	bl	8003df0 <HAL_InitTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005402:	197b      	adds	r3, r7, r5
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800540a:	230b      	movs	r3, #11
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	e000      	b.n	8005414 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b004      	add	sp, #16
 800541a:	bdb0      	pop	{r4, r5, r7, pc}
 800541c:	40022000 	.word	0x40022000
 8005420:	40021000 	.word	0x40021000
 8005424:	00001388 	.word	0x00001388
 8005428:	fffff8ff 	.word	0xfffff8ff
 800542c:	ffffc7ff 	.word	0xffffc7ff
 8005430:	08021374 	.word	0x08021374
 8005434:	2000005c 	.word	0x2000005c

08005438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800543e:	4b3b      	ldr	r3, [pc, #236]	; (800552c <HAL_RCC_GetSysClockFreq+0xf4>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	220c      	movs	r2, #12
 8005448:	4013      	ands	r3, r2
 800544a:	2b08      	cmp	r3, #8
 800544c:	d00e      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x34>
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d00f      	beq.n	8005472 <HAL_RCC_GetSysClockFreq+0x3a>
 8005452:	2b04      	cmp	r3, #4
 8005454:	d157      	bne.n	8005506 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCC_GetSysClockFreq+0xf4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2210      	movs	r2, #16
 800545c:	4013      	ands	r3, r2
 800545e:	d002      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005462:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005464:	e05d      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005466:	4b33      	ldr	r3, [pc, #204]	; (8005534 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005468:	613b      	str	r3, [r7, #16]
      break;
 800546a:	e05a      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800546c:	4b32      	ldr	r3, [pc, #200]	; (8005538 <HAL_RCC_GetSysClockFreq+0x100>)
 800546e:	613b      	str	r3, [r7, #16]
      break;
 8005470:	e057      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0c9b      	lsrs	r3, r3, #18
 8005476:	220f      	movs	r2, #15
 8005478:	4013      	ands	r3, r2
 800547a:	4a30      	ldr	r2, [pc, #192]	; (800553c <HAL_RCC_GetSysClockFreq+0x104>)
 800547c:	5cd3      	ldrb	r3, [r2, r3]
 800547e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	0d9b      	lsrs	r3, r3, #22
 8005484:	2203      	movs	r2, #3
 8005486:	4013      	ands	r3, r2
 8005488:	3301      	adds	r3, #1
 800548a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800548c:	4b27      	ldr	r3, [pc, #156]	; (800552c <HAL_RCC_GetSysClockFreq+0xf4>)
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	025b      	lsls	r3, r3, #9
 8005494:	4013      	ands	r3, r2
 8005496:	d00f      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	000a      	movs	r2, r1
 800549c:	0152      	lsls	r2, r2, #5
 800549e:	1a52      	subs	r2, r2, r1
 80054a0:	0193      	lsls	r3, r2, #6
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	185b      	adds	r3, r3, r1
 80054a8:	025b      	lsls	r3, r3, #9
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fa fe33 	bl	8000118 <__udivsi3>
 80054b2:	0003      	movs	r3, r0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e023      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <HAL_RCC_GetSysClockFreq+0xf4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	4013      	ands	r3, r2
 80054c0:	d00f      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	000a      	movs	r2, r1
 80054c6:	0152      	lsls	r2, r2, #5
 80054c8:	1a52      	subs	r2, r2, r1
 80054ca:	0193      	lsls	r3, r2, #6
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	185b      	adds	r3, r3, r1
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7fa fe1e 	bl	8000118 <__udivsi3>
 80054dc:	0003      	movs	r3, r0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e00e      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	000a      	movs	r2, r1
 80054e6:	0152      	lsls	r2, r2, #5
 80054e8:	1a52      	subs	r2, r2, r1
 80054ea:	0193      	lsls	r3, r2, #6
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	185b      	adds	r3, r3, r1
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fa fe0e 	bl	8000118 <__udivsi3>
 80054fc:	0003      	movs	r3, r0
 80054fe:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	613b      	str	r3, [r7, #16]
      break;
 8005504:	e00d      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <HAL_RCC_GetSysClockFreq+0xf4>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	0b5b      	lsrs	r3, r3, #13
 800550c:	2207      	movs	r2, #7
 800550e:	4013      	ands	r3, r2
 8005510:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	0212      	lsls	r2, r2, #8
 800551a:	409a      	lsls	r2, r3
 800551c:	0013      	movs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
      break;
 8005520:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005522:	693b      	ldr	r3, [r7, #16]
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b006      	add	sp, #24
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	003d0900 	.word	0x003d0900
 8005534:	00f42400 	.word	0x00f42400
 8005538:	007a1200 	.word	0x007a1200
 800553c:	0802138c 	.word	0x0802138c

08005540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005544:	4b02      	ldr	r3, [pc, #8]	; (8005550 <HAL_RCC_GetHCLKFreq+0x10>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	2000005c 	.word	0x2000005c

08005554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005558:	f7ff fff2 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 800555c:	0001      	movs	r1, r0
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	2207      	movs	r2, #7
 8005566:	4013      	ands	r3, r2
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <HAL_RCC_GetPCLK1Freq+0x28>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	40d9      	lsrs	r1, r3
 800556e:	000b      	movs	r3, r1
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	40021000 	.word	0x40021000
 800557c:	08021384 	.word	0x08021384

08005580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005584:	f7ff ffdc 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 8005588:	0001      	movs	r1, r0
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	0adb      	lsrs	r3, r3, #11
 8005590:	2207      	movs	r2, #7
 8005592:	4013      	ands	r3, r2
 8005594:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	40d9      	lsrs	r1, r3
 800559a:	000b      	movs	r3, r1
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	40021000 	.word	0x40021000
 80055a8:	08021384 	.word	0x08021384

080055ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2220      	movs	r2, #32
 80055ba:	4013      	ands	r3, r2
 80055bc:	d100      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80055be:	e0c7      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80055c0:	2317      	movs	r3, #23
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c8:	4b99      	ldr	r3, [pc, #612]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	055b      	lsls	r3, r3, #21
 80055d0:	4013      	ands	r3, r2
 80055d2:	d10a      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d4:	4b96      	ldr	r3, [pc, #600]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d8:	4b95      	ldr	r3, [pc, #596]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055da:	2180      	movs	r1, #128	; 0x80
 80055dc:	0549      	lsls	r1, r1, #21
 80055de:	430a      	orrs	r2, r1
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055e2:	2317      	movs	r3, #23
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b92      	ldr	r3, [pc, #584]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4013      	ands	r3, r2
 80055f4:	d11a      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f6:	4b8f      	ldr	r3, [pc, #572]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b8e      	ldr	r3, [pc, #568]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055fc:	2180      	movs	r1, #128	; 0x80
 80055fe:	0049      	lsls	r1, r1, #1
 8005600:	430a      	orrs	r2, r1
 8005602:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005604:	f7fe fc28 	bl	8003e58 <HAL_GetTick>
 8005608:	0003      	movs	r3, r0
 800560a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	e008      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560e:	f7fe fc23 	bl	8003e58 <HAL_GetTick>
 8005612:	0002      	movs	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b64      	cmp	r3, #100	; 0x64
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e102      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005620:	4b84      	ldr	r3, [pc, #528]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4013      	ands	r3, r2
 800562a:	d0f0      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800562c:	4b80      	ldr	r3, [pc, #512]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	23c0      	movs	r3, #192	; 0xc0
 8005632:	039b      	lsls	r3, r3, #14
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	23c0      	movs	r3, #192	; 0xc0
 800563e:	039b      	lsls	r3, r3, #14
 8005640:	4013      	ands	r3, r2
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d013      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	23c0      	movs	r3, #192	; 0xc0
 800564e:	029b      	lsls	r3, r3, #10
 8005650:	401a      	ands	r2, r3
 8005652:	23c0      	movs	r3, #192	; 0xc0
 8005654:	029b      	lsls	r3, r3, #10
 8005656:	429a      	cmp	r2, r3
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800565a:	4b75      	ldr	r3, [pc, #468]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	401a      	ands	r2, r3
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	429a      	cmp	r2, r3
 800566a:	d101      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0da      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005670:	4b6f      	ldr	r3, [pc, #444]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005674:	23c0      	movs	r3, #192	; 0xc0
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	4013      	ands	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d03b      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	23c0      	movs	r3, #192	; 0xc0
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	4013      	ands	r3, r2
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	429a      	cmp	r2, r3
 8005690:	d033      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2220      	movs	r2, #32
 8005698:	4013      	ands	r3, r2
 800569a:	d02e      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800569c:	4b64      	ldr	r3, [pc, #400]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800569e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a0:	4a65      	ldr	r2, [pc, #404]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a6:	4b62      	ldr	r3, [pc, #392]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056aa:	4b61      	ldr	r3, [pc, #388]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	0309      	lsls	r1, r1, #12
 80056b0:	430a      	orrs	r2, r1
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056b4:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b8:	4b5d      	ldr	r3, [pc, #372]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056ba:	4960      	ldr	r1, [pc, #384]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056bc:	400a      	ands	r2, r1
 80056be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80056c0:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4013      	ands	r3, r2
 80056ce:	d014      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe fbc2 	bl	8003e58 <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056d8:	e009      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fe fbbd 	bl	8003e58 <HAL_GetTick>
 80056de:	0002      	movs	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	4a56      	ldr	r2, [pc, #344]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e09b      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ee:	4b50      	ldr	r3, [pc, #320]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4013      	ands	r3, r2
 80056f8:	d0ef      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	23c0      	movs	r3, #192	; 0xc0
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	401a      	ands	r2, r3
 8005704:	23c0      	movs	r3, #192	; 0xc0
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	429a      	cmp	r2, r3
 800570a:	d10c      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800570c:	4b48      	ldr	r3, [pc, #288]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a4c      	ldr	r2, [pc, #304]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005712:	4013      	ands	r3, r2
 8005714:	0019      	movs	r1, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	23c0      	movs	r3, #192	; 0xc0
 800571c:	039b      	lsls	r3, r3, #14
 800571e:	401a      	ands	r2, r3
 8005720:	4b43      	ldr	r3, [pc, #268]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005722:	430a      	orrs	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	4b42      	ldr	r3, [pc, #264]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005728:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	23c0      	movs	r3, #192	; 0xc0
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	401a      	ands	r2, r3
 8005734:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005736:	430a      	orrs	r2, r1
 8005738:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800573a:	2317      	movs	r3, #23
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005748:	4b39      	ldr	r3, [pc, #228]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800574a:	493f      	ldr	r1, [pc, #252]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800574c:	400a      	ands	r2, r1
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	4013      	ands	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800575a:	4b35      	ldr	r3, [pc, #212]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800575c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575e:	2203      	movs	r2, #3
 8005760:	4393      	bics	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4b31      	ldr	r3, [pc, #196]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800576a:	430a      	orrs	r2, r1
 800576c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2202      	movs	r2, #2
 8005774:	4013      	ands	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005778:	4b2d      	ldr	r3, [pc, #180]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	220c      	movs	r2, #12
 800577e:	4393      	bics	r3, r2
 8005780:	0019      	movs	r1, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005788:	430a      	orrs	r2, r1
 800578a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2204      	movs	r2, #4
 8005792:	4013      	ands	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005796:	4b26      	ldr	r3, [pc, #152]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579a:	4a2c      	ldr	r2, [pc, #176]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800579c:	4013      	ands	r3, r2
 800579e:	0019      	movs	r1, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	4b22      	ldr	r3, [pc, #136]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057a6:	430a      	orrs	r2, r1
 80057a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2208      	movs	r2, #8
 80057b0:	4013      	ands	r3, r2
 80057b2:	d009      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b4:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057c4:	430a      	orrs	r2, r1
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4013      	ands	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	4a17      	ldr	r2, [pc, #92]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80057da:	4013      	ands	r3, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	4b13      	ldr	r3, [pc, #76]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057e4:	430a      	orrs	r2, r1
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2240      	movs	r2, #64	; 0x40
 80057ee:	4013      	ands	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f6:	4a17      	ldr	r2, [pc, #92]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	0019      	movs	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1a      	ldr	r2, [r3, #32]
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005802:	430a      	orrs	r2, r1
 8005804:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	4013      	ands	r3, r2
 800580e:	d009      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	4a10      	ldr	r2, [pc, #64]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005816:	4013      	ands	r3, r2
 8005818:	0019      	movs	r1, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005820:	430a      	orrs	r2, r1
 8005822:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	0018      	movs	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	b006      	add	sp, #24
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	40021000 	.word	0x40021000
 8005834:	40007000 	.word	0x40007000
 8005838:	fffcffff 	.word	0xfffcffff
 800583c:	fff7ffff 	.word	0xfff7ffff
 8005840:	00001388 	.word	0x00001388
 8005844:	ffcfffff 	.word	0xffcfffff
 8005848:	efffffff 	.word	0xefffffff
 800584c:	fffff3ff 	.word	0xfffff3ff
 8005850:	ffffcfff 	.word	0xffffcfff
 8005854:	fbffffff 	.word	0xfbffffff
 8005858:	fff3ffff 	.word	0xfff3ffff

0800585c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e08e      	b.n	800598c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2221      	movs	r2, #33	; 0x21
 8005872:	5c9b      	ldrb	r3, [r3, r2]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	2100      	movs	r1, #0
 8005880:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f7fd ff97 	bl	80037b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2221      	movs	r2, #33	; 0x21
 800588e:	2102      	movs	r1, #2
 8005890:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	22ca      	movs	r2, #202	; 0xca
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2253      	movs	r2, #83	; 0x53
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 fc5c 	bl	8006162 <RTC_EnterInitMode>
 80058aa:	1e03      	subs	r3, r0, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	22ff      	movs	r2, #255	; 0xff
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2221      	movs	r2, #33	; 0x21
 80058ba:	2104      	movs	r1, #4
 80058bc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e064      	b.n	800598c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4931      	ldr	r1, [pc, #196]	; (8005994 <HAL_RTC_Init+0x138>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6899      	ldr	r1, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68d2      	ldr	r2, [r2, #12]
 80058f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6919      	ldr	r1, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	041a      	lsls	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	438a      	bics	r2, r1
 800591c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2103      	movs	r1, #3
 800592a:	438a      	bics	r2, r1
 800592c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2220      	movs	r2, #32
 800594e:	4013      	ands	r3, r2
 8005950:	d113      	bne.n	800597a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f000 fbdd 	bl	8006114 <HAL_RTC_WaitForSynchro>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d00d      	beq.n	800597a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2221      	movs	r2, #33	; 0x21
 800596a:	2104      	movs	r1, #4
 800596c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	2100      	movs	r1, #0
 8005974:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e008      	b.n	800598c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	22ff      	movs	r2, #255	; 0xff
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2221      	movs	r2, #33	; 0x21
 8005986:	2101      	movs	r1, #1
 8005988:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800598a:	2300      	movs	r3, #0
  }
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}
 8005994:	ff8fffbf 	.word	0xff8fffbf

08005998 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	5c9b      	ldrb	r3, [r3, r2]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_RTC_SetTime+0x1a>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e0ad      	b.n	8005b0e <HAL_RTC_SetTime+0x176>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	2101      	movs	r1, #1
 80059b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2221      	movs	r2, #33	; 0x21
 80059be:	2102      	movs	r1, #2
 80059c0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d125      	bne.n	8005a14 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	4013      	ands	r3, r2
 80059d2:	d102      	bne.n	80059da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 fbe9 	bl	80061b6 <RTC_ByteToBcd2>
 80059e4:	0003      	movs	r3, r0
 80059e6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 fbe2 	bl	80061b6 <RTC_ByteToBcd2>
 80059f2:	0003      	movs	r3, r0
 80059f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059f6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	789b      	ldrb	r3, [r3, #2]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 fbda 	bl	80061b6 <RTC_ByteToBcd2>
 8005a02:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a04:	0022      	movs	r2, r4
 8005a06:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	78db      	ldrb	r3, [r3, #3]
 8005a0c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e017      	b.n	8005a44 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d102      	bne.n	8005a26 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a32:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a38:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	22ca      	movs	r2, #202	; 0xca
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2253      	movs	r2, #83	; 0x53
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 fb83 	bl	8006162 <RTC_EnterInitMode>
 8005a5c:	1e03      	subs	r3, r0, #0
 8005a5e:	d00d      	beq.n	8005a7c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2221      	movs	r2, #33	; 0x21
 8005a6c:	2104      	movs	r1, #4
 8005a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e048      	b.n	8005b0e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4925      	ldr	r1, [pc, #148]	; (8005b18 <HAL_RTC_SetTime+0x180>)
 8005a84:	400a      	ands	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4922      	ldr	r1, [pc, #136]	; (8005b1c <HAL_RTC_SetTime+0x184>)
 8005a94:	400a      	ands	r2, r1
 8005a96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2180      	movs	r1, #128	; 0x80
 8005abc:	438a      	bics	r2, r1
 8005abe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d113      	bne.n	8005af4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 fb20 	bl	8006114 <HAL_RTC_WaitForSynchro>
 8005ad4:	1e03      	subs	r3, r0, #0
 8005ad6:	d00d      	beq.n	8005af4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2221      	movs	r2, #33	; 0x21
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	2100      	movs	r1, #0
 8005aee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e00c      	b.n	8005b0e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	22ff      	movs	r2, #255	; 0xff
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2221      	movs	r2, #33	; 0x21
 8005b00:	2101      	movs	r1, #1
 8005b02:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
  }
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b007      	add	sp, #28
 8005b14:	bd90      	pop	{r4, r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	007f7f7f 	.word	0x007f7f7f
 8005b1c:	fffbffff 	.word	0xfffbffff

08005b20 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	045b      	lsls	r3, r3, #17
 8005b3e:	0c5a      	lsrs	r2, r3, #17
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_RTC_GetTime+0xb4>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	223f      	movs	r2, #63	; 0x3f
 8005b58:	4013      	ands	r3, r2
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	227f      	movs	r2, #127	; 0x7f
 8005b68:	4013      	ands	r3, r2
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	227f      	movs	r2, #127	; 0x7f
 8005b76:	4013      	ands	r3, r2
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	0c1b      	lsrs	r3, r3, #16
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2240      	movs	r2, #64	; 0x40
 8005b86:	4013      	ands	r3, r2
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11a      	bne.n	8005bca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fb35 	bl	8006208 <RTC_Bcd2ToByte>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 fb2c 	bl	8006208 <RTC_Bcd2ToByte>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	789b      	ldrb	r3, [r3, #2]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fb23 	bl	8006208 <RTC_Bcd2ToByte>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	001a      	movs	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b006      	add	sp, #24
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	007f7f7f 	.word	0x007f7f7f

08005bd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	5c9b      	ldrb	r3, [r3, r2]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_RTC_SetDate+0x1a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e099      	b.n	8005d26 <HAL_RTC_SetDate+0x14e>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2221      	movs	r2, #33	; 0x21
 8005bfe:	2102      	movs	r1, #2
 8005c00:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10e      	bne.n	8005c26 <HAL_RTC_SetDate+0x4e>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	2310      	movs	r3, #16
 8005c10:	4013      	ands	r3, r2
 8005c12:	d008      	beq.n	8005c26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2210      	movs	r2, #16
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	330a      	adds	r3, #10
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d11c      	bne.n	8005c66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	78db      	ldrb	r3, [r3, #3]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 fac0 	bl	80061b6 <RTC_ByteToBcd2>
 8005c36:	0003      	movs	r3, r0
 8005c38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 fab9 	bl	80061b6 <RTC_ByteToBcd2>
 8005c44:	0003      	movs	r3, r0
 8005c46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	789b      	ldrb	r3, [r3, #2]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 fab1 	bl	80061b6 <RTC_ByteToBcd2>
 8005c54:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c56:	0022      	movs	r2, r4
 8005c58:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e00e      	b.n	8005c84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c72:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	22ca      	movs	r2, #202	; 0xca
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2253      	movs	r2, #83	; 0x53
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 fa63 	bl	8006162 <RTC_EnterInitMode>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d00d      	beq.n	8005cbc <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2221      	movs	r2, #33	; 0x21
 8005cac:	2104      	movs	r1, #4
 8005cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e034      	b.n	8005d26 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	491b      	ldr	r1, [pc, #108]	; (8005d30 <HAL_RTC_SetDate+0x158>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	438a      	bics	r2, r1
 8005cd6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d113      	bne.n	8005d0c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 fa14 	bl	8006114 <HAL_RTC_WaitForSynchro>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d00d      	beq.n	8005d0c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	22ff      	movs	r2, #255	; 0xff
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2221      	movs	r2, #33	; 0x21
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	2100      	movs	r1, #0
 8005d06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e00c      	b.n	8005d26 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	22ff      	movs	r2, #255	; 0xff
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2221      	movs	r2, #33	; 0x21
 8005d18:	2101      	movs	r1, #1
 8005d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	2100      	movs	r1, #0
 8005d22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
  }
}
 8005d26:	0018      	movs	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	b007      	add	sp, #28
 8005d2c:	bd90      	pop	{r4, r7, pc}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	00ffff3f 	.word	0x00ffff3f

08005d34 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_RTC_GetDate+0x98>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	0c1b      	lsrs	r3, r3, #16
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	221f      	movs	r2, #31
 8005d5e:	4013      	ands	r3, r2
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	223f      	movs	r2, #63	; 0x3f
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	0b5b      	lsrs	r3, r3, #13
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2207      	movs	r2, #7
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11a      	bne.n	8005dc0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 fa3a 	bl	8006208 <RTC_Bcd2ToByte>
 8005d94:	0003      	movs	r3, r0
 8005d96:	001a      	movs	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 fa31 	bl	8006208 <RTC_Bcd2ToByte>
 8005da6:	0003      	movs	r3, r0
 8005da8:	001a      	movs	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	789b      	ldrb	r3, [r3, #2]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 fa28 	bl	8006208 <RTC_Bcd2ToByte>
 8005db8:	0003      	movs	r3, r0
 8005dba:	001a      	movs	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b006      	add	sp, #24
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	00ffff3f 	.word	0x00ffff3f

08005dd0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b089      	sub	sp, #36	; 0x24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	5c9b      	ldrb	r3, [r3, r2]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_RTC_SetAlarm_IT+0x1a>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e130      	b.n	800604c <HAL_RTC_SetAlarm_IT+0x27c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2221      	movs	r2, #33	; 0x21
 8005df6:	2102      	movs	r1, #2
 8005df8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d136      	bne.n	8005e6e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2240      	movs	r2, #64	; 0x40
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d102      	bne.n	8005e12 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f000 f9cd 	bl	80061b6 <RTC_ByteToBcd2>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 f9c6 	bl	80061b6 <RTC_ByteToBcd2>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e2e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	789b      	ldrb	r3, [r3, #2]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 f9be 	bl	80061b6 <RTC_ByteToBcd2>
 8005e3a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e3c:	0022      	movs	r2, r4
 8005e3e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	78db      	ldrb	r3, [r3, #3]
 8005e44:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005e46:	431a      	orrs	r2, r3
 8005e48:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	5c9b      	ldrb	r3, [r3, r2]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 f9b0 	bl	80061b6 <RTC_ByteToBcd2>
 8005e56:	0003      	movs	r3, r0
 8005e58:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e5a:	0022      	movs	r2, r4
 8005e5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e022      	b.n	8005eb4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2240      	movs	r2, #64	; 0x40
 8005e76:	4013      	ands	r3, r2
 8005e78:	d102      	bne.n	8005e80 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e8c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	78db      	ldrb	r3, [r3, #3]
 8005e98:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2120      	movs	r1, #32
 8005ea0:	5c5b      	ldrb	r3, [r3, r1]
 8005ea2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ea4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005eaa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	22ca      	movs	r2, #202	; 0xca
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2253      	movs	r2, #83	; 0x53
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d14e      	bne.n	8005f7a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	495b      	ldr	r1, [pc, #364]	; (8006054 <HAL_RTC_SetAlarm_IT+0x284>)
 8005ee8:	400a      	ands	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	401a      	ands	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4957      	ldr	r1, [pc, #348]	; (8006058 <HAL_RTC_SetAlarm_IT+0x288>)
 8005efc:	430a      	orrs	r2, r1
 8005efe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f00:	f7fd ffaa 	bl	8003e58 <HAL_GetTick>
 8005f04:	0003      	movs	r3, r0
 8005f06:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f08:	e016      	b.n	8005f38 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f0a:	f7fd ffa5 	bl	8003e58 <HAL_GetTick>
 8005f0e:	0002      	movs	r2, r0
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	23fa      	movs	r3, #250	; 0xfa
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d90d      	bls.n	8005f38 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2221      	movs	r2, #33	; 0x21
 8005f28:	2103      	movs	r1, #3
 8005f2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	2100      	movs	r1, #0
 8005f32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e089      	b.n	800604c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4013      	ands	r3, r2
 8005f42:	d0e2      	beq.n	8005f0a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	0049      	lsls	r1, r1, #1
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	0149      	lsls	r1, r1, #5
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	e04d      	b.n	8006016 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4935      	ldr	r1, [pc, #212]	; (800605c <HAL_RTC_SetAlarm_IT+0x28c>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	22ff      	movs	r2, #255	; 0xff
 8005f92:	401a      	ands	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4931      	ldr	r1, [pc, #196]	; (8006060 <HAL_RTC_SetAlarm_IT+0x290>)
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f9e:	f7fd ff5b 	bl	8003e58 <HAL_GetTick>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005fa6:	e016      	b.n	8005fd6 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fa8:	f7fd ff56 	bl	8003e58 <HAL_GetTick>
 8005fac:	0002      	movs	r2, r0
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	23fa      	movs	r3, #250	; 0xfa
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90d      	bls.n	8005fd6 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	22ff      	movs	r2, #255	; 0xff
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2221      	movs	r2, #33	; 0x21
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e03a      	b.n	800604c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	4013      	ands	r3, r2
 8005fe0:	d0e2      	beq.n	8005fa8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2180      	movs	r1, #128	; 0x80
 8005ffe:	0089      	lsls	r1, r1, #2
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	0189      	lsls	r1, r1, #6
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006016:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_RTC_SetAlarm_IT+0x294>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <HAL_RTC_SetAlarm_IT+0x294>)
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	0289      	lsls	r1, r1, #10
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <HAL_RTC_SetAlarm_IT+0x294>)
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <HAL_RTC_SetAlarm_IT+0x294>)
 800602a:	2180      	movs	r1, #128	; 0x80
 800602c:	0289      	lsls	r1, r1, #10
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	22ff      	movs	r2, #255	; 0xff
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2221      	movs	r2, #33	; 0x21
 800603e:	2101      	movs	r1, #1
 8006040:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	2100      	movs	r1, #0
 8006048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	b009      	add	sp, #36	; 0x24
 8006052:	bd90      	pop	{r4, r7, pc}
 8006054:	fffffeff 	.word	0xfffffeff
 8006058:	fffffe7f 	.word	0xfffffe7f
 800605c:	fffffdff 	.word	0xfffffdff
 8006060:	fffffd7f 	.word	0xfffffd7f
 8006064:	40010400 	.word	0x40010400

08006068 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	015b      	lsls	r3, r3, #5
 800607a:	4013      	ands	r3, r2
 800607c:	d014      	beq.n	80060a8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d00d      	beq.n	80060a8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	0018      	movs	r0, r3
 8006090:	f000 f838 	bl	8006104 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	22ff      	movs	r2, #255	; 0xff
 800609c:	401a      	ands	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4915      	ldr	r1, [pc, #84]	; (80060f8 <HAL_RTC_AlarmIRQHandler+0x90>)
 80060a4:	430a      	orrs	r2, r1
 80060a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	019b      	lsls	r3, r3, #6
 80060b2:	4013      	ands	r3, r2
 80060b4:	d014      	beq.n	80060e0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4013      	ands	r3, r2
 80060c2:	d00d      	beq.n	80060e0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0018      	movs	r0, r3
 80060c8:	f000 fa0e 	bl	80064e8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	22ff      	movs	r2, #255	; 0xff
 80060d4:	401a      	ands	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4908      	ldr	r1, [pc, #32]	; (80060fc <HAL_RTC_AlarmIRQHandler+0x94>)
 80060dc:	430a      	orrs	r2, r1
 80060de:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <HAL_RTC_AlarmIRQHandler+0x98>)
 80060e2:	2280      	movs	r2, #128	; 0x80
 80060e4:	0292      	lsls	r2, r2, #10
 80060e6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2221      	movs	r2, #33	; 0x21
 80060ec:	2101      	movs	r1, #1
 80060ee:	5499      	strb	r1, [r3, r2]
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b002      	add	sp, #8
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	fffffe7f 	.word	0xfffffe7f
 80060fc:	fffffd7f 	.word	0xfffffd7f
 8006100:	40010400 	.word	0x40010400

08006104 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800610c:	46c0      	nop			; (mov r8, r8)
 800610e:	46bd      	mov	sp, r7
 8006110:	b002      	add	sp, #8
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	21a0      	movs	r1, #160	; 0xa0
 8006128:	438a      	bics	r2, r1
 800612a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800612c:	f7fd fe94 	bl	8003e58 <HAL_GetTick>
 8006130:	0003      	movs	r3, r0
 8006132:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006134:	e00a      	b.n	800614c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006136:	f7fd fe8f 	bl	8003e58 <HAL_GetTick>
 800613a:	0002      	movs	r2, r0
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	23fa      	movs	r3, #250	; 0xfa
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	429a      	cmp	r2, r3
 8006146:	d901      	bls.n	800614c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e006      	b.n	800615a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	4013      	ands	r3, r2
 8006156:	d0ee      	beq.n	8006136 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	0018      	movs	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	b004      	add	sp, #16
 8006160:	bd80      	pop	{r7, pc}

08006162 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2240      	movs	r2, #64	; 0x40
 8006172:	4013      	ands	r3, r2
 8006174:	d11a      	bne.n	80061ac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	4252      	negs	r2, r2
 800617e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006180:	f7fd fe6a 	bl	8003e58 <HAL_GetTick>
 8006184:	0003      	movs	r3, r0
 8006186:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006188:	e00a      	b.n	80061a0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800618a:	f7fd fe65 	bl	8003e58 <HAL_GetTick>
 800618e:	0002      	movs	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	23fa      	movs	r3, #250	; 0xfa
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	429a      	cmp	r2, r3
 800619a:	d901      	bls.n	80061a0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e006      	b.n	80061ae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2240      	movs	r2, #64	; 0x40
 80061a8:	4013      	ands	r3, r2
 80061aa:	d0ee      	beq.n	800618a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b004      	add	sp, #16
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	0002      	movs	r2, r0
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80061c6:	230b      	movs	r3, #11
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	1dfa      	adds	r2, r7, #7
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80061d0:	e008      	b.n	80061e4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80061d8:	220b      	movs	r2, #11
 80061da:	18bb      	adds	r3, r7, r2
 80061dc:	18ba      	adds	r2, r7, r2
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	3a0a      	subs	r2, #10
 80061e2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80061e4:	230b      	movs	r3, #11
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b09      	cmp	r3, #9
 80061ec:	d8f1      	bhi.n	80061d2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	230b      	movs	r3, #11
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	b2db      	uxtb	r3, r3
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b004      	add	sp, #16
 8006206:	bd80      	pop	{r7, pc}

08006208 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	0002      	movs	r2, r0
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006214:	1dfb      	adds	r3, r7, #7
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	b2db      	uxtb	r3, r3
 800621c:	001a      	movs	r2, r3
 800621e:	0013      	movs	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	189b      	adds	r3, r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	1dfb      	adds	r3, r7, #7
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	210f      	movs	r1, #15
 8006232:	400b      	ands	r3, r1
 8006234:	b2db      	uxtb	r3, r3
 8006236:	18d3      	adds	r3, r2, r3
 8006238:	b2db      	uxtb	r3, r3
}
 800623a:	0018      	movs	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	b004      	add	sp, #16
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800625a:	2302      	movs	r3, #2
 800625c:	e0ad      	b.n	80063ba <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	2101      	movs	r1, #1
 8006264:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2221      	movs	r2, #33	; 0x21
 800626a:	2102      	movs	r1, #2
 800626c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	22ca      	movs	r2, #202	; 0xca
 8006274:	625a      	str	r2, [r3, #36]	; 0x24
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2253      	movs	r2, #83	; 0x53
 800627c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4013      	ands	r3, r2
 800628a:	d021      	beq.n	80062d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 800628c:	f7fd fde4 	bl	8003e58 <HAL_GetTick>
 8006290:	0003      	movs	r3, r0
 8006292:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006294:	e016      	b.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006296:	f7fd fddf 	bl	8003e58 <HAL_GetTick>
 800629a:	0002      	movs	r2, r0
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	23fa      	movs	r3, #250	; 0xfa
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d90d      	bls.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	22ff      	movs	r2, #255	; 0xff
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2221      	movs	r2, #33	; 0x21
 80062b4:	2103      	movs	r1, #3
 80062b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	2100      	movs	r1, #0
 80062be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e07a      	b.n	80063ba <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2204      	movs	r2, #4
 80062cc:	4013      	ands	r3, r2
 80062ce:	d1e2      	bne.n	8006296 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	493a      	ldr	r1, [pc, #232]	; (80063c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80062dc:	400a      	ands	r2, r1
 80062de:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	22ff      	movs	r2, #255	; 0xff
 80062e8:	401a      	ands	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4936      	ldr	r1, [pc, #216]	; (80063c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80062f0:	430a      	orrs	r2, r1
 80062f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062f4:	f7fd fdb0 	bl	8003e58 <HAL_GetTick>
 80062f8:	0003      	movs	r3, r0
 80062fa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062fc:	e016      	b.n	800632c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062fe:	f7fd fdab 	bl	8003e58 <HAL_GetTick>
 8006302:	0002      	movs	r2, r0
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	23fa      	movs	r3, #250	; 0xfa
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	429a      	cmp	r2, r3
 800630e:	d90d      	bls.n	800632c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2221      	movs	r2, #33	; 0x21
 800631c:	2103      	movs	r1, #3
 800631e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	2100      	movs	r1, #0
 8006326:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e046      	b.n	80063ba <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2204      	movs	r2, #4
 8006334:	4013      	ands	r3, r2
 8006336:	d0e2      	beq.n	80062fe <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2107      	movs	r1, #7
 800634c:	438a      	bics	r2, r1
 800634e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6899      	ldr	r1, [r3, #8]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	0349      	lsls	r1, r1, #13
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800636e:	4b17      	ldr	r3, [pc, #92]	; (80063cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	0349      	lsls	r1, r1, #13
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	01c9      	lsls	r1, r1, #7
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2180      	movs	r1, #128	; 0x80
 800639a:	00c9      	lsls	r1, r1, #3
 800639c:	430a      	orrs	r2, r1
 800639e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	2101      	movs	r1, #1
 80063ae:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b006      	add	sp, #24
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	fffffbff 	.word	0xfffffbff
 80063c8:	fffffb7f 	.word	0xfffffb7f
 80063cc:	40010400 	.word	0x40010400

080063d0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	5c9b      	ldrb	r3, [r3, r2]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e04e      	b.n	8006484 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	2101      	movs	r1, #1
 80063ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2221      	movs	r2, #33	; 0x21
 80063f2:	2102      	movs	r1, #2
 80063f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	22ca      	movs	r2, #202	; 0xca
 80063fc:	625a      	str	r2, [r3, #36]	; 0x24
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2253      	movs	r2, #83	; 0x53
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	491e      	ldr	r1, [pc, #120]	; (800648c <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8006412:	400a      	ands	r2, r1
 8006414:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	491b      	ldr	r1, [pc, #108]	; (8006490 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8006422:	400a      	ands	r2, r1
 8006424:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006426:	f7fd fd17 	bl	8003e58 <HAL_GetTick>
 800642a:	0003      	movs	r3, r0
 800642c:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800642e:	e016      	b.n	800645e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006430:	f7fd fd12 	bl	8003e58 <HAL_GetTick>
 8006434:	0002      	movs	r2, r0
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1ad2      	subs	r2, r2, r3
 800643a:	23fa      	movs	r3, #250	; 0xfa
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	429a      	cmp	r2, r3
 8006440:	d90d      	bls.n	800645e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	22ff      	movs	r2, #255	; 0xff
 8006448:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2221      	movs	r2, #33	; 0x21
 800644e:	2103      	movs	r1, #3
 8006450:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	2100      	movs	r1, #0
 8006458:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e012      	b.n	8006484 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2204      	movs	r2, #4
 8006466:	4013      	ands	r3, r2
 8006468:	d0e2      	beq.n	8006430 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	22ff      	movs	r2, #255	; 0xff
 8006470:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2221      	movs	r2, #33	; 0x21
 8006476:	2101      	movs	r1, #1
 8006478:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	2100      	movs	r1, #0
 8006480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	0018      	movs	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	b004      	add	sp, #16
 800648a:	bd80      	pop	{r7, pc}
 800648c:	fffffbff 	.word	0xfffffbff
 8006490:	ffffbfff 	.word	0xffffbfff

08006494 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4013      	ands	r3, r2
 80064a8:	d00d      	beq.n	80064c6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f018 fcdb 	bl	801ee68 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	401a      	ands	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4907      	ldr	r1, [pc, #28]	; (80064e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80064c2:	430a      	orrs	r2, r1
 80064c4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80064c8:	2280      	movs	r2, #128	; 0x80
 80064ca:	0352      	lsls	r2, r2, #13
 80064cc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2221      	movs	r2, #33	; 0x21
 80064d2:	2101      	movs	r1, #1
 80064d4:	5499      	strb	r1, [r3, r2]
}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	b002      	add	sp, #8
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	fffffb7f 	.word	0xfffffb7f
 80064e4:	40010400 	.word	0x40010400

080064e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b002      	add	sp, #8
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e059      	b.n	80065be <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2251      	movs	r2, #81	; 0x51
 8006514:	5c9b      	ldrb	r3, [r3, r2]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2250      	movs	r2, #80	; 0x50
 8006520:	2100      	movs	r1, #0
 8006522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	0018      	movs	r0, r3
 8006528:	f7fd f99e 	bl	8003868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2251      	movs	r2, #81	; 0x51
 8006530:	2102      	movs	r1, #2
 8006532:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2140      	movs	r1, #64	; 0x40
 8006540:	438a      	bics	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6999      	ldr	r1, [r3, #24]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	400b      	ands	r3, r1
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	431a      	orrs	r2, r3
 8006578:	0011      	movs	r1, r2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	0c1b      	lsrs	r3, r3, #16
 800658c:	2204      	movs	r2, #4
 800658e:	4013      	ands	r3, r2
 8006590:	0019      	movs	r1, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4907      	ldr	r1, [pc, #28]	; (80065c8 <HAL_SPI_Init+0xd0>)
 80065aa:	400a      	ands	r2, r1
 80065ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2251      	movs	r2, #81	; 0x51
 80065b8:	2101      	movs	r1, #1
 80065ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	0018      	movs	r0, r3
 80065c0:	46bd      	mov	sp, r7
 80065c2:	b002      	add	sp, #8
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	fffff7ff 	.word	0xfffff7ff

080065cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08c      	sub	sp, #48	; 0x30
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	001a      	movs	r2, r3
 80065da:	1cbb      	adds	r3, r7, #2
 80065dc:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065de:	2301      	movs	r3, #1
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065e2:	232b      	movs	r3, #43	; 0x2b
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2250      	movs	r2, #80	; 0x50
 80065ee:	5c9b      	ldrb	r3, [r3, r2]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x2c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e1a1      	b.n	800693c <HAL_SPI_TransmitReceive+0x370>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2250      	movs	r2, #80	; 0x50
 80065fc:	2101      	movs	r1, #1
 80065fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006600:	f7fd fc2a 	bl	8003e58 <HAL_GetTick>
 8006604:	0003      	movs	r3, r0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006608:	2023      	movs	r0, #35	; 0x23
 800660a:	183b      	adds	r3, r7, r0
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	2151      	movs	r1, #81	; 0x51
 8006610:	5c52      	ldrb	r2, [r2, r1]
 8006612:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800661a:	231a      	movs	r3, #26
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	1cba      	adds	r2, r7, #2
 8006620:	8812      	ldrh	r2, [r2, #0]
 8006622:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006624:	183b      	adds	r3, r7, r0
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d012      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x86>
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	2382      	movs	r3, #130	; 0x82
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	429a      	cmp	r2, r3
 8006634:	d108      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x7c>
 800663e:	2323      	movs	r3, #35	; 0x23
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d004      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006648:	232b      	movs	r3, #43	; 0x2b
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2202      	movs	r2, #2
 800664e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006650:	e169      	b.n	8006926 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x9a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x9a>
 800665e:	1cbb      	adds	r3, r7, #2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8006666:	232b      	movs	r3, #43	; 0x2b
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
    goto error;
 800666e:	e15a      	b.n	8006926 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2251      	movs	r2, #81	; 0x51
 8006674:	5c9b      	ldrb	r3, [r3, r2]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b04      	cmp	r3, #4
 800667a:	d003      	beq.n	8006684 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2251      	movs	r2, #81	; 0x51
 8006680:	2105      	movs	r1, #5
 8006682:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1cba      	adds	r2, r7, #2
 8006694:	8812      	ldrh	r2, [r2, #0]
 8006696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1cba      	adds	r2, r7, #2
 800669c:	8812      	ldrh	r2, [r2, #0]
 800669e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1cba      	adds	r2, r7, #2
 80066aa:	8812      	ldrh	r2, [r2, #0]
 80066ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1cba      	adds	r2, r7, #2
 80066b2:	8812      	ldrh	r2, [r2, #0]
 80066b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2240      	movs	r2, #64	; 0x40
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d007      	beq.n	80066e0 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2140      	movs	r1, #64	; 0x40
 80066dc:	430a      	orrs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d000      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x122>
 80066ec:	e07a      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x134>
 80066f6:	231a      	movs	r3, #26
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d166      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006724:	e053      	b.n	80067ce <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2202      	movs	r2, #2
 800672e:	4013      	ands	r3, r2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d11b      	bne.n	800676c <HAL_SPI_TransmitReceive+0x1a0>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <HAL_SPI_TransmitReceive+0x1a0>
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d113      	bne.n	800676c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	881a      	ldrh	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	1c9a      	adds	r2, r3, #2
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2201      	movs	r2, #1
 8006774:	4013      	ands	r3, r2
 8006776:	2b01      	cmp	r3, #1
 8006778:	d119      	bne.n	80067ae <HAL_SPI_TransmitReceive+0x1e2>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d014      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	b292      	uxth	r2, r2
 8006790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	1c9a      	adds	r2, r3, #2
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067aa:	2301      	movs	r3, #1
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ae:	f7fd fb53 	bl	8003e58 <HAL_GetTick>
 80067b2:	0002      	movs	r2, r0
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d807      	bhi.n	80067ce <HAL_SPI_TransmitReceive+0x202>
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	3301      	adds	r3, #1
 80067c2:	d004      	beq.n	80067ce <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80067c4:	232b      	movs	r3, #43	; 0x2b
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	2203      	movs	r2, #3
 80067ca:	701a      	strb	r2, [r3, #0]
        goto error;
 80067cc:	e0ab      	b.n	8006926 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1a6      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x15a>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1a1      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x15a>
 80067e2:	e07f      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x22c>
 80067ec:	231a      	movs	r3, #26
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d000      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x22c>
 80067f6:	e06b      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800681e:	e057      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2202      	movs	r2, #2
 8006828:	4013      	ands	r3, r2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d11c      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x29c>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d017      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x29c>
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d114      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2201      	movs	r2, #1
 8006870:	4013      	ands	r3, r2
 8006872:	2b01      	cmp	r3, #1
 8006874:	d119      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x2de>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d014      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068a6:	2301      	movs	r3, #1
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068aa:	f7fd fad5 	bl	8003e58 <HAL_GetTick>
 80068ae:	0002      	movs	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d802      	bhi.n	80068c0 <HAL_SPI_TransmitReceive+0x2f4>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	3301      	adds	r3, #1
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x2fa>
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80068c6:	232b      	movs	r3, #43	; 0x2b
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	2203      	movs	r2, #3
 80068cc:	701a      	strb	r2, [r3, #0]
        goto error;
 80068ce:	e02a      	b.n	8006926 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1a2      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x254>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d19d      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	0018      	movs	r0, r3
 80068ec:	f000 f89a 	bl	8006a24 <SPI_EndRxTxTransaction>
 80068f0:	1e03      	subs	r3, r0, #0
 80068f2:	d007      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80068f4:	232b      	movs	r3, #43	; 0x2b
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006902:	e010      	b.n	8006926 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	e000      	b.n	8006926 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8006924:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2251      	movs	r2, #81	; 0x51
 800692a:	2101      	movs	r1, #1
 800692c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2250      	movs	r2, #80	; 0x50
 8006932:	2100      	movs	r1, #0
 8006934:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006936:	232b      	movs	r3, #43	; 0x2b
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	781b      	ldrb	r3, [r3, #0]
}
 800693c:	0018      	movs	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	b00c      	add	sp, #48	; 0x30
 8006942:	bd80      	pop	{r7, pc}

08006944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	1dfb      	adds	r3, r7, #7
 8006952:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006954:	e050      	b.n	80069f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	d04d      	beq.n	80069f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800695c:	f7fd fa7c 	bl	8003e58 <HAL_GetTick>
 8006960:	0002      	movs	r2, r0
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d902      	bls.n	8006972 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d142      	bne.n	80069f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	21e0      	movs	r1, #224	; 0xe0
 800697e:	438a      	bics	r2, r1
 8006980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	2382      	movs	r3, #130	; 0x82
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	429a      	cmp	r2, r3
 800698c:	d113      	bne.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x72>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	429a      	cmp	r2, r3
 8006998:	d005      	beq.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	2380      	movs	r3, #128	; 0x80
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d107      	bne.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2140      	movs	r1, #64	; 0x40
 80069b2:	438a      	bics	r2, r1
 80069b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	019b      	lsls	r3, r3, #6
 80069be:	429a      	cmp	r2, r3
 80069c0:	d110      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4914      	ldr	r1, [pc, #80]	; (8006a20 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80069ce:	400a      	ands	r2, r1
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	0189      	lsls	r1, r1, #6
 80069e0:	430a      	orrs	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2251      	movs	r2, #81	; 0x51
 80069e8:	2101      	movs	r1, #1
 80069ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2250      	movs	r2, #80	; 0x50
 80069f0:	2100      	movs	r1, #0
 80069f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e00f      	b.n	8006a18 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	4013      	ands	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	425a      	negs	r2, r3
 8006a08:	4153      	adcs	r3, r2
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	001a      	movs	r2, r3
 8006a0e:	1dfb      	adds	r3, r7, #7
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d19f      	bne.n	8006956 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	0018      	movs	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b004      	add	sp, #16
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	ffffdfff 	.word	0xffffdfff

08006a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	2382      	movs	r3, #130	; 0x82
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d112      	bne.n	8006a62 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	0013      	movs	r3, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	2180      	movs	r1, #128	; 0x80
 8006a4a:	f7ff ff7b 	bl	8006944 <SPI_WaitFlagStateUntilTimeout>
 8006a4e:	1e03      	subs	r3, r0, #0
 8006a50:	d020      	beq.n	8006a94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	2220      	movs	r2, #32
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e019      	b.n	8006a96 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2251      	movs	r2, #81	; 0x51
 8006a66:	5c9b      	ldrb	r3, [r3, r2]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d112      	bne.n	8006a94 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	0013      	movs	r3, r2
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	f7ff ff62 	bl	8006944 <SPI_WaitFlagStateUntilTimeout>
 8006a80:	1e03      	subs	r3, r0, #0
 8006a82:	d007      	beq.n	8006a94 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a88:	2220      	movs	r2, #32
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e000      	b.n	8006a96 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	0018      	movs	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b004      	add	sp, #16
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e044      	b.n	8006b3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2270      	movs	r2, #112	; 0x70
 8006abe:	2100      	movs	r1, #0
 8006ac0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f7fd f8c3 	bl	8003c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2224      	movs	r2, #36	; 0x24
 8006ace:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2101      	movs	r1, #1
 8006adc:	438a      	bics	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f000 fabe 	bl	8007064 <UART_SetConfig>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e024      	b.n	8006b3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	f000 fde5 	bl	80076cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	490d      	ldr	r1, [pc, #52]	; (8006b44 <HAL_UART_Init+0xa4>)
 8006b0e:	400a      	ands	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	212a      	movs	r1, #42	; 0x2a
 8006b1e:	438a      	bics	r2, r1
 8006b20:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fe7d 	bl	8007834 <UART_CheckIdleState>
 8006b3a:	0003      	movs	r3, r0
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b002      	add	sp, #8
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	ffffb7ff 	.word	0xffffb7ff

08006b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	; 0x28
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	1dbb      	adds	r3, r7, #6
 8006b56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d000      	beq.n	8006b62 <HAL_UART_Transmit+0x1a>
 8006b60:	e094      	b.n	8006c8c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <HAL_UART_Transmit+0x28>
 8006b68:	1dbb      	adds	r3, r7, #6
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e08c      	b.n	8006c8e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	015b      	lsls	r3, r3, #5
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d109      	bne.n	8006b94 <HAL_UART_Transmit+0x4c>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	d001      	beq.n	8006b94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e07c      	b.n	8006c8e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2270      	movs	r2, #112	; 0x70
 8006b98:	5c9b      	ldrb	r3, [r3, r2]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_UART_Transmit+0x5a>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e075      	b.n	8006c8e <HAL_UART_Transmit+0x146>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2270      	movs	r2, #112	; 0x70
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2221      	movs	r2, #33	; 0x21
 8006bb4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006bb6:	f7fd f94f 	bl	8003e58 <HAL_GetTick>
 8006bba:	0003      	movs	r3, r0
 8006bbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1dba      	adds	r2, r7, #6
 8006bc2:	2150      	movs	r1, #80	; 0x50
 8006bc4:	8812      	ldrh	r2, [r2, #0]
 8006bc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	1dba      	adds	r2, r7, #6
 8006bcc:	2152      	movs	r1, #82	; 0x52
 8006bce:	8812      	ldrh	r2, [r2, #0]
 8006bd0:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	015b      	lsls	r3, r3, #5
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d108      	bne.n	8006bf0 <HAL_UART_Transmit+0xa8>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e003      	b.n	8006bf8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bf8:	e02c      	b.n	8006c54 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	0013      	movs	r3, r2
 8006c04:	2200      	movs	r2, #0
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	f000 fe5a 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 8006c0c:	1e03      	subs	r3, r0, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e03c      	b.n	8006c8e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	001a      	movs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	05d2      	lsls	r2, r2, #23
 8006c26:	0dd2      	lsrs	r2, r2, #23
 8006c28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	3302      	adds	r3, #2
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	e007      	b.n	8006c42 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2252      	movs	r2, #82	; 0x52
 8006c46:	5a9b      	ldrh	r3, [r3, r2]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b299      	uxth	r1, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2252      	movs	r2, #82	; 0x52
 8006c52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2252      	movs	r2, #82	; 0x52
 8006c58:	5a9b      	ldrh	r3, [r3, r2]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1cc      	bne.n	8006bfa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	0013      	movs	r3, r2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2140      	movs	r1, #64	; 0x40
 8006c6e:	f000 fe27 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 8006c72:	1e03      	subs	r3, r0, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e009      	b.n	8006c8e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2270      	movs	r2, #112	; 0x70
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e000      	b.n	8006c8e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006c8c:	2302      	movs	r3, #2
  }
}
 8006c8e:	0018      	movs	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b008      	add	sp, #32
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	1dbb      	adds	r3, r7, #6
 8006ca4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d000      	beq.n	8006cb0 <HAL_UART_Receive_IT+0x18>
 8006cae:	e09f      	b.n	8006df0 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_UART_Receive_IT+0x26>
 8006cb6:	1dbb      	adds	r3, r7, #6
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e097      	b.n	8006df2 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	015b      	lsls	r3, r3, #5
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d109      	bne.n	8006ce2 <HAL_UART_Receive_IT+0x4a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d001      	beq.n	8006ce2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e087      	b.n	8006df2 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2270      	movs	r2, #112	; 0x70
 8006ce6:	5c9b      	ldrb	r3, [r3, r2]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_UART_Receive_IT+0x58>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e080      	b.n	8006df2 <HAL_UART_Receive_IT+0x15a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2270      	movs	r2, #112	; 0x70
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1dba      	adds	r2, r7, #6
 8006d02:	2158      	movs	r1, #88	; 0x58
 8006d04:	8812      	ldrh	r2, [r2, #0]
 8006d06:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	1dba      	adds	r2, r7, #6
 8006d0c:	215a      	movs	r1, #90	; 0x5a
 8006d0e:	8812      	ldrh	r2, [r2, #0]
 8006d10:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	2380      	movs	r3, #128	; 0x80
 8006d1e:	015b      	lsls	r3, r3, #5
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d10d      	bne.n	8006d40 <HAL_UART_Receive_IT+0xa8>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <HAL_UART_Receive_IT+0x9e>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	225c      	movs	r2, #92	; 0x5c
 8006d30:	4932      	ldr	r1, [pc, #200]	; (8006dfc <HAL_UART_Receive_IT+0x164>)
 8006d32:	5299      	strh	r1, [r3, r2]
 8006d34:	e02e      	b.n	8006d94 <HAL_UART_Receive_IT+0xfc>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	225c      	movs	r2, #92	; 0x5c
 8006d3a:	21ff      	movs	r1, #255	; 0xff
 8006d3c:	5299      	strh	r1, [r3, r2]
 8006d3e:	e029      	b.n	8006d94 <HAL_UART_Receive_IT+0xfc>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10d      	bne.n	8006d64 <HAL_UART_Receive_IT+0xcc>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <HAL_UART_Receive_IT+0xc2>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	225c      	movs	r2, #92	; 0x5c
 8006d54:	21ff      	movs	r1, #255	; 0xff
 8006d56:	5299      	strh	r1, [r3, r2]
 8006d58:	e01c      	b.n	8006d94 <HAL_UART_Receive_IT+0xfc>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	225c      	movs	r2, #92	; 0x5c
 8006d5e:	217f      	movs	r1, #127	; 0x7f
 8006d60:	5299      	strh	r1, [r3, r2]
 8006d62:	e017      	b.n	8006d94 <HAL_UART_Receive_IT+0xfc>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	055b      	lsls	r3, r3, #21
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10d      	bne.n	8006d8c <HAL_UART_Receive_IT+0xf4>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_UART_Receive_IT+0xea>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	225c      	movs	r2, #92	; 0x5c
 8006d7c:	217f      	movs	r1, #127	; 0x7f
 8006d7e:	5299      	strh	r1, [r3, r2]
 8006d80:	e008      	b.n	8006d94 <HAL_UART_Receive_IT+0xfc>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	225c      	movs	r2, #92	; 0x5c
 8006d86:	213f      	movs	r1, #63	; 0x3f
 8006d88:	5299      	strh	r1, [r3, r2]
 8006d8a:	e003      	b.n	8006d94 <HAL_UART_Receive_IT+0xfc>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	225c      	movs	r2, #92	; 0x5c
 8006d90:	2100      	movs	r1, #0
 8006d92:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2222      	movs	r2, #34	; 0x22
 8006d9e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2101      	movs	r1, #1
 8006dac:	430a      	orrs	r2, r1
 8006dae:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	015b      	lsls	r3, r3, #5
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d107      	bne.n	8006dcc <HAL_UART_Receive_IT+0x134>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	; (8006e00 <HAL_UART_Receive_IT+0x168>)
 8006dc8:	661a      	str	r2, [r3, #96]	; 0x60
 8006dca:	e002      	b.n	8006dd2 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <HAL_UART_Receive_IT+0x16c>)
 8006dd0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2270      	movs	r2, #112	; 0x70
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2190      	movs	r1, #144	; 0x90
 8006de6:	0049      	lsls	r1, r1, #1
 8006de8:	430a      	orrs	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	0018      	movs	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b004      	add	sp, #16
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	000001ff 	.word	0x000001ff
 8006e00:	08007ab5 	.word	0x08007ab5
 8006e04:	080079f9 	.word	0x080079f9

08006e08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	220f      	movs	r2, #15
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d112      	bne.n	8006e5c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d00e      	beq.n	8006e5c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2220      	movs	r2, #32
 8006e42:	4013      	ands	r3, r2
 8006e44:	d00a      	beq.n	8006e5c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d100      	bne.n	8006e50 <HAL_UART_IRQHandler+0x48>
 8006e4e:	e0f6      	b.n	800703e <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	0010      	movs	r0, r2
 8006e58:	4798      	blx	r3
      }
      return;
 8006e5a:	e0f0      	b.n	800703e <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d100      	bne.n	8006e64 <HAL_UART_IRQHandler+0x5c>
 8006e62:	e0b8      	b.n	8006fd6 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2201      	movs	r2, #1
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d105      	bne.n	8006e78 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	2390      	movs	r3, #144	; 0x90
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	4013      	ands	r3, r2
 8006e74:	d100      	bne.n	8006e78 <HAL_UART_IRQHandler+0x70>
 8006e76:	e0ae      	b.n	8006fd6 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_UART_IRQHandler+0x96>
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	2380      	movs	r3, #128	; 0x80
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	4013      	ands	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e96:	2201      	movs	r2, #1
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d00d      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xba>
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eba:	2204      	movs	r2, #4
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d00d      	beq.n	8006ee6 <HAL_UART_IRQHandler+0xde>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	2202      	movs	r2, #2
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	4013      	ands	r3, r2
 8006eec:	d011      	beq.n	8006f12 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d103      	bne.n	8006efe <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006efc:	d009      	beq.n	8006f12 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2208      	movs	r2, #8
 8006f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d100      	bne.n	8006f1c <HAL_UART_IRQHandler+0x114>
 8006f1a:	e092      	b.n	8007042 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	4013      	ands	r3, r2
 8006f22:	d00c      	beq.n	8006f3e <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2220      	movs	r2, #32
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d008      	beq.n	8006f3e <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	0010      	movs	r0, r2
 8006f3c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f42:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2240      	movs	r2, #64	; 0x40
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d003      	beq.n	8006f5a <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2208      	movs	r2, #8
 8006f56:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f58:	d033      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f000 fcf9 	bl	8007954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	2240      	movs	r2, #64	; 0x40
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d123      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2140      	movs	r1, #64	; 0x40
 8006f7c:	438a      	bics	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	4a30      	ldr	r2, [pc, #192]	; (8007050 <HAL_UART_IRQHandler+0x248>)
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7fd faf7 	bl	8004588 <HAL_DMA_Abort_IT>
 8006f9a:	1e03      	subs	r3, r0, #0
 8006f9c:	d019      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa8:	0018      	movs	r0, r3
 8006faa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	e011      	b.n	8006fd2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f017 fa5f 	bl	801e474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb6:	e00c      	b.n	8006fd2 <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f017 fa5a 	bl	801e474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	e007      	b.n	8006fd2 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f017 fa55 	bl	801e474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006fd0:	e037      	b.n	8007042 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd2:	46c0      	nop			; (mov r8, r8)
    return;
 8006fd4:	e035      	b.n	8007042 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	035b      	lsls	r3, r3, #13
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_UART_IRQHandler+0x1f6>
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	2380      	movs	r3, #128	; 0x80
 8006fe4:	03db      	lsls	r3, r3, #15
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	0352      	lsls	r2, r2, #13
 8006ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f017 fd64 	bl	801eac4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ffc:	e024      	b.n	8007048 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	2280      	movs	r2, #128	; 0x80
 8007002:	4013      	ands	r3, r2
 8007004:	d00d      	beq.n	8007022 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2280      	movs	r2, #128	; 0x80
 800700a:	4013      	ands	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	0010      	movs	r0, r2
 800701e:	4798      	blx	r3
    }
    return;
 8007020:	e011      	b.n	8007046 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	2240      	movs	r2, #64	; 0x40
 8007026:	4013      	ands	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_UART_IRQHandler+0x240>
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2240      	movs	r2, #64	; 0x40
 800702e:	4013      	ands	r3, r2
 8007030:	d00a      	beq.n	8007048 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	0018      	movs	r0, r3
 8007036:	f000 fcc4 	bl	80079c2 <UART_EndTransmit_IT>
    return;
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	e004      	b.n	8007048 <HAL_UART_IRQHandler+0x240>
      return;
 800703e:	46c0      	nop			; (mov r8, r8)
 8007040:	e002      	b.n	8007048 <HAL_UART_IRQHandler+0x240>
    return;
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	e000      	b.n	8007048 <HAL_UART_IRQHandler+0x240>
    return;
 8007046:	46c0      	nop			; (mov r8, r8)
  }

}
 8007048:	46bd      	mov	sp, r7
 800704a:	b008      	add	sp, #32
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	08007995 	.word	0x08007995

08007054 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800705c:	46c0      	nop			; (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}

08007064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	b5b0      	push	{r4, r5, r7, lr}
 8007066:	b08e      	sub	sp, #56	; 0x38
 8007068:	af00      	add	r7, sp, #0
 800706a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800706c:	231b      	movs	r3, #27
 800706e:	2218      	movs	r2, #24
 8007070:	4694      	mov	ip, r2
 8007072:	44bc      	add	ip, r7
 8007074:	4463      	add	r3, ip
 8007076:	2210      	movs	r2, #16
 8007078:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800707a:	2300      	movs	r3, #0
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800707e:	2313      	movs	r3, #19
 8007080:	2218      	movs	r2, #24
 8007082:	4694      	mov	ip, r2
 8007084:	44bc      	add	ip, r7
 8007086:	4463      	add	r3, ip
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800708c:	2300      	movs	r3, #0
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	431a      	orrs	r2, r3
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	431a      	orrs	r2, r3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4aca      	ldr	r2, [pc, #808]	; (80073d8 <UART_SetConfig+0x374>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	0019      	movs	r1, r3
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ba:	430a      	orrs	r2, r1
 80070bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4ac5      	ldr	r2, [pc, #788]	; (80073dc <UART_SetConfig+0x378>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	0019      	movs	r1, r3
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4abf      	ldr	r2, [pc, #764]	; (80073e0 <UART_SetConfig+0x37c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ec:	4313      	orrs	r3, r2
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	4abb      	ldr	r2, [pc, #748]	; (80073e4 <UART_SetConfig+0x380>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	0019      	movs	r1, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007102:	430a      	orrs	r2, r1
 8007104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4ab7      	ldr	r2, [pc, #732]	; (80073e8 <UART_SetConfig+0x384>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d134      	bne.n	800717a <UART_SetConfig+0x116>
 8007110:	4bb6      	ldr	r3, [pc, #728]	; (80073ec <UART_SetConfig+0x388>)
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	2203      	movs	r2, #3
 8007116:	4013      	ands	r3, r2
 8007118:	2b01      	cmp	r3, #1
 800711a:	d015      	beq.n	8007148 <UART_SetConfig+0xe4>
 800711c:	d304      	bcc.n	8007128 <UART_SetConfig+0xc4>
 800711e:	2b02      	cmp	r3, #2
 8007120:	d00a      	beq.n	8007138 <UART_SetConfig+0xd4>
 8007122:	2b03      	cmp	r3, #3
 8007124:	d018      	beq.n	8007158 <UART_SetConfig+0xf4>
 8007126:	e01f      	b.n	8007168 <UART_SetConfig+0x104>
 8007128:	231b      	movs	r3, #27
 800712a:	2218      	movs	r2, #24
 800712c:	4694      	mov	ip, r2
 800712e:	44bc      	add	ip, r7
 8007130:	4463      	add	r3, ip
 8007132:	2201      	movs	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e0c5      	b.n	80072c4 <UART_SetConfig+0x260>
 8007138:	231b      	movs	r3, #27
 800713a:	2218      	movs	r2, #24
 800713c:	4694      	mov	ip, r2
 800713e:	44bc      	add	ip, r7
 8007140:	4463      	add	r3, ip
 8007142:	2202      	movs	r2, #2
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e0bd      	b.n	80072c4 <UART_SetConfig+0x260>
 8007148:	231b      	movs	r3, #27
 800714a:	2218      	movs	r2, #24
 800714c:	4694      	mov	ip, r2
 800714e:	44bc      	add	ip, r7
 8007150:	4463      	add	r3, ip
 8007152:	2204      	movs	r2, #4
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e0b5      	b.n	80072c4 <UART_SetConfig+0x260>
 8007158:	231b      	movs	r3, #27
 800715a:	2218      	movs	r2, #24
 800715c:	4694      	mov	ip, r2
 800715e:	44bc      	add	ip, r7
 8007160:	4463      	add	r3, ip
 8007162:	2208      	movs	r2, #8
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	e0ad      	b.n	80072c4 <UART_SetConfig+0x260>
 8007168:	231b      	movs	r3, #27
 800716a:	2218      	movs	r2, #24
 800716c:	4694      	mov	ip, r2
 800716e:	44bc      	add	ip, r7
 8007170:	4463      	add	r3, ip
 8007172:	2210      	movs	r2, #16
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	e0a4      	b.n	80072c4 <UART_SetConfig+0x260>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a9c      	ldr	r2, [pc, #624]	; (80073f0 <UART_SetConfig+0x38c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d137      	bne.n	80071f4 <UART_SetConfig+0x190>
 8007184:	4b99      	ldr	r3, [pc, #612]	; (80073ec <UART_SetConfig+0x388>)
 8007186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007188:	220c      	movs	r2, #12
 800718a:	4013      	ands	r3, r2
 800718c:	2b04      	cmp	r3, #4
 800718e:	d018      	beq.n	80071c2 <UART_SetConfig+0x15e>
 8007190:	d802      	bhi.n	8007198 <UART_SetConfig+0x134>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <UART_SetConfig+0x13e>
 8007196:	e024      	b.n	80071e2 <UART_SetConfig+0x17e>
 8007198:	2b08      	cmp	r3, #8
 800719a:	d00a      	beq.n	80071b2 <UART_SetConfig+0x14e>
 800719c:	2b0c      	cmp	r3, #12
 800719e:	d018      	beq.n	80071d2 <UART_SetConfig+0x16e>
 80071a0:	e01f      	b.n	80071e2 <UART_SetConfig+0x17e>
 80071a2:	231b      	movs	r3, #27
 80071a4:	2218      	movs	r2, #24
 80071a6:	4694      	mov	ip, r2
 80071a8:	44bc      	add	ip, r7
 80071aa:	4463      	add	r3, ip
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e088      	b.n	80072c4 <UART_SetConfig+0x260>
 80071b2:	231b      	movs	r3, #27
 80071b4:	2218      	movs	r2, #24
 80071b6:	4694      	mov	ip, r2
 80071b8:	44bc      	add	ip, r7
 80071ba:	4463      	add	r3, ip
 80071bc:	2202      	movs	r2, #2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	e080      	b.n	80072c4 <UART_SetConfig+0x260>
 80071c2:	231b      	movs	r3, #27
 80071c4:	2218      	movs	r2, #24
 80071c6:	4694      	mov	ip, r2
 80071c8:	44bc      	add	ip, r7
 80071ca:	4463      	add	r3, ip
 80071cc:	2204      	movs	r2, #4
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e078      	b.n	80072c4 <UART_SetConfig+0x260>
 80071d2:	231b      	movs	r3, #27
 80071d4:	2218      	movs	r2, #24
 80071d6:	4694      	mov	ip, r2
 80071d8:	44bc      	add	ip, r7
 80071da:	4463      	add	r3, ip
 80071dc:	2208      	movs	r2, #8
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e070      	b.n	80072c4 <UART_SetConfig+0x260>
 80071e2:	231b      	movs	r3, #27
 80071e4:	2218      	movs	r2, #24
 80071e6:	4694      	mov	ip, r2
 80071e8:	44bc      	add	ip, r7
 80071ea:	4463      	add	r3, ip
 80071ec:	2210      	movs	r2, #16
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	46c0      	nop			; (mov r8, r8)
 80071f2:	e067      	b.n	80072c4 <UART_SetConfig+0x260>
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a7e      	ldr	r2, [pc, #504]	; (80073f4 <UART_SetConfig+0x390>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d107      	bne.n	800720e <UART_SetConfig+0x1aa>
 80071fe:	231b      	movs	r3, #27
 8007200:	2218      	movs	r2, #24
 8007202:	4694      	mov	ip, r2
 8007204:	44bc      	add	ip, r7
 8007206:	4463      	add	r3, ip
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e05a      	b.n	80072c4 <UART_SetConfig+0x260>
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a79      	ldr	r2, [pc, #484]	; (80073f8 <UART_SetConfig+0x394>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d107      	bne.n	8007228 <UART_SetConfig+0x1c4>
 8007218:	231b      	movs	r3, #27
 800721a:	2218      	movs	r2, #24
 800721c:	4694      	mov	ip, r2
 800721e:	44bc      	add	ip, r7
 8007220:	4463      	add	r3, ip
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e04d      	b.n	80072c4 <UART_SetConfig+0x260>
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a6c      	ldr	r2, [pc, #432]	; (80073e0 <UART_SetConfig+0x37c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d141      	bne.n	80072b6 <UART_SetConfig+0x252>
 8007232:	4b6e      	ldr	r3, [pc, #440]	; (80073ec <UART_SetConfig+0x388>)
 8007234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007236:	23c0      	movs	r3, #192	; 0xc0
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	4013      	ands	r3, r2
 800723c:	2280      	movs	r2, #128	; 0x80
 800723e:	00d2      	lsls	r2, r2, #3
 8007240:	4293      	cmp	r3, r2
 8007242:	d01f      	beq.n	8007284 <UART_SetConfig+0x220>
 8007244:	2280      	movs	r2, #128	; 0x80
 8007246:	00d2      	lsls	r2, r2, #3
 8007248:	4293      	cmp	r3, r2
 800724a:	d802      	bhi.n	8007252 <UART_SetConfig+0x1ee>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <UART_SetConfig+0x200>
 8007250:	e028      	b.n	80072a4 <UART_SetConfig+0x240>
 8007252:	2280      	movs	r2, #128	; 0x80
 8007254:	0112      	lsls	r2, r2, #4
 8007256:	4293      	cmp	r3, r2
 8007258:	d00c      	beq.n	8007274 <UART_SetConfig+0x210>
 800725a:	22c0      	movs	r2, #192	; 0xc0
 800725c:	0112      	lsls	r2, r2, #4
 800725e:	4293      	cmp	r3, r2
 8007260:	d018      	beq.n	8007294 <UART_SetConfig+0x230>
 8007262:	e01f      	b.n	80072a4 <UART_SetConfig+0x240>
 8007264:	231b      	movs	r3, #27
 8007266:	2218      	movs	r2, #24
 8007268:	4694      	mov	ip, r2
 800726a:	44bc      	add	ip, r7
 800726c:	4463      	add	r3, ip
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e027      	b.n	80072c4 <UART_SetConfig+0x260>
 8007274:	231b      	movs	r3, #27
 8007276:	2218      	movs	r2, #24
 8007278:	4694      	mov	ip, r2
 800727a:	44bc      	add	ip, r7
 800727c:	4463      	add	r3, ip
 800727e:	2202      	movs	r2, #2
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	e01f      	b.n	80072c4 <UART_SetConfig+0x260>
 8007284:	231b      	movs	r3, #27
 8007286:	2218      	movs	r2, #24
 8007288:	4694      	mov	ip, r2
 800728a:	44bc      	add	ip, r7
 800728c:	4463      	add	r3, ip
 800728e:	2204      	movs	r2, #4
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e017      	b.n	80072c4 <UART_SetConfig+0x260>
 8007294:	231b      	movs	r3, #27
 8007296:	2218      	movs	r2, #24
 8007298:	4694      	mov	ip, r2
 800729a:	44bc      	add	ip, r7
 800729c:	4463      	add	r3, ip
 800729e:	2208      	movs	r2, #8
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	e00f      	b.n	80072c4 <UART_SetConfig+0x260>
 80072a4:	231b      	movs	r3, #27
 80072a6:	2218      	movs	r2, #24
 80072a8:	4694      	mov	ip, r2
 80072aa:	44bc      	add	ip, r7
 80072ac:	4463      	add	r3, ip
 80072ae:	2210      	movs	r2, #16
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	e006      	b.n	80072c4 <UART_SetConfig+0x260>
 80072b6:	231b      	movs	r3, #27
 80072b8:	2218      	movs	r2, #24
 80072ba:	4694      	mov	ip, r2
 80072bc:	44bc      	add	ip, r7
 80072be:	4463      	add	r3, ip
 80072c0:	2210      	movs	r2, #16
 80072c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a45      	ldr	r2, [pc, #276]	; (80073e0 <UART_SetConfig+0x37c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d000      	beq.n	80072d0 <UART_SetConfig+0x26c>
 80072ce:	e09d      	b.n	800740c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072d0:	231b      	movs	r3, #27
 80072d2:	2218      	movs	r2, #24
 80072d4:	4694      	mov	ip, r2
 80072d6:	44bc      	add	ip, r7
 80072d8:	4463      	add	r3, ip
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d00d      	beq.n	80072fc <UART_SetConfig+0x298>
 80072e0:	dc02      	bgt.n	80072e8 <UART_SetConfig+0x284>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <UART_SetConfig+0x28e>
 80072e6:	e01d      	b.n	8007324 <UART_SetConfig+0x2c0>
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d012      	beq.n	8007312 <UART_SetConfig+0x2ae>
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d015      	beq.n	800731c <UART_SetConfig+0x2b8>
 80072f0:	e018      	b.n	8007324 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80072f2:	f7fe f92f 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80072f6:	0003      	movs	r3, r0
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072fa:	e01b      	b.n	8007334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072fc:	4b3b      	ldr	r3, [pc, #236]	; (80073ec <UART_SetConfig+0x388>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2210      	movs	r2, #16
 8007302:	4013      	ands	r3, r2
 8007304:	d002      	beq.n	800730c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8007306:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <UART_SetConfig+0x398>)
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800730a:	e013      	b.n	8007334 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800730c:	4b3c      	ldr	r3, [pc, #240]	; (8007400 <UART_SetConfig+0x39c>)
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007310:	e010      	b.n	8007334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007312:	f7fe f891 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8007316:	0003      	movs	r3, r0
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800731a:	e00b      	b.n	8007334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007322:	e007      	b.n	8007334 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007324:	2313      	movs	r3, #19
 8007326:	2218      	movs	r2, #24
 8007328:	4694      	mov	ip, r2
 800732a:	44bc      	add	ip, r7
 800732c:	4463      	add	r3, ip
 800732e:	2201      	movs	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
        break;
 8007332:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	d100      	bne.n	800733c <UART_SetConfig+0x2d8>
 800733a:	e1a6      	b.n	800768a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	0013      	movs	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	189b      	adds	r3, r3, r2
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	429a      	cmp	r2, r3
 800734a:	d305      	bcc.n	8007358 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007354:	429a      	cmp	r2, r3
 8007356:	d907      	bls.n	8007368 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8007358:	2313      	movs	r3, #19
 800735a:	2218      	movs	r2, #24
 800735c:	4694      	mov	ip, r2
 800735e:	44bc      	add	ip, r7
 8007360:	4463      	add	r3, ip
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	e190      	b.n	800768a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	000b      	movs	r3, r1
 8007376:	0e1b      	lsrs	r3, r3, #24
 8007378:	0010      	movs	r0, r2
 800737a:	0205      	lsls	r5, r0, #8
 800737c:	431d      	orrs	r5, r3
 800737e:	000b      	movs	r3, r1
 8007380:	021c      	lsls	r4, r3, #8
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	68b8      	ldr	r0, [r7, #8]
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	1900      	adds	r0, r0, r4
 8007394:	4169      	adcs	r1, r5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f7f9 f890 	bl	80004c8 <__aeabi_uldivmod>
 80073a8:	0003      	movs	r3, r0
 80073aa:	000c      	movs	r4, r1
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	4a14      	ldr	r2, [pc, #80]	; (8007404 <UART_SetConfig+0x3a0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d908      	bls.n	80073c8 <UART_SetConfig+0x364>
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	4a13      	ldr	r2, [pc, #76]	; (8007408 <UART_SetConfig+0x3a4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d804      	bhi.n	80073c8 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	e160      	b.n	800768a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80073c8:	2313      	movs	r3, #19
 80073ca:	2218      	movs	r2, #24
 80073cc:	4694      	mov	ip, r2
 80073ce:	44bc      	add	ip, r7
 80073d0:	4463      	add	r3, ip
 80073d2:	2201      	movs	r2, #1
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e158      	b.n	800768a <UART_SetConfig+0x626>
 80073d8:	efff69f3 	.word	0xefff69f3
 80073dc:	ffffcfff 	.word	0xffffcfff
 80073e0:	40004800 	.word	0x40004800
 80073e4:	fffff4ff 	.word	0xfffff4ff
 80073e8:	40013800 	.word	0x40013800
 80073ec:	40021000 	.word	0x40021000
 80073f0:	40004400 	.word	0x40004400
 80073f4:	40004c00 	.word	0x40004c00
 80073f8:	40005000 	.word	0x40005000
 80073fc:	003d0900 	.word	0x003d0900
 8007400:	00f42400 	.word	0x00f42400
 8007404:	000002ff 	.word	0x000002ff
 8007408:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	2380      	movs	r3, #128	; 0x80
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	429a      	cmp	r2, r3
 8007416:	d000      	beq.n	800741a <UART_SetConfig+0x3b6>
 8007418:	e0a9      	b.n	800756e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800741a:	231b      	movs	r3, #27
 800741c:	2218      	movs	r2, #24
 800741e:	4694      	mov	ip, r2
 8007420:	44bc      	add	ip, r7
 8007422:	4463      	add	r3, ip
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b08      	cmp	r3, #8
 8007428:	d86d      	bhi.n	8007506 <UART_SetConfig+0x4a2>
 800742a:	009a      	lsls	r2, r3, #2
 800742c:	4b9f      	ldr	r3, [pc, #636]	; (80076ac <UART_SetConfig+0x648>)
 800742e:	18d3      	adds	r3, r2, r3
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007434:	f7fe f88e 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8007438:	0003      	movs	r3, r0
 800743a:	005a      	lsls	r2, r3, #1
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	18d2      	adds	r2, r2, r3
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	0019      	movs	r1, r3
 800744a:	0010      	movs	r0, r2
 800744c:	f7f8 fe64 	bl	8000118 <__udivsi3>
 8007450:	0003      	movs	r3, r0
 8007452:	b29b      	uxth	r3, r3
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007456:	e05e      	b.n	8007516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007458:	f7fe f892 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 800745c:	0003      	movs	r3, r0
 800745e:	005a      	lsls	r2, r3, #1
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	18d2      	adds	r2, r2, r3
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	0019      	movs	r1, r3
 800746e:	0010      	movs	r0, r2
 8007470:	f7f8 fe52 	bl	8000118 <__udivsi3>
 8007474:	0003      	movs	r3, r0
 8007476:	b29b      	uxth	r3, r3
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800747a:	e04c      	b.n	8007516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800747c:	4b8c      	ldr	r3, [pc, #560]	; (80076b0 <UART_SetConfig+0x64c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2210      	movs	r2, #16
 8007482:	4013      	ands	r3, r2
 8007484:	d00e      	beq.n	80074a4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	4a89      	ldr	r2, [pc, #548]	; (80076b4 <UART_SetConfig+0x650>)
 800748e:	189a      	adds	r2, r3, r2
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	0019      	movs	r1, r3
 8007496:	0010      	movs	r0, r2
 8007498:	f7f8 fe3e 	bl	8000118 <__udivsi3>
 800749c:	0003      	movs	r3, r0
 800749e:	b29b      	uxth	r3, r3
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80074a2:	e038      	b.n	8007516 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	4a83      	ldr	r2, [pc, #524]	; (80076b8 <UART_SetConfig+0x654>)
 80074ac:	189a      	adds	r2, r3, r2
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	0019      	movs	r1, r3
 80074b4:	0010      	movs	r0, r2
 80074b6:	f7f8 fe2f 	bl	8000118 <__udivsi3>
 80074ba:	0003      	movs	r3, r0
 80074bc:	b29b      	uxth	r3, r3
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074c0:	e029      	b.n	8007516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80074c2:	f7fd ffb9 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 80074c6:	0003      	movs	r3, r0
 80074c8:	005a      	lsls	r2, r3, #1
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	18d2      	adds	r2, r2, r3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	0019      	movs	r1, r3
 80074d8:	0010      	movs	r0, r2
 80074da:	f7f8 fe1d 	bl	8000118 <__udivsi3>
 80074de:	0003      	movs	r3, r0
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074e4:	e017      	b.n	8007516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	2280      	movs	r2, #128	; 0x80
 80074ee:	0252      	lsls	r2, r2, #9
 80074f0:	189a      	adds	r2, r3, r2
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	0019      	movs	r1, r3
 80074f8:	0010      	movs	r0, r2
 80074fa:	f7f8 fe0d 	bl	8000118 <__udivsi3>
 80074fe:	0003      	movs	r3, r0
 8007500:	b29b      	uxth	r3, r3
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007504:	e007      	b.n	8007516 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007506:	2313      	movs	r3, #19
 8007508:	2218      	movs	r2, #24
 800750a:	4694      	mov	ip, r2
 800750c:	44bc      	add	ip, r7
 800750e:	4463      	add	r3, ip
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
        break;
 8007514:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	2b0f      	cmp	r3, #15
 800751a:	d920      	bls.n	800755e <UART_SetConfig+0x4fa>
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	4a67      	ldr	r2, [pc, #412]	; (80076bc <UART_SetConfig+0x658>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d81c      	bhi.n	800755e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	b29a      	uxth	r2, r3
 8007528:	200a      	movs	r0, #10
 800752a:	2418      	movs	r4, #24
 800752c:	193b      	adds	r3, r7, r4
 800752e:	181b      	adds	r3, r3, r0
 8007530:	210f      	movs	r1, #15
 8007532:	438a      	bics	r2, r1
 8007534:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	b29b      	uxth	r3, r3
 800753c:	2207      	movs	r2, #7
 800753e:	4013      	ands	r3, r2
 8007540:	b299      	uxth	r1, r3
 8007542:	193b      	adds	r3, r7, r4
 8007544:	181b      	adds	r3, r3, r0
 8007546:	193a      	adds	r2, r7, r4
 8007548:	1812      	adds	r2, r2, r0
 800754a:	8812      	ldrh	r2, [r2, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	193a      	adds	r2, r7, r4
 8007556:	1812      	adds	r2, r2, r0
 8007558:	8812      	ldrh	r2, [r2, #0]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	e095      	b.n	800768a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800755e:	2313      	movs	r3, #19
 8007560:	2218      	movs	r2, #24
 8007562:	4694      	mov	ip, r2
 8007564:	44bc      	add	ip, r7
 8007566:	4463      	add	r3, ip
 8007568:	2201      	movs	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	e08d      	b.n	800768a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800756e:	231b      	movs	r3, #27
 8007570:	2218      	movs	r2, #24
 8007572:	4694      	mov	ip, r2
 8007574:	44bc      	add	ip, r7
 8007576:	4463      	add	r3, ip
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b08      	cmp	r3, #8
 800757c:	d86a      	bhi.n	8007654 <UART_SetConfig+0x5f0>
 800757e:	009a      	lsls	r2, r3, #2
 8007580:	4b4f      	ldr	r3, [pc, #316]	; (80076c0 <UART_SetConfig+0x65c>)
 8007582:	18d3      	adds	r3, r2, r3
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007588:	f7fd ffe4 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 800758c:	0002      	movs	r2, r0
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	18d2      	adds	r2, r2, r3
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	0019      	movs	r1, r3
 800759c:	0010      	movs	r0, r2
 800759e:	f7f8 fdbb 	bl	8000118 <__udivsi3>
 80075a2:	0003      	movs	r3, r0
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075a8:	e05c      	b.n	8007664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80075aa:	f7fd ffe9 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 80075ae:	0002      	movs	r2, r0
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	18d2      	adds	r2, r2, r3
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	0019      	movs	r1, r3
 80075be:	0010      	movs	r0, r2
 80075c0:	f7f8 fdaa 	bl	8000118 <__udivsi3>
 80075c4:	0003      	movs	r3, r0
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ca:	e04b      	b.n	8007664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075cc:	4b38      	ldr	r3, [pc, #224]	; (80076b0 <UART_SetConfig+0x64c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2210      	movs	r2, #16
 80075d2:	4013      	ands	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	085b      	lsrs	r3, r3, #1
 80075dc:	4a39      	ldr	r2, [pc, #228]	; (80076c4 <UART_SetConfig+0x660>)
 80075de:	189a      	adds	r2, r3, r2
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	0019      	movs	r1, r3
 80075e6:	0010      	movs	r0, r2
 80075e8:	f7f8 fd96 	bl	8000118 <__udivsi3>
 80075ec:	0003      	movs	r3, r0
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80075f2:	e037      	b.n	8007664 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	4a33      	ldr	r2, [pc, #204]	; (80076c8 <UART_SetConfig+0x664>)
 80075fc:	189a      	adds	r2, r3, r2
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	0019      	movs	r1, r3
 8007604:	0010      	movs	r0, r2
 8007606:	f7f8 fd87 	bl	8000118 <__udivsi3>
 800760a:	0003      	movs	r3, r0
 800760c:	b29b      	uxth	r3, r3
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007610:	e028      	b.n	8007664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007612:	f7fd ff11 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 8007616:	0002      	movs	r2, r0
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	18d2      	adds	r2, r2, r3
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	0019      	movs	r1, r3
 8007626:	0010      	movs	r0, r2
 8007628:	f7f8 fd76 	bl	8000118 <__udivsi3>
 800762c:	0003      	movs	r3, r0
 800762e:	b29b      	uxth	r3, r3
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007632:	e017      	b.n	8007664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	085b      	lsrs	r3, r3, #1
 800763a:	2280      	movs	r2, #128	; 0x80
 800763c:	0212      	lsls	r2, r2, #8
 800763e:	189a      	adds	r2, r3, r2
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	0019      	movs	r1, r3
 8007646:	0010      	movs	r0, r2
 8007648:	f7f8 fd66 	bl	8000118 <__udivsi3>
 800764c:	0003      	movs	r3, r0
 800764e:	b29b      	uxth	r3, r3
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007652:	e007      	b.n	8007664 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007654:	2313      	movs	r3, #19
 8007656:	2218      	movs	r2, #24
 8007658:	4694      	mov	ip, r2
 800765a:	44bc      	add	ip, r7
 800765c:	4463      	add	r3, ip
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
        break;
 8007662:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	2b0f      	cmp	r3, #15
 8007668:	d908      	bls.n	800767c <UART_SetConfig+0x618>
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	4a13      	ldr	r2, [pc, #76]	; (80076bc <UART_SetConfig+0x658>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d804      	bhi.n	800767c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	e006      	b.n	800768a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800767c:	2313      	movs	r3, #19
 800767e:	2218      	movs	r2, #24
 8007680:	4694      	mov	ip, r2
 8007682:	44bc      	add	ip, r7
 8007684:	4463      	add	r3, ip
 8007686:	2201      	movs	r2, #1
 8007688:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	2200      	movs	r2, #0
 800768e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	2200      	movs	r2, #0
 8007694:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007696:	2313      	movs	r3, #19
 8007698:	2218      	movs	r2, #24
 800769a:	4694      	mov	ip, r2
 800769c:	44bc      	add	ip, r7
 800769e:	4463      	add	r3, ip
 80076a0:	781b      	ldrb	r3, [r3, #0]
}
 80076a2:	0018      	movs	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b00e      	add	sp, #56	; 0x38
 80076a8:	bdb0      	pop	{r4, r5, r7, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	08021398 	.word	0x08021398
 80076b0:	40021000 	.word	0x40021000
 80076b4:	007a1200 	.word	0x007a1200
 80076b8:	01e84800 	.word	0x01e84800
 80076bc:	0000ffff 	.word	0x0000ffff
 80076c0:	080213bc 	.word	0x080213bc
 80076c4:	003d0900 	.word	0x003d0900
 80076c8:	00f42400 	.word	0x00f42400

080076cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2201      	movs	r2, #1
 80076da:	4013      	ands	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	4a4a      	ldr	r2, [pc, #296]	; (8007810 <UART_AdvFeatureConfig+0x144>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	0019      	movs	r1, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2202      	movs	r2, #2
 80076fc:	4013      	ands	r3, r2
 80076fe:	d00b      	beq.n	8007718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	4a43      	ldr	r2, [pc, #268]	; (8007814 <UART_AdvFeatureConfig+0x148>)
 8007708:	4013      	ands	r3, r2
 800770a:	0019      	movs	r1, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2204      	movs	r2, #4
 800771e:	4013      	ands	r3, r2
 8007720:	d00b      	beq.n	800773a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <UART_AdvFeatureConfig+0x14c>)
 800772a:	4013      	ands	r3, r2
 800772c:	0019      	movs	r1, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2208      	movs	r2, #8
 8007740:	4013      	ands	r3, r2
 8007742:	d00b      	beq.n	800775c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	4a34      	ldr	r2, [pc, #208]	; (800781c <UART_AdvFeatureConfig+0x150>)
 800774c:	4013      	ands	r3, r2
 800774e:	0019      	movs	r1, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2210      	movs	r2, #16
 8007762:	4013      	ands	r3, r2
 8007764:	d00b      	beq.n	800777e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4a2c      	ldr	r2, [pc, #176]	; (8007820 <UART_AdvFeatureConfig+0x154>)
 800776e:	4013      	ands	r3, r2
 8007770:	0019      	movs	r1, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	2220      	movs	r2, #32
 8007784:	4013      	ands	r3, r2
 8007786:	d00b      	beq.n	80077a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	4a25      	ldr	r2, [pc, #148]	; (8007824 <UART_AdvFeatureConfig+0x158>)
 8007790:	4013      	ands	r3, r2
 8007792:	0019      	movs	r1, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2240      	movs	r2, #64	; 0x40
 80077a6:	4013      	ands	r3, r2
 80077a8:	d01d      	beq.n	80077e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <UART_AdvFeatureConfig+0x15c>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	0019      	movs	r1, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077c6:	2380      	movs	r3, #128	; 0x80
 80077c8:	035b      	lsls	r3, r3, #13
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d10b      	bne.n	80077e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	4a15      	ldr	r2, [pc, #84]	; (800782c <UART_AdvFeatureConfig+0x160>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	0019      	movs	r1, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	4013      	ands	r3, r2
 80077ee:	d00b      	beq.n	8007808 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	4a0e      	ldr	r2, [pc, #56]	; (8007830 <UART_AdvFeatureConfig+0x164>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	0019      	movs	r1, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	605a      	str	r2, [r3, #4]
  }
}
 8007808:	46c0      	nop			; (mov r8, r8)
 800780a:	46bd      	mov	sp, r7
 800780c:	b002      	add	sp, #8
 800780e:	bd80      	pop	{r7, pc}
 8007810:	fffdffff 	.word	0xfffdffff
 8007814:	fffeffff 	.word	0xfffeffff
 8007818:	fffbffff 	.word	0xfffbffff
 800781c:	ffff7fff 	.word	0xffff7fff
 8007820:	ffffefff 	.word	0xffffefff
 8007824:	ffffdfff 	.word	0xffffdfff
 8007828:	ffefffff 	.word	0xffefffff
 800782c:	ff9fffff 	.word	0xff9fffff
 8007830:	fff7ffff 	.word	0xfff7ffff

08007834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af02      	add	r7, sp, #8
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007842:	f7fc fb09 	bl	8003e58 <HAL_GetTick>
 8007846:	0003      	movs	r3, r0
 8007848:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2208      	movs	r2, #8
 8007852:	4013      	ands	r3, r2
 8007854:	2b08      	cmp	r3, #8
 8007856:	d10d      	bne.n	8007874 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	2380      	movs	r3, #128	; 0x80
 800785c:	0399      	lsls	r1, r3, #14
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4b16      	ldr	r3, [pc, #88]	; (80078bc <UART_CheckIdleState+0x88>)
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	0013      	movs	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	f000 f82a 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 800786c:	1e03      	subs	r3, r0, #0
 800786e:	d001      	beq.n	8007874 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e01f      	b.n	80078b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2204      	movs	r2, #4
 800787c:	4013      	ands	r3, r2
 800787e:	2b04      	cmp	r3, #4
 8007880:	d10d      	bne.n	800789e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	03d9      	lsls	r1, r3, #15
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <UART_CheckIdleState+0x88>)
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	0013      	movs	r3, r2
 8007890:	2200      	movs	r2, #0
 8007892:	f000 f815 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 8007896:	1e03      	subs	r3, r0, #0
 8007898:	d001      	beq.n	800789e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e00a      	b.n	80078b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2270      	movs	r2, #112	; 0x70
 80078ae:	2100      	movs	r1, #0
 80078b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	0018      	movs	r0, r3
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b004      	add	sp, #16
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	01ffffff 	.word	0x01ffffff

080078c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	1dfb      	adds	r3, r7, #7
 80078ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d0:	e029      	b.n	8007926 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	3301      	adds	r3, #1
 80078d6:	d026      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d8:	f7fc fabe 	bl	8003e58 <HAL_GetTick>
 80078dc:	0002      	movs	r2, r0
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d302      	bcc.n	80078ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d11b      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4915      	ldr	r1, [pc, #84]	; (8007950 <UART_WaitOnFlagUntilTimeout+0x90>)
 80078fa:	400a      	ands	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2101      	movs	r1, #1
 800790a:	438a      	bics	r2, r1
 800790c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2220      	movs	r2, #32
 8007912:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2270      	movs	r2, #112	; 0x70
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e00f      	b.n	8007946 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	4013      	ands	r3, r2
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	425a      	negs	r2, r3
 8007936:	4153      	adcs	r3, r2
 8007938:	b2db      	uxtb	r3, r3
 800793a:	001a      	movs	r2, r3
 800793c:	1dfb      	adds	r3, r7, #7
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d0c6      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	0018      	movs	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	b004      	add	sp, #16
 800794c:	bd80      	pop	{r7, pc}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	fffffe5f 	.word	0xfffffe5f

08007954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	490a      	ldr	r1, [pc, #40]	; (8007990 <UART_EndRxTransfer+0x3c>)
 8007968:	400a      	ands	r2, r1
 800796a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2101      	movs	r1, #1
 8007978:	438a      	bics	r2, r1
 800797a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	46bd      	mov	sp, r7
 800798c:	b002      	add	sp, #8
 800798e:	bd80      	pop	{r7, pc}
 8007990:	fffffedf 	.word	0xfffffedf

08007994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	225a      	movs	r2, #90	; 0x5a
 80079a6:	2100      	movs	r1, #0
 80079a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2252      	movs	r2, #82	; 0x52
 80079ae:	2100      	movs	r1, #0
 80079b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	0018      	movs	r0, r3
 80079b6:	f016 fd5d 	bl	801e474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	46bd      	mov	sp, r7
 80079be:	b004      	add	sp, #16
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	438a      	bics	r2, r1
 80079d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	0018      	movs	r0, r3
 80079ea:	f7ff fb33 	bl	8007054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	46bd      	mov	sp, r7
 80079f2:	b002      	add	sp, #8
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a00:	230e      	movs	r3, #14
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	215c      	movs	r1, #92	; 0x5c
 8007a08:	5a52      	ldrh	r2, [r2, r1]
 8007a0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a10:	2b22      	cmp	r3, #34	; 0x22
 8007a12:	d140      	bne.n	8007a96 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a1a:	210c      	movs	r1, #12
 8007a1c:	187b      	adds	r3, r7, r1
 8007a1e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a20:	187b      	adds	r3, r7, r1
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	230e      	movs	r3, #14
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b2d9      	uxtb	r1, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	400a      	ands	r2, r1
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	225a      	movs	r2, #90	; 0x5a
 8007a46:	5a9b      	ldrh	r3, [r3, r2]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b299      	uxth	r1, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	225a      	movs	r2, #90	; 0x5a
 8007a52:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	225a      	movs	r2, #90	; 0x5a
 8007a58:	5a9b      	ldrh	r3, [r3, r2]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d122      	bne.n	8007aa6 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4911      	ldr	r1, [pc, #68]	; (8007ab0 <UART_RxISR_8BIT+0xb8>)
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f016 fd04 	bl	801e49c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a94:	e007      	b.n	8007aa6 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699a      	ldr	r2, [r3, #24]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2108      	movs	r1, #8
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	619a      	str	r2, [r3, #24]
}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b004      	add	sp, #16
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	fffffedf 	.word	0xfffffedf

08007ab4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007abc:	230e      	movs	r3, #14
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	215c      	movs	r1, #92	; 0x5c
 8007ac4:	5a52      	ldrh	r2, [r2, r1]
 8007ac6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007acc:	2b22      	cmp	r3, #34	; 0x22
 8007ace:	d140      	bne.n	8007b52 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ad6:	210c      	movs	r1, #12
 8007ad8:	187b      	adds	r3, r7, r1
 8007ada:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ae2:	187b      	adds	r3, r7, r1
 8007ae4:	220e      	movs	r2, #14
 8007ae6:	18ba      	adds	r2, r7, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	8812      	ldrh	r2, [r2, #0]
 8007aec:	4013      	ands	r3, r2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	1c9a      	adds	r2, r3, #2
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	225a      	movs	r2, #90	; 0x5a
 8007b02:	5a9b      	ldrh	r3, [r3, r2]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b01      	subs	r3, #1
 8007b08:	b299      	uxth	r1, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	225a      	movs	r2, #90	; 0x5a
 8007b0e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	225a      	movs	r2, #90	; 0x5a
 8007b14:	5a9b      	ldrh	r3, [r3, r2]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d122      	bne.n	8007b62 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4911      	ldr	r1, [pc, #68]	; (8007b6c <UART_RxISR_16BIT+0xb8>)
 8007b28:	400a      	ands	r2, r1
 8007b2a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2101      	movs	r1, #1
 8007b38:	438a      	bics	r2, r1
 8007b3a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f016 fca6 	bl	801e49c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b50:	e007      	b.n	8007b62 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2108      	movs	r1, #8
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	619a      	str	r2, [r3, #24]
}
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b004      	add	sp, #16
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	fffffedf 	.word	0xfffffedf

08007b70 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	1d3b      	adds	r3, r7, #4
 8007b7a:	6019      	str	r1, [r3, #0]
 8007b7c:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b7e:	2317      	movs	r3, #23
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2270      	movs	r2, #112	; 0x70
 8007b8a:	5c9b      	ldrb	r3, [r3, r2]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e04b      	b.n	8007c2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2270      	movs	r2, #112	; 0x70
 8007b98:	2101      	movs	r1, #1
 8007b9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2224      	movs	r2, #36	; 0x24
 8007ba0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2101      	movs	r1, #1
 8007bae:	438a      	bics	r2, r1
 8007bb0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	1d3b      	adds	r3, r7, #4
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d105      	bne.n	8007bde <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007bd2:	1d3b      	adds	r3, r7, #4
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	6819      	ldr	r1, [r3, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	f000 f84f 	bl	8007c7c <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2101      	movs	r1, #1
 8007bea:	430a      	orrs	r2, r1
 8007bec:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007bee:	f7fc f933 	bl	8003e58 <HAL_GetTick>
 8007bf2:	0003      	movs	r3, r0
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	03d9      	lsls	r1, r3, #15
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	0013      	movs	r3, r2
 8007c04:	2200      	movs	r2, #0
 8007c06:	f7ff fe5b 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 8007c0a:	1e03      	subs	r3, r0, #0
 8007c0c:	d004      	beq.n	8007c18 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 8007c0e:	2317      	movs	r3, #23
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	2203      	movs	r2, #3
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2270      	movs	r2, #112	; 0x70
 8007c22:	2100      	movs	r1, #0
 8007c24:	5499      	strb	r1, [r3, r2]

  return status;
 8007c26:	2317      	movs	r3, #23
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
}
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b006      	add	sp, #24
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	ffcfffff 	.word	0xffcfffff
 8007c38:	01ffffff 	.word	0x01ffffff

08007c3c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2270      	movs	r2, #112	; 0x70
 8007c48:	5c9b      	ldrb	r3, [r3, r2]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_UARTEx_EnableStopMode+0x16>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e010      	b.n	8007c74 <HAL_UARTEx_EnableStopMode+0x38>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2270      	movs	r2, #112	; 0x70
 8007c56:	2101      	movs	r1, #1
 8007c58:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2102      	movs	r1, #2
 8007c66:	430a      	orrs	r2, r1
 8007c68:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2270      	movs	r2, #112	; 0x70
 8007c6e:	2100      	movs	r1, #0
 8007c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	0018      	movs	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	b002      	add	sp, #8
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	1d3b      	adds	r3, r7, #4
 8007c86:	6019      	str	r1, [r3, #0]
 8007c88:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2210      	movs	r2, #16
 8007c92:	4393      	bics	r3, r2
 8007c94:	001a      	movs	r2, r3
 8007c96:	1d3b      	adds	r3, r7, #4
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	0019      	movs	r1, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	0a19      	lsrs	r1, r3, #8
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	799b      	ldrb	r3, [r3, #6]
 8007cb2:	061a      	lsls	r2, r3, #24
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	605a      	str	r2, [r3, #4]
}
 8007cbc:	46c0      	nop			; (mov r8, r8)
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b004      	add	sp, #16
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8007cc8:	4b02      	ldr	r3, [pc, #8]	; (8007cd4 <certif_running+0x10>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
}
 8007ccc:	0018      	movs	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	200002c0 	.word	0x200002c0

08007cd8 <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <certif_DownLinkIncrement+0x1c>)
 8007cde:	2244      	movs	r2, #68	; 0x44
 8007ce0:	5a9b      	ldrh	r3, [r3, r2]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b299      	uxth	r1, r3
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <certif_DownLinkIncrement+0x1c>)
 8007ce8:	2244      	movs	r2, #68	; 0x44
 8007cea:	5299      	strh	r1, [r3, r2]
}
 8007cec:	46c0      	nop			; (mov r8, r8)
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	200002c0 	.word	0x200002c0

08007cf8 <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 8007d00:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <certif_linkCheck+0x2c>)
 8007d02:	2246      	movs	r2, #70	; 0x46
 8007d04:	2101      	movs	r1, #1
 8007d06:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	7a19      	ldrb	r1, [r3, #8]
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <certif_linkCheck+0x2c>)
 8007d0e:	2247      	movs	r2, #71	; 0x47
 8007d10:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7a59      	ldrb	r1, [r3, #9]
 8007d16:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <certif_linkCheck+0x2c>)
 8007d18:	2248      	movs	r2, #72	; 0x48
 8007d1a:	5499      	strb	r1, [r3, r2]
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b002      	add	sp, #8
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	200002c0 	.word	0x200002c0

08007d28 <certif_tx>:

static bool certif_tx( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8007d2e:	4b47      	ldr	r3, [pc, #284]	; (8007e4c <certif_tx+0x124>)
 8007d30:	2246      	movs	r2, #70	; 0x46
 8007d32:	5c9b      	ldrb	r3, [r3, r2]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d017      	beq.n	8007d68 <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8007d38:	4b44      	ldr	r3, [pc, #272]	; (8007e4c <certif_tx+0x124>)
 8007d3a:	2246      	movs	r2, #70	; 0x46
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8007d40:	4b42      	ldr	r3, [pc, #264]	; (8007e4c <certif_tx+0x124>)
 8007d42:	2203      	movs	r2, #3
 8007d44:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8007d46:	4b41      	ldr	r3, [pc, #260]	; (8007e4c <certif_tx+0x124>)
 8007d48:	2205      	movs	r2, #5
 8007d4a:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8007d4c:	4b3f      	ldr	r3, [pc, #252]	; (8007e4c <certif_tx+0x124>)
 8007d4e:	2247      	movs	r2, #71	; 0x47
 8007d50:	5c9a      	ldrb	r2, [r3, r2]
 8007d52:	4b3e      	ldr	r3, [pc, #248]	; (8007e4c <certif_tx+0x124>)
 8007d54:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8007d56:	4b3d      	ldr	r3, [pc, #244]	; (8007e4c <certif_tx+0x124>)
 8007d58:	2248      	movs	r2, #72	; 0x48
 8007d5a:	5c9a      	ldrb	r2, [r3, r2]
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <certif_tx+0x124>)
 8007d5e:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8007d60:	4b3a      	ldr	r3, [pc, #232]	; (8007e4c <certif_tx+0x124>)
 8007d62:	2201      	movs	r2, #1
 8007d64:	705a      	strb	r2, [r3, #1]
 8007d66:	e01b      	b.n	8007da0 <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8007d68:	4b38      	ldr	r3, [pc, #224]	; (8007e4c <certif_tx+0x124>)
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d005      	beq.n	8007d7c <certif_tx+0x54>
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d115      	bne.n	8007da0 <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8007d74:	4b35      	ldr	r3, [pc, #212]	; (8007e4c <certif_tx+0x124>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	705a      	strb	r2, [r3, #1]
      break;
 8007d7a:	e011      	b.n	8007da0 <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8007d7c:	4b33      	ldr	r3, [pc, #204]	; (8007e4c <certif_tx+0x124>)
 8007d7e:	2202      	movs	r2, #2
 8007d80:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8007d82:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <certif_tx+0x124>)
 8007d84:	2244      	movs	r2, #68	; 0x44
 8007d86:	5a9b      	ldrh	r3, [r3, r2]
 8007d88:	0a1b      	lsrs	r3, r3, #8
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <certif_tx+0x124>)
 8007d90:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8007d92:	4b2e      	ldr	r3, [pc, #184]	; (8007e4c <certif_tx+0x124>)
 8007d94:	2244      	movs	r2, #68	; 0x44
 8007d96:	5a9b      	ldrh	r3, [r3, r2]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <certif_tx+0x124>)
 8007d9c:	715a      	strb	r2, [r3, #5]
      break;
 8007d9e:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007da0:	4b2a      	ldr	r3, [pc, #168]	; (8007e4c <certif_tx+0x124>)
 8007da2:	78db      	ldrb	r3, [r3, #3]
 8007da4:	1d3a      	adds	r2, r7, #4
 8007da6:	0011      	movs	r1, r2
 8007da8:	0018      	movs	r0, r3
 8007daa:	f006 fdcd 	bl	800e948 <LoRaMacQueryTxPossible>
 8007dae:	1e03      	subs	r3, r0, #0
 8007db0:	d00d      	beq.n	8007dce <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8007db2:	2108      	movs	r1, #8
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	2200      	movs	r2, #0
 8007dca:	739a      	strb	r2, [r3, #14]
 8007dcc:	e02b      	b.n	8007e26 <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8007dce:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <certif_tx+0x128>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d112      	bne.n	8007dfc <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8007dd6:	2108      	movs	r1, #8
 8007dd8:	187b      	adds	r3, r7, r1
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	22e0      	movs	r2, #224	; 0xe0
 8007de2:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8007de4:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <certif_tx+0x124>)
 8007de6:	78db      	ldrb	r3, [r3, #3]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8007dee:	187b      	adds	r3, r7, r1
 8007df0:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <certif_tx+0x12c>)
 8007df2:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007df4:	187b      	adds	r3, r7, r1
 8007df6:	2200      	movs	r2, #0
 8007df8:	739a      	strb	r2, [r3, #14]
 8007dfa:	e014      	b.n	8007e26 <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8007dfc:	2108      	movs	r1, #8
 8007dfe:	187b      	adds	r3, r7, r1
 8007e00:	2201      	movs	r2, #1
 8007e02:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8007e04:	187b      	adds	r3, r7, r1
 8007e06:	22e0      	movs	r2, #224	; 0xe0
 8007e08:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <certif_tx+0x124>)
 8007e0c:	78db      	ldrb	r3, [r3, #3]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	187b      	adds	r3, r7, r1
 8007e12:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8007e14:	187b      	adds	r3, r7, r1
 8007e16:	4a0f      	ldr	r2, [pc, #60]	; (8007e54 <certif_tx+0x12c>)
 8007e18:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8007e1a:	187b      	adds	r3, r7, r1
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8007e20:	187b      	adds	r3, r7, r1
 8007e22:	2200      	movs	r2, #0
 8007e24:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <certif_tx+0x130>)
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f00d fd01 	bl	8015830 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8007e2e:	2308      	movs	r3, #8
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	0018      	movs	r0, r3
 8007e34:	f007 fdb8 	bl	800f9a8 <LoRaMacMcpsRequest>
 8007e38:	1e03      	subs	r3, r0, #0
 8007e3a:	d101      	bne.n	8007e40 <certif_tx+0x118>
  {
      return false;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <certif_tx+0x11a>
  }
    return true;
 8007e40:	2301      	movs	r3, #1
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b006      	add	sp, #24
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	200002c0 	.word	0x200002c0
 8007e50:	2000030a 	.word	0x2000030a
 8007e54:	200002c4 	.word	0x200002c4
 8007e58:	200002a8 	.word	0x200002a8

08007e5c <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8007e5c:	b5b0      	push	{r4, r5, r7, lr}
 8007e5e:	b0a6      	sub	sp, #152	; 0x98
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8007e66:	4bb0      	ldr	r3, [pc, #704]	; (8008128 <certif_rx+0x2cc>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	4053      	eors	r3, r2
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d065      	beq.n	8007f40 <certif_rx+0xe4>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7b1b      	ldrb	r3, [r3, #12]
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d000      	beq.n	8007e7e <certif_rx+0x22>
 8007e7c:	e145      	b.n	800810a <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d000      	beq.n	8007e8a <certif_rx+0x2e>
 8007e88:	e13f      	b.n	800810a <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d000      	beq.n	8007e98 <certif_rx+0x3c>
 8007e96:	e138      	b.n	800810a <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d000      	beq.n	8007ea6 <certif_rx+0x4a>
 8007ea4:	e131      	b.n	800810a <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	3303      	adds	r3, #3
 8007eac:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d000      	beq.n	8007eb4 <certif_rx+0x58>
 8007eb2:	e12a      	b.n	800810a <certif_rx+0x2ae>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007eb4:	4b9d      	ldr	r3, [pc, #628]	; (800812c <certif_rx+0x2d0>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8007eba:	4b9b      	ldr	r3, [pc, #620]	; (8008128 <certif_rx+0x2cc>)
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8007ec0:	4b99      	ldr	r3, [pc, #612]	; (8008128 <certif_rx+0x2cc>)
 8007ec2:	2244      	movs	r2, #68	; 0x44
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8007ec8:	4b97      	ldr	r3, [pc, #604]	; (8008128 <certif_rx+0x2cc>)
 8007eca:	2246      	movs	r2, #70	; 0x46
 8007ecc:	2100      	movs	r1, #0
 8007ece:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8007ed0:	4b95      	ldr	r3, [pc, #596]	; (8008128 <certif_rx+0x2cc>)
 8007ed2:	2247      	movs	r2, #71	; 0x47
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8007ed8:	4b93      	ldr	r3, [pc, #588]	; (8008128 <certif_rx+0x2cc>)
 8007eda:	2248      	movs	r2, #72	; 0x48
 8007edc:	2100      	movs	r1, #0
 8007ede:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8007ee0:	4b91      	ldr	r3, [pc, #580]	; (8008128 <certif_rx+0x2cc>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007ee6:	4b90      	ldr	r3, [pc, #576]	; (8008128 <certif_rx+0x2cc>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8007eec:	217c      	movs	r1, #124	; 0x7c
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8007ef4:	000c      	movs	r4, r1
 8007ef6:	187b      	adds	r3, r7, r1
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f006 fddf 	bl	800eabc <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8007efe:	0021      	movs	r1, r4
 8007f00:	187b      	adds	r3, r7, r1
 8007f02:	791a      	ldrb	r2, [r3, #4]
 8007f04:	4b8a      	ldr	r3, [pc, #552]	; (8008130 <certif_rx+0x2d4>)
 8007f06:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8007f08:	187b      	adds	r3, r7, r1
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8007f0e:	187b      	adds	r3, r7, r1
 8007f10:	2201      	movs	r2, #1
 8007f12:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007f14:	187b      	adds	r3, r7, r1
 8007f16:	0018      	movs	r0, r3
 8007f18:	f006 ff1c 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( false );
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f007 fe93 	bl	800fc48 <LoRaMacTestSetDutyCycleOn>
  #endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8007f22:	4a84      	ldr	r2, [pc, #528]	; (8008134 <certif_rx+0x2d8>)
 8007f24:	4b84      	ldr	r3, [pc, #528]	; (8008138 <certif_rx+0x2dc>)
 8007f26:	0011      	movs	r1, r2
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f00d fc37 	bl	801579c <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8007f2e:	4a83      	ldr	r2, [pc, #524]	; (800813c <certif_rx+0x2e0>)
 8007f30:	4b81      	ldr	r3, [pc, #516]	; (8008138 <certif_rx+0x2dc>)
 8007f32:	0011      	movs	r1, r2
 8007f34:	0018      	movs	r0, r3
 8007f36:	f00d fc4f 	bl	80157d8 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8007f3a:	f7ff fef5 	bl	8007d28 <certif_tx>
 8007f3e:	e0e4      	b.n	800810a <certif_rx+0x2ae>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	4b78      	ldr	r3, [pc, #480]	; (8008128 <certif_rx+0x2cc>)
 8007f48:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8007f4a:	4b77      	ldr	r3, [pc, #476]	; (8008128 <certif_rx+0x2cc>)
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b07      	cmp	r3, #7
 8007f50:	d900      	bls.n	8007f54 <certif_rx+0xf8>
 8007f52:	e0d9      	b.n	8008108 <certif_rx+0x2ac>
 8007f54:	009a      	lsls	r2, r3, #2
 8007f56:	4b7a      	ldr	r3, [pc, #488]	; (8008140 <certif_rx+0x2e4>)
 8007f58:	18d3      	adds	r3, r2, r3
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8007f5e:	4b72      	ldr	r3, [pc, #456]	; (8008128 <certif_rx+0x2cc>)
 8007f60:	2244      	movs	r2, #68	; 0x44
 8007f62:	2100      	movs	r1, #0
 8007f64:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8007f66:	4b70      	ldr	r3, [pc, #448]	; (8008128 <certif_rx+0x2cc>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8007f6c:	2164      	movs	r1, #100	; 0x64
 8007f6e:	187b      	adds	r3, r7, r1
 8007f70:	2202      	movs	r2, #2
 8007f72:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8007f74:	4b6e      	ldr	r3, [pc, #440]	; (8008130 <certif_rx+0x2d4>)
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	187b      	adds	r3, r7, r1
 8007f7a:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007f7c:	187b      	adds	r3, r7, r1
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f006 fee8 	bl	800ed54 <LoRaMacMibSetRequestConfirm>
  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( true );
 8007f84:	2001      	movs	r0, #1
 8007f86:	f007 fe5f 	bl	800fc48 <LoRaMacTestSetDutyCycleOn>
  #endif
          
          break;
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	e0bd      	b.n	800810a <certif_rx+0x2ae>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8007f8e:	4b66      	ldr	r3, [pc, #408]	; (8008128 <certif_rx+0x2cc>)
 8007f90:	2202      	movs	r2, #2
 8007f92:	70da      	strb	r2, [r3, #3]
          break;
 8007f94:	e0b9      	b.n	800810a <certif_rx+0x2ae>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8007f96:	4b65      	ldr	r3, [pc, #404]	; (800812c <certif_rx+0x2d0>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007f9c:	4b62      	ldr	r3, [pc, #392]	; (8008128 <certif_rx+0x2cc>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	705a      	strb	r2, [r3, #1]
          break;
 8007fa2:	e0b2      	b.n	800810a <certif_rx+0x2ae>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007fa4:	4b61      	ldr	r3, [pc, #388]	; (800812c <certif_rx+0x2d0>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007faa:	4b5f      	ldr	r3, [pc, #380]	; (8008128 <certif_rx+0x2cc>)
 8007fac:	2201      	movs	r2, #1
 8007fae:	705a      	strb	r2, [r3, #1]
          break;
 8007fb0:	e0ab      	b.n	800810a <certif_rx+0x2ae>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7b1a      	ldrb	r2, [r3, #12]
 8007fb6:	4b5c      	ldr	r3, [pc, #368]	; (8008128 <certif_rx+0x2cc>)
 8007fb8:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8007fba:	4b5b      	ldr	r3, [pc, #364]	; (8008128 <certif_rx+0x2cc>)
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007fc0:	2397      	movs	r3, #151	; 0x97
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e013      	b.n	8007ff2 <certif_rx+0x196>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	2097      	movs	r0, #151	; 0x97
 8007fd0:	183b      	adds	r3, r7, r0
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	18d3      	adds	r3, r2, r3
 8007fd6:	781a      	ldrb	r2, [r3, #0]
 8007fd8:	183b      	adds	r3, r7, r0
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	3201      	adds	r2, #1
 8007fde:	b2d1      	uxtb	r1, r2
 8007fe0:	4a51      	ldr	r2, [pc, #324]	; (8008128 <certif_rx+0x2cc>)
 8007fe2:	18d3      	adds	r3, r2, r3
 8007fe4:	1c0a      	adds	r2, r1, #0
 8007fe6:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007fe8:	183b      	adds	r3, r7, r0
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	183b      	adds	r3, r7, r0
 8007fee:	3201      	adds	r2, #1
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	4b4d      	ldr	r3, [pc, #308]	; (8008128 <certif_rx+0x2cc>)
 8007ff4:	78db      	ldrb	r3, [r3, #3]
 8007ff6:	2297      	movs	r2, #151	; 0x97
 8007ff8:	18ba      	adds	r2, r7, r2
 8007ffa:	7812      	ldrb	r2, [r2, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d3e4      	bcc.n	8007fca <certif_rx+0x16e>
          }
          break;
 8008000:	e083      	b.n	800810a <certif_rx+0x2ae>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8008002:	2154      	movs	r1, #84	; 0x54
 8008004:	187b      	adds	r3, r7, r1
 8008006:	2203      	movs	r2, #3
 8008008:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 800800a:	187b      	adds	r3, r7, r1
 800800c:	0018      	movs	r0, r3
 800800e:	f007 fb59 	bl	800f6c4 <LoRaMacMlmeRequest>
          break;
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	e079      	b.n	800810a <certif_rx+0x2ae>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8008016:	4b44      	ldr	r3, [pc, #272]	; (8008128 <certif_rx+0x2cc>)
 8008018:	2244      	movs	r2, #68	; 0x44
 800801a:	2100      	movs	r1, #0
 800801c:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 800801e:	4b42      	ldr	r3, [pc, #264]	; (8008128 <certif_rx+0x2cc>)
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8008024:	212c      	movs	r1, #44	; 0x2c
 8008026:	187b      	adds	r3, r7, r1
 8008028:	2202      	movs	r2, #2
 800802a:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800802c:	4b40      	ldr	r3, [pc, #256]	; (8008130 <certif_rx+0x2d4>)
 800802e:	781a      	ldrb	r2, [r3, #0]
 8008030:	187b      	adds	r3, r7, r1
 8008032:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008034:	187b      	adds	r3, r7, r1
 8008036:	0018      	movs	r0, r3
 8008038:	f006 fe8c 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 800803c:	2144      	movs	r1, #68	; 0x44
 800803e:	187b      	adds	r3, r7, r1
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8008044:	187b      	adds	r3, r7, r1
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800804c:	c331      	stmia	r3!, {r0, r4, r5}

            LoRaMacMlmeRequest( &mlmeReq );
 800804e:	187b      	adds	r3, r7, r1
 8008050:	0018      	movs	r0, r3
 8008052:	f007 fb37 	bl	800f6c4 <LoRaMacMlmeRequest>
            break;
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	e057      	b.n	800810a <certif_rx+0x2ae>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7b1b      	ldrb	r3, [r3, #12]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d118      	bne.n	8008094 <certif_rx+0x238>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8008062:	211c      	movs	r1, #28
 8008064:	187b      	adds	r3, r7, r1
 8008066:	2204      	movs	r2, #4
 8008068:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	3301      	adds	r3, #1
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	b21a      	sxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	3302      	adds	r3, #2
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b21b      	sxth	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b21b      	sxth	r3, r3
 8008084:	b29a      	uxth	r2, r3
 8008086:	187b      	adds	r3, r7, r1
 8008088:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 800808a:	187b      	adds	r3, r7, r1
 800808c:	0018      	movs	r0, r3
 800808e:	f007 fb19 	bl	800f6c4 <LoRaMacMlmeRequest>
 8008092:	e035      	b.n	8008100 <certif_rx+0x2a4>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7b1b      	ldrb	r3, [r3, #12]
 8008098:	2b07      	cmp	r3, #7
 800809a:	d131      	bne.n	8008100 <certif_rx+0x2a4>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 800809c:	210c      	movs	r1, #12
 800809e:	187b      	adds	r3, r7, r1
 80080a0:	2205      	movs	r2, #5
 80080a2:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	3301      	adds	r3, #1
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	b21a      	sxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	3302      	adds	r3, #2
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b21b      	sxth	r3, r3
 80080ba:	4313      	orrs	r3, r2
 80080bc:	b21b      	sxth	r3, r3
 80080be:	b29a      	uxth	r2, r3
 80080c0:	187b      	adds	r3, r7, r1
 80080c2:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	3303      	adds	r3, #3
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	041a      	lsls	r2, r3, #16
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	3304      	adds	r3, #4
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	3305      	adds	r3, #5
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	001a      	movs	r2, r3
 80080e6:	2364      	movs	r3, #100	; 0x64
 80080e8:	435a      	muls	r2, r3
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	799a      	ldrb	r2, [r3, #6]
 80080f4:	187b      	adds	r3, r7, r1
 80080f6:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	0018      	movs	r0, r3
 80080fc:	f007 fae2 	bl	800f6c4 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8008100:	4b09      	ldr	r3, [pc, #36]	; (8008128 <certif_rx+0x2cc>)
 8008102:	2201      	movs	r2, #1
 8008104:	705a      	strb	r2, [r3, #1]
          break;
 8008106:	e000      	b.n	800810a <certif_rx+0x2ae>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8008108:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 800810a:	4b07      	ldr	r3, [pc, #28]	; (8008128 <certif_rx+0x2cc>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2201      	movs	r2, #1
 8008110:	4053      	eors	r3, r2
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <certif_rx+0x2c4>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <certif_rx+0x2dc>)
 800811a:	0018      	movs	r0, r3
 800811c:	f00d fbde 	bl	80158dc <TimerStop>
    }
}
 8008120:	46c0      	nop			; (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	b026      	add	sp, #152	; 0x98
 8008126:	bdb0      	pop	{r4, r5, r7, pc}
 8008128:	200002c0 	.word	0x200002c0
 800812c:	2000030a 	.word	0x2000030a
 8008130:	2000030b 	.word	0x2000030b
 8008134:	08008145 	.word	0x08008145
 8008138:	200002a8 	.word	0x200002a8
 800813c:	00001388 	.word	0x00001388
 8008140:	080213e0 	.word	0x080213e0

08008144 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
    certif_tx( );
 800814c:	f7ff fdec 	bl	8007d28 <certif_tx>

}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b002      	add	sp, #8
 8008156:	bd80      	pop	{r7, pc}

08008158 <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 800815c:	e004      	b.n	8008168 <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <lorawan_driver_loop+0x34>)
 8008160:	2200      	movs	r2, #0
 8008162:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8008164:	f003 fc58 	bl	800ba18 <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <lorawan_driver_loop+0x34>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d008      	beq.n	8008184 <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 8008172:	4b06      	ldr	r3, [pc, #24]	; (800818c <lorawan_driver_loop+0x34>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b01      	cmp	r3, #1
 800817a:	d003      	beq.n	8008184 <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 800817c:	4b03      	ldr	r3, [pc, #12]	; (800818c <lorawan_driver_loop+0x34>)
 800817e:	7a1b      	ldrb	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1ec      	bne.n	800815e <lorawan_driver_loop+0x6>
	}

}
 8008184:	46c0      	nop			; (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	2000032c 	.word	0x2000032c

08008190 <lorawan_driver_waitUntilEndOfExecution>:

__weak void lorawan_driver_waitUntilEndOfExecution() {
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0

	lorawan_driver_loop();
 8008194:	f7ff ffe0 	bl	8008158 <lorawan_driver_loop>
	#if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
    itsdk_stimer_run();
 8008198:	f015 f8f2 	bl	801d380 <itsdk_stimer_run>

}
 800819c:	46c0      	nop			; (mov r8, r8)
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <lorawan_driver_battery_level>:
/**
 * Return a batteryLevel from 1 to 254
 * 1 = VBAT_MIN
 * 254 = VBAT_MAX
 */
__weak uint8_t lorawan_driver_battery_level() {
 80081a4:	b590      	push	{r4, r7, lr}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
	 uint16_t mv = adc_getVBat();
 80081aa:	1dbc      	adds	r4, r7, #6
 80081ac:	f015 fb38 	bl	801d820 <adc_getVBat>
 80081b0:	0003      	movs	r3, r0
 80081b2:	8023      	strh	r3, [r4, #0]
	 if ( mv <= ITSDK_VBAT_MIN ) return 1;
 80081b4:	1dbb      	adds	r3, r7, #6
 80081b6:	881a      	ldrh	r2, [r3, #0]
 80081b8:	23fa      	movs	r3, #250	; 0xfa
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	429a      	cmp	r2, r3
 80081be:	d801      	bhi.n	80081c4 <lorawan_driver_battery_level+0x20>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e014      	b.n	80081ee <lorawan_driver_battery_level+0x4a>
	 if ( mv >= ITSDK_VBAT_MAX ) return 254;
 80081c4:	1dbb      	adds	r3, r7, #6
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	4a0b      	ldr	r2, [pc, #44]	; (80081f8 <lorawan_driver_battery_level+0x54>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d901      	bls.n	80081d2 <lorawan_driver_battery_level+0x2e>
 80081ce:	23fe      	movs	r3, #254	; 0xfe
 80081d0:	e00d      	b.n	80081ee <lorawan_driver_battery_level+0x4a>
	 return (( (uint32_t) (mv - ITSDK_VBAT_MIN)*ITSDK_VBAT_MAX) /(ITSDK_VBAT_MAX-ITSDK_VBAT_MIN) );
 80081d2:	1dbb      	adds	r3, r7, #6
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	4a09      	ldr	r2, [pc, #36]	; (80081fc <lorawan_driver_battery_level+0x58>)
 80081d8:	4694      	mov	ip, r2
 80081da:	4463      	add	r3, ip
 80081dc:	001a      	movs	r2, r3
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <lorawan_driver_battery_level+0x5c>)
 80081e0:	4353      	muls	r3, r2
 80081e2:	4908      	ldr	r1, [pc, #32]	; (8008204 <lorawan_driver_battery_level+0x60>)
 80081e4:	0018      	movs	r0, r3
 80081e6:	f7f7 ff97 	bl	8000118 <__udivsi3>
 80081ea:	0003      	movs	r3, r0
 80081ec:	b2db      	uxtb	r3, r3
}
 80081ee:	0018      	movs	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b003      	add	sp, #12
 80081f4:	bd90      	pop	{r4, r7, pc}
 80081f6:	46c0      	nop			; (mov r8, r8)
 80081f8:	00000ce3 	.word	0x00000ce3
 80081fc:	fffff830 	.word	0xfffff830
 8008200:	00000ce4 	.word	0x00000ce4
 8008204:	00000514 	.word	0x00000514

08008208 <lorawan_driver_temperature>:

/**
 * Return the temperature
 * temperature in fixed decimal : 8b integer + 8b decimal
 */
__weak uint16_t lorawan_driver_temperature() {
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
	int16_t t = adc_getTemperature();
 800820e:	1dbc      	adds	r4, r7, #6
 8008210:	f015 fa7e 	bl	801d710 <adc_getTemperature>
 8008214:	0003      	movs	r3, r0
 8008216:	8023      	strh	r3, [r4, #0]
	t = (int16_t)(((int32_t)t << 8)/100);
 8008218:	1dbb      	adds	r3, r7, #6
 800821a:	2200      	movs	r2, #0
 800821c:	5e9b      	ldrsh	r3, [r3, r2]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	2164      	movs	r1, #100	; 0x64
 8008222:	0018      	movs	r0, r3
 8008224:	f7f8 f802 	bl	800022c <__divsi3>
 8008228:	0003      	movs	r3, r0
 800822a:	001a      	movs	r2, r3
 800822c:	1dbb      	adds	r3, r7, #6
 800822e:	801a      	strh	r2, [r3, #0]
	return (uint16_t)t;
 8008230:	1dbb      	adds	r3, r7, #6
 8008232:	881b      	ldrh	r3, [r3, #0]
}
 8008234:	0018      	movs	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	b003      	add	sp, #12
 800823a:	bd90      	pop	{r4, r7, pc}

0800823c <lorawan_driver_macProcessNotify>:

/**
 * Called after IRQ processing
 */
void lorawan_driver_macProcessNotify(void) {
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  __loraWanState.reqPending=true;
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <lorawan_driver_macProcessNotify+0x10>)
 8008242:	2201      	movs	r2, #1
 8008244:	721a      	strb	r2, [r3, #8]
}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	2000032c 	.word	0x2000032c

08008250 <lorawan_driver_onTxNeeded>:
}

/**
 * Callback function requesting transmission
 */
__weak void lorawan_driver_onTxNeeded() {
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <__convertDR>:


/**
 * Convert Datarate define from ITSDK to LoRaMac
 */
static uint8_t __convertDR(uint8_t itsdkDr) {
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	0002      	movs	r2, r0
 8008264:	1dfb      	adds	r3, r7, #7
 8008266:	701a      	strb	r2, [r3, #0]
	switch (itsdkDr) {
 8008268:	1dfb      	adds	r3, r7, #7
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b16      	cmp	r3, #22
 800826e:	d824      	bhi.n	80082ba <__convertDR+0x5e>
 8008270:	009a      	lsls	r2, r3, #2
 8008272:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <__convertDR+0x78>)
 8008274:	18d3      	adds	r3, r2, r3
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	469f      	mov	pc, r3
	case __LORAWAN_DR_0: return DR_0;
 800827a:	2300      	movs	r3, #0
 800827c:	e026      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_1: return DR_1;
 800827e:	2301      	movs	r3, #1
 8008280:	e024      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_2: return DR_2;
 8008282:	2302      	movs	r3, #2
 8008284:	e022      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_3: return DR_3;
 8008286:	2303      	movs	r3, #3
 8008288:	e020      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_4: return DR_4;
 800828a:	2304      	movs	r3, #4
 800828c:	e01e      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_5: return DR_5;
 800828e:	2305      	movs	r3, #5
 8008290:	e01c      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_6: return DR_6;
 8008292:	2306      	movs	r3, #6
 8008294:	e01a      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_7: return DR_7;
 8008296:	2307      	movs	r3, #7
 8008298:	e018      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_8: return DR_8;
 800829a:	2308      	movs	r3, #8
 800829c:	e016      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_9: return DR_9;
 800829e:	2309      	movs	r3, #9
 80082a0:	e014      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_10: return DR_10;
 80082a2:	230a      	movs	r3, #10
 80082a4:	e012      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_11: return DR_11;
 80082a6:	230b      	movs	r3, #11
 80082a8:	e010      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_12: return DR_12;
 80082aa:	230c      	movs	r3, #12
 80082ac:	e00e      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_13: return DR_13;
 80082ae:	230d      	movs	r3, #13
 80082b0:	e00c      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_14: return DR_14;
 80082b2:	230e      	movs	r3, #14
 80082b4:	e00a      	b.n	80082cc <__convertDR+0x70>
	case __LORAWAN_DR_15: return DR_15;
 80082b6:	230f      	movs	r3, #15
 80082b8:	e008      	b.n	80082cc <__convertDR+0x70>
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_DR,(uint16_t)itsdkDr);
 80082ba:	1dfb      	adds	r3, r7, #7
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4a05      	ldr	r2, [pc, #20]	; (80082d8 <__convertDR+0x7c>)
 80082c2:	0019      	movs	r1, r3
 80082c4:	0010      	movs	r0, r2
 80082c6:	f013 fc4f 	bl	801bb68 <itsdk_error_report>
	}
	return 0;	// never reached
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	08021400 	.word	0x08021400
 80082d8:	d0000100 	.word	0xd0000100

080082dc <lorawan_driver_LORA_Init>:
 *  lora Init - initialize the stack and the associated hardware
 *
 */
void lorawan_driver_LORA_Init(
		lorawan_driver_config_t * config
){
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b089      	sub	sp, #36	; 0x24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  LOG_INFO_LORAWAN(("lorawan_driver_LORA_Init\r\n"));

  __loraWanState.joinState = LORAWAN_STATE_NONE;
 80082e4:	4b95      	ldr	r3, [pc, #596]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
  __loraWanState.upLinkCounter = 0;
 80082ea:	4b94      	ldr	r3, [pc, #592]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	815a      	strh	r2, [r3, #10]
  __loraWanState.downlinkCounter = 0;
 80082f0:	4b92      	ldr	r3, [pc, #584]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	819a      	strh	r2, [r3, #12]
  __loraWanState.lastRssi = LORAWAN_DRIVER_INVALID_RSSI;
 80082f6:	4b91      	ldr	r3, [pc, #580]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	4252      	negs	r2, r2
 80082fc:	81da      	strh	r2, [r3, #14]
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80082fe:	4b90      	ldr	r3, [pc, #576]	; (8008540 <lorawan_driver_LORA_Init+0x264>)
 8008300:	4a90      	ldr	r2, [pc, #576]	; (8008544 <lorawan_driver_LORA_Init+0x268>)
 8008302:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008304:	4b8e      	ldr	r3, [pc, #568]	; (8008540 <lorawan_driver_LORA_Init+0x264>)
 8008306:	4a90      	ldr	r2, [pc, #576]	; (8008548 <lorawan_driver_LORA_Init+0x26c>)
 8008308:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800830a:	4b8d      	ldr	r3, [pc, #564]	; (8008540 <lorawan_driver_LORA_Init+0x264>)
 800830c:	4a8f      	ldr	r2, [pc, #572]	; (800854c <lorawan_driver_LORA_Init+0x270>)
 800830e:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008310:	4b8b      	ldr	r3, [pc, #556]	; (8008540 <lorawan_driver_LORA_Init+0x264>)
 8008312:	4a8f      	ldr	r2, [pc, #572]	; (8008550 <lorawan_driver_LORA_Init+0x274>)
 8008314:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = lorawan_driver_battery_level;
 8008316:	4b8f      	ldr	r3, [pc, #572]	; (8008554 <lorawan_driver_LORA_Init+0x278>)
 8008318:	4a8f      	ldr	r2, [pc, #572]	; (8008558 <lorawan_driver_LORA_Init+0x27c>)
 800831a:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = lorawan_driver_temperature;
 800831c:	4b8d      	ldr	r3, [pc, #564]	; (8008554 <lorawan_driver_LORA_Init+0x278>)
 800831e:	4a8f      	ldr	r2, [pc, #572]	; (800855c <lorawan_driver_LORA_Init+0x280>)
 8008320:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = lorawan_driver_macProcessNotify;
 8008322:	4b8c      	ldr	r3, [pc, #560]	; (8008554 <lorawan_driver_LORA_Init+0x278>)
 8008324:	4a8e      	ldr	r2, [pc, #568]	; (8008560 <lorawan_driver_LORA_Init+0x284>)
 8008326:	60da      	str	r2, [r3, #12]



  // Set the Radio configuration
  switch ( config->region ) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	889b      	ldrh	r3, [r3, #4]
 800832c:	2b20      	cmp	r3, #32
 800832e:	d146      	bne.n	80083be <lorawan_driver_LORA_Init+0xe2>
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
        	break;
		#endif
		#if defined( REGION_EU868 )
        case __LORAWAN_REGION_EU868:
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 8008330:	4988      	ldr	r1, [pc, #544]	; (8008554 <lorawan_driver_LORA_Init+0x278>)
 8008332:	4b83      	ldr	r3, [pc, #524]	; (8008540 <lorawan_driver_LORA_Init+0x264>)
 8008334:	2205      	movs	r2, #5
 8008336:	0018      	movs	r0, r3
 8008338:	f005 ff1e 	bl	800e178 <LoRaMacInitialization>
        	LoRaMacTestSetDutyCycleOn( true );	// activate duty cycle
 800833c:	2001      	movs	r0, #1
 800833e:	f007 fc83 	bl	800fc48 <LoRaMacTestSetDutyCycleOn>
        	break;
 8008342:	46c0      	nop			; (mov r8, r8)
  	  	mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;	// Change the default RX window margin error (default is +/- 10ms)
  	  	mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
  	  	LoRaMacMibSetRequestConfirm( &mibReq );
		#endif

  	    mibReq.Type = MIB_ADR;
 8008344:	2408      	movs	r4, #8
 8008346:	193b      	adds	r3, r7, r4
 8008348:	2202      	movs	r2, #2
 800834a:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.AdrEnable = config->adrEnable;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	781a      	ldrb	r2, [r3, #0]
 8008350:	193b      	adds	r3, r7, r4
 8008352:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008354:	193b      	adds	r3, r7, r4
 8008356:	0018      	movs	r0, r3
 8008358:	f006 fcfc 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    mibReq.Type = MIB_PUBLIC_NETWORK;
 800835c:	193b      	adds	r3, r7, r4
 800835e:	221a      	movs	r2, #26
 8008360:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.EnablePublicNetwork = config->enablePublicNetwork;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	789a      	ldrb	r2, [r3, #2]
 8008366:	193b      	adds	r3, r7, r4
 8008368:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 800836a:	193b      	adds	r3, r7, r4
 800836c:	0018      	movs	r0, r3
 800836e:	f006 fcf1 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.txDatarate = __convertDR(config->txDatarate);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	b25b      	sxtb	r3, r3
 8008378:	b2db      	uxtb	r3, r3
 800837a:	0018      	movs	r0, r3
 800837c:	f7ff ff6e 	bl	800825c <__convertDR>
 8008380:	0003      	movs	r3, r0
 8008382:	001a      	movs	r2, r3
 8008384:	4b6d      	ldr	r3, [pc, #436]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 8008386:	749a      	strb	r2, [r3, #18]
  	    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008388:	193b      	adds	r3, r7, r4
 800838a:	2227      	movs	r2, #39	; 0x27
 800838c:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.ChannelsDefaultDatarate = __convertDR(config->txDatarate);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	b25b      	sxtb	r3, r3
 8008394:	b2db      	uxtb	r3, r3
 8008396:	0018      	movs	r0, r3
 8008398:	f7ff ff60 	bl	800825c <__convertDR>
 800839c:	0003      	movs	r3, r0
 800839e:	b25a      	sxtb	r2, r3
 80083a0:	193b      	adds	r3, r7, r4
 80083a2:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 80083a4:	193b      	adds	r3, r7, r4
 80083a6:	0018      	movs	r0, r3
 80083a8:	f006 fcd4 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.JoinType = config->JoinType;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	799a      	ldrb	r2, [r3, #6]
 80083b0:	4b62      	ldr	r3, [pc, #392]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 80083b2:	74da      	strb	r2, [r3, #19]
  	    if ( config->JoinType == __LORAWAN_OTAA ) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	799b      	ldrb	r3, [r3, #6]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d130      	bne.n	800841e <lorawan_driver_LORA_Init+0x142>
 80083bc:	e007      	b.n	80083ce <lorawan_driver_LORA_Init+0xf2>
    		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_REGION,(uint16_t)config->region);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	4a68      	ldr	r2, [pc, #416]	; (8008564 <lorawan_driver_LORA_Init+0x288>)
 80083c4:	0019      	movs	r1, r3
 80083c6:	0010      	movs	r0, r2
 80083c8:	f013 fbce 	bl	801bb68 <itsdk_error_report>
 80083cc:	e0b2      	b.n	8008534 <lorawan_driver_LORA_Init+0x258>
  	    	mibReq.Type = MIB_APP_KEY;
 80083ce:	2108      	movs	r1, #8
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	2205      	movs	r2, #5
 80083d4:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppKey = config->config.otaa.appKey;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	187b      	adds	r3, r7, r1
 80083dc:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80083de:	000c      	movs	r4, r1
 80083e0:	187b      	adds	r3, r7, r1
 80083e2:	0018      	movs	r0, r3
 80083e4:	f006 fcb6 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_KEY;
 80083e8:	0021      	movs	r1, r4
 80083ea:	187b      	adds	r3, r7, r1
 80083ec:	2206      	movs	r2, #6
 80083ee:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkKey = config->config.otaa.nwkKey;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695a      	ldr	r2, [r3, #20]
 80083f4:	187b      	adds	r3, r7, r1
 80083f6:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	0018      	movs	r0, r3
 80083fc:	f006 fcaa 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	// Store the config element not in MIB
  	        bcopy(config->devEui,__loraWanState.join.otaa.devEui,8);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	4958      	ldr	r1, [pc, #352]	; (8008568 <lorawan_driver_LORA_Init+0x28c>)
 8008406:	2208      	movs	r2, #8
 8008408:	0018      	movs	r0, r3
 800840a:	f016 fe44 	bl	801f096 <bcopy>
  	        bcopy(config->config.otaa.appEui,__loraWanState.join.otaa.appEui,8);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	4956      	ldr	r1, [pc, #344]	; (800856c <lorawan_driver_LORA_Init+0x290>)
 8008414:	2208      	movs	r2, #8
 8008416:	0018      	movs	r0, r3
 8008418:	f016 fe3d 	bl	801f096 <bcopy>
 800841c:	e06e      	b.n	80084fc <lorawan_driver_LORA_Init+0x220>

  	    } else if (config->JoinType == __LORAWAN_ABP) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	799b      	ldrb	r3, [r3, #6]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d16a      	bne.n	80084fc <lorawan_driver_LORA_Init+0x220>

  	    	if (config->config.abp.devAddr == 0) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10e      	bne.n	800844c <lorawan_driver_LORA_Init+0x170>
				// Choose a random device address
				srand1( itsdk_getRandomSeed( ) );
 800842e:	f015 ff4d 	bl	801e2cc <itsdk_getRandomSeed>
 8008432:	0003      	movs	r3, r0
 8008434:	0018      	movs	r0, r3
 8008436:	f00d fabd 	bl	80159b4 <srand1>
				config->config.abp.devAddr = randr( 0, 0x01FFFFFF );
 800843a:	4b4d      	ldr	r3, [pc, #308]	; (8008570 <lorawan_driver_LORA_Init+0x294>)
 800843c:	0019      	movs	r1, r3
 800843e:	2000      	movs	r0, #0
 8008440:	f00d fac6 	bl	80159d0 <randr>
 8008444:	0003      	movs	r3, r0
 8008446:	001a      	movs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	61da      	str	r2, [r3, #28]
  	    	}

  	    	mibReq.Type = MIB_DEV_ADDR;
 800844c:	2108      	movs	r1, #8
 800844e:	187b      	adds	r3, r7, r1
 8008450:	2204      	movs	r2, #4
 8008452:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.DevAddr = config->config.abp.devAddr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	187b      	adds	r3, r7, r1
 800845a:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800845c:	000c      	movs	r4, r1
 800845e:	187b      	adds	r3, r7, r1
 8008460:	0018      	movs	r0, r3
 8008462:	f006 fc77 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NET_ID;
 8008466:	0021      	movs	r1, r4
 8008468:	187b      	adds	r3, r7, r1
 800846a:	2203      	movs	r2, #3
 800846c:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetID = ITSDK_LORAWAN_NETWORKID;
 800846e:	187b      	adds	r3, r7, r1
 8008470:	2200      	movs	r2, #0
 8008472:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008474:	000c      	movs	r4, r1
 8008476:	187b      	adds	r3, r7, r1
 8008478:	0018      	movs	r0, r3
 800847a:	f006 fc6b 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800847e:	0021      	movs	r1, r4
 8008480:	187b      	adds	r3, r7, r1
 8008482:	2209      	movs	r2, #9
 8008484:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.FNwkSIntKey = config->config.abp.FNwkSIntKey;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	187b      	adds	r3, r7, r1
 800848c:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800848e:	000c      	movs	r4, r1
 8008490:	187b      	adds	r3, r7, r1
 8008492:	0018      	movs	r0, r3
 8008494:	f006 fc5e 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8008498:	0021      	movs	r1, r4
 800849a:	187b      	adds	r3, r7, r1
 800849c:	220a      	movs	r2, #10
 800849e:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.SNwkSIntKey = config->config.abp.SNwkSIntKey;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084a8:	000c      	movs	r4, r1
 80084aa:	187b      	adds	r3, r7, r1
 80084ac:	0018      	movs	r0, r3
 80084ae:	f006 fc51 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_S_ENC_KEY;
 80084b2:	0021      	movs	r1, r4
 80084b4:	187b      	adds	r3, r7, r1
 80084b6:	220b      	movs	r2, #11
 80084b8:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkSEncKey = config->config.abp.nwkSEncKey;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695a      	ldr	r2, [r3, #20]
 80084be:	187b      	adds	r3, r7, r1
 80084c0:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084c2:	000c      	movs	r4, r1
 80084c4:	187b      	adds	r3, r7, r1
 80084c6:	0018      	movs	r0, r3
 80084c8:	f006 fc44 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_APP_S_KEY;
 80084cc:	0021      	movs	r1, r4
 80084ce:	187b      	adds	r3, r7, r1
 80084d0:	220c      	movs	r2, #12
 80084d2:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppSKey = config->config.abp.appSKey;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699a      	ldr	r2, [r3, #24]
 80084d8:	187b      	adds	r3, r7, r1
 80084da:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084dc:	000c      	movs	r4, r1
 80084de:	187b      	adds	r3, r7, r1
 80084e0:	0018      	movs	r0, r3
 80084e2:	f006 fc37 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NETWORK_ACTIVATION;
 80084e6:	0021      	movs	r1, r4
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	2201      	movs	r2, #1
 80084ec:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80084ee:	187b      	adds	r3, r7, r1
 80084f0:	2201      	movs	r2, #1
 80084f2:	711a      	strb	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80084f4:	187b      	adds	r3, r7, r1
 80084f6:	0018      	movs	r0, r3
 80084f8:	f006 fc2c 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

  	    }
  	    mibReq.Type = MIB_DEVICE_CLASS;
 80084fc:	2108      	movs	r1, #8
 80084fe:	187b      	adds	r3, r7, r1
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.Class= CLASS_A;
 8008504:	187b      	adds	r3, r7, r1
 8008506:	2200      	movs	r2, #0
 8008508:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 800850a:	000c      	movs	r4, r1
 800850c:	187b      	adds	r3, r7, r1
 800850e:	0018      	movs	r0, r3
 8008510:	f006 fc20 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

	    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008514:	0021      	movs	r1, r4
 8008516:	187b      	adds	r3, r7, r1
 8008518:	222b      	movs	r2, #43	; 0x2b
 800851a:	701a      	strb	r2, [r3, #0]
		mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
 800851c:	187b      	adds	r3, r7, r1
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8008522:	187b      	adds	r3, r7, r1
 8008524:	0018      	movs	r0, r3
 8008526:	f006 fc15 	bl	800ed54 <LoRaMacMibSetRequestConfirm>
                LoRaMacMibSetRequestConfirm( &mibReq );
		#endif


         // Init the Mac layer
         LoRaMacStart();
 800852a:	f006 f9ff 	bl	800e92c <LoRaMacStart>
         __loraWanState.joinState = LORAWAN_STATE_INITIALIZED;
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <lorawan_driver_LORA_Init+0x260>)
 8008530:	2201      	movs	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]

}
 8008534:	46bd      	mov	sp, r7
 8008536:	b009      	add	sp, #36	; 0x24
 8008538:	bd90      	pop	{r4, r7, pc}
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	2000032c 	.word	0x2000032c
 8008540:	2000030c 	.word	0x2000030c
 8008544:	08008a01 	.word	0x08008a01
 8008548:	08008a9d 	.word	0x08008a9d
 800854c:	08008ba5 	.word	0x08008ba5
 8008550:	08008c19 	.word	0x08008c19
 8008554:	2000031c 	.word	0x2000031c
 8008558:	080081a5 	.word	0x080081a5
 800855c:	08008209 	.word	0x08008209
 8008560:	0800823d 	.word	0x0800823d
 8008564:	d0000102 	.word	0xd0000102
 8008568:	20000340 	.word	0x20000340
 800856c:	20000348 	.word	0x20000348
 8008570:	01ffffff 	.word	0x01ffffff

08008574 <lorawan_driver_LORA_Join>:
// =======================================================================================

static MlmeReqJoin_t JoinParameters;
itsdk_lorawan_join_t lorawan_driver_LORA_Join(
		itsdk_lorawan_run_t 	  runMode
){
 8008574:	b5b0      	push	{r4, r5, r7, lr}
 8008576:	b08e      	sub	sp, #56	; 0x38
 8008578:	af00      	add	r7, sp, #0
 800857a:	0002      	movs	r2, r0
 800857c:	1dfb      	adds	r3, r7, #7
 800857e:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Join (mode:%d)\r\n",runMode));

    switch (__loraWanState.JoinType) {
 8008580:	4b3d      	ldr	r3, [pc, #244]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 8008582:	7cdb      	ldrb	r3, [r3, #19]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d002      	beq.n	800858e <lorawan_driver_LORA_Join+0x1a>
 8008588:	2b02      	cmp	r3, #2
 800858a:	d029      	beq.n	80085e0 <lorawan_driver_LORA_Join+0x6c>
 800858c:	e052      	b.n	8008634 <lorawan_driver_LORA_Join+0xc0>
    case __LORAWAN_OTAA:
    	{
    	    MlmeReq_t mlmeReq;
    	    mlmeReq.Type = MLME_JOIN;
 800858e:	2124      	movs	r1, #36	; 0x24
 8008590:	187b      	adds	r3, r7, r1
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
    	    mlmeReq.Req.Join.DevEui = __loraWanState.join.otaa.devEui;
 8008596:	187b      	adds	r3, r7, r1
 8008598:	4a38      	ldr	r2, [pc, #224]	; (800867c <lorawan_driver_LORA_Join+0x108>)
 800859a:	605a      	str	r2, [r3, #4]
    	    mlmeReq.Req.Join.JoinEui = __loraWanState.join.otaa.appEui;
 800859c:	187b      	adds	r3, r7, r1
 800859e:	4a38      	ldr	r2, [pc, #224]	; (8008680 <lorawan_driver_LORA_Join+0x10c>)
 80085a0:	609a      	str	r2, [r3, #8]
    	    mlmeReq.Req.Join.Datarate = __loraWanState.txDatarate;
 80085a2:	4b35      	ldr	r3, [pc, #212]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 80085a4:	7c9a      	ldrb	r2, [r3, #18]
 80085a6:	187b      	adds	r3, r7, r1
 80085a8:	731a      	strb	r2, [r3, #12]
    	    JoinParameters = mlmeReq.Req.Join;
 80085aa:	4a36      	ldr	r2, [pc, #216]	; (8008684 <lorawan_driver_LORA_Join+0x110>)
 80085ac:	187b      	adds	r3, r7, r1
 80085ae:	3304      	adds	r3, #4
 80085b0:	cb31      	ldmia	r3!, {r0, r4, r5}
 80085b2:	c231      	stmia	r2!, {r0, r4, r5}

    	    LoRaMacStatus_t r = LoRaMacMlmeRequest( &mlmeReq );
 80085b4:	2537      	movs	r5, #55	; 0x37
 80085b6:	197c      	adds	r4, r7, r5
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	0018      	movs	r0, r3
 80085bc:	f007 f882 	bl	800f6c4 <LoRaMacMlmeRequest>
 80085c0:	0003      	movs	r3, r0
 80085c2:	7023      	strb	r3, [r4, #0]
			if ( r != LORAMAC_STATUS_OK ) {
 80085c4:	197b      	adds	r3, r7, r5
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <lorawan_driver_LORA_Join+0x64>
				LOG_WARN_LORAWAN(("LoRaMacMlmeRequest return error(%d)\r\n",r));
				__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 80085cc:	4b2a      	ldr	r3, [pc, #168]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 80085ce:	2204      	movs	r2, #4
 80085d0:	701a      	strb	r2, [r3, #0]
				lorawan_driver_onJoinFailed();
 80085d2:	f013 ff3f 	bl	801c454 <lorawan_driver_onJoinFailed>
			} else {
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
			}
    	}
        break;
 80085d6:	e035      	b.n	8008644 <lorawan_driver_LORA_Join+0xd0>
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
 80085d8:	4b27      	ldr	r3, [pc, #156]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 80085da:	2202      	movs	r2, #2
 80085dc:	701a      	strb	r2, [r3, #0]
        break;
 80085de:	e031      	b.n	8008644 <lorawan_driver_LORA_Join+0xd0>
    	{
			// Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
			Version_t abpLrWanVersion;
			MibRequestConfirm_t mibReq;

			abpLrWanVersion.Fields.Major    = 1;
 80085e0:	2120      	movs	r1, #32
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	2201      	movs	r2, #1
 80085e6:	70da      	strb	r2, [r3, #3]
			abpLrWanVersion.Fields.Minor    = 0;
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	2200      	movs	r2, #0
 80085ec:	709a      	strb	r2, [r3, #2]
			abpLrWanVersion.Fields.Revision = 3;
 80085ee:	187b      	adds	r3, r7, r1
 80085f0:	2203      	movs	r2, #3
 80085f2:	705a      	strb	r2, [r3, #1]
			abpLrWanVersion.Fields.Rfu      = 0;
 80085f4:	187b      	adds	r3, r7, r1
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]

			mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80085fa:	2108      	movs	r1, #8
 80085fc:	187b      	adds	r3, r7, r1
 80085fe:	2230      	movs	r2, #48	; 0x30
 8008600:	701a      	strb	r2, [r3, #0]
			mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 8008602:	187b      	adds	r3, r7, r1
 8008604:	6a3a      	ldr	r2, [r7, #32]
 8008606:	605a      	str	r2, [r3, #4]
			LoRaMacMibSetRequestConfirm( &mibReq );
 8008608:	187b      	adds	r3, r7, r1
 800860a:	0018      	movs	r0, r3
 800860c:	f006 fba2 	bl	800ed54 <LoRaMacMibSetRequestConfirm>
			__loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 8008610:	4b19      	ldr	r3, [pc, #100]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 8008612:	2203      	movs	r2, #3
 8008614:	701a      	strb	r2, [r3, #0]
			__loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 8008616:	f014 fd69 	bl	801d0ec <itsdk_time_get_ms>
 800861a:	22fa      	movs	r2, #250	; 0xfa
 800861c:	0092      	lsls	r2, r2, #2
 800861e:	2300      	movs	r3, #0
 8008620:	f7f7 ff52 	bl	80004c8 <__aeabi_uldivmod>
 8008624:	0003      	movs	r3, r0
 8008626:	000c      	movs	r4, r1
 8008628:	001a      	movs	r2, r3
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 800862c:	605a      	str	r2, [r3, #4]


			lorawan_driver_onJoinSuccess();
 800862e:	f013 ff01 	bl	801c434 <lorawan_driver_onJoinSuccess>
    	}
        break;
 8008632:	e007      	b.n	8008644 <lorawan_driver_LORA_Join+0xd0>
    default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_JOIN,(uint16_t)__loraWanState.JoinType);
 8008634:	4b10      	ldr	r3, [pc, #64]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 8008636:	7cdb      	ldrb	r3, [r3, #19]
 8008638:	b29b      	uxth	r3, r3
 800863a:	4a13      	ldr	r2, [pc, #76]	; (8008688 <lorawan_driver_LORA_Join+0x114>)
 800863c:	0019      	movs	r1, r3
 800863e:	0010      	movs	r0, r2
 8008640:	f013 fa92 	bl	801bb68 <itsdk_error_report>
    }

    if (runMode==LORAWAN_RUN_SYNC) {
 8008644:	1dfb      	adds	r3, r7, #7
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <lorawan_driver_LORA_Join+0xfa>
        // Go for synchronous
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 800864c:	e001      	b.n	8008652 <lorawan_driver_LORA_Join+0xde>
    		lorawan_driver_waitUntilEndOfExecution();
 800864e:	f7ff fd9f 	bl	8008190 <lorawan_driver_waitUntilEndOfExecution>
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d0f8      	beq.n	800864e <lorawan_driver_LORA_Join+0xda>
    	}
    	if ( __loraWanState.joinState == LORAWAN_STATE_JOIN_SUCCESS ) {
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <lorawan_driver_LORA_Join+0x104>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b03      	cmp	r3, #3
 8008664:	d101      	bne.n	800866a <lorawan_driver_LORA_Join+0xf6>
    		return LORAWAN_JOIN_SUCCESS;
 8008666:	2301      	movs	r3, #1
 8008668:	e002      	b.n	8008670 <lorawan_driver_LORA_Join+0xfc>
    	} else {
    		return LORAWAN_JOIN_FAILED;
 800866a:	2302      	movs	r3, #2
 800866c:	e000      	b.n	8008670 <lorawan_driver_LORA_Join+0xfc>
    	}
    } else {
    	return LORAWAN_JOIN_PENDING;
 800866e:	2300      	movs	r3, #0
    }

}
 8008670:	0018      	movs	r0, r3
 8008672:	46bd      	mov	sp, r7
 8008674:	b00e      	add	sp, #56	; 0x38
 8008676:	bdb0      	pop	{r4, r5, r7, pc}
 8008678:	2000032c 	.word	0x2000032c
 800867c:	20000340 	.word	0x20000340
 8008680:	20000348 	.word	0x20000348
 8008684:	20000374 	.word	0x20000374
 8008688:	d0000103 	.word	0xd0000103

0800868c <lorawan_driver_LORA_Send>:
		uint8_t					  retry,
		itsdk_lorawan_run_t 	  runMode,
		uint8_t					* rPort,				// for sync mode only - on reception - Port
		uint8_t					* rSize,				// for sync mode only - on reception - DataSize - contains maxSize on input
		uint8_t					* rData					// for sync mode only - on reception - Data (bcopied)
){
 800868c:	b5b0      	push	{r4, r5, r7, lr}
 800868e:	b08e      	sub	sp, #56	; 0x38
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	000c      	movs	r4, r1
 8008696:	0010      	movs	r0, r2
 8008698:	0019      	movs	r1, r3
 800869a:	1cfb      	adds	r3, r7, #3
 800869c:	1c22      	adds	r2, r4, #0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	1cbb      	adds	r3, r7, #2
 80086a2:	1c02      	adds	r2, r0, #0
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	1c7b      	adds	r3, r7, #1
 80086a8:	1c0a      	adds	r2, r1, #0
 80086aa:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Send (mode:%d)\r\n",runMode));

    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (__loraWanState.joinState != LORAWAN_STATE_JOIN_SUCCESS ) return LORAWAN_SEND_NOT_JOINED;
 80086ac:	4b83      	ldr	r3, [pc, #524]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d001      	beq.n	80086ba <lorawan_driver_LORA_Send+0x2e>
 80086b6:	2306      	movs	r3, #6
 80086b8:	e0fc      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    if (__loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) return LORAWAN_SEND_ALREADYRUNNING;
 80086ba:	4b80      	ldr	r3, [pc, #512]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <lorawan_driver_LORA_Send+0x3c>
 80086c4:	2308      	movs	r3, #8
 80086c6:	e0f5      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>

    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true) {
 80086c8:	f7ff fafc 	bl	8007cc4 <certif_running>
 80086cc:	1e03      	subs	r3, r0, #0
 80086ce:	d001      	beq.n	80086d4 <lorawan_driver_LORA_Send+0x48>
      return false;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e0ef      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    }

    // Update the Datarate information this is important to correctly calculate the max size of frame
    // for the LoRaMacQueryTxPossible function
    MibRequestConfirm_t set;
    set.Type = MIB_CHANNELS_DATARATE;
 80086d4:	2408      	movs	r4, #8
 80086d6:	193b      	adds	r3, r7, r4
 80086d8:	2228      	movs	r2, #40	; 0x28
 80086da:	701a      	strb	r2, [r3, #0]
    set.Param.ChannelsDatarate = __convertDR(dataRate);
 80086dc:	1c7b      	adds	r3, r7, #1
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7ff fdbb 	bl	800825c <__convertDR>
 80086e6:	0003      	movs	r3, r0
 80086e8:	b25a      	sxtb	r2, r3
 80086ea:	193b      	adds	r3, r7, r4
 80086ec:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&set);
 80086ee:	193b      	adds	r3, r7, r4
 80086f0:	0018      	movs	r0, r3
 80086f2:	f006 fb2f 	bl	800ed54 <LoRaMacMibSetRequestConfirm>

    // Verify if a command can be proceed by the MAC Layer
    if( LoRaMacQueryTxPossible( size, &txInfo ) != LORAMAC_STATUS_OK ) {
 80086f6:	2320      	movs	r3, #32
 80086f8:	18fa      	adds	r2, r7, r3
 80086fa:	1cfb      	adds	r3, r7, #3
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	0011      	movs	r1, r2
 8008700:	0018      	movs	r0, r3
 8008702:	f006 f921 	bl	800e948 <LoRaMacQueryTxPossible>
 8008706:	1e03      	subs	r3, r0, #0
 8008708:	d013      	beq.n	8008732 <lorawan_driver_LORA_Send+0xa6>
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800870a:	2424      	movs	r4, #36	; 0x24
 800870c:	193b      	adds	r3, r7, r4
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008712:	193b      	adds	r3, r7, r4
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008718:	193b      	adds	r3, r7, r4
 800871a:	2200      	movs	r2, #0
 800871c:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = __convertDR(dataRate);
 800871e:	1c7b      	adds	r3, r7, #1
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	0018      	movs	r0, r3
 8008724:	f7ff fd9a 	bl	800825c <__convertDR>
 8008728:	0003      	movs	r3, r0
 800872a:	b25a      	sxtb	r2, r3
 800872c:	193b      	adds	r3, r7, r4
 800872e:	739a      	strb	r2, [r3, #14]
 8008730:	e03f      	b.n	80087b2 <lorawan_driver_LORA_Send+0x126>
        // @TODO here we do not send the expected payload so we may have a callback to notice this
		#warning "Manage the Flush MAC case"
    } else {
    	__loraWanState.lastRetries = 0;
 8008732:	4b62      	ldr	r3, [pc, #392]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 8008734:	2200      	movs	r2, #0
 8008736:	745a      	strb	r2, [r3, #17]
    	// Ok To proceed
        if( isTxConfirmed == LORAWAN_SEND_UNCONFIRMED )
 8008738:	2348      	movs	r3, #72	; 0x48
 800873a:	18fb      	adds	r3, r7, r3
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d119      	bne.n	8008776 <lorawan_driver_LORA_Send+0xea>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8008742:	2424      	movs	r4, #36	; 0x24
 8008744:	193b      	adds	r3, r7, r4
 8008746:	2200      	movs	r2, #0
 8008748:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = port;
 800874a:	193b      	adds	r3, r7, r4
 800874c:	1cba      	adds	r2, r7, #2
 800874e:	7812      	ldrb	r2, [r2, #0]
 8008750:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = size;
 8008752:	1cfb      	adds	r3, r7, #3
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	b29a      	uxth	r2, r3
 8008758:	193b      	adds	r3, r7, r4
 800875a:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = payload;
 800875c:	193b      	adds	r3, r7, r4
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = __convertDR(dataRate);
 8008762:	1c7b      	adds	r3, r7, #1
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	0018      	movs	r0, r3
 8008768:	f7ff fd78 	bl	800825c <__convertDR>
 800876c:	0003      	movs	r3, r0
 800876e:	b25a      	sxtb	r2, r3
 8008770:	193b      	adds	r3, r7, r4
 8008772:	739a      	strb	r2, [r3, #14]
 8008774:	e01d      	b.n	80087b2 <lorawan_driver_LORA_Send+0x126>
        }
        else
        {
        	mcpsReq.Type = MCPS_CONFIRMED;
 8008776:	2424      	movs	r4, #36	; 0x24
 8008778:	193b      	adds	r3, r7, r4
 800877a:	2201      	movs	r2, #1
 800877c:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = port;
 800877e:	193b      	adds	r3, r7, r4
 8008780:	1cba      	adds	r2, r7, #2
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = size;
 8008786:	1cfb      	adds	r3, r7, #3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	b29a      	uxth	r2, r3
 800878c:	193b      	adds	r3, r7, r4
 800878e:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = payload;
 8008790:	193b      	adds	r3, r7, r4
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = retry;
 8008796:	193b      	adds	r3, r7, r4
 8008798:	224c      	movs	r2, #76	; 0x4c
 800879a:	18ba      	adds	r2, r7, r2
 800879c:	7812      	ldrb	r2, [r2, #0]
 800879e:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = __convertDR(dataRate);
 80087a0:	1c7b      	adds	r3, r7, #1
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7ff fd59 	bl	800825c <__convertDR>
 80087aa:	0003      	movs	r3, r0
 80087ac:	b25a      	sxtb	r2, r3
 80087ae:	193b      	adds	r3, r7, r4
 80087b0:	739a      	strb	r2, [r3, #14]
        }
    }
    __loraWanState.sendState = LORAWAN_SEND_STATE_RUNNING;
 80087b2:	4b42      	ldr	r3, [pc, #264]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	705a      	strb	r2, [r3, #1]
    LoRaMacStatus_t r = LoRaMacMcpsRequest( &mcpsReq );
 80087b8:	2537      	movs	r5, #55	; 0x37
 80087ba:	197c      	adds	r4, r7, r5
 80087bc:	2324      	movs	r3, #36	; 0x24
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	0018      	movs	r0, r3
 80087c2:	f007 f8f1 	bl	800f9a8 <LoRaMacMcpsRequest>
 80087c6:	0003      	movs	r3, r0
 80087c8:	7023      	strb	r3, [r4, #0]
    switch ( r ) {
 80087ca:	197b      	adds	r3, r7, r5
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b07      	cmp	r3, #7
 80087d0:	d100      	bne.n	80087d4 <lorawan_driver_LORA_Send+0x148>
 80087d2:	e066      	b.n	80088a2 <lorawan_driver_LORA_Send+0x216>
 80087d4:	2b0b      	cmp	r3, #11
 80087d6:	d05f      	beq.n	8008898 <lorawan_driver_LORA_Send+0x20c>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d000      	beq.n	80087de <lorawan_driver_LORA_Send+0x152>
 80087dc:	e066      	b.n	80088ac <lorawan_driver_LORA_Send+0x220>
    	case LORAMAC_STATUS_OK:
    		if ( runMode==LORAWAN_RUN_SYNC ) {
 80087de:	2350      	movs	r3, #80	; 0x50
 80087e0:	18fb      	adds	r3, r7, r3
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d155      	bne.n	8008894 <lorawan_driver_LORA_Send+0x208>
    	    	while(  __loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) {
 80087e8:	e001      	b.n	80087ee <lorawan_driver_LORA_Send+0x162>
    	    		lorawan_driver_waitUntilEndOfExecution();
 80087ea:	f7ff fcd1 	bl	8008190 <lorawan_driver_waitUntilEndOfExecution>
    	    	while(  __loraWanState.sendState == LORAWAN_SEND_STATE_RUNNING ) {
 80087ee:	4b33      	ldr	r3, [pc, #204]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d0f8      	beq.n	80087ea <lorawan_driver_LORA_Send+0x15e>
    	    	}
    	    	switch(__loraWanState.sendState) {
 80087f8:	4b30      	ldr	r3, [pc, #192]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b07      	cmp	r3, #7
 8008800:	d846      	bhi.n	8008890 <lorawan_driver_LORA_Send+0x204>
 8008802:	009a      	lsls	r2, r3, #2
 8008804:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <lorawan_driver_LORA_Send+0x234>)
 8008806:	18d3      	adds	r3, r2, r3
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	469f      	mov	pc, r3
    	    	case LORAWAN_SEND_STATE_SENT:
    	    		return LORAWAN_SEND_SENT;
 800880c:	2301      	movs	r3, #1
 800880e:	e051      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK:
    	    	case LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING:
    	    		if ( rData != NULL && rPort != NULL && rSize != NULL) {
 8008810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d02f      	beq.n	8008876 <lorawan_driver_LORA_Send+0x1ea>
 8008816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008818:	2b00      	cmp	r3, #0
 800881a:	d02c      	beq.n	8008876 <lorawan_driver_LORA_Send+0x1ea>
 800881c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800881e:	2b00      	cmp	r3, #0
 8008820:	d029      	beq.n	8008876 <lorawan_driver_LORA_Send+0x1ea>
						*rPort = __lorawan_driver_lastDownlink.port;
 8008822:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <lorawan_driver_LORA_Send+0x238>)
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008828:	701a      	strb	r2, [r3, #0]
						if ( *rSize >= __lorawan_driver_lastDownlink.size) {
 800882a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	4b25      	ldr	r3, [pc, #148]	; (80088c4 <lorawan_driver_LORA_Send+0x238>)
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	429a      	cmp	r2, r3
 8008834:	d313      	bcc.n	800885e <lorawan_driver_LORA_Send+0x1d2>
							*rSize = __lorawan_driver_lastDownlink.size;
 8008836:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <lorawan_driver_LORA_Send+0x238>)
 8008838:	785a      	ldrb	r2, [r3, #1]
 800883a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800883c:	701a      	strb	r2, [r3, #0]
							bcopy(
								__lorawan_driver_lastDownlink.data,
								rData,
								((ITSDK_LORAWAN_MAX_DWNLNKSZ<__lorawan_driver_lastDownlink.size)?ITSDK_LORAWAN_MAX_DWNLNKSZ:__lorawan_driver_lastDownlink.size)
 800883e:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <lorawan_driver_LORA_Send+0x238>)
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	1c1a      	adds	r2, r3, #0
 8008844:	b2d3      	uxtb	r3, r2
 8008846:	2b20      	cmp	r3, #32
 8008848:	d901      	bls.n	800884e <lorawan_driver_LORA_Send+0x1c2>
 800884a:	2320      	movs	r3, #32
 800884c:	1c1a      	adds	r2, r3, #0
 800884e:	b2d3      	uxtb	r3, r2
							bcopy(
 8008850:	001a      	movs	r2, r3
 8008852:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008854:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <lorawan_driver_LORA_Send+0x23c>)
 8008856:	0018      	movs	r0, r3
 8008858:	f016 fc1d 	bl	801f096 <bcopy>
 800885c:	e00b      	b.n	8008876 <lorawan_driver_LORA_Send+0x1ea>
							);
						} else {
							bcopy(
								__lorawan_driver_lastDownlink.data,
								rData,
								*rSize
 800885e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008860:	781b      	ldrb	r3, [r3, #0]
							bcopy(
 8008862:	001a      	movs	r2, r3
 8008864:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008866:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <lorawan_driver_LORA_Send+0x23c>)
 8008868:	0018      	movs	r0, r3
 800886a:	f016 fc14 	bl	801f096 <bcopy>
							);
							*rSize = __lorawan_driver_lastDownlink.size;
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <lorawan_driver_LORA_Send+0x238>)
 8008870:	785a      	ldrb	r2, [r3, #1]
 8008872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008874:	701a      	strb	r2, [r3, #0]
						}
    	    		} else {
    	    			LOG_WARN_LORAWAN(("[LoRaWan] Receiving downlink but can't return it\r\n"));
    	    		}
    	    		return (__loraWanState.sendState ==LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK)?LORAWAN_SEND_ACKED_WITH_DOWNLINK:LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING;
 8008876:	4b11      	ldr	r3, [pc, #68]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b05      	cmp	r3, #5
 800887e:	d101      	bne.n	8008884 <lorawan_driver_LORA_Send+0x1f8>
 8008880:	2303      	movs	r3, #3
 8008882:	e017      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
 8008884:	2304      	movs	r3, #4
 8008886:	e015      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK:
    	    		return LORAWAN_SEND_ACKED;
 8008888:	2302      	movs	r3, #2
 800888a:	e013      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	    	case LORAWAN_SEND_STATE_NOTACKED:
    	    		return LORAWAN_SEND_SENT;
 800888c:	2301      	movs	r3, #1
 800888e:	e011      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	    	default:
    	    		LOG_INFO_LORAWAN(("Abnormal state : %d\r\n",__loraWanState.sendState));
    	    		return LORAWAN_SEND_FAILED;
 8008890:	2309      	movs	r3, #9
 8008892:	e00f      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	    	}
   	    		return LORAWAN_SEND_FAILED;	// Never reached
    		} else {
    			return LORAWAN_SEND_RUNNING;
 8008894:	2305      	movs	r3, #5
 8008896:	e00d      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    		}
    	case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_DUTYCYCLE;
 8008898:	4b08      	ldr	r3, [pc, #32]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 800889a:	2209      	movs	r2, #9
 800889c:	705a      	strb	r2, [r3, #1]
    		return LORAWAN_SEND_DUTYCYCLE;
 800889e:	2307      	movs	r3, #7
 80088a0:	e008      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	case LORAMAC_STATUS_NO_NETWORK_JOINED:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 80088a2:	4b06      	ldr	r3, [pc, #24]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80088a4:	2208      	movs	r2, #8
 80088a6:	705a      	strb	r2, [r3, #1]
    		return LORAWAN_SEND_NOT_JOINED;
 80088a8:	2306      	movs	r3, #6
 80088aa:	e003      	b.n	80088b4 <lorawan_driver_LORA_Send+0x228>
    	default:
    		__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <lorawan_driver_LORA_Send+0x230>)
 80088ae:	2208      	movs	r2, #8
 80088b0:	705a      	strb	r2, [r3, #1]
    		LOG_WARN_LORAWAN(("[LoRaWan] can't send err(%d)\r\n",r));
    		return LORAWAN_SEND_FAILED;
 80088b2:	2309      	movs	r3, #9
    }

}
 80088b4:	0018      	movs	r0, r3
 80088b6:	46bd      	mov	sp, r7
 80088b8:	b00e      	add	sp, #56	; 0x38
 80088ba:	bdb0      	pop	{r4, r5, r7, pc}
 80088bc:	2000032c 	.word	0x2000032c
 80088c0:	0802145c 	.word	0x0802145c
 80088c4:	20000350 	.word	0x20000350
 80088c8:	20000352 	.word	0x20000352

080088cc <lorawan_driver_LORA_AddChannel>:
		uint32_t 	frequency,
		uint32_t	rx1Frequency,
		uint8_t		minDataRate,
		uint8_t		maxDataRate,
		uint8_t		band
){
 80088cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ce:	b089      	sub	sp, #36	; 0x24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	0019      	movs	r1, r3
 80088d8:	260f      	movs	r6, #15
 80088da:	19bb      	adds	r3, r7, r6
 80088dc:	1c02      	adds	r2, r0, #0
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	200e      	movs	r0, #14
 80088e2:	183b      	adds	r3, r7, r0
 80088e4:	1c0a      	adds	r2, r1, #0
 80088e6:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_AddChannel (%d)\r\n",channelId));

	ChannelParams_t params;
	params.Frequency=frequency;
 80088e8:	2410      	movs	r4, #16
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	601a      	str	r2, [r3, #0]
	params.Rx1Frequency=rx1Frequency;
 80088f0:	193b      	adds	r3, r7, r4
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	605a      	str	r2, [r3, #4]
	params.Band=band;					// Sounds like this parameter is completed during initialization
 80088f6:	193b      	adds	r3, r7, r4
 80088f8:	2234      	movs	r2, #52	; 0x34
 80088fa:	2108      	movs	r1, #8
 80088fc:	468c      	mov	ip, r1
 80088fe:	44bc      	add	ip, r7
 8008900:	4462      	add	r2, ip
 8008902:	7812      	ldrb	r2, [r2, #0]
 8008904:	725a      	strb	r2, [r3, #9]
										// Band definitions are in the different RegionXXMMM.h file
										// This entry is the index in the band definition
	params.DrRange.Fields.Min=__convertDR(minDataRate);
 8008906:	183b      	adds	r3, r7, r0
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	0018      	movs	r0, r3
 800890c:	f7ff fca6 	bl	800825c <__convertDR>
 8008910:	0003      	movs	r3, r0
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	b25b      	sxtb	r3, r3
 8008916:	111b      	asrs	r3, r3, #4
 8008918:	b25a      	sxtb	r2, r3
 800891a:	193b      	adds	r3, r7, r4
 800891c:	1c11      	adds	r1, r2, #0
 800891e:	220f      	movs	r2, #15
 8008920:	0008      	movs	r0, r1
 8008922:	4010      	ands	r0, r2
 8008924:	7a1a      	ldrb	r2, [r3, #8]
 8008926:	210f      	movs	r1, #15
 8008928:	438a      	bics	r2, r1
 800892a:	1c11      	adds	r1, r2, #0
 800892c:	1c02      	adds	r2, r0, #0
 800892e:	430a      	orrs	r2, r1
 8008930:	721a      	strb	r2, [r3, #8]
	params.DrRange.Fields.Max=__convertDR(maxDataRate);
 8008932:	2330      	movs	r3, #48	; 0x30
 8008934:	2208      	movs	r2, #8
 8008936:	4694      	mov	ip, r2
 8008938:	44bc      	add	ip, r7
 800893a:	4463      	add	r3, ip
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	0018      	movs	r0, r3
 8008940:	f7ff fc8c 	bl	800825c <__convertDR>
 8008944:	0003      	movs	r3, r0
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	b25b      	sxtb	r3, r3
 800894a:	111b      	asrs	r3, r3, #4
 800894c:	b25a      	sxtb	r2, r3
 800894e:	0025      	movs	r5, r4
 8008950:	193b      	adds	r3, r7, r4
 8008952:	0110      	lsls	r0, r2, #4
 8008954:	7a1a      	ldrb	r2, [r3, #8]
 8008956:	210f      	movs	r1, #15
 8008958:	400a      	ands	r2, r1
 800895a:	1c11      	adds	r1, r2, #0
 800895c:	1c02      	adds	r2, r0, #0
 800895e:	430a      	orrs	r2, r1
 8008960:	721a      	strb	r2, [r3, #8]

	LoRaMacStatus_t r = LoRaMacChannelAdd(channelId, params);
 8008962:	231f      	movs	r3, #31
 8008964:	18fc      	adds	r4, r7, r3
 8008966:	197b      	adds	r3, r7, r5
 8008968:	19ba      	adds	r2, r7, r6
 800896a:	7810      	ldrb	r0, [r2, #0]
 800896c:	6819      	ldr	r1, [r3, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f006 fe6f 	bl	800f654 <LoRaMacChannelAdd>
 8008976:	0003      	movs	r3, r0
 8008978:	7023      	strb	r3, [r4, #0]
	switch ( r ) {
 800897a:	231f      	movs	r3, #31
 800897c:	18fb      	adds	r3, r7, r3
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <lorawan_driver_LORA_AddChannel+0xc2>
 8008984:	db07      	blt.n	8008996 <lorawan_driver_LORA_AddChannel+0xca>
 8008986:	3b03      	subs	r3, #3
 8008988:	2b03      	cmp	r3, #3
 800898a:	d804      	bhi.n	8008996 <lorawan_driver_LORA_AddChannel+0xca>
 800898c:	e001      	b.n	8008992 <lorawan_driver_LORA_AddChannel+0xc6>
		case LORAMAC_STATUS_OK:
			return LORAWAN_CHANNEL_SUCCESS;
 800898e:	2300      	movs	r3, #0
 8008990:	e002      	b.n	8008998 <lorawan_driver_LORA_AddChannel+0xcc>
		case LORAMAC_STATUS_PARAMETER_INVALID:
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		case LORAMAC_STATUS_DATARATE_INVALID:
		case LORAMAC_STATUS_FREQUENCY_INVALID:
			LOG_WARN_LORAWAN(("[LoRaWan] Invalid channel configuration (%d)\r\n",r));
			return LORAWAN_CHANNEL_INVALID_PARAMS;
 8008992:	2301      	movs	r3, #1
 8008994:	e000      	b.n	8008998 <lorawan_driver_LORA_AddChannel+0xcc>
		default:
			LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error (%d)\r\n",r));
			return LORAWAN_CHANNEL_FAILED;
 8008996:	2302      	movs	r3, #2
	}
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b009      	add	sp, #36	; 0x24
 800899e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089a0 <lorawan_driver_LORA_SelectChannels>:
 * Change channel mask to enable only the one we need
 * The channels parameter is a table containing x time 16b corresponding
 * to the possible channels
 * for US915 as an example we have 6 entries of 16b in the tab for the 72 possible channels
 */
itsdk_lorawan_channel_t lorawan_driver_LORA_SelectChannels(uint16_t region, uint16_t * channels ){
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	0002      	movs	r2, r0
 80089a8:	6039      	str	r1, [r7, #0]
 80089aa:	1dbb      	adds	r3, r7, #6
 80089ac:	801a      	strh	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_SelectChannels (%d)\r\n",region));
	ChanMaskSetParams_t chanMaskSet;
	chanMaskSet.ChannelsMaskType = CHANNELS_REINIT_MASK;
 80089ae:	2108      	movs	r1, #8
 80089b0:	187b      	adds	r3, r7, r1
 80089b2:	2202      	movs	r2, #2
 80089b4:	711a      	strb	r2, [r3, #4]
	chanMaskSet.ChannelsMaskIn = channels;
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	601a      	str	r2, [r3, #0]
	switch ( region ) {
 80089bc:	1dbb      	adds	r3, r7, #6
 80089be:	881a      	ldrh	r2, [r3, #0]
 80089c0:	2380      	movs	r3, #128	; 0x80
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d000      	beq.n	80089ca <lorawan_driver_LORA_SelectChannels+0x2a>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
			return LORAWAN_CHANNEL_SUCCESS;
		}
		break;
	default:
		break;
 80089c8:	e00a      	b.n	80089e0 <lorawan_driver_LORA_SelectChannels+0x40>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
 80089ca:	2308      	movs	r3, #8
 80089cc:	18fb      	adds	r3, r7, r3
 80089ce:	0019      	movs	r1, r3
 80089d0:	2008      	movs	r0, #8
 80089d2:	f00a faef 	bl	8012fb4 <RegionChanMaskSet>
 80089d6:	1e03      	subs	r3, r0, #0
 80089d8:	d001      	beq.n	80089de <lorawan_driver_LORA_SelectChannels+0x3e>
			return LORAWAN_CHANNEL_SUCCESS;
 80089da:	2300      	movs	r3, #0
 80089dc:	e001      	b.n	80089e2 <lorawan_driver_LORA_SelectChannels+0x42>
		break;
 80089de:	46c0      	nop			; (mov r8, r8)
	}
	LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error\r\n"));
	return LORAWAN_CHANNEL_FAILED;
 80089e0:	2302      	movs	r3, #2
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b004      	add	sp, #16
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <lorawan_driver_LORA_getJoinState+0x10>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	b2db      	uxtb	r3, r3
}
 80089f6:	0018      	movs	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	2000032c 	.word	0x2000032c

08008a00 <McpsConfirm>:
// MCPS ( TX & RX Operations ) LAYER
// =============================================================================================


static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]

    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )

	switch (mcpsConfirm->Status){
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <McpsConfirm+0x16>
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d028      	beq.n	8008a66 <McpsConfirm+0x66>
 8008a14:	e02f      	b.n	8008a76 <McpsConfirm+0x76>
	case LORAMAC_EVENT_INFO_STATUS_OK:
        switch( mcpsConfirm->McpsRequest )
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d009      	beq.n	8008a32 <McpsConfirm+0x32>
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d018      	beq.n	8008a54 <McpsConfirm+0x54>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11a      	bne.n	8008a5c <McpsConfirm+0x5c>
        {
            case MCPS_UNCONFIRMED:
            {
                // Check Datarate
                // Check TxPower
            	__loraWanState.sendState = LORAWAN_SEND_STATE_SENT;
 8008a26:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <McpsConfirm+0x98>)
 8008a28:	2202      	movs	r2, #2
 8008a2a:	705a      	strb	r2, [r3, #1]
            	lorawan_driver_onSendSuccess();
 8008a2c:	f013 fd9a 	bl	801c564 <lorawan_driver_onSendSuccess>
                break;
 8008a30:	e018      	b.n	8008a64 <McpsConfirm+0x64>
            case MCPS_CONFIRMED:
            {
                // Check Datarate
                // Check TxPower
                // Check AckReceived
            	if(mcpsConfirm->AckReceived){
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	791b      	ldrb	r3, [r3, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <McpsConfirm+0x44>
            		// There are two type of ACK : w & w/o downlink, we will set the status later in the MLME layer
                	//__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED;
                	lorawan_driver_onSendSuccess();
 8008a3a:	f013 fd93 	bl	801c564 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendAckSuccess();
 8008a3e:	f013 fd7f 	bl	801c540 <lorawan_driver_onSendAckSuccess>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
                	lorawan_driver_onSendSuccess();
                	lorawan_driver_onSendSuccessAckFailed();
            	}
                // Check NbTrials
                break;
 8008a42:	e00f      	b.n	8008a64 <McpsConfirm+0x64>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 8008a44:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <McpsConfirm+0x98>)
 8008a46:	2207      	movs	r2, #7
 8008a48:	705a      	strb	r2, [r3, #1]
                	lorawan_driver_onSendSuccess();
 8008a4a:	f013 fd8b 	bl	801c564 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendSuccessAckFailed();
 8008a4e:	f013 fd65 	bl	801c51c <lorawan_driver_onSendSuccessAckFailed>
                break;
 8008a52:	e007      	b.n	8008a64 <McpsConfirm+0x64>
            }
            case MCPS_PROPRIETARY:
            {
            	__loraWanState.sendState = LORAWAN_SEND_STATE_NONE;
 8008a54:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <McpsConfirm+0x98>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	705a      	strb	r2, [r3, #1]
            	break;
 8008a5a:	e003      	b.n	8008a64 <McpsConfirm+0x64>
            }
            default:
            	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <McpsConfirm+0x98>)
 8008a5e:	2208      	movs	r2, #8
 8008a60:	705a      	strb	r2, [r3, #1]
                break;
 8008a62:	46c0      	nop			; (mov r8, r8)
        }
        break;
 8008a64:	e00a      	b.n	8008a7c <McpsConfirm+0x7c>
    case LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT:
    	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 8008a66:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <McpsConfirm+0x98>)
 8008a68:	2207      	movs	r2, #7
 8008a6a:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onSendSuccess();
 8008a6c:	f013 fd7a 	bl	801c564 <lorawan_driver_onSendSuccess>
    	lorawan_driver_onSendSuccessAckFailed();
 8008a70:	f013 fd54 	bl	801c51c <lorawan_driver_onSendSuccessAckFailed>
    	break;
 8008a74:	e002      	b.n	8008a7c <McpsConfirm+0x7c>
    default:
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSc returns(%d)\r\n",mcpsConfirm->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <McpsConfirm+0x98>)
 8008a78:	2208      	movs	r2, #8
 8008a7a:	705a      	strb	r2, [r3, #1]
	}

    __loraWanState.upLinkCounter = mcpsConfirm->UpLinkCounter;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <McpsConfirm+0x98>)
 8008a84:	815a      	strh	r2, [r3, #10]
    __loraWanState.lastRetries = mcpsConfirm->NbRetries;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	795a      	ldrb	r2, [r3, #5]
 8008a8a:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <McpsConfirm+0x98>)
 8008a8c:	745a      	strb	r2, [r3, #17]

    //implicitely desactivated when VERBOSE_LEVEL < 2
    //TraceUpLinkFrame(mcpsConfirm);

}
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b002      	add	sp, #8
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	46c0      	nop			; (mov r8, r8)
 8008a98:	2000032c 	.word	0x2000032c

08008a9c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)

    //lora_AppData_t _AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <McpsIndication+0x18>
    {
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSi returns(%d)\r\n",mcpsIndication->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008aac:	4b39      	ldr	r3, [pc, #228]	; (8008b94 <McpsIndication+0xf8>)
 8008aae:	2208      	movs	r2, #8
 8008ab0:	705a      	strb	r2, [r3, #1]
        return;
 8008ab2:	e06c      	b.n	8008b8e <McpsIndication+0xf2>
    }

    switch( mcpsIndication->McpsIndication )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d008      	beq.n	8008ace <McpsIndication+0x32>
 8008abc:	dc02      	bgt.n	8008ac4 <McpsIndication+0x28>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d007      	beq.n	8008ad2 <McpsIndication+0x36>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 8008ac2:	e00b      	b.n	8008adc <McpsIndication+0x40>
    switch( mcpsIndication->McpsIndication )
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d006      	beq.n	8008ad6 <McpsIndication+0x3a>
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d006      	beq.n	8008ada <McpsIndication+0x3e>
            break;
 8008acc:	e006      	b.n	8008adc <McpsIndication+0x40>
            break;
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	e004      	b.n	8008adc <McpsIndication+0x40>
            break;
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	e002      	b.n	8008adc <McpsIndication+0x40>
            break;
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	e000      	b.n	8008adc <McpsIndication+0x40>
            break;
 8008ada:	46c0      	nop			; (mov r8, r8)
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8008adc:	f7ff f8f2 	bl	8007cc4 <certif_running>
 8008ae0:	1e03      	subs	r3, r0, #0
 8008ae2:	d001      	beq.n	8008ae8 <McpsIndication+0x4c>
    {
      certif_DownLinkIncrement( );
 8008ae4:	f7ff f8f8 	bl	8007cd8 <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7b5b      	ldrb	r3, [r3, #13]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d033      	beq.n	8008b58 <McpsIndication+0xbc>
    {
      switch( mcpsIndication->Port )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	78db      	ldrb	r3, [r3, #3]
 8008af4:	2be0      	cmp	r3, #224	; 0xe0
 8008af6:	d109      	bne.n	8008b0c <McpsIndication+0x70>
      {
        case CERTIF_PORT:
          // revoir cette partie... pas top de garder des param comme ca en rab
          certif_rx( mcpsIndication, &JoinParameters );
 8008af8:	4a27      	ldr	r2, [pc, #156]	; (8008b98 <McpsIndication+0xfc>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	0011      	movs	r1, r2
 8008afe:	0018      	movs	r0, r3
 8008b00:	f7ff f9ac 	bl	8007e5c <certif_rx>
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 8008b04:	4b23      	ldr	r3, [pc, #140]	; (8008b94 <McpsIndication+0xf8>)
 8008b06:	2205      	movs	r2, #5
 8008b08:	705a      	strb	r2, [r3, #1]
          break;
 8008b0a:	e028      	b.n	8008b5e <McpsIndication+0xc2>
        default:

          LOG_INFO_LORAWAN(("### Data received\r\n"));
          __lorawan_driver_lastDownlink.size = mcpsIndication->BufferSize;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7b1a      	ldrb	r2, [r3, #12]
 8008b10:	4b22      	ldr	r3, [pc, #136]	; (8008b9c <McpsIndication+0x100>)
 8008b12:	705a      	strb	r2, [r3, #1]
          __lorawan_driver_lastDownlink.port = mcpsIndication->Port;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	78da      	ldrb	r2, [r3, #3]
 8008b18:	4b20      	ldr	r3, [pc, #128]	; (8008b9c <McpsIndication+0x100>)
 8008b1a:	701a      	strb	r2, [r3, #0]
		  bcopy(
				mcpsIndication->Buffer,
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6898      	ldr	r0, [r3, #8]
				__lorawan_driver_lastDownlink.data,
				((mcpsIndication->BufferSize<=ITSDK_LORAWAN_MAX_DWNLNKSZ)?mcpsIndication->BufferSize:ITSDK_LORAWAN_MAX_DWNLNKSZ)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7b1b      	ldrb	r3, [r3, #12]
 8008b24:	1c1a      	adds	r2, r3, #0
 8008b26:	b2d3      	uxtb	r3, r2
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d901      	bls.n	8008b30 <McpsIndication+0x94>
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	1c1a      	adds	r2, r3, #0
 8008b30:	b2d3      	uxtb	r3, r2
		  bcopy(
 8008b32:	001a      	movs	r2, r3
 8008b34:	4b1a      	ldr	r3, [pc, #104]	; (8008ba0 <McpsIndication+0x104>)
 8008b36:	0019      	movs	r1, r3
 8008b38:	f016 faad 	bl	801f096 <bcopy>
          );
          lorawan_driver_onDataReception(
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	78d8      	ldrb	r0, [r3, #3]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6899      	ldr	r1, [r3, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7b1b      	ldrb	r3, [r3, #12]
 8008b48:	001a      	movs	r2, r3
 8008b4a:	f013 fd1d 	bl	801c588 <lorawan_driver_onDataReception>
        		  mcpsIndication->Port,
				  mcpsIndication->Buffer,
				  mcpsIndication->BufferSize
          );
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 8008b4e:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <McpsIndication+0xf8>)
 8008b50:	2205      	movs	r2, #5
 8008b52:	705a      	strb	r2, [r3, #1]
          break;
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	e002      	b.n	8008b5e <McpsIndication+0xc2>
      }
    } else {
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK;
 8008b58:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <McpsIndication+0xf8>)
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	705a      	strb	r2, [r3, #1]

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	795b      	ldrb	r3, [r3, #5]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d104      	bne.n	8008b70 <McpsIndication+0xd4>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
    	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING;
 8008b66:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <McpsIndication+0xf8>)
 8008b68:	2206      	movs	r2, #6
 8008b6a:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onPendingDownlink();
 8008b6c:	f013 fd2c 	bl	801c5c8 <lorawan_driver_onPendingDownlink>

    }

    __loraWanState.lastRssi = mcpsIndication->Rssi;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	220e      	movs	r2, #14
 8008b74:	5e9a      	ldrsh	r2, [r3, r2]
 8008b76:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <McpsIndication+0xf8>)
 8008b78:	81da      	strh	r2, [r3, #14]
    __loraWanState.downlinkCounter = mcpsIndication->DownLinkCounter;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <McpsIndication+0xf8>)
 8008b82:	819a      	strh	r2, [r3, #12]
    __loraWanState.lastSnr = mcpsIndication->Snr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2210      	movs	r2, #16
 8008b88:	569a      	ldrsb	r2, [r3, r2]
 8008b8a:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <McpsIndication+0xf8>)
 8008b8c:	741a      	strb	r2, [r3, #16]

}
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b002      	add	sp, #8
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	2000032c 	.word	0x2000032c
 8008b98:	20000374 	.word	0x20000374
 8008b9c:	20000350 	.word	0x20000350
 8008ba0:	20000352 	.word	0x20000352

08008ba4 <MlmeConfirm>:
// =============================================================================================
// MLME ( Management ) LAYER
// =============================================================================================

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)

    switch( mlmeConfirm->MlmeRequest )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <MlmeConfirm+0x16>
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d01c      	beq.n	8008bf2 <MlmeConfirm+0x4e>
            }
        }
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8008bb8:	e028      	b.n	8008c0c <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d111      	bne.n	8008be6 <MlmeConfirm+0x42>
              __loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 8008bc2:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <MlmeConfirm+0x70>)
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	701a      	strb	r2, [r3, #0]
              __loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 8008bc8:	f014 fa90 	bl	801d0ec <itsdk_time_get_ms>
 8008bcc:	22fa      	movs	r2, #250	; 0xfa
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f7f7 fc79 	bl	80004c8 <__aeabi_uldivmod>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	000c      	movs	r4, r1
 8008bda:	001a      	movs	r2, r3
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <MlmeConfirm+0x70>)
 8008bde:	605a      	str	r2, [r3, #4]
              lorawan_driver_onJoinSuccess();
 8008be0:	f013 fc28 	bl	801c434 <lorawan_driver_onJoinSuccess>
            break;
 8008be4:	e012      	b.n	8008c0c <MlmeConfirm+0x68>
            	__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <MlmeConfirm+0x70>)
 8008be8:	2204      	movs	r2, #4
 8008bea:	701a      	strb	r2, [r3, #0]
            	lorawan_driver_onJoinFailed();
 8008bec:	f013 fc32 	bl	801c454 <lorawan_driver_onJoinFailed>
            break;
 8008bf0:	e00c      	b.n	8008c0c <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d107      	bne.n	8008c0a <MlmeConfirm+0x66>
                if (certif_running() == true ){
 8008bfa:	f7ff f863 	bl	8007cc4 <certif_running>
 8008bfe:	1e03      	subs	r3, r0, #0
 8008c00:	d003      	beq.n	8008c0a <MlmeConfirm+0x66>
                     certif_linkCheck(mlmeConfirm);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7ff f877 	bl	8007cf8 <certif_linkCheck>
            break;
 8008c0a:	46c0      	nop			; (mov r8, r8)
    }
}
 8008c0c:	46c0      	nop			; (mov r8, r8)
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b003      	add	sp, #12
 8008c12:	bd90      	pop	{r4, r7, pc}
 8008c14:	2000032c 	.word	0x2000032c

08008c18 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b06      	cmp	r3, #6
 8008c26:	d000      	beq.n	8008c2a <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8008c28:	e002      	b.n	8008c30 <MlmeIndication+0x18>
        	lorawan_driver_onTxNeeded();
 8008c2a:	f7ff fb11 	bl	8008250 <lorawan_driver_onTxNeeded>
            break;
 8008c2e:	46c0      	nop			; (mov r8, r8)
    }
}
 8008c30:	46c0      	nop			; (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b002      	add	sp, #8
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	7852      	ldrb	r2, [r2, #1]
 8008c52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3302      	adds	r3, #2
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	7892      	ldrb	r2, [r2, #2]
 8008c5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3303      	adds	r3, #3
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	78d2      	ldrb	r2, [r2, #3]
 8008c66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	7912      	ldrb	r2, [r2, #4]
 8008c70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3305      	adds	r3, #5
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	7952      	ldrb	r2, [r2, #5]
 8008c7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3306      	adds	r3, #6
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	7992      	ldrb	r2, [r2, #6]
 8008c84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3307      	adds	r3, #7
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	79d2      	ldrb	r2, [r2, #7]
 8008c8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3308      	adds	r3, #8
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	7a12      	ldrb	r2, [r2, #8]
 8008c98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3309      	adds	r3, #9
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	7a52      	ldrb	r2, [r2, #9]
 8008ca2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	330a      	adds	r3, #10
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	7a92      	ldrb	r2, [r2, #10]
 8008cac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	330b      	adds	r3, #11
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	7ad2      	ldrb	r2, [r2, #11]
 8008cb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	330c      	adds	r3, #12
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	7b12      	ldrb	r2, [r2, #12]
 8008cc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	330d      	adds	r3, #13
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	7b52      	ldrb	r2, [r2, #13]
 8008cca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	330e      	adds	r3, #14
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	7b92      	ldrb	r2, [r2, #14]
 8008cd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	330f      	adds	r3, #15
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	7bd2      	ldrb	r2, [r2, #15]
 8008cde:	701a      	strb	r2, [r3, #0]
#endif
}
 8008ce0:	46c0      	nop			; (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b002      	add	sp, #8
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	1dfb      	adds	r3, r7, #7
 8008cf4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8008cf6:	e007      	b.n	8008d08 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	1c53      	adds	r3, r2, #1
 8008cfc:	60bb      	str	r3, [r7, #8]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1c59      	adds	r1, r3, #1
 8008d02:	60f9      	str	r1, [r7, #12]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8008d08:	1dfb      	adds	r3, r7, #7
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	1dfa      	adds	r2, r7, #7
 8008d0e:	1e59      	subs	r1, r3, #1
 8008d10:	7011      	strb	r1, [r2, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <copy_block_nn+0x10>
}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b004      	add	sp, #16
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <xor_block>:

static void xor_block( void *d, const void *s )
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4053      	eors	r3, r2
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	7819      	ldrb	r1, [r3, #0]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	781a      	ldrb	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	404a      	eors	r2, r1
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3302      	adds	r3, #2
 8008d52:	7819      	ldrb	r1, [r3, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	3302      	adds	r3, #2
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	404a      	eors	r2, r1
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3303      	adds	r3, #3
 8008d68:	7819      	ldrb	r1, [r3, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3303      	adds	r3, #3
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3303      	adds	r3, #3
 8008d74:	404a      	eors	r2, r1
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	7819      	ldrb	r1, [r3, #0]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	3304      	adds	r3, #4
 8008d84:	781a      	ldrb	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	404a      	eors	r2, r1
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3305      	adds	r3, #5
 8008d94:	7819      	ldrb	r1, [r3, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	3305      	adds	r3, #5
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3305      	adds	r3, #5
 8008da0:	404a      	eors	r2, r1
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3306      	adds	r3, #6
 8008daa:	7819      	ldrb	r1, [r3, #0]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	3306      	adds	r3, #6
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3306      	adds	r3, #6
 8008db6:	404a      	eors	r2, r1
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3307      	adds	r3, #7
 8008dc0:	7819      	ldrb	r1, [r3, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3307      	adds	r3, #7
 8008dcc:	404a      	eors	r2, r1
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	7819      	ldrb	r1, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	3308      	adds	r3, #8
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3308      	adds	r3, #8
 8008de2:	404a      	eors	r2, r1
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3309      	adds	r3, #9
 8008dec:	7819      	ldrb	r1, [r3, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	3309      	adds	r3, #9
 8008df2:	781a      	ldrb	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3309      	adds	r3, #9
 8008df8:	404a      	eors	r2, r1
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	330a      	adds	r3, #10
 8008e02:	7819      	ldrb	r1, [r3, #0]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	330a      	adds	r3, #10
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	330a      	adds	r3, #10
 8008e0e:	404a      	eors	r2, r1
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	330b      	adds	r3, #11
 8008e18:	7819      	ldrb	r1, [r3, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	330b      	adds	r3, #11
 8008e1e:	781a      	ldrb	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	330b      	adds	r3, #11
 8008e24:	404a      	eors	r2, r1
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	7819      	ldrb	r1, [r3, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	330c      	adds	r3, #12
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	404a      	eors	r2, r1
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	330d      	adds	r3, #13
 8008e44:	7819      	ldrb	r1, [r3, #0]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	330d      	adds	r3, #13
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	330d      	adds	r3, #13
 8008e50:	404a      	eors	r2, r1
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	330e      	adds	r3, #14
 8008e5a:	7819      	ldrb	r1, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	330e      	adds	r3, #14
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	330e      	adds	r3, #14
 8008e66:	404a      	eors	r2, r1
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	330f      	adds	r3, #15
 8008e70:	7819      	ldrb	r1, [r3, #0]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	330f      	adds	r3, #15
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	330f      	adds	r3, #15
 8008e7c:	404a      	eors	r2, r1
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
#endif
}
 8008e82:	46c0      	nop			; (mov r8, r8)
 8008e84:	46bd      	mov	sp, r7
 8008e86:	b002      	add	sp, #8
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	4053      	eors	r3, r2
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	7819      	ldrb	r1, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	404a      	eors	r2, r1
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	3302      	adds	r3, #2
 8008ec0:	7819      	ldrb	r1, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	781a      	ldrb	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3302      	adds	r3, #2
 8008ecc:	404a      	eors	r2, r1
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	7819      	ldrb	r1, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3303      	adds	r3, #3
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3303      	adds	r3, #3
 8008ee2:	404a      	eors	r2, r1
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	3304      	adds	r3, #4
 8008eec:	7819      	ldrb	r1, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	781a      	ldrb	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	404a      	eors	r2, r1
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	3305      	adds	r3, #5
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3305      	adds	r3, #5
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3305      	adds	r3, #5
 8008f0e:	404a      	eors	r2, r1
 8008f10:	b2d2      	uxtb	r2, r2
 8008f12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3306      	adds	r3, #6
 8008f18:	7819      	ldrb	r1, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3306      	adds	r3, #6
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3306      	adds	r3, #6
 8008f24:	404a      	eors	r2, r1
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	3307      	adds	r3, #7
 8008f2e:	7819      	ldrb	r1, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3307      	adds	r3, #7
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3307      	adds	r3, #7
 8008f3a:	404a      	eors	r2, r1
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	3308      	adds	r3, #8
 8008f44:	7819      	ldrb	r1, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3308      	adds	r3, #8
 8008f4a:	781a      	ldrb	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	404a      	eors	r2, r1
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3309      	adds	r3, #9
 8008f5a:	7819      	ldrb	r1, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3309      	adds	r3, #9
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3309      	adds	r3, #9
 8008f66:	404a      	eors	r2, r1
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	330a      	adds	r3, #10
 8008f70:	7819      	ldrb	r1, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	330a      	adds	r3, #10
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	330a      	adds	r3, #10
 8008f7c:	404a      	eors	r2, r1
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	330b      	adds	r3, #11
 8008f86:	7819      	ldrb	r1, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	330b      	adds	r3, #11
 8008f8c:	781a      	ldrb	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	330b      	adds	r3, #11
 8008f92:	404a      	eors	r2, r1
 8008f94:	b2d2      	uxtb	r2, r2
 8008f96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	7819      	ldrb	r1, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	404a      	eors	r2, r1
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	330d      	adds	r3, #13
 8008fb2:	7819      	ldrb	r1, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	330d      	adds	r3, #13
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	330d      	adds	r3, #13
 8008fbe:	404a      	eors	r2, r1
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	330e      	adds	r3, #14
 8008fc8:	7819      	ldrb	r1, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	330e      	adds	r3, #14
 8008fce:	781a      	ldrb	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	330e      	adds	r3, #14
 8008fd4:	404a      	eors	r2, r1
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	330f      	adds	r3, #15
 8008fde:	7819      	ldrb	r1, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	330f      	adds	r3, #15
 8008fe4:	781a      	ldrb	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	330f      	adds	r3, #15
 8008fea:	404a      	eors	r2, r1
 8008fec:	b2d2      	uxtb	r2, r2
 8008fee:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8008ff0:	46c0      	nop			; (mov r8, r8)
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b004      	add	sp, #16
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f7ff fe88 	bl	8008d1e <xor_block>
}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	46bd      	mov	sp, r7
 8009012:	b002      	add	sp, #8
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	001a      	movs	r2, r3
 8009026:	4b4c      	ldr	r3, [pc, #304]	; (8009158 <shift_sub_rows+0x140>)
 8009028:	5c9a      	ldrb	r2, [r3, r2]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3304      	adds	r3, #4
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	0019      	movs	r1, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	4a47      	ldr	r2, [pc, #284]	; (8009158 <shift_sub_rows+0x140>)
 800903c:	5c52      	ldrb	r2, [r2, r1]
 800903e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3308      	adds	r3, #8
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	0019      	movs	r1, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3308      	adds	r3, #8
 800904c:	4a42      	ldr	r2, [pc, #264]	; (8009158 <shift_sub_rows+0x140>)
 800904e:	5c52      	ldrb	r2, [r2, r1]
 8009050:	701a      	strb	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	330c      	adds	r3, #12
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	0019      	movs	r1, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	330c      	adds	r3, #12
 800905e:	4a3e      	ldr	r2, [pc, #248]	; (8009158 <shift_sub_rows+0x140>)
 8009060:	5c52      	ldrb	r2, [r2, r1]
 8009062:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8009064:	200f      	movs	r0, #15
 8009066:	183b      	adds	r3, r7, r0
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7852      	ldrb	r2, [r2, #1]
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3305      	adds	r3, #5
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	0019      	movs	r1, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3301      	adds	r3, #1
 800907a:	4a37      	ldr	r2, [pc, #220]	; (8009158 <shift_sub_rows+0x140>)
 800907c:	5c52      	ldrb	r2, [r2, r1]
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3309      	adds	r3, #9
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	0019      	movs	r1, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3305      	adds	r3, #5
 800908c:	4a32      	ldr	r2, [pc, #200]	; (8009158 <shift_sub_rows+0x140>)
 800908e:	5c52      	ldrb	r2, [r2, r1]
 8009090:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	330d      	adds	r3, #13
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	0019      	movs	r1, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3309      	adds	r3, #9
 800909e:	4a2e      	ldr	r2, [pc, #184]	; (8009158 <shift_sub_rows+0x140>)
 80090a0:	5c52      	ldrb	r2, [r2, r1]
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	183b      	adds	r3, r7, r0
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	330d      	adds	r3, #13
 80090ac:	492a      	ldr	r1, [pc, #168]	; (8009158 <shift_sub_rows+0x140>)
 80090ae:	5c8a      	ldrb	r2, [r1, r2]
 80090b0:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80090b2:	183b      	adds	r3, r7, r0
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	7892      	ldrb	r2, [r2, #2]
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	330a      	adds	r3, #10
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	0019      	movs	r1, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3302      	adds	r3, #2
 80090c6:	4a24      	ldr	r2, [pc, #144]	; (8009158 <shift_sub_rows+0x140>)
 80090c8:	5c52      	ldrb	r2, [r2, r1]
 80090ca:	701a      	strb	r2, [r3, #0]
 80090cc:	183b      	adds	r3, r7, r0
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	330a      	adds	r3, #10
 80090d4:	4920      	ldr	r1, [pc, #128]	; (8009158 <shift_sub_rows+0x140>)
 80090d6:	5c8a      	ldrb	r2, [r1, r2]
 80090d8:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80090da:	183b      	adds	r3, r7, r0
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	7992      	ldrb	r2, [r2, #6]
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	330e      	adds	r3, #14
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	0019      	movs	r1, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3306      	adds	r3, #6
 80090ee:	4a1a      	ldr	r2, [pc, #104]	; (8009158 <shift_sub_rows+0x140>)
 80090f0:	5c52      	ldrb	r2, [r2, r1]
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	183b      	adds	r3, r7, r0
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	330e      	adds	r3, #14
 80090fc:	4916      	ldr	r1, [pc, #88]	; (8009158 <shift_sub_rows+0x140>)
 80090fe:	5c8a      	ldrb	r2, [r1, r2]
 8009100:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8009102:	183b      	adds	r3, r7, r0
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7bd2      	ldrb	r2, [r2, #15]
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	330b      	adds	r3, #11
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	0019      	movs	r1, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	330f      	adds	r3, #15
 8009116:	4a10      	ldr	r2, [pc, #64]	; (8009158 <shift_sub_rows+0x140>)
 8009118:	5c52      	ldrb	r2, [r2, r1]
 800911a:	701a      	strb	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3307      	adds	r3, #7
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	0019      	movs	r1, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	330b      	adds	r3, #11
 8009128:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <shift_sub_rows+0x140>)
 800912a:	5c52      	ldrb	r2, [r2, r1]
 800912c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3303      	adds	r3, #3
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	0019      	movs	r1, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3307      	adds	r3, #7
 800913a:	4a07      	ldr	r2, [pc, #28]	; (8009158 <shift_sub_rows+0x140>)
 800913c:	5c52      	ldrb	r2, [r2, r1]
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	183b      	adds	r3, r7, r0
 8009142:	781a      	ldrb	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3303      	adds	r3, #3
 8009148:	4903      	ldr	r1, [pc, #12]	; (8009158 <shift_sub_rows+0x140>)
 800914a:	5c8a      	ldrb	r2, [r1, r2]
 800914c:	701a      	strb	r2, [r3, #0]
}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	46bd      	mov	sp, r7
 8009152:	b004      	add	sp, #16
 8009154:	bd80      	pop	{r7, pc}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	0802147c 	.word	0x0802147c

0800915c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800915c:	b590      	push	{r4, r7, lr}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	2008      	movs	r0, #8
 8009168:	0004      	movs	r4, r0
 800916a:	183b      	adds	r3, r7, r0
 800916c:	0011      	movs	r1, r2
 800916e:	0018      	movs	r0, r3
 8009170:	f7ff fd62 	bl	8008c38 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8009174:	0020      	movs	r0, r4
 8009176:	183b      	adds	r3, r7, r0
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	001a      	movs	r2, r3
 800917c:	4be7      	ldr	r3, [pc, #924]	; (800951c <mix_sub_columns+0x3c0>)
 800917e:	5c9a      	ldrb	r2, [r3, r2]
 8009180:	183b      	adds	r3, r7, r0
 8009182:	795b      	ldrb	r3, [r3, #5]
 8009184:	0019      	movs	r1, r3
 8009186:	4be6      	ldr	r3, [pc, #920]	; (8009520 <mix_sub_columns+0x3c4>)
 8009188:	5c5b      	ldrb	r3, [r3, r1]
 800918a:	4053      	eors	r3, r2
 800918c:	b2da      	uxtb	r2, r3
 800918e:	183b      	adds	r3, r7, r0
 8009190:	7a9b      	ldrb	r3, [r3, #10]
 8009192:	0019      	movs	r1, r3
 8009194:	4be3      	ldr	r3, [pc, #908]	; (8009524 <mix_sub_columns+0x3c8>)
 8009196:	5c5b      	ldrb	r3, [r3, r1]
 8009198:	4053      	eors	r3, r2
 800919a:	b2da      	uxtb	r2, r3
 800919c:	183b      	adds	r3, r7, r0
 800919e:	7bdb      	ldrb	r3, [r3, #15]
 80091a0:	0019      	movs	r1, r3
 80091a2:	4be0      	ldr	r3, [pc, #896]	; (8009524 <mix_sub_columns+0x3c8>)
 80091a4:	5c5b      	ldrb	r3, [r3, r1]
 80091a6:	4053      	eors	r3, r2
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80091ae:	183b      	adds	r3, r7, r0
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	001a      	movs	r2, r3
 80091b4:	4bdb      	ldr	r3, [pc, #876]	; (8009524 <mix_sub_columns+0x3c8>)
 80091b6:	5c9a      	ldrb	r2, [r3, r2]
 80091b8:	183b      	adds	r3, r7, r0
 80091ba:	795b      	ldrb	r3, [r3, #5]
 80091bc:	0019      	movs	r1, r3
 80091be:	4bd7      	ldr	r3, [pc, #860]	; (800951c <mix_sub_columns+0x3c0>)
 80091c0:	5c5b      	ldrb	r3, [r3, r1]
 80091c2:	4053      	eors	r3, r2
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	183b      	adds	r3, r7, r0
 80091c8:	7a9b      	ldrb	r3, [r3, #10]
 80091ca:	0019      	movs	r1, r3
 80091cc:	4bd4      	ldr	r3, [pc, #848]	; (8009520 <mix_sub_columns+0x3c4>)
 80091ce:	5c5b      	ldrb	r3, [r3, r1]
 80091d0:	4053      	eors	r3, r2
 80091d2:	b2d9      	uxtb	r1, r3
 80091d4:	183b      	adds	r3, r7, r0
 80091d6:	7bdb      	ldrb	r3, [r3, #15]
 80091d8:	001a      	movs	r2, r3
 80091da:	4bd2      	ldr	r3, [pc, #840]	; (8009524 <mix_sub_columns+0x3c8>)
 80091dc:	5c9a      	ldrb	r2, [r3, r2]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3301      	adds	r3, #1
 80091e2:	404a      	eors	r2, r1
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80091e8:	183b      	adds	r3, r7, r0
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	001a      	movs	r2, r3
 80091ee:	4bcd      	ldr	r3, [pc, #820]	; (8009524 <mix_sub_columns+0x3c8>)
 80091f0:	5c9a      	ldrb	r2, [r3, r2]
 80091f2:	183b      	adds	r3, r7, r0
 80091f4:	795b      	ldrb	r3, [r3, #5]
 80091f6:	0019      	movs	r1, r3
 80091f8:	4bca      	ldr	r3, [pc, #808]	; (8009524 <mix_sub_columns+0x3c8>)
 80091fa:	5c5b      	ldrb	r3, [r3, r1]
 80091fc:	4053      	eors	r3, r2
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	183b      	adds	r3, r7, r0
 8009202:	7a9b      	ldrb	r3, [r3, #10]
 8009204:	0019      	movs	r1, r3
 8009206:	4bc5      	ldr	r3, [pc, #788]	; (800951c <mix_sub_columns+0x3c0>)
 8009208:	5c5b      	ldrb	r3, [r3, r1]
 800920a:	4053      	eors	r3, r2
 800920c:	b2d9      	uxtb	r1, r3
 800920e:	183b      	adds	r3, r7, r0
 8009210:	7bdb      	ldrb	r3, [r3, #15]
 8009212:	001a      	movs	r2, r3
 8009214:	4bc2      	ldr	r3, [pc, #776]	; (8009520 <mix_sub_columns+0x3c4>)
 8009216:	5c9a      	ldrb	r2, [r3, r2]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3302      	adds	r3, #2
 800921c:	404a      	eors	r2, r1
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8009222:	183b      	adds	r3, r7, r0
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	001a      	movs	r2, r3
 8009228:	4bbd      	ldr	r3, [pc, #756]	; (8009520 <mix_sub_columns+0x3c4>)
 800922a:	5c9a      	ldrb	r2, [r3, r2]
 800922c:	183b      	adds	r3, r7, r0
 800922e:	795b      	ldrb	r3, [r3, #5]
 8009230:	0019      	movs	r1, r3
 8009232:	4bbc      	ldr	r3, [pc, #752]	; (8009524 <mix_sub_columns+0x3c8>)
 8009234:	5c5b      	ldrb	r3, [r3, r1]
 8009236:	4053      	eors	r3, r2
 8009238:	b2da      	uxtb	r2, r3
 800923a:	183b      	adds	r3, r7, r0
 800923c:	7a9b      	ldrb	r3, [r3, #10]
 800923e:	0019      	movs	r1, r3
 8009240:	4bb8      	ldr	r3, [pc, #736]	; (8009524 <mix_sub_columns+0x3c8>)
 8009242:	5c5b      	ldrb	r3, [r3, r1]
 8009244:	4053      	eors	r3, r2
 8009246:	b2d9      	uxtb	r1, r3
 8009248:	183b      	adds	r3, r7, r0
 800924a:	7bdb      	ldrb	r3, [r3, #15]
 800924c:	001a      	movs	r2, r3
 800924e:	4bb3      	ldr	r3, [pc, #716]	; (800951c <mix_sub_columns+0x3c0>)
 8009250:	5c9a      	ldrb	r2, [r3, r2]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3303      	adds	r3, #3
 8009256:	404a      	eors	r2, r1
 8009258:	b2d2      	uxtb	r2, r2
 800925a:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800925c:	183b      	adds	r3, r7, r0
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	001a      	movs	r2, r3
 8009262:	4bae      	ldr	r3, [pc, #696]	; (800951c <mix_sub_columns+0x3c0>)
 8009264:	5c9a      	ldrb	r2, [r3, r2]
 8009266:	183b      	adds	r3, r7, r0
 8009268:	7a5b      	ldrb	r3, [r3, #9]
 800926a:	0019      	movs	r1, r3
 800926c:	4bac      	ldr	r3, [pc, #688]	; (8009520 <mix_sub_columns+0x3c4>)
 800926e:	5c5b      	ldrb	r3, [r3, r1]
 8009270:	4053      	eors	r3, r2
 8009272:	b2da      	uxtb	r2, r3
 8009274:	183b      	adds	r3, r7, r0
 8009276:	7b9b      	ldrb	r3, [r3, #14]
 8009278:	0019      	movs	r1, r3
 800927a:	4baa      	ldr	r3, [pc, #680]	; (8009524 <mix_sub_columns+0x3c8>)
 800927c:	5c5b      	ldrb	r3, [r3, r1]
 800927e:	4053      	eors	r3, r2
 8009280:	b2d9      	uxtb	r1, r3
 8009282:	183b      	adds	r3, r7, r0
 8009284:	78db      	ldrb	r3, [r3, #3]
 8009286:	001a      	movs	r2, r3
 8009288:	4ba6      	ldr	r3, [pc, #664]	; (8009524 <mix_sub_columns+0x3c8>)
 800928a:	5c9a      	ldrb	r2, [r3, r2]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3304      	adds	r3, #4
 8009290:	404a      	eors	r2, r1
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8009296:	183b      	adds	r3, r7, r0
 8009298:	791b      	ldrb	r3, [r3, #4]
 800929a:	001a      	movs	r2, r3
 800929c:	4ba1      	ldr	r3, [pc, #644]	; (8009524 <mix_sub_columns+0x3c8>)
 800929e:	5c9a      	ldrb	r2, [r3, r2]
 80092a0:	183b      	adds	r3, r7, r0
 80092a2:	7a5b      	ldrb	r3, [r3, #9]
 80092a4:	0019      	movs	r1, r3
 80092a6:	4b9d      	ldr	r3, [pc, #628]	; (800951c <mix_sub_columns+0x3c0>)
 80092a8:	5c5b      	ldrb	r3, [r3, r1]
 80092aa:	4053      	eors	r3, r2
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	183b      	adds	r3, r7, r0
 80092b0:	7b9b      	ldrb	r3, [r3, #14]
 80092b2:	0019      	movs	r1, r3
 80092b4:	4b9a      	ldr	r3, [pc, #616]	; (8009520 <mix_sub_columns+0x3c4>)
 80092b6:	5c5b      	ldrb	r3, [r3, r1]
 80092b8:	4053      	eors	r3, r2
 80092ba:	b2d9      	uxtb	r1, r3
 80092bc:	183b      	adds	r3, r7, r0
 80092be:	78db      	ldrb	r3, [r3, #3]
 80092c0:	001a      	movs	r2, r3
 80092c2:	4b98      	ldr	r3, [pc, #608]	; (8009524 <mix_sub_columns+0x3c8>)
 80092c4:	5c9a      	ldrb	r2, [r3, r2]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3305      	adds	r3, #5
 80092ca:	404a      	eors	r2, r1
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80092d0:	183b      	adds	r3, r7, r0
 80092d2:	791b      	ldrb	r3, [r3, #4]
 80092d4:	001a      	movs	r2, r3
 80092d6:	4b93      	ldr	r3, [pc, #588]	; (8009524 <mix_sub_columns+0x3c8>)
 80092d8:	5c9a      	ldrb	r2, [r3, r2]
 80092da:	183b      	adds	r3, r7, r0
 80092dc:	7a5b      	ldrb	r3, [r3, #9]
 80092de:	0019      	movs	r1, r3
 80092e0:	4b90      	ldr	r3, [pc, #576]	; (8009524 <mix_sub_columns+0x3c8>)
 80092e2:	5c5b      	ldrb	r3, [r3, r1]
 80092e4:	4053      	eors	r3, r2
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	183b      	adds	r3, r7, r0
 80092ea:	7b9b      	ldrb	r3, [r3, #14]
 80092ec:	0019      	movs	r1, r3
 80092ee:	4b8b      	ldr	r3, [pc, #556]	; (800951c <mix_sub_columns+0x3c0>)
 80092f0:	5c5b      	ldrb	r3, [r3, r1]
 80092f2:	4053      	eors	r3, r2
 80092f4:	b2d9      	uxtb	r1, r3
 80092f6:	183b      	adds	r3, r7, r0
 80092f8:	78db      	ldrb	r3, [r3, #3]
 80092fa:	001a      	movs	r2, r3
 80092fc:	4b88      	ldr	r3, [pc, #544]	; (8009520 <mix_sub_columns+0x3c4>)
 80092fe:	5c9a      	ldrb	r2, [r3, r2]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3306      	adds	r3, #6
 8009304:	404a      	eors	r2, r1
 8009306:	b2d2      	uxtb	r2, r2
 8009308:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800930a:	183b      	adds	r3, r7, r0
 800930c:	791b      	ldrb	r3, [r3, #4]
 800930e:	001a      	movs	r2, r3
 8009310:	4b83      	ldr	r3, [pc, #524]	; (8009520 <mix_sub_columns+0x3c4>)
 8009312:	5c9a      	ldrb	r2, [r3, r2]
 8009314:	183b      	adds	r3, r7, r0
 8009316:	7a5b      	ldrb	r3, [r3, #9]
 8009318:	0019      	movs	r1, r3
 800931a:	4b82      	ldr	r3, [pc, #520]	; (8009524 <mix_sub_columns+0x3c8>)
 800931c:	5c5b      	ldrb	r3, [r3, r1]
 800931e:	4053      	eors	r3, r2
 8009320:	b2da      	uxtb	r2, r3
 8009322:	183b      	adds	r3, r7, r0
 8009324:	7b9b      	ldrb	r3, [r3, #14]
 8009326:	0019      	movs	r1, r3
 8009328:	4b7e      	ldr	r3, [pc, #504]	; (8009524 <mix_sub_columns+0x3c8>)
 800932a:	5c5b      	ldrb	r3, [r3, r1]
 800932c:	4053      	eors	r3, r2
 800932e:	b2d9      	uxtb	r1, r3
 8009330:	183b      	adds	r3, r7, r0
 8009332:	78db      	ldrb	r3, [r3, #3]
 8009334:	001a      	movs	r2, r3
 8009336:	4b79      	ldr	r3, [pc, #484]	; (800951c <mix_sub_columns+0x3c0>)
 8009338:	5c9a      	ldrb	r2, [r3, r2]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3307      	adds	r3, #7
 800933e:	404a      	eors	r2, r1
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8009344:	183b      	adds	r3, r7, r0
 8009346:	7a1b      	ldrb	r3, [r3, #8]
 8009348:	001a      	movs	r2, r3
 800934a:	4b74      	ldr	r3, [pc, #464]	; (800951c <mix_sub_columns+0x3c0>)
 800934c:	5c9a      	ldrb	r2, [r3, r2]
 800934e:	183b      	adds	r3, r7, r0
 8009350:	7b5b      	ldrb	r3, [r3, #13]
 8009352:	0019      	movs	r1, r3
 8009354:	4b72      	ldr	r3, [pc, #456]	; (8009520 <mix_sub_columns+0x3c4>)
 8009356:	5c5b      	ldrb	r3, [r3, r1]
 8009358:	4053      	eors	r3, r2
 800935a:	b2da      	uxtb	r2, r3
 800935c:	183b      	adds	r3, r7, r0
 800935e:	789b      	ldrb	r3, [r3, #2]
 8009360:	0019      	movs	r1, r3
 8009362:	4b70      	ldr	r3, [pc, #448]	; (8009524 <mix_sub_columns+0x3c8>)
 8009364:	5c5b      	ldrb	r3, [r3, r1]
 8009366:	4053      	eors	r3, r2
 8009368:	b2d9      	uxtb	r1, r3
 800936a:	183b      	adds	r3, r7, r0
 800936c:	79db      	ldrb	r3, [r3, #7]
 800936e:	001a      	movs	r2, r3
 8009370:	4b6c      	ldr	r3, [pc, #432]	; (8009524 <mix_sub_columns+0x3c8>)
 8009372:	5c9a      	ldrb	r2, [r3, r2]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3308      	adds	r3, #8
 8009378:	404a      	eors	r2, r1
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800937e:	183b      	adds	r3, r7, r0
 8009380:	7a1b      	ldrb	r3, [r3, #8]
 8009382:	001a      	movs	r2, r3
 8009384:	4b67      	ldr	r3, [pc, #412]	; (8009524 <mix_sub_columns+0x3c8>)
 8009386:	5c9a      	ldrb	r2, [r3, r2]
 8009388:	183b      	adds	r3, r7, r0
 800938a:	7b5b      	ldrb	r3, [r3, #13]
 800938c:	0019      	movs	r1, r3
 800938e:	4b63      	ldr	r3, [pc, #396]	; (800951c <mix_sub_columns+0x3c0>)
 8009390:	5c5b      	ldrb	r3, [r3, r1]
 8009392:	4053      	eors	r3, r2
 8009394:	b2da      	uxtb	r2, r3
 8009396:	183b      	adds	r3, r7, r0
 8009398:	789b      	ldrb	r3, [r3, #2]
 800939a:	0019      	movs	r1, r3
 800939c:	4b60      	ldr	r3, [pc, #384]	; (8009520 <mix_sub_columns+0x3c4>)
 800939e:	5c5b      	ldrb	r3, [r3, r1]
 80093a0:	4053      	eors	r3, r2
 80093a2:	b2d9      	uxtb	r1, r3
 80093a4:	183b      	adds	r3, r7, r0
 80093a6:	79db      	ldrb	r3, [r3, #7]
 80093a8:	001a      	movs	r2, r3
 80093aa:	4b5e      	ldr	r3, [pc, #376]	; (8009524 <mix_sub_columns+0x3c8>)
 80093ac:	5c9a      	ldrb	r2, [r3, r2]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3309      	adds	r3, #9
 80093b2:	404a      	eors	r2, r1
 80093b4:	b2d2      	uxtb	r2, r2
 80093b6:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80093b8:	183b      	adds	r3, r7, r0
 80093ba:	7a1b      	ldrb	r3, [r3, #8]
 80093bc:	001a      	movs	r2, r3
 80093be:	4b59      	ldr	r3, [pc, #356]	; (8009524 <mix_sub_columns+0x3c8>)
 80093c0:	5c9a      	ldrb	r2, [r3, r2]
 80093c2:	183b      	adds	r3, r7, r0
 80093c4:	7b5b      	ldrb	r3, [r3, #13]
 80093c6:	0019      	movs	r1, r3
 80093c8:	4b56      	ldr	r3, [pc, #344]	; (8009524 <mix_sub_columns+0x3c8>)
 80093ca:	5c5b      	ldrb	r3, [r3, r1]
 80093cc:	4053      	eors	r3, r2
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	183b      	adds	r3, r7, r0
 80093d2:	789b      	ldrb	r3, [r3, #2]
 80093d4:	0019      	movs	r1, r3
 80093d6:	4b51      	ldr	r3, [pc, #324]	; (800951c <mix_sub_columns+0x3c0>)
 80093d8:	5c5b      	ldrb	r3, [r3, r1]
 80093da:	4053      	eors	r3, r2
 80093dc:	b2d9      	uxtb	r1, r3
 80093de:	183b      	adds	r3, r7, r0
 80093e0:	79db      	ldrb	r3, [r3, #7]
 80093e2:	001a      	movs	r2, r3
 80093e4:	4b4e      	ldr	r3, [pc, #312]	; (8009520 <mix_sub_columns+0x3c4>)
 80093e6:	5c9a      	ldrb	r2, [r3, r2]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	330a      	adds	r3, #10
 80093ec:	404a      	eors	r2, r1
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80093f2:	183b      	adds	r3, r7, r0
 80093f4:	7a1b      	ldrb	r3, [r3, #8]
 80093f6:	001a      	movs	r2, r3
 80093f8:	4b49      	ldr	r3, [pc, #292]	; (8009520 <mix_sub_columns+0x3c4>)
 80093fa:	5c9a      	ldrb	r2, [r3, r2]
 80093fc:	183b      	adds	r3, r7, r0
 80093fe:	7b5b      	ldrb	r3, [r3, #13]
 8009400:	0019      	movs	r1, r3
 8009402:	4b48      	ldr	r3, [pc, #288]	; (8009524 <mix_sub_columns+0x3c8>)
 8009404:	5c5b      	ldrb	r3, [r3, r1]
 8009406:	4053      	eors	r3, r2
 8009408:	b2da      	uxtb	r2, r3
 800940a:	183b      	adds	r3, r7, r0
 800940c:	789b      	ldrb	r3, [r3, #2]
 800940e:	0019      	movs	r1, r3
 8009410:	4b44      	ldr	r3, [pc, #272]	; (8009524 <mix_sub_columns+0x3c8>)
 8009412:	5c5b      	ldrb	r3, [r3, r1]
 8009414:	4053      	eors	r3, r2
 8009416:	b2d9      	uxtb	r1, r3
 8009418:	183b      	adds	r3, r7, r0
 800941a:	79db      	ldrb	r3, [r3, #7]
 800941c:	001a      	movs	r2, r3
 800941e:	4b3f      	ldr	r3, [pc, #252]	; (800951c <mix_sub_columns+0x3c0>)
 8009420:	5c9a      	ldrb	r2, [r3, r2]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	330b      	adds	r3, #11
 8009426:	404a      	eors	r2, r1
 8009428:	b2d2      	uxtb	r2, r2
 800942a:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800942c:	183b      	adds	r3, r7, r0
 800942e:	7b1b      	ldrb	r3, [r3, #12]
 8009430:	001a      	movs	r2, r3
 8009432:	4b3a      	ldr	r3, [pc, #232]	; (800951c <mix_sub_columns+0x3c0>)
 8009434:	5c9a      	ldrb	r2, [r3, r2]
 8009436:	183b      	adds	r3, r7, r0
 8009438:	785b      	ldrb	r3, [r3, #1]
 800943a:	0019      	movs	r1, r3
 800943c:	4b38      	ldr	r3, [pc, #224]	; (8009520 <mix_sub_columns+0x3c4>)
 800943e:	5c5b      	ldrb	r3, [r3, r1]
 8009440:	4053      	eors	r3, r2
 8009442:	b2da      	uxtb	r2, r3
 8009444:	183b      	adds	r3, r7, r0
 8009446:	799b      	ldrb	r3, [r3, #6]
 8009448:	0019      	movs	r1, r3
 800944a:	4b36      	ldr	r3, [pc, #216]	; (8009524 <mix_sub_columns+0x3c8>)
 800944c:	5c5b      	ldrb	r3, [r3, r1]
 800944e:	4053      	eors	r3, r2
 8009450:	b2d9      	uxtb	r1, r3
 8009452:	183b      	adds	r3, r7, r0
 8009454:	7adb      	ldrb	r3, [r3, #11]
 8009456:	001a      	movs	r2, r3
 8009458:	4b32      	ldr	r3, [pc, #200]	; (8009524 <mix_sub_columns+0x3c8>)
 800945a:	5c9a      	ldrb	r2, [r3, r2]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	330c      	adds	r3, #12
 8009460:	404a      	eors	r2, r1
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8009466:	183b      	adds	r3, r7, r0
 8009468:	7b1b      	ldrb	r3, [r3, #12]
 800946a:	001a      	movs	r2, r3
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <mix_sub_columns+0x3c8>)
 800946e:	5c9a      	ldrb	r2, [r3, r2]
 8009470:	183b      	adds	r3, r7, r0
 8009472:	785b      	ldrb	r3, [r3, #1]
 8009474:	0019      	movs	r1, r3
 8009476:	4b29      	ldr	r3, [pc, #164]	; (800951c <mix_sub_columns+0x3c0>)
 8009478:	5c5b      	ldrb	r3, [r3, r1]
 800947a:	4053      	eors	r3, r2
 800947c:	b2da      	uxtb	r2, r3
 800947e:	183b      	adds	r3, r7, r0
 8009480:	799b      	ldrb	r3, [r3, #6]
 8009482:	0019      	movs	r1, r3
 8009484:	4b26      	ldr	r3, [pc, #152]	; (8009520 <mix_sub_columns+0x3c4>)
 8009486:	5c5b      	ldrb	r3, [r3, r1]
 8009488:	4053      	eors	r3, r2
 800948a:	b2d9      	uxtb	r1, r3
 800948c:	183b      	adds	r3, r7, r0
 800948e:	7adb      	ldrb	r3, [r3, #11]
 8009490:	001a      	movs	r2, r3
 8009492:	4b24      	ldr	r3, [pc, #144]	; (8009524 <mix_sub_columns+0x3c8>)
 8009494:	5c9a      	ldrb	r2, [r3, r2]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	330d      	adds	r3, #13
 800949a:	404a      	eors	r2, r1
 800949c:	b2d2      	uxtb	r2, r2
 800949e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80094a0:	183b      	adds	r3, r7, r0
 80094a2:	7b1b      	ldrb	r3, [r3, #12]
 80094a4:	001a      	movs	r2, r3
 80094a6:	4b1f      	ldr	r3, [pc, #124]	; (8009524 <mix_sub_columns+0x3c8>)
 80094a8:	5c9a      	ldrb	r2, [r3, r2]
 80094aa:	183b      	adds	r3, r7, r0
 80094ac:	785b      	ldrb	r3, [r3, #1]
 80094ae:	0019      	movs	r1, r3
 80094b0:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <mix_sub_columns+0x3c8>)
 80094b2:	5c5b      	ldrb	r3, [r3, r1]
 80094b4:	4053      	eors	r3, r2
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	183b      	adds	r3, r7, r0
 80094ba:	799b      	ldrb	r3, [r3, #6]
 80094bc:	0019      	movs	r1, r3
 80094be:	4b17      	ldr	r3, [pc, #92]	; (800951c <mix_sub_columns+0x3c0>)
 80094c0:	5c5b      	ldrb	r3, [r3, r1]
 80094c2:	4053      	eors	r3, r2
 80094c4:	b2d9      	uxtb	r1, r3
 80094c6:	183b      	adds	r3, r7, r0
 80094c8:	7adb      	ldrb	r3, [r3, #11]
 80094ca:	001a      	movs	r2, r3
 80094cc:	4b14      	ldr	r3, [pc, #80]	; (8009520 <mix_sub_columns+0x3c4>)
 80094ce:	5c9a      	ldrb	r2, [r3, r2]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	330e      	adds	r3, #14
 80094d4:	404a      	eors	r2, r1
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80094da:	183b      	adds	r3, r7, r0
 80094dc:	7b1b      	ldrb	r3, [r3, #12]
 80094de:	001a      	movs	r2, r3
 80094e0:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <mix_sub_columns+0x3c4>)
 80094e2:	5c9a      	ldrb	r2, [r3, r2]
 80094e4:	183b      	adds	r3, r7, r0
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	0019      	movs	r1, r3
 80094ea:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <mix_sub_columns+0x3c8>)
 80094ec:	5c5b      	ldrb	r3, [r3, r1]
 80094ee:	4053      	eors	r3, r2
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	183b      	adds	r3, r7, r0
 80094f4:	799b      	ldrb	r3, [r3, #6]
 80094f6:	0019      	movs	r1, r3
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <mix_sub_columns+0x3c8>)
 80094fa:	5c5b      	ldrb	r3, [r3, r1]
 80094fc:	4053      	eors	r3, r2
 80094fe:	b2d9      	uxtb	r1, r3
 8009500:	183b      	adds	r3, r7, r0
 8009502:	7adb      	ldrb	r3, [r3, #11]
 8009504:	001a      	movs	r2, r3
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <mix_sub_columns+0x3c0>)
 8009508:	5c9a      	ldrb	r2, [r3, r2]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	330f      	adds	r3, #15
 800950e:	404a      	eors	r2, r1
 8009510:	b2d2      	uxtb	r2, r2
 8009512:	701a      	strb	r2, [r3, #0]
  }
 8009514:	46c0      	nop			; (mov r8, r8)
 8009516:	46bd      	mov	sp, r7
 8009518:	b007      	add	sp, #28
 800951a:	bd90      	pop	{r4, r7, pc}
 800951c:	0802157c 	.word	0x0802157c
 8009520:	0802167c 	.word	0x0802167c
 8009524:	0802147c 	.word	0x0802147c

08009528 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8009528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	200b      	movs	r0, #11
 8009534:	183b      	adds	r3, r7, r0
 8009536:	1c0a      	adds	r2, r1, #0
 8009538:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800953a:	183b      	adds	r3, r7, r0
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b18      	cmp	r3, #24
 8009540:	d009      	beq.n	8009556 <aes_set_key+0x2e>
 8009542:	2b20      	cmp	r3, #32
 8009544:	d007      	beq.n	8009556 <aes_set_key+0x2e>
 8009546:	2b10      	cmp	r3, #16
 8009548:	d005      	beq.n	8009556 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	22f0      	movs	r2, #240	; 0xf0
 800954e:	2100      	movs	r1, #0
 8009550:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8009552:	23ff      	movs	r3, #255	; 0xff
 8009554:	e113      	b.n	800977e <aes_set_key+0x256>
        break;
 8009556:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	240b      	movs	r4, #11
 800955c:	193b      	adds	r3, r7, r4
 800955e:	781a      	ldrb	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	0019      	movs	r1, r3
 8009564:	f7ff fbc0 	bl	8008ce8 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8009568:	0020      	movs	r0, r4
 800956a:	183b      	adds	r3, r7, r0
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	331c      	adds	r3, #28
 8009570:	b2da      	uxtb	r2, r3
 8009572:	2111      	movs	r1, #17
 8009574:	187b      	adds	r3, r7, r1
 8009576:	0092      	lsls	r2, r2, #2
 8009578:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800957a:	187b      	adds	r3, r7, r1
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	091b      	lsrs	r3, r3, #4
 8009580:	b2db      	uxtb	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b2d9      	uxtb	r1, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	22f0      	movs	r2, #240	; 0xf0
 800958a:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800958c:	2317      	movs	r3, #23
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	183a      	adds	r2, r7, r0
 8009592:	7812      	ldrb	r2, [r2, #0]
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	2316      	movs	r3, #22
 8009598:	18fb      	adds	r3, r7, r3
 800959a:	2201      	movs	r2, #1
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	e0e4      	b.n	800976a <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80095a0:	2017      	movs	r0, #23
 80095a2:	183b      	adds	r3, r7, r0
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	1f1a      	subs	r2, r3, #4
 80095a8:	2315      	movs	r3, #21
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	5c8a      	ldrb	r2, [r1, r2]
 80095b0:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 80095b2:	183b      	adds	r3, r7, r0
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	1eda      	subs	r2, r3, #3
 80095b8:	2314      	movs	r3, #20
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	5c8a      	ldrb	r2, [r1, r2]
 80095c0:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80095c2:	183b      	adds	r3, r7, r0
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	1e9a      	subs	r2, r3, #2
 80095c8:	2313      	movs	r3, #19
 80095ca:	18fb      	adds	r3, r7, r3
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	5c8a      	ldrb	r2, [r1, r2]
 80095d0:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 80095d2:	183b      	adds	r3, r7, r0
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	1e5a      	subs	r2, r3, #1
 80095d8:	2312      	movs	r3, #18
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	5c8a      	ldrb	r2, [r1, r2]
 80095e0:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 80095e2:	183a      	adds	r2, r7, r0
 80095e4:	230b      	movs	r3, #11
 80095e6:	18fb      	adds	r3, r7, r3
 80095e8:	7812      	ldrb	r2, [r2, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	0019      	movs	r1, r3
 80095ee:	0010      	movs	r0, r2
 80095f0:	f7f6 fe18 	bl	8000224 <__aeabi_uidivmod>
 80095f4:	000b      	movs	r3, r1
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d13e      	bne.n	800967a <aes_set_key+0x152>
        {
            tt = t0;
 80095fc:	2410      	movs	r4, #16
 80095fe:	193b      	adds	r3, r7, r4
 8009600:	2015      	movs	r0, #21
 8009602:	183a      	adds	r2, r7, r0
 8009604:	7812      	ldrb	r2, [r2, #0]
 8009606:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 8009608:	2514      	movs	r5, #20
 800960a:	197b      	adds	r3, r7, r5
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	4a5e      	ldr	r2, [pc, #376]	; (8009788 <aes_set_key+0x260>)
 8009610:	5cd1      	ldrb	r1, [r2, r3]
 8009612:	183b      	adds	r3, r7, r0
 8009614:	2016      	movs	r0, #22
 8009616:	183a      	adds	r2, r7, r0
 8009618:	7812      	ldrb	r2, [r2, #0]
 800961a:	404a      	eors	r2, r1
 800961c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800961e:	2613      	movs	r6, #19
 8009620:	19bb      	adds	r3, r7, r6
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	197b      	adds	r3, r7, r5
 8009626:	4958      	ldr	r1, [pc, #352]	; (8009788 <aes_set_key+0x260>)
 8009628:	5c8a      	ldrb	r2, [r1, r2]
 800962a:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800962c:	2512      	movs	r5, #18
 800962e:	197b      	adds	r3, r7, r5
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	19bb      	adds	r3, r7, r6
 8009634:	4954      	ldr	r1, [pc, #336]	; (8009788 <aes_set_key+0x260>)
 8009636:	5c8a      	ldrb	r2, [r1, r2]
 8009638:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800963a:	193b      	adds	r3, r7, r4
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	197b      	adds	r3, r7, r5
 8009640:	4951      	ldr	r1, [pc, #324]	; (8009788 <aes_set_key+0x260>)
 8009642:	5c8a      	ldrb	r2, [r1, r2]
 8009644:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 8009646:	183b      	adds	r3, r7, r0
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	b25a      	sxtb	r2, r3
 800964e:	0004      	movs	r4, r0
 8009650:	183b      	adds	r3, r7, r0
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	09db      	lsrs	r3, r3, #7
 8009656:	b2db      	uxtb	r3, r3
 8009658:	1c19      	adds	r1, r3, #0
 800965a:	1c0b      	adds	r3, r1, #0
 800965c:	18db      	adds	r3, r3, r3
 800965e:	185b      	adds	r3, r3, r1
 8009660:	1c19      	adds	r1, r3, #0
 8009662:	00c8      	lsls	r0, r1, #3
 8009664:	1c19      	adds	r1, r3, #0
 8009666:	1c03      	adds	r3, r0, #0
 8009668:	18cb      	adds	r3, r1, r3
 800966a:	b2db      	uxtb	r3, r3
 800966c:	b25b      	sxtb	r3, r3
 800966e:	4053      	eors	r3, r2
 8009670:	b25a      	sxtb	r2, r3
 8009672:	0020      	movs	r0, r4
 8009674:	183b      	adds	r3, r7, r0
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	e02e      	b.n	80096d8 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800967a:	230b      	movs	r3, #11
 800967c:	18fb      	adds	r3, r7, r3
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b18      	cmp	r3, #24
 8009682:	d929      	bls.n	80096d8 <aes_set_key+0x1b0>
 8009684:	2317      	movs	r3, #23
 8009686:	18fa      	adds	r2, r7, r3
 8009688:	230b      	movs	r3, #11
 800968a:	18fb      	adds	r3, r7, r3
 800968c:	7812      	ldrb	r2, [r2, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	0019      	movs	r1, r3
 8009692:	0010      	movs	r0, r2
 8009694:	f7f6 fdc6 	bl	8000224 <__aeabi_uidivmod>
 8009698:	000b      	movs	r3, r1
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b10      	cmp	r3, #16
 800969e:	d11b      	bne.n	80096d8 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 80096a0:	2115      	movs	r1, #21
 80096a2:	187b      	adds	r3, r7, r1
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	187b      	adds	r3, r7, r1
 80096a8:	4937      	ldr	r1, [pc, #220]	; (8009788 <aes_set_key+0x260>)
 80096aa:	5c8a      	ldrb	r2, [r1, r2]
 80096ac:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 80096ae:	2114      	movs	r1, #20
 80096b0:	187b      	adds	r3, r7, r1
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	4934      	ldr	r1, [pc, #208]	; (8009788 <aes_set_key+0x260>)
 80096b8:	5c8a      	ldrb	r2, [r1, r2]
 80096ba:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80096bc:	2113      	movs	r1, #19
 80096be:	187b      	adds	r3, r7, r1
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	187b      	adds	r3, r7, r1
 80096c4:	4930      	ldr	r1, [pc, #192]	; (8009788 <aes_set_key+0x260>)
 80096c6:	5c8a      	ldrb	r2, [r1, r2]
 80096c8:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 80096ca:	2112      	movs	r1, #18
 80096cc:	187b      	adds	r3, r7, r1
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	492d      	ldr	r1, [pc, #180]	; (8009788 <aes_set_key+0x260>)
 80096d4:	5c8a      	ldrb	r2, [r1, r2]
 80096d6:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 80096d8:	2410      	movs	r4, #16
 80096da:	193b      	adds	r3, r7, r4
 80096dc:	2017      	movs	r0, #23
 80096de:	1839      	adds	r1, r7, r0
 80096e0:	220b      	movs	r2, #11
 80096e2:	18ba      	adds	r2, r7, r2
 80096e4:	7809      	ldrb	r1, [r1, #0]
 80096e6:	7812      	ldrb	r2, [r2, #0]
 80096e8:	1a8a      	subs	r2, r1, r2
 80096ea:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80096ec:	193b      	adds	r3, r7, r4
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	5cd1      	ldrb	r1, [r2, r3]
 80096f4:	183b      	adds	r3, r7, r0
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2215      	movs	r2, #21
 80096fa:	18ba      	adds	r2, r7, r2
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	404a      	eors	r2, r1
 8009700:	b2d1      	uxtb	r1, r2
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8009706:	193b      	adds	r3, r7, r4
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	5cd1      	ldrb	r1, [r2, r3]
 8009710:	183b      	adds	r3, r7, r0
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	3301      	adds	r3, #1
 8009716:	2214      	movs	r2, #20
 8009718:	18ba      	adds	r2, r7, r2
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	404a      	eors	r2, r1
 800971e:	b2d1      	uxtb	r1, r2
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8009724:	193b      	adds	r3, r7, r4
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	3302      	adds	r3, #2
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	5cd1      	ldrb	r1, [r2, r3]
 800972e:	183b      	adds	r3, r7, r0
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	3302      	adds	r3, #2
 8009734:	2213      	movs	r2, #19
 8009736:	18ba      	adds	r2, r7, r2
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	404a      	eors	r2, r1
 800973c:	b2d1      	uxtb	r1, r2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8009742:	193b      	adds	r3, r7, r4
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	3303      	adds	r3, #3
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	5cd1      	ldrb	r1, [r2, r3]
 800974c:	183b      	adds	r3, r7, r0
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	3303      	adds	r3, #3
 8009752:	2212      	movs	r2, #18
 8009754:	18ba      	adds	r2, r7, r2
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	404a      	eors	r2, r1
 800975a:	b2d1      	uxtb	r1, r2
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8009760:	183b      	adds	r3, r7, r0
 8009762:	183a      	adds	r2, r7, r0
 8009764:	7812      	ldrb	r2, [r2, #0]
 8009766:	3204      	adds	r2, #4
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	2317      	movs	r3, #23
 800976c:	18fa      	adds	r2, r7, r3
 800976e:	2311      	movs	r3, #17
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	7812      	ldrb	r2, [r2, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d200      	bcs.n	800977c <aes_set_key+0x254>
 800977a:	e711      	b.n	80095a0 <aes_set_key+0x78>
    }
    return 0;
 800977c:	2300      	movs	r3, #0
}
 800977e:	0018      	movs	r0, r3
 8009780:	46bd      	mov	sp, r7
 8009782:	b007      	add	sp, #28
 8009784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	0802147c 	.word	0x0802147c

0800978c <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800978c:	b5b0      	push	{r4, r5, r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	22f0      	movs	r2, #240	; 0xf0
 800979c:	5c9b      	ldrb	r3, [r3, r2]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d03a      	beq.n	8009818 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	68f9      	ldr	r1, [r7, #12]
 80097a6:	2314      	movs	r3, #20
 80097a8:	18fb      	adds	r3, r7, r3
 80097aa:	0018      	movs	r0, r3
 80097ac:	f7ff fb6d 	bl	8008e8a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80097b0:	2327      	movs	r3, #39	; 0x27
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	2201      	movs	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e014      	b.n	80097e4 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80097ba:	2514      	movs	r5, #20
 80097bc:	197b      	adds	r3, r7, r5
 80097be:	0018      	movs	r0, r3
 80097c0:	f7ff fccc 	bl	800915c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2427      	movs	r4, #39	; 0x27
 80097c8:	193a      	adds	r2, r7, r4
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	0112      	lsls	r2, r2, #4
 80097ce:	189a      	adds	r2, r3, r2
 80097d0:	197b      	adds	r3, r7, r5
 80097d2:	0011      	movs	r1, r2
 80097d4:	0018      	movs	r0, r3
 80097d6:	f7ff fc0f 	bl	8008ff8 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80097da:	193b      	adds	r3, r7, r4
 80097dc:	193a      	adds	r2, r7, r4
 80097de:	7812      	ldrb	r2, [r2, #0]
 80097e0:	3201      	adds	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	22f0      	movs	r2, #240	; 0xf0
 80097e8:	5c9b      	ldrb	r3, [r3, r2]
 80097ea:	2227      	movs	r2, #39	; 0x27
 80097ec:	18ba      	adds	r2, r7, r2
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d3e2      	bcc.n	80097ba <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80097f4:	2414      	movs	r4, #20
 80097f6:	193b      	adds	r3, r7, r4
 80097f8:	0018      	movs	r0, r3
 80097fa:	f7ff fc0d 	bl	8009018 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2227      	movs	r2, #39	; 0x27
 8009802:	18ba      	adds	r2, r7, r2
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	0112      	lsls	r2, r2, #4
 8009808:	189a      	adds	r2, r3, r2
 800980a:	1939      	adds	r1, r7, r4
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	0018      	movs	r0, r3
 8009810:	f7ff fb3b 	bl	8008e8a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 8009818:	23ff      	movs	r3, #255	; 0xff
}
 800981a:	0018      	movs	r0, r3
 800981c:	46bd      	mov	sp, r7
 800981e:	b00a      	add	sp, #40	; 0x28
 8009820:	bdb0      	pop	{r4, r5, r7, pc}

08009822 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	33f1      	adds	r3, #241	; 0xf1
 800982e:	2210      	movs	r2, #16
 8009830:	2100      	movs	r1, #0
 8009832:	0018      	movs	r0, r3
 8009834:	f00c f91e 	bl	8015a74 <memset1>
            ctx->M_n = 0;
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	238a      	movs	r3, #138	; 0x8a
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	2100      	movs	r1, #0
 8009840:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	22f0      	movs	r2, #240	; 0xf0
 8009846:	2100      	movs	r1, #0
 8009848:	0018      	movs	r0, r3
 800984a:	f00c f913 	bl	8015a74 <memset1>
}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	46bd      	mov	sp, r7
 8009852:	b002      	add	sp, #8
 8009854:	bd80      	pop	{r7, pc}

08009856 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2110      	movs	r1, #16
 8009866:	0018      	movs	r0, r3
 8009868:	f7ff fe5e 	bl	8009528 <aes_set_key>
}
 800986c:	46c0      	nop			; (mov r8, r8)
 800986e:	46bd      	mov	sp, r7
 8009870:	b002      	add	sp, #8
 8009872:	bd80      	pop	{r7, pc}

08009874 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8009874:	b590      	push	{r4, r7, lr}
 8009876:	b08d      	sub	sp, #52	; 0x34
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	238a      	movs	r3, #138	; 0x8a
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	58d3      	ldr	r3, [r2, r3]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d100      	bne.n	800988e <AES_CMAC_Update+0x1a>
 800988c:	e097      	b.n	80099be <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	238a      	movs	r3, #138	; 0x8a
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	58d3      	ldr	r3, [r2, r3]
 8009896:	2210      	movs	r2, #16
 8009898:	1ad2      	subs	r2, r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4293      	cmp	r3, r2
 800989e:	d900      	bls.n	80098a2 <AES_CMAC_Update+0x2e>
 80098a0:	0013      	movs	r3, r2
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	1c9a      	adds	r2, r3, #2
 80098a8:	32ff      	adds	r2, #255	; 0xff
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	238a      	movs	r3, #138	; 0x8a
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	58cb      	ldr	r3, [r1, r3]
 80098b2:	18d3      	adds	r3, r2, r3
 80098b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b6:	b292      	uxth	r2, r2
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	0018      	movs	r0, r3
 80098bc:	f00c f89e 	bl	80159fc <memcpy1>
                    ctx->M_n += mlen;
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	238a      	movs	r3, #138	; 0x8a
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	58d2      	ldr	r2, [r2, r3]
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	18d1      	adds	r1, r2, r3
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	238a      	movs	r3, #138	; 0x8a
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	238a      	movs	r3, #138	; 0x8a
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	58d3      	ldr	r3, [r2, r3]
 80098dc:	2b0f      	cmp	r3, #15
 80098de:	d800      	bhi.n	80098e2 <AES_CMAC_Update+0x6e>
 80098e0:	e07f      	b.n	80099e2 <AES_CMAC_Update+0x16e>
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d100      	bne.n	80098ec <AES_CMAC_Update+0x78>
 80098ea:	e07a      	b.n	80099e2 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 80098ec:	2300      	movs	r3, #0
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098f0:	e018      	b.n	8009924 <AES_CMAC_Update+0xb0>
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	21f1      	movs	r1, #241	; 0xf1
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	18d3      	adds	r3, r2, r3
 80098fa:	185b      	adds	r3, r3, r1
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	2302      	movs	r3, #2
 8009902:	33ff      	adds	r3, #255	; 0xff
 8009904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009906:	1841      	adds	r1, r0, r1
 8009908:	18cb      	adds	r3, r1, r3
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	4053      	eors	r3, r2
 800990e:	b2d8      	uxtb	r0, r3
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	21f1      	movs	r1, #241	; 0xf1
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	18d3      	adds	r3, r2, r3
 8009918:	185b      	adds	r3, r3, r1
 800991a:	1c02      	adds	r2, r0, #0
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	3301      	adds	r3, #1
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	2b0f      	cmp	r3, #15
 8009928:	dde3      	ble.n	80098f2 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	33f1      	adds	r3, #241	; 0xf1
 800992e:	0018      	movs	r0, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	33f1      	adds	r3, #241	; 0xf1
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	0019      	movs	r1, r3
 8009938:	f7ff ff28 	bl	800978c <aes_encrypt>
                    data += mlen;
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	18d3      	adds	r3, r2, r3
 8009942:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800994c:	e037      	b.n	80099be <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 800994e:	2300      	movs	r3, #0
 8009950:	62bb      	str	r3, [r7, #40]	; 0x28
 8009952:	e015      	b.n	8009980 <AES_CMAC_Update+0x10c>
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	21f1      	movs	r1, #241	; 0xf1
 8009958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995a:	18d3      	adds	r3, r2, r3
 800995c:	185b      	adds	r3, r3, r1
 800995e:	781a      	ldrb	r2, [r3, #0]
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	68b9      	ldr	r1, [r7, #8]
 8009964:	18cb      	adds	r3, r1, r3
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4053      	eors	r3, r2
 800996a:	b2d8      	uxtb	r0, r3
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	21f1      	movs	r1, #241	; 0xf1
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	185b      	adds	r3, r3, r1
 8009976:	1c02      	adds	r2, r0, #0
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	3301      	adds	r3, #1
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	2b0f      	cmp	r3, #15
 8009984:	dde6      	ble.n	8009954 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	33f1      	adds	r3, #241	; 0xf1
 800998a:	0019      	movs	r1, r3
 800998c:	2414      	movs	r4, #20
 800998e:	193b      	adds	r3, r7, r4
 8009990:	2210      	movs	r2, #16
 8009992:	0018      	movs	r0, r3
 8009994:	f00c f832 	bl	80159fc <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	1939      	adds	r1, r7, r4
 800999c:	193b      	adds	r3, r7, r4
 800999e:	0018      	movs	r0, r3
 80099a0:	f7ff fef4 	bl	800978c <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	33f1      	adds	r3, #241	; 0xf1
 80099a8:	1939      	adds	r1, r7, r4
 80099aa:	2210      	movs	r2, #16
 80099ac:	0018      	movs	r0, r3
 80099ae:	f00c f825 	bl	80159fc <memcpy1>

                    data += 16;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	3310      	adds	r3, #16
 80099b6:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3b10      	subs	r3, #16
 80099bc:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d8c4      	bhi.n	800994e <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3302      	adds	r3, #2
 80099c8:	33ff      	adds	r3, #255	; 0xff
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	b292      	uxth	r2, r2
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	0018      	movs	r0, r3
 80099d2:	f00c f813 	bl	80159fc <memcpy1>
            ctx->M_n = len;
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	238a      	movs	r3, #138	; 0x8a
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	50d1      	str	r1, [r2, r3]
 80099e0:	e000      	b.n	80099e4 <AES_CMAC_Update+0x170>
                            return;
 80099e2:	46c0      	nop			; (mov r8, r8)
}
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b00d      	add	sp, #52	; 0x34
 80099e8:	bd90      	pop	{r4, r7, pc}

080099ea <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 80099ea:	b590      	push	{r4, r7, lr}
 80099ec:	b093      	sub	sp, #76	; 0x4c
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 80099f4:	241c      	movs	r4, #28
 80099f6:	193b      	adds	r3, r7, r4
 80099f8:	2210      	movs	r2, #16
 80099fa:	2100      	movs	r1, #0
 80099fc:	0018      	movs	r0, r3
 80099fe:	f00c f839 	bl	8015a74 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	1939      	adds	r1, r7, r4
 8009a06:	193b      	adds	r3, r7, r4
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f7ff febf 	bl	800978c <aes_encrypt>

            if (K[0] & 0x80) {
 8009a0e:	193b      	adds	r3, r7, r4
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b25b      	sxtb	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	da2e      	bge.n	8009a76 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 8009a18:	2300      	movs	r3, #0
 8009a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a1c:	e018      	b.n	8009a50 <AES_CMAC_Final+0x66>
 8009a1e:	201c      	movs	r0, #28
 8009a20:	183a      	adds	r2, r7, r0
 8009a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a24:	18d3      	adds	r3, r2, r3
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	b25a      	sxtb	r2, r3
 8009a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2e:	3301      	adds	r3, #1
 8009a30:	1839      	adds	r1, r7, r0
 8009a32:	5ccb      	ldrb	r3, [r1, r3]
 8009a34:	09db      	lsrs	r3, r3, #7
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	b25b      	sxtb	r3, r3
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	b25b      	sxtb	r3, r3
 8009a3e:	b2d9      	uxtb	r1, r3
 8009a40:	183a      	adds	r2, r7, r0
 8009a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a44:	18d3      	adds	r3, r2, r3
 8009a46:	1c0a      	adds	r2, r1, #0
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a52:	2b0e      	cmp	r3, #14
 8009a54:	dde3      	ble.n	8009a1e <AES_CMAC_Final+0x34>
 8009a56:	211c      	movs	r1, #28
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	7bdb      	ldrb	r3, [r3, #15]
 8009a5c:	18db      	adds	r3, r3, r3
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	187b      	adds	r3, r7, r1
 8009a62:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	7bdb      	ldrb	r3, [r3, #15]
 8009a68:	2279      	movs	r2, #121	; 0x79
 8009a6a:	4252      	negs	r2, r2
 8009a6c:	4053      	eors	r3, r2
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	187b      	adds	r3, r7, r1
 8009a72:	73da      	strb	r2, [r3, #15]
 8009a74:	e025      	b.n	8009ac2 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 8009a76:	2300      	movs	r3, #0
 8009a78:	643b      	str	r3, [r7, #64]	; 0x40
 8009a7a:	e018      	b.n	8009aae <AES_CMAC_Final+0xc4>
 8009a7c:	201c      	movs	r0, #28
 8009a7e:	183a      	adds	r2, r7, r0
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	18d3      	adds	r3, r2, r3
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	b25a      	sxtb	r2, r3
 8009a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	1839      	adds	r1, r7, r0
 8009a90:	5ccb      	ldrb	r3, [r1, r3]
 8009a92:	09db      	lsrs	r3, r3, #7
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	b25b      	sxtb	r3, r3
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	b25b      	sxtb	r3, r3
 8009a9c:	b2d9      	uxtb	r1, r3
 8009a9e:	183a      	adds	r2, r7, r0
 8009aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa2:	18d3      	adds	r3, r2, r3
 8009aa4:	1c0a      	adds	r2, r1, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aaa:	3301      	adds	r3, #1
 8009aac:	643b      	str	r3, [r7, #64]	; 0x40
 8009aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab0:	2b0e      	cmp	r3, #14
 8009ab2:	dde3      	ble.n	8009a7c <AES_CMAC_Final+0x92>
 8009ab4:	211c      	movs	r1, #28
 8009ab6:	187b      	adds	r3, r7, r1
 8009ab8:	7bdb      	ldrb	r3, [r3, #15]
 8009aba:	18db      	adds	r3, r3, r3
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	238a      	movs	r3, #138	; 0x8a
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	58d3      	ldr	r3, [r2, r3]
 8009aca:	2b10      	cmp	r3, #16
 8009acc:	d11f      	bne.n	8009b0e <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8009ace:	2300      	movs	r3, #0
 8009ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ad2:	e018      	b.n	8009b06 <AES_CMAC_Final+0x11c>
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	33ff      	adds	r3, #255	; 0xff
 8009ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009adc:	188a      	adds	r2, r1, r2
 8009ade:	18d3      	adds	r3, r2, r3
 8009ae0:	781a      	ldrb	r2, [r3, #0]
 8009ae2:	231c      	movs	r3, #28
 8009ae4:	18f9      	adds	r1, r7, r3
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae8:	18cb      	adds	r3, r1, r3
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	4053      	eors	r3, r2
 8009aee:	b2d8      	uxtb	r0, r3
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	2302      	movs	r3, #2
 8009af4:	33ff      	adds	r3, #255	; 0xff
 8009af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009af8:	188a      	adds	r2, r1, r2
 8009afa:	18d3      	adds	r3, r2, r3
 8009afc:	1c02      	adds	r2, r0, #0
 8009afe:	701a      	strb	r2, [r3, #0]
 8009b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b02:	3301      	adds	r3, #1
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	2b0f      	cmp	r3, #15
 8009b0a:	dde3      	ble.n	8009ad4 <AES_CMAC_Final+0xea>
 8009b0c:	e09f      	b.n	8009c4e <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8009b0e:	231c      	movs	r3, #28
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b25b      	sxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	da2e      	bge.n	8009b78 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b1e:	e018      	b.n	8009b52 <AES_CMAC_Final+0x168>
 8009b20:	201c      	movs	r0, #28
 8009b22:	183a      	adds	r2, r7, r0
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	18d3      	adds	r3, r2, r3
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	b25a      	sxtb	r2, r3
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	3301      	adds	r3, #1
 8009b32:	1839      	adds	r1, r7, r0
 8009b34:	5ccb      	ldrb	r3, [r1, r3]
 8009b36:	09db      	lsrs	r3, r3, #7
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	b25b      	sxtb	r3, r3
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	b25b      	sxtb	r3, r3
 8009b40:	b2d9      	uxtb	r1, r3
 8009b42:	183a      	adds	r2, r7, r0
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	18d3      	adds	r3, r2, r3
 8009b48:	1c0a      	adds	r2, r1, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	3301      	adds	r3, #1
 8009b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	2b0e      	cmp	r3, #14
 8009b56:	dde3      	ble.n	8009b20 <AES_CMAC_Final+0x136>
 8009b58:	211c      	movs	r1, #28
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	7bdb      	ldrb	r3, [r3, #15]
 8009b5e:	18db      	adds	r3, r3, r3
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	187b      	adds	r3, r7, r1
 8009b64:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8009b66:	187b      	adds	r3, r7, r1
 8009b68:	7bdb      	ldrb	r3, [r3, #15]
 8009b6a:	2279      	movs	r2, #121	; 0x79
 8009b6c:	4252      	negs	r2, r2
 8009b6e:	4053      	eors	r3, r2
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	187b      	adds	r3, r7, r1
 8009b74:	73da      	strb	r2, [r3, #15]
 8009b76:	e025      	b.n	8009bc4 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8009b78:	2300      	movs	r3, #0
 8009b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b7c:	e018      	b.n	8009bb0 <AES_CMAC_Final+0x1c6>
 8009b7e:	201c      	movs	r0, #28
 8009b80:	183a      	adds	r2, r7, r0
 8009b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b84:	18d3      	adds	r3, r2, r3
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	b25a      	sxtb	r2, r3
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8e:	3301      	adds	r3, #1
 8009b90:	1839      	adds	r1, r7, r0
 8009b92:	5ccb      	ldrb	r3, [r1, r3]
 8009b94:	09db      	lsrs	r3, r3, #7
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	b25b      	sxtb	r3, r3
 8009b9e:	b2d9      	uxtb	r1, r3
 8009ba0:	183a      	adds	r2, r7, r0
 8009ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba4:	18d3      	adds	r3, r2, r3
 8009ba6:	1c0a      	adds	r2, r1, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bac:	3301      	adds	r3, #1
 8009bae:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb2:	2b0e      	cmp	r3, #14
 8009bb4:	dde3      	ble.n	8009b7e <AES_CMAC_Final+0x194>
 8009bb6:	211c      	movs	r1, #28
 8009bb8:	187b      	adds	r3, r7, r1
 8009bba:	7bdb      	ldrb	r3, [r3, #15]
 8009bbc:	18db      	adds	r3, r3, r3
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	187b      	adds	r3, r7, r1
 8009bc2:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	238a      	movs	r3, #138	; 0x8a
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	58d2      	ldr	r2, [r2, r3]
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	2302      	movs	r3, #2
 8009bd0:	33ff      	adds	r3, #255	; 0xff
 8009bd2:	188a      	adds	r2, r1, r2
 8009bd4:	18d3      	adds	r3, r2, r3
 8009bd6:	2280      	movs	r2, #128	; 0x80
 8009bd8:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8009bda:	e00a      	b.n	8009bf2 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	238a      	movs	r3, #138	; 0x8a
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	58d2      	ldr	r2, [r2, r3]
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	2302      	movs	r3, #2
 8009be8:	33ff      	adds	r3, #255	; 0xff
 8009bea:	188a      	adds	r2, r1, r2
 8009bec:	18d3      	adds	r3, r2, r3
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	238a      	movs	r3, #138	; 0x8a
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	58d3      	ldr	r3, [r2, r3]
 8009bfa:	1c59      	adds	r1, r3, #1
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	238a      	movs	r3, #138	; 0x8a
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	50d1      	str	r1, [r2, r3]
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	238a      	movs	r3, #138	; 0x8a
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	58d3      	ldr	r3, [r2, r3]
 8009c0c:	2b0f      	cmp	r3, #15
 8009c0e:	d9e5      	bls.n	8009bdc <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 8009c10:	2300      	movs	r3, #0
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30
 8009c14:	e018      	b.n	8009c48 <AES_CMAC_Final+0x25e>
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	2302      	movs	r3, #2
 8009c1a:	33ff      	adds	r3, #255	; 0xff
 8009c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1e:	188a      	adds	r2, r1, r2
 8009c20:	18d3      	adds	r3, r2, r3
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	231c      	movs	r3, #28
 8009c26:	18f9      	adds	r1, r7, r3
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	18cb      	adds	r3, r1, r3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	4053      	eors	r3, r2
 8009c30:	b2d8      	uxtb	r0, r3
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	2302      	movs	r3, #2
 8009c36:	33ff      	adds	r3, #255	; 0xff
 8009c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3a:	188a      	adds	r2, r1, r2
 8009c3c:	18d3      	adds	r3, r2, r3
 8009c3e:	1c02      	adds	r2, r0, #0
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	3301      	adds	r3, #1
 8009c46:	633b      	str	r3, [r7, #48]	; 0x30
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	2b0f      	cmp	r3, #15
 8009c4c:	dde3      	ble.n	8009c16 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c52:	e018      	b.n	8009c86 <AES_CMAC_Final+0x29c>
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	21f1      	movs	r1, #241	; 0xf1
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	18d3      	adds	r3, r2, r3
 8009c5c:	185b      	adds	r3, r3, r1
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	6838      	ldr	r0, [r7, #0]
 8009c62:	2302      	movs	r3, #2
 8009c64:	33ff      	adds	r3, #255	; 0xff
 8009c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c68:	1841      	adds	r1, r0, r1
 8009c6a:	18cb      	adds	r3, r1, r3
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	4053      	eors	r3, r2
 8009c70:	b2d8      	uxtb	r0, r3
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	21f1      	movs	r1, #241	; 0xf1
 8009c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c78:	18d3      	adds	r3, r2, r3
 8009c7a:	185b      	adds	r3, r3, r1
 8009c7c:	1c02      	adds	r2, r0, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	3301      	adds	r3, #1
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	2b0f      	cmp	r3, #15
 8009c8a:	dde3      	ble.n	8009c54 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	33f1      	adds	r3, #241	; 0xf1
 8009c90:	0019      	movs	r1, r3
 8009c92:	240c      	movs	r4, #12
 8009c94:	193b      	adds	r3, r7, r4
 8009c96:	2210      	movs	r2, #16
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f00b feaf 	bl	80159fc <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	193b      	adds	r3, r7, r4
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f7ff fd71 	bl	800978c <aes_encrypt>
           memset1(K, 0, sizeof K);
 8009caa:	231c      	movs	r3, #28
 8009cac:	18fb      	adds	r3, r7, r3
 8009cae:	2210      	movs	r2, #16
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f00b fede 	bl	8015a74 <memset1>

}
 8009cb8:	46c0      	nop			; (mov r8, r8)
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	b013      	add	sp, #76	; 0x4c
 8009cbe:	bd90      	pop	{r4, r7, pc}

08009cc0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	0002      	movs	r2, r0
 8009cc8:	6039      	str	r1, [r7, #0]
 8009cca:	1dfb      	adds	r3, r7, #7
 8009ccc:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009cce:	230f      	movs	r3, #15
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	e025      	b.n	8009d24 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8009cd8:	230f      	movs	r3, #15
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	4816      	ldr	r0, [pc, #88]	; (8009d38 <GetKeyByID+0x78>)
 8009ce0:	2383      	movs	r3, #131	; 0x83
 8009ce2:	0099      	lsls	r1, r3, #2
 8009ce4:	0013      	movs	r3, r2
 8009ce6:	011b      	lsls	r3, r3, #4
 8009ce8:	189b      	adds	r3, r3, r2
 8009cea:	18c3      	adds	r3, r0, r3
 8009cec:	185b      	adds	r3, r3, r1
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	1dfa      	adds	r2, r7, #7
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d10f      	bne.n	8009d18 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8009cf8:	230f      	movs	r3, #15
 8009cfa:	18fb      	adds	r3, r7, r3
 8009cfc:	781a      	ldrb	r2, [r3, #0]
 8009cfe:	0013      	movs	r3, r2
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	189b      	adds	r3, r3, r2
 8009d04:	2282      	movs	r2, #130	; 0x82
 8009d06:	0092      	lsls	r2, r2, #2
 8009d08:	189a      	adds	r2, r3, r2
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <GetKeyByID+0x78>)
 8009d0c:	18d3      	adds	r3, r2, r3
 8009d0e:	1d1a      	adds	r2, r3, #4
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8009d14:	2300      	movs	r3, #0
 8009d16:	e00b      	b.n	8009d30 <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009d18:	210f      	movs	r1, #15
 8009d1a:	187b      	adds	r3, r7, r1
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	187b      	adds	r3, r7, r1
 8009d20:	3201      	adds	r2, #1
 8009d22:	701a      	strb	r2, [r3, #0]
 8009d24:	230f      	movs	r3, #15
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b15      	cmp	r3, #21
 8009d2c:	d9d4      	bls.n	8009cd8 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009d2e:	2303      	movs	r3, #3
}
 8009d30:	0018      	movs	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b004      	add	sp, #16
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20000380 	.word	0x20000380

08009d3c <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8009d3c:	b5b0      	push	{r4, r5, r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	0008      	movs	r0, r1
 8009d46:	0011      	movs	r1, r2
 8009d48:	607b      	str	r3, [r7, #4]
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	1c02      	adds	r2, r0, #0
 8009d50:	801a      	strh	r2, [r3, #0]
 8009d52:	2309      	movs	r3, #9
 8009d54:	18fb      	adds	r3, r7, r3
 8009d56:	1c0a      	adds	r2, r1, #0
 8009d58:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <ComputeCmac+0x2a>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009d66:	2302      	movs	r3, #2
 8009d68:	e03f      	b.n	8009dea <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8009d6a:	4b22      	ldr	r3, [pc, #136]	; (8009df4 <ComputeCmac+0xb8>)
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7ff fd58 	bl	8009822 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8009d72:	2527      	movs	r5, #39	; 0x27
 8009d74:	197c      	adds	r4, r7, r5
 8009d76:	2310      	movs	r3, #16
 8009d78:	18fa      	adds	r2, r7, r3
 8009d7a:	2309      	movs	r3, #9
 8009d7c:	18fb      	adds	r3, r7, r3
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	0011      	movs	r1, r2
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7ff ff9c 	bl	8009cc0 <GetKeyByID>
 8009d88:	0003      	movs	r3, r0
 8009d8a:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8009d8c:	197b      	adds	r3, r7, r5
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d127      	bne.n	8009de4 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <ComputeCmac+0xb8>)
 8009d9a:	0011      	movs	r1, r2
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f7ff fd5a 	bl	8009856 <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8009da2:	230a      	movs	r3, #10
 8009da4:	18fb      	adds	r3, r7, r3
 8009da6:	881a      	ldrh	r2, [r3, #0]
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <ComputeCmac+0xb8>)
 8009dac:	0018      	movs	r0, r3
 8009dae:	f7ff fd61 	bl	8009874 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8009db2:	4a10      	ldr	r2, [pc, #64]	; (8009df4 <ComputeCmac+0xb8>)
 8009db4:	2114      	movs	r1, #20
 8009db6:	000c      	movs	r4, r1
 8009db8:	187b      	adds	r3, r7, r1
 8009dba:	0011      	movs	r1, r2
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7ff fe14 	bl	80099ea <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8009dc2:	0021      	movs	r1, r4
 8009dc4:	187b      	adds	r3, r7, r1
 8009dc6:	78db      	ldrb	r3, [r3, #3]
 8009dc8:	061a      	lsls	r2, r3, #24
 8009dca:	187b      	adds	r3, r7, r1
 8009dcc:	789b      	ldrb	r3, [r3, #2]
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	187b      	adds	r3, r7, r1
 8009dd4:	785b      	ldrb	r3, [r3, #1]
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	187a      	adds	r2, r7, r1
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8009de4:	2327      	movs	r3, #39	; 0x27
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	781b      	ldrb	r3, [r3, #0]
}
 8009dea:	0018      	movs	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b00a      	add	sp, #40	; 0x28
 8009df0:	bdb0      	pop	{r4, r5, r7, pc}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	20000474 	.word	0x20000474

08009df8 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
    return;
 8009dfc:	46c0      	nop			; (mov r8, r8)
}
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
    // Initialize with defaults
    uint8_t itr = 0;
 8009e0c:	240f      	movs	r4, #15
 8009e0e:	193b      	adds	r3, r7, r4
 8009e10:	2200      	movs	r2, #0
 8009e12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8009e14:	193b      	adds	r3, r7, r4
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	193a      	adds	r2, r7, r4
 8009e1a:	1c59      	adds	r1, r3, #1
 8009e1c:	7011      	strb	r1, [r2, #0]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	49b4      	ldr	r1, [pc, #720]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009e22:	2383      	movs	r3, #131	; 0x83
 8009e24:	009a      	lsls	r2, r3, #2
 8009e26:	0003      	movs	r3, r0
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	181b      	adds	r3, r3, r0
 8009e2c:	18cb      	adds	r3, r1, r3
 8009e2e:	189b      	adds	r3, r3, r2
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8009e34:	193b      	adds	r3, r7, r4
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	193a      	adds	r2, r7, r4
 8009e3a:	1c59      	adds	r1, r3, #1
 8009e3c:	7011      	strb	r1, [r2, #0]
 8009e3e:	0018      	movs	r0, r3
 8009e40:	49ac      	ldr	r1, [pc, #688]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009e42:	2383      	movs	r3, #131	; 0x83
 8009e44:	009a      	lsls	r2, r3, #2
 8009e46:	0003      	movs	r3, r0
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	181b      	adds	r3, r3, r0
 8009e4c:	18cb      	adds	r3, r1, r3
 8009e4e:	189b      	adds	r3, r3, r2
 8009e50:	2201      	movs	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8009e54:	193b      	adds	r3, r7, r4
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	193a      	adds	r2, r7, r4
 8009e5a:	1c59      	adds	r1, r3, #1
 8009e5c:	7011      	strb	r1, [r2, #0]
 8009e5e:	0018      	movs	r0, r3
 8009e60:	49a4      	ldr	r1, [pc, #656]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009e62:	2383      	movs	r3, #131	; 0x83
 8009e64:	009a      	lsls	r2, r3, #2
 8009e66:	0003      	movs	r3, r0
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	181b      	adds	r3, r3, r0
 8009e6c:	18cb      	adds	r3, r1, r3
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	2202      	movs	r2, #2
 8009e72:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8009e74:	193b      	adds	r3, r7, r4
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	193a      	adds	r2, r7, r4
 8009e7a:	1c59      	adds	r1, r3, #1
 8009e7c:	7011      	strb	r1, [r2, #0]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	499c      	ldr	r1, [pc, #624]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009e82:	2383      	movs	r3, #131	; 0x83
 8009e84:	009a      	lsls	r2, r3, #2
 8009e86:	0003      	movs	r3, r0
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	181b      	adds	r3, r3, r0
 8009e8c:	18cb      	adds	r3, r1, r3
 8009e8e:	189b      	adds	r3, r3, r2
 8009e90:	2203      	movs	r2, #3
 8009e92:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8009e94:	193b      	adds	r3, r7, r4
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	193a      	adds	r2, r7, r4
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	7011      	strb	r1, [r2, #0]
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	4994      	ldr	r1, [pc, #592]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009ea2:	2383      	movs	r3, #131	; 0x83
 8009ea4:	009a      	lsls	r2, r3, #2
 8009ea6:	0003      	movs	r3, r0
 8009ea8:	011b      	lsls	r3, r3, #4
 8009eaa:	181b      	adds	r3, r3, r0
 8009eac:	18cb      	adds	r3, r1, r3
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	2204      	movs	r2, #4
 8009eb2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8009eb4:	193b      	adds	r3, r7, r4
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	193a      	adds	r2, r7, r4
 8009eba:	1c59      	adds	r1, r3, #1
 8009ebc:	7011      	strb	r1, [r2, #0]
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	498c      	ldr	r1, [pc, #560]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009ec2:	2383      	movs	r3, #131	; 0x83
 8009ec4:	009a      	lsls	r2, r3, #2
 8009ec6:	0003      	movs	r3, r0
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	181b      	adds	r3, r3, r0
 8009ecc:	18cb      	adds	r3, r1, r3
 8009ece:	189b      	adds	r3, r3, r2
 8009ed0:	2205      	movs	r2, #5
 8009ed2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8009ed4:	193b      	adds	r3, r7, r4
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	193a      	adds	r2, r7, r4
 8009eda:	1c59      	adds	r1, r3, #1
 8009edc:	7011      	strb	r1, [r2, #0]
 8009ede:	0018      	movs	r0, r3
 8009ee0:	4984      	ldr	r1, [pc, #528]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009ee2:	2383      	movs	r3, #131	; 0x83
 8009ee4:	009a      	lsls	r2, r3, #2
 8009ee6:	0003      	movs	r3, r0
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	181b      	adds	r3, r3, r0
 8009eec:	18cb      	adds	r3, r1, r3
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	2206      	movs	r2, #6
 8009ef2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8009ef4:	193b      	adds	r3, r7, r4
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	193a      	adds	r2, r7, r4
 8009efa:	1c59      	adds	r1, r3, #1
 8009efc:	7011      	strb	r1, [r2, #0]
 8009efe:	0018      	movs	r0, r3
 8009f00:	497c      	ldr	r1, [pc, #496]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009f02:	2383      	movs	r3, #131	; 0x83
 8009f04:	009a      	lsls	r2, r3, #2
 8009f06:	0003      	movs	r3, r0
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	181b      	adds	r3, r3, r0
 8009f0c:	18cb      	adds	r3, r1, r3
 8009f0e:	189b      	adds	r3, r3, r2
 8009f10:	2207      	movs	r2, #7
 8009f12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8009f14:	193b      	adds	r3, r7, r4
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	193a      	adds	r2, r7, r4
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	7011      	strb	r1, [r2, #0]
 8009f1e:	0018      	movs	r0, r3
 8009f20:	4974      	ldr	r1, [pc, #464]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009f22:	2383      	movs	r3, #131	; 0x83
 8009f24:	009a      	lsls	r2, r3, #2
 8009f26:	0003      	movs	r3, r0
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	181b      	adds	r3, r3, r0
 8009f2c:	18cb      	adds	r3, r1, r3
 8009f2e:	189b      	adds	r3, r3, r2
 8009f30:	227f      	movs	r2, #127	; 0x7f
 8009f32:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8009f34:	193b      	adds	r3, r7, r4
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	193a      	adds	r2, r7, r4
 8009f3a:	1c59      	adds	r1, r3, #1
 8009f3c:	7011      	strb	r1, [r2, #0]
 8009f3e:	0018      	movs	r0, r3
 8009f40:	496c      	ldr	r1, [pc, #432]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009f42:	2383      	movs	r3, #131	; 0x83
 8009f44:	009a      	lsls	r2, r3, #2
 8009f46:	0003      	movs	r3, r0
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	181b      	adds	r3, r3, r0
 8009f4c:	18cb      	adds	r3, r1, r3
 8009f4e:	189b      	adds	r3, r3, r2
 8009f50:	2280      	movs	r2, #128	; 0x80
 8009f52:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8009f54:	193b      	adds	r3, r7, r4
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	193a      	adds	r2, r7, r4
 8009f5a:	1c59      	adds	r1, r3, #1
 8009f5c:	7011      	strb	r1, [r2, #0]
 8009f5e:	0018      	movs	r0, r3
 8009f60:	4964      	ldr	r1, [pc, #400]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009f62:	2383      	movs	r3, #131	; 0x83
 8009f64:	009a      	lsls	r2, r3, #2
 8009f66:	0003      	movs	r3, r0
 8009f68:	011b      	lsls	r3, r3, #4
 8009f6a:	181b      	adds	r3, r3, r0
 8009f6c:	18cb      	adds	r3, r1, r3
 8009f6e:	189b      	adds	r3, r3, r2
 8009f70:	2281      	movs	r2, #129	; 0x81
 8009f72:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8009f74:	193b      	adds	r3, r7, r4
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	193a      	adds	r2, r7, r4
 8009f7a:	1c59      	adds	r1, r3, #1
 8009f7c:	7011      	strb	r1, [r2, #0]
 8009f7e:	0018      	movs	r0, r3
 8009f80:	495c      	ldr	r1, [pc, #368]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009f82:	2383      	movs	r3, #131	; 0x83
 8009f84:	009a      	lsls	r2, r3, #2
 8009f86:	0003      	movs	r3, r0
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	181b      	adds	r3, r3, r0
 8009f8c:	18cb      	adds	r3, r1, r3
 8009f8e:	189b      	adds	r3, r3, r2
 8009f90:	2282      	movs	r2, #130	; 0x82
 8009f92:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8009f94:	193b      	adds	r3, r7, r4
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	193a      	adds	r2, r7, r4
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	7011      	strb	r1, [r2, #0]
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	4954      	ldr	r1, [pc, #336]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009fa2:	2383      	movs	r3, #131	; 0x83
 8009fa4:	009a      	lsls	r2, r3, #2
 8009fa6:	0003      	movs	r3, r0
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	181b      	adds	r3, r3, r0
 8009fac:	18cb      	adds	r3, r1, r3
 8009fae:	189b      	adds	r3, r3, r2
 8009fb0:	2283      	movs	r2, #131	; 0x83
 8009fb2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8009fb4:	193b      	adds	r3, r7, r4
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	193a      	adds	r2, r7, r4
 8009fba:	1c59      	adds	r1, r3, #1
 8009fbc:	7011      	strb	r1, [r2, #0]
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	494c      	ldr	r1, [pc, #304]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009fc2:	2383      	movs	r3, #131	; 0x83
 8009fc4:	009a      	lsls	r2, r3, #2
 8009fc6:	0003      	movs	r3, r0
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	181b      	adds	r3, r3, r0
 8009fcc:	18cb      	adds	r3, r1, r3
 8009fce:	189b      	adds	r3, r3, r2
 8009fd0:	2284      	movs	r2, #132	; 0x84
 8009fd2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8009fd4:	193b      	adds	r3, r7, r4
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	193a      	adds	r2, r7, r4
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	7011      	strb	r1, [r2, #0]
 8009fde:	0018      	movs	r0, r3
 8009fe0:	4944      	ldr	r1, [pc, #272]	; (800a0f4 <SecureElementInit+0x2f0>)
 8009fe2:	2383      	movs	r3, #131	; 0x83
 8009fe4:	009a      	lsls	r2, r3, #2
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	181b      	adds	r3, r3, r0
 8009fec:	18cb      	adds	r3, r1, r3
 8009fee:	189b      	adds	r3, r3, r2
 8009ff0:	2285      	movs	r2, #133	; 0x85
 8009ff2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8009ff4:	193b      	adds	r3, r7, r4
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	193a      	adds	r2, r7, r4
 8009ffa:	1c59      	adds	r1, r3, #1
 8009ffc:	7011      	strb	r1, [r2, #0]
 8009ffe:	0018      	movs	r0, r3
 800a000:	493c      	ldr	r1, [pc, #240]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a002:	2383      	movs	r3, #131	; 0x83
 800a004:	009a      	lsls	r2, r3, #2
 800a006:	0003      	movs	r3, r0
 800a008:	011b      	lsls	r3, r3, #4
 800a00a:	181b      	adds	r3, r3, r0
 800a00c:	18cb      	adds	r3, r1, r3
 800a00e:	189b      	adds	r3, r3, r2
 800a010:	2286      	movs	r2, #134	; 0x86
 800a012:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800a014:	193b      	adds	r3, r7, r4
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	193a      	adds	r2, r7, r4
 800a01a:	1c59      	adds	r1, r3, #1
 800a01c:	7011      	strb	r1, [r2, #0]
 800a01e:	0018      	movs	r0, r3
 800a020:	4934      	ldr	r1, [pc, #208]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a022:	2383      	movs	r3, #131	; 0x83
 800a024:	009a      	lsls	r2, r3, #2
 800a026:	0003      	movs	r3, r0
 800a028:	011b      	lsls	r3, r3, #4
 800a02a:	181b      	adds	r3, r3, r0
 800a02c:	18cb      	adds	r3, r1, r3
 800a02e:	189b      	adds	r3, r3, r2
 800a030:	2287      	movs	r2, #135	; 0x87
 800a032:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 800a034:	193b      	adds	r3, r7, r4
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	193a      	adds	r2, r7, r4
 800a03a:	1c59      	adds	r1, r3, #1
 800a03c:	7011      	strb	r1, [r2, #0]
 800a03e:	0018      	movs	r0, r3
 800a040:	492c      	ldr	r1, [pc, #176]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a042:	2383      	movs	r3, #131	; 0x83
 800a044:	009a      	lsls	r2, r3, #2
 800a046:	0003      	movs	r3, r0
 800a048:	011b      	lsls	r3, r3, #4
 800a04a:	181b      	adds	r3, r3, r0
 800a04c:	18cb      	adds	r3, r1, r3
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	2288      	movs	r2, #136	; 0x88
 800a052:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 800a054:	193b      	adds	r3, r7, r4
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	193a      	adds	r2, r7, r4
 800a05a:	1c59      	adds	r1, r3, #1
 800a05c:	7011      	strb	r1, [r2, #0]
 800a05e:	0018      	movs	r0, r3
 800a060:	4924      	ldr	r1, [pc, #144]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a062:	2383      	movs	r3, #131	; 0x83
 800a064:	009a      	lsls	r2, r3, #2
 800a066:	0003      	movs	r3, r0
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	181b      	adds	r3, r3, r0
 800a06c:	18cb      	adds	r3, r1, r3
 800a06e:	189b      	adds	r3, r3, r2
 800a070:	2289      	movs	r2, #137	; 0x89
 800a072:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 800a074:	193b      	adds	r3, r7, r4
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	193a      	adds	r2, r7, r4
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	7011      	strb	r1, [r2, #0]
 800a07e:	0018      	movs	r0, r3
 800a080:	491c      	ldr	r1, [pc, #112]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a082:	2383      	movs	r3, #131	; 0x83
 800a084:	009a      	lsls	r2, r3, #2
 800a086:	0003      	movs	r3, r0
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	181b      	adds	r3, r3, r0
 800a08c:	18cb      	adds	r3, r1, r3
 800a08e:	189b      	adds	r3, r3, r2
 800a090:	228a      	movs	r2, #138	; 0x8a
 800a092:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 800a094:	193b      	adds	r3, r7, r4
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	193a      	adds	r2, r7, r4
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	7011      	strb	r1, [r2, #0]
 800a09e:	0018      	movs	r0, r3
 800a0a0:	4914      	ldr	r1, [pc, #80]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a0a2:	2383      	movs	r3, #131	; 0x83
 800a0a4:	009a      	lsls	r2, r3, #2
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	011b      	lsls	r3, r3, #4
 800a0aa:	181b      	adds	r3, r3, r0
 800a0ac:	18cb      	adds	r3, r1, r3
 800a0ae:	189b      	adds	r3, r3, r2
 800a0b0:	228b      	movs	r2, #139	; 0x8b
 800a0b2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
 800a0b4:	193b      	adds	r3, r7, r4
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	193a      	adds	r2, r7, r4
 800a0ba:	1c59      	adds	r1, r3, #1
 800a0bc:	7011      	strb	r1, [r2, #0]
 800a0be:	0018      	movs	r0, r3
 800a0c0:	490c      	ldr	r1, [pc, #48]	; (800a0f4 <SecureElementInit+0x2f0>)
 800a0c2:	2383      	movs	r3, #131	; 0x83
 800a0c4:	009a      	lsls	r2, r3, #2
 800a0c6:	0003      	movs	r3, r0
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	181b      	adds	r3, r3, r0
 800a0cc:	18cb      	adds	r3, r1, r3
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	228c      	movs	r2, #140	; 0x8c
 800a0d2:	701a      	strb	r2, [r3, #0]

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <SecureElementInit+0x2de>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 800a0da:	4b07      	ldr	r3, [pc, #28]	; (800a0f8 <SecureElementInit+0x2f4>)
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	e002      	b.n	800a0e8 <SecureElementInit+0x2e4>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800a0e2:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <SecureElementInit+0x2f4>)
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <SecureElementInit+0x2f8>)
 800a0e6:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	b005      	add	sp, #20
 800a0f0:	bd90      	pop	{r4, r7, pc}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	20000380 	.word	0x20000380
 800a0f8:	20000704 	.word	0x20000704
 800a0fc:	08009df9 	.word	0x08009df9

0800a100 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d008      	beq.n	800a120 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 800a10e:	23e1      	movs	r3, #225	; 0xe1
 800a110:	009a      	lsls	r2, r3, #2
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4b05      	ldr	r3, [pc, #20]	; (800a12c <SecureElementRestoreNvmCtx+0x2c>)
 800a116:	0018      	movs	r0, r3
 800a118:	f00b fc70 	bl	80159fc <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 800a11c:	2300      	movs	r3, #0
 800a11e:	e000      	b.n	800a122 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a120:	2302      	movs	r3, #2
    }
}
 800a122:	0018      	movs	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	b002      	add	sp, #8
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	46c0      	nop			; (mov r8, r8)
 800a12c:	20000380 	.word	0x20000380

0800a130 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	22e1      	movs	r2, #225	; 0xe1
 800a13c:	0092      	lsls	r2, r2, #2
 800a13e:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 800a140:	4b02      	ldr	r3, [pc, #8]	; (800a14c <SecureElementGetNvmCtx+0x1c>)
}
 800a142:	0018      	movs	r0, r3
 800a144:	46bd      	mov	sp, r7
 800a146:	b002      	add	sp, #8
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	20000380 	.word	0x20000380

0800a150 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800a150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a152:	b089      	sub	sp, #36	; 0x24
 800a154:	af00      	add	r7, sp, #0
 800a156:	0002      	movs	r2, r0
 800a158:	6039      	str	r1, [r7, #0]
 800a15a:	1dfb      	adds	r3, r7, #7
 800a15c:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a164:	2302      	movs	r3, #2
 800a166:	e063      	b.n	800a230 <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a168:	231e      	movs	r3, #30
 800a16a:	18fb      	adds	r3, r7, r3
 800a16c:	2206      	movs	r2, #6
 800a16e:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800a170:	231f      	movs	r3, #31
 800a172:	18fb      	adds	r3, r7, r3
 800a174:	2200      	movs	r2, #0
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	e054      	b.n	800a224 <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800a17a:	231f      	movs	r3, #31
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	781a      	ldrb	r2, [r3, #0]
 800a180:	482d      	ldr	r0, [pc, #180]	; (800a238 <SecureElementSetKey+0xe8>)
 800a182:	2383      	movs	r3, #131	; 0x83
 800a184:	0099      	lsls	r1, r3, #2
 800a186:	0013      	movs	r3, r2
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	189b      	adds	r3, r3, r2
 800a18c:	18c3      	adds	r3, r0, r3
 800a18e:	185b      	adds	r3, r3, r1
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	1dfa      	adds	r2, r7, #7
 800a194:	7812      	ldrb	r2, [r2, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d13e      	bne.n	800a218 <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 800a19a:	231f      	movs	r3, #31
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	781a      	ldrb	r2, [r3, #0]
 800a1a0:	4825      	ldr	r0, [pc, #148]	; (800a238 <SecureElementSetKey+0xe8>)
 800a1a2:	2383      	movs	r3, #131	; 0x83
 800a1a4:	0099      	lsls	r1, r3, #2
 800a1a6:	0013      	movs	r3, r2
 800a1a8:	011b      	lsls	r3, r3, #4
 800a1aa:	189b      	adds	r3, r3, r2
 800a1ac:	18c3      	adds	r3, r0, r3
 800a1ae:	185b      	adds	r3, r3, r1
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b25b      	sxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da19      	bge.n	800a1ec <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 800a1b8:	250c      	movs	r5, #12
 800a1ba:	197b      	adds	r3, r7, r5
 800a1bc:	0018      	movs	r0, r3
 800a1be:	2310      	movs	r3, #16
 800a1c0:	001a      	movs	r2, r3
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	f014 ffba 	bl	801f13c <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800a1c8:	261e      	movs	r6, #30
 800a1ca:	19bc      	adds	r4, r7, r6
 800a1cc:	197b      	adds	r3, r7, r5
 800a1ce:	6838      	ldr	r0, [r7, #0]
 800a1d0:	227f      	movs	r2, #127	; 0x7f
 800a1d2:	2110      	movs	r1, #16
 800a1d4:	f000 f89a 	bl	800a30c <SecureElementAesEncrypt>
 800a1d8:	0003      	movs	r3, r0
 800a1da:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 800a1dc:	19bb      	adds	r3, r7, r6
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d019      	beq.n	800a218 <SecureElementSetKey+0xc8>
                {
                    return retval;
 800a1e4:	231e      	movs	r3, #30
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	e021      	b.n	800a230 <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 800a1ec:	231f      	movs	r3, #31
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	781a      	ldrb	r2, [r3, #0]
 800a1f2:	0013      	movs	r3, r2
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	189b      	adds	r3, r3, r2
 800a1f8:	2282      	movs	r2, #130	; 0x82
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	189a      	adds	r2, r3, r2
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <SecureElementSetKey+0xe8>)
 800a200:	18d3      	adds	r3, r2, r3
 800a202:	3305      	adds	r3, #5
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	2210      	movs	r2, #16
 800a208:	0018      	movs	r0, r3
 800a20a:	f00b fbf7 	bl	80159fc <memcpy1>
                SeNvmCtxChanged( );
 800a20e:	4b0b      	ldr	r3, [pc, #44]	; (800a23c <SecureElementSetKey+0xec>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 800a214:	2300      	movs	r3, #0
 800a216:	e00b      	b.n	800a230 <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800a218:	211f      	movs	r1, #31
 800a21a:	187b      	adds	r3, r7, r1
 800a21c:	781a      	ldrb	r2, [r3, #0]
 800a21e:	187b      	adds	r3, r7, r1
 800a220:	3201      	adds	r2, #1
 800a222:	701a      	strb	r2, [r3, #0]
 800a224:	231f      	movs	r3, #31
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b15      	cmp	r3, #21
 800a22c:	d9a5      	bls.n	800a17a <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a22e:	2303      	movs	r3, #3
}
 800a230:	0018      	movs	r0, r3
 800a232:	46bd      	mov	sp, r7
 800a234:	b009      	add	sp, #36	; 0x24
 800a236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a238:	20000380 	.word	0x20000380
 800a23c:	20000704 	.word	0x20000704

0800a240 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800a240:	b590      	push	{r4, r7, lr}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	0008      	movs	r0, r1
 800a24a:	0011      	movs	r1, r2
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	230a      	movs	r3, #10
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	1c02      	adds	r2, r0, #0
 800a254:	801a      	strh	r2, [r3, #0]
 800a256:	2009      	movs	r0, #9
 800a258:	183b      	adds	r3, r7, r0
 800a25a:	1c0a      	adds	r2, r1, #0
 800a25c:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 800a25e:	183b      	adds	r3, r7, r0
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b7e      	cmp	r3, #126	; 0x7e
 800a264:	d901      	bls.n	800a26a <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a266:	2303      	movs	r3, #3
 800a268:	e00b      	b.n	800a282 <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 800a26a:	687c      	ldr	r4, [r7, #4]
 800a26c:	2309      	movs	r3, #9
 800a26e:	18fb      	adds	r3, r7, r3
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	230a      	movs	r3, #10
 800a274:	18fb      	adds	r3, r7, r3
 800a276:	8819      	ldrh	r1, [r3, #0]
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	0023      	movs	r3, r4
 800a27c:	f7ff fd5e 	bl	8009d3c <ComputeCmac>
 800a280:	0003      	movs	r3, r0
}
 800a282:	0018      	movs	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	b005      	add	sp, #20
 800a288:	bd90      	pop	{r4, r7, pc}

0800a28a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 800a28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28c:	b087      	sub	sp, #28
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	0008      	movs	r0, r1
 800a294:	607a      	str	r2, [r7, #4]
 800a296:	0019      	movs	r1, r3
 800a298:	230a      	movs	r3, #10
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	1c02      	adds	r2, r0, #0
 800a29e:	801a      	strh	r2, [r3, #0]
 800a2a0:	2309      	movs	r3, #9
 800a2a2:	18fb      	adds	r3, r7, r3
 800a2a4:	1c0a      	adds	r2, r1, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e027      	b.n	800a302 <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a2b2:	2617      	movs	r6, #23
 800a2b4:	19bb      	adds	r3, r7, r6
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 800a2be:	19bc      	adds	r4, r7, r6
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	18fd      	adds	r5, r7, r3
 800a2c4:	2309      	movs	r3, #9
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	230a      	movs	r3, #10
 800a2cc:	18fb      	adds	r3, r7, r3
 800a2ce:	8819      	ldrh	r1, [r3, #0]
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	002b      	movs	r3, r5
 800a2d4:	f7ff fd32 	bl	8009d3c <ComputeCmac>
 800a2d8:	0003      	movs	r3, r0
 800a2da:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a2dc:	19bb      	adds	r3, r7, r6
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 800a2e4:	2317      	movs	r3, #23
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	e00a      	b.n	800a302 <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d003      	beq.n	800a2fc <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800a2f4:	2317      	movs	r3, #23
 800a2f6:	18fb      	adds	r3, r7, r3
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 800a2fc:	2317      	movs	r3, #23
 800a2fe:	18fb      	adds	r3, r7, r3
 800a300:	781b      	ldrb	r3, [r3, #0]
}
 800a302:	0018      	movs	r0, r3
 800a304:	46bd      	mov	sp, r7
 800a306:	b007      	add	sp, #28
 800a308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a30c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 800a30c:	b5b0      	push	{r4, r5, r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	0008      	movs	r0, r1
 800a316:	0011      	movs	r1, r2
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	230a      	movs	r3, #10
 800a31c:	18fb      	adds	r3, r7, r3
 800a31e:	1c02      	adds	r2, r0, #0
 800a320:	801a      	strh	r2, [r3, #0]
 800a322:	2309      	movs	r3, #9
 800a324:	18fb      	adds	r3, r7, r3
 800a326:	1c0a      	adds	r2, r1, #0
 800a328:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <SecureElementAesEncrypt+0x2a>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a336:	2302      	movs	r3, #2
 800a338:	e04c      	b.n	800a3d4 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800a33a:	230a      	movs	r3, #10
 800a33c:	18fb      	adds	r3, r7, r3
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	220f      	movs	r2, #15
 800a342:	4013      	ands	r3, r2
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800a34a:	2305      	movs	r3, #5
 800a34c:	e042      	b.n	800a3d4 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800a34e:	4b23      	ldr	r3, [pc, #140]	; (800a3dc <SecureElementAesEncrypt+0xd0>)
 800a350:	22f0      	movs	r2, #240	; 0xf0
 800a352:	2100      	movs	r1, #0
 800a354:	0018      	movs	r0, r3
 800a356:	f00b fb8d 	bl	8015a74 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800a35a:	2516      	movs	r5, #22
 800a35c:	197c      	adds	r4, r7, r5
 800a35e:	2310      	movs	r3, #16
 800a360:	18fa      	adds	r2, r7, r3
 800a362:	2309      	movs	r3, #9
 800a364:	18fb      	adds	r3, r7, r3
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	0011      	movs	r1, r2
 800a36a:	0018      	movs	r0, r3
 800a36c:	f7ff fca8 	bl	8009cc0 <GetKeyByID>
 800a370:	0003      	movs	r3, r0
 800a372:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800a374:	197b      	adds	r3, r7, r5
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d128      	bne.n	800a3ce <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	3301      	adds	r3, #1
 800a380:	4a16      	ldr	r2, [pc, #88]	; (800a3dc <SecureElementAesEncrypt+0xd0>)
 800a382:	2110      	movs	r1, #16
 800a384:	0018      	movs	r0, r3
 800a386:	f7ff f8cf 	bl	8009528 <aes_set_key>

        uint8_t block = 0;
 800a38a:	2317      	movs	r3, #23
 800a38c:	18fb      	adds	r3, r7, r3
 800a38e:	2200      	movs	r2, #0
 800a390:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800a392:	e017      	b.n	800a3c4 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800a394:	2417      	movs	r4, #23
 800a396:	193b      	adds	r3, r7, r4
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	18d0      	adds	r0, r2, r3
 800a39e:	193b      	adds	r3, r7, r4
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	18d3      	adds	r3, r2, r3
 800a3a6:	4a0d      	ldr	r2, [pc, #52]	; (800a3dc <SecureElementAesEncrypt+0xd0>)
 800a3a8:	0019      	movs	r1, r3
 800a3aa:	f7ff f9ef 	bl	800978c <aes_encrypt>
            block = block + 16;
 800a3ae:	193b      	adds	r3, r7, r4
 800a3b0:	193a      	adds	r2, r7, r4
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	3210      	adds	r2, #16
 800a3b6:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	18bb      	adds	r3, r7, r2
 800a3bc:	18ba      	adds	r2, r7, r2
 800a3be:	8812      	ldrh	r2, [r2, #0]
 800a3c0:	3a10      	subs	r2, #16
 800a3c2:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800a3c4:	230a      	movs	r3, #10
 800a3c6:	18fb      	adds	r3, r7, r3
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1e2      	bne.n	800a394 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 800a3ce:	2316      	movs	r3, #22
 800a3d0:	18fb      	adds	r3, r7, r3
 800a3d2:	781b      	ldrb	r3, [r3, #0]
}
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	b006      	add	sp, #24
 800a3da:	bdb0      	pop	{r4, r5, r7, pc}
 800a3dc:	20000380 	.word	0x20000380

0800a3e0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 800a3e0:	b5b0      	push	{r4, r5, r7, lr}
 800a3e2:	b08a      	sub	sp, #40	; 0x28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	0019      	movs	r1, r3
 800a3ec:	1dfb      	adds	r3, r7, #7
 800a3ee:	701a      	strb	r2, [r3, #0]
 800a3f0:	1dbb      	adds	r3, r7, #6
 800a3f2:	1c0a      	adds	r2, r1, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e066      	b.n	800a4ce <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800a400:	2327      	movs	r3, #39	; 0x27
 800a402:	18fb      	adds	r3, r7, r3
 800a404:	2206      	movs	r2, #6
 800a406:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 800a408:	2314      	movs	r3, #20
 800a40a:	18fb      	adds	r3, r7, r3
 800a40c:	0018      	movs	r0, r3
 800a40e:	2310      	movs	r3, #16
 800a410:	001a      	movs	r2, r3
 800a412:	2100      	movs	r1, #0
 800a414:	f014 fe92 	bl	801f13c <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 800a418:	1dbb      	adds	r3, r7, #6
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b7f      	cmp	r3, #127	; 0x7f
 800a41e:	d10e      	bne.n	800a43e <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800a420:	1dfb      	adds	r3, r7, #7
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <SecureElementDeriveAndStoreKey+0x52>
 800a428:	230c      	movs	r3, #12
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	789b      	ldrb	r3, [r3, #2]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <SecureElementDeriveAndStoreKey+0x5a>
 800a432:	1dfb      	adds	r3, r7, #7
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e047      	b.n	800a4ce <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	2124      	movs	r1, #36	; 0x24
 800a444:	187b      	adds	r3, r7, r1
 800a446:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	3301      	adds	r3, #1
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	b21a      	sxth	r2, r3
 800a452:	187b      	adds	r3, r7, r1
 800a454:	2000      	movs	r0, #0
 800a456:	5e1b      	ldrsh	r3, [r3, r0]
 800a458:	4313      	orrs	r3, r2
 800a45a:	b21a      	sxth	r2, r3
 800a45c:	187b      	adds	r3, r7, r1
 800a45e:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 800a460:	1dbb      	adds	r3, r7, #6
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b7f      	cmp	r3, #127	; 0x7f
 800a466:	d108      	bne.n	800a47a <SecureElementDeriveAndStoreKey+0x9a>
 800a468:	2324      	movs	r3, #36	; 0x24
 800a46a:	18fb      	adds	r3, r7, r3
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	2b0f      	cmp	r3, #15
 800a470:	d803      	bhi.n	800a47a <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 800a472:	2327      	movs	r3, #39	; 0x27
 800a474:	18fb      	adds	r3, r7, r3
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	e029      	b.n	800a4ce <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800a47a:	2527      	movs	r5, #39	; 0x27
 800a47c:	197c      	adds	r4, r7, r5
 800a47e:	2314      	movs	r3, #20
 800a480:	18f9      	adds	r1, r7, r3
 800a482:	1dfb      	adds	r3, r7, #7
 800a484:	781a      	ldrb	r2, [r3, #0]
 800a486:	68b8      	ldr	r0, [r7, #8]
 800a488:	000b      	movs	r3, r1
 800a48a:	2110      	movs	r1, #16
 800a48c:	f7ff ff3e 	bl	800a30c <SecureElementAesEncrypt>
 800a490:	0003      	movs	r3, r0
 800a492:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a494:	197b      	adds	r3, r7, r5
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 800a49c:	2327      	movs	r3, #39	; 0x27
 800a49e:	18fb      	adds	r3, r7, r3
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	e014      	b.n	800a4ce <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800a4a4:	2527      	movs	r5, #39	; 0x27
 800a4a6:	197c      	adds	r4, r7, r5
 800a4a8:	2314      	movs	r3, #20
 800a4aa:	18fa      	adds	r2, r7, r3
 800a4ac:	1dbb      	adds	r3, r7, #6
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	0011      	movs	r1, r2
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f7ff fe4c 	bl	800a150 <SecureElementSetKey>
 800a4b8:	0003      	movs	r3, r0
 800a4ba:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800a4bc:	197b      	adds	r3, r7, r5
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 800a4c4:	2327      	movs	r3, #39	; 0x27
 800a4c6:	18fb      	adds	r3, r7, r3
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	e000      	b.n	800a4ce <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	b00a      	add	sp, #40	; 0x28
 800a4d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a4d8 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a4de:	f00b fa37 	bl	8015950 <TimerGetCurrentTime>
 800a4e2:	0002      	movs	r2, r0
 800a4e4:	4b1f      	ldr	r3, [pc, #124]	; (800a564 <OnRadioTxDone+0x8c>)
 800a4e6:	601a      	str	r2, [r3, #0]
    uint64_t tm = itsdk_time_get_ms();
 800a4e8:	f012 fe00 	bl	801d0ec <itsdk_time_get_ms>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	000c      	movs	r4, r1
 800a4f0:	603b      	str	r3, [r7, #0]
 800a4f2:	607c      	str	r4, [r7, #4]
    MacCtx.LastTxSysTime.Seconds = tm/1000;
 800a4f4:	6838      	ldr	r0, [r7, #0]
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	22fa      	movs	r2, #250	; 0xfa
 800a4fa:	0092      	lsls	r2, r2, #2
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f7f5 ffe3 	bl	80004c8 <__aeabi_uldivmod>
 800a502:	0003      	movs	r3, r0
 800a504:	000c      	movs	r4, r1
 800a506:	0019      	movs	r1, r3
 800a508:	4a17      	ldr	r2, [pc, #92]	; (800a568 <OnRadioTxDone+0x90>)
 800a50a:	23d3      	movs	r3, #211	; 0xd3
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	50d1      	str	r1, [r2, r3]
    MacCtx.LastTxSysTime.SubSeconds = tm % 1000;
 800a510:	6838      	ldr	r0, [r7, #0]
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	22fa      	movs	r2, #250	; 0xfa
 800a516:	0092      	lsls	r2, r2, #2
 800a518:	2300      	movs	r3, #0
 800a51a:	f7f5 ffd5 	bl	80004c8 <__aeabi_uldivmod>
 800a51e:	001c      	movs	r4, r3
 800a520:	0013      	movs	r3, r2
 800a522:	b219      	sxth	r1, r3
 800a524:	4a10      	ldr	r2, [pc, #64]	; (800a568 <OnRadioTxDone+0x90>)
 800a526:	23d4      	movs	r3, #212	; 0xd4
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	52d1      	strh	r1, [r2, r3]

    LoRaMacRadioEvents.Events.TxDone = 1;
 800a52c:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <OnRadioTxDone+0x94>)
 800a52e:	781a      	ldrb	r2, [r3, #0]
 800a530:	2110      	movs	r1, #16
 800a532:	430a      	orrs	r2, r1
 800a534:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a536:	4a0c      	ldr	r2, [pc, #48]	; (800a568 <OnRadioTxDone+0x90>)
 800a538:	23d7      	movs	r3, #215	; 0xd7
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	58d3      	ldr	r3, [r2, r3]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00c      	beq.n	800a55c <OnRadioTxDone+0x84>
 800a542:	4a09      	ldr	r2, [pc, #36]	; (800a568 <OnRadioTxDone+0x90>)
 800a544:	23d7      	movs	r3, #215	; 0xd7
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	58d3      	ldr	r3, [r2, r3]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <OnRadioTxDone+0x84>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a550:	4a05      	ldr	r2, [pc, #20]	; (800a568 <OnRadioTxDone+0x90>)
 800a552:	23d7      	movs	r3, #215	; 0xd7
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	58d3      	ldr	r3, [r2, r3]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
#endif
}
 800a55c:	46c0      	nop			; (mov r8, r8)
 800a55e:	46bd      	mov	sp, r7
 800a560:	b003      	add	sp, #12
 800a562:	bd90      	pop	{r4, r7, pc}
 800a564:	20001568 	.word	0x20001568
 800a568:	20000708 	.word	0x20000708
 800a56c:	20000da8 	.word	0x20000da8

0800a570 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800a570:	b5b0      	push	{r4, r5, r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	000c      	movs	r4, r1
 800a57a:	0010      	movs	r0, r2
 800a57c:	0019      	movs	r1, r3
 800a57e:	250a      	movs	r5, #10
 800a580:	197b      	adds	r3, r7, r5
 800a582:	1c22      	adds	r2, r4, #0
 800a584:	801a      	strh	r2, [r3, #0]
 800a586:	2408      	movs	r4, #8
 800a588:	193b      	adds	r3, r7, r4
 800a58a:	1c02      	adds	r2, r0, #0
 800a58c:	801a      	strh	r2, [r3, #0]
 800a58e:	1dfb      	adds	r3, r7, #7
 800a590:	1c0a      	adds	r2, r1, #0
 800a592:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a594:	f00b f9dc 	bl	8015950 <TimerGetCurrentTime>
 800a598:	0002      	movs	r2, r0
 800a59a:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <OnRadioRxDone+0x84>)
 800a59c:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800a59e:	4b15      	ldr	r3, [pc, #84]	; (800a5f4 <OnRadioRxDone+0x84>)
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800a5a4:	4b13      	ldr	r3, [pc, #76]	; (800a5f4 <OnRadioRxDone+0x84>)
 800a5a6:	197a      	adds	r2, r7, r5
 800a5a8:	8812      	ldrh	r2, [r2, #0]
 800a5aa:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800a5ac:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <OnRadioRxDone+0x84>)
 800a5ae:	193a      	adds	r2, r7, r4
 800a5b0:	8812      	ldrh	r2, [r2, #0]
 800a5b2:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <OnRadioRxDone+0x84>)
 800a5b6:	1dfa      	adds	r2, r7, #7
 800a5b8:	7812      	ldrb	r2, [r2, #0]
 800a5ba:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <OnRadioRxDone+0x88>)
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	2108      	movs	r1, #8
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a5c6:	4a0d      	ldr	r2, [pc, #52]	; (800a5fc <OnRadioRxDone+0x8c>)
 800a5c8:	23d7      	movs	r3, #215	; 0xd7
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	58d3      	ldr	r3, [r2, r3]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00c      	beq.n	800a5ec <OnRadioRxDone+0x7c>
 800a5d2:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <OnRadioRxDone+0x8c>)
 800a5d4:	23d7      	movs	r3, #215	; 0xd7
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	58d3      	ldr	r3, [r2, r3]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a5e0:	4a06      	ldr	r2, [pc, #24]	; (800a5fc <OnRadioRxDone+0x8c>)
 800a5e2:	23d7      	movs	r3, #215	; 0xd7
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	58d3      	ldr	r3, [r2, r3]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
#endif
}
 800a5ec:	46c0      	nop			; (mov r8, r8)
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	b004      	add	sp, #16
 800a5f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f4:	2000156c 	.word	0x2000156c
 800a5f8:	20000da8 	.word	0x20000da8
 800a5fc:	20000708 	.word	0x20000708

0800a600 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <OnRadioTxTimeout+0x3c>)
 800a606:	781a      	ldrb	r2, [r3, #0]
 800a608:	2104      	movs	r1, #4
 800a60a:	430a      	orrs	r2, r1
 800a60c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a60e:	4a0c      	ldr	r2, [pc, #48]	; (800a640 <OnRadioTxTimeout+0x40>)
 800a610:	23d7      	movs	r3, #215	; 0xd7
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	58d3      	ldr	r3, [r2, r3]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00c      	beq.n	800a634 <OnRadioTxTimeout+0x34>
 800a61a:	4a09      	ldr	r2, [pc, #36]	; (800a640 <OnRadioTxTimeout+0x40>)
 800a61c:	23d7      	movs	r3, #215	; 0xd7
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	58d3      	ldr	r3, [r2, r3]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d005      	beq.n	800a634 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a628:	4a05      	ldr	r2, [pc, #20]	; (800a640 <OnRadioTxTimeout+0x40>)
 800a62a:	23d7      	movs	r3, #215	; 0xd7
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	58d3      	ldr	r3, [r2, r3]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
#endif
}
 800a634:	46c0      	nop			; (mov r8, r8)
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	20000da8 	.word	0x20000da8
 800a640:	20000708 	.word	0x20000708

0800a644 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800a648:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <OnRadioRxError+0x3c>)
 800a64a:	781a      	ldrb	r2, [r3, #0]
 800a64c:	2102      	movs	r1, #2
 800a64e:	430a      	orrs	r2, r1
 800a650:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a652:	4a0c      	ldr	r2, [pc, #48]	; (800a684 <OnRadioRxError+0x40>)
 800a654:	23d7      	movs	r3, #215	; 0xd7
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	58d3      	ldr	r3, [r2, r3]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00c      	beq.n	800a678 <OnRadioRxError+0x34>
 800a65e:	4a09      	ldr	r2, [pc, #36]	; (800a684 <OnRadioRxError+0x40>)
 800a660:	23d7      	movs	r3, #215	; 0xd7
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	58d3      	ldr	r3, [r2, r3]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a66c:	4a05      	ldr	r2, [pc, #20]	; (800a684 <OnRadioRxError+0x40>)
 800a66e:	23d7      	movs	r3, #215	; 0xd7
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	58d3      	ldr	r3, [r2, r3]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	4798      	blx	r3
    }
}
 800a678:	46c0      	nop			; (mov r8, r8)
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	20000da8 	.word	0x20000da8
 800a684:	20000708 	.word	0x20000708

0800a688 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <OnRadioRxTimeout+0x3c>)
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	2101      	movs	r1, #1
 800a692:	430a      	orrs	r2, r1
 800a694:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a696:	4a0c      	ldr	r2, [pc, #48]	; (800a6c8 <OnRadioRxTimeout+0x40>)
 800a698:	23d7      	movs	r3, #215	; 0xd7
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	58d3      	ldr	r3, [r2, r3]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00c      	beq.n	800a6bc <OnRadioRxTimeout+0x34>
 800a6a2:	4a09      	ldr	r2, [pc, #36]	; (800a6c8 <OnRadioRxTimeout+0x40>)
 800a6a4:	23d7      	movs	r3, #215	; 0xd7
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	58d3      	ldr	r3, [r2, r3]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a6b0:	4a05      	ldr	r2, [pc, #20]	; (800a6c8 <OnRadioRxTimeout+0x40>)
 800a6b2:	23d7      	movs	r3, #215	; 0xd7
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	58d3      	ldr	r3, [r2, r3]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}
 800a6bc:	46c0      	nop			; (mov r8, r8)
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	46c0      	nop			; (mov r8, r8)
 800a6c4:	20000da8 	.word	0x20000da8
 800a6c8:	20000708 	.word	0x20000708

0800a6cc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a6d2:	4a5e      	ldr	r2, [pc, #376]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a6d4:	238e      	movs	r3, #142	; 0x8e
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	58d3      	ldr	r3, [r2, r3]
 800a6da:	22c8      	movs	r2, #200	; 0xc8
 800a6dc:	5c9b      	ldrb	r3, [r3, r2]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d003      	beq.n	800a6ea <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 800a6e2:	4b5b      	ldr	r3, [pc, #364]	; (800a850 <ProcessRadioTxDone+0x184>)
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	4798      	blx	r3
 800a6e8:	e001      	b.n	800a6ee <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 800a6ea:	f002 ff95 	bl	800d618 <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800a6ee:	4a57      	ldr	r2, [pc, #348]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a6f0:	23f1      	movs	r3, #241	; 0xf1
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	58d2      	ldr	r2, [r2, r3]
 800a6f6:	4b57      	ldr	r3, [pc, #348]	; (800a854 <ProcessRadioTxDone+0x188>)
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f00b f86c 	bl	80157d8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800a700:	4b54      	ldr	r3, [pc, #336]	; (800a854 <ProcessRadioTxDone+0x188>)
 800a702:	0018      	movs	r0, r3
 800a704:	f00b f894 	bl	8015830 <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a708:	4a50      	ldr	r2, [pc, #320]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a70a:	238e      	movs	r3, #142	; 0x8e
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	58d3      	ldr	r3, [r2, r3]
 800a710:	22c8      	movs	r2, #200	; 0xc8
 800a712:	5c9b      	ldrb	r3, [r3, r2]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d00c      	beq.n	800a732 <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800a718:	4a4c      	ldr	r2, [pc, #304]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a71a:	23f2      	movs	r3, #242	; 0xf2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	58d2      	ldr	r2, [r2, r3]
 800a720:	4b4d      	ldr	r3, [pc, #308]	; (800a858 <ProcessRadioTxDone+0x18c>)
 800a722:	0011      	movs	r1, r2
 800a724:	0018      	movs	r0, r3
 800a726:	f00b f857 	bl	80157d8 <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800a72a:	4b4b      	ldr	r3, [pc, #300]	; (800a858 <ProcessRadioTxDone+0x18c>)
 800a72c:	0018      	movs	r0, r3
 800a72e:	f00b f87f 	bl	8015830 <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 800a732:	4a46      	ldr	r2, [pc, #280]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a734:	238e      	movs	r3, #142	; 0x8e
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	58d3      	ldr	r3, [r2, r3]
 800a73a:	22c8      	movs	r2, #200	; 0xc8
 800a73c:	5c9b      	ldrb	r3, [r3, r2]
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d007      	beq.n	800a752 <ProcessRadioTxDone+0x86>
 800a742:	4a42      	ldr	r2, [pc, #264]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a744:	238e      	movs	r3, #142	; 0x8e
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	58d3      	ldr	r3, [r2, r3]
 800a74a:	4a44      	ldr	r2, [pc, #272]	; (800a85c <ProcessRadioTxDone+0x190>)
 800a74c:	5c9b      	ldrb	r3, [r3, r2]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d022      	beq.n	800a798 <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800a752:	210c      	movs	r1, #12
 800a754:	187b      	adds	r3, r7, r1
 800a756:	2215      	movs	r2, #21
 800a758:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a75a:	4a3c      	ldr	r2, [pc, #240]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a75c:	238e      	movs	r3, #142	; 0x8e
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	58d3      	ldr	r3, [r2, r3]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	187a      	adds	r2, r7, r1
 800a766:	0011      	movs	r1, r2
 800a768:	0018      	movs	r0, r3
 800a76a:	f008 fb8a 	bl	8012e82 <RegionGetPhyParam>
 800a76e:	0003      	movs	r3, r0
 800a770:	001a      	movs	r2, r3
 800a772:	2108      	movs	r1, #8
 800a774:	187b      	adds	r3, r7, r1
 800a776:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a778:	4a34      	ldr	r2, [pc, #208]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a77a:	23f2      	movs	r3, #242	; 0xf2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	58d2      	ldr	r2, [r2, r3]
 800a780:	187b      	adds	r3, r7, r1
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	18d2      	adds	r2, r2, r3
 800a786:	4b36      	ldr	r3, [pc, #216]	; (800a860 <ProcessRadioTxDone+0x194>)
 800a788:	0011      	movs	r1, r2
 800a78a:	0018      	movs	r0, r3
 800a78c:	f00b f824 	bl	80157d8 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800a790:	4b33      	ldr	r3, [pc, #204]	; (800a860 <ProcessRadioTxDone+0x194>)
 800a792:	0018      	movs	r0, r3
 800a794:	f00b f84c 	bl	8015830 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800a798:	4a2c      	ldr	r2, [pc, #176]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a79a:	238e      	movs	r3, #142	; 0x8e
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	58d1      	ldr	r1, [r2, r3]
 800a7a0:	4a2a      	ldr	r2, [pc, #168]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a7a2:	238e      	movs	r3, #142	; 0x8e
 800a7a4:	00db      	lsls	r3, r3, #3
 800a7a6:	58d2      	ldr	r2, [r2, r3]
 800a7a8:	2314      	movs	r3, #20
 800a7aa:	33ff      	adds	r3, #255	; 0xff
 800a7ac:	5cc9      	ldrb	r1, [r1, r3]
 800a7ae:	238a      	movs	r3, #138	; 0x8a
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 800a7b4:	4a25      	ldr	r2, [pc, #148]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a7b6:	238e      	movs	r3, #142	; 0x8e
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	58d2      	ldr	r2, [r2, r3]
 800a7bc:	2314      	movs	r3, #20
 800a7be:	33ff      	adds	r3, #255	; 0xff
 800a7c0:	5cd2      	ldrb	r2, [r2, r3]
 800a7c2:	003b      	movs	r3, r7
 800a7c4:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a7c6:	4a21      	ldr	r2, [pc, #132]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a7c8:	238e      	movs	r3, #142	; 0x8e
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	58d2      	ldr	r2, [r2, r3]
 800a7ce:	2389      	movs	r3, #137	; 0x89
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	5cd3      	ldrb	r3, [r2, r3]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 800a7d8:	003b      	movs	r3, r7
 800a7da:	2200      	movs	r2, #0
 800a7dc:	705a      	strb	r2, [r3, #1]
 800a7de:	e002      	b.n	800a7e6 <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 800a7e0:	003b      	movs	r3, r7
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a7e6:	4b1f      	ldr	r3, [pc, #124]	; (800a864 <ProcessRadioTxDone+0x198>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	003b      	movs	r3, r7
 800a7ec:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800a7ee:	4a17      	ldr	r2, [pc, #92]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a7f0:	238e      	movs	r3, #142	; 0x8e
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	58d3      	ldr	r3, [r2, r3]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	003a      	movs	r2, r7
 800a7fa:	0011      	movs	r1, r2
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	f008 fb68 	bl	8012ed2 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 800a802:	4b18      	ldr	r3, [pc, #96]	; (800a864 <ProcessRadioTxDone+0x198>)
 800a804:	6819      	ldr	r1, [r3, #0]
 800a806:	4a11      	ldr	r2, [pc, #68]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a808:	23d0      	movs	r3, #208	; 0xd0
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 800a80e:	4a0f      	ldr	r2, [pc, #60]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a810:	238e      	movs	r3, #142	; 0x8e
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	58d3      	ldr	r3, [r2, r3]
 800a816:	4a11      	ldr	r2, [pc, #68]	; (800a85c <ProcessRadioTxDone+0x190>)
 800a818:	5c9b      	ldrb	r3, [r3, r2]
 800a81a:	2201      	movs	r2, #1
 800a81c:	4053      	eors	r3, r2
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00f      	beq.n	800a844 <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a824:	4b09      	ldr	r3, [pc, #36]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a826:	4a10      	ldr	r2, [pc, #64]	; (800a868 <ProcessRadioTxDone+0x19c>)
 800a828:	2100      	movs	r1, #0
 800a82a:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 800a82c:	4a07      	ldr	r2, [pc, #28]	; (800a84c <ProcessRadioTxDone+0x180>)
 800a82e:	238e      	movs	r3, #142	; 0x8e
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	58d3      	ldr	r3, [r2, r3]
 800a834:	2288      	movs	r2, #136	; 0x88
 800a836:	0052      	lsls	r2, r2, #1
 800a838:	5c9a      	ldrb	r2, [r3, r2]
 800a83a:	3201      	adds	r2, #1
 800a83c:	b2d1      	uxtb	r1, r2
 800a83e:	2288      	movs	r2, #136	; 0x88
 800a840:	0052      	lsls	r2, r2, #1
 800a842:	5499      	strb	r1, [r3, r2]
    }
}
 800a844:	46c0      	nop			; (mov r8, r8)
 800a846:	46bd      	mov	sp, r7
 800a848:	b004      	add	sp, #16
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20000708 	.word	0x20000708
 800a850:	08021b48 	.word	0x08021b48
 800a854:	20000a9c 	.word	0x20000a9c
 800a858:	20000ab4 	.word	0x20000ab4
 800a85c:	00000219 	.word	0x00000219
 800a860:	20000afc 	.word	0x20000afc
 800a864:	20001568 	.word	0x20001568
 800a868:	0000042d 	.word	0x0000042d

0800a86c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a870:	4a12      	ldr	r2, [pc, #72]	; (800a8bc <PrepareRxDoneAbort+0x50>)
 800a872:	23d5      	movs	r3, #213	; 0xd5
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	58d3      	ldr	r3, [r2, r3]
 800a878:	2280      	movs	r2, #128	; 0x80
 800a87a:	431a      	orrs	r2, r3
 800a87c:	0011      	movs	r1, r2
 800a87e:	4a0f      	ldr	r2, [pc, #60]	; (800a8bc <PrepareRxDoneAbort+0x50>)
 800a880:	23d5      	movs	r3, #213	; 0xd5
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 800a886:	4a0d      	ldr	r2, [pc, #52]	; (800a8bc <PrepareRxDoneAbort+0x50>)
 800a888:	238e      	movs	r3, #142	; 0x8e
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	58d3      	ldr	r3, [r2, r3]
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <PrepareRxDoneAbort+0x54>)
 800a890:	5c9b      	ldrb	r3, [r3, r2]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 800a896:	2000      	movs	r0, #0
 800a898:	f001 fa66 	bl	800bd68 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a89c:	4b07      	ldr	r3, [pc, #28]	; (800a8bc <PrepareRxDoneAbort+0x50>)
 800a89e:	4a09      	ldr	r2, [pc, #36]	; (800a8c4 <PrepareRxDoneAbort+0x58>)
 800a8a0:	5c99      	ldrb	r1, [r3, r2]
 800a8a2:	2002      	movs	r0, #2
 800a8a4:	4301      	orrs	r1, r0
 800a8a6:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a8a8:	4b04      	ldr	r3, [pc, #16]	; (800a8bc <PrepareRxDoneAbort+0x50>)
 800a8aa:	4a06      	ldr	r2, [pc, #24]	; (800a8c4 <PrepareRxDoneAbort+0x58>)
 800a8ac:	5c99      	ldrb	r1, [r3, r2]
 800a8ae:	2010      	movs	r0, #16
 800a8b0:	4301      	orrs	r1, r0
 800a8b2:	5499      	strb	r1, [r3, r2]
}
 800a8b4:	46c0      	nop			; (mov r8, r8)
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	20000708 	.word	0x20000708
 800a8c0:	00000219 	.word	0x00000219
 800a8c4:	0000046d 	.word	0x0000046d

0800a8c8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ca:	b0a7      	sub	sp, #156	; 0x9c
 800a8cc:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800a8ce:	2380      	movs	r3, #128	; 0x80
 800a8d0:	18fb      	adds	r3, r7, r3
 800a8d2:	2210      	movs	r2, #16
 800a8d4:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800a8d6:	4bda      	ldr	r3, [pc, #872]	; (800ac40 <ProcessRadioRxDone+0x378>)
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800a8dc:	247a      	movs	r4, #122	; 0x7a
 800a8de:	193b      	adds	r3, r7, r4
 800a8e0:	4ad7      	ldr	r2, [pc, #860]	; (800ac40 <ProcessRadioRxDone+0x378>)
 800a8e2:	8912      	ldrh	r2, [r2, #8]
 800a8e4:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800a8e6:	2078      	movs	r0, #120	; 0x78
 800a8e8:	183b      	adds	r3, r7, r0
 800a8ea:	4ad5      	ldr	r2, [pc, #852]	; (800ac40 <ProcessRadioRxDone+0x378>)
 800a8ec:	8952      	ldrh	r2, [r2, #10]
 800a8ee:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800a8f0:	2577      	movs	r5, #119	; 0x77
 800a8f2:	197b      	adds	r3, r7, r5
 800a8f4:	4ad2      	ldr	r2, [pc, #840]	; (800ac40 <ProcessRadioRxDone+0x378>)
 800a8f6:	7b12      	ldrb	r2, [r2, #12]
 800a8f8:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800a8fa:	2376      	movs	r3, #118	; 0x76
 800a8fc:	18fb      	adds	r3, r7, r3
 800a8fe:	2200      	movs	r2, #0
 800a900:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a906:	4acf      	ldr	r2, [pc, #828]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a908:	238e      	movs	r3, #142	; 0x8e
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	58d3      	ldr	r3, [r2, r3]
 800a90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a910:	2284      	movs	r2, #132	; 0x84
 800a912:	18ba      	adds	r2, r7, r2
 800a914:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800a916:	2383      	movs	r3, #131	; 0x83
 800a918:	18fb      	adds	r3, r7, r3
 800a91a:	2200      	movs	r2, #0
 800a91c:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a91e:	2382      	movs	r3, #130	; 0x82
 800a920:	18fb      	adds	r3, r7, r3
 800a922:	2204      	movs	r2, #4
 800a924:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800a926:	4ac7      	ldr	r2, [pc, #796]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a928:	2386      	movs	r3, #134	; 0x86
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	2100      	movs	r1, #0
 800a92e:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800a930:	4bc4      	ldr	r3, [pc, #784]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a932:	183a      	adds	r2, r7, r0
 800a934:	49c4      	ldr	r1, [pc, #784]	; (800ac48 <ProcessRadioRxDone+0x380>)
 800a936:	8812      	ldrh	r2, [r2, #0]
 800a938:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800a93a:	4ac2      	ldr	r2, [pc, #776]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a93c:	1979      	adds	r1, r7, r5
 800a93e:	2384      	movs	r3, #132	; 0x84
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	7809      	ldrb	r1, [r1, #0]
 800a944:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800a946:	4bbf      	ldr	r3, [pc, #764]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a948:	4ac0      	ldr	r2, [pc, #768]	; (800ac4c <ProcessRadioRxDone+0x384>)
 800a94a:	5c99      	ldrb	r1, [r3, r2]
 800a94c:	4bbd      	ldr	r3, [pc, #756]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a94e:	4ac0      	ldr	r2, [pc, #768]	; (800ac50 <ProcessRadioRxDone+0x388>)
 800a950:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800a952:	4bbc      	ldr	r3, [pc, #752]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a954:	4abf      	ldr	r2, [pc, #764]	; (800ac54 <ProcessRadioRxDone+0x38c>)
 800a956:	2100      	movs	r1, #0
 800a958:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800a95a:	4bba      	ldr	r3, [pc, #744]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a95c:	4abe      	ldr	r2, [pc, #760]	; (800ac58 <ProcessRadioRxDone+0x390>)
 800a95e:	2100      	movs	r1, #0
 800a960:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800a962:	4bb8      	ldr	r3, [pc, #736]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a964:	4abd      	ldr	r2, [pc, #756]	; (800ac5c <ProcessRadioRxDone+0x394>)
 800a966:	2100      	movs	r1, #0
 800a968:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a96a:	4ab6      	ldr	r2, [pc, #728]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a96c:	2383      	movs	r3, #131	; 0x83
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	2100      	movs	r1, #0
 800a972:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 800a974:	4bb3      	ldr	r3, [pc, #716]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a976:	4aba      	ldr	r2, [pc, #744]	; (800ac60 <ProcessRadioRxDone+0x398>)
 800a978:	2100      	movs	r1, #0
 800a97a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 800a97c:	4bb1      	ldr	r3, [pc, #708]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a97e:	4ab9      	ldr	r2, [pc, #740]	; (800ac64 <ProcessRadioRxDone+0x39c>)
 800a980:	2100      	movs	r1, #0
 800a982:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a984:	4baf      	ldr	r3, [pc, #700]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a986:	4ab8      	ldr	r2, [pc, #736]	; (800ac68 <ProcessRadioRxDone+0x3a0>)
 800a988:	2100      	movs	r1, #0
 800a98a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a98c:	4bad      	ldr	r3, [pc, #692]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a98e:	4ab7      	ldr	r2, [pc, #732]	; (800ac6c <ProcessRadioRxDone+0x3a4>)
 800a990:	2100      	movs	r1, #0
 800a992:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a994:	4aab      	ldr	r2, [pc, #684]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a996:	2382      	movs	r3, #130	; 0x82
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	2100      	movs	r1, #0
 800a99c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 800a99e:	4aa9      	ldr	r2, [pc, #676]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a9a0:	2385      	movs	r3, #133	; 0x85
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 800a9a8:	4bb1      	ldr	r3, [pc, #708]	; (800ac70 <ProcessRadioRxDone+0x3a8>)
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ac:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a9ae:	4bb1      	ldr	r3, [pc, #708]	; (800ac74 <ProcessRadioRxDone+0x3ac>)
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f00a ff93 	bl	80158dc <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a9b6:	193b      	adds	r3, r7, r4
 800a9b8:	881a      	ldrh	r2, [r3, #0]
 800a9ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9bc:	0011      	movs	r1, r2
 800a9be:	0018      	movs	r0, r3
 800a9c0:	f005 fab3 	bl	800ff2a <LoRaMacClassBRxBeacon>
 800a9c4:	1e03      	subs	r3, r0, #0
 800a9c6:	d00d      	beq.n	800a9e4 <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a9c8:	4b9e      	ldr	r3, [pc, #632]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a9ca:	2278      	movs	r2, #120	; 0x78
 800a9cc:	18ba      	adds	r2, r7, r2
 800a9ce:	49aa      	ldr	r1, [pc, #680]	; (800ac78 <ProcessRadioRxDone+0x3b0>)
 800a9d0:	8812      	ldrh	r2, [r2, #0]
 800a9d2:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a9d4:	4b9b      	ldr	r3, [pc, #620]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a9d6:	2277      	movs	r2, #119	; 0x77
 800a9d8:	18ba      	adds	r2, r7, r2
 800a9da:	49a8      	ldr	r1, [pc, #672]	; (800ac7c <ProcessRadioRxDone+0x3b4>)
 800a9dc:	7812      	ldrb	r2, [r2, #0]
 800a9de:	545a      	strb	r2, [r3, r1]
        return;
 800a9e0:	f000 fc85 	bl	800b2ee <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a9e4:	4a97      	ldr	r2, [pc, #604]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800a9e6:	238e      	movs	r3, #142	; 0x8e
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	58d3      	ldr	r3, [r2, r3]
 800a9ec:	22c8      	movs	r2, #200	; 0xc8
 800a9ee:	5c9b      	ldrb	r3, [r3, r2]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d11c      	bne.n	800aa2e <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a9f4:	f005 faab 	bl	800ff4e <LoRaMacClassBIsPingExpected>
 800a9f8:	1e03      	subs	r3, r0, #0
 800a9fa:	d00a      	beq.n	800aa12 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	f005 fa62 	bl	800fec6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800aa02:	2000      	movs	r0, #0
 800aa04:	f005 fa81 	bl	800ff0a <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 800aa08:	4b8e      	ldr	r3, [pc, #568]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aa0a:	4a91      	ldr	r2, [pc, #580]	; (800ac50 <ProcessRadioRxDone+0x388>)
 800aa0c:	2103      	movs	r1, #3
 800aa0e:	5499      	strb	r1, [r3, r2]
 800aa10:	e00d      	b.n	800aa2e <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800aa12:	f005 faa2 	bl	800ff5a <LoRaMacClassBIsMulticastExpected>
 800aa16:	1e03      	subs	r3, r0, #0
 800aa18:	d009      	beq.n	800aa2e <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	f005 fa5d 	bl	800feda <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800aa20:	2000      	movs	r0, #0
 800aa22:	f005 fa7a 	bl	800ff1a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 800aa26:	4b87      	ldr	r3, [pc, #540]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aa28:	4a89      	ldr	r2, [pc, #548]	; (800ac50 <ProcessRadioRxDone+0x388>)
 800aa2a:	2104      	movs	r1, #4
 800aa2c:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800aa2e:	2276      	movs	r2, #118	; 0x76
 800aa30:	18bb      	adds	r3, r7, r2
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	18ba      	adds	r2, r7, r2
 800aa36:	1c59      	adds	r1, r3, #1
 800aa38:	7011      	strb	r1, [r2, #0]
 800aa3a:	001a      	movs	r2, r3
 800aa3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa3e:	189b      	adds	r3, r3, r2
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	2174      	movs	r1, #116	; 0x74
 800aa44:	187b      	adds	r3, r7, r1
 800aa46:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800aa48:	187b      	adds	r3, r7, r1
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	061b      	lsls	r3, r3, #24
 800aa4e:	0f5b      	lsrs	r3, r3, #29
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d100      	bne.n	800aa58 <ProcessRadioRxDone+0x190>
 800aa56:	e11c      	b.n	800ac92 <ProcessRadioRxDone+0x3ca>
 800aa58:	dc03      	bgt.n	800aa62 <ProcessRadioRxDone+0x19a>
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d00a      	beq.n	800aa74 <ProcessRadioRxDone+0x1ac>
 800aa5e:	f000 fc18 	bl	800b292 <ProcessRadioRxDone+0x9ca>
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d100      	bne.n	800aa68 <ProcessRadioRxDone+0x1a0>
 800aa66:	e10f      	b.n	800ac88 <ProcessRadioRxDone+0x3c0>
 800aa68:	2b07      	cmp	r3, #7
 800aa6a:	d101      	bne.n	800aa70 <ProcessRadioRxDone+0x1a8>
 800aa6c:	f000 fbe6 	bl	800b23c <ProcessRadioRxDone+0x974>
 800aa70:	f000 fc0f 	bl	800b292 <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800aa74:	210c      	movs	r1, #12
 800aa76:	187b      	adds	r3, r7, r1
 800aa78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa7a:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800aa7c:	237a      	movs	r3, #122	; 0x7a
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	187b      	adds	r3, r7, r1
 800aa86:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800aa88:	4a6e      	ldr	r2, [pc, #440]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aa8a:	238e      	movs	r3, #142	; 0x8e
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	58d2      	ldr	r2, [r2, r3]
 800aa90:	2389      	movs	r3, #137	; 0x89
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	5cd3      	ldrb	r3, [r2, r3]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa9a:	4b6a      	ldr	r3, [pc, #424]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aa9c:	4a78      	ldr	r2, [pc, #480]	; (800ac80 <ProcessRadioRxDone+0x3b8>)
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800aaa2:	f7ff fee3 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800aaa6:	f000 fc22 	bl	800b2ee <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 800aaaa:	4b66      	ldr	r3, [pc, #408]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	2580      	movs	r5, #128	; 0x80
 800aab0:	197c      	adds	r4, r7, r5
 800aab2:	220c      	movs	r2, #12
 800aab4:	18ba      	adds	r2, r7, r2
 800aab6:	0019      	movs	r1, r3
 800aab8:	20ff      	movs	r0, #255	; 0xff
 800aaba:	f006 ffe9 	bl	8011a90 <LoRaMacCryptoHandleJoinAccept>
 800aabe:	0003      	movs	r3, r0
 800aac0:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800aac2:	197b      	adds	r3, r7, r5
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d000      	beq.n	800aacc <ProcessRadioRxDone+0x204>
 800aaca:	e0ad      	b.n	800ac28 <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800aacc:	240c      	movs	r4, #12
 800aace:	193b      	adds	r3, r7, r4
 800aad0:	7a59      	ldrb	r1, [r3, #9]
 800aad2:	4a5c      	ldr	r2, [pc, #368]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aad4:	238e      	movs	r3, #142	; 0x8e
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	58d3      	ldr	r3, [r2, r3]
 800aada:	000a      	movs	r2, r1
 800aadc:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800aade:	4a59      	ldr	r2, [pc, #356]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aae0:	238e      	movs	r3, #142	; 0x8e
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	58d3      	ldr	r3, [r2, r3]
 800aae6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aae8:	193b      	adds	r3, r7, r4
 800aaea:	7a9b      	ldrb	r3, [r3, #10]
 800aaec:	021a      	lsls	r2, r3, #8
 800aaee:	4855      	ldr	r0, [pc, #340]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aaf0:	238e      	movs	r3, #142	; 0x8e
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	58c3      	ldr	r3, [r0, r3]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800aafa:	4a52      	ldr	r2, [pc, #328]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aafc:	238e      	movs	r3, #142	; 0x8e
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	58d3      	ldr	r3, [r2, r3]
 800ab02:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ab04:	193b      	adds	r3, r7, r4
 800ab06:	7adb      	ldrb	r3, [r3, #11]
 800ab08:	041a      	lsls	r2, r3, #16
 800ab0a:	484e      	ldr	r0, [pc, #312]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab0c:	238e      	movs	r3, #142	; 0x8e
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	58c3      	ldr	r3, [r0, r3]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800ab16:	4a4b      	ldr	r2, [pc, #300]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab18:	238e      	movs	r3, #142	; 0x8e
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	58d3      	ldr	r3, [r2, r3]
 800ab1e:	193a      	adds	r2, r7, r4
 800ab20:	68d2      	ldr	r2, [r2, #12]
 800ab22:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ab24:	193b      	adds	r3, r7, r4
 800ab26:	7c1b      	ldrb	r3, [r3, #16]
 800ab28:	065b      	lsls	r3, r3, #25
 800ab2a:	0f5b      	lsrs	r3, r3, #29
 800ab2c:	b2d9      	uxtb	r1, r3
 800ab2e:	4a45      	ldr	r2, [pc, #276]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab30:	238e      	movs	r3, #142	; 0x8e
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	58d3      	ldr	r3, [r2, r3]
 800ab36:	22f5      	movs	r2, #245	; 0xf5
 800ab38:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ab3a:	193b      	adds	r3, r7, r4
 800ab3c:	7c1b      	ldrb	r3, [r3, #16]
 800ab3e:	071b      	lsls	r3, r3, #28
 800ab40:	0f1b      	lsrs	r3, r3, #28
 800ab42:	b2d9      	uxtb	r1, r3
 800ab44:	4a3f      	ldr	r2, [pc, #252]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab46:	238e      	movs	r3, #142	; 0x8e
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	58d3      	ldr	r3, [r2, r3]
 800ab4c:	22fc      	movs	r2, #252	; 0xfc
 800ab4e:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ab50:	193b      	adds	r3, r7, r4
 800ab52:	7c59      	ldrb	r1, [r3, #17]
 800ab54:	4a3b      	ldr	r2, [pc, #236]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab56:	238e      	movs	r3, #142	; 0x8e
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	58d3      	ldr	r3, [r2, r3]
 800ab5c:	22e4      	movs	r2, #228	; 0xe4
 800ab5e:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800ab60:	4a38      	ldr	r2, [pc, #224]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab62:	238e      	movs	r3, #142	; 0x8e
 800ab64:	00db      	lsls	r3, r3, #3
 800ab66:	58d3      	ldr	r3, [r2, r3]
 800ab68:	22e4      	movs	r2, #228	; 0xe4
 800ab6a:	589b      	ldr	r3, [r3, r2]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800ab70:	4a34      	ldr	r2, [pc, #208]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab72:	238e      	movs	r3, #142	; 0x8e
 800ab74:	00db      	lsls	r3, r3, #3
 800ab76:	58d3      	ldr	r3, [r2, r3]
 800ab78:	22e4      	movs	r2, #228	; 0xe4
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800ab7e:	4a31      	ldr	r2, [pc, #196]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab80:	238e      	movs	r3, #142	; 0x8e
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	58d3      	ldr	r3, [r2, r3]
 800ab86:	22e4      	movs	r2, #228	; 0xe4
 800ab88:	589a      	ldr	r2, [r3, r2]
 800ab8a:	492e      	ldr	r1, [pc, #184]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ab8c:	238e      	movs	r3, #142	; 0x8e
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	58c9      	ldr	r1, [r1, r3]
 800ab92:	0013      	movs	r3, r2
 800ab94:	015b      	lsls	r3, r3, #5
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	001a      	movs	r2, r3
 800aba0:	23e4      	movs	r3, #228	; 0xe4
 800aba2:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800aba4:	4a27      	ldr	r2, [pc, #156]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800aba6:	238e      	movs	r3, #142	; 0x8e
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	58d3      	ldr	r3, [r2, r3]
 800abac:	22e4      	movs	r2, #228	; 0xe4
 800abae:	589a      	ldr	r2, [r3, r2]
 800abb0:	4924      	ldr	r1, [pc, #144]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800abb2:	238e      	movs	r3, #142	; 0x8e
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	58cb      	ldr	r3, [r1, r3]
 800abb8:	21fa      	movs	r1, #250	; 0xfa
 800abba:	0089      	lsls	r1, r1, #2
 800abbc:	468c      	mov	ip, r1
 800abbe:	4462      	add	r2, ip
 800abc0:	21e8      	movs	r1, #232	; 0xe8
 800abc2:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800abc4:	4a1f      	ldr	r2, [pc, #124]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800abc6:	238e      	movs	r3, #142	; 0x8e
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	58d3      	ldr	r3, [r2, r3]
 800abcc:	4a2d      	ldr	r2, [pc, #180]	; (800ac84 <ProcessRadioRxDone+0x3bc>)
 800abce:	2100      	movs	r1, #0
 800abd0:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800abd2:	216c      	movs	r1, #108	; 0x6c
 800abd4:	187b      	adds	r3, r7, r1
 800abd6:	220c      	movs	r2, #12
 800abd8:	18ba      	adds	r2, r7, r2
 800abda:	3212      	adds	r2, #18
 800abdc:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800abde:	237a      	movs	r3, #122	; 0x7a
 800abe0:	18fb      	adds	r3, r7, r3
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	3b11      	subs	r3, #17
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	187b      	adds	r3, r7, r1
 800abec:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800abee:	4a15      	ldr	r2, [pc, #84]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800abf0:	238e      	movs	r3, #142	; 0x8e
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	58d3      	ldr	r3, [r2, r3]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	187a      	adds	r2, r7, r1
 800abfa:	0011      	movs	r1, r2
 800abfc:	0018      	movs	r0, r3
 800abfe:	f008 f9c4 	bl	8012f8a <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ac02:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <ProcessRadioRxDone+0x37c>)
 800ac04:	238e      	movs	r3, #142	; 0x8e
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	58d2      	ldr	r2, [r2, r3]
 800ac0a:	2389      	movs	r3, #137	; 0x89
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	2102      	movs	r1, #2
 800ac10:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ac12:	2000      	movs	r0, #0
 800ac14:	f005 fe6c 	bl	80108f0 <LoRaMacConfirmQueueIsCmdActive>
 800ac18:	1e03      	subs	r3, r0, #0
 800ac1a:	d100      	bne.n	800ac1e <ProcessRadioRxDone+0x356>
 800ac1c:	e340      	b.n	800b2a0 <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ac1e:	2100      	movs	r1, #0
 800ac20:	2000      	movs	r0, #0
 800ac22:	f005 fdd7 	bl	80107d4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800ac26:	e33b      	b.n	800b2a0 <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f005 fe61 	bl	80108f0 <LoRaMacConfirmQueueIsCmdActive>
 800ac2e:	1e03      	subs	r3, r0, #0
 800ac30:	d100      	bne.n	800ac34 <ProcessRadioRxDone+0x36c>
 800ac32:	e335      	b.n	800b2a0 <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ac34:	2100      	movs	r1, #0
 800ac36:	2007      	movs	r0, #7
 800ac38:	f005 fdcc 	bl	80107d4 <LoRaMacConfirmQueueSetStatus>
            break;
 800ac3c:	e330      	b.n	800b2a0 <ProcessRadioRxDone+0x9d8>
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	2000156c 	.word	0x2000156c
 800ac44:	20000708 	.word	0x20000708
 800ac48:	0000041e 	.word	0x0000041e
 800ac4c:	0000046c 	.word	0x0000046c
 800ac50:	00000421 	.word	0x00000421
 800ac54:	00000413 	.word	0x00000413
 800ac58:	00000412 	.word	0x00000412
 800ac5c:	00000415 	.word	0x00000415
 800ac60:	0000041c 	.word	0x0000041c
 800ac64:	0000041d 	.word	0x0000041d
 800ac68:	00000422 	.word	0x00000422
 800ac6c:	00000424 	.word	0x00000424
 800ac70:	08021b48 	.word	0x08021b48
 800ac74:	20000ab4 	.word	0x20000ab4
 800ac78:	00000462 	.word	0x00000462
 800ac7c:	00000464 	.word	0x00000464
 800ac80:	00000411 	.word	0x00000411
 800ac84:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ac88:	4ac7      	ldr	r2, [pc, #796]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ac8a:	2382      	movs	r3, #130	; 0x82
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	2101      	movs	r1, #1
 800ac90:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ac92:	4ac5      	ldr	r2, [pc, #788]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ac94:	238e      	movs	r3, #142	; 0x8e
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	58d2      	ldr	r2, [r2, r3]
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	33ff      	adds	r3, #255	; 0xff
 800ac9e:	5cd2      	ldrb	r2, [r2, r3]
 800aca0:	2168      	movs	r1, #104	; 0x68
 800aca2:	187b      	adds	r3, r7, r1
 800aca4:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800aca6:	4bc0      	ldr	r3, [pc, #768]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800aca8:	4ac0      	ldr	r2, [pc, #768]	; (800afac <ProcessRadioRxDone+0x6e4>)
 800acaa:	5c9b      	ldrb	r3, [r3, r2]
 800acac:	b25a      	sxtb	r2, r3
 800acae:	187b      	adds	r3, r7, r1
 800acb0:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	220c      	movs	r2, #12
 800acb6:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800acb8:	4abb      	ldr	r2, [pc, #748]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800acba:	238e      	movs	r3, #142	; 0x8e
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	58d2      	ldr	r2, [r2, r3]
 800acc0:	2316      	movs	r3, #22
 800acc2:	33ff      	adds	r3, #255	; 0xff
 800acc4:	5cd3      	ldrb	r3, [r2, r3]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800acca:	2368      	movs	r3, #104	; 0x68
 800accc:	18fb      	adds	r3, r7, r3
 800acce:	220d      	movs	r2, #13
 800acd0:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800acd2:	4ab5      	ldr	r2, [pc, #724]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800acd4:	238e      	movs	r3, #142	; 0x8e
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	58d3      	ldr	r3, [r2, r3]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2268      	movs	r2, #104	; 0x68
 800acde:	18ba      	adds	r2, r7, r2
 800ace0:	0011      	movs	r1, r2
 800ace2:	0018      	movs	r0, r3
 800ace4:	f008 f8cd 	bl	8012e82 <RegionGetPhyParam>
 800ace8:	0003      	movs	r3, r0
 800acea:	001a      	movs	r2, r3
 800acec:	2364      	movs	r3, #100	; 0x64
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800acf2:	237a      	movs	r3, #122	; 0x7a
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	3b0d      	subs	r3, #13
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	b21b      	sxth	r3, r3
 800acfe:	1c1a      	adds	r2, r3, #0
 800ad00:	b213      	sxth	r3, r2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	da01      	bge.n	800ad0a <ProcessRadioRxDone+0x442>
 800ad06:	2300      	movs	r3, #0
 800ad08:	1c1a      	adds	r2, r3, #0
 800ad0a:	b212      	sxth	r2, r2
 800ad0c:	2364      	movs	r3, #100	; 0x64
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	b21b      	sxth	r3, r3
 800ad14:	429a      	cmp	r2, r3
 800ad16:	dd06      	ble.n	800ad26 <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad18:	4ba3      	ldr	r3, [pc, #652]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ad1a:	4aa5      	ldr	r2, [pc, #660]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ad20:	f7ff fda4 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800ad24:	e2e3      	b.n	800b2ee <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 800ad26:	2134      	movs	r1, #52	; 0x34
 800ad28:	187b      	adds	r3, r7, r1
 800ad2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad2c:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800ad2e:	237a      	movs	r3, #122	; 0x7a
 800ad30:	18fb      	adds	r3, r7, r3
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	187b      	adds	r3, r7, r1
 800ad38:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ad3a:	187b      	adds	r3, r7, r1
 800ad3c:	4a9d      	ldr	r2, [pc, #628]	; (800afb4 <ProcessRadioRxDone+0x6ec>)
 800ad3e:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ad40:	0008      	movs	r0, r1
 800ad42:	187b      	adds	r3, r7, r1
 800ad44:	2228      	movs	r2, #40	; 0x28
 800ad46:	21ff      	movs	r1, #255	; 0xff
 800ad48:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ad4a:	183b      	adds	r3, r7, r0
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f007 fdb8 	bl	80128c2 <LoRaMacParserData>
 800ad52:	1e03      	subs	r3, r0, #0
 800ad54:	d006      	beq.n	800ad64 <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad56:	4b94      	ldr	r3, [pc, #592]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ad58:	4a95      	ldr	r2, [pc, #596]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ad5e:	f7ff fd85 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800ad62:	e2c4      	b.n	800b2ee <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ad64:	2034      	movs	r0, #52	; 0x34
 800ad66:	183b      	adds	r3, r7, r0
 800ad68:	6899      	ldr	r1, [r3, #8]
 800ad6a:	4a8f      	ldr	r2, [pc, #572]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ad6c:	2385      	movs	r3, #133	; 0x85
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ad72:	1dba      	adds	r2, r7, #6
 800ad74:	183b      	adds	r3, r7, r0
 800ad76:	0011      	movs	r1, r2
 800ad78:	0018      	movs	r0, r3
 800ad7a:	f002 ffcd 	bl	800dd18 <DetermineFrameType>
 800ad7e:	1e03      	subs	r3, r0, #0
 800ad80:	d006      	beq.n	800ad90 <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad82:	4b89      	ldr	r3, [pc, #548]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ad84:	4a8a      	ldr	r2, [pc, #552]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800ad86:	2101      	movs	r1, #1
 800ad88:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ad8a:	f7ff fd6f 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800ad8e:	e2ae      	b.n	800b2ee <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ad90:	2383      	movs	r3, #131	; 0x83
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ad9c:	2381      	movs	r3, #129	; 0x81
 800ad9e:	18fb      	adds	r3, r7, r3
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	e051      	b.n	800ae4a <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800ada6:	4a80      	ldr	r2, [pc, #512]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ada8:	238e      	movs	r3, #142	; 0x8e
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	58d2      	ldr	r2, [r2, r3]
 800adae:	2381      	movs	r3, #129	; 0x81
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	015b      	lsls	r3, r3, #5
 800adb6:	18d3      	adds	r3, r2, r3
 800adb8:	334c      	adds	r3, #76	; 0x4c
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	2334      	movs	r3, #52	; 0x34
 800adbe:	18fb      	adds	r3, r7, r3
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d13b      	bne.n	800ae3e <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 800adc6:	4a78      	ldr	r2, [pc, #480]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800adc8:	238e      	movs	r3, #142	; 0x8e
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	58d2      	ldr	r2, [r2, r3]
 800adce:	2381      	movs	r3, #129	; 0x81
 800add0:	18fb      	adds	r3, r7, r3
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	2154      	movs	r1, #84	; 0x54
 800add6:	015b      	lsls	r3, r3, #5
 800add8:	18d3      	adds	r3, r2, r3
 800adda:	185b      	adds	r3, r3, r1
 800addc:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d02d      	beq.n	800ae3e <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 800ade2:	2383      	movs	r3, #131	; 0x83
 800ade4:	18fb      	adds	r3, r7, r3
 800ade6:	2201      	movs	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 800adea:	4a6f      	ldr	r2, [pc, #444]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800adec:	238e      	movs	r3, #142	; 0x8e
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	58d1      	ldr	r1, [r2, r3]
 800adf2:	2481      	movs	r4, #129	; 0x81
 800adf4:	193b      	adds	r3, r7, r4
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	2382      	movs	r3, #130	; 0x82
 800adfa:	18fb      	adds	r3, r7, r3
 800adfc:	2048      	movs	r0, #72	; 0x48
 800adfe:	0152      	lsls	r2, r2, #5
 800ae00:	188a      	adds	r2, r1, r2
 800ae02:	1812      	adds	r2, r2, r0
 800ae04:	7812      	ldrb	r2, [r2, #0]
 800ae06:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800ae08:	4a67      	ldr	r2, [pc, #412]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ae0a:	238e      	movs	r3, #142	; 0x8e
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	58d2      	ldr	r2, [r2, r3]
 800ae10:	0021      	movs	r1, r4
 800ae12:	187b      	adds	r3, r7, r1
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	015b      	lsls	r3, r3, #5
 800ae18:	18d3      	adds	r3, r2, r3
 800ae1a:	3350      	adds	r3, #80	; 0x50
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 800ae22:	4a61      	ldr	r2, [pc, #388]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ae24:	238e      	movs	r3, #142	; 0x8e
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	58d2      	ldr	r2, [r2, r3]
 800ae2a:	187b      	adds	r3, r7, r1
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	015b      	lsls	r3, r3, #5
 800ae30:	18d3      	adds	r3, r2, r3
 800ae32:	334c      	adds	r3, #76	; 0x4c
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2284      	movs	r2, #132	; 0x84
 800ae38:	18ba      	adds	r2, r7, r2
 800ae3a:	6013      	str	r3, [r2, #0]
                    break;
 800ae3c:	e00a      	b.n	800ae54 <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ae3e:	2181      	movs	r1, #129	; 0x81
 800ae40:	187b      	adds	r3, r7, r1
 800ae42:	781a      	ldrb	r2, [r3, #0]
 800ae44:	187b      	adds	r3, r7, r1
 800ae46:	3201      	adds	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	2381      	movs	r3, #129	; 0x81
 800ae4c:	18fb      	adds	r3, r7, r3
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d9a8      	bls.n	800ada6 <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ae54:	2168      	movs	r1, #104	; 0x68
 800ae56:	187b      	adds	r3, r7, r1
 800ae58:	2214      	movs	r2, #20
 800ae5a:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ae5c:	4a52      	ldr	r2, [pc, #328]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ae5e:	238e      	movs	r3, #142	; 0x8e
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	58d3      	ldr	r3, [r2, r3]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	187a      	adds	r2, r7, r1
 800ae68:	0011      	movs	r1, r2
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	f008 f809 	bl	8012e82 <RegionGetPhyParam>
 800ae70:	0003      	movs	r3, r0
 800ae72:	001a      	movs	r2, r3
 800ae74:	2064      	movs	r0, #100	; 0x64
 800ae76:	183b      	adds	r3, r7, r0
 800ae78:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ae7a:	1dbb      	adds	r3, r7, #6
 800ae7c:	781d      	ldrb	r5, [r3, #0]
 800ae7e:	4a4a      	ldr	r2, [pc, #296]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800ae80:	238e      	movs	r3, #142	; 0x8e
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	58d1      	ldr	r1, [r2, r3]
 800ae86:	183b      	adds	r3, r7, r0
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	2275      	movs	r2, #117	; 0x75
 800ae8e:	18bc      	adds	r4, r7, r2
 800ae90:	2288      	movs	r2, #136	; 0x88
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	588e      	ldr	r6, [r1, r2]
 800ae96:	2134      	movs	r1, #52	; 0x34
 800ae98:	1879      	adds	r1, r7, r1
 800ae9a:	2082      	movs	r0, #130	; 0x82
 800ae9c:	183a      	adds	r2, r7, r0
 800ae9e:	7810      	ldrb	r0, [r2, #0]
 800aea0:	2208      	movs	r2, #8
 800aea2:	18ba      	adds	r2, r7, r2
 800aea4:	9202      	str	r2, [sp, #8]
 800aea6:	1dfa      	adds	r2, r7, #7
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	0033      	movs	r3, r6
 800aeae:	000a      	movs	r2, r1
 800aeb0:	0029      	movs	r1, r5
 800aeb2:	f007 fab5 	bl	8012420 <LoRaMacGetFCntDown>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 800aeba:	2275      	movs	r2, #117	; 0x75
 800aebc:	18bb      	adds	r3, r7, r2
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d041      	beq.n	800af48 <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 800aec4:	2375      	movs	r3, #117	; 0x75
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d127      	bne.n	800af1e <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800aece:	4b36      	ldr	r3, [pc, #216]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800aed0:	4a37      	ldr	r2, [pc, #220]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800aed2:	2108      	movs	r1, #8
 800aed4:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800aed6:	4a34      	ldr	r2, [pc, #208]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800aed8:	238e      	movs	r3, #142	; 0x8e
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	58d3      	ldr	r3, [r2, r3]
 800aede:	4a36      	ldr	r2, [pc, #216]	; (800afb8 <ProcessRadioRxDone+0x6f0>)
 800aee0:	5c9b      	ldrb	r3, [r3, r2]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d129      	bne.n	800af3a <ProcessRadioRxDone+0x672>
 800aee6:	2374      	movs	r3, #116	; 0x74
 800aee8:	18fb      	adds	r3, r7, r3
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	221f      	movs	r2, #31
 800aeee:	4393      	bics	r3, r2
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2ba0      	cmp	r3, #160	; 0xa0
 800aef4:	d121      	bne.n	800af3a <ProcessRadioRxDone+0x672>
 800aef6:	4a2c      	ldr	r2, [pc, #176]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800aef8:	238e      	movs	r3, #142	; 0x8e
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	58d2      	ldr	r2, [r2, r3]
 800aefe:	238a      	movs	r3, #138	; 0x8a
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	58d2      	ldr	r2, [r2, r3]
 800af04:	2334      	movs	r3, #52	; 0x34
 800af06:	18fb      	adds	r3, r7, r3
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d115      	bne.n	800af3a <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800af0e:	4a26      	ldr	r2, [pc, #152]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af10:	238e      	movs	r3, #142	; 0x8e
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	58d3      	ldr	r3, [r2, r3]
 800af16:	4a29      	ldr	r2, [pc, #164]	; (800afbc <ProcessRadioRxDone+0x6f4>)
 800af18:	2101      	movs	r1, #1
 800af1a:	5499      	strb	r1, [r3, r2]
 800af1c:	e00d      	b.n	800af3a <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 800af1e:	2375      	movs	r3, #117	; 0x75
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d104      	bne.n	800af32 <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800af28:	4b1f      	ldr	r3, [pc, #124]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af2a:	4a21      	ldr	r2, [pc, #132]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800af2c:	210a      	movs	r1, #10
 800af2e:	5499      	strb	r1, [r3, r2]
 800af30:	e003      	b.n	800af3a <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af32:	4b1d      	ldr	r3, [pc, #116]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af34:	4a1e      	ldr	r2, [pc, #120]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800af36:	2101      	movs	r1, #1
 800af38:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	4b1a      	ldr	r3, [pc, #104]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af3e:	4920      	ldr	r1, [pc, #128]	; (800afc0 <ProcessRadioRxDone+0x6f8>)
 800af40:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800af42:	f7ff fc93 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800af46:	e1d2      	b.n	800b2ee <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800af48:	1dfb      	adds	r3, r7, #7
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	68bd      	ldr	r5, [r7, #8]
 800af4e:	2680      	movs	r6, #128	; 0x80
 800af50:	19bc      	adds	r4, r7, r6
 800af52:	2384      	movs	r3, #132	; 0x84
 800af54:	18fb      	adds	r3, r7, r3
 800af56:	6819      	ldr	r1, [r3, #0]
 800af58:	2382      	movs	r3, #130	; 0x82
 800af5a:	18fb      	adds	r3, r7, r3
 800af5c:	7818      	ldrb	r0, [r3, #0]
 800af5e:	2334      	movs	r3, #52	; 0x34
 800af60:	18fb      	adds	r3, r7, r3
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	002b      	movs	r3, r5
 800af66:	f007 f92f 	bl	80121c8 <LoRaMacCryptoUnsecureMessage>
 800af6a:	0003      	movs	r3, r0
 800af6c:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800af6e:	19bb      	adds	r3, r7, r6
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d028      	beq.n	800afc8 <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800af76:	2380      	movs	r3, #128	; 0x80
 800af78:	18fb      	adds	r3, r7, r3
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d10c      	bne.n	800af9a <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800af80:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af82:	4a0b      	ldr	r2, [pc, #44]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800af84:	210b      	movs	r1, #11
 800af86:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af8a:	4a0e      	ldr	r2, [pc, #56]	; (800afc4 <ProcessRadioRxDone+0x6fc>)
 800af8c:	5c9b      	ldrb	r3, [r3, r2]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d100      	bne.n	800af94 <ProcessRadioRxDone+0x6cc>
 800af92:	e1ab      	b.n	800b2ec <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 800af94:	f7ff fc6a 	bl	800a86c <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 800af98:	e1a8      	b.n	800b2ec <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800af9a:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <ProcessRadioRxDone+0x6e0>)
 800af9c:	4a04      	ldr	r2, [pc, #16]	; (800afb0 <ProcessRadioRxDone+0x6e8>)
 800af9e:	210c      	movs	r1, #12
 800afa0:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800afa2:	f7ff fc63 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800afa6:	e1a1      	b.n	800b2ec <ProcessRadioRxDone+0xa24>
 800afa8:	20000708 	.word	0x20000708
 800afac:	00000414 	.word	0x00000414
 800afb0:	00000411 	.word	0x00000411
 800afb4:	20000948 	.word	0x20000948
 800afb8:	00000222 	.word	0x00000222
 800afbc:	0000021a 	.word	0x0000021a
 800afc0:	00000424 	.word	0x00000424
 800afc4:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800afc8:	4bca      	ldr	r3, [pc, #808]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800afca:	4acb      	ldr	r2, [pc, #812]	; (800b2f8 <ProcessRadioRxDone+0xa30>)
 800afcc:	2100      	movs	r1, #0
 800afce:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800afd0:	4bc8      	ldr	r3, [pc, #800]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800afd2:	2483      	movs	r4, #131	; 0x83
 800afd4:	193a      	adds	r2, r7, r4
 800afd6:	49c9      	ldr	r1, [pc, #804]	; (800b2fc <ProcessRadioRxDone+0xa34>)
 800afd8:	7812      	ldrb	r2, [r2, #0]
 800afda:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800afdc:	2034      	movs	r0, #52	; 0x34
 800afde:	183b      	adds	r3, r7, r0
 800afe0:	7b1b      	ldrb	r3, [r3, #12]
 800afe2:	06db      	lsls	r3, r3, #27
 800afe4:	0fdb      	lsrs	r3, r3, #31
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	0019      	movs	r1, r3
 800afea:	4bc2      	ldr	r3, [pc, #776]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800afec:	4ac4      	ldr	r2, [pc, #784]	; (800b300 <ProcessRadioRxDone+0xa38>)
 800afee:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800aff0:	4ac0      	ldr	r2, [pc, #768]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800aff2:	2383      	movs	r3, #131	; 0x83
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	2100      	movs	r1, #0
 800aff8:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 800affa:	4bbe      	ldr	r3, [pc, #760]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800affc:	4ac1      	ldr	r2, [pc, #772]	; (800b304 <ProcessRadioRxDone+0xa3c>)
 800affe:	2100      	movs	r1, #0
 800b000:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	4bbb      	ldr	r3, [pc, #748]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b006:	49c0      	ldr	r1, [pc, #768]	; (800b308 <ProcessRadioRxDone+0xa40>)
 800b008:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b00a:	183b      	adds	r3, r7, r0
 800b00c:	7b1b      	ldrb	r3, [r3, #12]
 800b00e:	069b      	lsls	r3, r3, #26
 800b010:	0fdb      	lsrs	r3, r3, #31
 800b012:	b2db      	uxtb	r3, r3
 800b014:	1e5a      	subs	r2, r3, #1
 800b016:	4193      	sbcs	r3, r2
 800b018:	b2d9      	uxtb	r1, r3
 800b01a:	4bb6      	ldr	r3, [pc, #728]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b01c:	4abb      	ldr	r2, [pc, #748]	; (800b30c <ProcessRadioRxDone+0xa44>)
 800b01e:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b020:	4bb4      	ldr	r3, [pc, #720]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b022:	4abb      	ldr	r2, [pc, #748]	; (800b310 <ProcessRadioRxDone+0xa48>)
 800b024:	2100      	movs	r1, #0
 800b026:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b028:	183b      	adds	r3, r7, r0
 800b02a:	7b1b      	ldrb	r3, [r3, #12]
 800b02c:	069b      	lsls	r3, r3, #26
 800b02e:	0fdb      	lsrs	r3, r3, #31
 800b030:	b2db      	uxtb	r3, r3
 800b032:	1e5a      	subs	r2, r3, #1
 800b034:	4193      	sbcs	r3, r2
 800b036:	b2d9      	uxtb	r1, r3
 800b038:	4aae      	ldr	r2, [pc, #696]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b03a:	2386      	movs	r3, #134	; 0x86
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 800b040:	4aac      	ldr	r2, [pc, #688]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b042:	238e      	movs	r3, #142	; 0x8e
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	58d3      	ldr	r3, [r2, r3]
 800b048:	22cc      	movs	r2, #204	; 0xcc
 800b04a:	2100      	movs	r1, #0
 800b04c:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800b04e:	193b      	adds	r3, r7, r4
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d105      	bne.n	800b062 <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800b056:	4aa7      	ldr	r2, [pc, #668]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b058:	2382      	movs	r3, #130	; 0x82
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	2102      	movs	r1, #2
 800b05e:	54d1      	strb	r1, [r2, r3]
 800b060:	e032      	b.n	800b0c8 <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800b062:	2374      	movs	r3, #116	; 0x74
 800b064:	18fb      	adds	r3, r7, r3
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	221f      	movs	r2, #31
 800b06a:	4393      	bics	r3, r2
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2ba0      	cmp	r3, #160	; 0xa0
 800b070:	d11e      	bne.n	800b0b0 <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800b072:	4aa0      	ldr	r2, [pc, #640]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b074:	238e      	movs	r3, #142	; 0x8e
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	58d3      	ldr	r3, [r2, r3]
 800b07a:	4aa6      	ldr	r2, [pc, #664]	; (800b314 <ProcessRadioRxDone+0xa4c>)
 800b07c:	2101      	movs	r1, #1
 800b07e:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800b080:	4a9c      	ldr	r2, [pc, #624]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b082:	238e      	movs	r3, #142	; 0x8e
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	58d3      	ldr	r3, [r2, r3]
 800b088:	4aa3      	ldr	r2, [pc, #652]	; (800b318 <ProcessRadioRxDone+0xa50>)
 800b08a:	5c9b      	ldrb	r3, [r3, r2]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d109      	bne.n	800b0a4 <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800b090:	4a98      	ldr	r2, [pc, #608]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b092:	238e      	movs	r3, #142	; 0x8e
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	58d2      	ldr	r2, [r2, r3]
 800b098:	2334      	movs	r3, #52	; 0x34
 800b09a:	18fb      	adds	r3, r7, r3
 800b09c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b09e:	238a      	movs	r3, #138	; 0x8a
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800b0a4:	4a93      	ldr	r2, [pc, #588]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b0a6:	2382      	movs	r3, #130	; 0x82
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	54d1      	strb	r1, [r2, r3]
 800b0ae:	e00b      	b.n	800b0c8 <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800b0b0:	4a90      	ldr	r2, [pc, #576]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b0b2:	238e      	movs	r3, #142	; 0x8e
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	58d3      	ldr	r3, [r2, r3]
 800b0b8:	4a96      	ldr	r2, [pc, #600]	; (800b314 <ProcessRadioRxDone+0xa4c>)
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b0be:	4a8d      	ldr	r2, [pc, #564]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b0c0:	2382      	movs	r3, #130	; 0x82
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 800b0c8:	1dfb      	adds	r3, r7, #7
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	0011      	movs	r1, r2
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f007 fa53 	bl	801257c <LoRaMacSetFCntDown>
 800b0d6:	1e03      	subs	r3, r0, #0
 800b0d8:	d007      	beq.n	800b0ea <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0da:	4b86      	ldr	r3, [pc, #536]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b0dc:	4a86      	ldr	r2, [pc, #536]	; (800b2f8 <ProcessRadioRxDone+0xa30>)
 800b0de:	2101      	movs	r1, #1
 800b0e0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800b0e2:	f7ff fbc3 	bl	800a86c <PrepareRxDoneAbort>
                return;
 800b0e6:	46c0      	nop			; (mov r8, r8)
 800b0e8:	e101      	b.n	800b2ee <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800b0ea:	4b82      	ldr	r3, [pc, #520]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b0ec:	4a8b      	ldr	r2, [pc, #556]	; (800b31c <ProcessRadioRxDone+0xa54>)
 800b0ee:	5c98      	ldrb	r0, [r3, r2]
 800b0f0:	4b80      	ldr	r3, [pc, #512]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b0f2:	4a8b      	ldr	r2, [pc, #556]	; (800b320 <ProcessRadioRxDone+0xa58>)
 800b0f4:	5c9a      	ldrb	r2, [r3, r2]
 800b0f6:	2334      	movs	r3, #52	; 0x34
 800b0f8:	18fb      	adds	r3, r7, r3
 800b0fa:	7b1b      	ldrb	r3, [r3, #12]
 800b0fc:	1c19      	adds	r1, r3, #0
 800b0fe:	f002 f97b 	bl	800d3f8 <RemoveMacCommands>

            switch( fType )
 800b102:	1dbb      	adds	r3, r7, #6
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d038      	beq.n	800b17c <ProcessRadioRxDone+0x8b4>
 800b10a:	dc02      	bgt.n	800b112 <ProcessRadioRxDone+0x84a>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d005      	beq.n	800b11c <ProcessRadioRxDone+0x854>
 800b110:	e086      	b.n	800b220 <ProcessRadioRxDone+0x958>
 800b112:	2b02      	cmp	r3, #2
 800b114:	d052      	beq.n	800b1bc <ProcessRadioRxDone+0x8f4>
 800b116:	2b03      	cmp	r3, #3
 800b118:	d06a      	beq.n	800b1f0 <ProcessRadioRxDone+0x928>
 800b11a:	e081      	b.n	800b220 <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800b11c:	2034      	movs	r0, #52	; 0x34
 800b11e:	183b      	adds	r3, r7, r0
 800b120:	7b1b      	ldrb	r3, [r3, #12]
 800b122:	071b      	lsls	r3, r3, #28
 800b124:	0f1b      	lsrs	r3, r3, #28
 800b126:	b2db      	uxtb	r3, r3
 800b128:	001c      	movs	r4, r3
 800b12a:	4b72      	ldr	r3, [pc, #456]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b12c:	4a7b      	ldr	r2, [pc, #492]	; (800b31c <ProcessRadioRxDone+0xa54>)
 800b12e:	5c9b      	ldrb	r3, [r3, r2]
 800b130:	2277      	movs	r2, #119	; 0x77
 800b132:	18ba      	adds	r2, r7, r2
 800b134:	2100      	movs	r1, #0
 800b136:	5651      	ldrsb	r1, [r2, r1]
 800b138:	0005      	movs	r5, r0
 800b13a:	183a      	adds	r2, r7, r0
 800b13c:	3210      	adds	r2, #16
 800b13e:	0010      	movs	r0, r2
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	000b      	movs	r3, r1
 800b144:	0022      	movs	r2, r4
 800b146:	2100      	movs	r1, #0
 800b148:	f000 ffae 	bl	800c0a8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b14c:	0028      	movs	r0, r5
 800b14e:	183b      	adds	r3, r7, r0
 800b150:	2220      	movs	r2, #32
 800b152:	5c99      	ldrb	r1, [r3, r2]
 800b154:	4b67      	ldr	r3, [pc, #412]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b156:	4a73      	ldr	r2, [pc, #460]	; (800b324 <ProcessRadioRxDone+0xa5c>)
 800b158:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b15a:	183b      	adds	r3, r7, r0
 800b15c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b15e:	4a65      	ldr	r2, [pc, #404]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b160:	2383      	movs	r3, #131	; 0x83
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b166:	183b      	adds	r3, r7, r0
 800b168:	2228      	movs	r2, #40	; 0x28
 800b16a:	5c99      	ldrb	r1, [r3, r2]
 800b16c:	4b61      	ldr	r3, [pc, #388]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b16e:	4a65      	ldr	r2, [pc, #404]	; (800b304 <ProcessRadioRxDone+0xa3c>)
 800b170:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800b172:	4b60      	ldr	r3, [pc, #384]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b174:	4a6c      	ldr	r2, [pc, #432]	; (800b328 <ProcessRadioRxDone+0xa60>)
 800b176:	2101      	movs	r1, #1
 800b178:	5499      	strb	r1, [r3, r2]
                    break;
 800b17a:	e058      	b.n	800b22e <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800b17c:	2034      	movs	r0, #52	; 0x34
 800b17e:	183b      	adds	r3, r7, r0
 800b180:	7b1b      	ldrb	r3, [r3, #12]
 800b182:	071b      	lsls	r3, r3, #28
 800b184:	0f1b      	lsrs	r3, r3, #28
 800b186:	b2db      	uxtb	r3, r3
 800b188:	001c      	movs	r4, r3
 800b18a:	4b5a      	ldr	r3, [pc, #360]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b18c:	4a63      	ldr	r2, [pc, #396]	; (800b31c <ProcessRadioRxDone+0xa54>)
 800b18e:	5c9b      	ldrb	r3, [r3, r2]
 800b190:	2277      	movs	r2, #119	; 0x77
 800b192:	18ba      	adds	r2, r7, r2
 800b194:	2100      	movs	r1, #0
 800b196:	5651      	ldrsb	r1, [r2, r1]
 800b198:	0005      	movs	r5, r0
 800b19a:	183a      	adds	r2, r7, r0
 800b19c:	3210      	adds	r2, #16
 800b19e:	0010      	movs	r0, r2
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	000b      	movs	r3, r1
 800b1a4:	0022      	movs	r2, r4
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	f000 ff7e 	bl	800c0a8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b1ac:	0028      	movs	r0, r5
 800b1ae:	183b      	adds	r3, r7, r0
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	5c99      	ldrb	r1, [r3, r2]
 800b1b4:	4b4f      	ldr	r3, [pc, #316]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b1b6:	4a5b      	ldr	r2, [pc, #364]	; (800b324 <ProcessRadioRxDone+0xa5c>)
 800b1b8:	5499      	strb	r1, [r3, r2]
                    break;
 800b1ba:	e038      	b.n	800b22e <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800b1bc:	2434      	movs	r4, #52	; 0x34
 800b1be:	193b      	adds	r3, r7, r4
 800b1c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b1c2:	193b      	adds	r3, r7, r4
 800b1c4:	2228      	movs	r2, #40	; 0x28
 800b1c6:	5c99      	ldrb	r1, [r3, r2]
 800b1c8:	4b4a      	ldr	r3, [pc, #296]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b1ca:	4a54      	ldr	r2, [pc, #336]	; (800b31c <ProcessRadioRxDone+0xa54>)
 800b1cc:	5c9b      	ldrb	r3, [r3, r2]
 800b1ce:	2277      	movs	r2, #119	; 0x77
 800b1d0:	18ba      	adds	r2, r7, r2
 800b1d2:	7812      	ldrb	r2, [r2, #0]
 800b1d4:	b252      	sxtb	r2, r2
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	0013      	movs	r3, r2
 800b1da:	000a      	movs	r2, r1
 800b1dc:	2100      	movs	r1, #0
 800b1de:	f000 ff63 	bl	800c0a8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b1e2:	193b      	adds	r3, r7, r4
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	5c99      	ldrb	r1, [r3, r2]
 800b1e8:	4b42      	ldr	r3, [pc, #264]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b1ea:	4a4e      	ldr	r2, [pc, #312]	; (800b324 <ProcessRadioRxDone+0xa5c>)
 800b1ec:	5499      	strb	r1, [r3, r2]
                    break;
 800b1ee:	e01e      	b.n	800b22e <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b1f0:	2034      	movs	r0, #52	; 0x34
 800b1f2:	183b      	adds	r3, r7, r0
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	5c99      	ldrb	r1, [r3, r2]
 800b1f8:	4b3e      	ldr	r3, [pc, #248]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b1fa:	4a4a      	ldr	r2, [pc, #296]	; (800b324 <ProcessRadioRxDone+0xa5c>)
 800b1fc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b1fe:	183b      	adds	r3, r7, r0
 800b200:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b202:	4a3c      	ldr	r2, [pc, #240]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b204:	2383      	movs	r3, #131	; 0x83
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b20a:	183b      	adds	r3, r7, r0
 800b20c:	2228      	movs	r2, #40	; 0x28
 800b20e:	5c99      	ldrb	r1, [r3, r2]
 800b210:	4b38      	ldr	r3, [pc, #224]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b212:	4a3c      	ldr	r2, [pc, #240]	; (800b304 <ProcessRadioRxDone+0xa3c>)
 800b214:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b218:	4a43      	ldr	r2, [pc, #268]	; (800b328 <ProcessRadioRxDone+0xa60>)
 800b21a:	2101      	movs	r1, #1
 800b21c:	5499      	strb	r1, [r3, r2]
                    break;
 800b21e:	e006      	b.n	800b22e <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b220:	4b34      	ldr	r3, [pc, #208]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b222:	4a35      	ldr	r2, [pc, #212]	; (800b2f8 <ProcessRadioRxDone+0xa30>)
 800b224:	2101      	movs	r1, #1
 800b226:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800b228:	f7ff fb20 	bl	800a86c <PrepareRxDoneAbort>
                    break;
 800b22c:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b22e:	4b31      	ldr	r3, [pc, #196]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b230:	4a3e      	ldr	r2, [pc, #248]	; (800b32c <ProcessRadioRxDone+0xa64>)
 800b232:	5c99      	ldrb	r1, [r3, r2]
 800b234:	2002      	movs	r0, #2
 800b236:	4301      	orrs	r1, r0
 800b238:	5499      	strb	r1, [r3, r2]

            break;
 800b23a:	e032      	b.n	800b2a2 <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 800b23c:	2476      	movs	r4, #118	; 0x76
 800b23e:	193b      	adds	r3, r7, r4
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b244:	18d1      	adds	r1, r2, r3
 800b246:	257a      	movs	r5, #122	; 0x7a
 800b248:	197b      	adds	r3, r7, r5
 800b24a:	881a      	ldrh	r2, [r3, #0]
 800b24c:	4b38      	ldr	r3, [pc, #224]	; (800b330 <ProcessRadioRxDone+0xa68>)
 800b24e:	0018      	movs	r0, r3
 800b250:	f00a fbd4 	bl	80159fc <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800b254:	4a27      	ldr	r2, [pc, #156]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b256:	2382      	movs	r3, #130	; 0x82
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	2103      	movs	r1, #3
 800b25c:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b25e:	4b25      	ldr	r3, [pc, #148]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b260:	4a25      	ldr	r2, [pc, #148]	; (800b2f8 <ProcessRadioRxDone+0xa30>)
 800b262:	2100      	movs	r1, #0
 800b264:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800b266:	4a23      	ldr	r2, [pc, #140]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b268:	2383      	movs	r3, #131	; 0x83
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	4930      	ldr	r1, [pc, #192]	; (800b330 <ProcessRadioRxDone+0xa68>)
 800b26e:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800b270:	197b      	adds	r3, r7, r5
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	b2da      	uxtb	r2, r3
 800b276:	193b      	adds	r3, r7, r4
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	b2d9      	uxtb	r1, r3
 800b27e:	4b1d      	ldr	r3, [pc, #116]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b280:	4a20      	ldr	r2, [pc, #128]	; (800b304 <ProcessRadioRxDone+0xa3c>)
 800b282:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b284:	4b1b      	ldr	r3, [pc, #108]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b286:	4a29      	ldr	r2, [pc, #164]	; (800b32c <ProcessRadioRxDone+0xa64>)
 800b288:	5c99      	ldrb	r1, [r3, r2]
 800b28a:	2002      	movs	r0, #2
 800b28c:	4301      	orrs	r1, r0
 800b28e:	5499      	strb	r1, [r3, r2]
            break;
 800b290:	e007      	b.n	800b2a2 <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b292:	4b18      	ldr	r3, [pc, #96]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b294:	4a18      	ldr	r2, [pc, #96]	; (800b2f8 <ProcessRadioRxDone+0xa30>)
 800b296:	2101      	movs	r1, #1
 800b298:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800b29a:	f7ff fae7 	bl	800a86c <PrepareRxDoneAbort>
            break;
 800b29e:	e000      	b.n	800b2a2 <ProcessRadioRxDone+0x9da>
            break;
 800b2a0:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 800b2a2:	4a14      	ldr	r2, [pc, #80]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b2a4:	238e      	movs	r3, #142	; 0x8e
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	58d3      	ldr	r3, [r2, r3]
 800b2aa:	4a22      	ldr	r2, [pc, #136]	; (800b334 <ProcessRadioRxDone+0xa6c>)
 800b2ac:	5c98      	ldrb	r0, [r3, r2]
 800b2ae:	4a11      	ldr	r2, [pc, #68]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b2b0:	238e      	movs	r3, #142	; 0x8e
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	58d3      	ldr	r3, [r2, r3]
 800b2b6:	22c8      	movs	r2, #200	; 0xc8
 800b2b8:	5c99      	ldrb	r1, [r3, r2]
 800b2ba:	4a0e      	ldr	r2, [pc, #56]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b2bc:	2386      	movs	r3, #134	; 0x86
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	5cd3      	ldrb	r3, [r2, r3]
 800b2c2:	001a      	movs	r2, r3
 800b2c4:	f000 fd26 	bl	800bd14 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 800b2c8:	4b1b      	ldr	r3, [pc, #108]	; (800b338 <ProcessRadioRxDone+0xa70>)
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f00a fb36 	bl	801593c <TimerIsStarted>
 800b2d0:	0003      	movs	r3, r0
 800b2d2:	001a      	movs	r2, r3
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4053      	eors	r3, r2
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d007      	beq.n	800b2ee <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b2de:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <ProcessRadioRxDone+0xa2c>)
 800b2e0:	4a12      	ldr	r2, [pc, #72]	; (800b32c <ProcessRadioRxDone+0xa64>)
 800b2e2:	5c99      	ldrb	r1, [r3, r2]
 800b2e4:	2010      	movs	r0, #16
 800b2e6:	4301      	orrs	r1, r0
 800b2e8:	5499      	strb	r1, [r3, r2]
 800b2ea:	e000      	b.n	800b2ee <ProcessRadioRxDone+0xa26>
                return;
 800b2ec:	46c0      	nop			; (mov r8, r8)
    }
}
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	b023      	add	sp, #140	; 0x8c
 800b2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f4:	20000708 	.word	0x20000708
 800b2f8:	00000411 	.word	0x00000411
 800b2fc:	00000412 	.word	0x00000412
 800b300:	00000415 	.word	0x00000415
 800b304:	0000041c 	.word	0x0000041c
 800b308:	00000424 	.word	0x00000424
 800b30c:	00000422 	.word	0x00000422
 800b310:	0000042d 	.word	0x0000042d
 800b314:	0000021a 	.word	0x0000021a
 800b318:	00000222 	.word	0x00000222
 800b31c:	00000421 	.word	0x00000421
 800b320:	0000042c 	.word	0x0000042c
 800b324:	00000413 	.word	0x00000413
 800b328:	0000041d 	.word	0x0000041d
 800b32c:	0000046d 	.word	0x0000046d
 800b330:	20000948 	.word	0x20000948
 800b334:	00000219 	.word	0x00000219
 800b338:	20000afc 	.word	0x20000afc

0800b33c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b340:	4a0e      	ldr	r2, [pc, #56]	; (800b37c <ProcessRadioTxTimeout+0x40>)
 800b342:	238e      	movs	r3, #142	; 0x8e
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	58d3      	ldr	r3, [r2, r3]
 800b348:	22c8      	movs	r2, #200	; 0xc8
 800b34a:	5c9b      	ldrb	r3, [r3, r2]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d003      	beq.n	800b358 <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <ProcessRadioTxTimeout+0x44>)
 800b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b354:	4798      	blx	r3
 800b356:	e001      	b.n	800b35c <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 800b358:	f002 f95e 	bl	800d618 <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800b35c:	4b07      	ldr	r3, [pc, #28]	; (800b37c <ProcessRadioTxTimeout+0x40>)
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <ProcessRadioTxTimeout+0x48>)
 800b360:	2102      	movs	r1, #2
 800b362:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800b364:	2002      	movs	r0, #2
 800b366:	f005 fa87 	bl	8010878 <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b36a:	4b04      	ldr	r3, [pc, #16]	; (800b37c <ProcessRadioTxTimeout+0x40>)
 800b36c:	4a06      	ldr	r2, [pc, #24]	; (800b388 <ProcessRadioTxTimeout+0x4c>)
 800b36e:	5c99      	ldrb	r1, [r3, r2]
 800b370:	2010      	movs	r0, #16
 800b372:	4301      	orrs	r1, r0
 800b374:	5499      	strb	r1, [r3, r2]
}
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20000708 	.word	0x20000708
 800b380:	08021b48 	.word	0x08021b48
 800b384:	0000042d 	.word	0x0000042d
 800b388:	0000046d 	.word	0x0000046d

0800b38c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	0002      	movs	r2, r0
 800b394:	1dfb      	adds	r3, r7, #7
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	1dbb      	adds	r3, r7, #6
 800b39a:	1c0a      	adds	r2, r1, #0
 800b39c:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800b39e:	230f      	movs	r3, #15
 800b3a0:	18fb      	adds	r3, r7, r3
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b3a6:	4a55      	ldr	r2, [pc, #340]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b3a8:	238e      	movs	r3, #142	; 0x8e
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	58d3      	ldr	r3, [r2, r3]
 800b3ae:	22c8      	movs	r2, #200	; 0xc8
 800b3b0:	5c9b      	ldrb	r3, [r3, r2]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d002      	beq.n	800b3bc <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 800b3b6:	4b52      	ldr	r3, [pc, #328]	; (800b500 <HandleRadioRxErrorTimeout+0x174>)
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b3bc:	f004 fdc1 	bl	800ff42 <LoRaMacClassBIsBeaconExpected>
 800b3c0:	1e03      	subs	r3, r0, #0
 800b3c2:	d009      	beq.n	800b3d8 <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800b3c4:	2002      	movs	r0, #2
 800b3c6:	f004 fd74 	bl	800feb2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	f004 fd95 	bl	800fefa <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800b3d0:	230f      	movs	r3, #15
 800b3d2:	18fb      	adds	r3, r7, r3
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b3d8:	4a48      	ldr	r2, [pc, #288]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b3da:	238e      	movs	r3, #142	; 0x8e
 800b3dc:	00db      	lsls	r3, r3, #3
 800b3de:	58d3      	ldr	r3, [r2, r3]
 800b3e0:	22c8      	movs	r2, #200	; 0xc8
 800b3e2:	5c9b      	ldrb	r3, [r3, r2]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d11b      	bne.n	800b420 <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b3e8:	f004 fdb1 	bl	800ff4e <LoRaMacClassBIsPingExpected>
 800b3ec:	1e03      	subs	r3, r0, #0
 800b3ee:	d009      	beq.n	800b404 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f004 fd68 	bl	800fec6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	f004 fd87 	bl	800ff0a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800b3fc:	230f      	movs	r3, #15
 800b3fe:	18fb      	adds	r3, r7, r3
 800b400:	2201      	movs	r2, #1
 800b402:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b404:	f004 fda9 	bl	800ff5a <LoRaMacClassBIsMulticastExpected>
 800b408:	1e03      	subs	r3, r0, #0
 800b40a:	d009      	beq.n	800b420 <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b40c:	2000      	movs	r0, #0
 800b40e:	f004 fd64 	bl	800feda <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b412:	2000      	movs	r0, #0
 800b414:	f004 fd81 	bl	800ff1a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800b418:	230f      	movs	r3, #15
 800b41a:	18fb      	adds	r3, r7, r3
 800b41c:	2201      	movs	r2, #1
 800b41e:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800b420:	230f      	movs	r3, #15
 800b422:	18fb      	adds	r3, r7, r3
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2201      	movs	r2, #1
 800b428:	4053      	eors	r3, r2
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d057      	beq.n	800b4e0 <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b430:	4b32      	ldr	r3, [pc, #200]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b432:	4a34      	ldr	r2, [pc, #208]	; (800b504 <HandleRadioRxErrorTimeout+0x178>)
 800b434:	5c9b      	ldrb	r3, [r3, r2]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d132      	bne.n	800b4a0 <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b43a:	4a30      	ldr	r2, [pc, #192]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b43c:	238e      	movs	r3, #142	; 0x8e
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	58d3      	ldr	r3, [r2, r3]
 800b442:	4a31      	ldr	r2, [pc, #196]	; (800b508 <HandleRadioRxErrorTimeout+0x17c>)
 800b444:	5c9b      	ldrb	r3, [r3, r2]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d004      	beq.n	800b454 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800b44a:	4b2c      	ldr	r3, [pc, #176]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b44c:	1dfa      	adds	r2, r7, #7
 800b44e:	492f      	ldr	r1, [pc, #188]	; (800b50c <HandleRadioRxErrorTimeout+0x180>)
 800b450:	7812      	ldrb	r2, [r2, #0]
 800b452:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800b454:	1dfb      	adds	r3, r7, #7
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	0018      	movs	r0, r3
 800b45a:	f005 fa0d 	bl	8010878 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b45e:	4a27      	ldr	r2, [pc, #156]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b460:	238e      	movs	r3, #142	; 0x8e
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	58d3      	ldr	r3, [r2, r3]
 800b466:	22c8      	movs	r2, #200	; 0xc8
 800b468:	5c9b      	ldrb	r3, [r3, r2]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d038      	beq.n	800b4e0 <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800b46e:	4a23      	ldr	r2, [pc, #140]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b470:	23d0      	movs	r3, #208	; 0xd0
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	58d3      	ldr	r3, [r2, r3]
 800b476:	0018      	movs	r0, r3
 800b478:	f00a fa73 	bl	8015962 <TimerGetElapsedTime>
 800b47c:	0001      	movs	r1, r0
 800b47e:	4a1f      	ldr	r2, [pc, #124]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b480:	23f2      	movs	r3, #242	; 0xf2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	58d3      	ldr	r3, [r2, r3]
 800b486:	4299      	cmp	r1, r3
 800b488:	d32a      	bcc.n	800b4e0 <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 800b48a:	4b21      	ldr	r3, [pc, #132]	; (800b510 <HandleRadioRxErrorTimeout+0x184>)
 800b48c:	0018      	movs	r0, r3
 800b48e:	f00a fa25 	bl	80158dc <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 800b492:	4b1a      	ldr	r3, [pc, #104]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b494:	4a1f      	ldr	r2, [pc, #124]	; (800b514 <HandleRadioRxErrorTimeout+0x188>)
 800b496:	5c99      	ldrb	r1, [r3, r2]
 800b498:	2010      	movs	r0, #16
 800b49a:	4301      	orrs	r1, r0
 800b49c:	5499      	strb	r1, [r3, r2]
 800b49e:	e01f      	b.n	800b4e0 <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b4a0:	4a16      	ldr	r2, [pc, #88]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b4a2:	238e      	movs	r3, #142	; 0x8e
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	58d3      	ldr	r3, [r2, r3]
 800b4a8:	4a17      	ldr	r2, [pc, #92]	; (800b508 <HandleRadioRxErrorTimeout+0x17c>)
 800b4aa:	5c9b      	ldrb	r3, [r3, r2]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b4b0:	4b12      	ldr	r3, [pc, #72]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b4b2:	1dba      	adds	r2, r7, #6
 800b4b4:	4915      	ldr	r1, [pc, #84]	; (800b50c <HandleRadioRxErrorTimeout+0x180>)
 800b4b6:	7812      	ldrb	r2, [r2, #0]
 800b4b8:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b4ba:	1dbb      	adds	r3, r7, #6
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f005 f9da 	bl	8010878 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b4c4:	4a0d      	ldr	r2, [pc, #52]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b4c6:	238e      	movs	r3, #142	; 0x8e
 800b4c8:	00db      	lsls	r3, r3, #3
 800b4ca:	58d3      	ldr	r3, [r2, r3]
 800b4cc:	22c8      	movs	r2, #200	; 0xc8
 800b4ce:	5c9b      	ldrb	r3, [r3, r2]
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d005      	beq.n	800b4e0 <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b4d4:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b4d6:	4a0f      	ldr	r2, [pc, #60]	; (800b514 <HandleRadioRxErrorTimeout+0x188>)
 800b4d8:	5c99      	ldrb	r1, [r3, r2]
 800b4da:	2010      	movs	r0, #16
 800b4dc:	4301      	orrs	r1, r0
 800b4de:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b4e0:	4a06      	ldr	r2, [pc, #24]	; (800b4fc <HandleRadioRxErrorTimeout+0x170>)
 800b4e2:	238e      	movs	r3, #142	; 0x8e
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	58d3      	ldr	r3, [r2, r3]
 800b4e8:	22c8      	movs	r2, #200	; 0xc8
 800b4ea:	5c9b      	ldrb	r3, [r3, r2]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d101      	bne.n	800b4f4 <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 800b4f0:	f002 f892 	bl	800d618 <OpenContinuousRx2Window>
    }
}
 800b4f4:	46c0      	nop			; (mov r8, r8)
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	b004      	add	sp, #16
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20000708 	.word	0x20000708
 800b500:	08021b48 	.word	0x08021b48
 800b504:	0000046c 	.word	0x0000046c
 800b508:	00000219 	.word	0x00000219
 800b50c:	0000042d 	.word	0x0000042d
 800b510:	20000ab4 	.word	0x20000ab4
 800b514:	0000046d 	.word	0x0000046d

0800b518 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800b51c:	2106      	movs	r1, #6
 800b51e:	2005      	movs	r0, #5
 800b520:	f7ff ff34 	bl	800b38c <HandleRadioRxErrorTimeout>
}
 800b524:	46c0      	nop			; (mov r8, r8)
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800b52e:	2104      	movs	r1, #4
 800b530:	2003      	movs	r0, #3
 800b532:	f7ff ff2b 	bl	800b38c <HandleRadioRxErrorTimeout>
}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800b542:	f012 fea3 	bl	801e28c <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 800b546:	4b1e      	ldr	r3, [pc, #120]	; (800b5c0 <LoRaMacHandleIrqEvents+0x84>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 800b54c:	4b1c      	ldr	r3, [pc, #112]	; (800b5c0 <LoRaMacHandleIrqEvents+0x84>)
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 800b552:	f012 feaf 	bl	801e2b4 <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d02c      	beq.n	800b5b6 <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 800b55c:	1d3b      	adds	r3, r7, #4
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2210      	movs	r2, #16
 800b562:	4013      	ands	r3, r2
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 800b56a:	f7ff f8af 	bl	800a6cc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800b56e:	1d3b      	adds	r3, r7, #4
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2208      	movs	r2, #8
 800b574:	4013      	ands	r3, r2
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 800b57c:	f7ff f9a4 	bl	800a8c8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800b580:	1d3b      	adds	r3, r7, #4
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2204      	movs	r2, #4
 800b586:	4013      	ands	r3, r2
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 800b58e:	f7ff fed5 	bl	800b33c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800b592:	1d3b      	adds	r3, r7, #4
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2202      	movs	r2, #2
 800b598:	4013      	ands	r3, r2
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 800b5a0:	f7ff ffba 	bl	800b518 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b5a4:	1d3b      	adds	r3, r7, #4
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 800b5b2:	f7ff ffba 	bl	800b52a <ProcessRadioRxTimeout>
        }
    }
}
 800b5b6:	46c0      	nop			; (mov r8, r8)
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	b002      	add	sp, #8
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	20000da8 	.word	0x20000da8

0800b5c4 <LoRaMacIsBusy>:

static LoRaMacBoolean_t LoRaMacIsBusy( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b5c8:	4a08      	ldr	r2, [pc, #32]	; (800b5ec <LoRaMacIsBusy+0x28>)
 800b5ca:	23d5      	movs	r3, #213	; 0xd5
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	58d3      	ldr	r3, [r2, r3]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <LoRaMacIsBusy+0x28>)
 800b5d6:	4a06      	ldr	r2, [pc, #24]	; (800b5f0 <LoRaMacIsBusy+0x2c>)
 800b5d8:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d101      	bne.n	800b5e2 <LoRaMacIsBusy+0x1e>
    {
        return LORAMAC_FALSE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	e000      	b.n	800b5e4 <LoRaMacIsBusy+0x20>
    }
    return LORAMAC_TRUE;
 800b5e2:	2301      	movs	r3, #1
}
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	46c0      	nop			; (mov r8, r8)
 800b5ec:	20000708 	.word	0x20000708
 800b5f0:	0000046e 	.word	0x0000046e

0800b5f4 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	0002      	movs	r2, r0
 800b5fc:	1dfb      	adds	r3, r7, #7
 800b5fe:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <LoRaMacEnableRequests+0x20>)
 800b602:	1dfa      	adds	r2, r7, #7
 800b604:	4904      	ldr	r1, [pc, #16]	; (800b618 <LoRaMacEnableRequests+0x24>)
 800b606:	7812      	ldrb	r2, [r2, #0]
 800b608:	545a      	strb	r2, [r3, r1]
}
 800b60a:	46c0      	nop			; (mov r8, r8)
 800b60c:	46bd      	mov	sp, r7
 800b60e:	b002      	add	sp, #8
 800b610:	bd80      	pop	{r7, pc}
 800b612:	46c0      	nop			; (mov r8, r8)
 800b614:	20000708 	.word	0x20000708
 800b618:	0000046e 	.word	0x0000046e

0800b61c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800b622:	1d3b      	adds	r3, r7, #4
 800b624:	4a2c      	ldr	r2, [pc, #176]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b626:	492d      	ldr	r1, [pc, #180]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b628:	5c52      	ldrb	r2, [r2, r1]
 800b62a:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800b62c:	4a2a      	ldr	r2, [pc, #168]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b62e:	23d5      	movs	r3, #213	; 0xd5
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	58d3      	ldr	r3, [r2, r3]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d14a      	bne.n	800b6ce <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b638:	4b27      	ldr	r3, [pc, #156]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b63a:	4a28      	ldr	r2, [pc, #160]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b63c:	5c9b      	ldrb	r3, [r3, r2]
 800b63e:	2201      	movs	r2, #1
 800b640:	4013      	ands	r3, r2
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d005      	beq.n	800b654 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b648:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b64a:	4a24      	ldr	r2, [pc, #144]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b64c:	5c99      	ldrb	r1, [r3, r2]
 800b64e:	2001      	movs	r0, #1
 800b650:	4381      	bics	r1, r0
 800b652:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b654:	4b20      	ldr	r3, [pc, #128]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b656:	4a21      	ldr	r2, [pc, #132]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b658:	5c9b      	ldrb	r3, [r3, r2]
 800b65a:	2204      	movs	r2, #4
 800b65c:	4013      	ands	r3, r2
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d005      	beq.n	800b670 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b664:	4b1c      	ldr	r3, [pc, #112]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b666:	4a1d      	ldr	r2, [pc, #116]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b668:	5c99      	ldrb	r1, [r3, r2]
 800b66a:	2004      	movs	r0, #4
 800b66c:	4381      	bics	r1, r0
 800b66e:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b670:	2001      	movs	r0, #1
 800b672:	f7ff ffbf 	bl	800b5f4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800b676:	1d3b      	adds	r3, r7, #4
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2201      	movs	r2, #1
 800b67c:	4013      	ands	r3, r2
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d007      	beq.n	800b694 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b684:	4a14      	ldr	r2, [pc, #80]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b686:	23d6      	movs	r3, #214	; 0xd6
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	58d3      	ldr	r3, [r2, r3]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a14      	ldr	r2, [pc, #80]	; (800b6e0 <LoRaMacHandleRequestEvents+0xc4>)
 800b690:	0010      	movs	r0, r2
 800b692:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800b694:	1d3b      	adds	r3, r7, #4
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2204      	movs	r2, #4
 800b69a:	4013      	ands	r3, r2
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00d      	beq.n	800b6be <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b6a2:	4b10      	ldr	r3, [pc, #64]	; (800b6e4 <LoRaMacHandleRequestEvents+0xc8>)
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	f005 f93d 	bl	8010924 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b6aa:	f005 f99d 	bl	80109e8 <LoRaMacConfirmQueueGetCnt>
 800b6ae:	1e03      	subs	r3, r0, #0
 800b6b0:	d005      	beq.n	800b6be <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b6b4:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b6b6:	5c99      	ldrb	r1, [r3, r2]
 800b6b8:	2004      	movs	r0, #4
 800b6ba:	4301      	orrs	r1, r0
 800b6bc:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800b6be:	f004 fc67 	bl	800ff90 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <LoRaMacHandleRequestEvents+0xbc>)
 800b6c4:	4a05      	ldr	r2, [pc, #20]	; (800b6dc <LoRaMacHandleRequestEvents+0xc0>)
 800b6c6:	5c99      	ldrb	r1, [r3, r2]
 800b6c8:	2010      	movs	r0, #16
 800b6ca:	4381      	bics	r1, r0
 800b6cc:	5499      	strb	r1, [r3, r2]
    }
}
 800b6ce:	46c0      	nop			; (mov r8, r8)
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	b002      	add	sp, #8
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	46c0      	nop			; (mov r8, r8)
 800b6d8:	20000708 	.word	0x20000708
 800b6dc:	0000046d 	.word	0x0000046d
 800b6e0:	20000b34 	.word	0x20000b34
 800b6e4:	20000b48 	.word	0x20000b48

0800b6e8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b6ee:	4b2d      	ldr	r3, [pc, #180]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b6f0:	4a2d      	ldr	r2, [pc, #180]	; (800b7a8 <LoRaMacHandleIndicationEvents+0xc0>)
 800b6f2:	5c9b      	ldrb	r3, [r3, r2]
 800b6f4:	2208      	movs	r2, #8
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00d      	beq.n	800b71a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b6fe:	4a29      	ldr	r2, [pc, #164]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b700:	23d6      	movs	r3, #214	; 0xd6
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	58d3      	ldr	r3, [r2, r3]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	4a28      	ldr	r2, [pc, #160]	; (800b7ac <LoRaMacHandleIndicationEvents+0xc4>)
 800b70a:	0010      	movs	r0, r2
 800b70c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b70e:	4b25      	ldr	r3, [pc, #148]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b710:	4a25      	ldr	r2, [pc, #148]	; (800b7a8 <LoRaMacHandleIndicationEvents+0xc0>)
 800b712:	5c99      	ldrb	r1, [r3, r2]
 800b714:	2008      	movs	r0, #8
 800b716:	4381      	bics	r1, r0
 800b718:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b71a:	4a22      	ldr	r2, [pc, #136]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b71c:	23d5      	movs	r3, #213	; 0xd5
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	58d3      	ldr	r3, [r2, r3]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d114      	bne.n	800b750 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800b726:	1dfb      	adds	r3, r7, #7
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800b72c:	1dfb      	adds	r3, r7, #7
 800b72e:	0018      	movs	r0, r3
 800b730:	f004 ff48 	bl	80105c4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800b734:	1dfb      	adds	r3, r7, #7
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d009      	beq.n	800b750 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800b73c:	f000 fc9e 	bl	800c07c <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b740:	4a18      	ldr	r2, [pc, #96]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b742:	23d6      	movs	r3, #214	; 0xd6
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	58d3      	ldr	r3, [r2, r3]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	4a18      	ldr	r2, [pc, #96]	; (800b7ac <LoRaMacHandleIndicationEvents+0xc4>)
 800b74c:	0010      	movs	r0, r2
 800b74e:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b750:	4b14      	ldr	r3, [pc, #80]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b752:	4a15      	ldr	r2, [pc, #84]	; (800b7a8 <LoRaMacHandleIndicationEvents+0xc0>)
 800b754:	5c9b      	ldrb	r3, [r3, r2]
 800b756:	2202      	movs	r2, #2
 800b758:	4013      	ands	r3, r2
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01d      	beq.n	800b79c <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b760:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b762:	4a11      	ldr	r2, [pc, #68]	; (800b7a8 <LoRaMacHandleIndicationEvents+0xc0>)
 800b764:	5c99      	ldrb	r1, [r3, r2]
 800b766:	2002      	movs	r0, #2
 800b768:	4381      	bics	r1, r0
 800b76a:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b76c:	4a0d      	ldr	r2, [pc, #52]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b76e:	238e      	movs	r3, #142	; 0x8e
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	58d3      	ldr	r3, [r2, r3]
 800b774:	22c8      	movs	r2, #200	; 0xc8
 800b776:	5c9b      	ldrb	r3, [r3, r2]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d107      	bne.n	800b78c <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 800b77c:	4a09      	ldr	r2, [pc, #36]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b77e:	23d5      	movs	r3, #213	; 0xd5
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	58d3      	ldr	r3, [r2, r3]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 800b788:	f001 ff46 	bl	800d618 <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800b78c:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <LoRaMacHandleIndicationEvents+0xbc>)
 800b78e:	23d6      	movs	r3, #214	; 0xd6
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	58d3      	ldr	r3, [r2, r3]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <LoRaMacHandleIndicationEvents+0xc8>)
 800b798:	0010      	movs	r0, r2
 800b79a:	4798      	blx	r3
    }
}
 800b79c:	46c0      	nop			; (mov r8, r8)
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	b002      	add	sp, #8
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20000708 	.word	0x20000708
 800b7a8:	0000046d 	.word	0x0000046d
 800b7ac:	20000b5c 	.word	0x20000b5c
 800b7b0:	20000b18 	.word	0x20000b18

0800b7b4 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b7ba:	4b36      	ldr	r3, [pc, #216]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7bc:	4a36      	ldr	r2, [pc, #216]	; (800b898 <LoRaMacHandleMcpsRequest+0xe4>)
 800b7be:	5c9b      	ldrb	r3, [r3, r2]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d05f      	beq.n	800b88a <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 800b7ca:	1dfb      	adds	r3, r7, #7
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800b7d0:	1dbb      	adds	r3, r7, #6
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b7d6:	4b2f      	ldr	r3, [pc, #188]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7d8:	4a30      	ldr	r2, [pc, #192]	; (800b89c <LoRaMacHandleMcpsRequest+0xe8>)
 800b7da:	5c9b      	ldrb	r3, [r3, r2]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800b7e0:	4b2c      	ldr	r3, [pc, #176]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7e2:	4a2e      	ldr	r2, [pc, #184]	; (800b89c <LoRaMacHandleMcpsRequest+0xe8>)
 800b7e4:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d105      	bne.n	800b7f6 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b7ea:	1dfc      	adds	r4, r7, #7
 800b7ec:	f002 fae2 	bl	800ddb4 <CheckRetransUnconfirmedUplink>
 800b7f0:	0003      	movs	r3, r0
 800b7f2:	7023      	strb	r3, [r4, #0]
 800b7f4:	e02a      	b.n	800b84c <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b7f6:	4b27      	ldr	r3, [pc, #156]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b7f8:	4a28      	ldr	r2, [pc, #160]	; (800b89c <LoRaMacHandleMcpsRequest+0xe8>)
 800b7fa:	5c9b      	ldrb	r3, [r3, r2]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d125      	bne.n	800b84c <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 800b800:	4a24      	ldr	r2, [pc, #144]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b802:	238e      	movs	r3, #142	; 0x8e
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	58d2      	ldr	r2, [r2, r3]
 800b808:	2386      	movs	r3, #134	; 0x86
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	5cd3      	ldrb	r3, [r2, r3]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d019      	beq.n	800b846 <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b812:	1dfc      	adds	r4, r7, #7
 800b814:	f002 fb04 	bl	800de20 <CheckRetransConfirmedUplink>
 800b818:	0003      	movs	r3, r0
 800b81a:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800b81c:	4a1d      	ldr	r2, [pc, #116]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b81e:	238e      	movs	r3, #142	; 0x8e
 800b820:	00db      	lsls	r3, r3, #3
 800b822:	58d3      	ldr	r3, [r2, r3]
 800b824:	4a1e      	ldr	r2, [pc, #120]	; (800b8a0 <LoRaMacHandleMcpsRequest+0xec>)
 800b826:	5c9b      	ldrb	r3, [r3, r2]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10f      	bne.n	800b84c <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 800b82c:	1dfb      	adds	r3, r7, #7
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2201      	movs	r2, #1
 800b832:	4053      	eors	r3, r2
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 800b83a:	f002 fb7b 	bl	800df34 <AckTimeoutRetriesProcess>
 800b83e:	e005      	b.n	800b84c <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800b840:	f002 fbdc 	bl	800dffc <AckTimeoutRetriesFinalize>
 800b844:	e002      	b.n	800b84c <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800b846:	1dbb      	adds	r3, r7, #6
 800b848:	2201      	movs	r2, #1
 800b84a:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800b84c:	1dfb      	adds	r3, r7, #7
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 800b854:	f002 fb12 	bl	800de7c <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800b858:	e017      	b.n	800b88a <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 800b85a:	1dbb      	adds	r3, r7, #6
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2201      	movs	r2, #1
 800b860:	4053      	eors	r3, r2
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b00      	cmp	r3, #0
 800b866:	d010      	beq.n	800b88a <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b86a:	4a0b      	ldr	r2, [pc, #44]	; (800b898 <LoRaMacHandleMcpsRequest+0xe4>)
 800b86c:	5c99      	ldrb	r1, [r3, r2]
 800b86e:	2010      	movs	r0, #16
 800b870:	4381      	bics	r1, r0
 800b872:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 800b874:	4a07      	ldr	r2, [pc, #28]	; (800b894 <LoRaMacHandleMcpsRequest+0xe0>)
 800b876:	238e      	movs	r3, #142	; 0x8e
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	58d2      	ldr	r2, [r2, r3]
 800b87c:	2386      	movs	r3, #134	; 0x86
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	2100      	movs	r1, #0
 800b882:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 800b884:	2000      	movs	r0, #0
 800b886:	f000 f90b 	bl	800baa0 <OnTxDelayedTimerEvent>
}
 800b88a:	46c0      	nop			; (mov r8, r8)
 800b88c:	46bd      	mov	sp, r7
 800b88e:	b003      	add	sp, #12
 800b890:	bd90      	pop	{r4, r7, pc}
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	20000708 	.word	0x20000708
 800b898:	0000046d 	.word	0x0000046d
 800b89c:	0000042c 	.word	0x0000042c
 800b8a0:	00000222 	.word	0x00000222

0800b8a4 <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b8a8:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <LoRaMacHandleJoinRequest+0x58>)
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <LoRaMacHandleJoinRequest+0x5c>)
 800b8ac:	5c9b      	ldrb	r3, [r3, r2]
 800b8ae:	2204      	movs	r2, #4
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01e      	beq.n	800b8f6 <LoRaMacHandleJoinRequest+0x52>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f005 f819 	bl	80108f0 <LoRaMacConfirmQueueIsCmdActive>
 800b8be:	1e03      	subs	r3, r0, #0
 800b8c0:	d019      	beq.n	800b8f6 <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f004 ffb2 	bl	801082c <LoRaMacConfirmQueueGetStatus>
 800b8c8:	1e03      	subs	r3, r0, #0
 800b8ca:	d109      	bne.n	800b8e0 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 800b8cc:	f006 feb8 	bl	8012640 <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800b8d0:	4a0a      	ldr	r2, [pc, #40]	; (800b8fc <LoRaMacHandleJoinRequest+0x58>)
 800b8d2:	238e      	movs	r3, #142	; 0x8e
 800b8d4:	00db      	lsls	r3, r3, #3
 800b8d6:	58d2      	ldr	r2, [r2, r3]
 800b8d8:	2388      	movs	r3, #136	; 0x88
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	2100      	movs	r1, #0
 800b8de:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b8e0:	4a06      	ldr	r2, [pc, #24]	; (800b8fc <LoRaMacHandleJoinRequest+0x58>)
 800b8e2:	23d5      	movs	r3, #213	; 0xd5
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	58d3      	ldr	r3, [r2, r3]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	4393      	bics	r3, r2
 800b8ec:	0019      	movs	r1, r3
 800b8ee:	4a03      	ldr	r2, [pc, #12]	; (800b8fc <LoRaMacHandleJoinRequest+0x58>)
 800b8f0:	23d5      	movs	r3, #213	; 0xd5
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	50d1      	str	r1, [r2, r3]
    }
}
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20000708 	.word	0x20000708
 800b900:	0000046d 	.word	0x0000046d

0800b904 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b908:	f004 ffe8 	bl	80108dc <LoRaMacConfirmQueueGetStatusCmn>
 800b90c:	0003      	movs	r3, r0
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d004      	beq.n	800b91c <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800b912:	4b14      	ldr	r3, [pc, #80]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b914:	4a14      	ldr	r2, [pc, #80]	; (800b968 <LoRaMacCheckForTxTimeout+0x64>)
 800b916:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d11e      	bne.n	800b95a <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b91c:	4a11      	ldr	r2, [pc, #68]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b91e:	23d5      	movs	r3, #213	; 0xd5
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	58d3      	ldr	r3, [r2, r3]
 800b924:	2202      	movs	r2, #2
 800b926:	4393      	bics	r3, r2
 800b928:	0019      	movs	r1, r3
 800b92a:	4a0e      	ldr	r2, [pc, #56]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b92c:	23d5      	movs	r3, #213	; 0xd5
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800b932:	4a0c      	ldr	r2, [pc, #48]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b934:	238e      	movs	r3, #142	; 0x8e
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	58d3      	ldr	r3, [r2, r3]
 800b93a:	4a0c      	ldr	r2, [pc, #48]	; (800b96c <LoRaMacCheckForTxTimeout+0x68>)
 800b93c:	5c99      	ldrb	r1, [r3, r2]
 800b93e:	4b09      	ldr	r3, [pc, #36]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b940:	4a0b      	ldr	r2, [pc, #44]	; (800b970 <LoRaMacCheckForTxTimeout+0x6c>)
 800b942:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800b944:	4a07      	ldr	r2, [pc, #28]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b946:	2386      	movs	r3, #134	; 0x86
 800b948:	00db      	lsls	r3, r3, #3
 800b94a:	2100      	movs	r1, #0
 800b94c:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800b94e:	4b05      	ldr	r3, [pc, #20]	; (800b964 <LoRaMacCheckForTxTimeout+0x60>)
 800b950:	4a08      	ldr	r2, [pc, #32]	; (800b974 <LoRaMacCheckForTxTimeout+0x70>)
 800b952:	2100      	movs	r1, #0
 800b954:	5099      	str	r1, [r3, r2]
        return 0x01;
 800b956:	2301      	movs	r3, #1
 800b958:	e000      	b.n	800b95c <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	0018      	movs	r0, r3
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	46c0      	nop			; (mov r8, r8)
 800b964:	20000708 	.word	0x20000708
 800b968:	0000042d 	.word	0x0000042d
 800b96c:	00000217 	.word	0x00000217
 800b970:	00000431 	.word	0x00000431
 800b974:	00000434 	.word	0x00000434

0800b978 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b97c:	200b      	movs	r0, #11
 800b97e:	f004 ffb7 	bl	80108f0 <LoRaMacConfirmQueueIsCmdActive>
 800b982:	1e03      	subs	r3, r0, #0
 800b984:	d01c      	beq.n	800b9c0 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b986:	4b10      	ldr	r3, [pc, #64]	; (800b9c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b988:	4a10      	ldr	r2, [pc, #64]	; (800b9cc <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b98a:	5c9b      	ldrb	r3, [r3, r2]
 800b98c:	2201      	movs	r2, #1
 800b98e:	4013      	ands	r3, r2
 800b990:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b992:	2b00      	cmp	r3, #0
 800b994:	d114      	bne.n	800b9c0 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b996:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b998:	4a0c      	ldr	r2, [pc, #48]	; (800b9cc <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b99a:	5c9b      	ldrb	r3, [r3, r2]
 800b99c:	2204      	movs	r2, #4
 800b99e:	4013      	ands	r3, r2
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00c      	beq.n	800b9c0 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b9a6:	4a08      	ldr	r2, [pc, #32]	; (800b9c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b9a8:	23d5      	movs	r3, #213	; 0xd5
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	58d3      	ldr	r3, [r2, r3]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	4393      	bics	r3, r2
 800b9b2:	0019      	movs	r1, r3
 800b9b4:	4a04      	ldr	r2, [pc, #16]	; (800b9c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b9b6:	23d5      	movs	r3, #213	; 0xd5
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e000      	b.n	800b9c2 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20000708 	.word	0x20000708
 800b9cc:	0000046d 	.word	0x0000046d

0800b9d0 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b9d4:	4a0f      	ldr	r2, [pc, #60]	; (800ba14 <LoRaMacCheckForRxAbort+0x44>)
 800b9d6:	23d5      	movs	r3, #213	; 0xd5
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	58d3      	ldr	r3, [r2, r3]
 800b9dc:	2280      	movs	r2, #128	; 0x80
 800b9de:	4013      	ands	r3, r2
 800b9e0:	d015      	beq.n	800ba0e <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b9e2:	4a0c      	ldr	r2, [pc, #48]	; (800ba14 <LoRaMacCheckForRxAbort+0x44>)
 800b9e4:	23d5      	movs	r3, #213	; 0xd5
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	58d3      	ldr	r3, [r2, r3]
 800b9ea:	2280      	movs	r2, #128	; 0x80
 800b9ec:	4393      	bics	r3, r2
 800b9ee:	0019      	movs	r1, r3
 800b9f0:	4a08      	ldr	r2, [pc, #32]	; (800ba14 <LoRaMacCheckForRxAbort+0x44>)
 800b9f2:	23d5      	movs	r3, #213	; 0xd5
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b9f8:	4a06      	ldr	r2, [pc, #24]	; (800ba14 <LoRaMacCheckForRxAbort+0x44>)
 800b9fa:	23d5      	movs	r3, #213	; 0xd5
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	58d3      	ldr	r3, [r2, r3]
 800ba00:	2202      	movs	r2, #2
 800ba02:	4393      	bics	r3, r2
 800ba04:	0019      	movs	r1, r3
 800ba06:	4a03      	ldr	r2, [pc, #12]	; (800ba14 <LoRaMacCheckForRxAbort+0x44>)
 800ba08:	23d5      	movs	r3, #213	; 0xd5
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	50d1      	str	r1, [r2, r3]
    }
}
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20000708 	.word	0x20000708

0800ba18 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ba1e:	1dfb      	adds	r3, r7, #7
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800ba24:	f7ff fd8a 	bl	800b53c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ba28:	f004 fb0f 	bl	801004a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <LoRaMacProcess+0x80>)
 800ba2e:	4a1b      	ldr	r2, [pc, #108]	; (800ba9c <LoRaMacProcess+0x84>)
 800ba30:	5c9b      	ldrb	r3, [r3, r2]
 800ba32:	2210      	movs	r2, #16
 800ba34:	4013      	ands	r3, r2
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d027      	beq.n	800ba8c <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	f7ff fdd9 	bl	800b5f4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ba42:	f7ff ffc5 	bl	800b9d0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ba46:	f002 fb7b 	bl	800e140 <IsRequestPending>
 800ba4a:	1e03      	subs	r3, r0, #0
 800ba4c:	d011      	beq.n	800ba72 <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800ba4e:	f7ff ff59 	bl	800b904 <LoRaMacCheckForTxTimeout>
 800ba52:	0003      	movs	r3, r0
 800ba54:	0019      	movs	r1, r3
 800ba56:	1dfb      	adds	r3, r7, #7
 800ba58:	1dfa      	adds	r2, r7, #7
 800ba5a:	7812      	ldrb	r2, [r2, #0]
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ba60:	f7ff ff8a 	bl	800b978 <LoRaMacCheckForBeaconAcquisition>
 800ba64:	0003      	movs	r3, r0
 800ba66:	0019      	movs	r1, r3
 800ba68:	1dfb      	adds	r3, r7, #7
 800ba6a:	1dfa      	adds	r2, r7, #7
 800ba6c:	7812      	ldrb	r2, [r2, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800ba72:	1dfb      	adds	r3, r7, #7
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d103      	bne.n	800ba82 <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800ba7a:	f7ff ff13 	bl	800b8a4 <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800ba7e:	f7ff fe99 	bl	800b7b4 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ba82:	f7ff fdcb 	bl	800b61c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ba86:	2001      	movs	r0, #1
 800ba88:	f7ff fdb4 	bl	800b5f4 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800ba8c:	f7ff fe2c 	bl	800b6e8 <LoRaMacHandleIndicationEvents>
}
 800ba90:	46c0      	nop			; (mov r8, r8)
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b002      	add	sp, #8
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20000708 	.word	0x20000708
 800ba9c:	0000046d 	.word	0x0000046d

0800baa0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800baa8:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <OnTxDelayedTimerEvent+0x78>)
 800baaa:	0018      	movs	r0, r3
 800baac:	f009 ff16 	bl	80158dc <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800bab0:	4a1a      	ldr	r2, [pc, #104]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800bab2:	23d5      	movs	r3, #213	; 0xd5
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	58d3      	ldr	r3, [r2, r3]
 800bab8:	2220      	movs	r2, #32
 800baba:	4393      	bics	r3, r2
 800babc:	0019      	movs	r1, r3
 800babe:	4a17      	ldr	r2, [pc, #92]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800bac0:	23d5      	movs	r3, #213	; 0xd5
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800bac6:	2001      	movs	r0, #1
 800bac8:	f001 fa4a 	bl	800cf60 <ScheduleTx>
 800bacc:	1e03      	subs	r3, r0, #0
 800bace:	d01e      	beq.n	800bb0e <OnTxDelayedTimerEvent+0x6e>
 800bad0:	2b0b      	cmp	r3, #11
 800bad2:	d01c      	beq.n	800bb0e <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bad4:	4a11      	ldr	r2, [pc, #68]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800bad6:	238e      	movs	r3, #142	; 0x8e
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	58d3      	ldr	r3, [r2, r3]
 800badc:	22d5      	movs	r2, #213	; 0xd5
 800bade:	569b      	ldrsb	r3, [r3, r2]
 800bae0:	b2d9      	uxtb	r1, r3
 800bae2:	4b0e      	ldr	r3, [pc, #56]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800bae4:	4a0e      	ldr	r2, [pc, #56]	; (800bb20 <OnTxDelayedTimerEvent+0x80>)
 800bae6:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800bae8:	4a0c      	ldr	r2, [pc, #48]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800baea:	238e      	movs	r3, #142	; 0x8e
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	58d3      	ldr	r3, [r2, r3]
 800baf0:	4a0c      	ldr	r2, [pc, #48]	; (800bb24 <OnTxDelayedTimerEvent+0x84>)
 800baf2:	5c99      	ldrb	r1, [r3, r2]
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800baf6:	4a0c      	ldr	r2, [pc, #48]	; (800bb28 <OnTxDelayedTimerEvent+0x88>)
 800baf8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800bafa:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <OnTxDelayedTimerEvent+0x7c>)
 800bafc:	4a0b      	ldr	r2, [pc, #44]	; (800bb2c <OnTxDelayedTimerEvent+0x8c>)
 800bafe:	2109      	movs	r1, #9
 800bb00:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800bb02:	2009      	movs	r0, #9
 800bb04:	f004 feb8 	bl	8010878 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800bb08:	f002 f9b8 	bl	800de7c <StopRetransmission>
            break;
 800bb0c:	e000      	b.n	800bb10 <OnTxDelayedTimerEvent+0x70>
            break;
 800bb0e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800bb10:	46c0      	nop			; (mov r8, r8)
 800bb12:	46bd      	mov	sp, r7
 800bb14:	b002      	add	sp, #8
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	20000a84 	.word	0x20000a84
 800bb1c:	20000708 	.word	0x20000708
 800bb20:	0000042e 	.word	0x0000042e
 800bb24:	00000217 	.word	0x00000217
 800bb28:	00000431 	.word	0x00000431
 800bb2c:	0000042d 	.word	0x0000042d

0800bb30 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer1 );
 800bb38:	4b30      	ldr	r3, [pc, #192]	; (800bbfc <OnRxWindow1TimerEvent+0xcc>)
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f009 fece 	bl	80158dc <TimerStop>
    MacCtx.RxSlot = RX_SLOT_WIN_1;
 800bb40:	4b2f      	ldr	r3, [pc, #188]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb42:	4a30      	ldr	r2, [pc, #192]	; (800bc04 <OnRxWindow1TimerEvent+0xd4>)
 800bb44:	2100      	movs	r1, #0
 800bb46:	5499      	strb	r1, [r3, r2]

    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800bb48:	4a2d      	ldr	r2, [pc, #180]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb4a:	238e      	movs	r3, #142	; 0x8e
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	58d2      	ldr	r2, [r2, r3]
 800bb50:	2314      	movs	r3, #20
 800bb52:	33ff      	adds	r3, #255	; 0xff
 800bb54:	5cd1      	ldrb	r1, [r2, r3]
 800bb56:	4a2a      	ldr	r2, [pc, #168]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb58:	23f3      	movs	r3, #243	; 0xf3
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800bb5e:	4a28      	ldr	r2, [pc, #160]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb60:	238e      	movs	r3, #142	; 0x8e
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	58d3      	ldr	r3, [r2, r3]
 800bb66:	22f5      	movs	r2, #245	; 0xf5
 800bb68:	5c9b      	ldrb	r3, [r3, r2]
 800bb6a:	b259      	sxtb	r1, r3
 800bb6c:	4b24      	ldr	r3, [pc, #144]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb6e:	4a26      	ldr	r2, [pc, #152]	; (800bc08 <OnRxWindow1TimerEvent+0xd8>)
 800bb70:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800bb72:	4a23      	ldr	r2, [pc, #140]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb74:	238e      	movs	r3, #142	; 0x8e
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	58d2      	ldr	r2, [r2, r3]
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	33ff      	adds	r3, #255	; 0xff
 800bb7e:	5cd1      	ldrb	r1, [r2, r3]
 800bb80:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb82:	23f7      	movs	r3, #247	; 0xf7
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800bb88:	4a1d      	ldr	r2, [pc, #116]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb8a:	238e      	movs	r3, #142	; 0x8e
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	58d2      	ldr	r2, [r2, r3]
 800bb90:	2316      	movs	r3, #22
 800bb92:	33ff      	adds	r3, #255	; 0xff
 800bb94:	5cd1      	ldrb	r1, [r2, r3]
 800bb96:	4b1a      	ldr	r3, [pc, #104]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb98:	4a1c      	ldr	r2, [pc, #112]	; (800bc0c <OnRxWindow1TimerEvent+0xdc>)
 800bb9a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800bb9c:	4b18      	ldr	r3, [pc, #96]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bb9e:	4a1c      	ldr	r2, [pc, #112]	; (800bc10 <OnRxWindow1TimerEvent+0xe0>)
 800bba0:	2100      	movs	r1, #0
 800bba2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
 800bba4:	4b16      	ldr	r3, [pc, #88]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bba6:	4a17      	ldr	r2, [pc, #92]	; (800bc04 <OnRxWindow1TimerEvent+0xd4>)
 800bba8:	5c99      	ldrb	r1, [r3, r2]
 800bbaa:	4b15      	ldr	r3, [pc, #84]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bbac:	4a19      	ldr	r2, [pc, #100]	; (800bc14 <OnRxWindow1TimerEvent+0xe4>)
 800bbae:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800bbb0:	4a13      	ldr	r2, [pc, #76]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bbb2:	238e      	movs	r3, #142	; 0x8e
 800bbb4:	00db      	lsls	r3, r3, #3
 800bbb6:	58d3      	ldr	r3, [r2, r3]
 800bbb8:	22c8      	movs	r2, #200	; 0xc8
 800bbba:	5c9b      	ldrb	r3, [r3, r2]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d102      	bne.n	800bbc6 <OnRxWindow1TimerEvent+0x96>
    {
        Radio.Standby( );
 800bbc0:	4b15      	ldr	r3, [pc, #84]	; (800bc18 <OnRxWindow1TimerEvent+0xe8>)
 800bbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc4:	4798      	blx	r3
    }

    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
 800bbc6:	4a0e      	ldr	r2, [pc, #56]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bbc8:	238e      	movs	r3, #142	; 0x8e
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	58d3      	ldr	r3, [r2, r3]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	4a12      	ldr	r2, [pc, #72]	; (800bc1c <OnRxWindow1TimerEvent+0xec>)
 800bbd2:	4913      	ldr	r1, [pc, #76]	; (800bc20 <OnRxWindow1TimerEvent+0xf0>)
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f007 fa27 	bl	8013028 <RegionRxConfig>
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bbdc:	4a0c      	ldr	r2, [pc, #48]	; (800bc10 <OnRxWindow1TimerEvent+0xe0>)
 800bbde:	5c98      	ldrb	r0, [r3, r2]
 800bbe0:	4a07      	ldr	r2, [pc, #28]	; (800bc00 <OnRxWindow1TimerEvent+0xd0>)
 800bbe2:	238e      	movs	r3, #142	; 0x8e
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	58d3      	ldr	r3, [r2, r3]
 800bbe8:	22e0      	movs	r2, #224	; 0xe0
 800bbea:	589b      	ldr	r3, [r3, r2]
 800bbec:	0019      	movs	r1, r3
 800bbee:	f000 f901 	bl	800bdf4 <RxWindowSetup>
}
 800bbf2:	46c0      	nop			; (mov r8, r8)
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	b002      	add	sp, #8
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	20000a9c 	.word	0x20000a9c
 800bc00:	20000708 	.word	0x20000708
 800bc04:	0000046c 	.word	0x0000046c
 800bc08:	000003cf 	.word	0x000003cf
 800bc0c:	000003dd 	.word	0x000003dd
 800bc10:	000003de 	.word	0x000003de
 800bc14:	000003df 	.word	0x000003df
 800bc18:	08021b48 	.word	0x08021b48
 800bc1c:	20000b1c 	.word	0x20000b1c
 800bc20:	20000ad4 	.word	0x20000ad4

0800bc24 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bc2c:	4b31      	ldr	r3, [pc, #196]	; (800bcf4 <OnRxWindow2TimerEvent+0xd0>)
 800bc2e:	0018      	movs	r0, r3
 800bc30:	f009 fe54 	bl	80158dc <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800bc34:	4a30      	ldr	r2, [pc, #192]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc36:	238e      	movs	r3, #142	; 0x8e
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	58d2      	ldr	r2, [r2, r3]
 800bc3c:	2314      	movs	r3, #20
 800bc3e:	33ff      	adds	r3, #255	; 0xff
 800bc40:	5cd1      	ldrb	r1, [r2, r3]
 800bc42:	4a2d      	ldr	r2, [pc, #180]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc44:	23f8      	movs	r3, #248	; 0xf8
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800bc4a:	4a2b      	ldr	r2, [pc, #172]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc4c:	238e      	movs	r3, #142	; 0x8e
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	58d3      	ldr	r3, [r2, r3]
 800bc52:	22f8      	movs	r2, #248	; 0xf8
 800bc54:	5899      	ldr	r1, [r3, r2]
 800bc56:	4a28      	ldr	r2, [pc, #160]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc58:	23f9      	movs	r3, #249	; 0xf9
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800bc5e:	4a26      	ldr	r2, [pc, #152]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc60:	238e      	movs	r3, #142	; 0x8e
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	58d2      	ldr	r2, [r2, r3]
 800bc66:	2302      	movs	r3, #2
 800bc68:	33ff      	adds	r3, #255	; 0xff
 800bc6a:	5cd1      	ldrb	r1, [r2, r3]
 800bc6c:	4a22      	ldr	r2, [pc, #136]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc6e:	23fc      	movs	r3, #252	; 0xfc
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800bc74:	4a20      	ldr	r2, [pc, #128]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc76:	238e      	movs	r3, #142	; 0x8e
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	58d2      	ldr	r2, [r2, r3]
 800bc7c:	2316      	movs	r3, #22
 800bc7e:	33ff      	adds	r3, #255	; 0xff
 800bc80:	5cd1      	ldrb	r1, [r2, r3]
 800bc82:	4b1d      	ldr	r3, [pc, #116]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc84:	4a1d      	ldr	r2, [pc, #116]	; (800bcfc <OnRxWindow2TimerEvent+0xd8>)
 800bc86:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800bc88:	4b1b      	ldr	r3, [pc, #108]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc8a:	4a1d      	ldr	r2, [pc, #116]	; (800bd00 <OnRxWindow2TimerEvent+0xdc>)
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800bc90:	4a19      	ldr	r2, [pc, #100]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bc92:	238e      	movs	r3, #142	; 0x8e
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	58d3      	ldr	r3, [r2, r3]
 800bc98:	22c8      	movs	r2, #200	; 0xc8
 800bc9a:	5c9b      	ldrb	r3, [r3, r2]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d004      	beq.n	800bcaa <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800bca0:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bca2:	4a18      	ldr	r2, [pc, #96]	; (800bd04 <OnRxWindow2TimerEvent+0xe0>)
 800bca4:	2100      	movs	r1, #0
 800bca6:	5499      	strb	r1, [r3, r2]
 800bca8:	e003      	b.n	800bcb2 <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800bcaa:	4b13      	ldr	r3, [pc, #76]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bcac:	4a15      	ldr	r2, [pc, #84]	; (800bd04 <OnRxWindow2TimerEvent+0xe0>)
 800bcae:	2101      	movs	r1, #1
 800bcb0:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800bcb2:	4a11      	ldr	r2, [pc, #68]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bcb4:	238e      	movs	r3, #142	; 0x8e
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	58d3      	ldr	r3, [r2, r3]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	4a12      	ldr	r2, [pc, #72]	; (800bd08 <OnRxWindow2TimerEvent+0xe4>)
 800bcbe:	4913      	ldr	r1, [pc, #76]	; (800bd0c <OnRxWindow2TimerEvent+0xe8>)
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f007 f9b1 	bl	8013028 <RegionRxConfig>
 800bcc6:	1e03      	subs	r3, r0, #0
 800bcc8:	d00f      	beq.n	800bcea <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800bcca:	4b0b      	ldr	r3, [pc, #44]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bccc:	4a0d      	ldr	r2, [pc, #52]	; (800bd04 <OnRxWindow2TimerEvent+0xe0>)
 800bcce:	5c98      	ldrb	r0, [r3, r2]
 800bcd0:	4a09      	ldr	r2, [pc, #36]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bcd2:	238e      	movs	r3, #142	; 0x8e
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	58d3      	ldr	r3, [r2, r3]
 800bcd8:	22e0      	movs	r2, #224	; 0xe0
 800bcda:	589b      	ldr	r3, [r3, r2]
 800bcdc:	0019      	movs	r1, r3
 800bcde:	f000 f889 	bl	800bdf4 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800bce2:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <OnRxWindow2TimerEvent+0xd4>)
 800bce4:	4a0a      	ldr	r2, [pc, #40]	; (800bd10 <OnRxWindow2TimerEvent+0xec>)
 800bce6:	2101      	movs	r1, #1
 800bce8:	5499      	strb	r1, [r3, r2]
    }
}
 800bcea:	46c0      	nop			; (mov r8, r8)
 800bcec:	46bd      	mov	sp, r7
 800bcee:	b002      	add	sp, #8
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	20000ab4 	.word	0x20000ab4
 800bcf8:	20000708 	.word	0x20000708
 800bcfc:	000003f1 	.word	0x000003f1
 800bd00:	000003f3 	.word	0x000003f3
 800bd04:	000003f2 	.word	0x000003f2
 800bd08:	20000b1c 	.word	0x20000b1c
 800bd0c:	20000ae8 	.word	0x20000ae8
 800bd10:	0000046c 	.word	0x0000046c

0800bd14 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800bd14:	b590      	push	{r4, r7, lr}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	0004      	movs	r4, r0
 800bd1c:	0008      	movs	r0, r1
 800bd1e:	0011      	movs	r1, r2
 800bd20:	1dfb      	adds	r3, r7, #7
 800bd22:	1c22      	adds	r2, r4, #0
 800bd24:	701a      	strb	r2, [r3, #0]
 800bd26:	1dbb      	adds	r3, r7, #6
 800bd28:	1c02      	adds	r2, r0, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	1d7b      	adds	r3, r7, #5
 800bd2e:	1c0a      	adds	r2, r1, #0
 800bd30:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800bd32:	1dfb      	adds	r3, r7, #7
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2201      	movs	r2, #1
 800bd38:	4053      	eors	r3, r2
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800bd40:	1dbb      	adds	r3, r7, #6
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d10a      	bne.n	800bd5e <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f000 f80d 	bl	800bd68 <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800bd4e:	e006      	b.n	800bd5e <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800bd50:	1d7b      	adds	r3, r7, #5
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800bd58:	2000      	movs	r0, #0
 800bd5a:	f000 f805 	bl	800bd68 <OnAckTimeoutTimerEvent>
}
 800bd5e:	46c0      	nop			; (mov r8, r8)
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b003      	add	sp, #12
 800bd64:	bd90      	pop	{r4, r7, pc}
	...

0800bd68 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800bd70:	4b1c      	ldr	r3, [pc, #112]	; (800bde4 <OnAckTimeoutTimerEvent+0x7c>)
 800bd72:	0018      	movs	r0, r3
 800bd74:	f009 fdb2 	bl	80158dc <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800bd78:	4a1b      	ldr	r2, [pc, #108]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bd7a:	238e      	movs	r3, #142	; 0x8e
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	58d3      	ldr	r3, [r2, r3]
 800bd80:	4a1a      	ldr	r2, [pc, #104]	; (800bdec <OnAckTimeoutTimerEvent+0x84>)
 800bd82:	5c9b      	ldrb	r3, [r3, r2]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d007      	beq.n	800bd98 <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800bd88:	4a17      	ldr	r2, [pc, #92]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bd8a:	238e      	movs	r3, #142	; 0x8e
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	58d2      	ldr	r2, [r2, r3]
 800bd90:	2386      	movs	r3, #134	; 0x86
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	2101      	movs	r1, #1
 800bd96:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800bd98:	4a13      	ldr	r2, [pc, #76]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bd9a:	238e      	movs	r3, #142	; 0x8e
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	58d3      	ldr	r3, [r2, r3]
 800bda0:	22c8      	movs	r2, #200	; 0xc8
 800bda2:	5c9b      	ldrb	r3, [r3, r2]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d105      	bne.n	800bdb4 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800bda8:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bdaa:	4a11      	ldr	r2, [pc, #68]	; (800bdf0 <OnAckTimeoutTimerEvent+0x88>)
 800bdac:	5c99      	ldrb	r1, [r3, r2]
 800bdae:	2010      	movs	r0, #16
 800bdb0:	4301      	orrs	r1, r0
 800bdb2:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800bdb4:	4a0c      	ldr	r2, [pc, #48]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bdb6:	23d7      	movs	r3, #215	; 0xd7
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	58d3      	ldr	r3, [r2, r3]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00c      	beq.n	800bdda <OnAckTimeoutTimerEvent+0x72>
 800bdc0:	4a09      	ldr	r2, [pc, #36]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bdc2:	23d7      	movs	r3, #215	; 0xd7
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	58d3      	ldr	r3, [r2, r3]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d005      	beq.n	800bdda <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800bdce:	4a06      	ldr	r2, [pc, #24]	; (800bde8 <OnAckTimeoutTimerEvent+0x80>)
 800bdd0:	23d7      	movs	r3, #215	; 0xd7
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	58d3      	ldr	r3, [r2, r3]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	4798      	blx	r3
    }
}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	46bd      	mov	sp, r7
 800bdde:	b002      	add	sp, #8
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	46c0      	nop			; (mov r8, r8)
 800bde4:	20000afc 	.word	0x20000afc
 800bde8:	20000708 	.word	0x20000708
 800bdec:	00000219 	.word	0x00000219
 800bdf0:	0000046d 	.word	0x0000046d

0800bdf4 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	0002      	movs	r2, r0
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	1dfb      	adds	r3, r7, #7
 800be00:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800be02:	1dfb      	adds	r3, r7, #7
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2201      	movs	r2, #1
 800be08:	4053      	eors	r3, r2
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d005      	beq.n	800be1c <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800be10:	4b06      	ldr	r3, [pc, #24]	; (800be2c <RxWindowSetup+0x38>)
 800be12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	0010      	movs	r0, r2
 800be18:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800be1a:	e003      	b.n	800be24 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800be1c:	4b03      	ldr	r3, [pc, #12]	; (800be2c <RxWindowSetup+0x38>)
 800be1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be20:	2000      	movs	r0, #0
 800be22:	4798      	blx	r3
}
 800be24:	46c0      	nop			; (mov r8, r8)
 800be26:	46bd      	mov	sp, r7
 800be28:	b002      	add	sp, #8
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08021b48 	.word	0x08021b48

0800be30 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800be30:	b5b0      	push	{r4, r5, r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af02      	add	r7, sp, #8
 800be36:	0002      	movs	r2, r0
 800be38:	1dfb      	adds	r3, r7, #7
 800be3a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800be3c:	230f      	movs	r3, #15
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	2203      	movs	r2, #3
 800be42:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800be44:	4a4b      	ldr	r2, [pc, #300]	; (800bf74 <SwitchClass+0x144>)
 800be46:	238e      	movs	r3, #142	; 0x8e
 800be48:	00db      	lsls	r3, r3, #3
 800be4a:	58d3      	ldr	r3, [r2, r3]
 800be4c:	22c8      	movs	r2, #200	; 0xc8
 800be4e:	5c9b      	ldrb	r3, [r3, r2]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d058      	beq.n	800bf06 <SwitchClass+0xd6>
 800be54:	2b02      	cmp	r3, #2
 800be56:	d06c      	beq.n	800bf32 <SwitchClass+0x102>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d000      	beq.n	800be5e <SwitchClass+0x2e>
 800be5c:	e082      	b.n	800bf64 <SwitchClass+0x134>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_B )
 800be5e:	1dfb      	adds	r3, r7, #7
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d114      	bne.n	800be90 <SwitchClass+0x60>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800be66:	250f      	movs	r5, #15
 800be68:	197c      	adds	r4, r7, r5
 800be6a:	1dfb      	adds	r3, r7, #7
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	0018      	movs	r0, r3
 800be70:	f004 f893 	bl	800ff9a <LoRaMacClassBSwitchClass>
 800be74:	0003      	movs	r3, r0
 800be76:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800be78:	197b      	adds	r3, r7, r5
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d107      	bne.n	800be90 <SwitchClass+0x60>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800be80:	4a3c      	ldr	r2, [pc, #240]	; (800bf74 <SwitchClass+0x144>)
 800be82:	238e      	movs	r3, #142	; 0x8e
 800be84:	00db      	lsls	r3, r3, #3
 800be86:	58d3      	ldr	r3, [r2, r3]
 800be88:	1dfa      	adds	r2, r7, #7
 800be8a:	21c8      	movs	r1, #200	; 0xc8
 800be8c:	7812      	ldrb	r2, [r2, #0]
 800be8e:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800be90:	1dfb      	adds	r3, r7, #7
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b02      	cmp	r3, #2
 800be96:	d160      	bne.n	800bf5a <SwitchClass+0x12a>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800be98:	4a36      	ldr	r2, [pc, #216]	; (800bf74 <SwitchClass+0x144>)
 800be9a:	238e      	movs	r3, #142	; 0x8e
 800be9c:	00db      	lsls	r3, r3, #3
 800be9e:	58d3      	ldr	r3, [r2, r3]
 800bea0:	1dfa      	adds	r2, r7, #7
 800bea2:	21c8      	movs	r1, #200	; 0xc8
 800bea4:	7812      	ldrb	r2, [r2, #0]
 800bea6:	545a      	strb	r2, [r3, r1]

                // Set the NodeAckRequested indicator to default
                MacCtx.NvmCtx->NodeAckRequested = false;
 800bea8:	4a32      	ldr	r2, [pc, #200]	; (800bf74 <SwitchClass+0x144>)
 800beaa:	238e      	movs	r3, #142	; 0x8e
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	58d3      	ldr	r3, [r2, r3]
 800beb0:	4a31      	ldr	r2, [pc, #196]	; (800bf78 <SwitchClass+0x148>)
 800beb2:	2100      	movs	r1, #0
 800beb4:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800beb6:	4b31      	ldr	r3, [pc, #196]	; (800bf7c <SwitchClass+0x14c>)
 800beb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beba:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bebc:	4a2d      	ldr	r2, [pc, #180]	; (800bf74 <SwitchClass+0x144>)
 800bebe:	238e      	movs	r3, #142	; 0x8e
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	58d3      	ldr	r3, [r2, r3]
 800bec4:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800bec6:	4a2b      	ldr	r2, [pc, #172]	; (800bf74 <SwitchClass+0x144>)
 800bec8:	238e      	movs	r3, #142	; 0x8e
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	58d3      	ldr	r3, [r2, r3]
 800bece:	22fc      	movs	r2, #252	; 0xfc
 800bed0:	5c9b      	ldrb	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bed2:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800bed4:	4a27      	ldr	r2, [pc, #156]	; (800bf74 <SwitchClass+0x144>)
 800bed6:	238e      	movs	r3, #142	; 0x8e
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bedc:	22dc      	movs	r2, #220	; 0xdc
 800bede:	5c9c      	ldrb	r4, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800bee0:	4a24      	ldr	r2, [pc, #144]	; (800bf74 <SwitchClass+0x144>)
 800bee2:	238e      	movs	r3, #142	; 0x8e
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800bee8:	22d8      	movs	r2, #216	; 0xd8
 800beea:	589a      	ldr	r2, [r3, r2]
 800beec:	4b24      	ldr	r3, [pc, #144]	; (800bf80 <SwitchClass+0x150>)
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	0013      	movs	r3, r2
 800bef2:	0022      	movs	r2, r4
 800bef4:	f007 f874 	bl	8012fe0 <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindow2Config );
                OpenContinuousRx2Window( );
 800bef8:	f001 fb8e 	bl	800d618 <OpenContinuousRx2Window>

                status = LORAMAC_STATUS_OK;
 800befc:	230f      	movs	r3, #15
 800befe:	18fb      	adds	r3, r7, r3
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bf04:	e029      	b.n	800bf5a <SwitchClass+0x12a>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800bf06:	250f      	movs	r5, #15
 800bf08:	197c      	adds	r4, r7, r5
 800bf0a:	1dfb      	adds	r3, r7, #7
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	0018      	movs	r0, r3
 800bf10:	f004 f843 	bl	800ff9a <LoRaMacClassBSwitchClass>
 800bf14:	0003      	movs	r3, r0
 800bf16:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800bf18:	197b      	adds	r3, r7, r5
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d11e      	bne.n	800bf5e <SwitchClass+0x12e>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bf20:	4a14      	ldr	r2, [pc, #80]	; (800bf74 <SwitchClass+0x144>)
 800bf22:	238e      	movs	r3, #142	; 0x8e
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	58d3      	ldr	r3, [r2, r3]
 800bf28:	1dfa      	adds	r2, r7, #7
 800bf2a:	21c8      	movs	r1, #200	; 0xc8
 800bf2c:	7812      	ldrb	r2, [r2, #0]
 800bf2e:	545a      	strb	r2, [r3, r1]
            }
            break;
 800bf30:	e015      	b.n	800bf5e <SwitchClass+0x12e>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800bf32:	1dfb      	adds	r3, r7, #7
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d113      	bne.n	800bf62 <SwitchClass+0x132>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800bf3a:	4a0e      	ldr	r2, [pc, #56]	; (800bf74 <SwitchClass+0x144>)
 800bf3c:	238e      	movs	r3, #142	; 0x8e
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	58d3      	ldr	r3, [r2, r3]
 800bf42:	1dfa      	adds	r2, r7, #7
 800bf44:	21c8      	movs	r1, #200	; 0xc8
 800bf46:	7812      	ldrb	r2, [r2, #0]
 800bf48:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <SwitchClass+0x14c>)
 800bf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf4e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800bf50:	230f      	movs	r3, #15
 800bf52:	18fb      	adds	r3, r7, r3
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bf58:	e003      	b.n	800bf62 <SwitchClass+0x132>
            break;
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	e002      	b.n	800bf64 <SwitchClass+0x134>
            break;
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	e000      	b.n	800bf64 <SwitchClass+0x134>
            break;
 800bf62:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800bf64:	230f      	movs	r3, #15
 800bf66:	18fb      	adds	r3, r7, r3
 800bf68:	781b      	ldrb	r3, [r3, #0]
}
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	b004      	add	sp, #16
 800bf70:	bdb0      	pop	{r4, r5, r7, pc}
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	20000708 	.word	0x20000708
 800bf78:	00000219 	.word	0x00000219
 800bf7c:	08021b48 	.word	0x08021b48
 800bf80:	20000ae8 	.word	0x20000ae8

0800bf84 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	0002      	movs	r2, r0
 800bf8c:	1dfb      	adds	r3, r7, #7
 800bf8e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bf90:	4a1a      	ldr	r2, [pc, #104]	; (800bffc <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bf92:	238e      	movs	r3, #142	; 0x8e
 800bf94:	00db      	lsls	r3, r3, #3
 800bf96:	58d2      	ldr	r2, [r2, r3]
 800bf98:	2380      	movs	r3, #128	; 0x80
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	5cd2      	ldrb	r2, [r2, r3]
 800bf9e:	210c      	movs	r1, #12
 800bfa0:	187b      	adds	r3, r7, r1
 800bfa2:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800bfa4:	187b      	adds	r3, r7, r1
 800bfa6:	1dfa      	adds	r2, r7, #7
 800bfa8:	7812      	ldrb	r2, [r2, #0]
 800bfaa:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bfac:	187b      	adds	r3, r7, r1
 800bfae:	220c      	movs	r2, #12
 800bfb0:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800bfb2:	4a12      	ldr	r2, [pc, #72]	; (800bffc <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bfb4:	238e      	movs	r3, #142	; 0x8e
 800bfb6:	00db      	lsls	r3, r3, #3
 800bfb8:	58d2      	ldr	r2, [r2, r3]
 800bfba:	2316      	movs	r3, #22
 800bfbc:	33ff      	adds	r3, #255	; 0xff
 800bfbe:	5cd3      	ldrb	r3, [r2, r3]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d003      	beq.n	800bfcc <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	18fb      	adds	r3, r7, r3
 800bfc8:	220d      	movs	r2, #13
 800bfca:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800bfcc:	4a0b      	ldr	r2, [pc, #44]	; (800bffc <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800bfce:	238e      	movs	r3, #142	; 0x8e
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	58d3      	ldr	r3, [r2, r3]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	220c      	movs	r2, #12
 800bfd8:	18ba      	adds	r2, r7, r2
 800bfda:	0011      	movs	r1, r2
 800bfdc:	0018      	movs	r0, r3
 800bfde:	f006 ff50 	bl	8012e82 <RegionGetPhyParam>
 800bfe2:	0003      	movs	r3, r0
 800bfe4:	001a      	movs	r2, r3
 800bfe6:	2108      	movs	r1, #8
 800bfe8:	187b      	adds	r3, r7, r1
 800bfea:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800bfec:	187b      	adds	r3, r7, r1
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	b2db      	uxtb	r3, r3
}
 800bff2:	0018      	movs	r0, r3
 800bff4:	46bd      	mov	sp, r7
 800bff6:	b004      	add	sp, #16
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	46c0      	nop			; (mov r8, r8)
 800bffc:	20000708 	.word	0x20000708

0800c000 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800c000:	b5b0      	push	{r4, r5, r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	0004      	movs	r4, r0
 800c008:	0008      	movs	r0, r1
 800c00a:	0011      	movs	r1, r2
 800c00c:	1dfb      	adds	r3, r7, #7
 800c00e:	1c22      	adds	r2, r4, #0
 800c010:	701a      	strb	r2, [r3, #0]
 800c012:	1dbb      	adds	r3, r7, #6
 800c014:	1c02      	adds	r2, r0, #0
 800c016:	701a      	strb	r2, [r3, #0]
 800c018:	1d7b      	adds	r3, r7, #5
 800c01a:	1c0a      	adds	r2, r1, #0
 800c01c:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800c01e:	200e      	movs	r0, #14
 800c020:	0004      	movs	r4, r0
 800c022:	183b      	adds	r3, r7, r0
 800c024:	2200      	movs	r2, #0
 800c026:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800c028:	250c      	movs	r5, #12
 800c02a:	197b      	adds	r3, r7, r5
 800c02c:	2200      	movs	r2, #0
 800c02e:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c030:	1dbb      	adds	r3, r7, #6
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	b25b      	sxtb	r3, r3
 800c036:	0018      	movs	r0, r3
 800c038:	f7ff ffa4 	bl	800bf84 <GetMaxAppPayloadWithoutFOptsLength>
 800c03c:	0003      	movs	r3, r0
 800c03e:	001a      	movs	r2, r3
 800c040:	0020      	movs	r0, r4
 800c042:	183b      	adds	r3, r7, r0
 800c044:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800c046:	1dfb      	adds	r3, r7, #7
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b299      	uxth	r1, r3
 800c04c:	1d7b      	adds	r3, r7, #5
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	b29a      	uxth	r2, r3
 800c052:	197b      	adds	r3, r7, r5
 800c054:	188a      	adds	r2, r1, r2
 800c056:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c058:	197a      	adds	r2, r7, r5
 800c05a:	183b      	adds	r3, r7, r0
 800c05c:	8812      	ldrh	r2, [r2, #0]
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	429a      	cmp	r2, r3
 800c062:	d806      	bhi.n	800c072 <ValidatePayloadLength+0x72>
 800c064:	230c      	movs	r3, #12
 800c066:	18fb      	adds	r3, r7, r3
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	2bff      	cmp	r3, #255	; 0xff
 800c06c:	d801      	bhi.n	800c072 <ValidatePayloadLength+0x72>
    {
        return true;
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <ValidatePayloadLength+0x74>
    }
    return false;
 800c072:	2300      	movs	r3, #0
}
 800c074:	0018      	movs	r0, r3
 800c076:	46bd      	mov	sp, r7
 800c078:	b004      	add	sp, #16
 800c07a:	bdb0      	pop	{r4, r5, r7, pc}

0800c07c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800c080:	4b06      	ldr	r3, [pc, #24]	; (800c09c <SetMlmeScheduleUplinkIndication+0x20>)
 800c082:	4a07      	ldr	r2, [pc, #28]	; (800c0a0 <SetMlmeScheduleUplinkIndication+0x24>)
 800c084:	2106      	movs	r1, #6
 800c086:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <SetMlmeScheduleUplinkIndication+0x20>)
 800c08a:	4a06      	ldr	r2, [pc, #24]	; (800c0a4 <SetMlmeScheduleUplinkIndication+0x28>)
 800c08c:	5c99      	ldrb	r1, [r3, r2]
 800c08e:	2008      	movs	r0, #8
 800c090:	4301      	orrs	r1, r0
 800c092:	5499      	strb	r1, [r3, r2]
}
 800c094:	46c0      	nop			; (mov r8, r8)
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	46c0      	nop			; (mov r8, r8)
 800c09c:	20000708 	.word	0x20000708
 800c0a0:	00000454 	.word	0x00000454
 800c0a4:	0000046d 	.word	0x0000046d

0800c0a8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800c0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0aa:	b0a5      	sub	sp, #148	; 0x94
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	000c      	movs	r4, r1
 800c0b2:	0010      	movs	r0, r2
 800c0b4:	0019      	movs	r1, r3
 800c0b6:	1cfb      	adds	r3, r7, #3
 800c0b8:	1c22      	adds	r2, r4, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	1cbb      	adds	r3, r7, #2
 800c0be:	1c02      	adds	r2, r0, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
 800c0c2:	1c7b      	adds	r3, r7, #1
 800c0c4:	1c0a      	adds	r2, r1, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800c0c8:	236b      	movs	r3, #107	; 0x6b
 800c0ca:	18fb      	adds	r3, r7, r3
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800c0d0:	2387      	movs	r3, #135	; 0x87
 800c0d2:	18fb      	adds	r3, r7, r3
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c0d8:	2168      	movs	r1, #104	; 0x68
 800c0da:	187b      	adds	r3, r7, r1
 800c0dc:	2200      	movs	r2, #0
 800c0de:	701a      	strb	r2, [r3, #0]
 800c0e0:	187b      	adds	r3, r7, r1
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800c0e6:	f000 fd7a 	bl	800cbde <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800c0ea:	1cfb      	adds	r3, r7, #3
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	1cfa      	adds	r2, r7, #3
 800c0f0:	1c59      	adds	r1, r3, #1
 800c0f2:	7011      	strb	r1, [r2, #0]
 800c0f4:	001a      	movs	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	189b      	adds	r3, r3, r2
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b13      	cmp	r3, #19
 800c0fe:	d901      	bls.n	800c104 <ProcessMacCommands+0x5c>
 800c100:	f000 fd76 	bl	800cbf0 <ProcessMacCommands+0xb48>
 800c104:	009a      	lsls	r2, r3, #2
 800c106:	4be3      	ldr	r3, [pc, #908]	; (800c494 <ProcessMacCommands+0x3ec>)
 800c108:	18d3      	adds	r3, r2, r3
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c10e:	2003      	movs	r0, #3
 800c110:	f004 fbee 	bl	80108f0 <LoRaMacConfirmQueueIsCmdActive>
 800c114:	1e03      	subs	r3, r0, #0
 800c116:	d01c      	beq.n	800c152 <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c118:	2103      	movs	r1, #3
 800c11a:	2000      	movs	r0, #0
 800c11c:	f004 fb5a 	bl	80107d4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c120:	1cfb      	adds	r3, r7, #3
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	1cfa      	adds	r2, r7, #3
 800c126:	1c59      	adds	r1, r3, #1
 800c128:	7011      	strb	r1, [r2, #0]
 800c12a:	001a      	movs	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	189b      	adds	r3, r3, r2
 800c130:	7819      	ldrb	r1, [r3, #0]
 800c132:	4ad9      	ldr	r2, [pc, #868]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c134:	2389      	movs	r3, #137	; 0x89
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c13a:	1cfb      	adds	r3, r7, #3
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	1cfa      	adds	r2, r7, #3
 800c140:	1c59      	adds	r1, r3, #1
 800c142:	7011      	strb	r1, [r2, #0]
 800c144:	001a      	movs	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	189b      	adds	r3, r3, r2
 800c14a:	7819      	ldrb	r1, [r3, #0]
 800c14c:	4bd2      	ldr	r3, [pc, #840]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c14e:	4ad3      	ldr	r2, [pc, #844]	; (800c49c <ProcessMacCommands+0x3f4>)
 800c150:	5499      	strb	r1, [r3, r2]
 800c152:	2287      	movs	r2, #135	; 0x87
 800c154:	18bb      	adds	r3, r7, r2
 800c156:	18ba      	adds	r2, r7, r2
 800c158:	7812      	ldrb	r2, [r2, #0]
 800c15a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c15c:	f000 fd3f 	bl	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800c160:	2357      	movs	r3, #87	; 0x57
 800c162:	18fb      	adds	r3, r7, r3
 800c164:	2200      	movs	r2, #0
 800c166:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800c168:	2356      	movs	r3, #86	; 0x56
 800c16a:	18fb      	adds	r3, r7, r3
 800c16c:	2200      	movs	r2, #0
 800c16e:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800c170:	2355      	movs	r3, #85	; 0x55
 800c172:	18fb      	adds	r3, r7, r3
 800c174:	2200      	movs	r2, #0
 800c176:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800c178:	2354      	movs	r3, #84	; 0x54
 800c17a:	18fb      	adds	r3, r7, r3
 800c17c:	2200      	movs	r2, #0
 800c17e:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800c180:	2387      	movs	r3, #135	; 0x87
 800c182:	18fb      	adds	r3, r7, r3
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2201      	movs	r2, #1
 800c188:	4053      	eors	r3, r2
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d100      	bne.n	800c192 <ProcessMacCommands+0xea>
 800c190:	e0ae      	b.n	800c2f0 <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800c192:	2387      	movs	r3, #135	; 0x87
 800c194:	18fb      	adds	r3, r7, r3
 800c196:	2201      	movs	r2, #1
 800c198:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800c19a:	1cfb      	adds	r3, r7, #3
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	18d2      	adds	r2, r2, r3
 800c1a4:	2158      	movs	r1, #88	; 0x58
 800c1a6:	187b      	adds	r3, r7, r1
 800c1a8:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c1aa:	1cba      	adds	r2, r7, #2
 800c1ac:	1cfb      	adds	r3, r7, #3
 800c1ae:	7812      	ldrb	r2, [r2, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	187b      	adds	r3, r7, r1
 800c1bc:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800c1be:	4ab6      	ldr	r2, [pc, #728]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c1c0:	238e      	movs	r3, #142	; 0x8e
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	58d3      	ldr	r3, [r2, r3]
 800c1c6:	22ca      	movs	r2, #202	; 0xca
 800c1c8:	5c9a      	ldrb	r2, [r3, r2]
 800c1ca:	187b      	adds	r3, r7, r1
 800c1cc:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c1ce:	4ab2      	ldr	r2, [pc, #712]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c1d0:	238e      	movs	r3, #142	; 0x8e
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	58d2      	ldr	r2, [r2, r3]
 800c1d6:	2380      	movs	r3, #128	; 0x80
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	5cd2      	ldrb	r2, [r2, r3]
 800c1dc:	187b      	adds	r3, r7, r1
 800c1de:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c1e0:	4aad      	ldr	r2, [pc, #692]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c1e2:	238e      	movs	r3, #142	; 0x8e
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	58d3      	ldr	r3, [r2, r3]
 800c1e8:	22d5      	movs	r2, #213	; 0xd5
 800c1ea:	569a      	ldrsb	r2, [r3, r2]
 800c1ec:	187b      	adds	r3, r7, r1
 800c1ee:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800c1f0:	4aa9      	ldr	r2, [pc, #676]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c1f2:	238e      	movs	r3, #142	; 0x8e
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	58d3      	ldr	r3, [r2, r3]
 800c1f8:	22d4      	movs	r2, #212	; 0xd4
 800c1fa:	569a      	ldrsb	r2, [r3, r2]
 800c1fc:	187b      	adds	r3, r7, r1
 800c1fe:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800c200:	4aa5      	ldr	r2, [pc, #660]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c202:	238e      	movs	r3, #142	; 0x8e
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	58d3      	ldr	r3, [r2, r3]
 800c208:	22f4      	movs	r2, #244	; 0xf4
 800c20a:	5c9a      	ldrb	r2, [r3, r2]
 800c20c:	000d      	movs	r5, r1
 800c20e:	197b      	adds	r3, r7, r5
 800c210:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800c212:	4aa1      	ldr	r2, [pc, #644]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c214:	238e      	movs	r3, #142	; 0x8e
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	58d1      	ldr	r1, [r2, r3]
 800c21a:	197b      	adds	r3, r7, r5
 800c21c:	2288      	movs	r2, #136	; 0x88
 800c21e:	0092      	lsls	r2, r2, #2
 800c220:	588a      	ldr	r2, [r1, r2]
 800c222:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800c224:	4a9c      	ldr	r2, [pc, #624]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c226:	238e      	movs	r3, #142	; 0x8e
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	58d3      	ldr	r3, [r2, r3]
 800c22c:	7818      	ldrb	r0, [r3, #0]
 800c22e:	2356      	movs	r3, #86	; 0x56
 800c230:	18fc      	adds	r4, r7, r3
 800c232:	2357      	movs	r3, #87	; 0x57
 800c234:	18fa      	adds	r2, r7, r3
 800c236:	1979      	adds	r1, r7, r5
 800c238:	2354      	movs	r3, #84	; 0x54
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	2355      	movs	r3, #85	; 0x55
 800c240:	18fb      	adds	r3, r7, r3
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	0023      	movs	r3, r4
 800c246:	f006 ff24 	bl	8013092 <RegionLinkAdrReq>
 800c24a:	0003      	movs	r3, r0
 800c24c:	001a      	movs	r2, r3
 800c24e:	216b      	movs	r1, #107	; 0x6b
 800c250:	187b      	adds	r3, r7, r1
 800c252:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800c254:	187b      	adds	r3, r7, r1
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	001a      	movs	r2, r3
 800c25a:	2307      	movs	r3, #7
 800c25c:	4013      	ands	r3, r2
 800c25e:	2b07      	cmp	r3, #7
 800c260:	d11c      	bne.n	800c29c <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800c262:	4a8d      	ldr	r2, [pc, #564]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c264:	238e      	movs	r3, #142	; 0x8e
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	58d3      	ldr	r3, [r2, r3]
 800c26a:	2257      	movs	r2, #87	; 0x57
 800c26c:	18ba      	adds	r2, r7, r2
 800c26e:	2100      	movs	r1, #0
 800c270:	5651      	ldrsb	r1, [r2, r1]
 800c272:	22d5      	movs	r2, #213	; 0xd5
 800c274:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800c276:	4a88      	ldr	r2, [pc, #544]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c278:	238e      	movs	r3, #142	; 0x8e
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	58d3      	ldr	r3, [r2, r3]
 800c27e:	2256      	movs	r2, #86	; 0x56
 800c280:	18ba      	adds	r2, r7, r2
 800c282:	2100      	movs	r1, #0
 800c284:	5651      	ldrsb	r1, [r2, r1]
 800c286:	22d4      	movs	r2, #212	; 0xd4
 800c288:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c28a:	4a83      	ldr	r2, [pc, #524]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c28c:	238e      	movs	r3, #142	; 0x8e
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	58d3      	ldr	r3, [r2, r3]
 800c292:	2255      	movs	r2, #85	; 0x55
 800c294:	18ba      	adds	r2, r7, r2
 800c296:	7811      	ldrb	r1, [r2, #0]
 800c298:	22f4      	movs	r2, #244	; 0xf4
 800c29a:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c29c:	2386      	movs	r3, #134	; 0x86
 800c29e:	18fb      	adds	r3, r7, r3
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	701a      	strb	r2, [r3, #0]
 800c2a4:	e00c      	b.n	800c2c0 <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c2a6:	236b      	movs	r3, #107	; 0x6b
 800c2a8:	18fb      	adds	r3, r7, r3
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	0019      	movs	r1, r3
 800c2ae:	2003      	movs	r0, #3
 800c2b0:	f004 f834 	bl	801031c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c2b4:	2186      	movs	r1, #134	; 0x86
 800c2b6:	187b      	adds	r3, r7, r1
 800c2b8:	781a      	ldrb	r2, [r3, #0]
 800c2ba:	187b      	adds	r3, r7, r1
 800c2bc:	3201      	adds	r2, #1
 800c2be:	701a      	strb	r2, [r3, #0]
 800c2c0:	2354      	movs	r3, #84	; 0x54
 800c2c2:	18fb      	adds	r3, r7, r3
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2105      	movs	r1, #5
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7f3 ff25 	bl	8000118 <__udivsi3>
 800c2ce:	0003      	movs	r3, r0
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2286      	movs	r2, #134	; 0x86
 800c2d4:	18ba      	adds	r2, r7, r2
 800c2d6:	7812      	ldrb	r2, [r2, #0]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d3e4      	bcc.n	800c2a6 <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800c2dc:	2354      	movs	r3, #84	; 0x54
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	781a      	ldrb	r2, [r3, #0]
 800c2e2:	1cfb      	adds	r3, r7, #3
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	18d3      	adds	r3, r2, r3
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	1cfb      	adds	r3, r7, #3
 800c2ec:	3a01      	subs	r2, #1
 800c2ee:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c2f0:	46c0      	nop			; (mov r8, r8)
 800c2f2:	f000 fc74 	bl	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800c2f6:	1cfb      	adds	r3, r7, #3
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	1cfa      	adds	r2, r7, #3
 800c2fc:	1c59      	adds	r1, r3, #1
 800c2fe:	7011      	strb	r1, [r2, #0]
 800c300:	001a      	movs	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	189b      	adds	r3, r3, r2
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	4963      	ldr	r1, [pc, #396]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c30a:	228e      	movs	r2, #142	; 0x8e
 800c30c:	00d2      	lsls	r2, r2, #3
 800c30e:	588a      	ldr	r2, [r1, r2]
 800c310:	210f      	movs	r1, #15
 800c312:	400b      	ands	r3, r1
 800c314:	b2d9      	uxtb	r1, r3
 800c316:	2312      	movs	r3, #18
 800c318:	33ff      	adds	r3, #255	; 0xff
 800c31a:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800c31c:	4a5e      	ldr	r2, [pc, #376]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c31e:	238e      	movs	r3, #142	; 0x8e
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	58d2      	ldr	r2, [r2, r3]
 800c324:	2312      	movs	r3, #18
 800c326:	33ff      	adds	r3, #255	; 0xff
 800c328:	5cd3      	ldrb	r3, [r2, r3]
 800c32a:	001a      	movs	r2, r3
 800c32c:	2301      	movs	r3, #1
 800c32e:	4093      	lsls	r3, r2
 800c330:	0019      	movs	r1, r3
 800c332:	4a59      	ldr	r2, [pc, #356]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c334:	238e      	movs	r3, #142	; 0x8e
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	58d2      	ldr	r2, [r2, r3]
 800c33a:	b289      	uxth	r1, r1
 800c33c:	2387      	movs	r3, #135	; 0x87
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c342:	2368      	movs	r3, #104	; 0x68
 800c344:	18fb      	adds	r3, r7, r3
 800c346:	2200      	movs	r2, #0
 800c348:	0019      	movs	r1, r3
 800c34a:	2004      	movs	r0, #4
 800c34c:	f003 ffe6 	bl	801031c <LoRaMacCommandsAddCmd>
 800c350:	2287      	movs	r2, #135	; 0x87
 800c352:	18bb      	adds	r3, r7, r2
 800c354:	18ba      	adds	r2, r7, r2
 800c356:	7812      	ldrb	r2, [r2, #0]
 800c358:	701a      	strb	r2, [r3, #0]
                break;
 800c35a:	f000 fc40 	bl	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800c35e:	246b      	movs	r4, #107	; 0x6b
 800c360:	193b      	adds	r3, r7, r4
 800c362:	2207      	movs	r2, #7
 800c364:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c366:	1cfb      	adds	r3, r7, #3
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	18d3      	adds	r3, r2, r3
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	091b      	lsrs	r3, r3, #4
 800c372:	b2db      	uxtb	r3, r3
 800c374:	b25b      	sxtb	r3, r3
 800c376:	2207      	movs	r2, #7
 800c378:	4013      	ands	r3, r2
 800c37a:	b25a      	sxtb	r2, r3
 800c37c:	204c      	movs	r0, #76	; 0x4c
 800c37e:	183b      	adds	r3, r7, r0
 800c380:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c382:	1cfb      	adds	r3, r7, #3
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	18d3      	adds	r3, r2, r3
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	b25b      	sxtb	r3, r3
 800c38e:	220f      	movs	r2, #15
 800c390:	4013      	ands	r3, r2
 800c392:	b25a      	sxtb	r2, r3
 800c394:	183b      	adds	r3, r7, r0
 800c396:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800c398:	1cfb      	adds	r3, r7, #3
 800c39a:	781a      	ldrb	r2, [r3, #0]
 800c39c:	1cfb      	adds	r3, r7, #3
 800c39e:	3201      	adds	r2, #1
 800c3a0:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c3a2:	1cfb      	adds	r3, r7, #3
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	1cfa      	adds	r2, r7, #3
 800c3a8:	1c59      	adds	r1, r3, #1
 800c3aa:	7011      	strb	r1, [r2, #0]
 800c3ac:	001a      	movs	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	189b      	adds	r3, r3, r2
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	001a      	movs	r2, r3
 800c3b6:	183b      	adds	r3, r7, r0
 800c3b8:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c3ba:	1cfb      	adds	r3, r7, #3
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	1cfa      	adds	r2, r7, #3
 800c3c0:	1c59      	adds	r1, r3, #1
 800c3c2:	7011      	strb	r1, [r2, #0]
 800c3c4:	001a      	movs	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	189b      	adds	r3, r3, r2
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	021a      	lsls	r2, r3, #8
 800c3ce:	183b      	adds	r3, r7, r0
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	431a      	orrs	r2, r3
 800c3d4:	183b      	adds	r3, r7, r0
 800c3d6:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c3d8:	1cfb      	adds	r3, r7, #3
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	1cfa      	adds	r2, r7, #3
 800c3de:	1c59      	adds	r1, r3, #1
 800c3e0:	7011      	strb	r1, [r2, #0]
 800c3e2:	001a      	movs	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	189b      	adds	r3, r3, r2
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	041a      	lsls	r2, r3, #16
 800c3ec:	0001      	movs	r1, r0
 800c3ee:	187b      	adds	r3, r7, r1
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	187b      	adds	r3, r7, r1
 800c3f6:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800c3f8:	187b      	adds	r3, r7, r1
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2264      	movs	r2, #100	; 0x64
 800c3fe:	435a      	muls	r2, r3
 800c400:	187b      	adds	r3, r7, r1
 800c402:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800c404:	4a24      	ldr	r2, [pc, #144]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c406:	238e      	movs	r3, #142	; 0x8e
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	58d3      	ldr	r3, [r2, r3]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	187a      	adds	r2, r7, r1
 800c410:	0011      	movs	r1, r2
 800c412:	0018      	movs	r0, r3
 800c414:	f006 fe5b 	bl	80130ce <RegionRxParamSetupReq>
 800c418:	0003      	movs	r3, r0
 800c41a:	001a      	movs	r2, r3
 800c41c:	193b      	adds	r3, r7, r4
 800c41e:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800c420:	193b      	adds	r3, r7, r4
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	001a      	movs	r2, r3
 800c426:	2307      	movs	r3, #7
 800c428:	4013      	ands	r3, r2
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	d11c      	bne.n	800c468 <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c42e:	204c      	movs	r0, #76	; 0x4c
 800c430:	183b      	adds	r3, r7, r0
 800c432:	2100      	movs	r1, #0
 800c434:	5659      	ldrsb	r1, [r3, r1]
 800c436:	4a18      	ldr	r2, [pc, #96]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c438:	238e      	movs	r3, #142	; 0x8e
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	58d3      	ldr	r3, [r2, r3]
 800c43e:	b2c9      	uxtb	r1, r1
 800c440:	22fc      	movs	r2, #252	; 0xfc
 800c442:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c444:	4a14      	ldr	r2, [pc, #80]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c446:	238e      	movs	r3, #142	; 0x8e
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	58d2      	ldr	r2, [r2, r3]
 800c44c:	183b      	adds	r3, r7, r0
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	21f8      	movs	r1, #248	; 0xf8
 800c452:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c454:	183b      	adds	r3, r7, r0
 800c456:	2101      	movs	r1, #1
 800c458:	5659      	ldrsb	r1, [r3, r1]
 800c45a:	4a0f      	ldr	r2, [pc, #60]	; (800c498 <ProcessMacCommands+0x3f0>)
 800c45c:	238e      	movs	r3, #142	; 0x8e
 800c45e:	00db      	lsls	r3, r3, #3
 800c460:	58d3      	ldr	r3, [r2, r3]
 800c462:	b2c9      	uxtb	r1, r1
 800c464:	22f5      	movs	r2, #245	; 0xf5
 800c466:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800c468:	236b      	movs	r3, #107	; 0x6b
 800c46a:	18fb      	adds	r3, r7, r3
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	2168      	movs	r1, #104	; 0x68
 800c470:	187b      	adds	r3, r7, r1
 800c472:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c474:	187b      	adds	r3, r7, r1
 800c476:	2201      	movs	r2, #1
 800c478:	0019      	movs	r1, r3
 800c47a:	2005      	movs	r0, #5
 800c47c:	f003 ff4e 	bl	801031c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c480:	f7ff fdfc 	bl	800c07c <SetMlmeScheduleUplinkIndication>
                break;
 800c484:	46c0      	nop			; (mov r8, r8)
 800c486:	2287      	movs	r2, #135	; 0x87
 800c488:	18bb      	adds	r3, r7, r2
 800c48a:	18ba      	adds	r2, r7, r2
 800c48c:	7812      	ldrb	r2, [r2, #0]
 800c48e:	701a      	strb	r2, [r3, #0]
 800c490:	e3a5      	b.n	800cbde <ProcessMacCommands+0xb36>
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	0802178c 	.word	0x0802178c
 800c498:	20000708 	.word	0x20000708
 800c49c:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c4a0:	2385      	movs	r3, #133	; 0x85
 800c4a2:	18fb      	adds	r3, r7, r3
 800c4a4:	22ff      	movs	r2, #255	; 0xff
 800c4a6:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c4a8:	4ac5      	ldr	r2, [pc, #788]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c4aa:	23d7      	movs	r3, #215	; 0xd7
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	58d3      	ldr	r3, [r2, r3]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d010      	beq.n	800c4d6 <ProcessMacCommands+0x42e>
 800c4b4:	4ac2      	ldr	r2, [pc, #776]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c4b6:	23d7      	movs	r3, #215	; 0xd7
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	58d3      	ldr	r3, [r2, r3]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d009      	beq.n	800c4d6 <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c4c2:	4abf      	ldr	r2, [pc, #764]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c4c4:	23d7      	movs	r3, #215	; 0xd7
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	58d3      	ldr	r3, [r2, r3]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2285      	movs	r2, #133	; 0x85
 800c4ce:	18bc      	adds	r4, r7, r2
 800c4d0:	4798      	blx	r3
 800c4d2:	0003      	movs	r3, r0
 800c4d4:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800c4d6:	2168      	movs	r1, #104	; 0x68
 800c4d8:	187b      	adds	r3, r7, r1
 800c4da:	2285      	movs	r2, #133	; 0x85
 800c4dc:	18ba      	adds	r2, r7, r2
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c4e2:	1c7b      	adds	r3, r7, #1
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	223f      	movs	r2, #63	; 0x3f
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	187b      	adds	r3, r7, r1
 800c4ee:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c4f0:	187b      	adds	r3, r7, r1
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	0019      	movs	r1, r3
 800c4f6:	2006      	movs	r0, #6
 800c4f8:	f003 ff10 	bl	801031c <LoRaMacCommandsAddCmd>
 800c4fc:	2287      	movs	r2, #135	; 0x87
 800c4fe:	18bb      	adds	r3, r7, r2
 800c500:	18ba      	adds	r2, r7, r2
 800c502:	7812      	ldrb	r2, [r2, #0]
 800c504:	701a      	strb	r2, [r3, #0]
                break;
 800c506:	e36a      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800c508:	246b      	movs	r4, #107	; 0x6b
 800c50a:	193b      	adds	r3, r7, r4
 800c50c:	2203      	movs	r2, #3
 800c50e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800c510:	1cfb      	adds	r3, r7, #3
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	1cfa      	adds	r2, r7, #3
 800c516:	1c59      	adds	r1, r3, #1
 800c518:	7011      	strb	r1, [r2, #0]
 800c51a:	001a      	movs	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	189b      	adds	r3, r3, r2
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b25a      	sxtb	r2, r3
 800c524:	2544      	movs	r5, #68	; 0x44
 800c526:	197b      	adds	r3, r7, r5
 800c528:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800c52a:	197b      	adds	r3, r7, r5
 800c52c:	2038      	movs	r0, #56	; 0x38
 800c52e:	183a      	adds	r2, r7, r0
 800c530:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c532:	1cfb      	adds	r3, r7, #3
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	1cfa      	adds	r2, r7, #3
 800c538:	1c59      	adds	r1, r3, #1
 800c53a:	7011      	strb	r1, [r2, #0]
 800c53c:	001a      	movs	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	189b      	adds	r3, r3, r2
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	001a      	movs	r2, r3
 800c546:	183b      	adds	r3, r7, r0
 800c548:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c54a:	1cfb      	adds	r3, r7, #3
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	1cfa      	adds	r2, r7, #3
 800c550:	1c59      	adds	r1, r3, #1
 800c552:	7011      	strb	r1, [r2, #0]
 800c554:	001a      	movs	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	189b      	adds	r3, r3, r2
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	021a      	lsls	r2, r3, #8
 800c55e:	183b      	adds	r3, r7, r0
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	431a      	orrs	r2, r3
 800c564:	183b      	adds	r3, r7, r0
 800c566:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c568:	1cfb      	adds	r3, r7, #3
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	1cfa      	adds	r2, r7, #3
 800c56e:	1c59      	adds	r1, r3, #1
 800c570:	7011      	strb	r1, [r2, #0]
 800c572:	001a      	movs	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	189b      	adds	r3, r3, r2
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	041a      	lsls	r2, r3, #16
 800c57c:	183b      	adds	r3, r7, r0
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	431a      	orrs	r2, r3
 800c582:	183b      	adds	r3, r7, r0
 800c584:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800c586:	183b      	adds	r3, r7, r0
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2264      	movs	r2, #100	; 0x64
 800c58c:	435a      	muls	r2, r3
 800c58e:	183b      	adds	r3, r7, r0
 800c590:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800c592:	183b      	adds	r3, r7, r0
 800c594:	2200      	movs	r2, #0
 800c596:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800c598:	1cfb      	adds	r3, r7, #3
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	1cfa      	adds	r2, r7, #3
 800c59e:	1c59      	adds	r1, r3, #1
 800c5a0:	7011      	strb	r1, [r2, #0]
 800c5a2:	001a      	movs	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	189b      	adds	r3, r3, r2
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b25a      	sxtb	r2, r3
 800c5ac:	183b      	adds	r3, r7, r0
 800c5ae:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800c5b0:	4a83      	ldr	r2, [pc, #524]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c5b2:	238e      	movs	r3, #142	; 0x8e
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	58d3      	ldr	r3, [r2, r3]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	197a      	adds	r2, r7, r5
 800c5bc:	0011      	movs	r1, r2
 800c5be:	0018      	movs	r0, r3
 800c5c0:	f006 fd9b 	bl	80130fa <RegionNewChannelReq>
 800c5c4:	0003      	movs	r3, r0
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	193b      	adds	r3, r7, r4
 800c5ca:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800c5cc:	193b      	adds	r3, r7, r4
 800c5ce:	781a      	ldrb	r2, [r3, #0]
 800c5d0:	2168      	movs	r1, #104	; 0x68
 800c5d2:	187b      	adds	r3, r7, r1
 800c5d4:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c5d6:	187b      	adds	r3, r7, r1
 800c5d8:	2201      	movs	r2, #1
 800c5da:	0019      	movs	r1, r3
 800c5dc:	2007      	movs	r0, #7
 800c5de:	f003 fe9d 	bl	801031c <LoRaMacCommandsAddCmd>
                break;
 800c5e2:	46c0      	nop			; (mov r8, r8)
 800c5e4:	2287      	movs	r2, #135	; 0x87
 800c5e6:	18bb      	adds	r3, r7, r2
 800c5e8:	18ba      	adds	r2, r7, r2
 800c5ea:	7812      	ldrb	r2, [r2, #0]
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	e2f6      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c5f0:	1cfb      	adds	r3, r7, #3
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	1cfa      	adds	r2, r7, #3
 800c5f6:	1c59      	adds	r1, r3, #1
 800c5f8:	7011      	strb	r1, [r2, #0]
 800c5fa:	001a      	movs	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	189b      	adds	r3, r3, r2
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	2084      	movs	r0, #132	; 0x84
 800c604:	183b      	adds	r3, r7, r0
 800c606:	210f      	movs	r1, #15
 800c608:	400a      	ands	r2, r1
 800c60a:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800c60c:	183b      	adds	r3, r7, r0
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d105      	bne.n	800c620 <ProcessMacCommands+0x578>
                {
                    delay++;
 800c614:	2184      	movs	r1, #132	; 0x84
 800c616:	187b      	adds	r3, r7, r1
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	187b      	adds	r3, r7, r1
 800c61c:	3201      	adds	r2, #1
 800c61e:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800c620:	2384      	movs	r3, #132	; 0x84
 800c622:	18fb      	adds	r3, r7, r3
 800c624:	781a      	ldrb	r2, [r3, #0]
 800c626:	0013      	movs	r3, r2
 800c628:	015b      	lsls	r3, r3, #5
 800c62a:	1a9b      	subs	r3, r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	189b      	adds	r3, r3, r2
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	0019      	movs	r1, r3
 800c634:	4a62      	ldr	r2, [pc, #392]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c636:	238e      	movs	r3, #142	; 0x8e
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	58d3      	ldr	r3, [r2, r3]
 800c63c:	22e4      	movs	r2, #228	; 0xe4
 800c63e:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800c640:	4a5f      	ldr	r2, [pc, #380]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c642:	238e      	movs	r3, #142	; 0x8e
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	58d3      	ldr	r3, [r2, r3]
 800c648:	22e4      	movs	r2, #228	; 0xe4
 800c64a:	589a      	ldr	r2, [r3, r2]
 800c64c:	495c      	ldr	r1, [pc, #368]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c64e:	238e      	movs	r3, #142	; 0x8e
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	58cb      	ldr	r3, [r1, r3]
 800c654:	21fa      	movs	r1, #250	; 0xfa
 800c656:	0089      	lsls	r1, r1, #2
 800c658:	468c      	mov	ip, r1
 800c65a:	4462      	add	r2, ip
 800c65c:	21e8      	movs	r1, #232	; 0xe8
 800c65e:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c660:	2368      	movs	r3, #104	; 0x68
 800c662:	18fb      	adds	r3, r7, r3
 800c664:	2200      	movs	r2, #0
 800c666:	0019      	movs	r1, r3
 800c668:	2008      	movs	r0, #8
 800c66a:	f003 fe57 	bl	801031c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c66e:	f7ff fd05 	bl	800c07c <SetMlmeScheduleUplinkIndication>
 800c672:	2287      	movs	r2, #135	; 0x87
 800c674:	18bb      	adds	r3, r7, r2
 800c676:	18ba      	adds	r2, r7, r2
 800c678:	7812      	ldrb	r2, [r2, #0]
 800c67a:	701a      	strb	r2, [r3, #0]
                break;
 800c67c:	e2af      	b.n	800cbde <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c67e:	1cfb      	adds	r3, r7, #3
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	1cfa      	adds	r2, r7, #3
 800c684:	1c59      	adds	r1, r3, #1
 800c686:	7011      	strb	r1, [r2, #0]
 800c688:	001a      	movs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	189a      	adds	r2, r3, r2
 800c68e:	2176      	movs	r1, #118	; 0x76
 800c690:	187b      	adds	r3, r7, r1
 800c692:	7812      	ldrb	r2, [r2, #0]
 800c694:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800c696:	2034      	movs	r0, #52	; 0x34
 800c698:	183b      	adds	r3, r7, r0
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c69e:	183b      	adds	r3, r7, r0
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c6a4:	187b      	adds	r3, r7, r1
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	d003      	beq.n	800c6b6 <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c6ae:	2334      	movs	r3, #52	; 0x34
 800c6b0:	18fb      	adds	r3, r7, r3
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c6b6:	2376      	movs	r3, #118	; 0x76
 800c6b8:	18fb      	adds	r3, r7, r3
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2210      	movs	r2, #16
 800c6be:	4013      	ands	r3, r2
 800c6c0:	d003      	beq.n	800c6ca <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c6c2:	2334      	movs	r3, #52	; 0x34
 800c6c4:	18fb      	adds	r3, r7, r3
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c6ca:	2376      	movs	r3, #118	; 0x76
 800c6cc:	18fb      	adds	r3, r7, r3
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	220f      	movs	r2, #15
 800c6d2:	4013      	ands	r3, r2
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	2134      	movs	r1, #52	; 0x34
 800c6d8:	187b      	adds	r3, r7, r1
 800c6da:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800c6dc:	4a38      	ldr	r2, [pc, #224]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c6de:	238e      	movs	r3, #142	; 0x8e
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	58d3      	ldr	r3, [r2, r3]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	187a      	adds	r2, r7, r1
 800c6e8:	0011      	movs	r1, r2
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f006 fd1b 	bl	8013126 <RegionTxParamSetupReq>
 800c6f0:	0003      	movs	r3, r0
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	d05c      	beq.n	800c7b0 <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c6f6:	4a32      	ldr	r2, [pc, #200]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c6f8:	238e      	movs	r3, #142	; 0x8e
 800c6fa:	00db      	lsls	r3, r3, #3
 800c6fc:	58d2      	ldr	r2, [r2, r3]
 800c6fe:	2034      	movs	r0, #52	; 0x34
 800c700:	183b      	adds	r3, r7, r0
 800c702:	7819      	ldrb	r1, [r3, #0]
 800c704:	2380      	movs	r3, #128	; 0x80
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c70a:	4a2d      	ldr	r2, [pc, #180]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c70c:	238e      	movs	r3, #142	; 0x8e
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	58d2      	ldr	r2, [r2, r3]
 800c712:	183b      	adds	r3, r7, r0
 800c714:	7859      	ldrb	r1, [r3, #1]
 800c716:	2302      	movs	r3, #2
 800c718:	33ff      	adds	r3, #255	; 0xff
 800c71a:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c71c:	183b      	adds	r3, r7, r0
 800c71e:	789b      	ldrb	r3, [r3, #2]
 800c720:	001a      	movs	r2, r3
 800c722:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <ProcessMacCommands+0x71c>)
 800c724:	5c99      	ldrb	r1, [r3, r2]
 800c726:	4a26      	ldr	r2, [pc, #152]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c728:	238e      	movs	r3, #142	; 0x8e
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	58d4      	ldr	r4, [r2, r3]
 800c72e:	0008      	movs	r0, r1
 800c730:	f7f4 f9d4 	bl	8000adc <__aeabi_ui2f>
 800c734:	1c02      	adds	r2, r0, #0
 800c736:	2382      	movs	r3, #130	; 0x82
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c73c:	2130      	movs	r1, #48	; 0x30
 800c73e:	187b      	adds	r3, r7, r1
 800c740:	2201      	movs	r2, #1
 800c742:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c744:	4a1e      	ldr	r2, [pc, #120]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c746:	238e      	movs	r3, #142	; 0x8e
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	58d2      	ldr	r2, [r2, r3]
 800c74c:	2380      	movs	r3, #128	; 0x80
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	5cd2      	ldrb	r2, [r2, r3]
 800c752:	187b      	adds	r3, r7, r1
 800c754:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800c756:	4a1a      	ldr	r2, [pc, #104]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c758:	238e      	movs	r3, #142	; 0x8e
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	58d3      	ldr	r3, [r2, r3]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	187a      	adds	r2, r7, r1
 800c762:	0011      	movs	r1, r2
 800c764:	0018      	movs	r0, r3
 800c766:	f006 fb8c 	bl	8012e82 <RegionGetPhyParam>
 800c76a:	0003      	movs	r3, r0
 800c76c:	001a      	movs	r2, r3
 800c76e:	212c      	movs	r1, #44	; 0x2c
 800c770:	187b      	adds	r3, r7, r1
 800c772:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c774:	187b      	adds	r3, r7, r1
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	b259      	sxtb	r1, r3
 800c77a:	4a11      	ldr	r2, [pc, #68]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c77c:	238e      	movs	r3, #142	; 0x8e
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	58d3      	ldr	r3, [r2, r3]
 800c782:	22d5      	movs	r2, #213	; 0xd5
 800c784:	5698      	ldrsb	r0, [r3, r2]
 800c786:	4a0e      	ldr	r2, [pc, #56]	; (800c7c0 <ProcessMacCommands+0x718>)
 800c788:	238e      	movs	r3, #142	; 0x8e
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	58d3      	ldr	r3, [r2, r3]
 800c78e:	1c04      	adds	r4, r0, #0
 800c790:	1c08      	adds	r0, r1, #0
 800c792:	b241      	sxtb	r1, r0
 800c794:	b262      	sxtb	r2, r4
 800c796:	4291      	cmp	r1, r2
 800c798:	da00      	bge.n	800c79c <ProcessMacCommands+0x6f4>
 800c79a:	1c20      	adds	r0, r4, #0
 800c79c:	b241      	sxtb	r1, r0
 800c79e:	22d5      	movs	r2, #213	; 0xd5
 800c7a0:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c7a2:	2368      	movs	r3, #104	; 0x68
 800c7a4:	18fb      	adds	r3, r7, r3
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	0019      	movs	r1, r3
 800c7aa:	2009      	movs	r0, #9
 800c7ac:	f003 fdb6 	bl	801031c <LoRaMacCommandsAddCmd>
                }
                break;
 800c7b0:	46c0      	nop			; (mov r8, r8)
 800c7b2:	2287      	movs	r2, #135	; 0x87
 800c7b4:	18bb      	adds	r3, r7, r2
 800c7b6:	18ba      	adds	r2, r7, r2
 800c7b8:	7812      	ldrb	r2, [r2, #0]
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	e20f      	b.n	800cbde <ProcessMacCommands+0xb36>
 800c7be:	46c0      	nop			; (mov r8, r8)
 800c7c0:	20000708 	.word	0x20000708
 800c7c4:	0802177c 	.word	0x0802177c
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800c7c8:	246b      	movs	r4, #107	; 0x6b
 800c7ca:	193b      	adds	r3, r7, r4
 800c7cc:	2203      	movs	r2, #3
 800c7ce:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800c7d0:	1cfb      	adds	r3, r7, #3
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	1cfa      	adds	r2, r7, #3
 800c7d6:	1c59      	adds	r1, r3, #1
 800c7d8:	7011      	strb	r1, [r2, #0]
 800c7da:	001a      	movs	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	189b      	adds	r3, r3, r2
 800c7e0:	781a      	ldrb	r2, [r3, #0]
 800c7e2:	2024      	movs	r0, #36	; 0x24
 800c7e4:	183b      	adds	r3, r7, r0
 800c7e6:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c7e8:	1cfb      	adds	r3, r7, #3
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	1cfa      	adds	r2, r7, #3
 800c7ee:	1c59      	adds	r1, r3, #1
 800c7f0:	7011      	strb	r1, [r2, #0]
 800c7f2:	001a      	movs	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	189b      	adds	r3, r3, r2
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	001a      	movs	r2, r3
 800c7fc:	183b      	adds	r3, r7, r0
 800c7fe:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c800:	1cfb      	adds	r3, r7, #3
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	1cfa      	adds	r2, r7, #3
 800c806:	1c59      	adds	r1, r3, #1
 800c808:	7011      	strb	r1, [r2, #0]
 800c80a:	001a      	movs	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	189b      	adds	r3, r3, r2
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	021a      	lsls	r2, r3, #8
 800c814:	183b      	adds	r3, r7, r0
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	431a      	orrs	r2, r3
 800c81a:	183b      	adds	r3, r7, r0
 800c81c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c81e:	1cfb      	adds	r3, r7, #3
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	1cfa      	adds	r2, r7, #3
 800c824:	1c59      	adds	r1, r3, #1
 800c826:	7011      	strb	r1, [r2, #0]
 800c828:	001a      	movs	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	189b      	adds	r3, r3, r2
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	041a      	lsls	r2, r3, #16
 800c832:	0001      	movs	r1, r0
 800c834:	187b      	adds	r3, r7, r1
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	431a      	orrs	r2, r3
 800c83a:	187b      	adds	r3, r7, r1
 800c83c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800c83e:	187b      	adds	r3, r7, r1
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	2264      	movs	r2, #100	; 0x64
 800c844:	435a      	muls	r2, r3
 800c846:	187b      	adds	r3, r7, r1
 800c848:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800c84a:	4aeb      	ldr	r2, [pc, #940]	; (800cbf8 <ProcessMacCommands+0xb50>)
 800c84c:	238e      	movs	r3, #142	; 0x8e
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	58d3      	ldr	r3, [r2, r3]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	187a      	adds	r2, r7, r1
 800c856:	0011      	movs	r1, r2
 800c858:	0018      	movs	r0, r3
 800c85a:	f006 fc7a 	bl	8013152 <RegionDlChannelReq>
 800c85e:	0003      	movs	r3, r0
 800c860:	001a      	movs	r2, r3
 800c862:	193b      	adds	r3, r7, r4
 800c864:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800c866:	193b      	adds	r3, r7, r4
 800c868:	781a      	ldrb	r2, [r3, #0]
 800c86a:	2168      	movs	r1, #104	; 0x68
 800c86c:	187b      	adds	r3, r7, r1
 800c86e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c870:	187b      	adds	r3, r7, r1
 800c872:	2201      	movs	r2, #1
 800c874:	0019      	movs	r1, r3
 800c876:	200a      	movs	r0, #10
 800c878:	f003 fd50 	bl	801031c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c87c:	f7ff fbfe 	bl	800c07c <SetMlmeScheduleUplinkIndication>
                break;
 800c880:	46c0      	nop			; (mov r8, r8)
 800c882:	2287      	movs	r2, #135	; 0x87
 800c884:	18bb      	adds	r3, r7, r2
 800c886:	18ba      	adds	r2, r7, r2
 800c888:	7812      	ldrb	r2, [r2, #0]
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	e1a7      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800c88e:	241c      	movs	r4, #28
 800c890:	193b      	adds	r3, r7, r4
 800c892:	0018      	movs	r0, r3
 800c894:	2308      	movs	r3, #8
 800c896:	001a      	movs	r2, r3
 800c898:	2100      	movs	r1, #0
 800c89a:	f012 fc4f 	bl	801f13c <memset>
                SysTime_t sysTime = { 0 };
 800c89e:	2514      	movs	r5, #20
 800c8a0:	197b      	adds	r3, r7, r5
 800c8a2:	0018      	movs	r0, r3
 800c8a4:	2308      	movs	r3, #8
 800c8a6:	001a      	movs	r2, r3
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	f012 fc47 	bl	801f13c <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800c8ae:	260c      	movs	r6, #12
 800c8b0:	19bb      	adds	r3, r7, r6
 800c8b2:	0018      	movs	r0, r3
 800c8b4:	2308      	movs	r3, #8
 800c8b6:	001a      	movs	r2, r3
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	f012 fc3f 	bl	801f13c <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c8be:	1cfb      	adds	r3, r7, #3
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	1cfa      	adds	r2, r7, #3
 800c8c4:	1c59      	adds	r1, r3, #1
 800c8c6:	7011      	strb	r1, [r2, #0]
 800c8c8:	001a      	movs	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	189b      	adds	r3, r3, r2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	001a      	movs	r2, r3
 800c8d2:	0020      	movs	r0, r4
 800c8d4:	183b      	adds	r3, r7, r0
 800c8d6:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c8d8:	1cfb      	adds	r3, r7, #3
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	1cfa      	adds	r2, r7, #3
 800c8de:	1c59      	adds	r1, r3, #1
 800c8e0:	7011      	strb	r1, [r2, #0]
 800c8e2:	001a      	movs	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	189b      	adds	r3, r3, r2
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	021a      	lsls	r2, r3, #8
 800c8ec:	183b      	adds	r3, r7, r0
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	431a      	orrs	r2, r3
 800c8f2:	183b      	adds	r3, r7, r0
 800c8f4:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c8f6:	1cfb      	adds	r3, r7, #3
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	1cfa      	adds	r2, r7, #3
 800c8fc:	1c59      	adds	r1, r3, #1
 800c8fe:	7011      	strb	r1, [r2, #0]
 800c900:	001a      	movs	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	189b      	adds	r3, r3, r2
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	041a      	lsls	r2, r3, #16
 800c90a:	183b      	adds	r3, r7, r0
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	431a      	orrs	r2, r3
 800c910:	183b      	adds	r3, r7, r0
 800c912:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c914:	1cfb      	adds	r3, r7, #3
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	1cfa      	adds	r2, r7, #3
 800c91a:	1c59      	adds	r1, r3, #1
 800c91c:	7011      	strb	r1, [r2, #0]
 800c91e:	001a      	movs	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	189b      	adds	r3, r3, r2
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	061a      	lsls	r2, r3, #24
 800c928:	183b      	adds	r3, r7, r0
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	431a      	orrs	r2, r3
 800c92e:	183b      	adds	r3, r7, r0
 800c930:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800c932:	1cfb      	adds	r3, r7, #3
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	1cfa      	adds	r2, r7, #3
 800c938:	1c59      	adds	r1, r3, #1
 800c93a:	7011      	strb	r1, [r2, #0]
 800c93c:	001a      	movs	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	189b      	adds	r3, r3, r2
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	b21a      	sxth	r2, r3
 800c946:	183b      	adds	r3, r7, r0
 800c948:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c94a:	0001      	movs	r1, r0
 800c94c:	183b      	adds	r3, r7, r0
 800c94e:	2204      	movs	r2, #4
 800c950:	5e9b      	ldrsh	r3, [r3, r2]
 800c952:	001a      	movs	r2, r3
 800c954:	0013      	movs	r3, r2
 800c956:	015b      	lsls	r3, r3, #5
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	189b      	adds	r3, r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	121b      	asrs	r3, r3, #8
 800c962:	b21a      	sxth	r2, r3
 800c964:	187b      	adds	r3, r7, r1
 800c966:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800c968:	002c      	movs	r4, r5
 800c96a:	193b      	adds	r3, r7, r4
 800c96c:	187a      	adds	r2, r7, r1
 800c96e:	ca03      	ldmia	r2!, {r0, r1}
 800c970:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c972:	193b      	adds	r3, r7, r4
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4aa1      	ldr	r2, [pc, #644]	; (800cbfc <ProcessMacCommands+0xb54>)
 800c978:	189a      	adds	r2, r3, r2
 800c97a:	193b      	adds	r3, r7, r4
 800c97c:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800c97e:	19bb      	adds	r3, r7, r6
 800c980:	0018      	movs	r0, r3
 800c982:	f008 fe59 	bl	8015638 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c986:	236c      	movs	r3, #108	; 0x6c
 800c988:	18fd      	adds	r5, r7, r3
 800c98a:	499b      	ldr	r1, [pc, #620]	; (800cbf8 <ProcessMacCommands+0xb50>)
 800c98c:	23d3      	movs	r3, #211	; 0xd3
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	0026      	movs	r6, r4
 800c992:	193a      	adds	r2, r7, r4
 800c994:	2404      	movs	r4, #4
 800c996:	18c8      	adds	r0, r1, r3
 800c998:	1900      	adds	r0, r0, r4
 800c99a:	466c      	mov	r4, sp
 800c99c:	6800      	ldr	r0, [r0, #0]
 800c99e:	6020      	str	r0, [r4, #0]
 800c9a0:	58cb      	ldr	r3, [r1, r3]
 800c9a2:	6811      	ldr	r1, [r2, #0]
 800c9a4:	6852      	ldr	r2, [r2, #4]
 800c9a6:	0028      	movs	r0, r5
 800c9a8:	f008 fdc6 	bl	8015538 <SysTimeSub>
 800c9ac:	0034      	movs	r4, r6
 800c9ae:	0025      	movs	r5, r4
 800c9b0:	193c      	adds	r4, r7, r4
 800c9b2:	236c      	movs	r3, #108	; 0x6c
 800c9b4:	18fb      	adds	r3, r7, r3
 800c9b6:	260c      	movs	r6, #12
 800c9b8:	19ba      	adds	r2, r7, r6
 800c9ba:	4669      	mov	r1, sp
 800c9bc:	6858      	ldr	r0, [r3, #4]
 800c9be:	6008      	str	r0, [r1, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6811      	ldr	r1, [r2, #0]
 800c9c4:	6852      	ldr	r2, [r2, #4]
 800c9c6:	0020      	movs	r0, r4
 800c9c8:	f008 fd5e 	bl	8015488 <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800c9cc:	002c      	movs	r4, r5
 800c9ce:	193b      	adds	r3, r7, r4
 800c9d0:	6818      	ldr	r0, [r3, #0]
 800c9d2:	6859      	ldr	r1, [r3, #4]
 800c9d4:	f008 fe04 	bl	80155e0 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800c9d8:	f003 fb1b 	bl	8010012 <LoRaMacClassBDeviceTimeAns>
                break;
 800c9dc:	46c0      	nop			; (mov r8, r8)
 800c9de:	2287      	movs	r2, #135	; 0x87
 800c9e0:	18bb      	adds	r3, r7, r2
 800c9e2:	18ba      	adds	r2, r7, r2
 800c9e4:	7812      	ldrb	r2, [r2, #0]
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	e0f9      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800c9ea:	4b83      	ldr	r3, [pc, #524]	; (800cbf8 <ProcessMacCommands+0xb50>)
 800c9ec:	4a84      	ldr	r2, [pc, #528]	; (800cc00 <ProcessMacCommands+0xb58>)
 800c9ee:	5c9b      	ldrb	r3, [r3, r2]
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d006      	beq.n	800ca02 <ProcessMacCommands+0x95a>
 800c9f4:	4b80      	ldr	r3, [pc, #512]	; (800cbf8 <ProcessMacCommands+0xb50>)
 800c9f6:	4a82      	ldr	r2, [pc, #520]	; (800cc00 <ProcessMacCommands+0xb58>)
 800c9f8:	5c9b      	ldrb	r3, [r3, r2]
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d001      	beq.n	800ca02 <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800c9fe:	f003 fae9 	bl	800ffd4 <LoRaMacClassBPingSlotInfoAns>
 800ca02:	2287      	movs	r2, #135	; 0x87
 800ca04:	18bb      	adds	r3, r7, r2
 800ca06:	18ba      	adds	r2, r7, r2
 800ca08:	7812      	ldrb	r2, [r2, #0]
 800ca0a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800ca0c:	e0e7      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ca0e:	207c      	movs	r0, #124	; 0x7c
 800ca10:	183b      	adds	r3, r7, r0
 800ca12:	2203      	movs	r2, #3
 800ca14:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ca1a:	1cfb      	adds	r3, r7, #3
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	1cfa      	adds	r2, r7, #3
 800ca20:	1c59      	adds	r1, r3, #1
 800ca22:	7011      	strb	r1, [r2, #0]
 800ca24:	001a      	movs	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	189b      	adds	r3, r3, r2
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ca2e:	1cfb      	adds	r3, r7, #3
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	1cfa      	adds	r2, r7, #3
 800ca34:	1c59      	adds	r1, r3, #1
 800ca36:	7011      	strb	r1, [r2, #0]
 800ca38:	001a      	movs	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	189b      	adds	r3, r3, r2
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca44:	4313      	orrs	r3, r2
 800ca46:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ca48:	1cfb      	adds	r3, r7, #3
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	1cfa      	adds	r2, r7, #3
 800ca4e:	1c59      	adds	r1, r3, #1
 800ca50:	7011      	strb	r1, [r2, #0]
 800ca52:	001a      	movs	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	189b      	adds	r3, r3, r2
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	041b      	lsls	r3, r3, #16
 800ca5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800ca62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca64:	2264      	movs	r2, #100	; 0x64
 800ca66:	4353      	muls	r3, r2
 800ca68:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ca6a:	1cfb      	adds	r3, r7, #3
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	1cfa      	adds	r2, r7, #3
 800ca70:	1c59      	adds	r1, r3, #1
 800ca72:	7011      	strb	r1, [r2, #0]
 800ca74:	001a      	movs	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	189b      	adds	r3, r3, r2
 800ca7a:	781a      	ldrb	r2, [r3, #0]
 800ca7c:	2677      	movs	r6, #119	; 0x77
 800ca7e:	19bb      	adds	r3, r7, r6
 800ca80:	210f      	movs	r1, #15
 800ca82:	400a      	ands	r2, r1
 800ca84:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ca86:	0005      	movs	r5, r0
 800ca88:	183c      	adds	r4, r7, r0
 800ca8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca8c:	19bb      	adds	r3, r7, r6
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	0011      	movs	r1, r2
 800ca92:	0018      	movs	r0, r3
 800ca94:	f003 faa3 	bl	800ffde <LoRaMacClassBPingSlotChannelReq>
 800ca98:	0003      	movs	r3, r0
 800ca9a:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800ca9c:	2168      	movs	r1, #104	; 0x68
 800ca9e:	187b      	adds	r3, r7, r1
 800caa0:	0028      	movs	r0, r5
 800caa2:	183a      	adds	r2, r7, r0
 800caa4:	7812      	ldrb	r2, [r2, #0]
 800caa6:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800caa8:	187b      	adds	r3, r7, r1
 800caaa:	2201      	movs	r2, #1
 800caac:	0019      	movs	r1, r3
 800caae:	2011      	movs	r0, #17
 800cab0:	f003 fc34 	bl	801031c <LoRaMacCommandsAddCmd>
 800cab4:	2287      	movs	r2, #135	; 0x87
 800cab6:	18bb      	adds	r3, r7, r2
 800cab8:	18ba      	adds	r2, r7, r2
 800caba:	7812      	ldrb	r2, [r2, #0]
 800cabc:	701a      	strb	r2, [r3, #0]
                break;
 800cabe:	e08e      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800cac0:	207e      	movs	r0, #126	; 0x7e
 800cac2:	183b      	adds	r3, r7, r0
 800cac4:	2200      	movs	r2, #0
 800cac6:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800cac8:	247d      	movs	r4, #125	; 0x7d
 800caca:	193b      	adds	r3, r7, r4
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800cad0:	1cfb      	adds	r3, r7, #3
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	1cfa      	adds	r2, r7, #3
 800cad6:	1c59      	adds	r1, r3, #1
 800cad8:	7011      	strb	r1, [r2, #0]
 800cada:	001a      	movs	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	189b      	adds	r3, r3, r2
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	183b      	adds	r3, r7, r0
 800cae4:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800cae6:	1cfb      	adds	r3, r7, #3
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	1cfa      	adds	r2, r7, #3
 800caec:	1c59      	adds	r1, r3, #1
 800caee:	7011      	strb	r1, [r2, #0]
 800caf0:	001a      	movs	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	189b      	adds	r3, r3, r2
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	021b      	lsls	r3, r3, #8
 800cafa:	b21a      	sxth	r2, r3
 800cafc:	183b      	adds	r3, r7, r0
 800cafe:	2100      	movs	r1, #0
 800cb00:	5e5b      	ldrsh	r3, [r3, r1]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	b21a      	sxth	r2, r3
 800cb06:	183b      	adds	r3, r7, r0
 800cb08:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800cb0a:	1cfb      	adds	r3, r7, #3
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	1cfa      	adds	r2, r7, #3
 800cb10:	1c59      	adds	r1, r3, #1
 800cb12:	7011      	strb	r1, [r2, #0]
 800cb14:	001a      	movs	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	189a      	adds	r2, r3, r2
 800cb1a:	193b      	adds	r3, r7, r4
 800cb1c:	7812      	ldrb	r2, [r2, #0]
 800cb1e:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800cb20:	4b38      	ldr	r3, [pc, #224]	; (800cc04 <ProcessMacCommands+0xb5c>)
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	193b      	adds	r3, r7, r4
 800cb26:	7819      	ldrb	r1, [r3, #0]
 800cb28:	183b      	adds	r3, r7, r0
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	f003 fa62 	bl	800fff6 <LoRaMacClassBBeaconTimingAns>
 800cb32:	2287      	movs	r2, #135	; 0x87
 800cb34:	18bb      	adds	r3, r7, r2
 800cb36:	18ba      	adds	r2, r7, r2
 800cb38:	7812      	ldrb	r2, [r2, #0]
 800cb3a:	701a      	strb	r2, [r3, #0]
                break;
 800cb3c:	e04f      	b.n	800cbde <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2080      	movs	r0, #128	; 0x80
 800cb42:	183a      	adds	r2, r7, r0
 800cb44:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800cb46:	1cfb      	adds	r3, r7, #3
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	1cfa      	adds	r2, r7, #3
 800cb4c:	1c59      	adds	r1, r3, #1
 800cb4e:	7011      	strb	r1, [r2, #0]
 800cb50:	001a      	movs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	189b      	adds	r3, r3, r2
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	183a      	adds	r2, r7, r0
 800cb5a:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cb5c:	1cfb      	adds	r3, r7, #3
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	1cfa      	adds	r2, r7, #3
 800cb62:	1c59      	adds	r1, r3, #1
 800cb64:	7011      	strb	r1, [r2, #0]
 800cb66:	001a      	movs	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	189b      	adds	r3, r3, r2
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	021b      	lsls	r3, r3, #8
 800cb70:	183a      	adds	r2, r7, r0
 800cb72:	6812      	ldr	r2, [r2, #0]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	183a      	adds	r2, r7, r0
 800cb78:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cb7a:	1cfb      	adds	r3, r7, #3
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	1cfa      	adds	r2, r7, #3
 800cb80:	1c59      	adds	r1, r3, #1
 800cb82:	7011      	strb	r1, [r2, #0]
 800cb84:	001a      	movs	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	189b      	adds	r3, r3, r2
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	041b      	lsls	r3, r3, #16
 800cb8e:	183a      	adds	r2, r7, r0
 800cb90:	6812      	ldr	r2, [r2, #0]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	183a      	adds	r2, r7, r0
 800cb96:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800cb98:	183b      	adds	r3, r7, r0
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2264      	movs	r2, #100	; 0x64
 800cb9e:	4353      	muls	r3, r2
 800cba0:	183a      	adds	r2, r7, r0
 800cba2:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800cba4:	183b      	adds	r3, r7, r0
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f003 fa37 	bl	801001c <LoRaMacClassBBeaconFreqReq>
 800cbae:	1e03      	subs	r3, r0, #0
 800cbb0:	d004      	beq.n	800cbbc <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800cbb2:	2368      	movs	r3, #104	; 0x68
 800cbb4:	18fb      	adds	r3, r7, r3
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	701a      	strb	r2, [r3, #0]
 800cbba:	e003      	b.n	800cbc4 <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800cbbc:	2368      	movs	r3, #104	; 0x68
 800cbbe:	18fb      	adds	r3, r7, r3
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800cbc4:	2368      	movs	r3, #104	; 0x68
 800cbc6:	18fb      	adds	r3, r7, r3
 800cbc8:	2201      	movs	r2, #1
 800cbca:	0019      	movs	r1, r3
 800cbcc:	2013      	movs	r0, #19
 800cbce:	f003 fba5 	bl	801031c <LoRaMacCommandsAddCmd>
 800cbd2:	2287      	movs	r2, #135	; 0x87
 800cbd4:	18bb      	adds	r3, r7, r2
 800cbd6:	18ba      	adds	r2, r7, r2
 800cbd8:	7812      	ldrb	r2, [r2, #0]
 800cbda:	701a      	strb	r2, [r3, #0]
                }
                break;
 800cbdc:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800cbde:	1cfa      	adds	r2, r7, #3
 800cbe0:	1cbb      	adds	r3, r7, #2
 800cbe2:	7812      	ldrb	r2, [r2, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d201      	bcs.n	800cbee <ProcessMacCommands+0xb46>
 800cbea:	f7ff fa7e 	bl	800c0ea <ProcessMacCommands+0x42>
 800cbee:	e000      	b.n	800cbf2 <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800cbf0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	b023      	add	sp, #140	; 0x8c
 800cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbf8:	20000708 	.word	0x20000708
 800cbfc:	12d53d80 	.word	0x12d53d80
 800cc00:	0000046c 	.word	0x0000046c
 800cc04:	2000156c 	.word	0x2000156c

0800cc08 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800cc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0a:	b08f      	sub	sp, #60	; 0x3c
 800cc0c:	af02      	add	r7, sp, #8
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	0008      	movs	r0, r1
 800cc12:	607a      	str	r2, [r7, #4]
 800cc14:	0019      	movs	r1, r3
 800cc16:	230b      	movs	r3, #11
 800cc18:	18fb      	adds	r3, r7, r3
 800cc1a:	1c02      	adds	r2, r0, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	2308      	movs	r3, #8
 800cc20:	18fb      	adds	r3, r7, r3
 800cc22:	1c0a      	adds	r2, r1, #0
 800cc24:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc26:	232f      	movs	r3, #47	; 0x2f
 800cc28:	18fb      	adds	r3, r7, r3
 800cc2a:	2203      	movs	r2, #3
 800cc2c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cc2e:	4a99      	ldr	r2, [pc, #612]	; (800ce94 <Send+0x28c>)
 800cc30:	238e      	movs	r3, #142	; 0x8e
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	58d2      	ldr	r2, [r2, r3]
 800cc36:	232e      	movs	r3, #46	; 0x2e
 800cc38:	18fb      	adds	r3, r7, r3
 800cc3a:	21d5      	movs	r1, #213	; 0xd5
 800cc3c:	5c52      	ldrb	r2, [r2, r1]
 800cc3e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cc40:	4a94      	ldr	r2, [pc, #592]	; (800ce94 <Send+0x28c>)
 800cc42:	238e      	movs	r3, #142	; 0x8e
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	58d2      	ldr	r2, [r2, r3]
 800cc48:	232d      	movs	r3, #45	; 0x2d
 800cc4a:	18fb      	adds	r3, r7, r3
 800cc4c:	21d4      	movs	r1, #212	; 0xd4
 800cc4e:	5c52      	ldrb	r2, [r2, r1]
 800cc50:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800cc52:	4a90      	ldr	r2, [pc, #576]	; (800ce94 <Send+0x28c>)
 800cc54:	238e      	movs	r3, #142	; 0x8e
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	58d3      	ldr	r3, [r2, r3]
 800cc5a:	22cc      	movs	r2, #204	; 0xcc
 800cc5c:	589b      	ldr	r3, [r3, r2]
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cc60:	4a8c      	ldr	r2, [pc, #560]	; (800ce94 <Send+0x28c>)
 800cc62:	238e      	movs	r3, #142	; 0x8e
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	58d2      	ldr	r2, [r2, r3]
 800cc68:	2389      	movs	r3, #137	; 0x89
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	5cd3      	ldrb	r3, [r2, r3]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <Send+0x6e>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800cc72:	2307      	movs	r3, #7
 800cc74:	e10a      	b.n	800ce8c <Send+0x284>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800cc76:	4a87      	ldr	r2, [pc, #540]	; (800ce94 <Send+0x28c>)
 800cc78:	238e      	movs	r3, #142	; 0x8e
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	58d2      	ldr	r2, [r2, r3]
 800cc7e:	2312      	movs	r3, #18
 800cc80:	33ff      	adds	r3, #255	; 0xff
 800cc82:	5cd3      	ldrb	r3, [r2, r3]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d104      	bne.n	800cc92 <Send+0x8a>
    {
        MacCtx.AggregatedTimeOff = 0;
 800cc88:	4a82      	ldr	r2, [pc, #520]	; (800ce94 <Send+0x28c>)
 800cc8a:	23d1      	movs	r3, #209	; 0xd1
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	2100      	movs	r1, #0
 800cc90:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 800cc92:	202c      	movs	r0, #44	; 0x2c
 800cc94:	183b      	adds	r3, r7, r0
 800cc96:	2200      	movs	r2, #0
 800cc98:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 800cc9a:	183b      	adds	r3, r7, r0
 800cc9c:	781a      	ldrb	r2, [r3, #0]
 800cc9e:	210f      	movs	r1, #15
 800cca0:	438a      	bics	r2, r1
 800cca2:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800cca4:	4a7b      	ldr	r2, [pc, #492]	; (800ce94 <Send+0x28c>)
 800cca6:	238e      	movs	r3, #142	; 0x8e
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	58d3      	ldr	r3, [r2, r3]
 800ccac:	22ca      	movs	r2, #202	; 0xca
 800ccae:	5c9a      	ldrb	r2, [r3, r2]
 800ccb0:	183b      	adds	r3, r7, r0
 800ccb2:	01d0      	lsls	r0, r2, #7
 800ccb4:	781a      	ldrb	r2, [r3, #0]
 800ccb6:	217f      	movs	r1, #127	; 0x7f
 800ccb8:	400a      	ands	r2, r1
 800ccba:	1c11      	adds	r1, r2, #0
 800ccbc:	1c02      	adds	r2, r0, #0
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800ccc2:	4a74      	ldr	r2, [pc, #464]	; (800ce94 <Send+0x28c>)
 800ccc4:	238e      	movs	r3, #142	; 0x8e
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	58d3      	ldr	r3, [r2, r3]
 800ccca:	22c8      	movs	r2, #200	; 0xc8
 800cccc:	5c9b      	ldrb	r3, [r3, r2]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d106      	bne.n	800cce0 <Send+0xd8>
    {
        fCtrl.Bits.FPending      = 1;
 800ccd2:	232c      	movs	r3, #44	; 0x2c
 800ccd4:	18fb      	adds	r3, r7, r3
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	2110      	movs	r1, #16
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	e005      	b.n	800ccec <Send+0xe4>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800cce0:	232c      	movs	r3, #44	; 0x2c
 800cce2:	18fb      	adds	r3, r7, r3
 800cce4:	781a      	ldrb	r2, [r3, #0]
 800cce6:	2110      	movs	r1, #16
 800cce8:	438a      	bics	r2, r1
 800ccea:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800ccec:	4a69      	ldr	r2, [pc, #420]	; (800ce94 <Send+0x28c>)
 800ccee:	238e      	movs	r3, #142	; 0x8e
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	58d3      	ldr	r3, [r2, r3]
 800ccf4:	4a68      	ldr	r2, [pc, #416]	; (800ce98 <Send+0x290>)
 800ccf6:	5c9b      	ldrb	r3, [r3, r2]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <Send+0x100>
    {
        fCtrl.Bits.Ack = 1;
 800ccfc:	232c      	movs	r3, #44	; 0x2c
 800ccfe:	18fb      	adds	r3, r7, r3
 800cd00:	781a      	ldrb	r2, [r3, #0]
 800cd02:	2120      	movs	r1, #32
 800cd04:	430a      	orrs	r2, r1
 800cd06:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800cd08:	4a62      	ldr	r2, [pc, #392]	; (800ce94 <Send+0x28c>)
 800cd0a:	238e      	movs	r3, #142	; 0x8e
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	58d1      	ldr	r1, [r2, r3]
 800cd10:	2014      	movs	r0, #20
 800cd12:	183b      	adds	r3, r7, r0
 800cd14:	2288      	movs	r2, #136	; 0x88
 800cd16:	0092      	lsls	r2, r2, #2
 800cd18:	588a      	ldr	r2, [r1, r2]
 800cd1a:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 800cd1c:	0001      	movs	r1, r0
 800cd1e:	187b      	adds	r3, r7, r1
 800cd20:	2201      	movs	r2, #1
 800cd22:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800cd24:	242c      	movs	r4, #44	; 0x2c
 800cd26:	193b      	adds	r3, r7, r4
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	061b      	lsls	r3, r3, #24
 800cd2c:	0fdb      	lsrs	r3, r3, #31
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	1e5a      	subs	r2, r3, #1
 800cd32:	4193      	sbcs	r3, r2
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	0008      	movs	r0, r1
 800cd38:	183b      	adds	r3, r7, r0
 800cd3a:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800cd3c:	4a55      	ldr	r2, [pc, #340]	; (800ce94 <Send+0x28c>)
 800cd3e:	238e      	movs	r3, #142	; 0x8e
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	58d3      	ldr	r3, [r2, r3]
 800cd44:	22cc      	movs	r2, #204	; 0xcc
 800cd46:	589a      	ldr	r2, [r3, r2]
 800cd48:	183b      	adds	r3, r7, r0
 800cd4a:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800cd4c:	4a51      	ldr	r2, [pc, #324]	; (800ce94 <Send+0x28c>)
 800cd4e:	238e      	movs	r3, #142	; 0x8e
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	58d3      	ldr	r3, [r2, r3]
 800cd54:	22d0      	movs	r2, #208	; 0xd0
 800cd56:	5a9a      	ldrh	r2, [r3, r2]
 800cd58:	183b      	adds	r3, r7, r0
 800cd5a:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800cd5c:	4a4d      	ldr	r2, [pc, #308]	; (800ce94 <Send+0x28c>)
 800cd5e:	238e      	movs	r3, #142	; 0x8e
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	58d3      	ldr	r3, [r2, r3]
 800cd64:	22d2      	movs	r2, #210	; 0xd2
 800cd66:	5a9a      	ldrh	r2, [r3, r2]
 800cd68:	183b      	adds	r3, r7, r0
 800cd6a:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cd6c:	4a49      	ldr	r2, [pc, #292]	; (800ce94 <Send+0x28c>)
 800cd6e:	238e      	movs	r3, #142	; 0x8e
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	58d3      	ldr	r3, [r2, r3]
 800cd74:	22d5      	movs	r2, #213	; 0xd5
 800cd76:	569a      	ldrsb	r2, [r3, r2]
 800cd78:	183b      	adds	r3, r7, r0
 800cd7a:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800cd7c:	4a45      	ldr	r2, [pc, #276]	; (800ce94 <Send+0x28c>)
 800cd7e:	238e      	movs	r3, #142	; 0x8e
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	58d3      	ldr	r3, [r2, r3]
 800cd84:	22d4      	movs	r2, #212	; 0xd4
 800cd86:	569a      	ldrsb	r2, [r3, r2]
 800cd88:	183b      	adds	r3, r7, r0
 800cd8a:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800cd8c:	4a41      	ldr	r2, [pc, #260]	; (800ce94 <Send+0x28c>)
 800cd8e:	238e      	movs	r3, #142	; 0x8e
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	58d2      	ldr	r2, [r2, r3]
 800cd94:	2380      	movs	r3, #128	; 0x80
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	5cd2      	ldrb	r2, [r2, r3]
 800cd9a:	183b      	adds	r3, r7, r0
 800cd9c:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800cd9e:	4a3d      	ldr	r2, [pc, #244]	; (800ce94 <Send+0x28c>)
 800cda0:	238e      	movs	r3, #142	; 0x8e
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	58d3      	ldr	r3, [r2, r3]
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	183b      	adds	r3, r7, r0
 800cdaa:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800cdac:	4a39      	ldr	r2, [pc, #228]	; (800ce94 <Send+0x28c>)
 800cdae:	238e      	movs	r3, #142	; 0x8e
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	58d3      	ldr	r3, [r2, r3]
 800cdb4:	33d5      	adds	r3, #213	; 0xd5
 800cdb6:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800cdb8:	4a36      	ldr	r2, [pc, #216]	; (800ce94 <Send+0x28c>)
 800cdba:	238e      	movs	r3, #142	; 0x8e
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	58d3      	ldr	r3, [r2, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800cdc0:	33d4      	adds	r3, #212	; 0xd4
 800cdc2:	001a      	movs	r2, r3
 800cdc4:	2328      	movs	r3, #40	; 0x28
 800cdc6:	18fb      	adds	r3, r7, r3
 800cdc8:	1838      	adds	r0, r7, r0
 800cdca:	f003 f83b 	bl	800fe44 <LoRaMacAdrCalcNext>
 800cdce:	0003      	movs	r3, r0
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	0026      	movs	r6, r4
 800cdd4:	193b      	adds	r3, r7, r4
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	400a      	ands	r2, r1
 800cdda:	0190      	lsls	r0, r2, #6
 800cddc:	781a      	ldrb	r2, [r3, #0]
 800cdde:	2140      	movs	r1, #64	; 0x40
 800cde0:	438a      	bics	r2, r1
 800cde2:	1c11      	adds	r1, r2, #0
 800cde4:	1c02      	adds	r2, r0, #0
 800cde6:	430a      	orrs	r2, r1
 800cde8:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800cdea:	232f      	movs	r3, #47	; 0x2f
 800cdec:	18fc      	adds	r4, r7, r3
 800cdee:	687d      	ldr	r5, [r7, #4]
 800cdf0:	220b      	movs	r2, #11
 800cdf2:	18bb      	adds	r3, r7, r2
 800cdf4:	781a      	ldrb	r2, [r3, #0]
 800cdf6:	19b9      	adds	r1, r7, r6
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	2608      	movs	r6, #8
 800cdfc:	19bb      	adds	r3, r7, r6
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	002b      	movs	r3, r5
 800ce04:	f000 fc18 	bl	800d638 <PrepareFrame>
 800ce08:	0003      	movs	r3, r0
 800ce0a:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ce0c:	232f      	movs	r3, #47	; 0x2f
 800ce0e:	18fb      	adds	r3, r7, r3
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d004      	beq.n	800ce20 <Send+0x218>
 800ce16:	232f      	movs	r3, #47	; 0x2f
 800ce18:	18fb      	adds	r3, r7, r3
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b0a      	cmp	r3, #10
 800ce1e:	d106      	bne.n	800ce2e <Send+0x226>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800ce20:	232f      	movs	r3, #47	; 0x2f
 800ce22:	18fc      	adds	r4, r7, r3
 800ce24:	2000      	movs	r0, #0
 800ce26:	f000 f89b 	bl	800cf60 <ScheduleTx>
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800ce2e:	232f      	movs	r3, #47	; 0x2f
 800ce30:	18fb      	adds	r3, r7, r3
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d012      	beq.n	800ce5e <Send+0x256>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800ce38:	4a16      	ldr	r2, [pc, #88]	; (800ce94 <Send+0x28c>)
 800ce3a:	238e      	movs	r3, #142	; 0x8e
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	58d3      	ldr	r3, [r2, r3]
 800ce40:	222e      	movs	r2, #46	; 0x2e
 800ce42:	18ba      	adds	r2, r7, r2
 800ce44:	21d5      	movs	r1, #213	; 0xd5
 800ce46:	7812      	ldrb	r2, [r2, #0]
 800ce48:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800ce4a:	4a12      	ldr	r2, [pc, #72]	; (800ce94 <Send+0x28c>)
 800ce4c:	238e      	movs	r3, #142	; 0x8e
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	58d3      	ldr	r3, [r2, r3]
 800ce52:	222d      	movs	r2, #45	; 0x2d
 800ce54:	18ba      	adds	r2, r7, r2
 800ce56:	21d4      	movs	r1, #212	; 0xd4
 800ce58:	7812      	ldrb	r2, [r2, #0]
 800ce5a:	545a      	strb	r2, [r3, r1]
 800ce5c:	e013      	b.n	800ce86 <Send+0x27e>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800ce5e:	4a0d      	ldr	r2, [pc, #52]	; (800ce94 <Send+0x28c>)
 800ce60:	238e      	movs	r3, #142	; 0x8e
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	58d3      	ldr	r3, [r2, r3]
 800ce66:	4a0c      	ldr	r2, [pc, #48]	; (800ce98 <Send+0x290>)
 800ce68:	2100      	movs	r1, #0
 800ce6a:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800ce6c:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <Send+0x28c>)
 800ce6e:	238e      	movs	r3, #142	; 0x8e
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	58d3      	ldr	r3, [r2, r3]
 800ce74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce76:	21cc      	movs	r1, #204	; 0xcc
 800ce78:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ce7a:	f003 fad9 	bl	8010430 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ce7e:	1e03      	subs	r3, r0, #0
 800ce80:	d001      	beq.n	800ce86 <Send+0x27e>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce82:	2313      	movs	r3, #19
 800ce84:	e002      	b.n	800ce8c <Send+0x284>
        }
    }
    return status;
 800ce86:	232f      	movs	r3, #47	; 0x2f
 800ce88:	18fb      	adds	r3, r7, r3
 800ce8a:	781b      	ldrb	r3, [r3, #0]
}
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b00d      	add	sp, #52	; 0x34
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce94:	20000708 	.word	0x20000708
 800ce98:	0000021a 	.word	0x0000021a

0800ce9c <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800ce9c:	b5b0      	push	{r4, r5, r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	0002      	movs	r2, r0
 800cea4:	1dfb      	adds	r3, r7, #7
 800cea6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cea8:	230e      	movs	r3, #14
 800ceaa:	18fb      	adds	r3, r7, r3
 800ceac:	2200      	movs	r2, #0
 800ceae:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	18fb      	adds	r3, r7, r3
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 800ceb8:	230f      	movs	r3, #15
 800ceba:	18fb      	adds	r3, r7, r3
 800cebc:	2201      	movs	r2, #1
 800cebe:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 800cec0:	1dfb      	adds	r3, r7, #7
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2bff      	cmp	r3, #255	; 0xff
 800cec6:	d12d      	bne.n	800cf24 <SendReJoinReq+0x88>
    {
        case JOIN_REQ:
        {
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800cec8:	4a21      	ldr	r2, [pc, #132]	; (800cf50 <SendReJoinReq+0xb4>)
 800ceca:	2386      	movs	r3, #134	; 0x86
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	2100      	movs	r1, #0
 800ced0:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ced2:	4a1f      	ldr	r2, [pc, #124]	; (800cf50 <SendReJoinReq+0xb4>)
 800ced4:	2388      	movs	r3, #136	; 0x88
 800ced6:	005b      	lsls	r3, r3, #1
 800ced8:	491e      	ldr	r1, [pc, #120]	; (800cf54 <SendReJoinReq+0xb8>)
 800ceda:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cedc:	4a1c      	ldr	r2, [pc, #112]	; (800cf50 <SendReJoinReq+0xb4>)
 800cede:	238a      	movs	r3, #138	; 0x8a
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	21ff      	movs	r1, #255	; 0xff
 800cee4:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800cee6:	200c      	movs	r0, #12
 800cee8:	183b      	adds	r3, r7, r0
 800ceea:	781a      	ldrb	r2, [r3, #0]
 800ceec:	211f      	movs	r1, #31
 800ceee:	400a      	ands	r2, r1
 800cef0:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800cef2:	183b      	adds	r3, r7, r0
 800cef4:	7819      	ldrb	r1, [r3, #0]
 800cef6:	4a16      	ldr	r2, [pc, #88]	; (800cf50 <SendReJoinReq+0xb4>)
 800cef8:	2316      	movs	r3, #22
 800cefa:	33ff      	adds	r3, #255	; 0xff
 800cefc:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cefe:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <SendReJoinReq+0xb4>)
 800cf00:	6859      	ldr	r1, [r3, #4]
 800cf02:	4b15      	ldr	r3, [pc, #84]	; (800cf58 <SendReJoinReq+0xbc>)
 800cf04:	2208      	movs	r2, #8
 800cf06:	0018      	movs	r0, r3
 800cf08:	f008 fd78 	bl	80159fc <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
 800cf0c:	4b10      	ldr	r3, [pc, #64]	; (800cf50 <SendReJoinReq+0xb4>)
 800cf0e:	6819      	ldr	r1, [r3, #0]
 800cf10:	4b12      	ldr	r3, [pc, #72]	; (800cf5c <SendReJoinReq+0xc0>)
 800cf12:	2208      	movs	r2, #8
 800cf14:	0018      	movs	r0, r3
 800cf16:	f008 fd71 	bl	80159fc <memcpy1>

            allowDelayedTx = false;
 800cf1a:	230f      	movs	r3, #15
 800cf1c:	18fb      	adds	r3, r7, r3
 800cf1e:	2200      	movs	r2, #0
 800cf20:	701a      	strb	r2, [r3, #0]

            break;
 800cf22:	e004      	b.n	800cf2e <SendReJoinReq+0x92>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cf24:	230e      	movs	r3, #14
 800cf26:	18fb      	adds	r3, r7, r3
 800cf28:	2202      	movs	r2, #2
 800cf2a:	701a      	strb	r2, [r3, #0]
            break;
 800cf2c:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800cf2e:	250e      	movs	r5, #14
 800cf30:	197c      	adds	r4, r7, r5
 800cf32:	230f      	movs	r3, #15
 800cf34:	18fb      	adds	r3, r7, r3
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	0018      	movs	r0, r3
 800cf3a:	f000 f811 	bl	800cf60 <ScheduleTx>
 800cf3e:	0003      	movs	r3, r0
 800cf40:	7023      	strb	r3, [r4, #0]
    return status;
 800cf42:	197b      	adds	r3, r7, r5
 800cf44:	781b      	ldrb	r3, [r3, #0]
}
 800cf46:	0018      	movs	r0, r3
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	b004      	add	sp, #16
 800cf4c:	bdb0      	pop	{r4, r5, r7, pc}
 800cf4e:	46c0      	nop			; (mov r8, r8)
 800cf50:	20000708 	.word	0x20000708
 800cf54:	20000712 	.word	0x20000712
 800cf58:	2000081e 	.word	0x2000081e
 800cf5c:	20000826 	.word	0x20000826

0800cf60 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	b08b      	sub	sp, #44	; 0x2c
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	0002      	movs	r2, r0
 800cf68:	1dfb      	adds	r3, r7, #7
 800cf6a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cf6c:	231f      	movs	r3, #31
 800cf6e:	18fb      	adds	r3, r7, r3
 800cf70:	2203      	movs	r2, #3
 800cf72:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800cf7c:	4ab1      	ldr	r2, [pc, #708]	; (800d244 <ScheduleTx+0x2e4>)
 800cf7e:	238e      	movs	r3, #142	; 0x8e
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	58d2      	ldr	r2, [r2, r3]
 800cf84:	238a      	movs	r3, #138	; 0x8a
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	5cd3      	ldrb	r3, [r2, r3]
 800cf8a:	0018      	movs	r0, r3
 800cf8c:	f000 f9c4 	bl	800d318 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800cf90:	4aac      	ldr	r2, [pc, #688]	; (800d244 <ScheduleTx+0x2e4>)
 800cf92:	23d1      	movs	r3, #209	; 0xd1
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	58d2      	ldr	r2, [r2, r3]
 800cf98:	210c      	movs	r1, #12
 800cf9a:	187b      	adds	r3, r7, r1
 800cf9c:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800cf9e:	4aa9      	ldr	r2, [pc, #676]	; (800d244 <ScheduleTx+0x2e4>)
 800cfa0:	238e      	movs	r3, #142	; 0x8e
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	58d3      	ldr	r3, [r2, r3]
 800cfa6:	22d5      	movs	r2, #213	; 0xd5
 800cfa8:	569a      	ldrsb	r2, [r3, r2]
 800cfaa:	187b      	adds	r3, r7, r1
 800cfac:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800cfae:	4aa5      	ldr	r2, [pc, #660]	; (800d244 <ScheduleTx+0x2e4>)
 800cfb0:	238e      	movs	r3, #142	; 0x8e
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	58d2      	ldr	r2, [r2, r3]
 800cfb6:	2389      	movs	r3, #137	; 0x89
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	5cd2      	ldrb	r2, [r2, r3]
 800cfbc:	187b      	adds	r3, r7, r1
 800cfbe:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cfc0:	4aa0      	ldr	r2, [pc, #640]	; (800d244 <ScheduleTx+0x2e4>)
 800cfc2:	238e      	movs	r3, #142	; 0x8e
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	58d2      	ldr	r2, [r2, r3]
 800cfc8:	2389      	movs	r3, #137	; 0x89
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	5cd3      	ldrb	r3, [r2, r3]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d104      	bne.n	800cfdc <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800cfd2:	230c      	movs	r3, #12
 800cfd4:	18fb      	adds	r3, r7, r3
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	725a      	strb	r2, [r3, #9]
 800cfda:	e003      	b.n	800cfe4 <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800cfdc:	230c      	movs	r3, #12
 800cfde:	18fb      	adds	r3, r7, r3
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800cfe4:	4a97      	ldr	r2, [pc, #604]	; (800d244 <ScheduleTx+0x2e4>)
 800cfe6:	23d0      	movs	r3, #208	; 0xd0
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	58d2      	ldr	r2, [r2, r3]
 800cfec:	210c      	movs	r1, #12
 800cfee:	187b      	adds	r3, r7, r1
 800cff0:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800cff2:	4a94      	ldr	r2, [pc, #592]	; (800d244 <ScheduleTx+0x2e4>)
 800cff4:	238e      	movs	r3, #142	; 0x8e
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	58d3      	ldr	r3, [r2, r3]
 800cffa:	7818      	ldrb	r0, [r3, #0]
 800cffc:	4a91      	ldr	r2, [pc, #580]	; (800d244 <ScheduleTx+0x2e4>)
 800cffe:	238e      	movs	r3, #142	; 0x8e
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	58d3      	ldr	r3, [r2, r3]
 800d004:	3314      	adds	r3, #20
 800d006:	33ff      	adds	r3, #255	; 0xff
 800d008:	001a      	movs	r2, r3
 800d00a:	261f      	movs	r6, #31
 800d00c:	19bc      	adds	r4, r7, r6
 800d00e:	2318      	movs	r3, #24
 800d010:	18fd      	adds	r5, r7, r3
 800d012:	1879      	adds	r1, r7, r1
 800d014:	4b8c      	ldr	r3, [pc, #560]	; (800d248 <ScheduleTx+0x2e8>)
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	002b      	movs	r3, r5
 800d01a:	f006 f8e8 	bl	80131ee <RegionNextChannel>
 800d01e:	0003      	movs	r3, r0
 800d020:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800d022:	19bb      	adds	r3, r7, r6
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d026      	beq.n	800d078 <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800d02a:	231f      	movs	r3, #31
 800d02c:	18fb      	adds	r3, r7, r3
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b0b      	cmp	r3, #11
 800d032:	d11d      	bne.n	800d070 <ScheduleTx+0x110>
 800d034:	1dfb      	adds	r3, r7, #7
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d019      	beq.n	800d070 <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d014      	beq.n	800d06c <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800d042:	4a80      	ldr	r2, [pc, #512]	; (800d244 <ScheduleTx+0x2e4>)
 800d044:	23d5      	movs	r3, #213	; 0xd5
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	58d3      	ldr	r3, [r2, r3]
 800d04a:	2220      	movs	r2, #32
 800d04c:	431a      	orrs	r2, r3
 800d04e:	0011      	movs	r1, r2
 800d050:	4a7c      	ldr	r2, [pc, #496]	; (800d244 <ScheduleTx+0x2e4>)
 800d052:	23d5      	movs	r3, #213	; 0xd5
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800d058:	69ba      	ldr	r2, [r7, #24]
 800d05a:	4b7c      	ldr	r3, [pc, #496]	; (800d24c <ScheduleTx+0x2ec>)
 800d05c:	0011      	movs	r1, r2
 800d05e:	0018      	movs	r0, r3
 800d060:	f008 fbba 	bl	80157d8 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800d064:	4b79      	ldr	r3, [pc, #484]	; (800d24c <ScheduleTx+0x2ec>)
 800d066:	0018      	movs	r0, r3
 800d068:	f008 fbe2 	bl	8015830 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	e0e5      	b.n	800d23c <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800d070:	231f      	movs	r3, #31
 800d072:	18fb      	adds	r3, r7, r3
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	e0e1      	b.n	800d23c <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d078:	4a72      	ldr	r2, [pc, #456]	; (800d244 <ScheduleTx+0x2e4>)
 800d07a:	238e      	movs	r3, #142	; 0x8e
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	58d3      	ldr	r3, [r2, r3]
 800d080:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800d082:	4a70      	ldr	r2, [pc, #448]	; (800d244 <ScheduleTx+0x2e4>)
 800d084:	238e      	movs	r3, #142	; 0x8e
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	58d3      	ldr	r3, [r2, r3]
 800d08a:	7818      	ldrb	r0, [r3, #0]
 800d08c:	4a6d      	ldr	r2, [pc, #436]	; (800d244 <ScheduleTx+0x2e4>)
 800d08e:	238e      	movs	r3, #142	; 0x8e
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	58d2      	ldr	r2, [r2, r3]
 800d094:	2302      	movs	r3, #2
 800d096:	33ff      	adds	r3, #255	; 0xff
 800d098:	5cd1      	ldrb	r1, [r2, r3]
 800d09a:	4a6a      	ldr	r2, [pc, #424]	; (800d244 <ScheduleTx+0x2e4>)
 800d09c:	238e      	movs	r3, #142	; 0x8e
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	58d3      	ldr	r3, [r2, r3]
 800d0a2:	22d5      	movs	r2, #213	; 0xd5
 800d0a4:	569d      	ldrsb	r5, [r3, r2]
 800d0a6:	4a67      	ldr	r2, [pc, #412]	; (800d244 <ScheduleTx+0x2e4>)
 800d0a8:	238e      	movs	r3, #142	; 0x8e
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	58d3      	ldr	r3, [r2, r3]
 800d0ae:	22f5      	movs	r2, #245	; 0xf5
 800d0b0:	5c9b      	ldrb	r3, [r3, r2]
 800d0b2:	b25b      	sxtb	r3, r3
 800d0b4:	002a      	movs	r2, r5
 800d0b6:	f006 f8e0 	bl	801327a <RegionApplyDrOffset>
 800d0ba:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0bc:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800d0be:	4a61      	ldr	r2, [pc, #388]	; (800d244 <ScheduleTx+0x2e4>)
 800d0c0:	238e      	movs	r3, #142	; 0x8e
 800d0c2:	00db      	lsls	r3, r3, #3
 800d0c4:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0c6:	22dc      	movs	r2, #220	; 0xdc
 800d0c8:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800d0ca:	4a5e      	ldr	r2, [pc, #376]	; (800d244 <ScheduleTx+0x2e4>)
 800d0cc:	238e      	movs	r3, #142	; 0x8e
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0d2:	22d8      	movs	r2, #216	; 0xd8
 800d0d4:	589a      	ldr	r2, [r3, r2]
 800d0d6:	4b5e      	ldr	r3, [pc, #376]	; (800d250 <ScheduleTx+0x2f0>)
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	0013      	movs	r3, r2
 800d0dc:	0002      	movs	r2, r0
 800d0de:	0020      	movs	r0, r4
 800d0e0:	f005 ff7e 	bl	8012fe0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0e4:	4a57      	ldr	r2, [pc, #348]	; (800d244 <ScheduleTx+0x2e4>)
 800d0e6:	238e      	movs	r3, #142	; 0x8e
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	58d3      	ldr	r3, [r2, r3]
 800d0ec:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800d0ee:	4a55      	ldr	r2, [pc, #340]	; (800d244 <ScheduleTx+0x2e4>)
 800d0f0:	238e      	movs	r3, #142	; 0x8e
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	58d3      	ldr	r3, [r2, r3]
 800d0f6:	22fc      	movs	r2, #252	; 0xfc
 800d0f8:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d0fa:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800d0fc:	4a51      	ldr	r2, [pc, #324]	; (800d244 <ScheduleTx+0x2e4>)
 800d0fe:	238e      	movs	r3, #142	; 0x8e
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d104:	22dc      	movs	r2, #220	; 0xdc
 800d106:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800d108:	4a4e      	ldr	r2, [pc, #312]	; (800d244 <ScheduleTx+0x2e4>)
 800d10a:	238e      	movs	r3, #142	; 0x8e
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800d110:	22d8      	movs	r2, #216	; 0xd8
 800d112:	589a      	ldr	r2, [r3, r2]
 800d114:	4b4f      	ldr	r3, [pc, #316]	; (800d254 <ScheduleTx+0x2f4>)
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	0013      	movs	r3, r2
 800d11a:	0022      	movs	r2, r4
 800d11c:	f005 ff60 	bl	8012fe0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800d120:	4a48      	ldr	r2, [pc, #288]	; (800d244 <ScheduleTx+0x2e4>)
 800d122:	238e      	movs	r3, #142	; 0x8e
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	58d2      	ldr	r2, [r2, r3]
 800d128:	2389      	movs	r3, #137	; 0x89
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	5cd3      	ldrb	r3, [r2, r3]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d11e      	bne.n	800d170 <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d132:	4a44      	ldr	r2, [pc, #272]	; (800d244 <ScheduleTx+0x2e4>)
 800d134:	238e      	movs	r3, #142	; 0x8e
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	58d3      	ldr	r3, [r2, r3]
 800d13a:	22ec      	movs	r2, #236	; 0xec
 800d13c:	589b      	ldr	r3, [r3, r2]
 800d13e:	4941      	ldr	r1, [pc, #260]	; (800d244 <ScheduleTx+0x2e4>)
 800d140:	22f6      	movs	r2, #246	; 0xf6
 800d142:	0092      	lsls	r2, r2, #2
 800d144:	588a      	ldr	r2, [r1, r2]
 800d146:	1899      	adds	r1, r3, r2
 800d148:	4a3e      	ldr	r2, [pc, #248]	; (800d244 <ScheduleTx+0x2e4>)
 800d14a:	23f1      	movs	r3, #241	; 0xf1
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d150:	4a3c      	ldr	r2, [pc, #240]	; (800d244 <ScheduleTx+0x2e4>)
 800d152:	238e      	movs	r3, #142	; 0x8e
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	58d3      	ldr	r3, [r2, r3]
 800d158:	22f0      	movs	r2, #240	; 0xf0
 800d15a:	589b      	ldr	r3, [r3, r2]
 800d15c:	4939      	ldr	r1, [pc, #228]	; (800d244 <ScheduleTx+0x2e4>)
 800d15e:	22fb      	movs	r2, #251	; 0xfb
 800d160:	0092      	lsls	r2, r2, #2
 800d162:	588a      	ldr	r2, [r1, r2]
 800d164:	1899      	adds	r1, r3, r2
 800d166:	4a37      	ldr	r2, [pc, #220]	; (800d244 <ScheduleTx+0x2e4>)
 800d168:	23f2      	movs	r3, #242	; 0xf2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	50d1      	str	r1, [r2, r3]
 800d16e:	e03d      	b.n	800d1ec <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d170:	2308      	movs	r3, #8
 800d172:	18fb      	adds	r3, r7, r3
 800d174:	0018      	movs	r0, r3
 800d176:	f003 f9bf 	bl	80104f8 <LoRaMacCommandsGetSizeSerializedCmds>
 800d17a:	1e03      	subs	r3, r0, #0
 800d17c:	d001      	beq.n	800d182 <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d17e:	2313      	movs	r3, #19
 800d180:	e05c      	b.n	800d23c <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800d182:	4b30      	ldr	r3, [pc, #192]	; (800d244 <ScheduleTx+0x2e4>)
 800d184:	4a34      	ldr	r2, [pc, #208]	; (800d258 <ScheduleTx+0x2f8>)
 800d186:	5c98      	ldrb	r0, [r3, r2]
 800d188:	4a2e      	ldr	r2, [pc, #184]	; (800d244 <ScheduleTx+0x2e4>)
 800d18a:	238e      	movs	r3, #142	; 0x8e
 800d18c:	00db      	lsls	r3, r3, #3
 800d18e:	58d3      	ldr	r3, [r2, r3]
 800d190:	22d5      	movs	r2, #213	; 0xd5
 800d192:	569b      	ldrsb	r3, [r3, r2]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	0019      	movs	r1, r3
 800d19a:	f7fe ff31 	bl	800c000 <ValidatePayloadLength>
 800d19e:	0003      	movs	r3, r0
 800d1a0:	001a      	movs	r2, r3
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	4053      	eors	r3, r2
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	e045      	b.n	800d23c <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d1b0:	4a24      	ldr	r2, [pc, #144]	; (800d244 <ScheduleTx+0x2e4>)
 800d1b2:	238e      	movs	r3, #142	; 0x8e
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	58d3      	ldr	r3, [r2, r3]
 800d1b8:	22e4      	movs	r2, #228	; 0xe4
 800d1ba:	589b      	ldr	r3, [r3, r2]
 800d1bc:	4921      	ldr	r1, [pc, #132]	; (800d244 <ScheduleTx+0x2e4>)
 800d1be:	22f6      	movs	r2, #246	; 0xf6
 800d1c0:	0092      	lsls	r2, r2, #2
 800d1c2:	588a      	ldr	r2, [r1, r2]
 800d1c4:	1899      	adds	r1, r3, r2
 800d1c6:	4a1f      	ldr	r2, [pc, #124]	; (800d244 <ScheduleTx+0x2e4>)
 800d1c8:	23f1      	movs	r3, #241	; 0xf1
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d1ce:	4a1d      	ldr	r2, [pc, #116]	; (800d244 <ScheduleTx+0x2e4>)
 800d1d0:	238e      	movs	r3, #142	; 0x8e
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	58d3      	ldr	r3, [r2, r3]
 800d1d6:	22e8      	movs	r2, #232	; 0xe8
 800d1d8:	589b      	ldr	r3, [r3, r2]
 800d1da:	491a      	ldr	r1, [pc, #104]	; (800d244 <ScheduleTx+0x2e4>)
 800d1dc:	22fb      	movs	r2, #251	; 0xfb
 800d1de:	0092      	lsls	r2, r2, #2
 800d1e0:	588a      	ldr	r2, [r1, r2]
 800d1e2:	1899      	adds	r1, r3, r2
 800d1e4:	4a17      	ldr	r2, [pc, #92]	; (800d244 <ScheduleTx+0x2e4>)
 800d1e6:	23f2      	movs	r3, #242	; 0xf2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800d1ec:	4a15      	ldr	r2, [pc, #84]	; (800d244 <ScheduleTx+0x2e4>)
 800d1ee:	238e      	movs	r3, #142	; 0x8e
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	58d3      	ldr	r3, [r2, r3]
 800d1f4:	22d5      	movs	r2, #213	; 0xd5
 800d1f6:	569b      	ldrsb	r3, [r3, r2]
 800d1f8:	b2d8      	uxtb	r0, r3
 800d1fa:	4a12      	ldr	r2, [pc, #72]	; (800d244 <ScheduleTx+0x2e4>)
 800d1fc:	238e      	movs	r3, #142	; 0x8e
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	58d2      	ldr	r2, [r2, r3]
 800d202:	2314      	movs	r3, #20
 800d204:	33ff      	adds	r3, #255	; 0xff
 800d206:	5cd3      	ldrb	r3, [r2, r3]
 800d208:	251e      	movs	r5, #30
 800d20a:	197c      	adds	r4, r7, r5
 800d20c:	0019      	movs	r1, r3
 800d20e:	f000 f825 	bl	800d25c <SecureFrame>
 800d212:	0003      	movs	r3, r0
 800d214:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800d216:	197b      	adds	r3, r7, r5
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <ScheduleTx+0x2c6>
    {
        return retval;
 800d21e:	231e      	movs	r3, #30
 800d220:	18fb      	adds	r3, r7, r3
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	e00a      	b.n	800d23c <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800d226:	4a07      	ldr	r2, [pc, #28]	; (800d244 <ScheduleTx+0x2e4>)
 800d228:	238e      	movs	r3, #142	; 0x8e
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	58d2      	ldr	r2, [r2, r3]
 800d22e:	2314      	movs	r3, #20
 800d230:	33ff      	adds	r3, #255	; 0xff
 800d232:	5cd3      	ldrb	r3, [r2, r3]
 800d234:	0018      	movs	r0, r3
 800d236:	f000 fb59 	bl	800d8ec <SendFrameOnChannel>
 800d23a:	0003      	movs	r3, r0
}
 800d23c:	0018      	movs	r0, r3
 800d23e:	46bd      	mov	sp, r7
 800d240:	b009      	add	sp, #36	; 0x24
 800d242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d244:	20000708 	.word	0x20000708
 800d248:	20000a4c 	.word	0x20000a4c
 800d24c:	20000a84 	.word	0x20000a84
 800d250:	20000ad4 	.word	0x20000ad4
 800d254:	20000ae8 	.word	0x20000ae8
 800d258:	0000023f 	.word	0x0000023f

0800d25c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	0002      	movs	r2, r0
 800d264:	1dfb      	adds	r3, r7, #7
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	1dbb      	adds	r3, r7, #6
 800d26a:	1c0a      	adds	r2, r1, #0
 800d26c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d26e:	230f      	movs	r3, #15
 800d270:	18fb      	adds	r3, r7, r3
 800d272:	2210      	movs	r2, #16
 800d274:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800d27a:	4a25      	ldr	r2, [pc, #148]	; (800d310 <SecureFrame+0xb4>)
 800d27c:	2386      	movs	r3, #134	; 0x86
 800d27e:	005b      	lsls	r3, r3, #1
 800d280:	5cd3      	ldrb	r3, [r2, r3]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <SecureFrame+0x30>
 800d286:	2b04      	cmp	r3, #4
 800d288:	d016      	beq.n	800d2b8 <SecureFrame+0x5c>
 800d28a:	e039      	b.n	800d300 <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d28c:	250f      	movs	r5, #15
 800d28e:	197c      	adds	r4, r7, r5
 800d290:	4b20      	ldr	r3, [pc, #128]	; (800d314 <SecureFrame+0xb8>)
 800d292:	0018      	movs	r0, r3
 800d294:	f004 fb88 	bl	80119a8 <LoRaMacCryptoPrepareJoinRequest>
 800d298:	0003      	movs	r3, r0
 800d29a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d29c:	197b      	adds	r3, r7, r5
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d2a4:	2311      	movs	r3, #17
 800d2a6:	e02e      	b.n	800d306 <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d2a8:	4a19      	ldr	r2, [pc, #100]	; (800d310 <SecureFrame+0xb4>)
 800d2aa:	238a      	movs	r3, #138	; 0x8a
 800d2ac:	005b      	lsls	r3, r3, #1
 800d2ae:	5cd3      	ldrb	r3, [r2, r3]
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	4b17      	ldr	r3, [pc, #92]	; (800d310 <SecureFrame+0xb4>)
 800d2b4:	811a      	strh	r2, [r3, #8]
            break;
 800d2b6:	e025      	b.n	800d304 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d2b8:	2308      	movs	r3, #8
 800d2ba:	18fb      	adds	r3, r7, r3
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f005 f999 	bl	80125f4 <LoRaMacGetFCntUp>
 800d2c2:	1e03      	subs	r3, r0, #0
 800d2c4:	d001      	beq.n	800d2ca <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d2c6:	2312      	movs	r3, #18
 800d2c8:	e01d      	b.n	800d306 <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d2ca:	68b8      	ldr	r0, [r7, #8]
 800d2cc:	260f      	movs	r6, #15
 800d2ce:	19bc      	adds	r4, r7, r6
 800d2d0:	4d10      	ldr	r5, [pc, #64]	; (800d314 <SecureFrame+0xb8>)
 800d2d2:	1dbb      	adds	r3, r7, #6
 800d2d4:	781a      	ldrb	r2, [r3, #0]
 800d2d6:	1dfb      	adds	r3, r7, #7
 800d2d8:	7819      	ldrb	r1, [r3, #0]
 800d2da:	002b      	movs	r3, r5
 800d2dc:	f004 fe52 	bl	8011f84 <LoRaMacCryptoSecureMessage>
 800d2e0:	0003      	movs	r3, r0
 800d2e2:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d2e4:	19bb      	adds	r3, r7, r6
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d2ec:	2311      	movs	r3, #17
 800d2ee:	e00a      	b.n	800d306 <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d2f0:	4a07      	ldr	r2, [pc, #28]	; (800d310 <SecureFrame+0xb4>)
 800d2f2:	238a      	movs	r3, #138	; 0x8a
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	5cd3      	ldrb	r3, [r2, r3]
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	4b05      	ldr	r3, [pc, #20]	; (800d310 <SecureFrame+0xb4>)
 800d2fc:	811a      	strh	r2, [r3, #8]
            break;
 800d2fe:	e001      	b.n	800d304 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800d300:	2303      	movs	r3, #3
 800d302:	e000      	b.n	800d306 <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	0018      	movs	r0, r3
 800d308:	46bd      	mov	sp, r7
 800d30a:	b005      	add	sp, #20
 800d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30e:	46c0      	nop			; (mov r8, r8)
 800d310:	20000708 	.word	0x20000708
 800d314:	20000818 	.word	0x20000818

0800d318 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800d318:	b590      	push	{r4, r7, lr}
 800d31a:	b087      	sub	sp, #28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	0002      	movs	r2, r0
 800d320:	1dfb      	adds	r3, r7, #7
 800d322:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800d324:	4a31      	ldr	r2, [pc, #196]	; (800d3ec <CalculateBackOff+0xd4>)
 800d326:	238e      	movs	r3, #142	; 0x8e
 800d328:	00db      	lsls	r3, r3, #3
 800d32a:	58d2      	ldr	r2, [r2, r3]
 800d32c:	2389      	movs	r3, #137	; 0x89
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	5cd3      	ldrb	r3, [r2, r3]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d104      	bne.n	800d340 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800d336:	230c      	movs	r3, #12
 800d338:	18fb      	adds	r3, r7, r3
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	e003      	b.n	800d348 <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800d340:	230c      	movs	r3, #12
 800d342:	18fb      	adds	r3, r7, r3
 800d344:	2201      	movs	r2, #1
 800d346:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800d348:	4a28      	ldr	r2, [pc, #160]	; (800d3ec <CalculateBackOff+0xd4>)
 800d34a:	238e      	movs	r3, #142	; 0x8e
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	58d2      	ldr	r2, [r2, r3]
 800d350:	2389      	movs	r3, #137	; 0x89
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	5cd2      	ldrb	r2, [r2, r3]
 800d356:	240c      	movs	r4, #12
 800d358:	193b      	adds	r3, r7, r4
 800d35a:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800d35c:	193b      	adds	r3, r7, r4
 800d35e:	1dfa      	adds	r2, r7, #7
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800d364:	4a21      	ldr	r2, [pc, #132]	; (800d3ec <CalculateBackOff+0xd4>)
 800d366:	23d2      	movs	r3, #210	; 0xd2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	58d3      	ldr	r3, [r2, r3]
 800d36c:	0018      	movs	r0, r3
 800d36e:	f008 faf8 	bl	8015962 <TimerGetElapsedTime>
 800d372:	0002      	movs	r2, r0
 800d374:	193b      	adds	r3, r7, r4
 800d376:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d378:	4b1c      	ldr	r3, [pc, #112]	; (800d3ec <CalculateBackOff+0xd4>)
 800d37a:	4a1d      	ldr	r2, [pc, #116]	; (800d3f0 <CalculateBackOff+0xd8>)
 800d37c:	589a      	ldr	r2, [r3, r2]
 800d37e:	193b      	adds	r3, r7, r4
 800d380:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800d382:	193b      	adds	r3, r7, r4
 800d384:	2200      	movs	r2, #0
 800d386:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800d388:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <CalculateBackOff+0xd4>)
 800d38a:	4a1a      	ldr	r2, [pc, #104]	; (800d3f4 <CalculateBackOff+0xdc>)
 800d38c:	5c9b      	ldrb	r3, [r3, r2]
 800d38e:	2204      	movs	r2, #4
 800d390:	4013      	ands	r3, r2
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d008      	beq.n	800d3aa <CalculateBackOff+0x92>
 800d398:	2000      	movs	r0, #0
 800d39a:	f003 faa9 	bl	80108f0 <LoRaMacConfirmQueueIsCmdActive>
 800d39e:	1e03      	subs	r3, r0, #0
 800d3a0:	d003      	beq.n	800d3aa <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800d3a2:	230c      	movs	r3, #12
 800d3a4:	18fb      	adds	r3, r7, r3
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800d3aa:	4a10      	ldr	r2, [pc, #64]	; (800d3ec <CalculateBackOff+0xd4>)
 800d3ac:	238e      	movs	r3, #142	; 0x8e
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	58d3      	ldr	r3, [r2, r3]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	220c      	movs	r2, #12
 800d3b6:	18ba      	adds	r2, r7, r2
 800d3b8:	0011      	movs	r1, r2
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	f005 ff02 	bl	80131c4 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800d3c0:	4a0a      	ldr	r2, [pc, #40]	; (800d3ec <CalculateBackOff+0xd4>)
 800d3c2:	238e      	movs	r3, #142	; 0x8e
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	58d2      	ldr	r2, [r2, r3]
 800d3c8:	2387      	movs	r3, #135	; 0x87
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	5ad3      	ldrh	r3, [r2, r3]
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	4a06      	ldr	r2, [pc, #24]	; (800d3ec <CalculateBackOff+0xd4>)
 800d3d2:	4907      	ldr	r1, [pc, #28]	; (800d3f0 <CalculateBackOff+0xd8>)
 800d3d4:	5852      	ldr	r2, [r2, r1]
 800d3d6:	435a      	muls	r2, r3
 800d3d8:	0011      	movs	r1, r2
 800d3da:	4a04      	ldr	r2, [pc, #16]	; (800d3ec <CalculateBackOff+0xd4>)
 800d3dc:	23d1      	movs	r3, #209	; 0xd1
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	50d1      	str	r1, [r2, r3]
}
 800d3e2:	46c0      	nop			; (mov r8, r8)
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	b007      	add	sp, #28
 800d3e8:	bd90      	pop	{r4, r7, pc}
 800d3ea:	46c0      	nop			; (mov r8, r8)
 800d3ec:	20000708 	.word	0x20000708
 800d3f0:	0000040c 	.word	0x0000040c
 800d3f4:	0000046d 	.word	0x0000046d

0800d3f8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	1d3b      	adds	r3, r7, #4
 800d400:	7019      	strb	r1, [r3, #0]
 800d402:	0011      	movs	r1, r2
 800d404:	1dfb      	adds	r3, r7, #7
 800d406:	1c02      	adds	r2, r0, #0
 800d408:	701a      	strb	r2, [r3, #0]
 800d40a:	1dbb      	adds	r3, r7, #6
 800d40c:	1c0a      	adds	r2, r1, #0
 800d40e:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800d410:	1dfb      	adds	r3, r7, #7
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d003      	beq.n	800d420 <RemoveMacCommands+0x28>
 800d418:	1dfb      	adds	r3, r7, #7
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d10f      	bne.n	800d440 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800d420:	1dbb      	adds	r3, r7, #6
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d109      	bne.n	800d43c <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800d428:	1d3b      	adds	r3, r7, #4
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2220      	movs	r2, #32
 800d42e:	4013      	ands	r3, r2
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d004      	beq.n	800d440 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800d436:	f003 f823 	bl	8010480 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800d43a:	e001      	b.n	800d440 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800d43c:	f003 f820 	bl	8010480 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800d440:	46c0      	nop			; (mov r8, r8)
 800d442:	46bd      	mov	sp, r7
 800d444:	b002      	add	sp, #8
 800d446:	bd80      	pop	{r7, pc}

0800d448 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800d44e:	4a6d      	ldr	r2, [pc, #436]	; (800d604 <ResetMacParameters+0x1bc>)
 800d450:	238e      	movs	r3, #142	; 0x8e
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	58d2      	ldr	r2, [r2, r3]
 800d456:	2389      	movs	r3, #137	; 0x89
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	2100      	movs	r1, #0
 800d45c:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800d45e:	4a69      	ldr	r2, [pc, #420]	; (800d604 <ResetMacParameters+0x1bc>)
 800d460:	238e      	movs	r3, #142	; 0x8e
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	58d3      	ldr	r3, [r2, r3]
 800d466:	22cc      	movs	r2, #204	; 0xcc
 800d468:	2100      	movs	r1, #0
 800d46a:	5099      	str	r1, [r3, r2]

    // Initialize the uplink and downlink counters default value
    LoRaMacResetFCnts( );
 800d46c:	f005 f8e8 	bl	8012640 <LoRaMacResetFCnts>

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800d470:	4a64      	ldr	r2, [pc, #400]	; (800d604 <ResetMacParameters+0x1bc>)
 800d472:	238e      	movs	r3, #142	; 0x8e
 800d474:	00db      	lsls	r3, r3, #3
 800d476:	58d2      	ldr	r2, [r2, r3]
 800d478:	2388      	movs	r3, #136	; 0x88
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	2100      	movs	r1, #0
 800d47e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800d480:	4a60      	ldr	r2, [pc, #384]	; (800d604 <ResetMacParameters+0x1bc>)
 800d482:	238e      	movs	r3, #142	; 0x8e
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	58d3      	ldr	r3, [r2, r3]
 800d488:	4a5f      	ldr	r2, [pc, #380]	; (800d608 <ResetMacParameters+0x1c0>)
 800d48a:	2101      	movs	r1, #1
 800d48c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800d48e:	4a5d      	ldr	r2, [pc, #372]	; (800d604 <ResetMacParameters+0x1bc>)
 800d490:	238e      	movs	r3, #142	; 0x8e
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	58d3      	ldr	r3, [r2, r3]
 800d496:	4a5d      	ldr	r2, [pc, #372]	; (800d60c <ResetMacParameters+0x1c4>)
 800d498:	2101      	movs	r1, #1
 800d49a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800d49c:	4a59      	ldr	r2, [pc, #356]	; (800d604 <ResetMacParameters+0x1bc>)
 800d49e:	238e      	movs	r3, #142	; 0x8e
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	58d2      	ldr	r2, [r2, r3]
 800d4a4:	2386      	movs	r3, #134	; 0x86
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	54d1      	strb	r1, [r2, r3]

    MacCtx.NvmCtx->MaxDCycle = 0;
 800d4ac:	4a55      	ldr	r2, [pc, #340]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4ae:	238e      	movs	r3, #142	; 0x8e
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	58d2      	ldr	r2, [r2, r3]
 800d4b4:	2312      	movs	r3, #18
 800d4b6:	33ff      	adds	r3, #255	; 0xff
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800d4bc:	4a51      	ldr	r2, [pc, #324]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4be:	238e      	movs	r3, #142	; 0x8e
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	58d2      	ldr	r2, [r2, r3]
 800d4c4:	2387      	movs	r3, #135	; 0x87
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	2101      	movs	r1, #1
 800d4ca:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800d4cc:	4a4d      	ldr	r2, [pc, #308]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4ce:	238e      	movs	r3, #142	; 0x8e
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	58d2      	ldr	r2, [r2, r3]
 800d4d4:	494b      	ldr	r1, [pc, #300]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4d6:	238e      	movs	r3, #142	; 0x8e
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	58cb      	ldr	r3, [r1, r3]
 800d4dc:	2104      	movs	r1, #4
 800d4de:	5651      	ldrsb	r1, [r2, r1]
 800d4e0:	22d4      	movs	r2, #212	; 0xd4
 800d4e2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800d4e4:	4a47      	ldr	r2, [pc, #284]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4e6:	238e      	movs	r3, #142	; 0x8e
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	58d2      	ldr	r2, [r2, r3]
 800d4ec:	4945      	ldr	r1, [pc, #276]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4ee:	238e      	movs	r3, #142	; 0x8e
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	58cb      	ldr	r3, [r1, r3]
 800d4f4:	2105      	movs	r1, #5
 800d4f6:	5651      	ldrsb	r1, [r2, r1]
 800d4f8:	22d5      	movs	r2, #213	; 0xd5
 800d4fa:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800d4fc:	4a41      	ldr	r2, [pc, #260]	; (800d604 <ResetMacParameters+0x1bc>)
 800d4fe:	238e      	movs	r3, #142	; 0x8e
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	58d2      	ldr	r2, [r2, r3]
 800d504:	493f      	ldr	r1, [pc, #252]	; (800d604 <ResetMacParameters+0x1bc>)
 800d506:	238e      	movs	r3, #142	; 0x8e
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	58cb      	ldr	r3, [r1, r3]
 800d50c:	2125      	movs	r1, #37	; 0x25
 800d50e:	5c51      	ldrb	r1, [r2, r1]
 800d510:	22f5      	movs	r2, #245	; 0xf5
 800d512:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800d514:	4a3b      	ldr	r2, [pc, #236]	; (800d604 <ResetMacParameters+0x1bc>)
 800d516:	238e      	movs	r3, #142	; 0x8e
 800d518:	00db      	lsls	r3, r3, #3
 800d51a:	58d2      	ldr	r2, [r2, r3]
 800d51c:	4939      	ldr	r1, [pc, #228]	; (800d604 <ResetMacParameters+0x1bc>)
 800d51e:	238e      	movs	r3, #142	; 0x8e
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	58cb      	ldr	r3, [r1, r3]
 800d524:	21f8      	movs	r1, #248	; 0xf8
 800d526:	185b      	adds	r3, r3, r1
 800d528:	3228      	adds	r2, #40	; 0x28
 800d52a:	ca03      	ldmia	r2!, {r0, r1}
 800d52c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800d52e:	4a35      	ldr	r2, [pc, #212]	; (800d604 <ResetMacParameters+0x1bc>)
 800d530:	238e      	movs	r3, #142	; 0x8e
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	58d3      	ldr	r3, [r2, r3]
 800d536:	4933      	ldr	r1, [pc, #204]	; (800d604 <ResetMacParameters+0x1bc>)
 800d538:	228e      	movs	r2, #142	; 0x8e
 800d53a:	00d2      	lsls	r2, r2, #3
 800d53c:	588a      	ldr	r2, [r1, r2]
 800d53e:	2130      	movs	r1, #48	; 0x30
 800d540:	5c59      	ldrb	r1, [r3, r1]
 800d542:	2380      	movs	r3, #128	; 0x80
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800d548:	4a2e      	ldr	r2, [pc, #184]	; (800d604 <ResetMacParameters+0x1bc>)
 800d54a:	238e      	movs	r3, #142	; 0x8e
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	58d3      	ldr	r3, [r2, r3]
 800d550:	492c      	ldr	r1, [pc, #176]	; (800d604 <ResetMacParameters+0x1bc>)
 800d552:	228e      	movs	r2, #142	; 0x8e
 800d554:	00d2      	lsls	r2, r2, #3
 800d556:	588a      	ldr	r2, [r1, r2]
 800d558:	2131      	movs	r1, #49	; 0x31
 800d55a:	5c59      	ldrb	r1, [r3, r1]
 800d55c:	2302      	movs	r3, #2
 800d55e:	33ff      	adds	r3, #255	; 0xff
 800d560:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800d562:	4a28      	ldr	r2, [pc, #160]	; (800d604 <ResetMacParameters+0x1bc>)
 800d564:	238e      	movs	r3, #142	; 0x8e
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	58d3      	ldr	r3, [r2, r3]
 800d56a:	4926      	ldr	r1, [pc, #152]	; (800d604 <ResetMacParameters+0x1bc>)
 800d56c:	228e      	movs	r2, #142	; 0x8e
 800d56e:	00d2      	lsls	r2, r2, #3
 800d570:	588a      	ldr	r2, [r1, r2]
 800d572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d574:	2382      	movs	r3, #130	; 0x82
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800d57a:	4a22      	ldr	r2, [pc, #136]	; (800d604 <ResetMacParameters+0x1bc>)
 800d57c:	238e      	movs	r3, #142	; 0x8e
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	58d3      	ldr	r3, [r2, r3]
 800d582:	4920      	ldr	r1, [pc, #128]	; (800d604 <ResetMacParameters+0x1bc>)
 800d584:	228e      	movs	r2, #142	; 0x8e
 800d586:	00d2      	lsls	r2, r2, #3
 800d588:	588a      	ldr	r2, [r1, r2]
 800d58a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d58c:	2384      	movs	r3, #132	; 0x84
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	50d1      	str	r1, [r2, r3]

    MacCtx.NvmCtx->NodeAckRequested = false;
 800d592:	4a1c      	ldr	r2, [pc, #112]	; (800d604 <ResetMacParameters+0x1bc>)
 800d594:	238e      	movs	r3, #142	; 0x8e
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	58d3      	ldr	r3, [r2, r3]
 800d59a:	4a1d      	ldr	r2, [pc, #116]	; (800d610 <ResetMacParameters+0x1c8>)
 800d59c:	2100      	movs	r1, #0
 800d59e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800d5a0:	4a18      	ldr	r2, [pc, #96]	; (800d604 <ResetMacParameters+0x1bc>)
 800d5a2:	238e      	movs	r3, #142	; 0x8e
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	58d3      	ldr	r3, [r2, r3]
 800d5a8:	4a1a      	ldr	r2, [pc, #104]	; (800d614 <ResetMacParameters+0x1cc>)
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	5499      	strb	r1, [r3, r2]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800d5ae:	003b      	movs	r3, r7
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800d5b4:	003b      	movs	r3, r7
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d5ba:	4a12      	ldr	r2, [pc, #72]	; (800d604 <ResetMacParameters+0x1bc>)
 800d5bc:	238e      	movs	r3, #142	; 0x8e
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	58d3      	ldr	r3, [r2, r3]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	003a      	movs	r2, r7
 800d5c6:	0011      	movs	r1, r2
 800d5c8:	0018      	movs	r0, r3
 800d5ca:	f005 fc96 	bl	8012efa <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.NvmCtx->Channel = 0;
 800d5ce:	4a0d      	ldr	r2, [pc, #52]	; (800d604 <ResetMacParameters+0x1bc>)
 800d5d0:	238e      	movs	r3, #142	; 0x8e
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	58d2      	ldr	r2, [r2, r3]
 800d5d6:	2314      	movs	r3, #20
 800d5d8:	33ff      	adds	r3, #255	; 0xff
 800d5da:	2100      	movs	r1, #0
 800d5dc:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800d5de:	4a09      	ldr	r2, [pc, #36]	; (800d604 <ResetMacParameters+0x1bc>)
 800d5e0:	238e      	movs	r3, #142	; 0x8e
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	58d1      	ldr	r1, [r2, r3]
 800d5e6:	4a07      	ldr	r2, [pc, #28]	; (800d604 <ResetMacParameters+0x1bc>)
 800d5e8:	238e      	movs	r3, #142	; 0x8e
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	58d2      	ldr	r2, [r2, r3]
 800d5ee:	2314      	movs	r3, #20
 800d5f0:	33ff      	adds	r3, #255	; 0xff
 800d5f2:	5cc9      	ldrb	r1, [r1, r3]
 800d5f4:	238a      	movs	r3, #138	; 0x8a
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	54d1      	strb	r1, [r2, r3]
}
 800d5fa:	46c0      	nop			; (mov r8, r8)
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	b002      	add	sp, #8
 800d600:	bd80      	pop	{r7, pc}
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	20000708 	.word	0x20000708
 800d608:	00000216 	.word	0x00000216
 800d60c:	00000217 	.word	0x00000217
 800d610:	00000219 	.word	0x00000219
 800d614:	0000021a 	.word	0x0000021a

0800d618 <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800d61c:	2000      	movs	r0, #0
 800d61e:	f7fe fb01 	bl	800bc24 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d622:	4b03      	ldr	r3, [pc, #12]	; (800d630 <OpenContinuousRx2Window+0x18>)
 800d624:	4a03      	ldr	r2, [pc, #12]	; (800d634 <OpenContinuousRx2Window+0x1c>)
 800d626:	2102      	movs	r1, #2
 800d628:	5499      	strb	r1, [r3, r2]
}
 800d62a:	46c0      	nop			; (mov r8, r8)
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	20000708 	.word	0x20000708
 800d634:	0000046c 	.word	0x0000046c

0800d638 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d638:	b590      	push	{r4, r7, lr}
 800d63a:	b089      	sub	sp, #36	; 0x24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	603b      	str	r3, [r7, #0]
 800d644:	1dfb      	adds	r3, r7, #7
 800d646:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 800d648:	4ba0      	ldr	r3, [pc, #640]	; (800d8cc <PrepareFrame+0x294>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	811a      	strh	r2, [r3, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800d64e:	4a9f      	ldr	r2, [pc, #636]	; (800d8cc <PrepareFrame+0x294>)
 800d650:	238e      	movs	r3, #142	; 0x8e
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	58d3      	ldr	r3, [r2, r3]
 800d656:	4a9e      	ldr	r2, [pc, #632]	; (800d8d0 <PrepareFrame+0x298>)
 800d658:	2100      	movs	r1, #0
 800d65a:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800d660:	2300      	movs	r3, #0
 800d662:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800d664:	231f      	movs	r3, #31
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	2200      	movs	r2, #0
 800d66a:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d103      	bne.n	800d67a <PrepareFrame+0x42>
    {
        fBufferSize = 0;
 800d672:	2330      	movs	r3, #48	; 0x30
 800d674:	18fb      	adds	r3, r7, r3
 800d676:	2200      	movs	r2, #0
 800d678:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d67a:	2430      	movs	r4, #48	; 0x30
 800d67c:	193b      	adds	r3, r7, r4
 800d67e:	881a      	ldrh	r2, [r3, #0]
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	4b94      	ldr	r3, [pc, #592]	; (800d8d4 <PrepareFrame+0x29c>)
 800d684:	0018      	movs	r0, r3
 800d686:	f008 f9b9 	bl	80159fc <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d68a:	193b      	adds	r3, r7, r4
 800d68c:	881b      	ldrh	r3, [r3, #0]
 800d68e:	b2d9      	uxtb	r1, r3
 800d690:	4b8e      	ldr	r3, [pc, #568]	; (800d8cc <PrepareFrame+0x294>)
 800d692:	4a91      	ldr	r2, [pc, #580]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d694:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	781a      	ldrb	r2, [r3, #0]
 800d69a:	4b8c      	ldr	r3, [pc, #560]	; (800d8cc <PrepareFrame+0x294>)
 800d69c:	729a      	strb	r2, [r3, #10]

    switch( macHdr->Bits.MType )
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	061b      	lsls	r3, r3, #24
 800d6a4:	0f5b      	lsrs	r3, r3, #29
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b04      	cmp	r3, #4
 800d6aa:	d005      	beq.n	800d6b8 <PrepareFrame+0x80>
 800d6ac:	2b07      	cmp	r3, #7
 800d6ae:	d100      	bne.n	800d6b2 <PrepareFrame+0x7a>
 800d6b0:	e0e7      	b.n	800d882 <PrepareFrame+0x24a>
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d007      	beq.n	800d6c6 <PrepareFrame+0x8e>
 800d6b6:	e0fe      	b.n	800d8b6 <PrepareFrame+0x27e>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NvmCtx->NodeAckRequested = true;
 800d6b8:	4a84      	ldr	r2, [pc, #528]	; (800d8cc <PrepareFrame+0x294>)
 800d6ba:	238e      	movs	r3, #142	; 0x8e
 800d6bc:	00db      	lsls	r3, r3, #3
 800d6be:	58d3      	ldr	r3, [r2, r3]
 800d6c0:	4a83      	ldr	r2, [pc, #524]	; (800d8d0 <PrepareFrame+0x298>)
 800d6c2:	2101      	movs	r1, #1
 800d6c4:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d6c6:	4a81      	ldr	r2, [pc, #516]	; (800d8cc <PrepareFrame+0x294>)
 800d6c8:	2386      	movs	r3, #134	; 0x86
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	2104      	movs	r1, #4
 800d6ce:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d6d0:	4a7e      	ldr	r2, [pc, #504]	; (800d8cc <PrepareFrame+0x294>)
 800d6d2:	2388      	movs	r3, #136	; 0x88
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	4981      	ldr	r1, [pc, #516]	; (800d8dc <PrepareFrame+0x2a4>)
 800d6d8:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d6da:	4a7c      	ldr	r2, [pc, #496]	; (800d8cc <PrepareFrame+0x294>)
 800d6dc:	238a      	movs	r3, #138	; 0x8a
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	21ff      	movs	r1, #255	; 0xff
 800d6e2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	7819      	ldrb	r1, [r3, #0]
 800d6e8:	4a78      	ldr	r2, [pc, #480]	; (800d8cc <PrepareFrame+0x294>)
 800d6ea:	2316      	movs	r3, #22
 800d6ec:	33ff      	adds	r3, #255	; 0xff
 800d6ee:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d6f0:	4a76      	ldr	r2, [pc, #472]	; (800d8cc <PrepareFrame+0x294>)
 800d6f2:	1df9      	adds	r1, r7, #7
 800d6f4:	2398      	movs	r3, #152	; 0x98
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	7809      	ldrb	r1, [r1, #0]
 800d6fa:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800d6fc:	4a73      	ldr	r2, [pc, #460]	; (800d8cc <PrepareFrame+0x294>)
 800d6fe:	238e      	movs	r3, #142	; 0x8e
 800d700:	00db      	lsls	r3, r3, #3
 800d702:	58d3      	ldr	r3, [r2, r3]
 800d704:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d706:	4a71      	ldr	r2, [pc, #452]	; (800d8cc <PrepareFrame+0x294>)
 800d708:	238c      	movs	r3, #140	; 0x8c
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7819      	ldrb	r1, [r3, #0]
 800d712:	4a6e      	ldr	r2, [pc, #440]	; (800d8cc <PrepareFrame+0x294>)
 800d714:	238e      	movs	r3, #142	; 0x8e
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d71a:	4b6c      	ldr	r3, [pc, #432]	; (800d8cc <PrepareFrame+0x294>)
 800d71c:	4a6e      	ldr	r2, [pc, #440]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d71e:	5c99      	ldrb	r1, [r3, r2]
 800d720:	4a6a      	ldr	r2, [pc, #424]	; (800d8cc <PrepareFrame+0x294>)
 800d722:	239c      	movs	r3, #156	; 0x9c
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d728:	4a68      	ldr	r2, [pc, #416]	; (800d8cc <PrepareFrame+0x294>)
 800d72a:	239a      	movs	r3, #154	; 0x9a
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4969      	ldr	r1, [pc, #420]	; (800d8d4 <PrepareFrame+0x29c>)
 800d730:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d732:	2318      	movs	r3, #24
 800d734:	18fb      	adds	r3, r7, r3
 800d736:	0018      	movs	r0, r3
 800d738:	f004 ff5c 	bl	80125f4 <LoRaMacGetFCntUp>
 800d73c:	1e03      	subs	r3, r0, #0
 800d73e:	d001      	beq.n	800d744 <PrepareFrame+0x10c>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d740:	2312      	movs	r3, #18
 800d742:	e0be      	b.n	800d8c2 <PrepareFrame+0x28a>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	b299      	uxth	r1, r3
 800d748:	4a60      	ldr	r2, [pc, #384]	; (800d8cc <PrepareFrame+0x294>)
 800d74a:	238f      	movs	r3, #143	; 0x8f
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800d750:	4b5e      	ldr	r3, [pc, #376]	; (800d8cc <PrepareFrame+0x294>)
 800d752:	4a63      	ldr	r2, [pc, #396]	; (800d8e0 <PrepareFrame+0x2a8>)
 800d754:	2100      	movs	r1, #0
 800d756:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 800d758:	4a5c      	ldr	r2, [pc, #368]	; (800d8cc <PrepareFrame+0x294>)
 800d75a:	2386      	movs	r3, #134	; 0x86
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	2100      	movs	r1, #0
 800d760:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d762:	69b9      	ldr	r1, [r7, #24]
 800d764:	4a59      	ldr	r2, [pc, #356]	; (800d8cc <PrepareFrame+0x294>)
 800d766:	2387      	movs	r3, #135	; 0x87
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d76c:	2314      	movs	r3, #20
 800d76e:	18fb      	adds	r3, r7, r3
 800d770:	0018      	movs	r0, r3
 800d772:	f002 fec1 	bl	80104f8 <LoRaMacCommandsGetSizeSerializedCmds>
 800d776:	1e03      	subs	r3, r0, #0
 800d778:	d001      	beq.n	800d77e <PrepareFrame+0x146>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d77a:	2313      	movs	r3, #19
 800d77c:	e0a1      	b.n	800d8c2 <PrepareFrame+0x28a>
            }

            if( macCmdsSize > 0 )
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d100      	bne.n	800d786 <PrepareFrame+0x14e>
 800d784:	e099      	b.n	800d8ba <PrepareFrame+0x282>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800d786:	4a51      	ldr	r2, [pc, #324]	; (800d8cc <PrepareFrame+0x294>)
 800d788:	238e      	movs	r3, #142	; 0x8e
 800d78a:	00db      	lsls	r3, r3, #3
 800d78c:	58d3      	ldr	r3, [r2, r3]
 800d78e:	22d5      	movs	r2, #213	; 0xd5
 800d790:	569b      	ldrsb	r3, [r3, r2]
 800d792:	221f      	movs	r2, #31
 800d794:	18bc      	adds	r4, r7, r2
 800d796:	0018      	movs	r0, r3
 800d798:	f7fe fbf4 	bl	800bf84 <GetMaxAppPayloadWithoutFOptsLength>
 800d79c:	0003      	movs	r3, r0
 800d79e:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d7a0:	4b4a      	ldr	r3, [pc, #296]	; (800d8cc <PrepareFrame+0x294>)
 800d7a2:	4a4d      	ldr	r2, [pc, #308]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d7a4:	5c9b      	ldrb	r3, [r3, r2]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d024      	beq.n	800d7f4 <PrepareFrame+0x1bc>
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b0f      	cmp	r3, #15
 800d7ae:	d821      	bhi.n	800d7f4 <PrepareFrame+0x1bc>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d7b0:	4a4c      	ldr	r2, [pc, #304]	; (800d8e4 <PrepareFrame+0x2ac>)
 800d7b2:	2314      	movs	r3, #20
 800d7b4:	18fb      	adds	r3, r7, r3
 800d7b6:	0019      	movs	r1, r3
 800d7b8:	200f      	movs	r0, #15
 800d7ba:	f002 feb3 	bl	8010524 <LoRaMacCommandsSerializeCmds>
 800d7be:	1e03      	subs	r3, r0, #0
 800d7c0:	d001      	beq.n	800d7c6 <PrepareFrame+0x18e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d7c2:	2313      	movs	r3, #19
 800d7c4:	e07d      	b.n	800d8c2 <PrepareFrame+0x28a>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	1c1a      	adds	r2, r3, #0
 800d7ca:	230f      	movs	r3, #15
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	210f      	movs	r1, #15
 800d7d4:	400a      	ands	r2, r1
 800d7d6:	0010      	movs	r0, r2
 800d7d8:	781a      	ldrb	r2, [r3, #0]
 800d7da:	210f      	movs	r1, #15
 800d7dc:	438a      	bics	r2, r1
 800d7de:	1c11      	adds	r1, r2, #0
 800d7e0:	1c02      	adds	r2, r0, #0
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	7819      	ldrb	r1, [r3, #0]
 800d7ea:	4a38      	ldr	r2, [pc, #224]	; (800d8cc <PrepareFrame+0x294>)
 800d7ec:	238e      	movs	r3, #142	; 0x8e
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d7f2:	e062      	b.n	800d8ba <PrepareFrame+0x282>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d7f4:	4b35      	ldr	r3, [pc, #212]	; (800d8cc <PrepareFrame+0x294>)
 800d7f6:	4a38      	ldr	r2, [pc, #224]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d7f8:	5c9b      	ldrb	r3, [r3, r2]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d017      	beq.n	800d82e <PrepareFrame+0x1f6>
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b0f      	cmp	r3, #15
 800d802:	d914      	bls.n	800d82e <PrepareFrame+0x1f6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d804:	231f      	movs	r3, #31
 800d806:	18fb      	adds	r3, r7, r3
 800d808:	7818      	ldrb	r0, [r3, #0]
 800d80a:	4a30      	ldr	r2, [pc, #192]	; (800d8cc <PrepareFrame+0x294>)
 800d80c:	238e      	movs	r3, #142	; 0x8e
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	58d3      	ldr	r3, [r2, r3]
 800d812:	3317      	adds	r3, #23
 800d814:	33ff      	adds	r3, #255	; 0xff
 800d816:	001a      	movs	r2, r3
 800d818:	2314      	movs	r3, #20
 800d81a:	18fb      	adds	r3, r7, r3
 800d81c:	0019      	movs	r1, r3
 800d81e:	f002 fe81 	bl	8010524 <LoRaMacCommandsSerializeCmds>
 800d822:	1e03      	subs	r3, r0, #0
 800d824:	d001      	beq.n	800d82a <PrepareFrame+0x1f2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d826:	2313      	movs	r3, #19
 800d828:	e04b      	b.n	800d8c2 <PrepareFrame+0x28a>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d82a:	230a      	movs	r3, #10
 800d82c:	e049      	b.n	800d8c2 <PrepareFrame+0x28a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d82e:	231f      	movs	r3, #31
 800d830:	18fb      	adds	r3, r7, r3
 800d832:	7818      	ldrb	r0, [r3, #0]
 800d834:	4a25      	ldr	r2, [pc, #148]	; (800d8cc <PrepareFrame+0x294>)
 800d836:	238e      	movs	r3, #142	; 0x8e
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	58d3      	ldr	r3, [r2, r3]
 800d83c:	3317      	adds	r3, #23
 800d83e:	33ff      	adds	r3, #255	; 0xff
 800d840:	001a      	movs	r2, r3
 800d842:	2314      	movs	r3, #20
 800d844:	18fb      	adds	r3, r7, r3
 800d846:	0019      	movs	r1, r3
 800d848:	f002 fe6c 	bl	8010524 <LoRaMacCommandsSerializeCmds>
 800d84c:	1e03      	subs	r3, r0, #0
 800d84e:	d001      	beq.n	800d854 <PrepareFrame+0x21c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d850:	2313      	movs	r3, #19
 800d852:	e036      	b.n	800d8c2 <PrepareFrame+0x28a>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d854:	4a1d      	ldr	r2, [pc, #116]	; (800d8cc <PrepareFrame+0x294>)
 800d856:	2398      	movs	r3, #152	; 0x98
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	2100      	movs	r1, #0
 800d85c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800d85e:	4a1b      	ldr	r2, [pc, #108]	; (800d8cc <PrepareFrame+0x294>)
 800d860:	238e      	movs	r3, #142	; 0x8e
 800d862:	00db      	lsls	r3, r3, #3
 800d864:	58d3      	ldr	r3, [r2, r3]
 800d866:	3317      	adds	r3, #23
 800d868:	33ff      	adds	r3, #255	; 0xff
 800d86a:	0019      	movs	r1, r3
 800d86c:	4a17      	ldr	r2, [pc, #92]	; (800d8cc <PrepareFrame+0x294>)
 800d86e:	239a      	movs	r3, #154	; 0x9a
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	b2d9      	uxtb	r1, r3
 800d878:	4a14      	ldr	r2, [pc, #80]	; (800d8cc <PrepareFrame+0x294>)
 800d87a:	239c      	movs	r3, #156	; 0x9c
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	54d1      	strb	r1, [r2, r3]
            break;
 800d880:	e01b      	b.n	800d8ba <PrepareFrame+0x282>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01a      	beq.n	800d8be <PrepareFrame+0x286>
 800d888:	4b10      	ldr	r3, [pc, #64]	; (800d8cc <PrepareFrame+0x294>)
 800d88a:	4a13      	ldr	r2, [pc, #76]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d88c:	5c9b      	ldrb	r3, [r3, r2]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d015      	beq.n	800d8be <PrepareFrame+0x286>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d892:	4815      	ldr	r0, [pc, #84]	; (800d8e8 <PrepareFrame+0x2b0>)
 800d894:	4b0d      	ldr	r3, [pc, #52]	; (800d8cc <PrepareFrame+0x294>)
 800d896:	4a10      	ldr	r2, [pc, #64]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d898:	5c9b      	ldrb	r3, [r3, r2]
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	0019      	movs	r1, r3
 800d8a0:	f008 f8ac 	bl	80159fc <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d8a4:	4b09      	ldr	r3, [pc, #36]	; (800d8cc <PrepareFrame+0x294>)
 800d8a6:	4a0c      	ldr	r2, [pc, #48]	; (800d8d8 <PrepareFrame+0x2a0>)
 800d8a8:	5c9b      	ldrb	r3, [r3, r2]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	4b06      	ldr	r3, [pc, #24]	; (800d8cc <PrepareFrame+0x294>)
 800d8b2:	811a      	strh	r2, [r3, #8]
            }
            break;
 800d8b4:	e003      	b.n	800d8be <PrepareFrame+0x286>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	e003      	b.n	800d8c2 <PrepareFrame+0x28a>
            break;
 800d8ba:	46c0      	nop			; (mov r8, r8)
 800d8bc:	e000      	b.n	800d8c0 <PrepareFrame+0x288>
            break;
 800d8be:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	0018      	movs	r0, r3
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	b009      	add	sp, #36	; 0x24
 800d8c8:	bd90      	pop	{r4, r7, pc}
 800d8ca:	46c0      	nop			; (mov r8, r8)
 800d8cc:	20000708 	.word	0x20000708
 800d8d0:	00000219 	.word	0x00000219
 800d8d4:	20000848 	.word	0x20000848
 800d8d8:	0000023f 	.word	0x0000023f
 800d8dc:	20000712 	.word	0x20000712
 800d8e0:	00000431 	.word	0x00000431
 800d8e4:	20000828 	.word	0x20000828
 800d8e8:	20000713 	.word	0x20000713

0800d8ec <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800d8ec:	b590      	push	{r4, r7, lr}
 800d8ee:	b089      	sub	sp, #36	; 0x24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	0002      	movs	r2, r0
 800d8f4:	1dfb      	adds	r3, r7, #7
 800d8f6:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800d8f8:	230b      	movs	r3, #11
 800d8fa:	18fb      	adds	r3, r7, r3
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800d900:	210c      	movs	r1, #12
 800d902:	187b      	adds	r3, r7, r1
 800d904:	1dfa      	adds	r2, r7, #7
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d90a:	4a4f      	ldr	r2, [pc, #316]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d90c:	238e      	movs	r3, #142	; 0x8e
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	58d3      	ldr	r3, [r2, r3]
 800d912:	22d5      	movs	r2, #213	; 0xd5
 800d914:	569a      	ldrsb	r2, [r3, r2]
 800d916:	187b      	adds	r3, r7, r1
 800d918:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d91a:	4a4b      	ldr	r2, [pc, #300]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d91c:	238e      	movs	r3, #142	; 0x8e
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	58d3      	ldr	r3, [r2, r3]
 800d922:	22d4      	movs	r2, #212	; 0xd4
 800d924:	569a      	ldrsb	r2, [r3, r2]
 800d926:	187b      	adds	r3, r7, r1
 800d928:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800d92a:	4a47      	ldr	r2, [pc, #284]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d92c:	238e      	movs	r3, #142	; 0x8e
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	58d2      	ldr	r2, [r2, r3]
 800d932:	2382      	movs	r3, #130	; 0x82
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	58d2      	ldr	r2, [r2, r3]
 800d938:	187b      	adds	r3, r7, r1
 800d93a:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800d93c:	4a42      	ldr	r2, [pc, #264]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d93e:	238e      	movs	r3, #142	; 0x8e
 800d940:	00db      	lsls	r3, r3, #3
 800d942:	58d2      	ldr	r2, [r2, r3]
 800d944:	2384      	movs	r3, #132	; 0x84
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	58d2      	ldr	r2, [r2, r3]
 800d94a:	187b      	adds	r3, r7, r1
 800d94c:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d94e:	4b3e      	ldr	r3, [pc, #248]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d950:	891a      	ldrh	r2, [r3, #8]
 800d952:	187b      	adds	r3, r7, r1
 800d954:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d956:	f002 faf4 	bl	800ff42 <LoRaMacClassBIsBeaconExpected>
 800d95a:	1e03      	subs	r3, r0, #0
 800d95c:	d001      	beq.n	800d962 <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d95e:	230e      	movs	r3, #14
 800d960:	e06d      	b.n	800da3e <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800d962:	4a39      	ldr	r2, [pc, #228]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d964:	238e      	movs	r3, #142	; 0x8e
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	58d3      	ldr	r3, [r2, r3]
 800d96a:	22c8      	movs	r2, #200	; 0xc8
 800d96c:	5c9b      	ldrb	r3, [r3, r2]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d10d      	bne.n	800d98e <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d972:	f002 faec 	bl	800ff4e <LoRaMacClassBIsPingExpected>
 800d976:	1e03      	subs	r3, r0, #0
 800d978:	d001      	beq.n	800d97e <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d97a:	230f      	movs	r3, #15
 800d97c:	e05f      	b.n	800da3e <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d97e:	f002 faec 	bl	800ff5a <LoRaMacClassBIsMulticastExpected>
 800d982:	1e03      	subs	r3, r0, #0
 800d984:	d001      	beq.n	800d98a <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d986:	230f      	movs	r3, #15
 800d988:	e059      	b.n	800da3e <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800d98a:	f002 fb59 	bl	8010040 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d98e:	4a2e      	ldr	r2, [pc, #184]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d990:	238e      	movs	r3, #142	; 0x8e
 800d992:	00db      	lsls	r3, r3, #3
 800d994:	58d3      	ldr	r3, [r2, r3]
 800d996:	7818      	ldrb	r0, [r3, #0]
 800d998:	4b2c      	ldr	r3, [pc, #176]	; (800da4c <SendFrameOnChannel+0x160>)
 800d99a:	240b      	movs	r4, #11
 800d99c:	193a      	adds	r2, r7, r4
 800d99e:	210c      	movs	r1, #12
 800d9a0:	1879      	adds	r1, r7, r1
 800d9a2:	f005 fb5b 	bl	801305c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d9a6:	4b28      	ldr	r3, [pc, #160]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9a8:	4a29      	ldr	r2, [pc, #164]	; (800da50 <SendFrameOnChannel+0x164>)
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d9ae:	4a26      	ldr	r2, [pc, #152]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9b0:	238e      	movs	r3, #142	; 0x8e
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	58d3      	ldr	r3, [r2, r3]
 800d9b6:	22d5      	movs	r2, #213	; 0xd5
 800d9b8:	569b      	ldrsb	r3, [r3, r2]
 800d9ba:	b2d9      	uxtb	r1, r3
 800d9bc:	4b22      	ldr	r3, [pc, #136]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9be:	4a25      	ldr	r2, [pc, #148]	; (800da54 <SendFrameOnChannel+0x168>)
 800d9c0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800d9c2:	193b      	adds	r3, r7, r4
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	5659      	ldrsb	r1, [r3, r1]
 800d9c8:	4b1f      	ldr	r3, [pc, #124]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9ca:	4a23      	ldr	r2, [pc, #140]	; (800da58 <SendFrameOnChannel+0x16c>)
 800d9cc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800d9ce:	1dfb      	adds	r3, r7, #7
 800d9d0:	781a      	ldrb	r2, [r3, #0]
 800d9d2:	4b1d      	ldr	r3, [pc, #116]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9d4:	4921      	ldr	r1, [pc, #132]	; (800da5c <SendFrameOnChannel+0x170>)
 800d9d6:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d9d8:	4b1b      	ldr	r3, [pc, #108]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9da:	4a21      	ldr	r2, [pc, #132]	; (800da60 <SendFrameOnChannel+0x174>)
 800d9dc:	589a      	ldr	r2, [r3, r2]
 800d9de:	4b1a      	ldr	r3, [pc, #104]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9e0:	4920      	ldr	r1, [pc, #128]	; (800da64 <SendFrameOnChannel+0x178>)
 800d9e2:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d9e4:	4b18      	ldr	r3, [pc, #96]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9e6:	4a1e      	ldr	r2, [pc, #120]	; (800da60 <SendFrameOnChannel+0x174>)
 800d9e8:	589a      	ldr	r2, [r3, r2]
 800d9ea:	4b17      	ldr	r3, [pc, #92]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9ec:	491e      	ldr	r1, [pc, #120]	; (800da68 <SendFrameOnChannel+0x17c>)
 800d9ee:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d9f0:	f002 fab9 	bl	800ff66 <LoRaMacClassBIsBeaconModeActive>
 800d9f4:	1e03      	subs	r3, r0, #0
 800d9f6:	d00c      	beq.n	800da12 <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d9f8:	4b13      	ldr	r3, [pc, #76]	; (800da48 <SendFrameOnChannel+0x15c>)
 800d9fa:	4a19      	ldr	r2, [pc, #100]	; (800da60 <SendFrameOnChannel+0x174>)
 800d9fc:	589b      	ldr	r3, [r3, r2]
 800d9fe:	0018      	movs	r0, r3
 800da00:	f002 fb15 	bl	801002e <LoRaMacClassBIsUplinkCollision>
 800da04:	0003      	movs	r3, r0
 800da06:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800da0e:	2310      	movs	r3, #16
 800da10:	e015      	b.n	800da3e <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800da12:	f002 fab8 	bl	800ff86 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800da16:	4a0c      	ldr	r2, [pc, #48]	; (800da48 <SendFrameOnChannel+0x15c>)
 800da18:	23d5      	movs	r3, #213	; 0xd5
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	58d3      	ldr	r3, [r2, r3]
 800da1e:	2202      	movs	r2, #2
 800da20:	431a      	orrs	r2, r3
 800da22:	0011      	movs	r1, r2
 800da24:	4a08      	ldr	r2, [pc, #32]	; (800da48 <SendFrameOnChannel+0x15c>)
 800da26:	23d5      	movs	r3, #213	; 0xd5
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800da2c:	4b0f      	ldr	r3, [pc, #60]	; (800da6c <SendFrameOnChannel+0x180>)
 800da2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da30:	4a05      	ldr	r2, [pc, #20]	; (800da48 <SendFrameOnChannel+0x15c>)
 800da32:	8912      	ldrh	r2, [r2, #8]
 800da34:	b2d1      	uxtb	r1, r2
 800da36:	4a0e      	ldr	r2, [pc, #56]	; (800da70 <SendFrameOnChannel+0x184>)
 800da38:	0010      	movs	r0, r2
 800da3a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	0018      	movs	r0, r3
 800da40:	46bd      	mov	sp, r7
 800da42:	b009      	add	sp, #36	; 0x24
 800da44:	bd90      	pop	{r4, r7, pc}
 800da46:	46c0      	nop			; (mov r8, r8)
 800da48:	20000708 	.word	0x20000708
 800da4c:	20000b14 	.word	0x20000b14
 800da50:	0000042d 	.word	0x0000042d
 800da54:	0000042e 	.word	0x0000042e
 800da58:	0000042f 	.word	0x0000042f
 800da5c:	0000043c 	.word	0x0000043c
 800da60:	0000040c 	.word	0x0000040c
 800da64:	00000434 	.word	0x00000434
 800da68:	00000444 	.word	0x00000444
 800da6c:	08021b48 	.word	0x08021b48
 800da70:	20000712 	.word	0x20000712

0800da74 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	0002      	movs	r2, r0
 800da7c:	1dbb      	adds	r3, r7, #6
 800da7e:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800da80:	4a24      	ldr	r2, [pc, #144]	; (800db14 <SetTxContinuousWave+0xa0>)
 800da82:	238e      	movs	r3, #142	; 0x8e
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	58d2      	ldr	r2, [r2, r3]
 800da88:	2314      	movs	r3, #20
 800da8a:	33ff      	adds	r3, #255	; 0xff
 800da8c:	5cd2      	ldrb	r2, [r2, r3]
 800da8e:	2108      	movs	r1, #8
 800da90:	187b      	adds	r3, r7, r1
 800da92:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800da94:	4a1f      	ldr	r2, [pc, #124]	; (800db14 <SetTxContinuousWave+0xa0>)
 800da96:	238e      	movs	r3, #142	; 0x8e
 800da98:	00db      	lsls	r3, r3, #3
 800da9a:	58d3      	ldr	r3, [r2, r3]
 800da9c:	22d5      	movs	r2, #213	; 0xd5
 800da9e:	569a      	ldrsb	r2, [r3, r2]
 800daa0:	187b      	adds	r3, r7, r1
 800daa2:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800daa4:	4a1b      	ldr	r2, [pc, #108]	; (800db14 <SetTxContinuousWave+0xa0>)
 800daa6:	238e      	movs	r3, #142	; 0x8e
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	58d3      	ldr	r3, [r2, r3]
 800daac:	22d4      	movs	r2, #212	; 0xd4
 800daae:	569a      	ldrsb	r2, [r3, r2]
 800dab0:	187b      	adds	r3, r7, r1
 800dab2:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800dab4:	4a17      	ldr	r2, [pc, #92]	; (800db14 <SetTxContinuousWave+0xa0>)
 800dab6:	238e      	movs	r3, #142	; 0x8e
 800dab8:	00db      	lsls	r3, r3, #3
 800daba:	58d2      	ldr	r2, [r2, r3]
 800dabc:	2382      	movs	r3, #130	; 0x82
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	58d2      	ldr	r2, [r2, r3]
 800dac2:	187b      	adds	r3, r7, r1
 800dac4:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800dac6:	4a13      	ldr	r2, [pc, #76]	; (800db14 <SetTxContinuousWave+0xa0>)
 800dac8:	238e      	movs	r3, #142	; 0x8e
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	58d2      	ldr	r2, [r2, r3]
 800dace:	2384      	movs	r3, #132	; 0x84
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	58d2      	ldr	r2, [r2, r3]
 800dad4:	187b      	adds	r3, r7, r1
 800dad6:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 800dad8:	187b      	adds	r3, r7, r1
 800dada:	1dba      	adds	r2, r7, #6
 800dadc:	8812      	ldrh	r2, [r2, #0]
 800dade:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800dae0:	4a0c      	ldr	r2, [pc, #48]	; (800db14 <SetTxContinuousWave+0xa0>)
 800dae2:	238e      	movs	r3, #142	; 0x8e
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	58d3      	ldr	r3, [r2, r3]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	187a      	adds	r2, r7, r1
 800daec:	0011      	movs	r1, r2
 800daee:	0018      	movs	r0, r3
 800daf0:	f005 fbae 	bl	8013250 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800daf4:	4a07      	ldr	r2, [pc, #28]	; (800db14 <SetTxContinuousWave+0xa0>)
 800daf6:	23d5      	movs	r3, #213	; 0xd5
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	58d3      	ldr	r3, [r2, r3]
 800dafc:	2202      	movs	r2, #2
 800dafe:	431a      	orrs	r2, r3
 800db00:	0011      	movs	r1, r2
 800db02:	4a04      	ldr	r2, [pc, #16]	; (800db14 <SetTxContinuousWave+0xa0>)
 800db04:	23d5      	movs	r3, #213	; 0xd5
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	0018      	movs	r0, r3
 800db0e:	46bd      	mov	sp, r7
 800db10:	b006      	add	sp, #24
 800db12:	bd80      	pop	{r7, pc}
 800db14:	20000708 	.word	0x20000708

0800db18 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6039      	str	r1, [r7, #0]
 800db20:	0011      	movs	r1, r2
 800db22:	1dbb      	adds	r3, r7, #6
 800db24:	1c02      	adds	r2, r0, #0
 800db26:	801a      	strh	r2, [r3, #0]
 800db28:	1d7b      	adds	r3, r7, #5
 800db2a:	1c0a      	adds	r2, r1, #0
 800db2c:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800db2e:	4b0c      	ldr	r3, [pc, #48]	; (800db60 <SetTxContinuousWave1+0x48>)
 800db30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db32:	1d7a      	adds	r2, r7, #5
 800db34:	2100      	movs	r1, #0
 800db36:	5651      	ldrsb	r1, [r2, r1]
 800db38:	1dba      	adds	r2, r7, #6
 800db3a:	8812      	ldrh	r2, [r2, #0]
 800db3c:	6838      	ldr	r0, [r7, #0]
 800db3e:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800db40:	4a08      	ldr	r2, [pc, #32]	; (800db64 <SetTxContinuousWave1+0x4c>)
 800db42:	23d5      	movs	r3, #213	; 0xd5
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	58d3      	ldr	r3, [r2, r3]
 800db48:	2202      	movs	r2, #2
 800db4a:	431a      	orrs	r2, r3
 800db4c:	0011      	movs	r1, r2
 800db4e:	4a05      	ldr	r2, [pc, #20]	; (800db64 <SetTxContinuousWave1+0x4c>)
 800db50:	23d5      	movs	r3, #213	; 0xd5
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	0018      	movs	r0, r3
 800db5a:	46bd      	mov	sp, r7
 800db5c:	b002      	add	sp, #8
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	08021b48 	.word	0x08021b48
 800db64:	20000708 	.word	0x20000708

0800db68 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800db6e:	4b24      	ldr	r3, [pc, #144]	; (800dc00 <GetCtxs+0x98>)
 800db70:	4a24      	ldr	r2, [pc, #144]	; (800dc04 <GetCtxs+0x9c>)
 800db72:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800db74:	4b22      	ldr	r3, [pc, #136]	; (800dc00 <GetCtxs+0x98>)
 800db76:	228b      	movs	r2, #139	; 0x8b
 800db78:	0092      	lsls	r2, r2, #2
 800db7a:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800db7c:	4b22      	ldr	r3, [pc, #136]	; (800dc08 <GetCtxs+0xa0>)
 800db7e:	0018      	movs	r0, r3
 800db80:	f003 feec 	bl	801195c <LoRaMacCryptoGetNvmCtx>
 800db84:	0002      	movs	r2, r0
 800db86:	4b1e      	ldr	r3, [pc, #120]	; (800dc00 <GetCtxs+0x98>)
 800db88:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 800db8a:	2300      	movs	r3, #0
 800db8c:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800db8e:	4a1f      	ldr	r2, [pc, #124]	; (800dc0c <GetCtxs+0xa4>)
 800db90:	238e      	movs	r3, #142	; 0x8e
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	58d3      	ldr	r3, [r2, r3]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	1d3a      	adds	r2, r7, #4
 800db9a:	0011      	movs	r1, r2
 800db9c:	0018      	movs	r0, r3
 800db9e:	f005 f9c1 	bl	8012f24 <RegionGetNvmCtx>
 800dba2:	0002      	movs	r2, r0
 800dba4:	4b16      	ldr	r3, [pc, #88]	; (800dc00 <GetCtxs+0x98>)
 800dba6:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <GetCtxs+0x98>)
 800dbac:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800dbae:	4b18      	ldr	r3, [pc, #96]	; (800dc10 <GetCtxs+0xa8>)
 800dbb0:	0018      	movs	r0, r3
 800dbb2:	f7fc fabd 	bl	800a130 <SecureElementGetNvmCtx>
 800dbb6:	0002      	movs	r2, r0
 800dbb8:	4b11      	ldr	r3, [pc, #68]	; (800dc00 <GetCtxs+0x98>)
 800dbba:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800dbbc:	4b15      	ldr	r3, [pc, #84]	; (800dc14 <GetCtxs+0xac>)
 800dbbe:	0018      	movs	r0, r3
 800dbc0:	f002 fb9e 	bl	8010300 <LoRaMacCommandsGetNvmCtx>
 800dbc4:	0002      	movs	r2, r0
 800dbc6:	4b0e      	ldr	r3, [pc, #56]	; (800dc00 <GetCtxs+0x98>)
 800dbc8:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800dbca:	4b13      	ldr	r3, [pc, #76]	; (800dc18 <GetCtxs+0xb0>)
 800dbcc:	0018      	movs	r0, r3
 800dbce:	f002 f964 	bl	800fe9a <LoRaMacClassBGetNvmCtx>
 800dbd2:	0002      	movs	r2, r0
 800dbd4:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <GetCtxs+0x98>)
 800dbd6:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800dbd8:	4b10      	ldr	r3, [pc, #64]	; (800dc1c <GetCtxs+0xb4>)
 800dbda:	0018      	movs	r0, r3
 800dbdc:	f002 fd9a 	bl	8010714 <LoRaMacConfirmQueueGetNvmCtx>
 800dbe0:	0002      	movs	r2, r0
 800dbe2:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <GetCtxs+0x98>)
 800dbe4:	631a      	str	r2, [r3, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
 800dbe6:	4b0e      	ldr	r3, [pc, #56]	; (800dc20 <GetCtxs+0xb8>)
 800dbe8:	0018      	movs	r0, r3
 800dbea:	f004 fc0b 	bl	8012404 <LoRaMacFCntHandlerGetNvmCtx>
 800dbee:	0002      	movs	r2, r0
 800dbf0:	4b03      	ldr	r3, [pc, #12]	; (800dc00 <GetCtxs+0x98>)
 800dbf2:	639a      	str	r2, [r3, #56]	; 0x38
    return &Contexts;
 800dbf4:	4b02      	ldr	r3, [pc, #8]	; (800dc00 <GetCtxs+0x98>)
}
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	b002      	add	sp, #8
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	2000157c 	.word	0x2000157c
 800dc04:	20000b7c 	.word	0x20000b7c
 800dc08:	20001590 	.word	0x20001590
 800dc0c:	20000708 	.word	0x20000708
 800dc10:	20001598 	.word	0x20001598
 800dc14:	200015a0 	.word	0x200015a0
 800dc18:	200015a8 	.word	0x200015a8
 800dc1c:	200015b0 	.word	0x200015b0
 800dc20:	200015b8 	.word	0x200015b8

0800dc24 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc32:	2303      	movs	r3, #3
 800dc34:	e067      	b.n	800dd06 <RestoreCtxs+0xe2>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800dc36:	4a36      	ldr	r2, [pc, #216]	; (800dd10 <RestoreCtxs+0xec>)
 800dc38:	23d5      	movs	r3, #213	; 0xd5
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	58d3      	ldr	r3, [r2, r3]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d001      	beq.n	800dc46 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e05f      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    if( contexts->MacNvmCtx != NULL )
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d008      	beq.n	800dc60 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6819      	ldr	r1, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	4b2e      	ldr	r3, [pc, #184]	; (800dd14 <RestoreCtxs+0xf0>)
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f007 fece 	bl	80159fc <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800dc60:	2108      	movs	r1, #8
 800dc62:	187b      	adds	r3, r7, r1
 800dc64:	2202      	movs	r2, #2
 800dc66:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	689a      	ldr	r2, [r3, #8]
 800dc6c:	187b      	adds	r3, r7, r1
 800dc6e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800dc70:	4a27      	ldr	r2, [pc, #156]	; (800dd10 <RestoreCtxs+0xec>)
 800dc72:	238e      	movs	r3, #142	; 0x8e
 800dc74:	00db      	lsls	r3, r3, #3
 800dc76:	58d3      	ldr	r3, [r2, r3]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	187a      	adds	r2, r7, r1
 800dc7c:	0011      	movs	r1, r2
 800dc7e:	0018      	movs	r0, r3
 800dc80:	f005 f93b 	bl	8012efa <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	0018      	movs	r0, r3
 800dc8a:	f7fc fa39 	bl	800a100 <SecureElementRestoreNvmCtx>
 800dc8e:	1e03      	subs	r3, r0, #0
 800dc90:	d001      	beq.n	800dc96 <RestoreCtxs+0x72>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc92:	2311      	movs	r3, #17
 800dc94:	e037      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	f003 fe48 	bl	8011930 <LoRaMacCryptoRestoreNvmCtx>
 800dca0:	1e03      	subs	r3, r0, #0
 800dca2:	d001      	beq.n	800dca8 <RestoreCtxs+0x84>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dca4:	2311      	movs	r3, #17
 800dca6:	e02e      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcac:	0018      	movs	r0, r3
 800dcae:	f004 fb93 	bl	80123d8 <LoRaMacFCntHandlerRestoreNvmCtx>
 800dcb2:	1e03      	subs	r3, r0, #0
 800dcb4:	d001      	beq.n	800dcba <RestoreCtxs+0x96>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800dcb6:	2312      	movs	r3, #18
 800dcb8:	e025      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f002 fb08 	bl	80102d4 <LoRaMacCommandsRestoreNvmCtx>
 800dcc4:	1e03      	subs	r3, r0, #0
 800dcc6:	d001      	beq.n	800dccc <RestoreCtxs+0xa8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dcc8:	2313      	movs	r3, #19
 800dcca:	e01c      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd0:	0018      	movs	r0, r3
 800dcd2:	f002 f8d9 	bl	800fe88 <LoRaMacClassBRestoreNvmCtx>
 800dcd6:	0003      	movs	r3, r0
 800dcd8:	001a      	movs	r2, r3
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4053      	eors	r3, r2
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <RestoreCtxs+0xc4>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800dce4:	2314      	movs	r3, #20
 800dce6:	e00e      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcec:	0018      	movs	r0, r3
 800dcee:	f002 fcfb 	bl	80106e8 <LoRaMacConfirmQueueRestoreNvmCtx>
 800dcf2:	0003      	movs	r3, r0
 800dcf4:	001a      	movs	r2, r3
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	4053      	eors	r3, r2
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d001      	beq.n	800dd04 <RestoreCtxs+0xe0>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800dd00:	2315      	movs	r3, #21
 800dd02:	e000      	b.n	800dd06 <RestoreCtxs+0xe2>
    }

    return LORAMAC_STATUS_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	0018      	movs	r0, r3
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	b004      	add	sp, #16
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	46c0      	nop			; (mov r8, r8)
 800dd10:	20000708 	.word	0x20000708
 800dd14:	20000b7c 	.word	0x20000b7c

0800dd18 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <DetermineFrameType+0x16>
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	e03b      	b.n	800ddaa <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	7b1b      	ldrb	r3, [r3, #12]
 800dd36:	220f      	movs	r2, #15
 800dd38:	4013      	ands	r3, r2
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d008      	beq.n	800dd52 <DetermineFrameType+0x3a>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2220      	movs	r2, #32
 800dd44:	5c9b      	ldrb	r3, [r3, r2]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	701a      	strb	r2, [r3, #0]
 800dd50:	e02a      	b.n	800dda8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2228      	movs	r2, #40	; 0x28
 800dd56:	5c9b      	ldrb	r3, [r3, r2]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d103      	bne.n	800dd64 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	701a      	strb	r2, [r3, #0]
 800dd62:	e021      	b.n	800dda8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	7b1b      	ldrb	r3, [r3, #12]
 800dd68:	220f      	movs	r2, #15
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d108      	bne.n	800dd84 <DetermineFrameType+0x6c>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	5c9b      	ldrb	r3, [r3, r2]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d103      	bne.n	800dd84 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2202      	movs	r2, #2
 800dd80:	701a      	strb	r2, [r3, #0]
 800dd82:	e011      	b.n	800dda8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	7b1b      	ldrb	r3, [r3, #12]
 800dd88:	220f      	movs	r2, #15
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d108      	bne.n	800dda4 <DetermineFrameType+0x8c>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2220      	movs	r2, #32
 800dd96:	5c9b      	ldrb	r3, [r3, r2]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2203      	movs	r2, #3
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	e001      	b.n	800dda8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800dda4:	2316      	movs	r3, #22
 800dda6:	e000      	b.n	800ddaa <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	0018      	movs	r0, r3
 800ddac:	46bd      	mov	sp, r7
 800ddae:	b002      	add	sp, #8
 800ddb0:	bd80      	pop	{r7, pc}
	...

0800ddb4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ddb8:	4a16      	ldr	r2, [pc, #88]	; (800de14 <CheckRetransUnconfirmedUplink+0x60>)
 800ddba:	238e      	movs	r3, #142	; 0x8e
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	58d2      	ldr	r2, [r2, r3]
 800ddc0:	2388      	movs	r3, #136	; 0x88
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800ddc6:	4913      	ldr	r1, [pc, #76]	; (800de14 <CheckRetransUnconfirmedUplink+0x60>)
 800ddc8:	238e      	movs	r3, #142	; 0x8e
 800ddca:	00db      	lsls	r3, r3, #3
 800ddcc:	58cb      	ldr	r3, [r1, r3]
 800ddce:	21f4      	movs	r1, #244	; 0xf4
 800ddd0:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d301      	bcc.n	800ddda <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e019      	b.n	800de0e <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ddda:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <CheckRetransUnconfirmedUplink+0x60>)
 800dddc:	4a0e      	ldr	r2, [pc, #56]	; (800de18 <CheckRetransUnconfirmedUplink+0x64>)
 800ddde:	5c9b      	ldrb	r3, [r3, r2]
 800dde0:	2202      	movs	r2, #2
 800dde2:	4013      	ands	r3, r2
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d010      	beq.n	800de0c <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800ddea:	4a0a      	ldr	r2, [pc, #40]	; (800de14 <CheckRetransUnconfirmedUplink+0x60>)
 800ddec:	238e      	movs	r3, #142	; 0x8e
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	58d3      	ldr	r3, [r2, r3]
 800ddf2:	22c8      	movs	r2, #200	; 0xc8
 800ddf4:	5c9b      	ldrb	r3, [r3, r2]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e007      	b.n	800de0e <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ddfe:	4b05      	ldr	r3, [pc, #20]	; (800de14 <CheckRetransUnconfirmedUplink+0x60>)
 800de00:	4a06      	ldr	r2, [pc, #24]	; (800de1c <CheckRetransUnconfirmedUplink+0x68>)
 800de02:	5c9b      	ldrb	r3, [r3, r2]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d101      	bne.n	800de0c <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800de08:	2301      	movs	r3, #1
 800de0a:	e000      	b.n	800de0e <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	0018      	movs	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	20000708 	.word	0x20000708
 800de18:	0000046d 	.word	0x0000046d
 800de1c:	0000046c 	.word	0x0000046c

0800de20 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800de24:	4a11      	ldr	r2, [pc, #68]	; (800de6c <CheckRetransConfirmedUplink+0x4c>)
 800de26:	238e      	movs	r3, #142	; 0x8e
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	58d3      	ldr	r3, [r2, r3]
 800de2c:	4a10      	ldr	r2, [pc, #64]	; (800de70 <CheckRetransConfirmedUplink+0x50>)
 800de2e:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800de30:	490e      	ldr	r1, [pc, #56]	; (800de6c <CheckRetransConfirmedUplink+0x4c>)
 800de32:	238e      	movs	r3, #142	; 0x8e
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	58cb      	ldr	r3, [r1, r3]
 800de38:	490e      	ldr	r1, [pc, #56]	; (800de74 <CheckRetransConfirmedUplink+0x54>)
 800de3a:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d301      	bcc.n	800de44 <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800de40:	2301      	movs	r3, #1
 800de42:	e010      	b.n	800de66 <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <CheckRetransConfirmedUplink+0x4c>)
 800de46:	4a0c      	ldr	r2, [pc, #48]	; (800de78 <CheckRetransConfirmedUplink+0x58>)
 800de48:	5c9b      	ldrb	r3, [r3, r2]
 800de4a:	2202      	movs	r2, #2
 800de4c:	4013      	ands	r3, r2
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d007      	beq.n	800de64 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800de54:	4a05      	ldr	r2, [pc, #20]	; (800de6c <CheckRetransConfirmedUplink+0x4c>)
 800de56:	2386      	movs	r3, #134	; 0x86
 800de58:	00db      	lsls	r3, r3, #3
 800de5a:	5cd3      	ldrb	r3, [r2, r3]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800de60:	2301      	movs	r3, #1
 800de62:	e000      	b.n	800de66 <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800de64:	2300      	movs	r3, #0
}
 800de66:	0018      	movs	r0, r3
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	20000708 	.word	0x20000708
 800de70:	00000217 	.word	0x00000217
 800de74:	00000216 	.word	0x00000216
 800de78:	0000046d 	.word	0x0000046d

0800de7c <StopRetransmission>:


static bool StopRetransmission( void )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800de86:	1d3b      	adds	r3, r7, #4
 800de88:	0018      	movs	r0, r3
 800de8a:	f004 fbb3 	bl	80125f4 <LoRaMacGetFCntUp>
 800de8e:	1e03      	subs	r3, r0, #0
 800de90:	d001      	beq.n	800de96 <StopRetransmission+0x1a>
    {
        return false;
 800de92:	2300      	movs	r3, #0
 800de94:	e043      	b.n	800df1e <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	0018      	movs	r0, r3
 800de9a:	f004 fbc1 	bl	8012620 <LoRaMacSetFCntUp>
 800de9e:	1e03      	subs	r3, r0, #0
 800dea0:	d001      	beq.n	800dea6 <StopRetransmission+0x2a>
    {
        return false;
 800dea2:	2300      	movs	r3, #0
 800dea4:	e03b      	b.n	800df1e <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800dea6:	4b20      	ldr	r3, [pc, #128]	; (800df28 <StopRetransmission+0xac>)
 800dea8:	4a20      	ldr	r2, [pc, #128]	; (800df2c <StopRetransmission+0xb0>)
 800deaa:	5c9b      	ldrb	r3, [r3, r2]
 800deac:	2202      	movs	r2, #2
 800deae:	4013      	ands	r3, r2
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d110      	bne.n	800ded8 <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800deb6:	4a1c      	ldr	r2, [pc, #112]	; (800df28 <StopRetransmission+0xac>)
 800deb8:	238e      	movs	r3, #142	; 0x8e
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	58d3      	ldr	r3, [r2, r3]
 800debe:	22ca      	movs	r2, #202	; 0xca
 800dec0:	5c9b      	ldrb	r3, [r3, r2]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d008      	beq.n	800ded8 <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800dec6:	4a18      	ldr	r2, [pc, #96]	; (800df28 <StopRetransmission+0xac>)
 800dec8:	238e      	movs	r3, #142	; 0x8e
 800deca:	00db      	lsls	r3, r3, #3
 800decc:	58d3      	ldr	r3, [r2, r3]
 800dece:	22cc      	movs	r2, #204	; 0xcc
 800ded0:	589a      	ldr	r2, [r3, r2]
 800ded2:	3201      	adds	r2, #1
 800ded4:	21cc      	movs	r1, #204	; 0xcc
 800ded6:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800ded8:	4a13      	ldr	r2, [pc, #76]	; (800df28 <StopRetransmission+0xac>)
 800deda:	238e      	movs	r3, #142	; 0x8e
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	58d2      	ldr	r2, [r2, r3]
 800dee0:	2388      	movs	r3, #136	; 0x88
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	2100      	movs	r1, #0
 800dee6:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800dee8:	4a0f      	ldr	r2, [pc, #60]	; (800df28 <StopRetransmission+0xac>)
 800deea:	238e      	movs	r3, #142	; 0x8e
 800deec:	00db      	lsls	r3, r3, #3
 800deee:	58d3      	ldr	r3, [r2, r3]
 800def0:	4a0f      	ldr	r2, [pc, #60]	; (800df30 <StopRetransmission+0xb4>)
 800def2:	2100      	movs	r1, #0
 800def4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800def6:	4a0c      	ldr	r2, [pc, #48]	; (800df28 <StopRetransmission+0xac>)
 800def8:	238e      	movs	r3, #142	; 0x8e
 800defa:	00db      	lsls	r3, r3, #3
 800defc:	58d2      	ldr	r2, [r2, r3]
 800defe:	2386      	movs	r3, #134	; 0x86
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	2100      	movs	r1, #0
 800df04:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df06:	4a08      	ldr	r2, [pc, #32]	; (800df28 <StopRetransmission+0xac>)
 800df08:	23d5      	movs	r3, #213	; 0xd5
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	58d3      	ldr	r3, [r2, r3]
 800df0e:	2202      	movs	r2, #2
 800df10:	4393      	bics	r3, r2
 800df12:	0019      	movs	r1, r3
 800df14:	4a04      	ldr	r2, [pc, #16]	; (800df28 <StopRetransmission+0xac>)
 800df16:	23d5      	movs	r3, #213	; 0xd5
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	50d1      	str	r1, [r2, r3]

    return true;
 800df1c:	2301      	movs	r3, #1
}
 800df1e:	0018      	movs	r0, r3
 800df20:	46bd      	mov	sp, r7
 800df22:	b002      	add	sp, #8
 800df24:	bd80      	pop	{r7, pc}
 800df26:	46c0      	nop			; (mov r8, r8)
 800df28:	20000708 	.word	0x20000708
 800df2c:	0000046d 	.word	0x0000046d
 800df30:	00000219 	.word	0x00000219

0800df34 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800df3a:	4a2d      	ldr	r2, [pc, #180]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800df3c:	238e      	movs	r3, #142	; 0x8e
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	58d3      	ldr	r3, [r2, r3]
 800df42:	4a2c      	ldr	r2, [pc, #176]	; (800dff4 <AckTimeoutRetriesProcess+0xc0>)
 800df44:	5c9a      	ldrb	r2, [r3, r2]
 800df46:	492a      	ldr	r1, [pc, #168]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800df48:	238e      	movs	r3, #142	; 0x8e
 800df4a:	00db      	lsls	r3, r3, #3
 800df4c:	58cb      	ldr	r3, [r1, r3]
 800df4e:	492a      	ldr	r1, [pc, #168]	; (800dff8 <AckTimeoutRetriesProcess+0xc4>)
 800df50:	5c5b      	ldrb	r3, [r3, r1]
 800df52:	429a      	cmp	r2, r3
 800df54:	d247      	bcs.n	800dfe6 <AckTimeoutRetriesProcess+0xb2>
 800df56:	4a26      	ldr	r2, [pc, #152]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800df58:	238e      	movs	r3, #142	; 0x8e
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	58d3      	ldr	r3, [r2, r3]
 800df5e:	4a25      	ldr	r2, [pc, #148]	; (800dff4 <AckTimeoutRetriesProcess+0xc0>)
 800df60:	5c9b      	ldrb	r3, [r3, r2]
 800df62:	2b08      	cmp	r3, #8
 800df64:	d83f      	bhi.n	800dfe6 <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800df66:	4a22      	ldr	r2, [pc, #136]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800df68:	238e      	movs	r3, #142	; 0x8e
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	58d3      	ldr	r3, [r2, r3]
 800df6e:	4a21      	ldr	r2, [pc, #132]	; (800dff4 <AckTimeoutRetriesProcess+0xc0>)
 800df70:	5c9a      	ldrb	r2, [r3, r2]
 800df72:	3201      	adds	r2, #1
 800df74:	b2d1      	uxtb	r1, r2
 800df76:	4a1f      	ldr	r2, [pc, #124]	; (800dff4 <AckTimeoutRetriesProcess+0xc0>)
 800df78:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800df7a:	4a1d      	ldr	r2, [pc, #116]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800df7c:	238e      	movs	r3, #142	; 0x8e
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	58d3      	ldr	r3, [r2, r3]
 800df82:	4a1c      	ldr	r2, [pc, #112]	; (800dff4 <AckTimeoutRetriesProcess+0xc0>)
 800df84:	5c9b      	ldrb	r3, [r3, r2]
 800df86:	2201      	movs	r2, #1
 800df88:	4013      	ands	r3, r2
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d02a      	beq.n	800dfe6 <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800df90:	1d3b      	adds	r3, r7, #4
 800df92:	2221      	movs	r2, #33	; 0x21
 800df94:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800df96:	4a16      	ldr	r2, [pc, #88]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800df98:	238e      	movs	r3, #142	; 0x8e
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	58d2      	ldr	r2, [r2, r3]
 800df9e:	2380      	movs	r3, #128	; 0x80
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	5cd2      	ldrb	r2, [r2, r3]
 800dfa4:	1d3b      	adds	r3, r7, #4
 800dfa6:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800dfa8:	4a11      	ldr	r2, [pc, #68]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800dfaa:	238e      	movs	r3, #142	; 0x8e
 800dfac:	00db      	lsls	r3, r3, #3
 800dfae:	58d3      	ldr	r3, [r2, r3]
 800dfb0:	22d5      	movs	r2, #213	; 0xd5
 800dfb2:	569a      	ldrsb	r2, [r3, r2]
 800dfb4:	1d3b      	adds	r3, r7, #4
 800dfb6:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dfb8:	4a0d      	ldr	r2, [pc, #52]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800dfba:	238e      	movs	r3, #142	; 0x8e
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	58d3      	ldr	r3, [r2, r3]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	1d3a      	adds	r2, r7, #4
 800dfc4:	0011      	movs	r1, r2
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f004 ff5b 	bl	8012e82 <RegionGetPhyParam>
 800dfcc:	0003      	movs	r3, r0
 800dfce:	001a      	movs	r2, r3
 800dfd0:	003b      	movs	r3, r7
 800dfd2:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800dfd4:	003b      	movs	r3, r7
 800dfd6:	6819      	ldr	r1, [r3, #0]
 800dfd8:	4a05      	ldr	r2, [pc, #20]	; (800dff0 <AckTimeoutRetriesProcess+0xbc>)
 800dfda:	238e      	movs	r3, #142	; 0x8e
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	58d3      	ldr	r3, [r2, r3]
 800dfe0:	b249      	sxtb	r1, r1
 800dfe2:	22d5      	movs	r2, #213	; 0xd5
 800dfe4:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800dfe6:	46c0      	nop			; (mov r8, r8)
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	b002      	add	sp, #8
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	46c0      	nop			; (mov r8, r8)
 800dff0:	20000708 	.word	0x20000708
 800dff4:	00000217 	.word	0x00000217
 800dff8:	00000216 	.word	0x00000216

0800dffc <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800e002:	4a19      	ldr	r2, [pc, #100]	; (800e068 <AckTimeoutRetriesFinalize+0x6c>)
 800e004:	2386      	movs	r3, #134	; 0x86
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	5cd3      	ldrb	r3, [r2, r3]
 800e00a:	2201      	movs	r2, #1
 800e00c:	4053      	eors	r3, r2
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b00      	cmp	r3, #0
 800e012:	d01c      	beq.n	800e04e <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800e014:	003b      	movs	r3, r7
 800e016:	2201      	movs	r2, #1
 800e018:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800e01a:	4b14      	ldr	r3, [pc, #80]	; (800e06c <AckTimeoutRetriesFinalize+0x70>)
 800e01c:	689a      	ldr	r2, [r3, #8]
 800e01e:	003b      	movs	r3, r7
 800e020:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e022:	4a11      	ldr	r2, [pc, #68]	; (800e068 <AckTimeoutRetriesFinalize+0x6c>)
 800e024:	238e      	movs	r3, #142	; 0x8e
 800e026:	00db      	lsls	r3, r3, #3
 800e028:	58d3      	ldr	r3, [r2, r3]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	003a      	movs	r2, r7
 800e02e:	0011      	movs	r1, r2
 800e030:	0018      	movs	r0, r3
 800e032:	f004 ff62 	bl	8012efa <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800e036:	4a0c      	ldr	r2, [pc, #48]	; (800e068 <AckTimeoutRetriesFinalize+0x6c>)
 800e038:	238e      	movs	r3, #142	; 0x8e
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	58d3      	ldr	r3, [r2, r3]
 800e03e:	4a0c      	ldr	r2, [pc, #48]	; (800e070 <AckTimeoutRetriesFinalize+0x74>)
 800e040:	2100      	movs	r1, #0
 800e042:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800e044:	4a08      	ldr	r2, [pc, #32]	; (800e068 <AckTimeoutRetriesFinalize+0x6c>)
 800e046:	2386      	movs	r3, #134	; 0x86
 800e048:	00db      	lsls	r3, r3, #3
 800e04a:	2100      	movs	r1, #0
 800e04c:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800e04e:	4a06      	ldr	r2, [pc, #24]	; (800e068 <AckTimeoutRetriesFinalize+0x6c>)
 800e050:	238e      	movs	r3, #142	; 0x8e
 800e052:	00db      	lsls	r3, r3, #3
 800e054:	58d3      	ldr	r3, [r2, r3]
 800e056:	4a07      	ldr	r2, [pc, #28]	; (800e074 <AckTimeoutRetriesFinalize+0x78>)
 800e058:	5c99      	ldrb	r1, [r3, r2]
 800e05a:	4b03      	ldr	r3, [pc, #12]	; (800e068 <AckTimeoutRetriesFinalize+0x6c>)
 800e05c:	4a06      	ldr	r2, [pc, #24]	; (800e078 <AckTimeoutRetriesFinalize+0x7c>)
 800e05e:	5499      	strb	r1, [r3, r2]
}
 800e060:	46c0      	nop			; (mov r8, r8)
 800e062:	46bd      	mov	sp, r7
 800e064:	b002      	add	sp, #8
 800e066:	bd80      	pop	{r7, pc}
 800e068:	20000708 	.word	0x20000708
 800e06c:	2000157c 	.word	0x2000157c
 800e070:	00000219 	.word	0x00000219
 800e074:	00000217 	.word	0x00000217
 800e078:	00000431 	.word	0x00000431

0800e07c <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	0002      	movs	r2, r0
 800e084:	1dfb      	adds	r3, r7, #7
 800e086:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800e088:	4a0c      	ldr	r2, [pc, #48]	; (800e0bc <CallNvmCtxCallback+0x40>)
 800e08a:	23d7      	movs	r3, #215	; 0xd7
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	58d3      	ldr	r3, [r2, r3]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00f      	beq.n	800e0b4 <CallNvmCtxCallback+0x38>
 800e094:	4a09      	ldr	r2, [pc, #36]	; (800e0bc <CallNvmCtxCallback+0x40>)
 800e096:	23d7      	movs	r3, #215	; 0xd7
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	58d3      	ldr	r3, [r2, r3]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d008      	beq.n	800e0b4 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800e0a2:	4a06      	ldr	r2, [pc, #24]	; (800e0bc <CallNvmCtxCallback+0x40>)
 800e0a4:	23d7      	movs	r3, #215	; 0xd7
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	58d3      	ldr	r3, [r2, r3]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	1dfa      	adds	r2, r7, #7
 800e0ae:	7812      	ldrb	r2, [r2, #0]
 800e0b0:	0010      	movs	r0, r2
 800e0b2:	4798      	blx	r3
    }
}
 800e0b4:	46c0      	nop			; (mov r8, r8)
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	b002      	add	sp, #8
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	20000708 	.word	0x20000708

0800e0c0 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	f7ff ffd9 	bl	800e07c <CallNvmCtxCallback>
}
 800e0ca:	46c0      	nop			; (mov r8, r8)
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	f7ff ffd1 	bl	800e07c <CallNvmCtxCallback>
}
 800e0da:	46c0      	nop			; (mov r8, r8)
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800e0e4:	2002      	movs	r0, #2
 800e0e6:	f7ff ffc9 	bl	800e07c <CallNvmCtxCallback>
}
 800e0ea:	46c0      	nop			; (mov r8, r8)
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800e0f4:	2003      	movs	r0, #3
 800e0f6:	f7ff ffc1 	bl	800e07c <CallNvmCtxCallback>
}
 800e0fa:	46c0      	nop			; (mov r8, r8)
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800e104:	2004      	movs	r0, #4
 800e106:	f7ff ffb9 	bl	800e07c <CallNvmCtxCallback>
}
 800e10a:	46c0      	nop			; (mov r8, r8)
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800e114:	2005      	movs	r0, #5
 800e116:	f7ff ffb1 	bl	800e07c <CallNvmCtxCallback>
}
 800e11a:	46c0      	nop			; (mov r8, r8)
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800e124:	2006      	movs	r0, #6
 800e126:	f7ff ffa9 	bl	800e07c <CallNvmCtxCallback>
}
 800e12a:	46c0      	nop			; (mov r8, r8)
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
 800e134:	2007      	movs	r0, #7
 800e136:	f7ff ffa1 	bl	800e07c <CallNvmCtxCallback>
}
 800e13a:	46c0      	nop			; (mov r8, r8)
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800e144:	4b0a      	ldr	r3, [pc, #40]	; (800e170 <IsRequestPending+0x30>)
 800e146:	4a0b      	ldr	r2, [pc, #44]	; (800e174 <IsRequestPending+0x34>)
 800e148:	5c9b      	ldrb	r3, [r3, r2]
 800e14a:	2204      	movs	r2, #4
 800e14c:	4013      	ands	r3, r2
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	2b00      	cmp	r3, #0
 800e152:	d107      	bne.n	800e164 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800e154:	4b06      	ldr	r3, [pc, #24]	; (800e170 <IsRequestPending+0x30>)
 800e156:	4a07      	ldr	r2, [pc, #28]	; (800e174 <IsRequestPending+0x34>)
 800e158:	5c9b      	ldrb	r3, [r3, r2]
 800e15a:	2201      	movs	r2, #1
 800e15c:	4013      	ands	r3, r2
 800e15e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <IsRequestPending+0x28>
    {
        return 1;
 800e164:	2301      	movs	r3, #1
 800e166:	e000      	b.n	800e16a <IsRequestPending+0x2a>
    }
    return 0;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	0018      	movs	r0, r3
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	20000708 	.word	0x20000708
 800e174:	0000046d 	.word	0x0000046d

0800e178 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e178:	b5b0      	push	{r4, r5, r7, lr}
 800e17a:	b094      	sub	sp, #80	; 0x50
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	1dfb      	adds	r3, r7, #7
 800e184:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <LoRaMacInitialization+0x1a>
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d101      	bne.n	800e196 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e192:	2303      	movs	r3, #3
 800e194:	e391      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d00b      	beq.n	800e1b6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d007      	beq.n	800e1b6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d003      	beq.n	800e1b6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d101      	bne.n	800e1ba <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	e37f      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e1ba:	1dfb      	adds	r3, r7, #7
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	0018      	movs	r0, r3
 800e1c0:	f004 fe4e 	bl	8012e60 <RegionIsActive>
 800e1c4:	0003      	movs	r3, r0
 800e1c6:	001a      	movs	r2, r3
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	4053      	eors	r3, r2
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e1d2:	2309      	movs	r3, #9
 800e1d4:	e371      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800e1d6:	4afe      	ldr	r2, [pc, #1016]	; (800e5d0 <LoRaMacInitialization+0x458>)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	0011      	movs	r1, r2
 800e1dc:	0018      	movs	r0, r3
 800e1de:	f002 fa53 	bl	8010688 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800e1e2:	238b      	movs	r3, #139	; 0x8b
 800e1e4:	009a      	lsls	r2, r3, #2
 800e1e6:	4bfb      	ldr	r3, [pc, #1004]	; (800e5d4 <LoRaMacInitialization+0x45c>)
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	f007 fc42 	bl	8015a74 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e1f0:	4af9      	ldr	r2, [pc, #996]	; (800e5d8 <LoRaMacInitialization+0x460>)
 800e1f2:	4bfa      	ldr	r3, [pc, #1000]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	f007 fc3c 	bl	8015a74 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800e1fc:	4af7      	ldr	r2, [pc, #988]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e1fe:	238e      	movs	r3, #142	; 0x8e
 800e200:	00db      	lsls	r3, r3, #3
 800e202:	49f4      	ldr	r1, [pc, #976]	; (800e5d4 <LoRaMacInitialization+0x45c>)
 800e204:	50d1      	str	r1, [r2, r3]

    // Set non zero variables to its default value
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800e206:	4af5      	ldr	r2, [pc, #980]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e208:	238e      	movs	r3, #142	; 0x8e
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	58d3      	ldr	r3, [r2, r3]
 800e20e:	4af4      	ldr	r2, [pc, #976]	; (800e5e0 <LoRaMacInitialization+0x468>)
 800e210:	2101      	movs	r1, #1
 800e212:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800e214:	4af1      	ldr	r2, [pc, #964]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e216:	238e      	movs	r3, #142	; 0x8e
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	58d3      	ldr	r3, [r2, r3]
 800e21c:	4af1      	ldr	r2, [pc, #964]	; (800e5e4 <LoRaMacInitialization+0x46c>)
 800e21e:	2101      	movs	r1, #1
 800e220:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 800e222:	4aee      	ldr	r2, [pc, #952]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e224:	238e      	movs	r3, #142	; 0x8e
 800e226:	00db      	lsls	r3, r3, #3
 800e228:	58d3      	ldr	r3, [r2, r3]
 800e22a:	1dfa      	adds	r2, r7, #7
 800e22c:	7812      	ldrb	r2, [r2, #0]
 800e22e:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800e230:	4aea      	ldr	r2, [pc, #936]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e232:	238e      	movs	r3, #142	; 0x8e
 800e234:	00db      	lsls	r3, r3, #3
 800e236:	58d3      	ldr	r3, [r2, r3]
 800e238:	22c8      	movs	r2, #200	; 0xc8
 800e23a:	2100      	movs	r1, #0
 800e23c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800e23e:	4ae7      	ldr	r2, [pc, #924]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e240:	238e      	movs	r3, #142	; 0x8e
 800e242:	00db      	lsls	r3, r3, #3
 800e244:	58d2      	ldr	r2, [r2, r3]
 800e246:	2316      	movs	r3, #22
 800e248:	33ff      	adds	r3, #255	; 0xff
 800e24a:	2100      	movs	r1, #0
 800e24c:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800e24e:	211c      	movs	r1, #28
 800e250:	187b      	adds	r3, r7, r1
 800e252:	2201      	movs	r2, #1
 800e254:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 800e256:	187b      	adds	r3, r7, r1
 800e258:	2200      	movs	r2, #0
 800e25a:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 800e25c:	187b      	adds	r3, r7, r1
 800e25e:	2203      	movs	r2, #3
 800e260:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 800e262:	187b      	adds	r3, r7, r1
 800e264:	2200      	movs	r2, #0
 800e266:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 800e268:	4adc      	ldr	r2, [pc, #880]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e26a:	238e      	movs	r3, #142	; 0x8e
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	58d2      	ldr	r2, [r2, r3]
 800e270:	2388      	movs	r3, #136	; 0x88
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	69f9      	ldr	r1, [r7, #28]
 800e276:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e278:	244c      	movs	r4, #76	; 0x4c
 800e27a:	193b      	adds	r3, r7, r4
 800e27c:	220e      	movs	r2, #14
 800e27e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e280:	4ad6      	ldr	r2, [pc, #856]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e282:	238e      	movs	r3, #142	; 0x8e
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	58d3      	ldr	r3, [r2, r3]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	193a      	adds	r2, r7, r4
 800e28c:	0011      	movs	r1, r2
 800e28e:	0018      	movs	r0, r3
 800e290:	f004 fdf7 	bl	8012e82 <RegionGetPhyParam>
 800e294:	0003      	movs	r3, r0
 800e296:	001a      	movs	r2, r3
 800e298:	2548      	movs	r5, #72	; 0x48
 800e29a:	197b      	adds	r3, r7, r5
 800e29c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800e29e:	197b      	adds	r3, r7, r5
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	49ce      	ldr	r1, [pc, #824]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e2a4:	228e      	movs	r2, #142	; 0x8e
 800e2a6:	00d2      	lsls	r2, r2, #3
 800e2a8:	588a      	ldr	r2, [r1, r2]
 800e2aa:	1e59      	subs	r1, r3, #1
 800e2ac:	418b      	sbcs	r3, r1
 800e2ae:	b2d9      	uxtb	r1, r3
 800e2b0:	2389      	movs	r3, #137	; 0x89
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e2b6:	193b      	adds	r3, r7, r4
 800e2b8:	2209      	movs	r2, #9
 800e2ba:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e2bc:	4ac7      	ldr	r2, [pc, #796]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e2be:	238e      	movs	r3, #142	; 0x8e
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	58d3      	ldr	r3, [r2, r3]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	193a      	adds	r2, r7, r4
 800e2c8:	0011      	movs	r1, r2
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f004 fdd9 	bl	8012e82 <RegionGetPhyParam>
 800e2d0:	0003      	movs	r3, r0
 800e2d2:	001a      	movs	r2, r3
 800e2d4:	197b      	adds	r3, r7, r5
 800e2d6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800e2d8:	197b      	adds	r3, r7, r5
 800e2da:	6819      	ldr	r1, [r3, #0]
 800e2dc:	4abf      	ldr	r2, [pc, #764]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e2de:	238e      	movs	r3, #142	; 0x8e
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	58d3      	ldr	r3, [r2, r3]
 800e2e4:	b24a      	sxtb	r2, r1
 800e2e6:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e2e8:	193b      	adds	r3, r7, r4
 800e2ea:	2205      	movs	r2, #5
 800e2ec:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e2ee:	4abb      	ldr	r2, [pc, #748]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e2f0:	238e      	movs	r3, #142	; 0x8e
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	58d3      	ldr	r3, [r2, r3]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	193a      	adds	r2, r7, r4
 800e2fa:	0011      	movs	r1, r2
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f004 fdc0 	bl	8012e82 <RegionGetPhyParam>
 800e302:	0003      	movs	r3, r0
 800e304:	001a      	movs	r2, r3
 800e306:	197b      	adds	r3, r7, r5
 800e308:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800e30a:	197b      	adds	r3, r7, r5
 800e30c:	6819      	ldr	r1, [r3, #0]
 800e30e:	4ab3      	ldr	r2, [pc, #716]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e310:	238e      	movs	r3, #142	; 0x8e
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	58d3      	ldr	r3, [r2, r3]
 800e316:	b24a      	sxtb	r2, r1
 800e318:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e31a:	193b      	adds	r3, r7, r4
 800e31c:	220f      	movs	r2, #15
 800e31e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e320:	4aae      	ldr	r2, [pc, #696]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e322:	238e      	movs	r3, #142	; 0x8e
 800e324:	00db      	lsls	r3, r3, #3
 800e326:	58d3      	ldr	r3, [r2, r3]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	193a      	adds	r2, r7, r4
 800e32c:	0011      	movs	r1, r2
 800e32e:	0018      	movs	r0, r3
 800e330:	f004 fda7 	bl	8012e82 <RegionGetPhyParam>
 800e334:	0003      	movs	r3, r0
 800e336:	001a      	movs	r2, r3
 800e338:	197b      	adds	r3, r7, r5
 800e33a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e33c:	4aa7      	ldr	r2, [pc, #668]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e33e:	238e      	movs	r3, #142	; 0x8e
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	58d3      	ldr	r3, [r2, r3]
 800e344:	197a      	adds	r2, r7, r5
 800e346:	6812      	ldr	r2, [r2, #0]
 800e348:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e34a:	193b      	adds	r3, r7, r4
 800e34c:	2210      	movs	r2, #16
 800e34e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e350:	4aa2      	ldr	r2, [pc, #648]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e352:	238e      	movs	r3, #142	; 0x8e
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	58d3      	ldr	r3, [r2, r3]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	193a      	adds	r2, r7, r4
 800e35c:	0011      	movs	r1, r2
 800e35e:	0018      	movs	r0, r3
 800e360:	f004 fd8f 	bl	8012e82 <RegionGetPhyParam>
 800e364:	0003      	movs	r3, r0
 800e366:	001a      	movs	r2, r3
 800e368:	197b      	adds	r3, r7, r5
 800e36a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e36c:	4a9b      	ldr	r2, [pc, #620]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e36e:	238e      	movs	r3, #142	; 0x8e
 800e370:	00db      	lsls	r3, r3, #3
 800e372:	58d3      	ldr	r3, [r2, r3]
 800e374:	197a      	adds	r2, r7, r5
 800e376:	6812      	ldr	r2, [r2, #0]
 800e378:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e37a:	193b      	adds	r3, r7, r4
 800e37c:	2211      	movs	r2, #17
 800e37e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e380:	4a96      	ldr	r2, [pc, #600]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e382:	238e      	movs	r3, #142	; 0x8e
 800e384:	00db      	lsls	r3, r3, #3
 800e386:	58d3      	ldr	r3, [r2, r3]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	193a      	adds	r2, r7, r4
 800e38c:	0011      	movs	r1, r2
 800e38e:	0018      	movs	r0, r3
 800e390:	f004 fd77 	bl	8012e82 <RegionGetPhyParam>
 800e394:	0003      	movs	r3, r0
 800e396:	001a      	movs	r2, r3
 800e398:	197b      	adds	r3, r7, r5
 800e39a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e39c:	4a8f      	ldr	r2, [pc, #572]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e39e:	238e      	movs	r3, #142	; 0x8e
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	58d3      	ldr	r3, [r2, r3]
 800e3a4:	197a      	adds	r2, r7, r5
 800e3a6:	6812      	ldr	r2, [r2, #0]
 800e3a8:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e3aa:	193b      	adds	r3, r7, r4
 800e3ac:	2212      	movs	r2, #18
 800e3ae:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e3b0:	4a8a      	ldr	r2, [pc, #552]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e3b2:	238e      	movs	r3, #142	; 0x8e
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	58d3      	ldr	r3, [r2, r3]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	193a      	adds	r2, r7, r4
 800e3bc:	0011      	movs	r1, r2
 800e3be:	0018      	movs	r0, r3
 800e3c0:	f004 fd5f 	bl	8012e82 <RegionGetPhyParam>
 800e3c4:	0003      	movs	r3, r0
 800e3c6:	001a      	movs	r2, r3
 800e3c8:	197b      	adds	r3, r7, r5
 800e3ca:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e3cc:	4a83      	ldr	r2, [pc, #524]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e3ce:	238e      	movs	r3, #142	; 0x8e
 800e3d0:	00db      	lsls	r3, r3, #3
 800e3d2:	58d3      	ldr	r3, [r2, r3]
 800e3d4:	197a      	adds	r2, r7, r5
 800e3d6:	6812      	ldr	r2, [r2, #0]
 800e3d8:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e3da:	193b      	adds	r3, r7, r4
 800e3dc:	2213      	movs	r2, #19
 800e3de:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e3e0:	4a7e      	ldr	r2, [pc, #504]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e3e2:	238e      	movs	r3, #142	; 0x8e
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	58d3      	ldr	r3, [r2, r3]
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	193a      	adds	r2, r7, r4
 800e3ec:	0011      	movs	r1, r2
 800e3ee:	0018      	movs	r0, r3
 800e3f0:	f004 fd47 	bl	8012e82 <RegionGetPhyParam>
 800e3f4:	0003      	movs	r3, r0
 800e3f6:	001a      	movs	r2, r3
 800e3f8:	197b      	adds	r3, r7, r5
 800e3fa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e3fc:	4a77      	ldr	r2, [pc, #476]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e3fe:	238e      	movs	r3, #142	; 0x8e
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	58d3      	ldr	r3, [r2, r3]
 800e404:	197a      	adds	r2, r7, r5
 800e406:	6812      	ldr	r2, [r2, #0]
 800e408:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e40a:	193b      	adds	r3, r7, r4
 800e40c:	2216      	movs	r2, #22
 800e40e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e410:	4a72      	ldr	r2, [pc, #456]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e412:	238e      	movs	r3, #142	; 0x8e
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	58d3      	ldr	r3, [r2, r3]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	193a      	adds	r2, r7, r4
 800e41c:	0011      	movs	r1, r2
 800e41e:	0018      	movs	r0, r3
 800e420:	f004 fd2f 	bl	8012e82 <RegionGetPhyParam>
 800e424:	0003      	movs	r3, r0
 800e426:	001a      	movs	r2, r3
 800e428:	197b      	adds	r3, r7, r5
 800e42a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e42c:	197b      	adds	r3, r7, r5
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	4a6a      	ldr	r2, [pc, #424]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e432:	238e      	movs	r3, #142	; 0x8e
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	58d3      	ldr	r3, [r2, r3]
 800e438:	b2c9      	uxtb	r1, r1
 800e43a:	2225      	movs	r2, #37	; 0x25
 800e43c:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e43e:	193b      	adds	r3, r7, r4
 800e440:	2217      	movs	r2, #23
 800e442:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e444:	4a65      	ldr	r2, [pc, #404]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e446:	238e      	movs	r3, #142	; 0x8e
 800e448:	00db      	lsls	r3, r3, #3
 800e44a:	58d3      	ldr	r3, [r2, r3]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	193a      	adds	r2, r7, r4
 800e450:	0011      	movs	r1, r2
 800e452:	0018      	movs	r0, r3
 800e454:	f004 fd15 	bl	8012e82 <RegionGetPhyParam>
 800e458:	0003      	movs	r3, r0
 800e45a:	001a      	movs	r2, r3
 800e45c:	197b      	adds	r3, r7, r5
 800e45e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e460:	4a5e      	ldr	r2, [pc, #376]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e462:	238e      	movs	r3, #142	; 0x8e
 800e464:	00db      	lsls	r3, r3, #3
 800e466:	58d3      	ldr	r3, [r2, r3]
 800e468:	197a      	adds	r2, r7, r5
 800e46a:	6812      	ldr	r2, [r2, #0]
 800e46c:	629a      	str	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e46e:	193b      	adds	r3, r7, r4
 800e470:	2218      	movs	r2, #24
 800e472:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e474:	4a59      	ldr	r2, [pc, #356]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e476:	238e      	movs	r3, #142	; 0x8e
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	58d3      	ldr	r3, [r2, r3]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	193a      	adds	r2, r7, r4
 800e480:	0011      	movs	r1, r2
 800e482:	0018      	movs	r0, r3
 800e484:	f004 fcfd 	bl	8012e82 <RegionGetPhyParam>
 800e488:	0003      	movs	r3, r0
 800e48a:	001a      	movs	r2, r3
 800e48c:	197b      	adds	r3, r7, r5
 800e48e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e490:	197b      	adds	r3, r7, r5
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	4a51      	ldr	r2, [pc, #324]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e496:	238e      	movs	r3, #142	; 0x8e
 800e498:	00db      	lsls	r3, r3, #3
 800e49a:	58d3      	ldr	r3, [r2, r3]
 800e49c:	b2c9      	uxtb	r1, r1
 800e49e:	222c      	movs	r2, #44	; 0x2c
 800e4a0:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e4a2:	193b      	adds	r3, r7, r4
 800e4a4:	221d      	movs	r2, #29
 800e4a6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e4a8:	4a4c      	ldr	r2, [pc, #304]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e4aa:	238e      	movs	r3, #142	; 0x8e
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	58d3      	ldr	r3, [r2, r3]
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	193a      	adds	r2, r7, r4
 800e4b4:	0011      	movs	r1, r2
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	f004 fce3 	bl	8012e82 <RegionGetPhyParam>
 800e4bc:	0003      	movs	r3, r0
 800e4be:	001a      	movs	r2, r3
 800e4c0:	197b      	adds	r3, r7, r5
 800e4c2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e4c4:	197b      	adds	r3, r7, r5
 800e4c6:	6819      	ldr	r1, [r3, #0]
 800e4c8:	4a44      	ldr	r2, [pc, #272]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e4ca:	238e      	movs	r3, #142	; 0x8e
 800e4cc:	00db      	lsls	r3, r3, #3
 800e4ce:	58d3      	ldr	r3, [r2, r3]
 800e4d0:	b2c9      	uxtb	r1, r1
 800e4d2:	2230      	movs	r2, #48	; 0x30
 800e4d4:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e4d6:	193b      	adds	r3, r7, r4
 800e4d8:	221e      	movs	r2, #30
 800e4da:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e4dc:	4a3f      	ldr	r2, [pc, #252]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e4de:	238e      	movs	r3, #142	; 0x8e
 800e4e0:	00db      	lsls	r3, r3, #3
 800e4e2:	58d3      	ldr	r3, [r2, r3]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	193a      	adds	r2, r7, r4
 800e4e8:	0011      	movs	r1, r2
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f004 fcc9 	bl	8012e82 <RegionGetPhyParam>
 800e4f0:	0003      	movs	r3, r0
 800e4f2:	001a      	movs	r2, r3
 800e4f4:	197b      	adds	r3, r7, r5
 800e4f6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e4f8:	197b      	adds	r3, r7, r5
 800e4fa:	6819      	ldr	r1, [r3, #0]
 800e4fc:	4a37      	ldr	r2, [pc, #220]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e4fe:	238e      	movs	r3, #142	; 0x8e
 800e500:	00db      	lsls	r3, r3, #3
 800e502:	58d3      	ldr	r3, [r2, r3]
 800e504:	b2c9      	uxtb	r1, r1
 800e506:	2231      	movs	r2, #49	; 0x31
 800e508:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e50a:	193b      	adds	r3, r7, r4
 800e50c:	221f      	movs	r2, #31
 800e50e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e510:	4a32      	ldr	r2, [pc, #200]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e512:	238e      	movs	r3, #142	; 0x8e
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	58d3      	ldr	r3, [r2, r3]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	193a      	adds	r2, r7, r4
 800e51c:	0011      	movs	r1, r2
 800e51e:	0018      	movs	r0, r3
 800e520:	f004 fcaf 	bl	8012e82 <RegionGetPhyParam>
 800e524:	0003      	movs	r3, r0
 800e526:	001a      	movs	r2, r3
 800e528:	197b      	adds	r3, r7, r5
 800e52a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e52c:	4a2b      	ldr	r2, [pc, #172]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e52e:	238e      	movs	r3, #142	; 0x8e
 800e530:	00db      	lsls	r3, r3, #3
 800e532:	58d3      	ldr	r3, [r2, r3]
 800e534:	197a      	adds	r2, r7, r5
 800e536:	6812      	ldr	r2, [r2, #0]
 800e538:	635a      	str	r2, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e53a:	193b      	adds	r3, r7, r4
 800e53c:	2220      	movs	r2, #32
 800e53e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e540:	4a26      	ldr	r2, [pc, #152]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e542:	238e      	movs	r3, #142	; 0x8e
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	58d3      	ldr	r3, [r2, r3]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	193a      	adds	r2, r7, r4
 800e54c:	0011      	movs	r1, r2
 800e54e:	0018      	movs	r0, r3
 800e550:	f004 fc97 	bl	8012e82 <RegionGetPhyParam>
 800e554:	0003      	movs	r3, r0
 800e556:	001a      	movs	r2, r3
 800e558:	197b      	adds	r3, r7, r5
 800e55a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e55c:	4a1f      	ldr	r2, [pc, #124]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e55e:	238e      	movs	r3, #142	; 0x8e
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	58d3      	ldr	r3, [r2, r3]
 800e564:	197a      	adds	r2, r7, r5
 800e566:	6812      	ldr	r2, [r2, #0]
 800e568:	639a      	str	r2, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e56a:	193b      	adds	r3, r7, r4
 800e56c:	220a      	movs	r2, #10
 800e56e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e570:	4a1a      	ldr	r2, [pc, #104]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e572:	238e      	movs	r3, #142	; 0x8e
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	58d3      	ldr	r3, [r2, r3]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	193a      	adds	r2, r7, r4
 800e57c:	0011      	movs	r1, r2
 800e57e:	0018      	movs	r0, r3
 800e580:	f004 fc7f 	bl	8012e82 <RegionGetPhyParam>
 800e584:	0003      	movs	r3, r0
 800e586:	001a      	movs	r2, r3
 800e588:	197b      	adds	r3, r7, r5
 800e58a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
 800e58c:	197b      	adds	r3, r7, r5
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	4a12      	ldr	r2, [pc, #72]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e592:	238e      	movs	r3, #142	; 0x8e
 800e594:	00db      	lsls	r3, r3, #3
 800e596:	58d3      	ldr	r3, [r2, r3]
 800e598:	b289      	uxth	r1, r1
 800e59a:	22d0      	movs	r2, #208	; 0xd0
 800e59c:	5299      	strh	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e59e:	193b      	adds	r3, r7, r4
 800e5a0:	220b      	movs	r2, #11
 800e5a2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e5a4:	4a0d      	ldr	r2, [pc, #52]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e5a6:	238e      	movs	r3, #142	; 0x8e
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	58d3      	ldr	r3, [r2, r3]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	193a      	adds	r2, r7, r4
 800e5b0:	0011      	movs	r1, r2
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	f004 fc65 	bl	8012e82 <RegionGetPhyParam>
 800e5b8:	0003      	movs	r3, r0
 800e5ba:	001a      	movs	r2, r3
 800e5bc:	197b      	adds	r3, r7, r5
 800e5be:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
 800e5c0:	197b      	adds	r3, r7, r5
 800e5c2:	6819      	ldr	r1, [r3, #0]
 800e5c4:	4a05      	ldr	r2, [pc, #20]	; (800e5dc <LoRaMacInitialization+0x464>)
 800e5c6:	238e      	movs	r3, #142	; 0x8e
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	58d3      	ldr	r3, [r2, r3]
 800e5cc:	b289      	uxth	r1, r1
 800e5ce:	e00b      	b.n	800e5e8 <LoRaMacInitialization+0x470>
 800e5d0:	0800e121 	.word	0x0800e121
 800e5d4:	20000b7c 	.word	0x20000b7c
 800e5d8:	00000474 	.word	0x00000474
 800e5dc:	20000708 	.word	0x20000708
 800e5e0:	00000217 	.word	0x00000217
 800e5e4:	00000216 	.word	0x00000216
 800e5e8:	22d2      	movs	r2, #210	; 0xd2
 800e5ea:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800e5ec:	4ab5      	ldr	r2, [pc, #724]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e5ee:	238e      	movs	r3, #142	; 0x8e
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	58d3      	ldr	r3, [r2, r3]
 800e5f4:	2224      	movs	r2, #36	; 0x24
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800e5fa:	4ab2      	ldr	r2, [pc, #712]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e5fc:	238e      	movs	r3, #142	; 0x8e
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	58d3      	ldr	r3, [r2, r3]
 800e602:	2214      	movs	r2, #20
 800e604:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800e606:	4aaf      	ldr	r2, [pc, #700]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e608:	238e      	movs	r3, #142	; 0x8e
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	58d3      	ldr	r3, [r2, r3]
 800e60e:	2206      	movs	r2, #6
 800e610:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800e612:	4aac      	ldr	r2, [pc, #688]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e614:	238e      	movs	r3, #142	; 0x8e
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	58d3      	ldr	r3, [r2, r3]
 800e61a:	49aa      	ldr	r1, [pc, #680]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e61c:	228e      	movs	r2, #142	; 0x8e
 800e61e:	00d2      	lsls	r2, r2, #3
 800e620:	588a      	ldr	r2, [r1, r2]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	21d8      	movs	r1, #216	; 0xd8
 800e626:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800e628:	4aa6      	ldr	r2, [pc, #664]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e62a:	238e      	movs	r3, #142	; 0x8e
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	58d2      	ldr	r2, [r2, r3]
 800e630:	49a4      	ldr	r1, [pc, #656]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e632:	238e      	movs	r3, #142	; 0x8e
 800e634:	00db      	lsls	r3, r3, #3
 800e636:	58cb      	ldr	r3, [r1, r3]
 800e638:	7b11      	ldrb	r1, [r2, #12]
 800e63a:	22dc      	movs	r2, #220	; 0xdc
 800e63c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800e63e:	4aa1      	ldr	r2, [pc, #644]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e640:	238e      	movs	r3, #142	; 0x8e
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	58d3      	ldr	r3, [r2, r3]
 800e646:	499f      	ldr	r1, [pc, #636]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e648:	228e      	movs	r2, #142	; 0x8e
 800e64a:	00d2      	lsls	r2, r2, #3
 800e64c:	588a      	ldr	r2, [r1, r2]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	21e0      	movs	r1, #224	; 0xe0
 800e652:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800e654:	4a9b      	ldr	r2, [pc, #620]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e656:	238e      	movs	r3, #142	; 0x8e
 800e658:	00db      	lsls	r3, r3, #3
 800e65a:	58d3      	ldr	r3, [r2, r3]
 800e65c:	4999      	ldr	r1, [pc, #612]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e65e:	228e      	movs	r2, #142	; 0x8e
 800e660:	00d2      	lsls	r2, r2, #3
 800e662:	588a      	ldr	r2, [r1, r2]
 800e664:	695b      	ldr	r3, [r3, #20]
 800e666:	21e4      	movs	r1, #228	; 0xe4
 800e668:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800e66a:	4a96      	ldr	r2, [pc, #600]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e66c:	238e      	movs	r3, #142	; 0x8e
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	58d3      	ldr	r3, [r2, r3]
 800e672:	4994      	ldr	r1, [pc, #592]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e674:	228e      	movs	r2, #142	; 0x8e
 800e676:	00d2      	lsls	r2, r2, #3
 800e678:	588a      	ldr	r2, [r1, r2]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	21e8      	movs	r1, #232	; 0xe8
 800e67e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800e680:	4a90      	ldr	r2, [pc, #576]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e682:	238e      	movs	r3, #142	; 0x8e
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	58d3      	ldr	r3, [r2, r3]
 800e688:	498e      	ldr	r1, [pc, #568]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e68a:	228e      	movs	r2, #142	; 0x8e
 800e68c:	00d2      	lsls	r2, r2, #3
 800e68e:	588a      	ldr	r2, [r1, r2]
 800e690:	69db      	ldr	r3, [r3, #28]
 800e692:	21ec      	movs	r1, #236	; 0xec
 800e694:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800e696:	4a8b      	ldr	r2, [pc, #556]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e698:	238e      	movs	r3, #142	; 0x8e
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	58d3      	ldr	r3, [r2, r3]
 800e69e:	4989      	ldr	r1, [pc, #548]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6a0:	228e      	movs	r2, #142	; 0x8e
 800e6a2:	00d2      	lsls	r2, r2, #3
 800e6a4:	588a      	ldr	r2, [r1, r2]
 800e6a6:	6a1b      	ldr	r3, [r3, #32]
 800e6a8:	21f0      	movs	r1, #240	; 0xf0
 800e6aa:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800e6ac:	4a85      	ldr	r2, [pc, #532]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6ae:	238e      	movs	r3, #142	; 0x8e
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	58d2      	ldr	r2, [r2, r3]
 800e6b4:	4983      	ldr	r1, [pc, #524]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6b6:	238e      	movs	r3, #142	; 0x8e
 800e6b8:	00db      	lsls	r3, r3, #3
 800e6ba:	58cb      	ldr	r3, [r1, r3]
 800e6bc:	2124      	movs	r1, #36	; 0x24
 800e6be:	5c51      	ldrb	r1, [r2, r1]
 800e6c0:	22f4      	movs	r2, #244	; 0xf4
 800e6c2:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
 800e6c4:	f7fe fec0 	bl	800d448 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800e6c8:	4a7e      	ldr	r2, [pc, #504]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6ca:	238e      	movs	r3, #142	; 0x8e
 800e6cc:	00db      	lsls	r3, r3, #3
 800e6ce:	58d3      	ldr	r3, [r2, r3]
 800e6d0:	22c9      	movs	r2, #201	; 0xc9
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 800e6d6:	4a7b      	ldr	r2, [pc, #492]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6d8:	23d6      	movs	r3, #214	; 0xd6
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	68f9      	ldr	r1, [r7, #12]
 800e6de:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 800e6e0:	4a78      	ldr	r2, [pc, #480]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6e2:	23d7      	movs	r3, #215	; 0xd7
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	68b9      	ldr	r1, [r7, #8]
 800e6e8:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800e6ea:	4b76      	ldr	r3, [pc, #472]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6ec:	4a76      	ldr	r2, [pc, #472]	; (800e8c8 <LoRaMacInitialization+0x750>)
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800e6f2:	4a74      	ldr	r2, [pc, #464]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6f4:	23d5      	movs	r3, #213	; 0xd5
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	2101      	movs	r1, #1
 800e6fa:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
 800e6fc:	4a71      	ldr	r2, [pc, #452]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e6fe:	23d0      	movs	r3, #208	; 0xd0
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	2100      	movs	r1, #0
 800e704:	50d1      	str	r1, [r2, r3]
    MacCtx.AggregatedTimeOff = 0;
 800e706:	4a6f      	ldr	r2, [pc, #444]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e708:	23d1      	movs	r3, #209	; 0xd1
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	2100      	movs	r1, #0
 800e70e:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e710:	4a6e      	ldr	r2, [pc, #440]	; (800e8cc <LoRaMacInitialization+0x754>)
 800e712:	4b6f      	ldr	r3, [pc, #444]	; (800e8d0 <LoRaMacInitialization+0x758>)
 800e714:	0011      	movs	r1, r2
 800e716:	0018      	movs	r0, r3
 800e718:	f007 f840 	bl	801579c <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e71c:	4a6d      	ldr	r2, [pc, #436]	; (800e8d4 <LoRaMacInitialization+0x75c>)
 800e71e:	4b6e      	ldr	r3, [pc, #440]	; (800e8d8 <LoRaMacInitialization+0x760>)
 800e720:	0011      	movs	r1, r2
 800e722:	0018      	movs	r0, r3
 800e724:	f007 f83a 	bl	801579c <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e728:	4a6c      	ldr	r2, [pc, #432]	; (800e8dc <LoRaMacInitialization+0x764>)
 800e72a:	4b6d      	ldr	r3, [pc, #436]	; (800e8e0 <LoRaMacInitialization+0x768>)
 800e72c:	0011      	movs	r1, r2
 800e72e:	0018      	movs	r0, r3
 800e730:	f007 f834 	bl	801579c <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800e734:	4a6b      	ldr	r2, [pc, #428]	; (800e8e4 <LoRaMacInitialization+0x76c>)
 800e736:	4b6c      	ldr	r3, [pc, #432]	; (800e8e8 <LoRaMacInitialization+0x770>)
 800e738:	0011      	movs	r1, r2
 800e73a:	0018      	movs	r0, r3
 800e73c:	f007 f82e 	bl	801579c <TimerInit>

    // Store the current initialization time
    MacCtx.InitializationTime = TimerGetCurrentTime( );
 800e740:	f007 f906 	bl	8015950 <TimerGetCurrentTime>
 800e744:	0001      	movs	r1, r0
 800e746:	4a5f      	ldr	r2, [pc, #380]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e748:	23d2      	movs	r3, #210	; 0xd2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	50d1      	str	r1, [r2, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e74e:	4a5d      	ldr	r2, [pc, #372]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e750:	23d8      	movs	r3, #216	; 0xd8
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4965      	ldr	r1, [pc, #404]	; (800e8ec <LoRaMacInitialization+0x774>)
 800e756:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e758:	4a5a      	ldr	r2, [pc, #360]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e75a:	23da      	movs	r3, #218	; 0xda
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4964      	ldr	r1, [pc, #400]	; (800e8f0 <LoRaMacInitialization+0x778>)
 800e760:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e762:	4a58      	ldr	r2, [pc, #352]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e764:	23dc      	movs	r3, #220	; 0xdc
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4962      	ldr	r1, [pc, #392]	; (800e8f4 <LoRaMacInitialization+0x77c>)
 800e76a:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e76c:	4a55      	ldr	r2, [pc, #340]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e76e:	23d9      	movs	r3, #217	; 0xd9
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4961      	ldr	r1, [pc, #388]	; (800e8f8 <LoRaMacInitialization+0x780>)
 800e774:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e776:	4a53      	ldr	r2, [pc, #332]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e778:	23db      	movs	r3, #219	; 0xdb
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	495f      	ldr	r1, [pc, #380]	; (800e8fc <LoRaMacInitialization+0x784>)
 800e77e:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800e780:	4b5f      	ldr	r3, [pc, #380]	; (800e900 <LoRaMacInitialization+0x788>)
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	4a5f      	ldr	r2, [pc, #380]	; (800e904 <LoRaMacInitialization+0x78c>)
 800e786:	0010      	movs	r0, r2
 800e788:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800e78a:	2114      	movs	r1, #20
 800e78c:	187b      	adds	r3, r7, r1
 800e78e:	2200      	movs	r2, #0
 800e790:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800e792:	187b      	adds	r3, r7, r1
 800e794:	2200      	movs	r2, #0
 800e796:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e798:	4a4a      	ldr	r2, [pc, #296]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e79a:	238e      	movs	r3, #142	; 0x8e
 800e79c:	00db      	lsls	r3, r3, #3
 800e79e:	58d3      	ldr	r3, [r2, r3]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	187a      	adds	r2, r7, r1
 800e7a4:	0011      	movs	r1, r2
 800e7a6:	0018      	movs	r0, r3
 800e7a8:	f004 fba7 	bl	8012efa <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800e7ac:	4b56      	ldr	r3, [pc, #344]	; (800e908 <LoRaMacInitialization+0x790>)
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f7fb fb28 	bl	8009e04 <SecureElementInit>
 800e7b4:	1e03      	subs	r3, r0, #0
 800e7b6:	d001      	beq.n	800e7bc <LoRaMacInitialization+0x644>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e7b8:	2311      	movs	r3, #17
 800e7ba:	e07e      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800e7bc:	4b53      	ldr	r3, [pc, #332]	; (800e90c <LoRaMacInitialization+0x794>)
 800e7be:	0018      	movs	r0, r3
 800e7c0:	f003 f858 	bl	8011874 <LoRaMacCryptoInit>
 800e7c4:	1e03      	subs	r3, r0, #0
 800e7c6:	d001      	beq.n	800e7cc <LoRaMacInitialization+0x654>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e7c8:	2311      	movs	r3, #17
 800e7ca:	e076      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800e7cc:	4b50      	ldr	r3, [pc, #320]	; (800e910 <LoRaMacInitialization+0x798>)
 800e7ce:	0018      	movs	r0, r3
 800e7d0:	f001 fd66 	bl	80102a0 <LoRaMacCommandsInit>
 800e7d4:	1e03      	subs	r3, r0, #0
 800e7d6:	d001      	beq.n	800e7dc <LoRaMacInitialization+0x664>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e7d8:	2313      	movs	r3, #19
 800e7da:	e06e      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }

    // Initialize FCnt Handler module
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800e7dc:	4b4d      	ldr	r3, [pc, #308]	; (800e914 <LoRaMacInitialization+0x79c>)
 800e7de:	0018      	movs	r0, r3
 800e7e0:	f003 fdea 	bl	80123b8 <LoRaMacFCntHandlerInit>
 800e7e4:	1e03      	subs	r3, r0, #0
 800e7e6:	d001      	beq.n	800e7ec <LoRaMacInitialization+0x674>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e7e8:	2312      	movs	r3, #18
 800e7ea:	e066      	b.n	800e8ba <LoRaMacInitialization+0x742>
    }

    // Set multicast downlink counter reference
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
 800e7ec:	4a35      	ldr	r2, [pc, #212]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e7ee:	238e      	movs	r3, #142	; 0x8e
 800e7f0:	00db      	lsls	r3, r3, #3
 800e7f2:	58d3      	ldr	r3, [r2, r3]
 800e7f4:	3348      	adds	r3, #72	; 0x48
 800e7f6:	0018      	movs	r0, r3
 800e7f8:	f003 ff4c 	bl	8012694 <LoRaMacFCntHandlerSetMulticastReference>

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e7fc:	4b40      	ldr	r3, [pc, #256]	; (800e900 <LoRaMacInitialization+0x788>)
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	4798      	blx	r3
 800e802:	0003      	movs	r3, r0
 800e804:	0018      	movs	r0, r3
 800e806:	f007 f8d5 	bl	80159b4 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800e80a:	4b3d      	ldr	r3, [pc, #244]	; (800e900 <LoRaMacInitialization+0x788>)
 800e80c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e80e:	492d      	ldr	r1, [pc, #180]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e810:	228e      	movs	r2, #142	; 0x8e
 800e812:	00d2      	lsls	r2, r2, #3
 800e814:	588a      	ldr	r2, [r1, r2]
 800e816:	21c9      	movs	r1, #201	; 0xc9
 800e818:	5c52      	ldrb	r2, [r2, r1]
 800e81a:	0010      	movs	r0, r2
 800e81c:	4798      	blx	r3
    Radio.Sleep( );
 800e81e:	4b38      	ldr	r3, [pc, #224]	; (800e900 <LoRaMacInitialization+0x788>)
 800e820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e822:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e824:	2140      	movs	r1, #64	; 0x40
 800e826:	187b      	adds	r3, r7, r1
 800e828:	2200      	movs	r2, #0
 800e82a:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 800e82c:	187b      	adds	r3, r7, r1
 800e82e:	2200      	movs	r2, #0
 800e830:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d008      	beq.n	800e84a <LoRaMacInitialization+0x6d2>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	685a      	ldr	r2, [r3, #4]
 800e83c:	2140      	movs	r1, #64	; 0x40
 800e83e:	187b      	adds	r3, r7, r1
 800e840:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	68da      	ldr	r2, [r3, #12]
 800e846:	187b      	adds	r3, r7, r1
 800e848:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e84a:	2120      	movs	r1, #32
 800e84c:	187b      	adds	r3, r7, r1
 800e84e:	4a32      	ldr	r2, [pc, #200]	; (800e918 <LoRaMacInitialization+0x7a0>)
 800e850:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e852:	187b      	adds	r3, r7, r1
 800e854:	4a31      	ldr	r2, [pc, #196]	; (800e91c <LoRaMacInitialization+0x7a4>)
 800e856:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e858:	187b      	adds	r3, r7, r1
 800e85a:	4a31      	ldr	r2, [pc, #196]	; (800e920 <LoRaMacInitialization+0x7a8>)
 800e85c:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e85e:	187b      	adds	r3, r7, r1
 800e860:	4a30      	ldr	r2, [pc, #192]	; (800e924 <LoRaMacInitialization+0x7ac>)
 800e862:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800e864:	4a17      	ldr	r2, [pc, #92]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e866:	238e      	movs	r3, #142	; 0x8e
 800e868:	00db      	lsls	r3, r3, #3
 800e86a:	58d3      	ldr	r3, [r2, r3]
 800e86c:	3344      	adds	r3, #68	; 0x44
 800e86e:	001a      	movs	r2, r3
 800e870:	187b      	adds	r3, r7, r1
 800e872:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800e874:	4a13      	ldr	r2, [pc, #76]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e876:	238e      	movs	r3, #142	; 0x8e
 800e878:	00db      	lsls	r3, r3, #3
 800e87a:	58d3      	ldr	r3, [r2, r3]
 800e87c:	001a      	movs	r2, r3
 800e87e:	187b      	adds	r3, r7, r1
 800e880:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800e882:	4a10      	ldr	r2, [pc, #64]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e884:	238e      	movs	r3, #142	; 0x8e
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	58d3      	ldr	r3, [r2, r3]
 800e88a:	33d4      	adds	r3, #212	; 0xd4
 800e88c:	001a      	movs	r2, r3
 800e88e:	187b      	adds	r3, r7, r1
 800e890:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800e892:	4a0c      	ldr	r2, [pc, #48]	; (800e8c4 <LoRaMacInitialization+0x74c>)
 800e894:	238e      	movs	r3, #142	; 0x8e
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	58d3      	ldr	r3, [r2, r3]
 800e89a:	3348      	adds	r3, #72	; 0x48
 800e89c:	001a      	movs	r2, r3
 800e89e:	0008      	movs	r0, r1
 800e8a0:	187b      	adds	r3, r7, r1
 800e8a2:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800e8a4:	4a20      	ldr	r2, [pc, #128]	; (800e928 <LoRaMacInitialization+0x7b0>)
 800e8a6:	2340      	movs	r3, #64	; 0x40
 800e8a8:	18f9      	adds	r1, r7, r3
 800e8aa:	183b      	adds	r3, r7, r0
 800e8ac:	0018      	movs	r0, r3
 800e8ae:	f001 fae1 	bl	800fe74 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	f7fc fe9e 	bl	800b5f4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	b014      	add	sp, #80	; 0x50
 800e8c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8c2:	46c0      	nop			; (mov r8, r8)
 800e8c4:	20000708 	.word	0x20000708
 800e8c8:	0000046d 	.word	0x0000046d
 800e8cc:	0800baa1 	.word	0x0800baa1
 800e8d0:	20000a84 	.word	0x20000a84
 800e8d4:	0800bb31 	.word	0x0800bb31
 800e8d8:	20000a9c 	.word	0x20000a9c
 800e8dc:	0800bc25 	.word	0x0800bc25
 800e8e0:	20000ab4 	.word	0x20000ab4
 800e8e4:	0800bd69 	.word	0x0800bd69
 800e8e8:	20000afc 	.word	0x20000afc
 800e8ec:	0800a4d9 	.word	0x0800a4d9
 800e8f0:	0800a571 	.word	0x0800a571
 800e8f4:	0800a645 	.word	0x0800a645
 800e8f8:	0800a601 	.word	0x0800a601
 800e8fc:	0800a689 	.word	0x0800a689
 800e900:	08021b48 	.word	0x08021b48
 800e904:	20000a68 	.word	0x20000a68
 800e908:	0800e0f1 	.word	0x0800e0f1
 800e90c:	0800e0e1 	.word	0x0800e0e1
 800e910:	0800e101 	.word	0x0800e101
 800e914:	0800e131 	.word	0x0800e131
 800e918:	20000b5c 	.word	0x20000b5c
 800e91c:	20000b18 	.word	0x20000b18
 800e920:	20000b48 	.word	0x20000b48
 800e924:	20000b75 	.word	0x20000b75
 800e928:	0800e111 	.word	0x0800e111

0800e92c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800e930:	4a04      	ldr	r2, [pc, #16]	; (800e944 <LoRaMacStart+0x18>)
 800e932:	23d5      	movs	r3, #213	; 0xd5
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	2100      	movs	r1, #0
 800e938:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	0018      	movs	r0, r3
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	46c0      	nop			; (mov r8, r8)
 800e944:	20000708 	.word	0x20000708

0800e948 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e948:	b590      	push	{r4, r7, lr}
 800e94a:	b08b      	sub	sp, #44	; 0x2c
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	0002      	movs	r2, r0
 800e950:	6039      	str	r1, [r7, #0]
 800e952:	1dfb      	adds	r3, r7, #7
 800e954:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e956:	4a58      	ldr	r2, [pc, #352]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e958:	238e      	movs	r3, #142	; 0x8e
 800e95a:	00db      	lsls	r3, r3, #3
 800e95c:	58d3      	ldr	r3, [r2, r3]
 800e95e:	22cc      	movs	r2, #204	; 0xcc
 800e960:	589b      	ldr	r3, [r3, r2]
 800e962:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e964:	4a54      	ldr	r2, [pc, #336]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e966:	238e      	movs	r3, #142	; 0x8e
 800e968:	00db      	lsls	r3, r3, #3
 800e96a:	58d3      	ldr	r3, [r2, r3]
 800e96c:	2205      	movs	r2, #5
 800e96e:	569a      	ldrsb	r2, [r3, r2]
 800e970:	230f      	movs	r3, #15
 800e972:	18fb      	adds	r3, r7, r3
 800e974:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e976:	4a50      	ldr	r2, [pc, #320]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e978:	238e      	movs	r3, #142	; 0x8e
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	58d3      	ldr	r3, [r2, r3]
 800e97e:	2204      	movs	r2, #4
 800e980:	569a      	ldrsb	r2, [r3, r2]
 800e982:	230e      	movs	r3, #14
 800e984:	18fb      	adds	r3, r7, r3
 800e986:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 800e988:	2300      	movs	r3, #0
 800e98a:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <LoRaMacQueryTxPossible+0x4e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e992:	2303      	movs	r3, #3
 800e994:	e08c      	b.n	800eab0 <LoRaMacQueryTxPossible+0x168>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800e996:	4a48      	ldr	r2, [pc, #288]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e998:	238e      	movs	r3, #142	; 0x8e
 800e99a:	00db      	lsls	r3, r3, #3
 800e99c:	58d1      	ldr	r1, [r2, r3]
 800e99e:	2014      	movs	r0, #20
 800e9a0:	183b      	adds	r3, r7, r0
 800e9a2:	2288      	movs	r2, #136	; 0x88
 800e9a4:	0092      	lsls	r2, r2, #2
 800e9a6:	588a      	ldr	r2, [r1, r2]
 800e9a8:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 800e9aa:	0001      	movs	r1, r0
 800e9ac:	187b      	adds	r3, r7, r1
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800e9b2:	4a41      	ldr	r2, [pc, #260]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e9b4:	238e      	movs	r3, #142	; 0x8e
 800e9b6:	00db      	lsls	r3, r3, #3
 800e9b8:	58d3      	ldr	r3, [r2, r3]
 800e9ba:	22ca      	movs	r2, #202	; 0xca
 800e9bc:	5c9a      	ldrb	r2, [r3, r2]
 800e9be:	187b      	adds	r3, r7, r1
 800e9c0:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e9c2:	4a3d      	ldr	r2, [pc, #244]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e9c4:	238e      	movs	r3, #142	; 0x8e
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	58d3      	ldr	r3, [r2, r3]
 800e9ca:	22cc      	movs	r2, #204	; 0xcc
 800e9cc:	589a      	ldr	r2, [r3, r2]
 800e9ce:	187b      	adds	r3, r7, r1
 800e9d0:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800e9d2:	4a39      	ldr	r2, [pc, #228]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e9d4:	238e      	movs	r3, #142	; 0x8e
 800e9d6:	00db      	lsls	r3, r3, #3
 800e9d8:	58d3      	ldr	r3, [r2, r3]
 800e9da:	22d0      	movs	r2, #208	; 0xd0
 800e9dc:	5a9a      	ldrh	r2, [r3, r2]
 800e9de:	187b      	adds	r3, r7, r1
 800e9e0:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800e9e2:	4a35      	ldr	r2, [pc, #212]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e9e4:	238e      	movs	r3, #142	; 0x8e
 800e9e6:	00db      	lsls	r3, r3, #3
 800e9e8:	58d3      	ldr	r3, [r2, r3]
 800e9ea:	22d2      	movs	r2, #210	; 0xd2
 800e9ec:	5a9a      	ldrh	r2, [r3, r2]
 800e9ee:	187b      	adds	r3, r7, r1
 800e9f0:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e9f2:	4a31      	ldr	r2, [pc, #196]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800e9f4:	238e      	movs	r3, #142	; 0x8e
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	58d3      	ldr	r3, [r2, r3]
 800e9fa:	22d5      	movs	r2, #213	; 0xd5
 800e9fc:	569a      	ldrsb	r2, [r3, r2]
 800e9fe:	187b      	adds	r3, r7, r1
 800ea00:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ea02:	4a2d      	ldr	r2, [pc, #180]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800ea04:	238e      	movs	r3, #142	; 0x8e
 800ea06:	00db      	lsls	r3, r3, #3
 800ea08:	58d3      	ldr	r3, [r2, r3]
 800ea0a:	22d4      	movs	r2, #212	; 0xd4
 800ea0c:	569a      	ldrsb	r2, [r3, r2]
 800ea0e:	187b      	adds	r3, r7, r1
 800ea10:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ea12:	4a29      	ldr	r2, [pc, #164]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800ea14:	238e      	movs	r3, #142	; 0x8e
 800ea16:	00db      	lsls	r3, r3, #3
 800ea18:	58d2      	ldr	r2, [r2, r3]
 800ea1a:	2380      	movs	r3, #128	; 0x80
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	5cd2      	ldrb	r2, [r2, r3]
 800ea20:	187b      	adds	r3, r7, r1
 800ea22:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800ea24:	4a24      	ldr	r2, [pc, #144]	; (800eab8 <LoRaMacQueryTxPossible+0x170>)
 800ea26:	238e      	movs	r3, #142	; 0x8e
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	58d3      	ldr	r3, [r2, r3]
 800ea2c:	781a      	ldrb	r2, [r3, #0]
 800ea2e:	0008      	movs	r0, r1
 800ea30:	187b      	adds	r3, r7, r1
 800ea32:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ea34:	2310      	movs	r3, #16
 800ea36:	18fb      	adds	r3, r7, r3
 800ea38:	220e      	movs	r2, #14
 800ea3a:	18ba      	adds	r2, r7, r2
 800ea3c:	240f      	movs	r4, #15
 800ea3e:	1939      	adds	r1, r7, r4
 800ea40:	1838      	adds	r0, r7, r0
 800ea42:	f001 f9ff 	bl	800fe44 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ea46:	193b      	adds	r3, r7, r4
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	b25b      	sxtb	r3, r3
 800ea4c:	0018      	movs	r0, r3
 800ea4e:	f7fd fa99 	bl	800bf84 <GetMaxAppPayloadWithoutFOptsLength>
 800ea52:	0003      	movs	r3, r0
 800ea54:	001a      	movs	r2, r3
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ea5a:	2308      	movs	r3, #8
 800ea5c:	18fb      	adds	r3, r7, r3
 800ea5e:	0018      	movs	r0, r3
 800ea60:	f001 fd4a 	bl	80104f8 <LoRaMacCommandsGetSizeSerializedCmds>
 800ea64:	1e03      	subs	r3, r0, #0
 800ea66:	d001      	beq.n	800ea6c <LoRaMacQueryTxPossible+0x124>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ea68:	2313      	movs	r3, #19
 800ea6a:	e021      	b.n	800eab0 <LoRaMacQueryTxPossible+0x168>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b0f      	cmp	r3, #15
 800ea70:	d81a      	bhi.n	800eaa8 <LoRaMacQueryTxPossible+0x160>
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	785b      	ldrb	r3, [r3, #1]
 800ea76:	001a      	movs	r2, r3
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d314      	bcc.n	800eaa8 <LoRaMacQueryTxPossible+0x160>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	785a      	ldrb	r2, [r3, #1]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	785b      	ldrb	r3, [r3, #1]
 800ea92:	0019      	movs	r1, r3
 800ea94:	1dfb      	adds	r3, r7, #7
 800ea96:	781a      	ldrb	r2, [r3, #0]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	18d3      	adds	r3, r2, r3
 800ea9c:	4299      	cmp	r1, r3
 800ea9e:	d301      	bcc.n	800eaa4 <LoRaMacQueryTxPossible+0x15c>
        {
            return LORAMAC_STATUS_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	e005      	b.n	800eab0 <LoRaMacQueryTxPossible+0x168>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800eaa4:	2308      	movs	r3, #8
 800eaa6:	e003      	b.n	800eab0 <LoRaMacQueryTxPossible+0x168>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800eaae:	2308      	movs	r3, #8
    }
}
 800eab0:	0018      	movs	r0, r3
 800eab2:	46bd      	mov	sp, r7
 800eab4:	b00b      	add	sp, #44	; 0x2c
 800eab6:	bd90      	pop	{r4, r7, pc}
 800eab8:	20000708 	.word	0x20000708

0800eabc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b087      	sub	sp, #28
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eac4:	2317      	movs	r3, #23
 800eac6:	18fb      	adds	r3, r7, r3
 800eac8:	2200      	movs	r2, #0
 800eaca:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d101      	bne.n	800ead6 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e135      	b.n	800ed42 <LoRaMacMibGetRequestConfirm+0x286>
    }

    switch( mibGet->Type )
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	2b2f      	cmp	r3, #47	; 0x2f
 800eadc:	d900      	bls.n	800eae0 <LoRaMacMibGetRequestConfirm+0x24>
 800eade:	e124      	b.n	800ed2a <LoRaMacMibGetRequestConfirm+0x26e>
 800eae0:	009a      	lsls	r2, r3, #2
 800eae2:	4b9a      	ldr	r3, [pc, #616]	; (800ed4c <LoRaMacMibGetRequestConfirm+0x290>)
 800eae4:	18d3      	adds	r3, r2, r3
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800eaea:	4a99      	ldr	r2, [pc, #612]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eaec:	238e      	movs	r3, #142	; 0x8e
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	58d3      	ldr	r3, [r2, r3]
 800eaf2:	22c8      	movs	r2, #200	; 0xc8
 800eaf4:	5c9a      	ldrb	r2, [r3, r2]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	711a      	strb	r2, [r3, #4]
            break;
 800eafa:	e11f      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800eafc:	4a94      	ldr	r2, [pc, #592]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eafe:	238e      	movs	r3, #142	; 0x8e
 800eb00:	00db      	lsls	r3, r3, #3
 800eb02:	58d2      	ldr	r2, [r2, r3]
 800eb04:	2389      	movs	r3, #137	; 0x89
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	5cd2      	ldrb	r2, [r2, r3]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	711a      	strb	r2, [r3, #4]
            break;
 800eb0e:	e115      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800eb10:	4a8f      	ldr	r2, [pc, #572]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb12:	238e      	movs	r3, #142	; 0x8e
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	58d3      	ldr	r3, [r2, r3]
 800eb18:	22ca      	movs	r2, #202	; 0xca
 800eb1a:	5c9a      	ldrb	r2, [r3, r2]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	711a      	strb	r2, [r3, #4]
            break;
 800eb20:	e10c      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800eb22:	4a8b      	ldr	r2, [pc, #556]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb24:	238e      	movs	r3, #142	; 0x8e
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	58d3      	ldr	r3, [r2, r3]
 800eb2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	605a      	str	r2, [r3, #4]
            break;
 800eb30:	e104      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800eb32:	4a87      	ldr	r2, [pc, #540]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb34:	238e      	movs	r3, #142	; 0x8e
 800eb36:	00db      	lsls	r3, r3, #3
 800eb38:	58d3      	ldr	r3, [r2, r3]
 800eb3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	605a      	str	r2, [r3, #4]
            break;
 800eb40:	e0fc      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800eb42:	4a83      	ldr	r2, [pc, #524]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb44:	238e      	movs	r3, #142	; 0x8e
 800eb46:	00db      	lsls	r3, r3, #3
 800eb48:	58d3      	ldr	r3, [r2, r3]
 800eb4a:	22c9      	movs	r2, #201	; 0xc9
 800eb4c:	5c9a      	ldrb	r2, [r3, r2]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	711a      	strb	r2, [r3, #4]
            break;
 800eb52:	e0f3      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800eb54:	4a7e      	ldr	r2, [pc, #504]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb56:	238e      	movs	r3, #142	; 0x8e
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	58d2      	ldr	r2, [r2, r3]
 800eb5c:	2316      	movs	r3, #22
 800eb5e:	33ff      	adds	r3, #255	; 0xff
 800eb60:	5cd2      	ldrb	r2, [r2, r3]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	711a      	strb	r2, [r3, #4]
            break;
 800eb66:	e0e9      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800eb68:	2110      	movs	r1, #16
 800eb6a:	187b      	adds	r3, r7, r1
 800eb6c:	221c      	movs	r2, #28
 800eb6e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800eb70:	4a77      	ldr	r2, [pc, #476]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb72:	238e      	movs	r3, #142	; 0x8e
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	58d3      	ldr	r3, [r2, r3]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	187a      	adds	r2, r7, r1
 800eb7c:	0011      	movs	r1, r2
 800eb7e:	0018      	movs	r0, r3
 800eb80:	f004 f97f 	bl	8012e82 <RegionGetPhyParam>
 800eb84:	0003      	movs	r3, r0
 800eb86:	001a      	movs	r2, r3
 800eb88:	210c      	movs	r1, #12
 800eb8a:	187b      	adds	r3, r7, r1
 800eb8c:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 800eb8e:	187b      	adds	r3, r7, r1
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	605a      	str	r2, [r3, #4]
            break;
 800eb96:	e0d1      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800eb98:	4a6d      	ldr	r2, [pc, #436]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eb9a:	238e      	movs	r3, #142	; 0x8e
 800eb9c:	00db      	lsls	r3, r3, #3
 800eb9e:	58d2      	ldr	r2, [r2, r3]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	21f8      	movs	r1, #248	; 0xf8
 800eba4:	3304      	adds	r3, #4
 800eba6:	1852      	adds	r2, r2, r1
 800eba8:	ca03      	ldmia	r2!, {r0, r1}
 800ebaa:	c303      	stmia	r3!, {r0, r1}
            break;
 800ebac:	e0c6      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800ebae:	4a68      	ldr	r2, [pc, #416]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ebb0:	238e      	movs	r3, #142	; 0x8e
 800ebb2:	00db      	lsls	r3, r3, #3
 800ebb4:	58d2      	ldr	r2, [r2, r3]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	3304      	adds	r3, #4
 800ebba:	3228      	adds	r2, #40	; 0x28
 800ebbc:	ca03      	ldmia	r2!, {r0, r1}
 800ebbe:	c303      	stmia	r3!, {r0, r1}
            break;
 800ebc0:	e0bc      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800ebc2:	2110      	movs	r1, #16
 800ebc4:	187b      	adds	r3, r7, r1
 800ebc6:	221a      	movs	r2, #26
 800ebc8:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ebca:	4a61      	ldr	r2, [pc, #388]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ebcc:	238e      	movs	r3, #142	; 0x8e
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	58d3      	ldr	r3, [r2, r3]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	187a      	adds	r2, r7, r1
 800ebd6:	0011      	movs	r1, r2
 800ebd8:	0018      	movs	r0, r3
 800ebda:	f004 f952 	bl	8012e82 <RegionGetPhyParam>
 800ebde:	0003      	movs	r3, r0
 800ebe0:	001a      	movs	r2, r3
 800ebe2:	210c      	movs	r1, #12
 800ebe4:	187b      	adds	r3, r7, r1
 800ebe6:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800ebe8:	187b      	adds	r3, r7, r1
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	605a      	str	r2, [r3, #4]
            break;
 800ebf0:	e0a4      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ebf2:	2110      	movs	r1, #16
 800ebf4:	187b      	adds	r3, r7, r1
 800ebf6:	2219      	movs	r2, #25
 800ebf8:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ebfa:	4a55      	ldr	r2, [pc, #340]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ebfc:	238e      	movs	r3, #142	; 0x8e
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	58d3      	ldr	r3, [r2, r3]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	187a      	adds	r2, r7, r1
 800ec06:	0011      	movs	r1, r2
 800ec08:	0018      	movs	r0, r3
 800ec0a:	f004 f93a 	bl	8012e82 <RegionGetPhyParam>
 800ec0e:	0003      	movs	r3, r0
 800ec10:	001a      	movs	r2, r3
 800ec12:	210c      	movs	r1, #12
 800ec14:	187b      	adds	r3, r7, r1
 800ec16:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800ec18:	187b      	adds	r3, r7, r1
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	605a      	str	r2, [r3, #4]
            break;
 800ec20:	e08c      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800ec22:	4a4b      	ldr	r2, [pc, #300]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec24:	238e      	movs	r3, #142	; 0x8e
 800ec26:	00db      	lsls	r3, r3, #3
 800ec28:	58d3      	ldr	r3, [r2, r3]
 800ec2a:	22f4      	movs	r2, #244	; 0xf4
 800ec2c:	5c9a      	ldrb	r2, [r3, r2]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	711a      	strb	r2, [r3, #4]
            break;
 800ec32:	e083      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800ec34:	4a46      	ldr	r2, [pc, #280]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec36:	238e      	movs	r3, #142	; 0x8e
 800ec38:	00db      	lsls	r3, r3, #3
 800ec3a:	58d3      	ldr	r3, [r2, r3]
 800ec3c:	22e0      	movs	r2, #224	; 0xe0
 800ec3e:	589a      	ldr	r2, [r3, r2]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	605a      	str	r2, [r3, #4]
            break;
 800ec44:	e07a      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800ec46:	4a42      	ldr	r2, [pc, #264]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec48:	238e      	movs	r3, #142	; 0x8e
 800ec4a:	00db      	lsls	r3, r3, #3
 800ec4c:	58d3      	ldr	r3, [r2, r3]
 800ec4e:	22e4      	movs	r2, #228	; 0xe4
 800ec50:	589a      	ldr	r2, [r3, r2]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	605a      	str	r2, [r3, #4]
            break;
 800ec56:	e071      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800ec58:	4a3d      	ldr	r2, [pc, #244]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec5a:	238e      	movs	r3, #142	; 0x8e
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	58d3      	ldr	r3, [r2, r3]
 800ec60:	22e8      	movs	r2, #232	; 0xe8
 800ec62:	589a      	ldr	r2, [r3, r2]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	605a      	str	r2, [r3, #4]
            break;
 800ec68:	e068      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800ec6a:	4a39      	ldr	r2, [pc, #228]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec6c:	238e      	movs	r3, #142	; 0x8e
 800ec6e:	00db      	lsls	r3, r3, #3
 800ec70:	58d3      	ldr	r3, [r2, r3]
 800ec72:	22ec      	movs	r2, #236	; 0xec
 800ec74:	589a      	ldr	r2, [r3, r2]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	605a      	str	r2, [r3, #4]
            break;
 800ec7a:	e05f      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800ec7c:	4a34      	ldr	r2, [pc, #208]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec7e:	238e      	movs	r3, #142	; 0x8e
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	58d3      	ldr	r3, [r2, r3]
 800ec84:	22f0      	movs	r2, #240	; 0xf0
 800ec86:	589a      	ldr	r2, [r3, r2]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	605a      	str	r2, [r3, #4]
            break;
 800ec8c:	e056      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ec8e:	4a30      	ldr	r2, [pc, #192]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ec90:	238e      	movs	r3, #142	; 0x8e
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	58d3      	ldr	r3, [r2, r3]
 800ec96:	2205      	movs	r2, #5
 800ec98:	569a      	ldrsb	r2, [r3, r2]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	711a      	strb	r2, [r3, #4]
            break;
 800ec9e:	e04d      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800eca0:	4a2b      	ldr	r2, [pc, #172]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800eca2:	238e      	movs	r3, #142	; 0x8e
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	58d3      	ldr	r3, [r2, r3]
 800eca8:	22d5      	movs	r2, #213	; 0xd5
 800ecaa:	569a      	ldrsb	r2, [r3, r2]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	711a      	strb	r2, [r3, #4]
            break;
 800ecb0:	e044      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ecb2:	4a27      	ldr	r2, [pc, #156]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecb4:	238e      	movs	r3, #142	; 0x8e
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	58d3      	ldr	r3, [r2, r3]
 800ecba:	2204      	movs	r2, #4
 800ecbc:	569a      	ldrsb	r2, [r3, r2]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	711a      	strb	r2, [r3, #4]
            break;
 800ecc2:	e03b      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ecc4:	4a22      	ldr	r2, [pc, #136]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecc6:	238e      	movs	r3, #142	; 0x8e
 800ecc8:	00db      	lsls	r3, r3, #3
 800ecca:	58d3      	ldr	r3, [r2, r3]
 800eccc:	22d4      	movs	r2, #212	; 0xd4
 800ecce:	569a      	ldrsb	r2, [r3, r2]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	711a      	strb	r2, [r3, #4]
            break;
 800ecd4:	e032      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800ecd6:	4a1e      	ldr	r2, [pc, #120]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecd8:	238e      	movs	r3, #142	; 0x8e
 800ecda:	00db      	lsls	r3, r3, #3
 800ecdc:	58d3      	ldr	r3, [r2, r3]
 800ecde:	22d8      	movs	r2, #216	; 0xd8
 800ece0:	589a      	ldr	r2, [r3, r2]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	605a      	str	r2, [r3, #4]
            break;
 800ece6:	e029      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800ece8:	4a19      	ldr	r2, [pc, #100]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecea:	238e      	movs	r3, #142	; 0x8e
 800ecec:	00db      	lsls	r3, r3, #3
 800ecee:	58d3      	ldr	r3, [r2, r3]
 800ecf0:	22dc      	movs	r2, #220	; 0xdc
 800ecf2:	5c9a      	ldrb	r2, [r3, r2]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	711a      	strb	r2, [r3, #4]
            break;
 800ecf8:	e020      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ecfa:	4a15      	ldr	r2, [pc, #84]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ecfc:	238e      	movs	r3, #142	; 0x8e
 800ecfe:	00db      	lsls	r3, r3, #3
 800ed00:	58d2      	ldr	r2, [r2, r3]
 800ed02:	2384      	movs	r3, #132	; 0x84
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	58d2      	ldr	r2, [r2, r3]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	605a      	str	r2, [r3, #4]
            break;
 800ed0c:	e016      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800ed0e:	f7fe ff2b 	bl	800db68 <GetCtxs>
 800ed12:	0002      	movs	r2, r0
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	605a      	str	r2, [r3, #4]
            break;
 800ed18:	e010      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800ed1a:	4a0d      	ldr	r2, [pc, #52]	; (800ed50 <LoRaMacMibGetRequestConfirm+0x294>)
 800ed1c:	238e      	movs	r3, #142	; 0x8e
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	58d3      	ldr	r3, [r2, r3]
 800ed22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	605a      	str	r2, [r3, #4]
            break;
 800ed28:	e008      	b.n	800ed3c <LoRaMacMibGetRequestConfirm+0x280>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ed2a:	2317      	movs	r3, #23
 800ed2c:	18fc      	adds	r4, r7, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	0018      	movs	r0, r3
 800ed32:	f001 f93d 	bl	800ffb0 <LoRaMacClassBMibGetRequestConfirm>
 800ed36:	0003      	movs	r3, r0
 800ed38:	7023      	strb	r3, [r4, #0]
            break;
 800ed3a:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 800ed3c:	2317      	movs	r3, #23
 800ed3e:	18fb      	adds	r3, r7, r3
 800ed40:	781b      	ldrb	r3, [r3, #0]
}
 800ed42:	0018      	movs	r0, r3
 800ed44:	46bd      	mov	sp, r7
 800ed46:	b007      	add	sp, #28
 800ed48:	bd90      	pop	{r4, r7, pc}
 800ed4a:	46c0      	nop			; (mov r8, r8)
 800ed4c:	080217dc 	.word	0x080217dc
 800ed50:	20000708 	.word	0x20000708

0800ed54 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ed54:	b590      	push	{r4, r7, lr}
 800ed56:	b089      	sub	sp, #36	; 0x24
 800ed58:	af02      	add	r7, sp, #8
 800ed5a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed5c:	2317      	movs	r3, #23
 800ed5e:	18fb      	adds	r3, r7, r3
 800ed60:	2200      	movs	r2, #0
 800ed62:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d102      	bne.n	800ed70 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	f000 fc6b 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ed70:	4ad2      	ldr	r2, [pc, #840]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x368>)
 800ed72:	23d5      	movs	r3, #213	; 0xd5
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	58d3      	ldr	r3, [r2, r3]
 800ed78:	2202      	movs	r2, #2
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	d002      	beq.n	800ed84 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	f000 fc61 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
    }

    switch( mibSet->Type )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	2b30      	cmp	r3, #48	; 0x30
 800ed8a:	d901      	bls.n	800ed90 <LoRaMacMibSetRequestConfirm+0x3c>
 800ed8c:	f000 fc1a 	bl	800f5c4 <LoRaMacMibSetRequestConfirm+0x870>
 800ed90:	009a      	lsls	r2, r3, #2
 800ed92:	4bcb      	ldr	r3, [pc, #812]	; (800f0c0 <LoRaMacMibSetRequestConfirm+0x36c>)
 800ed94:	18d3      	adds	r3, r2, r3
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	791b      	ldrb	r3, [r3, #4]
 800ed9e:	2217      	movs	r2, #23
 800eda0:	18bc      	adds	r4, r7, r2
 800eda2:	0018      	movs	r0, r3
 800eda4:	f7fd f844 	bl	800be30 <SwitchClass>
 800eda8:	0003      	movs	r3, r0
 800edaa:	7023      	strb	r3, [r4, #0]
            break;
 800edac:	f000 fc44 	bl	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	791b      	ldrb	r3, [r3, #4]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d00a      	beq.n	800edce <LoRaMacMibSetRequestConfirm+0x7a>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800edb8:	4ac0      	ldr	r2, [pc, #768]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x368>)
 800edba:	238e      	movs	r3, #142	; 0x8e
 800edbc:	00db      	lsls	r3, r3, #3
 800edbe:	58d2      	ldr	r2, [r2, r3]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	7919      	ldrb	r1, [r3, #4]
 800edc4:	2389      	movs	r3, #137	; 0x89
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800edca:	f000 fc35 	bl	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edce:	2317      	movs	r3, #23
 800edd0:	18fb      	adds	r3, r7, r3
 800edd2:	2203      	movs	r2, #3
 800edd4:	701a      	strb	r2, [r3, #0]
            break;
 800edd6:	f000 fc2f 	bl	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800edda:	4ab8      	ldr	r2, [pc, #736]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x368>)
 800eddc:	238e      	movs	r3, #142	; 0x8e
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	58d3      	ldr	r3, [r2, r3]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	7911      	ldrb	r1, [r2, #4]
 800ede6:	22ca      	movs	r2, #202	; 0xca
 800ede8:	5499      	strb	r1, [r3, r2]
            break;
 800edea:	f000 fc25 	bl	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800edee:	4ab3      	ldr	r2, [pc, #716]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x368>)
 800edf0:	238e      	movs	r3, #142	; 0x8e
 800edf2:	00db      	lsls	r3, r3, #3
 800edf4:	58d3      	ldr	r3, [r2, r3]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	6852      	ldr	r2, [r2, #4]
 800edfa:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 800edfc:	f000 fc1c 	bl	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800ee00:	4aae      	ldr	r2, [pc, #696]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x368>)
 800ee02:	238e      	movs	r3, #142	; 0x8e
 800ee04:	00db      	lsls	r3, r3, #3
 800ee06:	58d3      	ldr	r3, [r2, r3]
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	6852      	ldr	r2, [r2, #4]
 800ee0c:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 800ee0e:	f000 fc13 	bl	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00c      	beq.n	800ee34 <LoRaMacMibSetRequestConfirm+0xe0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	0019      	movs	r1, r3
 800ee20:	2000      	movs	r0, #0
 800ee22:	f002 fda9 	bl	8011978 <LoRaMacCryptoSetKey>
 800ee26:	1e03      	subs	r3, r0, #0
 800ee28:	d101      	bne.n	800ee2e <LoRaMacMibSetRequestConfirm+0xda>
 800ee2a:	f000 fbd4 	bl	800f5d6 <LoRaMacMibSetRequestConfirm+0x882>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee2e:	2311      	movs	r3, #17
 800ee30:	f000 fc09 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee34:	2317      	movs	r3, #23
 800ee36:	18fb      	adds	r3, r7, r3
 800ee38:	2203      	movs	r2, #3
 800ee3a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee3c:	f000 fbcb 	bl	800f5d6 <LoRaMacMibSetRequestConfirm+0x882>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00c      	beq.n	800ee62 <LoRaMacMibSetRequestConfirm+0x10e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	0019      	movs	r1, r3
 800ee4e:	2001      	movs	r0, #1
 800ee50:	f002 fd92 	bl	8011978 <LoRaMacCryptoSetKey>
 800ee54:	1e03      	subs	r3, r0, #0
 800ee56:	d101      	bne.n	800ee5c <LoRaMacMibSetRequestConfirm+0x108>
 800ee58:	f000 fbbf 	bl	800f5da <LoRaMacMibSetRequestConfirm+0x886>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee5c:	2311      	movs	r3, #17
 800ee5e:	f000 fbf2 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee62:	2317      	movs	r3, #23
 800ee64:	18fb      	adds	r3, r7, r3
 800ee66:	2203      	movs	r2, #3
 800ee68:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee6a:	f000 fbb6 	bl	800f5da <LoRaMacMibSetRequestConfirm+0x886>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00c      	beq.n	800ee90 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	0019      	movs	r1, r3
 800ee7c:	2002      	movs	r0, #2
 800ee7e:	f002 fd7b 	bl	8011978 <LoRaMacCryptoSetKey>
 800ee82:	1e03      	subs	r3, r0, #0
 800ee84:	d101      	bne.n	800ee8a <LoRaMacMibSetRequestConfirm+0x136>
 800ee86:	f000 fbaa 	bl	800f5de <LoRaMacMibSetRequestConfirm+0x88a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee8a:	2311      	movs	r3, #17
 800ee8c:	f000 fbdb 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee90:	2317      	movs	r3, #23
 800ee92:	18fb      	adds	r3, r7, r3
 800ee94:	2203      	movs	r2, #3
 800ee96:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ee98:	f000 fba1 	bl	800f5de <LoRaMacMibSetRequestConfirm+0x88a>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00c      	beq.n	800eebe <LoRaMacMibSetRequestConfirm+0x16a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	0019      	movs	r1, r3
 800eeaa:	2003      	movs	r0, #3
 800eeac:	f002 fd64 	bl	8011978 <LoRaMacCryptoSetKey>
 800eeb0:	1e03      	subs	r3, r0, #0
 800eeb2:	d101      	bne.n	800eeb8 <LoRaMacMibSetRequestConfirm+0x164>
 800eeb4:	f000 fb95 	bl	800f5e2 <LoRaMacMibSetRequestConfirm+0x88e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eeb8:	2311      	movs	r3, #17
 800eeba:	f000 fbc4 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eebe:	2317      	movs	r3, #23
 800eec0:	18fb      	adds	r3, r7, r3
 800eec2:	2203      	movs	r2, #3
 800eec4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eec6:	f000 fb8c 	bl	800f5e2 <LoRaMacMibSetRequestConfirm+0x88e>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00c      	beq.n	800eeec <LoRaMacMibSetRequestConfirm+0x198>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	685b      	ldr	r3, [r3, #4]
 800eed6:	0019      	movs	r1, r3
 800eed8:	2004      	movs	r0, #4
 800eeda:	f002 fd4d 	bl	8011978 <LoRaMacCryptoSetKey>
 800eede:	1e03      	subs	r3, r0, #0
 800eee0:	d101      	bne.n	800eee6 <LoRaMacMibSetRequestConfirm+0x192>
 800eee2:	f000 fb80 	bl	800f5e6 <LoRaMacMibSetRequestConfirm+0x892>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eee6:	2311      	movs	r3, #17
 800eee8:	f000 fbad 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eeec:	2317      	movs	r3, #23
 800eeee:	18fb      	adds	r3, r7, r3
 800eef0:	2203      	movs	r2, #3
 800eef2:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eef4:	f000 fb77 	bl	800f5e6 <LoRaMacMibSetRequestConfirm+0x892>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00c      	beq.n	800ef1a <LoRaMacMibSetRequestConfirm+0x1c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	0019      	movs	r1, r3
 800ef06:	2005      	movs	r0, #5
 800ef08:	f002 fd36 	bl	8011978 <LoRaMacCryptoSetKey>
 800ef0c:	1e03      	subs	r3, r0, #0
 800ef0e:	d101      	bne.n	800ef14 <LoRaMacMibSetRequestConfirm+0x1c0>
 800ef10:	f000 fb6b 	bl	800f5ea <LoRaMacMibSetRequestConfirm+0x896>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef14:	2311      	movs	r3, #17
 800ef16:	f000 fb96 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef1a:	2317      	movs	r3, #23
 800ef1c:	18fb      	adds	r3, r7, r3
 800ef1e:	2203      	movs	r2, #3
 800ef20:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef22:	f000 fb62 	bl	800f5ea <LoRaMacMibSetRequestConfirm+0x896>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00b      	beq.n	800ef46 <LoRaMacMibSetRequestConfirm+0x1f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	0019      	movs	r1, r3
 800ef34:	2006      	movs	r0, #6
 800ef36:	f002 fd1f 	bl	8011978 <LoRaMacCryptoSetKey>
 800ef3a:	1e03      	subs	r3, r0, #0
 800ef3c:	d100      	bne.n	800ef40 <LoRaMacMibSetRequestConfirm+0x1ec>
 800ef3e:	e356      	b.n	800f5ee <LoRaMacMibSetRequestConfirm+0x89a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef40:	2311      	movs	r3, #17
 800ef42:	f000 fb80 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef46:	2317      	movs	r3, #23
 800ef48:	18fb      	adds	r3, r7, r3
 800ef4a:	2203      	movs	r2, #3
 800ef4c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef4e:	e34e      	b.n	800f5ee <LoRaMacMibSetRequestConfirm+0x89a>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00b      	beq.n	800ef70 <LoRaMacMibSetRequestConfirm+0x21c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	0019      	movs	r1, r3
 800ef5e:	2007      	movs	r0, #7
 800ef60:	f002 fd0a 	bl	8011978 <LoRaMacCryptoSetKey>
 800ef64:	1e03      	subs	r3, r0, #0
 800ef66:	d100      	bne.n	800ef6a <LoRaMacMibSetRequestConfirm+0x216>
 800ef68:	e343      	b.n	800f5f2 <LoRaMacMibSetRequestConfirm+0x89e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef6a:	2311      	movs	r3, #17
 800ef6c:	f000 fb6b 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef70:	2317      	movs	r3, #23
 800ef72:	18fb      	adds	r3, r7, r3
 800ef74:	2203      	movs	r2, #3
 800ef76:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ef78:	e33b      	b.n	800f5f2 <LoRaMacMibSetRequestConfirm+0x89e>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00b      	beq.n	800ef9a <LoRaMacMibSetRequestConfirm+0x246>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	0019      	movs	r1, r3
 800ef88:	207f      	movs	r0, #127	; 0x7f
 800ef8a:	f002 fcf5 	bl	8011978 <LoRaMacCryptoSetKey>
 800ef8e:	1e03      	subs	r3, r0, #0
 800ef90:	d100      	bne.n	800ef94 <LoRaMacMibSetRequestConfirm+0x240>
 800ef92:	e330      	b.n	800f5f6 <LoRaMacMibSetRequestConfirm+0x8a2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef94:	2311      	movs	r3, #17
 800ef96:	f000 fb56 	bl	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef9a:	2317      	movs	r3, #23
 800ef9c:	18fb      	adds	r3, r7, r3
 800ef9e:	2203      	movs	r2, #3
 800efa0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800efa2:	e328      	b.n	800f5f6 <LoRaMacMibSetRequestConfirm+0x8a2>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00a      	beq.n	800efc2 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	0019      	movs	r1, r3
 800efb2:	2080      	movs	r0, #128	; 0x80
 800efb4:	f002 fce0 	bl	8011978 <LoRaMacCryptoSetKey>
 800efb8:	1e03      	subs	r3, r0, #0
 800efba:	d100      	bne.n	800efbe <LoRaMacMibSetRequestConfirm+0x26a>
 800efbc:	e31d      	b.n	800f5fa <LoRaMacMibSetRequestConfirm+0x8a6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800efbe:	2311      	movs	r3, #17
 800efc0:	e341      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efc2:	2317      	movs	r3, #23
 800efc4:	18fb      	adds	r3, r7, r3
 800efc6:	2203      	movs	r2, #3
 800efc8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800efca:	e316      	b.n	800f5fa <LoRaMacMibSetRequestConfirm+0x8a6>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00a      	beq.n	800efea <LoRaMacMibSetRequestConfirm+0x296>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	0019      	movs	r1, r3
 800efda:	2081      	movs	r0, #129	; 0x81
 800efdc:	f002 fccc 	bl	8011978 <LoRaMacCryptoSetKey>
 800efe0:	1e03      	subs	r3, r0, #0
 800efe2:	d100      	bne.n	800efe6 <LoRaMacMibSetRequestConfirm+0x292>
 800efe4:	e30b      	b.n	800f5fe <LoRaMacMibSetRequestConfirm+0x8aa>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800efe6:	2311      	movs	r3, #17
 800efe8:	e32d      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efea:	2317      	movs	r3, #23
 800efec:	18fb      	adds	r3, r7, r3
 800efee:	2203      	movs	r2, #3
 800eff0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eff2:	e304      	b.n	800f5fe <LoRaMacMibSetRequestConfirm+0x8aa>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00a      	beq.n	800f012 <LoRaMacMibSetRequestConfirm+0x2be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	0019      	movs	r1, r3
 800f002:	2082      	movs	r0, #130	; 0x82
 800f004:	f002 fcb8 	bl	8011978 <LoRaMacCryptoSetKey>
 800f008:	1e03      	subs	r3, r0, #0
 800f00a:	d100      	bne.n	800f00e <LoRaMacMibSetRequestConfirm+0x2ba>
 800f00c:	e2f9      	b.n	800f602 <LoRaMacMibSetRequestConfirm+0x8ae>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f00e:	2311      	movs	r3, #17
 800f010:	e319      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f012:	2317      	movs	r3, #23
 800f014:	18fb      	adds	r3, r7, r3
 800f016:	2203      	movs	r2, #3
 800f018:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f01a:	e2f2      	b.n	800f602 <LoRaMacMibSetRequestConfirm+0x8ae>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00a      	beq.n	800f03a <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	0019      	movs	r1, r3
 800f02a:	2083      	movs	r0, #131	; 0x83
 800f02c:	f002 fca4 	bl	8011978 <LoRaMacCryptoSetKey>
 800f030:	1e03      	subs	r3, r0, #0
 800f032:	d100      	bne.n	800f036 <LoRaMacMibSetRequestConfirm+0x2e2>
 800f034:	e2e7      	b.n	800f606 <LoRaMacMibSetRequestConfirm+0x8b2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f036:	2311      	movs	r3, #17
 800f038:	e305      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f03a:	2317      	movs	r3, #23
 800f03c:	18fb      	adds	r3, r7, r3
 800f03e:	2203      	movs	r2, #3
 800f040:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f042:	e2e0      	b.n	800f606 <LoRaMacMibSetRequestConfirm+0x8b2>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00a      	beq.n	800f062 <LoRaMacMibSetRequestConfirm+0x30e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	0019      	movs	r1, r3
 800f052:	2084      	movs	r0, #132	; 0x84
 800f054:	f002 fc90 	bl	8011978 <LoRaMacCryptoSetKey>
 800f058:	1e03      	subs	r3, r0, #0
 800f05a:	d100      	bne.n	800f05e <LoRaMacMibSetRequestConfirm+0x30a>
 800f05c:	e2d5      	b.n	800f60a <LoRaMacMibSetRequestConfirm+0x8b6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f05e:	2311      	movs	r3, #17
 800f060:	e2f1      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f062:	2317      	movs	r3, #23
 800f064:	18fb      	adds	r3, r7, r3
 800f066:	2203      	movs	r2, #3
 800f068:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f06a:	e2ce      	b.n	800f60a <LoRaMacMibSetRequestConfirm+0x8b6>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d00a      	beq.n	800f08a <LoRaMacMibSetRequestConfirm+0x336>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	0019      	movs	r1, r3
 800f07a:	2085      	movs	r0, #133	; 0x85
 800f07c:	f002 fc7c 	bl	8011978 <LoRaMacCryptoSetKey>
 800f080:	1e03      	subs	r3, r0, #0
 800f082:	d100      	bne.n	800f086 <LoRaMacMibSetRequestConfirm+0x332>
 800f084:	e2c3      	b.n	800f60e <LoRaMacMibSetRequestConfirm+0x8ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f086:	2311      	movs	r3, #17
 800f088:	e2dd      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f08a:	2317      	movs	r3, #23
 800f08c:	18fb      	adds	r3, r7, r3
 800f08e:	2203      	movs	r2, #3
 800f090:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f092:	e2bc      	b.n	800f60e <LoRaMacMibSetRequestConfirm+0x8ba>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00a      	beq.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x35e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	0019      	movs	r1, r3
 800f0a2:	2086      	movs	r0, #134	; 0x86
 800f0a4:	f002 fc68 	bl	8011978 <LoRaMacCryptoSetKey>
 800f0a8:	1e03      	subs	r3, r0, #0
 800f0aa:	d100      	bne.n	800f0ae <LoRaMacMibSetRequestConfirm+0x35a>
 800f0ac:	e2b1      	b.n	800f612 <LoRaMacMibSetRequestConfirm+0x8be>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0ae:	2311      	movs	r3, #17
 800f0b0:	e2c9      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0b2:	2317      	movs	r3, #23
 800f0b4:	18fb      	adds	r3, r7, r3
 800f0b6:	2203      	movs	r2, #3
 800f0b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f0ba:	e2aa      	b.n	800f612 <LoRaMacMibSetRequestConfirm+0x8be>
 800f0bc:	20000708 	.word	0x20000708
 800f0c0:	0802189c 	.word	0x0802189c
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <LoRaMacMibSetRequestConfirm+0x38e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	0019      	movs	r1, r3
 800f0d2:	2087      	movs	r0, #135	; 0x87
 800f0d4:	f002 fc50 	bl	8011978 <LoRaMacCryptoSetKey>
 800f0d8:	1e03      	subs	r3, r0, #0
 800f0da:	d100      	bne.n	800f0de <LoRaMacMibSetRequestConfirm+0x38a>
 800f0dc:	e29b      	b.n	800f616 <LoRaMacMibSetRequestConfirm+0x8c2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0de:	2311      	movs	r3, #17
 800f0e0:	e2b1      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0e2:	2317      	movs	r3, #23
 800f0e4:	18fb      	adds	r3, r7, r3
 800f0e6:	2203      	movs	r2, #3
 800f0e8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f0ea:	e294      	b.n	800f616 <LoRaMacMibSetRequestConfirm+0x8c2>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00a      	beq.n	800f10a <LoRaMacMibSetRequestConfirm+0x3b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	0019      	movs	r1, r3
 800f0fa:	2088      	movs	r0, #136	; 0x88
 800f0fc:	f002 fc3c 	bl	8011978 <LoRaMacCryptoSetKey>
 800f100:	1e03      	subs	r3, r0, #0
 800f102:	d100      	bne.n	800f106 <LoRaMacMibSetRequestConfirm+0x3b2>
 800f104:	e289      	b.n	800f61a <LoRaMacMibSetRequestConfirm+0x8c6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f106:	2311      	movs	r3, #17
 800f108:	e29d      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f10a:	2317      	movs	r3, #23
 800f10c:	18fb      	adds	r3, r7, r3
 800f10e:	2203      	movs	r2, #3
 800f110:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f112:	e282      	b.n	800f61a <LoRaMacMibSetRequestConfirm+0x8c6>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00a      	beq.n	800f132 <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	0019      	movs	r1, r3
 800f122:	2089      	movs	r0, #137	; 0x89
 800f124:	f002 fc28 	bl	8011978 <LoRaMacCryptoSetKey>
 800f128:	1e03      	subs	r3, r0, #0
 800f12a:	d100      	bne.n	800f12e <LoRaMacMibSetRequestConfirm+0x3da>
 800f12c:	e277      	b.n	800f61e <LoRaMacMibSetRequestConfirm+0x8ca>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f12e:	2311      	movs	r3, #17
 800f130:	e289      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f132:	2317      	movs	r3, #23
 800f134:	18fb      	adds	r3, r7, r3
 800f136:	2203      	movs	r2, #3
 800f138:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f13a:	e270      	b.n	800f61e <LoRaMacMibSetRequestConfirm+0x8ca>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00a      	beq.n	800f15a <LoRaMacMibSetRequestConfirm+0x406>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	0019      	movs	r1, r3
 800f14a:	208a      	movs	r0, #138	; 0x8a
 800f14c:	f002 fc14 	bl	8011978 <LoRaMacCryptoSetKey>
 800f150:	1e03      	subs	r3, r0, #0
 800f152:	d100      	bne.n	800f156 <LoRaMacMibSetRequestConfirm+0x402>
 800f154:	e265      	b.n	800f622 <LoRaMacMibSetRequestConfirm+0x8ce>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f156:	2311      	movs	r3, #17
 800f158:	e275      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f15a:	2317      	movs	r3, #23
 800f15c:	18fb      	adds	r3, r7, r3
 800f15e:	2203      	movs	r2, #3
 800f160:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f162:	e25e      	b.n	800f622 <LoRaMacMibSetRequestConfirm+0x8ce>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <LoRaMacMibSetRequestConfirm+0x42e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	0019      	movs	r1, r3
 800f172:	208b      	movs	r0, #139	; 0x8b
 800f174:	f002 fc00 	bl	8011978 <LoRaMacCryptoSetKey>
 800f178:	1e03      	subs	r3, r0, #0
 800f17a:	d100      	bne.n	800f17e <LoRaMacMibSetRequestConfirm+0x42a>
 800f17c:	e253      	b.n	800f626 <LoRaMacMibSetRequestConfirm+0x8d2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f17e:	2311      	movs	r3, #17
 800f180:	e261      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f182:	2317      	movs	r3, #23
 800f184:	18fb      	adds	r3, r7, r3
 800f186:	2203      	movs	r2, #3
 800f188:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f18a:	e24c      	b.n	800f626 <LoRaMacMibSetRequestConfirm+0x8d2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800f18c:	4adb      	ldr	r2, [pc, #876]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f18e:	238e      	movs	r3, #142	; 0x8e
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	58d3      	ldr	r3, [r2, r3]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	7911      	ldrb	r1, [r2, #4]
 800f198:	22c9      	movs	r2, #201	; 0xc9
 800f19a:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800f19c:	4bd8      	ldr	r3, [pc, #864]	; (800f500 <LoRaMacMibSetRequestConfirm+0x7ac>)
 800f19e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1a0:	49d6      	ldr	r1, [pc, #856]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1a2:	228e      	movs	r2, #142	; 0x8e
 800f1a4:	00d2      	lsls	r2, r2, #3
 800f1a6:	588a      	ldr	r2, [r1, r2]
 800f1a8:	21c9      	movs	r1, #201	; 0xc9
 800f1aa:	5c52      	ldrb	r2, [r2, r1]
 800f1ac:	0010      	movs	r0, r2
 800f1ae:	4798      	blx	r3
            break;
 800f1b0:	e242      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800f1b2:	4ad2      	ldr	r2, [pc, #840]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1b4:	238e      	movs	r3, #142	; 0x8e
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	58d2      	ldr	r2, [r2, r3]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7919      	ldrb	r1, [r3, #4]
 800f1be:	2316      	movs	r3, #22
 800f1c0:	33ff      	adds	r3, #255	; 0xff
 800f1c2:	54d1      	strb	r1, [r2, r3]
            break;
 800f1c4:	e238      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	7a1b      	ldrb	r3, [r3, #8]
 800f1ca:	b25a      	sxtb	r2, r3
 800f1cc:	2108      	movs	r1, #8
 800f1ce:	187b      	adds	r3, r7, r1
 800f1d0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f1d2:	4aca      	ldr	r2, [pc, #808]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1d4:	238e      	movs	r3, #142	; 0x8e
 800f1d6:	00db      	lsls	r3, r3, #3
 800f1d8:	58d2      	ldr	r2, [r2, r3]
 800f1da:	2302      	movs	r3, #2
 800f1dc:	33ff      	adds	r3, #255	; 0xff
 800f1de:	5cd2      	ldrb	r2, [r2, r3]
 800f1e0:	187b      	adds	r3, r7, r1
 800f1e2:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800f1e4:	4ac5      	ldr	r2, [pc, #788]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1e6:	238e      	movs	r3, #142	; 0x8e
 800f1e8:	00db      	lsls	r3, r3, #3
 800f1ea:	58d3      	ldr	r3, [r2, r3]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	1879      	adds	r1, r7, r1
 800f1f0:	2206      	movs	r2, #6
 800f1f2:	0018      	movs	r0, r3
 800f1f4:	f003 feac 	bl	8012f50 <RegionVerify>
 800f1f8:	1e03      	subs	r3, r0, #0
 800f1fa:	d040      	beq.n	800f27e <LoRaMacMibSetRequestConfirm+0x52a>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800f1fc:	4abf      	ldr	r2, [pc, #764]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f1fe:	238e      	movs	r3, #142	; 0x8e
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	58d3      	ldr	r3, [r2, r3]
 800f204:	21f8      	movs	r1, #248	; 0xf8
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	185b      	adds	r3, r3, r1
 800f20a:	3204      	adds	r2, #4
 800f20c:	ca03      	ldmia	r2!, {r0, r1}
 800f20e:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f210:	4aba      	ldr	r2, [pc, #744]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f212:	238e      	movs	r3, #142	; 0x8e
 800f214:	00db      	lsls	r3, r3, #3
 800f216:	58d3      	ldr	r3, [r2, r3]
 800f218:	22c8      	movs	r2, #200	; 0xc8
 800f21a:	5c9b      	ldrb	r3, [r3, r2]
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d000      	beq.n	800f222 <LoRaMacMibSetRequestConfirm+0x4ce>
 800f220:	e203      	b.n	800f62a <LoRaMacMibSetRequestConfirm+0x8d6>
 800f222:	4ab6      	ldr	r2, [pc, #728]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f224:	238e      	movs	r3, #142	; 0x8e
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	58d2      	ldr	r2, [r2, r3]
 800f22a:	2389      	movs	r3, #137	; 0x89
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	5cd3      	ldrb	r3, [r2, r3]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d100      	bne.n	800f236 <LoRaMacMibSetRequestConfirm+0x4e2>
 800f234:	e1f9      	b.n	800f62a <LoRaMacMibSetRequestConfirm+0x8d6>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800f236:	4bb2      	ldr	r3, [pc, #712]	; (800f500 <LoRaMacMibSetRequestConfirm+0x7ac>)
 800f238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f23a:	4798      	blx	r3
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f23c:	4aaf      	ldr	r2, [pc, #700]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f23e:	238e      	movs	r3, #142	; 0x8e
 800f240:	00db      	lsls	r3, r3, #3
 800f242:	58d3      	ldr	r3, [r2, r3]
 800f244:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800f246:	4aad      	ldr	r2, [pc, #692]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f248:	238e      	movs	r3, #142	; 0x8e
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	58d3      	ldr	r3, [r2, r3]
 800f24e:	22fc      	movs	r2, #252	; 0xfc
 800f250:	5c9b      	ldrb	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f252:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800f254:	4aa9      	ldr	r2, [pc, #676]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f256:	238e      	movs	r3, #142	; 0x8e
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f25c:	22dc      	movs	r2, #220	; 0xdc
 800f25e:	5c9c      	ldrb	r4, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800f260:	4aa6      	ldr	r2, [pc, #664]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f262:	238e      	movs	r3, #142	; 0x8e
 800f264:	00db      	lsls	r3, r3, #3
 800f266:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f268:	22d8      	movs	r2, #216	; 0xd8
 800f26a:	589a      	ldr	r2, [r3, r2]
 800f26c:	4ba5      	ldr	r3, [pc, #660]	; (800f504 <LoRaMacMibSetRequestConfirm+0x7b0>)
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	0013      	movs	r3, r2
 800f272:	0022      	movs	r2, r4
 800f274:	f003 feb4 	bl	8012fe0 <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindow2Config );
                    OpenContinuousRx2Window( );
 800f278:	f7fe f9ce 	bl	800d618 <OpenContinuousRx2Window>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f27c:	e1d5      	b.n	800f62a <LoRaMacMibSetRequestConfirm+0x8d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f27e:	2317      	movs	r3, #23
 800f280:	18fb      	adds	r3, r7, r3
 800f282:	2203      	movs	r2, #3
 800f284:	701a      	strb	r2, [r3, #0]
            break;
 800f286:	e1d0      	b.n	800f62a <LoRaMacMibSetRequestConfirm+0x8d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	7a1b      	ldrb	r3, [r3, #8]
 800f28c:	b25a      	sxtb	r2, r3
 800f28e:	2108      	movs	r1, #8
 800f290:	187b      	adds	r3, r7, r1
 800f292:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f294:	4a99      	ldr	r2, [pc, #612]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f296:	238e      	movs	r3, #142	; 0x8e
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	58d2      	ldr	r2, [r2, r3]
 800f29c:	2302      	movs	r3, #2
 800f29e:	33ff      	adds	r3, #255	; 0xff
 800f2a0:	5cd2      	ldrb	r2, [r2, r3]
 800f2a2:	187b      	adds	r3, r7, r1
 800f2a4:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800f2a6:	4a95      	ldr	r2, [pc, #596]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f2a8:	238e      	movs	r3, #142	; 0x8e
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	58d3      	ldr	r3, [r2, r3]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	1879      	adds	r1, r7, r1
 800f2b2:	2206      	movs	r2, #6
 800f2b4:	0018      	movs	r0, r3
 800f2b6:	f003 fe4b 	bl	8012f50 <RegionVerify>
 800f2ba:	1e03      	subs	r3, r0, #0
 800f2bc:	d009      	beq.n	800f2d2 <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800f2be:	4a8f      	ldr	r2, [pc, #572]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f2c0:	238e      	movs	r3, #142	; 0x8e
 800f2c2:	00db      	lsls	r3, r3, #3
 800f2c4:	58d3      	ldr	r3, [r2, r3]
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	3328      	adds	r3, #40	; 0x28
 800f2ca:	3204      	adds	r2, #4
 800f2cc:	ca03      	ldmia	r2!, {r0, r1}
 800f2ce:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f2d0:	e1b2      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f2d2:	2317      	movs	r3, #23
 800f2d4:	18fb      	adds	r3, r7, r3
 800f2d6:	2203      	movs	r2, #3
 800f2d8:	701a      	strb	r2, [r3, #0]
            break;
 800f2da:	e1ad      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685a      	ldr	r2, [r3, #4]
 800f2e0:	210c      	movs	r1, #12
 800f2e2:	187b      	adds	r3, r7, r1
 800f2e4:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800f2e6:	187b      	adds	r3, r7, r1
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800f2ec:	4a83      	ldr	r2, [pc, #524]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f2ee:	238e      	movs	r3, #142	; 0x8e
 800f2f0:	00db      	lsls	r3, r3, #3
 800f2f2:	58d3      	ldr	r3, [r2, r3]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	187a      	adds	r2, r7, r1
 800f2f8:	0011      	movs	r1, r2
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	f003 fe5a 	bl	8012fb4 <RegionChanMaskSet>
 800f300:	0003      	movs	r3, r0
 800f302:	001a      	movs	r2, r3
 800f304:	2301      	movs	r3, #1
 800f306:	4053      	eors	r3, r2
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d100      	bne.n	800f310 <LoRaMacMibSetRequestConfirm+0x5bc>
 800f30e:	e18e      	b.n	800f62e <LoRaMacMibSetRequestConfirm+0x8da>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f310:	2317      	movs	r3, #23
 800f312:	18fb      	adds	r3, r7, r3
 800f314:	2203      	movs	r2, #3
 800f316:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f318:	e189      	b.n	800f62e <LoRaMacMibSetRequestConfirm+0x8da>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	685a      	ldr	r2, [r3, #4]
 800f31e:	210c      	movs	r1, #12
 800f320:	187b      	adds	r3, r7, r1
 800f322:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800f324:	187b      	adds	r3, r7, r1
 800f326:	2200      	movs	r2, #0
 800f328:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800f32a:	4a74      	ldr	r2, [pc, #464]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f32c:	238e      	movs	r3, #142	; 0x8e
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	58d3      	ldr	r3, [r2, r3]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	187a      	adds	r2, r7, r1
 800f336:	0011      	movs	r1, r2
 800f338:	0018      	movs	r0, r3
 800f33a:	f003 fe3b 	bl	8012fb4 <RegionChanMaskSet>
 800f33e:	0003      	movs	r3, r0
 800f340:	001a      	movs	r2, r3
 800f342:	2301      	movs	r3, #1
 800f344:	4053      	eors	r3, r2
 800f346:	b2db      	uxtb	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d100      	bne.n	800f34e <LoRaMacMibSetRequestConfirm+0x5fa>
 800f34c:	e171      	b.n	800f632 <LoRaMacMibSetRequestConfirm+0x8de>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f34e:	2317      	movs	r3, #23
 800f350:	18fb      	adds	r3, r7, r3
 800f352:	2203      	movs	r2, #3
 800f354:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f356:	e16c      	b.n	800f632 <LoRaMacMibSetRequestConfirm+0x8de>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	791b      	ldrb	r3, [r3, #4]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00c      	beq.n	800f37a <LoRaMacMibSetRequestConfirm+0x626>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f364:	2b0f      	cmp	r3, #15
 800f366:	d808      	bhi.n	800f37a <LoRaMacMibSetRequestConfirm+0x626>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800f368:	4a64      	ldr	r2, [pc, #400]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f36a:	238e      	movs	r3, #142	; 0x8e
 800f36c:	00db      	lsls	r3, r3, #3
 800f36e:	58d3      	ldr	r3, [r2, r3]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	7911      	ldrb	r1, [r2, #4]
 800f374:	22f4      	movs	r2, #244	; 0xf4
 800f376:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f378:	e15e      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f37a:	2317      	movs	r3, #23
 800f37c:	18fb      	adds	r3, r7, r3
 800f37e:	2203      	movs	r2, #3
 800f380:	701a      	strb	r2, [r3, #0]
            break;
 800f382:	e159      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800f384:	4a5d      	ldr	r2, [pc, #372]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f386:	238e      	movs	r3, #142	; 0x8e
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	58d2      	ldr	r2, [r2, r3]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	21e0      	movs	r1, #224	; 0xe0
 800f392:	5053      	str	r3, [r2, r1]
            break;
 800f394:	e150      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800f396:	4a59      	ldr	r2, [pc, #356]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f398:	238e      	movs	r3, #142	; 0x8e
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	58d2      	ldr	r2, [r2, r3]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	21e4      	movs	r1, #228	; 0xe4
 800f3a4:	5053      	str	r3, [r2, r1]
            break;
 800f3a6:	e147      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800f3a8:	4a54      	ldr	r2, [pc, #336]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3aa:	238e      	movs	r3, #142	; 0x8e
 800f3ac:	00db      	lsls	r3, r3, #3
 800f3ae:	58d2      	ldr	r2, [r2, r3]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	21e8      	movs	r1, #232	; 0xe8
 800f3b6:	5053      	str	r3, [r2, r1]
            break;
 800f3b8:	e13e      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800f3ba:	4a50      	ldr	r2, [pc, #320]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3bc:	238e      	movs	r3, #142	; 0x8e
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	58d2      	ldr	r2, [r2, r3]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	21ec      	movs	r1, #236	; 0xec
 800f3c8:	5053      	str	r3, [r2, r1]
            break;
 800f3ca:	e135      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800f3cc:	4a4b      	ldr	r2, [pc, #300]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3ce:	238e      	movs	r3, #142	; 0x8e
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	58d2      	ldr	r2, [r2, r3]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	21f0      	movs	r1, #240	; 0xf0
 800f3da:	5053      	str	r3, [r2, r1]
            break;
 800f3dc:	e12c      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2204      	movs	r2, #4
 800f3e2:	569a      	ldrsb	r2, [r3, r2]
 800f3e4:	2108      	movs	r1, #8
 800f3e6:	187b      	adds	r3, r7, r1
 800f3e8:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800f3ea:	4a44      	ldr	r2, [pc, #272]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f3ec:	238e      	movs	r3, #142	; 0x8e
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	58d3      	ldr	r3, [r2, r3]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	1879      	adds	r1, r7, r1
 800f3f6:	2205      	movs	r2, #5
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	f003 fda9 	bl	8012f50 <RegionVerify>
 800f3fe:	1e03      	subs	r3, r0, #0
 800f400:	d009      	beq.n	800f416 <LoRaMacMibSetRequestConfirm+0x6c2>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f402:	4a3e      	ldr	r2, [pc, #248]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f404:	238e      	movs	r3, #142	; 0x8e
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	58d3      	ldr	r3, [r2, r3]
 800f40a:	2208      	movs	r2, #8
 800f40c:	18ba      	adds	r2, r7, r2
 800f40e:	7812      	ldrb	r2, [r2, #0]
 800f410:	b252      	sxtb	r2, r2
 800f412:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f414:	e110      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f416:	2317      	movs	r3, #23
 800f418:	18fb      	adds	r3, r7, r3
 800f41a:	2203      	movs	r2, #3
 800f41c:	701a      	strb	r2, [r3, #0]
            break;
 800f41e:	e10b      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2204      	movs	r2, #4
 800f424:	569a      	ldrsb	r2, [r3, r2]
 800f426:	2108      	movs	r1, #8
 800f428:	187b      	adds	r3, r7, r1
 800f42a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f42c:	4a33      	ldr	r2, [pc, #204]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f42e:	238e      	movs	r3, #142	; 0x8e
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	58d2      	ldr	r2, [r2, r3]
 800f434:	2380      	movs	r3, #128	; 0x80
 800f436:	005b      	lsls	r3, r3, #1
 800f438:	5cd2      	ldrb	r2, [r2, r3]
 800f43a:	187b      	adds	r3, r7, r1
 800f43c:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800f43e:	4a2f      	ldr	r2, [pc, #188]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f440:	238e      	movs	r3, #142	; 0x8e
 800f442:	00db      	lsls	r3, r3, #3
 800f444:	58d3      	ldr	r3, [r2, r3]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	1879      	adds	r1, r7, r1
 800f44a:	2204      	movs	r2, #4
 800f44c:	0018      	movs	r0, r3
 800f44e:	f003 fd7f 	bl	8012f50 <RegionVerify>
 800f452:	1e03      	subs	r3, r0, #0
 800f454:	d00a      	beq.n	800f46c <LoRaMacMibSetRequestConfirm+0x718>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f456:	4a29      	ldr	r2, [pc, #164]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f458:	238e      	movs	r3, #142	; 0x8e
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	58d3      	ldr	r3, [r2, r3]
 800f45e:	2208      	movs	r2, #8
 800f460:	18ba      	adds	r2, r7, r2
 800f462:	2100      	movs	r1, #0
 800f464:	5651      	ldrsb	r1, [r2, r1]
 800f466:	22d5      	movs	r2, #213	; 0xd5
 800f468:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f46a:	e0e5      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f46c:	2317      	movs	r3, #23
 800f46e:	18fb      	adds	r3, r7, r3
 800f470:	2203      	movs	r2, #3
 800f472:	701a      	strb	r2, [r3, #0]
            break;
 800f474:	e0e0      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2204      	movs	r2, #4
 800f47a:	569a      	ldrsb	r2, [r3, r2]
 800f47c:	2108      	movs	r1, #8
 800f47e:	187b      	adds	r3, r7, r1
 800f480:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800f482:	4a1e      	ldr	r2, [pc, #120]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f484:	238e      	movs	r3, #142	; 0x8e
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	58d3      	ldr	r3, [r2, r3]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	1879      	adds	r1, r7, r1
 800f48e:	2209      	movs	r2, #9
 800f490:	0018      	movs	r0, r3
 800f492:	f003 fd5d 	bl	8012f50 <RegionVerify>
 800f496:	1e03      	subs	r3, r0, #0
 800f498:	d009      	beq.n	800f4ae <LoRaMacMibSetRequestConfirm+0x75a>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800f49a:	4a18      	ldr	r2, [pc, #96]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f49c:	238e      	movs	r3, #142	; 0x8e
 800f49e:	00db      	lsls	r3, r3, #3
 800f4a0:	58d3      	ldr	r3, [r2, r3]
 800f4a2:	2208      	movs	r2, #8
 800f4a4:	18ba      	adds	r2, r7, r2
 800f4a6:	7812      	ldrb	r2, [r2, #0]
 800f4a8:	b252      	sxtb	r2, r2
 800f4aa:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f4ac:	e0c4      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4ae:	2317      	movs	r3, #23
 800f4b0:	18fb      	adds	r3, r7, r3
 800f4b2:	2203      	movs	r2, #3
 800f4b4:	701a      	strb	r2, [r3, #0]
            break;
 800f4b6:	e0bf      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2204      	movs	r2, #4
 800f4bc:	569a      	ldrsb	r2, [r3, r2]
 800f4be:	2108      	movs	r1, #8
 800f4c0:	187b      	adds	r3, r7, r1
 800f4c2:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800f4c4:	4a0d      	ldr	r2, [pc, #52]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f4c6:	238e      	movs	r3, #142	; 0x8e
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	58d3      	ldr	r3, [r2, r3]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	1879      	adds	r1, r7, r1
 800f4d0:	2208      	movs	r2, #8
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	f003 fd3c 	bl	8012f50 <RegionVerify>
 800f4d8:	1e03      	subs	r3, r0, #0
 800f4da:	d00a      	beq.n	800f4f2 <LoRaMacMibSetRequestConfirm+0x79e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800f4dc:	4a07      	ldr	r2, [pc, #28]	; (800f4fc <LoRaMacMibSetRequestConfirm+0x7a8>)
 800f4de:	238e      	movs	r3, #142	; 0x8e
 800f4e0:	00db      	lsls	r3, r3, #3
 800f4e2:	58d3      	ldr	r3, [r2, r3]
 800f4e4:	2208      	movs	r2, #8
 800f4e6:	18ba      	adds	r2, r7, r2
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	5651      	ldrsb	r1, [r2, r1]
 800f4ec:	22d4      	movs	r2, #212	; 0xd4
 800f4ee:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f4f0:	e0a2      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4f2:	2317      	movs	r3, #23
 800f4f4:	18fb      	adds	r3, r7, r3
 800f4f6:	2203      	movs	r2, #3
 800f4f8:	701a      	strb	r2, [r3, #0]
            break;
 800f4fa:	e09d      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
 800f4fc:	20000708 	.word	0x20000708
 800f500:	08021b48 	.word	0x08021b48
 800f504:	20000ae8 	.word	0x20000ae8
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800f508:	4a51      	ldr	r2, [pc, #324]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f50a:	238e      	movs	r3, #142	; 0x8e
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	58d3      	ldr	r3, [r2, r3]
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	6852      	ldr	r2, [r2, #4]
 800f514:	609a      	str	r2, [r3, #8]
 800f516:	494e      	ldr	r1, [pc, #312]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f518:	228e      	movs	r2, #142	; 0x8e
 800f51a:	00d2      	lsls	r2, r2, #3
 800f51c:	588a      	ldr	r2, [r1, r2]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	21d8      	movs	r1, #216	; 0xd8
 800f522:	5053      	str	r3, [r2, r1]
            break;
 800f524:	e088      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800f526:	4a4a      	ldr	r2, [pc, #296]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f528:	238e      	movs	r3, #142	; 0x8e
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	58d3      	ldr	r3, [r2, r3]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	7912      	ldrb	r2, [r2, #4]
 800f532:	731a      	strb	r2, [r3, #12]
 800f534:	4946      	ldr	r1, [pc, #280]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f536:	228e      	movs	r2, #142	; 0x8e
 800f538:	00d2      	lsls	r2, r2, #3
 800f53a:	588a      	ldr	r2, [r1, r2]
 800f53c:	7b19      	ldrb	r1, [r3, #12]
 800f53e:	23dc      	movs	r3, #220	; 0xdc
 800f540:	54d1      	strb	r1, [r2, r3]
            break;
 800f542:	e079      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800f544:	4a42      	ldr	r2, [pc, #264]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f546:	238e      	movs	r3, #142	; 0x8e
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	58d2      	ldr	r2, [r2, r3]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6859      	ldr	r1, [r3, #4]
 800f550:	2384      	movs	r3, #132	; 0x84
 800f552:	005b      	lsls	r3, r3, #1
 800f554:	50d1      	str	r1, [r2, r3]
            break;
 800f556:	e06f      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800f558:	4a3d      	ldr	r2, [pc, #244]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f55a:	238e      	movs	r3, #142	; 0x8e
 800f55c:	00db      	lsls	r3, r3, #3
 800f55e:	58d3      	ldr	r3, [r2, r3]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	6852      	ldr	r2, [r2, #4]
 800f564:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800f566:	e067      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <LoRaMacMibSetRequestConfirm+0x830>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	2217      	movs	r2, #23
 800f576:	18bc      	adds	r4, r7, r2
 800f578:	0018      	movs	r0, r3
 800f57a:	f7fe fb53 	bl	800dc24 <RestoreCtxs>
 800f57e:	0003      	movs	r3, r0
 800f580:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f582:	e059      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f584:	2317      	movs	r3, #23
 800f586:	18fb      	adds	r3, r7, r3
 800f588:	2203      	movs	r2, #3
 800f58a:	701a      	strb	r2, [r3, #0]
            break;
 800f58c:	e054      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	799b      	ldrb	r3, [r3, #6]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d811      	bhi.n	800f5ba <LoRaMacMibSetRequestConfirm+0x866>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800f596:	4a2e      	ldr	r2, [pc, #184]	; (800f650 <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f598:	238e      	movs	r3, #142	; 0x8e
 800f59a:	00db      	lsls	r3, r3, #3
 800f59c:	58d1      	ldr	r1, [r2, r3]
 800f59e:	2388      	movs	r3, #136	; 0x88
 800f5a0:	009a      	lsls	r2, r3, #2
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	0018      	movs	r0, r3
 800f5ae:	f002 f9b1 	bl	8011914 <LoRaMacCryptoSetLrWanVersion>
 800f5b2:	1e03      	subs	r3, r0, #0
 800f5b4:	d03f      	beq.n	800f636 <LoRaMacMibSetRequestConfirm+0x8e2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f5b6:	2311      	movs	r3, #17
 800f5b8:	e045      	b.n	800f646 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f5ba:	2317      	movs	r3, #23
 800f5bc:	18fb      	adds	r3, r7, r3
 800f5be:	2203      	movs	r2, #3
 800f5c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f5c2:	e038      	b.n	800f636 <LoRaMacMibSetRequestConfirm+0x8e2>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f5c4:	2317      	movs	r3, #23
 800f5c6:	18fc      	adds	r4, r7, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	f000 fcf9 	bl	800ffc2 <LoRaMacMibClassBSetRequestConfirm>
 800f5d0:	0003      	movs	r3, r0
 800f5d2:	7023      	strb	r3, [r4, #0]
            break;
 800f5d4:	e030      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	e02e      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5da:	46c0      	nop			; (mov r8, r8)
 800f5dc:	e02c      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5de:	46c0      	nop			; (mov r8, r8)
 800f5e0:	e02a      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5e2:	46c0      	nop			; (mov r8, r8)
 800f5e4:	e028      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5e6:	46c0      	nop			; (mov r8, r8)
 800f5e8:	e026      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	e024      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5ee:	46c0      	nop			; (mov r8, r8)
 800f5f0:	e022      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5f2:	46c0      	nop			; (mov r8, r8)
 800f5f4:	e020      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5f6:	46c0      	nop			; (mov r8, r8)
 800f5f8:	e01e      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5fa:	46c0      	nop			; (mov r8, r8)
 800f5fc:	e01c      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f5fe:	46c0      	nop			; (mov r8, r8)
 800f600:	e01a      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f602:	46c0      	nop			; (mov r8, r8)
 800f604:	e018      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f606:	46c0      	nop			; (mov r8, r8)
 800f608:	e016      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	e014      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f60e:	46c0      	nop			; (mov r8, r8)
 800f610:	e012      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f612:	46c0      	nop			; (mov r8, r8)
 800f614:	e010      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	e00e      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	e00c      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f61e:	46c0      	nop			; (mov r8, r8)
 800f620:	e00a      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	e008      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f626:	46c0      	nop			; (mov r8, r8)
 800f628:	e006      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f62a:	46c0      	nop			; (mov r8, r8)
 800f62c:	e004      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f62e:	46c0      	nop			; (mov r8, r8)
 800f630:	e002      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f632:	46c0      	nop			; (mov r8, r8)
 800f634:	e000      	b.n	800f638 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f636:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 800f638:	f7fe fd4a 	bl	800e0d0 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800f63c:	f7fe fd40 	bl	800e0c0 <EventMacNvmCtxChanged>
    return status;
 800f640:	2317      	movs	r3, #23
 800f642:	18fb      	adds	r3, r7, r3
 800f644:	781b      	ldrb	r3, [r3, #0]
}
 800f646:	0018      	movs	r0, r3
 800f648:	46bd      	mov	sp, r7
 800f64a:	b007      	add	sp, #28
 800f64c:	bd90      	pop	{r4, r7, pc}
 800f64e:	46c0      	nop			; (mov r8, r8)
 800f650:	20000708 	.word	0x20000708

0800f654 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 800f654:	b590      	push	{r4, r7, lr}
 800f656:	b087      	sub	sp, #28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	0004      	movs	r4, r0
 800f65c:	0038      	movs	r0, r7
 800f65e:	6001      	str	r1, [r0, #0]
 800f660:	6042      	str	r2, [r0, #4]
 800f662:	6083      	str	r3, [r0, #8]
 800f664:	230f      	movs	r3, #15
 800f666:	18fb      	adds	r3, r7, r3
 800f668:	1c22      	adds	r2, r4, #0
 800f66a:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f66c:	4a14      	ldr	r2, [pc, #80]	; (800f6c0 <LoRaMacChannelAdd+0x6c>)
 800f66e:	23d5      	movs	r3, #213	; 0xd5
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	58d3      	ldr	r3, [r2, r3]
 800f674:	2202      	movs	r2, #2
 800f676:	4013      	ands	r3, r2
 800f678:	d008      	beq.n	800f68c <LoRaMacChannelAdd+0x38>
    {
        if( ( MacCtx.MacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG )
 800f67a:	4a11      	ldr	r2, [pc, #68]	; (800f6c0 <LoRaMacChannelAdd+0x6c>)
 800f67c:	23d5      	movs	r3, #213	; 0xd5
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	58d3      	ldr	r3, [r2, r3]
 800f682:	2240      	movs	r2, #64	; 0x40
 800f684:	4013      	ands	r3, r2
 800f686:	d101      	bne.n	800f68c <LoRaMacChannelAdd+0x38>
        {
            return LORAMAC_STATUS_BUSY;
 800f688:	2301      	movs	r3, #1
 800f68a:	e015      	b.n	800f6b8 <LoRaMacChannelAdd+0x64>
        }
    }

    channelAdd.NewChannel = &params;
 800f68c:	2410      	movs	r4, #16
 800f68e:	193b      	adds	r3, r7, r4
 800f690:	003a      	movs	r2, r7
 800f692:	601a      	str	r2, [r3, #0]
    channelAdd.ChannelId = id;
 800f694:	193b      	adds	r3, r7, r4
 800f696:	220f      	movs	r2, #15
 800f698:	18ba      	adds	r2, r7, r2
 800f69a:	7812      	ldrb	r2, [r2, #0]
 800f69c:	711a      	strb	r2, [r3, #4]

    EventRegionNvmCtxChanged( );
 800f69e:	f7fe fd17 	bl	800e0d0 <EventRegionNvmCtxChanged>
    return RegionChannelAdd( MacCtx.NvmCtx->Region, &channelAdd );
 800f6a2:	4a07      	ldr	r2, [pc, #28]	; (800f6c0 <LoRaMacChannelAdd+0x6c>)
 800f6a4:	238e      	movs	r3, #142	; 0x8e
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	58d3      	ldr	r3, [r2, r3]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	193a      	adds	r2, r7, r4
 800f6ae:	0011      	movs	r1, r2
 800f6b0:	0018      	movs	r0, r3
 800f6b2:	f003 fdb7 	bl	8013224 <RegionChannelAdd>
 800f6b6:	0003      	movs	r3, r0
}
 800f6b8:	0018      	movs	r0, r3
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	b007      	add	sp, #28
 800f6be:	bd90      	pop	{r4, r7, pc}
 800f6c0:	20000708 	.word	0x20000708

0800f6c4 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f6c4:	b5b0      	push	{r4, r5, r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f6cc:	2317      	movs	r3, #23
 800f6ce:	18fb      	adds	r3, r7, r3
 800f6d0:	2202      	movs	r2, #2
 800f6d2:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f6d4:	210c      	movs	r1, #12
 800f6d6:	187b      	adds	r3, r7, r1
 800f6d8:	2200      	movs	r2, #0
 800f6da:	701a      	strb	r2, [r3, #0]
 800f6dc:	187b      	adds	r3, r7, r1
 800f6de:	2200      	movs	r2, #0
 800f6e0:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d101      	bne.n	800f6ec <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e14c      	b.n	800f986 <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f6ec:	f7fb ff6a 	bl	800b5c4 <LoRaMacIsBusy>
 800f6f0:	0003      	movs	r3, r0
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	d101      	bne.n	800f6fa <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e145      	b.n	800f986 <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f6fa:	f001 f97f 	bl	80109fc <LoRaMacConfirmQueueIsFull>
 800f6fe:	1e03      	subs	r3, r0, #0
 800f700:	d001      	beq.n	800f706 <LoRaMacMlmeRequest+0x42>
    {
        return LORAMAC_STATUS_BUSY;
 800f702:	2301      	movs	r3, #1
 800f704:	e13f      	b.n	800f986 <LoRaMacMlmeRequest+0x2c2>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f706:	f001 f96f 	bl	80109e8 <LoRaMacConfirmQueueGetCnt>
 800f70a:	1e03      	subs	r3, r0, #0
 800f70c:	d105      	bne.n	800f71a <LoRaMacMlmeRequest+0x56>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f70e:	4ba0      	ldr	r3, [pc, #640]	; (800f990 <LoRaMacMlmeRequest+0x2cc>)
 800f710:	2214      	movs	r2, #20
 800f712:	2100      	movs	r1, #0
 800f714:	0018      	movs	r0, r3
 800f716:	f006 f9ad 	bl	8015a74 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f71a:	4b9e      	ldr	r3, [pc, #632]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f71c:	4a9e      	ldr	r2, [pc, #632]	; (800f998 <LoRaMacMlmeRequest+0x2d4>)
 800f71e:	2101      	movs	r1, #1
 800f720:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f722:	4b9c      	ldr	r3, [pc, #624]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f724:	4a9d      	ldr	r2, [pc, #628]	; (800f99c <LoRaMacMlmeRequest+0x2d8>)
 800f726:	5c99      	ldrb	r1, [r3, r2]
 800f728:	2004      	movs	r0, #4
 800f72a:	4301      	orrs	r1, r0
 800f72c:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	2110      	movs	r1, #16
 800f734:	187b      	adds	r3, r7, r1
 800f736:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f738:	187b      	adds	r3, r7, r1
 800f73a:	2201      	movs	r2, #1
 800f73c:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800f73e:	187b      	adds	r3, r7, r1
 800f740:	2200      	movs	r2, #0
 800f742:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	2b0d      	cmp	r3, #13
 800f74a:	d900      	bls.n	800f74e <LoRaMacMlmeRequest+0x8a>
 800f74c:	e0ef      	b.n	800f92e <LoRaMacMlmeRequest+0x26a>
 800f74e:	009a      	lsls	r2, r3, #2
 800f750:	4b93      	ldr	r3, [pc, #588]	; (800f9a0 <LoRaMacMlmeRequest+0x2dc>)
 800f752:	18d3      	adds	r3, r2, r3
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f758:	4a8e      	ldr	r2, [pc, #568]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f75a:	23d5      	movs	r3, #213	; 0xd5
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	58d3      	ldr	r3, [r2, r3]
 800f760:	2220      	movs	r2, #32
 800f762:	4013      	ands	r3, r2
 800f764:	d001      	beq.n	800f76a <LoRaMacMlmeRequest+0xa6>
            {
                return LORAMAC_STATUS_BUSY;
 800f766:	2301      	movs	r3, #1
 800f768:	e10d      	b.n	800f986 <LoRaMacMlmeRequest+0x2c2>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <LoRaMacMlmeRequest+0xb6>
                ( mlmeRequest->Req.Join.JoinEui == NULL ) )
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <LoRaMacMlmeRequest+0xba>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f77a:	2303      	movs	r3, #3
 800f77c:	e103      	b.n	800f986 <LoRaMacMlmeRequest+0x2c2>
            }

            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800f77e:	4a85      	ldr	r2, [pc, #532]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f780:	238e      	movs	r3, #142	; 0x8e
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	58d2      	ldr	r2, [r2, r3]
 800f786:	2389      	movs	r3, #137	; 0x89
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	2100      	movs	r1, #0
 800f78c:	54d1      	strb	r1, [r2, r3]

            ResetMacParameters( );
 800f78e:	f7fd fe5b 	bl	800d448 <ResetMacParameters>

            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	4b7f      	ldr	r3, [pc, #508]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f798:	601a      	str	r2, [r3, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	689a      	ldr	r2, [r3, #8]
 800f79e:	4b7d      	ldr	r3, [pc, #500]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f7a0:	605a      	str	r2, [r3, #4]

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f7a2:	4a7c      	ldr	r2, [pc, #496]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f7a4:	238e      	movs	r3, #142	; 0x8e
 800f7a6:	00db      	lsls	r3, r3, #3
 800f7a8:	58d3      	ldr	r3, [r2, r3]
 800f7aa:	7818      	ldrb	r0, [r3, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	7b1b      	ldrb	r3, [r3, #12]
 800f7b0:	b259      	sxtb	r1, r3
 800f7b2:	4a78      	ldr	r2, [pc, #480]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f7b4:	238e      	movs	r3, #142	; 0x8e
 800f7b6:	00db      	lsls	r3, r3, #3
 800f7b8:	58d4      	ldr	r4, [r2, r3]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f003 fcdf 	bl	801317e <RegionAlternateDr>
 800f7c0:	0003      	movs	r3, r0
 800f7c2:	001a      	movs	r2, r3
 800f7c4:	23d5      	movs	r3, #213	; 0xd5
 800f7c6:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f7c8:	2310      	movs	r3, #16
 800f7ca:	18fb      	adds	r3, r7, r3
 800f7cc:	2207      	movs	r2, #7
 800f7ce:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 800f7d0:	2517      	movs	r5, #23
 800f7d2:	197c      	adds	r4, r7, r5
 800f7d4:	20ff      	movs	r0, #255	; 0xff
 800f7d6:	f7fd fb61 	bl	800ce9c <SendReJoinReq>
 800f7da:	0003      	movs	r3, r0
 800f7dc:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 800f7de:	197b      	adds	r3, r7, r5
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d100      	bne.n	800f7e8 <LoRaMacMlmeRequest+0x124>
 800f7e6:	e0a4      	b.n	800f932 <LoRaMacMlmeRequest+0x26e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f7e8:	4a6a      	ldr	r2, [pc, #424]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f7ea:	238e      	movs	r3, #142	; 0x8e
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	58d3      	ldr	r3, [r2, r3]
 800f7f0:	7818      	ldrb	r0, [r3, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7b1b      	ldrb	r3, [r3, #12]
 800f7f6:	b259      	sxtb	r1, r3
 800f7f8:	4a66      	ldr	r2, [pc, #408]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f7fa:	238e      	movs	r3, #142	; 0x8e
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	58d4      	ldr	r4, [r2, r3]
 800f800:	2201      	movs	r2, #1
 800f802:	f003 fcbc 	bl	801317e <RegionAlternateDr>
 800f806:	0003      	movs	r3, r0
 800f808:	001a      	movs	r2, r3
 800f80a:	23d5      	movs	r3, #213	; 0xd5
 800f80c:	54e2      	strb	r2, [r4, r3]
            }
            break;
 800f80e:	e090      	b.n	800f932 <LoRaMacMlmeRequest+0x26e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f810:	2317      	movs	r3, #23
 800f812:	18fb      	adds	r3, r7, r3
 800f814:	2200      	movs	r2, #0
 800f816:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f818:	230c      	movs	r3, #12
 800f81a:	18fb      	adds	r3, r7, r3
 800f81c:	2200      	movs	r2, #0
 800f81e:	0019      	movs	r1, r3
 800f820:	2002      	movs	r0, #2
 800f822:	f000 fd7b 	bl	801031c <LoRaMacCommandsAddCmd>
 800f826:	1e03      	subs	r3, r0, #0
 800f828:	d100      	bne.n	800f82c <LoRaMacMlmeRequest+0x168>
 800f82a:	e084      	b.n	800f936 <LoRaMacMlmeRequest+0x272>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f82c:	2317      	movs	r3, #23
 800f82e:	18fb      	adds	r3, r7, r3
 800f830:	2213      	movs	r2, #19
 800f832:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f834:	e07f      	b.n	800f936 <LoRaMacMlmeRequest+0x272>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	889b      	ldrh	r3, [r3, #4]
 800f83a:	2217      	movs	r2, #23
 800f83c:	18bc      	adds	r4, r7, r2
 800f83e:	0018      	movs	r0, r3
 800f840:	f7fe f918 	bl	800da74 <SetTxContinuousWave>
 800f844:	0003      	movs	r3, r0
 800f846:	7023      	strb	r3, [r4, #0]
            break;
 800f848:	e07c      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	8898      	ldrh	r0, [r3, #4]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6899      	ldr	r1, [r3, #8]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	7b1b      	ldrb	r3, [r3, #12]
 800f856:	2217      	movs	r2, #23
 800f858:	18bc      	adds	r4, r7, r2
 800f85a:	001a      	movs	r2, r3
 800f85c:	f7fe f95c 	bl	800db18 <SetTxContinuousWave1>
 800f860:	0003      	movs	r3, r0
 800f862:	7023      	strb	r3, [r4, #0]
            break;
 800f864:	e06e      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f866:	2317      	movs	r3, #23
 800f868:	18fb      	adds	r3, r7, r3
 800f86a:	2200      	movs	r2, #0
 800f86c:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f86e:	230c      	movs	r3, #12
 800f870:	18fb      	adds	r3, r7, r3
 800f872:	2200      	movs	r2, #0
 800f874:	0019      	movs	r1, r3
 800f876:	200d      	movs	r0, #13
 800f878:	f000 fd50 	bl	801031c <LoRaMacCommandsAddCmd>
 800f87c:	1e03      	subs	r3, r0, #0
 800f87e:	d05c      	beq.n	800f93a <LoRaMacMlmeRequest+0x276>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f880:	2317      	movs	r3, #23
 800f882:	18fb      	adds	r3, r7, r3
 800f884:	2213      	movs	r2, #19
 800f886:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f888:	e057      	b.n	800f93a <LoRaMacMlmeRequest+0x276>
        }
        case MLME_PING_SLOT_INFO:
        {
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f88a:	2416      	movs	r4, #22
 800f88c:	193b      	adds	r3, r7, r4
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	7912      	ldrb	r2, [r2, #4]
 800f892:	701a      	strb	r2, [r3, #0]

            // LoRaMac will send this command piggy-pack
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	791b      	ldrb	r3, [r3, #4]
 800f898:	075b      	lsls	r3, r3, #29
 800f89a:	0f5b      	lsrs	r3, r3, #29
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	0018      	movs	r0, r3
 800f8a0:	f000 fb67 	bl	800ff72 <LoRaMacClassBSetPingSlotInfo>
            macCmdPayload[0] = value;
 800f8a4:	210c      	movs	r1, #12
 800f8a6:	187b      	adds	r3, r7, r1
 800f8a8:	193a      	adds	r2, r7, r4
 800f8aa:	7812      	ldrb	r2, [r2, #0]
 800f8ac:	701a      	strb	r2, [r3, #0]
            status = LORAMAC_STATUS_OK;
 800f8ae:	2317      	movs	r3, #23
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f8b6:	187b      	adds	r3, r7, r1
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	0019      	movs	r1, r3
 800f8bc:	2010      	movs	r0, #16
 800f8be:	f000 fd2d 	bl	801031c <LoRaMacCommandsAddCmd>
 800f8c2:	1e03      	subs	r3, r0, #0
 800f8c4:	d03b      	beq.n	800f93e <LoRaMacMlmeRequest+0x27a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8c6:	2317      	movs	r3, #23
 800f8c8:	18fb      	adds	r3, r7, r3
 800f8ca:	2213      	movs	r2, #19
 800f8cc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f8ce:	e036      	b.n	800f93e <LoRaMacMlmeRequest+0x27a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f8d0:	2317      	movs	r3, #23
 800f8d2:	18fb      	adds	r3, r7, r3
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f8d8:	230c      	movs	r3, #12
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	2200      	movs	r2, #0
 800f8de:	0019      	movs	r1, r3
 800f8e0:	2012      	movs	r0, #18
 800f8e2:	f000 fd1b 	bl	801031c <LoRaMacCommandsAddCmd>
 800f8e6:	1e03      	subs	r3, r0, #0
 800f8e8:	d02b      	beq.n	800f942 <LoRaMacMlmeRequest+0x27e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8ea:	2317      	movs	r3, #23
 800f8ec:	18fb      	adds	r3, r7, r3
 800f8ee:	2213      	movs	r2, #19
 800f8f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f8f2:	e026      	b.n	800f942 <LoRaMacMlmeRequest+0x27e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800f8f4:	2310      	movs	r3, #16
 800f8f6:	18fb      	adds	r3, r7, r3
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f8fc:	f000 faf7 	bl	800feee <LoRaMacClassBIsAcquisitionInProgress>
 800f900:	0003      	movs	r3, r0
 800f902:	001a      	movs	r2, r3
 800f904:	2301      	movs	r3, #1
 800f906:	4053      	eors	r3, r2
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00a      	beq.n	800f924 <LoRaMacMlmeRequest+0x260>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f90e:	2000      	movs	r0, #0
 800f910:	f000 facf 	bl	800feb2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f914:	2000      	movs	r0, #0
 800f916:	f000 faf0 	bl	800fefa <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800f91a:	2317      	movs	r3, #23
 800f91c:	18fb      	adds	r3, r7, r3
 800f91e:	2200      	movs	r2, #0
 800f920:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800f922:	e00f      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
                status = LORAMAC_STATUS_BUSY;
 800f924:	2317      	movs	r3, #23
 800f926:	18fb      	adds	r3, r7, r3
 800f928:	2201      	movs	r2, #1
 800f92a:	701a      	strb	r2, [r3, #0]
            break;
 800f92c:	e00a      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
        }
        default:
            break;
 800f92e:	46c0      	nop			; (mov r8, r8)
 800f930:	e008      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
            break;
 800f932:	46c0      	nop			; (mov r8, r8)
 800f934:	e006      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
            break;
 800f936:	46c0      	nop			; (mov r8, r8)
 800f938:	e004      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
            break;
 800f93a:	46c0      	nop			; (mov r8, r8)
 800f93c:	e002      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
            break;
 800f93e:	46c0      	nop			; (mov r8, r8)
 800f940:	e000      	b.n	800f944 <LoRaMacMlmeRequest+0x280>
            break;
 800f942:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 800f944:	2317      	movs	r3, #23
 800f946:	18fb      	adds	r3, r7, r3
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d011      	beq.n	800f972 <LoRaMacMlmeRequest+0x2ae>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f94e:	f001 f84b 	bl	80109e8 <LoRaMacConfirmQueueGetCnt>
 800f952:	1e03      	subs	r3, r0, #0
 800f954:	d114      	bne.n	800f980 <LoRaMacMlmeRequest+0x2bc>
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800f956:	4a0f      	ldr	r2, [pc, #60]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f958:	238e      	movs	r3, #142	; 0x8e
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	58d3      	ldr	r3, [r2, r3]
 800f95e:	4a11      	ldr	r2, [pc, #68]	; (800f9a4 <LoRaMacMlmeRequest+0x2e0>)
 800f960:	2100      	movs	r1, #0
 800f962:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f964:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <LoRaMacMlmeRequest+0x2d0>)
 800f966:	4a0d      	ldr	r2, [pc, #52]	; (800f99c <LoRaMacMlmeRequest+0x2d8>)
 800f968:	5c99      	ldrb	r1, [r3, r2]
 800f96a:	2004      	movs	r0, #4
 800f96c:	4381      	bics	r1, r0
 800f96e:	5499      	strb	r1, [r3, r2]
 800f970:	e006      	b.n	800f980 <LoRaMacMlmeRequest+0x2bc>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800f972:	2310      	movs	r3, #16
 800f974:	18fb      	adds	r3, r7, r3
 800f976:	0018      	movs	r0, r3
 800f978:	f000 feda 	bl	8010730 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800f97c:	f7fe fba0 	bl	800e0c0 <EventMacNvmCtxChanged>
    }
    return status;
 800f980:	2317      	movs	r3, #23
 800f982:	18fb      	adds	r3, r7, r3
 800f984:	781b      	ldrb	r3, [r3, #0]
}
 800f986:	0018      	movs	r0, r3
 800f988:	46bd      	mov	sp, r7
 800f98a:	b006      	add	sp, #24
 800f98c:	bdb0      	pop	{r4, r5, r7, pc}
 800f98e:	46c0      	nop			; (mov r8, r8)
 800f990:	20000b48 	.word	0x20000b48
 800f994:	20000708 	.word	0x20000708
 800f998:	00000441 	.word	0x00000441
 800f99c:	0000046d 	.word	0x0000046d
 800f9a0:	08021960 	.word	0x08021960
 800f9a4:	00000219 	.word	0x00000219

0800f9a8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800f9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9aa:	b08b      	sub	sp, #44	; 0x2c
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f9b0:	2327      	movs	r3, #39	; 0x27
 800f9b2:	18fb      	adds	r3, r7, r3
 800f9b4:	2202      	movs	r2, #2
 800f9b6:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800f9b8:	2326      	movs	r3, #38	; 0x26
 800f9ba:	18fb      	adds	r3, r7, r3
 800f9bc:	2200      	movs	r2, #0
 800f9be:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800f9c0:	231d      	movs	r3, #29
 800f9c2:	18fb      	adds	r3, r7, r3
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 800f9c8:	231c      	movs	r3, #28
 800f9ca:	18fb      	adds	r3, r7, r3
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d101      	bne.n	800f9da <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f9d6:	2303      	movs	r3, #3
 800f9d8:	e122      	b.n	800fc20 <LoRaMacMcpsRequest+0x278>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f9da:	f7fb fdf3 	bl	800b5c4 <LoRaMacIsBusy>
 800f9de:	0003      	movs	r3, r0
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d101      	bne.n	800f9e8 <LoRaMacMcpsRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e11b      	b.n	800fc20 <LoRaMacMcpsRequest+0x278>
    }

    macHdr.Value = 0;
 800f9e8:	2310      	movs	r3, #16
 800f9ea:	18fb      	adds	r3, r7, r3
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f9f0:	4b8d      	ldr	r3, [pc, #564]	; (800fc28 <LoRaMacMcpsRequest+0x280>)
 800f9f2:	2214      	movs	r2, #20
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	0018      	movs	r0, r3
 800f9f8:	f006 f83c 	bl	8015a74 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9fc:	4b8b      	ldr	r3, [pc, #556]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800f9fe:	4a8c      	ldr	r2, [pc, #560]	; (800fc30 <LoRaMacMcpsRequest+0x288>)
 800fa00:	2101      	movs	r1, #1
 800fa02:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800fa04:	4a89      	ldr	r2, [pc, #548]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fa06:	238e      	movs	r3, #142	; 0x8e
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	58d3      	ldr	r3, [r2, r3]
 800fa0c:	4a89      	ldr	r2, [pc, #548]	; (800fc34 <LoRaMacMcpsRequest+0x28c>)
 800fa0e:	2101      	movs	r1, #1
 800fa10:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d02b      	beq.n	800fa72 <LoRaMacMcpsRequest+0xca>
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d052      	beq.n	800fac4 <LoRaMacMcpsRequest+0x11c>
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d000      	beq.n	800fa24 <LoRaMacMcpsRequest+0x7c>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800fa22:	e06f      	b.n	800fb04 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800fa24:	231c      	movs	r3, #28
 800fa26:	18fb      	adds	r3, r7, r3
 800fa28:	2201      	movs	r2, #1
 800fa2a:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800fa2c:	4a7f      	ldr	r2, [pc, #508]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fa2e:	238e      	movs	r3, #142	; 0x8e
 800fa30:	00db      	lsls	r3, r3, #3
 800fa32:	58d3      	ldr	r3, [r2, r3]
 800fa34:	4a80      	ldr	r2, [pc, #512]	; (800fc38 <LoRaMacMcpsRequest+0x290>)
 800fa36:	2101      	movs	r1, #1
 800fa38:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800fa3a:	2310      	movs	r3, #16
 800fa3c:	18fb      	adds	r3, r7, r3
 800fa3e:	781a      	ldrb	r2, [r3, #0]
 800fa40:	211f      	movs	r1, #31
 800fa42:	400a      	ands	r2, r1
 800fa44:	1c11      	adds	r1, r2, #0
 800fa46:	2240      	movs	r2, #64	; 0x40
 800fa48:	430a      	orrs	r2, r1
 800fa4a:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800fa4c:	2326      	movs	r3, #38	; 0x26
 800fa4e:	18fb      	adds	r3, r7, r3
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	7912      	ldrb	r2, [r2, #4]
 800fa54:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800fa5c:	231e      	movs	r3, #30
 800fa5e:	18fb      	adds	r3, r7, r3
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	8992      	ldrh	r2, [r2, #12]
 800fa64:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800fa66:	231d      	movs	r3, #29
 800fa68:	18fb      	adds	r3, r7, r3
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	7b92      	ldrb	r2, [r2, #14]
 800fa6e:	701a      	strb	r2, [r3, #0]
            break;
 800fa70:	e048      	b.n	800fb04 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800fa72:	231c      	movs	r3, #28
 800fa74:	18fb      	adds	r3, r7, r3
 800fa76:	2201      	movs	r2, #1
 800fa78:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 800fa7a:	4a6c      	ldr	r2, [pc, #432]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fa7c:	238e      	movs	r3, #142	; 0x8e
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	58d3      	ldr	r3, [r2, r3]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	7bd1      	ldrb	r1, [r2, #15]
 800fa86:	4a6c      	ldr	r2, [pc, #432]	; (800fc38 <LoRaMacMcpsRequest+0x290>)
 800fa88:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800fa8a:	2310      	movs	r3, #16
 800fa8c:	18fb      	adds	r3, r7, r3
 800fa8e:	781a      	ldrb	r2, [r3, #0]
 800fa90:	211f      	movs	r1, #31
 800fa92:	400a      	ands	r2, r1
 800fa94:	1c11      	adds	r1, r2, #0
 800fa96:	2280      	movs	r2, #128	; 0x80
 800fa98:	4252      	negs	r2, r2
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800fa9e:	2326      	movs	r3, #38	; 0x26
 800faa0:	18fb      	adds	r3, r7, r3
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	7912      	ldrb	r2, [r2, #4]
 800faa6:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800faae:	231e      	movs	r3, #30
 800fab0:	18fb      	adds	r3, r7, r3
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	8992      	ldrh	r2, [r2, #12]
 800fab6:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800fab8:	231d      	movs	r3, #29
 800faba:	18fb      	adds	r3, r7, r3
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	7b92      	ldrb	r2, [r2, #14]
 800fac0:	701a      	strb	r2, [r3, #0]
            break;
 800fac2:	e01f      	b.n	800fb04 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800fac4:	231c      	movs	r3, #28
 800fac6:	18fb      	adds	r3, r7, r3
 800fac8:	2201      	movs	r2, #1
 800faca:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800facc:	4a57      	ldr	r2, [pc, #348]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800face:	238e      	movs	r3, #142	; 0x8e
 800fad0:	00db      	lsls	r3, r3, #3
 800fad2:	58d3      	ldr	r3, [r2, r3]
 800fad4:	4a58      	ldr	r2, [pc, #352]	; (800fc38 <LoRaMacMcpsRequest+0x290>)
 800fad6:	2101      	movs	r1, #1
 800fad8:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800fada:	2310      	movs	r3, #16
 800fadc:	18fb      	adds	r3, r7, r3
 800fade:	781a      	ldrb	r2, [r3, #0]
 800fae0:	2120      	movs	r1, #32
 800fae2:	4249      	negs	r1, r1
 800fae4:	430a      	orrs	r2, r1
 800fae6:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800faee:	231e      	movs	r3, #30
 800faf0:	18fb      	adds	r3, r7, r3
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	8912      	ldrh	r2, [r2, #8]
 800faf6:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800faf8:	231d      	movs	r3, #29
 800fafa:	18fb      	adds	r3, r7, r3
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	7a92      	ldrb	r2, [r2, #10]
 800fb00:	701a      	strb	r2, [r3, #0]
            break;
 800fb02:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800fb04:	2118      	movs	r1, #24
 800fb06:	187b      	adds	r3, r7, r1
 800fb08:	2201      	movs	r2, #1
 800fb0a:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fb0c:	4a47      	ldr	r2, [pc, #284]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fb0e:	238e      	movs	r3, #142	; 0x8e
 800fb10:	00db      	lsls	r3, r3, #3
 800fb12:	58d2      	ldr	r2, [r2, r3]
 800fb14:	2380      	movs	r3, #128	; 0x80
 800fb16:	005b      	lsls	r3, r3, #1
 800fb18:	5cd2      	ldrb	r2, [r2, r3]
 800fb1a:	187b      	adds	r3, r7, r1
 800fb1c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fb1e:	4a43      	ldr	r2, [pc, #268]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fb20:	238e      	movs	r3, #142	; 0x8e
 800fb22:	00db      	lsls	r3, r3, #3
 800fb24:	58d3      	ldr	r3, [r2, r3]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	187a      	adds	r2, r7, r1
 800fb2a:	0011      	movs	r1, r2
 800fb2c:	0018      	movs	r0, r3
 800fb2e:	f003 f9a8 	bl	8012e82 <RegionGetPhyParam>
 800fb32:	0003      	movs	r3, r0
 800fb34:	001a      	movs	r2, r3
 800fb36:	2114      	movs	r1, #20
 800fb38:	187b      	adds	r3, r7, r1
 800fb3a:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800fb3c:	187b      	adds	r3, r7, r1
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	b259      	sxtb	r1, r3
 800fb42:	231d      	movs	r3, #29
 800fb44:	18fa      	adds	r2, r7, r3
 800fb46:	18fb      	adds	r3, r7, r3
 800fb48:	1c0c      	adds	r4, r1, #0
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	b258      	sxtb	r0, r3
 800fb4e:	b261      	sxtb	r1, r4
 800fb50:	4288      	cmp	r0, r1
 800fb52:	da00      	bge.n	800fb56 <LoRaMacMcpsRequest+0x1ae>
 800fb54:	1c23      	adds	r3, r4, #0
 800fb56:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 800fb58:	231c      	movs	r3, #28
 800fb5a:	18fb      	adds	r3, r7, r3
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d059      	beq.n	800fc16 <LoRaMacMcpsRequest+0x26e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800fb62:	4a32      	ldr	r2, [pc, #200]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fb64:	238e      	movs	r3, #142	; 0x8e
 800fb66:	00db      	lsls	r3, r3, #3
 800fb68:	58d3      	ldr	r3, [r2, r3]
 800fb6a:	22ca      	movs	r2, #202	; 0xca
 800fb6c:	5c9b      	ldrb	r3, [r3, r2]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	4053      	eors	r3, r2
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d027      	beq.n	800fbc8 <LoRaMacMcpsRequest+0x220>
        {
            verify.DatarateParams.Datarate = datarate;
 800fb78:	210c      	movs	r1, #12
 800fb7a:	187b      	adds	r3, r7, r1
 800fb7c:	221d      	movs	r2, #29
 800fb7e:	18ba      	adds	r2, r7, r2
 800fb80:	7812      	ldrb	r2, [r2, #0]
 800fb82:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fb84:	4a29      	ldr	r2, [pc, #164]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fb86:	238e      	movs	r3, #142	; 0x8e
 800fb88:	00db      	lsls	r3, r3, #3
 800fb8a:	58d2      	ldr	r2, [r2, r3]
 800fb8c:	2380      	movs	r3, #128	; 0x80
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	5cd2      	ldrb	r2, [r2, r3]
 800fb92:	187b      	adds	r3, r7, r1
 800fb94:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800fb96:	4a25      	ldr	r2, [pc, #148]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fb98:	238e      	movs	r3, #142	; 0x8e
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	58d3      	ldr	r3, [r2, r3]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	1879      	adds	r1, r7, r1
 800fba2:	2204      	movs	r2, #4
 800fba4:	0018      	movs	r0, r3
 800fba6:	f003 f9d3 	bl	8012f50 <RegionVerify>
 800fbaa:	1e03      	subs	r3, r0, #0
 800fbac:	d00a      	beq.n	800fbc4 <LoRaMacMcpsRequest+0x21c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800fbae:	4a1f      	ldr	r2, [pc, #124]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fbb0:	238e      	movs	r3, #142	; 0x8e
 800fbb2:	00db      	lsls	r3, r3, #3
 800fbb4:	58d3      	ldr	r3, [r2, r3]
 800fbb6:	220c      	movs	r2, #12
 800fbb8:	18ba      	adds	r2, r7, r2
 800fbba:	2100      	movs	r1, #0
 800fbbc:	5651      	ldrsb	r1, [r2, r1]
 800fbbe:	22d5      	movs	r2, #213	; 0xd5
 800fbc0:	5499      	strb	r1, [r3, r2]
 800fbc2:	e001      	b.n	800fbc8 <LoRaMacMcpsRequest+0x220>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800fbc4:	2303      	movs	r3, #3
 800fbc6:	e02b      	b.n	800fc20 <LoRaMacMcpsRequest+0x278>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800fbc8:	2627      	movs	r6, #39	; 0x27
 800fbca:	19bc      	adds	r4, r7, r6
 800fbcc:	231e      	movs	r3, #30
 800fbce:	18fb      	adds	r3, r7, r3
 800fbd0:	881d      	ldrh	r5, [r3, #0]
 800fbd2:	6a3a      	ldr	r2, [r7, #32]
 800fbd4:	2326      	movs	r3, #38	; 0x26
 800fbd6:	18fb      	adds	r3, r7, r3
 800fbd8:	7819      	ldrb	r1, [r3, #0]
 800fbda:	2310      	movs	r3, #16
 800fbdc:	18f8      	adds	r0, r7, r3
 800fbde:	002b      	movs	r3, r5
 800fbe0:	f7fd f812 	bl	800cc08 <Send>
 800fbe4:	0003      	movs	r3, r0
 800fbe6:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 800fbe8:	19bb      	adds	r3, r7, r6
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10b      	bne.n	800fc08 <LoRaMacMcpsRequest+0x260>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	7819      	ldrb	r1, [r3, #0]
 800fbf4:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fbf6:	4a11      	ldr	r2, [pc, #68]	; (800fc3c <LoRaMacMcpsRequest+0x294>)
 800fbf8:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800fbfa:	4b0c      	ldr	r3, [pc, #48]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fbfc:	4a10      	ldr	r2, [pc, #64]	; (800fc40 <LoRaMacMcpsRequest+0x298>)
 800fbfe:	5c99      	ldrb	r1, [r3, r2]
 800fc00:	2001      	movs	r0, #1
 800fc02:	4301      	orrs	r1, r0
 800fc04:	5499      	strb	r1, [r3, r2]
 800fc06:	e006      	b.n	800fc16 <LoRaMacMcpsRequest+0x26e>
        }
        else
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800fc08:	4a08      	ldr	r2, [pc, #32]	; (800fc2c <LoRaMacMcpsRequest+0x284>)
 800fc0a:	238e      	movs	r3, #142	; 0x8e
 800fc0c:	00db      	lsls	r3, r3, #3
 800fc0e:	58d3      	ldr	r3, [r2, r3]
 800fc10:	4a0c      	ldr	r2, [pc, #48]	; (800fc44 <LoRaMacMcpsRequest+0x29c>)
 800fc12:	2100      	movs	r1, #0
 800fc14:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 800fc16:	f7fe fa53 	bl	800e0c0 <EventMacNvmCtxChanged>
    return status;
 800fc1a:	2327      	movs	r3, #39	; 0x27
 800fc1c:	18fb      	adds	r3, r7, r3
 800fc1e:	781b      	ldrb	r3, [r3, #0]
}
 800fc20:	0018      	movs	r0, r3
 800fc22:	46bd      	mov	sp, r7
 800fc24:	b00b      	add	sp, #44	; 0x2c
 800fc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc28:	20000b34 	.word	0x20000b34
 800fc2c:	20000708 	.word	0x20000708
 800fc30:	0000042d 	.word	0x0000042d
 800fc34:	00000217 	.word	0x00000217
 800fc38:	00000216 	.word	0x00000216
 800fc3c:	0000042c 	.word	0x0000042c
 800fc40:	0000046d 	.word	0x0000046d
 800fc44:	00000219 	.word	0x00000219

0800fc48 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	0002      	movs	r2, r0
 800fc50:	1dfb      	adds	r3, r7, #7
 800fc52:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800fc54:	210c      	movs	r1, #12
 800fc56:	187b      	adds	r3, r7, r1
 800fc58:	1dfa      	adds	r2, r7, #7
 800fc5a:	7812      	ldrb	r2, [r2, #0]
 800fc5c:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800fc5e:	4a0c      	ldr	r2, [pc, #48]	; (800fc90 <LoRaMacTestSetDutyCycleOn+0x48>)
 800fc60:	238e      	movs	r3, #142	; 0x8e
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	58d3      	ldr	r3, [r2, r3]
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	1879      	adds	r1, r7, r1
 800fc6a:	220e      	movs	r2, #14
 800fc6c:	0018      	movs	r0, r3
 800fc6e:	f003 f96f 	bl	8012f50 <RegionVerify>
 800fc72:	1e03      	subs	r3, r0, #0
 800fc74:	d008      	beq.n	800fc88 <LoRaMacTestSetDutyCycleOn+0x40>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800fc76:	4a06      	ldr	r2, [pc, #24]	; (800fc90 <LoRaMacTestSetDutyCycleOn+0x48>)
 800fc78:	238e      	movs	r3, #142	; 0x8e
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	58d2      	ldr	r2, [r2, r3]
 800fc7e:	1df9      	adds	r1, r7, #7
 800fc80:	2389      	movs	r3, #137	; 0x89
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	7809      	ldrb	r1, [r1, #0]
 800fc86:	54d1      	strb	r1, [r2, r3]
    }
}
 800fc88:	46c0      	nop			; (mov r8, r8)
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	b004      	add	sp, #16
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	20000708 	.word	0x20000708

0800fc94 <CalcNextV10X>:

#include <drivers/lorawan/mac/region/Region.h>
#include <drivers/lorawan/mac/LoRaMacAdr.h>

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800fc94:	b590      	push	{r4, r7, lr}
 800fc96:	b08b      	sub	sp, #44	; 0x2c
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
 800fca0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800fca2:	2327      	movs	r3, #39	; 0x27
 800fca4:	18fb      	adds	r3, r7, r3
 800fca6:	2200      	movs	r2, #0
 800fca8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 800fcaa:	2326      	movs	r3, #38	; 0x26
 800fcac:	18fb      	adds	r3, r7, r3
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	7c12      	ldrb	r2, [r2, #16]
 800fcb2:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 800fcb4:	2325      	movs	r3, #37	; 0x25
 800fcb6:	18fb      	adds	r3, r7, r3
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	7c52      	ldrb	r2, [r2, #17]
 800fcbc:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	689a      	ldr	r2, [r3, #8]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	795b      	ldrb	r3, [r3, #5]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d100      	bne.n	800fcd0 <CalcNextV10X+0x3c>
 800fcce:	e0a8      	b.n	800fe22 <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800fcd0:	2120      	movs	r1, #32
 800fcd2:	187b      	adds	r3, r7, r1
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	7c9a      	ldrb	r2, [r3, #18]
 800fcdc:	187b      	adds	r3, r7, r1
 800fcde:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	7cdb      	ldrb	r3, [r3, #19]
 800fce4:	187a      	adds	r2, r7, r1
 800fce6:	0011      	movs	r1, r2
 800fce8:	0018      	movs	r0, r3
 800fcea:	f003 f8ca 	bl	8012e82 <RegionGetPhyParam>
 800fcee:	0003      	movs	r3, r0
 800fcf0:	001a      	movs	r2, r3
 800fcf2:	211c      	movs	r1, #28
 800fcf4:	187b      	adds	r3, r7, r1
 800fcf6:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 800fcf8:	187b      	adds	r3, r7, r1
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	2124      	movs	r1, #36	; 0x24
 800fcfe:	187b      	adds	r3, r7, r1
 800fd00:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 800fd02:	2026      	movs	r0, #38	; 0x26
 800fd04:	183a      	adds	r2, r7, r0
 800fd06:	187b      	adds	r3, r7, r1
 800fd08:	1839      	adds	r1, r7, r0
 800fd0a:	780c      	ldrb	r4, [r1, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	b258      	sxtb	r0, r3
 800fd10:	b261      	sxtb	r1, r4
 800fd12:	4288      	cmp	r0, r1
 800fd14:	da00      	bge.n	800fd18 <CalcNextV10X+0x84>
 800fd16:	1c23      	adds	r3, r4, #0
 800fd18:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 800fd1a:	2326      	movs	r3, #38	; 0x26
 800fd1c:	18fa      	adds	r2, r7, r3
 800fd1e:	2324      	movs	r3, #36	; 0x24
 800fd20:	18fb      	adds	r3, r7, r3
 800fd22:	7812      	ldrb	r2, [r2, #0]
 800fd24:	b252      	sxtb	r2, r2
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	b25b      	sxtb	r3, r3
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d107      	bne.n	800fd3e <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	2200      	movs	r2, #0
 800fd32:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800fd34:	2327      	movs	r3, #39	; 0x27
 800fd36:	18fb      	adds	r3, r7, r3
 800fd38:	2200      	movs	r2, #0
 800fd3a:	701a      	strb	r2, [r3, #0]
 800fd3c:	e071      	b.n	800fe22 <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	8992      	ldrh	r2, [r2, #12]
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d319      	bcc.n	800fd7e <CalcNextV10X+0xea>
            {
                adrAckReq = true;
 800fd4a:	2327      	movs	r3, #39	; 0x27
 800fd4c:	18fb      	adds	r3, r7, r3
 800fd4e:	2201      	movs	r2, #1
 800fd50:	701a      	strb	r2, [r3, #0]
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800fd52:	2120      	movs	r1, #32
 800fd54:	187b      	adds	r3, r7, r1
 800fd56:	2207      	movs	r2, #7
 800fd58:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	7cdb      	ldrb	r3, [r3, #19]
 800fd5e:	187a      	adds	r2, r7, r1
 800fd60:	0011      	movs	r1, r2
 800fd62:	0018      	movs	r0, r3
 800fd64:	f003 f88d 	bl	8012e82 <RegionGetPhyParam>
 800fd68:	0003      	movs	r3, r0
 800fd6a:	001a      	movs	r2, r3
 800fd6c:	211c      	movs	r1, #28
 800fd6e:	187b      	adds	r3, r7, r1
 800fd70:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 800fd72:	187b      	adds	r3, r7, r1
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	2325      	movs	r3, #37	; 0x25
 800fd78:	18fb      	adds	r3, r7, r3
 800fd7a:	701a      	strb	r2, [r3, #0]
 800fd7c:	e003      	b.n	800fd86 <CalcNextV10X+0xf2>
            }
            else
            {
                adrAckReq = false;
 800fd7e:	2327      	movs	r3, #39	; 0x27
 800fd80:	18fb      	adds	r3, r7, r3
 800fd82:	2200      	movs	r2, #0
 800fd84:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	8992      	ldrh	r2, [r2, #12]
 800fd8e:	0011      	movs	r1, r2
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	89d2      	ldrh	r2, [r2, #14]
 800fd94:	188a      	adds	r2, r1, r2
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d343      	bcc.n	800fe22 <CalcNextV10X+0x18e>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	689a      	ldr	r2, [r3, #8]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	89db      	ldrh	r3, [r3, #14]
 800fda2:	0019      	movs	r1, r3
 800fda4:	0010      	movs	r0, r2
 800fda6:	f7f0 fa3d 	bl	8000224 <__aeabi_uidivmod>
 800fdaa:	000b      	movs	r3, r1
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d138      	bne.n	800fe22 <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fdb0:	2120      	movs	r1, #32
 800fdb2:	187b      	adds	r3, r7, r1
 800fdb4:	2221      	movs	r2, #33	; 0x21
 800fdb6:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 800fdb8:	187b      	adds	r3, r7, r1
 800fdba:	2426      	movs	r4, #38	; 0x26
 800fdbc:	193a      	adds	r2, r7, r4
 800fdbe:	7812      	ldrb	r2, [r2, #0]
 800fdc0:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	7c9a      	ldrb	r2, [r3, #18]
 800fdc6:	187b      	adds	r3, r7, r1
 800fdc8:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	7cdb      	ldrb	r3, [r3, #19]
 800fdce:	187a      	adds	r2, r7, r1
 800fdd0:	0011      	movs	r1, r2
 800fdd2:	0018      	movs	r0, r3
 800fdd4:	f003 f855 	bl	8012e82 <RegionGetPhyParam>
 800fdd8:	0003      	movs	r3, r0
 800fdda:	001a      	movs	r2, r3
 800fddc:	211c      	movs	r1, #28
 800fdde:	187b      	adds	r3, r7, r1
 800fde0:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 800fde2:	187b      	adds	r3, r7, r1
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	193b      	adds	r3, r7, r4
 800fde8:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 800fdea:	193a      	adds	r2, r7, r4
 800fdec:	2324      	movs	r3, #36	; 0x24
 800fdee:	18fb      	adds	r3, r7, r3
 800fdf0:	7812      	ldrb	r2, [r2, #0]
 800fdf2:	b252      	sxtb	r2, r2
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	b25b      	sxtb	r3, r3
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d112      	bne.n	800fe22 <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800fdfc:	2327      	movs	r3, #39	; 0x27
 800fdfe:	18fb      	adds	r3, r7, r3
 800fe00:	2200      	movs	r2, #0
 800fe02:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	791b      	ldrb	r3, [r3, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00a      	beq.n	800fe22 <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800fe0c:	2114      	movs	r1, #20
 800fe0e:	187b      	adds	r3, r7, r1
 800fe10:	2201      	movs	r2, #1
 800fe12:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	7cdb      	ldrb	r3, [r3, #19]
 800fe18:	187a      	adds	r2, r7, r1
 800fe1a:	0011      	movs	r1, r2
 800fe1c:	0018      	movs	r0, r3
 800fe1e:	f003 f86c 	bl	8012efa <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	2226      	movs	r2, #38	; 0x26
 800fe26:	18ba      	adds	r2, r7, r2
 800fe28:	7812      	ldrb	r2, [r2, #0]
 800fe2a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2225      	movs	r2, #37	; 0x25
 800fe30:	18ba      	adds	r2, r7, r2
 800fe32:	7812      	ldrb	r2, [r2, #0]
 800fe34:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800fe36:	2327      	movs	r3, #39	; 0x27
 800fe38:	18fb      	adds	r3, r7, r3
 800fe3a:	781b      	ldrb	r3, [r3, #0]
}
 800fe3c:	0018      	movs	r0, r3
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	b00b      	add	sp, #44	; 0x2c
 800fe42:	bd90      	pop	{r4, r7, pc}

0800fe44 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
 800fe50:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	789b      	ldrb	r3, [r3, #2]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d107      	bne.n	800fe6a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	68b9      	ldr	r1, [r7, #8]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f7ff ff17 	bl	800fc94 <CalcNextV10X>
 800fe66:	0003      	movs	r3, r0
 800fe68:	e000      	b.n	800fe6c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	0018      	movs	r0, r3
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	b004      	add	sp, #16
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, EventNvmCtxChanged classBNvmCtxChanged )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fe80:	46c0      	nop			; (mov r8, r8)
 800fe82:	46bd      	mov	sp, r7
 800fe84:	b004      	add	sp, #16
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 800fe90:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 800fe92:	0018      	movs	r0, r3
 800fe94:	46bd      	mov	sp, r7
 800fe96:	b002      	add	sp, #8
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]
    return NULL;
 800fea8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800feaa:	0018      	movs	r0, r3
 800feac:	46bd      	mov	sp, r7
 800feae:	b002      	add	sp, #8
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b082      	sub	sp, #8
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	0002      	movs	r2, r0
 800feba:	1dfb      	adds	r3, r7, #7
 800febc:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800febe:	46c0      	nop			; (mov r8, r8)
 800fec0:	46bd      	mov	sp, r7
 800fec2:	b002      	add	sp, #8
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b082      	sub	sp, #8
 800feca:	af00      	add	r7, sp, #0
 800fecc:	0002      	movs	r2, r0
 800fece:	1dfb      	adds	r3, r7, #7
 800fed0:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fed2:	46c0      	nop			; (mov r8, r8)
 800fed4:	46bd      	mov	sp, r7
 800fed6:	b002      	add	sp, #8
 800fed8:	bd80      	pop	{r7, pc}

0800feda <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b082      	sub	sp, #8
 800fede:	af00      	add	r7, sp, #0
 800fee0:	0002      	movs	r2, r0
 800fee2:	1dfb      	adds	r3, r7, #7
 800fee4:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fee6:	46c0      	nop			; (mov r8, r8)
 800fee8:	46bd      	mov	sp, r7
 800feea:	b002      	add	sp, #8
 800feec:	bd80      	pop	{r7, pc}

0800feee <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800fef2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fef4:	0018      	movs	r0, r3
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff02:	46c0      	nop			; (mov r8, r8)
 800ff04:	46bd      	mov	sp, r7
 800ff06:	b002      	add	sp, #8
 800ff08:	bd80      	pop	{r7, pc}

0800ff0a <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b082      	sub	sp, #8
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff12:	46c0      	nop			; (mov r8, r8)
 800ff14:	46bd      	mov	sp, r7
 800ff16:	b002      	add	sp, #8
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff22:	46c0      	nop			; (mov r8, r8)
 800ff24:	46bd      	mov	sp, r7
 800ff26:	b002      	add	sp, #8
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b082      	sub	sp, #8
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	000a      	movs	r2, r1
 800ff34:	1cbb      	adds	r3, r7, #2
 800ff36:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800ff38:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff3a:	0018      	movs	r0, r3
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	b002      	add	sp, #8
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff46:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff48:	0018      	movs	r0, r3
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff52:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff54:	0018      	movs	r0, r3
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff5e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff60:	0018      	movs	r0, r3
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800ff6a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff6c:	0018      	movs	r0, r3
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b082      	sub	sp, #8
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	0002      	movs	r2, r0
 800ff7a:	1dfb      	adds	r3, r7, #7
 800ff7c:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff7e:	46c0      	nop			; (mov r8, r8)
 800ff80:	46bd      	mov	sp, r7
 800ff82:	b002      	add	sp, #8
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff8a:	46c0      	nop			; (mov r8, r8)
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ff94:	46c0      	nop			; (mov r8, r8)
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b082      	sub	sp, #8
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	0002      	movs	r2, r0
 800ffa2:	1dfb      	adds	r3, r7, #7
 800ffa4:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ffa6:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	b002      	add	sp, #8
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ffb8:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffba:	0018      	movs	r0, r3
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	b002      	add	sp, #8
 800ffc0:	bd80      	pop	{r7, pc}

0800ffc2 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b082      	sub	sp, #8
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
        }
    }
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ffca:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffcc:	0018      	movs	r0, r3
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	b002      	add	sp, #8
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffd8:	46c0      	nop			; (mov r8, r8)
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}

0800ffde <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b082      	sub	sp, #8
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	0002      	movs	r2, r0
 800ffe6:	6039      	str	r1, [r7, #0]
 800ffe8:	1dfb      	adds	r3, r7, #7
 800ffea:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800ffec:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800ffee:	0018      	movs	r0, r3
 800fff0:	46bd      	mov	sp, r7
 800fff2:	b002      	add	sp, #8
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	603a      	str	r2, [r7, #0]
 800fffe:	1dbb      	adds	r3, r7, #6
 8010000:	1c02      	adds	r2, r0, #0
 8010002:	801a      	strh	r2, [r3, #0]
 8010004:	1d7b      	adds	r3, r7, #5
 8010006:	1c0a      	adds	r2, r1, #0
 8010008:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801000a:	46c0      	nop			; (mov r8, r8)
 801000c:	46bd      	mov	sp, r7
 801000e:	b002      	add	sp, #8
 8010010:	bd80      	pop	{r7, pc}

08010012 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8010012:	b580      	push	{r7, lr}
 8010014:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8010016:	46c0      	nop			; (mov r8, r8)
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 8010024:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010026:	0018      	movs	r0, r3
 8010028:	46bd      	mov	sp, r7
 801002a:	b002      	add	sp, #8
 801002c:	bd80      	pop	{r7, pc}

0801002e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b082      	sub	sp, #8
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8010036:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8010038:	0018      	movs	r0, r3
 801003a:	46bd      	mov	sp, r7
 801003c:	b002      	add	sp, #8
 801003e:	bd80      	pop	{r7, pc}

08010040 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8010044:	46c0      	nop			; (mov r8, r8)
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 801004a:	b580      	push	{r7, lr}
 801004c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801004e:	46c0      	nop			; (mov r8, r8)
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8010060:	230e      	movs	r3, #14
 8010062:	18fb      	adds	r3, r7, r3
 8010064:	2200      	movs	r2, #0
 8010066:	801a      	strh	r2, [r3, #0]
 8010068:	e00f      	b.n	801008a <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 801006a:	230e      	movs	r3, #14
 801006c:	18fb      	adds	r3, r7, r3
 801006e:	881b      	ldrh	r3, [r3, #0]
 8010070:	68ba      	ldr	r2, [r7, #8]
 8010072:	18d3      	adds	r3, r2, r3
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <isSlotFree+0x2a>
        {
            return false;
 801007a:	2300      	movs	r3, #0
 801007c:	e00b      	b.n	8010096 <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801007e:	210e      	movs	r1, #14
 8010080:	187b      	adds	r3, r7, r1
 8010082:	881a      	ldrh	r2, [r3, #0]
 8010084:	187b      	adds	r3, r7, r1
 8010086:	3201      	adds	r2, #1
 8010088:	801a      	strh	r2, [r3, #0]
 801008a:	230e      	movs	r3, #14
 801008c:	18fb      	adds	r3, r7, r3
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	2b0f      	cmp	r3, #15
 8010092:	d9ea      	bls.n	801006a <isSlotFree+0x16>
        }
    }
    return true;
 8010094:	2301      	movs	r3, #1
}
 8010096:	0018      	movs	r0, r3
 8010098:	46bd      	mov	sp, r7
 801009a:	b004      	add	sp, #16
 801009c:	bd80      	pop	{r7, pc}
	...

080100a0 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80100a6:	1dfb      	adds	r3, r7, #7
 80100a8:	2200      	movs	r2, #0
 80100aa:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 80100ac:	e00a      	b.n	80100c4 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 80100ae:	1dfb      	adds	r3, r7, #7
 80100b0:	781a      	ldrb	r2, [r3, #0]
 80100b2:	1dfb      	adds	r3, r7, #7
 80100b4:	3201      	adds	r2, #1
 80100b6:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 80100b8:	1dfb      	adds	r3, r7, #7
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	2b0f      	cmp	r3, #15
 80100be:	d101      	bne.n	80100c4 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 80100c0:	2300      	movs	r3, #0
 80100c2:	e017      	b.n	80100f4 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 80100c4:	1dfb      	adds	r3, r7, #7
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	011b      	lsls	r3, r3, #4
 80100ca:	3308      	adds	r3, #8
 80100cc:	001a      	movs	r2, r3
 80100ce:	4b0b      	ldr	r3, [pc, #44]	; (80100fc <mallocNewMacCommandSlot+0x5c>)
 80100d0:	18d3      	adds	r3, r2, r3
 80100d2:	0018      	movs	r0, r3
 80100d4:	f7ff ffbe 	bl	8010054 <isSlotFree>
 80100d8:	0003      	movs	r3, r0
 80100da:	001a      	movs	r2, r3
 80100dc:	2301      	movs	r3, #1
 80100de:	4053      	eors	r3, r2
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1e3      	bne.n	80100ae <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 80100e6:	1dfb      	adds	r3, r7, #7
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	011b      	lsls	r3, r3, #4
 80100ec:	3308      	adds	r3, #8
 80100ee:	001a      	movs	r2, r3
 80100f0:	4b02      	ldr	r3, [pc, #8]	; (80100fc <mallocNewMacCommandSlot+0x5c>)
 80100f2:	18d3      	adds	r3, r2, r3
}
 80100f4:	0018      	movs	r0, r3
 80100f6:	46bd      	mov	sp, r7
 80100f8:	b002      	add	sp, #8
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	20000db0 	.word	0x20000db0

08010100 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <freeMacCommandSlot+0x12>
    {
        return false;
 801010e:	2300      	movs	r3, #0
 8010110:	e006      	b.n	8010120 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2210      	movs	r2, #16
 8010116:	2100      	movs	r1, #0
 8010118:	0018      	movs	r0, r3
 801011a:	f005 fcab 	bl	8015a74 <memset1>

    return true;
 801011e:	2301      	movs	r3, #1
}
 8010120:	0018      	movs	r0, r3
 8010122:	46bd      	mov	sp, r7
 8010124:	b002      	add	sp, #8
 8010126:	bd80      	pop	{r7, pc}

08010128 <linkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool linkedListInit( MacCommandsList_t* list )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <linkedListInit+0x12>
    {
        return false;
 8010136:	2300      	movs	r3, #0
 8010138:	e006      	b.n	8010148 <linkedListInit+0x20>
    }

    list->First = 0;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	605a      	str	r2, [r3, #4]

    return true;
 8010146:	2301      	movs	r3, #1
}
 8010148:	0018      	movs	r0, r3
 801014a:	46bd      	mov	sp, r7
 801014c:	b002      	add	sp, #8
 801014e:	bd80      	pop	{r7, pc}

08010150 <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d104      	bne.n	801016a <linkedListAdd+0x1a>
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <linkedListAdd+0x1a>
    {
        return false;
 8010166:	2300      	movs	r3, #0
 8010168:	e015      	b.n	8010196 <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d102      	bne.n	8010178 <linkedListAdd+0x28>
    {
        list->First = element;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d003      	beq.n	8010188 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	683a      	ldr	r2, [r7, #0]
 8010186:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2200      	movs	r2, #0
 801018c:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	683a      	ldr	r2, [r7, #0]
 8010192:	605a      	str	r2, [r3, #4]

    return true;
 8010194:	2301      	movs	r3, #1
}
 8010196:	0018      	movs	r0, r3
 8010198:	46bd      	mov	sp, r7
 801019a:	b002      	add	sp, #8
 801019c:	bd80      	pop	{r7, pc}

0801019e <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b084      	sub	sp, #16
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d104      	bne.n	80101b8 <linkedListGetPrevious+0x1a>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d101      	bne.n	80101b8 <linkedListGetPrevious+0x1a>
    {
        return NULL;
 80101b4:	2300      	movs	r3, #0
 80101b6:	e016      	b.n	80101e6 <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d00c      	beq.n	80101e0 <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 80101c6:	e002      	b.n	80101ce <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d007      	beq.n	80101e4 <linkedListGetPrevious+0x46>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d1f4      	bne.n	80101c8 <linkedListGetPrevious+0x2a>
 80101de:	e001      	b.n	80101e4 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80101e0:	2300      	movs	r3, #0
 80101e2:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80101e4:	68fb      	ldr	r3, [r7, #12]
}
 80101e6:	0018      	movs	r0, r3
 80101e8:	46bd      	mov	sp, r7
 80101ea:	b004      	add	sp, #16
 80101ec:	bd80      	pop	{r7, pc}

080101ee <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b084      	sub	sp, #16
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
 80101f6:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d104      	bne.n	8010208 <linkedListRemove+0x1a>
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d101      	bne.n	8010208 <linkedListRemove+0x1a>
    {
        return false;
 8010204:	2300      	movs	r3, #0
 8010206:	e023      	b.n	8010250 <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	0011      	movs	r1, r2
 801020e:	0018      	movs	r0, r3
 8010210:	f7ff ffc5 	bl	801019e <linkedListGetPrevious>
 8010214:	0003      	movs	r3, r0
 8010216:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	683a      	ldr	r2, [r7, #0]
 801021e:	429a      	cmp	r2, r3
 8010220:	d103      	bne.n	801022a <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	429a      	cmp	r2, r3
 8010232:	d102      	bne.n	801023a <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d003      	beq.n	8010248 <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2200      	movs	r2, #0
 801024c:	601a      	str	r2, [r3, #0]

    return true;
 801024e:	2301      	movs	r3, #1
}
 8010250:	0018      	movs	r0, r3
 8010252:	46bd      	mov	sp, r7
 8010254:	b004      	add	sp, #16
 8010256:	bd80      	pop	{r7, pc}

08010258 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	0002      	movs	r2, r0
 8010260:	1dfb      	adds	r3, r7, #7
 8010262:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8010264:	1dfb      	adds	r3, r7, #7
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b08      	cmp	r3, #8
 801026a:	d003      	beq.n	8010274 <IsSticky+0x1c>
 801026c:	2b0a      	cmp	r3, #10
 801026e:	d001      	beq.n	8010274 <IsSticky+0x1c>
 8010270:	2b05      	cmp	r3, #5
 8010272:	d101      	bne.n	8010278 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 8010274:	2301      	movs	r3, #1
 8010276:	e000      	b.n	801027a <IsSticky+0x22>
        default:
            return false;
 8010278:	2300      	movs	r3, #0
    }
}
 801027a:	0018      	movs	r0, r3
 801027c:	46bd      	mov	sp, r7
 801027e:	b002      	add	sp, #8
 8010280:	bd80      	pop	{r7, pc}
	...

08010284 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8010284:	b580      	push	{r7, lr}
 8010286:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8010288:	4b04      	ldr	r3, [pc, #16]	; (801029c <NvmCtxCallback+0x18>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d002      	beq.n	8010296 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8010290:	4b02      	ldr	r3, [pc, #8]	; (801029c <NvmCtxCallback+0x18>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4798      	blx	r3
    }
}
 8010296:	46c0      	nop			; (mov r8, r8)
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20000dac 	.word	0x20000dac

080102a0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
 80102a8:	4b08      	ldr	r3, [pc, #32]	; (80102cc <LoRaMacCommandsInit+0x2c>)
 80102aa:	22fc      	movs	r2, #252	; 0xfc
 80102ac:	2100      	movs	r1, #0
 80102ae:	0018      	movs	r0, r3
 80102b0:	f005 fbe0 	bl	8015a74 <memset1>

    linkedListInit( &NvmCtx.MacCommandList );
 80102b4:	4b05      	ldr	r3, [pc, #20]	; (80102cc <LoRaMacCommandsInit+0x2c>)
 80102b6:	0018      	movs	r0, r3
 80102b8:	f7ff ff36 	bl	8010128 <linkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80102bc:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <LoRaMacCommandsInit+0x30>)
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	0018      	movs	r0, r3
 80102c6:	46bd      	mov	sp, r7
 80102c8:	b002      	add	sp, #8
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	20000db0 	.word	0x20000db0
 80102d0:	20000dac 	.word	0x20000dac

080102d4 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d007      	beq.n	80102f2 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
 80102e2:	6879      	ldr	r1, [r7, #4]
 80102e4:	4b05      	ldr	r3, [pc, #20]	; (80102fc <LoRaMacCommandsRestoreNvmCtx+0x28>)
 80102e6:	22fc      	movs	r2, #252	; 0xfc
 80102e8:	0018      	movs	r0, r3
 80102ea:	f005 fb87 	bl	80159fc <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 80102ee:	2300      	movs	r3, #0
 80102f0:	e000      	b.n	80102f4 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80102f2:	2301      	movs	r3, #1
    }
}
 80102f4:	0018      	movs	r0, r3
 80102f6:	46bd      	mov	sp, r7
 80102f8:	b002      	add	sp, #8
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	20000db0 	.word	0x20000db0

08010300 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	22fc      	movs	r2, #252	; 0xfc
 801030c:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 801030e:	4b02      	ldr	r3, [pc, #8]	; (8010318 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8010310:	0018      	movs	r0, r3
 8010312:	46bd      	mov	sp, r7
 8010314:	b002      	add	sp, #8
 8010316:	bd80      	pop	{r7, pc}
 8010318:	20000db0 	.word	0x20000db0

0801031c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 801031c:	b590      	push	{r4, r7, lr}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	60b9      	str	r1, [r7, #8]
 8010324:	607a      	str	r2, [r7, #4]
 8010326:	230f      	movs	r3, #15
 8010328:	18fb      	adds	r3, r7, r3
 801032a:	1c02      	adds	r2, r0, #0
 801032c:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010334:	2301      	movs	r3, #1
 8010336:	e03c      	b.n	80103b2 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 8010338:	f7ff feb2 	bl	80100a0 <mallocNewMacCommandSlot>
 801033c:	0003      	movs	r3, r0
 801033e:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8010346:	2302      	movs	r3, #2
 8010348:	e033      	b.n	80103b2 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 801034a:	697a      	ldr	r2, [r7, #20]
 801034c:	4b1b      	ldr	r3, [pc, #108]	; (80103bc <LoRaMacCommandsAddCmd+0xa0>)
 801034e:	0011      	movs	r1, r2
 8010350:	0018      	movs	r0, r3
 8010352:	f7ff fefd 	bl	8010150 <linkedListAdd>
 8010356:	0003      	movs	r3, r0
 8010358:	001a      	movs	r2, r3
 801035a:	2301      	movs	r3, #1
 801035c:	4053      	eors	r3, r2
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b00      	cmp	r3, #0
 8010362:	d001      	beq.n	8010368 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8010364:	2305      	movs	r3, #5
 8010366:	e024      	b.n	80103b2 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	240f      	movs	r4, #15
 801036c:	193a      	adds	r2, r7, r4
 801036e:	7812      	ldrb	r2, [r2, #0]
 8010370:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	3305      	adds	r3, #5
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	b292      	uxth	r2, r2
 8010380:	68b9      	ldr	r1, [r7, #8]
 8010382:	0018      	movs	r0, r3
 8010384:	f005 fb3a 	bl	80159fc <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8010388:	193b      	adds	r3, r7, r4
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	0018      	movs	r0, r3
 801038e:	f7ff ff63 	bl	8010258 <IsSticky>
 8010392:	0003      	movs	r3, r0
 8010394:	001a      	movs	r2, r3
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801039a:	4b08      	ldr	r3, [pc, #32]	; (80103bc <LoRaMacCommandsAddCmd+0xa0>)
 801039c:	22f8      	movs	r2, #248	; 0xf8
 801039e:	589a      	ldr	r2, [r3, r2]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	18d3      	adds	r3, r2, r3
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	4b05      	ldr	r3, [pc, #20]	; (80103bc <LoRaMacCommandsAddCmd+0xa0>)
 80103a8:	21f8      	movs	r1, #248	; 0xf8
 80103aa:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 80103ac:	f7ff ff6a 	bl	8010284 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	0018      	movs	r0, r3
 80103b4:	46bd      	mov	sp, r7
 80103b6:	b007      	add	sp, #28
 80103b8:	bd90      	pop	{r4, r7, pc}
 80103ba:	46c0      	nop			; (mov r8, r8)
 80103bc:	20000db0 	.word	0x20000db0

080103c0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80103ce:	2301      	movs	r3, #1
 80103d0:	e028      	b.n	8010424 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	4b15      	ldr	r3, [pc, #84]	; (801042c <LoRaMacCommandsRemoveCmd+0x6c>)
 80103d6:	0011      	movs	r1, r2
 80103d8:	0018      	movs	r0, r3
 80103da:	f7ff ff08 	bl	80101ee <linkedListRemove>
 80103de:	0003      	movs	r3, r0
 80103e0:	001a      	movs	r2, r3
 80103e2:	2301      	movs	r3, #1
 80103e4:	4053      	eors	r3, r2
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d001      	beq.n	80103f0 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80103ec:	2303      	movs	r3, #3
 80103ee:	e019      	b.n	8010424 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80103f0:	4b0e      	ldr	r3, [pc, #56]	; (801042c <LoRaMacCommandsRemoveCmd+0x6c>)
 80103f2:	22f8      	movs	r2, #248	; 0xf8
 80103f4:	589a      	ldr	r2, [r3, r2]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	1ad3      	subs	r3, r2, r3
 80103fc:	1e5a      	subs	r2, r3, #1
 80103fe:	4b0b      	ldr	r3, [pc, #44]	; (801042c <LoRaMacCommandsRemoveCmd+0x6c>)
 8010400:	21f8      	movs	r1, #248	; 0xf8
 8010402:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	0018      	movs	r0, r3
 8010408:	f7ff fe7a 	bl	8010100 <freeMacCommandSlot>
 801040c:	0003      	movs	r3, r0
 801040e:	001a      	movs	r2, r3
 8010410:	2301      	movs	r3, #1
 8010412:	4053      	eors	r3, r2
 8010414:	b2db      	uxtb	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 801041a:	2305      	movs	r3, #5
 801041c:	e002      	b.n	8010424 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 801041e:	f7ff ff31 	bl	8010284 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010422:	2300      	movs	r3, #0
}
 8010424:	0018      	movs	r0, r3
 8010426:	46bd      	mov	sp, r7
 8010428:	b002      	add	sp, #8
 801042a:	bd80      	pop	{r7, pc}
 801042c:	20000db0 	.word	0x20000db0

08010430 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8010436:	4b11      	ldr	r3, [pc, #68]	; (801047c <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement )
 801043c:	e013      	b.n	8010466 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	7b1b      	ldrb	r3, [r3, #12]
 8010442:	2201      	movs	r2, #1
 8010444:	4053      	eors	r3, r2
 8010446:	b2db      	uxtb	r3, r3
 8010448:	2b00      	cmp	r3, #0
 801044a:	d009      	beq.n	8010460 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	0018      	movs	r0, r3
 8010456:	f7ff ffb3 	bl	80103c0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	607b      	str	r3, [r7, #4]
 801045e:	e002      	b.n	8010466 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	607b      	str	r3, [r7, #4]
    while( curElement )
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1e8      	bne.n	801043e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 801046c:	f7ff ff0a 	bl	8010284 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8010470:	2300      	movs	r3, #0
}
 8010472:	0018      	movs	r0, r3
 8010474:	46bd      	mov	sp, r7
 8010476:	b002      	add	sp, #8
 8010478:	bd80      	pop	{r7, pc}
 801047a:	46c0      	nop			; (mov r8, r8)
 801047c:	20000db0 	.word	0x20000db0

08010480 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8010486:	4b1a      	ldr	r3, [pc, #104]	; (80104f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 801048c:	e026      	b.n	80104dc <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	7b1b      	ldrb	r3, [r3, #12]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d01d      	beq.n	80104d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 801049c:	230b      	movs	r3, #11
 801049e:	18fb      	adds	r3, r7, r3
 80104a0:	2200      	movs	r2, #0
 80104a2:	701a      	strb	r2, [r3, #0]
 80104a4:	e013      	b.n	80104ce <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	791a      	ldrb	r2, [r3, #4]
 80104aa:	230b      	movs	r3, #11
 80104ac:	18fb      	adds	r3, r7, r3
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	4910      	ldr	r1, [pc, #64]	; (80104f4 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 80104b2:	5ccb      	ldrb	r3, [r1, r3]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d104      	bne.n	80104c2 <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	0018      	movs	r0, r3
 80104bc:	f7ff ff80 	bl	80103c0 <LoRaMacCommandsRemoveCmd>
                    break;
 80104c0:	e00a      	b.n	80104d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 80104c2:	210b      	movs	r1, #11
 80104c4:	187b      	adds	r3, r7, r1
 80104c6:	781a      	ldrb	r2, [r3, #0]
 80104c8:	187b      	adds	r3, r7, r1
 80104ca:	3201      	adds	r2, #1
 80104cc:	701a      	strb	r2, [r3, #0]
 80104ce:	230b      	movs	r3, #11
 80104d0:	18fb      	adds	r3, r7, r3
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d9e6      	bls.n	80104a6 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1d5      	bne.n	801048e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80104e2:	f7ff fecf 	bl	8010284 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	0018      	movs	r0, r3
 80104ea:	46bd      	mov	sp, r7
 80104ec:	b004      	add	sp, #16
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	20000db0 	.word	0x20000db0
 80104f4:	08021998 	.word	0x08021998

080104f8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d101      	bne.n	801050a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8010506:	2301      	movs	r3, #1
 8010508:	e005      	b.n	8010516 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 801050a:	4b05      	ldr	r3, [pc, #20]	; (8010520 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801050c:	22f8      	movs	r2, #248	; 0xf8
 801050e:	589a      	ldr	r2, [r3, r2]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8010514:	2300      	movs	r3, #0

}
 8010516:	0018      	movs	r0, r3
 8010518:	46bd      	mov	sp, r7
 801051a:	b002      	add	sp, #8
 801051c:	bd80      	pop	{r7, pc}
 801051e:	46c0      	nop			; (mov r8, r8)
 8010520:	20000db0 	.word	0x20000db0

08010524 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <LoRaMacCommandsSerializeCmds+0x18>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d101      	bne.n	8010540 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801053c:	2301      	movs	r3, #1
 801053e:	e03a      	b.n	80105b6 <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8010540:	4b1f      	ldr	r3, [pc, #124]	; (80105c0 <LoRaMacCommandsSerializeCmds+0x9c>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 8010546:	2313      	movs	r3, #19
 8010548:	18fb      	adds	r3, r7, r3
 801054a:	2200      	movs	r2, #0
 801054c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 801054e:	e02c      	b.n	80105aa <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8010550:	2313      	movs	r3, #19
 8010552:	18fb      	adds	r3, r7, r3
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	1ad2      	subs	r2, r2, r3
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	3301      	adds	r3, #1
 8010560:	429a      	cmp	r2, r3
 8010562:	d326      	bcc.n	80105b2 <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 8010564:	2413      	movs	r4, #19
 8010566:	193b      	adds	r3, r7, r4
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	193a      	adds	r2, r7, r4
 801056c:	1c59      	adds	r1, r3, #1
 801056e:	7011      	strb	r1, [r2, #0]
 8010570:	001a      	movs	r2, r3
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	189b      	adds	r3, r3, r2
 8010576:	697a      	ldr	r2, [r7, #20]
 8010578:	7912      	ldrb	r2, [r2, #4]
 801057a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801057c:	193b      	adds	r3, r7, r4
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	18d0      	adds	r0, r2, r3
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	1d59      	adds	r1, r3, #5
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	b29b      	uxth	r3, r3
 801058e:	001a      	movs	r2, r3
 8010590:	f005 fa34 	bl	80159fc <memcpy1>
            itr = itr + curElement->PayloadSize;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	b2d9      	uxtb	r1, r3
 801059a:	193b      	adds	r3, r7, r4
 801059c:	193a      	adds	r2, r7, r4
 801059e:	7812      	ldrb	r2, [r2, #0]
 80105a0:	188a      	adds	r2, r1, r2
 80105a2:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	617b      	str	r3, [r7, #20]
    while( curElement )
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1cf      	bne.n	8010550 <LoRaMacCommandsSerializeCmds+0x2c>
 80105b0:	e000      	b.n	80105b4 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 80105b2:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	0018      	movs	r0, r3
 80105b8:	46bd      	mov	sp, r7
 80105ba:	b007      	add	sp, #28
 80105bc:	bd90      	pop	{r4, r7, pc}
 80105be:	46c0      	nop			; (mov r8, r8)
 80105c0:	20000db0 	.word	0x20000db0

080105c4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d101      	bne.n	80105d6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80105d2:	2301      	movs	r3, #1
 80105d4:	e016      	b.n	8010604 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80105d6:	4b0d      	ldr	r3, [pc, #52]	; (801060c <LoRaMacCommandsStickyCmdsPending+0x48>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 80105e2:	e00b      	b.n	80105fc <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	7b1b      	ldrb	r3, [r3, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d004      	beq.n	80105f6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2201      	movs	r2, #1
 80105f0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80105f2:	2300      	movs	r3, #0
 80105f4:	e006      	b.n	8010604 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60fb      	str	r3, [r7, #12]
    while( curElement )
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1f0      	bne.n	80105e4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010602:	2300      	movs	r3, #0
}
 8010604:	0018      	movs	r0, r3
 8010606:	46bd      	mov	sp, r7
 8010608:	b004      	add	sp, #16
 801060a:	bd80      	pop	{r7, pc}
 801060c:	20000db0 	.word	0x20000db0

08010610 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8010618:	4b08      	ldr	r3, [pc, #32]	; (801063c <IncreaseBufferPointer+0x2c>)
 801061a:	691b      	ldr	r3, [r3, #16]
 801061c:	3310      	adds	r3, #16
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	429a      	cmp	r2, r3
 8010622:	d103      	bne.n	801062c <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8010624:	4b05      	ldr	r3, [pc, #20]	; (801063c <IncreaseBufferPointer+0x2c>)
 8010626:	691b      	ldr	r3, [r3, #16]
 8010628:	607b      	str	r3, [r7, #4]
 801062a:	e002      	b.n	8010632 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	3304      	adds	r3, #4
 8010630:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010632:	687b      	ldr	r3, [r7, #4]
}
 8010634:	0018      	movs	r0, r3
 8010636:	46bd      	mov	sp, r7
 8010638:	b002      	add	sp, #8
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20000ec4 	.word	0x20000ec4

08010640 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	60b9      	str	r1, [r7, #8]
 8010648:	607a      	str	r2, [r7, #4]
 801064a:	230f      	movs	r3, #15
 801064c:	18fb      	adds	r3, r7, r3
 801064e:	1c02      	adds	r2, r0, #0
 8010650:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 8010656:	e00e      	b.n	8010676 <GetElement+0x36>
    {
        if( element->Request == request )
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	220f      	movs	r2, #15
 801065e:	18ba      	adds	r2, r7, r2
 8010660:	7812      	ldrb	r2, [r2, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d101      	bne.n	801066a <GetElement+0x2a>
        {
            // We have found the element
            return element;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	e00a      	b.n	8010680 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	0018      	movs	r0, r3
 801066e:	f7ff ffcf 	bl	8010610 <IncreaseBufferPointer>
 8010672:	0003      	movs	r3, r0
 8010674:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	429a      	cmp	r2, r3
 801067c:	d1ec      	bne.n	8010658 <GetElement+0x18>
        }
    }
    return NULL;
 801067e:	2300      	movs	r3, #0
}
 8010680:	0018      	movs	r0, r3
 8010682:	46bd      	mov	sp, r7
 8010684:	b006      	add	sp, #24
 8010686:	bd80      	pop	{r7, pc}

08010688 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8010692:	4b13      	ldr	r3, [pc, #76]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8010698:	4b11      	ldr	r3, [pc, #68]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 801069a:	4a12      	ldr	r2, [pc, #72]	; (80106e4 <LoRaMacConfirmQueueInit+0x5c>)
 801069c:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801069e:	4b10      	ldr	r3, [pc, #64]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106a0:	691b      	ldr	r3, [r3, #16]
 80106a2:	2200      	movs	r2, #0
 80106a4:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80106a6:	4b0e      	ldr	r3, [pc, #56]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106a8:	691b      	ldr	r3, [r3, #16]
 80106aa:	001a      	movs	r2, r3
 80106ac:	4b0c      	ldr	r3, [pc, #48]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106ae:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80106b0:	4b0b      	ldr	r3, [pc, #44]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	001a      	movs	r2, r3
 80106b6:	4b0a      	ldr	r3, [pc, #40]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106b8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80106ba:	4b09      	ldr	r3, [pc, #36]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	2214      	movs	r2, #20
 80106c0:	21ff      	movs	r1, #255	; 0xff
 80106c2:	0018      	movs	r0, r3
 80106c4:	f005 f9d6 	bl	8015a74 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106c8:	4b05      	ldr	r3, [pc, #20]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	2201      	movs	r2, #1
 80106ce:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
 80106d0:	4b03      	ldr	r3, [pc, #12]	; (80106e0 <LoRaMacConfirmQueueInit+0x58>)
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	60da      	str	r2, [r3, #12]
}
 80106d6:	46c0      	nop			; (mov r8, r8)
 80106d8:	46bd      	mov	sp, r7
 80106da:	b002      	add	sp, #8
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	46c0      	nop			; (mov r8, r8)
 80106e0:	20000ec4 	.word	0x20000ec4
 80106e4:	20000eac 	.word	0x20000eac

080106e8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d007      	beq.n	8010706 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80106f6:	6879      	ldr	r1, [r7, #4]
 80106f8:	4b05      	ldr	r3, [pc, #20]	; (8010710 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80106fa:	2216      	movs	r2, #22
 80106fc:	0018      	movs	r0, r3
 80106fe:	f005 f97d 	bl	80159fc <memcpy1>
        return true;
 8010702:	2301      	movs	r3, #1
 8010704:	e000      	b.n	8010708 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8010706:	2300      	movs	r3, #0
    }
}
 8010708:	0018      	movs	r0, r3
 801070a:	46bd      	mov	sp, r7
 801070c:	b002      	add	sp, #8
 801070e:	bd80      	pop	{r7, pc}
 8010710:	20000eac 	.word	0x20000eac

08010714 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2216      	movs	r2, #22
 8010720:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8010722:	4b02      	ldr	r3, [pc, #8]	; (801072c <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8010724:	0018      	movs	r0, r3
 8010726:	46bd      	mov	sp, r7
 8010728:	b002      	add	sp, #8
 801072a:	bd80      	pop	{r7, pc}
 801072c:	20000eac 	.word	0x20000eac

08010730 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010738:	4b16      	ldr	r3, [pc, #88]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 801073a:	691b      	ldr	r3, [r3, #16]
 801073c:	7d1b      	ldrb	r3, [r3, #20]
 801073e:	2b04      	cmp	r3, #4
 8010740:	d901      	bls.n	8010746 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 8010742:	2300      	movs	r3, #0
 8010744:	e021      	b.n	801078a <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8010746:	4b13      	ldr	r3, [pc, #76]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	7812      	ldrb	r2, [r2, #0]
 801074e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010750:	4b10      	ldr	r3, [pc, #64]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	7852      	ldrb	r2, [r2, #1]
 8010758:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801075a:	4b0e      	ldr	r3, [pc, #56]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	78d2      	ldrb	r2, [r2, #3]
 8010762:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8010764:	4b0b      	ldr	r3, [pc, #44]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	2200      	movs	r2, #0
 801076a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	7d1a      	ldrb	r2, [r3, #20]
 8010772:	3201      	adds	r2, #1
 8010774:	b2d2      	uxtb	r2, r2
 8010776:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8010778:	4b06      	ldr	r3, [pc, #24]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	0018      	movs	r0, r3
 801077e:	f7ff ff47 	bl	8010610 <IncreaseBufferPointer>
 8010782:	0002      	movs	r2, r0
 8010784:	4b03      	ldr	r3, [pc, #12]	; (8010794 <LoRaMacConfirmQueueAdd+0x64>)
 8010786:	609a      	str	r2, [r3, #8]

    return true;
 8010788:	2301      	movs	r3, #1
}
 801078a:	0018      	movs	r0, r3
 801078c:	46bd      	mov	sp, r7
 801078e:	b002      	add	sp, #8
 8010790:	bd80      	pop	{r7, pc}
 8010792:	46c0      	nop			; (mov r8, r8)
 8010794:	20000ec4 	.word	0x20000ec4

08010798 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 801079c:	4b0c      	ldr	r3, [pc, #48]	; (80107d0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 801079e:	691b      	ldr	r3, [r3, #16]
 80107a0:	7d1b      	ldrb	r3, [r3, #20]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d101      	bne.n	80107aa <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 80107a6:	2300      	movs	r3, #0
 80107a8:	e00e      	b.n	80107c8 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 80107aa:	4b09      	ldr	r3, [pc, #36]	; (80107d0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80107ac:	691b      	ldr	r3, [r3, #16]
 80107ae:	7d1a      	ldrb	r2, [r3, #20]
 80107b0:	3a01      	subs	r2, #1
 80107b2:	b2d2      	uxtb	r2, r2
 80107b4:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80107b6:	4b06      	ldr	r3, [pc, #24]	; (80107d0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	0018      	movs	r0, r3
 80107bc:	f7ff ff28 	bl	8010610 <IncreaseBufferPointer>
 80107c0:	0002      	movs	r2, r0
 80107c2:	4b03      	ldr	r3, [pc, #12]	; (80107d0 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80107c4:	605a      	str	r2, [r3, #4]

    return true;
 80107c6:	2301      	movs	r3, #1
}
 80107c8:	0018      	movs	r0, r3
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	46c0      	nop			; (mov r8, r8)
 80107d0:	20000ec4 	.word	0x20000ec4

080107d4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	0002      	movs	r2, r0
 80107dc:	1dfb      	adds	r3, r7, #7
 80107de:	701a      	strb	r2, [r3, #0]
 80107e0:	1dbb      	adds	r3, r7, #6
 80107e2:	1c0a      	adds	r2, r1, #0
 80107e4:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80107ea:	4b0f      	ldr	r3, [pc, #60]	; (8010828 <LoRaMacConfirmQueueSetStatus+0x54>)
 80107ec:	691b      	ldr	r3, [r3, #16]
 80107ee:	7d1b      	ldrb	r3, [r3, #20]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d014      	beq.n	801081e <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80107f4:	4b0c      	ldr	r3, [pc, #48]	; (8010828 <LoRaMacConfirmQueueSetStatus+0x54>)
 80107f6:	6859      	ldr	r1, [r3, #4]
 80107f8:	4b0b      	ldr	r3, [pc, #44]	; (8010828 <LoRaMacConfirmQueueSetStatus+0x54>)
 80107fa:	689a      	ldr	r2, [r3, #8]
 80107fc:	1dbb      	adds	r3, r7, #6
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	0018      	movs	r0, r3
 8010802:	f7ff ff1d 	bl	8010640 <GetElement>
 8010806:	0003      	movs	r3, r0
 8010808:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d006      	beq.n	801081e <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	1dfa      	adds	r2, r7, #7
 8010814:	7812      	ldrb	r2, [r2, #0]
 8010816:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2201      	movs	r2, #1
 801081c:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801081e:	46c0      	nop			; (mov r8, r8)
 8010820:	46bd      	mov	sp, r7
 8010822:	b004      	add	sp, #16
 8010824:	bd80      	pop	{r7, pc}
 8010826:	46c0      	nop			; (mov r8, r8)
 8010828:	20000ec4 	.word	0x20000ec4

0801082c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	0002      	movs	r2, r0
 8010834:	1dfb      	adds	r3, r7, #7
 8010836:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8010838:	2300      	movs	r3, #0
 801083a:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 801083c:	4b0d      	ldr	r3, [pc, #52]	; (8010874 <LoRaMacConfirmQueueGetStatus+0x48>)
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	7d1b      	ldrb	r3, [r3, #20]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d010      	beq.n	8010868 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010846:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <LoRaMacConfirmQueueGetStatus+0x48>)
 8010848:	6859      	ldr	r1, [r3, #4]
 801084a:	4b0a      	ldr	r3, [pc, #40]	; (8010874 <LoRaMacConfirmQueueGetStatus+0x48>)
 801084c:	689a      	ldr	r2, [r3, #8]
 801084e:	1dfb      	adds	r3, r7, #7
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	0018      	movs	r0, r3
 8010854:	f7ff fef4 	bl	8010640 <GetElement>
 8010858:	0003      	movs	r3, r0
 801085a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d002      	beq.n	8010868 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	785b      	ldrb	r3, [r3, #1]
 8010866:	e000      	b.n	801086a <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010868:	2301      	movs	r3, #1
}
 801086a:	0018      	movs	r0, r3
 801086c:	46bd      	mov	sp, r7
 801086e:	b004      	add	sp, #16
 8010870:	bd80      	pop	{r7, pc}
 8010872:	46c0      	nop			; (mov r8, r8)
 8010874:	20000ec4 	.word	0x20000ec4

08010878 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	0002      	movs	r2, r0
 8010880:	1dfb      	adds	r3, r7, #7
 8010882:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010884:	4b14      	ldr	r3, [pc, #80]	; (80108d8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801088a:	4b13      	ldr	r3, [pc, #76]	; (80108d8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 801088c:	691b      	ldr	r3, [r3, #16]
 801088e:	1dfa      	adds	r2, r7, #7
 8010890:	7812      	ldrb	r2, [r2, #0]
 8010892:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010894:	4b10      	ldr	r3, [pc, #64]	; (80108d8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8010896:	691b      	ldr	r3, [r3, #16]
 8010898:	7d1b      	ldrb	r3, [r3, #20]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d018      	beq.n	80108d0 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	1dfa      	adds	r2, r7, #7
 80108a2:	7812      	ldrb	r2, [r2, #0]
 80108a4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	78db      	ldrb	r3, [r3, #3]
 80108aa:	2201      	movs	r2, #1
 80108ac:	4053      	eors	r3, r2
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d002      	beq.n	80108ba <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2201      	movs	r2, #1
 80108b8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	0018      	movs	r0, r3
 80108be:	f7ff fea7 	bl	8010610 <IncreaseBufferPointer>
 80108c2:	0003      	movs	r3, r0
 80108c4:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80108c6:	4b04      	ldr	r3, [pc, #16]	; (80108d8 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80108c8:	689b      	ldr	r3, [r3, #8]
 80108ca:	68fa      	ldr	r2, [r7, #12]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d1e6      	bne.n	801089e <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 80108d0:	46c0      	nop			; (mov r8, r8)
 80108d2:	46bd      	mov	sp, r7
 80108d4:	b004      	add	sp, #16
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	20000ec4 	.word	0x20000ec4

080108dc <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 80108e0:	4b02      	ldr	r3, [pc, #8]	; (80108ec <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	7d5b      	ldrb	r3, [r3, #21]
}
 80108e6:	0018      	movs	r0, r3
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	20000ec4 	.word	0x20000ec4

080108f0 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	0002      	movs	r2, r0
 80108f8:	1dfb      	adds	r3, r7, #7
 80108fa:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80108fc:	4b08      	ldr	r3, [pc, #32]	; (8010920 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80108fe:	6859      	ldr	r1, [r3, #4]
 8010900:	4b07      	ldr	r3, [pc, #28]	; (8010920 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010902:	689a      	ldr	r2, [r3, #8]
 8010904:	1dfb      	adds	r3, r7, #7
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	0018      	movs	r0, r3
 801090a:	f7ff fe99 	bl	8010640 <GetElement>
 801090e:	1e03      	subs	r3, r0, #0
 8010910:	d001      	beq.n	8010916 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8010912:	2301      	movs	r3, #1
 8010914:	e000      	b.n	8010918 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8010916:	2300      	movs	r3, #0
}
 8010918:	0018      	movs	r0, r3
 801091a:	46bd      	mov	sp, r7
 801091c:	b002      	add	sp, #8
 801091e:	bd80      	pop	{r7, pc}
 8010920:	20000ec4 	.word	0x20000ec4

08010924 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 801092c:	4b2d      	ldr	r3, [pc, #180]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801092e:	691a      	ldr	r2, [r3, #16]
 8010930:	230e      	movs	r3, #14
 8010932:	18fb      	adds	r3, r7, r3
 8010934:	7d12      	ldrb	r2, [r2, #20]
 8010936:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8010938:	230d      	movs	r3, #13
 801093a:	18fb      	adds	r3, r7, r3
 801093c:	2200      	movs	r2, #0
 801093e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8010940:	230f      	movs	r3, #15
 8010942:	18fb      	adds	r3, r7, r3
 8010944:	2200      	movs	r2, #0
 8010946:	701a      	strb	r2, [r3, #0]
 8010948:	e03f      	b.n	80109ca <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801094a:	4b26      	ldr	r3, [pc, #152]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	781a      	ldrb	r2, [r3, #0]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8010954:	4b23      	ldr	r3, [pc, #140]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	785a      	ldrb	r2, [r3, #1]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801095e:	4b21      	ldr	r3, [pc, #132]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	210d      	movs	r1, #13
 8010964:	187b      	adds	r3, r7, r1
 8010966:	7892      	ldrb	r2, [r2, #2]
 8010968:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801096a:	187b      	adds	r3, r7, r1
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d006      	beq.n	8010980 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010972:	4b1c      	ldr	r3, [pc, #112]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	0010      	movs	r0, r2
 801097c:	4798      	blx	r3
 801097e:	e00f      	b.n	80109a0 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8010980:	4b18      	ldr	r3, [pc, #96]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	781a      	ldrb	r2, [r3, #0]
 8010986:	2108      	movs	r1, #8
 8010988:	187b      	adds	r3, r7, r1
 801098a:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801098c:	4b15      	ldr	r3, [pc, #84]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	785a      	ldrb	r2, [r3, #1]
 8010992:	187b      	adds	r3, r7, r1
 8010994:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8010996:	4b13      	ldr	r3, [pc, #76]	; (80109e4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	78da      	ldrb	r2, [r3, #3]
 801099c:	187b      	adds	r3, r7, r1
 801099e:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80109a0:	f7ff fefa 	bl	8010798 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80109a4:	230d      	movs	r3, #13
 80109a6:	18fb      	adds	r3, r7, r3
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2201      	movs	r2, #1
 80109ac:	4053      	eors	r3, r2
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d004      	beq.n	80109be <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80109b4:	2308      	movs	r3, #8
 80109b6:	18fb      	adds	r3, r7, r3
 80109b8:	0018      	movs	r0, r3
 80109ba:	f7ff feb9 	bl	8010730 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80109be:	210f      	movs	r1, #15
 80109c0:	187b      	adds	r3, r7, r1
 80109c2:	781a      	ldrb	r2, [r3, #0]
 80109c4:	187b      	adds	r3, r7, r1
 80109c6:	3201      	adds	r2, #1
 80109c8:	701a      	strb	r2, [r3, #0]
 80109ca:	230f      	movs	r3, #15
 80109cc:	18fa      	adds	r2, r7, r3
 80109ce:	230e      	movs	r3, #14
 80109d0:	18fb      	adds	r3, r7, r3
 80109d2:	7812      	ldrb	r2, [r2, #0]
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d3b7      	bcc.n	801094a <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80109da:	46c0      	nop			; (mov r8, r8)
 80109dc:	46bd      	mov	sp, r7
 80109de:	b004      	add	sp, #16
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	46c0      	nop			; (mov r8, r8)
 80109e4:	20000ec4 	.word	0x20000ec4

080109e8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80109ec:	4b02      	ldr	r3, [pc, #8]	; (80109f8 <LoRaMacConfirmQueueGetCnt+0x10>)
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	7d1b      	ldrb	r3, [r3, #20]
}
 80109f2:	0018      	movs	r0, r3
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	20000ec4 	.word	0x20000ec4

080109fc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <LoRaMacConfirmQueueIsFull+0x1c>)
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	7d1b      	ldrb	r3, [r3, #20]
 8010a06:	2b04      	cmp	r3, #4
 8010a08:	d901      	bls.n	8010a0e <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e000      	b.n	8010a10 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 8010a0e:	2300      	movs	r3, #0
    }
}
 8010a10:	0018      	movs	r0, r3
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	46c0      	nop			; (mov r8, r8)
 8010a18:	20000ec4 	.word	0x20000ec4

08010a1c <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010a1c:	b590      	push	{r4, r7, lr}
 8010a1e:	b08f      	sub	sp, #60	; 0x3c
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	0008      	movs	r0, r1
 8010a26:	0011      	movs	r1, r2
 8010a28:	607b      	str	r3, [r7, #4]
 8010a2a:	230a      	movs	r3, #10
 8010a2c:	18fb      	adds	r3, r7, r3
 8010a2e:	1c02      	adds	r2, r0, #0
 8010a30:	801a      	strh	r2, [r3, #0]
 8010a32:	2309      	movs	r3, #9
 8010a34:	18fb      	adds	r3, r7, r3
 8010a36:	1c0a      	adds	r2, r1, #0
 8010a38:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010a40:	2307      	movs	r3, #7
 8010a42:	e0e9      	b.n	8010c18 <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 8010a44:	2337      	movs	r3, #55	; 0x37
 8010a46:	18fb      	adds	r3, r7, r3
 8010a48:	2200      	movs	r2, #0
 8010a4a:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8010a4c:	2334      	movs	r3, #52	; 0x34
 8010a4e:	18fb      	adds	r3, r7, r3
 8010a50:	2201      	movs	r2, #1
 8010a52:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8010a54:	2320      	movs	r3, #32
 8010a56:	18fb      	adds	r3, r7, r3
 8010a58:	0018      	movs	r0, r3
 8010a5a:	2310      	movs	r3, #16
 8010a5c:	001a      	movs	r2, r3
 8010a5e:	2100      	movs	r1, #0
 8010a60:	f00e fb6c 	bl	801f13c <memset>
    uint8_t aBlock[16] = { 0 };
 8010a64:	2110      	movs	r1, #16
 8010a66:	000c      	movs	r4, r1
 8010a68:	187b      	adds	r3, r7, r1
 8010a6a:	0018      	movs	r0, r3
 8010a6c:	2310      	movs	r3, #16
 8010a6e:	001a      	movs	r2, r3
 8010a70:	2100      	movs	r1, #0
 8010a72:	f00e fb63 	bl	801f13c <memset>

    aBlock[0] = 0x01;
 8010a76:	0021      	movs	r1, r4
 8010a78:	187b      	adds	r3, r7, r1
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8010a7e:	187b      	adds	r3, r7, r1
 8010a80:	2240      	movs	r2, #64	; 0x40
 8010a82:	2008      	movs	r0, #8
 8010a84:	4684      	mov	ip, r0
 8010a86:	44bc      	add	ip, r7
 8010a88:	4462      	add	r2, ip
 8010a8a:	7812      	ldrb	r2, [r2, #0]
 8010a8c:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	187b      	adds	r3, r7, r1
 8010a94:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	0a1b      	lsrs	r3, r3, #8
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	187b      	adds	r3, r7, r1
 8010a9e:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	0c1b      	lsrs	r3, r3, #16
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	187b      	adds	r3, r7, r1
 8010aa8:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	0e1b      	lsrs	r3, r3, #24
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	187b      	adds	r3, r7, r1
 8010ab2:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	187b      	adds	r3, r7, r1
 8010aba:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010abe:	0a1b      	lsrs	r3, r3, #8
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	187b      	adds	r3, r7, r1
 8010ac4:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac8:	0c1b      	lsrs	r3, r3, #16
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	187b      	adds	r3, r7, r1
 8010ace:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad2:	0e1b      	lsrs	r3, r3, #24
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	187b      	adds	r3, r7, r1
 8010ad8:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 8010ada:	e04f      	b.n	8010b7c <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 8010adc:	2134      	movs	r1, #52	; 0x34
 8010ade:	187b      	adds	r3, r7, r1
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	2010      	movs	r0, #16
 8010ae6:	183b      	adds	r3, r7, r0
 8010ae8:	73da      	strb	r2, [r3, #15]
        ctr++;
 8010aea:	187b      	adds	r3, r7, r1
 8010aec:	881a      	ldrh	r2, [r3, #0]
 8010aee:	187b      	adds	r3, r7, r1
 8010af0:	3201      	adds	r2, #1
 8010af2:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010af4:	2320      	movs	r3, #32
 8010af6:	18f9      	adds	r1, r7, r3
 8010af8:	2309      	movs	r3, #9
 8010afa:	18fb      	adds	r3, r7, r3
 8010afc:	781a      	ldrb	r2, [r3, #0]
 8010afe:	1838      	adds	r0, r7, r0
 8010b00:	000b      	movs	r3, r1
 8010b02:	2110      	movs	r1, #16
 8010b04:	f7f9 fc02 	bl	800a30c <SecureElementAesEncrypt>
 8010b08:	1e03      	subs	r3, r0, #0
 8010b0a:	d001      	beq.n	8010b10 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010b0c:	230c      	movs	r3, #12
 8010b0e:	e083      	b.n	8010c18 <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 8010b10:	2333      	movs	r3, #51	; 0x33
 8010b12:	18fb      	adds	r3, r7, r3
 8010b14:	2200      	movs	r2, #0
 8010b16:	701a      	strb	r2, [r3, #0]
 8010b18:	e01f      	b.n	8010b5a <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010b1a:	2037      	movs	r0, #55	; 0x37
 8010b1c:	183b      	adds	r3, r7, r0
 8010b1e:	781a      	ldrb	r2, [r3, #0]
 8010b20:	2433      	movs	r4, #51	; 0x33
 8010b22:	193b      	adds	r3, r7, r4
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	18d3      	adds	r3, r2, r3
 8010b28:	001a      	movs	r2, r3
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	189b      	adds	r3, r3, r2
 8010b2e:	7819      	ldrb	r1, [r3, #0]
 8010b30:	193b      	adds	r3, r7, r4
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	2220      	movs	r2, #32
 8010b36:	18ba      	adds	r2, r7, r2
 8010b38:	5cd2      	ldrb	r2, [r2, r3]
 8010b3a:	183b      	adds	r3, r7, r0
 8010b3c:	7818      	ldrb	r0, [r3, #0]
 8010b3e:	193b      	adds	r3, r7, r4
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	18c3      	adds	r3, r0, r3
 8010b44:	0018      	movs	r0, r3
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	181b      	adds	r3, r3, r0
 8010b4a:	404a      	eors	r2, r1
 8010b4c:	b2d2      	uxtb	r2, r2
 8010b4e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 8010b50:	193b      	adds	r3, r7, r4
 8010b52:	781a      	ldrb	r2, [r3, #0]
 8010b54:	193b      	adds	r3, r7, r4
 8010b56:	3201      	adds	r2, #1
 8010b58:	701a      	strb	r2, [r3, #0]
 8010b5a:	2333      	movs	r3, #51	; 0x33
 8010b5c:	18fb      	adds	r3, r7, r3
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	2b0f      	cmp	r3, #15
 8010b62:	d9da      	bls.n	8010b1a <PayloadEncrypt+0xfe>
        }
        size -= 16;
 8010b64:	220a      	movs	r2, #10
 8010b66:	18bb      	adds	r3, r7, r2
 8010b68:	18ba      	adds	r2, r7, r2
 8010b6a:	8812      	ldrh	r2, [r2, #0]
 8010b6c:	3a10      	subs	r2, #16
 8010b6e:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8010b70:	2237      	movs	r2, #55	; 0x37
 8010b72:	18bb      	adds	r3, r7, r2
 8010b74:	18ba      	adds	r2, r7, r2
 8010b76:	7812      	ldrb	r2, [r2, #0]
 8010b78:	3210      	adds	r2, #16
 8010b7a:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 8010b7c:	230a      	movs	r3, #10
 8010b7e:	18fb      	adds	r3, r7, r3
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	2b0f      	cmp	r3, #15
 8010b84:	d8aa      	bhi.n	8010adc <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 8010b86:	230a      	movs	r3, #10
 8010b88:	18fb      	adds	r3, r7, r3
 8010b8a:	881b      	ldrh	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d042      	beq.n	8010c16 <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 8010b90:	2334      	movs	r3, #52	; 0x34
 8010b92:	18fb      	adds	r3, r7, r3
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	2010      	movs	r0, #16
 8010b9a:	183b      	adds	r3, r7, r0
 8010b9c:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010b9e:	2320      	movs	r3, #32
 8010ba0:	18f9      	adds	r1, r7, r3
 8010ba2:	2309      	movs	r3, #9
 8010ba4:	18fb      	adds	r3, r7, r3
 8010ba6:	781a      	ldrb	r2, [r3, #0]
 8010ba8:	1838      	adds	r0, r7, r0
 8010baa:	000b      	movs	r3, r1
 8010bac:	2110      	movs	r1, #16
 8010bae:	f7f9 fbad 	bl	800a30c <SecureElementAesEncrypt>
 8010bb2:	1e03      	subs	r3, r0, #0
 8010bb4:	d001      	beq.n	8010bba <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010bb6:	230c      	movs	r3, #12
 8010bb8:	e02e      	b.n	8010c18 <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010bba:	2332      	movs	r3, #50	; 0x32
 8010bbc:	18fb      	adds	r3, r7, r3
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	701a      	strb	r2, [r3, #0]
 8010bc2:	e01f      	b.n	8010c04 <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010bc4:	2037      	movs	r0, #55	; 0x37
 8010bc6:	183b      	adds	r3, r7, r0
 8010bc8:	781a      	ldrb	r2, [r3, #0]
 8010bca:	2432      	movs	r4, #50	; 0x32
 8010bcc:	193b      	adds	r3, r7, r4
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	18d3      	adds	r3, r2, r3
 8010bd2:	001a      	movs	r2, r3
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	189b      	adds	r3, r3, r2
 8010bd8:	7819      	ldrb	r1, [r3, #0]
 8010bda:	193b      	adds	r3, r7, r4
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	2220      	movs	r2, #32
 8010be0:	18ba      	adds	r2, r7, r2
 8010be2:	5cd2      	ldrb	r2, [r2, r3]
 8010be4:	183b      	adds	r3, r7, r0
 8010be6:	7818      	ldrb	r0, [r3, #0]
 8010be8:	193b      	adds	r3, r7, r4
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	18c3      	adds	r3, r0, r3
 8010bee:	0018      	movs	r0, r3
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	181b      	adds	r3, r3, r0
 8010bf4:	404a      	eors	r2, r1
 8010bf6:	b2d2      	uxtb	r2, r2
 8010bf8:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8010bfa:	193b      	adds	r3, r7, r4
 8010bfc:	781a      	ldrb	r2, [r3, #0]
 8010bfe:	193b      	adds	r3, r7, r4
 8010c00:	3201      	adds	r2, #1
 8010c02:	701a      	strb	r2, [r3, #0]
 8010c04:	2332      	movs	r3, #50	; 0x32
 8010c06:	18fb      	adds	r3, r7, r3
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	220a      	movs	r2, #10
 8010c0e:	18ba      	adds	r2, r7, r2
 8010c10:	8812      	ldrh	r2, [r2, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d8d6      	bhi.n	8010bc4 <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	0018      	movs	r0, r3
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	b00f      	add	sp, #60	; 0x3c
 8010c1e:	bd90      	pop	{r4, r7, pc}

08010c20 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 8010c20:	b590      	push	{r4, r7, lr}
 8010c22:	b08d      	sub	sp, #52	; 0x34
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	0004      	movs	r4, r0
 8010c28:	6039      	str	r1, [r7, #0]
 8010c2a:	0010      	movs	r0, r2
 8010c2c:	0019      	movs	r1, r3
 8010c2e:	1dbb      	adds	r3, r7, #6
 8010c30:	1c22      	adds	r2, r4, #0
 8010c32:	801a      	strh	r2, [r3, #0]
 8010c34:	1d7b      	adds	r3, r7, #5
 8010c36:	1c02      	adds	r2, r0, #0
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	1d3b      	adds	r3, r7, #4
 8010c3c:	1c0a      	adds	r2, r1, #0
 8010c3e:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8010c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d101      	bne.n	8010c4a <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c46:	2307      	movs	r3, #7
 8010c48:	e09b      	b.n	8010d82 <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 8010c4a:	232e      	movs	r3, #46	; 0x2e
 8010c4c:	18fb      	adds	r3, r7, r3
 8010c4e:	2200      	movs	r2, #0
 8010c50:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8010c52:	231c      	movs	r3, #28
 8010c54:	18fb      	adds	r3, r7, r3
 8010c56:	0018      	movs	r0, r3
 8010c58:	2310      	movs	r3, #16
 8010c5a:	001a      	movs	r2, r3
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	f00e fa6d 	bl	801f13c <memset>
    uint8_t aBlock[16] = { 0 };
 8010c62:	240c      	movs	r4, #12
 8010c64:	193b      	adds	r3, r7, r4
 8010c66:	0018      	movs	r0, r3
 8010c68:	2310      	movs	r3, #16
 8010c6a:	001a      	movs	r2, r3
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f00e fa65 	bl	801f13c <memset>

    aBlock[0] = 0x01;
 8010c72:	193b      	adds	r3, r7, r4
 8010c74:	2201      	movs	r2, #1
 8010c76:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 8010c78:	1d3b      	adds	r3, r7, #4
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d008      	beq.n	8010c92 <FOptsEncrypt+0x72>
 8010c80:	2b02      	cmp	r3, #2
 8010c82:	d00b      	beq.n	8010c9c <FOptsEncrypt+0x7c>
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d10e      	bne.n	8010ca6 <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 8010c88:	230c      	movs	r3, #12
 8010c8a:	18fb      	adds	r3, r7, r3
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	711a      	strb	r2, [r3, #4]
            break;
 8010c90:	e00b      	b.n	8010caa <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 8010c92:	230c      	movs	r3, #12
 8010c94:	18fb      	adds	r3, r7, r3
 8010c96:	2201      	movs	r2, #1
 8010c98:	711a      	strb	r2, [r3, #4]
            break;
 8010c9a:	e006      	b.n	8010caa <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 8010c9c:	230c      	movs	r3, #12
 8010c9e:	18fb      	adds	r3, r7, r3
 8010ca0:	2202      	movs	r2, #2
 8010ca2:	711a      	strb	r2, [r3, #4]
            break;
 8010ca4:	e001      	b.n	8010caa <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 8010ca6:	2306      	movs	r3, #6
 8010ca8:	e06b      	b.n	8010d82 <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 8010caa:	210c      	movs	r1, #12
 8010cac:	187b      	adds	r3, r7, r1
 8010cae:	1d7a      	adds	r2, r7, #5
 8010cb0:	7812      	ldrb	r2, [r2, #0]
 8010cb2:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	187b      	adds	r3, r7, r1
 8010cba:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	0a1b      	lsrs	r3, r3, #8
 8010cc0:	b2da      	uxtb	r2, r3
 8010cc2:	187b      	adds	r3, r7, r1
 8010cc4:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	0c1b      	lsrs	r3, r3, #16
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	187b      	adds	r3, r7, r1
 8010cce:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	0e1b      	lsrs	r3, r3, #24
 8010cd4:	b2da      	uxtb	r2, r3
 8010cd6:	187b      	adds	r3, r7, r1
 8010cd8:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	187b      	adds	r3, r7, r1
 8010ce0:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ce4:	0a1b      	lsrs	r3, r3, #8
 8010ce6:	b2da      	uxtb	r2, r3
 8010ce8:	187b      	adds	r3, r7, r1
 8010cea:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cee:	0c1b      	lsrs	r3, r3, #16
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	187b      	adds	r3, r7, r1
 8010cf4:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cf8:	0e1b      	lsrs	r3, r3, #24
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	187b      	adds	r3, r7, r1
 8010cfe:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 8010d00:	187b      	adds	r3, r7, r1
 8010d02:	2201      	movs	r2, #1
 8010d04:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 8010d06:	1dbb      	adds	r3, r7, #6
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d038      	beq.n	8010d80 <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010d0e:	231c      	movs	r3, #28
 8010d10:	18fb      	adds	r3, r7, r3
 8010d12:	220c      	movs	r2, #12
 8010d14:	18b8      	adds	r0, r7, r2
 8010d16:	2206      	movs	r2, #6
 8010d18:	2110      	movs	r1, #16
 8010d1a:	f7f9 faf7 	bl	800a30c <SecureElementAesEncrypt>
 8010d1e:	1e03      	subs	r3, r0, #0
 8010d20:	d001      	beq.n	8010d26 <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010d22:	230c      	movs	r3, #12
 8010d24:	e02d      	b.n	8010d82 <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010d26:	232f      	movs	r3, #47	; 0x2f
 8010d28:	18fb      	adds	r3, r7, r3
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	e01f      	b.n	8010d70 <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010d30:	202e      	movs	r0, #46	; 0x2e
 8010d32:	183b      	adds	r3, r7, r0
 8010d34:	781a      	ldrb	r2, [r3, #0]
 8010d36:	242f      	movs	r4, #47	; 0x2f
 8010d38:	193b      	adds	r3, r7, r4
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	18d3      	adds	r3, r2, r3
 8010d3e:	001a      	movs	r2, r3
 8010d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d42:	189b      	adds	r3, r3, r2
 8010d44:	7819      	ldrb	r1, [r3, #0]
 8010d46:	193b      	adds	r3, r7, r4
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	221c      	movs	r2, #28
 8010d4c:	18ba      	adds	r2, r7, r2
 8010d4e:	5cd2      	ldrb	r2, [r2, r3]
 8010d50:	183b      	adds	r3, r7, r0
 8010d52:	7818      	ldrb	r0, [r3, #0]
 8010d54:	193b      	adds	r3, r7, r4
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	18c3      	adds	r3, r0, r3
 8010d5a:	0018      	movs	r0, r3
 8010d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d5e:	181b      	adds	r3, r3, r0
 8010d60:	404a      	eors	r2, r1
 8010d62:	b2d2      	uxtb	r2, r2
 8010d64:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8010d66:	193b      	adds	r3, r7, r4
 8010d68:	781a      	ldrb	r2, [r3, #0]
 8010d6a:	193b      	adds	r3, r7, r4
 8010d6c:	3201      	adds	r2, #1
 8010d6e:	701a      	strb	r2, [r3, #0]
 8010d70:	232f      	movs	r3, #47	; 0x2f
 8010d72:	18fb      	adds	r3, r7, r3
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	1dba      	adds	r2, r7, #6
 8010d7a:	8812      	ldrh	r2, [r2, #0]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d8d7      	bhi.n	8010d30 <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	0018      	movs	r0, r3
 8010d84:	46bd      	mov	sp, r7
 8010d86:	b00d      	add	sp, #52	; 0x34
 8010d88:	bd90      	pop	{r4, r7, pc}

08010d8a <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8010d8a:	b5b0      	push	{r4, r5, r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	0008      	movs	r0, r1
 8010d94:	0011      	movs	r1, r2
 8010d96:	607b      	str	r3, [r7, #4]
 8010d98:	250a      	movs	r5, #10
 8010d9a:	197b      	adds	r3, r7, r5
 8010d9c:	1c02      	adds	r2, r0, #0
 8010d9e:	801a      	strh	r2, [r3, #0]
 8010da0:	2009      	movs	r0, #9
 8010da2:	183b      	adds	r3, r7, r0
 8010da4:	1c0a      	adds	r2, r1, #0
 8010da6:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010da8:	687c      	ldr	r4, [r7, #4]
 8010daa:	183b      	adds	r3, r7, r0
 8010dac:	781a      	ldrb	r2, [r3, #0]
 8010dae:	197b      	adds	r3, r7, r5
 8010db0:	8819      	ldrh	r1, [r3, #0]
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	0023      	movs	r3, r4
 8010db6:	f7f9 fa43 	bl	800a240 <SecureElementComputeAesCmac>
 8010dba:	1e03      	subs	r3, r0, #0
 8010dbc:	d001      	beq.n	8010dc2 <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010dbe:	230c      	movs	r3, #12
 8010dc0:	e000      	b.n	8010dc4 <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	0018      	movs	r0, r3
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	b004      	add	sp, #16
 8010dca:	bdb0      	pop	{r4, r5, r7, pc}

08010dcc <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 8010dcc:	b5b0      	push	{r4, r5, r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	0008      	movs	r0, r1
 8010dd6:	0011      	movs	r1, r2
 8010dd8:	607b      	str	r3, [r7, #4]
 8010dda:	250a      	movs	r5, #10
 8010ddc:	197b      	adds	r3, r7, r5
 8010dde:	1c02      	adds	r2, r0, #0
 8010de0:	801a      	strh	r2, [r3, #0]
 8010de2:	2009      	movs	r0, #9
 8010de4:	183b      	adds	r3, r7, r0
 8010de6:	1c0a      	adds	r2, r1, #0
 8010de8:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010dea:	183b      	adds	r3, r7, r0
 8010dec:	781c      	ldrb	r4, [r3, #0]
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	197b      	adds	r3, r7, r5
 8010df2:	8819      	ldrh	r1, [r3, #0]
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	0023      	movs	r3, r4
 8010df8:	f7f9 fa47 	bl	800a28a <SecureElementVerifyAesCmac>
 8010dfc:	1e03      	subs	r3, r0, #0
 8010dfe:	d001      	beq.n	8010e04 <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010e00:	230c      	movs	r3, #12
 8010e02:	e000      	b.n	8010e06 <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	0018      	movs	r0, r3
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	b004      	add	sp, #16
 8010e0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010e10 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8010e10:	b5b0      	push	{r4, r5, r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	0005      	movs	r5, r0
 8010e18:	000c      	movs	r4, r1
 8010e1a:	0010      	movs	r0, r2
 8010e1c:	0019      	movs	r1, r3
 8010e1e:	1dbb      	adds	r3, r7, #6
 8010e20:	1c2a      	adds	r2, r5, #0
 8010e22:	801a      	strh	r2, [r3, #0]
 8010e24:	1d7b      	adds	r3, r7, #5
 8010e26:	1c22      	adds	r2, r4, #0
 8010e28:	701a      	strb	r2, [r3, #0]
 8010e2a:	1d3b      	adds	r3, r7, #4
 8010e2c:	1c02      	adds	r2, r0, #0
 8010e2e:	701a      	strb	r2, [r3, #0]
 8010e30:	1cfb      	adds	r3, r7, #3
 8010e32:	1c0a      	adds	r2, r1, #0
 8010e34:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8010e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d101      	bne.n	8010e40 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010e3c:	2307      	movs	r3, #7
 8010e3e:	e079      	b.n	8010f34 <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 8010e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e42:	2249      	movs	r2, #73	; 0x49
 8010e44:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8010e46:	1d3b      	adds	r3, r7, #4
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d024      	beq.n	8010e98 <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8010e4e:	230e      	movs	r3, #14
 8010e50:	18fb      	adds	r3, r7, r3
 8010e52:	2200      	movs	r2, #0
 8010e54:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 8010e56:	1cfb      	adds	r3, r7, #3
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 8010e5e:	4b37      	ldr	r3, [pc, #220]	; (8010f3c <PrepareB0+0x12c>)
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	695a      	ldr	r2, [r3, #20]
 8010e64:	230e      	movs	r3, #14
 8010e66:	18fb      	adds	r3, r7, r3
 8010e68:	801a      	strh	r2, [r3, #0]
 8010e6a:	e005      	b.n	8010e78 <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 8010e6c:	4b33      	ldr	r3, [pc, #204]	; (8010f3c <PrepareB0+0x12c>)
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	689a      	ldr	r2, [r3, #8]
 8010e72:	230e      	movs	r3, #14
 8010e74:	18fb      	adds	r3, r7, r3
 8010e76:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 8010e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	210e      	movs	r1, #14
 8010e7e:	187a      	adds	r2, r7, r1
 8010e80:	8812      	ldrh	r2, [r2, #0]
 8010e82:	b2d2      	uxtb	r2, r2
 8010e84:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8010e86:	187b      	adds	r3, r7, r1
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	0a1b      	lsrs	r3, r3, #8
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e90:	3302      	adds	r3, #2
 8010e92:	b2d2      	uxtb	r2, r2
 8010e94:	701a      	strb	r2, [r3, #0]
 8010e96:	e007      	b.n	8010ea8 <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 8010e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8010ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea2:	3302      	adds	r3, #2
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	3303      	adds	r3, #3
 8010eac:	2200      	movs	r2, #0
 8010eae:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8010eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb2:	3304      	adds	r3, #4
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8010eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eba:	3305      	adds	r3, #5
 8010ebc:	1cfa      	adds	r2, r7, #3
 8010ebe:	7812      	ldrb	r2, [r2, #0]
 8010ec0:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8010ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec4:	3306      	adds	r3, #6
 8010ec6:	6a3a      	ldr	r2, [r7, #32]
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8010ecc:	6a3b      	ldr	r3, [r7, #32]
 8010ece:	0a1a      	lsrs	r2, r3, #8
 8010ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed2:	3307      	adds	r3, #7
 8010ed4:	b2d2      	uxtb	r2, r2
 8010ed6:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8010ed8:	6a3b      	ldr	r3, [r7, #32]
 8010eda:	0c1a      	lsrs	r2, r3, #16
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	3308      	adds	r3, #8
 8010ee0:	b2d2      	uxtb	r2, r2
 8010ee2:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8010ee4:	6a3b      	ldr	r3, [r7, #32]
 8010ee6:	0e1a      	lsrs	r2, r3, #24
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	3309      	adds	r3, #9
 8010eec:	b2d2      	uxtb	r2, r2
 8010eee:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	330a      	adds	r3, #10
 8010ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ef6:	b2d2      	uxtb	r2, r2
 8010ef8:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	0a1a      	lsrs	r2, r3, #8
 8010efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f00:	330b      	adds	r3, #11
 8010f02:	b2d2      	uxtb	r2, r2
 8010f04:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	0c1a      	lsrs	r2, r3, #16
 8010f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0c:	330c      	adds	r3, #12
 8010f0e:	b2d2      	uxtb	r2, r2
 8010f10:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8010f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f14:	0e1a      	lsrs	r2, r3, #24
 8010f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f18:	330d      	adds	r3, #13
 8010f1a:	b2d2      	uxtb	r2, r2
 8010f1c:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8010f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f20:	330e      	adds	r3, #14
 8010f22:	2200      	movs	r2, #0
 8010f24:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8010f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f28:	330f      	adds	r3, #15
 8010f2a:	1dba      	adds	r2, r7, #6
 8010f2c:	8812      	ldrh	r2, [r2, #0]
 8010f2e:	b2d2      	uxtb	r2, r2
 8010f30:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010f32:	2300      	movs	r3, #0
}
 8010f34:	0018      	movs	r0, r3
 8010f36:	46bd      	mov	sp, r7
 8010f38:	b004      	add	sp, #16
 8010f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8010f3c:	20000ed8 	.word	0x20000ed8

08010f40 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8010f40:	b5b0      	push	{r4, r5, r7, lr}
 8010f42:	b0ca      	sub	sp, #296	; 0x128
 8010f44:	af04      	add	r7, sp, #16
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	000c      	movs	r4, r1
 8010f4a:	0010      	movs	r0, r2
 8010f4c:	0019      	movs	r1, r3
 8010f4e:	4b47      	ldr	r3, [pc, #284]	; (801106c <ComputeCmacB0+0x12c>)
 8010f50:	228c      	movs	r2, #140	; 0x8c
 8010f52:	0052      	lsls	r2, r2, #1
 8010f54:	4694      	mov	ip, r2
 8010f56:	44bc      	add	ip, r7
 8010f58:	4463      	add	r3, ip
 8010f5a:	1c22      	adds	r2, r4, #0
 8010f5c:	801a      	strh	r2, [r3, #0]
 8010f5e:	4b44      	ldr	r3, [pc, #272]	; (8011070 <ComputeCmacB0+0x130>)
 8010f60:	228c      	movs	r2, #140	; 0x8c
 8010f62:	0052      	lsls	r2, r2, #1
 8010f64:	4694      	mov	ip, r2
 8010f66:	44bc      	add	ip, r7
 8010f68:	4463      	add	r3, ip
 8010f6a:	1c02      	adds	r2, r0, #0
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	4b41      	ldr	r3, [pc, #260]	; (8011074 <ComputeCmacB0+0x134>)
 8010f70:	228c      	movs	r2, #140	; 0x8c
 8010f72:	0052      	lsls	r2, r2, #1
 8010f74:	4694      	mov	ip, r2
 8010f76:	44bc      	add	ip, r7
 8010f78:	4463      	add	r3, ip
 8010f7a:	1c0a      	adds	r2, r1, #0
 8010f7c:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d005      	beq.n	8010f90 <ComputeCmacB0+0x50>
 8010f84:	239a      	movs	r3, #154	; 0x9a
 8010f86:	005b      	lsls	r3, r3, #1
 8010f88:	18fb      	adds	r3, r7, r3
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d101      	bne.n	8010f94 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010f90:	2307      	movs	r3, #7
 8010f92:	e066      	b.n	8011062 <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010f94:	4b35      	ldr	r3, [pc, #212]	; (801106c <ComputeCmacB0+0x12c>)
 8010f96:	228c      	movs	r2, #140	; 0x8c
 8010f98:	0052      	lsls	r2, r2, #1
 8010f9a:	4694      	mov	ip, r2
 8010f9c:	44bc      	add	ip, r7
 8010f9e:	4463      	add	r3, ip
 8010fa0:	881a      	ldrh	r2, [r3, #0]
 8010fa2:	2380      	movs	r3, #128	; 0x80
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d901      	bls.n	8010fae <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010faa:	230b      	movs	r3, #11
 8010fac:	e059      	b.n	8011062 <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010fae:	2388      	movs	r3, #136	; 0x88
 8010fb0:	005a      	lsls	r2, r3, #1
 8010fb2:	2508      	movs	r5, #8
 8010fb4:	197b      	adds	r3, r7, r5
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	0018      	movs	r0, r3
 8010fba:	f004 fd5b 	bl	8015a74 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010fbe:	2394      	movs	r3, #148	; 0x94
 8010fc0:	005b      	lsls	r3, r3, #1
 8010fc2:	18fb      	adds	r3, r7, r3
 8010fc4:	781c      	ldrb	r4, [r3, #0]
 8010fc6:	4b2b      	ldr	r3, [pc, #172]	; (8011074 <ComputeCmacB0+0x134>)
 8010fc8:	228c      	movs	r2, #140	; 0x8c
 8010fca:	0052      	lsls	r2, r2, #1
 8010fcc:	4694      	mov	ip, r2
 8010fce:	44bc      	add	ip, r7
 8010fd0:	4463      	add	r3, ip
 8010fd2:	781a      	ldrb	r2, [r3, #0]
 8010fd4:	4b26      	ldr	r3, [pc, #152]	; (8011070 <ComputeCmacB0+0x130>)
 8010fd6:	218c      	movs	r1, #140	; 0x8c
 8010fd8:	0049      	lsls	r1, r1, #1
 8010fda:	468c      	mov	ip, r1
 8010fdc:	44bc      	add	ip, r7
 8010fde:	4463      	add	r3, ip
 8010fe0:	7819      	ldrb	r1, [r3, #0]
 8010fe2:	4b22      	ldr	r3, [pc, #136]	; (801106c <ComputeCmacB0+0x12c>)
 8010fe4:	208c      	movs	r0, #140	; 0x8c
 8010fe6:	0040      	lsls	r0, r0, #1
 8010fe8:	4684      	mov	ip, r0
 8010fea:	44bc      	add	ip, r7
 8010fec:	4463      	add	r3, ip
 8010fee:	8818      	ldrh	r0, [r3, #0]
 8010ff0:	197b      	adds	r3, r7, r5
 8010ff2:	9302      	str	r3, [sp, #8]
 8010ff4:	2398      	movs	r3, #152	; 0x98
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	18fb      	adds	r3, r7, r3
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	2396      	movs	r3, #150	; 0x96
 8011000:	005b      	lsls	r3, r3, #1
 8011002:	18fb      	adds	r3, r7, r3
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	0023      	movs	r3, r4
 801100a:	f7ff ff01 	bl	8010e10 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801100e:	197b      	adds	r3, r7, r5
 8011010:	3310      	adds	r3, #16
 8011012:	4a16      	ldr	r2, [pc, #88]	; (801106c <ComputeCmacB0+0x12c>)
 8011014:	218c      	movs	r1, #140	; 0x8c
 8011016:	0049      	lsls	r1, r1, #1
 8011018:	468c      	mov	ip, r1
 801101a:	44bc      	add	ip, r7
 801101c:	4462      	add	r2, ip
 801101e:	8812      	ldrh	r2, [r2, #0]
 8011020:	6879      	ldr	r1, [r7, #4]
 8011022:	0018      	movs	r0, r3
 8011024:	f004 fcea 	bl	80159fc <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011028:	4b10      	ldr	r3, [pc, #64]	; (801106c <ComputeCmacB0+0x12c>)
 801102a:	228c      	movs	r2, #140	; 0x8c
 801102c:	0052      	lsls	r2, r2, #1
 801102e:	4694      	mov	ip, r2
 8011030:	44bc      	add	ip, r7
 8011032:	4463      	add	r3, ip
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	3310      	adds	r3, #16
 8011038:	b299      	uxth	r1, r3
 801103a:	239a      	movs	r3, #154	; 0x9a
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	18fb      	adds	r3, r7, r3
 8011040:	681c      	ldr	r4, [r3, #0]
 8011042:	4b0b      	ldr	r3, [pc, #44]	; (8011070 <ComputeCmacB0+0x130>)
 8011044:	228c      	movs	r2, #140	; 0x8c
 8011046:	0052      	lsls	r2, r2, #1
 8011048:	4694      	mov	ip, r2
 801104a:	44bc      	add	ip, r7
 801104c:	4463      	add	r3, ip
 801104e:	781a      	ldrb	r2, [r3, #0]
 8011050:	1978      	adds	r0, r7, r5
 8011052:	0023      	movs	r3, r4
 8011054:	f7f9 f8f4 	bl	800a240 <SecureElementComputeAesCmac>
 8011058:	1e03      	subs	r3, r0, #0
 801105a:	d001      	beq.n	8011060 <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801105c:	230c      	movs	r3, #12
 801105e:	e000      	b.n	8011062 <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011060:	2300      	movs	r3, #0
}
 8011062:	0018      	movs	r0, r3
 8011064:	46bd      	mov	sp, r7
 8011066:	b046      	add	sp, #280	; 0x118
 8011068:	bdb0      	pop	{r4, r5, r7, pc}
 801106a:	46c0      	nop			; (mov r8, r8)
 801106c:	fffffeea 	.word	0xfffffeea
 8011070:	fffffee9 	.word	0xfffffee9
 8011074:	fffffee8 	.word	0xfffffee8

08011078 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8011078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801107a:	b0cd      	sub	sp, #308	; 0x134
 801107c:	af04      	add	r7, sp, #16
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	000c      	movs	r4, r1
 8011082:	0010      	movs	r0, r2
 8011084:	0019      	movs	r1, r3
 8011086:	4b52      	ldr	r3, [pc, #328]	; (80111d0 <VerifyCmacB0+0x158>)
 8011088:	2290      	movs	r2, #144	; 0x90
 801108a:	0052      	lsls	r2, r2, #1
 801108c:	4694      	mov	ip, r2
 801108e:	44bc      	add	ip, r7
 8011090:	4463      	add	r3, ip
 8011092:	1c22      	adds	r2, r4, #0
 8011094:	801a      	strh	r2, [r3, #0]
 8011096:	4b4f      	ldr	r3, [pc, #316]	; (80111d4 <VerifyCmacB0+0x15c>)
 8011098:	2290      	movs	r2, #144	; 0x90
 801109a:	0052      	lsls	r2, r2, #1
 801109c:	4694      	mov	ip, r2
 801109e:	44bc      	add	ip, r7
 80110a0:	4463      	add	r3, ip
 80110a2:	1c02      	adds	r2, r0, #0
 80110a4:	701a      	strb	r2, [r3, #0]
 80110a6:	4b4c      	ldr	r3, [pc, #304]	; (80111d8 <VerifyCmacB0+0x160>)
 80110a8:	2290      	movs	r2, #144	; 0x90
 80110aa:	0052      	lsls	r2, r2, #1
 80110ac:	4694      	mov	ip, r2
 80110ae:	44bc      	add	ip, r7
 80110b0:	4463      	add	r3, ip
 80110b2:	1c0a      	adds	r2, r1, #0
 80110b4:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d101      	bne.n	80110c0 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110bc:	2307      	movs	r3, #7
 80110be:	e083      	b.n	80111c8 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80110c0:	4b43      	ldr	r3, [pc, #268]	; (80111d0 <VerifyCmacB0+0x158>)
 80110c2:	2290      	movs	r2, #144	; 0x90
 80110c4:	0052      	lsls	r2, r2, #1
 80110c6:	4694      	mov	ip, r2
 80110c8:	44bc      	add	ip, r7
 80110ca:	4463      	add	r3, ip
 80110cc:	881a      	ldrh	r2, [r3, #0]
 80110ce:	2380      	movs	r3, #128	; 0x80
 80110d0:	005b      	lsls	r3, r3, #1
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d901      	bls.n	80110da <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80110d6:	230b      	movs	r3, #11
 80110d8:	e076      	b.n	80111c8 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80110da:	2388      	movs	r3, #136	; 0x88
 80110dc:	005a      	lsls	r2, r3, #1
 80110de:	250c      	movs	r5, #12
 80110e0:	197b      	adds	r3, r7, r5
 80110e2:	2100      	movs	r1, #0
 80110e4:	0018      	movs	r0, r3
 80110e6:	f004 fcc5 	bl	8015a74 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80110ea:	2398      	movs	r3, #152	; 0x98
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	2208      	movs	r2, #8
 80110f0:	4694      	mov	ip, r2
 80110f2:	44bc      	add	ip, r7
 80110f4:	4463      	add	r3, ip
 80110f6:	781c      	ldrb	r4, [r3, #0]
 80110f8:	4b37      	ldr	r3, [pc, #220]	; (80111d8 <VerifyCmacB0+0x160>)
 80110fa:	2290      	movs	r2, #144	; 0x90
 80110fc:	0052      	lsls	r2, r2, #1
 80110fe:	4694      	mov	ip, r2
 8011100:	44bc      	add	ip, r7
 8011102:	4463      	add	r3, ip
 8011104:	781a      	ldrb	r2, [r3, #0]
 8011106:	4b33      	ldr	r3, [pc, #204]	; (80111d4 <VerifyCmacB0+0x15c>)
 8011108:	2190      	movs	r1, #144	; 0x90
 801110a:	0049      	lsls	r1, r1, #1
 801110c:	468c      	mov	ip, r1
 801110e:	44bc      	add	ip, r7
 8011110:	4463      	add	r3, ip
 8011112:	7819      	ldrb	r1, [r3, #0]
 8011114:	4b2e      	ldr	r3, [pc, #184]	; (80111d0 <VerifyCmacB0+0x158>)
 8011116:	2090      	movs	r0, #144	; 0x90
 8011118:	0040      	lsls	r0, r0, #1
 801111a:	4684      	mov	ip, r0
 801111c:	44bc      	add	ip, r7
 801111e:	4463      	add	r3, ip
 8011120:	8818      	ldrh	r0, [r3, #0]
 8011122:	197b      	adds	r3, r7, r5
 8011124:	9302      	str	r3, [sp, #8]
 8011126:	239c      	movs	r3, #156	; 0x9c
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	2608      	movs	r6, #8
 801112c:	46b4      	mov	ip, r6
 801112e:	44bc      	add	ip, r7
 8011130:	4463      	add	r3, ip
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	9301      	str	r3, [sp, #4]
 8011136:	239a      	movs	r3, #154	; 0x9a
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	2608      	movs	r6, #8
 801113c:	46b4      	mov	ip, r6
 801113e:	44bc      	add	ip, r7
 8011140:	4463      	add	r3, ip
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	9300      	str	r3, [sp, #0]
 8011146:	0023      	movs	r3, r4
 8011148:	f7ff fe62 	bl	8010e10 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801114c:	197b      	adds	r3, r7, r5
 801114e:	3310      	adds	r3, #16
 8011150:	4a1f      	ldr	r2, [pc, #124]	; (80111d0 <VerifyCmacB0+0x158>)
 8011152:	2190      	movs	r1, #144	; 0x90
 8011154:	0049      	lsls	r1, r1, #1
 8011156:	468c      	mov	ip, r1
 8011158:	44bc      	add	ip, r7
 801115a:	4462      	add	r2, ip
 801115c:	8812      	ldrh	r2, [r2, #0]
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	0018      	movs	r0, r3
 8011162:	f004 fc4b 	bl	80159fc <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8011166:	2620      	movs	r6, #32
 8011168:	36ff      	adds	r6, #255	; 0xff
 801116a:	19bb      	adds	r3, r7, r6
 801116c:	2206      	movs	r2, #6
 801116e:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011170:	4b17      	ldr	r3, [pc, #92]	; (80111d0 <VerifyCmacB0+0x158>)
 8011172:	2290      	movs	r2, #144	; 0x90
 8011174:	0052      	lsls	r2, r2, #1
 8011176:	4694      	mov	ip, r2
 8011178:	44bc      	add	ip, r7
 801117a:	4463      	add	r3, ip
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	3310      	adds	r3, #16
 8011180:	b299      	uxth	r1, r3
 8011182:	19bc      	adds	r4, r7, r6
 8011184:	4b13      	ldr	r3, [pc, #76]	; (80111d4 <VerifyCmacB0+0x15c>)
 8011186:	2290      	movs	r2, #144	; 0x90
 8011188:	0052      	lsls	r2, r2, #1
 801118a:	4694      	mov	ip, r2
 801118c:	44bc      	add	ip, r7
 801118e:	4463      	add	r3, ip
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	229e      	movs	r2, #158	; 0x9e
 8011194:	0052      	lsls	r2, r2, #1
 8011196:	2008      	movs	r0, #8
 8011198:	4684      	mov	ip, r0
 801119a:	44bc      	add	ip, r7
 801119c:	4462      	add	r2, ip
 801119e:	6812      	ldr	r2, [r2, #0]
 80111a0:	1978      	adds	r0, r7, r5
 80111a2:	f7f9 f872 	bl	800a28a <SecureElementVerifyAesCmac>
 80111a6:	0003      	movs	r3, r0
 80111a8:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 80111aa:	19bb      	adds	r3, r7, r6
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d101      	bne.n	80111b6 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80111b2:	2300      	movs	r3, #0
 80111b4:	e008      	b.n	80111c8 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80111b6:	2320      	movs	r3, #32
 80111b8:	33ff      	adds	r3, #255	; 0xff
 80111ba:	18fb      	adds	r3, r7, r3
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d101      	bne.n	80111c6 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80111c2:	2301      	movs	r3, #1
 80111c4:	e000      	b.n	80111c8 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80111c6:	230c      	movs	r3, #12
}
 80111c8:	0018      	movs	r0, r3
 80111ca:	46bd      	mov	sp, r7
 80111cc:	b049      	add	sp, #292	; 0x124
 80111ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d0:	fffffee2 	.word	0xfffffee2
 80111d4:	fffffee1 	.word	0xfffffee1
 80111d8:	fffffee0 	.word	0xfffffee0

080111dc <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 80111dc:	b5b0      	push	{r4, r5, r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	0005      	movs	r5, r0
 80111e4:	000c      	movs	r4, r1
 80111e6:	0010      	movs	r0, r2
 80111e8:	0019      	movs	r1, r3
 80111ea:	1dbb      	adds	r3, r7, #6
 80111ec:	1c2a      	adds	r2, r5, #0
 80111ee:	801a      	strh	r2, [r3, #0]
 80111f0:	1d7b      	adds	r3, r7, #5
 80111f2:	1c22      	adds	r2, r4, #0
 80111f4:	701a      	strb	r2, [r3, #0]
 80111f6:	1d3b      	adds	r3, r7, #4
 80111f8:	1c02      	adds	r2, r0, #0
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	1cfb      	adds	r3, r7, #3
 80111fe:	1c0a      	adds	r2, r1, #0
 8011200:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011208:	2307      	movs	r3, #7
 801120a:	e06c      	b.n	80112e6 <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	2249      	movs	r2, #73	; 0x49
 8011210:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8011212:	1d3b      	adds	r3, r7, #4
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d015      	beq.n	8011246 <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 801121a:	4b35      	ldr	r3, [pc, #212]	; (80112f0 <PrepareB1+0x114>)
 801121c:	689b      	ldr	r3, [r3, #8]
 801121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	210e      	movs	r1, #14
 8011224:	187b      	adds	r3, r7, r1
 8011226:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 8011228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122a:	3301      	adds	r3, #1
 801122c:	187a      	adds	r2, r7, r1
 801122e:	8812      	ldrh	r2, [r2, #0]
 8011230:	b2d2      	uxtb	r2, r2
 8011232:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 8011234:	187b      	adds	r3, r7, r1
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	0a1b      	lsrs	r3, r3, #8
 801123a:	b29a      	uxth	r2, r3
 801123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123e:	3302      	adds	r3, #2
 8011240:	b2d2      	uxtb	r2, r2
 8011242:	701a      	strb	r2, [r3, #0]
 8011244:	e007      	b.n	8011256 <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 8011246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011248:	3301      	adds	r3, #1
 801124a:	2200      	movs	r2, #0
 801124c:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 801124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011250:	3302      	adds	r3, #2
 8011252:	2200      	movs	r2, #0
 8011254:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	3303      	adds	r3, #3
 801125a:	1cfa      	adds	r2, r7, #3
 801125c:	7812      	ldrb	r2, [r2, #0]
 801125e:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	3304      	adds	r3, #4
 8011264:	2220      	movs	r2, #32
 8011266:	18ba      	adds	r2, r7, r2
 8011268:	7812      	ldrb	r2, [r2, #0]
 801126a:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 801126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126e:	3305      	adds	r3, #5
 8011270:	2200      	movs	r2, #0
 8011272:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 8011274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011276:	3306      	adds	r3, #6
 8011278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127a:	b2d2      	uxtb	r2, r2
 801127c:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 801127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011280:	0a1a      	lsrs	r2, r3, #8
 8011282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011284:	3307      	adds	r3, #7
 8011286:	b2d2      	uxtb	r2, r2
 8011288:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	0c1a      	lsrs	r2, r3, #16
 801128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011290:	3308      	adds	r3, #8
 8011292:	b2d2      	uxtb	r2, r2
 8011294:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8011296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011298:	0e1a      	lsrs	r2, r3, #24
 801129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129c:	3309      	adds	r3, #9
 801129e:	b2d2      	uxtb	r2, r2
 80112a0:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 80112a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a4:	330a      	adds	r3, #10
 80112a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112a8:	b2d2      	uxtb	r2, r2
 80112aa:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 80112ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ae:	0a1a      	lsrs	r2, r3, #8
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b2:	330b      	adds	r3, #11
 80112b4:	b2d2      	uxtb	r2, r2
 80112b6:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 80112b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ba:	0c1a      	lsrs	r2, r3, #16
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112be:	330c      	adds	r3, #12
 80112c0:	b2d2      	uxtb	r2, r2
 80112c2:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 80112c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c6:	0e1a      	lsrs	r2, r3, #24
 80112c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ca:	330d      	adds	r3, #13
 80112cc:	b2d2      	uxtb	r2, r2
 80112ce:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 80112d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d2:	330e      	adds	r3, #14
 80112d4:	2200      	movs	r2, #0
 80112d6:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 80112d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112da:	330f      	adds	r3, #15
 80112dc:	1dba      	adds	r2, r7, #6
 80112de:	8812      	ldrh	r2, [r2, #0]
 80112e0:	b2d2      	uxtb	r2, r2
 80112e2:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	0018      	movs	r0, r3
 80112e8:	46bd      	mov	sp, r7
 80112ea:	b004      	add	sp, #16
 80112ec:	bdb0      	pop	{r4, r5, r7, pc}
 80112ee:	46c0      	nop			; (mov r8, r8)
 80112f0:	20000ed8 	.word	0x20000ed8

080112f4 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 80112f4:	b5b0      	push	{r4, r5, r7, lr}
 80112f6:	b0ca      	sub	sp, #296	; 0x128
 80112f8:	af04      	add	r7, sp, #16
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	000c      	movs	r4, r1
 80112fe:	0010      	movs	r0, r2
 8011300:	0019      	movs	r1, r3
 8011302:	4b49      	ldr	r3, [pc, #292]	; (8011428 <ComputeCmacB1+0x134>)
 8011304:	228c      	movs	r2, #140	; 0x8c
 8011306:	0052      	lsls	r2, r2, #1
 8011308:	4694      	mov	ip, r2
 801130a:	44bc      	add	ip, r7
 801130c:	4463      	add	r3, ip
 801130e:	1c22      	adds	r2, r4, #0
 8011310:	801a      	strh	r2, [r3, #0]
 8011312:	4b46      	ldr	r3, [pc, #280]	; (801142c <ComputeCmacB1+0x138>)
 8011314:	228c      	movs	r2, #140	; 0x8c
 8011316:	0052      	lsls	r2, r2, #1
 8011318:	4694      	mov	ip, r2
 801131a:	44bc      	add	ip, r7
 801131c:	4463      	add	r3, ip
 801131e:	1c02      	adds	r2, r0, #0
 8011320:	701a      	strb	r2, [r3, #0]
 8011322:	4b43      	ldr	r3, [pc, #268]	; (8011430 <ComputeCmacB1+0x13c>)
 8011324:	228c      	movs	r2, #140	; 0x8c
 8011326:	0052      	lsls	r2, r2, #1
 8011328:	4694      	mov	ip, r2
 801132a:	44bc      	add	ip, r7
 801132c:	4463      	add	r3, ip
 801132e:	1c0a      	adds	r2, r1, #0
 8011330:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d005      	beq.n	8011344 <ComputeCmacB1+0x50>
 8011338:	239c      	movs	r3, #156	; 0x9c
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	18fb      	adds	r3, r7, r3
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d101      	bne.n	8011348 <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011344:	2307      	movs	r3, #7
 8011346:	e06b      	b.n	8011420 <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011348:	4b37      	ldr	r3, [pc, #220]	; (8011428 <ComputeCmacB1+0x134>)
 801134a:	228c      	movs	r2, #140	; 0x8c
 801134c:	0052      	lsls	r2, r2, #1
 801134e:	4694      	mov	ip, r2
 8011350:	44bc      	add	ip, r7
 8011352:	4463      	add	r3, ip
 8011354:	881a      	ldrh	r2, [r3, #0]
 8011356:	2380      	movs	r3, #128	; 0x80
 8011358:	005b      	lsls	r3, r3, #1
 801135a:	429a      	cmp	r2, r3
 801135c:	d901      	bls.n	8011362 <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801135e:	230b      	movs	r3, #11
 8011360:	e05e      	b.n	8011420 <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011362:	2388      	movs	r3, #136	; 0x88
 8011364:	005a      	lsls	r2, r3, #1
 8011366:	2508      	movs	r5, #8
 8011368:	197b      	adds	r3, r7, r5
 801136a:	2100      	movs	r1, #0
 801136c:	0018      	movs	r0, r3
 801136e:	f004 fb81 	bl	8015a74 <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 8011372:	2394      	movs	r3, #148	; 0x94
 8011374:	005b      	lsls	r3, r3, #1
 8011376:	18fb      	adds	r3, r7, r3
 8011378:	781c      	ldrb	r4, [r3, #0]
 801137a:	4b2d      	ldr	r3, [pc, #180]	; (8011430 <ComputeCmacB1+0x13c>)
 801137c:	228c      	movs	r2, #140	; 0x8c
 801137e:	0052      	lsls	r2, r2, #1
 8011380:	4694      	mov	ip, r2
 8011382:	44bc      	add	ip, r7
 8011384:	4463      	add	r3, ip
 8011386:	781a      	ldrb	r2, [r3, #0]
 8011388:	4b28      	ldr	r3, [pc, #160]	; (801142c <ComputeCmacB1+0x138>)
 801138a:	218c      	movs	r1, #140	; 0x8c
 801138c:	0049      	lsls	r1, r1, #1
 801138e:	468c      	mov	ip, r1
 8011390:	44bc      	add	ip, r7
 8011392:	4463      	add	r3, ip
 8011394:	7819      	ldrb	r1, [r3, #0]
 8011396:	4b24      	ldr	r3, [pc, #144]	; (8011428 <ComputeCmacB1+0x134>)
 8011398:	208c      	movs	r0, #140	; 0x8c
 801139a:	0040      	lsls	r0, r0, #1
 801139c:	4684      	mov	ip, r0
 801139e:	44bc      	add	ip, r7
 80113a0:	4463      	add	r3, ip
 80113a2:	8818      	ldrh	r0, [r3, #0]
 80113a4:	197b      	adds	r3, r7, r5
 80113a6:	9303      	str	r3, [sp, #12]
 80113a8:	239a      	movs	r3, #154	; 0x9a
 80113aa:	005b      	lsls	r3, r3, #1
 80113ac:	18fb      	adds	r3, r7, r3
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	9302      	str	r3, [sp, #8]
 80113b2:	2398      	movs	r3, #152	; 0x98
 80113b4:	005b      	lsls	r3, r3, #1
 80113b6:	18fb      	adds	r3, r7, r3
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	9301      	str	r3, [sp, #4]
 80113bc:	2396      	movs	r3, #150	; 0x96
 80113be:	005b      	lsls	r3, r3, #1
 80113c0:	18fb      	adds	r3, r7, r3
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	0023      	movs	r3, r4
 80113c8:	f7ff ff08 	bl	80111dc <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80113cc:	197b      	adds	r3, r7, r5
 80113ce:	3310      	adds	r3, #16
 80113d0:	4a15      	ldr	r2, [pc, #84]	; (8011428 <ComputeCmacB1+0x134>)
 80113d2:	218c      	movs	r1, #140	; 0x8c
 80113d4:	0049      	lsls	r1, r1, #1
 80113d6:	468c      	mov	ip, r1
 80113d8:	44bc      	add	ip, r7
 80113da:	4462      	add	r2, ip
 80113dc:	8812      	ldrh	r2, [r2, #0]
 80113de:	6879      	ldr	r1, [r7, #4]
 80113e0:	0018      	movs	r0, r3
 80113e2:	f004 fb0b 	bl	80159fc <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80113e6:	4b10      	ldr	r3, [pc, #64]	; (8011428 <ComputeCmacB1+0x134>)
 80113e8:	228c      	movs	r2, #140	; 0x8c
 80113ea:	0052      	lsls	r2, r2, #1
 80113ec:	4694      	mov	ip, r2
 80113ee:	44bc      	add	ip, r7
 80113f0:	4463      	add	r3, ip
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	3310      	adds	r3, #16
 80113f6:	b299      	uxth	r1, r3
 80113f8:	239c      	movs	r3, #156	; 0x9c
 80113fa:	005b      	lsls	r3, r3, #1
 80113fc:	18fb      	adds	r3, r7, r3
 80113fe:	681c      	ldr	r4, [r3, #0]
 8011400:	4b0a      	ldr	r3, [pc, #40]	; (801142c <ComputeCmacB1+0x138>)
 8011402:	228c      	movs	r2, #140	; 0x8c
 8011404:	0052      	lsls	r2, r2, #1
 8011406:	4694      	mov	ip, r2
 8011408:	44bc      	add	ip, r7
 801140a:	4463      	add	r3, ip
 801140c:	781a      	ldrb	r2, [r3, #0]
 801140e:	1978      	adds	r0, r7, r5
 8011410:	0023      	movs	r3, r4
 8011412:	f7f8 ff15 	bl	800a240 <SecureElementComputeAesCmac>
 8011416:	1e03      	subs	r3, r0, #0
 8011418:	d001      	beq.n	801141e <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801141a:	230c      	movs	r3, #12
 801141c:	e000      	b.n	8011420 <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801141e:	2300      	movs	r3, #0
}
 8011420:	0018      	movs	r0, r3
 8011422:	46bd      	mov	sp, r7
 8011424:	b046      	add	sp, #280	; 0x118
 8011426:	bdb0      	pop	{r4, r5, r7, pc}
 8011428:	fffffeea 	.word	0xfffffeea
 801142c:	fffffee9 	.word	0xfffffee9
 8011430:	fffffee8 	.word	0xfffffee8

08011434 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	0002      	movs	r2, r0
 801143c:	6039      	str	r1, [r7, #0]
 801143e:	1dfb      	adds	r3, r7, #7
 8011440:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011442:	230f      	movs	r3, #15
 8011444:	18fb      	adds	r3, r7, r3
 8011446:	2200      	movs	r2, #0
 8011448:	701a      	strb	r2, [r3, #0]
 801144a:	e019      	b.n	8011480 <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801144c:	230f      	movs	r3, #15
 801144e:	18fb      	adds	r3, r7, r3
 8011450:	781a      	ldrb	r2, [r3, #0]
 8011452:	4b10      	ldr	r3, [pc, #64]	; (8011494 <GetKeyAddrItem+0x60>)
 8011454:	0092      	lsls	r2, r2, #2
 8011456:	5cd3      	ldrb	r3, [r2, r3]
 8011458:	1dfa      	adds	r2, r7, #7
 801145a:	7812      	ldrb	r2, [r2, #0]
 801145c:	429a      	cmp	r2, r3
 801145e:	d109      	bne.n	8011474 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 8011460:	230f      	movs	r3, #15
 8011462:	18fb      	adds	r3, r7, r3
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	009a      	lsls	r2, r3, #2
 8011468:	4b0a      	ldr	r3, [pc, #40]	; (8011494 <GetKeyAddrItem+0x60>)
 801146a:	18d2      	adds	r2, r2, r3
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011470:	2300      	movs	r3, #0
 8011472:	e00b      	b.n	801148c <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011474:	210f      	movs	r1, #15
 8011476:	187b      	adds	r3, r7, r1
 8011478:	781a      	ldrb	r2, [r3, #0]
 801147a:	187b      	adds	r3, r7, r1
 801147c:	3201      	adds	r2, #1
 801147e:	701a      	strb	r2, [r3, #0]
 8011480:	230f      	movs	r3, #15
 8011482:	18fb      	adds	r3, r7, r3
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	2b04      	cmp	r3, #4
 8011488:	d9e0      	bls.n	801144c <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801148a:	2309      	movs	r3, #9
}
 801148c:	0018      	movs	r0, r3
 801148e:	46bd      	mov	sp, r7
 8011490:	b004      	add	sp, #16
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20000068 	.word	0x20000068

08011498 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8011498:	b590      	push	{r4, r7, lr}
 801149a:	b089      	sub	sp, #36	; 0x24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60b9      	str	r1, [r7, #8]
 80114a0:	607a      	str	r2, [r7, #4]
 80114a2:	603b      	str	r3, [r7, #0]
 80114a4:	230f      	movs	r3, #15
 80114a6:	18fb      	adds	r3, r7, r3
 80114a8:	1c02      	adds	r2, r0, #0
 80114aa:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d005      	beq.n	80114be <DeriveSessionKey10x+0x26>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d002      	beq.n	80114be <DeriveSessionKey10x+0x26>
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d101      	bne.n	80114c2 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80114be:	2307      	movs	r3, #7
 80114c0:	e042      	b.n	8011548 <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 80114c2:	2310      	movs	r3, #16
 80114c4:	18fb      	adds	r3, r7, r3
 80114c6:	0018      	movs	r0, r3
 80114c8:	2310      	movs	r3, #16
 80114ca:	001a      	movs	r2, r3
 80114cc:	2100      	movs	r1, #0
 80114ce:	f00d fe35 	bl	801f13c <memset>

    switch( keyID )
 80114d2:	230f      	movs	r3, #15
 80114d4:	18fb      	adds	r3, r7, r3
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b04      	cmp	r3, #4
 80114da:	db0e      	blt.n	80114fa <DeriveSessionKey10x+0x62>
 80114dc:	2b06      	cmp	r3, #6
 80114de:	dd02      	ble.n	80114e6 <DeriveSessionKey10x+0x4e>
 80114e0:	2b07      	cmp	r3, #7
 80114e2:	d005      	beq.n	80114f0 <DeriveSessionKey10x+0x58>
 80114e4:	e009      	b.n	80114fa <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 80114e6:	2310      	movs	r3, #16
 80114e8:	18fb      	adds	r3, r7, r3
 80114ea:	2201      	movs	r2, #1
 80114ec:	701a      	strb	r2, [r3, #0]
            break;
 80114ee:	e006      	b.n	80114fe <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80114f0:	2310      	movs	r3, #16
 80114f2:	18fb      	adds	r3, r7, r3
 80114f4:	2202      	movs	r2, #2
 80114f6:	701a      	strb	r2, [r3, #0]
            break;
 80114f8:	e001      	b.n	80114fe <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80114fa:	2308      	movs	r3, #8
 80114fc:	e024      	b.n	8011548 <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80114fe:	2410      	movs	r4, #16
 8011500:	193b      	adds	r3, r7, r4
 8011502:	3301      	adds	r3, #1
 8011504:	68b9      	ldr	r1, [r7, #8]
 8011506:	2203      	movs	r2, #3
 8011508:	0018      	movs	r0, r3
 801150a:	f004 fa77 	bl	80159fc <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 801150e:	193b      	adds	r3, r7, r4
 8011510:	3304      	adds	r3, #4
 8011512:	6879      	ldr	r1, [r7, #4]
 8011514:	2203      	movs	r2, #3
 8011516:	0018      	movs	r0, r3
 8011518:	f004 fa70 	bl	80159fc <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 801151c:	193b      	adds	r3, r7, r4
 801151e:	3307      	adds	r3, #7
 8011520:	6839      	ldr	r1, [r7, #0]
 8011522:	2202      	movs	r2, #2
 8011524:	0018      	movs	r0, r3
 8011526:	f004 fa69 	bl	80159fc <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801152a:	230f      	movs	r3, #15
 801152c:	18fb      	adds	r3, r7, r3
 801152e:	781a      	ldrb	r2, [r3, #0]
 8011530:	1939      	adds	r1, r7, r4
 8011532:	4b07      	ldr	r3, [pc, #28]	; (8011550 <DeriveSessionKey10x+0xb8>)
 8011534:	6818      	ldr	r0, [r3, #0]
 8011536:	0013      	movs	r3, r2
 8011538:	2201      	movs	r2, #1
 801153a:	f7f8 ff51 	bl	800a3e0 <SecureElementDeriveAndStoreKey>
 801153e:	1e03      	subs	r3, r0, #0
 8011540:	d001      	beq.n	8011546 <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011542:	230c      	movs	r3, #12
 8011544:	e000      	b.n	8011548 <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011546:	2300      	movs	r3, #0
}
 8011548:	0018      	movs	r0, r3
 801154a:	46bd      	mov	sp, r7
 801154c:	b009      	add	sp, #36	; 0x24
 801154e:	bd90      	pop	{r4, r7, pc}
 8011550:	20000ed8 	.word	0x20000ed8

08011554 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 8011554:	b5b0      	push	{r4, r5, r7, lr}
 8011556:	b08a      	sub	sp, #40	; 0x28
 8011558:	af00      	add	r7, sp, #0
 801155a:	60b9      	str	r1, [r7, #8]
 801155c:	607a      	str	r2, [r7, #4]
 801155e:	603b      	str	r3, [r7, #0]
 8011560:	230f      	movs	r3, #15
 8011562:	18fb      	adds	r3, r7, r3
 8011564:	1c02      	adds	r2, r0, #0
 8011566:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d005      	beq.n	801157a <DeriveSessionKey11x+0x26>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d002      	beq.n	801157a <DeriveSessionKey11x+0x26>
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801157a:	2307      	movs	r3, #7
 801157c:	e05a      	b.n	8011634 <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 801157e:	2314      	movs	r3, #20
 8011580:	18fb      	adds	r3, r7, r3
 8011582:	0018      	movs	r0, r3
 8011584:	2310      	movs	r3, #16
 8011586:	001a      	movs	r2, r3
 8011588:	2100      	movs	r1, #0
 801158a:	f00d fdd7 	bl	801f13c <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 801158e:	2327      	movs	r3, #39	; 0x27
 8011590:	18fb      	adds	r3, r7, r3
 8011592:	2201      	movs	r2, #1
 8011594:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 8011596:	230f      	movs	r3, #15
 8011598:	18fb      	adds	r3, r7, r3
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	2b05      	cmp	r3, #5
 801159e:	d00d      	beq.n	80115bc <DeriveSessionKey11x+0x68>
 80115a0:	dc02      	bgt.n	80115a8 <DeriveSessionKey11x+0x54>
 80115a2:	2b04      	cmp	r3, #4
 80115a4:	d005      	beq.n	80115b2 <DeriveSessionKey11x+0x5e>
 80115a6:	e01c      	b.n	80115e2 <DeriveSessionKey11x+0x8e>
 80115a8:	2b06      	cmp	r3, #6
 80115aa:	d00c      	beq.n	80115c6 <DeriveSessionKey11x+0x72>
 80115ac:	2b07      	cmp	r3, #7
 80115ae:	d00f      	beq.n	80115d0 <DeriveSessionKey11x+0x7c>
 80115b0:	e017      	b.n	80115e2 <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 80115b2:	2314      	movs	r3, #20
 80115b4:	18fb      	adds	r3, r7, r3
 80115b6:	2201      	movs	r2, #1
 80115b8:	701a      	strb	r2, [r3, #0]
            break;
 80115ba:	e014      	b.n	80115e6 <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 80115bc:	2314      	movs	r3, #20
 80115be:	18fb      	adds	r3, r7, r3
 80115c0:	2203      	movs	r2, #3
 80115c2:	701a      	strb	r2, [r3, #0]
            break;
 80115c4:	e00f      	b.n	80115e6 <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 80115c6:	2314      	movs	r3, #20
 80115c8:	18fb      	adds	r3, r7, r3
 80115ca:	2204      	movs	r2, #4
 80115cc:	701a      	strb	r2, [r3, #0]
            break;
 80115ce:	e00a      	b.n	80115e6 <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 80115d0:	2327      	movs	r3, #39	; 0x27
 80115d2:	18fb      	adds	r3, r7, r3
 80115d4:	2200      	movs	r2, #0
 80115d6:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 80115d8:	2314      	movs	r3, #20
 80115da:	18fb      	adds	r3, r7, r3
 80115dc:	2202      	movs	r2, #2
 80115de:	701a      	strb	r2, [r3, #0]
            break;
 80115e0:	e001      	b.n	80115e6 <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80115e2:	2308      	movs	r3, #8
 80115e4:	e026      	b.n	8011634 <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80115e6:	2514      	movs	r5, #20
 80115e8:	197b      	adds	r3, r7, r5
 80115ea:	3301      	adds	r3, #1
 80115ec:	68b9      	ldr	r1, [r7, #8]
 80115ee:	2203      	movs	r2, #3
 80115f0:	0018      	movs	r0, r3
 80115f2:	f004 fa03 	bl	80159fc <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 80115f6:	197b      	adds	r3, r7, r5
 80115f8:	3304      	adds	r3, #4
 80115fa:	6879      	ldr	r1, [r7, #4]
 80115fc:	2208      	movs	r2, #8
 80115fe:	0018      	movs	r0, r3
 8011600:	f004 fa17 	bl	8015a32 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 8011604:	197b      	adds	r3, r7, r5
 8011606:	330c      	adds	r3, #12
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	2202      	movs	r2, #2
 801160c:	0018      	movs	r0, r3
 801160e:	f004 f9f5 	bl	80159fc <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011612:	230f      	movs	r3, #15
 8011614:	18fb      	adds	r3, r7, r3
 8011616:	781c      	ldrb	r4, [r3, #0]
 8011618:	2327      	movs	r3, #39	; 0x27
 801161a:	18fb      	adds	r3, r7, r3
 801161c:	781a      	ldrb	r2, [r3, #0]
 801161e:	1979      	adds	r1, r7, r5
 8011620:	4b06      	ldr	r3, [pc, #24]	; (801163c <DeriveSessionKey11x+0xe8>)
 8011622:	6818      	ldr	r0, [r3, #0]
 8011624:	0023      	movs	r3, r4
 8011626:	f7f8 fedb 	bl	800a3e0 <SecureElementDeriveAndStoreKey>
 801162a:	1e03      	subs	r3, r0, #0
 801162c:	d001      	beq.n	8011632 <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801162e:	230c      	movs	r3, #12
 8011630:	e000      	b.n	8011634 <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011632:	2300      	movs	r3, #0
}
 8011634:	0018      	movs	r0, r3
 8011636:	46bd      	mov	sp, r7
 8011638:	b00a      	add	sp, #40	; 0x28
 801163a:	bdb0      	pop	{r4, r5, r7, pc}
 801163c:	20000ed8 	.word	0x20000ed8

08011640 <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 8011640:	b590      	push	{r4, r7, lr}
 8011642:	b087      	sub	sp, #28
 8011644:	af00      	add	r7, sp, #0
 8011646:	0002      	movs	r2, r0
 8011648:	6039      	str	r1, [r7, #0]
 801164a:	1dfb      	adds	r3, r7, #7
 801164c:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d101      	bne.n	8011658 <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011654:	2307      	movs	r3, #7
 8011656:	e030      	b.n	80116ba <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 8011658:	2308      	movs	r3, #8
 801165a:	18fb      	adds	r3, r7, r3
 801165c:	0018      	movs	r0, r3
 801165e:	2310      	movs	r3, #16
 8011660:	001a      	movs	r2, r3
 8011662:	2100      	movs	r1, #0
 8011664:	f00d fd6a 	bl	801f13c <memset>

    switch( keyID )
 8011668:	1dfb      	adds	r3, r7, #7
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	2b02      	cmp	r3, #2
 801166e:	d002      	beq.n	8011676 <DeriveLifeTimeSessionKey+0x36>
 8011670:	2b03      	cmp	r3, #3
 8011672:	d005      	beq.n	8011680 <DeriveLifeTimeSessionKey+0x40>
 8011674:	e009      	b.n	801168a <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 8011676:	2308      	movs	r3, #8
 8011678:	18fb      	adds	r3, r7, r3
 801167a:	2206      	movs	r2, #6
 801167c:	701a      	strb	r2, [r3, #0]
            break;
 801167e:	e006      	b.n	801168e <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 8011680:	2308      	movs	r3, #8
 8011682:	18fb      	adds	r3, r7, r3
 8011684:	2205      	movs	r2, #5
 8011686:	701a      	strb	r2, [r3, #0]
            break;
 8011688:	e001      	b.n	801168e <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801168a:	2308      	movs	r3, #8
 801168c:	e015      	b.n	80116ba <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 801168e:	2408      	movs	r4, #8
 8011690:	193b      	adds	r3, r7, r4
 8011692:	3301      	adds	r3, #1
 8011694:	6839      	ldr	r1, [r7, #0]
 8011696:	2208      	movs	r2, #8
 8011698:	0018      	movs	r0, r3
 801169a:	f004 f9ca 	bl	8015a32 <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801169e:	1dfb      	adds	r3, r7, #7
 80116a0:	781a      	ldrb	r2, [r3, #0]
 80116a2:	1939      	adds	r1, r7, r4
 80116a4:	4b07      	ldr	r3, [pc, #28]	; (80116c4 <DeriveLifeTimeSessionKey+0x84>)
 80116a6:	6818      	ldr	r0, [r3, #0]
 80116a8:	0013      	movs	r3, r2
 80116aa:	2201      	movs	r2, #1
 80116ac:	f7f8 fe98 	bl	800a3e0 <SecureElementDeriveAndStoreKey>
 80116b0:	1e03      	subs	r3, r0, #0
 80116b2:	d001      	beq.n	80116b8 <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80116b4:	230c      	movs	r3, #12
 80116b6:	e000      	b.n	80116ba <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	0018      	movs	r0, r3
 80116bc:	46bd      	mov	sp, r7
 80116be:	b007      	add	sp, #28
 80116c0:	bd90      	pop	{r4, r7, pc}
 80116c2:	46c0      	nop			; (mov r8, r8)
 80116c4:	20000ed8 	.word	0x20000ed8

080116c8 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	0002      	movs	r2, r0
 80116d0:	6039      	str	r1, [r7, #0]
 80116d2:	1dfb      	adds	r3, r7, #7
 80116d4:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 80116da:	1dfb      	adds	r3, r7, #7
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	2b07      	cmp	r3, #7
 80116e0:	d83b      	bhi.n	801175a <CheckFCntDown+0x92>
 80116e2:	009a      	lsls	r2, r3, #2
 80116e4:	4b25      	ldr	r3, [pc, #148]	; (801177c <CheckFCntDown+0xb4>)
 80116e6:	18d3      	adds	r3, r2, r3
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 80116ec:	2300      	movs	r3, #0
 80116ee:	e040      	b.n	8011772 <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 80116f0:	4b23      	ldr	r3, [pc, #140]	; (8011780 <CheckFCntDown+0xb8>)
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 80116f8:	4b21      	ldr	r3, [pc, #132]	; (8011780 <CheckFCntDown+0xb8>)
 80116fa:	689a      	ldr	r2, [r3, #8]
 80116fc:	4b20      	ldr	r3, [pc, #128]	; (8011780 <CheckFCntDown+0xb8>)
 80116fe:	689b      	ldr	r3, [r3, #8]
 8011700:	320c      	adds	r2, #12
 8011702:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8011704:	e02b      	b.n	801175e <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 8011706:	4b1e      	ldr	r3, [pc, #120]	; (8011780 <CheckFCntDown+0xb8>)
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 801170e:	4b1c      	ldr	r3, [pc, #112]	; (8011780 <CheckFCntDown+0xb8>)
 8011710:	689a      	ldr	r2, [r3, #8]
 8011712:	4b1b      	ldr	r3, [pc, #108]	; (8011780 <CheckFCntDown+0xb8>)
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	3210      	adds	r2, #16
 8011718:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 801171a:	e020      	b.n	801175e <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 801171c:	4b18      	ldr	r3, [pc, #96]	; (8011780 <CheckFCntDown+0xb8>)
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	695b      	ldr	r3, [r3, #20]
 8011722:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011724:	4b16      	ldr	r3, [pc, #88]	; (8011780 <CheckFCntDown+0xb8>)
 8011726:	689a      	ldr	r2, [r3, #8]
 8011728:	4b15      	ldr	r3, [pc, #84]	; (8011780 <CheckFCntDown+0xb8>)
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	3214      	adds	r2, #20
 801172e:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8011730:	e015      	b.n	801175e <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 8011732:	4b13      	ldr	r3, [pc, #76]	; (8011780 <CheckFCntDown+0xb8>)
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	60fb      	str	r3, [r7, #12]
            break;
 801173a:	e010      	b.n	801175e <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 801173c:	4b10      	ldr	r3, [pc, #64]	; (8011780 <CheckFCntDown+0xb8>)
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	60fb      	str	r3, [r7, #12]
            break;
 8011744:	e00b      	b.n	801175e <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 8011746:	4b0e      	ldr	r3, [pc, #56]	; (8011780 <CheckFCntDown+0xb8>)
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	6a1b      	ldr	r3, [r3, #32]
 801174c:	60fb      	str	r3, [r7, #12]
            break;
 801174e:	e006      	b.n	801175e <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 8011750:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <CheckFCntDown+0xb8>)
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011756:	60fb      	str	r3, [r7, #12]
            break;
 8011758:	e001      	b.n	801175e <CheckFCntDown+0x96>
        default:
            return false;
 801175a:	2300      	movs	r3, #0
 801175c:	e009      	b.n	8011772 <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 801175e:	683a      	ldr	r2, [r7, #0]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	429a      	cmp	r2, r3
 8011764:	d802      	bhi.n	801176c <CheckFCntDown+0xa4>
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	3301      	adds	r3, #1
 801176a:	d101      	bne.n	8011770 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 801176c:	2301      	movs	r3, #1
 801176e:	e000      	b.n	8011772 <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 8011770:	2300      	movs	r3, #0
    }
}
 8011772:	0018      	movs	r0, r3
 8011774:	46bd      	mov	sp, r7
 8011776:	b004      	add	sp, #16
 8011778:	bd80      	pop	{r7, pc}
 801177a:	46c0      	nop			; (mov r8, r8)
 801177c:	0802199c 	.word	0x0802199c
 8011780:	20000ed8 	.word	0x20000ed8

08011784 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	0002      	movs	r2, r0
 801178c:	6039      	str	r1, [r7, #0]
 801178e:	1dfb      	adds	r3, r7, #7
 8011790:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8011792:	1dfb      	adds	r3, r7, #7
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	2b07      	cmp	r3, #7
 8011798:	d827      	bhi.n	80117ea <UpdateFCntDown+0x66>
 801179a:	009a      	lsls	r2, r3, #2
 801179c:	4b17      	ldr	r3, [pc, #92]	; (80117fc <UpdateFCntDown+0x78>)
 801179e:	18d3      	adds	r3, r2, r3
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 80117a4:	4b16      	ldr	r3, [pc, #88]	; (8011800 <UpdateFCntDown+0x7c>)
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	683a      	ldr	r2, [r7, #0]
 80117aa:	60da      	str	r2, [r3, #12]
            break;
 80117ac:	e01e      	b.n	80117ec <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 80117ae:	4b14      	ldr	r3, [pc, #80]	; (8011800 <UpdateFCntDown+0x7c>)
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	611a      	str	r2, [r3, #16]
            break;
 80117b6:	e019      	b.n	80117ec <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 80117b8:	4b11      	ldr	r3, [pc, #68]	; (8011800 <UpdateFCntDown+0x7c>)
 80117ba:	689b      	ldr	r3, [r3, #8]
 80117bc:	683a      	ldr	r2, [r7, #0]
 80117be:	615a      	str	r2, [r3, #20]
            break;
 80117c0:	e014      	b.n	80117ec <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 80117c2:	4b0f      	ldr	r3, [pc, #60]	; (8011800 <UpdateFCntDown+0x7c>)
 80117c4:	689b      	ldr	r3, [r3, #8]
 80117c6:	683a      	ldr	r2, [r7, #0]
 80117c8:	619a      	str	r2, [r3, #24]
            break;
 80117ca:	e00f      	b.n	80117ec <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 80117cc:	4b0c      	ldr	r3, [pc, #48]	; (8011800 <UpdateFCntDown+0x7c>)
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	683a      	ldr	r2, [r7, #0]
 80117d2:	61da      	str	r2, [r3, #28]
            break;
 80117d4:	e00a      	b.n	80117ec <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 80117d6:	4b0a      	ldr	r3, [pc, #40]	; (8011800 <UpdateFCntDown+0x7c>)
 80117d8:	689b      	ldr	r3, [r3, #8]
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	621a      	str	r2, [r3, #32]
            break;
 80117de:	e005      	b.n	80117ec <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 80117e0:	4b07      	ldr	r3, [pc, #28]	; (8011800 <UpdateFCntDown+0x7c>)
 80117e2:	689b      	ldr	r3, [r3, #8]
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80117e8:	e000      	b.n	80117ec <UpdateFCntDown+0x68>
        default:
            break;
 80117ea:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80117ec:	4b04      	ldr	r3, [pc, #16]	; (8011800 <UpdateFCntDown+0x7c>)
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	4798      	blx	r3
}
 80117f2:	46c0      	nop			; (mov r8, r8)
 80117f4:	46bd      	mov	sp, r7
 80117f6:	b002      	add	sp, #8
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	46c0      	nop			; (mov r8, r8)
 80117fc:	080219bc 	.word	0x080219bc
 8011800:	20000ed8 	.word	0x20000ed8

08011804 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
void ResetFCnts( void )
{
 8011804:	b580      	push	{r7, lr}
 8011806:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntUp = 0;
 8011808:	4b16      	ldr	r3, [pc, #88]	; (8011864 <ResetFCnts+0x60>)
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	2200      	movs	r2, #0
 801180e:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011810:	4b14      	ldr	r3, [pc, #80]	; (8011864 <ResetFCnts+0x60>)
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	2201      	movs	r2, #1
 8011816:	4252      	negs	r2, r2
 8011818:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801181a:	4b12      	ldr	r3, [pc, #72]	; (8011864 <ResetFCnts+0x60>)
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	2201      	movs	r2, #1
 8011820:	4252      	negs	r2, r2
 8011822:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011824:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <ResetFCnts+0x60>)
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	2201      	movs	r2, #1
 801182a:	4252      	negs	r2, r2
 801182c:	615a      	str	r2, [r3, #20]

    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801182e:	4b0d      	ldr	r3, [pc, #52]	; (8011864 <ResetFCnts+0x60>)
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	2201      	movs	r2, #1
 8011834:	4252      	negs	r2, r2
 8011836:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8011838:	4b0a      	ldr	r3, [pc, #40]	; (8011864 <ResetFCnts+0x60>)
 801183a:	689b      	ldr	r3, [r3, #8]
 801183c:	2201      	movs	r2, #1
 801183e:	4252      	negs	r2, r2
 8011840:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8011842:	4b08      	ldr	r3, [pc, #32]	; (8011864 <ResetFCnts+0x60>)
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	2201      	movs	r2, #1
 8011848:	4252      	negs	r2, r2
 801184a:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 801184c:	4b05      	ldr	r3, [pc, #20]	; (8011864 <ResetFCnts+0x60>)
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	2201      	movs	r2, #1
 8011852:	4252      	negs	r2, r2
 8011854:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011856:	4b03      	ldr	r3, [pc, #12]	; (8011864 <ResetFCnts+0x60>)
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	4798      	blx	r3
}
 801185c:	46c0      	nop			; (mov r8, r8)
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	46c0      	nop			; (mov r8, r8)
 8011864:	20000ed8 	.word	0x20000ed8

08011868 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	af00      	add	r7, sp, #0
    return;
 801186c:	46c0      	nop			; (mov r8, r8)
}
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
	...

08011874 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
 801187c:	4b22      	ldr	r3, [pc, #136]	; (8011908 <LoRaMacCryptoInit+0x94>)
 801187e:	2201      	movs	r2, #1
 8011880:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011882:	4b21      	ldr	r3, [pc, #132]	; (8011908 <LoRaMacCryptoInit+0x94>)
 8011884:	2201      	movs	r2, #1
 8011886:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
 8011888:	4b1f      	ldr	r3, [pc, #124]	; (8011908 <LoRaMacCryptoInit+0x94>)
 801188a:	2200      	movs	r2, #0
 801188c:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
 801188e:	4b1e      	ldr	r3, [pc, #120]	; (8011908 <LoRaMacCryptoInit+0x94>)
 8011890:	2200      	movs	r2, #0
 8011892:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
 8011894:	4b1c      	ldr	r3, [pc, #112]	; (8011908 <LoRaMacCryptoInit+0x94>)
 8011896:	2200      	movs	r2, #0
 8011898:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 801189a:	4b1b      	ldr	r3, [pc, #108]	; (8011908 <LoRaMacCryptoInit+0x94>)
 801189c:	4a1b      	ldr	r2, [pc, #108]	; (801190c <LoRaMacCryptoInit+0x98>)
 801189e:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d003      	beq.n	80118ae <LoRaMacCryptoInit+0x3a>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80118a6:	4b18      	ldr	r3, [pc, #96]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118a8:	687a      	ldr	r2, [r7, #4]
 80118aa:	60da      	str	r2, [r3, #12]
 80118ac:	e002      	b.n	80118b4 <LoRaMacCryptoInit+0x40>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80118ae:	4b16      	ldr	r3, [pc, #88]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118b0:	4a17      	ldr	r2, [pc, #92]	; (8011910 <LoRaMacCryptoInit+0x9c>)
 80118b2:	60da      	str	r2, [r3, #12]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80118b4:	4b14      	ldr	r3, [pc, #80]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	2230      	movs	r2, #48	; 0x30
 80118ba:	2100      	movs	r1, #0
 80118bc:	0018      	movs	r0, r3
 80118be:	f004 f8d9 	bl	8015a74 <memset1>

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
 80118c2:	4b11      	ldr	r3, [pc, #68]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 80118c8:	4b0f      	ldr	r3, [pc, #60]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	2200      	movs	r2, #0
 80118ce:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 80118d0:	4b0d      	ldr	r3, [pc, #52]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	2201      	movs	r2, #1
 80118d6:	4252      	negs	r2, r2
 80118d8:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80118da:	4b0b      	ldr	r3, [pc, #44]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	2201      	movs	r2, #1
 80118e0:	4252      	negs	r2, r2
 80118e2:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80118e4:	4b08      	ldr	r3, [pc, #32]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118e6:	689b      	ldr	r3, [r3, #8]
 80118e8:	2201      	movs	r2, #1
 80118ea:	4252      	negs	r2, r2
 80118ec:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 80118ee:	4b06      	ldr	r3, [pc, #24]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118f0:	689a      	ldr	r2, [r3, #8]
 80118f2:	4b05      	ldr	r3, [pc, #20]	; (8011908 <LoRaMacCryptoInit+0x94>)
 80118f4:	689b      	ldr	r3, [r3, #8]
 80118f6:	3214      	adds	r2, #20
 80118f8:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
 80118fa:	f7ff ff83 	bl	8011804 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	0018      	movs	r0, r3
 8011902:	46bd      	mov	sp, r7
 8011904:	b002      	add	sp, #8
 8011906:	bd80      	pop	{r7, pc}
 8011908:	20000ed8 	.word	0x20000ed8
 801190c:	20000ee8 	.word	0x20000ee8
 8011910:	08011869 	.word	0x08011869

08011914 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
    CryptoCtx.LrWanVersion = version;
 801191c:	4b03      	ldr	r3, [pc, #12]	; (801192c <LoRaMacCryptoSetLrWanVersion+0x18>)
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011922:	2300      	movs	r3, #0
}
 8011924:	0018      	movs	r0, r3
 8011926:	46bd      	mov	sp, r7
 8011928:	b002      	add	sp, #8
 801192a:	bd80      	pop	{r7, pc}
 801192c:	20000ed8 	.word	0x20000ed8

08011930 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d007      	beq.n	801194e <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 801193e:	6879      	ldr	r1, [r7, #4]
 8011940:	4b05      	ldr	r3, [pc, #20]	; (8011958 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8011942:	2230      	movs	r2, #48	; 0x30
 8011944:	0018      	movs	r0, r3
 8011946:	f004 f859 	bl	80159fc <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801194a:	2300      	movs	r3, #0
 801194c:	e000      	b.n	8011950 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801194e:	2307      	movs	r3, #7
    }
}
 8011950:	0018      	movs	r0, r3
 8011952:	46bd      	mov	sp, r7
 8011954:	b002      	add	sp, #8
 8011956:	bd80      	pop	{r7, pc}
 8011958:	20000ee8 	.word	0x20000ee8

0801195c <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2230      	movs	r2, #48	; 0x30
 8011968:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 801196a:	4b02      	ldr	r3, [pc, #8]	; (8011974 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 801196c:	0018      	movs	r0, r3
 801196e:	46bd      	mov	sp, r7
 8011970:	b002      	add	sp, #8
 8011972:	bd80      	pop	{r7, pc}
 8011974:	20000ee8 	.word	0x20000ee8

08011978 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	0002      	movs	r2, r0
 8011980:	6039      	str	r1, [r7, #0]
 8011982:	1dfb      	adds	r3, r7, #7
 8011984:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	1dfb      	adds	r3, r7, #7
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	0011      	movs	r1, r2
 801198e:	0018      	movs	r0, r3
 8011990:	f7f8 fbde 	bl	800a150 <SecureElementSetKey>
 8011994:	1e03      	subs	r3, r0, #0
 8011996:	d001      	beq.n	801199c <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011998:	230c      	movs	r3, #12
 801199a:	e000      	b.n	801199e <LoRaMacCryptoSetKey+0x26>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801199c:	2300      	movs	r3, #0
}
 801199e:	0018      	movs	r0, r3
 80119a0:	46bd      	mov	sp, r7
 80119a2:	b002      	add	sp, #8
 80119a4:	bd80      	pop	{r7, pc}
	...

080119a8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80119a8:	b5b0      	push	{r4, r5, r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d101      	bne.n	80119ba <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80119b6:	2307      	movs	r3, #7
 80119b8:	e064      	b.n	8011a84 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80119ba:	230f      	movs	r3, #15
 80119bc:	18fb      	adds	r3, r7, r3
 80119be:	2201      	movs	r2, #1
 80119c0:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80119c2:	240e      	movs	r4, #14
 80119c4:	193b      	adds	r3, r7, r4
 80119c6:	2210      	movs	r2, #16
 80119c8:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 80119ca:	f003 ffd7 	bl	801597c <rand1>
 80119ce:	0002      	movs	r2, r0
 80119d0:	4b2e      	ldr	r3, [pc, #184]	; (8011a8c <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80119d2:	689b      	ldr	r3, [r3, #8]
 80119d4:	b292      	uxth	r2, r2
 80119d6:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80119d8:	4b2c      	ldr	r3, [pc, #176]	; (8011a8c <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80119de:	4b2b      	ldr	r3, [pc, #172]	; (8011a8c <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 80119e0:	689b      	ldr	r3, [r3, #8]
 80119e2:	881a      	ldrh	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	330e      	adds	r3, #14
 80119ec:	0025      	movs	r5, r4
 80119ee:	193c      	adds	r4, r7, r4
 80119f0:	0019      	movs	r1, r3
 80119f2:	2002      	movs	r0, #2
 80119f4:	f7ff fe24 	bl	8011640 <DeriveLifeTimeSessionKey>
 80119f8:	0003      	movs	r3, r0
 80119fa:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80119fc:	002c      	movs	r4, r5
 80119fe:	193b      	adds	r3, r7, r4
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d003      	beq.n	8011a0e <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 8011a06:	230e      	movs	r3, #14
 8011a08:	18fb      	adds	r3, r7, r3
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	e03a      	b.n	8011a84 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	330e      	adds	r3, #14
 8011a12:	250e      	movs	r5, #14
 8011a14:	197c      	adds	r4, r7, r5
 8011a16:	0019      	movs	r1, r3
 8011a18:	2003      	movs	r0, #3
 8011a1a:	f7ff fe11 	bl	8011640 <DeriveLifeTimeSessionKey>
 8011a1e:	0003      	movs	r3, r0
 8011a20:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a22:	197b      	adds	r3, r7, r5
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 8011a2a:	230e      	movs	r3, #14
 8011a2c:	18fb      	adds	r3, r7, r3
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	e028      	b.n	8011a84 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	0018      	movs	r0, r3
 8011a36:	f001 f856 	bl	8012ae6 <LoRaMacSerializerJoinRequest>
 8011a3a:	1e03      	subs	r3, r0, #0
 8011a3c:	d001      	beq.n	8011a42 <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011a3e:	230e      	movs	r3, #14
 8011a40:	e020      	b.n	8011a84 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6818      	ldr	r0, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	3318      	adds	r3, #24
 8011a4a:	0019      	movs	r1, r3
 8011a4c:	250e      	movs	r5, #14
 8011a4e:	197c      	adds	r4, r7, r5
 8011a50:	230f      	movs	r3, #15
 8011a52:	18fb      	adds	r3, r7, r3
 8011a54:	781a      	ldrb	r2, [r3, #0]
 8011a56:	000b      	movs	r3, r1
 8011a58:	2113      	movs	r1, #19
 8011a5a:	f7ff f996 	bl	8010d8a <LoraMacCryptoComputeCmac>
 8011a5e:	0003      	movs	r3, r0
 8011a60:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a62:	197b      	adds	r3, r7, r5
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d003      	beq.n	8011a72 <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 8011a6a:	230e      	movs	r3, #14
 8011a6c:	18fb      	adds	r3, r7, r3
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	e008      	b.n	8011a84 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	0018      	movs	r0, r3
 8011a76:	f001 f836 	bl	8012ae6 <LoRaMacSerializerJoinRequest>
 8011a7a:	1e03      	subs	r3, r0, #0
 8011a7c:	d001      	beq.n	8011a82 <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011a7e:	230e      	movs	r3, #14
 8011a80:	e000      	b.n	8011a84 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	0018      	movs	r0, r3
 8011a86:	46bd      	mov	sp, r7
 8011a88:	b004      	add	sp, #16
 8011a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8011a8c:	20000ed8 	.word	0x20000ed8

08011a90 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8011a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a92:	b0cd      	sub	sp, #308	; 0x134
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60b9      	str	r1, [r7, #8]
 8011a98:	607a      	str	r2, [r7, #4]
 8011a9a:	4bde      	ldr	r3, [pc, #888]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011a9c:	2298      	movs	r2, #152	; 0x98
 8011a9e:	0052      	lsls	r2, r2, #1
 8011aa0:	4694      	mov	ip, r2
 8011aa2:	44bc      	add	ip, r7
 8011aa4:	4463      	add	r3, ip
 8011aa6:	1c02      	adds	r2, r0, #0
 8011aa8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d002      	beq.n	8011ab6 <LoRaMacCryptoHandleJoinAccept+0x26>
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d101      	bne.n	8011aba <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011ab6:	2307      	movs	r3, #7
 8011ab8:	e25e      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011aba:	2328      	movs	r3, #40	; 0x28
 8011abc:	33ff      	adds	r3, #255	; 0xff
 8011abe:	18fb      	adds	r3, r7, r3
 8011ac0:	2210      	movs	r2, #16
 8011ac2:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 8011ac4:	232e      	movs	r3, #46	; 0x2e
 8011ac6:	33ff      	adds	r3, #255	; 0xff
 8011ac8:	18fb      	adds	r3, r7, r3
 8011aca:	2200      	movs	r2, #0
 8011acc:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 8011ace:	4bd2      	ldr	r3, [pc, #840]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	2294      	movs	r2, #148	; 0x94
 8011ad4:	0052      	lsls	r2, r2, #1
 8011ad6:	18ba      	adds	r2, r7, r2
 8011ad8:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8011ada:	4bce      	ldr	r3, [pc, #824]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011adc:	2298      	movs	r2, #152	; 0x98
 8011ade:	0052      	lsls	r2, r2, #1
 8011ae0:	4694      	mov	ip, r2
 8011ae2:	44bc      	add	ip, r7
 8011ae4:	4463      	add	r3, ip
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	2bff      	cmp	r3, #255	; 0xff
 8011aea:	d10a      	bne.n	8011b02 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 8011aec:	2397      	movs	r3, #151	; 0x97
 8011aee:	005b      	lsls	r3, r3, #1
 8011af0:	18fb      	adds	r3, r7, r3
 8011af2:	2201      	movs	r2, #1
 8011af4:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 8011af6:	232e      	movs	r3, #46	; 0x2e
 8011af8:	33ff      	adds	r3, #255	; 0xff
 8011afa:	18fb      	adds	r3, r7, r3
 8011afc:	220c      	movs	r2, #12
 8011afe:	701a      	strb	r2, [r3, #0]
 8011b00:	e023      	b.n	8011b4a <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 8011b02:	2397      	movs	r3, #151	; 0x97
 8011b04:	005b      	lsls	r3, r3, #1
 8011b06:	18fb      	adds	r3, r7, r3
 8011b08:	2203      	movs	r2, #3
 8011b0a:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 8011b0c:	4bc1      	ldr	r3, [pc, #772]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011b0e:	2298      	movs	r2, #152	; 0x98
 8011b10:	0052      	lsls	r2, r2, #1
 8011b12:	4694      	mov	ip, r2
 8011b14:	44bc      	add	ip, r7
 8011b16:	4463      	add	r3, ip
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d008      	beq.n	8011b30 <LoRaMacCryptoHandleJoinAccept+0xa0>
 8011b1e:	4bbd      	ldr	r3, [pc, #756]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011b20:	2298      	movs	r2, #152	; 0x98
 8011b22:	0052      	lsls	r2, r2, #1
 8011b24:	4694      	mov	ip, r2
 8011b26:	44bc      	add	ip, r7
 8011b28:	4463      	add	r3, ip
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	2b02      	cmp	r3, #2
 8011b2e:	d105      	bne.n	8011b3c <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 8011b30:	4bba      	ldr	r3, [pc, #744]	; (8011e1c <LoRaMacCryptoHandleJoinAccept+0x38c>)
 8011b32:	2294      	movs	r2, #148	; 0x94
 8011b34:	0052      	lsls	r2, r2, #1
 8011b36:	18ba      	adds	r2, r7, r2
 8011b38:	6013      	str	r3, [r2, #0]
 8011b3a:	e006      	b.n	8011b4a <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 8011b3c:	4bb6      	ldr	r3, [pc, #728]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011b3e:	689b      	ldr	r3, [r3, #8]
 8011b40:	3328      	adds	r3, #40	; 0x28
 8011b42:	2294      	movs	r2, #148	; 0x94
 8011b44:	0052      	lsls	r2, r2, #1
 8011b46:	18ba      	adds	r2, r7, r2
 8011b48:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	791b      	ldrb	r3, [r3, #4]
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	242e      	movs	r4, #46	; 0x2e
 8011b52:	34ff      	adds	r4, #255	; 0xff
 8011b54:	193b      	adds	r3, r7, r4
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	18d3      	adds	r3, r2, r3
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	2514      	movs	r5, #20
 8011b60:	197b      	adds	r3, r7, r5
 8011b62:	2100      	movs	r1, #0
 8011b64:	0018      	movs	r0, r3
 8011b66:	f003 ff85 	bl	8015a74 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	1c58      	adds	r0, r3, #1
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	791b      	ldrb	r3, [r3, #4]
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	3b01      	subs	r3, #1
 8011b78:	b299      	uxth	r1, r3
 8011b7a:	193b      	adds	r3, r7, r4
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	197a      	adds	r2, r7, r5
 8011b80:	18d4      	adds	r4, r2, r3
 8011b82:	2397      	movs	r3, #151	; 0x97
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	18fb      	adds	r3, r7, r3
 8011b88:	781a      	ldrb	r2, [r3, #0]
 8011b8a:	0023      	movs	r3, r4
 8011b8c:	f7f8 fbbe 	bl	800a30c <SecureElementAesEncrypt>
 8011b90:	1e03      	subs	r3, r0, #0
 8011b92:	d001      	beq.n	8011b98 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011b94:	230c      	movs	r3, #12
 8011b96:	e1ef      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	1c58      	adds	r0, r3, #1
 8011b9e:	232e      	movs	r3, #46	; 0x2e
 8011ba0:	33ff      	adds	r3, #255	; 0xff
 8011ba2:	18fb      	adds	r3, r7, r3
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	2214      	movs	r2, #20
 8011ba8:	18ba      	adds	r2, r7, r2
 8011baa:	18d1      	adds	r1, r2, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	791b      	ldrb	r3, [r3, #4]
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	3b01      	subs	r3, #1
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	001a      	movs	r2, r3
 8011bb8:	f003 ff20 	bl	80159fc <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	f000 fd8e 	bl	80126e0 <LoRaMacParserJoinAccept>
 8011bc4:	1e03      	subs	r3, r0, #0
 8011bc6:	d001      	beq.n	8011bcc <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011bc8:	230d      	movs	r3, #13
 8011bca:	e1d5      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	7c1b      	ldrb	r3, [r3, #16]
 8011bd0:	227f      	movs	r2, #127	; 0x7f
 8011bd2:	4393      	bics	r3, r2
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d008      	beq.n	8011bec <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011bda:	4b8f      	ldr	r3, [pc, #572]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011bdc:	2201      	movs	r2, #1
 8011bde:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 8011be0:	2330      	movs	r3, #48	; 0x30
 8011be2:	33ff      	adds	r3, #255	; 0xff
 8011be4:	18fb      	adds	r3, r7, r3
 8011be6:	2202      	movs	r2, #2
 8011be8:	701a      	strb	r2, [r3, #0]
 8011bea:	e007      	b.n	8011bfc <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 8011bec:	4b8a      	ldr	r3, [pc, #552]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011bee:	2200      	movs	r2, #0
 8011bf0:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 8011bf2:	2330      	movs	r3, #48	; 0x30
 8011bf4:	33ff      	adds	r3, #255	; 0xff
 8011bf6:	18fb      	adds	r3, r7, r3
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8011bfc:	4b86      	ldr	r3, [pc, #536]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011bfe:	789b      	ldrb	r3, [r3, #2]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d11e      	bne.n	8011c42 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6818      	ldr	r0, [r3, #0]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	791b      	ldrb	r3, [r3, #4]
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	3b04      	subs	r3, #4
 8011c10:	b299      	uxth	r1, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011c16:	2628      	movs	r6, #40	; 0x28
 8011c18:	36ff      	adds	r6, #255	; 0xff
 8011c1a:	19bc      	adds	r4, r7, r6
 8011c1c:	2330      	movs	r3, #48	; 0x30
 8011c1e:	33ff      	adds	r3, #255	; 0xff
 8011c20:	18fb      	adds	r3, r7, r3
 8011c22:	781a      	ldrb	r2, [r3, #0]
 8011c24:	002b      	movs	r3, r5
 8011c26:	f7ff f8d1 	bl	8010dcc <VerifyCmac>
 8011c2a:	0003      	movs	r3, r0
 8011c2c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011c2e:	19bb      	adds	r3, r7, r6
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d100      	bne.n	8011c38 <LoRaMacCryptoHandleJoinAccept+0x1a8>
 8011c36:	e0b9      	b.n	8011dac <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 8011c38:	2328      	movs	r3, #40	; 0x28
 8011c3a:	33ff      	adds	r3, #255	; 0xff
 8011c3c:	18fb      	adds	r3, r7, r3
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	e19a      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 8011c42:	2092      	movs	r0, #146	; 0x92
 8011c44:	0040      	lsls	r0, r0, #1
 8011c46:	183b      	adds	r3, r7, r0
 8011c48:	2200      	movs	r2, #0
 8011c4a:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8011c4c:	183b      	adds	r3, r7, r0
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	183a      	adds	r2, r7, r0
 8011c52:	1c59      	adds	r1, r3, #1
 8011c54:	8011      	strh	r1, [r2, #0]
 8011c56:	0019      	movs	r1, r3
 8011c58:	4b71      	ldr	r3, [pc, #452]	; (8011e20 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011c5a:	2298      	movs	r2, #152	; 0x98
 8011c5c:	0052      	lsls	r2, r2, #1
 8011c5e:	4694      	mov	ip, r2
 8011c60:	44bc      	add	ip, r7
 8011c62:	4463      	add	r3, ip
 8011c64:	4a6b      	ldr	r2, [pc, #428]	; (8011e14 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011c66:	2498      	movs	r4, #152	; 0x98
 8011c68:	0064      	lsls	r4, r4, #1
 8011c6a:	46a4      	mov	ip, r4
 8011c6c:	44bc      	add	ip, r7
 8011c6e:	4462      	add	r2, ip
 8011c70:	7812      	ldrb	r2, [r2, #0]
 8011c72:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011c74:	0004      	movs	r4, r0
 8011c76:	183b      	adds	r3, r7, r0
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	2614      	movs	r6, #20
 8011c7c:	19ba      	adds	r2, r7, r6
 8011c7e:	18d3      	adds	r3, r2, r3
 8011c80:	68b9      	ldr	r1, [r7, #8]
 8011c82:	2208      	movs	r2, #8
 8011c84:	0018      	movs	r0, r3
 8011c86:	f003 fed4 	bl	8015a32 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8011c8a:	0020      	movs	r0, r4
 8011c8c:	183b      	adds	r3, r7, r0
 8011c8e:	183a      	adds	r2, r7, r0
 8011c90:	8812      	ldrh	r2, [r2, #0]
 8011c92:	3208      	adds	r2, #8
 8011c94:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8011c96:	4b60      	ldr	r3, [pc, #384]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011c98:	689b      	ldr	r3, [r3, #8]
 8011c9a:	8819      	ldrh	r1, [r3, #0]
 8011c9c:	183b      	adds	r3, r7, r0
 8011c9e:	881b      	ldrh	r3, [r3, #0]
 8011ca0:	0004      	movs	r4, r0
 8011ca2:	183a      	adds	r2, r7, r0
 8011ca4:	1c58      	adds	r0, r3, #1
 8011ca6:	8010      	strh	r0, [r2, #0]
 8011ca8:	001a      	movs	r2, r3
 8011caa:	b2c9      	uxtb	r1, r1
 8011cac:	4b5c      	ldr	r3, [pc, #368]	; (8011e20 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011cae:	2098      	movs	r0, #152	; 0x98
 8011cb0:	0040      	lsls	r0, r0, #1
 8011cb2:	4684      	mov	ip, r0
 8011cb4:	44bc      	add	ip, r7
 8011cb6:	4463      	add	r3, ip
 8011cb8:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 8011cba:	4b57      	ldr	r3, [pc, #348]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011cbc:	689b      	ldr	r3, [r3, #8]
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	0a1b      	lsrs	r3, r3, #8
 8011cc2:	b299      	uxth	r1, r3
 8011cc4:	193b      	adds	r3, r7, r4
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	193a      	adds	r2, r7, r4
 8011cca:	1c58      	adds	r0, r3, #1
 8011ccc:	8010      	strh	r0, [r2, #0]
 8011cce:	001a      	movs	r2, r3
 8011cd0:	b2c9      	uxtb	r1, r1
 8011cd2:	4b53      	ldr	r3, [pc, #332]	; (8011e20 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011cd4:	2098      	movs	r0, #152	; 0x98
 8011cd6:	0040      	lsls	r0, r0, #1
 8011cd8:	4684      	mov	ip, r0
 8011cda:	44bc      	add	ip, r7
 8011cdc:	4463      	add	r3, ip
 8011cde:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 8011ce0:	193b      	adds	r3, r7, r4
 8011ce2:	881b      	ldrh	r3, [r3, #0]
 8011ce4:	193a      	adds	r2, r7, r4
 8011ce6:	1c59      	adds	r1, r3, #1
 8011ce8:	8011      	strh	r1, [r2, #0]
 8011cea:	001a      	movs	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	7959      	ldrb	r1, [r3, #5]
 8011cf0:	4b4b      	ldr	r3, [pc, #300]	; (8011e20 <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011cf2:	2098      	movs	r0, #152	; 0x98
 8011cf4:	0040      	lsls	r0, r0, #1
 8011cf6:	4684      	mov	ip, r0
 8011cf8:	44bc      	add	ip, r7
 8011cfa:	4463      	add	r3, ip
 8011cfc:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	791b      	ldrb	r3, [r3, #4]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	232e      	movs	r3, #46	; 0x2e
 8011d06:	33ff      	adds	r3, #255	; 0xff
 8011d08:	18fb      	adds	r3, r7, r3
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	18d3      	adds	r3, r2, r3
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	3b05      	subs	r3, #5
 8011d14:	b299      	uxth	r1, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011d1a:	2328      	movs	r3, #40	; 0x28
 8011d1c:	33ff      	adds	r3, #255	; 0xff
 8011d1e:	18fc      	adds	r4, r7, r3
 8011d20:	2230      	movs	r2, #48	; 0x30
 8011d22:	32ff      	adds	r2, #255	; 0xff
 8011d24:	18bb      	adds	r3, r7, r2
 8011d26:	781a      	ldrb	r2, [r3, #0]
 8011d28:	19b8      	adds	r0, r7, r6
 8011d2a:	002b      	movs	r3, r5
 8011d2c:	f7ff f84e 	bl	8010dcc <VerifyCmac>
 8011d30:	0003      	movs	r3, r0
 8011d32:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d34:	2328      	movs	r3, #40	; 0x28
 8011d36:	33ff      	adds	r3, #255	; 0xff
 8011d38:	18fb      	adds	r3, r7, r3
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d004      	beq.n	8011d4a <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 8011d40:	2328      	movs	r3, #40	; 0x28
 8011d42:	33ff      	adds	r3, #255	; 0xff
 8011d44:	18fb      	adds	r3, r7, r3
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	e116      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	2290      	movs	r2, #144	; 0x90
 8011d4e:	0052      	lsls	r2, r2, #1
 8011d50:	18b9      	adds	r1, r7, r2
 8011d52:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	799b      	ldrb	r3, [r3, #6]
 8011d58:	18b9      	adds	r1, r7, r2
 8011d5a:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	79db      	ldrb	r3, [r3, #7]
 8011d60:	021b      	lsls	r3, r3, #8
 8011d62:	0011      	movs	r1, r2
 8011d64:	18ba      	adds	r2, r7, r2
 8011d66:	6812      	ldr	r2, [r2, #0]
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	000a      	movs	r2, r1
 8011d6c:	18b9      	adds	r1, r7, r2
 8011d6e:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7a1b      	ldrb	r3, [r3, #8]
 8011d74:	041b      	lsls	r3, r3, #16
 8011d76:	0011      	movs	r1, r2
 8011d78:	18ba      	adds	r2, r7, r2
 8011d7a:	6812      	ldr	r2, [r2, #0]
 8011d7c:	4313      	orrs	r3, r2
 8011d7e:	000a      	movs	r2, r1
 8011d80:	18b9      	adds	r1, r7, r2
 8011d82:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8011d84:	4b24      	ldr	r3, [pc, #144]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	18ba      	adds	r2, r7, r2
 8011d8c:	6812      	ldr	r2, [r2, #0]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d90a      	bls.n	8011da8 <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 8011d92:	4b21      	ldr	r3, [pc, #132]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	2290      	movs	r2, #144	; 0x90
 8011d98:	0052      	lsls	r2, r2, #1
 8011d9a:	18ba      	adds	r2, r7, r2
 8011d9c:	6812      	ldr	r2, [r2, #0]
 8011d9e:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 8011da0:	4b1d      	ldr	r3, [pc, #116]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	4798      	blx	r3
 8011da6:	e001      	b.n	8011dac <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8011da8:	2303      	movs	r3, #3
 8011daa:	e0e5      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011dac:	4b1a      	ldr	r3, [pc, #104]	; (8011e18 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011dae:	789b      	ldrb	r3, [r3, #2]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d167      	bne.n	8011e84 <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	1d99      	adds	r1, r3, #6
 8011db8:	2528      	movs	r5, #40	; 0x28
 8011dba:	35ff      	adds	r5, #255	; 0xff
 8011dbc:	197c      	adds	r4, r7, r5
 8011dbe:	2394      	movs	r3, #148	; 0x94
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	18fb      	adds	r3, r7, r3
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	2004      	movs	r0, #4
 8011dca:	f7ff fbc3 	bl	8011554 <DeriveSessionKey11x>
 8011dce:	0003      	movs	r3, r0
 8011dd0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011dd2:	197b      	adds	r3, r7, r5
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d004      	beq.n	8011de4 <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 8011dda:	2328      	movs	r3, #40	; 0x28
 8011ddc:	33ff      	adds	r3, #255	; 0xff
 8011dde:	18fb      	adds	r3, r7, r3
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	e0c9      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	1d99      	adds	r1, r3, #6
 8011de8:	2528      	movs	r5, #40	; 0x28
 8011dea:	35ff      	adds	r5, #255	; 0xff
 8011dec:	197c      	adds	r4, r7, r5
 8011dee:	2394      	movs	r3, #148	; 0x94
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	18fb      	adds	r3, r7, r3
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	2005      	movs	r0, #5
 8011dfa:	f7ff fbab 	bl	8011554 <DeriveSessionKey11x>
 8011dfe:	0003      	movs	r3, r0
 8011e00:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e02:	197b      	adds	r3, r7, r5
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00c      	beq.n	8011e24 <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 8011e0a:	2328      	movs	r3, #40	; 0x28
 8011e0c:	33ff      	adds	r3, #255	; 0xff
 8011e0e:	18fb      	adds	r3, r7, r3
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	e0b1      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
 8011e14:	fffffedf 	.word	0xfffffedf
 8011e18:	20000ed8 	.word	0x20000ed8
 8011e1c:	20000edc 	.word	0x20000edc
 8011e20:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	1d99      	adds	r1, r3, #6
 8011e28:	2528      	movs	r5, #40	; 0x28
 8011e2a:	35ff      	adds	r5, #255	; 0xff
 8011e2c:	197c      	adds	r4, r7, r5
 8011e2e:	2394      	movs	r3, #148	; 0x94
 8011e30:	005b      	lsls	r3, r3, #1
 8011e32:	18fb      	adds	r3, r7, r3
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	2006      	movs	r0, #6
 8011e3a:	f7ff fb8b 	bl	8011554 <DeriveSessionKey11x>
 8011e3e:	0003      	movs	r3, r0
 8011e40:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e42:	197b      	adds	r3, r7, r5
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d004      	beq.n	8011e54 <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 8011e4a:	2328      	movs	r3, #40	; 0x28
 8011e4c:	33ff      	adds	r3, #255	; 0xff
 8011e4e:	18fb      	adds	r3, r7, r3
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	e091      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	1d99      	adds	r1, r3, #6
 8011e58:	2528      	movs	r5, #40	; 0x28
 8011e5a:	35ff      	adds	r5, #255	; 0xff
 8011e5c:	197c      	adds	r4, r7, r5
 8011e5e:	2394      	movs	r3, #148	; 0x94
 8011e60:	005b      	lsls	r3, r3, #1
 8011e62:	18fb      	adds	r3, r7, r3
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	2007      	movs	r0, #7
 8011e6a:	f7ff fb73 	bl	8011554 <DeriveSessionKey11x>
 8011e6e:	0003      	movs	r3, r0
 8011e70:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011e72:	197b      	adds	r3, r7, r5
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d064      	beq.n	8011f44 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 8011e7a:	2328      	movs	r3, #40	; 0x28
 8011e7c:	33ff      	adds	r3, #255	; 0xff
 8011e7e:	18fb      	adds	r3, r7, r3
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	e079      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	1d99      	adds	r1, r3, #6
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	3309      	adds	r3, #9
 8011e8c:	001a      	movs	r2, r3
 8011e8e:	4b3c      	ldr	r3, [pc, #240]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011e90:	689b      	ldr	r3, [r3, #8]
 8011e92:	2528      	movs	r5, #40	; 0x28
 8011e94:	35ff      	adds	r5, #255	; 0xff
 8011e96:	197c      	adds	r4, r7, r5
 8011e98:	2007      	movs	r0, #7
 8011e9a:	f7ff fafd 	bl	8011498 <DeriveSessionKey10x>
 8011e9e:	0003      	movs	r3, r0
 8011ea0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ea2:	197b      	adds	r3, r7, r5
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d004      	beq.n	8011eb4 <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 8011eaa:	2328      	movs	r3, #40	; 0x28
 8011eac:	33ff      	adds	r3, #255	; 0xff
 8011eae:	18fb      	adds	r3, r7, r3
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	e061      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	1d99      	adds	r1, r3, #6
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	3309      	adds	r3, #9
 8011ebc:	001a      	movs	r2, r3
 8011ebe:	4b30      	ldr	r3, [pc, #192]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011ec0:	689b      	ldr	r3, [r3, #8]
 8011ec2:	2528      	movs	r5, #40	; 0x28
 8011ec4:	35ff      	adds	r5, #255	; 0xff
 8011ec6:	197c      	adds	r4, r7, r5
 8011ec8:	2006      	movs	r0, #6
 8011eca:	f7ff fae5 	bl	8011498 <DeriveSessionKey10x>
 8011ece:	0003      	movs	r3, r0
 8011ed0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ed2:	197b      	adds	r3, r7, r5
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d004      	beq.n	8011ee4 <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 8011eda:	2328      	movs	r3, #40	; 0x28
 8011edc:	33ff      	adds	r3, #255	; 0xff
 8011ede:	18fb      	adds	r3, r7, r3
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	e049      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	1d99      	adds	r1, r3, #6
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	3309      	adds	r3, #9
 8011eec:	001a      	movs	r2, r3
 8011eee:	4b24      	ldr	r3, [pc, #144]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	2528      	movs	r5, #40	; 0x28
 8011ef4:	35ff      	adds	r5, #255	; 0xff
 8011ef6:	197c      	adds	r4, r7, r5
 8011ef8:	2004      	movs	r0, #4
 8011efa:	f7ff facd 	bl	8011498 <DeriveSessionKey10x>
 8011efe:	0003      	movs	r3, r0
 8011f00:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011f02:	197b      	adds	r3, r7, r5
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d004      	beq.n	8011f14 <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 8011f0a:	2328      	movs	r3, #40	; 0x28
 8011f0c:	33ff      	adds	r3, #255	; 0xff
 8011f0e:	18fb      	adds	r3, r7, r3
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	e031      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	1d99      	adds	r1, r3, #6
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3309      	adds	r3, #9
 8011f1c:	001a      	movs	r2, r3
 8011f1e:	4b18      	ldr	r3, [pc, #96]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	2528      	movs	r5, #40	; 0x28
 8011f24:	35ff      	adds	r5, #255	; 0xff
 8011f26:	197c      	adds	r4, r7, r5
 8011f28:	2005      	movs	r0, #5
 8011f2a:	f7ff fab5 	bl	8011498 <DeriveSessionKey10x>
 8011f2e:	0003      	movs	r3, r0
 8011f30:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011f32:	197b      	adds	r3, r7, r5
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d004      	beq.n	8011f44 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 8011f3a:	2328      	movs	r3, #40	; 0x28
 8011f3c:	33ff      	adds	r3, #255	; 0xff
 8011f3e:	18fb      	adds	r3, r7, r3
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	e019      	b.n	8011f78 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 8011f44:	4b0e      	ldr	r3, [pc, #56]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011f4a:	4b0d      	ldr	r3, [pc, #52]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f52:	4b0b      	ldr	r3, [pc, #44]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f54:	689b      	ldr	r3, [r3, #8]
 8011f56:	2201      	movs	r2, #1
 8011f58:	4252      	negs	r2, r2
 8011f5a:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f5c:	4b08      	ldr	r3, [pc, #32]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	2201      	movs	r2, #1
 8011f62:	4252      	negs	r2, r2
 8011f64:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011f66:	4b06      	ldr	r3, [pc, #24]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	4252      	negs	r2, r2
 8011f6e:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011f70:	4b03      	ldr	r3, [pc, #12]	; (8011f80 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8011f76:	2300      	movs	r3, #0
}
 8011f78:	0018      	movs	r0, r3
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	b04d      	add	sp, #308	; 0x134
 8011f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f80:	20000ed8 	.word	0x20000ed8

08011f84 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8011f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f86:	b08f      	sub	sp, #60	; 0x3c
 8011f88:	af06      	add	r7, sp, #24
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	0008      	movs	r0, r1
 8011f8e:	0011      	movs	r1, r2
 8011f90:	607b      	str	r3, [r7, #4]
 8011f92:	230b      	movs	r3, #11
 8011f94:	18fb      	adds	r3, r7, r3
 8011f96:	1c02      	adds	r2, r0, #0
 8011f98:	701a      	strb	r2, [r3, #0]
 8011f9a:	230a      	movs	r3, #10
 8011f9c:	18fb      	adds	r3, r7, r3
 8011f9e:	1c0a      	adds	r2, r1, #0
 8011fa0:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011fa2:	231e      	movs	r3, #30
 8011fa4:	18fb      	adds	r3, r7, r3
 8011fa6:	2210      	movs	r2, #16
 8011fa8:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8011faa:	231f      	movs	r3, #31
 8011fac:	18fb      	adds	r3, r7, r3
 8011fae:	2207      	movs	r2, #7
 8011fb0:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d101      	bne.n	8011fbc <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011fb8:	2307      	movs	r3, #7
 8011fba:	e0ff      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 8011fbc:	4b81      	ldr	r3, [pc, #516]	; (80121c4 <LoRaMacCryptoSecureMessage+0x240>)
 8011fbe:	689b      	ldr	r3, [r3, #8]
 8011fc0:	689b      	ldr	r3, [r3, #8]
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d201      	bcs.n	8011fcc <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8011fc8:	2305      	movs	r3, #5
 8011fca:	e0f7      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2220      	movs	r2, #32
 8011fd0:	5c9b      	ldrb	r3, [r3, r2]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d103      	bne.n	8011fde <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8011fd6:	231f      	movs	r3, #31
 8011fd8:	18fb      	adds	r3, r7, r3
 8011fda:	2206      	movs	r2, #6
 8011fdc:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 8011fde:	4b79      	ldr	r3, [pc, #484]	; (80121c4 <LoRaMacCryptoSecureMessage+0x240>)
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d93e      	bls.n	8012068 <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2228      	movs	r2, #40	; 0x28
 8011ff2:	5c9b      	ldrb	r3, [r3, r2]
 8011ff4:	b299      	uxth	r1, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	689d      	ldr	r5, [r3, #8]
 8011ffa:	261e      	movs	r6, #30
 8011ffc:	19bc      	adds	r4, r7, r6
 8011ffe:	231f      	movs	r3, #31
 8012000:	18fb      	adds	r3, r7, r3
 8012002:	781a      	ldrb	r2, [r3, #0]
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	9301      	str	r3, [sp, #4]
 8012008:	2300      	movs	r3, #0
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	002b      	movs	r3, r5
 801200e:	f7fe fd05 	bl	8010a1c <PayloadEncrypt>
 8012012:	0003      	movs	r3, r0
 8012014:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012016:	19bb      	adds	r3, r7, r6
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d003      	beq.n	8012026 <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 801201e:	231e      	movs	r3, #30
 8012020:	18fb      	adds	r3, r7, r3
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	e0ca      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8012026:	4b67      	ldr	r3, [pc, #412]	; (80121c4 <LoRaMacCryptoSecureMessage+0x240>)
 8012028:	789b      	ldrb	r3, [r3, #2]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d11c      	bne.n	8012068 <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	7b1b      	ldrb	r3, [r3, #12]
 8012032:	071b      	lsls	r3, r3, #28
 8012034:	0f1b      	lsrs	r3, r3, #28
 8012036:	b2db      	uxtb	r3, r3
 8012038:	b298      	uxth	r0, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6899      	ldr	r1, [r3, #8]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	3310      	adds	r3, #16
 8012042:	251e      	movs	r5, #30
 8012044:	197c      	adds	r4, r7, r5
 8012046:	9301      	str	r3, [sp, #4]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	2300      	movs	r3, #0
 801204e:	2200      	movs	r2, #0
 8012050:	f7fe fde6 	bl	8010c20 <FOptsEncrypt>
 8012054:	0003      	movs	r3, r0
 8012056:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012058:	197b      	adds	r3, r7, r5
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d003      	beq.n	8012068 <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 8012060:	231e      	movs	r3, #30
 8012062:	18fb      	adds	r3, r7, r3
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	e0a9      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 8012068:	4b56      	ldr	r3, [pc, #344]	; (80121c4 <LoRaMacCryptoSecureMessage+0x240>)
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	68fa      	ldr	r2, [r7, #12]
 801206e:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8012070:	4b54      	ldr	r3, [pc, #336]	; (80121c4 <LoRaMacCryptoSecureMessage+0x240>)
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	0018      	movs	r0, r3
 801207a:	f000 fdcf 	bl	8012c1c <LoRaMacSerializerData>
 801207e:	1e03      	subs	r3, r0, #0
 8012080:	d001      	beq.n	8012086 <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012082:	230e      	movs	r3, #14
 8012084:	e09a      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8012086:	4b4f      	ldr	r3, [pc, #316]	; (80121c4 <LoRaMacCryptoSecureMessage+0x240>)
 8012088:	789b      	ldrb	r3, [r3, #2]
 801208a:	2b01      	cmp	r3, #1
 801208c:	d16a      	bne.n	8012164 <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 801208e:	2300      	movs	r3, #0
 8012090:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6818      	ldr	r0, [r3, #0]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	791b      	ldrb	r3, [r3, #4]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	3b04      	subs	r3, #4
 80120a2:	b299      	uxth	r1, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	7b1b      	ldrb	r3, [r3, #12]
 80120a8:	069b      	lsls	r3, r3, #26
 80120aa:	0fdb      	lsrs	r3, r3, #31
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	1e5a      	subs	r2, r3, #1
 80120b0:	4193      	sbcs	r3, r2
 80120b2:	b2dd      	uxtb	r5, r3
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	89d2      	ldrh	r2, [r2, #14]
 80120bc:	0016      	movs	r6, r2
 80120be:	221e      	movs	r2, #30
 80120c0:	18bc      	adds	r4, r7, r2
 80120c2:	2218      	movs	r2, #24
 80120c4:	18ba      	adds	r2, r7, r2
 80120c6:	9204      	str	r2, [sp, #16]
 80120c8:	9603      	str	r6, [sp, #12]
 80120ca:	9302      	str	r3, [sp, #8]
 80120cc:	230a      	movs	r3, #10
 80120ce:	18fb      	adds	r3, r7, r3
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	9301      	str	r3, [sp, #4]
 80120d4:	230b      	movs	r3, #11
 80120d6:	18fb      	adds	r3, r7, r3
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	002b      	movs	r3, r5
 80120de:	2205      	movs	r2, #5
 80120e0:	f7ff f908 	bl	80112f4 <ComputeCmacB1>
 80120e4:	0003      	movs	r3, r0
 80120e6:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80120e8:	221e      	movs	r2, #30
 80120ea:	18bb      	adds	r3, r7, r2
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d003      	beq.n	80120fa <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 80120f2:	231e      	movs	r3, #30
 80120f4:	18fb      	adds	r3, r7, r3
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	e060      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	791b      	ldrb	r3, [r3, #4]
 8012102:	b29b      	uxth	r3, r3
 8012104:	3b04      	subs	r3, #4
 8012106:	b299      	uxth	r1, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	7b1b      	ldrb	r3, [r3, #12]
 801210c:	069b      	lsls	r3, r3, #26
 801210e:	0fdb      	lsrs	r3, r3, #31
 8012110:	b2db      	uxtb	r3, r3
 8012112:	1e5a      	subs	r2, r3, #1
 8012114:	4193      	sbcs	r3, r2
 8012116:	b2dd      	uxtb	r5, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	89d2      	ldrh	r2, [r2, #14]
 8012120:	0016      	movs	r6, r2
 8012122:	221e      	movs	r2, #30
 8012124:	18bc      	adds	r4, r7, r2
 8012126:	2214      	movs	r2, #20
 8012128:	18ba      	adds	r2, r7, r2
 801212a:	9203      	str	r2, [sp, #12]
 801212c:	9602      	str	r6, [sp, #8]
 801212e:	9301      	str	r3, [sp, #4]
 8012130:	2300      	movs	r3, #0
 8012132:	9300      	str	r3, [sp, #0]
 8012134:	002b      	movs	r3, r5
 8012136:	2204      	movs	r2, #4
 8012138:	f7fe ff02 	bl	8010f40 <ComputeCmacB0>
 801213c:	0003      	movs	r3, r0
 801213e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012140:	221e      	movs	r2, #30
 8012142:	18bb      	adds	r3, r7, r2
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 801214a:	231e      	movs	r3, #30
 801214c:	18fb      	adds	r3, r7, r3
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	e034      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	041a      	lsls	r2, r3, #16
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	041b      	lsls	r3, r3, #16
 801215a:	0c1b      	lsrs	r3, r3, #16
 801215c:	431a      	orrs	r2, r3
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	62da      	str	r2, [r3, #44]	; 0x2c
 8012162:	e022      	b.n	80121aa <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6818      	ldr	r0, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	791b      	ldrb	r3, [r3, #4]
 801216c:	b29b      	uxth	r3, r3
 801216e:	3b04      	subs	r3, #4
 8012170:	b299      	uxth	r1, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	689b      	ldr	r3, [r3, #8]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	89d2      	ldrh	r2, [r2, #14]
 801217a:	0015      	movs	r5, r2
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	322c      	adds	r2, #44	; 0x2c
 8012180:	261e      	movs	r6, #30
 8012182:	19bc      	adds	r4, r7, r6
 8012184:	9203      	str	r2, [sp, #12]
 8012186:	9502      	str	r5, [sp, #8]
 8012188:	9301      	str	r3, [sp, #4]
 801218a:	2300      	movs	r3, #0
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	2300      	movs	r3, #0
 8012190:	2206      	movs	r2, #6
 8012192:	f7fe fed5 	bl	8010f40 <ComputeCmacB0>
 8012196:	0003      	movs	r3, r0
 8012198:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801219a:	19bb      	adds	r3, r7, r6
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d003      	beq.n	80121aa <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 80121a2:	231e      	movs	r3, #30
 80121a4:	18fb      	adds	r3, r7, r3
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	e008      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	0018      	movs	r0, r3
 80121ae:	f000 fd35 	bl	8012c1c <LoRaMacSerializerData>
 80121b2:	1e03      	subs	r3, r0, #0
 80121b4:	d001      	beq.n	80121ba <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80121b6:	230e      	movs	r3, #14
 80121b8:	e000      	b.n	80121bc <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80121ba:	2300      	movs	r3, #0
}
 80121bc:	0018      	movs	r0, r3
 80121be:	46bd      	mov	sp, r7
 80121c0:	b009      	add	sp, #36	; 0x24
 80121c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c4:	20000ed8 	.word	0x20000ed8

080121c8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80121c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ca:	b08b      	sub	sp, #44	; 0x2c
 80121cc:	af04      	add	r7, sp, #16
 80121ce:	60b9      	str	r1, [r7, #8]
 80121d0:	0011      	movs	r1, r2
 80121d2:	607b      	str	r3, [r7, #4]
 80121d4:	230f      	movs	r3, #15
 80121d6:	18fb      	adds	r3, r7, r3
 80121d8:	1c02      	adds	r2, r0, #0
 80121da:	701a      	strb	r2, [r3, #0]
 80121dc:	230e      	movs	r3, #14
 80121de:	18fb      	adds	r3, r7, r3
 80121e0:	1c0a      	adds	r2, r1, #0
 80121e2:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 80121e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d101      	bne.n	80121ee <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80121ea:	2307      	movs	r3, #7
 80121ec:	e0cf      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	230e      	movs	r3, #14
 80121f2:	18fb      	adds	r3, r7, r3
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	0011      	movs	r1, r2
 80121f8:	0018      	movs	r0, r3
 80121fa:	f7ff fa65 	bl	80116c8 <CheckFCntDown>
 80121fe:	0003      	movs	r3, r0
 8012200:	001a      	movs	r2, r3
 8012202:	2301      	movs	r3, #1
 8012204:	4053      	eors	r3, r2
 8012206:	b2db      	uxtb	r3, r3
 8012208:	2b00      	cmp	r3, #0
 801220a:	d001      	beq.n	8012210 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 801220c:	2305      	movs	r3, #5
 801220e:	e0be      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012210:	2315      	movs	r3, #21
 8012212:	18fb      	adds	r3, r7, r3
 8012214:	2210      	movs	r2, #16
 8012216:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8012218:	2317      	movs	r3, #23
 801221a:	18fb      	adds	r3, r7, r3
 801221c:	2207      	movs	r2, #7
 801221e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8012220:	2314      	movs	r3, #20
 8012222:	18fb      	adds	r3, r7, r3
 8012224:	2205      	movs	r2, #5
 8012226:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222a:	0018      	movs	r0, r3
 801222c:	f000 fb49 	bl	80128c2 <LoRaMacParserData>
 8012230:	1e03      	subs	r3, r0, #0
 8012232:	d001      	beq.n	8012238 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012234:	230d      	movs	r3, #13
 8012236:	e0aa      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012238:	2515      	movs	r5, #21
 801223a:	197c      	adds	r4, r7, r5
 801223c:	2310      	movs	r3, #16
 801223e:	18fa      	adds	r2, r7, r3
 8012240:	230f      	movs	r3, #15
 8012242:	18fb      	adds	r3, r7, r3
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	0011      	movs	r1, r2
 8012248:	0018      	movs	r0, r3
 801224a:	f7ff f8f3 	bl	8011434 <GetKeyAddrItem>
 801224e:	0003      	movs	r3, r0
 8012250:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012252:	197b      	adds	r3, r7, r5
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d003      	beq.n	8012262 <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 801225a:	2315      	movs	r3, #21
 801225c:	18fb      	adds	r3, r7, r3
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	e095      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 8012262:	693a      	ldr	r2, [r7, #16]
 8012264:	2317      	movs	r3, #23
 8012266:	18fb      	adds	r3, r7, r3
 8012268:	7852      	ldrb	r2, [r2, #1]
 801226a:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226e:	689b      	ldr	r3, [r3, #8]
 8012270:	68ba      	ldr	r2, [r7, #8]
 8012272:	429a      	cmp	r2, r3
 8012274:	d001      	beq.n	801227a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012276:	2302      	movs	r3, #2
 8012278:	e089      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227c:	7b1b      	ldrb	r3, [r3, #12]
 801227e:	069b      	lsls	r3, r3, #26
 8012280:	0fdb      	lsrs	r3, r3, #31
 8012282:	b2db      	uxtb	r3, r3
 8012284:	001a      	movs	r2, r3
 8012286:	2316      	movs	r3, #22
 8012288:	18fb      	adds	r3, r7, r3
 801228a:	1e51      	subs	r1, r2, #1
 801228c:	418a      	sbcs	r2, r1
 801228e:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8012290:	4b41      	ldr	r3, [pc, #260]	; (8012398 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 8012292:	789b      	ldrb	r3, [r3, #2]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d103      	bne.n	80122a0 <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8012298:	2316      	movs	r3, #22
 801229a:	18fb      	adds	r3, r7, r3
 801229c:	2200      	movs	r2, #0
 801229e:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80122a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a2:	6818      	ldr	r0, [r3, #0]
 80122a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a6:	791b      	ldrb	r3, [r3, #4]
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	3b04      	subs	r3, #4
 80122ac:	b299      	uxth	r1, r3
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b2:	2615      	movs	r6, #21
 80122b4:	19bc      	adds	r4, r7, r6
 80122b6:	2216      	movs	r2, #22
 80122b8:	18ba      	adds	r2, r7, r2
 80122ba:	7815      	ldrb	r5, [r2, #0]
 80122bc:	2214      	movs	r2, #20
 80122be:	18ba      	adds	r2, r7, r2
 80122c0:	7812      	ldrb	r2, [r2, #0]
 80122c2:	9303      	str	r3, [sp, #12]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	9302      	str	r3, [sp, #8]
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	9301      	str	r3, [sp, #4]
 80122cc:	2301      	movs	r3, #1
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	002b      	movs	r3, r5
 80122d2:	f7fe fed1 	bl	8011078 <VerifyCmacB0>
 80122d6:	0003      	movs	r3, r0
 80122d8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80122da:	19bb      	adds	r3, r7, r6
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d003      	beq.n	80122ea <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 80122e2:	2315      	movs	r3, #21
 80122e4:	18fb      	adds	r3, r7, r3
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	e051      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	2220      	movs	r2, #32
 80122ee:	5c9b      	ldrb	r3, [r3, r2]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d103      	bne.n	80122fc <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 80122f4:	2317      	movs	r3, #23
 80122f6:	18fb      	adds	r3, r7, r3
 80122f8:	2206      	movs	r2, #6
 80122fa:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80122fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012302:	2228      	movs	r2, #40	; 0x28
 8012304:	5c9b      	ldrb	r3, [r3, r2]
 8012306:	b299      	uxth	r1, r3
 8012308:	2615      	movs	r6, #21
 801230a:	19bc      	adds	r4, r7, r6
 801230c:	68bd      	ldr	r5, [r7, #8]
 801230e:	2317      	movs	r3, #23
 8012310:	18fb      	adds	r3, r7, r3
 8012312:	781a      	ldrb	r2, [r3, #0]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	9301      	str	r3, [sp, #4]
 8012318:	2301      	movs	r3, #1
 801231a:	9300      	str	r3, [sp, #0]
 801231c:	002b      	movs	r3, r5
 801231e:	f7fe fb7d 	bl	8010a1c <PayloadEncrypt>
 8012322:	0003      	movs	r3, r0
 8012324:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012326:	19bb      	adds	r3, r7, r6
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d003      	beq.n	8012336 <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 801232e:	2315      	movs	r3, #21
 8012330:	18fb      	adds	r3, r7, r3
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	e02b      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8012336:	4b18      	ldr	r3, [pc, #96]	; (8012398 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 8012338:	789b      	ldrb	r3, [r3, #2]
 801233a:	2b01      	cmp	r3, #1
 801233c:	d11e      	bne.n	801237c <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 801233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012340:	7b1b      	ldrb	r3, [r3, #12]
 8012342:	071b      	lsls	r3, r3, #28
 8012344:	0f1b      	lsrs	r3, r3, #28
 8012346:	b2db      	uxtb	r3, r3
 8012348:	b298      	uxth	r0, r3
 801234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234c:	3310      	adds	r3, #16
 801234e:	2515      	movs	r5, #21
 8012350:	197c      	adds	r4, r7, r5
 8012352:	220e      	movs	r2, #14
 8012354:	18ba      	adds	r2, r7, r2
 8012356:	7812      	ldrb	r2, [r2, #0]
 8012358:	68b9      	ldr	r1, [r7, #8]
 801235a:	9301      	str	r3, [sp, #4]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	9300      	str	r3, [sp, #0]
 8012360:	0013      	movs	r3, r2
 8012362:	2201      	movs	r2, #1
 8012364:	f7fe fc5c 	bl	8010c20 <FOptsEncrypt>
 8012368:	0003      	movs	r3, r0
 801236a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801236c:	197b      	adds	r3, r7, r5
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d003      	beq.n	801237c <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 8012374:	2315      	movs	r3, #21
 8012376:	18fb      	adds	r3, r7, r3
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	e008      	b.n	801238e <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	230e      	movs	r3, #14
 8012380:	18fb      	adds	r3, r7, r3
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	0011      	movs	r1, r2
 8012386:	0018      	movs	r0, r3
 8012388:	f7ff f9fc 	bl	8011784 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801238c:	2300      	movs	r3, #0
}
 801238e:	0018      	movs	r0, r3
 8012390:	46bd      	mov	sp, r7
 8012392:	b007      	add	sp, #28
 8012394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012396:	46c0      	nop			; (mov r8, r8)
 8012398:	20000ed8 	.word	0x20000ed8

0801239c <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 80123a0:	4b04      	ldr	r3, [pc, #16]	; (80123b4 <NvmCtxChanged+0x18>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 80123a8:	4b02      	ldr	r3, [pc, #8]	; (80123b4 <NvmCtxChanged+0x18>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4798      	blx	r3
    }
}
 80123ae:	46c0      	nop			; (mov r8, r8)
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	20000f38 	.word	0x20000f38

080123b8 <LoRaMacFCntHandlerInit>:


LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerInit( EventNvmCtxChanged fCntHandlerNvmCtxChanged )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
    // Initialize with default
    LoRaMacResetFCnts( );
 80123c0:	f000 f93e 	bl	8012640 <LoRaMacResetFCnts>

    // Assign callback
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
 80123c4:	4b03      	ldr	r3, [pc, #12]	; (80123d4 <LoRaMacFCntHandlerInit+0x1c>)
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	0018      	movs	r0, r3
 80123ce:	46bd      	mov	sp, r7
 80123d0:	b002      	add	sp, #8
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	20000f38 	.word	0x20000f38

080123d8 <LoRaMacFCntHandlerRestoreNvmCtx>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( fCntHandlerNvmCtx != NULL )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d007      	beq.n	80123f6 <LoRaMacFCntHandlerRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
 80123e6:	6879      	ldr	r1, [r7, #4]
 80123e8:	4b05      	ldr	r3, [pc, #20]	; (8012400 <LoRaMacFCntHandlerRestoreNvmCtx+0x28>)
 80123ea:	2220      	movs	r2, #32
 80123ec:	0018      	movs	r0, r3
 80123ee:	f003 fb05 	bl	80159fc <memcpy1>
        return LORAMAC_FCNT_HANDLER_SUCCESS;
 80123f2:	2300      	movs	r3, #0
 80123f4:	e000      	b.n	80123f8 <LoRaMacFCntHandlerRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 80123f6:	2304      	movs	r3, #4
    }
}
 80123f8:	0018      	movs	r0, r3
 80123fa:	46bd      	mov	sp, r7
 80123fc:	b002      	add	sp, #8
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	20000f18 	.word	0x20000f18

08012404 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2220      	movs	r2, #32
 8012410:	601a      	str	r2, [r3, #0]
    return &FCntHandlerNvmCtx;
 8012412:	4b02      	ldr	r3, [pc, #8]	; (801241c <LoRaMacFCntHandlerGetNvmCtx+0x18>)
}
 8012414:	0018      	movs	r0, r3
 8012416:	46bd      	mov	sp, r7
 8012418:	b002      	add	sp, #8
 801241a:	bd80      	pop	{r7, pc}
 801241c:	20000f18 	.word	0x20000f18

08012420 <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	60ba      	str	r2, [r7, #8]
 8012428:	607b      	str	r3, [r7, #4]
 801242a:	230f      	movs	r3, #15
 801242c:	18fb      	adds	r3, r7, r3
 801242e:	1c02      	adds	r2, r0, #0
 8012430:	701a      	strb	r2, [r3, #0]
 8012432:	230e      	movs	r3, #14
 8012434:	18fb      	adds	r3, r7, r3
 8012436:	1c0a      	adds	r2, r1, #0
 8012438:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 801243a:	2300      	movs	r3, #0
 801243c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d005      	beq.n	8012454 <LoRaMacGetFCntDown+0x34>
 8012448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244a:	2b00      	cmp	r3, #0
 801244c:	d002      	beq.n	8012454 <LoRaMacGetFCntDown+0x34>
 801244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012450:	2b00      	cmp	r3, #0
 8012452:	d101      	bne.n	8012458 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012454:	2304      	movs	r3, #4
 8012456:	e088      	b.n	801256a <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012458:	230f      	movs	r3, #15
 801245a:	18fb      	adds	r3, r7, r3
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	2b04      	cmp	r3, #4
 8012460:	d843      	bhi.n	80124ea <LoRaMacGetFCntDown+0xca>
 8012462:	009a      	lsls	r2, r3, #2
 8012464:	4b43      	ldr	r3, [pc, #268]	; (8012574 <LoRaMacGetFCntDown+0x154>)
 8012466:	18d3      	adds	r3, r2, r3
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801246c:	1d3b      	adds	r3, r7, #4
 801246e:	789b      	ldrb	r3, [r3, #2]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d117      	bne.n	80124a4 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012474:	230e      	movs	r3, #14
 8012476:	18fb      	adds	r3, r7, r3
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d004      	beq.n	8012488 <LoRaMacGetFCntDown+0x68>
 801247e:	230e      	movs	r3, #14
 8012480:	18fb      	adds	r3, r7, r3
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2b03      	cmp	r3, #3
 8012486:	d106      	bne.n	8012496 <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 8012488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248a:	2202      	movs	r2, #2
 801248c:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 801248e:	4b3a      	ldr	r3, [pc, #232]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 8012494:	e02b      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	2201      	movs	r2, #1
 801249a:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 801249c:	4b36      	ldr	r3, [pc, #216]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	617b      	str	r3, [r7, #20]
            break;
 80124a2:	e024      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	2203      	movs	r2, #3
 80124a8:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 80124aa:	4b33      	ldr	r3, [pc, #204]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	617b      	str	r3, [r7, #20]
            break;
 80124b0:	e01d      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80124b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b4:	2204      	movs	r2, #4
 80124b6:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 80124b8:	4b2f      	ldr	r3, [pc, #188]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 80124ba:	691b      	ldr	r3, [r3, #16]
 80124bc:	617b      	str	r3, [r7, #20]
            break;
 80124be:	e016      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 80124c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c2:	2205      	movs	r2, #5
 80124c4:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 80124c6:	4b2c      	ldr	r3, [pc, #176]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 80124c8:	695b      	ldr	r3, [r3, #20]
 80124ca:	617b      	str	r3, [r7, #20]
            break;
 80124cc:	e00f      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 80124ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d0:	2206      	movs	r2, #6
 80124d2:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80124d4:	4b28      	ldr	r3, [pc, #160]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 80124d6:	69db      	ldr	r3, [r3, #28]
 80124d8:	617b      	str	r3, [r7, #20]
            break;
 80124da:	e008      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 80124dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124de:	2207      	movs	r2, #7
 80124e0:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80124e2:	4b25      	ldr	r3, [pc, #148]	; (8012578 <LoRaMacGetFCntDown+0x158>)
 80124e4:	69db      	ldr	r3, [r3, #28]
 80124e6:	617b      	str	r3, [r7, #20]
            break;
 80124e8:	e001      	b.n	80124ee <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 80124ea:	2305      	movs	r3, #5
 80124ec:	e03d      	b.n	801256a <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	3301      	adds	r3, #1
 80124f2:	d105      	bne.n	8012500 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	89db      	ldrh	r3, [r3, #14]
 80124f8:	001a      	movs	r2, r3
 80124fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fc:	601a      	str	r2, [r3, #0]
 80124fe:	e023      	b.n	8012548 <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	89db      	ldrh	r3, [r3, #14]
 8012504:	001a      	movs	r2, r3
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	041b      	lsls	r3, r3, #16
 801250a:	0c1b      	lsrs	r3, r3, #16
 801250c:	1ad3      	subs	r3, r2, r3
 801250e:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	2b00      	cmp	r3, #0
 8012514:	dd05      	ble.n	8012522 <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 8012516:	693a      	ldr	r2, [r7, #16]
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	18d2      	adds	r2, r2, r3
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	601a      	str	r2, [r3, #0]
 8012520:	e012      	b.n	8012548 <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d104      	bne.n	8012532 <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	697a      	ldr	r2, [r7, #20]
 801252c:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 801252e:	2301      	movs	r3, #1
 8012530:	e01b      	b.n	801256a <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	0c1b      	lsrs	r3, r3, #16
 8012536:	041b      	lsls	r3, r3, #16
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	89d2      	ldrh	r2, [r2, #14]
 801253c:	189b      	adds	r3, r3, r2
 801253e:	2280      	movs	r2, #128	; 0x80
 8012540:	0252      	lsls	r2, r2, #9
 8012542:	189a      	adds	r2, r3, r2
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 8012548:	1d3b      	adds	r3, r7, #4
 801254a:	789b      	ldrb	r3, [r3, #2]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d10b      	bne.n	8012568 <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 8012550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	001a      	movs	r2, r3
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	1ad2      	subs	r2, r2, r3
 801255a:	2320      	movs	r3, #32
 801255c:	18fb      	adds	r3, r7, r3
 801255e:	881b      	ldrh	r3, [r3, #0]
 8012560:	429a      	cmp	r2, r3
 8012562:	db01      	blt.n	8012568 <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 8012564:	2302      	movs	r3, #2
 8012566:	e000      	b.n	801256a <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012568:	2300      	movs	r3, #0
}
 801256a:	0018      	movs	r0, r3
 801256c:	46bd      	mov	sp, r7
 801256e:	b006      	add	sp, #24
 8012570:	bd80      	pop	{r7, pc}
 8012572:	46c0      	nop			; (mov r8, r8)
 8012574:	080219dc 	.word	0x080219dc
 8012578:	20000f18 	.word	0x20000f18

0801257c <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	0002      	movs	r2, r0
 8012584:	6039      	str	r1, [r7, #0]
 8012586:	1dfb      	adds	r3, r7, #7
 8012588:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 801258a:	1dfb      	adds	r3, r7, #7
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b07      	cmp	r3, #7
 8012590:	d822      	bhi.n	80125d8 <LoRaMacSetFCntDown+0x5c>
 8012592:	009a      	lsls	r2, r3, #2
 8012594:	4b15      	ldr	r3, [pc, #84]	; (80125ec <LoRaMacSetFCntDown+0x70>)
 8012596:	18d3      	adds	r3, r2, r3
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 801259c:	2303      	movs	r3, #3
 801259e:	e020      	b.n	80125e2 <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 80125a0:	4b13      	ldr	r3, [pc, #76]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125a2:	683a      	ldr	r2, [r7, #0]
 80125a4:	605a      	str	r2, [r3, #4]
            break;
 80125a6:	e019      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 80125a8:	4b11      	ldr	r3, [pc, #68]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125aa:	683a      	ldr	r2, [r7, #0]
 80125ac:	609a      	str	r2, [r3, #8]
            break;
 80125ae:	e015      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 80125b0:	4b0f      	ldr	r3, [pc, #60]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125b2:	683a      	ldr	r2, [r7, #0]
 80125b4:	60da      	str	r2, [r3, #12]
            break;
 80125b6:	e011      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 80125b8:	4b0d      	ldr	r3, [pc, #52]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125ba:	683a      	ldr	r2, [r7, #0]
 80125bc:	611a      	str	r2, [r3, #16]
            break;
 80125be:	e00d      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 80125c0:	4b0b      	ldr	r3, [pc, #44]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	615a      	str	r2, [r3, #20]
            break;
 80125c6:	e009      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 80125c8:	4b09      	ldr	r3, [pc, #36]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125ca:	683a      	ldr	r2, [r7, #0]
 80125cc:	619a      	str	r2, [r3, #24]
            break;
 80125ce:	e005      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 80125d0:	4b07      	ldr	r3, [pc, #28]	; (80125f0 <LoRaMacSetFCntDown+0x74>)
 80125d2:	683a      	ldr	r2, [r7, #0]
 80125d4:	61da      	str	r2, [r3, #28]
            break;
 80125d6:	e001      	b.n	80125dc <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 80125d8:	2305      	movs	r3, #5
 80125da:	e002      	b.n	80125e2 <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 80125dc:	f7ff fede 	bl	801239c <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	0018      	movs	r0, r3
 80125e4:	46bd      	mov	sp, r7
 80125e6:	b002      	add	sp, #8
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	46c0      	nop			; (mov r8, r8)
 80125ec:	080219f0 	.word	0x080219f0
 80125f0:	20000f18 	.word	0x20000f18

080125f4 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d101      	bne.n	8012606 <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8012602:	2304      	movs	r3, #4
 8012604:	e005      	b.n	8012612 <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 8012606:	4b05      	ldr	r3, [pc, #20]	; (801261c <LoRaMacGetFCntUp+0x28>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	1c5a      	adds	r2, r3, #1
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012610:	2300      	movs	r3, #0
}
 8012612:	0018      	movs	r0, r3
 8012614:	46bd      	mov	sp, r7
 8012616:	b002      	add	sp, #8
 8012618:	bd80      	pop	{r7, pc}
 801261a:	46c0      	nop			; (mov r8, r8)
 801261c:	20000f18 	.word	0x20000f18

08012620 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 8012628:	4b04      	ldr	r3, [pc, #16]	; (801263c <LoRaMacSetFCntUp+0x1c>)
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 801262e:	f7ff feb5 	bl	801239c <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012632:	2300      	movs	r3, #0
}
 8012634:	0018      	movs	r0, r3
 8012636:	46bd      	mov	sp, r7
 8012638:	b002      	add	sp, #8
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20000f18 	.word	0x20000f18

08012640 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 8012644:	4b12      	ldr	r3, [pc, #72]	; (8012690 <LoRaMacResetFCnts+0x50>)
 8012646:	2200      	movs	r2, #0
 8012648:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801264a:	4b11      	ldr	r3, [pc, #68]	; (8012690 <LoRaMacResetFCnts+0x50>)
 801264c:	2201      	movs	r2, #1
 801264e:	4252      	negs	r2, r2
 8012650:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012652:	4b0f      	ldr	r3, [pc, #60]	; (8012690 <LoRaMacResetFCnts+0x50>)
 8012654:	2201      	movs	r2, #1
 8012656:	4252      	negs	r2, r2
 8012658:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801265a:	4b0d      	ldr	r3, [pc, #52]	; (8012690 <LoRaMacResetFCnts+0x50>)
 801265c:	2201      	movs	r2, #1
 801265e:	4252      	negs	r2, r2
 8012660:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8012662:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <LoRaMacResetFCnts+0x50>)
 8012664:	2201      	movs	r2, #1
 8012666:	4252      	negs	r2, r2
 8012668:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 801266a:	4b09      	ldr	r3, [pc, #36]	; (8012690 <LoRaMacResetFCnts+0x50>)
 801266c:	2201      	movs	r2, #1
 801266e:	4252      	negs	r2, r2
 8012670:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8012672:	4b07      	ldr	r3, [pc, #28]	; (8012690 <LoRaMacResetFCnts+0x50>)
 8012674:	2201      	movs	r2, #1
 8012676:	4252      	negs	r2, r2
 8012678:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 801267a:	4b05      	ldr	r3, [pc, #20]	; (8012690 <LoRaMacResetFCnts+0x50>)
 801267c:	2201      	movs	r2, #1
 801267e:	4252      	negs	r2, r2
 8012680:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 8012682:	f7ff fe8b 	bl	801239c <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012686:	2300      	movs	r3, #0
}
 8012688:	0018      	movs	r0, r3
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	46c0      	nop			; (mov r8, r8)
 8012690:	20000f18 	.word	0x20000f18

08012694 <LoRaMacFCntHandlerSetMulticastReference>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <LoRaMacFCntHandlerSetMulticastReference+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 80126a2:	2304      	movs	r3, #4
 80126a4:	e00f      	b.n	80126c6 <LoRaMacFCntHandlerSetMulticastReference+0x32>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4a09      	ldr	r2, [pc, #36]	; (80126d0 <LoRaMacFCntHandlerSetMulticastReference+0x3c>)
 80126aa:	609a      	str	r2, [r3, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	3320      	adds	r3, #32
 80126b0:	4a08      	ldr	r2, [pc, #32]	; (80126d4 <LoRaMacFCntHandlerSetMulticastReference+0x40>)
 80126b2:	609a      	str	r2, [r3, #8]
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	3340      	adds	r3, #64	; 0x40
 80126b8:	4a07      	ldr	r2, [pc, #28]	; (80126d8 <LoRaMacFCntHandlerSetMulticastReference+0x44>)
 80126ba:	609a      	str	r2, [r3, #8]
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	3360      	adds	r3, #96	; 0x60
 80126c0:	4a06      	ldr	r2, [pc, #24]	; (80126dc <LoRaMacFCntHandlerSetMulticastReference+0x48>)
 80126c2:	609a      	str	r2, [r3, #8]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	0018      	movs	r0, r3
 80126c8:	46bd      	mov	sp, r7
 80126ca:	b002      	add	sp, #8
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	46c0      	nop			; (mov r8, r8)
 80126d0:	20000f28 	.word	0x20000f28
 80126d4:	20000f2c 	.word	0x20000f2c
 80126d8:	20000f30 	.word	0x20000f30
 80126dc:	20000f34 	.word	0x20000f34

080126e0 <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80126e0:	b590      	push	{r4, r7, lr}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d003      	beq.n	80126f6 <LoRaMacParserJoinAccept+0x16>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d101      	bne.n	80126fa <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80126f6:	2302      	movs	r3, #2
 80126f8:	e0df      	b.n	80128ba <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 80126fa:	240e      	movs	r4, #14
 80126fc:	193b      	adds	r3, r7, r4
 80126fe:	2200      	movs	r2, #0
 8012700:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681a      	ldr	r2, [r3, #0]
 8012706:	193b      	adds	r3, r7, r4
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	1939      	adds	r1, r7, r4
 801270c:	1c58      	adds	r0, r3, #1
 801270e:	8008      	strh	r0, [r1, #0]
 8012710:	18d3      	adds	r3, r2, r3
 8012712:	781a      	ldrb	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	1d98      	adds	r0, r3, #6
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	193b      	adds	r3, r7, r4
 8012722:	881b      	ldrh	r3, [r3, #0]
 8012724:	18d3      	adds	r3, r2, r3
 8012726:	2203      	movs	r2, #3
 8012728:	0019      	movs	r1, r3
 801272a:	f003 f967 	bl	80159fc <memcpy1>
    bufItr = bufItr + 3;
 801272e:	193b      	adds	r3, r7, r4
 8012730:	193a      	adds	r2, r7, r4
 8012732:	8812      	ldrh	r2, [r2, #0]
 8012734:	3203      	adds	r2, #3
 8012736:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	3309      	adds	r3, #9
 801273c:	0018      	movs	r0, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	193b      	adds	r3, r7, r4
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	18d3      	adds	r3, r2, r3
 8012748:	2203      	movs	r2, #3
 801274a:	0019      	movs	r1, r3
 801274c:	f003 f956 	bl	80159fc <memcpy1>
    bufItr = bufItr + 3;
 8012750:	193b      	adds	r3, r7, r4
 8012752:	193a      	adds	r2, r7, r4
 8012754:	8812      	ldrh	r2, [r2, #0]
 8012756:	3203      	adds	r2, #3
 8012758:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	193b      	adds	r3, r7, r4
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	1939      	adds	r1, r7, r4
 8012764:	1c58      	adds	r0, r3, #1
 8012766:	8008      	strh	r0, [r1, #0]
 8012768:	18d3      	adds	r3, r2, r3
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	001a      	movs	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	193b      	adds	r3, r7, r4
 8012778:	881b      	ldrh	r3, [r3, #0]
 801277a:	1939      	adds	r1, r7, r4
 801277c:	1c58      	adds	r0, r3, #1
 801277e:	8008      	strh	r0, [r1, #0]
 8012780:	18d3      	adds	r3, r2, r3
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	021a      	lsls	r2, r3, #8
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	68db      	ldr	r3, [r3, #12]
 801278a:	431a      	orrs	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	193b      	adds	r3, r7, r4
 8012796:	881b      	ldrh	r3, [r3, #0]
 8012798:	1939      	adds	r1, r7, r4
 801279a:	1c58      	adds	r0, r3, #1
 801279c:	8008      	strh	r0, [r1, #0]
 801279e:	18d3      	adds	r3, r2, r3
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	041a      	lsls	r2, r3, #16
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	431a      	orrs	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	193b      	adds	r3, r7, r4
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	1939      	adds	r1, r7, r4
 80127b8:	1c58      	adds	r0, r3, #1
 80127ba:	8008      	strh	r0, [r1, #0]
 80127bc:	18d3      	adds	r3, r2, r3
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	061a      	lsls	r2, r3, #24
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	431a      	orrs	r2, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	193b      	adds	r3, r7, r4
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	1939      	adds	r1, r7, r4
 80127d6:	1c58      	adds	r0, r3, #1
 80127d8:	8008      	strh	r0, [r1, #0]
 80127da:	18d3      	adds	r3, r2, r3
 80127dc:	781a      	ldrb	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	193b      	adds	r3, r7, r4
 80127e8:	881b      	ldrh	r3, [r3, #0]
 80127ea:	1939      	adds	r1, r7, r4
 80127ec:	1c58      	adds	r0, r3, #1
 80127ee:	8008      	strh	r0, [r1, #0]
 80127f0:	18d3      	adds	r3, r2, r3
 80127f2:	781a      	ldrb	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	791b      	ldrb	r3, [r3, #4]
 80127fc:	1f1a      	subs	r2, r3, #4
 80127fe:	193b      	adds	r3, r7, r4
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	2b10      	cmp	r3, #16
 8012806:	d112      	bne.n	801282e <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3312      	adds	r3, #18
 801280c:	0018      	movs	r0, r3
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	240e      	movs	r4, #14
 8012814:	193b      	adds	r3, r7, r4
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	18d3      	adds	r3, r2, r3
 801281a:	2210      	movs	r2, #16
 801281c:	0019      	movs	r1, r3
 801281e:	f003 f8ed 	bl	80159fc <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8012822:	193b      	adds	r3, r7, r4
 8012824:	193a      	adds	r2, r7, r4
 8012826:	8812      	ldrh	r2, [r2, #0]
 8012828:	3210      	adds	r2, #16
 801282a:	801a      	strh	r2, [r3, #0]
 801282c:	e00a      	b.n	8012844 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	791b      	ldrb	r3, [r3, #4]
 8012832:	1f1a      	subs	r2, r3, #4
 8012834:	230e      	movs	r3, #14
 8012836:	18fb      	adds	r3, r7, r3
 8012838:	881b      	ldrh	r3, [r3, #0]
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	2b00      	cmp	r3, #0
 801283e:	dd01      	ble.n	8012844 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 8012840:	2301      	movs	r3, #1
 8012842:	e03a      	b.n	80128ba <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	240e      	movs	r4, #14
 801284a:	193b      	adds	r3, r7, r4
 801284c:	881b      	ldrh	r3, [r3, #0]
 801284e:	1939      	adds	r1, r7, r4
 8012850:	1c58      	adds	r0, r3, #1
 8012852:	8008      	strh	r0, [r1, #0]
 8012854:	18d3      	adds	r3, r2, r3
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	001a      	movs	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	193b      	adds	r3, r7, r4
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	1939      	adds	r1, r7, r4
 8012868:	1c58      	adds	r0, r3, #1
 801286a:	8008      	strh	r0, [r1, #0]
 801286c:	18d3      	adds	r3, r2, r3
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	021a      	lsls	r2, r3, #8
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012876:	431a      	orrs	r2, r3
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	193b      	adds	r3, r7, r4
 8012882:	881b      	ldrh	r3, [r3, #0]
 8012884:	1939      	adds	r1, r7, r4
 8012886:	1c58      	adds	r0, r3, #1
 8012888:	8008      	strh	r0, [r1, #0]
 801288a:	18d3      	adds	r3, r2, r3
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	041a      	lsls	r2, r3, #16
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012894:	431a      	orrs	r2, r3
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	193b      	adds	r3, r7, r4
 80128a0:	881b      	ldrh	r3, [r3, #0]
 80128a2:	1939      	adds	r1, r7, r4
 80128a4:	1c58      	adds	r0, r3, #1
 80128a6:	8008      	strh	r0, [r1, #0]
 80128a8:	18d3      	adds	r3, r2, r3
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	061a      	lsls	r2, r3, #24
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b2:	431a      	orrs	r2, r3
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	0018      	movs	r0, r3
 80128bc:	46bd      	mov	sp, r7
 80128be:	b005      	add	sp, #20
 80128c0:	bd90      	pop	{r4, r7, pc}

080128c2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80128c2:	b590      	push	{r4, r7, lr}
 80128c4:	b085      	sub	sp, #20
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d003      	beq.n	80128d8 <LoRaMacParserData+0x16>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d101      	bne.n	80128dc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80128d8:	2302      	movs	r3, #2
 80128da:	e100      	b.n	8012ade <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 80128dc:	240e      	movs	r4, #14
 80128de:	193b      	adds	r3, r7, r4
 80128e0:	2200      	movs	r2, #0
 80128e2:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	193b      	adds	r3, r7, r4
 80128ea:	881b      	ldrh	r3, [r3, #0]
 80128ec:	1939      	adds	r1, r7, r4
 80128ee:	1c58      	adds	r0, r3, #1
 80128f0:	8008      	strh	r0, [r1, #0]
 80128f2:	18d3      	adds	r3, r2, r3
 80128f4:	781a      	ldrb	r2, [r3, #0]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	193b      	adds	r3, r7, r4
 8012900:	881b      	ldrh	r3, [r3, #0]
 8012902:	1939      	adds	r1, r7, r4
 8012904:	1c58      	adds	r0, r3, #1
 8012906:	8008      	strh	r0, [r1, #0]
 8012908:	18d3      	adds	r3, r2, r3
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	001a      	movs	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	193b      	adds	r3, r7, r4
 8012918:	881b      	ldrh	r3, [r3, #0]
 801291a:	1939      	adds	r1, r7, r4
 801291c:	1c58      	adds	r0, r3, #1
 801291e:	8008      	strh	r0, [r1, #0]
 8012920:	18d3      	adds	r3, r2, r3
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	021a      	lsls	r2, r3, #8
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	431a      	orrs	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	193b      	adds	r3, r7, r4
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	1939      	adds	r1, r7, r4
 801293a:	1c58      	adds	r0, r3, #1
 801293c:	8008      	strh	r0, [r1, #0]
 801293e:	18d3      	adds	r3, r2, r3
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	041a      	lsls	r2, r3, #16
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	689b      	ldr	r3, [r3, #8]
 8012948:	431a      	orrs	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	193b      	adds	r3, r7, r4
 8012954:	881b      	ldrh	r3, [r3, #0]
 8012956:	1939      	adds	r1, r7, r4
 8012958:	1c58      	adds	r0, r3, #1
 801295a:	8008      	strh	r0, [r1, #0]
 801295c:	18d3      	adds	r3, r2, r3
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	061a      	lsls	r2, r3, #24
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	431a      	orrs	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681a      	ldr	r2, [r3, #0]
 8012970:	193b      	adds	r3, r7, r4
 8012972:	881b      	ldrh	r3, [r3, #0]
 8012974:	1939      	adds	r1, r7, r4
 8012976:	1c58      	adds	r0, r3, #1
 8012978:	8008      	strh	r0, [r1, #0]
 801297a:	18d3      	adds	r3, r2, r3
 801297c:	781a      	ldrb	r2, [r3, #0]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	193b      	adds	r3, r7, r4
 8012988:	881b      	ldrh	r3, [r3, #0]
 801298a:	1939      	adds	r1, r7, r4
 801298c:	1c58      	adds	r0, r3, #1
 801298e:	8008      	strh	r0, [r1, #0]
 8012990:	18d3      	adds	r3, r2, r3
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	b29a      	uxth	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681a      	ldr	r2, [r3, #0]
 801299e:	193b      	adds	r3, r7, r4
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	1939      	adds	r1, r7, r4
 80129a4:	1c58      	adds	r0, r3, #1
 80129a6:	8008      	strh	r0, [r1, #0]
 80129a8:	18d3      	adds	r3, r2, r3
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	0219      	lsls	r1, r3, #8
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	89db      	ldrh	r3, [r3, #14]
 80129b2:	b21a      	sxth	r2, r3
 80129b4:	b20b      	sxth	r3, r1
 80129b6:	4313      	orrs	r3, r2
 80129b8:	b21b      	sxth	r3, r3
 80129ba:	b29a      	uxth	r2, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3310      	adds	r3, #16
 80129c4:	0018      	movs	r0, r3
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	193b      	adds	r3, r7, r4
 80129cc:	881b      	ldrh	r3, [r3, #0]
 80129ce:	18d1      	adds	r1, r2, r3
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7b1b      	ldrb	r3, [r3, #12]
 80129d4:	071b      	lsls	r3, r3, #28
 80129d6:	0f1b      	lsrs	r3, r3, #28
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	b29b      	uxth	r3, r3
 80129dc:	001a      	movs	r2, r3
 80129de:	f003 f80d 	bl	80159fc <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	7b1b      	ldrb	r3, [r3, #12]
 80129e6:	071b      	lsls	r3, r3, #28
 80129e8:	0f1b      	lsrs	r3, r3, #28
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	b299      	uxth	r1, r3
 80129ee:	193b      	adds	r3, r7, r4
 80129f0:	193a      	adds	r2, r7, r4
 80129f2:	8812      	ldrh	r2, [r2, #0]
 80129f4:	188a      	adds	r2, r1, r2
 80129f6:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2220      	movs	r2, #32
 80129fc:	2100      	movs	r1, #0
 80129fe:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2228      	movs	r2, #40	; 0x28
 8012a04:	2100      	movs	r1, #0
 8012a06:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	791b      	ldrb	r3, [r3, #4]
 8012a0c:	001a      	movs	r2, r3
 8012a0e:	193b      	adds	r3, r7, r4
 8012a10:	881b      	ldrh	r3, [r3, #0]
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	3b04      	subs	r3, #4
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	dd2f      	ble.n	8012a7a <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	240e      	movs	r4, #14
 8012a20:	193b      	adds	r3, r7, r4
 8012a22:	881b      	ldrh	r3, [r3, #0]
 8012a24:	1939      	adds	r1, r7, r4
 8012a26:	1c58      	adds	r0, r3, #1
 8012a28:	8008      	strh	r0, [r1, #0]
 8012a2a:	18d3      	adds	r3, r2, r3
 8012a2c:	7819      	ldrb	r1, [r3, #0]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2220      	movs	r2, #32
 8012a32:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	791a      	ldrb	r2, [r3, #4]
 8012a38:	193b      	adds	r3, r7, r4
 8012a3a:	881b      	ldrh	r3, [r3, #0]
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	3b04      	subs	r3, #4
 8012a44:	b2d9      	uxtb	r1, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2228      	movs	r2, #40	; 0x28
 8012a4a:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	193b      	adds	r3, r7, r4
 8012a56:	881b      	ldrh	r3, [r3, #0]
 8012a58:	18d1      	adds	r1, r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2228      	movs	r2, #40	; 0x28
 8012a5e:	5c9b      	ldrb	r3, [r3, r2]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	001a      	movs	r2, r3
 8012a64:	f002 ffca 	bl	80159fc <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2228      	movs	r2, #40	; 0x28
 8012a6c:	5c9b      	ldrb	r3, [r3, r2]
 8012a6e:	b299      	uxth	r1, r3
 8012a70:	193b      	adds	r3, r7, r4
 8012a72:	193a      	adds	r2, r7, r4
 8012a74:	8812      	ldrh	r2, [r2, #0]
 8012a76:	188a      	adds	r2, r1, r2
 8012a78:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	791b      	ldrb	r3, [r3, #4]
 8012a82:	3b04      	subs	r3, #4
 8012a84:	18d3      	adds	r3, r2, r3
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	001a      	movs	r2, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6819      	ldr	r1, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	791b      	ldrb	r3, [r3, #4]
 8012a9a:	3b03      	subs	r3, #3
 8012a9c:	18cb      	adds	r3, r1, r3
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	021b      	lsls	r3, r3, #8
 8012aa2:	431a      	orrs	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6819      	ldr	r1, [r3, #0]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	791b      	ldrb	r3, [r3, #4]
 8012ab4:	3b02      	subs	r3, #2
 8012ab6:	18cb      	adds	r3, r1, r3
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	041b      	lsls	r3, r3, #16
 8012abc:	431a      	orrs	r2, r3
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6819      	ldr	r1, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	791b      	ldrb	r3, [r3, #4]
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	18cb      	adds	r3, r1, r3
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	061b      	lsls	r3, r3, #24
 8012ad6:	431a      	orrs	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012adc:	2300      	movs	r3, #0
}
 8012ade:	0018      	movs	r0, r3
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	b005      	add	sp, #20
 8012ae4:	bd90      	pop	{r4, r7, pc}

08012ae6 <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012ae6:	b5b0      	push	{r4, r5, r7, lr}
 8012ae8:	b084      	sub	sp, #16
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d003      	beq.n	8012afc <LoRaMacSerializerJoinRequest+0x16>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d101      	bne.n	8012b00 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012afc:	2301      	movs	r3, #1
 8012afe:	e089      	b.n	8012c14 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8012b00:	230e      	movs	r3, #14
 8012b02:	18fb      	adds	r3, r7, r3
 8012b04:	2200      	movs	r2, #0
 8012b06:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	791b      	ldrb	r3, [r3, #4]
 8012b0c:	2b16      	cmp	r3, #22
 8012b0e:	d801      	bhi.n	8012b14 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012b10:	2302      	movs	r3, #2
 8012b12:	e07f      	b.n	8012c14 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	240e      	movs	r4, #14
 8012b1a:	193b      	adds	r3, r7, r4
 8012b1c:	881b      	ldrh	r3, [r3, #0]
 8012b1e:	1939      	adds	r1, r7, r4
 8012b20:	1c58      	adds	r0, r3, #1
 8012b22:	8008      	strh	r0, [r1, #0]
 8012b24:	18d3      	adds	r3, r2, r3
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	7952      	ldrb	r2, [r2, #5]
 8012b2a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	193b      	adds	r3, r7, r4
 8012b32:	881b      	ldrh	r3, [r3, #0]
 8012b34:	18d0      	adds	r0, r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	3306      	adds	r3, #6
 8012b3a:	2208      	movs	r2, #8
 8012b3c:	0019      	movs	r1, r3
 8012b3e:	f002 ff78 	bl	8015a32 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8012b42:	193b      	adds	r3, r7, r4
 8012b44:	193a      	adds	r2, r7, r4
 8012b46:	8812      	ldrh	r2, [r2, #0]
 8012b48:	3208      	adds	r2, #8
 8012b4a:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	193b      	adds	r3, r7, r4
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	18d0      	adds	r0, r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	330e      	adds	r3, #14
 8012b5a:	2208      	movs	r2, #8
 8012b5c:	0019      	movs	r1, r3
 8012b5e:	f002 ff68 	bl	8015a32 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012b62:	193b      	adds	r3, r7, r4
 8012b64:	0025      	movs	r5, r4
 8012b66:	193a      	adds	r2, r7, r4
 8012b68:	8812      	ldrh	r2, [r2, #0]
 8012b6a:	3208      	adds	r2, #8
 8012b6c:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	8ad8      	ldrh	r0, [r3, #22]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	197b      	adds	r3, r7, r5
 8012b78:	881b      	ldrh	r3, [r3, #0]
 8012b7a:	1979      	adds	r1, r7, r5
 8012b7c:	1c5c      	adds	r4, r3, #1
 8012b7e:	800c      	strh	r4, [r1, #0]
 8012b80:	18d3      	adds	r3, r2, r3
 8012b82:	b2c2      	uxtb	r2, r0
 8012b84:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	8adb      	ldrh	r3, [r3, #22]
 8012b8a:	0a1b      	lsrs	r3, r3, #8
 8012b8c:	b298      	uxth	r0, r3
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	197b      	adds	r3, r7, r5
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	1979      	adds	r1, r7, r5
 8012b98:	1c5c      	adds	r4, r3, #1
 8012b9a:	800c      	strh	r4, [r1, #0]
 8012b9c:	18d3      	adds	r3, r2, r3
 8012b9e:	b2c2      	uxtb	r2, r0
 8012ba0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6998      	ldr	r0, [r3, #24]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	197b      	adds	r3, r7, r5
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	1979      	adds	r1, r7, r5
 8012bb0:	1c5c      	adds	r4, r3, #1
 8012bb2:	800c      	strh	r4, [r1, #0]
 8012bb4:	18d3      	adds	r3, r2, r3
 8012bb6:	b2c2      	uxtb	r2, r0
 8012bb8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	699b      	ldr	r3, [r3, #24]
 8012bbe:	0a18      	lsrs	r0, r3, #8
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	197b      	adds	r3, r7, r5
 8012bc6:	881b      	ldrh	r3, [r3, #0]
 8012bc8:	1979      	adds	r1, r7, r5
 8012bca:	1c5c      	adds	r4, r3, #1
 8012bcc:	800c      	strh	r4, [r1, #0]
 8012bce:	18d3      	adds	r3, r2, r3
 8012bd0:	b2c2      	uxtb	r2, r0
 8012bd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	699b      	ldr	r3, [r3, #24]
 8012bd8:	0c18      	lsrs	r0, r3, #16
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681a      	ldr	r2, [r3, #0]
 8012bde:	197b      	adds	r3, r7, r5
 8012be0:	881b      	ldrh	r3, [r3, #0]
 8012be2:	1979      	adds	r1, r7, r5
 8012be4:	1c5c      	adds	r4, r3, #1
 8012be6:	800c      	strh	r4, [r1, #0]
 8012be8:	18d3      	adds	r3, r2, r3
 8012bea:	b2c2      	uxtb	r2, r0
 8012bec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	699b      	ldr	r3, [r3, #24]
 8012bf2:	0e18      	lsrs	r0, r3, #24
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	197b      	adds	r3, r7, r5
 8012bfa:	881b      	ldrh	r3, [r3, #0]
 8012bfc:	1979      	adds	r1, r7, r5
 8012bfe:	1c5c      	adds	r4, r3, #1
 8012c00:	800c      	strh	r4, [r1, #0]
 8012c02:	18d3      	adds	r3, r2, r3
 8012c04:	b2c2      	uxtb	r2, r0
 8012c06:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012c08:	197b      	adds	r3, r7, r5
 8012c0a:	881b      	ldrh	r3, [r3, #0]
 8012c0c:	b2da      	uxtb	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	0018      	movs	r0, r3
 8012c16:	46bd      	mov	sp, r7
 8012c18:	b004      	add	sp, #16
 8012c1a:	bdb0      	pop	{r4, r5, r7, pc}

08012c1c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012c1c:	b5b0      	push	{r4, r5, r7, lr}
 8012c1e:	b084      	sub	sp, #16
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d003      	beq.n	8012c32 <LoRaMacSerializerData+0x16>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d101      	bne.n	8012c36 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012c32:	2301      	movs	r3, #1
 8012c34:	e110      	b.n	8012e58 <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 8012c36:	230e      	movs	r3, #14
 8012c38:	18fb      	adds	r3, r7, r3
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012c3e:	230c      	movs	r3, #12
 8012c40:	18fb      	adds	r3, r7, r3
 8012c42:	2208      	movs	r2, #8
 8012c44:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2228      	movs	r2, #40	; 0x28
 8012c4a:	5c9b      	ldrb	r3, [r3, r2]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d109      	bne.n	8012c64 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	791b      	ldrb	r3, [r3, #4]
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	220c      	movs	r2, #12
 8012c58:	18ba      	adds	r2, r7, r2
 8012c5a:	8812      	ldrh	r2, [r2, #0]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d916      	bls.n	8012c8e <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012c60:	2302      	movs	r3, #2
 8012c62:	e0f9      	b.n	8012e58 <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	791b      	ldrb	r3, [r3, #4]
 8012c68:	0018      	movs	r0, r3
 8012c6a:	230c      	movs	r3, #12
 8012c6c:	18fb      	adds	r3, r7, r3
 8012c6e:	881b      	ldrh	r3, [r3, #0]
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	7b12      	ldrb	r2, [r2, #12]
 8012c74:	0712      	lsls	r2, r2, #28
 8012c76:	0f12      	lsrs	r2, r2, #28
 8012c78:	b2d2      	uxtb	r2, r2
 8012c7a:	189b      	adds	r3, r3, r2
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	2128      	movs	r1, #40	; 0x28
 8012c80:	5c52      	ldrb	r2, [r2, r1]
 8012c82:	189b      	adds	r3, r3, r2
 8012c84:	3301      	adds	r3, #1
 8012c86:	4298      	cmp	r0, r3
 8012c88:	da01      	bge.n	8012c8e <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012c8a:	2302      	movs	r3, #2
 8012c8c:	e0e4      	b.n	8012e58 <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	250e      	movs	r5, #14
 8012c94:	197b      	adds	r3, r7, r5
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	1979      	adds	r1, r7, r5
 8012c9a:	1c58      	adds	r0, r3, #1
 8012c9c:	8008      	strh	r0, [r1, #0]
 8012c9e:	18d3      	adds	r3, r2, r3
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	7952      	ldrb	r2, [r2, #5]
 8012ca4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6898      	ldr	r0, [r3, #8]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	197b      	adds	r3, r7, r5
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	1979      	adds	r1, r7, r5
 8012cb4:	1c5c      	adds	r4, r3, #1
 8012cb6:	800c      	strh	r4, [r1, #0]
 8012cb8:	18d3      	adds	r3, r2, r3
 8012cba:	b2c2      	uxtb	r2, r0
 8012cbc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	0a18      	lsrs	r0, r3, #8
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	197b      	adds	r3, r7, r5
 8012cca:	881b      	ldrh	r3, [r3, #0]
 8012ccc:	1979      	adds	r1, r7, r5
 8012cce:	1c5c      	adds	r4, r3, #1
 8012cd0:	800c      	strh	r4, [r1, #0]
 8012cd2:	18d3      	adds	r3, r2, r3
 8012cd4:	b2c2      	uxtb	r2, r0
 8012cd6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	0c18      	lsrs	r0, r3, #16
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	197b      	adds	r3, r7, r5
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	1979      	adds	r1, r7, r5
 8012ce8:	1c5c      	adds	r4, r3, #1
 8012cea:	800c      	strh	r4, [r1, #0]
 8012cec:	18d3      	adds	r3, r2, r3
 8012cee:	b2c2      	uxtb	r2, r0
 8012cf0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	0e18      	lsrs	r0, r3, #24
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	197b      	adds	r3, r7, r5
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	1979      	adds	r1, r7, r5
 8012d02:	1c5c      	adds	r4, r3, #1
 8012d04:	800c      	strh	r4, [r1, #0]
 8012d06:	18d3      	adds	r3, r2, r3
 8012d08:	b2c2      	uxtb	r2, r0
 8012d0a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	197b      	adds	r3, r7, r5
 8012d12:	881b      	ldrh	r3, [r3, #0]
 8012d14:	1979      	adds	r1, r7, r5
 8012d16:	1c58      	adds	r0, r3, #1
 8012d18:	8008      	strh	r0, [r1, #0]
 8012d1a:	18d3      	adds	r3, r2, r3
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	7b12      	ldrb	r2, [r2, #12]
 8012d20:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	89d8      	ldrh	r0, [r3, #14]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	197b      	adds	r3, r7, r5
 8012d2c:	881b      	ldrh	r3, [r3, #0]
 8012d2e:	1979      	adds	r1, r7, r5
 8012d30:	1c5c      	adds	r4, r3, #1
 8012d32:	800c      	strh	r4, [r1, #0]
 8012d34:	18d3      	adds	r3, r2, r3
 8012d36:	b2c2      	uxtb	r2, r0
 8012d38:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	89db      	ldrh	r3, [r3, #14]
 8012d3e:	0a1b      	lsrs	r3, r3, #8
 8012d40:	b298      	uxth	r0, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	197b      	adds	r3, r7, r5
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	1979      	adds	r1, r7, r5
 8012d4c:	1c5c      	adds	r4, r3, #1
 8012d4e:	800c      	strh	r4, [r1, #0]
 8012d50:	18d3      	adds	r3, r2, r3
 8012d52:	b2c2      	uxtb	r2, r0
 8012d54:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	002c      	movs	r4, r5
 8012d5c:	197b      	adds	r3, r7, r5
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	18d0      	adds	r0, r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	3310      	adds	r3, #16
 8012d66:	0019      	movs	r1, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	7b1b      	ldrb	r3, [r3, #12]
 8012d6c:	071b      	lsls	r3, r3, #28
 8012d6e:	0f1b      	lsrs	r3, r3, #28
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	001a      	movs	r2, r3
 8012d76:	f002 fe41 	bl	80159fc <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7b1b      	ldrb	r3, [r3, #12]
 8012d7e:	071b      	lsls	r3, r3, #28
 8012d80:	0f1b      	lsrs	r3, r3, #28
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	b299      	uxth	r1, r3
 8012d86:	193b      	adds	r3, r7, r4
 8012d88:	193a      	adds	r2, r7, r4
 8012d8a:	8812      	ldrh	r2, [r2, #0]
 8012d8c:	188a      	adds	r2, r1, r2
 8012d8e:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2228      	movs	r2, #40	; 0x28
 8012d94:	5c9b      	ldrb	r3, [r3, r2]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d00c      	beq.n	8012db4 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	210e      	movs	r1, #14
 8012da0:	187b      	adds	r3, r7, r1
 8012da2:	881b      	ldrh	r3, [r3, #0]
 8012da4:	1879      	adds	r1, r7, r1
 8012da6:	1c58      	adds	r0, r3, #1
 8012da8:	8008      	strh	r0, [r1, #0]
 8012daa:	18d3      	adds	r3, r2, r3
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	2120      	movs	r1, #32
 8012db0:	5c52      	ldrb	r2, [r2, r1]
 8012db2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	240e      	movs	r4, #14
 8012dba:	193b      	adds	r3, r7, r4
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	18d0      	adds	r0, r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2228      	movs	r2, #40	; 0x28
 8012dc8:	5c9b      	ldrb	r3, [r3, r2]
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	001a      	movs	r2, r3
 8012dce:	f002 fe15 	bl	80159fc <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2228      	movs	r2, #40	; 0x28
 8012dd6:	5c9b      	ldrb	r3, [r3, r2]
 8012dd8:	b299      	uxth	r1, r3
 8012dda:	193b      	adds	r3, r7, r4
 8012ddc:	193a      	adds	r2, r7, r4
 8012dde:	8812      	ldrh	r2, [r2, #0]
 8012de0:	188a      	adds	r2, r1, r2
 8012de2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	193b      	adds	r3, r7, r4
 8012dee:	881b      	ldrh	r3, [r3, #0]
 8012df0:	0025      	movs	r5, r4
 8012df2:	1939      	adds	r1, r7, r4
 8012df4:	1c5c      	adds	r4, r3, #1
 8012df6:	800c      	strh	r4, [r1, #0]
 8012df8:	18d3      	adds	r3, r2, r3
 8012dfa:	b2c2      	uxtb	r2, r0
 8012dfc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e02:	0a18      	lsrs	r0, r3, #8
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	197b      	adds	r3, r7, r5
 8012e0a:	881b      	ldrh	r3, [r3, #0]
 8012e0c:	1979      	adds	r1, r7, r5
 8012e0e:	1c5c      	adds	r4, r3, #1
 8012e10:	800c      	strh	r4, [r1, #0]
 8012e12:	18d3      	adds	r3, r2, r3
 8012e14:	b2c2      	uxtb	r2, r0
 8012e16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e1c:	0c18      	lsrs	r0, r3, #16
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	197b      	adds	r3, r7, r5
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	1979      	adds	r1, r7, r5
 8012e28:	1c5c      	adds	r4, r3, #1
 8012e2a:	800c      	strh	r4, [r1, #0]
 8012e2c:	18d3      	adds	r3, r2, r3
 8012e2e:	b2c2      	uxtb	r2, r0
 8012e30:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e36:	0e18      	lsrs	r0, r3, #24
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681a      	ldr	r2, [r3, #0]
 8012e3c:	197b      	adds	r3, r7, r5
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	1979      	adds	r1, r7, r5
 8012e42:	1c5c      	adds	r4, r3, #1
 8012e44:	800c      	strh	r4, [r1, #0]
 8012e46:	18d3      	adds	r3, r2, r3
 8012e48:	b2c2      	uxtb	r2, r0
 8012e4a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012e4c:	197b      	adds	r3, r7, r5
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	0018      	movs	r0, r3
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	b004      	add	sp, #16
 8012e5e:	bdb0      	pop	{r4, r5, r7, pc}

08012e60 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	0002      	movs	r2, r0
 8012e68:	1dfb      	adds	r3, r7, #7
 8012e6a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012e6c:	1dfb      	adds	r3, r7, #7
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	2b05      	cmp	r3, #5
 8012e72:	d101      	bne.n	8012e78 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8012e74:	2301      	movs	r3, #1
 8012e76:	e000      	b.n	8012e7a <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012e78:	2300      	movs	r3, #0
        }
    }
}
 8012e7a:	0018      	movs	r0, r3
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	b002      	add	sp, #8
 8012e80:	bd80      	pop	{r7, pc}

08012e82 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b084      	sub	sp, #16
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	0002      	movs	r2, r0
 8012e8a:	6039      	str	r1, [r7, #0]
 8012e8c:	1dfb      	adds	r3, r7, #7
 8012e8e:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8012e90:	2308      	movs	r3, #8
 8012e92:	18fb      	adds	r3, r7, r3
 8012e94:	2200      	movs	r2, #0
 8012e96:	601a      	str	r2, [r3, #0]
    switch( region )
 8012e98:	1dfb      	adds	r3, r7, #7
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	2b05      	cmp	r3, #5
 8012e9e:	d109      	bne.n	8012eb4 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	0018      	movs	r0, r3
 8012ea4:	f001 f958 	bl	8014158 <RegionEU868GetPhyParam>
 8012ea8:	0003      	movs	r3, r0
 8012eaa:	001a      	movs	r2, r3
 8012eac:	230c      	movs	r3, #12
 8012eae:	18fb      	adds	r3, r7, r3
 8012eb0:	601a      	str	r2, [r3, #0]
 8012eb2:	e005      	b.n	8012ec0 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012eb4:	230c      	movs	r3, #12
 8012eb6:	18fb      	adds	r3, r7, r3
 8012eb8:	2208      	movs	r2, #8
 8012eba:	18ba      	adds	r2, r7, r2
 8012ebc:	6812      	ldr	r2, [r2, #0]
 8012ebe:	601a      	str	r2, [r3, #0]
 8012ec0:	230c      	movs	r3, #12
 8012ec2:	18fb      	adds	r3, r7, r3
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	0013      	movs	r3, r2
        }
    }
}
 8012eca:	0018      	movs	r0, r3
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	b004      	add	sp, #16
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b082      	sub	sp, #8
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	0002      	movs	r2, r0
 8012eda:	6039      	str	r1, [r7, #0]
 8012edc:	1dfb      	adds	r3, r7, #7
 8012ede:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ee0:	1dfb      	adds	r3, r7, #7
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	2b05      	cmp	r3, #5
 8012ee6:	d000      	beq.n	8012eea <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012ee8:	e004      	b.n	8012ef4 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	0018      	movs	r0, r3
 8012eee:	f001 fa37 	bl	8014360 <RegionEU868SetBandTxDone>
 8012ef2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	b002      	add	sp, #8
 8012ef8:	bd80      	pop	{r7, pc}

08012efa <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b082      	sub	sp, #8
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	0002      	movs	r2, r0
 8012f02:	6039      	str	r1, [r7, #0]
 8012f04:	1dfb      	adds	r3, r7, #7
 8012f06:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f08:	1dfb      	adds	r3, r7, #7
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	2b05      	cmp	r3, #5
 8012f0e:	d000      	beq.n	8012f12 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8012f10:	e004      	b.n	8012f1c <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	0018      	movs	r0, r3
 8012f16:	f001 fa43 	bl	80143a0 <RegionEU868InitDefaults>
 8012f1a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012f1c:	46c0      	nop			; (mov r8, r8)
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	b002      	add	sp, #8
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	0002      	movs	r2, r0
 8012f2c:	6039      	str	r1, [r7, #0]
 8012f2e:	1dfb      	adds	r3, r7, #7
 8012f30:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f32:	1dfb      	adds	r3, r7, #7
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	2b05      	cmp	r3, #5
 8012f38:	d105      	bne.n	8012f46 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	0018      	movs	r0, r3
 8012f3e:	f001 faa7 	bl	8014490 <RegionEU868GetNvmCtx>
 8012f42:	0003      	movs	r3, r0
 8012f44:	e000      	b.n	8012f48 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8012f46:	2300      	movs	r3, #0
        }
    }
}
 8012f48:	0018      	movs	r0, r3
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	b002      	add	sp, #8
 8012f4e:	bd80      	pop	{r7, pc}

08012f50 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6039      	str	r1, [r7, #0]
 8012f58:	0011      	movs	r1, r2
 8012f5a:	1dfb      	adds	r3, r7, #7
 8012f5c:	1c02      	adds	r2, r0, #0
 8012f5e:	701a      	strb	r2, [r3, #0]
 8012f60:	1dbb      	adds	r3, r7, #6
 8012f62:	1c0a      	adds	r2, r1, #0
 8012f64:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f66:	1dfb      	adds	r3, r7, #7
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2b05      	cmp	r3, #5
 8012f6c:	d108      	bne.n	8012f80 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8012f6e:	1dbb      	adds	r3, r7, #6
 8012f70:	781a      	ldrb	r2, [r3, #0]
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	0011      	movs	r1, r2
 8012f76:	0018      	movs	r0, r3
 8012f78:	f001 fa9a 	bl	80144b0 <RegionEU868Verify>
 8012f7c:	0003      	movs	r3, r0
 8012f7e:	e000      	b.n	8012f82 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8012f80:	2300      	movs	r3, #0
        }
    }
}
 8012f82:	0018      	movs	r0, r3
 8012f84:	46bd      	mov	sp, r7
 8012f86:	b002      	add	sp, #8
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b082      	sub	sp, #8
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	0002      	movs	r2, r0
 8012f92:	6039      	str	r1, [r7, #0]
 8012f94:	1dfb      	adds	r3, r7, #7
 8012f96:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012f98:	1dfb      	adds	r3, r7, #7
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	2b05      	cmp	r3, #5
 8012f9e:	d000      	beq.n	8012fa2 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8012fa0:	e004      	b.n	8012fac <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	0018      	movs	r0, r3
 8012fa6:	f001 fad1 	bl	801454c <RegionEU868ApplyCFList>
 8012faa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012fac:	46c0      	nop			; (mov r8, r8)
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	b002      	add	sp, #8
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	0002      	movs	r2, r0
 8012fbc:	6039      	str	r1, [r7, #0]
 8012fbe:	1dfb      	adds	r3, r7, #7
 8012fc0:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012fc2:	1dfb      	adds	r3, r7, #7
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	2b05      	cmp	r3, #5
 8012fc8:	d105      	bne.n	8012fd6 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	0018      	movs	r0, r3
 8012fce:	f001 fb4f 	bl	8014670 <RegionEU868ChanMaskSet>
 8012fd2:	0003      	movs	r3, r0
 8012fd4:	e000      	b.n	8012fd8 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8012fd6:	2300      	movs	r3, #0
        }
    }
}
 8012fd8:	0018      	movs	r0, r3
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	b002      	add	sp, #8
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012fe0:	b590      	push	{r4, r7, lr}
 8012fe2:	b083      	sub	sp, #12
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	0004      	movs	r4, r0
 8012fe8:	0008      	movs	r0, r1
 8012fea:	0011      	movs	r1, r2
 8012fec:	603b      	str	r3, [r7, #0]
 8012fee:	1dfb      	adds	r3, r7, #7
 8012ff0:	1c22      	adds	r2, r4, #0
 8012ff2:	701a      	strb	r2, [r3, #0]
 8012ff4:	1dbb      	adds	r3, r7, #6
 8012ff6:	1c02      	adds	r2, r0, #0
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	1d7b      	adds	r3, r7, #5
 8012ffc:	1c0a      	adds	r2, r1, #0
 8012ffe:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013000:	1dfb      	adds	r3, r7, #7
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	2b05      	cmp	r3, #5
 8013006:	d000      	beq.n	801300a <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013008:	e00a      	b.n	8013020 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801300a:	69bc      	ldr	r4, [r7, #24]
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	1d7b      	adds	r3, r7, #5
 8013010:	7819      	ldrb	r1, [r3, #0]
 8013012:	1dbb      	adds	r3, r7, #6
 8013014:	2000      	movs	r0, #0
 8013016:	5618      	ldrsb	r0, [r3, r0]
 8013018:	0023      	movs	r3, r4
 801301a:	f001 fb4f 	bl	80146bc <RegionEU868ComputeRxWindowParameters>
 801301e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8013020:	46c0      	nop			; (mov r8, r8)
 8013022:	46bd      	mov	sp, r7
 8013024:	b003      	add	sp, #12
 8013026:	bd90      	pop	{r4, r7, pc}

08013028 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	60b9      	str	r1, [r7, #8]
 8013030:	607a      	str	r2, [r7, #4]
 8013032:	210f      	movs	r1, #15
 8013034:	187b      	adds	r3, r7, r1
 8013036:	1c02      	adds	r2, r0, #0
 8013038:	701a      	strb	r2, [r3, #0]
    switch( region )
 801303a:	187b      	adds	r3, r7, r1
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	2b05      	cmp	r3, #5
 8013040:	d107      	bne.n	8013052 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	0011      	movs	r1, r2
 8013048:	0018      	movs	r0, r3
 801304a:	f001 fba1 	bl	8014790 <RegionEU868RxConfig>
 801304e:	0003      	movs	r3, r0
 8013050:	e000      	b.n	8013054 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013052:	2300      	movs	r3, #0
        }
    }
}
 8013054:	0018      	movs	r0, r3
 8013056:	46bd      	mov	sp, r7
 8013058:	b004      	add	sp, #16
 801305a:	bd80      	pop	{r7, pc}

0801305c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	60b9      	str	r1, [r7, #8]
 8013064:	607a      	str	r2, [r7, #4]
 8013066:	603b      	str	r3, [r7, #0]
 8013068:	210f      	movs	r1, #15
 801306a:	187b      	adds	r3, r7, r1
 801306c:	1c02      	adds	r2, r0, #0
 801306e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013070:	187b      	adds	r3, r7, r1
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	2b05      	cmp	r3, #5
 8013076:	d107      	bne.n	8013088 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013078:	683a      	ldr	r2, [r7, #0]
 801307a:	6879      	ldr	r1, [r7, #4]
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	0018      	movs	r0, r3
 8013080:	f001 fc72 	bl	8014968 <RegionEU868TxConfig>
 8013084:	0003      	movs	r3, r0
 8013086:	e000      	b.n	801308a <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013088:	2300      	movs	r3, #0
        }
    }
}
 801308a:	0018      	movs	r0, r3
 801308c:	46bd      	mov	sp, r7
 801308e:	b004      	add	sp, #16
 8013090:	bd80      	pop	{r7, pc}

08013092 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013092:	b590      	push	{r4, r7, lr}
 8013094:	b087      	sub	sp, #28
 8013096:	af02      	add	r7, sp, #8
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
 801309c:	603b      	str	r3, [r7, #0]
 801309e:	210f      	movs	r1, #15
 80130a0:	187b      	adds	r3, r7, r1
 80130a2:	1c02      	adds	r2, r0, #0
 80130a4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80130a6:	187b      	adds	r3, r7, r1
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	2b05      	cmp	r3, #5
 80130ac:	d10a      	bne.n	80130c4 <RegionLinkAdrReq+0x32>
        //AS923_LINK_ADR_REQ( );
        //AU915_LINK_ADR_REQ( );
       // CN470_LINK_ADR_REQ( );
       // CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80130ae:	6a3c      	ldr	r4, [r7, #32]
 80130b0:	683a      	ldr	r2, [r7, #0]
 80130b2:	6879      	ldr	r1, [r7, #4]
 80130b4:	68b8      	ldr	r0, [r7, #8]
 80130b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b8:	9300      	str	r3, [sp, #0]
 80130ba:	0023      	movs	r3, r4
 80130bc:	f001 fd2c 	bl	8014b18 <RegionEU868LinkAdrReq>
 80130c0:	0003      	movs	r3, r0
 80130c2:	e000      	b.n	80130c6 <RegionLinkAdrReq+0x34>
       // IN865_LINK_ADR_REQ( );
       // US915_LINK_ADR_REQ( );
       // RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80130c4:	2300      	movs	r3, #0
        }
    }
}
 80130c6:	0018      	movs	r0, r3
 80130c8:	46bd      	mov	sp, r7
 80130ca:	b005      	add	sp, #20
 80130cc:	bd90      	pop	{r4, r7, pc}

080130ce <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b082      	sub	sp, #8
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	0002      	movs	r2, r0
 80130d6:	6039      	str	r1, [r7, #0]
 80130d8:	1dfb      	adds	r3, r7, #7
 80130da:	701a      	strb	r2, [r3, #0]
    switch( region )
 80130dc:	1dfb      	adds	r3, r7, #7
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	2b05      	cmp	r3, #5
 80130e2:	d105      	bne.n	80130f0 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	0018      	movs	r0, r3
 80130e8:	f001 fe6c 	bl	8014dc4 <RegionEU868RxParamSetupReq>
 80130ec:	0003      	movs	r3, r0
 80130ee:	e000      	b.n	80130f2 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80130f0:	2300      	movs	r3, #0
        }
    }
}
 80130f2:	0018      	movs	r0, r3
 80130f4:	46bd      	mov	sp, r7
 80130f6:	b002      	add	sp, #8
 80130f8:	bd80      	pop	{r7, pc}

080130fa <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b082      	sub	sp, #8
 80130fe:	af00      	add	r7, sp, #0
 8013100:	0002      	movs	r2, r0
 8013102:	6039      	str	r1, [r7, #0]
 8013104:	1dfb      	adds	r3, r7, #7
 8013106:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013108:	1dfb      	adds	r3, r7, #7
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2b05      	cmp	r3, #5
 801310e:	d105      	bne.n	801311c <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	0018      	movs	r0, r3
 8013114:	f001 fea0 	bl	8014e58 <RegionEU868NewChannelReq>
 8013118:	0003      	movs	r3, r0
 801311a:	e000      	b.n	801311e <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801311c:	2300      	movs	r3, #0
        }
    }
}
 801311e:	0018      	movs	r0, r3
 8013120:	46bd      	mov	sp, r7
 8013122:	b002      	add	sp, #8
 8013124:	bd80      	pop	{r7, pc}

08013126 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013126:	b580      	push	{r7, lr}
 8013128:	b082      	sub	sp, #8
 801312a:	af00      	add	r7, sp, #0
 801312c:	0002      	movs	r2, r0
 801312e:	6039      	str	r1, [r7, #0]
 8013130:	1dfb      	adds	r3, r7, #7
 8013132:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013134:	1dfb      	adds	r3, r7, #7
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	2b05      	cmp	r3, #5
 801313a:	d105      	bne.n	8013148 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	0018      	movs	r0, r3
 8013140:	f001 fef4 	bl	8014f2c <RegionEU868TxParamSetupReq>
 8013144:	0003      	movs	r3, r0
 8013146:	e000      	b.n	801314a <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013148:	2300      	movs	r3, #0
        }
    }
}
 801314a:	0018      	movs	r0, r3
 801314c:	46bd      	mov	sp, r7
 801314e:	b002      	add	sp, #8
 8013150:	bd80      	pop	{r7, pc}

08013152 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013152:	b580      	push	{r7, lr}
 8013154:	b082      	sub	sp, #8
 8013156:	af00      	add	r7, sp, #0
 8013158:	0002      	movs	r2, r0
 801315a:	6039      	str	r1, [r7, #0]
 801315c:	1dfb      	adds	r3, r7, #7
 801315e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013160:	1dfb      	adds	r3, r7, #7
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	2b05      	cmp	r3, #5
 8013166:	d105      	bne.n	8013174 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	0018      	movs	r0, r3
 801316c:	f001 fee8 	bl	8014f40 <RegionEU868DlChannelReq>
 8013170:	0003      	movs	r3, r0
 8013172:	e000      	b.n	8013176 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013174:	2300      	movs	r3, #0
        }
    }
}
 8013176:	0018      	movs	r0, r3
 8013178:	46bd      	mov	sp, r7
 801317a:	b002      	add	sp, #8
 801317c:	bd80      	pop	{r7, pc}

0801317e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801317e:	b590      	push	{r4, r7, lr}
 8013180:	b083      	sub	sp, #12
 8013182:	af00      	add	r7, sp, #0
 8013184:	0004      	movs	r4, r0
 8013186:	0008      	movs	r0, r1
 8013188:	0011      	movs	r1, r2
 801318a:	1dfb      	adds	r3, r7, #7
 801318c:	1c22      	adds	r2, r4, #0
 801318e:	701a      	strb	r2, [r3, #0]
 8013190:	1dbb      	adds	r3, r7, #6
 8013192:	1c02      	adds	r2, r0, #0
 8013194:	701a      	strb	r2, [r3, #0]
 8013196:	1d7b      	adds	r3, r7, #5
 8013198:	1c0a      	adds	r2, r1, #0
 801319a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801319c:	1dfb      	adds	r3, r7, #7
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	2b05      	cmp	r3, #5
 80131a2:	d10a      	bne.n	80131ba <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80131a4:	1d7b      	adds	r3, r7, #5
 80131a6:	781a      	ldrb	r2, [r3, #0]
 80131a8:	1dbb      	adds	r3, r7, #6
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	b25b      	sxtb	r3, r3
 80131ae:	0011      	movs	r1, r2
 80131b0:	0018      	movs	r0, r3
 80131b2:	f001 ff13 	bl	8014fdc <RegionEU868AlternateDr>
 80131b6:	0003      	movs	r3, r0
 80131b8:	e000      	b.n	80131bc <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80131ba:	2300      	movs	r3, #0
        }
    }
}
 80131bc:	0018      	movs	r0, r3
 80131be:	46bd      	mov	sp, r7
 80131c0:	b003      	add	sp, #12
 80131c2:	bd90      	pop	{r4, r7, pc}

080131c4 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	0002      	movs	r2, r0
 80131cc:	6039      	str	r1, [r7, #0]
 80131ce:	1dfb      	adds	r3, r7, #7
 80131d0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80131d2:	1dfb      	adds	r3, r7, #7
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	2b05      	cmp	r3, #5
 80131d8:	d000      	beq.n	80131dc <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 80131da:	e004      	b.n	80131e6 <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	0018      	movs	r0, r3
 80131e0:	f001 ff0c 	bl	8014ffc <RegionEU868CalcBackOff>
 80131e4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80131e6:	46c0      	nop			; (mov r8, r8)
 80131e8:	46bd      	mov	sp, r7
 80131ea:	b002      	add	sp, #8
 80131ec:	bd80      	pop	{r7, pc}

080131ee <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b084      	sub	sp, #16
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	603b      	str	r3, [r7, #0]
 80131fa:	210f      	movs	r1, #15
 80131fc:	187b      	adds	r3, r7, r1
 80131fe:	1c02      	adds	r2, r0, #0
 8013200:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013202:	187b      	adds	r3, r7, r1
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	2b05      	cmp	r3, #5
 8013208:	d107      	bne.n	801321a <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	683a      	ldr	r2, [r7, #0]
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	68b8      	ldr	r0, [r7, #8]
 8013212:	f001 ff23 	bl	801505c <RegionEU868NextChannel>
 8013216:	0003      	movs	r3, r0
 8013218:	e000      	b.n	801321c <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801321a:	2309      	movs	r3, #9
        }
    }
}
 801321c:	0018      	movs	r0, r3
 801321e:	46bd      	mov	sp, r7
 8013220:	b004      	add	sp, #16
 8013222:	bd80      	pop	{r7, pc}

08013224 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	0002      	movs	r2, r0
 801322c:	6039      	str	r1, [r7, #0]
 801322e:	1dfb      	adds	r3, r7, #7
 8013230:	701a      	strb	r2, [r3, #0]
    switch( region )
 8013232:	1dfb      	adds	r3, r7, #7
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2b05      	cmp	r3, #5
 8013238:	d105      	bne.n	8013246 <RegionChannelAdd+0x22>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	0018      	movs	r0, r3
 801323e:	f001 ffb5 	bl	80151ac <RegionEU868ChannelAdd>
 8013242:	0003      	movs	r3, r0
 8013244:	e000      	b.n	8013248 <RegionChannelAdd+0x24>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        RU864_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013246:	2303      	movs	r3, #3
        }
    }
}
 8013248:	0018      	movs	r0, r3
 801324a:	46bd      	mov	sp, r7
 801324c:	b002      	add	sp, #8
 801324e:	bd80      	pop	{r7, pc}

08013250 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	0002      	movs	r2, r0
 8013258:	6039      	str	r1, [r7, #0]
 801325a:	1dfb      	adds	r3, r7, #7
 801325c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801325e:	1dfb      	adds	r3, r7, #7
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b05      	cmp	r3, #5
 8013264:	d000      	beq.n	8013268 <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013266:	e004      	b.n	8013272 <RegionSetContinuousWave+0x22>
        EU868_SET_CONTINUOUS_WAVE( );
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	0018      	movs	r0, r3
 801326c:	f002 f890 	bl	8015390 <RegionEU868SetContinuousWave>
 8013270:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8013272:	46c0      	nop			; (mov r8, r8)
 8013274:	46bd      	mov	sp, r7
 8013276:	b002      	add	sp, #8
 8013278:	bd80      	pop	{r7, pc}

0801327a <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801327a:	b5b0      	push	{r4, r5, r7, lr}
 801327c:	b082      	sub	sp, #8
 801327e:	af00      	add	r7, sp, #0
 8013280:	0005      	movs	r5, r0
 8013282:	000c      	movs	r4, r1
 8013284:	0010      	movs	r0, r2
 8013286:	0019      	movs	r1, r3
 8013288:	1dfb      	adds	r3, r7, #7
 801328a:	1c2a      	adds	r2, r5, #0
 801328c:	701a      	strb	r2, [r3, #0]
 801328e:	1dbb      	adds	r3, r7, #6
 8013290:	1c22      	adds	r2, r4, #0
 8013292:	701a      	strb	r2, [r3, #0]
 8013294:	1d7b      	adds	r3, r7, #5
 8013296:	1c02      	adds	r2, r0, #0
 8013298:	701a      	strb	r2, [r3, #0]
 801329a:	1d3b      	adds	r3, r7, #4
 801329c:	1c0a      	adds	r2, r1, #0
 801329e:	701a      	strb	r2, [r3, #0]
    switch( region )
 80132a0:	1dfb      	adds	r3, r7, #7
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	2b05      	cmp	r3, #5
 80132a6:	d10c      	bne.n	80132c2 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80132a8:	1d3b      	adds	r3, r7, #4
 80132aa:	2200      	movs	r2, #0
 80132ac:	569a      	ldrsb	r2, [r3, r2]
 80132ae:	1d7b      	adds	r3, r7, #5
 80132b0:	2100      	movs	r1, #0
 80132b2:	5659      	ldrsb	r1, [r3, r1]
 80132b4:	1dbb      	adds	r3, r7, #6
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	0018      	movs	r0, r3
 80132ba:	f002 f8bd 	bl	8015438 <RegionEU868ApplyDrOffset>
 80132be:	0003      	movs	r3, r0
 80132c0:	e001      	b.n	80132c6 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80132c2:	1d7b      	adds	r3, r7, #5
 80132c4:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 80132c6:	0018      	movs	r0, r3
 80132c8:	46bd      	mov	sp, r7
 80132ca:	b002      	add	sp, #8
 80132cc:	bdb0      	pop	{r4, r5, r7, pc}

080132ce <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b084      	sub	sp, #16
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	0002      	movs	r2, r0
 80132d6:	1dbb      	adds	r3, r7, #6
 80132d8:	801a      	strh	r2, [r3, #0]
 80132da:	1d7b      	adds	r3, r7, #5
 80132dc:	1c0a      	adds	r2, r1, #0
 80132de:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 80132e0:	230f      	movs	r3, #15
 80132e2:	18fb      	adds	r3, r7, r3
 80132e4:	2200      	movs	r2, #0
 80132e6:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 80132e8:	230e      	movs	r3, #14
 80132ea:	18fb      	adds	r3, r7, r3
 80132ec:	2200      	movs	r2, #0
 80132ee:	701a      	strb	r2, [r3, #0]
 80132f0:	e01b      	b.n	801332a <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80132f2:	1dbb      	adds	r3, r7, #6
 80132f4:	881b      	ldrh	r3, [r3, #0]
 80132f6:	200e      	movs	r0, #14
 80132f8:	183a      	adds	r2, r7, r0
 80132fa:	7812      	ldrb	r2, [r2, #0]
 80132fc:	2101      	movs	r1, #1
 80132fe:	4091      	lsls	r1, r2
 8013300:	000a      	movs	r2, r1
 8013302:	401a      	ands	r2, r3
 8013304:	183b      	adds	r3, r7, r0
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	2101      	movs	r1, #1
 801330a:	4099      	lsls	r1, r3
 801330c:	000b      	movs	r3, r1
 801330e:	429a      	cmp	r2, r3
 8013310:	d105      	bne.n	801331e <CountChannels+0x50>
        {
            nbActiveBits++;
 8013312:	210f      	movs	r1, #15
 8013314:	187b      	adds	r3, r7, r1
 8013316:	781a      	ldrb	r2, [r3, #0]
 8013318:	187b      	adds	r3, r7, r1
 801331a:	3201      	adds	r2, #1
 801331c:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 801331e:	210e      	movs	r1, #14
 8013320:	187b      	adds	r3, r7, r1
 8013322:	781a      	ldrb	r2, [r3, #0]
 8013324:	187b      	adds	r3, r7, r1
 8013326:	3201      	adds	r2, #1
 8013328:	701a      	strb	r2, [r3, #0]
 801332a:	230e      	movs	r3, #14
 801332c:	18fa      	adds	r2, r7, r3
 801332e:	1d7b      	adds	r3, r7, #5
 8013330:	7812      	ldrb	r2, [r2, #0]
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	429a      	cmp	r2, r3
 8013336:	d3dc      	bcc.n	80132f2 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8013338:	230f      	movs	r3, #15
 801333a:	18fb      	adds	r3, r7, r3
 801333c:	781b      	ldrb	r3, [r3, #0]
}
 801333e:	0018      	movs	r0, r3
 8013340:	46bd      	mov	sp, r7
 8013342:	b004      	add	sp, #16
 8013344:	bd80      	pop	{r7, pc}
	...

08013348 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8013350:	230e      	movs	r3, #14
 8013352:	18fb      	adds	r3, r7, r3
 8013354:	2200      	movs	r2, #0
 8013356:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	4a0e      	ldr	r2, [pc, #56]	; (8013394 <RegionCommonGetJoinDc+0x4c>)
 801335c:	4293      	cmp	r3, r2
 801335e:	d804      	bhi.n	801336a <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8013360:	230e      	movs	r3, #14
 8013362:	18fb      	adds	r3, r7, r3
 8013364:	2264      	movs	r2, #100	; 0x64
 8013366:	801a      	strh	r2, [r3, #0]
 8013368:	e00d      	b.n	8013386 <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4a0a      	ldr	r2, [pc, #40]	; (8013398 <RegionCommonGetJoinDc+0x50>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d805      	bhi.n	801337e <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8013372:	230e      	movs	r3, #14
 8013374:	18fb      	adds	r3, r7, r3
 8013376:	22fa      	movs	r2, #250	; 0xfa
 8013378:	0092      	lsls	r2, r2, #2
 801337a:	801a      	strh	r2, [r3, #0]
 801337c:	e003      	b.n	8013386 <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 801337e:	230e      	movs	r3, #14
 8013380:	18fb      	adds	r3, r7, r3
 8013382:	4a06      	ldr	r2, [pc, #24]	; (801339c <RegionCommonGetJoinDc+0x54>)
 8013384:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8013386:	230e      	movs	r3, #14
 8013388:	18fb      	adds	r3, r7, r3
 801338a:	881b      	ldrh	r3, [r3, #0]
}
 801338c:	0018      	movs	r0, r3
 801338e:	46bd      	mov	sp, r7
 8013390:	b004      	add	sp, #16
 8013392:	bd80      	pop	{r7, pc}
 8013394:	0036ee7f 	.word	0x0036ee7f
 8013398:	025c3f7f 	.word	0x025c3f7f
 801339c:	00002710 	.word	0x00002710

080133a0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80133a0:	b590      	push	{r4, r7, lr}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	0004      	movs	r4, r0
 80133a8:	6039      	str	r1, [r7, #0]
 80133aa:	0010      	movs	r0, r2
 80133ac:	0019      	movs	r1, r3
 80133ae:	1dfb      	adds	r3, r7, #7
 80133b0:	1c22      	adds	r2, r4, #0
 80133b2:	701a      	strb	r2, [r3, #0]
 80133b4:	1dbb      	adds	r3, r7, #6
 80133b6:	1c02      	adds	r2, r0, #0
 80133b8:	701a      	strb	r2, [r3, #0]
 80133ba:	1d7b      	adds	r3, r7, #5
 80133bc:	1c0a      	adds	r2, r1, #0
 80133be:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80133c0:	2320      	movs	r3, #32
 80133c2:	18fb      	adds	r3, r7, r3
 80133c4:	2200      	movs	r2, #0
 80133c6:	569a      	ldrsb	r2, [r3, r2]
 80133c8:	1d7b      	adds	r3, r7, #5
 80133ca:	2100      	movs	r1, #0
 80133cc:	5659      	ldrsb	r1, [r3, r1]
 80133ce:	1dbb      	adds	r3, r7, #6
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	b25b      	sxtb	r3, r3
 80133d4:	0018      	movs	r0, r3
 80133d6:	f000 f87d 	bl	80134d4 <RegionCommonValueInRange>
 80133da:	1e03      	subs	r3, r0, #0
 80133dc:	d101      	bne.n	80133e2 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 80133de:	2300      	movs	r3, #0
 80133e0:	e074      	b.n	80134cc <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80133e2:	230f      	movs	r3, #15
 80133e4:	18fb      	adds	r3, r7, r3
 80133e6:	2200      	movs	r2, #0
 80133e8:	701a      	strb	r2, [r3, #0]
 80133ea:	230e      	movs	r3, #14
 80133ec:	18fb      	adds	r3, r7, r3
 80133ee:	2200      	movs	r2, #0
 80133f0:	701a      	strb	r2, [r3, #0]
 80133f2:	e063      	b.n	80134bc <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80133f4:	230d      	movs	r3, #13
 80133f6:	18fb      	adds	r3, r7, r3
 80133f8:	2200      	movs	r2, #0
 80133fa:	701a      	strb	r2, [r3, #0]
 80133fc:	e04d      	b.n	801349a <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80133fe:	230e      	movs	r3, #14
 8013400:	18fb      	adds	r3, r7, r3
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	005b      	lsls	r3, r3, #1
 8013406:	683a      	ldr	r2, [r7, #0]
 8013408:	18d3      	adds	r3, r2, r3
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	001a      	movs	r2, r3
 801340e:	230d      	movs	r3, #13
 8013410:	18fb      	adds	r3, r7, r3
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	411a      	asrs	r2, r3
 8013416:	0013      	movs	r3, r2
 8013418:	2201      	movs	r2, #1
 801341a:	4013      	ands	r3, r2
 801341c:	d037      	beq.n	801348e <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801341e:	200f      	movs	r0, #15
 8013420:	183b      	adds	r3, r7, r0
 8013422:	781a      	ldrb	r2, [r3, #0]
 8013424:	240d      	movs	r4, #13
 8013426:	193b      	adds	r3, r7, r4
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	18d3      	adds	r3, r2, r3
 801342c:	001a      	movs	r2, r3
 801342e:	0013      	movs	r3, r2
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	189b      	adds	r3, r3, r2
 8013434:	009b      	lsls	r3, r3, #2
 8013436:	001a      	movs	r2, r3
 8013438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343a:	189b      	adds	r3, r3, r2
 801343c:	7a1b      	ldrb	r3, [r3, #8]
 801343e:	011b      	lsls	r3, r3, #4
 8013440:	b25b      	sxtb	r3, r3
 8013442:	111b      	asrs	r3, r3, #4
 8013444:	b25b      	sxtb	r3, r3
 8013446:	001a      	movs	r2, r3
 8013448:	230f      	movs	r3, #15
 801344a:	4013      	ands	r3, r2
 801344c:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801344e:	183b      	adds	r3, r7, r0
 8013450:	781a      	ldrb	r2, [r3, #0]
 8013452:	193b      	adds	r3, r7, r4
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	18d3      	adds	r3, r2, r3
 8013458:	001a      	movs	r2, r3
 801345a:	0013      	movs	r3, r2
 801345c:	005b      	lsls	r3, r3, #1
 801345e:	189b      	adds	r3, r3, r2
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	001a      	movs	r2, r3
 8013464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013466:	189b      	adds	r3, r3, r2
 8013468:	7a1b      	ldrb	r3, [r3, #8]
 801346a:	b25b      	sxtb	r3, r3
 801346c:	111b      	asrs	r3, r3, #4
 801346e:	b25b      	sxtb	r3, r3
 8013470:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013472:	230f      	movs	r3, #15
 8013474:	4013      	ands	r3, r2
 8013476:	b25a      	sxtb	r2, r3
 8013478:	1dbb      	adds	r3, r7, #6
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	b25b      	sxtb	r3, r3
 801347e:	0018      	movs	r0, r3
 8013480:	f000 f828 	bl	80134d4 <RegionCommonValueInRange>
 8013484:	0003      	movs	r3, r0
 8013486:	2b01      	cmp	r3, #1
 8013488:	d101      	bne.n	801348e <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801348a:	2301      	movs	r3, #1
 801348c:	e01e      	b.n	80134cc <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 801348e:	210d      	movs	r1, #13
 8013490:	187b      	adds	r3, r7, r1
 8013492:	781a      	ldrb	r2, [r3, #0]
 8013494:	187b      	adds	r3, r7, r1
 8013496:	3201      	adds	r2, #1
 8013498:	701a      	strb	r2, [r3, #0]
 801349a:	230d      	movs	r3, #13
 801349c:	18fb      	adds	r3, r7, r3
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	2b0f      	cmp	r3, #15
 80134a2:	d9ac      	bls.n	80133fe <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80134a4:	220f      	movs	r2, #15
 80134a6:	18bb      	adds	r3, r7, r2
 80134a8:	18ba      	adds	r2, r7, r2
 80134aa:	7812      	ldrb	r2, [r2, #0]
 80134ac:	3210      	adds	r2, #16
 80134ae:	701a      	strb	r2, [r3, #0]
 80134b0:	210e      	movs	r1, #14
 80134b2:	187b      	adds	r3, r7, r1
 80134b4:	781a      	ldrb	r2, [r3, #0]
 80134b6:	187b      	adds	r3, r7, r1
 80134b8:	3201      	adds	r2, #1
 80134ba:	701a      	strb	r2, [r3, #0]
 80134bc:	230f      	movs	r3, #15
 80134be:	18fa      	adds	r2, r7, r3
 80134c0:	1dfb      	adds	r3, r7, #7
 80134c2:	7812      	ldrb	r2, [r2, #0]
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d394      	bcc.n	80133f4 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 80134ca:	2300      	movs	r3, #0
}
 80134cc:	0018      	movs	r0, r3
 80134ce:	46bd      	mov	sp, r7
 80134d0:	b005      	add	sp, #20
 80134d2:	bd90      	pop	{r4, r7, pc}

080134d4 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80134d4:	b590      	push	{r4, r7, lr}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	0004      	movs	r4, r0
 80134dc:	0008      	movs	r0, r1
 80134de:	0011      	movs	r1, r2
 80134e0:	1dfb      	adds	r3, r7, #7
 80134e2:	1c22      	adds	r2, r4, #0
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	1dbb      	adds	r3, r7, #6
 80134e8:	1c02      	adds	r2, r0, #0
 80134ea:	701a      	strb	r2, [r3, #0]
 80134ec:	1d7b      	adds	r3, r7, #5
 80134ee:	1c0a      	adds	r2, r1, #0
 80134f0:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 80134f2:	1dfa      	adds	r2, r7, #7
 80134f4:	1dbb      	adds	r3, r7, #6
 80134f6:	7812      	ldrb	r2, [r2, #0]
 80134f8:	b252      	sxtb	r2, r2
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	b25b      	sxtb	r3, r3
 80134fe:	429a      	cmp	r2, r3
 8013500:	db09      	blt.n	8013516 <RegionCommonValueInRange+0x42>
 8013502:	1dfa      	adds	r2, r7, #7
 8013504:	1d7b      	adds	r3, r7, #5
 8013506:	7812      	ldrb	r2, [r2, #0]
 8013508:	b252      	sxtb	r2, r2
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	b25b      	sxtb	r3, r3
 801350e:	429a      	cmp	r2, r3
 8013510:	dc01      	bgt.n	8013516 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8013512:	2301      	movs	r3, #1
 8013514:	e000      	b.n	8013518 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8013516:	2300      	movs	r3, #0
}
 8013518:	0018      	movs	r0, r3
 801351a:	46bd      	mov	sp, r7
 801351c:	b003      	add	sp, #12
 801351e:	bd90      	pop	{r4, r7, pc}

08013520 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	0008      	movs	r0, r1
 801352a:	0011      	movs	r1, r2
 801352c:	1cfb      	adds	r3, r7, #3
 801352e:	1c02      	adds	r2, r0, #0
 8013530:	701a      	strb	r2, [r3, #0]
 8013532:	1cbb      	adds	r3, r7, #2
 8013534:	1c0a      	adds	r2, r1, #0
 8013536:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8013538:	210f      	movs	r1, #15
 801353a:	187b      	adds	r3, r7, r1
 801353c:	1cfa      	adds	r2, r7, #3
 801353e:	7812      	ldrb	r2, [r2, #0]
 8013540:	0912      	lsrs	r2, r2, #4
 8013542:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013544:	1cbb      	adds	r3, r7, #2
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	091b      	lsrs	r3, r3, #4
 801354a:	b2db      	uxtb	r3, r3
 801354c:	187a      	adds	r2, r7, r1
 801354e:	7812      	ldrb	r2, [r2, #0]
 8013550:	429a      	cmp	r2, r3
 8013552:	d805      	bhi.n	8013560 <RegionCommonChanDisable+0x40>
 8013554:	1cfa      	adds	r2, r7, #3
 8013556:	1cbb      	adds	r3, r7, #2
 8013558:	7812      	ldrb	r2, [r2, #0]
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	429a      	cmp	r2, r3
 801355e:	d301      	bcc.n	8013564 <RegionCommonChanDisable+0x44>
    {
        return false;
 8013560:	2300      	movs	r3, #0
 8013562:	e01b      	b.n	801359c <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013564:	200f      	movs	r0, #15
 8013566:	183b      	adds	r3, r7, r0
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	005b      	lsls	r3, r3, #1
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	18d3      	adds	r3, r2, r3
 8013570:	881b      	ldrh	r3, [r3, #0]
 8013572:	b21b      	sxth	r3, r3
 8013574:	1cfa      	adds	r2, r7, #3
 8013576:	7812      	ldrb	r2, [r2, #0]
 8013578:	210f      	movs	r1, #15
 801357a:	400a      	ands	r2, r1
 801357c:	2101      	movs	r1, #1
 801357e:	4091      	lsls	r1, r2
 8013580:	000a      	movs	r2, r1
 8013582:	b212      	sxth	r2, r2
 8013584:	43d2      	mvns	r2, r2
 8013586:	b212      	sxth	r2, r2
 8013588:	4013      	ands	r3, r2
 801358a:	b219      	sxth	r1, r3
 801358c:	183b      	adds	r3, r7, r0
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	005b      	lsls	r3, r3, #1
 8013592:	687a      	ldr	r2, [r7, #4]
 8013594:	18d3      	adds	r3, r2, r3
 8013596:	b28a      	uxth	r2, r1
 8013598:	801a      	strh	r2, [r3, #0]

    return true;
 801359a:	2301      	movs	r3, #1
}
 801359c:	0018      	movs	r0, r3
 801359e:	46bd      	mov	sp, r7
 80135a0:	b004      	add	sp, #16
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80135a4:	b590      	push	{r4, r7, lr}
 80135a6:	b085      	sub	sp, #20
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	0008      	movs	r0, r1
 80135ae:	0011      	movs	r1, r2
 80135b0:	1cfb      	adds	r3, r7, #3
 80135b2:	1c02      	adds	r2, r0, #0
 80135b4:	701a      	strb	r2, [r3, #0]
 80135b6:	1cbb      	adds	r3, r7, #2
 80135b8:	1c0a      	adds	r2, r1, #0
 80135ba:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80135bc:	230f      	movs	r3, #15
 80135be:	18fb      	adds	r3, r7, r3
 80135c0:	2200      	movs	r2, #0
 80135c2:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d101      	bne.n	80135ce <RegionCommonCountChannels+0x2a>
    {
        return 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	e027      	b.n	801361e <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80135ce:	230e      	movs	r3, #14
 80135d0:	18fb      	adds	r3, r7, r3
 80135d2:	1cfa      	adds	r2, r7, #3
 80135d4:	7812      	ldrb	r2, [r2, #0]
 80135d6:	701a      	strb	r2, [r3, #0]
 80135d8:	e017      	b.n	801360a <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80135da:	240e      	movs	r4, #14
 80135dc:	193b      	adds	r3, r7, r4
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	18d3      	adds	r3, r2, r3
 80135e6:	881b      	ldrh	r3, [r3, #0]
 80135e8:	2110      	movs	r1, #16
 80135ea:	0018      	movs	r0, r3
 80135ec:	f7ff fe6f 	bl	80132ce <CountChannels>
 80135f0:	0003      	movs	r3, r0
 80135f2:	0019      	movs	r1, r3
 80135f4:	220f      	movs	r2, #15
 80135f6:	18bb      	adds	r3, r7, r2
 80135f8:	18ba      	adds	r2, r7, r2
 80135fa:	7812      	ldrb	r2, [r2, #0]
 80135fc:	188a      	adds	r2, r1, r2
 80135fe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013600:	193b      	adds	r3, r7, r4
 8013602:	781a      	ldrb	r2, [r3, #0]
 8013604:	193b      	adds	r3, r7, r4
 8013606:	3201      	adds	r2, #1
 8013608:	701a      	strb	r2, [r3, #0]
 801360a:	230e      	movs	r3, #14
 801360c:	18fa      	adds	r2, r7, r3
 801360e:	1cbb      	adds	r3, r7, #2
 8013610:	7812      	ldrb	r2, [r2, #0]
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	429a      	cmp	r2, r3
 8013616:	d3e0      	bcc.n	80135da <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8013618:	230f      	movs	r3, #15
 801361a:	18fb      	adds	r3, r7, r3
 801361c:	781b      	ldrb	r3, [r3, #0]
}
 801361e:	0018      	movs	r0, r3
 8013620:	46bd      	mov	sp, r7
 8013622:	b005      	add	sp, #20
 8013624:	bd90      	pop	{r4, r7, pc}

08013626 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8013626:	b580      	push	{r7, lr}
 8013628:	b086      	sub	sp, #24
 801362a:	af00      	add	r7, sp, #0
 801362c:	60f8      	str	r0, [r7, #12]
 801362e:	60b9      	str	r1, [r7, #8]
 8013630:	1dfb      	adds	r3, r7, #7
 8013632:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d020      	beq.n	801367c <RegionCommonChanMaskCopy+0x56>
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d01d      	beq.n	801367c <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013640:	2317      	movs	r3, #23
 8013642:	18fb      	adds	r3, r7, r3
 8013644:	2200      	movs	r2, #0
 8013646:	701a      	strb	r2, [r3, #0]
 8013648:	e011      	b.n	801366e <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801364a:	2017      	movs	r0, #23
 801364c:	183b      	adds	r3, r7, r0
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	005b      	lsls	r3, r3, #1
 8013652:	68ba      	ldr	r2, [r7, #8]
 8013654:	18d2      	adds	r2, r2, r3
 8013656:	183b      	adds	r3, r7, r0
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	005b      	lsls	r3, r3, #1
 801365c:	68f9      	ldr	r1, [r7, #12]
 801365e:	18cb      	adds	r3, r1, r3
 8013660:	8812      	ldrh	r2, [r2, #0]
 8013662:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013664:	183b      	adds	r3, r7, r0
 8013666:	781a      	ldrb	r2, [r3, #0]
 8013668:	183b      	adds	r3, r7, r0
 801366a:	3201      	adds	r2, #1
 801366c:	701a      	strb	r2, [r3, #0]
 801366e:	2317      	movs	r3, #23
 8013670:	18fa      	adds	r2, r7, r3
 8013672:	1dfb      	adds	r3, r7, #7
 8013674:	7812      	ldrb	r2, [r2, #0]
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	429a      	cmp	r2, r3
 801367a:	d3e6      	bcc.n	801364a <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 801367c:	46c0      	nop			; (mov r8, r8)
 801367e:	46bd      	mov	sp, r7
 8013680:	b006      	add	sp, #24
 8013682:	bd80      	pop	{r7, pc}

08013684 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	60b9      	str	r1, [r7, #8]
 801368c:	607a      	str	r2, [r7, #4]
 801368e:	210f      	movs	r1, #15
 8013690:	187b      	adds	r3, r7, r1
 8013692:	1c02      	adds	r2, r0, #0
 8013694:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8013696:	187b      	adds	r3, r7, r1
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d003      	beq.n	80136a6 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 80136a4:	e005      	b.n	80136b2 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	605a      	str	r2, [r3, #4]
}
 80136b2:	46c0      	nop			; (mov r8, r8)
 80136b4:	46bd      	mov	sp, r7
 80136b6:	b004      	add	sp, #16
 80136b8:	bd80      	pop	{r7, pc}

080136ba <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 80136ba:	b590      	push	{r4, r7, lr}
 80136bc:	b087      	sub	sp, #28
 80136be:	af00      	add	r7, sp, #0
 80136c0:	0004      	movs	r4, r0
 80136c2:	0008      	movs	r0, r1
 80136c4:	603a      	str	r2, [r7, #0]
 80136c6:	0019      	movs	r1, r3
 80136c8:	1dfb      	adds	r3, r7, #7
 80136ca:	1c22      	adds	r2, r4, #0
 80136cc:	701a      	strb	r2, [r3, #0]
 80136ce:	1dbb      	adds	r3, r7, #6
 80136d0:	1c02      	adds	r2, r0, #0
 80136d2:	701a      	strb	r2, [r3, #0]
 80136d4:	1d7b      	adds	r3, r7, #5
 80136d6:	1c0a      	adds	r2, r1, #0
 80136d8:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 80136da:	2301      	movs	r3, #1
 80136dc:	425b      	negs	r3, r3
 80136de:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 80136e0:	2313      	movs	r3, #19
 80136e2:	18fb      	adds	r3, r7, r3
 80136e4:	2200      	movs	r2, #0
 80136e6:	701a      	strb	r2, [r3, #0]
 80136e8:	e0cf      	b.n	801388a <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 80136ea:	1dfb      	adds	r3, r7, #7
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	2201      	movs	r2, #1
 80136f0:	4053      	eors	r3, r2
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d065      	beq.n	80137c4 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 80136f8:	2313      	movs	r3, #19
 80136fa:	18fb      	adds	r3, r7, r3
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	011b      	lsls	r3, r3, #4
 8013700:	683a      	ldr	r2, [r7, #0]
 8013702:	18d3      	adds	r3, r2, r3
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	0018      	movs	r0, r3
 8013708:	f002 f92b 	bl	8015962 <TimerGetElapsedTime>
 801370c:	0004      	movs	r4, r0
 801370e:	1dbb      	adds	r3, r7, #6
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d00b      	beq.n	801372e <RegionCommonUpdateBandTimeOff+0x74>
 8013716:	2313      	movs	r3, #19
 8013718:	18fb      	adds	r3, r7, r3
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	011b      	lsls	r3, r3, #4
 801371e:	683a      	ldr	r2, [r7, #0]
 8013720:	18d3      	adds	r3, r2, r3
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	0018      	movs	r0, r3
 8013726:	f002 f91c 	bl	8015962 <TimerGetElapsedTime>
 801372a:	0003      	movs	r3, r0
 801372c:	e000      	b.n	8013730 <RegionCommonUpdateBandTimeOff+0x76>
 801372e:	2300      	movs	r3, #0
 8013730:	42a3      	cmp	r3, r4
 8013732:	d20b      	bcs.n	801374c <RegionCommonUpdateBandTimeOff+0x92>
 8013734:	2313      	movs	r3, #19
 8013736:	18fb      	adds	r3, r7, r3
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	011b      	lsls	r3, r3, #4
 801373c:	683a      	ldr	r2, [r7, #0]
 801373e:	18d3      	adds	r3, r2, r3
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	0018      	movs	r0, r3
 8013744:	f002 f90d 	bl	8015962 <TimerGetElapsedTime>
 8013748:	0003      	movs	r3, r0
 801374a:	e010      	b.n	801376e <RegionCommonUpdateBandTimeOff+0xb4>
 801374c:	1dbb      	adds	r3, r7, #6
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d00b      	beq.n	801376c <RegionCommonUpdateBandTimeOff+0xb2>
 8013754:	2313      	movs	r3, #19
 8013756:	18fb      	adds	r3, r7, r3
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	011b      	lsls	r3, r3, #4
 801375c:	683a      	ldr	r2, [r7, #0]
 801375e:	18d3      	adds	r3, r2, r3
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	0018      	movs	r0, r3
 8013764:	f002 f8fd 	bl	8015962 <TimerGetElapsedTime>
 8013768:	0003      	movs	r3, r0
 801376a:	e000      	b.n	801376e <RegionCommonUpdateBandTimeOff+0xb4>
 801376c:	2300      	movs	r3, #0
 801376e:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8013770:	2313      	movs	r3, #19
 8013772:	18fb      	adds	r3, r7, r3
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	011b      	lsls	r3, r3, #4
 8013778:	683a      	ldr	r2, [r7, #0]
 801377a:	18d3      	adds	r3, r2, r3
 801377c:	68db      	ldr	r3, [r3, #12]
 801377e:	68fa      	ldr	r2, [r7, #12]
 8013780:	429a      	cmp	r2, r3
 8013782:	d307      	bcc.n	8013794 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 8013784:	2313      	movs	r3, #19
 8013786:	18fb      	adds	r3, r7, r3
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	011b      	lsls	r3, r3, #4
 801378c:	683a      	ldr	r2, [r7, #0]
 801378e:	18d3      	adds	r3, r2, r3
 8013790:	2200      	movs	r2, #0
 8013792:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8013794:	2313      	movs	r3, #19
 8013796:	18fb      	adds	r3, r7, r3
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	011b      	lsls	r3, r3, #4
 801379c:	683a      	ldr	r2, [r7, #0]
 801379e:	18d3      	adds	r3, r2, r3
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d06b      	beq.n	801387e <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 80137a6:	2313      	movs	r3, #19
 80137a8:	18fb      	adds	r3, r7, r3
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	011b      	lsls	r3, r3, #4
 80137ae:	683a      	ldr	r2, [r7, #0]
 80137b0:	18d3      	adds	r3, r2, r3
 80137b2:	68da      	ldr	r2, [r3, #12]
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	1ad2      	subs	r2, r2, r3
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d900      	bls.n	80137c0 <RegionCommonUpdateBandTimeOff+0x106>
 80137be:	0013      	movs	r3, r2
 80137c0:	617b      	str	r3, [r7, #20]
 80137c2:	e05c      	b.n	801387e <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 80137c4:	1dbb      	adds	r3, r7, #6
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d04e      	beq.n	801386a <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 80137cc:	2113      	movs	r1, #19
 80137ce:	187b      	adds	r3, r7, r1
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	011b      	lsls	r3, r3, #4
 80137d4:	683a      	ldr	r2, [r7, #0]
 80137d6:	18d3      	adds	r3, r2, r3
 80137d8:	68dc      	ldr	r4, [r3, #12]
 80137da:	187b      	adds	r3, r7, r1
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	011b      	lsls	r3, r3, #4
 80137e0:	683a      	ldr	r2, [r7, #0]
 80137e2:	18d3      	adds	r3, r2, r3
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	0018      	movs	r0, r3
 80137e8:	f002 f8bb 	bl	8015962 <TimerGetElapsedTime>
 80137ec:	0003      	movs	r3, r0
 80137ee:	429c      	cmp	r4, r3
 80137f0:	d807      	bhi.n	8013802 <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 80137f2:	2313      	movs	r3, #19
 80137f4:	18fb      	adds	r3, r7, r3
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	011b      	lsls	r3, r3, #4
 80137fa:	683a      	ldr	r2, [r7, #0]
 80137fc:	18d3      	adds	r3, r2, r3
 80137fe:	2200      	movs	r2, #0
 8013800:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 8013802:	2313      	movs	r3, #19
 8013804:	18fb      	adds	r3, r7, r3
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	011b      	lsls	r3, r3, #4
 801380a:	683a      	ldr	r2, [r7, #0]
 801380c:	18d3      	adds	r3, r2, r3
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d034      	beq.n	801387e <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 8013814:	2113      	movs	r1, #19
 8013816:	187b      	adds	r3, r7, r1
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	011b      	lsls	r3, r3, #4
 801381c:	683a      	ldr	r2, [r7, #0]
 801381e:	18d3      	adds	r3, r2, r3
 8013820:	68dc      	ldr	r4, [r3, #12]
 8013822:	187b      	adds	r3, r7, r1
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	011b      	lsls	r3, r3, #4
 8013828:	683a      	ldr	r2, [r7, #0]
 801382a:	18d3      	adds	r3, r2, r3
 801382c:	689b      	ldr	r3, [r3, #8]
 801382e:	0018      	movs	r0, r3
 8013830:	f002 f897 	bl	8015962 <TimerGetElapsedTime>
 8013834:	0003      	movs	r3, r0
 8013836:	1ae3      	subs	r3, r4, r3
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	429a      	cmp	r2, r3
 801383c:	d912      	bls.n	8013864 <RegionCommonUpdateBandTimeOff+0x1aa>
 801383e:	2113      	movs	r1, #19
 8013840:	187b      	adds	r3, r7, r1
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	011b      	lsls	r3, r3, #4
 8013846:	683a      	ldr	r2, [r7, #0]
 8013848:	18d3      	adds	r3, r2, r3
 801384a:	68dc      	ldr	r4, [r3, #12]
 801384c:	187b      	adds	r3, r7, r1
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	011b      	lsls	r3, r3, #4
 8013852:	683a      	ldr	r2, [r7, #0]
 8013854:	18d3      	adds	r3, r2, r3
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	0018      	movs	r0, r3
 801385a:	f002 f882 	bl	8015962 <TimerGetElapsedTime>
 801385e:	0003      	movs	r3, r0
 8013860:	1ae3      	subs	r3, r4, r3
 8013862:	e000      	b.n	8013866 <RegionCommonUpdateBandTimeOff+0x1ac>
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	617b      	str	r3, [r7, #20]
 8013868:	e009      	b.n	801387e <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 801386e:	2313      	movs	r3, #19
 8013870:	18fb      	adds	r3, r7, r3
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	011b      	lsls	r3, r3, #4
 8013876:	683a      	ldr	r2, [r7, #0]
 8013878:	18d3      	adds	r3, r2, r3
 801387a:	2200      	movs	r2, #0
 801387c:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 801387e:	2113      	movs	r1, #19
 8013880:	187b      	adds	r3, r7, r1
 8013882:	781a      	ldrb	r2, [r3, #0]
 8013884:	187b      	adds	r3, r7, r1
 8013886:	3201      	adds	r2, #1
 8013888:	701a      	strb	r2, [r3, #0]
 801388a:	2313      	movs	r3, #19
 801388c:	18fa      	adds	r2, r7, r3
 801388e:	1d7b      	adds	r3, r7, #5
 8013890:	7812      	ldrb	r2, [r2, #0]
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	429a      	cmp	r2, r3
 8013896:	d200      	bcs.n	801389a <RegionCommonUpdateBandTimeOff+0x1e0>
 8013898:	e727      	b.n	80136ea <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 801389a:	697b      	ldr	r3, [r7, #20]
}
 801389c:	0018      	movs	r0, r3
 801389e:	46bd      	mov	sp, r7
 80138a0:	b007      	add	sp, #28
 80138a2:	bd90      	pop	{r4, r7, pc}

080138a4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b084      	sub	sp, #16
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80138ae:	230f      	movs	r3, #15
 80138b0:	18fb      	adds	r3, r7, r3
 80138b2:	2200      	movs	r2, #0
 80138b4:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	2b03      	cmp	r3, #3
 80138bc:	d141      	bne.n	8013942 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	3301      	adds	r3, #1
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	b25a      	sxtb	r2, r3
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	785b      	ldrb	r3, [r3, #1]
 80138ce:	b25b      	sxtb	r3, r3
 80138d0:	220f      	movs	r2, #15
 80138d2:	4013      	ands	r3, r2
 80138d4:	b25a      	sxtb	r2, r3
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	785b      	ldrb	r3, [r3, #1]
 80138de:	b25b      	sxtb	r3, r3
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	091b      	lsrs	r3, r3, #4
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	b25a      	sxtb	r2, r3
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	3302      	adds	r3, #2
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	889b      	ldrh	r3, [r3, #4]
 80138fc:	b21a      	sxth	r2, r3
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	3303      	adds	r3, #3
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	021b      	lsls	r3, r3, #8
 8013906:	b21b      	sxth	r3, r3
 8013908:	4313      	orrs	r3, r2
 801390a:	b21b      	sxth	r3, r3
 801390c:	b29a      	uxth	r2, r3
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	791a      	ldrb	r2, [r3, #4]
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	091b      	lsrs	r3, r3, #4
 8013920:	b2db      	uxtb	r3, r3
 8013922:	2207      	movs	r2, #7
 8013924:	4013      	ands	r3, r2
 8013926:	b2da      	uxtb	r2, r3
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	220f      	movs	r2, #15
 8013932:	4013      	ands	r3, r2
 8013934:	b2da      	uxtb	r2, r3
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801393a:	230f      	movs	r3, #15
 801393c:	18fb      	adds	r3, r7, r3
 801393e:	2205      	movs	r2, #5
 8013940:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8013942:	230f      	movs	r3, #15
 8013944:	18fb      	adds	r3, r7, r3
 8013946:	781b      	ldrb	r3, [r3, #0]
}
 8013948:	0018      	movs	r0, r3
 801394a:	46bd      	mov	sp, r7
 801394c:	b004      	add	sp, #16
 801394e:	bd80      	pop	{r7, pc}

08013950 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013950:	b5b0      	push	{r4, r5, r7, lr}
 8013952:	b088      	sub	sp, #32
 8013954:	af02      	add	r7, sp, #8
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	60b9      	str	r1, [r7, #8]
 801395a:	607a      	str	r2, [r7, #4]
 801395c:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801395e:	2317      	movs	r3, #23
 8013960:	18fb      	adds	r3, r7, r3
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	7912      	ldrb	r2, [r2, #4]
 8013966:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8013968:	2316      	movs	r3, #22
 801396a:	18fb      	adds	r3, r7, r3
 801396c:	68fa      	ldr	r2, [r7, #12]
 801396e:	7992      	ldrb	r2, [r2, #6]
 8013970:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8013972:	2315      	movs	r3, #21
 8013974:	18fb      	adds	r3, r7, r3
 8013976:	68fa      	ldr	r2, [r7, #12]
 8013978:	79d2      	ldrb	r2, [r2, #7]
 801397a:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	7a1a      	ldrb	r2, [r3, #8]
 8013980:	2314      	movs	r3, #20
 8013982:	18fb      	adds	r3, r7, r3
 8013984:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	795b      	ldrb	r3, [r3, #5]
 801398a:	2201      	movs	r2, #1
 801398c:	4053      	eors	r3, r2
 801398e:	b2db      	uxtb	r3, r3
 8013990:	2b00      	cmp	r3, #0
 8013992:	d00e      	beq.n	80139b2 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013994:	2314      	movs	r3, #20
 8013996:	18fb      	adds	r3, r7, r3
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	7ad2      	ldrb	r2, [r2, #11]
 801399c:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801399e:	2316      	movs	r3, #22
 80139a0:	18fb      	adds	r3, r7, r3
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	7a52      	ldrb	r2, [r2, #9]
 80139a6:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80139a8:	2315      	movs	r3, #21
 80139aa:	18fb      	adds	r3, r7, r3
 80139ac:	68fa      	ldr	r2, [r7, #12]
 80139ae:	7a92      	ldrb	r2, [r2, #10]
 80139b0:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80139b2:	2317      	movs	r3, #23
 80139b4:	18fb      	adds	r3, r7, r3
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d049      	beq.n	8013a50 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	7b18      	ldrb	r0, [r3, #12]
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	691c      	ldr	r4, [r3, #16]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2514      	movs	r5, #20
 80139c8:	575d      	ldrsb	r5, [r3, r5]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2215      	movs	r2, #21
 80139ce:	569a      	ldrsb	r2, [r3, r2]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	699b      	ldr	r3, [r3, #24]
 80139d4:	2116      	movs	r1, #22
 80139d6:	1879      	adds	r1, r7, r1
 80139d8:	7809      	ldrb	r1, [r1, #0]
 80139da:	b249      	sxtb	r1, r1
 80139dc:	9301      	str	r3, [sp, #4]
 80139de:	9200      	str	r2, [sp, #0]
 80139e0:	002b      	movs	r3, r5
 80139e2:	000a      	movs	r2, r1
 80139e4:	0021      	movs	r1, r4
 80139e6:	f7ff fcdb 	bl	80133a0 <RegionCommonChanVerifyDr>
 80139ea:	0003      	movs	r3, r0
 80139ec:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80139ee:	2301      	movs	r3, #1
 80139f0:	4053      	eors	r3, r2
 80139f2:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d006      	beq.n	8013a06 <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 80139f8:	2217      	movs	r2, #23
 80139fa:	18bb      	adds	r3, r7, r2
 80139fc:	18ba      	adds	r2, r7, r2
 80139fe:	7812      	ldrb	r2, [r2, #0]
 8013a00:	2102      	movs	r1, #2
 8013a02:	438a      	bics	r2, r1
 8013a04:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	211d      	movs	r1, #29
 8013a0a:	5659      	ldrsb	r1, [r3, r1]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	221c      	movs	r2, #28
 8013a10:	569a      	ldrsb	r2, [r3, r2]
 8013a12:	2315      	movs	r3, #21
 8013a14:	18fb      	adds	r3, r7, r3
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	b25b      	sxtb	r3, r3
 8013a1a:	0018      	movs	r0, r3
 8013a1c:	f7ff fd5a 	bl	80134d4 <RegionCommonValueInRange>
 8013a20:	1e03      	subs	r3, r0, #0
 8013a22:	d115      	bne.n	8013a50 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	7f5b      	ldrb	r3, [r3, #29]
 8013a28:	b25b      	sxtb	r3, r3
 8013a2a:	2215      	movs	r2, #21
 8013a2c:	18ba      	adds	r2, r7, r2
 8013a2e:	7812      	ldrb	r2, [r2, #0]
 8013a30:	b252      	sxtb	r2, r2
 8013a32:	429a      	cmp	r2, r3
 8013a34:	da05      	bge.n	8013a42 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8013a36:	2315      	movs	r3, #21
 8013a38:	18fb      	adds	r3, r7, r3
 8013a3a:	68fa      	ldr	r2, [r7, #12]
 8013a3c:	7f52      	ldrb	r2, [r2, #29]
 8013a3e:	701a      	strb	r2, [r3, #0]
 8013a40:	e006      	b.n	8013a50 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013a42:	2217      	movs	r2, #23
 8013a44:	18bb      	adds	r3, r7, r2
 8013a46:	18ba      	adds	r2, r7, r2
 8013a48:	7812      	ldrb	r2, [r2, #0]
 8013a4a:	2104      	movs	r1, #4
 8013a4c:	438a      	bics	r2, r1
 8013a4e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013a50:	2317      	movs	r3, #23
 8013a52:	18fb      	adds	r3, r7, r3
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	2b07      	cmp	r3, #7
 8013a58:	d109      	bne.n	8013a6e <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 8013a5a:	2314      	movs	r3, #20
 8013a5c:	18fb      	adds	r3, r7, r3
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	b25b      	sxtb	r3, r3
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d103      	bne.n	8013a6e <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8013a66:	2314      	movs	r3, #20
 8013a68:	18fb      	adds	r3, r7, r3
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	2216      	movs	r2, #22
 8013a72:	18ba      	adds	r2, r7, r2
 8013a74:	7812      	ldrb	r2, [r2, #0]
 8013a76:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2215      	movs	r2, #21
 8013a7c:	18ba      	adds	r2, r7, r2
 8013a7e:	7812      	ldrb	r2, [r2, #0]
 8013a80:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013a82:	2314      	movs	r3, #20
 8013a84:	18fb      	adds	r3, r7, r3
 8013a86:	781a      	ldrb	r2, [r3, #0]
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	701a      	strb	r2, [r3, #0]

    return status;
 8013a8c:	2317      	movs	r3, #23
 8013a8e:	18fb      	adds	r3, r7, r3
 8013a90:	781b      	ldrb	r3, [r3, #0]
}
 8013a92:	0018      	movs	r0, r3
 8013a94:	46bd      	mov	sp, r7
 8013a96:	b006      	add	sp, #24
 8013a98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013a9c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8013a9c:	b5b0      	push	{r4, r5, r7, lr}
 8013a9e:	b082      	sub	sp, #8
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	0002      	movs	r2, r0
 8013aa4:	6039      	str	r1, [r7, #0]
 8013aa6:	1dfb      	adds	r3, r7, #7
 8013aa8:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8013aaa:	1dfb      	adds	r3, r7, #7
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	2201      	movs	r2, #1
 8013ab0:	409a      	lsls	r2, r3
 8013ab2:	0013      	movs	r3, r2
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	f7ee fd67 	bl	8002588 <__aeabi_i2d>
 8013aba:	0004      	movs	r4, r0
 8013abc:	000d      	movs	r5, r1
 8013abe:	6838      	ldr	r0, [r7, #0]
 8013ac0:	f7ee fd9c 	bl	80025fc <__aeabi_ui2d>
 8013ac4:	0002      	movs	r2, r0
 8013ac6:	000b      	movs	r3, r1
 8013ac8:	0020      	movs	r0, r4
 8013aca:	0029      	movs	r1, r5
 8013acc:	f7ed fb62 	bl	8001194 <__aeabi_ddiv>
 8013ad0:	0003      	movs	r3, r0
 8013ad2:	000c      	movs	r4, r1
 8013ad4:	0018      	movs	r0, r3
 8013ad6:	0021      	movs	r1, r4
 8013ad8:	2200      	movs	r2, #0
 8013ada:	4b05      	ldr	r3, [pc, #20]	; (8013af0 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8013adc:	f7ed ff64 	bl	80019a8 <__aeabi_dmul>
 8013ae0:	0003      	movs	r3, r0
 8013ae2:	000c      	movs	r4, r1
}
 8013ae4:	0018      	movs	r0, r3
 8013ae6:	0021      	movs	r1, r4
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	b002      	add	sp, #8
 8013aec:	bdb0      	pop	{r4, r5, r7, pc}
 8013aee:	46c0      	nop			; (mov r8, r8)
 8013af0:	408f4000 	.word	0x408f4000

08013af4 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8013af4:	b590      	push	{r4, r7, lr}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	0002      	movs	r2, r0
 8013afc:	1dfb      	adds	r3, r7, #7
 8013afe:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 8013b00:	1dfb      	adds	r3, r7, #7
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	0018      	movs	r0, r3
 8013b06:	f7ee fd79 	bl	80025fc <__aeabi_ui2d>
 8013b0a:	0003      	movs	r3, r0
 8013b0c:	000c      	movs	r4, r1
 8013b0e:	001a      	movs	r2, r3
 8013b10:	0023      	movs	r3, r4
 8013b12:	2000      	movs	r0, #0
 8013b14:	4904      	ldr	r1, [pc, #16]	; (8013b28 <RegionCommonComputeSymbolTimeFsk+0x34>)
 8013b16:	f7ed fb3d 	bl	8001194 <__aeabi_ddiv>
 8013b1a:	0003      	movs	r3, r0
 8013b1c:	000c      	movs	r4, r1
}
 8013b1e:	0018      	movs	r0, r3
 8013b20:	0021      	movs	r1, r4
 8013b22:	46bd      	mov	sp, r7
 8013b24:	b003      	add	sp, #12
 8013b26:	bd90      	pop	{r4, r7, pc}
 8013b28:	40200000 	.word	0x40200000

08013b2c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8013b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b2e:	b085      	sub	sp, #20
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60b8      	str	r0, [r7, #8]
 8013b34:	60f9      	str	r1, [r7, #12]
 8013b36:	603b      	str	r3, [r7, #0]
 8013b38:	1dfb      	adds	r3, r7, #7
 8013b3a:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8013b3c:	1dfb      	adds	r3, r7, #7
 8013b3e:	781c      	ldrb	r4, [r3, #0]
 8013b40:	1dfb      	adds	r3, r7, #7
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	3b04      	subs	r3, #4
 8013b46:	005b      	lsls	r3, r3, #1
 8013b48:	0018      	movs	r0, r3
 8013b4a:	f7ee fd1d 	bl	8002588 <__aeabi_i2d>
 8013b4e:	68ba      	ldr	r2, [r7, #8]
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f7ed ff29 	bl	80019a8 <__aeabi_dmul>
 8013b56:	0002      	movs	r2, r0
 8013b58:	000b      	movs	r3, r1
 8013b5a:	0015      	movs	r5, r2
 8013b5c:	001e      	movs	r6, r3
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	0018      	movs	r0, r3
 8013b64:	f7ee fd4a 	bl	80025fc <__aeabi_ui2d>
 8013b68:	0002      	movs	r2, r0
 8013b6a:	000b      	movs	r3, r1
 8013b6c:	0028      	movs	r0, r5
 8013b6e:	0031      	movs	r1, r6
 8013b70:	f7ec fff4 	bl	8000b5c <__aeabi_dadd>
 8013b74:	0002      	movs	r2, r0
 8013b76:	000b      	movs	r3, r1
 8013b78:	0010      	movs	r0, r2
 8013b7a:	0019      	movs	r1, r3
 8013b7c:	68ba      	ldr	r2, [r7, #8]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f7ed fb08 	bl	8001194 <__aeabi_ddiv>
 8013b84:	0002      	movs	r2, r0
 8013b86:	000b      	movs	r3, r1
 8013b88:	0010      	movs	r0, r2
 8013b8a:	0019      	movs	r1, r3
 8013b8c:	f00c fc02 	bl	8020394 <ceil>
 8013b90:	0002      	movs	r2, r0
 8013b92:	000b      	movs	r3, r1
 8013b94:	0010      	movs	r0, r2
 8013b96:	0019      	movs	r1, r3
 8013b98:	f7ec fce0 	bl	800055c <__aeabi_d2uiz>
 8013b9c:	0002      	movs	r2, r0
 8013b9e:	0023      	movs	r3, r4
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d200      	bcs.n	8013ba6 <RegionCommonComputeRxWindowParameters+0x7a>
 8013ba4:	0013      	movs	r3, r2
 8013ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ba8:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8013baa:	2200      	movs	r2, #0
 8013bac:	4b20      	ldr	r3, [pc, #128]	; (8013c30 <RegionCommonComputeRxWindowParameters+0x104>)
 8013bae:	68b8      	ldr	r0, [r7, #8]
 8013bb0:	68f9      	ldr	r1, [r7, #12]
 8013bb2:	f7ed fef9 	bl	80019a8 <__aeabi_dmul>
 8013bb6:	0003      	movs	r3, r0
 8013bb8:	000c      	movs	r4, r1
 8013bba:	0025      	movs	r5, r4
 8013bbc:	001c      	movs	r4, r3
 8013bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	0018      	movs	r0, r3
 8013bc4:	f7ee fd1a 	bl	80025fc <__aeabi_ui2d>
 8013bc8:	68ba      	ldr	r2, [r7, #8]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	f7ed feec 	bl	80019a8 <__aeabi_dmul>
 8013bd0:	0002      	movs	r2, r0
 8013bd2:	000b      	movs	r3, r1
 8013bd4:	0010      	movs	r0, r2
 8013bd6:	0019      	movs	r1, r3
 8013bd8:	2200      	movs	r2, #0
 8013bda:	2380      	movs	r3, #128	; 0x80
 8013bdc:	05db      	lsls	r3, r3, #23
 8013bde:	f7ed fad9 	bl	8001194 <__aeabi_ddiv>
 8013be2:	0002      	movs	r2, r0
 8013be4:	000b      	movs	r3, r1
 8013be6:	0020      	movs	r0, r4
 8013be8:	0029      	movs	r1, r5
 8013bea:	f7ee f94f 	bl	8001e8c <__aeabi_dsub>
 8013bee:	0003      	movs	r3, r0
 8013bf0:	000c      	movs	r4, r1
 8013bf2:	0025      	movs	r5, r4
 8013bf4:	001c      	movs	r4, r3
 8013bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bf8:	f7ee fd00 	bl	80025fc <__aeabi_ui2d>
 8013bfc:	0002      	movs	r2, r0
 8013bfe:	000b      	movs	r3, r1
 8013c00:	0020      	movs	r0, r4
 8013c02:	0029      	movs	r1, r5
 8013c04:	f7ee f942 	bl	8001e8c <__aeabi_dsub>
 8013c08:	0003      	movs	r3, r0
 8013c0a:	000c      	movs	r4, r1
 8013c0c:	0018      	movs	r0, r3
 8013c0e:	0021      	movs	r1, r4
 8013c10:	f00c fbc0 	bl	8020394 <ceil>
 8013c14:	0003      	movs	r3, r0
 8013c16:	000c      	movs	r4, r1
 8013c18:	0018      	movs	r0, r3
 8013c1a:	0021      	movs	r1, r4
 8013c1c:	f7ee fc7e 	bl	800251c <__aeabi_d2iz>
 8013c20:	0002      	movs	r2, r0
 8013c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c24:	601a      	str	r2, [r3, #0]
}
 8013c26:	46c0      	nop			; (mov r8, r8)
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	b005      	add	sp, #20
 8013c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c2e:	46c0      	nop			; (mov r8, r8)
 8013c30:	40100000 	.word	0x40100000

08013c34 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013c34:	b5b0      	push	{r4, r5, r7, lr}
 8013c36:	b086      	sub	sp, #24
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60b9      	str	r1, [r7, #8]
 8013c3c:	607a      	str	r2, [r7, #4]
 8013c3e:	210f      	movs	r1, #15
 8013c40:	187b      	adds	r3, r7, r1
 8013c42:	1c02      	adds	r2, r0, #0
 8013c44:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 8013c46:	2517      	movs	r5, #23
 8013c48:	197b      	adds	r3, r7, r5
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013c4e:	187b      	adds	r3, r7, r1
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	b25b      	sxtb	r3, r3
 8013c54:	005b      	lsls	r3, r3, #1
 8013c56:	0018      	movs	r0, r3
 8013c58:	f7ec ff40 	bl	8000adc <__aeabi_ui2f>
 8013c5c:	1c03      	adds	r3, r0, #0
 8013c5e:	1c19      	adds	r1, r3, #0
 8013c60:	68b8      	ldr	r0, [r7, #8]
 8013c62:	f7ec fd77 	bl	8000754 <__aeabi_fsub>
 8013c66:	1c03      	adds	r3, r0, #0
 8013c68:	6879      	ldr	r1, [r7, #4]
 8013c6a:	1c18      	adds	r0, r3, #0
 8013c6c:	f7ec fd72 	bl	8000754 <__aeabi_fsub>
 8013c70:	1c03      	adds	r3, r0, #0
 8013c72:	1c18      	adds	r0, r3, #0
 8013c74:	f7ee fcf4 	bl	8002660 <__aeabi_f2d>
 8013c78:	0003      	movs	r3, r0
 8013c7a:	000c      	movs	r4, r1
 8013c7c:	0018      	movs	r0, r3
 8013c7e:	0021      	movs	r1, r4
 8013c80:	f00c fc0a 	bl	8020498 <floor>
 8013c84:	0002      	movs	r2, r0
 8013c86:	000b      	movs	r3, r1
 8013c88:	197c      	adds	r4, r7, r5
 8013c8a:	0010      	movs	r0, r2
 8013c8c:	0019      	movs	r1, r3
 8013c8e:	f7ee fc45 	bl	800251c <__aeabi_d2iz>
 8013c92:	0003      	movs	r3, r0
 8013c94:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8013c96:	197b      	adds	r3, r7, r5
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	b25b      	sxtb	r3, r3
}
 8013c9c:	0018      	movs	r0, r3
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	b006      	add	sp, #24
 8013ca2:	bdb0      	pop	{r4, r5, r7, pc}

08013ca4 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8013ca4:	b5b0      	push	{r4, r5, r7, lr}
 8013ca6:	b084      	sub	sp, #16
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681a      	ldr	r2, [r3, #0]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	7adb      	ldrb	r3, [r3, #11]
 8013cb4:	0019      	movs	r1, r3
 8013cb6:	000b      	movs	r3, r1
 8013cb8:	005b      	lsls	r3, r3, #1
 8013cba:	185b      	adds	r3, r3, r1
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	18d2      	adds	r2, r2, r3
 8013cc0:	210f      	movs	r1, #15
 8013cc2:	187b      	adds	r3, r7, r1
 8013cc4:	7a52      	ldrb	r2, [r2, #9]
 8013cc6:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685a      	ldr	r2, [r3, #4]
 8013ccc:	187b      	adds	r3, r7, r1
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	011b      	lsls	r3, r3, #4
 8013cd2:	18d2      	adds	r2, r2, r3
 8013cd4:	230c      	movs	r3, #12
 8013cd6:	18fb      	adds	r3, r7, r3
 8013cd8:	8812      	ldrh	r2, [r2, #0]
 8013cda:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8013cdc:	230a      	movs	r3, #10
 8013cde:	18fb      	adds	r3, r7, r3
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685a      	ldr	r2, [r3, #4]
 8013ce8:	187b      	adds	r3, r7, r1
 8013cea:	781b      	ldrb	r3, [r3, #0]
 8013cec:	011b      	lsls	r3, r3, #4
 8013cee:	18d3      	adds	r3, r2, r3
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	7a5b      	ldrb	r3, [r3, #9]
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	4053      	eors	r3, r2
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d03c      	beq.n	8013d7c <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	250a      	movs	r5, #10
 8013d08:	197c      	adds	r4, r7, r5
 8013d0a:	0018      	movs	r0, r3
 8013d0c:	f7ff fb1c 	bl	8013348 <RegionCommonGetJoinDc>
 8013d10:	0003      	movs	r3, r0
 8013d12:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013d14:	210c      	movs	r1, #12
 8013d16:	187a      	adds	r2, r7, r1
 8013d18:	197b      	adds	r3, r7, r5
 8013d1a:	1879      	adds	r1, r7, r1
 8013d1c:	880c      	ldrh	r4, [r1, #0]
 8013d1e:	881b      	ldrh	r3, [r3, #0]
 8013d20:	b298      	uxth	r0, r3
 8013d22:	b2a1      	uxth	r1, r4
 8013d24:	4288      	cmp	r0, r1
 8013d26:	d200      	bcs.n	8013d2a <RegionCommonCalcBackOff+0x86>
 8013d28:	1c23      	adds	r3, r4, #0
 8013d2a:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	7a9b      	ldrb	r3, [r3, #10]
 8013d30:	2201      	movs	r2, #1
 8013d32:	4053      	eors	r3, r2
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d010      	beq.n	8013d5c <RegionCommonCalcBackOff+0xb8>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	7a1b      	ldrb	r3, [r3, #8]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	4053      	eors	r3, r2
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d009      	beq.n	8013d5c <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	685a      	ldr	r2, [r3, #4]
 8013d4c:	230f      	movs	r3, #15
 8013d4e:	18fb      	adds	r3, r7, r3
 8013d50:	781b      	ldrb	r3, [r3, #0]
 8013d52:	011b      	lsls	r3, r3, #4
 8013d54:	18d3      	adds	r3, r2, r3
 8013d56:	2200      	movs	r2, #0
 8013d58:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8013d5a:	e02c      	b.n	8013db6 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013d5c:	230c      	movs	r3, #12
 8013d5e:	18fb      	adds	r3, r7, r3
 8013d60:	881b      	ldrh	r3, [r3, #0]
 8013d62:	1e5a      	subs	r2, r3, #1
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6919      	ldr	r1, [r3, #16]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6858      	ldr	r0, [r3, #4]
 8013d6c:	230f      	movs	r3, #15
 8013d6e:	18fb      	adds	r3, r7, r3
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	011b      	lsls	r3, r3, #4
 8013d74:	18c3      	adds	r3, r0, r3
 8013d76:	434a      	muls	r2, r1
 8013d78:	60da      	str	r2, [r3, #12]
}
 8013d7a:	e01c      	b.n	8013db6 <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	7a9b      	ldrb	r3, [r3, #10]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00f      	beq.n	8013da4 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8013d84:	230c      	movs	r3, #12
 8013d86:	18fb      	adds	r3, r7, r3
 8013d88:	881b      	ldrh	r3, [r3, #0]
 8013d8a:	1e5a      	subs	r2, r3, #1
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6919      	ldr	r1, [r3, #16]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6858      	ldr	r0, [r3, #4]
 8013d94:	230f      	movs	r3, #15
 8013d96:	18fb      	adds	r3, r7, r3
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	011b      	lsls	r3, r3, #4
 8013d9c:	18c3      	adds	r3, r0, r3
 8013d9e:	434a      	muls	r2, r1
 8013da0:	60da      	str	r2, [r3, #12]
}
 8013da2:	e008      	b.n	8013db6 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	685a      	ldr	r2, [r3, #4]
 8013da8:	230f      	movs	r3, #15
 8013daa:	18fb      	adds	r3, r7, r3
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	011b      	lsls	r3, r3, #4
 8013db0:	18d3      	adds	r3, r2, r3
 8013db2:	2200      	movs	r2, #0
 8013db4:	60da      	str	r2, [r3, #12]
}
 8013db6:	46c0      	nop			; (mov r8, r8)
 8013db8:	46bd      	mov	sp, r7
 8013dba:	b004      	add	sp, #16
 8013dbc:	bdb0      	pop	{r4, r5, r7, pc}

08013dbe <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b084      	sub	sp, #16
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	0002      	movs	r2, r0
 8013dc6:	1dfb      	adds	r3, r7, #7
 8013dc8:	701a      	strb	r2, [r3, #0]
 8013dca:	1dbb      	adds	r3, r7, #6
 8013dcc:	1c0a      	adds	r2, r1, #0
 8013dce:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8013dd0:	230f      	movs	r3, #15
 8013dd2:	18fb      	adds	r3, r7, r3
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8013dd8:	1dfa      	adds	r2, r7, #7
 8013dda:	1dbb      	adds	r3, r7, #6
 8013ddc:	7812      	ldrb	r2, [r2, #0]
 8013dde:	b252      	sxtb	r2, r2
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	b25b      	sxtb	r3, r3
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d105      	bne.n	8013df4 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8013de8:	230f      	movs	r3, #15
 8013dea:	18fb      	adds	r3, r7, r3
 8013dec:	1dba      	adds	r2, r7, #6
 8013dee:	7812      	ldrb	r2, [r2, #0]
 8013df0:	701a      	strb	r2, [r3, #0]
 8013df2:	e005      	b.n	8013e00 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8013df4:	1dfb      	adds	r3, r7, #7
 8013df6:	781a      	ldrb	r2, [r3, #0]
 8013df8:	230f      	movs	r3, #15
 8013dfa:	18fb      	adds	r3, r7, r3
 8013dfc:	3a01      	subs	r2, #1
 8013dfe:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8013e00:	230f      	movs	r3, #15
 8013e02:	18fb      	adds	r3, r7, r3
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	b25b      	sxtb	r3, r3
}
 8013e08:	0018      	movs	r0, r3
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	b004      	add	sp, #16
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8013e18:	4b09      	ldr	r3, [pc, #36]	; (8013e40 <GetBandwidth+0x30>)
 8013e1a:	687a      	ldr	r2, [r7, #4]
 8013e1c:	0092      	lsls	r2, r2, #2
 8013e1e:	58d3      	ldr	r3, [r2, r3]
 8013e20:	4a08      	ldr	r2, [pc, #32]	; (8013e44 <GetBandwidth+0x34>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d004      	beq.n	8013e30 <GetBandwidth+0x20>
 8013e26:	4a08      	ldr	r2, [pc, #32]	; (8013e48 <GetBandwidth+0x38>)
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d003      	beq.n	8013e34 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	e002      	b.n	8013e36 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8013e30:	2301      	movs	r3, #1
 8013e32:	e000      	b.n	8013e36 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8013e34:	2302      	movs	r3, #2
    }
}
 8013e36:	0018      	movs	r0, r3
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	b002      	add	sp, #8
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	46c0      	nop			; (mov r8, r8)
 8013e40:	08021a18 	.word	0x08021a18
 8013e44:	0003d090 	.word	0x0003d090
 8013e48:	0007a120 	.word	0x0007a120

08013e4c <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8013e4c:	b590      	push	{r4, r7, lr}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	0004      	movs	r4, r0
 8013e54:	0008      	movs	r0, r1
 8013e56:	0011      	movs	r1, r2
 8013e58:	603b      	str	r3, [r7, #0]
 8013e5a:	1dfb      	adds	r3, r7, #7
 8013e5c:	1c22      	adds	r2, r4, #0
 8013e5e:	701a      	strb	r2, [r3, #0]
 8013e60:	1dbb      	adds	r3, r7, #6
 8013e62:	1c02      	adds	r2, r0, #0
 8013e64:	701a      	strb	r2, [r3, #0]
 8013e66:	1d7b      	adds	r3, r7, #5
 8013e68:	1c0a      	adds	r2, r1, #0
 8013e6a:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8013e6c:	210f      	movs	r1, #15
 8013e6e:	187b      	adds	r3, r7, r1
 8013e70:	1dfa      	adds	r2, r7, #7
 8013e72:	7812      	ldrb	r2, [r2, #0]
 8013e74:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8013e76:	187a      	adds	r2, r7, r1
 8013e78:	1dbb      	adds	r3, r7, #6
 8013e7a:	1df9      	adds	r1, r7, #7
 8013e7c:	780c      	ldrb	r4, [r1, #0]
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	b258      	sxtb	r0, r3
 8013e82:	b261      	sxtb	r1, r4
 8013e84:	4288      	cmp	r0, r1
 8013e86:	da00      	bge.n	8013e8a <LimitTxPower+0x3e>
 8013e88:	1c23      	adds	r3, r4, #0
 8013e8a:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8013e8c:	230f      	movs	r3, #15
 8013e8e:	18fb      	adds	r3, r7, r3
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	b25b      	sxtb	r3, r3
}
 8013e94:	0018      	movs	r0, r3
 8013e96:	46bd      	mov	sp, r7
 8013e98:	b005      	add	sp, #20
 8013e9a:	bd90      	pop	{r4, r7, pc}

08013e9c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013ea6:	4b2e      	ldr	r3, [pc, #184]	; (8013f60 <VerifyRfFreq+0xc4>)
 8013ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	0010      	movs	r0, r2
 8013eae:	4798      	blx	r3
 8013eb0:	0003      	movs	r3, r0
 8013eb2:	001a      	movs	r2, r3
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	4053      	eors	r3, r2
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <VerifyRfFreq+0x26>
    {
        return false;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	e04a      	b.n	8013f58 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	4a27      	ldr	r2, [pc, #156]	; (8013f64 <VerifyRfFreq+0xc8>)
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d907      	bls.n	8013eda <VerifyRfFreq+0x3e>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	4a26      	ldr	r2, [pc, #152]	; (8013f68 <VerifyRfFreq+0xcc>)
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d803      	bhi.n	8013eda <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	2202      	movs	r2, #2
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	e03d      	b.n	8013f56 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	4a22      	ldr	r2, [pc, #136]	; (8013f68 <VerifyRfFreq+0xcc>)
 8013ede:	4293      	cmp	r3, r2
 8013ee0:	d907      	bls.n	8013ef2 <VerifyRfFreq+0x56>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4a21      	ldr	r2, [pc, #132]	; (8013f6c <VerifyRfFreq+0xd0>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d803      	bhi.n	8013ef2 <VerifyRfFreq+0x56>
    {
        *band = 0;
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	2200      	movs	r2, #0
 8013eee:	701a      	strb	r2, [r3, #0]
 8013ef0:	e031      	b.n	8013f56 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4a1d      	ldr	r2, [pc, #116]	; (8013f6c <VerifyRfFreq+0xd0>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d907      	bls.n	8013f0a <VerifyRfFreq+0x6e>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4a1c      	ldr	r2, [pc, #112]	; (8013f70 <VerifyRfFreq+0xd4>)
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d803      	bhi.n	8013f0a <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	2201      	movs	r2, #1
 8013f06:	701a      	strb	r2, [r3, #0]
 8013f08:	e025      	b.n	8013f56 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4a19      	ldr	r2, [pc, #100]	; (8013f74 <VerifyRfFreq+0xd8>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d907      	bls.n	8013f22 <VerifyRfFreq+0x86>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	4a18      	ldr	r2, [pc, #96]	; (8013f78 <VerifyRfFreq+0xdc>)
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d803      	bhi.n	8013f22 <VerifyRfFreq+0x86>
    {
        *band = 2;
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	2202      	movs	r2, #2
 8013f1e:	701a      	strb	r2, [r3, #0]
 8013f20:	e019      	b.n	8013f56 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	4a15      	ldr	r2, [pc, #84]	; (8013f7c <VerifyRfFreq+0xe0>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d907      	bls.n	8013f3a <VerifyRfFreq+0x9e>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4a14      	ldr	r2, [pc, #80]	; (8013f80 <VerifyRfFreq+0xe4>)
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d803      	bhi.n	8013f3a <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	2203      	movs	r2, #3
 8013f36:	701a      	strb	r2, [r3, #0]
 8013f38:	e00d      	b.n	8013f56 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	4a11      	ldr	r2, [pc, #68]	; (8013f84 <VerifyRfFreq+0xe8>)
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d907      	bls.n	8013f52 <VerifyRfFreq+0xb6>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	4a10      	ldr	r2, [pc, #64]	; (8013f88 <VerifyRfFreq+0xec>)
 8013f46:	4293      	cmp	r3, r2
 8013f48:	d803      	bhi.n	8013f52 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	2204      	movs	r2, #4
 8013f4e:	701a      	strb	r2, [r3, #0]
 8013f50:	e001      	b.n	8013f56 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8013f52:	2300      	movs	r3, #0
 8013f54:	e000      	b.n	8013f58 <VerifyRfFreq+0xbc>
    }
    return true;
 8013f56:	2301      	movs	r3, #1
}
 8013f58:	0018      	movs	r0, r3
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	b002      	add	sp, #8
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	08021b48 	.word	0x08021b48
 8013f64:	337055bf 	.word	0x337055bf
 8013f68:	338eda3f 	.word	0x338eda3f
 8013f6c:	33bca100 	.word	0x33bca100
 8013f70:	33c5c8c0 	.word	0x33c5c8c0
 8013f74:	33c74f5f 	.word	0x33c74f5f
 8013f78:	33cef080 	.word	0x33cef080
 8013f7c:	33d1fdbf 	.word	0x33d1fdbf
 8013f80:	33d5ce50 	.word	0x33d5ce50
 8013f84:	33d6919f 	.word	0x33d6919f
 8013f88:	33db2580 	.word	0x33db2580

08013f8c <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8013f8c:	b5b0      	push	{r4, r5, r7, lr}
 8013f8e:	b086      	sub	sp, #24
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	60ba      	str	r2, [r7, #8]
 8013f94:	607b      	str	r3, [r7, #4]
 8013f96:	230f      	movs	r3, #15
 8013f98:	18fb      	adds	r3, r7, r3
 8013f9a:	1c02      	adds	r2, r0, #0
 8013f9c:	701a      	strb	r2, [r3, #0]
 8013f9e:	230e      	movs	r3, #14
 8013fa0:	18fb      	adds	r3, r7, r3
 8013fa2:	1c0a      	adds	r2, r1, #0
 8013fa4:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8013fa6:	2317      	movs	r3, #23
 8013fa8:	18fb      	adds	r3, r7, r3
 8013faa:	2200      	movs	r2, #0
 8013fac:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8013fae:	2316      	movs	r3, #22
 8013fb0:	18fb      	adds	r3, r7, r3
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8013fb6:	2315      	movs	r3, #21
 8013fb8:	18fb      	adds	r3, r7, r3
 8013fba:	2200      	movs	r2, #0
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	2314      	movs	r3, #20
 8013fc0:	18fb      	adds	r3, r7, r3
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	701a      	strb	r2, [r3, #0]
 8013fc6:	e0b4      	b.n	8014132 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013fc8:	2313      	movs	r3, #19
 8013fca:	18fb      	adds	r3, r7, r3
 8013fcc:	2200      	movs	r2, #0
 8013fce:	701a      	strb	r2, [r3, #0]
 8013fd0:	e09d      	b.n	801410e <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8013fd2:	2314      	movs	r3, #20
 8013fd4:	18fb      	adds	r3, r7, r3
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	68ba      	ldr	r2, [r7, #8]
 8013fdc:	18d3      	adds	r3, r2, r3
 8013fde:	881b      	ldrh	r3, [r3, #0]
 8013fe0:	001a      	movs	r2, r3
 8013fe2:	2313      	movs	r3, #19
 8013fe4:	18fb      	adds	r3, r7, r3
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	411a      	asrs	r2, r3
 8013fea:	0013      	movs	r3, r2
 8013fec:	2201      	movs	r2, #1
 8013fee:	4013      	ands	r3, r2
 8013ff0:	d100      	bne.n	8013ff4 <CountNbOfEnabledChannels+0x68>
 8013ff2:	e086      	b.n	8014102 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8013ff4:	2315      	movs	r3, #21
 8013ff6:	18fb      	adds	r3, r7, r3
 8013ff8:	781a      	ldrb	r2, [r3, #0]
 8013ffa:	2313      	movs	r3, #19
 8013ffc:	18fb      	adds	r3, r7, r3
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	18d3      	adds	r3, r2, r3
 8014002:	001a      	movs	r2, r3
 8014004:	0013      	movs	r3, r2
 8014006:	005b      	lsls	r3, r3, #1
 8014008:	189b      	adds	r3, r3, r2
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	001a      	movs	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	189b      	adds	r3, r3, r2
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d06f      	beq.n	80140f8 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8014018:	230f      	movs	r3, #15
 801401a:	18fb      	adds	r3, r7, r3
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	2201      	movs	r2, #1
 8014020:	4053      	eors	r3, r2
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b00      	cmp	r3, #0
 8014026:	d008      	beq.n	801403a <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8014028:	2313      	movs	r3, #19
 801402a:	18fb      	adds	r3, r7, r3
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	2207      	movs	r2, #7
 8014030:	411a      	asrs	r2, r3
 8014032:	0013      	movs	r3, r2
 8014034:	2201      	movs	r2, #1
 8014036:	4013      	ands	r3, r2
 8014038:	d060      	beq.n	80140fc <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801403a:	230e      	movs	r3, #14
 801403c:	18fb      	adds	r3, r7, r3
 801403e:	2000      	movs	r0, #0
 8014040:	5618      	ldrsb	r0, [r3, r0]
 8014042:	2415      	movs	r4, #21
 8014044:	193b      	adds	r3, r7, r4
 8014046:	781a      	ldrb	r2, [r3, #0]
 8014048:	2513      	movs	r5, #19
 801404a:	197b      	adds	r3, r7, r5
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	18d3      	adds	r3, r2, r3
 8014050:	001a      	movs	r2, r3
 8014052:	0013      	movs	r3, r2
 8014054:	005b      	lsls	r3, r3, #1
 8014056:	189b      	adds	r3, r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	001a      	movs	r2, r3
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	189b      	adds	r3, r3, r2
 8014060:	7a1b      	ldrb	r3, [r3, #8]
 8014062:	011b      	lsls	r3, r3, #4
 8014064:	b25b      	sxtb	r3, r3
 8014066:	111b      	asrs	r3, r3, #4
 8014068:	b25b      	sxtb	r3, r3
 801406a:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 801406c:	193b      	adds	r3, r7, r4
 801406e:	781a      	ldrb	r2, [r3, #0]
 8014070:	197b      	adds	r3, r7, r5
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	18d3      	adds	r3, r2, r3
 8014076:	001a      	movs	r2, r3
 8014078:	0013      	movs	r3, r2
 801407a:	005b      	lsls	r3, r3, #1
 801407c:	189b      	adds	r3, r3, r2
 801407e:	009b      	lsls	r3, r3, #2
 8014080:	001a      	movs	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	189b      	adds	r3, r3, r2
 8014086:	7a1b      	ldrb	r3, [r3, #8]
 8014088:	b25b      	sxtb	r3, r3
 801408a:	111b      	asrs	r3, r3, #4
 801408c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801408e:	001a      	movs	r2, r3
 8014090:	f7ff fa20 	bl	80134d4 <RegionCommonValueInRange>
 8014094:	1e03      	subs	r3, r0, #0
 8014096:	d033      	beq.n	8014100 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8014098:	2315      	movs	r3, #21
 801409a:	18fb      	adds	r3, r7, r3
 801409c:	781a      	ldrb	r2, [r3, #0]
 801409e:	2313      	movs	r3, #19
 80140a0:	18fb      	adds	r3, r7, r3
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	18d3      	adds	r3, r2, r3
 80140a6:	001a      	movs	r2, r3
 80140a8:	0013      	movs	r3, r2
 80140aa:	005b      	lsls	r3, r3, #1
 80140ac:	189b      	adds	r3, r3, r2
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	001a      	movs	r2, r3
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	189b      	adds	r3, r3, r2
 80140b6:	7a5b      	ldrb	r3, [r3, #9]
 80140b8:	011b      	lsls	r3, r3, #4
 80140ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140bc:	18d3      	adds	r3, r2, r3
 80140be:	68db      	ldr	r3, [r3, #12]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d006      	beq.n	80140d2 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80140c4:	2116      	movs	r1, #22
 80140c6:	187b      	adds	r3, r7, r1
 80140c8:	781a      	ldrb	r2, [r3, #0]
 80140ca:	187b      	adds	r3, r7, r1
 80140cc:	3201      	adds	r2, #1
 80140ce:	701a      	strb	r2, [r3, #0]
                    continue;
 80140d0:	e017      	b.n	8014102 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80140d2:	2217      	movs	r2, #23
 80140d4:	18bb      	adds	r3, r7, r2
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	18ba      	adds	r2, r7, r2
 80140da:	1c59      	adds	r1, r3, #1
 80140dc:	7011      	strb	r1, [r2, #0]
 80140de:	001a      	movs	r2, r3
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	189b      	adds	r3, r3, r2
 80140e4:	2215      	movs	r2, #21
 80140e6:	18b9      	adds	r1, r7, r2
 80140e8:	2213      	movs	r2, #19
 80140ea:	18ba      	adds	r2, r7, r2
 80140ec:	7809      	ldrb	r1, [r1, #0]
 80140ee:	7812      	ldrb	r2, [r2, #0]
 80140f0:	188a      	adds	r2, r1, r2
 80140f2:	b2d2      	uxtb	r2, r2
 80140f4:	701a      	strb	r2, [r3, #0]
 80140f6:	e004      	b.n	8014102 <CountNbOfEnabledChannels+0x176>
                    continue;
 80140f8:	46c0      	nop			; (mov r8, r8)
 80140fa:	e002      	b.n	8014102 <CountNbOfEnabledChannels+0x176>
                        continue;
 80140fc:	46c0      	nop			; (mov r8, r8)
 80140fe:	e000      	b.n	8014102 <CountNbOfEnabledChannels+0x176>
                    continue;
 8014100:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8014102:	2113      	movs	r1, #19
 8014104:	187b      	adds	r3, r7, r1
 8014106:	781a      	ldrb	r2, [r3, #0]
 8014108:	187b      	adds	r3, r7, r1
 801410a:	3201      	adds	r2, #1
 801410c:	701a      	strb	r2, [r3, #0]
 801410e:	2313      	movs	r3, #19
 8014110:	18fb      	adds	r3, r7, r3
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	2b0f      	cmp	r3, #15
 8014116:	d800      	bhi.n	801411a <CountNbOfEnabledChannels+0x18e>
 8014118:	e75b      	b.n	8013fd2 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 801411a:	2215      	movs	r2, #21
 801411c:	18bb      	adds	r3, r7, r2
 801411e:	18ba      	adds	r2, r7, r2
 8014120:	7812      	ldrb	r2, [r2, #0]
 8014122:	3210      	adds	r2, #16
 8014124:	701a      	strb	r2, [r3, #0]
 8014126:	2114      	movs	r1, #20
 8014128:	187b      	adds	r3, r7, r1
 801412a:	781a      	ldrb	r2, [r3, #0]
 801412c:	187b      	adds	r3, r7, r1
 801412e:	3201      	adds	r2, #1
 8014130:	701a      	strb	r2, [r3, #0]
 8014132:	2315      	movs	r3, #21
 8014134:	18fb      	adds	r3, r7, r3
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	2b0f      	cmp	r3, #15
 801413a:	d800      	bhi.n	801413e <CountNbOfEnabledChannels+0x1b2>
 801413c:	e744      	b.n	8013fc8 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 801413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014140:	2216      	movs	r2, #22
 8014142:	18ba      	adds	r2, r7, r2
 8014144:	7812      	ldrb	r2, [r2, #0]
 8014146:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8014148:	2317      	movs	r3, #23
 801414a:	18fb      	adds	r3, r7, r3
 801414c:	781b      	ldrb	r3, [r3, #0]
}
 801414e:	0018      	movs	r0, r3
 8014150:	46bd      	mov	sp, r7
 8014152:	b006      	add	sp, #24
 8014154:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014158 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014160:	2308      	movs	r3, #8
 8014162:	18fb      	adds	r3, r7, r3
 8014164:	2200      	movs	r2, #0
 8014166:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	2b34      	cmp	r3, #52	; 0x34
 801416e:	d900      	bls.n	8014172 <RegionEU868GetPhyParam+0x1a>
 8014170:	e0ce      	b.n	8014310 <RegionEU868GetPhyParam+0x1b8>
 8014172:	009a      	lsls	r2, r3, #2
 8014174:	4b6e      	ldr	r3, [pc, #440]	; (8014330 <RegionEU868GetPhyParam+0x1d8>)
 8014176:	18d3      	adds	r3, r2, r3
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801417c:	2308      	movs	r3, #8
 801417e:	18fb      	adds	r3, r7, r3
 8014180:	2200      	movs	r2, #0
 8014182:	601a      	str	r2, [r3, #0]
            break;
 8014184:	e0c5      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8014186:	2308      	movs	r3, #8
 8014188:	18fb      	adds	r3, r7, r3
 801418a:	2200      	movs	r2, #0
 801418c:	601a      	str	r2, [r3, #0]
            break;
 801418e:	e0c0      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8014190:	2308      	movs	r3, #8
 8014192:	18fb      	adds	r3, r7, r3
 8014194:	2200      	movs	r2, #0
 8014196:	601a      	str	r2, [r3, #0]
            break;
 8014198:	e0bb      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	785b      	ldrb	r3, [r3, #1]
 801419e:	b25b      	sxtb	r3, r3
 80141a0:	2100      	movs	r1, #0
 80141a2:	0018      	movs	r0, r3
 80141a4:	f7ff fe0b 	bl	8013dbe <GetNextLowerTxDr>
 80141a8:	0003      	movs	r3, r0
 80141aa:	001a      	movs	r2, r3
 80141ac:	2308      	movs	r3, #8
 80141ae:	18fb      	adds	r3, r7, r3
 80141b0:	601a      	str	r2, [r3, #0]
            break;
 80141b2:	e0ae      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80141b4:	2308      	movs	r3, #8
 80141b6:	18fb      	adds	r3, r7, r3
 80141b8:	2200      	movs	r2, #0
 80141ba:	601a      	str	r2, [r3, #0]
            break;
 80141bc:	e0a9      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80141be:	2308      	movs	r3, #8
 80141c0:	18fb      	adds	r3, r7, r3
 80141c2:	2200      	movs	r2, #0
 80141c4:	601a      	str	r2, [r3, #0]
            break;
 80141c6:	e0a4      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 80141c8:	2308      	movs	r3, #8
 80141ca:	18fb      	adds	r3, r7, r3
 80141cc:	2240      	movs	r2, #64	; 0x40
 80141ce:	601a      	str	r2, [r3, #0]
            break;
 80141d0:	e09f      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 80141d2:	2308      	movs	r3, #8
 80141d4:	18fb      	adds	r3, r7, r3
 80141d6:	2220      	movs	r2, #32
 80141d8:	601a      	str	r2, [r3, #0]
            break;
 80141da:	e09a      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	785b      	ldrb	r3, [r3, #1]
 80141e0:	b25b      	sxtb	r3, r3
 80141e2:	001a      	movs	r2, r3
 80141e4:	4b53      	ldr	r3, [pc, #332]	; (8014334 <RegionEU868GetPhyParam+0x1dc>)
 80141e6:	5c9b      	ldrb	r3, [r3, r2]
 80141e8:	001a      	movs	r2, r3
 80141ea:	2308      	movs	r3, #8
 80141ec:	18fb      	adds	r3, r7, r3
 80141ee:	601a      	str	r2, [r3, #0]
            break;
 80141f0:	e08f      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	785b      	ldrb	r3, [r3, #1]
 80141f6:	b25b      	sxtb	r3, r3
 80141f8:	001a      	movs	r2, r3
 80141fa:	4b4f      	ldr	r3, [pc, #316]	; (8014338 <RegionEU868GetPhyParam+0x1e0>)
 80141fc:	5c9b      	ldrb	r3, [r3, r2]
 80141fe:	001a      	movs	r2, r3
 8014200:	2308      	movs	r3, #8
 8014202:	18fb      	adds	r3, r7, r3
 8014204:	601a      	str	r2, [r3, #0]
            break;
 8014206:	e084      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8014208:	2308      	movs	r3, #8
 801420a:	18fb      	adds	r3, r7, r3
 801420c:	2201      	movs	r2, #1
 801420e:	601a      	str	r2, [r3, #0]
            break;
 8014210:	e07f      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8014212:	2308      	movs	r3, #8
 8014214:	18fb      	adds	r3, r7, r3
 8014216:	4a49      	ldr	r2, [pc, #292]	; (801433c <RegionEU868GetPhyParam+0x1e4>)
 8014218:	601a      	str	r2, [r3, #0]
            break;
 801421a:	e07a      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 801421c:	2308      	movs	r3, #8
 801421e:	18fb      	adds	r3, r7, r3
 8014220:	22fa      	movs	r2, #250	; 0xfa
 8014222:	0092      	lsls	r2, r2, #2
 8014224:	601a      	str	r2, [r3, #0]
            break;
 8014226:	e074      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8014228:	2308      	movs	r3, #8
 801422a:	18fb      	adds	r3, r7, r3
 801422c:	22fa      	movs	r2, #250	; 0xfa
 801422e:	00d2      	lsls	r2, r2, #3
 8014230:	601a      	str	r2, [r3, #0]
            break;
 8014232:	e06e      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8014234:	2308      	movs	r3, #8
 8014236:	18fb      	adds	r3, r7, r3
 8014238:	4a41      	ldr	r2, [pc, #260]	; (8014340 <RegionEU868GetPhyParam+0x1e8>)
 801423a:	601a      	str	r2, [r3, #0]
            break;
 801423c:	e069      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 801423e:	2308      	movs	r3, #8
 8014240:	18fb      	adds	r3, r7, r3
 8014242:	4a40      	ldr	r2, [pc, #256]	; (8014344 <RegionEU868GetPhyParam+0x1ec>)
 8014244:	601a      	str	r2, [r3, #0]
            break;
 8014246:	e064      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8014248:	2308      	movs	r3, #8
 801424a:	18fb      	adds	r3, r7, r3
 801424c:	2280      	movs	r2, #128	; 0x80
 801424e:	01d2      	lsls	r2, r2, #7
 8014250:	601a      	str	r2, [r3, #0]
            break;
 8014252:	e05e      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8014254:	23fa      	movs	r3, #250	; 0xfa
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	4a3b      	ldr	r2, [pc, #236]	; (8014348 <RegionEU868GetPhyParam+0x1f0>)
 801425a:	0019      	movs	r1, r3
 801425c:	0010      	movs	r0, r2
 801425e:	f001 fbb7 	bl	80159d0 <randr>
 8014262:	0003      	movs	r3, r0
 8014264:	22fa      	movs	r2, #250	; 0xfa
 8014266:	00d2      	lsls	r2, r2, #3
 8014268:	4694      	mov	ip, r2
 801426a:	4463      	add	r3, ip
 801426c:	001a      	movs	r2, r3
 801426e:	2308      	movs	r3, #8
 8014270:	18fb      	adds	r3, r7, r3
 8014272:	601a      	str	r2, [r3, #0]
            break;
 8014274:	e04d      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8014276:	2308      	movs	r3, #8
 8014278:	18fb      	adds	r3, r7, r3
 801427a:	2200      	movs	r2, #0
 801427c:	601a      	str	r2, [r3, #0]
            break;
 801427e:	e048      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8014280:	2308      	movs	r3, #8
 8014282:	18fb      	adds	r3, r7, r3
 8014284:	4a31      	ldr	r2, [pc, #196]	; (801434c <RegionEU868GetPhyParam+0x1f4>)
 8014286:	601a      	str	r2, [r3, #0]
            break;
 8014288:	e043      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801428a:	2308      	movs	r3, #8
 801428c:	18fb      	adds	r3, r7, r3
 801428e:	2200      	movs	r2, #0
 8014290:	601a      	str	r2, [r3, #0]
            break;
 8014292:	e03e      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8014294:	2308      	movs	r3, #8
 8014296:	18fb      	adds	r3, r7, r3
 8014298:	4a2d      	ldr	r2, [pc, #180]	; (8014350 <RegionEU868GetPhyParam+0x1f8>)
 801429a:	601a      	str	r2, [r3, #0]
            break;
 801429c:	e039      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801429e:	2308      	movs	r3, #8
 80142a0:	18fb      	adds	r3, r7, r3
 80142a2:	4a2c      	ldr	r2, [pc, #176]	; (8014354 <RegionEU868GetPhyParam+0x1fc>)
 80142a4:	601a      	str	r2, [r3, #0]
            break;
 80142a6:	e034      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80142a8:	2308      	movs	r3, #8
 80142aa:	18fb      	adds	r3, r7, r3
 80142ac:	2210      	movs	r2, #16
 80142ae:	601a      	str	r2, [r3, #0]
            break;
 80142b0:	e02f      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80142b2:	2308      	movs	r3, #8
 80142b4:	18fb      	adds	r3, r7, r3
 80142b6:	4a28      	ldr	r2, [pc, #160]	; (8014358 <RegionEU868GetPhyParam+0x200>)
 80142b8:	601a      	str	r2, [r3, #0]
            break;
 80142ba:	e02a      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80142bc:	2308      	movs	r3, #8
 80142be:	18fb      	adds	r3, r7, r3
 80142c0:	2200      	movs	r2, #0
 80142c2:	601a      	str	r2, [r3, #0]
            break;
 80142c4:	e025      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80142c6:	2308      	movs	r3, #8
 80142c8:	18fb      	adds	r3, r7, r3
 80142ca:	2283      	movs	r2, #131	; 0x83
 80142cc:	05d2      	lsls	r2, r2, #23
 80142ce:	601a      	str	r2, [r3, #0]
            break;
 80142d0:	e01f      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80142d2:	2308      	movs	r3, #8
 80142d4:	18fb      	adds	r3, r7, r3
 80142d6:	4a21      	ldr	r2, [pc, #132]	; (801435c <RegionEU868GetPhyParam+0x204>)
 80142d8:	601a      	str	r2, [r3, #0]
            break;
 80142da:	e01a      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80142dc:	2308      	movs	r3, #8
 80142de:	18fb      	adds	r3, r7, r3
 80142e0:	4a1a      	ldr	r2, [pc, #104]	; (801434c <RegionEU868GetPhyParam+0x1f4>)
 80142e2:	601a      	str	r2, [r3, #0]
            break;
 80142e4:	e015      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80142e6:	2108      	movs	r1, #8
 80142e8:	187b      	adds	r3, r7, r1
 80142ea:	2211      	movs	r2, #17
 80142ec:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80142ee:	187b      	adds	r3, r7, r1
 80142f0:	2202      	movs	r2, #2
 80142f2:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80142f4:	187b      	adds	r3, r7, r1
 80142f6:	2200      	movs	r2, #0
 80142f8:	709a      	strb	r2, [r3, #2]
            break;
 80142fa:	e00a      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80142fc:	2308      	movs	r3, #8
 80142fe:	18fb      	adds	r3, r7, r3
 8014300:	2203      	movs	r2, #3
 8014302:	601a      	str	r2, [r3, #0]
            break;
 8014304:	e005      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8014306:	2308      	movs	r3, #8
 8014308:	18fb      	adds	r3, r7, r3
 801430a:	2203      	movs	r2, #3
 801430c:	601a      	str	r2, [r3, #0]
            break;
 801430e:	e000      	b.n	8014312 <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8014310:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8014312:	210c      	movs	r1, #12
 8014314:	187b      	adds	r3, r7, r1
 8014316:	2208      	movs	r2, #8
 8014318:	18ba      	adds	r2, r7, r2
 801431a:	6812      	ldr	r2, [r2, #0]
 801431c:	601a      	str	r2, [r3, #0]
 801431e:	187b      	adds	r3, r7, r1
 8014320:	2200      	movs	r2, #0
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	0013      	movs	r3, r2
}
 8014326:	0018      	movs	r0, r3
 8014328:	46bd      	mov	sp, r7
 801432a:	b004      	add	sp, #16
 801432c:	bd80      	pop	{r7, pc}
 801432e:	46c0      	nop			; (mov r8, r8)
 8014330:	08021a48 	.word	0x08021a48
 8014334:	08021a38 	.word	0x08021a38
 8014338:	08021a40 	.word	0x08021a40
 801433c:	00000bb8 	.word	0x00000bb8
 8014340:	00001388 	.word	0x00001388
 8014344:	00001770 	.word	0x00001770
 8014348:	fffffc18 	.word	0xfffffc18
 801434c:	33d3e608 	.word	0x33d3e608
 8014350:	2000104c 	.word	0x2000104c
 8014354:	2000104e 	.word	0x2000104e
 8014358:	20000f3c 	.word	0x20000f3c
 801435c:	4009999a 	.word	0x4009999a

08014360 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	7858      	ldrb	r0, [r3, #1]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	0019      	movs	r1, r3
 8014372:	4a0a      	ldr	r2, [pc, #40]	; (801439c <RegionEU868SetBandTxDone+0x3c>)
 8014374:	000b      	movs	r3, r1
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	185b      	adds	r3, r3, r1
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	18d3      	adds	r3, r2, r3
 801437e:	3309      	adds	r3, #9
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	330c      	adds	r3, #12
 8014384:	011a      	lsls	r2, r3, #4
 8014386:	4b05      	ldr	r3, [pc, #20]	; (801439c <RegionEU868SetBandTxDone+0x3c>)
 8014388:	18d1      	adds	r1, r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	001a      	movs	r2, r3
 8014390:	f7ff f978 	bl	8013684 <RegionCommonSetBandTxDone>
}
 8014394:	46c0      	nop			; (mov r8, r8)
 8014396:	46bd      	mov	sp, r7
 8014398:	b002      	add	sp, #8
 801439a:	bd80      	pop	{r7, pc}
 801439c:	20000f3c 	.word	0x20000f3c

080143a0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80143a0:	b590      	push	{r4, r7, lr}
 80143a2:	b097      	sub	sp, #92	; 0x5c
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 80143a8:	2108      	movs	r1, #8
 80143aa:	000c      	movs	r4, r1
 80143ac:	187b      	adds	r3, r7, r1
 80143ae:	0018      	movs	r0, r3
 80143b0:	2350      	movs	r3, #80	; 0x50
 80143b2:	001a      	movs	r2, r3
 80143b4:	2100      	movs	r1, #0
 80143b6:	f00a fec1 	bl	801f13c <memset>
 80143ba:	0021      	movs	r1, r4
 80143bc:	187b      	adds	r3, r7, r1
 80143be:	2264      	movs	r2, #100	; 0x64
 80143c0:	801a      	strh	r2, [r3, #0]
 80143c2:	187b      	adds	r3, r7, r1
 80143c4:	2264      	movs	r2, #100	; 0x64
 80143c6:	821a      	strh	r2, [r3, #16]
 80143c8:	187b      	adds	r3, r7, r1
 80143ca:	22fa      	movs	r2, #250	; 0xfa
 80143cc:	0092      	lsls	r2, r2, #2
 80143ce:	841a      	strh	r2, [r3, #32]
 80143d0:	187b      	adds	r3, r7, r1
 80143d2:	220a      	movs	r2, #10
 80143d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80143d6:	187b      	adds	r3, r7, r1
 80143d8:	2240      	movs	r2, #64	; 0x40
 80143da:	2164      	movs	r1, #100	; 0x64
 80143dc:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	791b      	ldrb	r3, [r3, #4]
 80143e2:	2b01      	cmp	r3, #1
 80143e4:	d032      	beq.n	801444c <RegionEU868InitDefaults+0xac>
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d023      	beq.n	8014432 <RegionEU868InitDefaults+0x92>
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d000      	beq.n	80143f0 <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80143ee:	e03d      	b.n	801446c <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80143f0:	2308      	movs	r3, #8
 80143f2:	18f9      	adds	r1, r7, r3
 80143f4:	4b1f      	ldr	r3, [pc, #124]	; (8014474 <RegionEU868InitDefaults+0xd4>)
 80143f6:	2250      	movs	r2, #80	; 0x50
 80143f8:	0018      	movs	r0, r3
 80143fa:	f001 faff 	bl	80159fc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80143fe:	4b1e      	ldr	r3, [pc, #120]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 8014400:	4a1e      	ldr	r2, [pc, #120]	; (801447c <RegionEU868InitDefaults+0xdc>)
 8014402:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014404:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8014406:	4b1c      	ldr	r3, [pc, #112]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 8014408:	4a1d      	ldr	r2, [pc, #116]	; (8014480 <RegionEU868InitDefaults+0xe0>)
 801440a:	330c      	adds	r3, #12
 801440c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801440e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8014410:	4b19      	ldr	r3, [pc, #100]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 8014412:	4a1c      	ldr	r2, [pc, #112]	; (8014484 <RegionEU868InitDefaults+0xe4>)
 8014414:	3318      	adds	r3, #24
 8014416:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014418:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801441a:	4a17      	ldr	r2, [pc, #92]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 801441c:	2389      	movs	r3, #137	; 0x89
 801441e:	005b      	lsls	r3, r3, #1
 8014420:	2107      	movs	r1, #7
 8014422:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8014424:	4918      	ldr	r1, [pc, #96]	; (8014488 <RegionEU868InitDefaults+0xe8>)
 8014426:	4b19      	ldr	r3, [pc, #100]	; (801448c <RegionEU868InitDefaults+0xec>)
 8014428:	2201      	movs	r2, #1
 801442a:	0018      	movs	r0, r3
 801442c:	f7ff f8fb 	bl	8013626 <RegionCommonChanMaskCopy>
            break;
 8014430:	e01c      	b.n	801446c <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d017      	beq.n	801446a <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6819      	ldr	r1, [r3, #0]
 801443e:	238a      	movs	r3, #138	; 0x8a
 8014440:	005a      	lsls	r2, r3, #1
 8014442:	4b0d      	ldr	r3, [pc, #52]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 8014444:	0018      	movs	r0, r3
 8014446:	f001 fad9 	bl	80159fc <memcpy1>
            break;
 801444a:	e00e      	b.n	801446a <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801444c:	4a0a      	ldr	r2, [pc, #40]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 801444e:	2388      	movs	r3, #136	; 0x88
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	5ad2      	ldrh	r2, [r2, r3]
 8014454:	4908      	ldr	r1, [pc, #32]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 8014456:	2389      	movs	r3, #137	; 0x89
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	5acb      	ldrh	r3, [r1, r3]
 801445c:	4313      	orrs	r3, r2
 801445e:	b299      	uxth	r1, r3
 8014460:	4a05      	ldr	r2, [pc, #20]	; (8014478 <RegionEU868InitDefaults+0xd8>)
 8014462:	2388      	movs	r3, #136	; 0x88
 8014464:	005b      	lsls	r3, r3, #1
 8014466:	52d1      	strh	r1, [r2, r3]
            break;
 8014468:	e000      	b.n	801446c <RegionEU868InitDefaults+0xcc>
            break;
 801446a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801446c:	46c0      	nop			; (mov r8, r8)
 801446e:	46bd      	mov	sp, r7
 8014470:	b017      	add	sp, #92	; 0x5c
 8014472:	bd90      	pop	{r4, r7, pc}
 8014474:	20000ffc 	.word	0x20000ffc
 8014478:	20000f3c 	.word	0x20000f3c
 801447c:	08020790 	.word	0x08020790
 8014480:	0802079c 	.word	0x0802079c
 8014484:	080207a8 	.word	0x080207a8
 8014488:	2000104e 	.word	0x2000104e
 801448c:	2000104c 	.word	0x2000104c

08014490 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	228a      	movs	r2, #138	; 0x8a
 801449c:	0052      	lsls	r2, r2, #1
 801449e:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80144a0:	4b02      	ldr	r3, [pc, #8]	; (80144ac <RegionEU868GetNvmCtx+0x1c>)
}
 80144a2:	0018      	movs	r0, r3
 80144a4:	46bd      	mov	sp, r7
 80144a6:	b002      	add	sp, #8
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	46c0      	nop			; (mov r8, r8)
 80144ac:	20000f3c 	.word	0x20000f3c

080144b0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	000a      	movs	r2, r1
 80144ba:	1cfb      	adds	r3, r7, #3
 80144bc:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80144be:	1cfb      	adds	r3, r7, #3
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	3b04      	subs	r3, #4
 80144c4:	2b0a      	cmp	r3, #10
 80144c6:	d83a      	bhi.n	801453e <RegionEU868Verify+0x8e>
 80144c8:	009a      	lsls	r2, r3, #2
 80144ca:	4b1f      	ldr	r3, [pc, #124]	; (8014548 <RegionEU868Verify+0x98>)
 80144cc:	18d3      	adds	r3, r2, r3
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	469f      	mov	pc, r3
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	b25b      	sxtb	r3, r3
 80144d8:	2207      	movs	r2, #7
 80144da:	2100      	movs	r1, #0
 80144dc:	0018      	movs	r0, r3
 80144de:	f7fe fff9 	bl	80134d4 <RegionCommonValueInRange>
 80144e2:	0003      	movs	r3, r0
 80144e4:	1e5a      	subs	r2, r3, #1
 80144e6:	4193      	sbcs	r3, r2
 80144e8:	b2db      	uxtb	r3, r3
 80144ea:	e029      	b.n	8014540 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	b25b      	sxtb	r3, r3
 80144f2:	2205      	movs	r2, #5
 80144f4:	2100      	movs	r1, #0
 80144f6:	0018      	movs	r0, r3
 80144f8:	f7fe ffec 	bl	80134d4 <RegionCommonValueInRange>
 80144fc:	0003      	movs	r3, r0
 80144fe:	1e5a      	subs	r2, r3, #1
 8014500:	4193      	sbcs	r3, r2
 8014502:	b2db      	uxtb	r3, r3
 8014504:	e01c      	b.n	8014540 <RegionEU868Verify+0x90>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	b25b      	sxtb	r3, r3
 801450c:	2207      	movs	r2, #7
 801450e:	2100      	movs	r1, #0
 8014510:	0018      	movs	r0, r3
 8014512:	f7fe ffdf 	bl	80134d4 <RegionCommonValueInRange>
 8014516:	0003      	movs	r3, r0
 8014518:	1e5a      	subs	r2, r3, #1
 801451a:	4193      	sbcs	r3, r2
 801451c:	b2db      	uxtb	r3, r3
 801451e:	e00f      	b.n	8014540 <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	b25b      	sxtb	r3, r3
 8014526:	2207      	movs	r2, #7
 8014528:	2100      	movs	r1, #0
 801452a:	0018      	movs	r0, r3
 801452c:	f7fe ffd2 	bl	80134d4 <RegionCommonValueInRange>
 8014530:	0003      	movs	r3, r0
 8014532:	1e5a      	subs	r2, r3, #1
 8014534:	4193      	sbcs	r3, r2
 8014536:	b2db      	uxtb	r3, r3
 8014538:	e002      	b.n	8014540 <RegionEU868Verify+0x90>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801453a:	2301      	movs	r3, #1
 801453c:	e000      	b.n	8014540 <RegionEU868Verify+0x90>
        }
        default:
            return false;
 801453e:	2300      	movs	r3, #0
    }
}
 8014540:	0018      	movs	r0, r3
 8014542:	46bd      	mov	sp, r7
 8014544:	b002      	add	sp, #8
 8014546:	bd80      	pop	{r7, pc}
 8014548:	08021b1c 	.word	0x08021b1c

0801454c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801454c:	b590      	push	{r4, r7, lr}
 801454e:	b08b      	sub	sp, #44	; 0x2c
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014554:	2318      	movs	r3, #24
 8014556:	18fb      	adds	r3, r7, r3
 8014558:	2250      	movs	r2, #80	; 0x50
 801455a:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	791b      	ldrb	r3, [r3, #4]
 8014560:	2b10      	cmp	r3, #16
 8014562:	d000      	beq.n	8014566 <RegionEU868ApplyCFList+0x1a>
 8014564:	e07d      	b.n	8014662 <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	330f      	adds	r3, #15
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d000      	beq.n	8014574 <RegionEU868ApplyCFList+0x28>
 8014572:	e078      	b.n	8014666 <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014574:	2327      	movs	r3, #39	; 0x27
 8014576:	18fb      	adds	r3, r7, r3
 8014578:	2200      	movs	r2, #0
 801457a:	701a      	strb	r2, [r3, #0]
 801457c:	2326      	movs	r3, #38	; 0x26
 801457e:	18fb      	adds	r3, r7, r3
 8014580:	2203      	movs	r2, #3
 8014582:	701a      	strb	r2, [r3, #0]
 8014584:	e067      	b.n	8014656 <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8014586:	2326      	movs	r3, #38	; 0x26
 8014588:	18fb      	adds	r3, r7, r3
 801458a:	781b      	ldrb	r3, [r3, #0]
 801458c:	2b07      	cmp	r3, #7
 801458e:	d82e      	bhi.n	80145ee <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	2427      	movs	r4, #39	; 0x27
 8014596:	193b      	adds	r3, r7, r4
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	18d3      	adds	r3, r2, r3
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	001a      	movs	r2, r3
 80145a0:	2018      	movs	r0, #24
 80145a2:	183b      	adds	r3, r7, r0
 80145a4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80145a6:	183b      	adds	r3, r7, r0
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6819      	ldr	r1, [r3, #0]
 80145ae:	193b      	adds	r3, r7, r4
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	3301      	adds	r3, #1
 80145b4:	18cb      	adds	r3, r1, r3
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	021b      	lsls	r3, r3, #8
 80145ba:	431a      	orrs	r2, r3
 80145bc:	183b      	adds	r3, r7, r0
 80145be:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80145c0:	183b      	adds	r3, r7, r0
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6819      	ldr	r1, [r3, #0]
 80145c8:	193b      	adds	r3, r7, r4
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	3302      	adds	r3, #2
 80145ce:	18cb      	adds	r3, r1, r3
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	041b      	lsls	r3, r3, #16
 80145d4:	431a      	orrs	r2, r3
 80145d6:	183b      	adds	r3, r7, r0
 80145d8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80145da:	183b      	adds	r3, r7, r0
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	2264      	movs	r2, #100	; 0x64
 80145e0:	435a      	muls	r2, r3
 80145e2:	183b      	adds	r3, r7, r0
 80145e4:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80145e6:	183b      	adds	r3, r7, r0
 80145e8:	2200      	movs	r2, #0
 80145ea:	605a      	str	r2, [r3, #4]
 80145ec:	e009      	b.n	8014602 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80145ee:	2118      	movs	r1, #24
 80145f0:	187b      	adds	r3, r7, r1
 80145f2:	2200      	movs	r2, #0
 80145f4:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80145f6:	187b      	adds	r3, r7, r1
 80145f8:	2200      	movs	r2, #0
 80145fa:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80145fc:	187b      	adds	r3, r7, r1
 80145fe:	2200      	movs	r2, #0
 8014600:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8014602:	2318      	movs	r3, #24
 8014604:	18fb      	adds	r3, r7, r3
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00e      	beq.n	801462a <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 801460c:	2110      	movs	r1, #16
 801460e:	187b      	adds	r3, r7, r1
 8014610:	2218      	movs	r2, #24
 8014612:	18ba      	adds	r2, r7, r2
 8014614:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8014616:	187b      	adds	r3, r7, r1
 8014618:	2226      	movs	r2, #38	; 0x26
 801461a:	18ba      	adds	r2, r7, r2
 801461c:	7812      	ldrb	r2, [r2, #0]
 801461e:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014620:	187b      	adds	r3, r7, r1
 8014622:	0018      	movs	r0, r3
 8014624:	f000 fdc2 	bl	80151ac <RegionEU868ChannelAdd>
 8014628:	e009      	b.n	801463e <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801462a:	210c      	movs	r1, #12
 801462c:	187b      	adds	r3, r7, r1
 801462e:	2226      	movs	r2, #38	; 0x26
 8014630:	18ba      	adds	r2, r7, r2
 8014632:	7812      	ldrb	r2, [r2, #0]
 8014634:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8014636:	187b      	adds	r3, r7, r1
 8014638:	0018      	movs	r0, r3
 801463a:	f000 fe7b 	bl	8015334 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801463e:	2227      	movs	r2, #39	; 0x27
 8014640:	18bb      	adds	r3, r7, r2
 8014642:	18ba      	adds	r2, r7, r2
 8014644:	7812      	ldrb	r2, [r2, #0]
 8014646:	3203      	adds	r2, #3
 8014648:	701a      	strb	r2, [r3, #0]
 801464a:	2126      	movs	r1, #38	; 0x26
 801464c:	187b      	adds	r3, r7, r1
 801464e:	781a      	ldrb	r2, [r3, #0]
 8014650:	187b      	adds	r3, r7, r1
 8014652:	3201      	adds	r2, #1
 8014654:	701a      	strb	r2, [r3, #0]
 8014656:	2326      	movs	r3, #38	; 0x26
 8014658:	18fb      	adds	r3, r7, r3
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	2b0f      	cmp	r3, #15
 801465e:	d992      	bls.n	8014586 <RegionEU868ApplyCFList+0x3a>
 8014660:	e002      	b.n	8014668 <RegionEU868ApplyCFList+0x11c>
        return;
 8014662:	46c0      	nop			; (mov r8, r8)
 8014664:	e000      	b.n	8014668 <RegionEU868ApplyCFList+0x11c>
        return;
 8014666:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8014668:	46bd      	mov	sp, r7
 801466a:	b00b      	add	sp, #44	; 0x2c
 801466c:	bd90      	pop	{r4, r7, pc}
	...

08014670 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	791b      	ldrb	r3, [r3, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d002      	beq.n	8014686 <RegionEU868ChanMaskSet+0x16>
 8014680:	2b01      	cmp	r3, #1
 8014682:	d008      	beq.n	8014696 <RegionEU868ChanMaskSet+0x26>
 8014684:	e00f      	b.n	80146a6 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6819      	ldr	r1, [r3, #0]
 801468a:	4b0a      	ldr	r3, [pc, #40]	; (80146b4 <RegionEU868ChanMaskSet+0x44>)
 801468c:	2201      	movs	r2, #1
 801468e:	0018      	movs	r0, r3
 8014690:	f7fe ffc9 	bl	8013626 <RegionCommonChanMaskCopy>
            break;
 8014694:	e009      	b.n	80146aa <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6819      	ldr	r1, [r3, #0]
 801469a:	4b07      	ldr	r3, [pc, #28]	; (80146b8 <RegionEU868ChanMaskSet+0x48>)
 801469c:	2201      	movs	r2, #1
 801469e:	0018      	movs	r0, r3
 80146a0:	f7fe ffc1 	bl	8013626 <RegionCommonChanMaskCopy>
            break;
 80146a4:	e001      	b.n	80146aa <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80146a6:	2300      	movs	r3, #0
 80146a8:	e000      	b.n	80146ac <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80146aa:	2301      	movs	r3, #1
}
 80146ac:	0018      	movs	r0, r3
 80146ae:	46bd      	mov	sp, r7
 80146b0:	b002      	add	sp, #8
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	2000104c 	.word	0x2000104c
 80146b8:	2000104e 	.word	0x2000104e

080146bc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80146bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146be:	b08b      	sub	sp, #44	; 0x2c
 80146c0:	af04      	add	r7, sp, #16
 80146c2:	60ba      	str	r2, [r7, #8]
 80146c4:	607b      	str	r3, [r7, #4]
 80146c6:	250f      	movs	r5, #15
 80146c8:	197b      	adds	r3, r7, r5
 80146ca:	1c02      	adds	r2, r0, #0
 80146cc:	701a      	strb	r2, [r3, #0]
 80146ce:	230e      	movs	r3, #14
 80146d0:	18fb      	adds	r3, r7, r3
 80146d2:	1c0a      	adds	r2, r1, #0
 80146d4:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80146d6:	2300      	movs	r3, #0
 80146d8:	2400      	movs	r4, #0
 80146da:	613b      	str	r3, [r7, #16]
 80146dc:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80146de:	197b      	adds	r3, r7, r5
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	b25a      	sxtb	r2, r3
 80146e4:	2a07      	cmp	r2, #7
 80146e6:	dd00      	ble.n	80146ea <RegionEU868ComputeRxWindowParameters+0x2e>
 80146e8:	2307      	movs	r3, #7
 80146ea:	b25a      	sxtb	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	785b      	ldrb	r3, [r3, #1]
 80146f4:	b25b      	sxtb	r3, r3
 80146f6:	0018      	movs	r0, r3
 80146f8:	f7ff fb8a 	bl	8013e10 <GetBandwidth>
 80146fc:	0003      	movs	r3, r0
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	785b      	ldrb	r3, [r3, #1]
 8014708:	b25b      	sxtb	r3, r3
 801470a:	2b07      	cmp	r3, #7
 801470c:	d10d      	bne.n	801472a <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	785b      	ldrb	r3, [r3, #1]
 8014712:	b25b      	sxtb	r3, r3
 8014714:	001a      	movs	r2, r3
 8014716:	4b1b      	ldr	r3, [pc, #108]	; (8014784 <RegionEU868ComputeRxWindowParameters+0xc8>)
 8014718:	5c9b      	ldrb	r3, [r3, r2]
 801471a:	0018      	movs	r0, r3
 801471c:	f7ff f9ea 	bl	8013af4 <RegionCommonComputeSymbolTimeFsk>
 8014720:	0003      	movs	r3, r0
 8014722:	000c      	movs	r4, r1
 8014724:	613b      	str	r3, [r7, #16]
 8014726:	617c      	str	r4, [r7, #20]
 8014728:	e013      	b.n	8014752 <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	785b      	ldrb	r3, [r3, #1]
 801472e:	b25b      	sxtb	r3, r3
 8014730:	001a      	movs	r2, r3
 8014732:	4b14      	ldr	r3, [pc, #80]	; (8014784 <RegionEU868ComputeRxWindowParameters+0xc8>)
 8014734:	5c98      	ldrb	r0, [r3, r2]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	785b      	ldrb	r3, [r3, #1]
 801473a:	b25b      	sxtb	r3, r3
 801473c:	001a      	movs	r2, r3
 801473e:	4b12      	ldr	r3, [pc, #72]	; (8014788 <RegionEU868ComputeRxWindowParameters+0xcc>)
 8014740:	0092      	lsls	r2, r2, #2
 8014742:	58d3      	ldr	r3, [r2, r3]
 8014744:	0019      	movs	r1, r3
 8014746:	f7ff f9a9 	bl	8013a9c <RegionCommonComputeSymbolTimeLoRa>
 801474a:	0003      	movs	r3, r0
 801474c:	000c      	movs	r4, r1
 801474e:	613b      	str	r3, [r7, #16]
 8014750:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014752:	4b0e      	ldr	r3, [pc, #56]	; (801478c <RegionEU868ComputeRxWindowParameters+0xd0>)
 8014754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014756:	4798      	blx	r3
 8014758:	0006      	movs	r6, r0
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	3308      	adds	r3, #8
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	320c      	adds	r2, #12
 8014762:	68bd      	ldr	r5, [r7, #8]
 8014764:	210e      	movs	r1, #14
 8014766:	1879      	adds	r1, r7, r1
 8014768:	780c      	ldrb	r4, [r1, #0]
 801476a:	6938      	ldr	r0, [r7, #16]
 801476c:	6979      	ldr	r1, [r7, #20]
 801476e:	9202      	str	r2, [sp, #8]
 8014770:	9301      	str	r3, [sp, #4]
 8014772:	9600      	str	r6, [sp, #0]
 8014774:	002b      	movs	r3, r5
 8014776:	0022      	movs	r2, r4
 8014778:	f7ff f9d8 	bl	8013b2c <RegionCommonComputeRxWindowParameters>
}
 801477c:	46c0      	nop			; (mov r8, r8)
 801477e:	46bd      	mov	sp, r7
 8014780:	b007      	add	sp, #28
 8014782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014784:	08021a10 	.word	0x08021a10
 8014788:	08021a18 	.word	0x08021a18
 801478c:	08021b48 	.word	0x08021b48

08014790 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014792:	b091      	sub	sp, #68	; 0x44
 8014794:	af0a      	add	r7, sp, #40	; 0x28
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801479a:	230f      	movs	r3, #15
 801479c:	18fb      	adds	r3, r7, r3
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	7852      	ldrb	r2, [r2, #1]
 80147a2:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80147a4:	2316      	movs	r3, #22
 80147a6:	18fb      	adds	r3, r7, r3
 80147a8:	2200      	movs	r2, #0
 80147aa:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80147ac:	230e      	movs	r3, #14
 80147ae:	18fb      	adds	r3, r7, r3
 80147b0:	2200      	movs	r2, #0
 80147b2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	685b      	ldr	r3, [r3, #4]
 80147b8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80147ba:	4b64      	ldr	r3, [pc, #400]	; (801494c <RegionEU868RxConfig+0x1bc>)
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	4798      	blx	r3
 80147c0:	1e03      	subs	r3, r0, #0
 80147c2:	d001      	beq.n	80147c8 <RegionEU868RxConfig+0x38>
    {
        return false;
 80147c4:	2300      	movs	r3, #0
 80147c6:	e0bc      	b.n	8014942 <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	7cdb      	ldrb	r3, [r3, #19]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d122      	bne.n	8014816 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	0019      	movs	r1, r3
 80147d6:	4a5e      	ldr	r2, [pc, #376]	; (8014950 <RegionEU868RxConfig+0x1c0>)
 80147d8:	000b      	movs	r3, r1
 80147da:	005b      	lsls	r3, r3, #1
 80147dc:	185b      	adds	r3, r3, r1
 80147de:	009b      	lsls	r3, r3, #2
 80147e0:	589b      	ldr	r3, [r3, r2]
 80147e2:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	0019      	movs	r1, r3
 80147ea:	4a59      	ldr	r2, [pc, #356]	; (8014950 <RegionEU868RxConfig+0x1c0>)
 80147ec:	000b      	movs	r3, r1
 80147ee:	005b      	lsls	r3, r3, #1
 80147f0:	185b      	adds	r3, r3, r1
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	18d3      	adds	r3, r2, r3
 80147f6:	3304      	adds	r3, #4
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00b      	beq.n	8014816 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	0019      	movs	r1, r3
 8014804:	4a52      	ldr	r2, [pc, #328]	; (8014950 <RegionEU868RxConfig+0x1c0>)
 8014806:	000b      	movs	r3, r1
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	185b      	adds	r3, r3, r1
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	18d3      	adds	r3, r2, r3
 8014810:	3304      	adds	r3, #4
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014816:	240f      	movs	r4, #15
 8014818:	193b      	adds	r3, r7, r4
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	b25b      	sxtb	r3, r3
 801481e:	4a4d      	ldr	r2, [pc, #308]	; (8014954 <RegionEU868RxConfig+0x1c4>)
 8014820:	5cd2      	ldrb	r2, [r2, r3]
 8014822:	230e      	movs	r3, #14
 8014824:	18fb      	adds	r3, r7, r3
 8014826:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8014828:	4b48      	ldr	r3, [pc, #288]	; (801494c <RegionEU868RxConfig+0x1bc>)
 801482a:	695b      	ldr	r3, [r3, #20]
 801482c:	693a      	ldr	r2, [r7, #16]
 801482e:	0010      	movs	r0, r2
 8014830:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014832:	193b      	adds	r3, r7, r4
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	b25b      	sxtb	r3, r3
 8014838:	2b07      	cmp	r3, #7
 801483a:	d12f      	bne.n	801489c <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 801483c:	2117      	movs	r1, #23
 801483e:	187b      	adds	r3, r7, r1
 8014840:	2200      	movs	r2, #0
 8014842:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014844:	4b41      	ldr	r3, [pc, #260]	; (801494c <RegionEU868RxConfig+0x1bc>)
 8014846:	6a1c      	ldr	r4, [r3, #32]
 8014848:	230e      	movs	r3, #14
 801484a:	18fb      	adds	r3, r7, r3
 801484c:	2200      	movs	r2, #0
 801484e:	569a      	ldrsb	r2, [r3, r2]
 8014850:	0013      	movs	r3, r2
 8014852:	015b      	lsls	r3, r3, #5
 8014854:	1a9b      	subs	r3, r3, r2
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	189b      	adds	r3, r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	001e      	movs	r6, r3
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	b29b      	uxth	r3, r3
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	7c92      	ldrb	r2, [r2, #18]
 8014868:	4d3b      	ldr	r5, [pc, #236]	; (8014958 <RegionEU868RxConfig+0x1c8>)
 801486a:	1879      	adds	r1, r7, r1
 801486c:	7808      	ldrb	r0, [r1, #0]
 801486e:	9209      	str	r2, [sp, #36]	; 0x24
 8014870:	2200      	movs	r2, #0
 8014872:	9208      	str	r2, [sp, #32]
 8014874:	2200      	movs	r2, #0
 8014876:	9207      	str	r2, [sp, #28]
 8014878:	2200      	movs	r2, #0
 801487a:	9206      	str	r2, [sp, #24]
 801487c:	2201      	movs	r2, #1
 801487e:	9205      	str	r2, [sp, #20]
 8014880:	2200      	movs	r2, #0
 8014882:	9204      	str	r2, [sp, #16]
 8014884:	2200      	movs	r2, #0
 8014886:	9203      	str	r2, [sp, #12]
 8014888:	9302      	str	r3, [sp, #8]
 801488a:	2305      	movs	r3, #5
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	4b33      	ldr	r3, [pc, #204]	; (801495c <RegionEU868RxConfig+0x1cc>)
 8014890:	9300      	str	r3, [sp, #0]
 8014892:	2300      	movs	r3, #0
 8014894:	0032      	movs	r2, r6
 8014896:	0029      	movs	r1, r5
 8014898:	47a0      	blx	r4
 801489a:	e029      	b.n	80148f0 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 801489c:	2117      	movs	r1, #23
 801489e:	187b      	adds	r3, r7, r1
 80148a0:	2201      	movs	r2, #1
 80148a2:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80148a4:	4b29      	ldr	r3, [pc, #164]	; (801494c <RegionEU868RxConfig+0x1bc>)
 80148a6:	6a1c      	ldr	r4, [r3, #32]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	789b      	ldrb	r3, [r3, #2]
 80148ac:	001e      	movs	r6, r3
 80148ae:	230e      	movs	r3, #14
 80148b0:	18fb      	adds	r3, r7, r3
 80148b2:	2500      	movs	r5, #0
 80148b4:	575d      	ldrsb	r5, [r3, r5]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	687a      	ldr	r2, [r7, #4]
 80148be:	7c92      	ldrb	r2, [r2, #18]
 80148c0:	1879      	adds	r1, r7, r1
 80148c2:	7808      	ldrb	r0, [r1, #0]
 80148c4:	9209      	str	r2, [sp, #36]	; 0x24
 80148c6:	2201      	movs	r2, #1
 80148c8:	9208      	str	r2, [sp, #32]
 80148ca:	2200      	movs	r2, #0
 80148cc:	9207      	str	r2, [sp, #28]
 80148ce:	2200      	movs	r2, #0
 80148d0:	9206      	str	r2, [sp, #24]
 80148d2:	2200      	movs	r2, #0
 80148d4:	9205      	str	r2, [sp, #20]
 80148d6:	2200      	movs	r2, #0
 80148d8:	9204      	str	r2, [sp, #16]
 80148da:	2200      	movs	r2, #0
 80148dc:	9203      	str	r2, [sp, #12]
 80148de:	9302      	str	r3, [sp, #8]
 80148e0:	2308      	movs	r3, #8
 80148e2:	9301      	str	r3, [sp, #4]
 80148e4:	2300      	movs	r3, #0
 80148e6:	9300      	str	r3, [sp, #0]
 80148e8:	2301      	movs	r3, #1
 80148ea:	002a      	movs	r2, r5
 80148ec:	0031      	movs	r1, r6
 80148ee:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	7c5b      	ldrb	r3, [r3, #17]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d009      	beq.n	801490c <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80148f8:	230f      	movs	r3, #15
 80148fa:	18fb      	adds	r3, r7, r3
 80148fc:	2200      	movs	r2, #0
 80148fe:	569a      	ldrsb	r2, [r3, r2]
 8014900:	2316      	movs	r3, #22
 8014902:	18fb      	adds	r3, r7, r3
 8014904:	4916      	ldr	r1, [pc, #88]	; (8014960 <RegionEU868RxConfig+0x1d0>)
 8014906:	5c8a      	ldrb	r2, [r1, r2]
 8014908:	701a      	strb	r2, [r3, #0]
 801490a:	e008      	b.n	801491e <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801490c:	230f      	movs	r3, #15
 801490e:	18fb      	adds	r3, r7, r3
 8014910:	2200      	movs	r2, #0
 8014912:	569a      	ldrsb	r2, [r3, r2]
 8014914:	2316      	movs	r3, #22
 8014916:	18fb      	adds	r3, r7, r3
 8014918:	4912      	ldr	r1, [pc, #72]	; (8014964 <RegionEU868RxConfig+0x1d4>)
 801491a:	5c8a      	ldrb	r2, [r1, r2]
 801491c:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801491e:	4b0b      	ldr	r3, [pc, #44]	; (801494c <RegionEU868RxConfig+0x1bc>)
 8014920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014922:	2216      	movs	r2, #22
 8014924:	18ba      	adds	r2, r7, r2
 8014926:	7812      	ldrb	r2, [r2, #0]
 8014928:	320d      	adds	r2, #13
 801492a:	b2d1      	uxtb	r1, r2
 801492c:	2217      	movs	r2, #23
 801492e:	18ba      	adds	r2, r7, r2
 8014930:	7812      	ldrb	r2, [r2, #0]
 8014932:	0010      	movs	r0, r2
 8014934:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	220f      	movs	r2, #15
 801493a:	18ba      	adds	r2, r7, r2
 801493c:	7812      	ldrb	r2, [r2, #0]
 801493e:	701a      	strb	r2, [r3, #0]
    return true;
 8014940:	2301      	movs	r3, #1
}
 8014942:	0018      	movs	r0, r3
 8014944:	46bd      	mov	sp, r7
 8014946:	b007      	add	sp, #28
 8014948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801494a:	46c0      	nop			; (mov r8, r8)
 801494c:	08021b48 	.word	0x08021b48
 8014950:	20000f3c 	.word	0x20000f3c
 8014954:	08021a10 	.word	0x08021a10
 8014958:	0000c350 	.word	0x0000c350
 801495c:	00014585 	.word	0x00014585
 8014960:	08021a40 	.word	0x08021a40
 8014964:	08021a38 	.word	0x08021a38

08014968 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801496a:	b093      	sub	sp, #76	; 0x4c
 801496c:	af0a      	add	r7, sp, #40	; 0x28
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	785b      	ldrb	r3, [r3, #1]
 8014978:	b25b      	sxtb	r3, r3
 801497a:	001a      	movs	r2, r3
 801497c:	4b60      	ldr	r3, [pc, #384]	; (8014b00 <RegionEU868TxConfig+0x198>)
 801497e:	5c9a      	ldrb	r2, [r3, r2]
 8014980:	231e      	movs	r3, #30
 8014982:	18fb      	adds	r3, r7, r3
 8014984:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2002      	movs	r0, #2
 801498a:	5618      	ldrsb	r0, [r3, r0]
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	0019      	movs	r1, r3
 8014992:	4a5c      	ldr	r2, [pc, #368]	; (8014b04 <RegionEU868TxConfig+0x19c>)
 8014994:	000b      	movs	r3, r1
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	185b      	adds	r3, r3, r1
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	18d3      	adds	r3, r2, r3
 801499e:	3309      	adds	r3, #9
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	4a58      	ldr	r2, [pc, #352]	; (8014b04 <RegionEU868TxConfig+0x19c>)
 80149a4:	330c      	adds	r3, #12
 80149a6:	011b      	lsls	r3, r3, #4
 80149a8:	18d3      	adds	r3, r2, r3
 80149aa:	3302      	adds	r3, #2
 80149ac:	2100      	movs	r1, #0
 80149ae:	5659      	ldrsb	r1, [r3, r1]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	2201      	movs	r2, #1
 80149b4:	569a      	ldrsb	r2, [r3, r2]
 80149b6:	251d      	movs	r5, #29
 80149b8:	197c      	adds	r4, r7, r5
 80149ba:	4b53      	ldr	r3, [pc, #332]	; (8014b08 <RegionEU868TxConfig+0x1a0>)
 80149bc:	f7ff fa46 	bl	8013e4c <LimitTxPower>
 80149c0:	0003      	movs	r3, r0
 80149c2:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	785b      	ldrb	r3, [r3, #1]
 80149c8:	b25b      	sxtb	r3, r3
 80149ca:	0018      	movs	r0, r3
 80149cc:	f7ff fa20 	bl	8013e10 <GetBandwidth>
 80149d0:	0003      	movs	r3, r0
 80149d2:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80149d4:	2017      	movs	r0, #23
 80149d6:	183b      	adds	r3, r7, r0
 80149d8:	2200      	movs	r2, #0
 80149da:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6859      	ldr	r1, [r3, #4]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	689a      	ldr	r2, [r3, #8]
 80149e4:	183c      	adds	r4, r7, r0
 80149e6:	197b      	adds	r3, r7, r5
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	b25b      	sxtb	r3, r3
 80149ec:	0018      	movs	r0, r3
 80149ee:	f7ff f921 	bl	8013c34 <RegionCommonComputeTxPower>
 80149f2:	0003      	movs	r3, r0
 80149f4:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80149f6:	4b45      	ldr	r3, [pc, #276]	; (8014b0c <RegionEU868TxConfig+0x1a4>)
 80149f8:	695a      	ldr	r2, [r3, #20]
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	0018      	movs	r0, r3
 8014a00:	4940      	ldr	r1, [pc, #256]	; (8014b04 <RegionEU868TxConfig+0x19c>)
 8014a02:	0003      	movs	r3, r0
 8014a04:	005b      	lsls	r3, r3, #1
 8014a06:	181b      	adds	r3, r3, r0
 8014a08:	009b      	lsls	r3, r3, #2
 8014a0a:	585b      	ldr	r3, [r3, r1]
 8014a0c:	0018      	movs	r0, r3
 8014a0e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	785b      	ldrb	r3, [r3, #1]
 8014a14:	b25b      	sxtb	r3, r3
 8014a16:	2b07      	cmp	r3, #7
 8014a18:	d12d      	bne.n	8014a76 <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014a1a:	201f      	movs	r0, #31
 8014a1c:	183b      	adds	r3, r7, r0
 8014a1e:	2200      	movs	r2, #0
 8014a20:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8014a22:	4b3a      	ldr	r3, [pc, #232]	; (8014b0c <RegionEU868TxConfig+0x1a4>)
 8014a24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a26:	231e      	movs	r3, #30
 8014a28:	18fb      	adds	r3, r7, r3
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	569a      	ldrsb	r2, [r3, r2]
 8014a2e:	0013      	movs	r3, r2
 8014a30:	015b      	lsls	r3, r3, #5
 8014a32:	1a9b      	subs	r3, r3, r2
 8014a34:	009b      	lsls	r3, r3, #2
 8014a36:	189b      	adds	r3, r3, r2
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	001d      	movs	r5, r3
 8014a3c:	69ba      	ldr	r2, [r7, #24]
 8014a3e:	4e34      	ldr	r6, [pc, #208]	; (8014b10 <RegionEU868TxConfig+0x1a8>)
 8014a40:	2317      	movs	r3, #23
 8014a42:	18fb      	adds	r3, r7, r3
 8014a44:	2100      	movs	r1, #0
 8014a46:	5659      	ldrsb	r1, [r3, r1]
 8014a48:	183b      	adds	r3, r7, r0
 8014a4a:	7818      	ldrb	r0, [r3, #0]
 8014a4c:	4b31      	ldr	r3, [pc, #196]	; (8014b14 <RegionEU868TxConfig+0x1ac>)
 8014a4e:	9308      	str	r3, [sp, #32]
 8014a50:	2300      	movs	r3, #0
 8014a52:	9307      	str	r3, [sp, #28]
 8014a54:	2300      	movs	r3, #0
 8014a56:	9306      	str	r3, [sp, #24]
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9305      	str	r3, [sp, #20]
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	9304      	str	r3, [sp, #16]
 8014a60:	2300      	movs	r3, #0
 8014a62:	9303      	str	r3, [sp, #12]
 8014a64:	2305      	movs	r3, #5
 8014a66:	9302      	str	r3, [sp, #8]
 8014a68:	2300      	movs	r3, #0
 8014a6a:	9301      	str	r3, [sp, #4]
 8014a6c:	9500      	str	r5, [sp, #0]
 8014a6e:	0013      	movs	r3, r2
 8014a70:	0032      	movs	r2, r6
 8014a72:	47a0      	blx	r4
 8014a74:	e024      	b.n	8014ac0 <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8014a76:	201f      	movs	r0, #31
 8014a78:	183b      	adds	r3, r7, r0
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8014a7e:	4b23      	ldr	r3, [pc, #140]	; (8014b0c <RegionEU868TxConfig+0x1a4>)
 8014a80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a82:	231e      	movs	r3, #30
 8014a84:	18fb      	adds	r3, r7, r3
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	b25b      	sxtb	r3, r3
 8014a8a:	69bd      	ldr	r5, [r7, #24]
 8014a8c:	2217      	movs	r2, #23
 8014a8e:	18ba      	adds	r2, r7, r2
 8014a90:	2100      	movs	r1, #0
 8014a92:	5651      	ldrsb	r1, [r2, r1]
 8014a94:	183a      	adds	r2, r7, r0
 8014a96:	7810      	ldrb	r0, [r2, #0]
 8014a98:	4a1e      	ldr	r2, [pc, #120]	; (8014b14 <RegionEU868TxConfig+0x1ac>)
 8014a9a:	9208      	str	r2, [sp, #32]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	9207      	str	r2, [sp, #28]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	9206      	str	r2, [sp, #24]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	9205      	str	r2, [sp, #20]
 8014aa8:	2201      	movs	r2, #1
 8014aaa:	9204      	str	r2, [sp, #16]
 8014aac:	2200      	movs	r2, #0
 8014aae:	9203      	str	r2, [sp, #12]
 8014ab0:	2208      	movs	r2, #8
 8014ab2:	9202      	str	r2, [sp, #8]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	9201      	str	r2, [sp, #4]
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	002b      	movs	r3, r5
 8014abc:	2200      	movs	r2, #0
 8014abe:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8014ac0:	4b12      	ldr	r3, [pc, #72]	; (8014b0c <RegionEU868TxConfig+0x1a4>)
 8014ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	8992      	ldrh	r2, [r2, #12]
 8014ac8:	b2d1      	uxtb	r1, r2
 8014aca:	241f      	movs	r4, #31
 8014acc:	193a      	adds	r2, r7, r4
 8014ace:	7812      	ldrb	r2, [r2, #0]
 8014ad0:	0010      	movs	r0, r2
 8014ad2:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8014ad4:	4b0d      	ldr	r3, [pc, #52]	; (8014b0c <RegionEU868TxConfig+0x1a4>)
 8014ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ad8:	68fa      	ldr	r2, [r7, #12]
 8014ada:	8992      	ldrh	r2, [r2, #12]
 8014adc:	b2d1      	uxtb	r1, r2
 8014ade:	193a      	adds	r2, r7, r4
 8014ae0:	7812      	ldrb	r2, [r2, #0]
 8014ae2:	0010      	movs	r0, r2
 8014ae4:	4798      	blx	r3
 8014ae6:	0002      	movs	r2, r0
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	221d      	movs	r2, #29
 8014af0:	18ba      	adds	r2, r7, r2
 8014af2:	7812      	ldrb	r2, [r2, #0]
 8014af4:	701a      	strb	r2, [r3, #0]
    return true;
 8014af6:	2301      	movs	r3, #1
}
 8014af8:	0018      	movs	r0, r3
 8014afa:	46bd      	mov	sp, r7
 8014afc:	b009      	add	sp, #36	; 0x24
 8014afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b00:	08021a10 	.word	0x08021a10
 8014b04:	20000f3c 	.word	0x20000f3c
 8014b08:	2000104c 	.word	0x2000104c
 8014b0c:	08021b48 	.word	0x08021b48
 8014b10:	000061a8 	.word	0x000061a8
 8014b14:	00000bb8 	.word	0x00000bb8

08014b18 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b1a:	b093      	sub	sp, #76	; 0x4c
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	607a      	str	r2, [r7, #4]
 8014b24:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014b26:	2347      	movs	r3, #71	; 0x47
 8014b28:	18fb      	adds	r3, r7, r3
 8014b2a:	2207      	movs	r2, #7
 8014b2c:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8014b2e:	2344      	movs	r3, #68	; 0x44
 8014b30:	18fb      	adds	r3, r7, r3
 8014b32:	2200      	movs	r2, #0
 8014b34:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8014b36:	2346      	movs	r3, #70	; 0x46
 8014b38:	18fb      	adds	r3, r7, r3
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8014b3e:	233a      	movs	r3, #58	; 0x3a
 8014b40:	18fb      	adds	r3, r7, r3
 8014b42:	2200      	movs	r2, #0
 8014b44:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014b46:	e09e      	b.n	8014c86 <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	685a      	ldr	r2, [r3, #4]
 8014b4c:	2346      	movs	r3, #70	; 0x46
 8014b4e:	18fb      	adds	r3, r7, r3
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	18d3      	adds	r3, r2, r3
 8014b54:	2544      	movs	r5, #68	; 0x44
 8014b56:	197c      	adds	r4, r7, r5
 8014b58:	223c      	movs	r2, #60	; 0x3c
 8014b5a:	18ba      	adds	r2, r7, r2
 8014b5c:	0011      	movs	r1, r2
 8014b5e:	0018      	movs	r0, r3
 8014b60:	f7fe fea0 	bl	80138a4 <RegionCommonParseLinkAdrReq>
 8014b64:	0003      	movs	r3, r0
 8014b66:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8014b68:	197b      	adds	r3, r7, r5
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d100      	bne.n	8014b72 <RegionEU868LinkAdrReq+0x5a>
 8014b70:	e092      	b.n	8014c98 <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014b72:	2246      	movs	r2, #70	; 0x46
 8014b74:	18bb      	adds	r3, r7, r2
 8014b76:	18b9      	adds	r1, r7, r2
 8014b78:	2244      	movs	r2, #68	; 0x44
 8014b7a:	18ba      	adds	r2, r7, r2
 8014b7c:	7809      	ldrb	r1, [r1, #0]
 8014b7e:	7812      	ldrb	r2, [r2, #0]
 8014b80:	188a      	adds	r2, r1, r2
 8014b82:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014b84:	2347      	movs	r3, #71	; 0x47
 8014b86:	18fb      	adds	r3, r7, r3
 8014b88:	2207      	movs	r2, #7
 8014b8a:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8014b8c:	213c      	movs	r1, #60	; 0x3c
 8014b8e:	187b      	adds	r3, r7, r1
 8014b90:	889a      	ldrh	r2, [r3, #4]
 8014b92:	233a      	movs	r3, #58	; 0x3a
 8014b94:	18fb      	adds	r3, r7, r3
 8014b96:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8014b98:	187b      	adds	r3, r7, r1
 8014b9a:	78db      	ldrb	r3, [r3, #3]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d10c      	bne.n	8014bba <RegionEU868LinkAdrReq+0xa2>
 8014ba0:	233a      	movs	r3, #58	; 0x3a
 8014ba2:	18fb      	adds	r3, r7, r3
 8014ba4:	881b      	ldrh	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d107      	bne.n	8014bba <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8014baa:	2247      	movs	r2, #71	; 0x47
 8014bac:	18bb      	adds	r3, r7, r2
 8014bae:	18ba      	adds	r2, r7, r2
 8014bb0:	7812      	ldrb	r2, [r2, #0]
 8014bb2:	2101      	movs	r1, #1
 8014bb4:	438a      	bics	r2, r1
 8014bb6:	701a      	strb	r2, [r3, #0]
 8014bb8:	e065      	b.n	8014c86 <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014bba:	233c      	movs	r3, #60	; 0x3c
 8014bbc:	18fb      	adds	r3, r7, r3
 8014bbe:	78db      	ldrb	r3, [r3, #3]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d004      	beq.n	8014bce <RegionEU868LinkAdrReq+0xb6>
 8014bc4:	233c      	movs	r3, #60	; 0x3c
 8014bc6:	18fb      	adds	r3, r7, r3
 8014bc8:	78db      	ldrb	r3, [r3, #3]
 8014bca:	2b05      	cmp	r3, #5
 8014bcc:	d904      	bls.n	8014bd8 <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8014bce:	233c      	movs	r3, #60	; 0x3c
 8014bd0:	18fb      	adds	r3, r7, r3
 8014bd2:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014bd4:	2b06      	cmp	r3, #6
 8014bd6:	d907      	bls.n	8014be8 <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8014bd8:	2247      	movs	r2, #71	; 0x47
 8014bda:	18bb      	adds	r3, r7, r2
 8014bdc:	18ba      	adds	r2, r7, r2
 8014bde:	7812      	ldrb	r2, [r2, #0]
 8014be0:	2101      	movs	r1, #1
 8014be2:	438a      	bics	r2, r1
 8014be4:	701a      	strb	r2, [r3, #0]
 8014be6:	e04e      	b.n	8014c86 <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014be8:	2345      	movs	r3, #69	; 0x45
 8014bea:	18fb      	adds	r3, r7, r3
 8014bec:	2200      	movs	r2, #0
 8014bee:	701a      	strb	r2, [r3, #0]
 8014bf0:	e044      	b.n	8014c7c <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8014bf2:	233c      	movs	r3, #60	; 0x3c
 8014bf4:	18fb      	adds	r3, r7, r3
 8014bf6:	78db      	ldrb	r3, [r3, #3]
 8014bf8:	2b06      	cmp	r3, #6
 8014bfa:	d11b      	bne.n	8014c34 <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8014bfc:	2345      	movs	r3, #69	; 0x45
 8014bfe:	18fb      	adds	r3, r7, r3
 8014c00:	781a      	ldrb	r2, [r3, #0]
 8014c02:	496e      	ldr	r1, [pc, #440]	; (8014dbc <RegionEU868LinkAdrReq+0x2a4>)
 8014c04:	0013      	movs	r3, r2
 8014c06:	005b      	lsls	r3, r3, #1
 8014c08:	189b      	adds	r3, r3, r2
 8014c0a:	009b      	lsls	r3, r3, #2
 8014c0c:	585b      	ldr	r3, [r3, r1]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d02e      	beq.n	8014c70 <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8014c12:	2345      	movs	r3, #69	; 0x45
 8014c14:	18fb      	adds	r3, r7, r3
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	409a      	lsls	r2, r3
 8014c1c:	0013      	movs	r3, r2
 8014c1e:	b21a      	sxth	r2, r3
 8014c20:	213a      	movs	r1, #58	; 0x3a
 8014c22:	187b      	adds	r3, r7, r1
 8014c24:	881b      	ldrh	r3, [r3, #0]
 8014c26:	b21b      	sxth	r3, r3
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	b21b      	sxth	r3, r3
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	187b      	adds	r3, r7, r1
 8014c30:	801a      	strh	r2, [r3, #0]
 8014c32:	e01d      	b.n	8014c70 <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014c34:	233a      	movs	r3, #58	; 0x3a
 8014c36:	18fb      	adds	r3, r7, r3
 8014c38:	881b      	ldrh	r3, [r3, #0]
 8014c3a:	001a      	movs	r2, r3
 8014c3c:	2345      	movs	r3, #69	; 0x45
 8014c3e:	18fb      	adds	r3, r7, r3
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	411a      	asrs	r2, r3
 8014c44:	0013      	movs	r3, r2
 8014c46:	2201      	movs	r2, #1
 8014c48:	4013      	ands	r3, r2
 8014c4a:	d011      	beq.n	8014c70 <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8014c4c:	2345      	movs	r3, #69	; 0x45
 8014c4e:	18fb      	adds	r3, r7, r3
 8014c50:	781a      	ldrb	r2, [r3, #0]
 8014c52:	495a      	ldr	r1, [pc, #360]	; (8014dbc <RegionEU868LinkAdrReq+0x2a4>)
 8014c54:	0013      	movs	r3, r2
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	189b      	adds	r3, r3, r2
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d106      	bne.n	8014c70 <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8014c62:	2247      	movs	r2, #71	; 0x47
 8014c64:	18bb      	adds	r3, r7, r2
 8014c66:	18ba      	adds	r2, r7, r2
 8014c68:	7812      	ldrb	r2, [r2, #0]
 8014c6a:	2101      	movs	r1, #1
 8014c6c:	438a      	bics	r2, r1
 8014c6e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014c70:	2145      	movs	r1, #69	; 0x45
 8014c72:	187b      	adds	r3, r7, r1
 8014c74:	781a      	ldrb	r2, [r3, #0]
 8014c76:	187b      	adds	r3, r7, r1
 8014c78:	3201      	adds	r2, #1
 8014c7a:	701a      	strb	r2, [r3, #0]
 8014c7c:	2345      	movs	r3, #69	; 0x45
 8014c7e:	18fb      	adds	r3, r7, r3
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	2b0f      	cmp	r3, #15
 8014c84:	d9b5      	bls.n	8014bf2 <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	7a1b      	ldrb	r3, [r3, #8]
 8014c8a:	2246      	movs	r2, #70	; 0x46
 8014c8c:	18ba      	adds	r2, r7, r2
 8014c8e:	7812      	ldrb	r2, [r2, #0]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d200      	bcs.n	8014c96 <RegionEU868LinkAdrReq+0x17e>
 8014c94:	e758      	b.n	8014b48 <RegionEU868LinkAdrReq+0x30>
 8014c96:	e000      	b.n	8014c9a <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8014c98:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014c9a:	2134      	movs	r1, #52	; 0x34
 8014c9c:	187b      	adds	r3, r7, r1
 8014c9e:	2201      	movs	r2, #1
 8014ca0:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	7a5a      	ldrb	r2, [r3, #9]
 8014ca6:	187b      	adds	r3, r7, r1
 8014ca8:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8014caa:	187b      	adds	r3, r7, r1
 8014cac:	0018      	movs	r0, r3
 8014cae:	f7ff fa53 	bl	8014158 <RegionEU868GetPhyParam>
 8014cb2:	0003      	movs	r3, r0
 8014cb4:	001a      	movs	r2, r3
 8014cb6:	2030      	movs	r0, #48	; 0x30
 8014cb8:	183b      	adds	r3, r7, r0
 8014cba:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8014cbc:	2110      	movs	r1, #16
 8014cbe:	187b      	adds	r3, r7, r1
 8014cc0:	2447      	movs	r4, #71	; 0x47
 8014cc2:	193a      	adds	r2, r7, r4
 8014cc4:	7812      	ldrb	r2, [r2, #0]
 8014cc6:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	7a9a      	ldrb	r2, [r3, #10]
 8014ccc:	187b      	adds	r3, r7, r1
 8014cce:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014cd0:	253c      	movs	r5, #60	; 0x3c
 8014cd2:	197b      	adds	r3, r7, r5
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	569a      	ldrsb	r2, [r3, r2]
 8014cd8:	187b      	adds	r3, r7, r1
 8014cda:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8014cdc:	197b      	adds	r3, r7, r5
 8014cde:	2202      	movs	r2, #2
 8014ce0:	569a      	ldrsb	r2, [r3, r2]
 8014ce2:	187b      	adds	r3, r7, r1
 8014ce4:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014ce6:	197b      	adds	r3, r7, r5
 8014ce8:	781a      	ldrb	r2, [r3, #0]
 8014cea:	187b      	adds	r3, r7, r1
 8014cec:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	220b      	movs	r2, #11
 8014cf2:	569a      	ldrsb	r2, [r3, r2]
 8014cf4:	187b      	adds	r3, r7, r1
 8014cf6:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	220c      	movs	r2, #12
 8014cfc:	569a      	ldrsb	r2, [r3, r2]
 8014cfe:	187b      	adds	r3, r7, r1
 8014d00:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	7b5b      	ldrb	r3, [r3, #13]
 8014d06:	b25a      	sxtb	r2, r3
 8014d08:	187b      	adds	r3, r7, r1
 8014d0a:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8014d0c:	187b      	adds	r3, r7, r1
 8014d0e:	2210      	movs	r2, #16
 8014d10:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8014d12:	187b      	adds	r3, r7, r1
 8014d14:	223a      	movs	r2, #58	; 0x3a
 8014d16:	18ba      	adds	r2, r7, r2
 8014d18:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014d1a:	183b      	adds	r3, r7, r0
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	b25a      	sxtb	r2, r3
 8014d20:	0008      	movs	r0, r1
 8014d22:	183b      	adds	r3, r7, r0
 8014d24:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8014d26:	183b      	adds	r3, r7, r0
 8014d28:	2207      	movs	r2, #7
 8014d2a:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8014d2c:	183b      	adds	r3, r7, r0
 8014d2e:	4a23      	ldr	r2, [pc, #140]	; (8014dbc <RegionEU868LinkAdrReq+0x2a4>)
 8014d30:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8014d32:	183b      	adds	r3, r7, r0
 8014d34:	2207      	movs	r2, #7
 8014d36:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8014d38:	183b      	adds	r3, r7, r0
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014d3e:	183b      	adds	r3, r7, r0
 8014d40:	68fa      	ldr	r2, [r7, #12]
 8014d42:	6812      	ldr	r2, [r2, #0]
 8014d44:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014d46:	0026      	movs	r6, r4
 8014d48:	193c      	adds	r4, r7, r4
 8014d4a:	0029      	movs	r1, r5
 8014d4c:	187d      	adds	r5, r7, r1
 8014d4e:	187b      	adds	r3, r7, r1
 8014d50:	1c9a      	adds	r2, r3, #2
 8014d52:	187b      	adds	r3, r7, r1
 8014d54:	1c59      	adds	r1, r3, #1
 8014d56:	1838      	adds	r0, r7, r0
 8014d58:	002b      	movs	r3, r5
 8014d5a:	f7fe fdf9 	bl	8013950 <RegionCommonLinkAdrReqVerifyParams>
 8014d5e:	0003      	movs	r3, r0
 8014d60:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014d62:	0034      	movs	r4, r6
 8014d64:	193b      	adds	r3, r7, r4
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	2b07      	cmp	r3, #7
 8014d6a:	d10c      	bne.n	8014d86 <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8014d6c:	4b14      	ldr	r3, [pc, #80]	; (8014dc0 <RegionEU868LinkAdrReq+0x2a8>)
 8014d6e:	2202      	movs	r2, #2
 8014d70:	2100      	movs	r1, #0
 8014d72:	0018      	movs	r0, r3
 8014d74:	f000 fe7e 	bl	8015a74 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8014d78:	233a      	movs	r3, #58	; 0x3a
 8014d7a:	18fb      	adds	r3, r7, r3
 8014d7c:	8819      	ldrh	r1, [r3, #0]
 8014d7e:	4a0f      	ldr	r2, [pc, #60]	; (8014dbc <RegionEU868LinkAdrReq+0x2a4>)
 8014d80:	2388      	movs	r3, #136	; 0x88
 8014d82:	005b      	lsls	r3, r3, #1
 8014d84:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014d86:	213c      	movs	r1, #60	; 0x3c
 8014d88:	187b      	adds	r3, r7, r1
 8014d8a:	2201      	movs	r2, #1
 8014d8c:	569a      	ldrsb	r2, [r3, r2]
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014d92:	187b      	adds	r3, r7, r1
 8014d94:	2202      	movs	r2, #2
 8014d96:	569a      	ldrsb	r2, [r3, r2]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014d9c:	187b      	adds	r3, r7, r1
 8014d9e:	781a      	ldrb	r2, [r3, #0]
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014da6:	2246      	movs	r2, #70	; 0x46
 8014da8:	18ba      	adds	r2, r7, r2
 8014daa:	7812      	ldrb	r2, [r2, #0]
 8014dac:	701a      	strb	r2, [r3, #0]

    return status;
 8014dae:	2347      	movs	r3, #71	; 0x47
 8014db0:	18fb      	adds	r3, r7, r3
 8014db2:	781b      	ldrb	r3, [r3, #0]
}
 8014db4:	0018      	movs	r0, r3
 8014db6:	46bd      	mov	sp, r7
 8014db8:	b013      	add	sp, #76	; 0x4c
 8014dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dbc:	20000f3c 	.word	0x20000f3c
 8014dc0:	2000104c 	.word	0x2000104c

08014dc4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014dcc:	230f      	movs	r3, #15
 8014dce:	18fb      	adds	r3, r7, r3
 8014dd0:	2207      	movs	r2, #7
 8014dd2:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014dd4:	210e      	movs	r1, #14
 8014dd6:	187b      	adds	r3, r7, r1
 8014dd8:	2200      	movs	r2, #0
 8014dda:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	187a      	adds	r2, r7, r1
 8014de2:	0011      	movs	r1, r2
 8014de4:	0018      	movs	r0, r3
 8014de6:	f7ff f859 	bl	8013e9c <VerifyRfFreq>
 8014dea:	0003      	movs	r3, r0
 8014dec:	001a      	movs	r2, r3
 8014dee:	2301      	movs	r3, #1
 8014df0:	4053      	eors	r3, r2
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d006      	beq.n	8014e06 <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 8014df8:	220f      	movs	r2, #15
 8014dfa:	18bb      	adds	r3, r7, r2
 8014dfc:	18ba      	adds	r2, r7, r2
 8014dfe:	7812      	ldrb	r2, [r2, #0]
 8014e00:	2101      	movs	r1, #1
 8014e02:	438a      	bics	r2, r1
 8014e04:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	b25b      	sxtb	r3, r3
 8014e0c:	2207      	movs	r2, #7
 8014e0e:	2100      	movs	r1, #0
 8014e10:	0018      	movs	r0, r3
 8014e12:	f7fe fb5f 	bl	80134d4 <RegionCommonValueInRange>
 8014e16:	1e03      	subs	r3, r0, #0
 8014e18:	d106      	bne.n	8014e28 <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8014e1a:	220f      	movs	r2, #15
 8014e1c:	18bb      	adds	r3, r7, r2
 8014e1e:	18ba      	adds	r2, r7, r2
 8014e20:	7812      	ldrb	r2, [r2, #0]
 8014e22:	2102      	movs	r1, #2
 8014e24:	438a      	bics	r2, r1
 8014e26:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	785b      	ldrb	r3, [r3, #1]
 8014e2c:	b25b      	sxtb	r3, r3
 8014e2e:	2205      	movs	r2, #5
 8014e30:	2100      	movs	r1, #0
 8014e32:	0018      	movs	r0, r3
 8014e34:	f7fe fb4e 	bl	80134d4 <RegionCommonValueInRange>
 8014e38:	1e03      	subs	r3, r0, #0
 8014e3a:	d106      	bne.n	8014e4a <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014e3c:	220f      	movs	r2, #15
 8014e3e:	18bb      	adds	r3, r7, r2
 8014e40:	18ba      	adds	r2, r7, r2
 8014e42:	7812      	ldrb	r2, [r2, #0]
 8014e44:	2104      	movs	r1, #4
 8014e46:	438a      	bics	r2, r1
 8014e48:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8014e4a:	230f      	movs	r3, #15
 8014e4c:	18fb      	adds	r3, r7, r3
 8014e4e:	781b      	ldrb	r3, [r3, #0]
}
 8014e50:	0018      	movs	r0, r3
 8014e52:	46bd      	mov	sp, r7
 8014e54:	b004      	add	sp, #16
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b086      	sub	sp, #24
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014e60:	2317      	movs	r3, #23
 8014e62:	18fb      	adds	r3, r7, r3
 8014e64:	2203      	movs	r2, #3
 8014e66:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d119      	bne.n	8014ea6 <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	791b      	ldrb	r3, [r3, #4]
 8014e76:	b25b      	sxtb	r3, r3
 8014e78:	b2da      	uxtb	r2, r3
 8014e7a:	2108      	movs	r1, #8
 8014e7c:	187b      	adds	r3, r7, r1
 8014e7e:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8014e80:	187b      	adds	r3, r7, r1
 8014e82:	0018      	movs	r0, r3
 8014e84:	f000 fa56 	bl	8015334 <RegionEU868ChannelsRemove>
 8014e88:	0003      	movs	r3, r0
 8014e8a:	001a      	movs	r2, r3
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	4053      	eors	r3, r2
 8014e90:	b2db      	uxtb	r3, r3
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d043      	beq.n	8014f1e <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8014e96:	2217      	movs	r2, #23
 8014e98:	18bb      	adds	r3, r7, r2
 8014e9a:	18ba      	adds	r2, r7, r2
 8014e9c:	7812      	ldrb	r2, [r2, #0]
 8014e9e:	2103      	movs	r1, #3
 8014ea0:	438a      	bics	r2, r1
 8014ea2:	701a      	strb	r2, [r3, #0]
 8014ea4:	e03b      	b.n	8014f1e <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	210c      	movs	r1, #12
 8014eac:	187b      	adds	r3, r7, r1
 8014eae:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	791b      	ldrb	r3, [r3, #4]
 8014eb4:	b25b      	sxtb	r3, r3
 8014eb6:	b2da      	uxtb	r2, r3
 8014eb8:	187b      	adds	r3, r7, r1
 8014eba:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8014ebc:	187b      	adds	r3, r7, r1
 8014ebe:	0018      	movs	r0, r3
 8014ec0:	f000 f974 	bl	80151ac <RegionEU868ChannelAdd>
 8014ec4:	0003      	movs	r3, r0
 8014ec6:	2b04      	cmp	r3, #4
 8014ec8:	d008      	beq.n	8014edc <RegionEU868NewChannelReq+0x84>
 8014eca:	dc02      	bgt.n	8014ed2 <RegionEU868NewChannelReq+0x7a>
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d025      	beq.n	8014f1c <RegionEU868NewChannelReq+0xc4>
 8014ed0:	e01c      	b.n	8014f0c <RegionEU868NewChannelReq+0xb4>
 8014ed2:	2b05      	cmp	r3, #5
 8014ed4:	d00a      	beq.n	8014eec <RegionEU868NewChannelReq+0x94>
 8014ed6:	2b06      	cmp	r3, #6
 8014ed8:	d010      	beq.n	8014efc <RegionEU868NewChannelReq+0xa4>
 8014eda:	e017      	b.n	8014f0c <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014edc:	2217      	movs	r2, #23
 8014ede:	18bb      	adds	r3, r7, r2
 8014ee0:	18ba      	adds	r2, r7, r2
 8014ee2:	7812      	ldrb	r2, [r2, #0]
 8014ee4:	2101      	movs	r1, #1
 8014ee6:	438a      	bics	r2, r1
 8014ee8:	701a      	strb	r2, [r3, #0]
                break;
 8014eea:	e018      	b.n	8014f1e <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8014eec:	2217      	movs	r2, #23
 8014eee:	18bb      	adds	r3, r7, r2
 8014ef0:	18ba      	adds	r2, r7, r2
 8014ef2:	7812      	ldrb	r2, [r2, #0]
 8014ef4:	2102      	movs	r1, #2
 8014ef6:	438a      	bics	r2, r1
 8014ef8:	701a      	strb	r2, [r3, #0]
                break;
 8014efa:	e010      	b.n	8014f1e <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014efc:	2217      	movs	r2, #23
 8014efe:	18bb      	adds	r3, r7, r2
 8014f00:	18ba      	adds	r2, r7, r2
 8014f02:	7812      	ldrb	r2, [r2, #0]
 8014f04:	2103      	movs	r1, #3
 8014f06:	438a      	bics	r2, r1
 8014f08:	701a      	strb	r2, [r3, #0]
                break;
 8014f0a:	e008      	b.n	8014f1e <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8014f0c:	2217      	movs	r2, #23
 8014f0e:	18bb      	adds	r3, r7, r2
 8014f10:	18ba      	adds	r2, r7, r2
 8014f12:	7812      	ldrb	r2, [r2, #0]
 8014f14:	2103      	movs	r1, #3
 8014f16:	438a      	bics	r2, r1
 8014f18:	701a      	strb	r2, [r3, #0]
                break;
 8014f1a:	e000      	b.n	8014f1e <RegionEU868NewChannelReq+0xc6>
                break;
 8014f1c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8014f1e:	2317      	movs	r3, #23
 8014f20:	18fb      	adds	r3, r7, r3
 8014f22:	781b      	ldrb	r3, [r3, #0]
}
 8014f24:	0018      	movs	r0, r3
 8014f26:	46bd      	mov	sp, r7
 8014f28:	b006      	add	sp, #24
 8014f2a:	bd80      	pop	{r7, pc}

08014f2c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
    return -1;
 8014f34:	2301      	movs	r3, #1
 8014f36:	425b      	negs	r3, r3
}
 8014f38:	0018      	movs	r0, r3
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	b002      	add	sp, #8
 8014f3e:	bd80      	pop	{r7, pc}

08014f40 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014f48:	230f      	movs	r3, #15
 8014f4a:	18fb      	adds	r3, r7, r3
 8014f4c:	2203      	movs	r2, #3
 8014f4e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014f50:	210e      	movs	r1, #14
 8014f52:	187b      	adds	r3, r7, r1
 8014f54:	2200      	movs	r2, #0
 8014f56:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	685b      	ldr	r3, [r3, #4]
 8014f5c:	187a      	adds	r2, r7, r1
 8014f5e:	0011      	movs	r1, r2
 8014f60:	0018      	movs	r0, r3
 8014f62:	f7fe ff9b 	bl	8013e9c <VerifyRfFreq>
 8014f66:	0003      	movs	r3, r0
 8014f68:	001a      	movs	r2, r3
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	4053      	eors	r3, r2
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d006      	beq.n	8014f82 <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 8014f74:	220f      	movs	r2, #15
 8014f76:	18bb      	adds	r3, r7, r2
 8014f78:	18ba      	adds	r2, r7, r2
 8014f7a:	7812      	ldrb	r2, [r2, #0]
 8014f7c:	2101      	movs	r1, #1
 8014f7e:	438a      	bics	r2, r1
 8014f80:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	0019      	movs	r1, r3
 8014f88:	4a13      	ldr	r2, [pc, #76]	; (8014fd8 <RegionEU868DlChannelReq+0x98>)
 8014f8a:	000b      	movs	r3, r1
 8014f8c:	005b      	lsls	r3, r3, #1
 8014f8e:	185b      	adds	r3, r3, r1
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	589b      	ldr	r3, [r3, r2]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d106      	bne.n	8014fa6 <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8014f98:	220f      	movs	r2, #15
 8014f9a:	18bb      	adds	r3, r7, r2
 8014f9c:	18ba      	adds	r2, r7, r2
 8014f9e:	7812      	ldrb	r2, [r2, #0]
 8014fa0:	2102      	movs	r1, #2
 8014fa2:	438a      	bics	r2, r1
 8014fa4:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8014fa6:	230f      	movs	r3, #15
 8014fa8:	18fb      	adds	r3, r7, r3
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	2b03      	cmp	r3, #3
 8014fae:	d10c      	bne.n	8014fca <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	0018      	movs	r0, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	685a      	ldr	r2, [r3, #4]
 8014fba:	4907      	ldr	r1, [pc, #28]	; (8014fd8 <RegionEU868DlChannelReq+0x98>)
 8014fbc:	0003      	movs	r3, r0
 8014fbe:	005b      	lsls	r3, r3, #1
 8014fc0:	181b      	adds	r3, r3, r0
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	18cb      	adds	r3, r1, r3
 8014fc6:	3304      	adds	r3, #4
 8014fc8:	601a      	str	r2, [r3, #0]
    }

    return status;
 8014fca:	230f      	movs	r3, #15
 8014fcc:	18fb      	adds	r3, r7, r3
 8014fce:	781b      	ldrb	r3, [r3, #0]
}
 8014fd0:	0018      	movs	r0, r3
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	b004      	add	sp, #16
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	20000f3c 	.word	0x20000f3c

08014fdc <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	0002      	movs	r2, r0
 8014fe4:	1dfb      	adds	r3, r7, #7
 8014fe6:	701a      	strb	r2, [r3, #0]
 8014fe8:	1dbb      	adds	r3, r7, #6
 8014fea:	1c0a      	adds	r2, r1, #0
 8014fec:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8014fee:	1dfb      	adds	r3, r7, #7
 8014ff0:	781b      	ldrb	r3, [r3, #0]
 8014ff2:	b25b      	sxtb	r3, r3
}
 8014ff4:	0018      	movs	r0, r3
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	b002      	add	sp, #8
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b088      	sub	sp, #32
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8015004:	210c      	movs	r1, #12
 8015006:	187b      	adds	r3, r7, r1
 8015008:	4a12      	ldr	r2, [pc, #72]	; (8015054 <RegionEU868CalcBackOff+0x58>)
 801500a:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801500c:	187b      	adds	r3, r7, r1
 801500e:	4a12      	ldr	r2, [pc, #72]	; (8015058 <RegionEU868CalcBackOff+0x5c>)
 8015010:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	785a      	ldrb	r2, [r3, #1]
 8015016:	187b      	adds	r3, r7, r1
 8015018:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	781a      	ldrb	r2, [r3, #0]
 801501e:	187b      	adds	r3, r7, r1
 8015020:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	789a      	ldrb	r2, [r3, #2]
 8015026:	187b      	adds	r3, r7, r1
 8015028:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	78da      	ldrb	r2, [r3, #3]
 801502e:	187b      	adds	r3, r7, r1
 8015030:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	685a      	ldr	r2, [r3, #4]
 8015036:	187b      	adds	r3, r7, r1
 8015038:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	689a      	ldr	r2, [r3, #8]
 801503e:	187b      	adds	r3, r7, r1
 8015040:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8015042:	187b      	adds	r3, r7, r1
 8015044:	0018      	movs	r0, r3
 8015046:	f7fe fe2d 	bl	8013ca4 <RegionCommonCalcBackOff>
}
 801504a:	46c0      	nop			; (mov r8, r8)
 801504c:	46bd      	mov	sp, r7
 801504e:	b008      	add	sp, #32
 8015050:	bd80      	pop	{r7, pc}
 8015052:	46c0      	nop			; (mov r8, r8)
 8015054:	20000f3c 	.word	0x20000f3c
 8015058:	20000ffc 	.word	0x20000ffc

0801505c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801505c:	b5b0      	push	{r4, r5, r7, lr}
 801505e:	b090      	sub	sp, #64	; 0x40
 8015060:	af04      	add	r7, sp, #16
 8015062:	60f8      	str	r0, [r7, #12]
 8015064:	60b9      	str	r1, [r7, #8]
 8015066:	607a      	str	r2, [r7, #4]
 8015068:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801506a:	232f      	movs	r3, #47	; 0x2f
 801506c:	18fb      	adds	r3, r7, r3
 801506e:	2200      	movs	r2, #0
 8015070:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8015072:	2327      	movs	r3, #39	; 0x27
 8015074:	18fb      	adds	r3, r7, r3
 8015076:	2200      	movs	r2, #0
 8015078:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801507a:	2314      	movs	r3, #20
 801507c:	18fb      	adds	r3, r7, r3
 801507e:	0018      	movs	r0, r3
 8015080:	2310      	movs	r3, #16
 8015082:	001a      	movs	r2, r3
 8015084:	2100      	movs	r1, #0
 8015086:	f00a f859 	bl	801f13c <memset>
    TimerTime_t nextTxDelay = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801508e:	4b44      	ldr	r3, [pc, #272]	; (80151a0 <RegionEU868NextChannel+0x144>)
 8015090:	2201      	movs	r2, #1
 8015092:	2100      	movs	r1, #0
 8015094:	0018      	movs	r0, r3
 8015096:	f7fe fa85 	bl	80135a4 <RegionCommonCountChannels>
 801509a:	1e03      	subs	r3, r0, #0
 801509c:	d10a      	bne.n	80150b4 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801509e:	4a41      	ldr	r2, [pc, #260]	; (80151a4 <RegionEU868NextChannel+0x148>)
 80150a0:	2388      	movs	r3, #136	; 0x88
 80150a2:	005b      	lsls	r3, r3, #1
 80150a4:	5ad3      	ldrh	r3, [r2, r3]
 80150a6:	2207      	movs	r2, #7
 80150a8:	4313      	orrs	r3, r2
 80150aa:	b299      	uxth	r1, r3
 80150ac:	4a3d      	ldr	r2, [pc, #244]	; (80151a4 <RegionEU868NextChannel+0x148>)
 80150ae:	2388      	movs	r3, #136	; 0x88
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	681c      	ldr	r4, [r3, #0]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	0018      	movs	r0, r3
 80150be:	f000 fc50 	bl	8015962 <TimerGetElapsedTime>
 80150c2:	0003      	movs	r3, r0
 80150c4:	429c      	cmp	r4, r3
 80150c6:	d824      	bhi.n	8015112 <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	2200      	movs	r2, #0
 80150cc:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	7a58      	ldrb	r0, [r3, #9]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	7a99      	ldrb	r1, [r3, #10]
 80150d6:	4a34      	ldr	r2, [pc, #208]	; (80151a8 <RegionEU868NextChannel+0x14c>)
 80150d8:	2305      	movs	r3, #5
 80150da:	f7fe faee 	bl	80136ba <RegionCommonUpdateBandTimeOff>
 80150de:	0003      	movs	r3, r0
 80150e0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	7a58      	ldrb	r0, [r3, #9]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	7a1b      	ldrb	r3, [r3, #8]
 80150ea:	b25b      	sxtb	r3, r3
 80150ec:	b2d9      	uxtb	r1, r3
 80150ee:	232f      	movs	r3, #47	; 0x2f
 80150f0:	18fc      	adds	r4, r7, r3
 80150f2:	4d2c      	ldr	r5, [pc, #176]	; (80151a4 <RegionEU868NextChannel+0x148>)
 80150f4:	4a2a      	ldr	r2, [pc, #168]	; (80151a0 <RegionEU868NextChannel+0x144>)
 80150f6:	2327      	movs	r3, #39	; 0x27
 80150f8:	18fb      	adds	r3, r7, r3
 80150fa:	9302      	str	r3, [sp, #8]
 80150fc:	2314      	movs	r3, #20
 80150fe:	18fb      	adds	r3, r7, r3
 8015100:	9301      	str	r3, [sp, #4]
 8015102:	4b29      	ldr	r3, [pc, #164]	; (80151a8 <RegionEU868NextChannel+0x14c>)
 8015104:	9300      	str	r3, [sp, #0]
 8015106:	002b      	movs	r3, r5
 8015108:	f7fe ff40 	bl	8013f8c <CountNbOfEnabledChannels>
 801510c:	0003      	movs	r3, r0
 801510e:	7023      	strb	r3, [r4, #0]
 8015110:	e010      	b.n	8015134 <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8015112:	2127      	movs	r1, #39	; 0x27
 8015114:	187b      	adds	r3, r7, r1
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	3301      	adds	r3, #1
 801511a:	b2da      	uxtb	r2, r3
 801511c:	187b      	adds	r3, r7, r1
 801511e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	681c      	ldr	r4, [r3, #0]
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	0018      	movs	r0, r3
 801512a:	f000 fc1a 	bl	8015962 <TimerGetElapsedTime>
 801512e:	0003      	movs	r3, r0
 8015130:	1ae3      	subs	r3, r4, r3
 8015132:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8015134:	232f      	movs	r3, #47	; 0x2f
 8015136:	18fb      	adds	r3, r7, r3
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d012      	beq.n	8015164 <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801513e:	232f      	movs	r3, #47	; 0x2f
 8015140:	18fb      	adds	r3, r7, r3
 8015142:	781b      	ldrb	r3, [r3, #0]
 8015144:	3b01      	subs	r3, #1
 8015146:	0019      	movs	r1, r3
 8015148:	2000      	movs	r0, #0
 801514a:	f000 fc41 	bl	80159d0 <randr>
 801514e:	0002      	movs	r2, r0
 8015150:	2314      	movs	r3, #20
 8015152:	18fb      	adds	r3, r7, r3
 8015154:	5c9a      	ldrb	r2, [r3, r2]
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2200      	movs	r2, #0
 801515e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015160:	2300      	movs	r3, #0
 8015162:	e018      	b.n	8015196 <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 8015164:	2327      	movs	r3, #39	; 0x27
 8015166:	18fb      	adds	r3, r7, r3
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d004      	beq.n	8015178 <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015172:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015174:	230b      	movs	r3, #11
 8015176:	e00e      	b.n	8015196 <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015178:	4a0a      	ldr	r2, [pc, #40]	; (80151a4 <RegionEU868NextChannel+0x148>)
 801517a:	2388      	movs	r3, #136	; 0x88
 801517c:	005b      	lsls	r3, r3, #1
 801517e:	5ad3      	ldrh	r3, [r2, r3]
 8015180:	2207      	movs	r2, #7
 8015182:	4313      	orrs	r3, r2
 8015184:	b299      	uxth	r1, r3
 8015186:	4a07      	ldr	r2, [pc, #28]	; (80151a4 <RegionEU868NextChannel+0x148>)
 8015188:	2388      	movs	r3, #136	; 0x88
 801518a:	005b      	lsls	r3, r3, #1
 801518c:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2200      	movs	r2, #0
 8015192:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015194:	230c      	movs	r3, #12
    }
}
 8015196:	0018      	movs	r0, r3
 8015198:	46bd      	mov	sp, r7
 801519a:	b00c      	add	sp, #48	; 0x30
 801519c:	bdb0      	pop	{r4, r5, r7, pc}
 801519e:	46c0      	nop			; (mov r8, r8)
 80151a0:	2000104c 	.word	0x2000104c
 80151a4:	20000f3c 	.word	0x20000f3c
 80151a8:	20000ffc 	.word	0x20000ffc

080151ac <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80151ac:	b590      	push	{r4, r7, lr}
 80151ae:	b085      	sub	sp, #20
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 80151b4:	230c      	movs	r3, #12
 80151b6:	18fb      	adds	r3, r7, r3
 80151b8:	2200      	movs	r2, #0
 80151ba:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 80151bc:	230f      	movs	r3, #15
 80151be:	18fb      	adds	r3, r7, r3
 80151c0:	2200      	movs	r2, #0
 80151c2:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80151c4:	230e      	movs	r3, #14
 80151c6:	18fb      	adds	r3, r7, r3
 80151c8:	2200      	movs	r2, #0
 80151ca:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80151cc:	210d      	movs	r1, #13
 80151ce:	187b      	adds	r3, r7, r1
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	7912      	ldrb	r2, [r2, #4]
 80151d4:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80151d6:	187b      	adds	r3, r7, r1
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	2b02      	cmp	r3, #2
 80151dc:	d801      	bhi.n	80151e2 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80151de:	2306      	movs	r3, #6
 80151e0:	e0a2      	b.n	8015328 <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80151e2:	230d      	movs	r3, #13
 80151e4:	18fb      	adds	r3, r7, r3
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	2b0f      	cmp	r3, #15
 80151ea:	d901      	bls.n	80151f0 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80151ec:	2303      	movs	r3, #3
 80151ee:	e09b      	b.n	8015328 <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	7a1b      	ldrb	r3, [r3, #8]
 80151f6:	011b      	lsls	r3, r3, #4
 80151f8:	b25b      	sxtb	r3, r3
 80151fa:	111b      	asrs	r3, r3, #4
 80151fc:	b25b      	sxtb	r3, r3
 80151fe:	2207      	movs	r2, #7
 8015200:	2100      	movs	r1, #0
 8015202:	0018      	movs	r0, r3
 8015204:	f7fe f966 	bl	80134d4 <RegionCommonValueInRange>
 8015208:	1e03      	subs	r3, r0, #0
 801520a:	d103      	bne.n	8015214 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 801520c:	230f      	movs	r3, #15
 801520e:	18fb      	adds	r3, r7, r3
 8015210:	2201      	movs	r2, #1
 8015212:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	7a1b      	ldrb	r3, [r3, #8]
 801521a:	b25b      	sxtb	r3, r3
 801521c:	111b      	asrs	r3, r3, #4
 801521e:	b25b      	sxtb	r3, r3
 8015220:	2207      	movs	r2, #7
 8015222:	2100      	movs	r1, #0
 8015224:	0018      	movs	r0, r3
 8015226:	f7fe f955 	bl	80134d4 <RegionCommonValueInRange>
 801522a:	1e03      	subs	r3, r0, #0
 801522c:	d103      	bne.n	8015236 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 801522e:	230f      	movs	r3, #15
 8015230:	18fb      	adds	r3, r7, r3
 8015232:	2201      	movs	r2, #1
 8015234:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	7a1b      	ldrb	r3, [r3, #8]
 801523c:	011b      	lsls	r3, r3, #4
 801523e:	b25b      	sxtb	r3, r3
 8015240:	111b      	asrs	r3, r3, #4
 8015242:	b25a      	sxtb	r2, r3
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	7a1b      	ldrb	r3, [r3, #8]
 801524a:	b25b      	sxtb	r3, r3
 801524c:	111b      	asrs	r3, r3, #4
 801524e:	b25b      	sxtb	r3, r3
 8015250:	429a      	cmp	r2, r3
 8015252:	dd03      	ble.n	801525c <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8015254:	230f      	movs	r3, #15
 8015256:	18fb      	adds	r3, r7, r3
 8015258:	2201      	movs	r2, #1
 801525a:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 801525c:	230e      	movs	r3, #14
 801525e:	18fb      	adds	r3, r7, r3
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	2201      	movs	r2, #1
 8015264:	4053      	eors	r3, r2
 8015266:	b2db      	uxtb	r3, r3
 8015268:	2b00      	cmp	r3, #0
 801526a:	d013      	beq.n	8015294 <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	220c      	movs	r2, #12
 8015274:	18ba      	adds	r2, r7, r2
 8015276:	0011      	movs	r1, r2
 8015278:	0018      	movs	r0, r3
 801527a:	f7fe fe0f 	bl	8013e9c <VerifyRfFreq>
 801527e:	0003      	movs	r3, r0
 8015280:	001a      	movs	r2, r3
 8015282:	2301      	movs	r3, #1
 8015284:	4053      	eors	r3, r2
 8015286:	b2db      	uxtb	r3, r3
 8015288:	2b00      	cmp	r3, #0
 801528a:	d003      	beq.n	8015294 <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 801528c:	230e      	movs	r3, #14
 801528e:	18fb      	adds	r3, r7, r3
 8015290:	2201      	movs	r2, #1
 8015292:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015294:	230f      	movs	r3, #15
 8015296:	18fb      	adds	r3, r7, r3
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d006      	beq.n	80152ac <RegionEU868ChannelAdd+0x100>
 801529e:	230e      	movs	r3, #14
 80152a0:	18fb      	adds	r3, r7, r3
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d001      	beq.n	80152ac <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80152a8:	2306      	movs	r3, #6
 80152aa:	e03d      	b.n	8015328 <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 80152ac:	230f      	movs	r3, #15
 80152ae:	18fb      	adds	r3, r7, r3
 80152b0:	781b      	ldrb	r3, [r3, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d001      	beq.n	80152ba <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80152b6:	2305      	movs	r3, #5
 80152b8:	e036      	b.n	8015328 <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 80152ba:	230e      	movs	r3, #14
 80152bc:	18fb      	adds	r3, r7, r3
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d001      	beq.n	80152c8 <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80152c4:	2304      	movs	r3, #4
 80152c6:	e02f      	b.n	8015328 <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80152c8:	240d      	movs	r4, #13
 80152ca:	193b      	adds	r3, r7, r4
 80152cc:	781a      	ldrb	r2, [r3, #0]
 80152ce:	0013      	movs	r3, r2
 80152d0:	005b      	lsls	r3, r3, #1
 80152d2:	189b      	adds	r3, r3, r2
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	4a16      	ldr	r2, [pc, #88]	; (8015330 <RegionEU868ChannelAdd+0x184>)
 80152d8:	1898      	adds	r0, r3, r2
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	220c      	movs	r2, #12
 80152e0:	0019      	movs	r1, r3
 80152e2:	f000 fb8b 	bl	80159fc <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80152e6:	193b      	adds	r3, r7, r4
 80152e8:	781a      	ldrb	r2, [r3, #0]
 80152ea:	230c      	movs	r3, #12
 80152ec:	18fb      	adds	r3, r7, r3
 80152ee:	7818      	ldrb	r0, [r3, #0]
 80152f0:	490f      	ldr	r1, [pc, #60]	; (8015330 <RegionEU868ChannelAdd+0x184>)
 80152f2:	0013      	movs	r3, r2
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	189b      	adds	r3, r3, r2
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	18cb      	adds	r3, r1, r3
 80152fc:	3309      	adds	r3, #9
 80152fe:	1c02      	adds	r2, r0, #0
 8015300:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8015302:	4a0b      	ldr	r2, [pc, #44]	; (8015330 <RegionEU868ChannelAdd+0x184>)
 8015304:	2388      	movs	r3, #136	; 0x88
 8015306:	005b      	lsls	r3, r3, #1
 8015308:	5ad3      	ldrh	r3, [r2, r3]
 801530a:	b21a      	sxth	r2, r3
 801530c:	193b      	adds	r3, r7, r4
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	2101      	movs	r1, #1
 8015312:	4099      	lsls	r1, r3
 8015314:	000b      	movs	r3, r1
 8015316:	b21b      	sxth	r3, r3
 8015318:	4313      	orrs	r3, r2
 801531a:	b21b      	sxth	r3, r3
 801531c:	b299      	uxth	r1, r3
 801531e:	4a04      	ldr	r2, [pc, #16]	; (8015330 <RegionEU868ChannelAdd+0x184>)
 8015320:	2388      	movs	r3, #136	; 0x88
 8015322:	005b      	lsls	r3, r3, #1
 8015324:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8015326:	2300      	movs	r3, #0
}
 8015328:	0018      	movs	r0, r3
 801532a:	46bd      	mov	sp, r7
 801532c:	b005      	add	sp, #20
 801532e:	bd90      	pop	{r4, r7, pc}
 8015330:	20000f3c 	.word	0x20000f3c

08015334 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015334:	b590      	push	{r4, r7, lr}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 801533c:	210f      	movs	r1, #15
 801533e:	187b      	adds	r3, r7, r1
 8015340:	687a      	ldr	r2, [r7, #4]
 8015342:	7812      	ldrb	r2, [r2, #0]
 8015344:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8015346:	187b      	adds	r3, r7, r1
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	2b02      	cmp	r3, #2
 801534c:	d801      	bhi.n	8015352 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 801534e:	2300      	movs	r3, #0
 8015350:	e015      	b.n	801537e <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015352:	240f      	movs	r4, #15
 8015354:	193b      	adds	r3, r7, r4
 8015356:	781a      	ldrb	r2, [r3, #0]
 8015358:	490b      	ldr	r1, [pc, #44]	; (8015388 <RegionEU868ChannelsRemove+0x54>)
 801535a:	0013      	movs	r3, r2
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	189b      	adds	r3, r3, r2
 8015360:	009b      	lsls	r3, r3, #2
 8015362:	18cb      	adds	r3, r1, r3
 8015364:	220c      	movs	r2, #12
 8015366:	2100      	movs	r1, #0
 8015368:	0018      	movs	r0, r3
 801536a:	f009 fee7 	bl	801f13c <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801536e:	193b      	adds	r3, r7, r4
 8015370:	7819      	ldrb	r1, [r3, #0]
 8015372:	4b06      	ldr	r3, [pc, #24]	; (801538c <RegionEU868ChannelsRemove+0x58>)
 8015374:	2210      	movs	r2, #16
 8015376:	0018      	movs	r0, r3
 8015378:	f7fe f8d2 	bl	8013520 <RegionCommonChanDisable>
 801537c:	0003      	movs	r3, r0
}
 801537e:	0018      	movs	r0, r3
 8015380:	46bd      	mov	sp, r7
 8015382:	b005      	add	sp, #20
 8015384:	bd90      	pop	{r4, r7, pc}
 8015386:	46c0      	nop			; (mov r8, r8)
 8015388:	20000f3c 	.word	0x20000f3c
 801538c:	2000104c 	.word	0x2000104c

08015390 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2002      	movs	r0, #2
 801539c:	5618      	ldrsb	r0, [r3, r0]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	0019      	movs	r1, r3
 80153a4:	4a21      	ldr	r2, [pc, #132]	; (801542c <RegionEU868SetContinuousWave+0x9c>)
 80153a6:	000b      	movs	r3, r1
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	185b      	adds	r3, r3, r1
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	18d3      	adds	r3, r2, r3
 80153b0:	3309      	adds	r3, #9
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	4a1d      	ldr	r2, [pc, #116]	; (801542c <RegionEU868SetContinuousWave+0x9c>)
 80153b6:	330c      	adds	r3, #12
 80153b8:	011b      	lsls	r3, r3, #4
 80153ba:	18d3      	adds	r3, r2, r3
 80153bc:	3302      	adds	r3, #2
 80153be:	2100      	movs	r1, #0
 80153c0:	5659      	ldrsb	r1, [r3, r1]
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2201      	movs	r2, #1
 80153c6:	569a      	ldrsb	r2, [r3, r2]
 80153c8:	260f      	movs	r6, #15
 80153ca:	19bc      	adds	r4, r7, r6
 80153cc:	4b18      	ldr	r3, [pc, #96]	; (8015430 <RegionEU868SetContinuousWave+0xa0>)
 80153ce:	f7fe fd3d 	bl	8013e4c <LimitTxPower>
 80153d2:	0003      	movs	r3, r0
 80153d4:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80153d6:	200e      	movs	r0, #14
 80153d8:	183b      	adds	r3, r7, r0
 80153da:	2200      	movs	r2, #0
 80153dc:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	0019      	movs	r1, r3
 80153e4:	4a11      	ldr	r2, [pc, #68]	; (801542c <RegionEU868SetContinuousWave+0x9c>)
 80153e6:	000b      	movs	r3, r1
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	185b      	adds	r3, r3, r1
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	589b      	ldr	r3, [r3, r2]
 80153f0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6859      	ldr	r1, [r3, #4]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	689a      	ldr	r2, [r3, #8]
 80153fa:	0005      	movs	r5, r0
 80153fc:	183c      	adds	r4, r7, r0
 80153fe:	19bb      	adds	r3, r7, r6
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	b25b      	sxtb	r3, r3
 8015404:	0018      	movs	r0, r3
 8015406:	f7fe fc15 	bl	8013c34 <RegionCommonComputeTxPower>
 801540a:	0003      	movs	r3, r0
 801540c:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801540e:	4b09      	ldr	r3, [pc, #36]	; (8015434 <RegionEU868SetContinuousWave+0xa4>)
 8015410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015412:	687a      	ldr	r2, [r7, #4]
 8015414:	8994      	ldrh	r4, [r2, #12]
 8015416:	0028      	movs	r0, r5
 8015418:	183a      	adds	r2, r7, r0
 801541a:	2100      	movs	r1, #0
 801541c:	5651      	ldrsb	r1, [r2, r1]
 801541e:	68b8      	ldr	r0, [r7, #8]
 8015420:	0022      	movs	r2, r4
 8015422:	4798      	blx	r3
}
 8015424:	46c0      	nop			; (mov r8, r8)
 8015426:	46bd      	mov	sp, r7
 8015428:	b005      	add	sp, #20
 801542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801542c:	20000f3c 	.word	0x20000f3c
 8015430:	2000104c 	.word	0x2000104c
 8015434:	08021b48 	.word	0x08021b48

08015438 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015438:	b590      	push	{r4, r7, lr}
 801543a:	b085      	sub	sp, #20
 801543c:	af00      	add	r7, sp, #0
 801543e:	0004      	movs	r4, r0
 8015440:	0008      	movs	r0, r1
 8015442:	0011      	movs	r1, r2
 8015444:	1dfb      	adds	r3, r7, #7
 8015446:	1c22      	adds	r2, r4, #0
 8015448:	701a      	strb	r2, [r3, #0]
 801544a:	1dbb      	adds	r3, r7, #6
 801544c:	1c02      	adds	r2, r0, #0
 801544e:	701a      	strb	r2, [r3, #0]
 8015450:	1d7b      	adds	r3, r7, #5
 8015452:	1c0a      	adds	r2, r1, #0
 8015454:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8015456:	1dbb      	adds	r3, r7, #6
 8015458:	781a      	ldrb	r2, [r3, #0]
 801545a:	1d7b      	adds	r3, r7, #5
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	1ad3      	subs	r3, r2, r3
 8015460:	b2da      	uxtb	r2, r3
 8015462:	210f      	movs	r1, #15
 8015464:	187b      	adds	r3, r7, r1
 8015466:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8015468:	187b      	adds	r3, r7, r1
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	2b7f      	cmp	r3, #127	; 0x7f
 801546e:	d903      	bls.n	8015478 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8015470:	230f      	movs	r3, #15
 8015472:	18fb      	adds	r3, r7, r3
 8015474:	2200      	movs	r2, #0
 8015476:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8015478:	230f      	movs	r3, #15
 801547a:	18fb      	adds	r3, r7, r3
 801547c:	781b      	ldrb	r3, [r3, #0]
}
 801547e:	0018      	movs	r0, r3
 8015480:	46bd      	mov	sp, r7
 8015482:	b005      	add	sp, #20
 8015484:	bd90      	pop	{r4, r7, pc}
	...

08015488 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8015488:	b082      	sub	sp, #8
 801548a:	b580      	push	{r7, lr}
 801548c:	b086      	sub	sp, #24
 801548e:	af00      	add	r7, sp, #0
 8015490:	60f8      	str	r0, [r7, #12]
 8015492:	1d38      	adds	r0, r7, #4
 8015494:	6001      	str	r1, [r0, #0]
 8015496:	6042      	str	r2, [r0, #4]
 8015498:	2204      	movs	r2, #4
 801549a:	2120      	movs	r1, #32
 801549c:	468c      	mov	ip, r1
 801549e:	44bc      	add	ip, r7
 80154a0:	4462      	add	r2, ip
 80154a2:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80154a4:	2110      	movs	r1, #16
 80154a6:	187b      	adds	r3, r7, r1
 80154a8:	2200      	movs	r2, #0
 80154aa:	601a      	str	r2, [r3, #0]
 80154ac:	187b      	adds	r3, r7, r1
 80154ae:	2200      	movs	r2, #0
 80154b0:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 80154b2:	1d3b      	adds	r3, r7, #4
 80154b4:	681a      	ldr	r2, [r3, #0]
 80154b6:	2304      	movs	r3, #4
 80154b8:	2020      	movs	r0, #32
 80154ba:	4684      	mov	ip, r0
 80154bc:	44bc      	add	ip, r7
 80154be:	4463      	add	r3, ip
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	18d2      	adds	r2, r2, r3
 80154c4:	187b      	adds	r3, r7, r1
 80154c6:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80154c8:	1d3b      	adds	r3, r7, #4
 80154ca:	2204      	movs	r2, #4
 80154cc:	5e9b      	ldrsh	r3, [r3, r2]
 80154ce:	b29a      	uxth	r2, r3
 80154d0:	2304      	movs	r3, #4
 80154d2:	2020      	movs	r0, #32
 80154d4:	4684      	mov	ip, r0
 80154d6:	44bc      	add	ip, r7
 80154d8:	4463      	add	r3, ip
 80154da:	2004      	movs	r0, #4
 80154dc:	5e1b      	ldrsh	r3, [r3, r0]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	18d3      	adds	r3, r2, r3
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	b21a      	sxth	r2, r3
 80154e6:	187b      	adds	r3, r7, r1
 80154e8:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 80154ea:	187b      	adds	r3, r7, r1
 80154ec:	2204      	movs	r2, #4
 80154ee:	5e9b      	ldrsh	r3, [r3, r2]
 80154f0:	4a0f      	ldr	r2, [pc, #60]	; (8015530 <SysTimeAdd+0xa8>)
 80154f2:	4293      	cmp	r3, r2
 80154f4:	dd10      	ble.n	8015518 <SysTimeAdd+0x90>
    {
        c.Seconds++;
 80154f6:	2110      	movs	r1, #16
 80154f8:	187b      	adds	r3, r7, r1
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	1c5a      	adds	r2, r3, #1
 80154fe:	187b      	adds	r3, r7, r1
 8015500:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 8015502:	187b      	adds	r3, r7, r1
 8015504:	2204      	movs	r2, #4
 8015506:	5e9b      	ldrsh	r3, [r3, r2]
 8015508:	b29b      	uxth	r3, r3
 801550a:	4a0a      	ldr	r2, [pc, #40]	; (8015534 <SysTimeAdd+0xac>)
 801550c:	4694      	mov	ip, r2
 801550e:	4463      	add	r3, ip
 8015510:	b29b      	uxth	r3, r3
 8015512:	b21a      	sxth	r2, r3
 8015514:	187b      	adds	r3, r7, r1
 8015516:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2210      	movs	r2, #16
 801551c:	18ba      	adds	r2, r7, r2
 801551e:	ca03      	ldmia	r2!, {r0, r1}
 8015520:	c303      	stmia	r3!, {r0, r1}
}
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	46bd      	mov	sp, r7
 8015526:	b006      	add	sp, #24
 8015528:	bc80      	pop	{r7}
 801552a:	bc08      	pop	{r3}
 801552c:	b002      	add	sp, #8
 801552e:	4718      	bx	r3
 8015530:	000003e7 	.word	0x000003e7
 8015534:	fffffc18 	.word	0xfffffc18

08015538 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8015538:	b082      	sub	sp, #8
 801553a:	b580      	push	{r7, lr}
 801553c:	b086      	sub	sp, #24
 801553e:	af00      	add	r7, sp, #0
 8015540:	60f8      	str	r0, [r7, #12]
 8015542:	1d38      	adds	r0, r7, #4
 8015544:	6001      	str	r1, [r0, #0]
 8015546:	6042      	str	r2, [r0, #4]
 8015548:	2204      	movs	r2, #4
 801554a:	2120      	movs	r1, #32
 801554c:	468c      	mov	ip, r1
 801554e:	44bc      	add	ip, r7
 8015550:	4462      	add	r2, ip
 8015552:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8015554:	2110      	movs	r1, #16
 8015556:	187b      	adds	r3, r7, r1
 8015558:	2200      	movs	r2, #0
 801555a:	601a      	str	r2, [r3, #0]
 801555c:	187b      	adds	r3, r7, r1
 801555e:	2200      	movs	r2, #0
 8015560:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8015562:	1d3b      	adds	r3, r7, #4
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	2304      	movs	r3, #4
 8015568:	2020      	movs	r0, #32
 801556a:	4684      	mov	ip, r0
 801556c:	44bc      	add	ip, r7
 801556e:	4463      	add	r3, ip
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	1ad2      	subs	r2, r2, r3
 8015574:	187b      	adds	r3, r7, r1
 8015576:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8015578:	1d3b      	adds	r3, r7, #4
 801557a:	2204      	movs	r2, #4
 801557c:	5e9b      	ldrsh	r3, [r3, r2]
 801557e:	b29a      	uxth	r2, r3
 8015580:	2304      	movs	r3, #4
 8015582:	2020      	movs	r0, #32
 8015584:	4684      	mov	ip, r0
 8015586:	44bc      	add	ip, r7
 8015588:	4463      	add	r3, ip
 801558a:	2004      	movs	r0, #4
 801558c:	5e1b      	ldrsh	r3, [r3, r0]
 801558e:	b29b      	uxth	r3, r3
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	b29b      	uxth	r3, r3
 8015594:	b21a      	sxth	r2, r3
 8015596:	187b      	adds	r3, r7, r1
 8015598:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801559a:	187b      	adds	r3, r7, r1
 801559c:	2204      	movs	r2, #4
 801559e:	5e9b      	ldrsh	r3, [r3, r2]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	da11      	bge.n	80155c8 <SysTimeSub+0x90>
    {
        c.Seconds--;
 80155a4:	2110      	movs	r1, #16
 80155a6:	187b      	adds	r3, r7, r1
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	1e5a      	subs	r2, r3, #1
 80155ac:	187b      	adds	r3, r7, r1
 80155ae:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 80155b0:	187b      	adds	r3, r7, r1
 80155b2:	2204      	movs	r2, #4
 80155b4:	5e9b      	ldrsh	r3, [r3, r2]
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	22fa      	movs	r2, #250	; 0xfa
 80155ba:	0092      	lsls	r2, r2, #2
 80155bc:	4694      	mov	ip, r2
 80155be:	4463      	add	r3, ip
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	b21a      	sxth	r2, r3
 80155c4:	187b      	adds	r3, r7, r1
 80155c6:	809a      	strh	r2, [r3, #4]
    }
    return c;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2210      	movs	r2, #16
 80155cc:	18ba      	adds	r2, r7, r2
 80155ce:	ca03      	ldmia	r2!, {r0, r1}
 80155d0:	c303      	stmia	r3!, {r0, r1}
}
 80155d2:	68f8      	ldr	r0, [r7, #12]
 80155d4:	46bd      	mov	sp, r7
 80155d6:	b006      	add	sp, #24
 80155d8:	bc80      	pop	{r7}
 80155da:	bc08      	pop	{r3}
 80155dc:	b002      	add	sp, #8
 80155de:	4718      	bx	r3

080155e0 <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 80155e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	003b      	movs	r3, r7
 80155e8:	6018      	str	r0, [r3, #0]
 80155ea:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 80155ec:	003b      	movs	r3, r7
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	60bb      	str	r3, [r7, #8]
 80155f2:	2300      	movs	r3, #0
 80155f4:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 80155f6:	22fa      	movs	r2, #250	; 0xfa
 80155f8:	0092      	lsls	r2, r2, #2
 80155fa:	2300      	movs	r3, #0
 80155fc:	68b8      	ldr	r0, [r7, #8]
 80155fe:	68f9      	ldr	r1, [r7, #12]
 8015600:	f7ea ff82 	bl	8000508 <__aeabi_lmul>
 8015604:	0003      	movs	r3, r0
 8015606:	000c      	movs	r4, r1
 8015608:	60bb      	str	r3, [r7, #8]
 801560a:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 801560c:	003b      	movs	r3, r7
 801560e:	2204      	movs	r2, #4
 8015610:	5e9b      	ldrsh	r3, [r3, r2]
 8015612:	001d      	movs	r5, r3
 8015614:	17db      	asrs	r3, r3, #31
 8015616:	001e      	movs	r6, r3
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	68fc      	ldr	r4, [r7, #12]
 801561c:	195b      	adds	r3, r3, r5
 801561e:	4174      	adcs	r4, r6
 8015620:	60bb      	str	r3, [r7, #8]
 8015622:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	68fc      	ldr	r4, [r7, #12]
 8015628:	0018      	movs	r0, r3
 801562a:	0021      	movs	r1, r4
 801562c:	f007 fd24 	bl	801d078 <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 8015630:	46c0      	nop			; (mov r8, r8)
 8015632:	46bd      	mov	sp, r7
 8015634:	b005      	add	sp, #20
 8015636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015638 <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 8015638:	b5b0      	push	{r4, r5, r7, lr}
 801563a:	b086      	sub	sp, #24
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8015640:	2008      	movs	r0, #8
 8015642:	183b      	adds	r3, r7, r0
 8015644:	2200      	movs	r2, #0
 8015646:	601a      	str	r2, [r3, #0]
 8015648:	0005      	movs	r5, r0
 801564a:	183b      	adds	r3, r7, r0
 801564c:	2200      	movs	r2, #0
 801564e:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 8015650:	f007 fd4c 	bl	801d0ec <itsdk_time_get_ms>
 8015654:	0003      	movs	r3, r0
 8015656:	000c      	movs	r4, r1
 8015658:	613b      	str	r3, [r7, #16]
 801565a:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 801565c:	6938      	ldr	r0, [r7, #16]
 801565e:	6979      	ldr	r1, [r7, #20]
 8015660:	22fa      	movs	r2, #250	; 0xfa
 8015662:	0092      	lsls	r2, r2, #2
 8015664:	2300      	movs	r3, #0
 8015666:	f7ea ff2f 	bl	80004c8 <__aeabi_uldivmod>
 801566a:	0003      	movs	r3, r0
 801566c:	000c      	movs	r4, r1
 801566e:	001a      	movs	r2, r3
 8015670:	0028      	movs	r0, r5
 8015672:	183b      	adds	r3, r7, r0
 8015674:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	697c      	ldr	r4, [r7, #20]
 801567a:	b29a      	uxth	r2, r3
 801567c:	183b      	adds	r3, r7, r0
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	b29b      	uxth	r3, r3
 8015682:	21fa      	movs	r1, #250	; 0xfa
 8015684:	0089      	lsls	r1, r1, #2
 8015686:	434b      	muls	r3, r1
 8015688:	b29b      	uxth	r3, r3
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	b29b      	uxth	r3, r3
 801568e:	b21a      	sxth	r2, r3
 8015690:	183b      	adds	r3, r7, r0
 8015692:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	183a      	adds	r2, r7, r0
 8015698:	ca03      	ldmia	r2!, {r0, r1}
 801569a:	c303      	stmia	r3!, {r0, r1}
}
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	46bd      	mov	sp, r7
 80156a0:	b006      	add	sp, #24
 80156a2:	bdb0      	pop	{r4, r5, r7, pc}

080156a4 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 80156ac:	4b11      	ldr	r3, [pc, #68]	; (80156f4 <removeFromList+0x50>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d105      	bne.n	80156c2 <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 80156b6:	4b0f      	ldr	r3, [pc, #60]	; (80156f4 <removeFromList+0x50>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	695a      	ldr	r2, [r3, #20]
 80156bc:	4b0d      	ldr	r3, [pc, #52]	; (80156f4 <removeFromList+0x50>)
 80156be:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 80156c0:	e014      	b.n	80156ec <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 80156c2:	4b0c      	ldr	r3, [pc, #48]	; (80156f4 <removeFromList+0x50>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 80156c8:	e00d      	b.n	80156e6 <removeFromList+0x42>
		   if( cur->Next == obj ) {
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	695b      	ldr	r3, [r3, #20]
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d105      	bne.n	80156e0 <removeFromList+0x3c>
			   cur->Next = obj->Next;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	695a      	ldr	r2, [r3, #20]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	615a      	str	r2, [r3, #20]
			   break;
 80156dc:	46c0      	nop			; (mov r8, r8)
}
 80156de:	e005      	b.n	80156ec <removeFromList+0x48>
		   cur = cur->Next;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	695b      	ldr	r3, [r3, #20]
 80156e4:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1ee      	bne.n	80156ca <removeFromList+0x26>
}
 80156ec:	46c0      	nop			; (mov r8, r8)
 80156ee:	46bd      	mov	sp, r7
 80156f0:	b004      	add	sp, #16
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	20001050 	.word	0x20001050

080156f8 <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8015700:	4b0a      	ldr	r3, [pc, #40]	; (801572c <TimerExists+0x34>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 8015706:	e008      	b.n	801571a <TimerExists+0x22>
    if( cur == obj ) {
 8015708:	68fa      	ldr	r2, [r7, #12]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	429a      	cmp	r2, r3
 801570e:	d101      	bne.n	8015714 <TimerExists+0x1c>
      return true;
 8015710:	2301      	movs	r3, #1
 8015712:	e006      	b.n	8015722 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	695b      	ldr	r3, [r3, #20]
 8015718:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1f3      	bne.n	8015708 <TimerExists+0x10>
  }
  return false;
 8015720:	2300      	movs	r3, #0

}
 8015722:	0018      	movs	r0, r3
 8015724:	46bd      	mov	sp, r7
 8015726:	b004      	add	sp, #16
 8015728:	bd80      	pop	{r7, pc}
 801572a:	46c0      	nop			; (mov r8, r8)
 801572c:	20001050 	.word	0x20001050

08015730 <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 8015738:	4b05      	ldr	r3, [pc, #20]	; (8015750 <TimerInsertTimer+0x20>)
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 8015740:	4b03      	ldr	r3, [pc, #12]	; (8015750 <TimerInsertTimer+0x20>)
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	601a      	str	r2, [r3, #0]
}
 8015746:	46c0      	nop			; (mov r8, r8)
 8015748:	46bd      	mov	sp, r7
 801574a:	b002      	add	sp, #8
 801574c:	bd80      	pop	{r7, pc}
 801574e:	46c0      	nop			; (mov r8, r8)
 8015750:	20001050 	.word	0x20001050

08015754 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2200      	movs	r2, #0
 8015764:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d006      	beq.n	801577c <TimerCallback+0x28>
		obj->Callback(obj->Context);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	68da      	ldr	r2, [r3, #12]
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	691b      	ldr	r3, [r3, #16]
 8015776:	0018      	movs	r0, r3
 8015778:	4790      	blx	r2
 801577a:	e004      	b.n	8015786 <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 801577c:	4b06      	ldr	r3, [pc, #24]	; (8015798 <TimerCallback+0x44>)
 801577e:	2100      	movs	r1, #0
 8015780:	0018      	movs	r0, r3
 8015782:	f006 f9f1 	bl	801bb68 <itsdk_error_report>
	}
	removeFromList(obj);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	0018      	movs	r0, r3
 801578a:	f7ff ff8b 	bl	80156a4 <removeFromList>
}
 801578e:	46c0      	nop			; (mov r8, r8)
 8015790:	46bd      	mov	sp, r7
 8015792:	b004      	add	sp, #16
 8015794:	bd80      	pop	{r7, pc}
 8015796:	46c0      	nop			; (mov r8, r8)
 8015798:	c0000104 	.word	0xc0000104

0801579c <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2200      	movs	r2, #0
 80157aa:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2200      	movs	r2, #0
 80157b0:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2200      	movs	r2, #0
 80157b6:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2200      	movs	r2, #0
 80157bc:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	683a      	ldr	r2, [r7, #0]
 80157c2:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2200      	movs	r2, #0
 80157c8:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2200      	movs	r2, #0
 80157ce:	615a      	str	r2, [r3, #20]
}
 80157d0:	46c0      	nop			; (mov r8, r8)
 80157d2:	46bd      	mov	sp, r7
 80157d4:	b002      	add	sp, #8
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	4b11      	ldr	r3, [pc, #68]	; (801582c <TimerSetValue+0x54>)
 80157e6:	0011      	movs	r1, r2
 80157e8:	0018      	movs	r0, r3
 80157ea:	f007 fd8b 	bl	801d304 <itsdk_stimer_get>
 80157ee:	0003      	movs	r3, r0
 80157f0:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d00e      	beq.n	8015816 <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	0018      	movs	r0, r3
 80157fc:	f000 f86e 	bl	80158dc <TimerStop>
		obj->Timestamp = value;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	683a      	ldr	r2, [r7, #0]
 8015804:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	683a      	ldr	r2, [r7, #0]
 801580a:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	0018      	movs	r0, r3
 8015810:	f000 f80e 	bl	8015830 <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 8015814:	e005      	b.n	8015822 <TimerSetValue+0x4a>
		obj->Timestamp = value;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	605a      	str	r2, [r3, #4]
}
 8015822:	46c0      	nop			; (mov r8, r8)
 8015824:	46bd      	mov	sp, r7
 8015826:	b004      	add	sp, #16
 8015828:	bd80      	pop	{r7, pc}
 801582a:	46c0      	nop			; (mov r8, r8)
 801582c:	08015755 	.word	0x08015755

08015830 <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 8015830:	b5b0      	push	{r4, r5, r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 8015838:	f008 fd28 	bl	801e28c <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d005      	beq.n	801584e <TimerStart+0x1e>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	0018      	movs	r0, r3
 8015846:	f7ff ff57 	bl	80156f8 <TimerExists>
 801584a:	1e03      	subs	r3, r0, #0
 801584c:	d007      	beq.n	801585e <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 801584e:	f008 fd31 	bl	801e2b4 <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 8015852:	4b1e      	ldr	r3, [pc, #120]	; (80158cc <TimerStart+0x9c>)
 8015854:	2100      	movs	r1, #0
 8015856:	0018      	movs	r0, r3
 8015858:	f006 f986 	bl	801bb68 <itsdk_error_report>
	    return;
 801585c:	e032      	b.n	80158c4 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	685a      	ldr	r2, [r3, #4]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2201      	movs	r2, #1
 801586a:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2200      	movs	r2, #0
 8015870:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 8015872:	4b17      	ldr	r3, [pc, #92]	; (80158d0 <TimerStart+0xa0>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d106      	bne.n	8015888 <TimerStart+0x58>
		obj->Next = NULL;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 8015880:	4b13      	ldr	r3, [pc, #76]	; (80158d0 <TimerStart+0xa0>)
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	601a      	str	r2, [r3, #0]
 8015886:	e003      	b.n	8015890 <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	0018      	movs	r0, r3
 801588c:	f7ff ff50 	bl	8015730 <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6858      	ldr	r0, [r3, #4]
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	250f      	movs	r5, #15
 8015898:	197c      	adds	r4, r7, r5
 801589a:	490e      	ldr	r1, [pc, #56]	; (80158d4 <TimerStart+0xa4>)
 801589c:	2300      	movs	r3, #0
 801589e:	f007 fc57 	bl	801d150 <itsdk_stimer_register>
 80158a2:	0003      	movs	r3, r0
 80158a4:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 80158a6:	197b      	adds	r3, r7, r5
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d008      	beq.n	80158c0 <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 80158ae:	230f      	movs	r3, #15
 80158b0:	18fb      	adds	r3, r7, r3
 80158b2:	781b      	ldrb	r3, [r3, #0]
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	4a08      	ldr	r2, [pc, #32]	; (80158d8 <TimerStart+0xa8>)
 80158b8:	0019      	movs	r1, r3
 80158ba:	0010      	movs	r0, r2
 80158bc:	f006 f954 	bl	801bb68 <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 80158c0:	f008 fcf8 	bl	801e2b4 <itsdk_leaveCriticalSection>

}
 80158c4:	46bd      	mov	sp, r7
 80158c6:	b004      	add	sp, #16
 80158c8:	bdb0      	pop	{r4, r5, r7, pc}
 80158ca:	46c0      	nop			; (mov r8, r8)
 80158cc:	80000011 	.word	0x80000011
 80158d0:	20001050 	.word	0x20001050
 80158d4:	08015755 	.word	0x08015755
 80158d8:	d0000105 	.word	0xd0000105

080158dc <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 80158e4:	f008 fcd2 	bl	801e28c <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d00a      	beq.n	8015904 <TimerStop+0x28>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	0018      	movs	r0, r3
 80158f2:	f7ff ff01 	bl	80156f8 <TimerExists>
 80158f6:	0003      	movs	r3, r0
 80158f8:	001a      	movs	r2, r3
 80158fa:	2301      	movs	r3, #1
 80158fc:	4053      	eors	r3, r2
 80158fe:	b2db      	uxtb	r3, r3
 8015900:	2b00      	cmp	r3, #0
 8015902:	d002      	beq.n	801590a <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 8015904:	f008 fcd6 	bl	801e2b4 <itsdk_leaveCriticalSection>
	    return;
 8015908:	e012      	b.n	8015930 <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	7a1b      	ldrb	r3, [r3, #8]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d008      	beq.n	8015924 <TimerStop+0x48>
		itsdk_stimer_stop(
 8015912:	687a      	ldr	r2, [r7, #4]
 8015914:	4b08      	ldr	r3, [pc, #32]	; (8015938 <TimerStop+0x5c>)
 8015916:	0011      	movs	r1, r2
 8015918:	0018      	movs	r0, r3
 801591a:	f007 fc87 	bl	801d22c <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2200      	movs	r2, #0
 8015922:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	0018      	movs	r0, r3
 8015928:	f7ff febc 	bl	80156a4 <removeFromList>
	itsdk_leaveCriticalSection();
 801592c:	f008 fcc2 	bl	801e2b4 <itsdk_leaveCriticalSection>
}  
 8015930:	46bd      	mov	sp, r7
 8015932:	b002      	add	sp, #8
 8015934:	bd80      	pop	{r7, pc}
 8015936:	46c0      	nop			; (mov r8, r8)
 8015938:	08015755 	.word	0x08015755

0801593c <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	7a1b      	ldrb	r3, [r3, #8]
}
 8015948:	0018      	movs	r0, r3
 801594a:	46bd      	mov	sp, r7
 801594c:	b002      	add	sp, #8
 801594e:	bd80      	pop	{r7, pc}

08015950 <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 8015950:	b5b0      	push	{r4, r5, r7, lr}
 8015952:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 8015954:	f007 fbca 	bl	801d0ec <itsdk_time_get_ms>
 8015958:	0003      	movs	r3, r0
 801595a:	000c      	movs	r4, r1
}
 801595c:	0018      	movs	r0, r3
 801595e:	46bd      	mov	sp, r7
 8015960:	bdb0      	pop	{r4, r5, r7, pc}

08015962 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8015962:	b580      	push	{r7, lr}
 8015964:	b082      	sub	sp, #8
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 801596a:	f7ff fff1 	bl	8015950 <TimerGetCurrentTime>
 801596e:	0002      	movs	r2, r0
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	1ad3      	subs	r3, r2, r3
}
 8015974:	0018      	movs	r0, r3
 8015976:	46bd      	mov	sp, r7
 8015978:	b002      	add	sp, #8
 801597a:	bd80      	pop	{r7, pc}

0801597c <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015980:	4b08      	ldr	r3, [pc, #32]	; (80159a4 <rand1+0x28>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	4a08      	ldr	r2, [pc, #32]	; (80159a8 <rand1+0x2c>)
 8015986:	4353      	muls	r3, r2
 8015988:	4a08      	ldr	r2, [pc, #32]	; (80159ac <rand1+0x30>)
 801598a:	189a      	adds	r2, r3, r2
 801598c:	4b05      	ldr	r3, [pc, #20]	; (80159a4 <rand1+0x28>)
 801598e:	601a      	str	r2, [r3, #0]
 8015990:	4b04      	ldr	r3, [pc, #16]	; (80159a4 <rand1+0x28>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4906      	ldr	r1, [pc, #24]	; (80159b0 <rand1+0x34>)
 8015996:	0018      	movs	r0, r3
 8015998:	f7ea fc44 	bl	8000224 <__aeabi_uidivmod>
 801599c:	000b      	movs	r3, r1
}
 801599e:	0018      	movs	r0, r3
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	2000007c 	.word	0x2000007c
 80159a8:	41c64e6d 	.word	0x41c64e6d
 80159ac:	00003039 	.word	0x00003039
 80159b0:	7fffffff 	.word	0x7fffffff

080159b4 <srand1>:

void srand1( uint32_t seed )
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
    next = seed;
 80159bc:	4b03      	ldr	r3, [pc, #12]	; (80159cc <srand1+0x18>)
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	601a      	str	r2, [r3, #0]
}
 80159c2:	46c0      	nop			; (mov r8, r8)
 80159c4:	46bd      	mov	sp, r7
 80159c6:	b002      	add	sp, #8
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	46c0      	nop			; (mov r8, r8)
 80159cc:	2000007c 	.word	0x2000007c

080159d0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80159da:	f7ff ffcf 	bl	801597c <rand1>
 80159de:	683a      	ldr	r2, [r7, #0]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	3301      	adds	r3, #1
 80159e6:	0019      	movs	r1, r3
 80159e8:	f7ea fd06 	bl	80003f8 <__aeabi_idivmod>
 80159ec:	000b      	movs	r3, r1
 80159ee:	001a      	movs	r2, r3
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	18d3      	adds	r3, r2, r3
}
 80159f4:	0018      	movs	r0, r3
 80159f6:	46bd      	mov	sp, r7
 80159f8:	b002      	add	sp, #8
 80159fa:	bd80      	pop	{r7, pc}

080159fc <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b084      	sub	sp, #16
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	1dbb      	adds	r3, r7, #6
 8015a08:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8015a0a:	e007      	b.n	8015a1c <memcpy1+0x20>
    {
        *dst++ = *src++;
 8015a0c:	68ba      	ldr	r2, [r7, #8]
 8015a0e:	1c53      	adds	r3, r2, #1
 8015a10:	60bb      	str	r3, [r7, #8]
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	1c59      	adds	r1, r3, #1
 8015a16:	60f9      	str	r1, [r7, #12]
 8015a18:	7812      	ldrb	r2, [r2, #0]
 8015a1a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a1c:	1dbb      	adds	r3, r7, #6
 8015a1e:	881b      	ldrh	r3, [r3, #0]
 8015a20:	1dba      	adds	r2, r7, #6
 8015a22:	1e59      	subs	r1, r3, #1
 8015a24:	8011      	strh	r1, [r2, #0]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d1f0      	bne.n	8015a0c <memcpy1+0x10>
    }
}
 8015a2a:	46c0      	nop			; (mov r8, r8)
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	b004      	add	sp, #16
 8015a30:	bd80      	pop	{r7, pc}

08015a32 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015a32:	b580      	push	{r7, lr}
 8015a34:	b084      	sub	sp, #16
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	60f8      	str	r0, [r7, #12]
 8015a3a:	60b9      	str	r1, [r7, #8]
 8015a3c:	1dbb      	adds	r3, r7, #6
 8015a3e:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8015a40:	1dbb      	adds	r3, r7, #6
 8015a42:	881b      	ldrh	r3, [r3, #0]
 8015a44:	3b01      	subs	r3, #1
 8015a46:	68fa      	ldr	r2, [r7, #12]
 8015a48:	18d3      	adds	r3, r2, r3
 8015a4a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8015a4c:	e007      	b.n	8015a5e <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8015a4e:	68ba      	ldr	r2, [r7, #8]
 8015a50:	1c53      	adds	r3, r2, #1
 8015a52:	60bb      	str	r3, [r7, #8]
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	1e59      	subs	r1, r3, #1
 8015a58:	60f9      	str	r1, [r7, #12]
 8015a5a:	7812      	ldrb	r2, [r2, #0]
 8015a5c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a5e:	1dbb      	adds	r3, r7, #6
 8015a60:	881b      	ldrh	r3, [r3, #0]
 8015a62:	1dba      	adds	r2, r7, #6
 8015a64:	1e59      	subs	r1, r3, #1
 8015a66:	8011      	strh	r1, [r2, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1f0      	bne.n	8015a4e <memcpyr+0x1c>
    }
}
 8015a6c:	46c0      	nop			; (mov r8, r8)
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	b004      	add	sp, #16
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	0008      	movs	r0, r1
 8015a7e:	0011      	movs	r1, r2
 8015a80:	1cfb      	adds	r3, r7, #3
 8015a82:	1c02      	adds	r2, r0, #0
 8015a84:	701a      	strb	r2, [r3, #0]
 8015a86:	003b      	movs	r3, r7
 8015a88:	1c0a      	adds	r2, r1, #0
 8015a8a:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8015a8c:	e005      	b.n	8015a9a <memset1+0x26>
    {
        *dst++ = value;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	1c5a      	adds	r2, r3, #1
 8015a92:	607a      	str	r2, [r7, #4]
 8015a94:	1cfa      	adds	r2, r7, #3
 8015a96:	7812      	ldrb	r2, [r2, #0]
 8015a98:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015a9a:	003b      	movs	r3, r7
 8015a9c:	881b      	ldrh	r3, [r3, #0]
 8015a9e:	003a      	movs	r2, r7
 8015aa0:	1e59      	subs	r1, r3, #1
 8015aa2:	8011      	strh	r1, [r2, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d1f2      	bne.n	8015a8e <memset1+0x1a>
    }
}
 8015aa8:	46c0      	nop			; (mov r8, r8)
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	b002      	add	sp, #8
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015ab4:	2380      	movs	r3, #128	; 0x80
 8015ab6:	015b      	lsls	r3, r3, #5
 8015ab8:	2200      	movs	r2, #0
 8015aba:	0019      	movs	r1, r3
 8015abc:	2000      	movs	r0, #0
 8015abe:	f008 f85b 	bl	801db78 <gpio_configure>
    TCXO_ON();
 8015ac2:	2380      	movs	r3, #128	; 0x80
 8015ac4:	015b      	lsls	r3, r3, #5
 8015ac6:	0019      	movs	r1, r3
 8015ac8:	2000      	movs	r0, #0
 8015aca:	f008 fa5d 	bl	801df88 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 8015ace:	2035      	movs	r0, #53	; 0x35
 8015ad0:	f008 fbb6 	bl	801e240 <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015ad4:	220e      	movs	r2, #14
 8015ad6:	2110      	movs	r1, #16
 8015ad8:	2001      	movs	r0, #1
 8015ada:	f008 f84d 	bl	801db78 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015ade:	220e      	movs	r2, #14
 8015ae0:	2102      	movs	r1, #2
 8015ae2:	2001      	movs	r0, #1
 8015ae4:	f008 f848 	bl	801db78 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015ae8:	220e      	movs	r2, #14
 8015aea:	2101      	movs	r1, #1
 8015aec:	2001      	movs	r0, #1
 8015aee:	f008 f843 	bl	801db78 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015af2:	2380      	movs	r3, #128	; 0x80
 8015af4:	019b      	lsls	r3, r3, #6
 8015af6:	220e      	movs	r2, #14
 8015af8:	0019      	movs	r1, r3
 8015afa:	2002      	movs	r0, #2
 8015afc:	f008 f83c 	bl	801db78 <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 8015b00:	2380      	movs	r3, #128	; 0x80
 8015b02:	021b      	lsls	r3, r3, #8
 8015b04:	2201      	movs	r2, #1
 8015b06:	0019      	movs	r1, r3
 8015b08:	2000      	movs	r0, #0
 8015b0a:	f008 f835 	bl	801db78 <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8015b0e:	2380      	movs	r3, #128	; 0x80
 8015b10:	021b      	lsls	r3, r3, #8
 8015b12:	0019      	movs	r1, r3
 8015b14:	2000      	movs	r0, #0
 8015b16:	f008 fa37 	bl	801df88 <gpio_set>
	SX1276Reset();
 8015b1a:	f001 fead 	bl	8017878 <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 8015b1e:	2001      	movs	r0, #1
 8015b20:	f001 ff80 	bl	8017a24 <SX1276Read>
 8015b24:	0003      	movs	r3, r0
 8015b26:	001a      	movs	r2, r3
 8015b28:	2307      	movs	r3, #7
 8015b2a:	439a      	bics	r2, r3
 8015b2c:	0013      	movs	r3, r2
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	0019      	movs	r1, r3
 8015b32:	2001      	movs	r0, #1
 8015b34:	f001 ff62 	bl	80179fc <SX1276Write>
	SX1276SetAntSwLowPower(true);
 8015b38:	2001      	movs	r0, #1
 8015b3a:	f000 f9fc 	bl	8015f36 <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 8015b3e:	200a      	movs	r0, #10
 8015b40:	f008 fb7e 	bl	801e240 <itsdk_delayMs>
	TCXO_OFF();
 8015b44:	2380      	movs	r3, #128	; 0x80
 8015b46:	015b      	lsls	r3, r3, #5
 8015b48:	0019      	movs	r1, r3
 8015b4a:	2000      	movs	r0, #0
 8015b4c:	f008 fa34 	bl	801dfb8 <gpio_reset>

}
 8015b50:	46c0      	nop			; (mov r8, r8)
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 8015b5a:	2300      	movs	r3, #0
}
 8015b5c:	0018      	movs	r0, r3
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b082      	sub	sp, #8
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	0002      	movs	r2, r0
 8015b6a:	1dfb      	adds	r3, r7, #7
 8015b6c:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 8015b6e:	1dfb      	adds	r3, r7, #7
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d109      	bne.n	8015b8a <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 8015b76:	2380      	movs	r3, #128	; 0x80
 8015b78:	015b      	lsls	r3, r3, #5
 8015b7a:	0019      	movs	r1, r3
 8015b7c:	2000      	movs	r0, #0
 8015b7e:	f008 fa03 	bl	801df88 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 8015b82:	2032      	movs	r0, #50	; 0x32
 8015b84:	f008 fb5c 	bl	801e240 <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 8015b88:	e008      	b.n	8015b9c <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 8015b8a:	200a      	movs	r0, #10
 8015b8c:	f008 fb58 	bl	801e240 <itsdk_delayMs>
    TCXO_OFF(); 
 8015b90:	2380      	movs	r3, #128	; 0x80
 8015b92:	015b      	lsls	r3, r3, #5
 8015b94:	0019      	movs	r1, r3
 8015b96:	2000      	movs	r0, #0
 8015b98:	f008 fa0e 	bl	801dfb8 <gpio_reset>
}
 8015b9c:	46c0      	nop			; (mov r8, r8)
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	b002      	add	sp, #8
 8015ba2:	bd80      	pop	{r7, pc}

08015ba4 <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 8015ba8:	4b11      	ldr	r3, [pc, #68]	; (8015bf0 <SX1276IoInit+0x4c>)
 8015baa:	0018      	movs	r0, r3
 8015bac:	f000 fa48 	bl	8016040 <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015bb0:	220e      	movs	r2, #14
 8015bb2:	2110      	movs	r1, #16
 8015bb4:	2001      	movs	r0, #1
 8015bb6:	f007 ffdf 	bl	801db78 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015bba:	220e      	movs	r2, #14
 8015bbc:	2102      	movs	r1, #2
 8015bbe:	2001      	movs	r0, #1
 8015bc0:	f007 ffda 	bl	801db78 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015bc4:	220e      	movs	r2, #14
 8015bc6:	2101      	movs	r1, #1
 8015bc8:	2001      	movs	r0, #1
 8015bca:	f007 ffd5 	bl	801db78 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015bce:	2380      	movs	r3, #128	; 0x80
 8015bd0:	019b      	lsls	r3, r3, #6
 8015bd2:	220e      	movs	r2, #14
 8015bd4:	0019      	movs	r1, r3
 8015bd6:	2002      	movs	r0, #2
 8015bd8:	f007 ffce 	bl	801db78 <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015bdc:	2380      	movs	r3, #128	; 0x80
 8015bde:	015b      	lsls	r3, r3, #5
 8015be0:	2200      	movs	r2, #0
 8015be2:	0019      	movs	r1, r3
 8015be4:	2000      	movs	r0, #0
 8015be6:	f007 ffc7 	bl	801db78 <gpio_configure>

}
 8015bea:	46c0      	nop			; (mov r8, r8)
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	20000080 	.word	0x20000080

08015bf4 <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b082      	sub	sp, #8
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015bfc:	2110      	movs	r1, #16
 8015bfe:	2001      	movs	r0, #1
 8015c00:	f008 fa3e 	bl	801e080 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 8015c04:	2207      	movs	r2, #7
 8015c06:	2110      	movs	r1, #16
 8015c08:	2001      	movs	r0, #1
 8015c0a:	f007 ffb5 	bl	801db78 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 8015c0e:	2300      	movs	r3, #0
 8015c10:	2200      	movs	r2, #0
 8015c12:	2110      	movs	r1, #16
 8015c14:	2001      	movs	r0, #1
 8015c16:	f008 fa0b 	bl	801e030 <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	4b39      	ldr	r3, [pc, #228]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c20:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 8015c22:	4b38      	ldr	r3, [pc, #224]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c24:	2210      	movs	r2, #16
 8015c26:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 8015c28:	4b36      	ldr	r3, [pc, #216]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c2a:	0018      	movs	r0, r3
 8015c2c:	f008 fa80 	bl	801e130 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015c30:	2110      	movs	r1, #16
 8015c32:	2001      	movs	r0, #1
 8015c34:	f008 f9d8 	bl	801dfe8 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015c38:	2102      	movs	r1, #2
 8015c3a:	2001      	movs	r0, #1
 8015c3c:	f008 fa20 	bl	801e080 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 8015c40:	2207      	movs	r2, #7
 8015c42:	2102      	movs	r1, #2
 8015c44:	2001      	movs	r0, #1
 8015c46:	f007 ff97 	bl	801db78 <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	2102      	movs	r1, #2
 8015c50:	2001      	movs	r0, #1
 8015c52:	f008 f9ed 	bl	801e030 <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	685a      	ldr	r2, [r3, #4]
 8015c5a:	4b2a      	ldr	r3, [pc, #168]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c5c:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 8015c5e:	4b29      	ldr	r3, [pc, #164]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c60:	2202      	movs	r2, #2
 8015c62:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 8015c64:	4b28      	ldr	r3, [pc, #160]	; (8015d08 <SX1276IoIrqInit+0x114>)
 8015c66:	0018      	movs	r0, r3
 8015c68:	f008 fa62 	bl	801e130 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015c6c:	2102      	movs	r1, #2
 8015c6e:	2001      	movs	r0, #1
 8015c70:	f008 f9ba 	bl	801dfe8 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015c74:	2101      	movs	r1, #1
 8015c76:	2001      	movs	r0, #1
 8015c78:	f008 fa02 	bl	801e080 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 8015c7c:	2207      	movs	r2, #7
 8015c7e:	2101      	movs	r1, #1
 8015c80:	2001      	movs	r0, #1
 8015c82:	f007 ff79 	bl	801db78 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 8015c86:	2300      	movs	r3, #0
 8015c88:	2200      	movs	r2, #0
 8015c8a:	2101      	movs	r1, #1
 8015c8c:	2001      	movs	r0, #1
 8015c8e:	f008 f9cf 	bl	801e030 <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	689a      	ldr	r2, [r3, #8]
 8015c96:	4b1b      	ldr	r3, [pc, #108]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c98:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 8015c9a:	4b1a      	ldr	r3, [pc, #104]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015c9c:	2201      	movs	r2, #1
 8015c9e:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 8015ca0:	4b1a      	ldr	r3, [pc, #104]	; (8015d0c <SX1276IoIrqInit+0x118>)
 8015ca2:	0018      	movs	r0, r3
 8015ca4:	f008 fa44 	bl	801e130 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015ca8:	2101      	movs	r1, #1
 8015caa:	2001      	movs	r0, #1
 8015cac:	f008 f99c 	bl	801dfe8 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015cb0:	2380      	movs	r3, #128	; 0x80
 8015cb2:	019b      	lsls	r3, r3, #6
 8015cb4:	0019      	movs	r1, r3
 8015cb6:	2002      	movs	r0, #2
 8015cb8:	f008 f9e2 	bl	801e080 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 8015cbc:	2380      	movs	r3, #128	; 0x80
 8015cbe:	019b      	lsls	r3, r3, #6
 8015cc0:	2207      	movs	r2, #7
 8015cc2:	0019      	movs	r1, r3
 8015cc4:	2002      	movs	r0, #2
 8015cc6:	f007 ff57 	bl	801db78 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 8015cca:	2380      	movs	r3, #128	; 0x80
 8015ccc:	0199      	lsls	r1, r3, #6
 8015cce:	2300      	movs	r3, #0
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	2002      	movs	r0, #2
 8015cd4:	f008 f9ac 	bl	801e030 <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	68da      	ldr	r2, [r3, #12]
 8015cdc:	4b09      	ldr	r3, [pc, #36]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015cde:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 8015ce0:	4b08      	ldr	r3, [pc, #32]	; (8015d04 <SX1276IoIrqInit+0x110>)
 8015ce2:	2280      	movs	r2, #128	; 0x80
 8015ce4:	0192      	lsls	r2, r2, #6
 8015ce6:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 8015ce8:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <SX1276IoIrqInit+0x11c>)
 8015cea:	0018      	movs	r0, r3
 8015cec:	f008 fa20 	bl	801e130 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015cf0:	2380      	movs	r3, #128	; 0x80
 8015cf2:	019b      	lsls	r3, r3, #6
 8015cf4:	0019      	movs	r1, r3
 8015cf6:	2002      	movs	r0, #2
 8015cf8:	f008 f976 	bl	801dfe8 <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 8015cfc:	46c0      	nop			; (mov r8, r8)
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	b002      	add	sp, #8
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	20001054 	.word	0x20001054
 8015d08:	20001060 	.word	0x20001060
 8015d0c:	2000106c 	.word	0x2000106c
 8015d10:	20001078 	.word	0x20001078

08015d14 <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015d18:	220e      	movs	r2, #14
 8015d1a:	2110      	movs	r1, #16
 8015d1c:	2001      	movs	r0, #1
 8015d1e:	f007 ff2b 	bl	801db78 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015d22:	2110      	movs	r1, #16
 8015d24:	2001      	movs	r0, #1
 8015d26:	f008 f9ab 	bl	801e080 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015d2a:	220e      	movs	r2, #14
 8015d2c:	2102      	movs	r1, #2
 8015d2e:	2001      	movs	r0, #1
 8015d30:	f007 ff22 	bl	801db78 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 8015d34:	2102      	movs	r1, #2
 8015d36:	2001      	movs	r0, #1
 8015d38:	f008 f9a2 	bl	801e080 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015d3c:	220e      	movs	r2, #14
 8015d3e:	2101      	movs	r1, #1
 8015d40:	2001      	movs	r0, #1
 8015d42:	f007 ff19 	bl	801db78 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015d46:	2101      	movs	r1, #1
 8015d48:	2001      	movs	r0, #1
 8015d4a:	f008 f999 	bl	801e080 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 8015d4e:	2380      	movs	r3, #128	; 0x80
 8015d50:	019b      	lsls	r3, r3, #6
 8015d52:	220e      	movs	r2, #14
 8015d54:	0019      	movs	r1, r3
 8015d56:	2002      	movs	r0, #2
 8015d58:	f007 ff0e 	bl	801db78 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 8015d5c:	2380      	movs	r3, #128	; 0x80
 8015d5e:	019b      	lsls	r3, r3, #6
 8015d60:	0019      	movs	r1, r3
 8015d62:	2002      	movs	r0, #2
 8015d64:	f008 f98c 	bl	801e080 <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 8015d68:	46c0      	nop			; (mov r8, r8)
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 8015d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d70:	b085      	sub	sp, #20
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	0002      	movs	r2, r0
 8015d76:	1dfb      	adds	r3, r7, #7
 8015d78:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 8015d7a:	250f      	movs	r5, #15
 8015d7c:	197b      	adds	r3, r7, r5
 8015d7e:	2200      	movs	r2, #0
 8015d80:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8015d82:	260e      	movs	r6, #14
 8015d84:	19bb      	adds	r3, r7, r6
 8015d86:	2200      	movs	r2, #0
 8015d88:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 8015d8a:	197c      	adds	r4, r7, r5
 8015d8c:	2009      	movs	r0, #9
 8015d8e:	f001 fe49 	bl	8017a24 <SX1276Read>
 8015d92:	0003      	movs	r3, r0
 8015d94:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8015d96:	19bc      	adds	r4, r7, r6
 8015d98:	204d      	movs	r0, #77	; 0x4d
 8015d9a:	f001 fe43 	bl	8017a24 <SX1276Read>
 8015d9e:	0003      	movs	r3, r0
 8015da0:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8015da2:	197b      	adds	r3, r7, r5
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	b25b      	sxtb	r3, r3
 8015da8:	227f      	movs	r2, #127	; 0x7f
 8015daa:	4013      	ands	r3, r2
 8015dac:	b25c      	sxtb	r4, r3
 8015dae:	1dfb      	adds	r3, r7, #7
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	0018      	movs	r0, r3
 8015db4:	f000 f8ae 	bl	8015f14 <SX1276GetPaSelect>
 8015db8:	0003      	movs	r3, r0
 8015dba:	b25b      	sxtb	r3, r3
 8015dbc:	4323      	orrs	r3, r4
 8015dbe:	b25a      	sxtb	r2, r3
 8015dc0:	197b      	adds	r3, r7, r5
 8015dc2:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8015dc4:	197b      	adds	r3, r7, r5
 8015dc6:	197a      	adds	r2, r7, r5
 8015dc8:	7812      	ldrb	r2, [r2, #0]
 8015dca:	2170      	movs	r1, #112	; 0x70
 8015dcc:	430a      	orrs	r2, r1
 8015dce:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8015dd0:	197b      	adds	r3, r7, r5
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	b25b      	sxtb	r3, r3
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	da67      	bge.n	8015eaa <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 8015dda:	1dfb      	adds	r3, r7, #7
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	b25b      	sxtb	r3, r3
 8015de0:	2b11      	cmp	r3, #17
 8015de2:	dd07      	ble.n	8015df4 <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8015de4:	220e      	movs	r2, #14
 8015de6:	18bb      	adds	r3, r7, r2
 8015de8:	18ba      	adds	r2, r7, r2
 8015dea:	7812      	ldrb	r2, [r2, #0]
 8015dec:	2107      	movs	r1, #7
 8015dee:	430a      	orrs	r2, r1
 8015df0:	701a      	strb	r2, [r3, #0]
 8015df2:	e00b      	b.n	8015e0c <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8015df4:	210e      	movs	r1, #14
 8015df6:	187b      	adds	r3, r7, r1
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	b25b      	sxtb	r3, r3
 8015dfc:	2207      	movs	r2, #7
 8015dfe:	4393      	bics	r3, r2
 8015e00:	b25b      	sxtb	r3, r3
 8015e02:	2204      	movs	r2, #4
 8015e04:	4313      	orrs	r3, r2
 8015e06:	b25a      	sxtb	r2, r3
 8015e08:	187b      	adds	r3, r7, r1
 8015e0a:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8015e0c:	230e      	movs	r3, #14
 8015e0e:	18fb      	adds	r3, r7, r3
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	2207      	movs	r2, #7
 8015e14:	4013      	ands	r3, r2
 8015e16:	2b07      	cmp	r3, #7
 8015e18:	d123      	bne.n	8015e62 <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 8015e1a:	1dfb      	adds	r3, r7, #7
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	b25b      	sxtb	r3, r3
 8015e20:	2b04      	cmp	r3, #4
 8015e22:	dc02      	bgt.n	8015e2a <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 8015e24:	1dfb      	adds	r3, r7, #7
 8015e26:	2205      	movs	r2, #5
 8015e28:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8015e2a:	1dfb      	adds	r3, r7, #7
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	b25b      	sxtb	r3, r3
 8015e30:	2b14      	cmp	r3, #20
 8015e32:	dd02      	ble.n	8015e3a <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 8015e34:	1dfb      	adds	r3, r7, #7
 8015e36:	2214      	movs	r2, #20
 8015e38:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8015e3a:	200f      	movs	r0, #15
 8015e3c:	183b      	adds	r3, r7, r0
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	b25b      	sxtb	r3, r3
 8015e42:	220f      	movs	r2, #15
 8015e44:	4393      	bics	r3, r2
 8015e46:	b25a      	sxtb	r2, r3
 8015e48:	1dfb      	adds	r3, r7, #7
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	3b05      	subs	r3, #5
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	b25b      	sxtb	r3, r3
 8015e52:	210f      	movs	r1, #15
 8015e54:	400b      	ands	r3, r1
 8015e56:	b25b      	sxtb	r3, r3
 8015e58:	4313      	orrs	r3, r2
 8015e5a:	b25a      	sxtb	r2, r3
 8015e5c:	183b      	adds	r3, r7, r0
 8015e5e:	701a      	strb	r2, [r3, #0]
 8015e60:	e046      	b.n	8015ef0 <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 8015e62:	1dfb      	adds	r3, r7, #7
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	b25b      	sxtb	r3, r3
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	dc02      	bgt.n	8015e72 <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 8015e6c:	1dfb      	adds	r3, r7, #7
 8015e6e:	2202      	movs	r2, #2
 8015e70:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8015e72:	1dfb      	adds	r3, r7, #7
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	b25b      	sxtb	r3, r3
 8015e78:	2b11      	cmp	r3, #17
 8015e7a:	dd02      	ble.n	8015e82 <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 8015e7c:	1dfb      	adds	r3, r7, #7
 8015e7e:	2211      	movs	r2, #17
 8015e80:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8015e82:	200f      	movs	r0, #15
 8015e84:	183b      	adds	r3, r7, r0
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	b25b      	sxtb	r3, r3
 8015e8a:	220f      	movs	r2, #15
 8015e8c:	4393      	bics	r3, r2
 8015e8e:	b25a      	sxtb	r2, r3
 8015e90:	1dfb      	adds	r3, r7, #7
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	3b02      	subs	r3, #2
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	b25b      	sxtb	r3, r3
 8015e9a:	210f      	movs	r1, #15
 8015e9c:	400b      	ands	r3, r1
 8015e9e:	b25b      	sxtb	r3, r3
 8015ea0:	4313      	orrs	r3, r2
 8015ea2:	b25a      	sxtb	r2, r3
 8015ea4:	183b      	adds	r3, r7, r0
 8015ea6:	701a      	strb	r2, [r3, #0]
 8015ea8:	e022      	b.n	8015ef0 <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 8015eaa:	1dfb      	adds	r3, r7, #7
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	b25b      	sxtb	r3, r3
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	da02      	bge.n	8015eba <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 8015eb4:	1dfb      	adds	r3, r7, #7
 8015eb6:	22ff      	movs	r2, #255	; 0xff
 8015eb8:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 8015eba:	1dfb      	adds	r3, r7, #7
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	b25b      	sxtb	r3, r3
 8015ec0:	2b0e      	cmp	r3, #14
 8015ec2:	dd02      	ble.n	8015eca <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 8015ec4:	1dfb      	adds	r3, r7, #7
 8015ec6:	220e      	movs	r2, #14
 8015ec8:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8015eca:	200f      	movs	r0, #15
 8015ecc:	183b      	adds	r3, r7, r0
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	b25b      	sxtb	r3, r3
 8015ed2:	220f      	movs	r2, #15
 8015ed4:	4393      	bics	r3, r2
 8015ed6:	b25a      	sxtb	r2, r3
 8015ed8:	1dfb      	adds	r3, r7, #7
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	3301      	adds	r3, #1
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	b25b      	sxtb	r3, r3
 8015ee2:	210f      	movs	r1, #15
 8015ee4:	400b      	ands	r3, r1
 8015ee6:	b25b      	sxtb	r3, r3
 8015ee8:	4313      	orrs	r3, r2
 8015eea:	b25a      	sxtb	r2, r3
 8015eec:	183b      	adds	r3, r7, r0
 8015eee:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8015ef0:	230f      	movs	r3, #15
 8015ef2:	18fb      	adds	r3, r7, r3
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	0019      	movs	r1, r3
 8015ef8:	2009      	movs	r0, #9
 8015efa:	f001 fd7f 	bl	80179fc <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8015efe:	230e      	movs	r3, #14
 8015f00:	18fb      	adds	r3, r7, r3
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	0019      	movs	r1, r3
 8015f06:	204d      	movs	r0, #77	; 0x4d
 8015f08:	f001 fd78 	bl	80179fc <SX1276Write>
}
 8015f0c:	46c0      	nop			; (mov r8, r8)
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	b005      	add	sp, #20
 8015f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f14 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	0002      	movs	r2, r0
 8015f1c:	1dfb      	adds	r3, r7, #7
 8015f1e:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 8015f20:	1dfb      	adds	r3, r7, #7
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	2b0e      	cmp	r3, #14
 8015f26:	d901      	bls.n	8015f2c <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8015f28:	2380      	movs	r3, #128	; 0x80
 8015f2a:	e000      	b.n	8015f2e <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8015f2c:	2300      	movs	r3, #0
    }
}
 8015f2e:	0018      	movs	r0, r3
 8015f30:	46bd      	mov	sp, r7
 8015f32:	b002      	add	sp, #8
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b082      	sub	sp, #8
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	0002      	movs	r2, r0
 8015f3e:	1dfb      	adds	r3, r7, #7
 8015f40:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 8015f42:	1dfb      	adds	r3, r7, #7
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	2201      	movs	r2, #1
 8015f48:	4053      	eors	r3, r2
 8015f4a:	b2db      	uxtb	r3, r3
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d01b      	beq.n	8015f88 <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 8015f50:	2200      	movs	r2, #0
 8015f52:	2102      	movs	r1, #2
 8015f54:	2000      	movs	r0, #0
 8015f56:	f007 fe0f 	bl	801db78 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015f5a:	2102      	movs	r1, #2
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	f008 f82b 	bl	801dfb8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 8015f62:	2200      	movs	r2, #0
 8015f64:	2102      	movs	r1, #2
 8015f66:	2002      	movs	r0, #2
 8015f68:	f007 fe06 	bl	801db78 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015f6c:	2102      	movs	r1, #2
 8015f6e:	2002      	movs	r0, #2
 8015f70:	f008 f822 	bl	801dfb8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 8015f74:	2200      	movs	r2, #0
 8015f76:	2104      	movs	r1, #4
 8015f78:	2002      	movs	r0, #2
 8015f7a:	f007 fdfd 	bl	801db78 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015f7e:	2104      	movs	r1, #4
 8015f80:	2002      	movs	r0, #2
 8015f82:	f008 f819 	bl	801dfb8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 8015f86:	e01a      	b.n	8015fbe <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 8015f88:	220e      	movs	r2, #14
 8015f8a:	2102      	movs	r1, #2
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	f007 fdf3 	bl	801db78 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015f92:	2102      	movs	r1, #2
 8015f94:	2000      	movs	r0, #0
 8015f96:	f008 f80f 	bl	801dfb8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 8015f9a:	220e      	movs	r2, #14
 8015f9c:	2102      	movs	r1, #2
 8015f9e:	2002      	movs	r0, #2
 8015fa0:	f007 fdea 	bl	801db78 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015fa4:	2102      	movs	r1, #2
 8015fa6:	2002      	movs	r0, #2
 8015fa8:	f008 f806 	bl	801dfb8 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 8015fac:	220e      	movs	r2, #14
 8015fae:	2104      	movs	r1, #4
 8015fb0:	2002      	movs	r0, #2
 8015fb2:	f007 fde1 	bl	801db78 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015fb6:	2104      	movs	r1, #4
 8015fb8:	2002      	movs	r0, #2
 8015fba:	f007 fffd 	bl	801dfb8 <gpio_reset>
}
 8015fbe:	46c0      	nop			; (mov r8, r8)
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	b002      	add	sp, #8
 8015fc4:	bd80      	pop	{r7, pc}
	...

08015fc8 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8015fc8:	b590      	push	{r4, r7, lr}
 8015fca:	b085      	sub	sp, #20
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	0002      	movs	r2, r0
 8015fd0:	1dfb      	adds	r3, r7, #7
 8015fd2:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8015fd4:	230f      	movs	r3, #15
 8015fd6:	18fc      	adds	r4, r7, r3
 8015fd8:	2009      	movs	r0, #9
 8015fda:	f001 fd23 	bl	8017a24 <SX1276Read>
 8015fde:	0003      	movs	r3, r0
 8015fe0:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 8015fe2:	1dfb      	adds	r3, r7, #7
 8015fe4:	781b      	ldrb	r3, [r3, #0]
 8015fe6:	2b03      	cmp	r3, #3
 8015fe8:	d112      	bne.n	8016010 <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 8015fea:	230f      	movs	r3, #15
 8015fec:	18fb      	adds	r3, r7, r3
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	b25b      	sxtb	r3, r3
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	da04      	bge.n	8016000 <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015ff6:	2102      	movs	r1, #2
 8015ff8:	2002      	movs	r0, #2
 8015ffa:	f007 ffc5 	bl	801df88 <gpio_set>
 8015ffe:	e003      	b.n	8016008 <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8016000:	2104      	movs	r1, #4
 8016002:	2002      	movs	r0, #2
 8016004:	f007 ffc0 	bl	801df88 <gpio_set>
      }
      SX1276.RxTx = 1;
 8016008:	4b07      	ldr	r3, [pc, #28]	; (8016028 <SX1276SetAntSw+0x60>)
 801600a:	2201      	movs	r2, #1
 801600c:	701a      	strb	r2, [r3, #0]
      break;
 801600e:	e007      	b.n	8016020 <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 8016010:	4b05      	ldr	r3, [pc, #20]	; (8016028 <SX1276SetAntSw+0x60>)
 8016012:	2200      	movs	r2, #0
 8016014:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8016016:	2102      	movs	r1, #2
 8016018:	2000      	movs	r0, #0
 801601a:	f007 ffb5 	bl	801df88 <gpio_set>
     break;
 801601e:	46c0      	nop			; (mov r8, r8)
    }
}
 8016020:	46c0      	nop			; (mov r8, r8)
 8016022:	46bd      	mov	sp, r7
 8016024:	b005      	add	sp, #20
 8016026:	bd90      	pop	{r4, r7, pc}
 8016028:	200015ec 	.word	0x200015ec

0801602c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 8016034:	2301      	movs	r3, #1
}
 8016036:	0018      	movs	r0, r3
 8016038:	46bd      	mov	sp, r7
 801603a:	b002      	add	sp, #8
 801603c:	bd80      	pop	{r7, pc}
	...

08016040 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 8016048:	4b03      	ldr	r3, [pc, #12]	; (8016058 <SX1276BoardInit+0x18>)
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	601a      	str	r2, [r3, #0]
}
 801604e:	46c0      	nop			; (mov r8, r8)
 8016050:	46bd      	mov	sp, r7
 8016052:	b002      	add	sp, #8
 8016054:	bd80      	pop	{r7, pc}
 8016056:	46c0      	nop			; (mov r8, r8)
 8016058:	200011a0 	.word	0x200011a0

0801605c <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 801605c:	b590      	push	{r4, r7, lr}
 801605e:	b085      	sub	sp, #20
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 8016064:	4b33      	ldr	r3, [pc, #204]	; (8016134 <SX1276Init+0xd8>)
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801606a:	4a33      	ldr	r2, [pc, #204]	; (8016138 <SX1276Init+0xdc>)
 801606c:	4b33      	ldr	r3, [pc, #204]	; (801613c <SX1276Init+0xe0>)
 801606e:	0011      	movs	r1, r2
 8016070:	0018      	movs	r0, r3
 8016072:	f7ff fb93 	bl	801579c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8016076:	4a30      	ldr	r2, [pc, #192]	; (8016138 <SX1276Init+0xdc>)
 8016078:	4b31      	ldr	r3, [pc, #196]	; (8016140 <SX1276Init+0xe4>)
 801607a:	0011      	movs	r1, r2
 801607c:	0018      	movs	r0, r3
 801607e:	f7ff fb8d 	bl	801579c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8016082:	4a2d      	ldr	r2, [pc, #180]	; (8016138 <SX1276Init+0xdc>)
 8016084:	4b2f      	ldr	r3, [pc, #188]	; (8016144 <SX1276Init+0xe8>)
 8016086:	0011      	movs	r1, r2
 8016088:	0018      	movs	r0, r3
 801608a:	f7ff fb87 	bl	801579c <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 801608e:	4b2e      	ldr	r3, [pc, #184]	; (8016148 <SX1276Init+0xec>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2001      	movs	r0, #1
 8016096:	4798      	blx	r3

    SX1276Reset( );
 8016098:	f001 fbee 	bl	8017878 <SX1276Reset>
    RxChainCalibration( );
 801609c:	f000 f936 	bl	801630c <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80160a0:	2000      	movs	r0, #0
 80160a2:	f001 fc03 	bl	80178ac <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 80160a6:	4b28      	ldr	r3, [pc, #160]	; (8016148 <SX1276Init+0xec>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	689b      	ldr	r3, [r3, #8]
 80160ac:	4a27      	ldr	r2, [pc, #156]	; (801614c <SX1276Init+0xf0>)
 80160ae:	0010      	movs	r0, r2
 80160b0:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80160b2:	230f      	movs	r3, #15
 80160b4:	18fb      	adds	r3, r7, r3
 80160b6:	2200      	movs	r2, #0
 80160b8:	701a      	strb	r2, [r3, #0]
 80160ba:	e025      	b.n	8016108 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80160bc:	240f      	movs	r4, #15
 80160be:	193b      	adds	r3, r7, r4
 80160c0:	781a      	ldrb	r2, [r3, #0]
 80160c2:	4923      	ldr	r1, [pc, #140]	; (8016150 <SX1276Init+0xf4>)
 80160c4:	0013      	movs	r3, r2
 80160c6:	005b      	lsls	r3, r3, #1
 80160c8:	189b      	adds	r3, r3, r2
 80160ca:	5c5b      	ldrb	r3, [r3, r1]
 80160cc:	0018      	movs	r0, r3
 80160ce:	f001 fc3d 	bl	801794c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80160d2:	193b      	adds	r3, r7, r4
 80160d4:	781a      	ldrb	r2, [r3, #0]
 80160d6:	491e      	ldr	r1, [pc, #120]	; (8016150 <SX1276Init+0xf4>)
 80160d8:	0013      	movs	r3, r2
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	189b      	adds	r3, r3, r2
 80160de:	18cb      	adds	r3, r1, r3
 80160e0:	3301      	adds	r3, #1
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	b298      	uxth	r0, r3
 80160e6:	193b      	adds	r3, r7, r4
 80160e8:	781a      	ldrb	r2, [r3, #0]
 80160ea:	4919      	ldr	r1, [pc, #100]	; (8016150 <SX1276Init+0xf4>)
 80160ec:	0013      	movs	r3, r2
 80160ee:	005b      	lsls	r3, r3, #1
 80160f0:	189b      	adds	r3, r3, r2
 80160f2:	18cb      	adds	r3, r1, r3
 80160f4:	3302      	adds	r3, #2
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	0019      	movs	r1, r3
 80160fa:	f001 fc7f 	bl	80179fc <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80160fe:	193b      	adds	r3, r7, r4
 8016100:	781a      	ldrb	r2, [r3, #0]
 8016102:	193b      	adds	r3, r7, r4
 8016104:	3201      	adds	r2, #1
 8016106:	701a      	strb	r2, [r3, #0]
 8016108:	230f      	movs	r3, #15
 801610a:	18fb      	adds	r3, r7, r3
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	2b0f      	cmp	r3, #15
 8016110:	d9d4      	bls.n	80160bc <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8016112:	2000      	movs	r0, #0
 8016114:	f001 fc1a 	bl	801794c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8016118:	4b0e      	ldr	r3, [pc, #56]	; (8016154 <SX1276Init+0xf8>)
 801611a:	2200      	movs	r2, #0
 801611c:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 801611e:	4b0a      	ldr	r3, [pc, #40]	; (8016148 <SX1276Init+0xec>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	4798      	blx	r3
 8016126:	0003      	movs	r3, r0
 8016128:	3335      	adds	r3, #53	; 0x35
}
 801612a:	0018      	movs	r0, r3
 801612c:	46bd      	mov	sp, r7
 801612e:	b005      	add	sp, #20
 8016130:	bd90      	pop	{r4, r7, pc}
 8016132:	46c0      	nop			; (mov r8, r8)
 8016134:	2000109c 	.word	0x2000109c
 8016138:	08017c9d 	.word	0x08017c9d
 801613c:	200015bc 	.word	0x200015bc
 8016140:	20001654 	.word	0x20001654
 8016144:	200015d4 	.word	0x200015d4
 8016148:	200011a0 	.word	0x200011a0
 801614c:	20000098 	.word	0x20000098
 8016150:	08021bbc 	.word	0x08021bbc
 8016154:	200015ec 	.word	0x200015ec

08016158 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8016158:	b580      	push	{r7, lr}
 801615a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 801615c:	4b02      	ldr	r3, [pc, #8]	; (8016168 <SX1276GetStatus+0x10>)
 801615e:	791b      	ldrb	r3, [r3, #4]
}
 8016160:	0018      	movs	r0, r3
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	46c0      	nop			; (mov r8, r8)
 8016168:	200015ec 	.word	0x200015ec

0801616c <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 801616c:	b590      	push	{r4, r7, lr}
 801616e:	b087      	sub	sp, #28
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8016174:	4b1d      	ldr	r3, [pc, #116]	; (80161ec <SX1276SetChannel+0x80>)
 8016176:	687a      	ldr	r2, [r7, #4]
 8016178:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	491c      	ldr	r1, [pc, #112]	; (80161f0 <SX1276SetChannel+0x84>)
 801617e:	0018      	movs	r0, r3
 8016180:	f7e9 ffca 	bl	8000118 <__udivsi3>
 8016184:	0003      	movs	r3, r0
 8016186:	617b      	str	r3, [r7, #20]
 8016188:	6979      	ldr	r1, [r7, #20]
 801618a:	000b      	movs	r3, r1
 801618c:	015b      	lsls	r3, r3, #5
 801618e:	1a5b      	subs	r3, r3, r1
 8016190:	019a      	lsls	r2, r3, #6
 8016192:	1ad2      	subs	r2, r2, r3
 8016194:	00d2      	lsls	r2, r2, #3
 8016196:	1853      	adds	r3, r2, r1
 8016198:	687a      	ldr	r2, [r7, #4]
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	613b      	str	r3, [r7, #16]
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	021c      	lsls	r4, r3, #8
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	021b      	lsls	r3, r3, #8
 80161a6:	4a13      	ldr	r2, [pc, #76]	; (80161f4 <SX1276SetChannel+0x88>)
 80161a8:	4694      	mov	ip, r2
 80161aa:	4463      	add	r3, ip
 80161ac:	4910      	ldr	r1, [pc, #64]	; (80161f0 <SX1276SetChannel+0x84>)
 80161ae:	0018      	movs	r0, r3
 80161b0:	f7e9 ffb2 	bl	8000118 <__udivsi3>
 80161b4:	0003      	movs	r3, r0
 80161b6:	18e3      	adds	r3, r4, r3
 80161b8:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	0c1b      	lsrs	r3, r3, #16
 80161be:	b2db      	uxtb	r3, r3
 80161c0:	0019      	movs	r1, r3
 80161c2:	2006      	movs	r0, #6
 80161c4:	f001 fc1a 	bl	80179fc <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	0a1b      	lsrs	r3, r3, #8
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	0019      	movs	r1, r3
 80161d0:	2007      	movs	r0, #7
 80161d2:	f001 fc13 	bl	80179fc <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	b2db      	uxtb	r3, r3
 80161da:	0019      	movs	r1, r3
 80161dc:	2008      	movs	r0, #8
 80161de:	f001 fc0d 	bl	80179fc <SX1276Write>
}
 80161e2:	46c0      	nop			; (mov r8, r8)
 80161e4:	46bd      	mov	sp, r7
 80161e6:	b007      	add	sp, #28
 80161e8:	bd90      	pop	{r4, r7, pc}
 80161ea:	46c0      	nop			; (mov r8, r8)
 80161ec:	200015ec 	.word	0x200015ec
 80161f0:	00003d09 	.word	0x00003d09
 80161f4:	00001e84 	.word	0x00001e84

080161f8 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80161f8:	b5b0      	push	{r4, r5, r7, lr}
 80161fa:	b086      	sub	sp, #24
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60b9      	str	r1, [r7, #8]
 8016200:	0011      	movs	r1, r2
 8016202:	607b      	str	r3, [r7, #4]
 8016204:	240f      	movs	r4, #15
 8016206:	193b      	adds	r3, r7, r4
 8016208:	1c02      	adds	r2, r0, #0
 801620a:	701a      	strb	r2, [r3, #0]
 801620c:	230c      	movs	r3, #12
 801620e:	18fb      	adds	r3, r7, r3
 8016210:	1c0a      	adds	r2, r1, #0
 8016212:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 8016214:	2317      	movs	r3, #23
 8016216:	18fb      	adds	r3, r7, r3
 8016218:	2201      	movs	r2, #1
 801621a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801621c:	2314      	movs	r3, #20
 801621e:	18fb      	adds	r3, r7, r3
 8016220:	2200      	movs	r2, #0
 8016222:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8016224:	2300      	movs	r3, #0
 8016226:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 8016228:	193b      	adds	r3, r7, r4
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	0018      	movs	r0, r3
 801622e:	f001 fb8d 	bl	801794c <SX1276SetModem>

    SX1276SetChannel( freq );
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	0018      	movs	r0, r3
 8016236:	f7ff ff99 	bl	801616c <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801623a:	2005      	movs	r0, #5
 801623c:	f001 fb36 	bl	80178ac <SX1276SetOpMode>

    DelayMs( 1 );
 8016240:	2001      	movs	r0, #1
 8016242:	f007 fffd 	bl	801e240 <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8016246:	f7ff fb83 	bl	8015950 <TimerGetCurrentTime>
 801624a:	0003      	movs	r3, r0
 801624c:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801624e:	e017      	b.n	8016280 <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 8016250:	2514      	movs	r5, #20
 8016252:	197c      	adds	r4, r7, r5
 8016254:	230f      	movs	r3, #15
 8016256:	18fb      	adds	r3, r7, r3
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	0018      	movs	r0, r3
 801625c:	f001 fac0 	bl	80177e0 <SX1276ReadRssi>
 8016260:	0003      	movs	r3, r0
 8016262:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8016264:	197a      	adds	r2, r7, r5
 8016266:	230c      	movs	r3, #12
 8016268:	18fb      	adds	r3, r7, r3
 801626a:	2100      	movs	r1, #0
 801626c:	5e52      	ldrsh	r2, [r2, r1]
 801626e:	2100      	movs	r1, #0
 8016270:	5e5b      	ldrsh	r3, [r3, r1]
 8016272:	429a      	cmp	r2, r3
 8016274:	dd04      	ble.n	8016280 <SX1276IsChannelFree+0x88>
        {
            status = false;
 8016276:	2317      	movs	r3, #23
 8016278:	18fb      	adds	r3, r7, r3
 801627a:	2200      	movs	r2, #0
 801627c:	701a      	strb	r2, [r3, #0]
            break;
 801627e:	e007      	b.n	8016290 <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016280:	693b      	ldr	r3, [r7, #16]
 8016282:	0018      	movs	r0, r3
 8016284:	f7ff fb6d 	bl	8015962 <TimerGetElapsedTime>
 8016288:	0002      	movs	r2, r0
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	4293      	cmp	r3, r2
 801628e:	d8df      	bhi.n	8016250 <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 8016290:	f000 ffde 	bl	8017250 <SX1276SetSleep>
    return status;
 8016294:	2317      	movs	r3, #23
 8016296:	18fb      	adds	r3, r7, r3
 8016298:	781b      	ldrb	r3, [r3, #0]
}
 801629a:	0018      	movs	r0, r3
 801629c:	46bd      	mov	sp, r7
 801629e:	b006      	add	sp, #24
 80162a0:	bdb0      	pop	{r4, r5, r7, pc}

080162a2 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80162a2:	b580      	push	{r7, lr}
 80162a4:	b082      	sub	sp, #8
 80162a6:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80162ac:	2001      	movs	r0, #1
 80162ae:	f001 fb4d 	bl	801794c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80162b2:	21ff      	movs	r1, #255	; 0xff
 80162b4:	2011      	movs	r0, #17
 80162b6:	f001 fba1 	bl	80179fc <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80162ba:	2005      	movs	r0, #5
 80162bc:	f001 faf6 	bl	80178ac <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80162c0:	1dfb      	adds	r3, r7, #7
 80162c2:	2200      	movs	r2, #0
 80162c4:	701a      	strb	r2, [r3, #0]
 80162c6:	e015      	b.n	80162f4 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80162c8:	2001      	movs	r0, #1
 80162ca:	f007 ffb9 	bl	801e240 <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80162ce:	202c      	movs	r0, #44	; 0x2c
 80162d0:	f001 fba8 	bl	8017a24 <SX1276Read>
 80162d4:	0003      	movs	r3, r0
 80162d6:	001a      	movs	r2, r3
 80162d8:	2301      	movs	r3, #1
 80162da:	401a      	ands	r2, r3
 80162dc:	1dfb      	adds	r3, r7, #7
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	409a      	lsls	r2, r3
 80162e2:	0013      	movs	r3, r2
 80162e4:	683a      	ldr	r2, [r7, #0]
 80162e6:	4313      	orrs	r3, r2
 80162e8:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80162ea:	1dfb      	adds	r3, r7, #7
 80162ec:	781a      	ldrb	r2, [r3, #0]
 80162ee:	1dfb      	adds	r3, r7, #7
 80162f0:	3201      	adds	r2, #1
 80162f2:	701a      	strb	r2, [r3, #0]
 80162f4:	1dfb      	adds	r3, r7, #7
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b1f      	cmp	r3, #31
 80162fa:	d9e5      	bls.n	80162c8 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 80162fc:	f000 ffa8 	bl	8017250 <SX1276SetSleep>

    return rnd;
 8016300:	683b      	ldr	r3, [r7, #0]
}
 8016302:	0018      	movs	r0, r3
 8016304:	46bd      	mov	sp, r7
 8016306:	b002      	add	sp, #8
 8016308:	bd80      	pop	{r7, pc}
	...

0801630c <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 801630c:	b590      	push	{r4, r7, lr}
 801630e:	b087      	sub	sp, #28
 8016310:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8016312:	2317      	movs	r3, #23
 8016314:	18fc      	adds	r4, r7, r3
 8016316:	2009      	movs	r0, #9
 8016318:	f001 fb84 	bl	8017a24 <SX1276Read>
 801631c:	0003      	movs	r3, r0
 801631e:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016320:	2006      	movs	r0, #6
 8016322:	f001 fb7f 	bl	8017a24 <SX1276Read>
 8016326:	0003      	movs	r3, r0
 8016328:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801632a:	2007      	movs	r0, #7
 801632c:	f001 fb7a 	bl	8017a24 <SX1276Read>
 8016330:	0003      	movs	r3, r0
 8016332:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8016334:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8016336:	2008      	movs	r0, #8
 8016338:	f001 fb74 	bl	8017a24 <SX1276Read>
 801633c:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801633e:	4323      	orrs	r3, r4
 8016340:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	0a1b      	lsrs	r3, r3, #8
 8016346:	60fb      	str	r3, [r7, #12]
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	021b      	lsls	r3, r3, #8
 801634c:	693a      	ldr	r2, [r7, #16]
 801634e:	1ad3      	subs	r3, r2, r3
 8016350:	60bb      	str	r3, [r7, #8]
 8016352:	68f9      	ldr	r1, [r7, #12]
 8016354:	000b      	movs	r3, r1
 8016356:	015b      	lsls	r3, r3, #5
 8016358:	1a5b      	subs	r3, r3, r1
 801635a:	019a      	lsls	r2, r3, #6
 801635c:	1ad2      	subs	r2, r2, r3
 801635e:	00d2      	lsls	r2, r2, #3
 8016360:	1850      	adds	r0, r2, r1
 8016362:	68b9      	ldr	r1, [r7, #8]
 8016364:	000b      	movs	r3, r1
 8016366:	015b      	lsls	r3, r3, #5
 8016368:	1a5b      	subs	r3, r3, r1
 801636a:	019a      	lsls	r2, r3, #6
 801636c:	1ad2      	subs	r2, r2, r3
 801636e:	00d2      	lsls	r2, r2, #3
 8016370:	1853      	adds	r3, r2, r1
 8016372:	3380      	adds	r3, #128	; 0x80
 8016374:	0a1b      	lsrs	r3, r3, #8
 8016376:	18c3      	adds	r3, r0, r3
 8016378:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801637a:	2100      	movs	r1, #0
 801637c:	2009      	movs	r0, #9
 801637e:	f001 fb3d 	bl	80179fc <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8016382:	203b      	movs	r0, #59	; 0x3b
 8016384:	f001 fb4e 	bl	8017a24 <SX1276Read>
 8016388:	0003      	movs	r3, r0
 801638a:	001a      	movs	r2, r3
 801638c:	2340      	movs	r3, #64	; 0x40
 801638e:	4313      	orrs	r3, r2
 8016390:	b2db      	uxtb	r3, r3
 8016392:	0019      	movs	r1, r3
 8016394:	203b      	movs	r0, #59	; 0x3b
 8016396:	f001 fb31 	bl	80179fc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801639a:	46c0      	nop			; (mov r8, r8)
 801639c:	203b      	movs	r0, #59	; 0x3b
 801639e:	f001 fb41 	bl	8017a24 <SX1276Read>
 80163a2:	0003      	movs	r3, r0
 80163a4:	001a      	movs	r2, r3
 80163a6:	2320      	movs	r3, #32
 80163a8:	4013      	ands	r3, r2
 80163aa:	2b20      	cmp	r3, #32
 80163ac:	d0f6      	beq.n	801639c <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80163ae:	4b14      	ldr	r3, [pc, #80]	; (8016400 <RxChainCalibration+0xf4>)
 80163b0:	0018      	movs	r0, r3
 80163b2:	f7ff fedb 	bl	801616c <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80163b6:	203b      	movs	r0, #59	; 0x3b
 80163b8:	f001 fb34 	bl	8017a24 <SX1276Read>
 80163bc:	0003      	movs	r3, r0
 80163be:	001a      	movs	r2, r3
 80163c0:	2340      	movs	r3, #64	; 0x40
 80163c2:	4313      	orrs	r3, r2
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	0019      	movs	r1, r3
 80163c8:	203b      	movs	r0, #59	; 0x3b
 80163ca:	f001 fb17 	bl	80179fc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80163ce:	46c0      	nop			; (mov r8, r8)
 80163d0:	203b      	movs	r0, #59	; 0x3b
 80163d2:	f001 fb27 	bl	8017a24 <SX1276Read>
 80163d6:	0003      	movs	r3, r0
 80163d8:	001a      	movs	r2, r3
 80163da:	2320      	movs	r3, #32
 80163dc:	4013      	ands	r3, r2
 80163de:	2b20      	cmp	r3, #32
 80163e0:	d0f6      	beq.n	80163d0 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80163e2:	2317      	movs	r3, #23
 80163e4:	18fb      	adds	r3, r7, r3
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	0019      	movs	r1, r3
 80163ea:	2009      	movs	r0, #9
 80163ec:	f001 fb06 	bl	80179fc <SX1276Write>
    SX1276SetChannel( initialFreq );
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	0018      	movs	r0, r3
 80163f4:	f7ff feba 	bl	801616c <SX1276SetChannel>
}
 80163f8:	46c0      	nop			; (mov r8, r8)
 80163fa:	46bd      	mov	sp, r7
 80163fc:	b007      	add	sp, #28
 80163fe:	bd90      	pop	{r4, r7, pc}
 8016400:	33bca100 	.word	0x33bca100

08016404 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801640c:	230f      	movs	r3, #15
 801640e:	18fb      	adds	r3, r7, r3
 8016410:	2200      	movs	r2, #0
 8016412:	701a      	strb	r2, [r3, #0]
 8016414:	e021      	b.n	801645a <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8016416:	230f      	movs	r3, #15
 8016418:	18fb      	adds	r3, r7, r3
 801641a:	781a      	ldrb	r2, [r3, #0]
 801641c:	4b14      	ldr	r3, [pc, #80]	; (8016470 <GetFskBandwidthRegValue+0x6c>)
 801641e:	00d2      	lsls	r2, r2, #3
 8016420:	58d3      	ldr	r3, [r2, r3]
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	429a      	cmp	r2, r3
 8016426:	d312      	bcc.n	801644e <GetFskBandwidthRegValue+0x4a>
 8016428:	230f      	movs	r3, #15
 801642a:	18fb      	adds	r3, r7, r3
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	1c5a      	adds	r2, r3, #1
 8016430:	4b0f      	ldr	r3, [pc, #60]	; (8016470 <GetFskBandwidthRegValue+0x6c>)
 8016432:	00d2      	lsls	r2, r2, #3
 8016434:	58d3      	ldr	r3, [r2, r3]
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	429a      	cmp	r2, r3
 801643a:	d208      	bcs.n	801644e <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 801643c:	230f      	movs	r3, #15
 801643e:	18fb      	adds	r3, r7, r3
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	4a0b      	ldr	r2, [pc, #44]	; (8016470 <GetFskBandwidthRegValue+0x6c>)
 8016444:	00db      	lsls	r3, r3, #3
 8016446:	18d3      	adds	r3, r2, r3
 8016448:	3304      	adds	r3, #4
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	e00b      	b.n	8016466 <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801644e:	210f      	movs	r1, #15
 8016450:	187b      	adds	r3, r7, r1
 8016452:	781a      	ldrb	r2, [r3, #0]
 8016454:	187b      	adds	r3, r7, r1
 8016456:	3201      	adds	r2, #1
 8016458:	701a      	strb	r2, [r3, #0]
 801645a:	230f      	movs	r3, #15
 801645c:	18fb      	adds	r3, r7, r3
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	2b14      	cmp	r3, #20
 8016462:	d9d8      	bls.n	8016416 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8016464:	e7fe      	b.n	8016464 <GetFskBandwidthRegValue+0x60>
}
 8016466:	0018      	movs	r0, r3
 8016468:	46bd      	mov	sp, r7
 801646a:	b004      	add	sp, #16
 801646c:	bd80      	pop	{r7, pc}
 801646e:	46c0      	nop			; (mov r8, r8)
 8016470:	08021bec 	.word	0x08021bec

08016474 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8016474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016476:	46c6      	mov	lr, r8
 8016478:	b500      	push	{lr}
 801647a:	b084      	sub	sp, #16
 801647c:	af00      	add	r7, sp, #0
 801647e:	60b9      	str	r1, [r7, #8]
 8016480:	607a      	str	r2, [r7, #4]
 8016482:	0019      	movs	r1, r3
 8016484:	240f      	movs	r4, #15
 8016486:	193b      	adds	r3, r7, r4
 8016488:	1c02      	adds	r2, r0, #0
 801648a:	701a      	strb	r2, [r3, #0]
 801648c:	230e      	movs	r3, #14
 801648e:	18fb      	adds	r3, r7, r3
 8016490:	1c0a      	adds	r2, r1, #0
 8016492:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 8016494:	193b      	adds	r3, r7, r4
 8016496:	781b      	ldrb	r3, [r3, #0]
 8016498:	0018      	movs	r0, r3
 801649a:	f001 fa57 	bl	801794c <SX1276SetModem>

    switch( modem )
 801649e:	193b      	adds	r3, r7, r4
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d003      	beq.n	80164ae <SX1276SetRxConfig+0x3a>
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	d100      	bne.n	80164ac <SX1276SetRxConfig+0x38>
 80164aa:	e100      	b.n	80166ae <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80164ac:	e274      	b.n	8016998 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80164ae:	4bc0      	ldr	r3, [pc, #768]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164b0:	68ba      	ldr	r2, [r7, #8]
 80164b2:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80164b4:	4bbe      	ldr	r3, [pc, #760]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80164ba:	4bbd      	ldr	r3, [pc, #756]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164be:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80164c0:	4bbb      	ldr	r3, [pc, #748]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164c2:	222c      	movs	r2, #44	; 0x2c
 80164c4:	2108      	movs	r1, #8
 80164c6:	468c      	mov	ip, r1
 80164c8:	44bc      	add	ip, r7
 80164ca:	4462      	add	r2, ip
 80164cc:	2122      	movs	r1, #34	; 0x22
 80164ce:	7812      	ldrb	r2, [r2, #0]
 80164d0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80164d2:	4bb7      	ldr	r3, [pc, #732]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164d4:	2130      	movs	r1, #48	; 0x30
 80164d6:	2008      	movs	r0, #8
 80164d8:	183a      	adds	r2, r7, r0
 80164da:	1852      	adds	r2, r2, r1
 80164dc:	2123      	movs	r1, #35	; 0x23
 80164de:	7812      	ldrb	r2, [r2, #0]
 80164e0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80164e2:	4bb3      	ldr	r3, [pc, #716]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164e4:	2134      	movs	r1, #52	; 0x34
 80164e6:	183a      	adds	r2, r7, r0
 80164e8:	1852      	adds	r2, r2, r1
 80164ea:	2124      	movs	r1, #36	; 0x24
 80164ec:	7812      	ldrb	r2, [r2, #0]
 80164ee:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80164f0:	4baf      	ldr	r3, [pc, #700]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80164f2:	2220      	movs	r2, #32
 80164f4:	2120      	movs	r1, #32
 80164f6:	468c      	mov	ip, r1
 80164f8:	2108      	movs	r1, #8
 80164fa:	4688      	mov	r8, r1
 80164fc:	44b8      	add	r8, r7
 80164fe:	44c4      	add	ip, r8
 8016500:	4462      	add	r2, ip
 8016502:	2125      	movs	r1, #37	; 0x25
 8016504:	7812      	ldrb	r2, [r2, #0]
 8016506:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8016508:	4ba9      	ldr	r3, [pc, #676]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 801650a:	2224      	movs	r2, #36	; 0x24
 801650c:	2120      	movs	r1, #32
 801650e:	468c      	mov	ip, r1
 8016510:	2108      	movs	r1, #8
 8016512:	4688      	mov	r8, r1
 8016514:	44b8      	add	r8, r7
 8016516:	44c4      	add	ip, r8
 8016518:	4462      	add	r2, ip
 801651a:	2126      	movs	r1, #38	; 0x26
 801651c:	7812      	ldrb	r2, [r2, #0]
 801651e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8016520:	4ba3      	ldr	r3, [pc, #652]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 8016522:	2624      	movs	r6, #36	; 0x24
 8016524:	183a      	adds	r2, r7, r0
 8016526:	1992      	adds	r2, r2, r6
 8016528:	8812      	ldrh	r2, [r2, #0]
 801652a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 801652c:	2328      	movs	r3, #40	; 0x28
 801652e:	2208      	movs	r2, #8
 8016530:	4694      	mov	ip, r2
 8016532:	44bc      	add	ip, r7
 8016534:	4463      	add	r3, ip
 8016536:	881b      	ldrh	r3, [r3, #0]
 8016538:	0018      	movs	r0, r3
 801653a:	f7ec f825 	bl	8002588 <__aeabi_i2d>
 801653e:	0004      	movs	r4, r0
 8016540:	000d      	movs	r5, r1
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	f7ec f85a 	bl	80025fc <__aeabi_ui2d>
 8016548:	0002      	movs	r2, r0
 801654a:	000b      	movs	r3, r1
 801654c:	2000      	movs	r0, #0
 801654e:	4999      	ldr	r1, [pc, #612]	; (80167b4 <SX1276SetRxConfig+0x340>)
 8016550:	f7ea fe20 	bl	8001194 <__aeabi_ddiv>
 8016554:	0002      	movs	r2, r0
 8016556:	000b      	movs	r3, r1
 8016558:	0010      	movs	r0, r2
 801655a:	0019      	movs	r1, r3
 801655c:	2200      	movs	r2, #0
 801655e:	4b96      	ldr	r3, [pc, #600]	; (80167b8 <SX1276SetRxConfig+0x344>)
 8016560:	f7eb fa22 	bl	80019a8 <__aeabi_dmul>
 8016564:	0002      	movs	r2, r0
 8016566:	000b      	movs	r3, r1
 8016568:	0020      	movs	r0, r4
 801656a:	0029      	movs	r1, r5
 801656c:	f7eb fa1c 	bl	80019a8 <__aeabi_dmul>
 8016570:	0003      	movs	r3, r0
 8016572:	000c      	movs	r4, r1
 8016574:	0018      	movs	r0, r3
 8016576:	0021      	movs	r1, r4
 8016578:	2200      	movs	r2, #0
 801657a:	4b90      	ldr	r3, [pc, #576]	; (80167bc <SX1276SetRxConfig+0x348>)
 801657c:	f7eb fa14 	bl	80019a8 <__aeabi_dmul>
 8016580:	0003      	movs	r3, r0
 8016582:	000c      	movs	r4, r1
 8016584:	0018      	movs	r0, r3
 8016586:	0021      	movs	r1, r4
 8016588:	f7e9 ffe8 	bl	800055c <__aeabi_d2uiz>
 801658c:	0002      	movs	r2, r0
 801658e:	4b88      	ldr	r3, [pc, #544]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 8016590:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f7ec f832 	bl	80025fc <__aeabi_ui2d>
 8016598:	0003      	movs	r3, r0
 801659a:	000c      	movs	r4, r1
 801659c:	001a      	movs	r2, r3
 801659e:	0023      	movs	r3, r4
 80165a0:	2000      	movs	r0, #0
 80165a2:	4987      	ldr	r1, [pc, #540]	; (80167c0 <SX1276SetRxConfig+0x34c>)
 80165a4:	f7ea fdf6 	bl	8001194 <__aeabi_ddiv>
 80165a8:	0003      	movs	r3, r0
 80165aa:	000c      	movs	r4, r1
 80165ac:	0018      	movs	r0, r3
 80165ae:	0021      	movs	r1, r4
 80165b0:	f7e9 ffd4 	bl	800055c <__aeabi_d2uiz>
 80165b4:	0003      	movs	r3, r0
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	0a1b      	lsrs	r3, r3, #8
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	0019      	movs	r1, r3
 80165c2:	2002      	movs	r0, #2
 80165c4:	f001 fa1a 	bl	80179fc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	0019      	movs	r1, r3
 80165ce:	2003      	movs	r0, #3
 80165d0:	f001 fa14 	bl	80179fc <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	0018      	movs	r0, r3
 80165d8:	f7ff ff14 	bl	8016404 <GetFskBandwidthRegValue>
 80165dc:	0003      	movs	r3, r0
 80165de:	0019      	movs	r1, r3
 80165e0:	2012      	movs	r0, #18
 80165e2:	f001 fa0b 	bl	80179fc <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80165e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e8:	0018      	movs	r0, r3
 80165ea:	f7ff ff0b 	bl	8016404 <GetFskBandwidthRegValue>
 80165ee:	0003      	movs	r3, r0
 80165f0:	0019      	movs	r1, r3
 80165f2:	2013      	movs	r0, #19
 80165f4:	f001 fa02 	bl	80179fc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80165f8:	2008      	movs	r0, #8
 80165fa:	0004      	movs	r4, r0
 80165fc:	183b      	adds	r3, r7, r0
 80165fe:	199b      	adds	r3, r3, r6
 8016600:	881b      	ldrh	r3, [r3, #0]
 8016602:	0a1b      	lsrs	r3, r3, #8
 8016604:	b29b      	uxth	r3, r3
 8016606:	b2db      	uxtb	r3, r3
 8016608:	0019      	movs	r1, r3
 801660a:	2025      	movs	r0, #37	; 0x25
 801660c:	f001 f9f6 	bl	80179fc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8016610:	193b      	adds	r3, r7, r4
 8016612:	199b      	adds	r3, r3, r6
 8016614:	881b      	ldrh	r3, [r3, #0]
 8016616:	b2db      	uxtb	r3, r3
 8016618:	0019      	movs	r1, r3
 801661a:	2026      	movs	r0, #38	; 0x26
 801661c:	f001 f9ee 	bl	80179fc <SX1276Write>
            if( fixLen == 1 )
 8016620:	222c      	movs	r2, #44	; 0x2c
 8016622:	193b      	adds	r3, r7, r4
 8016624:	189b      	adds	r3, r3, r2
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d00a      	beq.n	8016642 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 801662c:	2330      	movs	r3, #48	; 0x30
 801662e:	2208      	movs	r2, #8
 8016630:	4694      	mov	ip, r2
 8016632:	44bc      	add	ip, r7
 8016634:	4463      	add	r3, ip
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	0019      	movs	r1, r3
 801663a:	2032      	movs	r0, #50	; 0x32
 801663c:	f001 f9de 	bl	80179fc <SX1276Write>
 8016640:	e003      	b.n	801664a <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8016642:	21ff      	movs	r1, #255	; 0xff
 8016644:	2032      	movs	r0, #50	; 0x32
 8016646:	f001 f9d9 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801664a:	2030      	movs	r0, #48	; 0x30
 801664c:	f001 f9ea 	bl	8017a24 <SX1276Read>
 8016650:	0003      	movs	r3, r0
 8016652:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8016654:	226f      	movs	r2, #111	; 0x6f
 8016656:	4013      	ands	r3, r2
 8016658:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801665a:	232c      	movs	r3, #44	; 0x2c
 801665c:	2108      	movs	r1, #8
 801665e:	468c      	mov	ip, r1
 8016660:	44bc      	add	ip, r7
 8016662:	4463      	add	r3, ip
 8016664:	781b      	ldrb	r3, [r3, #0]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d001      	beq.n	801666e <SX1276SetRxConfig+0x1fa>
 801666a:	2300      	movs	r3, #0
 801666c:	e001      	b.n	8016672 <SX1276SetRxConfig+0x1fe>
 801666e:	2380      	movs	r3, #128	; 0x80
 8016670:	425b      	negs	r3, r3
 8016672:	4313      	orrs	r3, r2
 8016674:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8016676:	2334      	movs	r3, #52	; 0x34
 8016678:	2108      	movs	r1, #8
 801667a:	468c      	mov	ip, r1
 801667c:	44bc      	add	ip, r7
 801667e:	4463      	add	r3, ip
 8016680:	781b      	ldrb	r3, [r3, #0]
 8016682:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8016684:	b25b      	sxtb	r3, r3
 8016686:	4313      	orrs	r3, r2
 8016688:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801668a:	b2db      	uxtb	r3, r3
 801668c:	0019      	movs	r1, r3
 801668e:	2030      	movs	r0, #48	; 0x30
 8016690:	f001 f9b4 	bl	80179fc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8016694:	2031      	movs	r0, #49	; 0x31
 8016696:	f001 f9c5 	bl	8017a24 <SX1276Read>
 801669a:	0003      	movs	r3, r0
 801669c:	001a      	movs	r2, r3
 801669e:	2340      	movs	r3, #64	; 0x40
 80166a0:	4313      	orrs	r3, r2
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	0019      	movs	r1, r3
 80166a6:	2031      	movs	r0, #49	; 0x31
 80166a8:	f001 f9a8 	bl	80179fc <SX1276Write>
        break;
 80166ac:	e174      	b.n	8016998 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	2b02      	cmp	r3, #2
 80166b2:	d900      	bls.n	80166b6 <SX1276SetRxConfig+0x242>
                while( 1 );
 80166b4:	e7fe      	b.n	80166b4 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	3307      	adds	r3, #7
 80166ba:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80166bc:	4b3c      	ldr	r3, [pc, #240]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80166be:	68ba      	ldr	r2, [r7, #8]
 80166c0:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80166c2:	4b3b      	ldr	r3, [pc, #236]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80166c4:	687a      	ldr	r2, [r7, #4]
 80166c6:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80166c8:	4b39      	ldr	r3, [pc, #228]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80166ca:	220e      	movs	r2, #14
 80166cc:	18ba      	adds	r2, r7, r2
 80166ce:	214d      	movs	r1, #77	; 0x4d
 80166d0:	7812      	ldrb	r2, [r2, #0]
 80166d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80166d4:	4b36      	ldr	r3, [pc, #216]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80166d6:	2224      	movs	r2, #36	; 0x24
 80166d8:	2108      	movs	r1, #8
 80166da:	468c      	mov	ip, r1
 80166dc:	44bc      	add	ip, r7
 80166de:	4462      	add	r2, ip
 80166e0:	214e      	movs	r1, #78	; 0x4e
 80166e2:	8812      	ldrh	r2, [r2, #0]
 80166e4:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80166e6:	4b32      	ldr	r3, [pc, #200]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80166e8:	222c      	movs	r2, #44	; 0x2c
 80166ea:	2108      	movs	r1, #8
 80166ec:	468c      	mov	ip, r1
 80166ee:	44bc      	add	ip, r7
 80166f0:	4462      	add	r2, ip
 80166f2:	2150      	movs	r1, #80	; 0x50
 80166f4:	7812      	ldrb	r2, [r2, #0]
 80166f6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80166f8:	4b2d      	ldr	r3, [pc, #180]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80166fa:	2230      	movs	r2, #48	; 0x30
 80166fc:	2108      	movs	r1, #8
 80166fe:	468c      	mov	ip, r1
 8016700:	44bc      	add	ip, r7
 8016702:	4462      	add	r2, ip
 8016704:	2151      	movs	r1, #81	; 0x51
 8016706:	7812      	ldrb	r2, [r2, #0]
 8016708:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801670a:	4b29      	ldr	r3, [pc, #164]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 801670c:	2234      	movs	r2, #52	; 0x34
 801670e:	2108      	movs	r1, #8
 8016710:	468c      	mov	ip, r1
 8016712:	44bc      	add	ip, r7
 8016714:	4462      	add	r2, ip
 8016716:	2152      	movs	r1, #82	; 0x52
 8016718:	7812      	ldrb	r2, [r2, #0]
 801671a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801671c:	4b24      	ldr	r3, [pc, #144]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 801671e:	2238      	movs	r2, #56	; 0x38
 8016720:	2108      	movs	r1, #8
 8016722:	468c      	mov	ip, r1
 8016724:	44bc      	add	ip, r7
 8016726:	4462      	add	r2, ip
 8016728:	2153      	movs	r1, #83	; 0x53
 801672a:	7812      	ldrb	r2, [r2, #0]
 801672c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801672e:	4b20      	ldr	r3, [pc, #128]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 8016730:	223c      	movs	r2, #60	; 0x3c
 8016732:	2108      	movs	r1, #8
 8016734:	468c      	mov	ip, r1
 8016736:	44bc      	add	ip, r7
 8016738:	4462      	add	r2, ip
 801673a:	2154      	movs	r1, #84	; 0x54
 801673c:	7812      	ldrb	r2, [r2, #0]
 801673e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8016740:	4b1b      	ldr	r3, [pc, #108]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 8016742:	2220      	movs	r2, #32
 8016744:	2120      	movs	r1, #32
 8016746:	468c      	mov	ip, r1
 8016748:	2108      	movs	r1, #8
 801674a:	4688      	mov	r8, r1
 801674c:	44b8      	add	r8, r7
 801674e:	44c4      	add	ip, r8
 8016750:	4462      	add	r2, ip
 8016752:	2155      	movs	r1, #85	; 0x55
 8016754:	7812      	ldrb	r2, [r2, #0]
 8016756:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8016758:	4b15      	ldr	r3, [pc, #84]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 801675a:	2224      	movs	r2, #36	; 0x24
 801675c:	2120      	movs	r1, #32
 801675e:	468c      	mov	ip, r1
 8016760:	2108      	movs	r1, #8
 8016762:	4688      	mov	r8, r1
 8016764:	44b8      	add	r8, r7
 8016766:	44c4      	add	ip, r8
 8016768:	4462      	add	r2, ip
 801676a:	2156      	movs	r1, #86	; 0x56
 801676c:	7812      	ldrb	r2, [r2, #0]
 801676e:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2b0c      	cmp	r3, #12
 8016774:	d902      	bls.n	801677c <SX1276SetRxConfig+0x308>
                datarate = 12;
 8016776:	230c      	movs	r3, #12
 8016778:	607b      	str	r3, [r7, #4]
 801677a:	e004      	b.n	8016786 <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2b05      	cmp	r3, #5
 8016780:	d801      	bhi.n	8016786 <SX1276SetRxConfig+0x312>
                datarate = 6;
 8016782:	2306      	movs	r3, #6
 8016784:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	2b07      	cmp	r3, #7
 801678a:	d105      	bne.n	8016798 <SX1276SetRxConfig+0x324>
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2b0b      	cmp	r3, #11
 8016790:	d008      	beq.n	80167a4 <SX1276SetRxConfig+0x330>
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b0c      	cmp	r3, #12
 8016796:	d005      	beq.n	80167a4 <SX1276SetRxConfig+0x330>
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	2b08      	cmp	r3, #8
 801679c:	d112      	bne.n	80167c4 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b0c      	cmp	r3, #12
 80167a2:	d10f      	bne.n	80167c4 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80167a4:	4b02      	ldr	r3, [pc, #8]	; (80167b0 <SX1276SetRxConfig+0x33c>)
 80167a6:	224c      	movs	r2, #76	; 0x4c
 80167a8:	2101      	movs	r1, #1
 80167aa:	5499      	strb	r1, [r3, r2]
 80167ac:	e00e      	b.n	80167cc <SX1276SetRxConfig+0x358>
 80167ae:	46c0      	nop			; (mov r8, r8)
 80167b0:	200015ec 	.word	0x200015ec
 80167b4:	3ff00000 	.word	0x3ff00000
 80167b8:	40200000 	.word	0x40200000
 80167bc:	408f4000 	.word	0x408f4000
 80167c0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80167c4:	4b77      	ldr	r3, [pc, #476]	; (80169a4 <SX1276SetRxConfig+0x530>)
 80167c6:	224c      	movs	r2, #76	; 0x4c
 80167c8:	2100      	movs	r1, #0
 80167ca:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80167cc:	201d      	movs	r0, #29
 80167ce:	f001 f929 	bl	8017a24 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	011b      	lsls	r3, r3, #4
 80167d8:	b2da      	uxtb	r2, r3
 80167da:	230e      	movs	r3, #14
 80167dc:	18fb      	adds	r3, r7, r3
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	18db      	adds	r3, r3, r3
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	4313      	orrs	r3, r2
 80167e6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80167e8:	242c      	movs	r4, #44	; 0x2c
 80167ea:	2608      	movs	r6, #8
 80167ec:	19bb      	adds	r3, r7, r6
 80167ee:	191b      	adds	r3, r3, r4
 80167f0:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80167f2:	4313      	orrs	r3, r2
 80167f4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80167f6:	0019      	movs	r1, r3
 80167f8:	201d      	movs	r0, #29
 80167fa:	f001 f8ff 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80167fe:	201e      	movs	r0, #30
 8016800:	f001 f910 	bl	8017a24 <SX1276Read>
 8016804:	0003      	movs	r3, r0
 8016806:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8016808:	2308      	movs	r3, #8
 801680a:	4013      	ands	r3, r2
 801680c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	b2db      	uxtb	r3, r3
 8016812:	011b      	lsls	r3, r3, #4
 8016814:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8016816:	4313      	orrs	r3, r2
 8016818:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801681a:	2334      	movs	r3, #52	; 0x34
 801681c:	2108      	movs	r1, #8
 801681e:	468c      	mov	ip, r1
 8016820:	44bc      	add	ip, r7
 8016822:	4463      	add	r3, ip
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	009b      	lsls	r3, r3, #2
 8016828:	b2db      	uxtb	r3, r3
 801682a:	4313      	orrs	r3, r2
 801682c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 801682e:	2528      	movs	r5, #40	; 0x28
 8016830:	19bb      	adds	r3, r7, r6
 8016832:	195b      	adds	r3, r3, r5
 8016834:	881b      	ldrh	r3, [r3, #0]
 8016836:	0a1b      	lsrs	r3, r3, #8
 8016838:	b29b      	uxth	r3, r3
 801683a:	b2db      	uxtb	r3, r3
 801683c:	2103      	movs	r1, #3
 801683e:	400b      	ands	r3, r1
 8016840:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8016842:	4313      	orrs	r3, r2
 8016844:	b2db      	uxtb	r3, r3
 8016846:	0019      	movs	r1, r3
 8016848:	201e      	movs	r0, #30
 801684a:	f001 f8d7 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801684e:	2026      	movs	r0, #38	; 0x26
 8016850:	f001 f8e8 	bl	8017a24 <SX1276Read>
 8016854:	0003      	movs	r3, r0
 8016856:	b25b      	sxtb	r3, r3
 8016858:	2208      	movs	r2, #8
 801685a:	4393      	bics	r3, r2
 801685c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801685e:	4b51      	ldr	r3, [pc, #324]	; (80169a4 <SX1276SetRxConfig+0x530>)
 8016860:	214c      	movs	r1, #76	; 0x4c
 8016862:	5c5b      	ldrb	r3, [r3, r1]
 8016864:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8016866:	b25b      	sxtb	r3, r3
 8016868:	4313      	orrs	r3, r2
 801686a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801686c:	b2db      	uxtb	r3, r3
 801686e:	0019      	movs	r1, r3
 8016870:	2026      	movs	r0, #38	; 0x26
 8016872:	f001 f8c3 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8016876:	19bb      	adds	r3, r7, r6
 8016878:	195b      	adds	r3, r3, r5
 801687a:	881b      	ldrh	r3, [r3, #0]
 801687c:	b2db      	uxtb	r3, r3
 801687e:	0019      	movs	r1, r3
 8016880:	201f      	movs	r0, #31
 8016882:	f001 f8bb 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8016886:	2524      	movs	r5, #36	; 0x24
 8016888:	19bb      	adds	r3, r7, r6
 801688a:	195b      	adds	r3, r3, r5
 801688c:	881b      	ldrh	r3, [r3, #0]
 801688e:	0a1b      	lsrs	r3, r3, #8
 8016890:	b29b      	uxth	r3, r3
 8016892:	b2db      	uxtb	r3, r3
 8016894:	0019      	movs	r1, r3
 8016896:	2020      	movs	r0, #32
 8016898:	f001 f8b0 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801689c:	19bb      	adds	r3, r7, r6
 801689e:	195b      	adds	r3, r3, r5
 80168a0:	881b      	ldrh	r3, [r3, #0]
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	0019      	movs	r1, r3
 80168a6:	2021      	movs	r0, #33	; 0x21
 80168a8:	f001 f8a8 	bl	80179fc <SX1276Write>
            if( fixLen == 1 )
 80168ac:	19bb      	adds	r3, r7, r6
 80168ae:	191b      	adds	r3, r3, r4
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d009      	beq.n	80168ca <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80168b6:	2330      	movs	r3, #48	; 0x30
 80168b8:	2208      	movs	r2, #8
 80168ba:	4694      	mov	ip, r2
 80168bc:	44bc      	add	ip, r7
 80168be:	4463      	add	r3, ip
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	0019      	movs	r1, r3
 80168c4:	2022      	movs	r0, #34	; 0x22
 80168c6:	f001 f899 	bl	80179fc <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80168ca:	4b36      	ldr	r3, [pc, #216]	; (80169a4 <SX1276SetRxConfig+0x530>)
 80168cc:	2253      	movs	r2, #83	; 0x53
 80168ce:	5c9b      	ldrb	r3, [r3, r2]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d013      	beq.n	80168fc <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80168d4:	2044      	movs	r0, #68	; 0x44
 80168d6:	f001 f8a5 	bl	8017a24 <SX1276Read>
 80168da:	0003      	movs	r3, r0
 80168dc:	001a      	movs	r2, r3
 80168de:	2380      	movs	r3, #128	; 0x80
 80168e0:	425b      	negs	r3, r3
 80168e2:	4313      	orrs	r3, r2
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	0019      	movs	r1, r3
 80168e8:	2044      	movs	r0, #68	; 0x44
 80168ea:	f001 f887 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80168ee:	4b2d      	ldr	r3, [pc, #180]	; (80169a4 <SX1276SetRxConfig+0x530>)
 80168f0:	2254      	movs	r2, #84	; 0x54
 80168f2:	5c9b      	ldrb	r3, [r3, r2]
 80168f4:	0019      	movs	r1, r3
 80168f6:	2024      	movs	r0, #36	; 0x24
 80168f8:	f001 f880 	bl	80179fc <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	2b09      	cmp	r3, #9
 8016900:	d10d      	bne.n	801691e <SX1276SetRxConfig+0x4aa>
 8016902:	4b28      	ldr	r3, [pc, #160]	; (80169a4 <SX1276SetRxConfig+0x530>)
 8016904:	689b      	ldr	r3, [r3, #8]
 8016906:	4a28      	ldr	r2, [pc, #160]	; (80169a8 <SX1276SetRxConfig+0x534>)
 8016908:	4293      	cmp	r3, r2
 801690a:	d908      	bls.n	801691e <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801690c:	2102      	movs	r1, #2
 801690e:	2036      	movs	r0, #54	; 0x36
 8016910:	f001 f874 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8016914:	2164      	movs	r1, #100	; 0x64
 8016916:	203a      	movs	r0, #58	; 0x3a
 8016918:	f001 f870 	bl	80179fc <SX1276Write>
 801691c:	e00f      	b.n	801693e <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	2b09      	cmp	r3, #9
 8016922:	d108      	bne.n	8016936 <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8016924:	2102      	movs	r1, #2
 8016926:	2036      	movs	r0, #54	; 0x36
 8016928:	f001 f868 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 801692c:	217f      	movs	r1, #127	; 0x7f
 801692e:	203a      	movs	r0, #58	; 0x3a
 8016930:	f001 f864 	bl	80179fc <SX1276Write>
 8016934:	e003      	b.n	801693e <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8016936:	2103      	movs	r1, #3
 8016938:	2036      	movs	r0, #54	; 0x36
 801693a:	f001 f85f 	bl	80179fc <SX1276Write>
            if( datarate == 6 )
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2b06      	cmp	r3, #6
 8016942:	d114      	bne.n	801696e <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016944:	2031      	movs	r0, #49	; 0x31
 8016946:	f001 f86d 	bl	8017a24 <SX1276Read>
 801694a:	0003      	movs	r3, r0
 801694c:	b25b      	sxtb	r3, r3
 801694e:	2207      	movs	r2, #7
 8016950:	4393      	bics	r3, r2
 8016952:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016954:	2205      	movs	r2, #5
 8016956:	4313      	orrs	r3, r2
 8016958:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801695a:	b2db      	uxtb	r3, r3
 801695c:	0019      	movs	r1, r3
 801695e:	2031      	movs	r0, #49	; 0x31
 8016960:	f001 f84c 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016964:	210c      	movs	r1, #12
 8016966:	2037      	movs	r0, #55	; 0x37
 8016968:	f001 f848 	bl	80179fc <SX1276Write>
        break;
 801696c:	e013      	b.n	8016996 <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801696e:	2031      	movs	r0, #49	; 0x31
 8016970:	f001 f858 	bl	8017a24 <SX1276Read>
 8016974:	0003      	movs	r3, r0
 8016976:	b25b      	sxtb	r3, r3
 8016978:	2207      	movs	r2, #7
 801697a:	4393      	bics	r3, r2
 801697c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801697e:	2203      	movs	r2, #3
 8016980:	4313      	orrs	r3, r2
 8016982:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016984:	b2db      	uxtb	r3, r3
 8016986:	0019      	movs	r1, r3
 8016988:	2031      	movs	r0, #49	; 0x31
 801698a:	f001 f837 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801698e:	210a      	movs	r1, #10
 8016990:	2037      	movs	r0, #55	; 0x37
 8016992:	f001 f833 	bl	80179fc <SX1276Write>
        break;
 8016996:	46c0      	nop			; (mov r8, r8)
}
 8016998:	46c0      	nop			; (mov r8, r8)
 801699a:	46bd      	mov	sp, r7
 801699c:	b004      	add	sp, #16
 801699e:	bc04      	pop	{r2}
 80169a0:	4690      	mov	r8, r2
 80169a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169a4:	200015ec 	.word	0x200015ec
 80169a8:	1f4add40 	.word	0x1f4add40

080169ac <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80169ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169ae:	b085      	sub	sp, #20
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60ba      	str	r2, [r7, #8]
 80169b4:	607b      	str	r3, [r7, #4]
 80169b6:	240f      	movs	r4, #15
 80169b8:	193b      	adds	r3, r7, r4
 80169ba:	1c02      	adds	r2, r0, #0
 80169bc:	701a      	strb	r2, [r3, #0]
 80169be:	250e      	movs	r5, #14
 80169c0:	197b      	adds	r3, r7, r5
 80169c2:	1c0a      	adds	r2, r1, #0
 80169c4:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 80169c6:	193b      	adds	r3, r7, r4
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	0018      	movs	r0, r3
 80169cc:	f000 ffbe 	bl	801794c <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 80169d0:	4be5      	ldr	r3, [pc, #916]	; (8016d68 <SX1276SetTxConfig+0x3bc>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	68db      	ldr	r3, [r3, #12]
 80169d6:	197a      	adds	r2, r7, r5
 80169d8:	7812      	ldrb	r2, [r2, #0]
 80169da:	b252      	sxtb	r2, r2
 80169dc:	0010      	movs	r0, r2
 80169de:	4798      	blx	r3

    switch( modem )
 80169e0:	193b      	adds	r3, r7, r4
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d003      	beq.n	80169f0 <SX1276SetTxConfig+0x44>
 80169e8:	2b01      	cmp	r3, #1
 80169ea:	d100      	bne.n	80169ee <SX1276SetTxConfig+0x42>
 80169ec:	e0b1      	b.n	8016b52 <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80169ee:	e1d8      	b.n	8016da2 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 80169f0:	4bde      	ldr	r3, [pc, #888]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 80169f2:	220e      	movs	r2, #14
 80169f4:	18ba      	adds	r2, r7, r2
 80169f6:	7812      	ldrb	r2, [r2, #0]
 80169f8:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80169fa:	4bdc      	ldr	r3, [pc, #880]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 80169fc:	68ba      	ldr	r2, [r7, #8]
 80169fe:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8016a00:	4bda      	ldr	r3, [pc, #872]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8016a06:	4bd9      	ldr	r3, [pc, #868]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a0a:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8016a0c:	4bd7      	ldr	r3, [pc, #860]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a0e:	2528      	movs	r5, #40	; 0x28
 8016a10:	2408      	movs	r4, #8
 8016a12:	193a      	adds	r2, r7, r4
 8016a14:	1952      	adds	r2, r2, r5
 8016a16:	8812      	ldrh	r2, [r2, #0]
 8016a18:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8016a1a:	4bd4      	ldr	r3, [pc, #848]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a1c:	262c      	movs	r6, #44	; 0x2c
 8016a1e:	193a      	adds	r2, r7, r4
 8016a20:	1992      	adds	r2, r2, r6
 8016a22:	2122      	movs	r1, #34	; 0x22
 8016a24:	7812      	ldrb	r2, [r2, #0]
 8016a26:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8016a28:	4bd0      	ldr	r3, [pc, #832]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a2a:	2230      	movs	r2, #48	; 0x30
 8016a2c:	2108      	movs	r1, #8
 8016a2e:	468c      	mov	ip, r1
 8016a30:	44bc      	add	ip, r7
 8016a32:	4462      	add	r2, ip
 8016a34:	2124      	movs	r1, #36	; 0x24
 8016a36:	7812      	ldrb	r2, [r2, #0]
 8016a38:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8016a3a:	4bcc      	ldr	r3, [pc, #816]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a3c:	223c      	movs	r2, #60	; 0x3c
 8016a3e:	2108      	movs	r1, #8
 8016a40:	468c      	mov	ip, r1
 8016a42:	44bc      	add	ip, r7
 8016a44:	4462      	add	r2, ip
 8016a46:	2125      	movs	r1, #37	; 0x25
 8016a48:	7812      	ldrb	r2, [r2, #0]
 8016a4a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8016a4c:	4bc7      	ldr	r3, [pc, #796]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016a50:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8016a52:	68b8      	ldr	r0, [r7, #8]
 8016a54:	f7eb fdd2 	bl	80025fc <__aeabi_ui2d>
 8016a58:	2200      	movs	r2, #0
 8016a5a:	4bc5      	ldr	r3, [pc, #788]	; (8016d70 <SX1276SetTxConfig+0x3c4>)
 8016a5c:	f7ea fb9a 	bl	8001194 <__aeabi_ddiv>
 8016a60:	0003      	movs	r3, r0
 8016a62:	000c      	movs	r4, r1
 8016a64:	0018      	movs	r0, r3
 8016a66:	0021      	movs	r1, r4
 8016a68:	f7e9 fd78 	bl	800055c <__aeabi_d2uiz>
 8016a6c:	0003      	movs	r3, r0
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	0a1b      	lsrs	r3, r3, #8
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	0019      	movs	r1, r3
 8016a7a:	2004      	movs	r0, #4
 8016a7c:	f000 ffbe 	bl	80179fc <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	0019      	movs	r1, r3
 8016a86:	2005      	movs	r0, #5
 8016a88:	f000 ffb8 	bl	80179fc <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8016a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a8e:	f7eb fdb5 	bl	80025fc <__aeabi_ui2d>
 8016a92:	0003      	movs	r3, r0
 8016a94:	000c      	movs	r4, r1
 8016a96:	001a      	movs	r2, r3
 8016a98:	0023      	movs	r3, r4
 8016a9a:	2000      	movs	r0, #0
 8016a9c:	49b5      	ldr	r1, [pc, #724]	; (8016d74 <SX1276SetTxConfig+0x3c8>)
 8016a9e:	f7ea fb79 	bl	8001194 <__aeabi_ddiv>
 8016aa2:	0003      	movs	r3, r0
 8016aa4:	000c      	movs	r4, r1
 8016aa6:	0018      	movs	r0, r3
 8016aa8:	0021      	movs	r1, r4
 8016aaa:	f7e9 fd57 	bl	800055c <__aeabi_d2uiz>
 8016aae:	0003      	movs	r3, r0
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8016ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab6:	0a1b      	lsrs	r3, r3, #8
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	0019      	movs	r1, r3
 8016abc:	2002      	movs	r0, #2
 8016abe:	f000 ff9d 	bl	80179fc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8016ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	0019      	movs	r1, r3
 8016ac8:	2003      	movs	r0, #3
 8016aca:	f000 ff97 	bl	80179fc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8016ace:	2408      	movs	r4, #8
 8016ad0:	193b      	adds	r3, r7, r4
 8016ad2:	195b      	adds	r3, r3, r5
 8016ad4:	881b      	ldrh	r3, [r3, #0]
 8016ad6:	0a1b      	lsrs	r3, r3, #8
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	0019      	movs	r1, r3
 8016ade:	2025      	movs	r0, #37	; 0x25
 8016ae0:	f000 ff8c 	bl	80179fc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8016ae4:	193b      	adds	r3, r7, r4
 8016ae6:	195b      	adds	r3, r3, r5
 8016ae8:	881b      	ldrh	r3, [r3, #0]
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	0019      	movs	r1, r3
 8016aee:	2026      	movs	r0, #38	; 0x26
 8016af0:	f000 ff84 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8016af4:	2030      	movs	r0, #48	; 0x30
 8016af6:	f000 ff95 	bl	8017a24 <SX1276Read>
 8016afa:	0003      	movs	r3, r0
 8016afc:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8016afe:	226f      	movs	r2, #111	; 0x6f
 8016b00:	4013      	ands	r3, r2
 8016b02:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8016b04:	193b      	adds	r3, r7, r4
 8016b06:	199b      	adds	r3, r3, r6
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d001      	beq.n	8016b12 <SX1276SetTxConfig+0x166>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	e001      	b.n	8016b16 <SX1276SetTxConfig+0x16a>
 8016b12:	2380      	movs	r3, #128	; 0x80
 8016b14:	425b      	negs	r3, r3
 8016b16:	4313      	orrs	r3, r2
 8016b18:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8016b1a:	2330      	movs	r3, #48	; 0x30
 8016b1c:	2108      	movs	r1, #8
 8016b1e:	468c      	mov	ip, r1
 8016b20:	44bc      	add	ip, r7
 8016b22:	4463      	add	r3, ip
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8016b28:	b25b      	sxtb	r3, r3
 8016b2a:	4313      	orrs	r3, r2
 8016b2c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	0019      	movs	r1, r3
 8016b32:	2030      	movs	r0, #48	; 0x30
 8016b34:	f000 ff62 	bl	80179fc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8016b38:	2031      	movs	r0, #49	; 0x31
 8016b3a:	f000 ff73 	bl	8017a24 <SX1276Read>
 8016b3e:	0003      	movs	r3, r0
 8016b40:	001a      	movs	r2, r3
 8016b42:	2340      	movs	r3, #64	; 0x40
 8016b44:	4313      	orrs	r3, r2
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	0019      	movs	r1, r3
 8016b4a:	2031      	movs	r0, #49	; 0x31
 8016b4c:	f000 ff56 	bl	80179fc <SX1276Write>
        break;
 8016b50:	e127      	b.n	8016da2 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 8016b52:	4b86      	ldr	r3, [pc, #536]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016b54:	220e      	movs	r2, #14
 8016b56:	18ba      	adds	r2, r7, r2
 8016b58:	2140      	movs	r1, #64	; 0x40
 8016b5a:	7812      	ldrb	r2, [r2, #0]
 8016b5c:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2b02      	cmp	r3, #2
 8016b62:	d900      	bls.n	8016b66 <SX1276SetTxConfig+0x1ba>
                while( 1 );
 8016b64:	e7fe      	b.n	8016b64 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	3307      	adds	r3, #7
 8016b6a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8016b6c:	4b7f      	ldr	r3, [pc, #508]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8016b72:	4b7e      	ldr	r3, [pc, #504]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b76:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8016b78:	4b7c      	ldr	r3, [pc, #496]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016b7a:	2224      	movs	r2, #36	; 0x24
 8016b7c:	2108      	movs	r1, #8
 8016b7e:	468c      	mov	ip, r1
 8016b80:	44bc      	add	ip, r7
 8016b82:	4462      	add	r2, ip
 8016b84:	214d      	movs	r1, #77	; 0x4d
 8016b86:	7812      	ldrb	r2, [r2, #0]
 8016b88:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8016b8a:	4b78      	ldr	r3, [pc, #480]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016b8c:	2228      	movs	r2, #40	; 0x28
 8016b8e:	2108      	movs	r1, #8
 8016b90:	468c      	mov	ip, r1
 8016b92:	44bc      	add	ip, r7
 8016b94:	4462      	add	r2, ip
 8016b96:	214e      	movs	r1, #78	; 0x4e
 8016b98:	8812      	ldrh	r2, [r2, #0]
 8016b9a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8016b9c:	4b73      	ldr	r3, [pc, #460]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016b9e:	222c      	movs	r2, #44	; 0x2c
 8016ba0:	2108      	movs	r1, #8
 8016ba2:	468c      	mov	ip, r1
 8016ba4:	44bc      	add	ip, r7
 8016ba6:	4462      	add	r2, ip
 8016ba8:	2150      	movs	r1, #80	; 0x50
 8016baa:	7812      	ldrb	r2, [r2, #0]
 8016bac:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8016bae:	4b6f      	ldr	r3, [pc, #444]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016bb0:	2234      	movs	r2, #52	; 0x34
 8016bb2:	2108      	movs	r1, #8
 8016bb4:	468c      	mov	ip, r1
 8016bb6:	44bc      	add	ip, r7
 8016bb8:	4462      	add	r2, ip
 8016bba:	2153      	movs	r1, #83	; 0x53
 8016bbc:	7812      	ldrb	r2, [r2, #0]
 8016bbe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8016bc0:	4b6a      	ldr	r3, [pc, #424]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016bc2:	2238      	movs	r2, #56	; 0x38
 8016bc4:	2108      	movs	r1, #8
 8016bc6:	468c      	mov	ip, r1
 8016bc8:	44bc      	add	ip, r7
 8016bca:	4462      	add	r2, ip
 8016bcc:	2154      	movs	r1, #84	; 0x54
 8016bce:	7812      	ldrb	r2, [r2, #0]
 8016bd0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8016bd2:	4b66      	ldr	r3, [pc, #408]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016bd4:	2230      	movs	r2, #48	; 0x30
 8016bd6:	2108      	movs	r1, #8
 8016bd8:	468c      	mov	ip, r1
 8016bda:	44bc      	add	ip, r7
 8016bdc:	4462      	add	r2, ip
 8016bde:	2152      	movs	r1, #82	; 0x52
 8016be0:	7812      	ldrb	r2, [r2, #0]
 8016be2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8016be4:	4b61      	ldr	r3, [pc, #388]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016be6:	223c      	movs	r2, #60	; 0x3c
 8016be8:	2108      	movs	r1, #8
 8016bea:	468c      	mov	ip, r1
 8016bec:	44bc      	add	ip, r7
 8016bee:	4462      	add	r2, ip
 8016bf0:	2155      	movs	r1, #85	; 0x55
 8016bf2:	7812      	ldrb	r2, [r2, #0]
 8016bf4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8016bf6:	4b5d      	ldr	r3, [pc, #372]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bfa:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8016bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bfe:	2b0c      	cmp	r3, #12
 8016c00:	d902      	bls.n	8016c08 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 8016c02:	230c      	movs	r3, #12
 8016c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c06:	e004      	b.n	8016c12 <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 8016c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c0a:	2b05      	cmp	r3, #5
 8016c0c:	d801      	bhi.n	8016c12 <SX1276SetTxConfig+0x266>
                datarate = 6;
 8016c0e:	2306      	movs	r3, #6
 8016c10:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2b07      	cmp	r3, #7
 8016c16:	d105      	bne.n	8016c24 <SX1276SetTxConfig+0x278>
 8016c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1a:	2b0b      	cmp	r3, #11
 8016c1c:	d008      	beq.n	8016c30 <SX1276SetTxConfig+0x284>
 8016c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c20:	2b0c      	cmp	r3, #12
 8016c22:	d005      	beq.n	8016c30 <SX1276SetTxConfig+0x284>
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b08      	cmp	r3, #8
 8016c28:	d107      	bne.n	8016c3a <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8016c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c2c:	2b0c      	cmp	r3, #12
 8016c2e:	d104      	bne.n	8016c3a <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8016c30:	4b4e      	ldr	r3, [pc, #312]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016c32:	224c      	movs	r2, #76	; 0x4c
 8016c34:	2101      	movs	r1, #1
 8016c36:	5499      	strb	r1, [r3, r2]
 8016c38:	e003      	b.n	8016c42 <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8016c3a:	4b4c      	ldr	r3, [pc, #304]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016c3c:	224c      	movs	r2, #76	; 0x4c
 8016c3e:	2100      	movs	r1, #0
 8016c40:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8016c42:	4b4a      	ldr	r3, [pc, #296]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016c44:	2253      	movs	r2, #83	; 0x53
 8016c46:	5c9b      	ldrb	r3, [r3, r2]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d013      	beq.n	8016c74 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8016c4c:	2044      	movs	r0, #68	; 0x44
 8016c4e:	f000 fee9 	bl	8017a24 <SX1276Read>
 8016c52:	0003      	movs	r3, r0
 8016c54:	001a      	movs	r2, r3
 8016c56:	2380      	movs	r3, #128	; 0x80
 8016c58:	425b      	negs	r3, r3
 8016c5a:	4313      	orrs	r3, r2
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	0019      	movs	r1, r3
 8016c60:	2044      	movs	r0, #68	; 0x44
 8016c62:	f000 fecb 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8016c66:	4b41      	ldr	r3, [pc, #260]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016c68:	2254      	movs	r2, #84	; 0x54
 8016c6a:	5c9b      	ldrb	r3, [r3, r2]
 8016c6c:	0019      	movs	r1, r3
 8016c6e:	2024      	movs	r0, #36	; 0x24
 8016c70:	f000 fec4 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8016c74:	201d      	movs	r0, #29
 8016c76:	f000 fed5 	bl	8017a24 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	011b      	lsls	r3, r3, #4
 8016c80:	b2da      	uxtb	r2, r3
 8016c82:	2324      	movs	r3, #36	; 0x24
 8016c84:	2108      	movs	r1, #8
 8016c86:	468c      	mov	ip, r1
 8016c88:	44bc      	add	ip, r7
 8016c8a:	4463      	add	r3, ip
 8016c8c:	781b      	ldrb	r3, [r3, #0]
 8016c8e:	18db      	adds	r3, r3, r3
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	4313      	orrs	r3, r2
 8016c94:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016c96:	232c      	movs	r3, #44	; 0x2c
 8016c98:	2108      	movs	r1, #8
 8016c9a:	468c      	mov	ip, r1
 8016c9c:	44bc      	add	ip, r7
 8016c9e:	4463      	add	r3, ip
 8016ca0:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8016ca2:	4313      	orrs	r3, r2
 8016ca4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016ca6:	0019      	movs	r1, r3
 8016ca8:	201d      	movs	r0, #29
 8016caa:	f000 fea7 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8016cae:	201e      	movs	r0, #30
 8016cb0:	f000 feb8 	bl	8017a24 <SX1276Read>
 8016cb4:	0003      	movs	r3, r0
 8016cb6:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8016cb8:	230b      	movs	r3, #11
 8016cba:	4013      	ands	r3, r2
 8016cbc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8016cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc0:	b2db      	uxtb	r3, r3
 8016cc2:	011b      	lsls	r3, r3, #4
 8016cc4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8016cc6:	4313      	orrs	r3, r2
 8016cc8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8016cca:	2330      	movs	r3, #48	; 0x30
 8016ccc:	2108      	movs	r1, #8
 8016cce:	468c      	mov	ip, r1
 8016cd0:	44bc      	add	ip, r7
 8016cd2:	4463      	add	r3, ip
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8016cda:	4313      	orrs	r3, r2
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	0019      	movs	r1, r3
 8016ce0:	201e      	movs	r0, #30
 8016ce2:	f000 fe8b 	bl	80179fc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8016ce6:	2026      	movs	r0, #38	; 0x26
 8016ce8:	f000 fe9c 	bl	8017a24 <SX1276Read>
 8016cec:	0003      	movs	r3, r0
 8016cee:	b25b      	sxtb	r3, r3
 8016cf0:	2208      	movs	r2, #8
 8016cf2:	4393      	bics	r3, r2
 8016cf4:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8016cf6:	4b1d      	ldr	r3, [pc, #116]	; (8016d6c <SX1276SetTxConfig+0x3c0>)
 8016cf8:	214c      	movs	r1, #76	; 0x4c
 8016cfa:	5c5b      	ldrb	r3, [r3, r1]
 8016cfc:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8016cfe:	b25b      	sxtb	r3, r3
 8016d00:	4313      	orrs	r3, r2
 8016d02:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8016d04:	b2db      	uxtb	r3, r3
 8016d06:	0019      	movs	r1, r3
 8016d08:	2026      	movs	r0, #38	; 0x26
 8016d0a:	f000 fe77 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8016d0e:	2428      	movs	r4, #40	; 0x28
 8016d10:	2508      	movs	r5, #8
 8016d12:	197b      	adds	r3, r7, r5
 8016d14:	191b      	adds	r3, r3, r4
 8016d16:	881b      	ldrh	r3, [r3, #0]
 8016d18:	0a1b      	lsrs	r3, r3, #8
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	0019      	movs	r1, r3
 8016d20:	2020      	movs	r0, #32
 8016d22:	f000 fe6b 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8016d26:	197b      	adds	r3, r7, r5
 8016d28:	191b      	adds	r3, r3, r4
 8016d2a:	881b      	ldrh	r3, [r3, #0]
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	0019      	movs	r1, r3
 8016d30:	2021      	movs	r0, #33	; 0x21
 8016d32:	f000 fe63 	bl	80179fc <SX1276Write>
            if( datarate == 6 )
 8016d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d38:	2b06      	cmp	r3, #6
 8016d3a:	d11d      	bne.n	8016d78 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016d3c:	2031      	movs	r0, #49	; 0x31
 8016d3e:	f000 fe71 	bl	8017a24 <SX1276Read>
 8016d42:	0003      	movs	r3, r0
 8016d44:	b25b      	sxtb	r3, r3
 8016d46:	2207      	movs	r2, #7
 8016d48:	4393      	bics	r3, r2
 8016d4a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016d4c:	2205      	movs	r2, #5
 8016d4e:	4313      	orrs	r3, r2
 8016d50:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	0019      	movs	r1, r3
 8016d56:	2031      	movs	r0, #49	; 0x31
 8016d58:	f000 fe50 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016d5c:	210c      	movs	r1, #12
 8016d5e:	2037      	movs	r0, #55	; 0x37
 8016d60:	f000 fe4c 	bl	80179fc <SX1276Write>
        break;
 8016d64:	e01c      	b.n	8016da0 <SX1276SetTxConfig+0x3f4>
 8016d66:	46c0      	nop			; (mov r8, r8)
 8016d68:	200011a0 	.word	0x200011a0
 8016d6c:	200015ec 	.word	0x200015ec
 8016d70:	404e8480 	.word	0x404e8480
 8016d74:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8016d78:	2031      	movs	r0, #49	; 0x31
 8016d7a:	f000 fe53 	bl	8017a24 <SX1276Read>
 8016d7e:	0003      	movs	r3, r0
 8016d80:	b25b      	sxtb	r3, r3
 8016d82:	2207      	movs	r2, #7
 8016d84:	4393      	bics	r3, r2
 8016d86:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8016d88:	2203      	movs	r2, #3
 8016d8a:	4313      	orrs	r3, r2
 8016d8c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8016d8e:	b2db      	uxtb	r3, r3
 8016d90:	0019      	movs	r1, r3
 8016d92:	2031      	movs	r0, #49	; 0x31
 8016d94:	f000 fe32 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016d98:	210a      	movs	r1, #10
 8016d9a:	2037      	movs	r0, #55	; 0x37
 8016d9c:	f000 fe2e 	bl	80179fc <SX1276Write>
        break;
 8016da0:	46c0      	nop			; (mov r8, r8)
}
 8016da2:	46c0      	nop			; (mov r8, r8)
 8016da4:	46bd      	mov	sp, r7
 8016da6:	b005      	add	sp, #20
 8016da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016daa:	46c0      	nop			; (mov r8, r8)

08016dac <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8016dac:	b5b0      	push	{r4, r5, r7, lr}
 8016dae:	b094      	sub	sp, #80	; 0x50
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	0002      	movs	r2, r0
 8016db4:	1dfb      	adds	r3, r7, #7
 8016db6:	701a      	strb	r2, [r3, #0]
 8016db8:	1dbb      	adds	r3, r7, #6
 8016dba:	1c0a      	adds	r2, r1, #0
 8016dbc:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8016dc2:	1dfb      	adds	r3, r7, #7
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d003      	beq.n	8016dd2 <SX1276GetTimeOnAir+0x26>
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	d100      	bne.n	8016dd0 <SX1276GetTimeOnAir+0x24>
 8016dce:	e086      	b.n	8016ede <SX1276GetTimeOnAir+0x132>
 8016dd0:	e164      	b.n	801709c <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016dd2:	4bb5      	ldr	r3, [pc, #724]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016dd4:	8c1b      	ldrh	r3, [r3, #32]
 8016dd6:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016dd8:	2027      	movs	r0, #39	; 0x27
 8016dda:	f000 fe23 	bl	8017a24 <SX1276Read>
 8016dde:	0003      	movs	r3, r0
 8016de0:	001a      	movs	r2, r3
 8016de2:	23f8      	movs	r3, #248	; 0xf8
 8016de4:	439a      	bics	r2, r3
 8016de6:	0013      	movs	r3, r2
 8016de8:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016dea:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016dec:	0018      	movs	r0, r3
 8016dee:	f7eb fbcb 	bl	8002588 <__aeabi_i2d>
 8016df2:	0004      	movs	r4, r0
 8016df4:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016df6:	4bac      	ldr	r3, [pc, #688]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016df8:	2222      	movs	r2, #34	; 0x22
 8016dfa:	5c9b      	ldrb	r3, [r3, r2]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d002      	beq.n	8016e06 <SX1276GetTimeOnAir+0x5a>
 8016e00:	2000      	movs	r0, #0
 8016e02:	2100      	movs	r1, #0
 8016e04:	e001      	b.n	8016e0a <SX1276GetTimeOnAir+0x5e>
 8016e06:	2000      	movs	r0, #0
 8016e08:	49a8      	ldr	r1, [pc, #672]	; (80170ac <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016e0a:	0022      	movs	r2, r4
 8016e0c:	002b      	movs	r3, r5
 8016e0e:	f7e9 fea5 	bl	8000b5c <__aeabi_dadd>
 8016e12:	0003      	movs	r3, r0
 8016e14:	000c      	movs	r4, r1
 8016e16:	0025      	movs	r5, r4
 8016e18:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016e1a:	2030      	movs	r0, #48	; 0x30
 8016e1c:	f000 fe02 	bl	8017a24 <SX1276Read>
 8016e20:	0003      	movs	r3, r0
 8016e22:	001a      	movs	r2, r3
 8016e24:	23f9      	movs	r3, #249	; 0xf9
 8016e26:	439a      	bics	r2, r3
 8016e28:	1e13      	subs	r3, r2, #0
 8016e2a:	d002      	beq.n	8016e32 <SX1276GetTimeOnAir+0x86>
 8016e2c:	2000      	movs	r0, #0
 8016e2e:	499f      	ldr	r1, [pc, #636]	; (80170ac <SX1276GetTimeOnAir+0x300>)
 8016e30:	e001      	b.n	8016e36 <SX1276GetTimeOnAir+0x8a>
 8016e32:	2000      	movs	r0, #0
 8016e34:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016e36:	0022      	movs	r2, r4
 8016e38:	002b      	movs	r3, r5
 8016e3a:	f7e9 fe8f 	bl	8000b5c <__aeabi_dadd>
 8016e3e:	0003      	movs	r3, r0
 8016e40:	000c      	movs	r4, r1
 8016e42:	0025      	movs	r5, r4
 8016e44:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016e46:	1dbb      	adds	r3, r7, #6
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	0018      	movs	r0, r3
 8016e4c:	f7eb fb9c 	bl	8002588 <__aeabi_i2d>
 8016e50:	0002      	movs	r2, r0
 8016e52:	000b      	movs	r3, r1
 8016e54:	0020      	movs	r0, r4
 8016e56:	0029      	movs	r1, r5
 8016e58:	f7e9 fe80 	bl	8000b5c <__aeabi_dadd>
 8016e5c:	0003      	movs	r3, r0
 8016e5e:	000c      	movs	r4, r1
 8016e60:	0025      	movs	r5, r4
 8016e62:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8016e64:	4b90      	ldr	r3, [pc, #576]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016e66:	2224      	movs	r2, #36	; 0x24
 8016e68:	5c9b      	ldrb	r3, [r3, r2]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d003      	beq.n	8016e76 <SX1276GetTimeOnAir+0xca>
 8016e6e:	2000      	movs	r0, #0
 8016e70:	2180      	movs	r1, #128	; 0x80
 8016e72:	05c9      	lsls	r1, r1, #23
 8016e74:	e001      	b.n	8016e7a <SX1276GetTimeOnAir+0xce>
 8016e76:	2000      	movs	r0, #0
 8016e78:	2100      	movs	r1, #0
                                     pktLen +
 8016e7a:	0022      	movs	r2, r4
 8016e7c:	002b      	movs	r3, r5
 8016e7e:	f7e9 fe6d 	bl	8000b5c <__aeabi_dadd>
 8016e82:	0003      	movs	r3, r0
 8016e84:	000c      	movs	r4, r1
 8016e86:	0018      	movs	r0, r3
 8016e88:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	4b88      	ldr	r3, [pc, #544]	; (80170b0 <SX1276GetTimeOnAir+0x304>)
 8016e8e:	f7ea fd8b 	bl	80019a8 <__aeabi_dmul>
 8016e92:	0003      	movs	r3, r0
 8016e94:	000c      	movs	r4, r1
 8016e96:	0025      	movs	r5, r4
 8016e98:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 8016e9a:	4b83      	ldr	r3, [pc, #524]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016e9c:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8016e9e:	0018      	movs	r0, r3
 8016ea0:	f7eb fbac 	bl	80025fc <__aeabi_ui2d>
 8016ea4:	0002      	movs	r2, r0
 8016ea6:	000b      	movs	r3, r1
 8016ea8:	0020      	movs	r0, r4
 8016eaa:	0029      	movs	r1, r5
 8016eac:	f7ea f972 	bl	8001194 <__aeabi_ddiv>
 8016eb0:	0003      	movs	r3, r0
 8016eb2:	000c      	movs	r4, r1
 8016eb4:	0018      	movs	r0, r3
 8016eb6:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016eb8:	2200      	movs	r2, #0
 8016eba:	4b7e      	ldr	r3, [pc, #504]	; (80170b4 <SX1276GetTimeOnAir+0x308>)
 8016ebc:	f7ea fd74 	bl	80019a8 <__aeabi_dmul>
 8016ec0:	0003      	movs	r3, r0
 8016ec2:	000c      	movs	r4, r1
 8016ec4:	0018      	movs	r0, r3
 8016ec6:	0021      	movs	r1, r4
 8016ec8:	f009 fb68 	bl	802059c <round>
 8016ecc:	0003      	movs	r3, r0
 8016ece:	000c      	movs	r4, r1
 8016ed0:	0018      	movs	r0, r3
 8016ed2:	0021      	movs	r1, r4
 8016ed4:	f7e9 fb42 	bl	800055c <__aeabi_d2uiz>
 8016ed8:	0003      	movs	r3, r0
 8016eda:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8016edc:	e0de      	b.n	801709c <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	2400      	movs	r4, #0
 8016ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8016ee4:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8016ee6:	4b70      	ldr	r3, [pc, #448]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016eea:	2b08      	cmp	r3, #8
 8016eec:	d008      	beq.n	8016f00 <SX1276GetTimeOnAir+0x154>
 8016eee:	2b09      	cmp	r3, #9
 8016ef0:	d00b      	beq.n	8016f0a <SX1276GetTimeOnAir+0x15e>
 8016ef2:	2b07      	cmp	r3, #7
 8016ef4:	d10e      	bne.n	8016f14 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	4c6f      	ldr	r4, [pc, #444]	; (80170b8 <SX1276GetTimeOnAir+0x30c>)
 8016efa:	643b      	str	r3, [r7, #64]	; 0x40
 8016efc:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016efe:	e009      	b.n	8016f14 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 8016f00:	2300      	movs	r3, #0
 8016f02:	4c6e      	ldr	r4, [pc, #440]	; (80170bc <SX1276GetTimeOnAir+0x310>)
 8016f04:	643b      	str	r3, [r7, #64]	; 0x40
 8016f06:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016f08:	e004      	b.n	8016f14 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	4c6c      	ldr	r4, [pc, #432]	; (80170c0 <SX1276GetTimeOnAir+0x314>)
 8016f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8016f10:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016f12:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8016f14:	4b64      	ldr	r3, [pc, #400]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f18:	2201      	movs	r2, #1
 8016f1a:	409a      	lsls	r2, r3
 8016f1c:	0013      	movs	r3, r2
 8016f1e:	0018      	movs	r0, r3
 8016f20:	f7eb fb32 	bl	8002588 <__aeabi_i2d>
 8016f24:	0003      	movs	r3, r0
 8016f26:	000c      	movs	r4, r1
 8016f28:	001a      	movs	r2, r3
 8016f2a:	0023      	movs	r3, r4
 8016f2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f30:	f7ea f930 	bl	8001194 <__aeabi_ddiv>
 8016f34:	0003      	movs	r3, r0
 8016f36:	000c      	movs	r4, r1
 8016f38:	63bb      	str	r3, [r7, #56]	; 0x38
 8016f3a:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8016f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f40:	2000      	movs	r0, #0
 8016f42:	495a      	ldr	r1, [pc, #360]	; (80170ac <SX1276GetTimeOnAir+0x300>)
 8016f44:	f7ea f926 	bl	8001194 <__aeabi_ddiv>
 8016f48:	0003      	movs	r3, r0
 8016f4a:	000c      	movs	r4, r1
 8016f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8016f4e:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8016f50:	4b55      	ldr	r3, [pc, #340]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016f52:	224e      	movs	r2, #78	; 0x4e
 8016f54:	5a9b      	ldrh	r3, [r3, r2]
 8016f56:	0018      	movs	r0, r3
 8016f58:	f7eb fb16 	bl	8002588 <__aeabi_i2d>
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	4b59      	ldr	r3, [pc, #356]	; (80170c4 <SX1276GetTimeOnAir+0x318>)
 8016f60:	f7e9 fdfc 	bl	8000b5c <__aeabi_dadd>
 8016f64:	0003      	movs	r3, r0
 8016f66:	000c      	movs	r4, r1
 8016f68:	001a      	movs	r2, r3
 8016f6a:	0023      	movs	r3, r4
 8016f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016f70:	f7ea fd1a 	bl	80019a8 <__aeabi_dmul>
 8016f74:	0003      	movs	r3, r0
 8016f76:	000c      	movs	r4, r1
 8016f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f7a:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016f7c:	1dbb      	adds	r3, r7, #6
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	00db      	lsls	r3, r3, #3
 8016f82:	001a      	movs	r2, r3
 8016f84:	4b48      	ldr	r3, [pc, #288]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f88:	009b      	lsls	r3, r3, #2
 8016f8a:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016f8c:	4a46      	ldr	r2, [pc, #280]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016f8e:	2152      	movs	r1, #82	; 0x52
 8016f90:	5c52      	ldrb	r2, [r2, r1]
 8016f92:	0112      	lsls	r2, r2, #4
 8016f94:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8016f96:	4b44      	ldr	r3, [pc, #272]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016f98:	2150      	movs	r1, #80	; 0x50
 8016f9a:	5c5b      	ldrb	r3, [r3, r1]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d001      	beq.n	8016fa4 <SX1276GetTimeOnAir+0x1f8>
 8016fa0:	2314      	movs	r3, #20
 8016fa2:	e000      	b.n	8016fa6 <SX1276GetTimeOnAir+0x1fa>
 8016fa4:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016fa6:	1ad3      	subs	r3, r2, r3
 8016fa8:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016faa:	0018      	movs	r0, r3
 8016fac:	f7eb fb26 	bl	80025fc <__aeabi_ui2d>
 8016fb0:	0004      	movs	r4, r0
 8016fb2:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016fb4:	4b3c      	ldr	r3, [pc, #240]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016fb8:	4b3b      	ldr	r3, [pc, #236]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016fba:	214c      	movs	r1, #76	; 0x4c
 8016fbc:	5c5b      	ldrb	r3, [r3, r1]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d001      	beq.n	8016fc6 <SX1276GetTimeOnAir+0x21a>
 8016fc2:	2302      	movs	r3, #2
 8016fc4:	e000      	b.n	8016fc8 <SX1276GetTimeOnAir+0x21c>
 8016fc6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016fc8:	1ad3      	subs	r3, r2, r3
 8016fca:	009b      	lsls	r3, r3, #2
 8016fcc:	0018      	movs	r0, r3
 8016fce:	f7eb fb15 	bl	80025fc <__aeabi_ui2d>
 8016fd2:	0002      	movs	r2, r0
 8016fd4:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016fd6:	0020      	movs	r0, r4
 8016fd8:	0029      	movs	r1, r5
 8016fda:	f7ea f8db 	bl	8001194 <__aeabi_ddiv>
 8016fde:	0003      	movs	r3, r0
 8016fe0:	000c      	movs	r4, r1
 8016fe2:	0018      	movs	r0, r3
 8016fe4:	0021      	movs	r1, r4
 8016fe6:	f009 f9d5 	bl	8020394 <ceil>
 8016fea:	0004      	movs	r4, r0
 8016fec:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8016fee:	4b2e      	ldr	r3, [pc, #184]	; (80170a8 <SX1276GetTimeOnAir+0x2fc>)
 8016ff0:	224d      	movs	r2, #77	; 0x4d
 8016ff2:	5c9b      	ldrb	r3, [r3, r2]
 8016ff4:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016ff6:	0018      	movs	r0, r3
 8016ff8:	f7eb fac6 	bl	8002588 <__aeabi_i2d>
 8016ffc:	0002      	movs	r2, r0
 8016ffe:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8017000:	0020      	movs	r0, r4
 8017002:	0029      	movs	r1, r5
 8017004:	f7ea fcd0 	bl	80019a8 <__aeabi_dmul>
 8017008:	0003      	movs	r3, r0
 801700a:	000c      	movs	r4, r1
 801700c:	623b      	str	r3, [r7, #32]
 801700e:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8017010:	2200      	movs	r2, #0
 8017012:	2300      	movs	r3, #0
 8017014:	6a38      	ldr	r0, [r7, #32]
 8017016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017018:	f7e9 fa1e 	bl	8000458 <__aeabi_dcmpgt>
 801701c:	1e03      	subs	r3, r0, #0
 801701e:	d008      	beq.n	8017032 <SX1276GetTimeOnAir+0x286>
 8017020:	2200      	movs	r2, #0
 8017022:	4b23      	ldr	r3, [pc, #140]	; (80170b0 <SX1276GetTimeOnAir+0x304>)
 8017024:	6a38      	ldr	r0, [r7, #32]
 8017026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017028:	f7e9 fd98 	bl	8000b5c <__aeabi_dadd>
 801702c:	0003      	movs	r3, r0
 801702e:	000c      	movs	r4, r1
 8017030:	e001      	b.n	8017036 <SX1276GetTimeOnAir+0x28a>
 8017032:	2300      	movs	r3, #0
 8017034:	4c1e      	ldr	r4, [pc, #120]	; (80170b0 <SX1276GetTimeOnAir+0x304>)
 8017036:	61bb      	str	r3, [r7, #24]
 8017038:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 801703a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801703e:	69b8      	ldr	r0, [r7, #24]
 8017040:	69f9      	ldr	r1, [r7, #28]
 8017042:	f7ea fcb1 	bl	80019a8 <__aeabi_dmul>
 8017046:	0003      	movs	r3, r0
 8017048:	000c      	movs	r4, r1
 801704a:	613b      	str	r3, [r7, #16]
 801704c:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 801704e:	693a      	ldr	r2, [r7, #16]
 8017050:	697b      	ldr	r3, [r7, #20]
 8017052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017056:	f7e9 fd81 	bl	8000b5c <__aeabi_dadd>
 801705a:	0003      	movs	r3, r0
 801705c:	000c      	movs	r4, r1
 801705e:	60bb      	str	r3, [r7, #8]
 8017060:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8017062:	2200      	movs	r2, #0
 8017064:	4b13      	ldr	r3, [pc, #76]	; (80170b4 <SX1276GetTimeOnAir+0x308>)
 8017066:	68b8      	ldr	r0, [r7, #8]
 8017068:	68f9      	ldr	r1, [r7, #12]
 801706a:	f7ea fc9d 	bl	80019a8 <__aeabi_dmul>
 801706e:	0003      	movs	r3, r0
 8017070:	000c      	movs	r4, r1
 8017072:	0018      	movs	r0, r3
 8017074:	0021      	movs	r1, r4
 8017076:	4a14      	ldr	r2, [pc, #80]	; (80170c8 <SX1276GetTimeOnAir+0x31c>)
 8017078:	4b14      	ldr	r3, [pc, #80]	; (80170cc <SX1276GetTimeOnAir+0x320>)
 801707a:	f7e9 fd6f 	bl	8000b5c <__aeabi_dadd>
 801707e:	0003      	movs	r3, r0
 8017080:	000c      	movs	r4, r1
 8017082:	0018      	movs	r0, r3
 8017084:	0021      	movs	r1, r4
 8017086:	f009 fa07 	bl	8020498 <floor>
 801708a:	0003      	movs	r3, r0
 801708c:	000c      	movs	r4, r1
 801708e:	0018      	movs	r0, r3
 8017090:	0021      	movs	r1, r4
 8017092:	f7e9 fa63 	bl	800055c <__aeabi_d2uiz>
 8017096:	0003      	movs	r3, r0
 8017098:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 801709a:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 801709c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801709e:	0018      	movs	r0, r3
 80170a0:	46bd      	mov	sp, r7
 80170a2:	b014      	add	sp, #80	; 0x50
 80170a4:	bdb0      	pop	{r4, r5, r7, pc}
 80170a6:	46c0      	nop			; (mov r8, r8)
 80170a8:	200015ec 	.word	0x200015ec
 80170ac:	3ff00000 	.word	0x3ff00000
 80170b0:	40200000 	.word	0x40200000
 80170b4:	408f4000 	.word	0x408f4000
 80170b8:	40fe8480 	.word	0x40fe8480
 80170bc:	410e8480 	.word	0x410e8480
 80170c0:	411e8480 	.word	0x411e8480
 80170c4:	40110000 	.word	0x40110000
 80170c8:	d916872b 	.word	0xd916872b
 80170cc:	3feff7ce 	.word	0x3feff7ce

080170d0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	000a      	movs	r2, r1
 80170da:	1cfb      	adds	r3, r7, #3
 80170dc:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80170e2:	4b59      	ldr	r3, [pc, #356]	; (8017248 <SX1276Send+0x178>)
 80170e4:	795b      	ldrb	r3, [r3, #5]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d002      	beq.n	80170f0 <SX1276Send+0x20>
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d04c      	beq.n	8017188 <SX1276Send+0xb8>
 80170ee:	e0a2      	b.n	8017236 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80170f0:	4b55      	ldr	r3, [pc, #340]	; (8017248 <SX1276Send+0x178>)
 80170f2:	2200      	movs	r2, #0
 80170f4:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80170f6:	1cfb      	adds	r3, r7, #3
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	b29a      	uxth	r2, r3
 80170fc:	4b52      	ldr	r3, [pc, #328]	; (8017248 <SX1276Send+0x178>)
 80170fe:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8017100:	4b51      	ldr	r3, [pc, #324]	; (8017248 <SX1276Send+0x178>)
 8017102:	2222      	movs	r2, #34	; 0x22
 8017104:	5c9b      	ldrb	r3, [r3, r2]
 8017106:	2201      	movs	r2, #1
 8017108:	4053      	eors	r3, r2
 801710a:	b2db      	uxtb	r3, r3
 801710c:	2b00      	cmp	r3, #0
 801710e:	d005      	beq.n	801711c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8017110:	1cfb      	adds	r3, r7, #3
 8017112:	2101      	movs	r1, #1
 8017114:	0018      	movs	r0, r3
 8017116:	f000 fd3b 	bl	8017b90 <SX1276WriteFifo>
 801711a:	e005      	b.n	8017128 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801711c:	1cfb      	adds	r3, r7, #3
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	0019      	movs	r1, r3
 8017122:	2032      	movs	r0, #50	; 0x32
 8017124:	f000 fc6a 	bl	80179fc <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8017128:	1cfb      	adds	r3, r7, #3
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d009      	beq.n	8017144 <SX1276Send+0x74>
 8017130:	1cfb      	adds	r3, r7, #3
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	2b40      	cmp	r3, #64	; 0x40
 8017136:	d805      	bhi.n	8017144 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8017138:	1cfb      	adds	r3, r7, #3
 801713a:	7819      	ldrb	r1, [r3, #0]
 801713c:	4b42      	ldr	r3, [pc, #264]	; (8017248 <SX1276Send+0x178>)
 801713e:	223f      	movs	r2, #63	; 0x3f
 8017140:	5499      	strb	r1, [r3, r2]
 8017142:	e00b      	b.n	801715c <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8017144:	1cfb      	adds	r3, r7, #3
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	b29a      	uxth	r2, r3
 801714a:	6879      	ldr	r1, [r7, #4]
 801714c:	4b3f      	ldr	r3, [pc, #252]	; (801724c <SX1276Send+0x17c>)
 801714e:	0018      	movs	r0, r3
 8017150:	f7fe fc54 	bl	80159fc <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8017154:	4b3c      	ldr	r3, [pc, #240]	; (8017248 <SX1276Send+0x178>)
 8017156:	223f      	movs	r2, #63	; 0x3f
 8017158:	2120      	movs	r1, #32
 801715a:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801715c:	4b3a      	ldr	r3, [pc, #232]	; (8017248 <SX1276Send+0x178>)
 801715e:	223f      	movs	r2, #63	; 0x3f
 8017160:	5c9a      	ldrb	r2, [r3, r2]
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	0011      	movs	r1, r2
 8017166:	0018      	movs	r0, r3
 8017168:	f000 fd12 	bl	8017b90 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801716c:	4b36      	ldr	r3, [pc, #216]	; (8017248 <SX1276Send+0x178>)
 801716e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017170:	4b35      	ldr	r3, [pc, #212]	; (8017248 <SX1276Send+0x178>)
 8017172:	213f      	movs	r1, #63	; 0x3f
 8017174:	5c5b      	ldrb	r3, [r3, r1]
 8017176:	b29b      	uxth	r3, r3
 8017178:	18d3      	adds	r3, r2, r3
 801717a:	b29a      	uxth	r2, r3
 801717c:	4b32      	ldr	r3, [pc, #200]	; (8017248 <SX1276Send+0x178>)
 801717e:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8017180:	4b31      	ldr	r3, [pc, #196]	; (8017248 <SX1276Send+0x178>)
 8017182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017184:	60fb      	str	r3, [r7, #12]
        }
        break;
 8017186:	e056      	b.n	8017236 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8017188:	4b2f      	ldr	r3, [pc, #188]	; (8017248 <SX1276Send+0x178>)
 801718a:	2255      	movs	r2, #85	; 0x55
 801718c:	5c9b      	ldrb	r3, [r3, r2]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d011      	beq.n	80171b6 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8017192:	2033      	movs	r0, #51	; 0x33
 8017194:	f000 fc46 	bl	8017a24 <SX1276Read>
 8017198:	0003      	movs	r3, r0
 801719a:	001a      	movs	r2, r3
 801719c:	2341      	movs	r3, #65	; 0x41
 801719e:	439a      	bics	r2, r3
 80171a0:	0013      	movs	r3, r2
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	0019      	movs	r1, r3
 80171a6:	2033      	movs	r0, #51	; 0x33
 80171a8:	f000 fc28 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80171ac:	2119      	movs	r1, #25
 80171ae:	203b      	movs	r0, #59	; 0x3b
 80171b0:	f000 fc24 	bl	80179fc <SX1276Write>
 80171b4:	e013      	b.n	80171de <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80171b6:	2033      	movs	r0, #51	; 0x33
 80171b8:	f000 fc34 	bl	8017a24 <SX1276Read>
 80171bc:	0003      	movs	r3, r0
 80171be:	b25b      	sxtb	r3, r3
 80171c0:	2241      	movs	r2, #65	; 0x41
 80171c2:	4393      	bics	r3, r2
 80171c4:	b25b      	sxtb	r3, r3
 80171c6:	2201      	movs	r2, #1
 80171c8:	4313      	orrs	r3, r2
 80171ca:	b25b      	sxtb	r3, r3
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	0019      	movs	r1, r3
 80171d0:	2033      	movs	r0, #51	; 0x33
 80171d2:	f000 fc13 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80171d6:	211d      	movs	r1, #29
 80171d8:	203b      	movs	r0, #59	; 0x3b
 80171da:	f000 fc0f 	bl	80179fc <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80171de:	1cfb      	adds	r3, r7, #3
 80171e0:	7819      	ldrb	r1, [r3, #0]
 80171e2:	4b19      	ldr	r3, [pc, #100]	; (8017248 <SX1276Send+0x178>)
 80171e4:	2264      	movs	r2, #100	; 0x64
 80171e6:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80171e8:	1cfb      	adds	r3, r7, #3
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	0019      	movs	r1, r3
 80171ee:	2022      	movs	r0, #34	; 0x22
 80171f0:	f000 fc04 	bl	80179fc <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80171f4:	2100      	movs	r1, #0
 80171f6:	200e      	movs	r0, #14
 80171f8:	f000 fc00 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80171fc:	2100      	movs	r1, #0
 80171fe:	200d      	movs	r0, #13
 8017200:	f000 fbfc 	bl	80179fc <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8017204:	2001      	movs	r0, #1
 8017206:	f000 fc0d 	bl	8017a24 <SX1276Read>
 801720a:	0003      	movs	r3, r0
 801720c:	001a      	movs	r2, r3
 801720e:	23f8      	movs	r3, #248	; 0xf8
 8017210:	439a      	bics	r2, r3
 8017212:	1e13      	subs	r3, r2, #0
 8017214:	d104      	bne.n	8017220 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8017216:	f000 f835 	bl	8017284 <SX1276SetStby>
                DelayMs( 1 );
 801721a:	2001      	movs	r0, #1
 801721c:	f007 f810 	bl	801e240 <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8017220:	1cfb      	adds	r3, r7, #3
 8017222:	781a      	ldrb	r2, [r3, #0]
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	0011      	movs	r1, r2
 8017228:	0018      	movs	r0, r3
 801722a:	f000 fcb1 	bl	8017b90 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801722e:	4b06      	ldr	r3, [pc, #24]	; (8017248 <SX1276Send+0x178>)
 8017230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017232:	60fb      	str	r3, [r7, #12]
        }
        break;
 8017234:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	0018      	movs	r0, r3
 801723a:	f000 f9cd 	bl	80175d8 <SX1276SetTx>
}
 801723e:	46c0      	nop			; (mov r8, r8)
 8017240:	46bd      	mov	sp, r7
 8017242:	b004      	add	sp, #16
 8017244:	bd80      	pop	{r7, pc}
 8017246:	46c0      	nop			; (mov r8, r8)
 8017248:	200015ec 	.word	0x200015ec
 801724c:	200010a0 	.word	0x200010a0

08017250 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8017250:	b580      	push	{r7, lr}
 8017252:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 8017254:	4b08      	ldr	r3, [pc, #32]	; (8017278 <SX1276SetSleep+0x28>)
 8017256:	0018      	movs	r0, r3
 8017258:	f7fe fb40 	bl	80158dc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 801725c:	4b07      	ldr	r3, [pc, #28]	; (801727c <SX1276SetSleep+0x2c>)
 801725e:	0018      	movs	r0, r3
 8017260:	f7fe fb3c 	bl	80158dc <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8017264:	2000      	movs	r0, #0
 8017266:	f000 fb21 	bl	80178ac <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801726a:	4b05      	ldr	r3, [pc, #20]	; (8017280 <SX1276SetSleep+0x30>)
 801726c:	2200      	movs	r2, #0
 801726e:	711a      	strb	r2, [r3, #4]
}
 8017270:	46c0      	nop			; (mov r8, r8)
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}
 8017276:	46c0      	nop			; (mov r8, r8)
 8017278:	20001654 	.word	0x20001654
 801727c:	200015bc 	.word	0x200015bc
 8017280:	200015ec 	.word	0x200015ec

08017284 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 8017288:	4b08      	ldr	r3, [pc, #32]	; (80172ac <SX1276SetStby+0x28>)
 801728a:	0018      	movs	r0, r3
 801728c:	f7fe fb26 	bl	80158dc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8017290:	4b07      	ldr	r3, [pc, #28]	; (80172b0 <SX1276SetStby+0x2c>)
 8017292:	0018      	movs	r0, r3
 8017294:	f7fe fb22 	bl	80158dc <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8017298:	2001      	movs	r0, #1
 801729a:	f000 fb07 	bl	80178ac <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801729e:	4b05      	ldr	r3, [pc, #20]	; (80172b4 <SX1276SetStby+0x30>)
 80172a0:	2200      	movs	r2, #0
 80172a2:	711a      	strb	r2, [r3, #4]
}
 80172a4:	46c0      	nop			; (mov r8, r8)
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	46c0      	nop			; (mov r8, r8)
 80172ac:	20001654 	.word	0x20001654
 80172b0:	200015bc 	.word	0x200015bc
 80172b4:	200015ec 	.word	0x200015ec

080172b8 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 80172c0:	230f      	movs	r3, #15
 80172c2:	18fb      	adds	r3, r7, r3
 80172c4:	2200      	movs	r2, #0
 80172c6:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 80172c8:	4bb8      	ldr	r3, [pc, #736]	; (80175ac <SX1276SetRx+0x2f4>)
 80172ca:	795b      	ldrb	r3, [r3, #5]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d002      	beq.n	80172d6 <SX1276SetRx+0x1e>
 80172d0:	2b01      	cmp	r3, #1
 80172d2:	d041      	beq.n	8017358 <SX1276SetRx+0xa0>
 80172d4:	e128      	b.n	8017528 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80172d6:	230f      	movs	r3, #15
 80172d8:	18fb      	adds	r3, r7, r3
 80172da:	4ab4      	ldr	r2, [pc, #720]	; (80175ac <SX1276SetRx+0x2f4>)
 80172dc:	2126      	movs	r1, #38	; 0x26
 80172de:	5c52      	ldrb	r2, [r2, r1]
 80172e0:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80172e2:	2040      	movs	r0, #64	; 0x40
 80172e4:	f000 fb9e 	bl	8017a24 <SX1276Read>
 80172e8:	0003      	movs	r3, r0
 80172ea:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80172ec:	2203      	movs	r2, #3
 80172ee:	4013      	ands	r3, r2
 80172f0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80172f2:	220c      	movs	r2, #12
 80172f4:	4313      	orrs	r3, r2
 80172f6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	0019      	movs	r1, r3
 80172fc:	2040      	movs	r0, #64	; 0x40
 80172fe:	f000 fb7d 	bl	80179fc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8017302:	2041      	movs	r0, #65	; 0x41
 8017304:	f000 fb8e 	bl	8017a24 <SX1276Read>
 8017308:	0003      	movs	r3, r0
 801730a:	001a      	movs	r2, r3
 801730c:	233f      	movs	r3, #63	; 0x3f
 801730e:	425b      	negs	r3, r3
 8017310:	4313      	orrs	r3, r2
 8017312:	b2db      	uxtb	r3, r3
 8017314:	0019      	movs	r1, r3
 8017316:	2041      	movs	r0, #65	; 0x41
 8017318:	f000 fb70 	bl	80179fc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801731c:	2035      	movs	r0, #53	; 0x35
 801731e:	f000 fb81 	bl	8017a24 <SX1276Read>
 8017322:	0003      	movs	r3, r0
 8017324:	001a      	movs	r2, r3
 8017326:	233f      	movs	r3, #63	; 0x3f
 8017328:	4013      	ands	r3, r2
 801732a:	b2d9      	uxtb	r1, r3
 801732c:	4b9f      	ldr	r3, [pc, #636]	; (80175ac <SX1276SetRx+0x2f4>)
 801732e:	223e      	movs	r2, #62	; 0x3e
 8017330:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8017332:	211e      	movs	r1, #30
 8017334:	200d      	movs	r0, #13
 8017336:	f000 fb61 	bl	80179fc <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801733a:	4b9c      	ldr	r3, [pc, #624]	; (80175ac <SX1276SetRx+0x2f4>)
 801733c:	2230      	movs	r2, #48	; 0x30
 801733e:	2100      	movs	r1, #0
 8017340:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017342:	4b9a      	ldr	r3, [pc, #616]	; (80175ac <SX1276SetRx+0x2f4>)
 8017344:	2231      	movs	r2, #49	; 0x31
 8017346:	2100      	movs	r1, #0
 8017348:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801734a:	4b98      	ldr	r3, [pc, #608]	; (80175ac <SX1276SetRx+0x2f4>)
 801734c:	2200      	movs	r2, #0
 801734e:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8017350:	4b96      	ldr	r3, [pc, #600]	; (80175ac <SX1276SetRx+0x2f4>)
 8017352:	2200      	movs	r2, #0
 8017354:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 8017356:	e0e7      	b.n	8017528 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8017358:	4b94      	ldr	r3, [pc, #592]	; (80175ac <SX1276SetRx+0x2f4>)
 801735a:	2255      	movs	r2, #85	; 0x55
 801735c:	5c9b      	ldrb	r3, [r3, r2]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d010      	beq.n	8017384 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8017362:	2033      	movs	r0, #51	; 0x33
 8017364:	f000 fb5e 	bl	8017a24 <SX1276Read>
 8017368:	0003      	movs	r3, r0
 801736a:	001a      	movs	r2, r3
 801736c:	2341      	movs	r3, #65	; 0x41
 801736e:	4313      	orrs	r3, r2
 8017370:	b2db      	uxtb	r3, r3
 8017372:	0019      	movs	r1, r3
 8017374:	2033      	movs	r0, #51	; 0x33
 8017376:	f000 fb41 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801737a:	2119      	movs	r1, #25
 801737c:	203b      	movs	r0, #59	; 0x3b
 801737e:	f000 fb3d 	bl	80179fc <SX1276Write>
 8017382:	e013      	b.n	80173ac <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8017384:	2033      	movs	r0, #51	; 0x33
 8017386:	f000 fb4d 	bl	8017a24 <SX1276Read>
 801738a:	0003      	movs	r3, r0
 801738c:	b25b      	sxtb	r3, r3
 801738e:	2241      	movs	r2, #65	; 0x41
 8017390:	4393      	bics	r3, r2
 8017392:	b25b      	sxtb	r3, r3
 8017394:	2201      	movs	r2, #1
 8017396:	4313      	orrs	r3, r2
 8017398:	b25b      	sxtb	r3, r3
 801739a:	b2db      	uxtb	r3, r3
 801739c:	0019      	movs	r1, r3
 801739e:	2033      	movs	r0, #51	; 0x33
 80173a0:	f000 fb2c 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80173a4:	211d      	movs	r1, #29
 80173a6:	203b      	movs	r0, #59	; 0x3b
 80173a8:	f000 fb28 	bl	80179fc <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80173ac:	4b7f      	ldr	r3, [pc, #508]	; (80175ac <SX1276SetRx+0x2f4>)
 80173ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173b0:	2b08      	cmp	r3, #8
 80173b2:	d900      	bls.n	80173b6 <SX1276SetRx+0xfe>
 80173b4:	e076      	b.n	80174a4 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80173b6:	2031      	movs	r0, #49	; 0x31
 80173b8:	f000 fb34 	bl	8017a24 <SX1276Read>
 80173bc:	0003      	movs	r3, r0
 80173be:	001a      	movs	r2, r3
 80173c0:	237f      	movs	r3, #127	; 0x7f
 80173c2:	4013      	ands	r3, r2
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	0019      	movs	r1, r3
 80173c8:	2031      	movs	r0, #49	; 0x31
 80173ca:	f000 fb17 	bl	80179fc <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80173ce:	2100      	movs	r1, #0
 80173d0:	2030      	movs	r0, #48	; 0x30
 80173d2:	f000 fb13 	bl	80179fc <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80173d6:	4b75      	ldr	r3, [pc, #468]	; (80175ac <SX1276SetRx+0x2f4>)
 80173d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173da:	2b08      	cmp	r3, #8
 80173dc:	d86f      	bhi.n	80174be <SX1276SetRx+0x206>
 80173de:	009a      	lsls	r2, r3, #2
 80173e0:	4b73      	ldr	r3, [pc, #460]	; (80175b0 <SX1276SetRx+0x2f8>)
 80173e2:	18d3      	adds	r3, r2, r3
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80173e8:	2148      	movs	r1, #72	; 0x48
 80173ea:	202f      	movs	r0, #47	; 0x2f
 80173ec:	f000 fb06 	bl	80179fc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80173f0:	4b6e      	ldr	r3, [pc, #440]	; (80175ac <SX1276SetRx+0x2f4>)
 80173f2:	689b      	ldr	r3, [r3, #8]
 80173f4:	4a6f      	ldr	r2, [pc, #444]	; (80175b4 <SX1276SetRx+0x2fc>)
 80173f6:	4694      	mov	ip, r2
 80173f8:	4463      	add	r3, ip
 80173fa:	0018      	movs	r0, r3
 80173fc:	f7fe feb6 	bl	801616c <SX1276SetChannel>
                    break;
 8017400:	e05d      	b.n	80174be <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017402:	2144      	movs	r1, #68	; 0x44
 8017404:	202f      	movs	r0, #47	; 0x2f
 8017406:	f000 faf9 	bl	80179fc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801740a:	4b68      	ldr	r3, [pc, #416]	; (80175ac <SX1276SetRx+0x2f4>)
 801740c:	689b      	ldr	r3, [r3, #8]
 801740e:	4a6a      	ldr	r2, [pc, #424]	; (80175b8 <SX1276SetRx+0x300>)
 8017410:	4694      	mov	ip, r2
 8017412:	4463      	add	r3, ip
 8017414:	0018      	movs	r0, r3
 8017416:	f7fe fea9 	bl	801616c <SX1276SetChannel>
                    break;
 801741a:	e050      	b.n	80174be <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801741c:	2144      	movs	r1, #68	; 0x44
 801741e:	202f      	movs	r0, #47	; 0x2f
 8017420:	f000 faec 	bl	80179fc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8017424:	4b61      	ldr	r3, [pc, #388]	; (80175ac <SX1276SetRx+0x2f4>)
 8017426:	689b      	ldr	r3, [r3, #8]
 8017428:	4a64      	ldr	r2, [pc, #400]	; (80175bc <SX1276SetRx+0x304>)
 801742a:	4694      	mov	ip, r2
 801742c:	4463      	add	r3, ip
 801742e:	0018      	movs	r0, r3
 8017430:	f7fe fe9c 	bl	801616c <SX1276SetChannel>
                    break;
 8017434:	e043      	b.n	80174be <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017436:	2144      	movs	r1, #68	; 0x44
 8017438:	202f      	movs	r0, #47	; 0x2f
 801743a:	f000 fadf 	bl	80179fc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801743e:	4b5b      	ldr	r3, [pc, #364]	; (80175ac <SX1276SetRx+0x2f4>)
 8017440:	689b      	ldr	r3, [r3, #8]
 8017442:	4a5f      	ldr	r2, [pc, #380]	; (80175c0 <SX1276SetRx+0x308>)
 8017444:	4694      	mov	ip, r2
 8017446:	4463      	add	r3, ip
 8017448:	0018      	movs	r0, r3
 801744a:	f7fe fe8f 	bl	801616c <SX1276SetChannel>
                    break;
 801744e:	e036      	b.n	80174be <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8017450:	2144      	movs	r1, #68	; 0x44
 8017452:	202f      	movs	r0, #47	; 0x2f
 8017454:	f000 fad2 	bl	80179fc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8017458:	4b54      	ldr	r3, [pc, #336]	; (80175ac <SX1276SetRx+0x2f4>)
 801745a:	689b      	ldr	r3, [r3, #8]
 801745c:	4a59      	ldr	r2, [pc, #356]	; (80175c4 <SX1276SetRx+0x30c>)
 801745e:	4694      	mov	ip, r2
 8017460:	4463      	add	r3, ip
 8017462:	0018      	movs	r0, r3
 8017464:	f7fe fe82 	bl	801616c <SX1276SetChannel>
                    break;
 8017468:	e029      	b.n	80174be <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801746a:	2144      	movs	r1, #68	; 0x44
 801746c:	202f      	movs	r0, #47	; 0x2f
 801746e:	f000 fac5 	bl	80179fc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8017472:	4b4e      	ldr	r3, [pc, #312]	; (80175ac <SX1276SetRx+0x2f4>)
 8017474:	689b      	ldr	r3, [r3, #8]
 8017476:	4a54      	ldr	r2, [pc, #336]	; (80175c8 <SX1276SetRx+0x310>)
 8017478:	4694      	mov	ip, r2
 801747a:	4463      	add	r3, ip
 801747c:	0018      	movs	r0, r3
 801747e:	f7fe fe75 	bl	801616c <SX1276SetChannel>
                    break;
 8017482:	e01c      	b.n	80174be <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8017484:	2140      	movs	r1, #64	; 0x40
 8017486:	202f      	movs	r0, #47	; 0x2f
 8017488:	f000 fab8 	bl	80179fc <SX1276Write>
                    break;
 801748c:	e017      	b.n	80174be <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801748e:	2140      	movs	r1, #64	; 0x40
 8017490:	202f      	movs	r0, #47	; 0x2f
 8017492:	f000 fab3 	bl	80179fc <SX1276Write>
                    break;
 8017496:	e012      	b.n	80174be <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8017498:	2140      	movs	r1, #64	; 0x40
 801749a:	202f      	movs	r0, #47	; 0x2f
 801749c:	f000 faae 	bl	80179fc <SX1276Write>
                    break;
 80174a0:	46c0      	nop			; (mov r8, r8)
 80174a2:	e00c      	b.n	80174be <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80174a4:	2031      	movs	r0, #49	; 0x31
 80174a6:	f000 fabd 	bl	8017a24 <SX1276Read>
 80174aa:	0003      	movs	r3, r0
 80174ac:	001a      	movs	r2, r3
 80174ae:	2380      	movs	r3, #128	; 0x80
 80174b0:	425b      	negs	r3, r3
 80174b2:	4313      	orrs	r3, r2
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	0019      	movs	r1, r3
 80174b8:	2031      	movs	r0, #49	; 0x31
 80174ba:	f000 fa9f 	bl	80179fc <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80174be:	230f      	movs	r3, #15
 80174c0:	18fb      	adds	r3, r7, r3
 80174c2:	4a3a      	ldr	r2, [pc, #232]	; (80175ac <SX1276SetRx+0x2f4>)
 80174c4:	2156      	movs	r1, #86	; 0x56
 80174c6:	5c52      	ldrb	r2, [r2, r1]
 80174c8:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80174ca:	4b38      	ldr	r3, [pc, #224]	; (80175ac <SX1276SetRx+0x2f4>)
 80174cc:	2253      	movs	r2, #83	; 0x53
 80174ce:	5c9b      	ldrb	r3, [r3, r2]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d010      	beq.n	80174f6 <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80174d4:	211d      	movs	r1, #29
 80174d6:	2011      	movs	r0, #17
 80174d8:	f000 fa90 	bl	80179fc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80174dc:	2040      	movs	r0, #64	; 0x40
 80174de:	f000 faa1 	bl	8017a24 <SX1276Read>
 80174e2:	0003      	movs	r3, r0
 80174e4:	001a      	movs	r2, r3
 80174e6:	2333      	movs	r3, #51	; 0x33
 80174e8:	4013      	ands	r3, r2
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	0019      	movs	r1, r3
 80174ee:	2040      	movs	r0, #64	; 0x40
 80174f0:	f000 fa84 	bl	80179fc <SX1276Write>
 80174f4:	e00f      	b.n	8017516 <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80174f6:	211f      	movs	r1, #31
 80174f8:	2011      	movs	r0, #17
 80174fa:	f000 fa7f 	bl	80179fc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80174fe:	2040      	movs	r0, #64	; 0x40
 8017500:	f000 fa90 	bl	8017a24 <SX1276Read>
 8017504:	0003      	movs	r3, r0
 8017506:	001a      	movs	r2, r3
 8017508:	233f      	movs	r3, #63	; 0x3f
 801750a:	4013      	ands	r3, r2
 801750c:	b2db      	uxtb	r3, r3
 801750e:	0019      	movs	r1, r3
 8017510:	2040      	movs	r0, #64	; 0x40
 8017512:	f000 fa73 	bl	80179fc <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8017516:	2100      	movs	r1, #0
 8017518:	200f      	movs	r0, #15
 801751a:	f000 fa6f 	bl	80179fc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801751e:	2100      	movs	r1, #0
 8017520:	200d      	movs	r0, #13
 8017522:	f000 fa6b 	bl	80179fc <SX1276Write>
        }
        break;
 8017526:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8017528:	2380      	movs	r3, #128	; 0x80
 801752a:	005a      	lsls	r2, r3, #1
 801752c:	4b27      	ldr	r3, [pc, #156]	; (80175cc <SX1276SetRx+0x314>)
 801752e:	2100      	movs	r1, #0
 8017530:	0018      	movs	r0, r3
 8017532:	f007 fe03 	bl	801f13c <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8017536:	4b1d      	ldr	r3, [pc, #116]	; (80175ac <SX1276SetRx+0x2f4>)
 8017538:	2201      	movs	r2, #1
 801753a:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d009      	beq.n	8017556 <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017542:	687a      	ldr	r2, [r7, #4]
 8017544:	4b22      	ldr	r3, [pc, #136]	; (80175d0 <SX1276SetRx+0x318>)
 8017546:	0011      	movs	r1, r2
 8017548:	0018      	movs	r0, r3
 801754a:	f7fe f945 	bl	80157d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 801754e:	4b20      	ldr	r3, [pc, #128]	; (80175d0 <SX1276SetRx+0x318>)
 8017550:	0018      	movs	r0, r3
 8017552:	f7fe f96d 	bl	8015830 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8017556:	4b15      	ldr	r3, [pc, #84]	; (80175ac <SX1276SetRx+0x2f4>)
 8017558:	795b      	ldrb	r3, [r3, #5]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d116      	bne.n	801758c <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801755e:	2005      	movs	r0, #5
 8017560:	f000 f9a4 	bl	80178ac <SX1276SetOpMode>

        if( rxContinuous == false )
 8017564:	230f      	movs	r3, #15
 8017566:	18fb      	adds	r3, r7, r3
 8017568:	781b      	ldrb	r3, [r3, #0]
 801756a:	2201      	movs	r2, #1
 801756c:	4053      	eors	r3, r2
 801756e:	b2db      	uxtb	r3, r3
 8017570:	2b00      	cmp	r3, #0
 8017572:	d017      	beq.n	80175a4 <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8017574:	4b0d      	ldr	r3, [pc, #52]	; (80175ac <SX1276SetRx+0x2f4>)
 8017576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017578:	4b16      	ldr	r3, [pc, #88]	; (80175d4 <SX1276SetRx+0x31c>)
 801757a:	0011      	movs	r1, r2
 801757c:	0018      	movs	r0, r3
 801757e:	f7fe f92b 	bl	80157d8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8017582:	4b14      	ldr	r3, [pc, #80]	; (80175d4 <SX1276SetRx+0x31c>)
 8017584:	0018      	movs	r0, r3
 8017586:	f7fe f953 	bl	8015830 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801758a:	e00b      	b.n	80175a4 <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 801758c:	230f      	movs	r3, #15
 801758e:	18fb      	adds	r3, r7, r3
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d003      	beq.n	801759e <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8017596:	2005      	movs	r0, #5
 8017598:	f000 f988 	bl	80178ac <SX1276SetOpMode>
}
 801759c:	e002      	b.n	80175a4 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801759e:	2006      	movs	r0, #6
 80175a0:	f000 f984 	bl	80178ac <SX1276SetOpMode>
}
 80175a4:	46c0      	nop			; (mov r8, r8)
 80175a6:	46bd      	mov	sp, r7
 80175a8:	b004      	add	sp, #16
 80175aa:	bd80      	pop	{r7, pc}
 80175ac:	200015ec 	.word	0x200015ec
 80175b0:	08021c9c 	.word	0x08021c9c
 80175b4:	00001e82 	.word	0x00001e82
 80175b8:	000028b4 	.word	0x000028b4
 80175bc:	00003d04 	.word	0x00003d04
 80175c0:	0000515e 	.word	0x0000515e
 80175c4:	00007a12 	.word	0x00007a12
 80175c8:	0000a2c6 	.word	0x0000a2c6
 80175cc:	200010a0 	.word	0x200010a0
 80175d0:	20001654 	.word	0x20001654
 80175d4:	200015d4 	.word	0x200015d4

080175d8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	4b38      	ldr	r3, [pc, #224]	; (80176c4 <SX1276SetTx+0xec>)
 80175e4:	0011      	movs	r1, r2
 80175e6:	0018      	movs	r0, r3
 80175e8:	f7fe f8f6 	bl	80157d8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80175ec:	4b36      	ldr	r3, [pc, #216]	; (80176c8 <SX1276SetTx+0xf0>)
 80175ee:	795b      	ldrb	r3, [r3, #5]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d002      	beq.n	80175fa <SX1276SetTx+0x22>
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d028      	beq.n	801764a <SX1276SetTx+0x72>
 80175f8:	e056      	b.n	80176a8 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80175fa:	2040      	movs	r0, #64	; 0x40
 80175fc:	f000 fa12 	bl	8017a24 <SX1276Read>
 8017600:	0003      	movs	r3, r0
 8017602:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8017604:	2203      	movs	r2, #3
 8017606:	4013      	ands	r3, r2
 8017608:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 801760a:	2210      	movs	r2, #16
 801760c:	4313      	orrs	r3, r2
 801760e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8017610:	b2db      	uxtb	r3, r3
 8017612:	0019      	movs	r1, r3
 8017614:	2040      	movs	r0, #64	; 0x40
 8017616:	f000 f9f1 	bl	80179fc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801761a:	2041      	movs	r0, #65	; 0x41
 801761c:	f000 fa02 	bl	8017a24 <SX1276Read>
 8017620:	0003      	movs	r3, r0
 8017622:	001a      	movs	r2, r3
 8017624:	233e      	movs	r3, #62	; 0x3e
 8017626:	4013      	ands	r3, r2
 8017628:	b2db      	uxtb	r3, r3
 801762a:	0019      	movs	r1, r3
 801762c:	2041      	movs	r0, #65	; 0x41
 801762e:	f000 f9e5 	bl	80179fc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8017632:	2035      	movs	r0, #53	; 0x35
 8017634:	f000 f9f6 	bl	8017a24 <SX1276Read>
 8017638:	0003      	movs	r3, r0
 801763a:	001a      	movs	r2, r3
 801763c:	233f      	movs	r3, #63	; 0x3f
 801763e:	4013      	ands	r3, r2
 8017640:	b2d9      	uxtb	r1, r3
 8017642:	4b21      	ldr	r3, [pc, #132]	; (80176c8 <SX1276SetTx+0xf0>)
 8017644:	223e      	movs	r2, #62	; 0x3e
 8017646:	5499      	strb	r1, [r3, r2]
        }
        break;
 8017648:	e02e      	b.n	80176a8 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801764a:	4b1f      	ldr	r3, [pc, #124]	; (80176c8 <SX1276SetTx+0xf0>)
 801764c:	2253      	movs	r2, #83	; 0x53
 801764e:	5c9b      	ldrb	r3, [r3, r2]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d014      	beq.n	801767e <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8017654:	21f5      	movs	r1, #245	; 0xf5
 8017656:	2011      	movs	r0, #17
 8017658:	f000 f9d0 	bl	80179fc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801765c:	2040      	movs	r0, #64	; 0x40
 801765e:	f000 f9e1 	bl	8017a24 <SX1276Read>
 8017662:	0003      	movs	r3, r0
 8017664:	b25b      	sxtb	r3, r3
 8017666:	2233      	movs	r2, #51	; 0x33
 8017668:	4013      	ands	r3, r2
 801766a:	b25b      	sxtb	r3, r3
 801766c:	2240      	movs	r2, #64	; 0x40
 801766e:	4313      	orrs	r3, r2
 8017670:	b25b      	sxtb	r3, r3
 8017672:	b2db      	uxtb	r3, r3
 8017674:	0019      	movs	r1, r3
 8017676:	2040      	movs	r0, #64	; 0x40
 8017678:	f000 f9c0 	bl	80179fc <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801767c:	e013      	b.n	80176a6 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801767e:	21f7      	movs	r1, #247	; 0xf7
 8017680:	2011      	movs	r0, #17
 8017682:	f000 f9bb 	bl	80179fc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8017686:	2040      	movs	r0, #64	; 0x40
 8017688:	f000 f9cc 	bl	8017a24 <SX1276Read>
 801768c:	0003      	movs	r3, r0
 801768e:	b25b      	sxtb	r3, r3
 8017690:	223f      	movs	r2, #63	; 0x3f
 8017692:	4013      	ands	r3, r2
 8017694:	b25b      	sxtb	r3, r3
 8017696:	2240      	movs	r2, #64	; 0x40
 8017698:	4313      	orrs	r3, r2
 801769a:	b25b      	sxtb	r3, r3
 801769c:	b2db      	uxtb	r3, r3
 801769e:	0019      	movs	r1, r3
 80176a0:	2040      	movs	r0, #64	; 0x40
 80176a2:	f000 f9ab 	bl	80179fc <SX1276Write>
        break;
 80176a6:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 80176a8:	4b07      	ldr	r3, [pc, #28]	; (80176c8 <SX1276SetTx+0xf0>)
 80176aa:	2202      	movs	r2, #2
 80176ac:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80176ae:	4b05      	ldr	r3, [pc, #20]	; (80176c4 <SX1276SetTx+0xec>)
 80176b0:	0018      	movs	r0, r3
 80176b2:	f7fe f8bd 	bl	8015830 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80176b6:	2003      	movs	r0, #3
 80176b8:	f000 f8f8 	bl	80178ac <SX1276SetOpMode>
}
 80176bc:	46c0      	nop			; (mov r8, r8)
 80176be:	46bd      	mov	sp, r7
 80176c0:	b002      	add	sp, #8
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	200015bc 	.word	0x200015bc
 80176c8:	200015ec 	.word	0x200015ec

080176cc <SX1276StartCad>:

void SX1276StartCad( void )
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 80176d0:	4b11      	ldr	r3, [pc, #68]	; (8017718 <SX1276StartCad+0x4c>)
 80176d2:	795b      	ldrb	r3, [r3, #5]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d01a      	beq.n	801770e <SX1276StartCad+0x42>
 80176d8:	2b01      	cmp	r3, #1
 80176da:	d000      	beq.n	80176de <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80176dc:	e018      	b.n	8017710 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80176de:	21fa      	movs	r1, #250	; 0xfa
 80176e0:	2011      	movs	r0, #17
 80176e2:	f000 f98b 	bl	80179fc <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80176e6:	2040      	movs	r0, #64	; 0x40
 80176e8:	f000 f99c 	bl	8017a24 <SX1276Read>
 80176ec:	0003      	movs	r3, r0
 80176ee:	001a      	movs	r2, r3
 80176f0:	2303      	movs	r3, #3
 80176f2:	439a      	bics	r2, r3
 80176f4:	0013      	movs	r3, r2
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	0019      	movs	r1, r3
 80176fa:	2040      	movs	r0, #64	; 0x40
 80176fc:	f000 f97e 	bl	80179fc <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8017700:	4b05      	ldr	r3, [pc, #20]	; (8017718 <SX1276StartCad+0x4c>)
 8017702:	2203      	movs	r2, #3
 8017704:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8017706:	2007      	movs	r0, #7
 8017708:	f000 f8d0 	bl	80178ac <SX1276SetOpMode>
        break;
 801770c:	e000      	b.n	8017710 <SX1276StartCad+0x44>
        break;
 801770e:	46c0      	nop			; (mov r8, r8)
    }
}
 8017710:	46c0      	nop			; (mov r8, r8)
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}
 8017716:	46c0      	nop			; (mov r8, r8)
 8017718:	200015ec 	.word	0x200015ec

0801771c <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b08e      	sub	sp, #56	; 0x38
 8017720:	af0a      	add	r7, sp, #40	; 0x28
 8017722:	6078      	str	r0, [r7, #4]
 8017724:	0008      	movs	r0, r1
 8017726:	0011      	movs	r1, r2
 8017728:	1cfb      	adds	r3, r7, #3
 801772a:	1c02      	adds	r2, r0, #0
 801772c:	701a      	strb	r2, [r3, #0]
 801772e:	003b      	movs	r3, r7
 8017730:	1c0a      	adds	r2, r1, #0
 8017732:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 8017734:	003b      	movs	r3, r7
 8017736:	881a      	ldrh	r2, [r3, #0]
 8017738:	0013      	movs	r3, r2
 801773a:	015b      	lsls	r3, r3, #5
 801773c:	1a9b      	subs	r3, r3, r2
 801773e:	009b      	lsls	r3, r3, #2
 8017740:	189b      	adds	r3, r3, r2
 8017742:	00db      	lsls	r3, r3, #3
 8017744:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	0018      	movs	r0, r3
 801774a:	f7fe fd0f 	bl	801616c <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801774e:	1cfb      	adds	r3, r7, #3
 8017750:	2100      	movs	r1, #0
 8017752:	5659      	ldrsb	r1, [r3, r1]
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	9308      	str	r3, [sp, #32]
 8017758:	2300      	movs	r3, #0
 801775a:	9307      	str	r3, [sp, #28]
 801775c:	2300      	movs	r3, #0
 801775e:	9306      	str	r3, [sp, #24]
 8017760:	2300      	movs	r3, #0
 8017762:	9305      	str	r3, [sp, #20]
 8017764:	2300      	movs	r3, #0
 8017766:	9304      	str	r3, [sp, #16]
 8017768:	2300      	movs	r3, #0
 801776a:	9303      	str	r3, [sp, #12]
 801776c:	2305      	movs	r3, #5
 801776e:	9302      	str	r3, [sp, #8]
 8017770:	2300      	movs	r3, #0
 8017772:	9301      	str	r3, [sp, #4]
 8017774:	2396      	movs	r3, #150	; 0x96
 8017776:	015b      	lsls	r3, r3, #5
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	2300      	movs	r3, #0
 801777c:	2200      	movs	r2, #0
 801777e:	2000      	movs	r0, #0
 8017780:	f7ff f914 	bl	80169ac <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8017784:	2031      	movs	r0, #49	; 0x31
 8017786:	f000 f94d 	bl	8017a24 <SX1276Read>
 801778a:	0003      	movs	r3, r0
 801778c:	001a      	movs	r2, r3
 801778e:	2340      	movs	r3, #64	; 0x40
 8017790:	439a      	bics	r2, r3
 8017792:	0013      	movs	r3, r2
 8017794:	b2db      	uxtb	r3, r3
 8017796:	0019      	movs	r1, r3
 8017798:	2031      	movs	r0, #49	; 0x31
 801779a:	f000 f92f 	bl	80179fc <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801779e:	21f0      	movs	r1, #240	; 0xf0
 80177a0:	2040      	movs	r0, #64	; 0x40
 80177a2:	f000 f92b 	bl	80179fc <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80177a6:	21a0      	movs	r1, #160	; 0xa0
 80177a8:	2041      	movs	r0, #65	; 0x41
 80177aa:	f000 f927 	bl	80179fc <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	4b09      	ldr	r3, [pc, #36]	; (80177d8 <SX1276SetTxContinuousWave+0xbc>)
 80177b2:	0011      	movs	r1, r2
 80177b4:	0018      	movs	r0, r3
 80177b6:	f7fe f80f 	bl	80157d8 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 80177ba:	4b08      	ldr	r3, [pc, #32]	; (80177dc <SX1276SetTxContinuousWave+0xc0>)
 80177bc:	2202      	movs	r2, #2
 80177be:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80177c0:	4b05      	ldr	r3, [pc, #20]	; (80177d8 <SX1276SetTxContinuousWave+0xbc>)
 80177c2:	0018      	movs	r0, r3
 80177c4:	f7fe f834 	bl	8015830 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80177c8:	2003      	movs	r0, #3
 80177ca:	f000 f86f 	bl	80178ac <SX1276SetOpMode>
}
 80177ce:	46c0      	nop			; (mov r8, r8)
 80177d0:	46bd      	mov	sp, r7
 80177d2:	b004      	add	sp, #16
 80177d4:	bd80      	pop	{r7, pc}
 80177d6:	46c0      	nop			; (mov r8, r8)
 80177d8:	200015bc 	.word	0x200015bc
 80177dc:	200015ec 	.word	0x200015ec

080177e0 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b084      	sub	sp, #16
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	0002      	movs	r2, r0
 80177e8:	1dfb      	adds	r3, r7, #7
 80177ea:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 80177ec:	230e      	movs	r3, #14
 80177ee:	18fb      	adds	r3, r7, r3
 80177f0:	2200      	movs	r2, #0
 80177f2:	801a      	strh	r2, [r3, #0]

    switch( modem )
 80177f4:	1dfb      	adds	r3, r7, #7
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d002      	beq.n	8017802 <SX1276ReadRssi+0x22>
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	d00d      	beq.n	801781c <SX1276ReadRssi+0x3c>
 8017800:	e027      	b.n	8017852 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8017802:	2011      	movs	r0, #17
 8017804:	f000 f90e 	bl	8017a24 <SX1276Read>
 8017808:	0003      	movs	r3, r0
 801780a:	085b      	lsrs	r3, r3, #1
 801780c:	b2db      	uxtb	r3, r3
 801780e:	b29b      	uxth	r3, r3
 8017810:	425b      	negs	r3, r3
 8017812:	b29a      	uxth	r2, r3
 8017814:	230e      	movs	r3, #14
 8017816:	18fb      	adds	r3, r7, r3
 8017818:	801a      	strh	r2, [r3, #0]
        break;
 801781a:	e020      	b.n	801785e <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801781c:	4b14      	ldr	r3, [pc, #80]	; (8017870 <SX1276ReadRssi+0x90>)
 801781e:	689b      	ldr	r3, [r3, #8]
 8017820:	4a14      	ldr	r2, [pc, #80]	; (8017874 <SX1276ReadRssi+0x94>)
 8017822:	4293      	cmp	r3, r2
 8017824:	d90a      	bls.n	801783c <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8017826:	201b      	movs	r0, #27
 8017828:	f000 f8fc 	bl	8017a24 <SX1276Read>
 801782c:	0003      	movs	r3, r0
 801782e:	b29b      	uxth	r3, r3
 8017830:	3b9d      	subs	r3, #157	; 0x9d
 8017832:	b29a      	uxth	r2, r3
 8017834:	230e      	movs	r3, #14
 8017836:	18fb      	adds	r3, r7, r3
 8017838:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801783a:	e010      	b.n	801785e <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801783c:	201b      	movs	r0, #27
 801783e:	f000 f8f1 	bl	8017a24 <SX1276Read>
 8017842:	0003      	movs	r3, r0
 8017844:	b29b      	uxth	r3, r3
 8017846:	3ba4      	subs	r3, #164	; 0xa4
 8017848:	b29a      	uxth	r2, r3
 801784a:	230e      	movs	r3, #14
 801784c:	18fb      	adds	r3, r7, r3
 801784e:	801a      	strh	r2, [r3, #0]
        break;
 8017850:	e005      	b.n	801785e <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8017852:	230e      	movs	r3, #14
 8017854:	18fb      	adds	r3, r7, r3
 8017856:	2201      	movs	r2, #1
 8017858:	4252      	negs	r2, r2
 801785a:	801a      	strh	r2, [r3, #0]
        break;
 801785c:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801785e:	230e      	movs	r3, #14
 8017860:	18fb      	adds	r3, r7, r3
 8017862:	2200      	movs	r2, #0
 8017864:	5e9b      	ldrsh	r3, [r3, r2]
}
 8017866:	0018      	movs	r0, r3
 8017868:	46bd      	mov	sp, r7
 801786a:	b004      	add	sp, #16
 801786c:	bd80      	pop	{r7, pc}
 801786e:	46c0      	nop			; (mov r8, r8)
 8017870:	200015ec 	.word	0x200015ec
 8017874:	1f4add40 	.word	0x1f4add40

08017878 <SX1276Reset>:

void SX1276Reset( void )
{
 8017878:	b580      	push	{r7, lr}
 801787a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 801787c:	2200      	movs	r2, #0
 801787e:	2101      	movs	r1, #1
 8017880:	2002      	movs	r0, #2
 8017882:	f006 f979 	bl	801db78 <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 8017886:	2101      	movs	r1, #1
 8017888:	2002      	movs	r0, #2
 801788a:	f006 fb95 	bl	801dfb8 <gpio_reset>
	itsdk_delayMs(2);
 801788e:	2002      	movs	r0, #2
 8017890:	f006 fcd6 	bl	801e240 <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 8017894:	2204      	movs	r2, #4
 8017896:	2101      	movs	r1, #1
 8017898:	2002      	movs	r0, #2
 801789a:	f006 f96d 	bl	801db78 <gpio_configure>
	itsdk_delayMs(10);
 801789e:	200a      	movs	r0, #10
 80178a0:	f006 fcce 	bl	801e240 <itsdk_delayMs>
}
 80178a4:	46c0      	nop			; (mov r8, r8)
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
	...

080178ac <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	0002      	movs	r2, r0
 80178b4:	1dfb      	adds	r3, r7, #7
 80178b6:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 80178b8:	1dfb      	adds	r3, r7, #7
 80178ba:	781b      	ldrb	r3, [r3, #0]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d11c      	bne.n	80178fa <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80178c0:	2001      	movs	r0, #1
 80178c2:	f000 f8af 	bl	8017a24 <SX1276Read>
 80178c6:	0003      	movs	r3, r0
 80178c8:	b25b      	sxtb	r3, r3
 80178ca:	2207      	movs	r2, #7
 80178cc:	4393      	bics	r3, r2
 80178ce:	b25a      	sxtb	r2, r3
 80178d0:	1dfb      	adds	r3, r7, #7
 80178d2:	781b      	ldrb	r3, [r3, #0]
 80178d4:	b25b      	sxtb	r3, r3
 80178d6:	4313      	orrs	r3, r2
 80178d8:	b25b      	sxtb	r3, r3
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	0019      	movs	r1, r3
 80178de:	2001      	movs	r0, #1
 80178e0:	f000 f88c 	bl	80179fc <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 80178e4:	4b18      	ldr	r3, [pc, #96]	; (8017948 <SX1276SetOpMode+0x9c>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	691b      	ldr	r3, [r3, #16]
 80178ea:	2001      	movs	r0, #1
 80178ec:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 80178ee:	4b16      	ldr	r3, [pc, #88]	; (8017948 <SX1276SetOpMode+0x9c>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	2000      	movs	r0, #0
 80178f6:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 80178f8:	e022      	b.n	8017940 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80178fa:	4b13      	ldr	r3, [pc, #76]	; (8017948 <SX1276SetOpMode+0x9c>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2001      	movs	r0, #1
 8017902:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8017904:	4b10      	ldr	r3, [pc, #64]	; (8017948 <SX1276SetOpMode+0x9c>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	691b      	ldr	r3, [r3, #16]
 801790a:	2000      	movs	r0, #0
 801790c:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 801790e:	4b0e      	ldr	r3, [pc, #56]	; (8017948 <SX1276SetOpMode+0x9c>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	695b      	ldr	r3, [r3, #20]
 8017914:	1dfa      	adds	r2, r7, #7
 8017916:	7812      	ldrb	r2, [r2, #0]
 8017918:	0010      	movs	r0, r2
 801791a:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801791c:	2001      	movs	r0, #1
 801791e:	f000 f881 	bl	8017a24 <SX1276Read>
 8017922:	0003      	movs	r3, r0
 8017924:	b25b      	sxtb	r3, r3
 8017926:	2207      	movs	r2, #7
 8017928:	4393      	bics	r3, r2
 801792a:	b25a      	sxtb	r2, r3
 801792c:	1dfb      	adds	r3, r7, #7
 801792e:	781b      	ldrb	r3, [r3, #0]
 8017930:	b25b      	sxtb	r3, r3
 8017932:	4313      	orrs	r3, r2
 8017934:	b25b      	sxtb	r3, r3
 8017936:	b2db      	uxtb	r3, r3
 8017938:	0019      	movs	r1, r3
 801793a:	2001      	movs	r0, #1
 801793c:	f000 f85e 	bl	80179fc <SX1276Write>
}
 8017940:	46c0      	nop			; (mov r8, r8)
 8017942:	46bd      	mov	sp, r7
 8017944:	b002      	add	sp, #8
 8017946:	bd80      	pop	{r7, pc}
 8017948:	200011a0 	.word	0x200011a0

0801794c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	0002      	movs	r2, r0
 8017954:	1dfb      	adds	r3, r7, #7
 8017956:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8017958:	2001      	movs	r0, #1
 801795a:	f000 f863 	bl	8017a24 <SX1276Read>
 801795e:	0003      	movs	r3, r0
 8017960:	b25b      	sxtb	r3, r3
 8017962:	2b00      	cmp	r3, #0
 8017964:	da03      	bge.n	801796e <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8017966:	4b24      	ldr	r3, [pc, #144]	; (80179f8 <SX1276SetModem+0xac>)
 8017968:	2201      	movs	r2, #1
 801796a:	715a      	strb	r2, [r3, #5]
 801796c:	e002      	b.n	8017974 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801796e:	4b22      	ldr	r3, [pc, #136]	; (80179f8 <SX1276SetModem+0xac>)
 8017970:	2200      	movs	r2, #0
 8017972:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8017974:	4b20      	ldr	r3, [pc, #128]	; (80179f8 <SX1276SetModem+0xac>)
 8017976:	795b      	ldrb	r3, [r3, #5]
 8017978:	1dfa      	adds	r2, r7, #7
 801797a:	7812      	ldrb	r2, [r2, #0]
 801797c:	429a      	cmp	r2, r3
 801797e:	d037      	beq.n	80179f0 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8017980:	4b1d      	ldr	r3, [pc, #116]	; (80179f8 <SX1276SetModem+0xac>)
 8017982:	1dfa      	adds	r2, r7, #7
 8017984:	7812      	ldrb	r2, [r2, #0]
 8017986:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8017988:	4b1b      	ldr	r3, [pc, #108]	; (80179f8 <SX1276SetModem+0xac>)
 801798a:	795b      	ldrb	r3, [r3, #5]
 801798c:	2b01      	cmp	r3, #1
 801798e:	d016      	beq.n	80179be <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 8017990:	f7ff fc5e 	bl	8017250 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8017994:	2001      	movs	r0, #1
 8017996:	f000 f845 	bl	8017a24 <SX1276Read>
 801799a:	0003      	movs	r3, r0
 801799c:	001a      	movs	r2, r3
 801799e:	237f      	movs	r3, #127	; 0x7f
 80179a0:	4013      	ands	r3, r2
 80179a2:	b2db      	uxtb	r3, r3
 80179a4:	0019      	movs	r1, r3
 80179a6:	2001      	movs	r0, #1
 80179a8:	f000 f828 	bl	80179fc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80179ac:	2100      	movs	r1, #0
 80179ae:	2040      	movs	r0, #64	; 0x40
 80179b0:	f000 f824 	bl	80179fc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80179b4:	2130      	movs	r1, #48	; 0x30
 80179b6:	2041      	movs	r0, #65	; 0x41
 80179b8:	f000 f820 	bl	80179fc <SX1276Write>
        break;
 80179bc:	e019      	b.n	80179f2 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 80179be:	f7ff fc47 	bl	8017250 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80179c2:	2001      	movs	r0, #1
 80179c4:	f000 f82e 	bl	8017a24 <SX1276Read>
 80179c8:	0003      	movs	r3, r0
 80179ca:	001a      	movs	r2, r3
 80179cc:	2380      	movs	r3, #128	; 0x80
 80179ce:	425b      	negs	r3, r3
 80179d0:	4313      	orrs	r3, r2
 80179d2:	b2db      	uxtb	r3, r3
 80179d4:	0019      	movs	r1, r3
 80179d6:	2001      	movs	r0, #1
 80179d8:	f000 f810 	bl	80179fc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80179dc:	2100      	movs	r1, #0
 80179de:	2040      	movs	r0, #64	; 0x40
 80179e0:	f000 f80c 	bl	80179fc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80179e4:	2100      	movs	r1, #0
 80179e6:	2041      	movs	r0, #65	; 0x41
 80179e8:	f000 f808 	bl	80179fc <SX1276Write>
        break;
 80179ec:	46c0      	nop			; (mov r8, r8)
 80179ee:	e000      	b.n	80179f2 <SX1276SetModem+0xa6>
        return;
 80179f0:	46c0      	nop			; (mov r8, r8)
    }
}
 80179f2:	46bd      	mov	sp, r7
 80179f4:	b002      	add	sp, #8
 80179f6:	bd80      	pop	{r7, pc}
 80179f8:	200015ec 	.word	0x200015ec

080179fc <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	0002      	movs	r2, r0
 8017a04:	1dbb      	adds	r3, r7, #6
 8017a06:	801a      	strh	r2, [r3, #0]
 8017a08:	1d7b      	adds	r3, r7, #5
 8017a0a:	1c0a      	adds	r2, r1, #0
 8017a0c:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 8017a0e:	1d79      	adds	r1, r7, #5
 8017a10:	1dbb      	adds	r3, r7, #6
 8017a12:	881b      	ldrh	r3, [r3, #0]
 8017a14:	2201      	movs	r2, #1
 8017a16:	0018      	movs	r0, r3
 8017a18:	f000 f818 	bl	8017a4c <SX1276WriteBuffer>
}
 8017a1c:	46c0      	nop			; (mov r8, r8)
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	b002      	add	sp, #8
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8017a24:	b590      	push	{r4, r7, lr}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	0002      	movs	r2, r0
 8017a2c:	1dbb      	adds	r3, r7, #6
 8017a2e:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8017a30:	240f      	movs	r4, #15
 8017a32:	1939      	adds	r1, r7, r4
 8017a34:	1dbb      	adds	r3, r7, #6
 8017a36:	881b      	ldrh	r3, [r3, #0]
 8017a38:	2201      	movs	r2, #1
 8017a3a:	0018      	movs	r0, r3
 8017a3c:	f000 f854 	bl	8017ae8 <SX1276ReadBuffer>
    return data;
 8017a40:	193b      	adds	r3, r7, r4
 8017a42:	781b      	ldrb	r3, [r3, #0]
}
 8017a44:	0018      	movs	r0, r3
 8017a46:	46bd      	mov	sp, r7
 8017a48:	b005      	add	sp, #20
 8017a4a:	bd90      	pop	{r4, r7, pc}

08017a4c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017a4c:	b590      	push	{r4, r7, lr}
 8017a4e:	b085      	sub	sp, #20
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6039      	str	r1, [r7, #0]
 8017a54:	0011      	movs	r1, r2
 8017a56:	1dbb      	adds	r3, r7, #6
 8017a58:	1c02      	adds	r2, r0, #0
 8017a5a:	801a      	strh	r2, [r3, #0]
 8017a5c:	1d7b      	adds	r3, r7, #5
 8017a5e:	1c0a      	adds	r2, r1, #0
 8017a60:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017a62:	2380      	movs	r3, #128	; 0x80
 8017a64:	021b      	lsls	r3, r3, #8
 8017a66:	0019      	movs	r1, r3
 8017a68:	2000      	movs	r0, #0
 8017a6a:	f006 faa5 	bl	801dfb8 <gpio_reset>

	uint16_t tx = addr | 0x80;
 8017a6e:	1dbb      	adds	r3, r7, #6
 8017a70:	881b      	ldrh	r3, [r3, #0]
 8017a72:	2280      	movs	r2, #128	; 0x80
 8017a74:	4313      	orrs	r3, r2
 8017a76:	b29a      	uxth	r2, r3
 8017a78:	210c      	movs	r1, #12
 8017a7a:	187b      	adds	r3, r7, r1
 8017a7c:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017a7e:	230a      	movs	r3, #10
 8017a80:	18fa      	adds	r2, r7, r3
 8017a82:	1879      	adds	r1, r7, r1
 8017a84:	4817      	ldr	r0, [pc, #92]	; (8017ae4 <SX1276WriteBuffer+0x98>)
 8017a86:	2301      	movs	r3, #1
 8017a88:	f007 faec 	bl	801f064 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8017a8c:	230f      	movs	r3, #15
 8017a8e:	18fb      	adds	r3, r7, r3
 8017a90:	2200      	movs	r2, #0
 8017a92:	701a      	strb	r2, [r3, #0]
 8017a94:	e015      	b.n	8017ac2 <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 8017a96:	240f      	movs	r4, #15
 8017a98:	193b      	adds	r3, r7, r4
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	683a      	ldr	r2, [r7, #0]
 8017a9e:	18d3      	adds	r3, r2, r3
 8017aa0:	781b      	ldrb	r3, [r3, #0]
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	210c      	movs	r1, #12
 8017aa6:	187b      	adds	r3, r7, r1
 8017aa8:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017aaa:	230a      	movs	r3, #10
 8017aac:	18fa      	adds	r2, r7, r3
 8017aae:	1879      	adds	r1, r7, r1
 8017ab0:	480c      	ldr	r0, [pc, #48]	; (8017ae4 <SX1276WriteBuffer+0x98>)
 8017ab2:	2301      	movs	r3, #1
 8017ab4:	f007 fad6 	bl	801f064 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8017ab8:	193b      	adds	r3, r7, r4
 8017aba:	781a      	ldrb	r2, [r3, #0]
 8017abc:	193b      	adds	r3, r7, r4
 8017abe:	3201      	adds	r2, #1
 8017ac0:	701a      	strb	r2, [r3, #0]
 8017ac2:	230f      	movs	r3, #15
 8017ac4:	18fa      	adds	r2, r7, r3
 8017ac6:	1d7b      	adds	r3, r7, #5
 8017ac8:	7812      	ldrb	r2, [r2, #0]
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d3e2      	bcc.n	8017a96 <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017ad0:	2380      	movs	r3, #128	; 0x80
 8017ad2:	021b      	lsls	r3, r3, #8
 8017ad4:	0019      	movs	r1, r3
 8017ad6:	2000      	movs	r0, #0
 8017ad8:	f006 fa56 	bl	801df88 <gpio_set>
}
 8017adc:	46c0      	nop			; (mov r8, r8)
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	b005      	add	sp, #20
 8017ae2:	bd90      	pop	{r4, r7, pc}
 8017ae4:	20001450 	.word	0x20001450

08017ae8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017ae8:	b590      	push	{r4, r7, lr}
 8017aea:	b085      	sub	sp, #20
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6039      	str	r1, [r7, #0]
 8017af0:	0011      	movs	r1, r2
 8017af2:	1dbb      	adds	r3, r7, #6
 8017af4:	1c02      	adds	r2, r0, #0
 8017af6:	801a      	strh	r2, [r3, #0]
 8017af8:	1d7b      	adds	r3, r7, #5
 8017afa:	1c0a      	adds	r2, r1, #0
 8017afc:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017afe:	2380      	movs	r3, #128	; 0x80
 8017b00:	021b      	lsls	r3, r3, #8
 8017b02:	0019      	movs	r1, r3
 8017b04:	2000      	movs	r0, #0
 8017b06:	f006 fa57 	bl	801dfb8 <gpio_reset>

	uint16_t tx = addr & 0x7f;
 8017b0a:	1dbb      	adds	r3, r7, #6
 8017b0c:	881b      	ldrh	r3, [r3, #0]
 8017b0e:	227f      	movs	r2, #127	; 0x7f
 8017b10:	4013      	ands	r3, r2
 8017b12:	b29a      	uxth	r2, r3
 8017b14:	210c      	movs	r1, #12
 8017b16:	187b      	adds	r3, r7, r1
 8017b18:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017b1a:	230a      	movs	r3, #10
 8017b1c:	18fa      	adds	r2, r7, r3
 8017b1e:	000c      	movs	r4, r1
 8017b20:	1879      	adds	r1, r7, r1
 8017b22:	481a      	ldr	r0, [pc, #104]	; (8017b8c <SX1276ReadBuffer+0xa4>)
 8017b24:	2301      	movs	r3, #1
 8017b26:	f007 fa9d 	bl	801f064 <spi_rwRegister>

	tx = 0;
 8017b2a:	0021      	movs	r1, r4
 8017b2c:	187b      	adds	r3, r7, r1
 8017b2e:	2200      	movs	r2, #0
 8017b30:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017b32:	230f      	movs	r3, #15
 8017b34:	18fb      	adds	r3, r7, r3
 8017b36:	2200      	movs	r2, #0
 8017b38:	701a      	strb	r2, [r3, #0]
 8017b3a:	e015      	b.n	8017b68 <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017b3c:	240a      	movs	r4, #10
 8017b3e:	193a      	adds	r2, r7, r4
 8017b40:	230c      	movs	r3, #12
 8017b42:	18f9      	adds	r1, r7, r3
 8017b44:	4811      	ldr	r0, [pc, #68]	; (8017b8c <SX1276ReadBuffer+0xa4>)
 8017b46:	2301      	movs	r3, #1
 8017b48:	f007 fa8c 	bl	801f064 <spi_rwRegister>
    	buffer[i] = rx;
 8017b4c:	193b      	adds	r3, r7, r4
 8017b4e:	8819      	ldrh	r1, [r3, #0]
 8017b50:	200f      	movs	r0, #15
 8017b52:	183b      	adds	r3, r7, r0
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	683a      	ldr	r2, [r7, #0]
 8017b58:	18d3      	adds	r3, r2, r3
 8017b5a:	b2ca      	uxtb	r2, r1
 8017b5c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017b5e:	183b      	adds	r3, r7, r0
 8017b60:	781a      	ldrb	r2, [r3, #0]
 8017b62:	183b      	adds	r3, r7, r0
 8017b64:	3201      	adds	r2, #1
 8017b66:	701a      	strb	r2, [r3, #0]
 8017b68:	230f      	movs	r3, #15
 8017b6a:	18fa      	adds	r2, r7, r3
 8017b6c:	1d7b      	adds	r3, r7, #5
 8017b6e:	7812      	ldrb	r2, [r2, #0]
 8017b70:	781b      	ldrb	r3, [r3, #0]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d3e2      	bcc.n	8017b3c <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 8017b76:	2380      	movs	r3, #128	; 0x80
 8017b78:	021b      	lsls	r3, r3, #8
 8017b7a:	0019      	movs	r1, r3
 8017b7c:	2000      	movs	r0, #0
 8017b7e:	f006 fa03 	bl	801df88 <gpio_set>
}
 8017b82:	46c0      	nop			; (mov r8, r8)
 8017b84:	46bd      	mov	sp, r7
 8017b86:	b005      	add	sp, #20
 8017b88:	bd90      	pop	{r4, r7, pc}
 8017b8a:	46c0      	nop			; (mov r8, r8)
 8017b8c:	20001450 	.word	0x20001450

08017b90 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	000a      	movs	r2, r1
 8017b9a:	1cfb      	adds	r3, r7, #3
 8017b9c:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 8017b9e:	1cfb      	adds	r3, r7, #3
 8017ba0:	781a      	ldrb	r2, [r3, #0]
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	0019      	movs	r1, r3
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	f7ff ff50 	bl	8017a4c <SX1276WriteBuffer>
}
 8017bac:	46c0      	nop			; (mov r8, r8)
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	b002      	add	sp, #8
 8017bb2:	bd80      	pop	{r7, pc}

08017bb4 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	000a      	movs	r2, r1
 8017bbe:	1cfb      	adds	r3, r7, #3
 8017bc0:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 8017bc2:	1cfb      	adds	r3, r7, #3
 8017bc4:	781a      	ldrb	r2, [r3, #0]
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	0019      	movs	r1, r3
 8017bca:	2000      	movs	r0, #0
 8017bcc:	f7ff ff8c 	bl	8017ae8 <SX1276ReadBuffer>
}
 8017bd0:	46c0      	nop			; (mov r8, r8)
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	b002      	add	sp, #8
 8017bd6:	bd80      	pop	{r7, pc}

08017bd8 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b082      	sub	sp, #8
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	0002      	movs	r2, r0
 8017be0:	1dfb      	adds	r3, r7, #7
 8017be2:	701a      	strb	r2, [r3, #0]
 8017be4:	1dbb      	adds	r3, r7, #6
 8017be6:	1c0a      	adds	r2, r1, #0
 8017be8:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 8017bea:	1dfb      	adds	r3, r7, #7
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	0018      	movs	r0, r3
 8017bf0:	f7ff feac 	bl	801794c <SX1276SetModem>

    switch( modem )
 8017bf4:	1dfb      	adds	r3, r7, #7
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d002      	beq.n	8017c02 <SX1276SetMaxPayloadLength+0x2a>
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d00f      	beq.n	8017c20 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8017c00:	e016      	b.n	8017c30 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8017c02:	4b0d      	ldr	r3, [pc, #52]	; (8017c38 <SX1276SetMaxPayloadLength+0x60>)
 8017c04:	2222      	movs	r2, #34	; 0x22
 8017c06:	5c9b      	ldrb	r3, [r3, r2]
 8017c08:	2201      	movs	r2, #1
 8017c0a:	4053      	eors	r3, r2
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d00d      	beq.n	8017c2e <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8017c12:	1dbb      	adds	r3, r7, #6
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	0019      	movs	r1, r3
 8017c18:	2032      	movs	r0, #50	; 0x32
 8017c1a:	f7ff feef 	bl	80179fc <SX1276Write>
        break;
 8017c1e:	e006      	b.n	8017c2e <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8017c20:	1dbb      	adds	r3, r7, #6
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	0019      	movs	r1, r3
 8017c26:	2023      	movs	r0, #35	; 0x23
 8017c28:	f7ff fee8 	bl	80179fc <SX1276Write>
        break;
 8017c2c:	e000      	b.n	8017c30 <SX1276SetMaxPayloadLength+0x58>
        break;
 8017c2e:	46c0      	nop			; (mov r8, r8)
}
 8017c30:	46c0      	nop			; (mov r8, r8)
 8017c32:	46bd      	mov	sp, r7
 8017c34:	b002      	add	sp, #8
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	200015ec 	.word	0x200015ec

08017c3c <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b082      	sub	sp, #8
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	0002      	movs	r2, r0
 8017c44:	1dfb      	adds	r3, r7, #7
 8017c46:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 8017c48:	2001      	movs	r0, #1
 8017c4a:	f7ff fe7f 	bl	801794c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8017c4e:	4b0b      	ldr	r3, [pc, #44]	; (8017c7c <SX1276SetPublicNetwork+0x40>)
 8017c50:	1dfa      	adds	r2, r7, #7
 8017c52:	215c      	movs	r1, #92	; 0x5c
 8017c54:	7812      	ldrb	r2, [r2, #0]
 8017c56:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 8017c58:	1dfb      	adds	r3, r7, #7
 8017c5a:	781b      	ldrb	r3, [r3, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d004      	beq.n	8017c6a <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8017c60:	2134      	movs	r1, #52	; 0x34
 8017c62:	2039      	movs	r0, #57	; 0x39
 8017c64:	f7ff feca 	bl	80179fc <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8017c68:	e003      	b.n	8017c72 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8017c6a:	2112      	movs	r1, #18
 8017c6c:	2039      	movs	r0, #57	; 0x39
 8017c6e:	f7ff fec5 	bl	80179fc <SX1276Write>
}
 8017c72:	46c0      	nop			; (mov r8, r8)
 8017c74:	46bd      	mov	sp, r7
 8017c76:	b002      	add	sp, #8
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	46c0      	nop			; (mov r8, r8)
 8017c7c:	200015ec 	.word	0x200015ec

08017c80 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 8017c84:	4b04      	ldr	r3, [pc, #16]	; (8017c98 <SX1276GetWakeupTime+0x18>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	4798      	blx	r3
 8017c8c:	0003      	movs	r3, r0
 8017c8e:	3335      	adds	r3, #53	; 0x35
}
 8017c90:	0018      	movs	r0, r3
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}
 8017c96:	46c0      	nop			; (mov r8, r8)
 8017c98:	200011a0 	.word	0x200011a0

08017c9c <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8017c9c:	b590      	push	{r4, r7, lr}
 8017c9e:	b085      	sub	sp, #20
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 8017ca4:	4b51      	ldr	r3, [pc, #324]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017ca6:	791b      	ldrb	r3, [r3, #4]
 8017ca8:	2b01      	cmp	r3, #1
 8017caa:	d002      	beq.n	8017cb2 <SX1276OnTimeoutIrq+0x16>
 8017cac:	2b02      	cmp	r3, #2
 8017cae:	d045      	beq.n	8017d3c <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8017cb0:	e098      	b.n	8017de4 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8017cb2:	4b4e      	ldr	r3, [pc, #312]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017cb4:	795b      	ldrb	r3, [r3, #5]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d132      	bne.n	8017d20 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017cba:	4b4c      	ldr	r3, [pc, #304]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017cbc:	2230      	movs	r2, #48	; 0x30
 8017cbe:	2100      	movs	r1, #0
 8017cc0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017cc2:	4b4a      	ldr	r3, [pc, #296]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017cc4:	2231      	movs	r2, #49	; 0x31
 8017cc6:	2100      	movs	r1, #0
 8017cc8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017cca:	4b48      	ldr	r3, [pc, #288]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017ccc:	2200      	movs	r2, #0
 8017cce:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8017cd0:	4b46      	ldr	r3, [pc, #280]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8017cd6:	210b      	movs	r1, #11
 8017cd8:	203e      	movs	r0, #62	; 0x3e
 8017cda:	f7ff fe8f 	bl	80179fc <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8017cde:	2110      	movs	r1, #16
 8017ce0:	203f      	movs	r0, #63	; 0x3f
 8017ce2:	f7ff fe8b 	bl	80179fc <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8017ce6:	4b41      	ldr	r3, [pc, #260]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017ce8:	2226      	movs	r2, #38	; 0x26
 8017cea:	5c9b      	ldrb	r3, [r3, r2]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d010      	beq.n	8017d12 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017cf0:	200d      	movs	r0, #13
 8017cf2:	f7ff fe97 	bl	8017a24 <SX1276Read>
 8017cf6:	0003      	movs	r3, r0
 8017cf8:	001a      	movs	r2, r3
 8017cfa:	2340      	movs	r3, #64	; 0x40
 8017cfc:	4313      	orrs	r3, r2
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	0019      	movs	r1, r3
 8017d02:	200d      	movs	r0, #13
 8017d04:	f7ff fe7a 	bl	80179fc <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8017d08:	4b39      	ldr	r3, [pc, #228]	; (8017df0 <SX1276OnTimeoutIrq+0x154>)
 8017d0a:	0018      	movs	r0, r3
 8017d0c:	f7fd fd90 	bl	8015830 <TimerStart>
 8017d10:	e006      	b.n	8017d20 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8017d12:	4b36      	ldr	r3, [pc, #216]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017d14:	2200      	movs	r2, #0
 8017d16:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8017d18:	4b35      	ldr	r3, [pc, #212]	; (8017df0 <SX1276OnTimeoutIrq+0x154>)
 8017d1a:	0018      	movs	r0, r3
 8017d1c:	f7fd fdde 	bl	80158dc <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d20:	4b34      	ldr	r3, [pc, #208]	; (8017df4 <SX1276OnTimeoutIrq+0x158>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d05a      	beq.n	8017dde <SX1276OnTimeoutIrq+0x142>
 8017d28:	4b32      	ldr	r3, [pc, #200]	; (8017df4 <SX1276OnTimeoutIrq+0x158>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	68db      	ldr	r3, [r3, #12]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d055      	beq.n	8017dde <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 8017d32:	4b30      	ldr	r3, [pc, #192]	; (8017df4 <SX1276OnTimeoutIrq+0x158>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	68db      	ldr	r3, [r3, #12]
 8017d38:	4798      	blx	r3
        break;
 8017d3a:	e050      	b.n	8017dde <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 8017d3c:	f7ff fd9c 	bl	8017878 <SX1276Reset>
        RxChainCalibration( );
 8017d40:	f7fe fae4 	bl	801630c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8017d44:	2000      	movs	r0, #0
 8017d46:	f7ff fdb1 	bl	80178ac <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017d4a:	230f      	movs	r3, #15
 8017d4c:	18fb      	adds	r3, r7, r3
 8017d4e:	2200      	movs	r2, #0
 8017d50:	701a      	strb	r2, [r3, #0]
 8017d52:	e025      	b.n	8017da0 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8017d54:	240f      	movs	r4, #15
 8017d56:	193b      	adds	r3, r7, r4
 8017d58:	781a      	ldrb	r2, [r3, #0]
 8017d5a:	4927      	ldr	r1, [pc, #156]	; (8017df8 <SX1276OnTimeoutIrq+0x15c>)
 8017d5c:	0013      	movs	r3, r2
 8017d5e:	005b      	lsls	r3, r3, #1
 8017d60:	189b      	adds	r3, r3, r2
 8017d62:	5c5b      	ldrb	r3, [r3, r1]
 8017d64:	0018      	movs	r0, r3
 8017d66:	f7ff fdf1 	bl	801794c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8017d6a:	193b      	adds	r3, r7, r4
 8017d6c:	781a      	ldrb	r2, [r3, #0]
 8017d6e:	4922      	ldr	r1, [pc, #136]	; (8017df8 <SX1276OnTimeoutIrq+0x15c>)
 8017d70:	0013      	movs	r3, r2
 8017d72:	005b      	lsls	r3, r3, #1
 8017d74:	189b      	adds	r3, r3, r2
 8017d76:	18cb      	adds	r3, r1, r3
 8017d78:	3301      	adds	r3, #1
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	b298      	uxth	r0, r3
 8017d7e:	193b      	adds	r3, r7, r4
 8017d80:	781a      	ldrb	r2, [r3, #0]
 8017d82:	491d      	ldr	r1, [pc, #116]	; (8017df8 <SX1276OnTimeoutIrq+0x15c>)
 8017d84:	0013      	movs	r3, r2
 8017d86:	005b      	lsls	r3, r3, #1
 8017d88:	189b      	adds	r3, r3, r2
 8017d8a:	18cb      	adds	r3, r1, r3
 8017d8c:	3302      	adds	r3, #2
 8017d8e:	781b      	ldrb	r3, [r3, #0]
 8017d90:	0019      	movs	r1, r3
 8017d92:	f7ff fe33 	bl	80179fc <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017d96:	193b      	adds	r3, r7, r4
 8017d98:	781a      	ldrb	r2, [r3, #0]
 8017d9a:	193b      	adds	r3, r7, r4
 8017d9c:	3201      	adds	r2, #1
 8017d9e:	701a      	strb	r2, [r3, #0]
 8017da0:	230f      	movs	r3, #15
 8017da2:	18fb      	adds	r3, r7, r3
 8017da4:	781b      	ldrb	r3, [r3, #0]
 8017da6:	2b0f      	cmp	r3, #15
 8017da8:	d9d4      	bls.n	8017d54 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 8017daa:	2000      	movs	r0, #0
 8017dac:	f7ff fdce 	bl	801794c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8017db0:	4b0e      	ldr	r3, [pc, #56]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017db2:	225c      	movs	r2, #92	; 0x5c
 8017db4:	5c9b      	ldrb	r3, [r3, r2]
 8017db6:	0018      	movs	r0, r3
 8017db8:	f7ff ff40 	bl	8017c3c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8017dbc:	4b0b      	ldr	r3, [pc, #44]	; (8017dec <SX1276OnTimeoutIrq+0x150>)
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017dc2:	4b0c      	ldr	r3, [pc, #48]	; (8017df4 <SX1276OnTimeoutIrq+0x158>)
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00b      	beq.n	8017de2 <SX1276OnTimeoutIrq+0x146>
 8017dca:	4b0a      	ldr	r3, [pc, #40]	; (8017df4 <SX1276OnTimeoutIrq+0x158>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	685b      	ldr	r3, [r3, #4]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d006      	beq.n	8017de2 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8017dd4:	4b07      	ldr	r3, [pc, #28]	; (8017df4 <SX1276OnTimeoutIrq+0x158>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	4798      	blx	r3
        break;
 8017ddc:	e001      	b.n	8017de2 <SX1276OnTimeoutIrq+0x146>
        break;
 8017dde:	46c0      	nop			; (mov r8, r8)
 8017de0:	e000      	b.n	8017de4 <SX1276OnTimeoutIrq+0x148>
        break;
 8017de2:	46c0      	nop			; (mov r8, r8)
    }
}
 8017de4:	46c0      	nop			; (mov r8, r8)
 8017de6:	46bd      	mov	sp, r7
 8017de8:	b005      	add	sp, #20
 8017dea:	bd90      	pop	{r4, r7, pc}
 8017dec:	200015ec 	.word	0x200015ec
 8017df0:	200015d4 	.word	0x200015d4
 8017df4:	2000109c 	.word	0x2000109c
 8017df8:	08021bbc 	.word	0x08021bbc

08017dfc <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8017dfc:	b5b0      	push	{r4, r5, r7, lr}
 8017dfe:	b084      	sub	sp, #16
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 8017e04:	230d      	movs	r3, #13
 8017e06:	18fb      	adds	r3, r7, r3
 8017e08:	2200      	movs	r2, #0
 8017e0a:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8017e0c:	4bca      	ldr	r3, [pc, #808]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017e0e:	791b      	ldrb	r3, [r3, #4]
 8017e10:	2b01      	cmp	r3, #1
 8017e12:	d003      	beq.n	8017e1c <SX1276OnDio0Irq+0x20>
 8017e14:	2b02      	cmp	r3, #2
 8017e16:	d100      	bne.n	8017e1a <SX1276OnDio0Irq+0x1e>
 8017e18:	e1f2      	b.n	8018200 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 8017e1a:	e20f      	b.n	801823c <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8017e1c:	4bc6      	ldr	r3, [pc, #792]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017e1e:	795b      	ldrb	r3, [r3, #5]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d003      	beq.n	8017e2c <SX1276OnDio0Irq+0x30>
 8017e24:	2b01      	cmp	r3, #1
 8017e26:	d100      	bne.n	8017e2a <SX1276OnDio0Irq+0x2e>
 8017e28:	e0eb      	b.n	8018002 <SX1276OnDio0Irq+0x206>
                break;
 8017e2a:	e1e8      	b.n	80181fe <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8017e2c:	4bc2      	ldr	r3, [pc, #776]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017e2e:	2224      	movs	r2, #36	; 0x24
 8017e30:	5c9b      	ldrb	r3, [r3, r2]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d057      	beq.n	8017ee6 <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8017e36:	203f      	movs	r0, #63	; 0x3f
 8017e38:	f7ff fdf4 	bl	8017a24 <SX1276Read>
 8017e3c:	0003      	movs	r3, r0
 8017e3e:	001a      	movs	r2, r3
 8017e40:	210d      	movs	r1, #13
 8017e42:	187b      	adds	r3, r7, r1
 8017e44:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8017e46:	187b      	adds	r3, r7, r1
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	001a      	movs	r2, r3
 8017e4e:	2302      	movs	r3, #2
 8017e50:	4013      	ands	r3, r2
 8017e52:	2b02      	cmp	r3, #2
 8017e54:	d047      	beq.n	8017ee6 <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8017e56:	210b      	movs	r1, #11
 8017e58:	203e      	movs	r0, #62	; 0x3e
 8017e5a:	f7ff fdcf 	bl	80179fc <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8017e5e:	2110      	movs	r1, #16
 8017e60:	203f      	movs	r0, #63	; 0x3f
 8017e62:	f7ff fdcb 	bl	80179fc <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8017e66:	4bb5      	ldr	r3, [pc, #724]	; (801813c <SX1276OnDio0Irq+0x340>)
 8017e68:	0018      	movs	r0, r3
 8017e6a:	f7fd fd37 	bl	80158dc <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8017e6e:	4bb2      	ldr	r3, [pc, #712]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017e70:	2226      	movs	r2, #38	; 0x26
 8017e72:	5c9b      	ldrb	r3, [r3, r2]
 8017e74:	2201      	movs	r2, #1
 8017e76:	4053      	eors	r3, r2
 8017e78:	b2db      	uxtb	r3, r3
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d007      	beq.n	8017e8e <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 8017e7e:	4bb0      	ldr	r3, [pc, #704]	; (8018140 <SX1276OnDio0Irq+0x344>)
 8017e80:	0018      	movs	r0, r3
 8017e82:	f7fd fd2b 	bl	80158dc <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8017e86:	4bac      	ldr	r3, [pc, #688]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017e88:	2200      	movs	r2, #0
 8017e8a:	711a      	strb	r2, [r3, #4]
 8017e8c:	e00f      	b.n	8017eae <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017e8e:	200d      	movs	r0, #13
 8017e90:	f7ff fdc8 	bl	8017a24 <SX1276Read>
 8017e94:	0003      	movs	r3, r0
 8017e96:	001a      	movs	r2, r3
 8017e98:	2340      	movs	r3, #64	; 0x40
 8017e9a:	4313      	orrs	r3, r2
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	0019      	movs	r1, r3
 8017ea0:	200d      	movs	r0, #13
 8017ea2:	f7ff fdab 	bl	80179fc <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8017ea6:	4ba6      	ldr	r3, [pc, #664]	; (8018140 <SX1276OnDio0Irq+0x344>)
 8017ea8:	0018      	movs	r0, r3
 8017eaa:	f7fd fcc1 	bl	8015830 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8017eae:	4ba5      	ldr	r3, [pc, #660]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d008      	beq.n	8017ec8 <SX1276OnDio0Irq+0xcc>
 8017eb6:	4ba3      	ldr	r3, [pc, #652]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	691b      	ldr	r3, [r3, #16]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d003      	beq.n	8017ec8 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 8017ec0:	4ba0      	ldr	r3, [pc, #640]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	691b      	ldr	r3, [r3, #16]
 8017ec6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017ec8:	4b9b      	ldr	r3, [pc, #620]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017eca:	2230      	movs	r2, #48	; 0x30
 8017ecc:	2100      	movs	r1, #0
 8017ece:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017ed0:	4b99      	ldr	r3, [pc, #612]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ed2:	2231      	movs	r2, #49	; 0x31
 8017ed4:	2100      	movs	r1, #0
 8017ed6:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017ed8:	4b97      	ldr	r3, [pc, #604]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017eda:	2200      	movs	r2, #0
 8017edc:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8017ede:	4b96      	ldr	r3, [pc, #600]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8017ee4:	e18b      	b.n	80181fe <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8017ee6:	4b94      	ldr	r3, [pc, #592]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ee8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d12d      	bne.n	8017f4a <SX1276OnDio0Irq+0x14e>
 8017eee:	4b92      	ldr	r3, [pc, #584]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ef0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d129      	bne.n	8017f4a <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8017ef6:	4b90      	ldr	r3, [pc, #576]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ef8:	2222      	movs	r2, #34	; 0x22
 8017efa:	5c9b      	ldrb	r3, [r3, r2]
 8017efc:	2201      	movs	r2, #1
 8017efe:	4053      	eors	r3, r2
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d005      	beq.n	8017f12 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8017f06:	4b90      	ldr	r3, [pc, #576]	; (8018148 <SX1276OnDio0Irq+0x34c>)
 8017f08:	2101      	movs	r1, #1
 8017f0a:	0018      	movs	r0, r3
 8017f0c:	f7ff fe52 	bl	8017bb4 <SX1276ReadFifo>
 8017f10:	e006      	b.n	8017f20 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8017f12:	2032      	movs	r0, #50	; 0x32
 8017f14:	f7ff fd86 	bl	8017a24 <SX1276Read>
 8017f18:	0003      	movs	r3, r0
 8017f1a:	b29a      	uxth	r2, r3
 8017f1c:	4b86      	ldr	r3, [pc, #536]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f1e:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f20:	4b85      	ldr	r3, [pc, #532]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f24:	001a      	movs	r2, r3
 8017f26:	4b89      	ldr	r3, [pc, #548]	; (801814c <SX1276OnDio0Irq+0x350>)
 8017f28:	18d0      	adds	r0, r2, r3
 8017f2a:	4b83      	ldr	r3, [pc, #524]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f2c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017f2e:	b2da      	uxtb	r2, r3
 8017f30:	4b81      	ldr	r3, [pc, #516]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f32:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f34:	b2db      	uxtb	r3, r3
 8017f36:	1ad3      	subs	r3, r2, r3
 8017f38:	b2db      	uxtb	r3, r3
 8017f3a:	0019      	movs	r1, r3
 8017f3c:	f7ff fe3a 	bl	8017bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f40:	4b7d      	ldr	r3, [pc, #500]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f42:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017f44:	4b7c      	ldr	r3, [pc, #496]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f46:	879a      	strh	r2, [r3, #60]	; 0x3c
 8017f48:	e013      	b.n	8017f72 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f4a:	4b7b      	ldr	r3, [pc, #492]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f4c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f4e:	001a      	movs	r2, r3
 8017f50:	4b7e      	ldr	r3, [pc, #504]	; (801814c <SX1276OnDio0Irq+0x350>)
 8017f52:	18d0      	adds	r0, r2, r3
 8017f54:	4b78      	ldr	r3, [pc, #480]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f56:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017f58:	b2da      	uxtb	r2, r3
 8017f5a:	4b77      	ldr	r3, [pc, #476]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f5c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017f5e:	b2db      	uxtb	r3, r3
 8017f60:	1ad3      	subs	r3, r2, r3
 8017f62:	b2db      	uxtb	r3, r3
 8017f64:	0019      	movs	r1, r3
 8017f66:	f7ff fe25 	bl	8017bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017f6a:	4b73      	ldr	r3, [pc, #460]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f6c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017f6e:	4b72      	ldr	r3, [pc, #456]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f70:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8017f72:	4b72      	ldr	r3, [pc, #456]	; (801813c <SX1276OnDio0Irq+0x340>)
 8017f74:	0018      	movs	r0, r3
 8017f76:	f7fd fcb1 	bl	80158dc <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8017f7a:	4b6f      	ldr	r3, [pc, #444]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f7c:	2226      	movs	r2, #38	; 0x26
 8017f7e:	5c9b      	ldrb	r3, [r3, r2]
 8017f80:	2201      	movs	r2, #1
 8017f82:	4053      	eors	r3, r2
 8017f84:	b2db      	uxtb	r3, r3
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d007      	beq.n	8017f9a <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 8017f8a:	4b6b      	ldr	r3, [pc, #428]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8017f90:	4b6b      	ldr	r3, [pc, #428]	; (8018140 <SX1276OnDio0Irq+0x344>)
 8017f92:	0018      	movs	r0, r3
 8017f94:	f7fd fca2 	bl	80158dc <TimerStop>
 8017f98:	e00f      	b.n	8017fba <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017f9a:	200d      	movs	r0, #13
 8017f9c:	f7ff fd42 	bl	8017a24 <SX1276Read>
 8017fa0:	0003      	movs	r3, r0
 8017fa2:	001a      	movs	r2, r3
 8017fa4:	2340      	movs	r3, #64	; 0x40
 8017fa6:	4313      	orrs	r3, r2
 8017fa8:	b2db      	uxtb	r3, r3
 8017faa:	0019      	movs	r1, r3
 8017fac:	200d      	movs	r0, #13
 8017fae:	f7ff fd25 	bl	80179fc <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8017fb2:	4b63      	ldr	r3, [pc, #396]	; (8018140 <SX1276OnDio0Irq+0x344>)
 8017fb4:	0018      	movs	r0, r3
 8017fb6:	f7fd fc3b 	bl	8015830 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017fba:	4b62      	ldr	r3, [pc, #392]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d010      	beq.n	8017fe4 <SX1276OnDio0Irq+0x1e8>
 8017fc2:	4b60      	ldr	r3, [pc, #384]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	689b      	ldr	r3, [r3, #8]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d00b      	beq.n	8017fe4 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8017fcc:	4b5d      	ldr	r3, [pc, #372]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	689c      	ldr	r4, [r3, #8]
 8017fd2:	4b59      	ldr	r3, [pc, #356]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017fd4:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8017fd6:	4b58      	ldr	r3, [pc, #352]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017fd8:	2232      	movs	r2, #50	; 0x32
 8017fda:	569b      	ldrsb	r3, [r3, r2]
 8017fdc:	b21a      	sxth	r2, r3
 8017fde:	485b      	ldr	r0, [pc, #364]	; (801814c <SX1276OnDio0Irq+0x350>)
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017fe4:	4b54      	ldr	r3, [pc, #336]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017fe6:	2230      	movs	r2, #48	; 0x30
 8017fe8:	2100      	movs	r1, #0
 8017fea:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017fec:	4b52      	ldr	r3, [pc, #328]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017fee:	2231      	movs	r2, #49	; 0x31
 8017ff0:	2100      	movs	r1, #0
 8017ff2:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017ff4:	4b50      	ldr	r3, [pc, #320]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8017ffa:	4b4f      	ldr	r3, [pc, #316]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8018000:	e0fd      	b.n	80181fe <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8018002:	2140      	movs	r1, #64	; 0x40
 8018004:	2012      	movs	r0, #18
 8018006:	f7ff fcf9 	bl	80179fc <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801800a:	2012      	movs	r0, #18
 801800c:	f7ff fd0a 	bl	8017a24 <SX1276Read>
 8018010:	0003      	movs	r3, r0
 8018012:	001a      	movs	r2, r3
 8018014:	210d      	movs	r1, #13
 8018016:	187b      	adds	r3, r7, r1
 8018018:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801801a:	187b      	adds	r3, r7, r1
 801801c:	781b      	ldrb	r3, [r3, #0]
 801801e:	b2db      	uxtb	r3, r3
 8018020:	001a      	movs	r2, r3
 8018022:	2320      	movs	r3, #32
 8018024:	4013      	ands	r3, r2
 8018026:	2b20      	cmp	r3, #32
 8018028:	d122      	bne.n	8018070 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801802a:	2120      	movs	r1, #32
 801802c:	2012      	movs	r0, #18
 801802e:	f7ff fce5 	bl	80179fc <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8018032:	4b41      	ldr	r3, [pc, #260]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8018034:	2256      	movs	r2, #86	; 0x56
 8018036:	5c9b      	ldrb	r3, [r3, r2]
 8018038:	2201      	movs	r2, #1
 801803a:	4053      	eors	r3, r2
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b00      	cmp	r3, #0
 8018040:	d002      	beq.n	8018048 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8018042:	4b3d      	ldr	r3, [pc, #244]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8018044:	2200      	movs	r2, #0
 8018046:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8018048:	4b3c      	ldr	r3, [pc, #240]	; (801813c <SX1276OnDio0Irq+0x340>)
 801804a:	0018      	movs	r0, r3
 801804c:	f7fd fc46 	bl	80158dc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8018050:	4b3c      	ldr	r3, [pc, #240]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d100      	bne.n	801805a <SX1276OnDio0Irq+0x25e>
 8018058:	e0ce      	b.n	80181f8 <SX1276OnDio0Irq+0x3fc>
 801805a:	4b3a      	ldr	r3, [pc, #232]	; (8018144 <SX1276OnDio0Irq+0x348>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	691b      	ldr	r3, [r3, #16]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d100      	bne.n	8018066 <SX1276OnDio0Irq+0x26a>
 8018064:	e0c8      	b.n	80181f8 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 8018066:	4b37      	ldr	r3, [pc, #220]	; (8018144 <SX1276OnDio0Irq+0x348>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	691b      	ldr	r3, [r3, #16]
 801806c:	4798      	blx	r3
                        break;
 801806e:	e0c3      	b.n	80181f8 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8018070:	2019      	movs	r0, #25
 8018072:	f7ff fcd7 	bl	8017a24 <SX1276Read>
 8018076:	0003      	movs	r3, r0
 8018078:	b25b      	sxtb	r3, r3
 801807a:	3302      	adds	r3, #2
 801807c:	109b      	asrs	r3, r3, #2
 801807e:	b259      	sxtb	r1, r3
 8018080:	4b2d      	ldr	r3, [pc, #180]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8018082:	2260      	movs	r2, #96	; 0x60
 8018084:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8018086:	201a      	movs	r0, #26
 8018088:	f7ff fccc 	bl	8017a24 <SX1276Read>
 801808c:	0003      	movs	r3, r0
 801808e:	001a      	movs	r2, r3
 8018090:	230e      	movs	r3, #14
 8018092:	18fb      	adds	r3, r7, r3
 8018094:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8018096:	4b28      	ldr	r3, [pc, #160]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8018098:	2260      	movs	r2, #96	; 0x60
 801809a:	569b      	ldrsb	r3, [r3, r2]
 801809c:	2b00      	cmp	r3, #0
 801809e:	da34      	bge.n	801810a <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80180a0:	4b25      	ldr	r3, [pc, #148]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 80180a2:	689b      	ldr	r3, [r3, #8]
 80180a4:	4a2a      	ldr	r2, [pc, #168]	; (8018150 <SX1276OnDio0Irq+0x354>)
 80180a6:	4293      	cmp	r3, r2
 80180a8:	d917      	bls.n	80180da <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80180aa:	210e      	movs	r1, #14
 80180ac:	187b      	adds	r3, r7, r1
 80180ae:	2200      	movs	r2, #0
 80180b0:	5e9b      	ldrsh	r3, [r3, r2]
 80180b2:	111b      	asrs	r3, r3, #4
 80180b4:	b21b      	sxth	r3, r3
 80180b6:	b29a      	uxth	r2, r3
 80180b8:	187b      	adds	r3, r7, r1
 80180ba:	881b      	ldrh	r3, [r3, #0]
 80180bc:	18d3      	adds	r3, r2, r3
 80180be:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80180c0:	4b1d      	ldr	r3, [pc, #116]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 80180c2:	2160      	movs	r1, #96	; 0x60
 80180c4:	565b      	ldrsb	r3, [r3, r1]
 80180c6:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80180c8:	18d3      	adds	r3, r2, r3
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	3b9d      	subs	r3, #157	; 0x9d
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	b219      	sxth	r1, r3
 80180d2:	4b19      	ldr	r3, [pc, #100]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 80180d4:	2262      	movs	r2, #98	; 0x62
 80180d6:	5299      	strh	r1, [r3, r2]
 80180d8:	e04d      	b.n	8018176 <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80180da:	210e      	movs	r1, #14
 80180dc:	187b      	adds	r3, r7, r1
 80180de:	2200      	movs	r2, #0
 80180e0:	5e9b      	ldrsh	r3, [r3, r2]
 80180e2:	111b      	asrs	r3, r3, #4
 80180e4:	b21b      	sxth	r3, r3
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	187b      	adds	r3, r7, r1
 80180ea:	881b      	ldrh	r3, [r3, #0]
 80180ec:	18d3      	adds	r3, r2, r3
 80180ee:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80180f0:	4b11      	ldr	r3, [pc, #68]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 80180f2:	2160      	movs	r1, #96	; 0x60
 80180f4:	565b      	ldrsb	r3, [r3, r1]
 80180f6:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80180f8:	18d3      	adds	r3, r2, r3
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	3ba4      	subs	r3, #164	; 0xa4
 80180fe:	b29b      	uxth	r3, r3
 8018100:	b219      	sxth	r1, r3
 8018102:	4b0d      	ldr	r3, [pc, #52]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8018104:	2262      	movs	r2, #98	; 0x62
 8018106:	5299      	strh	r1, [r3, r2]
 8018108:	e035      	b.n	8018176 <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801810a:	4b0b      	ldr	r3, [pc, #44]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 801810c:	689b      	ldr	r3, [r3, #8]
 801810e:	4a10      	ldr	r2, [pc, #64]	; (8018150 <SX1276OnDio0Irq+0x354>)
 8018110:	4293      	cmp	r3, r2
 8018112:	d91f      	bls.n	8018154 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8018114:	210e      	movs	r1, #14
 8018116:	187b      	adds	r3, r7, r1
 8018118:	2200      	movs	r2, #0
 801811a:	5e9b      	ldrsh	r3, [r3, r2]
 801811c:	111b      	asrs	r3, r3, #4
 801811e:	b21b      	sxth	r3, r3
 8018120:	b29a      	uxth	r2, r3
 8018122:	187b      	adds	r3, r7, r1
 8018124:	881b      	ldrh	r3, [r3, #0]
 8018126:	18d3      	adds	r3, r2, r3
 8018128:	b29b      	uxth	r3, r3
 801812a:	3b9d      	subs	r3, #157	; 0x9d
 801812c:	b29b      	uxth	r3, r3
 801812e:	b219      	sxth	r1, r3
 8018130:	4b01      	ldr	r3, [pc, #4]	; (8018138 <SX1276OnDio0Irq+0x33c>)
 8018132:	2262      	movs	r2, #98	; 0x62
 8018134:	5299      	strh	r1, [r3, r2]
 8018136:	e01e      	b.n	8018176 <SX1276OnDio0Irq+0x37a>
 8018138:	200015ec 	.word	0x200015ec
 801813c:	20001654 	.word	0x20001654
 8018140:	200015d4 	.word	0x200015d4
 8018144:	2000109c 	.word	0x2000109c
 8018148:	20001626 	.word	0x20001626
 801814c:	200010a0 	.word	0x200010a0
 8018150:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8018154:	210e      	movs	r1, #14
 8018156:	187b      	adds	r3, r7, r1
 8018158:	2200      	movs	r2, #0
 801815a:	5e9b      	ldrsh	r3, [r3, r2]
 801815c:	111b      	asrs	r3, r3, #4
 801815e:	b21b      	sxth	r3, r3
 8018160:	b29a      	uxth	r2, r3
 8018162:	187b      	adds	r3, r7, r1
 8018164:	881b      	ldrh	r3, [r3, #0]
 8018166:	18d3      	adds	r3, r2, r3
 8018168:	b29b      	uxth	r3, r3
 801816a:	3ba4      	subs	r3, #164	; 0xa4
 801816c:	b29b      	uxth	r3, r3
 801816e:	b219      	sxth	r1, r3
 8018170:	4b34      	ldr	r3, [pc, #208]	; (8018244 <SX1276OnDio0Irq+0x448>)
 8018172:	2262      	movs	r2, #98	; 0x62
 8018174:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8018176:	2013      	movs	r0, #19
 8018178:	f7ff fc54 	bl	8017a24 <SX1276Read>
 801817c:	0003      	movs	r3, r0
 801817e:	0019      	movs	r1, r3
 8018180:	4b30      	ldr	r3, [pc, #192]	; (8018244 <SX1276OnDio0Irq+0x448>)
 8018182:	2264      	movs	r2, #100	; 0x64
 8018184:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8018186:	2010      	movs	r0, #16
 8018188:	f7ff fc4c 	bl	8017a24 <SX1276Read>
 801818c:	0003      	movs	r3, r0
 801818e:	0019      	movs	r1, r3
 8018190:	200d      	movs	r0, #13
 8018192:	f7ff fc33 	bl	80179fc <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8018196:	4b2b      	ldr	r3, [pc, #172]	; (8018244 <SX1276OnDio0Irq+0x448>)
 8018198:	2264      	movs	r2, #100	; 0x64
 801819a:	5c9a      	ldrb	r2, [r3, r2]
 801819c:	4b2a      	ldr	r3, [pc, #168]	; (8018248 <SX1276OnDio0Irq+0x44c>)
 801819e:	0011      	movs	r1, r2
 80181a0:	0018      	movs	r0, r3
 80181a2:	f7ff fd07 	bl	8017bb4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80181a6:	4b27      	ldr	r3, [pc, #156]	; (8018244 <SX1276OnDio0Irq+0x448>)
 80181a8:	2256      	movs	r2, #86	; 0x56
 80181aa:	5c9b      	ldrb	r3, [r3, r2]
 80181ac:	2201      	movs	r2, #1
 80181ae:	4053      	eors	r3, r2
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d002      	beq.n	80181bc <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 80181b6:	4b23      	ldr	r3, [pc, #140]	; (8018244 <SX1276OnDio0Irq+0x448>)
 80181b8:	2200      	movs	r2, #0
 80181ba:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80181bc:	4b23      	ldr	r3, [pc, #140]	; (801824c <SX1276OnDio0Irq+0x450>)
 80181be:	0018      	movs	r0, r3
 80181c0:	f7fd fb8c 	bl	80158dc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80181c4:	4b22      	ldr	r3, [pc, #136]	; (8018250 <SX1276OnDio0Irq+0x454>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d017      	beq.n	80181fc <SX1276OnDio0Irq+0x400>
 80181cc:	4b20      	ldr	r3, [pc, #128]	; (8018250 <SX1276OnDio0Irq+0x454>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	689b      	ldr	r3, [r3, #8]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d012      	beq.n	80181fc <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80181d6:	4b1e      	ldr	r3, [pc, #120]	; (8018250 <SX1276OnDio0Irq+0x454>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	689c      	ldr	r4, [r3, #8]
 80181dc:	4b19      	ldr	r3, [pc, #100]	; (8018244 <SX1276OnDio0Irq+0x448>)
 80181de:	2264      	movs	r2, #100	; 0x64
 80181e0:	5c9b      	ldrb	r3, [r3, r2]
 80181e2:	b299      	uxth	r1, r3
 80181e4:	4b17      	ldr	r3, [pc, #92]	; (8018244 <SX1276OnDio0Irq+0x448>)
 80181e6:	2262      	movs	r2, #98	; 0x62
 80181e8:	5e9d      	ldrsh	r5, [r3, r2]
 80181ea:	4b16      	ldr	r3, [pc, #88]	; (8018244 <SX1276OnDio0Irq+0x448>)
 80181ec:	2260      	movs	r2, #96	; 0x60
 80181ee:	569b      	ldrsb	r3, [r3, r2]
 80181f0:	4815      	ldr	r0, [pc, #84]	; (8018248 <SX1276OnDio0Irq+0x44c>)
 80181f2:	002a      	movs	r2, r5
 80181f4:	47a0      	blx	r4
                break;
 80181f6:	e001      	b.n	80181fc <SX1276OnDio0Irq+0x400>
                        break;
 80181f8:	46c0      	nop			; (mov r8, r8)
 80181fa:	e01f      	b.n	801823c <SX1276OnDio0Irq+0x440>
                break;
 80181fc:	46c0      	nop			; (mov r8, r8)
            break;
 80181fe:	e01d      	b.n	801823c <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8018200:	4b14      	ldr	r3, [pc, #80]	; (8018254 <SX1276OnDio0Irq+0x458>)
 8018202:	0018      	movs	r0, r3
 8018204:	f7fd fb6a 	bl	80158dc <TimerStop>
            switch( SX1276.Settings.Modem )
 8018208:	4b0e      	ldr	r3, [pc, #56]	; (8018244 <SX1276OnDio0Irq+0x448>)
 801820a:	795b      	ldrb	r3, [r3, #5]
 801820c:	2b01      	cmp	r3, #1
 801820e:	d103      	bne.n	8018218 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8018210:	2108      	movs	r1, #8
 8018212:	2012      	movs	r0, #18
 8018214:	f7ff fbf2 	bl	80179fc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8018218:	4b0a      	ldr	r3, [pc, #40]	; (8018244 <SX1276OnDio0Irq+0x448>)
 801821a:	2200      	movs	r2, #0
 801821c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801821e:	4b0c      	ldr	r3, [pc, #48]	; (8018250 <SX1276OnDio0Irq+0x454>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d008      	beq.n	8018238 <SX1276OnDio0Irq+0x43c>
 8018226:	4b0a      	ldr	r3, [pc, #40]	; (8018250 <SX1276OnDio0Irq+0x454>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d003      	beq.n	8018238 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8018230:	4b07      	ldr	r3, [pc, #28]	; (8018250 <SX1276OnDio0Irq+0x454>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	4798      	blx	r3
                break;
 8018238:	46c0      	nop			; (mov r8, r8)
            break;
 801823a:	46c0      	nop			; (mov r8, r8)
    }
}
 801823c:	46c0      	nop			; (mov r8, r8)
 801823e:	46bd      	mov	sp, r7
 8018240:	b004      	add	sp, #16
 8018242:	bdb0      	pop	{r4, r5, r7, pc}
 8018244:	200015ec 	.word	0x200015ec
 8018248:	200010a0 	.word	0x200010a0
 801824c:	20001654 	.word	0x20001654
 8018250:	2000109c 	.word	0x2000109c
 8018254:	200015bc 	.word	0x200015bc

08018258 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 8018260:	4b61      	ldr	r3, [pc, #388]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018262:	791b      	ldrb	r3, [r3, #4]
 8018264:	2b01      	cmp	r3, #1
 8018266:	d003      	beq.n	8018270 <SX1276OnDio1Irq+0x18>
 8018268:	2b02      	cmp	r3, #2
 801826a:	d100      	bne.n	801826e <SX1276OnDio1Irq+0x16>
 801826c:	e078      	b.n	8018360 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 801826e:	e0b6      	b.n	80183de <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8018270:	4b5d      	ldr	r3, [pc, #372]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018272:	795b      	ldrb	r3, [r3, #5]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d002      	beq.n	801827e <SX1276OnDio1Irq+0x26>
 8018278:	2b01      	cmp	r3, #1
 801827a:	d057      	beq.n	801832c <SX1276OnDio1Irq+0xd4>
                break;
 801827c:	e06f      	b.n	801835e <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801827e:	4b5a      	ldr	r3, [pc, #360]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018280:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018282:	2b00      	cmp	r3, #0
 8018284:	d118      	bne.n	80182b8 <SX1276OnDio1Irq+0x60>
 8018286:	4b58      	ldr	r3, [pc, #352]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018288:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801828a:	2b00      	cmp	r3, #0
 801828c:	d114      	bne.n	80182b8 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801828e:	4b56      	ldr	r3, [pc, #344]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018290:	2222      	movs	r2, #34	; 0x22
 8018292:	5c9b      	ldrb	r3, [r3, r2]
 8018294:	2201      	movs	r2, #1
 8018296:	4053      	eors	r3, r2
 8018298:	b2db      	uxtb	r3, r3
 801829a:	2b00      	cmp	r3, #0
 801829c:	d005      	beq.n	80182aa <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801829e:	4b53      	ldr	r3, [pc, #332]	; (80183ec <SX1276OnDio1Irq+0x194>)
 80182a0:	2101      	movs	r1, #1
 80182a2:	0018      	movs	r0, r3
 80182a4:	f7ff fc86 	bl	8017bb4 <SX1276ReadFifo>
 80182a8:	e006      	b.n	80182b8 <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80182aa:	2032      	movs	r0, #50	; 0x32
 80182ac:	f7ff fbba 	bl	8017a24 <SX1276Read>
 80182b0:	0003      	movs	r3, r0
 80182b2:	b29a      	uxth	r2, r3
 80182b4:	4b4c      	ldr	r3, [pc, #304]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182b6:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80182b8:	4b4b      	ldr	r3, [pc, #300]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80182bc:	001a      	movs	r2, r3
 80182be:	4b4a      	ldr	r3, [pc, #296]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80182c2:	1ad3      	subs	r3, r2, r3
 80182c4:	4a48      	ldr	r2, [pc, #288]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182c6:	213e      	movs	r1, #62	; 0x3e
 80182c8:	5c52      	ldrb	r2, [r2, r1]
 80182ca:	4293      	cmp	r3, r2
 80182cc:	db19      	blt.n	8018302 <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80182ce:	4b46      	ldr	r3, [pc, #280]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80182d2:	001a      	movs	r2, r3
 80182d4:	4b46      	ldr	r3, [pc, #280]	; (80183f0 <SX1276OnDio1Irq+0x198>)
 80182d6:	18d0      	adds	r0, r2, r3
 80182d8:	4b43      	ldr	r3, [pc, #268]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182da:	223e      	movs	r2, #62	; 0x3e
 80182dc:	5c9b      	ldrb	r3, [r3, r2]
 80182de:	3b01      	subs	r3, #1
 80182e0:	b2db      	uxtb	r3, r3
 80182e2:	0019      	movs	r1, r3
 80182e4:	f7ff fc66 	bl	8017bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80182e8:	4b3f      	ldr	r3, [pc, #252]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182ea:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80182ec:	4b3e      	ldr	r3, [pc, #248]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182ee:	213e      	movs	r1, #62	; 0x3e
 80182f0:	5c5b      	ldrb	r3, [r3, r1]
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	18d3      	adds	r3, r2, r3
 80182f6:	b29b      	uxth	r3, r3
 80182f8:	3b01      	subs	r3, #1
 80182fa:	b29a      	uxth	r2, r3
 80182fc:	4b3a      	ldr	r3, [pc, #232]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80182fe:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8018300:	e02d      	b.n	801835e <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8018302:	4b39      	ldr	r3, [pc, #228]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018304:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018306:	001a      	movs	r2, r3
 8018308:	4b39      	ldr	r3, [pc, #228]	; (80183f0 <SX1276OnDio1Irq+0x198>)
 801830a:	18d0      	adds	r0, r2, r3
 801830c:	4b36      	ldr	r3, [pc, #216]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 801830e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018310:	b2da      	uxtb	r2, r3
 8018312:	4b35      	ldr	r3, [pc, #212]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018314:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018316:	b2db      	uxtb	r3, r3
 8018318:	1ad3      	subs	r3, r2, r3
 801831a:	b2db      	uxtb	r3, r3
 801831c:	0019      	movs	r1, r3
 801831e:	f7ff fc49 	bl	8017bb4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8018322:	4b31      	ldr	r3, [pc, #196]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018324:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8018326:	4b30      	ldr	r3, [pc, #192]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018328:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801832a:	e018      	b.n	801835e <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 801832c:	4b31      	ldr	r3, [pc, #196]	; (80183f4 <SX1276OnDio1Irq+0x19c>)
 801832e:	0018      	movs	r0, r3
 8018330:	f7fd fad4 	bl	80158dc <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8018334:	2180      	movs	r1, #128	; 0x80
 8018336:	2012      	movs	r0, #18
 8018338:	f7ff fb60 	bl	80179fc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801833c:	4b2a      	ldr	r3, [pc, #168]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 801833e:	2200      	movs	r2, #0
 8018340:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018342:	4b2d      	ldr	r3, [pc, #180]	; (80183f8 <SX1276OnDio1Irq+0x1a0>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d008      	beq.n	801835c <SX1276OnDio1Irq+0x104>
 801834a:	4b2b      	ldr	r3, [pc, #172]	; (80183f8 <SX1276OnDio1Irq+0x1a0>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d003      	beq.n	801835c <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 8018354:	4b28      	ldr	r3, [pc, #160]	; (80183f8 <SX1276OnDio1Irq+0x1a0>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	68db      	ldr	r3, [r3, #12]
 801835a:	4798      	blx	r3
                break;
 801835c:	46c0      	nop			; (mov r8, r8)
            break;
 801835e:	e03e      	b.n	80183de <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8018360:	4b21      	ldr	r3, [pc, #132]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018362:	795b      	ldrb	r3, [r3, #5]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d002      	beq.n	801836e <SX1276OnDio1Irq+0x116>
 8018368:	2b01      	cmp	r3, #1
 801836a:	d036      	beq.n	80183da <SX1276OnDio1Irq+0x182>
                break;
 801836c:	e036      	b.n	80183dc <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801836e:	4b1e      	ldr	r3, [pc, #120]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018370:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8018372:	001a      	movs	r2, r3
 8018374:	4b1c      	ldr	r3, [pc, #112]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018376:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018378:	1ad3      	subs	r3, r2, r3
 801837a:	4a1b      	ldr	r2, [pc, #108]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 801837c:	213f      	movs	r1, #63	; 0x3f
 801837e:	5c52      	ldrb	r2, [r2, r1]
 8018380:	4293      	cmp	r3, r2
 8018382:	dd15      	ble.n	80183b0 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8018384:	4b18      	ldr	r3, [pc, #96]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018386:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8018388:	001a      	movs	r2, r3
 801838a:	4b19      	ldr	r3, [pc, #100]	; (80183f0 <SX1276OnDio1Irq+0x198>)
 801838c:	18d0      	adds	r0, r2, r3
 801838e:	4b16      	ldr	r3, [pc, #88]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 8018390:	223f      	movs	r2, #63	; 0x3f
 8018392:	5c9b      	ldrb	r3, [r3, r2]
 8018394:	0019      	movs	r1, r3
 8018396:	f7ff fbfb 	bl	8017b90 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801839a:	4b13      	ldr	r3, [pc, #76]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 801839c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801839e:	4b12      	ldr	r3, [pc, #72]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183a0:	213f      	movs	r1, #63	; 0x3f
 80183a2:	5c5b      	ldrb	r3, [r3, r1]
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	18d3      	adds	r3, r2, r3
 80183a8:	b29a      	uxth	r2, r3
 80183aa:	4b0f      	ldr	r3, [pc, #60]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183ac:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80183ae:	e015      	b.n	80183dc <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80183b0:	4b0d      	ldr	r3, [pc, #52]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183b2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80183b4:	001a      	movs	r2, r3
 80183b6:	4b0e      	ldr	r3, [pc, #56]	; (80183f0 <SX1276OnDio1Irq+0x198>)
 80183b8:	18d0      	adds	r0, r2, r3
 80183ba:	4b0b      	ldr	r3, [pc, #44]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80183be:	b2da      	uxtb	r2, r3
 80183c0:	4b09      	ldr	r3, [pc, #36]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	1ad3      	subs	r3, r2, r3
 80183c8:	b2db      	uxtb	r3, r3
 80183ca:	0019      	movs	r1, r3
 80183cc:	f7ff fbe0 	bl	8017b90 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80183d0:	4b05      	ldr	r3, [pc, #20]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183d2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80183d4:	4b04      	ldr	r3, [pc, #16]	; (80183e8 <SX1276OnDio1Irq+0x190>)
 80183d6:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80183d8:	e000      	b.n	80183dc <SX1276OnDio1Irq+0x184>
                break;
 80183da:	46c0      	nop			; (mov r8, r8)
            break;
 80183dc:	46c0      	nop			; (mov r8, r8)
    }
}
 80183de:	46c0      	nop			; (mov r8, r8)
 80183e0:	46bd      	mov	sp, r7
 80183e2:	b002      	add	sp, #8
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	46c0      	nop			; (mov r8, r8)
 80183e8:	200015ec 	.word	0x200015ec
 80183ec:	20001626 	.word	0x20001626
 80183f0:	200010a0 	.word	0x200010a0
 80183f4:	20001654 	.word	0x20001654
 80183f8:	2000109c 	.word	0x2000109c

080183fc <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 80183fc:	b590      	push	{r4, r7, lr}
 80183fe:	b087      	sub	sp, #28
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 8018404:	2300      	movs	r3, #0
 8018406:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8018408:	4b5c      	ldr	r3, [pc, #368]	; (801857c <SX1276OnDio2Irq+0x180>)
 801840a:	791b      	ldrb	r3, [r3, #4]
 801840c:	2b01      	cmp	r3, #1
 801840e:	d003      	beq.n	8018418 <SX1276OnDio2Irq+0x1c>
 8018410:	2b02      	cmp	r3, #2
 8018412:	d100      	bne.n	8018416 <SX1276OnDio2Irq+0x1a>
 8018414:	e083      	b.n	801851e <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 8018416:	e0ad      	b.n	8018574 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8018418:	4b58      	ldr	r3, [pc, #352]	; (801857c <SX1276OnDio2Irq+0x180>)
 801841a:	795b      	ldrb	r3, [r3, #5]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d002      	beq.n	8018426 <SX1276OnDio2Irq+0x2a>
 8018420:	2b01      	cmp	r3, #1
 8018422:	d058      	beq.n	80184d6 <SX1276OnDio2Irq+0xda>
                break;
 8018424:	e07a      	b.n	801851c <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8018426:	4b55      	ldr	r3, [pc, #340]	; (801857c <SX1276OnDio2Irq+0x180>)
 8018428:	2230      	movs	r2, #48	; 0x30
 801842a:	2101      	movs	r1, #1
 801842c:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 801842e:	4b53      	ldr	r3, [pc, #332]	; (801857c <SX1276OnDio2Irq+0x180>)
 8018430:	2230      	movs	r2, #48	; 0x30
 8018432:	5c9b      	ldrb	r3, [r3, r2]
 8018434:	2b01      	cmp	r3, #1
 8018436:	d16e      	bne.n	8018516 <SX1276OnDio2Irq+0x11a>
 8018438:	4b50      	ldr	r3, [pc, #320]	; (801857c <SX1276OnDio2Irq+0x180>)
 801843a:	2231      	movs	r2, #49	; 0x31
 801843c:	5c9b      	ldrb	r3, [r3, r2]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d169      	bne.n	8018516 <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8018442:	4b4f      	ldr	r3, [pc, #316]	; (8018580 <SX1276OnDio2Irq+0x184>)
 8018444:	0018      	movs	r0, r3
 8018446:	f7fd fa49 	bl	80158dc <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801844a:	4b4c      	ldr	r3, [pc, #304]	; (801857c <SX1276OnDio2Irq+0x180>)
 801844c:	2231      	movs	r2, #49	; 0x31
 801844e:	2101      	movs	r1, #1
 8018450:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8018452:	2011      	movs	r0, #17
 8018454:	f7ff fae6 	bl	8017a24 <SX1276Read>
 8018458:	0003      	movs	r3, r0
 801845a:	085b      	lsrs	r3, r3, #1
 801845c:	b2db      	uxtb	r3, r3
 801845e:	425b      	negs	r3, r3
 8018460:	b2db      	uxtb	r3, r3
 8018462:	b259      	sxtb	r1, r3
 8018464:	4b45      	ldr	r3, [pc, #276]	; (801857c <SX1276OnDio2Irq+0x180>)
 8018466:	2232      	movs	r2, #50	; 0x32
 8018468:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801846a:	201b      	movs	r0, #27
 801846c:	f7ff fada 	bl	8017a24 <SX1276Read>
 8018470:	0003      	movs	r3, r0
 8018472:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8018474:	201c      	movs	r0, #28
 8018476:	f7ff fad5 	bl	8017a24 <SX1276Read>
 801847a:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801847c:	4323      	orrs	r3, r4
 801847e:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	0a1b      	lsrs	r3, r3, #8
 8018484:	613b      	str	r3, [r7, #16]
 8018486:	693b      	ldr	r3, [r7, #16]
 8018488:	021b      	lsls	r3, r3, #8
 801848a:	697a      	ldr	r2, [r7, #20]
 801848c:	1ad3      	subs	r3, r2, r3
 801848e:	60fb      	str	r3, [r7, #12]
 8018490:	6939      	ldr	r1, [r7, #16]
 8018492:	000b      	movs	r3, r1
 8018494:	015b      	lsls	r3, r3, #5
 8018496:	1a5b      	subs	r3, r3, r1
 8018498:	019a      	lsls	r2, r3, #6
 801849a:	1ad2      	subs	r2, r2, r3
 801849c:	00d2      	lsls	r2, r2, #3
 801849e:	1850      	adds	r0, r2, r1
 80184a0:	68f9      	ldr	r1, [r7, #12]
 80184a2:	000b      	movs	r3, r1
 80184a4:	015b      	lsls	r3, r3, #5
 80184a6:	1a5b      	subs	r3, r3, r1
 80184a8:	019a      	lsls	r2, r3, #6
 80184aa:	1ad2      	subs	r2, r2, r3
 80184ac:	00d2      	lsls	r2, r2, #3
 80184ae:	1853      	adds	r3, r2, r1
 80184b0:	3380      	adds	r3, #128	; 0x80
 80184b2:	0a1b      	lsrs	r3, r3, #8
 80184b4:	18c3      	adds	r3, r0, r3
 80184b6:	001a      	movs	r2, r3
 80184b8:	4b30      	ldr	r3, [pc, #192]	; (801857c <SX1276OnDio2Irq+0x180>)
 80184ba:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80184bc:	200c      	movs	r0, #12
 80184be:	f7ff fab1 	bl	8017a24 <SX1276Read>
 80184c2:	0003      	movs	r3, r0
 80184c4:	095b      	lsrs	r3, r3, #5
 80184c6:	b2db      	uxtb	r3, r3
 80184c8:	2207      	movs	r2, #7
 80184ca:	4013      	ands	r3, r2
 80184cc:	b2d9      	uxtb	r1, r3
 80184ce:	4b2b      	ldr	r3, [pc, #172]	; (801857c <SX1276OnDio2Irq+0x180>)
 80184d0:	2238      	movs	r2, #56	; 0x38
 80184d2:	5499      	strb	r1, [r3, r2]
                break;
 80184d4:	e01f      	b.n	8018516 <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80184d6:	4b29      	ldr	r3, [pc, #164]	; (801857c <SX1276OnDio2Irq+0x180>)
 80184d8:	2253      	movs	r2, #83	; 0x53
 80184da:	5c9b      	ldrb	r3, [r3, r2]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d01c      	beq.n	801851a <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80184e0:	2102      	movs	r1, #2
 80184e2:	2012      	movs	r0, #18
 80184e4:	f7ff fa8a 	bl	80179fc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80184e8:	4b26      	ldr	r3, [pc, #152]	; (8018584 <SX1276OnDio2Irq+0x188>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d014      	beq.n	801851a <SX1276OnDio2Irq+0x11e>
 80184f0:	4b24      	ldr	r3, [pc, #144]	; (8018584 <SX1276OnDio2Irq+0x188>)
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	695b      	ldr	r3, [r3, #20]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d00f      	beq.n	801851a <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80184fa:	4b22      	ldr	r3, [pc, #136]	; (8018584 <SX1276OnDio2Irq+0x188>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	695c      	ldr	r4, [r3, #20]
 8018500:	201c      	movs	r0, #28
 8018502:	f7ff fa8f 	bl	8017a24 <SX1276Read>
 8018506:	0003      	movs	r3, r0
 8018508:	001a      	movs	r2, r3
 801850a:	233f      	movs	r3, #63	; 0x3f
 801850c:	4013      	ands	r3, r2
 801850e:	b2db      	uxtb	r3, r3
 8018510:	0018      	movs	r0, r3
 8018512:	47a0      	blx	r4
                break;
 8018514:	e001      	b.n	801851a <SX1276OnDio2Irq+0x11e>
                break;
 8018516:	46c0      	nop			; (mov r8, r8)
 8018518:	e02c      	b.n	8018574 <SX1276OnDio2Irq+0x178>
                break;
 801851a:	46c0      	nop			; (mov r8, r8)
            break;
 801851c:	e02a      	b.n	8018574 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801851e:	4b17      	ldr	r3, [pc, #92]	; (801857c <SX1276OnDio2Irq+0x180>)
 8018520:	795b      	ldrb	r3, [r3, #5]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d022      	beq.n	801856c <SX1276OnDio2Irq+0x170>
 8018526:	2b01      	cmp	r3, #1
 8018528:	d000      	beq.n	801852c <SX1276OnDio2Irq+0x130>
                break;
 801852a:	e022      	b.n	8018572 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801852c:	4b13      	ldr	r3, [pc, #76]	; (801857c <SX1276OnDio2Irq+0x180>)
 801852e:	2253      	movs	r2, #83	; 0x53
 8018530:	5c9b      	ldrb	r3, [r3, r2]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d01c      	beq.n	8018570 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8018536:	2102      	movs	r1, #2
 8018538:	2012      	movs	r0, #18
 801853a:	f7ff fa5f 	bl	80179fc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801853e:	4b11      	ldr	r3, [pc, #68]	; (8018584 <SX1276OnDio2Irq+0x188>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d014      	beq.n	8018570 <SX1276OnDio2Irq+0x174>
 8018546:	4b0f      	ldr	r3, [pc, #60]	; (8018584 <SX1276OnDio2Irq+0x188>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	695b      	ldr	r3, [r3, #20]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d00f      	beq.n	8018570 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8018550:	4b0c      	ldr	r3, [pc, #48]	; (8018584 <SX1276OnDio2Irq+0x188>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	695c      	ldr	r4, [r3, #20]
 8018556:	201c      	movs	r0, #28
 8018558:	f7ff fa64 	bl	8017a24 <SX1276Read>
 801855c:	0003      	movs	r3, r0
 801855e:	001a      	movs	r2, r3
 8018560:	233f      	movs	r3, #63	; 0x3f
 8018562:	4013      	ands	r3, r2
 8018564:	b2db      	uxtb	r3, r3
 8018566:	0018      	movs	r0, r3
 8018568:	47a0      	blx	r4
                break;
 801856a:	e001      	b.n	8018570 <SX1276OnDio2Irq+0x174>
                break;
 801856c:	46c0      	nop			; (mov r8, r8)
 801856e:	e000      	b.n	8018572 <SX1276OnDio2Irq+0x176>
                break;
 8018570:	46c0      	nop			; (mov r8, r8)
            break;
 8018572:	46c0      	nop			; (mov r8, r8)
    }
}
 8018574:	46c0      	nop			; (mov r8, r8)
 8018576:	46bd      	mov	sp, r7
 8018578:	b007      	add	sp, #28
 801857a:	bd90      	pop	{r4, r7, pc}
 801857c:	200015ec 	.word	0x200015ec
 8018580:	200015d4 	.word	0x200015d4
 8018584:	2000109c 	.word	0x2000109c

08018588 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b082      	sub	sp, #8
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8018590:	4b1e      	ldr	r3, [pc, #120]	; (801860c <SX1276OnDio3Irq+0x84>)
 8018592:	795b      	ldrb	r3, [r3, #5]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d031      	beq.n	80185fc <SX1276OnDio3Irq+0x74>
 8018598:	2b01      	cmp	r3, #1
 801859a:	d000      	beq.n	801859e <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801859c:	e031      	b.n	8018602 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801859e:	2012      	movs	r0, #18
 80185a0:	f7ff fa40 	bl	8017a24 <SX1276Read>
 80185a4:	0003      	movs	r3, r0
 80185a6:	001a      	movs	r2, r3
 80185a8:	2301      	movs	r3, #1
 80185aa:	4013      	ands	r3, r2
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d112      	bne.n	80185d6 <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80185b0:	2105      	movs	r1, #5
 80185b2:	2012      	movs	r0, #18
 80185b4:	f7ff fa22 	bl	80179fc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80185b8:	4b15      	ldr	r3, [pc, #84]	; (8018610 <SX1276OnDio3Irq+0x88>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d01f      	beq.n	8018600 <SX1276OnDio3Irq+0x78>
 80185c0:	4b13      	ldr	r3, [pc, #76]	; (8018610 <SX1276OnDio3Irq+0x88>)
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	699b      	ldr	r3, [r3, #24]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d01a      	beq.n	8018600 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 80185ca:	4b11      	ldr	r3, [pc, #68]	; (8018610 <SX1276OnDio3Irq+0x88>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	699b      	ldr	r3, [r3, #24]
 80185d0:	2001      	movs	r0, #1
 80185d2:	4798      	blx	r3
        break;
 80185d4:	e014      	b.n	8018600 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80185d6:	2104      	movs	r1, #4
 80185d8:	2012      	movs	r0, #18
 80185da:	f7ff fa0f 	bl	80179fc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80185de:	4b0c      	ldr	r3, [pc, #48]	; (8018610 <SX1276OnDio3Irq+0x88>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d00c      	beq.n	8018600 <SX1276OnDio3Irq+0x78>
 80185e6:	4b0a      	ldr	r3, [pc, #40]	; (8018610 <SX1276OnDio3Irq+0x88>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	699b      	ldr	r3, [r3, #24]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d007      	beq.n	8018600 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 80185f0:	4b07      	ldr	r3, [pc, #28]	; (8018610 <SX1276OnDio3Irq+0x88>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	699b      	ldr	r3, [r3, #24]
 80185f6:	2000      	movs	r0, #0
 80185f8:	4798      	blx	r3
        break;
 80185fa:	e001      	b.n	8018600 <SX1276OnDio3Irq+0x78>
        break;
 80185fc:	46c0      	nop			; (mov r8, r8)
 80185fe:	e000      	b.n	8018602 <SX1276OnDio3Irq+0x7a>
        break;
 8018600:	46c0      	nop			; (mov r8, r8)
    }
}
 8018602:	46c0      	nop			; (mov r8, r8)
 8018604:	46bd      	mov	sp, r7
 8018606:	b002      	add	sp, #8
 8018608:	bd80      	pop	{r7, pc}
 801860a:	46c0      	nop			; (mov r8, r8)
 801860c:	200015ec 	.word	0x200015ec
 8018610:	2000109c 	.word	0x2000109c

08018614 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b082      	sub	sp, #8
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 801861c:	4b0b      	ldr	r3, [pc, #44]	; (801864c <SX1276OnDio4Irq+0x38>)
 801861e:	795b      	ldrb	r3, [r3, #5]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d002      	beq.n	801862a <SX1276OnDio4Irq+0x16>
 8018624:	2b01      	cmp	r3, #1
 8018626:	d00a      	beq.n	801863e <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8018628:	e00c      	b.n	8018644 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801862a:	4b08      	ldr	r3, [pc, #32]	; (801864c <SX1276OnDio4Irq+0x38>)
 801862c:	2230      	movs	r2, #48	; 0x30
 801862e:	5c9b      	ldrb	r3, [r3, r2]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d106      	bne.n	8018642 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8018634:	4b05      	ldr	r3, [pc, #20]	; (801864c <SX1276OnDio4Irq+0x38>)
 8018636:	2230      	movs	r2, #48	; 0x30
 8018638:	2101      	movs	r1, #1
 801863a:	5499      	strb	r1, [r3, r2]
        break;
 801863c:	e001      	b.n	8018642 <SX1276OnDio4Irq+0x2e>
        break;
 801863e:	46c0      	nop			; (mov r8, r8)
 8018640:	e000      	b.n	8018644 <SX1276OnDio4Irq+0x30>
        break;
 8018642:	46c0      	nop			; (mov r8, r8)
    }
}
 8018644:	46c0      	nop			; (mov r8, r8)
 8018646:	46bd      	mov	sp, r7
 8018648:	b002      	add	sp, #8
 801864a:	bd80      	pop	{r7, pc}
 801864c:	200015ec 	.word	0x200015ec

08018650 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 8018650:	b5b0      	push	{r4, r5, r7, lr}
 8018652:	b084      	sub	sp, #16
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	000a      	movs	r2, r1
 801865a:	1cfb      	adds	r3, r7, #3
 801865c:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 801865e:	1cfb      	adds	r3, r7, #3
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	2b01      	cmp	r3, #1
 8018664:	d000      	beq.n	8018668 <_itsdk_console_private+0x18>
 8018666:	e0d1      	b.n	801880c <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	781b      	ldrb	r3, [r3, #0]
 801866c:	3b3f      	subs	r3, #63	; 0x3f
 801866e:	2b35      	cmp	r3, #53	; 0x35
 8018670:	d900      	bls.n	8018674 <_itsdk_console_private+0x24>
 8018672:	e0e5      	b.n	8018840 <_itsdk_console_private+0x1f0>
 8018674:	009a      	lsls	r2, r3, #2
 8018676:	4b78      	ldr	r3, [pc, #480]	; (8018858 <_itsdk_console_private+0x208>)
 8018678:	18d3      	adds	r3, r2, r3
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 801867e:	4b77      	ldr	r3, [pc, #476]	; (801885c <_itsdk_console_private+0x20c>)
 8018680:	0018      	movs	r0, r3
 8018682:	f000 fa0f 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 8018686:	4b76      	ldr	r3, [pc, #472]	; (8018860 <_itsdk_console_private+0x210>)
 8018688:	0018      	movs	r0, r3
 801868a:	f000 fa0b 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 801868e:	4b75      	ldr	r3, [pc, #468]	; (8018864 <_itsdk_console_private+0x214>)
 8018690:	0018      	movs	r0, r3
 8018692:	f000 fa07 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 8018696:	4b74      	ldr	r3, [pc, #464]	; (8018868 <_itsdk_console_private+0x218>)
 8018698:	0018      	movs	r0, r3
 801869a:	f000 fa03 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 801869e:	4b73      	ldr	r3, [pc, #460]	; (801886c <_itsdk_console_private+0x21c>)
 80186a0:	0018      	movs	r0, r3
 80186a2:	f000 f9ff 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 80186a6:	4b72      	ldr	r3, [pc, #456]	; (8018870 <_itsdk_console_private+0x220>)
 80186a8:	0018      	movs	r0, r3
 80186aa:	f000 f9fb 	bl	8018aa4 <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 80186ae:	4b71      	ldr	r3, [pc, #452]	; (8018874 <_itsdk_console_private+0x224>)
 80186b0:	0018      	movs	r0, r3
 80186b2:	f000 f9f7 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 80186b6:	4b70      	ldr	r3, [pc, #448]	; (8018878 <_itsdk_console_private+0x228>)
 80186b8:	0018      	movs	r0, r3
 80186ba:	f000 f9f3 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 80186be:	4b6f      	ldr	r3, [pc, #444]	; (801887c <_itsdk_console_private+0x22c>)
 80186c0:	0018      	movs	r0, r3
 80186c2:	f000 f9ef 	bl	8018aa4 <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 80186c6:	4b6e      	ldr	r3, [pc, #440]	; (8018880 <_itsdk_console_private+0x230>)
 80186c8:	0018      	movs	r0, r3
 80186ca:	f000 f9eb 	bl	8018aa4 <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 80186ce:	2300      	movs	r3, #0
 80186d0:	e0bd      	b.n	801884e <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 80186d2:	4b6c      	ldr	r3, [pc, #432]	; (8018884 <_itsdk_console_private+0x234>)
 80186d4:	781a      	ldrb	r2, [r3, #0]
 80186d6:	2101      	movs	r1, #1
 80186d8:	438a      	bics	r2, r1
 80186da:	701a      	strb	r2, [r3, #0]
			goto success;
 80186dc:	e0b2      	b.n	8018844 <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 80186de:	f004 fd05 	bl	801d0ec <itsdk_time_get_ms>
 80186e2:	22fa      	movs	r2, #250	; 0xfa
 80186e4:	0092      	lsls	r2, r2, #2
 80186e6:	2300      	movs	r3, #0
 80186e8:	f7e7 feee 	bl	80004c8 <__aeabi_uldivmod>
 80186ec:	0003      	movs	r3, r0
 80186ee:	000c      	movs	r4, r1
 80186f0:	001a      	movs	r2, r3
 80186f2:	4b65      	ldr	r3, [pc, #404]	; (8018888 <_itsdk_console_private+0x238>)
 80186f4:	0011      	movs	r1, r2
 80186f6:	0018      	movs	r0, r3
 80186f8:	f000 f9d4 	bl	8018aa4 <_itsdk_console_printf>
			goto success;
 80186fc:	e0a2      	b.n	8018844 <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 80186fe:	f005 f807 	bl	801d710 <adc_getTemperature>
 8018702:	0003      	movs	r3, r0
 8018704:	001a      	movs	r2, r3
 8018706:	240e      	movs	r4, #14
 8018708:	193b      	adds	r3, r7, r4
 801870a:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 801870c:	193b      	adds	r3, r7, r4
 801870e:	881b      	ldrh	r3, [r3, #0]
 8018710:	2164      	movs	r1, #100	; 0x64
 8018712:	0018      	movs	r0, r3
 8018714:	f7e7 fd00 	bl	8000118 <__udivsi3>
 8018718:	0003      	movs	r3, r0
 801871a:	b29b      	uxth	r3, r3
 801871c:	001d      	movs	r5, r3
 801871e:	0022      	movs	r2, r4
 8018720:	18bb      	adds	r3, r7, r2
 8018722:	881c      	ldrh	r4, [r3, #0]
 8018724:	18bb      	adds	r3, r7, r2
 8018726:	881b      	ldrh	r3, [r3, #0]
 8018728:	2164      	movs	r1, #100	; 0x64
 801872a:	0018      	movs	r0, r3
 801872c:	f7e7 fcf4 	bl	8000118 <__udivsi3>
 8018730:	0003      	movs	r3, r0
 8018732:	b29b      	uxth	r3, r3
 8018734:	001a      	movs	r2, r3
 8018736:	0013      	movs	r3, r2
 8018738:	065b      	lsls	r3, r3, #25
 801873a:	1a9b      	subs	r3, r3, r2
 801873c:	009b      	lsls	r3, r3, #2
 801873e:	189b      	adds	r3, r3, r2
 8018740:	00db      	lsls	r3, r3, #3
 8018742:	1a9b      	subs	r3, r3, r2
 8018744:	009b      	lsls	r3, r3, #2
 8018746:	18e2      	adds	r2, r4, r3
 8018748:	4b50      	ldr	r3, [pc, #320]	; (801888c <_itsdk_console_private+0x23c>)
 801874a:	0029      	movs	r1, r5
 801874c:	0018      	movs	r0, r3
 801874e:	f000 f9a9 	bl	8018aa4 <_itsdk_console_printf>
			goto success;
 8018752:	e077      	b.n	8018844 <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 8018754:	f005 f864 	bl	801d820 <adc_getVBat>
 8018758:	0003      	movs	r3, r0
 801875a:	001a      	movs	r2, r3
 801875c:	4b4c      	ldr	r3, [pc, #304]	; (8018890 <_itsdk_console_private+0x240>)
 801875e:	0011      	movs	r1, r2
 8018760:	0018      	movs	r0, r3
 8018762:	f000 f99f 	bl	8018aa4 <_itsdk_console_printf>
			goto success;
 8018766:	e06d      	b.n	8018844 <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 8018768:	f005 f82a 	bl	801d7c0 <adc_getVdd>
 801876c:	0003      	movs	r3, r0
 801876e:	001a      	movs	r2, r3
 8018770:	4b48      	ldr	r3, [pc, #288]	; (8018894 <_itsdk_console_private+0x244>)
 8018772:	0011      	movs	r1, r2
 8018774:	0018      	movs	r0, r3
 8018776:	f000 f995 	bl	8018aa4 <_itsdk_console_printf>
			goto success;
 801877a:	e063      	b.n	8018844 <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 801877c:	4b46      	ldr	r3, [pc, #280]	; (8018898 <_itsdk_console_private+0x248>)
 801877e:	0018      	movs	r0, r3
 8018780:	f000 f990 	bl	8018aa4 <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 8018784:	4b45      	ldr	r3, [pc, #276]	; (801889c <_itsdk_console_private+0x24c>)
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	2b06      	cmp	r3, #6
 801878a:	d827      	bhi.n	80187dc <_itsdk_console_private+0x18c>
 801878c:	009a      	lsls	r2, r3, #2
 801878e:	4b44      	ldr	r3, [pc, #272]	; (80188a0 <_itsdk_console_private+0x250>)
 8018790:	18d3      	adds	r3, r2, r3
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 8018796:	4b43      	ldr	r3, [pc, #268]	; (80188a4 <_itsdk_console_private+0x254>)
 8018798:	0018      	movs	r0, r3
 801879a:	f000 f983 	bl	8018aa4 <_itsdk_console_printf>
 801879e:	e022      	b.n	80187e6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 80187a0:	4b41      	ldr	r3, [pc, #260]	; (80188a8 <_itsdk_console_private+0x258>)
 80187a2:	0018      	movs	r0, r3
 80187a4:	f000 f97e 	bl	8018aa4 <_itsdk_console_printf>
 80187a8:	e01d      	b.n	80187e6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 80187aa:	4b40      	ldr	r3, [pc, #256]	; (80188ac <_itsdk_console_private+0x25c>)
 80187ac:	0018      	movs	r0, r3
 80187ae:	f000 f979 	bl	8018aa4 <_itsdk_console_printf>
 80187b2:	e018      	b.n	80187e6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 80187b4:	4b3e      	ldr	r3, [pc, #248]	; (80188b0 <_itsdk_console_private+0x260>)
 80187b6:	0018      	movs	r0, r3
 80187b8:	f000 f974 	bl	8018aa4 <_itsdk_console_printf>
 80187bc:	e013      	b.n	80187e6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 80187be:	4b3d      	ldr	r3, [pc, #244]	; (80188b4 <_itsdk_console_private+0x264>)
 80187c0:	0018      	movs	r0, r3
 80187c2:	f000 f96f 	bl	8018aa4 <_itsdk_console_printf>
 80187c6:	e00e      	b.n	80187e6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 80187c8:	4b3b      	ldr	r3, [pc, #236]	; (80188b8 <_itsdk_console_private+0x268>)
 80187ca:	0018      	movs	r0, r3
 80187cc:	f000 f96a 	bl	8018aa4 <_itsdk_console_printf>
 80187d0:	e009      	b.n	80187e6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 80187d2:	4b3a      	ldr	r3, [pc, #232]	; (80188bc <_itsdk_console_private+0x26c>)
 80187d4:	0018      	movs	r0, r3
 80187d6:	f000 f965 	bl	8018aa4 <_itsdk_console_printf>
 80187da:	e004      	b.n	80187e6 <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 80187dc:	4b38      	ldr	r3, [pc, #224]	; (80188c0 <_itsdk_console_private+0x270>)
 80187de:	0018      	movs	r0, r3
 80187e0:	f000 f960 	bl	8018aa4 <_itsdk_console_printf>
 80187e4:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 80187e6:	e02d      	b.n	8018844 <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 80187e8:	4b36      	ldr	r3, [pc, #216]	; (80188c4 <_itsdk_console_private+0x274>)
 80187ea:	0018      	movs	r0, r3
 80187ec:	f000 f95a 	bl	8018aa4 <_itsdk_console_printf>
			itsdk_reset();
 80187f0:	f005 fcd4 	bl	801e19c <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 80187f4:	4b34      	ldr	r3, [pc, #208]	; (80188c8 <_itsdk_console_private+0x278>)
 80187f6:	0018      	movs	r0, r3
 80187f8:	f000 f954 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80187fc:	2302      	movs	r3, #2
 80187fe:	e026      	b.n	801884e <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 8018800:	f004 f80e 	bl	801c820 <lowPower_enable>
			goto success;
 8018804:	e01e      	b.n	8018844 <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 8018806:	f004 f815 	bl	801c834 <lowPower_disable>
			goto success;
 801880a:	e01b      	b.n	8018844 <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 801880c:	1cfb      	adds	r3, r7, #3
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	2b02      	cmp	r3, #2
 8018812:	d115      	bne.n	8018840 <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	781b      	ldrb	r3, [r3, #0]
 8018818:	2b52      	cmp	r3, #82	; 0x52
 801881a:	d111      	bne.n	8018840 <_itsdk_console_private+0x1f0>
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	3301      	adds	r3, #1
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	2b21      	cmp	r3, #33	; 0x21
 8018824:	d10c      	bne.n	8018840 <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 8018826:	4b27      	ldr	r3, [pc, #156]	; (80188c4 <_itsdk_console_private+0x274>)
 8018828:	0018      	movs	r0, r3
 801882a:	f000 f93b 	bl	8018aa4 <_itsdk_console_printf>
			eeprom_clearAllEprom();
 801882e:	f000 fc23 	bl	8019078 <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 8018832:	2064      	movs	r0, #100	; 0x64
 8018834:	f005 fd04 	bl	801e240 <itsdk_delayMs>
			itsdk_reset();
 8018838:	f005 fcb0 	bl	801e19c <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 801883c:	2302      	movs	r3, #2
 801883e:	e006      	b.n	801884e <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 8018840:	2301      	movs	r3, #1
 8018842:	e004      	b.n	801884e <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 8018844:	4b1f      	ldr	r3, [pc, #124]	; (80188c4 <_itsdk_console_private+0x274>)
 8018846:	0018      	movs	r0, r3
 8018848:	f000 f92c 	bl	8018aa4 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 801884c:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 801884e:	0018      	movs	r0, r3
 8018850:	46bd      	mov	sp, r7
 8018852:	b004      	add	sp, #16
 8018854:	bdb0      	pop	{r4, r5, r7, pc}
 8018856:	46c0      	nop			; (mov r8, r8)
 8018858:	08021cc0 	.word	0x08021cc0
 801885c:	080207b4 	.word	0x080207b4
 8018860:	080207d0 	.word	0x080207d0
 8018864:	080207ec 	.word	0x080207ec
 8018868:	08020814 	.word	0x08020814
 801886c:	0802083c 	.word	0x0802083c
 8018870:	08020860 	.word	0x08020860
 8018874:	08020888 	.word	0x08020888
 8018878:	080208bc 	.word	0x080208bc
 801887c:	080208e0 	.word	0x080208e0
 8018880:	08020900 	.word	0x08020900
 8018884:	200011a4 	.word	0x200011a4
 8018888:	08020928 	.word	0x08020928
 801888c:	0802093c 	.word	0x0802093c
 8018890:	08020958 	.word	0x08020958
 8018894:	08020970 	.word	0x08020970
 8018898:	08020984 	.word	0x08020984
 801889c:	200016a8 	.word	0x200016a8
 80188a0:	08021d98 	.word	0x08021d98
 80188a4:	0802098c 	.word	0x0802098c
 80188a8:	08020994 	.word	0x08020994
 80188ac:	080209a0 	.word	0x080209a0
 80188b0:	080209ac 	.word	0x080209ac
 80188b4:	080209b4 	.word	0x080209b4
 80188b8:	080209bc 	.word	0x080209bc
 80188bc:	080209c4 	.word	0x080209c4
 80188c0:	080209d0 	.word	0x080209d0
 80188c4:	080209dc 	.word	0x080209dc
 80188c8:	080209e4 	.word	0x080209e4

080188cc <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b082      	sub	sp, #8
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	000a      	movs	r2, r1
 80188d6:	1cfb      	adds	r3, r7, #3
 80188d8:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 80188da:	1cfb      	adds	r3, r7, #3
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	2b01      	cmp	r3, #1
 80188e0:	d14c      	bne.n	801897c <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	2b6f      	cmp	r3, #111	; 0x6f
 80188e8:	d020      	beq.n	801892c <_itsdk_console_public+0x60>
 80188ea:	dc04      	bgt.n	80188f6 <_itsdk_console_public+0x2a>
 80188ec:	2b21      	cmp	r3, #33	; 0x21
 80188ee:	d023      	beq.n	8018938 <_itsdk_console_public+0x6c>
 80188f0:	2b3f      	cmp	r3, #63	; 0x3f
 80188f2:	d005      	beq.n	8018900 <_itsdk_console_public+0x34>
 80188f4:	e042      	b.n	801897c <_itsdk_console_public+0xb0>
 80188f6:	2b73      	cmp	r3, #115	; 0x73
 80188f8:	d03c      	beq.n	8018974 <_itsdk_console_public+0xa8>
 80188fa:	2b76      	cmp	r3, #118	; 0x76
 80188fc:	d026      	beq.n	801894c <_itsdk_console_public+0x80>
 80188fe:	e03d      	b.n	801897c <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 8018900:	4b21      	ldr	r3, [pc, #132]	; (8018988 <_itsdk_console_public+0xbc>)
 8018902:	0018      	movs	r0, r3
 8018904:	f000 f8ce 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 8018908:	4b20      	ldr	r3, [pc, #128]	; (801898c <_itsdk_console_public+0xc0>)
 801890a:	0018      	movs	r0, r3
 801890c:	f000 f8ca 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 8018910:	4b1f      	ldr	r3, [pc, #124]	; (8018990 <_itsdk_console_public+0xc4>)
 8018912:	0018      	movs	r0, r3
 8018914:	f000 f8c6 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 8018918:	4b1e      	ldr	r3, [pc, #120]	; (8018994 <_itsdk_console_public+0xc8>)
 801891a:	0018      	movs	r0, r3
 801891c:	f000 f8c2 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 8018920:	4b1d      	ldr	r3, [pc, #116]	; (8018998 <_itsdk_console_public+0xcc>)
 8018922:	0018      	movs	r0, r3
 8018924:	f000 f8be 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018928:	2300      	movs	r3, #0
 801892a:	e028      	b.n	801897e <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 801892c:	4b1b      	ldr	r3, [pc, #108]	; (801899c <_itsdk_console_public+0xd0>)
 801892e:	0018      	movs	r0, r3
 8018930:	f000 f8b8 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018934:	2300      	movs	r3, #0
 8018936:	e022      	b.n	801897e <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 8018938:	4b19      	ldr	r3, [pc, #100]	; (80189a0 <_itsdk_console_public+0xd4>)
 801893a:	0018      	movs	r0, r3
 801893c:	f000 f8b2 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 8018940:	4b18      	ldr	r3, [pc, #96]	; (80189a4 <_itsdk_console_public+0xd8>)
 8018942:	0018      	movs	r0, r3
 8018944:	f000 f8ae 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018948:	2300      	movs	r3, #0
 801894a:	e018      	b.n	801897e <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 801894c:	4a16      	ldr	r2, [pc, #88]	; (80189a8 <_itsdk_console_public+0xdc>)
 801894e:	4b17      	ldr	r3, [pc, #92]	; (80189ac <_itsdk_console_public+0xe0>)
 8018950:	0011      	movs	r1, r2
 8018952:	0018      	movs	r0, r3
 8018954:	f000 f8a6 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 8018958:	4a15      	ldr	r2, [pc, #84]	; (80189b0 <_itsdk_console_public+0xe4>)
 801895a:	4916      	ldr	r1, [pc, #88]	; (80189b4 <_itsdk_console_public+0xe8>)
 801895c:	4b16      	ldr	r3, [pc, #88]	; (80189b8 <_itsdk_console_public+0xec>)
 801895e:	0018      	movs	r0, r3
 8018960:	f000 f8a0 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 8018964:	4a15      	ldr	r2, [pc, #84]	; (80189bc <_itsdk_console_public+0xf0>)
 8018966:	4b16      	ldr	r3, [pc, #88]	; (80189c0 <_itsdk_console_public+0xf4>)
 8018968:	0011      	movs	r1, r2
 801896a:	0018      	movs	r0, r3
 801896c:	f000 f89a 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018970:	2300      	movs	r3, #0
 8018972:	e004      	b.n	801897e <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 8018974:	f001 f852 	bl	8019a1c <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 8018978:	2300      	movs	r3, #0
 801897a:	e000      	b.n	801897e <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 801897c:	2301      	movs	r3, #1
}
 801897e:	0018      	movs	r0, r3
 8018980:	46bd      	mov	sp, r7
 8018982:	b002      	add	sp, #8
 8018984:	bd80      	pop	{r7, pc}
 8018986:	46c0      	nop			; (mov r8, r8)
 8018988:	080209ec 	.word	0x080209ec
 801898c:	080209fc 	.word	0x080209fc
 8018990:	08020a18 	.word	0x08020a18
 8018994:	08020a38 	.word	0x08020a38
 8018998:	08020a58 	.word	0x08020a58
 801899c:	080209dc 	.word	0x080209dc
 80189a0:	08020a70 	.word	0x08020a70
 80189a4:	08020aa0 	.word	0x08020aa0
 80189a8:	08020ab8 	.word	0x08020ab8
 80189ac:	08020abc 	.word	0x08020abc
 80189b0:	08020acc 	.word	0x08020acc
 80189b4:	08020ad8 	.word	0x08020ad8
 80189b8:	08020ae4 	.word	0x08020ae4
 80189bc:	08020af4 	.word	0x08020af4
 80189c0:	08020b04 	.word	0x08020b04

080189c4 <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 80189c4:	b580      	push	{r7, lr}
 80189c6:	af00      	add	r7, sp, #0
	__console.expire = 0;
 80189c8:	4b0c      	ldr	r3, [pc, #48]	; (80189fc <itsdk_console_setup+0x38>)
 80189ca:	2200      	movs	r2, #0
 80189cc:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 80189ce:	4b0b      	ldr	r3, [pc, #44]	; (80189fc <itsdk_console_setup+0x38>)
 80189d0:	781a      	ldrb	r2, [r3, #0]
 80189d2:	2101      	movs	r1, #1
 80189d4:	438a      	bics	r2, r1
 80189d6:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 80189d8:	4b08      	ldr	r3, [pc, #32]	; (80189fc <itsdk_console_setup+0x38>)
 80189da:	781a      	ldrb	r2, [r3, #0]
 80189dc:	2101      	movs	r1, #1
 80189de:	400a      	ands	r2, r1
 80189e0:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 80189e2:	4b07      	ldr	r3, [pc, #28]	; (8018a00 <itsdk_console_setup+0x3c>)
 80189e4:	4a07      	ldr	r2, [pc, #28]	; (8018a04 <itsdk_console_setup+0x40>)
 80189e6:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 80189e8:	4b05      	ldr	r3, [pc, #20]	; (8018a00 <itsdk_console_setup+0x3c>)
 80189ea:	4a07      	ldr	r2, [pc, #28]	; (8018a08 <itsdk_console_setup+0x44>)
 80189ec:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 80189ee:	4b04      	ldr	r3, [pc, #16]	; (8018a00 <itsdk_console_setup+0x3c>)
 80189f0:	2200      	movs	r2, #0
 80189f2:	609a      	str	r2, [r3, #8]
}
 80189f4:	46c0      	nop			; (mov r8, r8)
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}
 80189fa:	46c0      	nop			; (mov r8, r8)
 80189fc:	200011a4 	.word	0x200011a4
 8018a00:	200011d4 	.word	0x200011d4
 8018a04:	08018651 	.word	0x08018651
 8018a08:	080188cd 	.word	0x080188cd

08018a0c <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 8018a0c:	b5b0      	push	{r4, r5, r7, lr}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 8018a12:	4b22      	ldr	r3, [pc, #136]	; (8018a9c <itsdk_console_loop+0x90>)
 8018a14:	781b      	ldrb	r3, [r3, #0]
 8018a16:	2201      	movs	r2, #1
 8018a18:	4013      	ands	r3, r2
 8018a1a:	b2db      	uxtb	r3, r3
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d021      	beq.n	8018a64 <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 8018a20:	f004 fb64 	bl	801d0ec <itsdk_time_get_ms>
 8018a24:	22fa      	movs	r2, #250	; 0xfa
 8018a26:	0092      	lsls	r2, r2, #2
 8018a28:	2300      	movs	r3, #0
 8018a2a:	f7e7 fd4d 	bl	80004c8 <__aeabi_uldivmod>
 8018a2e:	0002      	movs	r2, r0
 8018a30:	000b      	movs	r3, r1
 8018a32:	60ba      	str	r2, [r7, #8]
 8018a34:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 8018a36:	4b19      	ldr	r3, [pc, #100]	; (8018a9c <itsdk_console_loop+0x90>)
 8018a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a3a:	001c      	movs	r4, r3
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	001d      	movs	r5, r3
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	42ab      	cmp	r3, r5
 8018a44:	d805      	bhi.n	8018a52 <itsdk_console_loop+0x46>
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	42ab      	cmp	r3, r5
 8018a4a:	d10b      	bne.n	8018a64 <itsdk_console_loop+0x58>
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	42a3      	cmp	r3, r4
 8018a50:	d908      	bls.n	8018a64 <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 8018a52:	4b12      	ldr	r3, [pc, #72]	; (8018a9c <itsdk_console_loop+0x90>)
 8018a54:	781a      	ldrb	r2, [r3, #0]
 8018a56:	2101      	movs	r1, #1
 8018a58:	438a      	bics	r2, r1
 8018a5a:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 8018a5c:	4b10      	ldr	r3, [pc, #64]	; (8018aa0 <itsdk_console_loop+0x94>)
 8018a5e:	0018      	movs	r0, r3
 8018a60:	f000 f820 	bl	8018aa4 <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 8018a64:	1dfc      	adds	r4, r7, #7
 8018a66:	1dbb      	adds	r3, r7, #6
 8018a68:	0018      	movs	r0, r3
 8018a6a:	f005 fcc9 	bl	801e400 <serial2_read>
 8018a6e:	0003      	movs	r3, r0
 8018a70:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 8018a72:	1dfb      	adds	r3, r7, #7
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d003      	beq.n	8018a82 <itsdk_console_loop+0x76>
 8018a7a:	1dfb      	adds	r3, r7, #7
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	2b01      	cmp	r3, #1
 8018a80:	d104      	bne.n	8018a8c <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 8018a82:	1dbb      	adds	r3, r7, #6
 8018a84:	781b      	ldrb	r3, [r3, #0]
 8018a86:	0018      	movs	r0, r3
 8018a88:	f000 f97e 	bl	8018d88 <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 8018a8c:	1dfb      	adds	r3, r7, #7
 8018a8e:	781b      	ldrb	r3, [r3, #0]
 8018a90:	2b01      	cmp	r3, #1
 8018a92:	d0e7      	beq.n	8018a64 <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 8018a94:	46c0      	nop			; (mov r8, r8)
 8018a96:	46bd      	mov	sp, r7
 8018a98:	b004      	add	sp, #16
 8018a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8018a9c:	200011a4 	.word	0x200011a4
 8018aa0:	08020b18 	.word	0x08020b18

08018aa4 <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 8018aa4:	b40f      	push	{r0, r1, r2, r3}
 8018aa6:	b580      	push	{r7, lr}
 8018aa8:	b096      	sub	sp, #88	; 0x58
 8018aaa:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 8018aac:	2364      	movs	r3, #100	; 0x64
 8018aae:	18fb      	adds	r3, r7, r3
 8018ab0:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8018ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018ab6:	1d38      	adds	r0, r7, #4
 8018ab8:	2150      	movs	r1, #80	; 0x50
 8018aba:	f006 fb9d 	bl	801f1f8 <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 8018abe:	1d3b      	adds	r3, r7, #4
 8018ac0:	0018      	movs	r0, r3
 8018ac2:	f005 fc85 	bl	801e3d0 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 8018ac6:	46c0      	nop			; (mov r8, r8)
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	b016      	add	sp, #88	; 0x58
 8018acc:	bc80      	pop	{r7}
 8018ace:	bc08      	pop	{r3}
 8018ad0:	b004      	add	sp, #16
 8018ad2:	4718      	bx	r3

08018ad4 <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 8018ad4:	b5b0      	push	{r4, r5, r7, lr}
 8018ad6:	b090      	sub	sp, #64	; 0x40
 8018ad8:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 8018ada:	4ba5      	ldr	r3, [pc, #660]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	2201      	movs	r2, #1
 8018ae0:	4393      	bics	r3, r2
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d100      	bne.n	8018aea <_itsdk_console_processLine+0x16>
 8018ae8:	e13d      	b.n	8018d66 <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 8018aea:	4ba1      	ldr	r3, [pc, #644]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	2201      	movs	r2, #1
 8018af0:	4393      	bics	r3, r2
 8018af2:	b2db      	uxtb	r3, r3
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d01d      	beq.n	8018b34 <_itsdk_console_processLine+0x60>
 8018af8:	4b9d      	ldr	r3, [pc, #628]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	061b      	lsls	r3, r3, #24
 8018afe:	0e5b      	lsrs	r3, r3, #25
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	3b01      	subs	r3, #1
 8018b04:	4a9a      	ldr	r2, [pc, #616]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b06:	18d3      	adds	r3, r2, r3
 8018b08:	785b      	ldrb	r3, [r3, #1]
 8018b0a:	2b0d      	cmp	r3, #13
 8018b0c:	d112      	bne.n	8018b34 <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 8018b0e:	4b98      	ldr	r3, [pc, #608]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	061b      	lsls	r3, r3, #24
 8018b14:	0e5b      	lsrs	r3, r3, #25
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	337f      	adds	r3, #127	; 0x7f
 8018b1a:	1c1a      	adds	r2, r3, #0
 8018b1c:	237f      	movs	r3, #127	; 0x7f
 8018b1e:	4013      	ands	r3, r2
 8018b20:	b2da      	uxtb	r2, r3
 8018b22:	4b93      	ldr	r3, [pc, #588]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b24:	1890      	adds	r0, r2, r2
 8018b26:	781a      	ldrb	r2, [r3, #0]
 8018b28:	2101      	movs	r1, #1
 8018b2a:	400a      	ands	r2, r1
 8018b2c:	1c11      	adds	r1, r2, #0
 8018b2e:	1c02      	adds	r2, r0, #0
 8018b30:	430a      	orrs	r2, r1
 8018b32:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8018b34:	4b8e      	ldr	r3, [pc, #568]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	061b      	lsls	r3, r3, #24
 8018b3a:	0e5b      	lsrs	r3, r3, #25
 8018b3c:	b2db      	uxtb	r3, r3
 8018b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b40:	e008      	b.n	8018b54 <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 8018b42:	4a8b      	ldr	r2, [pc, #556]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b46:	18d3      	adds	r3, r2, r3
 8018b48:	3301      	adds	r3, #1
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8018b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b50:	3301      	adds	r3, #1
 8018b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b56:	2b27      	cmp	r3, #39	; 0x27
 8018b58:	ddf3      	ble.n	8018b42 <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 8018b5a:	4b85      	ldr	r3, [pc, #532]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b5c:	781b      	ldrb	r3, [r3, #0]
 8018b5e:	2201      	movs	r2, #1
 8018b60:	4013      	ands	r3, r2
 8018b62:	b2db      	uxtb	r3, r3
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d000      	beq.n	8018b6a <_itsdk_console_processLine+0x96>
 8018b68:	e08e      	b.n	8018c88 <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 8018b6a:	4b81      	ldr	r3, [pc, #516]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b6c:	781b      	ldrb	r3, [r3, #0]
 8018b6e:	061b      	lsls	r3, r3, #24
 8018b70:	0e5b      	lsrs	r3, r3, #25
 8018b72:	b2db      	uxtb	r3, r3
 8018b74:	2b0f      	cmp	r3, #15
 8018b76:	d82e      	bhi.n	8018bd6 <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 8018b78:	4b7d      	ldr	r3, [pc, #500]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b7a:	781a      	ldrb	r2, [r3, #0]
 8018b7c:	2101      	movs	r1, #1
 8018b7e:	430a      	orrs	r2, r1
 8018b80:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 8018b82:	003b      	movs	r3, r7
 8018b84:	0019      	movs	r1, r3
 8018b86:	2000      	movs	r0, #0
 8018b88:	f001 f8d4 	bl	8019d34 <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018b90:	e019      	b.n	8018bc6 <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 8018b92:	4a77      	ldr	r2, [pc, #476]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b96:	18d3      	adds	r3, r2, r3
 8018b98:	3301      	adds	r3, #1
 8018b9a:	781a      	ldrb	r2, [r3, #0]
 8018b9c:	0039      	movs	r1, r7
 8018b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ba0:	18cb      	adds	r3, r1, r3
 8018ba2:	781b      	ldrb	r3, [r3, #0]
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d00b      	beq.n	8018bc0 <_itsdk_console_processLine+0xec>
 8018ba8:	4b71      	ldr	r3, [pc, #452]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018baa:	781b      	ldrb	r3, [r3, #0]
 8018bac:	2201      	movs	r2, #1
 8018bae:	4013      	ands	r3, r2
 8018bb0:	b2db      	uxtb	r3, r3
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d004      	beq.n	8018bc0 <_itsdk_console_processLine+0xec>
 8018bb6:	4b6e      	ldr	r3, [pc, #440]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018bb8:	781a      	ldrb	r2, [r3, #0]
 8018bba:	2101      	movs	r1, #1
 8018bbc:	438a      	bics	r2, r1
 8018bbe:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 8018bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc2:	3301      	adds	r3, #1
 8018bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8018bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc8:	2b0f      	cmp	r3, #15
 8018bca:	dde2      	ble.n	8018b92 <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 8018bcc:	003b      	movs	r3, r7
 8018bce:	2110      	movs	r1, #16
 8018bd0:	0018      	movs	r0, r3
 8018bd2:	f006 fa67 	bl	801f0a4 <bzero>
		}
		if ( __console.loginState == 1 ) {
 8018bd6:	4b66      	ldr	r3, [pc, #408]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	2201      	movs	r2, #1
 8018bdc:	4013      	ands	r3, r2
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d015      	beq.n	8018c10 <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 8018be4:	f004 fa82 	bl	801d0ec <itsdk_time_get_ms>
 8018be8:	22fa      	movs	r2, #250	; 0xfa
 8018bea:	0092      	lsls	r2, r2, #2
 8018bec:	2300      	movs	r3, #0
 8018bee:	f7e7 fc6b 	bl	80004c8 <__aeabi_uldivmod>
 8018bf2:	0003      	movs	r3, r0
 8018bf4:	000c      	movs	r4, r1
 8018bf6:	613b      	str	r3, [r7, #16]
 8018bf8:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8018bfa:	693b      	ldr	r3, [r7, #16]
 8018bfc:	332d      	adds	r3, #45	; 0x2d
 8018bfe:	33ff      	adds	r3, #255	; 0xff
 8018c00:	001a      	movs	r2, r3
 8018c02:	4b5b      	ldr	r3, [pc, #364]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018c04:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 8018c06:	4b5b      	ldr	r3, [pc, #364]	; (8018d74 <_itsdk_console_processLine+0x2a0>)
 8018c08:	0018      	movs	r0, r3
 8018c0a:	f7ff ff4b 	bl	8018aa4 <_itsdk_console_printf>
 8018c0e:	e0ab      	b.n	8018d68 <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 8018c10:	4b59      	ldr	r3, [pc, #356]	; (8018d78 <_itsdk_console_processLine+0x2a4>)
 8018c12:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8018c14:	2333      	movs	r3, #51	; 0x33
 8018c16:	18fb      	adds	r3, r7, r3
 8018c18:	2201      	movs	r2, #1
 8018c1a:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8018c1c:	e022      	b.n	8018c64 <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 8018c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c20:	685b      	ldr	r3, [r3, #4]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d01a      	beq.n	8018c5c <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c28:	685b      	ldr	r3, [r3, #4]
 8018c2a:	4a51      	ldr	r2, [pc, #324]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018c2c:	7812      	ldrb	r2, [r2, #0]
 8018c2e:	0612      	lsls	r2, r2, #24
 8018c30:	0e52      	lsrs	r2, r2, #25
 8018c32:	b2d2      	uxtb	r2, r2
 8018c34:	0011      	movs	r1, r2
 8018c36:	251e      	movs	r5, #30
 8018c38:	197c      	adds	r4, r7, r5
 8018c3a:	4a50      	ldr	r2, [pc, #320]	; (8018d7c <_itsdk_console_processLine+0x2a8>)
 8018c3c:	0010      	movs	r0, r2
 8018c3e:	4798      	blx	r3
 8018c40:	0003      	movs	r3, r0
 8018c42:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 8018c44:	197b      	adds	r3, r7, r5
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d002      	beq.n	8018c52 <_itsdk_console_processLine+0x17e>
 8018c4c:	2b02      	cmp	r3, #2
 8018c4e:	d000      	beq.n	8018c52 <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 8018c50:	e005      	b.n	8018c5e <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018c52:	2333      	movs	r3, #51	; 0x33
 8018c54:	18fb      	adds	r3, r7, r3
 8018c56:	2200      	movs	r2, #0
 8018c58:	701a      	strb	r2, [r3, #0]
						  break;
 8018c5a:	e000      	b.n	8018c5e <_itsdk_console_processLine+0x18a>
				   }
				}
 8018c5c:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 8018c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c60:	689b      	ldr	r3, [r3, #8]
 8018c62:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 8018c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d1d9      	bne.n	8018c1e <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8018c6a:	2333      	movs	r3, #51	; 0x33
 8018c6c:	18fb      	adds	r3, r7, r3
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	2b01      	cmp	r3, #1
 8018c72:	d000      	beq.n	8018c76 <_itsdk_console_processLine+0x1a2>
 8018c74:	e078      	b.n	8018d68 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 8018c76:	4b42      	ldr	r3, [pc, #264]	; (8018d80 <_itsdk_console_processLine+0x2ac>)
 8018c78:	0018      	movs	r0, r3
 8018c7a:	f7ff ff13 	bl	8018aa4 <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 8018c7e:	4b41      	ldr	r3, [pc, #260]	; (8018d84 <_itsdk_console_processLine+0x2b0>)
 8018c80:	0018      	movs	r0, r3
 8018c82:	f7ff ff0f 	bl	8018aa4 <_itsdk_console_printf>
 8018c86:	e06f      	b.n	8018d68 <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 8018c88:	4b39      	ldr	r3, [pc, #228]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	2201      	movs	r2, #1
 8018c8e:	4393      	bics	r3, r2
 8018c90:	b2db      	uxtb	r3, r3
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d068      	beq.n	8018d68 <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 8018c96:	f004 fa29 	bl	801d0ec <itsdk_time_get_ms>
 8018c9a:	22fa      	movs	r2, #250	; 0xfa
 8018c9c:	0092      	lsls	r2, r2, #2
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	f7e7 fc12 	bl	80004c8 <__aeabi_uldivmod>
 8018ca4:	0003      	movs	r3, r0
 8018ca6:	000c      	movs	r4, r1
 8018ca8:	623b      	str	r3, [r7, #32]
 8018caa:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8018cac:	6a3b      	ldr	r3, [r7, #32]
 8018cae:	332d      	adds	r3, #45	; 0x2d
 8018cb0:	33ff      	adds	r3, #255	; 0xff
 8018cb2:	001a      	movs	r2, r3
 8018cb4:	4b2e      	ldr	r3, [pc, #184]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018cb6:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 8018cb8:	4b2f      	ldr	r3, [pc, #188]	; (8018d78 <_itsdk_console_processLine+0x2a4>)
 8018cba:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8018cbc:	232b      	movs	r3, #43	; 0x2b
 8018cbe:	18fb      	adds	r3, r7, r3
 8018cc0:	2201      	movs	r2, #1
 8018cc2:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8018cc4:	e042      	b.n	8018d4c <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 8018cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cc8:	685b      	ldr	r3, [r3, #4]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d01a      	beq.n	8018d04 <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cd0:	685b      	ldr	r3, [r3, #4]
 8018cd2:	4a27      	ldr	r2, [pc, #156]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018cd4:	7812      	ldrb	r2, [r2, #0]
 8018cd6:	0612      	lsls	r2, r2, #24
 8018cd8:	0e52      	lsrs	r2, r2, #25
 8018cda:	b2d2      	uxtb	r2, r2
 8018cdc:	0011      	movs	r1, r2
 8018cde:	251f      	movs	r5, #31
 8018ce0:	197c      	adds	r4, r7, r5
 8018ce2:	4a26      	ldr	r2, [pc, #152]	; (8018d7c <_itsdk_console_processLine+0x2a8>)
 8018ce4:	0010      	movs	r0, r2
 8018ce6:	4798      	blx	r3
 8018ce8:	0003      	movs	r3, r0
 8018cea:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8018cec:	197b      	adds	r3, r7, r5
 8018cee:	781b      	ldrb	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d002      	beq.n	8018cfa <_itsdk_console_processLine+0x226>
 8018cf4:	2b02      	cmp	r3, #2
 8018cf6:	d000      	beq.n	8018cfa <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8018cf8:	e005      	b.n	8018d06 <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018cfa:	232b      	movs	r3, #43	; 0x2b
 8018cfc:	18fb      	adds	r3, r7, r3
 8018cfe:	2200      	movs	r2, #0
 8018d00:	701a      	strb	r2, [r3, #0]
						  break;
 8018d02:	e000      	b.n	8018d06 <_itsdk_console_processLine+0x232>
				   }
			  }
 8018d04:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 8018d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d01a      	beq.n	8018d44 <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	4a17      	ldr	r2, [pc, #92]	; (8018d70 <_itsdk_console_processLine+0x29c>)
 8018d14:	7812      	ldrb	r2, [r2, #0]
 8018d16:	0612      	lsls	r2, r2, #24
 8018d18:	0e52      	lsrs	r2, r2, #25
 8018d1a:	b2d2      	uxtb	r2, r2
 8018d1c:	0011      	movs	r1, r2
 8018d1e:	251f      	movs	r5, #31
 8018d20:	197c      	adds	r4, r7, r5
 8018d22:	4a16      	ldr	r2, [pc, #88]	; (8018d7c <_itsdk_console_processLine+0x2a8>)
 8018d24:	0010      	movs	r0, r2
 8018d26:	4798      	blx	r3
 8018d28:	0003      	movs	r3, r0
 8018d2a:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8018d2c:	197b      	adds	r3, r7, r5
 8018d2e:	781b      	ldrb	r3, [r3, #0]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d002      	beq.n	8018d3a <_itsdk_console_processLine+0x266>
 8018d34:	2b02      	cmp	r3, #2
 8018d36:	d000      	beq.n	8018d3a <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8018d38:	e005      	b.n	8018d46 <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018d3a:	232b      	movs	r3, #43	; 0x2b
 8018d3c:	18fb      	adds	r3, r7, r3
 8018d3e:	2200      	movs	r2, #0
 8018d40:	701a      	strb	r2, [r3, #0]
						  break;
 8018d42:	e000      	b.n	8018d46 <_itsdk_console_processLine+0x272>
				   }
			  }
 8018d44:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 8018d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d48:	689b      	ldr	r3, [r3, #8]
 8018d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 8018d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d1b9      	bne.n	8018cc6 <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8018d52:	232b      	movs	r3, #43	; 0x2b
 8018d54:	18fb      	adds	r3, r7, r3
 8018d56:	781b      	ldrb	r3, [r3, #0]
 8018d58:	2b01      	cmp	r3, #1
 8018d5a:	d105      	bne.n	8018d68 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 8018d5c:	4b09      	ldr	r3, [pc, #36]	; (8018d84 <_itsdk_console_processLine+0x2b0>)
 8018d5e:	0018      	movs	r0, r3
 8018d60:	f7ff fea0 	bl	8018aa4 <_itsdk_console_printf>
 8018d64:	e000      	b.n	8018d68 <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 8018d66:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	b010      	add	sp, #64	; 0x40
 8018d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8018d6e:	46c0      	nop			; (mov r8, r8)
 8018d70:	200011a4 	.word	0x200011a4
 8018d74:	080209dc 	.word	0x080209dc
 8018d78:	200011d4 	.word	0x200011d4
 8018d7c:	200011a5 	.word	0x200011a5
 8018d80:	08020b24 	.word	0x08020b24
 8018d84:	080209e4 	.word	0x080209e4

08018d88 <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b082      	sub	sp, #8
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	0002      	movs	r2, r0
 8018d90:	1dfb      	adds	r3, r7, #7
 8018d92:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 8018d94:	1dfb      	adds	r3, r7, #7
 8018d96:	781b      	ldrb	r3, [r3, #0]
 8018d98:	2b0a      	cmp	r3, #10
 8018d9a:	d007      	beq.n	8018dac <_itsdk_console_processChar+0x24>
 8018d9c:	1dfb      	adds	r3, r7, #7
 8018d9e:	781b      	ldrb	r3, [r3, #0]
 8018da0:	2b0d      	cmp	r3, #13
 8018da2:	d003      	beq.n	8018dac <_itsdk_console_processChar+0x24>
 8018da4:	1dfb      	adds	r3, r7, #7
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d10e      	bne.n	8018dca <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 8018dac:	4b1c      	ldr	r3, [pc, #112]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	2201      	movs	r2, #1
 8018db2:	4393      	bics	r3, r2
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d02d      	beq.n	8018e16 <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 8018dba:	f7ff fe8b 	bl	8018ad4 <_itsdk_console_processLine>
			__console.pBuffer = 0;
 8018dbe:	4b18      	ldr	r3, [pc, #96]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018dc0:	781a      	ldrb	r2, [r3, #0]
 8018dc2:	2101      	movs	r1, #1
 8018dc4:	400a      	ands	r2, r1
 8018dc6:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 8018dc8:	e025      	b.n	8018e16 <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 8018dca:	4b15      	ldr	r3, [pc, #84]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	061b      	lsls	r3, r3, #24
 8018dd0:	0e5b      	lsrs	r3, r3, #25
 8018dd2:	b2db      	uxtb	r3, r3
 8018dd4:	2b27      	cmp	r3, #39	; 0x27
 8018dd6:	d81e      	bhi.n	8018e16 <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 8018dd8:	4b11      	ldr	r3, [pc, #68]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	061b      	lsls	r3, r3, #24
 8018dde:	0e5b      	lsrs	r3, r3, #25
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	001a      	movs	r2, r3
 8018de4:	4b0e      	ldr	r3, [pc, #56]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018de6:	189b      	adds	r3, r3, r2
 8018de8:	1dfa      	adds	r2, r7, #7
 8018dea:	7812      	ldrb	r2, [r2, #0]
 8018dec:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 8018dee:	4b0c      	ldr	r3, [pc, #48]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018df0:	781b      	ldrb	r3, [r3, #0]
 8018df2:	061b      	lsls	r3, r3, #24
 8018df4:	0e5b      	lsrs	r3, r3, #25
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	3301      	adds	r3, #1
 8018dfa:	1c1a      	adds	r2, r3, #0
 8018dfc:	237f      	movs	r3, #127	; 0x7f
 8018dfe:	4013      	ands	r3, r2
 8018e00:	b2da      	uxtb	r2, r3
 8018e02:	4b07      	ldr	r3, [pc, #28]	; (8018e20 <_itsdk_console_processChar+0x98>)
 8018e04:	1890      	adds	r0, r2, r2
 8018e06:	781a      	ldrb	r2, [r3, #0]
 8018e08:	2101      	movs	r1, #1
 8018e0a:	400a      	ands	r2, r1
 8018e0c:	1c11      	adds	r1, r2, #0
 8018e0e:	1c02      	adds	r2, r0, #0
 8018e10:	430a      	orrs	r2, r1
 8018e12:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8018e14:	e7ff      	b.n	8018e16 <_itsdk_console_processChar+0x8e>
 8018e16:	46c0      	nop			; (mov r8, r8)
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	b002      	add	sp, #8
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	46c0      	nop			; (mov r8, r8)
 8018e20:	200011a4 	.word	0x200011a4

08018e24 <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b084      	sub	sp, #16
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 8018e2c:	4b13      	ldr	r3, [pc, #76]	; (8018e7c <itsdk_console_registerCommand+0x58>)
 8018e2e:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	681a      	ldr	r2, [r3, #0]
 8018e34:	4b12      	ldr	r3, [pc, #72]	; (8018e80 <itsdk_console_registerCommand+0x5c>)
 8018e36:	429a      	cmp	r2, r3
 8018e38:	d008      	beq.n	8018e4c <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 8018e3a:	4b12      	ldr	r3, [pc, #72]	; (8018e84 <itsdk_console_registerCommand+0x60>)
 8018e3c:	2100      	movs	r1, #0
 8018e3e:	0018      	movs	r0, r3
 8018e40:	f002 fe92 	bl	801bb68 <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 8018e44:	e002      	b.n	8018e4c <itsdk_console_registerCommand+0x28>
	  c = c->next;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	689b      	ldr	r3, [r3, #8]
 8018e4a:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	689b      	ldr	r3, [r3, #8]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d004      	beq.n	8018e5e <itsdk_console_registerCommand+0x3a>
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	689b      	ldr	r3, [r3, #8]
 8018e58:	687a      	ldr	r2, [r7, #4]
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	d1f3      	bne.n	8018e46 <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	689b      	ldr	r3, [r3, #8]
 8018e62:	687a      	ldr	r2, [r7, #4]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d005      	beq.n	8018e74 <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	687a      	ldr	r2, [r7, #4]
 8018e6c:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2200      	movs	r2, #0
 8018e72:	609a      	str	r2, [r3, #8]
	}
}
 8018e74:	46c0      	nop			; (mov r8, r8)
 8018e76:	46bd      	mov	sp, r7
 8018e78:	b004      	add	sp, #16
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	200011d4 	.word	0x200011d4
 8018e80:	08018651 	.word	0x08018651
 8018e84:	c0000003 	.word	0xc0000003

08018e88 <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 8018e88:	b590      	push	{r4, r7, lr}
 8018e8a:	b089      	sub	sp, #36	; 0x24
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	0008      	movs	r0, r1
 8018e92:	0011      	movs	r1, r2
 8018e94:	1cbb      	adds	r3, r7, #2
 8018e96:	1c02      	adds	r2, r0, #0
 8018e98:	801a      	strh	r2, [r3, #0]
 8018e9a:	1c7b      	adds	r3, r7, #1
 8018e9c:	1c0a      	adds	r2, r1, #0
 8018e9e:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 8018ea0:	2410      	movs	r4, #16
 8018ea2:	193b      	adds	r3, r7, r4
 8018ea4:	4a17      	ldr	r2, [pc, #92]	; (8018f04 <eeprom_write_config+0x7c>)
 8018ea6:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8018ea8:	193b      	adds	r3, r7, r4
 8018eaa:	1cba      	adds	r2, r7, #2
 8018eac:	8812      	ldrh	r2, [r2, #0]
 8018eae:	809a      	strh	r2, [r3, #4]
	t.version = version;
 8018eb0:	193b      	adds	r3, r7, r4
 8018eb2:	1c7a      	adds	r2, r7, #1
 8018eb4:	7812      	ldrb	r2, [r2, #0]
 8018eb6:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8018eb8:	1cbb      	adds	r3, r7, #2
 8018eba:	881a      	ldrh	r2, [r3, #0]
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	0011      	movs	r1, r2
 8018ec0:	0018      	movs	r0, r3
 8018ec2:	f003 fd09 	bl	801c8d8 <itsdk_computeCRC32>
 8018ec6:	0002      	movs	r2, r0
 8018ec8:	193b      	adds	r3, r7, r4
 8018eca:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 8018ecc:	2300      	movs	r3, #0
 8018ece:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8018ed0:	230c      	movs	r3, #12
 8018ed2:	18fb      	adds	r3, r7, r3
 8018ed4:	0018      	movs	r0, r3
 8018ed6:	f000 f88f 	bl	8018ff8 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018eda:	68f9      	ldr	r1, [r7, #12]
 8018edc:	193a      	adds	r2, r7, r4
 8018ede:	2310      	movs	r3, #16
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	f005 fb41 	bl	801e568 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	3310      	adds	r3, #16
 8018eea:	0019      	movs	r1, r3
 8018eec:	1cbb      	adds	r3, r7, #2
 8018eee:	881b      	ldrh	r3, [r3, #0]
 8018ef0:	687a      	ldr	r2, [r7, #4]
 8018ef2:	2000      	movs	r0, #0
 8018ef4:	f005 fb38 	bl	801e568 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 8018ef8:	2301      	movs	r3, #1
}
 8018efa:	0018      	movs	r0, r3
 8018efc:	46bd      	mov	sp, r7
 8018efe:	b009      	add	sp, #36	; 0x24
 8018f00:	bd90      	pop	{r4, r7, pc}
 8018f02:	46c0      	nop			; (mov r8, r8)
 8018f04:	ffffa5fc 	.word	0xffffa5fc

08018f08 <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 8018f08:	b5b0      	push	{r4, r5, r7, lr}
 8018f0a:	b08a      	sub	sp, #40	; 0x28
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	60f8      	str	r0, [r7, #12]
 8018f10:	0008      	movs	r0, r1
 8018f12:	0011      	movs	r1, r2
 8018f14:	607b      	str	r3, [r7, #4]
 8018f16:	230a      	movs	r3, #10
 8018f18:	18fb      	adds	r3, r7, r3
 8018f1a:	1c02      	adds	r2, r0, #0
 8018f1c:	801a      	strh	r2, [r3, #0]
 8018f1e:	2309      	movs	r3, #9
 8018f20:	18fb      	adds	r3, r7, r3
 8018f22:	1c0a      	adds	r2, r1, #0
 8018f24:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 8018f26:	2300      	movs	r3, #0
 8018f28:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 8018f2a:	2310      	movs	r3, #16
 8018f2c:	18fb      	adds	r3, r7, r3
 8018f2e:	0018      	movs	r0, r3
 8018f30:	f000 f862 	bl	8018ff8 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018f34:	6939      	ldr	r1, [r7, #16]
 8018f36:	2414      	movs	r4, #20
 8018f38:	193a      	adds	r2, r7, r4
 8018f3a:	2310      	movs	r3, #16
 8018f3c:	2000      	movs	r0, #0
 8018f3e:	f005 fbb7 	bl	801e6b0 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 8018f42:	193b      	adds	r3, r7, r4
 8018f44:	881b      	ldrh	r3, [r3, #0]
 8018f46:	4a2b      	ldr	r2, [pc, #172]	; (8018ff4 <eeprom_read_config+0xec>)
 8018f48:	4293      	cmp	r3, r2
 8018f4a:	d004      	beq.n	8018f56 <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2200      	movs	r2, #0
 8018f50:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 8018f52:	2300      	movs	r3, #0
 8018f54:	e049      	b.n	8018fea <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 8018f56:	2114      	movs	r1, #20
 8018f58:	187b      	adds	r3, r7, r1
 8018f5a:	789a      	ldrb	r2, [r3, #2]
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 8018f60:	187b      	adds	r3, r7, r1
 8018f62:	789b      	ldrb	r3, [r3, #2]
 8018f64:	2209      	movs	r2, #9
 8018f66:	18ba      	adds	r2, r7, r2
 8018f68:	7812      	ldrb	r2, [r2, #0]
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	d001      	beq.n	8018f72 <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	e03b      	b.n	8018fea <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 8018f72:	2314      	movs	r3, #20
 8018f74:	18fb      	adds	r3, r7, r3
 8018f76:	889b      	ldrh	r3, [r3, #4]
 8018f78:	220a      	movs	r2, #10
 8018f7a:	18ba      	adds	r2, r7, r2
 8018f7c:	8812      	ldrh	r2, [r2, #0]
 8018f7e:	429a      	cmp	r2, r3
 8018f80:	d009      	beq.n	8018f96 <eeprom_read_config+0x8e>
 8018f82:	2330      	movs	r3, #48	; 0x30
 8018f84:	2208      	movs	r2, #8
 8018f86:	4694      	mov	ip, r2
 8018f88:	44bc      	add	ip, r7
 8018f8a:	4463      	add	r3, ip
 8018f8c:	781b      	ldrb	r3, [r3, #0]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d101      	bne.n	8018f96 <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 8018f92:	2300      	movs	r3, #0
 8018f94:	e029      	b.n	8018fea <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 8018f96:	200a      	movs	r0, #10
 8018f98:	183b      	adds	r3, r7, r0
 8018f9a:	2514      	movs	r5, #20
 8018f9c:	197a      	adds	r2, r7, r5
 8018f9e:	8892      	ldrh	r2, [r2, #4]
 8018fa0:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8018fa2:	693b      	ldr	r3, [r7, #16]
 8018fa4:	3310      	adds	r3, #16
 8018fa6:	0019      	movs	r1, r3
 8018fa8:	0004      	movs	r4, r0
 8018faa:	183b      	adds	r3, r7, r0
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	68fa      	ldr	r2, [r7, #12]
 8018fb0:	2000      	movs	r0, #0
 8018fb2:	f005 fb7d 	bl	801e6b0 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 8018fb6:	0020      	movs	r0, r4
 8018fb8:	183b      	adds	r3, r7, r0
 8018fba:	881a      	ldrh	r2, [r3, #0]
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	0011      	movs	r1, r2
 8018fc0:	0018      	movs	r0, r3
 8018fc2:	f003 fc89 	bl	801c8d8 <itsdk_computeCRC32>
 8018fc6:	0003      	movs	r3, r0
 8018fc8:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 8018fca:	197b      	adds	r3, r7, r5
 8018fcc:	689b      	ldr	r3, [r3, #8]
 8018fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d009      	beq.n	8018fe8 <eeprom_read_config+0xe0>
 8018fd4:	2330      	movs	r3, #48	; 0x30
 8018fd6:	2208      	movs	r2, #8
 8018fd8:	4694      	mov	ip, r2
 8018fda:	44bc      	add	ip, r7
 8018fdc:	4463      	add	r3, ip
 8018fde:	781b      	ldrb	r3, [r3, #0]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d101      	bne.n	8018fe8 <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	e000      	b.n	8018fea <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 8018fe8:	2301      	movs	r3, #1
}
 8018fea:	0018      	movs	r0, r3
 8018fec:	46bd      	mov	sp, r7
 8018fee:	b00a      	add	sp, #40	; 0x28
 8018ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8018ff2:	46c0      	nop			; (mov r8, r8)
 8018ff4:	0000a5fc 	.word	0x0000a5fc

08018ff8 <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b086      	sub	sp, #24
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 8019000:	2300      	movs	r3, #0
 8019002:	613b      	str	r3, [r7, #16]
 8019004:	2300      	movs	r3, #0
 8019006:	60fb      	str	r3, [r7, #12]
 8019008:	2300      	movs	r3, #0
 801900a:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 801900c:	2310      	movs	r3, #16
 801900e:	18fb      	adds	r3, r7, r3
 8019010:	0018      	movs	r0, r3
 8019012:	f000 fde6 	bl	8019be2 <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 8019016:	230c      	movs	r3, #12
 8019018:	18fb      	adds	r3, r7, r3
 801901a:	0018      	movs	r0, r3
 801901c:	f002 fec9 	bl	801bdb2 <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681a      	ldr	r2, [r3, #0]
 8019024:	6939      	ldr	r1, [r7, #16]
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	18c9      	adds	r1, r1, r3
 801902a:	697b      	ldr	r3, [r7, #20]
 801902c:	18cb      	adds	r3, r1, r3
 801902e:	18d2      	adds	r2, r2, r3
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 8019034:	2301      	movs	r3, #1
}
 8019036:	0018      	movs	r0, r3
 8019038:	46bd      	mov	sp, r7
 801903a:	b006      	add	sp, #24
 801903c:	bd80      	pop	{r7, pc}

0801903e <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 801903e:	b590      	push	{r4, r7, lr}
 8019040:	b089      	sub	sp, #36	; 0x24
 8019042:	af00      	add	r7, sp, #0
 8019044:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 8019046:	2300      	movs	r3, #0
 8019048:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 801904a:	230c      	movs	r3, #12
 801904c:	18fb      	adds	r3, r7, r3
 801904e:	0018      	movs	r0, r3
 8019050:	f7ff ffd2 	bl	8018ff8 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8019054:	68f9      	ldr	r1, [r7, #12]
 8019056:	2410      	movs	r4, #16
 8019058:	193a      	adds	r2, r7, r4
 801905a:	2310      	movs	r3, #16
 801905c:	2000      	movs	r0, #0
 801905e:	f005 fb27 	bl	801e6b0 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 8019062:	193b      	adds	r3, r7, r4
 8019064:	889b      	ldrh	r3, [r3, #4]
 8019066:	3310      	adds	r3, #16
 8019068:	001a      	movs	r2, r3
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 801906e:	2301      	movs	r3, #1
}
 8019070:	0018      	movs	r0, r3
 8019072:	46bd      	mov	sp, r7
 8019074:	b009      	add	sp, #36	; 0x24
 8019076:	bd90      	pop	{r4, r7, pc}

08019078 <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 801907e:	2300      	movs	r3, #0
 8019080:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8019082:	2300      	movs	r3, #0
 8019084:	607b      	str	r3, [r7, #4]
 8019086:	e008      	b.n	801909a <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 8019088:	6879      	ldr	r1, [r7, #4]
 801908a:	003a      	movs	r2, r7
 801908c:	2304      	movs	r3, #4
 801908e:	2000      	movs	r0, #0
 8019090:	f005 fa6a 	bl	801e568 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	3304      	adds	r3, #4
 8019098:	607b      	str	r3, [r7, #4]
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	4a03      	ldr	r2, [pc, #12]	; (80190ac <eeprom_clearAllEprom+0x34>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	ddf2      	ble.n	8019088 <eeprom_clearAllEprom+0x10>
	}
}
 80190a2:	46c0      	nop			; (mov r8, r8)
 80190a4:	46bd      	mov	sp, r7
 80190a6:	b002      	add	sp, #8
 80190a8:	bd80      	pop	{r7, pc}
 80190aa:	46c0      	nop			; (mov r8, r8)
 80190ac:	000017ff 	.word	0x000017ff

080190b0 <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 80190b0:	b580      	push	{r7, lr}
 80190b2:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 80190b4:	4b1b      	ldr	r3, [pc, #108]	; (8019124 <itsdk_config_sdk_resetToFactory+0x74>)
 80190b6:	2100      	movs	r1, #0
 80190b8:	0018      	movs	r0, r3
 80190ba:	f002 fd55 	bl	801bb68 <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 80190be:	4b1a      	ldr	r3, [pc, #104]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 80190c0:	2216      	movs	r2, #22
 80190c2:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80190c4:	4b18      	ldr	r3, [pc, #96]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 80190c6:	2218      	movs	r2, #24
 80190c8:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80190ca:	4b17      	ldr	r3, [pc, #92]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 80190cc:	2202      	movs	r2, #2
 80190ce:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 80190d0:	4b15      	ldr	r3, [pc, #84]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 80190d2:	7a9a      	ldrb	r2, [r3, #10]
 80190d4:	213f      	movs	r1, #63	; 0x3f
 80190d6:	400a      	ands	r2, r1
 80190d8:	1c11      	adds	r1, r2, #0
 80190da:	2240      	movs	r2, #64	; 0x40
 80190dc:	430a      	orrs	r2, r1
 80190de:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 80190e0:	4b11      	ldr	r3, [pc, #68]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 80190e2:	7a9a      	ldrb	r2, [r3, #10]
 80190e4:	2130      	movs	r1, #48	; 0x30
 80190e6:	438a      	bics	r2, r1
 80190e8:	1c11      	adds	r1, r2, #0
 80190ea:	2210      	movs	r2, #16
 80190ec:	430a      	orrs	r2, r1
 80190ee:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 80190f0:	4b0d      	ldr	r3, [pc, #52]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 80190f2:	7a9a      	ldrb	r2, [r3, #10]
 80190f4:	2103      	movs	r1, #3
 80190f6:	438a      	bics	r2, r1
 80190f8:	1c11      	adds	r1, r2, #0
 80190fa:	2201      	movs	r2, #1
 80190fc:	430a      	orrs	r2, r1
 80190fe:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 8019100:	4b09      	ldr	r3, [pc, #36]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 8019102:	7a9a      	ldrb	r2, [r3, #10]
 8019104:	210c      	movs	r1, #12
 8019106:	438a      	bics	r2, r1
 8019108:	1c11      	adds	r1, r2, #0
 801910a:	2204      	movs	r2, #4
 801910c:	430a      	orrs	r2, r1
 801910e:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 8019110:	4b05      	ldr	r3, [pc, #20]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 8019112:	2200      	movs	r2, #0
 8019114:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 8019116:	4b04      	ldr	r3, [pc, #16]	; (8019128 <itsdk_config_sdk_resetToFactory+0x78>)
 8019118:	2220      	movs	r2, #32
 801911a:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 801911c:	2302      	movs	r3, #2
	}
 801911e:	0018      	movs	r0, r3
 8019120:	46bd      	mov	sp, r7
 8019122:	bd80      	pop	{r7, pc}
 8019124:	10000073 	.word	0x10000073
 8019128:	20001688 	.word	0x20001688

0801912c <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 801912c:	b580      	push	{r7, lr}
 801912e:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8019130:	4b05      	ldr	r3, [pc, #20]	; (8019148 <itsdk_config_app_resetToFactory+0x1c>)
 8019132:	2201      	movs	r2, #1
 8019134:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8019136:	4b05      	ldr	r3, [pc, #20]	; (801914c <itsdk_config_app_resetToFactory+0x20>)
 8019138:	2100      	movs	r1, #0
 801913a:	0018      	movs	r0, r3
 801913c:	f002 fd14 	bl	801bb68 <itsdk_error_report>
			return CONFIG_FAILED;
 8019140:	2304      	movs	r3, #4
		}
 8019142:	0018      	movs	r0, r3
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}
 8019148:	20001688 	.word	0x20001688
 801914c:	40000070 	.word	0x40000070

08019150 <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8019150:	b580      	push	{r7, lr}
 8019152:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8019154:	4b05      	ldr	r3, [pc, #20]	; (801916c <itsdk_config_app_upgradeConfiguration+0x1c>)
 8019156:	2201      	movs	r2, #1
 8019158:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 801915a:	4b05      	ldr	r3, [pc, #20]	; (8019170 <itsdk_config_app_upgradeConfiguration+0x20>)
 801915c:	2100      	movs	r1, #0
 801915e:	0018      	movs	r0, r3
 8019160:	f002 fd02 	bl	801bb68 <itsdk_error_report>
			return CONFIG_FAILED;
 8019164:	2304      	movs	r3, #4
		}
 8019166:	0018      	movs	r0, r3
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}
 801916c:	20001688 	.word	0x20001688
 8019170:	40000070 	.word	0x40000070

08019174 <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 8019174:	b5b0      	push	{r4, r5, r7, lr}
 8019176:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 8019178:	f7ff ff9a 	bl	80190b0 <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 801917c:	f7ff ffd6 	bl	801912c <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8019180:	4b0b      	ldr	r3, [pc, #44]	; (80191b0 <itsdk_config_resetToFactory+0x3c>)
 8019182:	2201      	movs	r2, #1
 8019184:	211c      	movs	r1, #28
 8019186:	0018      	movs	r0, r3
 8019188:	f7ff fe7e 	bl	8018e88 <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 801918c:	4b09      	ldr	r3, [pc, #36]	; (80191b4 <itsdk_config_resetToFactory+0x40>)
 801918e:	4a08      	ldr	r2, [pc, #32]	; (80191b0 <itsdk_config_resetToFactory+0x3c>)
 8019190:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019192:	c313      	stmia	r3!, {r0, r1, r4}
 8019194:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019196:	c313      	stmia	r3!, {r0, r1, r4}
 8019198:	6812      	ldr	r2, [r2, #0]
 801919a:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 801919c:	4b06      	ldr	r3, [pc, #24]	; (80191b8 <itsdk_config_resetToFactory+0x44>)
 801919e:	2103      	movs	r1, #3
 80191a0:	0018      	movs	r0, r3
 80191a2:	f002 fce1 	bl	801bb68 <itsdk_error_report>
	     return CONFIG_SUCCESS;
 80191a6:	2300      	movs	r3, #0
	}
 80191a8:	0018      	movs	r0, r3
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bdb0      	pop	{r4, r5, r7, pc}
 80191ae:	46c0      	nop			; (mov r8, r8)
 80191b0:	20001688 	.word	0x20001688
 80191b4:	2000166c 	.word	0x2000166c
 80191b8:	50000071 	.word	0x50000071

080191bc <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 80191bc:	b590      	push	{r4, r7, lr}
 80191be:	b087      	sub	sp, #28
 80191c0:	af02      	add	r7, sp, #8
 80191c2:	0002      	movs	r2, r0
 80191c4:	1dfb      	adds	r3, r7, #7
 80191c6:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 80191c8:	4b60      	ldr	r3, [pc, #384]	; (801934c <itsdk_config_loadConfiguration+0x190>)
 80191ca:	4a61      	ldr	r2, [pc, #388]	; (8019350 <itsdk_config_loadConfiguration+0x194>)
 80191cc:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 80191ce:	4b5f      	ldr	r3, [pc, #380]	; (801934c <itsdk_config_loadConfiguration+0x190>)
 80191d0:	4a60      	ldr	r2, [pc, #384]	; (8019354 <itsdk_config_loadConfiguration+0x198>)
 80191d2:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 80191d4:	4b5d      	ldr	r3, [pc, #372]	; (801934c <itsdk_config_loadConfiguration+0x190>)
 80191d6:	2200      	movs	r2, #0
 80191d8:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 80191da:	4b5c      	ldr	r3, [pc, #368]	; (801934c <itsdk_config_loadConfiguration+0x190>)
 80191dc:	0018      	movs	r0, r3
 80191de:	f7ff fe21 	bl	8018e24 <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 80191e2:	230f      	movs	r3, #15
 80191e4:	18fb      	adds	r3, r7, r3
 80191e6:	2200      	movs	r2, #0
 80191e8:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 80191ea:	230e      	movs	r3, #14
 80191ec:	18fb      	adds	r3, r7, r3
 80191ee:	2200      	movs	r2, #0
 80191f0:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 80191f2:	1dfb      	adds	r3, r7, #7
 80191f4:	781b      	ldrb	r3, [r3, #0]
 80191f6:	2b01      	cmp	r3, #1
 80191f8:	d100      	bne.n	80191fc <itsdk_config_loadConfiguration+0x40>
 80191fa:	e071      	b.n	80192e0 <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 80191fc:	230d      	movs	r3, #13
 80191fe:	18fa      	adds	r2, r7, r3
 8019200:	4855      	ldr	r0, [pc, #340]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 8019202:	2301      	movs	r3, #1
 8019204:	9300      	str	r3, [sp, #0]
 8019206:	0013      	movs	r3, r2
 8019208:	2201      	movs	r2, #1
 801920a:	211c      	movs	r1, #28
 801920c:	f7ff fe7c 	bl	8018f08 <eeprom_read_config>
 8019210:	1e03      	subs	r3, r0, #0
 8019212:	d11c      	bne.n	801924e <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 8019214:	230d      	movs	r3, #13
 8019216:	18fb      	adds	r3, r7, r3
 8019218:	781b      	ldrb	r3, [r3, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d109      	bne.n	8019232 <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 801921e:	4b4f      	ldr	r3, [pc, #316]	; (801935c <itsdk_config_loadConfiguration+0x1a0>)
 8019220:	2100      	movs	r1, #0
 8019222:	0018      	movs	r0, r3
 8019224:	f002 fca0 	bl	801bb68 <itsdk_error_report>
			requestFactoryReset=1;
 8019228:	230f      	movs	r3, #15
 801922a:	18fb      	adds	r3, r7, r3
 801922c:	2201      	movs	r2, #1
 801922e:	701a      	strb	r2, [r3, #0]
 8019230:	e00d      	b.n	801924e <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 8019232:	230d      	movs	r3, #13
 8019234:	18fb      	adds	r3, r7, r3
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	2b01      	cmp	r3, #1
 801923a:	d008      	beq.n	801924e <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 801923c:	4b48      	ldr	r3, [pc, #288]	; (8019360 <itsdk_config_loadConfiguration+0x1a4>)
 801923e:	2100      	movs	r1, #0
 8019240:	0018      	movs	r0, r3
 8019242:	f002 fc91 	bl	801bb68 <itsdk_error_report>
			requestFactoryReset=1;
 8019246:	230f      	movs	r3, #15
 8019248:	18fb      	adds	r3, r7, r3
 801924a:	2201      	movs	r2, #1
 801924c:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 801924e:	230f      	movs	r3, #15
 8019250:	18fb      	adds	r3, r7, r3
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d121      	bne.n	801929c <itsdk_config_loadConfiguration+0xe0>
 8019258:	4b3f      	ldr	r3, [pc, #252]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	2b16      	cmp	r3, #22
 801925e:	d103      	bne.n	8019268 <itsdk_config_loadConfiguration+0xac>
 8019260:	4b3d      	ldr	r3, [pc, #244]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 8019262:	885b      	ldrh	r3, [r3, #2]
 8019264:	2b18      	cmp	r3, #24
 8019266:	d019      	beq.n	801929c <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 8019268:	4b3b      	ldr	r3, [pc, #236]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 801926a:	885b      	ldrh	r3, [r3, #2]
 801926c:	2b18      	cmp	r3, #24
 801926e:	d009      	beq.n	8019284 <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8019270:	230f      	movs	r3, #15
 8019272:	18fb      	adds	r3, r7, r3
 8019274:	2201      	movs	r2, #1
 8019276:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 8019278:	4b3a      	ldr	r3, [pc, #232]	; (8019364 <itsdk_config_loadConfiguration+0x1a8>)
 801927a:	2100      	movs	r1, #0
 801927c:	0018      	movs	r0, r3
 801927e:	f002 fc73 	bl	801bb68 <itsdk_error_report>
 8019282:	e00b      	b.n	801929c <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8019284:	4b34      	ldr	r3, [pc, #208]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 8019286:	2216      	movs	r2, #22
 8019288:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 801928a:	230e      	movs	r3, #14
 801928c:	18fb      	adds	r3, r7, r3
 801928e:	2201      	movs	r2, #1
 8019290:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 8019292:	4b35      	ldr	r3, [pc, #212]	; (8019368 <itsdk_config_loadConfiguration+0x1ac>)
 8019294:	2116      	movs	r1, #22
 8019296:	0018      	movs	r0, r3
 8019298:	f002 fc66 	bl	801bb68 <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 801929c:	230f      	movs	r3, #15
 801929e:	18fb      	adds	r3, r7, r3
 80192a0:	781b      	ldrb	r3, [r3, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d120      	bne.n	80192e8 <itsdk_config_loadConfiguration+0x12c>
 80192a6:	4b2c      	ldr	r3, [pc, #176]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 80192a8:	7e1b      	ldrb	r3, [r3, #24]
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d01c      	beq.n	80192e8 <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 80192ae:	f7ff ff4f 	bl	8019150 <itsdk_config_app_upgradeConfiguration>
 80192b2:	0003      	movs	r3, r0
 80192b4:	2b03      	cmp	r3, #3
 80192b6:	d109      	bne.n	80192cc <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 80192b8:	230e      	movs	r3, #14
 80192ba:	18fb      	adds	r3, r7, r3
 80192bc:	2201      	movs	r2, #1
 80192be:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 80192c0:	4b2a      	ldr	r3, [pc, #168]	; (801936c <itsdk_config_loadConfiguration+0x1b0>)
 80192c2:	2101      	movs	r1, #1
 80192c4:	0018      	movs	r0, r3
 80192c6:	f002 fc4f 	bl	801bb68 <itsdk_error_report>
 80192ca:	e00d      	b.n	80192e8 <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 80192cc:	230f      	movs	r3, #15
 80192ce:	18fb      	adds	r3, r7, r3
 80192d0:	2201      	movs	r2, #1
 80192d2:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 80192d4:	4b23      	ldr	r3, [pc, #140]	; (8019364 <itsdk_config_loadConfiguration+0x1a8>)
 80192d6:	2101      	movs	r1, #1
 80192d8:	0018      	movs	r0, r3
 80192da:	f002 fc45 	bl	801bb68 <itsdk_error_report>
 80192de:	e003      	b.n	80192e8 <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 80192e0:	230f      	movs	r3, #15
 80192e2:	18fb      	adds	r3, r7, r3
 80192e4:	2201      	movs	r2, #1
 80192e6:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 80192e8:	230f      	movs	r3, #15
 80192ea:	18fb      	adds	r3, r7, r3
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	2b01      	cmp	r3, #1
 80192f0:	d10c      	bne.n	801930c <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 80192f2:	f7ff fedd 	bl	80190b0 <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 80192f6:	f7ff ff19 	bl	801912c <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 80192fa:	230e      	movs	r3, #14
 80192fc:	18fb      	adds	r3, r7, r3
 80192fe:	2201      	movs	r2, #1
 8019300:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8019302:	4b1b      	ldr	r3, [pc, #108]	; (8019370 <itsdk_config_loadConfiguration+0x1b4>)
 8019304:	2103      	movs	r1, #3
 8019306:	0018      	movs	r0, r3
 8019308:	f002 fc2e 	bl	801bb68 <itsdk_error_report>
   }

   if (configUpdated == 1) {
 801930c:	230e      	movs	r3, #14
 801930e:	18fb      	adds	r3, r7, r3
 8019310:	781b      	ldrb	r3, [r3, #0]
 8019312:	2b01      	cmp	r3, #1
 8019314:	d105      	bne.n	8019322 <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8019316:	4b10      	ldr	r3, [pc, #64]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 8019318:	2201      	movs	r2, #1
 801931a:	211c      	movs	r1, #28
 801931c:	0018      	movs	r0, r3
 801931e:	f7ff fdb3 	bl	8018e88 <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8019322:	4b14      	ldr	r3, [pc, #80]	; (8019374 <itsdk_config_loadConfiguration+0x1b8>)
 8019324:	4a0c      	ldr	r2, [pc, #48]	; (8019358 <itsdk_config_loadConfiguration+0x19c>)
 8019326:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019328:	c313      	stmia	r3!, {r0, r1, r4}
 801932a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801932c:	c313      	stmia	r3!, {r0, r1, r4}
 801932e:	6812      	ldr	r2, [r2, #0]
 8019330:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 8019332:	230f      	movs	r3, #15
 8019334:	18fb      	adds	r3, r7, r3
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	2b01      	cmp	r3, #1
 801933a:	d101      	bne.n	8019340 <itsdk_config_loadConfiguration+0x184>
 801933c:	2302      	movs	r3, #2
 801933e:	e000      	b.n	8019342 <itsdk_config_loadConfiguration+0x186>
 8019340:	2301      	movs	r3, #1

}
 8019342:	0018      	movs	r0, r3
 8019344:	46bd      	mov	sp, r7
 8019346:	b005      	add	sp, #20
 8019348:	bd90      	pop	{r4, r7, pc}
 801934a:	46c0      	nop			; (mov r8, r8)
 801934c:	200011e0 	.word	0x200011e0
 8019350:	0801956d 	.word	0x0801956d
 8019354:	08019425 	.word	0x08019425
 8019358:	20001688 	.word	0x20001688
 801935c:	40000076 	.word	0x40000076
 8019360:	40000077 	.word	0x40000077
 8019364:	50000078 	.word	0x50000078
 8019368:	10000074 	.word	0x10000074
 801936c:	10000075 	.word	0x10000075
 8019370:	50000071 	.word	0x50000071
 8019374:	2000166c 	.word	0x2000166c

08019378 <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 8019378:	b580      	push	{r7, lr}
 801937a:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 801937c:	2300      	movs	r3, #0
}
 801937e:	0018      	movs	r0, r3
 8019380:	46bd      	mov	sp, r7
 8019382:	bd80      	pop	{r7, pc}

08019384 <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 8019384:	b5b0      	push	{r4, r5, r7, lr}
 8019386:	b084      	sub	sp, #16
 8019388:	af00      	add	r7, sp, #0
 801938a:	0002      	movs	r2, r0
 801938c:	1dfb      	adds	r3, r7, #7
 801938e:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 8019390:	250f      	movs	r5, #15
 8019392:	197c      	adds	r4, r7, r5
 8019394:	f7ff fff0 	bl	8019378 <itsdk_config_app_commitConfiguration>
 8019398:	0003      	movs	r3, r0
 801939a:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 801939c:	197b      	adds	r3, r7, r5
 801939e:	781b      	ldrb	r3, [r3, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d003      	beq.n	80193ac <itsdk_config_commitConfiguration+0x28>
 80193a4:	230f      	movs	r3, #15
 80193a6:	18fb      	adds	r3, r7, r3
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	e023      	b.n	80193f4 <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 80193ac:	4b13      	ldr	r3, [pc, #76]	; (80193fc <itsdk_config_commitConfiguration+0x78>)
 80193ae:	4a14      	ldr	r2, [pc, #80]	; (8019400 <itsdk_config_commitConfiguration+0x7c>)
 80193b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80193b2:	c313      	stmia	r3!, {r0, r1, r4}
 80193b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80193b6:	c313      	stmia	r3!, {r0, r1, r4}
 80193b8:	6812      	ldr	r2, [r2, #0]
 80193ba:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 80193bc:	2100      	movs	r1, #0
 80193be:	2072      	movs	r0, #114	; 0x72
 80193c0:	f002 fbd2 	bl	801bb68 <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80193c4:	1dfb      	adds	r3, r7, #7
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	2b01      	cmp	r3, #1
 80193ca:	d003      	beq.n	80193d4 <itsdk_config_commitConfiguration+0x50>
 80193cc:	1dfb      	adds	r3, r7, #7
 80193ce:	781b      	ldrb	r3, [r3, #0]
 80193d0:	2b02      	cmp	r3, #2
 80193d2:	d105      	bne.n	80193e0 <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 80193d4:	4b09      	ldr	r3, [pc, #36]	; (80193fc <itsdk_config_commitConfiguration+0x78>)
 80193d6:	2201      	movs	r2, #1
 80193d8:	211c      	movs	r1, #28
 80193da:	0018      	movs	r0, r3
 80193dc:	f7ff fd54 	bl	8018e88 <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80193e0:	1dfb      	adds	r3, r7, #7
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	2b02      	cmp	r3, #2
 80193e6:	d104      	bne.n	80193f2 <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 80193e8:	20c8      	movs	r0, #200	; 0xc8
 80193ea:	f004 ff29 	bl	801e240 <itsdk_delayMs>
	 itsdk_reset();
 80193ee:	f004 fed5 	bl	801e19c <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 80193f2:	2300      	movs	r3, #0
}
 80193f4:	0018      	movs	r0, r3
 80193f6:	46bd      	mov	sp, r7
 80193f8:	b004      	add	sp, #16
 80193fa:	bdb0      	pop	{r4, r5, r7, pc}
 80193fc:	20001688 	.word	0x20001688
 8019400:	2000166c 	.word	0x2000166c

08019404 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 801940c:	4b04      	ldr	r3, [pc, #16]	; (8019420 <itsdk_config_app_printConfig+0x1c>)
 801940e:	2100      	movs	r1, #0
 8019410:	0018      	movs	r0, r3
 8019412:	f002 fba9 	bl	801bb68 <itsdk_error_report>
			return;
 8019416:	46c0      	nop			; (mov r8, r8)
		}
 8019418:	46bd      	mov	sp, r7
 801941a:	b002      	add	sp, #8
 801941c:	bd80      	pop	{r7, pc}
 801941e:	46c0      	nop			; (mov r8, r8)
 8019420:	40000070 	.word	0x40000070

08019424 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8019424:	b580      	push	{r7, lr}
 8019426:	b084      	sub	sp, #16
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	000a      	movs	r2, r1
 801942e:	1cfb      	adds	r3, r7, #3
 8019430:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8019432:	1cfb      	adds	r3, r7, #3
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	2b01      	cmp	r3, #1
 8019438:	d000      	beq.n	801943c <_itsdk_config_consolePublic+0x18>
 801943a:	e074      	b.n	8019526 <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	2b43      	cmp	r3, #67	; 0x43
 8019442:	d012      	beq.n	801946a <_itsdk_config_consolePublic+0x46>
 8019444:	2b63      	cmp	r3, #99	; 0x63
 8019446:	d010      	beq.n	801946a <_itsdk_config_consolePublic+0x46>
 8019448:	2b3f      	cmp	r3, #63	; 0x3f
 801944a:	d000      	beq.n	801944e <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 801944c:	e06c      	b.n	8019528 <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 801944e:	4b39      	ldr	r3, [pc, #228]	; (8019534 <_itsdk_config_consolePublic+0x110>)
 8019450:	0018      	movs	r0, r3
 8019452:	f7ff fb27 	bl	8018aa4 <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 8019456:	4b38      	ldr	r3, [pc, #224]	; (8019538 <_itsdk_config_consolePublic+0x114>)
 8019458:	0018      	movs	r0, r3
 801945a:	f7ff fb23 	bl	8018aa4 <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 801945e:	4b37      	ldr	r3, [pc, #220]	; (801953c <_itsdk_config_consolePublic+0x118>)
 8019460:	0018      	movs	r0, r3
 8019462:	f7ff fb1f 	bl	8018aa4 <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 8019466:	2300      	movs	r3, #0
 8019468:	e05f      	b.n	801952a <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 801946a:	4b35      	ldr	r3, [pc, #212]	; (8019540 <_itsdk_config_consolePublic+0x11c>)
 801946c:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	781b      	ldrb	r3, [r3, #0]
 8019472:	2b43      	cmp	r3, #67	; 0x43
 8019474:	d101      	bne.n	801947a <_itsdk_config_consolePublic+0x56>
 8019476:	4b33      	ldr	r3, [pc, #204]	; (8019544 <_itsdk_config_consolePublic+0x120>)
 8019478:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	001a      	movs	r2, r3
 8019480:	4b31      	ldr	r3, [pc, #196]	; (8019548 <_itsdk_config_consolePublic+0x124>)
 8019482:	0011      	movs	r1, r2
 8019484:	0018      	movs	r0, r3
 8019486:	f7ff fb0d 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	88db      	ldrh	r3, [r3, #6]
 801948e:	001a      	movs	r2, r3
 8019490:	4b2e      	ldr	r3, [pc, #184]	; (801954c <_itsdk_config_consolePublic+0x128>)
 8019492:	0011      	movs	r1, r2
 8019494:	0018      	movs	r0, r3
 8019496:	f7ff fb05 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	891b      	ldrh	r3, [r3, #8]
 801949e:	001a      	movs	r2, r3
 80194a0:	4b2b      	ldr	r3, [pc, #172]	; (8019550 <_itsdk_config_consolePublic+0x12c>)
 80194a2:	0011      	movs	r1, r2
 80194a4:	0018      	movs	r0, r3
 80194a6:	f7ff fafd 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	7a9b      	ldrb	r3, [r3, #10]
 80194ae:	061b      	lsls	r3, r3, #24
 80194b0:	0f9b      	lsrs	r3, r3, #30
 80194b2:	b2db      	uxtb	r3, r3
 80194b4:	001a      	movs	r2, r3
 80194b6:	4b27      	ldr	r3, [pc, #156]	; (8019554 <_itsdk_config_consolePublic+0x130>)
 80194b8:	0011      	movs	r1, r2
 80194ba:	0018      	movs	r0, r3
 80194bc:	f7ff faf2 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	7a9b      	ldrb	r3, [r3, #10]
 80194c4:	069b      	lsls	r3, r3, #26
 80194c6:	0f9b      	lsrs	r3, r3, #30
 80194c8:	b2db      	uxtb	r3, r3
 80194ca:	001a      	movs	r2, r3
 80194cc:	4b22      	ldr	r3, [pc, #136]	; (8019558 <_itsdk_config_consolePublic+0x134>)
 80194ce:	0011      	movs	r1, r2
 80194d0:	0018      	movs	r0, r3
 80194d2:	f7ff fae7 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	7a9b      	ldrb	r3, [r3, #10]
 80194da:	079b      	lsls	r3, r3, #30
 80194dc:	0f9b      	lsrs	r3, r3, #30
 80194de:	b2db      	uxtb	r3, r3
 80194e0:	001a      	movs	r2, r3
 80194e2:	4b1e      	ldr	r3, [pc, #120]	; (801955c <_itsdk_config_consolePublic+0x138>)
 80194e4:	0011      	movs	r1, r2
 80194e6:	0018      	movs	r0, r3
 80194e8:	f7ff fadc 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	7a9b      	ldrb	r3, [r3, #10]
 80194f0:	071b      	lsls	r3, r3, #28
 80194f2:	0f9b      	lsrs	r3, r3, #30
 80194f4:	b2db      	uxtb	r3, r3
 80194f6:	001a      	movs	r2, r3
 80194f8:	4b19      	ldr	r3, [pc, #100]	; (8019560 <_itsdk_config_consolePublic+0x13c>)
 80194fa:	0011      	movs	r1, r2
 80194fc:	0018      	movs	r0, r3
 80194fe:	f7ff fad1 	bl	8018aa4 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	7adb      	ldrb	r3, [r3, #11]
 8019506:	001a      	movs	r2, r3
 8019508:	4b16      	ldr	r3, [pc, #88]	; (8019564 <_itsdk_config_consolePublic+0x140>)
 801950a:	0011      	movs	r1, r2
 801950c:	0018      	movs	r0, r3
 801950e:	f7ff fac9 	bl	8018aa4 <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	0018      	movs	r0, r3
 8019516:	f7ff ff75 	bl	8019404 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 801951a:	4b13      	ldr	r3, [pc, #76]	; (8019568 <_itsdk_config_consolePublic+0x144>)
 801951c:	0018      	movs	r0, r3
 801951e:	f7ff fac1 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8019522:	2300      	movs	r3, #0
 8019524:	e001      	b.n	801952a <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 8019526:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 8019528:	2301      	movs	r3, #1
	}
 801952a:	0018      	movs	r0, r3
 801952c:	46bd      	mov	sp, r7
 801952e:	b004      	add	sp, #16
 8019530:	bd80      	pop	{r7, pc}
 8019532:	46c0      	nop			; (mov r8, r8)
 8019534:	08020b30 	.word	0x08020b30
 8019538:	08020b40 	.word	0x08020b40
 801953c:	08020b5c 	.word	0x08020b5c
 8019540:	20001688 	.word	0x20001688
 8019544:	2000166c 	.word	0x2000166c
 8019548:	08020b80 	.word	0x08020b80
 801954c:	08020b98 	.word	0x08020b98
 8019550:	08020bb4 	.word	0x08020bb4
 8019554:	08020bd0 	.word	0x08020bd0
 8019558:	08020be8 	.word	0x08020be8
 801955c:	08020c04 	.word	0x08020c04
 8019560:	08020c20 	.word	0x08020c20
 8019564:	08020c3c 	.word	0x08020c3c
 8019568:	08020c54 	.word	0x08020c54

0801956c <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 801956c:	b5b0      	push	{r4, r5, r7, lr}
 801956e:	b088      	sub	sp, #32
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
 8019574:	000a      	movs	r2, r1
 8019576:	1cfb      	adds	r3, r7, #3
 8019578:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 801957a:	1cfb      	adds	r3, r7, #3
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	2b01      	cmp	r3, #1
 8019580:	d000      	beq.n	8019584 <_itsdk_config_consolePriv+0x18>
 8019582:	e098      	b.n	80196b6 <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	2b46      	cmp	r3, #70	; 0x46
 801958a:	d03b      	beq.n	8019604 <_itsdk_config_consolePriv+0x98>
 801958c:	dc02      	bgt.n	8019594 <_itsdk_config_consolePriv+0x28>
 801958e:	2b3f      	cmp	r3, #63	; 0x3f
 8019590:	d005      	beq.n	801959e <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 8019592:	e21c      	b.n	80199ce <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 8019594:	2b53      	cmp	r3, #83	; 0x53
 8019596:	d02c      	beq.n	80195f2 <_itsdk_config_consolePriv+0x86>
 8019598:	2b6d      	cmp	r3, #109	; 0x6d
 801959a:	d040      	beq.n	801961e <_itsdk_config_consolePriv+0xb2>
			break;
 801959c:	e217      	b.n	80199ce <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 801959e:	4bd9      	ldr	r3, [pc, #868]	; (8019904 <_itsdk_config_consolePriv+0x398>)
 80195a0:	0018      	movs	r0, r3
 80195a2:	f7ff fa7f 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 80195a6:	4bd8      	ldr	r3, [pc, #864]	; (8019908 <_itsdk_config_consolePriv+0x39c>)
 80195a8:	0018      	movs	r0, r3
 80195aa:	f7ff fa7b 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 80195ae:	4bd7      	ldr	r3, [pc, #860]	; (801990c <_itsdk_config_consolePriv+0x3a0>)
 80195b0:	0018      	movs	r0, r3
 80195b2:	f7ff fa77 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 80195b6:	4bd6      	ldr	r3, [pc, #856]	; (8019910 <_itsdk_config_consolePriv+0x3a4>)
 80195b8:	0018      	movs	r0, r3
 80195ba:	f7ff fa73 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 80195be:	4bd5      	ldr	r3, [pc, #852]	; (8019914 <_itsdk_config_consolePriv+0x3a8>)
 80195c0:	0018      	movs	r0, r3
 80195c2:	f7ff fa6f 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 80195c6:	4bd4      	ldr	r3, [pc, #848]	; (8019918 <_itsdk_config_consolePriv+0x3ac>)
 80195c8:	0018      	movs	r0, r3
 80195ca:	f7ff fa6b 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 80195ce:	4bd3      	ldr	r3, [pc, #844]	; (801991c <_itsdk_config_consolePriv+0x3b0>)
 80195d0:	0018      	movs	r0, r3
 80195d2:	f7ff fa67 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 80195d6:	4bd2      	ldr	r3, [pc, #840]	; (8019920 <_itsdk_config_consolePriv+0x3b4>)
 80195d8:	0018      	movs	r0, r3
 80195da:	f7ff fa63 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 80195de:	4bd1      	ldr	r3, [pc, #836]	; (8019924 <_itsdk_config_consolePriv+0x3b8>)
 80195e0:	0018      	movs	r0, r3
 80195e2:	f7ff fa5f 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 80195e6:	4bd0      	ldr	r3, [pc, #832]	; (8019928 <_itsdk_config_consolePriv+0x3bc>)
 80195e8:	0018      	movs	r0, r3
 80195ea:	f7ff fa5b 	bl	8018aa4 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80195ee:	2300      	movs	r3, #0
 80195f0:	e1ee      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 80195f2:	2001      	movs	r0, #1
 80195f4:	f7ff fec6 	bl	8019384 <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 80195f8:	4bcc      	ldr	r3, [pc, #816]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80195fa:	0018      	movs	r0, r3
 80195fc:	f7ff fa52 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8019600:	2300      	movs	r3, #0
 8019602:	e1e5      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8019604:	4bca      	ldr	r3, [pc, #808]	; (8019930 <_itsdk_config_consolePriv+0x3c4>)
 8019606:	2103      	movs	r1, #3
 8019608:	0018      	movs	r0, r3
 801960a:	f002 faad 	bl	801bb68 <itsdk_error_report>
			  itsdk_config_resetToFactory();
 801960e:	f7ff fdb1 	bl	8019174 <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 8019612:	4bc6      	ldr	r3, [pc, #792]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 8019614:	0018      	movs	r0, r3
 8019616:	f7ff fa45 	bl	8018aa4 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 801961a:	2300      	movs	r3, #0
 801961c:	e1d8      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 801961e:	2300      	movs	r3, #0
 8019620:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 8019622:	2300      	movs	r3, #0
 8019624:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 8019626:	2300      	movs	r3, #0
 8019628:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 801962a:	240c      	movs	r4, #12
 801962c:	193b      	adds	r3, r7, r4
 801962e:	0018      	movs	r0, r3
 8019630:	f000 fad7 	bl	8019be2 <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8019634:	68fa      	ldr	r2, [r7, #12]
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	18d2      	adds	r2, r2, r3
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	6979      	ldr	r1, [r7, #20]
 801963e:	48bd      	ldr	r0, [pc, #756]	; (8019934 <_itsdk_config_consolePriv+0x3c8>)
 8019640:	f7ff fa30 	bl	8018aa4 <_itsdk_console_printf>
			  	offset += size;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	697a      	ldr	r2, [r7, #20]
 8019648:	18d3      	adds	r3, r2, r3
 801964a:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	693a      	ldr	r2, [r7, #16]
 8019650:	18d3      	adds	r3, r2, r3
 8019652:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 8019654:	193b      	adds	r3, r7, r4
 8019656:	0018      	movs	r0, r3
 8019658:	f002 fbab 	bl	801bdb2 <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 801965c:	68fa      	ldr	r2, [r7, #12]
 801965e:	697b      	ldr	r3, [r7, #20]
 8019660:	18d2      	adds	r2, r2, r3
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	6979      	ldr	r1, [r7, #20]
 8019666:	48b4      	ldr	r0, [pc, #720]	; (8019938 <_itsdk_config_consolePriv+0x3cc>)
 8019668:	f7ff fa1c 	bl	8018aa4 <_itsdk_console_printf>
			  	offset += size;
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	697a      	ldr	r2, [r7, #20]
 8019670:	18d3      	adds	r3, r2, r3
 8019672:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	693a      	ldr	r2, [r7, #16]
 8019678:	18d3      	adds	r3, r2, r3
 801967a:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 801967c:	193b      	adds	r3, r7, r4
 801967e:	0018      	movs	r0, r3
 8019680:	f7ff fcdd 	bl	801903e <eeprom_getConfigSize>
  		  	  totSize += size;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	693a      	ldr	r2, [r7, #16]
 8019688:	18d3      	adds	r3, r2, r3
 801968a:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 801968c:	68fa      	ldr	r2, [r7, #12]
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	18d2      	adds	r2, r2, r3
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	6979      	ldr	r1, [r7, #20]
 8019696:	48a9      	ldr	r0, [pc, #676]	; (801993c <_itsdk_config_consolePriv+0x3d0>)
 8019698:	f7ff fa04 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 801969c:	23c0      	movs	r3, #192	; 0xc0
 801969e:	015a      	lsls	r2, r3, #5
 80196a0:	6939      	ldr	r1, [r7, #16]
 80196a2:	4ba7      	ldr	r3, [pc, #668]	; (8019940 <_itsdk_config_consolePriv+0x3d4>)
 80196a4:	0018      	movs	r0, r3
 80196a6:	f7ff f9fd 	bl	8018aa4 <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 80196aa:	4ba0      	ldr	r3, [pc, #640]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80196ac:	0018      	movs	r0, r3
 80196ae:	f7ff f9f9 	bl	8018aa4 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 80196b2:	2300      	movs	r3, #0
 80196b4:	e18c      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 80196b6:	1cfb      	adds	r3, r7, #3
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	2b04      	cmp	r3, #4
 80196bc:	d116      	bne.n	80196ec <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	781b      	ldrb	r3, [r3, #0]
 80196c2:	2b73      	cmp	r3, #115	; 0x73
 80196c4:	d000      	beq.n	80196c8 <_itsdk_config_consolePriv+0x15c>
 80196c6:	e182      	b.n	80199ce <_itsdk_config_consolePriv+0x462>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	3301      	adds	r3, #1
 80196cc:	781b      	ldrb	r3, [r3, #0]
 80196ce:	2b63      	cmp	r3, #99	; 0x63
 80196d0:	d000      	beq.n	80196d4 <_itsdk_config_consolePriv+0x168>
 80196d2:	e17c      	b.n	80199ce <_itsdk_config_consolePriv+0x462>
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	3302      	adds	r3, #2
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	2b3a      	cmp	r3, #58	; 0x3a
 80196dc:	d000      	beq.n	80196e0 <_itsdk_config_consolePriv+0x174>
 80196de:	e176      	b.n	80199ce <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 80196e0:	4b98      	ldr	r3, [pc, #608]	; (8019944 <_itsdk_config_consolePriv+0x3d8>)
 80196e2:	0018      	movs	r0, r3
 80196e4:	f7ff f9de 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80196e8:	2302      	movs	r3, #2
 80196ea:	e171      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 80196ec:	1cfb      	adds	r3, r7, #3
 80196ee:	781b      	ldrb	r3, [r3, #0]
 80196f0:	2b05      	cmp	r3, #5
 80196f2:	d800      	bhi.n	80196f6 <_itsdk_config_consolePriv+0x18a>
 80196f4:	e168      	b.n	80199c8 <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	2b53      	cmp	r3, #83	; 0x53
 80196fc:	d000      	beq.n	8019700 <_itsdk_config_consolePriv+0x194>
 80196fe:	e163      	b.n	80199c8 <_itsdk_config_consolePriv+0x45c>
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	3301      	adds	r3, #1
 8019704:	781b      	ldrb	r3, [r3, #0]
 8019706:	2b43      	cmp	r3, #67	; 0x43
 8019708:	d000      	beq.n	801970c <_itsdk_config_consolePriv+0x1a0>
 801970a:	e15d      	b.n	80199c8 <_itsdk_config_consolePriv+0x45c>
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	3302      	adds	r3, #2
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	2b3a      	cmp	r3, #58	; 0x3a
 8019714:	d000      	beq.n	8019718 <_itsdk_config_consolePriv+0x1ac>
 8019716:	e157      	b.n	80199c8 <_itsdk_config_consolePriv+0x45c>
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	3304      	adds	r3, #4
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	2b3a      	cmp	r3, #58	; 0x3a
 8019720:	d000      	beq.n	8019724 <_itsdk_config_consolePriv+0x1b8>
 8019722:	e151      	b.n	80199c8 <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	3303      	adds	r3, #3
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	3b30      	subs	r3, #48	; 0x30
 801972c:	2b22      	cmp	r3, #34	; 0x22
 801972e:	d900      	bls.n	8019732 <_itsdk_config_consolePriv+0x1c6>
 8019730:	e14c      	b.n	80199cc <_itsdk_config_consolePriv+0x460>
 8019732:	009a      	lsls	r2, r3, #2
 8019734:	4b84      	ldr	r3, [pc, #528]	; (8019948 <_itsdk_config_consolePriv+0x3dc>)
 8019736:	18d3      	adds	r3, r2, r3
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	3305      	adds	r3, #5
 8019740:	781b      	ldrb	r3, [r3, #0]
 8019742:	2b31      	cmp	r3, #49	; 0x31
 8019744:	d007      	beq.n	8019756 <_itsdk_config_consolePriv+0x1ea>
 8019746:	2b32      	cmp	r3, #50	; 0x32
 8019748:	d009      	beq.n	801975e <_itsdk_config_consolePriv+0x1f2>
 801974a:	2b30      	cmp	r3, #48	; 0x30
 801974c:	d10b      	bne.n	8019766 <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 801974e:	4b7f      	ldr	r3, [pc, #508]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 8019750:	2200      	movs	r2, #0
 8019752:	80da      	strh	r2, [r3, #6]
					   break;
 8019754:	e00d      	b.n	8019772 <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 8019756:	4b7d      	ldr	r3, [pc, #500]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 8019758:	2201      	movs	r2, #1
 801975a:	80da      	strh	r2, [r3, #6]
					   break;
 801975c:	e009      	b.n	8019772 <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 801975e:	4b7b      	ldr	r3, [pc, #492]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 8019760:	2202      	movs	r2, #2
 8019762:	80da      	strh	r2, [r3, #6]
					   break;
 8019764:	e005      	b.n	8019772 <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 8019766:	4b77      	ldr	r3, [pc, #476]	; (8019944 <_itsdk_config_consolePriv+0x3d8>)
 8019768:	0018      	movs	r0, r3
 801976a:	f7ff f99b 	bl	8018aa4 <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 801976e:	2302      	movs	r3, #2
 8019770:	e12e      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 8019772:	4b6e      	ldr	r3, [pc, #440]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 8019774:	0018      	movs	r0, r3
 8019776:	f7ff f995 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 801977a:	2300      	movs	r3, #0
 801977c:	e128      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	3305      	adds	r3, #5
 8019782:	2200      	movs	r2, #0
 8019784:	2104      	movs	r1, #4
 8019786:	0018      	movs	r0, r3
 8019788:	f003 fa13 	bl	801cbb2 <itdt_isHexString>
 801978c:	1e03      	subs	r3, r0, #0
 801978e:	d01b      	beq.n	80197c8 <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	3305      	adds	r3, #5
 8019794:	251e      	movs	r5, #30
 8019796:	197c      	adds	r4, r7, r5
 8019798:	0018      	movs	r0, r3
 801979a:	f003 f95e 	bl	801ca5a <itdt_convertHexChar4Int>
 801979e:	0003      	movs	r3, r0
 80197a0:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 80197a2:	197b      	adds	r3, r7, r5
 80197a4:	881b      	ldrh	r3, [r3, #0]
 80197a6:	0018      	movs	r0, r3
 80197a8:	f003 fa4f 	bl	801cc4a <itdt_count_bits_1>
 80197ac:	0003      	movs	r3, r0
 80197ae:	2b01      	cmp	r3, #1
 80197b0:	d80a      	bhi.n	80197c8 <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 80197b2:	4b66      	ldr	r3, [pc, #408]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 80197b4:	221e      	movs	r2, #30
 80197b6:	18ba      	adds	r2, r7, r2
 80197b8:	8812      	ldrh	r2, [r2, #0]
 80197ba:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 80197bc:	4b5b      	ldr	r3, [pc, #364]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80197be:	0018      	movs	r0, r3
 80197c0:	f7ff f970 	bl	8018aa4 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 80197c4:	2300      	movs	r3, #0
 80197c6:	e103      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 80197c8:	4b5e      	ldr	r3, [pc, #376]	; (8019944 <_itsdk_config_consolePriv+0x3d8>)
 80197ca:	0018      	movs	r0, r3
 80197cc:	f7ff f96a 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80197d0:	2302      	movs	r3, #2
 80197d2:	e0fd      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	3305      	adds	r3, #5
 80197d8:	781b      	ldrb	r3, [r3, #0]
 80197da:	2b31      	cmp	r3, #49	; 0x31
 80197dc:	d10d      	bne.n	80197fa <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 80197de:	4b5b      	ldr	r3, [pc, #364]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 80197e0:	7a9a      	ldrb	r2, [r3, #10]
 80197e2:	213f      	movs	r1, #63	; 0x3f
 80197e4:	400a      	ands	r2, r1
 80197e6:	1c11      	adds	r1, r2, #0
 80197e8:	2240      	movs	r2, #64	; 0x40
 80197ea:	430a      	orrs	r2, r1
 80197ec:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80197ee:	4b4f      	ldr	r3, [pc, #316]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80197f0:	0018      	movs	r0, r3
 80197f2:	f7ff f957 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80197f6:	2300      	movs	r3, #0
 80197f8:	e0ea      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	3305      	adds	r3, #5
 80197fe:	781b      	ldrb	r3, [r3, #0]
 8019800:	2b32      	cmp	r3, #50	; 0x32
 8019802:	d10e      	bne.n	8019822 <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8019804:	4b51      	ldr	r3, [pc, #324]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 8019806:	7a9a      	ldrb	r2, [r3, #10]
 8019808:	213f      	movs	r1, #63	; 0x3f
 801980a:	400a      	ands	r2, r1
 801980c:	1c11      	adds	r1, r2, #0
 801980e:	2280      	movs	r2, #128	; 0x80
 8019810:	4252      	negs	r2, r2
 8019812:	430a      	orrs	r2, r1
 8019814:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019816:	4b45      	ldr	r3, [pc, #276]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 8019818:	0018      	movs	r0, r3
 801981a:	f7ff f943 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801981e:	2300      	movs	r3, #0
 8019820:	e0d6      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8019822:	4b48      	ldr	r3, [pc, #288]	; (8019944 <_itsdk_config_consolePriv+0x3d8>)
 8019824:	0018      	movs	r0, r3
 8019826:	f7ff f93d 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 801982a:	2302      	movs	r3, #2
 801982c:	e0d0      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	3305      	adds	r3, #5
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	2b31      	cmp	r3, #49	; 0x31
 8019836:	d10d      	bne.n	8019854 <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 8019838:	4b44      	ldr	r3, [pc, #272]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 801983a:	7a9a      	ldrb	r2, [r3, #10]
 801983c:	2130      	movs	r1, #48	; 0x30
 801983e:	438a      	bics	r2, r1
 8019840:	1c11      	adds	r1, r2, #0
 8019842:	2210      	movs	r2, #16
 8019844:	430a      	orrs	r2, r1
 8019846:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019848:	4b38      	ldr	r3, [pc, #224]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 801984a:	0018      	movs	r0, r3
 801984c:	f7ff f92a 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019850:	2300      	movs	r3, #0
 8019852:	e0bd      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	3305      	adds	r3, #5
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	2b32      	cmp	r3, #50	; 0x32
 801985c:	d10d      	bne.n	801987a <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 801985e:	4b3b      	ldr	r3, [pc, #236]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 8019860:	7a9a      	ldrb	r2, [r3, #10]
 8019862:	2130      	movs	r1, #48	; 0x30
 8019864:	438a      	bics	r2, r1
 8019866:	1c11      	adds	r1, r2, #0
 8019868:	2220      	movs	r2, #32
 801986a:	430a      	orrs	r2, r1
 801986c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801986e:	4b2f      	ldr	r3, [pc, #188]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 8019870:	0018      	movs	r0, r3
 8019872:	f7ff f917 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019876:	2300      	movs	r3, #0
 8019878:	e0aa      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 801987a:	4b32      	ldr	r3, [pc, #200]	; (8019944 <_itsdk_config_consolePriv+0x3d8>)
 801987c:	0018      	movs	r0, r3
 801987e:	f7ff f911 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019882:	2302      	movs	r3, #2
 8019884:	e0a4      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	3305      	adds	r3, #5
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	2b31      	cmp	r3, #49	; 0x31
 801988e:	d10d      	bne.n	80198ac <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 8019890:	4b2e      	ldr	r3, [pc, #184]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 8019892:	7a9a      	ldrb	r2, [r3, #10]
 8019894:	2103      	movs	r1, #3
 8019896:	438a      	bics	r2, r1
 8019898:	1c11      	adds	r1, r2, #0
 801989a:	2201      	movs	r2, #1
 801989c:	430a      	orrs	r2, r1
 801989e:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80198a0:	4b22      	ldr	r3, [pc, #136]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80198a2:	0018      	movs	r0, r3
 80198a4:	f7ff f8fe 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80198a8:	2300      	movs	r3, #0
 80198aa:	e091      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	3305      	adds	r3, #5
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	2b32      	cmp	r3, #50	; 0x32
 80198b4:	d10d      	bne.n	80198d2 <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 80198b6:	4b25      	ldr	r3, [pc, #148]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 80198b8:	7a9a      	ldrb	r2, [r3, #10]
 80198ba:	2103      	movs	r1, #3
 80198bc:	438a      	bics	r2, r1
 80198be:	1c11      	adds	r1, r2, #0
 80198c0:	2202      	movs	r2, #2
 80198c2:	430a      	orrs	r2, r1
 80198c4:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80198c6:	4b19      	ldr	r3, [pc, #100]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80198c8:	0018      	movs	r0, r3
 80198ca:	f7ff f8eb 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80198ce:	2300      	movs	r3, #0
 80198d0:	e07e      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 80198d2:	4b1c      	ldr	r3, [pc, #112]	; (8019944 <_itsdk_config_consolePriv+0x3d8>)
 80198d4:	0018      	movs	r0, r3
 80198d6:	f7ff f8e5 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80198da:	2302      	movs	r3, #2
 80198dc:	e078      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	3305      	adds	r3, #5
 80198e2:	781b      	ldrb	r3, [r3, #0]
 80198e4:	2b31      	cmp	r3, #49	; 0x31
 80198e6:	d133      	bne.n	8019950 <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 80198e8:	4b18      	ldr	r3, [pc, #96]	; (801994c <_itsdk_config_consolePriv+0x3e0>)
 80198ea:	7a9a      	ldrb	r2, [r3, #10]
 80198ec:	210c      	movs	r1, #12
 80198ee:	438a      	bics	r2, r1
 80198f0:	1c11      	adds	r1, r2, #0
 80198f2:	2204      	movs	r2, #4
 80198f4:	430a      	orrs	r2, r1
 80198f6:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80198f8:	4b0c      	ldr	r3, [pc, #48]	; (801992c <_itsdk_config_consolePriv+0x3c0>)
 80198fa:	0018      	movs	r0, r3
 80198fc:	f7ff f8d2 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019900:	2300      	movs	r3, #0
 8019902:	e065      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
 8019904:	08020c5c 	.word	0x08020c5c
 8019908:	08020c80 	.word	0x08020c80
 801990c:	08020cb0 	.word	0x08020cb0
 8019910:	08020cd8 	.word	0x08020cd8
 8019914:	08020d08 	.word	0x08020d08
 8019918:	08020d3c 	.word	0x08020d3c
 801991c:	08020d64 	.word	0x08020d64
 8019920:	08020d98 	.word	0x08020d98
 8019924:	08020dc4 	.word	0x08020dc4
 8019928:	08020df8 	.word	0x08020df8
 801992c:	08020c54 	.word	0x08020c54
 8019930:	50000071 	.word	0x50000071
 8019934:	08020e1c 	.word	0x08020e1c
 8019938:	08020e40 	.word	0x08020e40
 801993c:	08020e64 	.word	0x08020e64
 8019940:	08020e90 	.word	0x08020e90
 8019944:	08020eac 	.word	0x08020eac
 8019948:	08021db4 	.word	0x08021db4
 801994c:	2000166c 	.word	0x2000166c
				}
			    if ( buffer[5] == '2' ) {
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	3305      	adds	r3, #5
 8019954:	781b      	ldrb	r3, [r3, #0]
 8019956:	2b32      	cmp	r3, #50	; 0x32
 8019958:	d10d      	bne.n	8019976 <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 801995a:	4b1f      	ldr	r3, [pc, #124]	; (80199d8 <_itsdk_config_consolePriv+0x46c>)
 801995c:	7a9a      	ldrb	r2, [r3, #10]
 801995e:	210c      	movs	r1, #12
 8019960:	438a      	bics	r2, r1
 8019962:	1c11      	adds	r1, r2, #0
 8019964:	2208      	movs	r2, #8
 8019966:	430a      	orrs	r2, r1
 8019968:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801996a:	4b1c      	ldr	r3, [pc, #112]	; (80199dc <_itsdk_config_consolePriv+0x470>)
 801996c:	0018      	movs	r0, r3
 801996e:	f7ff f899 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019972:	2300      	movs	r3, #0
 8019974:	e02c      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8019976:	4b1a      	ldr	r3, [pc, #104]	; (80199e0 <_itsdk_config_consolePriv+0x474>)
 8019978:	0018      	movs	r0, r3
 801997a:	f7ff f893 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 801997e:	2302      	movs	r3, #2
 8019980:	e026      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 8019982:	1cfb      	adds	r3, r7, #3
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	2b06      	cmp	r3, #6
 8019988:	d918      	bls.n	80199bc <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	3305      	adds	r3, #5
 801998e:	2102      	movs	r1, #2
 8019990:	0018      	movs	r0, r3
 8019992:	f003 f887 	bl	801caa4 <itdt_convertDecCharNInt>
 8019996:	0003      	movs	r3, r0
 8019998:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 801999a:	69bb      	ldr	r3, [r7, #24]
 801999c:	4a11      	ldr	r2, [pc, #68]	; (80199e4 <_itsdk_config_consolePriv+0x478>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d00c      	beq.n	80199bc <_itsdk_config_consolePriv+0x450>
 80199a2:	69bb      	ldr	r3, [r7, #24]
 80199a4:	2b05      	cmp	r3, #5
 80199a6:	dc09      	bgt.n	80199bc <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 80199a8:	69bb      	ldr	r3, [r7, #24]
 80199aa:	b2da      	uxtb	r2, r3
 80199ac:	4b0a      	ldr	r3, [pc, #40]	; (80199d8 <_itsdk_config_consolePriv+0x46c>)
 80199ae:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 80199b0:	4b0a      	ldr	r3, [pc, #40]	; (80199dc <_itsdk_config_consolePriv+0x470>)
 80199b2:	0018      	movs	r0, r3
 80199b4:	f7ff f876 	bl	8018aa4 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 80199b8:	2300      	movs	r3, #0
 80199ba:	e009      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 80199bc:	4b08      	ldr	r3, [pc, #32]	; (80199e0 <_itsdk_config_consolePriv+0x474>)
 80199be:	0018      	movs	r0, r3
 80199c0:	f7ff f870 	bl	8018aa4 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80199c4:	2302      	movs	r3, #2
 80199c6:	e003      	b.n	80199d0 <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 80199c8:	46c0      	nop			; (mov r8, r8)
 80199ca:	e000      	b.n	80199ce <_itsdk_config_consolePriv+0x462>
				break;
 80199cc:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 80199ce:	2301      	movs	r3, #1
}
 80199d0:	0018      	movs	r0, r3
 80199d2:	46bd      	mov	sp, r7
 80199d4:	b008      	add	sp, #32
 80199d6:	bdb0      	pop	{r4, r5, r7, pc}
 80199d8:	2000166c 	.word	0x2000166c
 80199dc:	08020c54 	.word	0x08020c54
 80199e0:	08020eac 	.word	0x08020eac
 80199e4:	0fffffff 	.word	0x0fffffff

080199e8 <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 80199e8:	b5b0      	push	{r4, r5, r7, lr}
 80199ea:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 80199ec:	4a09      	ldr	r2, [pc, #36]	; (8019a14 <itsdk_state_init+0x2c>)
 80199ee:	2300      	movs	r3, #0
 80199f0:	2400      	movs	r4, #0
 80199f2:	6093      	str	r3, [r2, #8]
 80199f4:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 80199f6:	f004 fbd7 	bl	801e1a8 <itsdk_getResetCause>
 80199fa:	0003      	movs	r3, r0
 80199fc:	001a      	movs	r2, r3
 80199fe:	4b05      	ldr	r3, [pc, #20]	; (8019a14 <itsdk_state_init+0x2c>)
 8019a00:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 8019a02:	4b05      	ldr	r3, [pc, #20]	; (8019a18 <itsdk_state_init+0x30>)
 8019a04:	88db      	ldrh	r3, [r3, #6]
 8019a06:	b2da      	uxtb	r2, r3
 8019a08:	4b02      	ldr	r3, [pc, #8]	; (8019a14 <itsdk_state_init+0x2c>)
 8019a0a:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8019a0c:	46c0      	nop			; (mov r8, r8)
}
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bdb0      	pop	{r4, r5, r7, pc}
 8019a12:	46c0      	nop			; (mov r8, r8)
 8019a14:	200016a8 	.word	0x200016a8
 8019a18:	20001688 	.word	0x20001688

08019a1c <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8019a1c:	b5b0      	push	{r4, r5, r7, lr}
 8019a1e:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 8019a20:	4b19      	ldr	r3, [pc, #100]	; (8019a88 <itsdk_print_state+0x6c>)
 8019a22:	6898      	ldr	r0, [r3, #8]
 8019a24:	68d9      	ldr	r1, [r3, #12]
 8019a26:	22fa      	movs	r2, #250	; 0xfa
 8019a28:	0092      	lsls	r2, r2, #2
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	f7e6 fd4c 	bl	80004c8 <__aeabi_uldivmod>
 8019a30:	0003      	movs	r3, r0
 8019a32:	000c      	movs	r4, r1
 8019a34:	001a      	movs	r2, r3
 8019a36:	4b15      	ldr	r3, [pc, #84]	; (8019a8c <itsdk_print_state+0x70>)
 8019a38:	0011      	movs	r1, r2
 8019a3a:	0018      	movs	r0, r3
 8019a3c:	f7ff f832 	bl	8018aa4 <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 8019a40:	4b11      	ldr	r3, [pc, #68]	; (8019a88 <itsdk_print_state+0x6c>)
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	001a      	movs	r2, r3
 8019a46:	4b12      	ldr	r3, [pc, #72]	; (8019a90 <itsdk_print_state+0x74>)
 8019a48:	0011      	movs	r1, r2
 8019a4a:	0018      	movs	r0, r3
 8019a4c:	f7ff f82a 	bl	8018aa4 <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 8019a50:	4b0d      	ldr	r3, [pc, #52]	; (8019a88 <itsdk_print_state+0x6c>)
 8019a52:	785b      	ldrb	r3, [r3, #1]
 8019a54:	001a      	movs	r2, r3
 8019a56:	4b0f      	ldr	r3, [pc, #60]	; (8019a94 <itsdk_print_state+0x78>)
 8019a58:	0011      	movs	r1, r2
 8019a5a:	0018      	movs	r0, r3
 8019a5c:	f7ff f822 	bl	8018aa4 <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 8019a60:	4b09      	ldr	r3, [pc, #36]	; (8019a88 <itsdk_print_state+0x6c>)
 8019a62:	785b      	ldrb	r3, [r3, #1]
 8019a64:	2b02      	cmp	r3, #2
 8019a66:	d10b      	bne.n	8019a80 <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 8019a68:	f002 fd04 	bl	801c474 <itsdk_lorawan_hasjoined>
 8019a6c:	1e03      	subs	r3, r0, #0
 8019a6e:	d001      	beq.n	8019a74 <itsdk_print_state+0x58>
 8019a70:	2359      	movs	r3, #89	; 0x59
 8019a72:	e000      	b.n	8019a76 <itsdk_print_state+0x5a>
 8019a74:	234e      	movs	r3, #78	; 0x4e
 8019a76:	4a08      	ldr	r2, [pc, #32]	; (8019a98 <itsdk_print_state+0x7c>)
 8019a78:	0019      	movs	r1, r3
 8019a7a:	0010      	movs	r0, r2
 8019a7c:	f7ff f812 	bl	8018aa4 <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 8019a80:	46c0      	nop			; (mov r8, r8)
 8019a82:	46bd      	mov	sp, r7
 8019a84:	bdb0      	pop	{r4, r5, r7, pc}
 8019a86:	46c0      	nop			; (mov r8, r8)
 8019a88:	200016a8 	.word	0x200016a8
 8019a8c:	08020eb4 	.word	0x08020eb4
 8019a90:	08020ed4 	.word	0x08020ed4
 8019a94:	08020ef4 	.word	0x08020ef4
 8019a98:	08020f10 	.word	0x08020f10

08019a9c <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b086      	sub	sp, #24
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	60f8      	str	r0, [r7, #12]
 8019aa4:	60b9      	str	r1, [r7, #8]
 8019aa6:	1dfb      	adds	r3, r7, #7
 8019aa8:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 8019aae:	1dfb      	adds	r3, r7, #7
 8019ab0:	781b      	ldrb	r3, [r3, #0]
 8019ab2:	2b13      	cmp	r3, #19
 8019ab4:	d83d      	bhi.n	8019b32 <_itsdk_secstore_getOffset+0x96>
 8019ab6:	009a      	lsls	r2, r3, #2
 8019ab8:	4b27      	ldr	r3, [pc, #156]	; (8019b58 <_itsdk_secstore_getOffset+0xbc>)
 8019aba:	18d3      	adds	r3, r2, r3
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 8019ac0:	693b      	ldr	r3, [r7, #16]
 8019ac2:	617b      	str	r3, [r7, #20]
		break;
 8019ac4:	e037      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8019ac6:	2301      	movs	r3, #1
 8019ac8:	e041      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	3310      	adds	r3, #16
 8019ace:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ad0:	e031      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 8019ad2:	693b      	ldr	r3, [r7, #16]
 8019ad4:	3320      	adds	r3, #32
 8019ad6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ad8:	e02d      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8019ada:	693b      	ldr	r3, [r7, #16]
 8019adc:	3330      	adds	r3, #48	; 0x30
 8019ade:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ae0:	e029      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	3340      	adds	r3, #64	; 0x40
 8019ae6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019ae8:	e025      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8019aea:	693b      	ldr	r3, [r7, #16]
 8019aec:	3350      	adds	r3, #80	; 0x50
 8019aee:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019af0:	e021      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	3310      	adds	r3, #16
 8019af6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019af8:	e01d      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8019afa:	693b      	ldr	r3, [r7, #16]
 8019afc:	3320      	adds	r3, #32
 8019afe:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019b00:	e019      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 8019b02:	693b      	ldr	r3, [r7, #16]
 8019b04:	3330      	adds	r3, #48	; 0x30
 8019b06:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019b08:	e015      	b.n	8019b36 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	e01f      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b0e:	2301      	movs	r3, #1
 8019b10:	e01d      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b12:	2301      	movs	r3, #1
 8019b14:	e01b      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b16:	2301      	movs	r3, #1
 8019b18:	e019      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	e017      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b1e:	2301      	movs	r3, #1
 8019b20:	e015      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b22:	2301      	movs	r3, #1
 8019b24:	e013      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b26:	2301      	movs	r3, #1
 8019b28:	e011      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	e00f      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019b2e:	2301      	movs	r3, #1
 8019b30:	e00d      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 8019b32:	2301      	movs	r3, #1
 8019b34:	e00b      	b.n	8019b4e <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8019b36:	697b      	ldr	r3, [r7, #20]
 8019b38:	091b      	lsrs	r3, r3, #4
 8019b3a:	b2da      	uxtb	r2, r3
 8019b3c:	68bb      	ldr	r3, [r7, #8]
 8019b3e:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	3310      	adds	r3, #16
 8019b44:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	697a      	ldr	r2, [r7, #20]
 8019b4a:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8019b4c:	2300      	movs	r3, #0
}
 8019b4e:	0018      	movs	r0, r3
 8019b50:	46bd      	mov	sp, r7
 8019b52:	b006      	add	sp, #24
 8019b54:	bd80      	pop	{r7, pc}
 8019b56:	46c0      	nop			; (mov r8, r8)
 8019b58:	08021e40 	.word	0x08021e40

08019b5c <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b084      	sub	sp, #16
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8019b64:	210f      	movs	r1, #15
 8019b66:	187b      	adds	r3, r7, r1
 8019b68:	2201      	movs	r2, #1
 8019b6a:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8019b6c:	187b      	adds	r3, r7, r1
 8019b6e:	187a      	adds	r2, r7, r1
 8019b70:	7812      	ldrb	r2, [r2, #0]
 8019b72:	3205      	adds	r2, #5
 8019b74:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8019b76:	187b      	adds	r3, r7, r1
 8019b78:	187a      	adds	r2, r7, r1
 8019b7a:	7812      	ldrb	r2, [r2, #0]
 8019b7c:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	187a      	adds	r2, r7, r1
 8019b82:	7812      	ldrb	r2, [r2, #0]
 8019b84:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8019b86:	2300      	movs	r3, #0
}
 8019b88:	0018      	movs	r0, r3
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	b004      	add	sp, #16
 8019b8e:	bd80      	pop	{r7, pc}

08019b90 <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 8019b90:	b590      	push	{r4, r7, lr}
 8019b92:	b085      	sub	sp, #20
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8019b98:	687a      	ldr	r2, [r7, #4]
 8019b9a:	2310      	movs	r3, #16
 8019b9c:	2100      	movs	r1, #0
 8019b9e:	2000      	movs	r0, #0
 8019ba0:	f004 fd86 	bl	801e6b0 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	781b      	ldrb	r3, [r3, #0]
 8019ba8:	220f      	movs	r2, #15
 8019baa:	4013      	ands	r3, r2
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	2b0c      	cmp	r3, #12
 8019bb0:	d001      	beq.n	8019bb6 <_itsdk_secstore_controlHeader+0x26>
 8019bb2:	2302      	movs	r3, #2
 8019bb4:	e011      	b.n	8019bda <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8019bb6:	240f      	movs	r4, #15
 8019bb8:	193b      	adds	r3, r7, r4
 8019bba:	0018      	movs	r0, r3
 8019bbc:	f7ff ffce 	bl	8019b5c <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	781b      	ldrb	r3, [r3, #0]
 8019bc4:	061b      	lsls	r3, r3, #24
 8019bc6:	0f1b      	lsrs	r3, r3, #28
 8019bc8:	b2db      	uxtb	r3, r3
 8019bca:	001a      	movs	r2, r3
 8019bcc:	193b      	adds	r3, r7, r4
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	d001      	beq.n	8019bd8 <_itsdk_secstore_controlHeader+0x48>
 8019bd4:	2302      	movs	r3, #2
 8019bd6:	e000      	b.n	8019bda <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8019bd8:	2300      	movs	r3, #0
}
 8019bda:	0018      	movs	r0, r3
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	b005      	add	sp, #20
 8019be0:	bd90      	pop	{r4, r7, pc}

08019be2 <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 8019be2:	b580      	push	{r7, lr}
 8019be4:	b082      	sub	sp, #8
 8019be6:	af00      	add	r7, sp, #0
 8019be8:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	2270      	movs	r2, #112	; 0x70
 8019bee:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8019bf0:	2300      	movs	r3, #0
}
 8019bf2:	0018      	movs	r0, r3
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	b002      	add	sp, #8
 8019bf8:	bd80      	pop	{r7, pc}

08019bfa <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8019bfa:	b580      	push	{r7, lr}
 8019bfc:	b084      	sub	sp, #16
 8019bfe:	af00      	add	r7, sp, #0
 8019c00:	6078      	str	r0, [r7, #4]
 8019c02:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8019c04:	2308      	movs	r3, #8
 8019c06:	18fb      	adds	r3, r7, r3
 8019c08:	2104      	movs	r1, #4
 8019c0a:	0018      	movs	r0, r3
 8019c0c:	f004 fb72 	bl	801e2f4 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 8019c10:	2300      	movs	r3, #0
 8019c12:	60fb      	str	r3, [r7, #12]
 8019c14:	e081      	b.n	8019d1a <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	dc21      	bgt.n	8019c60 <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	683a      	ldr	r2, [r7, #0]
 8019c20:	18d3      	adds	r3, r2, r3
 8019c22:	2208      	movs	r2, #8
 8019c24:	18b9      	adds	r1, r7, r2
 8019c26:	68fa      	ldr	r2, [r7, #12]
 8019c28:	188a      	adds	r2, r1, r2
 8019c2a:	7812      	ldrb	r2, [r2, #0]
 8019c2c:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	683a      	ldr	r2, [r7, #0]
 8019c32:	18d3      	adds	r3, r2, r3
 8019c34:	7819      	ldrb	r1, [r3, #0]
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	687a      	ldr	r2, [r7, #4]
 8019c3a:	18d3      	adds	r3, r2, r3
 8019c3c:	781a      	ldrb	r2, [r3, #0]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	6838      	ldr	r0, [r7, #0]
 8019c42:	18c3      	adds	r3, r0, r3
 8019c44:	404a      	eors	r2, r1
 8019c46:	b2d2      	uxtb	r2, r2
 8019c48:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	683a      	ldr	r2, [r7, #0]
 8019c4e:	18d3      	adds	r3, r2, r3
 8019c50:	781a      	ldrb	r2, [r3, #0]
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	6839      	ldr	r1, [r7, #0]
 8019c56:	18cb      	adds	r3, r1, r3
 8019c58:	3a33      	subs	r2, #51	; 0x33
 8019c5a:	b2d2      	uxtb	r2, r2
 8019c5c:	701a      	strb	r2, [r3, #0]
 8019c5e:	e059      	b.n	8019d14 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	2b0d      	cmp	r3, #13
 8019c64:	dc33      	bgt.n	8019cce <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	3b02      	subs	r3, #2
 8019c6a:	687a      	ldr	r2, [r7, #4]
 8019c6c:	18d2      	adds	r2, r2, r3
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	6839      	ldr	r1, [r7, #0]
 8019c72:	18cb      	adds	r3, r1, r3
 8019c74:	7812      	ldrb	r2, [r2, #0]
 8019c76:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	683a      	ldr	r2, [r7, #0]
 8019c7c:	18d3      	adds	r3, r2, r3
 8019c7e:	7819      	ldrb	r1, [r3, #0]
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	2203      	movs	r2, #3
 8019c84:	4013      	ands	r3, r2
 8019c86:	2208      	movs	r2, #8
 8019c88:	18ba      	adds	r2, r7, r2
 8019c8a:	5cd2      	ldrb	r2, [r2, r3]
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	6838      	ldr	r0, [r7, #0]
 8019c90:	18c3      	adds	r3, r0, r3
 8019c92:	404a      	eors	r2, r1
 8019c94:	b2d2      	uxtb	r2, r2
 8019c96:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	683a      	ldr	r2, [r7, #0]
 8019c9c:	18d3      	adds	r3, r2, r3
 8019c9e:	781a      	ldrb	r2, [r3, #0]
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	6839      	ldr	r1, [r7, #0]
 8019ca4:	18cb      	adds	r3, r1, r3
 8019ca6:	212c      	movs	r1, #44	; 0x2c
 8019ca8:	404a      	eors	r2, r1
 8019caa:	b2d2      	uxtb	r2, r2
 8019cac:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	683a      	ldr	r2, [r7, #0]
 8019cb2:	18d3      	adds	r3, r2, r3
 8019cb4:	7819      	ldrb	r1, [r3, #0]
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	3b01      	subs	r3, #1
 8019cba:	683a      	ldr	r2, [r7, #0]
 8019cbc:	18d3      	adds	r3, r2, r3
 8019cbe:	781a      	ldrb	r2, [r3, #0]
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	6838      	ldr	r0, [r7, #0]
 8019cc4:	18c3      	adds	r3, r0, r3
 8019cc6:	404a      	eors	r2, r1
 8019cc8:	b2d2      	uxtb	r2, r2
 8019cca:	701a      	strb	r2, [r3, #0]
 8019ccc:	e022      	b.n	8019d14 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	3b0c      	subs	r3, #12
 8019cd2:	001a      	movs	r2, r3
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	6839      	ldr	r1, [r7, #0]
 8019cd8:	18cb      	adds	r3, r1, r3
 8019cda:	2108      	movs	r1, #8
 8019cdc:	1879      	adds	r1, r7, r1
 8019cde:	5c8a      	ldrb	r2, [r1, r2]
 8019ce0:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	683a      	ldr	r2, [r7, #0]
 8019ce6:	18d3      	adds	r3, r2, r3
 8019ce8:	7819      	ldrb	r1, [r3, #0]
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	3b05      	subs	r3, #5
 8019cee:	687a      	ldr	r2, [r7, #4]
 8019cf0:	18d3      	adds	r3, r2, r3
 8019cf2:	781a      	ldrb	r2, [r3, #0]
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	6838      	ldr	r0, [r7, #0]
 8019cf8:	18c3      	adds	r3, r0, r3
 8019cfa:	404a      	eors	r2, r1
 8019cfc:	b2d2      	uxtb	r2, r2
 8019cfe:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	683a      	ldr	r2, [r7, #0]
 8019d04:	18d3      	adds	r3, r2, r3
 8019d06:	781a      	ldrb	r2, [r3, #0]
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	6839      	ldr	r1, [r7, #0]
 8019d0c:	18cb      	adds	r3, r1, r3
 8019d0e:	3a6f      	subs	r2, #111	; 0x6f
 8019d10:	b2d2      	uxtb	r2, r2
 8019d12:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	3301      	adds	r3, #1
 8019d18:	60fb      	str	r3, [r7, #12]
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	2b0f      	cmp	r3, #15
 8019d1e:	dc00      	bgt.n	8019d22 <itsdk_secstore_generateMasterKey+0x128>
 8019d20:	e779      	b.n	8019c16 <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	2110      	movs	r1, #16
 8019d26:	0018      	movs	r0, r3
 8019d28:	f000 fd96 	bl	801a858 <itsdk_encrypt_cifferKey>
}
 8019d2c:	46c0      	nop			; (mov r8, r8)
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	b004      	add	sp, #16
 8019d32:	bd80      	pop	{r7, pc}

08019d34 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8019d34:	b590      	push	{r4, r7, lr}
 8019d36:	b08d      	sub	sp, #52	; 0x34
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	0002      	movs	r2, r0
 8019d3c:	6039      	str	r1, [r7, #0]
 8019d3e:	1dfb      	adds	r3, r7, #7
 8019d40:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8019d42:	2320      	movs	r3, #32
 8019d44:	18fb      	adds	r3, r7, r3
 8019d46:	0018      	movs	r0, r3
 8019d48:	f7ff ff22 	bl	8019b90 <_itsdk_secstore_controlHeader>
 8019d4c:	1e03      	subs	r3, r0, #0
 8019d4e:	d001      	beq.n	8019d54 <itsdk_secstore_readBlock+0x20>
 8019d50:	2302      	movs	r3, #2
 8019d52:	e038      	b.n	8019dc6 <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8019d54:	2300      	movs	r3, #0
 8019d56:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8019d58:	211b      	movs	r1, #27
 8019d5a:	187b      	adds	r3, r7, r1
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019d60:	1dfb      	adds	r3, r7, #7
 8019d62:	781a      	ldrb	r2, [r3, #0]
 8019d64:	1879      	adds	r1, r7, r1
 8019d66:	231c      	movs	r3, #28
 8019d68:	18fb      	adds	r3, r7, r3
 8019d6a:	0018      	movs	r0, r3
 8019d6c:	f7ff fe96 	bl	8019a9c <_itsdk_secstore_getOffset>
 8019d70:	1e03      	subs	r3, r0, #0
 8019d72:	d001      	beq.n	8019d78 <itsdk_secstore_readBlock+0x44>
 8019d74:	2301      	movs	r3, #1
 8019d76:	e026      	b.n	8019dc6 <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8019d78:	2320      	movs	r3, #32
 8019d7a:	18fb      	adds	r3, r7, r3
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	021b      	lsls	r3, r3, #8
 8019d80:	0c1b      	lsrs	r3, r3, #16
 8019d82:	b29b      	uxth	r3, r3
 8019d84:	001a      	movs	r2, r3
 8019d86:	231b      	movs	r3, #27
 8019d88:	18fb      	adds	r3, r7, r3
 8019d8a:	781b      	ldrb	r3, [r3, #0]
 8019d8c:	411a      	asrs	r2, r3
 8019d8e:	0013      	movs	r3, r2
 8019d90:	2201      	movs	r2, #1
 8019d92:	4013      	ands	r3, r2
 8019d94:	d101      	bne.n	8019d9a <itsdk_secstore_readBlock+0x66>
 8019d96:	2303      	movs	r3, #3
 8019d98:	e015      	b.n	8019dc6 <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019d9a:	69f9      	ldr	r1, [r7, #28]
 8019d9c:	683a      	ldr	r2, [r7, #0]
 8019d9e:	2310      	movs	r3, #16
 8019da0:	2000      	movs	r0, #0
 8019da2:	f004 fc85 	bl	801e6b0 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8019da6:	2408      	movs	r4, #8
 8019da8:	193a      	adds	r2, r7, r4
 8019daa:	2320      	movs	r3, #32
 8019dac:	18fb      	adds	r3, r7, r3
 8019dae:	3304      	adds	r3, #4
 8019db0:	0011      	movs	r1, r2
 8019db2:	0018      	movs	r0, r3
 8019db4:	f7ff ff21 	bl	8019bfa <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019db8:	193b      	adds	r3, r7, r4
 8019dba:	6839      	ldr	r1, [r7, #0]
 8019dbc:	6838      	ldr	r0, [r7, #0]
 8019dbe:	2210      	movs	r2, #16
 8019dc0:	f000 fd0a 	bl	801a7d8 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 8019dc4:	2300      	movs	r3, #0
}
 8019dc6:	0018      	movs	r0, r3
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	b00d      	add	sp, #52	; 0x34
 8019dcc:	bd90      	pop	{r4, r7, pc}

08019dce <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8019dce:	b5b0      	push	{r4, r5, r7, lr}
 8019dd0:	b08c      	sub	sp, #48	; 0x30
 8019dd2:	af00      	add	r7, sp, #0
 8019dd4:	0002      	movs	r2, r0
 8019dd6:	6039      	str	r1, [r7, #0]
 8019dd8:	1dfb      	adds	r3, r7, #7
 8019dda:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8019ddc:	2320      	movs	r3, #32
 8019dde:	18fb      	adds	r3, r7, r3
 8019de0:	0018      	movs	r0, r3
 8019de2:	f7ff fed5 	bl	8019b90 <_itsdk_secstore_controlHeader>
 8019de6:	1e03      	subs	r3, r0, #0
 8019de8:	d001      	beq.n	8019dee <itsdk_secstore_writeBlock+0x20>
 8019dea:	2302      	movs	r3, #2
 8019dec:	e061      	b.n	8019eb2 <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 8019dee:	2300      	movs	r3, #0
 8019df0:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8019df2:	211b      	movs	r1, #27
 8019df4:	187b      	adds	r3, r7, r1
 8019df6:	2200      	movs	r2, #0
 8019df8:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019dfa:	1dfb      	adds	r3, r7, #7
 8019dfc:	781a      	ldrb	r2, [r3, #0]
 8019dfe:	1879      	adds	r1, r7, r1
 8019e00:	231c      	movs	r3, #28
 8019e02:	18fb      	adds	r3, r7, r3
 8019e04:	0018      	movs	r0, r3
 8019e06:	f7ff fe49 	bl	8019a9c <_itsdk_secstore_getOffset>
 8019e0a:	1e03      	subs	r3, r0, #0
 8019e0c:	d001      	beq.n	8019e12 <itsdk_secstore_writeBlock+0x44>
 8019e0e:	2301      	movs	r3, #1
 8019e10:	e04f      	b.n	8019eb2 <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8019e12:	2408      	movs	r4, #8
 8019e14:	193a      	adds	r2, r7, r4
 8019e16:	2520      	movs	r5, #32
 8019e18:	197b      	adds	r3, r7, r5
 8019e1a:	3304      	adds	r3, #4
 8019e1c:	0011      	movs	r1, r2
 8019e1e:	0018      	movs	r0, r3
 8019e20:	f7ff feeb 	bl	8019bfa <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019e24:	193b      	adds	r3, r7, r4
 8019e26:	6839      	ldr	r1, [r7, #0]
 8019e28:	6838      	ldr	r0, [r7, #0]
 8019e2a:	2210      	movs	r2, #16
 8019e2c:	f000 fc90 	bl	801a750 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019e30:	69f9      	ldr	r1, [r7, #28]
 8019e32:	683a      	ldr	r2, [r7, #0]
 8019e34:	2310      	movs	r3, #16
 8019e36:	2000      	movs	r0, #0
 8019e38:	f004 fb96 	bl	801e568 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 8019e3c:	197b      	adds	r3, r7, r5
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	021b      	lsls	r3, r3, #8
 8019e42:	0c1b      	lsrs	r3, r3, #16
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	001a      	movs	r2, r3
 8019e48:	231b      	movs	r3, #27
 8019e4a:	18fb      	adds	r3, r7, r3
 8019e4c:	781b      	ldrb	r3, [r3, #0]
 8019e4e:	411a      	asrs	r2, r3
 8019e50:	0013      	movs	r3, r2
 8019e52:	2201      	movs	r2, #1
 8019e54:	4013      	ands	r3, r2
 8019e56:	d12b      	bne.n	8019eb0 <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8019e58:	2520      	movs	r5, #32
 8019e5a:	197b      	adds	r3, r7, r5
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	021b      	lsls	r3, r3, #8
 8019e60:	0c1b      	lsrs	r3, r3, #16
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	b21a      	sxth	r2, r3
 8019e66:	231b      	movs	r3, #27
 8019e68:	18fb      	adds	r3, r7, r3
 8019e6a:	781b      	ldrb	r3, [r3, #0]
 8019e6c:	0019      	movs	r1, r3
 8019e6e:	2301      	movs	r3, #1
 8019e70:	408b      	lsls	r3, r1
 8019e72:	b21b      	sxth	r3, r3
 8019e74:	4313      	orrs	r3, r2
 8019e76:	b21b      	sxth	r3, r3
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	197b      	adds	r3, r7, r5
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	21ff      	movs	r1, #255	; 0xff
 8019e80:	4011      	ands	r1, r2
 8019e82:	000c      	movs	r4, r1
 8019e84:	7819      	ldrb	r1, [r3, #0]
 8019e86:	2000      	movs	r0, #0
 8019e88:	4001      	ands	r1, r0
 8019e8a:	1c08      	adds	r0, r1, #0
 8019e8c:	1c21      	adds	r1, r4, #0
 8019e8e:	4301      	orrs	r1, r0
 8019e90:	7019      	strb	r1, [r3, #0]
 8019e92:	0a12      	lsrs	r2, r2, #8
 8019e94:	b290      	uxth	r0, r2
 8019e96:	785a      	ldrb	r2, [r3, #1]
 8019e98:	2100      	movs	r1, #0
 8019e9a:	400a      	ands	r2, r1
 8019e9c:	1c11      	adds	r1, r2, #0
 8019e9e:	1c02      	adds	r2, r0, #0
 8019ea0:	430a      	orrs	r2, r1
 8019ea2:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019ea4:	197a      	adds	r2, r7, r5
 8019ea6:	2310      	movs	r3, #16
 8019ea8:	2100      	movs	r1, #0
 8019eaa:	2000      	movs	r0, #0
 8019eac:	f004 fb5c 	bl	801e568 <_eeprom_write>
	}

	return SS_SUCCESS;
 8019eb0:	2300      	movs	r3, #0
}
 8019eb2:	0018      	movs	r0, r3
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	b00c      	add	sp, #48	; 0x30
 8019eb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019ebc <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 8019ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ebe:	b08d      	sub	sp, #52	; 0x34
 8019ec0:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 8019ec2:	2020      	movs	r0, #32
 8019ec4:	0004      	movs	r4, r0
 8019ec6:	183b      	adds	r3, r7, r0
 8019ec8:	781a      	ldrb	r2, [r3, #0]
 8019eca:	210f      	movs	r1, #15
 8019ecc:	438a      	bics	r2, r1
 8019ece:	1c11      	adds	r1, r2, #0
 8019ed0:	220c      	movs	r2, #12
 8019ed2:	430a      	orrs	r2, r1
 8019ed4:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 8019ed6:	251f      	movs	r5, #31
 8019ed8:	197b      	adds	r3, r7, r5
 8019eda:	0018      	movs	r0, r3
 8019edc:	f7ff fe3e 	bl	8019b5c <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 8019ee0:	197b      	adds	r3, r7, r5
 8019ee2:	781b      	ldrb	r3, [r3, #0]
 8019ee4:	1c1a      	adds	r2, r3, #0
 8019ee6:	230f      	movs	r3, #15
 8019ee8:	4013      	ands	r3, r2
 8019eea:	b2da      	uxtb	r2, r3
 8019eec:	193b      	adds	r3, r7, r4
 8019eee:	0110      	lsls	r0, r2, #4
 8019ef0:	781a      	ldrb	r2, [r3, #0]
 8019ef2:	210f      	movs	r1, #15
 8019ef4:	400a      	ands	r2, r1
 8019ef6:	1c11      	adds	r1, r2, #0
 8019ef8:	1c02      	adds	r2, r0, #0
 8019efa:	430a      	orrs	r2, r1
 8019efc:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 8019efe:	0020      	movs	r0, r4
 8019f00:	193b      	adds	r3, r7, r4
 8019f02:	3301      	adds	r3, #1
 8019f04:	781a      	ldrb	r2, [r3, #0]
 8019f06:	2100      	movs	r1, #0
 8019f08:	400a      	ands	r2, r1
 8019f0a:	1c11      	adds	r1, r2, #0
 8019f0c:	2201      	movs	r2, #1
 8019f0e:	430a      	orrs	r2, r1
 8019f10:	701a      	strb	r2, [r3, #0]
 8019f12:	785a      	ldrb	r2, [r3, #1]
 8019f14:	2100      	movs	r1, #0
 8019f16:	400a      	ands	r2, r1
 8019f18:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 8019f1a:	2110      	movs	r1, #16
 8019f1c:	187b      	adds	r3, r7, r1
 8019f1e:	4a15      	ldr	r2, [pc, #84]	; (8019f74 <itsdk_secstore_init+0xb8>)
 8019f20:	ca70      	ldmia	r2!, {r4, r5, r6}
 8019f22:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8019f24:	183b      	adds	r3, r7, r0
 8019f26:	187a      	adds	r2, r7, r1
 8019f28:	3304      	adds	r3, #4
 8019f2a:	ca32      	ldmia	r2!, {r1, r4, r5}
 8019f2c:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019f2e:	183a      	adds	r2, r7, r0
 8019f30:	2310      	movs	r3, #16
 8019f32:	2100      	movs	r1, #0
 8019f34:	2000      	movs	r0, #0
 8019f36:	f004 fb17 	bl	801e568 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 8019f3a:	0039      	movs	r1, r7
 8019f3c:	4a0e      	ldr	r2, [pc, #56]	; (8019f78 <itsdk_secstore_init+0xbc>)
 8019f3e:	000b      	movs	r3, r1
 8019f40:	ca11      	ldmia	r2!, {r0, r4}
 8019f42:	c311      	stmia	r3!, {r0, r4}
 8019f44:	7812      	ldrb	r2, [r2, #0]
 8019f46:	701a      	strb	r2, [r3, #0]
 8019f48:	2309      	movs	r3, #9
 8019f4a:	18cb      	adds	r3, r1, r3
 8019f4c:	2207      	movs	r2, #7
 8019f4e:	2100      	movs	r1, #0
 8019f50:	0018      	movs	r0, r3
 8019f52:	f005 f8f3 	bl	801f13c <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 8019f56:	003b      	movs	r3, r7
 8019f58:	0019      	movs	r1, r3
 8019f5a:	2000      	movs	r0, #0
 8019f5c:	f7ff ff37 	bl	8019dce <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8019f60:	003b      	movs	r3, r7
 8019f62:	2110      	movs	r1, #16
 8019f64:	0018      	movs	r0, r3
 8019f66:	f005 f89d 	bl	801f0a4 <bzero>

	return SS_SUCCESS;
 8019f6a:	2300      	movs	r3, #0
}
 8019f6c:	0018      	movs	r0, r3
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	b00d      	add	sp, #52	; 0x34
 8019f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f74:	08020f2c 	.word	0x08020f2c
 8019f78:	08020f38 	.word	0x08020f38

08019f7c <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b084      	sub	sp, #16
 8019f80:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 8019f82:	003b      	movs	r3, r7
 8019f84:	0018      	movs	r0, r3
 8019f86:	f7ff fe03 	bl	8019b90 <_itsdk_secstore_controlHeader>
 8019f8a:	0003      	movs	r3, r0
}
 8019f8c:	0018      	movs	r0, r3
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	b004      	add	sp, #16
 8019f92:	bd80      	pop	{r7, pc}

08019f94 <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b086      	sub	sp, #24
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60b9      	str	r1, [r7, #8]
 8019f9c:	607a      	str	r2, [r7, #4]
 8019f9e:	210f      	movs	r1, #15
 8019fa0:	187b      	adds	r3, r7, r1
 8019fa2:	1c02      	adds	r2, r0, #0
 8019fa4:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 8019faa:	2013      	movs	r0, #19
 8019fac:	183b      	adds	r3, r7, r0
 8019fae:	2200      	movs	r2, #0
 8019fb0:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019fb2:	187b      	adds	r3, r7, r1
 8019fb4:	781a      	ldrb	r2, [r3, #0]
 8019fb6:	1839      	adds	r1, r7, r0
 8019fb8:	2314      	movs	r3, #20
 8019fba:	18fb      	adds	r3, r7, r3
 8019fbc:	0018      	movs	r0, r3
 8019fbe:	f7ff fd6d 	bl	8019a9c <_itsdk_secstore_getOffset>
 8019fc2:	1e03      	subs	r3, r0, #0
 8019fc4:	d001      	beq.n	8019fca <_itsdk_secstore_writeBlockKey+0x36>
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	e00c      	b.n	8019fe4 <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	68b9      	ldr	r1, [r7, #8]
 8019fce:	68b8      	ldr	r0, [r7, #8]
 8019fd0:	2210      	movs	r2, #16
 8019fd2:	f000 fbbd 	bl	801a750 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019fd6:	6979      	ldr	r1, [r7, #20]
 8019fd8:	68ba      	ldr	r2, [r7, #8]
 8019fda:	2310      	movs	r3, #16
 8019fdc:	2000      	movs	r0, #0
 8019fde:	f004 fac3 	bl	801e568 <_eeprom_write>

	return SS_SUCCESS;
 8019fe2:	2300      	movs	r3, #0
}
 8019fe4:	0018      	movs	r0, r3
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	b006      	add	sp, #24
 8019fea:	bd80      	pop	{r7, pc}

08019fec <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b090      	sub	sp, #64	; 0x40
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 8019ff4:	232c      	movs	r3, #44	; 0x2c
 8019ff6:	18fb      	adds	r3, r7, r3
 8019ff8:	0018      	movs	r0, r3
 8019ffa:	f7ff fdc9 	bl	8019b90 <_itsdk_secstore_controlHeader>
 8019ffe:	1e03      	subs	r3, r0, #0
 801a000:	d005      	beq.n	801a00e <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 801a002:	4b4b      	ldr	r3, [pc, #300]	; (801a130 <_itsk_secstore_rekey+0x144>)
 801a004:	0018      	movs	r0, r3
 801a006:	f7fe fd4d 	bl	8018aa4 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801a00a:	2302      	movs	r3, #2
 801a00c:	e08c      	b.n	801a128 <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 801a00e:	230c      	movs	r3, #12
 801a010:	18fa      	adds	r2, r7, r3
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	0011      	movs	r1, r2
 801a016:	0018      	movs	r0, r3
 801a018:	f7ff fdef 	bl	8019bfa <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 801a01c:	231c      	movs	r3, #28
 801a01e:	18fb      	adds	r3, r7, r3
 801a020:	0019      	movs	r1, r3
 801a022:	2000      	movs	r0, #0
 801a024:	f7ff fe86 	bl	8019d34 <itsdk_secstore_readBlock>
 801a028:	0003      	movs	r3, r0
 801a02a:	2b03      	cmp	r3, #3
 801a02c:	d007      	beq.n	801a03e <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 801a02e:	230c      	movs	r3, #12
 801a030:	18fa      	adds	r2, r7, r3
 801a032:	231c      	movs	r3, #28
 801a034:	18fb      	adds	r3, r7, r3
 801a036:	0019      	movs	r1, r3
 801a038:	2000      	movs	r0, #0
 801a03a:	f7ff ffab 	bl	8019f94 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 801a03e:	231c      	movs	r3, #28
 801a040:	18fb      	adds	r3, r7, r3
 801a042:	0019      	movs	r1, r3
 801a044:	2002      	movs	r0, #2
 801a046:	f7ff fe75 	bl	8019d34 <itsdk_secstore_readBlock>
 801a04a:	0003      	movs	r3, r0
 801a04c:	2b03      	cmp	r3, #3
 801a04e:	d007      	beq.n	801a060 <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 801a050:	230c      	movs	r3, #12
 801a052:	18fa      	adds	r2, r7, r3
 801a054:	231c      	movs	r3, #28
 801a056:	18fb      	adds	r3, r7, r3
 801a058:	0019      	movs	r1, r3
 801a05a:	2002      	movs	r0, #2
 801a05c:	f7ff ff9a 	bl	8019f94 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 801a060:	231c      	movs	r3, #28
 801a062:	18fb      	adds	r3, r7, r3
 801a064:	0019      	movs	r1, r3
 801a066:	2003      	movs	r0, #3
 801a068:	f7ff fe64 	bl	8019d34 <itsdk_secstore_readBlock>
 801a06c:	0003      	movs	r3, r0
 801a06e:	2b03      	cmp	r3, #3
 801a070:	d007      	beq.n	801a082 <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 801a072:	230c      	movs	r3, #12
 801a074:	18fa      	adds	r2, r7, r3
 801a076:	231c      	movs	r3, #28
 801a078:	18fb      	adds	r3, r7, r3
 801a07a:	0019      	movs	r1, r3
 801a07c:	2003      	movs	r0, #3
 801a07e:	f7ff ff89 	bl	8019f94 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 801a082:	231c      	movs	r3, #28
 801a084:	18fb      	adds	r3, r7, r3
 801a086:	0019      	movs	r1, r3
 801a088:	2004      	movs	r0, #4
 801a08a:	f7ff fe53 	bl	8019d34 <itsdk_secstore_readBlock>
 801a08e:	0003      	movs	r3, r0
 801a090:	2b03      	cmp	r3, #3
 801a092:	d007      	beq.n	801a0a4 <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 801a094:	230c      	movs	r3, #12
 801a096:	18fa      	adds	r2, r7, r3
 801a098:	231c      	movs	r3, #28
 801a09a:	18fb      	adds	r3, r7, r3
 801a09c:	0019      	movs	r1, r3
 801a09e:	2004      	movs	r0, #4
 801a0a0:	f7ff ff78 	bl	8019f94 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 801a0a4:	231c      	movs	r3, #28
 801a0a6:	18fb      	adds	r3, r7, r3
 801a0a8:	0019      	movs	r1, r3
 801a0aa:	2005      	movs	r0, #5
 801a0ac:	f7ff fe42 	bl	8019d34 <itsdk_secstore_readBlock>
 801a0b0:	0003      	movs	r3, r0
 801a0b2:	2b03      	cmp	r3, #3
 801a0b4:	d007      	beq.n	801a0c6 <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 801a0b6:	230c      	movs	r3, #12
 801a0b8:	18fa      	adds	r2, r7, r3
 801a0ba:	231c      	movs	r3, #28
 801a0bc:	18fb      	adds	r3, r7, r3
 801a0be:	0019      	movs	r1, r3
 801a0c0:	2005      	movs	r0, #5
 801a0c2:	f7ff ff67 	bl	8019f94 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 801a0c6:	231c      	movs	r3, #28
 801a0c8:	18fb      	adds	r3, r7, r3
 801a0ca:	0019      	movs	r1, r3
 801a0cc:	2006      	movs	r0, #6
 801a0ce:	f7ff fe31 	bl	8019d34 <itsdk_secstore_readBlock>
 801a0d2:	0003      	movs	r3, r0
 801a0d4:	2b03      	cmp	r3, #3
 801a0d6:	d007      	beq.n	801a0e8 <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 801a0d8:	230c      	movs	r3, #12
 801a0da:	18fa      	adds	r2, r7, r3
 801a0dc:	231c      	movs	r3, #28
 801a0de:	18fb      	adds	r3, r7, r3
 801a0e0:	0019      	movs	r1, r3
 801a0e2:	2006      	movs	r0, #6
 801a0e4:	f7ff ff56 	bl	8019f94 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a0ec:	e00d      	b.n	801a10a <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 801a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0f0:	687a      	ldr	r2, [r7, #4]
 801a0f2:	18d3      	adds	r3, r2, r3
 801a0f4:	7819      	ldrb	r1, [r3, #0]
 801a0f6:	232c      	movs	r3, #44	; 0x2c
 801a0f8:	18fa      	adds	r2, r7, r3
 801a0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0fc:	18d3      	adds	r3, r2, r3
 801a0fe:	3304      	adds	r3, #4
 801a100:	1c0a      	adds	r2, r1, #0
 801a102:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 801a104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a106:	3301      	adds	r3, #1
 801a108:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a10c:	2b0b      	cmp	r3, #11
 801a10e:	ddee      	ble.n	801a0ee <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 801a110:	232c      	movs	r3, #44	; 0x2c
 801a112:	18fa      	adds	r2, r7, r3
 801a114:	2310      	movs	r3, #16
 801a116:	2100      	movs	r1, #0
 801a118:	2000      	movs	r0, #0
 801a11a:	f004 fa25 	bl	801e568 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 801a11e:	4b05      	ldr	r3, [pc, #20]	; (801a134 <_itsk_secstore_rekey+0x148>)
 801a120:	0018      	movs	r0, r3
 801a122:	f7fe fcbf 	bl	8018aa4 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 801a126:	2300      	movs	r3, #0
}
 801a128:	0018      	movs	r0, r3
 801a12a:	46bd      	mov	sp, r7
 801a12c:	b010      	add	sp, #64	; 0x40
 801a12e:	bd80      	pop	{r7, pc}
 801a130:	08020f48 	.word	0x08020f48
 801a134:	08020f50 	.word	0x08020f50

0801a138 <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 801a138:	b590      	push	{r4, r7, lr}
 801a13a:	b085      	sub	sp, #20
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
 801a140:	000c      	movs	r4, r1
 801a142:	0010      	movs	r0, r2
 801a144:	0019      	movs	r1, r3
 801a146:	1cfb      	adds	r3, r7, #3
 801a148:	1c22      	adds	r2, r4, #0
 801a14a:	701a      	strb	r2, [r3, #0]
 801a14c:	1cbb      	adds	r3, r7, #2
 801a14e:	1c02      	adds	r2, r0, #0
 801a150:	701a      	strb	r2, [r3, #0]
 801a152:	1c7b      	adds	r3, r7, #1
 801a154:	1c0a      	adds	r2, r1, #0
 801a156:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 801a158:	1cbb      	adds	r3, r7, #2
 801a15a:	781a      	ldrb	r2, [r3, #0]
 801a15c:	1cfb      	adds	r3, r7, #3
 801a15e:	781b      	ldrb	r3, [r3, #0]
 801a160:	1ad2      	subs	r2, r2, r3
 801a162:	1c7b      	adds	r3, r7, #1
 801a164:	781b      	ldrb	r3, [r3, #0]
 801a166:	005b      	lsls	r3, r3, #1
 801a168:	429a      	cmp	r2, r3
 801a16a:	da01      	bge.n	801a170 <__checkAndConvert+0x38>
 801a16c:	2300      	movs	r3, #0
 801a16e:	e034      	b.n	801a1da <__checkAndConvert+0xa2>
	int k = 0;
 801a170:	2300      	movs	r3, #0
 801a172:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 801a174:	1cfb      	adds	r3, r7, #3
 801a176:	781b      	ldrb	r3, [r3, #0]
 801a178:	60bb      	str	r3, [r7, #8]
 801a17a:	e028      	b.n	801a1ce <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 801a17c:	68bb      	ldr	r3, [r7, #8]
 801a17e:	687a      	ldr	r2, [r7, #4]
 801a180:	18d3      	adds	r3, r2, r3
 801a182:	781b      	ldrb	r3, [r3, #0]
 801a184:	2100      	movs	r1, #0
 801a186:	0018      	movs	r0, r3
 801a188:	f002 fce4 	bl	801cb54 <itdt_isHexChar>
 801a18c:	1e03      	subs	r3, r0, #0
 801a18e:	d01c      	beq.n	801a1ca <__checkAndConvert+0x92>
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	3301      	adds	r3, #1
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	18d3      	adds	r3, r2, r3
 801a198:	781b      	ldrb	r3, [r3, #0]
 801a19a:	2100      	movs	r1, #0
 801a19c:	0018      	movs	r0, r3
 801a19e:	f002 fcd9 	bl	801cb54 <itdt_isHexChar>
 801a1a2:	1e03      	subs	r3, r0, #0
 801a1a4:	d011      	beq.n	801a1ca <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	18d1      	adds	r1, r2, r3
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	6a3a      	ldr	r2, [r7, #32]
 801a1b0:	18d4      	adds	r4, r2, r3
 801a1b2:	0008      	movs	r0, r1
 801a1b4:	f002 fc2e 	bl	801ca14 <itdt_convertHexChar2Int>
 801a1b8:	0003      	movs	r3, r0
 801a1ba:	7023      	strb	r3, [r4, #0]
			k++;
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	3301      	adds	r3, #1
 801a1c0:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	3302      	adds	r3, #2
 801a1c6:	60bb      	str	r3, [r7, #8]
 801a1c8:	e001      	b.n	801a1ce <__checkAndConvert+0x96>
		} else return false;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	e005      	b.n	801a1da <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 801a1ce:	1cbb      	adds	r3, r7, #2
 801a1d0:	781b      	ldrb	r3, [r3, #0]
 801a1d2:	68ba      	ldr	r2, [r7, #8]
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	dbd1      	blt.n	801a17c <__checkAndConvert+0x44>
	}
	return true;
 801a1d8:	2301      	movs	r3, #1
}
 801a1da:	0018      	movs	r0, r3
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	b005      	add	sp, #20
 801a1e0:	bd90      	pop	{r4, r7, pc}
	...

0801a1e4 <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 801a1e4:	b590      	push	{r4, r7, lr}
 801a1e6:	b087      	sub	sp, #28
 801a1e8:	af02      	add	r7, sp, #8
 801a1ea:	60f8      	str	r0, [r7, #12]
 801a1ec:	0008      	movs	r0, r1
 801a1ee:	607a      	str	r2, [r7, #4]
 801a1f0:	0019      	movs	r1, r3
 801a1f2:	240b      	movs	r4, #11
 801a1f4:	193b      	adds	r3, r7, r4
 801a1f6:	1c02      	adds	r2, r0, #0
 801a1f8:	701a      	strb	r2, [r3, #0]
 801a1fa:	230a      	movs	r3, #10
 801a1fc:	18fb      	adds	r3, r7, r3
 801a1fe:	1c0a      	adds	r2, r1, #0
 801a200:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 801a202:	193b      	adds	r3, r7, r4
 801a204:	781a      	ldrb	r2, [r3, #0]
 801a206:	68f8      	ldr	r0, [r7, #12]
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	9300      	str	r3, [sp, #0]
 801a20c:	2310      	movs	r3, #16
 801a20e:	2105      	movs	r1, #5
 801a210:	f7ff ff92 	bl	801a138 <__checkAndConvert>
 801a214:	1e03      	subs	r3, r0, #0
 801a216:	d01f      	beq.n	801a258 <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 801a218:	230a      	movs	r3, #10
 801a21a:	18fb      	adds	r3, r7, r3
 801a21c:	781b      	ldrb	r3, [r3, #0]
 801a21e:	2b01      	cmp	r3, #1
 801a220:	d104      	bne.n	801a22c <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	2110      	movs	r1, #16
 801a226:	0018      	movs	r0, r3
 801a228:	f000 fb16 	bl	801a858 <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 801a22c:	687a      	ldr	r2, [r7, #4]
 801a22e:	230a      	movs	r3, #10
 801a230:	18fb      	adds	r3, r7, r3
 801a232:	781b      	ldrb	r3, [r3, #0]
 801a234:	0011      	movs	r1, r2
 801a236:	0018      	movs	r0, r3
 801a238:	f7ff fdc9 	bl	8019dce <itsdk_secstore_writeBlock>
 801a23c:	1e03      	subs	r3, r0, #0
 801a23e:	d105      	bne.n	801a24c <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 801a240:	4b0a      	ldr	r3, [pc, #40]	; (801a26c <__updateField+0x88>)
 801a242:	0018      	movs	r0, r3
 801a244:	f7fe fc2e 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801a248:	2300      	movs	r3, #0
 801a24a:	e00a      	b.n	801a262 <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 801a24c:	4b08      	ldr	r3, [pc, #32]	; (801a270 <__updateField+0x8c>)
 801a24e:	0018      	movs	r0, r3
 801a250:	f7fe fc28 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801a254:	2302      	movs	r3, #2
 801a256:	e004      	b.n	801a262 <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 801a258:	4b05      	ldr	r3, [pc, #20]	; (801a270 <__updateField+0x8c>)
 801a25a:	0018      	movs	r0, r3
 801a25c:	f7fe fc22 	bl	8018aa4 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801a260:	2302      	movs	r3, #2
	}
}
 801a262:	0018      	movs	r0, r3
 801a264:	46bd      	mov	sp, r7
 801a266:	b005      	add	sp, #20
 801a268:	bd90      	pop	{r4, r7, pc}
 801a26a:	46c0      	nop			; (mov r8, r8)
 801a26c:	08020f50 	.word	0x08020f50
 801a270:	08020f48 	.word	0x08020f48

0801a274 <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 801a274:	b590      	push	{r4, r7, lr}
 801a276:	b08d      	sub	sp, #52	; 0x34
 801a278:	af02      	add	r7, sp, #8
 801a27a:	60f8      	str	r0, [r7, #12]
 801a27c:	0008      	movs	r0, r1
 801a27e:	607a      	str	r2, [r7, #4]
 801a280:	0019      	movs	r1, r3
 801a282:	240b      	movs	r4, #11
 801a284:	193b      	adds	r3, r7, r4
 801a286:	1c02      	adds	r2, r0, #0
 801a288:	701a      	strb	r2, [r3, #0]
 801a28a:	230a      	movs	r3, #10
 801a28c:	18fb      	adds	r3, r7, r3
 801a28e:	1c0a      	adds	r2, r1, #0
 801a290:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 801a292:	2334      	movs	r3, #52	; 0x34
 801a294:	2208      	movs	r2, #8
 801a296:	4694      	mov	ip, r2
 801a298:	44bc      	add	ip, r7
 801a29a:	4463      	add	r3, ip
 801a29c:	7819      	ldrb	r1, [r3, #0]
 801a29e:	193b      	adds	r3, r7, r4
 801a2a0:	781a      	ldrb	r2, [r3, #0]
 801a2a2:	68f8      	ldr	r0, [r7, #12]
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	9300      	str	r3, [sp, #0]
 801a2a8:	000b      	movs	r3, r1
 801a2aa:	2105      	movs	r1, #5
 801a2ac:	f7ff ff44 	bl	801a138 <__checkAndConvert>
 801a2b0:	1e03      	subs	r3, r0, #0
 801a2b2:	d045      	beq.n	801a340 <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 801a2b4:	2314      	movs	r3, #20
 801a2b6:	18fa      	adds	r2, r7, r3
 801a2b8:	230a      	movs	r3, #10
 801a2ba:	18fb      	adds	r3, r7, r3
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	0011      	movs	r1, r2
 801a2c0:	0018      	movs	r0, r3
 801a2c2:	f7ff fd37 	bl	8019d34 <itsdk_secstore_readBlock>
 801a2c6:	1e03      	subs	r3, r0, #0
 801a2c8:	d005      	beq.n	801a2d6 <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 801a2ca:	4b22      	ldr	r3, [pc, #136]	; (801a354 <__updateField2+0xe0>)
 801a2cc:	0018      	movs	r0, r3
 801a2ce:	f7fe fbe9 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801a2d2:	2302      	movs	r3, #2
 801a2d4:	e039      	b.n	801a34a <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	627b      	str	r3, [r7, #36]	; 0x24
 801a2da:	e011      	b.n	801a300 <__updateField2+0x8c>
			_b[i+offset] = b[i];
 801a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	18d2      	adds	r2, r2, r3
 801a2e2:	2330      	movs	r3, #48	; 0x30
 801a2e4:	2108      	movs	r1, #8
 801a2e6:	468c      	mov	ip, r1
 801a2e8:	44bc      	add	ip, r7
 801a2ea:	4463      	add	r3, ip
 801a2ec:	7819      	ldrb	r1, [r3, #0]
 801a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f0:	18cb      	adds	r3, r1, r3
 801a2f2:	7811      	ldrb	r1, [r2, #0]
 801a2f4:	2214      	movs	r2, #20
 801a2f6:	18ba      	adds	r2, r7, r2
 801a2f8:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 801a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2fc:	3301      	adds	r3, #1
 801a2fe:	627b      	str	r3, [r7, #36]	; 0x24
 801a300:	2334      	movs	r3, #52	; 0x34
 801a302:	2208      	movs	r2, #8
 801a304:	4694      	mov	ip, r2
 801a306:	44bc      	add	ip, r7
 801a308:	4463      	add	r3, ip
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a30e:	429a      	cmp	r2, r3
 801a310:	dbe4      	blt.n	801a2dc <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 801a312:	2314      	movs	r3, #20
 801a314:	18fa      	adds	r2, r7, r3
 801a316:	230a      	movs	r3, #10
 801a318:	18fb      	adds	r3, r7, r3
 801a31a:	781b      	ldrb	r3, [r3, #0]
 801a31c:	0011      	movs	r1, r2
 801a31e:	0018      	movs	r0, r3
 801a320:	f7ff fd55 	bl	8019dce <itsdk_secstore_writeBlock>
 801a324:	1e03      	subs	r3, r0, #0
 801a326:	d105      	bne.n	801a334 <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 801a328:	4b0b      	ldr	r3, [pc, #44]	; (801a358 <__updateField2+0xe4>)
 801a32a:	0018      	movs	r0, r3
 801a32c:	f7fe fbba 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801a330:	2300      	movs	r3, #0
 801a332:	e00a      	b.n	801a34a <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 801a334:	4b07      	ldr	r3, [pc, #28]	; (801a354 <__updateField2+0xe0>)
 801a336:	0018      	movs	r0, r3
 801a338:	f7fe fbb4 	bl	8018aa4 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801a33c:	2302      	movs	r3, #2
 801a33e:	e004      	b.n	801a34a <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 801a340:	4b04      	ldr	r3, [pc, #16]	; (801a354 <__updateField2+0xe0>)
 801a342:	0018      	movs	r0, r3
 801a344:	f7fe fbae 	bl	8018aa4 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 801a348:	2302      	movs	r3, #2
	}
}
 801a34a:	0018      	movs	r0, r3
 801a34c:	46bd      	mov	sp, r7
 801a34e:	b00b      	add	sp, #44	; 0x2c
 801a350:	bd90      	pop	{r4, r7, pc}
 801a352:	46c0      	nop			; (mov r8, r8)
 801a354:	08020f48 	.word	0x08020f48
 801a358:	08020f50 	.word	0x08020f50

0801a35c <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 801a35c:	b5b0      	push	{r4, r5, r7, lr}
 801a35e:	b090      	sub	sp, #64	; 0x40
 801a360:	af02      	add	r7, sp, #8
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	000a      	movs	r2, r1
 801a366:	1cfb      	adds	r3, r7, #3
 801a368:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801a36a:	1cfb      	adds	r3, r7, #3
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	2b01      	cmp	r3, #1
 801a370:	d136      	bne.n	801a3e0 <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	781b      	ldrb	r3, [r3, #0]
 801a376:	2b3f      	cmp	r3, #63	; 0x3f
 801a378:	d000      	beq.n	801a37c <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 801a37a:	e1cb      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 801a37c:	4bd3      	ldr	r3, [pc, #844]	; (801a6cc <_itsdk_secStore_consolePriv+0x370>)
 801a37e:	0018      	movs	r0, r3
 801a380:	f7fe fb90 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 801a384:	4bd2      	ldr	r3, [pc, #840]	; (801a6d0 <_itsdk_secStore_consolePriv+0x374>)
 801a386:	0018      	movs	r0, r3
 801a388:	f7fe fb8c 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 801a38c:	4bd1      	ldr	r3, [pc, #836]	; (801a6d4 <_itsdk_secStore_consolePriv+0x378>)
 801a38e:	0018      	movs	r0, r3
 801a390:	f7fe fb88 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 801a394:	4bd0      	ldr	r3, [pc, #832]	; (801a6d8 <_itsdk_secStore_consolePriv+0x37c>)
 801a396:	0018      	movs	r0, r3
 801a398:	f7fe fb84 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 801a39c:	4bcf      	ldr	r3, [pc, #828]	; (801a6dc <_itsdk_secStore_consolePriv+0x380>)
 801a39e:	0018      	movs	r0, r3
 801a3a0:	f7fe fb80 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 801a3a4:	4bce      	ldr	r3, [pc, #824]	; (801a6e0 <_itsdk_secStore_consolePriv+0x384>)
 801a3a6:	0018      	movs	r0, r3
 801a3a8:	f7fe fb7c 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 801a3ac:	4bcd      	ldr	r3, [pc, #820]	; (801a6e4 <_itsdk_secStore_consolePriv+0x388>)
 801a3ae:	0018      	movs	r0, r3
 801a3b0:	f7fe fb78 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 801a3b4:	4bcc      	ldr	r3, [pc, #816]	; (801a6e8 <_itsdk_secStore_consolePriv+0x38c>)
 801a3b6:	0018      	movs	r0, r3
 801a3b8:	f7fe fb74 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 801a3bc:	4bcb      	ldr	r3, [pc, #812]	; (801a6ec <_itsdk_secStore_consolePriv+0x390>)
 801a3be:	0018      	movs	r0, r3
 801a3c0:	f7fe fb70 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 801a3c4:	4bca      	ldr	r3, [pc, #808]	; (801a6f0 <_itsdk_secStore_consolePriv+0x394>)
 801a3c6:	0018      	movs	r0, r3
 801a3c8:	f7fe fb6c 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 801a3cc:	4bc9      	ldr	r3, [pc, #804]	; (801a6f4 <_itsdk_secStore_consolePriv+0x398>)
 801a3ce:	0018      	movs	r0, r3
 801a3d0:	f7fe fb68 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 801a3d4:	4bc8      	ldr	r3, [pc, #800]	; (801a6f8 <_itsdk_secStore_consolePriv+0x39c>)
 801a3d6:	0018      	movs	r0, r3
 801a3d8:	f7fe fb64 	bl	8018aa4 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801a3dc:	2300      	movs	r3, #0
 801a3de:	e19a      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 801a3e0:	1cfb      	adds	r3, r7, #3
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	2b03      	cmp	r3, #3
 801a3e6:	d800      	bhi.n	801a3ea <_itsdk_secStore_consolePriv+0x8e>
 801a3e8:	e194      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	781b      	ldrb	r3, [r3, #0]
 801a3ee:	2b73      	cmp	r3, #115	; 0x73
 801a3f0:	d000      	beq.n	801a3f4 <_itsdk_secStore_consolePriv+0x98>
 801a3f2:	e096      	b.n	801a522 <_itsdk_secStore_consolePriv+0x1c6>
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	3301      	adds	r3, #1
 801a3f8:	781b      	ldrb	r3, [r3, #0]
 801a3fa:	2b73      	cmp	r3, #115	; 0x73
 801a3fc:	d000      	beq.n	801a400 <_itsdk_secStore_consolePriv+0xa4>
 801a3fe:	e090      	b.n	801a522 <_itsdk_secStore_consolePriv+0x1c6>
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	3302      	adds	r3, #2
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	2b3a      	cmp	r3, #58	; 0x3a
 801a408:	d000      	beq.n	801a40c <_itsdk_secStore_consolePriv+0xb0>
 801a40a:	e08a      	b.n	801a522 <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	3303      	adds	r3, #3
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	3b39      	subs	r3, #57	; 0x39
 801a414:	2b28      	cmp	r3, #40	; 0x28
 801a416:	d900      	bls.n	801a41a <_itsdk_secStore_consolePriv+0xbe>
 801a418:	e085      	b.n	801a526 <_itsdk_secStore_consolePriv+0x1ca>
 801a41a:	009a      	lsls	r2, r3, #2
 801a41c:	4bb7      	ldr	r3, [pc, #732]	; (801a6fc <_itsdk_secStore_consolePriv+0x3a0>)
 801a41e:	18d3      	adds	r3, r2, r3
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 801a424:	2337      	movs	r3, #55	; 0x37
 801a426:	18fb      	adds	r3, r7, r3
 801a428:	2200      	movs	r2, #0
 801a42a:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 801a42c:	2001      	movs	r0, #1
 801a42e:	f002 f969 	bl	801c704 <itsdk_lorawan_resetFactoryDefaults>
 801a432:	1e03      	subs	r3, r0, #0
 801a434:	d003      	beq.n	801a43e <_itsdk_secStore_consolePriv+0xe2>
 801a436:	2337      	movs	r3, #55	; 0x37
 801a438:	18fb      	adds	r3, r7, r3
 801a43a:	2201      	movs	r2, #1
 801a43c:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 801a43e:	2337      	movs	r3, #55	; 0x37
 801a440:	18fb      	adds	r3, r7, r3
 801a442:	781b      	ldrb	r3, [r3, #0]
 801a444:	2b00      	cmp	r3, #0
 801a446:	d105      	bne.n	801a454 <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 801a448:	4bad      	ldr	r3, [pc, #692]	; (801a700 <_itsdk_secStore_consolePriv+0x3a4>)
 801a44a:	0018      	movs	r0, r3
 801a44c:	f7fe fb2a 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a450:	2300      	movs	r3, #0
 801a452:	e160      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 801a454:	4bab      	ldr	r3, [pc, #684]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a456:	0018      	movs	r0, r3
 801a458:	f7fe fb24 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a45c:	2302      	movs	r3, #2
 801a45e:	e15a      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 801a460:	2001      	movs	r0, #1
 801a462:	f002 f94f 	bl	801c704 <itsdk_lorawan_resetFactoryDefaults>
 801a466:	1e03      	subs	r3, r0, #0
 801a468:	d105      	bne.n	801a476 <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 801a46a:	4ba5      	ldr	r3, [pc, #660]	; (801a700 <_itsdk_secStore_consolePriv+0x3a4>)
 801a46c:	0018      	movs	r0, r3
 801a46e:	f7fe fb19 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a472:	2300      	movs	r3, #0
 801a474:	e14f      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801a476:	4ba3      	ldr	r3, [pc, #652]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a478:	0018      	movs	r0, r3
 801a47a:	f7fe fb13 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a47e:	2302      	movs	r3, #2
 801a480:	e149      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 801a482:	230c      	movs	r3, #12
 801a484:	18fb      	adds	r3, r7, r3
 801a486:	0019      	movs	r1, r3
 801a488:	2007      	movs	r0, #7
 801a48a:	f7ff fc53 	bl	8019d34 <itsdk_secstore_readBlock>
 801a48e:	1e03      	subs	r3, r0, #0
 801a490:	d119      	bne.n	801a4c6 <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 801a492:	2300      	movs	r3, #0
 801a494:	633b      	str	r3, [r7, #48]	; 0x30
 801a496:	e00d      	b.n	801a4b4 <_itsdk_secStore_consolePriv+0x158>
 801a498:	230c      	movs	r3, #12
 801a49a:	18fa      	adds	r2, r7, r3
 801a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a49e:	18d3      	adds	r3, r2, r3
 801a4a0:	781b      	ldrb	r3, [r3, #0]
 801a4a2:	001a      	movs	r2, r3
 801a4a4:	4b98      	ldr	r3, [pc, #608]	; (801a708 <_itsdk_secStore_consolePriv+0x3ac>)
 801a4a6:	0011      	movs	r1, r2
 801a4a8:	0018      	movs	r0, r3
 801a4aa:	f7fe fafb 	bl	8018aa4 <_itsdk_console_printf>
 801a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4b0:	3301      	adds	r3, #1
 801a4b2:	633b      	str	r3, [r7, #48]	; 0x30
 801a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4b6:	2b07      	cmp	r3, #7
 801a4b8:	ddee      	ble.n	801a498 <_itsdk_secStore_consolePriv+0x13c>
 801a4ba:	4b94      	ldr	r3, [pc, #592]	; (801a70c <_itsdk_secStore_consolePriv+0x3b0>)
 801a4bc:	0018      	movs	r0, r3
 801a4be:	f7fe faf1 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	e127      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801a4c6:	4b8f      	ldr	r3, [pc, #572]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a4c8:	0018      	movs	r0, r3
 801a4ca:	f7fe faeb 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a4ce:	2302      	movs	r3, #2
 801a4d0:	e121      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 801a4d2:	230c      	movs	r3, #12
 801a4d4:	18fb      	adds	r3, r7, r3
 801a4d6:	0019      	movs	r1, r3
 801a4d8:	2007      	movs	r0, #7
 801a4da:	f7ff fc2b 	bl	8019d34 <itsdk_secstore_readBlock>
 801a4de:	1e03      	subs	r3, r0, #0
 801a4e0:	d119      	bne.n	801a516 <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 801a4e2:	2308      	movs	r3, #8
 801a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a4e6:	e00d      	b.n	801a504 <_itsdk_secStore_consolePriv+0x1a8>
 801a4e8:	230c      	movs	r3, #12
 801a4ea:	18fa      	adds	r2, r7, r3
 801a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ee:	18d3      	adds	r3, r2, r3
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	001a      	movs	r2, r3
 801a4f4:	4b84      	ldr	r3, [pc, #528]	; (801a708 <_itsdk_secStore_consolePriv+0x3ac>)
 801a4f6:	0011      	movs	r1, r2
 801a4f8:	0018      	movs	r0, r3
 801a4fa:	f7fe fad3 	bl	8018aa4 <_itsdk_console_printf>
 801a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a500:	3301      	adds	r3, #1
 801a502:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a506:	2b0f      	cmp	r3, #15
 801a508:	ddee      	ble.n	801a4e8 <_itsdk_secStore_consolePriv+0x18c>
 801a50a:	4b80      	ldr	r3, [pc, #512]	; (801a70c <_itsdk_secStore_consolePriv+0x3b0>)
 801a50c:	0018      	movs	r0, r3
 801a50e:	f7fe fac9 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 801a512:	2300      	movs	r3, #0
 801a514:	e0ff      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 801a516:	4b7b      	ldr	r3, [pc, #492]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a518:	0018      	movs	r0, r3
 801a51a:	f7fe fac3 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a51e:	2302      	movs	r3, #2
 801a520:	e0f9      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 801a522:	46c0      	nop			; (mov r8, r8)
 801a524:	e000      	b.n	801a528 <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 801a526:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	2b53      	cmp	r3, #83	; 0x53
 801a52e:	d000      	beq.n	801a532 <_itsdk_secStore_consolePriv+0x1d6>
 801a530:	e0f0      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	3301      	adds	r3, #1
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	2b53      	cmp	r3, #83	; 0x53
 801a53a:	d000      	beq.n	801a53e <_itsdk_secStore_consolePriv+0x1e2>
 801a53c:	e0ea      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	3302      	adds	r3, #2
 801a542:	781b      	ldrb	r3, [r3, #0]
 801a544:	2b3a      	cmp	r3, #58	; 0x3a
 801a546:	d000      	beq.n	801a54a <_itsdk_secStore_consolePriv+0x1ee>
 801a548:	e0e4      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	3304      	adds	r3, #4
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	2b3a      	cmp	r3, #58	; 0x3a
 801a552:	d000      	beq.n	801a556 <_itsdk_secStore_consolePriv+0x1fa>
 801a554:	e0de      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 801a556:	1cfb      	adds	r3, r7, #3
 801a558:	781b      	ldrb	r3, [r3, #0]
 801a55a:	3b05      	subs	r3, #5
 801a55c:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	3303      	adds	r3, #3
 801a562:	781b      	ldrb	r3, [r3, #0]
 801a564:	3b30      	subs	r3, #48	; 0x30
 801a566:	2b34      	cmp	r3, #52	; 0x34
 801a568:	d900      	bls.n	801a56c <_itsdk_secStore_consolePriv+0x210>
 801a56a:	e0d3      	b.n	801a714 <_itsdk_secStore_consolePriv+0x3b8>
 801a56c:	009a      	lsls	r2, r3, #2
 801a56e:	4b68      	ldr	r3, [pc, #416]	; (801a710 <_itsdk_secStore_consolePriv+0x3b4>)
 801a570:	18d3      	adds	r3, r2, r3
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 801a576:	1cfb      	adds	r3, r7, #3
 801a578:	781a      	ldrb	r2, [r3, #0]
 801a57a:	6878      	ldr	r0, [r7, #4]
 801a57c:	230c      	movs	r3, #12
 801a57e:	18fb      	adds	r3, r7, r3
 801a580:	9300      	str	r3, [sp, #0]
 801a582:	230c      	movs	r3, #12
 801a584:	2105      	movs	r1, #5
 801a586:	f7ff fdd7 	bl	801a138 <__checkAndConvert>
 801a58a:	1e03      	subs	r3, r0, #0
 801a58c:	d006      	beq.n	801a59c <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 801a58e:	230c      	movs	r3, #12
 801a590:	18fb      	adds	r3, r7, r3
 801a592:	0018      	movs	r0, r3
 801a594:	f7ff fd2a 	bl	8019fec <_itsk_secstore_rekey>
 801a598:	0003      	movs	r3, r0
 801a59a:	e0bc      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 801a59c:	4b59      	ldr	r3, [pc, #356]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a59e:	0018      	movs	r0, r3
 801a5a0:	f7fe fa80 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 801a5a4:	2302      	movs	r3, #2
 801a5a6:	e0b6      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 801a5a8:	69fb      	ldr	r3, [r7, #28]
 801a5aa:	2b0f      	cmp	r3, #15
 801a5ac:	dd05      	ble.n	801a5ba <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 801a5ae:	4b55      	ldr	r3, [pc, #340]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a5b0:	0018      	movs	r0, r3
 801a5b2:	f7fe fa77 	bl	8018aa4 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a5b6:	2302      	movs	r3, #2
 801a5b8:	e0ad      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5be:	e00d      	b.n	801a5dc <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 801a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5c2:	3305      	adds	r3, #5
 801a5c4:	687a      	ldr	r2, [r7, #4]
 801a5c6:	18d3      	adds	r3, r2, r3
 801a5c8:	7819      	ldrb	r1, [r3, #0]
 801a5ca:	230c      	movs	r3, #12
 801a5cc:	18fa      	adds	r2, r7, r3
 801a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5d0:	18d3      	adds	r3, r2, r3
 801a5d2:	1c0a      	adds	r2, r1, #0
 801a5d4:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 801a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5d8:	3301      	adds	r3, #1
 801a5da:	62bb      	str	r3, [r7, #40]	; 0x28
 801a5dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	429a      	cmp	r2, r3
 801a5e2:	dbed      	blt.n	801a5c0 <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 801a5e4:	69fb      	ldr	r3, [r7, #28]
 801a5e6:	627b      	str	r3, [r7, #36]	; 0x24
 801a5e8:	e008      	b.n	801a5fc <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 801a5ea:	230c      	movs	r3, #12
 801a5ec:	18fa      	adds	r2, r7, r3
 801a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f0:	18d3      	adds	r3, r2, r3
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 801a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f8:	3301      	adds	r3, #1
 801a5fa:	627b      	str	r3, [r7, #36]	; 0x24
 801a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5fe:	2b0f      	cmp	r3, #15
 801a600:	ddf3      	ble.n	801a5ea <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 801a602:	230c      	movs	r3, #12
 801a604:	18fb      	adds	r3, r7, r3
 801a606:	0019      	movs	r1, r3
 801a608:	2000      	movs	r0, #0
 801a60a:	f7ff fbe0 	bl	8019dce <itsdk_secstore_writeBlock>
 801a60e:	1e03      	subs	r3, r0, #0
 801a610:	d105      	bne.n	801a61e <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 801a612:	4b3b      	ldr	r3, [pc, #236]	; (801a700 <_itsdk_secStore_consolePriv+0x3a4>)
 801a614:	0018      	movs	r0, r3
 801a616:	f7fe fa45 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801a61a:	2300      	movs	r3, #0
 801a61c:	e07b      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 801a61e:	4b39      	ldr	r3, [pc, #228]	; (801a704 <_itsdk_secStore_consolePriv+0x3a8>)
 801a620:	0018      	movs	r0, r3
 801a622:	f7fe fa3f 	bl	8018aa4 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 801a626:	2302      	movs	r3, #2
 801a628:	e075      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 801a62a:	230c      	movs	r3, #12
 801a62c:	18fa      	adds	r2, r7, r3
 801a62e:	1cfb      	adds	r3, r7, #3
 801a630:	7819      	ldrb	r1, [r3, #0]
 801a632:	6878      	ldr	r0, [r7, #4]
 801a634:	2308      	movs	r3, #8
 801a636:	9301      	str	r3, [sp, #4]
 801a638:	2300      	movs	r3, #0
 801a63a:	9300      	str	r3, [sp, #0]
 801a63c:	2307      	movs	r3, #7
 801a63e:	f7ff fe19 	bl	801a274 <__updateField2>
 801a642:	0003      	movs	r3, r0
 801a644:	e067      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 801a646:	230c      	movs	r3, #12
 801a648:	18fa      	adds	r2, r7, r3
 801a64a:	1cfb      	adds	r3, r7, #3
 801a64c:	7819      	ldrb	r1, [r3, #0]
 801a64e:	6878      	ldr	r0, [r7, #4]
 801a650:	2308      	movs	r3, #8
 801a652:	9301      	str	r3, [sp, #4]
 801a654:	2308      	movs	r3, #8
 801a656:	9300      	str	r3, [sp, #0]
 801a658:	2307      	movs	r3, #7
 801a65a:	f7ff fe0b 	bl	801a274 <__updateField2>
 801a65e:	0003      	movs	r3, r0
 801a660:	e059      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 801a662:	230c      	movs	r3, #12
 801a664:	18fa      	adds	r2, r7, r3
 801a666:	1cfb      	adds	r3, r7, #3
 801a668:	7819      	ldrb	r1, [r3, #0]
 801a66a:	6878      	ldr	r0, [r7, #4]
 801a66c:	2308      	movs	r3, #8
 801a66e:	f7ff fdb9 	bl	801a1e4 <__updateField>
 801a672:	0003      	movs	r3, r0
 801a674:	e04f      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 801a676:	230c      	movs	r3, #12
 801a678:	18fa      	adds	r2, r7, r3
 801a67a:	1cfb      	adds	r3, r7, #3
 801a67c:	7819      	ldrb	r1, [r3, #0]
 801a67e:	6878      	ldr	r0, [r7, #4]
 801a680:	2309      	movs	r3, #9
 801a682:	f7ff fdaf 	bl	801a1e4 <__updateField>
 801a686:	0003      	movs	r3, r0
 801a688:	e045      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 801a68a:	2523      	movs	r5, #35	; 0x23
 801a68c:	197c      	adds	r4, r7, r5
 801a68e:	230c      	movs	r3, #12
 801a690:	18fa      	adds	r2, r7, r3
 801a692:	1cfb      	adds	r3, r7, #3
 801a694:	7819      	ldrb	r1, [r3, #0]
 801a696:	6878      	ldr	r0, [r7, #4]
 801a698:	2309      	movs	r3, #9
 801a69a:	f7ff fda3 	bl	801a1e4 <__updateField>
 801a69e:	0003      	movs	r3, r0
 801a6a0:	7023      	strb	r3, [r4, #0]
 801a6a2:	197b      	adds	r3, r7, r5
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d10b      	bne.n	801a6c2 <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 801a6aa:	2323      	movs	r3, #35	; 0x23
 801a6ac:	18fc      	adds	r4, r7, r3
 801a6ae:	230c      	movs	r3, #12
 801a6b0:	18fa      	adds	r2, r7, r3
 801a6b2:	1cfb      	adds	r3, r7, #3
 801a6b4:	7819      	ldrb	r1, [r3, #0]
 801a6b6:	6878      	ldr	r0, [r7, #4]
 801a6b8:	2308      	movs	r3, #8
 801a6ba:	f7ff fd93 	bl	801a1e4 <__updateField>
 801a6be:	0003      	movs	r3, r0
 801a6c0:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 801a6c2:	2323      	movs	r3, #35	; 0x23
 801a6c4:	18fb      	adds	r3, r7, r3
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	e025      	b.n	801a716 <_itsdk_secStore_consolePriv+0x3ba>
 801a6ca:	46c0      	nop			; (mov r8, r8)
 801a6cc:	08020f58 	.word	0x08020f58
 801a6d0:	08020f6c 	.word	0x08020f6c
 801a6d4:	08020fa0 	.word	0x08020fa0
 801a6d8:	08020fd8 	.word	0x08020fd8
 801a6dc:	08021014 	.word	0x08021014
 801a6e0:	08021040 	.word	0x08021040
 801a6e4:	08021070 	.word	0x08021070
 801a6e8:	080210a0 	.word	0x080210a0
 801a6ec:	080210d0 	.word	0x080210d0
 801a6f0:	08021100 	.word	0x08021100
 801a6f4:	08021134 	.word	0x08021134
 801a6f8:	08021168 	.word	0x08021168
 801a6fc:	08021e90 	.word	0x08021e90
 801a700:	08020f50 	.word	0x08020f50
 801a704:	08020f48 	.word	0x08020f48
 801a708:	0802119c 	.word	0x0802119c
 801a70c:	080211a4 	.word	0x080211a4
 801a710:	08021f34 	.word	0x08021f34
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 801a714:	2301      	movs	r3, #1
}
 801a716:	0018      	movs	r0, r3
 801a718:	46bd      	mov	sp, r7
 801a71a:	b00e      	add	sp, #56	; 0x38
 801a71c:	bdb0      	pop	{r4, r5, r7, pc}
 801a71e:	46c0      	nop			; (mov r8, r8)

0801a720 <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 801a720:	b580      	push	{r7, lr}
 801a722:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 801a724:	4b08      	ldr	r3, [pc, #32]	; (801a748 <itsdk_secStore_RegisterConsole+0x28>)
 801a726:	4a09      	ldr	r2, [pc, #36]	; (801a74c <itsdk_secStore_RegisterConsole+0x2c>)
 801a728:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 801a72a:	4b07      	ldr	r3, [pc, #28]	; (801a748 <itsdk_secStore_RegisterConsole+0x28>)
 801a72c:	2200      	movs	r2, #0
 801a72e:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 801a730:	4b05      	ldr	r3, [pc, #20]	; (801a748 <itsdk_secStore_RegisterConsole+0x28>)
 801a732:	2200      	movs	r2, #0
 801a734:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 801a736:	4b04      	ldr	r3, [pc, #16]	; (801a748 <itsdk_secStore_RegisterConsole+0x28>)
 801a738:	0018      	movs	r0, r3
 801a73a:	f7fe fb73 	bl	8018e24 <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 801a73e:	2300      	movs	r3, #0
}
 801a740:	0018      	movs	r0, r3
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}
 801a746:	46c0      	nop			; (mov r8, r8)
 801a748:	200011ec 	.word	0x200011ec
 801a74c:	0801a35d 	.word	0x0801a35d

0801a750 <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a750:	b5b0      	push	{r4, r5, r7, lr}
 801a752:	b0b8      	sub	sp, #224	; 0xe0
 801a754:	af00      	add	r7, sp, #0
 801a756:	60f8      	str	r0, [r7, #12]
 801a758:	60b9      	str	r1, [r7, #8]
 801a75a:	603b      	str	r3, [r7, #0]
 801a75c:	1dfb      	adds	r3, r7, #7
 801a75e:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	2110      	movs	r1, #16
 801a764:	0018      	movs	r0, r3
 801a766:	f000 f8cd 	bl	801a904 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a76a:	24d0      	movs	r4, #208	; 0xd0
 801a76c:	193a      	adds	r2, r7, r4
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	0010      	movs	r0, r2
 801a772:	0019      	movs	r1, r3
 801a774:	2310      	movs	r3, #16
 801a776:	001a      	movs	r2, r3
 801a778:	f004 fcc4 	bl	801f104 <memcpy>
	bzero(ctx.Iv,16);
 801a77c:	2510      	movs	r5, #16
 801a77e:	197b      	adds	r3, r7, r5
 801a780:	33b0      	adds	r3, #176	; 0xb0
 801a782:	2110      	movs	r1, #16
 801a784:	0018      	movs	r0, r3
 801a786:	f004 fc8d 	bl	801f0a4 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a78a:	683a      	ldr	r2, [r7, #0]
 801a78c:	197b      	adds	r3, r7, r5
 801a78e:	0011      	movs	r1, r2
 801a790:	0018      	movs	r0, r3
 801a792:	f000 f9c5 	bl	801ab20 <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 801a796:	1939      	adds	r1, r7, r4
 801a798:	197b      	adds	r3, r7, r5
 801a79a:	2210      	movs	r2, #16
 801a79c:	0018      	movs	r0, r3
 801a79e:	f001 f8d8 	bl	801b952 <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	2110      	movs	r1, #16
 801a7a6:	0018      	movs	r0, r3
 801a7a8:	f000 f856 	bl	801a858 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a7ac:	68ba      	ldr	r2, [r7, #8]
 801a7ae:	193b      	adds	r3, r7, r4
 801a7b0:	0010      	movs	r0, r2
 801a7b2:	0019      	movs	r1, r3
 801a7b4:	2310      	movs	r3, #16
 801a7b6:	001a      	movs	r2, r3
 801a7b8:	f004 fca4 	bl	801f104 <memcpy>
	bzero(aesResult,16);
 801a7bc:	193b      	adds	r3, r7, r4
 801a7be:	2110      	movs	r1, #16
 801a7c0:	0018      	movs	r0, r3
 801a7c2:	f004 fc6f 	bl	801f0a4 <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 801a7c6:	197b      	adds	r3, r7, r5
 801a7c8:	21c0      	movs	r1, #192	; 0xc0
 801a7ca:	0018      	movs	r0, r3
 801a7cc:	f004 fc6a 	bl	801f0a4 <bzero>
}
 801a7d0:	46c0      	nop			; (mov r8, r8)
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	b038      	add	sp, #224	; 0xe0
 801a7d6:	bdb0      	pop	{r4, r5, r7, pc}

0801a7d8 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a7d8:	b5b0      	push	{r4, r5, r7, lr}
 801a7da:	b0b8      	sub	sp, #224	; 0xe0
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	60f8      	str	r0, [r7, #12]
 801a7e0:	60b9      	str	r1, [r7, #8]
 801a7e2:	603b      	str	r3, [r7, #0]
 801a7e4:	1dfb      	adds	r3, r7, #7
 801a7e6:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	2110      	movs	r1, #16
 801a7ec:	0018      	movs	r0, r3
 801a7ee:	f000 f889 	bl	801a904 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a7f2:	24d0      	movs	r4, #208	; 0xd0
 801a7f4:	193a      	adds	r2, r7, r4
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	0010      	movs	r0, r2
 801a7fa:	0019      	movs	r1, r3
 801a7fc:	2310      	movs	r3, #16
 801a7fe:	001a      	movs	r2, r3
 801a800:	f004 fc80 	bl	801f104 <memcpy>
	bzero(ctx.Iv,16);
 801a804:	2510      	movs	r5, #16
 801a806:	197b      	adds	r3, r7, r5
 801a808:	33b0      	adds	r3, #176	; 0xb0
 801a80a:	2110      	movs	r1, #16
 801a80c:	0018      	movs	r0, r3
 801a80e:	f004 fc49 	bl	801f0a4 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a812:	683a      	ldr	r2, [r7, #0]
 801a814:	197b      	adds	r3, r7, r5
 801a816:	0011      	movs	r1, r2
 801a818:	0018      	movs	r0, r3
 801a81a:	f000 f981 	bl	801ab20 <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 801a81e:	1939      	adds	r1, r7, r4
 801a820:	197b      	adds	r3, r7, r5
 801a822:	2210      	movs	r2, #16
 801a824:	0018      	movs	r0, r3
 801a826:	f001 f8c3 	bl	801b9b0 <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a82a:	683b      	ldr	r3, [r7, #0]
 801a82c:	2110      	movs	r1, #16
 801a82e:	0018      	movs	r0, r3
 801a830:	f000 f812 	bl	801a858 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a834:	68ba      	ldr	r2, [r7, #8]
 801a836:	193b      	adds	r3, r7, r4
 801a838:	0010      	movs	r0, r2
 801a83a:	0019      	movs	r1, r3
 801a83c:	2310      	movs	r3, #16
 801a83e:	001a      	movs	r2, r3
 801a840:	f004 fc60 	bl	801f104 <memcpy>
	bzero(aesResult,16);
 801a844:	193b      	adds	r3, r7, r4
 801a846:	2110      	movs	r1, #16
 801a848:	0018      	movs	r0, r3
 801a84a:	f004 fc2b 	bl	801f0a4 <bzero>
}
 801a84e:	46c0      	nop			; (mov r8, r8)
 801a850:	46bd      	mov	sp, r7
 801a852:	b038      	add	sp, #224	; 0xe0
 801a854:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a858 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 801a858:	b580      	push	{r7, lr}
 801a85a:	b084      	sub	sp, #16
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	2203      	movs	r2, #3
 801a866:	4013      	ands	r3, r2
 801a868:	2b00      	cmp	r3, #0
 801a86a:	dd06      	ble.n	801a87a <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	b29b      	uxth	r3, r3
 801a870:	4a23      	ldr	r2, [pc, #140]	; (801a900 <itsdk_encrypt_cifferKey+0xa8>)
 801a872:	0019      	movs	r1, r3
 801a874:	0010      	movs	r0, r2
 801a876:	f001 f977 	bl	801bb68 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a87a:	2300      	movs	r3, #0
 801a87c:	60fb      	str	r3, [r7, #12]
 801a87e:	e037      	b.n	801a8f0 <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	687a      	ldr	r2, [r7, #4]
 801a884:	18d3      	adds	r3, r2, r3
 801a886:	781a      	ldrb	r2, [r3, #0]
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	6879      	ldr	r1, [r7, #4]
 801a88c:	18cb      	adds	r3, r1, r3
 801a88e:	2159      	movs	r1, #89	; 0x59
 801a890:	4249      	negs	r1, r1
 801a892:	404a      	eors	r2, r1
 801a894:	b2d2      	uxtb	r2, r2
 801a896:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	3301      	adds	r3, #1
 801a89c:	687a      	ldr	r2, [r7, #4]
 801a89e:	18d3      	adds	r3, r2, r3
 801a8a0:	781a      	ldrb	r2, [r3, #0]
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	3301      	adds	r3, #1
 801a8a6:	6879      	ldr	r1, [r7, #4]
 801a8a8:	18cb      	adds	r3, r1, r3
 801a8aa:	2145      	movs	r1, #69	; 0x45
 801a8ac:	404a      	eors	r2, r1
 801a8ae:	b2d2      	uxtb	r2, r2
 801a8b0:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	3302      	adds	r3, #2
 801a8b6:	687a      	ldr	r2, [r7, #4]
 801a8b8:	18d3      	adds	r3, r2, r3
 801a8ba:	781a      	ldrb	r2, [r3, #0]
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	3302      	adds	r3, #2
 801a8c0:	6879      	ldr	r1, [r7, #4]
 801a8c2:	18cb      	adds	r3, r1, r3
 801a8c4:	2165      	movs	r1, #101	; 0x65
 801a8c6:	4249      	negs	r1, r1
 801a8c8:	404a      	eors	r2, r1
 801a8ca:	b2d2      	uxtb	r2, r2
 801a8cc:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	3303      	adds	r3, #3
 801a8d2:	687a      	ldr	r2, [r7, #4]
 801a8d4:	18d3      	adds	r3, r2, r3
 801a8d6:	781a      	ldrb	r2, [r3, #0]
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	3303      	adds	r3, #3
 801a8dc:	6879      	ldr	r1, [r7, #4]
 801a8de:	18cb      	adds	r3, r1, r3
 801a8e0:	213d      	movs	r1, #61	; 0x3d
 801a8e2:	4249      	negs	r1, r1
 801a8e4:	404a      	eors	r2, r1
 801a8e6:	b2d2      	uxtb	r2, r2
 801a8e8:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	3304      	adds	r3, #4
 801a8ee:	60fb      	str	r3, [r7, #12]
 801a8f0:	68fa      	ldr	r2, [r7, #12]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	429a      	cmp	r2, r3
 801a8f6:	dbc3      	blt.n	801a880 <itsdk_encrypt_cifferKey+0x28>
	}
}
 801a8f8:	46c0      	nop			; (mov r8, r8)
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	b004      	add	sp, #16
 801a8fe:	bd80      	pop	{r7, pc}
 801a900:	d0000020 	.word	0xd0000020

0801a904 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 801a904:	b580      	push	{r7, lr}
 801a906:	b082      	sub	sp, #8
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
 801a90c:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 801a90e:	683a      	ldr	r2, [r7, #0]
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	0011      	movs	r1, r2
 801a914:	0018      	movs	r0, r3
 801a916:	f7ff ff9f 	bl	801a858 <itsdk_encrypt_cifferKey>
}
 801a91a:	46c0      	nop			; (mov r8, r8)
 801a91c:	46bd      	mov	sp, r7
 801a91e:	b002      	add	sp, #8
 801a920:	bd80      	pop	{r7, pc}

0801a922 <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 801a922:	b580      	push	{r7, lr}
 801a924:	b082      	sub	sp, #8
 801a926:	af00      	add	r7, sp, #0
 801a928:	0002      	movs	r2, r0
 801a92a:	1dfb      	adds	r3, r7, #7
 801a92c:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 801a92e:	2300      	movs	r3, #0
}
 801a930:	0018      	movs	r0, r3
 801a932:	46bd      	mov	sp, r7
 801a934:	b002      	add	sp, #8
 801a936:	bd80      	pop	{r7, pc}

0801a938 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 801a938:	b590      	push	{r4, r7, lr}
 801a93a:	b089      	sub	sp, #36	; 0x24
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
 801a940:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 801a942:	2300      	movs	r3, #0
 801a944:	61fb      	str	r3, [r7, #28]
 801a946:	e030      	b.n	801a9aa <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 801a948:	69fb      	ldr	r3, [r7, #28]
 801a94a:	009b      	lsls	r3, r3, #2
 801a94c:	683a      	ldr	r2, [r7, #0]
 801a94e:	18d2      	adds	r2, r2, r3
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	6879      	ldr	r1, [r7, #4]
 801a956:	18cb      	adds	r3, r1, r3
 801a958:	7812      	ldrb	r2, [r2, #0]
 801a95a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 801a95c:	69fb      	ldr	r3, [r7, #28]
 801a95e:	009b      	lsls	r3, r3, #2
 801a960:	3301      	adds	r3, #1
 801a962:	683a      	ldr	r2, [r7, #0]
 801a964:	18d2      	adds	r2, r2, r3
 801a966:	69fb      	ldr	r3, [r7, #28]
 801a968:	009b      	lsls	r3, r3, #2
 801a96a:	3301      	adds	r3, #1
 801a96c:	6879      	ldr	r1, [r7, #4]
 801a96e:	18cb      	adds	r3, r1, r3
 801a970:	7812      	ldrb	r2, [r2, #0]
 801a972:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 801a974:	69fb      	ldr	r3, [r7, #28]
 801a976:	009b      	lsls	r3, r3, #2
 801a978:	3302      	adds	r3, #2
 801a97a:	683a      	ldr	r2, [r7, #0]
 801a97c:	18d2      	adds	r2, r2, r3
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	009b      	lsls	r3, r3, #2
 801a982:	3302      	adds	r3, #2
 801a984:	6879      	ldr	r1, [r7, #4]
 801a986:	18cb      	adds	r3, r1, r3
 801a988:	7812      	ldrb	r2, [r2, #0]
 801a98a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 801a98c:	69fb      	ldr	r3, [r7, #28]
 801a98e:	009b      	lsls	r3, r3, #2
 801a990:	3303      	adds	r3, #3
 801a992:	683a      	ldr	r2, [r7, #0]
 801a994:	18d2      	adds	r2, r2, r3
 801a996:	69fb      	ldr	r3, [r7, #28]
 801a998:	009b      	lsls	r3, r3, #2
 801a99a:	3303      	adds	r3, #3
 801a99c:	6879      	ldr	r1, [r7, #4]
 801a99e:	18cb      	adds	r3, r1, r3
 801a9a0:	7812      	ldrb	r2, [r2, #0]
 801a9a2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 801a9a4:	69fb      	ldr	r3, [r7, #28]
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	61fb      	str	r3, [r7, #28]
 801a9aa:	69fb      	ldr	r3, [r7, #28]
 801a9ac:	2b03      	cmp	r3, #3
 801a9ae:	d9cb      	bls.n	801a948 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801a9b0:	2304      	movs	r3, #4
 801a9b2:	61fb      	str	r3, [r7, #28]
 801a9b4:	e0a4      	b.n	801ab00 <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 801a9b6:	69fb      	ldr	r3, [r7, #28]
 801a9b8:	4a55      	ldr	r2, [pc, #340]	; (801ab10 <KeyExpansion+0x1d8>)
 801a9ba:	4694      	mov	ip, r2
 801a9bc:	4463      	add	r3, ip
 801a9be:	009b      	lsls	r3, r3, #2
 801a9c0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 801a9c2:	687a      	ldr	r2, [r7, #4]
 801a9c4:	69bb      	ldr	r3, [r7, #24]
 801a9c6:	18d3      	adds	r3, r2, r3
 801a9c8:	781a      	ldrb	r2, [r3, #0]
 801a9ca:	210c      	movs	r1, #12
 801a9cc:	187b      	adds	r3, r7, r1
 801a9ce:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 801a9d0:	69bb      	ldr	r3, [r7, #24]
 801a9d2:	3301      	adds	r3, #1
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	18d3      	adds	r3, r2, r3
 801a9d8:	781a      	ldrb	r2, [r3, #0]
 801a9da:	187b      	adds	r3, r7, r1
 801a9dc:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 801a9de:	69bb      	ldr	r3, [r7, #24]
 801a9e0:	3302      	adds	r3, #2
 801a9e2:	687a      	ldr	r2, [r7, #4]
 801a9e4:	18d3      	adds	r3, r2, r3
 801a9e6:	781a      	ldrb	r2, [r3, #0]
 801a9e8:	187b      	adds	r3, r7, r1
 801a9ea:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 801a9ec:	69bb      	ldr	r3, [r7, #24]
 801a9ee:	3303      	adds	r3, #3
 801a9f0:	687a      	ldr	r2, [r7, #4]
 801a9f2:	18d3      	adds	r3, r2, r3
 801a9f4:	781a      	ldrb	r2, [r3, #0]
 801a9f6:	187b      	adds	r3, r7, r1
 801a9f8:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 801a9fa:	69fb      	ldr	r3, [r7, #28]
 801a9fc:	2203      	movs	r2, #3
 801a9fe:	4013      	ands	r3, r2
 801aa00:	d13b      	bne.n	801aa7a <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 801aa02:	2117      	movs	r1, #23
 801aa04:	187b      	adds	r3, r7, r1
 801aa06:	200c      	movs	r0, #12
 801aa08:	183a      	adds	r2, r7, r0
 801aa0a:	7812      	ldrb	r2, [r2, #0]
 801aa0c:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 801aa0e:	183b      	adds	r3, r7, r0
 801aa10:	785a      	ldrb	r2, [r3, #1]
 801aa12:	183b      	adds	r3, r7, r0
 801aa14:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 801aa16:	183b      	adds	r3, r7, r0
 801aa18:	789a      	ldrb	r2, [r3, #2]
 801aa1a:	183b      	adds	r3, r7, r0
 801aa1c:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 801aa1e:	183b      	adds	r3, r7, r0
 801aa20:	78da      	ldrb	r2, [r3, #3]
 801aa22:	183b      	adds	r3, r7, r0
 801aa24:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 801aa26:	183b      	adds	r3, r7, r0
 801aa28:	187a      	adds	r2, r7, r1
 801aa2a:	7812      	ldrb	r2, [r2, #0]
 801aa2c:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 801aa2e:	183b      	adds	r3, r7, r0
 801aa30:	781b      	ldrb	r3, [r3, #0]
 801aa32:	001a      	movs	r2, r3
 801aa34:	4b37      	ldr	r3, [pc, #220]	; (801ab14 <KeyExpansion+0x1dc>)
 801aa36:	5c9a      	ldrb	r2, [r3, r2]
 801aa38:	183b      	adds	r3, r7, r0
 801aa3a:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 801aa3c:	183b      	adds	r3, r7, r0
 801aa3e:	785b      	ldrb	r3, [r3, #1]
 801aa40:	001a      	movs	r2, r3
 801aa42:	4b34      	ldr	r3, [pc, #208]	; (801ab14 <KeyExpansion+0x1dc>)
 801aa44:	5c9a      	ldrb	r2, [r3, r2]
 801aa46:	183b      	adds	r3, r7, r0
 801aa48:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 801aa4a:	183b      	adds	r3, r7, r0
 801aa4c:	789b      	ldrb	r3, [r3, #2]
 801aa4e:	001a      	movs	r2, r3
 801aa50:	4b30      	ldr	r3, [pc, #192]	; (801ab14 <KeyExpansion+0x1dc>)
 801aa52:	5c9a      	ldrb	r2, [r3, r2]
 801aa54:	183b      	adds	r3, r7, r0
 801aa56:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 801aa58:	183b      	adds	r3, r7, r0
 801aa5a:	78db      	ldrb	r3, [r3, #3]
 801aa5c:	001a      	movs	r2, r3
 801aa5e:	4b2d      	ldr	r3, [pc, #180]	; (801ab14 <KeyExpansion+0x1dc>)
 801aa60:	5c9a      	ldrb	r2, [r3, r2]
 801aa62:	183b      	adds	r3, r7, r0
 801aa64:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 801aa66:	183b      	adds	r3, r7, r0
 801aa68:	781a      	ldrb	r2, [r3, #0]
 801aa6a:	69fb      	ldr	r3, [r7, #28]
 801aa6c:	089b      	lsrs	r3, r3, #2
 801aa6e:	492a      	ldr	r1, [pc, #168]	; (801ab18 <KeyExpansion+0x1e0>)
 801aa70:	5ccb      	ldrb	r3, [r1, r3]
 801aa72:	4053      	eors	r3, r2
 801aa74:	b2da      	uxtb	r2, r3
 801aa76:	183b      	adds	r3, r7, r0
 801aa78:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 801aa7a:	69fb      	ldr	r3, [r7, #28]
 801aa7c:	009b      	lsls	r3, r3, #2
 801aa7e:	613b      	str	r3, [r7, #16]
 801aa80:	69fb      	ldr	r3, [r7, #28]
 801aa82:	4a26      	ldr	r2, [pc, #152]	; (801ab1c <KeyExpansion+0x1e4>)
 801aa84:	4694      	mov	ip, r2
 801aa86:	4463      	add	r3, ip
 801aa88:	009b      	lsls	r3, r3, #2
 801aa8a:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 801aa8c:	687a      	ldr	r2, [r7, #4]
 801aa8e:	69bb      	ldr	r3, [r7, #24]
 801aa90:	18d3      	adds	r3, r2, r3
 801aa92:	7819      	ldrb	r1, [r3, #0]
 801aa94:	240c      	movs	r4, #12
 801aa96:	193b      	adds	r3, r7, r4
 801aa98:	781a      	ldrb	r2, [r3, #0]
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	18c3      	adds	r3, r0, r3
 801aaa0:	404a      	eors	r2, r1
 801aaa2:	b2d2      	uxtb	r2, r2
 801aaa4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 801aaa6:	69bb      	ldr	r3, [r7, #24]
 801aaa8:	3301      	adds	r3, #1
 801aaaa:	687a      	ldr	r2, [r7, #4]
 801aaac:	18d3      	adds	r3, r2, r3
 801aaae:	7819      	ldrb	r1, [r3, #0]
 801aab0:	193b      	adds	r3, r7, r4
 801aab2:	785a      	ldrb	r2, [r3, #1]
 801aab4:	693b      	ldr	r3, [r7, #16]
 801aab6:	3301      	adds	r3, #1
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	18c3      	adds	r3, r0, r3
 801aabc:	404a      	eors	r2, r1
 801aabe:	b2d2      	uxtb	r2, r2
 801aac0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 801aac2:	69bb      	ldr	r3, [r7, #24]
 801aac4:	3302      	adds	r3, #2
 801aac6:	687a      	ldr	r2, [r7, #4]
 801aac8:	18d3      	adds	r3, r2, r3
 801aaca:	7819      	ldrb	r1, [r3, #0]
 801aacc:	193b      	adds	r3, r7, r4
 801aace:	789a      	ldrb	r2, [r3, #2]
 801aad0:	693b      	ldr	r3, [r7, #16]
 801aad2:	3302      	adds	r3, #2
 801aad4:	6878      	ldr	r0, [r7, #4]
 801aad6:	18c3      	adds	r3, r0, r3
 801aad8:	404a      	eors	r2, r1
 801aada:	b2d2      	uxtb	r2, r2
 801aadc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 801aade:	69bb      	ldr	r3, [r7, #24]
 801aae0:	3303      	adds	r3, #3
 801aae2:	687a      	ldr	r2, [r7, #4]
 801aae4:	18d3      	adds	r3, r2, r3
 801aae6:	7819      	ldrb	r1, [r3, #0]
 801aae8:	193b      	adds	r3, r7, r4
 801aaea:	78da      	ldrb	r2, [r3, #3]
 801aaec:	693b      	ldr	r3, [r7, #16]
 801aaee:	3303      	adds	r3, #3
 801aaf0:	6878      	ldr	r0, [r7, #4]
 801aaf2:	18c3      	adds	r3, r0, r3
 801aaf4:	404a      	eors	r2, r1
 801aaf6:	b2d2      	uxtb	r2, r2
 801aaf8:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801aafa:	69fb      	ldr	r3, [r7, #28]
 801aafc:	3301      	adds	r3, #1
 801aafe:	61fb      	str	r3, [r7, #28]
 801ab00:	69fb      	ldr	r3, [r7, #28]
 801ab02:	2b2b      	cmp	r3, #43	; 0x2b
 801ab04:	d800      	bhi.n	801ab08 <KeyExpansion+0x1d0>
 801ab06:	e756      	b.n	801a9b6 <KeyExpansion+0x7e>
  }
}
 801ab08:	46c0      	nop			; (mov r8, r8)
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	b009      	add	sp, #36	; 0x24
 801ab0e:	bd90      	pop	{r4, r7, pc}
 801ab10:	3fffffff 	.word	0x3fffffff
 801ab14:	08022008 	.word	0x08022008
 801ab18:	08022208 	.word	0x08022208
 801ab1c:	3ffffffc 	.word	0x3ffffffc

0801ab20 <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b082      	sub	sp, #8
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	683a      	ldr	r2, [r7, #0]
 801ab2e:	0011      	movs	r1, r2
 801ab30:	0018      	movs	r0, r3
 801ab32:	f7ff ff01 	bl	801a938 <KeyExpansion>
}
 801ab36:	46c0      	nop			; (mov r8, r8)
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	b002      	add	sp, #8
 801ab3c:	bd80      	pop	{r7, pc}

0801ab3e <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 801ab3e:	b5b0      	push	{r4, r5, r7, lr}
 801ab40:	b086      	sub	sp, #24
 801ab42:	af00      	add	r7, sp, #0
 801ab44:	60b9      	str	r1, [r7, #8]
 801ab46:	607a      	str	r2, [r7, #4]
 801ab48:	230f      	movs	r3, #15
 801ab4a:	18fb      	adds	r3, r7, r3
 801ab4c:	1c02      	adds	r2, r0, #0
 801ab4e:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 801ab50:	2317      	movs	r3, #23
 801ab52:	18fb      	adds	r3, r7, r3
 801ab54:	2200      	movs	r2, #0
 801ab56:	701a      	strb	r2, [r3, #0]
 801ab58:	e038      	b.n	801abcc <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 801ab5a:	2316      	movs	r3, #22
 801ab5c:	18fb      	adds	r3, r7, r3
 801ab5e:	2200      	movs	r2, #0
 801ab60:	701a      	strb	r2, [r3, #0]
 801ab62:	e028      	b.n	801abb6 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 801ab64:	2517      	movs	r5, #23
 801ab66:	197b      	adds	r3, r7, r5
 801ab68:	781a      	ldrb	r2, [r3, #0]
 801ab6a:	2416      	movs	r4, #22
 801ab6c:	193b      	adds	r3, r7, r4
 801ab6e:	781b      	ldrb	r3, [r3, #0]
 801ab70:	68b9      	ldr	r1, [r7, #8]
 801ab72:	0092      	lsls	r2, r2, #2
 801ab74:	188a      	adds	r2, r1, r2
 801ab76:	5cd0      	ldrb	r0, [r2, r3]
 801ab78:	230f      	movs	r3, #15
 801ab7a:	18fb      	adds	r3, r7, r3
 801ab7c:	781b      	ldrb	r3, [r3, #0]
 801ab7e:	009a      	lsls	r2, r3, #2
 801ab80:	197b      	adds	r3, r7, r5
 801ab82:	781b      	ldrb	r3, [r3, #0]
 801ab84:	18d3      	adds	r3, r2, r3
 801ab86:	009a      	lsls	r2, r3, #2
 801ab88:	193b      	adds	r3, r7, r4
 801ab8a:	781b      	ldrb	r3, [r3, #0]
 801ab8c:	18d3      	adds	r3, r2, r3
 801ab8e:	001a      	movs	r2, r3
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	189b      	adds	r3, r3, r2
 801ab94:	7819      	ldrb	r1, [r3, #0]
 801ab96:	197b      	adds	r3, r7, r5
 801ab98:	781a      	ldrb	r2, [r3, #0]
 801ab9a:	193b      	adds	r3, r7, r4
 801ab9c:	781b      	ldrb	r3, [r3, #0]
 801ab9e:	4041      	eors	r1, r0
 801aba0:	b2c8      	uxtb	r0, r1
 801aba2:	68b9      	ldr	r1, [r7, #8]
 801aba4:	0092      	lsls	r2, r2, #2
 801aba6:	188a      	adds	r2, r1, r2
 801aba8:	1c01      	adds	r1, r0, #0
 801abaa:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801abac:	193b      	adds	r3, r7, r4
 801abae:	193a      	adds	r2, r7, r4
 801abb0:	7812      	ldrb	r2, [r2, #0]
 801abb2:	3201      	adds	r2, #1
 801abb4:	701a      	strb	r2, [r3, #0]
 801abb6:	2316      	movs	r3, #22
 801abb8:	18fb      	adds	r3, r7, r3
 801abba:	781b      	ldrb	r3, [r3, #0]
 801abbc:	2b03      	cmp	r3, #3
 801abbe:	d9d1      	bls.n	801ab64 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 801abc0:	2217      	movs	r2, #23
 801abc2:	18bb      	adds	r3, r7, r2
 801abc4:	18ba      	adds	r2, r7, r2
 801abc6:	7812      	ldrb	r2, [r2, #0]
 801abc8:	3201      	adds	r2, #1
 801abca:	701a      	strb	r2, [r3, #0]
 801abcc:	2317      	movs	r3, #23
 801abce:	18fb      	adds	r3, r7, r3
 801abd0:	781b      	ldrb	r3, [r3, #0]
 801abd2:	2b03      	cmp	r3, #3
 801abd4:	d9c1      	bls.n	801ab5a <AddRoundKey+0x1c>
    }
  }
}
 801abd6:	46c0      	nop			; (mov r8, r8)
 801abd8:	46bd      	mov	sp, r7
 801abda:	b006      	add	sp, #24
 801abdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801abe0 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 801abe0:	b5b0      	push	{r4, r5, r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801abe8:	230f      	movs	r3, #15
 801abea:	18fb      	adds	r3, r7, r3
 801abec:	2200      	movs	r2, #0
 801abee:	701a      	strb	r2, [r3, #0]
 801abf0:	e02a      	b.n	801ac48 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801abf2:	230e      	movs	r3, #14
 801abf4:	18fb      	adds	r3, r7, r3
 801abf6:	2200      	movs	r2, #0
 801abf8:	701a      	strb	r2, [r3, #0]
 801abfa:	e01a      	b.n	801ac32 <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 801abfc:	240e      	movs	r4, #14
 801abfe:	193b      	adds	r3, r7, r4
 801ac00:	781a      	ldrb	r2, [r3, #0]
 801ac02:	250f      	movs	r5, #15
 801ac04:	197b      	adds	r3, r7, r5
 801ac06:	781b      	ldrb	r3, [r3, #0]
 801ac08:	6879      	ldr	r1, [r7, #4]
 801ac0a:	0092      	lsls	r2, r2, #2
 801ac0c:	188a      	adds	r2, r1, r2
 801ac0e:	5cd3      	ldrb	r3, [r2, r3]
 801ac10:	0018      	movs	r0, r3
 801ac12:	193b      	adds	r3, r7, r4
 801ac14:	781a      	ldrb	r2, [r3, #0]
 801ac16:	197b      	adds	r3, r7, r5
 801ac18:	781b      	ldrb	r3, [r3, #0]
 801ac1a:	4910      	ldr	r1, [pc, #64]	; (801ac5c <SubBytes+0x7c>)
 801ac1c:	5c08      	ldrb	r0, [r1, r0]
 801ac1e:	6879      	ldr	r1, [r7, #4]
 801ac20:	0092      	lsls	r2, r2, #2
 801ac22:	188a      	adds	r2, r1, r2
 801ac24:	1c01      	adds	r1, r0, #0
 801ac26:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801ac28:	193b      	adds	r3, r7, r4
 801ac2a:	193a      	adds	r2, r7, r4
 801ac2c:	7812      	ldrb	r2, [r2, #0]
 801ac2e:	3201      	adds	r2, #1
 801ac30:	701a      	strb	r2, [r3, #0]
 801ac32:	230e      	movs	r3, #14
 801ac34:	18fb      	adds	r3, r7, r3
 801ac36:	781b      	ldrb	r3, [r3, #0]
 801ac38:	2b03      	cmp	r3, #3
 801ac3a:	d9df      	bls.n	801abfc <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801ac3c:	220f      	movs	r2, #15
 801ac3e:	18bb      	adds	r3, r7, r2
 801ac40:	18ba      	adds	r2, r7, r2
 801ac42:	7812      	ldrb	r2, [r2, #0]
 801ac44:	3201      	adds	r2, #1
 801ac46:	701a      	strb	r2, [r3, #0]
 801ac48:	230f      	movs	r3, #15
 801ac4a:	18fb      	adds	r3, r7, r3
 801ac4c:	781b      	ldrb	r3, [r3, #0]
 801ac4e:	2b03      	cmp	r3, #3
 801ac50:	d9cf      	bls.n	801abf2 <SubBytes+0x12>
    }
  }
}
 801ac52:	46c0      	nop			; (mov r8, r8)
 801ac54:	46bd      	mov	sp, r7
 801ac56:	b004      	add	sp, #16
 801ac58:	bdb0      	pop	{r4, r5, r7, pc}
 801ac5a:	46c0      	nop			; (mov r8, r8)
 801ac5c:	08022008 	.word	0x08022008

0801ac60 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b084      	sub	sp, #16
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 801ac68:	210f      	movs	r1, #15
 801ac6a:	187b      	adds	r3, r7, r1
 801ac6c:	687a      	ldr	r2, [r7, #4]
 801ac6e:	7852      	ldrb	r2, [r2, #1]
 801ac70:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	795a      	ldrb	r2, [r3, #5]
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	7a5a      	ldrb	r2, [r3, #9]
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	7b5a      	ldrb	r2, [r3, #13]
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	187a      	adds	r2, r7, r1
 801ac8e:	7812      	ldrb	r2, [r2, #0]
 801ac90:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 801ac92:	187b      	adds	r3, r7, r1
 801ac94:	687a      	ldr	r2, [r7, #4]
 801ac96:	7892      	ldrb	r2, [r2, #2]
 801ac98:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	7a9a      	ldrb	r2, [r3, #10]
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	187a      	adds	r2, r7, r1
 801aca6:	7812      	ldrb	r2, [r2, #0]
 801aca8:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 801acaa:	187b      	adds	r3, r7, r1
 801acac:	687a      	ldr	r2, [r7, #4]
 801acae:	7992      	ldrb	r2, [r2, #6]
 801acb0:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	7b9a      	ldrb	r2, [r3, #14]
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	187a      	adds	r2, r7, r1
 801acbe:	7812      	ldrb	r2, [r2, #0]
 801acc0:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 801acc2:	187b      	adds	r3, r7, r1
 801acc4:	687a      	ldr	r2, [r7, #4]
 801acc6:	78d2      	ldrb	r2, [r2, #3]
 801acc8:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	7bda      	ldrb	r2, [r3, #15]
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	7ada      	ldrb	r2, [r3, #11]
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	79da      	ldrb	r2, [r3, #7]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	187a      	adds	r2, r7, r1
 801ace6:	7812      	ldrb	r2, [r2, #0]
 801ace8:	71da      	strb	r2, [r3, #7]
}
 801acea:	46c0      	nop			; (mov r8, r8)
 801acec:	46bd      	mov	sp, r7
 801acee:	b004      	add	sp, #16
 801acf0:	bd80      	pop	{r7, pc}

0801acf2 <xtime>:

static uint8_t xtime(uint8_t x)
{
 801acf2:	b580      	push	{r7, lr}
 801acf4:	b082      	sub	sp, #8
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	0002      	movs	r2, r0
 801acfa:	1dfb      	adds	r3, r7, #7
 801acfc:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 801acfe:	1dfb      	adds	r3, r7, #7
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	005b      	lsls	r3, r3, #1
 801ad04:	b25a      	sxtb	r2, r3
 801ad06:	1dfb      	adds	r3, r7, #7
 801ad08:	781b      	ldrb	r3, [r3, #0]
 801ad0a:	09db      	lsrs	r3, r3, #7
 801ad0c:	b2db      	uxtb	r3, r3
 801ad0e:	1c19      	adds	r1, r3, #0
 801ad10:	1c0b      	adds	r3, r1, #0
 801ad12:	18db      	adds	r3, r3, r3
 801ad14:	185b      	adds	r3, r3, r1
 801ad16:	1c19      	adds	r1, r3, #0
 801ad18:	00c8      	lsls	r0, r1, #3
 801ad1a:	1c19      	adds	r1, r3, #0
 801ad1c:	1c03      	adds	r3, r0, #0
 801ad1e:	18cb      	adds	r3, r1, r3
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	b25b      	sxtb	r3, r3
 801ad24:	4053      	eors	r3, r2
 801ad26:	b25b      	sxtb	r3, r3
 801ad28:	b2db      	uxtb	r3, r3
}
 801ad2a:	0018      	movs	r0, r3
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	b002      	add	sp, #8
 801ad30:	bd80      	pop	{r7, pc}

0801ad32 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 801ad32:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad34:	b085      	sub	sp, #20
 801ad36:	af00      	add	r7, sp, #0
 801ad38:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 801ad3a:	230f      	movs	r3, #15
 801ad3c:	18fb      	adds	r3, r7, r3
 801ad3e:	2200      	movs	r2, #0
 801ad40:	701a      	strb	r2, [r3, #0]
 801ad42:	e0f0      	b.n	801af26 <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 801ad44:	250f      	movs	r5, #15
 801ad46:	197b      	adds	r3, r7, r5
 801ad48:	7819      	ldrb	r1, [r3, #0]
 801ad4a:	230e      	movs	r3, #14
 801ad4c:	18fb      	adds	r3, r7, r3
 801ad4e:	687a      	ldr	r2, [r7, #4]
 801ad50:	0089      	lsls	r1, r1, #2
 801ad52:	5c8a      	ldrb	r2, [r1, r2]
 801ad54:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 801ad56:	197b      	adds	r3, r7, r5
 801ad58:	781a      	ldrb	r2, [r3, #0]
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	0092      	lsls	r2, r2, #2
 801ad5e:	5cd2      	ldrb	r2, [r2, r3]
 801ad60:	197b      	adds	r3, r7, r5
 801ad62:	781b      	ldrb	r3, [r3, #0]
 801ad64:	6879      	ldr	r1, [r7, #4]
 801ad66:	009b      	lsls	r3, r3, #2
 801ad68:	18cb      	adds	r3, r1, r3
 801ad6a:	3301      	adds	r3, #1
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	4053      	eors	r3, r2
 801ad70:	b2da      	uxtb	r2, r3
 801ad72:	197b      	adds	r3, r7, r5
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	6879      	ldr	r1, [r7, #4]
 801ad78:	009b      	lsls	r3, r3, #2
 801ad7a:	18cb      	adds	r3, r1, r3
 801ad7c:	3302      	adds	r3, #2
 801ad7e:	781b      	ldrb	r3, [r3, #0]
 801ad80:	4053      	eors	r3, r2
 801ad82:	b2d9      	uxtb	r1, r3
 801ad84:	197b      	adds	r3, r7, r5
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	687a      	ldr	r2, [r7, #4]
 801ad8a:	009b      	lsls	r3, r3, #2
 801ad8c:	18d3      	adds	r3, r2, r3
 801ad8e:	3303      	adds	r3, #3
 801ad90:	781a      	ldrb	r2, [r3, #0]
 801ad92:	230d      	movs	r3, #13
 801ad94:	18fb      	adds	r3, r7, r3
 801ad96:	404a      	eors	r2, r1
 801ad98:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 801ad9a:	197b      	adds	r3, r7, r5
 801ad9c:	781a      	ldrb	r2, [r3, #0]
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	0092      	lsls	r2, r2, #2
 801ada2:	5cd1      	ldrb	r1, [r2, r3]
 801ada4:	197b      	adds	r3, r7, r5
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	009b      	lsls	r3, r3, #2
 801adac:	18d3      	adds	r3, r2, r3
 801adae:	3301      	adds	r3, #1
 801adb0:	781a      	ldrb	r2, [r3, #0]
 801adb2:	200c      	movs	r0, #12
 801adb4:	183b      	adds	r3, r7, r0
 801adb6:	404a      	eors	r2, r1
 801adb8:	701a      	strb	r2, [r3, #0]
 801adba:	183c      	adds	r4, r7, r0
 801adbc:	0006      	movs	r6, r0
 801adbe:	183b      	adds	r3, r7, r0
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	0018      	movs	r0, r3
 801adc4:	f7ff ff95 	bl	801acf2 <xtime>
 801adc8:	0003      	movs	r3, r0
 801adca:	7023      	strb	r3, [r4, #0]
 801adcc:	197b      	adds	r3, r7, r5
 801adce:	781a      	ldrb	r2, [r3, #0]
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	0092      	lsls	r2, r2, #2
 801add4:	5cd1      	ldrb	r1, [r2, r3]
 801add6:	0030      	movs	r0, r6
 801add8:	183a      	adds	r2, r7, r0
 801adda:	230d      	movs	r3, #13
 801addc:	18fb      	adds	r3, r7, r3
 801adde:	7812      	ldrb	r2, [r2, #0]
 801ade0:	781b      	ldrb	r3, [r3, #0]
 801ade2:	4053      	eors	r3, r2
 801ade4:	b2db      	uxtb	r3, r3
 801ade6:	197a      	adds	r2, r7, r5
 801ade8:	7812      	ldrb	r2, [r2, #0]
 801adea:	404b      	eors	r3, r1
 801adec:	b2d9      	uxtb	r1, r3
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	0092      	lsls	r2, r2, #2
 801adf2:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 801adf4:	197b      	adds	r3, r7, r5
 801adf6:	781b      	ldrb	r3, [r3, #0]
 801adf8:	687a      	ldr	r2, [r7, #4]
 801adfa:	009b      	lsls	r3, r3, #2
 801adfc:	18d3      	adds	r3, r2, r3
 801adfe:	3301      	adds	r3, #1
 801ae00:	7819      	ldrb	r1, [r3, #0]
 801ae02:	197b      	adds	r3, r7, r5
 801ae04:	781b      	ldrb	r3, [r3, #0]
 801ae06:	687a      	ldr	r2, [r7, #4]
 801ae08:	009b      	lsls	r3, r3, #2
 801ae0a:	18d3      	adds	r3, r2, r3
 801ae0c:	3302      	adds	r3, #2
 801ae0e:	781a      	ldrb	r2, [r3, #0]
 801ae10:	183b      	adds	r3, r7, r0
 801ae12:	404a      	eors	r2, r1
 801ae14:	701a      	strb	r2, [r3, #0]
 801ae16:	183c      	adds	r4, r7, r0
 801ae18:	0006      	movs	r6, r0
 801ae1a:	183b      	adds	r3, r7, r0
 801ae1c:	781b      	ldrb	r3, [r3, #0]
 801ae1e:	0018      	movs	r0, r3
 801ae20:	f7ff ff67 	bl	801acf2 <xtime>
 801ae24:	0003      	movs	r3, r0
 801ae26:	7023      	strb	r3, [r4, #0]
 801ae28:	197b      	adds	r3, r7, r5
 801ae2a:	781b      	ldrb	r3, [r3, #0]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	009b      	lsls	r3, r3, #2
 801ae30:	18d3      	adds	r3, r2, r3
 801ae32:	3301      	adds	r3, #1
 801ae34:	7819      	ldrb	r1, [r3, #0]
 801ae36:	0030      	movs	r0, r6
 801ae38:	183a      	adds	r2, r7, r0
 801ae3a:	230d      	movs	r3, #13
 801ae3c:	18fb      	adds	r3, r7, r3
 801ae3e:	7812      	ldrb	r2, [r2, #0]
 801ae40:	781b      	ldrb	r3, [r3, #0]
 801ae42:	4053      	eors	r3, r2
 801ae44:	b2da      	uxtb	r2, r3
 801ae46:	197b      	adds	r3, r7, r5
 801ae48:	781b      	ldrb	r3, [r3, #0]
 801ae4a:	404a      	eors	r2, r1
 801ae4c:	b2d1      	uxtb	r1, r2
 801ae4e:	687a      	ldr	r2, [r7, #4]
 801ae50:	009b      	lsls	r3, r3, #2
 801ae52:	18d3      	adds	r3, r2, r3
 801ae54:	3301      	adds	r3, #1
 801ae56:	1c0a      	adds	r2, r1, #0
 801ae58:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 801ae5a:	197b      	adds	r3, r7, r5
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	687a      	ldr	r2, [r7, #4]
 801ae60:	009b      	lsls	r3, r3, #2
 801ae62:	18d3      	adds	r3, r2, r3
 801ae64:	3302      	adds	r3, #2
 801ae66:	7819      	ldrb	r1, [r3, #0]
 801ae68:	197b      	adds	r3, r7, r5
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	687a      	ldr	r2, [r7, #4]
 801ae6e:	009b      	lsls	r3, r3, #2
 801ae70:	18d3      	adds	r3, r2, r3
 801ae72:	3303      	adds	r3, #3
 801ae74:	781a      	ldrb	r2, [r3, #0]
 801ae76:	183b      	adds	r3, r7, r0
 801ae78:	404a      	eors	r2, r1
 801ae7a:	701a      	strb	r2, [r3, #0]
 801ae7c:	183c      	adds	r4, r7, r0
 801ae7e:	0006      	movs	r6, r0
 801ae80:	183b      	adds	r3, r7, r0
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	0018      	movs	r0, r3
 801ae86:	f7ff ff34 	bl	801acf2 <xtime>
 801ae8a:	0003      	movs	r3, r0
 801ae8c:	7023      	strb	r3, [r4, #0]
 801ae8e:	197b      	adds	r3, r7, r5
 801ae90:	781b      	ldrb	r3, [r3, #0]
 801ae92:	687a      	ldr	r2, [r7, #4]
 801ae94:	009b      	lsls	r3, r3, #2
 801ae96:	18d3      	adds	r3, r2, r3
 801ae98:	3302      	adds	r3, #2
 801ae9a:	7819      	ldrb	r1, [r3, #0]
 801ae9c:	0030      	movs	r0, r6
 801ae9e:	183a      	adds	r2, r7, r0
 801aea0:	230d      	movs	r3, #13
 801aea2:	18fb      	adds	r3, r7, r3
 801aea4:	7812      	ldrb	r2, [r2, #0]
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	4053      	eors	r3, r2
 801aeaa:	b2da      	uxtb	r2, r3
 801aeac:	197b      	adds	r3, r7, r5
 801aeae:	781b      	ldrb	r3, [r3, #0]
 801aeb0:	404a      	eors	r2, r1
 801aeb2:	b2d1      	uxtb	r1, r2
 801aeb4:	687a      	ldr	r2, [r7, #4]
 801aeb6:	009b      	lsls	r3, r3, #2
 801aeb8:	18d3      	adds	r3, r2, r3
 801aeba:	3302      	adds	r3, #2
 801aebc:	1c0a      	adds	r2, r1, #0
 801aebe:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 801aec0:	197b      	adds	r3, r7, r5
 801aec2:	781b      	ldrb	r3, [r3, #0]
 801aec4:	687a      	ldr	r2, [r7, #4]
 801aec6:	009b      	lsls	r3, r3, #2
 801aec8:	18d3      	adds	r3, r2, r3
 801aeca:	3303      	adds	r3, #3
 801aecc:	7819      	ldrb	r1, [r3, #0]
 801aece:	183b      	adds	r3, r7, r0
 801aed0:	220e      	movs	r2, #14
 801aed2:	18ba      	adds	r2, r7, r2
 801aed4:	7812      	ldrb	r2, [r2, #0]
 801aed6:	404a      	eors	r2, r1
 801aed8:	701a      	strb	r2, [r3, #0]
 801aeda:	183c      	adds	r4, r7, r0
 801aedc:	0006      	movs	r6, r0
 801aede:	183b      	adds	r3, r7, r0
 801aee0:	781b      	ldrb	r3, [r3, #0]
 801aee2:	0018      	movs	r0, r3
 801aee4:	f7ff ff05 	bl	801acf2 <xtime>
 801aee8:	0003      	movs	r3, r0
 801aeea:	7023      	strb	r3, [r4, #0]
 801aeec:	197b      	adds	r3, r7, r5
 801aeee:	781b      	ldrb	r3, [r3, #0]
 801aef0:	687a      	ldr	r2, [r7, #4]
 801aef2:	009b      	lsls	r3, r3, #2
 801aef4:	18d3      	adds	r3, r2, r3
 801aef6:	3303      	adds	r3, #3
 801aef8:	7819      	ldrb	r1, [r3, #0]
 801aefa:	19ba      	adds	r2, r7, r6
 801aefc:	230d      	movs	r3, #13
 801aefe:	18fb      	adds	r3, r7, r3
 801af00:	7812      	ldrb	r2, [r2, #0]
 801af02:	781b      	ldrb	r3, [r3, #0]
 801af04:	4053      	eors	r3, r2
 801af06:	b2da      	uxtb	r2, r3
 801af08:	197b      	adds	r3, r7, r5
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	404a      	eors	r2, r1
 801af0e:	b2d1      	uxtb	r1, r2
 801af10:	687a      	ldr	r2, [r7, #4]
 801af12:	009b      	lsls	r3, r3, #2
 801af14:	18d3      	adds	r3, r2, r3
 801af16:	3303      	adds	r3, #3
 801af18:	1c0a      	adds	r2, r1, #0
 801af1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801af1c:	197b      	adds	r3, r7, r5
 801af1e:	197a      	adds	r2, r7, r5
 801af20:	7812      	ldrb	r2, [r2, #0]
 801af22:	3201      	adds	r2, #1
 801af24:	701a      	strb	r2, [r3, #0]
 801af26:	230f      	movs	r3, #15
 801af28:	18fb      	adds	r3, r7, r3
 801af2a:	781b      	ldrb	r3, [r3, #0]
 801af2c:	2b03      	cmp	r3, #3
 801af2e:	d800      	bhi.n	801af32 <MixColumns+0x200>
 801af30:	e708      	b.n	801ad44 <MixColumns+0x12>
  }
}
 801af32:	46c0      	nop			; (mov r8, r8)
 801af34:	46bd      	mov	sp, r7
 801af36:	b005      	add	sp, #20
 801af38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801af3a <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 801af3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af3c:	b085      	sub	sp, #20
 801af3e:	af00      	add	r7, sp, #0
 801af40:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 801af42:	2300      	movs	r3, #0
 801af44:	60fb      	str	r3, [r7, #12]
 801af46:	e3c3      	b.n	801b6d0 <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 801af48:	260b      	movs	r6, #11
 801af4a:	19bb      	adds	r3, r7, r6
 801af4c:	687a      	ldr	r2, [r7, #4]
 801af4e:	68f9      	ldr	r1, [r7, #12]
 801af50:	0089      	lsls	r1, r1, #2
 801af52:	5c8a      	ldrb	r2, [r1, r2]
 801af54:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 801af56:	250a      	movs	r5, #10
 801af58:	197b      	adds	r3, r7, r5
 801af5a:	6879      	ldr	r1, [r7, #4]
 801af5c:	68fa      	ldr	r2, [r7, #12]
 801af5e:	0092      	lsls	r2, r2, #2
 801af60:	188a      	adds	r2, r1, r2
 801af62:	3201      	adds	r2, #1
 801af64:	7812      	ldrb	r2, [r2, #0]
 801af66:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 801af68:	2409      	movs	r4, #9
 801af6a:	193b      	adds	r3, r7, r4
 801af6c:	6879      	ldr	r1, [r7, #4]
 801af6e:	68fa      	ldr	r2, [r7, #12]
 801af70:	0092      	lsls	r2, r2, #2
 801af72:	188a      	adds	r2, r1, r2
 801af74:	3202      	adds	r2, #2
 801af76:	7812      	ldrb	r2, [r2, #0]
 801af78:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 801af7a:	2308      	movs	r3, #8
 801af7c:	18fb      	adds	r3, r7, r3
 801af7e:	6879      	ldr	r1, [r7, #4]
 801af80:	68fa      	ldr	r2, [r7, #12]
 801af82:	0092      	lsls	r2, r2, #2
 801af84:	188a      	adds	r2, r1, r2
 801af86:	3203      	adds	r2, #3
 801af88:	7812      	ldrb	r2, [r2, #0]
 801af8a:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 801af8c:	19bb      	adds	r3, r7, r6
 801af8e:	781b      	ldrb	r3, [r3, #0]
 801af90:	0018      	movs	r0, r3
 801af92:	f7ff feae 	bl	801acf2 <xtime>
 801af96:	0003      	movs	r3, r0
 801af98:	0018      	movs	r0, r3
 801af9a:	f7ff feaa 	bl	801acf2 <xtime>
 801af9e:	0003      	movs	r3, r0
 801afa0:	0018      	movs	r0, r3
 801afa2:	f7ff fea6 	bl	801acf2 <xtime>
 801afa6:	0003      	movs	r3, r0
 801afa8:	0018      	movs	r0, r3
 801afaa:	f7ff fea2 	bl	801acf2 <xtime>
 801afae:	197b      	adds	r3, r7, r5
 801afb0:	781b      	ldrb	r3, [r3, #0]
 801afb2:	0018      	movs	r0, r3
 801afb4:	f7ff fe9d 	bl	801acf2 <xtime>
 801afb8:	0003      	movs	r3, r0
 801afba:	0018      	movs	r0, r3
 801afbc:	f7ff fe99 	bl	801acf2 <xtime>
 801afc0:	197b      	adds	r3, r7, r5
 801afc2:	781b      	ldrb	r3, [r3, #0]
 801afc4:	0018      	movs	r0, r3
 801afc6:	f7ff fe94 	bl	801acf2 <xtime>
 801afca:	0003      	movs	r3, r0
 801afcc:	0018      	movs	r0, r3
 801afce:	f7ff fe90 	bl	801acf2 <xtime>
 801afd2:	0003      	movs	r3, r0
 801afd4:	0018      	movs	r0, r3
 801afd6:	f7ff fe8c 	bl	801acf2 <xtime>
 801afda:	0003      	movs	r3, r0
 801afdc:	0018      	movs	r0, r3
 801afde:	f7ff fe88 	bl	801acf2 <xtime>
 801afe2:	193b      	adds	r3, r7, r4
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	0018      	movs	r0, r3
 801afe8:	f7ff fe83 	bl	801acf2 <xtime>
 801afec:	193b      	adds	r3, r7, r4
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	0018      	movs	r0, r3
 801aff2:	f7ff fe7e 	bl	801acf2 <xtime>
 801aff6:	0003      	movs	r3, r0
 801aff8:	0018      	movs	r0, r3
 801affa:	f7ff fe7a 	bl	801acf2 <xtime>
 801affe:	0003      	movs	r3, r0
 801b000:	0018      	movs	r0, r3
 801b002:	f7ff fe76 	bl	801acf2 <xtime>
 801b006:	0003      	movs	r3, r0
 801b008:	0018      	movs	r0, r3
 801b00a:	f7ff fe72 	bl	801acf2 <xtime>
 801b00e:	2308      	movs	r3, #8
 801b010:	001c      	movs	r4, r3
 801b012:	18fb      	adds	r3, r7, r3
 801b014:	781b      	ldrb	r3, [r3, #0]
 801b016:	0018      	movs	r0, r3
 801b018:	f7ff fe6b 	bl	801acf2 <xtime>
 801b01c:	0023      	movs	r3, r4
 801b01e:	001c      	movs	r4, r3
 801b020:	18fb      	adds	r3, r7, r3
 801b022:	781b      	ldrb	r3, [r3, #0]
 801b024:	0018      	movs	r0, r3
 801b026:	f7ff fe64 	bl	801acf2 <xtime>
 801b02a:	0003      	movs	r3, r0
 801b02c:	0018      	movs	r0, r3
 801b02e:	f7ff fe60 	bl	801acf2 <xtime>
 801b032:	0023      	movs	r3, r4
 801b034:	18fb      	adds	r3, r7, r3
 801b036:	781b      	ldrb	r3, [r3, #0]
 801b038:	0018      	movs	r0, r3
 801b03a:	f7ff fe5a 	bl	801acf2 <xtime>
 801b03e:	0003      	movs	r3, r0
 801b040:	0018      	movs	r0, r3
 801b042:	f7ff fe56 	bl	801acf2 <xtime>
 801b046:	0003      	movs	r3, r0
 801b048:	0018      	movs	r0, r3
 801b04a:	f7ff fe52 	bl	801acf2 <xtime>
 801b04e:	0003      	movs	r3, r0
 801b050:	0018      	movs	r0, r3
 801b052:	f7ff fe4e 	bl	801acf2 <xtime>
 801b056:	19bb      	adds	r3, r7, r6
 801b058:	781b      	ldrb	r3, [r3, #0]
 801b05a:	0018      	movs	r0, r3
 801b05c:	f7ff fe49 	bl	801acf2 <xtime>
 801b060:	0003      	movs	r3, r0
 801b062:	001c      	movs	r4, r3
 801b064:	19bb      	adds	r3, r7, r6
 801b066:	781b      	ldrb	r3, [r3, #0]
 801b068:	0018      	movs	r0, r3
 801b06a:	f7ff fe42 	bl	801acf2 <xtime>
 801b06e:	0003      	movs	r3, r0
 801b070:	0018      	movs	r0, r3
 801b072:	f7ff fe3e 	bl	801acf2 <xtime>
 801b076:	0003      	movs	r3, r0
 801b078:	4063      	eors	r3, r4
 801b07a:	b2dc      	uxtb	r4, r3
 801b07c:	19bb      	adds	r3, r7, r6
 801b07e:	781b      	ldrb	r3, [r3, #0]
 801b080:	0018      	movs	r0, r3
 801b082:	f7ff fe36 	bl	801acf2 <xtime>
 801b086:	0003      	movs	r3, r0
 801b088:	0018      	movs	r0, r3
 801b08a:	f7ff fe32 	bl	801acf2 <xtime>
 801b08e:	0003      	movs	r3, r0
 801b090:	0018      	movs	r0, r3
 801b092:	f7ff fe2e 	bl	801acf2 <xtime>
 801b096:	0003      	movs	r3, r0
 801b098:	4063      	eors	r3, r4
 801b09a:	b2dc      	uxtb	r4, r3
 801b09c:	197b      	adds	r3, r7, r5
 801b09e:	781b      	ldrb	r3, [r3, #0]
 801b0a0:	0018      	movs	r0, r3
 801b0a2:	f7ff fe26 	bl	801acf2 <xtime>
 801b0a6:	0003      	movs	r3, r0
 801b0a8:	001a      	movs	r2, r3
 801b0aa:	0029      	movs	r1, r5
 801b0ac:	197b      	adds	r3, r7, r5
 801b0ae:	781b      	ldrb	r3, [r3, #0]
 801b0b0:	4053      	eors	r3, r2
 801b0b2:	b2dd      	uxtb	r5, r3
 801b0b4:	187b      	adds	r3, r7, r1
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	0018      	movs	r0, r3
 801b0ba:	f7ff fe1a 	bl	801acf2 <xtime>
 801b0be:	0003      	movs	r3, r0
 801b0c0:	0018      	movs	r0, r3
 801b0c2:	f7ff fe16 	bl	801acf2 <xtime>
 801b0c6:	0003      	movs	r3, r0
 801b0c8:	0018      	movs	r0, r3
 801b0ca:	f7ff fe12 	bl	801acf2 <xtime>
 801b0ce:	0003      	movs	r3, r0
 801b0d0:	406b      	eors	r3, r5
 801b0d2:	b2db      	uxtb	r3, r3
 801b0d4:	4063      	eors	r3, r4
 801b0d6:	b2dc      	uxtb	r4, r3
 801b0d8:	2309      	movs	r3, #9
 801b0da:	001d      	movs	r5, r3
 801b0dc:	18fb      	adds	r3, r7, r3
 801b0de:	781b      	ldrb	r3, [r3, #0]
 801b0e0:	0018      	movs	r0, r3
 801b0e2:	f7ff fe06 	bl	801acf2 <xtime>
 801b0e6:	0003      	movs	r3, r0
 801b0e8:	0018      	movs	r0, r3
 801b0ea:	f7ff fe02 	bl	801acf2 <xtime>
 801b0ee:	0003      	movs	r3, r0
 801b0f0:	001a      	movs	r2, r3
 801b0f2:	002b      	movs	r3, r5
 801b0f4:	0018      	movs	r0, r3
 801b0f6:	18fb      	adds	r3, r7, r3
 801b0f8:	781b      	ldrb	r3, [r3, #0]
 801b0fa:	4053      	eors	r3, r2
 801b0fc:	b2dd      	uxtb	r5, r3
 801b0fe:	0003      	movs	r3, r0
 801b100:	18fb      	adds	r3, r7, r3
 801b102:	781b      	ldrb	r3, [r3, #0]
 801b104:	0018      	movs	r0, r3
 801b106:	f7ff fdf4 	bl	801acf2 <xtime>
 801b10a:	0003      	movs	r3, r0
 801b10c:	0018      	movs	r0, r3
 801b10e:	f7ff fdf0 	bl	801acf2 <xtime>
 801b112:	0003      	movs	r3, r0
 801b114:	0018      	movs	r0, r3
 801b116:	f7ff fdec 	bl	801acf2 <xtime>
 801b11a:	0003      	movs	r3, r0
 801b11c:	406b      	eors	r3, r5
 801b11e:	b2db      	uxtb	r3, r3
 801b120:	4063      	eors	r3, r4
 801b122:	b2dc      	uxtb	r4, r3
 801b124:	2308      	movs	r3, #8
 801b126:	001d      	movs	r5, r3
 801b128:	18fb      	adds	r3, r7, r3
 801b12a:	781b      	ldrb	r3, [r3, #0]
 801b12c:	0018      	movs	r0, r3
 801b12e:	f7ff fde0 	bl	801acf2 <xtime>
 801b132:	0003      	movs	r3, r0
 801b134:	0018      	movs	r0, r3
 801b136:	f7ff fddc 	bl	801acf2 <xtime>
 801b13a:	0003      	movs	r3, r0
 801b13c:	0018      	movs	r0, r3
 801b13e:	f7ff fdd8 	bl	801acf2 <xtime>
 801b142:	0003      	movs	r3, r0
 801b144:	001a      	movs	r2, r3
 801b146:	002b      	movs	r3, r5
 801b148:	18fb      	adds	r3, r7, r3
 801b14a:	781b      	ldrb	r3, [r3, #0]
 801b14c:	4053      	eors	r3, r2
 801b14e:	b2db      	uxtb	r3, r3
 801b150:	4063      	eors	r3, r4
 801b152:	b2d9      	uxtb	r1, r3
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	68fa      	ldr	r2, [r7, #12]
 801b158:	0092      	lsls	r2, r2, #2
 801b15a:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 801b15c:	19bb      	adds	r3, r7, r6
 801b15e:	781b      	ldrb	r3, [r3, #0]
 801b160:	0018      	movs	r0, r3
 801b162:	f7ff fdc6 	bl	801acf2 <xtime>
 801b166:	19bb      	adds	r3, r7, r6
 801b168:	781b      	ldrb	r3, [r3, #0]
 801b16a:	0018      	movs	r0, r3
 801b16c:	f7ff fdc1 	bl	801acf2 <xtime>
 801b170:	0003      	movs	r3, r0
 801b172:	0018      	movs	r0, r3
 801b174:	f7ff fdbd 	bl	801acf2 <xtime>
 801b178:	19bb      	adds	r3, r7, r6
 801b17a:	781b      	ldrb	r3, [r3, #0]
 801b17c:	0018      	movs	r0, r3
 801b17e:	f7ff fdb8 	bl	801acf2 <xtime>
 801b182:	0003      	movs	r3, r0
 801b184:	0018      	movs	r0, r3
 801b186:	f7ff fdb4 	bl	801acf2 <xtime>
 801b18a:	0003      	movs	r3, r0
 801b18c:	0018      	movs	r0, r3
 801b18e:	f7ff fdb0 	bl	801acf2 <xtime>
 801b192:	0003      	movs	r3, r0
 801b194:	0018      	movs	r0, r3
 801b196:	f7ff fdac 	bl	801acf2 <xtime>
 801b19a:	210a      	movs	r1, #10
 801b19c:	000d      	movs	r5, r1
 801b19e:	187b      	adds	r3, r7, r1
 801b1a0:	781b      	ldrb	r3, [r3, #0]
 801b1a2:	0018      	movs	r0, r3
 801b1a4:	f7ff fda5 	bl	801acf2 <xtime>
 801b1a8:	0003      	movs	r3, r0
 801b1aa:	0018      	movs	r0, r3
 801b1ac:	f7ff fda1 	bl	801acf2 <xtime>
 801b1b0:	0003      	movs	r3, r0
 801b1b2:	0018      	movs	r0, r3
 801b1b4:	f7ff fd9d 	bl	801acf2 <xtime>
 801b1b8:	0003      	movs	r3, r0
 801b1ba:	0018      	movs	r0, r3
 801b1bc:	f7ff fd99 	bl	801acf2 <xtime>
 801b1c0:	2409      	movs	r4, #9
 801b1c2:	193b      	adds	r3, r7, r4
 801b1c4:	781b      	ldrb	r3, [r3, #0]
 801b1c6:	0018      	movs	r0, r3
 801b1c8:	f7ff fd93 	bl	801acf2 <xtime>
 801b1cc:	0003      	movs	r3, r0
 801b1ce:	0018      	movs	r0, r3
 801b1d0:	f7ff fd8f 	bl	801acf2 <xtime>
 801b1d4:	193b      	adds	r3, r7, r4
 801b1d6:	781b      	ldrb	r3, [r3, #0]
 801b1d8:	0018      	movs	r0, r3
 801b1da:	f7ff fd8a 	bl	801acf2 <xtime>
 801b1de:	0003      	movs	r3, r0
 801b1e0:	0018      	movs	r0, r3
 801b1e2:	f7ff fd86 	bl	801acf2 <xtime>
 801b1e6:	0003      	movs	r3, r0
 801b1e8:	0018      	movs	r0, r3
 801b1ea:	f7ff fd82 	bl	801acf2 <xtime>
 801b1ee:	0003      	movs	r3, r0
 801b1f0:	0018      	movs	r0, r3
 801b1f2:	f7ff fd7e 	bl	801acf2 <xtime>
 801b1f6:	2308      	movs	r3, #8
 801b1f8:	001c      	movs	r4, r3
 801b1fa:	18fb      	adds	r3, r7, r3
 801b1fc:	781b      	ldrb	r3, [r3, #0]
 801b1fe:	0018      	movs	r0, r3
 801b200:	f7ff fd77 	bl	801acf2 <xtime>
 801b204:	0023      	movs	r3, r4
 801b206:	18fb      	adds	r3, r7, r3
 801b208:	781b      	ldrb	r3, [r3, #0]
 801b20a:	0018      	movs	r0, r3
 801b20c:	f7ff fd71 	bl	801acf2 <xtime>
 801b210:	0003      	movs	r3, r0
 801b212:	0018      	movs	r0, r3
 801b214:	f7ff fd6d 	bl	801acf2 <xtime>
 801b218:	0003      	movs	r3, r0
 801b21a:	0018      	movs	r0, r3
 801b21c:	f7ff fd69 	bl	801acf2 <xtime>
 801b220:	0003      	movs	r3, r0
 801b222:	0018      	movs	r0, r3
 801b224:	f7ff fd65 	bl	801acf2 <xtime>
 801b228:	19bb      	adds	r3, r7, r6
 801b22a:	781b      	ldrb	r3, [r3, #0]
 801b22c:	0018      	movs	r0, r3
 801b22e:	f7ff fd60 	bl	801acf2 <xtime>
 801b232:	0003      	movs	r3, r0
 801b234:	0018      	movs	r0, r3
 801b236:	f7ff fd5c 	bl	801acf2 <xtime>
 801b23a:	0003      	movs	r3, r0
 801b23c:	0018      	movs	r0, r3
 801b23e:	f7ff fd58 	bl	801acf2 <xtime>
 801b242:	0003      	movs	r3, r0
 801b244:	001a      	movs	r2, r3
 801b246:	19bb      	adds	r3, r7, r6
 801b248:	781b      	ldrb	r3, [r3, #0]
 801b24a:	4053      	eors	r3, r2
 801b24c:	b2dc      	uxtb	r4, r3
 801b24e:	197b      	adds	r3, r7, r5
 801b250:	781b      	ldrb	r3, [r3, #0]
 801b252:	0018      	movs	r0, r3
 801b254:	f7ff fd4d 	bl	801acf2 <xtime>
 801b258:	0003      	movs	r3, r0
 801b25a:	001d      	movs	r5, r3
 801b25c:	230a      	movs	r3, #10
 801b25e:	18fb      	adds	r3, r7, r3
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	0018      	movs	r0, r3
 801b264:	f7ff fd45 	bl	801acf2 <xtime>
 801b268:	0003      	movs	r3, r0
 801b26a:	0018      	movs	r0, r3
 801b26c:	f7ff fd41 	bl	801acf2 <xtime>
 801b270:	0003      	movs	r3, r0
 801b272:	406b      	eors	r3, r5
 801b274:	b2dd      	uxtb	r5, r3
 801b276:	230a      	movs	r3, #10
 801b278:	18fb      	adds	r3, r7, r3
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	0018      	movs	r0, r3
 801b27e:	f7ff fd38 	bl	801acf2 <xtime>
 801b282:	0003      	movs	r3, r0
 801b284:	0018      	movs	r0, r3
 801b286:	f7ff fd34 	bl	801acf2 <xtime>
 801b28a:	0003      	movs	r3, r0
 801b28c:	0018      	movs	r0, r3
 801b28e:	f7ff fd30 	bl	801acf2 <xtime>
 801b292:	0003      	movs	r3, r0
 801b294:	406b      	eors	r3, r5
 801b296:	b2db      	uxtb	r3, r3
 801b298:	4063      	eors	r3, r4
 801b29a:	b2dc      	uxtb	r4, r3
 801b29c:	2209      	movs	r2, #9
 801b29e:	0015      	movs	r5, r2
 801b2a0:	18bb      	adds	r3, r7, r2
 801b2a2:	781b      	ldrb	r3, [r3, #0]
 801b2a4:	0018      	movs	r0, r3
 801b2a6:	f7ff fd24 	bl	801acf2 <xtime>
 801b2aa:	0003      	movs	r3, r0
 801b2ac:	001a      	movs	r2, r3
 801b2ae:	0029      	movs	r1, r5
 801b2b0:	187b      	adds	r3, r7, r1
 801b2b2:	781b      	ldrb	r3, [r3, #0]
 801b2b4:	4053      	eors	r3, r2
 801b2b6:	b2dd      	uxtb	r5, r3
 801b2b8:	187b      	adds	r3, r7, r1
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	0018      	movs	r0, r3
 801b2be:	f7ff fd18 	bl	801acf2 <xtime>
 801b2c2:	0003      	movs	r3, r0
 801b2c4:	0018      	movs	r0, r3
 801b2c6:	f7ff fd14 	bl	801acf2 <xtime>
 801b2ca:	0003      	movs	r3, r0
 801b2cc:	0018      	movs	r0, r3
 801b2ce:	f7ff fd10 	bl	801acf2 <xtime>
 801b2d2:	0003      	movs	r3, r0
 801b2d4:	406b      	eors	r3, r5
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	4063      	eors	r3, r4
 801b2da:	b2dc      	uxtb	r4, r3
 801b2dc:	2208      	movs	r2, #8
 801b2de:	0015      	movs	r5, r2
 801b2e0:	18bb      	adds	r3, r7, r2
 801b2e2:	781b      	ldrb	r3, [r3, #0]
 801b2e4:	0018      	movs	r0, r3
 801b2e6:	f7ff fd04 	bl	801acf2 <xtime>
 801b2ea:	0003      	movs	r3, r0
 801b2ec:	0018      	movs	r0, r3
 801b2ee:	f7ff fd00 	bl	801acf2 <xtime>
 801b2f2:	0003      	movs	r3, r0
 801b2f4:	001a      	movs	r2, r3
 801b2f6:	0028      	movs	r0, r5
 801b2f8:	183b      	adds	r3, r7, r0
 801b2fa:	781b      	ldrb	r3, [r3, #0]
 801b2fc:	4053      	eors	r3, r2
 801b2fe:	b2dd      	uxtb	r5, r3
 801b300:	0002      	movs	r2, r0
 801b302:	18bb      	adds	r3, r7, r2
 801b304:	781b      	ldrb	r3, [r3, #0]
 801b306:	0018      	movs	r0, r3
 801b308:	f7ff fcf3 	bl	801acf2 <xtime>
 801b30c:	0003      	movs	r3, r0
 801b30e:	0018      	movs	r0, r3
 801b310:	f7ff fcef 	bl	801acf2 <xtime>
 801b314:	0003      	movs	r3, r0
 801b316:	0018      	movs	r0, r3
 801b318:	f7ff fceb 	bl	801acf2 <xtime>
 801b31c:	0003      	movs	r3, r0
 801b31e:	406b      	eors	r3, r5
 801b320:	b2db      	uxtb	r3, r3
 801b322:	4063      	eors	r3, r4
 801b324:	b2d9      	uxtb	r1, r3
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	009b      	lsls	r3, r3, #2
 801b32c:	18d3      	adds	r3, r2, r3
 801b32e:	3301      	adds	r3, #1
 801b330:	1c0a      	adds	r2, r1, #0
 801b332:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 801b334:	19bb      	adds	r3, r7, r6
 801b336:	781b      	ldrb	r3, [r3, #0]
 801b338:	0018      	movs	r0, r3
 801b33a:	f7ff fcda 	bl	801acf2 <xtime>
 801b33e:	19bb      	adds	r3, r7, r6
 801b340:	781b      	ldrb	r3, [r3, #0]
 801b342:	0018      	movs	r0, r3
 801b344:	f7ff fcd5 	bl	801acf2 <xtime>
 801b348:	0003      	movs	r3, r0
 801b34a:	0018      	movs	r0, r3
 801b34c:	f7ff fcd1 	bl	801acf2 <xtime>
 801b350:	0003      	movs	r3, r0
 801b352:	0018      	movs	r0, r3
 801b354:	f7ff fccd 	bl	801acf2 <xtime>
 801b358:	0003      	movs	r3, r0
 801b35a:	0018      	movs	r0, r3
 801b35c:	f7ff fcc9 	bl	801acf2 <xtime>
 801b360:	250a      	movs	r5, #10
 801b362:	197b      	adds	r3, r7, r5
 801b364:	781b      	ldrb	r3, [r3, #0]
 801b366:	0018      	movs	r0, r3
 801b368:	f7ff fcc3 	bl	801acf2 <xtime>
 801b36c:	197b      	adds	r3, r7, r5
 801b36e:	781b      	ldrb	r3, [r3, #0]
 801b370:	0018      	movs	r0, r3
 801b372:	f7ff fcbe 	bl	801acf2 <xtime>
 801b376:	0003      	movs	r3, r0
 801b378:	0018      	movs	r0, r3
 801b37a:	f7ff fcba 	bl	801acf2 <xtime>
 801b37e:	197b      	adds	r3, r7, r5
 801b380:	781b      	ldrb	r3, [r3, #0]
 801b382:	0018      	movs	r0, r3
 801b384:	f7ff fcb5 	bl	801acf2 <xtime>
 801b388:	0003      	movs	r3, r0
 801b38a:	0018      	movs	r0, r3
 801b38c:	f7ff fcb1 	bl	801acf2 <xtime>
 801b390:	0003      	movs	r3, r0
 801b392:	0018      	movs	r0, r3
 801b394:	f7ff fcad 	bl	801acf2 <xtime>
 801b398:	0003      	movs	r3, r0
 801b39a:	0018      	movs	r0, r3
 801b39c:	f7ff fca9 	bl	801acf2 <xtime>
 801b3a0:	2109      	movs	r1, #9
 801b3a2:	187b      	adds	r3, r7, r1
 801b3a4:	781b      	ldrb	r3, [r3, #0]
 801b3a6:	0018      	movs	r0, r3
 801b3a8:	f7ff fca3 	bl	801acf2 <xtime>
 801b3ac:	0003      	movs	r3, r0
 801b3ae:	0018      	movs	r0, r3
 801b3b0:	f7ff fc9f 	bl	801acf2 <xtime>
 801b3b4:	0003      	movs	r3, r0
 801b3b6:	0018      	movs	r0, r3
 801b3b8:	f7ff fc9b 	bl	801acf2 <xtime>
 801b3bc:	0003      	movs	r3, r0
 801b3be:	0018      	movs	r0, r3
 801b3c0:	f7ff fc97 	bl	801acf2 <xtime>
 801b3c4:	2408      	movs	r4, #8
 801b3c6:	193b      	adds	r3, r7, r4
 801b3c8:	781b      	ldrb	r3, [r3, #0]
 801b3ca:	0018      	movs	r0, r3
 801b3cc:	f7ff fc91 	bl	801acf2 <xtime>
 801b3d0:	0003      	movs	r3, r0
 801b3d2:	0018      	movs	r0, r3
 801b3d4:	f7ff fc8d 	bl	801acf2 <xtime>
 801b3d8:	193b      	adds	r3, r7, r4
 801b3da:	781b      	ldrb	r3, [r3, #0]
 801b3dc:	0018      	movs	r0, r3
 801b3de:	f7ff fc88 	bl	801acf2 <xtime>
 801b3e2:	0003      	movs	r3, r0
 801b3e4:	0018      	movs	r0, r3
 801b3e6:	f7ff fc84 	bl	801acf2 <xtime>
 801b3ea:	0003      	movs	r3, r0
 801b3ec:	0018      	movs	r0, r3
 801b3ee:	f7ff fc80 	bl	801acf2 <xtime>
 801b3f2:	0003      	movs	r3, r0
 801b3f4:	0018      	movs	r0, r3
 801b3f6:	f7ff fc7c 	bl	801acf2 <xtime>
 801b3fa:	19bb      	adds	r3, r7, r6
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	0018      	movs	r0, r3
 801b400:	f7ff fc77 	bl	801acf2 <xtime>
 801b404:	0003      	movs	r3, r0
 801b406:	0018      	movs	r0, r3
 801b408:	f7ff fc73 	bl	801acf2 <xtime>
 801b40c:	0003      	movs	r3, r0
 801b40e:	001a      	movs	r2, r3
 801b410:	19bb      	adds	r3, r7, r6
 801b412:	781b      	ldrb	r3, [r3, #0]
 801b414:	4053      	eors	r3, r2
 801b416:	b2dc      	uxtb	r4, r3
 801b418:	19bb      	adds	r3, r7, r6
 801b41a:	781b      	ldrb	r3, [r3, #0]
 801b41c:	0018      	movs	r0, r3
 801b41e:	f7ff fc68 	bl	801acf2 <xtime>
 801b422:	0003      	movs	r3, r0
 801b424:	0018      	movs	r0, r3
 801b426:	f7ff fc64 	bl	801acf2 <xtime>
 801b42a:	0003      	movs	r3, r0
 801b42c:	0018      	movs	r0, r3
 801b42e:	f7ff fc60 	bl	801acf2 <xtime>
 801b432:	0003      	movs	r3, r0
 801b434:	4063      	eors	r3, r4
 801b436:	b2dc      	uxtb	r4, r3
 801b438:	197b      	adds	r3, r7, r5
 801b43a:	781b      	ldrb	r3, [r3, #0]
 801b43c:	0018      	movs	r0, r3
 801b43e:	f7ff fc58 	bl	801acf2 <xtime>
 801b442:	0003      	movs	r3, r0
 801b444:	0018      	movs	r0, r3
 801b446:	f7ff fc54 	bl	801acf2 <xtime>
 801b44a:	0003      	movs	r3, r0
 801b44c:	0018      	movs	r0, r3
 801b44e:	f7ff fc50 	bl	801acf2 <xtime>
 801b452:	0003      	movs	r3, r0
 801b454:	001a      	movs	r2, r3
 801b456:	197b      	adds	r3, r7, r5
 801b458:	781b      	ldrb	r3, [r3, #0]
 801b45a:	4053      	eors	r3, r2
 801b45c:	b2db      	uxtb	r3, r3
 801b45e:	4063      	eors	r3, r4
 801b460:	b2dc      	uxtb	r4, r3
 801b462:	2109      	movs	r1, #9
 801b464:	187b      	adds	r3, r7, r1
 801b466:	781b      	ldrb	r3, [r3, #0]
 801b468:	0018      	movs	r0, r3
 801b46a:	f7ff fc42 	bl	801acf2 <xtime>
 801b46e:	0003      	movs	r3, r0
 801b470:	001d      	movs	r5, r3
 801b472:	2109      	movs	r1, #9
 801b474:	187b      	adds	r3, r7, r1
 801b476:	781b      	ldrb	r3, [r3, #0]
 801b478:	0018      	movs	r0, r3
 801b47a:	f7ff fc3a 	bl	801acf2 <xtime>
 801b47e:	0003      	movs	r3, r0
 801b480:	0018      	movs	r0, r3
 801b482:	f7ff fc36 	bl	801acf2 <xtime>
 801b486:	0003      	movs	r3, r0
 801b488:	406b      	eors	r3, r5
 801b48a:	b2dd      	uxtb	r5, r3
 801b48c:	2109      	movs	r1, #9
 801b48e:	187b      	adds	r3, r7, r1
 801b490:	781b      	ldrb	r3, [r3, #0]
 801b492:	0018      	movs	r0, r3
 801b494:	f7ff fc2d 	bl	801acf2 <xtime>
 801b498:	0003      	movs	r3, r0
 801b49a:	0018      	movs	r0, r3
 801b49c:	f7ff fc29 	bl	801acf2 <xtime>
 801b4a0:	0003      	movs	r3, r0
 801b4a2:	0018      	movs	r0, r3
 801b4a4:	f7ff fc25 	bl	801acf2 <xtime>
 801b4a8:	0003      	movs	r3, r0
 801b4aa:	406b      	eors	r3, r5
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	4063      	eors	r3, r4
 801b4b0:	b2dc      	uxtb	r4, r3
 801b4b2:	2308      	movs	r3, #8
 801b4b4:	001d      	movs	r5, r3
 801b4b6:	18fb      	adds	r3, r7, r3
 801b4b8:	781b      	ldrb	r3, [r3, #0]
 801b4ba:	0018      	movs	r0, r3
 801b4bc:	f7ff fc19 	bl	801acf2 <xtime>
 801b4c0:	0003      	movs	r3, r0
 801b4c2:	001a      	movs	r2, r3
 801b4c4:	0028      	movs	r0, r5
 801b4c6:	183b      	adds	r3, r7, r0
 801b4c8:	781b      	ldrb	r3, [r3, #0]
 801b4ca:	4053      	eors	r3, r2
 801b4cc:	b2dd      	uxtb	r5, r3
 801b4ce:	0003      	movs	r3, r0
 801b4d0:	18fb      	adds	r3, r7, r3
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	0018      	movs	r0, r3
 801b4d6:	f7ff fc0c 	bl	801acf2 <xtime>
 801b4da:	0003      	movs	r3, r0
 801b4dc:	0018      	movs	r0, r3
 801b4de:	f7ff fc08 	bl	801acf2 <xtime>
 801b4e2:	0003      	movs	r3, r0
 801b4e4:	0018      	movs	r0, r3
 801b4e6:	f7ff fc04 	bl	801acf2 <xtime>
 801b4ea:	0003      	movs	r3, r0
 801b4ec:	406b      	eors	r3, r5
 801b4ee:	b2db      	uxtb	r3, r3
 801b4f0:	4063      	eors	r3, r4
 801b4f2:	b2d9      	uxtb	r1, r3
 801b4f4:	687a      	ldr	r2, [r7, #4]
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	009b      	lsls	r3, r3, #2
 801b4fa:	18d3      	adds	r3, r2, r3
 801b4fc:	3302      	adds	r3, #2
 801b4fe:	1c0a      	adds	r2, r1, #0
 801b500:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 801b502:	19bb      	adds	r3, r7, r6
 801b504:	781b      	ldrb	r3, [r3, #0]
 801b506:	0018      	movs	r0, r3
 801b508:	f7ff fbf3 	bl	801acf2 <xtime>
 801b50c:	0003      	movs	r3, r0
 801b50e:	0018      	movs	r0, r3
 801b510:	f7ff fbef 	bl	801acf2 <xtime>
 801b514:	19bb      	adds	r3, r7, r6
 801b516:	781b      	ldrb	r3, [r3, #0]
 801b518:	0018      	movs	r0, r3
 801b51a:	f7ff fbea 	bl	801acf2 <xtime>
 801b51e:	0003      	movs	r3, r0
 801b520:	0018      	movs	r0, r3
 801b522:	f7ff fbe6 	bl	801acf2 <xtime>
 801b526:	0003      	movs	r3, r0
 801b528:	0018      	movs	r0, r3
 801b52a:	f7ff fbe2 	bl	801acf2 <xtime>
 801b52e:	0003      	movs	r3, r0
 801b530:	0018      	movs	r0, r3
 801b532:	f7ff fbde 	bl	801acf2 <xtime>
 801b536:	250a      	movs	r5, #10
 801b538:	197b      	adds	r3, r7, r5
 801b53a:	781b      	ldrb	r3, [r3, #0]
 801b53c:	0018      	movs	r0, r3
 801b53e:	f7ff fbd8 	bl	801acf2 <xtime>
 801b542:	197b      	adds	r3, r7, r5
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	0018      	movs	r0, r3
 801b548:	f7ff fbd3 	bl	801acf2 <xtime>
 801b54c:	0003      	movs	r3, r0
 801b54e:	0018      	movs	r0, r3
 801b550:	f7ff fbcf 	bl	801acf2 <xtime>
 801b554:	0003      	movs	r3, r0
 801b556:	0018      	movs	r0, r3
 801b558:	f7ff fbcb 	bl	801acf2 <xtime>
 801b55c:	0003      	movs	r3, r0
 801b55e:	0018      	movs	r0, r3
 801b560:	f7ff fbc7 	bl	801acf2 <xtime>
 801b564:	2109      	movs	r1, #9
 801b566:	000c      	movs	r4, r1
 801b568:	187b      	adds	r3, r7, r1
 801b56a:	781b      	ldrb	r3, [r3, #0]
 801b56c:	0018      	movs	r0, r3
 801b56e:	f7ff fbc0 	bl	801acf2 <xtime>
 801b572:	193b      	adds	r3, r7, r4
 801b574:	781b      	ldrb	r3, [r3, #0]
 801b576:	0018      	movs	r0, r3
 801b578:	f7ff fbbb 	bl	801acf2 <xtime>
 801b57c:	0003      	movs	r3, r0
 801b57e:	0018      	movs	r0, r3
 801b580:	f7ff fbb7 	bl	801acf2 <xtime>
 801b584:	193b      	adds	r3, r7, r4
 801b586:	781b      	ldrb	r3, [r3, #0]
 801b588:	0018      	movs	r0, r3
 801b58a:	f7ff fbb2 	bl	801acf2 <xtime>
 801b58e:	0003      	movs	r3, r0
 801b590:	0018      	movs	r0, r3
 801b592:	f7ff fbae 	bl	801acf2 <xtime>
 801b596:	0003      	movs	r3, r0
 801b598:	0018      	movs	r0, r3
 801b59a:	f7ff fbaa 	bl	801acf2 <xtime>
 801b59e:	0003      	movs	r3, r0
 801b5a0:	0018      	movs	r0, r3
 801b5a2:	f7ff fba6 	bl	801acf2 <xtime>
 801b5a6:	2308      	movs	r3, #8
 801b5a8:	18fb      	adds	r3, r7, r3
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	0018      	movs	r0, r3
 801b5ae:	f7ff fba0 	bl	801acf2 <xtime>
 801b5b2:	0003      	movs	r3, r0
 801b5b4:	0018      	movs	r0, r3
 801b5b6:	f7ff fb9c 	bl	801acf2 <xtime>
 801b5ba:	0003      	movs	r3, r0
 801b5bc:	0018      	movs	r0, r3
 801b5be:	f7ff fb98 	bl	801acf2 <xtime>
 801b5c2:	0003      	movs	r3, r0
 801b5c4:	0018      	movs	r0, r3
 801b5c6:	f7ff fb94 	bl	801acf2 <xtime>
 801b5ca:	19bb      	adds	r3, r7, r6
 801b5cc:	781b      	ldrb	r3, [r3, #0]
 801b5ce:	0018      	movs	r0, r3
 801b5d0:	f7ff fb8f 	bl	801acf2 <xtime>
 801b5d4:	0003      	movs	r3, r0
 801b5d6:	001a      	movs	r2, r3
 801b5d8:	19bb      	adds	r3, r7, r6
 801b5da:	781b      	ldrb	r3, [r3, #0]
 801b5dc:	4053      	eors	r3, r2
 801b5de:	b2dc      	uxtb	r4, r3
 801b5e0:	19bb      	adds	r3, r7, r6
 801b5e2:	781b      	ldrb	r3, [r3, #0]
 801b5e4:	0018      	movs	r0, r3
 801b5e6:	f7ff fb84 	bl	801acf2 <xtime>
 801b5ea:	0003      	movs	r3, r0
 801b5ec:	0018      	movs	r0, r3
 801b5ee:	f7ff fb80 	bl	801acf2 <xtime>
 801b5f2:	0003      	movs	r3, r0
 801b5f4:	0018      	movs	r0, r3
 801b5f6:	f7ff fb7c 	bl	801acf2 <xtime>
 801b5fa:	0003      	movs	r3, r0
 801b5fc:	4063      	eors	r3, r4
 801b5fe:	b2dc      	uxtb	r4, r3
 801b600:	197b      	adds	r3, r7, r5
 801b602:	781b      	ldrb	r3, [r3, #0]
 801b604:	0018      	movs	r0, r3
 801b606:	f7ff fb74 	bl	801acf2 <xtime>
 801b60a:	0003      	movs	r3, r0
 801b60c:	0018      	movs	r0, r3
 801b60e:	f7ff fb70 	bl	801acf2 <xtime>
 801b612:	0003      	movs	r3, r0
 801b614:	001a      	movs	r2, r3
 801b616:	0029      	movs	r1, r5
 801b618:	197b      	adds	r3, r7, r5
 801b61a:	781b      	ldrb	r3, [r3, #0]
 801b61c:	4053      	eors	r3, r2
 801b61e:	b2dd      	uxtb	r5, r3
 801b620:	187b      	adds	r3, r7, r1
 801b622:	781b      	ldrb	r3, [r3, #0]
 801b624:	0018      	movs	r0, r3
 801b626:	f7ff fb64 	bl	801acf2 <xtime>
 801b62a:	0003      	movs	r3, r0
 801b62c:	0018      	movs	r0, r3
 801b62e:	f7ff fb60 	bl	801acf2 <xtime>
 801b632:	0003      	movs	r3, r0
 801b634:	0018      	movs	r0, r3
 801b636:	f7ff fb5c 	bl	801acf2 <xtime>
 801b63a:	0003      	movs	r3, r0
 801b63c:	406b      	eors	r3, r5
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	4063      	eors	r3, r4
 801b642:	b2dc      	uxtb	r4, r3
 801b644:	2509      	movs	r5, #9
 801b646:	197b      	adds	r3, r7, r5
 801b648:	781b      	ldrb	r3, [r3, #0]
 801b64a:	0018      	movs	r0, r3
 801b64c:	f7ff fb51 	bl	801acf2 <xtime>
 801b650:	0003      	movs	r3, r0
 801b652:	0018      	movs	r0, r3
 801b654:	f7ff fb4d 	bl	801acf2 <xtime>
 801b658:	0003      	movs	r3, r0
 801b65a:	0018      	movs	r0, r3
 801b65c:	f7ff fb49 	bl	801acf2 <xtime>
 801b660:	0003      	movs	r3, r0
 801b662:	001a      	movs	r2, r3
 801b664:	197b      	adds	r3, r7, r5
 801b666:	781b      	ldrb	r3, [r3, #0]
 801b668:	4053      	eors	r3, r2
 801b66a:	b2db      	uxtb	r3, r3
 801b66c:	4063      	eors	r3, r4
 801b66e:	b2dc      	uxtb	r4, r3
 801b670:	2608      	movs	r6, #8
 801b672:	19bb      	adds	r3, r7, r6
 801b674:	781b      	ldrb	r3, [r3, #0]
 801b676:	0018      	movs	r0, r3
 801b678:	f7ff fb3b 	bl	801acf2 <xtime>
 801b67c:	0003      	movs	r3, r0
 801b67e:	001d      	movs	r5, r3
 801b680:	19bb      	adds	r3, r7, r6
 801b682:	781b      	ldrb	r3, [r3, #0]
 801b684:	0018      	movs	r0, r3
 801b686:	f7ff fb34 	bl	801acf2 <xtime>
 801b68a:	0003      	movs	r3, r0
 801b68c:	0018      	movs	r0, r3
 801b68e:	f7ff fb30 	bl	801acf2 <xtime>
 801b692:	0003      	movs	r3, r0
 801b694:	406b      	eors	r3, r5
 801b696:	b2dd      	uxtb	r5, r3
 801b698:	19bb      	adds	r3, r7, r6
 801b69a:	781b      	ldrb	r3, [r3, #0]
 801b69c:	0018      	movs	r0, r3
 801b69e:	f7ff fb28 	bl	801acf2 <xtime>
 801b6a2:	0003      	movs	r3, r0
 801b6a4:	0018      	movs	r0, r3
 801b6a6:	f7ff fb24 	bl	801acf2 <xtime>
 801b6aa:	0003      	movs	r3, r0
 801b6ac:	0018      	movs	r0, r3
 801b6ae:	f7ff fb20 	bl	801acf2 <xtime>
 801b6b2:	0003      	movs	r3, r0
 801b6b4:	406b      	eors	r3, r5
 801b6b6:	b2db      	uxtb	r3, r3
 801b6b8:	4063      	eors	r3, r4
 801b6ba:	b2d9      	uxtb	r1, r3
 801b6bc:	687a      	ldr	r2, [r7, #4]
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	009b      	lsls	r3, r3, #2
 801b6c2:	18d3      	adds	r3, r2, r3
 801b6c4:	3303      	adds	r3, #3
 801b6c6:	1c0a      	adds	r2, r1, #0
 801b6c8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	3301      	adds	r3, #1
 801b6ce:	60fb      	str	r3, [r7, #12]
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	2b03      	cmp	r3, #3
 801b6d4:	dc00      	bgt.n	801b6d8 <InvMixColumns+0x79e>
 801b6d6:	e437      	b.n	801af48 <InvMixColumns+0xe>
  }
}
 801b6d8:	46c0      	nop			; (mov r8, r8)
 801b6da:	46bd      	mov	sp, r7
 801b6dc:	b005      	add	sp, #20
 801b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b6e0 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 801b6e0:	b5b0      	push	{r4, r5, r7, lr}
 801b6e2:	b084      	sub	sp, #16
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801b6e8:	230f      	movs	r3, #15
 801b6ea:	18fb      	adds	r3, r7, r3
 801b6ec:	2200      	movs	r2, #0
 801b6ee:	701a      	strb	r2, [r3, #0]
 801b6f0:	e02a      	b.n	801b748 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801b6f2:	230e      	movs	r3, #14
 801b6f4:	18fb      	adds	r3, r7, r3
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	701a      	strb	r2, [r3, #0]
 801b6fa:	e01a      	b.n	801b732 <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 801b6fc:	240e      	movs	r4, #14
 801b6fe:	193b      	adds	r3, r7, r4
 801b700:	781a      	ldrb	r2, [r3, #0]
 801b702:	250f      	movs	r5, #15
 801b704:	197b      	adds	r3, r7, r5
 801b706:	781b      	ldrb	r3, [r3, #0]
 801b708:	6879      	ldr	r1, [r7, #4]
 801b70a:	0092      	lsls	r2, r2, #2
 801b70c:	188a      	adds	r2, r1, r2
 801b70e:	5cd3      	ldrb	r3, [r2, r3]
 801b710:	0018      	movs	r0, r3
 801b712:	193b      	adds	r3, r7, r4
 801b714:	781a      	ldrb	r2, [r3, #0]
 801b716:	197b      	adds	r3, r7, r5
 801b718:	781b      	ldrb	r3, [r3, #0]
 801b71a:	4910      	ldr	r1, [pc, #64]	; (801b75c <InvSubBytes+0x7c>)
 801b71c:	5c08      	ldrb	r0, [r1, r0]
 801b71e:	6879      	ldr	r1, [r7, #4]
 801b720:	0092      	lsls	r2, r2, #2
 801b722:	188a      	adds	r2, r1, r2
 801b724:	1c01      	adds	r1, r0, #0
 801b726:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801b728:	193b      	adds	r3, r7, r4
 801b72a:	193a      	adds	r2, r7, r4
 801b72c:	7812      	ldrb	r2, [r2, #0]
 801b72e:	3201      	adds	r2, #1
 801b730:	701a      	strb	r2, [r3, #0]
 801b732:	230e      	movs	r3, #14
 801b734:	18fb      	adds	r3, r7, r3
 801b736:	781b      	ldrb	r3, [r3, #0]
 801b738:	2b03      	cmp	r3, #3
 801b73a:	d9df      	bls.n	801b6fc <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801b73c:	220f      	movs	r2, #15
 801b73e:	18bb      	adds	r3, r7, r2
 801b740:	18ba      	adds	r2, r7, r2
 801b742:	7812      	ldrb	r2, [r2, #0]
 801b744:	3201      	adds	r2, #1
 801b746:	701a      	strb	r2, [r3, #0]
 801b748:	230f      	movs	r3, #15
 801b74a:	18fb      	adds	r3, r7, r3
 801b74c:	781b      	ldrb	r3, [r3, #0]
 801b74e:	2b03      	cmp	r3, #3
 801b750:	d9cf      	bls.n	801b6f2 <InvSubBytes+0x12>
    }
  }
}
 801b752:	46c0      	nop			; (mov r8, r8)
 801b754:	46bd      	mov	sp, r7
 801b756:	b004      	add	sp, #16
 801b758:	bdb0      	pop	{r4, r5, r7, pc}
 801b75a:	46c0      	nop			; (mov r8, r8)
 801b75c:	08022108 	.word	0x08022108

0801b760 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b084      	sub	sp, #16
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 801b768:	210f      	movs	r1, #15
 801b76a:	187b      	adds	r3, r7, r1
 801b76c:	687a      	ldr	r2, [r7, #4]
 801b76e:	7b52      	ldrb	r2, [r2, #13]
 801b770:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	7a5a      	ldrb	r2, [r3, #9]
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	795a      	ldrb	r2, [r3, #5]
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	785a      	ldrb	r2, [r3, #1]
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	187a      	adds	r2, r7, r1
 801b78e:	7812      	ldrb	r2, [r2, #0]
 801b790:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 801b792:	187b      	adds	r3, r7, r1
 801b794:	687a      	ldr	r2, [r7, #4]
 801b796:	7892      	ldrb	r2, [r2, #2]
 801b798:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	7a9a      	ldrb	r2, [r3, #10]
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	187a      	adds	r2, r7, r1
 801b7a6:	7812      	ldrb	r2, [r2, #0]
 801b7a8:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 801b7aa:	187b      	adds	r3, r7, r1
 801b7ac:	687a      	ldr	r2, [r7, #4]
 801b7ae:	7992      	ldrb	r2, [r2, #6]
 801b7b0:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	7b9a      	ldrb	r2, [r3, #14]
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	187a      	adds	r2, r7, r1
 801b7be:	7812      	ldrb	r2, [r2, #0]
 801b7c0:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 801b7c2:	187b      	adds	r3, r7, r1
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	78d2      	ldrb	r2, [r2, #3]
 801b7c8:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	79da      	ldrb	r2, [r3, #7]
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	7ada      	ldrb	r2, [r3, #11]
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	7bda      	ldrb	r2, [r3, #15]
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	187a      	adds	r2, r7, r1
 801b7e6:	7812      	ldrb	r2, [r2, #0]
 801b7e8:	73da      	strb	r2, [r3, #15]
}
 801b7ea:	46c0      	nop			; (mov r8, r8)
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	b004      	add	sp, #16
 801b7f0:	bd80      	pop	{r7, pc}

0801b7f2 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 801b7f2:	b590      	push	{r4, r7, lr}
 801b7f4:	b085      	sub	sp, #20
 801b7f6:	af00      	add	r7, sp, #0
 801b7f8:	6078      	str	r0, [r7, #4]
 801b7fa:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b7fc:	240f      	movs	r4, #15
 801b7fe:	193b      	adds	r3, r7, r4
 801b800:	2200      	movs	r2, #0
 801b802:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 801b804:	683a      	ldr	r2, [r7, #0]
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	0019      	movs	r1, r3
 801b80a:	2000      	movs	r0, #0
 801b80c:	f7ff f997 	bl	801ab3e <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 801b810:	193b      	adds	r3, r7, r4
 801b812:	2201      	movs	r2, #1
 801b814:	701a      	strb	r2, [r3, #0]
 801b816:	e018      	b.n	801b84a <Cipher+0x58>
  {
    SubBytes(state);
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	0018      	movs	r0, r3
 801b81c:	f7ff f9e0 	bl	801abe0 <SubBytes>
    ShiftRows(state);
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	0018      	movs	r0, r3
 801b824:	f7ff fa1c 	bl	801ac60 <ShiftRows>
    MixColumns(state);
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	0018      	movs	r0, r3
 801b82c:	f7ff fa81 	bl	801ad32 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 801b830:	683a      	ldr	r2, [r7, #0]
 801b832:	6879      	ldr	r1, [r7, #4]
 801b834:	240f      	movs	r4, #15
 801b836:	193b      	adds	r3, r7, r4
 801b838:	781b      	ldrb	r3, [r3, #0]
 801b83a:	0018      	movs	r0, r3
 801b83c:	f7ff f97f 	bl	801ab3e <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 801b840:	193b      	adds	r3, r7, r4
 801b842:	193a      	adds	r2, r7, r4
 801b844:	7812      	ldrb	r2, [r2, #0]
 801b846:	3201      	adds	r2, #1
 801b848:	701a      	strb	r2, [r3, #0]
 801b84a:	230f      	movs	r3, #15
 801b84c:	18fb      	adds	r3, r7, r3
 801b84e:	781b      	ldrb	r3, [r3, #0]
 801b850:	2b09      	cmp	r3, #9
 801b852:	d9e1      	bls.n	801b818 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	0018      	movs	r0, r3
 801b858:	f7ff f9c2 	bl	801abe0 <SubBytes>
  ShiftRows(state);
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	0018      	movs	r0, r3
 801b860:	f7ff f9fe 	bl	801ac60 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 801b864:	683a      	ldr	r2, [r7, #0]
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	0019      	movs	r1, r3
 801b86a:	200a      	movs	r0, #10
 801b86c:	f7ff f967 	bl	801ab3e <AddRoundKey>
}
 801b870:	46c0      	nop			; (mov r8, r8)
 801b872:	46bd      	mov	sp, r7
 801b874:	b005      	add	sp, #20
 801b876:	bd90      	pop	{r4, r7, pc}

0801b878 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 801b878:	b590      	push	{r4, r7, lr}
 801b87a:	b085      	sub	sp, #20
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
 801b880:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b882:	240f      	movs	r4, #15
 801b884:	193b      	adds	r3, r7, r4
 801b886:	2200      	movs	r2, #0
 801b888:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 801b88a:	683a      	ldr	r2, [r7, #0]
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	0019      	movs	r1, r3
 801b890:	200a      	movs	r0, #10
 801b892:	f7ff f954 	bl	801ab3e <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 801b896:	193b      	adds	r3, r7, r4
 801b898:	2209      	movs	r2, #9
 801b89a:	701a      	strb	r2, [r3, #0]
 801b89c:	e018      	b.n	801b8d0 <InvCipher+0x58>
  {
    InvShiftRows(state);
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	0018      	movs	r0, r3
 801b8a2:	f7ff ff5d 	bl	801b760 <InvShiftRows>
    InvSubBytes(state);
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	0018      	movs	r0, r3
 801b8aa:	f7ff ff19 	bl	801b6e0 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 801b8ae:	683a      	ldr	r2, [r7, #0]
 801b8b0:	6879      	ldr	r1, [r7, #4]
 801b8b2:	240f      	movs	r4, #15
 801b8b4:	193b      	adds	r3, r7, r4
 801b8b6:	781b      	ldrb	r3, [r3, #0]
 801b8b8:	0018      	movs	r0, r3
 801b8ba:	f7ff f940 	bl	801ab3e <AddRoundKey>
    InvMixColumns(state);
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	0018      	movs	r0, r3
 801b8c2:	f7ff fb3a 	bl	801af3a <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 801b8c6:	193b      	adds	r3, r7, r4
 801b8c8:	193a      	adds	r2, r7, r4
 801b8ca:	7812      	ldrb	r2, [r2, #0]
 801b8cc:	3a01      	subs	r2, #1
 801b8ce:	701a      	strb	r2, [r3, #0]
 801b8d0:	230f      	movs	r3, #15
 801b8d2:	18fb      	adds	r3, r7, r3
 801b8d4:	781b      	ldrb	r3, [r3, #0]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d1e1      	bne.n	801b89e <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	0018      	movs	r0, r3
 801b8de:	f7ff ff3f 	bl	801b760 <InvShiftRows>
  InvSubBytes(state);
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	0018      	movs	r0, r3
 801b8e6:	f7ff fefb 	bl	801b6e0 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 801b8ea:	683a      	ldr	r2, [r7, #0]
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	0019      	movs	r1, r3
 801b8f0:	2000      	movs	r0, #0
 801b8f2:	f7ff f924 	bl	801ab3e <AddRoundKey>
}
 801b8f6:	46c0      	nop			; (mov r8, r8)
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	b005      	add	sp, #20
 801b8fc:	bd90      	pop	{r4, r7, pc}

0801b8fe <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 801b8fe:	b590      	push	{r4, r7, lr}
 801b900:	b085      	sub	sp, #20
 801b902:	af00      	add	r7, sp, #0
 801b904:	6078      	str	r0, [r7, #4]
 801b906:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b908:	230f      	movs	r3, #15
 801b90a:	18fb      	adds	r3, r7, r3
 801b90c:	2200      	movs	r2, #0
 801b90e:	701a      	strb	r2, [r3, #0]
 801b910:	e016      	b.n	801b940 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 801b912:	240f      	movs	r4, #15
 801b914:	193b      	adds	r3, r7, r4
 801b916:	781b      	ldrb	r3, [r3, #0]
 801b918:	687a      	ldr	r2, [r7, #4]
 801b91a:	18d3      	adds	r3, r2, r3
 801b91c:	7819      	ldrb	r1, [r3, #0]
 801b91e:	193b      	adds	r3, r7, r4
 801b920:	781b      	ldrb	r3, [r3, #0]
 801b922:	683a      	ldr	r2, [r7, #0]
 801b924:	18d3      	adds	r3, r2, r3
 801b926:	781a      	ldrb	r2, [r3, #0]
 801b928:	193b      	adds	r3, r7, r4
 801b92a:	781b      	ldrb	r3, [r3, #0]
 801b92c:	6878      	ldr	r0, [r7, #4]
 801b92e:	18c3      	adds	r3, r0, r3
 801b930:	404a      	eors	r2, r1
 801b932:	b2d2      	uxtb	r2, r2
 801b934:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b936:	193b      	adds	r3, r7, r4
 801b938:	193a      	adds	r2, r7, r4
 801b93a:	7812      	ldrb	r2, [r2, #0]
 801b93c:	3201      	adds	r2, #1
 801b93e:	701a      	strb	r2, [r3, #0]
 801b940:	230f      	movs	r3, #15
 801b942:	18fb      	adds	r3, r7, r3
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	2b0f      	cmp	r3, #15
 801b948:	d9e3      	bls.n	801b912 <XorWithIv+0x14>
  }
}
 801b94a:	46c0      	nop			; (mov r8, r8)
 801b94c:	46bd      	mov	sp, r7
 801b94e:	b005      	add	sp, #20
 801b950:	bd90      	pop	{r4, r7, pc}

0801b952 <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 801b952:	b580      	push	{r7, lr}
 801b954:	b086      	sub	sp, #24
 801b956:	af00      	add	r7, sp, #0
 801b958:	60f8      	str	r0, [r7, #12]
 801b95a:	60b9      	str	r1, [r7, #8]
 801b95c:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	33b0      	adds	r3, #176	; 0xb0
 801b962:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b964:	2300      	movs	r3, #0
 801b966:	617b      	str	r3, [r7, #20]
 801b968:	e013      	b.n	801b992 <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 801b96a:	693a      	ldr	r2, [r7, #16]
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	0011      	movs	r1, r2
 801b970:	0018      	movs	r0, r3
 801b972:	f7ff ffc4 	bl	801b8fe <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 801b976:	68fa      	ldr	r2, [r7, #12]
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	0011      	movs	r1, r2
 801b97c:	0018      	movs	r0, r3
 801b97e:	f7ff ff38 	bl	801b7f2 <Cipher>
    Iv = buf;
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	3310      	adds	r3, #16
 801b98a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	3310      	adds	r3, #16
 801b990:	617b      	str	r3, [r7, #20]
 801b992:	697a      	ldr	r2, [r7, #20]
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	429a      	cmp	r2, r3
 801b998:	d3e7      	bcc.n	801b96a <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	33b0      	adds	r3, #176	; 0xb0
 801b99e:	6939      	ldr	r1, [r7, #16]
 801b9a0:	2210      	movs	r2, #16
 801b9a2:	0018      	movs	r0, r3
 801b9a4:	f003 fbae 	bl	801f104 <memcpy>
}
 801b9a8:	46c0      	nop			; (mov r8, r8)
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	b006      	add	sp, #24
 801b9ae:	bd80      	pop	{r7, pc}

0801b9b0 <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 801b9b0:	b590      	push	{r4, r7, lr}
 801b9b2:	b08b      	sub	sp, #44	; 0x2c
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	60f8      	str	r0, [r7, #12]
 801b9b8:	60b9      	str	r1, [r7, #8]
 801b9ba:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b9bc:	2300      	movs	r3, #0
 801b9be:	627b      	str	r3, [r7, #36]	; 0x24
 801b9c0:	e026      	b.n	801ba10 <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 801b9c2:	2414      	movs	r4, #20
 801b9c4:	193a      	adds	r2, r7, r4
 801b9c6:	68bb      	ldr	r3, [r7, #8]
 801b9c8:	0010      	movs	r0, r2
 801b9ca:	0019      	movs	r1, r3
 801b9cc:	2310      	movs	r3, #16
 801b9ce:	001a      	movs	r2, r3
 801b9d0:	f003 fb98 	bl	801f104 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 801b9d4:	68fa      	ldr	r2, [r7, #12]
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	0011      	movs	r1, r2
 801b9da:	0018      	movs	r0, r3
 801b9dc:	f7ff ff4c 	bl	801b878 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	33b0      	adds	r3, #176	; 0xb0
 801b9e4:	001a      	movs	r2, r3
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	0011      	movs	r1, r2
 801b9ea:	0018      	movs	r0, r3
 801b9ec:	f7ff ff87 	bl	801b8fe <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	33b0      	adds	r3, #176	; 0xb0
 801b9f4:	001a      	movs	r2, r3
 801b9f6:	193b      	adds	r3, r7, r4
 801b9f8:	0010      	movs	r0, r2
 801b9fa:	0019      	movs	r1, r3
 801b9fc:	2310      	movs	r3, #16
 801b9fe:	001a      	movs	r2, r3
 801ba00:	f003 fb80 	bl	801f104 <memcpy>
    buf += AES_BLOCKLEN;
 801ba04:	68bb      	ldr	r3, [r7, #8]
 801ba06:	3310      	adds	r3, #16
 801ba08:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba0c:	3310      	adds	r3, #16
 801ba0e:	627b      	str	r3, [r7, #36]	; 0x24
 801ba10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	429a      	cmp	r2, r3
 801ba16:	d3d4      	bcc.n	801b9c2 <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 801ba18:	46c0      	nop			; (mov r8, r8)
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	b00b      	add	sp, #44	; 0x2c
 801ba1e:	bd90      	pop	{r4, r7, pc}

0801ba20 <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b084      	sub	sp, #16
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801ba28:	2300      	movs	r3, #0
 801ba2a:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801ba2c:	230c      	movs	r3, #12
 801ba2e:	18fb      	adds	r3, r7, r3
 801ba30:	0018      	movs	r0, r3
 801ba32:	f7fe f8d6 	bl	8019be2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801ba36:	68f9      	ldr	r1, [r7, #12]
 801ba38:	687a      	ldr	r2, [r7, #4]
 801ba3a:	2308      	movs	r3, #8
 801ba3c:	2000      	movs	r0, #0
 801ba3e:	f002 fe37 	bl	801e6b0 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	881b      	ldrh	r3, [r3, #0]
 801ba46:	4a05      	ldr	r2, [pc, #20]	; (801ba5c <_itsdk_error_readHeader+0x3c>)
 801ba48:	4293      	cmp	r3, r2
 801ba4a:	d001      	beq.n	801ba50 <_itsdk_error_readHeader+0x30>
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	e000      	b.n	801ba52 <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 801ba50:	2300      	movs	r3, #0
}
 801ba52:	0018      	movs	r0, r3
 801ba54:	46bd      	mov	sp, r7
 801ba56:	b004      	add	sp, #16
 801ba58:	bd80      	pop	{r7, pc}
 801ba5a:	46c0      	nop			; (mov r8, r8)
 801ba5c:	0000ae73 	.word	0x0000ae73

0801ba60 <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b084      	sub	sp, #16
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801ba68:	2300      	movs	r3, #0
 801ba6a:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801ba6c:	230c      	movs	r3, #12
 801ba6e:	18fb      	adds	r3, r7, r3
 801ba70:	0018      	movs	r0, r3
 801ba72:	f7fe f8b6 	bl	8019be2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801ba76:	68f9      	ldr	r1, [r7, #12]
 801ba78:	687a      	ldr	r2, [r7, #4]
 801ba7a:	2308      	movs	r3, #8
 801ba7c:	2000      	movs	r0, #0
 801ba7e:	f002 fd73 	bl	801e568 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 801ba82:	2300      	movs	r3, #0
}
 801ba84:	0018      	movs	r0, r3
 801ba86:	46bd      	mov	sp, r7
 801ba88:	b004      	add	sp, #16
 801ba8a:	bd80      	pop	{r7, pc}

0801ba8c <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b084      	sub	sp, #16
 801ba90:	af00      	add	r7, sp, #0
 801ba92:	0002      	movs	r2, r0
 801ba94:	6039      	str	r1, [r7, #0]
 801ba96:	1dbb      	adds	r3, r7, #6
 801ba98:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801ba9e:	230c      	movs	r3, #12
 801baa0:	18fb      	adds	r3, r7, r3
 801baa2:	0018      	movs	r0, r3
 801baa4:	f7fe f89d 	bl	8019be2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801baa8:	1dbb      	adds	r3, r7, #6
 801baaa:	881b      	ldrh	r3, [r3, #0]
 801baac:	00da      	lsls	r2, r3, #3
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 801bab2:	3308      	adds	r3, #8
 801bab4:	0019      	movs	r1, r3
 801bab6:	683a      	ldr	r2, [r7, #0]
 801bab8:	2308      	movs	r3, #8
 801baba:	2000      	movs	r0, #0
 801babc:	f002 fd54 	bl	801e568 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801bac0:	2300      	movs	r3, #0
}
 801bac2:	0018      	movs	r0, r3
 801bac4:	46bd      	mov	sp, r7
 801bac6:	b004      	add	sp, #16
 801bac8:	bd80      	pop	{r7, pc}

0801baca <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 801baca:	b580      	push	{r7, lr}
 801bacc:	b084      	sub	sp, #16
 801bace:	af00      	add	r7, sp, #0
 801bad0:	0002      	movs	r2, r0
 801bad2:	6039      	str	r1, [r7, #0]
 801bad4:	1dbb      	adds	r3, r7, #6
 801bad6:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801bad8:	2300      	movs	r3, #0
 801bada:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801badc:	230c      	movs	r3, #12
 801bade:	18fb      	adds	r3, r7, r3
 801bae0:	0018      	movs	r0, r3
 801bae2:	f7fe f87e 	bl	8019be2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801bae6:	1dbb      	adds	r3, r7, #6
 801bae8:	881b      	ldrh	r3, [r3, #0]
 801baea:	00da      	lsls	r2, r3, #3
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 801baf0:	3308      	adds	r3, #8
 801baf2:	0019      	movs	r1, r3
 801baf4:	683a      	ldr	r2, [r7, #0]
 801baf6:	2308      	movs	r3, #8
 801baf8:	2000      	movs	r0, #0
 801bafa:	f002 fdd9 	bl	801e6b0 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801bafe:	2300      	movs	r3, #0
}
 801bb00:	0018      	movs	r0, r3
 801bb02:	46bd      	mov	sp, r7
 801bb04:	b004      	add	sp, #16
 801bb06:	bd80      	pop	{r7, pc}

0801bb08 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b082      	sub	sp, #8
 801bb0c:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 801bb0e:	003b      	movs	r3, r7
 801bb10:	0018      	movs	r0, r3
 801bb12:	f7ff ff85 	bl	801ba20 <_itsdk_error_readHeader>
 801bb16:	0003      	movs	r3, r0
 801bb18:	2b01      	cmp	r3, #1
 801bb1a:	d10c      	bne.n	801bb36 <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 801bb1c:	003b      	movs	r3, r7
 801bb1e:	4a0f      	ldr	r2, [pc, #60]	; (801bb5c <itsdk_error_setup+0x54>)
 801bb20:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 801bb22:	003b      	movs	r3, r7
 801bb24:	2200      	movs	r2, #0
 801bb26:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 801bb28:	003b      	movs	r3, r7
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 801bb2e:	003b      	movs	r3, r7
 801bb30:	0018      	movs	r0, r3
 801bb32:	f7ff ff95 	bl	801ba60 <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 801bb36:	4b0a      	ldr	r3, [pc, #40]	; (801bb60 <itsdk_error_setup+0x58>)
 801bb38:	4a0a      	ldr	r2, [pc, #40]	; (801bb64 <itsdk_error_setup+0x5c>)
 801bb3a:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 801bb3c:	4b08      	ldr	r3, [pc, #32]	; (801bb60 <itsdk_error_setup+0x58>)
 801bb3e:	2200      	movs	r2, #0
 801bb40:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 801bb42:	4b07      	ldr	r3, [pc, #28]	; (801bb60 <itsdk_error_setup+0x58>)
 801bb44:	2200      	movs	r2, #0
 801bb46:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 801bb48:	4b05      	ldr	r3, [pc, #20]	; (801bb60 <itsdk_error_setup+0x58>)
 801bb4a:	0018      	movs	r0, r3
 801bb4c:	f7fd f96a 	bl	8018e24 <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 801bb50:	2300      	movs	r3, #0
}
 801bb52:	0018      	movs	r0, r3
 801bb54:	46bd      	mov	sp, r7
 801bb56:	b002      	add	sp, #8
 801bb58:	bd80      	pop	{r7, pc}
 801bb5a:	46c0      	nop			; (mov r8, r8)
 801bb5c:	ffffae73 	.word	0xffffae73
 801bb60:	200011f8 	.word	0x200011f8
 801bb64:	0801bdcd 	.word	0x0801bdcd

0801bb68 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 801bb68:	b590      	push	{r4, r7, lr}
 801bb6a:	b08b      	sub	sp, #44	; 0x2c
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
 801bb70:	000a      	movs	r2, r1
 801bb72:	1cbb      	adds	r3, r7, #2
 801bb74:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	2380      	movs	r3, #128	; 0x80
 801bb7a:	055b      	lsls	r3, r3, #21
 801bb7c:	4013      	ands	r3, r2
 801bb7e:	d008      	beq.n	801bb92 <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 801bb80:	1cbb      	adds	r3, r7, #2
 801bb82:	881b      	ldrh	r3, [r3, #0]
 801bb84:	031b      	lsls	r3, r3, #12
 801bb86:	001a      	movs	r2, r3
 801bb88:	4b4b      	ldr	r3, [pc, #300]	; (801bcb8 <itsdk_error_report+0x150>)
 801bb8a:	4013      	ands	r3, r2
 801bb8c:	687a      	ldr	r2, [r7, #4]
 801bb8e:	4313      	orrs	r3, r2
 801bb90:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 801bb92:	f001 faab 	bl	801d0ec <itsdk_time_get_ms>
 801bb96:	22fa      	movs	r2, #250	; 0xfa
 801bb98:	0092      	lsls	r2, r2, #2
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	f7e4 fc94 	bl	80004c8 <__aeabi_uldivmod>
 801bba0:	0003      	movs	r3, r0
 801bba2:	000c      	movs	r4, r1
 801bba4:	61bb      	str	r3, [r7, #24]
 801bba6:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 801bba8:	2110      	movs	r1, #16
 801bbaa:	187b      	adds	r3, r7, r1
 801bbac:	687a      	ldr	r2, [r7, #4]
 801bbae:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 801bbb0:	69ba      	ldr	r2, [r7, #24]
 801bbb2:	187b      	adds	r3, r7, r1
 801bbb4:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801bbb6:	2308      	movs	r3, #8
 801bbb8:	18fb      	adds	r3, r7, r3
 801bbba:	0018      	movs	r0, r3
 801bbbc:	f7ff ff30 	bl	801ba20 <_itsdk_error_readHeader>
 801bbc0:	0003      	movs	r3, r0
 801bbc2:	2b01      	cmp	r3, #1
 801bbc4:	d101      	bne.n	801bbca <itsdk_error_report+0x62>
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	e072      	b.n	801bcb0 <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 801bbca:	2408      	movs	r4, #8
 801bbcc:	193b      	adds	r3, r7, r4
 801bbce:	889b      	ldrh	r3, [r3, #4]
 801bbd0:	2210      	movs	r2, #16
 801bbd2:	18ba      	adds	r2, r7, r2
 801bbd4:	0011      	movs	r1, r2
 801bbd6:	0018      	movs	r0, r3
 801bbd8:	f7ff ff58 	bl	801ba8c <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 801bbdc:	193b      	adds	r3, r7, r4
 801bbde:	889b      	ldrh	r3, [r3, #4]
 801bbe0:	3301      	adds	r3, #1
 801bbe2:	4a36      	ldr	r2, [pc, #216]	; (801bcbc <itsdk_error_report+0x154>)
 801bbe4:	4013      	ands	r3, r2
 801bbe6:	d504      	bpl.n	801bbf2 <itsdk_error_report+0x8a>
 801bbe8:	3b01      	subs	r3, #1
 801bbea:	2240      	movs	r2, #64	; 0x40
 801bbec:	4252      	negs	r2, r2
 801bbee:	4313      	orrs	r3, r2
 801bbf0:	3301      	adds	r3, #1
 801bbf2:	b29a      	uxth	r2, r3
 801bbf4:	2108      	movs	r1, #8
 801bbf6:	187b      	adds	r3, r7, r1
 801bbf8:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 801bbfa:	187b      	adds	r3, r7, r1
 801bbfc:	889a      	ldrh	r2, [r3, #4]
 801bbfe:	187b      	adds	r3, r7, r1
 801bc00:	885b      	ldrh	r3, [r3, #2]
 801bc02:	429a      	cmp	r2, r3
 801bc04:	d10f      	bne.n	801bc26 <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 801bc06:	2308      	movs	r3, #8
 801bc08:	18fb      	adds	r3, r7, r3
 801bc0a:	885b      	ldrh	r3, [r3, #2]
 801bc0c:	3301      	adds	r3, #1
 801bc0e:	4a2b      	ldr	r2, [pc, #172]	; (801bcbc <itsdk_error_report+0x154>)
 801bc10:	4013      	ands	r3, r2
 801bc12:	d504      	bpl.n	801bc1e <itsdk_error_report+0xb6>
 801bc14:	3b01      	subs	r3, #1
 801bc16:	2240      	movs	r2, #64	; 0x40
 801bc18:	4252      	negs	r2, r2
 801bc1a:	4313      	orrs	r3, r2
 801bc1c:	3301      	adds	r3, #1
 801bc1e:	b29a      	uxth	r2, r3
 801bc20:	2308      	movs	r3, #8
 801bc22:	18fb      	adds	r3, r7, r3
 801bc24:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 801bc26:	2308      	movs	r3, #8
 801bc28:	18fb      	adds	r3, r7, r3
 801bc2a:	0018      	movs	r0, r3
 801bc2c:	f7ff ff18 	bl	801ba60 <_itsdk_error_writeHeader>

	char t = 'S';
 801bc30:	2327      	movs	r3, #39	; 0x27
 801bc32:	18fb      	adds	r3, r7, r3
 801bc34:	2253      	movs	r2, #83	; 0x53
 801bc36:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 801bc38:	687a      	ldr	r2, [r7, #4]
 801bc3a:	2380      	movs	r3, #128	; 0x80
 801bc3c:	059b      	lsls	r3, r3, #22
 801bc3e:	4013      	ands	r3, r2
 801bc40:	d003      	beq.n	801bc4a <itsdk_error_report+0xe2>
		t = 'A';
 801bc42:	2327      	movs	r3, #39	; 0x27
 801bc44:	18fb      	adds	r3, r7, r3
 801bc46:	2241      	movs	r2, #65	; 0x41
 801bc48:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	0f9b      	lsrs	r3, r3, #30
 801bc4e:	079a      	lsls	r2, r3, #30
 801bc50:	23c0      	movs	r3, #192	; 0xc0
 801bc52:	061b      	lsls	r3, r3, #24
 801bc54:	429a      	cmp	r2, r3
 801bc56:	d108      	bne.n	801bc6a <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 801bc58:	2327      	movs	r3, #39	; 0x27
 801bc5a:	18fb      	adds	r3, r7, r3
 801bc5c:	7819      	ldrb	r1, [r3, #0]
 801bc5e:	687a      	ldr	r2, [r7, #4]
 801bc60:	4b17      	ldr	r3, [pc, #92]	; (801bcc0 <itsdk_error_report+0x158>)
 801bc62:	0018      	movs	r0, r3
 801bc64:	f000 fa0c 	bl	801c080 <log_error>
		while(1);
 801bc68:	e7fe      	b.n	801bc68 <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	da08      	bge.n	801bc82 <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 801bc70:	2327      	movs	r3, #39	; 0x27
 801bc72:	18fb      	adds	r3, r7, r3
 801bc74:	7819      	ldrb	r1, [r3, #0]
 801bc76:	687a      	ldr	r2, [r7, #4]
 801bc78:	4b12      	ldr	r3, [pc, #72]	; (801bcc4 <itsdk_error_report+0x15c>)
 801bc7a:	0018      	movs	r0, r3
 801bc7c:	f000 fa00 	bl	801c080 <log_error>
 801bc80:	e015      	b.n	801bcae <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 801bc82:	687a      	ldr	r2, [r7, #4]
 801bc84:	2380      	movs	r3, #128	; 0x80
 801bc86:	05db      	lsls	r3, r3, #23
 801bc88:	4013      	ands	r3, r2
 801bc8a:	d008      	beq.n	801bc9e <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 801bc8c:	2327      	movs	r3, #39	; 0x27
 801bc8e:	18fb      	adds	r3, r7, r3
 801bc90:	7819      	ldrb	r1, [r3, #0]
 801bc92:	687a      	ldr	r2, [r7, #4]
 801bc94:	4b0c      	ldr	r3, [pc, #48]	; (801bcc8 <itsdk_error_report+0x160>)
 801bc96:	0018      	movs	r0, r3
 801bc98:	f000 fa38 	bl	801c10c <log_warn>
 801bc9c:	e007      	b.n	801bcae <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 801bc9e:	2327      	movs	r3, #39	; 0x27
 801bca0:	18fb      	adds	r3, r7, r3
 801bca2:	7819      	ldrb	r1, [r3, #0]
 801bca4:	687a      	ldr	r2, [r7, #4]
 801bca6:	4b09      	ldr	r3, [pc, #36]	; (801bccc <itsdk_error_report+0x164>)
 801bca8:	0018      	movs	r0, r3
 801bcaa:	f000 fa75 	bl	801c198 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 801bcae:	2300      	movs	r3, #0
}
 801bcb0:	0018      	movs	r0, r3
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	b00b      	add	sp, #44	; 0x2c
 801bcb6:	bd90      	pop	{r4, r7, pc}
 801bcb8:	0ffff000 	.word	0x0ffff000
 801bcbc:	8000003f 	.word	0x8000003f
 801bcc0:	080211a8 	.word	0x080211a8
 801bcc4:	080211c8 	.word	0x080211c8
 801bcc8:	080211dc 	.word	0x080211dc
 801bccc:	080211f0 	.word	0x080211f0

0801bcd0 <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b084      	sub	sp, #16
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
 801bcd8:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 801bcda:	2308      	movs	r3, #8
 801bcdc:	18fb      	adds	r3, r7, r3
 801bcde:	0018      	movs	r0, r3
 801bce0:	f7ff fe9e 	bl	801ba20 <_itsdk_error_readHeader>
 801bce4:	1e03      	subs	r3, r0, #0
 801bce6:	d138      	bne.n	801bd5a <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	881b      	ldrh	r3, [r3, #0]
 801bcec:	4a22      	ldr	r2, [pc, #136]	; (801bd78 <itsdk_error_get+0xa8>)
 801bcee:	4293      	cmp	r3, r2
 801bcf0:	d104      	bne.n	801bcfc <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 801bcf2:	2308      	movs	r3, #8
 801bcf4:	18fb      	adds	r3, r7, r3
 801bcf6:	885a      	ldrh	r2, [r3, #2]
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	881a      	ldrh	r2, [r3, #0]
 801bd00:	2308      	movs	r3, #8
 801bd02:	18fb      	adds	r3, r7, r3
 801bd04:	889b      	ldrh	r3, [r3, #4]
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d027      	beq.n	801bd5a <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	881b      	ldrh	r3, [r3, #0]
 801bd0e:	2b3f      	cmp	r3, #63	; 0x3f
 801bd10:	d823      	bhi.n	801bd5a <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	881b      	ldrh	r3, [r3, #0]
 801bd16:	683a      	ldr	r2, [r7, #0]
 801bd18:	0011      	movs	r1, r2
 801bd1a:	0018      	movs	r0, r3
 801bd1c:	f7ff fed5 	bl	801baca <_itsdk_error_read>
 801bd20:	1e03      	subs	r3, r0, #0
 801bd22:	d11a      	bne.n	801bd5a <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	881b      	ldrh	r3, [r3, #0]
 801bd28:	3301      	adds	r3, #1
 801bd2a:	4a14      	ldr	r2, [pc, #80]	; (801bd7c <itsdk_error_get+0xac>)
 801bd2c:	4013      	ands	r3, r2
 801bd2e:	d504      	bpl.n	801bd3a <itsdk_error_get+0x6a>
 801bd30:	3b01      	subs	r3, #1
 801bd32:	2240      	movs	r2, #64	; 0x40
 801bd34:	4252      	negs	r2, r2
 801bd36:	4313      	orrs	r3, r2
 801bd38:	3301      	adds	r3, #1
 801bd3a:	b29a      	uxth	r2, r3
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	881a      	ldrh	r2, [r3, #0]
 801bd44:	2308      	movs	r3, #8
 801bd46:	18fb      	adds	r3, r7, r3
 801bd48:	889b      	ldrh	r3, [r3, #4]
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d103      	bne.n	801bd56 <itsdk_error_get+0x86>
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	2201      	movs	r2, #1
 801bd52:	4252      	negs	r2, r2
 801bd54:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 801bd56:	2300      	movs	r3, #0
 801bd58:	e00a      	b.n	801bd70 <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	2200      	movs	r2, #0
 801bd5e:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	2200      	movs	r2, #0
 801bd64:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	2201      	movs	r2, #1
 801bd6a:	4252      	negs	r2, r2
 801bd6c:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 801bd6e:	2301      	movs	r3, #1
}
 801bd70:	0018      	movs	r0, r3
 801bd72:	46bd      	mov	sp, r7
 801bd74:	b004      	add	sp, #16
 801bd76:	bd80      	pop	{r7, pc}
 801bd78:	0000fffe 	.word	0x0000fffe
 801bd7c:	8000003f 	.word	0x8000003f

0801bd80 <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b082      	sub	sp, #8
 801bd84:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801bd86:	003b      	movs	r3, r7
 801bd88:	0018      	movs	r0, r3
 801bd8a:	f7ff fe49 	bl	801ba20 <_itsdk_error_readHeader>
 801bd8e:	0003      	movs	r3, r0
 801bd90:	2b01      	cmp	r3, #1
 801bd92:	d101      	bne.n	801bd98 <itsdk_error_clear+0x18>
 801bd94:	2301      	movs	r3, #1
 801bd96:	e008      	b.n	801bdaa <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 801bd98:	003b      	movs	r3, r7
 801bd9a:	889a      	ldrh	r2, [r3, #4]
 801bd9c:	003b      	movs	r3, r7
 801bd9e:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 801bda0:	003b      	movs	r3, r7
 801bda2:	0018      	movs	r0, r3
 801bda4:	f7ff fe5c 	bl	801ba60 <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 801bda8:	2300      	movs	r3, #0
}
 801bdaa:	0018      	movs	r0, r3
 801bdac:	46bd      	mov	sp, r7
 801bdae:	b002      	add	sp, #8
 801bdb0:	bd80      	pop	{r7, pc}

0801bdb2 <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 801bdb2:	b580      	push	{r7, lr}
 801bdb4:	b082      	sub	sp, #8
 801bdb6:	af00      	add	r7, sp, #0
 801bdb8:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	2282      	movs	r2, #130	; 0x82
 801bdbe:	0092      	lsls	r2, r2, #2
 801bdc0:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 801bdc2:	2300      	movs	r3, #0
}
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	b002      	add	sp, #8
 801bdca:	bd80      	pop	{r7, pc}

0801bdcc <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 801bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdce:	b08b      	sub	sp, #44	; 0x2c
 801bdd0:	af04      	add	r7, sp, #16
 801bdd2:	6078      	str	r0, [r7, #4]
 801bdd4:	000a      	movs	r2, r1
 801bdd6:	1cfb      	adds	r3, r7, #3
 801bdd8:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801bdda:	1cfb      	adds	r3, r7, #3
 801bddc:	781b      	ldrb	r3, [r3, #0]
 801bdde:	2b01      	cmp	r3, #1
 801bde0:	d000      	beq.n	801bde4 <_itsdk_error_consolePriv+0x18>
 801bde2:	e087      	b.n	801bef4 <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	781b      	ldrb	r3, [r3, #0]
 801bde8:	2b45      	cmp	r3, #69	; 0x45
 801bdea:	d100      	bne.n	801bdee <_itsdk_error_consolePriv+0x22>
 801bdec:	e07a      	b.n	801bee4 <_itsdk_error_consolePriv+0x118>
 801bdee:	2b65      	cmp	r3, #101	; 0x65
 801bdf0:	d010      	beq.n	801be14 <_itsdk_error_consolePriv+0x48>
 801bdf2:	2b3f      	cmp	r3, #63	; 0x3f
 801bdf4:	d000      	beq.n	801bdf8 <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 801bdf6:	e07e      	b.n	801bef6 <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 801bdf8:	4b41      	ldr	r3, [pc, #260]	; (801bf00 <_itsdk_error_consolePriv+0x134>)
 801bdfa:	0018      	movs	r0, r3
 801bdfc:	f7fc fe52 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 801be00:	4b40      	ldr	r3, [pc, #256]	; (801bf04 <_itsdk_error_consolePriv+0x138>)
 801be02:	0018      	movs	r0, r3
 801be04:	f7fc fe4e 	bl	8018aa4 <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 801be08:	4b3f      	ldr	r3, [pc, #252]	; (801bf08 <_itsdk_error_consolePriv+0x13c>)
 801be0a:	0018      	movs	r0, r3
 801be0c:	f7fc fe4a 	bl	8018aa4 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801be10:	2300      	movs	r3, #0
 801be12:	e071      	b.n	801bef8 <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 801be14:	2314      	movs	r3, #20
 801be16:	18fb      	adds	r3, r7, r3
 801be18:	2202      	movs	r2, #2
 801be1a:	4252      	negs	r2, r2
 801be1c:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801be1e:	e051      	b.n	801bec4 <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 801be20:	230c      	movs	r3, #12
 801be22:	18fb      	adds	r3, r7, r3
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	0f9b      	lsrs	r3, r3, #30
 801be28:	079b      	lsls	r3, r3, #30
 801be2a:	2280      	movs	r2, #128	; 0x80
 801be2c:	0612      	lsls	r2, r2, #24
 801be2e:	4293      	cmp	r3, r2
 801be30:	d011      	beq.n	801be56 <_itsdk_error_consolePriv+0x8a>
 801be32:	22c0      	movs	r2, #192	; 0xc0
 801be34:	0612      	lsls	r2, r2, #24
 801be36:	4293      	cmp	r3, r2
 801be38:	d012      	beq.n	801be60 <_itsdk_error_consolePriv+0x94>
 801be3a:	2280      	movs	r2, #128	; 0x80
 801be3c:	05d2      	lsls	r2, r2, #23
 801be3e:	4293      	cmp	r3, r2
 801be40:	d004      	beq.n	801be4c <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 801be42:	2317      	movs	r3, #23
 801be44:	18fb      	adds	r3, r7, r3
 801be46:	2249      	movs	r2, #73	; 0x49
 801be48:	701a      	strb	r2, [r3, #0]
 801be4a:	e00e      	b.n	801be6a <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 801be4c:	2317      	movs	r3, #23
 801be4e:	18fb      	adds	r3, r7, r3
 801be50:	2257      	movs	r2, #87	; 0x57
 801be52:	701a      	strb	r2, [r3, #0]
 801be54:	e009      	b.n	801be6a <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 801be56:	2317      	movs	r3, #23
 801be58:	18fb      	adds	r3, r7, r3
 801be5a:	2245      	movs	r2, #69	; 0x45
 801be5c:	701a      	strb	r2, [r3, #0]
 801be5e:	e004      	b.n	801be6a <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 801be60:	2317      	movs	r3, #23
 801be62:	18fb      	adds	r3, r7, r3
 801be64:	2246      	movs	r2, #70	; 0x46
 801be66:	701a      	strb	r2, [r3, #0]
 801be68:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be6a:	2317      	movs	r3, #23
 801be6c:	18fb      	adds	r3, r7, r3
 801be6e:	781c      	ldrb	r4, [r3, #0]
 801be70:	220c      	movs	r2, #12
 801be72:	18bb      	adds	r3, r7, r2
 801be74:	681d      	ldr	r5, [r3, #0]
 801be76:	18bb      	adds	r3, r7, r2
 801be78:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 801be7a:	18bb      	adds	r3, r7, r2
 801be7c:	685a      	ldr	r2, [r3, #4]
 801be7e:	2380      	movs	r3, #128	; 0x80
 801be80:	059b      	lsls	r3, r3, #22
 801be82:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be84:	d001      	beq.n	801be8a <_itsdk_error_consolePriv+0xbe>
 801be86:	2241      	movs	r2, #65	; 0x41
 801be88:	e000      	b.n	801be8c <_itsdk_error_consolePriv+0xc0>
 801be8a:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 801be8c:	200c      	movs	r0, #12
 801be8e:	183b      	adds	r3, r7, r0
 801be90:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801be92:	051b      	lsls	r3, r3, #20
 801be94:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801be96:	183b      	adds	r3, r7, r0
 801be98:	6858      	ldr	r0, [r3, #4]
 801be9a:	2380      	movs	r3, #128	; 0x80
 801be9c:	055b      	lsls	r3, r3, #21
 801be9e:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801bea0:	d006      	beq.n	801beb0 <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801bea2:	230c      	movs	r3, #12
 801bea4:	18fb      	adds	r3, r7, r3
 801bea6:	685b      	ldr	r3, [r3, #4]
 801bea8:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801beaa:	041b      	lsls	r3, r3, #16
 801beac:	0c1b      	lsrs	r3, r3, #16
 801beae:	e000      	b.n	801beb2 <_itsdk_error_consolePriv+0xe6>
 801beb0:	2300      	movs	r3, #0
 801beb2:	4816      	ldr	r0, [pc, #88]	; (801bf0c <_itsdk_error_consolePriv+0x140>)
 801beb4:	9302      	str	r3, [sp, #8]
 801beb6:	9101      	str	r1, [sp, #4]
 801beb8:	9200      	str	r2, [sp, #0]
 801beba:	0033      	movs	r3, r6
 801bebc:	002a      	movs	r2, r5
 801bebe:	0021      	movs	r1, r4
 801bec0:	f7fc fdf0 	bl	8018aa4 <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801bec4:	230c      	movs	r3, #12
 801bec6:	18fa      	adds	r2, r7, r3
 801bec8:	2314      	movs	r3, #20
 801beca:	18fb      	adds	r3, r7, r3
 801becc:	0011      	movs	r1, r2
 801bece:	0018      	movs	r0, r3
 801bed0:	f7ff fefe 	bl	801bcd0 <itsdk_error_get>
 801bed4:	1e03      	subs	r3, r0, #0
 801bed6:	d0a3      	beq.n	801be20 <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 801bed8:	4b0d      	ldr	r3, [pc, #52]	; (801bf10 <_itsdk_error_consolePriv+0x144>)
 801beda:	0018      	movs	r0, r3
 801bedc:	f7fc fde2 	bl	8018aa4 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801bee0:	2300      	movs	r3, #0
 801bee2:	e009      	b.n	801bef8 <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 801bee4:	f7ff ff4c 	bl	801bd80 <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 801bee8:	4b09      	ldr	r3, [pc, #36]	; (801bf10 <_itsdk_error_consolePriv+0x144>)
 801beea:	0018      	movs	r0, r3
 801beec:	f7fc fdda 	bl	8018aa4 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801bef0:	2300      	movs	r3, #0
 801bef2:	e001      	b.n	801bef8 <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 801bef4:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 801bef6:	2301      	movs	r3, #1
}
 801bef8:	0018      	movs	r0, r3
 801befa:	46bd      	mov	sp, r7
 801befc:	b007      	add	sp, #28
 801befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf00:	08021204 	.word	0x08021204
 801bf04:	08021214 	.word	0x08021214
 801bf08:	08021234 	.word	0x08021234
 801bf0c:	08021258 	.word	0x08021258
 801bf10:	08021284 	.word	0x08021284

0801bf14 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b082      	sub	sp, #8
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	0002      	movs	r2, r0
 801bf1c:	1dbb      	adds	r3, r7, #6
 801bf1e:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 801bf20:	1dbb      	adds	r3, r7, #6
 801bf22:	881b      	ldrh	r3, [r3, #0]
 801bf24:	4a51      	ldr	r2, [pc, #324]	; (801c06c <log_init+0x158>)
 801bf26:	4013      	ands	r3, r2
 801bf28:	17da      	asrs	r2, r3, #31
 801bf2a:	1ad3      	subs	r3, r2, r3
 801bf2c:	0fdb      	lsrs	r3, r3, #31
 801bf2e:	b2da      	uxtb	r2, r3
 801bf30:	4b4f      	ldr	r3, [pc, #316]	; (801c070 <log_init+0x15c>)
 801bf32:	2101      	movs	r1, #1
 801bf34:	400a      	ands	r2, r1
 801bf36:	1890      	adds	r0, r2, r2
 801bf38:	781a      	ldrb	r2, [r3, #0]
 801bf3a:	2102      	movs	r1, #2
 801bf3c:	438a      	bics	r2, r1
 801bf3e:	1c11      	adds	r1, r2, #0
 801bf40:	1c02      	adds	r2, r0, #0
 801bf42:	430a      	orrs	r2, r1
 801bf44:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 801bf46:	1dbb      	adds	r3, r7, #6
 801bf48:	881b      	ldrh	r3, [r3, #0]
 801bf4a:	4a4a      	ldr	r2, [pc, #296]	; (801c074 <log_init+0x160>)
 801bf4c:	4013      	ands	r3, r2
 801bf4e:	17da      	asrs	r2, r3, #31
 801bf50:	1ad3      	subs	r3, r2, r3
 801bf52:	0fdb      	lsrs	r3, r3, #31
 801bf54:	b2da      	uxtb	r2, r3
 801bf56:	4b46      	ldr	r3, [pc, #280]	; (801c070 <log_init+0x15c>)
 801bf58:	2101      	movs	r1, #1
 801bf5a:	400a      	ands	r2, r1
 801bf5c:	0090      	lsls	r0, r2, #2
 801bf5e:	781a      	ldrb	r2, [r3, #0]
 801bf60:	2104      	movs	r1, #4
 801bf62:	438a      	bics	r2, r1
 801bf64:	1c11      	adds	r1, r2, #0
 801bf66:	1c02      	adds	r2, r0, #0
 801bf68:	430a      	orrs	r2, r1
 801bf6a:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 801bf6c:	1dbb      	adds	r3, r7, #6
 801bf6e:	881b      	ldrh	r3, [r3, #0]
 801bf70:	4a41      	ldr	r2, [pc, #260]	; (801c078 <log_init+0x164>)
 801bf72:	4013      	ands	r3, r2
 801bf74:	17da      	asrs	r2, r3, #31
 801bf76:	1ad3      	subs	r3, r2, r3
 801bf78:	0fdb      	lsrs	r3, r3, #31
 801bf7a:	b2da      	uxtb	r2, r3
 801bf7c:	4b3c      	ldr	r3, [pc, #240]	; (801c070 <log_init+0x15c>)
 801bf7e:	2101      	movs	r1, #1
 801bf80:	400a      	ands	r2, r1
 801bf82:	00d0      	lsls	r0, r2, #3
 801bf84:	781a      	ldrb	r2, [r3, #0]
 801bf86:	2108      	movs	r1, #8
 801bf88:	438a      	bics	r2, r1
 801bf8a:	1c11      	adds	r1, r2, #0
 801bf8c:	1c02      	adds	r2, r0, #0
 801bf8e:	430a      	orrs	r2, r1
 801bf90:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 801bf92:	1dbb      	adds	r3, r7, #6
 801bf94:	881b      	ldrh	r3, [r3, #0]
 801bf96:	4a39      	ldr	r2, [pc, #228]	; (801c07c <log_init+0x168>)
 801bf98:	4013      	ands	r3, r2
 801bf9a:	17da      	asrs	r2, r3, #31
 801bf9c:	1ad3      	subs	r3, r2, r3
 801bf9e:	0fdb      	lsrs	r3, r3, #31
 801bfa0:	b2da      	uxtb	r2, r3
 801bfa2:	4b33      	ldr	r3, [pc, #204]	; (801c070 <log_init+0x15c>)
 801bfa4:	2101      	movs	r1, #1
 801bfa6:	400a      	ands	r2, r1
 801bfa8:	0110      	lsls	r0, r2, #4
 801bfaa:	781a      	ldrb	r2, [r3, #0]
 801bfac:	2110      	movs	r1, #16
 801bfae:	438a      	bics	r2, r1
 801bfb0:	1c11      	adds	r1, r2, #0
 801bfb2:	1c02      	adds	r2, r0, #0
 801bfb4:	430a      	orrs	r2, r1
 801bfb6:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 801bfb8:	1dbb      	adds	r3, r7, #6
 801bfba:	881a      	ldrh	r2, [r3, #0]
 801bfbc:	23f0      	movs	r3, #240	; 0xf0
 801bfbe:	011b      	lsls	r3, r3, #4
 801bfc0:	4013      	ands	r3, r2
 801bfc2:	17da      	asrs	r2, r3, #31
 801bfc4:	1ad3      	subs	r3, r2, r3
 801bfc6:	0fdb      	lsrs	r3, r3, #31
 801bfc8:	b2da      	uxtb	r2, r3
 801bfca:	4b29      	ldr	r3, [pc, #164]	; (801c070 <log_init+0x15c>)
 801bfcc:	2101      	movs	r1, #1
 801bfce:	400a      	ands	r2, r1
 801bfd0:	0150      	lsls	r0, r2, #5
 801bfd2:	781a      	ldrb	r2, [r3, #0]
 801bfd4:	2120      	movs	r1, #32
 801bfd6:	438a      	bics	r2, r1
 801bfd8:	1c11      	adds	r1, r2, #0
 801bfda:	1c02      	adds	r2, r0, #0
 801bfdc:	430a      	orrs	r2, r1
 801bfde:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 801bfe0:	1dbb      	adds	r3, r7, #6
 801bfe2:	881b      	ldrh	r3, [r3, #0]
 801bfe4:	22f0      	movs	r2, #240	; 0xf0
 801bfe6:	4013      	ands	r3, r2
 801bfe8:	17da      	asrs	r2, r3, #31
 801bfea:	1ad3      	subs	r3, r2, r3
 801bfec:	0fdb      	lsrs	r3, r3, #31
 801bfee:	b2da      	uxtb	r2, r3
 801bff0:	4b1f      	ldr	r3, [pc, #124]	; (801c070 <log_init+0x15c>)
 801bff2:	2101      	movs	r1, #1
 801bff4:	400a      	ands	r2, r1
 801bff6:	0190      	lsls	r0, r2, #6
 801bff8:	781a      	ldrb	r2, [r3, #0]
 801bffa:	2140      	movs	r1, #64	; 0x40
 801bffc:	438a      	bics	r2, r1
 801bffe:	1c11      	adds	r1, r2, #0
 801c000:	1c02      	adds	r2, r0, #0
 801c002:	430a      	orrs	r2, r1
 801c004:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 801c006:	1dbb      	adds	r3, r7, #6
 801c008:	881b      	ldrh	r3, [r3, #0]
 801c00a:	220f      	movs	r2, #15
 801c00c:	4013      	ands	r3, r2
 801c00e:	17da      	asrs	r2, r3, #31
 801c010:	1ad3      	subs	r3, r2, r3
 801c012:	0fdb      	lsrs	r3, r3, #31
 801c014:	b2da      	uxtb	r2, r3
 801c016:	4b16      	ldr	r3, [pc, #88]	; (801c070 <log_init+0x15c>)
 801c018:	01d0      	lsls	r0, r2, #7
 801c01a:	781a      	ldrb	r2, [r3, #0]
 801c01c:	217f      	movs	r1, #127	; 0x7f
 801c01e:	400a      	ands	r2, r1
 801c020:	1c11      	adds	r1, r2, #0
 801c022:	1c02      	adds	r2, r0, #0
 801c024:	430a      	orrs	r2, r1
 801c026:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 801c028:	1dbb      	adds	r3, r7, #6
 801c02a:	881a      	ldrh	r2, [r3, #0]
 801c02c:	23f0      	movs	r3, #240	; 0xf0
 801c02e:	021b      	lsls	r3, r3, #8
 801c030:	4013      	ands	r3, r2
 801c032:	17da      	asrs	r2, r3, #31
 801c034:	1ad3      	subs	r3, r2, r3
 801c036:	0fdb      	lsrs	r3, r3, #31
 801c038:	b2da      	uxtb	r2, r3
 801c03a:	4b0d      	ldr	r3, [pc, #52]	; (801c070 <log_init+0x15c>)
 801c03c:	2101      	movs	r1, #1
 801c03e:	400a      	ands	r2, r1
 801c040:	0010      	movs	r0, r2
 801c042:	785a      	ldrb	r2, [r3, #1]
 801c044:	2101      	movs	r1, #1
 801c046:	438a      	bics	r2, r1
 801c048:	1c11      	adds	r1, r2, #0
 801c04a:	1c02      	adds	r2, r0, #0
 801c04c:	430a      	orrs	r2, r1
 801c04e:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 801c050:	4b07      	ldr	r3, [pc, #28]	; (801c070 <log_init+0x15c>)
 801c052:	1dba      	adds	r2, r7, #6
 801c054:	8812      	ldrh	r2, [r2, #0]
 801c056:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 801c058:	4b05      	ldr	r3, [pc, #20]	; (801c070 <log_init+0x15c>)
 801c05a:	781a      	ldrb	r2, [r3, #0]
 801c05c:	2101      	movs	r1, #1
 801c05e:	430a      	orrs	r2, r1
 801c060:	701a      	strb	r2, [r3, #0]
  return true;
 801c062:	2301      	movs	r3, #1
}
 801c064:	0018      	movs	r0, r3
 801c066:	46bd      	mov	sp, r7
 801c068:	b002      	add	sp, #8
 801c06a:	bd80      	pop	{r7, pc}
 801c06c:	00001111 	.word	0x00001111
 801c070:	200016b8 	.word	0x200016b8
 801c074:	00002222 	.word	0x00002222
 801c078:	00004444 	.word	0x00004444
 801c07c:	00008888 	.word	0x00008888

0801c080 <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 801c080:	b40f      	push	{r0, r1, r2, r3}
 801c082:	b580      	push	{r7, lr}
 801c084:	b096      	sub	sp, #88	; 0x58
 801c086:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 801c088:	4b1f      	ldr	r3, [pc, #124]	; (801c108 <log_error+0x88>)
 801c08a:	781b      	ldrb	r3, [r3, #0]
 801c08c:	2202      	movs	r2, #2
 801c08e:	4013      	ands	r3, r2
 801c090:	b2db      	uxtb	r3, r3
 801c092:	2b00      	cmp	r3, #0
 801c094:	d031      	beq.n	801c0fa <log_error+0x7a>
 801c096:	4b1c      	ldr	r3, [pc, #112]	; (801c108 <log_error+0x88>)
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	2201      	movs	r2, #1
 801c09c:	4013      	ands	r3, r2
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d02a      	beq.n	801c0fa <log_error+0x7a>
    va_start(args,format);
 801c0a4:	2364      	movs	r3, #100	; 0x64
 801c0a6:	18fb      	adds	r3, r7, r3
 801c0a8:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801c0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c0ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c0ae:	1d38      	adds	r0, r7, #4
 801c0b0:	2150      	movs	r1, #80	; 0x50
 801c0b2:	f003 f8a1 	bl	801f1f8 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801c0b6:	4b14      	ldr	r3, [pc, #80]	; (801c108 <log_error+0x88>)
 801c0b8:	781b      	ldrb	r3, [r3, #0]
 801c0ba:	2220      	movs	r2, #32
 801c0bc:	4013      	ands	r3, r2
 801c0be:	b2db      	uxtb	r3, r3
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d003      	beq.n	801c0cc <log_error+0x4c>
      serial1_print(fmtBuffer);
 801c0c4:	1d3b      	adds	r3, r7, #4
 801c0c6:	0018      	movs	r0, r3
 801c0c8:	f002 f97a 	bl	801e3c0 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801c0cc:	4b0e      	ldr	r3, [pc, #56]	; (801c108 <log_error+0x88>)
 801c0ce:	781b      	ldrb	r3, [r3, #0]
 801c0d0:	2240      	movs	r2, #64	; 0x40
 801c0d2:	4013      	ands	r3, r2
 801c0d4:	b2db      	uxtb	r3, r3
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d003      	beq.n	801c0e2 <log_error+0x62>
      serial2_print(fmtBuffer);
 801c0da:	1d3b      	adds	r3, r7, #4
 801c0dc:	0018      	movs	r0, r3
 801c0de:	f002 f977 	bl	801e3d0 <serial2_print>
    }

    if ( __log.onDebug  ) {
 801c0e2:	4b09      	ldr	r3, [pc, #36]	; (801c108 <log_error+0x88>)
 801c0e4:	781b      	ldrb	r3, [r3, #0]
 801c0e6:	227f      	movs	r2, #127	; 0x7f
 801c0e8:	4393      	bics	r3, r2
 801c0ea:	b2db      	uxtb	r3, r3
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d004      	beq.n	801c0fa <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 801c0f0:	1d3b      	adds	r3, r7, #4
 801c0f2:	0019      	movs	r1, r3
 801c0f4:	2003      	movs	r0, #3
 801c0f6:	f002 fa2b 	bl	801e550 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 801c0fa:	46c0      	nop			; (mov r8, r8)
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	b016      	add	sp, #88	; 0x58
 801c100:	bc80      	pop	{r7}
 801c102:	bc08      	pop	{r3}
 801c104:	b004      	add	sp, #16
 801c106:	4718      	bx	r3
 801c108:	200016b8 	.word	0x200016b8

0801c10c <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 801c10c:	b40f      	push	{r0, r1, r2, r3}
 801c10e:	b580      	push	{r7, lr}
 801c110:	b096      	sub	sp, #88	; 0x58
 801c112:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 801c114:	4b1f      	ldr	r3, [pc, #124]	; (801c194 <log_warn+0x88>)
 801c116:	781b      	ldrb	r3, [r3, #0]
 801c118:	2204      	movs	r2, #4
 801c11a:	4013      	ands	r3, r2
 801c11c:	b2db      	uxtb	r3, r3
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d031      	beq.n	801c186 <log_warn+0x7a>
 801c122:	4b1c      	ldr	r3, [pc, #112]	; (801c194 <log_warn+0x88>)
 801c124:	781b      	ldrb	r3, [r3, #0]
 801c126:	2201      	movs	r2, #1
 801c128:	4013      	ands	r3, r2
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d02a      	beq.n	801c186 <log_warn+0x7a>
    va_start(args,format);
 801c130:	2364      	movs	r3, #100	; 0x64
 801c132:	18fb      	adds	r3, r7, r3
 801c134:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801c136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c13a:	1d38      	adds	r0, r7, #4
 801c13c:	2150      	movs	r1, #80	; 0x50
 801c13e:	f003 f85b 	bl	801f1f8 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801c142:	4b14      	ldr	r3, [pc, #80]	; (801c194 <log_warn+0x88>)
 801c144:	781b      	ldrb	r3, [r3, #0]
 801c146:	2220      	movs	r2, #32
 801c148:	4013      	ands	r3, r2
 801c14a:	b2db      	uxtb	r3, r3
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d003      	beq.n	801c158 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 801c150:	1d3b      	adds	r3, r7, #4
 801c152:	0018      	movs	r0, r3
 801c154:	f002 f934 	bl	801e3c0 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801c158:	4b0e      	ldr	r3, [pc, #56]	; (801c194 <log_warn+0x88>)
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	2240      	movs	r2, #64	; 0x40
 801c15e:	4013      	ands	r3, r2
 801c160:	b2db      	uxtb	r3, r3
 801c162:	2b00      	cmp	r3, #0
 801c164:	d003      	beq.n	801c16e <log_warn+0x62>
    	serial2_print(fmtBuffer);
 801c166:	1d3b      	adds	r3, r7, #4
 801c168:	0018      	movs	r0, r3
 801c16a:	f002 f931 	bl	801e3d0 <serial2_print>
    }

    if ( __log.onDebug ) {
 801c16e:	4b09      	ldr	r3, [pc, #36]	; (801c194 <log_warn+0x88>)
 801c170:	781b      	ldrb	r3, [r3, #0]
 801c172:	227f      	movs	r2, #127	; 0x7f
 801c174:	4393      	bics	r3, r2
 801c176:	b2db      	uxtb	r3, r3
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d004      	beq.n	801c186 <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 801c17c:	1d3b      	adds	r3, r7, #4
 801c17e:	0019      	movs	r1, r3
 801c180:	2002      	movs	r0, #2
 801c182:	f002 f9e5 	bl	801e550 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 801c186:	46c0      	nop			; (mov r8, r8)
 801c188:	46bd      	mov	sp, r7
 801c18a:	b016      	add	sp, #88	; 0x58
 801c18c:	bc80      	pop	{r7}
 801c18e:	bc08      	pop	{r3}
 801c190:	b004      	add	sp, #16
 801c192:	4718      	bx	r3
 801c194:	200016b8 	.word	0x200016b8

0801c198 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 801c198:	b40f      	push	{r0, r1, r2, r3}
 801c19a:	b580      	push	{r7, lr}
 801c19c:	b096      	sub	sp, #88	; 0x58
 801c19e:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 801c1a0:	4b1f      	ldr	r3, [pc, #124]	; (801c220 <log_info+0x88>)
 801c1a2:	781b      	ldrb	r3, [r3, #0]
 801c1a4:	2208      	movs	r2, #8
 801c1a6:	4013      	ands	r3, r2
 801c1a8:	b2db      	uxtb	r3, r3
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d031      	beq.n	801c212 <log_info+0x7a>
 801c1ae:	4b1c      	ldr	r3, [pc, #112]	; (801c220 <log_info+0x88>)
 801c1b0:	781b      	ldrb	r3, [r3, #0]
 801c1b2:	2201      	movs	r2, #1
 801c1b4:	4013      	ands	r3, r2
 801c1b6:	b2db      	uxtb	r3, r3
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d02a      	beq.n	801c212 <log_info+0x7a>
    va_start(args,format);
 801c1bc:	2364      	movs	r3, #100	; 0x64
 801c1be:	18fb      	adds	r3, r7, r3
 801c1c0:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801c1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c1c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c1c6:	1d38      	adds	r0, r7, #4
 801c1c8:	2150      	movs	r1, #80	; 0x50
 801c1ca:	f003 f815 	bl	801f1f8 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801c1ce:	4b14      	ldr	r3, [pc, #80]	; (801c220 <log_info+0x88>)
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	2220      	movs	r2, #32
 801c1d4:	4013      	ands	r3, r2
 801c1d6:	b2db      	uxtb	r3, r3
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d003      	beq.n	801c1e4 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 801c1dc:	1d3b      	adds	r3, r7, #4
 801c1de:	0018      	movs	r0, r3
 801c1e0:	f002 f8ee 	bl	801e3c0 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801c1e4:	4b0e      	ldr	r3, [pc, #56]	; (801c220 <log_info+0x88>)
 801c1e6:	781b      	ldrb	r3, [r3, #0]
 801c1e8:	2240      	movs	r2, #64	; 0x40
 801c1ea:	4013      	ands	r3, r2
 801c1ec:	b2db      	uxtb	r3, r3
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d003      	beq.n	801c1fa <log_info+0x62>
    	serial2_print(fmtBuffer);
 801c1f2:	1d3b      	adds	r3, r7, #4
 801c1f4:	0018      	movs	r0, r3
 801c1f6:	f002 f8eb 	bl	801e3d0 <serial2_print>
    }

    if ( __log.onDebug ) {
 801c1fa:	4b09      	ldr	r3, [pc, #36]	; (801c220 <log_info+0x88>)
 801c1fc:	781b      	ldrb	r3, [r3, #0]
 801c1fe:	227f      	movs	r2, #127	; 0x7f
 801c200:	4393      	bics	r3, r2
 801c202:	b2db      	uxtb	r3, r3
 801c204:	2b00      	cmp	r3, #0
 801c206:	d004      	beq.n	801c212 <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 801c208:	1d3b      	adds	r3, r7, #4
 801c20a:	0019      	movs	r1, r3
 801c20c:	2001      	movs	r0, #1
 801c20e:	f002 f99f 	bl	801e550 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 801c212:	46c0      	nop			; (mov r8, r8)
 801c214:	46bd      	mov	sp, r7
 801c216:	b016      	add	sp, #88	; 0x58
 801c218:	bc80      	pop	{r7}
 801c21a:	bc08      	pop	{r3}
 801c21c:	b004      	add	sp, #16
 801c21e:	4718      	bx	r3
 801c220:	200016b8 	.word	0x200016b8

0801c224 <itsdk_lorawan_setup>:

/**
 * Init the LoRaWan Stack
 * Actually static
 */
itsdk_lorawan_init_t itsdk_lorawan_setup(uint16_t region, itsdk_lorawan_channelInit_t * channelConfig) {
 801c224:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c226:	b095      	sub	sp, #84	; 0x54
 801c228:	af02      	add	r7, sp, #8
 801c22a:	0002      	movs	r2, r0
 801c22c:	6039      	str	r1, [r7, #0]
 801c22e:	1dbb      	adds	r3, r7, #6
 801c230:	801a      	strh	r2, [r3, #0]
	static uint8_t devEui[8];
	static uint8_t appEui[8];
	static uint8_t appKey[16];

	// On first run we store the configuration into the SecureStore
	itsdk_lorawan_resetFactoryDefaults(false);
 801c232:	2000      	movs	r0, #0
 801c234:	f000 fa66 	bl	801c704 <itsdk_lorawan_resetFactoryDefaults>

	itsdk_lorawan_getDeviceEUI(devEui);
 801c238:	4b72      	ldr	r3, [pc, #456]	; (801c404 <itsdk_lorawan_setup+0x1e0>)
 801c23a:	0018      	movs	r0, r3
 801c23c:	f000 f9d6 	bl	801c5ec <itsdk_lorawan_getDeviceEUI>
	itsdk_lorawan_getAppEUI(appEui);
 801c240:	4b71      	ldr	r3, [pc, #452]	; (801c408 <itsdk_lorawan_setup+0x1e4>)
 801c242:	0018      	movs	r0, r3
 801c244:	f000 fa04 	bl	801c650 <itsdk_lorawan_getAppEUI>
	itsdk_lorawan_getAppKEY(appKey);
 801c248:	4b70      	ldr	r3, [pc, #448]	; (801c40c <itsdk_lorawan_setup+0x1e8>)
 801c24a:	0018      	movs	r0, r3
 801c24c:	f000 fa32 	bl	801c6b4 <itsdk_lorawan_getAppKEY>

//	log_info_array("DEV :",devEui,8);
//	log_info_array("APP :",appEui,8);
//	log_info_array("KEY :",appKey,16);

	Radio.IoInit();
 801c250:	4b6f      	ldr	r3, [pc, #444]	; (801c410 <itsdk_lorawan_setup+0x1ec>)
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	4798      	blx	r3
	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
		#if (ITSDK_LORAWAN_DEVEUI_SRC == __LORAWAN_DEVEUI_GENERATED)
		  itsdk_getUniqId(devEui, 8);
		#endif
	#else
	   if ( itsdk_config.sdk.lorawan.devEuiType == __LORAWAN_DEVEUI_GENERATED ) {
 801c256:	4b6f      	ldr	r3, [pc, #444]	; (801c414 <itsdk_lorawan_setup+0x1f0>)
 801c258:	7a9b      	ldrb	r3, [r3, #10]
 801c25a:	2230      	movs	r2, #48	; 0x30
 801c25c:	4013      	ands	r3, r2
 801c25e:	b2db      	uxtb	r3, r3
 801c260:	2b20      	cmp	r3, #32
 801c262:	d104      	bne.n	801c26e <itsdk_lorawan_setup+0x4a>
		  itsdk_getUniqId(devEui, 8);
 801c264:	4b67      	ldr	r3, [pc, #412]	; (801c404 <itsdk_lorawan_setup+0x1e0>)
 801c266:	2108      	movs	r1, #8
 801c268:	0018      	movs	r0, r3
 801c26a:	f002 f843 	bl	801e2f4 <itsdk_getUniqId>
		__config.adrEnable =LORAWAN_ADR_OFF;
		#else
		  #error Invalid ITSDK_LORAWAN_ADR configuration
		#endif
    #else
		__config.adrEnable = (itsdk_config.sdk.lorawan.adrMode == __LORAWAN_ADR_ON)?LORAWAN_ADR_ON:LORAWAN_ADR_OFF;
 801c26e:	4b69      	ldr	r3, [pc, #420]	; (801c414 <itsdk_lorawan_setup+0x1f0>)
 801c270:	7a9b      	ldrb	r3, [r3, #10]
 801c272:	223f      	movs	r2, #63	; 0x3f
 801c274:	4393      	bics	r3, r2
 801c276:	b2db      	uxtb	r3, r3
 801c278:	3b80      	subs	r3, #128	; 0x80
 801c27a:	425a      	negs	r2, r3
 801c27c:	4153      	adcs	r3, r2
 801c27e:	b2da      	uxtb	r2, r3
 801c280:	2114      	movs	r1, #20
 801c282:	187b      	adds	r3, r7, r1
 801c284:	701a      	strb	r2, [r3, #0]
	#endif

	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
	__config.JoinType = ITSDK_LORAWAN_ACTIVATION;
	#else
	__config.JoinType = itsdk_config.sdk.lorawan.joinMode;
 801c286:	4b63      	ldr	r3, [pc, #396]	; (801c414 <itsdk_lorawan_setup+0x1f0>)
 801c288:	7a9b      	ldrb	r3, [r3, #10]
 801c28a:	079b      	lsls	r3, r3, #30
 801c28c:	0f9b      	lsrs	r3, r3, #30
 801c28e:	b2db      	uxtb	r3, r3
 801c290:	001a      	movs	r2, r3
 801c292:	187b      	adds	r3, r7, r1
 801c294:	719a      	strb	r2, [r3, #6]
	#endif
	__config.devEui = devEui;
 801c296:	187b      	adds	r3, r7, r1
 801c298:	4a5a      	ldr	r2, [pc, #360]	; (801c404 <itsdk_lorawan_setup+0x1e0>)
 801c29a:	609a      	str	r2, [r3, #8]
		__config.enablePublicNetwork = true;
		#else
		__config.enablePublicNetwork = false;
		#endif
	#else
	__config.enablePublicNetwork = (itsdk_config.sdk.lorawan.networkType == __LORAWAN_NWK_PUBLIC);
 801c29c:	4b5d      	ldr	r3, [pc, #372]	; (801c414 <itsdk_lorawan_setup+0x1f0>)
 801c29e:	7a9b      	ldrb	r3, [r3, #10]
 801c2a0:	220c      	movs	r2, #12
 801c2a2:	4013      	ands	r3, r2
 801c2a4:	b2db      	uxtb	r3, r3
 801c2a6:	3b04      	subs	r3, #4
 801c2a8:	425a      	negs	r2, r3
 801c2aa:	4153      	adcs	r3, r2
 801c2ac:	b2da      	uxtb	r2, r3
 801c2ae:	187b      	adds	r3, r7, r1
 801c2b0:	709a      	strb	r2, [r3, #2]
	#endif


	__config.region = region;
 801c2b2:	187b      	adds	r3, r7, r1
 801c2b4:	1dba      	adds	r2, r7, #6
 801c2b6:	8812      	ldrh	r2, [r2, #0]
 801c2b8:	809a      	strh	r2, [r3, #4]
	__config.txDatarate = ITSDK_LORAWAN_DEFAULT_DR;
 801c2ba:	187b      	adds	r3, r7, r1
 801c2bc:	2201      	movs	r2, #1
 801c2be:	705a      	strb	r2, [r3, #1]
	#if ( ITSDK_LORAWAN_ACTIVATION &  __LORAWAN_OTAA )> 0
	__config.config.otaa.appEui = appEui;
 801c2c0:	187b      	adds	r3, r7, r1
 801c2c2:	4a51      	ldr	r2, [pc, #324]	; (801c408 <itsdk_lorawan_setup+0x1e4>)
 801c2c4:	60da      	str	r2, [r3, #12]
	__config.config.otaa.appKey = appKey;
 801c2c6:	187b      	adds	r3, r7, r1
 801c2c8:	4a50      	ldr	r2, [pc, #320]	; (801c40c <itsdk_lorawan_setup+0x1e8>)
 801c2ca:	611a      	str	r2, [r3, #16]
	__config.config.otaa.nwkKey = appKey;
 801c2cc:	187b      	adds	r3, r7, r1
 801c2ce:	4a4f      	ldr	r2, [pc, #316]	; (801c40c <itsdk_lorawan_setup+0x1e8>)
 801c2d0:	615a      	str	r2, [r3, #20]
	#else
		#error "ABP not yest supported"
	#endif

	lorawan_driver_LORA_Init(&__config);
 801c2d2:	000c      	movs	r4, r1
 801c2d4:	187b      	adds	r3, r7, r1
 801c2d6:	0018      	movs	r0, r3
 801c2d8:	f7ec f800 	bl	80082dc <lorawan_driver_LORA_Init>
	bzero(&__config,sizeof(__config));
 801c2dc:	193b      	adds	r3, r7, r4
 801c2de:	2120      	movs	r1, #32
 801c2e0:	0018      	movs	r0, r3
 801c2e2:	f002 fedf 	bl	801f0a4 <bzero>

	if ( channelConfig != NULL ) {
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d100      	bne.n	801c2ee <itsdk_lorawan_setup+0xca>
 801c2ec:	e084      	b.n	801c3f8 <itsdk_lorawan_setup+0x1d4>
		switch (region) {
 801c2ee:	1dbb      	adds	r3, r7, #6
 801c2f0:	881a      	ldrh	r2, [r3, #0]
 801c2f2:	2380      	movs	r3, #128	; 0x80
 801c2f4:	005b      	lsls	r3, r3, #1
 801c2f6:	429a      	cmp	r2, r3
 801c2f8:	d142      	bne.n	801c380 <itsdk_lorawan_setup+0x15c>
		case __LORAWAN_REGION_US915:
		{
			// US915 does not allow to addChannel ; all the possible channel are already defined
			// and activated. Here we basically unactivate the one we do not need
			uint16_t channels[6];
			bzero(channels,6*sizeof(uint16_t));
 801c2fa:	2308      	movs	r3, #8
 801c2fc:	18fb      	adds	r3, r7, r3
 801c2fe:	210c      	movs	r1, #12
 801c300:	0018      	movs	r0, r3
 801c302:	f002 fecf 	bl	801f0a4 <bzero>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c306:	2300      	movs	r3, #0
 801c308:	647b      	str	r3, [r7, #68]	; 0x44
 801c30a:	e02a      	b.n	801c362 <itsdk_lorawan_setup+0x13e>
				int channel = (channelConfig->channels[i].frequency - 902300000) / 200000; // get chan ID on the 72
 801c30c:	683a      	ldr	r2, [r7, #0]
 801c30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c310:	011b      	lsls	r3, r3, #4
 801c312:	18d3      	adds	r3, r2, r3
 801c314:	3308      	adds	r3, #8
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	4a3f      	ldr	r2, [pc, #252]	; (801c418 <itsdk_lorawan_setup+0x1f4>)
 801c31a:	4694      	mov	ip, r2
 801c31c:	4463      	add	r3, ip
 801c31e:	493f      	ldr	r1, [pc, #252]	; (801c41c <itsdk_lorawan_setup+0x1f8>)
 801c320:	0018      	movs	r0, r3
 801c322:	f7e3 fef9 	bl	8000118 <__udivsi3>
 801c326:	0003      	movs	r3, r0
 801c328:	63fb      	str	r3, [r7, #60]	; 0x3c
				int index = channel >> 4; // associated word
 801c32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c32c:	111b      	asrs	r3, r3, #4
 801c32e:	63bb      	str	r3, [r7, #56]	; 0x38
				int shift = channel & 0x0F;
 801c330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c332:	220f      	movs	r2, #15
 801c334:	4013      	ands	r3, r2
 801c336:	637b      	str	r3, [r7, #52]	; 0x34
				channels[index] |= (1 << shift);
 801c338:	2008      	movs	r0, #8
 801c33a:	183b      	adds	r3, r7, r0
 801c33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c33e:	0052      	lsls	r2, r2, #1
 801c340:	5ad3      	ldrh	r3, [r2, r3]
 801c342:	b21a      	sxth	r2, r3
 801c344:	2101      	movs	r1, #1
 801c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c348:	4099      	lsls	r1, r3
 801c34a:	000b      	movs	r3, r1
 801c34c:	b21b      	sxth	r3, r3
 801c34e:	4313      	orrs	r3, r2
 801c350:	b21b      	sxth	r3, r3
 801c352:	b299      	uxth	r1, r3
 801c354:	183b      	adds	r3, r7, r0
 801c356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c358:	0052      	lsls	r2, r2, #1
 801c35a:	52d1      	strh	r1, [r2, r3]
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c35e:	3301      	adds	r3, #1
 801c360:	647b      	str	r3, [r7, #68]	; 0x44
 801c362:	683b      	ldr	r3, [r7, #0]
 801c364:	781b      	ldrb	r3, [r3, #0]
 801c366:	001a      	movs	r2, r3
 801c368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c36a:	4293      	cmp	r3, r2
 801c36c:	dbce      	blt.n	801c30c <itsdk_lorawan_setup+0xe8>
				LOG_DEBUG_LORAWANSTK(("Add channel %d at freq %d on idx %d with shift %d\r\n",channel,channelConfig->channels[i].frequency,index,shift));
			}
			lorawan_driver_LORA_SelectChannels(__LORAWAN_REGION_US915,channels);
 801c36e:	2308      	movs	r3, #8
 801c370:	18fa      	adds	r2, r7, r3
 801c372:	2380      	movs	r3, #128	; 0x80
 801c374:	005b      	lsls	r3, r3, #1
 801c376:	0011      	movs	r1, r2
 801c378:	0018      	movs	r0, r3
 801c37a:	f7ec fb11 	bl	80089a0 <lorawan_driver_LORA_SelectChannels>
		}
		break;
 801c37e:	e03c      	b.n	801c3fa <itsdk_lorawan_setup+0x1d6>

		default:
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c380:	2300      	movs	r3, #0
 801c382:	643b      	str	r3, [r7, #64]	; 0x40
 801c384:	e031      	b.n	801c3ea <itsdk_lorawan_setup+0x1c6>
				if ( lorawan_driver_LORA_AddChannel(
 801c386:	683a      	ldr	r2, [r7, #0]
 801c388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c38a:	011b      	lsls	r3, r3, #4
 801c38c:	18d3      	adds	r3, r2, r3
 801c38e:	3304      	adds	r3, #4
 801c390:	7818      	ldrb	r0, [r3, #0]
 801c392:	683a      	ldr	r2, [r7, #0]
 801c394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c396:	011b      	lsls	r3, r3, #4
 801c398:	18d3      	adds	r3, r2, r3
 801c39a:	3308      	adds	r3, #8
 801c39c:	681c      	ldr	r4, [r3, #0]
 801c39e:	683a      	ldr	r2, [r7, #0]
 801c3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3a2:	011b      	lsls	r3, r3, #4
 801c3a4:	18d3      	adds	r3, r2, r3
 801c3a6:	330c      	adds	r3, #12
 801c3a8:	681d      	ldr	r5, [r3, #0]
 801c3aa:	683a      	ldr	r2, [r7, #0]
 801c3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3ae:	011b      	lsls	r3, r3, #4
 801c3b0:	18d3      	adds	r3, r2, r3
 801c3b2:	3310      	adds	r3, #16
 801c3b4:	781e      	ldrb	r6, [r3, #0]
 801c3b6:	683a      	ldr	r2, [r7, #0]
 801c3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3ba:	011b      	lsls	r3, r3, #4
 801c3bc:	18d3      	adds	r3, r2, r3
 801c3be:	3311      	adds	r3, #17
 801c3c0:	781b      	ldrb	r3, [r3, #0]
 801c3c2:	6839      	ldr	r1, [r7, #0]
 801c3c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c3c6:	0112      	lsls	r2, r2, #4
 801c3c8:	188a      	adds	r2, r1, r2
 801c3ca:	3212      	adds	r2, #18
 801c3cc:	7812      	ldrb	r2, [r2, #0]
 801c3ce:	9201      	str	r2, [sp, #4]
 801c3d0:	9300      	str	r3, [sp, #0]
 801c3d2:	0033      	movs	r3, r6
 801c3d4:	002a      	movs	r2, r5
 801c3d6:	0021      	movs	r1, r4
 801c3d8:	f7ec fa78 	bl	80088cc <lorawan_driver_LORA_AddChannel>
 801c3dc:	1e03      	subs	r3, r0, #0
 801c3de:	d001      	beq.n	801c3e4 <itsdk_lorawan_setup+0x1c0>
						channelConfig->channels[i].frequency,
						channelConfig->channels[i].frequencyRx,
						channelConfig->channels[i].minDr,
						channelConfig->channels[i].maxDr,
						channelConfig->channels[i].band
					) != LORAWAN_CHANNEL_SUCCESS ) return LORAWAN_INIT_CHANNEL_FAILED;
 801c3e0:	2301      	movs	r3, #1
 801c3e2:	e00b      	b.n	801c3fc <itsdk_lorawan_setup+0x1d8>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3e6:	3301      	adds	r3, #1
 801c3e8:	643b      	str	r3, [r7, #64]	; 0x40
 801c3ea:	683b      	ldr	r3, [r7, #0]
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	001a      	movs	r2, r3
 801c3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3f2:	4293      	cmp	r3, r2
 801c3f4:	dbc7      	blt.n	801c386 <itsdk_lorawan_setup+0x162>
			}
			break;
 801c3f6:	e000      	b.n	801c3fa <itsdk_lorawan_setup+0x1d6>
		}
	}
 801c3f8:	46c0      	nop			; (mov r8, r8)
	return LORAWAN_INIT_SUCESS;
 801c3fa:	2300      	movs	r3, #0
}
 801c3fc:	0018      	movs	r0, r3
 801c3fe:	46bd      	mov	sp, r7
 801c400:	b013      	add	sp, #76	; 0x4c
 801c402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c404:	2000120c 	.word	0x2000120c
 801c408:	20001214 	.word	0x20001214
 801c40c:	2000121c 	.word	0x2000121c
 801c410:	08021b48 	.word	0x08021b48
 801c414:	20001688 	.word	0x20001688
 801c418:	ca37fea0 	.word	0xca37fea0
 801c41c:	00030d40 	.word	0x00030d40

0801c420 <itsdk_lorawan_join_sync>:
 *                   it allows to switch low power but is a higher risk in term of timing respect.
 *                   returns (LORAWAN_JOIN_SUCCESS/LORAWAN_JOIN_FAILED)
 *                   in async mode the given function will be called with the join status.
 *                   When no function is proposed, the status can be polled.
 */
itsdk_lorawan_join_t itsdk_lorawan_join_sync() {
 801c420:	b580      	push	{r7, lr}
 801c422:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_join_sync\r\n"));
	return lorawan_driver_LORA_Join(LORAWAN_RUN_SYNC);
 801c424:	2000      	movs	r0, #0
 801c426:	f7ec f8a5 	bl	8008574 <lorawan_driver_LORA_Join>
 801c42a:	0003      	movs	r3, r0
}
 801c42c:	0018      	movs	r0, r3
 801c42e:	46bd      	mov	sp, r7
 801c430:	bd80      	pop	{r7, pc}
	...

0801c434 <lorawan_driver_onJoinSuccess>:

// Override the underlaying callbacks
static void (*__itsdk_lorawan_join_cb)(itsdk_lorawan_join_t status)  = NULL;
void lorawan_driver_onJoinSuccess() {
 801c434:	b580      	push	{r7, lr}
 801c436:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinSuccess\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801c438:	4b05      	ldr	r3, [pc, #20]	; (801c450 <lorawan_driver_onJoinSuccess+0x1c>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d003      	beq.n	801c448 <lorawan_driver_onJoinSuccess+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_SUCCESS);
 801c440:	4b03      	ldr	r3, [pc, #12]	; (801c450 <lorawan_driver_onJoinSuccess+0x1c>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	2001      	movs	r0, #1
 801c446:	4798      	blx	r3
	}
}
 801c448:	46c0      	nop			; (mov r8, r8)
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}
 801c44e:	46c0      	nop			; (mov r8, r8)
 801c450:	20001204 	.word	0x20001204

0801c454 <lorawan_driver_onJoinFailed>:
void lorawan_driver_onJoinFailed() {
 801c454:	b580      	push	{r7, lr}
 801c456:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinFailed\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801c458:	4b05      	ldr	r3, [pc, #20]	; (801c470 <lorawan_driver_onJoinFailed+0x1c>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d003      	beq.n	801c468 <lorawan_driver_onJoinFailed+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_FAILED);
 801c460:	4b03      	ldr	r3, [pc, #12]	; (801c470 <lorawan_driver_onJoinFailed+0x1c>)
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	2002      	movs	r0, #2
 801c466:	4798      	blx	r3
	}
}
 801c468:	46c0      	nop			; (mov r8, r8)
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bd80      	pop	{r7, pc}
 801c46e:	46c0      	nop			; (mov r8, r8)
 801c470:	20001204 	.word	0x20001204

0801c474 <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 801c474:	b580      	push	{r7, lr}
 801c476:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 801c478:	f7ec fab8 	bl	80089ec <lorawan_driver_LORA_getJoinState>
 801c47c:	0003      	movs	r3, r0
 801c47e:	3b03      	subs	r3, #3
 801c480:	425a      	negs	r2, r3
 801c482:	4153      	adcs	r3, r2
 801c484:	b2db      	uxtb	r3, r3
}
 801c486:	0018      	movs	r0, r3
 801c488:	46bd      	mov	sp, r7
 801c48a:	bd80      	pop	{r7, pc}

0801c48c <__itsdk_lorawan_encrypt_payload>:
 */
static void __itsdk_lorawan_encrypt_payload(
	uint8_t * payload,
	uint8_t   payloadSize,
	itdsk_payload_encrypt_t encrypt
){
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
 801c494:	0008      	movs	r0, r1
 801c496:	0011      	movs	r1, r2
 801c498:	1cfb      	adds	r3, r7, #3
 801c49a:	1c02      	adds	r2, r0, #0
 801c49c:	701a      	strb	r2, [r3, #0]
 801c49e:	1cbb      	adds	r3, r7, #2
 801c4a0:	1c0a      	adds	r2, r1, #0
 801c4a2:	701a      	strb	r2, [r3, #0]
				sharedKey,							// 24b hardcoded value (hidden with ITSDK_PROTECT_KEY)
				masterKey							// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
		);
	}
#endif
}
 801c4a4:	46c0      	nop			; (mov r8, r8)
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	b002      	add	sp, #8
 801c4aa:	bd80      	pop	{r7, pc}

0801c4ac <itsdk_lorawan_send_sync>:
		uint8_t	  retry,
		uint8_t	* rPort,													// In case of reception - Port (uint8_t)
		uint8_t	* rSize,													// In case of reception - Size (uint8_t) - init with buffer max size
		uint8_t * rData,													// In case of recpetion - Data (uint8_t[] bcopied)
		itdsk_payload_encrypt_t encrypt										// End to End encryption mode
) {
 801c4ac:	b590      	push	{r4, r7, lr}
 801c4ae:	b089      	sub	sp, #36	; 0x24
 801c4b0:	af06      	add	r7, sp, #24
 801c4b2:	6078      	str	r0, [r7, #4]
 801c4b4:	000c      	movs	r4, r1
 801c4b6:	0010      	movs	r0, r2
 801c4b8:	0019      	movs	r1, r3
 801c4ba:	1cfb      	adds	r3, r7, #3
 801c4bc:	1c22      	adds	r2, r4, #0
 801c4be:	701a      	strb	r2, [r3, #0]
 801c4c0:	1cbb      	adds	r3, r7, #2
 801c4c2:	1c02      	adds	r2, r0, #0
 801c4c4:	701a      	strb	r2, [r3, #0]
 801c4c6:	1c7b      	adds	r3, r7, #1
 801c4c8:	1c0a      	adds	r2, r1, #0
 801c4ca:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_send_sync\r\n"));
	__itsdk_lorawan_encrypt_payload(payload,payloadSize,encrypt);
 801c4cc:	232c      	movs	r3, #44	; 0x2c
 801c4ce:	18fb      	adds	r3, r7, r3
 801c4d0:	781a      	ldrb	r2, [r3, #0]
 801c4d2:	1cfb      	adds	r3, r7, #3
 801c4d4:	7819      	ldrb	r1, [r3, #0]
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	0018      	movs	r0, r3
 801c4da:	f7ff ffd7 	bl	801c48c <__itsdk_lorawan_encrypt_payload>
	return lorawan_driver_LORA_Send(payload,payloadSize,port,dataRate,confirm,retry,LORAWAN_RUN_SYNC,rPort,rSize,rData);
 801c4de:	1c7b      	adds	r3, r7, #1
 801c4e0:	781c      	ldrb	r4, [r3, #0]
 801c4e2:	1cbb      	adds	r3, r7, #2
 801c4e4:	781a      	ldrb	r2, [r3, #0]
 801c4e6:	1cfb      	adds	r3, r7, #3
 801c4e8:	7819      	ldrb	r1, [r3, #0]
 801c4ea:	6878      	ldr	r0, [r7, #4]
 801c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4ee:	9305      	str	r3, [sp, #20]
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f2:	9304      	str	r3, [sp, #16]
 801c4f4:	6a3b      	ldr	r3, [r7, #32]
 801c4f6:	9303      	str	r3, [sp, #12]
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	9302      	str	r3, [sp, #8]
 801c4fc:	231c      	movs	r3, #28
 801c4fe:	18fb      	adds	r3, r7, r3
 801c500:	781b      	ldrb	r3, [r3, #0]
 801c502:	9301      	str	r3, [sp, #4]
 801c504:	2318      	movs	r3, #24
 801c506:	18fb      	adds	r3, r7, r3
 801c508:	781b      	ldrb	r3, [r3, #0]
 801c50a:	9300      	str	r3, [sp, #0]
 801c50c:	0023      	movs	r3, r4
 801c50e:	f7ec f8bd 	bl	800868c <lorawan_driver_LORA_Send>
 801c512:	0003      	movs	r3, r0
}
 801c514:	0018      	movs	r0, r3
 801c516:	46bd      	mov	sp, r7
 801c518:	b003      	add	sp, #12
 801c51a:	bd90      	pop	{r4, r7, pc}

0801c51c <lorawan_driver_onSendSuccessAckFailed>:

static void (*__itsdk_lorawan_send_cb)(itsdk_lorawan_send_t status, uint8_t port, uint8_t size, uint8_t * rxData) = NULL;
void lorawan_driver_onSendSuccessAckFailed() {
 801c51c:	b5b0      	push	{r4, r5, r7, lr}
 801c51e:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckFailed\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c520:	4b06      	ldr	r3, [pc, #24]	; (801c53c <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d006      	beq.n	801c536 <lorawan_driver_onSendSuccessAckFailed+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801c528:	4b04      	ldr	r3, [pc, #16]	; (801c53c <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801c52a:	681c      	ldr	r4, [r3, #0]
 801c52c:	2300      	movs	r3, #0
 801c52e:	2200      	movs	r2, #0
 801c530:	2100      	movs	r1, #0
 801c532:	2001      	movs	r0, #1
 801c534:	47a0      	blx	r4
	}
}
 801c536:	46c0      	nop			; (mov r8, r8)
 801c538:	46bd      	mov	sp, r7
 801c53a:	bdb0      	pop	{r4, r5, r7, pc}
 801c53c:	20001208 	.word	0x20001208

0801c540 <lorawan_driver_onSendAckSuccess>:
void lorawan_driver_onSendAckSuccess() {
 801c540:	b5b0      	push	{r4, r5, r7, lr}
 801c542:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c544:	4b06      	ldr	r3, [pc, #24]	; (801c560 <lorawan_driver_onSendAckSuccess+0x20>)
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d006      	beq.n	801c55a <lorawan_driver_onSendAckSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED,0,0,NULL);
 801c54c:	4b04      	ldr	r3, [pc, #16]	; (801c560 <lorawan_driver_onSendAckSuccess+0x20>)
 801c54e:	681c      	ldr	r4, [r3, #0]
 801c550:	2300      	movs	r3, #0
 801c552:	2200      	movs	r2, #0
 801c554:	2100      	movs	r1, #0
 801c556:	2002      	movs	r0, #2
 801c558:	47a0      	blx	r4
	}
}
 801c55a:	46c0      	nop			; (mov r8, r8)
 801c55c:	46bd      	mov	sp, r7
 801c55e:	bdb0      	pop	{r4, r5, r7, pc}
 801c560:	20001208 	.word	0x20001208

0801c564 <lorawan_driver_onSendSuccess>:
void lorawan_driver_onSendSuccess() {
 801c564:	b5b0      	push	{r4, r5, r7, lr}
 801c566:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c568:	4b06      	ldr	r3, [pc, #24]	; (801c584 <lorawan_driver_onSendSuccess+0x20>)
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d006      	beq.n	801c57e <lorawan_driver_onSendSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801c570:	4b04      	ldr	r3, [pc, #16]	; (801c584 <lorawan_driver_onSendSuccess+0x20>)
 801c572:	681c      	ldr	r4, [r3, #0]
 801c574:	2300      	movs	r3, #0
 801c576:	2200      	movs	r2, #0
 801c578:	2100      	movs	r1, #0
 801c57a:	2001      	movs	r0, #1
 801c57c:	47a0      	blx	r4
	}
}
 801c57e:	46c0      	nop			; (mov r8, r8)
 801c580:	46bd      	mov	sp, r7
 801c582:	bdb0      	pop	{r4, r5, r7, pc}
 801c584:	20001208 	.word	0x20001208

0801c588 <lorawan_driver_onDataReception>:

void lorawan_driver_onDataReception(uint8_t port, uint8_t * data, uint8_t size) {
 801c588:	b590      	push	{r4, r7, lr}
 801c58a:	b083      	sub	sp, #12
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	6039      	str	r1, [r7, #0]
 801c590:	0011      	movs	r1, r2
 801c592:	1dfb      	adds	r3, r7, #7
 801c594:	1c02      	adds	r2, r0, #0
 801c596:	701a      	strb	r2, [r3, #0]
 801c598:	1dbb      	adds	r3, r7, #6
 801c59a:	1c0a      	adds	r2, r1, #0
 801c59c:	701a      	strb	r2, [r3, #0]
		for ( int i = 0 ; i < size ; i++ ) {
			LOG_INFO_LORAWANSTK(("%02X ",data[i]));
		}
		LOG_INFO_LORAWANSTK(("\n"));
	#endif
	if (__itsdk_lorawan_send_cb != NULL) {
 801c59e:	4b09      	ldr	r3, [pc, #36]	; (801c5c4 <lorawan_driver_onDataReception+0x3c>)
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d009      	beq.n	801c5ba <lorawan_driver_onDataReception+0x32>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK,port,size,data);
 801c5a6:	4b07      	ldr	r3, [pc, #28]	; (801c5c4 <lorawan_driver_onDataReception+0x3c>)
 801c5a8:	681c      	ldr	r4, [r3, #0]
 801c5aa:	6838      	ldr	r0, [r7, #0]
 801c5ac:	1dbb      	adds	r3, r7, #6
 801c5ae:	781a      	ldrb	r2, [r3, #0]
 801c5b0:	1dfb      	adds	r3, r7, #7
 801c5b2:	7819      	ldrb	r1, [r3, #0]
 801c5b4:	0003      	movs	r3, r0
 801c5b6:	2003      	movs	r0, #3
 801c5b8:	47a0      	blx	r4
	}
}
 801c5ba:	46c0      	nop			; (mov r8, r8)
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	b003      	add	sp, #12
 801c5c0:	bd90      	pop	{r4, r7, pc}
 801c5c2:	46c0      	nop			; (mov r8, r8)
 801c5c4:	20001208 	.word	0x20001208

0801c5c8 <lorawan_driver_onPendingDownlink>:

void lorawan_driver_onPendingDownlink() {
 801c5c8:	b5b0      	push	{r4, r5, r7, lr}
 801c5ca:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onPendingDownlink\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801c5cc:	4b06      	ldr	r3, [pc, #24]	; (801c5e8 <lorawan_driver_onPendingDownlink+0x20>)
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d006      	beq.n	801c5e2 <lorawan_driver_onPendingDownlink+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING,0,0,NULL);
 801c5d4:	4b04      	ldr	r3, [pc, #16]	; (801c5e8 <lorawan_driver_onPendingDownlink+0x20>)
 801c5d6:	681c      	ldr	r4, [r3, #0]
 801c5d8:	2300      	movs	r3, #0
 801c5da:	2200      	movs	r2, #0
 801c5dc:	2100      	movs	r1, #0
 801c5de:	2004      	movs	r0, #4
 801c5e0:	47a0      	blx	r4
	}
}
 801c5e2:	46c0      	nop			; (mov r8, r8)
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bdb0      	pop	{r4, r5, r7, pc}
 801c5e8:	20001208 	.word	0x20001208

0801c5ec <itsdk_lorawan_getDeviceEUI>:
}

/**
 * Get the device EUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getDeviceEUI(uint8_t * devEui){
 801c5ec:	b590      	push	{r4, r7, lr}
 801c5ee:	b089      	sub	sp, #36	; 0x24
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getDeviceEUI\r\n"));
	#if ITSDK_WITH_SECURESTORE == __ENABLE
		uint8_t d[8];
		uint8_t buffer[16];
		if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c5f4:	2308      	movs	r3, #8
 801c5f6:	18fb      	adds	r3, r7, r3
 801c5f8:	0019      	movs	r1, r3
 801c5fa:	2007      	movs	r0, #7
 801c5fc:	f7fd fb9a 	bl	8019d34 <itsdk_secstore_readBlock>
 801c600:	1e03      	subs	r3, r0, #0
 801c602:	d00b      	beq.n	801c61c <itsdk_lorawan_getDeviceEUI+0x30>
			#if ITSDK_WITH_ERROR_RPT == __ENABLE
				ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,0);
 801c604:	4b11      	ldr	r3, [pc, #68]	; (801c64c <itsdk_lorawan_getDeviceEUI+0x60>)
 801c606:	2100      	movs	r1, #0
 801c608:	0018      	movs	r0, r3
 801c60a:	f7ff faad 	bl	801bb68 <itsdk_error_report>
			#endif
			bzero(devEui,8);
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	2108      	movs	r1, #8
 801c612:	0018      	movs	r0, r3
 801c614:	f002 fd46 	bl	801f0a4 <bzero>
			return LORAWAN_RETURN_FAILED;
 801c618:	2301      	movs	r3, #1
 801c61a:	e012      	b.n	801c642 <itsdk_lorawan_getDeviceEUI+0x56>
		} else {
			memcpy(d,buffer,8);
 801c61c:	2418      	movs	r4, #24
 801c61e:	193a      	adds	r2, r7, r4
 801c620:	2308      	movs	r3, #8
 801c622:	18fb      	adds	r3, r7, r3
 801c624:	0010      	movs	r0, r2
 801c626:	0019      	movs	r1, r3
 801c628:	2308      	movs	r3, #8
 801c62a:	001a      	movs	r2, r3
 801c62c:	f002 fd6a 	bl	801f104 <memcpy>
		}
	#else
		uint8_t d[8] = ITSDK_LORAWAN_DEVEUI;
	#endif
	memcpy(devEui,d,8);
 801c630:	687a      	ldr	r2, [r7, #4]
 801c632:	193b      	adds	r3, r7, r4
 801c634:	0010      	movs	r0, r2
 801c636:	0019      	movs	r1, r3
 801c638:	2308      	movs	r3, #8
 801c63a:	001a      	movs	r2, r3
 801c63c:	f002 fd62 	bl	801f104 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c640:	2300      	movs	r3, #0
}
 801c642:	0018      	movs	r0, r3
 801c644:	46bd      	mov	sp, r7
 801c646:	b009      	add	sp, #36	; 0x24
 801c648:	bd90      	pop	{r4, r7, pc}
 801c64a:	46c0      	nop			; (mov r8, r8)
 801c64c:	90000106 	.word	0x90000106

0801c650 <itsdk_lorawan_getAppEUI>:

/**
 * Get the appEUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppEUI(uint8_t * appEui){
 801c650:	b590      	push	{r4, r7, lr}
 801c652:	b089      	sub	sp, #36	; 0x24
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppEUI\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[8];
	uint8_t buffer[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c658:	2308      	movs	r3, #8
 801c65a:	18fb      	adds	r3, r7, r3
 801c65c:	0019      	movs	r1, r3
 801c65e:	2007      	movs	r0, #7
 801c660:	f7fd fb68 	bl	8019d34 <itsdk_secstore_readBlock>
 801c664:	1e03      	subs	r3, r0, #0
 801c666:	d00b      	beq.n	801c680 <itsdk_lorawan_getAppEUI+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,1);
 801c668:	4b11      	ldr	r3, [pc, #68]	; (801c6b0 <itsdk_lorawan_getAppEUI+0x60>)
 801c66a:	2101      	movs	r1, #1
 801c66c:	0018      	movs	r0, r3
 801c66e:	f7ff fa7b 	bl	801bb68 <itsdk_error_report>
		#endif
		bzero(appEui,8);
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	2108      	movs	r1, #8
 801c676:	0018      	movs	r0, r3
 801c678:	f002 fd14 	bl	801f0a4 <bzero>
		return LORAWAN_RETURN_FAILED;
 801c67c:	2301      	movs	r3, #1
 801c67e:	e013      	b.n	801c6a8 <itsdk_lorawan_getAppEUI+0x58>
	} else {
		memcpy(d,buffer+8,8);
 801c680:	2308      	movs	r3, #8
 801c682:	18fb      	adds	r3, r7, r3
 801c684:	3308      	adds	r3, #8
 801c686:	2418      	movs	r4, #24
 801c688:	193a      	adds	r2, r7, r4
 801c68a:	0010      	movs	r0, r2
 801c68c:	0019      	movs	r1, r3
 801c68e:	2308      	movs	r3, #8
 801c690:	001a      	movs	r2, r3
 801c692:	f002 fd37 	bl	801f104 <memcpy>
	}
#else
	uint8_t d[8] = ITSDK_LORAWAN_APPEUI;
#endif
	memcpy(appEui,d,8);
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	193b      	adds	r3, r7, r4
 801c69a:	0010      	movs	r0, r2
 801c69c:	0019      	movs	r1, r3
 801c69e:	2308      	movs	r3, #8
 801c6a0:	001a      	movs	r2, r3
 801c6a2:	f002 fd2f 	bl	801f104 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c6a6:	2300      	movs	r3, #0
}
 801c6a8:	0018      	movs	r0, r3
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	b009      	add	sp, #36	; 0x24
 801c6ae:	bd90      	pop	{r4, r7, pc}
 801c6b0:	90000106 	.word	0x90000106

0801c6b4 <itsdk_lorawan_getAppKEY>:

/**
 * Get the appKEY as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppKEY(uint8_t * appKey){
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b086      	sub	sp, #24
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppKEY\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_APPKEY, d) != SS_SUCCESS ) {
 801c6bc:	2308      	movs	r3, #8
 801c6be:	18fb      	adds	r3, r7, r3
 801c6c0:	0019      	movs	r1, r3
 801c6c2:	2008      	movs	r0, #8
 801c6c4:	f7fd fb36 	bl	8019d34 <itsdk_secstore_readBlock>
 801c6c8:	1e03      	subs	r3, r0, #0
 801c6ca:	d00b      	beq.n	801c6e4 <itsdk_lorawan_getAppKEY+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,2);
 801c6cc:	4b0c      	ldr	r3, [pc, #48]	; (801c700 <itsdk_lorawan_getAppKEY+0x4c>)
 801c6ce:	2102      	movs	r1, #2
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f7ff fa49 	bl	801bb68 <itsdk_error_report>
		#endif
		bzero(appKey,16);
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	2110      	movs	r1, #16
 801c6da:	0018      	movs	r0, r3
 801c6dc:	f002 fce2 	bl	801f0a4 <bzero>
		return LORAWAN_RETURN_FAILED;
 801c6e0:	2301      	movs	r3, #1
 801c6e2:	e009      	b.n	801c6f8 <itsdk_lorawan_getAppKEY+0x44>
	}
#else
	uint8_t d[16] = ITSDK_LORAWAN_APPKEY;
#endif
	memcpy(appKey,d,16);
 801c6e4:	687a      	ldr	r2, [r7, #4]
 801c6e6:	2308      	movs	r3, #8
 801c6e8:	18fb      	adds	r3, r7, r3
 801c6ea:	0010      	movs	r0, r2
 801c6ec:	0019      	movs	r1, r3
 801c6ee:	2310      	movs	r3, #16
 801c6f0:	001a      	movs	r2, r3
 801c6f2:	f002 fd07 	bl	801f104 <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c6f6:	2300      	movs	r3, #0
}
 801c6f8:	0018      	movs	r0, r3
 801c6fa:	46bd      	mov	sp, r7
 801c6fc:	b006      	add	sp, #24
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	90000106 	.word	0x90000106

0801c704 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 801c704:	b5b0      	push	{r4, r5, r7, lr}
 801c706:	b090      	sub	sp, #64	; 0x40
 801c708:	af00      	add	r7, sp, #0
 801c70a:	0002      	movs	r2, r0
 801c70c:	1dfb      	adds	r3, r7, #7
 801c70e:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c710:	1dfb      	adds	r3, r7, #7
 801c712:	781b      	ldrb	r3, [r3, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d107      	bne.n	801c728 <itsdk_lorawan_resetFactoryDefaults+0x24>
 801c718:	232c      	movs	r3, #44	; 0x2c
 801c71a:	18fb      	adds	r3, r7, r3
 801c71c:	0019      	movs	r1, r3
 801c71e:	2007      	movs	r0, #7
 801c720:	f7fd fb08 	bl	8019d34 <itsdk_secstore_readBlock>
 801c724:	1e03      	subs	r3, r0, #0
 801c726:	d038      	beq.n	801c79a <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 801c728:	2324      	movs	r3, #36	; 0x24
 801c72a:	18fb      	adds	r3, r7, r3
 801c72c:	4a1d      	ldr	r2, [pc, #116]	; (801c7a4 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 801c72e:	ca03      	ldmia	r2!, {r0, r1}
 801c730:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 801c732:	231c      	movs	r3, #28
 801c734:	18fb      	adds	r3, r7, r3
 801c736:	4a1c      	ldr	r2, [pc, #112]	; (801c7a8 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 801c738:	ca03      	ldmia	r2!, {r0, r1}
 801c73a:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 801c73c:	2300      	movs	r3, #0
 801c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c740:	e016      	b.n	801c770 <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 801c742:	2324      	movs	r3, #36	; 0x24
 801c744:	18fa      	adds	r2, r7, r3
 801c746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c748:	18d3      	adds	r3, r2, r3
 801c74a:	7819      	ldrb	r1, [r3, #0]
 801c74c:	202c      	movs	r0, #44	; 0x2c
 801c74e:	183a      	adds	r2, r7, r0
 801c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c752:	18d3      	adds	r3, r2, r3
 801c754:	1c0a      	adds	r2, r1, #0
 801c756:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 801c758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c75a:	3308      	adds	r3, #8
 801c75c:	221c      	movs	r2, #28
 801c75e:	18b9      	adds	r1, r7, r2
 801c760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c762:	188a      	adds	r2, r1, r2
 801c764:	7811      	ldrb	r1, [r2, #0]
 801c766:	183a      	adds	r2, r7, r0
 801c768:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 801c76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c76c:	3301      	adds	r3, #1
 801c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c772:	2b07      	cmp	r3, #7
 801c774:	dde5      	ble.n	801c742 <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 801c776:	232c      	movs	r3, #44	; 0x2c
 801c778:	18fb      	adds	r3, r7, r3
 801c77a:	0019      	movs	r1, r3
 801c77c:	2007      	movs	r0, #7
 801c77e:	f7fd fb26 	bl	8019dce <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 801c782:	210c      	movs	r1, #12
 801c784:	187b      	adds	r3, r7, r1
 801c786:	4a09      	ldr	r2, [pc, #36]	; (801c7ac <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 801c788:	ca31      	ldmia	r2!, {r0, r4, r5}
 801c78a:	c331      	stmia	r3!, {r0, r4, r5}
 801c78c:	6812      	ldr	r2, [r2, #0]
 801c78e:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 801c790:	187b      	adds	r3, r7, r1
 801c792:	0019      	movs	r1, r3
 801c794:	2008      	movs	r0, #8
 801c796:	f7fd fb1a 	bl	8019dce <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 801c79a:	2300      	movs	r3, #0
}
 801c79c:	0018      	movs	r0, r3
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	b010      	add	sp, #64	; 0x40
 801c7a2:	bdb0      	pop	{r4, r5, r7, pc}
 801c7a4:	0802128c 	.word	0x0802128c
 801c7a8:	08021294 	.word	0x08021294
 801c7ac:	0802129c 	.word	0x0802129c

0801c7b0 <itsdk_lorawan_loop>:

/**
 * This function need to be called in the project_loop function
 * to manage the lorawan stack ( mandatory for async mode )
 */
void itsdk_lorawan_loop() {
 801c7b0:	b580      	push	{r7, lr}
 801c7b2:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_loop\r\n"));
	lorawan_driver_loop();
 801c7b4:	f7eb fcd0 	bl	8008158 <lorawan_driver_loop>
}
 801c7b8:	46c0      	nop			; (mov r8, r8)
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	bd80      	pop	{r7, pc}
	...

0801c7c0 <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 801c7c0:	4b13      	ldr	r3, [pc, #76]	; (801c810 <lowPower_switch+0x50>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 801c7c2:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 801c7c4:	781b      	ldrb	r3, [r3, #0]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d000      	beq.n	801c7cc <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 801c7ca:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t schedDur = itdt_sched_nextRun();
 801c7cc:	f000 fba6 	bl	801cf1c <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 801c7d0:	4d10      	ldr	r5, [pc, #64]	; (801c814 <lowPower_switch+0x54>)
			uint32_t schedDur = itdt_sched_nextRun();
 801c7d2:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 801c7d4:	42a8      	cmp	r0, r5
 801c7d6:	d809      	bhi.n	801c7ec <lowPower_switch+0x2c>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 801c7d8:	f000 fe2e 	bl	801d438 <itsdk_stimer_nextTimeoutMs>
 801c7dc:	0003      	movs	r3, r0
 801c7de:	0020      	movs	r0, r4
 801c7e0:	429c      	cmp	r4, r3
 801c7e2:	d900      	bls.n	801c7e6 <lowPower_switch+0x26>
 801c7e4:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 801c7e6:	2805      	cmp	r0, #5
 801c7e8:	d9ef      	bls.n	801c7ca <lowPower_switch+0xa>
 801c7ea:	e004      	b.n	801c7f6 <lowPower_switch+0x36>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 801c7ec:	f000 fe24 	bl	801d438 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 801c7f0:	42a8      	cmp	r0, r5
 801c7f2:	d9f8      	bls.n	801c7e6 <lowPower_switch+0x26>
			duration = ITSDK_LOWPOWER_RTC_MS;
 801c7f4:	4808      	ldr	r0, [pc, #32]	; (801c818 <lowPower_switch+0x58>)
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 801c7f6:	2100      	movs	r1, #0
 801c7f8:	f002 f82c 	bl	801e854 <stm32l_lowPowerSetup>
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	d1e4      	bne.n	801c7ca <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 801c800:	f002 f89a 	bl	801e938 <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 801c804:	f000 fc84 	bl	801d110 <itsdk_time_get_us>
 801c808:	4b04      	ldr	r3, [pc, #16]	; (801c81c <lowPower_switch+0x5c>)
 801c80a:	6098      	str	r0, [r3, #8]
 801c80c:	60d9      	str	r1, [r3, #12]
}
 801c80e:	e7dc      	b.n	801c7ca <lowPower_switch+0xa>
 801c810:	2000122c 	.word	0x2000122c
 801c814:	0000270f 	.word	0x0000270f
 801c818:	00002710 	.word	0x00002710
 801c81c:	200016a8 	.word	0x200016a8

0801c820 <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 801c820:	b580      	push	{r7, lr}
 801c822:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 801c824:	4b02      	ldr	r3, [pc, #8]	; (801c830 <lowPower_enable+0x10>)
 801c826:	2200      	movs	r2, #0
 801c828:	701a      	strb	r2, [r3, #0]
}
 801c82a:	46c0      	nop			; (mov r8, r8)
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	2000122c 	.word	0x2000122c

0801c834 <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 801c834:	b580      	push	{r7, lr}
 801c836:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 801c838:	4b02      	ldr	r3, [pc, #8]	; (801c844 <lowPower_disable+0x10>)
 801c83a:	2201      	movs	r2, #1
 801c83c:	701a      	strb	r2, [r3, #0]
}
 801c83e:	46c0      	nop			; (mov r8, r8)
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}
 801c844:	2000122c 	.word	0x2000122c

0801c848 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 801c848:	b580      	push	{r7, lr}
 801c84a:	af00      	add	r7, sp, #0

	itsdk_time_init();
 801c84c:	f000 fc6c 	bl	801d128 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 801c850:	20f0      	movs	r0, #240	; 0xf0
 801c852:	f7ff fb5f 	bl	801bf14 <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 801c856:	f7fc f8b5 	bl	80189c4 <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 801c85a:	f7ff f955 	bl	801bb08 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 801c85e:	f001 fca3 	bl	801e1a8 <itsdk_getResetCause>
 801c862:	0003      	movs	r3, r0
 801c864:	b29b      	uxth	r3, r3
 801c866:	4a11      	ldr	r2, [pc, #68]	; (801c8ac <itsdk_setup+0x64>)
 801c868:	0019      	movs	r1, r3
 801c86a:	0010      	movs	r0, r2
 801c86c:	f7ff f97c 	bl	801bb68 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 801c870:	f7fd fb84 	bl	8019f7c <itsdk_secstore_isInit>
 801c874:	1e03      	subs	r3, r0, #0
 801c876:	d008      	beq.n	801c88a <itsdk_setup+0x42>
		  itsdk_secstore_init();
 801c878:	f7fd fb20 	bl	8019ebc <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 801c87c:	2001      	movs	r0, #1
 801c87e:	f7fe f850 	bl	801a922 <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 801c882:	2001      	movs	r0, #1
 801c884:	f7ff ff3e 	bl	801c704 <itsdk_lorawan_resetFactoryDefaults>
 801c888:	e002      	b.n	801c890 <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 801c88a:	2000      	movs	r0, #0
 801c88c:	f7fe f849 	bl	801a922 <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 801c890:	f7fd ff46 	bl	801a720 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 801c894:	2000      	movs	r0, #0
 801c896:	f7fc fc91 	bl	80191bc <itsdk_config_loadConfiguration>
	itsdk_state_init();
 801c89a:	f7fd f8a5 	bl	80199e8 <itsdk_state_init>
	// Application setup
	project_setup();
 801c89e:	f7e6 fdfd 	bl	800349c <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 801c8a2:	f001 fcbf 	bl	801e224 <itsdk_cleanResetCause>
    #endif

}
 801c8a6:	46c0      	nop			; (mov r8, r8)
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	bd80      	pop	{r7, pc}
 801c8ac:	10000001 	.word	0x10000001

0801c8b0 <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 801c8b4:	f000 fd64 	bl	801d380 <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 801c8b8:	f000 fa82 	bl	801cdc0 <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 801c8bc:	f7e6 fe1a 	bl	80034f4 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 801c8c0:	f7fc f8a4 	bl	8018a0c <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 801c8c4:	f000 fcf2 	bl	801d2ac <itsdk_stimer_isLowPowerSwitchAutorized>
 801c8c8:	1e03      	subs	r3, r0, #0
 801c8ca:	d001      	beq.n	801c8d0 <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 801c8cc:	f7ff ff78 	bl	801c7c0 <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 801c8d0:	46c0      	nop			; (mov r8, r8)
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	bd80      	pop	{r7, pc}
	...

0801c8d8 <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b086      	sub	sp, #24
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	000a      	movs	r2, r1
 801c8e2:	1cbb      	adds	r3, r7, #2
 801c8e4:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 801c8e6:	2301      	movs	r3, #1
 801c8e8:	425b      	negs	r3, r3
 801c8ea:	617b      	str	r3, [r7, #20]
  while (length--) {
 801c8ec:	e039      	b.n	801c962 <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	1c5a      	adds	r2, r3, #1
 801c8f2:	607a      	str	r2, [r7, #4]
 801c8f4:	220e      	movs	r2, #14
 801c8f6:	18ba      	adds	r2, r7, r2
 801c8f8:	781b      	ldrb	r3, [r3, #0]
 801c8fa:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c8fc:	2380      	movs	r3, #128	; 0x80
 801c8fe:	613b      	str	r3, [r7, #16]
 801c900:	e02c      	b.n	801c95c <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 801c902:	697b      	ldr	r3, [r7, #20]
 801c904:	0fdb      	lsrs	r3, r3, #31
 801c906:	07da      	lsls	r2, r3, #31
 801c908:	230f      	movs	r3, #15
 801c90a:	18fb      	adds	r3, r7, r3
 801c90c:	1e51      	subs	r1, r2, #1
 801c90e:	418a      	sbcs	r2, r1
 801c910:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 801c912:	230e      	movs	r3, #14
 801c914:	18fb      	adds	r3, r7, r3
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	693a      	ldr	r2, [r7, #16]
 801c91a:	4013      	ands	r3, r2
 801c91c:	d00f      	beq.n	801c93e <itsdk_computeCRC32+0x66>
        bit = !bit;
 801c91e:	210f      	movs	r1, #15
 801c920:	187b      	adds	r3, r7, r1
 801c922:	781b      	ldrb	r3, [r3, #0]
 801c924:	1e5a      	subs	r2, r3, #1
 801c926:	4193      	sbcs	r3, r2
 801c928:	b2db      	uxtb	r3, r3
 801c92a:	2201      	movs	r2, #1
 801c92c:	4053      	eors	r3, r2
 801c92e:	b2db      	uxtb	r3, r3
 801c930:	001a      	movs	r2, r3
 801c932:	187b      	adds	r3, r7, r1
 801c934:	701a      	strb	r2, [r3, #0]
 801c936:	781a      	ldrb	r2, [r3, #0]
 801c938:	2101      	movs	r1, #1
 801c93a:	400a      	ands	r2, r1
 801c93c:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 801c93e:	697b      	ldr	r3, [r7, #20]
 801c940:	005b      	lsls	r3, r3, #1
 801c942:	617b      	str	r3, [r7, #20]
      if (bit) {
 801c944:	230f      	movs	r3, #15
 801c946:	18fb      	adds	r3, r7, r3
 801c948:	781b      	ldrb	r3, [r3, #0]
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d003      	beq.n	801c956 <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 801c94e:	697b      	ldr	r3, [r7, #20]
 801c950:	4a0a      	ldr	r2, [pc, #40]	; (801c97c <itsdk_computeCRC32+0xa4>)
 801c952:	4053      	eors	r3, r2
 801c954:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c956:	693b      	ldr	r3, [r7, #16]
 801c958:	085b      	lsrs	r3, r3, #1
 801c95a:	613b      	str	r3, [r7, #16]
 801c95c:	693b      	ldr	r3, [r7, #16]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d1cf      	bne.n	801c902 <itsdk_computeCRC32+0x2a>
  while (length--) {
 801c962:	1cbb      	adds	r3, r7, #2
 801c964:	881b      	ldrh	r3, [r3, #0]
 801c966:	1cba      	adds	r2, r7, #2
 801c968:	1e59      	subs	r1, r3, #1
 801c96a:	8011      	strh	r1, [r2, #0]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d1be      	bne.n	801c8ee <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 801c970:	697b      	ldr	r3, [r7, #20]
}
 801c972:	0018      	movs	r0, r3
 801c974:	46bd      	mov	sp, r7
 801c976:	b006      	add	sp, #24
 801c978:	bd80      	pop	{r7, pc}
 801c97a:	46c0      	nop			; (mov r8, r8)
 801c97c:	04c11db7 	.word	0x04c11db7

0801c980 <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 801c980:	b580      	push	{r7, lr}
 801c982:	b082      	sub	sp, #8
 801c984:	af00      	add	r7, sp, #0
 801c986:	0002      	movs	r2, r0
 801c988:	1dfb      	adds	r3, r7, #7
 801c98a:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 801c98c:	1dfb      	adds	r3, r7, #7
 801c98e:	781b      	ldrb	r3, [r3, #0]
 801c990:	2b2f      	cmp	r3, #47	; 0x2f
 801c992:	d908      	bls.n	801c9a6 <itdt_convertNumChar2Int+0x26>
 801c994:	1dfb      	adds	r3, r7, #7
 801c996:	781b      	ldrb	r3, [r3, #0]
 801c998:	2b39      	cmp	r3, #57	; 0x39
 801c99a:	d804      	bhi.n	801c9a6 <itdt_convertNumChar2Int+0x26>
 801c99c:	1dfb      	adds	r3, r7, #7
 801c99e:	781b      	ldrb	r3, [r3, #0]
 801c9a0:	3b30      	subs	r3, #48	; 0x30
 801c9a2:	b2db      	uxtb	r3, r3
 801c9a4:	e000      	b.n	801c9a8 <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 801c9a6:	23ff      	movs	r3, #255	; 0xff
}
 801c9a8:	0018      	movs	r0, r3
 801c9aa:	46bd      	mov	sp, r7
 801c9ac:	b002      	add	sp, #8
 801c9ae:	bd80      	pop	{r7, pc}

0801c9b0 <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 801c9b0:	b580      	push	{r7, lr}
 801c9b2:	b082      	sub	sp, #8
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	0002      	movs	r2, r0
 801c9b8:	1dfb      	adds	r3, r7, #7
 801c9ba:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 801c9bc:	1dfb      	adds	r3, r7, #7
 801c9be:	781b      	ldrb	r3, [r3, #0]
 801c9c0:	2b2f      	cmp	r3, #47	; 0x2f
 801c9c2:	d908      	bls.n	801c9d6 <itdt_convertHexChar2HalfInt+0x26>
 801c9c4:	1dfb      	adds	r3, r7, #7
 801c9c6:	781b      	ldrb	r3, [r3, #0]
 801c9c8:	2b39      	cmp	r3, #57	; 0x39
 801c9ca:	d804      	bhi.n	801c9d6 <itdt_convertHexChar2HalfInt+0x26>
 801c9cc:	1dfb      	adds	r3, r7, #7
 801c9ce:	781b      	ldrb	r3, [r3, #0]
 801c9d0:	3b30      	subs	r3, #48	; 0x30
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	e01a      	b.n	801ca0c <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 801c9d6:	1dfb      	adds	r3, r7, #7
 801c9d8:	781b      	ldrb	r3, [r3, #0]
 801c9da:	2b60      	cmp	r3, #96	; 0x60
 801c9dc:	d908      	bls.n	801c9f0 <itdt_convertHexChar2HalfInt+0x40>
 801c9de:	1dfb      	adds	r3, r7, #7
 801c9e0:	781b      	ldrb	r3, [r3, #0]
 801c9e2:	2b66      	cmp	r3, #102	; 0x66
 801c9e4:	d804      	bhi.n	801c9f0 <itdt_convertHexChar2HalfInt+0x40>
 801c9e6:	1dfb      	adds	r3, r7, #7
 801c9e8:	781b      	ldrb	r3, [r3, #0]
 801c9ea:	3b57      	subs	r3, #87	; 0x57
 801c9ec:	b2db      	uxtb	r3, r3
 801c9ee:	e00d      	b.n	801ca0c <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 801c9f0:	1dfb      	adds	r3, r7, #7
 801c9f2:	781b      	ldrb	r3, [r3, #0]
 801c9f4:	2b40      	cmp	r3, #64	; 0x40
 801c9f6:	d908      	bls.n	801ca0a <itdt_convertHexChar2HalfInt+0x5a>
 801c9f8:	1dfb      	adds	r3, r7, #7
 801c9fa:	781b      	ldrb	r3, [r3, #0]
 801c9fc:	2b46      	cmp	r3, #70	; 0x46
 801c9fe:	d804      	bhi.n	801ca0a <itdt_convertHexChar2HalfInt+0x5a>
 801ca00:	1dfb      	adds	r3, r7, #7
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	3b37      	subs	r3, #55	; 0x37
 801ca06:	b2db      	uxtb	r3, r3
 801ca08:	e000      	b.n	801ca0c <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 801ca0a:	2300      	movs	r3, #0
}
 801ca0c:	0018      	movs	r0, r3
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	b002      	add	sp, #8
 801ca12:	bd80      	pop	{r7, pc}

0801ca14 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 801ca14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca16:	b085      	sub	sp, #20
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	781b      	ldrb	r3, [r3, #0]
 801ca20:	250f      	movs	r5, #15
 801ca22:	197c      	adds	r4, r7, r5
 801ca24:	0018      	movs	r0, r3
 801ca26:	f7ff ffc3 	bl	801c9b0 <itdt_convertHexChar2HalfInt>
 801ca2a:	0003      	movs	r3, r0
 801ca2c:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	3301      	adds	r3, #1
 801ca32:	781b      	ldrb	r3, [r3, #0]
 801ca34:	260e      	movs	r6, #14
 801ca36:	19bc      	adds	r4, r7, r6
 801ca38:	0018      	movs	r0, r3
 801ca3a:	f7ff ffb9 	bl	801c9b0 <itdt_convertHexChar2HalfInt>
 801ca3e:	0003      	movs	r3, r0
 801ca40:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 801ca42:	197b      	adds	r3, r7, r5
 801ca44:	781b      	ldrb	r3, [r3, #0]
 801ca46:	011b      	lsls	r3, r3, #4
 801ca48:	b2da      	uxtb	r2, r3
 801ca4a:	19bb      	adds	r3, r7, r6
 801ca4c:	781b      	ldrb	r3, [r3, #0]
 801ca4e:	18d3      	adds	r3, r2, r3
 801ca50:	b2db      	uxtb	r3, r3
}
 801ca52:	0018      	movs	r0, r3
 801ca54:	46bd      	mov	sp, r7
 801ca56:	b005      	add	sp, #20
 801ca58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca5a <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 801ca5a:	b590      	push	{r4, r7, lr}
 801ca5c:	b085      	sub	sp, #20
 801ca5e:	af00      	add	r7, sp, #0
 801ca60:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	0018      	movs	r0, r3
 801ca66:	f7ff ffd5 	bl	801ca14 <itdt_convertHexChar2Int>
 801ca6a:	0003      	movs	r3, r0
 801ca6c:	001a      	movs	r2, r3
 801ca6e:	240e      	movs	r4, #14
 801ca70:	193b      	adds	r3, r7, r4
 801ca72:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 801ca74:	193b      	adds	r3, r7, r4
 801ca76:	193a      	adds	r2, r7, r4
 801ca78:	8812      	ldrh	r2, [r2, #0]
 801ca7a:	0212      	lsls	r2, r2, #8
 801ca7c:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	3302      	adds	r3, #2
 801ca82:	0018      	movs	r0, r3
 801ca84:	f7ff ffc6 	bl	801ca14 <itdt_convertHexChar2Int>
 801ca88:	0003      	movs	r3, r0
 801ca8a:	b299      	uxth	r1, r3
 801ca8c:	193b      	adds	r3, r7, r4
 801ca8e:	193a      	adds	r2, r7, r4
 801ca90:	8812      	ldrh	r2, [r2, #0]
 801ca92:	188a      	adds	r2, r1, r2
 801ca94:	801a      	strh	r2, [r3, #0]
  return ret;
 801ca96:	193b      	adds	r3, r7, r4
 801ca98:	881b      	ldrh	r3, [r3, #0]
}
 801ca9a:	0018      	movs	r0, r3
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	b005      	add	sp, #20
 801caa0:	bd90      	pop	{r4, r7, pc}
	...

0801caa4 <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 801caa4:	b5b0      	push	{r4, r5, r7, lr}
 801caa6:	b086      	sub	sp, #24
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]
 801caac:	6039      	str	r1, [r7, #0]
	int sign = 1;
 801caae:	2301      	movs	r3, #1
 801cab0:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	2b2d      	cmp	r3, #45	; 0x2d
 801cab8:	d108      	bne.n	801cacc <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 801caba:	2301      	movs	r3, #1
 801cabc:	425b      	negs	r3, r3
 801cabe:	617b      	str	r3, [r7, #20]
	   v++;
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	3301      	adds	r3, #1
 801cac4:	607b      	str	r3, [r7, #4]
	   sz--;
 801cac6:	683b      	ldr	r3, [r7, #0]
 801cac8:	3b01      	subs	r3, #1
 801caca:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 801cacc:	2312      	movs	r3, #18
 801cace:	18fb      	adds	r3, r7, r3
 801cad0:	2200      	movs	r2, #0
 801cad2:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801cad4:	2300      	movs	r3, #0
 801cad6:	60fb      	str	r3, [r7, #12]
 801cad8:	e027      	b.n	801cb2a <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 801cada:	2312      	movs	r3, #18
 801cadc:	18fa      	adds	r2, r7, r3
 801cade:	18fb      	adds	r3, r7, r3
 801cae0:	881b      	ldrh	r3, [r3, #0]
 801cae2:	1c19      	adds	r1, r3, #0
 801cae4:	0089      	lsls	r1, r1, #2
 801cae6:	18cb      	adds	r3, r1, r3
 801cae8:	18db      	adds	r3, r3, r3
 801caea:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	781b      	ldrb	r3, [r3, #0]
 801caf0:	250b      	movs	r5, #11
 801caf2:	197c      	adds	r4, r7, r5
 801caf4:	0018      	movs	r0, r3
 801caf6:	f7ff ff43 	bl	801c980 <itdt_convertNumChar2Int>
 801cafa:	0003      	movs	r3, r0
 801cafc:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 801cafe:	197b      	adds	r3, r7, r5
 801cb00:	781b      	ldrb	r3, [r3, #0]
 801cb02:	2bff      	cmp	r3, #255	; 0xff
 801cb04:	d101      	bne.n	801cb0a <itdt_convertDecCharNInt+0x66>
 801cb06:	4b12      	ldr	r3, [pc, #72]	; (801cb50 <itdt_convertDecCharNInt+0xac>)
 801cb08:	e01d      	b.n	801cb46 <itdt_convertDecCharNInt+0xa2>
	  v++;
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	3301      	adds	r3, #1
 801cb0e:	607b      	str	r3, [r7, #4]
	  ret+= c;
 801cb10:	230b      	movs	r3, #11
 801cb12:	18fb      	adds	r3, r7, r3
 801cb14:	781b      	ldrb	r3, [r3, #0]
 801cb16:	b299      	uxth	r1, r3
 801cb18:	2212      	movs	r2, #18
 801cb1a:	18bb      	adds	r3, r7, r2
 801cb1c:	18ba      	adds	r2, r7, r2
 801cb1e:	8812      	ldrh	r2, [r2, #0]
 801cb20:	188a      	adds	r2, r1, r2
 801cb22:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	3301      	adds	r3, #1
 801cb28:	60fb      	str	r3, [r7, #12]
 801cb2a:	68fa      	ldr	r2, [r7, #12]
 801cb2c:	683b      	ldr	r3, [r7, #0]
 801cb2e:	429a      	cmp	r2, r3
 801cb30:	dbd3      	blt.n	801cada <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 801cb32:	697b      	ldr	r3, [r7, #20]
 801cb34:	b29a      	uxth	r2, r3
 801cb36:	2012      	movs	r0, #18
 801cb38:	183b      	adds	r3, r7, r0
 801cb3a:	1839      	adds	r1, r7, r0
 801cb3c:	8809      	ldrh	r1, [r1, #0]
 801cb3e:	434a      	muls	r2, r1
 801cb40:	801a      	strh	r2, [r3, #0]
	 return ret;
 801cb42:	183b      	adds	r3, r7, r0
 801cb44:	881b      	ldrh	r3, [r3, #0]
}
 801cb46:	0018      	movs	r0, r3
 801cb48:	46bd      	mov	sp, r7
 801cb4a:	b006      	add	sp, #24
 801cb4c:	bdb0      	pop	{r4, r5, r7, pc}
 801cb4e:	46c0      	nop			; (mov r8, r8)
 801cb50:	0fffffff 	.word	0x0fffffff

0801cb54 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	0002      	movs	r2, r0
 801cb5c:	1dfb      	adds	r3, r7, #7
 801cb5e:	701a      	strb	r2, [r3, #0]
 801cb60:	1dbb      	adds	r3, r7, #6
 801cb62:	1c0a      	adds	r2, r1, #0
 801cb64:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 801cb66:	1dfb      	adds	r3, r7, #7
 801cb68:	781b      	ldrb	r3, [r3, #0]
 801cb6a:	2b2f      	cmp	r3, #47	; 0x2f
 801cb6c:	d903      	bls.n	801cb76 <itdt_isHexChar+0x22>
 801cb6e:	1dfb      	adds	r3, r7, #7
 801cb70:	781b      	ldrb	r3, [r3, #0]
 801cb72:	2b39      	cmp	r3, #57	; 0x39
 801cb74:	d916      	bls.n	801cba4 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 801cb76:	1dfb      	adds	r3, r7, #7
 801cb78:	781b      	ldrb	r3, [r3, #0]
 801cb7a:	2b40      	cmp	r3, #64	; 0x40
 801cb7c:	d903      	bls.n	801cb86 <itdt_isHexChar+0x32>
 801cb7e:	1dfb      	adds	r3, r7, #7
 801cb80:	781b      	ldrb	r3, [r3, #0]
 801cb82:	2b46      	cmp	r3, #70	; 0x46
 801cb84:	d90e      	bls.n	801cba4 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 801cb86:	1dbb      	adds	r3, r7, #6
 801cb88:	781b      	ldrb	r3, [r3, #0]
 801cb8a:	2201      	movs	r2, #1
 801cb8c:	4053      	eors	r3, r2
 801cb8e:	b2db      	uxtb	r3, r3
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d009      	beq.n	801cba8 <itdt_isHexChar+0x54>
 801cb94:	1dfb      	adds	r3, r7, #7
 801cb96:	781b      	ldrb	r3, [r3, #0]
 801cb98:	2b60      	cmp	r3, #96	; 0x60
 801cb9a:	d905      	bls.n	801cba8 <itdt_isHexChar+0x54>
 801cb9c:	1dfb      	adds	r3, r7, #7
 801cb9e:	781b      	ldrb	r3, [r3, #0]
 801cba0:	2b66      	cmp	r3, #102	; 0x66
 801cba2:	d801      	bhi.n	801cba8 <itdt_isHexChar+0x54>
    ) {
    return true;
 801cba4:	2301      	movs	r3, #1
 801cba6:	e000      	b.n	801cbaa <itdt_isHexChar+0x56>
  }
  return false;
 801cba8:	2300      	movs	r3, #0
}
 801cbaa:	0018      	movs	r0, r3
 801cbac:	46bd      	mov	sp, r7
 801cbae:	b002      	add	sp, #8
 801cbb0:	bd80      	pop	{r7, pc}

0801cbb2 <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 801cbb2:	b580      	push	{r7, lr}
 801cbb4:	b086      	sub	sp, #24
 801cbb6:	af00      	add	r7, sp, #0
 801cbb8:	60f8      	str	r0, [r7, #12]
 801cbba:	60b9      	str	r1, [r7, #8]
 801cbbc:	1dfb      	adds	r3, r7, #7
 801cbbe:	701a      	strb	r2, [r3, #0]
  int i = 0;
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 801cbc4:	e02d      	b.n	801cc22 <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 801cbc6:	697b      	ldr	r3, [r7, #20]
 801cbc8:	68fa      	ldr	r2, [r7, #12]
 801cbca:	18d3      	adds	r3, r2, r3
 801cbcc:	781b      	ldrb	r3, [r3, #0]
 801cbce:	2b2f      	cmp	r3, #47	; 0x2f
 801cbd0:	d905      	bls.n	801cbde <itdt_isHexString+0x2c>
 801cbd2:	697b      	ldr	r3, [r7, #20]
 801cbd4:	68fa      	ldr	r2, [r7, #12]
 801cbd6:	18d3      	adds	r3, r2, r3
 801cbd8:	781b      	ldrb	r3, [r3, #0]
 801cbda:	2b39      	cmp	r3, #57	; 0x39
 801cbdc:	d91b      	bls.n	801cc16 <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 801cbde:	697b      	ldr	r3, [r7, #20]
 801cbe0:	68fa      	ldr	r2, [r7, #12]
 801cbe2:	18d3      	adds	r3, r2, r3
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	2b40      	cmp	r3, #64	; 0x40
 801cbe8:	d905      	bls.n	801cbf6 <itdt_isHexString+0x44>
 801cbea:	697b      	ldr	r3, [r7, #20]
 801cbec:	68fa      	ldr	r2, [r7, #12]
 801cbee:	18d3      	adds	r3, r2, r3
 801cbf0:	781b      	ldrb	r3, [r3, #0]
 801cbf2:	2b46      	cmp	r3, #70	; 0x46
 801cbf4:	d90f      	bls.n	801cc16 <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 801cbf6:	1dfb      	adds	r3, r7, #7
 801cbf8:	781b      	ldrb	r3, [r3, #0]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d10f      	bne.n	801cc1e <itdt_isHexString+0x6c>
 801cbfe:	697b      	ldr	r3, [r7, #20]
 801cc00:	68fa      	ldr	r2, [r7, #12]
 801cc02:	18d3      	adds	r3, r2, r3
 801cc04:	781b      	ldrb	r3, [r3, #0]
 801cc06:	2b60      	cmp	r3, #96	; 0x60
 801cc08:	d909      	bls.n	801cc1e <itdt_isHexString+0x6c>
 801cc0a:	697b      	ldr	r3, [r7, #20]
 801cc0c:	68fa      	ldr	r2, [r7, #12]
 801cc0e:	18d3      	adds	r3, r2, r3
 801cc10:	781b      	ldrb	r3, [r3, #0]
 801cc12:	2b66      	cmp	r3, #102	; 0x66
 801cc14:	d803      	bhi.n	801cc1e <itdt_isHexString+0x6c>
       ) {
      i++;
 801cc16:	697b      	ldr	r3, [r7, #20]
 801cc18:	3301      	adds	r3, #1
 801cc1a:	617b      	str	r3, [r7, #20]
 801cc1c:	e001      	b.n	801cc22 <itdt_isHexString+0x70>
    } else {
      return false;
 801cc1e:	2300      	movs	r3, #0
 801cc20:	e00f      	b.n	801cc42 <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 801cc22:	697a      	ldr	r2, [r7, #20]
 801cc24:	68bb      	ldr	r3, [r7, #8]
 801cc26:	429a      	cmp	r2, r3
 801cc28:	da05      	bge.n	801cc36 <itdt_isHexString+0x84>
 801cc2a:	697b      	ldr	r3, [r7, #20]
 801cc2c:	68fa      	ldr	r2, [r7, #12]
 801cc2e:	18d3      	adds	r3, r2, r3
 801cc30:	781b      	ldrb	r3, [r3, #0]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d1c7      	bne.n	801cbc6 <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 801cc36:	697a      	ldr	r2, [r7, #20]
 801cc38:	68bb      	ldr	r3, [r7, #8]
 801cc3a:	1ad3      	subs	r3, r2, r3
 801cc3c:	425a      	negs	r2, r3
 801cc3e:	4153      	adcs	r3, r2
 801cc40:	b2db      	uxtb	r3, r3
}
 801cc42:	0018      	movs	r0, r3
 801cc44:	46bd      	mov	sp, r7
 801cc46:	b006      	add	sp, #24
 801cc48:	bd80      	pop	{r7, pc}

0801cc4a <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 801cc4a:	b580      	push	{r7, lr}
 801cc4c:	b084      	sub	sp, #16
 801cc4e:	af00      	add	r7, sp, #0
 801cc50:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801cc52:	230f      	movs	r3, #15
 801cc54:	18fb      	adds	r3, r7, r3
 801cc56:	2200      	movs	r2, #0
 801cc58:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 801cc5a:	e00c      	b.n	801cc76 <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	2201      	movs	r2, #1
 801cc60:	4013      	ands	r3, r2
 801cc62:	d005      	beq.n	801cc70 <itdt_count_bits_1+0x26>
 801cc64:	210f      	movs	r1, #15
 801cc66:	187b      	adds	r3, r7, r1
 801cc68:	781a      	ldrb	r2, [r3, #0]
 801cc6a:	187b      	adds	r3, r7, r1
 801cc6c:	3201      	adds	r2, #1
 801cc6e:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	085b      	lsrs	r3, r3, #1
 801cc74:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d1ef      	bne.n	801cc5c <itdt_count_bits_1+0x12>
	}
	return ret;
 801cc7c:	230f      	movs	r3, #15
 801cc7e:	18fb      	adds	r3, r7, r3
 801cc80:	781b      	ldrb	r3, [r3, #0]
}
 801cc82:	0018      	movs	r0, r3
 801cc84:	46bd      	mov	sp, r7
 801cc86:	b004      	add	sp, #16
 801cc88:	bd80      	pop	{r7, pc}
	...

0801cc8c <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 801cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc8e:	b085      	sub	sp, #20
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	60f8      	str	r0, [r7, #12]
 801cc94:	607a      	str	r2, [r7, #4]
 801cc96:	230a      	movs	r3, #10
 801cc98:	18fb      	adds	r3, r7, r3
 801cc9a:	1c0a      	adds	r2, r1, #0
 801cc9c:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	4a43      	ldr	r2, [pc, #268]	; (801cdb0 <itdt_sched_registerSched+0x124>)
 801cca2:	4293      	cmp	r3, r2
 801cca4:	d906      	bls.n	801ccb4 <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 801cca6:	4b43      	ldr	r3, [pc, #268]	; (801cdb4 <itdt_sched_registerSched+0x128>)
 801cca8:	2100      	movs	r1, #0
 801ccaa:	0018      	movs	r0, r3
 801ccac:	f7fe ff5c 	bl	801bb68 <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 801ccb0:	23ff      	movs	r3, #255	; 0xff
 801ccb2:	e079      	b.n	801cda8 <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 801ccb4:	4b40      	ldr	r3, [pc, #256]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801ccb6:	781b      	ldrb	r3, [r3, #0]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d174      	bne.n	801cda6 <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 801ccbc:	4b3e      	ldr	r3, [pc, #248]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801ccbe:	781b      	ldrb	r3, [r3, #0]
 801ccc0:	4a3e      	ldr	r2, [pc, #248]	; (801cdbc <itdt_sched_registerSched+0x130>)
 801ccc2:	011b      	lsls	r3, r3, #4
 801ccc4:	18d3      	adds	r3, r2, r3
 801ccc6:	330c      	adds	r3, #12
 801ccc8:	687a      	ldr	r2, [r7, #4]
 801ccca:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 801cccc:	4b3a      	ldr	r3, [pc, #232]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801ccce:	781b      	ldrb	r3, [r3, #0]
 801ccd0:	001e      	movs	r6, r3
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	021b      	lsls	r3, r3, #8
 801ccd6:	0a1a      	lsrs	r2, r3, #8
 801ccd8:	4938      	ldr	r1, [pc, #224]	; (801cdbc <itdt_sched_registerSched+0x130>)
 801ccda:	2008      	movs	r0, #8
 801ccdc:	0133      	lsls	r3, r6, #4
 801ccde:	18cb      	adds	r3, r1, r3
 801cce0:	181b      	adds	r3, r3, r0
 801cce2:	0212      	lsls	r2, r2, #8
 801cce4:	0a12      	lsrs	r2, r2, #8
 801cce6:	6819      	ldr	r1, [r3, #0]
 801cce8:	0e09      	lsrs	r1, r1, #24
 801ccea:	0609      	lsls	r1, r1, #24
 801ccec:	430a      	orrs	r2, r1
 801ccee:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 801ccf0:	230a      	movs	r3, #10
 801ccf2:	18fb      	adds	r3, r7, r3
 801ccf4:	881a      	ldrh	r2, [r3, #0]
 801ccf6:	2380      	movs	r3, #128	; 0x80
 801ccf8:	005b      	lsls	r3, r3, #1
 801ccfa:	4013      	ands	r3, r2
 801ccfc:	d004      	beq.n	801cd08 <itdt_sched_registerSched+0x7c>
 801ccfe:	f000 f9f5 	bl	801d0ec <itsdk_time_get_ms>
 801cd02:	0003      	movs	r3, r0
 801cd04:	000c      	movs	r4, r1
 801cd06:	e00b      	b.n	801cd20 <itdt_sched_registerSched+0x94>
 801cd08:	f000 f9f0 	bl	801d0ec <itsdk_time_get_ms>
 801cd0c:	0002      	movs	r2, r0
 801cd0e:	000b      	movs	r3, r1
 801cd10:	68f9      	ldr	r1, [r7, #12]
 801cd12:	000c      	movs	r4, r1
 801cd14:	2100      	movs	r1, #0
 801cd16:	000d      	movs	r5, r1
 801cd18:	1912      	adds	r2, r2, r4
 801cd1a:	416b      	adcs	r3, r5
 801cd1c:	001c      	movs	r4, r3
 801cd1e:	0013      	movs	r3, r2
 801cd20:	4a25      	ldr	r2, [pc, #148]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801cd22:	7812      	ldrb	r2, [r2, #0]
 801cd24:	4925      	ldr	r1, [pc, #148]	; (801cdbc <itdt_sched_registerSched+0x130>)
 801cd26:	0112      	lsls	r2, r2, #4
 801cd28:	188a      	adds	r2, r1, r2
 801cd2a:	6013      	str	r3, [r2, #0]
 801cd2c:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 801cd2e:	250a      	movs	r5, #10
 801cd30:	197b      	adds	r3, r7, r5
 801cd32:	881b      	ldrh	r3, [r3, #0]
 801cd34:	105a      	asrs	r2, r3, #1
 801cd36:	4b20      	ldr	r3, [pc, #128]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801cd38:	781b      	ldrb	r3, [r3, #0]
 801cd3a:	001c      	movs	r4, r3
 801cd3c:	2301      	movs	r3, #1
 801cd3e:	4013      	ands	r3, r2
 801cd40:	b2da      	uxtb	r2, r3
 801cd42:	491e      	ldr	r1, [pc, #120]	; (801cdbc <itdt_sched_registerSched+0x130>)
 801cd44:	2008      	movs	r0, #8
 801cd46:	0123      	lsls	r3, r4, #4
 801cd48:	18cb      	adds	r3, r1, r3
 801cd4a:	181b      	adds	r3, r3, r0
 801cd4c:	2101      	movs	r1, #1
 801cd4e:	400a      	ands	r2, r1
 801cd50:	1890      	adds	r0, r2, r2
 801cd52:	78da      	ldrb	r2, [r3, #3]
 801cd54:	2102      	movs	r1, #2
 801cd56:	438a      	bics	r2, r1
 801cd58:	1c11      	adds	r1, r2, #0
 801cd5a:	1c02      	adds	r2, r0, #0
 801cd5c:	430a      	orrs	r2, r1
 801cd5e:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 801cd60:	4b15      	ldr	r3, [pc, #84]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801cd62:	781b      	ldrb	r3, [r3, #0]
 801cd64:	001c      	movs	r4, r3
 801cd66:	197b      	adds	r3, r7, r5
 801cd68:	881b      	ldrh	r3, [r3, #0]
 801cd6a:	1c1a      	adds	r2, r3, #0
 801cd6c:	2301      	movs	r3, #1
 801cd6e:	4013      	ands	r3, r2
 801cd70:	b2da      	uxtb	r2, r3
 801cd72:	4912      	ldr	r1, [pc, #72]	; (801cdbc <itdt_sched_registerSched+0x130>)
 801cd74:	2008      	movs	r0, #8
 801cd76:	0123      	lsls	r3, r4, #4
 801cd78:	18cb      	adds	r3, r1, r3
 801cd7a:	181b      	adds	r3, r3, r0
 801cd7c:	2101      	movs	r1, #1
 801cd7e:	400a      	ands	r2, r1
 801cd80:	0010      	movs	r0, r2
 801cd82:	78da      	ldrb	r2, [r3, #3]
 801cd84:	2101      	movs	r1, #1
 801cd86:	438a      	bics	r2, r1
 801cd88:	1c11      	adds	r1, r2, #0
 801cd8a:	1c02      	adds	r2, r0, #0
 801cd8c:	430a      	orrs	r2, r1
 801cd8e:	70da      	strb	r2, [r3, #3]
		__sNum++;
 801cd90:	4b09      	ldr	r3, [pc, #36]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801cd92:	781b      	ldrb	r3, [r3, #0]
 801cd94:	3301      	adds	r3, #1
 801cd96:	b2da      	uxtb	r2, r3
 801cd98:	4b07      	ldr	r3, [pc, #28]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801cd9a:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 801cd9c:	4b06      	ldr	r3, [pc, #24]	; (801cdb8 <itdt_sched_registerSched+0x12c>)
 801cd9e:	781b      	ldrb	r3, [r3, #0]
 801cda0:	3b01      	subs	r3, #1
 801cda2:	b2db      	uxtb	r3, r3
 801cda4:	e000      	b.n	801cda8 <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 801cda6:	23ff      	movs	r3, #255	; 0xff

}
 801cda8:	0018      	movs	r0, r3
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	b005      	add	sp, #20
 801cdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cdb0:	00ffffff 	.word	0x00ffffff
 801cdb4:	80000050 	.word	0x80000050
 801cdb8:	2000122d 	.word	0x2000122d
 801cdbc:	200016c0 	.word	0x200016c0

0801cdc0 <itdt_sched_execute>:

/**
 * Task executor
 */
void itdt_sched_execute() {
 801cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdc2:	b087      	sub	sp, #28
 801cdc4:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 801cdc6:	f000 f991 	bl	801d0ec <itsdk_time_get_ms>
 801cdca:	0003      	movs	r3, r0
 801cdcc:	000c      	movs	r4, r1
 801cdce:	60bb      	str	r3, [r7, #8]
 801cdd0:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 801cdd2:	2300      	movs	r3, #0
 801cdd4:	617b      	str	r3, [r7, #20]
 801cdd6:	e091      	b.n	801cefc <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 801cdd8:	4a4e      	ldr	r2, [pc, #312]	; (801cf14 <itdt_sched_execute+0x154>)
 801cdda:	697b      	ldr	r3, [r7, #20]
 801cddc:	011b      	lsls	r3, r3, #4
 801cdde:	18d3      	adds	r3, r2, r3
 801cde0:	685c      	ldr	r4, [r3, #4]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	68fa      	ldr	r2, [r7, #12]
 801cde6:	42a2      	cmp	r2, r4
 801cde8:	d332      	bcc.n	801ce50 <itdt_sched_execute+0x90>
 801cdea:	68fa      	ldr	r2, [r7, #12]
 801cdec:	42a2      	cmp	r2, r4
 801cdee:	d102      	bne.n	801cdf6 <itdt_sched_execute+0x36>
 801cdf0:	68ba      	ldr	r2, [r7, #8]
 801cdf2:	429a      	cmp	r2, r3
 801cdf4:	d32c      	bcc.n	801ce50 <itdt_sched_execute+0x90>
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 801cdf6:	4a47      	ldr	r2, [pc, #284]	; (801cf14 <itdt_sched_execute+0x154>)
 801cdf8:	697b      	ldr	r3, [r7, #20]
 801cdfa:	011b      	lsls	r3, r3, #4
 801cdfc:	18d3      	adds	r3, r2, r3
 801cdfe:	685c      	ldr	r4, [r3, #4]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	4944      	ldr	r1, [pc, #272]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce04:	697a      	ldr	r2, [r7, #20]
 801ce06:	2008      	movs	r0, #8
 801ce08:	0112      	lsls	r2, r2, #4
 801ce0a:	188a      	adds	r2, r1, r2
 801ce0c:	1812      	adds	r2, r2, r0
 801ce0e:	6812      	ldr	r2, [r2, #0]
 801ce10:	0212      	lsls	r2, r2, #8
 801ce12:	0a12      	lsrs	r2, r2, #8
 801ce14:	0015      	movs	r5, r2
 801ce16:	2200      	movs	r2, #0
 801ce18:	0016      	movs	r6, r2
 801ce1a:	195b      	adds	r3, r3, r5
 801ce1c:	4174      	adcs	r4, r6
 801ce1e:	493d      	ldr	r1, [pc, #244]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce20:	697a      	ldr	r2, [r7, #20]
 801ce22:	0112      	lsls	r2, r2, #4
 801ce24:	188a      	adds	r2, r1, r2
 801ce26:	6013      	str	r3, [r2, #0]
 801ce28:	6054      	str	r4, [r2, #4]
				if ( !__scheds[i].halt ) {
 801ce2a:	4a3a      	ldr	r2, [pc, #232]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce2c:	697b      	ldr	r3, [r7, #20]
 801ce2e:	2108      	movs	r1, #8
 801ce30:	011b      	lsls	r3, r3, #4
 801ce32:	18d3      	adds	r3, r2, r3
 801ce34:	185b      	adds	r3, r3, r1
 801ce36:	78db      	ldrb	r3, [r3, #3]
 801ce38:	079b      	lsls	r3, r3, #30
 801ce3a:	0fdb      	lsrs	r3, r3, #31
 801ce3c:	b2db      	uxtb	r3, r3
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d106      	bne.n	801ce50 <itdt_sched_execute+0x90>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 801ce42:	4a34      	ldr	r2, [pc, #208]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	011b      	lsls	r3, r3, #4
 801ce48:	18d3      	adds	r3, r2, r3
 801ce4a:	330c      	adds	r3, #12
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	4798      	blx	r3
				}
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 801ce50:	4a30      	ldr	r2, [pc, #192]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce52:	697b      	ldr	r3, [r7, #20]
 801ce54:	2108      	movs	r1, #8
 801ce56:	011b      	lsls	r3, r3, #4
 801ce58:	18d3      	adds	r3, r2, r3
 801ce5a:	185b      	adds	r3, r3, r1
 801ce5c:	78db      	ldrb	r3, [r3, #3]
 801ce5e:	07db      	lsls	r3, r3, #31
 801ce60:	0fdb      	lsrs	r3, r3, #31
 801ce62:	b2db      	uxtb	r3, r3
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d12b      	bne.n	801cec0 <itdt_sched_execute+0x100>
 801ce68:	4a2a      	ldr	r2, [pc, #168]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce6a:	697b      	ldr	r3, [r7, #20]
 801ce6c:	011b      	lsls	r3, r3, #4
 801ce6e:	18d3      	adds	r3, r2, r3
 801ce70:	685c      	ldr	r4, [r3, #4]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	68fa      	ldr	r2, [r7, #12]
 801ce76:	42a2      	cmp	r2, r4
 801ce78:	d322      	bcc.n	801cec0 <itdt_sched_execute+0x100>
 801ce7a:	68fa      	ldr	r2, [r7, #12]
 801ce7c:	42a2      	cmp	r2, r4
 801ce7e:	d1ab      	bne.n	801cdd8 <itdt_sched_execute+0x18>
 801ce80:	68ba      	ldr	r2, [r7, #8]
 801ce82:	429a      	cmp	r2, r3
 801ce84:	d31c      	bcc.n	801cec0 <itdt_sched_execute+0x100>
 801ce86:	e7a7      	b.n	801cdd8 <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 801ce88:	4a22      	ldr	r2, [pc, #136]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce8a:	697b      	ldr	r3, [r7, #20]
 801ce8c:	011b      	lsls	r3, r3, #4
 801ce8e:	18d3      	adds	r3, r2, r3
 801ce90:	685c      	ldr	r4, [r3, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	491f      	ldr	r1, [pc, #124]	; (801cf14 <itdt_sched_execute+0x154>)
 801ce96:	697a      	ldr	r2, [r7, #20]
 801ce98:	2008      	movs	r0, #8
 801ce9a:	0112      	lsls	r2, r2, #4
 801ce9c:	188a      	adds	r2, r1, r2
 801ce9e:	1812      	adds	r2, r2, r0
 801cea0:	6812      	ldr	r2, [r2, #0]
 801cea2:	0212      	lsls	r2, r2, #8
 801cea4:	0a12      	lsrs	r2, r2, #8
 801cea6:	603a      	str	r2, [r7, #0]
 801cea8:	2200      	movs	r2, #0
 801ceaa:	607a      	str	r2, [r7, #4]
 801ceac:	6839      	ldr	r1, [r7, #0]
 801ceae:	687a      	ldr	r2, [r7, #4]
 801ceb0:	185b      	adds	r3, r3, r1
 801ceb2:	4154      	adcs	r4, r2
 801ceb4:	4917      	ldr	r1, [pc, #92]	; (801cf14 <itdt_sched_execute+0x154>)
 801ceb6:	697a      	ldr	r2, [r7, #20]
 801ceb8:	0112      	lsls	r2, r2, #4
 801ceba:	188a      	adds	r2, r1, r2
 801cebc:	6013      	str	r3, [r2, #0]
 801cebe:	6054      	str	r4, [r2, #4]
 801cec0:	4a14      	ldr	r2, [pc, #80]	; (801cf14 <itdt_sched_execute+0x154>)
 801cec2:	697b      	ldr	r3, [r7, #20]
 801cec4:	2108      	movs	r1, #8
 801cec6:	011b      	lsls	r3, r3, #4
 801cec8:	18d3      	adds	r3, r2, r3
 801ceca:	185b      	adds	r3, r3, r1
 801cecc:	78db      	ldrb	r3, [r3, #3]
 801cece:	07db      	lsls	r3, r3, #31
 801ced0:	0fdb      	lsrs	r3, r3, #31
 801ced2:	b2db      	uxtb	r3, r3
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d00e      	beq.n	801cef6 <itdt_sched_execute+0x136>
 801ced8:	4a0e      	ldr	r2, [pc, #56]	; (801cf14 <itdt_sched_execute+0x154>)
 801ceda:	697b      	ldr	r3, [r7, #20]
 801cedc:	011b      	lsls	r3, r3, #4
 801cede:	18d3      	adds	r3, r2, r3
 801cee0:	685c      	ldr	r4, [r3, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	68fa      	ldr	r2, [r7, #12]
 801cee6:	42a2      	cmp	r2, r4
 801cee8:	d305      	bcc.n	801cef6 <itdt_sched_execute+0x136>
 801ceea:	68fa      	ldr	r2, [r7, #12]
 801ceec:	42a2      	cmp	r2, r4
 801ceee:	d1cb      	bne.n	801ce88 <itdt_sched_execute+0xc8>
 801cef0:	68ba      	ldr	r2, [r7, #8]
 801cef2:	429a      	cmp	r2, r3
 801cef4:	d2c8      	bcs.n	801ce88 <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 801cef6:	697b      	ldr	r3, [r7, #20]
 801cef8:	3301      	adds	r3, #1
 801cefa:	617b      	str	r3, [r7, #20]
 801cefc:	4b06      	ldr	r3, [pc, #24]	; (801cf18 <itdt_sched_execute+0x158>)
 801cefe:	781b      	ldrb	r3, [r3, #0]
 801cf00:	001a      	movs	r2, r3
 801cf02:	697b      	ldr	r3, [r7, #20]
 801cf04:	4293      	cmp	r3, r2
 801cf06:	da00      	bge.n	801cf0a <itdt_sched_execute+0x14a>
 801cf08:	e766      	b.n	801cdd8 <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 801cf0a:	46c0      	nop			; (mov r8, r8)
 801cf0c:	46bd      	mov	sp, r7
 801cf0e:	b007      	add	sp, #28
 801cf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf12:	46c0      	nop			; (mov r8, r8)
 801cf14:	200016c0 	.word	0x200016c0
 801cf18:	2000122d 	.word	0x2000122d

0801cf1c <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 801cf1c:	b590      	push	{r4, r7, lr}
 801cf1e:	b087      	sub	sp, #28
 801cf20:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 801cf22:	2300      	movs	r3, #0
 801cf24:	2400      	movs	r4, #0
 801cf26:	613b      	str	r3, [r7, #16]
 801cf28:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	60fb      	str	r3, [r7, #12]
 801cf2e:	e029      	b.n	801cf84 <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 801cf30:	4a28      	ldr	r2, [pc, #160]	; (801cfd4 <itdt_sched_nextRun+0xb8>)
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	2108      	movs	r1, #8
 801cf36:	011b      	lsls	r3, r3, #4
 801cf38:	18d3      	adds	r3, r2, r3
 801cf3a:	185b      	adds	r3, r3, r1
 801cf3c:	78db      	ldrb	r3, [r3, #3]
 801cf3e:	079b      	lsls	r3, r3, #30
 801cf40:	0fdb      	lsrs	r3, r3, #31
 801cf42:	b2db      	uxtb	r3, r3
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d11a      	bne.n	801cf7e <itdt_sched_nextRun+0x62>
 801cf48:	693b      	ldr	r3, [r7, #16]
 801cf4a:	697a      	ldr	r2, [r7, #20]
 801cf4c:	4313      	orrs	r3, r2
 801cf4e:	d00e      	beq.n	801cf6e <itdt_sched_nextRun+0x52>
 801cf50:	4a20      	ldr	r2, [pc, #128]	; (801cfd4 <itdt_sched_nextRun+0xb8>)
 801cf52:	68fb      	ldr	r3, [r7, #12]
 801cf54:	011b      	lsls	r3, r3, #4
 801cf56:	18d3      	adds	r3, r2, r3
 801cf58:	685c      	ldr	r4, [r3, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	697a      	ldr	r2, [r7, #20]
 801cf5e:	42a2      	cmp	r2, r4
 801cf60:	d805      	bhi.n	801cf6e <itdt_sched_nextRun+0x52>
 801cf62:	697a      	ldr	r2, [r7, #20]
 801cf64:	42a2      	cmp	r2, r4
 801cf66:	d10a      	bne.n	801cf7e <itdt_sched_nextRun+0x62>
 801cf68:	693a      	ldr	r2, [r7, #16]
 801cf6a:	429a      	cmp	r2, r3
 801cf6c:	d907      	bls.n	801cf7e <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 801cf6e:	4a19      	ldr	r2, [pc, #100]	; (801cfd4 <itdt_sched_nextRun+0xb8>)
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	011b      	lsls	r3, r3, #4
 801cf74:	18d3      	adds	r3, r2, r3
 801cf76:	685c      	ldr	r4, [r3, #4]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	613b      	str	r3, [r7, #16]
 801cf7c:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	3301      	adds	r3, #1
 801cf82:	60fb      	str	r3, [r7, #12]
 801cf84:	4b14      	ldr	r3, [pc, #80]	; (801cfd8 <itdt_sched_nextRun+0xbc>)
 801cf86:	781b      	ldrb	r3, [r3, #0]
 801cf88:	001a      	movs	r2, r3
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	dbcf      	blt.n	801cf30 <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 801cf90:	693b      	ldr	r3, [r7, #16]
 801cf92:	697a      	ldr	r2, [r7, #20]
 801cf94:	4313      	orrs	r3, r2
 801cf96:	d017      	beq.n	801cfc8 <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 801cf98:	f000 f8a8 	bl	801d0ec <itsdk_time_get_ms>
 801cf9c:	0003      	movs	r3, r0
 801cf9e:	000c      	movs	r4, r1
 801cfa0:	603b      	str	r3, [r7, #0]
 801cfa2:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 801cfa4:	687a      	ldr	r2, [r7, #4]
 801cfa6:	697b      	ldr	r3, [r7, #20]
 801cfa8:	429a      	cmp	r2, r3
 801cfaa:	d80b      	bhi.n	801cfc4 <itdt_sched_nextRun+0xa8>
 801cfac:	687a      	ldr	r2, [r7, #4]
 801cfae:	697b      	ldr	r3, [r7, #20]
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	d103      	bne.n	801cfbc <itdt_sched_nextRun+0xa0>
 801cfb4:	683a      	ldr	r2, [r7, #0]
 801cfb6:	693b      	ldr	r3, [r7, #16]
 801cfb8:	429a      	cmp	r2, r3
 801cfba:	d803      	bhi.n	801cfc4 <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 801cfbc:	693a      	ldr	r2, [r7, #16]
 801cfbe:	683b      	ldr	r3, [r7, #0]
 801cfc0:	1ad3      	subs	r3, r2, r3
 801cfc2:	e003      	b.n	801cfcc <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	e001      	b.n	801cfcc <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 801cfc8:	2301      	movs	r3, #1
 801cfca:	425b      	negs	r3, r3
	}
}
 801cfcc:	0018      	movs	r0, r3
 801cfce:	46bd      	mov	sp, r7
 801cfd0:	b007      	add	sp, #28
 801cfd2:	bd90      	pop	{r4, r7, pc}
 801cfd4:	200016c0 	.word	0x200016c0
 801cfd8:	2000122d 	.word	0x2000122d

0801cfdc <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 801cfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfde:	b087      	sub	sp, #28
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	603b      	str	r3, [r7, #0]
 801cfe8:	2300      	movs	r3, #0
 801cfea:	607b      	str	r3, [r7, #4]
 801cfec:	22fa      	movs	r2, #250	; 0xfa
 801cfee:	0092      	lsls	r2, r2, #2
 801cff0:	2300      	movs	r3, #0
 801cff2:	6838      	ldr	r0, [r7, #0]
 801cff4:	6879      	ldr	r1, [r7, #4]
 801cff6:	f7e3 fa87 	bl	8000508 <__aeabi_lmul>
 801cffa:	0003      	movs	r3, r0
 801cffc:	000c      	movs	r4, r1
 801cffe:	0018      	movs	r0, r3
 801d000:	0021      	movs	r1, r4
 801d002:	22fa      	movs	r2, #250	; 0xfa
 801d004:	0092      	lsls	r2, r2, #2
 801d006:	2300      	movs	r3, #0
 801d008:	f7e3 fa3a 	bl	8000480 <__aeabi_ldivmod>
 801d00c:	0003      	movs	r3, r0
 801d00e:	000c      	movs	r4, r1
 801d010:	001a      	movs	r2, r3
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	189b      	adds	r3, r3, r2
 801d016:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	001d      	movs	r5, r3
 801d01c:	2300      	movs	r3, #0
 801d01e:	001e      	movs	r6, r3
 801d020:	4b12      	ldr	r3, [pc, #72]	; (801d06c <itsdk_time_add_us+0x90>)
 801d022:	685c      	ldr	r4, [r3, #4]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	195b      	adds	r3, r3, r5
 801d028:	4174      	adcs	r4, r6
 801d02a:	613b      	str	r3, [r7, #16]
 801d02c:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 801d02e:	4b0f      	ldr	r3, [pc, #60]	; (801d06c <itsdk_time_add_us+0x90>)
 801d030:	685c      	ldr	r4, [r3, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	697a      	ldr	r2, [r7, #20]
 801d036:	42a2      	cmp	r2, r4
 801d038:	d305      	bcc.n	801d046 <itsdk_time_add_us+0x6a>
 801d03a:	697a      	ldr	r2, [r7, #20]
 801d03c:	42a2      	cmp	r2, r4
 801d03e:	d10b      	bne.n	801d058 <itsdk_time_add_us+0x7c>
 801d040:	693a      	ldr	r2, [r7, #16]
 801d042:	429a      	cmp	r2, r3
 801d044:	d208      	bcs.n	801d058 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 801d046:	4b0a      	ldr	r3, [pc, #40]	; (801d070 <itsdk_time_add_us+0x94>)
 801d048:	2201      	movs	r2, #1
 801d04a:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801d04c:	4b09      	ldr	r3, [pc, #36]	; (801d074 <itsdk_time_add_us+0x98>)
 801d04e:	781b      	ldrb	r3, [r3, #0]
 801d050:	3301      	adds	r3, #1
 801d052:	b2da      	uxtb	r2, r3
 801d054:	4b07      	ldr	r3, [pc, #28]	; (801d074 <itsdk_time_add_us+0x98>)
 801d056:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801d058:	4a04      	ldr	r2, [pc, #16]	; (801d06c <itsdk_time_add_us+0x90>)
 801d05a:	693b      	ldr	r3, [r7, #16]
 801d05c:	697c      	ldr	r4, [r7, #20]
 801d05e:	6013      	str	r3, [r2, #0]
 801d060:	6054      	str	r4, [r2, #4]
}
 801d062:	46c0      	nop			; (mov r8, r8)
 801d064:	46bd      	mov	sp, r7
 801d066:	b007      	add	sp, #28
 801d068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d06a:	46c0      	nop			; (mov r8, r8)
 801d06c:	20001230 	.word	0x20001230
 801d070:	20001238 	.word	0x20001238
 801d074:	20001239 	.word	0x20001239

0801d078 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 801d078:	b590      	push	{r4, r7, lr}
 801d07a:	b085      	sub	sp, #20
 801d07c:	af00      	add	r7, sp, #0
 801d07e:	6038      	str	r0, [r7, #0]
 801d080:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 801d082:	22fa      	movs	r2, #250	; 0xfa
 801d084:	0092      	lsls	r2, r2, #2
 801d086:	2300      	movs	r3, #0
 801d088:	6838      	ldr	r0, [r7, #0]
 801d08a:	6879      	ldr	r1, [r7, #4]
 801d08c:	f7e3 fa3c 	bl	8000508 <__aeabi_lmul>
 801d090:	0003      	movs	r3, r0
 801d092:	000c      	movs	r4, r1
 801d094:	60bb      	str	r3, [r7, #8]
 801d096:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 801d098:	4b10      	ldr	r3, [pc, #64]	; (801d0dc <itsdk_time_set_ms+0x64>)
 801d09a:	6819      	ldr	r1, [r3, #0]
 801d09c:	685a      	ldr	r2, [r3, #4]
 801d09e:	68bb      	ldr	r3, [r7, #8]
 801d0a0:	68fc      	ldr	r4, [r7, #12]
 801d0a2:	1ac9      	subs	r1, r1, r3
 801d0a4:	41a2      	sbcs	r2, r4
 801d0a6:	000b      	movs	r3, r1
 801d0a8:	0014      	movs	r4, r2
 801d0aa:	2c00      	cmp	r4, #0
 801d0ac:	d103      	bne.n	801d0b6 <itsdk_time_set_ms+0x3e>
 801d0ae:	d10b      	bne.n	801d0c8 <itsdk_time_set_ms+0x50>
 801d0b0:	4a0b      	ldr	r2, [pc, #44]	; (801d0e0 <itsdk_time_set_ms+0x68>)
 801d0b2:	4293      	cmp	r3, r2
 801d0b4:	d908      	bls.n	801d0c8 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 801d0b6:	4b0b      	ldr	r3, [pc, #44]	; (801d0e4 <itsdk_time_set_ms+0x6c>)
 801d0b8:	2201      	movs	r2, #1
 801d0ba:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801d0bc:	4b0a      	ldr	r3, [pc, #40]	; (801d0e8 <itsdk_time_set_ms+0x70>)
 801d0be:	781b      	ldrb	r3, [r3, #0]
 801d0c0:	3301      	adds	r3, #1
 801d0c2:	b2da      	uxtb	r2, r3
 801d0c4:	4b08      	ldr	r3, [pc, #32]	; (801d0e8 <itsdk_time_set_ms+0x70>)
 801d0c6:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801d0c8:	4a04      	ldr	r2, [pc, #16]	; (801d0dc <itsdk_time_set_ms+0x64>)
 801d0ca:	68bb      	ldr	r3, [r7, #8]
 801d0cc:	68fc      	ldr	r4, [r7, #12]
 801d0ce:	6013      	str	r3, [r2, #0]
 801d0d0:	6054      	str	r4, [r2, #4]
}
 801d0d2:	46c0      	nop			; (mov r8, r8)
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	b005      	add	sp, #20
 801d0d8:	bd90      	pop	{r4, r7, pc}
 801d0da:	46c0      	nop			; (mov r8, r8)
 801d0dc:	20001230 	.word	0x20001230
 801d0e0:	000f4240 	.word	0x000f4240
 801d0e4:	20001238 	.word	0x20001238
 801d0e8:	20001239 	.word	0x20001239

0801d0ec <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 801d0ec:	b5b0      	push	{r4, r5, r7, lr}
 801d0ee:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 801d0f0:	4b06      	ldr	r3, [pc, #24]	; (801d10c <itsdk_time_get_ms+0x20>)
 801d0f2:	6818      	ldr	r0, [r3, #0]
 801d0f4:	6859      	ldr	r1, [r3, #4]
 801d0f6:	22fa      	movs	r2, #250	; 0xfa
 801d0f8:	0092      	lsls	r2, r2, #2
 801d0fa:	2300      	movs	r3, #0
 801d0fc:	f7e3 f9e4 	bl	80004c8 <__aeabi_uldivmod>
 801d100:	0003      	movs	r3, r0
 801d102:	000c      	movs	r4, r1
}
 801d104:	0018      	movs	r0, r3
 801d106:	0021      	movs	r1, r4
 801d108:	46bd      	mov	sp, r7
 801d10a:	bdb0      	pop	{r4, r5, r7, pc}
 801d10c:	20001230 	.word	0x20001230

0801d110 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 801d110:	b590      	push	{r4, r7, lr}
 801d112:	af00      	add	r7, sp, #0
	return __timeus;
 801d114:	4b03      	ldr	r3, [pc, #12]	; (801d124 <itsdk_time_get_us+0x14>)
 801d116:	685c      	ldr	r4, [r3, #4]
 801d118:	681b      	ldr	r3, [r3, #0]
}
 801d11a:	0018      	movs	r0, r3
 801d11c:	0021      	movs	r1, r4
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd90      	pop	{r4, r7, pc}
 801d122:	46c0      	nop			; (mov r8, r8)
 801d124:	20001230 	.word	0x20001230

0801d128 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 801d128:	b5b0      	push	{r4, r5, r7, lr}
 801d12a:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 801d12c:	f001 fe42 	bl	801edb4 <rtc_resetTime>
	rtc_adjustTime();
 801d130:	f001 fec4 	bl	801eebc <rtc_adjustTime>
  #endif
	systick_adjustTime();
 801d134:	f001 ff20 	bl	801ef78 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 801d138:	f001 fd4e 	bl	801ebd8 <rtc_getTimestampMs>
 801d13c:	0003      	movs	r3, r0
 801d13e:	000c      	movs	r4, r1
 801d140:	0018      	movs	r0, r3
 801d142:	0021      	movs	r1, r4
 801d144:	f7ff ff98 	bl	801d078 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 801d148:	46c0      	nop			; (mov r8, r8)
 801d14a:	46bd      	mov	sp, r7
 801d14c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d150 <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 801d150:	b5b0      	push	{r4, r5, r7, lr}
 801d152:	b086      	sub	sp, #24
 801d154:	af00      	add	r7, sp, #0
 801d156:	60f8      	str	r0, [r7, #12]
 801d158:	60b9      	str	r1, [r7, #8]
 801d15a:	607a      	str	r2, [r7, #4]
 801d15c:	001a      	movs	r2, r3
 801d15e:	1cfb      	adds	r3, r7, #3
 801d160:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 801d162:	2300      	movs	r3, #0
 801d164:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d166:	e00e      	b.n	801d186 <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 801d168:	492f      	ldr	r1, [pc, #188]	; (801d228 <itsdk_stimer_register+0xd8>)
 801d16a:	697a      	ldr	r2, [r7, #20]
 801d16c:	0013      	movs	r3, r2
 801d16e:	005b      	lsls	r3, r3, #1
 801d170:	189b      	adds	r3, r3, r2
 801d172:	00db      	lsls	r3, r3, #3
 801d174:	5c5b      	ldrb	r3, [r3, r1]
 801d176:	2201      	movs	r2, #1
 801d178:	4053      	eors	r3, r2
 801d17a:	b2db      	uxtb	r3, r3
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d106      	bne.n	801d18e <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 801d180:	697b      	ldr	r3, [r7, #20]
 801d182:	3301      	adds	r3, #1
 801d184:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d186:	697b      	ldr	r3, [r7, #20]
 801d188:	2b04      	cmp	r3, #4
 801d18a:	dded      	ble.n	801d168 <itsdk_stimer_register+0x18>
 801d18c:	e000      	b.n	801d190 <itsdk_stimer_register+0x40>
			break;
 801d18e:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 801d190:	697b      	ldr	r3, [r7, #20]
 801d192:	2b04      	cmp	r3, #4
 801d194:	dc42      	bgt.n	801d21c <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 801d196:	4924      	ldr	r1, [pc, #144]	; (801d228 <itsdk_stimer_register+0xd8>)
 801d198:	697a      	ldr	r2, [r7, #20]
 801d19a:	0013      	movs	r3, r2
 801d19c:	005b      	lsls	r3, r3, #1
 801d19e:	189b      	adds	r3, r3, r2
 801d1a0:	00db      	lsls	r3, r3, #3
 801d1a2:	2201      	movs	r2, #1
 801d1a4:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 801d1a6:	1cfb      	adds	r3, r7, #3
 801d1a8:	781b      	ldrb	r3, [r3, #0]
 801d1aa:	425a      	negs	r2, r3
 801d1ac:	4153      	adcs	r3, r2
 801d1ae:	b2d8      	uxtb	r0, r3
 801d1b0:	491d      	ldr	r1, [pc, #116]	; (801d228 <itsdk_stimer_register+0xd8>)
 801d1b2:	697a      	ldr	r2, [r7, #20]
 801d1b4:	0013      	movs	r3, r2
 801d1b6:	005b      	lsls	r3, r3, #1
 801d1b8:	189b      	adds	r3, r3, r2
 801d1ba:	00db      	lsls	r3, r3, #3
 801d1bc:	18cb      	adds	r3, r1, r3
 801d1be:	3301      	adds	r3, #1
 801d1c0:	1c02      	adds	r2, r0, #0
 801d1c2:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 801d1c4:	4918      	ldr	r1, [pc, #96]	; (801d228 <itsdk_stimer_register+0xd8>)
 801d1c6:	697a      	ldr	r2, [r7, #20]
 801d1c8:	0013      	movs	r3, r2
 801d1ca:	005b      	lsls	r3, r3, #1
 801d1cc:	189b      	adds	r3, r3, r2
 801d1ce:	00db      	lsls	r3, r3, #3
 801d1d0:	18cb      	adds	r3, r1, r3
 801d1d2:	3314      	adds	r3, #20
 801d1d4:	687a      	ldr	r2, [r7, #4]
 801d1d6:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 801d1d8:	4913      	ldr	r1, [pc, #76]	; (801d228 <itsdk_stimer_register+0xd8>)
 801d1da:	697a      	ldr	r2, [r7, #20]
 801d1dc:	0013      	movs	r3, r2
 801d1de:	005b      	lsls	r3, r3, #1
 801d1e0:	189b      	adds	r3, r3, r2
 801d1e2:	00db      	lsls	r3, r3, #3
 801d1e4:	18cb      	adds	r3, r1, r3
 801d1e6:	3310      	adds	r3, #16
 801d1e8:	68ba      	ldr	r2, [r7, #8]
 801d1ea:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 801d1ec:	f7ff ff7e 	bl	801d0ec <itsdk_time_get_ms>
 801d1f0:	0002      	movs	r2, r0
 801d1f2:	000b      	movs	r3, r1
 801d1f4:	68f9      	ldr	r1, [r7, #12]
 801d1f6:	000c      	movs	r4, r1
 801d1f8:	2100      	movs	r1, #0
 801d1fa:	000d      	movs	r5, r1
 801d1fc:	1912      	adds	r2, r2, r4
 801d1fe:	416b      	adcs	r3, r5
 801d200:	0011      	movs	r1, r2
 801d202:	001a      	movs	r2, r3
 801d204:	4c08      	ldr	r4, [pc, #32]	; (801d228 <itsdk_stimer_register+0xd8>)
 801d206:	6978      	ldr	r0, [r7, #20]
 801d208:	0003      	movs	r3, r0
 801d20a:	005b      	lsls	r3, r3, #1
 801d20c:	181b      	adds	r3, r3, r0
 801d20e:	00db      	lsls	r3, r3, #3
 801d210:	18e3      	adds	r3, r4, r3
 801d212:	3308      	adds	r3, #8
 801d214:	6019      	str	r1, [r3, #0]
 801d216:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 801d218:	2300      	movs	r3, #0
 801d21a:	e000      	b.n	801d21e <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 801d21c:	2303      	movs	r3, #3
}
 801d21e:	0018      	movs	r0, r3
 801d220:	46bd      	mov	sp, r7
 801d222:	b006      	add	sp, #24
 801d224:	bdb0      	pop	{r4, r5, r7, pc}
 801d226:	46c0      	nop			; (mov r8, r8)
 801d228:	20001240 	.word	0x20001240

0801d22c <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b084      	sub	sp, #16
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
 801d234:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d236:	2300      	movs	r3, #0
 801d238:	60fb      	str	r3, [r7, #12]
 801d23a:	e02d      	b.n	801d298 <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 801d23c:	491a      	ldr	r1, [pc, #104]	; (801d2a8 <itsdk_stimer_stop+0x7c>)
 801d23e:	68fa      	ldr	r2, [r7, #12]
 801d240:	0013      	movs	r3, r2
 801d242:	005b      	lsls	r3, r3, #1
 801d244:	189b      	adds	r3, r3, r2
 801d246:	00db      	lsls	r3, r3, #3
 801d248:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d021      	beq.n	801d292 <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 801d24e:	4916      	ldr	r1, [pc, #88]	; (801d2a8 <itsdk_stimer_stop+0x7c>)
 801d250:	68fa      	ldr	r2, [r7, #12]
 801d252:	0013      	movs	r3, r2
 801d254:	005b      	lsls	r3, r3, #1
 801d256:	189b      	adds	r3, r3, r2
 801d258:	00db      	lsls	r3, r3, #3
 801d25a:	18cb      	adds	r3, r1, r3
 801d25c:	3314      	adds	r3, #20
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	683a      	ldr	r2, [r7, #0]
 801d262:	429a      	cmp	r2, r3
 801d264:	d115      	bne.n	801d292 <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 801d266:	4910      	ldr	r1, [pc, #64]	; (801d2a8 <itsdk_stimer_stop+0x7c>)
 801d268:	68fa      	ldr	r2, [r7, #12]
 801d26a:	0013      	movs	r3, r2
 801d26c:	005b      	lsls	r3, r3, #1
 801d26e:	189b      	adds	r3, r3, r2
 801d270:	00db      	lsls	r3, r3, #3
 801d272:	18cb      	adds	r3, r1, r3
 801d274:	3310      	adds	r3, #16
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	687a      	ldr	r2, [r7, #4]
 801d27a:	429a      	cmp	r2, r3
 801d27c:	d109      	bne.n	801d292 <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 801d27e:	490a      	ldr	r1, [pc, #40]	; (801d2a8 <itsdk_stimer_stop+0x7c>)
 801d280:	68fa      	ldr	r2, [r7, #12]
 801d282:	0013      	movs	r3, r2
 801d284:	005b      	lsls	r3, r3, #1
 801d286:	189b      	adds	r3, r3, r2
 801d288:	00db      	lsls	r3, r3, #3
 801d28a:	2200      	movs	r2, #0
 801d28c:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 801d28e:	2300      	movs	r3, #0
 801d290:	e006      	b.n	801d2a0 <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	3301      	adds	r3, #1
 801d296:	60fb      	str	r3, [r7, #12]
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	2b04      	cmp	r3, #4
 801d29c:	ddce      	ble.n	801d23c <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 801d29e:	2304      	movs	r3, #4
}
 801d2a0:	0018      	movs	r0, r3
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	b004      	add	sp, #16
 801d2a6:	bd80      	pop	{r7, pc}
 801d2a8:	20001240 	.word	0x20001240

0801d2ac <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
	int i = 0;
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d2b6:	e01b      	b.n	801d2f0 <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 801d2b8:	4911      	ldr	r1, [pc, #68]	; (801d300 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 801d2ba:	687a      	ldr	r2, [r7, #4]
 801d2bc:	0013      	movs	r3, r2
 801d2be:	005b      	lsls	r3, r3, #1
 801d2c0:	189b      	adds	r3, r3, r2
 801d2c2:	00db      	lsls	r3, r3, #3
 801d2c4:	5c5b      	ldrb	r3, [r3, r1]
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d00f      	beq.n	801d2ea <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 801d2ca:	490d      	ldr	r1, [pc, #52]	; (801d300 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 801d2cc:	687a      	ldr	r2, [r7, #4]
 801d2ce:	0013      	movs	r3, r2
 801d2d0:	005b      	lsls	r3, r3, #1
 801d2d2:	189b      	adds	r3, r3, r2
 801d2d4:	00db      	lsls	r3, r3, #3
 801d2d6:	18cb      	adds	r3, r1, r3
 801d2d8:	3301      	adds	r3, #1
 801d2da:	781b      	ldrb	r3, [r3, #0]
 801d2dc:	2201      	movs	r2, #1
 801d2de:	4053      	eors	r3, r2
 801d2e0:	b2db      	uxtb	r3, r3
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d001      	beq.n	801d2ea <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	e006      	b.n	801d2f8 <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	3301      	adds	r3, #1
 801d2ee:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	2b04      	cmp	r3, #4
 801d2f4:	dde0      	ble.n	801d2b8 <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 801d2f6:	2301      	movs	r3, #1
}
 801d2f8:	0018      	movs	r0, r3
 801d2fa:	46bd      	mov	sp, r7
 801d2fc:	b002      	add	sp, #8
 801d2fe:	bd80      	pop	{r7, pc}
 801d300:	20001240 	.word	0x20001240

0801d304 <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801d304:	b580      	push	{r7, lr}
 801d306:	b084      	sub	sp, #16
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]
 801d30c:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d30e:	2300      	movs	r3, #0
 801d310:	60fb      	str	r3, [r7, #12]
 801d312:	e02b      	b.n	801d36c <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 801d314:	4919      	ldr	r1, [pc, #100]	; (801d37c <itsdk_stimer_get+0x78>)
 801d316:	68fa      	ldr	r2, [r7, #12]
 801d318:	0013      	movs	r3, r2
 801d31a:	005b      	lsls	r3, r3, #1
 801d31c:	189b      	adds	r3, r3, r2
 801d31e:	00db      	lsls	r3, r3, #3
 801d320:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801d322:	2b00      	cmp	r3, #0
 801d324:	d01f      	beq.n	801d366 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 801d326:	4915      	ldr	r1, [pc, #84]	; (801d37c <itsdk_stimer_get+0x78>)
 801d328:	68fa      	ldr	r2, [r7, #12]
 801d32a:	0013      	movs	r3, r2
 801d32c:	005b      	lsls	r3, r3, #1
 801d32e:	189b      	adds	r3, r3, r2
 801d330:	00db      	lsls	r3, r3, #3
 801d332:	18cb      	adds	r3, r1, r3
 801d334:	3314      	adds	r3, #20
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	683a      	ldr	r2, [r7, #0]
 801d33a:	429a      	cmp	r2, r3
 801d33c:	d113      	bne.n	801d366 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 801d33e:	490f      	ldr	r1, [pc, #60]	; (801d37c <itsdk_stimer_get+0x78>)
 801d340:	68fa      	ldr	r2, [r7, #12]
 801d342:	0013      	movs	r3, r2
 801d344:	005b      	lsls	r3, r3, #1
 801d346:	189b      	adds	r3, r3, r2
 801d348:	00db      	lsls	r3, r3, #3
 801d34a:	18cb      	adds	r3, r1, r3
 801d34c:	3310      	adds	r3, #16
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	687a      	ldr	r2, [r7, #4]
 801d352:	429a      	cmp	r2, r3
 801d354:	d107      	bne.n	801d366 <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 801d356:	68fa      	ldr	r2, [r7, #12]
 801d358:	0013      	movs	r3, r2
 801d35a:	005b      	lsls	r3, r3, #1
 801d35c:	189b      	adds	r3, r3, r2
 801d35e:	00db      	lsls	r3, r3, #3
 801d360:	4a06      	ldr	r2, [pc, #24]	; (801d37c <itsdk_stimer_get+0x78>)
 801d362:	189b      	adds	r3, r3, r2
 801d364:	e006      	b.n	801d374 <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	3301      	adds	r3, #1
 801d36a:	60fb      	str	r3, [r7, #12]
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	2b04      	cmp	r3, #4
 801d370:	ddd0      	ble.n	801d314 <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 801d372:	2300      	movs	r3, #0

}
 801d374:	0018      	movs	r0, r3
 801d376:	46bd      	mov	sp, r7
 801d378:	b004      	add	sp, #16
 801d37a:	bd80      	pop	{r7, pc}
 801d37c:	20001240 	.word	0x20001240

0801d380 <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 801d380:	b590      	push	{r4, r7, lr}
 801d382:	b085      	sub	sp, #20
 801d384:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801d386:	f7ff feb1 	bl	801d0ec <itsdk_time_get_ms>
 801d38a:	0003      	movs	r3, r0
 801d38c:	000c      	movs	r4, r1
 801d38e:	603b      	str	r3, [r7, #0]
 801d390:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d392:	2300      	movs	r3, #0
 801d394:	60fb      	str	r3, [r7, #12]
 801d396:	e045      	b.n	801d424 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 801d398:	4926      	ldr	r1, [pc, #152]	; (801d434 <itsdk_stimer_run+0xb4>)
 801d39a:	68fa      	ldr	r2, [r7, #12]
 801d39c:	0013      	movs	r3, r2
 801d39e:	005b      	lsls	r3, r3, #1
 801d3a0:	189b      	adds	r3, r3, r2
 801d3a2:	00db      	lsls	r3, r3, #3
 801d3a4:	5c5b      	ldrb	r3, [r3, r1]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d039      	beq.n	801d41e <itsdk_stimer_run+0x9e>
 801d3aa:	4922      	ldr	r1, [pc, #136]	; (801d434 <itsdk_stimer_run+0xb4>)
 801d3ac:	68fa      	ldr	r2, [r7, #12]
 801d3ae:	0013      	movs	r3, r2
 801d3b0:	005b      	lsls	r3, r3, #1
 801d3b2:	189b      	adds	r3, r3, r2
 801d3b4:	00db      	lsls	r3, r3, #3
 801d3b6:	18cb      	adds	r3, r1, r3
 801d3b8:	3308      	adds	r3, #8
 801d3ba:	685c      	ldr	r4, [r3, #4]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	687a      	ldr	r2, [r7, #4]
 801d3c0:	42a2      	cmp	r2, r4
 801d3c2:	d32c      	bcc.n	801d41e <itsdk_stimer_run+0x9e>
 801d3c4:	687a      	ldr	r2, [r7, #4]
 801d3c6:	42a2      	cmp	r2, r4
 801d3c8:	d102      	bne.n	801d3d0 <itsdk_stimer_run+0x50>
 801d3ca:	683a      	ldr	r2, [r7, #0]
 801d3cc:	429a      	cmp	r2, r3
 801d3ce:	d326      	bcc.n	801d41e <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 801d3d0:	4918      	ldr	r1, [pc, #96]	; (801d434 <itsdk_stimer_run+0xb4>)
 801d3d2:	68fa      	ldr	r2, [r7, #12]
 801d3d4:	0013      	movs	r3, r2
 801d3d6:	005b      	lsls	r3, r3, #1
 801d3d8:	189b      	adds	r3, r3, r2
 801d3da:	00db      	lsls	r3, r3, #3
 801d3dc:	2200      	movs	r2, #0
 801d3de:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 801d3e0:	4914      	ldr	r1, [pc, #80]	; (801d434 <itsdk_stimer_run+0xb4>)
 801d3e2:	68fa      	ldr	r2, [r7, #12]
 801d3e4:	0013      	movs	r3, r2
 801d3e6:	005b      	lsls	r3, r3, #1
 801d3e8:	189b      	adds	r3, r3, r2
 801d3ea:	00db      	lsls	r3, r3, #3
 801d3ec:	18cb      	adds	r3, r1, r3
 801d3ee:	3310      	adds	r3, #16
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d013      	beq.n	801d41e <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 801d3f6:	490f      	ldr	r1, [pc, #60]	; (801d434 <itsdk_stimer_run+0xb4>)
 801d3f8:	68fa      	ldr	r2, [r7, #12]
 801d3fa:	0013      	movs	r3, r2
 801d3fc:	005b      	lsls	r3, r3, #1
 801d3fe:	189b      	adds	r3, r3, r2
 801d400:	00db      	lsls	r3, r3, #3
 801d402:	18cb      	adds	r3, r1, r3
 801d404:	3310      	adds	r3, #16
 801d406:	6819      	ldr	r1, [r3, #0]
 801d408:	480a      	ldr	r0, [pc, #40]	; (801d434 <itsdk_stimer_run+0xb4>)
 801d40a:	68fa      	ldr	r2, [r7, #12]
 801d40c:	0013      	movs	r3, r2
 801d40e:	005b      	lsls	r3, r3, #1
 801d410:	189b      	adds	r3, r3, r2
 801d412:	00db      	lsls	r3, r3, #3
 801d414:	18c3      	adds	r3, r0, r3
 801d416:	3314      	adds	r3, #20
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	0018      	movs	r0, r3
 801d41c:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	3301      	adds	r3, #1
 801d422:	60fb      	str	r3, [r7, #12]
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	2b04      	cmp	r3, #4
 801d428:	ddb6      	ble.n	801d398 <itsdk_stimer_run+0x18>
		}
	}
}
 801d42a:	46c0      	nop			; (mov r8, r8)
 801d42c:	46bd      	mov	sp, r7
 801d42e:	b005      	add	sp, #20
 801d430:	bd90      	pop	{r4, r7, pc}
 801d432:	46c0      	nop			; (mov r8, r8)
 801d434:	20001240 	.word	0x20001240

0801d438 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 801d438:	b590      	push	{r4, r7, lr}
 801d43a:	b087      	sub	sp, #28
 801d43c:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801d43e:	f7ff fe55 	bl	801d0ec <itsdk_time_get_ms>
 801d442:	0003      	movs	r3, r0
 801d444:	000c      	movs	r4, r1
 801d446:	603b      	str	r3, [r7, #0]
 801d448:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 801d44a:	2301      	movs	r3, #1
 801d44c:	425b      	negs	r3, r3
 801d44e:	17dc      	asrs	r4, r3, #31
 801d450:	613b      	str	r3, [r7, #16]
 801d452:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d454:	2300      	movs	r3, #0
 801d456:	60fb      	str	r3, [r7, #12]
 801d458:	e03d      	b.n	801d4d6 <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 801d45a:	492c      	ldr	r1, [pc, #176]	; (801d50c <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d45c:	68fa      	ldr	r2, [r7, #12]
 801d45e:	0013      	movs	r3, r2
 801d460:	005b      	lsls	r3, r3, #1
 801d462:	189b      	adds	r3, r3, r2
 801d464:	00db      	lsls	r3, r3, #3
 801d466:	5c5b      	ldrb	r3, [r3, r1]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d031      	beq.n	801d4d0 <itsdk_stimer_nextTimeoutMs+0x98>
 801d46c:	4927      	ldr	r1, [pc, #156]	; (801d50c <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d46e:	68fa      	ldr	r2, [r7, #12]
 801d470:	0013      	movs	r3, r2
 801d472:	005b      	lsls	r3, r3, #1
 801d474:	189b      	adds	r3, r3, r2
 801d476:	00db      	lsls	r3, r3, #3
 801d478:	18cb      	adds	r3, r1, r3
 801d47a:	3308      	adds	r3, #8
 801d47c:	685c      	ldr	r4, [r3, #4]
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	687a      	ldr	r2, [r7, #4]
 801d482:	42a2      	cmp	r2, r4
 801d484:	d824      	bhi.n	801d4d0 <itsdk_stimer_nextTimeoutMs+0x98>
 801d486:	687a      	ldr	r2, [r7, #4]
 801d488:	42a2      	cmp	r2, r4
 801d48a:	d102      	bne.n	801d492 <itsdk_stimer_nextTimeoutMs+0x5a>
 801d48c:	683a      	ldr	r2, [r7, #0]
 801d48e:	429a      	cmp	r2, r3
 801d490:	d81e      	bhi.n	801d4d0 <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 801d492:	491e      	ldr	r1, [pc, #120]	; (801d50c <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d494:	68fa      	ldr	r2, [r7, #12]
 801d496:	0013      	movs	r3, r2
 801d498:	005b      	lsls	r3, r3, #1
 801d49a:	189b      	adds	r3, r3, r2
 801d49c:	00db      	lsls	r3, r3, #3
 801d49e:	18cb      	adds	r3, r1, r3
 801d4a0:	3308      	adds	r3, #8
 801d4a2:	685c      	ldr	r4, [r3, #4]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	697a      	ldr	r2, [r7, #20]
 801d4a8:	42a2      	cmp	r2, r4
 801d4aa:	d805      	bhi.n	801d4b8 <itsdk_stimer_nextTimeoutMs+0x80>
 801d4ac:	697a      	ldr	r2, [r7, #20]
 801d4ae:	42a2      	cmp	r2, r4
 801d4b0:	d10e      	bne.n	801d4d0 <itsdk_stimer_nextTimeoutMs+0x98>
 801d4b2:	693a      	ldr	r2, [r7, #16]
 801d4b4:	429a      	cmp	r2, r3
 801d4b6:	d90b      	bls.n	801d4d0 <itsdk_stimer_nextTimeoutMs+0x98>
 801d4b8:	4914      	ldr	r1, [pc, #80]	; (801d50c <itsdk_stimer_nextTimeoutMs+0xd4>)
 801d4ba:	68fa      	ldr	r2, [r7, #12]
 801d4bc:	0013      	movs	r3, r2
 801d4be:	005b      	lsls	r3, r3, #1
 801d4c0:	189b      	adds	r3, r3, r2
 801d4c2:	00db      	lsls	r3, r3, #3
 801d4c4:	18cb      	adds	r3, r1, r3
 801d4c6:	3308      	adds	r3, #8
 801d4c8:	685c      	ldr	r4, [r3, #4]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	613b      	str	r3, [r7, #16]
 801d4ce:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	3301      	adds	r3, #1
 801d4d4:	60fb      	str	r3, [r7, #12]
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	2b04      	cmp	r3, #4
 801d4da:	ddbe      	ble.n	801d45a <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 801d4dc:	693b      	ldr	r3, [r7, #16]
 801d4de:	3301      	adds	r3, #1
 801d4e0:	d102      	bne.n	801d4e8 <itsdk_stimer_nextTimeoutMs+0xb0>
 801d4e2:	697b      	ldr	r3, [r7, #20]
 801d4e4:	3301      	adds	r3, #1
 801d4e6:	d00b      	beq.n	801d500 <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 801d4e8:	6939      	ldr	r1, [r7, #16]
 801d4ea:	697a      	ldr	r2, [r7, #20]
 801d4ec:	683b      	ldr	r3, [r7, #0]
 801d4ee:	687c      	ldr	r4, [r7, #4]
 801d4f0:	1ac9      	subs	r1, r1, r3
 801d4f2:	41a2      	sbcs	r2, r4
 801d4f4:	000b      	movs	r3, r1
 801d4f6:	0014      	movs	r4, r2
 801d4f8:	613b      	str	r3, [r7, #16]
 801d4fa:	617c      	str	r4, [r7, #20]
		return min;
 801d4fc:	693b      	ldr	r3, [r7, #16]
 801d4fe:	e001      	b.n	801d504 <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 801d500:	2301      	movs	r3, #1
 801d502:	425b      	negs	r3, r3
}
 801d504:	0018      	movs	r0, r3
 801d506:	46bd      	mov	sp, r7
 801d508:	b007      	add	sp, #28
 801d50a:	bd90      	pop	{r4, r7, pc}
 801d50c:	20001240 	.word	0x20001240

0801d510 <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 801d510:	b580      	push	{r7, lr}
 801d512:	b084      	sub	sp, #16
 801d514:	af00      	add	r7, sp, #0
 801d516:	6078      	str	r0, [r7, #4]
 801d518:	000a      	movs	r2, r1
 801d51a:	1cfb      	adds	r3, r7, #3
 801d51c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801d51e:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 801d520:	4b73      	ldr	r3, [pc, #460]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d524:	4b72      	ldr	r3, [pc, #456]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d526:	2180      	movs	r1, #128	; 0x80
 801d528:	0089      	lsls	r1, r1, #2
 801d52a:	430a      	orrs	r2, r1
 801d52c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 801d52e:	46c0      	nop			; (mov r8, r8)
 801d530:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 801d532:	4b6f      	ldr	r3, [pc, #444]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d536:	4b6e      	ldr	r3, [pc, #440]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d538:	2180      	movs	r1, #128	; 0x80
 801d53a:	0089      	lsls	r1, r1, #2
 801d53c:	430a      	orrs	r2, r1
 801d53e:	625a      	str	r2, [r3, #36]	; 0x24
 801d540:	46c0      	nop			; (mov r8, r8)
 801d542:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 801d544:	4b6a      	ldr	r3, [pc, #424]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d548:	4b69      	ldr	r3, [pc, #420]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d54a:	496a      	ldr	r1, [pc, #424]	; (801d6f4 <__getAdcValue+0x1e4>)
 801d54c:	400a      	ands	r2, r1
 801d54e:	625a      	str	r2, [r3, #36]	; 0x24
 801d550:	46c0      	nop			; (mov r8, r8)
 801d552:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 801d554:	4b68      	ldr	r3, [pc, #416]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d556:	2200      	movs	r2, #0
 801d558:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 801d55a:	4b67      	ldr	r3, [pc, #412]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d55c:	691a      	ldr	r2, [r3, #16]
 801d55e:	4b66      	ldr	r3, [pc, #408]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d560:	0092      	lsls	r2, r2, #2
 801d562:	0892      	lsrs	r2, r2, #2
 801d564:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 801d566:	4b64      	ldr	r3, [pc, #400]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d568:	689a      	ldr	r2, [r3, #8]
 801d56a:	4b63      	ldr	r3, [pc, #396]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d56c:	2180      	movs	r1, #128	; 0x80
 801d56e:	0549      	lsls	r1, r1, #21
 801d570:	430a      	orrs	r2, r1
 801d572:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 801d574:	4b61      	ldr	r3, [pc, #388]	; (801d6fc <__getAdcValue+0x1ec>)
 801d576:	681a      	ldr	r2, [r3, #0]
 801d578:	4b60      	ldr	r3, [pc, #384]	; (801d6fc <__getAdcValue+0x1ec>)
 801d57a:	2180      	movs	r1, #128	; 0x80
 801d57c:	03c9      	lsls	r1, r1, #15
 801d57e:	430a      	orrs	r2, r1
 801d580:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 801d582:	4b5e      	ldr	r3, [pc, #376]	; (801d6fc <__getAdcValue+0x1ec>)
 801d584:	681a      	ldr	r2, [r3, #0]
 801d586:	4b5d      	ldr	r3, [pc, #372]	; (801d6fc <__getAdcValue+0x1ec>)
 801d588:	2180      	movs	r1, #128	; 0x80
 801d58a:	0409      	lsls	r1, r1, #16
 801d58c:	430a      	orrs	r2, r1
 801d58e:	601a      	str	r2, [r3, #0]
 801d590:	46c0      	nop			; (mov r8, r8)
 801d592:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 801d594:	4b58      	ldr	r3, [pc, #352]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d596:	689b      	ldr	r3, [r3, #8]
 801d598:	2201      	movs	r2, #1
 801d59a:	4013      	ands	r3, r2
 801d59c:	d005      	beq.n	801d5aa <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 801d59e:	4b56      	ldr	r3, [pc, #344]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5a0:	689a      	ldr	r2, [r3, #8]
 801d5a2:	4b55      	ldr	r3, [pc, #340]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5a4:	2101      	movs	r1, #1
 801d5a6:	438a      	bics	r2, r1
 801d5a8:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 801d5aa:	4b53      	ldr	r3, [pc, #332]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5ac:	689a      	ldr	r2, [r3, #8]
 801d5ae:	4b52      	ldr	r3, [pc, #328]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5b0:	2180      	movs	r1, #128	; 0x80
 801d5b2:	0609      	lsls	r1, r1, #24
 801d5b4:	430a      	orrs	r2, r1
 801d5b6:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 801d5b8:	46c0      	nop			; (mov r8, r8)
 801d5ba:	4b4f      	ldr	r3, [pc, #316]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5bc:	681a      	ldr	r2, [r3, #0]
 801d5be:	2380      	movs	r3, #128	; 0x80
 801d5c0:	011b      	lsls	r3, r3, #4
 801d5c2:	4013      	ands	r3, r2
 801d5c4:	d0f9      	beq.n	801d5ba <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 801d5c6:	4b4c      	ldr	r3, [pc, #304]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5c8:	681a      	ldr	r2, [r3, #0]
 801d5ca:	4b4b      	ldr	r3, [pc, #300]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5cc:	2180      	movs	r1, #128	; 0x80
 801d5ce:	0109      	lsls	r1, r1, #4
 801d5d0:	430a      	orrs	r2, r1
 801d5d2:	601a      	str	r2, [r3, #0]
 801d5d4:	46c0      	nop			; (mov r8, r8)
 801d5d6:	46c0      	nop			; (mov r8, r8)
 801d5d8:	46c0      	nop			; (mov r8, r8)
 801d5da:	46c0      	nop			; (mov r8, r8)
 801d5dc:	46c0      	nop			; (mov r8, r8)
 801d5de:	46c0      	nop			; (mov r8, r8)
 801d5e0:	46c0      	nop			; (mov r8, r8)
 801d5e2:	46c0      	nop			; (mov r8, r8)
 801d5e4:	46c0      	nop			; (mov r8, r8)
 801d5e6:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 801d5e8:	4b43      	ldr	r3, [pc, #268]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5ea:	681a      	ldr	r2, [r3, #0]
 801d5ec:	4b42      	ldr	r3, [pc, #264]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5ee:	2101      	movs	r1, #1
 801d5f0:	430a      	orrs	r2, r1
 801d5f2:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 801d5f4:	4b40      	ldr	r3, [pc, #256]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5f6:	689a      	ldr	r2, [r3, #8]
 801d5f8:	4b3f      	ldr	r3, [pc, #252]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d5fa:	2101      	movs	r1, #1
 801d5fc:	430a      	orrs	r2, r1
 801d5fe:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 801d600:	46c0      	nop			; (mov r8, r8)
 801d602:	4b3d      	ldr	r3, [pc, #244]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	2201      	movs	r2, #1
 801d608:	4013      	ands	r3, r2
 801d60a:	d0fa      	beq.n	801d602 <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 801d60c:	4b3a      	ldr	r3, [pc, #232]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d60e:	68da      	ldr	r2, [r3, #12]
 801d610:	4b39      	ldr	r3, [pc, #228]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d612:	493b      	ldr	r1, [pc, #236]	; (801d700 <__getAdcValue+0x1f0>)
 801d614:	400a      	ands	r2, r1
 801d616:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 801d618:	4b37      	ldr	r3, [pc, #220]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d61a:	68da      	ldr	r2, [r3, #12]
 801d61c:	4b36      	ldr	r3, [pc, #216]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d61e:	2120      	movs	r1, #32
 801d620:	438a      	bics	r2, r1
 801d622:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 801d624:	4b34      	ldr	r3, [pc, #208]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d626:	68da      	ldr	r2, [r3, #12]
 801d628:	4b33      	ldr	r3, [pc, #204]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d62a:	2118      	movs	r1, #24
 801d62c:	438a      	bics	r2, r1
 801d62e:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 801d630:	4b31      	ldr	r3, [pc, #196]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d632:	687a      	ldr	r2, [r7, #4]
 801d634:	0352      	lsls	r2, r2, #13
 801d636:	0b52      	lsrs	r2, r2, #13
 801d638:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 801d63a:	4b2f      	ldr	r3, [pc, #188]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d63c:	695a      	ldr	r2, [r3, #20]
 801d63e:	4b2e      	ldr	r3, [pc, #184]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d640:	2107      	movs	r1, #7
 801d642:	430a      	orrs	r2, r1
 801d644:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 801d646:	2300      	movs	r3, #0
 801d648:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801d64a:	2300      	movs	r3, #0
 801d64c:	60bb      	str	r3, [r7, #8]
 801d64e:	e013      	b.n	801d678 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 801d650:	4b29      	ldr	r3, [pc, #164]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d652:	689a      	ldr	r2, [r3, #8]
 801d654:	4b28      	ldr	r3, [pc, #160]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d656:	2104      	movs	r1, #4
 801d658:	430a      	orrs	r2, r1
 801d65a:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 801d65c:	46c0      	nop			; (mov r8, r8)
 801d65e:	4b26      	ldr	r3, [pc, #152]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	2204      	movs	r2, #4
 801d664:	4013      	ands	r3, r2
 801d666:	d0fa      	beq.n	801d65e <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 801d668:	4b23      	ldr	r3, [pc, #140]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d66c:	68fa      	ldr	r2, [r7, #12]
 801d66e:	18d3      	adds	r3, r2, r3
 801d670:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	3301      	adds	r3, #1
 801d676:	60bb      	str	r3, [r7, #8]
 801d678:	1cfb      	adds	r3, r7, #3
 801d67a:	781b      	ldrb	r3, [r3, #0]
 801d67c:	68ba      	ldr	r2, [r7, #8]
 801d67e:	429a      	cmp	r2, r3
 801d680:	d3e6      	bcc.n	801d650 <__getAdcValue+0x140>
  }
  data = data / oversampling;
 801d682:	1cfb      	adds	r3, r7, #3
 801d684:	781b      	ldrb	r3, [r3, #0]
 801d686:	0019      	movs	r1, r3
 801d688:	68f8      	ldr	r0, [r7, #12]
 801d68a:	f7e2 fd45 	bl	8000118 <__udivsi3>
 801d68e:	0003      	movs	r3, r0
 801d690:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 801d692:	4b19      	ldr	r3, [pc, #100]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d694:	689b      	ldr	r3, [r3, #8]
 801d696:	2201      	movs	r2, #1
 801d698:	4013      	ands	r3, r2
 801d69a:	d00b      	beq.n	801d6b4 <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 801d69c:	4b16      	ldr	r3, [pc, #88]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d69e:	689a      	ldr	r2, [r3, #8]
 801d6a0:	4b15      	ldr	r3, [pc, #84]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d6a2:	2102      	movs	r1, #2
 801d6a4:	430a      	orrs	r2, r1
 801d6a6:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 801d6a8:	46c0      	nop			; (mov r8, r8)
 801d6aa:	4b13      	ldr	r3, [pc, #76]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d6ac:	689b      	ldr	r3, [r3, #8]
 801d6ae:	2201      	movs	r2, #1
 801d6b0:	4013      	ands	r3, r2
 801d6b2:	d1fa      	bne.n	801d6aa <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 801d6b4:	4b11      	ldr	r3, [pc, #68]	; (801d6fc <__getAdcValue+0x1ec>)
 801d6b6:	681a      	ldr	r2, [r3, #0]
 801d6b8:	4b10      	ldr	r3, [pc, #64]	; (801d6fc <__getAdcValue+0x1ec>)
 801d6ba:	4912      	ldr	r1, [pc, #72]	; (801d704 <__getAdcValue+0x1f4>)
 801d6bc:	400a      	ands	r2, r1
 801d6be:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 801d6c0:	4b0e      	ldr	r3, [pc, #56]	; (801d6fc <__getAdcValue+0x1ec>)
 801d6c2:	681a      	ldr	r2, [r3, #0]
 801d6c4:	4b0d      	ldr	r3, [pc, #52]	; (801d6fc <__getAdcValue+0x1ec>)
 801d6c6:	4910      	ldr	r1, [pc, #64]	; (801d708 <__getAdcValue+0x1f8>)
 801d6c8:	400a      	ands	r2, r1
 801d6ca:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 801d6cc:	4b0a      	ldr	r3, [pc, #40]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d6ce:	689a      	ldr	r2, [r3, #8]
 801d6d0:	4b09      	ldr	r3, [pc, #36]	; (801d6f8 <__getAdcValue+0x1e8>)
 801d6d2:	490e      	ldr	r1, [pc, #56]	; (801d70c <__getAdcValue+0x1fc>)
 801d6d4:	400a      	ands	r2, r1
 801d6d6:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 801d6d8:	4b05      	ldr	r3, [pc, #20]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d6da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d6dc:	4b04      	ldr	r3, [pc, #16]	; (801d6f0 <__getAdcValue+0x1e0>)
 801d6de:	4905      	ldr	r1, [pc, #20]	; (801d6f4 <__getAdcValue+0x1e4>)
 801d6e0:	400a      	ands	r2, r1
 801d6e2:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 801d6e4:	b662      	cpsie	i

  __enable_irq();
  return data;
 801d6e6:	68fb      	ldr	r3, [r7, #12]
}
 801d6e8:	0018      	movs	r0, r3
 801d6ea:	46bd      	mov	sp, r7
 801d6ec:	b004      	add	sp, #16
 801d6ee:	bd80      	pop	{r7, pc}
 801d6f0:	40021000 	.word	0x40021000
 801d6f4:	fffffdff 	.word	0xfffffdff
 801d6f8:	40012400 	.word	0x40012400
 801d6fc:	40012708 	.word	0x40012708
 801d700:	fffff3ff 	.word	0xfffff3ff
 801d704:	ffbfffff 	.word	0xffbfffff
 801d708:	ff7fffff 	.word	0xff7fffff
 801d70c:	efffffff 	.word	0xefffffff

0801d710 <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 801d710:	b5b0      	push	{r4, r5, r7, lr}
 801d712:	b084      	sub	sp, #16
 801d714:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 801d716:	240e      	movs	r4, #14
 801d718:	0025      	movs	r5, r4
 801d71a:	193c      	adds	r4, r7, r4
 801d71c:	f000 f850 	bl	801d7c0 <adc_getVdd>
 801d720:	0003      	movs	r3, r0
 801d722:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 801d724:	4b21      	ldr	r3, [pc, #132]	; (801d7ac <adc_getTemperature+0x9c>)
 801d726:	2110      	movs	r1, #16
 801d728:	0018      	movs	r0, r3
 801d72a:	f7ff fef1 	bl	801d510 <__getAdcValue>
 801d72e:	0003      	movs	r3, r0
 801d730:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 801d732:	4b1f      	ldr	r3, [pc, #124]	; (801d7b0 <adc_getTemperature+0xa0>)
 801d734:	881b      	ldrh	r3, [r3, #0]
 801d736:	001a      	movs	r2, r3
 801d738:	4b1e      	ldr	r3, [pc, #120]	; (801d7b4 <adc_getTemperature+0xa4>)
 801d73a:	435a      	muls	r2, r3
 801d73c:	002c      	movs	r4, r5
 801d73e:	193b      	adds	r3, r7, r4
 801d740:	881b      	ldrh	r3, [r3, #0]
 801d742:	0019      	movs	r1, r3
 801d744:	0010      	movs	r0, r2
 801d746:	f7e2 fd71 	bl	800022c <__divsi3>
 801d74a:	0003      	movs	r3, r0
 801d74c:	001a      	movs	r2, r3
 801d74e:	1dbb      	adds	r3, r7, #6
 801d750:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 801d752:	4b19      	ldr	r3, [pc, #100]	; (801d7b8 <adc_getTemperature+0xa8>)
 801d754:	881b      	ldrh	r3, [r3, #0]
 801d756:	001a      	movs	r2, r3
 801d758:	4b16      	ldr	r3, [pc, #88]	; (801d7b4 <adc_getTemperature+0xa4>)
 801d75a:	435a      	muls	r2, r3
 801d75c:	193b      	adds	r3, r7, r4
 801d75e:	881b      	ldrh	r3, [r3, #0]
 801d760:	0019      	movs	r1, r3
 801d762:	0010      	movs	r0, r2
 801d764:	f7e2 fd62 	bl	800022c <__divsi3>
 801d768:	0003      	movs	r3, r0
 801d76a:	001a      	movs	r2, r3
 801d76c:	1d3b      	adds	r3, r7, #4
 801d76e:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 801d770:	1dbb      	adds	r3, r7, #6
 801d772:	881b      	ldrh	r3, [r3, #0]
 801d774:	68ba      	ldr	r2, [r7, #8]
 801d776:	1ad3      	subs	r3, r2, r3
 801d778:	4a10      	ldr	r2, [pc, #64]	; (801d7bc <adc_getTemperature+0xac>)
 801d77a:	4353      	muls	r3, r2
 801d77c:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 801d77e:	1d3b      	adds	r3, r7, #4
 801d780:	881a      	ldrh	r2, [r3, #0]
 801d782:	1dbb      	adds	r3, r7, #6
 801d784:	881b      	ldrh	r3, [r3, #0]
 801d786:	1ad3      	subs	r3, r2, r3
 801d788:	0019      	movs	r1, r3
 801d78a:	6838      	ldr	r0, [r7, #0]
 801d78c:	f7e2 fd4e 	bl	800022c <__divsi3>
 801d790:	0003      	movs	r3, r0
 801d792:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 801d794:	683b      	ldr	r3, [r7, #0]
 801d796:	4a07      	ldr	r2, [pc, #28]	; (801d7b4 <adc_getTemperature+0xa4>)
 801d798:	4694      	mov	ip, r2
 801d79a:	4463      	add	r3, ip
 801d79c:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 801d79e:	683b      	ldr	r3, [r7, #0]
 801d7a0:	b21b      	sxth	r3, r3

}
 801d7a2:	0018      	movs	r0, r3
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	b004      	add	sp, #16
 801d7a8:	bdb0      	pop	{r4, r5, r7, pc}
 801d7aa:	46c0      	nop			; (mov r8, r8)
 801d7ac:	48040000 	.word	0x48040000
 801d7b0:	1ff8007a 	.word	0x1ff8007a
 801d7b4:	00000bb8 	.word	0x00000bb8
 801d7b8:	1ff8007e 	.word	0x1ff8007e
 801d7bc:	00002710 	.word	0x00002710

0801d7c0 <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 801d7c0:	b590      	push	{r4, r7, lr}
 801d7c2:	b083      	sub	sp, #12
 801d7c4:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 801d7c6:	f7ff fca3 	bl	801d110 <itsdk_time_get_us>
 801d7ca:	000a      	movs	r2, r1
 801d7cc:	0001      	movs	r1, r0
 801d7ce:	4b13      	ldr	r3, [pc, #76]	; (801d81c <adc_getVdd+0x5c>)
 801d7d0:	68dc      	ldr	r4, [r3, #12]
 801d7d2:	689b      	ldr	r3, [r3, #8]
 801d7d4:	1ac9      	subs	r1, r1, r3
 801d7d6:	41a2      	sbcs	r2, r4
 801d7d8:	0008      	movs	r0, r1
 801d7da:	0011      	movs	r1, r2
 801d7dc:	22fa      	movs	r2, #250	; 0xfa
 801d7de:	0092      	lsls	r2, r2, #2
 801d7e0:	2300      	movs	r3, #0
 801d7e2:	f7e2 fe71 	bl	80004c8 <__aeabi_uldivmod>
 801d7e6:	0003      	movs	r3, r0
 801d7e8:	000c      	movs	r4, r1
 801d7ea:	603b      	str	r3, [r7, #0]
 801d7ec:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d10b      	bne.n	801d80c <adc_getVdd+0x4c>
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d102      	bne.n	801d800 <adc_getVdd+0x40>
 801d7fa:	683b      	ldr	r3, [r7, #0]
 801d7fc:	2b07      	cmp	r3, #7
 801d7fe:	d805      	bhi.n	801d80c <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 801d800:	683b      	ldr	r3, [r7, #0]
 801d802:	2208      	movs	r2, #8
 801d804:	1ad3      	subs	r3, r2, r3
 801d806:	0018      	movs	r0, r3
 801d808:	f000 fd1a 	bl	801e240 <itsdk_delayMs>
	}
	return adc_getValue(0);
 801d80c:	2000      	movs	r0, #0
 801d80e:	f000 f813 	bl	801d838 <adc_getValue>
 801d812:	0003      	movs	r3, r0
}
 801d814:	0018      	movs	r0, r3
 801d816:	46bd      	mov	sp, r7
 801d818:	b003      	add	sp, #12
 801d81a:	bd90      	pop	{r4, r7, pc}
 801d81c:	200016a8 	.word	0x200016a8

0801d820 <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 801d820:	b580      	push	{r7, lr}
 801d822:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 801d824:	2041      	movs	r0, #65	; 0x41
 801d826:	f000 f807 	bl	801d838 <adc_getValue>
 801d82a:	0003      	movs	r3, r0
 801d82c:	18db      	adds	r3, r3, r3
 801d82e:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 801d830:	0018      	movs	r0, r3
 801d832:	46bd      	mov	sp, r7
 801d834:	bd80      	pop	{r7, pc}
	...

0801d838 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 801d838:	b580      	push	{r7, lr}
 801d83a:	b08c      	sub	sp, #48	; 0x30
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 801d840:	23a0      	movs	r3, #160	; 0xa0
 801d842:	05db      	lsls	r3, r3, #23
 801d844:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d846:	2108      	movs	r1, #8
 801d848:	187b      	adds	r3, r7, r1
 801d84a:	2203      	movs	r2, #3
 801d84c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d84e:	187b      	adds	r3, r7, r1
 801d850:	2200      	movs	r2, #0
 801d852:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 801d854:	2300      	movs	r3, #0
 801d856:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	2b4d      	cmp	r3, #77	; 0x4d
 801d85c:	d900      	bls.n	801d860 <adc_getValue+0x28>
 801d85e:	e085      	b.n	801d96c <adc_getValue+0x134>
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	009a      	lsls	r2, r3, #2
 801d864:	4b5f      	ldr	r3, [pc, #380]	; (801d9e4 <adc_getValue+0x1ac>)
 801d866:	18d3      	adds	r3, r2, r3
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 801d86c:	4b5e      	ldr	r3, [pc, #376]	; (801d9e8 <adc_getValue+0x1b0>)
 801d86e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d870:	e083      	b.n	801d97a <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d872:	2308      	movs	r3, #8
 801d874:	18fb      	adds	r3, r7, r3
 801d876:	2201      	movs	r2, #1
 801d878:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d87a:	23a0      	movs	r3, #160	; 0xa0
 801d87c:	05db      	lsls	r3, r3, #23
 801d87e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 801d880:	2301      	movs	r3, #1
 801d882:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d884:	e079      	b.n	801d97a <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d886:	2308      	movs	r3, #8
 801d888:	18fb      	adds	r3, r7, r3
 801d88a:	2202      	movs	r2, #2
 801d88c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d88e:	23a0      	movs	r3, #160	; 0xa0
 801d890:	05db      	lsls	r3, r3, #23
 801d892:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 801d894:	4b55      	ldr	r3, [pc, #340]	; (801d9ec <adc_getValue+0x1b4>)
 801d896:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d898:	e06f      	b.n	801d97a <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d89a:	2308      	movs	r3, #8
 801d89c:	18fb      	adds	r3, r7, r3
 801d89e:	2204      	movs	r2, #4
 801d8a0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8a2:	23a0      	movs	r3, #160	; 0xa0
 801d8a4:	05db      	lsls	r3, r3, #23
 801d8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 801d8a8:	4b51      	ldr	r3, [pc, #324]	; (801d9f0 <adc_getValue+0x1b8>)
 801d8aa:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8ac:	e065      	b.n	801d97a <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d8ae:	2308      	movs	r3, #8
 801d8b0:	18fb      	adds	r3, r7, r3
 801d8b2:	2208      	movs	r2, #8
 801d8b4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8b6:	23a0      	movs	r3, #160	; 0xa0
 801d8b8:	05db      	lsls	r3, r3, #23
 801d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 801d8bc:	4b4d      	ldr	r3, [pc, #308]	; (801d9f4 <adc_getValue+0x1bc>)
 801d8be:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8c0:	e05b      	b.n	801d97a <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 801d8c2:	2308      	movs	r3, #8
 801d8c4:	18fb      	adds	r3, r7, r3
 801d8c6:	2210      	movs	r2, #16
 801d8c8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8ca:	23a0      	movs	r3, #160	; 0xa0
 801d8cc:	05db      	lsls	r3, r3, #23
 801d8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 801d8d0:	4b49      	ldr	r3, [pc, #292]	; (801d9f8 <adc_getValue+0x1c0>)
 801d8d2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8d4:	e051      	b.n	801d97a <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d8d6:	2308      	movs	r3, #8
 801d8d8:	18fb      	adds	r3, r7, r3
 801d8da:	2220      	movs	r2, #32
 801d8dc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8de:	23a0      	movs	r3, #160	; 0xa0
 801d8e0:	05db      	lsls	r3, r3, #23
 801d8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 801d8e4:	4b45      	ldr	r3, [pc, #276]	; (801d9fc <adc_getValue+0x1c4>)
 801d8e6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8e8:	e047      	b.n	801d97a <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d8ea:	2308      	movs	r3, #8
 801d8ec:	18fb      	adds	r3, r7, r3
 801d8ee:	2240      	movs	r2, #64	; 0x40
 801d8f0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d8f2:	23a0      	movs	r3, #160	; 0xa0
 801d8f4:	05db      	lsls	r3, r3, #23
 801d8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 801d8f8:	4b41      	ldr	r3, [pc, #260]	; (801da00 <adc_getValue+0x1c8>)
 801d8fa:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d8fc:	e03d      	b.n	801d97a <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 801d8fe:	2308      	movs	r3, #8
 801d900:	18fb      	adds	r3, r7, r3
 801d902:	2280      	movs	r2, #128	; 0x80
 801d904:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d906:	23a0      	movs	r3, #160	; 0xa0
 801d908:	05db      	lsls	r3, r3, #23
 801d90a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 801d90c:	4b3d      	ldr	r3, [pc, #244]	; (801da04 <adc_getValue+0x1cc>)
 801d90e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d910:	e033      	b.n	801d97a <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d912:	2308      	movs	r3, #8
 801d914:	18fb      	adds	r3, r7, r3
 801d916:	2201      	movs	r2, #1
 801d918:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801d91a:	4b3b      	ldr	r3, [pc, #236]	; (801da08 <adc_getValue+0x1d0>)
 801d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 801d91e:	4b3b      	ldr	r3, [pc, #236]	; (801da0c <adc_getValue+0x1d4>)
 801d920:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d922:	e02a      	b.n	801d97a <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d924:	2308      	movs	r3, #8
 801d926:	18fb      	adds	r3, r7, r3
 801d928:	2202      	movs	r2, #2
 801d92a:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801d92c:	4b36      	ldr	r3, [pc, #216]	; (801da08 <adc_getValue+0x1d0>)
 801d92e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 801d930:	4b37      	ldr	r3, [pc, #220]	; (801da10 <adc_getValue+0x1d8>)
 801d932:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d934:	e021      	b.n	801d97a <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d936:	2308      	movs	r3, #8
 801d938:	18fb      	adds	r3, r7, r3
 801d93a:	2201      	movs	r2, #1
 801d93c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d93e:	4b35      	ldr	r3, [pc, #212]	; (801da14 <adc_getValue+0x1dc>)
 801d940:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 801d942:	4b35      	ldr	r3, [pc, #212]	; (801da18 <adc_getValue+0x1e0>)
 801d944:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d946:	e018      	b.n	801d97a <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d948:	2308      	movs	r3, #8
 801d94a:	18fb      	adds	r3, r7, r3
 801d94c:	2202      	movs	r2, #2
 801d94e:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d950:	4b30      	ldr	r3, [pc, #192]	; (801da14 <adc_getValue+0x1dc>)
 801d952:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 801d954:	4b31      	ldr	r3, [pc, #196]	; (801da1c <adc_getValue+0x1e4>)
 801d956:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d958:	e00f      	b.n	801d97a <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d95a:	2308      	movs	r3, #8
 801d95c:	18fb      	adds	r3, r7, r3
 801d95e:	2204      	movs	r2, #4
 801d960:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d962:	4b2c      	ldr	r3, [pc, #176]	; (801da14 <adc_getValue+0x1dc>)
 801d964:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 801d966:	4b2e      	ldr	r3, [pc, #184]	; (801da20 <adc_getValue+0x1e8>)
 801d968:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d96a:	e006      	b.n	801d97a <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	b29b      	uxth	r3, r3
 801d970:	4a2c      	ldr	r2, [pc, #176]	; (801da24 <adc_getValue+0x1ec>)
 801d972:	0019      	movs	r1, r3
 801d974:	0010      	movs	r0, r2
 801d976:	f7fe f8f7 	bl	801bb68 <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d006      	beq.n	801d98e <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 801d980:	2308      	movs	r3, #8
 801d982:	18fa      	adds	r2, r7, r3
 801d984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d986:	0011      	movs	r1, r2
 801d988:	0018      	movs	r0, r3
 801d98a:	f7e6 fe45 	bl	8004618 <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 801d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d990:	2110      	movs	r1, #16
 801d992:	0018      	movs	r0, r3
 801d994:	f7ff fdbc 	bl	801d510 <__getAdcValue>
 801d998:	0003      	movs	r3, r0
 801d99a:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d112      	bne.n	801d9c8 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 801d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d101      	bne.n	801d9ac <adc_getValue+0x174>
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	e017      	b.n	801d9dc <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 801d9ac:	4b1e      	ldr	r3, [pc, #120]	; (801da28 <adc_getValue+0x1f0>)
 801d9ae:	881b      	ldrh	r3, [r3, #0]
 801d9b0:	001a      	movs	r2, r3
 801d9b2:	4b1e      	ldr	r3, [pc, #120]	; (801da2c <adc_getValue+0x1f4>)
 801d9b4:	4353      	muls	r3, r2
 801d9b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d9b8:	0018      	movs	r0, r3
 801d9ba:	f7e2 fbad 	bl	8000118 <__udivsi3>
 801d9be:	0003      	movs	r3, r0
 801d9c0:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 801d9c2:	69fb      	ldr	r3, [r7, #28]
 801d9c4:	b29b      	uxth	r3, r3
 801d9c6:	e009      	b.n	801d9dc <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 801d9c8:	f7ff fefa 	bl	801d7c0 <adc_getVdd>
 801d9cc:	0003      	movs	r3, r0
 801d9ce:	001a      	movs	r2, r3
 801d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9d2:	4353      	muls	r3, r2
 801d9d4:	0b1b      	lsrs	r3, r3, #12
 801d9d6:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 801d9d8:	6a3b      	ldr	r3, [r7, #32]
 801d9da:	b29b      	uxth	r3, r3
	}

}
 801d9dc:	0018      	movs	r0, r3
 801d9de:	46bd      	mov	sp, r7
 801d9e0:	b00c      	add	sp, #48	; 0x30
 801d9e2:	bd80      	pop	{r7, pc}
 801d9e4:	08022214 	.word	0x08022214
 801d9e8:	44020000 	.word	0x44020000
 801d9ec:	04000002 	.word	0x04000002
 801d9f0:	08000004 	.word	0x08000004
 801d9f4:	0c000008 	.word	0x0c000008
 801d9f8:	10000010 	.word	0x10000010
 801d9fc:	14000020 	.word	0x14000020
 801da00:	18000040 	.word	0x18000040
 801da04:	1c000080 	.word	0x1c000080
 801da08:	50000400 	.word	0x50000400
 801da0c:	20000100 	.word	0x20000100
 801da10:	24000200 	.word	0x24000200
 801da14:	50000800 	.word	0x50000800
 801da18:	28000400 	.word	0x28000400
 801da1c:	2c000800 	.word	0x2c000800
 801da20:	30001000 	.word	0x30001000
 801da24:	d0000008 	.word	0xd0000008
 801da28:	1ff80078 	.word	0x1ff80078
 801da2c:	00000bb8 	.word	0x00000bb8

0801da30 <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 801da30:	b580      	push	{r7, lr}
 801da32:	b082      	sub	sp, #8
 801da34:	af00      	add	r7, sp, #0
 801da36:	0002      	movs	r2, r0
 801da38:	1dfb      	adds	r3, r7, #7
 801da3a:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 801da3c:	1dfb      	adds	r3, r7, #7
 801da3e:	781b      	ldrb	r3, [r3, #0]
 801da40:	2b07      	cmp	r3, #7
 801da42:	d811      	bhi.n	801da68 <getPortFromBankId+0x38>
 801da44:	009a      	lsls	r2, r3, #2
 801da46:	4b0f      	ldr	r3, [pc, #60]	; (801da84 <getPortFromBankId+0x54>)
 801da48:	18d3      	adds	r3, r2, r3
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 801da4e:	23a0      	movs	r3, #160	; 0xa0
 801da50:	05db      	lsls	r3, r3, #23
 801da52:	e012      	b.n	801da7a <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 801da54:	4b0c      	ldr	r3, [pc, #48]	; (801da88 <getPortFromBankId+0x58>)
 801da56:	e010      	b.n	801da7a <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 801da58:	4b0c      	ldr	r3, [pc, #48]	; (801da8c <getPortFromBankId+0x5c>)
 801da5a:	e00e      	b.n	801da7a <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 801da5c:	4b0c      	ldr	r3, [pc, #48]	; (801da90 <getPortFromBankId+0x60>)
 801da5e:	e00c      	b.n	801da7a <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 801da60:	4b0c      	ldr	r3, [pc, #48]	; (801da94 <getPortFromBankId+0x64>)
 801da62:	e00a      	b.n	801da7a <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 801da64:	4b0c      	ldr	r3, [pc, #48]	; (801da98 <getPortFromBankId+0x68>)
 801da66:	e008      	b.n	801da7a <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 801da68:	1dfb      	adds	r3, r7, #7
 801da6a:	781b      	ldrb	r3, [r3, #0]
 801da6c:	b29b      	uxth	r3, r3
 801da6e:	4a0b      	ldr	r2, [pc, #44]	; (801da9c <getPortFromBankId+0x6c>)
 801da70:	0019      	movs	r1, r3
 801da72:	0010      	movs	r0, r2
 801da74:	f7fe f878 	bl	801bb68 <itsdk_error_report>
	}
	return NULL;
 801da78:	2300      	movs	r3, #0
}
 801da7a:	0018      	movs	r0, r3
 801da7c:	46bd      	mov	sp, r7
 801da7e:	b002      	add	sp, #8
 801da80:	bd80      	pop	{r7, pc}
 801da82:	46c0      	nop			; (mov r8, r8)
 801da84:	0802234c 	.word	0x0802234c
 801da88:	50000400 	.word	0x50000400
 801da8c:	50000800 	.word	0x50000800
 801da90:	50000c00 	.word	0x50000c00
 801da94:	50001000 	.word	0x50001000
 801da98:	50001c00 	.word	0x50001c00
 801da9c:	d0000004 	.word	0xd0000004

0801daa0 <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 801daa0:	b580      	push	{r7, lr}
 801daa2:	b084      	sub	sp, #16
 801daa4:	af00      	add	r7, sp, #0
 801daa6:	0002      	movs	r2, r0
 801daa8:	1dbb      	adds	r3, r7, #6
 801daaa:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 801daac:	230f      	movs	r3, #15
 801daae:	18fb      	adds	r3, r7, r3
 801dab0:	2200      	movs	r2, #0
 801dab2:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 801dab4:	1dbb      	adds	r3, r7, #6
 801dab6:	881a      	ldrh	r2, [r3, #0]
 801dab8:	23ff      	movs	r3, #255	; 0xff
 801daba:	021b      	lsls	r3, r3, #8
 801dabc:	4013      	ands	r3, r2
 801dabe:	d006      	beq.n	801dace <getPinNumFromPinVector+0x2e>
 801dac0:	220f      	movs	r2, #15
 801dac2:	18bb      	adds	r3, r7, r2
 801dac4:	18ba      	adds	r2, r7, r2
 801dac6:	7812      	ldrb	r2, [r2, #0]
 801dac8:	2108      	movs	r1, #8
 801daca:	430a      	orrs	r2, r1
 801dacc:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 801dace:	1dbb      	adds	r3, r7, #6
 801dad0:	881b      	ldrh	r3, [r3, #0]
 801dad2:	4a14      	ldr	r2, [pc, #80]	; (801db24 <getPinNumFromPinVector+0x84>)
 801dad4:	4013      	ands	r3, r2
 801dad6:	d006      	beq.n	801dae6 <getPinNumFromPinVector+0x46>
 801dad8:	220f      	movs	r2, #15
 801dada:	18bb      	adds	r3, r7, r2
 801dadc:	18ba      	adds	r2, r7, r2
 801dade:	7812      	ldrb	r2, [r2, #0]
 801dae0:	2104      	movs	r1, #4
 801dae2:	430a      	orrs	r2, r1
 801dae4:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 801dae6:	1dbb      	adds	r3, r7, #6
 801dae8:	881b      	ldrh	r3, [r3, #0]
 801daea:	4a0f      	ldr	r2, [pc, #60]	; (801db28 <getPinNumFromPinVector+0x88>)
 801daec:	4013      	ands	r3, r2
 801daee:	d006      	beq.n	801dafe <getPinNumFromPinVector+0x5e>
 801daf0:	220f      	movs	r2, #15
 801daf2:	18bb      	adds	r3, r7, r2
 801daf4:	18ba      	adds	r2, r7, r2
 801daf6:	7812      	ldrb	r2, [r2, #0]
 801daf8:	2102      	movs	r1, #2
 801dafa:	430a      	orrs	r2, r1
 801dafc:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 801dafe:	1dbb      	adds	r3, r7, #6
 801db00:	881b      	ldrh	r3, [r3, #0]
 801db02:	4a0a      	ldr	r2, [pc, #40]	; (801db2c <getPinNumFromPinVector+0x8c>)
 801db04:	4013      	ands	r3, r2
 801db06:	d006      	beq.n	801db16 <getPinNumFromPinVector+0x76>
 801db08:	220f      	movs	r2, #15
 801db0a:	18bb      	adds	r3, r7, r2
 801db0c:	18ba      	adds	r2, r7, r2
 801db0e:	7812      	ldrb	r2, [r2, #0]
 801db10:	2101      	movs	r1, #1
 801db12:	430a      	orrs	r2, r1
 801db14:	701a      	strb	r2, [r3, #0]
	return pinPos;
 801db16:	230f      	movs	r3, #15
 801db18:	18fb      	adds	r3, r7, r3
 801db1a:	781b      	ldrb	r3, [r3, #0]
}
 801db1c:	0018      	movs	r0, r3
 801db1e:	46bd      	mov	sp, r7
 801db20:	b004      	add	sp, #16
 801db22:	bd80      	pop	{r7, pc}
 801db24:	0000f0f0 	.word	0x0000f0f0
 801db28:	0000cccc 	.word	0x0000cccc
 801db2c:	0000aaaa 	.word	0x0000aaaa

0801db30 <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 801db30:	b5b0      	push	{r4, r5, r7, lr}
 801db32:	b084      	sub	sp, #16
 801db34:	af00      	add	r7, sp, #0
 801db36:	0002      	movs	r2, r0
 801db38:	1dfb      	adds	r3, r7, #7
 801db3a:	701a      	strb	r2, [r3, #0]
 801db3c:	1d3b      	adds	r3, r7, #4
 801db3e:	1c0a      	adds	r2, r1, #0
 801db40:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 801db42:	250f      	movs	r5, #15
 801db44:	197c      	adds	r4, r7, r5
 801db46:	1d3b      	adds	r3, r7, #4
 801db48:	881b      	ldrh	r3, [r3, #0]
 801db4a:	0018      	movs	r0, r3
 801db4c:	f7ff ffa8 	bl	801daa0 <getPinNumFromPinVector>
 801db50:	0003      	movs	r3, r0
 801db52:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 801db54:	197b      	adds	r3, r7, r5
 801db56:	781b      	ldrb	r3, [r3, #0]
 801db58:	2b01      	cmp	r3, #1
 801db5a:	d801      	bhi.n	801db60 <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 801db5c:	2305      	movs	r3, #5
 801db5e:	e007      	b.n	801db70 <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 801db60:	230f      	movs	r3, #15
 801db62:	18fb      	adds	r3, r7, r3
 801db64:	781b      	ldrb	r3, [r3, #0]
 801db66:	2b03      	cmp	r3, #3
 801db68:	d801      	bhi.n	801db6e <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 801db6a:	2306      	movs	r3, #6
 801db6c:	e000      	b.n	801db70 <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 801db6e:	2307      	movs	r3, #7
	}
}
 801db70:	0018      	movs	r0, r3
 801db72:	46bd      	mov	sp, r7
 801db74:	b004      	add	sp, #16
 801db76:	bdb0      	pop	{r4, r5, r7, pc}

0801db78 <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 801db78:	b590      	push	{r4, r7, lr}
 801db7a:	b085      	sub	sp, #20
 801db7c:	af02      	add	r7, sp, #8
 801db7e:	0004      	movs	r4, r0
 801db80:	0008      	movs	r0, r1
 801db82:	0011      	movs	r1, r2
 801db84:	1dfb      	adds	r3, r7, #7
 801db86:	1c22      	adds	r2, r4, #0
 801db88:	701a      	strb	r2, [r3, #0]
 801db8a:	1d3b      	adds	r3, r7, #4
 801db8c:	1c02      	adds	r2, r0, #0
 801db8e:	801a      	strh	r2, [r3, #0]
 801db90:	1dbb      	adds	r3, r7, #6
 801db92:	1c0a      	adds	r2, r1, #0
 801db94:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 801db96:	1dbb      	adds	r3, r7, #6
 801db98:	781a      	ldrb	r2, [r3, #0]
 801db9a:	1d3b      	adds	r3, r7, #4
 801db9c:	8819      	ldrh	r1, [r3, #0]
 801db9e:	1dfb      	adds	r3, r7, #7
 801dba0:	7818      	ldrb	r0, [r3, #0]
 801dba2:	2300      	movs	r3, #0
 801dba4:	9300      	str	r3, [sp, #0]
 801dba6:	2300      	movs	r3, #0
 801dba8:	f000 f804 	bl	801dbb4 <gpio_configure_ext>
}
 801dbac:	46c0      	nop			; (mov r8, r8)
 801dbae:	46bd      	mov	sp, r7
 801dbb0:	b003      	add	sp, #12
 801dbb2:	bd90      	pop	{r4, r7, pc}

0801dbb4 <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 801dbb4:	b5b0      	push	{r4, r5, r7, lr}
 801dbb6:	b08e      	sub	sp, #56	; 0x38
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	0005      	movs	r5, r0
 801dbbc:	000c      	movs	r4, r1
 801dbbe:	0010      	movs	r0, r2
 801dbc0:	0019      	movs	r1, r3
 801dbc2:	1dfb      	adds	r3, r7, #7
 801dbc4:	1c2a      	adds	r2, r5, #0
 801dbc6:	701a      	strb	r2, [r3, #0]
 801dbc8:	1d3b      	adds	r3, r7, #4
 801dbca:	1c22      	adds	r2, r4, #0
 801dbcc:	801a      	strh	r2, [r3, #0]
 801dbce:	1dbb      	adds	r3, r7, #6
 801dbd0:	1c02      	adds	r2, r0, #0
 801dbd2:	701a      	strb	r2, [r3, #0]
 801dbd4:	1cfb      	adds	r3, r7, #3
 801dbd6:	1c0a      	adds	r2, r1, #0
 801dbd8:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 801dbda:	1dfb      	adds	r3, r7, #7
 801dbdc:	781b      	ldrb	r3, [r3, #0]
 801dbde:	2b07      	cmp	r3, #7
 801dbe0:	d852      	bhi.n	801dc88 <gpio_configure_ext+0xd4>
 801dbe2:	009a      	lsls	r2, r3, #2
 801dbe4:	4bd0      	ldr	r3, [pc, #832]	; (801df28 <gpio_configure_ext+0x374>)
 801dbe6:	18d3      	adds	r3, r2, r3
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 801dbec:	4bcf      	ldr	r3, [pc, #828]	; (801df2c <gpio_configure_ext+0x378>)
 801dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbf0:	4bce      	ldr	r3, [pc, #824]	; (801df2c <gpio_configure_ext+0x378>)
 801dbf2:	2101      	movs	r1, #1
 801dbf4:	430a      	orrs	r2, r1
 801dbf6:	62da      	str	r2, [r3, #44]	; 0x2c
 801dbf8:	4bcc      	ldr	r3, [pc, #816]	; (801df2c <gpio_configure_ext+0x378>)
 801dbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbfc:	2201      	movs	r2, #1
 801dbfe:	4013      	ands	r3, r2
 801dc00:	61fb      	str	r3, [r7, #28]
 801dc02:	69fb      	ldr	r3, [r7, #28]
		  break;
 801dc04:	e040      	b.n	801dc88 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 801dc06:	4bc9      	ldr	r3, [pc, #804]	; (801df2c <gpio_configure_ext+0x378>)
 801dc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc0a:	4bc8      	ldr	r3, [pc, #800]	; (801df2c <gpio_configure_ext+0x378>)
 801dc0c:	2102      	movs	r1, #2
 801dc0e:	430a      	orrs	r2, r1
 801dc10:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc12:	4bc6      	ldr	r3, [pc, #792]	; (801df2c <gpio_configure_ext+0x378>)
 801dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc16:	2202      	movs	r2, #2
 801dc18:	4013      	ands	r3, r2
 801dc1a:	61bb      	str	r3, [r7, #24]
 801dc1c:	69bb      	ldr	r3, [r7, #24]
		  break;
 801dc1e:	e033      	b.n	801dc88 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 801dc20:	4bc2      	ldr	r3, [pc, #776]	; (801df2c <gpio_configure_ext+0x378>)
 801dc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc24:	4bc1      	ldr	r3, [pc, #772]	; (801df2c <gpio_configure_ext+0x378>)
 801dc26:	2104      	movs	r1, #4
 801dc28:	430a      	orrs	r2, r1
 801dc2a:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc2c:	4bbf      	ldr	r3, [pc, #764]	; (801df2c <gpio_configure_ext+0x378>)
 801dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc30:	2204      	movs	r2, #4
 801dc32:	4013      	ands	r3, r2
 801dc34:	617b      	str	r3, [r7, #20]
 801dc36:	697b      	ldr	r3, [r7, #20]
		  break;
 801dc38:	e026      	b.n	801dc88 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 801dc3a:	4bbc      	ldr	r3, [pc, #752]	; (801df2c <gpio_configure_ext+0x378>)
 801dc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc3e:	4bbb      	ldr	r3, [pc, #748]	; (801df2c <gpio_configure_ext+0x378>)
 801dc40:	2108      	movs	r1, #8
 801dc42:	430a      	orrs	r2, r1
 801dc44:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc46:	4bb9      	ldr	r3, [pc, #740]	; (801df2c <gpio_configure_ext+0x378>)
 801dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc4a:	2208      	movs	r2, #8
 801dc4c:	4013      	ands	r3, r2
 801dc4e:	613b      	str	r3, [r7, #16]
 801dc50:	693b      	ldr	r3, [r7, #16]
		  break;
 801dc52:	e019      	b.n	801dc88 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 801dc54:	4bb5      	ldr	r3, [pc, #724]	; (801df2c <gpio_configure_ext+0x378>)
 801dc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc58:	4bb4      	ldr	r3, [pc, #720]	; (801df2c <gpio_configure_ext+0x378>)
 801dc5a:	2110      	movs	r1, #16
 801dc5c:	430a      	orrs	r2, r1
 801dc5e:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc60:	4bb2      	ldr	r3, [pc, #712]	; (801df2c <gpio_configure_ext+0x378>)
 801dc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc64:	2210      	movs	r2, #16
 801dc66:	4013      	ands	r3, r2
 801dc68:	60fb      	str	r3, [r7, #12]
 801dc6a:	68fb      	ldr	r3, [r7, #12]
		  break;
 801dc6c:	e00c      	b.n	801dc88 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 801dc6e:	4baf      	ldr	r3, [pc, #700]	; (801df2c <gpio_configure_ext+0x378>)
 801dc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc72:	4bae      	ldr	r3, [pc, #696]	; (801df2c <gpio_configure_ext+0x378>)
 801dc74:	2180      	movs	r1, #128	; 0x80
 801dc76:	430a      	orrs	r2, r1
 801dc78:	62da      	str	r2, [r3, #44]	; 0x2c
 801dc7a:	4bac      	ldr	r3, [pc, #688]	; (801df2c <gpio_configure_ext+0x378>)
 801dc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc7e:	2280      	movs	r2, #128	; 0x80
 801dc80:	4013      	ands	r3, r2
 801dc82:	60bb      	str	r3, [r7, #8]
 801dc84:	68bb      	ldr	r3, [r7, #8]
		  break;
 801dc86:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 801dc88:	1d3b      	adds	r3, r7, #4
 801dc8a:	881a      	ldrh	r2, [r3, #0]
 801dc8c:	2320      	movs	r3, #32
 801dc8e:	18fb      	adds	r3, r7, r3
 801dc90:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 801dc92:	1cfb      	adds	r3, r7, #3
 801dc94:	781b      	ldrb	r3, [r3, #0]
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d002      	beq.n	801dca0 <gpio_configure_ext+0xec>
 801dc9a:	2b01      	cmp	r3, #1
 801dc9c:	d005      	beq.n	801dcaa <gpio_configure_ext+0xf6>
 801dc9e:	e009      	b.n	801dcb4 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dca0:	2320      	movs	r3, #32
 801dca2:	18fb      	adds	r3, r7, r3
 801dca4:	2200      	movs	r2, #0
 801dca6:	60da      	str	r2, [r3, #12]
		break;
 801dca8:	e004      	b.n	801dcb4 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dcaa:	2320      	movs	r3, #32
 801dcac:	18fb      	adds	r3, r7, r3
 801dcae:	2203      	movs	r2, #3
 801dcb0:	60da      	str	r2, [r3, #12]
		break;
 801dcb2:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 801dcb4:	1dbb      	adds	r3, r7, #6
 801dcb6:	781b      	ldrb	r3, [r3, #0]
 801dcb8:	2b13      	cmp	r3, #19
 801dcba:	d900      	bls.n	801dcbe <gpio_configure_ext+0x10a>
 801dcbc:	e0a4      	b.n	801de08 <gpio_configure_ext+0x254>
 801dcbe:	009a      	lsls	r2, r3, #2
 801dcc0:	4b9b      	ldr	r3, [pc, #620]	; (801df30 <gpio_configure_ext+0x37c>)
 801dcc2:	18d3      	adds	r3, r2, r3
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dcc8:	2120      	movs	r1, #32
 801dcca:	187b      	adds	r3, r7, r1
 801dccc:	2201      	movs	r2, #1
 801dcce:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dcd0:	187b      	adds	r3, r7, r1
 801dcd2:	2200      	movs	r2, #0
 801dcd4:	609a      	str	r2, [r3, #8]
		break;
 801dcd6:	e097      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dcd8:	2120      	movs	r1, #32
 801dcda:	187b      	adds	r3, r7, r1
 801dcdc:	2201      	movs	r2, #1
 801dcde:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dce0:	187b      	adds	r3, r7, r1
 801dce2:	2201      	movs	r2, #1
 801dce4:	609a      	str	r2, [r3, #8]
		break;
 801dce6:	e08f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dce8:	2120      	movs	r1, #32
 801dcea:	187b      	adds	r3, r7, r1
 801dcec:	2201      	movs	r2, #1
 801dcee:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dcf0:	187b      	adds	r3, r7, r1
 801dcf2:	2202      	movs	r2, #2
 801dcf4:	609a      	str	r2, [r3, #8]
		break;
 801dcf6:	e087      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 801dcf8:	2120      	movs	r1, #32
 801dcfa:	187b      	adds	r3, r7, r1
 801dcfc:	2211      	movs	r2, #17
 801dcfe:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd00:	187b      	adds	r3, r7, r1
 801dd02:	2200      	movs	r2, #0
 801dd04:	609a      	str	r2, [r3, #8]
		break;
 801dd06:	e07f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dd08:	2120      	movs	r1, #32
 801dd0a:	187b      	adds	r3, r7, r1
 801dd0c:	2200      	movs	r2, #0
 801dd0e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd10:	187b      	adds	r3, r7, r1
 801dd12:	2200      	movs	r2, #0
 801dd14:	609a      	str	r2, [r3, #8]
		break;
 801dd16:	e077      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dd18:	2120      	movs	r1, #32
 801dd1a:	187b      	adds	r3, r7, r1
 801dd1c:	2200      	movs	r2, #0
 801dd1e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd20:	187b      	adds	r3, r7, r1
 801dd22:	2201      	movs	r2, #1
 801dd24:	609a      	str	r2, [r3, #8]
		break;
 801dd26:	e06f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801dd28:	2120      	movs	r1, #32
 801dd2a:	187b      	adds	r3, r7, r1
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dd30:	187b      	adds	r3, r7, r1
 801dd32:	2202      	movs	r2, #2
 801dd34:	609a      	str	r2, [r3, #8]
		break;
 801dd36:	e067      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801dd38:	2120      	movs	r1, #32
 801dd3a:	187b      	adds	r3, r7, r1
 801dd3c:	4a7d      	ldr	r2, [pc, #500]	; (801df34 <gpio_configure_ext+0x380>)
 801dd3e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd40:	187b      	adds	r3, r7, r1
 801dd42:	2200      	movs	r2, #0
 801dd44:	609a      	str	r2, [r3, #8]
		break;
 801dd46:	e05f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801dd48:	2120      	movs	r1, #32
 801dd4a:	187b      	adds	r3, r7, r1
 801dd4c:	4a79      	ldr	r2, [pc, #484]	; (801df34 <gpio_configure_ext+0x380>)
 801dd4e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dd50:	187b      	adds	r3, r7, r1
 801dd52:	2202      	movs	r2, #2
 801dd54:	609a      	str	r2, [r3, #8]
		break;
 801dd56:	e057      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801dd58:	2120      	movs	r1, #32
 801dd5a:	187b      	adds	r3, r7, r1
 801dd5c:	4a75      	ldr	r2, [pc, #468]	; (801df34 <gpio_configure_ext+0x380>)
 801dd5e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd60:	187b      	adds	r3, r7, r1
 801dd62:	2201      	movs	r2, #1
 801dd64:	609a      	str	r2, [r3, #8]
		break;
 801dd66:	e04f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dd68:	2120      	movs	r1, #32
 801dd6a:	187b      	adds	r3, r7, r1
 801dd6c:	4a72      	ldr	r2, [pc, #456]	; (801df38 <gpio_configure_ext+0x384>)
 801dd6e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd70:	187b      	adds	r3, r7, r1
 801dd72:	2200      	movs	r2, #0
 801dd74:	609a      	str	r2, [r3, #8]
		break;
 801dd76:	e047      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dd78:	2120      	movs	r1, #32
 801dd7a:	187b      	adds	r3, r7, r1
 801dd7c:	4a6e      	ldr	r2, [pc, #440]	; (801df38 <gpio_configure_ext+0x384>)
 801dd7e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd80:	187b      	adds	r3, r7, r1
 801dd82:	2201      	movs	r2, #1
 801dd84:	609a      	str	r2, [r3, #8]
		break;
 801dd86:	e03f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dd88:	2120      	movs	r1, #32
 801dd8a:	187b      	adds	r3, r7, r1
 801dd8c:	4a6a      	ldr	r2, [pc, #424]	; (801df38 <gpio_configure_ext+0x384>)
 801dd8e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801dd90:	187b      	adds	r3, r7, r1
 801dd92:	2202      	movs	r2, #2
 801dd94:	609a      	str	r2, [r3, #8]
		break;
 801dd96:	e037      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801dd98:	2120      	movs	r1, #32
 801dd9a:	187b      	adds	r3, r7, r1
 801dd9c:	4a67      	ldr	r2, [pc, #412]	; (801df3c <gpio_configure_ext+0x388>)
 801dd9e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dda0:	187b      	adds	r3, r7, r1
 801dda2:	2200      	movs	r2, #0
 801dda4:	609a      	str	r2, [r3, #8]
		break;
 801dda6:	e02f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801dda8:	2120      	movs	r1, #32
 801ddaa:	187b      	adds	r3, r7, r1
 801ddac:	2203      	movs	r2, #3
 801ddae:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ddb0:	187b      	adds	r3, r7, r1
 801ddb2:	2200      	movs	r2, #0
 801ddb4:	609a      	str	r2, [r3, #8]
		break;
 801ddb6:	e027      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801ddb8:	2120      	movs	r1, #32
 801ddba:	187b      	adds	r3, r7, r1
 801ddbc:	2203      	movs	r2, #3
 801ddbe:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ddc0:	187b      	adds	r3, r7, r1
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	609a      	str	r2, [r3, #8]
		break;
 801ddc6:	e01f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ddc8:	2120      	movs	r1, #32
 801ddca:	187b      	adds	r3, r7, r1
 801ddcc:	2202      	movs	r2, #2
 801ddce:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ddd0:	187b      	adds	r3, r7, r1
 801ddd2:	2200      	movs	r2, #0
 801ddd4:	609a      	str	r2, [r3, #8]
	    break;
 801ddd6:	e017      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ddd8:	2120      	movs	r1, #32
 801ddda:	187b      	adds	r3, r7, r1
 801dddc:	2202      	movs	r2, #2
 801ddde:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dde0:	187b      	adds	r3, r7, r1
 801dde2:	2201      	movs	r2, #1
 801dde4:	609a      	str	r2, [r3, #8]
	    break;
 801dde6:	e00f      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dde8:	2120      	movs	r1, #32
 801ddea:	187b      	adds	r3, r7, r1
 801ddec:	2202      	movs	r2, #2
 801ddee:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801ddf0:	187b      	adds	r3, r7, r1
 801ddf2:	2202      	movs	r2, #2
 801ddf4:	609a      	str	r2, [r3, #8]
	    break;
 801ddf6:	e007      	b.n	801de08 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801ddf8:	2120      	movs	r1, #32
 801ddfa:	187b      	adds	r3, r7, r1
 801ddfc:	2212      	movs	r2, #18
 801ddfe:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801de00:	187b      	adds	r3, r7, r1
 801de02:	2200      	movs	r2, #0
 801de04:	609a      	str	r2, [r3, #8]
	    break;
 801de06:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 801de08:	2300      	movs	r3, #0
 801de0a:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 801de0c:	1dbb      	adds	r3, r7, #6
 801de0e:	781b      	ldrb	r3, [r3, #0]
 801de10:	3b10      	subs	r3, #16
 801de12:	2b03      	cmp	r3, #3
 801de14:	d900      	bls.n	801de18 <gpio_configure_ext+0x264>
 801de16:	e0a1      	b.n	801df5c <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 801de18:	2348      	movs	r3, #72	; 0x48
 801de1a:	18fb      	adds	r3, r7, r3
 801de1c:	781b      	ldrb	r3, [r3, #0]
 801de1e:	2b06      	cmp	r3, #6
 801de20:	d900      	bls.n	801de24 <gpio_configure_ext+0x270>
 801de22:	e092      	b.n	801df4a <gpio_configure_ext+0x396>
 801de24:	009a      	lsls	r2, r3, #2
 801de26:	4b46      	ldr	r3, [pc, #280]	; (801df40 <gpio_configure_ext+0x38c>)
 801de28:	18d3      	adds	r3, r2, r3
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801de2e:	1dfb      	adds	r3, r7, #7
 801de30:	781b      	ldrb	r3, [r3, #0]
 801de32:	2b00      	cmp	r3, #0
 801de34:	d10a      	bne.n	801de4c <gpio_configure_ext+0x298>
 801de36:	1d3b      	adds	r3, r7, #4
 801de38:	881a      	ldrh	r2, [r3, #0]
 801de3a:	2380      	movs	r3, #128	; 0x80
 801de3c:	021b      	lsls	r3, r3, #8
 801de3e:	429a      	cmp	r2, r3
 801de40:	d104      	bne.n	801de4c <gpio_configure_ext+0x298>
 801de42:	2320      	movs	r3, #32
 801de44:	18fb      	adds	r3, r7, r3
 801de46:	2202      	movs	r2, #2
 801de48:	611a      	str	r2, [r3, #16]
 801de4a:	e01c      	b.n	801de86 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801de4c:	1dfb      	adds	r3, r7, #7
 801de4e:	781b      	ldrb	r3, [r3, #0]
 801de50:	2b00      	cmp	r3, #0
 801de52:	d108      	bne.n	801de66 <gpio_configure_ext+0x2b2>
 801de54:	1d3b      	adds	r3, r7, #4
 801de56:	881b      	ldrh	r3, [r3, #0]
 801de58:	2b20      	cmp	r3, #32
 801de5a:	d104      	bne.n	801de66 <gpio_configure_ext+0x2b2>
 801de5c:	2320      	movs	r3, #32
 801de5e:	18fb      	adds	r3, r7, r3
 801de60:	2202      	movs	r2, #2
 801de62:	611a      	str	r2, [r3, #16]
 801de64:	e00f      	b.n	801de86 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801de66:	1dfb      	adds	r3, r7, #7
 801de68:	781b      	ldrb	r3, [r3, #0]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d108      	bne.n	801de80 <gpio_configure_ext+0x2cc>
 801de6e:	1d3b      	adds	r3, r7, #4
 801de70:	881b      	ldrh	r3, [r3, #0]
 801de72:	2b01      	cmp	r3, #1
 801de74:	d104      	bne.n	801de80 <gpio_configure_ext+0x2cc>
 801de76:	2320      	movs	r3, #32
 801de78:	18fb      	adds	r3, r7, r3
 801de7a:	2205      	movs	r2, #5
 801de7c:	611a      	str	r2, [r3, #16]
 801de7e:	e002      	b.n	801de86 <gpio_configure_ext+0x2d2>
			else err=1;
 801de80:	2301      	movs	r3, #1
 801de82:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 801de84:	e062      	b.n	801df4c <gpio_configure_ext+0x398>
 801de86:	e061      	b.n	801df4c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801de88:	1dfb      	adds	r3, r7, #7
 801de8a:	781b      	ldrb	r3, [r3, #0]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	d10a      	bne.n	801dea6 <gpio_configure_ext+0x2f2>
 801de90:	1d3b      	adds	r3, r7, #4
 801de92:	881a      	ldrh	r2, [r3, #0]
 801de94:	2380      	movs	r3, #128	; 0x80
 801de96:	021b      	lsls	r3, r3, #8
 801de98:	429a      	cmp	r2, r3
 801de9a:	d104      	bne.n	801dea6 <gpio_configure_ext+0x2f2>
 801de9c:	2320      	movs	r3, #32
 801de9e:	18fb      	adds	r3, r7, r3
 801dea0:	2205      	movs	r2, #5
 801dea2:	611a      	str	r2, [r3, #16]
 801dea4:	e01c      	b.n	801dee0 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801dea6:	1dfb      	adds	r3, r7, #7
 801dea8:	781b      	ldrb	r3, [r3, #0]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d108      	bne.n	801dec0 <gpio_configure_ext+0x30c>
 801deae:	1d3b      	adds	r3, r7, #4
 801deb0:	881b      	ldrh	r3, [r3, #0]
 801deb2:	2b20      	cmp	r3, #32
 801deb4:	d104      	bne.n	801dec0 <gpio_configure_ext+0x30c>
 801deb6:	2320      	movs	r3, #32
 801deb8:	18fb      	adds	r3, r7, r3
 801deba:	2205      	movs	r2, #5
 801debc:	611a      	str	r2, [r3, #16]
 801debe:	e00f      	b.n	801dee0 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801dec0:	1dfb      	adds	r3, r7, #7
 801dec2:	781b      	ldrb	r3, [r3, #0]
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d108      	bne.n	801deda <gpio_configure_ext+0x326>
 801dec8:	1d3b      	adds	r3, r7, #4
 801deca:	881b      	ldrh	r3, [r3, #0]
 801decc:	2b01      	cmp	r3, #1
 801dece:	d104      	bne.n	801deda <gpio_configure_ext+0x326>
 801ded0:	2320      	movs	r3, #32
 801ded2:	18fb      	adds	r3, r7, r3
 801ded4:	2202      	movs	r2, #2
 801ded6:	611a      	str	r2, [r3, #16]
 801ded8:	e002      	b.n	801dee0 <gpio_configure_ext+0x32c>
			else err=1;
 801deda:	2301      	movs	r3, #1
 801dedc:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 801dede:	e035      	b.n	801df4c <gpio_configure_ext+0x398>
 801dee0:	e034      	b.n	801df4c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801dee2:	1dfb      	adds	r3, r7, #7
 801dee4:	781b      	ldrb	r3, [r3, #0]
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d108      	bne.n	801defc <gpio_configure_ext+0x348>
 801deea:	1d3b      	adds	r3, r7, #4
 801deec:	881b      	ldrh	r3, [r3, #0]
 801deee:	2b20      	cmp	r3, #32
 801def0:	d104      	bne.n	801defc <gpio_configure_ext+0x348>
 801def2:	2320      	movs	r3, #32
 801def4:	18fb      	adds	r3, r7, r3
 801def6:	2200      	movs	r2, #0
 801def8:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801defa:	e027      	b.n	801df4c <gpio_configure_ext+0x398>
				else err=1;
 801defc:	2301      	movs	r3, #1
 801defe:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801df00:	e024      	b.n	801df4c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801df02:	1dfb      	adds	r3, r7, #7
 801df04:	781b      	ldrb	r3, [r3, #0]
 801df06:	2b01      	cmp	r3, #1
 801df08:	d108      	bne.n	801df1c <gpio_configure_ext+0x368>
 801df0a:	1d3b      	adds	r3, r7, #4
 801df0c:	881b      	ldrh	r3, [r3, #0]
 801df0e:	2b20      	cmp	r3, #32
 801df10:	d104      	bne.n	801df1c <gpio_configure_ext+0x368>
 801df12:	2320      	movs	r3, #32
 801df14:	18fb      	adds	r3, r7, r3
 801df16:	2200      	movs	r2, #0
 801df18:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801df1a:	e017      	b.n	801df4c <gpio_configure_ext+0x398>
				else err=1;
 801df1c:	2301      	movs	r3, #1
 801df1e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801df20:	e014      	b.n	801df4c <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801df22:	2301      	movs	r3, #1
 801df24:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801df26:	e011      	b.n	801df4c <gpio_configure_ext+0x398>
 801df28:	0802236c 	.word	0x0802236c
 801df2c:	40021000 	.word	0x40021000
 801df30:	0802238c 	.word	0x0802238c
 801df34:	10110000 	.word	0x10110000
 801df38:	10210000 	.word	0x10210000
 801df3c:	10310000 	.word	0x10310000
 801df40:	080223dc 	.word	0x080223dc
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801df44:	2301      	movs	r3, #1
 801df46:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801df48:	e000      	b.n	801df4c <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 801df4a:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 801df4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df4e:	2b00      	cmp	r3, #0
 801df50:	dd06      	ble.n	801df60 <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 801df52:	4b0c      	ldr	r3, [pc, #48]	; (801df84 <gpio_configure_ext+0x3d0>)
 801df54:	0018      	movs	r0, r3
 801df56:	f7fe f893 	bl	801c080 <log_error>
		}
		break;
 801df5a:	e001      	b.n	801df60 <gpio_configure_ext+0x3ac>
	default:
		break;
 801df5c:	46c0      	nop			; (mov r8, r8)
 801df5e:	e000      	b.n	801df62 <gpio_configure_ext+0x3ae>
		break;
 801df60:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 801df62:	1dfb      	adds	r3, r7, #7
 801df64:	781b      	ldrb	r3, [r3, #0]
 801df66:	0018      	movs	r0, r3
 801df68:	f7ff fd62 	bl	801da30 <getPortFromBankId>
 801df6c:	0002      	movs	r2, r0
 801df6e:	2320      	movs	r3, #32
 801df70:	18fb      	adds	r3, r7, r3
 801df72:	0019      	movs	r1, r3
 801df74:	0010      	movs	r0, r2
 801df76:	f7e6 fb4f 	bl	8004618 <HAL_GPIO_Init>

}
 801df7a:	46c0      	nop			; (mov r8, r8)
 801df7c:	46bd      	mov	sp, r7
 801df7e:	b00e      	add	sp, #56	; 0x38
 801df80:	bdb0      	pop	{r4, r5, r7, pc}
 801df82:	46c0      	nop			; (mov r8, r8)
 801df84:	080212ac 	.word	0x080212ac

0801df88 <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 801df88:	b580      	push	{r7, lr}
 801df8a:	b082      	sub	sp, #8
 801df8c:	af00      	add	r7, sp, #0
 801df8e:	0002      	movs	r2, r0
 801df90:	1dfb      	adds	r3, r7, #7
 801df92:	701a      	strb	r2, [r3, #0]
 801df94:	1d3b      	adds	r3, r7, #4
 801df96:	1c0a      	adds	r2, r1, #0
 801df98:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 801df9a:	1dfb      	adds	r3, r7, #7
 801df9c:	781b      	ldrb	r3, [r3, #0]
 801df9e:	0018      	movs	r0, r3
 801dfa0:	f7ff fd46 	bl	801da30 <getPortFromBankId>
 801dfa4:	1d3b      	adds	r3, r7, #4
 801dfa6:	881b      	ldrh	r3, [r3, #0]
 801dfa8:	2201      	movs	r2, #1
 801dfaa:	0019      	movs	r1, r3
 801dfac:	f7e6 fcb2 	bl	8004914 <HAL_GPIO_WritePin>
}
 801dfb0:	46c0      	nop			; (mov r8, r8)
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	b002      	add	sp, #8
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b082      	sub	sp, #8
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	0002      	movs	r2, r0
 801dfc0:	1dfb      	adds	r3, r7, #7
 801dfc2:	701a      	strb	r2, [r3, #0]
 801dfc4:	1d3b      	adds	r3, r7, #4
 801dfc6:	1c0a      	adds	r2, r1, #0
 801dfc8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 801dfca:	1dfb      	adds	r3, r7, #7
 801dfcc:	781b      	ldrb	r3, [r3, #0]
 801dfce:	0018      	movs	r0, r3
 801dfd0:	f7ff fd2e 	bl	801da30 <getPortFromBankId>
 801dfd4:	1d3b      	adds	r3, r7, #4
 801dfd6:	881b      	ldrh	r3, [r3, #0]
 801dfd8:	2200      	movs	r2, #0
 801dfda:	0019      	movs	r1, r3
 801dfdc:	f7e6 fc9a 	bl	8004914 <HAL_GPIO_WritePin>
}
 801dfe0:	46c0      	nop			; (mov r8, r8)
 801dfe2:	46bd      	mov	sp, r7
 801dfe4:	b002      	add	sp, #8
 801dfe6:	bd80      	pop	{r7, pc}

0801dfe8 <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 801dfe8:	b580      	push	{r7, lr}
 801dfea:	b082      	sub	sp, #8
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	0002      	movs	r2, r0
 801dff0:	1dfb      	adds	r3, r7, #7
 801dff2:	701a      	strb	r2, [r3, #0]
 801dff4:	1d3b      	adds	r3, r7, #4
 801dff6:	1c0a      	adds	r2, r1, #0
 801dff8:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 801dffa:	1d3b      	adds	r3, r7, #4
 801dffc:	881a      	ldrh	r2, [r3, #0]
 801dffe:	1dfb      	adds	r3, r7, #7
 801e000:	781b      	ldrb	r3, [r3, #0]
 801e002:	0011      	movs	r1, r2
 801e004:	0018      	movs	r0, r3
 801e006:	f7ff fd93 	bl	801db30 <getIrqFromBankPin>
 801e00a:	0003      	movs	r3, r0
 801e00c:	0018      	movs	r0, r3
 801e00e:	f7e6 fa8e 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 801e012:	46c0      	nop			; (mov r8, r8)
 801e014:	46bd      	mov	sp, r7
 801e016:	b002      	add	sp, #8
 801e018:	bd80      	pop	{r7, pc}

0801e01a <gpio_interruptDisableAll>:

void gpio_interruptDisable(uint8_t bank, uint16_t id) {
	HAL_NVIC_DisableIRQ(getIrqFromBankPin(bank,id));
}

void gpio_interruptDisableAll() {
 801e01a:	b580      	push	{r7, lr}
 801e01c:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 801e01e:	2005      	movs	r0, #5
 801e020:	f7e6 fa95 	bl	800454e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 801e024:	2007      	movs	r0, #7
 801e026:	f7e6 fa92 	bl	800454e <HAL_NVIC_DisableIRQ>
}
 801e02a:	46c0      	nop			; (mov r8, r8)
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}

0801e030 <gpio_interruptPriority>:

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 801e030:	b5b0      	push	{r4, r5, r7, lr}
 801e032:	b082      	sub	sp, #8
 801e034:	af00      	add	r7, sp, #0
 801e036:	0005      	movs	r5, r0
 801e038:	000c      	movs	r4, r1
 801e03a:	0010      	movs	r0, r2
 801e03c:	0019      	movs	r1, r3
 801e03e:	1dfb      	adds	r3, r7, #7
 801e040:	1c2a      	adds	r2, r5, #0
 801e042:	701a      	strb	r2, [r3, #0]
 801e044:	1d3b      	adds	r3, r7, #4
 801e046:	1c22      	adds	r2, r4, #0
 801e048:	801a      	strh	r2, [r3, #0]
 801e04a:	1dbb      	adds	r3, r7, #6
 801e04c:	1c02      	adds	r2, r0, #0
 801e04e:	701a      	strb	r2, [r3, #0]
 801e050:	1cfb      	adds	r3, r7, #3
 801e052:	1c0a      	adds	r2, r1, #0
 801e054:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 801e056:	1d3b      	adds	r3, r7, #4
 801e058:	881a      	ldrh	r2, [r3, #0]
 801e05a:	1dfb      	adds	r3, r7, #7
 801e05c:	781b      	ldrb	r3, [r3, #0]
 801e05e:	0011      	movs	r1, r2
 801e060:	0018      	movs	r0, r3
 801e062:	f7ff fd65 	bl	801db30 <getIrqFromBankPin>
 801e066:	0003      	movs	r3, r0
 801e068:	0018      	movs	r0, r3
 801e06a:	1dbb      	adds	r3, r7, #6
 801e06c:	7819      	ldrb	r1, [r3, #0]
 801e06e:	1cfb      	adds	r3, r7, #3
 801e070:	781b      	ldrb	r3, [r3, #0]
 801e072:	001a      	movs	r2, r3
 801e074:	f7e6 fa46 	bl	8004504 <HAL_NVIC_SetPriority>
}
 801e078:	46c0      	nop			; (mov r8, r8)
 801e07a:	46bd      	mov	sp, r7
 801e07c:	b002      	add	sp, #8
 801e07e:	bdb0      	pop	{r4, r5, r7, pc}

0801e080 <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 801e080:	b580      	push	{r7, lr}
 801e082:	b082      	sub	sp, #8
 801e084:	af00      	add	r7, sp, #0
 801e086:	0002      	movs	r2, r0
 801e088:	1dfb      	adds	r3, r7, #7
 801e08a:	701a      	strb	r2, [r3, #0]
 801e08c:	1d3b      	adds	r3, r7, #4
 801e08e:	1c0a      	adds	r2, r1, #0
 801e090:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 801e092:	4b04      	ldr	r3, [pc, #16]	; (801e0a4 <gpio_interruptClear+0x24>)
 801e094:	1d3a      	adds	r2, r7, #4
 801e096:	8812      	ldrh	r2, [r2, #0]
 801e098:	615a      	str	r2, [r3, #20]
}
 801e09a:	46c0      	nop			; (mov r8, r8)
 801e09c:	46bd      	mov	sp, r7
 801e09e:	b002      	add	sp, #8
 801e0a0:	bd80      	pop	{r7, pc}
 801e0a2:	46c0      	nop			; (mov r8, r8)
 801e0a4:	40010400 	.word	0x40010400

0801e0a8 <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 801e0a8:	b580      	push	{r7, lr}
 801e0aa:	b086      	sub	sp, #24
 801e0ac:	af00      	add	r7, sp, #0
 801e0ae:	0002      	movs	r2, r0
 801e0b0:	1dbb      	adds	r3, r7, #6
 801e0b2:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 801e0b4:	4b1b      	ldr	r3, [pc, #108]	; (801e124 <HAL_GPIO_EXTI_Callback+0x7c>)
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d00c      	beq.n	801e0d6 <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 801e0bc:	4b19      	ldr	r3, [pc, #100]	; (801e124 <HAL_GPIO_EXTI_Callback+0x7c>)
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 801e0c4:	693b      	ldr	r3, [r7, #16]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d005      	beq.n	801e0d6 <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 801e0ca:	1dbb      	adds	r3, r7, #6
 801e0cc:	881a      	ldrh	r2, [r3, #0]
 801e0ce:	693b      	ldr	r3, [r7, #16]
 801e0d0:	0010      	movs	r0, r2
 801e0d2:	4798      	blx	r3
			return;
 801e0d4:	e023      	b.n	801e11e <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801e0d6:	4b14      	ldr	r3, [pc, #80]	; (801e128 <HAL_GPIO_EXTI_Callback+0x80>)
 801e0d8:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801e0da:	e019      	b.n	801e110 <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 801e0dc:	697b      	ldr	r3, [r7, #20]
 801e0de:	681b      	ldr	r3, [r3, #0]
 801e0e0:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d010      	beq.n	801e10a <HAL_GPIO_EXTI_Callback+0x62>
 801e0e8:	697b      	ldr	r3, [r7, #20]
 801e0ea:	889b      	ldrh	r3, [r3, #4]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d007      	beq.n	801e100 <HAL_GPIO_EXTI_Callback+0x58>
 801e0f0:	697b      	ldr	r3, [r7, #20]
 801e0f2:	889b      	ldrh	r3, [r3, #4]
 801e0f4:	1dba      	adds	r2, r7, #6
 801e0f6:	8812      	ldrh	r2, [r2, #0]
 801e0f8:	4013      	ands	r3, r2
 801e0fa:	b29b      	uxth	r3, r3
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d004      	beq.n	801e10a <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 801e100:	1dbb      	adds	r3, r7, #6
 801e102:	881a      	ldrh	r2, [r3, #0]
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	0010      	movs	r0, r2
 801e108:	4798      	blx	r3
		}
		c = c->next;
 801e10a:	697b      	ldr	r3, [r7, #20]
 801e10c:	689b      	ldr	r3, [r3, #8]
 801e10e:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801e110:	697b      	ldr	r3, [r7, #20]
 801e112:	2b00      	cmp	r3, #0
 801e114:	d1e2      	bne.n	801e0dc <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801e116:	4b05      	ldr	r3, [pc, #20]	; (801e12c <HAL_GPIO_EXTI_Callback+0x84>)
 801e118:	1dba      	adds	r2, r7, #6
 801e11a:	8812      	ldrh	r2, [r2, #0]
 801e11c:	615a      	str	r2, [r3, #20]
	#endif
}
 801e11e:	46bd      	mov	sp, r7
 801e120:	b006      	add	sp, #24
 801e122:	bd80      	pop	{r7, pc}
 801e124:	200012c4 	.word	0x200012c4
 801e128:	200012b8 	.word	0x200012b8
 801e12c:	40010400 	.word	0x40010400

0801e130 <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 801e130:	b580      	push	{r7, lr}
 801e132:	b084      	sub	sp, #16
 801e134:	af00      	add	r7, sp, #0
 801e136:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801e138:	4b0f      	ldr	r3, [pc, #60]	; (801e178 <gpio_registerIrqAction+0x48>)
 801e13a:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801e13c:	e002      	b.n	801e144 <gpio_registerIrqAction+0x14>
	  c = c->next;
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	689b      	ldr	r3, [r3, #8]
 801e142:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	689b      	ldr	r3, [r3, #8]
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d005      	beq.n	801e158 <gpio_registerIrqAction+0x28>
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	681a      	ldr	r2, [r3, #0]
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	429a      	cmp	r2, r3
 801e156:	d1f2      	bne.n	801e13e <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	681a      	ldr	r2, [r3, #0]
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	429a      	cmp	r2, r3
 801e162:	d005      	beq.n	801e170 <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	687a      	ldr	r2, [r7, #4]
 801e168:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	2200      	movs	r2, #0
 801e16e:	609a      	str	r2, [r3, #8]
	}
}
 801e170:	46c0      	nop			; (mov r8, r8)
 801e172:	46bd      	mov	sp, r7
 801e174:	b004      	add	sp, #16
 801e176:	bd80      	pop	{r7, pc}
 801e178:	200012b8 	.word	0x200012b8

0801e17c <NVIC_SystemReset>:
{
 801e17c:	b580      	push	{r7, lr}
 801e17e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801e180:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801e184:	4b03      	ldr	r3, [pc, #12]	; (801e194 <NVIC_SystemReset+0x18>)
 801e186:	4a04      	ldr	r2, [pc, #16]	; (801e198 <NVIC_SystemReset+0x1c>)
 801e188:	60da      	str	r2, [r3, #12]
 801e18a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801e18e:	46c0      	nop			; (mov r8, r8)
    __NOP();
 801e190:	e7fd      	b.n	801e18e <NVIC_SystemReset+0x12>
 801e192:	46c0      	nop			; (mov r8, r8)
 801e194:	e000ed00 	.word	0xe000ed00
 801e198:	05fa0004 	.word	0x05fa0004

0801e19c <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 801e19c:	b580      	push	{r7, lr}
 801e19e:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 801e1a0:	f7ff ffec 	bl	801e17c <NVIC_SystemReset>
 801e1a4:	e7fc      	b.n	801e1a0 <itsdk_reset+0x4>
	...

0801e1a8 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 801e1ac:	4b1c      	ldr	r3, [pc, #112]	; (801e220 <itsdk_getResetCause+0x78>)
 801e1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	da01      	bge.n	801e1b8 <itsdk_getResetCause+0x10>
 801e1b4:	2306      	movs	r3, #6
 801e1b6:	e030      	b.n	801e21a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 801e1b8:	4b19      	ldr	r3, [pc, #100]	; (801e220 <itsdk_getResetCause+0x78>)
 801e1ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1bc:	2380      	movs	r3, #128	; 0x80
 801e1be:	05db      	lsls	r3, r3, #23
 801e1c0:	4013      	ands	r3, r2
 801e1c2:	d001      	beq.n	801e1c8 <itsdk_getResetCause+0x20>
 801e1c4:	2305      	movs	r3, #5
 801e1c6:	e028      	b.n	801e21a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 801e1c8:	4b15      	ldr	r3, [pc, #84]	; (801e220 <itsdk_getResetCause+0x78>)
 801e1ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1cc:	2380      	movs	r3, #128	; 0x80
 801e1ce:	059b      	lsls	r3, r3, #22
 801e1d0:	4013      	ands	r3, r2
 801e1d2:	d001      	beq.n	801e1d8 <itsdk_getResetCause+0x30>
 801e1d4:	2304      	movs	r3, #4
 801e1d6:	e020      	b.n	801e21a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 801e1d8:	4b11      	ldr	r3, [pc, #68]	; (801e220 <itsdk_getResetCause+0x78>)
 801e1da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1dc:	2380      	movs	r3, #128	; 0x80
 801e1de:	055b      	lsls	r3, r3, #21
 801e1e0:	4013      	ands	r3, r2
 801e1e2:	d001      	beq.n	801e1e8 <itsdk_getResetCause+0x40>
 801e1e4:	2303      	movs	r3, #3
 801e1e6:	e018      	b.n	801e21a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 801e1e8:	4b0d      	ldr	r3, [pc, #52]	; (801e220 <itsdk_getResetCause+0x78>)
 801e1ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1ec:	2380      	movs	r3, #128	; 0x80
 801e1ee:	051b      	lsls	r3, r3, #20
 801e1f0:	4013      	ands	r3, r2
 801e1f2:	d001      	beq.n	801e1f8 <itsdk_getResetCause+0x50>
 801e1f4:	2302      	movs	r3, #2
 801e1f6:	e010      	b.n	801e21a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 801e1f8:	4b09      	ldr	r3, [pc, #36]	; (801e220 <itsdk_getResetCause+0x78>)
 801e1fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1fc:	2380      	movs	r3, #128	; 0x80
 801e1fe:	04db      	lsls	r3, r3, #19
 801e200:	4013      	ands	r3, r2
 801e202:	d001      	beq.n	801e208 <itsdk_getResetCause+0x60>
 801e204:	2301      	movs	r3, #1
 801e206:	e008      	b.n	801e21a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 801e208:	4b05      	ldr	r3, [pc, #20]	; (801e220 <itsdk_getResetCause+0x78>)
 801e20a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e20c:	2380      	movs	r3, #128	; 0x80
 801e20e:	049b      	lsls	r3, r3, #18
 801e210:	4013      	ands	r3, r2
 801e212:	d001      	beq.n	801e218 <itsdk_getResetCause+0x70>
 801e214:	2306      	movs	r3, #6
 801e216:	e000      	b.n	801e21a <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 801e218:	2307      	movs	r3, #7
}
 801e21a:	0018      	movs	r0, r3
 801e21c:	46bd      	mov	sp, r7
 801e21e:	bd80      	pop	{r7, pc}
 801e220:	40021000 	.word	0x40021000

0801e224 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 801e224:	b580      	push	{r7, lr}
 801e226:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 801e228:	4b04      	ldr	r3, [pc, #16]	; (801e23c <itsdk_cleanResetCause+0x18>)
 801e22a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e22c:	4b03      	ldr	r3, [pc, #12]	; (801e23c <itsdk_cleanResetCause+0x18>)
 801e22e:	2180      	movs	r1, #128	; 0x80
 801e230:	0409      	lsls	r1, r1, #16
 801e232:	430a      	orrs	r2, r1
 801e234:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e236:	46c0      	nop			; (mov r8, r8)
 801e238:	46bd      	mov	sp, r7
 801e23a:	bd80      	pop	{r7, pc}
 801e23c:	40021000 	.word	0x40021000

0801e240 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 801e240:	b580      	push	{r7, lr}
 801e242:	b082      	sub	sp, #8
 801e244:	af00      	add	r7, sp, #0
 801e246:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	0018      	movs	r0, r3
 801e24c:	f7e5 fe0e 	bl	8003e6c <HAL_Delay>
}
 801e250:	46c0      	nop			; (mov r8, r8)
 801e252:	46bd      	mov	sp, r7
 801e254:	b002      	add	sp, #8
 801e256:	bd80      	pop	{r7, pc}

0801e258 <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 801e258:	b580      	push	{r7, lr}
 801e25a:	b082      	sub	sp, #8
 801e25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801e25e:	f3ef 8310 	mrs	r3, PRIMASK
 801e262:	607b      	str	r3, [r7, #4]
  return(result);
 801e264:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 801e266:	46c0      	nop			; (mov r8, r8)
}
 801e268:	0018      	movs	r0, r3
 801e26a:	46bd      	mov	sp, r7
 801e26c:	b002      	add	sp, #8
 801e26e:	bd80      	pop	{r7, pc}

0801e270 <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 801e270:	b580      	push	{r7, lr}
 801e272:	b084      	sub	sp, #16
 801e274:	af00      	add	r7, sp, #0
 801e276:	6078      	str	r0, [r7, #4]
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 801e282:	46c0      	nop			; (mov r8, r8)
 801e284:	46bd      	mov	sp, r7
 801e286:	b004      	add	sp, #16
 801e288:	bd80      	pop	{r7, pc}
	...

0801e28c <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 801e28c:	b580      	push	{r7, lr}
 801e28e:	b082      	sub	sp, #8
 801e290:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 801e292:	f7ff ffe1 	bl	801e258 <itsdk_getIrqMask>
 801e296:	0002      	movs	r2, r0
 801e298:	4b05      	ldr	r3, [pc, #20]	; (801e2b0 <itsdk_enterCriticalSection+0x24>)
 801e29a:	601a      	str	r2, [r3, #0]
 801e29c:	2301      	movs	r3, #1
 801e29e:	607b      	str	r3, [r7, #4]
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 801e2a6:	46c0      	nop			; (mov r8, r8)
 801e2a8:	46bd      	mov	sp, r7
 801e2aa:	b002      	add	sp, #8
 801e2ac:	bd80      	pop	{r7, pc}
 801e2ae:	46c0      	nop			; (mov r8, r8)
 801e2b0:	200012c8 	.word	0x200012c8

0801e2b4 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 801e2b4:	b580      	push	{r7, lr}
 801e2b6:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 801e2b8:	4b03      	ldr	r3, [pc, #12]	; (801e2c8 <itsdk_leaveCriticalSection+0x14>)
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	0018      	movs	r0, r3
 801e2be:	f7ff ffd7 	bl	801e270 <itsdk_setIrqMask>
}
 801e2c2:	46c0      	nop			; (mov r8, r8)
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	bd80      	pop	{r7, pc}
 801e2c8:	200012c8 	.word	0x200012c8

0801e2cc <itsdk_getRandomSeed>:
	#define  STM32_ID2    ( 0x1FF80054 )
	#define  STM32_ID3    ( 0x1FF80064 )
#else
    #error "You need to define the MCU ID for this platform"
#endif
uint32_t itsdk_getRandomSeed() {
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	af00      	add	r7, sp, #0
	return ( ( *( uint32_t* )STM32_ID1 ) ^ ( *( uint32_t* )STM32_ID2 ) ^ ( *( uint32_t* )STM32_ID3 ) );
 801e2d0:	4b05      	ldr	r3, [pc, #20]	; (801e2e8 <itsdk_getRandomSeed+0x1c>)
 801e2d2:	681a      	ldr	r2, [r3, #0]
 801e2d4:	4b05      	ldr	r3, [pc, #20]	; (801e2ec <itsdk_getRandomSeed+0x20>)
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	405a      	eors	r2, r3
 801e2da:	4b05      	ldr	r3, [pc, #20]	; (801e2f0 <itsdk_getRandomSeed+0x24>)
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	4053      	eors	r3, r2
}
 801e2e0:	0018      	movs	r0, r3
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	bd80      	pop	{r7, pc}
 801e2e6:	46c0      	nop			; (mov r8, r8)
 801e2e8:	1ff80050 	.word	0x1ff80050
 801e2ec:	1ff80054 	.word	0x1ff80054
 801e2f0:	1ff80064 	.word	0x1ff80064

0801e2f4 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 801e2f4:	b580      	push	{r7, lr}
 801e2f6:	b086      	sub	sp, #24
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	6078      	str	r0, [r7, #4]
 801e2fc:	000a      	movs	r2, r1
 801e2fe:	1cfb      	adds	r3, r7, #3
 801e300:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 801e302:	4b2c      	ldr	r3, [pc, #176]	; (801e3b4 <itsdk_getUniqId+0xc0>)
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	041a      	lsls	r2, r3, #16
 801e308:	4b2b      	ldr	r3, [pc, #172]	; (801e3b8 <itsdk_getUniqId+0xc4>)
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	021b      	lsls	r3, r3, #8
 801e30e:	18d2      	adds	r2, r2, r3
 801e310:	4b2a      	ldr	r3, [pc, #168]	; (801e3bc <itsdk_getUniqId+0xc8>)
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	18d3      	adds	r3, r2, r3
 801e316:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 801e318:	2317      	movs	r3, #23
 801e31a:	18fb      	adds	r3, r7, r3
 801e31c:	2200      	movs	r2, #0
 801e31e:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 801e324:	e03a      	b.n	801e39c <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 801e326:	2317      	movs	r3, #23
 801e328:	18fb      	adds	r3, r7, r3
 801e32a:	781b      	ldrb	r3, [r3, #0]
 801e32c:	2203      	movs	r2, #3
 801e32e:	4013      	ands	r3, r2
 801e330:	d11f      	bne.n	801e372 <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 801e332:	2317      	movs	r3, #23
 801e334:	18fb      	adds	r3, r7, r3
 801e336:	781b      	ldrb	r3, [r3, #0]
 801e338:	089b      	lsrs	r3, r3, #2
 801e33a:	b2db      	uxtb	r3, r3
 801e33c:	001a      	movs	r2, r3
 801e33e:	2303      	movs	r3, #3
 801e340:	4013      	ands	r3, r2
 801e342:	2b01      	cmp	r3, #1
 801e344:	d008      	beq.n	801e358 <itsdk_getUniqId+0x64>
 801e346:	2b02      	cmp	r3, #2
 801e348:	d00b      	beq.n	801e362 <itsdk_getUniqId+0x6e>
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d10e      	bne.n	801e36c <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 801e34e:	68fb      	ldr	r3, [r7, #12]
 801e350:	4a18      	ldr	r2, [pc, #96]	; (801e3b4 <itsdk_getUniqId+0xc0>)
 801e352:	4053      	eors	r3, r2
 801e354:	613b      	str	r3, [r7, #16]
 801e356:	e00d      	b.n	801e374 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	4a17      	ldr	r2, [pc, #92]	; (801e3b8 <itsdk_getUniqId+0xc4>)
 801e35c:	4053      	eors	r3, r2
 801e35e:	613b      	str	r3, [r7, #16]
 801e360:	e008      	b.n	801e374 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	4a15      	ldr	r2, [pc, #84]	; (801e3bc <itsdk_getUniqId+0xc8>)
 801e366:	4053      	eors	r3, r2
 801e368:	613b      	str	r3, [r7, #16]
 801e36a:	e003      	b.n	801e374 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	613b      	str	r3, [r7, #16]
 801e370:	e000      	b.n	801e374 <itsdk_getUniqId+0x80>
			}
		}
 801e372:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 801e374:	2017      	movs	r0, #23
 801e376:	183b      	adds	r3, r7, r0
 801e378:	781b      	ldrb	r3, [r3, #0]
 801e37a:	2203      	movs	r2, #3
 801e37c:	4013      	ands	r3, r2
 801e37e:	00db      	lsls	r3, r3, #3
 801e380:	693a      	ldr	r2, [r7, #16]
 801e382:	40da      	lsrs	r2, r3
 801e384:	0011      	movs	r1, r2
 801e386:	183b      	adds	r3, r7, r0
 801e388:	781b      	ldrb	r3, [r3, #0]
 801e38a:	687a      	ldr	r2, [r7, #4]
 801e38c:	18d3      	adds	r3, r2, r3
 801e38e:	b2ca      	uxtb	r2, r1
 801e390:	701a      	strb	r2, [r3, #0]
		l++;
 801e392:	183b      	adds	r3, r7, r0
 801e394:	781a      	ldrb	r2, [r3, #0]
 801e396:	183b      	adds	r3, r7, r0
 801e398:	3201      	adds	r2, #1
 801e39a:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 801e39c:	2317      	movs	r3, #23
 801e39e:	18fb      	adds	r3, r7, r3
 801e3a0:	781a      	ldrb	r2, [r3, #0]
 801e3a2:	1cfb      	adds	r3, r7, #3
 801e3a4:	781b      	ldrb	r3, [r3, #0]
 801e3a6:	b25b      	sxtb	r3, r3
 801e3a8:	429a      	cmp	r2, r3
 801e3aa:	dbbc      	blt.n	801e326 <itsdk_getUniqId+0x32>
	}

}
 801e3ac:	46c0      	nop			; (mov r8, r8)
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	b006      	add	sp, #24
 801e3b2:	bd80      	pop	{r7, pc}
 801e3b4:	1ff80050 	.word	0x1ff80050
 801e3b8:	1ff80054 	.word	0x1ff80054
 801e3bc:	1ff80064 	.word	0x1ff80064

0801e3c0 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b082      	sub	sp, #8
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #endif
}
 801e3c8:	46c0      	nop			; (mov r8, r8)
 801e3ca:	46bd      	mov	sp, r7
 801e3cc:	b002      	add	sp, #8
 801e3ce:	bd80      	pop	{r7, pc}

0801e3d0 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b082      	sub	sp, #8
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	0018      	movs	r0, r3
 801e3dc:	f7e1 fe94 	bl	8000108 <strlen>
 801e3e0:	0003      	movs	r3, r0
 801e3e2:	b29a      	uxth	r2, r3
 801e3e4:	4b04      	ldr	r3, [pc, #16]	; (801e3f8 <serial2_print+0x28>)
 801e3e6:	6879      	ldr	r1, [r7, #4]
 801e3e8:	4804      	ldr	r0, [pc, #16]	; (801e3fc <serial2_print+0x2c>)
 801e3ea:	f7e8 fbad 	bl	8006b48 <HAL_UART_Transmit>
  #endif
}
 801e3ee:	46c0      	nop			; (mov r8, r8)
 801e3f0:	46bd      	mov	sp, r7
 801e3f2:	b002      	add	sp, #8
 801e3f4:	bd80      	pop	{r7, pc}
 801e3f6:	46c0      	nop			; (mov r8, r8)
 801e3f8:	0000ffff 	.word	0x0000ffff
 801e3fc:	200014e4 	.word	0x200014e4

0801e400 <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 801e400:	b580      	push	{r7, lr}
 801e402:	b082      	sub	sp, #8
 801e404:	af00      	add	r7, sp, #0
 801e406:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801e408:	4b17      	ldr	r3, [pc, #92]	; (801e468 <serial2_read+0x68>)
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	b2da      	uxtb	r2, r3
 801e40e:	4b17      	ldr	r3, [pc, #92]	; (801e46c <serial2_read+0x6c>)
 801e410:	781b      	ldrb	r3, [r3, #0]
 801e412:	b2db      	uxtb	r3, r3
 801e414:	429a      	cmp	r2, r3
 801e416:	d021      	beq.n	801e45c <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 801e418:	4b13      	ldr	r3, [pc, #76]	; (801e468 <serial2_read+0x68>)
 801e41a:	781b      	ldrb	r3, [r3, #0]
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	001a      	movs	r2, r3
 801e420:	4b13      	ldr	r3, [pc, #76]	; (801e470 <serial2_read+0x70>)
 801e422:	5c9a      	ldrb	r2, [r3, r2]
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 801e428:	f7ff ff30 	bl	801e28c <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 801e42c:	4b0e      	ldr	r3, [pc, #56]	; (801e468 <serial2_read+0x68>)
 801e42e:	781b      	ldrb	r3, [r3, #0]
 801e430:	b2db      	uxtb	r3, r3
 801e432:	3301      	adds	r3, #1
 801e434:	b2db      	uxtb	r3, r3
 801e436:	223f      	movs	r2, #63	; 0x3f
 801e438:	4013      	ands	r3, r2
 801e43a:	b2da      	uxtb	r2, r3
 801e43c:	4b0a      	ldr	r3, [pc, #40]	; (801e468 <serial2_read+0x68>)
 801e43e:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 801e440:	f7ff ff38 	bl	801e2b4 <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801e444:	4b08      	ldr	r3, [pc, #32]	; (801e468 <serial2_read+0x68>)
 801e446:	781b      	ldrb	r3, [r3, #0]
 801e448:	b2da      	uxtb	r2, r3
 801e44a:	4b08      	ldr	r3, [pc, #32]	; (801e46c <serial2_read+0x6c>)
 801e44c:	781b      	ldrb	r3, [r3, #0]
 801e44e:	b2db      	uxtb	r3, r3
 801e450:	429a      	cmp	r2, r3
 801e452:	d001      	beq.n	801e458 <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 801e454:	2301      	movs	r3, #1
 801e456:	e002      	b.n	801e45e <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 801e458:	2300      	movs	r3, #0
 801e45a:	e000      	b.n	801e45e <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 801e45c:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 801e45e:	0018      	movs	r0, r3
 801e460:	46bd      	mov	sp, r7
 801e462:	b002      	add	sp, #8
 801e464:	bd80      	pop	{r7, pc}
 801e466:	46c0      	nop			; (mov r8, r8)
 801e468:	2000171e 	.word	0x2000171e
 801e46c:	200016d5 	.word	0x200016d5
 801e470:	200016d8 	.word	0x200016d8

0801e474 <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 801e474:	b580      	push	{r7, lr}
 801e476:	b082      	sub	sp, #8
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	2208      	movs	r2, #8
 801e482:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	2204      	movs	r2, #4
 801e48a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	2202      	movs	r2, #2
 801e492:	621a      	str	r2, [r3, #32]
}
 801e494:	46c0      	nop			; (mov r8, r8)
 801e496:	46bd      	mov	sp, r7
 801e498:	b002      	add	sp, #8
 801e49a:	bd80      	pop	{r7, pc}

0801e49c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801e49c:	b580      	push	{r7, lr}
 801e49e:	b082      	sub	sp, #8
 801e4a0:	af00      	add	r7, sp, #0
 801e4a2:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	681b      	ldr	r3, [r3, #0]
 801e4a8:	4a21      	ldr	r2, [pc, #132]	; (801e530 <HAL_UART_RxCpltCallback+0x94>)
 801e4aa:	4293      	cmp	r3, r2
 801e4ac:	d133      	bne.n	801e516 <HAL_UART_RxCpltCallback+0x7a>
	  {
		  //log_info("toto uart wrapper.c l 413");
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 801e4ae:	4b21      	ldr	r3, [pc, #132]	; (801e534 <HAL_UART_RxCpltCallback+0x98>)
 801e4b0:	781b      	ldrb	r3, [r3, #0]
 801e4b2:	2b52      	cmp	r3, #82	; 0x52
 801e4b4:	d102      	bne.n	801e4bc <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 801e4b6:	4b20      	ldr	r3, [pc, #128]	; (801e538 <HAL_UART_RxCpltCallback+0x9c>)
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 801e4bc:	4b1e      	ldr	r3, [pc, #120]	; (801e538 <HAL_UART_RxCpltCallback+0x9c>)
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	4a1c      	ldr	r2, [pc, #112]	; (801e534 <HAL_UART_RxCpltCallback+0x98>)
 801e4c2:	7811      	ldrb	r1, [r2, #0]
 801e4c4:	4a1d      	ldr	r2, [pc, #116]	; (801e53c <HAL_UART_RxCpltCallback+0xa0>)
 801e4c6:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 801e4c8:	4b1b      	ldr	r3, [pc, #108]	; (801e538 <HAL_UART_RxCpltCallback+0x9c>)
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	1c5a      	adds	r2, r3, #1
 801e4ce:	4b1a      	ldr	r3, [pc, #104]	; (801e538 <HAL_UART_RxCpltCallback+0x9c>)
 801e4d0:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 801e4d2:	4b19      	ldr	r3, [pc, #100]	; (801e538 <HAL_UART_RxCpltCallback+0x9c>)
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	2b05      	cmp	r3, #5
 801e4d8:	d006      	beq.n	801e4e8 <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 801e4da:	4916      	ldr	r1, [pc, #88]	; (801e534 <HAL_UART_RxCpltCallback+0x98>)
 801e4dc:	4b18      	ldr	r3, [pc, #96]	; (801e540 <HAL_UART_RxCpltCallback+0xa4>)
 801e4de:	2201      	movs	r2, #1
 801e4e0:	0018      	movs	r0, r3
 801e4e2:	f7e8 fbd9 	bl	8006c98 <HAL_UART_Receive_IT>

	  }else if (huart -> Instance == USART2){
		  log_info("toto");
	  }

}
 801e4e6:	e01f      	b.n	801e528 <HAL_UART_RxCpltCallback+0x8c>
			  tabToPrint[0] = 0x30; //Force to 0
 801e4e8:	4b16      	ldr	r3, [pc, #88]	; (801e544 <HAL_UART_RxCpltCallback+0xa8>)
 801e4ea:	2230      	movs	r2, #48	; 0x30
 801e4ec:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 801e4ee:	4b13      	ldr	r3, [pc, #76]	; (801e53c <HAL_UART_RxCpltCallback+0xa0>)
 801e4f0:	785a      	ldrb	r2, [r3, #1]
 801e4f2:	4b14      	ldr	r3, [pc, #80]	; (801e544 <HAL_UART_RxCpltCallback+0xa8>)
 801e4f4:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 801e4f6:	4b11      	ldr	r3, [pc, #68]	; (801e53c <HAL_UART_RxCpltCallback+0xa0>)
 801e4f8:	789a      	ldrb	r2, [r3, #2]
 801e4fa:	4b12      	ldr	r3, [pc, #72]	; (801e544 <HAL_UART_RxCpltCallback+0xa8>)
 801e4fc:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 801e4fe:	4b0f      	ldr	r3, [pc, #60]	; (801e53c <HAL_UART_RxCpltCallback+0xa0>)
 801e500:	78da      	ldrb	r2, [r3, #3]
 801e502:	4b10      	ldr	r3, [pc, #64]	; (801e544 <HAL_UART_RxCpltCallback+0xa8>)
 801e504:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 801e506:	4b0d      	ldr	r3, [pc, #52]	; (801e53c <HAL_UART_RxCpltCallback+0xa0>)
 801e508:	791a      	ldrb	r2, [r3, #4]
 801e50a:	4b0e      	ldr	r3, [pc, #56]	; (801e544 <HAL_UART_RxCpltCallback+0xa8>)
 801e50c:	711a      	strb	r2, [r3, #4]
			  indexOfReceive = 0;
 801e50e:	4b0a      	ldr	r3, [pc, #40]	; (801e538 <HAL_UART_RxCpltCallback+0x9c>)
 801e510:	2200      	movs	r2, #0
 801e512:	601a      	str	r2, [r3, #0]
}
 801e514:	e008      	b.n	801e528 <HAL_UART_RxCpltCallback+0x8c>
	  }else if (huart -> Instance == USART2){
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	4a0b      	ldr	r2, [pc, #44]	; (801e548 <HAL_UART_RxCpltCallback+0xac>)
 801e51c:	4293      	cmp	r3, r2
 801e51e:	d103      	bne.n	801e528 <HAL_UART_RxCpltCallback+0x8c>
		  log_info("toto");
 801e520:	4b0a      	ldr	r3, [pc, #40]	; (801e54c <HAL_UART_RxCpltCallback+0xb0>)
 801e522:	0018      	movs	r0, r3
 801e524:	f7fd fe38 	bl	801c198 <log_info>
}
 801e528:	46c0      	nop			; (mov r8, r8)
 801e52a:	46bd      	mov	sp, r7
 801e52c:	b002      	add	sp, #8
 801e52e:	bd80      	pop	{r7, pc}
 801e530:	40013800 	.word	0x40013800
 801e534:	2000171d 	.word	0x2000171d
 801e538:	200012cc 	.word	0x200012cc
 801e53c:	200016d0 	.word	0x200016d0
 801e540:	20001354 	.word	0x20001354
 801e544:	20001718 	.word	0x20001718
 801e548:	40004400 	.word	0x40004400
 801e54c:	080212cc 	.word	0x080212cc

0801e550 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 801e550:	b580      	push	{r7, lr}
 801e552:	b082      	sub	sp, #8
 801e554:	af00      	add	r7, sp, #0
 801e556:	0002      	movs	r2, r0
 801e558:	6039      	str	r1, [r7, #0]
 801e55a:	1dfb      	adds	r3, r7, #7
 801e55c:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 801e55e:	46c0      	nop			; (mov r8, r8)
 801e560:	46bd      	mov	sp, r7
 801e562:	b002      	add	sp, #8
 801e564:	bd80      	pop	{r7, pc}
	...

0801e568 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 801e568:	b580      	push	{r7, lr}
 801e56a:	b088      	sub	sp, #32
 801e56c:	af00      	add	r7, sp, #0
 801e56e:	60b9      	str	r1, [r7, #8]
 801e570:	607a      	str	r2, [r7, #4]
 801e572:	603b      	str	r3, [r7, #0]
 801e574:	210f      	movs	r1, #15
 801e576:	187b      	adds	r3, r7, r1
 801e578:	1c02      	adds	r2, r0, #0
 801e57a:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801e580:	187b      	adds	r3, r7, r1
 801e582:	781b      	ldrb	r3, [r3, #0]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d106      	bne.n	801e596 <_eeprom_write+0x2e>
 801e588:	683a      	ldr	r2, [r7, #0]
 801e58a:	68bb      	ldr	r3, [r7, #8]
 801e58c:	18d2      	adds	r2, r2, r3
 801e58e:	23c0      	movs	r3, #192	; 0xc0
 801e590:	015b      	lsls	r3, r3, #5
 801e592:	429a      	cmp	r2, r3
 801e594:	d906      	bls.n	801e5a4 <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801e596:	683b      	ldr	r3, [r7, #0]
 801e598:	b29b      	uxth	r3, r3
 801e59a:	4a3f      	ldr	r2, [pc, #252]	; (801e698 <_eeprom_write+0x130>)
 801e59c:	0019      	movs	r1, r3
 801e59e:	0010      	movs	r0, r2
 801e5a0:	f7fd fae2 	bl	801bb68 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801e5a4:	68bb      	ldr	r3, [r7, #8]
 801e5a6:	4a3d      	ldr	r2, [pc, #244]	; (801e69c <_eeprom_write+0x134>)
 801e5a8:	4694      	mov	ip, r2
 801e5aa:	4463      	add	r3, ip
 801e5ac:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801e5ae:	69fb      	ldr	r3, [r7, #28]
 801e5b0:	2203      	movs	r2, #3
 801e5b2:	4013      	ands	r3, r2
 801e5b4:	d006      	beq.n	801e5c4 <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 801e5b6:	4b3a      	ldr	r3, [pc, #232]	; (801e6a0 <_eeprom_write+0x138>)
 801e5b8:	2101      	movs	r1, #1
 801e5ba:	0018      	movs	r0, r3
 801e5bc:	f7fd fad4 	bl	801bb68 <itsdk_error_report>
	    return false;
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	e064      	b.n	801e68e <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 801e5c4:	4b37      	ldr	r3, [pc, #220]	; (801e6a4 <_eeprom_write+0x13c>)
 801e5c6:	685b      	ldr	r3, [r3, #4]
 801e5c8:	2201      	movs	r2, #1
 801e5ca:	4013      	ands	r3, r2
 801e5cc:	d005      	beq.n	801e5da <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 801e5ce:	4b35      	ldr	r3, [pc, #212]	; (801e6a4 <_eeprom_write+0x13c>)
 801e5d0:	4a35      	ldr	r2, [pc, #212]	; (801e6a8 <_eeprom_write+0x140>)
 801e5d2:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 801e5d4:	4b33      	ldr	r3, [pc, #204]	; (801e6a4 <_eeprom_write+0x13c>)
 801e5d6:	4a35      	ldr	r2, [pc, #212]	; (801e6ac <_eeprom_write+0x144>)
 801e5d8:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 801e5da:	2300      	movs	r3, #0
 801e5dc:	61bb      	str	r3, [r7, #24]
 801e5de:	e04b      	b.n	801e678 <_eeprom_write+0x110>
		v = _data[i] << 24;
 801e5e0:	69bb      	ldr	r3, [r7, #24]
 801e5e2:	697a      	ldr	r2, [r7, #20]
 801e5e4:	18d3      	adds	r3, r2, r3
 801e5e6:	781b      	ldrb	r3, [r3, #0]
 801e5e8:	061b      	lsls	r3, r3, #24
 801e5ea:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 801e5ec:	69bb      	ldr	r3, [r7, #24]
 801e5ee:	3301      	adds	r3, #1
 801e5f0:	683a      	ldr	r2, [r7, #0]
 801e5f2:	429a      	cmp	r2, r3
 801e5f4:	dd07      	ble.n	801e606 <_eeprom_write+0x9e>
 801e5f6:	69bb      	ldr	r3, [r7, #24]
 801e5f8:	3301      	adds	r3, #1
 801e5fa:	697a      	ldr	r2, [r7, #20]
 801e5fc:	18d3      	adds	r3, r2, r3
 801e5fe:	781b      	ldrb	r3, [r3, #0]
 801e600:	041b      	lsls	r3, r3, #16
 801e602:	001a      	movs	r2, r3
 801e604:	e000      	b.n	801e608 <_eeprom_write+0xa0>
 801e606:	2200      	movs	r2, #0
 801e608:	693b      	ldr	r3, [r7, #16]
 801e60a:	189b      	adds	r3, r3, r2
 801e60c:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 801e60e:	69bb      	ldr	r3, [r7, #24]
 801e610:	3302      	adds	r3, #2
 801e612:	683a      	ldr	r2, [r7, #0]
 801e614:	429a      	cmp	r2, r3
 801e616:	dd07      	ble.n	801e628 <_eeprom_write+0xc0>
 801e618:	69bb      	ldr	r3, [r7, #24]
 801e61a:	3302      	adds	r3, #2
 801e61c:	697a      	ldr	r2, [r7, #20]
 801e61e:	18d3      	adds	r3, r2, r3
 801e620:	781b      	ldrb	r3, [r3, #0]
 801e622:	021b      	lsls	r3, r3, #8
 801e624:	001a      	movs	r2, r3
 801e626:	e000      	b.n	801e62a <_eeprom_write+0xc2>
 801e628:	2200      	movs	r2, #0
 801e62a:	693b      	ldr	r3, [r7, #16]
 801e62c:	189b      	adds	r3, r3, r2
 801e62e:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 801e630:	69bb      	ldr	r3, [r7, #24]
 801e632:	3303      	adds	r3, #3
 801e634:	683a      	ldr	r2, [r7, #0]
 801e636:	429a      	cmp	r2, r3
 801e638:	dd06      	ble.n	801e648 <_eeprom_write+0xe0>
 801e63a:	69bb      	ldr	r3, [r7, #24]
 801e63c:	3303      	adds	r3, #3
 801e63e:	697a      	ldr	r2, [r7, #20]
 801e640:	18d3      	adds	r3, r2, r3
 801e642:	781b      	ldrb	r3, [r3, #0]
 801e644:	001a      	movs	r2, r3
 801e646:	e000      	b.n	801e64a <_eeprom_write+0xe2>
 801e648:	2200      	movs	r2, #0
 801e64a:	693b      	ldr	r3, [r7, #16]
 801e64c:	189b      	adds	r3, r3, r2
 801e64e:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 801e650:	69fb      	ldr	r3, [r7, #28]
 801e652:	0018      	movs	r0, r3
 801e654:	f000 f8a6 	bl	801e7a4 <__eepromRead>
 801e658:	0002      	movs	r2, r0
 801e65a:	693b      	ldr	r3, [r7, #16]
 801e65c:	4293      	cmp	r3, r2
 801e65e:	d005      	beq.n	801e66c <_eeprom_write+0x104>
 801e660:	693a      	ldr	r2, [r7, #16]
 801e662:	69fb      	ldr	r3, [r7, #28]
 801e664:	0011      	movs	r1, r2
 801e666:	0018      	movs	r0, r3
 801e668:	f000 f8a6 	bl	801e7b8 <__eepromWrite>
		_eepromAddr+=4;
 801e66c:	69fb      	ldr	r3, [r7, #28]
 801e66e:	3304      	adds	r3, #4
 801e670:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801e672:	69bb      	ldr	r3, [r7, #24]
 801e674:	3304      	adds	r3, #4
 801e676:	61bb      	str	r3, [r7, #24]
 801e678:	69ba      	ldr	r2, [r7, #24]
 801e67a:	683b      	ldr	r3, [r7, #0]
 801e67c:	429a      	cmp	r2, r3
 801e67e:	dbaf      	blt.n	801e5e0 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 801e680:	4b08      	ldr	r3, [pc, #32]	; (801e6a4 <_eeprom_write+0x13c>)
 801e682:	685a      	ldr	r2, [r3, #4]
 801e684:	4b07      	ldr	r3, [pc, #28]	; (801e6a4 <_eeprom_write+0x13c>)
 801e686:	2101      	movs	r1, #1
 801e688:	430a      	orrs	r2, r1
 801e68a:	605a      	str	r2, [r3, #4]
	return true;
 801e68c:	2301      	movs	r3, #1
}
 801e68e:	0018      	movs	r0, r3
 801e690:	46bd      	mov	sp, r7
 801e692:	b008      	add	sp, #32
 801e694:	bd80      	pop	{r7, pc}
 801e696:	46c0      	nop			; (mov r8, r8)
 801e698:	d0000030 	.word	0xd0000030
 801e69c:	08080000 	.word	0x08080000
 801e6a0:	d0000031 	.word	0xd0000031
 801e6a4:	40022000 	.word	0x40022000
 801e6a8:	89abcdef 	.word	0x89abcdef
 801e6ac:	02030405 	.word	0x02030405

0801e6b0 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 801e6b0:	b580      	push	{r7, lr}
 801e6b2:	b088      	sub	sp, #32
 801e6b4:	af00      	add	r7, sp, #0
 801e6b6:	60b9      	str	r1, [r7, #8]
 801e6b8:	607a      	str	r2, [r7, #4]
 801e6ba:	603b      	str	r3, [r7, #0]
 801e6bc:	210f      	movs	r1, #15
 801e6be:	187b      	adds	r3, r7, r1
 801e6c0:	1c02      	adds	r2, r0, #0
 801e6c2:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801e6c8:	187b      	adds	r3, r7, r1
 801e6ca:	781b      	ldrb	r3, [r3, #0]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d106      	bne.n	801e6de <_eeprom_read+0x2e>
 801e6d0:	683a      	ldr	r2, [r7, #0]
 801e6d2:	68bb      	ldr	r3, [r7, #8]
 801e6d4:	18d2      	adds	r2, r2, r3
 801e6d6:	23c0      	movs	r3, #192	; 0xc0
 801e6d8:	015b      	lsls	r3, r3, #5
 801e6da:	429a      	cmp	r2, r3
 801e6dc:	d906      	bls.n	801e6ec <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801e6de:	683b      	ldr	r3, [r7, #0]
 801e6e0:	b29b      	uxth	r3, r3
 801e6e2:	4a2d      	ldr	r2, [pc, #180]	; (801e798 <_eeprom_read+0xe8>)
 801e6e4:	0019      	movs	r1, r3
 801e6e6:	0010      	movs	r0, r2
 801e6e8:	f7fd fa3e 	bl	801bb68 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801e6ec:	68bb      	ldr	r3, [r7, #8]
 801e6ee:	4a2b      	ldr	r2, [pc, #172]	; (801e79c <_eeprom_read+0xec>)
 801e6f0:	4694      	mov	ip, r2
 801e6f2:	4463      	add	r3, ip
 801e6f4:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801e6f6:	69fb      	ldr	r3, [r7, #28]
 801e6f8:	2203      	movs	r2, #3
 801e6fa:	4013      	ands	r3, r2
 801e6fc:	d006      	beq.n	801e70c <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 801e6fe:	4b28      	ldr	r3, [pc, #160]	; (801e7a0 <_eeprom_read+0xf0>)
 801e700:	2100      	movs	r1, #0
 801e702:	0018      	movs	r0, r3
 801e704:	f7fd fa30 	bl	801bb68 <itsdk_error_report>
	    return false;
 801e708:	2300      	movs	r3, #0
 801e70a:	e040      	b.n	801e78e <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 801e70c:	2300      	movs	r3, #0
 801e70e:	61bb      	str	r3, [r7, #24]
 801e710:	e038      	b.n	801e784 <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 801e712:	69fb      	ldr	r3, [r7, #28]
 801e714:	0018      	movs	r0, r3
 801e716:	f000 f845 	bl	801e7a4 <__eepromRead>
 801e71a:	0003      	movs	r3, r0
 801e71c:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 801e71e:	693b      	ldr	r3, [r7, #16]
 801e720:	0e19      	lsrs	r1, r3, #24
 801e722:	69bb      	ldr	r3, [r7, #24]
 801e724:	697a      	ldr	r2, [r7, #20]
 801e726:	18d3      	adds	r3, r2, r3
 801e728:	b2ca      	uxtb	r2, r1
 801e72a:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 801e72c:	69bb      	ldr	r3, [r7, #24]
 801e72e:	3301      	adds	r3, #1
 801e730:	683a      	ldr	r2, [r7, #0]
 801e732:	429a      	cmp	r2, r3
 801e734:	dd07      	ble.n	801e746 <_eeprom_read+0x96>
 801e736:	693b      	ldr	r3, [r7, #16]
 801e738:	0c19      	lsrs	r1, r3, #16
 801e73a:	69bb      	ldr	r3, [r7, #24]
 801e73c:	3301      	adds	r3, #1
 801e73e:	697a      	ldr	r2, [r7, #20]
 801e740:	18d3      	adds	r3, r2, r3
 801e742:	b2ca      	uxtb	r2, r1
 801e744:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 801e746:	69bb      	ldr	r3, [r7, #24]
 801e748:	3302      	adds	r3, #2
 801e74a:	683a      	ldr	r2, [r7, #0]
 801e74c:	429a      	cmp	r2, r3
 801e74e:	dd07      	ble.n	801e760 <_eeprom_read+0xb0>
 801e750:	693b      	ldr	r3, [r7, #16]
 801e752:	0a19      	lsrs	r1, r3, #8
 801e754:	69bb      	ldr	r3, [r7, #24]
 801e756:	3302      	adds	r3, #2
 801e758:	697a      	ldr	r2, [r7, #20]
 801e75a:	18d3      	adds	r3, r2, r3
 801e75c:	b2ca      	uxtb	r2, r1
 801e75e:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 801e760:	69bb      	ldr	r3, [r7, #24]
 801e762:	3303      	adds	r3, #3
 801e764:	683a      	ldr	r2, [r7, #0]
 801e766:	429a      	cmp	r2, r3
 801e768:	dd06      	ble.n	801e778 <_eeprom_read+0xc8>
 801e76a:	69bb      	ldr	r3, [r7, #24]
 801e76c:	3303      	adds	r3, #3
 801e76e:	697a      	ldr	r2, [r7, #20]
 801e770:	18d3      	adds	r3, r2, r3
 801e772:	693a      	ldr	r2, [r7, #16]
 801e774:	b2d2      	uxtb	r2, r2
 801e776:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 801e778:	69fb      	ldr	r3, [r7, #28]
 801e77a:	3304      	adds	r3, #4
 801e77c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801e77e:	69bb      	ldr	r3, [r7, #24]
 801e780:	3304      	adds	r3, #4
 801e782:	61bb      	str	r3, [r7, #24]
 801e784:	69ba      	ldr	r2, [r7, #24]
 801e786:	683b      	ldr	r3, [r7, #0]
 801e788:	429a      	cmp	r2, r3
 801e78a:	dbc2      	blt.n	801e712 <_eeprom_read+0x62>
	}
	return true;
 801e78c:	2301      	movs	r3, #1
}
 801e78e:	0018      	movs	r0, r3
 801e790:	46bd      	mov	sp, r7
 801e792:	b008      	add	sp, #32
 801e794:	bd80      	pop	{r7, pc}
 801e796:	46c0      	nop			; (mov r8, r8)
 801e798:	d0000030 	.word	0xd0000030
 801e79c:	08080000 	.word	0x08080000
 801e7a0:	d0000031 	.word	0xd0000031

0801e7a4 <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 801e7a4:	b580      	push	{r7, lr}
 801e7a6:	b082      	sub	sp, #8
 801e7a8:	af00      	add	r7, sp, #0
 801e7aa:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	681b      	ldr	r3, [r3, #0]
}
 801e7b0:	0018      	movs	r0, r3
 801e7b2:	46bd      	mov	sp, r7
 801e7b4:	b002      	add	sp, #8
 801e7b6:	bd80      	pop	{r7, pc}

0801e7b8 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 801e7b8:	b580      	push	{r7, lr}
 801e7ba:	b084      	sub	sp, #16
 801e7bc:	af00      	add	r7, sp, #0
 801e7be:	6078      	str	r0, [r7, #4]
 801e7c0:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 801e7c2:	230e      	movs	r3, #14
 801e7c4:	18fb      	adds	r3, r7, r3
 801e7c6:	4a20      	ldr	r2, [pc, #128]	; (801e848 <__eepromWrite+0x90>)
 801e7c8:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801e7ca:	e005      	b.n	801e7d8 <__eepromWrite+0x20>
 801e7cc:	210e      	movs	r1, #14
 801e7ce:	187b      	adds	r3, r7, r1
 801e7d0:	881a      	ldrh	r2, [r3, #0]
 801e7d2:	187b      	adds	r3, r7, r1
 801e7d4:	3a01      	subs	r2, #1
 801e7d6:	801a      	strh	r2, [r3, #0]
 801e7d8:	4b1c      	ldr	r3, [pc, #112]	; (801e84c <__eepromWrite+0x94>)
 801e7da:	699b      	ldr	r3, [r3, #24]
 801e7dc:	2201      	movs	r2, #1
 801e7de:	4013      	ands	r3, r2
 801e7e0:	d004      	beq.n	801e7ec <__eepromWrite+0x34>
 801e7e2:	230e      	movs	r3, #14
 801e7e4:	18fb      	adds	r3, r7, r3
 801e7e6:	881b      	ldrh	r3, [r3, #0]
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d1ef      	bne.n	801e7cc <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 801e7ec:	230e      	movs	r3, #14
 801e7ee:	18fb      	adds	r3, r7, r3
 801e7f0:	881b      	ldrh	r3, [r3, #0]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d101      	bne.n	801e7fa <__eepromWrite+0x42>
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	e021      	b.n	801e83e <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 801e7fa:	4b14      	ldr	r3, [pc, #80]	; (801e84c <__eepromWrite+0x94>)
 801e7fc:	685a      	ldr	r2, [r3, #4]
 801e7fe:	4b13      	ldr	r3, [pc, #76]	; (801e84c <__eepromWrite+0x94>)
 801e800:	4913      	ldr	r1, [pc, #76]	; (801e850 <__eepromWrite+0x98>)
 801e802:	400a      	ands	r2, r1
 801e804:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	683a      	ldr	r2, [r7, #0]
 801e80a:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801e80c:	e005      	b.n	801e81a <__eepromWrite+0x62>
 801e80e:	210e      	movs	r1, #14
 801e810:	187b      	adds	r3, r7, r1
 801e812:	881a      	ldrh	r2, [r3, #0]
 801e814:	187b      	adds	r3, r7, r1
 801e816:	3a01      	subs	r2, #1
 801e818:	801a      	strh	r2, [r3, #0]
 801e81a:	4b0c      	ldr	r3, [pc, #48]	; (801e84c <__eepromWrite+0x94>)
 801e81c:	699b      	ldr	r3, [r3, #24]
 801e81e:	2201      	movs	r2, #1
 801e820:	4013      	ands	r3, r2
 801e822:	d004      	beq.n	801e82e <__eepromWrite+0x76>
 801e824:	230e      	movs	r3, #14
 801e826:	18fb      	adds	r3, r7, r3
 801e828:	881b      	ldrh	r3, [r3, #0]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d1ef      	bne.n	801e80e <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 801e82e:	230e      	movs	r3, #14
 801e830:	18fb      	adds	r3, r7, r3
 801e832:	881b      	ldrh	r3, [r3, #0]
 801e834:	2b00      	cmp	r3, #0
 801e836:	d101      	bne.n	801e83c <__eepromWrite+0x84>
 801e838:	2300      	movs	r3, #0
 801e83a:	e000      	b.n	801e83e <__eepromWrite+0x86>

	return true;
 801e83c:	2301      	movs	r3, #1
}
 801e83e:	0018      	movs	r0, r3
 801e840:	46bd      	mov	sp, r7
 801e842:	b004      	add	sp, #16
 801e844:	bd80      	pop	{r7, pc}
 801e846:	46c0      	nop			; (mov r8, r8)
 801e848:	00002710 	.word	0x00002710
 801e84c:	40022000 	.word	0x40022000
 801e850:	fffffeff 	.word	0xfffffeff

0801e854 <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 801e854:	b530      	push	{r4, r5, lr}
 801e856:	000c      	movs	r4, r1
 801e858:	b083      	sub	sp, #12
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 801e85a:	1c43      	adds	r3, r0, #1
 801e85c:	d05c      	beq.n	801e918 <stm32l_lowPowerSetup+0xc4>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 801e85e:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 801e860:	2805      	cmp	r0, #5
 801e862:	d956      	bls.n	801e912 <stm32l_lowPowerSetup+0xbe>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 801e864:	f000 f93c 	bl	801eae0 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 801e868:	f7e5 fb22 	bl	8003eb0 <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 801e86c:	2380      	movs	r3, #128	; 0x80
 801e86e:	4a2b      	ldr	r2, [pc, #172]	; (801e91c <stm32l_lowPowerSetup+0xc8>)
 801e870:	055b      	lsls	r3, r3, #21
 801e872:	6b91      	ldr	r1, [r2, #56]	; 0x38
 801e874:	430b      	orrs	r3, r1
 801e876:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 801e878:	f7e6 f8d6 	bl	8004a28 <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 801e87c:	f7e6 f8c6 	bl	8004a0c <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 801e880:	2c00      	cmp	r4, #0
 801e882:	d13e      	bne.n	801e902 <stm32l_lowPowerSetup+0xae>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 801e884:	2180      	movs	r1, #128	; 0x80
 801e886:	4d26      	ldr	r5, [pc, #152]	; (801e920 <stm32l_lowPowerSetup+0xcc>)
 801e888:	0249      	lsls	r1, r1, #9
 801e88a:	682b      	ldr	r3, [r5, #0]
 801e88c:	69da      	ldr	r2, [r3, #28]
 801e88e:	420a      	tst	r2, r1
 801e890:	d1fc      	bne.n	801e88c <stm32l_lowPowerSetup+0x38>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 801e892:	2480      	movs	r4, #128	; 0x80
 801e894:	03e4      	lsls	r4, r4, #15
 801e896:	69da      	ldr	r2, [r3, #28]
 801e898:	4222      	tst	r2, r4
 801e89a:	d0fc      	beq.n	801e896 <stm32l_lowPowerSetup+0x42>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801e89c:	23c0      	movs	r3, #192	; 0xc0
 801e89e:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 801e8a0:	0019      	movs	r1, r3
 801e8a2:	9a01      	ldr	r2, [sp, #4]
 801e8a4:	0028      	movs	r0, r5
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801e8a6:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 801e8a8:	f7e9 f962 	bl	8007b70 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801e8ac:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 801e8ae:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801e8b0:	689a      	ldr	r2, [r3, #8]
 801e8b2:	4314      	orrs	r4, r2
 801e8b4:	609c      	str	r4, [r3, #8]
			  #endif
			#endif

			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART1 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801e8b6:	2480      	movs	r4, #128	; 0x80
				HAL_UARTEx_EnableStopMode(&huart2);
 801e8b8:	f7e9 f9c0 	bl	8007c3c <HAL_UARTEx_EnableStopMode>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801e8bc:	4d19      	ldr	r5, [pc, #100]	; (801e924 <stm32l_lowPowerSetup+0xd0>)
 801e8be:	03e4      	lsls	r4, r4, #15
 801e8c0:	682a      	ldr	r2, [r5, #0]
 801e8c2:	69d3      	ldr	r3, [r2, #28]
 801e8c4:	4223      	tst	r3, r4
 801e8c6:	d0fc      	beq.n	801e8c2 <stm32l_lowPowerSetup+0x6e>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1,wakeup);
 801e8c8:	9900      	ldr	r1, [sp, #0]
 801e8ca:	9a01      	ldr	r2, [sp, #4]
 801e8cc:	0028      	movs	r0, r5
 801e8ce:	f7e9 f94f 	bl	8007b70 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 801e8d2:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart1);
 801e8d4:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 801e8d6:	689a      	ldr	r2, [r3, #8]
 801e8d8:	4314      	orrs	r4, r2
 801e8da:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart1);
 801e8dc:	f7e9 f9ae 	bl	8007c3c <HAL_UARTEx_EnableStopMode>
				#if (ITSDK_WITH_UART & __UART_USART1) > 0
					__HAL_RCC_USART1_CLK_DISABLE();
				#endif
			#endif

			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 801e8e0:	f000 f89a 	bl	801ea18 <_stm32l_disableGpios>
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
																// (the previously existing handler will be bypassed)
			#else
			  gpio_interruptDisableAll();						// Disable GPIOs interrupts
 801e8e4:	f7ff fb99 	bl	801e01a <gpio_interruptDisableAll>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
 801e8e8:	2204      	movs	r2, #4
				__HAL_RCC_SPI1_CLK_DISABLE();
 801e8ea:	4b0c      	ldr	r3, [pc, #48]	; (801e91c <stm32l_lowPowerSetup+0xc8>)
 801e8ec:	4c0e      	ldr	r4, [pc, #56]	; (801e928 <stm32l_lowPowerSetup+0xd4>)
 801e8ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 801e8f0:	480e      	ldr	r0, [pc, #56]	; (801e92c <stm32l_lowPowerSetup+0xd8>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 801e8f2:	4021      	ands	r1, r4
 801e8f4:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 801e8f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801e8f8:	4391      	bics	r1, r2
 801e8fa:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 801e8fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e8fe:	4002      	ands	r2, r0
 801e900:	635a      	str	r2, [r3, #52]	; 0x34
		// ??? add ?? Not yet tested
		//__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801e902:	22ff      	movs	r2, #255	; 0xff
 801e904:	4b0a      	ldr	r3, [pc, #40]	; (801e930 <stm32l_lowPowerSetup+0xdc>)
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801e906:	2101      	movs	r1, #1
 801e908:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801e90a:	701a      	strb	r2, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801e90c:	f7e6 f84a 	bl	80049a4 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 801e910:	2300      	movs	r3, #0
}
 801e912:	0018      	movs	r0, r3
 801e914:	b003      	add	sp, #12
 801e916:	bd30      	pop	{r4, r5, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 801e918:	4806      	ldr	r0, [pc, #24]	; (801e934 <stm32l_lowPowerSetup+0xe0>)
 801e91a:	e7a3      	b.n	801e864 <stm32l_lowPowerSetup+0x10>
 801e91c:	40021000 	.word	0x40021000
 801e920:	200014e4 	.word	0x200014e4
 801e924:	20001354 	.word	0x20001354
 801e928:	ffffefff 	.word	0xffffefff
 801e92c:	fffffdff 	.word	0xfffffdff
 801e930:	200000b0 	.word	0x200000b0
 801e934:	00003e7b 	.word	0x00003e7b

0801e938 <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 801e938:	b510      	push	{r4, lr}
 801e93a:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 801e93c:	f7e4 fa9e 	bl	8002e7c <SystemClock_Config>
		HAL_SuspendTick();
 801e940:	f7e5 fab6 	bl	8003eb0 <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 801e944:	f000 f8dd 	bl	801eb02 <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 801e948:	2c00      	cmp	r4, #0
 801e94a:	d10f      	bne.n	801e96c <stm32l_lowPowerResume+0x34>

			stm32l_lowPowerRestoreGpioConfig();
 801e94c:	f7e4 f9fa 	bl	8002d44 <stm32l_lowPowerRestoreGpioConfig>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				HAL_I2C_MspInit(&hi2c2);
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				HAL_SPI_MspInit(&hspi1);
 801e950:	4808      	ldr	r0, [pc, #32]	; (801e974 <stm32l_lowPowerResume+0x3c>)
 801e952:	f7e4 ff89 	bl	8003868 <HAL_SPI_MspInit>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				HAL_SPI_MspInit(&hspi2);
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				HAL_TIM_Base_MspInit(&htim21);
 801e956:	4808      	ldr	r0, [pc, #32]	; (801e978 <stm32l_lowPowerResume+0x40>)
 801e958:	f7e5 f902 	bl	8003b60 <HAL_TIM_Base_MspInit>
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_ENABLE();
 801e95c:	2380      	movs	r3, #128	; 0x80
 801e95e:	4a07      	ldr	r2, [pc, #28]	; (801e97c <stm32l_lowPowerResume+0x44>)
 801e960:	009b      	lsls	r3, r3, #2
 801e962:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801e964:	430b      	orrs	r3, r1
 801e966:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 801e968:	f7e5 fce4 	bl	8004334 <HAL_ADCEx_EnableVREFINT>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 801e96c:	f7e5 faae 	bl	8003ecc <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 801e970:	2000      	movs	r0, #0
 801e972:	bd10      	pop	{r4, pc}
 801e974:	20001450 	.word	0x20001450
 801e978:	200014a8 	.word	0x200014a8
 801e97c:	40021000 	.word	0x40021000

0801e980 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b086      	sub	sp, #24
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
 801e988:	000a      	movs	r2, r1
 801e98a:	1cbb      	adds	r3, r7, #2
 801e98c:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 801e98e:	2300      	movs	r3, #0
 801e990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e992:	2300      	movs	r3, #0
 801e994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e996:	2300      	movs	r3, #0
 801e998:	60fb      	str	r3, [r7, #12]

  // Configure the port pins //
  while ((pins >> position) != 0)
 801e99a:	e033      	b.n	801ea04 <__GpioAnalog+0x84>
  {
    iocurrent = (pins) & (1U << position);
 801e99c:	1cbb      	adds	r3, r7, #2
 801e99e:	881b      	ldrh	r3, [r3, #0]
 801e9a0:	2101      	movs	r1, #1
 801e9a2:	697a      	ldr	r2, [r7, #20]
 801e9a4:	4091      	lsls	r1, r2
 801e9a6:	000a      	movs	r2, r1
 801e9a8:	4013      	ands	r3, r2
 801e9aa:	613b      	str	r3, [r7, #16]
    if(iocurrent)
 801e9ac:	693b      	ldr	r3, [r7, #16]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d025      	beq.n	801e9fe <__GpioAnalog+0x7e>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e9b8:	697b      	ldr	r3, [r7, #20]
 801e9ba:	005b      	lsls	r3, r3, #1
 801e9bc:	2203      	movs	r2, #3
 801e9be:	409a      	lsls	r2, r3
 801e9c0:	0013      	movs	r3, r2
 801e9c2:	43da      	mvns	r2, r3
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	4013      	ands	r3, r2
 801e9c8:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 801e9ca:	697b      	ldr	r3, [r7, #20]
 801e9cc:	005b      	lsls	r3, r3, #1
 801e9ce:	2203      	movs	r2, #3
 801e9d0:	409a      	lsls	r2, r3
 801e9d2:	0013      	movs	r3, r2
 801e9d4:	68fa      	ldr	r2, [r7, #12]
 801e9d6:	4313      	orrs	r3, r2
 801e9d8:	60fb      	str	r3, [r7, #12]
      GPIOx->MODER = temp;
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	68fa      	ldr	r2, [r7, #12]
 801e9de:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	68db      	ldr	r3, [r3, #12]
 801e9e4:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e9e6:	697b      	ldr	r3, [r7, #20]
 801e9e8:	005b      	lsls	r3, r3, #1
 801e9ea:	2203      	movs	r2, #3
 801e9ec:	409a      	lsls	r2, r3
 801e9ee:	0013      	movs	r3, r2
 801e9f0:	43da      	mvns	r2, r3
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	4013      	ands	r3, r2
 801e9f6:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	68fa      	ldr	r2, [r7, #12]
 801e9fc:	60da      	str	r2, [r3, #12]
    }
    position++;
 801e9fe:	697b      	ldr	r3, [r7, #20]
 801ea00:	3301      	adds	r3, #1
 801ea02:	617b      	str	r3, [r7, #20]
  while ((pins >> position) != 0)
 801ea04:	1cbb      	adds	r3, r7, #2
 801ea06:	881a      	ldrh	r2, [r3, #0]
 801ea08:	697b      	ldr	r3, [r7, #20]
 801ea0a:	411a      	asrs	r2, r3
 801ea0c:	1e13      	subs	r3, r2, #0
 801ea0e:	d1c5      	bne.n	801e99c <__GpioAnalog+0x1c>
  }
}
 801ea10:	46c0      	nop			; (mov r8, r8)
 801ea12:	46bd      	mov	sp, r7
 801ea14:	b006      	add	sp, #24
 801ea16:	bd80      	pop	{r7, pc}

0801ea18 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 801ea1c:	4a1f      	ldr	r2, [pc, #124]	; (801ea9c <_stm32l_disableGpios+0x84>)
 801ea1e:	23a0      	movs	r3, #160	; 0xa0
 801ea20:	05db      	lsls	r3, r3, #23
 801ea22:	0011      	movs	r1, r2
 801ea24:	0018      	movs	r0, r3
 801ea26:	f7ff ffab 	bl	801e980 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 801ea2a:	4a1d      	ldr	r2, [pc, #116]	; (801eaa0 <_stm32l_disableGpios+0x88>)
 801ea2c:	4b1d      	ldr	r3, [pc, #116]	; (801eaa4 <_stm32l_disableGpios+0x8c>)
 801ea2e:	0011      	movs	r1, r2
 801ea30:	0018      	movs	r0, r3
 801ea32:	f7ff ffa5 	bl	801e980 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 801ea36:	4a1c      	ldr	r2, [pc, #112]	; (801eaa8 <_stm32l_disableGpios+0x90>)
 801ea38:	4b1c      	ldr	r3, [pc, #112]	; (801eaac <_stm32l_disableGpios+0x94>)
 801ea3a:	0011      	movs	r1, r2
 801ea3c:	0018      	movs	r0, r3
 801ea3e:	f7ff ff9f 	bl	801e980 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_C_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOC_CLK_DISABLE();
 801ea42:	4b1b      	ldr	r3, [pc, #108]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea46:	4b1a      	ldr	r3, [pc, #104]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea48:	2104      	movs	r1, #4
 801ea4a:	438a      	bics	r2, r1
 801ea4c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 801ea4e:	4a16      	ldr	r2, [pc, #88]	; (801eaa8 <_stm32l_disableGpios+0x90>)
 801ea50:	4b18      	ldr	r3, [pc, #96]	; (801eab4 <_stm32l_disableGpios+0x9c>)
 801ea52:	0011      	movs	r1, r2
 801ea54:	0018      	movs	r0, r3
 801ea56:	f7ff ff93 	bl	801e980 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 801ea5a:	4b15      	ldr	r3, [pc, #84]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea5e:	4b14      	ldr	r3, [pc, #80]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea60:	2108      	movs	r1, #8
 801ea62:	438a      	bics	r2, r1
 801ea64:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 801ea66:	4a10      	ldr	r2, [pc, #64]	; (801eaa8 <_stm32l_disableGpios+0x90>)
 801ea68:	4b13      	ldr	r3, [pc, #76]	; (801eab8 <_stm32l_disableGpios+0xa0>)
 801ea6a:	0011      	movs	r1, r2
 801ea6c:	0018      	movs	r0, r3
 801ea6e:	f7ff ff87 	bl	801e980 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 801ea72:	4b0f      	ldr	r3, [pc, #60]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea76:	4b0e      	ldr	r3, [pc, #56]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea78:	2110      	movs	r1, #16
 801ea7a:	438a      	bics	r2, r1
 801ea7c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 801ea7e:	4a0f      	ldr	r2, [pc, #60]	; (801eabc <_stm32l_disableGpios+0xa4>)
 801ea80:	4b0f      	ldr	r3, [pc, #60]	; (801eac0 <_stm32l_disableGpios+0xa8>)
 801ea82:	0011      	movs	r1, r2
 801ea84:	0018      	movs	r0, r3
 801ea86:	f7ff ff7b 	bl	801e980 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 801ea8a:	4b09      	ldr	r3, [pc, #36]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ea8e:	4b08      	ldr	r3, [pc, #32]	; (801eab0 <_stm32l_disableGpios+0x98>)
 801ea90:	2180      	movs	r1, #128	; 0x80
 801ea92:	438a      	bics	r2, r1
 801ea94:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 801ea96:	46c0      	nop			; (mov r8, r8)
 801ea98:	46bd      	mov	sp, r7
 801ea9a:	bd80      	pop	{r7, pc}
 801ea9c:	0000e0f3 	.word	0x0000e0f3
 801eaa0:	0000ef7b 	.word	0x0000ef7b
 801eaa4:	50000400 	.word	0x50000400
 801eaa8:	0000ffff 	.word	0x0000ffff
 801eaac:	50000800 	.word	0x50000800
 801eab0:	40021000 	.word	0x40021000
 801eab4:	50000c00 	.word	0x50000c00
 801eab8:	50001000 	.word	0x50001000
 801eabc:	00000603 	.word	0x00000603
 801eac0:	50001c00 	.word	0x50001c00

0801eac4 <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 801eac4:	b580      	push	{r7, lr}
 801eac6:	b082      	sub	sp, #8
 801eac8:	af00      	add	r7, sp, #0
 801eaca:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 801eacc:	4b03      	ldr	r3, [pc, #12]	; (801eadc <HAL_UARTEx_WakeupCallback+0x18>)
 801eace:	2203      	movs	r2, #3
 801ead0:	701a      	strb	r2, [r3, #0]
}
 801ead2:	46c0      	nop			; (mov r8, r8)
 801ead4:	46bd      	mov	sp, r7
 801ead6:	b002      	add	sp, #8
 801ead8:	bd80      	pop	{r7, pc}
 801eada:	46c0      	nop			; (mov r8, r8)
 801eadc:	200000b0 	.word	0x200000b0

0801eae0 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 801eae0:	b580      	push	{r7, lr}
 801eae2:	b082      	sub	sp, #8
 801eae4:	af00      	add	r7, sp, #0
 801eae6:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 801eae8:	f000 f99a 	bl	801ee20 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d003      	beq.n	801eafa <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	0018      	movs	r0, r3
 801eaf6:	f000 f80d 	bl	801eb14 <rtc_runRtcUntil>
	}
}
 801eafa:	46c0      	nop			; (mov r8, r8)
 801eafc:	46bd      	mov	sp, r7
 801eafe:	b002      	add	sp, #8
 801eb00:	bd80      	pop	{r7, pc}

0801eb02 <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 801eb02:	b580      	push	{r7, lr}
 801eb04:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 801eb06:	f000 f85b 	bl	801ebc0 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 801eb0a:	f000 f99b 	bl	801ee44 <rtc_updateTimeAfterSleepTime>
}
 801eb0e:	46c0      	nop			; (mov r8, r8)
 801eb10:	46bd      	mov	sp, r7
 801eb12:	bd80      	pop	{r7, pc}

0801eb14 <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b084      	sub	sp, #16
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	0018      	movs	r0, r3
 801eb20:	f000 f816 	bl	801eb50 <rtc_getTicksFromDuration>
 801eb24:	0003      	movs	r3, r0
 801eb26:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	4a08      	ldr	r2, [pc, #32]	; (801eb4c <rtc_runRtcUntil+0x38>)
 801eb2c:	4293      	cmp	r3, r2
 801eb2e:	d804      	bhi.n	801eb3a <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	0018      	movs	r0, r3
 801eb34:	f000 f81c 	bl	801eb70 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 801eb38:	e003      	b.n	801eb42 <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	0018      	movs	r0, r3
 801eb3e:	f000 f827 	bl	801eb90 <rtc_runRtcUntilMs>
}
 801eb42:	46c0      	nop			; (mov r8, r8)
 801eb44:	46bd      	mov	sp, r7
 801eb46:	b004      	add	sp, #16
 801eb48:	bd80      	pop	{r7, pc}
 801eb4a:	46c0      	nop			; (mov r8, r8)
 801eb4c:	0000ffff 	.word	0x0000ffff

0801eb50 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 801eb50:	b580      	push	{r7, lr}
 801eb52:	b082      	sub	sp, #8
 801eb54:	af00      	add	r7, sp, #0
 801eb56:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	02da      	lsls	r2, r3, #11
 801eb5c:	23fa      	movs	r3, #250	; 0xfa
 801eb5e:	0099      	lsls	r1, r3, #2
 801eb60:	0010      	movs	r0, r2
 801eb62:	f7e1 fad9 	bl	8000118 <__udivsi3>
 801eb66:	0003      	movs	r3, r0
}
 801eb68:	0018      	movs	r0, r3
 801eb6a:	46bd      	mov	sp, r7
 801eb6c:	b002      	add	sp, #8
 801eb6e:	bd80      	pop	{r7, pc}

0801eb70 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b082      	sub	sp, #8
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 801eb78:	6879      	ldr	r1, [r7, #4]
 801eb7a:	4b04      	ldr	r3, [pc, #16]	; (801eb8c <rtc_runRtcUntilTicks+0x1c>)
 801eb7c:	2200      	movs	r2, #0
 801eb7e:	0018      	movs	r0, r3
 801eb80:	f7e7 fb60 	bl	8006244 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 801eb84:	46c0      	nop			; (mov r8, r8)
 801eb86:	46bd      	mov	sp, r7
 801eb88:	b002      	add	sp, #8
 801eb8a:	bd80      	pop	{r7, pc}
 801eb8c:	200013d4 	.word	0x200013d4

0801eb90 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 801eb90:	b580      	push	{r7, lr}
 801eb92:	b082      	sub	sp, #8
 801eb94:	af00      	add	r7, sp, #0
 801eb96:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 801eb98:	687a      	ldr	r2, [r7, #4]
 801eb9a:	23fa      	movs	r3, #250	; 0xfa
 801eb9c:	0099      	lsls	r1, r3, #2
 801eb9e:	0010      	movs	r0, r2
 801eba0:	f7e1 faba 	bl	8000118 <__udivsi3>
 801eba4:	0003      	movs	r3, r0
 801eba6:	0019      	movs	r1, r3
 801eba8:	4b04      	ldr	r3, [pc, #16]	; (801ebbc <rtc_runRtcUntilMs+0x2c>)
 801ebaa:	2204      	movs	r2, #4
 801ebac:	0018      	movs	r0, r3
 801ebae:	f7e7 fb49 	bl	8006244 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 801ebb2:	46c0      	nop			; (mov r8, r8)
 801ebb4:	46bd      	mov	sp, r7
 801ebb6:	b002      	add	sp, #8
 801ebb8:	bd80      	pop	{r7, pc}
 801ebba:	46c0      	nop			; (mov r8, r8)
 801ebbc:	200013d4 	.word	0x200013d4

0801ebc0 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 801ebc0:	b580      	push	{r7, lr}
 801ebc2:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 801ebc4:	4b03      	ldr	r3, [pc, #12]	; (801ebd4 <rtc_disableWakeUp+0x14>)
 801ebc6:	0018      	movs	r0, r3
 801ebc8:	f7e7 fc02 	bl	80063d0 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 801ebcc:	46c0      	nop			; (mov r8, r8)
 801ebce:	46bd      	mov	sp, r7
 801ebd0:	bd80      	pop	{r7, pc}
 801ebd2:	46c0      	nop			; (mov r8, r8)
 801ebd4:	200013d4 	.word	0x200013d4

0801ebd8 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 801ebd8:	b5b0      	push	{r4, r5, r7, lr}
 801ebda:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 801ebdc:	2001      	movs	r0, #1
 801ebde:	f000 f807 	bl	801ebf0 <rtc_getTimestampMsRaw>
 801ebe2:	0003      	movs	r3, r0
 801ebe4:	000c      	movs	r4, r1
}
 801ebe6:	0018      	movs	r0, r3
 801ebe8:	0021      	movs	r1, r4
 801ebea:	46bd      	mov	sp, r7
 801ebec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ebf0 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 801ebf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebf2:	b095      	sub	sp, #84	; 0x54
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	0003      	movs	r3, r0
 801ebf8:	222f      	movs	r2, #47	; 0x2f
 801ebfa:	18ba      	adds	r2, r7, r2
 801ebfc:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801ebfe:	210c      	movs	r1, #12
 801ec00:	000c      	movs	r4, r1
 801ec02:	2328      	movs	r3, #40	; 0x28
 801ec04:	469c      	mov	ip, r3
 801ec06:	44bc      	add	ip, r7
 801ec08:	4461      	add	r1, ip
 801ec0a:	4b61      	ldr	r3, [pc, #388]	; (801ed90 <rtc_getTimestampMsRaw+0x1a0>)
 801ec0c:	2200      	movs	r2, #0
 801ec0e:	0018      	movs	r0, r3
 801ec10:	f7e6 ff86 	bl	8005b20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 801ec14:	2308      	movs	r3, #8
 801ec16:	2028      	movs	r0, #40	; 0x28
 801ec18:	183a      	adds	r2, r7, r0
 801ec1a:	18d1      	adds	r1, r2, r3
 801ec1c:	4b5c      	ldr	r3, [pc, #368]	; (801ed90 <rtc_getTimestampMsRaw+0x1a0>)
 801ec1e:	2200      	movs	r2, #0
 801ec20:	0018      	movs	r0, r3
 801ec22:	f7e7 f887 	bl	8005d34 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 801ec26:	0021      	movs	r1, r4
 801ec28:	2028      	movs	r0, #40	; 0x28
 801ec2a:	183b      	adds	r3, r7, r0
 801ec2c:	185b      	adds	r3, r3, r1
 801ec2e:	781b      	ldrb	r3, [r3, #0]
 801ec30:	001a      	movs	r2, r3
 801ec32:	4b58      	ldr	r3, [pc, #352]	; (801ed94 <rtc_getTimestampMsRaw+0x1a4>)
 801ec34:	4353      	muls	r3, r2
 801ec36:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec38:	2300      	movs	r3, #0
 801ec3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 801ec3c:	183a      	adds	r2, r7, r0
 801ec3e:	1853      	adds	r3, r2, r1
 801ec40:	785b      	ldrb	r3, [r3, #1]
 801ec42:	001a      	movs	r2, r3
 801ec44:	4b54      	ldr	r3, [pc, #336]	; (801ed98 <rtc_getTimestampMsRaw+0x1a8>)
 801ec46:	4353      	muls	r3, r2
 801ec48:	623b      	str	r3, [r7, #32]
 801ec4a:	2300      	movs	r3, #0
 801ec4c:	627b      	str	r3, [r7, #36]	; 0x24
 801ec4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ec50:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ec52:	6a38      	ldr	r0, [r7, #32]
 801ec54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec56:	181b      	adds	r3, r3, r0
 801ec58:	414c      	adcs	r4, r1
 801ec5a:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec5c:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 801ec5e:	210c      	movs	r1, #12
 801ec60:	0008      	movs	r0, r1
 801ec62:	2328      	movs	r3, #40	; 0x28
 801ec64:	18fa      	adds	r2, r7, r3
 801ec66:	1853      	adds	r3, r2, r1
 801ec68:	789b      	ldrb	r3, [r3, #2]
 801ec6a:	001a      	movs	r2, r3
 801ec6c:	0013      	movs	r3, r2
 801ec6e:	015b      	lsls	r3, r3, #5
 801ec70:	1a9b      	subs	r3, r3, r2
 801ec72:	009b      	lsls	r3, r3, #2
 801ec74:	189b      	adds	r3, r3, r2
 801ec76:	00db      	lsls	r3, r3, #3
 801ec78:	61bb      	str	r3, [r7, #24]
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	61fb      	str	r3, [r7, #28]
 801ec7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ec80:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ec82:	69b9      	ldr	r1, [r7, #24]
 801ec84:	69fa      	ldr	r2, [r7, #28]
 801ec86:	185b      	adds	r3, r3, r1
 801ec88:	4154      	adcs	r4, r2
 801ec8a:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec8c:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 801ec8e:	0001      	movs	r1, r0
 801ec90:	2028      	movs	r0, #40	; 0x28
 801ec92:	183b      	adds	r3, r7, r0
 801ec94:	185b      	adds	r3, r3, r1
 801ec96:	689a      	ldr	r2, [r3, #8]
 801ec98:	183b      	adds	r3, r7, r0
 801ec9a:	185b      	adds	r3, r3, r1
 801ec9c:	685b      	ldr	r3, [r3, #4]
 801ec9e:	1ad2      	subs	r2, r2, r3
 801eca0:	0013      	movs	r3, r2
 801eca2:	015b      	lsls	r3, r3, #5
 801eca4:	1a9b      	subs	r3, r3, r2
 801eca6:	009b      	lsls	r3, r3, #2
 801eca8:	189b      	adds	r3, r3, r2
 801ecaa:	00db      	lsls	r3, r3, #3
 801ecac:	001a      	movs	r2, r3
 801ecae:	183b      	adds	r3, r7, r0
 801ecb0:	185b      	adds	r3, r3, r1
 801ecb2:	689b      	ldr	r3, [r3, #8]
 801ecb4:	0019      	movs	r1, r3
 801ecb6:	0010      	movs	r0, r2
 801ecb8:	f7e1 fa2e 	bl	8000118 <__udivsi3>
 801ecbc:	0003      	movs	r3, r0
 801ecbe:	3301      	adds	r3, #1
 801ecc0:	613b      	str	r3, [r7, #16]
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	617b      	str	r3, [r7, #20]
 801ecc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecc8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ecca:	6939      	ldr	r1, [r7, #16]
 801eccc:	697a      	ldr	r2, [r7, #20]
 801ecce:	185b      	adds	r3, r3, r1
 801ecd0:	4154      	adcs	r4, r2
 801ecd2:	64bb      	str	r3, [r7, #72]	; 0x48
 801ecd4:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 801ecd6:	4b31      	ldr	r3, [pc, #196]	; (801ed9c <rtc_getTimestampMsRaw+0x1ac>)
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	001d      	movs	r5, r3
 801ecdc:	2300      	movs	r3, #0
 801ecde:	001e      	movs	r6, r3
 801ece0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ece2:	42b3      	cmp	r3, r6
 801ece4:	d305      	bcc.n	801ecf2 <rtc_getTimestampMsRaw+0x102>
 801ece6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ece8:	42b3      	cmp	r3, r6
 801ecea:	d107      	bne.n	801ecfc <rtc_getTimestampMsRaw+0x10c>
 801ecec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecee:	42ab      	cmp	r3, r5
 801ecf0:	d204      	bcs.n	801ecfc <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 801ecf2:	4b2b      	ldr	r3, [pc, #172]	; (801eda0 <rtc_getTimestampMsRaw+0x1b0>)
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	1c5a      	adds	r2, r3, #1
 801ecf8:	4b29      	ldr	r3, [pc, #164]	; (801eda0 <rtc_getTimestampMsRaw+0x1b0>)
 801ecfa:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 801ecfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ecfe:	4b27      	ldr	r3, [pc, #156]	; (801ed9c <rtc_getTimestampMsRaw+0x1ac>)
 801ed00:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 801ed02:	4b27      	ldr	r3, [pc, #156]	; (801eda0 <rtc_getTimestampMsRaw+0x1b0>)
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	60bb      	str	r3, [r7, #8]
 801ed08:	2300      	movs	r3, #0
 801ed0a:	60fb      	str	r3, [r7, #12]
 801ed0c:	4a25      	ldr	r2, [pc, #148]	; (801eda4 <rtc_getTimestampMsRaw+0x1b4>)
 801ed0e:	2300      	movs	r3, #0
 801ed10:	68b8      	ldr	r0, [r7, #8]
 801ed12:	68f9      	ldr	r1, [r7, #12]
 801ed14:	f7e1 fbf8 	bl	8000508 <__aeabi_lmul>
 801ed18:	0003      	movs	r3, r0
 801ed1a:	000c      	movs	r4, r1
 801ed1c:	0019      	movs	r1, r3
 801ed1e:	0022      	movs	r2, r4
 801ed20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed22:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801ed24:	185b      	adds	r3, r3, r1
 801ed26:	4154      	adcs	r4, r2
 801ed28:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed2a:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 801ed2c:	232f      	movs	r3, #47	; 0x2f
 801ed2e:	18fb      	adds	r3, r7, r3
 801ed30:	781b      	ldrb	r3, [r3, #0]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d024      	beq.n	801ed80 <rtc_getTimestampMsRaw+0x190>
 801ed36:	4b1c      	ldr	r3, [pc, #112]	; (801eda8 <rtc_getTimestampMsRaw+0x1b8>)
 801ed38:	781b      	ldrb	r3, [r3, #0]
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d020      	beq.n	801ed80 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 801ed3e:	4b1b      	ldr	r3, [pc, #108]	; (801edac <rtc_getTimestampMsRaw+0x1bc>)
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	603b      	str	r3, [r7, #0]
 801ed44:	2300      	movs	r3, #0
 801ed46:	607b      	str	r3, [r7, #4]
 801ed48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed4c:	6838      	ldr	r0, [r7, #0]
 801ed4e:	6879      	ldr	r1, [r7, #4]
 801ed50:	f7e1 fbda 	bl	8000508 <__aeabi_lmul>
 801ed54:	0003      	movs	r3, r0
 801ed56:	000c      	movs	r4, r1
 801ed58:	0018      	movs	r0, r3
 801ed5a:	0021      	movs	r1, r4
 801ed5c:	22fa      	movs	r2, #250	; 0xfa
 801ed5e:	0092      	lsls	r2, r2, #2
 801ed60:	2300      	movs	r3, #0
 801ed62:	f7e1 fbb1 	bl	80004c8 <__aeabi_uldivmod>
 801ed66:	0003      	movs	r3, r0
 801ed68:	000c      	movs	r4, r1
 801ed6a:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed6c:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 801ed6e:	4b10      	ldr	r3, [pc, #64]	; (801edb0 <rtc_getTimestampMsRaw+0x1c0>)
 801ed70:	685c      	ldr	r4, [r3, #4]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801ed76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ed78:	185b      	adds	r3, r3, r1
 801ed7a:	4154      	adcs	r4, r2
 801ed7c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed7e:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 801ed80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed82:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 801ed84:	0018      	movs	r0, r3
 801ed86:	0021      	movs	r1, r4
 801ed88:	46bd      	mov	sp, r7
 801ed8a:	b015      	add	sp, #84	; 0x54
 801ed8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed8e:	46c0      	nop			; (mov r8, r8)
 801ed90:	200013d4 	.word	0x200013d4
 801ed94:	0036ee80 	.word	0x0036ee80
 801ed98:	0000ea60 	.word	0x0000ea60
 801ed9c:	200012d8 	.word	0x200012d8
 801eda0:	200012d4 	.word	0x200012d4
 801eda4:	05265c00 	.word	0x05265c00
 801eda8:	200012d0 	.word	0x200012d0
 801edac:	20001760 	.word	0x20001760
 801edb0:	20001768 	.word	0x20001768

0801edb4 <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 801edb4:	b580      	push	{r7, lr}
 801edb6:	b086      	sub	sp, #24
 801edb8:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 801edba:	2114      	movs	r1, #20
 801edbc:	187b      	adds	r3, r7, r1
 801edbe:	2200      	movs	r2, #0
 801edc0:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 801edc2:	187b      	adds	r3, r7, r1
 801edc4:	2201      	movs	r2, #1
 801edc6:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 801edc8:	187b      	adds	r3, r7, r1
 801edca:	2201      	movs	r2, #1
 801edcc:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 801edce:	1879      	adds	r1, r7, r1
 801edd0:	4b11      	ldr	r3, [pc, #68]	; (801ee18 <rtc_resetTime+0x64>)
 801edd2:	2200      	movs	r2, #0
 801edd4:	0018      	movs	r0, r3
 801edd6:	f7e6 feff 	bl	8005bd8 <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 801edda:	003b      	movs	r3, r7
 801eddc:	2200      	movs	r2, #0
 801edde:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 801ede0:	003b      	movs	r3, r7
 801ede2:	2200      	movs	r2, #0
 801ede4:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 801ede6:	003b      	movs	r3, r7
 801ede8:	2200      	movs	r2, #0
 801edea:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 801edec:	003b      	movs	r3, r7
 801edee:	2200      	movs	r2, #0
 801edf0:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801edf2:	003b      	movs	r3, r7
 801edf4:	2200      	movs	r2, #0
 801edf6:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 801edf8:	003b      	movs	r3, r7
 801edfa:	2200      	movs	r2, #0
 801edfc:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801edfe:	0039      	movs	r1, r7
 801ee00:	4b05      	ldr	r3, [pc, #20]	; (801ee18 <rtc_resetTime+0x64>)
 801ee02:	2200      	movs	r2, #0
 801ee04:	0018      	movs	r0, r3
 801ee06:	f7e6 fdc7 	bl	8005998 <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 801ee0a:	4b04      	ldr	r3, [pc, #16]	; (801ee1c <rtc_resetTime+0x68>)
 801ee0c:	2200      	movs	r2, #0
 801ee0e:	601a      	str	r2, [r3, #0]
}
 801ee10:	46c0      	nop			; (mov r8, r8)
 801ee12:	46bd      	mov	sp, r7
 801ee14:	b006      	add	sp, #24
 801ee16:	bd80      	pop	{r7, pc}
 801ee18:	200013d4 	.word	0x200013d4
 801ee1c:	200012d8 	.word	0x200012d8

0801ee20 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 801ee20:	b580      	push	{r7, lr}
 801ee22:	af00      	add	r7, sp, #0
	__enable_systick=false;
 801ee24:	4b05      	ldr	r3, [pc, #20]	; (801ee3c <rtc_prepareSleepTime+0x1c>)
 801ee26:	2200      	movs	r2, #0
 801ee28:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801ee2a:	4b05      	ldr	r3, [pc, #20]	; (801ee40 <rtc_prepareSleepTime+0x20>)
 801ee2c:	681a      	ldr	r2, [r3, #0]
 801ee2e:	4b04      	ldr	r3, [pc, #16]	; (801ee40 <rtc_prepareSleepTime+0x20>)
 801ee30:	2104      	movs	r1, #4
 801ee32:	430a      	orrs	r2, r1
 801ee34:	601a      	str	r2, [r3, #0]
}
 801ee36:	46c0      	nop			; (mov r8, r8)
 801ee38:	46bd      	mov	sp, r7
 801ee3a:	bd80      	pop	{r7, pc}
 801ee3c:	200000b1 	.word	0x200000b1
 801ee40:	40007000 	.word	0x40007000

0801ee44 <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 801ee44:	b5b0      	push	{r4, r5, r7, lr}
 801ee46:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 801ee48:	f7ff fec6 	bl	801ebd8 <rtc_getTimestampMs>
 801ee4c:	0003      	movs	r3, r0
 801ee4e:	000c      	movs	r4, r1
 801ee50:	0018      	movs	r0, r3
 801ee52:	0021      	movs	r1, r4
 801ee54:	f7fe f910 	bl	801d078 <itsdk_time_set_ms>
	__enable_systick=true;
 801ee58:	4b02      	ldr	r3, [pc, #8]	; (801ee64 <rtc_updateTimeAfterSleepTime+0x20>)
 801ee5a:	2201      	movs	r2, #1
 801ee5c:	701a      	strb	r2, [r3, #0]
}
 801ee5e:	46c0      	nop			; (mov r8, r8)
 801ee60:	46bd      	mov	sp, r7
 801ee62:	bdb0      	pop	{r4, r5, r7, pc}
 801ee64:	200000b1 	.word	0x200000b1

0801ee68 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801ee68:	b580      	push	{r7, lr}
 801ee6a:	b084      	sub	sp, #16
 801ee6c:	af00      	add	r7, sp, #0
 801ee6e:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 801ee70:	4b0f      	ldr	r3, [pc, #60]	; (801eeb0 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 801ee72:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801ee74:	e00c      	b.n	801ee90 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 801ee7c:	68bb      	ldr	r3, [r7, #8]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d003      	beq.n	801ee8a <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 801ee82:	687a      	ldr	r2, [r7, #4]
 801ee84:	68bb      	ldr	r3, [r7, #8]
 801ee86:	0010      	movs	r0, r2
 801ee88:	4798      	blx	r3
		}
		c = c->next;
 801ee8a:	68fb      	ldr	r3, [r7, #12]
 801ee8c:	685b      	ldr	r3, [r3, #4]
 801ee8e:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801ee90:	68fb      	ldr	r3, [r7, #12]
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d1ef      	bne.n	801ee76 <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801ee96:	4b07      	ldr	r3, [pc, #28]	; (801eeb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801ee98:	681a      	ldr	r2, [r3, #0]
 801ee9a:	4b06      	ldr	r3, [pc, #24]	; (801eeb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801ee9c:	2104      	movs	r1, #4
 801ee9e:	430a      	orrs	r2, r1
 801eea0:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 801eea2:	4b05      	ldr	r3, [pc, #20]	; (801eeb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 801eea4:	2200      	movs	r2, #0
 801eea6:	701a      	strb	r2, [r3, #0]
}
 801eea8:	46c0      	nop			; (mov r8, r8)
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	b004      	add	sp, #16
 801eeae:	bd80      	pop	{r7, pc}
 801eeb0:	200012dc 	.word	0x200012dc
 801eeb4:	40007000 	.word	0x40007000
 801eeb8:	200000b0 	.word	0x200000b0

0801eebc <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 801eebc:	b590      	push	{r4, r7, lr}
 801eebe:	b083      	sub	sp, #12
 801eec0:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 801eec2:	f000 f825 	bl	801ef10 <rtc_calcClockRatio>
 801eec6:	0003      	movs	r3, r0
 801eec8:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 801eeca:	4b0e      	ldr	r3, [pc, #56]	; (801ef04 <rtc_adjustTime+0x48>)
 801eecc:	781b      	ldrb	r3, [r3, #0]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d009      	beq.n	801eee6 <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 801eed2:	f7ff fe81 	bl	801ebd8 <rtc_getTimestampMs>
 801eed6:	0003      	movs	r3, r0
 801eed8:	000c      	movs	r4, r1
 801eeda:	4a0b      	ldr	r2, [pc, #44]	; (801ef08 <rtc_adjustTime+0x4c>)
 801eedc:	6013      	str	r3, [r2, #0]
 801eede:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 801eee0:	f7ff ff68 	bl	801edb4 <rtc_resetTime>
 801eee4:	e004      	b.n	801eef0 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 801eee6:	4a08      	ldr	r2, [pc, #32]	; (801ef08 <rtc_adjustTime+0x4c>)
 801eee8:	2300      	movs	r3, #0
 801eeea:	2400      	movs	r4, #0
 801eeec:	6013      	str	r3, [r2, #0]
 801eeee:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 801eef0:	4b04      	ldr	r3, [pc, #16]	; (801ef04 <rtc_adjustTime+0x48>)
 801eef2:	2201      	movs	r2, #1
 801eef4:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 801eef6:	4b05      	ldr	r3, [pc, #20]	; (801ef0c <rtc_adjustTime+0x50>)
 801eef8:	687a      	ldr	r2, [r7, #4]
 801eefa:	601a      	str	r2, [r3, #0]
#endif
}
 801eefc:	46c0      	nop			; (mov r8, r8)
 801eefe:	46bd      	mov	sp, r7
 801ef00:	b003      	add	sp, #12
 801ef02:	bd90      	pop	{r4, r7, pc}
 801ef04:	200012d0 	.word	0x200012d0
 801ef08:	20001768 	.word	0x20001768
 801ef0c:	20001760 	.word	0x20001760

0801ef10 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 801ef10:	b580      	push	{r7, lr}
 801ef12:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 801ef14:	23fa      	movs	r3, #250	; 0xfa
 801ef16:	009b      	lsls	r3, r3, #2
#endif
}
 801ef18:	0018      	movs	r0, r3
 801ef1a:	46bd      	mov	sp, r7
 801ef1c:	bd80      	pop	{r7, pc}
	...

0801ef20 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 801ef20:	b580      	push	{r7, lr}
 801ef22:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 801ef24:	4b10      	ldr	r3, [pc, #64]	; (801ef68 <HAL_IncTick+0x48>)
 801ef26:	781b      	ldrb	r3, [r3, #0]
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d011      	beq.n	801ef50 <HAL_IncTick+0x30>
 801ef2c:	4b0f      	ldr	r3, [pc, #60]	; (801ef6c <HAL_IncTick+0x4c>)
 801ef2e:	681a      	ldr	r2, [r3, #0]
 801ef30:	0013      	movs	r3, r2
 801ef32:	015b      	lsls	r3, r3, #5
 801ef34:	1a9b      	subs	r3, r3, r2
 801ef36:	009b      	lsls	r3, r3, #2
 801ef38:	189b      	adds	r3, r3, r2
 801ef3a:	009b      	lsls	r3, r3, #2
 801ef3c:	001a      	movs	r2, r3
 801ef3e:	23fa      	movs	r3, #250	; 0xfa
 801ef40:	0099      	lsls	r1, r3, #2
 801ef42:	0010      	movs	r0, r2
 801ef44:	f7e1 f8e8 	bl	8000118 <__udivsi3>
 801ef48:	0003      	movs	r3, r0
 801ef4a:	0018      	movs	r0, r3
 801ef4c:	f7fe f846 	bl	801cfdc <itsdk_time_add_us>
	uwTick++;
 801ef50:	4b07      	ldr	r3, [pc, #28]	; (801ef70 <HAL_IncTick+0x50>)
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	1c5a      	adds	r2, r3, #1
 801ef56:	4b06      	ldr	r3, [pc, #24]	; (801ef70 <HAL_IncTick+0x50>)
 801ef58:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 801ef5a:	4b06      	ldr	r3, [pc, #24]	; (801ef74 <HAL_IncTick+0x54>)
 801ef5c:	2202      	movs	r2, #2
 801ef5e:	701a      	strb	r2, [r3, #0]
}
 801ef60:	46c0      	nop			; (mov r8, r8)
 801ef62:	46bd      	mov	sp, r7
 801ef64:	bd80      	pop	{r7, pc}
 801ef66:	46c0      	nop			; (mov r8, r8)
 801ef68:	200000b1 	.word	0x200000b1
 801ef6c:	200000b4 	.word	0x200000b4
 801ef70:	20001564 	.word	0x20001564
 801ef74:	200000b0 	.word	0x200000b0

0801ef78 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 801ef78:	b590      	push	{r4, r7, lr}
 801ef7a:	b089      	sub	sp, #36	; 0x24
 801ef7c:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 801ef7e:	f7fe f8c7 	bl	801d110 <itsdk_time_get_us>
 801ef82:	22fa      	movs	r2, #250	; 0xfa
 801ef84:	0092      	lsls	r2, r2, #2
 801ef86:	2300      	movs	r3, #0
 801ef88:	f7e1 fa9e 	bl	80004c8 <__aeabi_uldivmod>
 801ef8c:	0003      	movs	r3, r0
 801ef8e:	000c      	movs	r4, r1
 801ef90:	613b      	str	r3, [r7, #16]
 801ef92:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 801ef94:	2000      	movs	r0, #0
 801ef96:	f7ff fe2b 	bl	801ebf0 <rtc_getTimestampMsRaw>
 801ef9a:	0003      	movs	r3, r0
 801ef9c:	000c      	movs	r4, r1
 801ef9e:	60bb      	str	r3, [r7, #8]
 801efa0:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 801efa2:	46c0      	nop			; (mov r8, r8)
 801efa4:	2000      	movs	r0, #0
 801efa6:	f7ff fe23 	bl	801ebf0 <rtc_getTimestampMsRaw>
 801efaa:	000a      	movs	r2, r1
 801efac:	0001      	movs	r1, r0
 801efae:	68bb      	ldr	r3, [r7, #8]
 801efb0:	68fc      	ldr	r4, [r7, #12]
 801efb2:	1ac9      	subs	r1, r1, r3
 801efb4:	41a2      	sbcs	r2, r4
 801efb6:	000b      	movs	r3, r1
 801efb8:	0014      	movs	r4, r2
 801efba:	2c00      	cmp	r4, #0
 801efbc:	d103      	bne.n	801efc6 <systick_adjustTime+0x4e>
 801efbe:	d1f1      	bne.n	801efa4 <systick_adjustTime+0x2c>
 801efc0:	2bc7      	cmp	r3, #199	; 0xc7
 801efc2:	d800      	bhi.n	801efc6 <systick_adjustTime+0x4e>
 801efc4:	e7ee      	b.n	801efa4 <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 801efc6:	f7fe f8a3 	bl	801d110 <itsdk_time_get_us>
 801efca:	22fa      	movs	r2, #250	; 0xfa
 801efcc:	0092      	lsls	r2, r2, #2
 801efce:	2300      	movs	r3, #0
 801efd0:	f7e1 fa7a 	bl	80004c8 <__aeabi_uldivmod>
 801efd4:	0003      	movs	r3, r0
 801efd6:	000c      	movs	r4, r1
 801efd8:	603b      	str	r3, [r7, #0]
 801efda:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 801efdc:	6839      	ldr	r1, [r7, #0]
 801efde:	687a      	ldr	r2, [r7, #4]
 801efe0:	693b      	ldr	r3, [r7, #16]
 801efe2:	697c      	ldr	r4, [r7, #20]
 801efe4:	1ac9      	subs	r1, r1, r3
 801efe6:	41a2      	sbcs	r2, r4
 801efe8:	000b      	movs	r3, r1
 801efea:	0014      	movs	r4, r2
 801efec:	001a      	movs	r2, r3
 801efee:	0023      	movs	r3, r4
 801eff0:	4818      	ldr	r0, [pc, #96]	; (801f054 <systick_adjustTime+0xdc>)
 801eff2:	2100      	movs	r1, #0
 801eff4:	f7e1 fa68 	bl	80004c8 <__aeabi_uldivmod>
 801eff8:	0003      	movs	r3, r0
 801effa:	000c      	movs	r4, r1
 801effc:	61bb      	str	r3, [r7, #24]
 801effe:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 801f000:	69fb      	ldr	r3, [r7, #28]
 801f002:	2b00      	cmp	r3, #0
 801f004:	d111      	bne.n	801f02a <systick_adjustTime+0xb2>
 801f006:	69fb      	ldr	r3, [r7, #28]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d104      	bne.n	801f016 <systick_adjustTime+0x9e>
 801f00c:	69ba      	ldr	r2, [r7, #24]
 801f00e:	23af      	movs	r3, #175	; 0xaf
 801f010:	00db      	lsls	r3, r3, #3
 801f012:	429a      	cmp	r2, r3
 801f014:	d809      	bhi.n	801f02a <systick_adjustTime+0xb2>
 801f016:	69fb      	ldr	r3, [r7, #28]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d113      	bne.n	801f044 <systick_adjustTime+0xcc>
 801f01c:	69fb      	ldr	r3, [r7, #28]
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d103      	bne.n	801f02a <systick_adjustTime+0xb2>
 801f022:	69bb      	ldr	r3, [r7, #24]
 801f024:	4a0c      	ldr	r2, [pc, #48]	; (801f058 <systick_adjustTime+0xe0>)
 801f026:	4293      	cmp	r3, r2
 801f028:	d80c      	bhi.n	801f044 <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 801f02a:	69bb      	ldr	r3, [r7, #24]
 801f02c:	69fc      	ldr	r4, [r7, #28]
 801f02e:	b29b      	uxth	r3, r3
 801f030:	4a0a      	ldr	r2, [pc, #40]	; (801f05c <systick_adjustTime+0xe4>)
 801f032:	0019      	movs	r1, r3
 801f034:	0010      	movs	r0, r2
 801f036:	f7fc fd97 	bl	801bb68 <itsdk_error_report>
		ratio = 1000;
 801f03a:	23fa      	movs	r3, #250	; 0xfa
 801f03c:	009b      	lsls	r3, r3, #2
 801f03e:	2400      	movs	r4, #0
 801f040:	61bb      	str	r3, [r7, #24]
 801f042:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 801f044:	69ba      	ldr	r2, [r7, #24]
 801f046:	4b06      	ldr	r3, [pc, #24]	; (801f060 <systick_adjustTime+0xe8>)
 801f048:	601a      	str	r2, [r3, #0]
#endif
}
 801f04a:	46c0      	nop			; (mov r8, r8)
 801f04c:	46bd      	mov	sp, r7
 801f04e:	b009      	add	sp, #36	; 0x24
 801f050:	bd90      	pop	{r4, r7, pc}
 801f052:	46c0      	nop			; (mov r8, r8)
 801f054:	00030d40 	.word	0x00030d40
 801f058:	00000257 	.word	0x00000257
 801f05c:	90000061 	.word	0x90000061
 801f060:	200000b4 	.word	0x200000b4

0801f064 <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 801f064:	b590      	push	{r4, r7, lr}
 801f066:	b087      	sub	sp, #28
 801f068:	af02      	add	r7, sp, #8
 801f06a:	60f8      	str	r0, [r7, #12]
 801f06c:	60b9      	str	r1, [r7, #8]
 801f06e:	607a      	str	r2, [r7, #4]
 801f070:	001a      	movs	r2, r3
 801f072:	1cfb      	adds	r3, r7, #3
 801f074:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 801f076:	1cfb      	adds	r3, r7, #3
 801f078:	781b      	ldrb	r3, [r3, #0]
 801f07a:	b29c      	uxth	r4, r3
 801f07c:	687a      	ldr	r2, [r7, #4]
 801f07e:	68b9      	ldr	r1, [r7, #8]
 801f080:	68f8      	ldr	r0, [r7, #12]
 801f082:	2364      	movs	r3, #100	; 0x64
 801f084:	9300      	str	r3, [sp, #0]
 801f086:	0023      	movs	r3, r4
 801f088:	f7e7 faa0 	bl	80065cc <HAL_SPI_TransmitReceive>
 801f08c:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 801f08e:	0018      	movs	r0, r3
 801f090:	46bd      	mov	sp, r7
 801f092:	b005      	add	sp, #20
 801f094:	bd90      	pop	{r4, r7, pc}

0801f096 <bcopy>:
 801f096:	000b      	movs	r3, r1
 801f098:	b510      	push	{r4, lr}
 801f09a:	0001      	movs	r1, r0
 801f09c:	0018      	movs	r0, r3
 801f09e:	f000 f83a 	bl	801f116 <memmove>
 801f0a2:	bd10      	pop	{r4, pc}

0801f0a4 <bzero>:
 801f0a4:	b510      	push	{r4, lr}
 801f0a6:	000a      	movs	r2, r1
 801f0a8:	2100      	movs	r1, #0
 801f0aa:	f000 f847 	bl	801f13c <memset>
 801f0ae:	bd10      	pop	{r4, pc}

0801f0b0 <__errno>:
 801f0b0:	4b01      	ldr	r3, [pc, #4]	; (801f0b8 <__errno+0x8>)
 801f0b2:	6818      	ldr	r0, [r3, #0]
 801f0b4:	4770      	bx	lr
 801f0b6:	46c0      	nop			; (mov r8, r8)
 801f0b8:	200000b8 	.word	0x200000b8

0801f0bc <__libc_init_array>:
 801f0bc:	b570      	push	{r4, r5, r6, lr}
 801f0be:	2600      	movs	r6, #0
 801f0c0:	4d0c      	ldr	r5, [pc, #48]	; (801f0f4 <__libc_init_array+0x38>)
 801f0c2:	4c0d      	ldr	r4, [pc, #52]	; (801f0f8 <__libc_init_array+0x3c>)
 801f0c4:	1b64      	subs	r4, r4, r5
 801f0c6:	10a4      	asrs	r4, r4, #2
 801f0c8:	42a6      	cmp	r6, r4
 801f0ca:	d109      	bne.n	801f0e0 <__libc_init_array+0x24>
 801f0cc:	2600      	movs	r6, #0
 801f0ce:	f001 faaf 	bl	8020630 <_init>
 801f0d2:	4d0a      	ldr	r5, [pc, #40]	; (801f0fc <__libc_init_array+0x40>)
 801f0d4:	4c0a      	ldr	r4, [pc, #40]	; (801f100 <__libc_init_array+0x44>)
 801f0d6:	1b64      	subs	r4, r4, r5
 801f0d8:	10a4      	asrs	r4, r4, #2
 801f0da:	42a6      	cmp	r6, r4
 801f0dc:	d105      	bne.n	801f0ea <__libc_init_array+0x2e>
 801f0de:	bd70      	pop	{r4, r5, r6, pc}
 801f0e0:	00b3      	lsls	r3, r6, #2
 801f0e2:	58eb      	ldr	r3, [r5, r3]
 801f0e4:	4798      	blx	r3
 801f0e6:	3601      	adds	r6, #1
 801f0e8:	e7ee      	b.n	801f0c8 <__libc_init_array+0xc>
 801f0ea:	00b3      	lsls	r3, r6, #2
 801f0ec:	58eb      	ldr	r3, [r5, r3]
 801f0ee:	4798      	blx	r3
 801f0f0:	3601      	adds	r6, #1
 801f0f2:	e7f2      	b.n	801f0da <__libc_init_array+0x1e>
 801f0f4:	080225bc 	.word	0x080225bc
 801f0f8:	080225bc 	.word	0x080225bc
 801f0fc:	080225bc 	.word	0x080225bc
 801f100:	080225c0 	.word	0x080225c0

0801f104 <memcpy>:
 801f104:	2300      	movs	r3, #0
 801f106:	b510      	push	{r4, lr}
 801f108:	429a      	cmp	r2, r3
 801f10a:	d100      	bne.n	801f10e <memcpy+0xa>
 801f10c:	bd10      	pop	{r4, pc}
 801f10e:	5ccc      	ldrb	r4, [r1, r3]
 801f110:	54c4      	strb	r4, [r0, r3]
 801f112:	3301      	adds	r3, #1
 801f114:	e7f8      	b.n	801f108 <memcpy+0x4>

0801f116 <memmove>:
 801f116:	b510      	push	{r4, lr}
 801f118:	4288      	cmp	r0, r1
 801f11a:	d902      	bls.n	801f122 <memmove+0xc>
 801f11c:	188b      	adds	r3, r1, r2
 801f11e:	4298      	cmp	r0, r3
 801f120:	d303      	bcc.n	801f12a <memmove+0x14>
 801f122:	2300      	movs	r3, #0
 801f124:	e007      	b.n	801f136 <memmove+0x20>
 801f126:	5c8b      	ldrb	r3, [r1, r2]
 801f128:	5483      	strb	r3, [r0, r2]
 801f12a:	3a01      	subs	r2, #1
 801f12c:	d2fb      	bcs.n	801f126 <memmove+0x10>
 801f12e:	bd10      	pop	{r4, pc}
 801f130:	5ccc      	ldrb	r4, [r1, r3]
 801f132:	54c4      	strb	r4, [r0, r3]
 801f134:	3301      	adds	r3, #1
 801f136:	429a      	cmp	r2, r3
 801f138:	d1fa      	bne.n	801f130 <memmove+0x1a>
 801f13a:	e7f8      	b.n	801f12e <memmove+0x18>

0801f13c <memset>:
 801f13c:	0003      	movs	r3, r0
 801f13e:	1812      	adds	r2, r2, r0
 801f140:	4293      	cmp	r3, r2
 801f142:	d100      	bne.n	801f146 <memset+0xa>
 801f144:	4770      	bx	lr
 801f146:	7019      	strb	r1, [r3, #0]
 801f148:	3301      	adds	r3, #1
 801f14a:	e7f9      	b.n	801f140 <memset+0x4>

0801f14c <siscanf>:
 801f14c:	b40e      	push	{r1, r2, r3}
 801f14e:	2381      	movs	r3, #129	; 0x81
 801f150:	b570      	push	{r4, r5, r6, lr}
 801f152:	b09d      	sub	sp, #116	; 0x74
 801f154:	ac02      	add	r4, sp, #8
 801f156:	ad21      	add	r5, sp, #132	; 0x84
 801f158:	009b      	lsls	r3, r3, #2
 801f15a:	cd40      	ldmia	r5!, {r6}
 801f15c:	81a3      	strh	r3, [r4, #12]
 801f15e:	9002      	str	r0, [sp, #8]
 801f160:	9006      	str	r0, [sp, #24]
 801f162:	f7e0 ffd1 	bl	8000108 <strlen>
 801f166:	4b0b      	ldr	r3, [pc, #44]	; (801f194 <siscanf+0x48>)
 801f168:	6060      	str	r0, [r4, #4]
 801f16a:	6263      	str	r3, [r4, #36]	; 0x24
 801f16c:	2300      	movs	r3, #0
 801f16e:	6160      	str	r0, [r4, #20]
 801f170:	4809      	ldr	r0, [pc, #36]	; (801f198 <siscanf+0x4c>)
 801f172:	6363      	str	r3, [r4, #52]	; 0x34
 801f174:	64a3      	str	r3, [r4, #72]	; 0x48
 801f176:	3b01      	subs	r3, #1
 801f178:	81e3      	strh	r3, [r4, #14]
 801f17a:	0032      	movs	r2, r6
 801f17c:	002b      	movs	r3, r5
 801f17e:	0021      	movs	r1, r4
 801f180:	6800      	ldr	r0, [r0, #0]
 801f182:	9501      	str	r5, [sp, #4]
 801f184:	f000 fa00 	bl	801f588 <__ssvfiscanf_r>
 801f188:	b01d      	add	sp, #116	; 0x74
 801f18a:	bc70      	pop	{r4, r5, r6}
 801f18c:	bc08      	pop	{r3}
 801f18e:	b003      	add	sp, #12
 801f190:	4718      	bx	r3
 801f192:	46c0      	nop			; (mov r8, r8)
 801f194:	0801f19d 	.word	0x0801f19d
 801f198:	200000b8 	.word	0x200000b8

0801f19c <__seofread>:
 801f19c:	2000      	movs	r0, #0
 801f19e:	4770      	bx	lr

0801f1a0 <_vsniprintf_r>:
 801f1a0:	b530      	push	{r4, r5, lr}
 801f1a2:	0014      	movs	r4, r2
 801f1a4:	b09b      	sub	sp, #108	; 0x6c
 801f1a6:	0005      	movs	r5, r0
 801f1a8:	001a      	movs	r2, r3
 801f1aa:	2c00      	cmp	r4, #0
 801f1ac:	da05      	bge.n	801f1ba <_vsniprintf_r+0x1a>
 801f1ae:	238b      	movs	r3, #139	; 0x8b
 801f1b0:	6003      	str	r3, [r0, #0]
 801f1b2:	2001      	movs	r0, #1
 801f1b4:	4240      	negs	r0, r0
 801f1b6:	b01b      	add	sp, #108	; 0x6c
 801f1b8:	bd30      	pop	{r4, r5, pc}
 801f1ba:	2382      	movs	r3, #130	; 0x82
 801f1bc:	4668      	mov	r0, sp
 801f1be:	009b      	lsls	r3, r3, #2
 801f1c0:	8183      	strh	r3, [r0, #12]
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	9100      	str	r1, [sp, #0]
 801f1c6:	9104      	str	r1, [sp, #16]
 801f1c8:	429c      	cmp	r4, r3
 801f1ca:	d000      	beq.n	801f1ce <_vsniprintf_r+0x2e>
 801f1cc:	1e63      	subs	r3, r4, #1
 801f1ce:	9302      	str	r3, [sp, #8]
 801f1d0:	9305      	str	r3, [sp, #20]
 801f1d2:	2301      	movs	r3, #1
 801f1d4:	4669      	mov	r1, sp
 801f1d6:	425b      	negs	r3, r3
 801f1d8:	81cb      	strh	r3, [r1, #14]
 801f1da:	0028      	movs	r0, r5
 801f1dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f1de:	f000 f879 	bl	801f2d4 <_svfiprintf_r>
 801f1e2:	1c43      	adds	r3, r0, #1
 801f1e4:	da01      	bge.n	801f1ea <_vsniprintf_r+0x4a>
 801f1e6:	238b      	movs	r3, #139	; 0x8b
 801f1e8:	602b      	str	r3, [r5, #0]
 801f1ea:	2c00      	cmp	r4, #0
 801f1ec:	d0e3      	beq.n	801f1b6 <_vsniprintf_r+0x16>
 801f1ee:	2300      	movs	r3, #0
 801f1f0:	9a00      	ldr	r2, [sp, #0]
 801f1f2:	7013      	strb	r3, [r2, #0]
 801f1f4:	e7df      	b.n	801f1b6 <_vsniprintf_r+0x16>
	...

0801f1f8 <vsniprintf>:
 801f1f8:	b507      	push	{r0, r1, r2, lr}
 801f1fa:	9300      	str	r3, [sp, #0]
 801f1fc:	0013      	movs	r3, r2
 801f1fe:	000a      	movs	r2, r1
 801f200:	0001      	movs	r1, r0
 801f202:	4802      	ldr	r0, [pc, #8]	; (801f20c <vsniprintf+0x14>)
 801f204:	6800      	ldr	r0, [r0, #0]
 801f206:	f7ff ffcb 	bl	801f1a0 <_vsniprintf_r>
 801f20a:	bd0e      	pop	{r1, r2, r3, pc}
 801f20c:	200000b8 	.word	0x200000b8

0801f210 <__ssputs_r>:
 801f210:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f212:	688e      	ldr	r6, [r1, #8]
 801f214:	b085      	sub	sp, #20
 801f216:	0007      	movs	r7, r0
 801f218:	000c      	movs	r4, r1
 801f21a:	9203      	str	r2, [sp, #12]
 801f21c:	9301      	str	r3, [sp, #4]
 801f21e:	429e      	cmp	r6, r3
 801f220:	d83c      	bhi.n	801f29c <__ssputs_r+0x8c>
 801f222:	2390      	movs	r3, #144	; 0x90
 801f224:	898a      	ldrh	r2, [r1, #12]
 801f226:	00db      	lsls	r3, r3, #3
 801f228:	421a      	tst	r2, r3
 801f22a:	d034      	beq.n	801f296 <__ssputs_r+0x86>
 801f22c:	2503      	movs	r5, #3
 801f22e:	6909      	ldr	r1, [r1, #16]
 801f230:	6823      	ldr	r3, [r4, #0]
 801f232:	1a5b      	subs	r3, r3, r1
 801f234:	9302      	str	r3, [sp, #8]
 801f236:	6963      	ldr	r3, [r4, #20]
 801f238:	9802      	ldr	r0, [sp, #8]
 801f23a:	435d      	muls	r5, r3
 801f23c:	0feb      	lsrs	r3, r5, #31
 801f23e:	195d      	adds	r5, r3, r5
 801f240:	9b01      	ldr	r3, [sp, #4]
 801f242:	106d      	asrs	r5, r5, #1
 801f244:	3301      	adds	r3, #1
 801f246:	181b      	adds	r3, r3, r0
 801f248:	42ab      	cmp	r3, r5
 801f24a:	d900      	bls.n	801f24e <__ssputs_r+0x3e>
 801f24c:	001d      	movs	r5, r3
 801f24e:	0553      	lsls	r3, r2, #21
 801f250:	d532      	bpl.n	801f2b8 <__ssputs_r+0xa8>
 801f252:	0029      	movs	r1, r5
 801f254:	0038      	movs	r0, r7
 801f256:	f000 fff1 	bl	802023c <_malloc_r>
 801f25a:	1e06      	subs	r6, r0, #0
 801f25c:	d109      	bne.n	801f272 <__ssputs_r+0x62>
 801f25e:	230c      	movs	r3, #12
 801f260:	603b      	str	r3, [r7, #0]
 801f262:	2340      	movs	r3, #64	; 0x40
 801f264:	2001      	movs	r0, #1
 801f266:	89a2      	ldrh	r2, [r4, #12]
 801f268:	4240      	negs	r0, r0
 801f26a:	4313      	orrs	r3, r2
 801f26c:	81a3      	strh	r3, [r4, #12]
 801f26e:	b005      	add	sp, #20
 801f270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f272:	9a02      	ldr	r2, [sp, #8]
 801f274:	6921      	ldr	r1, [r4, #16]
 801f276:	f7ff ff45 	bl	801f104 <memcpy>
 801f27a:	89a3      	ldrh	r3, [r4, #12]
 801f27c:	4a14      	ldr	r2, [pc, #80]	; (801f2d0 <__ssputs_r+0xc0>)
 801f27e:	401a      	ands	r2, r3
 801f280:	2380      	movs	r3, #128	; 0x80
 801f282:	4313      	orrs	r3, r2
 801f284:	81a3      	strh	r3, [r4, #12]
 801f286:	9b02      	ldr	r3, [sp, #8]
 801f288:	6126      	str	r6, [r4, #16]
 801f28a:	18f6      	adds	r6, r6, r3
 801f28c:	6026      	str	r6, [r4, #0]
 801f28e:	6165      	str	r5, [r4, #20]
 801f290:	9e01      	ldr	r6, [sp, #4]
 801f292:	1aed      	subs	r5, r5, r3
 801f294:	60a5      	str	r5, [r4, #8]
 801f296:	9b01      	ldr	r3, [sp, #4]
 801f298:	429e      	cmp	r6, r3
 801f29a:	d900      	bls.n	801f29e <__ssputs_r+0x8e>
 801f29c:	9e01      	ldr	r6, [sp, #4]
 801f29e:	0032      	movs	r2, r6
 801f2a0:	9903      	ldr	r1, [sp, #12]
 801f2a2:	6820      	ldr	r0, [r4, #0]
 801f2a4:	f7ff ff37 	bl	801f116 <memmove>
 801f2a8:	68a3      	ldr	r3, [r4, #8]
 801f2aa:	2000      	movs	r0, #0
 801f2ac:	1b9b      	subs	r3, r3, r6
 801f2ae:	60a3      	str	r3, [r4, #8]
 801f2b0:	6823      	ldr	r3, [r4, #0]
 801f2b2:	199e      	adds	r6, r3, r6
 801f2b4:	6026      	str	r6, [r4, #0]
 801f2b6:	e7da      	b.n	801f26e <__ssputs_r+0x5e>
 801f2b8:	002a      	movs	r2, r5
 801f2ba:	0038      	movs	r0, r7
 801f2bc:	f001 f81c 	bl	80202f8 <_realloc_r>
 801f2c0:	1e06      	subs	r6, r0, #0
 801f2c2:	d1e0      	bne.n	801f286 <__ssputs_r+0x76>
 801f2c4:	6921      	ldr	r1, [r4, #16]
 801f2c6:	0038      	movs	r0, r7
 801f2c8:	f000 ff6e 	bl	80201a8 <_free_r>
 801f2cc:	e7c7      	b.n	801f25e <__ssputs_r+0x4e>
 801f2ce:	46c0      	nop			; (mov r8, r8)
 801f2d0:	fffffb7f 	.word	0xfffffb7f

0801f2d4 <_svfiprintf_r>:
 801f2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2d6:	b0a1      	sub	sp, #132	; 0x84
 801f2d8:	9003      	str	r0, [sp, #12]
 801f2da:	001d      	movs	r5, r3
 801f2dc:	898b      	ldrh	r3, [r1, #12]
 801f2de:	000f      	movs	r7, r1
 801f2e0:	0016      	movs	r6, r2
 801f2e2:	061b      	lsls	r3, r3, #24
 801f2e4:	d511      	bpl.n	801f30a <_svfiprintf_r+0x36>
 801f2e6:	690b      	ldr	r3, [r1, #16]
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	d10e      	bne.n	801f30a <_svfiprintf_r+0x36>
 801f2ec:	2140      	movs	r1, #64	; 0x40
 801f2ee:	f000 ffa5 	bl	802023c <_malloc_r>
 801f2f2:	6038      	str	r0, [r7, #0]
 801f2f4:	6138      	str	r0, [r7, #16]
 801f2f6:	2800      	cmp	r0, #0
 801f2f8:	d105      	bne.n	801f306 <_svfiprintf_r+0x32>
 801f2fa:	230c      	movs	r3, #12
 801f2fc:	9a03      	ldr	r2, [sp, #12]
 801f2fe:	3801      	subs	r0, #1
 801f300:	6013      	str	r3, [r2, #0]
 801f302:	b021      	add	sp, #132	; 0x84
 801f304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f306:	2340      	movs	r3, #64	; 0x40
 801f308:	617b      	str	r3, [r7, #20]
 801f30a:	2300      	movs	r3, #0
 801f30c:	ac08      	add	r4, sp, #32
 801f30e:	6163      	str	r3, [r4, #20]
 801f310:	3320      	adds	r3, #32
 801f312:	7663      	strb	r3, [r4, #25]
 801f314:	3310      	adds	r3, #16
 801f316:	76a3      	strb	r3, [r4, #26]
 801f318:	9507      	str	r5, [sp, #28]
 801f31a:	0035      	movs	r5, r6
 801f31c:	782b      	ldrb	r3, [r5, #0]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d001      	beq.n	801f326 <_svfiprintf_r+0x52>
 801f322:	2b25      	cmp	r3, #37	; 0x25
 801f324:	d146      	bne.n	801f3b4 <_svfiprintf_r+0xe0>
 801f326:	1bab      	subs	r3, r5, r6
 801f328:	9305      	str	r3, [sp, #20]
 801f32a:	d00c      	beq.n	801f346 <_svfiprintf_r+0x72>
 801f32c:	0032      	movs	r2, r6
 801f32e:	0039      	movs	r1, r7
 801f330:	9803      	ldr	r0, [sp, #12]
 801f332:	f7ff ff6d 	bl	801f210 <__ssputs_r>
 801f336:	1c43      	adds	r3, r0, #1
 801f338:	d100      	bne.n	801f33c <_svfiprintf_r+0x68>
 801f33a:	e0ae      	b.n	801f49a <_svfiprintf_r+0x1c6>
 801f33c:	6962      	ldr	r2, [r4, #20]
 801f33e:	9b05      	ldr	r3, [sp, #20]
 801f340:	4694      	mov	ip, r2
 801f342:	4463      	add	r3, ip
 801f344:	6163      	str	r3, [r4, #20]
 801f346:	782b      	ldrb	r3, [r5, #0]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	d100      	bne.n	801f34e <_svfiprintf_r+0x7a>
 801f34c:	e0a5      	b.n	801f49a <_svfiprintf_r+0x1c6>
 801f34e:	2201      	movs	r2, #1
 801f350:	2300      	movs	r3, #0
 801f352:	4252      	negs	r2, r2
 801f354:	6062      	str	r2, [r4, #4]
 801f356:	a904      	add	r1, sp, #16
 801f358:	3254      	adds	r2, #84	; 0x54
 801f35a:	1852      	adds	r2, r2, r1
 801f35c:	1c6e      	adds	r6, r5, #1
 801f35e:	6023      	str	r3, [r4, #0]
 801f360:	60e3      	str	r3, [r4, #12]
 801f362:	60a3      	str	r3, [r4, #8]
 801f364:	7013      	strb	r3, [r2, #0]
 801f366:	65a3      	str	r3, [r4, #88]	; 0x58
 801f368:	7831      	ldrb	r1, [r6, #0]
 801f36a:	2205      	movs	r2, #5
 801f36c:	4853      	ldr	r0, [pc, #332]	; (801f4bc <_svfiprintf_r+0x1e8>)
 801f36e:	f000 ff0f 	bl	8020190 <memchr>
 801f372:	1c75      	adds	r5, r6, #1
 801f374:	2800      	cmp	r0, #0
 801f376:	d11f      	bne.n	801f3b8 <_svfiprintf_r+0xe4>
 801f378:	6822      	ldr	r2, [r4, #0]
 801f37a:	06d3      	lsls	r3, r2, #27
 801f37c:	d504      	bpl.n	801f388 <_svfiprintf_r+0xb4>
 801f37e:	2353      	movs	r3, #83	; 0x53
 801f380:	a904      	add	r1, sp, #16
 801f382:	185b      	adds	r3, r3, r1
 801f384:	2120      	movs	r1, #32
 801f386:	7019      	strb	r1, [r3, #0]
 801f388:	0713      	lsls	r3, r2, #28
 801f38a:	d504      	bpl.n	801f396 <_svfiprintf_r+0xc2>
 801f38c:	2353      	movs	r3, #83	; 0x53
 801f38e:	a904      	add	r1, sp, #16
 801f390:	185b      	adds	r3, r3, r1
 801f392:	212b      	movs	r1, #43	; 0x2b
 801f394:	7019      	strb	r1, [r3, #0]
 801f396:	7833      	ldrb	r3, [r6, #0]
 801f398:	2b2a      	cmp	r3, #42	; 0x2a
 801f39a:	d016      	beq.n	801f3ca <_svfiprintf_r+0xf6>
 801f39c:	0035      	movs	r5, r6
 801f39e:	2100      	movs	r1, #0
 801f3a0:	200a      	movs	r0, #10
 801f3a2:	68e3      	ldr	r3, [r4, #12]
 801f3a4:	782a      	ldrb	r2, [r5, #0]
 801f3a6:	1c6e      	adds	r6, r5, #1
 801f3a8:	3a30      	subs	r2, #48	; 0x30
 801f3aa:	2a09      	cmp	r2, #9
 801f3ac:	d94e      	bls.n	801f44c <_svfiprintf_r+0x178>
 801f3ae:	2900      	cmp	r1, #0
 801f3b0:	d018      	beq.n	801f3e4 <_svfiprintf_r+0x110>
 801f3b2:	e010      	b.n	801f3d6 <_svfiprintf_r+0x102>
 801f3b4:	3501      	adds	r5, #1
 801f3b6:	e7b1      	b.n	801f31c <_svfiprintf_r+0x48>
 801f3b8:	4b40      	ldr	r3, [pc, #256]	; (801f4bc <_svfiprintf_r+0x1e8>)
 801f3ba:	6822      	ldr	r2, [r4, #0]
 801f3bc:	1ac0      	subs	r0, r0, r3
 801f3be:	2301      	movs	r3, #1
 801f3c0:	4083      	lsls	r3, r0
 801f3c2:	4313      	orrs	r3, r2
 801f3c4:	6023      	str	r3, [r4, #0]
 801f3c6:	002e      	movs	r6, r5
 801f3c8:	e7ce      	b.n	801f368 <_svfiprintf_r+0x94>
 801f3ca:	9b07      	ldr	r3, [sp, #28]
 801f3cc:	1d19      	adds	r1, r3, #4
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	9107      	str	r1, [sp, #28]
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	db01      	blt.n	801f3da <_svfiprintf_r+0x106>
 801f3d6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3d8:	e004      	b.n	801f3e4 <_svfiprintf_r+0x110>
 801f3da:	425b      	negs	r3, r3
 801f3dc:	60e3      	str	r3, [r4, #12]
 801f3de:	2302      	movs	r3, #2
 801f3e0:	4313      	orrs	r3, r2
 801f3e2:	6023      	str	r3, [r4, #0]
 801f3e4:	782b      	ldrb	r3, [r5, #0]
 801f3e6:	2b2e      	cmp	r3, #46	; 0x2e
 801f3e8:	d10a      	bne.n	801f400 <_svfiprintf_r+0x12c>
 801f3ea:	786b      	ldrb	r3, [r5, #1]
 801f3ec:	2b2a      	cmp	r3, #42	; 0x2a
 801f3ee:	d135      	bne.n	801f45c <_svfiprintf_r+0x188>
 801f3f0:	9b07      	ldr	r3, [sp, #28]
 801f3f2:	3502      	adds	r5, #2
 801f3f4:	1d1a      	adds	r2, r3, #4
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	9207      	str	r2, [sp, #28]
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	db2b      	blt.n	801f456 <_svfiprintf_r+0x182>
 801f3fe:	9309      	str	r3, [sp, #36]	; 0x24
 801f400:	4e2f      	ldr	r6, [pc, #188]	; (801f4c0 <_svfiprintf_r+0x1ec>)
 801f402:	7829      	ldrb	r1, [r5, #0]
 801f404:	2203      	movs	r2, #3
 801f406:	0030      	movs	r0, r6
 801f408:	f000 fec2 	bl	8020190 <memchr>
 801f40c:	2800      	cmp	r0, #0
 801f40e:	d006      	beq.n	801f41e <_svfiprintf_r+0x14a>
 801f410:	2340      	movs	r3, #64	; 0x40
 801f412:	1b80      	subs	r0, r0, r6
 801f414:	4083      	lsls	r3, r0
 801f416:	6822      	ldr	r2, [r4, #0]
 801f418:	3501      	adds	r5, #1
 801f41a:	4313      	orrs	r3, r2
 801f41c:	6023      	str	r3, [r4, #0]
 801f41e:	7829      	ldrb	r1, [r5, #0]
 801f420:	2206      	movs	r2, #6
 801f422:	4828      	ldr	r0, [pc, #160]	; (801f4c4 <_svfiprintf_r+0x1f0>)
 801f424:	1c6e      	adds	r6, r5, #1
 801f426:	7621      	strb	r1, [r4, #24]
 801f428:	f000 feb2 	bl	8020190 <memchr>
 801f42c:	2800      	cmp	r0, #0
 801f42e:	d03c      	beq.n	801f4aa <_svfiprintf_r+0x1d6>
 801f430:	4b25      	ldr	r3, [pc, #148]	; (801f4c8 <_svfiprintf_r+0x1f4>)
 801f432:	2b00      	cmp	r3, #0
 801f434:	d125      	bne.n	801f482 <_svfiprintf_r+0x1ae>
 801f436:	2207      	movs	r2, #7
 801f438:	9b07      	ldr	r3, [sp, #28]
 801f43a:	3307      	adds	r3, #7
 801f43c:	4393      	bics	r3, r2
 801f43e:	3308      	adds	r3, #8
 801f440:	9307      	str	r3, [sp, #28]
 801f442:	6963      	ldr	r3, [r4, #20]
 801f444:	9a04      	ldr	r2, [sp, #16]
 801f446:	189b      	adds	r3, r3, r2
 801f448:	6163      	str	r3, [r4, #20]
 801f44a:	e766      	b.n	801f31a <_svfiprintf_r+0x46>
 801f44c:	4343      	muls	r3, r0
 801f44e:	2101      	movs	r1, #1
 801f450:	189b      	adds	r3, r3, r2
 801f452:	0035      	movs	r5, r6
 801f454:	e7a6      	b.n	801f3a4 <_svfiprintf_r+0xd0>
 801f456:	2301      	movs	r3, #1
 801f458:	425b      	negs	r3, r3
 801f45a:	e7d0      	b.n	801f3fe <_svfiprintf_r+0x12a>
 801f45c:	2300      	movs	r3, #0
 801f45e:	200a      	movs	r0, #10
 801f460:	001a      	movs	r2, r3
 801f462:	3501      	adds	r5, #1
 801f464:	6063      	str	r3, [r4, #4]
 801f466:	7829      	ldrb	r1, [r5, #0]
 801f468:	1c6e      	adds	r6, r5, #1
 801f46a:	3930      	subs	r1, #48	; 0x30
 801f46c:	2909      	cmp	r1, #9
 801f46e:	d903      	bls.n	801f478 <_svfiprintf_r+0x1a4>
 801f470:	2b00      	cmp	r3, #0
 801f472:	d0c5      	beq.n	801f400 <_svfiprintf_r+0x12c>
 801f474:	9209      	str	r2, [sp, #36]	; 0x24
 801f476:	e7c3      	b.n	801f400 <_svfiprintf_r+0x12c>
 801f478:	4342      	muls	r2, r0
 801f47a:	2301      	movs	r3, #1
 801f47c:	1852      	adds	r2, r2, r1
 801f47e:	0035      	movs	r5, r6
 801f480:	e7f1      	b.n	801f466 <_svfiprintf_r+0x192>
 801f482:	ab07      	add	r3, sp, #28
 801f484:	9300      	str	r3, [sp, #0]
 801f486:	003a      	movs	r2, r7
 801f488:	4b10      	ldr	r3, [pc, #64]	; (801f4cc <_svfiprintf_r+0x1f8>)
 801f48a:	0021      	movs	r1, r4
 801f48c:	9803      	ldr	r0, [sp, #12]
 801f48e:	e000      	b.n	801f492 <_svfiprintf_r+0x1be>
 801f490:	bf00      	nop
 801f492:	9004      	str	r0, [sp, #16]
 801f494:	9b04      	ldr	r3, [sp, #16]
 801f496:	3301      	adds	r3, #1
 801f498:	d1d3      	bne.n	801f442 <_svfiprintf_r+0x16e>
 801f49a:	89bb      	ldrh	r3, [r7, #12]
 801f49c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f49e:	065b      	lsls	r3, r3, #25
 801f4a0:	d400      	bmi.n	801f4a4 <_svfiprintf_r+0x1d0>
 801f4a2:	e72e      	b.n	801f302 <_svfiprintf_r+0x2e>
 801f4a4:	2001      	movs	r0, #1
 801f4a6:	4240      	negs	r0, r0
 801f4a8:	e72b      	b.n	801f302 <_svfiprintf_r+0x2e>
 801f4aa:	ab07      	add	r3, sp, #28
 801f4ac:	9300      	str	r3, [sp, #0]
 801f4ae:	003a      	movs	r2, r7
 801f4b0:	4b06      	ldr	r3, [pc, #24]	; (801f4cc <_svfiprintf_r+0x1f8>)
 801f4b2:	0021      	movs	r1, r4
 801f4b4:	9803      	ldr	r0, [sp, #12]
 801f4b6:	f000 fa43 	bl	801f940 <_printf_i>
 801f4ba:	e7ea      	b.n	801f492 <_svfiprintf_r+0x1be>
 801f4bc:	080223f8 	.word	0x080223f8
 801f4c0:	080223fe 	.word	0x080223fe
 801f4c4:	08022402 	.word	0x08022402
 801f4c8:	00000000 	.word	0x00000000
 801f4cc:	0801f211 	.word	0x0801f211

0801f4d0 <_sungetc_r>:
 801f4d0:	b570      	push	{r4, r5, r6, lr}
 801f4d2:	0014      	movs	r4, r2
 801f4d4:	1c4b      	adds	r3, r1, #1
 801f4d6:	d103      	bne.n	801f4e0 <_sungetc_r+0x10>
 801f4d8:	2501      	movs	r5, #1
 801f4da:	426d      	negs	r5, r5
 801f4dc:	0028      	movs	r0, r5
 801f4de:	bd70      	pop	{r4, r5, r6, pc}
 801f4e0:	8993      	ldrh	r3, [r2, #12]
 801f4e2:	2220      	movs	r2, #32
 801f4e4:	4393      	bics	r3, r2
 801f4e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f4e8:	81a3      	strh	r3, [r4, #12]
 801f4ea:	b2ce      	uxtb	r6, r1
 801f4ec:	b2cd      	uxtb	r5, r1
 801f4ee:	6863      	ldr	r3, [r4, #4]
 801f4f0:	2a00      	cmp	r2, #0
 801f4f2:	d010      	beq.n	801f516 <_sungetc_r+0x46>
 801f4f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801f4f6:	429a      	cmp	r2, r3
 801f4f8:	dd07      	ble.n	801f50a <_sungetc_r+0x3a>
 801f4fa:	6823      	ldr	r3, [r4, #0]
 801f4fc:	3b01      	subs	r3, #1
 801f4fe:	6023      	str	r3, [r4, #0]
 801f500:	701e      	strb	r6, [r3, #0]
 801f502:	6863      	ldr	r3, [r4, #4]
 801f504:	3301      	adds	r3, #1
 801f506:	6063      	str	r3, [r4, #4]
 801f508:	e7e8      	b.n	801f4dc <_sungetc_r+0xc>
 801f50a:	0021      	movs	r1, r4
 801f50c:	f000 fdde 	bl	80200cc <__submore>
 801f510:	2800      	cmp	r0, #0
 801f512:	d0f2      	beq.n	801f4fa <_sungetc_r+0x2a>
 801f514:	e7e0      	b.n	801f4d8 <_sungetc_r+0x8>
 801f516:	6921      	ldr	r1, [r4, #16]
 801f518:	6822      	ldr	r2, [r4, #0]
 801f51a:	2900      	cmp	r1, #0
 801f51c:	d007      	beq.n	801f52e <_sungetc_r+0x5e>
 801f51e:	4291      	cmp	r1, r2
 801f520:	d205      	bcs.n	801f52e <_sungetc_r+0x5e>
 801f522:	1e51      	subs	r1, r2, #1
 801f524:	7808      	ldrb	r0, [r1, #0]
 801f526:	42a8      	cmp	r0, r5
 801f528:	d101      	bne.n	801f52e <_sungetc_r+0x5e>
 801f52a:	6021      	str	r1, [r4, #0]
 801f52c:	e7ea      	b.n	801f504 <_sungetc_r+0x34>
 801f52e:	6423      	str	r3, [r4, #64]	; 0x40
 801f530:	0023      	movs	r3, r4
 801f532:	3344      	adds	r3, #68	; 0x44
 801f534:	6363      	str	r3, [r4, #52]	; 0x34
 801f536:	2303      	movs	r3, #3
 801f538:	63a3      	str	r3, [r4, #56]	; 0x38
 801f53a:	0023      	movs	r3, r4
 801f53c:	3346      	adds	r3, #70	; 0x46
 801f53e:	63e2      	str	r2, [r4, #60]	; 0x3c
 801f540:	701e      	strb	r6, [r3, #0]
 801f542:	6023      	str	r3, [r4, #0]
 801f544:	2301      	movs	r3, #1
 801f546:	e7de      	b.n	801f506 <_sungetc_r+0x36>

0801f548 <__ssrefill_r>:
 801f548:	b510      	push	{r4, lr}
 801f54a:	000c      	movs	r4, r1
 801f54c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f54e:	2900      	cmp	r1, #0
 801f550:	d00e      	beq.n	801f570 <__ssrefill_r+0x28>
 801f552:	0023      	movs	r3, r4
 801f554:	3344      	adds	r3, #68	; 0x44
 801f556:	4299      	cmp	r1, r3
 801f558:	d001      	beq.n	801f55e <__ssrefill_r+0x16>
 801f55a:	f000 fe25 	bl	80201a8 <_free_r>
 801f55e:	2000      	movs	r0, #0
 801f560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f562:	6360      	str	r0, [r4, #52]	; 0x34
 801f564:	6063      	str	r3, [r4, #4]
 801f566:	4283      	cmp	r3, r0
 801f568:	d002      	beq.n	801f570 <__ssrefill_r+0x28>
 801f56a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f56c:	6023      	str	r3, [r4, #0]
 801f56e:	bd10      	pop	{r4, pc}
 801f570:	6923      	ldr	r3, [r4, #16]
 801f572:	2001      	movs	r0, #1
 801f574:	6023      	str	r3, [r4, #0]
 801f576:	2300      	movs	r3, #0
 801f578:	89a2      	ldrh	r2, [r4, #12]
 801f57a:	6063      	str	r3, [r4, #4]
 801f57c:	3320      	adds	r3, #32
 801f57e:	4313      	orrs	r3, r2
 801f580:	81a3      	strh	r3, [r4, #12]
 801f582:	4240      	negs	r0, r0
 801f584:	e7f3      	b.n	801f56e <__ssrefill_r+0x26>
	...

0801f588 <__ssvfiscanf_r>:
 801f588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f58a:	0017      	movs	r7, r2
 801f58c:	2200      	movs	r2, #0
 801f58e:	4cb0      	ldr	r4, [pc, #704]	; (801f850 <__ssvfiscanf_r+0x2c8>)
 801f590:	25c0      	movs	r5, #192	; 0xc0
 801f592:	44a5      	add	sp, r4
 801f594:	9248      	str	r2, [sp, #288]	; 0x120
 801f596:	9249      	str	r2, [sp, #292]	; 0x124
 801f598:	aa05      	add	r2, sp, #20
 801f59a:	924a      	str	r2, [sp, #296]	; 0x128
 801f59c:	22be      	movs	r2, #190	; 0xbe
 801f59e:	000c      	movs	r4, r1
 801f5a0:	49ac      	ldr	r1, [pc, #688]	; (801f854 <__ssvfiscanf_r+0x2cc>)
 801f5a2:	9000      	str	r0, [sp, #0]
 801f5a4:	0052      	lsls	r2, r2, #1
 801f5a6:	a845      	add	r0, sp, #276	; 0x114
 801f5a8:	5081      	str	r1, [r0, r2]
 801f5aa:	49ab      	ldr	r1, [pc, #684]	; (801f858 <__ssvfiscanf_r+0x2d0>)
 801f5ac:	006d      	lsls	r5, r5, #1
 801f5ae:	5141      	str	r1, [r0, r5]
 801f5b0:	9304      	str	r3, [sp, #16]
 801f5b2:	783b      	ldrb	r3, [r7, #0]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d100      	bne.n	801f5ba <__ssvfiscanf_r+0x32>
 801f5b8:	e148      	b.n	801f84c <__ssvfiscanf_r+0x2c4>
 801f5ba:	f000 fdc9 	bl	8020150 <__locale_ctype_ptr>
 801f5be:	2208      	movs	r2, #8
 801f5c0:	783b      	ldrb	r3, [r7, #0]
 801f5c2:	1c7e      	adds	r6, r7, #1
 801f5c4:	18c0      	adds	r0, r0, r3
 801f5c6:	9301      	str	r3, [sp, #4]
 801f5c8:	7843      	ldrb	r3, [r0, #1]
 801f5ca:	4013      	ands	r3, r2
 801f5cc:	d020      	beq.n	801f610 <__ssvfiscanf_r+0x88>
 801f5ce:	6863      	ldr	r3, [r4, #4]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	dd14      	ble.n	801f5fe <__ssvfiscanf_r+0x76>
 801f5d4:	f000 fdbc 	bl	8020150 <__locale_ctype_ptr>
 801f5d8:	2108      	movs	r1, #8
 801f5da:	6823      	ldr	r3, [r4, #0]
 801f5dc:	781a      	ldrb	r2, [r3, #0]
 801f5de:	1880      	adds	r0, r0, r2
 801f5e0:	7842      	ldrb	r2, [r0, #1]
 801f5e2:	420a      	tst	r2, r1
 801f5e4:	d101      	bne.n	801f5ea <__ssvfiscanf_r+0x62>
 801f5e6:	0037      	movs	r7, r6
 801f5e8:	e7e3      	b.n	801f5b2 <__ssvfiscanf_r+0x2a>
 801f5ea:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801f5ec:	3301      	adds	r3, #1
 801f5ee:	9201      	str	r2, [sp, #4]
 801f5f0:	3201      	adds	r2, #1
 801f5f2:	9249      	str	r2, [sp, #292]	; 0x124
 801f5f4:	6862      	ldr	r2, [r4, #4]
 801f5f6:	6023      	str	r3, [r4, #0]
 801f5f8:	3a01      	subs	r2, #1
 801f5fa:	6062      	str	r2, [r4, #4]
 801f5fc:	e7e7      	b.n	801f5ce <__ssvfiscanf_r+0x46>
 801f5fe:	ab45      	add	r3, sp, #276	; 0x114
 801f600:	595b      	ldr	r3, [r3, r5]
 801f602:	0021      	movs	r1, r4
 801f604:	9800      	ldr	r0, [sp, #0]
 801f606:	9301      	str	r3, [sp, #4]
 801f608:	4798      	blx	r3
 801f60a:	2800      	cmp	r0, #0
 801f60c:	d0e2      	beq.n	801f5d4 <__ssvfiscanf_r+0x4c>
 801f60e:	e7ea      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f610:	9a01      	ldr	r2, [sp, #4]
 801f612:	2a25      	cmp	r2, #37	; 0x25
 801f614:	d16d      	bne.n	801f6f2 <__ssvfiscanf_r+0x16a>
 801f616:	9347      	str	r3, [sp, #284]	; 0x11c
 801f618:	9345      	str	r3, [sp, #276]	; 0x114
 801f61a:	787b      	ldrb	r3, [r7, #1]
 801f61c:	2b2a      	cmp	r3, #42	; 0x2a
 801f61e:	d102      	bne.n	801f626 <__ssvfiscanf_r+0x9e>
 801f620:	3b1a      	subs	r3, #26
 801f622:	9345      	str	r3, [sp, #276]	; 0x114
 801f624:	1cbe      	adds	r6, r7, #2
 801f626:	0037      	movs	r7, r6
 801f628:	220a      	movs	r2, #10
 801f62a:	7839      	ldrb	r1, [r7, #0]
 801f62c:	1c7b      	adds	r3, r7, #1
 801f62e:	9302      	str	r3, [sp, #8]
 801f630:	000b      	movs	r3, r1
 801f632:	3b30      	subs	r3, #48	; 0x30
 801f634:	2b09      	cmp	r3, #9
 801f636:	d924      	bls.n	801f682 <__ssvfiscanf_r+0xfa>
 801f638:	4e88      	ldr	r6, [pc, #544]	; (801f85c <__ssvfiscanf_r+0x2d4>)
 801f63a:	2203      	movs	r2, #3
 801f63c:	0030      	movs	r0, r6
 801f63e:	f000 fda7 	bl	8020190 <memchr>
 801f642:	2800      	cmp	r0, #0
 801f644:	d007      	beq.n	801f656 <__ssvfiscanf_r+0xce>
 801f646:	2301      	movs	r3, #1
 801f648:	1b80      	subs	r0, r0, r6
 801f64a:	4083      	lsls	r3, r0
 801f64c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f64e:	9f02      	ldr	r7, [sp, #8]
 801f650:	4313      	orrs	r3, r2
 801f652:	9203      	str	r2, [sp, #12]
 801f654:	9345      	str	r3, [sp, #276]	; 0x114
 801f656:	783b      	ldrb	r3, [r7, #0]
 801f658:	1c7e      	adds	r6, r7, #1
 801f65a:	2b67      	cmp	r3, #103	; 0x67
 801f65c:	d835      	bhi.n	801f6ca <__ssvfiscanf_r+0x142>
 801f65e:	2b65      	cmp	r3, #101	; 0x65
 801f660:	d300      	bcc.n	801f664 <__ssvfiscanf_r+0xdc>
 801f662:	e0b8      	b.n	801f7d6 <__ssvfiscanf_r+0x24e>
 801f664:	2b47      	cmp	r3, #71	; 0x47
 801f666:	d814      	bhi.n	801f692 <__ssvfiscanf_r+0x10a>
 801f668:	2b45      	cmp	r3, #69	; 0x45
 801f66a:	d300      	bcc.n	801f66e <__ssvfiscanf_r+0xe6>
 801f66c:	e0b3      	b.n	801f7d6 <__ssvfiscanf_r+0x24e>
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d100      	bne.n	801f674 <__ssvfiscanf_r+0xec>
 801f672:	e0e8      	b.n	801f846 <__ssvfiscanf_r+0x2be>
 801f674:	2b25      	cmp	r3, #37	; 0x25
 801f676:	d03c      	beq.n	801f6f2 <__ssvfiscanf_r+0x16a>
 801f678:	2303      	movs	r3, #3
 801f67a:	934b      	str	r3, [sp, #300]	; 0x12c
 801f67c:	3307      	adds	r3, #7
 801f67e:	9346      	str	r3, [sp, #280]	; 0x118
 801f680:	e066      	b.n	801f750 <__ssvfiscanf_r+0x1c8>
 801f682:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f684:	9f02      	ldr	r7, [sp, #8]
 801f686:	9303      	str	r3, [sp, #12]
 801f688:	4353      	muls	r3, r2
 801f68a:	3b30      	subs	r3, #48	; 0x30
 801f68c:	1859      	adds	r1, r3, r1
 801f68e:	9147      	str	r1, [sp, #284]	; 0x11c
 801f690:	e7cb      	b.n	801f62a <__ssvfiscanf_r+0xa2>
 801f692:	2b5b      	cmp	r3, #91	; 0x5b
 801f694:	d100      	bne.n	801f698 <__ssvfiscanf_r+0x110>
 801f696:	e07a      	b.n	801f78e <__ssvfiscanf_r+0x206>
 801f698:	d810      	bhi.n	801f6bc <__ssvfiscanf_r+0x134>
 801f69a:	2b58      	cmp	r3, #88	; 0x58
 801f69c:	d1ec      	bne.n	801f678 <__ssvfiscanf_r+0xf0>
 801f69e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f6a0:	9201      	str	r2, [sp, #4]
 801f6a2:	2280      	movs	r2, #128	; 0x80
 801f6a4:	9901      	ldr	r1, [sp, #4]
 801f6a6:	0092      	lsls	r2, r2, #2
 801f6a8:	430a      	orrs	r2, r1
 801f6aa:	9245      	str	r2, [sp, #276]	; 0x114
 801f6ac:	2210      	movs	r2, #16
 801f6ae:	9246      	str	r2, [sp, #280]	; 0x118
 801f6b0:	226e      	movs	r2, #110	; 0x6e
 801f6b2:	429a      	cmp	r2, r3
 801f6b4:	419b      	sbcs	r3, r3
 801f6b6:	425b      	negs	r3, r3
 801f6b8:	3303      	adds	r3, #3
 801f6ba:	e048      	b.n	801f74e <__ssvfiscanf_r+0x1c6>
 801f6bc:	2b63      	cmp	r3, #99	; 0x63
 801f6be:	d100      	bne.n	801f6c2 <__ssvfiscanf_r+0x13a>
 801f6c0:	e072      	b.n	801f7a8 <__ssvfiscanf_r+0x220>
 801f6c2:	2b64      	cmp	r3, #100	; 0x64
 801f6c4:	d1d8      	bne.n	801f678 <__ssvfiscanf_r+0xf0>
 801f6c6:	220a      	movs	r2, #10
 801f6c8:	e7f1      	b.n	801f6ae <__ssvfiscanf_r+0x126>
 801f6ca:	2b70      	cmp	r3, #112	; 0x70
 801f6cc:	d035      	beq.n	801f73a <__ssvfiscanf_r+0x1b2>
 801f6ce:	d808      	bhi.n	801f6e2 <__ssvfiscanf_r+0x15a>
 801f6d0:	2b6e      	cmp	r3, #110	; 0x6e
 801f6d2:	d100      	bne.n	801f6d6 <__ssvfiscanf_r+0x14e>
 801f6d4:	e070      	b.n	801f7b8 <__ssvfiscanf_r+0x230>
 801f6d6:	d837      	bhi.n	801f748 <__ssvfiscanf_r+0x1c0>
 801f6d8:	2b69      	cmp	r3, #105	; 0x69
 801f6da:	d1cd      	bne.n	801f678 <__ssvfiscanf_r+0xf0>
 801f6dc:	2300      	movs	r3, #0
 801f6de:	9346      	str	r3, [sp, #280]	; 0x118
 801f6e0:	e7ea      	b.n	801f6b8 <__ssvfiscanf_r+0x130>
 801f6e2:	2b75      	cmp	r3, #117	; 0x75
 801f6e4:	d0ef      	beq.n	801f6c6 <__ssvfiscanf_r+0x13e>
 801f6e6:	2b78      	cmp	r3, #120	; 0x78
 801f6e8:	d0d9      	beq.n	801f69e <__ssvfiscanf_r+0x116>
 801f6ea:	2b73      	cmp	r3, #115	; 0x73
 801f6ec:	d1c4      	bne.n	801f678 <__ssvfiscanf_r+0xf0>
 801f6ee:	2302      	movs	r3, #2
 801f6f0:	e02d      	b.n	801f74e <__ssvfiscanf_r+0x1c6>
 801f6f2:	6863      	ldr	r3, [r4, #4]
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	dd0f      	ble.n	801f718 <__ssvfiscanf_r+0x190>
 801f6f8:	6823      	ldr	r3, [r4, #0]
 801f6fa:	9901      	ldr	r1, [sp, #4]
 801f6fc:	781a      	ldrb	r2, [r3, #0]
 801f6fe:	428a      	cmp	r2, r1
 801f700:	d000      	beq.n	801f704 <__ssvfiscanf_r+0x17c>
 801f702:	e0a3      	b.n	801f84c <__ssvfiscanf_r+0x2c4>
 801f704:	3301      	adds	r3, #1
 801f706:	6862      	ldr	r2, [r4, #4]
 801f708:	6023      	str	r3, [r4, #0]
 801f70a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801f70c:	3a01      	subs	r2, #1
 801f70e:	9301      	str	r3, [sp, #4]
 801f710:	3301      	adds	r3, #1
 801f712:	6062      	str	r2, [r4, #4]
 801f714:	9349      	str	r3, [sp, #292]	; 0x124
 801f716:	e766      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f718:	ab45      	add	r3, sp, #276	; 0x114
 801f71a:	595b      	ldr	r3, [r3, r5]
 801f71c:	0021      	movs	r1, r4
 801f71e:	9800      	ldr	r0, [sp, #0]
 801f720:	9302      	str	r3, [sp, #8]
 801f722:	4798      	blx	r3
 801f724:	2800      	cmp	r0, #0
 801f726:	d0e7      	beq.n	801f6f8 <__ssvfiscanf_r+0x170>
 801f728:	9848      	ldr	r0, [sp, #288]	; 0x120
 801f72a:	2800      	cmp	r0, #0
 801f72c:	d000      	beq.n	801f730 <__ssvfiscanf_r+0x1a8>
 801f72e:	e086      	b.n	801f83e <__ssvfiscanf_r+0x2b6>
 801f730:	3801      	subs	r0, #1
 801f732:	23a7      	movs	r3, #167	; 0xa7
 801f734:	009b      	lsls	r3, r3, #2
 801f736:	449d      	add	sp, r3
 801f738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f73a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f73c:	9201      	str	r2, [sp, #4]
 801f73e:	2220      	movs	r2, #32
 801f740:	9901      	ldr	r1, [sp, #4]
 801f742:	430a      	orrs	r2, r1
 801f744:	9245      	str	r2, [sp, #276]	; 0x114
 801f746:	e7aa      	b.n	801f69e <__ssvfiscanf_r+0x116>
 801f748:	2308      	movs	r3, #8
 801f74a:	9346      	str	r3, [sp, #280]	; 0x118
 801f74c:	3b04      	subs	r3, #4
 801f74e:	934b      	str	r3, [sp, #300]	; 0x12c
 801f750:	6863      	ldr	r3, [r4, #4]
 801f752:	2b00      	cmp	r3, #0
 801f754:	dd41      	ble.n	801f7da <__ssvfiscanf_r+0x252>
 801f756:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f758:	9301      	str	r3, [sp, #4]
 801f75a:	065b      	lsls	r3, r3, #25
 801f75c:	d408      	bmi.n	801f770 <__ssvfiscanf_r+0x1e8>
 801f75e:	f000 fcf7 	bl	8020150 <__locale_ctype_ptr>
 801f762:	2108      	movs	r1, #8
 801f764:	6823      	ldr	r3, [r4, #0]
 801f766:	781a      	ldrb	r2, [r3, #0]
 801f768:	1880      	adds	r0, r0, r2
 801f76a:	7842      	ldrb	r2, [r0, #1]
 801f76c:	420a      	tst	r2, r1
 801f76e:	d13d      	bne.n	801f7ec <__ssvfiscanf_r+0x264>
 801f770:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801f772:	2b02      	cmp	r3, #2
 801f774:	dc4f      	bgt.n	801f816 <__ssvfiscanf_r+0x28e>
 801f776:	ab04      	add	r3, sp, #16
 801f778:	0022      	movs	r2, r4
 801f77a:	a945      	add	r1, sp, #276	; 0x114
 801f77c:	9800      	ldr	r0, [sp, #0]
 801f77e:	f000 f9e7 	bl	801fb50 <_scanf_chars>
 801f782:	2801      	cmp	r0, #1
 801f784:	d062      	beq.n	801f84c <__ssvfiscanf_r+0x2c4>
 801f786:	2802      	cmp	r0, #2
 801f788:	d000      	beq.n	801f78c <__ssvfiscanf_r+0x204>
 801f78a:	e72c      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f78c:	e7cc      	b.n	801f728 <__ssvfiscanf_r+0x1a0>
 801f78e:	0031      	movs	r1, r6
 801f790:	a805      	add	r0, sp, #20
 801f792:	f000 fb45 	bl	801fe20 <__sccl>
 801f796:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f798:	0006      	movs	r6, r0
 801f79a:	9301      	str	r3, [sp, #4]
 801f79c:	2340      	movs	r3, #64	; 0x40
 801f79e:	9a01      	ldr	r2, [sp, #4]
 801f7a0:	4313      	orrs	r3, r2
 801f7a2:	9345      	str	r3, [sp, #276]	; 0x114
 801f7a4:	2301      	movs	r3, #1
 801f7a6:	e7d2      	b.n	801f74e <__ssvfiscanf_r+0x1c6>
 801f7a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f7aa:	9301      	str	r3, [sp, #4]
 801f7ac:	2340      	movs	r3, #64	; 0x40
 801f7ae:	9a01      	ldr	r2, [sp, #4]
 801f7b0:	4313      	orrs	r3, r2
 801f7b2:	9345      	str	r3, [sp, #276]	; 0x114
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	e7ca      	b.n	801f74e <__ssvfiscanf_r+0x1c6>
 801f7b8:	9845      	ldr	r0, [sp, #276]	; 0x114
 801f7ba:	06c3      	lsls	r3, r0, #27
 801f7bc:	d500      	bpl.n	801f7c0 <__ssvfiscanf_r+0x238>
 801f7be:	e712      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f7c0:	9b04      	ldr	r3, [sp, #16]
 801f7c2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801f7c4:	1d19      	adds	r1, r3, #4
 801f7c6:	9104      	str	r1, [sp, #16]
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	07c7      	lsls	r7, r0, #31
 801f7cc:	d501      	bpl.n	801f7d2 <__ssvfiscanf_r+0x24a>
 801f7ce:	801a      	strh	r2, [r3, #0]
 801f7d0:	e709      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f7d2:	601a      	str	r2, [r3, #0]
 801f7d4:	e707      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f7d6:	2305      	movs	r3, #5
 801f7d8:	e7b9      	b.n	801f74e <__ssvfiscanf_r+0x1c6>
 801f7da:	ab45      	add	r3, sp, #276	; 0x114
 801f7dc:	595b      	ldr	r3, [r3, r5]
 801f7de:	0021      	movs	r1, r4
 801f7e0:	9800      	ldr	r0, [sp, #0]
 801f7e2:	9301      	str	r3, [sp, #4]
 801f7e4:	4798      	blx	r3
 801f7e6:	2800      	cmp	r0, #0
 801f7e8:	d0b5      	beq.n	801f756 <__ssvfiscanf_r+0x1ce>
 801f7ea:	e79d      	b.n	801f728 <__ssvfiscanf_r+0x1a0>
 801f7ec:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801f7ee:	9201      	str	r2, [sp, #4]
 801f7f0:	3201      	adds	r2, #1
 801f7f2:	9249      	str	r2, [sp, #292]	; 0x124
 801f7f4:	6862      	ldr	r2, [r4, #4]
 801f7f6:	3a01      	subs	r2, #1
 801f7f8:	6062      	str	r2, [r4, #4]
 801f7fa:	2a00      	cmp	r2, #0
 801f7fc:	dd02      	ble.n	801f804 <__ssvfiscanf_r+0x27c>
 801f7fe:	3301      	adds	r3, #1
 801f800:	6023      	str	r3, [r4, #0]
 801f802:	e7ac      	b.n	801f75e <__ssvfiscanf_r+0x1d6>
 801f804:	ab45      	add	r3, sp, #276	; 0x114
 801f806:	595b      	ldr	r3, [r3, r5]
 801f808:	0021      	movs	r1, r4
 801f80a:	9800      	ldr	r0, [sp, #0]
 801f80c:	9301      	str	r3, [sp, #4]
 801f80e:	4798      	blx	r3
 801f810:	2800      	cmp	r0, #0
 801f812:	d0a4      	beq.n	801f75e <__ssvfiscanf_r+0x1d6>
 801f814:	e788      	b.n	801f728 <__ssvfiscanf_r+0x1a0>
 801f816:	2b04      	cmp	r3, #4
 801f818:	dc06      	bgt.n	801f828 <__ssvfiscanf_r+0x2a0>
 801f81a:	ab04      	add	r3, sp, #16
 801f81c:	0022      	movs	r2, r4
 801f81e:	a945      	add	r1, sp, #276	; 0x114
 801f820:	9800      	ldr	r0, [sp, #0]
 801f822:	f000 f9fb 	bl	801fc1c <_scanf_i>
 801f826:	e7ac      	b.n	801f782 <__ssvfiscanf_r+0x1fa>
 801f828:	4b0d      	ldr	r3, [pc, #52]	; (801f860 <__ssvfiscanf_r+0x2d8>)
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d100      	bne.n	801f830 <__ssvfiscanf_r+0x2a8>
 801f82e:	e6da      	b.n	801f5e6 <__ssvfiscanf_r+0x5e>
 801f830:	ab04      	add	r3, sp, #16
 801f832:	0022      	movs	r2, r4
 801f834:	a945      	add	r1, sp, #276	; 0x114
 801f836:	9800      	ldr	r0, [sp, #0]
 801f838:	e000      	b.n	801f83c <__ssvfiscanf_r+0x2b4>
 801f83a:	bf00      	nop
 801f83c:	e7a1      	b.n	801f782 <__ssvfiscanf_r+0x1fa>
 801f83e:	89a3      	ldrh	r3, [r4, #12]
 801f840:	065b      	lsls	r3, r3, #25
 801f842:	d400      	bmi.n	801f846 <__ssvfiscanf_r+0x2be>
 801f844:	e775      	b.n	801f732 <__ssvfiscanf_r+0x1aa>
 801f846:	2001      	movs	r0, #1
 801f848:	4240      	negs	r0, r0
 801f84a:	e772      	b.n	801f732 <__ssvfiscanf_r+0x1aa>
 801f84c:	9848      	ldr	r0, [sp, #288]	; 0x120
 801f84e:	e770      	b.n	801f732 <__ssvfiscanf_r+0x1aa>
 801f850:	fffffd64 	.word	0xfffffd64
 801f854:	0801f4d1 	.word	0x0801f4d1
 801f858:	0801f549 	.word	0x0801f549
 801f85c:	080223fe 	.word	0x080223fe
 801f860:	00000000 	.word	0x00000000

0801f864 <_printf_common>:
 801f864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f866:	0015      	movs	r5, r2
 801f868:	9301      	str	r3, [sp, #4]
 801f86a:	688a      	ldr	r2, [r1, #8]
 801f86c:	690b      	ldr	r3, [r1, #16]
 801f86e:	9000      	str	r0, [sp, #0]
 801f870:	000c      	movs	r4, r1
 801f872:	4293      	cmp	r3, r2
 801f874:	da00      	bge.n	801f878 <_printf_common+0x14>
 801f876:	0013      	movs	r3, r2
 801f878:	0022      	movs	r2, r4
 801f87a:	602b      	str	r3, [r5, #0]
 801f87c:	3243      	adds	r2, #67	; 0x43
 801f87e:	7812      	ldrb	r2, [r2, #0]
 801f880:	2a00      	cmp	r2, #0
 801f882:	d001      	beq.n	801f888 <_printf_common+0x24>
 801f884:	3301      	adds	r3, #1
 801f886:	602b      	str	r3, [r5, #0]
 801f888:	6823      	ldr	r3, [r4, #0]
 801f88a:	069b      	lsls	r3, r3, #26
 801f88c:	d502      	bpl.n	801f894 <_printf_common+0x30>
 801f88e:	682b      	ldr	r3, [r5, #0]
 801f890:	3302      	adds	r3, #2
 801f892:	602b      	str	r3, [r5, #0]
 801f894:	2706      	movs	r7, #6
 801f896:	6823      	ldr	r3, [r4, #0]
 801f898:	401f      	ands	r7, r3
 801f89a:	d027      	beq.n	801f8ec <_printf_common+0x88>
 801f89c:	0023      	movs	r3, r4
 801f89e:	3343      	adds	r3, #67	; 0x43
 801f8a0:	781b      	ldrb	r3, [r3, #0]
 801f8a2:	1e5a      	subs	r2, r3, #1
 801f8a4:	4193      	sbcs	r3, r2
 801f8a6:	6822      	ldr	r2, [r4, #0]
 801f8a8:	0692      	lsls	r2, r2, #26
 801f8aa:	d430      	bmi.n	801f90e <_printf_common+0xaa>
 801f8ac:	0022      	movs	r2, r4
 801f8ae:	9901      	ldr	r1, [sp, #4]
 801f8b0:	3243      	adds	r2, #67	; 0x43
 801f8b2:	9800      	ldr	r0, [sp, #0]
 801f8b4:	9e08      	ldr	r6, [sp, #32]
 801f8b6:	47b0      	blx	r6
 801f8b8:	1c43      	adds	r3, r0, #1
 801f8ba:	d025      	beq.n	801f908 <_printf_common+0xa4>
 801f8bc:	2306      	movs	r3, #6
 801f8be:	6820      	ldr	r0, [r4, #0]
 801f8c0:	682a      	ldr	r2, [r5, #0]
 801f8c2:	68e1      	ldr	r1, [r4, #12]
 801f8c4:	4003      	ands	r3, r0
 801f8c6:	2500      	movs	r5, #0
 801f8c8:	2b04      	cmp	r3, #4
 801f8ca:	d103      	bne.n	801f8d4 <_printf_common+0x70>
 801f8cc:	1a8d      	subs	r5, r1, r2
 801f8ce:	43eb      	mvns	r3, r5
 801f8d0:	17db      	asrs	r3, r3, #31
 801f8d2:	401d      	ands	r5, r3
 801f8d4:	68a3      	ldr	r3, [r4, #8]
 801f8d6:	6922      	ldr	r2, [r4, #16]
 801f8d8:	4293      	cmp	r3, r2
 801f8da:	dd01      	ble.n	801f8e0 <_printf_common+0x7c>
 801f8dc:	1a9b      	subs	r3, r3, r2
 801f8de:	18ed      	adds	r5, r5, r3
 801f8e0:	2700      	movs	r7, #0
 801f8e2:	42bd      	cmp	r5, r7
 801f8e4:	d120      	bne.n	801f928 <_printf_common+0xc4>
 801f8e6:	2000      	movs	r0, #0
 801f8e8:	e010      	b.n	801f90c <_printf_common+0xa8>
 801f8ea:	3701      	adds	r7, #1
 801f8ec:	68e3      	ldr	r3, [r4, #12]
 801f8ee:	682a      	ldr	r2, [r5, #0]
 801f8f0:	1a9b      	subs	r3, r3, r2
 801f8f2:	42bb      	cmp	r3, r7
 801f8f4:	ddd2      	ble.n	801f89c <_printf_common+0x38>
 801f8f6:	0022      	movs	r2, r4
 801f8f8:	2301      	movs	r3, #1
 801f8fa:	3219      	adds	r2, #25
 801f8fc:	9901      	ldr	r1, [sp, #4]
 801f8fe:	9800      	ldr	r0, [sp, #0]
 801f900:	9e08      	ldr	r6, [sp, #32]
 801f902:	47b0      	blx	r6
 801f904:	1c43      	adds	r3, r0, #1
 801f906:	d1f0      	bne.n	801f8ea <_printf_common+0x86>
 801f908:	2001      	movs	r0, #1
 801f90a:	4240      	negs	r0, r0
 801f90c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f90e:	2030      	movs	r0, #48	; 0x30
 801f910:	18e1      	adds	r1, r4, r3
 801f912:	3143      	adds	r1, #67	; 0x43
 801f914:	7008      	strb	r0, [r1, #0]
 801f916:	0021      	movs	r1, r4
 801f918:	1c5a      	adds	r2, r3, #1
 801f91a:	3145      	adds	r1, #69	; 0x45
 801f91c:	7809      	ldrb	r1, [r1, #0]
 801f91e:	18a2      	adds	r2, r4, r2
 801f920:	3243      	adds	r2, #67	; 0x43
 801f922:	3302      	adds	r3, #2
 801f924:	7011      	strb	r1, [r2, #0]
 801f926:	e7c1      	b.n	801f8ac <_printf_common+0x48>
 801f928:	0022      	movs	r2, r4
 801f92a:	2301      	movs	r3, #1
 801f92c:	321a      	adds	r2, #26
 801f92e:	9901      	ldr	r1, [sp, #4]
 801f930:	9800      	ldr	r0, [sp, #0]
 801f932:	9e08      	ldr	r6, [sp, #32]
 801f934:	47b0      	blx	r6
 801f936:	1c43      	adds	r3, r0, #1
 801f938:	d0e6      	beq.n	801f908 <_printf_common+0xa4>
 801f93a:	3701      	adds	r7, #1
 801f93c:	e7d1      	b.n	801f8e2 <_printf_common+0x7e>
	...

0801f940 <_printf_i>:
 801f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f942:	b089      	sub	sp, #36	; 0x24
 801f944:	9204      	str	r2, [sp, #16]
 801f946:	000a      	movs	r2, r1
 801f948:	3243      	adds	r2, #67	; 0x43
 801f94a:	9305      	str	r3, [sp, #20]
 801f94c:	9003      	str	r0, [sp, #12]
 801f94e:	9202      	str	r2, [sp, #8]
 801f950:	7e0a      	ldrb	r2, [r1, #24]
 801f952:	000c      	movs	r4, r1
 801f954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f956:	2a6e      	cmp	r2, #110	; 0x6e
 801f958:	d100      	bne.n	801f95c <_printf_i+0x1c>
 801f95a:	e086      	b.n	801fa6a <_printf_i+0x12a>
 801f95c:	d81f      	bhi.n	801f99e <_printf_i+0x5e>
 801f95e:	2a63      	cmp	r2, #99	; 0x63
 801f960:	d033      	beq.n	801f9ca <_printf_i+0x8a>
 801f962:	d808      	bhi.n	801f976 <_printf_i+0x36>
 801f964:	2a00      	cmp	r2, #0
 801f966:	d100      	bne.n	801f96a <_printf_i+0x2a>
 801f968:	e08c      	b.n	801fa84 <_printf_i+0x144>
 801f96a:	2a58      	cmp	r2, #88	; 0x58
 801f96c:	d04d      	beq.n	801fa0a <_printf_i+0xca>
 801f96e:	0025      	movs	r5, r4
 801f970:	3542      	adds	r5, #66	; 0x42
 801f972:	702a      	strb	r2, [r5, #0]
 801f974:	e030      	b.n	801f9d8 <_printf_i+0x98>
 801f976:	2a64      	cmp	r2, #100	; 0x64
 801f978:	d001      	beq.n	801f97e <_printf_i+0x3e>
 801f97a:	2a69      	cmp	r2, #105	; 0x69
 801f97c:	d1f7      	bne.n	801f96e <_printf_i+0x2e>
 801f97e:	6819      	ldr	r1, [r3, #0]
 801f980:	6825      	ldr	r5, [r4, #0]
 801f982:	1d0a      	adds	r2, r1, #4
 801f984:	0628      	lsls	r0, r5, #24
 801f986:	d529      	bpl.n	801f9dc <_printf_i+0x9c>
 801f988:	6808      	ldr	r0, [r1, #0]
 801f98a:	601a      	str	r2, [r3, #0]
 801f98c:	2800      	cmp	r0, #0
 801f98e:	da03      	bge.n	801f998 <_printf_i+0x58>
 801f990:	232d      	movs	r3, #45	; 0x2d
 801f992:	9a02      	ldr	r2, [sp, #8]
 801f994:	4240      	negs	r0, r0
 801f996:	7013      	strb	r3, [r2, #0]
 801f998:	4e6b      	ldr	r6, [pc, #428]	; (801fb48 <_printf_i+0x208>)
 801f99a:	270a      	movs	r7, #10
 801f99c:	e04f      	b.n	801fa3e <_printf_i+0xfe>
 801f99e:	2a73      	cmp	r2, #115	; 0x73
 801f9a0:	d074      	beq.n	801fa8c <_printf_i+0x14c>
 801f9a2:	d808      	bhi.n	801f9b6 <_printf_i+0x76>
 801f9a4:	2a6f      	cmp	r2, #111	; 0x6f
 801f9a6:	d01f      	beq.n	801f9e8 <_printf_i+0xa8>
 801f9a8:	2a70      	cmp	r2, #112	; 0x70
 801f9aa:	d1e0      	bne.n	801f96e <_printf_i+0x2e>
 801f9ac:	2220      	movs	r2, #32
 801f9ae:	6809      	ldr	r1, [r1, #0]
 801f9b0:	430a      	orrs	r2, r1
 801f9b2:	6022      	str	r2, [r4, #0]
 801f9b4:	e003      	b.n	801f9be <_printf_i+0x7e>
 801f9b6:	2a75      	cmp	r2, #117	; 0x75
 801f9b8:	d016      	beq.n	801f9e8 <_printf_i+0xa8>
 801f9ba:	2a78      	cmp	r2, #120	; 0x78
 801f9bc:	d1d7      	bne.n	801f96e <_printf_i+0x2e>
 801f9be:	0022      	movs	r2, r4
 801f9c0:	2178      	movs	r1, #120	; 0x78
 801f9c2:	3245      	adds	r2, #69	; 0x45
 801f9c4:	7011      	strb	r1, [r2, #0]
 801f9c6:	4e61      	ldr	r6, [pc, #388]	; (801fb4c <_printf_i+0x20c>)
 801f9c8:	e022      	b.n	801fa10 <_printf_i+0xd0>
 801f9ca:	0025      	movs	r5, r4
 801f9cc:	681a      	ldr	r2, [r3, #0]
 801f9ce:	3542      	adds	r5, #66	; 0x42
 801f9d0:	1d11      	adds	r1, r2, #4
 801f9d2:	6019      	str	r1, [r3, #0]
 801f9d4:	6813      	ldr	r3, [r2, #0]
 801f9d6:	702b      	strb	r3, [r5, #0]
 801f9d8:	2301      	movs	r3, #1
 801f9da:	e065      	b.n	801faa8 <_printf_i+0x168>
 801f9dc:	6808      	ldr	r0, [r1, #0]
 801f9de:	601a      	str	r2, [r3, #0]
 801f9e0:	0669      	lsls	r1, r5, #25
 801f9e2:	d5d3      	bpl.n	801f98c <_printf_i+0x4c>
 801f9e4:	b200      	sxth	r0, r0
 801f9e6:	e7d1      	b.n	801f98c <_printf_i+0x4c>
 801f9e8:	6819      	ldr	r1, [r3, #0]
 801f9ea:	6825      	ldr	r5, [r4, #0]
 801f9ec:	1d08      	adds	r0, r1, #4
 801f9ee:	6018      	str	r0, [r3, #0]
 801f9f0:	6808      	ldr	r0, [r1, #0]
 801f9f2:	062e      	lsls	r6, r5, #24
 801f9f4:	d505      	bpl.n	801fa02 <_printf_i+0xc2>
 801f9f6:	4e54      	ldr	r6, [pc, #336]	; (801fb48 <_printf_i+0x208>)
 801f9f8:	2708      	movs	r7, #8
 801f9fa:	2a6f      	cmp	r2, #111	; 0x6f
 801f9fc:	d01b      	beq.n	801fa36 <_printf_i+0xf6>
 801f9fe:	270a      	movs	r7, #10
 801fa00:	e019      	b.n	801fa36 <_printf_i+0xf6>
 801fa02:	066d      	lsls	r5, r5, #25
 801fa04:	d5f7      	bpl.n	801f9f6 <_printf_i+0xb6>
 801fa06:	b280      	uxth	r0, r0
 801fa08:	e7f5      	b.n	801f9f6 <_printf_i+0xb6>
 801fa0a:	3145      	adds	r1, #69	; 0x45
 801fa0c:	4e4e      	ldr	r6, [pc, #312]	; (801fb48 <_printf_i+0x208>)
 801fa0e:	700a      	strb	r2, [r1, #0]
 801fa10:	6818      	ldr	r0, [r3, #0]
 801fa12:	6822      	ldr	r2, [r4, #0]
 801fa14:	1d01      	adds	r1, r0, #4
 801fa16:	6800      	ldr	r0, [r0, #0]
 801fa18:	6019      	str	r1, [r3, #0]
 801fa1a:	0615      	lsls	r5, r2, #24
 801fa1c:	d521      	bpl.n	801fa62 <_printf_i+0x122>
 801fa1e:	07d3      	lsls	r3, r2, #31
 801fa20:	d502      	bpl.n	801fa28 <_printf_i+0xe8>
 801fa22:	2320      	movs	r3, #32
 801fa24:	431a      	orrs	r2, r3
 801fa26:	6022      	str	r2, [r4, #0]
 801fa28:	2710      	movs	r7, #16
 801fa2a:	2800      	cmp	r0, #0
 801fa2c:	d103      	bne.n	801fa36 <_printf_i+0xf6>
 801fa2e:	2320      	movs	r3, #32
 801fa30:	6822      	ldr	r2, [r4, #0]
 801fa32:	439a      	bics	r2, r3
 801fa34:	6022      	str	r2, [r4, #0]
 801fa36:	0023      	movs	r3, r4
 801fa38:	2200      	movs	r2, #0
 801fa3a:	3343      	adds	r3, #67	; 0x43
 801fa3c:	701a      	strb	r2, [r3, #0]
 801fa3e:	6863      	ldr	r3, [r4, #4]
 801fa40:	60a3      	str	r3, [r4, #8]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	db58      	blt.n	801faf8 <_printf_i+0x1b8>
 801fa46:	2204      	movs	r2, #4
 801fa48:	6821      	ldr	r1, [r4, #0]
 801fa4a:	4391      	bics	r1, r2
 801fa4c:	6021      	str	r1, [r4, #0]
 801fa4e:	2800      	cmp	r0, #0
 801fa50:	d154      	bne.n	801fafc <_printf_i+0x1bc>
 801fa52:	9d02      	ldr	r5, [sp, #8]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d05a      	beq.n	801fb0e <_printf_i+0x1ce>
 801fa58:	0025      	movs	r5, r4
 801fa5a:	7833      	ldrb	r3, [r6, #0]
 801fa5c:	3542      	adds	r5, #66	; 0x42
 801fa5e:	702b      	strb	r3, [r5, #0]
 801fa60:	e055      	b.n	801fb0e <_printf_i+0x1ce>
 801fa62:	0655      	lsls	r5, r2, #25
 801fa64:	d5db      	bpl.n	801fa1e <_printf_i+0xde>
 801fa66:	b280      	uxth	r0, r0
 801fa68:	e7d9      	b.n	801fa1e <_printf_i+0xde>
 801fa6a:	681a      	ldr	r2, [r3, #0]
 801fa6c:	680d      	ldr	r5, [r1, #0]
 801fa6e:	1d10      	adds	r0, r2, #4
 801fa70:	6949      	ldr	r1, [r1, #20]
 801fa72:	6018      	str	r0, [r3, #0]
 801fa74:	6813      	ldr	r3, [r2, #0]
 801fa76:	062e      	lsls	r6, r5, #24
 801fa78:	d501      	bpl.n	801fa7e <_printf_i+0x13e>
 801fa7a:	6019      	str	r1, [r3, #0]
 801fa7c:	e002      	b.n	801fa84 <_printf_i+0x144>
 801fa7e:	066d      	lsls	r5, r5, #25
 801fa80:	d5fb      	bpl.n	801fa7a <_printf_i+0x13a>
 801fa82:	8019      	strh	r1, [r3, #0]
 801fa84:	2300      	movs	r3, #0
 801fa86:	9d02      	ldr	r5, [sp, #8]
 801fa88:	6123      	str	r3, [r4, #16]
 801fa8a:	e04f      	b.n	801fb2c <_printf_i+0x1ec>
 801fa8c:	681a      	ldr	r2, [r3, #0]
 801fa8e:	1d11      	adds	r1, r2, #4
 801fa90:	6019      	str	r1, [r3, #0]
 801fa92:	6815      	ldr	r5, [r2, #0]
 801fa94:	2100      	movs	r1, #0
 801fa96:	6862      	ldr	r2, [r4, #4]
 801fa98:	0028      	movs	r0, r5
 801fa9a:	f000 fb79 	bl	8020190 <memchr>
 801fa9e:	2800      	cmp	r0, #0
 801faa0:	d001      	beq.n	801faa6 <_printf_i+0x166>
 801faa2:	1b40      	subs	r0, r0, r5
 801faa4:	6060      	str	r0, [r4, #4]
 801faa6:	6863      	ldr	r3, [r4, #4]
 801faa8:	6123      	str	r3, [r4, #16]
 801faaa:	2300      	movs	r3, #0
 801faac:	9a02      	ldr	r2, [sp, #8]
 801faae:	7013      	strb	r3, [r2, #0]
 801fab0:	e03c      	b.n	801fb2c <_printf_i+0x1ec>
 801fab2:	6923      	ldr	r3, [r4, #16]
 801fab4:	002a      	movs	r2, r5
 801fab6:	9904      	ldr	r1, [sp, #16]
 801fab8:	9803      	ldr	r0, [sp, #12]
 801faba:	9d05      	ldr	r5, [sp, #20]
 801fabc:	47a8      	blx	r5
 801fabe:	1c43      	adds	r3, r0, #1
 801fac0:	d03e      	beq.n	801fb40 <_printf_i+0x200>
 801fac2:	6823      	ldr	r3, [r4, #0]
 801fac4:	079b      	lsls	r3, r3, #30
 801fac6:	d415      	bmi.n	801faf4 <_printf_i+0x1b4>
 801fac8:	9b07      	ldr	r3, [sp, #28]
 801faca:	68e0      	ldr	r0, [r4, #12]
 801facc:	4298      	cmp	r0, r3
 801face:	da39      	bge.n	801fb44 <_printf_i+0x204>
 801fad0:	0018      	movs	r0, r3
 801fad2:	e037      	b.n	801fb44 <_printf_i+0x204>
 801fad4:	0022      	movs	r2, r4
 801fad6:	2301      	movs	r3, #1
 801fad8:	3219      	adds	r2, #25
 801fada:	9904      	ldr	r1, [sp, #16]
 801fadc:	9803      	ldr	r0, [sp, #12]
 801fade:	9e05      	ldr	r6, [sp, #20]
 801fae0:	47b0      	blx	r6
 801fae2:	1c43      	adds	r3, r0, #1
 801fae4:	d02c      	beq.n	801fb40 <_printf_i+0x200>
 801fae6:	3501      	adds	r5, #1
 801fae8:	68e3      	ldr	r3, [r4, #12]
 801faea:	9a07      	ldr	r2, [sp, #28]
 801faec:	1a9b      	subs	r3, r3, r2
 801faee:	42ab      	cmp	r3, r5
 801faf0:	dcf0      	bgt.n	801fad4 <_printf_i+0x194>
 801faf2:	e7e9      	b.n	801fac8 <_printf_i+0x188>
 801faf4:	2500      	movs	r5, #0
 801faf6:	e7f7      	b.n	801fae8 <_printf_i+0x1a8>
 801faf8:	2800      	cmp	r0, #0
 801fafa:	d0ad      	beq.n	801fa58 <_printf_i+0x118>
 801fafc:	9d02      	ldr	r5, [sp, #8]
 801fafe:	0039      	movs	r1, r7
 801fb00:	f7e0 fb90 	bl	8000224 <__aeabi_uidivmod>
 801fb04:	5c73      	ldrb	r3, [r6, r1]
 801fb06:	3d01      	subs	r5, #1
 801fb08:	702b      	strb	r3, [r5, #0]
 801fb0a:	2800      	cmp	r0, #0
 801fb0c:	d1f7      	bne.n	801fafe <_printf_i+0x1be>
 801fb0e:	2f08      	cmp	r7, #8
 801fb10:	d109      	bne.n	801fb26 <_printf_i+0x1e6>
 801fb12:	6823      	ldr	r3, [r4, #0]
 801fb14:	07db      	lsls	r3, r3, #31
 801fb16:	d506      	bpl.n	801fb26 <_printf_i+0x1e6>
 801fb18:	6863      	ldr	r3, [r4, #4]
 801fb1a:	6922      	ldr	r2, [r4, #16]
 801fb1c:	4293      	cmp	r3, r2
 801fb1e:	dc02      	bgt.n	801fb26 <_printf_i+0x1e6>
 801fb20:	2330      	movs	r3, #48	; 0x30
 801fb22:	3d01      	subs	r5, #1
 801fb24:	702b      	strb	r3, [r5, #0]
 801fb26:	9b02      	ldr	r3, [sp, #8]
 801fb28:	1b5b      	subs	r3, r3, r5
 801fb2a:	6123      	str	r3, [r4, #16]
 801fb2c:	9b05      	ldr	r3, [sp, #20]
 801fb2e:	aa07      	add	r2, sp, #28
 801fb30:	9300      	str	r3, [sp, #0]
 801fb32:	0021      	movs	r1, r4
 801fb34:	9b04      	ldr	r3, [sp, #16]
 801fb36:	9803      	ldr	r0, [sp, #12]
 801fb38:	f7ff fe94 	bl	801f864 <_printf_common>
 801fb3c:	1c43      	adds	r3, r0, #1
 801fb3e:	d1b8      	bne.n	801fab2 <_printf_i+0x172>
 801fb40:	2001      	movs	r0, #1
 801fb42:	4240      	negs	r0, r0
 801fb44:	b009      	add	sp, #36	; 0x24
 801fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb48:	08022409 	.word	0x08022409
 801fb4c:	0802241a 	.word	0x0802241a

0801fb50 <_scanf_chars>:
 801fb50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fb52:	0015      	movs	r5, r2
 801fb54:	688a      	ldr	r2, [r1, #8]
 801fb56:	9001      	str	r0, [sp, #4]
 801fb58:	000c      	movs	r4, r1
 801fb5a:	2a00      	cmp	r2, #0
 801fb5c:	d104      	bne.n	801fb68 <_scanf_chars+0x18>
 801fb5e:	698a      	ldr	r2, [r1, #24]
 801fb60:	2a00      	cmp	r2, #0
 801fb62:	d117      	bne.n	801fb94 <_scanf_chars+0x44>
 801fb64:	3201      	adds	r2, #1
 801fb66:	60a2      	str	r2, [r4, #8]
 801fb68:	6822      	ldr	r2, [r4, #0]
 801fb6a:	06d2      	lsls	r2, r2, #27
 801fb6c:	d403      	bmi.n	801fb76 <_scanf_chars+0x26>
 801fb6e:	681a      	ldr	r2, [r3, #0]
 801fb70:	1d11      	adds	r1, r2, #4
 801fb72:	6019      	str	r1, [r3, #0]
 801fb74:	6817      	ldr	r7, [r2, #0]
 801fb76:	2600      	movs	r6, #0
 801fb78:	69a3      	ldr	r3, [r4, #24]
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d01f      	beq.n	801fbbe <_scanf_chars+0x6e>
 801fb7e:	2b01      	cmp	r3, #1
 801fb80:	d10b      	bne.n	801fb9a <_scanf_chars+0x4a>
 801fb82:	682b      	ldr	r3, [r5, #0]
 801fb84:	6962      	ldr	r2, [r4, #20]
 801fb86:	781b      	ldrb	r3, [r3, #0]
 801fb88:	5cd3      	ldrb	r3, [r2, r3]
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d117      	bne.n	801fbbe <_scanf_chars+0x6e>
 801fb8e:	2e00      	cmp	r6, #0
 801fb90:	d133      	bne.n	801fbfa <_scanf_chars+0xaa>
 801fb92:	e009      	b.n	801fba8 <_scanf_chars+0x58>
 801fb94:	2201      	movs	r2, #1
 801fb96:	4252      	negs	r2, r2
 801fb98:	e7e5      	b.n	801fb66 <_scanf_chars+0x16>
 801fb9a:	2b02      	cmp	r3, #2
 801fb9c:	d006      	beq.n	801fbac <_scanf_chars+0x5c>
 801fb9e:	2e00      	cmp	r6, #0
 801fba0:	d12b      	bne.n	801fbfa <_scanf_chars+0xaa>
 801fba2:	69a3      	ldr	r3, [r4, #24]
 801fba4:	2b01      	cmp	r3, #1
 801fba6:	d128      	bne.n	801fbfa <_scanf_chars+0xaa>
 801fba8:	2001      	movs	r0, #1
 801fbaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fbac:	f000 fad0 	bl	8020150 <__locale_ctype_ptr>
 801fbb0:	2208      	movs	r2, #8
 801fbb2:	682b      	ldr	r3, [r5, #0]
 801fbb4:	781b      	ldrb	r3, [r3, #0]
 801fbb6:	18c0      	adds	r0, r0, r3
 801fbb8:	7843      	ldrb	r3, [r0, #1]
 801fbba:	4213      	tst	r3, r2
 801fbbc:	d1ef      	bne.n	801fb9e <_scanf_chars+0x4e>
 801fbbe:	2210      	movs	r2, #16
 801fbc0:	6823      	ldr	r3, [r4, #0]
 801fbc2:	3601      	adds	r6, #1
 801fbc4:	4213      	tst	r3, r2
 801fbc6:	d103      	bne.n	801fbd0 <_scanf_chars+0x80>
 801fbc8:	682b      	ldr	r3, [r5, #0]
 801fbca:	781b      	ldrb	r3, [r3, #0]
 801fbcc:	703b      	strb	r3, [r7, #0]
 801fbce:	3701      	adds	r7, #1
 801fbd0:	682a      	ldr	r2, [r5, #0]
 801fbd2:	686b      	ldr	r3, [r5, #4]
 801fbd4:	3201      	adds	r2, #1
 801fbd6:	602a      	str	r2, [r5, #0]
 801fbd8:	68a2      	ldr	r2, [r4, #8]
 801fbda:	3b01      	subs	r3, #1
 801fbdc:	3a01      	subs	r2, #1
 801fbde:	606b      	str	r3, [r5, #4]
 801fbe0:	60a2      	str	r2, [r4, #8]
 801fbe2:	2a00      	cmp	r2, #0
 801fbe4:	d009      	beq.n	801fbfa <_scanf_chars+0xaa>
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	dcc6      	bgt.n	801fb78 <_scanf_chars+0x28>
 801fbea:	23c0      	movs	r3, #192	; 0xc0
 801fbec:	005b      	lsls	r3, r3, #1
 801fbee:	58e3      	ldr	r3, [r4, r3]
 801fbf0:	0029      	movs	r1, r5
 801fbf2:	9801      	ldr	r0, [sp, #4]
 801fbf4:	4798      	blx	r3
 801fbf6:	2800      	cmp	r0, #0
 801fbf8:	d0be      	beq.n	801fb78 <_scanf_chars+0x28>
 801fbfa:	2310      	movs	r3, #16
 801fbfc:	6822      	ldr	r2, [r4, #0]
 801fbfe:	4013      	ands	r3, r2
 801fc00:	d106      	bne.n	801fc10 <_scanf_chars+0xc0>
 801fc02:	68e2      	ldr	r2, [r4, #12]
 801fc04:	3201      	adds	r2, #1
 801fc06:	60e2      	str	r2, [r4, #12]
 801fc08:	69a2      	ldr	r2, [r4, #24]
 801fc0a:	2a00      	cmp	r2, #0
 801fc0c:	d000      	beq.n	801fc10 <_scanf_chars+0xc0>
 801fc0e:	703b      	strb	r3, [r7, #0]
 801fc10:	6923      	ldr	r3, [r4, #16]
 801fc12:	2000      	movs	r0, #0
 801fc14:	199e      	adds	r6, r3, r6
 801fc16:	6126      	str	r6, [r4, #16]
 801fc18:	e7c7      	b.n	801fbaa <_scanf_chars+0x5a>
	...

0801fc1c <_scanf_i>:
 801fc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc1e:	000c      	movs	r4, r1
 801fc20:	b08b      	sub	sp, #44	; 0x2c
 801fc22:	9302      	str	r3, [sp, #8]
 801fc24:	4b78      	ldr	r3, [pc, #480]	; (801fe08 <_scanf_i+0x1ec>)
 801fc26:	9004      	str	r0, [sp, #16]
 801fc28:	0016      	movs	r6, r2
 801fc2a:	aa07      	add	r2, sp, #28
 801fc2c:	cb23      	ldmia	r3!, {r0, r1, r5}
 801fc2e:	c223      	stmia	r2!, {r0, r1, r5}
 801fc30:	4b76      	ldr	r3, [pc, #472]	; (801fe0c <_scanf_i+0x1f0>)
 801fc32:	9305      	str	r3, [sp, #20]
 801fc34:	69a3      	ldr	r3, [r4, #24]
 801fc36:	2b03      	cmp	r3, #3
 801fc38:	d101      	bne.n	801fc3e <_scanf_i+0x22>
 801fc3a:	4b75      	ldr	r3, [pc, #468]	; (801fe10 <_scanf_i+0x1f4>)
 801fc3c:	9305      	str	r3, [sp, #20]
 801fc3e:	22ae      	movs	r2, #174	; 0xae
 801fc40:	2000      	movs	r0, #0
 801fc42:	68a3      	ldr	r3, [r4, #8]
 801fc44:	0052      	lsls	r2, r2, #1
 801fc46:	1e59      	subs	r1, r3, #1
 801fc48:	9003      	str	r0, [sp, #12]
 801fc4a:	4291      	cmp	r1, r2
 801fc4c:	d905      	bls.n	801fc5a <_scanf_i+0x3e>
 801fc4e:	3b5e      	subs	r3, #94	; 0x5e
 801fc50:	3bff      	subs	r3, #255	; 0xff
 801fc52:	9303      	str	r3, [sp, #12]
 801fc54:	235e      	movs	r3, #94	; 0x5e
 801fc56:	33ff      	adds	r3, #255	; 0xff
 801fc58:	60a3      	str	r3, [r4, #8]
 801fc5a:	0023      	movs	r3, r4
 801fc5c:	331c      	adds	r3, #28
 801fc5e:	9301      	str	r3, [sp, #4]
 801fc60:	23d0      	movs	r3, #208	; 0xd0
 801fc62:	2700      	movs	r7, #0
 801fc64:	6822      	ldr	r2, [r4, #0]
 801fc66:	011b      	lsls	r3, r3, #4
 801fc68:	4313      	orrs	r3, r2
 801fc6a:	6023      	str	r3, [r4, #0]
 801fc6c:	9b01      	ldr	r3, [sp, #4]
 801fc6e:	9300      	str	r3, [sp, #0]
 801fc70:	6833      	ldr	r3, [r6, #0]
 801fc72:	a807      	add	r0, sp, #28
 801fc74:	7819      	ldrb	r1, [r3, #0]
 801fc76:	00bb      	lsls	r3, r7, #2
 801fc78:	2202      	movs	r2, #2
 801fc7a:	5818      	ldr	r0, [r3, r0]
 801fc7c:	f000 fa88 	bl	8020190 <memchr>
 801fc80:	2800      	cmp	r0, #0
 801fc82:	d02b      	beq.n	801fcdc <_scanf_i+0xc0>
 801fc84:	2f01      	cmp	r7, #1
 801fc86:	d162      	bne.n	801fd4e <_scanf_i+0x132>
 801fc88:	6863      	ldr	r3, [r4, #4]
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d106      	bne.n	801fc9c <_scanf_i+0x80>
 801fc8e:	3308      	adds	r3, #8
 801fc90:	6822      	ldr	r2, [r4, #0]
 801fc92:	6063      	str	r3, [r4, #4]
 801fc94:	33f9      	adds	r3, #249	; 0xf9
 801fc96:	33ff      	adds	r3, #255	; 0xff
 801fc98:	4313      	orrs	r3, r2
 801fc9a:	6023      	str	r3, [r4, #0]
 801fc9c:	4b5d      	ldr	r3, [pc, #372]	; (801fe14 <_scanf_i+0x1f8>)
 801fc9e:	6822      	ldr	r2, [r4, #0]
 801fca0:	4013      	ands	r3, r2
 801fca2:	6023      	str	r3, [r4, #0]
 801fca4:	68a3      	ldr	r3, [r4, #8]
 801fca6:	1e5a      	subs	r2, r3, #1
 801fca8:	60a2      	str	r2, [r4, #8]
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	d016      	beq.n	801fcdc <_scanf_i+0xc0>
 801fcae:	6833      	ldr	r3, [r6, #0]
 801fcb0:	1c5a      	adds	r2, r3, #1
 801fcb2:	6032      	str	r2, [r6, #0]
 801fcb4:	781b      	ldrb	r3, [r3, #0]
 801fcb6:	9a00      	ldr	r2, [sp, #0]
 801fcb8:	7013      	strb	r3, [r2, #0]
 801fcba:	6873      	ldr	r3, [r6, #4]
 801fcbc:	1c55      	adds	r5, r2, #1
 801fcbe:	3b01      	subs	r3, #1
 801fcc0:	6073      	str	r3, [r6, #4]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	dc09      	bgt.n	801fcda <_scanf_i+0xbe>
 801fcc6:	23c0      	movs	r3, #192	; 0xc0
 801fcc8:	005b      	lsls	r3, r3, #1
 801fcca:	58e3      	ldr	r3, [r4, r3]
 801fccc:	0031      	movs	r1, r6
 801fcce:	9804      	ldr	r0, [sp, #16]
 801fcd0:	9300      	str	r3, [sp, #0]
 801fcd2:	4798      	blx	r3
 801fcd4:	2800      	cmp	r0, #0
 801fcd6:	d000      	beq.n	801fcda <_scanf_i+0xbe>
 801fcd8:	e080      	b.n	801fddc <_scanf_i+0x1c0>
 801fcda:	9500      	str	r5, [sp, #0]
 801fcdc:	3701      	adds	r7, #1
 801fcde:	2f03      	cmp	r7, #3
 801fce0:	d1c6      	bne.n	801fc70 <_scanf_i+0x54>
 801fce2:	6863      	ldr	r3, [r4, #4]
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	d101      	bne.n	801fcec <_scanf_i+0xd0>
 801fce8:	330a      	adds	r3, #10
 801fcea:	6063      	str	r3, [r4, #4]
 801fcec:	2110      	movs	r1, #16
 801fcee:	2700      	movs	r7, #0
 801fcf0:	6863      	ldr	r3, [r4, #4]
 801fcf2:	6960      	ldr	r0, [r4, #20]
 801fcf4:	1ac9      	subs	r1, r1, r3
 801fcf6:	4b48      	ldr	r3, [pc, #288]	; (801fe18 <_scanf_i+0x1fc>)
 801fcf8:	18c9      	adds	r1, r1, r3
 801fcfa:	f000 f891 	bl	801fe20 <__sccl>
 801fcfe:	9d00      	ldr	r5, [sp, #0]
 801fd00:	68a3      	ldr	r3, [r4, #8]
 801fd02:	6822      	ldr	r2, [r4, #0]
 801fd04:	9300      	str	r3, [sp, #0]
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d041      	beq.n	801fd8e <_scanf_i+0x172>
 801fd0a:	6831      	ldr	r1, [r6, #0]
 801fd0c:	6963      	ldr	r3, [r4, #20]
 801fd0e:	7808      	ldrb	r0, [r1, #0]
 801fd10:	5c1b      	ldrb	r3, [r3, r0]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d03b      	beq.n	801fd8e <_scanf_i+0x172>
 801fd16:	2830      	cmp	r0, #48	; 0x30
 801fd18:	d129      	bne.n	801fd6e <_scanf_i+0x152>
 801fd1a:	2380      	movs	r3, #128	; 0x80
 801fd1c:	011b      	lsls	r3, r3, #4
 801fd1e:	421a      	tst	r2, r3
 801fd20:	d025      	beq.n	801fd6e <_scanf_i+0x152>
 801fd22:	9b03      	ldr	r3, [sp, #12]
 801fd24:	3701      	adds	r7, #1
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d005      	beq.n	801fd36 <_scanf_i+0x11a>
 801fd2a:	001a      	movs	r2, r3
 801fd2c:	9b00      	ldr	r3, [sp, #0]
 801fd2e:	3a01      	subs	r2, #1
 801fd30:	3301      	adds	r3, #1
 801fd32:	9203      	str	r2, [sp, #12]
 801fd34:	60a3      	str	r3, [r4, #8]
 801fd36:	6873      	ldr	r3, [r6, #4]
 801fd38:	3b01      	subs	r3, #1
 801fd3a:	6073      	str	r3, [r6, #4]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	dd1d      	ble.n	801fd7c <_scanf_i+0x160>
 801fd40:	6833      	ldr	r3, [r6, #0]
 801fd42:	3301      	adds	r3, #1
 801fd44:	6033      	str	r3, [r6, #0]
 801fd46:	68a3      	ldr	r3, [r4, #8]
 801fd48:	3b01      	subs	r3, #1
 801fd4a:	60a3      	str	r3, [r4, #8]
 801fd4c:	e7d8      	b.n	801fd00 <_scanf_i+0xe4>
 801fd4e:	2f02      	cmp	r7, #2
 801fd50:	d1a8      	bne.n	801fca4 <_scanf_i+0x88>
 801fd52:	21c0      	movs	r1, #192	; 0xc0
 801fd54:	2380      	movs	r3, #128	; 0x80
 801fd56:	6822      	ldr	r2, [r4, #0]
 801fd58:	00c9      	lsls	r1, r1, #3
 801fd5a:	4011      	ands	r1, r2
 801fd5c:	009b      	lsls	r3, r3, #2
 801fd5e:	4299      	cmp	r1, r3
 801fd60:	d1bf      	bne.n	801fce2 <_scanf_i+0xc6>
 801fd62:	3bf1      	subs	r3, #241	; 0xf1
 801fd64:	3bff      	subs	r3, #255	; 0xff
 801fd66:	6063      	str	r3, [r4, #4]
 801fd68:	33f0      	adds	r3, #240	; 0xf0
 801fd6a:	4313      	orrs	r3, r2
 801fd6c:	e799      	b.n	801fca2 <_scanf_i+0x86>
 801fd6e:	4b2b      	ldr	r3, [pc, #172]	; (801fe1c <_scanf_i+0x200>)
 801fd70:	4013      	ands	r3, r2
 801fd72:	6023      	str	r3, [r4, #0]
 801fd74:	780b      	ldrb	r3, [r1, #0]
 801fd76:	702b      	strb	r3, [r5, #0]
 801fd78:	3501      	adds	r5, #1
 801fd7a:	e7dc      	b.n	801fd36 <_scanf_i+0x11a>
 801fd7c:	23c0      	movs	r3, #192	; 0xc0
 801fd7e:	005b      	lsls	r3, r3, #1
 801fd80:	58e3      	ldr	r3, [r4, r3]
 801fd82:	0031      	movs	r1, r6
 801fd84:	9804      	ldr	r0, [sp, #16]
 801fd86:	9300      	str	r3, [sp, #0]
 801fd88:	4798      	blx	r3
 801fd8a:	2800      	cmp	r0, #0
 801fd8c:	d0db      	beq.n	801fd46 <_scanf_i+0x12a>
 801fd8e:	6823      	ldr	r3, [r4, #0]
 801fd90:	05db      	lsls	r3, r3, #23
 801fd92:	d50e      	bpl.n	801fdb2 <_scanf_i+0x196>
 801fd94:	9b01      	ldr	r3, [sp, #4]
 801fd96:	429d      	cmp	r5, r3
 801fd98:	d907      	bls.n	801fdaa <_scanf_i+0x18e>
 801fd9a:	23be      	movs	r3, #190	; 0xbe
 801fd9c:	3d01      	subs	r5, #1
 801fd9e:	005b      	lsls	r3, r3, #1
 801fda0:	7829      	ldrb	r1, [r5, #0]
 801fda2:	58e3      	ldr	r3, [r4, r3]
 801fda4:	0032      	movs	r2, r6
 801fda6:	9804      	ldr	r0, [sp, #16]
 801fda8:	4798      	blx	r3
 801fdaa:	9b01      	ldr	r3, [sp, #4]
 801fdac:	2001      	movs	r0, #1
 801fdae:	429d      	cmp	r5, r3
 801fdb0:	d027      	beq.n	801fe02 <_scanf_i+0x1e6>
 801fdb2:	2210      	movs	r2, #16
 801fdb4:	6823      	ldr	r3, [r4, #0]
 801fdb6:	401a      	ands	r2, r3
 801fdb8:	d11c      	bne.n	801fdf4 <_scanf_i+0x1d8>
 801fdba:	702a      	strb	r2, [r5, #0]
 801fdbc:	6863      	ldr	r3, [r4, #4]
 801fdbe:	9901      	ldr	r1, [sp, #4]
 801fdc0:	9804      	ldr	r0, [sp, #16]
 801fdc2:	9e05      	ldr	r6, [sp, #20]
 801fdc4:	47b0      	blx	r6
 801fdc6:	9b02      	ldr	r3, [sp, #8]
 801fdc8:	6821      	ldr	r1, [r4, #0]
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	068a      	lsls	r2, r1, #26
 801fdce:	d507      	bpl.n	801fde0 <_scanf_i+0x1c4>
 801fdd0:	1d1a      	adds	r2, r3, #4
 801fdd2:	9902      	ldr	r1, [sp, #8]
 801fdd4:	600a      	str	r2, [r1, #0]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	6018      	str	r0, [r3, #0]
 801fdda:	e008      	b.n	801fdee <_scanf_i+0x1d2>
 801fddc:	2700      	movs	r7, #0
 801fdde:	e7d6      	b.n	801fd8e <_scanf_i+0x172>
 801fde0:	1d1a      	adds	r2, r3, #4
 801fde2:	07ce      	lsls	r6, r1, #31
 801fde4:	d5f5      	bpl.n	801fdd2 <_scanf_i+0x1b6>
 801fde6:	9902      	ldr	r1, [sp, #8]
 801fde8:	600a      	str	r2, [r1, #0]
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	8018      	strh	r0, [r3, #0]
 801fdee:	68e3      	ldr	r3, [r4, #12]
 801fdf0:	3301      	adds	r3, #1
 801fdf2:	60e3      	str	r3, [r4, #12]
 801fdf4:	2000      	movs	r0, #0
 801fdf6:	9b01      	ldr	r3, [sp, #4]
 801fdf8:	1aed      	subs	r5, r5, r3
 801fdfa:	6923      	ldr	r3, [r4, #16]
 801fdfc:	19ef      	adds	r7, r5, r7
 801fdfe:	19df      	adds	r7, r3, r7
 801fe00:	6127      	str	r7, [r4, #16]
 801fe02:	b00b      	add	sp, #44	; 0x2c
 801fe04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe06:	46c0      	nop			; (mov r8, r8)
 801fe08:	080212d4 	.word	0x080212d4
 801fe0c:	080200ad 	.word	0x080200ad
 801fe10:	0801ff85 	.word	0x0801ff85
 801fe14:	fffffaff 	.word	0xfffffaff
 801fe18:	0802242b 	.word	0x0802242b
 801fe1c:	fffff6ff 	.word	0xfffff6ff

0801fe20 <__sccl>:
 801fe20:	b570      	push	{r4, r5, r6, lr}
 801fe22:	780b      	ldrb	r3, [r1, #0]
 801fe24:	0005      	movs	r5, r0
 801fe26:	2b5e      	cmp	r3, #94	; 0x5e
 801fe28:	d018      	beq.n	801fe5c <__sccl+0x3c>
 801fe2a:	1c4a      	adds	r2, r1, #1
 801fe2c:	2100      	movs	r1, #0
 801fe2e:	0028      	movs	r0, r5
 801fe30:	1c6c      	adds	r4, r5, #1
 801fe32:	34ff      	adds	r4, #255	; 0xff
 801fe34:	7001      	strb	r1, [r0, #0]
 801fe36:	3001      	adds	r0, #1
 801fe38:	42a0      	cmp	r0, r4
 801fe3a:	d1fb      	bne.n	801fe34 <__sccl+0x14>
 801fe3c:	1e50      	subs	r0, r2, #1
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d00b      	beq.n	801fe5a <__sccl+0x3a>
 801fe42:	2001      	movs	r0, #1
 801fe44:	4041      	eors	r1, r0
 801fe46:	54e9      	strb	r1, [r5, r3]
 801fe48:	7814      	ldrb	r4, [r2, #0]
 801fe4a:	1c50      	adds	r0, r2, #1
 801fe4c:	2c2d      	cmp	r4, #45	; 0x2d
 801fe4e:	d00c      	beq.n	801fe6a <__sccl+0x4a>
 801fe50:	2c5d      	cmp	r4, #93	; 0x5d
 801fe52:	d002      	beq.n	801fe5a <__sccl+0x3a>
 801fe54:	2c00      	cmp	r4, #0
 801fe56:	d105      	bne.n	801fe64 <__sccl+0x44>
 801fe58:	0010      	movs	r0, r2
 801fe5a:	bd70      	pop	{r4, r5, r6, pc}
 801fe5c:	1c8a      	adds	r2, r1, #2
 801fe5e:	784b      	ldrb	r3, [r1, #1]
 801fe60:	2101      	movs	r1, #1
 801fe62:	e7e4      	b.n	801fe2e <__sccl+0xe>
 801fe64:	0023      	movs	r3, r4
 801fe66:	0002      	movs	r2, r0
 801fe68:	e7ed      	b.n	801fe46 <__sccl+0x26>
 801fe6a:	7856      	ldrb	r6, [r2, #1]
 801fe6c:	2e5d      	cmp	r6, #93	; 0x5d
 801fe6e:	d0f9      	beq.n	801fe64 <__sccl+0x44>
 801fe70:	42b3      	cmp	r3, r6
 801fe72:	dcf7      	bgt.n	801fe64 <__sccl+0x44>
 801fe74:	3202      	adds	r2, #2
 801fe76:	3301      	adds	r3, #1
 801fe78:	54e9      	strb	r1, [r5, r3]
 801fe7a:	429e      	cmp	r6, r3
 801fe7c:	dcfb      	bgt.n	801fe76 <__sccl+0x56>
 801fe7e:	e7e3      	b.n	801fe48 <__sccl+0x28>

0801fe80 <_strtol_l.isra.0>:
 801fe80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe82:	001f      	movs	r7, r3
 801fe84:	000e      	movs	r6, r1
 801fe86:	b087      	sub	sp, #28
 801fe88:	9005      	str	r0, [sp, #20]
 801fe8a:	9101      	str	r1, [sp, #4]
 801fe8c:	9202      	str	r2, [sp, #8]
 801fe8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fe90:	7834      	ldrb	r4, [r6, #0]
 801fe92:	f000 f959 	bl	8020148 <__locale_ctype_ptr_l>
 801fe96:	2208      	movs	r2, #8
 801fe98:	1900      	adds	r0, r0, r4
 801fe9a:	7843      	ldrb	r3, [r0, #1]
 801fe9c:	1c75      	adds	r5, r6, #1
 801fe9e:	4013      	ands	r3, r2
 801fea0:	d136      	bne.n	801ff10 <_strtol_l.isra.0+0x90>
 801fea2:	2c2d      	cmp	r4, #45	; 0x2d
 801fea4:	d136      	bne.n	801ff14 <_strtol_l.isra.0+0x94>
 801fea6:	1cb5      	adds	r5, r6, #2
 801fea8:	7874      	ldrb	r4, [r6, #1]
 801feaa:	2601      	movs	r6, #1
 801feac:	2f00      	cmp	r7, #0
 801feae:	d062      	beq.n	801ff76 <_strtol_l.isra.0+0xf6>
 801feb0:	2f10      	cmp	r7, #16
 801feb2:	d109      	bne.n	801fec8 <_strtol_l.isra.0+0x48>
 801feb4:	2c30      	cmp	r4, #48	; 0x30
 801feb6:	d107      	bne.n	801fec8 <_strtol_l.isra.0+0x48>
 801feb8:	2220      	movs	r2, #32
 801feba:	782b      	ldrb	r3, [r5, #0]
 801febc:	4393      	bics	r3, r2
 801febe:	2b58      	cmp	r3, #88	; 0x58
 801fec0:	d154      	bne.n	801ff6c <_strtol_l.isra.0+0xec>
 801fec2:	2710      	movs	r7, #16
 801fec4:	786c      	ldrb	r4, [r5, #1]
 801fec6:	3502      	adds	r5, #2
 801fec8:	4b2d      	ldr	r3, [pc, #180]	; (801ff80 <_strtol_l.isra.0+0x100>)
 801feca:	0039      	movs	r1, r7
 801fecc:	18f3      	adds	r3, r6, r3
 801fece:	0018      	movs	r0, r3
 801fed0:	9303      	str	r3, [sp, #12]
 801fed2:	f7e0 f9a7 	bl	8000224 <__aeabi_uidivmod>
 801fed6:	9104      	str	r1, [sp, #16]
 801fed8:	2101      	movs	r1, #1
 801feda:	2300      	movs	r3, #0
 801fedc:	4249      	negs	r1, r1
 801fede:	0002      	movs	r2, r0
 801fee0:	468c      	mov	ip, r1
 801fee2:	0018      	movs	r0, r3
 801fee4:	0021      	movs	r1, r4
 801fee6:	3930      	subs	r1, #48	; 0x30
 801fee8:	2909      	cmp	r1, #9
 801feea:	d81a      	bhi.n	801ff22 <_strtol_l.isra.0+0xa2>
 801feec:	000c      	movs	r4, r1
 801feee:	42a7      	cmp	r7, r4
 801fef0:	dd23      	ble.n	801ff3a <_strtol_l.isra.0+0xba>
 801fef2:	1c59      	adds	r1, r3, #1
 801fef4:	d009      	beq.n	801ff0a <_strtol_l.isra.0+0x8a>
 801fef6:	4663      	mov	r3, ip
 801fef8:	4282      	cmp	r2, r0
 801fefa:	d306      	bcc.n	801ff0a <_strtol_l.isra.0+0x8a>
 801fefc:	d102      	bne.n	801ff04 <_strtol_l.isra.0+0x84>
 801fefe:	9904      	ldr	r1, [sp, #16]
 801ff00:	42a1      	cmp	r1, r4
 801ff02:	db02      	blt.n	801ff0a <_strtol_l.isra.0+0x8a>
 801ff04:	2301      	movs	r3, #1
 801ff06:	4378      	muls	r0, r7
 801ff08:	1820      	adds	r0, r4, r0
 801ff0a:	782c      	ldrb	r4, [r5, #0]
 801ff0c:	3501      	adds	r5, #1
 801ff0e:	e7e9      	b.n	801fee4 <_strtol_l.isra.0+0x64>
 801ff10:	002e      	movs	r6, r5
 801ff12:	e7bc      	b.n	801fe8e <_strtol_l.isra.0+0xe>
 801ff14:	2c2b      	cmp	r4, #43	; 0x2b
 801ff16:	d001      	beq.n	801ff1c <_strtol_l.isra.0+0x9c>
 801ff18:	001e      	movs	r6, r3
 801ff1a:	e7c7      	b.n	801feac <_strtol_l.isra.0+0x2c>
 801ff1c:	1cb5      	adds	r5, r6, #2
 801ff1e:	7874      	ldrb	r4, [r6, #1]
 801ff20:	e7fa      	b.n	801ff18 <_strtol_l.isra.0+0x98>
 801ff22:	0021      	movs	r1, r4
 801ff24:	3941      	subs	r1, #65	; 0x41
 801ff26:	2919      	cmp	r1, #25
 801ff28:	d801      	bhi.n	801ff2e <_strtol_l.isra.0+0xae>
 801ff2a:	3c37      	subs	r4, #55	; 0x37
 801ff2c:	e7df      	b.n	801feee <_strtol_l.isra.0+0x6e>
 801ff2e:	0021      	movs	r1, r4
 801ff30:	3961      	subs	r1, #97	; 0x61
 801ff32:	2919      	cmp	r1, #25
 801ff34:	d801      	bhi.n	801ff3a <_strtol_l.isra.0+0xba>
 801ff36:	3c57      	subs	r4, #87	; 0x57
 801ff38:	e7d9      	b.n	801feee <_strtol_l.isra.0+0x6e>
 801ff3a:	1c5a      	adds	r2, r3, #1
 801ff3c:	d108      	bne.n	801ff50 <_strtol_l.isra.0+0xd0>
 801ff3e:	9a05      	ldr	r2, [sp, #20]
 801ff40:	3323      	adds	r3, #35	; 0x23
 801ff42:	6013      	str	r3, [r2, #0]
 801ff44:	9b02      	ldr	r3, [sp, #8]
 801ff46:	9803      	ldr	r0, [sp, #12]
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d109      	bne.n	801ff60 <_strtol_l.isra.0+0xe0>
 801ff4c:	b007      	add	sp, #28
 801ff4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff50:	2e00      	cmp	r6, #0
 801ff52:	d000      	beq.n	801ff56 <_strtol_l.isra.0+0xd6>
 801ff54:	4240      	negs	r0, r0
 801ff56:	9a02      	ldr	r2, [sp, #8]
 801ff58:	2a00      	cmp	r2, #0
 801ff5a:	d0f7      	beq.n	801ff4c <_strtol_l.isra.0+0xcc>
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d001      	beq.n	801ff64 <_strtol_l.isra.0+0xe4>
 801ff60:	1e6b      	subs	r3, r5, #1
 801ff62:	9301      	str	r3, [sp, #4]
 801ff64:	9b02      	ldr	r3, [sp, #8]
 801ff66:	9a01      	ldr	r2, [sp, #4]
 801ff68:	601a      	str	r2, [r3, #0]
 801ff6a:	e7ef      	b.n	801ff4c <_strtol_l.isra.0+0xcc>
 801ff6c:	2430      	movs	r4, #48	; 0x30
 801ff6e:	2f00      	cmp	r7, #0
 801ff70:	d1aa      	bne.n	801fec8 <_strtol_l.isra.0+0x48>
 801ff72:	2708      	movs	r7, #8
 801ff74:	e7a8      	b.n	801fec8 <_strtol_l.isra.0+0x48>
 801ff76:	2c30      	cmp	r4, #48	; 0x30
 801ff78:	d09e      	beq.n	801feb8 <_strtol_l.isra.0+0x38>
 801ff7a:	270a      	movs	r7, #10
 801ff7c:	e7a4      	b.n	801fec8 <_strtol_l.isra.0+0x48>
 801ff7e:	46c0      	nop			; (mov r8, r8)
 801ff80:	7fffffff 	.word	0x7fffffff

0801ff84 <_strtol_r>:
 801ff84:	b513      	push	{r0, r1, r4, lr}
 801ff86:	4c05      	ldr	r4, [pc, #20]	; (801ff9c <_strtol_r+0x18>)
 801ff88:	6824      	ldr	r4, [r4, #0]
 801ff8a:	6a24      	ldr	r4, [r4, #32]
 801ff8c:	2c00      	cmp	r4, #0
 801ff8e:	d100      	bne.n	801ff92 <_strtol_r+0xe>
 801ff90:	4c03      	ldr	r4, [pc, #12]	; (801ffa0 <_strtol_r+0x1c>)
 801ff92:	9400      	str	r4, [sp, #0]
 801ff94:	f7ff ff74 	bl	801fe80 <_strtol_l.isra.0>
 801ff98:	bd16      	pop	{r1, r2, r4, pc}
 801ff9a:	46c0      	nop			; (mov r8, r8)
 801ff9c:	200000b8 	.word	0x200000b8
 801ffa0:	2000011c 	.word	0x2000011c

0801ffa4 <_strtoul_l.isra.0>:
 801ffa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffa6:	001f      	movs	r7, r3
 801ffa8:	000e      	movs	r6, r1
 801ffaa:	b085      	sub	sp, #20
 801ffac:	9003      	str	r0, [sp, #12]
 801ffae:	9101      	str	r1, [sp, #4]
 801ffb0:	9202      	str	r2, [sp, #8]
 801ffb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ffb4:	7834      	ldrb	r4, [r6, #0]
 801ffb6:	f000 f8c7 	bl	8020148 <__locale_ctype_ptr_l>
 801ffba:	2208      	movs	r2, #8
 801ffbc:	1900      	adds	r0, r0, r4
 801ffbe:	7843      	ldrb	r3, [r0, #1]
 801ffc0:	1c75      	adds	r5, r6, #1
 801ffc2:	4013      	ands	r3, r2
 801ffc4:	d138      	bne.n	8020038 <_strtoul_l.isra.0+0x94>
 801ffc6:	2c2d      	cmp	r4, #45	; 0x2d
 801ffc8:	d138      	bne.n	802003c <_strtoul_l.isra.0+0x98>
 801ffca:	7874      	ldrb	r4, [r6, #1]
 801ffcc:	1cb5      	adds	r5, r6, #2
 801ffce:	3301      	adds	r3, #1
 801ffd0:	9300      	str	r3, [sp, #0]
 801ffd2:	2f00      	cmp	r7, #0
 801ffd4:	d065      	beq.n	80200a2 <_strtoul_l.isra.0+0xfe>
 801ffd6:	2f10      	cmp	r7, #16
 801ffd8:	d109      	bne.n	801ffee <_strtoul_l.isra.0+0x4a>
 801ffda:	2c30      	cmp	r4, #48	; 0x30
 801ffdc:	d107      	bne.n	801ffee <_strtoul_l.isra.0+0x4a>
 801ffde:	2220      	movs	r2, #32
 801ffe0:	782b      	ldrb	r3, [r5, #0]
 801ffe2:	4393      	bics	r3, r2
 801ffe4:	2b58      	cmp	r3, #88	; 0x58
 801ffe6:	d157      	bne.n	8020098 <_strtoul_l.isra.0+0xf4>
 801ffe8:	2710      	movs	r7, #16
 801ffea:	786c      	ldrb	r4, [r5, #1]
 801ffec:	3502      	adds	r5, #2
 801ffee:	2001      	movs	r0, #1
 801fff0:	0039      	movs	r1, r7
 801fff2:	4240      	negs	r0, r0
 801fff4:	f7e0 f890 	bl	8000118 <__udivsi3>
 801fff8:	0006      	movs	r6, r0
 801fffa:	2001      	movs	r0, #1
 801fffc:	0039      	movs	r1, r7
 801fffe:	4240      	negs	r0, r0
 8020000:	f7e0 f910 	bl	8000224 <__aeabi_uidivmod>
 8020004:	2300      	movs	r3, #0
 8020006:	2201      	movs	r2, #1
 8020008:	468c      	mov	ip, r1
 802000a:	0018      	movs	r0, r3
 802000c:	4252      	negs	r2, r2
 802000e:	0021      	movs	r1, r4
 8020010:	3930      	subs	r1, #48	; 0x30
 8020012:	2909      	cmp	r1, #9
 8020014:	d817      	bhi.n	8020046 <_strtoul_l.isra.0+0xa2>
 8020016:	000c      	movs	r4, r1
 8020018:	42a7      	cmp	r7, r4
 802001a:	dd22      	ble.n	8020062 <_strtoul_l.isra.0+0xbe>
 802001c:	2b00      	cmp	r3, #0
 802001e:	db1e      	blt.n	802005e <_strtoul_l.isra.0+0xba>
 8020020:	0013      	movs	r3, r2
 8020022:	4286      	cmp	r6, r0
 8020024:	d305      	bcc.n	8020032 <_strtoul_l.isra.0+0x8e>
 8020026:	d101      	bne.n	802002c <_strtoul_l.isra.0+0x88>
 8020028:	45a4      	cmp	ip, r4
 802002a:	db02      	blt.n	8020032 <_strtoul_l.isra.0+0x8e>
 802002c:	2301      	movs	r3, #1
 802002e:	4378      	muls	r0, r7
 8020030:	1820      	adds	r0, r4, r0
 8020032:	782c      	ldrb	r4, [r5, #0]
 8020034:	3501      	adds	r5, #1
 8020036:	e7ea      	b.n	802000e <_strtoul_l.isra.0+0x6a>
 8020038:	002e      	movs	r6, r5
 802003a:	e7ba      	b.n	801ffb2 <_strtoul_l.isra.0+0xe>
 802003c:	2c2b      	cmp	r4, #43	; 0x2b
 802003e:	d1c7      	bne.n	801ffd0 <_strtoul_l.isra.0+0x2c>
 8020040:	1cb5      	adds	r5, r6, #2
 8020042:	7874      	ldrb	r4, [r6, #1]
 8020044:	e7c4      	b.n	801ffd0 <_strtoul_l.isra.0+0x2c>
 8020046:	0021      	movs	r1, r4
 8020048:	3941      	subs	r1, #65	; 0x41
 802004a:	2919      	cmp	r1, #25
 802004c:	d801      	bhi.n	8020052 <_strtoul_l.isra.0+0xae>
 802004e:	3c37      	subs	r4, #55	; 0x37
 8020050:	e7e2      	b.n	8020018 <_strtoul_l.isra.0+0x74>
 8020052:	0021      	movs	r1, r4
 8020054:	3961      	subs	r1, #97	; 0x61
 8020056:	2919      	cmp	r1, #25
 8020058:	d803      	bhi.n	8020062 <_strtoul_l.isra.0+0xbe>
 802005a:	3c57      	subs	r4, #87	; 0x57
 802005c:	e7dc      	b.n	8020018 <_strtoul_l.isra.0+0x74>
 802005e:	0013      	movs	r3, r2
 8020060:	e7e7      	b.n	8020032 <_strtoul_l.isra.0+0x8e>
 8020062:	2b00      	cmp	r3, #0
 8020064:	da09      	bge.n	802007a <_strtoul_l.isra.0+0xd6>
 8020066:	2322      	movs	r3, #34	; 0x22
 8020068:	2001      	movs	r0, #1
 802006a:	9a03      	ldr	r2, [sp, #12]
 802006c:	4240      	negs	r0, r0
 802006e:	6013      	str	r3, [r2, #0]
 8020070:	9b02      	ldr	r3, [sp, #8]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d10a      	bne.n	802008c <_strtoul_l.isra.0+0xe8>
 8020076:	b005      	add	sp, #20
 8020078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802007a:	9a00      	ldr	r2, [sp, #0]
 802007c:	2a00      	cmp	r2, #0
 802007e:	d000      	beq.n	8020082 <_strtoul_l.isra.0+0xde>
 8020080:	4240      	negs	r0, r0
 8020082:	9a02      	ldr	r2, [sp, #8]
 8020084:	2a00      	cmp	r2, #0
 8020086:	d0f6      	beq.n	8020076 <_strtoul_l.isra.0+0xd2>
 8020088:	2b00      	cmp	r3, #0
 802008a:	d001      	beq.n	8020090 <_strtoul_l.isra.0+0xec>
 802008c:	1e6b      	subs	r3, r5, #1
 802008e:	9301      	str	r3, [sp, #4]
 8020090:	9b02      	ldr	r3, [sp, #8]
 8020092:	9a01      	ldr	r2, [sp, #4]
 8020094:	601a      	str	r2, [r3, #0]
 8020096:	e7ee      	b.n	8020076 <_strtoul_l.isra.0+0xd2>
 8020098:	2430      	movs	r4, #48	; 0x30
 802009a:	2f00      	cmp	r7, #0
 802009c:	d1a7      	bne.n	801ffee <_strtoul_l.isra.0+0x4a>
 802009e:	2708      	movs	r7, #8
 80200a0:	e7a5      	b.n	801ffee <_strtoul_l.isra.0+0x4a>
 80200a2:	2c30      	cmp	r4, #48	; 0x30
 80200a4:	d09b      	beq.n	801ffde <_strtoul_l.isra.0+0x3a>
 80200a6:	270a      	movs	r7, #10
 80200a8:	e7a1      	b.n	801ffee <_strtoul_l.isra.0+0x4a>
	...

080200ac <_strtoul_r>:
 80200ac:	b513      	push	{r0, r1, r4, lr}
 80200ae:	4c05      	ldr	r4, [pc, #20]	; (80200c4 <_strtoul_r+0x18>)
 80200b0:	6824      	ldr	r4, [r4, #0]
 80200b2:	6a24      	ldr	r4, [r4, #32]
 80200b4:	2c00      	cmp	r4, #0
 80200b6:	d100      	bne.n	80200ba <_strtoul_r+0xe>
 80200b8:	4c03      	ldr	r4, [pc, #12]	; (80200c8 <_strtoul_r+0x1c>)
 80200ba:	9400      	str	r4, [sp, #0]
 80200bc:	f7ff ff72 	bl	801ffa4 <_strtoul_l.isra.0>
 80200c0:	bd16      	pop	{r1, r2, r4, pc}
 80200c2:	46c0      	nop			; (mov r8, r8)
 80200c4:	200000b8 	.word	0x200000b8
 80200c8:	2000011c 	.word	0x2000011c

080200cc <__submore>:
 80200cc:	000b      	movs	r3, r1
 80200ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80200d0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80200d2:	3344      	adds	r3, #68	; 0x44
 80200d4:	000c      	movs	r4, r1
 80200d6:	429d      	cmp	r5, r3
 80200d8:	d11c      	bne.n	8020114 <__submore+0x48>
 80200da:	2680      	movs	r6, #128	; 0x80
 80200dc:	00f6      	lsls	r6, r6, #3
 80200de:	0031      	movs	r1, r6
 80200e0:	f000 f8ac 	bl	802023c <_malloc_r>
 80200e4:	2800      	cmp	r0, #0
 80200e6:	d102      	bne.n	80200ee <__submore+0x22>
 80200e8:	2001      	movs	r0, #1
 80200ea:	4240      	negs	r0, r0
 80200ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80200ee:	0023      	movs	r3, r4
 80200f0:	6360      	str	r0, [r4, #52]	; 0x34
 80200f2:	63a6      	str	r6, [r4, #56]	; 0x38
 80200f4:	3346      	adds	r3, #70	; 0x46
 80200f6:	781a      	ldrb	r2, [r3, #0]
 80200f8:	4b10      	ldr	r3, [pc, #64]	; (802013c <__submore+0x70>)
 80200fa:	54c2      	strb	r2, [r0, r3]
 80200fc:	0023      	movs	r3, r4
 80200fe:	3345      	adds	r3, #69	; 0x45
 8020100:	781a      	ldrb	r2, [r3, #0]
 8020102:	4b0f      	ldr	r3, [pc, #60]	; (8020140 <__submore+0x74>)
 8020104:	54c2      	strb	r2, [r0, r3]
 8020106:	782a      	ldrb	r2, [r5, #0]
 8020108:	4b0e      	ldr	r3, [pc, #56]	; (8020144 <__submore+0x78>)
 802010a:	54c2      	strb	r2, [r0, r3]
 802010c:	18c0      	adds	r0, r0, r3
 802010e:	6020      	str	r0, [r4, #0]
 8020110:	2000      	movs	r0, #0
 8020112:	e7eb      	b.n	80200ec <__submore+0x20>
 8020114:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8020116:	0029      	movs	r1, r5
 8020118:	0073      	lsls	r3, r6, #1
 802011a:	001a      	movs	r2, r3
 802011c:	9301      	str	r3, [sp, #4]
 802011e:	f000 f8eb 	bl	80202f8 <_realloc_r>
 8020122:	1e05      	subs	r5, r0, #0
 8020124:	d0e0      	beq.n	80200e8 <__submore+0x1c>
 8020126:	1987      	adds	r7, r0, r6
 8020128:	0001      	movs	r1, r0
 802012a:	0032      	movs	r2, r6
 802012c:	0038      	movs	r0, r7
 802012e:	f7fe ffe9 	bl	801f104 <memcpy>
 8020132:	9b01      	ldr	r3, [sp, #4]
 8020134:	6027      	str	r7, [r4, #0]
 8020136:	6365      	str	r5, [r4, #52]	; 0x34
 8020138:	63a3      	str	r3, [r4, #56]	; 0x38
 802013a:	e7e9      	b.n	8020110 <__submore+0x44>
 802013c:	000003ff 	.word	0x000003ff
 8020140:	000003fe 	.word	0x000003fe
 8020144:	000003fd 	.word	0x000003fd

08020148 <__locale_ctype_ptr_l>:
 8020148:	30ec      	adds	r0, #236	; 0xec
 802014a:	6800      	ldr	r0, [r0, #0]
 802014c:	4770      	bx	lr
	...

08020150 <__locale_ctype_ptr>:
 8020150:	4b04      	ldr	r3, [pc, #16]	; (8020164 <__locale_ctype_ptr+0x14>)
 8020152:	681b      	ldr	r3, [r3, #0]
 8020154:	6a1b      	ldr	r3, [r3, #32]
 8020156:	2b00      	cmp	r3, #0
 8020158:	d100      	bne.n	802015c <__locale_ctype_ptr+0xc>
 802015a:	4b03      	ldr	r3, [pc, #12]	; (8020168 <__locale_ctype_ptr+0x18>)
 802015c:	33ec      	adds	r3, #236	; 0xec
 802015e:	6818      	ldr	r0, [r3, #0]
 8020160:	4770      	bx	lr
 8020162:	46c0      	nop			; (mov r8, r8)
 8020164:	200000b8 	.word	0x200000b8
 8020168:	2000011c 	.word	0x2000011c

0802016c <__ascii_mbtowc>:
 802016c:	b082      	sub	sp, #8
 802016e:	2900      	cmp	r1, #0
 8020170:	d100      	bne.n	8020174 <__ascii_mbtowc+0x8>
 8020172:	a901      	add	r1, sp, #4
 8020174:	1e10      	subs	r0, r2, #0
 8020176:	d006      	beq.n	8020186 <__ascii_mbtowc+0x1a>
 8020178:	2b00      	cmp	r3, #0
 802017a:	d006      	beq.n	802018a <__ascii_mbtowc+0x1e>
 802017c:	7813      	ldrb	r3, [r2, #0]
 802017e:	600b      	str	r3, [r1, #0]
 8020180:	7810      	ldrb	r0, [r2, #0]
 8020182:	1e43      	subs	r3, r0, #1
 8020184:	4198      	sbcs	r0, r3
 8020186:	b002      	add	sp, #8
 8020188:	4770      	bx	lr
 802018a:	2002      	movs	r0, #2
 802018c:	4240      	negs	r0, r0
 802018e:	e7fa      	b.n	8020186 <__ascii_mbtowc+0x1a>

08020190 <memchr>:
 8020190:	b2c9      	uxtb	r1, r1
 8020192:	1882      	adds	r2, r0, r2
 8020194:	4290      	cmp	r0, r2
 8020196:	d101      	bne.n	802019c <memchr+0xc>
 8020198:	2000      	movs	r0, #0
 802019a:	4770      	bx	lr
 802019c:	7803      	ldrb	r3, [r0, #0]
 802019e:	428b      	cmp	r3, r1
 80201a0:	d0fb      	beq.n	802019a <memchr+0xa>
 80201a2:	3001      	adds	r0, #1
 80201a4:	e7f6      	b.n	8020194 <memchr+0x4>
	...

080201a8 <_free_r>:
 80201a8:	b570      	push	{r4, r5, r6, lr}
 80201aa:	0005      	movs	r5, r0
 80201ac:	2900      	cmp	r1, #0
 80201ae:	d010      	beq.n	80201d2 <_free_r+0x2a>
 80201b0:	1f0c      	subs	r4, r1, #4
 80201b2:	6823      	ldr	r3, [r4, #0]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	da00      	bge.n	80201ba <_free_r+0x12>
 80201b8:	18e4      	adds	r4, r4, r3
 80201ba:	0028      	movs	r0, r5
 80201bc:	f000 f8e0 	bl	8020380 <__malloc_lock>
 80201c0:	4a1d      	ldr	r2, [pc, #116]	; (8020238 <_free_r+0x90>)
 80201c2:	6813      	ldr	r3, [r2, #0]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d105      	bne.n	80201d4 <_free_r+0x2c>
 80201c8:	6063      	str	r3, [r4, #4]
 80201ca:	6014      	str	r4, [r2, #0]
 80201cc:	0028      	movs	r0, r5
 80201ce:	f000 f8d8 	bl	8020382 <__malloc_unlock>
 80201d2:	bd70      	pop	{r4, r5, r6, pc}
 80201d4:	42a3      	cmp	r3, r4
 80201d6:	d909      	bls.n	80201ec <_free_r+0x44>
 80201d8:	6821      	ldr	r1, [r4, #0]
 80201da:	1860      	adds	r0, r4, r1
 80201dc:	4283      	cmp	r3, r0
 80201de:	d1f3      	bne.n	80201c8 <_free_r+0x20>
 80201e0:	6818      	ldr	r0, [r3, #0]
 80201e2:	685b      	ldr	r3, [r3, #4]
 80201e4:	1841      	adds	r1, r0, r1
 80201e6:	6021      	str	r1, [r4, #0]
 80201e8:	e7ee      	b.n	80201c8 <_free_r+0x20>
 80201ea:	0013      	movs	r3, r2
 80201ec:	685a      	ldr	r2, [r3, #4]
 80201ee:	2a00      	cmp	r2, #0
 80201f0:	d001      	beq.n	80201f6 <_free_r+0x4e>
 80201f2:	42a2      	cmp	r2, r4
 80201f4:	d9f9      	bls.n	80201ea <_free_r+0x42>
 80201f6:	6819      	ldr	r1, [r3, #0]
 80201f8:	1858      	adds	r0, r3, r1
 80201fa:	42a0      	cmp	r0, r4
 80201fc:	d10b      	bne.n	8020216 <_free_r+0x6e>
 80201fe:	6820      	ldr	r0, [r4, #0]
 8020200:	1809      	adds	r1, r1, r0
 8020202:	1858      	adds	r0, r3, r1
 8020204:	6019      	str	r1, [r3, #0]
 8020206:	4282      	cmp	r2, r0
 8020208:	d1e0      	bne.n	80201cc <_free_r+0x24>
 802020a:	6810      	ldr	r0, [r2, #0]
 802020c:	6852      	ldr	r2, [r2, #4]
 802020e:	1841      	adds	r1, r0, r1
 8020210:	6019      	str	r1, [r3, #0]
 8020212:	605a      	str	r2, [r3, #4]
 8020214:	e7da      	b.n	80201cc <_free_r+0x24>
 8020216:	42a0      	cmp	r0, r4
 8020218:	d902      	bls.n	8020220 <_free_r+0x78>
 802021a:	230c      	movs	r3, #12
 802021c:	602b      	str	r3, [r5, #0]
 802021e:	e7d5      	b.n	80201cc <_free_r+0x24>
 8020220:	6821      	ldr	r1, [r4, #0]
 8020222:	1860      	adds	r0, r4, r1
 8020224:	4282      	cmp	r2, r0
 8020226:	d103      	bne.n	8020230 <_free_r+0x88>
 8020228:	6810      	ldr	r0, [r2, #0]
 802022a:	6852      	ldr	r2, [r2, #4]
 802022c:	1841      	adds	r1, r0, r1
 802022e:	6021      	str	r1, [r4, #0]
 8020230:	6062      	str	r2, [r4, #4]
 8020232:	605c      	str	r4, [r3, #4]
 8020234:	e7ca      	b.n	80201cc <_free_r+0x24>
 8020236:	46c0      	nop			; (mov r8, r8)
 8020238:	200012e4 	.word	0x200012e4

0802023c <_malloc_r>:
 802023c:	2303      	movs	r3, #3
 802023e:	b570      	push	{r4, r5, r6, lr}
 8020240:	1ccd      	adds	r5, r1, #3
 8020242:	439d      	bics	r5, r3
 8020244:	3508      	adds	r5, #8
 8020246:	0006      	movs	r6, r0
 8020248:	2d0c      	cmp	r5, #12
 802024a:	d21e      	bcs.n	802028a <_malloc_r+0x4e>
 802024c:	250c      	movs	r5, #12
 802024e:	42a9      	cmp	r1, r5
 8020250:	d81d      	bhi.n	802028e <_malloc_r+0x52>
 8020252:	0030      	movs	r0, r6
 8020254:	f000 f894 	bl	8020380 <__malloc_lock>
 8020258:	4a25      	ldr	r2, [pc, #148]	; (80202f0 <_malloc_r+0xb4>)
 802025a:	6814      	ldr	r4, [r2, #0]
 802025c:	0021      	movs	r1, r4
 802025e:	2900      	cmp	r1, #0
 8020260:	d119      	bne.n	8020296 <_malloc_r+0x5a>
 8020262:	4c24      	ldr	r4, [pc, #144]	; (80202f4 <_malloc_r+0xb8>)
 8020264:	6823      	ldr	r3, [r4, #0]
 8020266:	2b00      	cmp	r3, #0
 8020268:	d103      	bne.n	8020272 <_malloc_r+0x36>
 802026a:	0030      	movs	r0, r6
 802026c:	f000 f86a 	bl	8020344 <_sbrk_r>
 8020270:	6020      	str	r0, [r4, #0]
 8020272:	0029      	movs	r1, r5
 8020274:	0030      	movs	r0, r6
 8020276:	f000 f865 	bl	8020344 <_sbrk_r>
 802027a:	1c43      	adds	r3, r0, #1
 802027c:	d12b      	bne.n	80202d6 <_malloc_r+0x9a>
 802027e:	230c      	movs	r3, #12
 8020280:	0030      	movs	r0, r6
 8020282:	6033      	str	r3, [r6, #0]
 8020284:	f000 f87d 	bl	8020382 <__malloc_unlock>
 8020288:	e003      	b.n	8020292 <_malloc_r+0x56>
 802028a:	2d00      	cmp	r5, #0
 802028c:	dadf      	bge.n	802024e <_malloc_r+0x12>
 802028e:	230c      	movs	r3, #12
 8020290:	6033      	str	r3, [r6, #0]
 8020292:	2000      	movs	r0, #0
 8020294:	bd70      	pop	{r4, r5, r6, pc}
 8020296:	680b      	ldr	r3, [r1, #0]
 8020298:	1b5b      	subs	r3, r3, r5
 802029a:	d419      	bmi.n	80202d0 <_malloc_r+0x94>
 802029c:	2b0b      	cmp	r3, #11
 802029e:	d903      	bls.n	80202a8 <_malloc_r+0x6c>
 80202a0:	600b      	str	r3, [r1, #0]
 80202a2:	18cc      	adds	r4, r1, r3
 80202a4:	6025      	str	r5, [r4, #0]
 80202a6:	e003      	b.n	80202b0 <_malloc_r+0x74>
 80202a8:	684b      	ldr	r3, [r1, #4]
 80202aa:	428c      	cmp	r4, r1
 80202ac:	d10d      	bne.n	80202ca <_malloc_r+0x8e>
 80202ae:	6013      	str	r3, [r2, #0]
 80202b0:	0030      	movs	r0, r6
 80202b2:	f000 f866 	bl	8020382 <__malloc_unlock>
 80202b6:	0020      	movs	r0, r4
 80202b8:	2207      	movs	r2, #7
 80202ba:	300b      	adds	r0, #11
 80202bc:	1d23      	adds	r3, r4, #4
 80202be:	4390      	bics	r0, r2
 80202c0:	1ac3      	subs	r3, r0, r3
 80202c2:	d0e7      	beq.n	8020294 <_malloc_r+0x58>
 80202c4:	425a      	negs	r2, r3
 80202c6:	50e2      	str	r2, [r4, r3]
 80202c8:	e7e4      	b.n	8020294 <_malloc_r+0x58>
 80202ca:	6063      	str	r3, [r4, #4]
 80202cc:	000c      	movs	r4, r1
 80202ce:	e7ef      	b.n	80202b0 <_malloc_r+0x74>
 80202d0:	000c      	movs	r4, r1
 80202d2:	6849      	ldr	r1, [r1, #4]
 80202d4:	e7c3      	b.n	802025e <_malloc_r+0x22>
 80202d6:	2303      	movs	r3, #3
 80202d8:	1cc4      	adds	r4, r0, #3
 80202da:	439c      	bics	r4, r3
 80202dc:	42a0      	cmp	r0, r4
 80202de:	d0e1      	beq.n	80202a4 <_malloc_r+0x68>
 80202e0:	1a21      	subs	r1, r4, r0
 80202e2:	0030      	movs	r0, r6
 80202e4:	f000 f82e 	bl	8020344 <_sbrk_r>
 80202e8:	1c43      	adds	r3, r0, #1
 80202ea:	d1db      	bne.n	80202a4 <_malloc_r+0x68>
 80202ec:	e7c7      	b.n	802027e <_malloc_r+0x42>
 80202ee:	46c0      	nop			; (mov r8, r8)
 80202f0:	200012e4 	.word	0x200012e4
 80202f4:	200012e8 	.word	0x200012e8

080202f8 <_realloc_r>:
 80202f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202fa:	0007      	movs	r7, r0
 80202fc:	000d      	movs	r5, r1
 80202fe:	0016      	movs	r6, r2
 8020300:	2900      	cmp	r1, #0
 8020302:	d105      	bne.n	8020310 <_realloc_r+0x18>
 8020304:	0011      	movs	r1, r2
 8020306:	f7ff ff99 	bl	802023c <_malloc_r>
 802030a:	0004      	movs	r4, r0
 802030c:	0020      	movs	r0, r4
 802030e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020310:	2a00      	cmp	r2, #0
 8020312:	d103      	bne.n	802031c <_realloc_r+0x24>
 8020314:	f7ff ff48 	bl	80201a8 <_free_r>
 8020318:	0034      	movs	r4, r6
 802031a:	e7f7      	b.n	802030c <_realloc_r+0x14>
 802031c:	f000 f832 	bl	8020384 <_malloc_usable_size_r>
 8020320:	002c      	movs	r4, r5
 8020322:	42b0      	cmp	r0, r6
 8020324:	d2f2      	bcs.n	802030c <_realloc_r+0x14>
 8020326:	0031      	movs	r1, r6
 8020328:	0038      	movs	r0, r7
 802032a:	f7ff ff87 	bl	802023c <_malloc_r>
 802032e:	1e04      	subs	r4, r0, #0
 8020330:	d0ec      	beq.n	802030c <_realloc_r+0x14>
 8020332:	0029      	movs	r1, r5
 8020334:	0032      	movs	r2, r6
 8020336:	f7fe fee5 	bl	801f104 <memcpy>
 802033a:	0029      	movs	r1, r5
 802033c:	0038      	movs	r0, r7
 802033e:	f7ff ff33 	bl	80201a8 <_free_r>
 8020342:	e7e3      	b.n	802030c <_realloc_r+0x14>

08020344 <_sbrk_r>:
 8020344:	2300      	movs	r3, #0
 8020346:	b570      	push	{r4, r5, r6, lr}
 8020348:	4c06      	ldr	r4, [pc, #24]	; (8020364 <_sbrk_r+0x20>)
 802034a:	0005      	movs	r5, r0
 802034c:	0008      	movs	r0, r1
 802034e:	6023      	str	r3, [r4, #0]
 8020350:	f7e3 fb92 	bl	8003a78 <_sbrk>
 8020354:	1c43      	adds	r3, r0, #1
 8020356:	d103      	bne.n	8020360 <_sbrk_r+0x1c>
 8020358:	6823      	ldr	r3, [r4, #0]
 802035a:	2b00      	cmp	r3, #0
 802035c:	d000      	beq.n	8020360 <_sbrk_r+0x1c>
 802035e:	602b      	str	r3, [r5, #0]
 8020360:	bd70      	pop	{r4, r5, r6, pc}
 8020362:	46c0      	nop			; (mov r8, r8)
 8020364:	20001770 	.word	0x20001770

08020368 <__ascii_wctomb>:
 8020368:	1e0b      	subs	r3, r1, #0
 802036a:	d004      	beq.n	8020376 <__ascii_wctomb+0xe>
 802036c:	2aff      	cmp	r2, #255	; 0xff
 802036e:	d904      	bls.n	802037a <__ascii_wctomb+0x12>
 8020370:	238a      	movs	r3, #138	; 0x8a
 8020372:	6003      	str	r3, [r0, #0]
 8020374:	3b8b      	subs	r3, #139	; 0x8b
 8020376:	0018      	movs	r0, r3
 8020378:	4770      	bx	lr
 802037a:	700a      	strb	r2, [r1, #0]
 802037c:	2301      	movs	r3, #1
 802037e:	e7fa      	b.n	8020376 <__ascii_wctomb+0xe>

08020380 <__malloc_lock>:
 8020380:	4770      	bx	lr

08020382 <__malloc_unlock>:
 8020382:	4770      	bx	lr

08020384 <_malloc_usable_size_r>:
 8020384:	1f0b      	subs	r3, r1, #4
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	1f18      	subs	r0, r3, #4
 802038a:	2b00      	cmp	r3, #0
 802038c:	da01      	bge.n	8020392 <_malloc_usable_size_r+0xe>
 802038e:	580b      	ldr	r3, [r1, r0]
 8020390:	18c0      	adds	r0, r0, r3
 8020392:	4770      	bx	lr

08020394 <ceil>:
 8020394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020396:	004b      	lsls	r3, r1, #1
 8020398:	4a39      	ldr	r2, [pc, #228]	; (8020480 <ceil+0xec>)
 802039a:	0d5b      	lsrs	r3, r3, #21
 802039c:	b085      	sub	sp, #20
 802039e:	189e      	adds	r6, r3, r2
 80203a0:	000c      	movs	r4, r1
 80203a2:	0005      	movs	r5, r0
 80203a4:	9003      	str	r0, [sp, #12]
 80203a6:	2e13      	cmp	r6, #19
 80203a8:	dc32      	bgt.n	8020410 <ceil+0x7c>
 80203aa:	2e00      	cmp	r6, #0
 80203ac:	da13      	bge.n	80203d6 <ceil+0x42>
 80203ae:	4a35      	ldr	r2, [pc, #212]	; (8020484 <ceil+0xf0>)
 80203b0:	4b35      	ldr	r3, [pc, #212]	; (8020488 <ceil+0xf4>)
 80203b2:	f7e0 fbd3 	bl	8000b5c <__aeabi_dadd>
 80203b6:	2200      	movs	r2, #0
 80203b8:	2300      	movs	r3, #0
 80203ba:	f7e0 f84d 	bl	8000458 <__aeabi_dcmpgt>
 80203be:	2800      	cmp	r0, #0
 80203c0:	d006      	beq.n	80203d0 <ceil+0x3c>
 80203c2:	2c00      	cmp	r4, #0
 80203c4:	db57      	blt.n	8020476 <ceil+0xe2>
 80203c6:	432c      	orrs	r4, r5
 80203c8:	2500      	movs	r5, #0
 80203ca:	42ac      	cmp	r4, r5
 80203cc:	d000      	beq.n	80203d0 <ceil+0x3c>
 80203ce:	4c2f      	ldr	r4, [pc, #188]	; (802048c <ceil+0xf8>)
 80203d0:	0028      	movs	r0, r5
 80203d2:	0021      	movs	r1, r4
 80203d4:	e026      	b.n	8020424 <ceil+0x90>
 80203d6:	4f2e      	ldr	r7, [pc, #184]	; (8020490 <ceil+0xfc>)
 80203d8:	4137      	asrs	r7, r6
 80203da:	003b      	movs	r3, r7
 80203dc:	400b      	ands	r3, r1
 80203de:	4303      	orrs	r3, r0
 80203e0:	d020      	beq.n	8020424 <ceil+0x90>
 80203e2:	9000      	str	r0, [sp, #0]
 80203e4:	9101      	str	r1, [sp, #4]
 80203e6:	4a27      	ldr	r2, [pc, #156]	; (8020484 <ceil+0xf0>)
 80203e8:	4b27      	ldr	r3, [pc, #156]	; (8020488 <ceil+0xf4>)
 80203ea:	9800      	ldr	r0, [sp, #0]
 80203ec:	9901      	ldr	r1, [sp, #4]
 80203ee:	f7e0 fbb5 	bl	8000b5c <__aeabi_dadd>
 80203f2:	2200      	movs	r2, #0
 80203f4:	2300      	movs	r3, #0
 80203f6:	f7e0 f82f 	bl	8000458 <__aeabi_dcmpgt>
 80203fa:	2800      	cmp	r0, #0
 80203fc:	d0e8      	beq.n	80203d0 <ceil+0x3c>
 80203fe:	2c00      	cmp	r4, #0
 8020400:	dd03      	ble.n	802040a <ceil+0x76>
 8020402:	2380      	movs	r3, #128	; 0x80
 8020404:	035b      	lsls	r3, r3, #13
 8020406:	4133      	asrs	r3, r6
 8020408:	18e4      	adds	r4, r4, r3
 802040a:	43bc      	bics	r4, r7
 802040c:	2500      	movs	r5, #0
 802040e:	e7df      	b.n	80203d0 <ceil+0x3c>
 8020410:	2e33      	cmp	r6, #51	; 0x33
 8020412:	dd09      	ble.n	8020428 <ceil+0x94>
 8020414:	2380      	movs	r3, #128	; 0x80
 8020416:	00db      	lsls	r3, r3, #3
 8020418:	429e      	cmp	r6, r3
 802041a:	d103      	bne.n	8020424 <ceil+0x90>
 802041c:	0002      	movs	r2, r0
 802041e:	000b      	movs	r3, r1
 8020420:	f7e0 fb9c 	bl	8000b5c <__aeabi_dadd>
 8020424:	b005      	add	sp, #20
 8020426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020428:	2701      	movs	r7, #1
 802042a:	4a1a      	ldr	r2, [pc, #104]	; (8020494 <ceil+0x100>)
 802042c:	427f      	negs	r7, r7
 802042e:	189b      	adds	r3, r3, r2
 8020430:	40df      	lsrs	r7, r3
 8020432:	4238      	tst	r0, r7
 8020434:	d0f6      	beq.n	8020424 <ceil+0x90>
 8020436:	9000      	str	r0, [sp, #0]
 8020438:	9101      	str	r1, [sp, #4]
 802043a:	4a12      	ldr	r2, [pc, #72]	; (8020484 <ceil+0xf0>)
 802043c:	4b12      	ldr	r3, [pc, #72]	; (8020488 <ceil+0xf4>)
 802043e:	9800      	ldr	r0, [sp, #0]
 8020440:	9901      	ldr	r1, [sp, #4]
 8020442:	f7e0 fb8b 	bl	8000b5c <__aeabi_dadd>
 8020446:	2200      	movs	r2, #0
 8020448:	2300      	movs	r3, #0
 802044a:	f7e0 f805 	bl	8000458 <__aeabi_dcmpgt>
 802044e:	2800      	cmp	r0, #0
 8020450:	d0be      	beq.n	80203d0 <ceil+0x3c>
 8020452:	2c00      	cmp	r4, #0
 8020454:	dd02      	ble.n	802045c <ceil+0xc8>
 8020456:	2e14      	cmp	r6, #20
 8020458:	d102      	bne.n	8020460 <ceil+0xcc>
 802045a:	3401      	adds	r4, #1
 802045c:	43bd      	bics	r5, r7
 802045e:	e7b7      	b.n	80203d0 <ceil+0x3c>
 8020460:	2334      	movs	r3, #52	; 0x34
 8020462:	1b9e      	subs	r6, r3, r6
 8020464:	3b33      	subs	r3, #51	; 0x33
 8020466:	40b3      	lsls	r3, r6
 8020468:	18ed      	adds	r5, r5, r3
 802046a:	9b03      	ldr	r3, [sp, #12]
 802046c:	429d      	cmp	r5, r3
 802046e:	419b      	sbcs	r3, r3
 8020470:	425b      	negs	r3, r3
 8020472:	18e4      	adds	r4, r4, r3
 8020474:	e7f2      	b.n	802045c <ceil+0xc8>
 8020476:	2480      	movs	r4, #128	; 0x80
 8020478:	2500      	movs	r5, #0
 802047a:	0624      	lsls	r4, r4, #24
 802047c:	e7a8      	b.n	80203d0 <ceil+0x3c>
 802047e:	46c0      	nop			; (mov r8, r8)
 8020480:	fffffc01 	.word	0xfffffc01
 8020484:	8800759c 	.word	0x8800759c
 8020488:	7e37e43c 	.word	0x7e37e43c
 802048c:	3ff00000 	.word	0x3ff00000
 8020490:	000fffff 	.word	0x000fffff
 8020494:	fffffbed 	.word	0xfffffbed

08020498 <floor>:
 8020498:	b5f0      	push	{r4, r5, r6, r7, lr}
 802049a:	004b      	lsls	r3, r1, #1
 802049c:	4a39      	ldr	r2, [pc, #228]	; (8020584 <floor+0xec>)
 802049e:	0d5b      	lsrs	r3, r3, #21
 80204a0:	b085      	sub	sp, #20
 80204a2:	189e      	adds	r6, r3, r2
 80204a4:	000c      	movs	r4, r1
 80204a6:	0005      	movs	r5, r0
 80204a8:	9003      	str	r0, [sp, #12]
 80204aa:	2e13      	cmp	r6, #19
 80204ac:	dc34      	bgt.n	8020518 <floor+0x80>
 80204ae:	2e00      	cmp	r6, #0
 80204b0:	da15      	bge.n	80204de <floor+0x46>
 80204b2:	4a35      	ldr	r2, [pc, #212]	; (8020588 <floor+0xf0>)
 80204b4:	4b35      	ldr	r3, [pc, #212]	; (802058c <floor+0xf4>)
 80204b6:	f7e0 fb51 	bl	8000b5c <__aeabi_dadd>
 80204ba:	2200      	movs	r2, #0
 80204bc:	2300      	movs	r3, #0
 80204be:	f7df ffcb 	bl	8000458 <__aeabi_dcmpgt>
 80204c2:	2800      	cmp	r0, #0
 80204c4:	d008      	beq.n	80204d8 <floor+0x40>
 80204c6:	2c00      	cmp	r4, #0
 80204c8:	da59      	bge.n	802057e <floor+0xe6>
 80204ca:	0063      	lsls	r3, r4, #1
 80204cc:	085b      	lsrs	r3, r3, #1
 80204ce:	432b      	orrs	r3, r5
 80204d0:	2500      	movs	r5, #0
 80204d2:	42ab      	cmp	r3, r5
 80204d4:	d000      	beq.n	80204d8 <floor+0x40>
 80204d6:	4c2e      	ldr	r4, [pc, #184]	; (8020590 <floor+0xf8>)
 80204d8:	0028      	movs	r0, r5
 80204da:	0021      	movs	r1, r4
 80204dc:	e026      	b.n	802052c <floor+0x94>
 80204de:	4f2d      	ldr	r7, [pc, #180]	; (8020594 <floor+0xfc>)
 80204e0:	4137      	asrs	r7, r6
 80204e2:	003b      	movs	r3, r7
 80204e4:	400b      	ands	r3, r1
 80204e6:	4303      	orrs	r3, r0
 80204e8:	d020      	beq.n	802052c <floor+0x94>
 80204ea:	9000      	str	r0, [sp, #0]
 80204ec:	9101      	str	r1, [sp, #4]
 80204ee:	4a26      	ldr	r2, [pc, #152]	; (8020588 <floor+0xf0>)
 80204f0:	4b26      	ldr	r3, [pc, #152]	; (802058c <floor+0xf4>)
 80204f2:	9800      	ldr	r0, [sp, #0]
 80204f4:	9901      	ldr	r1, [sp, #4]
 80204f6:	f7e0 fb31 	bl	8000b5c <__aeabi_dadd>
 80204fa:	2200      	movs	r2, #0
 80204fc:	2300      	movs	r3, #0
 80204fe:	f7df ffab 	bl	8000458 <__aeabi_dcmpgt>
 8020502:	2800      	cmp	r0, #0
 8020504:	d0e8      	beq.n	80204d8 <floor+0x40>
 8020506:	2c00      	cmp	r4, #0
 8020508:	da03      	bge.n	8020512 <floor+0x7a>
 802050a:	2380      	movs	r3, #128	; 0x80
 802050c:	035b      	lsls	r3, r3, #13
 802050e:	4133      	asrs	r3, r6
 8020510:	18e4      	adds	r4, r4, r3
 8020512:	43bc      	bics	r4, r7
 8020514:	2500      	movs	r5, #0
 8020516:	e7df      	b.n	80204d8 <floor+0x40>
 8020518:	2e33      	cmp	r6, #51	; 0x33
 802051a:	dd09      	ble.n	8020530 <floor+0x98>
 802051c:	2380      	movs	r3, #128	; 0x80
 802051e:	00db      	lsls	r3, r3, #3
 8020520:	429e      	cmp	r6, r3
 8020522:	d103      	bne.n	802052c <floor+0x94>
 8020524:	0002      	movs	r2, r0
 8020526:	000b      	movs	r3, r1
 8020528:	f7e0 fb18 	bl	8000b5c <__aeabi_dadd>
 802052c:	b005      	add	sp, #20
 802052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020530:	2701      	movs	r7, #1
 8020532:	4a19      	ldr	r2, [pc, #100]	; (8020598 <floor+0x100>)
 8020534:	427f      	negs	r7, r7
 8020536:	189b      	adds	r3, r3, r2
 8020538:	40df      	lsrs	r7, r3
 802053a:	4238      	tst	r0, r7
 802053c:	d0f6      	beq.n	802052c <floor+0x94>
 802053e:	9000      	str	r0, [sp, #0]
 8020540:	9101      	str	r1, [sp, #4]
 8020542:	4a11      	ldr	r2, [pc, #68]	; (8020588 <floor+0xf0>)
 8020544:	4b11      	ldr	r3, [pc, #68]	; (802058c <floor+0xf4>)
 8020546:	9800      	ldr	r0, [sp, #0]
 8020548:	9901      	ldr	r1, [sp, #4]
 802054a:	f7e0 fb07 	bl	8000b5c <__aeabi_dadd>
 802054e:	2200      	movs	r2, #0
 8020550:	2300      	movs	r3, #0
 8020552:	f7df ff81 	bl	8000458 <__aeabi_dcmpgt>
 8020556:	2800      	cmp	r0, #0
 8020558:	d0be      	beq.n	80204d8 <floor+0x40>
 802055a:	2c00      	cmp	r4, #0
 802055c:	da02      	bge.n	8020564 <floor+0xcc>
 802055e:	2e14      	cmp	r6, #20
 8020560:	d102      	bne.n	8020568 <floor+0xd0>
 8020562:	3401      	adds	r4, #1
 8020564:	43bd      	bics	r5, r7
 8020566:	e7b7      	b.n	80204d8 <floor+0x40>
 8020568:	2334      	movs	r3, #52	; 0x34
 802056a:	1b9e      	subs	r6, r3, r6
 802056c:	3b33      	subs	r3, #51	; 0x33
 802056e:	40b3      	lsls	r3, r6
 8020570:	18ed      	adds	r5, r5, r3
 8020572:	9b03      	ldr	r3, [sp, #12]
 8020574:	429d      	cmp	r5, r3
 8020576:	419b      	sbcs	r3, r3
 8020578:	425b      	negs	r3, r3
 802057a:	18e4      	adds	r4, r4, r3
 802057c:	e7f2      	b.n	8020564 <floor+0xcc>
 802057e:	2500      	movs	r5, #0
 8020580:	002c      	movs	r4, r5
 8020582:	e7a9      	b.n	80204d8 <floor+0x40>
 8020584:	fffffc01 	.word	0xfffffc01
 8020588:	8800759c 	.word	0x8800759c
 802058c:	7e37e43c 	.word	0x7e37e43c
 8020590:	bff00000 	.word	0xbff00000
 8020594:	000fffff 	.word	0x000fffff
 8020598:	fffffbed 	.word	0xfffffbed

0802059c <round>:
 802059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802059e:	004a      	lsls	r2, r1, #1
 80205a0:	0007      	movs	r7, r0
 80205a2:	481f      	ldr	r0, [pc, #124]	; (8020620 <round+0x84>)
 80205a4:	0d52      	lsrs	r2, r2, #21
 80205a6:	1815      	adds	r5, r2, r0
 80205a8:	000e      	movs	r6, r1
 80205aa:	2d13      	cmp	r5, #19
 80205ac:	dc18      	bgt.n	80205e0 <round+0x44>
 80205ae:	2d00      	cmp	r5, #0
 80205b0:	da09      	bge.n	80205c6 <round+0x2a>
 80205b2:	0fcb      	lsrs	r3, r1, #31
 80205b4:	07db      	lsls	r3, r3, #31
 80205b6:	2200      	movs	r2, #0
 80205b8:	1c69      	adds	r1, r5, #1
 80205ba:	d101      	bne.n	80205c0 <round+0x24>
 80205bc:	4919      	ldr	r1, [pc, #100]	; (8020624 <round+0x88>)
 80205be:	430b      	orrs	r3, r1
 80205c0:	0019      	movs	r1, r3
 80205c2:	0010      	movs	r0, r2
 80205c4:	e017      	b.n	80205f6 <round+0x5a>
 80205c6:	4a18      	ldr	r2, [pc, #96]	; (8020628 <round+0x8c>)
 80205c8:	412a      	asrs	r2, r5
 80205ca:	420a      	tst	r2, r1
 80205cc:	d101      	bne.n	80205d2 <round+0x36>
 80205ce:	2f00      	cmp	r7, #0
 80205d0:	d012      	beq.n	80205f8 <round+0x5c>
 80205d2:	2380      	movs	r3, #128	; 0x80
 80205d4:	031b      	lsls	r3, r3, #12
 80205d6:	412b      	asrs	r3, r5
 80205d8:	199b      	adds	r3, r3, r6
 80205da:	4393      	bics	r3, r2
 80205dc:	2200      	movs	r2, #0
 80205de:	e7ef      	b.n	80205c0 <round+0x24>
 80205e0:	2d33      	cmp	r5, #51	; 0x33
 80205e2:	dd0b      	ble.n	80205fc <round+0x60>
 80205e4:	2380      	movs	r3, #128	; 0x80
 80205e6:	00db      	lsls	r3, r3, #3
 80205e8:	429d      	cmp	r5, r3
 80205ea:	d105      	bne.n	80205f8 <round+0x5c>
 80205ec:	003a      	movs	r2, r7
 80205ee:	000b      	movs	r3, r1
 80205f0:	0038      	movs	r0, r7
 80205f2:	f7e0 fab3 	bl	8000b5c <__aeabi_dadd>
 80205f6:	0007      	movs	r7, r0
 80205f8:	0038      	movs	r0, r7
 80205fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205fc:	2601      	movs	r6, #1
 80205fe:	480b      	ldr	r0, [pc, #44]	; (802062c <round+0x90>)
 8020600:	4276      	negs	r6, r6
 8020602:	1812      	adds	r2, r2, r0
 8020604:	40d6      	lsrs	r6, r2
 8020606:	423e      	tst	r6, r7
 8020608:	d0f6      	beq.n	80205f8 <round+0x5c>
 802060a:	2233      	movs	r2, #51	; 0x33
 802060c:	1b55      	subs	r5, r2, r5
 802060e:	3a32      	subs	r2, #50	; 0x32
 8020610:	40aa      	lsls	r2, r5
 8020612:	19d2      	adds	r2, r2, r7
 8020614:	42ba      	cmp	r2, r7
 8020616:	41a4      	sbcs	r4, r4
 8020618:	4264      	negs	r4, r4
 802061a:	190b      	adds	r3, r1, r4
 802061c:	43b2      	bics	r2, r6
 802061e:	e7cf      	b.n	80205c0 <round+0x24>
 8020620:	fffffc01 	.word	0xfffffc01
 8020624:	3ff00000 	.word	0x3ff00000
 8020628:	000fffff 	.word	0x000fffff
 802062c:	fffffbed 	.word	0xfffffbed

08020630 <_init>:
 8020630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020632:	46c0      	nop			; (mov r8, r8)
 8020634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020636:	bc08      	pop	{r3}
 8020638:	469e      	mov	lr, r3
 802063a:	4770      	bx	lr

0802063c <_fini>:
 802063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802063e:	46c0      	nop			; (mov r8, r8)
 8020640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020642:	bc08      	pop	{r3}
 8020644:	469e      	mov	lr, r3
 8020646:	4770      	bx	lr
